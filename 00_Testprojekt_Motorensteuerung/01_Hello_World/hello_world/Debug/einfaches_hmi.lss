
einfaches_hmi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008a  00800100  00003a04  00003a98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001bb  0080018a  0080018a  00003b22  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003b22  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003b54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000898  00000000  00000000  00003b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000121df  00000000  00000000  0000442c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000039ca  00000000  00000000  0001660b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004bc1  00000000  00000000  00019fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001bf0  00000000  00000000  0001eb98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000493d  00000000  00000000  00020788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008e9e  00000000  00000000  000250c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000900  00000000  00000000  0002df63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__ctors_end>
       4:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__vector_1>
       8:	0c 94 31 18 	jmp	0x3062	; 0x3062 <__vector_2>
       c:	0c 94 58 18 	jmp	0x30b0	; 0x30b0 <__vector_3>
      10:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__vector_4>
      14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      1c:	0c 94 a6 18 	jmp	0x314c	; 0x314c <__vector_7>
      20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      28:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <__vector_10>
      2c:	0c 94 c1 15 	jmp	0x2b82	; 0x2b82 <__vector_11>
      30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      5c:	0c 94 cd 18 	jmp	0x319a	; 0x319a <__vector_23>
      60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      90:	0c 94 15 0d 	jmp	0x1a2a	; 0x1a2a <__vector_36>
      94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      ac:	01 1a       	sub	r0, r17
      ae:	06 1a       	sub	r0, r22
      b0:	0b 1a       	sub	r0, r27
      b2:	15 1a       	sub	r1, r21
      b4:	1f 1a       	sub	r1, r31
      b6:	69 1a       	sub	r6, r25
      b8:	69 1a       	sub	r6, r25
      ba:	69 1a       	sub	r6, r25
      bc:	29 1a       	sub	r2, r25
      be:	33 1a       	sub	r3, r19
      c0:	3d 1a       	sub	r3, r29
      c2:	47 1a       	sub	r4, r23
      c4:	54 1a       	sub	r5, r20
      c6:	69 1a       	sub	r6, r25
      c8:	5c 1a       	sub	r5, r28
      ca:	8a 1a       	sub	r8, r26
      cc:	8d 1a       	sub	r8, r29
      ce:	7c 1a       	sub	r7, r28
      d0:	80 1a       	sub	r8, r16
      d2:	86 1a       	sub	r8, r22
      d4:	ae 1a       	sub	r10, r30
      d6:	ae 1a       	sub	r10, r30
      d8:	ae 1a       	sub	r10, r30
      da:	91 1a       	sub	r9, r17
      dc:	95 1a       	sub	r9, r21
      de:	99 1a       	sub	r9, r25
      e0:	9f 1a       	sub	r9, r31
      e2:	a3 1a       	sub	r10, r19
      e4:	ae 1a       	sub	r10, r30
      e6:	a9 1a       	sub	r10, r25

000000e8 <USB_DeviceDescriptorIAD>:
      e8:	12 01 00 02 ef 02 01 40 41 23 36 80 00 01 01 02     .......@A#6.....
      f8:	03 01                                               ..

000000fa <STRING_MANUFACTURER>:
      fa:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

00000106 <STRING_PRODUCT>:
     106:	41 72 64 75 69 6e 6f 20 4c 65 6f 6e 61 72 64 6f     Arduino Leonardo
	...

00000117 <STRING_LANGUAGE>:
     117:	04 03 09 04                                         ....

0000011b <digital_pin_to_timer_PGM>:
     11b:	00 00 00 02 00 09 0f 00 00 03 04 01 00 0c 00 00     ................
	...

0000013a <digital_pin_to_bit_mask_PGM>:
     13a:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     14a:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

00000159 <digital_pin_to_port_PGM>:
     159:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     169:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

00000178 <port_to_output_PGM>:
     178:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

00000186 <port_to_mode_PGM>:
     186:	00 00 00 00 24 00 27 00 2a 00 2d 00 30 00           ....$.'.*.-.0.

00000194 <_cdcInterface>:
     194:	08 0b 00 02 02 02 01 00 09 04 00 00 01 02 02 00     ................
     1a4:	00 05 24 00 10 01 05 24 01 01 01 04 24 02 06 05     ..$....$....$...
     1b4:	24 06 00 01 07 05 81 03 10 00 40 09 04 01 00 02     $.........@.....
     1c4:	0a 00 00 00 07 05 02 02 40 00 00 07 05 83 02 40     ........@......@
	...

000001d6 <__ctors_start>:
     1d6:	53 02       	muls	r21, r19
     1d8:	a9 0f       	add	r26, r25
     1da:	1f 1c       	adc	r1, r15

000001dc <__ctors_end>:
     1dc:	11 24       	eor	r1, r1
     1de:	1f be       	out	0x3f, r1	; 63
     1e0:	cf ef       	ldi	r28, 0xFF	; 255
     1e2:	da e0       	ldi	r29, 0x0A	; 10
     1e4:	de bf       	out	0x3e, r29	; 62
     1e6:	cd bf       	out	0x3d, r28	; 61

000001e8 <__do_copy_data>:
     1e8:	11 e0       	ldi	r17, 0x01	; 1
     1ea:	a0 e0       	ldi	r26, 0x00	; 0
     1ec:	b1 e0       	ldi	r27, 0x01	; 1
     1ee:	e4 e0       	ldi	r30, 0x04	; 4
     1f0:	fa e3       	ldi	r31, 0x3A	; 58
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__do_copy_data+0x10>
     1f4:	05 90       	lpm	r0, Z+
     1f6:	0d 92       	st	X+, r0
     1f8:	aa 38       	cpi	r26, 0x8A	; 138
     1fa:	b1 07       	cpc	r27, r17
     1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__do_copy_data+0xc>

000001fe <__do_clear_bss>:
     1fe:	23 e0       	ldi	r18, 0x03	; 3
     200:	aa e8       	ldi	r26, 0x8A	; 138
     202:	b1 e0       	ldi	r27, 0x01	; 1
     204:	01 c0       	rjmp	.+2      	; 0x208 <.do_clear_bss_start>

00000206 <.do_clear_bss_loop>:
     206:	1d 92       	st	X+, r1

00000208 <.do_clear_bss_start>:
     208:	a5 34       	cpi	r26, 0x45	; 69
     20a:	b2 07       	cpc	r27, r18
     20c:	e1 f7       	brne	.-8      	; 0x206 <.do_clear_bss_loop>

0000020e <__do_global_ctors>:
     20e:	10 e0       	ldi	r17, 0x00	; 0
     210:	ce ee       	ldi	r28, 0xEE	; 238
     212:	d0 e0       	ldi	r29, 0x00	; 0
     214:	04 c0       	rjmp	.+8      	; 0x21e <__do_global_ctors+0x10>
     216:	21 97       	sbiw	r28, 0x01	; 1
     218:	fe 01       	movw	r30, r28
     21a:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <__tablejump2__>
     21e:	cb 3e       	cpi	r28, 0xEB	; 235
     220:	d1 07       	cpc	r29, r17
     222:	c9 f7       	brne	.-14     	; 0x216 <__do_global_ctors+0x8>
     224:	0e 94 ee 11 	call	0x23dc	; 0x23dc <main>
     228:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <_exit>

0000022c <__bad_interrupt>:
     22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	08 95       	ret

00000236 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     236:	08 95       	ret

00000238 <_ZN7hd4478013iosetContrastEh>:
	// i/o subclass functions
	virtual int ioinit() {return 0;}	// optional - successful if not implemented
	virtual int ioread(hd44780::iotype type) {if(type) return(RV_ENOTSUP);else return(RV_ENOTSUP);}	// optional, return fail if not implemented
	virtual int iowrite(hd44780::iotype type, uint8_t value)=0;// mandatory
	virtual int iosetBacklight(uint8_t dimvalue){if(dimvalue) return(RV_ENOTSUP); else return(RV_ENOTSUP);}	// optional
	virtual int iosetContrast(uint8_t contvalue){if(contvalue) return(RV_ENOTSUP); else return(RV_ENOTSUP);}// optional
     238:	8d ef       	ldi	r24, 0xFD	; 253
     23a:	9f ef       	ldi	r25, 0xFF	; 255
     23c:	08 95       	ret

0000023e <_Z10wheelSpeedv>:

hd44780_I2Cexp lcd;

void wheelSpeed()
{
	duration++;
     23e:	20 e0       	ldi	r18, 0x00	; 0
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	40 e8       	ldi	r20, 0x80	; 128
     244:	5f e3       	ldi	r21, 0x3F	; 63
     246:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <duration>
     24a:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <duration+0x1>
     24e:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <duration+0x2>
     252:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <duration+0x3>
     256:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__addsf3>
     25a:	60 93 0c 02 	sts	0x020C, r22	; 0x80020c <duration>
     25e:	70 93 0d 02 	sts	0x020D, r23	; 0x80020d <duration+0x1>
     262:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <duration+0x2>
     266:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <duration+0x3>
     26a:	08 95       	ret

0000026c <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>:
	else
		_blCurState = 0;
}

//  LocateDevice() - Locate I2C expander device instance
uint8_t LocateDevice(uint8_t instance)
     26c:	0f 93       	push	r16
     26e:	1f 93       	push	r17
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	18 2f       	mov	r17, r24
{
uint8_t error, address;
uint8_t locinst = 0;
     276:	d0 e0       	ldi	r29, 0x00	; 0

	// 8 addresses for PCF8574 or MCP23008
	for(address = 0x20; address <= 0x27; address++ )
     278:	c0 e2       	ldi	r28, 0x20	; 32
	{
		Wire.beginTransmission(address);
     27a:	6c 2f       	mov	r22, r28
     27c:	8f e7       	ldi	r24, 0x7F	; 127
     27e:	92 e0       	ldi	r25, 0x02	; 2
     280:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_ZN7TwoWire17beginTransmissionEh>
		error = Wire.endTransmission();
     284:	8f e7       	ldi	r24, 0x7F	; 127
     286:	92 e0       	ldi	r25, 0x02	; 2
     288:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN7TwoWire15endTransmissionEv>
     28c:	08 2f       	mov	r16, r24
		// below 20us will cause it to fail
		// ESP8286 needs to make sure WDT doesn't fire so we use delay()
		// The delay(1) is overkill and not needed for other chips, but it won't
		// hurt and the loop is only 8 addresses.
		
		delay(1);
     28e:	61 e0       	ldi	r22, 0x01	; 1
     290:	70 e0       	ldi	r23, 0x00	; 0
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 48 19 	call	0x3290	; 0x3290 <delay>
		if(error == 0) // if no error we found something
     29a:	01 11       	cpse	r16, r1
     29c:	03 c0       	rjmp	.+6      	; 0x2a4 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x38>
		{
			if(locinst == instance)
     29e:	1d 17       	cp	r17, r29
     2a0:	f9 f0       	breq	.+62     	; 0x2e0 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x74>
				if(IdentifyIOexp(address) == I2Cexp_UNKNOWN) // if we can't identify it, keep looking
					continue;
#endif
				return(address);
			}
			locinst++;
     2a2:	df 5f       	subi	r29, 0xFF	; 255
{
uint8_t error, address;
uint8_t locinst = 0;

	// 8 addresses for PCF8574 or MCP23008
	for(address = 0x20; address <= 0x27; address++ )
     2a4:	cf 5f       	subi	r28, 0xFF	; 255
     2a6:	c8 32       	cpi	r28, 0x28	; 40
     2a8:	41 f7       	brne	.-48     	; 0x27a <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0xe>
     2aa:	c8 e3       	ldi	r28, 0x38	; 56
		}
	}
	// 8 addresses for PCF8574A
	for(address = 0x38; address <= 0x3f; address++ )
	{
		Wire.beginTransmission(address);
     2ac:	6c 2f       	mov	r22, r28
     2ae:	8f e7       	ldi	r24, 0x7F	; 127
     2b0:	92 e0       	ldi	r25, 0x02	; 2
     2b2:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_ZN7TwoWire17beginTransmissionEh>
		error = Wire.endTransmission();
     2b6:	8f e7       	ldi	r24, 0x7F	; 127
     2b8:	92 e0       	ldi	r25, 0x02	; 2
     2ba:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN7TwoWire15endTransmissionEv>
     2be:	08 2f       	mov	r16, r24
		// below 20us will cause it to fail.
		// ESP8286 needs to make sure WDT doesn't fire so we use delay()
		// The delay(1) is overkill and not needed for other chips, but it won't
		// hurt and the loop is only 8 addresses.
		
		delay(1);
     2c0:	61 e0       	ldi	r22, 0x01	; 1
     2c2:	70 e0       	ldi	r23, 0x00	; 0
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	0e 94 48 19 	call	0x3290	; 0x3290 <delay>
		if(error == 0) // if no error we found something
     2cc:	01 11       	cpse	r16, r1
     2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x6a>
		{
			if(locinst == instance)
     2d0:	1d 17       	cp	r17, r29
     2d2:	31 f0       	breq	.+12     	; 0x2e0 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x74>
				if(IdentifyIOexp(address) == I2Cexp_UNKNOWN) // if we can't identify it, keep looking
					continue;
#endif
				return(address);
			}
			locinst++;
     2d4:	df 5f       	subi	r29, 0xFF	; 255
			}
			locinst++;
		}
	}
	// 8 addresses for PCF8574A
	for(address = 0x38; address <= 0x3f; address++ )
     2d6:	cf 5f       	subi	r28, 0xFF	; 255
     2d8:	c0 34       	cpi	r28, 0x40	; 64
     2da:	41 f7       	brne	.-48     	; 0x2ac <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x40>
				return(address);
			}
			locinst++;
		}
	}
	return(0); // could not locate expander instance
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	01 c0       	rjmp	.+2      	; 0x2e2 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x76>
		// hurt and the loop is only 8 addresses.
		
		delay(1);
		if(error == 0) // if no error we found something
		{
			if(locinst == instance)
     2e0:	8c 2f       	mov	r24, r28
			}
			locinst++;
		}
	}
	return(0); // could not locate expander instance
}
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	1f 91       	pop	r17
     2e8:	0f 91       	pop	r16
     2ea:	08 95       	ret

000002ec <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     2ec:	dc 01       	movw	r26, r24
     2ee:	ed 91       	ld	r30, X+
     2f0:	fc 91       	ld	r31, X
     2f2:	01 90       	ld	r0, Z+
     2f4:	f0 81       	ld	r31, Z
     2f6:	e0 2d       	mov	r30, r0
     2f8:	09 94       	ijmp

000002fa <_Z11EncoderInitv>:
}

void EncoderInit()
{
	Direction = true;//default -> Forward
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <Direction>
	pinMode(encoder0pinB,INPUT);
     300:	60 e0       	ldi	r22, 0x00	; 0
     302:	87 e0       	ldi	r24, 0x07	; 7
     304:	0e 94 af 1a 	call	0x355e	; 0x355e <pinMode>
	attachInterrupt(digitalPinToInterrupt(7), wheelSpeed, CHANGE); //Pin 7 -> Interrupt 4
     308:	41 e0       	ldi	r20, 0x01	; 1
     30a:	50 e0       	ldi	r21, 0x00	; 0
     30c:	6f e1       	ldi	r22, 0x1F	; 31
     30e:	71 e0       	ldi	r23, 0x01	; 1
     310:	84 e0       	ldi	r24, 0x04	; 4
     312:	0c 94 ba 17 	jmp	0x2f74	; 0x2f74 <attachInterrupt>

00000316 <_Z7advancev>:
}

void advance()//Motor Forward
{
	digitalWrite(M_left,LOW);
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <M_left>
     31c:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <digitalWrite>
	analogWrite(E_left,val_output);
     320:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <val_output>
     324:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <val_output+0x1>
     328:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <val_output+0x2>
     32c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <val_output+0x3>
     330:	0e 94 91 10 	call	0x2122	; 0x2122 <__fixsfsi>
     334:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <E_left>
     338:	0c 94 da 19 	jmp	0x33b4	; 0x33b4 <analogWrite>

0000033c <setup>:
}

void setup()
{
	lcd.begin(16, 2);
     33c:	20 e0       	ldi	r18, 0x00	; 0
     33e:	42 e0       	ldi	r20, 0x02	; 2
     340:	60 e1       	ldi	r22, 0x10	; 16
     342:	8a e8       	ldi	r24, 0x8A	; 138
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	0e 94 2a 0b 	call	0x1654	; 0x1654 <_ZN7hd447805beginEhhh>
	lcd.noBacklight();
     34a:	8a e8       	ldi	r24, 0x8A	; 138
     34c:	91 e0       	ldi	r25, 0x01	; 1
     34e:	0e 94 c2 0a 	call	0x1584	; 0x1584 <_ZN7hd4478011noBacklightEv>
	pinMode(M_left, OUTPUT);   //L298P Control port settings DC motor driver board for the output mode
     352:	61 e0       	ldi	r22, 0x01	; 1
     354:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <M_left>
     358:	0e 94 af 1a 	call	0x355e	; 0x355e <pinMode>
	pinMode(E_left, OUTPUT);
     35c:	61 e0       	ldi	r22, 0x01	; 1
     35e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <E_left>
     362:	0e 94 af 1a 	call	0x355e	; 0x355e <pinMode>
	Setpoint =1;  //Set the output value of the PID
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	a0 e8       	ldi	r26, 0x80	; 128
     36c:	bf e3       	ldi	r27, 0x3F	; 63
     36e:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <Setpoint>
     372:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <Setpoint+0x1>
     376:	a0 93 00 02 	sts	0x0200, r26	; 0x800200 <Setpoint+0x2>
     37a:	b0 93 01 02 	sts	0x0201, r27	; 0x800201 <Setpoint+0x3>
	myPID.SetMode(AUTOMATIC);//PID is set to automatic mode
     37e:	61 e0       	ldi	r22, 0x01	; 1
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	8e eb       	ldi	r24, 0xBE	; 190
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	0e 94 8e 09 	call	0x131c	; 0x131c <_ZN3PID7SetModeEi>
	myPID.SetSampleTime(100);//Set PID sampling frequency is 100ms
     38a:	64 e6       	ldi	r22, 0x64	; 100
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	8e eb       	ldi	r24, 0xBE	; 190
     390:	91 e0       	ldi	r25, 0x01	; 1
     392:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <_ZN3PID13SetSampleTimeEi>
	EncoderInit();//Initialize the module
     396:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_Z11EncoderInitv>
	
	previousMillis = millis();
     39a:	0e 94 17 19 	call	0x322e	; 0x322e <millis>
     39e:	60 93 ba 01 	sts	0x01BA, r22	; 0x8001ba <previousMillis>
     3a2:	70 93 bb 01 	sts	0x01BB, r23	; 0x8001bb <previousMillis+0x1>
     3a6:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <previousMillis+0x2>
     3aa:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <previousMillis+0x3>
     3ae:	08 95       	ret

000003b0 <loop>:
}

void loop()
{
     3b0:	cf 92       	push	r12
     3b2:	df 92       	push	r13
     3b4:	ef 92       	push	r14
     3b6:	ff 92       	push	r15
     3b8:	0f 93       	push	r16
     3ba:	1f 93       	push	r17
	advance();//Motor Forward
     3bc:	0e 94 8b 01 	call	0x316	; 0x316 <_Z7advancev>
	currentMillis = millis();
     3c0:	0e 94 17 19 	call	0x322e	; 0x322e <millis>
     3c4:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <currentMillis>
     3c8:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <currentMillis+0x1>
     3cc:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <currentMillis+0x2>
     3d0:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <currentMillis+0x3>
	if (currentMillis - previousMillis > interval) {
     3d4:	00 91 ba 01 	lds	r16, 0x01BA	; 0x8001ba <previousMillis>
     3d8:	10 91 bb 01 	lds	r17, 0x01BB	; 0x8001bb <previousMillis+0x1>
     3dc:	20 91 bc 01 	lds	r18, 0x01BC	; 0x8001bc <previousMillis+0x2>
     3e0:	30 91 bd 01 	lds	r19, 0x01BD	; 0x8001bd <previousMillis+0x3>
     3e4:	6b 01       	movw	r12, r22
     3e6:	7c 01       	movw	r14, r24
     3e8:	c0 1a       	sub	r12, r16
     3ea:	d1 0a       	sbc	r13, r17
     3ec:	e2 0a       	sbc	r14, r18
     3ee:	f3 0a       	sbc	r15, r19
     3f0:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__data_start>
     3f4:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__data_start+0x1>
     3f8:	01 2e       	mov	r0, r17
     3fa:	00 0c       	add	r0, r0
     3fc:	22 0b       	sbc	r18, r18
     3fe:	33 0b       	sbc	r19, r19
     400:	0c 15       	cp	r16, r12
     402:	1d 05       	cpc	r17, r13
     404:	2e 05       	cpc	r18, r14
     406:	3f 05       	cpc	r19, r15
     408:	0c f0       	brlt	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     40a:	46 c0       	rjmp	.+140    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
		previousMillis = currentMillis;
     40c:	60 93 ba 01 	sts	0x01BA, r22	; 0x8001ba <previousMillis>
     410:	70 93 bb 01 	sts	0x01BB, r23	; 0x8001bb <previousMillis+0x1>
     414:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <previousMillis+0x2>
     418:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <previousMillis+0x3>
	
	abs_duration=duration * 60 / 1920;
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	40 e7       	ldi	r20, 0x70	; 112
     422:	52 e4       	ldi	r21, 0x42	; 66
     424:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <duration>
     428:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <duration+0x1>
     42c:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <duration+0x2>
     430:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <duration+0x3>
     434:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__mulsf3>
     438:	20 e0       	ldi	r18, 0x00	; 0
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	40 ef       	ldi	r20, 0xF0	; 240
     43e:	54 e4       	ldi	r21, 0x44	; 68
     440:	0e 94 1f 10 	call	0x203e	; 0x203e <__divsf3>
     444:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <abs_duration>
     448:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <abs_duration+0x1>
     44c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <abs_duration+0x2>
     450:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <abs_duration+0x3>
	
	result=myPID.Compute();//PID conversion is complete and returns 1
     454:	8e eb       	ldi	r24, 0xBE	; 190
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	0e 94 bd 06 	call	0xd7a	; 0xd7a <_ZN3PID7ComputeEv>
     45c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <result>
	if(result)
     460:	88 23       	and	r24, r24
     462:	d1 f0       	breq	.+52     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
	{
		lcd.clear();
     464:	8a e8       	ldi	r24, 0x8A	; 138
     466:	91 e0       	ldi	r25, 0x01	; 1
     468:	0e 94 01 0b 	call	0x1602	; 0x1602 <_ZN7hd447805clearEv>
		lcd.print(abs_duration);	
     46c:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <abs_duration>
     470:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <abs_duration+0x1>
     474:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <abs_duration+0x2>
     478:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <abs_duration+0x3>
     47c:	22 e0       	ldi	r18, 0x02	; 2
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	8a e8       	ldi	r24, 0x8A	; 138
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	0e 94 7e 13 	call	0x26fc	; 0x26fc <_ZN5Print5printEdi>
		duration = 0; //Count clear, wait for the next count
     488:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <duration>
     48c:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <duration+0x1>
     490:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <duration+0x2>
     494:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <duration+0x3>
	}
	}
}
     498:	1f 91       	pop	r17
     49a:	0f 91       	pop	r16
     49c:	ff 90       	pop	r15
     49e:	ef 90       	pop	r14
     4a0:	df 90       	pop	r13
     4a2:	cf 90       	pop	r12
     4a4:	08 95       	ret

000004a6 <_GLOBAL__sub_I_E_left>:
     4a6:	af 92       	push	r10
     4a8:	bf 92       	push	r11
     4aa:	cf 92       	push	r12
     4ac:	df 92       	push	r13
     4ae:	ef 92       	push	r14
     4b0:	ff 92       	push	r15
     4b2:	0f 93       	push	r16
     4b4:	1f 93       	push	r17
boolean result;

double val_output;//Power supplied to the motor PWM value.
double Setpoint;
double Kp=65, Ki=5, Kd=0;
PID myPID(&abs_duration, &val_output, &Setpoint, Kp, Ki, Kd, DIRECT);
     4b6:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <Ki>
     4ba:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <Ki+0x1>
     4be:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <Ki+0x2>
     4c2:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <Ki+0x3>
     4c6:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <Kp>
     4ca:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <Kp+0x1>
     4ce:	00 91 08 01 	lds	r16, 0x0108	; 0x800108 <Kp+0x2>
     4d2:	10 91 09 01 	lds	r17, 0x0109	; 0x800109 <Kp+0x3>
     4d6:	1f 92       	push	r1
     4d8:	1f 92       	push	r1
     4da:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <Kd+0x3>
     4de:	8f 93       	push	r24
     4e0:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <Kd+0x2>
     4e4:	8f 93       	push	r24
     4e6:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <Kd+0x1>
     4ea:	8f 93       	push	r24
     4ec:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <Kd>
     4f0:	8f 93       	push	r24
     4f2:	2e ef       	ldi	r18, 0xFE	; 254
     4f4:	31 e0       	ldi	r19, 0x01	; 1
     4f6:	42 e0       	ldi	r20, 0x02	; 2
     4f8:	52 e0       	ldi	r21, 0x02	; 2
     4fa:	68 e0       	ldi	r22, 0x08	; 8
     4fc:	72 e0       	ldi	r23, 0x02	; 2
     4fe:	8e eb       	ldi	r24, 0xBE	; 190
     500:	91 e0       	ldi	r25, 0x01	; 1
     502:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <_ZN3PIDC1EPdS0_S0_dddi>
// ====================

//	-- Automagic / auto-detect constructors --

// Auto find next instance and auto config pin mapping
hd44780_I2Cexp(){ _addr = 0; _expType = I2Cexp_UNKNOWN;}
     506:	8a e8       	ldi	r24, 0x8A	; 138
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	0e 94 8d 0a 	call	0x151a	; 0x151a <_ZN7hd44780C1Ev>
     50e:	ea e8       	ldi	r30, 0x8A	; 138
     510:	f1 e0       	ldi	r31, 0x01	; 1
     512:	8f e2       	ldi	r24, 0x2F	; 47
     514:	91 e0       	ldi	r25, 0x01	; 1
     516:	91 83       	std	Z+1, r25	; 0x01
     518:	80 83       	st	Z, r24
     51a:	10 a2       	std	Z+32, r1	; 0x20
     51c:	11 a2       	std	Z+33, r1	; 0x21
		lcd.clear();
		lcd.print(abs_duration);	
		duration = 0; //Count clear, wait for the next count
	}
	}
}
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
     528:	0f 90       	pop	r0
     52a:	1f 91       	pop	r17
     52c:	0f 91       	pop	r16
     52e:	ff 90       	pop	r15
     530:	ef 90       	pop	r14
     532:	df 90       	pop	r13
     534:	cf 90       	pop	r12
     536:	bf 90       	pop	r11
     538:	af 90       	pop	r10
     53a:	08 95       	ret

0000053c <_ZN14hd44780_I2Cexp14iosetBacklightEh>:
}

// iosetBacklight()  - set backlight brightness
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	fc 01       	movw	r30, r24
{
	if(!_bl) // backlight control?
     542:	81 a5       	ldd	r24, Z+41	; 0x29
     544:	88 23       	and	r24, r24
     546:	71 f1       	breq	.+92     	; 0x5a4 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x68>
     548:	92 a5       	ldd	r25, Z+42	; 0x2a
		return(hd44780::RV_ENOTSUP); // not backlight control support

	// dimvalue 0 is backlight off any other dimvalue is backlight on
	// configure backlight state mask according to active level
	if(((dimvalue) && (_blLevel == HIGH)) || 
     54a:	66 23       	and	r22, r22
     54c:	19 f0       	breq	.+6      	; 0x554 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x18>
     54e:	91 30       	cpi	r25, 0x01	; 1
     550:	29 f4       	brne	.+10     	; 0x55c <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
     552:	02 c0       	rjmp	.+4      	; 0x558 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x1c>
			((dimvalue == 0) && (_blLevel == LOW)))
     554:	91 11       	cpse	r25, r1
     556:	02 c0       	rjmp	.+4      	; 0x55c <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
	{
		_blCurState = _bl;
     558:	83 a7       	std	Z+43, r24	; 0x2b
     55a:	01 c0       	rjmp	.+2      	; 0x55e <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x22>
	}
	else 
	{
		_blCurState = 0;
     55c:	13 a6       	std	Z+43, r1	; 0x2b
     55e:	ef 01       	movw	r28, r30
	}
	Wire.beginTransmission(_addr);
     560:	60 a1       	ldd	r22, Z+32	; 0x20
     562:	8f e7       	ldi	r24, 0x7F	; 127
     564:	92 e0       	ldi	r25, 0x02	; 2
     566:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
     56a:	89 a1       	ldd	r24, Y+33	; 0x21
     56c:	82 30       	cpi	r24, 0x02	; 2
     56e:	31 f4       	brne	.+12     	; 0x57c <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x40>
	{
		Wire.write(9); // point to GPIO
     570:	69 e0       	ldi	r22, 0x09	; 9
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	8f e7       	ldi	r24, 0x7F	; 127
     576:	92 e0       	ldi	r25, 0x02	; 2
     578:	0e 94 76 01 	call	0x2ec	; 0x2ec <_ZN7TwoWire5writeEi>
	}
	Wire.write( _blCurState );
     57c:	6b a5       	ldd	r22, Y+43	; 0x2b
     57e:	8f e7       	ldi	r24, 0x7F	; 127
     580:	92 e0       	ldi	r25, 0x02	; 2
     582:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     586:	8f e7       	ldi	r24, 0x7F	; 127
     588:	92 e0       	ldi	r25, 0x02	; 2
     58a:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN7TwoWire15endTransmissionEv>
     58e:	21 e0       	ldi	r18, 0x01	; 1
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	81 11       	cpse	r24, r1
     594:	02 c0       	rjmp	.+4      	; 0x59a <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x5e>
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	88 27       	eor	r24, r24
     59c:	99 27       	eor	r25, r25
     59e:	82 1b       	sub	r24, r18
     5a0:	93 0b       	sbc	r25, r19
     5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x6c>
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
{
	if(!_bl) // backlight control?
		return(hd44780::RV_ENOTSUP); // not backlight control support
     5a4:	8d ef       	ldi	r24, 0xFD	; 253
     5a6:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write( _blCurState );
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR); // all is good
}
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	08 95       	ret

000005ae <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>:
	return(0);
}


// write4bits - send a nibble to the LCD through i/o expander port
void write4bits(uint8_t value, hd44780::iotype type ) 
     5ae:	cf 93       	push	r28
     5b0:	fc 01       	movw	r30, r24
{
uint8_t gpioValue =  _blCurState;
     5b2:	c3 a5       	ldd	r28, Z+43	; 0x2b
   
	// convert the value to an i/o expander port value
	// based on pin mappings
	if(value & (1 << 0))
     5b4:	60 ff       	sbrs	r22, 0
     5b6:	02 c0       	rjmp	.+4      	; 0x5bc <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0xe>
		gpioValue |= _d4;
     5b8:	85 a1       	ldd	r24, Z+37	; 0x25
     5ba:	c8 2b       	or	r28, r24

	if(value & (1 << 1))
     5bc:	61 ff       	sbrs	r22, 1
     5be:	02 c0       	rjmp	.+4      	; 0x5c4 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x16>
		gpioValue |= _d5;
     5c0:	86 a1       	ldd	r24, Z+38	; 0x26
     5c2:	c8 2b       	or	r28, r24

	if(value & (1 << 2))
     5c4:	62 ff       	sbrs	r22, 2
     5c6:	02 c0       	rjmp	.+4      	; 0x5cc <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x1e>
		gpioValue |= _d6;
     5c8:	87 a1       	ldd	r24, Z+39	; 0x27
     5ca:	c8 2b       	or	r28, r24

	if(value & (1 << 3))
     5cc:	63 ff       	sbrs	r22, 3
     5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x26>
		gpioValue |= _d7;
     5d0:	80 a5       	ldd	r24, Z+40	; 0x28
     5d2:	c8 2b       	or	r28, r24


	if(type == hd44780::HD44780_IOdata) 
     5d4:	41 30       	cpi	r20, 0x01	; 1
     5d6:	11 f4       	brne	.+4      	; 0x5dc <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x2e>
	{
		gpioValue |= _rs; // set RS high to send to data reg
     5d8:	82 a1       	ldd	r24, Z+34	; 0x22
     5da:	c8 2b       	or	r28, r24
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
     5dc:	64 a1       	ldd	r22, Z+36	; 0x24
     5de:	6c 2b       	or	r22, r28
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	8f e7       	ldi	r24, 0x7F	; 127
     5e4:	92 e0       	ldi	r25, 0x02	; 2
     5e6:	0e 94 76 01 	call	0x2ec	; 0x2ec <_ZN7TwoWire5writeEi>
	Wire.write(gpioValue);		// with E LOW
     5ea:	6c 2f       	mov	r22, r28
     5ec:	8f e7       	ldi	r24, 0x7F	; 127
     5ee:	92 e0       	ldi	r25, 0x02	; 2
}
     5f0:	cf 91       	pop	r28
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
	Wire.write(gpioValue);		// with E LOW
     5f2:	0c 94 d1 0e 	jmp	0x1da2	; 0x1da2 <_ZN7TwoWire5writeEh>

000005f6 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh>:
	return(rval);
}

// iowrite(type, value) - send either command or data byte to lcd
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
     5f6:	8f 92       	push	r8
     5f8:	9f 92       	push	r9
     5fa:	af 92       	push	r10
     5fc:	bf 92       	push	r11
     5fe:	cf 92       	push	r12
     600:	df 92       	push	r13
     602:	ef 92       	push	r14
     604:	ff 92       	push	r15
     606:	0f 93       	push	r16
     608:	1f 93       	push	r17
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	ec 01       	movw	r28, r24
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
     610:	88 a1       	ldd	r24, Y+32	; 0x20
     612:	88 23       	and	r24, r24
     614:	09 f4       	brne	.+2      	; 0x618 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x22>
     616:	50 c0       	rjmp	.+160    	; 0x6b8 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
     618:	89 a1       	ldd	r24, Y+33	; 0x21
     61a:	88 23       	and	r24, r24
     61c:	09 f4       	brne	.+2      	; 0x620 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x2a>
     61e:	4c c0       	rjmp	.+152    	; 0x6b8 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
     620:	14 2f       	mov	r17, r20
     622:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
     624:	8c 8c       	ldd	r8, Y+28	; 0x1c
     626:	9d 8c       	ldd	r9, Y+29	; 0x1d
     628:	ae 8c       	ldd	r10, Y+30	; 0x1e
     62a:	bf 8c       	ldd	r11, Y+31	; 0x1f
     62c:	c8 8c       	ldd	r12, Y+24	; 0x18
     62e:	d9 8c       	ldd	r13, Y+25	; 0x19
     630:	ea 8c       	ldd	r14, Y+26	; 0x1a
     632:	fb 8c       	ldd	r15, Y+27	; 0x1b
     634:	8d e2       	ldi	r24, 0x2D	; 45
     636:	c8 1a       	sub	r12, r24
     638:	d1 08       	sbc	r13, r1
     63a:	e1 08       	sbc	r14, r1
     63c:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
     63e:	0e 94 23 19 	call	0x3246	; 0x3246 <micros>
     642:	dc 01       	movw	r26, r24
     644:	cb 01       	movw	r24, r22
     646:	8c 19       	sub	r24, r12
     648:	9d 09       	sbc	r25, r13
     64a:	ae 09       	sbc	r26, r14
     64c:	bf 09       	sbc	r27, r15
     64e:	88 15       	cp	r24, r8
     650:	99 05       	cpc	r25, r9
     652:	aa 05       	cpc	r26, r10
     654:	bb 05       	cpc	r27, r11
     656:	98 f3       	brcs	.-26     	; 0x63e <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x48>
	 */

	waitReady(-45);
   
	// grab i2c bus
	Wire.beginTransmission(_addr);
     658:	68 a1       	ldd	r22, Y+32	; 0x20
     65a:	8f e7       	ldi	r24, 0x7F	; 127
     65c:	92 e0       	ldi	r25, 0x02	; 2
     65e:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
     662:	89 a1       	ldd	r24, Y+33	; 0x21
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	31 f4       	brne	.+12     	; 0x674 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x7e>
	{
		Wire.write(9); // point to GPIO
     668:	69 e0       	ldi	r22, 0x09	; 9
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	8f e7       	ldi	r24, 0x7F	; 127
     66e:	92 e0       	ldi	r25, 0x02	; 2
     670:	0e 94 76 01 	call	0x2ec	; 0x2ec <_ZN7TwoWire5writeEi>
	}
	// send both nibbles in same i2c connection
	write4bits( (value >> 4), type );  // send upper nibble
     674:	61 2f       	mov	r22, r17
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	84 e0       	ldi	r24, 0x04	; 4
     67a:	75 95       	asr	r23
     67c:	67 95       	ror	r22
     67e:	8a 95       	dec	r24
     680:	e1 f7       	brne	.-8      	; 0x67a <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x84>
     682:	40 2f       	mov	r20, r16
     684:	ce 01       	movw	r24, r28
     686:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	 * are used to reliably get the LCD and host in nibble sync
	 * with each other and to get the LCD into 4 bit mode.
	 * When sending a "4 bit command" only the upper nibble of
	 * of the 8 bit byte will presented on LCD signals D4-D7.
	 */
	if(type != hd44780::HD44780_IOcmd4bit)
     68a:	02 30       	cpi	r16, 0x02	; 2
     68c:	31 f0       	breq	.+12     	; 0x69a <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xa4>
	{
		write4bits( (value & 0x0F), type); // lower nibble, if not 4bit cmd
     68e:	61 2f       	mov	r22, r17
     690:	6f 70       	andi	r22, 0x0F	; 15
     692:	40 2f       	mov	r20, r16
     694:	ce 01       	movw	r24, r28
     696:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	}
	if(Wire.endTransmission())
     69a:	8f e7       	ldi	r24, 0x7F	; 127
     69c:	92 e0       	ldi	r25, 0x02	; 2
     69e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN7TwoWire15endTransmissionEv>
     6a2:	21 e0       	ldi	r18, 0x01	; 1
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	81 11       	cpse	r24, r1
     6a8:	02 c0       	rjmp	.+4      	; 0x6ae <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xb8>
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	88 27       	eor	r24, r24
     6b0:	99 27       	eor	r25, r25
     6b2:	82 1b       	sub	r24, r18
     6b4:	93 0b       	sbc	r25, r19
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc6>
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
     6b8:	8c ef       	ldi	r24, 0xFC	; 252
     6ba:	9f ef       	ldi	r25, 0xFF	; 255
	}
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR);
}
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	1f 91       	pop	r17
     6c2:	0f 91       	pop	r16
     6c4:	ff 90       	pop	r15
     6c6:	ef 90       	pop	r14
     6c8:	df 90       	pop	r13
     6ca:	cf 90       	pop	r12
     6cc:	bf 90       	pop	r11
     6ce:	af 90       	pop	r10
     6d0:	9f 90       	pop	r9
     6d2:	8f 90       	pop	r8
     6d4:	08 95       	ret

000006d6 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE>:
// ioread(type) - read a byte from LCD DDRAM
//
// returns:
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
     6d6:	8f 92       	push	r8
     6d8:	9f 92       	push	r9
     6da:	af 92       	push	r10
     6dc:	bf 92       	push	r11
     6de:	cf 92       	push	r12
     6e0:	df 92       	push	r13
     6e2:	ef 92       	push	r14
     6e4:	ff 92       	push	r15
     6e6:	0f 93       	push	r16
     6e8:	1f 93       	push	r17
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	ec 01       	movw	r28, r24
{
uint8_t gpioValue =  _blCurState;
     6f0:	1b a5       	ldd	r17, Y+43	; 0x2b
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
     6f2:	88 a1       	ldd	r24, Y+32	; 0x20
     6f4:	88 23       	and	r24, r24
     6f6:	09 f4       	brne	.+2      	; 0x6fa <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x24>
     6f8:	f6 c0       	rjmp	.+492    	; 0x8e6 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
     6fa:	89 a1       	ldd	r24, Y+33	; 0x21
     6fc:	88 23       	and	r24, r24
     6fe:	09 f4       	brne	.+2      	; 0x702 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x2c>
     700:	f2 c0       	rjmp	.+484    	; 0x8e6 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
		return(hd44780::RV_ENXIO);

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
     702:	82 30       	cpi	r24, 0x02	; 2
     704:	09 f4       	brne	.+2      	; 0x708 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x32>
     706:	f1 c0       	rjmp	.+482    	; 0x8ea <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
	{
		return(hd44780::RV_ENOTSUP);
	}

	// check if reads supported
	if(!_rw)
     708:	8b a1       	ldd	r24, Y+35	; 0x23
     70a:	88 23       	and	r24, r24
     70c:	09 f4       	brne	.+2      	; 0x710 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x3a>
     70e:	ed c0       	rjmp	.+474    	; 0x8ea <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
     710:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
     712:	8c 8c       	ldd	r8, Y+28	; 0x1c
     714:	9d 8c       	ldd	r9, Y+29	; 0x1d
     716:	ae 8c       	ldd	r10, Y+30	; 0x1e
     718:	bf 8c       	ldd	r11, Y+31	; 0x1f
     71a:	c8 8c       	ldd	r12, Y+24	; 0x18
     71c:	d9 8c       	ldd	r13, Y+25	; 0x19
     71e:	ea 8c       	ldd	r14, Y+26	; 0x1a
     720:	fb 8c       	ldd	r15, Y+27	; 0x1b
     722:	8d e2       	ldi	r24, 0x2D	; 45
     724:	c8 1a       	sub	r12, r24
     726:	d1 08       	sbc	r13, r1
     728:	e1 08       	sbc	r14, r1
     72a:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
     72c:	0e 94 23 19 	call	0x3246	; 0x3246 <micros>
     730:	dc 01       	movw	r26, r24
     732:	cb 01       	movw	r24, r22
     734:	8c 19       	sub	r24, r12
     736:	9d 09       	sbc	r25, r13
     738:	ae 09       	sbc	r26, r14
     73a:	bf 09       	sbc	r27, r15
     73c:	88 15       	cp	r24, r8
     73e:	99 05       	cpc	r25, r9
     740:	aa 05       	cpc	r26, r10
     742:	bb 05       	cpc	r27, r11
     744:	98 f3       	brcs	.-26     	; 0x72c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x56>
     746:	8d a1       	ldd	r24, Y+37	; 0x25
     748:	18 2b       	or	r17, r24
     74a:	8e a1       	ldd	r24, Y+38	; 0x26
     74c:	18 2b       	or	r17, r24
     74e:	8f a1       	ldd	r24, Y+39	; 0x27
     750:	18 2b       	or	r17, r24
   
	// put all the expander LCD data pins into input mode.
	// PCF8574 psuedo inputs use pullups so setting them to 1
	// makes them suitible for inputs.

	gpioValue |= _d4|_d5|_d6|_d7;
     752:	88 a5       	ldd	r24, Y+40	; 0x28
     754:	18 2b       	or	r17, r24

	// set RS based on type of read (data or status/cmd)
	if(type == hd44780::HD44780_IOdata) 
     756:	01 30       	cpi	r16, 0x01	; 1
     758:	11 f4       	brne	.+4      	; 0x75e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x88>
	{
		gpioValue |= _rs; // RS high to read data reg
     75a:	8a a1       	ldd	r24, Y+34	; 0x22
     75c:	18 2b       	or	r17, r24
	}

	gpioValue |= _rw; // r/w high for reading
     75e:	8b a1       	ldd	r24, Y+35	; 0x23
     760:	18 2b       	or	r17, r24

	// write all the bits to the expander port
	
	Wire.beginTransmission(_addr);
     762:	68 a1       	ldd	r22, Y+32	; 0x20
     764:	8f e7       	ldi	r24, 0x7F	; 127
     766:	92 e0       	ldi	r25, 0x02	; 2
     768:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue);		// d4-d7 are inputs, RS, r/w high, E LOW
     76c:	61 2f       	mov	r22, r17
     76e:	8f e7       	ldi	r24, 0x7F	; 127
     770:	92 e0       	ldi	r25, 0x02	; 2
     772:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     776:	8f e7       	ldi	r24, 0x7F	; 127
     778:	92 e0       	ldi	r25, 0x02	; 2
     77a:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN7TwoWire15endTransmissionEv>
     77e:	88 23       	and	r24, r24
     780:	19 f0       	breq	.+6      	; 0x788 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xb2>
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;
     782:	0f ef       	ldi	r16, 0xFF	; 255
     784:	1f ef       	ldi	r17, 0xFF	; 255
     786:	9d c0       	rjmp	.+314    	; 0x8c2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ec>
	if(Wire.endTransmission())
		goto returnStatus;


	// raise E to read the data.
	Wire.beginTransmission(_addr);
     788:	68 a1       	ldd	r22, Y+32	; 0x20
     78a:	8f e7       	ldi	r24, 0x7F	; 127
     78c:	92 e0       	ldi	r25, 0x02	; 2
     78e:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raises E 
     792:	6c a1       	ldd	r22, Y+36	; 0x24
     794:	61 2b       	or	r22, r17
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	8f e7       	ldi	r24, 0x7F	; 127
     79a:	92 e0       	ldi	r25, 0x02	; 2
     79c:	0e 94 76 01 	call	0x2ec	; 0x2ec <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
     7a0:	8f e7       	ldi	r24, 0x7F	; 127
     7a2:	92 e0       	ldi	r25, 0x02	; 2
     7a4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN7TwoWire15endTransmissionEv>
     7a8:	81 11       	cpse	r24, r1
     7aa:	eb cf       	rjmp	.-42     	; 0x782 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// read the expander port to get the upper nibble of the byte
	Wire.requestFrom((int)_addr, 1);
     7ac:	68 a1       	ldd	r22, Y+32	; 0x20
     7ae:	70 e0       	ldi	r23, 0x00	; 0
     7b0:	41 e0       	ldi	r20, 0x01	; 1
     7b2:	50 e0       	ldi	r21, 0x00	; 0
     7b4:	8f e7       	ldi	r24, 0x7F	; 127
     7b6:	92 e0       	ldi	r25, 0x02	; 2
     7b8:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <_ZN7TwoWire11requestFromEii>
	iodata = Wire.read();
     7bc:	8f e7       	ldi	r24, 0x7F	; 127
     7be:	92 e0       	ldi	r25, 0x02	; 2
     7c0:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <_ZN7TwoWire4readEv>
     7c4:	7c 01       	movw	r14, r24
	if(iodata < 0) // did we not receive a byte?
     7c6:	97 fd       	sbrc	r25, 7
     7c8:	dc cf       	rjmp	.-72     	; 0x782 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
     7ca:	68 a1       	ldd	r22, Y+32	; 0x20
     7cc:	8f e7       	ldi	r24, 0x7F	; 127
     7ce:	92 e0       	ldi	r25, 0x02	; 2
     7d0:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
     7d4:	61 2f       	mov	r22, r17
     7d6:	8f e7       	ldi	r24, 0x7F	; 127
     7d8:	92 e0       	ldi	r25, 0x02	; 2
     7da:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     7de:	8f e7       	ldi	r24, 0x7F	; 127
     7e0:	92 e0       	ldi	r25, 0x02	; 2
     7e2:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN7TwoWire15endTransmissionEv>
     7e6:	81 11       	cpse	r24, r1
     7e8:	cc cf       	rjmp	.-104    	; 0x782 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
     7ea:	8d a1       	ldd	r24, Y+37	; 0x25
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	8e 21       	and	r24, r14
     7f0:	9f 21       	and	r25, r15
     7f2:	89 2b       	or	r24, r25
     7f4:	11 f4       	brne	.+4      	; 0x7fa <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x124>
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
     7f6:	00 e0       	ldi	r16, 0x00	; 0
     7f8:	01 c0       	rjmp	.+2      	; 0x7fc <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x126>
	if(Wire.endTransmission())
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
		data |= (1 << 4);
     7fa:	00 e1       	ldi	r16, 0x10	; 16

	if(iodata & _d5)
     7fc:	8e a1       	ldd	r24, Y+38	; 0x26
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	8e 21       	and	r24, r14
     802:	9f 21       	and	r25, r15
     804:	89 2b       	or	r24, r25
     806:	09 f0       	breq	.+2      	; 0x80a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x134>
		data |= (1 << 5);
     808:	00 62       	ori	r16, 0x20	; 32

	if(iodata & _d6)
     80a:	8f a1       	ldd	r24, Y+39	; 0x27
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	8e 21       	and	r24, r14
     810:	9f 21       	and	r25, r15
     812:	89 2b       	or	r24, r25
     814:	09 f0       	breq	.+2      	; 0x818 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x142>
		data |= (1 << 6);
     816:	00 64       	ori	r16, 0x40	; 64

	if(iodata & _d7)
     818:	88 a5       	ldd	r24, Y+40	; 0x28
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	e8 22       	and	r14, r24
     81e:	f9 22       	and	r15, r25
     820:	ef 28       	or	r14, r15
     822:	09 f0       	breq	.+2      	; 0x826 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x150>
		data |= (1 << 7);
     824:	00 68       	ori	r16, 0x80	; 128
	
	Wire.beginTransmission(_addr);
     826:	68 a1       	ldd	r22, Y+32	; 0x20
     828:	8f e7       	ldi	r24, 0x7F	; 127
     82a:	92 e0       	ldi	r25, 0x02	; 2
     82c:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raise E to read next nibble
     830:	6c a1       	ldd	r22, Y+36	; 0x24
     832:	61 2b       	or	r22, r17
     834:	70 e0       	ldi	r23, 0x00	; 0
     836:	8f e7       	ldi	r24, 0x7F	; 127
     838:	92 e0       	ldi	r25, 0x02	; 2
     83a:	0e 94 76 01 	call	0x2ec	; 0x2ec <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
     83e:	8f e7       	ldi	r24, 0x7F	; 127
     840:	92 e0       	ldi	r25, 0x02	; 2
     842:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN7TwoWire15endTransmissionEv>
     846:	81 11       	cpse	r24, r1
     848:	9c cf       	rjmp	.-200    	; 0x782 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>

	// read the expander port to get the lower nibble of the byte
	// We can't look at the return value from requestFrom() on the TineyWireM
	// library as it doesn't work like it is supposed to.
	// So we look at the return status from read() instead.
	Wire.requestFrom((int)_addr, 1);
     84a:	68 a1       	ldd	r22, Y+32	; 0x20
     84c:	70 e0       	ldi	r23, 0x00	; 0
     84e:	41 e0       	ldi	r20, 0x01	; 1
     850:	50 e0       	ldi	r21, 0x00	; 0
     852:	8f e7       	ldi	r24, 0x7F	; 127
     854:	92 e0       	ldi	r25, 0x02	; 2
     856:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <_ZN7TwoWire11requestFromEii>

	iodata = Wire.read();
     85a:	8f e7       	ldi	r24, 0x7F	; 127
     85c:	92 e0       	ldi	r25, 0x02	; 2
     85e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <_ZN7TwoWire4readEv>
     862:	7c 01       	movw	r14, r24

	if(iodata < 0) // did we not receive a byte?
     864:	97 fd       	sbrc	r25, 7
     866:	8d cf       	rjmp	.-230    	; 0x782 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
     868:	68 a1       	ldd	r22, Y+32	; 0x20
     86a:	8f e7       	ldi	r24, 0x7F	; 127
     86c:	92 e0       	ldi	r25, 0x02	; 2
     86e:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
     872:	61 2f       	mov	r22, r17
     874:	8f e7       	ldi	r24, 0x7F	; 127
     876:	92 e0       	ldi	r25, 0x02	; 2
     878:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     87c:	8f e7       	ldi	r24, 0x7F	; 127
     87e:	92 e0       	ldi	r25, 0x02	; 2
     880:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN7TwoWire15endTransmissionEv>
     884:	81 11       	cpse	r24, r1
     886:	7d cf       	rjmp	.-262    	; 0x782 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into lower nibble of byte
	if(iodata & _d4)
     888:	8d a1       	ldd	r24, Y+37	; 0x25
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	8e 21       	and	r24, r14
     88e:	9f 21       	and	r25, r15
     890:	89 2b       	or	r24, r25
     892:	09 f0       	breq	.+2      	; 0x896 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1c0>
		data |= (1 << 0);
     894:	01 60       	ori	r16, 0x01	; 1

	if(iodata & _d5)
     896:	8e a1       	ldd	r24, Y+38	; 0x26
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	8e 21       	and	r24, r14
     89c:	9f 21       	and	r25, r15
     89e:	89 2b       	or	r24, r25
     8a0:	09 f0       	breq	.+2      	; 0x8a4 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ce>
		data |= (1 << 1);
     8a2:	02 60       	ori	r16, 0x02	; 2

	if(iodata & _d6)
     8a4:	8f a1       	ldd	r24, Y+39	; 0x27
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	8e 21       	and	r24, r14
     8aa:	9f 21       	and	r25, r15
     8ac:	89 2b       	or	r24, r25
     8ae:	09 f0       	breq	.+2      	; 0x8b2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1dc>
		data |= (1 << 2);
     8b0:	04 60       	ori	r16, 0x04	; 4

	if(iodata & _d7)
     8b2:	88 a5       	ldd	r24, Y+40	; 0x28
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	e8 22       	and	r14, r24
     8b8:	f9 22       	and	r15, r25
     8ba:	ef 28       	or	r14, r15
     8bc:	09 f0       	breq	.+2      	; 0x8c0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ea>
		data |= (1 << 3);
     8be:	08 60       	ori	r16, 0x08	; 8

	rval = data;
     8c0:	10 e0       	ldi	r17, 0x00	; 0

returnStatus:

	// try to put gpio port back to all outputs state with WR signal low for writes
	Wire.beginTransmission(_addr);
     8c2:	68 a1       	ldd	r22, Y+32	; 0x20
     8c4:	8f e7       	ldi	r24, 0x7F	; 127
     8c6:	92 e0       	ldi	r25, 0x02	; 2
     8c8:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(_blCurState);		// with E LOW
     8cc:	6b a5       	ldd	r22, Y+43	; 0x2b
     8ce:	8f e7       	ldi	r24, 0x7F	; 127
     8d0:	92 e0       	ldi	r25, 0x02	; 2
     8d2:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     8d6:	8f e7       	ldi	r24, 0x7F	; 127
     8d8:	92 e0       	ldi	r25, 0x02	; 2
     8da:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN7TwoWire15endTransmissionEv>
     8de:	88 23       	and	r24, r24
     8e0:	39 f0       	breq	.+14     	; 0x8f0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21a>
		rval = hd44780::RV_EIO;
     8e2:	8f ef       	ldi	r24, 0xFF	; 255
     8e4:	03 c0       	rjmp	.+6      	; 0x8ec <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
     8e6:	8c ef       	ldi	r24, 0xFC	; 252
     8e8:	01 c0       	rjmp	.+2      	; 0x8ec <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
	{
		return(hd44780::RV_ENOTSUP);
     8ea:	8d ef       	ldi	r24, 0xFD	; 253
     8ec:	9f ef       	ldi	r25, 0xFF	; 255
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21c>
     8f0:	c8 01       	movw	r24, r16
	Wire.write(_blCurState);		// with E LOW
	if(Wire.endTransmission())
		rval = hd44780::RV_EIO;

	return(rval);
}
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	1f 91       	pop	r17
     8f8:	0f 91       	pop	r16
     8fa:	ff 90       	pop	r15
     8fc:	ef 90       	pop	r14
     8fe:	df 90       	pop	r13
     900:	cf 90       	pop	r12
     902:	bf 90       	pop	r11
     904:	af 90       	pop	r10
     906:	9f 90       	pop	r9
     908:	8f 90       	pop	r8
     90a:	08 95       	ret

0000090c <_ZN14hd44780_I2Cexp11autocfg8574Ev>:
 * a new resistor to  connect to the base of the transistor.
 * 
 * As a result the SYDZ backpack cannot use autoconfiguration.
 */

int autocfg8574()
     90c:	0f 93       	push	r16
     90e:	1f 93       	push	r17
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	ec 01       	movw	r28, r24
uint8_t data, data2;
uint8_t rs, rw, en, d4, d5, d6, d7, bl, blLevel;

	// First put a 0xff in the output port

	Wire.beginTransmission(_addr);
     916:	68 a1       	ldd	r22, Y+32	; 0x20
     918:	8f e7       	ldi	r24, 0x7F	; 127
     91a:	92 e0       	ldi	r25, 0x02	; 2
     91c:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0xff);
     920:	6f ef       	ldi	r22, 0xFF	; 255
     922:	8f e7       	ldi	r24, 0x7F	; 127
     924:	92 e0       	ldi	r25, 0x02	; 2
     926:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
     92a:	8f e7       	ldi	r24, 0x7F	; 127
     92c:	92 e0       	ldi	r25, 0x02	; 2
     92e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN7TwoWire15endTransmissionEv>

	// now read back from the port

	Wire.requestFrom((int)_addr, 1);
     932:	68 a1       	ldd	r22, Y+32	; 0x20
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	41 e0       	ldi	r20, 0x01	; 1
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	8f e7       	ldi	r24, 0x7F	; 127
     93c:	92 e0       	ldi	r25, 0x02	; 2
     93e:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
     942:	8f e7       	ldi	r24, 0x7F	; 127
     944:	92 e0       	ldi	r25, 0x02	; 2
     946:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <_ZN7TwoWire4readEv>
     94a:	8c 01       	movw	r16, r24

	// Turn off bit2 to attempt to see if en is bit 2,
	// if it is, it should change all lcd data bits to 1s
	
	Wire.beginTransmission(_addr);
     94c:	68 a1       	ldd	r22, Y+32	; 0x20
     94e:	8f e7       	ldi	r24, 0x7F	; 127
     950:	92 e0       	ldi	r25, 0x02	; 2
     952:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) (~(1 << 2)) );
     956:	6b ef       	ldi	r22, 0xFB	; 251
     958:	8f e7       	ldi	r24, 0x7F	; 127
     95a:	92 e0       	ldi	r25, 0x02	; 2
     95c:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
     960:	8f e7       	ldi	r24, 0x7F	; 127
     962:	92 e0       	ldi	r25, 0x02	; 2
     964:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN7TwoWire15endTransmissionEv>

	// read back data
	Wire.requestFrom((int)_addr, 1);
     968:	68 a1       	ldd	r22, Y+32	; 0x20
     96a:	70 e0       	ldi	r23, 0x00	; 0
     96c:	41 e0       	ldi	r20, 0x01	; 1
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	8f e7       	ldi	r24, 0x7F	; 127
     972:	92 e0       	ldi	r25, 0x02	; 2
     974:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <_ZN7TwoWire11requestFromEii>
	data2 = Wire.read();
     978:	8f e7       	ldi	r24, 0x7F	; 127
     97a:	92 e0       	ldi	r25, 0x02	; 2
     97c:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <_ZN7TwoWire4readEv>

	// If lower 3 bits are high and all 4 upper bits are high after clearing bit 2
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
     980:	98 01       	movw	r18, r16
     982:	27 70       	andi	r18, 0x07	; 7
     984:	33 27       	eor	r19, r19
     986:	27 30       	cpi	r18, 0x07	; 7
     988:	31 05       	cpc	r19, r1
     98a:	b1 f4       	brne	.+44     	; 0x9b8 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
     98c:	80 7f       	andi	r24, 0xF0	; 240
     98e:	99 27       	eor	r25, r25
     990:	80 3f       	cpi	r24, 0xF0	; 240
     992:	91 05       	cpc	r25, r1
     994:	89 f4       	brne	.+34     	; 0x9b8 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
     996:	83 e0       	ldi	r24, 0x03	; 3
     998:	16 95       	lsr	r17
     99a:	07 95       	ror	r16
     99c:	8a 95       	dec	r24
     99e:	e1 f7       	brne	.-8      	; 0x998 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x8c>
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	08 27       	eor	r16, r24
     9a4:	01 70       	andi	r16, 0x01	; 1
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
	{
		rs = 0; rw = 1; en = 2; d4 = 4; d5 = 5; d6 = 6; d7 = 7; bl = 3;
     9a6:	43 e0       	ldi	r20, 0x03	; 3
     9a8:	57 e0       	ldi	r21, 0x07	; 7
     9aa:	66 e0       	ldi	r22, 0x06	; 6
     9ac:	75 e0       	ldi	r23, 0x05	; 5
     9ae:	e4 e0       	ldi	r30, 0x04	; 4
     9b0:	22 e0       	ldi	r18, 0x02	; 2
     9b2:	f1 e0       	ldi	r31, 0x01	; 1
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	34 c0       	rjmp	.+104    	; 0xa20 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x114>
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
		}
	}
	else if((data & 0x70) == 0x70)
     9b8:	c8 01       	movw	r24, r16
     9ba:	80 77       	andi	r24, 0x70	; 112
     9bc:	99 27       	eor	r25, r25
     9be:	80 37       	cpi	r24, 0x70	; 112
     9c0:	91 05       	cpc	r25, r1
     9c2:	09 f0       	breq	.+2      	; 0x9c6 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xba>
     9c4:	68 c0       	rjmp	.+208    	; 0xa96 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18a>
		// both use bit 7 for backlight control

		// Turn off the en bit which should change the data bits
		// bit 4 on the mjkdz is en so we try that bit
	
		Wire.beginTransmission(_addr);
     9c6:	68 a1       	ldd	r22, Y+32	; 0x20
     9c8:	8f e7       	ldi	r24, 0x7F	; 127
     9ca:	92 e0       	ldi	r25, 0x02	; 2
     9cc:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t) (~(1 << 4)) );
     9d0:	6f ee       	ldi	r22, 0xEF	; 239
     9d2:	8f e7       	ldi	r24, 0x7F	; 127
     9d4:	92 e0       	ldi	r25, 0x02	; 2
     9d6:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
     9da:	8f e7       	ldi	r24, 0x7F	; 127
     9dc:	92 e0       	ldi	r25, 0x02	; 2
     9de:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN7TwoWire15endTransmissionEv>

		// read back data
		Wire.requestFrom((int)_addr, 1);
     9e2:	68 a1       	ldd	r22, Y+32	; 0x20
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	41 e0       	ldi	r20, 0x01	; 1
     9e8:	50 e0       	ldi	r21, 0x00	; 0
     9ea:	8f e7       	ldi	r24, 0x7F	; 127
     9ec:	92 e0       	ldi	r25, 0x02	; 2
     9ee:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <_ZN7TwoWire11requestFromEii>
		data2 = Wire.read();
     9f2:	8f e7       	ldi	r24, 0x7F	; 127
     9f4:	92 e0       	ldi	r25, 0x02	; 2
     9f6:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <_ZN7TwoWire4readEv>
		// look at data bits and see if they changed
		// if they changed to 0xf, then en was bit 4 and it is mjdkz
		// this will happen since when E is low the LCD is not
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
     9fa:	8f 70       	andi	r24, 0x0F	; 15
     9fc:	99 27       	eor	r25, r25
     9fe:	0f 97       	sbiw	r24, 0x0f	; 15
     a00:	19 f0       	breq	.+6      	; 0xa08 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xfc>
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
		}
		else
		{
			// electrofun LCDXIO
			rs = 4; rw = 5; en = 6; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
     a02:	26 e0       	ldi	r18, 0x06	; 6
     a04:	34 e0       	ldi	r19, 0x04	; 4
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x100>
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
		{
			// mjkdz
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
     a08:	24 e0       	ldi	r18, 0x04	; 4
     a0a:	36 e0       	ldi	r19, 0x06	; 6
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
     a0c:	00 95       	com	r16
     a0e:	00 1f       	adc	r16, r16
     a10:	00 27       	eor	r16, r16
     a12:	00 1f       	adc	r16, r16
     a14:	47 e0       	ldi	r20, 0x07	; 7
     a16:	53 e0       	ldi	r21, 0x03	; 3
     a18:	62 e0       	ldi	r22, 0x02	; 2
     a1a:	71 e0       	ldi	r23, 0x01	; 1
     a1c:	e0 e0       	ldi	r30, 0x00	; 0
     a1e:	f5 e0       	ldi	r31, 0x05	; 5
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	dc 01       	movw	r26, r24
     a26:	01 c0       	rjmp	.+2      	; 0xa2a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11e>
     a28:	aa 0f       	add	r26, r26
     a2a:	3a 95       	dec	r19
     a2c:	ea f7       	brpl	.-6      	; 0xa28 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11c>
     a2e:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
     a30:	dc 01       	movw	r26, r24
     a32:	01 c0       	rjmp	.+2      	; 0xa36 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x12a>
     a34:	aa 0f       	add	r26, r26
     a36:	fa 95       	dec	r31
     a38:	ea f7       	brpl	.-6      	; 0xa34 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x128>
     a3a:	ab a3       	std	Y+35, r26	; 0x23
	else
		_rw = 0; // no r/w control

	_en = ( 1 << en );
     a3c:	dc 01       	movw	r26, r24
     a3e:	02 c0       	rjmp	.+4      	; 0xa44 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x138>
     a40:	aa 0f       	add	r26, r26
     a42:	bb 1f       	adc	r27, r27
     a44:	2a 95       	dec	r18
     a46:	e2 f7       	brpl	.-8      	; 0xa40 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x134>
     a48:	ac a3       	std	Y+36, r26	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
     a4a:	9c 01       	movw	r18, r24
     a4c:	01 c0       	rjmp	.+2      	; 0xa50 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x144>
     a4e:	22 0f       	add	r18, r18
     a50:	ea 95       	dec	r30
     a52:	ea f7       	brpl	.-6      	; 0xa4e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x142>
     a54:	2d a3       	std	Y+37, r18	; 0x25
	_d5 = ( 1 << d5 );
     a56:	9c 01       	movw	r18, r24
     a58:	01 c0       	rjmp	.+2      	; 0xa5c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x150>
     a5a:	22 0f       	add	r18, r18
     a5c:	7a 95       	dec	r23
     a5e:	ea f7       	brpl	.-6      	; 0xa5a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x14e>
     a60:	2e a3       	std	Y+38, r18	; 0x26
	_d6 = ( 1 << d6 );
     a62:	9c 01       	movw	r18, r24
     a64:	01 c0       	rjmp	.+2      	; 0xa68 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15c>
     a66:	22 0f       	add	r18, r18
     a68:	6a 95       	dec	r22
     a6a:	ea f7       	brpl	.-6      	; 0xa66 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15a>
     a6c:	2f a3       	std	Y+39, r18	; 0x27
	_d7 = ( 1 << d7 );   
     a6e:	9c 01       	movw	r18, r24
     a70:	01 c0       	rjmp	.+2      	; 0xa74 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x168>
     a72:	22 0f       	add	r18, r18
     a74:	5a 95       	dec	r21
     a76:	ea f7       	brpl	.-6      	; 0xa72 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x166>
     a78:	28 a7       	std	Y+40, r18	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
     a7a:	01 c0       	rjmp	.+2      	; 0xa7e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x172>
     a7c:	88 0f       	add	r24, r24
     a7e:	4a 95       	dec	r20
     a80:	ea f7       	brpl	.-6      	; 0xa7c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x170>
     a82:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
     a84:	0a a7       	std	Y+42, r16	; 0x2a
	// set default bl state to backlight on
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
     a86:	01 30       	cpi	r16, 0x01	; 1
     a88:	11 f4       	brne	.+4      	; 0xa8e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x182>
		_blCurState = _bl;
     a8a:	8b a7       	std	Y+43, r24	; 0x2b
     a8c:	01 c0       	rjmp	.+2      	; 0xa90 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x184>
	else
		_blCurState = 0;
     a8e:	1b a6       	std	Y+43, r1	; 0x2b
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18e>
		}
	}
	else
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
     a96:	8d ef       	ldi	r24, 0xFD	; 253
     a98:	9f ef       	ldi	r25, 0xFF	; 255
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	1f 91       	pop	r17
     aa0:	0f 91       	pop	r16
     aa2:	08 95       	ret

00000aa4 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>:
 * if GP1 is low then the board is the BOARD_XXX board
 * The BOARD_XXX may not work as GP1 is used for D5 on WIDEHK and LCDPLUG
 *
 *
 */
int autocfgMCP23008()
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
     aa8:	ec 01       	movw	r28, r24

	/*
	 * Now set up output port
	 * Make no assumptions as to the state of IOCON BYTE mode
	 */
	Wire.beginTransmission(_addr);
     aaa:	68 a1       	ldd	r22, Y+32	; 0x20
     aac:	8f e7       	ldi	r24, 0x7F	; 127
     aae:	92 e0       	ldi	r25, 0x02	; 2
     ab0:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t)0); // point to IODIR
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	8f e7       	ldi	r24, 0x7F	; 127
     ab8:	92 e0       	ldi	r25, 0x02	; 2
     aba:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <_ZN7TwoWire5writeEh>
	Wire.write(0xff); // all pins inputs
     abe:	6f ef       	ldi	r22, 0xFF	; 255
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	8f e7       	ldi	r24, 0x7F	; 127
     ac4:	92 e0       	ldi	r25, 0x02	; 2
     ac6:	0e 94 76 01 	call	0x2ec	; 0x2ec <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     aca:	8f e7       	ldi	r24, 0x7F	; 127
     acc:	92 e0       	ldi	r25, 0x02	; 2
     ace:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN7TwoWire15endTransmissionEv>

	Wire.beginTransmission(_addr);
     ad2:	68 a1       	ldd	r22, Y+32	; 0x20
     ad4:	8f e7       	ldi	r24, 0x7F	; 127
     ad6:	92 e0       	ldi	r25, 0x02	; 2
     ad8:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(6); // point to GPPU
     adc:	66 e0       	ldi	r22, 0x06	; 6
     ade:	70 e0       	ldi	r23, 0x00	; 0
     ae0:	8f e7       	ldi	r24, 0x7F	; 127
     ae2:	92 e0       	ldi	r25, 0x02	; 2
     ae4:	0e 94 76 01 	call	0x2ec	; 0x2ec <_ZN7TwoWire5writeEi>
	Wire.write(0xff); // turn on pullups
     ae8:	6f ef       	ldi	r22, 0xFF	; 255
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	8f e7       	ldi	r24, 0x7F	; 127
     aee:	92 e0       	ldi	r25, 0x02	; 2
     af0:	0e 94 76 01 	call	0x2ec	; 0x2ec <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     af4:	8f e7       	ldi	r24, 0x7F	; 127
     af6:	92 e0       	ldi	r25, 0x02	; 2
     af8:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN7TwoWire15endTransmissionEv>

	/*
	 * read from the GPIO port
	 */

	Wire.beginTransmission(_addr);
     afc:	68 a1       	ldd	r22, Y+32	; 0x20
     afe:	8f e7       	ldi	r24, 0x7F	; 127
     b00:	92 e0       	ldi	r25, 0x02	; 2
     b02:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(9); // point to GPIO
     b06:	69 e0       	ldi	r22, 0x09	; 9
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	8f e7       	ldi	r24, 0x7F	; 127
     b0c:	92 e0       	ldi	r25, 0x02	; 2
     b0e:	0e 94 76 01 	call	0x2ec	; 0x2ec <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     b12:	8f e7       	ldi	r24, 0x7F	; 127
     b14:	92 e0       	ldi	r25, 0x02	; 2
     b16:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom((int)_addr, 1);
     b1a:	68 a1       	ldd	r22, Y+32	; 0x20
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	41 e0       	ldi	r20, 0x01	; 1
     b20:	50 e0       	ldi	r21, 0x00	; 0
     b22:	8f e7       	ldi	r24, 0x7F	; 127
     b24:	92 e0       	ldi	r25, 0x02	; 2
     b26:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
     b2a:	8f e7       	ldi	r24, 0x7F	; 127
     b2c:	92 e0       	ldi	r25, 0x02	; 2
     b2e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <_ZN7TwoWire4readEv>

	blLevel = HIGH; // known boards are active HIGH bl

	if(data == 0x7f) // bit 7 low, and other control and data lines high
     b32:	8f 37       	cpi	r24, 0x7F	; 127
     b34:	61 f0       	breq	.+24     	; 0xb4e <__stack+0x4f>
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
     b36:	86 ff       	sbrs	r24, 6
     b38:	12 c0       	rjmp	.+36     	; 0xb5e <__stack+0x5f>
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
     b3a:	81 fd       	sbrc	r24, 1
     b3c:	4c c0       	rjmp	.+152    	; 0xbd6 <__stack+0xd7>
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
		bl = 1;
     b3e:	21 e0       	ldi	r18, 0x01	; 1
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
     b40:	32 e0       	ldi	r19, 0x02	; 2
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
     b42:	43 e0       	ldi	r20, 0x03	; 3
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
     b44:	54 e0       	ldi	r21, 0x04	; 4
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
     b46:	65 e0       	ldi	r22, 0x05	; 5
	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
     b48:	76 e0       	ldi	r23, 0x06	; 6
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
     b4a:	e7 e0       	ldi	r30, 0x07	; 7
     b4c:	0f c0       	rjmp	.+30     	; 0xb6c <__stack+0x6d>
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;
     b4e:	27 e0       	ldi	r18, 0x07	; 7
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
     b50:	36 e0       	ldi	r19, 0x06	; 6
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
     b52:	45 e0       	ldi	r20, 0x05	; 5
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
     b54:	54 e0       	ldi	r21, 0x04	; 4
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
     b56:	63 e0       	ldi	r22, 0x03	; 3
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
     b58:	72 e0       	ldi	r23, 0x02	; 2

	if(data == 0x7f) // bit 7 low, and other control and data lines high
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
     b5a:	e1 e0       	ldi	r30, 0x01	; 1
     b5c:	07 c0       	rjmp	.+14     	; 0xb6c <__stack+0x6d>
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;
     b5e:	26 e0       	ldi	r18, 0x06	; 6
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
     b60:	33 e0       	ldi	r19, 0x03	; 3
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
     b62:	42 e0       	ldi	r20, 0x02	; 2
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
     b64:	51 e0       	ldi	r21, 0x01	; 1
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
     b66:	60 e0       	ldi	r22, 0x00	; 0
	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
     b68:	77 e0       	ldi	r23, 0x07	; 7
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
     b6a:	e4 e0       	ldi	r30, 0x04	; 4
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	dc 01       	movw	r26, r24
     b72:	02 c0       	rjmp	.+4      	; 0xb78 <__stack+0x79>
     b74:	aa 0f       	add	r26, r26
     b76:	bb 1f       	adc	r27, r27
     b78:	ea 95       	dec	r30
     b7a:	e2 f7       	brpl	.-8      	; 0xb74 <__stack+0x75>
     b7c:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
	else
		_rw = 0; // no r/w control
     b7e:	1b a2       	std	Y+35, r1	; 0x23

	_en = ( 1 << en );
     b80:	fc 01       	movw	r30, r24
     b82:	01 c0       	rjmp	.+2      	; 0xb86 <__stack+0x87>
     b84:	ee 0f       	add	r30, r30
     b86:	7a 95       	dec	r23
     b88:	ea f7       	brpl	.-6      	; 0xb84 <__stack+0x85>
     b8a:	ec a3       	std	Y+36, r30	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
     b8c:	fc 01       	movw	r30, r24
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <__stack+0x95>
     b90:	ee 0f       	add	r30, r30
     b92:	ff 1f       	adc	r31, r31
     b94:	6a 95       	dec	r22
     b96:	e2 f7       	brpl	.-8      	; 0xb90 <__stack+0x91>
     b98:	ed a3       	std	Y+37, r30	; 0x25
	_d5 = ( 1 << d5 );
     b9a:	bc 01       	movw	r22, r24
     b9c:	01 c0       	rjmp	.+2      	; 0xba0 <__stack+0xa1>
     b9e:	66 0f       	add	r22, r22
     ba0:	5a 95       	dec	r21
     ba2:	ea f7       	brpl	.-6      	; 0xb9e <__stack+0x9f>
     ba4:	6e a3       	std	Y+38, r22	; 0x26
	_d6 = ( 1 << d6 );
     ba6:	bc 01       	movw	r22, r24
     ba8:	02 c0       	rjmp	.+4      	; 0xbae <__stack+0xaf>
     baa:	66 0f       	add	r22, r22
     bac:	77 1f       	adc	r23, r23
     bae:	4a 95       	dec	r20
     bb0:	e2 f7       	brpl	.-8      	; 0xbaa <__stack+0xab>
     bb2:	6f a3       	std	Y+39, r22	; 0x27
	_d7 = ( 1 << d7 );   
     bb4:	ac 01       	movw	r20, r24
     bb6:	01 c0       	rjmp	.+2      	; 0xbba <__stack+0xbb>
     bb8:	44 0f       	add	r20, r20
     bba:	3a 95       	dec	r19
     bbc:	ea f7       	brpl	.-6      	; 0xbb8 <__stack+0xb9>
     bbe:	48 a7       	std	Y+40, r20	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
     bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <__stack+0xc5>
     bc2:	88 0f       	add	r24, r24
     bc4:	2a 95       	dec	r18
     bc6:	ea f7       	brpl	.-6      	; 0xbc2 <__stack+0xc3>
     bc8:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
     bca:	91 e0       	ldi	r25, 0x01	; 1
     bcc:	9a a7       	std	Y+42, r25	; 0x2a
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
		_blCurState = _bl;
     bce:	8b a7       	std	Y+43, r24	; 0x2b
		// could not identify board
		return(hd44780::RV_ENOTSUP);
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <__stack+0xdb>

	}
	else
	{
		// could not identify board
		return(hd44780::RV_ENOTSUP);
     bd6:	8d ef       	ldi	r24, 0xFD	; 253
     bd8:	9f ef       	ldi	r25, 0xFF	; 255
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	08 95       	ret

00000be0 <_ZN14hd44780_I2Cexp6ioinitEv>:
// Returns non zero if initialization failed.
//
// can't be used from constructors because not everything is initalized yet.
// (maybe interrupts or other library constructors)
// if Wire library is used in constructor, it will hang.
int ioinit()
     be0:	1f 93       	push	r17
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	ec 01       	movw	r28, r24
	 * I believe that it is unreasonable to require the the user
	 * sketch code to do it, because all that should change between
	 * hd44780 i/o interfaces should be the constructor
	 * So we go ahead and call it here.
	 */
	Wire.begin();
     be8:	8f e7       	ldi	r24, 0x7F	; 127
     bea:	92 e0       	ldi	r25, 0x02	; 2
     bec:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <_ZN7TwoWire5beginEv>

	// auto locate i2c expander and magically detect pin mappings

	if(!_addr) // locate next instance
     bf0:	68 a1       	ldd	r22, Y+32	; 0x20
     bf2:	61 11       	cpse	r22, r1
     bf4:	0a c0       	rjmp	.+20     	; 0xc0a <_ZN14hd44780_I2Cexp6ioinitEv+0x2a>
	{
		_addr = LocateDevice(AutoInst++);
     bf6:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
     bfa:	91 e0       	ldi	r25, 0x01	; 1
     bfc:	98 0f       	add	r25, r24
     bfe:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
     c02:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
     c06:	88 a3       	std	Y+32, r24	; 0x20
     c08:	0d c0       	rjmp	.+26     	; 0xc24 <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
	}
	else
	{
		// check to see if device at specified address is really there
		Wire.beginTransmission(_addr);
     c0a:	8f e7       	ldi	r24, 0x7F	; 127
     c0c:	92 e0       	ldi	r25, 0x02	; 2
     c0e:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_ZN7TwoWire17beginTransmissionEh>
		if(Wire.endTransmission())
     c12:	8f e7       	ldi	r24, 0x7F	; 127
     c14:	92 e0       	ldi	r25, 0x02	; 2
     c16:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN7TwoWire15endTransmissionEv>
     c1a:	88 23       	and	r24, r24
     c1c:	19 f0       	breq	.+6      	; 0xc24 <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
			return(hd44780::RV_ENXIO);
     c1e:	8c ef       	ldi	r24, 0xFC	; 252
     c20:	9f ef       	ldi	r25, 0xFF	; 255
     c22:	a7 c0       	rjmp	.+334    	; 0xd72 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	}

	if(!_addr) // locate next instance
     c24:	88 a1       	ldd	r24, Y+32	; 0x20
     c26:	81 11       	cpse	r24, r1
     c28:	09 c0       	rjmp	.+18     	; 0xc3c <_ZN14hd44780_I2Cexp6ioinitEv+0x5c>
		_addr = LocateDevice(AutoInst++);
     c2a:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
     c2e:	91 e0       	ldi	r25, 0x01	; 1
     c30:	98 0f       	add	r25, r24
     c32:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
     c36:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
     c3a:	88 a3       	std	Y+32, r24	; 0x20

	if(!_addr) // if we couldn't locate it, return error
     c3c:	18 a1       	ldd	r17, Y+32	; 0x20
     c3e:	11 23       	and	r17, r17
     c40:	71 f3       	breq	.-36     	; 0xc1e <_ZN14hd44780_I2Cexp6ioinitEv+0x3e>
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
     c42:	89 a1       	ldd	r24, Y+33	; 0x21
     c44:	88 23       	and	r24, r24
     c46:	c1 f1       	breq	.+112    	; 0xcb8 <_ZN14hd44780_I2Cexp6ioinitEv+0xd8>
			return(status);
	}

	// initialize IO expander chip

	Wire.beginTransmission(_addr);
     c48:	68 a1       	ldd	r22, Y+32	; 0x20
     c4a:	8f e7       	ldi	r24, 0x7F	; 127
     c4c:	92 e0       	ldi	r25, 0x02	; 2
     c4e:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_ZN7TwoWire17beginTransmissionEh>

	if(_expType == I2Cexp_MCP23008)
     c52:	89 a1       	ldd	r24, Y+33	; 0x21
     c54:	82 30       	cpi	r24, 0x02	; 2
     c56:	09 f0       	breq	.+2      	; 0xc5a <_ZN14hd44780_I2Cexp6ioinitEv+0x7a>
     c58:	76 c0       	rjmp	.+236    	; 0xd46 <_ZN14hd44780_I2Cexp6ioinitEv+0x166>
		 * within the same i2c connection by simply sending more bytes.
		 * This is necessary as the code uses back to back writes to perform
		 * the nibble updates as well as the toggling the enable signal.
		 * This methodology offers significant performance gains.
		 */
		Wire.write(5);	// point to IOCON
     c5a:	65 e0       	ldi	r22, 0x05	; 5
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	8f e7       	ldi	r24, 0x7F	; 127
     c60:	92 e0       	ldi	r25, 0x02	; 2
     c62:	0e 94 76 01 	call	0x2ec	; 0x2ec <_ZN7TwoWire5writeEi>
		Wire.write(0x20);// disable sequential mode (enables BYTE mode)
     c66:	60 e2       	ldi	r22, 0x20	; 32
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	8f e7       	ldi	r24, 0x7F	; 127
     c6c:	92 e0       	ldi	r25, 0x02	; 2
     c6e:	0e 94 76 01 	call	0x2ec	; 0x2ec <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
     c72:	8f e7       	ldi	r24, 0x7F	; 127
     c74:	92 e0       	ldi	r25, 0x02	; 2
     c76:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN7TwoWire15endTransmissionEv>

		/*
		 * Now set up output port
		 */
		Wire.beginTransmission(_addr);
     c7a:	68 a1       	ldd	r22, Y+32	; 0x20
     c7c:	8f e7       	ldi	r24, 0x7F	; 127
     c7e:	92 e0       	ldi	r25, 0x02	; 2
     c80:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t)0); // point to IODIR
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	8f e7       	ldi	r24, 0x7F	; 127
     c88:	92 e0       	ldi	r25, 0x02	; 2
     c8a:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <_ZN7TwoWire5writeEh>
		Wire.write((uint8_t)0); // all pins output
     c8e:	60 e0       	ldi	r22, 0x00	; 0
     c90:	8f e7       	ldi	r24, 0x7F	; 127
     c92:	92 e0       	ldi	r25, 0x02	; 2
     c94:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
     c98:	8f e7       	ldi	r24, 0x7F	; 127
     c9a:	92 e0       	ldi	r25, 0x02	; 2
     c9c:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN7TwoWire15endTransmissionEv>
	
		/*
		 * point chip to GPIO
		 */
		Wire.beginTransmission(_addr);
     ca0:	68 a1       	ldd	r22, Y+32	; 0x20
     ca2:	8f e7       	ldi	r24, 0x7F	; 127
     ca4:	92 e0       	ldi	r25, 0x02	; 2
     ca6:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write(9); // point to GPIO
     caa:	69 e0       	ldi	r22, 0x09	; 9
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	8f e7       	ldi	r24, 0x7F	; 127
     cb0:	92 e0       	ldi	r25, 0x02	; 2
     cb2:	0e 94 76 01 	call	0x2ec	; 0x2ec <_ZN7TwoWire5writeEi>
     cb6:	47 c0       	rjmp	.+142    	; 0xd46 <_ZN14hd44780_I2Cexp6ioinitEv+0x166>

	/*
	 * First try to write 0xff to MCP23008 IODIR
	 * On a PCF8574 this will end up writing 0 and then ff to output port
	 */
	Wire.beginTransmission(address);
     cb8:	61 2f       	mov	r22, r17
     cba:	8f e7       	ldi	r24, 0x7F	; 127
     cbc:	92 e0       	ldi	r25, 0x02	; 2
     cbe:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	8f e7       	ldi	r24, 0x7F	; 127
     cc6:	92 e0       	ldi	r25, 0x02	; 2
     cc8:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <_ZN7TwoWire5writeEh>
	Wire.write((uint8_t) 0xff);	// try to write to MCP23008 IODR
     ccc:	6f ef       	ldi	r22, 0xFF	; 255
     cce:	8f e7       	ldi	r24, 0x7F	; 127
     cd0:	92 e0       	ldi	r25, 0x02	; 2
     cd2:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
     cd6:	8f e7       	ldi	r24, 0x7F	; 127
     cd8:	92 e0       	ldi	r25, 0x02	; 2
     cda:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now try to point MCP23008 to IODIR for read
	 * On a PCF8574 this will end up writing a 0 to the output port
	 */

	Wire.beginTransmission(address);
     cde:	61 2f       	mov	r22, r17
     ce0:	8f e7       	ldi	r24, 0x7F	; 127
     ce2:	92 e0       	ldi	r25, 0x02	; 2
     ce4:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	8f e7       	ldi	r24, 0x7F	; 127
     cec:	92 e0       	ldi	r25, 0x02	; 2
     cee:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
     cf2:	8f e7       	ldi	r24, 0x7F	; 127
     cf4:	92 e0       	ldi	r25, 0x02	; 2
     cf6:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now read a byte
	 * On a MCP23008 we should read the 0xff we wrote to IODIR
	 * On a PCF8574 we should read 0 since the output port was set to 0
	 */
	Wire.requestFrom((int)address, 1);
     cfa:	61 2f       	mov	r22, r17
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	41 e0       	ldi	r20, 0x01	; 1
     d00:	50 e0       	ldi	r21, 0x00	; 0
     d02:	8f e7       	ldi	r24, 0x7F	; 127
     d04:	92 e0       	ldi	r25, 0x02	; 2
     d06:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
     d0a:	8f e7       	ldi	r24, 0x7F	; 127
     d0c:	92 e0       	ldi	r25, 0x02	; 2
     d0e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <_ZN7TwoWire4readEv>
     d12:	9c 01       	movw	r18, r24

	if(data == 0xff)
     d14:	8f 3f       	cpi	r24, 0xFF	; 255
     d16:	91 05       	cpc	r25, r1
     d18:	29 f0       	breq	.+10     	; 0xd24 <_ZN14hd44780_I2Cexp6ioinitEv+0x144>
	{
		chiptype = I2Cexp_MCP23008;
     d1a:	91 e0       	ldi	r25, 0x01	; 1
     d1c:	23 2b       	or	r18, r19
     d1e:	19 f0       	breq	.+6      	; 0xd26 <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	01 c0       	rjmp	.+2      	; 0xd26 <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
     d24:	92 e0       	ldi	r25, 0x02	; 2
	if(!_addr) // if we couldn't locate it, return error
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);
     d26:	99 a3       	std	Y+33, r25	; 0x21

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
     d28:	99 23       	and	r25, r25
     d2a:	09 f1       	breq	.+66     	; 0xd6e <_ZN14hd44780_I2Cexp6ioinitEv+0x18e>
			return(hd44780::RV_EIO);

		if(_expType == I2Cexp_PCF8574)
     d2c:	91 30       	cpi	r25, 0x01	; 1
     d2e:	21 f4       	brne	.+8      	; 0xd38 <_ZN14hd44780_I2Cexp6ioinitEv+0x158>
			status = autocfg8574();		// go auto configure the pin mappings
     d30:	ce 01       	movw	r24, r28
     d32:	0e 94 86 04 	call	0x90c	; 0x90c <_ZN14hd44780_I2Cexp11autocfg8574Ev>
     d36:	03 c0       	rjmp	.+6      	; 0xd3e <_ZN14hd44780_I2Cexp6ioinitEv+0x15e>
		else
			status = autocfgMCP23008();	// go auto configure the pin mappings
     d38:	ce 01       	movw	r24, r28
     d3a:	0e 94 52 05 	call	0xaa4	; 0xaa4 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>
		if(status)
     d3e:	00 97       	sbiw	r24, 0x00	; 0
     d40:	09 f4       	brne	.+2      	; 0xd44 <_ZN14hd44780_I2Cexp6ioinitEv+0x164>
     d42:	82 cf       	rjmp	.-252    	; 0xc48 <_ZN14hd44780_I2Cexp6ioinitEv+0x68>
     d44:	16 c0       	rjmp	.+44     	; 0xd72 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
		 */
		Wire.beginTransmission(_addr);
		Wire.write(9); // point to GPIO
		
	}
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	8f e7       	ldi	r24, 0x7F	; 127
     d4a:	92 e0       	ldi	r25, 0x02	; 2
     d4c:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <_ZN7TwoWire5writeEh>
	if( (status = Wire.endTransmission()) ) // assignment
     d50:	8f e7       	ldi	r24, 0x7F	; 127
     d52:	92 e0       	ldi	r25, 0x02	; 2
     d54:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN7TwoWire15endTransmissionEv>
     d58:	21 e0       	ldi	r18, 0x01	; 1
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	81 11       	cpse	r24, r1
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <_ZN14hd44780_I2Cexp6ioinitEv+0x184>
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	88 27       	eor	r24, r24
     d66:	99 27       	eor	r25, r25
     d68:	82 1b       	sub	r24, r18
     d6a:	93 0b       	sbc	r25, r19
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
			return(hd44780::RV_EIO);
     d6e:	8f ef       	ldi	r24, 0xFF	; 255
     d70:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
	if( (status = Wire.endTransmission()) ) // assignment
		status = hd44780::RV_EIO;

	return ( status );
}
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	1f 91       	pop	r17
     d78:	08 95       	ret

00000d7a <_ZN3PID7ComputeEv>:
	   else if(*myOutput < outMin) *myOutput = outMin;

	   if(outputSum > outMax) outputSum= outMax;
	   else if(outputSum < outMin) outputSum= outMin;
   }
}
     d7a:	2f 92       	push	r2
     d7c:	3f 92       	push	r3
     d7e:	4f 92       	push	r4
     d80:	5f 92       	push	r5
     d82:	6f 92       	push	r6
     d84:	7f 92       	push	r7
     d86:	8f 92       	push	r8
     d88:	9f 92       	push	r9
     d8a:	af 92       	push	r10
     d8c:	bf 92       	push	r11
     d8e:	cf 92       	push	r12
     d90:	df 92       	push	r13
     d92:	ef 92       	push	r14
     d94:	ff 92       	push	r15
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
     da2:	60 97       	sbiw	r28, 0x10	; 16
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	cd bf       	out	0x3d, r28	; 61
     dae:	dc 01       	movw	r26, r24
     db0:	da 96       	adiw	r26, 0x3a	; 58
     db2:	bc 91       	ld	r27, X
     db4:	b9 83       	std	Y+1, r27	; 0x01
     db6:	b1 11       	cpse	r27, r1
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <_ZN3PID7ComputeEv+0x44>
     dba:	19 82       	std	Y+1, r1	; 0x01
     dbc:	2b c1       	rjmp	.+598    	; 0x1014 <_ZN3PID7ComputeEv+0x29a>
     dbe:	98 8b       	std	Y+16, r25	; 0x10
     dc0:	8f 87       	std	Y+15, r24	; 0x0f
     dc2:	0e 94 17 19 	call	0x322e	; 0x322e <millis>
     dc6:	6e 83       	std	Y+6, r22	; 0x06
     dc8:	7f 83       	std	Y+7, r23	; 0x07
     dca:	88 87       	std	Y+8, r24	; 0x08
     dcc:	99 87       	std	Y+9, r25	; 0x09
     dce:	ef 85       	ldd	r30, Y+15	; 0x0f
     dd0:	f8 89       	ldd	r31, Y+16	; 0x10
     dd2:	82 a1       	ldd	r24, Z+34	; 0x22
     dd4:	93 a1       	ldd	r25, Z+35	; 0x23
     dd6:	a4 a1       	ldd	r26, Z+36	; 0x24
     dd8:	b5 a1       	ldd	r27, Z+37	; 0x25
     dda:	4e 81       	ldd	r20, Y+6	; 0x06
     ddc:	5f 81       	ldd	r21, Y+7	; 0x07
     dde:	68 85       	ldd	r22, Y+8	; 0x08
     de0:	79 85       	ldd	r23, Y+9	; 0x09
     de2:	48 1b       	sub	r20, r24
     de4:	59 0b       	sbc	r21, r25
     de6:	6a 0b       	sbc	r22, r26
     de8:	7b 0b       	sbc	r23, r27
     dea:	86 a5       	ldd	r24, Z+46	; 0x2e
     dec:	97 a5       	ldd	r25, Z+47	; 0x2f
     dee:	a0 a9       	ldd	r26, Z+48	; 0x30
     df0:	b1 a9       	ldd	r27, Z+49	; 0x31
     df2:	48 17       	cp	r20, r24
     df4:	59 07       	cpc	r21, r25
     df6:	6a 07       	cpc	r22, r26
     df8:	7b 07       	cpc	r23, r27
     dfa:	f8 f2       	brcs	.-66     	; 0xdba <_ZN3PID7ComputeEv+0x40>
     dfc:	04 8c       	ldd	r0, Z+28	; 0x1c
     dfe:	f5 8d       	ldd	r31, Z+29	; 0x1d
     e00:	e0 2d       	mov	r30, r0
     e02:	80 81       	ld	r24, Z
     e04:	91 81       	ldd	r25, Z+1	; 0x01
     e06:	a2 81       	ldd	r26, Z+2	; 0x02
     e08:	b3 81       	ldd	r27, Z+3	; 0x03
     e0a:	8a 83       	std	Y+2, r24	; 0x02
     e0c:	9b 83       	std	Y+3, r25	; 0x03
     e0e:	ac 83       	std	Y+4, r26	; 0x04
     e10:	bd 83       	std	Y+5, r27	; 0x05
     e12:	af 85       	ldd	r26, Y+15	; 0x0f
     e14:	b8 89       	ldd	r27, Y+16	; 0x10
     e16:	90 96       	adiw	r26, 0x20	; 32
     e18:	ed 91       	ld	r30, X+
     e1a:	fc 91       	ld	r31, X
     e1c:	91 97       	sbiw	r26, 0x21	; 33
     e1e:	2a 81       	ldd	r18, Y+2	; 0x02
     e20:	3b 81       	ldd	r19, Y+3	; 0x03
     e22:	4c 81       	ldd	r20, Y+4	; 0x04
     e24:	5d 81       	ldd	r21, Y+5	; 0x05
     e26:	60 81       	ld	r22, Z
     e28:	71 81       	ldd	r23, Z+1	; 0x01
     e2a:	82 81       	ldd	r24, Z+2	; 0x02
     e2c:	93 81       	ldd	r25, Z+3	; 0x03
     e2e:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__subsf3>
     e32:	4b 01       	movw	r8, r22
     e34:	5c 01       	movw	r10, r24
     e36:	ef 85       	ldd	r30, Y+15	; 0x0f
     e38:	f8 89       	ldd	r31, Y+16	; 0x10
     e3a:	22 a5       	ldd	r18, Z+42	; 0x2a
     e3c:	33 a5       	ldd	r19, Z+43	; 0x2b
     e3e:	44 a5       	ldd	r20, Z+44	; 0x2c
     e40:	55 a5       	ldd	r21, Z+45	; 0x2d
     e42:	6a 81       	ldd	r22, Y+2	; 0x02
     e44:	7b 81       	ldd	r23, Y+3	; 0x03
     e46:	8c 81       	ldd	r24, Y+4	; 0x04
     e48:	9d 81       	ldd	r25, Y+5	; 0x05
     e4a:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__subsf3>
     e4e:	6b 01       	movw	r12, r22
     e50:	7c 01       	movw	r14, r24
     e52:	af 85       	ldd	r26, Y+15	; 0x0f
     e54:	b8 89       	ldd	r27, Y+16	; 0x10
     e56:	50 96       	adiw	r26, 0x10	; 16
     e58:	2d 91       	ld	r18, X+
     e5a:	3d 91       	ld	r19, X+
     e5c:	4d 91       	ld	r20, X+
     e5e:	5c 91       	ld	r21, X
     e60:	53 97       	sbiw	r26, 0x13	; 19
     e62:	c5 01       	movw	r24, r10
     e64:	b4 01       	movw	r22, r8
     e66:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__mulsf3>
     e6a:	ef 85       	ldd	r30, Y+15	; 0x0f
     e6c:	f8 89       	ldd	r31, Y+16	; 0x10
     e6e:	26 a1       	ldd	r18, Z+38	; 0x26
     e70:	37 a1       	ldd	r19, Z+39	; 0x27
     e72:	40 a5       	ldd	r20, Z+40	; 0x28
     e74:	51 a5       	ldd	r21, Z+41	; 0x29
     e76:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__addsf3>
     e7a:	2b 01       	movw	r4, r22
     e7c:	3c 01       	movw	r6, r24
     e7e:	af 85       	ldd	r26, Y+15	; 0x0f
     e80:	b8 89       	ldd	r27, Y+16	; 0x10
     e82:	96 96       	adiw	r26, 0x26	; 38
     e84:	6d 93       	st	X+, r22
     e86:	7d 93       	st	X+, r23
     e88:	8d 93       	st	X+, r24
     e8a:	9c 93       	st	X, r25
     e8c:	99 97       	sbiw	r26, 0x29	; 41
     e8e:	db 96       	adiw	r26, 0x3b	; 59
     e90:	bc 91       	ld	r27, X
     e92:	ba 87       	std	Y+10, r27	; 0x0a
     e94:	b1 11       	cpse	r27, r1
     e96:	18 c0       	rjmp	.+48     	; 0xec8 <_ZN3PID7ComputeEv+0x14e>
     e98:	ef 85       	ldd	r30, Y+15	; 0x0f
     e9a:	f8 89       	ldd	r31, Y+16	; 0x10
     e9c:	24 85       	ldd	r18, Z+12	; 0x0c
     e9e:	35 85       	ldd	r19, Z+13	; 0x0d
     ea0:	46 85       	ldd	r20, Z+14	; 0x0e
     ea2:	57 85       	ldd	r21, Z+15	; 0x0f
     ea4:	c7 01       	movw	r24, r14
     ea6:	b6 01       	movw	r22, r12
     ea8:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__mulsf3>
     eac:	9b 01       	movw	r18, r22
     eae:	ac 01       	movw	r20, r24
     eb0:	c3 01       	movw	r24, r6
     eb2:	b2 01       	movw	r22, r4
     eb4:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__subsf3>
     eb8:	af 85       	ldd	r26, Y+15	; 0x0f
     eba:	b8 89       	ldd	r27, Y+16	; 0x10
     ebc:	96 96       	adiw	r26, 0x26	; 38
     ebe:	6d 93       	st	X+, r22
     ec0:	7d 93       	st	X+, r23
     ec2:	8d 93       	st	X+, r24
     ec4:	9c 93       	st	X, r25
     ec6:	99 97       	sbiw	r26, 0x29	; 41
     ec8:	ef 85       	ldd	r30, Y+15	; 0x0f
     eca:	f8 89       	ldd	r31, Y+16	; 0x10
     ecc:	46 a0       	ldd	r4, Z+38	; 0x26
     ece:	57 a0       	ldd	r5, Z+39	; 0x27
     ed0:	60 a4       	ldd	r6, Z+40	; 0x28
     ed2:	71 a4       	ldd	r7, Z+41	; 0x29
     ed4:	16 a9       	ldd	r17, Z+54	; 0x36
     ed6:	07 a9       	ldd	r16, Z+55	; 0x37
     ed8:	30 ac       	ldd	r3, Z+56	; 0x38
     eda:	21 ac       	ldd	r2, Z+57	; 0x39
     edc:	21 2f       	mov	r18, r17
     ede:	30 2f       	mov	r19, r16
     ee0:	43 2d       	mov	r20, r3
     ee2:	52 2d       	mov	r21, r2
     ee4:	c3 01       	movw	r24, r6
     ee6:	b2 01       	movw	r22, r4
     ee8:	0e 94 79 11 	call	0x22f2	; 0x22f2 <__gesf2>
     eec:	18 16       	cp	r1, r24
     eee:	2c f4       	brge	.+10     	; 0xefa <_ZN3PID7ComputeEv+0x180>
     ef0:	81 2f       	mov	r24, r17
     ef2:	90 2f       	mov	r25, r16
     ef4:	a3 2d       	mov	r26, r3
     ef6:	b2 2d       	mov	r27, r2
     ef8:	18 c0       	rjmp	.+48     	; 0xf2a <_ZN3PID7ComputeEv+0x1b0>
     efa:	af 85       	ldd	r26, Y+15	; 0x0f
     efc:	b8 89       	ldd	r27, Y+16	; 0x10
     efe:	d2 96       	adiw	r26, 0x32	; 50
     f00:	8d 91       	ld	r24, X+
     f02:	9d 91       	ld	r25, X+
     f04:	0d 90       	ld	r0, X+
     f06:	bc 91       	ld	r27, X
     f08:	a0 2d       	mov	r26, r0
     f0a:	8b 87       	std	Y+11, r24	; 0x0b
     f0c:	9c 87       	std	Y+12, r25	; 0x0c
     f0e:	ad 87       	std	Y+13, r26	; 0x0d
     f10:	be 87       	std	Y+14, r27	; 0x0e
     f12:	9c 01       	movw	r18, r24
     f14:	ad 01       	movw	r20, r26
     f16:	c3 01       	movw	r24, r6
     f18:	b2 01       	movw	r22, r4
     f1a:	0e 94 1a 10 	call	0x2034	; 0x2034 <__cmpsf2>
     f1e:	87 ff       	sbrs	r24, 7
     f20:	0a c0       	rjmp	.+20     	; 0xf36 <_ZN3PID7ComputeEv+0x1bc>
     f22:	8b 85       	ldd	r24, Y+11	; 0x0b
     f24:	9c 85       	ldd	r25, Y+12	; 0x0c
     f26:	ad 85       	ldd	r26, Y+13	; 0x0d
     f28:	be 85       	ldd	r27, Y+14	; 0x0e
     f2a:	ef 85       	ldd	r30, Y+15	; 0x0f
     f2c:	f8 89       	ldd	r31, Y+16	; 0x10
     f2e:	86 a3       	std	Z+38, r24	; 0x26
     f30:	97 a3       	std	Z+39, r25	; 0x27
     f32:	a0 a7       	std	Z+40, r26	; 0x28
     f34:	b1 a7       	std	Z+41, r27	; 0x29
     f36:	fa 85       	ldd	r31, Y+10	; 0x0a
     f38:	ff 23       	and	r31, r31
     f3a:	79 f0       	breq	.+30     	; 0xf5a <_ZN3PID7ComputeEv+0x1e0>
     f3c:	af 85       	ldd	r26, Y+15	; 0x0f
     f3e:	b8 89       	ldd	r27, Y+16	; 0x10
     f40:	1c 96       	adiw	r26, 0x0c	; 12
     f42:	2d 91       	ld	r18, X+
     f44:	3d 91       	ld	r19, X+
     f46:	4d 91       	ld	r20, X+
     f48:	5c 91       	ld	r21, X
     f4a:	1f 97       	sbiw	r26, 0x0f	; 15
     f4c:	c5 01       	movw	r24, r10
     f4e:	b4 01       	movw	r22, r8
     f50:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__mulsf3>
     f54:	4b 01       	movw	r8, r22
     f56:	5c 01       	movw	r10, r24
     f58:	03 c0       	rjmp	.+6      	; 0xf60 <_ZN3PID7ComputeEv+0x1e6>
     f5a:	81 2c       	mov	r8, r1
     f5c:	91 2c       	mov	r9, r1
     f5e:	54 01       	movw	r10, r8
     f60:	ef 85       	ldd	r30, Y+15	; 0x0f
     f62:	f8 89       	ldd	r31, Y+16	; 0x10
     f64:	24 89       	ldd	r18, Z+20	; 0x14
     f66:	35 89       	ldd	r19, Z+21	; 0x15
     f68:	46 89       	ldd	r20, Z+22	; 0x16
     f6a:	57 89       	ldd	r21, Z+23	; 0x17
     f6c:	c7 01       	movw	r24, r14
     f6e:	b6 01       	movw	r22, r12
     f70:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__mulsf3>
     f74:	9b 01       	movw	r18, r22
     f76:	ac 01       	movw	r20, r24
     f78:	af 85       	ldd	r26, Y+15	; 0x0f
     f7a:	b8 89       	ldd	r27, Y+16	; 0x10
     f7c:	96 96       	adiw	r26, 0x26	; 38
     f7e:	6d 91       	ld	r22, X+
     f80:	7d 91       	ld	r23, X+
     f82:	8d 91       	ld	r24, X+
     f84:	9c 91       	ld	r25, X
     f86:	99 97       	sbiw	r26, 0x29	; 41
     f88:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__subsf3>
     f8c:	a5 01       	movw	r20, r10
     f8e:	94 01       	movw	r18, r8
     f90:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__addsf3>
     f94:	6b 01       	movw	r12, r22
     f96:	7c 01       	movw	r14, r24
     f98:	9b 01       	movw	r18, r22
     f9a:	ac 01       	movw	r20, r24
     f9c:	61 2f       	mov	r22, r17
     f9e:	70 2f       	mov	r23, r16
     fa0:	83 2d       	mov	r24, r3
     fa2:	92 2d       	mov	r25, r2
     fa4:	0e 94 1a 10 	call	0x2034	; 0x2034 <__cmpsf2>
     fa8:	87 fd       	sbrc	r24, 7
     faa:	14 c0       	rjmp	.+40     	; 0xfd4 <_ZN3PID7ComputeEv+0x25a>
     fac:	ef 85       	ldd	r30, Y+15	; 0x0f
     fae:	f8 89       	ldd	r31, Y+16	; 0x10
     fb0:	12 a9       	ldd	r17, Z+50	; 0x32
     fb2:	03 a9       	ldd	r16, Z+51	; 0x33
     fb4:	34 a8       	ldd	r3, Z+52	; 0x34
     fb6:	25 a8       	ldd	r2, Z+53	; 0x35
     fb8:	21 2f       	mov	r18, r17
     fba:	30 2f       	mov	r19, r16
     fbc:	43 2d       	mov	r20, r3
     fbe:	52 2d       	mov	r21, r2
     fc0:	b6 01       	movw	r22, r12
     fc2:	c7 01       	movw	r24, r14
     fc4:	0e 94 1a 10 	call	0x2034	; 0x2034 <__cmpsf2>
     fc8:	87 fd       	sbrc	r24, 7
     fca:	04 c0       	rjmp	.+8      	; 0xfd4 <_ZN3PID7ComputeEv+0x25a>
     fcc:	1c 2d       	mov	r17, r12
     fce:	0d 2d       	mov	r16, r13
     fd0:	3e 2c       	mov	r3, r14
     fd2:	2f 2c       	mov	r2, r15
     fd4:	af 85       	ldd	r26, Y+15	; 0x0f
     fd6:	b8 89       	ldd	r27, Y+16	; 0x10
     fd8:	5e 96       	adiw	r26, 0x1e	; 30
     fda:	ed 91       	ld	r30, X+
     fdc:	fc 91       	ld	r31, X
     fde:	5f 97       	sbiw	r26, 0x1f	; 31
     fe0:	81 2f       	mov	r24, r17
     fe2:	90 2f       	mov	r25, r16
     fe4:	a3 2d       	mov	r26, r3
     fe6:	b2 2d       	mov	r27, r2
     fe8:	80 83       	st	Z, r24
     fea:	91 83       	std	Z+1, r25	; 0x01
     fec:	a2 83       	std	Z+2, r26	; 0x02
     fee:	b3 83       	std	Z+3, r27	; 0x03
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	9b 81       	ldd	r25, Y+3	; 0x03
     ff4:	ac 81       	ldd	r26, Y+4	; 0x04
     ff6:	bd 81       	ldd	r27, Y+5	; 0x05
     ff8:	ef 85       	ldd	r30, Y+15	; 0x0f
     ffa:	f8 89       	ldd	r31, Y+16	; 0x10
     ffc:	82 a7       	std	Z+42, r24	; 0x2a
     ffe:	93 a7       	std	Z+43, r25	; 0x2b
    1000:	a4 a7       	std	Z+44, r26	; 0x2c
    1002:	b5 a7       	std	Z+45, r27	; 0x2d
    1004:	8e 81       	ldd	r24, Y+6	; 0x06
    1006:	9f 81       	ldd	r25, Y+7	; 0x07
    1008:	a8 85       	ldd	r26, Y+8	; 0x08
    100a:	b9 85       	ldd	r27, Y+9	; 0x09
    100c:	82 a3       	std	Z+34, r24	; 0x22
    100e:	93 a3       	std	Z+35, r25	; 0x23
    1010:	a4 a3       	std	Z+36, r26	; 0x24
    1012:	b5 a3       	std	Z+37, r27	; 0x25
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	60 96       	adiw	r28, 0x10	; 16
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	ff 90       	pop	r15
    102c:	ef 90       	pop	r14
    102e:	df 90       	pop	r13
    1030:	cf 90       	pop	r12
    1032:	bf 90       	pop	r11
    1034:	af 90       	pop	r10
    1036:	9f 90       	pop	r9
    1038:	8f 90       	pop	r8
    103a:	7f 90       	pop	r7
    103c:	6f 90       	pop	r6
    103e:	5f 90       	pop	r5
    1040:	4f 90       	pop	r4
    1042:	3f 90       	pop	r3
    1044:	2f 90       	pop	r2
    1046:	08 95       	ret

00001048 <_ZN3PID10SetTuningsEdddi>:
    1048:	4f 92       	push	r4
    104a:	5f 92       	push	r5
    104c:	6f 92       	push	r6
    104e:	7f 92       	push	r7
    1050:	8f 92       	push	r8
    1052:	9f 92       	push	r9
    1054:	af 92       	push	r10
    1056:	bf 92       	push	r11
    1058:	cf 92       	push	r12
    105a:	df 92       	push	r13
    105c:	ef 92       	push	r14
    105e:	ff 92       	push	r15
    1060:	0f 93       	push	r16
    1062:	1f 93       	push	r17
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	00 d0       	rcall	.+0      	; 0x106a <_ZN3PID10SetTuningsEdddi+0x22>
    106a:	00 d0       	rcall	.+0      	; 0x106c <_ZN3PID10SetTuningsEdddi+0x24>
    106c:	00 d0       	rcall	.+0      	; 0x106e <_ZN3PID10SetTuningsEdddi+0x26>
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	9e 83       	std	Y+6, r25	; 0x06
    1074:	8d 83       	std	Y+5, r24	; 0x05
    1076:	49 83       	std	Y+1, r20	; 0x01
    1078:	5a 83       	std	Y+2, r21	; 0x02
    107a:	6b 83       	std	Y+3, r22	; 0x03
    107c:	7c 83       	std	Y+4, r23	; 0x04
    107e:	28 01       	movw	r4, r16
    1080:	39 01       	movw	r6, r18
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	a9 01       	movw	r20, r18
    1088:	69 81       	ldd	r22, Y+1	; 0x01
    108a:	7a 81       	ldd	r23, Y+2	; 0x02
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	9c 81       	ldd	r25, Y+4	; 0x04
    1090:	0e 94 1a 10 	call	0x2034	; 0x2034 <__cmpsf2>
    1094:	87 fd       	sbrc	r24, 7
    1096:	97 c0       	rjmp	.+302    	; 0x11c6 <_ZN3PID10SetTuningsEdddi+0x17e>
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	a9 01       	movw	r20, r18
    109e:	c3 01       	movw	r24, r6
    10a0:	b2 01       	movw	r22, r4
    10a2:	0e 94 1a 10 	call	0x2034	; 0x2034 <__cmpsf2>
    10a6:	87 fd       	sbrc	r24, 7
    10a8:	8e c0       	rjmp	.+284    	; 0x11c6 <_ZN3PID10SetTuningsEdddi+0x17e>
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	a9 01       	movw	r20, r18
    10b0:	c7 01       	movw	r24, r14
    10b2:	b6 01       	movw	r22, r12
    10b4:	0e 94 1a 10 	call	0x2034	; 0x2034 <__cmpsf2>
    10b8:	87 fd       	sbrc	r24, 7
    10ba:	85 c0       	rjmp	.+266    	; 0x11c6 <_ZN3PID10SetTuningsEdddi+0x17e>
    10bc:	ad 81       	ldd	r26, Y+5	; 0x05
    10be:	be 81       	ldd	r27, Y+6	; 0x06
    10c0:	5b 96       	adiw	r26, 0x1b	; 27
    10c2:	bc 92       	st	X, r11
    10c4:	ae 92       	st	-X, r10
    10c6:	5a 97       	sbiw	r26, 0x1a	; 26
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	aa 94       	dec	r10
    10cc:	ab 28       	or	r10, r11
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <_ZN3PID10SetTuningsEdddi+0x8a>
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	ed 81       	ldd	r30, Y+5	; 0x05
    10d4:	fe 81       	ldd	r31, Y+6	; 0x06
    10d6:	83 af       	std	Z+59, r24	; 0x3b
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	9a 81       	ldd	r25, Y+2	; 0x02
    10dc:	ab 81       	ldd	r26, Y+3	; 0x03
    10de:	bc 81       	ldd	r27, Y+4	; 0x04
    10e0:	80 83       	st	Z, r24
    10e2:	91 83       	std	Z+1, r25	; 0x01
    10e4:	a2 83       	std	Z+2, r26	; 0x02
    10e6:	b3 83       	std	Z+3, r27	; 0x03
    10e8:	44 82       	std	Z+4, r4	; 0x04
    10ea:	55 82       	std	Z+5, r5	; 0x05
    10ec:	66 82       	std	Z+6, r6	; 0x06
    10ee:	77 82       	std	Z+7, r7	; 0x07
    10f0:	c0 86       	std	Z+8, r12	; 0x08
    10f2:	d1 86       	std	Z+9, r13	; 0x09
    10f4:	e2 86       	std	Z+10, r14	; 0x0a
    10f6:	f3 86       	std	Z+11, r15	; 0x0b
    10f8:	66 a5       	ldd	r22, Z+46	; 0x2e
    10fa:	77 a5       	ldd	r23, Z+47	; 0x2f
    10fc:	80 a9       	ldd	r24, Z+48	; 0x30
    10fe:	91 a9       	ldd	r25, Z+49	; 0x31
    1100:	0e 94 c7 10 	call	0x218e	; 0x218e <__floatunsisf>
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	4a e7       	ldi	r20, 0x7A	; 122
    110a:	54 e4       	ldi	r21, 0x44	; 68
    110c:	0e 94 1f 10 	call	0x203e	; 0x203e <__divsf3>
    1110:	4b 01       	movw	r8, r22
    1112:	5c 01       	movw	r10, r24
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	9a 81       	ldd	r25, Y+2	; 0x02
    1118:	ab 81       	ldd	r26, Y+3	; 0x03
    111a:	bc 81       	ldd	r27, Y+4	; 0x04
    111c:	ed 81       	ldd	r30, Y+5	; 0x05
    111e:	fe 81       	ldd	r31, Y+6	; 0x06
    1120:	84 87       	std	Z+12, r24	; 0x0c
    1122:	95 87       	std	Z+13, r25	; 0x0d
    1124:	a6 87       	std	Z+14, r26	; 0x0e
    1126:	b7 87       	std	Z+15, r27	; 0x0f
    1128:	a5 01       	movw	r20, r10
    112a:	94 01       	movw	r18, r8
    112c:	c3 01       	movw	r24, r6
    112e:	b2 01       	movw	r22, r4
    1130:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__mulsf3>
    1134:	2b 01       	movw	r4, r22
    1136:	3c 01       	movw	r6, r24
    1138:	ad 81       	ldd	r26, Y+5	; 0x05
    113a:	be 81       	ldd	r27, Y+6	; 0x06
    113c:	50 96       	adiw	r26, 0x10	; 16
    113e:	6d 93       	st	X+, r22
    1140:	7d 93       	st	X+, r23
    1142:	8d 93       	st	X+, r24
    1144:	9c 93       	st	X, r25
    1146:	53 97       	sbiw	r26, 0x13	; 19
    1148:	a5 01       	movw	r20, r10
    114a:	94 01       	movw	r18, r8
    114c:	c7 01       	movw	r24, r14
    114e:	b6 01       	movw	r22, r12
    1150:	0e 94 1f 10 	call	0x203e	; 0x203e <__divsf3>
    1154:	6b 01       	movw	r12, r22
    1156:	7c 01       	movw	r14, r24
    1158:	ed 81       	ldd	r30, Y+5	; 0x05
    115a:	fe 81       	ldd	r31, Y+6	; 0x06
    115c:	64 8b       	std	Z+20, r22	; 0x14
    115e:	75 8b       	std	Z+21, r23	; 0x15
    1160:	86 8b       	std	Z+22, r24	; 0x16
    1162:	97 8b       	std	Z+23, r25	; 0x17
    1164:	80 8d       	ldd	r24, Z+24	; 0x18
    1166:	91 8d       	ldd	r25, Z+25	; 0x19
    1168:	01 97       	sbiw	r24, 0x01	; 1
    116a:	69 f5       	brne	.+90     	; 0x11c6 <_ZN3PID10SetTuningsEdddi+0x17e>
    116c:	29 81       	ldd	r18, Y+1	; 0x01
    116e:	3a 81       	ldd	r19, Y+2	; 0x02
    1170:	4b 81       	ldd	r20, Y+3	; 0x03
    1172:	5c 81       	ldd	r21, Y+4	; 0x04
    1174:	60 e0       	ldi	r22, 0x00	; 0
    1176:	70 e0       	ldi	r23, 0x00	; 0
    1178:	cb 01       	movw	r24, r22
    117a:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__subsf3>
    117e:	ad 81       	ldd	r26, Y+5	; 0x05
    1180:	be 81       	ldd	r27, Y+6	; 0x06
    1182:	1c 96       	adiw	r26, 0x0c	; 12
    1184:	6d 93       	st	X+, r22
    1186:	7d 93       	st	X+, r23
    1188:	8d 93       	st	X+, r24
    118a:	9c 93       	st	X, r25
    118c:	1f 97       	sbiw	r26, 0x0f	; 15
    118e:	a3 01       	movw	r20, r6
    1190:	92 01       	movw	r18, r4
    1192:	60 e0       	ldi	r22, 0x00	; 0
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	cb 01       	movw	r24, r22
    1198:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__subsf3>
    119c:	ed 81       	ldd	r30, Y+5	; 0x05
    119e:	fe 81       	ldd	r31, Y+6	; 0x06
    11a0:	60 8b       	std	Z+16, r22	; 0x10
    11a2:	71 8b       	std	Z+17, r23	; 0x11
    11a4:	82 8b       	std	Z+18, r24	; 0x12
    11a6:	93 8b       	std	Z+19, r25	; 0x13
    11a8:	a7 01       	movw	r20, r14
    11aa:	96 01       	movw	r18, r12
    11ac:	60 e0       	ldi	r22, 0x00	; 0
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	cb 01       	movw	r24, r22
    11b2:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__subsf3>
    11b6:	ad 81       	ldd	r26, Y+5	; 0x05
    11b8:	be 81       	ldd	r27, Y+6	; 0x06
    11ba:	54 96       	adiw	r26, 0x14	; 20
    11bc:	6d 93       	st	X+, r22
    11be:	7d 93       	st	X+, r23
    11c0:	8d 93       	st	X+, r24
    11c2:	9c 93       	st	X, r25
    11c4:	57 97       	sbiw	r26, 0x17	; 23
    11c6:	26 96       	adiw	r28, 0x06	; 6
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	f8 94       	cli
    11cc:	de bf       	out	0x3e, r29	; 62
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	cd bf       	out	0x3d, r28	; 61
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	1f 91       	pop	r17
    11d8:	0f 91       	pop	r16
    11da:	ff 90       	pop	r15
    11dc:	ef 90       	pop	r14
    11de:	df 90       	pop	r13
    11e0:	cf 90       	pop	r12
    11e2:	bf 90       	pop	r11
    11e4:	af 90       	pop	r10
    11e6:	9f 90       	pop	r9
    11e8:	8f 90       	pop	r8
    11ea:	7f 90       	pop	r7
    11ec:	6f 90       	pop	r6
    11ee:	5f 90       	pop	r5
    11f0:	4f 90       	pop	r4
    11f2:	08 95       	ret

000011f4 <_ZN3PID13SetSampleTimeEi>:
    11f4:	8f 92       	push	r8
    11f6:	9f 92       	push	r9
    11f8:	af 92       	push	r10
    11fa:	bf 92       	push	r11
    11fc:	cf 92       	push	r12
    11fe:	df 92       	push	r13
    1200:	ef 92       	push	r14
    1202:	ff 92       	push	r15
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	16 16       	cp	r1, r22
    120a:	17 06       	cpc	r1, r23
    120c:	b4 f5       	brge	.+108    	; 0x127a <_ZN3PID13SetSampleTimeEi+0x86>
    120e:	6b 01       	movw	r12, r22
    1210:	ec 01       	movw	r28, r24
    1212:	0d 2c       	mov	r0, r13
    1214:	00 0c       	add	r0, r0
    1216:	ee 08       	sbc	r14, r14
    1218:	ff 08       	sbc	r15, r15
    121a:	c7 01       	movw	r24, r14
    121c:	b6 01       	movw	r22, r12
    121e:	0e 94 c9 10 	call	0x2192	; 0x2192 <__floatsisf>
    1222:	4b 01       	movw	r8, r22
    1224:	5c 01       	movw	r10, r24
    1226:	6e a5       	ldd	r22, Y+46	; 0x2e
    1228:	7f a5       	ldd	r23, Y+47	; 0x2f
    122a:	88 a9       	ldd	r24, Y+48	; 0x30
    122c:	99 a9       	ldd	r25, Y+49	; 0x31
    122e:	0e 94 c7 10 	call	0x218e	; 0x218e <__floatunsisf>
    1232:	9b 01       	movw	r18, r22
    1234:	ac 01       	movw	r20, r24
    1236:	c5 01       	movw	r24, r10
    1238:	b4 01       	movw	r22, r8
    123a:	0e 94 1f 10 	call	0x203e	; 0x203e <__divsf3>
    123e:	4b 01       	movw	r8, r22
    1240:	5c 01       	movw	r10, r24
    1242:	9b 01       	movw	r18, r22
    1244:	ac 01       	movw	r20, r24
    1246:	68 89       	ldd	r22, Y+16	; 0x10
    1248:	79 89       	ldd	r23, Y+17	; 0x11
    124a:	8a 89       	ldd	r24, Y+18	; 0x12
    124c:	9b 89       	ldd	r25, Y+19	; 0x13
    124e:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__mulsf3>
    1252:	68 8b       	std	Y+16, r22	; 0x10
    1254:	79 8b       	std	Y+17, r23	; 0x11
    1256:	8a 8b       	std	Y+18, r24	; 0x12
    1258:	9b 8b       	std	Y+19, r25	; 0x13
    125a:	a5 01       	movw	r20, r10
    125c:	94 01       	movw	r18, r8
    125e:	6c 89       	ldd	r22, Y+20	; 0x14
    1260:	7d 89       	ldd	r23, Y+21	; 0x15
    1262:	8e 89       	ldd	r24, Y+22	; 0x16
    1264:	9f 89       	ldd	r25, Y+23	; 0x17
    1266:	0e 94 1f 10 	call	0x203e	; 0x203e <__divsf3>
    126a:	6c 8b       	std	Y+20, r22	; 0x14
    126c:	7d 8b       	std	Y+21, r23	; 0x15
    126e:	8e 8b       	std	Y+22, r24	; 0x16
    1270:	9f 8b       	std	Y+23, r25	; 0x17
    1272:	ce a6       	std	Y+46, r12	; 0x2e
    1274:	df a6       	std	Y+47, r13	; 0x2f
    1276:	e8 aa       	std	Y+48, r14	; 0x30
    1278:	f9 aa       	std	Y+49, r15	; 0x31
    127a:	df 91       	pop	r29
    127c:	cf 91       	pop	r28
    127e:	ff 90       	pop	r15
    1280:	ef 90       	pop	r14
    1282:	df 90       	pop	r13
    1284:	cf 90       	pop	r12
    1286:	bf 90       	pop	r11
    1288:	af 90       	pop	r10
    128a:	9f 90       	pop	r9
    128c:	8f 90       	pop	r8
    128e:	08 95       	ret

00001290 <_ZN3PID10InitializeEv>:
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
    1290:	8f 92       	push	r8
    1292:	9f 92       	push	r9
    1294:	af 92       	push	r10
    1296:	bf 92       	push	r11
    1298:	cf 92       	push	r12
    129a:	df 92       	push	r13
    129c:	ef 92       	push	r14
    129e:	ff 92       	push	r15
    12a0:	cf 93       	push	r28
    12a2:	df 93       	push	r29
    12a4:	ec 01       	movw	r28, r24
   outputSum = *myOutput;
    12a6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    12a8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    12aa:	c0 80       	ld	r12, Z
    12ac:	d1 80       	ldd	r13, Z+1	; 0x01
    12ae:	e2 80       	ldd	r14, Z+2	; 0x02
    12b0:	f3 80       	ldd	r15, Z+3	; 0x03
    12b2:	ce a2       	std	Y+38, r12	; 0x26
    12b4:	df a2       	std	Y+39, r13	; 0x27
    12b6:	e8 a6       	std	Y+40, r14	; 0x28
    12b8:	f9 a6       	std	Y+41, r15	; 0x29
   lastInput = *myInput;
    12ba:	ec 8d       	ldd	r30, Y+28	; 0x1c
    12bc:	fd 8d       	ldd	r31, Y+29	; 0x1d
    12be:	80 81       	ld	r24, Z
    12c0:	91 81       	ldd	r25, Z+1	; 0x01
    12c2:	a2 81       	ldd	r26, Z+2	; 0x02
    12c4:	b3 81       	ldd	r27, Z+3	; 0x03
    12c6:	8a a7       	std	Y+42, r24	; 0x2a
    12c8:	9b a7       	std	Y+43, r25	; 0x2b
    12ca:	ac a7       	std	Y+44, r26	; 0x2c
    12cc:	bd a7       	std	Y+45, r27	; 0x2d
   if(outputSum > outMax) outputSum = outMax;
    12ce:	8e a8       	ldd	r8, Y+54	; 0x36
    12d0:	9f a8       	ldd	r9, Y+55	; 0x37
    12d2:	a8 ac       	ldd	r10, Y+56	; 0x38
    12d4:	b9 ac       	ldd	r11, Y+57	; 0x39
    12d6:	a5 01       	movw	r20, r10
    12d8:	94 01       	movw	r18, r8
    12da:	c7 01       	movw	r24, r14
    12dc:	b6 01       	movw	r22, r12
    12de:	0e 94 79 11 	call	0x22f2	; 0x22f2 <__gesf2>
    12e2:	18 16       	cp	r1, r24
    12e4:	64 f0       	brlt	.+24     	; 0x12fe <_ZN3PID10InitializeEv+0x6e>
   else if(outputSum < outMin) outputSum = outMin;
    12e6:	8a a8       	ldd	r8, Y+50	; 0x32
    12e8:	9b a8       	ldd	r9, Y+51	; 0x33
    12ea:	ac a8       	ldd	r10, Y+52	; 0x34
    12ec:	bd a8       	ldd	r11, Y+53	; 0x35
    12ee:	a5 01       	movw	r20, r10
    12f0:	94 01       	movw	r18, r8
    12f2:	c7 01       	movw	r24, r14
    12f4:	b6 01       	movw	r22, r12
    12f6:	0e 94 1a 10 	call	0x2034	; 0x2034 <__cmpsf2>
    12fa:	87 ff       	sbrs	r24, 7
    12fc:	04 c0       	rjmp	.+8      	; 0x1306 <_ZN3PID10InitializeEv+0x76>
    12fe:	8e a2       	std	Y+38, r8	; 0x26
    1300:	9f a2       	std	Y+39, r9	; 0x27
    1302:	a8 a6       	std	Y+40, r10	; 0x28
    1304:	b9 a6       	std	Y+41, r11	; 0x29
}
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	ff 90       	pop	r15
    130c:	ef 90       	pop	r14
    130e:	df 90       	pop	r13
    1310:	cf 90       	pop	r12
    1312:	bf 90       	pop	r11
    1314:	af 90       	pop	r10
    1316:	9f 90       	pop	r9
    1318:	8f 90       	pop	r8
    131a:	08 95       	ret

0000131c <_ZN3PID7SetModeEi>:
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
    131c:	1f 93       	push	r17
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	ec 01       	movw	r28, r24
    bool newAuto = (Mode == AUTOMATIC);
    1324:	11 e0       	ldi	r17, 0x01	; 1
    1326:	61 30       	cpi	r22, 0x01	; 1
    1328:	71 05       	cpc	r23, r1
    132a:	09 f0       	breq	.+2      	; 0x132e <_ZN3PID7SetModeEi+0x12>
    132c:	10 e0       	ldi	r17, 0x00	; 0
    if(newAuto && !inAuto)
    132e:	61 30       	cpi	r22, 0x01	; 1
    1330:	71 05       	cpc	r23, r1
    1332:	31 f4       	brne	.+12     	; 0x1340 <_ZN3PID7SetModeEi+0x24>
    1334:	8a ad       	ldd	r24, Y+58	; 0x3a
    1336:	81 11       	cpse	r24, r1
    1338:	03 c0       	rjmp	.+6      	; 0x1340 <_ZN3PID7SetModeEi+0x24>
    {  /*we just went from manual to auto*/
        PID::Initialize();
    133a:	ce 01       	movw	r24, r28
    133c:	0e 94 48 09 	call	0x1290	; 0x1290 <_ZN3PID10InitializeEv>
    }
    inAuto = newAuto;
    1340:	1a af       	std	Y+58, r17	; 0x3a
}
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	1f 91       	pop	r17
    1348:	08 95       	ret

0000134a <_ZN3PID22SetControllerDirectionEi>:
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
    1352:	ec 01       	movw	r28, r24
    1354:	8b 01       	movw	r16, r22
   if(inAuto && Direction !=controllerDirection)
    1356:	8a ad       	ldd	r24, Y+58	; 0x3a
    1358:	88 23       	and	r24, r24
    135a:	61 f1       	breq	.+88     	; 0x13b4 <_ZN3PID22SetControllerDirectionEi+0x6a>
    135c:	88 8d       	ldd	r24, Y+24	; 0x18
    135e:	99 8d       	ldd	r25, Y+25	; 0x19
    1360:	86 17       	cp	r24, r22
    1362:	97 07       	cpc	r25, r23
    1364:	39 f1       	breq	.+78     	; 0x13b4 <_ZN3PID22SetControllerDirectionEi+0x6a>
   {
	    kp = (0 - kp);
    1366:	2c 85       	ldd	r18, Y+12	; 0x0c
    1368:	3d 85       	ldd	r19, Y+13	; 0x0d
    136a:	4e 85       	ldd	r20, Y+14	; 0x0e
    136c:	5f 85       	ldd	r21, Y+15	; 0x0f
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	70 e0       	ldi	r23, 0x00	; 0
    1372:	cb 01       	movw	r24, r22
    1374:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__subsf3>
    1378:	6c 87       	std	Y+12, r22	; 0x0c
    137a:	7d 87       	std	Y+13, r23	; 0x0d
    137c:	8e 87       	std	Y+14, r24	; 0x0e
    137e:	9f 87       	std	Y+15, r25	; 0x0f
      ki = (0 - ki);
    1380:	28 89       	ldd	r18, Y+16	; 0x10
    1382:	39 89       	ldd	r19, Y+17	; 0x11
    1384:	4a 89       	ldd	r20, Y+18	; 0x12
    1386:	5b 89       	ldd	r21, Y+19	; 0x13
    1388:	60 e0       	ldi	r22, 0x00	; 0
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	cb 01       	movw	r24, r22
    138e:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__subsf3>
    1392:	68 8b       	std	Y+16, r22	; 0x10
    1394:	79 8b       	std	Y+17, r23	; 0x11
    1396:	8a 8b       	std	Y+18, r24	; 0x12
    1398:	9b 8b       	std	Y+19, r25	; 0x13
      kd = (0 - kd);
    139a:	2c 89       	ldd	r18, Y+20	; 0x14
    139c:	3d 89       	ldd	r19, Y+21	; 0x15
    139e:	4e 89       	ldd	r20, Y+22	; 0x16
    13a0:	5f 89       	ldd	r21, Y+23	; 0x17
    13a2:	60 e0       	ldi	r22, 0x00	; 0
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	cb 01       	movw	r24, r22
    13a8:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__subsf3>
    13ac:	6c 8b       	std	Y+20, r22	; 0x14
    13ae:	7d 8b       	std	Y+21, r23	; 0x15
    13b0:	8e 8b       	std	Y+22, r24	; 0x16
    13b2:	9f 8b       	std	Y+23, r25	; 0x17
   }
   controllerDirection = Direction;
    13b4:	19 8f       	std	Y+25, r17	; 0x19
    13b6:	08 8f       	std	Y+24, r16	; 0x18
}
    13b8:	df 91       	pop	r29
    13ba:	cf 91       	pop	r28
    13bc:	1f 91       	pop	r17
    13be:	0f 91       	pop	r16
    13c0:	08 95       	ret

000013c2 <_ZN3PIDC1EPdS0_S0_dddii>:

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
    13c2:	4f 92       	push	r4
    13c4:	5f 92       	push	r5
    13c6:	6f 92       	push	r6
    13c8:	7f 92       	push	r7
    13ca:	8f 92       	push	r8
    13cc:	9f 92       	push	r9
    13ce:	af 92       	push	r10
    13d0:	bf 92       	push	r11
    13d2:	cf 92       	push	r12
    13d4:	df 92       	push	r13
    13d6:	ef 92       	push	r14
    13d8:	ff 92       	push	r15
    13da:	0f 93       	push	r16
    13dc:	1f 93       	push	r17
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <_ZN3PIDC1EPdS0_S0_dddii+0x22>
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <_ZN3PIDC1EPdS0_S0_dddii+0x24>
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	4c 01       	movw	r8, r24
    13ec:	27 01       	movw	r4, r14
    13ee:	38 01       	movw	r6, r16
    13f0:	a9 82       	std	Y+1, r10	; 0x01
    13f2:	ba 82       	std	Y+2, r11	; 0x02
    13f4:	cb 82       	std	Y+3, r12	; 0x03
    13f6:	dc 82       	std	Y+4, r13	; 0x04
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
    13f8:	fc 01       	movw	r30, r24
    13fa:	57 8f       	std	Z+31, r21	; 0x1f
    13fc:	46 8f       	std	Z+30, r20	; 0x1e
    myInput = Input;
    13fe:	75 8f       	std	Z+29, r23	; 0x1d
    1400:	64 8f       	std	Z+28, r22	; 0x1c
    mySetpoint = Setpoint;
    1402:	31 a3       	std	Z+33, r19	; 0x21
    1404:	20 a3       	std	Z+32, r18	; 0x20
    inAuto = false;
    1406:	12 ae       	std	Z+58, r1	; 0x3a
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
    1408:	12 aa       	std	Z+50, r1	; 0x32
    140a:	13 aa       	std	Z+51, r1	; 0x33
    140c:	14 aa       	std	Z+52, r1	; 0x34
    140e:	15 aa       	std	Z+53, r1	; 0x35
   outMax = Max;
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	af e7       	ldi	r26, 0x7F	; 127
    1416:	b3 e4       	ldi	r27, 0x43	; 67
    1418:	86 ab       	std	Z+54, r24	; 0x36
    141a:	97 ab       	std	Z+55, r25	; 0x37
    141c:	a0 af       	std	Z+56, r26	; 0x38
    141e:	b1 af       	std	Z+57, r27	; 0x39
    inAuto = false;

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
    1420:	84 e6       	ldi	r24, 0x64	; 100
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	a0 e0       	ldi	r26, 0x00	; 0
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	86 a7       	std	Z+46, r24	; 0x2e
    142a:	97 a7       	std	Z+47, r25	; 0x2f
    142c:	a0 ab       	std	Z+48, r26	; 0x30
    142e:	b1 ab       	std	Z+49, r27	; 0x31

    PID::SetControllerDirection(ControllerDirection);
    1430:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1432:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1434:	c4 01       	movw	r24, r8
    1436:	0e 94 a5 09 	call	0x134a	; 0x134a <_ZN3PID22SetControllerDirectionEi>
    PID::SetTunings(Kp, Ki, Kd, POn);
    143a:	ab 8c       	ldd	r10, Y+27	; 0x1b
    143c:	bc 8c       	ldd	r11, Y+28	; 0x1c
    143e:	cf 88       	ldd	r12, Y+23	; 0x17
    1440:	d8 8c       	ldd	r13, Y+24	; 0x18
    1442:	e9 8c       	ldd	r14, Y+25	; 0x19
    1444:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1446:	09 81       	ldd	r16, Y+1	; 0x01
    1448:	1a 81       	ldd	r17, Y+2	; 0x02
    144a:	2b 81       	ldd	r18, Y+3	; 0x03
    144c:	3c 81       	ldd	r19, Y+4	; 0x04
    144e:	b3 01       	movw	r22, r6
    1450:	a2 01       	movw	r20, r4
    1452:	c4 01       	movw	r24, r8
    1454:	0e 94 24 08 	call	0x1048	; 0x1048 <_ZN3PID10SetTuningsEdddi>

    lastTime = millis()-SampleTime;
    1458:	0e 94 17 19 	call	0x322e	; 0x322e <millis>
    145c:	f4 01       	movw	r30, r8
    145e:	46 a4       	ldd	r4, Z+46	; 0x2e
    1460:	57 a4       	ldd	r5, Z+47	; 0x2f
    1462:	60 a8       	ldd	r6, Z+48	; 0x30
    1464:	71 a8       	ldd	r7, Z+49	; 0x31
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	84 19       	sub	r24, r4
    146c:	95 09       	sbc	r25, r5
    146e:	a6 09       	sbc	r26, r6
    1470:	b7 09       	sbc	r27, r7
    1472:	82 a3       	std	Z+34, r24	; 0x22
    1474:	93 a3       	std	Z+35, r25	; 0x23
    1476:	a4 a3       	std	Z+36, r26	; 0x24
    1478:	b5 a3       	std	Z+37, r27	; 0x25
}
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	1f 91       	pop	r17
    1488:	0f 91       	pop	r16
    148a:	ff 90       	pop	r15
    148c:	ef 90       	pop	r14
    148e:	df 90       	pop	r13
    1490:	cf 90       	pop	r12
    1492:	bf 90       	pop	r11
    1494:	af 90       	pop	r10
    1496:	9f 90       	pop	r9
    1498:	8f 90       	pop	r8
    149a:	7f 90       	pop	r7
    149c:	6f 90       	pop	r6
    149e:	5f 90       	pop	r5
    14a0:	4f 90       	pop	r4
    14a2:	08 95       	ret

000014a4 <_ZN3PIDC1EPdS0_S0_dddi>:
/*Constructor (...)*********************************************************
 *    To allow backwards compatability for v1.1, or for people that just want
 *    to use Proportional on Error without explicitly saying so
 ***************************************************************************/

PID::PID(double* Input, double* Output, double* Setpoint,
    14a4:	8f 92       	push	r8
    14a6:	9f 92       	push	r9
    14a8:	af 92       	push	r10
    14aa:	bf 92       	push	r11
    14ac:	cf 92       	push	r12
    14ae:	df 92       	push	r13
    14b0:	ef 92       	push	r14
    14b2:	ff 92       	push	r15
    14b4:	0f 93       	push	r16
    14b6:	1f 93       	push	r17
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	ef 85       	ldd	r30, Y+15	; 0x0f
    14c2:	f8 89       	ldd	r31, Y+16	; 0x10
    14c4:	a9 89       	ldd	r26, Y+17	; 0x11
    14c6:	ba 89       	ldd	r27, Y+18	; 0x12
    14c8:	9b 88       	ldd	r9, Y+19	; 0x13
    14ca:	8c 88       	ldd	r8, Y+20	; 0x14
        double Kp, double Ki, double Kd, int ControllerDirection)
    :PID::PID(Input, Output, Setpoint, Kp, Ki, Kd, P_ON_E, ControllerDirection)
    14cc:	8f 92       	push	r8
    14ce:	9f 92       	push	r9
    14d0:	1f 92       	push	r1
    14d2:	99 24       	eor	r9, r9
    14d4:	93 94       	inc	r9
    14d6:	9f 92       	push	r9
    14d8:	bf 93       	push	r27
    14da:	af 93       	push	r26
    14dc:	ff 93       	push	r31
    14de:	ef 93       	push	r30
    14e0:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <_ZN3PIDC1EPdS0_S0_dddii>
{

}
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	cd bf       	out	0x3d, r28	; 61
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	ff 90       	pop	r15
    14f8:	ef 90       	pop	r14
    14fa:	df 90       	pop	r13
    14fc:	cf 90       	pop	r12
    14fe:	bf 90       	pop	r11
    1500:	af 90       	pop	r10
    1502:	9f 90       	pop	r9
    1504:	8f 90       	pop	r8
    1506:	08 95       	ret

00001508 <_ZN7hd447806ioinitEv>:
	{
		buf[i] = pgm_read_byte(charmap++);
	}
	// call the RAM based function to actually send it to the LCD
	return(createChar(location, buf));
}
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	08 95       	ret

0000150e <_ZN7hd447806ioreadENS_6iotypeE>:
    150e:	8d ef       	ldi	r24, 0xFD	; 253
    1510:	9f ef       	ldi	r25, 0xFF	; 255
    1512:	08 95       	ret

00001514 <_ZN7hd4478014iosetBacklightEh>:
    1514:	8d ef       	ldi	r24, 0xFD	; 253
    1516:	9f ef       	ldi	r25, 0xFF	; 255
    1518:	08 95       	ret

0000151a <_ZN7hd44780C1Ev>:
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	ec 01       	movw	r28, r24
    1520:	1b 82       	std	Y+3, r1	; 0x03
    1522:	1a 82       	std	Y+2, r1	; 0x02
    1524:	85 e4       	ldi	r24, 0x45	; 69
    1526:	91 e0       	ldi	r25, 0x01	; 1
    1528:	99 83       	std	Y+1, r25	; 0x01
    152a:	88 83       	st	Y, r24
    152c:	1f 82       	std	Y+7, r1	; 0x07
    152e:	18 86       	std	Y+8, r1	; 0x08
    1530:	80 ed       	ldi	r24, 0xD0	; 208
    1532:	97 e0       	ldi	r25, 0x07	; 7
    1534:	a0 e0       	ldi	r26, 0x00	; 0
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	88 8b       	std	Y+16, r24	; 0x10
    153a:	99 8b       	std	Y+17, r25	; 0x11
    153c:	aa 8b       	std	Y+18, r26	; 0x12
    153e:	bb 8b       	std	Y+19, r27	; 0x13
    1540:	86 e2       	ldi	r24, 0x26	; 38
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	a0 e0       	ldi	r26, 0x00	; 0
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	8c 8b       	std	Y+20, r24	; 0x14
    154a:	9d 8b       	std	Y+21, r25	; 0x15
    154c:	ae 8b       	std	Y+22, r26	; 0x16
    154e:	bf 8b       	std	Y+23, r27	; 0x17
    1550:	1c 86       	std	Y+12, r1	; 0x0c
    1552:	1d 86       	std	Y+13, r1	; 0x0d
    1554:	1e 86       	std	Y+14, r1	; 0x0e
    1556:	1f 86       	std	Y+15, r1	; 0x0f
    1558:	1b 86       	std	Y+11, r1	; 0x0b
    155a:	0e 94 23 19 	call	0x3246	; 0x3246 <micros>
    155e:	68 8f       	std	Y+24, r22	; 0x18
    1560:	79 8f       	std	Y+25, r23	; 0x19
    1562:	8a 8f       	std	Y+26, r24	; 0x1a
    1564:	9b 8f       	std	Y+27, r25	; 0x1b
    1566:	1c 8e       	std	Y+28, r1	; 0x1c
    1568:	1d 8e       	std	Y+29, r1	; 0x1d
    156a:	1e 8e       	std	Y+30, r1	; 0x1e
    156c:	1f 8e       	std	Y+31, r1	; 0x1f
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	08 95       	ret

00001574 <_ZN7hd447809backlightEv>:
    1574:	dc 01       	movw	r26, r24
    1576:	ed 91       	ld	r30, X+
    1578:	fc 91       	ld	r31, X
    157a:	06 84       	ldd	r0, Z+14	; 0x0e
    157c:	f7 85       	ldd	r31, Z+15	; 0x0f
    157e:	e0 2d       	mov	r30, r0
    1580:	6f ef       	ldi	r22, 0xFF	; 255
    1582:	09 94       	ijmp

00001584 <_ZN7hd4478011noBacklightEv>:
    1584:	dc 01       	movw	r26, r24
    1586:	ed 91       	ld	r30, X+
    1588:	fc 91       	ld	r31, X
    158a:	06 84       	ldd	r0, Z+14	; 0x0e
    158c:	f7 85       	ldd	r31, Z+15	; 0x0f
    158e:	e0 2d       	mov	r30, r0
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	09 94       	ijmp

00001594 <_ZN7hd447807commandEh>:
    1594:	8f 92       	push	r8
    1596:	9f 92       	push	r9
    1598:	af 92       	push	r10
    159a:	bf 92       	push	r11
    159c:	ef 92       	push	r14
    159e:	ff 92       	push	r15
    15a0:	1f 93       	push	r17
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
    15a6:	ec 01       	movw	r28, r24
    15a8:	16 2f       	mov	r17, r22
    15aa:	e8 81       	ld	r30, Y
    15ac:	f9 81       	ldd	r31, Y+1	; 0x01
    15ae:	04 84       	ldd	r0, Z+12	; 0x0c
    15b0:	f5 85       	ldd	r31, Z+13	; 0x0d
    15b2:	e0 2d       	mov	r30, r0
    15b4:	46 2f       	mov	r20, r22
    15b6:	60 e0       	ldi	r22, 0x00	; 0
    15b8:	09 95       	icall
    15ba:	7c 01       	movw	r14, r24
    15bc:	11 50       	subi	r17, 0x01	; 1
    15be:	12 30       	cpi	r17, 0x02	; 2
    15c0:	38 f4       	brcc	.+14     	; 0x15d0 <_ZN7hd447807commandEh+0x3c>
    15c2:	19 86       	std	Y+9, r1	; 0x09
    15c4:	1a 86       	std	Y+10, r1	; 0x0a
    15c6:	88 88       	ldd	r8, Y+16	; 0x10
    15c8:	99 88       	ldd	r9, Y+17	; 0x11
    15ca:	aa 88       	ldd	r10, Y+18	; 0x12
    15cc:	bb 88       	ldd	r11, Y+19	; 0x13
    15ce:	04 c0       	rjmp	.+8      	; 0x15d8 <_ZN7hd447807commandEh+0x44>
    15d0:	8c 88       	ldd	r8, Y+20	; 0x14
    15d2:	9d 88       	ldd	r9, Y+21	; 0x15
    15d4:	ae 88       	ldd	r10, Y+22	; 0x16
    15d6:	bf 88       	ldd	r11, Y+23	; 0x17
    15d8:	0e 94 23 19 	call	0x3246	; 0x3246 <micros>
    15dc:	68 8f       	std	Y+24, r22	; 0x18
    15de:	79 8f       	std	Y+25, r23	; 0x19
    15e0:	8a 8f       	std	Y+26, r24	; 0x1a
    15e2:	9b 8f       	std	Y+27, r25	; 0x1b
    15e4:	8c 8e       	std	Y+28, r8	; 0x1c
    15e6:	9d 8e       	std	Y+29, r9	; 0x1d
    15e8:	ae 8e       	std	Y+30, r10	; 0x1e
    15ea:	bf 8e       	std	Y+31, r11	; 0x1f
    15ec:	c7 01       	movw	r24, r14
    15ee:	df 91       	pop	r29
    15f0:	cf 91       	pop	r28
    15f2:	1f 91       	pop	r17
    15f4:	ff 90       	pop	r15
    15f6:	ef 90       	pop	r14
    15f8:	bf 90       	pop	r11
    15fa:	af 90       	pop	r10
    15fc:	9f 90       	pop	r9
    15fe:	8f 90       	pop	r8
    1600:	08 95       	ret

00001602 <_ZN7hd447805clearEv>:
    1602:	61 e0       	ldi	r22, 0x01	; 1
    1604:	0c 94 ca 0a 	jmp	0x1594	; 0x1594 <_ZN7hd447807commandEh>

00001608 <_ZN7hd447809setCursorEhh>:
    1608:	fc 01       	movw	r30, r24
    160a:	80 85       	ldd	r24, Z+8	; 0x08
    160c:	48 17       	cp	r20, r24
    160e:	10 f0       	brcs	.+4      	; 0x1614 <_ZN7hd447809setCursorEhh+0xc>
    1610:	4f ef       	ldi	r20, 0xFF	; 255
    1612:	48 0f       	add	r20, r24
    1614:	93 85       	ldd	r25, Z+11	; 0x0b
    1616:	99 23       	and	r25, r25
    1618:	59 f0       	breq	.+22     	; 0x1630 <_ZN7hd447809setCursorEhh+0x28>
    161a:	97 81       	ldd	r25, Z+7	; 0x07
    161c:	69 17       	cp	r22, r25
    161e:	30 f0       	brcs	.+12     	; 0x162c <_ZN7hd447809setCursorEhh+0x24>
    1620:	69 1b       	sub	r22, r25
    1622:	4f 5f       	subi	r20, 0xFF	; 255
    1624:	48 17       	cp	r20, r24
    1626:	d0 f3       	brcs	.-12     	; 0x161c <_ZN7hd447809setCursorEhh+0x14>
    1628:	40 e0       	ldi	r20, 0x00	; 0
    162a:	f8 cf       	rjmp	.-16     	; 0x161c <_ZN7hd447809setCursorEhh+0x14>
    162c:	61 87       	std	Z+9, r22	; 0x09
    162e:	42 87       	std	Z+10, r20	; 0x0a
    1630:	df 01       	movw	r26, r30
    1632:	a4 0f       	add	r26, r20
    1634:	b1 1d       	adc	r27, r1
    1636:	1c 96       	adiw	r26, 0x0c	; 12
    1638:	8c 91       	ld	r24, X
    163a:	68 0f       	add	r22, r24
    163c:	60 68       	ori	r22, 0x80	; 128
    163e:	cf 01       	movw	r24, r30
    1640:	0c 94 ca 0a 	jmp	0x1594	; 0x1594 <_ZN7hd447807commandEh>

00001644 <_ZN7hd447807displayEv>:
    1644:	fc 01       	movw	r30, r24
    1646:	65 81       	ldd	r22, Z+5	; 0x05
    1648:	26 2f       	mov	r18, r22
    164a:	24 60       	ori	r18, 0x04	; 4
    164c:	25 83       	std	Z+5, r18	; 0x05
    164e:	6c 60       	ori	r22, 0x0C	; 12
    1650:	0c 94 ca 0a 	jmp	0x1594	; 0x1594 <_ZN7hd447807commandEh>

00001654 <_ZN7hd447805beginEhhh>:
    1654:	0f 93       	push	r16
    1656:	1f 93       	push	r17
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	ec 01       	movw	r28, r24
    165e:	02 2f       	mov	r16, r18
    1660:	14 2f       	mov	r17, r20
    1662:	45 30       	cpi	r20, 0x05	; 5
    1664:	08 f0       	brcs	.+2      	; 0x1668 <_ZN7hd447805beginEhhh+0x14>
    1666:	14 e0       	ldi	r17, 0x04	; 4
    1668:	8c 85       	ldd	r24, Y+12	; 0x0c
    166a:	81 11       	cpse	r24, r1
    166c:	09 c0       	rjmp	.+18     	; 0x1680 <_ZN7hd447805beginEhhh+0x2c>
    166e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1670:	81 11       	cpse	r24, r1
    1672:	06 c0       	rjmp	.+12     	; 0x1680 <_ZN7hd447805beginEhhh+0x2c>
    1674:	8e 85       	ldd	r24, Y+14	; 0x0e
    1676:	81 11       	cpse	r24, r1
    1678:	03 c0       	rjmp	.+6      	; 0x1680 <_ZN7hd447805beginEhhh+0x2c>
    167a:	8f 85       	ldd	r24, Y+15	; 0x0f
    167c:	88 23       	and	r24, r24
    167e:	29 f0       	breq	.+10     	; 0x168a <_ZN7hd447805beginEhhh+0x36>
    1680:	8f 81       	ldd	r24, Y+7	; 0x07
    1682:	88 23       	and	r24, r24
    1684:	59 f0       	breq	.+22     	; 0x169c <_ZN7hd447805beginEhhh+0x48>
    1686:	86 17       	cp	r24, r22
    1688:	49 f0       	breq	.+18     	; 0x169c <_ZN7hd447805beginEhhh+0x48>
    168a:	1c 86       	std	Y+12, r1	; 0x0c
    168c:	80 e4       	ldi	r24, 0x40	; 64
    168e:	8d 87       	std	Y+13, r24	; 0x0d
    1690:	6e 87       	std	Y+14, r22	; 0x0e
    1692:	86 2f       	mov	r24, r22
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	80 5c       	subi	r24, 0xC0	; 192
    1698:	9f 4f       	sbci	r25, 0xFF	; 255
    169a:	8f 87       	std	Y+15, r24	; 0x0f
    169c:	18 87       	std	Y+8, r17	; 0x08
    169e:	6f 83       	std	Y+7, r22	; 0x07
    16a0:	64 e6       	ldi	r22, 0x64	; 100
    16a2:	70 e0       	ldi	r23, 0x00	; 0
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	0e 94 48 19 	call	0x3290	; 0x3290 <delay>
    16ac:	1c 82       	std	Y+4, r1	; 0x04
    16ae:	e8 81       	ld	r30, Y
    16b0:	f9 81       	ldd	r31, Y+1	; 0x01
    16b2:	00 84       	ldd	r0, Z+8	; 0x08
    16b4:	f1 85       	ldd	r31, Z+9	; 0x09
    16b6:	e0 2d       	mov	r30, r0
    16b8:	ce 01       	movw	r24, r28
    16ba:	09 95       	icall
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	09 f0       	breq	.+2      	; 0x16c2 <_ZN7hd447805beginEhhh+0x6e>
    16c0:	5e c0       	rjmp	.+188    	; 0x177e <_ZN7hd447805beginEhhh+0x12a>
    16c2:	88 85       	ldd	r24, Y+8	; 0x08
    16c4:	82 30       	cpi	r24, 0x02	; 2
    16c6:	18 f0       	brcs	.+6      	; 0x16ce <_ZN7hd447805beginEhhh+0x7a>
    16c8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ca:	88 60       	ori	r24, 0x08	; 8
    16cc:	8c 83       	std	Y+4, r24	; 0x04
    16ce:	00 23       	and	r16, r16
    16d0:	29 f0       	breq	.+10     	; 0x16dc <_ZN7hd447805beginEhhh+0x88>
    16d2:	11 30       	cpi	r17, 0x01	; 1
    16d4:	19 f4       	brne	.+6      	; 0x16dc <_ZN7hd447805beginEhhh+0x88>
    16d6:	8c 81       	ldd	r24, Y+4	; 0x04
    16d8:	84 60       	ori	r24, 0x04	; 4
    16da:	8c 83       	std	Y+4, r24	; 0x04
    16dc:	e8 81       	ld	r30, Y
    16de:	f9 81       	ldd	r31, Y+1	; 0x01
    16e0:	04 84       	ldd	r0, Z+12	; 0x0c
    16e2:	f5 85       	ldd	r31, Z+13	; 0x0d
    16e4:	e0 2d       	mov	r30, r0
    16e6:	40 e3       	ldi	r20, 0x30	; 48
    16e8:	62 e0       	ldi	r22, 0x02	; 2
    16ea:	ce 01       	movw	r24, r28
    16ec:	09 95       	icall
    16ee:	65 e0       	ldi	r22, 0x05	; 5
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	0e 94 48 19 	call	0x3290	; 0x3290 <delay>
    16fa:	e8 81       	ld	r30, Y
    16fc:	f9 81       	ldd	r31, Y+1	; 0x01
    16fe:	04 84       	ldd	r0, Z+12	; 0x0c
    1700:	f5 85       	ldd	r31, Z+13	; 0x0d
    1702:	e0 2d       	mov	r30, r0
    1704:	40 e3       	ldi	r20, 0x30	; 48
    1706:	62 e0       	ldi	r22, 0x02	; 2
    1708:	ce 01       	movw	r24, r28
    170a:	09 95       	icall
    170c:	61 e0       	ldi	r22, 0x01	; 1
    170e:	70 e0       	ldi	r23, 0x00	; 0
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	0e 94 48 19 	call	0x3290	; 0x3290 <delay>
    1718:	e8 81       	ld	r30, Y
    171a:	f9 81       	ldd	r31, Y+1	; 0x01
    171c:	04 84       	ldd	r0, Z+12	; 0x0c
    171e:	f5 85       	ldd	r31, Z+13	; 0x0d
    1720:	e0 2d       	mov	r30, r0
    1722:	40 e3       	ldi	r20, 0x30	; 48
    1724:	62 e0       	ldi	r22, 0x02	; 2
    1726:	ce 01       	movw	r24, r28
    1728:	09 95       	icall
    172a:	61 e0       	ldi	r22, 0x01	; 1
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	0e 94 48 19 	call	0x3290	; 0x3290 <delay>
    1736:	8c 81       	ldd	r24, Y+4	; 0x04
    1738:	84 fd       	sbrc	r24, 4
    173a:	09 c0       	rjmp	.+18     	; 0x174e <_ZN7hd447805beginEhhh+0xfa>
    173c:	e8 81       	ld	r30, Y
    173e:	f9 81       	ldd	r31, Y+1	; 0x01
    1740:	04 84       	ldd	r0, Z+12	; 0x0c
    1742:	f5 85       	ldd	r31, Z+13	; 0x0d
    1744:	e0 2d       	mov	r30, r0
    1746:	40 e2       	ldi	r20, 0x20	; 32
    1748:	62 e0       	ldi	r22, 0x02	; 2
    174a:	ce 01       	movw	r24, r28
    174c:	09 95       	icall
    174e:	6c 81       	ldd	r22, Y+4	; 0x04
    1750:	60 62       	ori	r22, 0x20	; 32
    1752:	ce 01       	movw	r24, r28
    1754:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN7hd447807commandEh>
    1758:	84 e0       	ldi	r24, 0x04	; 4
    175a:	8d 83       	std	Y+5, r24	; 0x05
    175c:	ce 01       	movw	r24, r28
    175e:	0e 94 22 0b 	call	0x1644	; 0x1644 <_ZN7hd447807displayEv>
    1762:	ce 01       	movw	r24, r28
    1764:	0e 94 01 0b 	call	0x1602	; 0x1602 <_ZN7hd447805clearEv>
    1768:	82 e0       	ldi	r24, 0x02	; 2
    176a:	8e 83       	std	Y+6, r24	; 0x06
    176c:	66 e0       	ldi	r22, 0x06	; 6
    176e:	ce 01       	movw	r24, r28
    1770:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN7hd447807commandEh>
    1774:	8c 01       	movw	r16, r24
    1776:	ce 01       	movw	r24, r28
    1778:	0e 94 ba 0a 	call	0x1574	; 0x1574 <_ZN7hd447809backlightEv>
    177c:	c8 01       	movw	r24, r16
    177e:	df 91       	pop	r29
    1780:	cf 91       	pop	r28
    1782:	1f 91       	pop	r17
    1784:	0f 91       	pop	r16
    1786:	08 95       	ret

00001788 <_ZN7hd447806_writeEh>:
    1788:	cf 92       	push	r12
    178a:	df 92       	push	r13
    178c:	ef 92       	push	r14
    178e:	ff 92       	push	r15
    1790:	0f 93       	push	r16
    1792:	1f 93       	push	r17
    1794:	cf 93       	push	r28
    1796:	df 93       	push	r29
    1798:	ec 01       	movw	r28, r24
    179a:	46 2f       	mov	r20, r22
    179c:	e8 81       	ld	r30, Y
    179e:	f9 81       	ldd	r31, Y+1	; 0x01
    17a0:	04 84       	ldd	r0, Z+12	; 0x0c
    17a2:	f5 85       	ldd	r31, Z+13	; 0x0d
    17a4:	e0 2d       	mov	r30, r0
    17a6:	61 e0       	ldi	r22, 0x01	; 1
    17a8:	09 95       	icall
    17aa:	8c 01       	movw	r16, r24
    17ac:	cc 88       	ldd	r12, Y+20	; 0x14
    17ae:	dd 88       	ldd	r13, Y+21	; 0x15
    17b0:	ee 88       	ldd	r14, Y+22	; 0x16
    17b2:	ff 88       	ldd	r15, Y+23	; 0x17
    17b4:	0e 94 23 19 	call	0x3246	; 0x3246 <micros>
    17b8:	68 8f       	std	Y+24, r22	; 0x18
    17ba:	79 8f       	std	Y+25, r23	; 0x19
    17bc:	8a 8f       	std	Y+26, r24	; 0x1a
    17be:	9b 8f       	std	Y+27, r25	; 0x1b
    17c0:	cc 8e       	std	Y+28, r12	; 0x1c
    17c2:	dd 8e       	std	Y+29, r13	; 0x1d
    17c4:	ee 8e       	std	Y+30, r14	; 0x1e
    17c6:	ff 8e       	std	Y+31, r15	; 0x1f
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	01 2b       	or	r16, r17
    17ce:	11 f0       	breq	.+4      	; 0x17d4 <_ZN7hd447806_writeEh+0x4c>
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	df 91       	pop	r29
    17d6:	cf 91       	pop	r28
    17d8:	1f 91       	pop	r17
    17da:	0f 91       	pop	r16
    17dc:	ff 90       	pop	r15
    17de:	ef 90       	pop	r14
    17e0:	df 90       	pop	r13
    17e2:	cf 90       	pop	r12
    17e4:	08 95       	ret

000017e6 <_ZN7hd447805writeEh>:

// write() - process data character byte to lcd
// returns number of bytes successfully written to device
// i.e. 1 if success or 0 if no character was processed (error)
size_t hd44780::write(uint8_t value)
{
    17e6:	0f 93       	push	r16
    17e8:	1f 93       	push	r17
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	ec 01       	movw	r28, r24
size_t rval;

	rval = _write(value);
    17f0:	0e 94 c4 0b 	call	0x1788	; 0x1788 <_ZN7hd447806_writeEh>
    17f4:	8c 01       	movw	r16, r24
	if(_wraplines)
    17f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    17f8:	88 23       	and	r24, r24
    17fa:	99 f0       	breq	.+38     	; 0x1822 <_ZN7hd447805writeEh+0x3c>
	{
		// currently only works for left to right mode
		if(++_curcol >= _cols)
    17fc:	89 85       	ldd	r24, Y+9	; 0x09
    17fe:	8f 5f       	subi	r24, 0xFF	; 255
    1800:	89 87       	std	Y+9, r24	; 0x09
    1802:	9f 81       	ldd	r25, Y+7	; 0x07
    1804:	89 17       	cp	r24, r25
    1806:	68 f0       	brcs	.+26     	; 0x1822 <_ZN7hd447805writeEh+0x3c>
		{
			_curcol = 0;
    1808:	19 86       	std	Y+9, r1	; 0x09
			_currow++;
    180a:	8a 85       	ldd	r24, Y+10	; 0x0a
    180c:	8f 5f       	subi	r24, 0xFF	; 255
    180e:	8a 87       	std	Y+10, r24	; 0x0a
			if(_currow >= _rows)
    1810:	98 85       	ldd	r25, Y+8	; 0x08
    1812:	89 17       	cp	r24, r25
    1814:	08 f0       	brcs	.+2      	; 0x1818 <_ZN7hd447805writeEh+0x32>
				_currow = 0;
    1816:	1a 86       	std	Y+10, r1	; 0x0a
			setCursor(_curcol, _currow);
    1818:	4a 85       	ldd	r20, Y+10	; 0x0a
    181a:	60 e0       	ldi	r22, 0x00	; 0
    181c:	ce 01       	movw	r24, r28
    181e:	0e 94 04 0b 	call	0x1608	; 0x1608 <_ZN7hd447809setCursorEhh>
		}
	}
	return (rval);
}
    1822:	c8 01       	movw	r24, r16
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	1f 91       	pop	r17
    182a:	0f 91       	pop	r16
    182c:	08 95       	ret

0000182e <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    182e:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <twi_state>
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <twi_sendStop>
    1838:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <twi_inRepStart>
    183c:	61 e0       	ldi	r22, 0x01	; 1
    183e:	82 e0       	ldi	r24, 0x02	; 2
    1840:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <digitalWrite>
    1844:	61 e0       	ldi	r22, 0x01	; 1
    1846:	83 e0       	ldi	r24, 0x03	; 3
    1848:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <digitalWrite>
    184c:	e9 eb       	ldi	r30, 0xB9	; 185
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	8e 7f       	andi	r24, 0xFE	; 254
    1854:	80 83       	st	Z, r24
    1856:	80 81       	ld	r24, Z
    1858:	8d 7f       	andi	r24, 0xFD	; 253
    185a:	80 83       	st	Z, r24
    185c:	88 e4       	ldi	r24, 0x48	; 72
    185e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1862:	85 e4       	ldi	r24, 0x45	; 69
    1864:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1868:	08 95       	ret

0000186a <twi_readFrom>:
    186a:	41 32       	cpi	r20, 0x21	; 33
    186c:	08 f0       	brcs	.+2      	; 0x1870 <twi_readFrom+0x6>
    186e:	43 c0       	rjmp	.+134    	; 0x18f6 <twi_readFrom+0x8c>
    1870:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <twi_state>
    1874:	91 11       	cpse	r25, r1
    1876:	fc cf       	rjmp	.-8      	; 0x1870 <twi_readFrom+0x6>
    1878:	91 e0       	ldi	r25, 0x01	; 1
    187a:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <twi_state>
    187e:	20 93 7c 02 	sts	0x027C, r18	; 0x80027c <twi_sendStop>
    1882:	2f ef       	ldi	r18, 0xFF	; 255
    1884:	20 93 11 02 	sts	0x0211, r18	; 0x800211 <twi_error>
    1888:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <twi_masterBufferIndex>
    188c:	24 0f       	add	r18, r20
    188e:	20 93 55 02 	sts	0x0255, r18	; 0x800255 <twi_masterBufferLength>
    1892:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <twi_slarw>
    1896:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <twi_slarw>
    189a:	88 0f       	add	r24, r24
    189c:	89 2b       	or	r24, r25
    189e:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <twi_slarw>
    18a2:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <twi_inRepStart>
    18a6:	81 30       	cpi	r24, 0x01	; 1
    18a8:	61 f4       	brne	.+24     	; 0x18c2 <twi_readFrom+0x58>
    18aa:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <twi_inRepStart>
    18ae:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <twi_slarw>
    18b2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    18b6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    18ba:	83 fd       	sbrc	r24, 3
    18bc:	f8 cf       	rjmp	.-16     	; 0x18ae <twi_readFrom+0x44>
    18be:	85 ec       	ldi	r24, 0xC5	; 197
    18c0:	01 c0       	rjmp	.+2      	; 0x18c4 <twi_readFrom+0x5a>
    18c2:	85 ee       	ldi	r24, 0xE5	; 229
    18c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    18c8:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <twi_state>
    18cc:	81 30       	cpi	r24, 0x01	; 1
    18ce:	e1 f3       	breq	.-8      	; 0x18c8 <twi_readFrom+0x5e>
    18d0:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <twi_masterBufferIndex>
    18d4:	84 17       	cp	r24, r20
    18d6:	10 f4       	brcc	.+4      	; 0x18dc <twi_readFrom+0x72>
    18d8:	40 91 56 02 	lds	r20, 0x0256	; 0x800256 <twi_masterBufferIndex>
    18dc:	a7 e5       	ldi	r26, 0x57	; 87
    18de:	b2 e0       	ldi	r27, 0x02	; 2
    18e0:	96 2f       	mov	r25, r22
    18e2:	fb 01       	movw	r30, r22
    18e4:	8e 2f       	mov	r24, r30
    18e6:	89 1b       	sub	r24, r25
    18e8:	84 17       	cp	r24, r20
    18ea:	18 f4       	brcc	.+6      	; 0x18f2 <twi_readFrom+0x88>
    18ec:	8d 91       	ld	r24, X+
    18ee:	81 93       	st	Z+, r24
    18f0:	f9 cf       	rjmp	.-14     	; 0x18e4 <twi_readFrom+0x7a>
    18f2:	84 2f       	mov	r24, r20
    18f4:	08 95       	ret
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	08 95       	ret

000018fa <twi_writeTo>:
    18fa:	0f 93       	push	r16
    18fc:	41 32       	cpi	r20, 0x21	; 33
    18fe:	08 f0       	brcs	.+2      	; 0x1902 <twi_writeTo+0x8>
    1900:	4a c0       	rjmp	.+148    	; 0x1996 <twi_writeTo+0x9c>
    1902:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <twi_state>
    1906:	91 11       	cpse	r25, r1
    1908:	fc cf       	rjmp	.-8      	; 0x1902 <twi_writeTo+0x8>
    190a:	32 e0       	ldi	r19, 0x02	; 2
    190c:	30 93 7e 02 	sts	0x027E, r19	; 0x80027e <twi_state>
    1910:	00 93 7c 02 	sts	0x027C, r16	; 0x80027c <twi_sendStop>
    1914:	3f ef       	ldi	r19, 0xFF	; 255
    1916:	30 93 11 02 	sts	0x0211, r19	; 0x800211 <twi_error>
    191a:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <twi_masterBufferIndex>
    191e:	40 93 55 02 	sts	0x0255, r20	; 0x800255 <twi_masterBufferLength>
    1922:	56 2f       	mov	r21, r22
    1924:	a7 e5       	ldi	r26, 0x57	; 87
    1926:	b2 e0       	ldi	r27, 0x02	; 2
    1928:	fb 01       	movw	r30, r22
    192a:	3e 2f       	mov	r19, r30
    192c:	35 1b       	sub	r19, r21
    192e:	34 17       	cp	r19, r20
    1930:	18 f4       	brcc	.+6      	; 0x1938 <twi_writeTo+0x3e>
    1932:	31 91       	ld	r19, Z+
    1934:	3d 93       	st	X+, r19
    1936:	f9 cf       	rjmp	.-14     	; 0x192a <twi_writeTo+0x30>
    1938:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <twi_slarw>
    193c:	30 91 7d 02 	lds	r19, 0x027D	; 0x80027d <twi_slarw>
    1940:	88 0f       	add	r24, r24
    1942:	83 2b       	or	r24, r19
    1944:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <twi_slarw>
    1948:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <twi_inRepStart>
    194c:	81 30       	cpi	r24, 0x01	; 1
    194e:	61 f4       	brne	.+24     	; 0x1968 <twi_writeTo+0x6e>
    1950:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <twi_inRepStart>
    1954:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <twi_slarw>
    1958:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    195c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1960:	83 fd       	sbrc	r24, 3
    1962:	f8 cf       	rjmp	.-16     	; 0x1954 <twi_writeTo+0x5a>
    1964:	85 ec       	ldi	r24, 0xC5	; 197
    1966:	01 c0       	rjmp	.+2      	; 0x196a <twi_writeTo+0x70>
    1968:	85 ee       	ldi	r24, 0xE5	; 229
    196a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    196e:	22 23       	and	r18, r18
    1970:	21 f0       	breq	.+8      	; 0x197a <twi_writeTo+0x80>
    1972:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <twi_state>
    1976:	82 30       	cpi	r24, 0x02	; 2
    1978:	d1 f3       	breq	.-12     	; 0x196e <twi_writeTo+0x74>
    197a:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <twi_error>
    197e:	8f 3f       	cpi	r24, 0xFF	; 255
    1980:	79 f0       	breq	.+30     	; 0x19a0 <twi_writeTo+0xa6>
    1982:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <twi_error>
    1986:	80 32       	cpi	r24, 0x20	; 32
    1988:	41 f0       	breq	.+16     	; 0x199a <twi_writeTo+0xa0>
    198a:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <twi_error>
    198e:	80 33       	cpi	r24, 0x30	; 48
    1990:	31 f0       	breq	.+12     	; 0x199e <twi_writeTo+0xa4>
    1992:	94 e0       	ldi	r25, 0x04	; 4
    1994:	05 c0       	rjmp	.+10     	; 0x19a0 <twi_writeTo+0xa6>
    1996:	91 e0       	ldi	r25, 0x01	; 1
    1998:	03 c0       	rjmp	.+6      	; 0x19a0 <twi_writeTo+0xa6>
    199a:	92 e0       	ldi	r25, 0x02	; 2
    199c:	01 c0       	rjmp	.+2      	; 0x19a0 <twi_writeTo+0xa6>
    199e:	93 e0       	ldi	r25, 0x03	; 3
    19a0:	89 2f       	mov	r24, r25
    19a2:	0f 91       	pop	r16
    19a4:	08 95       	ret

000019a6 <twi_transmit>:
    19a6:	40 91 33 02 	lds	r20, 0x0233	; 0x800233 <twi_txBufferLength>
    19aa:	26 2f       	mov	r18, r22
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	24 0f       	add	r18, r20
    19b0:	31 1d       	adc	r19, r1
    19b2:	21 32       	cpi	r18, 0x21	; 33
    19b4:	31 05       	cpc	r19, r1
    19b6:	dc f4       	brge	.+54     	; 0x19ee <twi_transmit+0x48>
    19b8:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <twi_state>
    19bc:	24 30       	cpi	r18, 0x04	; 4
    19be:	c9 f4       	brne	.+50     	; 0x19f2 <twi_transmit+0x4c>
    19c0:	fc 01       	movw	r30, r24
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	86 17       	cp	r24, r22
    19c8:	58 f4       	brcc	.+22     	; 0x19e0 <twi_transmit+0x3a>
    19ca:	30 91 33 02 	lds	r19, 0x0233	; 0x800233 <twi_txBufferLength>
    19ce:	21 91       	ld	r18, Z+
    19d0:	dc 01       	movw	r26, r24
    19d2:	ab 5c       	subi	r26, 0xCB	; 203
    19d4:	bd 4f       	sbci	r27, 0xFD	; 253
    19d6:	a3 0f       	add	r26, r19
    19d8:	b1 1d       	adc	r27, r1
    19da:	2c 93       	st	X, r18
    19dc:	01 96       	adiw	r24, 0x01	; 1
    19de:	f3 cf       	rjmp	.-26     	; 0x19c6 <twi_transmit+0x20>
    19e0:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <twi_txBufferLength>
    19e4:	68 0f       	add	r22, r24
    19e6:	60 93 33 02 	sts	0x0233, r22	; 0x800233 <twi_txBufferLength>
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	08 95       	ret
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	08 95       	ret
    19f2:	82 e0       	ldi	r24, 0x02	; 2
    19f4:	08 95       	ret

000019f6 <twi_attachSlaveRxEvent>:
    19f6:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <twi_onSlaveReceive+0x1>
    19fa:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <twi_onSlaveReceive>
    19fe:	08 95       	ret

00001a00 <twi_attachSlaveTxEvent>:
    1a00:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <twi_onSlaveTransmit+0x1>
    1a04:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <twi_onSlaveTransmit>
    1a08:	08 95       	ret

00001a0a <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1a0a:	85 ed       	ldi	r24, 0xD5	; 213
    1a0c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1a10:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1a14:	84 fd       	sbrc	r24, 4
    1a16:	fc cf       	rjmp	.-8      	; 0x1a10 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1a18:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <twi_state>
    1a1c:	08 95       	ret

00001a1e <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1a1e:	85 ec       	ldi	r24, 0xC5	; 197
    1a20:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    1a24:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <twi_state>
    1a28:	08 95       	ret

00001a2a <__vector_36>:
}

ISR(TWI_vect)
{
    1a2a:	1f 92       	push	r1
    1a2c:	0f 92       	push	r0
    1a2e:	0f b6       	in	r0, 0x3f	; 63
    1a30:	0f 92       	push	r0
    1a32:	11 24       	eor	r1, r1
    1a34:	2f 93       	push	r18
    1a36:	3f 93       	push	r19
    1a38:	4f 93       	push	r20
    1a3a:	5f 93       	push	r21
    1a3c:	6f 93       	push	r22
    1a3e:	7f 93       	push	r23
    1a40:	8f 93       	push	r24
    1a42:	9f 93       	push	r25
    1a44:	af 93       	push	r26
    1a46:	bf 93       	push	r27
    1a48:	ef 93       	push	r30
    1a4a:	ff 93       	push	r31
  switch(TW_STATUS){
    1a4c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1a50:	88 7f       	andi	r24, 0xF8	; 248
    1a52:	80 36       	cpi	r24, 0x60	; 96
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <__vector_36+0x2e>
    1a56:	9e c0       	rjmp	.+316    	; 0x1b94 <__vector_36+0x16a>
    1a58:	78 f5       	brcc	.+94     	; 0x1ab8 <__vector_36+0x8e>
    1a5a:	88 32       	cpi	r24, 0x28	; 40
    1a5c:	09 f4       	brne	.+2      	; 0x1a60 <__vector_36+0x36>
    1a5e:	5d c0       	rjmp	.+186    	; 0x1b1a <__vector_36+0xf0>
    1a60:	90 f4       	brcc	.+36     	; 0x1a86 <__vector_36+0x5c>
    1a62:	80 31       	cpi	r24, 0x10	; 16
    1a64:	09 f4       	brne	.+2      	; 0x1a68 <__vector_36+0x3e>
    1a66:	56 c0       	rjmp	.+172    	; 0x1b14 <__vector_36+0xea>
    1a68:	38 f4       	brcc	.+14     	; 0x1a78 <__vector_36+0x4e>
    1a6a:	88 23       	and	r24, r24
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <__vector_36+0x46>
    1a6e:	f5 c0       	rjmp	.+490    	; 0x1c5a <__vector_36+0x230>
    1a70:	88 30       	cpi	r24, 0x08	; 8
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <__vector_36+0x4c>
    1a74:	4f c0       	rjmp	.+158    	; 0x1b14 <__vector_36+0xea>
    1a76:	f5 c0       	rjmp	.+490    	; 0x1c62 <__vector_36+0x238>
    1a78:	88 31       	cpi	r24, 0x18	; 24
    1a7a:	09 f4       	brne	.+2      	; 0x1a7e <__vector_36+0x54>
    1a7c:	4e c0       	rjmp	.+156    	; 0x1b1a <__vector_36+0xf0>
    1a7e:	80 32       	cpi	r24, 0x20	; 32
    1a80:	09 f4       	brne	.+2      	; 0x1a84 <__vector_36+0x5a>
    1a82:	5f c0       	rjmp	.+190    	; 0x1b42 <__vector_36+0x118>
    1a84:	ee c0       	rjmp	.+476    	; 0x1c62 <__vector_36+0x238>
    1a86:	80 34       	cpi	r24, 0x40	; 64
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <__vector_36+0x62>
    1a8a:	6a c0       	rjmp	.+212    	; 0x1b60 <__vector_36+0x136>
    1a8c:	58 f4       	brcc	.+22     	; 0x1aa4 <__vector_36+0x7a>
    1a8e:	80 33       	cpi	r24, 0x30	; 48
    1a90:	09 f4       	brne	.+2      	; 0x1a94 <__vector_36+0x6a>
    1a92:	57 c0       	rjmp	.+174    	; 0x1b42 <__vector_36+0x118>
    1a94:	88 33       	cpi	r24, 0x38	; 56
    1a96:	09 f0       	breq	.+2      	; 0x1a9a <__vector_36+0x70>
    1a98:	e4 c0       	rjmp	.+456    	; 0x1c62 <__vector_36+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1a9a:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <twi_error>
      twi_releaseBus();
    1a9e:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <twi_releaseBus>
      break;
    1aa2:	df c0       	rjmp	.+446    	; 0x1c62 <__vector_36+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1aa4:	80 35       	cpi	r24, 0x50	; 80
    1aa6:	09 f4       	brne	.+2      	; 0x1aaa <__vector_36+0x80>
    1aa8:	4f c0       	rjmp	.+158    	; 0x1b48 <__vector_36+0x11e>
    1aaa:	88 35       	cpi	r24, 0x58	; 88
    1aac:	09 f4       	brne	.+2      	; 0x1ab0 <__vector_36+0x86>
    1aae:	5d c0       	rjmp	.+186    	; 0x1b6a <__vector_36+0x140>
    1ab0:	88 34       	cpi	r24, 0x48	; 72
    1ab2:	09 f0       	breq	.+2      	; 0x1ab6 <__vector_36+0x8c>
    1ab4:	d6 c0       	rjmp	.+428    	; 0x1c62 <__vector_36+0x238>
    1ab6:	d3 c0       	rjmp	.+422    	; 0x1c5e <__vector_36+0x234>
    1ab8:	88 39       	cpi	r24, 0x98	; 152
    1aba:	09 f4       	brne	.+2      	; 0x1abe <__vector_36+0x94>
    1abc:	c4 c0       	rjmp	.+392    	; 0x1c46 <__vector_36+0x21c>
    1abe:	a8 f4       	brcc	.+42     	; 0x1aea <__vector_36+0xc0>
    1ac0:	88 37       	cpi	r24, 0x78	; 120
    1ac2:	09 f4       	brne	.+2      	; 0x1ac6 <__vector_36+0x9c>
    1ac4:	67 c0       	rjmp	.+206    	; 0x1b94 <__vector_36+0x16a>
    1ac6:	38 f4       	brcc	.+14     	; 0x1ad6 <__vector_36+0xac>
    1ac8:	88 36       	cpi	r24, 0x68	; 104
    1aca:	09 f4       	brne	.+2      	; 0x1ace <__vector_36+0xa4>
    1acc:	63 c0       	rjmp	.+198    	; 0x1b94 <__vector_36+0x16a>
    1ace:	80 37       	cpi	r24, 0x70	; 112
    1ad0:	09 f4       	brne	.+2      	; 0x1ad4 <__vector_36+0xaa>
    1ad2:	60 c0       	rjmp	.+192    	; 0x1b94 <__vector_36+0x16a>
    1ad4:	c6 c0       	rjmp	.+396    	; 0x1c62 <__vector_36+0x238>
    1ad6:	88 38       	cpi	r24, 0x88	; 136
    1ad8:	09 f4       	brne	.+2      	; 0x1adc <__vector_36+0xb2>
    1ada:	b5 c0       	rjmp	.+362    	; 0x1c46 <__vector_36+0x21c>
    1adc:	80 39       	cpi	r24, 0x90	; 144
    1ade:	09 f4       	brne	.+2      	; 0x1ae2 <__vector_36+0xb8>
    1ae0:	5f c0       	rjmp	.+190    	; 0x1ba0 <__vector_36+0x176>
    1ae2:	80 38       	cpi	r24, 0x80	; 128
    1ae4:	09 f0       	breq	.+2      	; 0x1ae8 <__vector_36+0xbe>
    1ae6:	bd c0       	rjmp	.+378    	; 0x1c62 <__vector_36+0x238>
    1ae8:	5b c0       	rjmp	.+182    	; 0x1ba0 <__vector_36+0x176>
    1aea:	80 3b       	cpi	r24, 0xB0	; 176
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <__vector_36+0xc6>
    1aee:	83 c0       	rjmp	.+262    	; 0x1bf6 <__vector_36+0x1cc>
    1af0:	38 f4       	brcc	.+14     	; 0x1b00 <__vector_36+0xd6>
    1af2:	80 3a       	cpi	r24, 0xA0	; 160
    1af4:	09 f4       	brne	.+2      	; 0x1af8 <__vector_36+0xce>
    1af6:	66 c0       	rjmp	.+204    	; 0x1bc4 <__vector_36+0x19a>
    1af8:	88 3a       	cpi	r24, 0xA8	; 168
    1afa:	09 f4       	brne	.+2      	; 0x1afe <__vector_36+0xd4>
    1afc:	7c c0       	rjmp	.+248    	; 0x1bf6 <__vector_36+0x1cc>
    1afe:	b1 c0       	rjmp	.+354    	; 0x1c62 <__vector_36+0x238>
    1b00:	80 3c       	cpi	r24, 0xC0	; 192
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <__vector_36+0xdc>
    1b04:	a4 c0       	rjmp	.+328    	; 0x1c4e <__vector_36+0x224>
    1b06:	88 3c       	cpi	r24, 0xC8	; 200
    1b08:	09 f4       	brne	.+2      	; 0x1b0c <__vector_36+0xe2>
    1b0a:	a1 c0       	rjmp	.+322    	; 0x1c4e <__vector_36+0x224>
    1b0c:	88 3b       	cpi	r24, 0xB8	; 184
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <__vector_36+0xe8>
    1b10:	87 c0       	rjmp	.+270    	; 0x1c20 <__vector_36+0x1f6>
    1b12:	a7 c0       	rjmp	.+334    	; 0x1c62 <__vector_36+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1b14:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <twi_slarw>
    1b18:	10 c0       	rjmp	.+32     	; 0x1b3a <__vector_36+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1b1a:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <twi_masterBufferIndex>
    1b1e:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <twi_masterBufferLength>
    1b22:	98 17       	cp	r25, r24
    1b24:	70 f5       	brcc	.+92     	; 0x1b82 <__vector_36+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1b26:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <twi_masterBufferIndex>
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	8e 0f       	add	r24, r30
    1b2e:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <twi_masterBufferIndex>
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	e9 5a       	subi	r30, 0xA9	; 169
    1b36:	fd 4f       	sbci	r31, 0xFD	; 253
    1b38:	80 81       	ld	r24, Z
    1b3a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1b3e:	85 ec       	ldi	r24, 0xC5	; 197
    1b40:	83 c0       	rjmp	.+262    	; 0x1c48 <__vector_36+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1b42:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <twi_error>
    1b46:	8b c0       	rjmp	.+278    	; 0x1c5e <__vector_36+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1b48:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <twi_masterBufferIndex>
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	8e 0f       	add	r24, r30
    1b50:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <twi_masterBufferIndex>
    1b54:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	e9 5a       	subi	r30, 0xA9	; 169
    1b5c:	fd 4f       	sbci	r31, 0xFD	; 253
    1b5e:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1b60:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <twi_masterBufferIndex>
    1b64:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <twi_masterBufferLength>
    1b68:	6b c0       	rjmp	.+214    	; 0x1c40 <__vector_36+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1b6a:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <twi_masterBufferIndex>
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	8e 0f       	add	r24, r30
    1b72:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <twi_masterBufferIndex>
    1b76:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	e9 5a       	subi	r30, 0xA9	; 169
    1b7e:	fd 4f       	sbci	r31, 0xFD	; 253
    1b80:	80 83       	st	Z, r24
	if (twi_sendStop)
    1b82:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <twi_sendStop>
    1b86:	81 11       	cpse	r24, r1
    1b88:	6a c0       	rjmp	.+212    	; 0x1c5e <__vector_36+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1b90:	84 ea       	ldi	r24, 0xA4	; 164
    1b92:	5e c0       	rjmp	.+188    	; 0x1c50 <__vector_36+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1b94:	83 e0       	ldi	r24, 0x03	; 3
    1b96:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1b9a:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <twi_rxBufferIndex>
    1b9e:	cf cf       	rjmp	.-98     	; 0x1b3e <__vector_36+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1ba0:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <twi_rxBufferIndex>
    1ba4:	80 32       	cpi	r24, 0x20	; 32
    1ba6:	08 f0       	brcs	.+2      	; 0x1baa <__vector_36+0x180>
    1ba8:	4e c0       	rjmp	.+156    	; 0x1c46 <__vector_36+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1baa:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <twi_rxBufferIndex>
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	8e 0f       	add	r24, r30
    1bb2:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <twi_rxBufferIndex>
    1bb6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	ed 5e       	subi	r30, 0xED	; 237
    1bbe:	fd 4f       	sbci	r31, 0xFD	; 253
    1bc0:	80 83       	st	Z, r24
    1bc2:	bd cf       	rjmp	.-134    	; 0x1b3e <__vector_36+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1bc4:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1bc8:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <twi_rxBufferIndex>
    1bcc:	80 32       	cpi	r24, 0x20	; 32
    1bce:	30 f4       	brcc	.+12     	; 0x1bdc <__vector_36+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1bd0:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <twi_rxBufferIndex>
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	ed 5e       	subi	r30, 0xED	; 237
    1bd8:	fd 4f       	sbci	r31, 0xFD	; 253
    1bda:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1bdc:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <twi_rxBufferIndex>
    1be0:	70 e0       	ldi	r23, 0x00	; 0
    1be2:	e0 91 77 02 	lds	r30, 0x0277	; 0x800277 <twi_onSlaveReceive>
    1be6:	f0 91 78 02 	lds	r31, 0x0278	; 0x800278 <twi_onSlaveReceive+0x1>
    1bea:	83 e1       	ldi	r24, 0x13	; 19
    1bec:	92 e0       	ldi	r25, 0x02	; 2
    1bee:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1bf0:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <twi_rxBufferIndex>
      break;
    1bf4:	36 c0       	rjmp	.+108    	; 0x1c62 <__vector_36+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1bf6:	84 e0       	ldi	r24, 0x04	; 4
    1bf8:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1bfc:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1c00:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1c04:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <twi_onSlaveTransmit>
    1c08:	f0 91 7a 02 	lds	r31, 0x027A	; 0x80027a <twi_onSlaveTransmit+0x1>
    1c0c:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1c0e:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <twi_txBufferLength>
    1c12:	81 11       	cpse	r24, r1
    1c14:	05 c0       	rjmp	.+10     	; 0x1c20 <__vector_36+0x1f6>
        twi_txBufferLength = 1;
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1c1c:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1c20:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <twi_txBufferIndex>
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	8e 0f       	add	r24, r30
    1c28:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <twi_txBufferIndex>
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	eb 5c       	subi	r30, 0xCB	; 203
    1c30:	fd 4f       	sbci	r31, 0xFD	; 253
    1c32:	80 81       	ld	r24, Z
    1c34:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1c38:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <twi_txBufferIndex>
    1c3c:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <twi_txBufferLength>
    1c40:	98 17       	cp	r25, r24
    1c42:	08 f4       	brcc	.+2      	; 0x1c46 <__vector_36+0x21c>
    1c44:	7c cf       	rjmp	.-264    	; 0x1b3e <__vector_36+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1c46:	85 e8       	ldi	r24, 0x85	; 133
    1c48:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1c4c:	0a c0       	rjmp	.+20     	; 0x1c62 <__vector_36+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1c4e:	85 ec       	ldi	r24, 0xC5	; 197
    1c50:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1c54:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <twi_state>
      break;
    1c58:	04 c0       	rjmp	.+8      	; 0x1c62 <__vector_36+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1c5a:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <twi_error>
      twi_stop();
    1c5e:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <twi_stop>
      break;
  }
}
    1c62:	ff 91       	pop	r31
    1c64:	ef 91       	pop	r30
    1c66:	bf 91       	pop	r27
    1c68:	af 91       	pop	r26
    1c6a:	9f 91       	pop	r25
    1c6c:	8f 91       	pop	r24
    1c6e:	7f 91       	pop	r23
    1c70:	6f 91       	pop	r22
    1c72:	5f 91       	pop	r21
    1c74:	4f 91       	pop	r20
    1c76:	3f 91       	pop	r19
    1c78:	2f 91       	pop	r18
    1c7a:	0f 90       	pop	r0
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	0f 90       	pop	r0
    1c80:	1f 90       	pop	r1
    1c82:	18 95       	reti

00001c84 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1c84:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <_ZN7TwoWire14rxBufferLengthE>
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	20 91 b4 02 	lds	r18, 0x02B4	; 0x8002b4 <_ZN7TwoWire13rxBufferIndexE>
    1c8e:	82 1b       	sub	r24, r18
    1c90:	91 09       	sbc	r25, r1
    1c92:	08 95       	ret

00001c94 <_ZN7TwoWire4readEv>:
    1c94:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <_ZN7TwoWire13rxBufferIndexE>
    1c98:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <_ZN7TwoWire14rxBufferLengthE>
    1c9c:	98 17       	cp	r25, r24
    1c9e:	50 f4       	brcc	.+20     	; 0x1cb4 <_ZN7TwoWire4readEv+0x20>
    1ca0:	e9 2f       	mov	r30, r25
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	eb 54       	subi	r30, 0x4B	; 75
    1ca6:	fd 4f       	sbci	r31, 0xFD	; 253
    1ca8:	20 81       	ld	r18, Z
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	9f 5f       	subi	r25, 0xFF	; 255
    1cae:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <_ZN7TwoWire13rxBufferIndexE>
    1cb2:	02 c0       	rjmp	.+4      	; 0x1cb8 <_ZN7TwoWire4readEv+0x24>
    1cb4:	2f ef       	ldi	r18, 0xFF	; 255
    1cb6:	3f ef       	ldi	r19, 0xFF	; 255
    1cb8:	c9 01       	movw	r24, r18
    1cba:	08 95       	ret

00001cbc <_ZN7TwoWire4peekEv>:
    1cbc:	e0 91 b4 02 	lds	r30, 0x02B4	; 0x8002b4 <_ZN7TwoWire13rxBufferIndexE>
    1cc0:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <_ZN7TwoWire14rxBufferLengthE>
    1cc4:	e8 17       	cp	r30, r24
    1cc6:	30 f4       	brcc	.+12     	; 0x1cd4 <_ZN7TwoWire4peekEv+0x18>
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	eb 54       	subi	r30, 0x4B	; 75
    1ccc:	fd 4f       	sbci	r31, 0xFD	; 253
    1cce:	80 81       	ld	r24, Z
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	08 95       	ret
    1cd4:	8f ef       	ldi	r24, 0xFF	; 255
    1cd6:	9f ef       	ldi	r25, 0xFF	; 255
    1cd8:	08 95       	ret

00001cda <_ZN7TwoWire5flushEv>:
    1cda:	08 95       	ret

00001cdc <_ZN7TwoWire16onReceiveServiceEPhi>:
    1cdc:	cf 93       	push	r28
    1cde:	df 93       	push	r29
    1ce0:	ec 01       	movw	r28, r24
    1ce2:	e0 91 8b 02 	lds	r30, 0x028B	; 0x80028b <_ZN7TwoWire14user_onReceiveE>
    1ce6:	f0 91 8c 02 	lds	r31, 0x028C	; 0x80028c <_ZN7TwoWire14user_onReceiveE+0x1>
    1cea:	30 97       	sbiw	r30, 0x00	; 0
    1cec:	f1 f0       	breq	.+60     	; 0x1d2a <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1cee:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <_ZN7TwoWire13rxBufferIndexE>
    1cf2:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <_ZN7TwoWire14rxBufferLengthE>
    1cf6:	98 17       	cp	r25, r24
    1cf8:	c0 f0       	brcs	.+48     	; 0x1d2a <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	29 2f       	mov	r18, r25
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	26 17       	cp	r18, r22
    1d02:	37 07       	cpc	r19, r23
    1d04:	54 f4       	brge	.+20     	; 0x1d1a <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1d06:	de 01       	movw	r26, r28
    1d08:	a2 0f       	add	r26, r18
    1d0a:	b3 1f       	adc	r27, r19
    1d0c:	4c 91       	ld	r20, X
    1d0e:	d9 01       	movw	r26, r18
    1d10:	ab 54       	subi	r26, 0x4B	; 75
    1d12:	bd 4f       	sbci	r27, 0xFD	; 253
    1d14:	4c 93       	st	X, r20
    1d16:	9f 5f       	subi	r25, 0xFF	; 255
    1d18:	f1 cf       	rjmp	.-30     	; 0x1cfc <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1d1a:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <_ZN7TwoWire13rxBufferIndexE>
    1d1e:	60 93 b3 02 	sts	0x02B3, r22	; 0x8002b3 <_ZN7TwoWire14rxBufferLengthE>
    1d22:	cb 01       	movw	r24, r22
    1d24:	df 91       	pop	r29
    1d26:	cf 91       	pop	r28
    1d28:	09 94       	ijmp
    1d2a:	df 91       	pop	r29
    1d2c:	cf 91       	pop	r28
    1d2e:	08 95       	ret

00001d30 <_ZN7TwoWire16onRequestServiceEv>:
    1d30:	e0 91 8d 02 	lds	r30, 0x028D	; 0x80028d <_ZN7TwoWire14user_onRequestE>
    1d34:	f0 91 8e 02 	lds	r31, 0x028E	; 0x80028e <_ZN7TwoWire14user_onRequestE+0x1>
    1d38:	30 97       	sbiw	r30, 0x00	; 0
    1d3a:	29 f0       	breq	.+10     	; 0x1d46 <_ZN7TwoWire16onRequestServiceEv+0x16>
    1d3c:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <_ZN7TwoWire13txBufferIndexE>
    1d40:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <_ZN7TwoWire14txBufferLengthE>
    1d44:	09 94       	ijmp
    1d46:	08 95       	ret

00001d48 <_ZN7TwoWire5writeEPKhj>:
    1d48:	cf 92       	push	r12
    1d4a:	df 92       	push	r13
    1d4c:	ef 92       	push	r14
    1d4e:	ff 92       	push	r15
    1d50:	0f 93       	push	r16
    1d52:	1f 93       	push	r17
    1d54:	cf 93       	push	r28
    1d56:	df 93       	push	r29
    1d58:	7c 01       	movw	r14, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	8a 01       	movw	r16, r20
    1d5e:	20 91 8f 02 	lds	r18, 0x028F	; 0x80028f <_ZN7TwoWire12transmittingE>
    1d62:	22 23       	and	r18, r18
    1d64:	89 f0       	breq	.+34     	; 0x1d88 <_ZN7TwoWire5writeEPKhj+0x40>
    1d66:	eb 01       	movw	r28, r22
    1d68:	6b 01       	movw	r12, r22
    1d6a:	c4 0e       	add	r12, r20
    1d6c:	d5 1e       	adc	r13, r21
    1d6e:	cc 15       	cp	r28, r12
    1d70:	dd 05       	cpc	r29, r13
    1d72:	69 f0       	breq	.+26     	; 0x1d8e <_ZN7TwoWire5writeEPKhj+0x46>
    1d74:	69 91       	ld	r22, Y+
    1d76:	d7 01       	movw	r26, r14
    1d78:	ed 91       	ld	r30, X+
    1d7a:	fc 91       	ld	r31, X
    1d7c:	01 90       	ld	r0, Z+
    1d7e:	f0 81       	ld	r31, Z
    1d80:	e0 2d       	mov	r30, r0
    1d82:	c7 01       	movw	r24, r14
    1d84:	09 95       	icall
    1d86:	f3 cf       	rjmp	.-26     	; 0x1d6e <_ZN7TwoWire5writeEPKhj+0x26>
    1d88:	64 2f       	mov	r22, r20
    1d8a:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <twi_transmit>
    1d8e:	c8 01       	movw	r24, r16
    1d90:	df 91       	pop	r29
    1d92:	cf 91       	pop	r28
    1d94:	1f 91       	pop	r17
    1d96:	0f 91       	pop	r16
    1d98:	ff 90       	pop	r15
    1d9a:	ef 90       	pop	r14
    1d9c:	df 90       	pop	r13
    1d9e:	cf 90       	pop	r12
    1da0:	08 95       	ret

00001da2 <_ZN7TwoWire5writeEh>:
    1da2:	cf 93       	push	r28
    1da4:	df 93       	push	r29
    1da6:	1f 92       	push	r1
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
    1dac:	69 83       	std	Y+1, r22	; 0x01
    1dae:	20 91 8f 02 	lds	r18, 0x028F	; 0x80028f <_ZN7TwoWire12transmittingE>
    1db2:	22 23       	and	r18, r18
    1db4:	d1 f0       	breq	.+52     	; 0x1dea <_ZN7TwoWire5writeEh+0x48>
    1db6:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <_ZN7TwoWire14txBufferLengthE>
    1dba:	20 32       	cpi	r18, 0x20	; 32
    1dbc:	40 f0       	brcs	.+16     	; 0x1dce <_ZN7TwoWire5writeEh+0x2c>
    1dbe:	21 e0       	ldi	r18, 0x01	; 1
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	33 83       	std	Z+3, r19	; 0x03
    1dc6:	22 83       	std	Z+2, r18	; 0x02
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	15 c0       	rjmp	.+42     	; 0x1df8 <_ZN7TwoWire5writeEh+0x56>
    1dce:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <_ZN7TwoWire13txBufferIndexE>
    1dd2:	e8 2f       	mov	r30, r24
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	ee 56       	subi	r30, 0x6E	; 110
    1dd8:	fd 4f       	sbci	r31, 0xFD	; 253
    1dda:	99 81       	ldd	r25, Y+1	; 0x01
    1ddc:	90 83       	st	Z, r25
    1dde:	8f 5f       	subi	r24, 0xFF	; 255
    1de0:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <_ZN7TwoWire13txBufferIndexE>
    1de4:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <_ZN7TwoWire14txBufferLengthE>
    1de8:	05 c0       	rjmp	.+10     	; 0x1df4 <_ZN7TwoWire5writeEh+0x52>
    1dea:	61 e0       	ldi	r22, 0x01	; 1
    1dec:	ce 01       	movw	r24, r28
    1dee:	01 96       	adiw	r24, 0x01	; 1
    1df0:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <twi_transmit>
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	0f 90       	pop	r0
    1dfa:	df 91       	pop	r29
    1dfc:	cf 91       	pop	r28
    1dfe:	08 95       	ret

00001e00 <_ZN7TwoWireC1Ev>:
    1e00:	fc 01       	movw	r30, r24
    1e02:	13 82       	std	Z+3, r1	; 0x03
    1e04:	12 82       	std	Z+2, r1	; 0x02
    1e06:	88 ee       	ldi	r24, 0xE8	; 232
    1e08:	93 e0       	ldi	r25, 0x03	; 3
    1e0a:	a0 e0       	ldi	r26, 0x00	; 0
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	84 83       	std	Z+4, r24	; 0x04
    1e10:	95 83       	std	Z+5, r25	; 0x05
    1e12:	a6 83       	std	Z+6, r26	; 0x06
    1e14:	b7 83       	std	Z+7, r27	; 0x07
    1e16:	8b e5       	ldi	r24, 0x5B	; 91
    1e18:	91 e0       	ldi	r25, 0x01	; 1
    1e1a:	91 83       	std	Z+1, r25	; 0x01
    1e1c:	80 83       	st	Z, r24
    1e1e:	08 95       	ret

00001e20 <_ZN7TwoWire5beginEv>:
    1e20:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <_ZN7TwoWire13rxBufferIndexE>
    1e24:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <_ZN7TwoWire14rxBufferLengthE>
    1e28:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <_ZN7TwoWire13txBufferIndexE>
    1e2c:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <_ZN7TwoWire14txBufferLengthE>
    1e30:	0e 94 17 0c 	call	0x182e	; 0x182e <twi_init>
    1e34:	88 e9       	ldi	r24, 0x98	; 152
    1e36:	9e e0       	ldi	r25, 0x0E	; 14
    1e38:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <twi_attachSlaveTxEvent>
    1e3c:	8e e6       	ldi	r24, 0x6E	; 110
    1e3e:	9e e0       	ldi	r25, 0x0E	; 14
    1e40:	0c 94 fb 0c 	jmp	0x19f6	; 0x19f6 <twi_attachSlaveRxEvent>

00001e44 <_ZN7TwoWire17beginTransmissionEh>:
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <_ZN7TwoWire12transmittingE>
    1e4a:	60 93 b2 02 	sts	0x02B2, r22	; 0x8002b2 <_ZN7TwoWire9txAddressE>
    1e4e:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <_ZN7TwoWire13txBufferIndexE>
    1e52:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <_ZN7TwoWire14txBufferLengthE>
    1e56:	08 95       	ret

00001e58 <_ZN7TwoWire15endTransmissionEh>:
    1e58:	0f 93       	push	r16
    1e5a:	06 2f       	mov	r16, r22
    1e5c:	21 e0       	ldi	r18, 0x01	; 1
    1e5e:	40 91 90 02 	lds	r20, 0x0290	; 0x800290 <_ZN7TwoWire14txBufferLengthE>
    1e62:	62 e9       	ldi	r22, 0x92	; 146
    1e64:	72 e0       	ldi	r23, 0x02	; 2
    1e66:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <_ZN7TwoWire9txAddressE>
    1e6a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <twi_writeTo>
    1e6e:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <_ZN7TwoWire13txBufferIndexE>
    1e72:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <_ZN7TwoWire14txBufferLengthE>
    1e76:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <_ZN7TwoWire12transmittingE>
    1e7a:	0f 91       	pop	r16
    1e7c:	08 95       	ret

00001e7e <_ZN7TwoWire11requestFromEhhmhh>:
    1e7e:	4f 92       	push	r4
    1e80:	5f 92       	push	r5
    1e82:	6f 92       	push	r6
    1e84:	7f 92       	push	r7
    1e86:	af 92       	push	r10
    1e88:	bf 92       	push	r11
    1e8a:	cf 92       	push	r12
    1e8c:	ef 92       	push	r14
    1e8e:	ff 92       	push	r15
    1e90:	0f 93       	push	r16
    1e92:	1f 93       	push	r17
    1e94:	cf 93       	push	r28
    1e96:	df 93       	push	r29
    1e98:	5c 01       	movw	r10, r24
    1e9a:	f6 2e       	mov	r15, r22
    1e9c:	d4 2f       	mov	r29, r20
    1e9e:	28 01       	movw	r4, r16
    1ea0:	39 01       	movw	r6, r18
    1ea2:	ee 20       	and	r14, r14
    1ea4:	21 f1       	breq	.+72     	; 0x1eee <_ZN7TwoWire11requestFromEhhmhh+0x70>
    1ea6:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_ZN7TwoWire17beginTransmissionEh>
    1eaa:	ce 2d       	mov	r28, r14
    1eac:	c4 30       	cpi	r28, 0x04	; 4
    1eae:	08 f0       	brcs	.+2      	; 0x1eb2 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1eb0:	c3 e0       	ldi	r28, 0x03	; 3
    1eb2:	c1 50       	subi	r28, 0x01	; 1
    1eb4:	c0 f0       	brcs	.+48     	; 0x1ee6 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    1eb6:	28 e0       	ldi	r18, 0x08	; 8
    1eb8:	c2 9f       	mul	r28, r18
    1eba:	c0 01       	movw	r24, r0
    1ebc:	11 24       	eor	r1, r1
    1ebe:	a3 01       	movw	r20, r6
    1ec0:	92 01       	movw	r18, r4
    1ec2:	04 c0       	rjmp	.+8      	; 0x1ecc <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    1ec4:	56 95       	lsr	r21
    1ec6:	47 95       	ror	r20
    1ec8:	37 95       	ror	r19
    1eca:	27 95       	ror	r18
    1ecc:	8a 95       	dec	r24
    1ece:	d2 f7       	brpl	.-12     	; 0x1ec4 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    1ed0:	ca 01       	movw	r24, r20
    1ed2:	b9 01       	movw	r22, r18
    1ed4:	d5 01       	movw	r26, r10
    1ed6:	ed 91       	ld	r30, X+
    1ed8:	fc 91       	ld	r31, X
    1eda:	01 90       	ld	r0, Z+
    1edc:	f0 81       	ld	r31, Z
    1ede:	e0 2d       	mov	r30, r0
    1ee0:	c5 01       	movw	r24, r10
    1ee2:	09 95       	icall
    1ee4:	e6 cf       	rjmp	.-52     	; 0x1eb2 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1ee6:	60 e0       	ldi	r22, 0x00	; 0
    1ee8:	c5 01       	movw	r24, r10
    1eea:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZN7TwoWire15endTransmissionEh>
    1eee:	4d 2f       	mov	r20, r29
    1ef0:	d1 32       	cpi	r29, 0x21	; 33
    1ef2:	08 f0       	brcs	.+2      	; 0x1ef6 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    1ef4:	40 e2       	ldi	r20, 0x20	; 32
    1ef6:	2c 2d       	mov	r18, r12
    1ef8:	65 eb       	ldi	r22, 0xB5	; 181
    1efa:	72 e0       	ldi	r23, 0x02	; 2
    1efc:	8f 2d       	mov	r24, r15
    1efe:	0e 94 35 0c 	call	0x186a	; 0x186a <twi_readFrom>
    1f02:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <_ZN7TwoWire13rxBufferIndexE>
    1f06:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <_ZN7TwoWire14rxBufferLengthE>
    1f0a:	df 91       	pop	r29
    1f0c:	cf 91       	pop	r28
    1f0e:	1f 91       	pop	r17
    1f10:	0f 91       	pop	r16
    1f12:	ff 90       	pop	r15
    1f14:	ef 90       	pop	r14
    1f16:	cf 90       	pop	r12
    1f18:	bf 90       	pop	r11
    1f1a:	af 90       	pop	r10
    1f1c:	7f 90       	pop	r7
    1f1e:	6f 90       	pop	r6
    1f20:	5f 90       	pop	r5
    1f22:	4f 90       	pop	r4
    1f24:	08 95       	ret

00001f26 <_ZN7TwoWire11requestFromEhhh>:
    1f26:	cf 92       	push	r12
    1f28:	ef 92       	push	r14
    1f2a:	0f 93       	push	r16
    1f2c:	1f 93       	push	r17
    1f2e:	c2 2e       	mov	r12, r18
    1f30:	e1 2c       	mov	r14, r1
    1f32:	00 e0       	ldi	r16, 0x00	; 0
    1f34:	10 e0       	ldi	r17, 0x00	; 0
    1f36:	98 01       	movw	r18, r16
    1f38:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <_ZN7TwoWire11requestFromEhhmhh>
    1f3c:	1f 91       	pop	r17
    1f3e:	0f 91       	pop	r16
    1f40:	ef 90       	pop	r14
    1f42:	cf 90       	pop	r12
    1f44:	08 95       	ret

00001f46 <_ZN7TwoWire11requestFromEii>:
    1f46:	21 e0       	ldi	r18, 0x01	; 1
    1f48:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <_ZN7TwoWire11requestFromEhhh>

00001f4c <_ZN7TwoWire15endTransmissionEv>:
    1f4c:	61 e0       	ldi	r22, 0x01	; 1
    1f4e:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <_ZN7TwoWire15endTransmissionEh>

00001f52 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1f52:	8f e7       	ldi	r24, 0x7F	; 127
    1f54:	92 e0       	ldi	r25, 0x02	; 2
    1f56:	0c 94 00 0f 	jmp	0x1e00	; 0x1e00 <_ZN7TwoWireC1Ev>

00001f5a <__subsf3>:
    1f5a:	50 58       	subi	r21, 0x80	; 128

00001f5c <__addsf3>:
    1f5c:	bb 27       	eor	r27, r27
    1f5e:	aa 27       	eor	r26, r26
    1f60:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__addsf3x>
    1f64:	0c 94 3f 11 	jmp	0x227e	; 0x227e <__fp_round>
    1f68:	0e 94 31 11 	call	0x2262	; 0x2262 <__fp_pscA>
    1f6c:	38 f0       	brcs	.+14     	; 0x1f7c <__addsf3+0x20>
    1f6e:	0e 94 38 11 	call	0x2270	; 0x2270 <__fp_pscB>
    1f72:	20 f0       	brcs	.+8      	; 0x1f7c <__addsf3+0x20>
    1f74:	39 f4       	brne	.+14     	; 0x1f84 <__addsf3+0x28>
    1f76:	9f 3f       	cpi	r25, 0xFF	; 255
    1f78:	19 f4       	brne	.+6      	; 0x1f80 <__addsf3+0x24>
    1f7a:	26 f4       	brtc	.+8      	; 0x1f84 <__addsf3+0x28>
    1f7c:	0c 94 2e 11 	jmp	0x225c	; 0x225c <__fp_nan>
    1f80:	0e f4       	brtc	.+2      	; 0x1f84 <__addsf3+0x28>
    1f82:	e0 95       	com	r30
    1f84:	e7 fb       	bst	r30, 7
    1f86:	0c 94 28 11 	jmp	0x2250	; 0x2250 <__fp_inf>

00001f8a <__addsf3x>:
    1f8a:	e9 2f       	mov	r30, r25
    1f8c:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__fp_split3>
    1f90:	58 f3       	brcs	.-42     	; 0x1f68 <__addsf3+0xc>
    1f92:	ba 17       	cp	r27, r26
    1f94:	62 07       	cpc	r22, r18
    1f96:	73 07       	cpc	r23, r19
    1f98:	84 07       	cpc	r24, r20
    1f9a:	95 07       	cpc	r25, r21
    1f9c:	20 f0       	brcs	.+8      	; 0x1fa6 <__addsf3x+0x1c>
    1f9e:	79 f4       	brne	.+30     	; 0x1fbe <__addsf3x+0x34>
    1fa0:	a6 f5       	brtc	.+104    	; 0x200a <__addsf3x+0x80>
    1fa2:	0c 94 72 11 	jmp	0x22e4	; 0x22e4 <__fp_zero>
    1fa6:	0e f4       	brtc	.+2      	; 0x1faa <__addsf3x+0x20>
    1fa8:	e0 95       	com	r30
    1faa:	0b 2e       	mov	r0, r27
    1fac:	ba 2f       	mov	r27, r26
    1fae:	a0 2d       	mov	r26, r0
    1fb0:	0b 01       	movw	r0, r22
    1fb2:	b9 01       	movw	r22, r18
    1fb4:	90 01       	movw	r18, r0
    1fb6:	0c 01       	movw	r0, r24
    1fb8:	ca 01       	movw	r24, r20
    1fba:	a0 01       	movw	r20, r0
    1fbc:	11 24       	eor	r1, r1
    1fbe:	ff 27       	eor	r31, r31
    1fc0:	59 1b       	sub	r21, r25
    1fc2:	99 f0       	breq	.+38     	; 0x1fea <__addsf3x+0x60>
    1fc4:	59 3f       	cpi	r21, 0xF9	; 249
    1fc6:	50 f4       	brcc	.+20     	; 0x1fdc <__addsf3x+0x52>
    1fc8:	50 3e       	cpi	r21, 0xE0	; 224
    1fca:	68 f1       	brcs	.+90     	; 0x2026 <__addsf3x+0x9c>
    1fcc:	1a 16       	cp	r1, r26
    1fce:	f0 40       	sbci	r31, 0x00	; 0
    1fd0:	a2 2f       	mov	r26, r18
    1fd2:	23 2f       	mov	r18, r19
    1fd4:	34 2f       	mov	r19, r20
    1fd6:	44 27       	eor	r20, r20
    1fd8:	58 5f       	subi	r21, 0xF8	; 248
    1fda:	f3 cf       	rjmp	.-26     	; 0x1fc2 <__addsf3x+0x38>
    1fdc:	46 95       	lsr	r20
    1fde:	37 95       	ror	r19
    1fe0:	27 95       	ror	r18
    1fe2:	a7 95       	ror	r26
    1fe4:	f0 40       	sbci	r31, 0x00	; 0
    1fe6:	53 95       	inc	r21
    1fe8:	c9 f7       	brne	.-14     	; 0x1fdc <__addsf3x+0x52>
    1fea:	7e f4       	brtc	.+30     	; 0x200a <__addsf3x+0x80>
    1fec:	1f 16       	cp	r1, r31
    1fee:	ba 0b       	sbc	r27, r26
    1ff0:	62 0b       	sbc	r22, r18
    1ff2:	73 0b       	sbc	r23, r19
    1ff4:	84 0b       	sbc	r24, r20
    1ff6:	ba f0       	brmi	.+46     	; 0x2026 <__addsf3x+0x9c>
    1ff8:	91 50       	subi	r25, 0x01	; 1
    1ffa:	a1 f0       	breq	.+40     	; 0x2024 <__addsf3x+0x9a>
    1ffc:	ff 0f       	add	r31, r31
    1ffe:	bb 1f       	adc	r27, r27
    2000:	66 1f       	adc	r22, r22
    2002:	77 1f       	adc	r23, r23
    2004:	88 1f       	adc	r24, r24
    2006:	c2 f7       	brpl	.-16     	; 0x1ff8 <__addsf3x+0x6e>
    2008:	0e c0       	rjmp	.+28     	; 0x2026 <__addsf3x+0x9c>
    200a:	ba 0f       	add	r27, r26
    200c:	62 1f       	adc	r22, r18
    200e:	73 1f       	adc	r23, r19
    2010:	84 1f       	adc	r24, r20
    2012:	48 f4       	brcc	.+18     	; 0x2026 <__addsf3x+0x9c>
    2014:	87 95       	ror	r24
    2016:	77 95       	ror	r23
    2018:	67 95       	ror	r22
    201a:	b7 95       	ror	r27
    201c:	f7 95       	ror	r31
    201e:	9e 3f       	cpi	r25, 0xFE	; 254
    2020:	08 f0       	brcs	.+2      	; 0x2024 <__addsf3x+0x9a>
    2022:	b0 cf       	rjmp	.-160    	; 0x1f84 <__addsf3+0x28>
    2024:	93 95       	inc	r25
    2026:	88 0f       	add	r24, r24
    2028:	08 f0       	brcs	.+2      	; 0x202c <__addsf3x+0xa2>
    202a:	99 27       	eor	r25, r25
    202c:	ee 0f       	add	r30, r30
    202e:	97 95       	ror	r25
    2030:	87 95       	ror	r24
    2032:	08 95       	ret

00002034 <__cmpsf2>:
    2034:	0e 94 04 11 	call	0x2208	; 0x2208 <__fp_cmp>
    2038:	08 f4       	brcc	.+2      	; 0x203c <__cmpsf2+0x8>
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	08 95       	ret

0000203e <__divsf3>:
    203e:	0e 94 33 10 	call	0x2066	; 0x2066 <__divsf3x>
    2042:	0c 94 3f 11 	jmp	0x227e	; 0x227e <__fp_round>
    2046:	0e 94 38 11 	call	0x2270	; 0x2270 <__fp_pscB>
    204a:	58 f0       	brcs	.+22     	; 0x2062 <__divsf3+0x24>
    204c:	0e 94 31 11 	call	0x2262	; 0x2262 <__fp_pscA>
    2050:	40 f0       	brcs	.+16     	; 0x2062 <__divsf3+0x24>
    2052:	29 f4       	brne	.+10     	; 0x205e <__divsf3+0x20>
    2054:	5f 3f       	cpi	r21, 0xFF	; 255
    2056:	29 f0       	breq	.+10     	; 0x2062 <__divsf3+0x24>
    2058:	0c 94 28 11 	jmp	0x2250	; 0x2250 <__fp_inf>
    205c:	51 11       	cpse	r21, r1
    205e:	0c 94 73 11 	jmp	0x22e6	; 0x22e6 <__fp_szero>
    2062:	0c 94 2e 11 	jmp	0x225c	; 0x225c <__fp_nan>

00002066 <__divsf3x>:
    2066:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__fp_split3>
    206a:	68 f3       	brcs	.-38     	; 0x2046 <__divsf3+0x8>

0000206c <__divsf3_pse>:
    206c:	99 23       	and	r25, r25
    206e:	b1 f3       	breq	.-20     	; 0x205c <__divsf3+0x1e>
    2070:	55 23       	and	r21, r21
    2072:	91 f3       	breq	.-28     	; 0x2058 <__divsf3+0x1a>
    2074:	95 1b       	sub	r25, r21
    2076:	55 0b       	sbc	r21, r21
    2078:	bb 27       	eor	r27, r27
    207a:	aa 27       	eor	r26, r26
    207c:	62 17       	cp	r22, r18
    207e:	73 07       	cpc	r23, r19
    2080:	84 07       	cpc	r24, r20
    2082:	38 f0       	brcs	.+14     	; 0x2092 <__divsf3_pse+0x26>
    2084:	9f 5f       	subi	r25, 0xFF	; 255
    2086:	5f 4f       	sbci	r21, 0xFF	; 255
    2088:	22 0f       	add	r18, r18
    208a:	33 1f       	adc	r19, r19
    208c:	44 1f       	adc	r20, r20
    208e:	aa 1f       	adc	r26, r26
    2090:	a9 f3       	breq	.-22     	; 0x207c <__divsf3_pse+0x10>
    2092:	35 d0       	rcall	.+106    	; 0x20fe <__divsf3_pse+0x92>
    2094:	0e 2e       	mov	r0, r30
    2096:	3a f0       	brmi	.+14     	; 0x20a6 <__divsf3_pse+0x3a>
    2098:	e0 e8       	ldi	r30, 0x80	; 128
    209a:	32 d0       	rcall	.+100    	; 0x2100 <__divsf3_pse+0x94>
    209c:	91 50       	subi	r25, 0x01	; 1
    209e:	50 40       	sbci	r21, 0x00	; 0
    20a0:	e6 95       	lsr	r30
    20a2:	00 1c       	adc	r0, r0
    20a4:	ca f7       	brpl	.-14     	; 0x2098 <__divsf3_pse+0x2c>
    20a6:	2b d0       	rcall	.+86     	; 0x20fe <__divsf3_pse+0x92>
    20a8:	fe 2f       	mov	r31, r30
    20aa:	29 d0       	rcall	.+82     	; 0x20fe <__divsf3_pse+0x92>
    20ac:	66 0f       	add	r22, r22
    20ae:	77 1f       	adc	r23, r23
    20b0:	88 1f       	adc	r24, r24
    20b2:	bb 1f       	adc	r27, r27
    20b4:	26 17       	cp	r18, r22
    20b6:	37 07       	cpc	r19, r23
    20b8:	48 07       	cpc	r20, r24
    20ba:	ab 07       	cpc	r26, r27
    20bc:	b0 e8       	ldi	r27, 0x80	; 128
    20be:	09 f0       	breq	.+2      	; 0x20c2 <__divsf3_pse+0x56>
    20c0:	bb 0b       	sbc	r27, r27
    20c2:	80 2d       	mov	r24, r0
    20c4:	bf 01       	movw	r22, r30
    20c6:	ff 27       	eor	r31, r31
    20c8:	93 58       	subi	r25, 0x83	; 131
    20ca:	5f 4f       	sbci	r21, 0xFF	; 255
    20cc:	3a f0       	brmi	.+14     	; 0x20dc <__divsf3_pse+0x70>
    20ce:	9e 3f       	cpi	r25, 0xFE	; 254
    20d0:	51 05       	cpc	r21, r1
    20d2:	78 f0       	brcs	.+30     	; 0x20f2 <__divsf3_pse+0x86>
    20d4:	0c 94 28 11 	jmp	0x2250	; 0x2250 <__fp_inf>
    20d8:	0c 94 73 11 	jmp	0x22e6	; 0x22e6 <__fp_szero>
    20dc:	5f 3f       	cpi	r21, 0xFF	; 255
    20de:	e4 f3       	brlt	.-8      	; 0x20d8 <__divsf3_pse+0x6c>
    20e0:	98 3e       	cpi	r25, 0xE8	; 232
    20e2:	d4 f3       	brlt	.-12     	; 0x20d8 <__divsf3_pse+0x6c>
    20e4:	86 95       	lsr	r24
    20e6:	77 95       	ror	r23
    20e8:	67 95       	ror	r22
    20ea:	b7 95       	ror	r27
    20ec:	f7 95       	ror	r31
    20ee:	9f 5f       	subi	r25, 0xFF	; 255
    20f0:	c9 f7       	brne	.-14     	; 0x20e4 <__divsf3_pse+0x78>
    20f2:	88 0f       	add	r24, r24
    20f4:	91 1d       	adc	r25, r1
    20f6:	96 95       	lsr	r25
    20f8:	87 95       	ror	r24
    20fa:	97 f9       	bld	r25, 7
    20fc:	08 95       	ret
    20fe:	e1 e0       	ldi	r30, 0x01	; 1
    2100:	66 0f       	add	r22, r22
    2102:	77 1f       	adc	r23, r23
    2104:	88 1f       	adc	r24, r24
    2106:	bb 1f       	adc	r27, r27
    2108:	62 17       	cp	r22, r18
    210a:	73 07       	cpc	r23, r19
    210c:	84 07       	cpc	r24, r20
    210e:	ba 07       	cpc	r27, r26
    2110:	20 f0       	brcs	.+8      	; 0x211a <__divsf3_pse+0xae>
    2112:	62 1b       	sub	r22, r18
    2114:	73 0b       	sbc	r23, r19
    2116:	84 0b       	sbc	r24, r20
    2118:	ba 0b       	sbc	r27, r26
    211a:	ee 1f       	adc	r30, r30
    211c:	88 f7       	brcc	.-30     	; 0x2100 <__divsf3_pse+0x94>
    211e:	e0 95       	com	r30
    2120:	08 95       	ret

00002122 <__fixsfsi>:
    2122:	0e 94 98 10 	call	0x2130	; 0x2130 <__fixunssfsi>
    2126:	68 94       	set
    2128:	b1 11       	cpse	r27, r1
    212a:	0c 94 73 11 	jmp	0x22e6	; 0x22e6 <__fp_szero>
    212e:	08 95       	ret

00002130 <__fixunssfsi>:
    2130:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__fp_splitA>
    2134:	88 f0       	brcs	.+34     	; 0x2158 <__fixunssfsi+0x28>
    2136:	9f 57       	subi	r25, 0x7F	; 127
    2138:	98 f0       	brcs	.+38     	; 0x2160 <__fixunssfsi+0x30>
    213a:	b9 2f       	mov	r27, r25
    213c:	99 27       	eor	r25, r25
    213e:	b7 51       	subi	r27, 0x17	; 23
    2140:	b0 f0       	brcs	.+44     	; 0x216e <__fixunssfsi+0x3e>
    2142:	e1 f0       	breq	.+56     	; 0x217c <__fixunssfsi+0x4c>
    2144:	66 0f       	add	r22, r22
    2146:	77 1f       	adc	r23, r23
    2148:	88 1f       	adc	r24, r24
    214a:	99 1f       	adc	r25, r25
    214c:	1a f0       	brmi	.+6      	; 0x2154 <__fixunssfsi+0x24>
    214e:	ba 95       	dec	r27
    2150:	c9 f7       	brne	.-14     	; 0x2144 <__fixunssfsi+0x14>
    2152:	14 c0       	rjmp	.+40     	; 0x217c <__fixunssfsi+0x4c>
    2154:	b1 30       	cpi	r27, 0x01	; 1
    2156:	91 f0       	breq	.+36     	; 0x217c <__fixunssfsi+0x4c>
    2158:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__fp_zero>
    215c:	b1 e0       	ldi	r27, 0x01	; 1
    215e:	08 95       	ret
    2160:	0c 94 72 11 	jmp	0x22e4	; 0x22e4 <__fp_zero>
    2164:	67 2f       	mov	r22, r23
    2166:	78 2f       	mov	r23, r24
    2168:	88 27       	eor	r24, r24
    216a:	b8 5f       	subi	r27, 0xF8	; 248
    216c:	39 f0       	breq	.+14     	; 0x217c <__fixunssfsi+0x4c>
    216e:	b9 3f       	cpi	r27, 0xF9	; 249
    2170:	cc f3       	brlt	.-14     	; 0x2164 <__fixunssfsi+0x34>
    2172:	86 95       	lsr	r24
    2174:	77 95       	ror	r23
    2176:	67 95       	ror	r22
    2178:	b3 95       	inc	r27
    217a:	d9 f7       	brne	.-10     	; 0x2172 <__fixunssfsi+0x42>
    217c:	3e f4       	brtc	.+14     	; 0x218c <__fixunssfsi+0x5c>
    217e:	90 95       	com	r25
    2180:	80 95       	com	r24
    2182:	70 95       	com	r23
    2184:	61 95       	neg	r22
    2186:	7f 4f       	sbci	r23, 0xFF	; 255
    2188:	8f 4f       	sbci	r24, 0xFF	; 255
    218a:	9f 4f       	sbci	r25, 0xFF	; 255
    218c:	08 95       	ret

0000218e <__floatunsisf>:
    218e:	e8 94       	clt
    2190:	09 c0       	rjmp	.+18     	; 0x21a4 <__floatsisf+0x12>

00002192 <__floatsisf>:
    2192:	97 fb       	bst	r25, 7
    2194:	3e f4       	brtc	.+14     	; 0x21a4 <__floatsisf+0x12>
    2196:	90 95       	com	r25
    2198:	80 95       	com	r24
    219a:	70 95       	com	r23
    219c:	61 95       	neg	r22
    219e:	7f 4f       	sbci	r23, 0xFF	; 255
    21a0:	8f 4f       	sbci	r24, 0xFF	; 255
    21a2:	9f 4f       	sbci	r25, 0xFF	; 255
    21a4:	99 23       	and	r25, r25
    21a6:	a9 f0       	breq	.+42     	; 0x21d2 <__floatsisf+0x40>
    21a8:	f9 2f       	mov	r31, r25
    21aa:	96 e9       	ldi	r25, 0x96	; 150
    21ac:	bb 27       	eor	r27, r27
    21ae:	93 95       	inc	r25
    21b0:	f6 95       	lsr	r31
    21b2:	87 95       	ror	r24
    21b4:	77 95       	ror	r23
    21b6:	67 95       	ror	r22
    21b8:	b7 95       	ror	r27
    21ba:	f1 11       	cpse	r31, r1
    21bc:	f8 cf       	rjmp	.-16     	; 0x21ae <__floatsisf+0x1c>
    21be:	fa f4       	brpl	.+62     	; 0x21fe <__floatsisf+0x6c>
    21c0:	bb 0f       	add	r27, r27
    21c2:	11 f4       	brne	.+4      	; 0x21c8 <__floatsisf+0x36>
    21c4:	60 ff       	sbrs	r22, 0
    21c6:	1b c0       	rjmp	.+54     	; 0x21fe <__floatsisf+0x6c>
    21c8:	6f 5f       	subi	r22, 0xFF	; 255
    21ca:	7f 4f       	sbci	r23, 0xFF	; 255
    21cc:	8f 4f       	sbci	r24, 0xFF	; 255
    21ce:	9f 4f       	sbci	r25, 0xFF	; 255
    21d0:	16 c0       	rjmp	.+44     	; 0x21fe <__floatsisf+0x6c>
    21d2:	88 23       	and	r24, r24
    21d4:	11 f0       	breq	.+4      	; 0x21da <__floatsisf+0x48>
    21d6:	96 e9       	ldi	r25, 0x96	; 150
    21d8:	11 c0       	rjmp	.+34     	; 0x21fc <__floatsisf+0x6a>
    21da:	77 23       	and	r23, r23
    21dc:	21 f0       	breq	.+8      	; 0x21e6 <__floatsisf+0x54>
    21de:	9e e8       	ldi	r25, 0x8E	; 142
    21e0:	87 2f       	mov	r24, r23
    21e2:	76 2f       	mov	r23, r22
    21e4:	05 c0       	rjmp	.+10     	; 0x21f0 <__floatsisf+0x5e>
    21e6:	66 23       	and	r22, r22
    21e8:	71 f0       	breq	.+28     	; 0x2206 <__floatsisf+0x74>
    21ea:	96 e8       	ldi	r25, 0x86	; 134
    21ec:	86 2f       	mov	r24, r22
    21ee:	70 e0       	ldi	r23, 0x00	; 0
    21f0:	60 e0       	ldi	r22, 0x00	; 0
    21f2:	2a f0       	brmi	.+10     	; 0x21fe <__floatsisf+0x6c>
    21f4:	9a 95       	dec	r25
    21f6:	66 0f       	add	r22, r22
    21f8:	77 1f       	adc	r23, r23
    21fa:	88 1f       	adc	r24, r24
    21fc:	da f7       	brpl	.-10     	; 0x21f4 <__floatsisf+0x62>
    21fe:	88 0f       	add	r24, r24
    2200:	96 95       	lsr	r25
    2202:	87 95       	ror	r24
    2204:	97 f9       	bld	r25, 7
    2206:	08 95       	ret

00002208 <__fp_cmp>:
    2208:	99 0f       	add	r25, r25
    220a:	00 08       	sbc	r0, r0
    220c:	55 0f       	add	r21, r21
    220e:	aa 0b       	sbc	r26, r26
    2210:	e0 e8       	ldi	r30, 0x80	; 128
    2212:	fe ef       	ldi	r31, 0xFE	; 254
    2214:	16 16       	cp	r1, r22
    2216:	17 06       	cpc	r1, r23
    2218:	e8 07       	cpc	r30, r24
    221a:	f9 07       	cpc	r31, r25
    221c:	c0 f0       	brcs	.+48     	; 0x224e <__fp_cmp+0x46>
    221e:	12 16       	cp	r1, r18
    2220:	13 06       	cpc	r1, r19
    2222:	e4 07       	cpc	r30, r20
    2224:	f5 07       	cpc	r31, r21
    2226:	98 f0       	brcs	.+38     	; 0x224e <__fp_cmp+0x46>
    2228:	62 1b       	sub	r22, r18
    222a:	73 0b       	sbc	r23, r19
    222c:	84 0b       	sbc	r24, r20
    222e:	95 0b       	sbc	r25, r21
    2230:	39 f4       	brne	.+14     	; 0x2240 <__fp_cmp+0x38>
    2232:	0a 26       	eor	r0, r26
    2234:	61 f0       	breq	.+24     	; 0x224e <__fp_cmp+0x46>
    2236:	23 2b       	or	r18, r19
    2238:	24 2b       	or	r18, r20
    223a:	25 2b       	or	r18, r21
    223c:	21 f4       	brne	.+8      	; 0x2246 <__fp_cmp+0x3e>
    223e:	08 95       	ret
    2240:	0a 26       	eor	r0, r26
    2242:	09 f4       	brne	.+2      	; 0x2246 <__fp_cmp+0x3e>
    2244:	a1 40       	sbci	r26, 0x01	; 1
    2246:	a6 95       	lsr	r26
    2248:	8f ef       	ldi	r24, 0xFF	; 255
    224a:	81 1d       	adc	r24, r1
    224c:	81 1d       	adc	r24, r1
    224e:	08 95       	ret

00002250 <__fp_inf>:
    2250:	97 f9       	bld	r25, 7
    2252:	9f 67       	ori	r25, 0x7F	; 127
    2254:	80 e8       	ldi	r24, 0x80	; 128
    2256:	70 e0       	ldi	r23, 0x00	; 0
    2258:	60 e0       	ldi	r22, 0x00	; 0
    225a:	08 95       	ret

0000225c <__fp_nan>:
    225c:	9f ef       	ldi	r25, 0xFF	; 255
    225e:	80 ec       	ldi	r24, 0xC0	; 192
    2260:	08 95       	ret

00002262 <__fp_pscA>:
    2262:	00 24       	eor	r0, r0
    2264:	0a 94       	dec	r0
    2266:	16 16       	cp	r1, r22
    2268:	17 06       	cpc	r1, r23
    226a:	18 06       	cpc	r1, r24
    226c:	09 06       	cpc	r0, r25
    226e:	08 95       	ret

00002270 <__fp_pscB>:
    2270:	00 24       	eor	r0, r0
    2272:	0a 94       	dec	r0
    2274:	12 16       	cp	r1, r18
    2276:	13 06       	cpc	r1, r19
    2278:	14 06       	cpc	r1, r20
    227a:	05 06       	cpc	r0, r21
    227c:	08 95       	ret

0000227e <__fp_round>:
    227e:	09 2e       	mov	r0, r25
    2280:	03 94       	inc	r0
    2282:	00 0c       	add	r0, r0
    2284:	11 f4       	brne	.+4      	; 0x228a <__fp_round+0xc>
    2286:	88 23       	and	r24, r24
    2288:	52 f0       	brmi	.+20     	; 0x229e <__fp_round+0x20>
    228a:	bb 0f       	add	r27, r27
    228c:	40 f4       	brcc	.+16     	; 0x229e <__fp_round+0x20>
    228e:	bf 2b       	or	r27, r31
    2290:	11 f4       	brne	.+4      	; 0x2296 <__fp_round+0x18>
    2292:	60 ff       	sbrs	r22, 0
    2294:	04 c0       	rjmp	.+8      	; 0x229e <__fp_round+0x20>
    2296:	6f 5f       	subi	r22, 0xFF	; 255
    2298:	7f 4f       	sbci	r23, 0xFF	; 255
    229a:	8f 4f       	sbci	r24, 0xFF	; 255
    229c:	9f 4f       	sbci	r25, 0xFF	; 255
    229e:	08 95       	ret

000022a0 <__fp_split3>:
    22a0:	57 fd       	sbrc	r21, 7
    22a2:	90 58       	subi	r25, 0x80	; 128
    22a4:	44 0f       	add	r20, r20
    22a6:	55 1f       	adc	r21, r21
    22a8:	59 f0       	breq	.+22     	; 0x22c0 <__fp_splitA+0x10>
    22aa:	5f 3f       	cpi	r21, 0xFF	; 255
    22ac:	71 f0       	breq	.+28     	; 0x22ca <__fp_splitA+0x1a>
    22ae:	47 95       	ror	r20

000022b0 <__fp_splitA>:
    22b0:	88 0f       	add	r24, r24
    22b2:	97 fb       	bst	r25, 7
    22b4:	99 1f       	adc	r25, r25
    22b6:	61 f0       	breq	.+24     	; 0x22d0 <__fp_splitA+0x20>
    22b8:	9f 3f       	cpi	r25, 0xFF	; 255
    22ba:	79 f0       	breq	.+30     	; 0x22da <__fp_splitA+0x2a>
    22bc:	87 95       	ror	r24
    22be:	08 95       	ret
    22c0:	12 16       	cp	r1, r18
    22c2:	13 06       	cpc	r1, r19
    22c4:	14 06       	cpc	r1, r20
    22c6:	55 1f       	adc	r21, r21
    22c8:	f2 cf       	rjmp	.-28     	; 0x22ae <__fp_split3+0xe>
    22ca:	46 95       	lsr	r20
    22cc:	f1 df       	rcall	.-30     	; 0x22b0 <__fp_splitA>
    22ce:	08 c0       	rjmp	.+16     	; 0x22e0 <__fp_splitA+0x30>
    22d0:	16 16       	cp	r1, r22
    22d2:	17 06       	cpc	r1, r23
    22d4:	18 06       	cpc	r1, r24
    22d6:	99 1f       	adc	r25, r25
    22d8:	f1 cf       	rjmp	.-30     	; 0x22bc <__fp_splitA+0xc>
    22da:	86 95       	lsr	r24
    22dc:	71 05       	cpc	r23, r1
    22de:	61 05       	cpc	r22, r1
    22e0:	08 94       	sec
    22e2:	08 95       	ret

000022e4 <__fp_zero>:
    22e4:	e8 94       	clt

000022e6 <__fp_szero>:
    22e6:	bb 27       	eor	r27, r27
    22e8:	66 27       	eor	r22, r22
    22ea:	77 27       	eor	r23, r23
    22ec:	cb 01       	movw	r24, r22
    22ee:	97 f9       	bld	r25, 7
    22f0:	08 95       	ret

000022f2 <__gesf2>:
    22f2:	0e 94 04 11 	call	0x2208	; 0x2208 <__fp_cmp>
    22f6:	08 f4       	brcc	.+2      	; 0x22fa <__gesf2+0x8>
    22f8:	8f ef       	ldi	r24, 0xFF	; 255
    22fa:	08 95       	ret

000022fc <__mulsf3>:
    22fc:	0e 94 91 11 	call	0x2322	; 0x2322 <__mulsf3x>
    2300:	0c 94 3f 11 	jmp	0x227e	; 0x227e <__fp_round>
    2304:	0e 94 31 11 	call	0x2262	; 0x2262 <__fp_pscA>
    2308:	38 f0       	brcs	.+14     	; 0x2318 <__mulsf3+0x1c>
    230a:	0e 94 38 11 	call	0x2270	; 0x2270 <__fp_pscB>
    230e:	20 f0       	brcs	.+8      	; 0x2318 <__mulsf3+0x1c>
    2310:	95 23       	and	r25, r21
    2312:	11 f0       	breq	.+4      	; 0x2318 <__mulsf3+0x1c>
    2314:	0c 94 28 11 	jmp	0x2250	; 0x2250 <__fp_inf>
    2318:	0c 94 2e 11 	jmp	0x225c	; 0x225c <__fp_nan>
    231c:	11 24       	eor	r1, r1
    231e:	0c 94 73 11 	jmp	0x22e6	; 0x22e6 <__fp_szero>

00002322 <__mulsf3x>:
    2322:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__fp_split3>
    2326:	70 f3       	brcs	.-36     	; 0x2304 <__mulsf3+0x8>

00002328 <__mulsf3_pse>:
    2328:	95 9f       	mul	r25, r21
    232a:	c1 f3       	breq	.-16     	; 0x231c <__mulsf3+0x20>
    232c:	95 0f       	add	r25, r21
    232e:	50 e0       	ldi	r21, 0x00	; 0
    2330:	55 1f       	adc	r21, r21
    2332:	62 9f       	mul	r22, r18
    2334:	f0 01       	movw	r30, r0
    2336:	72 9f       	mul	r23, r18
    2338:	bb 27       	eor	r27, r27
    233a:	f0 0d       	add	r31, r0
    233c:	b1 1d       	adc	r27, r1
    233e:	63 9f       	mul	r22, r19
    2340:	aa 27       	eor	r26, r26
    2342:	f0 0d       	add	r31, r0
    2344:	b1 1d       	adc	r27, r1
    2346:	aa 1f       	adc	r26, r26
    2348:	64 9f       	mul	r22, r20
    234a:	66 27       	eor	r22, r22
    234c:	b0 0d       	add	r27, r0
    234e:	a1 1d       	adc	r26, r1
    2350:	66 1f       	adc	r22, r22
    2352:	82 9f       	mul	r24, r18
    2354:	22 27       	eor	r18, r18
    2356:	b0 0d       	add	r27, r0
    2358:	a1 1d       	adc	r26, r1
    235a:	62 1f       	adc	r22, r18
    235c:	73 9f       	mul	r23, r19
    235e:	b0 0d       	add	r27, r0
    2360:	a1 1d       	adc	r26, r1
    2362:	62 1f       	adc	r22, r18
    2364:	83 9f       	mul	r24, r19
    2366:	a0 0d       	add	r26, r0
    2368:	61 1d       	adc	r22, r1
    236a:	22 1f       	adc	r18, r18
    236c:	74 9f       	mul	r23, r20
    236e:	33 27       	eor	r19, r19
    2370:	a0 0d       	add	r26, r0
    2372:	61 1d       	adc	r22, r1
    2374:	23 1f       	adc	r18, r19
    2376:	84 9f       	mul	r24, r20
    2378:	60 0d       	add	r22, r0
    237a:	21 1d       	adc	r18, r1
    237c:	82 2f       	mov	r24, r18
    237e:	76 2f       	mov	r23, r22
    2380:	6a 2f       	mov	r22, r26
    2382:	11 24       	eor	r1, r1
    2384:	9f 57       	subi	r25, 0x7F	; 127
    2386:	50 40       	sbci	r21, 0x00	; 0
    2388:	9a f0       	brmi	.+38     	; 0x23b0 <__mulsf3_pse+0x88>
    238a:	f1 f0       	breq	.+60     	; 0x23c8 <__mulsf3_pse+0xa0>
    238c:	88 23       	and	r24, r24
    238e:	4a f0       	brmi	.+18     	; 0x23a2 <__mulsf3_pse+0x7a>
    2390:	ee 0f       	add	r30, r30
    2392:	ff 1f       	adc	r31, r31
    2394:	bb 1f       	adc	r27, r27
    2396:	66 1f       	adc	r22, r22
    2398:	77 1f       	adc	r23, r23
    239a:	88 1f       	adc	r24, r24
    239c:	91 50       	subi	r25, 0x01	; 1
    239e:	50 40       	sbci	r21, 0x00	; 0
    23a0:	a9 f7       	brne	.-22     	; 0x238c <__mulsf3_pse+0x64>
    23a2:	9e 3f       	cpi	r25, 0xFE	; 254
    23a4:	51 05       	cpc	r21, r1
    23a6:	80 f0       	brcs	.+32     	; 0x23c8 <__mulsf3_pse+0xa0>
    23a8:	0c 94 28 11 	jmp	0x2250	; 0x2250 <__fp_inf>
    23ac:	0c 94 73 11 	jmp	0x22e6	; 0x22e6 <__fp_szero>
    23b0:	5f 3f       	cpi	r21, 0xFF	; 255
    23b2:	e4 f3       	brlt	.-8      	; 0x23ac <__mulsf3_pse+0x84>
    23b4:	98 3e       	cpi	r25, 0xE8	; 232
    23b6:	d4 f3       	brlt	.-12     	; 0x23ac <__mulsf3_pse+0x84>
    23b8:	86 95       	lsr	r24
    23ba:	77 95       	ror	r23
    23bc:	67 95       	ror	r22
    23be:	b7 95       	ror	r27
    23c0:	f7 95       	ror	r31
    23c2:	e7 95       	ror	r30
    23c4:	9f 5f       	subi	r25, 0xFF	; 255
    23c6:	c1 f7       	brne	.-16     	; 0x23b8 <__mulsf3_pse+0x90>
    23c8:	fe 2b       	or	r31, r30
    23ca:	88 0f       	add	r24, r24
    23cc:	91 1d       	adc	r25, r1
    23ce:	96 95       	lsr	r25
    23d0:	87 95       	ror	r24
    23d2:	97 f9       	bld	r25, 7
    23d4:	08 95       	ret

000023d6 <__cxa_pure_virtual>:
    23d6:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <abort>

000023da <initVariant>:
    23da:	08 95       	ret

000023dc <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    23dc:	0e 94 84 19 	call	0x3308	; 0x3308 <init>

	initVariant();
    23e0:	0e 94 ed 11 	call	0x23da	; 0x23da <initVariant>

#if defined(USBCON)
	USBDevice.attach();
    23e4:	85 ed       	ldi	r24, 0xD5	; 213
    23e6:	92 e0       	ldi	r25, 0x02	; 2
    23e8:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <_ZN10USBDevice_6attachEv>
#endif
	
	setup();
    23ec:	0e 94 9e 01 	call	0x33c	; 0x33c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    23f0:	c0 e0       	ldi	r28, 0x00	; 0
    23f2:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    23f4:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <loop>
		if (serialEventRun) serialEventRun();
    23f8:	20 97       	sbiw	r28, 0x00	; 0
    23fa:	e1 f3       	breq	.-8      	; 0x23f4 <main+0x18>
    23fc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2400:	f9 cf       	rjmp	.-14     	; 0x23f4 <main+0x18>

00002402 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2402:	cf 92       	push	r12
    2404:	df 92       	push	r13
    2406:	ef 92       	push	r14
    2408:	ff 92       	push	r15
    240a:	0f 93       	push	r16
    240c:	1f 93       	push	r17
    240e:	cf 93       	push	r28
    2410:	df 93       	push	r29
    2412:	6c 01       	movw	r12, r24
    2414:	7a 01       	movw	r14, r20
    2416:	8b 01       	movw	r16, r22
    2418:	c0 e0       	ldi	r28, 0x00	; 0
    241a:	d0 e0       	ldi	r29, 0x00	; 0
    241c:	ce 15       	cp	r28, r14
    241e:	df 05       	cpc	r29, r15
    2420:	81 f0       	breq	.+32     	; 0x2442 <_ZN5Print5writeEPKhj+0x40>
    2422:	d8 01       	movw	r26, r16
    2424:	6d 91       	ld	r22, X+
    2426:	8d 01       	movw	r16, r26
    2428:	d6 01       	movw	r26, r12
    242a:	ed 91       	ld	r30, X+
    242c:	fc 91       	ld	r31, X
    242e:	01 90       	ld	r0, Z+
    2430:	f0 81       	ld	r31, Z
    2432:	e0 2d       	mov	r30, r0
    2434:	c6 01       	movw	r24, r12
    2436:	09 95       	icall
    2438:	89 2b       	or	r24, r25
    243a:	11 f0       	breq	.+4      	; 0x2440 <_ZN5Print5writeEPKhj+0x3e>
    243c:	21 96       	adiw	r28, 0x01	; 1
    243e:	ee cf       	rjmp	.-36     	; 0x241c <_ZN5Print5writeEPKhj+0x1a>
    2440:	7e 01       	movw	r14, r28
    2442:	c7 01       	movw	r24, r14
    2444:	df 91       	pop	r29
    2446:	cf 91       	pop	r28
    2448:	1f 91       	pop	r17
    244a:	0f 91       	pop	r16
    244c:	ff 90       	pop	r15
    244e:	ef 90       	pop	r14
    2450:	df 90       	pop	r13
    2452:	cf 90       	pop	r12
    2454:	08 95       	ret

00002456 <_ZN5Print5writeEPKc>:
    2456:	61 15       	cp	r22, r1
    2458:	71 05       	cpc	r23, r1
    245a:	79 f0       	breq	.+30     	; 0x247a <_ZN5Print5writeEPKc+0x24>
    245c:	fb 01       	movw	r30, r22
    245e:	01 90       	ld	r0, Z+
    2460:	00 20       	and	r0, r0
    2462:	e9 f7       	brne	.-6      	; 0x245e <_ZN5Print5writeEPKc+0x8>
    2464:	31 97       	sbiw	r30, 0x01	; 1
    2466:	af 01       	movw	r20, r30
    2468:	46 1b       	sub	r20, r22
    246a:	57 0b       	sbc	r21, r23
    246c:	dc 01       	movw	r26, r24
    246e:	ed 91       	ld	r30, X+
    2470:	fc 91       	ld	r31, X
    2472:	02 80       	ldd	r0, Z+2	; 0x02
    2474:	f3 81       	ldd	r31, Z+3	; 0x03
    2476:	e0 2d       	mov	r30, r0
    2478:	09 94       	ijmp
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	08 95       	ret

00002480 <_ZN5Print5printEc>:
    2480:	dc 01       	movw	r26, r24
    2482:	ed 91       	ld	r30, X+
    2484:	fc 91       	ld	r31, X
    2486:	01 90       	ld	r0, Z+
    2488:	f0 81       	ld	r31, Z
    248a:	e0 2d       	mov	r30, r0
    248c:	09 94       	ijmp

0000248e <_ZN5Print11printNumberEmh>:
    248e:	8f 92       	push	r8
    2490:	9f 92       	push	r9
    2492:	af 92       	push	r10
    2494:	bf 92       	push	r11
    2496:	ef 92       	push	r14
    2498:	ff 92       	push	r15
    249a:	0f 93       	push	r16
    249c:	1f 93       	push	r17
    249e:	cf 93       	push	r28
    24a0:	df 93       	push	r29
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
    24a6:	a1 97       	sbiw	r28, 0x21	; 33
    24a8:	0f b6       	in	r0, 0x3f	; 63
    24aa:	f8 94       	cli
    24ac:	de bf       	out	0x3e, r29	; 62
    24ae:	0f be       	out	0x3f, r0	; 63
    24b0:	cd bf       	out	0x3d, r28	; 61
    24b2:	7c 01       	movw	r14, r24
    24b4:	fa 01       	movw	r30, r20
    24b6:	cb 01       	movw	r24, r22
    24b8:	19 a2       	std	Y+33, r1	; 0x21
    24ba:	22 30       	cpi	r18, 0x02	; 2
    24bc:	08 f4       	brcc	.+2      	; 0x24c0 <_ZN5Print11printNumberEmh+0x32>
    24be:	2a e0       	ldi	r18, 0x0A	; 10
    24c0:	8e 01       	movw	r16, r28
    24c2:	0f 5d       	subi	r16, 0xDF	; 223
    24c4:	1f 4f       	sbci	r17, 0xFF	; 255
    24c6:	82 2e       	mov	r8, r18
    24c8:	91 2c       	mov	r9, r1
    24ca:	a1 2c       	mov	r10, r1
    24cc:	b1 2c       	mov	r11, r1
    24ce:	bf 01       	movw	r22, r30
    24d0:	a5 01       	movw	r20, r10
    24d2:	94 01       	movw	r18, r8
    24d4:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <__udivmodsi4>
    24d8:	f9 01       	movw	r30, r18
    24da:	ca 01       	movw	r24, r20
    24dc:	01 50       	subi	r16, 0x01	; 1
    24de:	11 09       	sbc	r17, r1
    24e0:	6a 30       	cpi	r22, 0x0A	; 10
    24e2:	10 f4       	brcc	.+4      	; 0x24e8 <_ZN5Print11printNumberEmh+0x5a>
    24e4:	60 5d       	subi	r22, 0xD0	; 208
    24e6:	01 c0       	rjmp	.+2      	; 0x24ea <_ZN5Print11printNumberEmh+0x5c>
    24e8:	69 5c       	subi	r22, 0xC9	; 201
    24ea:	d8 01       	movw	r26, r16
    24ec:	6c 93       	st	X, r22
    24ee:	23 2b       	or	r18, r19
    24f0:	24 2b       	or	r18, r20
    24f2:	25 2b       	or	r18, r21
    24f4:	61 f7       	brne	.-40     	; 0x24ce <_ZN5Print11printNumberEmh+0x40>
    24f6:	b8 01       	movw	r22, r16
    24f8:	c7 01       	movw	r24, r14
    24fa:	0e 94 2b 12 	call	0x2456	; 0x2456 <_ZN5Print5writeEPKc>
    24fe:	a1 96       	adiw	r28, 0x21	; 33
    2500:	0f b6       	in	r0, 0x3f	; 63
    2502:	f8 94       	cli
    2504:	de bf       	out	0x3e, r29	; 62
    2506:	0f be       	out	0x3f, r0	; 63
    2508:	cd bf       	out	0x3d, r28	; 61
    250a:	df 91       	pop	r29
    250c:	cf 91       	pop	r28
    250e:	1f 91       	pop	r17
    2510:	0f 91       	pop	r16
    2512:	ff 90       	pop	r15
    2514:	ef 90       	pop	r14
    2516:	bf 90       	pop	r11
    2518:	af 90       	pop	r10
    251a:	9f 90       	pop	r9
    251c:	8f 90       	pop	r8
    251e:	08 95       	ret

00002520 <_ZN5Print5printEmi>:
    2520:	21 15       	cp	r18, r1
    2522:	31 05       	cpc	r19, r1
    2524:	41 f4       	brne	.+16     	; 0x2536 <_ZN5Print5printEmi+0x16>
    2526:	dc 01       	movw	r26, r24
    2528:	ed 91       	ld	r30, X+
    252a:	fc 91       	ld	r31, X
    252c:	01 90       	ld	r0, Z+
    252e:	f0 81       	ld	r31, Z
    2530:	e0 2d       	mov	r30, r0
    2532:	64 2f       	mov	r22, r20
    2534:	09 94       	ijmp
    2536:	0c 94 47 12 	jmp	0x248e	; 0x248e <_ZN5Print11printNumberEmh>

0000253a <_ZN5Print5printEji>:
    253a:	9a 01       	movw	r18, r20
    253c:	ab 01       	movw	r20, r22
    253e:	60 e0       	ldi	r22, 0x00	; 0
    2540:	70 e0       	ldi	r23, 0x00	; 0
    2542:	0c 94 90 12 	jmp	0x2520	; 0x2520 <_ZN5Print5printEmi>

00002546 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    2546:	7f 92       	push	r7
    2548:	8f 92       	push	r8
    254a:	9f 92       	push	r9
    254c:	af 92       	push	r10
    254e:	bf 92       	push	r11
    2550:	cf 92       	push	r12
    2552:	df 92       	push	r13
    2554:	ef 92       	push	r14
    2556:	ff 92       	push	r15
    2558:	0f 93       	push	r16
    255a:	1f 93       	push	r17
    255c:	cf 93       	push	r28
    255e:	df 93       	push	r29
    2560:	8c 01       	movw	r16, r24
    2562:	6a 01       	movw	r12, r20
    2564:	7b 01       	movw	r14, r22
    2566:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    2568:	9a 01       	movw	r18, r20
    256a:	ab 01       	movw	r20, r22
    256c:	c7 01       	movw	r24, r14
    256e:	b6 01       	movw	r22, r12
    2570:	0e 94 ce 1c 	call	0x399c	; 0x399c <__unordsf2>
    2574:	88 23       	and	r24, r24
    2576:	19 f0       	breq	.+6      	; 0x257e <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2578:	6c e6       	ldi	r22, 0x6C	; 108
    257a:	71 e0       	ldi	r23, 0x01	; 1
    257c:	27 c0       	rjmp	.+78     	; 0x25cc <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    257e:	46 01       	movw	r8, r12
    2580:	57 01       	movw	r10, r14
    2582:	e8 94       	clt
    2584:	b7 f8       	bld	r11, 7
    2586:	2f ef       	ldi	r18, 0xFF	; 255
    2588:	3f ef       	ldi	r19, 0xFF	; 255
    258a:	4f e7       	ldi	r20, 0x7F	; 127
    258c:	5f e7       	ldi	r21, 0x7F	; 127
    258e:	c5 01       	movw	r24, r10
    2590:	b4 01       	movw	r22, r8
    2592:	0e 94 ce 1c 	call	0x399c	; 0x399c <__unordsf2>
    2596:	81 11       	cpse	r24, r1
    2598:	0d c0       	rjmp	.+26     	; 0x25b4 <_ZN5Print10printFloatEdh+0x6e>
    259a:	2f ef       	ldi	r18, 0xFF	; 255
    259c:	3f ef       	ldi	r19, 0xFF	; 255
    259e:	4f e7       	ldi	r20, 0x7F	; 127
    25a0:	5f e7       	ldi	r21, 0x7F	; 127
    25a2:	c5 01       	movw	r24, r10
    25a4:	b4 01       	movw	r22, r8
    25a6:	0e 94 1a 10 	call	0x2034	; 0x2034 <__cmpsf2>
    25aa:	18 16       	cp	r1, r24
    25ac:	1c f4       	brge	.+6      	; 0x25b4 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    25ae:	60 e7       	ldi	r22, 0x70	; 112
    25b0:	71 e0       	ldi	r23, 0x01	; 1
    25b2:	0c c0       	rjmp	.+24     	; 0x25cc <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    25b4:	2f ef       	ldi	r18, 0xFF	; 255
    25b6:	3f ef       	ldi	r19, 0xFF	; 255
    25b8:	4f e7       	ldi	r20, 0x7F	; 127
    25ba:	5f e4       	ldi	r21, 0x4F	; 79
    25bc:	c7 01       	movw	r24, r14
    25be:	b6 01       	movw	r22, r12
    25c0:	0e 94 79 11 	call	0x22f2	; 0x22f2 <__gesf2>
    25c4:	18 16       	cp	r1, r24
    25c6:	94 f4       	brge	.+36     	; 0x25ec <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    25c8:	64 e7       	ldi	r22, 0x74	; 116
    25ca:	71 e0       	ldi	r23, 0x01	; 1
    25cc:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    25ce:	df 91       	pop	r29
    25d0:	cf 91       	pop	r28
    25d2:	1f 91       	pop	r17
    25d4:	0f 91       	pop	r16
    25d6:	ff 90       	pop	r15
    25d8:	ef 90       	pop	r14
    25da:	df 90       	pop	r13
    25dc:	cf 90       	pop	r12
    25de:	bf 90       	pop	r11
    25e0:	af 90       	pop	r10
    25e2:	9f 90       	pop	r9
    25e4:	8f 90       	pop	r8
    25e6:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    25e8:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    25ec:	2f ef       	ldi	r18, 0xFF	; 255
    25ee:	3f ef       	ldi	r19, 0xFF	; 255
    25f0:	4f e7       	ldi	r20, 0x7F	; 127
    25f2:	5f ec       	ldi	r21, 0xCF	; 207
    25f4:	c7 01       	movw	r24, r14
    25f6:	b6 01       	movw	r22, r12
    25f8:	0e 94 1a 10 	call	0x2034	; 0x2034 <__cmpsf2>
    25fc:	87 fd       	sbrc	r24, 7
    25fe:	e4 cf       	rjmp	.-56     	; 0x25c8 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	a9 01       	movw	r20, r18
    2606:	c7 01       	movw	r24, r14
    2608:	b6 01       	movw	r22, r12
    260a:	0e 94 1a 10 	call	0x2034	; 0x2034 <__cmpsf2>
    260e:	87 ff       	sbrs	r24, 7
    2610:	0a c0       	rjmp	.+20     	; 0x2626 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    2612:	6d e2       	ldi	r22, 0x2D	; 45
    2614:	c8 01       	movw	r24, r16
    2616:	0e 94 40 12 	call	0x2480	; 0x2480 <_ZN5Print5printEc>
    261a:	ec 01       	movw	r28, r24
     number = -number;
    261c:	f7 fa       	bst	r15, 7
    261e:	f0 94       	com	r15
    2620:	f7 f8       	bld	r15, 7
    2622:	f0 94       	com	r15
    2624:	02 c0       	rjmp	.+4      	; 0x262a <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    2626:	c0 e0       	ldi	r28, 0x00	; 0
    2628:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    262a:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    262c:	60 e0       	ldi	r22, 0x00	; 0
    262e:	70 e0       	ldi	r23, 0x00	; 0
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    2634:	7b 14       	cp	r7, r11
    2636:	41 f0       	breq	.+16     	; 0x2648 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	40 e2       	ldi	r20, 0x20	; 32
    263e:	51 e4       	ldi	r21, 0x41	; 65
    2640:	0e 94 1f 10 	call	0x203e	; 0x203e <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2644:	b3 94       	inc	r11
    2646:	f6 cf       	rjmp	.-20     	; 0x2634 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    2648:	a7 01       	movw	r20, r14
    264a:	96 01       	movw	r18, r12
    264c:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__addsf3>
    2650:	6b 01       	movw	r12, r22
    2652:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    2654:	0e 94 98 10 	call	0x2130	; 0x2130 <__fixunssfsi>
    2658:	4b 01       	movw	r8, r22
    265a:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    265c:	2a e0       	ldi	r18, 0x0A	; 10
    265e:	ab 01       	movw	r20, r22
    2660:	bc 01       	movw	r22, r24
    2662:	c8 01       	movw	r24, r16
    2664:	0e 94 47 12 	call	0x248e	; 0x248e <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2668:	c8 0f       	add	r28, r24
    266a:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    266c:	77 20       	and	r7, r7
    266e:	b9 f1       	breq	.+110    	; 0x26de <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    2670:	c5 01       	movw	r24, r10
    2672:	b4 01       	movw	r22, r8
    2674:	0e 94 c7 10 	call	0x218e	; 0x218e <__floatunsisf>
    2678:	9b 01       	movw	r18, r22
    267a:	ac 01       	movw	r20, r24
    267c:	c7 01       	movw	r24, r14
    267e:	b6 01       	movw	r22, r12
    2680:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__subsf3>
    2684:	6b 01       	movw	r12, r22
    2686:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    2688:	6e e2       	ldi	r22, 0x2E	; 46
    268a:	c8 01       	movw	r24, r16
    268c:	0e 94 40 12 	call	0x2480	; 0x2480 <_ZN5Print5printEc>
    2690:	c8 0f       	add	r28, r24
    2692:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	40 e2       	ldi	r20, 0x20	; 32
    269a:	51 e4       	ldi	r21, 0x41	; 65
    269c:	c7 01       	movw	r24, r14
    269e:	b6 01       	movw	r22, r12
    26a0:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__mulsf3>
    26a4:	4b 01       	movw	r8, r22
    26a6:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    26a8:	0e 94 98 10 	call	0x2130	; 0x2130 <__fixunssfsi>
    26ac:	6b 01       	movw	r12, r22
    26ae:	7c 01       	movw	r14, r24
    n += print(toPrint);
    26b0:	4a e0       	ldi	r20, 0x0A	; 10
    26b2:	50 e0       	ldi	r21, 0x00	; 0
    26b4:	c8 01       	movw	r24, r16
    26b6:	0e 94 9d 12 	call	0x253a	; 0x253a <_ZN5Print5printEji>
    26ba:	c8 0f       	add	r28, r24
    26bc:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    26be:	b6 01       	movw	r22, r12
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	0e 94 c7 10 	call	0x218e	; 0x218e <__floatunsisf>
    26c8:	9b 01       	movw	r18, r22
    26ca:	ac 01       	movw	r20, r24
    26cc:	c5 01       	movw	r24, r10
    26ce:	b4 01       	movw	r22, r8
    26d0:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__subsf3>
    26d4:	6b 01       	movw	r12, r22
    26d6:	7c 01       	movw	r14, r24
    26d8:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    26da:	71 10       	cpse	r7, r1
    26dc:	db cf       	rjmp	.-74     	; 0x2694 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    26de:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    26e0:	df 91       	pop	r29
    26e2:	cf 91       	pop	r28
    26e4:	1f 91       	pop	r17
    26e6:	0f 91       	pop	r16
    26e8:	ff 90       	pop	r15
    26ea:	ef 90       	pop	r14
    26ec:	df 90       	pop	r13
    26ee:	cf 90       	pop	r12
    26f0:	bf 90       	pop	r11
    26f2:	af 90       	pop	r10
    26f4:	9f 90       	pop	r9
    26f6:	8f 90       	pop	r8
    26f8:	7f 90       	pop	r7
    26fa:	08 95       	ret

000026fc <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    26fc:	0c 94 a3 12 	jmp	0x2546	; 0x2546 <_ZN5Print10printFloatEdh>

00002700 <_ZL4RecvPVhh>:
//=======================================================================
//=======================================================================

USBDevice_ USBDevice;

USBDevice_::USBDevice_()
    2700:	61 50       	subi	r22, 0x01	; 1
    2702:	30 f0       	brcs	.+12     	; 0x2710 <_ZL4RecvPVhh+0x10>
    2704:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2708:	fc 01       	movw	r30, r24
    270a:	20 83       	st	Z, r18
    270c:	01 96       	adiw	r24, 0x01	; 1
    270e:	f8 cf       	rjmp	.-16     	; 0x2700 <_ZL4RecvPVhh>
    2710:	28 98       	cbi	0x05, 0	; 5
    2712:	84 e6       	ldi	r24, 0x64	; 100
    2714:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <RxLEDPulse>
    2718:	08 95       	ret

0000271a <_ZL11SendControlh>:
    271a:	40 91 d8 02 	lds	r20, 0x02D8	; 0x8002d8 <_ZL6_cmark>
    271e:	50 91 d9 02 	lds	r21, 0x02D9	; 0x8002d9 <_ZL6_cmark+0x1>
    2722:	20 91 d6 02 	lds	r18, 0x02D6	; 0x8002d6 <_ZL5_cend>
    2726:	30 91 d7 02 	lds	r19, 0x02D7	; 0x8002d7 <_ZL5_cend+0x1>
    272a:	42 17       	cp	r20, r18
    272c:	53 07       	cpc	r21, r19
    272e:	b4 f4       	brge	.+44     	; 0x275c <_ZL11SendControlh+0x42>
    2730:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2734:	95 70       	andi	r25, 0x05	; 5
    2736:	e1 f3       	breq	.-8      	; 0x2730 <_ZL11SendControlh+0x16>
    2738:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    273c:	92 fd       	sbrc	r25, 2
    273e:	19 c0       	rjmp	.+50     	; 0x2772 <_ZL11SendControlh+0x58>
    2740:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2744:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <_ZL6_cmark>
    2748:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <_ZL6_cmark+0x1>
    274c:	01 96       	adiw	r24, 0x01	; 1
    274e:	8f 73       	andi	r24, 0x3F	; 63
    2750:	99 27       	eor	r25, r25
    2752:	89 2b       	or	r24, r25
    2754:	19 f4       	brne	.+6      	; 0x275c <_ZL11SendControlh+0x42>
    2756:	8e ef       	ldi	r24, 0xFE	; 254
    2758:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    275c:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <_ZL6_cmark>
    2760:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <_ZL6_cmark+0x1>
    2764:	01 96       	adiw	r24, 0x01	; 1
    2766:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <_ZL6_cmark+0x1>
    276a:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <_ZL6_cmark>
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	08 95       	ret
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	08 95       	ret

00002776 <_ZL24USB_SendStringDescriptorPKhhh>:
    2776:	df 92       	push	r13
    2778:	ef 92       	push	r14
    277a:	ff 92       	push	r15
    277c:	0f 93       	push	r16
    277e:	1f 93       	push	r17
    2780:	cf 93       	push	r28
    2782:	df 93       	push	r29
    2784:	d8 2e       	mov	r13, r24
    2786:	f9 2e       	mov	r15, r25
    2788:	e4 2e       	mov	r14, r20
    278a:	06 2f       	mov	r16, r22
    278c:	10 e0       	ldi	r17, 0x00	; 0
    278e:	c8 01       	movw	r24, r16
    2790:	01 96       	adiw	r24, 0x01	; 1
    2792:	88 0f       	add	r24, r24
    2794:	0e 94 8d 13 	call	0x271a	; 0x271a <_ZL11SendControlh>
    2798:	83 e0       	ldi	r24, 0x03	; 3
    279a:	0e 94 8d 13 	call	0x271a	; 0x271a <_ZL11SendControlh>
    279e:	cd 2d       	mov	r28, r13
    27a0:	df 2d       	mov	r29, r15
    27a2:	0c 0f       	add	r16, r28
    27a4:	1d 1f       	adc	r17, r29
    27a6:	c0 17       	cp	r28, r16
    27a8:	d1 07       	cpc	r29, r17
    27aa:	89 f0       	breq	.+34     	; 0x27ce <_ZL24USB_SendStringDescriptorPKhhh+0x58>
    27ac:	e7 fe       	sbrs	r14, 7
    27ae:	03 c0       	rjmp	.+6      	; 0x27b6 <_ZL24USB_SendStringDescriptorPKhhh+0x40>
    27b0:	fe 01       	movw	r30, r28
    27b2:	84 91       	lpm	r24, Z
    27b4:	01 c0       	rjmp	.+2      	; 0x27b8 <_ZL24USB_SendStringDescriptorPKhhh+0x42>
    27b6:	88 81       	ld	r24, Y
    27b8:	0e 94 8d 13 	call	0x271a	; 0x271a <_ZL11SendControlh>
    27bc:	f8 2e       	mov	r15, r24
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	0e 94 8d 13 	call	0x271a	; 0x271a <_ZL11SendControlh>
    27c4:	8f 21       	and	r24, r15
    27c6:	21 96       	adiw	r28, 0x01	; 1
    27c8:	81 11       	cpse	r24, r1
    27ca:	ed cf       	rjmp	.-38     	; 0x27a6 <_ZL24USB_SendStringDescriptorPKhhh+0x30>
    27cc:	01 c0       	rjmp	.+2      	; 0x27d0 <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	df 91       	pop	r29
    27d2:	cf 91       	pop	r28
    27d4:	1f 91       	pop	r17
    27d6:	0f 91       	pop	r16
    27d8:	ff 90       	pop	r15
    27da:	ef 90       	pop	r14
    27dc:	df 90       	pop	r13
    27de:	08 95       	ret

000027e0 <_ZL15USB_ClockEnablev>:
    27e0:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    27e4:	81 60       	ori	r24, 0x01	; 1
    27e6:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    27ea:	80 ea       	ldi	r24, 0xA0	; 160
    27ec:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    27f0:	89 b5       	in	r24, 0x29	; 41
    27f2:	80 61       	ori	r24, 0x10	; 16
    27f4:	89 bd       	out	0x29, r24	; 41
    27f6:	89 b5       	in	r24, 0x29	; 41
    27f8:	82 60       	ori	r24, 0x02	; 2
    27fa:	89 bd       	out	0x29, r24	; 41
    27fc:	09 b4       	in	r0, 0x29	; 41
    27fe:	00 fe       	sbrs	r0, 0
    2800:	fd cf       	rjmp	.-6      	; 0x27fc <_ZL15USB_ClockEnablev+0x1c>
    2802:	61 e0       	ldi	r22, 0x01	; 1
    2804:	70 e0       	ldi	r23, 0x00	; 0
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	0e 94 48 19 	call	0x3290	; 0x3290 <delay>
    280e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2812:	8f 7c       	andi	r24, 0xCF	; 207
    2814:	80 61       	ori	r24, 0x10	; 16
    2816:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    281a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    281e:	80 7f       	andi	r24, 0xF0	; 240
    2820:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2824:	08 95       	ret

00002826 <_ZL14SendInterfacesv>:
    2826:	cf 93       	push	r28
    2828:	df 93       	push	r29
    282a:	1f 92       	push	r1
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62
    2830:	19 82       	std	Y+1, r1	; 0x01
    2832:	ce 01       	movw	r24, r28
    2834:	01 96       	adiw	r24, 0x01	; 1
    2836:	0e 94 86 1b 	call	0x370c	; 0x370c <_Z16CDC_GetInterfacePh>
    283a:	0e 94 ba 1c 	call	0x3974	; 0x3974 <_Z12PluggableUSBv>
    283e:	be 01       	movw	r22, r28
    2840:	6f 5f       	subi	r22, 0xFF	; 255
    2842:	7f 4f       	sbci	r23, 0xFF	; 255
    2844:	0e 94 35 1c 	call	0x386a	; 0x386a <_ZN13PluggableUSB_12getInterfaceEPh>
    2848:	89 81       	ldd	r24, Y+1	; 0x01
    284a:	0f 90       	pop	r0
    284c:	df 91       	pop	r29
    284e:	cf 91       	pop	r28
    2850:	08 95       	ret

00002852 <_ZN6LockEPC1Eh>:
    2852:	2f b7       	in	r18, 0x3f	; 63
    2854:	fc 01       	movw	r30, r24
    2856:	20 83       	st	Z, r18
    2858:	f8 94       	cli
    285a:	67 70       	andi	r22, 0x07	; 7
    285c:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2860:	08 95       	ret

00002862 <_Z13USB_Availableh>:
    2862:	cf 93       	push	r28
    2864:	df 93       	push	r29
    2866:	1f 92       	push	r1
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
    286c:	68 2f       	mov	r22, r24
    286e:	ce 01       	movw	r24, r28
    2870:	01 96       	adiw	r24, 0x01	; 1
    2872:	0e 94 29 14 	call	0x2852	; 0x2852 <_ZN6LockEPC1Eh>
    2876:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    287a:	99 81       	ldd	r25, Y+1	; 0x01
    287c:	9f bf       	out	0x3f, r25	; 63
    287e:	0f 90       	pop	r0
    2880:	df 91       	pop	r29
    2882:	cf 91       	pop	r28
    2884:	08 95       	ret

00002886 <_Z8USB_RecvhPvi>:
    2886:	ef 92       	push	r14
    2888:	ff 92       	push	r15
    288a:	0f 93       	push	r16
    288c:	1f 93       	push	r17
    288e:	cf 93       	push	r28
    2890:	df 93       	push	r29
    2892:	1f 92       	push	r1
    2894:	cd b7       	in	r28, 0x3d	; 61
    2896:	de b7       	in	r29, 0x3e	; 62
    2898:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <_usbConfiguration>
    289c:	99 23       	and	r25, r25
    289e:	11 f0       	breq	.+4      	; 0x28a4 <_Z8USB_RecvhPvi+0x1e>
    28a0:	57 ff       	sbrs	r21, 7
    28a2:	03 c0       	rjmp	.+6      	; 0x28aa <_Z8USB_RecvhPvi+0x24>
    28a4:	8f ef       	ldi	r24, 0xFF	; 255
    28a6:	9f ef       	ldi	r25, 0xFF	; 255
    28a8:	29 c0       	rjmp	.+82     	; 0x28fc <_Z8USB_RecvhPvi+0x76>
    28aa:	8a 01       	movw	r16, r20
    28ac:	7b 01       	movw	r14, r22
    28ae:	68 2f       	mov	r22, r24
    28b0:	ce 01       	movw	r24, r28
    28b2:	01 96       	adiw	r24, 0x01	; 1
    28b4:	0e 94 29 14 	call	0x2852	; 0x2852 <_ZN6LockEPC1Eh>
    28b8:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	02 17       	cp	r16, r18
    28c0:	13 07       	cpc	r17, r19
    28c2:	0c f4       	brge	.+2      	; 0x28c6 <_Z8USB_RecvhPvi+0x40>
    28c4:	98 01       	movw	r18, r16
    28c6:	82 2f       	mov	r24, r18
    28c8:	f7 01       	movw	r30, r14
    28ca:	94 e6       	ldi	r25, 0x64	; 100
    28cc:	81 50       	subi	r24, 0x01	; 1
    28ce:	38 f0       	brcs	.+14     	; 0x28de <_Z8USB_RecvhPvi+0x58>
    28d0:	28 98       	cbi	0x05, 0	; 5
    28d2:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <RxLEDPulse>
    28d6:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    28da:	41 93       	st	Z+, r20
    28dc:	f7 cf       	rjmp	.-18     	; 0x28cc <_Z8USB_RecvhPvi+0x46>
    28de:	21 15       	cp	r18, r1
    28e0:	31 05       	cpc	r19, r1
    28e2:	21 f0       	breq	.+8      	; 0x28ec <_Z8USB_RecvhPvi+0x66>
    28e4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    28e8:	88 23       	and	r24, r24
    28ea:	21 f0       	breq	.+8      	; 0x28f4 <_Z8USB_RecvhPvi+0x6e>
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	8f bf       	out	0x3f, r24	; 63
    28f0:	c9 01       	movw	r24, r18
    28f2:	04 c0       	rjmp	.+8      	; 0x28fc <_Z8USB_RecvhPvi+0x76>
    28f4:	8b e6       	ldi	r24, 0x6B	; 107
    28f6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    28fa:	f8 cf       	rjmp	.-16     	; 0x28ec <_Z8USB_RecvhPvi+0x66>
    28fc:	0f 90       	pop	r0
    28fe:	df 91       	pop	r29
    2900:	cf 91       	pop	r28
    2902:	1f 91       	pop	r17
    2904:	0f 91       	pop	r16
    2906:	ff 90       	pop	r15
    2908:	ef 90       	pop	r14
    290a:	08 95       	ret

0000290c <_Z8USB_Recvh>:
    290c:	cf 93       	push	r28
    290e:	df 93       	push	r29
    2910:	1f 92       	push	r1
    2912:	cd b7       	in	r28, 0x3d	; 61
    2914:	de b7       	in	r29, 0x3e	; 62
    2916:	41 e0       	ldi	r20, 0x01	; 1
    2918:	50 e0       	ldi	r21, 0x00	; 0
    291a:	be 01       	movw	r22, r28
    291c:	6f 5f       	subi	r22, 0xFF	; 255
    291e:	7f 4f       	sbci	r23, 0xFF	; 255
    2920:	0e 94 43 14 	call	0x2886	; 0x2886 <_Z8USB_RecvhPvi>
    2924:	01 97       	sbiw	r24, 0x01	; 1
    2926:	19 f4       	brne	.+6      	; 0x292e <_Z8USB_Recvh+0x22>
    2928:	89 81       	ldd	r24, Y+1	; 0x01
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	02 c0       	rjmp	.+4      	; 0x2932 <_Z8USB_Recvh+0x26>
    292e:	8f ef       	ldi	r24, 0xFF	; 255
    2930:	9f ef       	ldi	r25, 0xFF	; 255
    2932:	0f 90       	pop	r0
    2934:	df 91       	pop	r29
    2936:	cf 91       	pop	r28
    2938:	08 95       	ret

0000293a <_Z13USB_SendSpaceh>:
    293a:	cf 93       	push	r28
    293c:	df 93       	push	r29
    293e:	1f 92       	push	r1
    2940:	cd b7       	in	r28, 0x3d	; 61
    2942:	de b7       	in	r29, 0x3e	; 62
    2944:	68 2f       	mov	r22, r24
    2946:	ce 01       	movw	r24, r28
    2948:	01 96       	adiw	r24, 0x01	; 1
    294a:	0e 94 29 14 	call	0x2852	; 0x2852 <_ZN6LockEPC1Eh>
    294e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2952:	89 2f       	mov	r24, r25
    2954:	80 72       	andi	r24, 0x20	; 32
    2956:	95 ff       	sbrs	r25, 5
    2958:	04 c0       	rjmp	.+8      	; 0x2962 <_Z13USB_SendSpaceh+0x28>
    295a:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    295e:	80 e4       	ldi	r24, 0x40	; 64
    2960:	89 1b       	sub	r24, r25
    2962:	99 81       	ldd	r25, Y+1	; 0x01
    2964:	9f bf       	out	0x3f, r25	; 63
    2966:	0f 90       	pop	r0
    2968:	df 91       	pop	r29
    296a:	cf 91       	pop	r28
    296c:	08 95       	ret

0000296e <_Z8USB_SendhPKvi>:
    296e:	5f 92       	push	r5
    2970:	6f 92       	push	r6
    2972:	7f 92       	push	r7
    2974:	8f 92       	push	r8
    2976:	9f 92       	push	r9
    2978:	af 92       	push	r10
    297a:	bf 92       	push	r11
    297c:	cf 92       	push	r12
    297e:	df 92       	push	r13
    2980:	ef 92       	push	r14
    2982:	ff 92       	push	r15
    2984:	0f 93       	push	r16
    2986:	1f 93       	push	r17
    2988:	cf 93       	push	r28
    298a:	df 93       	push	r29
    298c:	1f 92       	push	r1
    298e:	cd b7       	in	r28, 0x3d	; 61
    2990:	de b7       	in	r29, 0x3e	; 62
    2992:	98 2e       	mov	r9, r24
    2994:	6b 01       	movw	r12, r22
    2996:	b4 2e       	mov	r11, r20
    2998:	05 2f       	mov	r16, r21
    299a:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <_usbConfiguration>
    299e:	81 11       	cpse	r24, r1
    29a0:	03 c0       	rjmp	.+6      	; 0x29a8 <_Z8USB_SendhPKvi+0x3a>
    29a2:	8f ef       	ldi	r24, 0xFF	; 255
    29a4:	9f ef       	ldi	r25, 0xFF	; 255
    29a6:	77 c0       	rjmp	.+238    	; 0x2a96 <_Z8USB_SendhPKvi+0x128>
    29a8:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <_usbSuspendState>
    29ac:	80 ff       	sbrs	r24, 0
    29ae:	05 c0       	rjmp	.+10     	; 0x29ba <_Z8USB_SendhPKvi+0x4c>
    29b0:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    29b4:	82 60       	ori	r24, 0x02	; 2
    29b6:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    29ba:	eb 2c       	mov	r14, r11
    29bc:	f0 2e       	mov	r15, r16
    29be:	a1 2c       	mov	r10, r1
    29c0:	8a ef       	ldi	r24, 0xFA	; 250
    29c2:	88 2e       	mov	r8, r24
    29c4:	89 2d       	mov	r24, r9
    29c6:	80 72       	andi	r24, 0x20	; 32
    29c8:	68 2e       	mov	r6, r24
    29ca:	89 2d       	mov	r24, r9
    29cc:	80 74       	andi	r24, 0x40	; 64
    29ce:	58 2e       	mov	r5, r24
    29d0:	9a e3       	ldi	r25, 0x3A	; 58
    29d2:	79 2e       	mov	r7, r25
    29d4:	e1 14       	cp	r14, r1
    29d6:	f1 04       	cpc	r15, r1
    29d8:	19 f4       	brne	.+6      	; 0x29e0 <_Z8USB_SendhPKvi+0x72>
    29da:	aa 20       	and	r10, r10
    29dc:	09 f4       	brne	.+2      	; 0x29e0 <_Z8USB_SendhPKvi+0x72>
    29de:	55 c0       	rjmp	.+170    	; 0x2a8a <_Z8USB_SendhPKvi+0x11c>
    29e0:	89 2d       	mov	r24, r9
    29e2:	0e 94 9d 14 	call	0x293a	; 0x293a <_Z13USB_SendSpaceh>
    29e6:	18 2f       	mov	r17, r24
    29e8:	81 11       	cpse	r24, r1
    29ea:	0a c0       	rjmp	.+20     	; 0x2a00 <_Z8USB_SendhPKvi+0x92>
    29ec:	8a 94       	dec	r8
    29ee:	88 20       	and	r8, r8
    29f0:	c1 f2       	breq	.-80     	; 0x29a2 <_Z8USB_SendhPKvi+0x34>
    29f2:	61 e0       	ldi	r22, 0x01	; 1
    29f4:	70 e0       	ldi	r23, 0x00	; 0
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	0e 94 48 19 	call	0x3290	; 0x3290 <delay>
    29fe:	ea cf       	rjmp	.-44     	; 0x29d4 <_Z8USB_SendhPKvi+0x66>
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	e8 16       	cp	r14, r24
    2a04:	f9 06       	cpc	r15, r25
    2a06:	0c f4       	brge	.+2      	; 0x2a0a <_Z8USB_SendhPKvi+0x9c>
    2a08:	1e 2d       	mov	r17, r14
    2a0a:	69 2d       	mov	r22, r9
    2a0c:	ce 01       	movw	r24, r28
    2a0e:	01 96       	adiw	r24, 0x01	; 1
    2a10:	0e 94 29 14 	call	0x2852	; 0x2852 <_ZN6LockEPC1Eh>
    2a14:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a18:	85 ff       	sbrs	r24, 5
    2a1a:	34 c0       	rjmp	.+104    	; 0x2a84 <_Z8USB_SendhPKvi+0x116>
    2a1c:	81 2f       	mov	r24, r17
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	e8 1a       	sub	r14, r24
    2a22:	f9 0a       	sbc	r15, r25
    2a24:	66 20       	and	r6, r6
    2a26:	29 f0       	breq	.+10     	; 0x2a32 <_Z8USB_SendhPKvi+0xc4>
    2a28:	11 50       	subi	r17, 0x01	; 1
    2a2a:	a0 f0       	brcs	.+40     	; 0x2a54 <_Z8USB_SendhPKvi+0xe6>
    2a2c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2a30:	fb cf       	rjmp	.-10     	; 0x2a28 <_Z8USB_SendhPKvi+0xba>
    2a32:	f6 01       	movw	r30, r12
    2a34:	97 fe       	sbrs	r9, 7
    2a36:	0a c0       	rjmp	.+20     	; 0x2a4c <_Z8USB_SendhPKvi+0xde>
    2a38:	11 50       	subi	r17, 0x01	; 1
    2a3a:	50 f0       	brcs	.+20     	; 0x2a50 <_Z8USB_SendhPKvi+0xe2>
    2a3c:	24 91       	lpm	r18, Z
    2a3e:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2a42:	31 96       	adiw	r30, 0x01	; 1
    2a44:	f9 cf       	rjmp	.-14     	; 0x2a38 <_Z8USB_SendhPKvi+0xca>
    2a46:	21 91       	ld	r18, Z+
    2a48:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2a4c:	11 50       	subi	r17, 0x01	; 1
    2a4e:	d8 f7       	brcc	.-10     	; 0x2a46 <_Z8USB_SendhPKvi+0xd8>
    2a50:	c8 0e       	add	r12, r24
    2a52:	d9 1e       	adc	r13, r25
    2a54:	aa 20       	and	r10, r10
    2a56:	19 f0       	breq	.+6      	; 0x2a5e <_Z8USB_SendhPKvi+0xf0>
    2a58:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a5c:	0b c0       	rjmp	.+22     	; 0x2a74 <_Z8USB_SendhPKvi+0x106>
    2a5e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a62:	85 fd       	sbrc	r24, 5
    2a64:	09 c0       	rjmp	.+18     	; 0x2a78 <_Z8USB_SendhPKvi+0x10a>
    2a66:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a6a:	aa 24       	eor	r10, r10
    2a6c:	a3 94       	inc	r10
    2a6e:	e1 14       	cp	r14, r1
    2a70:	f1 04       	cpc	r15, r1
    2a72:	41 f0       	breq	.+16     	; 0x2a84 <_Z8USB_SendhPKvi+0x116>
    2a74:	a1 2c       	mov	r10, r1
    2a76:	06 c0       	rjmp	.+12     	; 0x2a84 <_Z8USB_SendhPKvi+0x116>
    2a78:	e1 14       	cp	r14, r1
    2a7a:	f1 04       	cpc	r15, r1
    2a7c:	19 f4       	brne	.+6      	; 0x2a84 <_Z8USB_SendhPKvi+0x116>
    2a7e:	51 10       	cpse	r5, r1
    2a80:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a84:	89 81       	ldd	r24, Y+1	; 0x01
    2a86:	8f bf       	out	0x3f, r24	; 63
    2a88:	a5 cf       	rjmp	.-182    	; 0x29d4 <_Z8USB_SendhPKvi+0x66>
    2a8a:	5d 98       	cbi	0x0b, 5	; 11
    2a8c:	84 e6       	ldi	r24, 0x64	; 100
    2a8e:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <TxLEDPulse>
    2a92:	8b 2d       	mov	r24, r11
    2a94:	90 2f       	mov	r25, r16
    2a96:	0f 90       	pop	r0
    2a98:	df 91       	pop	r29
    2a9a:	cf 91       	pop	r28
    2a9c:	1f 91       	pop	r17
    2a9e:	0f 91       	pop	r16
    2aa0:	ff 90       	pop	r15
    2aa2:	ef 90       	pop	r14
    2aa4:	df 90       	pop	r13
    2aa6:	cf 90       	pop	r12
    2aa8:	bf 90       	pop	r11
    2aaa:	af 90       	pop	r10
    2aac:	9f 90       	pop	r9
    2aae:	8f 90       	pop	r8
    2ab0:	7f 90       	pop	r7
    2ab2:	6f 90       	pop	r6
    2ab4:	5f 90       	pop	r5
    2ab6:	08 95       	ret

00002ab8 <_Z11InitControli>:
    2ab8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2abc:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <_ZL6_cmark+0x1>
    2ac0:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <_ZL6_cmark>
    2ac4:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <_ZL5_cend+0x1>
    2ac8:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <_ZL5_cend>
    2acc:	08 95       	ret

00002ace <_Z15USB_SendControlhPKvi>:
    2ace:	df 92       	push	r13
    2ad0:	ef 92       	push	r14
    2ad2:	ff 92       	push	r15
    2ad4:	0f 93       	push	r16
    2ad6:	1f 93       	push	r17
    2ad8:	cf 93       	push	r28
    2ada:	df 93       	push	r29
    2adc:	d8 2e       	mov	r13, r24
    2ade:	8a 01       	movw	r16, r20
    2ae0:	7b 01       	movw	r14, r22
    2ae2:	e4 0e       	add	r14, r20
    2ae4:	f5 1e       	adc	r15, r21
    2ae6:	eb 01       	movw	r28, r22
    2ae8:	ce 15       	cp	r28, r14
    2aea:	df 05       	cpc	r29, r15
    2aec:	71 f0       	breq	.+28     	; 0x2b0a <_Z15USB_SendControlhPKvi+0x3c>
    2aee:	d7 fe       	sbrs	r13, 7
    2af0:	03 c0       	rjmp	.+6      	; 0x2af8 <_Z15USB_SendControlhPKvi+0x2a>
    2af2:	fe 01       	movw	r30, r28
    2af4:	84 91       	lpm	r24, Z
    2af6:	01 c0       	rjmp	.+2      	; 0x2afa <_Z15USB_SendControlhPKvi+0x2c>
    2af8:	88 81       	ld	r24, Y
    2afa:	0e 94 8d 13 	call	0x271a	; 0x271a <_ZL11SendControlh>
    2afe:	21 96       	adiw	r28, 0x01	; 1
    2b00:	81 11       	cpse	r24, r1
    2b02:	f2 cf       	rjmp	.-28     	; 0x2ae8 <_Z15USB_SendControlhPKvi+0x1a>
    2b04:	8f ef       	ldi	r24, 0xFF	; 255
    2b06:	9f ef       	ldi	r25, 0xFF	; 255
    2b08:	01 c0       	rjmp	.+2      	; 0x2b0c <_Z15USB_SendControlhPKvi+0x3e>
    2b0a:	c8 01       	movw	r24, r16
    2b0c:	df 91       	pop	r29
    2b0e:	cf 91       	pop	r28
    2b10:	1f 91       	pop	r17
    2b12:	0f 91       	pop	r16
    2b14:	ff 90       	pop	r15
    2b16:	ef 90       	pop	r14
    2b18:	df 90       	pop	r13
    2b1a:	08 95       	ret

00002b1c <_Z15USB_RecvControlPvi>:
    2b1c:	af 92       	push	r10
    2b1e:	bf 92       	push	r11
    2b20:	df 92       	push	r13
    2b22:	ef 92       	push	r14
    2b24:	ff 92       	push	r15
    2b26:	0f 93       	push	r16
    2b28:	1f 93       	push	r17
    2b2a:	cf 93       	push	r28
    2b2c:	df 93       	push	r29
    2b2e:	5c 01       	movw	r10, r24
    2b30:	8b 01       	movw	r16, r22
    2b32:	eb 01       	movw	r28, r22
    2b34:	9b ef       	ldi	r25, 0xFB	; 251
    2b36:	d9 2e       	mov	r13, r25
    2b38:	20 97       	sbiw	r28, 0x00	; 0
    2b3a:	c1 f0       	breq	.+48     	; 0x2b6c <_Z15USB_RecvControlPvi+0x50>
    2b3c:	7e 01       	movw	r14, r28
    2b3e:	c1 34       	cpi	r28, 0x41	; 65
    2b40:	d1 05       	cpc	r29, r1
    2b42:	1c f0       	brlt	.+6      	; 0x2b4a <_Z15USB_RecvControlPvi+0x2e>
    2b44:	80 e4       	ldi	r24, 0x40	; 64
    2b46:	e8 2e       	mov	r14, r24
    2b48:	f1 2c       	mov	r15, r1
    2b4a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2b4e:	82 ff       	sbrs	r24, 2
    2b50:	fc cf       	rjmp	.-8      	; 0x2b4a <_Z15USB_RecvControlPvi+0x2e>
    2b52:	c8 01       	movw	r24, r16
    2b54:	8c 1b       	sub	r24, r28
    2b56:	9d 0b       	sbc	r25, r29
    2b58:	6e 2d       	mov	r22, r14
    2b5a:	8a 0d       	add	r24, r10
    2b5c:	9b 1d       	adc	r25, r11
    2b5e:	0e 94 80 13 	call	0x2700	; 0x2700 <_ZL4RecvPVhh>
    2b62:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2b66:	ce 19       	sub	r28, r14
    2b68:	df 09       	sbc	r29, r15
    2b6a:	e6 cf       	rjmp	.-52     	; 0x2b38 <_Z15USB_RecvControlPvi+0x1c>
    2b6c:	c8 01       	movw	r24, r16
    2b6e:	df 91       	pop	r29
    2b70:	cf 91       	pop	r28
    2b72:	1f 91       	pop	r17
    2b74:	0f 91       	pop	r16
    2b76:	ff 90       	pop	r15
    2b78:	ef 90       	pop	r14
    2b7a:	df 90       	pop	r13
    2b7c:	bf 90       	pop	r11
    2b7e:	af 90       	pop	r10
    2b80:	08 95       	ret

00002b82 <__vector_11>:
    2b82:	1f 92       	push	r1
    2b84:	0f 92       	push	r0
    2b86:	0f b6       	in	r0, 0x3f	; 63
    2b88:	0f 92       	push	r0
    2b8a:	11 24       	eor	r1, r1
    2b8c:	cf 92       	push	r12
    2b8e:	df 92       	push	r13
    2b90:	ef 92       	push	r14
    2b92:	ff 92       	push	r15
    2b94:	0f 93       	push	r16
    2b96:	1f 93       	push	r17
    2b98:	2f 93       	push	r18
    2b9a:	3f 93       	push	r19
    2b9c:	4f 93       	push	r20
    2b9e:	5f 93       	push	r21
    2ba0:	6f 93       	push	r22
    2ba2:	7f 93       	push	r23
    2ba4:	8f 93       	push	r24
    2ba6:	9f 93       	push	r25
    2ba8:	af 93       	push	r26
    2baa:	bf 93       	push	r27
    2bac:	ef 93       	push	r30
    2bae:	ff 93       	push	r31
    2bb0:	cf 93       	push	r28
    2bb2:	df 93       	push	r29
    2bb4:	cd b7       	in	r28, 0x3d	; 61
    2bb6:	de b7       	in	r29, 0x3e	; 62
    2bb8:	6c 97       	sbiw	r28, 0x1c	; 28
    2bba:	de bf       	out	0x3e, r29	; 62
    2bbc:	cd bf       	out	0x3d, r28	; 61
    2bbe:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2bc2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2bc6:	83 ff       	sbrs	r24, 3
    2bc8:	17 c1       	rjmp	.+558    	; 0x2df8 <__vector_11+0x276>
    2bca:	68 e0       	ldi	r22, 0x08	; 8
    2bcc:	ce 01       	movw	r24, r28
    2bce:	45 96       	adiw	r24, 0x15	; 21
    2bd0:	0e 94 80 13 	call	0x2700	; 0x2700 <_ZL4RecvPVhh>
    2bd4:	82 ef       	ldi	r24, 0xF2	; 242
    2bd6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2bda:	8d 89       	ldd	r24, Y+21	; 0x15
    2bdc:	87 ff       	sbrs	r24, 7
    2bde:	05 c0       	rjmp	.+10     	; 0x2bea <__vector_11+0x68>
    2be0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2be4:	90 ff       	sbrs	r25, 0
    2be6:	fc cf       	rjmp	.-8      	; 0x2be0 <__vector_11+0x5e>
    2be8:	03 c0       	rjmp	.+6      	; 0x2bf0 <__vector_11+0x6e>
    2bea:	9e ef       	ldi	r25, 0xFE	; 254
    2bec:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2bf0:	98 2f       	mov	r25, r24
    2bf2:	90 76       	andi	r25, 0x60	; 96
    2bf4:	09 f0       	breq	.+2      	; 0x2bf8 <__vector_11+0x76>
    2bf6:	d8 c0       	rjmp	.+432    	; 0x2da8 <__vector_11+0x226>
    2bf8:	9e 89       	ldd	r25, Y+22	; 0x16
    2bfa:	4f 89       	ldd	r20, Y+23	; 0x17
    2bfc:	58 8d       	ldd	r21, Y+24	; 0x18
    2bfe:	2f 89       	ldd	r18, Y+23	; 0x17
    2c00:	18 8d       	ldd	r17, Y+24	; 0x18
    2c02:	91 11       	cpse	r25, r1
    2c04:	0c c0       	rjmp	.+24     	; 0x2c1e <__vector_11+0x9c>
    2c06:	80 38       	cpi	r24, 0x80	; 128
    2c08:	29 f4       	brne	.+10     	; 0x2c14 <__vector_11+0x92>
    2c0a:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <_usbCurrentStatus>
    2c0e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2c12:	02 c0       	rjmp	.+4      	; 0x2c18 <__vector_11+0x96>
    2c14:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2c18:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2c1c:	e6 c0       	rjmp	.+460    	; 0x2dea <__vector_11+0x268>
    2c1e:	91 30       	cpi	r25, 0x01	; 1
    2c20:	51 f4       	brne	.+20     	; 0x2c36 <__vector_11+0xb4>
    2c22:	81 11       	cpse	r24, r1
    2c24:	e2 c0       	rjmp	.+452    	; 0x2dea <__vector_11+0x268>
    2c26:	41 30       	cpi	r20, 0x01	; 1
    2c28:	51 05       	cpc	r21, r1
    2c2a:	09 f0       	breq	.+2      	; 0x2c2e <__vector_11+0xac>
    2c2c:	de c0       	rjmp	.+444    	; 0x2dea <__vector_11+0x268>
    2c2e:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <_usbCurrentStatus>
    2c32:	8d 7f       	andi	r24, 0xFD	; 253
    2c34:	0b c0       	rjmp	.+22     	; 0x2c4c <__vector_11+0xca>
    2c36:	93 30       	cpi	r25, 0x03	; 3
    2c38:	61 f4       	brne	.+24     	; 0x2c52 <__vector_11+0xd0>
    2c3a:	81 11       	cpse	r24, r1
    2c3c:	d6 c0       	rjmp	.+428    	; 0x2dea <__vector_11+0x268>
    2c3e:	41 30       	cpi	r20, 0x01	; 1
    2c40:	51 05       	cpc	r21, r1
    2c42:	09 f0       	breq	.+2      	; 0x2c46 <__vector_11+0xc4>
    2c44:	d2 c0       	rjmp	.+420    	; 0x2dea <__vector_11+0x268>
    2c46:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <_usbCurrentStatus>
    2c4a:	82 60       	ori	r24, 0x02	; 2
    2c4c:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <_usbCurrentStatus>
    2c50:	cc c0       	rjmp	.+408    	; 0x2dea <__vector_11+0x268>
    2c52:	95 30       	cpi	r25, 0x05	; 5
    2c54:	49 f4       	brne	.+18     	; 0x2c68 <__vector_11+0xe6>
    2c56:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2c5a:	80 ff       	sbrs	r24, 0
    2c5c:	fc cf       	rjmp	.-8      	; 0x2c56 <__vector_11+0xd4>
    2c5e:	82 2f       	mov	r24, r18
    2c60:	80 68       	ori	r24, 0x80	; 128
    2c62:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    2c66:	c1 c0       	rjmp	.+386    	; 0x2dea <__vector_11+0x268>
    2c68:	96 30       	cpi	r25, 0x06	; 6
    2c6a:	09 f0       	breq	.+2      	; 0x2c6e <__vector_11+0xec>
    2c6c:	70 c0       	rjmp	.+224    	; 0x2d4e <__vector_11+0x1cc>
    2c6e:	eb 8c       	ldd	r14, Y+27	; 0x1b
    2c70:	fc 8c       	ldd	r15, Y+28	; 0x1c
    2c72:	12 30       	cpi	r17, 0x02	; 2
    2c74:	69 f5       	brne	.+90     	; 0x2cd0 <__vector_11+0x14e>
    2c76:	80 e0       	ldi	r24, 0x00	; 0
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <_Z11InitControli>
    2c7e:	0e 94 13 14 	call	0x2826	; 0x2826 <_ZL14SendInterfacesv>
    2c82:	99 e0       	ldi	r25, 0x09	; 9
    2c84:	9e 01       	movw	r18, r28
    2c86:	2f 5f       	subi	r18, 0xFF	; 255
    2c88:	3f 4f       	sbci	r19, 0xFF	; 255
    2c8a:	69 01       	movw	r12, r18
    2c8c:	f9 01       	movw	r30, r18
    2c8e:	29 2f       	mov	r18, r25
    2c90:	11 92       	st	Z+, r1
    2c92:	2a 95       	dec	r18
    2c94:	e9 f7       	brne	.-6      	; 0x2c90 <__vector_11+0x10e>
    2c96:	99 83       	std	Y+1, r25	; 0x01
    2c98:	1a 83       	std	Y+2, r17	; 0x02
    2c9a:	91 e0       	ldi	r25, 0x01	; 1
    2c9c:	9e 83       	std	Y+6, r25	; 0x06
    2c9e:	90 ea       	ldi	r25, 0xA0	; 160
    2ca0:	98 87       	std	Y+8, r25	; 0x08
    2ca2:	9a ef       	ldi	r25, 0xFA	; 250
    2ca4:	99 87       	std	Y+9, r25	; 0x09
    2ca6:	20 91 d8 02 	lds	r18, 0x02D8	; 0x8002d8 <_ZL6_cmark>
    2caa:	30 91 d9 02 	lds	r19, 0x02D9	; 0x8002d9 <_ZL6_cmark+0x1>
    2cae:	27 5f       	subi	r18, 0xF7	; 247
    2cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb2:	3c 83       	std	Y+4, r19	; 0x04
    2cb4:	2b 83       	std	Y+3, r18	; 0x03
    2cb6:	8d 83       	std	Y+5, r24	; 0x05
    2cb8:	c7 01       	movw	r24, r14
    2cba:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <_Z11InitControli>
    2cbe:	49 e0       	ldi	r20, 0x09	; 9
    2cc0:	50 e0       	ldi	r21, 0x00	; 0
    2cc2:	b6 01       	movw	r22, r12
    2cc4:	80 e0       	ldi	r24, 0x00	; 0
    2cc6:	0e 94 67 15 	call	0x2ace	; 0x2ace <_Z15USB_SendControlhPKvi>
    2cca:	0e 94 13 14 	call	0x2826	; 0x2826 <_ZL14SendInterfacesv>
    2cce:	8d c0       	rjmp	.+282    	; 0x2dea <__vector_11+0x268>
    2cd0:	c7 01       	movw	r24, r14
    2cd2:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <_Z11InitControli>
    2cd6:	0e 94 ba 1c 	call	0x3974	; 0x3974 <_Z12PluggableUSBv>
    2cda:	be 01       	movw	r22, r28
    2cdc:	6b 5e       	subi	r22, 0xEB	; 235
    2cde:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce0:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    2ce4:	00 97       	sbiw	r24, 0x00	; 0
    2ce6:	19 f0       	breq	.+6      	; 0x2cee <__vector_11+0x16c>
    2ce8:	0c f0       	brlt	.+2      	; 0x2cec <__vector_11+0x16a>
    2cea:	7f c0       	rjmp	.+254    	; 0x2dea <__vector_11+0x268>
    2cec:	82 c0       	rjmp	.+260    	; 0x2df2 <__vector_11+0x270>
    2cee:	11 30       	cpi	r17, 0x01	; 1
    2cf0:	09 f4       	brne	.+2      	; 0x2cf4 <__vector_11+0x172>
    2cf2:	70 c0       	rjmp	.+224    	; 0x2dd4 <__vector_11+0x252>
    2cf4:	13 30       	cpi	r17, 0x03	; 3
    2cf6:	09 f0       	breq	.+2      	; 0x2cfa <__vector_11+0x178>
    2cf8:	7c c0       	rjmp	.+248    	; 0x2df2 <__vector_11+0x270>
    2cfa:	8f 89       	ldd	r24, Y+23	; 0x17
    2cfc:	88 23       	and	r24, r24
    2cfe:	09 f4       	brne	.+2      	; 0x2d02 <__vector_11+0x180>
    2d00:	6c c0       	rjmp	.+216    	; 0x2dda <__vector_11+0x258>
    2d02:	82 30       	cpi	r24, 0x02	; 2
    2d04:	29 f4       	brne	.+10     	; 0x2d10 <__vector_11+0x18e>
    2d06:	40 e8       	ldi	r20, 0x80	; 128
    2d08:	60 e1       	ldi	r22, 0x10	; 16
    2d0a:	86 e0       	ldi	r24, 0x06	; 6
    2d0c:	91 e0       	ldi	r25, 0x01	; 1
    2d0e:	06 c0       	rjmp	.+12     	; 0x2d1c <__vector_11+0x19a>
    2d10:	81 30       	cpi	r24, 0x01	; 1
    2d12:	39 f4       	brne	.+14     	; 0x2d22 <__vector_11+0x1a0>
    2d14:	40 e8       	ldi	r20, 0x80	; 128
    2d16:	6b e0       	ldi	r22, 0x0B	; 11
    2d18:	8a ef       	ldi	r24, 0xFA	; 250
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	0e 94 bb 13 	call	0x2776	; 0x2776 <_ZL24USB_SendStringDescriptorPKhhh>
    2d20:	56 c0       	rjmp	.+172    	; 0x2dce <__vector_11+0x24c>
    2d22:	83 30       	cpi	r24, 0x03	; 3
    2d24:	09 f0       	breq	.+2      	; 0x2d28 <__vector_11+0x1a6>
    2d26:	65 c0       	rjmp	.+202    	; 0x2df2 <__vector_11+0x270>
    2d28:	0e 94 ba 1c 	call	0x3974	; 0x3974 <_Z12PluggableUSBv>
    2d2c:	8e 01       	movw	r16, r28
    2d2e:	0f 5f       	subi	r16, 0xFF	; 255
    2d30:	1f 4f       	sbci	r17, 0xFF	; 255
    2d32:	b8 01       	movw	r22, r16
    2d34:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <_ZN13PluggableUSB_12getShortNameEPc>
    2d38:	f8 01       	movw	r30, r16
    2d3a:	01 90       	ld	r0, Z+
    2d3c:	00 20       	and	r0, r0
    2d3e:	e9 f7       	brne	.-6      	; 0x2d3a <__vector_11+0x1b8>
    2d40:	31 97       	sbiw	r30, 0x01	; 1
    2d42:	bf 01       	movw	r22, r30
    2d44:	60 1b       	sub	r22, r16
    2d46:	71 0b       	sbc	r23, r17
    2d48:	40 e0       	ldi	r20, 0x00	; 0
    2d4a:	c8 01       	movw	r24, r16
    2d4c:	e7 cf       	rjmp	.-50     	; 0x2d1c <__vector_11+0x19a>
    2d4e:	97 30       	cpi	r25, 0x07	; 7
    2d50:	09 f4       	brne	.+2      	; 0x2d54 <__vector_11+0x1d2>
    2d52:	4f c0       	rjmp	.+158    	; 0x2df2 <__vector_11+0x270>
    2d54:	98 30       	cpi	r25, 0x08	; 8
    2d56:	21 f4       	brne	.+8      	; 0x2d60 <__vector_11+0x1de>
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2d5e:	45 c0       	rjmp	.+138    	; 0x2dea <__vector_11+0x268>
    2d60:	99 30       	cpi	r25, 0x09	; 9
    2d62:	09 f0       	breq	.+2      	; 0x2d66 <__vector_11+0x1e4>
    2d64:	42 c0       	rjmp	.+132    	; 0x2dea <__vector_11+0x268>
    2d66:	83 70       	andi	r24, 0x03	; 3
    2d68:	09 f0       	breq	.+2      	; 0x2d6c <__vector_11+0x1ea>
    2d6a:	43 c0       	rjmp	.+134    	; 0x2df2 <__vector_11+0x270>
    2d6c:	ef e0       	ldi	r30, 0x0F	; 15
    2d6e:	f1 e0       	ldi	r31, 0x01	; 1
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	31 e0       	ldi	r19, 0x01	; 1
    2d74:	96 e3       	ldi	r25, 0x36	; 54
    2d76:	20 81       	ld	r18, Z
    2d78:	21 11       	cpse	r18, r1
    2d7a:	09 c0       	rjmp	.+18     	; 0x2d8e <__vector_11+0x20c>
    2d7c:	8e e7       	ldi	r24, 0x7E	; 126
    2d7e:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    2d82:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    2d86:	8f 89       	ldd	r24, Y+23	; 0x17
    2d88:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <_usbConfiguration>
    2d8c:	2e c0       	rjmp	.+92     	; 0x2dea <__vector_11+0x268>
    2d8e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2d92:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2d96:	21 91       	ld	r18, Z+
    2d98:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2d9c:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    2da0:	8f 5f       	subi	r24, 0xFF	; 255
    2da2:	87 30       	cpi	r24, 0x07	; 7
    2da4:	41 f7       	brne	.-48     	; 0x2d76 <__vector_11+0x1f4>
    2da6:	ea cf       	rjmp	.-44     	; 0x2d7c <__vector_11+0x1fa>
    2da8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2daa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dac:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <_Z11InitControli>
    2db0:	89 8d       	ldd	r24, Y+25	; 0x19
    2db2:	81 11       	cpse	r24, r1
    2db4:	05 c0       	rjmp	.+10     	; 0x2dc0 <__vector_11+0x23e>
    2db6:	ce 01       	movw	r24, r28
    2db8:	45 96       	adiw	r24, 0x15	; 21
    2dba:	0e 94 91 1b 	call	0x3722	; 0x3722 <_Z9CDC_SetupR8USBSetup>
    2dbe:	07 c0       	rjmp	.+14     	; 0x2dce <__vector_11+0x24c>
    2dc0:	0e 94 ba 1c 	call	0x3974	; 0x3974 <_Z12PluggableUSBv>
    2dc4:	be 01       	movw	r22, r28
    2dc6:	6b 5e       	subi	r22, 0xEB	; 235
    2dc8:	7f 4f       	sbci	r23, 0xFF	; 255
    2dca:	0e 94 9c 1c 	call	0x3938	; 0x3938 <_ZN13PluggableUSB_5setupER8USBSetup>
    2dce:	88 23       	and	r24, r24
    2dd0:	81 f0       	breq	.+32     	; 0x2df2 <__vector_11+0x270>
    2dd2:	0b c0       	rjmp	.+22     	; 0x2dea <__vector_11+0x268>
    2dd4:	68 ee       	ldi	r22, 0xE8	; 232
    2dd6:	70 e0       	ldi	r23, 0x00	; 0
    2dd8:	02 c0       	rjmp	.+4      	; 0x2dde <__vector_11+0x25c>
    2dda:	67 e1       	ldi	r22, 0x17	; 23
    2ddc:	71 e0       	ldi	r23, 0x01	; 1
    2dde:	fb 01       	movw	r30, r22
    2de0:	44 91       	lpm	r20, Z
    2de2:	50 e0       	ldi	r21, 0x00	; 0
    2de4:	80 e8       	ldi	r24, 0x80	; 128
    2de6:	0e 94 67 15 	call	0x2ace	; 0x2ace <_Z15USB_SendControlhPKvi>
    2dea:	8e ef       	ldi	r24, 0xFE	; 254
    2dec:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2df0:	03 c0       	rjmp	.+6      	; 0x2df8 <__vector_11+0x276>
    2df2:	81 e2       	ldi	r24, 0x21	; 33
    2df4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2df8:	6c 96       	adiw	r28, 0x1c	; 28
    2dfa:	0f b6       	in	r0, 0x3f	; 63
    2dfc:	f8 94       	cli
    2dfe:	de bf       	out	0x3e, r29	; 62
    2e00:	0f be       	out	0x3f, r0	; 63
    2e02:	cd bf       	out	0x3d, r28	; 61
    2e04:	df 91       	pop	r29
    2e06:	cf 91       	pop	r28
    2e08:	ff 91       	pop	r31
    2e0a:	ef 91       	pop	r30
    2e0c:	bf 91       	pop	r27
    2e0e:	af 91       	pop	r26
    2e10:	9f 91       	pop	r25
    2e12:	8f 91       	pop	r24
    2e14:	7f 91       	pop	r23
    2e16:	6f 91       	pop	r22
    2e18:	5f 91       	pop	r21
    2e1a:	4f 91       	pop	r20
    2e1c:	3f 91       	pop	r19
    2e1e:	2f 91       	pop	r18
    2e20:	1f 91       	pop	r17
    2e22:	0f 91       	pop	r16
    2e24:	ff 90       	pop	r15
    2e26:	ef 90       	pop	r14
    2e28:	df 90       	pop	r13
    2e2a:	cf 90       	pop	r12
    2e2c:	0f 90       	pop	r0
    2e2e:	0f be       	out	0x3f, r0	; 63
    2e30:	0f 90       	pop	r0
    2e32:	1f 90       	pop	r1
    2e34:	18 95       	reti

00002e36 <_Z9USB_Flushh>:
    2e36:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2e3a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2e3e:	88 23       	and	r24, r24
    2e40:	19 f0       	breq	.+6      	; 0x2e48 <_Z9USB_Flushh+0x12>
    2e42:	8a e3       	ldi	r24, 0x3A	; 58
    2e44:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2e48:	08 95       	ret

00002e4a <__vector_10>:
    2e4a:	1f 92       	push	r1
    2e4c:	0f 92       	push	r0
    2e4e:	0f b6       	in	r0, 0x3f	; 63
    2e50:	0f 92       	push	r0
    2e52:	11 24       	eor	r1, r1
    2e54:	2f 93       	push	r18
    2e56:	3f 93       	push	r19
    2e58:	4f 93       	push	r20
    2e5a:	5f 93       	push	r21
    2e5c:	6f 93       	push	r22
    2e5e:	7f 93       	push	r23
    2e60:	8f 93       	push	r24
    2e62:	9f 93       	push	r25
    2e64:	af 93       	push	r26
    2e66:	bf 93       	push	r27
    2e68:	cf 93       	push	r28
    2e6a:	ef 93       	push	r30
    2e6c:	ff 93       	push	r31
    2e6e:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2e72:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2e76:	83 7f       	andi	r24, 0xF3	; 243
    2e78:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2e7c:	c3 ff       	sbrs	r28, 3
    2e7e:	0f c0       	rjmp	.+30     	; 0x2e9e <__vector_10+0x54>
    2e80:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2e8a:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2e8e:	82 e3       	ldi	r24, 0x32	; 50
    2e90:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    2e94:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <_usbConfiguration>
    2e98:	88 e0       	ldi	r24, 0x08	; 8
    2e9a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    2e9e:	c2 ff       	sbrs	r28, 2
    2ea0:	19 c0       	rjmp	.+50     	; 0x2ed4 <__vector_10+0x8a>
    2ea2:	83 e0       	ldi	r24, 0x03	; 3
    2ea4:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <_Z9USB_Flushh>
    2ea8:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <TxLEDPulse>
    2eac:	88 23       	and	r24, r24
    2eae:	39 f0       	breq	.+14     	; 0x2ebe <__vector_10+0x74>
    2eb0:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <TxLEDPulse>
    2eb4:	81 50       	subi	r24, 0x01	; 1
    2eb6:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <TxLEDPulse>
    2eba:	88 23       	and	r24, r24
    2ebc:	89 f1       	breq	.+98     	; 0x2f20 <__vector_10+0xd6>
    2ebe:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <RxLEDPulse>
    2ec2:	88 23       	and	r24, r24
    2ec4:	39 f0       	breq	.+14     	; 0x2ed4 <__vector_10+0x8a>
    2ec6:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <RxLEDPulse>
    2eca:	81 50       	subi	r24, 0x01	; 1
    2ecc:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <RxLEDPulse>
    2ed0:	88 23       	and	r24, r24
    2ed2:	41 f1       	breq	.+80     	; 0x2f24 <__vector_10+0xda>
    2ed4:	c4 ff       	sbrs	r28, 4
    2ed6:	10 c0       	rjmp	.+32     	; 0x2ef8 <__vector_10+0xae>
    2ed8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2edc:	8e 7e       	andi	r24, 0xEE	; 238
    2ede:	81 60       	ori	r24, 0x01	; 1
    2ee0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2ee4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2ee8:	8f 7e       	andi	r24, 0xEF	; 239
    2eea:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2eee:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <_usbSuspendState>
    2ef2:	8e 7e       	andi	r24, 0xEE	; 238
    2ef4:	80 61       	ori	r24, 0x10	; 16
    2ef6:	11 c0       	rjmp	.+34     	; 0x2f1a <__vector_10+0xd0>
    2ef8:	c0 ff       	sbrs	r28, 0
    2efa:	16 c0       	rjmp	.+44     	; 0x2f28 <__vector_10+0xde>
    2efc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2f00:	8e 7e       	andi	r24, 0xEE	; 238
    2f02:	80 61       	ori	r24, 0x10	; 16
    2f04:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2f08:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2f0c:	8e 7e       	andi	r24, 0xEE	; 238
    2f0e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2f12:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <_usbSuspendState>
    2f16:	8e 7e       	andi	r24, 0xEE	; 238
    2f18:	81 60       	ori	r24, 0x01	; 1
    2f1a:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <_usbSuspendState>
    2f1e:	04 c0       	rjmp	.+8      	; 0x2f28 <__vector_10+0xde>
    2f20:	5d 9a       	sbi	0x0b, 5	; 11
    2f22:	cd cf       	rjmp	.-102    	; 0x2ebe <__vector_10+0x74>
    2f24:	28 9a       	sbi	0x05, 0	; 5
    2f26:	d6 cf       	rjmp	.-84     	; 0x2ed4 <__vector_10+0x8a>
    2f28:	ff 91       	pop	r31
    2f2a:	ef 91       	pop	r30
    2f2c:	cf 91       	pop	r28
    2f2e:	bf 91       	pop	r27
    2f30:	af 91       	pop	r26
    2f32:	9f 91       	pop	r25
    2f34:	8f 91       	pop	r24
    2f36:	7f 91       	pop	r23
    2f38:	6f 91       	pop	r22
    2f3a:	5f 91       	pop	r21
    2f3c:	4f 91       	pop	r20
    2f3e:	3f 91       	pop	r19
    2f40:	2f 91       	pop	r18
    2f42:	0f 90       	pop	r0
    2f44:	0f be       	out	0x3f, r0	; 63
    2f46:	0f 90       	pop	r0
    2f48:	1f 90       	pop	r1
    2f4a:	18 95       	reti

00002f4c <_ZN10USBDevice_6attachEv>:
{
}

void USBDevice_::attach()
{
	_usbConfiguration = 0;
    2f4c:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <_usbConfiguration>
	_usbCurrentStatus = 0;
    2f50:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <_usbCurrentStatus>
	_usbSuspendState = 0;
    2f54:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <_usbSuspendState>
	USB_ClockEnable();
    2f58:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZL15USB_ClockEnablev>

	UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear already pending WAKEUP / SUSPEND requests
    2f5c:	e1 ee       	ldi	r30, 0xE1	; 225
    2f5e:	f0 e0       	ldi	r31, 0x00	; 0
    2f60:	80 81       	ld	r24, Z
    2f62:	8e 7e       	andi	r24, 0xEE	; 238
    2f64:	80 83       	st	Z, r24
	UDIEN = (1<<EORSTE) | (1<<SOFE) | (1<<SUSPE);	// Enable interrupts for EOR (End of Reset), SOF (start of frame) and SUSPEND
    2f66:	8d e0       	ldi	r24, 0x0D	; 13
    2f68:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	
	TX_RX_LED_INIT;
    2f6c:	55 9a       	sbi	0x0a, 5	; 10
    2f6e:	20 9a       	sbi	0x04, 0	; 4
    2f70:	08 95       	ret

00002f72 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    2f72:	08 95       	ret

00002f74 <attachInterrupt>:
    2f74:	85 30       	cpi	r24, 0x05	; 5
    2f76:	08 f0       	brcs	.+2      	; 0x2f7a <attachInterrupt+0x6>
    2f78:	4c c0       	rjmp	.+152    	; 0x3012 <attachInterrupt+0x9e>
    2f7a:	e8 2f       	mov	r30, r24
    2f7c:	f0 e0       	ldi	r31, 0x00	; 0
    2f7e:	ee 0f       	add	r30, r30
    2f80:	ff 1f       	adc	r31, r31
    2f82:	eb 5e       	subi	r30, 0xEB	; 235
    2f84:	fe 4f       	sbci	r31, 0xFE	; 254
    2f86:	71 83       	std	Z+1, r23	; 0x01
    2f88:	60 83       	st	Z, r22
    2f8a:	82 30       	cpi	r24, 0x02	; 2
    2f8c:	e1 f0       	breq	.+56     	; 0x2fc6 <attachInterrupt+0x52>
    2f8e:	18 f4       	brcc	.+6      	; 0x2f96 <attachInterrupt+0x22>
    2f90:	81 30       	cpi	r24, 0x01	; 1
    2f92:	69 f0       	breq	.+26     	; 0x2fae <attachInterrupt+0x3a>
    2f94:	04 c0       	rjmp	.+8      	; 0x2f9e <attachInterrupt+0x2a>
    2f96:	83 30       	cpi	r24, 0x03	; 3
    2f98:	19 f1       	breq	.+70     	; 0x2fe0 <attachInterrupt+0x6c>
    2f9a:	84 30       	cpi	r24, 0x04	; 4
    2f9c:	71 f1       	breq	.+92     	; 0x2ffa <attachInterrupt+0x86>
    2f9e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    2fa2:	8c 7f       	andi	r24, 0xFC	; 252
    2fa4:	48 2b       	or	r20, r24
    2fa6:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    2faa:	e8 9a       	sbi	0x1d, 0	; 29
    2fac:	08 95       	ret
    2fae:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    2fb2:	83 7f       	andi	r24, 0xF3	; 243
    2fb4:	44 0f       	add	r20, r20
    2fb6:	55 1f       	adc	r21, r21
    2fb8:	44 0f       	add	r20, r20
    2fba:	55 1f       	adc	r21, r21
    2fbc:	48 2b       	or	r20, r24
    2fbe:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    2fc2:	e9 9a       	sbi	0x1d, 1	; 29
    2fc4:	08 95       	ret
    2fc6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    2fca:	8f 7c       	andi	r24, 0xCF	; 207
    2fcc:	34 e0       	ldi	r19, 0x04	; 4
    2fce:	44 0f       	add	r20, r20
    2fd0:	55 1f       	adc	r21, r21
    2fd2:	3a 95       	dec	r19
    2fd4:	e1 f7       	brne	.-8      	; 0x2fce <attachInterrupt+0x5a>
    2fd6:	48 2b       	or	r20, r24
    2fd8:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    2fdc:	ea 9a       	sbi	0x1d, 2	; 29
    2fde:	08 95       	ret
    2fe0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    2fe4:	8f 73       	andi	r24, 0x3F	; 63
    2fe6:	26 e0       	ldi	r18, 0x06	; 6
    2fe8:	44 0f       	add	r20, r20
    2fea:	55 1f       	adc	r21, r21
    2fec:	2a 95       	dec	r18
    2fee:	e1 f7       	brne	.-8      	; 0x2fe8 <attachInterrupt+0x74>
    2ff0:	48 2b       	or	r20, r24
    2ff2:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    2ff6:	eb 9a       	sbi	0x1d, 3	; 29
    2ff8:	08 95       	ret
    2ffa:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
    2ffe:	8f 7c       	andi	r24, 0xCF	; 207
    3000:	94 e0       	ldi	r25, 0x04	; 4
    3002:	44 0f       	add	r20, r20
    3004:	55 1f       	adc	r21, r21
    3006:	9a 95       	dec	r25
    3008:	e1 f7       	brne	.-8      	; 0x3002 <attachInterrupt+0x8e>
    300a:	48 2b       	or	r20, r24
    300c:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
    3010:	ee 9a       	sbi	0x1d, 6	; 29
    3012:	08 95       	ret

00003014 <__vector_1>:
    intFunc[interrupt](); \
  }

#if defined(__AVR_ATmega32U4__)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    3014:	1f 92       	push	r1
    3016:	0f 92       	push	r0
    3018:	0f b6       	in	r0, 0x3f	; 63
    301a:	0f 92       	push	r0
    301c:	11 24       	eor	r1, r1
    301e:	2f 93       	push	r18
    3020:	3f 93       	push	r19
    3022:	4f 93       	push	r20
    3024:	5f 93       	push	r21
    3026:	6f 93       	push	r22
    3028:	7f 93       	push	r23
    302a:	8f 93       	push	r24
    302c:	9f 93       	push	r25
    302e:	af 93       	push	r26
    3030:	bf 93       	push	r27
    3032:	ef 93       	push	r30
    3034:	ff 93       	push	r31
    3036:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <intFunc>
    303a:	f0 91 16 01 	lds	r31, 0x0116	; 0x800116 <intFunc+0x1>
    303e:	09 95       	icall
    3040:	ff 91       	pop	r31
    3042:	ef 91       	pop	r30
    3044:	bf 91       	pop	r27
    3046:	af 91       	pop	r26
    3048:	9f 91       	pop	r25
    304a:	8f 91       	pop	r24
    304c:	7f 91       	pop	r23
    304e:	6f 91       	pop	r22
    3050:	5f 91       	pop	r21
    3052:	4f 91       	pop	r20
    3054:	3f 91       	pop	r19
    3056:	2f 91       	pop	r18
    3058:	0f 90       	pop	r0
    305a:	0f be       	out	0x3f, r0	; 63
    305c:	0f 90       	pop	r0
    305e:	1f 90       	pop	r1
    3060:	18 95       	reti

00003062 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    3062:	1f 92       	push	r1
    3064:	0f 92       	push	r0
    3066:	0f b6       	in	r0, 0x3f	; 63
    3068:	0f 92       	push	r0
    306a:	11 24       	eor	r1, r1
    306c:	2f 93       	push	r18
    306e:	3f 93       	push	r19
    3070:	4f 93       	push	r20
    3072:	5f 93       	push	r21
    3074:	6f 93       	push	r22
    3076:	7f 93       	push	r23
    3078:	8f 93       	push	r24
    307a:	9f 93       	push	r25
    307c:	af 93       	push	r26
    307e:	bf 93       	push	r27
    3080:	ef 93       	push	r30
    3082:	ff 93       	push	r31
    3084:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <intFunc+0x2>
    3088:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <intFunc+0x3>
    308c:	09 95       	icall
    308e:	ff 91       	pop	r31
    3090:	ef 91       	pop	r30
    3092:	bf 91       	pop	r27
    3094:	af 91       	pop	r26
    3096:	9f 91       	pop	r25
    3098:	8f 91       	pop	r24
    309a:	7f 91       	pop	r23
    309c:	6f 91       	pop	r22
    309e:	5f 91       	pop	r21
    30a0:	4f 91       	pop	r20
    30a2:	3f 91       	pop	r19
    30a4:	2f 91       	pop	r18
    30a6:	0f 90       	pop	r0
    30a8:	0f be       	out	0x3f, r0	; 63
    30aa:	0f 90       	pop	r0
    30ac:	1f 90       	pop	r1
    30ae:	18 95       	reti

000030b0 <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_2)
    30b0:	1f 92       	push	r1
    30b2:	0f 92       	push	r0
    30b4:	0f b6       	in	r0, 0x3f	; 63
    30b6:	0f 92       	push	r0
    30b8:	11 24       	eor	r1, r1
    30ba:	2f 93       	push	r18
    30bc:	3f 93       	push	r19
    30be:	4f 93       	push	r20
    30c0:	5f 93       	push	r21
    30c2:	6f 93       	push	r22
    30c4:	7f 93       	push	r23
    30c6:	8f 93       	push	r24
    30c8:	9f 93       	push	r25
    30ca:	af 93       	push	r26
    30cc:	bf 93       	push	r27
    30ce:	ef 93       	push	r30
    30d0:	ff 93       	push	r31
    30d2:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <intFunc+0x4>
    30d6:	f0 91 1a 01 	lds	r31, 0x011A	; 0x80011a <intFunc+0x5>
    30da:	09 95       	icall
    30dc:	ff 91       	pop	r31
    30de:	ef 91       	pop	r30
    30e0:	bf 91       	pop	r27
    30e2:	af 91       	pop	r26
    30e4:	9f 91       	pop	r25
    30e6:	8f 91       	pop	r24
    30e8:	7f 91       	pop	r23
    30ea:	6f 91       	pop	r22
    30ec:	5f 91       	pop	r21
    30ee:	4f 91       	pop	r20
    30f0:	3f 91       	pop	r19
    30f2:	2f 91       	pop	r18
    30f4:	0f 90       	pop	r0
    30f6:	0f be       	out	0x3f, r0	; 63
    30f8:	0f 90       	pop	r0
    30fa:	1f 90       	pop	r1
    30fc:	18 95       	reti

000030fe <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
    30fe:	1f 92       	push	r1
    3100:	0f 92       	push	r0
    3102:	0f b6       	in	r0, 0x3f	; 63
    3104:	0f 92       	push	r0
    3106:	11 24       	eor	r1, r1
    3108:	2f 93       	push	r18
    310a:	3f 93       	push	r19
    310c:	4f 93       	push	r20
    310e:	5f 93       	push	r21
    3110:	6f 93       	push	r22
    3112:	7f 93       	push	r23
    3114:	8f 93       	push	r24
    3116:	9f 93       	push	r25
    3118:	af 93       	push	r26
    311a:	bf 93       	push	r27
    311c:	ef 93       	push	r30
    311e:	ff 93       	push	r31
    3120:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <intFunc+0x6>
    3124:	f0 91 1c 01 	lds	r31, 0x011C	; 0x80011c <intFunc+0x7>
    3128:	09 95       	icall
    312a:	ff 91       	pop	r31
    312c:	ef 91       	pop	r30
    312e:	bf 91       	pop	r27
    3130:	af 91       	pop	r26
    3132:	9f 91       	pop	r25
    3134:	8f 91       	pop	r24
    3136:	7f 91       	pop	r23
    3138:	6f 91       	pop	r22
    313a:	5f 91       	pop	r21
    313c:	4f 91       	pop	r20
    313e:	3f 91       	pop	r19
    3140:	2f 91       	pop	r18
    3142:	0f 90       	pop	r0
    3144:	0f be       	out	0x3f, r0	; 63
    3146:	0f 90       	pop	r0
    3148:	1f 90       	pop	r1
    314a:	18 95       	reti

0000314c <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_4)
    314c:	1f 92       	push	r1
    314e:	0f 92       	push	r0
    3150:	0f b6       	in	r0, 0x3f	; 63
    3152:	0f 92       	push	r0
    3154:	11 24       	eor	r1, r1
    3156:	2f 93       	push	r18
    3158:	3f 93       	push	r19
    315a:	4f 93       	push	r20
    315c:	5f 93       	push	r21
    315e:	6f 93       	push	r22
    3160:	7f 93       	push	r23
    3162:	8f 93       	push	r24
    3164:	9f 93       	push	r25
    3166:	af 93       	push	r26
    3168:	bf 93       	push	r27
    316a:	ef 93       	push	r30
    316c:	ff 93       	push	r31
    316e:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <intFunc+0x8>
    3172:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <intFunc+0x9>
    3176:	09 95       	icall
    3178:	ff 91       	pop	r31
    317a:	ef 91       	pop	r30
    317c:	bf 91       	pop	r27
    317e:	af 91       	pop	r26
    3180:	9f 91       	pop	r25
    3182:	8f 91       	pop	r24
    3184:	7f 91       	pop	r23
    3186:	6f 91       	pop	r22
    3188:	5f 91       	pop	r21
    318a:	4f 91       	pop	r20
    318c:	3f 91       	pop	r19
    318e:	2f 91       	pop	r18
    3190:	0f 90       	pop	r0
    3192:	0f be       	out	0x3f, r0	; 63
    3194:	0f 90       	pop	r0
    3196:	1f 90       	pop	r1
    3198:	18 95       	reti

0000319a <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    319a:	1f 92       	push	r1
    319c:	0f 92       	push	r0
    319e:	0f b6       	in	r0, 0x3f	; 63
    31a0:	0f 92       	push	r0
    31a2:	11 24       	eor	r1, r1
    31a4:	2f 93       	push	r18
    31a6:	3f 93       	push	r19
    31a8:	8f 93       	push	r24
    31aa:	9f 93       	push	r25
    31ac:	af 93       	push	r26
    31ae:	bf 93       	push	r27
    31b0:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <timer0_millis>
    31b4:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <timer0_millis+0x1>
    31b8:	a0 91 e2 02 	lds	r26, 0x02E2	; 0x8002e2 <timer0_millis+0x2>
    31bc:	b0 91 e3 02 	lds	r27, 0x02E3	; 0x8002e3 <timer0_millis+0x3>
    31c0:	30 91 df 02 	lds	r19, 0x02DF	; 0x8002df <timer0_fract>
    31c4:	23 e0       	ldi	r18, 0x03	; 3
    31c6:	23 0f       	add	r18, r19
    31c8:	2d 37       	cpi	r18, 0x7D	; 125
    31ca:	20 f4       	brcc	.+8      	; 0x31d4 <__vector_23+0x3a>
    31cc:	01 96       	adiw	r24, 0x01	; 1
    31ce:	a1 1d       	adc	r26, r1
    31d0:	b1 1d       	adc	r27, r1
    31d2:	05 c0       	rjmp	.+10     	; 0x31de <__vector_23+0x44>
    31d4:	26 e8       	ldi	r18, 0x86	; 134
    31d6:	23 0f       	add	r18, r19
    31d8:	02 96       	adiw	r24, 0x02	; 2
    31da:	a1 1d       	adc	r26, r1
    31dc:	b1 1d       	adc	r27, r1
    31de:	20 93 df 02 	sts	0x02DF, r18	; 0x8002df <timer0_fract>
    31e2:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <timer0_millis>
    31e6:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <timer0_millis+0x1>
    31ea:	a0 93 e2 02 	sts	0x02E2, r26	; 0x8002e2 <timer0_millis+0x2>
    31ee:	b0 93 e3 02 	sts	0x02E3, r27	; 0x8002e3 <timer0_millis+0x3>
    31f2:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <timer0_overflow_count>
    31f6:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <timer0_overflow_count+0x1>
    31fa:	a0 91 e6 02 	lds	r26, 0x02E6	; 0x8002e6 <timer0_overflow_count+0x2>
    31fe:	b0 91 e7 02 	lds	r27, 0x02E7	; 0x8002e7 <timer0_overflow_count+0x3>
    3202:	01 96       	adiw	r24, 0x01	; 1
    3204:	a1 1d       	adc	r26, r1
    3206:	b1 1d       	adc	r27, r1
    3208:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <timer0_overflow_count>
    320c:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <timer0_overflow_count+0x1>
    3210:	a0 93 e6 02 	sts	0x02E6, r26	; 0x8002e6 <timer0_overflow_count+0x2>
    3214:	b0 93 e7 02 	sts	0x02E7, r27	; 0x8002e7 <timer0_overflow_count+0x3>
    3218:	bf 91       	pop	r27
    321a:	af 91       	pop	r26
    321c:	9f 91       	pop	r25
    321e:	8f 91       	pop	r24
    3220:	3f 91       	pop	r19
    3222:	2f 91       	pop	r18
    3224:	0f 90       	pop	r0
    3226:	0f be       	out	0x3f, r0	; 63
    3228:	0f 90       	pop	r0
    322a:	1f 90       	pop	r1
    322c:	18 95       	reti

0000322e <millis>:
    322e:	2f b7       	in	r18, 0x3f	; 63
    3230:	f8 94       	cli
    3232:	60 91 e0 02 	lds	r22, 0x02E0	; 0x8002e0 <timer0_millis>
    3236:	70 91 e1 02 	lds	r23, 0x02E1	; 0x8002e1 <timer0_millis+0x1>
    323a:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <timer0_millis+0x2>
    323e:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <timer0_millis+0x3>
    3242:	2f bf       	out	0x3f, r18	; 63
    3244:	08 95       	ret

00003246 <micros>:
    3246:	3f b7       	in	r19, 0x3f	; 63
    3248:	f8 94       	cli
    324a:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <timer0_overflow_count>
    324e:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <timer0_overflow_count+0x1>
    3252:	a0 91 e6 02 	lds	r26, 0x02E6	; 0x8002e6 <timer0_overflow_count+0x2>
    3256:	b0 91 e7 02 	lds	r27, 0x02E7	; 0x8002e7 <timer0_overflow_count+0x3>
    325a:	26 b5       	in	r18, 0x26	; 38
    325c:	a8 9b       	sbis	0x15, 0	; 21
    325e:	05 c0       	rjmp	.+10     	; 0x326a <micros+0x24>
    3260:	2f 3f       	cpi	r18, 0xFF	; 255
    3262:	19 f0       	breq	.+6      	; 0x326a <micros+0x24>
    3264:	01 96       	adiw	r24, 0x01	; 1
    3266:	a1 1d       	adc	r26, r1
    3268:	b1 1d       	adc	r27, r1
    326a:	3f bf       	out	0x3f, r19	; 63
    326c:	ba 2f       	mov	r27, r26
    326e:	a9 2f       	mov	r26, r25
    3270:	98 2f       	mov	r25, r24
    3272:	88 27       	eor	r24, r24
    3274:	82 0f       	add	r24, r18
    3276:	91 1d       	adc	r25, r1
    3278:	a1 1d       	adc	r26, r1
    327a:	b1 1d       	adc	r27, r1
    327c:	bc 01       	movw	r22, r24
    327e:	cd 01       	movw	r24, r26
    3280:	42 e0       	ldi	r20, 0x02	; 2
    3282:	66 0f       	add	r22, r22
    3284:	77 1f       	adc	r23, r23
    3286:	88 1f       	adc	r24, r24
    3288:	99 1f       	adc	r25, r25
    328a:	4a 95       	dec	r20
    328c:	d1 f7       	brne	.-12     	; 0x3282 <micros+0x3c>
    328e:	08 95       	ret

00003290 <delay>:
    3290:	8f 92       	push	r8
    3292:	9f 92       	push	r9
    3294:	af 92       	push	r10
    3296:	bf 92       	push	r11
    3298:	cf 92       	push	r12
    329a:	df 92       	push	r13
    329c:	ef 92       	push	r14
    329e:	ff 92       	push	r15
    32a0:	6b 01       	movw	r12, r22
    32a2:	7c 01       	movw	r14, r24
    32a4:	0e 94 23 19 	call	0x3246	; 0x3246 <micros>
    32a8:	4b 01       	movw	r8, r22
    32aa:	5c 01       	movw	r10, r24
    32ac:	c1 14       	cp	r12, r1
    32ae:	d1 04       	cpc	r13, r1
    32b0:	e1 04       	cpc	r14, r1
    32b2:	f1 04       	cpc	r15, r1
    32b4:	01 f1       	breq	.+64     	; 0x32f6 <delay+0x66>
    32b6:	0e 94 34 1c 	call	0x3868	; 0x3868 <yield>
    32ba:	0e 94 23 19 	call	0x3246	; 0x3246 <micros>
    32be:	dc 01       	movw	r26, r24
    32c0:	cb 01       	movw	r24, r22
    32c2:	88 19       	sub	r24, r8
    32c4:	99 09       	sbc	r25, r9
    32c6:	aa 09       	sbc	r26, r10
    32c8:	bb 09       	sbc	r27, r11
    32ca:	88 3e       	cpi	r24, 0xE8	; 232
    32cc:	93 40       	sbci	r25, 0x03	; 3
    32ce:	a1 05       	cpc	r26, r1
    32d0:	b1 05       	cpc	r27, r1
    32d2:	60 f3       	brcs	.-40     	; 0x32ac <delay+0x1c>
    32d4:	21 e0       	ldi	r18, 0x01	; 1
    32d6:	c2 1a       	sub	r12, r18
    32d8:	d1 08       	sbc	r13, r1
    32da:	e1 08       	sbc	r14, r1
    32dc:	f1 08       	sbc	r15, r1
    32de:	88 ee       	ldi	r24, 0xE8	; 232
    32e0:	88 0e       	add	r8, r24
    32e2:	83 e0       	ldi	r24, 0x03	; 3
    32e4:	98 1e       	adc	r9, r24
    32e6:	a1 1c       	adc	r10, r1
    32e8:	b1 1c       	adc	r11, r1
    32ea:	c1 14       	cp	r12, r1
    32ec:	d1 04       	cpc	r13, r1
    32ee:	e1 04       	cpc	r14, r1
    32f0:	f1 04       	cpc	r15, r1
    32f2:	19 f7       	brne	.-58     	; 0x32ba <delay+0x2a>
    32f4:	db cf       	rjmp	.-74     	; 0x32ac <delay+0x1c>
    32f6:	ff 90       	pop	r15
    32f8:	ef 90       	pop	r14
    32fa:	df 90       	pop	r13
    32fc:	cf 90       	pop	r12
    32fe:	bf 90       	pop	r11
    3300:	af 90       	pop	r10
    3302:	9f 90       	pop	r9
    3304:	8f 90       	pop	r8
    3306:	08 95       	ret

00003308 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3308:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    330a:	84 b5       	in	r24, 0x24	; 36
    330c:	82 60       	ori	r24, 0x02	; 2
    330e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3310:	84 b5       	in	r24, 0x24	; 36
    3312:	81 60       	ori	r24, 0x01	; 1
    3314:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3316:	85 b5       	in	r24, 0x25	; 37
    3318:	82 60       	ori	r24, 0x02	; 2
    331a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    331c:	85 b5       	in	r24, 0x25	; 37
    331e:	81 60       	ori	r24, 0x01	; 1
    3320:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3322:	ee e6       	ldi	r30, 0x6E	; 110
    3324:	f0 e0       	ldi	r31, 0x00	; 0
    3326:	80 81       	ld	r24, Z
    3328:	81 60       	ori	r24, 0x01	; 1
    332a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    332c:	e1 e8       	ldi	r30, 0x81	; 129
    332e:	f0 e0       	ldi	r31, 0x00	; 0
    3330:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3332:	80 81       	ld	r24, Z
    3334:	82 60       	ori	r24, 0x02	; 2
    3336:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3338:	80 81       	ld	r24, Z
    333a:	81 60       	ori	r24, 0x01	; 1
    333c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    333e:	e0 e8       	ldi	r30, 0x80	; 128
    3340:	f0 e0       	ldi	r31, 0x00	; 0
    3342:	80 81       	ld	r24, Z
    3344:	81 60       	ori	r24, 0x01	; 1
    3346:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    3348:	e1 e9       	ldi	r30, 0x91	; 145
    334a:	f0 e0       	ldi	r31, 0x00	; 0
    334c:	80 81       	ld	r24, Z
    334e:	82 60       	ori	r24, 0x02	; 2
    3350:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    3352:	80 81       	ld	r24, Z
    3354:	81 60       	ori	r24, 0x01	; 1
    3356:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    3358:	e0 e9       	ldi	r30, 0x90	; 144
    335a:	f0 e0       	ldi	r31, 0x00	; 0
    335c:	80 81       	ld	r24, Z
    335e:	81 60       	ori	r24, 0x01	; 1
    3360:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
    3362:	e1 ec       	ldi	r30, 0xC1	; 193
    3364:	f0 e0       	ldi	r31, 0x00	; 0
    3366:	80 81       	ld	r24, Z
    3368:	84 60       	ori	r24, 0x04	; 4
    336a:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
    336c:	80 81       	ld	r24, Z
    336e:	82 60       	ori	r24, 0x02	; 2
    3370:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    3372:	80 81       	ld	r24, Z
    3374:	81 60       	ori	r24, 0x01	; 1
    3376:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
    3378:	e3 ec       	ldi	r30, 0xC3	; 195
    337a:	f0 e0       	ldi	r31, 0x00	; 0
    337c:	80 81       	ld	r24, Z
    337e:	81 60       	ori	r24, 0x01	; 1
    3380:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
    3382:	e0 ec       	ldi	r30, 0xC0	; 192
    3384:	f0 e0       	ldi	r31, 0x00	; 0
    3386:	80 81       	ld	r24, Z
    3388:	82 60       	ori	r24, 0x02	; 2
    338a:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
    338c:	e2 ec       	ldi	r30, 0xC2	; 194
    338e:	f0 e0       	ldi	r31, 0x00	; 0
    3390:	80 81       	ld	r24, Z
    3392:	81 60       	ori	r24, 0x01	; 1
    3394:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3396:	ea e7       	ldi	r30, 0x7A	; 122
    3398:	f0 e0       	ldi	r31, 0x00	; 0
    339a:	80 81       	ld	r24, Z
    339c:	84 60       	ori	r24, 0x04	; 4
    339e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    33a0:	80 81       	ld	r24, Z
    33a2:	82 60       	ori	r24, 0x02	; 2
    33a4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    33a6:	80 81       	ld	r24, Z
    33a8:	81 60       	ori	r24, 0x01	; 1
    33aa:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    33ac:	80 81       	ld	r24, Z
    33ae:	80 68       	ori	r24, 0x80	; 128
    33b0:	80 83       	st	Z, r24
    33b2:	08 95       	ret

000033b4 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    33b4:	1f 93       	push	r17
    33b6:	cf 93       	push	r28
    33b8:	df 93       	push	r29
    33ba:	18 2f       	mov	r17, r24
    33bc:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    33be:	61 e0       	ldi	r22, 0x01	; 1
    33c0:	0e 94 af 1a 	call	0x355e	; 0x355e <pinMode>
	if (val == 0)
    33c4:	20 97       	sbiw	r28, 0x00	; 0
    33c6:	11 f4       	brne	.+4      	; 0x33cc <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    33c8:	60 e0       	ldi	r22, 0x00	; 0
    33ca:	04 c0       	rjmp	.+8      	; 0x33d4 <analogWrite+0x20>
	}
	else if (val == 255)
    33cc:	cf 3f       	cpi	r28, 0xFF	; 255
    33ce:	d1 05       	cpc	r29, r1
    33d0:	39 f4       	brne	.+14     	; 0x33e0 <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    33d2:	61 e0       	ldi	r22, 0x01	; 1
    33d4:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    33d6:	df 91       	pop	r29
    33d8:	cf 91       	pop	r28
    33da:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    33dc:	0c 94 eb 1a 	jmp	0x35d6	; 0x35d6 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    33e0:	e1 2f       	mov	r30, r17
    33e2:	f0 e0       	ldi	r31, 0x00	; 0
    33e4:	e5 5e       	subi	r30, 0xE5	; 229
    33e6:	fe 4f       	sbci	r31, 0xFE	; 254
    33e8:	e4 91       	lpm	r30, Z
    33ea:	8e 2f       	mov	r24, r30
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	fc 01       	movw	r30, r24
    33f0:	31 97       	sbiw	r30, 0x01	; 1
    33f2:	ef 30       	cpi	r30, 0x0F	; 15
    33f4:	f1 05       	cpc	r31, r1
    33f6:	08 f0       	brcs	.+2      	; 0x33fa <analogWrite+0x46>
    33f8:	6c c0       	rjmp	.+216    	; 0x34d2 <analogWrite+0x11e>
    33fa:	ea 5a       	subi	r30, 0xAA	; 170
    33fc:	ff 4f       	sbci	r31, 0xFF	; 255
    33fe:	0c 94 f5 1c 	jmp	0x39ea	; 0x39ea <__tablejump2__>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    3402:	84 b5       	in	r24, 0x24	; 36
    3404:	80 68       	ori	r24, 0x80	; 128
    3406:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    3408:	c7 bd       	out	0x27, r28	; 39
				break;
    340a:	68 c0       	rjmp	.+208    	; 0x34dc <analogWrite+0x128>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    340c:	84 b5       	in	r24, 0x24	; 36
    340e:	80 62       	ori	r24, 0x20	; 32
    3410:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    3412:	c8 bd       	out	0x28, r28	; 40
				break;
    3414:	63 c0       	rjmp	.+198    	; 0x34dc <analogWrite+0x128>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    3416:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    341a:	80 68       	ori	r24, 0x80	; 128
    341c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1A = val; // set pwm duty
    3420:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    3424:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				break;
    3428:	59 c0       	rjmp	.+178    	; 0x34dc <analogWrite+0x128>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    342a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    342e:	80 62       	ori	r24, 0x20	; 32
    3430:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1B = val; // set pwm duty
    3434:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    3438:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				break;
    343c:	4f c0       	rjmp	.+158    	; 0x34dc <analogWrite+0x128>
			#endif

			#if defined(TCCR1A) && defined(COM1C1)
			case TIMER1C:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1C1);
    343e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3442:	88 60       	ori	r24, 0x08	; 8
    3444:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1C = val; // set pwm duty
    3448:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <__TEXT_REGION_LENGTH__+0x7e008d>
    344c:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
				break;
    3450:	45 c0       	rjmp	.+138    	; 0x34dc <analogWrite+0x128>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
    3452:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    3456:	80 68       	ori	r24, 0x80	; 128
    3458:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
				OCR3A = val; // set pwm duty
    345c:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    3460:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
				break;
    3464:	3b c0       	rjmp	.+118    	; 0x34dc <analogWrite+0x128>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
    3466:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    346a:	80 62       	ori	r24, 0x20	; 32
    346c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
				OCR3B = val; // set pwm duty
    3470:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    3474:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
				break;
    3478:	31 c0       	rjmp	.+98     	; 0x34dc <analogWrite+0x128>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
    347a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    347e:	88 60       	ori	r24, 0x08	; 8
    3480:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
				OCR3C = val; // set pwm duty
    3484:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
    3488:	c0 93 9c 00 	sts	0x009C, r28	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
				break;
    348c:	27 c0       	rjmp	.+78     	; 0x34dc <analogWrite+0x128>
			#endif

			#if defined(TCCR4A)
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
    348e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3492:	80 68       	ori	r24, 0x80	; 128
    3494:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
				#if defined(COM4A0)		// only used on 32U4
				cbi(TCCR4A, COM4A0);
    3498:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    349c:	8f 7b       	andi	r24, 0xBF	; 191
    349e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
				#endif
				OCR4A = val;	// set pwm duty
    34a2:	c0 93 cf 00 	sts	0x00CF, r28	; 0x8000cf <__TEXT_REGION_LENGTH__+0x7e00cf>
				break;
    34a6:	1a c0       	rjmp	.+52     	; 0x34dc <analogWrite+0x128>
			#endif
			
			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
    34a8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    34ac:	80 62       	ori	r24, 0x20	; 32
    34ae:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
				OCR4B = val; // set pwm duty
    34b2:	c0 93 d0 00 	sts	0x00D0, r28	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
				break;
    34b6:	12 c0       	rjmp	.+36     	; 0x34dc <analogWrite+0x128>
			#endif
				
			#if defined(TCCR4C) && defined(COM4D1)
			case TIMER4D:				
				// connect pwm to pin on timer 4, channel D
				sbi(TCCR4C, COM4D1);
    34b8:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    34bc:	88 60       	ori	r24, 0x08	; 8
    34be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
				#if defined(COM4D0)		// only used on 32U4
				cbi(TCCR4C, COM4D0);
    34c2:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    34c6:	8b 7f       	andi	r24, 0xFB	; 251
    34c8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
				#endif
				OCR4D = val;	// set pwm duty
    34cc:	c0 93 d2 00 	sts	0x00D2, r28	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
				break;
    34d0:	05 c0       	rjmp	.+10     	; 0x34dc <analogWrite+0x128>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    34d2:	c0 38       	cpi	r28, 0x80	; 128
    34d4:	d1 05       	cpc	r29, r1
    34d6:	0c f0       	brlt	.+2      	; 0x34da <analogWrite+0x126>
    34d8:	7c cf       	rjmp	.-264    	; 0x33d2 <analogWrite+0x1e>
    34da:	76 cf       	rjmp	.-276    	; 0x33c8 <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    34dc:	df 91       	pop	r29
    34de:	cf 91       	pop	r28
    34e0:	1f 91       	pop	r17
    34e2:	08 95       	ret

000034e4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	fc 01       	movw	r30, r24
    34e8:	31 97       	sbiw	r30, 0x01	; 1
    34ea:	ef 30       	cpi	r30, 0x0F	; 15
    34ec:	f1 05       	cpc	r31, r1
    34ee:	b0 f5       	brcc	.+108    	; 0x355c <turnOffPWM+0x78>
    34f0:	eb 59       	subi	r30, 0x9B	; 155
    34f2:	ff 4f       	sbci	r31, 0xFF	; 255
    34f4:	0c 94 f5 1c 	jmp	0x39ea	; 0x39ea <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    34f8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    34fc:	8f 77       	andi	r24, 0x7F	; 127
    34fe:	03 c0       	rjmp	.+6      	; 0x3506 <turnOffPWM+0x22>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3500:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3504:	8f 7d       	andi	r24, 0xDF	; 223
    3506:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    350a:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    350c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3510:	87 7f       	andi	r24, 0xF7	; 247
    3512:	f9 cf       	rjmp	.-14     	; 0x3506 <turnOffPWM+0x22>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3514:	84 b5       	in	r24, 0x24	; 36
    3516:	8f 77       	andi	r24, 0x7F	; 127
    3518:	02 c0       	rjmp	.+4      	; 0x351e <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    351a:	84 b5       	in	r24, 0x24	; 36
    351c:	8f 7d       	andi	r24, 0xDF	; 223
    351e:	84 bd       	out	0x24, r24	; 36
    3520:	08 95       	ret
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    3522:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    3526:	8f 77       	andi	r24, 0x7F	; 127
    3528:	07 c0       	rjmp	.+14     	; 0x3538 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    352a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    352e:	8f 7d       	andi	r24, 0xDF	; 223
    3530:	03 c0       	rjmp	.+6      	; 0x3538 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    3532:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    3536:	87 7f       	andi	r24, 0xF7	; 247
    3538:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    353c:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    353e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3542:	8f 77       	andi	r24, 0x7F	; 127
    3544:	03 c0       	rjmp	.+6      	; 0x354c <turnOffPWM+0x68>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    3546:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    354a:	8f 7d       	andi	r24, 0xDF	; 223
    354c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3550:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
		#endif			
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
    3552:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    3556:	87 7f       	andi	r24, 0xF7	; 247
    3558:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    355c:	08 95       	ret

0000355e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    355e:	cf 93       	push	r28
    3560:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	fc 01       	movw	r30, r24
    3566:	e6 5c       	subi	r30, 0xC6	; 198
    3568:	fe 4f       	sbci	r31, 0xFE	; 254
    356a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    356c:	fc 01       	movw	r30, r24
    356e:	e7 5a       	subi	r30, 0xA7	; 167
    3570:	fe 4f       	sbci	r31, 0xFE	; 254
    3572:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3574:	88 23       	and	r24, r24
    3576:	61 f1       	breq	.+88     	; 0x35d0 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	88 0f       	add	r24, r24
    357c:	99 1f       	adc	r25, r25
    357e:	fc 01       	movw	r30, r24
    3580:	ea 57       	subi	r30, 0x7A	; 122
    3582:	fe 4f       	sbci	r31, 0xFE	; 254
    3584:	c5 91       	lpm	r28, Z+
    3586:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3588:	fc 01       	movw	r30, r24
    358a:	e8 58       	subi	r30, 0x88	; 136
    358c:	fe 4f       	sbci	r31, 0xFE	; 254
    358e:	a5 91       	lpm	r26, Z+
    3590:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3592:	61 11       	cpse	r22, r1
    3594:	09 c0       	rjmp	.+18     	; 0x35a8 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3596:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3598:	f8 94       	cli
		*reg &= ~bit;
    359a:	88 81       	ld	r24, Y
    359c:	20 95       	com	r18
    359e:	82 23       	and	r24, r18
    35a0:	88 83       	st	Y, r24
		*out &= ~bit;
    35a2:	ec 91       	ld	r30, X
    35a4:	2e 23       	and	r18, r30
    35a6:	0b c0       	rjmp	.+22     	; 0x35be <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    35a8:	62 30       	cpi	r22, 0x02	; 2
    35aa:	61 f4       	brne	.+24     	; 0x35c4 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    35ac:	9f b7       	in	r25, 0x3f	; 63
                cli();
    35ae:	f8 94       	cli
		*reg &= ~bit;
    35b0:	88 81       	ld	r24, Y
    35b2:	32 2f       	mov	r19, r18
    35b4:	30 95       	com	r19
    35b6:	83 23       	and	r24, r19
    35b8:	88 83       	st	Y, r24
		*out |= bit;
    35ba:	ec 91       	ld	r30, X
    35bc:	2e 2b       	or	r18, r30
    35be:	2c 93       	st	X, r18
		SREG = oldSREG;
    35c0:	9f bf       	out	0x3f, r25	; 63
    35c2:	06 c0       	rjmp	.+12     	; 0x35d0 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    35c4:	8f b7       	in	r24, 0x3f	; 63
                cli();
    35c6:	f8 94       	cli
		*reg |= bit;
    35c8:	e8 81       	ld	r30, Y
    35ca:	2e 2b       	or	r18, r30
    35cc:	28 83       	st	Y, r18
		SREG = oldSREG;
    35ce:	8f bf       	out	0x3f, r24	; 63
	}
}
    35d0:	df 91       	pop	r29
    35d2:	cf 91       	pop	r28
    35d4:	08 95       	ret

000035d6 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    35d6:	1f 93       	push	r17
    35d8:	cf 93       	push	r28
    35da:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    35dc:	28 2f       	mov	r18, r24
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	f9 01       	movw	r30, r18
    35e2:	e5 5e       	subi	r30, 0xE5	; 229
    35e4:	fe 4f       	sbci	r31, 0xFE	; 254
    35e6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    35e8:	f9 01       	movw	r30, r18
    35ea:	e6 5c       	subi	r30, 0xC6	; 198
    35ec:	fe 4f       	sbci	r31, 0xFE	; 254
    35ee:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    35f0:	f9 01       	movw	r30, r18
    35f2:	e7 5a       	subi	r30, 0xA7	; 167
    35f4:	fe 4f       	sbci	r31, 0xFE	; 254
    35f6:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    35f8:	cc 23       	and	r28, r28
    35fa:	c1 f0       	breq	.+48     	; 0x362c <digitalWrite+0x56>
    35fc:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    35fe:	81 11       	cpse	r24, r1
    3600:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <turnOffPWM>

	out = portOutputRegister(port);
    3604:	ec 2f       	mov	r30, r28
    3606:	f0 e0       	ldi	r31, 0x00	; 0
    3608:	ee 0f       	add	r30, r30
    360a:	ff 1f       	adc	r31, r31
    360c:	e8 58       	subi	r30, 0x88	; 136
    360e:	fe 4f       	sbci	r31, 0xFE	; 254
    3610:	a5 91       	lpm	r26, Z+
    3612:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3614:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3616:	f8 94       	cli

	if (val == LOW) {
    3618:	11 11       	cpse	r17, r1
    361a:	04 c0       	rjmp	.+8      	; 0x3624 <digitalWrite+0x4e>
		*out &= ~bit;
    361c:	8c 91       	ld	r24, X
    361e:	d0 95       	com	r29
    3620:	d8 23       	and	r29, r24
    3622:	02 c0       	rjmp	.+4      	; 0x3628 <digitalWrite+0x52>
	} else {
		*out |= bit;
    3624:	ec 91       	ld	r30, X
    3626:	de 2b       	or	r29, r30
    3628:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    362a:	9f bf       	out	0x3f, r25	; 63
}
    362c:	df 91       	pop	r29
    362e:	cf 91       	pop	r28
    3630:	1f 91       	pop	r17
    3632:	08 95       	ret

00003634 <_ZN7Serial_5writeEh>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		ret = breakValue;
		breakValue = -1;
	}
	return ret;
}
    3634:	cf 93       	push	r28
    3636:	df 93       	push	r29
    3638:	1f 92       	push	r1
    363a:	cd b7       	in	r28, 0x3d	; 61
    363c:	de b7       	in	r29, 0x3e	; 62
    363e:	69 83       	std	Y+1, r22	; 0x01
    3640:	dc 01       	movw	r26, r24
    3642:	ed 91       	ld	r30, X+
    3644:	fc 91       	ld	r31, X
    3646:	02 80       	ldd	r0, Z+2	; 0x02
    3648:	f3 81       	ldd	r31, Z+3	; 0x03
    364a:	e0 2d       	mov	r30, r0
    364c:	41 e0       	ldi	r20, 0x01	; 1
    364e:	50 e0       	ldi	r21, 0x00	; 0
    3650:	be 01       	movw	r22, r28
    3652:	6f 5f       	subi	r22, 0xFF	; 255
    3654:	7f 4f       	sbci	r23, 0xFF	; 255
    3656:	09 95       	icall
    3658:	0f 90       	pop	r0
    365a:	df 91       	pop	r29
    365c:	cf 91       	pop	r28
    365e:	08 95       	ret

00003660 <_ZN7Serial_4peekEv>:
    3660:	cf 93       	push	r28
    3662:	df 93       	push	r29
    3664:	ec 01       	movw	r28, r24
    3666:	8c 85       	ldd	r24, Y+12	; 0x0c
    3668:	9d 85       	ldd	r25, Y+13	; 0x0d
    366a:	97 ff       	sbrs	r25, 7
    366c:	05 c0       	rjmp	.+10     	; 0x3678 <_ZN7Serial_4peekEv+0x18>
    366e:	82 e0       	ldi	r24, 0x02	; 2
    3670:	0e 94 86 14 	call	0x290c	; 0x290c <_Z8USB_Recvh>
    3674:	9d 87       	std	Y+13, r25	; 0x0d
    3676:	8c 87       	std	Y+12, r24	; 0x0c
    3678:	8c 85       	ldd	r24, Y+12	; 0x0c
    367a:	9d 85       	ldd	r25, Y+13	; 0x0d
    367c:	df 91       	pop	r29
    367e:	cf 91       	pop	r28
    3680:	08 95       	ret

00003682 <_ZN7Serial_17availableForWriteEv>:
    3682:	83 e0       	ldi	r24, 0x03	; 3
    3684:	0e 94 9d 14 	call	0x293a	; 0x293a <_Z13USB_SendSpaceh>
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	08 95       	ret

0000368c <_ZN7Serial_5flushEv>:
    368c:	83 e0       	ldi	r24, 0x03	; 3
    368e:	0c 94 1b 17 	jmp	0x2e36	; 0x2e36 <_Z9USB_Flushh>

00003692 <_ZN7Serial_9availableEv>:
    3692:	fc 01       	movw	r30, r24
    3694:	84 85       	ldd	r24, Z+12	; 0x0c
    3696:	95 85       	ldd	r25, Z+13	; 0x0d
    3698:	97 fd       	sbrc	r25, 7
    369a:	06 c0       	rjmp	.+12     	; 0x36a8 <_ZN7Serial_9availableEv+0x16>
    369c:	82 e0       	ldi	r24, 0x02	; 2
    369e:	0e 94 31 14 	call	0x2862	; 0x2862 <_Z13USB_Availableh>
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	01 96       	adiw	r24, 0x01	; 1
    36a6:	08 95       	ret
    36a8:	82 e0       	ldi	r24, 0x02	; 2
    36aa:	0e 94 31 14 	call	0x2862	; 0x2862 <_Z13USB_Availableh>
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	08 95       	ret

000036b2 <_ZN7Serial_4readEv>:
    36b2:	fc 01       	movw	r30, r24
    36b4:	84 85       	ldd	r24, Z+12	; 0x0c
    36b6:	95 85       	ldd	r25, Z+13	; 0x0d
    36b8:	97 fd       	sbrc	r25, 7
    36ba:	05 c0       	rjmp	.+10     	; 0x36c6 <_ZN7Serial_4readEv+0x14>
    36bc:	2f ef       	ldi	r18, 0xFF	; 255
    36be:	3f ef       	ldi	r19, 0xFF	; 255
    36c0:	35 87       	std	Z+13, r19	; 0x0d
    36c2:	24 87       	std	Z+12, r18	; 0x0c
    36c4:	08 95       	ret
    36c6:	82 e0       	ldi	r24, 0x02	; 2
    36c8:	0c 94 86 14 	jmp	0x290c	; 0x290c <_Z8USB_Recvh>

000036cc <_ZN7Serial_5writeEPKhj>:
    36cc:	cf 93       	push	r28
    36ce:	df 93       	push	r29
    36d0:	ec 01       	movw	r28, r24
    36d2:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <_ZL12_usbLineInfo+0x7>
    36d6:	88 23       	and	r24, r24
    36d8:	31 f0       	breq	.+12     	; 0x36e6 <_ZN7Serial_5writeEPKhj+0x1a>
    36da:	83 e0       	ldi	r24, 0x03	; 3
    36dc:	0e 94 b7 14 	call	0x296e	; 0x296e <_Z8USB_SendhPKvi>
    36e0:	18 16       	cp	r1, r24
    36e2:	19 06       	cpc	r1, r25
    36e4:	34 f0       	brlt	.+12     	; 0x36f2 <_ZN7Serial_5writeEPKhj+0x26>
    36e6:	81 e0       	ldi	r24, 0x01	; 1
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	9b 83       	std	Y+3, r25	; 0x03
    36ec:	8a 83       	std	Y+2, r24	; 0x02
    36ee:	80 e0       	ldi	r24, 0x00	; 0
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	df 91       	pop	r29
    36f4:	cf 91       	pop	r28
    36f6:	08 95       	ret

000036f8 <_Z16isLUFAbootloaderv>:
    36f8:	ee ef       	ldi	r30, 0xFE	; 254
    36fa:	ff e7       	ldi	r31, 0x7F	; 127
    36fc:	25 91       	lpm	r18, Z+
    36fe:	34 91       	lpm	r19, Z
    3700:	81 e0       	ldi	r24, 0x01	; 1
    3702:	2b 3f       	cpi	r18, 0xFB	; 251
    3704:	3c 4d       	sbci	r19, 0xDC	; 220
    3706:	09 f0       	breq	.+2      	; 0x370a <_Z16isLUFAbootloaderv+0x12>
    3708:	80 e0       	ldi	r24, 0x00	; 0
    370a:	08 95       	ret

0000370c <_Z16CDC_GetInterfacePh>:
    370c:	fc 01       	movw	r30, r24
    370e:	90 81       	ld	r25, Z
    3710:	9e 5f       	subi	r25, 0xFE	; 254
    3712:	90 83       	st	Z, r25
    3714:	42 e4       	ldi	r20, 0x42	; 66
    3716:	50 e0       	ldi	r21, 0x00	; 0
    3718:	64 e9       	ldi	r22, 0x94	; 148
    371a:	71 e0       	ldi	r23, 0x01	; 1
    371c:	80 e8       	ldi	r24, 0x80	; 128
    371e:	0c 94 67 15 	jmp	0x2ace	; 0x2ace <_Z15USB_SendControlhPKvi>

00003722 <_Z9CDC_SetupR8USBSetup>:
    3722:	fc 01       	movw	r30, r24
    3724:	81 81       	ldd	r24, Z+1	; 0x01
    3726:	90 81       	ld	r25, Z
    3728:	91 3a       	cpi	r25, 0xA1	; 161
    372a:	59 f4       	brne	.+22     	; 0x3742 <_Z9CDC_SetupR8USBSetup+0x20>
    372c:	81 32       	cpi	r24, 0x21	; 33
    372e:	09 f0       	breq	.+2      	; 0x3732 <_Z9CDC_SetupR8USBSetup+0x10>
    3730:	65 c0       	rjmp	.+202    	; 0x37fc <_Z9CDC_SetupR8USBSetup+0xda>
    3732:	47 e0       	ldi	r20, 0x07	; 7
    3734:	50 e0       	ldi	r21, 0x00	; 0
    3736:	63 e2       	ldi	r22, 0x23	; 35
    3738:	71 e0       	ldi	r23, 0x01	; 1
    373a:	80 e0       	ldi	r24, 0x00	; 0
    373c:	0e 94 67 15 	call	0x2ace	; 0x2ace <_Z15USB_SendControlhPKvi>
    3740:	5b c0       	rjmp	.+182    	; 0x37f8 <_Z9CDC_SetupR8USBSetup+0xd6>
    3742:	91 32       	cpi	r25, 0x21	; 33
    3744:	09 f0       	breq	.+2      	; 0x3748 <_Z9CDC_SetupR8USBSetup+0x26>
    3746:	5a c0       	rjmp	.+180    	; 0x37fc <_Z9CDC_SetupR8USBSetup+0xda>
    3748:	83 32       	cpi	r24, 0x23	; 35
    374a:	69 f4       	brne	.+26     	; 0x3766 <_Z9CDC_SetupR8USBSetup+0x44>
    374c:	82 81       	ldd	r24, Z+2	; 0x02
    374e:	93 81       	ldd	r25, Z+3	; 0x03
    3750:	a0 e0       	ldi	r26, 0x00	; 0
    3752:	b0 e0       	ldi	r27, 0x00	; 0
    3754:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <_ZL10breakValue>
    3758:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <_ZL10breakValue+0x1>
    375c:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <_ZL10breakValue+0x2>
    3760:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <_ZL10breakValue+0x3>
    3764:	49 c0       	rjmp	.+146    	; 0x37f8 <_Z9CDC_SetupR8USBSetup+0xd6>
    3766:	80 32       	cpi	r24, 0x20	; 32
    3768:	39 f4       	brne	.+14     	; 0x3778 <_Z9CDC_SetupR8USBSetup+0x56>
    376a:	67 e0       	ldi	r22, 0x07	; 7
    376c:	70 e0       	ldi	r23, 0x00	; 0
    376e:	83 e2       	ldi	r24, 0x23	; 35
    3770:	91 e0       	ldi	r25, 0x01	; 1
    3772:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <_Z15USB_RecvControlPvi>
    3776:	40 c0       	rjmp	.+128    	; 0x37f8 <_Z9CDC_SetupR8USBSetup+0xd6>
    3778:	82 32       	cpi	r24, 0x22	; 34
    377a:	09 f0       	breq	.+2      	; 0x377e <_Z9CDC_SetupR8USBSetup+0x5c>
    377c:	3d c0       	rjmp	.+122    	; 0x37f8 <_Z9CDC_SetupR8USBSetup+0xd6>
    377e:	82 81       	ldd	r24, Z+2	; 0x02
    3780:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <_ZL12_usbLineInfo+0x7>
    3784:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <_Z16isLUFAbootloaderv>
    3788:	88 23       	and	r24, r24
    378a:	19 f0       	breq	.+6      	; 0x3792 <_Z9CDC_SetupR8USBSetup+0x70>
    378c:	ee ef       	ldi	r30, 0xFE	; 254
    378e:	fa e0       	ldi	r31, 0x0A	; 10
    3790:	02 c0       	rjmp	.+4      	; 0x3796 <_Z9CDC_SetupR8USBSetup+0x74>
    3792:	e0 e0       	ldi	r30, 0x00	; 0
    3794:	f8 e0       	ldi	r31, 0x08	; 8
    3796:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <_ZL12_usbLineInfo>
    379a:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <_ZL12_usbLineInfo+0x1>
    379e:	a0 91 25 01 	lds	r26, 0x0125	; 0x800125 <_ZL12_usbLineInfo+0x2>
    37a2:	b0 91 26 01 	lds	r27, 0x0126	; 0x800126 <_ZL12_usbLineInfo+0x3>
    37a6:	80 3b       	cpi	r24, 0xB0	; 176
    37a8:	94 40       	sbci	r25, 0x04	; 4
    37aa:	a1 05       	cpc	r26, r1
    37ac:	b1 05       	cpc	r27, r1
    37ae:	41 f5       	brne	.+80     	; 0x3800 <_Z9CDC_SetupR8USBSetup+0xde>
    37b0:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <_ZL12_usbLineInfo+0x7>
    37b4:	80 fd       	sbrc	r24, 0
    37b6:	24 c0       	rjmp	.+72     	; 0x3800 <_Z9CDC_SetupR8USBSetup+0xde>
    37b8:	ee 3f       	cpi	r30, 0xFE	; 254
    37ba:	8a e0       	ldi	r24, 0x0A	; 10
    37bc:	f8 07       	cpc	r31, r24
    37be:	51 f0       	breq	.+20     	; 0x37d4 <_Z9CDC_SetupR8USBSetup+0xb2>
    37c0:	80 81       	ld	r24, Z
    37c2:	91 81       	ldd	r25, Z+1	; 0x01
    37c4:	87 37       	cpi	r24, 0x77	; 119
    37c6:	27 e7       	ldi	r18, 0x77	; 119
    37c8:	92 07       	cpc	r25, r18
    37ca:	21 f0       	breq	.+8      	; 0x37d4 <_Z9CDC_SetupR8USBSetup+0xb2>
    37cc:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x7ba>
    37d0:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x7b9>
    37d4:	87 e7       	ldi	r24, 0x77	; 119
    37d6:	97 e7       	ldi	r25, 0x77	; 119
    37d8:	91 83       	std	Z+1, r25	; 0x01
    37da:	80 83       	st	Z, r24
    37dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    37e0:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <_ZL11wdtcsr_save>
    37e4:	9b e0       	ldi	r25, 0x0B	; 11
    37e6:	88 e1       	ldi	r24, 0x18	; 24
    37e8:	0f b6       	in	r0, 0x3f	; 63
    37ea:	f8 94       	cli
    37ec:	a8 95       	wdr
    37ee:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    37f2:	0f be       	out	0x3f, r0	; 63
    37f4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    37f8:	81 e0       	ldi	r24, 0x01	; 1
    37fa:	08 95       	ret
    37fc:	80 e0       	ldi	r24, 0x00	; 0
    37fe:	08 95       	ret
    3800:	80 81       	ld	r24, Z
    3802:	91 81       	ldd	r25, Z+1	; 0x01
    3804:	87 37       	cpi	r24, 0x77	; 119
    3806:	97 47       	sbci	r25, 0x77	; 119
    3808:	b9 f7       	brne	.-18     	; 0x37f8 <_Z9CDC_SetupR8USBSetup+0xd6>
    380a:	a8 95       	wdr
    380c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3810:	88 61       	ori	r24, 0x18	; 24
    3812:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3816:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <_ZL11wdtcsr_save>
    381a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    381e:	ee 3f       	cpi	r30, 0xFE	; 254
    3820:	8a e0       	ldi	r24, 0x0A	; 10
    3822:	f8 07       	cpc	r31, r24
    3824:	39 f0       	breq	.+14     	; 0x3834 <_Z9CDC_SetupR8USBSetup+0x112>
    3826:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x7b9>
    382a:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x7ba>
    382e:	91 83       	std	Z+1, r25	; 0x01
    3830:	80 83       	st	Z, r24
    3832:	e2 cf       	rjmp	.-60     	; 0x37f8 <_Z9CDC_SetupR8USBSetup+0xd6>
    3834:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x7ba>
    3838:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x7b9>
    383c:	dd cf       	rjmp	.-70     	; 0x37f8 <_Z9CDC_SetupR8USBSetup+0xd6>

0000383e <_GLOBAL__sub_I__cdcInterface>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    383e:	e8 ee       	ldi	r30, 0xE8	; 232
    3840:	f2 e0       	ldi	r31, 0x02	; 2
    3842:	13 82       	std	Z+3, r1	; 0x03
    3844:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    3846:	88 ee       	ldi	r24, 0xE8	; 232
    3848:	93 e0       	ldi	r25, 0x03	; 3
    384a:	a0 e0       	ldi	r26, 0x00	; 0
    384c:	b0 e0       	ldi	r27, 0x00	; 0
    384e:	84 83       	std	Z+4, r24	; 0x04
    3850:	95 83       	std	Z+5, r25	; 0x05
    3852:	a6 83       	std	Z+6, r26	; 0x06
    3854:	b7 83       	std	Z+7, r27	; 0x07
class Serial_ : public Stream
{
private:
	int peek_buffer;
public:
	Serial_() { peek_buffer = -1; };
    3856:	8c e7       	ldi	r24, 0x7C	; 124
    3858:	91 e0       	ldi	r25, 0x01	; 1
    385a:	91 83       	std	Z+1, r25	; 0x01
    385c:	80 83       	st	Z, r24
    385e:	8f ef       	ldi	r24, 0xFF	; 255
    3860:	9f ef       	ldi	r25, 0xFF	; 255
    3862:	95 87       	std	Z+13, r25	; 0x0d
    3864:	84 87       	std	Z+12, r24	; 0x0c
    3866:	08 95       	ret

00003868 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3868:	08 95       	ret

0000386a <_ZN13PluggableUSB_12getInterfaceEPh>:
		_initEndpoints[lastEp] = node->endpointType[i];
		lastEp++;
	}
	return true;
	// restart USB layer???
}
    386a:	ef 92       	push	r14
    386c:	ff 92       	push	r15
    386e:	0f 93       	push	r16
    3870:	1f 93       	push	r17
    3872:	cf 93       	push	r28
    3874:	df 93       	push	r29
    3876:	7b 01       	movw	r14, r22
    3878:	fc 01       	movw	r30, r24
    387a:	c2 81       	ldd	r28, Z+2	; 0x02
    387c:	d3 81       	ldd	r29, Z+3	; 0x03
    387e:	00 e0       	ldi	r16, 0x00	; 0
    3880:	10 e0       	ldi	r17, 0x00	; 0
    3882:	20 97       	sbiw	r28, 0x00	; 0
    3884:	81 f0       	breq	.+32     	; 0x38a6 <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
    3886:	e8 81       	ld	r30, Y
    3888:	f9 81       	ldd	r31, Y+1	; 0x01
    388a:	02 80       	ldd	r0, Z+2	; 0x02
    388c:	f3 81       	ldd	r31, Z+3	; 0x03
    388e:	e0 2d       	mov	r30, r0
    3890:	b7 01       	movw	r22, r14
    3892:	ce 01       	movw	r24, r28
    3894:	09 95       	icall
    3896:	97 fd       	sbrc	r25, 7
    3898:	08 c0       	rjmp	.+16     	; 0x38aa <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
    389a:	08 0f       	add	r16, r24
    389c:	19 1f       	adc	r17, r25
    389e:	08 84       	ldd	r0, Y+8	; 0x08
    38a0:	d9 85       	ldd	r29, Y+9	; 0x09
    38a2:	c0 2d       	mov	r28, r0
    38a4:	ee cf       	rjmp	.-36     	; 0x3882 <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    38a6:	c8 01       	movw	r24, r16
    38a8:	02 c0       	rjmp	.+4      	; 0x38ae <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
    38aa:	8f ef       	ldi	r24, 0xFF	; 255
    38ac:	9f ef       	ldi	r25, 0xFF	; 255
    38ae:	df 91       	pop	r29
    38b0:	cf 91       	pop	r28
    38b2:	1f 91       	pop	r17
    38b4:	0f 91       	pop	r16
    38b6:	ff 90       	pop	r15
    38b8:	ef 90       	pop	r14
    38ba:	08 95       	ret

000038bc <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    38bc:	0f 93       	push	r16
    38be:	1f 93       	push	r17
    38c0:	cf 93       	push	r28
    38c2:	df 93       	push	r29
    38c4:	8b 01       	movw	r16, r22
    38c6:	fc 01       	movw	r30, r24
    38c8:	c2 81       	ldd	r28, Z+2	; 0x02
    38ca:	d3 81       	ldd	r29, Z+3	; 0x03
    38cc:	20 97       	sbiw	r28, 0x00	; 0
    38ce:	71 f0       	breq	.+28     	; 0x38ec <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
    38d0:	e8 81       	ld	r30, Y
    38d2:	f9 81       	ldd	r31, Y+1	; 0x01
    38d4:	04 80       	ldd	r0, Z+4	; 0x04
    38d6:	f5 81       	ldd	r31, Z+5	; 0x05
    38d8:	e0 2d       	mov	r30, r0
    38da:	b8 01       	movw	r22, r16
    38dc:	ce 01       	movw	r24, r28
    38de:	09 95       	icall
    38e0:	00 97       	sbiw	r24, 0x00	; 0
    38e2:	31 f4       	brne	.+12     	; 0x38f0 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
    38e4:	08 84       	ldd	r0, Y+8	; 0x08
    38e6:	d9 85       	ldd	r29, Y+9	; 0x09
    38e8:	c0 2d       	mov	r28, r0
    38ea:	f0 cf       	rjmp	.-32     	; 0x38cc <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
    38ec:	80 e0       	ldi	r24, 0x00	; 0
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	df 91       	pop	r29
    38f2:	cf 91       	pop	r28
    38f4:	1f 91       	pop	r17
    38f6:	0f 91       	pop	r16
    38f8:	08 95       	ret

000038fa <_ZN13PluggableUSB_12getShortNameEPc>:
    38fa:	0f 93       	push	r16
    38fc:	1f 93       	push	r17
    38fe:	cf 93       	push	r28
    3900:	df 93       	push	r29
    3902:	8b 01       	movw	r16, r22
    3904:	fc 01       	movw	r30, r24
    3906:	c2 81       	ldd	r28, Z+2	; 0x02
    3908:	d3 81       	ldd	r29, Z+3	; 0x03
    390a:	20 97       	sbiw	r28, 0x00	; 0
    390c:	71 f0       	breq	.+28     	; 0x392a <_ZN13PluggableUSB_12getShortNameEPc+0x30>
    390e:	e8 81       	ld	r30, Y
    3910:	f9 81       	ldd	r31, Y+1	; 0x01
    3912:	06 80       	ldd	r0, Z+6	; 0x06
    3914:	f7 81       	ldd	r31, Z+7	; 0x07
    3916:	e0 2d       	mov	r30, r0
    3918:	b8 01       	movw	r22, r16
    391a:	ce 01       	movw	r24, r28
    391c:	09 95       	icall
    391e:	08 0f       	add	r16, r24
    3920:	11 1d       	adc	r17, r1
    3922:	08 84       	ldd	r0, Y+8	; 0x08
    3924:	d9 85       	ldd	r29, Y+9	; 0x09
    3926:	c0 2d       	mov	r28, r0
    3928:	f0 cf       	rjmp	.-32     	; 0x390a <_ZN13PluggableUSB_12getShortNameEPc+0x10>
    392a:	f8 01       	movw	r30, r16
    392c:	10 82       	st	Z, r1
    392e:	df 91       	pop	r29
    3930:	cf 91       	pop	r28
    3932:	1f 91       	pop	r17
    3934:	0f 91       	pop	r16
    3936:	08 95       	ret

00003938 <_ZN13PluggableUSB_5setupER8USBSetup>:
    3938:	0f 93       	push	r16
    393a:	1f 93       	push	r17
    393c:	cf 93       	push	r28
    393e:	df 93       	push	r29
    3940:	8b 01       	movw	r16, r22
    3942:	fc 01       	movw	r30, r24
    3944:	c2 81       	ldd	r28, Z+2	; 0x02
    3946:	d3 81       	ldd	r29, Z+3	; 0x03
    3948:	20 97       	sbiw	r28, 0x00	; 0
    394a:	71 f0       	breq	.+28     	; 0x3968 <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
    394c:	e8 81       	ld	r30, Y
    394e:	f9 81       	ldd	r31, Y+1	; 0x01
    3950:	01 90       	ld	r0, Z+
    3952:	f0 81       	ld	r31, Z
    3954:	e0 2d       	mov	r30, r0
    3956:	b8 01       	movw	r22, r16
    3958:	ce 01       	movw	r24, r28
    395a:	09 95       	icall
    395c:	81 11       	cpse	r24, r1
    395e:	05 c0       	rjmp	.+10     	; 0x396a <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
    3960:	08 84       	ldd	r0, Y+8	; 0x08
    3962:	d9 85       	ldd	r29, Y+9	; 0x09
    3964:	c0 2d       	mov	r28, r0
    3966:	f0 cf       	rjmp	.-32     	; 0x3948 <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
    3968:	80 e0       	ldi	r24, 0x00	; 0
    396a:	df 91       	pop	r29
    396c:	cf 91       	pop	r28
    396e:	1f 91       	pop	r17
    3970:	0f 91       	pop	r16
    3972:	08 95       	ret

00003974 <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    3974:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <_ZGVZ12PluggableUSBvE3obj>
    3978:	81 11       	cpse	r24, r1
    397a:	0d c0       	rjmp	.+26     	; 0x3996 <_Z12PluggableUSBv+0x22>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    397c:	82 e0       	ldi	r24, 0x02	; 2
    397e:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <_ZZ12PluggableUSBvE3obj>
    3982:	84 e0       	ldi	r24, 0x04	; 4
    3984:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <_ZZ12PluggableUSBvE3obj+0x1>
    3988:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <_ZZ12PluggableUSBvE3obj+0x3>
    398c:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <_ZZ12PluggableUSBvE3obj+0x2>
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    3990:	81 e0       	ldi	r24, 0x01	; 1
    3992:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <_ZGVZ12PluggableUSBvE3obj>
	return obj;
}
    3996:	89 e3       	ldi	r24, 0x39	; 57
    3998:	93 e0       	ldi	r25, 0x03	; 3
    399a:	08 95       	ret

0000399c <__unordsf2>:
    399c:	0e 94 04 11 	call	0x2208	; 0x2208 <__fp_cmp>
    39a0:	88 0b       	sbc	r24, r24
    39a2:	99 0b       	sbc	r25, r25
    39a4:	08 95       	ret

000039a6 <__udivmodsi4>:
    39a6:	a1 e2       	ldi	r26, 0x21	; 33
    39a8:	1a 2e       	mov	r1, r26
    39aa:	aa 1b       	sub	r26, r26
    39ac:	bb 1b       	sub	r27, r27
    39ae:	fd 01       	movw	r30, r26
    39b0:	0d c0       	rjmp	.+26     	; 0x39cc <__udivmodsi4_ep>

000039b2 <__udivmodsi4_loop>:
    39b2:	aa 1f       	adc	r26, r26
    39b4:	bb 1f       	adc	r27, r27
    39b6:	ee 1f       	adc	r30, r30
    39b8:	ff 1f       	adc	r31, r31
    39ba:	a2 17       	cp	r26, r18
    39bc:	b3 07       	cpc	r27, r19
    39be:	e4 07       	cpc	r30, r20
    39c0:	f5 07       	cpc	r31, r21
    39c2:	20 f0       	brcs	.+8      	; 0x39cc <__udivmodsi4_ep>
    39c4:	a2 1b       	sub	r26, r18
    39c6:	b3 0b       	sbc	r27, r19
    39c8:	e4 0b       	sbc	r30, r20
    39ca:	f5 0b       	sbc	r31, r21

000039cc <__udivmodsi4_ep>:
    39cc:	66 1f       	adc	r22, r22
    39ce:	77 1f       	adc	r23, r23
    39d0:	88 1f       	adc	r24, r24
    39d2:	99 1f       	adc	r25, r25
    39d4:	1a 94       	dec	r1
    39d6:	69 f7       	brne	.-38     	; 0x39b2 <__udivmodsi4_loop>
    39d8:	60 95       	com	r22
    39da:	70 95       	com	r23
    39dc:	80 95       	com	r24
    39de:	90 95       	com	r25
    39e0:	9b 01       	movw	r18, r22
    39e2:	ac 01       	movw	r20, r24
    39e4:	bd 01       	movw	r22, r26
    39e6:	cf 01       	movw	r24, r30
    39e8:	08 95       	ret

000039ea <__tablejump2__>:
    39ea:	ee 0f       	add	r30, r30
    39ec:	ff 1f       	adc	r31, r31
    39ee:	05 90       	lpm	r0, Z+
    39f0:	f4 91       	lpm	r31, Z
    39f2:	e0 2d       	mov	r30, r0
    39f4:	09 94       	ijmp

000039f6 <abort>:
    39f6:	81 e0       	ldi	r24, 0x01	; 1
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	f8 94       	cli
    39fc:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <_exit>

00003a00 <_exit>:
    3a00:	f8 94       	cli

00003a02 <__stop_program>:
    3a02:	ff cf       	rjmp	.-2      	; 0x3a02 <__stop_program>
