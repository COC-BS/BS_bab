
hello_world.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007c  00800100  00002808  0000289c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002808  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000163  0080017c  0080017c  00002918  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002918  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002948  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000768  00000000  00000000  00002988  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010a88  00000000  00000000  000030f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000033c9  00000000  00000000  00013b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004179  00000000  00000000  00016f41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000015ac  00000000  00000000  0001b0bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000446c  00000000  00000000  0001c668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000075b4  00000000  00000000  00020ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000800  00000000  00000000  00028088  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 df 00 	jmp	0x1be	; 0x1be <__ctors_end>
       4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
       8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
       c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      10:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      14:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      18:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      1c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      20:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      24:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      28:	0c 94 e4 0f 	jmp	0x1fc8	; 0x1fc8 <__vector_10>
      2c:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__vector_11>
      30:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      34:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      38:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      3c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      40:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      44:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      48:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      4c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      50:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      54:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      58:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      5c:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <__vector_23>
      60:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      64:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      68:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      6c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      70:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      74:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      78:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      7c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      80:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      84:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      88:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      8c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      90:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <__vector_36>
      94:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      98:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      9c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      ac:	91 11       	cpse	r25, r1
      ae:	94 11       	cpse	r25, r4
      b0:	83 11       	cpse	r24, r3
      b2:	87 11       	cpse	r24, r7
      b4:	8d 11       	cpse	r24, r13
      b6:	b5 11       	cpse	r27, r5
      b8:	b5 11       	cpse	r27, r5
      ba:	b5 11       	cpse	r27, r5
      bc:	98 11       	cpse	r25, r8
      be:	9c 11       	cpse	r25, r12
      c0:	a0 11       	cpse	r26, r0
      c2:	a6 11       	cpse	r26, r6
      c4:	aa 11       	cpse	r26, r10
      c6:	b5 11       	cpse	r27, r5
      c8:	b0 11       	cpse	r27, r0

000000ca <USB_DeviceDescriptorIAD>:
      ca:	12 01 00 02 ef 02 01 40 41 23 36 80 00 01 01 02     .......@A#6.....
      da:	03 01                                               ..

000000dc <STRING_MANUFACTURER>:
      dc:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

000000e8 <STRING_PRODUCT>:
      e8:	41 72 64 75 69 6e 6f 20 4c 65 6f 6e 61 72 64 6f     Arduino Leonardo
	...

000000f9 <STRING_LANGUAGE>:
      f9:	04 03 09 04                                         ....

000000fd <digital_pin_to_timer_PGM>:
      fd:	00 00 00 02 00 09 0f 00 00 03 04 01 00 0c 00 00     ................
	...

0000011c <digital_pin_to_bit_mask_PGM>:
     11c:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     12c:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

0000013b <digital_pin_to_port_PGM>:
     13b:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     14b:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

0000015a <port_to_output_PGM>:
     15a:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

00000168 <port_to_mode_PGM>:
     168:	00 00 00 00 24 00 27 00 2a 00 2d 00 30 00           ....$.'.*.-.0.

00000176 <_cdcInterface>:
     176:	08 0b 00 02 02 02 01 00 09 04 00 00 01 02 02 00     ................
     186:	00 05 24 00 10 01 05 24 01 01 01 04 24 02 06 05     ..$....$....$...
     196:	24 06 00 01 07 05 81 03 10 00 40 09 04 01 00 02     $.........@.....
     1a6:	0a 00 00 00 07 05 02 02 40 00 00 07 05 83 02 40     ........@......@
	...

000001b8 <__ctors_start>:
     1b8:	a8 01       	movw	r20, r16
     1ba:	45 0b       	sbc	r20, r21
     1bc:	26 13       	cpse	r18, r22

000001be <__ctors_end>:
     1be:	11 24       	eor	r1, r1
     1c0:	1f be       	out	0x3f, r1	; 63
     1c2:	cf ef       	ldi	r28, 0xFF	; 255
     1c4:	da e0       	ldi	r29, 0x0A	; 10
     1c6:	de bf       	out	0x3e, r29	; 62
     1c8:	cd bf       	out	0x3d, r28	; 61

000001ca <__do_copy_data>:
     1ca:	11 e0       	ldi	r17, 0x01	; 1
     1cc:	a0 e0       	ldi	r26, 0x00	; 0
     1ce:	b1 e0       	ldi	r27, 0x01	; 1
     1d0:	e8 e0       	ldi	r30, 0x08	; 8
     1d2:	f8 e2       	ldi	r31, 0x28	; 40
     1d4:	02 c0       	rjmp	.+4      	; 0x1da <__do_copy_data+0x10>
     1d6:	05 90       	lpm	r0, Z+
     1d8:	0d 92       	st	X+, r0
     1da:	ac 37       	cpi	r26, 0x7C	; 124
     1dc:	b1 07       	cpc	r27, r17
     1de:	d9 f7       	brne	.-10     	; 0x1d6 <__do_copy_data+0xc>

000001e0 <__do_clear_bss>:
     1e0:	22 e0       	ldi	r18, 0x02	; 2
     1e2:	ac e7       	ldi	r26, 0x7C	; 124
     1e4:	b1 e0       	ldi	r27, 0x01	; 1
     1e6:	01 c0       	rjmp	.+2      	; 0x1ea <.do_clear_bss_start>

000001e8 <.do_clear_bss_loop>:
     1e8:	1d 92       	st	X+, r1

000001ea <.do_clear_bss_start>:
     1ea:	af 3d       	cpi	r26, 0xDF	; 223
     1ec:	b2 07       	cpc	r27, r18
     1ee:	e1 f7       	brne	.-8      	; 0x1e8 <.do_clear_bss_loop>

000001f0 <__do_global_ctors>:
     1f0:	10 e0       	ldi	r17, 0x00	; 0
     1f2:	cf ed       	ldi	r28, 0xDF	; 223
     1f4:	d0 e0       	ldi	r29, 0x00	; 0
     1f6:	04 c0       	rjmp	.+8      	; 0x200 <__do_global_ctors+0x10>
     1f8:	21 97       	sbiw	r28, 0x01	; 1
     1fa:	fe 01       	movw	r30, r28
     1fc:	0e 94 f7 13 	call	0x27ee	; 0x27ee <__tablejump2__>
     200:	cc 3d       	cpi	r28, 0xDC	; 220
     202:	d1 07       	cpc	r29, r17
     204:	c9 f7       	brne	.-14     	; 0x1f8 <__do_global_ctors+0x8>
     206:	0e 94 4c 0b 	call	0x1698	; 0x1698 <main>
     20a:	0c 94 02 14 	jmp	0x2804	; 0x2804 <_exit>

0000020e <__bad_interrupt>:
     20e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000212 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	08 95       	ret

00000218 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     218:	08 95       	ret

0000021a <_ZN7hd4478013iosetContrastEh>:
	// i/o subclass functions
	virtual int ioinit() {return 0;}	// optional - successful if not implemented
	virtual int ioread(hd44780::iotype type) {if(type) return(RV_ENOTSUP);else return(RV_ENOTSUP);}	// optional, return fail if not implemented
	virtual int iowrite(hd44780::iotype type, uint8_t value)=0;// mandatory
	virtual int iosetBacklight(uint8_t dimvalue){if(dimvalue) return(RV_ENOTSUP); else return(RV_ENOTSUP);}	// optional
	virtual int iosetContrast(uint8_t contvalue){if(contvalue) return(RV_ENOTSUP); else return(RV_ENOTSUP);}// optional
     21a:	8d ef       	ldi	r24, 0xFD	; 253
     21c:	9f ef       	ldi	r25, 0xFF	; 255
     21e:	08 95       	ret

00000220 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>:
	else
		_blCurState = 0;
}

//  LocateDevice() - Locate I2C expander device instance
uint8_t LocateDevice(uint8_t instance)
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	18 2f       	mov	r17, r24
{
uint8_t error, address;
uint8_t locinst = 0;
     22a:	d0 e0       	ldi	r29, 0x00	; 0

	// 8 addresses for PCF8574 or MCP23008
	for(address = 0x20; address <= 0x27; address++ )
     22c:	c0 e2       	ldi	r28, 0x20	; 32
	{
		Wire.beginTransmission(address);
     22e:	6c 2f       	mov	r22, r28
     230:	89 e1       	ldi	r24, 0x19	; 25
     232:	92 e0       	ldi	r25, 0x02	; 2
     234:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire17beginTransmissionEh>
		error = Wire.endTransmission();
     238:	89 e1       	ldi	r24, 0x19	; 25
     23a:	92 e0       	ldi	r25, 0x02	; 2
     23c:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZN7TwoWire15endTransmissionEv>
     240:	08 2f       	mov	r16, r24
		// below 20us will cause it to fail
		// ESP8286 needs to make sure WDT doesn't fire so we use delay()
		// The delay(1) is overkill and not needed for other chips, but it won't
		// hurt and the loop is only 8 addresses.
		
		delay(1);
     242:	61 e0       	ldi	r22, 0x01	; 1
     244:	70 e0       	ldi	r23, 0x00	; 0
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay>
		if(error == 0) // if no error we found something
     24e:	01 11       	cpse	r16, r1
     250:	03 c0       	rjmp	.+6      	; 0x258 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x38>
		{
			if(locinst == instance)
     252:	1d 17       	cp	r17, r29
     254:	f9 f0       	breq	.+62     	; 0x294 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x74>
				if(IdentifyIOexp(address) == I2Cexp_UNKNOWN) // if we can't identify it, keep looking
					continue;
#endif
				return(address);
			}
			locinst++;
     256:	df 5f       	subi	r29, 0xFF	; 255
{
uint8_t error, address;
uint8_t locinst = 0;

	// 8 addresses for PCF8574 or MCP23008
	for(address = 0x20; address <= 0x27; address++ )
     258:	cf 5f       	subi	r28, 0xFF	; 255
     25a:	c8 32       	cpi	r28, 0x28	; 40
     25c:	41 f7       	brne	.-48     	; 0x22e <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0xe>
     25e:	c8 e3       	ldi	r28, 0x38	; 56
		}
	}
	// 8 addresses for PCF8574A
	for(address = 0x38; address <= 0x3f; address++ )
	{
		Wire.beginTransmission(address);
     260:	6c 2f       	mov	r22, r28
     262:	89 e1       	ldi	r24, 0x19	; 25
     264:	92 e0       	ldi	r25, 0x02	; 2
     266:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire17beginTransmissionEh>
		error = Wire.endTransmission();
     26a:	89 e1       	ldi	r24, 0x19	; 25
     26c:	92 e0       	ldi	r25, 0x02	; 2
     26e:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZN7TwoWire15endTransmissionEv>
     272:	08 2f       	mov	r16, r24
		// below 20us will cause it to fail.
		// ESP8286 needs to make sure WDT doesn't fire so we use delay()
		// The delay(1) is overkill and not needed for other chips, but it won't
		// hurt and the loop is only 8 addresses.
		
		delay(1);
     274:	61 e0       	ldi	r22, 0x01	; 1
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay>
		if(error == 0) // if no error we found something
     280:	01 11       	cpse	r16, r1
     282:	03 c0       	rjmp	.+6      	; 0x28a <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x6a>
		{
			if(locinst == instance)
     284:	1d 17       	cp	r17, r29
     286:	31 f0       	breq	.+12     	; 0x294 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x74>
				if(IdentifyIOexp(address) == I2Cexp_UNKNOWN) // if we can't identify it, keep looking
					continue;
#endif
				return(address);
			}
			locinst++;
     288:	df 5f       	subi	r29, 0xFF	; 255
			}
			locinst++;
		}
	}
	// 8 addresses for PCF8574A
	for(address = 0x38; address <= 0x3f; address++ )
     28a:	cf 5f       	subi	r28, 0xFF	; 255
     28c:	c0 34       	cpi	r28, 0x40	; 64
     28e:	41 f7       	brne	.-48     	; 0x260 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x40>
				return(address);
			}
			locinst++;
		}
	}
	return(0); // could not locate expander instance
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	01 c0       	rjmp	.+2      	; 0x296 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x76>
		// hurt and the loop is only 8 addresses.
		
		delay(1);
		if(error == 0) // if no error we found something
		{
			if(locinst == instance)
     294:	8c 2f       	mov	r24, r28
			}
			locinst++;
		}
	}
	return(0); // could not locate expander instance
}
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	1f 91       	pop	r17
     29c:	0f 91       	pop	r16
     29e:	08 95       	ret

000002a0 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     2a0:	dc 01       	movw	r26, r24
     2a2:	ed 91       	ld	r30, X+
     2a4:	fc 91       	ld	r31, X
     2a6:	01 90       	ld	r0, Z+
     2a8:	f0 81       	ld	r31, Z
     2aa:	e0 2d       	mov	r30, r0
     2ac:	09 94       	ijmp

000002ae <setup>:

int count;

void setup() {
  int status;
  status = lcd.begin(LCD_COLS, LCD_ROWS); //Starts the LCD 
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	42 e0       	ldi	r20, 0x02	; 2
     2b2:	60 e1       	ldi	r22, 0x10	; 16
     2b4:	8e e7       	ldi	r24, 0x7E	; 126
     2b6:	91 e0       	ldi	r25, 0x01	; 1
     2b8:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN7hd447805beginEhhh>
  
  if(status) {
     2bc:	00 97       	sbiw	r24, 0x00	; 0
     2be:	29 f0       	breq	.+10     	; 0x2ca <setup+0x1c>
    status = -status;
    hd44780::fatalError(status);
     2c0:	91 95       	neg	r25
     2c2:	81 95       	neg	r24
     2c4:	91 09       	sbc	r25, r1
     2c6:	0e 94 a3 07 	call	0xf46	; 0xf46 <_ZN7hd4478010fatalErrorEi>
  }

  lcd.off();
     2ca:	8e e7       	ldi	r24, 0x7E	; 126
     2cc:	91 e0       	ldi	r25, 0x01	; 1
     2ce:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_ZN7hd447803offEv>
  lcd.display();
     2d2:	8e e7       	ldi	r24, 0x7E	; 126
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	0e 94 83 06 	call	0xd06	; 0xd06 <_ZN7hd447807displayEv>

  lcd.print("Hello, World!"); //Print a message on the LCD
     2da:	63 e1       	ldi	r22, 0x13	; 19
     2dc:	71 e0       	ldi	r23, 0x01	; 1
     2de:	8e e7       	ldi	r24, 0x7E	; 126
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	0e 94 9e 0b 	call	0x173c	; 0x173c <_ZN5Print5printEPKc>
  
 count = 0;
     2e6:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <__data_end+0x1>
     2ea:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <__data_end>
     2ee:	08 95       	ret

000002f0 <loop>:

void loop() {
	
	//millis() -> Gibt die aktuelle Zeit in ms zurück
	
	delay(1000);
     2f0:	68 ee       	ldi	r22, 0xE8	; 232
     2f2:	73 e0       	ldi	r23, 0x03	; 3
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay>
	lcd.clear();
     2fc:	8e e7       	ldi	r24, 0x7E	; 126
     2fe:	91 e0       	ldi	r25, 0x01	; 1
     300:	0e 94 51 06 	call	0xca2	; 0xca2 <_ZN7hd447805clearEv>
	lcd.print("Time: ");
     304:	61 e2       	ldi	r22, 0x21	; 33
     306:	71 e0       	ldi	r23, 0x01	; 1
     308:	8e e7       	ldi	r24, 0x7E	; 126
     30a:	91 e0       	ldi	r25, 0x01	; 1
     30c:	0e 94 9e 0b 	call	0x173c	; 0x173c <_ZN5Print5printEPKc>
	lcd.print(count);
     310:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <__data_end>
     314:	70 91 7d 01 	lds	r23, 0x017D	; 0x80017d <__data_end+0x1>
     318:	4a e0       	ldi	r20, 0x0A	; 10
     31a:	50 e0       	ldi	r21, 0x00	; 0
     31c:	8e e7       	ldi	r24, 0x7E	; 126
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	0e 94 38 0c 	call	0x1870	; 0x1870 <_ZN5Print5printEii>
	lcd.setCursor(0,2);
     324:	42 e0       	ldi	r20, 0x02	; 2
     326:	60 e0       	ldi	r22, 0x00	; 0
     328:	8e e7       	ldi	r24, 0x7E	; 126
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	0e 94 54 06 	call	0xca8	; 0xca8 <_ZN7hd447809setCursorEhh>
	lcd.print("AA");
     330:	68 e2       	ldi	r22, 0x28	; 40
     332:	71 e0       	ldi	r23, 0x01	; 1
     334:	8e e7       	ldi	r24, 0x7E	; 126
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	0e 94 9e 0b 	call	0x173c	; 0x173c <_ZN5Print5printEPKc>
	
	count++;
     33c:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
     340:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <__data_end+0x1>
     344:	01 96       	adiw	r24, 0x01	; 1
     346:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <__data_end+0x1>
     34a:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
     34e:	08 95       	ret

00000350 <_GLOBAL__sub_I_lcd>:
// ====================

//	-- Automagic / auto-detect constructors --

// Auto find next instance and auto config pin mapping
hd44780_I2Cexp(){ _addr = 0; _expType = I2Cexp_UNKNOWN;}
     350:	8e e7       	ldi	r24, 0x7E	; 126
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	0e 94 dd 05 	call	0xbba	; 0xbba <_ZN7hd44780C1Ev>
     358:	ee e7       	ldi	r30, 0x7E	; 126
     35a:	f1 e0       	ldi	r31, 0x01	; 1
     35c:	8f e2       	ldi	r24, 0x2F	; 47
     35e:	91 e0       	ldi	r25, 0x01	; 1
     360:	91 83       	std	Z+1, r25	; 0x01
     362:	80 83       	st	Z, r24
     364:	10 a2       	std	Z+32, r1	; 0x20
     366:	11 a2       	std	Z+33, r1	; 0x21
     368:	08 95       	ret

0000036a <_ZN14hd44780_I2Cexp14iosetBacklightEh>:
}

// iosetBacklight()  - set backlight brightness
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	fc 01       	movw	r30, r24
{
	if(!_bl) // backlight control?
     370:	81 a5       	ldd	r24, Z+41	; 0x29
     372:	88 23       	and	r24, r24
     374:	71 f1       	breq	.+92     	; 0x3d2 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x68>
     376:	92 a5       	ldd	r25, Z+42	; 0x2a
		return(hd44780::RV_ENOTSUP); // not backlight control support

	// dimvalue 0 is backlight off any other dimvalue is backlight on
	// configure backlight state mask according to active level
	if(((dimvalue) && (_blLevel == HIGH)) || 
     378:	66 23       	and	r22, r22
     37a:	19 f0       	breq	.+6      	; 0x382 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x18>
     37c:	91 30       	cpi	r25, 0x01	; 1
     37e:	29 f4       	brne	.+10     	; 0x38a <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
     380:	02 c0       	rjmp	.+4      	; 0x386 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x1c>
			((dimvalue == 0) && (_blLevel == LOW)))
     382:	91 11       	cpse	r25, r1
     384:	02 c0       	rjmp	.+4      	; 0x38a <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
	{
		_blCurState = _bl;
     386:	83 a7       	std	Z+43, r24	; 0x2b
     388:	01 c0       	rjmp	.+2      	; 0x38c <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x22>
	}
	else 
	{
		_blCurState = 0;
     38a:	13 a6       	std	Z+43, r1	; 0x2b
     38c:	ef 01       	movw	r28, r30
	}
	Wire.beginTransmission(_addr);
     38e:	60 a1       	ldd	r22, Z+32	; 0x20
     390:	89 e1       	ldi	r24, 0x19	; 25
     392:	92 e0       	ldi	r25, 0x02	; 2
     394:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
     398:	89 a1       	ldd	r24, Y+33	; 0x21
     39a:	82 30       	cpi	r24, 0x02	; 2
     39c:	31 f4       	brne	.+12     	; 0x3aa <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x40>
	{
		Wire.write(9); // point to GPIO
     39e:	69 e0       	ldi	r22, 0x09	; 9
     3a0:	70 e0       	ldi	r23, 0x00	; 0
     3a2:	89 e1       	ldi	r24, 0x19	; 25
     3a4:	92 e0       	ldi	r25, 0x02	; 2
     3a6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_ZN7TwoWire5writeEi>
	}
	Wire.write( _blCurState );
     3aa:	6b a5       	ldd	r22, Y+43	; 0x2b
     3ac:	89 e1       	ldi	r24, 0x19	; 25
     3ae:	92 e0       	ldi	r25, 0x02	; 2
     3b0:	0e 94 6d 0a 	call	0x14da	; 0x14da <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     3b4:	89 e1       	ldi	r24, 0x19	; 25
     3b6:	92 e0       	ldi	r25, 0x02	; 2
     3b8:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZN7TwoWire15endTransmissionEv>
     3bc:	21 e0       	ldi	r18, 0x01	; 1
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	81 11       	cpse	r24, r1
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x5e>
     3c4:	20 e0       	ldi	r18, 0x00	; 0
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	88 27       	eor	r24, r24
     3ca:	99 27       	eor	r25, r25
     3cc:	82 1b       	sub	r24, r18
     3ce:	93 0b       	sbc	r25, r19
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x6c>
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
{
	if(!_bl) // backlight control?
		return(hd44780::RV_ENOTSUP); // not backlight control support
     3d2:	8d ef       	ldi	r24, 0xFD	; 253
     3d4:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write( _blCurState );
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR); // all is good
}
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	08 95       	ret

000003dc <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>:
	return(0);
}


// write4bits - send a nibble to the LCD through i/o expander port
void write4bits(uint8_t value, hd44780::iotype type ) 
     3dc:	cf 93       	push	r28
     3de:	fc 01       	movw	r30, r24
{
uint8_t gpioValue =  _blCurState;
     3e0:	c3 a5       	ldd	r28, Z+43	; 0x2b
   
	// convert the value to an i/o expander port value
	// based on pin mappings
	if(value & (1 << 0))
     3e2:	60 ff       	sbrs	r22, 0
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0xe>
		gpioValue |= _d4;
     3e6:	85 a1       	ldd	r24, Z+37	; 0x25
     3e8:	c8 2b       	or	r28, r24

	if(value & (1 << 1))
     3ea:	61 ff       	sbrs	r22, 1
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x16>
		gpioValue |= _d5;
     3ee:	86 a1       	ldd	r24, Z+38	; 0x26
     3f0:	c8 2b       	or	r28, r24

	if(value & (1 << 2))
     3f2:	62 ff       	sbrs	r22, 2
     3f4:	02 c0       	rjmp	.+4      	; 0x3fa <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x1e>
		gpioValue |= _d6;
     3f6:	87 a1       	ldd	r24, Z+39	; 0x27
     3f8:	c8 2b       	or	r28, r24

	if(value & (1 << 3))
     3fa:	63 ff       	sbrs	r22, 3
     3fc:	02 c0       	rjmp	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		gpioValue |= _d7;
     3fe:	80 a5       	ldd	r24, Z+40	; 0x28
     400:	c8 2b       	or	r28, r24


	if(type == hd44780::HD44780_IOdata) 
     402:	41 30       	cpi	r20, 0x01	; 1
     404:	11 f4       	brne	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	{
		gpioValue |= _rs; // set RS high to send to data reg
     406:	82 a1       	ldd	r24, Z+34	; 0x22
     408:	c8 2b       	or	r28, r24
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
     40a:	64 a1       	ldd	r22, Z+36	; 0x24
     40c:	6c 2b       	or	r22, r28
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	89 e1       	ldi	r24, 0x19	; 25
     412:	92 e0       	ldi	r25, 0x02	; 2
     414:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_ZN7TwoWire5writeEi>
	Wire.write(gpioValue);		// with E LOW
     418:	6c 2f       	mov	r22, r28
     41a:	89 e1       	ldi	r24, 0x19	; 25
     41c:	92 e0       	ldi	r25, 0x02	; 2
}
     41e:	cf 91       	pop	r28
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
	Wire.write(gpioValue);		// with E LOW
     420:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <_ZN7TwoWire5writeEh>

00000424 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh>:
	return(rval);
}

// iowrite(type, value) - send either command or data byte to lcd
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
     424:	8f 92       	push	r8
     426:	9f 92       	push	r9
     428:	af 92       	push	r10
     42a:	bf 92       	push	r11
     42c:	cf 92       	push	r12
     42e:	df 92       	push	r13
     430:	ef 92       	push	r14
     432:	ff 92       	push	r15
     434:	0f 93       	push	r16
     436:	1f 93       	push	r17
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	ec 01       	movw	r28, r24
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
     43e:	88 a1       	ldd	r24, Y+32	; 0x20
     440:	88 23       	and	r24, r24
     442:	09 f4       	brne	.+2      	; 0x446 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x22>
     444:	50 c0       	rjmp	.+160    	; 0x4e6 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
     446:	89 a1       	ldd	r24, Y+33	; 0x21
     448:	88 23       	and	r24, r24
     44a:	09 f4       	brne	.+2      	; 0x44e <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x2a>
     44c:	4c c0       	rjmp	.+152    	; 0x4e6 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
     44e:	14 2f       	mov	r17, r20
     450:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
     452:	8c 8c       	ldd	r8, Y+28	; 0x1c
     454:	9d 8c       	ldd	r9, Y+29	; 0x1d
     456:	ae 8c       	ldd	r10, Y+30	; 0x1e
     458:	bf 8c       	ldd	r11, Y+31	; 0x1f
     45a:	c8 8c       	ldd	r12, Y+24	; 0x18
     45c:	d9 8c       	ldd	r13, Y+25	; 0x19
     45e:	ea 8c       	ldd	r14, Y+26	; 0x1a
     460:	fb 8c       	ldd	r15, Y+27	; 0x1b
     462:	8d e2       	ldi	r24, 0x2D	; 45
     464:	c8 1a       	sub	r12, r24
     466:	d1 08       	sbc	r13, r1
     468:	e1 08       	sbc	r14, r1
     46a:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
     46c:	0e 94 c2 10 	call	0x2184	; 0x2184 <micros>
     470:	dc 01       	movw	r26, r24
     472:	cb 01       	movw	r24, r22
     474:	8c 19       	sub	r24, r12
     476:	9d 09       	sbc	r25, r13
     478:	ae 09       	sbc	r26, r14
     47a:	bf 09       	sbc	r27, r15
     47c:	88 15       	cp	r24, r8
     47e:	99 05       	cpc	r25, r9
     480:	aa 05       	cpc	r26, r10
     482:	bb 05       	cpc	r27, r11
     484:	98 f3       	brcs	.-26     	; 0x46c <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x48>
	 */

	waitReady(-45);
   
	// grab i2c bus
	Wire.beginTransmission(_addr);
     486:	68 a1       	ldd	r22, Y+32	; 0x20
     488:	89 e1       	ldi	r24, 0x19	; 25
     48a:	92 e0       	ldi	r25, 0x02	; 2
     48c:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
     490:	89 a1       	ldd	r24, Y+33	; 0x21
     492:	82 30       	cpi	r24, 0x02	; 2
     494:	31 f4       	brne	.+12     	; 0x4a2 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x7e>
	{
		Wire.write(9); // point to GPIO
     496:	69 e0       	ldi	r22, 0x09	; 9
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	89 e1       	ldi	r24, 0x19	; 25
     49c:	92 e0       	ldi	r25, 0x02	; 2
     49e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_ZN7TwoWire5writeEi>
	}
	// send both nibbles in same i2c connection
	write4bits( (value >> 4), type );  // send upper nibble
     4a2:	61 2f       	mov	r22, r17
     4a4:	70 e0       	ldi	r23, 0x00	; 0
     4a6:	84 e0       	ldi	r24, 0x04	; 4
     4a8:	75 95       	asr	r23
     4aa:	67 95       	ror	r22
     4ac:	8a 95       	dec	r24
     4ae:	e1 f7       	brne	.-8      	; 0x4a8 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x84>
     4b0:	40 2f       	mov	r20, r16
     4b2:	ce 01       	movw	r24, r28
     4b4:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	 * are used to reliably get the LCD and host in nibble sync
	 * with each other and to get the LCD into 4 bit mode.
	 * When sending a "4 bit command" only the upper nibble of
	 * of the 8 bit byte will presented on LCD signals D4-D7.
	 */
	if(type != hd44780::HD44780_IOcmd4bit)
     4b8:	02 30       	cpi	r16, 0x02	; 2
     4ba:	31 f0       	breq	.+12     	; 0x4c8 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xa4>
	{
		write4bits( (value & 0x0F), type); // lower nibble, if not 4bit cmd
     4bc:	61 2f       	mov	r22, r17
     4be:	6f 70       	andi	r22, 0x0F	; 15
     4c0:	40 2f       	mov	r20, r16
     4c2:	ce 01       	movw	r24, r28
     4c4:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	}
	if(Wire.endTransmission())
     4c8:	89 e1       	ldi	r24, 0x19	; 25
     4ca:	92 e0       	ldi	r25, 0x02	; 2
     4cc:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZN7TwoWire15endTransmissionEv>
     4d0:	21 e0       	ldi	r18, 0x01	; 1
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	81 11       	cpse	r24, r1
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xb8>
     4d8:	20 e0       	ldi	r18, 0x00	; 0
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	88 27       	eor	r24, r24
     4de:	99 27       	eor	r25, r25
     4e0:	82 1b       	sub	r24, r18
     4e2:	93 0b       	sbc	r25, r19
     4e4:	02 c0       	rjmp	.+4      	; 0x4ea <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc6>
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
     4e6:	8c ef       	ldi	r24, 0xFC	; 252
     4e8:	9f ef       	ldi	r25, 0xFF	; 255
	}
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR);
}
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	1f 91       	pop	r17
     4f0:	0f 91       	pop	r16
     4f2:	ff 90       	pop	r15
     4f4:	ef 90       	pop	r14
     4f6:	df 90       	pop	r13
     4f8:	cf 90       	pop	r12
     4fa:	bf 90       	pop	r11
     4fc:	af 90       	pop	r10
     4fe:	9f 90       	pop	r9
     500:	8f 90       	pop	r8
     502:	08 95       	ret

00000504 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE>:
// ioread(type) - read a byte from LCD DDRAM
//
// returns:
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
     504:	8f 92       	push	r8
     506:	9f 92       	push	r9
     508:	af 92       	push	r10
     50a:	bf 92       	push	r11
     50c:	cf 92       	push	r12
     50e:	df 92       	push	r13
     510:	ef 92       	push	r14
     512:	ff 92       	push	r15
     514:	0f 93       	push	r16
     516:	1f 93       	push	r17
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	ec 01       	movw	r28, r24
{
uint8_t gpioValue =  _blCurState;
     51e:	1b a5       	ldd	r17, Y+43	; 0x2b
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
     520:	88 a1       	ldd	r24, Y+32	; 0x20
     522:	88 23       	and	r24, r24
     524:	09 f4       	brne	.+2      	; 0x528 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x24>
     526:	f6 c0       	rjmp	.+492    	; 0x714 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
     528:	89 a1       	ldd	r24, Y+33	; 0x21
     52a:	88 23       	and	r24, r24
     52c:	09 f4       	brne	.+2      	; 0x530 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x2c>
     52e:	f2 c0       	rjmp	.+484    	; 0x714 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
		return(hd44780::RV_ENXIO);

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
     530:	82 30       	cpi	r24, 0x02	; 2
     532:	09 f4       	brne	.+2      	; 0x536 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x32>
     534:	f1 c0       	rjmp	.+482    	; 0x718 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
	{
		return(hd44780::RV_ENOTSUP);
	}

	// check if reads supported
	if(!_rw)
     536:	8b a1       	ldd	r24, Y+35	; 0x23
     538:	88 23       	and	r24, r24
     53a:	09 f4       	brne	.+2      	; 0x53e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x3a>
     53c:	ed c0       	rjmp	.+474    	; 0x718 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
     53e:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
     540:	8c 8c       	ldd	r8, Y+28	; 0x1c
     542:	9d 8c       	ldd	r9, Y+29	; 0x1d
     544:	ae 8c       	ldd	r10, Y+30	; 0x1e
     546:	bf 8c       	ldd	r11, Y+31	; 0x1f
     548:	c8 8c       	ldd	r12, Y+24	; 0x18
     54a:	d9 8c       	ldd	r13, Y+25	; 0x19
     54c:	ea 8c       	ldd	r14, Y+26	; 0x1a
     54e:	fb 8c       	ldd	r15, Y+27	; 0x1b
     550:	8d e2       	ldi	r24, 0x2D	; 45
     552:	c8 1a       	sub	r12, r24
     554:	d1 08       	sbc	r13, r1
     556:	e1 08       	sbc	r14, r1
     558:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
     55a:	0e 94 c2 10 	call	0x2184	; 0x2184 <micros>
     55e:	dc 01       	movw	r26, r24
     560:	cb 01       	movw	r24, r22
     562:	8c 19       	sub	r24, r12
     564:	9d 09       	sbc	r25, r13
     566:	ae 09       	sbc	r26, r14
     568:	bf 09       	sbc	r27, r15
     56a:	88 15       	cp	r24, r8
     56c:	99 05       	cpc	r25, r9
     56e:	aa 05       	cpc	r26, r10
     570:	bb 05       	cpc	r27, r11
     572:	98 f3       	brcs	.-26     	; 0x55a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x56>
     574:	8d a1       	ldd	r24, Y+37	; 0x25
     576:	18 2b       	or	r17, r24
     578:	8e a1       	ldd	r24, Y+38	; 0x26
     57a:	18 2b       	or	r17, r24
     57c:	8f a1       	ldd	r24, Y+39	; 0x27
     57e:	18 2b       	or	r17, r24
   
	// put all the expander LCD data pins into input mode.
	// PCF8574 psuedo inputs use pullups so setting them to 1
	// makes them suitible for inputs.

	gpioValue |= _d4|_d5|_d6|_d7;
     580:	88 a5       	ldd	r24, Y+40	; 0x28
     582:	18 2b       	or	r17, r24

	// set RS based on type of read (data or status/cmd)
	if(type == hd44780::HD44780_IOdata) 
     584:	01 30       	cpi	r16, 0x01	; 1
     586:	11 f4       	brne	.+4      	; 0x58c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x88>
	{
		gpioValue |= _rs; // RS high to read data reg
     588:	8a a1       	ldd	r24, Y+34	; 0x22
     58a:	18 2b       	or	r17, r24
	}

	gpioValue |= _rw; // r/w high for reading
     58c:	8b a1       	ldd	r24, Y+35	; 0x23
     58e:	18 2b       	or	r17, r24

	// write all the bits to the expander port
	
	Wire.beginTransmission(_addr);
     590:	68 a1       	ldd	r22, Y+32	; 0x20
     592:	89 e1       	ldi	r24, 0x19	; 25
     594:	92 e0       	ldi	r25, 0x02	; 2
     596:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue);		// d4-d7 are inputs, RS, r/w high, E LOW
     59a:	61 2f       	mov	r22, r17
     59c:	89 e1       	ldi	r24, 0x19	; 25
     59e:	92 e0       	ldi	r25, 0x02	; 2
     5a0:	0e 94 6d 0a 	call	0x14da	; 0x14da <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     5a4:	89 e1       	ldi	r24, 0x19	; 25
     5a6:	92 e0       	ldi	r25, 0x02	; 2
     5a8:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZN7TwoWire15endTransmissionEv>
     5ac:	88 23       	and	r24, r24
     5ae:	19 f0       	breq	.+6      	; 0x5b6 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xb2>
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;
     5b0:	0f ef       	ldi	r16, 0xFF	; 255
     5b2:	1f ef       	ldi	r17, 0xFF	; 255
     5b4:	9d c0       	rjmp	.+314    	; 0x6f0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ec>
	if(Wire.endTransmission())
		goto returnStatus;


	// raise E to read the data.
	Wire.beginTransmission(_addr);
     5b6:	68 a1       	ldd	r22, Y+32	; 0x20
     5b8:	89 e1       	ldi	r24, 0x19	; 25
     5ba:	92 e0       	ldi	r25, 0x02	; 2
     5bc:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raises E 
     5c0:	6c a1       	ldd	r22, Y+36	; 0x24
     5c2:	61 2b       	or	r22, r17
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	89 e1       	ldi	r24, 0x19	; 25
     5c8:	92 e0       	ldi	r25, 0x02	; 2
     5ca:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
     5ce:	89 e1       	ldi	r24, 0x19	; 25
     5d0:	92 e0       	ldi	r25, 0x02	; 2
     5d2:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZN7TwoWire15endTransmissionEv>
     5d6:	81 11       	cpse	r24, r1
     5d8:	eb cf       	rjmp	.-42     	; 0x5b0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// read the expander port to get the upper nibble of the byte
	Wire.requestFrom((int)_addr, 1);
     5da:	68 a1       	ldd	r22, Y+32	; 0x20
     5dc:	70 e0       	ldi	r23, 0x00	; 0
     5de:	41 e0       	ldi	r20, 0x01	; 1
     5e0:	50 e0       	ldi	r21, 0x00	; 0
     5e2:	89 e1       	ldi	r24, 0x19	; 25
     5e4:	92 e0       	ldi	r25, 0x02	; 2
     5e6:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN7TwoWire11requestFromEii>
	iodata = Wire.read();
     5ea:	89 e1       	ldi	r24, 0x19	; 25
     5ec:	92 e0       	ldi	r25, 0x02	; 2
     5ee:	0e 94 e6 09 	call	0x13cc	; 0x13cc <_ZN7TwoWire4readEv>
     5f2:	7c 01       	movw	r14, r24
	if(iodata < 0) // did we not receive a byte?
     5f4:	97 fd       	sbrc	r25, 7
     5f6:	dc cf       	rjmp	.-72     	; 0x5b0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
     5f8:	68 a1       	ldd	r22, Y+32	; 0x20
     5fa:	89 e1       	ldi	r24, 0x19	; 25
     5fc:	92 e0       	ldi	r25, 0x02	; 2
     5fe:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
     602:	61 2f       	mov	r22, r17
     604:	89 e1       	ldi	r24, 0x19	; 25
     606:	92 e0       	ldi	r25, 0x02	; 2
     608:	0e 94 6d 0a 	call	0x14da	; 0x14da <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     60c:	89 e1       	ldi	r24, 0x19	; 25
     60e:	92 e0       	ldi	r25, 0x02	; 2
     610:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZN7TwoWire15endTransmissionEv>
     614:	81 11       	cpse	r24, r1
     616:	cc cf       	rjmp	.-104    	; 0x5b0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
     618:	8d a1       	ldd	r24, Y+37	; 0x25
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	8e 21       	and	r24, r14
     61e:	9f 21       	and	r25, r15
     620:	89 2b       	or	r24, r25
     622:	11 f4       	brne	.+4      	; 0x628 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x124>
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
     624:	00 e0       	ldi	r16, 0x00	; 0
     626:	01 c0       	rjmp	.+2      	; 0x62a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x126>
	if(Wire.endTransmission())
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
		data |= (1 << 4);
     628:	00 e1       	ldi	r16, 0x10	; 16

	if(iodata & _d5)
     62a:	8e a1       	ldd	r24, Y+38	; 0x26
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	8e 21       	and	r24, r14
     630:	9f 21       	and	r25, r15
     632:	89 2b       	or	r24, r25
     634:	09 f0       	breq	.+2      	; 0x638 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x134>
		data |= (1 << 5);
     636:	00 62       	ori	r16, 0x20	; 32

	if(iodata & _d6)
     638:	8f a1       	ldd	r24, Y+39	; 0x27
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	8e 21       	and	r24, r14
     63e:	9f 21       	and	r25, r15
     640:	89 2b       	or	r24, r25
     642:	09 f0       	breq	.+2      	; 0x646 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x142>
		data |= (1 << 6);
     644:	00 64       	ori	r16, 0x40	; 64

	if(iodata & _d7)
     646:	88 a5       	ldd	r24, Y+40	; 0x28
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	e8 22       	and	r14, r24
     64c:	f9 22       	and	r15, r25
     64e:	ef 28       	or	r14, r15
     650:	09 f0       	breq	.+2      	; 0x654 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x150>
		data |= (1 << 7);
     652:	00 68       	ori	r16, 0x80	; 128
	
	Wire.beginTransmission(_addr);
     654:	68 a1       	ldd	r22, Y+32	; 0x20
     656:	89 e1       	ldi	r24, 0x19	; 25
     658:	92 e0       	ldi	r25, 0x02	; 2
     65a:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raise E to read next nibble
     65e:	6c a1       	ldd	r22, Y+36	; 0x24
     660:	61 2b       	or	r22, r17
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	89 e1       	ldi	r24, 0x19	; 25
     666:	92 e0       	ldi	r25, 0x02	; 2
     668:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
     66c:	89 e1       	ldi	r24, 0x19	; 25
     66e:	92 e0       	ldi	r25, 0x02	; 2
     670:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZN7TwoWire15endTransmissionEv>
     674:	81 11       	cpse	r24, r1
     676:	9c cf       	rjmp	.-200    	; 0x5b0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>

	// read the expander port to get the lower nibble of the byte
	// We can't look at the return value from requestFrom() on the TineyWireM
	// library as it doesn't work like it is supposed to.
	// So we look at the return status from read() instead.
	Wire.requestFrom((int)_addr, 1);
     678:	68 a1       	ldd	r22, Y+32	; 0x20
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	41 e0       	ldi	r20, 0x01	; 1
     67e:	50 e0       	ldi	r21, 0x00	; 0
     680:	89 e1       	ldi	r24, 0x19	; 25
     682:	92 e0       	ldi	r25, 0x02	; 2
     684:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN7TwoWire11requestFromEii>

	iodata = Wire.read();
     688:	89 e1       	ldi	r24, 0x19	; 25
     68a:	92 e0       	ldi	r25, 0x02	; 2
     68c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <_ZN7TwoWire4readEv>
     690:	7c 01       	movw	r14, r24

	if(iodata < 0) // did we not receive a byte?
     692:	97 fd       	sbrc	r25, 7
     694:	8d cf       	rjmp	.-230    	; 0x5b0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
     696:	68 a1       	ldd	r22, Y+32	; 0x20
     698:	89 e1       	ldi	r24, 0x19	; 25
     69a:	92 e0       	ldi	r25, 0x02	; 2
     69c:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
     6a0:	61 2f       	mov	r22, r17
     6a2:	89 e1       	ldi	r24, 0x19	; 25
     6a4:	92 e0       	ldi	r25, 0x02	; 2
     6a6:	0e 94 6d 0a 	call	0x14da	; 0x14da <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     6aa:	89 e1       	ldi	r24, 0x19	; 25
     6ac:	92 e0       	ldi	r25, 0x02	; 2
     6ae:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZN7TwoWire15endTransmissionEv>
     6b2:	81 11       	cpse	r24, r1
     6b4:	7d cf       	rjmp	.-262    	; 0x5b0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into lower nibble of byte
	if(iodata & _d4)
     6b6:	8d a1       	ldd	r24, Y+37	; 0x25
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	8e 21       	and	r24, r14
     6bc:	9f 21       	and	r25, r15
     6be:	89 2b       	or	r24, r25
     6c0:	09 f0       	breq	.+2      	; 0x6c4 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1c0>
		data |= (1 << 0);
     6c2:	01 60       	ori	r16, 0x01	; 1

	if(iodata & _d5)
     6c4:	8e a1       	ldd	r24, Y+38	; 0x26
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	8e 21       	and	r24, r14
     6ca:	9f 21       	and	r25, r15
     6cc:	89 2b       	or	r24, r25
     6ce:	09 f0       	breq	.+2      	; 0x6d2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ce>
		data |= (1 << 1);
     6d0:	02 60       	ori	r16, 0x02	; 2

	if(iodata & _d6)
     6d2:	8f a1       	ldd	r24, Y+39	; 0x27
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	8e 21       	and	r24, r14
     6d8:	9f 21       	and	r25, r15
     6da:	89 2b       	or	r24, r25
     6dc:	09 f0       	breq	.+2      	; 0x6e0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1dc>
		data |= (1 << 2);
     6de:	04 60       	ori	r16, 0x04	; 4

	if(iodata & _d7)
     6e0:	88 a5       	ldd	r24, Y+40	; 0x28
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	e8 22       	and	r14, r24
     6e6:	f9 22       	and	r15, r25
     6e8:	ef 28       	or	r14, r15
     6ea:	09 f0       	breq	.+2      	; 0x6ee <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ea>
		data |= (1 << 3);
     6ec:	08 60       	ori	r16, 0x08	; 8

	rval = data;
     6ee:	10 e0       	ldi	r17, 0x00	; 0

returnStatus:

	// try to put gpio port back to all outputs state with WR signal low for writes
	Wire.beginTransmission(_addr);
     6f0:	68 a1       	ldd	r22, Y+32	; 0x20
     6f2:	89 e1       	ldi	r24, 0x19	; 25
     6f4:	92 e0       	ldi	r25, 0x02	; 2
     6f6:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(_blCurState);		// with E LOW
     6fa:	6b a5       	ldd	r22, Y+43	; 0x2b
     6fc:	89 e1       	ldi	r24, 0x19	; 25
     6fe:	92 e0       	ldi	r25, 0x02	; 2
     700:	0e 94 6d 0a 	call	0x14da	; 0x14da <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     704:	89 e1       	ldi	r24, 0x19	; 25
     706:	92 e0       	ldi	r25, 0x02	; 2
     708:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZN7TwoWire15endTransmissionEv>
     70c:	88 23       	and	r24, r24
     70e:	39 f0       	breq	.+14     	; 0x71e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21a>
		rval = hd44780::RV_EIO;
     710:	8f ef       	ldi	r24, 0xFF	; 255
     712:	03 c0       	rjmp	.+6      	; 0x71a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
     714:	8c ef       	ldi	r24, 0xFC	; 252
     716:	01 c0       	rjmp	.+2      	; 0x71a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
	{
		return(hd44780::RV_ENOTSUP);
     718:	8d ef       	ldi	r24, 0xFD	; 253
     71a:	9f ef       	ldi	r25, 0xFF	; 255
     71c:	01 c0       	rjmp	.+2      	; 0x720 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21c>
     71e:	c8 01       	movw	r24, r16
	Wire.write(_blCurState);		// with E LOW
	if(Wire.endTransmission())
		rval = hd44780::RV_EIO;

	return(rval);
}
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	1f 91       	pop	r17
     726:	0f 91       	pop	r16
     728:	ff 90       	pop	r15
     72a:	ef 90       	pop	r14
     72c:	df 90       	pop	r13
     72e:	cf 90       	pop	r12
     730:	bf 90       	pop	r11
     732:	af 90       	pop	r10
     734:	9f 90       	pop	r9
     736:	8f 90       	pop	r8
     738:	08 95       	ret

0000073a <_ZN14hd44780_I2Cexp11autocfg8574Ev>:
 * a new resistor to  connect to the base of the transistor.
 * 
 * As a result the SYDZ backpack cannot use autoconfiguration.
 */

int autocfg8574()
     73a:	0f 93       	push	r16
     73c:	1f 93       	push	r17
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	ec 01       	movw	r28, r24
uint8_t data, data2;
uint8_t rs, rw, en, d4, d5, d6, d7, bl, blLevel;

	// First put a 0xff in the output port

	Wire.beginTransmission(_addr);
     744:	68 a1       	ldd	r22, Y+32	; 0x20
     746:	89 e1       	ldi	r24, 0x19	; 25
     748:	92 e0       	ldi	r25, 0x02	; 2
     74a:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0xff);
     74e:	6f ef       	ldi	r22, 0xFF	; 255
     750:	89 e1       	ldi	r24, 0x19	; 25
     752:	92 e0       	ldi	r25, 0x02	; 2
     754:	0e 94 6d 0a 	call	0x14da	; 0x14da <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
     758:	89 e1       	ldi	r24, 0x19	; 25
     75a:	92 e0       	ldi	r25, 0x02	; 2
     75c:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZN7TwoWire15endTransmissionEv>

	// now read back from the port

	Wire.requestFrom((int)_addr, 1);
     760:	68 a1       	ldd	r22, Y+32	; 0x20
     762:	70 e0       	ldi	r23, 0x00	; 0
     764:	41 e0       	ldi	r20, 0x01	; 1
     766:	50 e0       	ldi	r21, 0x00	; 0
     768:	89 e1       	ldi	r24, 0x19	; 25
     76a:	92 e0       	ldi	r25, 0x02	; 2
     76c:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
     770:	89 e1       	ldi	r24, 0x19	; 25
     772:	92 e0       	ldi	r25, 0x02	; 2
     774:	0e 94 e6 09 	call	0x13cc	; 0x13cc <_ZN7TwoWire4readEv>
     778:	8c 01       	movw	r16, r24

	// Turn off bit2 to attempt to see if en is bit 2,
	// if it is, it should change all lcd data bits to 1s
	
	Wire.beginTransmission(_addr);
     77a:	68 a1       	ldd	r22, Y+32	; 0x20
     77c:	89 e1       	ldi	r24, 0x19	; 25
     77e:	92 e0       	ldi	r25, 0x02	; 2
     780:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) (~(1 << 2)) );
     784:	6b ef       	ldi	r22, 0xFB	; 251
     786:	89 e1       	ldi	r24, 0x19	; 25
     788:	92 e0       	ldi	r25, 0x02	; 2
     78a:	0e 94 6d 0a 	call	0x14da	; 0x14da <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
     78e:	89 e1       	ldi	r24, 0x19	; 25
     790:	92 e0       	ldi	r25, 0x02	; 2
     792:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZN7TwoWire15endTransmissionEv>

	// read back data
	Wire.requestFrom((int)_addr, 1);
     796:	68 a1       	ldd	r22, Y+32	; 0x20
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	41 e0       	ldi	r20, 0x01	; 1
     79c:	50 e0       	ldi	r21, 0x00	; 0
     79e:	89 e1       	ldi	r24, 0x19	; 25
     7a0:	92 e0       	ldi	r25, 0x02	; 2
     7a2:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN7TwoWire11requestFromEii>
	data2 = Wire.read();
     7a6:	89 e1       	ldi	r24, 0x19	; 25
     7a8:	92 e0       	ldi	r25, 0x02	; 2
     7aa:	0e 94 e6 09 	call	0x13cc	; 0x13cc <_ZN7TwoWire4readEv>

	// If lower 3 bits are high and all 4 upper bits are high after clearing bit 2
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
     7ae:	98 01       	movw	r18, r16
     7b0:	27 70       	andi	r18, 0x07	; 7
     7b2:	33 27       	eor	r19, r19
     7b4:	27 30       	cpi	r18, 0x07	; 7
     7b6:	31 05       	cpc	r19, r1
     7b8:	b1 f4       	brne	.+44     	; 0x7e6 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
     7ba:	80 7f       	andi	r24, 0xF0	; 240
     7bc:	99 27       	eor	r25, r25
     7be:	80 3f       	cpi	r24, 0xF0	; 240
     7c0:	91 05       	cpc	r25, r1
     7c2:	89 f4       	brne	.+34     	; 0x7e6 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
     7c4:	83 e0       	ldi	r24, 0x03	; 3
     7c6:	16 95       	lsr	r17
     7c8:	07 95       	ror	r16
     7ca:	8a 95       	dec	r24
     7cc:	e1 f7       	brne	.-8      	; 0x7c6 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x8c>
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	08 27       	eor	r16, r24
     7d2:	01 70       	andi	r16, 0x01	; 1
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
	{
		rs = 0; rw = 1; en = 2; d4 = 4; d5 = 5; d6 = 6; d7 = 7; bl = 3;
     7d4:	43 e0       	ldi	r20, 0x03	; 3
     7d6:	57 e0       	ldi	r21, 0x07	; 7
     7d8:	66 e0       	ldi	r22, 0x06	; 6
     7da:	75 e0       	ldi	r23, 0x05	; 5
     7dc:	e4 e0       	ldi	r30, 0x04	; 4
     7de:	22 e0       	ldi	r18, 0x02	; 2
     7e0:	f1 e0       	ldi	r31, 0x01	; 1
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	34 c0       	rjmp	.+104    	; 0x84e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x114>
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
		}
	}
	else if((data & 0x70) == 0x70)
     7e6:	c8 01       	movw	r24, r16
     7e8:	80 77       	andi	r24, 0x70	; 112
     7ea:	99 27       	eor	r25, r25
     7ec:	80 37       	cpi	r24, 0x70	; 112
     7ee:	91 05       	cpc	r25, r1
     7f0:	09 f0       	breq	.+2      	; 0x7f4 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xba>
     7f2:	68 c0       	rjmp	.+208    	; 0x8c4 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18a>
		// both use bit 7 for backlight control

		// Turn off the en bit which should change the data bits
		// bit 4 on the mjkdz is en so we try that bit
	
		Wire.beginTransmission(_addr);
     7f4:	68 a1       	ldd	r22, Y+32	; 0x20
     7f6:	89 e1       	ldi	r24, 0x19	; 25
     7f8:	92 e0       	ldi	r25, 0x02	; 2
     7fa:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t) (~(1 << 4)) );
     7fe:	6f ee       	ldi	r22, 0xEF	; 239
     800:	89 e1       	ldi	r24, 0x19	; 25
     802:	92 e0       	ldi	r25, 0x02	; 2
     804:	0e 94 6d 0a 	call	0x14da	; 0x14da <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
     808:	89 e1       	ldi	r24, 0x19	; 25
     80a:	92 e0       	ldi	r25, 0x02	; 2
     80c:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZN7TwoWire15endTransmissionEv>

		// read back data
		Wire.requestFrom((int)_addr, 1);
     810:	68 a1       	ldd	r22, Y+32	; 0x20
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	41 e0       	ldi	r20, 0x01	; 1
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	89 e1       	ldi	r24, 0x19	; 25
     81a:	92 e0       	ldi	r25, 0x02	; 2
     81c:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN7TwoWire11requestFromEii>
		data2 = Wire.read();
     820:	89 e1       	ldi	r24, 0x19	; 25
     822:	92 e0       	ldi	r25, 0x02	; 2
     824:	0e 94 e6 09 	call	0x13cc	; 0x13cc <_ZN7TwoWire4readEv>
		// look at data bits and see if they changed
		// if they changed to 0xf, then en was bit 4 and it is mjdkz
		// this will happen since when E is low the LCD is not
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
     828:	8f 70       	andi	r24, 0x0F	; 15
     82a:	99 27       	eor	r25, r25
     82c:	0f 97       	sbiw	r24, 0x0f	; 15
     82e:	19 f0       	breq	.+6      	; 0x836 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xfc>
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
		}
		else
		{
			// electrofun LCDXIO
			rs = 4; rw = 5; en = 6; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
     830:	26 e0       	ldi	r18, 0x06	; 6
     832:	34 e0       	ldi	r19, 0x04	; 4
     834:	02 c0       	rjmp	.+4      	; 0x83a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x100>
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
		{
			// mjkdz
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
     836:	24 e0       	ldi	r18, 0x04	; 4
     838:	36 e0       	ldi	r19, 0x06	; 6
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
     83a:	00 95       	com	r16
     83c:	00 1f       	adc	r16, r16
     83e:	00 27       	eor	r16, r16
     840:	00 1f       	adc	r16, r16
     842:	47 e0       	ldi	r20, 0x07	; 7
     844:	53 e0       	ldi	r21, 0x03	; 3
     846:	62 e0       	ldi	r22, 0x02	; 2
     848:	71 e0       	ldi	r23, 0x01	; 1
     84a:	e0 e0       	ldi	r30, 0x00	; 0
     84c:	f5 e0       	ldi	r31, 0x05	; 5
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	dc 01       	movw	r26, r24
     854:	01 c0       	rjmp	.+2      	; 0x858 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11e>
     856:	aa 0f       	add	r26, r26
     858:	3a 95       	dec	r19
     85a:	ea f7       	brpl	.-6      	; 0x856 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11c>
     85c:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
     85e:	dc 01       	movw	r26, r24
     860:	01 c0       	rjmp	.+2      	; 0x864 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x12a>
     862:	aa 0f       	add	r26, r26
     864:	fa 95       	dec	r31
     866:	ea f7       	brpl	.-6      	; 0x862 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x128>
     868:	ab a3       	std	Y+35, r26	; 0x23
	else
		_rw = 0; // no r/w control

	_en = ( 1 << en );
     86a:	dc 01       	movw	r26, r24
     86c:	02 c0       	rjmp	.+4      	; 0x872 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x138>
     86e:	aa 0f       	add	r26, r26
     870:	bb 1f       	adc	r27, r27
     872:	2a 95       	dec	r18
     874:	e2 f7       	brpl	.-8      	; 0x86e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x134>
     876:	ac a3       	std	Y+36, r26	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
     878:	9c 01       	movw	r18, r24
     87a:	01 c0       	rjmp	.+2      	; 0x87e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x144>
     87c:	22 0f       	add	r18, r18
     87e:	ea 95       	dec	r30
     880:	ea f7       	brpl	.-6      	; 0x87c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x142>
     882:	2d a3       	std	Y+37, r18	; 0x25
	_d5 = ( 1 << d5 );
     884:	9c 01       	movw	r18, r24
     886:	01 c0       	rjmp	.+2      	; 0x88a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x150>
     888:	22 0f       	add	r18, r18
     88a:	7a 95       	dec	r23
     88c:	ea f7       	brpl	.-6      	; 0x888 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x14e>
     88e:	2e a3       	std	Y+38, r18	; 0x26
	_d6 = ( 1 << d6 );
     890:	9c 01       	movw	r18, r24
     892:	01 c0       	rjmp	.+2      	; 0x896 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15c>
     894:	22 0f       	add	r18, r18
     896:	6a 95       	dec	r22
     898:	ea f7       	brpl	.-6      	; 0x894 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15a>
     89a:	2f a3       	std	Y+39, r18	; 0x27
	_d7 = ( 1 << d7 );   
     89c:	9c 01       	movw	r18, r24
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x168>
     8a0:	22 0f       	add	r18, r18
     8a2:	5a 95       	dec	r21
     8a4:	ea f7       	brpl	.-6      	; 0x8a0 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x166>
     8a6:	28 a7       	std	Y+40, r18	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
     8a8:	01 c0       	rjmp	.+2      	; 0x8ac <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x172>
     8aa:	88 0f       	add	r24, r24
     8ac:	4a 95       	dec	r20
     8ae:	ea f7       	brpl	.-6      	; 0x8aa <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x170>
     8b0:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
     8b2:	0a a7       	std	Y+42, r16	; 0x2a
	// set default bl state to backlight on
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
     8b4:	01 30       	cpi	r16, 0x01	; 1
     8b6:	11 f4       	brne	.+4      	; 0x8bc <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x182>
		_blCurState = _bl;
     8b8:	8b a7       	std	Y+43, r24	; 0x2b
     8ba:	01 c0       	rjmp	.+2      	; 0x8be <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x184>
	else
		_blCurState = 0;
     8bc:	1b a6       	std	Y+43, r1	; 0x2b
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18e>
		}
	}
	else
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
     8c4:	8d ef       	ldi	r24, 0xFD	; 253
     8c6:	9f ef       	ldi	r25, 0xFF	; 255
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16
     8d0:	08 95       	ret

000008d2 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>:
 * if GP1 is low then the board is the BOARD_XXX board
 * The BOARD_XXX may not work as GP1 is used for D5 on WIDEHK and LCDPLUG
 *
 *
 */
int autocfgMCP23008()
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	ec 01       	movw	r28, r24

	/*
	 * Now set up output port
	 * Make no assumptions as to the state of IOCON BYTE mode
	 */
	Wire.beginTransmission(_addr);
     8d8:	68 a1       	ldd	r22, Y+32	; 0x20
     8da:	89 e1       	ldi	r24, 0x19	; 25
     8dc:	92 e0       	ldi	r25, 0x02	; 2
     8de:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t)0); // point to IODIR
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	89 e1       	ldi	r24, 0x19	; 25
     8e6:	92 e0       	ldi	r25, 0x02	; 2
     8e8:	0e 94 6d 0a 	call	0x14da	; 0x14da <_ZN7TwoWire5writeEh>
	Wire.write(0xff); // all pins inputs
     8ec:	6f ef       	ldi	r22, 0xFF	; 255
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	89 e1       	ldi	r24, 0x19	; 25
     8f2:	92 e0       	ldi	r25, 0x02	; 2
     8f4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     8f8:	89 e1       	ldi	r24, 0x19	; 25
     8fa:	92 e0       	ldi	r25, 0x02	; 2
     8fc:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZN7TwoWire15endTransmissionEv>

	Wire.beginTransmission(_addr);
     900:	68 a1       	ldd	r22, Y+32	; 0x20
     902:	89 e1       	ldi	r24, 0x19	; 25
     904:	92 e0       	ldi	r25, 0x02	; 2
     906:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(6); // point to GPPU
     90a:	66 e0       	ldi	r22, 0x06	; 6
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	89 e1       	ldi	r24, 0x19	; 25
     910:	92 e0       	ldi	r25, 0x02	; 2
     912:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_ZN7TwoWire5writeEi>
	Wire.write(0xff); // turn on pullups
     916:	6f ef       	ldi	r22, 0xFF	; 255
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	89 e1       	ldi	r24, 0x19	; 25
     91c:	92 e0       	ldi	r25, 0x02	; 2
     91e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     922:	89 e1       	ldi	r24, 0x19	; 25
     924:	92 e0       	ldi	r25, 0x02	; 2
     926:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZN7TwoWire15endTransmissionEv>

	/*
	 * read from the GPIO port
	 */

	Wire.beginTransmission(_addr);
     92a:	68 a1       	ldd	r22, Y+32	; 0x20
     92c:	89 e1       	ldi	r24, 0x19	; 25
     92e:	92 e0       	ldi	r25, 0x02	; 2
     930:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(9); // point to GPIO
     934:	69 e0       	ldi	r22, 0x09	; 9
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	89 e1       	ldi	r24, 0x19	; 25
     93a:	92 e0       	ldi	r25, 0x02	; 2
     93c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     940:	89 e1       	ldi	r24, 0x19	; 25
     942:	92 e0       	ldi	r25, 0x02	; 2
     944:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom((int)_addr, 1);
     948:	68 a1       	ldd	r22, Y+32	; 0x20
     94a:	70 e0       	ldi	r23, 0x00	; 0
     94c:	41 e0       	ldi	r20, 0x01	; 1
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	89 e1       	ldi	r24, 0x19	; 25
     952:	92 e0       	ldi	r25, 0x02	; 2
     954:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
     958:	89 e1       	ldi	r24, 0x19	; 25
     95a:	92 e0       	ldi	r25, 0x02	; 2
     95c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <_ZN7TwoWire4readEv>

	blLevel = HIGH; // known boards are active HIGH bl

	if(data == 0x7f) // bit 7 low, and other control and data lines high
     960:	8f 37       	cpi	r24, 0x7F	; 127
     962:	61 f0       	breq	.+24     	; 0x97c <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xaa>
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
     964:	86 ff       	sbrs	r24, 6
     966:	12 c0       	rjmp	.+36     	; 0x98c <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xba>
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
     968:	81 fd       	sbrc	r24, 1
     96a:	4c c0       	rjmp	.+152    	; 0xa04 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x132>
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
		bl = 1;
     96c:	21 e0       	ldi	r18, 0x01	; 1
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
     96e:	32 e0       	ldi	r19, 0x02	; 2
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
     970:	43 e0       	ldi	r20, 0x03	; 3
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
     972:	54 e0       	ldi	r21, 0x04	; 4
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
     974:	65 e0       	ldi	r22, 0x05	; 5
	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
     976:	76 e0       	ldi	r23, 0x06	; 6
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
     978:	e7 e0       	ldi	r30, 0x07	; 7
     97a:	0f c0       	rjmp	.+30     	; 0x99a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;
     97c:	27 e0       	ldi	r18, 0x07	; 7
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
     97e:	36 e0       	ldi	r19, 0x06	; 6
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
     980:	45 e0       	ldi	r20, 0x05	; 5
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
     982:	54 e0       	ldi	r21, 0x04	; 4
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
     984:	63 e0       	ldi	r22, 0x03	; 3
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
     986:	72 e0       	ldi	r23, 0x02	; 2

	if(data == 0x7f) // bit 7 low, and other control and data lines high
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
     988:	e1 e0       	ldi	r30, 0x01	; 1
     98a:	07 c0       	rjmp	.+14     	; 0x99a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;
     98c:	26 e0       	ldi	r18, 0x06	; 6
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
     98e:	33 e0       	ldi	r19, 0x03	; 3
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
     990:	42 e0       	ldi	r20, 0x02	; 2
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
     992:	51 e0       	ldi	r21, 0x01	; 1
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
     994:	60 e0       	ldi	r22, 0x00	; 0
	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
     996:	77 e0       	ldi	r23, 0x07	; 7
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
     998:	e4 e0       	ldi	r30, 0x04	; 4
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	dc 01       	movw	r26, r24
     9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd4>
     9a2:	aa 0f       	add	r26, r26
     9a4:	bb 1f       	adc	r27, r27
     9a6:	ea 95       	dec	r30
     9a8:	e2 f7       	brpl	.-8      	; 0x9a2 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd0>
     9aa:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
	else
		_rw = 0; // no r/w control
     9ac:	1b a2       	std	Y+35, r1	; 0x23

	_en = ( 1 << en );
     9ae:	fc 01       	movw	r30, r24
     9b0:	01 c0       	rjmp	.+2      	; 0x9b4 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe2>
     9b2:	ee 0f       	add	r30, r30
     9b4:	7a 95       	dec	r23
     9b6:	ea f7       	brpl	.-6      	; 0x9b2 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe0>
     9b8:	ec a3       	std	Y+36, r30	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
     9ba:	fc 01       	movw	r30, r24
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xf0>
     9be:	ee 0f       	add	r30, r30
     9c0:	ff 1f       	adc	r31, r31
     9c2:	6a 95       	dec	r22
     9c4:	e2 f7       	brpl	.-8      	; 0x9be <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xec>
     9c6:	ed a3       	std	Y+37, r30	; 0x25
	_d5 = ( 1 << d5 );
     9c8:	bc 01       	movw	r22, r24
     9ca:	01 c0       	rjmp	.+2      	; 0x9ce <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfc>
     9cc:	66 0f       	add	r22, r22
     9ce:	5a 95       	dec	r21
     9d0:	ea f7       	brpl	.-6      	; 0x9cc <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfa>
     9d2:	6e a3       	std	Y+38, r22	; 0x26
	_d6 = ( 1 << d6 );
     9d4:	bc 01       	movw	r22, r24
     9d6:	02 c0       	rjmp	.+4      	; 0x9dc <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x10a>
     9d8:	66 0f       	add	r22, r22
     9da:	77 1f       	adc	r23, r23
     9dc:	4a 95       	dec	r20
     9de:	e2 f7       	brpl	.-8      	; 0x9d8 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x106>
     9e0:	6f a3       	std	Y+39, r22	; 0x27
	_d7 = ( 1 << d7 );   
     9e2:	ac 01       	movw	r20, r24
     9e4:	01 c0       	rjmp	.+2      	; 0x9e8 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x116>
     9e6:	44 0f       	add	r20, r20
     9e8:	3a 95       	dec	r19
     9ea:	ea f7       	brpl	.-6      	; 0x9e6 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x114>
     9ec:	48 a7       	std	Y+40, r20	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
     9ee:	01 c0       	rjmp	.+2      	; 0x9f2 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x120>
     9f0:	88 0f       	add	r24, r24
     9f2:	2a 95       	dec	r18
     9f4:	ea f7       	brpl	.-6      	; 0x9f0 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x11e>
     9f6:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
     9f8:	91 e0       	ldi	r25, 0x01	; 1
     9fa:	9a a7       	std	Y+42, r25	; 0x2a
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
		_blCurState = _bl;
     9fc:	8b a7       	std	Y+43, r24	; 0x2b
		// could not identify board
		return(hd44780::RV_ENOTSUP);
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	02 c0       	rjmp	.+4      	; 0xa08 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x136>

	}
	else
	{
		// could not identify board
		return(hd44780::RV_ENOTSUP);
     a04:	8d ef       	ldi	r24, 0xFD	; 253
     a06:	9f ef       	ldi	r25, 0xFF	; 255
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	08 95       	ret

00000a0e <_ZN14hd44780_I2Cexp6ioinitEv>:
// Returns non zero if initialization failed.
//
// can't be used from constructors because not everything is initalized yet.
// (maybe interrupts or other library constructors)
// if Wire library is used in constructor, it will hang.
int ioinit()
     a0e:	1f 93       	push	r17
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	ec 01       	movw	r28, r24
	 * I believe that it is unreasonable to require the the user
	 * sketch code to do it, because all that should change between
	 * hd44780 i/o interfaces should be the constructor
	 * So we go ahead and call it here.
	 */
	Wire.begin();
     a16:	89 e1       	ldi	r24, 0x19	; 25
     a18:	92 e0       	ldi	r25, 0x02	; 2
     a1a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <_ZN7TwoWire5beginEv>

	// auto locate i2c expander and magically detect pin mappings

	if(!_addr) // locate next instance
     a1e:	68 a1       	ldd	r22, Y+32	; 0x20
     a20:	61 11       	cpse	r22, r1
     a22:	0a c0       	rjmp	.+20     	; 0xa38 <_ZN14hd44780_I2Cexp6ioinitEv+0x2a>
	{
		_addr = LocateDevice(AutoInst++);
     a24:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	98 0f       	add	r25, r24
     a2c:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
     a30:	0e 94 10 01 	call	0x220	; 0x220 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
     a34:	88 a3       	std	Y+32, r24	; 0x20
     a36:	0d c0       	rjmp	.+26     	; 0xa52 <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
	}
	else
	{
		// check to see if device at specified address is really there
		Wire.beginTransmission(_addr);
     a38:	89 e1       	ldi	r24, 0x19	; 25
     a3a:	92 e0       	ldi	r25, 0x02	; 2
     a3c:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire17beginTransmissionEh>
		if(Wire.endTransmission())
     a40:	89 e1       	ldi	r24, 0x19	; 25
     a42:	92 e0       	ldi	r25, 0x02	; 2
     a44:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZN7TwoWire15endTransmissionEv>
     a48:	88 23       	and	r24, r24
     a4a:	19 f0       	breq	.+6      	; 0xa52 <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
			return(hd44780::RV_ENXIO);
     a4c:	8c ef       	ldi	r24, 0xFC	; 252
     a4e:	9f ef       	ldi	r25, 0xFF	; 255
     a50:	a7 c0       	rjmp	.+334    	; 0xba0 <__stack+0xa1>
	}

	if(!_addr) // locate next instance
     a52:	88 a1       	ldd	r24, Y+32	; 0x20
     a54:	81 11       	cpse	r24, r1
     a56:	09 c0       	rjmp	.+18     	; 0xa6a <_ZN14hd44780_I2Cexp6ioinitEv+0x5c>
		_addr = LocateDevice(AutoInst++);
     a58:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
     a5c:	91 e0       	ldi	r25, 0x01	; 1
     a5e:	98 0f       	add	r25, r24
     a60:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
     a64:	0e 94 10 01 	call	0x220	; 0x220 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
     a68:	88 a3       	std	Y+32, r24	; 0x20

	if(!_addr) // if we couldn't locate it, return error
     a6a:	18 a1       	ldd	r17, Y+32	; 0x20
     a6c:	11 23       	and	r17, r17
     a6e:	71 f3       	breq	.-36     	; 0xa4c <_ZN14hd44780_I2Cexp6ioinitEv+0x3e>
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
     a70:	89 a1       	ldd	r24, Y+33	; 0x21
     a72:	88 23       	and	r24, r24
     a74:	c1 f1       	breq	.+112    	; 0xae6 <_ZN14hd44780_I2Cexp6ioinitEv+0xd8>
			return(status);
	}

	// initialize IO expander chip

	Wire.beginTransmission(_addr);
     a76:	68 a1       	ldd	r22, Y+32	; 0x20
     a78:	89 e1       	ldi	r24, 0x19	; 25
     a7a:	92 e0       	ldi	r25, 0x02	; 2
     a7c:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire17beginTransmissionEh>

	if(_expType == I2Cexp_MCP23008)
     a80:	89 a1       	ldd	r24, Y+33	; 0x21
     a82:	82 30       	cpi	r24, 0x02	; 2
     a84:	09 f0       	breq	.+2      	; 0xa88 <_ZN14hd44780_I2Cexp6ioinitEv+0x7a>
     a86:	76 c0       	rjmp	.+236    	; 0xb74 <__stack+0x75>
		 * within the same i2c connection by simply sending more bytes.
		 * This is necessary as the code uses back to back writes to perform
		 * the nibble updates as well as the toggling the enable signal.
		 * This methodology offers significant performance gains.
		 */
		Wire.write(5);	// point to IOCON
     a88:	65 e0       	ldi	r22, 0x05	; 5
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	89 e1       	ldi	r24, 0x19	; 25
     a8e:	92 e0       	ldi	r25, 0x02	; 2
     a90:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_ZN7TwoWire5writeEi>
		Wire.write(0x20);// disable sequential mode (enables BYTE mode)
     a94:	60 e2       	ldi	r22, 0x20	; 32
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	89 e1       	ldi	r24, 0x19	; 25
     a9a:	92 e0       	ldi	r25, 0x02	; 2
     a9c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
     aa0:	89 e1       	ldi	r24, 0x19	; 25
     aa2:	92 e0       	ldi	r25, 0x02	; 2
     aa4:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZN7TwoWire15endTransmissionEv>

		/*
		 * Now set up output port
		 */
		Wire.beginTransmission(_addr);
     aa8:	68 a1       	ldd	r22, Y+32	; 0x20
     aaa:	89 e1       	ldi	r24, 0x19	; 25
     aac:	92 e0       	ldi	r25, 0x02	; 2
     aae:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t)0); // point to IODIR
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	89 e1       	ldi	r24, 0x19	; 25
     ab6:	92 e0       	ldi	r25, 0x02	; 2
     ab8:	0e 94 6d 0a 	call	0x14da	; 0x14da <_ZN7TwoWire5writeEh>
		Wire.write((uint8_t)0); // all pins output
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	89 e1       	ldi	r24, 0x19	; 25
     ac0:	92 e0       	ldi	r25, 0x02	; 2
     ac2:	0e 94 6d 0a 	call	0x14da	; 0x14da <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
     ac6:	89 e1       	ldi	r24, 0x19	; 25
     ac8:	92 e0       	ldi	r25, 0x02	; 2
     aca:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZN7TwoWire15endTransmissionEv>
	
		/*
		 * point chip to GPIO
		 */
		Wire.beginTransmission(_addr);
     ace:	68 a1       	ldd	r22, Y+32	; 0x20
     ad0:	89 e1       	ldi	r24, 0x19	; 25
     ad2:	92 e0       	ldi	r25, 0x02	; 2
     ad4:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire17beginTransmissionEh>
		Wire.write(9); // point to GPIO
     ad8:	69 e0       	ldi	r22, 0x09	; 9
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	89 e1       	ldi	r24, 0x19	; 25
     ade:	92 e0       	ldi	r25, 0x02	; 2
     ae0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_ZN7TwoWire5writeEi>
     ae4:	47 c0       	rjmp	.+142    	; 0xb74 <__stack+0x75>

	/*
	 * First try to write 0xff to MCP23008 IODIR
	 * On a PCF8574 this will end up writing 0 and then ff to output port
	 */
	Wire.beginTransmission(address);
     ae6:	61 2f       	mov	r22, r17
     ae8:	89 e1       	ldi	r24, 0x19	; 25
     aea:	92 e0       	ldi	r25, 0x02	; 2
     aec:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
     af0:	60 e0       	ldi	r22, 0x00	; 0
     af2:	89 e1       	ldi	r24, 0x19	; 25
     af4:	92 e0       	ldi	r25, 0x02	; 2
     af6:	0e 94 6d 0a 	call	0x14da	; 0x14da <_ZN7TwoWire5writeEh>
	Wire.write((uint8_t) 0xff);	// try to write to MCP23008 IODR
     afa:	6f ef       	ldi	r22, 0xFF	; 255
     afc:	89 e1       	ldi	r24, 0x19	; 25
     afe:	92 e0       	ldi	r25, 0x02	; 2
     b00:	0e 94 6d 0a 	call	0x14da	; 0x14da <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
     b04:	89 e1       	ldi	r24, 0x19	; 25
     b06:	92 e0       	ldi	r25, 0x02	; 2
     b08:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now try to point MCP23008 to IODIR for read
	 * On a PCF8574 this will end up writing a 0 to the output port
	 */

	Wire.beginTransmission(address);
     b0c:	61 2f       	mov	r22, r17
     b0e:	89 e1       	ldi	r24, 0x19	; 25
     b10:	92 e0       	ldi	r25, 0x02	; 2
     b12:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	89 e1       	ldi	r24, 0x19	; 25
     b1a:	92 e0       	ldi	r25, 0x02	; 2
     b1c:	0e 94 6d 0a 	call	0x14da	; 0x14da <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
     b20:	89 e1       	ldi	r24, 0x19	; 25
     b22:	92 e0       	ldi	r25, 0x02	; 2
     b24:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now read a byte
	 * On a MCP23008 we should read the 0xff we wrote to IODIR
	 * On a PCF8574 we should read 0 since the output port was set to 0
	 */
	Wire.requestFrom((int)address, 1);
     b28:	61 2f       	mov	r22, r17
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	41 e0       	ldi	r20, 0x01	; 1
     b2e:	50 e0       	ldi	r21, 0x00	; 0
     b30:	89 e1       	ldi	r24, 0x19	; 25
     b32:	92 e0       	ldi	r25, 0x02	; 2
     b34:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
     b38:	89 e1       	ldi	r24, 0x19	; 25
     b3a:	92 e0       	ldi	r25, 0x02	; 2
     b3c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <_ZN7TwoWire4readEv>
     b40:	9c 01       	movw	r18, r24

	if(data == 0xff)
     b42:	8f 3f       	cpi	r24, 0xFF	; 255
     b44:	91 05       	cpc	r25, r1
     b46:	29 f0       	breq	.+10     	; 0xb52 <__stack+0x53>
	{
		chiptype = I2Cexp_MCP23008;
     b48:	91 e0       	ldi	r25, 0x01	; 1
     b4a:	23 2b       	or	r18, r19
     b4c:	19 f0       	breq	.+6      	; 0xb54 <__stack+0x55>
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	01 c0       	rjmp	.+2      	; 0xb54 <__stack+0x55>
     b52:	92 e0       	ldi	r25, 0x02	; 2
	if(!_addr) // if we couldn't locate it, return error
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);
     b54:	99 a3       	std	Y+33, r25	; 0x21

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
     b56:	99 23       	and	r25, r25
     b58:	09 f1       	breq	.+66     	; 0xb9c <__stack+0x9d>
			return(hd44780::RV_EIO);

		if(_expType == I2Cexp_PCF8574)
     b5a:	91 30       	cpi	r25, 0x01	; 1
     b5c:	21 f4       	brne	.+8      	; 0xb66 <__stack+0x67>
			status = autocfg8574();		// go auto configure the pin mappings
     b5e:	ce 01       	movw	r24, r28
     b60:	0e 94 9d 03 	call	0x73a	; 0x73a <_ZN14hd44780_I2Cexp11autocfg8574Ev>
     b64:	03 c0       	rjmp	.+6      	; 0xb6c <__stack+0x6d>
		else
			status = autocfgMCP23008();	// go auto configure the pin mappings
     b66:	ce 01       	movw	r24, r28
     b68:	0e 94 69 04 	call	0x8d2	; 0x8d2 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>
		if(status)
     b6c:	00 97       	sbiw	r24, 0x00	; 0
     b6e:	09 f4       	brne	.+2      	; 0xb72 <__stack+0x73>
     b70:	82 cf       	rjmp	.-252    	; 0xa76 <_ZN14hd44780_I2Cexp6ioinitEv+0x68>
     b72:	16 c0       	rjmp	.+44     	; 0xba0 <__stack+0xa1>
		 */
		Wire.beginTransmission(_addr);
		Wire.write(9); // point to GPIO
		
	}
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	89 e1       	ldi	r24, 0x19	; 25
     b78:	92 e0       	ldi	r25, 0x02	; 2
     b7a:	0e 94 6d 0a 	call	0x14da	; 0x14da <_ZN7TwoWire5writeEh>
	if( (status = Wire.endTransmission()) ) // assignment
     b7e:	89 e1       	ldi	r24, 0x19	; 25
     b80:	92 e0       	ldi	r25, 0x02	; 2
     b82:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZN7TwoWire15endTransmissionEv>
     b86:	21 e0       	ldi	r18, 0x01	; 1
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	81 11       	cpse	r24, r1
     b8c:	02 c0       	rjmp	.+4      	; 0xb92 <__stack+0x93>
     b8e:	20 e0       	ldi	r18, 0x00	; 0
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	88 27       	eor	r24, r24
     b94:	99 27       	eor	r25, r25
     b96:	82 1b       	sub	r24, r18
     b98:	93 0b       	sbc	r25, r19
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <__stack+0xa1>
	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
			return(hd44780::RV_EIO);
     b9c:	8f ef       	ldi	r24, 0xFF	; 255
     b9e:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
	if( (status = Wire.endTransmission()) ) // assignment
		status = hd44780::RV_EIO;

	return ( status );
}
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	1f 91       	pop	r17
     ba6:	08 95       	ret

00000ba8 <_ZN7hd447806ioinitEv>:
	{
		buf[i] = pgm_read_byte(charmap++);
	}
	// call the RAM based function to actually send it to the LCD
	return(createChar(location, buf));
}
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	08 95       	ret

00000bae <_ZN7hd447806ioreadENS_6iotypeE>:
     bae:	8d ef       	ldi	r24, 0xFD	; 253
     bb0:	9f ef       	ldi	r25, 0xFF	; 255
     bb2:	08 95       	ret

00000bb4 <_ZN7hd4478014iosetBacklightEh>:
     bb4:	8d ef       	ldi	r24, 0xFD	; 253
     bb6:	9f ef       	ldi	r25, 0xFF	; 255
     bb8:	08 95       	ret

00000bba <_ZN7hd44780C1Ev>:
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	ec 01       	movw	r28, r24
     bc0:	1b 82       	std	Y+3, r1	; 0x03
     bc2:	1a 82       	std	Y+2, r1	; 0x02
     bc4:	85 e4       	ldi	r24, 0x45	; 69
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	99 83       	std	Y+1, r25	; 0x01
     bca:	88 83       	st	Y, r24
     bcc:	1f 82       	std	Y+7, r1	; 0x07
     bce:	18 86       	std	Y+8, r1	; 0x08
     bd0:	80 ed       	ldi	r24, 0xD0	; 208
     bd2:	97 e0       	ldi	r25, 0x07	; 7
     bd4:	a0 e0       	ldi	r26, 0x00	; 0
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	88 8b       	std	Y+16, r24	; 0x10
     bda:	99 8b       	std	Y+17, r25	; 0x11
     bdc:	aa 8b       	std	Y+18, r26	; 0x12
     bde:	bb 8b       	std	Y+19, r27	; 0x13
     be0:	86 e2       	ldi	r24, 0x26	; 38
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	a0 e0       	ldi	r26, 0x00	; 0
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	8c 8b       	std	Y+20, r24	; 0x14
     bea:	9d 8b       	std	Y+21, r25	; 0x15
     bec:	ae 8b       	std	Y+22, r26	; 0x16
     bee:	bf 8b       	std	Y+23, r27	; 0x17
     bf0:	1c 86       	std	Y+12, r1	; 0x0c
     bf2:	1d 86       	std	Y+13, r1	; 0x0d
     bf4:	1e 86       	std	Y+14, r1	; 0x0e
     bf6:	1f 86       	std	Y+15, r1	; 0x0f
     bf8:	1b 86       	std	Y+11, r1	; 0x0b
     bfa:	0e 94 c2 10 	call	0x2184	; 0x2184 <micros>
     bfe:	68 8f       	std	Y+24, r22	; 0x18
     c00:	79 8f       	std	Y+25, r23	; 0x19
     c02:	8a 8f       	std	Y+26, r24	; 0x1a
     c04:	9b 8f       	std	Y+27, r25	; 0x1b
     c06:	1c 8e       	std	Y+28, r1	; 0x1c
     c08:	1d 8e       	std	Y+29, r1	; 0x1d
     c0a:	1e 8e       	std	Y+30, r1	; 0x1e
     c0c:	1f 8e       	std	Y+31, r1	; 0x1f
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	08 95       	ret

00000c14 <_ZN7hd447809backlightEv>:
     c14:	dc 01       	movw	r26, r24
     c16:	ed 91       	ld	r30, X+
     c18:	fc 91       	ld	r31, X
     c1a:	06 84       	ldd	r0, Z+14	; 0x0e
     c1c:	f7 85       	ldd	r31, Z+15	; 0x0f
     c1e:	e0 2d       	mov	r30, r0
     c20:	6f ef       	ldi	r22, 0xFF	; 255
     c22:	09 94       	ijmp

00000c24 <_ZN7hd4478011noBacklightEv>:
     c24:	dc 01       	movw	r26, r24
     c26:	ed 91       	ld	r30, X+
     c28:	fc 91       	ld	r31, X
     c2a:	06 84       	ldd	r0, Z+14	; 0x0e
     c2c:	f7 85       	ldd	r31, Z+15	; 0x0f
     c2e:	e0 2d       	mov	r30, r0
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	09 94       	ijmp

00000c34 <_ZN7hd447807commandEh>:
     c34:	8f 92       	push	r8
     c36:	9f 92       	push	r9
     c38:	af 92       	push	r10
     c3a:	bf 92       	push	r11
     c3c:	ef 92       	push	r14
     c3e:	ff 92       	push	r15
     c40:	1f 93       	push	r17
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	ec 01       	movw	r28, r24
     c48:	16 2f       	mov	r17, r22
     c4a:	e8 81       	ld	r30, Y
     c4c:	f9 81       	ldd	r31, Y+1	; 0x01
     c4e:	04 84       	ldd	r0, Z+12	; 0x0c
     c50:	f5 85       	ldd	r31, Z+13	; 0x0d
     c52:	e0 2d       	mov	r30, r0
     c54:	46 2f       	mov	r20, r22
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	09 95       	icall
     c5a:	7c 01       	movw	r14, r24
     c5c:	11 50       	subi	r17, 0x01	; 1
     c5e:	12 30       	cpi	r17, 0x02	; 2
     c60:	38 f4       	brcc	.+14     	; 0xc70 <_ZN7hd447807commandEh+0x3c>
     c62:	19 86       	std	Y+9, r1	; 0x09
     c64:	1a 86       	std	Y+10, r1	; 0x0a
     c66:	88 88       	ldd	r8, Y+16	; 0x10
     c68:	99 88       	ldd	r9, Y+17	; 0x11
     c6a:	aa 88       	ldd	r10, Y+18	; 0x12
     c6c:	bb 88       	ldd	r11, Y+19	; 0x13
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <_ZN7hd447807commandEh+0x44>
     c70:	8c 88       	ldd	r8, Y+20	; 0x14
     c72:	9d 88       	ldd	r9, Y+21	; 0x15
     c74:	ae 88       	ldd	r10, Y+22	; 0x16
     c76:	bf 88       	ldd	r11, Y+23	; 0x17
     c78:	0e 94 c2 10 	call	0x2184	; 0x2184 <micros>
     c7c:	68 8f       	std	Y+24, r22	; 0x18
     c7e:	79 8f       	std	Y+25, r23	; 0x19
     c80:	8a 8f       	std	Y+26, r24	; 0x1a
     c82:	9b 8f       	std	Y+27, r25	; 0x1b
     c84:	8c 8e       	std	Y+28, r8	; 0x1c
     c86:	9d 8e       	std	Y+29, r9	; 0x1d
     c88:	ae 8e       	std	Y+30, r10	; 0x1e
     c8a:	bf 8e       	std	Y+31, r11	; 0x1f
     c8c:	c7 01       	movw	r24, r14
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	1f 91       	pop	r17
     c94:	ff 90       	pop	r15
     c96:	ef 90       	pop	r14
     c98:	bf 90       	pop	r11
     c9a:	af 90       	pop	r10
     c9c:	9f 90       	pop	r9
     c9e:	8f 90       	pop	r8
     ca0:	08 95       	ret

00000ca2 <_ZN7hd447805clearEv>:
     ca2:	61 e0       	ldi	r22, 0x01	; 1
     ca4:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <_ZN7hd447807commandEh>

00000ca8 <_ZN7hd447809setCursorEhh>:
     ca8:	fc 01       	movw	r30, r24
     caa:	80 85       	ldd	r24, Z+8	; 0x08
     cac:	48 17       	cp	r20, r24
     cae:	10 f0       	brcs	.+4      	; 0xcb4 <_ZN7hd447809setCursorEhh+0xc>
     cb0:	4f ef       	ldi	r20, 0xFF	; 255
     cb2:	48 0f       	add	r20, r24
     cb4:	93 85       	ldd	r25, Z+11	; 0x0b
     cb6:	99 23       	and	r25, r25
     cb8:	59 f0       	breq	.+22     	; 0xcd0 <_ZN7hd447809setCursorEhh+0x28>
     cba:	97 81       	ldd	r25, Z+7	; 0x07
     cbc:	69 17       	cp	r22, r25
     cbe:	30 f0       	brcs	.+12     	; 0xccc <_ZN7hd447809setCursorEhh+0x24>
     cc0:	69 1b       	sub	r22, r25
     cc2:	4f 5f       	subi	r20, 0xFF	; 255
     cc4:	48 17       	cp	r20, r24
     cc6:	d0 f3       	brcs	.-12     	; 0xcbc <_ZN7hd447809setCursorEhh+0x14>
     cc8:	40 e0       	ldi	r20, 0x00	; 0
     cca:	f8 cf       	rjmp	.-16     	; 0xcbc <_ZN7hd447809setCursorEhh+0x14>
     ccc:	61 87       	std	Z+9, r22	; 0x09
     cce:	42 87       	std	Z+10, r20	; 0x0a
     cd0:	df 01       	movw	r26, r30
     cd2:	a4 0f       	add	r26, r20
     cd4:	b1 1d       	adc	r27, r1
     cd6:	1c 96       	adiw	r26, 0x0c	; 12
     cd8:	8c 91       	ld	r24, X
     cda:	68 0f       	add	r22, r24
     cdc:	60 68       	ori	r22, 0x80	; 128
     cde:	cf 01       	movw	r24, r30
     ce0:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <_ZN7hd447807commandEh>

00000ce4 <_ZN7hd447809noDisplayEv>:
     ce4:	fc 01       	movw	r30, r24
     ce6:	65 81       	ldd	r22, Z+5	; 0x05
     ce8:	6b 7f       	andi	r22, 0xFB	; 251
     cea:	65 83       	std	Z+5, r22	; 0x05
     cec:	68 60       	ori	r22, 0x08	; 8
     cee:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <_ZN7hd447807commandEh>

00000cf2 <_ZN7hd447803offEv>:
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	ec 01       	movw	r28, r24
     cf8:	0e 94 12 06 	call	0xc24	; 0xc24 <_ZN7hd4478011noBacklightEv>
     cfc:	ce 01       	movw	r24, r28
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	0c 94 72 06 	jmp	0xce4	; 0xce4 <_ZN7hd447809noDisplayEv>

00000d06 <_ZN7hd447807displayEv>:
     d06:	fc 01       	movw	r30, r24
     d08:	65 81       	ldd	r22, Z+5	; 0x05
     d0a:	26 2f       	mov	r18, r22
     d0c:	24 60       	ori	r18, 0x04	; 4
     d0e:	25 83       	std	Z+5, r18	; 0x05
     d10:	6c 60       	ori	r22, 0x0C	; 12
     d12:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <_ZN7hd447807commandEh>

00000d16 <_ZN7hd447805beginEhhh>:
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	ec 01       	movw	r28, r24
     d20:	02 2f       	mov	r16, r18
     d22:	14 2f       	mov	r17, r20
     d24:	45 30       	cpi	r20, 0x05	; 5
     d26:	08 f0       	brcs	.+2      	; 0xd2a <_ZN7hd447805beginEhhh+0x14>
     d28:	14 e0       	ldi	r17, 0x04	; 4
     d2a:	8c 85       	ldd	r24, Y+12	; 0x0c
     d2c:	81 11       	cpse	r24, r1
     d2e:	09 c0       	rjmp	.+18     	; 0xd42 <_ZN7hd447805beginEhhh+0x2c>
     d30:	8d 85       	ldd	r24, Y+13	; 0x0d
     d32:	81 11       	cpse	r24, r1
     d34:	06 c0       	rjmp	.+12     	; 0xd42 <_ZN7hd447805beginEhhh+0x2c>
     d36:	8e 85       	ldd	r24, Y+14	; 0x0e
     d38:	81 11       	cpse	r24, r1
     d3a:	03 c0       	rjmp	.+6      	; 0xd42 <_ZN7hd447805beginEhhh+0x2c>
     d3c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d3e:	88 23       	and	r24, r24
     d40:	29 f0       	breq	.+10     	; 0xd4c <_ZN7hd447805beginEhhh+0x36>
     d42:	8f 81       	ldd	r24, Y+7	; 0x07
     d44:	88 23       	and	r24, r24
     d46:	59 f0       	breq	.+22     	; 0xd5e <_ZN7hd447805beginEhhh+0x48>
     d48:	86 17       	cp	r24, r22
     d4a:	49 f0       	breq	.+18     	; 0xd5e <_ZN7hd447805beginEhhh+0x48>
     d4c:	1c 86       	std	Y+12, r1	; 0x0c
     d4e:	80 e4       	ldi	r24, 0x40	; 64
     d50:	8d 87       	std	Y+13, r24	; 0x0d
     d52:	6e 87       	std	Y+14, r22	; 0x0e
     d54:	86 2f       	mov	r24, r22
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	80 5c       	subi	r24, 0xC0	; 192
     d5a:	9f 4f       	sbci	r25, 0xFF	; 255
     d5c:	8f 87       	std	Y+15, r24	; 0x0f
     d5e:	18 87       	std	Y+8, r17	; 0x08
     d60:	6f 83       	std	Y+7, r22	; 0x07
     d62:	64 e6       	ldi	r22, 0x64	; 100
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay>
     d6e:	1c 82       	std	Y+4, r1	; 0x04
     d70:	e8 81       	ld	r30, Y
     d72:	f9 81       	ldd	r31, Y+1	; 0x01
     d74:	00 84       	ldd	r0, Z+8	; 0x08
     d76:	f1 85       	ldd	r31, Z+9	; 0x09
     d78:	e0 2d       	mov	r30, r0
     d7a:	ce 01       	movw	r24, r28
     d7c:	09 95       	icall
     d7e:	00 97       	sbiw	r24, 0x00	; 0
     d80:	09 f0       	breq	.+2      	; 0xd84 <_ZN7hd447805beginEhhh+0x6e>
     d82:	5e c0       	rjmp	.+188    	; 0xe40 <_ZN7hd447805beginEhhh+0x12a>
     d84:	88 85       	ldd	r24, Y+8	; 0x08
     d86:	82 30       	cpi	r24, 0x02	; 2
     d88:	18 f0       	brcs	.+6      	; 0xd90 <_ZN7hd447805beginEhhh+0x7a>
     d8a:	8c 81       	ldd	r24, Y+4	; 0x04
     d8c:	88 60       	ori	r24, 0x08	; 8
     d8e:	8c 83       	std	Y+4, r24	; 0x04
     d90:	00 23       	and	r16, r16
     d92:	29 f0       	breq	.+10     	; 0xd9e <_ZN7hd447805beginEhhh+0x88>
     d94:	11 30       	cpi	r17, 0x01	; 1
     d96:	19 f4       	brne	.+6      	; 0xd9e <_ZN7hd447805beginEhhh+0x88>
     d98:	8c 81       	ldd	r24, Y+4	; 0x04
     d9a:	84 60       	ori	r24, 0x04	; 4
     d9c:	8c 83       	std	Y+4, r24	; 0x04
     d9e:	e8 81       	ld	r30, Y
     da0:	f9 81       	ldd	r31, Y+1	; 0x01
     da2:	04 84       	ldd	r0, Z+12	; 0x0c
     da4:	f5 85       	ldd	r31, Z+13	; 0x0d
     da6:	e0 2d       	mov	r30, r0
     da8:	40 e3       	ldi	r20, 0x30	; 48
     daa:	62 e0       	ldi	r22, 0x02	; 2
     dac:	ce 01       	movw	r24, r28
     dae:	09 95       	icall
     db0:	65 e0       	ldi	r22, 0x05	; 5
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay>
     dbc:	e8 81       	ld	r30, Y
     dbe:	f9 81       	ldd	r31, Y+1	; 0x01
     dc0:	04 84       	ldd	r0, Z+12	; 0x0c
     dc2:	f5 85       	ldd	r31, Z+13	; 0x0d
     dc4:	e0 2d       	mov	r30, r0
     dc6:	40 e3       	ldi	r20, 0x30	; 48
     dc8:	62 e0       	ldi	r22, 0x02	; 2
     dca:	ce 01       	movw	r24, r28
     dcc:	09 95       	icall
     dce:	61 e0       	ldi	r22, 0x01	; 1
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay>
     dda:	e8 81       	ld	r30, Y
     ddc:	f9 81       	ldd	r31, Y+1	; 0x01
     dde:	04 84       	ldd	r0, Z+12	; 0x0c
     de0:	f5 85       	ldd	r31, Z+13	; 0x0d
     de2:	e0 2d       	mov	r30, r0
     de4:	40 e3       	ldi	r20, 0x30	; 48
     de6:	62 e0       	ldi	r22, 0x02	; 2
     de8:	ce 01       	movw	r24, r28
     dea:	09 95       	icall
     dec:	61 e0       	ldi	r22, 0x01	; 1
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay>
     df8:	8c 81       	ldd	r24, Y+4	; 0x04
     dfa:	84 fd       	sbrc	r24, 4
     dfc:	09 c0       	rjmp	.+18     	; 0xe10 <_ZN7hd447805beginEhhh+0xfa>
     dfe:	e8 81       	ld	r30, Y
     e00:	f9 81       	ldd	r31, Y+1	; 0x01
     e02:	04 84       	ldd	r0, Z+12	; 0x0c
     e04:	f5 85       	ldd	r31, Z+13	; 0x0d
     e06:	e0 2d       	mov	r30, r0
     e08:	40 e2       	ldi	r20, 0x20	; 32
     e0a:	62 e0       	ldi	r22, 0x02	; 2
     e0c:	ce 01       	movw	r24, r28
     e0e:	09 95       	icall
     e10:	6c 81       	ldd	r22, Y+4	; 0x04
     e12:	60 62       	ori	r22, 0x20	; 32
     e14:	ce 01       	movw	r24, r28
     e16:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN7hd447807commandEh>
     e1a:	84 e0       	ldi	r24, 0x04	; 4
     e1c:	8d 83       	std	Y+5, r24	; 0x05
     e1e:	ce 01       	movw	r24, r28
     e20:	0e 94 83 06 	call	0xd06	; 0xd06 <_ZN7hd447807displayEv>
     e24:	ce 01       	movw	r24, r28
     e26:	0e 94 51 06 	call	0xca2	; 0xca2 <_ZN7hd447805clearEv>
     e2a:	82 e0       	ldi	r24, 0x02	; 2
     e2c:	8e 83       	std	Y+6, r24	; 0x06
     e2e:	66 e0       	ldi	r22, 0x06	; 6
     e30:	ce 01       	movw	r24, r28
     e32:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN7hd447807commandEh>
     e36:	8c 01       	movw	r16, r24
     e38:	ce 01       	movw	r24, r28
     e3a:	0e 94 0a 06 	call	0xc14	; 0xc14 <_ZN7hd447809backlightEv>
     e3e:	c8 01       	movw	r24, r16
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	08 95       	ret

00000e4a <_ZN7hd447806_writeEh>:
     e4a:	cf 92       	push	r12
     e4c:	df 92       	push	r13
     e4e:	ef 92       	push	r14
     e50:	ff 92       	push	r15
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	ec 01       	movw	r28, r24
     e5c:	46 2f       	mov	r20, r22
     e5e:	e8 81       	ld	r30, Y
     e60:	f9 81       	ldd	r31, Y+1	; 0x01
     e62:	04 84       	ldd	r0, Z+12	; 0x0c
     e64:	f5 85       	ldd	r31, Z+13	; 0x0d
     e66:	e0 2d       	mov	r30, r0
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	09 95       	icall
     e6c:	8c 01       	movw	r16, r24
     e6e:	cc 88       	ldd	r12, Y+20	; 0x14
     e70:	dd 88       	ldd	r13, Y+21	; 0x15
     e72:	ee 88       	ldd	r14, Y+22	; 0x16
     e74:	ff 88       	ldd	r15, Y+23	; 0x17
     e76:	0e 94 c2 10 	call	0x2184	; 0x2184 <micros>
     e7a:	68 8f       	std	Y+24, r22	; 0x18
     e7c:	79 8f       	std	Y+25, r23	; 0x19
     e7e:	8a 8f       	std	Y+26, r24	; 0x1a
     e80:	9b 8f       	std	Y+27, r25	; 0x1b
     e82:	cc 8e       	std	Y+28, r12	; 0x1c
     e84:	dd 8e       	std	Y+29, r13	; 0x1d
     e86:	ee 8e       	std	Y+30, r14	; 0x1e
     e88:	ff 8e       	std	Y+31, r15	; 0x1f
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	01 2b       	or	r16, r17
     e90:	11 f0       	breq	.+4      	; 0xe96 <_ZN7hd447806_writeEh+0x4c>
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	1f 91       	pop	r17
     e9c:	0f 91       	pop	r16
     e9e:	ff 90       	pop	r15
     ea0:	ef 90       	pop	r14
     ea2:	df 90       	pop	r13
     ea4:	cf 90       	pop	r12
     ea6:	08 95       	ret

00000ea8 <_ZN7hd447805writeEh>:

// write() - process data character byte to lcd
// returns number of bytes successfully written to device
// i.e. 1 if success or 0 if no character was processed (error)
size_t hd44780::write(uint8_t value)
{
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	ec 01       	movw	r28, r24
size_t rval;

	rval = _write(value);
     eb2:	0e 94 25 07 	call	0xe4a	; 0xe4a <_ZN7hd447806_writeEh>
     eb6:	8c 01       	movw	r16, r24
	if(_wraplines)
     eb8:	8b 85       	ldd	r24, Y+11	; 0x0b
     eba:	88 23       	and	r24, r24
     ebc:	99 f0       	breq	.+38     	; 0xee4 <_ZN7hd447805writeEh+0x3c>
	{
		// currently only works for left to right mode
		if(++_curcol >= _cols)
     ebe:	89 85       	ldd	r24, Y+9	; 0x09
     ec0:	8f 5f       	subi	r24, 0xFF	; 255
     ec2:	89 87       	std	Y+9, r24	; 0x09
     ec4:	9f 81       	ldd	r25, Y+7	; 0x07
     ec6:	89 17       	cp	r24, r25
     ec8:	68 f0       	brcs	.+26     	; 0xee4 <_ZN7hd447805writeEh+0x3c>
		{
			_curcol = 0;
     eca:	19 86       	std	Y+9, r1	; 0x09
			_currow++;
     ecc:	8a 85       	ldd	r24, Y+10	; 0x0a
     ece:	8f 5f       	subi	r24, 0xFF	; 255
     ed0:	8a 87       	std	Y+10, r24	; 0x0a
			if(_currow >= _rows)
     ed2:	98 85       	ldd	r25, Y+8	; 0x08
     ed4:	89 17       	cp	r24, r25
     ed6:	08 f0       	brcs	.+2      	; 0xeda <_ZN7hd447805writeEh+0x32>
				_currow = 0;
     ed8:	1a 86       	std	Y+10, r1	; 0x0a
			setCursor(_curcol, _currow);
     eda:	4a 85       	ldd	r20, Y+10	; 0x0a
     edc:	60 e0       	ldi	r22, 0x00	; 0
     ede:	ce 01       	movw	r24, r28
     ee0:	0e 94 54 06 	call	0xca8	; 0xca8 <_ZN7hd447809setCursorEhh>
		}
	}
	return (rval);
}
     ee4:	c8 01       	movw	r24, r16
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	08 95       	ret

00000ef0 <_ZN7hd447808blinkLEDEi>:
#define ledBuiltinOn() digitalWrite(LED_BUILTIN, HIGH)
#define ledBuiltinOff() digitalWrite(LED_BUILTIN, LOW)
#endif

int hd44780::blinkLED(int blinks)
{
     ef0:	0f 93       	push	r16
     ef2:	1f 93       	push	r17
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	8c 01       	movw	r16, r24
#ifdef LED_BUILTIN
	pinMode(LED_BUILTIN, OUTPUT);
     efa:	61 e0       	ldi	r22, 0x01	; 1
     efc:	8d e0       	ldi	r24, 0x0D	; 13
     efe:	0e 94 b6 11 	call	0x236c	; 0x236c <pinMode>
	// blink out error code
	for(int i = 0; i< blinks; i++)
     f02:	c0 e0       	ldi	r28, 0x00	; 0
     f04:	d0 e0       	ldi	r29, 0x00	; 0
     f06:	c0 17       	cp	r28, r16
     f08:	d1 07       	cpc	r29, r17
     f0a:	b4 f4       	brge	.+44     	; 0xf38 <_ZN7hd447808blinkLEDEi+0x48>
	{
		ledBuiltinOn();
     f0c:	61 e0       	ldi	r22, 0x01	; 1
     f0e:	8d e0       	ldi	r24, 0x0D	; 13
     f10:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <digitalWrite>
		delay(100);
     f14:	64 e6       	ldi	r22, 0x64	; 100
     f16:	70 e0       	ldi	r23, 0x00	; 0
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay>
		ledBuiltinOff();
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	8d e0       	ldi	r24, 0x0D	; 13
     f24:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <digitalWrite>
		delay(250);
     f28:	6a ef       	ldi	r22, 0xFA	; 250
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay>
int hd44780::blinkLED(int blinks)
{
#ifdef LED_BUILTIN
	pinMode(LED_BUILTIN, OUTPUT);
	// blink out error code
	for(int i = 0; i< blinks; i++)
     f34:	21 96       	adiw	r28, 0x01	; 1
     f36:	e7 cf       	rjmp	.-50     	; 0xf06 <_ZN7hd447808blinkLEDEi+0x16>
	// No built in LED, so do "nothing"
	if(blinks){} // "nop" if to eliminate warning, will be optimized out

	return(RV_ENOTSUP);
#endif
}
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	1f 91       	pop	r17
     f42:	0f 91       	pop	r16
     f44:	08 95       	ret

00000f46 <_ZN7hd4478010fatalErrorEi>:

// fatalError() - loop & blink an error code
void hd44780::fatalError(int errcode)
{
     f46:	ec 01       	movw	r28, r24
     f48:	97 ff       	sbrs	r25, 7
     f4a:	03 c0       	rjmp	.+6      	; 0xf52 <_ZN7hd4478010fatalErrorEi+0xc>
     f4c:	d1 95       	neg	r29
     f4e:	c1 95       	neg	r28
     f50:	d1 09       	sbc	r29, r1
	if(errcode < 0)
		errcode = -errcode;
	while(1)
	{
		blinkLED(errcode);	// blink LED if possible
     f52:	ce 01       	movw	r24, r28
     f54:	0e 94 78 07 	call	0xef0	; 0xef0 <_ZN7hd447808blinkLEDEi>
		delay(1500);		// using delay() ensures watchdogs don't trip
     f58:	6c ed       	ldi	r22, 0xDC	; 220
     f5a:	75 e0       	ldi	r23, 0x05	; 5
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay>
     f64:	f6 cf       	rjmp	.-20     	; 0xf52 <_ZN7hd4478010fatalErrorEi+0xc>

00000f66 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     f66:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <twi_state>
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <twi_sendStop>
     f70:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <twi_inRepStart>
     f74:	61 e0       	ldi	r22, 0x01	; 1
     f76:	82 e0       	ldi	r24, 0x02	; 2
     f78:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <digitalWrite>
     f7c:	61 e0       	ldi	r22, 0x01	; 1
     f7e:	83 e0       	ldi	r24, 0x03	; 3
     f80:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <digitalWrite>
     f84:	e9 eb       	ldi	r30, 0xB9	; 185
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	8e 7f       	andi	r24, 0xFE	; 254
     f8c:	80 83       	st	Z, r24
     f8e:	80 81       	ld	r24, Z
     f90:	8d 7f       	andi	r24, 0xFD	; 253
     f92:	80 83       	st	Z, r24
     f94:	88 e4       	ldi	r24, 0x48	; 72
     f96:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     f9a:	85 e4       	ldi	r24, 0x45	; 69
     f9c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     fa0:	08 95       	ret

00000fa2 <twi_readFrom>:
     fa2:	41 32       	cpi	r20, 0x21	; 33
     fa4:	08 f0       	brcs	.+2      	; 0xfa8 <twi_readFrom+0x6>
     fa6:	43 c0       	rjmp	.+134    	; 0x102e <twi_readFrom+0x8c>
     fa8:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <twi_state>
     fac:	91 11       	cpse	r25, r1
     fae:	fc cf       	rjmp	.-8      	; 0xfa8 <twi_readFrom+0x6>
     fb0:	91 e0       	ldi	r25, 0x01	; 1
     fb2:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <twi_state>
     fb6:	20 93 16 02 	sts	0x0216, r18	; 0x800216 <twi_sendStop>
     fba:	2f ef       	ldi	r18, 0xFF	; 255
     fbc:	20 93 ab 01 	sts	0x01AB, r18	; 0x8001ab <twi_error>
     fc0:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <twi_masterBufferIndex>
     fc4:	24 0f       	add	r18, r20
     fc6:	20 93 ef 01 	sts	0x01EF, r18	; 0x8001ef <twi_masterBufferLength>
     fca:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <twi_slarw>
     fce:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <twi_slarw>
     fd2:	88 0f       	add	r24, r24
     fd4:	89 2b       	or	r24, r25
     fd6:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <twi_slarw>
     fda:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <twi_inRepStart>
     fde:	81 30       	cpi	r24, 0x01	; 1
     fe0:	61 f4       	brne	.+24     	; 0xffa <twi_readFrom+0x58>
     fe2:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <twi_inRepStart>
     fe6:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <twi_slarw>
     fea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     fee:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     ff2:	83 fd       	sbrc	r24, 3
     ff4:	f8 cf       	rjmp	.-16     	; 0xfe6 <twi_readFrom+0x44>
     ff6:	85 ec       	ldi	r24, 0xC5	; 197
     ff8:	01 c0       	rjmp	.+2      	; 0xffc <twi_readFrom+0x5a>
     ffa:	85 ee       	ldi	r24, 0xE5	; 229
     ffc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1000:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <twi_state>
    1004:	81 30       	cpi	r24, 0x01	; 1
    1006:	e1 f3       	breq	.-8      	; 0x1000 <twi_readFrom+0x5e>
    1008:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <twi_masterBufferIndex>
    100c:	84 17       	cp	r24, r20
    100e:	10 f4       	brcc	.+4      	; 0x1014 <twi_readFrom+0x72>
    1010:	40 91 f0 01 	lds	r20, 0x01F0	; 0x8001f0 <twi_masterBufferIndex>
    1014:	a1 ef       	ldi	r26, 0xF1	; 241
    1016:	b1 e0       	ldi	r27, 0x01	; 1
    1018:	96 2f       	mov	r25, r22
    101a:	fb 01       	movw	r30, r22
    101c:	8e 2f       	mov	r24, r30
    101e:	89 1b       	sub	r24, r25
    1020:	84 17       	cp	r24, r20
    1022:	18 f4       	brcc	.+6      	; 0x102a <twi_readFrom+0x88>
    1024:	8d 91       	ld	r24, X+
    1026:	81 93       	st	Z+, r24
    1028:	f9 cf       	rjmp	.-14     	; 0x101c <twi_readFrom+0x7a>
    102a:	84 2f       	mov	r24, r20
    102c:	08 95       	ret
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	08 95       	ret

00001032 <twi_writeTo>:
    1032:	0f 93       	push	r16
    1034:	41 32       	cpi	r20, 0x21	; 33
    1036:	08 f0       	brcs	.+2      	; 0x103a <twi_writeTo+0x8>
    1038:	4a c0       	rjmp	.+148    	; 0x10ce <twi_writeTo+0x9c>
    103a:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <twi_state>
    103e:	91 11       	cpse	r25, r1
    1040:	fc cf       	rjmp	.-8      	; 0x103a <twi_writeTo+0x8>
    1042:	32 e0       	ldi	r19, 0x02	; 2
    1044:	30 93 18 02 	sts	0x0218, r19	; 0x800218 <twi_state>
    1048:	00 93 16 02 	sts	0x0216, r16	; 0x800216 <twi_sendStop>
    104c:	3f ef       	ldi	r19, 0xFF	; 255
    104e:	30 93 ab 01 	sts	0x01AB, r19	; 0x8001ab <twi_error>
    1052:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <twi_masterBufferIndex>
    1056:	40 93 ef 01 	sts	0x01EF, r20	; 0x8001ef <twi_masterBufferLength>
    105a:	56 2f       	mov	r21, r22
    105c:	a1 ef       	ldi	r26, 0xF1	; 241
    105e:	b1 e0       	ldi	r27, 0x01	; 1
    1060:	fb 01       	movw	r30, r22
    1062:	3e 2f       	mov	r19, r30
    1064:	35 1b       	sub	r19, r21
    1066:	34 17       	cp	r19, r20
    1068:	18 f4       	brcc	.+6      	; 0x1070 <twi_writeTo+0x3e>
    106a:	31 91       	ld	r19, Z+
    106c:	3d 93       	st	X+, r19
    106e:	f9 cf       	rjmp	.-14     	; 0x1062 <twi_writeTo+0x30>
    1070:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <twi_slarw>
    1074:	30 91 17 02 	lds	r19, 0x0217	; 0x800217 <twi_slarw>
    1078:	88 0f       	add	r24, r24
    107a:	83 2b       	or	r24, r19
    107c:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <twi_slarw>
    1080:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <twi_inRepStart>
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	61 f4       	brne	.+24     	; 0x10a0 <twi_writeTo+0x6e>
    1088:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <twi_inRepStart>
    108c:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <twi_slarw>
    1090:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1094:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1098:	83 fd       	sbrc	r24, 3
    109a:	f8 cf       	rjmp	.-16     	; 0x108c <twi_writeTo+0x5a>
    109c:	85 ec       	ldi	r24, 0xC5	; 197
    109e:	01 c0       	rjmp	.+2      	; 0x10a2 <twi_writeTo+0x70>
    10a0:	85 ee       	ldi	r24, 0xE5	; 229
    10a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    10a6:	22 23       	and	r18, r18
    10a8:	21 f0       	breq	.+8      	; 0x10b2 <twi_writeTo+0x80>
    10aa:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <twi_state>
    10ae:	82 30       	cpi	r24, 0x02	; 2
    10b0:	d1 f3       	breq	.-12     	; 0x10a6 <twi_writeTo+0x74>
    10b2:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <twi_error>
    10b6:	8f 3f       	cpi	r24, 0xFF	; 255
    10b8:	79 f0       	breq	.+30     	; 0x10d8 <twi_writeTo+0xa6>
    10ba:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <twi_error>
    10be:	80 32       	cpi	r24, 0x20	; 32
    10c0:	41 f0       	breq	.+16     	; 0x10d2 <twi_writeTo+0xa0>
    10c2:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <twi_error>
    10c6:	80 33       	cpi	r24, 0x30	; 48
    10c8:	31 f0       	breq	.+12     	; 0x10d6 <twi_writeTo+0xa4>
    10ca:	94 e0       	ldi	r25, 0x04	; 4
    10cc:	05 c0       	rjmp	.+10     	; 0x10d8 <twi_writeTo+0xa6>
    10ce:	91 e0       	ldi	r25, 0x01	; 1
    10d0:	03 c0       	rjmp	.+6      	; 0x10d8 <twi_writeTo+0xa6>
    10d2:	92 e0       	ldi	r25, 0x02	; 2
    10d4:	01 c0       	rjmp	.+2      	; 0x10d8 <twi_writeTo+0xa6>
    10d6:	93 e0       	ldi	r25, 0x03	; 3
    10d8:	89 2f       	mov	r24, r25
    10da:	0f 91       	pop	r16
    10dc:	08 95       	ret

000010de <twi_transmit>:
    10de:	40 91 cd 01 	lds	r20, 0x01CD	; 0x8001cd <twi_txBufferLength>
    10e2:	26 2f       	mov	r18, r22
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	24 0f       	add	r18, r20
    10e8:	31 1d       	adc	r19, r1
    10ea:	21 32       	cpi	r18, 0x21	; 33
    10ec:	31 05       	cpc	r19, r1
    10ee:	dc f4       	brge	.+54     	; 0x1126 <twi_transmit+0x48>
    10f0:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <twi_state>
    10f4:	24 30       	cpi	r18, 0x04	; 4
    10f6:	c9 f4       	brne	.+50     	; 0x112a <twi_transmit+0x4c>
    10f8:	fc 01       	movw	r30, r24
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	86 17       	cp	r24, r22
    1100:	58 f4       	brcc	.+22     	; 0x1118 <twi_transmit+0x3a>
    1102:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <twi_txBufferLength>
    1106:	21 91       	ld	r18, Z+
    1108:	dc 01       	movw	r26, r24
    110a:	a1 53       	subi	r26, 0x31	; 49
    110c:	be 4f       	sbci	r27, 0xFE	; 254
    110e:	a3 0f       	add	r26, r19
    1110:	b1 1d       	adc	r27, r1
    1112:	2c 93       	st	X, r18
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	f3 cf       	rjmp	.-26     	; 0x10fe <twi_transmit+0x20>
    1118:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <twi_txBufferLength>
    111c:	68 0f       	add	r22, r24
    111e:	60 93 cd 01 	sts	0x01CD, r22	; 0x8001cd <twi_txBufferLength>
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	08 95       	ret
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	08 95       	ret
    112a:	82 e0       	ldi	r24, 0x02	; 2
    112c:	08 95       	ret

0000112e <twi_attachSlaveRxEvent>:
    112e:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <twi_onSlaveReceive+0x1>
    1132:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <twi_onSlaveReceive>
    1136:	08 95       	ret

00001138 <twi_attachSlaveTxEvent>:
    1138:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <twi_onSlaveTransmit+0x1>
    113c:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <twi_onSlaveTransmit>
    1140:	08 95       	ret

00001142 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1142:	85 ed       	ldi	r24, 0xD5	; 213
    1144:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1148:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    114c:	84 fd       	sbrc	r24, 4
    114e:	fc cf       	rjmp	.-8      	; 0x1148 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1150:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <twi_state>
    1154:	08 95       	ret

00001156 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1156:	85 ec       	ldi	r24, 0xC5	; 197
    1158:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    115c:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <twi_state>
    1160:	08 95       	ret

00001162 <__vector_36>:
}

ISR(TWI_vect)
{
    1162:	1f 92       	push	r1
    1164:	0f 92       	push	r0
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	0f 92       	push	r0
    116a:	11 24       	eor	r1, r1
    116c:	2f 93       	push	r18
    116e:	3f 93       	push	r19
    1170:	4f 93       	push	r20
    1172:	5f 93       	push	r21
    1174:	6f 93       	push	r22
    1176:	7f 93       	push	r23
    1178:	8f 93       	push	r24
    117a:	9f 93       	push	r25
    117c:	af 93       	push	r26
    117e:	bf 93       	push	r27
    1180:	ef 93       	push	r30
    1182:	ff 93       	push	r31
  switch(TW_STATUS){
    1184:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1188:	88 7f       	andi	r24, 0xF8	; 248
    118a:	80 36       	cpi	r24, 0x60	; 96
    118c:	09 f4       	brne	.+2      	; 0x1190 <__vector_36+0x2e>
    118e:	9e c0       	rjmp	.+316    	; 0x12cc <__vector_36+0x16a>
    1190:	78 f5       	brcc	.+94     	; 0x11f0 <__vector_36+0x8e>
    1192:	88 32       	cpi	r24, 0x28	; 40
    1194:	09 f4       	brne	.+2      	; 0x1198 <__vector_36+0x36>
    1196:	5d c0       	rjmp	.+186    	; 0x1252 <__vector_36+0xf0>
    1198:	90 f4       	brcc	.+36     	; 0x11be <__vector_36+0x5c>
    119a:	80 31       	cpi	r24, 0x10	; 16
    119c:	09 f4       	brne	.+2      	; 0x11a0 <__vector_36+0x3e>
    119e:	56 c0       	rjmp	.+172    	; 0x124c <__vector_36+0xea>
    11a0:	38 f4       	brcc	.+14     	; 0x11b0 <__vector_36+0x4e>
    11a2:	88 23       	and	r24, r24
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <__vector_36+0x46>
    11a6:	f5 c0       	rjmp	.+490    	; 0x1392 <__vector_36+0x230>
    11a8:	88 30       	cpi	r24, 0x08	; 8
    11aa:	09 f4       	brne	.+2      	; 0x11ae <__vector_36+0x4c>
    11ac:	4f c0       	rjmp	.+158    	; 0x124c <__vector_36+0xea>
    11ae:	f5 c0       	rjmp	.+490    	; 0x139a <__vector_36+0x238>
    11b0:	88 31       	cpi	r24, 0x18	; 24
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <__vector_36+0x54>
    11b4:	4e c0       	rjmp	.+156    	; 0x1252 <__vector_36+0xf0>
    11b6:	80 32       	cpi	r24, 0x20	; 32
    11b8:	09 f4       	brne	.+2      	; 0x11bc <__vector_36+0x5a>
    11ba:	5f c0       	rjmp	.+190    	; 0x127a <__vector_36+0x118>
    11bc:	ee c0       	rjmp	.+476    	; 0x139a <__vector_36+0x238>
    11be:	80 34       	cpi	r24, 0x40	; 64
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <__vector_36+0x62>
    11c2:	6a c0       	rjmp	.+212    	; 0x1298 <__vector_36+0x136>
    11c4:	58 f4       	brcc	.+22     	; 0x11dc <__vector_36+0x7a>
    11c6:	80 33       	cpi	r24, 0x30	; 48
    11c8:	09 f4       	brne	.+2      	; 0x11cc <__vector_36+0x6a>
    11ca:	57 c0       	rjmp	.+174    	; 0x127a <__vector_36+0x118>
    11cc:	88 33       	cpi	r24, 0x38	; 56
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <__vector_36+0x70>
    11d0:	e4 c0       	rjmp	.+456    	; 0x139a <__vector_36+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    11d2:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <twi_error>
      twi_releaseBus();
    11d6:	0e 94 ab 08 	call	0x1156	; 0x1156 <twi_releaseBus>
      break;
    11da:	df c0       	rjmp	.+446    	; 0x139a <__vector_36+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    11dc:	80 35       	cpi	r24, 0x50	; 80
    11de:	09 f4       	brne	.+2      	; 0x11e2 <__vector_36+0x80>
    11e0:	4f c0       	rjmp	.+158    	; 0x1280 <__vector_36+0x11e>
    11e2:	88 35       	cpi	r24, 0x58	; 88
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <__vector_36+0x86>
    11e6:	5d c0       	rjmp	.+186    	; 0x12a2 <__vector_36+0x140>
    11e8:	88 34       	cpi	r24, 0x48	; 72
    11ea:	09 f0       	breq	.+2      	; 0x11ee <__vector_36+0x8c>
    11ec:	d6 c0       	rjmp	.+428    	; 0x139a <__vector_36+0x238>
    11ee:	d3 c0       	rjmp	.+422    	; 0x1396 <__vector_36+0x234>
    11f0:	88 39       	cpi	r24, 0x98	; 152
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <__vector_36+0x94>
    11f4:	c4 c0       	rjmp	.+392    	; 0x137e <__vector_36+0x21c>
    11f6:	a8 f4       	brcc	.+42     	; 0x1222 <__vector_36+0xc0>
    11f8:	88 37       	cpi	r24, 0x78	; 120
    11fa:	09 f4       	brne	.+2      	; 0x11fe <__vector_36+0x9c>
    11fc:	67 c0       	rjmp	.+206    	; 0x12cc <__vector_36+0x16a>
    11fe:	38 f4       	brcc	.+14     	; 0x120e <__vector_36+0xac>
    1200:	88 36       	cpi	r24, 0x68	; 104
    1202:	09 f4       	brne	.+2      	; 0x1206 <__vector_36+0xa4>
    1204:	63 c0       	rjmp	.+198    	; 0x12cc <__vector_36+0x16a>
    1206:	80 37       	cpi	r24, 0x70	; 112
    1208:	09 f4       	brne	.+2      	; 0x120c <__vector_36+0xaa>
    120a:	60 c0       	rjmp	.+192    	; 0x12cc <__vector_36+0x16a>
    120c:	c6 c0       	rjmp	.+396    	; 0x139a <__vector_36+0x238>
    120e:	88 38       	cpi	r24, 0x88	; 136
    1210:	09 f4       	brne	.+2      	; 0x1214 <__vector_36+0xb2>
    1212:	b5 c0       	rjmp	.+362    	; 0x137e <__vector_36+0x21c>
    1214:	80 39       	cpi	r24, 0x90	; 144
    1216:	09 f4       	brne	.+2      	; 0x121a <__vector_36+0xb8>
    1218:	5f c0       	rjmp	.+190    	; 0x12d8 <__vector_36+0x176>
    121a:	80 38       	cpi	r24, 0x80	; 128
    121c:	09 f0       	breq	.+2      	; 0x1220 <__vector_36+0xbe>
    121e:	bd c0       	rjmp	.+378    	; 0x139a <__vector_36+0x238>
    1220:	5b c0       	rjmp	.+182    	; 0x12d8 <__vector_36+0x176>
    1222:	80 3b       	cpi	r24, 0xB0	; 176
    1224:	09 f4       	brne	.+2      	; 0x1228 <__vector_36+0xc6>
    1226:	83 c0       	rjmp	.+262    	; 0x132e <__vector_36+0x1cc>
    1228:	38 f4       	brcc	.+14     	; 0x1238 <__vector_36+0xd6>
    122a:	80 3a       	cpi	r24, 0xA0	; 160
    122c:	09 f4       	brne	.+2      	; 0x1230 <__vector_36+0xce>
    122e:	66 c0       	rjmp	.+204    	; 0x12fc <__vector_36+0x19a>
    1230:	88 3a       	cpi	r24, 0xA8	; 168
    1232:	09 f4       	brne	.+2      	; 0x1236 <__vector_36+0xd4>
    1234:	7c c0       	rjmp	.+248    	; 0x132e <__vector_36+0x1cc>
    1236:	b1 c0       	rjmp	.+354    	; 0x139a <__vector_36+0x238>
    1238:	80 3c       	cpi	r24, 0xC0	; 192
    123a:	09 f4       	brne	.+2      	; 0x123e <__vector_36+0xdc>
    123c:	a4 c0       	rjmp	.+328    	; 0x1386 <__vector_36+0x224>
    123e:	88 3c       	cpi	r24, 0xC8	; 200
    1240:	09 f4       	brne	.+2      	; 0x1244 <__vector_36+0xe2>
    1242:	a1 c0       	rjmp	.+322    	; 0x1386 <__vector_36+0x224>
    1244:	88 3b       	cpi	r24, 0xB8	; 184
    1246:	09 f4       	brne	.+2      	; 0x124a <__vector_36+0xe8>
    1248:	87 c0       	rjmp	.+270    	; 0x1358 <__vector_36+0x1f6>
    124a:	a7 c0       	rjmp	.+334    	; 0x139a <__vector_36+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    124c:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <twi_slarw>
    1250:	10 c0       	rjmp	.+32     	; 0x1272 <__vector_36+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1252:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <twi_masterBufferIndex>
    1256:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <twi_masterBufferLength>
    125a:	98 17       	cp	r25, r24
    125c:	70 f5       	brcc	.+92     	; 0x12ba <__vector_36+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    125e:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <twi_masterBufferIndex>
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	8e 0f       	add	r24, r30
    1266:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <twi_masterBufferIndex>
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	ef 50       	subi	r30, 0x0F	; 15
    126e:	fe 4f       	sbci	r31, 0xFE	; 254
    1270:	80 81       	ld	r24, Z
    1272:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1276:	85 ec       	ldi	r24, 0xC5	; 197
    1278:	83 c0       	rjmp	.+262    	; 0x1380 <__vector_36+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    127a:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <twi_error>
    127e:	8b c0       	rjmp	.+278    	; 0x1396 <__vector_36+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1280:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <twi_masterBufferIndex>
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	8e 0f       	add	r24, r30
    1288:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <twi_masterBufferIndex>
    128c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	ef 50       	subi	r30, 0x0F	; 15
    1294:	fe 4f       	sbci	r31, 0xFE	; 254
    1296:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1298:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <twi_masterBufferIndex>
    129c:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <twi_masterBufferLength>
    12a0:	6b c0       	rjmp	.+214    	; 0x1378 <__vector_36+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    12a2:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <twi_masterBufferIndex>
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	8e 0f       	add	r24, r30
    12aa:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <twi_masterBufferIndex>
    12ae:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	ef 50       	subi	r30, 0x0F	; 15
    12b6:	fe 4f       	sbci	r31, 0xFE	; 254
    12b8:	80 83       	st	Z, r24
	if (twi_sendStop)
    12ba:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <twi_sendStop>
    12be:	81 11       	cpse	r24, r1
    12c0:	6a c0       	rjmp	.+212    	; 0x1396 <__vector_36+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    12c8:	84 ea       	ldi	r24, 0xA4	; 164
    12ca:	5e c0       	rjmp	.+188    	; 0x1388 <__vector_36+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    12cc:	83 e0       	ldi	r24, 0x03	; 3
    12ce:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    12d2:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <twi_rxBufferIndex>
    12d6:	cf cf       	rjmp	.-98     	; 0x1276 <__vector_36+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    12d8:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <twi_rxBufferIndex>
    12dc:	80 32       	cpi	r24, 0x20	; 32
    12de:	08 f0       	brcs	.+2      	; 0x12e2 <__vector_36+0x180>
    12e0:	4e c0       	rjmp	.+156    	; 0x137e <__vector_36+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    12e2:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <twi_rxBufferIndex>
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	8e 0f       	add	r24, r30
    12ea:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <twi_rxBufferIndex>
    12ee:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	e3 55       	subi	r30, 0x53	; 83
    12f6:	fe 4f       	sbci	r31, 0xFE	; 254
    12f8:	80 83       	st	Z, r24
    12fa:	bd cf       	rjmp	.-134    	; 0x1276 <__vector_36+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    12fc:	0e 94 ab 08 	call	0x1156	; 0x1156 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1300:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <twi_rxBufferIndex>
    1304:	80 32       	cpi	r24, 0x20	; 32
    1306:	30 f4       	brcc	.+12     	; 0x1314 <__vector_36+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1308:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <twi_rxBufferIndex>
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	e3 55       	subi	r30, 0x53	; 83
    1310:	fe 4f       	sbci	r31, 0xFE	; 254
    1312:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1314:	60 91 ac 01 	lds	r22, 0x01AC	; 0x8001ac <twi_rxBufferIndex>
    1318:	70 e0       	ldi	r23, 0x00	; 0
    131a:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <twi_onSlaveReceive>
    131e:	f0 91 12 02 	lds	r31, 0x0212	; 0x800212 <twi_onSlaveReceive+0x1>
    1322:	8d ea       	ldi	r24, 0xAD	; 173
    1324:	91 e0       	ldi	r25, 0x01	; 1
    1326:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1328:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <twi_rxBufferIndex>
      break;
    132c:	36 c0       	rjmp	.+108    	; 0x139a <__vector_36+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    132e:	84 e0       	ldi	r24, 0x04	; 4
    1330:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1334:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1338:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    133c:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <twi_onSlaveTransmit>
    1340:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <twi_onSlaveTransmit+0x1>
    1344:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1346:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <twi_txBufferLength>
    134a:	81 11       	cpse	r24, r1
    134c:	05 c0       	rjmp	.+10     	; 0x1358 <__vector_36+0x1f6>
        twi_txBufferLength = 1;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1354:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1358:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <twi_txBufferIndex>
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	8e 0f       	add	r24, r30
    1360:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <twi_txBufferIndex>
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	e1 53       	subi	r30, 0x31	; 49
    1368:	fe 4f       	sbci	r31, 0xFE	; 254
    136a:	80 81       	ld	r24, Z
    136c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1370:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <twi_txBufferIndex>
    1374:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <twi_txBufferLength>
    1378:	98 17       	cp	r25, r24
    137a:	08 f4       	brcc	.+2      	; 0x137e <__vector_36+0x21c>
    137c:	7c cf       	rjmp	.-264    	; 0x1276 <__vector_36+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    137e:	85 e8       	ldi	r24, 0x85	; 133
    1380:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1384:	0a c0       	rjmp	.+20     	; 0x139a <__vector_36+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1386:	85 ec       	ldi	r24, 0xC5	; 197
    1388:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    138c:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <twi_state>
      break;
    1390:	04 c0       	rjmp	.+8      	; 0x139a <__vector_36+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1392:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <twi_error>
      twi_stop();
    1396:	0e 94 a1 08 	call	0x1142	; 0x1142 <twi_stop>
      break;
  }
}
    139a:	ff 91       	pop	r31
    139c:	ef 91       	pop	r30
    139e:	bf 91       	pop	r27
    13a0:	af 91       	pop	r26
    13a2:	9f 91       	pop	r25
    13a4:	8f 91       	pop	r24
    13a6:	7f 91       	pop	r23
    13a8:	6f 91       	pop	r22
    13aa:	5f 91       	pop	r21
    13ac:	4f 91       	pop	r20
    13ae:	3f 91       	pop	r19
    13b0:	2f 91       	pop	r18
    13b2:	0f 90       	pop	r0
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	0f 90       	pop	r0
    13b8:	1f 90       	pop	r1
    13ba:	18 95       	reti

000013bc <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    13bc:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <_ZN7TwoWire14rxBufferLengthE>
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <_ZN7TwoWire13rxBufferIndexE>
    13c6:	82 1b       	sub	r24, r18
    13c8:	91 09       	sbc	r25, r1
    13ca:	08 95       	ret

000013cc <_ZN7TwoWire4readEv>:
    13cc:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <_ZN7TwoWire13rxBufferIndexE>
    13d0:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <_ZN7TwoWire14rxBufferLengthE>
    13d4:	98 17       	cp	r25, r24
    13d6:	50 f4       	brcc	.+20     	; 0x13ec <_ZN7TwoWire4readEv+0x20>
    13d8:	e9 2f       	mov	r30, r25
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	e1 5b       	subi	r30, 0xB1	; 177
    13de:	fd 4f       	sbci	r31, 0xFD	; 253
    13e0:	20 81       	ld	r18, Z
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	9f 5f       	subi	r25, 0xFF	; 255
    13e6:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <_ZN7TwoWire13rxBufferIndexE>
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <_ZN7TwoWire4readEv+0x24>
    13ec:	2f ef       	ldi	r18, 0xFF	; 255
    13ee:	3f ef       	ldi	r19, 0xFF	; 255
    13f0:	c9 01       	movw	r24, r18
    13f2:	08 95       	ret

000013f4 <_ZN7TwoWire4peekEv>:
    13f4:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <_ZN7TwoWire13rxBufferIndexE>
    13f8:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <_ZN7TwoWire14rxBufferLengthE>
    13fc:	e8 17       	cp	r30, r24
    13fe:	30 f4       	brcc	.+12     	; 0x140c <_ZN7TwoWire4peekEv+0x18>
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	e1 5b       	subi	r30, 0xB1	; 177
    1404:	fd 4f       	sbci	r31, 0xFD	; 253
    1406:	80 81       	ld	r24, Z
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	08 95       	ret
    140c:	8f ef       	ldi	r24, 0xFF	; 255
    140e:	9f ef       	ldi	r25, 0xFF	; 255
    1410:	08 95       	ret

00001412 <_ZN7TwoWire5flushEv>:
    1412:	08 95       	ret

00001414 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	ec 01       	movw	r28, r24
    141a:	e0 91 25 02 	lds	r30, 0x0225	; 0x800225 <_ZN7TwoWire14user_onReceiveE>
    141e:	f0 91 26 02 	lds	r31, 0x0226	; 0x800226 <_ZN7TwoWire14user_onReceiveE+0x1>
    1422:	30 97       	sbiw	r30, 0x00	; 0
    1424:	f1 f0       	breq	.+60     	; 0x1462 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1426:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <_ZN7TwoWire13rxBufferIndexE>
    142a:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <_ZN7TwoWire14rxBufferLengthE>
    142e:	98 17       	cp	r25, r24
    1430:	c0 f0       	brcs	.+48     	; 0x1462 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	29 2f       	mov	r18, r25
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	26 17       	cp	r18, r22
    143a:	37 07       	cpc	r19, r23
    143c:	54 f4       	brge	.+20     	; 0x1452 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    143e:	de 01       	movw	r26, r28
    1440:	a2 0f       	add	r26, r18
    1442:	b3 1f       	adc	r27, r19
    1444:	4c 91       	ld	r20, X
    1446:	d9 01       	movw	r26, r18
    1448:	a1 5b       	subi	r26, 0xB1	; 177
    144a:	bd 4f       	sbci	r27, 0xFD	; 253
    144c:	4c 93       	st	X, r20
    144e:	9f 5f       	subi	r25, 0xFF	; 255
    1450:	f1 cf       	rjmp	.-30     	; 0x1434 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1452:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <_ZN7TwoWire13rxBufferIndexE>
    1456:	60 93 4d 02 	sts	0x024D, r22	; 0x80024d <_ZN7TwoWire14rxBufferLengthE>
    145a:	cb 01       	movw	r24, r22
    145c:	df 91       	pop	r29
    145e:	cf 91       	pop	r28
    1460:	09 94       	ijmp
    1462:	df 91       	pop	r29
    1464:	cf 91       	pop	r28
    1466:	08 95       	ret

00001468 <_ZN7TwoWire16onRequestServiceEv>:
    1468:	e0 91 27 02 	lds	r30, 0x0227	; 0x800227 <_ZN7TwoWire14user_onRequestE>
    146c:	f0 91 28 02 	lds	r31, 0x0228	; 0x800228 <_ZN7TwoWire14user_onRequestE+0x1>
    1470:	30 97       	sbiw	r30, 0x00	; 0
    1472:	29 f0       	breq	.+10     	; 0x147e <_ZN7TwoWire16onRequestServiceEv+0x16>
    1474:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <_ZN7TwoWire13txBufferIndexE>
    1478:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <_ZN7TwoWire14txBufferLengthE>
    147c:	09 94       	ijmp
    147e:	08 95       	ret

00001480 <_ZN7TwoWire5writeEPKhj>:
    1480:	cf 92       	push	r12
    1482:	df 92       	push	r13
    1484:	ef 92       	push	r14
    1486:	ff 92       	push	r15
    1488:	0f 93       	push	r16
    148a:	1f 93       	push	r17
    148c:	cf 93       	push	r28
    148e:	df 93       	push	r29
    1490:	7c 01       	movw	r14, r24
    1492:	cb 01       	movw	r24, r22
    1494:	8a 01       	movw	r16, r20
    1496:	20 91 29 02 	lds	r18, 0x0229	; 0x800229 <_ZN7TwoWire12transmittingE>
    149a:	22 23       	and	r18, r18
    149c:	89 f0       	breq	.+34     	; 0x14c0 <_ZN7TwoWire5writeEPKhj+0x40>
    149e:	eb 01       	movw	r28, r22
    14a0:	6b 01       	movw	r12, r22
    14a2:	c4 0e       	add	r12, r20
    14a4:	d5 1e       	adc	r13, r21
    14a6:	cc 15       	cp	r28, r12
    14a8:	dd 05       	cpc	r29, r13
    14aa:	69 f0       	breq	.+26     	; 0x14c6 <_ZN7TwoWire5writeEPKhj+0x46>
    14ac:	69 91       	ld	r22, Y+
    14ae:	d7 01       	movw	r26, r14
    14b0:	ed 91       	ld	r30, X+
    14b2:	fc 91       	ld	r31, X
    14b4:	01 90       	ld	r0, Z+
    14b6:	f0 81       	ld	r31, Z
    14b8:	e0 2d       	mov	r30, r0
    14ba:	c7 01       	movw	r24, r14
    14bc:	09 95       	icall
    14be:	f3 cf       	rjmp	.-26     	; 0x14a6 <_ZN7TwoWire5writeEPKhj+0x26>
    14c0:	64 2f       	mov	r22, r20
    14c2:	0e 94 6f 08 	call	0x10de	; 0x10de <twi_transmit>
    14c6:	c8 01       	movw	r24, r16
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	1f 91       	pop	r17
    14ce:	0f 91       	pop	r16
    14d0:	ff 90       	pop	r15
    14d2:	ef 90       	pop	r14
    14d4:	df 90       	pop	r13
    14d6:	cf 90       	pop	r12
    14d8:	08 95       	ret

000014da <_ZN7TwoWire5writeEh>:
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	1f 92       	push	r1
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	69 83       	std	Y+1, r22	; 0x01
    14e6:	20 91 29 02 	lds	r18, 0x0229	; 0x800229 <_ZN7TwoWire12transmittingE>
    14ea:	22 23       	and	r18, r18
    14ec:	d1 f0       	breq	.+52     	; 0x1522 <_ZN7TwoWire5writeEh+0x48>
    14ee:	20 91 2a 02 	lds	r18, 0x022A	; 0x80022a <_ZN7TwoWire14txBufferLengthE>
    14f2:	20 32       	cpi	r18, 0x20	; 32
    14f4:	40 f0       	brcs	.+16     	; 0x1506 <_ZN7TwoWire5writeEh+0x2c>
    14f6:	21 e0       	ldi	r18, 0x01	; 1
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	fc 01       	movw	r30, r24
    14fc:	33 83       	std	Z+3, r19	; 0x03
    14fe:	22 83       	std	Z+2, r18	; 0x02
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	15 c0       	rjmp	.+42     	; 0x1530 <_ZN7TwoWire5writeEh+0x56>
    1506:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <_ZN7TwoWire13txBufferIndexE>
    150a:	e8 2f       	mov	r30, r24
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	e4 5d       	subi	r30, 0xD4	; 212
    1510:	fd 4f       	sbci	r31, 0xFD	; 253
    1512:	99 81       	ldd	r25, Y+1	; 0x01
    1514:	90 83       	st	Z, r25
    1516:	8f 5f       	subi	r24, 0xFF	; 255
    1518:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <_ZN7TwoWire13txBufferIndexE>
    151c:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <_ZN7TwoWire14txBufferLengthE>
    1520:	05 c0       	rjmp	.+10     	; 0x152c <_ZN7TwoWire5writeEh+0x52>
    1522:	61 e0       	ldi	r22, 0x01	; 1
    1524:	ce 01       	movw	r24, r28
    1526:	01 96       	adiw	r24, 0x01	; 1
    1528:	0e 94 6f 08 	call	0x10de	; 0x10de <twi_transmit>
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	0f 90       	pop	r0
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	08 95       	ret

00001538 <_ZN7TwoWireC1Ev>:
    1538:	fc 01       	movw	r30, r24
    153a:	13 82       	std	Z+3, r1	; 0x03
    153c:	12 82       	std	Z+2, r1	; 0x02
    153e:	88 ee       	ldi	r24, 0xE8	; 232
    1540:	93 e0       	ldi	r25, 0x03	; 3
    1542:	a0 e0       	ldi	r26, 0x00	; 0
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	84 83       	std	Z+4, r24	; 0x04
    1548:	95 83       	std	Z+5, r25	; 0x05
    154a:	a6 83       	std	Z+6, r26	; 0x06
    154c:	b7 83       	std	Z+7, r27	; 0x07
    154e:	8b e5       	ldi	r24, 0x5B	; 91
    1550:	91 e0       	ldi	r25, 0x01	; 1
    1552:	91 83       	std	Z+1, r25	; 0x01
    1554:	80 83       	st	Z, r24
    1556:	08 95       	ret

00001558 <_ZN7TwoWire5beginEv>:
    1558:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <_ZN7TwoWire13rxBufferIndexE>
    155c:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <_ZN7TwoWire14rxBufferLengthE>
    1560:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <_ZN7TwoWire13txBufferIndexE>
    1564:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <_ZN7TwoWire14txBufferLengthE>
    1568:	0e 94 b3 07 	call	0xf66	; 0xf66 <twi_init>
    156c:	84 e3       	ldi	r24, 0x34	; 52
    156e:	9a e0       	ldi	r25, 0x0A	; 10
    1570:	0e 94 9c 08 	call	0x1138	; 0x1138 <twi_attachSlaveTxEvent>
    1574:	8a e0       	ldi	r24, 0x0A	; 10
    1576:	9a e0       	ldi	r25, 0x0A	; 10
    1578:	0c 94 97 08 	jmp	0x112e	; 0x112e <twi_attachSlaveRxEvent>

0000157c <_ZN7TwoWire17beginTransmissionEh>:
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <_ZN7TwoWire12transmittingE>
    1582:	60 93 4c 02 	sts	0x024C, r22	; 0x80024c <_ZN7TwoWire9txAddressE>
    1586:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <_ZN7TwoWire13txBufferIndexE>
    158a:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <_ZN7TwoWire14txBufferLengthE>
    158e:	08 95       	ret

00001590 <_ZN7TwoWire15endTransmissionEh>:
    1590:	0f 93       	push	r16
    1592:	06 2f       	mov	r16, r22
    1594:	21 e0       	ldi	r18, 0x01	; 1
    1596:	40 91 2a 02 	lds	r20, 0x022A	; 0x80022a <_ZN7TwoWire14txBufferLengthE>
    159a:	6c e2       	ldi	r22, 0x2C	; 44
    159c:	72 e0       	ldi	r23, 0x02	; 2
    159e:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <_ZN7TwoWire9txAddressE>
    15a2:	0e 94 19 08 	call	0x1032	; 0x1032 <twi_writeTo>
    15a6:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <_ZN7TwoWire13txBufferIndexE>
    15aa:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <_ZN7TwoWire14txBufferLengthE>
    15ae:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <_ZN7TwoWire12transmittingE>
    15b2:	0f 91       	pop	r16
    15b4:	08 95       	ret

000015b6 <_ZN7TwoWire11requestFromEhhmhh>:
    15b6:	4f 92       	push	r4
    15b8:	5f 92       	push	r5
    15ba:	6f 92       	push	r6
    15bc:	7f 92       	push	r7
    15be:	af 92       	push	r10
    15c0:	bf 92       	push	r11
    15c2:	cf 92       	push	r12
    15c4:	ef 92       	push	r14
    15c6:	ff 92       	push	r15
    15c8:	0f 93       	push	r16
    15ca:	1f 93       	push	r17
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	5c 01       	movw	r10, r24
    15d2:	f6 2e       	mov	r15, r22
    15d4:	d4 2f       	mov	r29, r20
    15d6:	28 01       	movw	r4, r16
    15d8:	39 01       	movw	r6, r18
    15da:	ee 20       	and	r14, r14
    15dc:	21 f1       	breq	.+72     	; 0x1626 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    15de:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN7TwoWire17beginTransmissionEh>
    15e2:	ce 2d       	mov	r28, r14
    15e4:	c4 30       	cpi	r28, 0x04	; 4
    15e6:	08 f0       	brcs	.+2      	; 0x15ea <_ZN7TwoWire11requestFromEhhmhh+0x34>
    15e8:	c3 e0       	ldi	r28, 0x03	; 3
    15ea:	c1 50       	subi	r28, 0x01	; 1
    15ec:	c0 f0       	brcs	.+48     	; 0x161e <_ZN7TwoWire11requestFromEhhmhh+0x68>
    15ee:	28 e0       	ldi	r18, 0x08	; 8
    15f0:	c2 9f       	mul	r28, r18
    15f2:	c0 01       	movw	r24, r0
    15f4:	11 24       	eor	r1, r1
    15f6:	a3 01       	movw	r20, r6
    15f8:	92 01       	movw	r18, r4
    15fa:	04 c0       	rjmp	.+8      	; 0x1604 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    15fc:	56 95       	lsr	r21
    15fe:	47 95       	ror	r20
    1600:	37 95       	ror	r19
    1602:	27 95       	ror	r18
    1604:	8a 95       	dec	r24
    1606:	d2 f7       	brpl	.-12     	; 0x15fc <_ZN7TwoWire11requestFromEhhmhh+0x46>
    1608:	ca 01       	movw	r24, r20
    160a:	b9 01       	movw	r22, r18
    160c:	d5 01       	movw	r26, r10
    160e:	ed 91       	ld	r30, X+
    1610:	fc 91       	ld	r31, X
    1612:	01 90       	ld	r0, Z+
    1614:	f0 81       	ld	r31, Z
    1616:	e0 2d       	mov	r30, r0
    1618:	c5 01       	movw	r24, r10
    161a:	09 95       	icall
    161c:	e6 cf       	rjmp	.-52     	; 0x15ea <_ZN7TwoWire11requestFromEhhmhh+0x34>
    161e:	60 e0       	ldi	r22, 0x00	; 0
    1620:	c5 01       	movw	r24, r10
    1622:	0e 94 c8 0a 	call	0x1590	; 0x1590 <_ZN7TwoWire15endTransmissionEh>
    1626:	4d 2f       	mov	r20, r29
    1628:	d1 32       	cpi	r29, 0x21	; 33
    162a:	08 f0       	brcs	.+2      	; 0x162e <_ZN7TwoWire11requestFromEhhmhh+0x78>
    162c:	40 e2       	ldi	r20, 0x20	; 32
    162e:	2c 2d       	mov	r18, r12
    1630:	6f e4       	ldi	r22, 0x4F	; 79
    1632:	72 e0       	ldi	r23, 0x02	; 2
    1634:	8f 2d       	mov	r24, r15
    1636:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <twi_readFrom>
    163a:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <_ZN7TwoWire13rxBufferIndexE>
    163e:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <_ZN7TwoWire14rxBufferLengthE>
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	1f 91       	pop	r17
    1648:	0f 91       	pop	r16
    164a:	ff 90       	pop	r15
    164c:	ef 90       	pop	r14
    164e:	cf 90       	pop	r12
    1650:	bf 90       	pop	r11
    1652:	af 90       	pop	r10
    1654:	7f 90       	pop	r7
    1656:	6f 90       	pop	r6
    1658:	5f 90       	pop	r5
    165a:	4f 90       	pop	r4
    165c:	08 95       	ret

0000165e <_ZN7TwoWire11requestFromEhhh>:
    165e:	cf 92       	push	r12
    1660:	ef 92       	push	r14
    1662:	0f 93       	push	r16
    1664:	1f 93       	push	r17
    1666:	c2 2e       	mov	r12, r18
    1668:	e1 2c       	mov	r14, r1
    166a:	00 e0       	ldi	r16, 0x00	; 0
    166c:	10 e0       	ldi	r17, 0x00	; 0
    166e:	98 01       	movw	r18, r16
    1670:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <_ZN7TwoWire11requestFromEhhmhh>
    1674:	1f 91       	pop	r17
    1676:	0f 91       	pop	r16
    1678:	ef 90       	pop	r14
    167a:	cf 90       	pop	r12
    167c:	08 95       	ret

0000167e <_ZN7TwoWire11requestFromEii>:
    167e:	21 e0       	ldi	r18, 0x01	; 1
    1680:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <_ZN7TwoWire11requestFromEhhh>

00001684 <_ZN7TwoWire15endTransmissionEv>:
    1684:	61 e0       	ldi	r22, 0x01	; 1
    1686:	0c 94 c8 0a 	jmp	0x1590	; 0x1590 <_ZN7TwoWire15endTransmissionEh>

0000168a <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    168a:	89 e1       	ldi	r24, 0x19	; 25
    168c:	92 e0       	ldi	r25, 0x02	; 2
    168e:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <_ZN7TwoWireC1Ev>

00001692 <__cxa_pure_virtual>:
    1692:	0e 94 fd 13 	call	0x27fa	; 0x27fa <abort>

00001696 <initVariant>:
    1696:	08 95       	ret

00001698 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1698:	0e 94 23 11 	call	0x2246	; 0x2246 <init>

	initVariant();
    169c:	0e 94 4b 0b 	call	0x1696	; 0x1696 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
    16a0:	8f e6       	ldi	r24, 0x6F	; 111
    16a2:	92 e0       	ldi	r25, 0x02	; 2
    16a4:	0e 94 65 10 	call	0x20ca	; 0x20ca <_ZN10USBDevice_6attachEv>
#endif
	
	setup();
    16a8:	0e 94 57 01 	call	0x2ae	; 0x2ae <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    16ac:	c0 e0       	ldi	r28, 0x00	; 0
    16ae:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    16b0:	0e 94 78 01 	call	0x2f0	; 0x2f0 <loop>
		if (serialEventRun) serialEventRun();
    16b4:	20 97       	sbiw	r28, 0x00	; 0
    16b6:	e1 f3       	breq	.-8      	; 0x16b0 <main+0x18>
    16b8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    16bc:	f9 cf       	rjmp	.-14     	; 0x16b0 <main+0x18>

000016be <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    16be:	cf 92       	push	r12
    16c0:	df 92       	push	r13
    16c2:	ef 92       	push	r14
    16c4:	ff 92       	push	r15
    16c6:	0f 93       	push	r16
    16c8:	1f 93       	push	r17
    16ca:	cf 93       	push	r28
    16cc:	df 93       	push	r29
    16ce:	6c 01       	movw	r12, r24
    16d0:	7a 01       	movw	r14, r20
    16d2:	8b 01       	movw	r16, r22
    16d4:	c0 e0       	ldi	r28, 0x00	; 0
    16d6:	d0 e0       	ldi	r29, 0x00	; 0
    16d8:	ce 15       	cp	r28, r14
    16da:	df 05       	cpc	r29, r15
    16dc:	81 f0       	breq	.+32     	; 0x16fe <_ZN5Print5writeEPKhj+0x40>
    16de:	d8 01       	movw	r26, r16
    16e0:	6d 91       	ld	r22, X+
    16e2:	8d 01       	movw	r16, r26
    16e4:	d6 01       	movw	r26, r12
    16e6:	ed 91       	ld	r30, X+
    16e8:	fc 91       	ld	r31, X
    16ea:	01 90       	ld	r0, Z+
    16ec:	f0 81       	ld	r31, Z
    16ee:	e0 2d       	mov	r30, r0
    16f0:	c6 01       	movw	r24, r12
    16f2:	09 95       	icall
    16f4:	89 2b       	or	r24, r25
    16f6:	11 f0       	breq	.+4      	; 0x16fc <_ZN5Print5writeEPKhj+0x3e>
    16f8:	21 96       	adiw	r28, 0x01	; 1
    16fa:	ee cf       	rjmp	.-36     	; 0x16d8 <_ZN5Print5writeEPKhj+0x1a>
    16fc:	7e 01       	movw	r14, r28
    16fe:	c7 01       	movw	r24, r14
    1700:	df 91       	pop	r29
    1702:	cf 91       	pop	r28
    1704:	1f 91       	pop	r17
    1706:	0f 91       	pop	r16
    1708:	ff 90       	pop	r15
    170a:	ef 90       	pop	r14
    170c:	df 90       	pop	r13
    170e:	cf 90       	pop	r12
    1710:	08 95       	ret

00001712 <_ZN5Print5writeEPKc>:
    1712:	61 15       	cp	r22, r1
    1714:	71 05       	cpc	r23, r1
    1716:	79 f0       	breq	.+30     	; 0x1736 <_ZN5Print5writeEPKc+0x24>
    1718:	fb 01       	movw	r30, r22
    171a:	01 90       	ld	r0, Z+
    171c:	00 20       	and	r0, r0
    171e:	e9 f7       	brne	.-6      	; 0x171a <_ZN5Print5writeEPKc+0x8>
    1720:	31 97       	sbiw	r30, 0x01	; 1
    1722:	af 01       	movw	r20, r30
    1724:	46 1b       	sub	r20, r22
    1726:	57 0b       	sbc	r21, r23
    1728:	dc 01       	movw	r26, r24
    172a:	ed 91       	ld	r30, X+
    172c:	fc 91       	ld	r31, X
    172e:	02 80       	ldd	r0, Z+2	; 0x02
    1730:	f3 81       	ldd	r31, Z+3	; 0x03
    1732:	e0 2d       	mov	r30, r0
    1734:	09 94       	ijmp
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	08 95       	ret

0000173c <_ZN5Print5printEPKc>:
    173c:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <_ZN5Print5writeEPKc>

00001740 <_ZN5Print5printEc>:
    1740:	dc 01       	movw	r26, r24
    1742:	ed 91       	ld	r30, X+
    1744:	fc 91       	ld	r31, X
    1746:	01 90       	ld	r0, Z+
    1748:	f0 81       	ld	r31, Z
    174a:	e0 2d       	mov	r30, r0
    174c:	09 94       	ijmp

0000174e <_ZN5Print11printNumberEmh>:
    174e:	8f 92       	push	r8
    1750:	9f 92       	push	r9
    1752:	af 92       	push	r10
    1754:	bf 92       	push	r11
    1756:	ef 92       	push	r14
    1758:	ff 92       	push	r15
    175a:	0f 93       	push	r16
    175c:	1f 93       	push	r17
    175e:	cf 93       	push	r28
    1760:	df 93       	push	r29
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	a1 97       	sbiw	r28, 0x21	; 33
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	de bf       	out	0x3e, r29	; 62
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	cd bf       	out	0x3d, r28	; 61
    1772:	7c 01       	movw	r14, r24
    1774:	fa 01       	movw	r30, r20
    1776:	cb 01       	movw	r24, r22
    1778:	19 a2       	std	Y+33, r1	; 0x21
    177a:	22 30       	cpi	r18, 0x02	; 2
    177c:	08 f4       	brcc	.+2      	; 0x1780 <_ZN5Print11printNumberEmh+0x32>
    177e:	2a e0       	ldi	r18, 0x0A	; 10
    1780:	8e 01       	movw	r16, r28
    1782:	0f 5d       	subi	r16, 0xDF	; 223
    1784:	1f 4f       	sbci	r17, 0xFF	; 255
    1786:	82 2e       	mov	r8, r18
    1788:	91 2c       	mov	r9, r1
    178a:	a1 2c       	mov	r10, r1
    178c:	b1 2c       	mov	r11, r1
    178e:	bf 01       	movw	r22, r30
    1790:	a5 01       	movw	r20, r10
    1792:	94 01       	movw	r18, r8
    1794:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__udivmodsi4>
    1798:	f9 01       	movw	r30, r18
    179a:	ca 01       	movw	r24, r20
    179c:	01 50       	subi	r16, 0x01	; 1
    179e:	11 09       	sbc	r17, r1
    17a0:	6a 30       	cpi	r22, 0x0A	; 10
    17a2:	10 f4       	brcc	.+4      	; 0x17a8 <_ZN5Print11printNumberEmh+0x5a>
    17a4:	60 5d       	subi	r22, 0xD0	; 208
    17a6:	01 c0       	rjmp	.+2      	; 0x17aa <_ZN5Print11printNumberEmh+0x5c>
    17a8:	69 5c       	subi	r22, 0xC9	; 201
    17aa:	d8 01       	movw	r26, r16
    17ac:	6c 93       	st	X, r22
    17ae:	23 2b       	or	r18, r19
    17b0:	24 2b       	or	r18, r20
    17b2:	25 2b       	or	r18, r21
    17b4:	61 f7       	brne	.-40     	; 0x178e <_ZN5Print11printNumberEmh+0x40>
    17b6:	b8 01       	movw	r22, r16
    17b8:	c7 01       	movw	r24, r14
    17ba:	0e 94 89 0b 	call	0x1712	; 0x1712 <_ZN5Print5writeEPKc>
    17be:	a1 96       	adiw	r28, 0x21	; 33
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	f8 94       	cli
    17c4:	de bf       	out	0x3e, r29	; 62
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	cd bf       	out	0x3d, r28	; 61
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
    17ce:	1f 91       	pop	r17
    17d0:	0f 91       	pop	r16
    17d2:	ff 90       	pop	r15
    17d4:	ef 90       	pop	r14
    17d6:	bf 90       	pop	r11
    17d8:	af 90       	pop	r10
    17da:	9f 90       	pop	r9
    17dc:	8f 90       	pop	r8
    17de:	08 95       	ret

000017e0 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    17e0:	cf 92       	push	r12
    17e2:	df 92       	push	r13
    17e4:	ef 92       	push	r14
    17e6:	ff 92       	push	r15
    17e8:	0f 93       	push	r16
    17ea:	1f 93       	push	r17
    17ec:	cf 93       	push	r28
    17ee:	df 93       	push	r29
  if (base == 0) {
    17f0:	21 15       	cp	r18, r1
    17f2:	31 05       	cpc	r19, r1
    17f4:	81 f4       	brne	.+32     	; 0x1816 <_ZN5Print5printEli+0x36>
    return write(n);
    17f6:	dc 01       	movw	r26, r24
    17f8:	ed 91       	ld	r30, X+
    17fa:	fc 91       	ld	r31, X
    17fc:	01 90       	ld	r0, Z+
    17fe:	f0 81       	ld	r31, Z
    1800:	e0 2d       	mov	r30, r0
    1802:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	1f 91       	pop	r17
    180a:	0f 91       	pop	r16
    180c:	ff 90       	pop	r15
    180e:	ef 90       	pop	r14
    1810:	df 90       	pop	r13
    1812:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    1814:	09 94       	ijmp
  } else if (base == 10) {
    1816:	2a 30       	cpi	r18, 0x0A	; 10
    1818:	31 05       	cpc	r19, r1
    181a:	01 f5       	brne	.+64     	; 0x185c <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    181c:	77 ff       	sbrs	r23, 7
    181e:	1d c0       	rjmp	.+58     	; 0x185a <_ZN5Print5printEli+0x7a>
    1820:	6a 01       	movw	r12, r20
    1822:	7b 01       	movw	r14, r22
    1824:	ec 01       	movw	r28, r24
      int t = print('-');
    1826:	6d e2       	ldi	r22, 0x2D	; 45
    1828:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN5Print5printEc>
    182c:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    182e:	44 27       	eor	r20, r20
    1830:	55 27       	eor	r21, r21
    1832:	ba 01       	movw	r22, r20
    1834:	4c 19       	sub	r20, r12
    1836:	5d 09       	sbc	r21, r13
    1838:	6e 09       	sbc	r22, r14
    183a:	7f 09       	sbc	r23, r15
    183c:	2a e0       	ldi	r18, 0x0A	; 10
    183e:	ce 01       	movw	r24, r28
    1840:	0e 94 a7 0b 	call	0x174e	; 0x174e <_ZN5Print11printNumberEmh>
    1844:	80 0f       	add	r24, r16
    1846:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	1f 91       	pop	r17
    184e:	0f 91       	pop	r16
    1850:	ff 90       	pop	r15
    1852:	ef 90       	pop	r14
    1854:	df 90       	pop	r13
    1856:	cf 90       	pop	r12
    1858:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    185a:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	1f 91       	pop	r17
    1862:	0f 91       	pop	r16
    1864:	ff 90       	pop	r15
    1866:	ef 90       	pop	r14
    1868:	df 90       	pop	r13
    186a:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    186c:	0c 94 a7 0b 	jmp	0x174e	; 0x174e <_ZN5Print11printNumberEmh>

00001870 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    1870:	9a 01       	movw	r18, r20
  return print((long) n, base);
    1872:	ab 01       	movw	r20, r22
    1874:	77 0f       	add	r23, r23
    1876:	66 0b       	sbc	r22, r22
    1878:	77 0b       	sbc	r23, r23
    187a:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <_ZN5Print5printEli>

0000187e <_ZL4RecvPVhh>:
//=======================================================================
//=======================================================================

USBDevice_ USBDevice;

USBDevice_::USBDevice_()
    187e:	61 50       	subi	r22, 0x01	; 1
    1880:	30 f0       	brcs	.+12     	; 0x188e <_ZL4RecvPVhh+0x10>
    1882:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1886:	fc 01       	movw	r30, r24
    1888:	20 83       	st	Z, r18
    188a:	01 96       	adiw	r24, 0x01	; 1
    188c:	f8 cf       	rjmp	.-16     	; 0x187e <_ZL4RecvPVhh>
    188e:	28 98       	cbi	0x05, 0	; 5
    1890:	84 e6       	ldi	r24, 0x64	; 100
    1892:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <RxLEDPulse>
    1896:	08 95       	ret

00001898 <_ZL11SendControlh>:
    1898:	40 91 72 02 	lds	r20, 0x0272	; 0x800272 <_ZL6_cmark>
    189c:	50 91 73 02 	lds	r21, 0x0273	; 0x800273 <_ZL6_cmark+0x1>
    18a0:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <_ZL5_cend>
    18a4:	30 91 71 02 	lds	r19, 0x0271	; 0x800271 <_ZL5_cend+0x1>
    18a8:	42 17       	cp	r20, r18
    18aa:	53 07       	cpc	r21, r19
    18ac:	b4 f4       	brge	.+44     	; 0x18da <_ZL11SendControlh+0x42>
    18ae:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18b2:	95 70       	andi	r25, 0x05	; 5
    18b4:	e1 f3       	breq	.-8      	; 0x18ae <_ZL11SendControlh+0x16>
    18b6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18ba:	92 fd       	sbrc	r25, 2
    18bc:	19 c0       	rjmp	.+50     	; 0x18f0 <_ZL11SendControlh+0x58>
    18be:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    18c2:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <_ZL6_cmark>
    18c6:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <_ZL6_cmark+0x1>
    18ca:	01 96       	adiw	r24, 0x01	; 1
    18cc:	8f 73       	andi	r24, 0x3F	; 63
    18ce:	99 27       	eor	r25, r25
    18d0:	89 2b       	or	r24, r25
    18d2:	19 f4       	brne	.+6      	; 0x18da <_ZL11SendControlh+0x42>
    18d4:	8e ef       	ldi	r24, 0xFE	; 254
    18d6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18da:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <_ZL6_cmark>
    18de:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <_ZL6_cmark+0x1>
    18e2:	01 96       	adiw	r24, 0x01	; 1
    18e4:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <_ZL6_cmark+0x1>
    18e8:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <_ZL6_cmark>
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	08 95       	ret
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	08 95       	ret

000018f4 <_ZL24USB_SendStringDescriptorPKhhh>:
    18f4:	df 92       	push	r13
    18f6:	ef 92       	push	r14
    18f8:	ff 92       	push	r15
    18fa:	0f 93       	push	r16
    18fc:	1f 93       	push	r17
    18fe:	cf 93       	push	r28
    1900:	df 93       	push	r29
    1902:	d8 2e       	mov	r13, r24
    1904:	f9 2e       	mov	r15, r25
    1906:	e4 2e       	mov	r14, r20
    1908:	06 2f       	mov	r16, r22
    190a:	10 e0       	ldi	r17, 0x00	; 0
    190c:	c8 01       	movw	r24, r16
    190e:	01 96       	adiw	r24, 0x01	; 1
    1910:	88 0f       	add	r24, r24
    1912:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZL11SendControlh>
    1916:	83 e0       	ldi	r24, 0x03	; 3
    1918:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZL11SendControlh>
    191c:	cd 2d       	mov	r28, r13
    191e:	df 2d       	mov	r29, r15
    1920:	0c 0f       	add	r16, r28
    1922:	1d 1f       	adc	r17, r29
    1924:	c0 17       	cp	r28, r16
    1926:	d1 07       	cpc	r29, r17
    1928:	89 f0       	breq	.+34     	; 0x194c <_ZL24USB_SendStringDescriptorPKhhh+0x58>
    192a:	e7 fe       	sbrs	r14, 7
    192c:	03 c0       	rjmp	.+6      	; 0x1934 <_ZL24USB_SendStringDescriptorPKhhh+0x40>
    192e:	fe 01       	movw	r30, r28
    1930:	84 91       	lpm	r24, Z
    1932:	01 c0       	rjmp	.+2      	; 0x1936 <_ZL24USB_SendStringDescriptorPKhhh+0x42>
    1934:	88 81       	ld	r24, Y
    1936:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZL11SendControlh>
    193a:	f8 2e       	mov	r15, r24
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZL11SendControlh>
    1942:	8f 21       	and	r24, r15
    1944:	21 96       	adiw	r28, 0x01	; 1
    1946:	81 11       	cpse	r24, r1
    1948:	ed cf       	rjmp	.-38     	; 0x1924 <_ZL24USB_SendStringDescriptorPKhhh+0x30>
    194a:	01 c0       	rjmp	.+2      	; 0x194e <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	1f 91       	pop	r17
    1954:	0f 91       	pop	r16
    1956:	ff 90       	pop	r15
    1958:	ef 90       	pop	r14
    195a:	df 90       	pop	r13
    195c:	08 95       	ret

0000195e <_ZL15USB_ClockEnablev>:
    195e:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    1962:	81 60       	ori	r24, 0x01	; 1
    1964:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    1968:	80 ea       	ldi	r24, 0xA0	; 160
    196a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    196e:	89 b5       	in	r24, 0x29	; 41
    1970:	80 61       	ori	r24, 0x10	; 16
    1972:	89 bd       	out	0x29, r24	; 41
    1974:	89 b5       	in	r24, 0x29	; 41
    1976:	82 60       	ori	r24, 0x02	; 2
    1978:	89 bd       	out	0x29, r24	; 41
    197a:	09 b4       	in	r0, 0x29	; 41
    197c:	00 fe       	sbrs	r0, 0
    197e:	fd cf       	rjmp	.-6      	; 0x197a <_ZL15USB_ClockEnablev+0x1c>
    1980:	61 e0       	ldi	r22, 0x01	; 1
    1982:	70 e0       	ldi	r23, 0x00	; 0
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay>
    198c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1990:	8f 7c       	andi	r24, 0xCF	; 207
    1992:	80 61       	ori	r24, 0x10	; 16
    1994:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1998:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    199c:	80 7f       	andi	r24, 0xF0	; 240
    199e:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    19a2:	08 95       	ret

000019a4 <_ZL14SendInterfacesv>:
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	1f 92       	push	r1
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	19 82       	std	Y+1, r1	; 0x01
    19b0:	ce 01       	movw	r24, r28
    19b2:	01 96       	adiw	r24, 0x01	; 1
    19b4:	0e 94 8d 12 	call	0x251a	; 0x251a <_Z16CDC_GetInterfacePh>
    19b8:	0e 94 c1 13 	call	0x2782	; 0x2782 <_Z12PluggableUSBv>
    19bc:	be 01       	movw	r22, r28
    19be:	6f 5f       	subi	r22, 0xFF	; 255
    19c0:	7f 4f       	sbci	r23, 0xFF	; 255
    19c2:	0e 94 3c 13 	call	0x2678	; 0x2678 <_ZN13PluggableUSB_12getInterfaceEPh>
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
    19c8:	0f 90       	pop	r0
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	08 95       	ret

000019d0 <_ZN6LockEPC1Eh>:
    19d0:	2f b7       	in	r18, 0x3f	; 63
    19d2:	fc 01       	movw	r30, r24
    19d4:	20 83       	st	Z, r18
    19d6:	f8 94       	cli
    19d8:	67 70       	andi	r22, 0x07	; 7
    19da:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    19de:	08 95       	ret

000019e0 <_Z13USB_Availableh>:
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    19e4:	1f 92       	push	r1
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	68 2f       	mov	r22, r24
    19ec:	ce 01       	movw	r24, r28
    19ee:	01 96       	adiw	r24, 0x01	; 1
    19f0:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN6LockEPC1Eh>
    19f4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    19f8:	99 81       	ldd	r25, Y+1	; 0x01
    19fa:	9f bf       	out	0x3f, r25	; 63
    19fc:	0f 90       	pop	r0
    19fe:	df 91       	pop	r29
    1a00:	cf 91       	pop	r28
    1a02:	08 95       	ret

00001a04 <_Z8USB_RecvhPvi>:
    1a04:	ef 92       	push	r14
    1a06:	ff 92       	push	r15
    1a08:	0f 93       	push	r16
    1a0a:	1f 93       	push	r17
    1a0c:	cf 93       	push	r28
    1a0e:	df 93       	push	r29
    1a10:	1f 92       	push	r1
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
    1a16:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <_usbConfiguration>
    1a1a:	99 23       	and	r25, r25
    1a1c:	11 f0       	breq	.+4      	; 0x1a22 <_Z8USB_RecvhPvi+0x1e>
    1a1e:	57 ff       	sbrs	r21, 7
    1a20:	03 c0       	rjmp	.+6      	; 0x1a28 <_Z8USB_RecvhPvi+0x24>
    1a22:	8f ef       	ldi	r24, 0xFF	; 255
    1a24:	9f ef       	ldi	r25, 0xFF	; 255
    1a26:	29 c0       	rjmp	.+82     	; 0x1a7a <_Z8USB_RecvhPvi+0x76>
    1a28:	8a 01       	movw	r16, r20
    1a2a:	7b 01       	movw	r14, r22
    1a2c:	68 2f       	mov	r22, r24
    1a2e:	ce 01       	movw	r24, r28
    1a30:	01 96       	adiw	r24, 0x01	; 1
    1a32:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN6LockEPC1Eh>
    1a36:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	02 17       	cp	r16, r18
    1a3e:	13 07       	cpc	r17, r19
    1a40:	0c f4       	brge	.+2      	; 0x1a44 <_Z8USB_RecvhPvi+0x40>
    1a42:	98 01       	movw	r18, r16
    1a44:	82 2f       	mov	r24, r18
    1a46:	f7 01       	movw	r30, r14
    1a48:	94 e6       	ldi	r25, 0x64	; 100
    1a4a:	81 50       	subi	r24, 0x01	; 1
    1a4c:	38 f0       	brcs	.+14     	; 0x1a5c <_Z8USB_RecvhPvi+0x58>
    1a4e:	28 98       	cbi	0x05, 0	; 5
    1a50:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <RxLEDPulse>
    1a54:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1a58:	41 93       	st	Z+, r20
    1a5a:	f7 cf       	rjmp	.-18     	; 0x1a4a <_Z8USB_RecvhPvi+0x46>
    1a5c:	21 15       	cp	r18, r1
    1a5e:	31 05       	cpc	r19, r1
    1a60:	21 f0       	breq	.+8      	; 0x1a6a <_Z8USB_RecvhPvi+0x66>
    1a62:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1a66:	88 23       	and	r24, r24
    1a68:	21 f0       	breq	.+8      	; 0x1a72 <_Z8USB_RecvhPvi+0x6e>
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	8f bf       	out	0x3f, r24	; 63
    1a6e:	c9 01       	movw	r24, r18
    1a70:	04 c0       	rjmp	.+8      	; 0x1a7a <_Z8USB_RecvhPvi+0x76>
    1a72:	8b e6       	ldi	r24, 0x6B	; 107
    1a74:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a78:	f8 cf       	rjmp	.-16     	; 0x1a6a <_Z8USB_RecvhPvi+0x66>
    1a7a:	0f 90       	pop	r0
    1a7c:	df 91       	pop	r29
    1a7e:	cf 91       	pop	r28
    1a80:	1f 91       	pop	r17
    1a82:	0f 91       	pop	r16
    1a84:	ff 90       	pop	r15
    1a86:	ef 90       	pop	r14
    1a88:	08 95       	ret

00001a8a <_Z8USB_Recvh>:
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	1f 92       	push	r1
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	41 e0       	ldi	r20, 0x01	; 1
    1a96:	50 e0       	ldi	r21, 0x00	; 0
    1a98:	be 01       	movw	r22, r28
    1a9a:	6f 5f       	subi	r22, 0xFF	; 255
    1a9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9e:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <_Z8USB_RecvhPvi>
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	19 f4       	brne	.+6      	; 0x1aac <_Z8USB_Recvh+0x22>
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <_Z8USB_Recvh+0x26>
    1aac:	8f ef       	ldi	r24, 0xFF	; 255
    1aae:	9f ef       	ldi	r25, 0xFF	; 255
    1ab0:	0f 90       	pop	r0
    1ab2:	df 91       	pop	r29
    1ab4:	cf 91       	pop	r28
    1ab6:	08 95       	ret

00001ab8 <_Z13USB_SendSpaceh>:
    1ab8:	cf 93       	push	r28
    1aba:	df 93       	push	r29
    1abc:	1f 92       	push	r1
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
    1ac2:	68 2f       	mov	r22, r24
    1ac4:	ce 01       	movw	r24, r28
    1ac6:	01 96       	adiw	r24, 0x01	; 1
    1ac8:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN6LockEPC1Eh>
    1acc:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ad0:	89 2f       	mov	r24, r25
    1ad2:	80 72       	andi	r24, 0x20	; 32
    1ad4:	95 ff       	sbrs	r25, 5
    1ad6:	04 c0       	rjmp	.+8      	; 0x1ae0 <_Z13USB_SendSpaceh+0x28>
    1ad8:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1adc:	80 e4       	ldi	r24, 0x40	; 64
    1ade:	89 1b       	sub	r24, r25
    1ae0:	99 81       	ldd	r25, Y+1	; 0x01
    1ae2:	9f bf       	out	0x3f, r25	; 63
    1ae4:	0f 90       	pop	r0
    1ae6:	df 91       	pop	r29
    1ae8:	cf 91       	pop	r28
    1aea:	08 95       	ret

00001aec <_Z8USB_SendhPKvi>:
    1aec:	5f 92       	push	r5
    1aee:	6f 92       	push	r6
    1af0:	7f 92       	push	r7
    1af2:	8f 92       	push	r8
    1af4:	9f 92       	push	r9
    1af6:	af 92       	push	r10
    1af8:	bf 92       	push	r11
    1afa:	cf 92       	push	r12
    1afc:	df 92       	push	r13
    1afe:	ef 92       	push	r14
    1b00:	ff 92       	push	r15
    1b02:	0f 93       	push	r16
    1b04:	1f 93       	push	r17
    1b06:	cf 93       	push	r28
    1b08:	df 93       	push	r29
    1b0a:	1f 92       	push	r1
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
    1b10:	98 2e       	mov	r9, r24
    1b12:	6b 01       	movw	r12, r22
    1b14:	b4 2e       	mov	r11, r20
    1b16:	05 2f       	mov	r16, r21
    1b18:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <_usbConfiguration>
    1b1c:	81 11       	cpse	r24, r1
    1b1e:	03 c0       	rjmp	.+6      	; 0x1b26 <_Z8USB_SendhPKvi+0x3a>
    1b20:	8f ef       	ldi	r24, 0xFF	; 255
    1b22:	9f ef       	ldi	r25, 0xFF	; 255
    1b24:	77 c0       	rjmp	.+238    	; 0x1c14 <_Z8USB_SendhPKvi+0x128>
    1b26:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <_usbSuspendState>
    1b2a:	80 ff       	sbrs	r24, 0
    1b2c:	05 c0       	rjmp	.+10     	; 0x1b38 <_Z8USB_SendhPKvi+0x4c>
    1b2e:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1b32:	82 60       	ori	r24, 0x02	; 2
    1b34:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1b38:	eb 2c       	mov	r14, r11
    1b3a:	f0 2e       	mov	r15, r16
    1b3c:	a1 2c       	mov	r10, r1
    1b3e:	8a ef       	ldi	r24, 0xFA	; 250
    1b40:	88 2e       	mov	r8, r24
    1b42:	89 2d       	mov	r24, r9
    1b44:	80 72       	andi	r24, 0x20	; 32
    1b46:	68 2e       	mov	r6, r24
    1b48:	89 2d       	mov	r24, r9
    1b4a:	80 74       	andi	r24, 0x40	; 64
    1b4c:	58 2e       	mov	r5, r24
    1b4e:	9a e3       	ldi	r25, 0x3A	; 58
    1b50:	79 2e       	mov	r7, r25
    1b52:	e1 14       	cp	r14, r1
    1b54:	f1 04       	cpc	r15, r1
    1b56:	19 f4       	brne	.+6      	; 0x1b5e <_Z8USB_SendhPKvi+0x72>
    1b58:	aa 20       	and	r10, r10
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <_Z8USB_SendhPKvi+0x72>
    1b5c:	55 c0       	rjmp	.+170    	; 0x1c08 <_Z8USB_SendhPKvi+0x11c>
    1b5e:	89 2d       	mov	r24, r9
    1b60:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_Z13USB_SendSpaceh>
    1b64:	18 2f       	mov	r17, r24
    1b66:	81 11       	cpse	r24, r1
    1b68:	0a c0       	rjmp	.+20     	; 0x1b7e <_Z8USB_SendhPKvi+0x92>
    1b6a:	8a 94       	dec	r8
    1b6c:	88 20       	and	r8, r8
    1b6e:	c1 f2       	breq	.-80     	; 0x1b20 <_Z8USB_SendhPKvi+0x34>
    1b70:	61 e0       	ldi	r22, 0x01	; 1
    1b72:	70 e0       	ldi	r23, 0x00	; 0
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay>
    1b7c:	ea cf       	rjmp	.-44     	; 0x1b52 <_Z8USB_SendhPKvi+0x66>
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	e8 16       	cp	r14, r24
    1b82:	f9 06       	cpc	r15, r25
    1b84:	0c f4       	brge	.+2      	; 0x1b88 <_Z8USB_SendhPKvi+0x9c>
    1b86:	1e 2d       	mov	r17, r14
    1b88:	69 2d       	mov	r22, r9
    1b8a:	ce 01       	movw	r24, r28
    1b8c:	01 96       	adiw	r24, 0x01	; 1
    1b8e:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <_ZN6LockEPC1Eh>
    1b92:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b96:	85 ff       	sbrs	r24, 5
    1b98:	34 c0       	rjmp	.+104    	; 0x1c02 <_Z8USB_SendhPKvi+0x116>
    1b9a:	81 2f       	mov	r24, r17
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	e8 1a       	sub	r14, r24
    1ba0:	f9 0a       	sbc	r15, r25
    1ba2:	66 20       	and	r6, r6
    1ba4:	29 f0       	breq	.+10     	; 0x1bb0 <_Z8USB_SendhPKvi+0xc4>
    1ba6:	11 50       	subi	r17, 0x01	; 1
    1ba8:	a0 f0       	brcs	.+40     	; 0x1bd2 <_Z8USB_SendhPKvi+0xe6>
    1baa:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1bae:	fb cf       	rjmp	.-10     	; 0x1ba6 <_Z8USB_SendhPKvi+0xba>
    1bb0:	f6 01       	movw	r30, r12
    1bb2:	97 fe       	sbrs	r9, 7
    1bb4:	0a c0       	rjmp	.+20     	; 0x1bca <_Z8USB_SendhPKvi+0xde>
    1bb6:	11 50       	subi	r17, 0x01	; 1
    1bb8:	50 f0       	brcs	.+20     	; 0x1bce <_Z8USB_SendhPKvi+0xe2>
    1bba:	24 91       	lpm	r18, Z
    1bbc:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1bc0:	31 96       	adiw	r30, 0x01	; 1
    1bc2:	f9 cf       	rjmp	.-14     	; 0x1bb6 <_Z8USB_SendhPKvi+0xca>
    1bc4:	21 91       	ld	r18, Z+
    1bc6:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1bca:	11 50       	subi	r17, 0x01	; 1
    1bcc:	d8 f7       	brcc	.-10     	; 0x1bc4 <_Z8USB_SendhPKvi+0xd8>
    1bce:	c8 0e       	add	r12, r24
    1bd0:	d9 1e       	adc	r13, r25
    1bd2:	aa 20       	and	r10, r10
    1bd4:	19 f0       	breq	.+6      	; 0x1bdc <_Z8USB_SendhPKvi+0xf0>
    1bd6:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1bda:	0b c0       	rjmp	.+22     	; 0x1bf2 <_Z8USB_SendhPKvi+0x106>
    1bdc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1be0:	85 fd       	sbrc	r24, 5
    1be2:	09 c0       	rjmp	.+18     	; 0x1bf6 <_Z8USB_SendhPKvi+0x10a>
    1be4:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1be8:	aa 24       	eor	r10, r10
    1bea:	a3 94       	inc	r10
    1bec:	e1 14       	cp	r14, r1
    1bee:	f1 04       	cpc	r15, r1
    1bf0:	41 f0       	breq	.+16     	; 0x1c02 <_Z8USB_SendhPKvi+0x116>
    1bf2:	a1 2c       	mov	r10, r1
    1bf4:	06 c0       	rjmp	.+12     	; 0x1c02 <_Z8USB_SendhPKvi+0x116>
    1bf6:	e1 14       	cp	r14, r1
    1bf8:	f1 04       	cpc	r15, r1
    1bfa:	19 f4       	brne	.+6      	; 0x1c02 <_Z8USB_SendhPKvi+0x116>
    1bfc:	51 10       	cpse	r5, r1
    1bfe:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	8f bf       	out	0x3f, r24	; 63
    1c06:	a5 cf       	rjmp	.-182    	; 0x1b52 <_Z8USB_SendhPKvi+0x66>
    1c08:	5d 98       	cbi	0x0b, 5	; 11
    1c0a:	84 e6       	ldi	r24, 0x64	; 100
    1c0c:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <TxLEDPulse>
    1c10:	8b 2d       	mov	r24, r11
    1c12:	90 2f       	mov	r25, r16
    1c14:	0f 90       	pop	r0
    1c16:	df 91       	pop	r29
    1c18:	cf 91       	pop	r28
    1c1a:	1f 91       	pop	r17
    1c1c:	0f 91       	pop	r16
    1c1e:	ff 90       	pop	r15
    1c20:	ef 90       	pop	r14
    1c22:	df 90       	pop	r13
    1c24:	cf 90       	pop	r12
    1c26:	bf 90       	pop	r11
    1c28:	af 90       	pop	r10
    1c2a:	9f 90       	pop	r9
    1c2c:	8f 90       	pop	r8
    1c2e:	7f 90       	pop	r7
    1c30:	6f 90       	pop	r6
    1c32:	5f 90       	pop	r5
    1c34:	08 95       	ret

00001c36 <_Z11InitControli>:
    1c36:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1c3a:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <_ZL6_cmark+0x1>
    1c3e:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <_ZL6_cmark>
    1c42:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <_ZL5_cend+0x1>
    1c46:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <_ZL5_cend>
    1c4a:	08 95       	ret

00001c4c <_Z15USB_SendControlhPKvi>:
    1c4c:	df 92       	push	r13
    1c4e:	ef 92       	push	r14
    1c50:	ff 92       	push	r15
    1c52:	0f 93       	push	r16
    1c54:	1f 93       	push	r17
    1c56:	cf 93       	push	r28
    1c58:	df 93       	push	r29
    1c5a:	d8 2e       	mov	r13, r24
    1c5c:	8a 01       	movw	r16, r20
    1c5e:	7b 01       	movw	r14, r22
    1c60:	e4 0e       	add	r14, r20
    1c62:	f5 1e       	adc	r15, r21
    1c64:	eb 01       	movw	r28, r22
    1c66:	ce 15       	cp	r28, r14
    1c68:	df 05       	cpc	r29, r15
    1c6a:	71 f0       	breq	.+28     	; 0x1c88 <_Z15USB_SendControlhPKvi+0x3c>
    1c6c:	d7 fe       	sbrs	r13, 7
    1c6e:	03 c0       	rjmp	.+6      	; 0x1c76 <_Z15USB_SendControlhPKvi+0x2a>
    1c70:	fe 01       	movw	r30, r28
    1c72:	84 91       	lpm	r24, Z
    1c74:	01 c0       	rjmp	.+2      	; 0x1c78 <_Z15USB_SendControlhPKvi+0x2c>
    1c76:	88 81       	ld	r24, Y
    1c78:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZL11SendControlh>
    1c7c:	21 96       	adiw	r28, 0x01	; 1
    1c7e:	81 11       	cpse	r24, r1
    1c80:	f2 cf       	rjmp	.-28     	; 0x1c66 <_Z15USB_SendControlhPKvi+0x1a>
    1c82:	8f ef       	ldi	r24, 0xFF	; 255
    1c84:	9f ef       	ldi	r25, 0xFF	; 255
    1c86:	01 c0       	rjmp	.+2      	; 0x1c8a <_Z15USB_SendControlhPKvi+0x3e>
    1c88:	c8 01       	movw	r24, r16
    1c8a:	df 91       	pop	r29
    1c8c:	cf 91       	pop	r28
    1c8e:	1f 91       	pop	r17
    1c90:	0f 91       	pop	r16
    1c92:	ff 90       	pop	r15
    1c94:	ef 90       	pop	r14
    1c96:	df 90       	pop	r13
    1c98:	08 95       	ret

00001c9a <_Z15USB_RecvControlPvi>:
    1c9a:	af 92       	push	r10
    1c9c:	bf 92       	push	r11
    1c9e:	df 92       	push	r13
    1ca0:	ef 92       	push	r14
    1ca2:	ff 92       	push	r15
    1ca4:	0f 93       	push	r16
    1ca6:	1f 93       	push	r17
    1ca8:	cf 93       	push	r28
    1caa:	df 93       	push	r29
    1cac:	5c 01       	movw	r10, r24
    1cae:	8b 01       	movw	r16, r22
    1cb0:	eb 01       	movw	r28, r22
    1cb2:	9b ef       	ldi	r25, 0xFB	; 251
    1cb4:	d9 2e       	mov	r13, r25
    1cb6:	20 97       	sbiw	r28, 0x00	; 0
    1cb8:	c1 f0       	breq	.+48     	; 0x1cea <_Z15USB_RecvControlPvi+0x50>
    1cba:	7e 01       	movw	r14, r28
    1cbc:	c1 34       	cpi	r28, 0x41	; 65
    1cbe:	d1 05       	cpc	r29, r1
    1cc0:	1c f0       	brlt	.+6      	; 0x1cc8 <_Z15USB_RecvControlPvi+0x2e>
    1cc2:	80 e4       	ldi	r24, 0x40	; 64
    1cc4:	e8 2e       	mov	r14, r24
    1cc6:	f1 2c       	mov	r15, r1
    1cc8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ccc:	82 ff       	sbrs	r24, 2
    1cce:	fc cf       	rjmp	.-8      	; 0x1cc8 <_Z15USB_RecvControlPvi+0x2e>
    1cd0:	c8 01       	movw	r24, r16
    1cd2:	8c 1b       	sub	r24, r28
    1cd4:	9d 0b       	sbc	r25, r29
    1cd6:	6e 2d       	mov	r22, r14
    1cd8:	8a 0d       	add	r24, r10
    1cda:	9b 1d       	adc	r25, r11
    1cdc:	0e 94 3f 0c 	call	0x187e	; 0x187e <_ZL4RecvPVhh>
    1ce0:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ce4:	ce 19       	sub	r28, r14
    1ce6:	df 09       	sbc	r29, r15
    1ce8:	e6 cf       	rjmp	.-52     	; 0x1cb6 <_Z15USB_RecvControlPvi+0x1c>
    1cea:	c8 01       	movw	r24, r16
    1cec:	df 91       	pop	r29
    1cee:	cf 91       	pop	r28
    1cf0:	1f 91       	pop	r17
    1cf2:	0f 91       	pop	r16
    1cf4:	ff 90       	pop	r15
    1cf6:	ef 90       	pop	r14
    1cf8:	df 90       	pop	r13
    1cfa:	bf 90       	pop	r11
    1cfc:	af 90       	pop	r10
    1cfe:	08 95       	ret

00001d00 <__vector_11>:
    1d00:	1f 92       	push	r1
    1d02:	0f 92       	push	r0
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	0f 92       	push	r0
    1d08:	11 24       	eor	r1, r1
    1d0a:	cf 92       	push	r12
    1d0c:	df 92       	push	r13
    1d0e:	ef 92       	push	r14
    1d10:	ff 92       	push	r15
    1d12:	0f 93       	push	r16
    1d14:	1f 93       	push	r17
    1d16:	2f 93       	push	r18
    1d18:	3f 93       	push	r19
    1d1a:	4f 93       	push	r20
    1d1c:	5f 93       	push	r21
    1d1e:	6f 93       	push	r22
    1d20:	7f 93       	push	r23
    1d22:	8f 93       	push	r24
    1d24:	9f 93       	push	r25
    1d26:	af 93       	push	r26
    1d28:	bf 93       	push	r27
    1d2a:	ef 93       	push	r30
    1d2c:	ff 93       	push	r31
    1d2e:	cf 93       	push	r28
    1d30:	df 93       	push	r29
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	6c 97       	sbiw	r28, 0x1c	; 28
    1d38:	de bf       	out	0x3e, r29	; 62
    1d3a:	cd bf       	out	0x3d, r28	; 61
    1d3c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1d40:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d44:	83 ff       	sbrs	r24, 3
    1d46:	17 c1       	rjmp	.+558    	; 0x1f76 <__vector_11+0x276>
    1d48:	68 e0       	ldi	r22, 0x08	; 8
    1d4a:	ce 01       	movw	r24, r28
    1d4c:	45 96       	adiw	r24, 0x15	; 21
    1d4e:	0e 94 3f 0c 	call	0x187e	; 0x187e <_ZL4RecvPVhh>
    1d52:	82 ef       	ldi	r24, 0xF2	; 242
    1d54:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d58:	8d 89       	ldd	r24, Y+21	; 0x15
    1d5a:	87 ff       	sbrs	r24, 7
    1d5c:	05 c0       	rjmp	.+10     	; 0x1d68 <__vector_11+0x68>
    1d5e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d62:	90 ff       	sbrs	r25, 0
    1d64:	fc cf       	rjmp	.-8      	; 0x1d5e <__vector_11+0x5e>
    1d66:	03 c0       	rjmp	.+6      	; 0x1d6e <__vector_11+0x6e>
    1d68:	9e ef       	ldi	r25, 0xFE	; 254
    1d6a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d6e:	98 2f       	mov	r25, r24
    1d70:	90 76       	andi	r25, 0x60	; 96
    1d72:	09 f0       	breq	.+2      	; 0x1d76 <__vector_11+0x76>
    1d74:	d8 c0       	rjmp	.+432    	; 0x1f26 <__vector_11+0x226>
    1d76:	9e 89       	ldd	r25, Y+22	; 0x16
    1d78:	4f 89       	ldd	r20, Y+23	; 0x17
    1d7a:	58 8d       	ldd	r21, Y+24	; 0x18
    1d7c:	2f 89       	ldd	r18, Y+23	; 0x17
    1d7e:	18 8d       	ldd	r17, Y+24	; 0x18
    1d80:	91 11       	cpse	r25, r1
    1d82:	0c c0       	rjmp	.+24     	; 0x1d9c <__vector_11+0x9c>
    1d84:	80 38       	cpi	r24, 0x80	; 128
    1d86:	29 f4       	brne	.+10     	; 0x1d92 <__vector_11+0x92>
    1d88:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <_usbCurrentStatus>
    1d8c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <__vector_11+0x96>
    1d92:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1d96:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1d9a:	e6 c0       	rjmp	.+460    	; 0x1f68 <__vector_11+0x268>
    1d9c:	91 30       	cpi	r25, 0x01	; 1
    1d9e:	51 f4       	brne	.+20     	; 0x1db4 <__vector_11+0xb4>
    1da0:	81 11       	cpse	r24, r1
    1da2:	e2 c0       	rjmp	.+452    	; 0x1f68 <__vector_11+0x268>
    1da4:	41 30       	cpi	r20, 0x01	; 1
    1da6:	51 05       	cpc	r21, r1
    1da8:	09 f0       	breq	.+2      	; 0x1dac <__vector_11+0xac>
    1daa:	de c0       	rjmp	.+444    	; 0x1f68 <__vector_11+0x268>
    1dac:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <_usbCurrentStatus>
    1db0:	8d 7f       	andi	r24, 0xFD	; 253
    1db2:	0b c0       	rjmp	.+22     	; 0x1dca <__vector_11+0xca>
    1db4:	93 30       	cpi	r25, 0x03	; 3
    1db6:	61 f4       	brne	.+24     	; 0x1dd0 <__vector_11+0xd0>
    1db8:	81 11       	cpse	r24, r1
    1dba:	d6 c0       	rjmp	.+428    	; 0x1f68 <__vector_11+0x268>
    1dbc:	41 30       	cpi	r20, 0x01	; 1
    1dbe:	51 05       	cpc	r21, r1
    1dc0:	09 f0       	breq	.+2      	; 0x1dc4 <__vector_11+0xc4>
    1dc2:	d2 c0       	rjmp	.+420    	; 0x1f68 <__vector_11+0x268>
    1dc4:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <_usbCurrentStatus>
    1dc8:	82 60       	ori	r24, 0x02	; 2
    1dca:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <_usbCurrentStatus>
    1dce:	cc c0       	rjmp	.+408    	; 0x1f68 <__vector_11+0x268>
    1dd0:	95 30       	cpi	r25, 0x05	; 5
    1dd2:	49 f4       	brne	.+18     	; 0x1de6 <__vector_11+0xe6>
    1dd4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1dd8:	80 ff       	sbrs	r24, 0
    1dda:	fc cf       	rjmp	.-8      	; 0x1dd4 <__vector_11+0xd4>
    1ddc:	82 2f       	mov	r24, r18
    1dde:	80 68       	ori	r24, 0x80	; 128
    1de0:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1de4:	c1 c0       	rjmp	.+386    	; 0x1f68 <__vector_11+0x268>
    1de6:	96 30       	cpi	r25, 0x06	; 6
    1de8:	09 f0       	breq	.+2      	; 0x1dec <__vector_11+0xec>
    1dea:	70 c0       	rjmp	.+224    	; 0x1ecc <__vector_11+0x1cc>
    1dec:	eb 8c       	ldd	r14, Y+27	; 0x1b
    1dee:	fc 8c       	ldd	r15, Y+28	; 0x1c
    1df0:	12 30       	cpi	r17, 0x02	; 2
    1df2:	69 f5       	brne	.+90     	; 0x1e4e <__vector_11+0x14e>
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_Z11InitControli>
    1dfc:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <_ZL14SendInterfacesv>
    1e00:	99 e0       	ldi	r25, 0x09	; 9
    1e02:	9e 01       	movw	r18, r28
    1e04:	2f 5f       	subi	r18, 0xFF	; 255
    1e06:	3f 4f       	sbci	r19, 0xFF	; 255
    1e08:	69 01       	movw	r12, r18
    1e0a:	f9 01       	movw	r30, r18
    1e0c:	29 2f       	mov	r18, r25
    1e0e:	11 92       	st	Z+, r1
    1e10:	2a 95       	dec	r18
    1e12:	e9 f7       	brne	.-6      	; 0x1e0e <__vector_11+0x10e>
    1e14:	99 83       	std	Y+1, r25	; 0x01
    1e16:	1a 83       	std	Y+2, r17	; 0x02
    1e18:	91 e0       	ldi	r25, 0x01	; 1
    1e1a:	9e 83       	std	Y+6, r25	; 0x06
    1e1c:	90 ea       	ldi	r25, 0xA0	; 160
    1e1e:	98 87       	std	Y+8, r25	; 0x08
    1e20:	9a ef       	ldi	r25, 0xFA	; 250
    1e22:	99 87       	std	Y+9, r25	; 0x09
    1e24:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <_ZL6_cmark>
    1e28:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <_ZL6_cmark+0x1>
    1e2c:	27 5f       	subi	r18, 0xF7	; 247
    1e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e30:	3c 83       	std	Y+4, r19	; 0x04
    1e32:	2b 83       	std	Y+3, r18	; 0x03
    1e34:	8d 83       	std	Y+5, r24	; 0x05
    1e36:	c7 01       	movw	r24, r14
    1e38:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_Z11InitControli>
    1e3c:	49 e0       	ldi	r20, 0x09	; 9
    1e3e:	50 e0       	ldi	r21, 0x00	; 0
    1e40:	b6 01       	movw	r22, r12
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <_Z15USB_SendControlhPKvi>
    1e48:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <_ZL14SendInterfacesv>
    1e4c:	8d c0       	rjmp	.+282    	; 0x1f68 <__vector_11+0x268>
    1e4e:	c7 01       	movw	r24, r14
    1e50:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_Z11InitControli>
    1e54:	0e 94 c1 13 	call	0x2782	; 0x2782 <_Z12PluggableUSBv>
    1e58:	be 01       	movw	r22, r28
    1e5a:	6b 5e       	subi	r22, 0xEB	; 235
    1e5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e5e:	0e 94 65 13 	call	0x26ca	; 0x26ca <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	19 f0       	breq	.+6      	; 0x1e6c <__vector_11+0x16c>
    1e66:	0c f0       	brlt	.+2      	; 0x1e6a <__vector_11+0x16a>
    1e68:	7f c0       	rjmp	.+254    	; 0x1f68 <__vector_11+0x268>
    1e6a:	82 c0       	rjmp	.+260    	; 0x1f70 <__vector_11+0x270>
    1e6c:	11 30       	cpi	r17, 0x01	; 1
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <__vector_11+0x172>
    1e70:	70 c0       	rjmp	.+224    	; 0x1f52 <__vector_11+0x252>
    1e72:	13 30       	cpi	r17, 0x03	; 3
    1e74:	09 f0       	breq	.+2      	; 0x1e78 <__vector_11+0x178>
    1e76:	7c c0       	rjmp	.+248    	; 0x1f70 <__vector_11+0x270>
    1e78:	8f 89       	ldd	r24, Y+23	; 0x17
    1e7a:	88 23       	and	r24, r24
    1e7c:	09 f4       	brne	.+2      	; 0x1e80 <__vector_11+0x180>
    1e7e:	6c c0       	rjmp	.+216    	; 0x1f58 <__vector_11+0x258>
    1e80:	82 30       	cpi	r24, 0x02	; 2
    1e82:	29 f4       	brne	.+10     	; 0x1e8e <__vector_11+0x18e>
    1e84:	40 e8       	ldi	r20, 0x80	; 128
    1e86:	60 e1       	ldi	r22, 0x10	; 16
    1e88:	88 ee       	ldi	r24, 0xE8	; 232
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	06 c0       	rjmp	.+12     	; 0x1e9a <__vector_11+0x19a>
    1e8e:	81 30       	cpi	r24, 0x01	; 1
    1e90:	39 f4       	brne	.+14     	; 0x1ea0 <__vector_11+0x1a0>
    1e92:	40 e8       	ldi	r20, 0x80	; 128
    1e94:	6b e0       	ldi	r22, 0x0B	; 11
    1e96:	8c ed       	ldi	r24, 0xDC	; 220
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <_ZL24USB_SendStringDescriptorPKhhh>
    1e9e:	56 c0       	rjmp	.+172    	; 0x1f4c <__vector_11+0x24c>
    1ea0:	83 30       	cpi	r24, 0x03	; 3
    1ea2:	09 f0       	breq	.+2      	; 0x1ea6 <__vector_11+0x1a6>
    1ea4:	65 c0       	rjmp	.+202    	; 0x1f70 <__vector_11+0x270>
    1ea6:	0e 94 c1 13 	call	0x2782	; 0x2782 <_Z12PluggableUSBv>
    1eaa:	8e 01       	movw	r16, r28
    1eac:	0f 5f       	subi	r16, 0xFF	; 255
    1eae:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb0:	b8 01       	movw	r22, r16
    1eb2:	0e 94 84 13 	call	0x2708	; 0x2708 <_ZN13PluggableUSB_12getShortNameEPc>
    1eb6:	f8 01       	movw	r30, r16
    1eb8:	01 90       	ld	r0, Z+
    1eba:	00 20       	and	r0, r0
    1ebc:	e9 f7       	brne	.-6      	; 0x1eb8 <__vector_11+0x1b8>
    1ebe:	31 97       	sbiw	r30, 0x01	; 1
    1ec0:	bf 01       	movw	r22, r30
    1ec2:	60 1b       	sub	r22, r16
    1ec4:	71 0b       	sbc	r23, r17
    1ec6:	40 e0       	ldi	r20, 0x00	; 0
    1ec8:	c8 01       	movw	r24, r16
    1eca:	e7 cf       	rjmp	.-50     	; 0x1e9a <__vector_11+0x19a>
    1ecc:	97 30       	cpi	r25, 0x07	; 7
    1ece:	09 f4       	brne	.+2      	; 0x1ed2 <__vector_11+0x1d2>
    1ed0:	4f c0       	rjmp	.+158    	; 0x1f70 <__vector_11+0x270>
    1ed2:	98 30       	cpi	r25, 0x08	; 8
    1ed4:	21 f4       	brne	.+8      	; 0x1ede <__vector_11+0x1de>
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1edc:	45 c0       	rjmp	.+138    	; 0x1f68 <__vector_11+0x268>
    1ede:	99 30       	cpi	r25, 0x09	; 9
    1ee0:	09 f0       	breq	.+2      	; 0x1ee4 <__vector_11+0x1e4>
    1ee2:	42 c0       	rjmp	.+132    	; 0x1f68 <__vector_11+0x268>
    1ee4:	83 70       	andi	r24, 0x03	; 3
    1ee6:	09 f0       	breq	.+2      	; 0x1eea <__vector_11+0x1ea>
    1ee8:	43 c0       	rjmp	.+134    	; 0x1f70 <__vector_11+0x270>
    1eea:	e1 e0       	ldi	r30, 0x01	; 1
    1eec:	f1 e0       	ldi	r31, 0x01	; 1
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	31 e0       	ldi	r19, 0x01	; 1
    1ef2:	96 e3       	ldi	r25, 0x36	; 54
    1ef4:	20 81       	ld	r18, Z
    1ef6:	21 11       	cpse	r18, r1
    1ef8:	09 c0       	rjmp	.+18     	; 0x1f0c <__vector_11+0x20c>
    1efa:	8e e7       	ldi	r24, 0x7E	; 126
    1efc:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    1f00:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    1f04:	8f 89       	ldd	r24, Y+23	; 0x17
    1f06:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <_usbConfiguration>
    1f0a:	2e c0       	rjmp	.+92     	; 0x1f68 <__vector_11+0x268>
    1f0c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1f10:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1f14:	21 91       	ld	r18, Z+
    1f16:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1f1a:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1f1e:	8f 5f       	subi	r24, 0xFF	; 255
    1f20:	87 30       	cpi	r24, 0x07	; 7
    1f22:	41 f7       	brne	.-48     	; 0x1ef4 <__vector_11+0x1f4>
    1f24:	ea cf       	rjmp	.-44     	; 0x1efa <__vector_11+0x1fa>
    1f26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f2a:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_Z11InitControli>
    1f2e:	89 8d       	ldd	r24, Y+25	; 0x19
    1f30:	81 11       	cpse	r24, r1
    1f32:	05 c0       	rjmp	.+10     	; 0x1f3e <__vector_11+0x23e>
    1f34:	ce 01       	movw	r24, r28
    1f36:	45 96       	adiw	r24, 0x15	; 21
    1f38:	0e 94 98 12 	call	0x2530	; 0x2530 <_Z9CDC_SetupR8USBSetup>
    1f3c:	07 c0       	rjmp	.+14     	; 0x1f4c <__vector_11+0x24c>
    1f3e:	0e 94 c1 13 	call	0x2782	; 0x2782 <_Z12PluggableUSBv>
    1f42:	be 01       	movw	r22, r28
    1f44:	6b 5e       	subi	r22, 0xEB	; 235
    1f46:	7f 4f       	sbci	r23, 0xFF	; 255
    1f48:	0e 94 a3 13 	call	0x2746	; 0x2746 <_ZN13PluggableUSB_5setupER8USBSetup>
    1f4c:	88 23       	and	r24, r24
    1f4e:	81 f0       	breq	.+32     	; 0x1f70 <__vector_11+0x270>
    1f50:	0b c0       	rjmp	.+22     	; 0x1f68 <__vector_11+0x268>
    1f52:	6a ec       	ldi	r22, 0xCA	; 202
    1f54:	70 e0       	ldi	r23, 0x00	; 0
    1f56:	02 c0       	rjmp	.+4      	; 0x1f5c <__vector_11+0x25c>
    1f58:	69 ef       	ldi	r22, 0xF9	; 249
    1f5a:	70 e0       	ldi	r23, 0x00	; 0
    1f5c:	fb 01       	movw	r30, r22
    1f5e:	44 91       	lpm	r20, Z
    1f60:	50 e0       	ldi	r21, 0x00	; 0
    1f62:	80 e8       	ldi	r24, 0x80	; 128
    1f64:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <_Z15USB_SendControlhPKvi>
    1f68:	8e ef       	ldi	r24, 0xFE	; 254
    1f6a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f6e:	03 c0       	rjmp	.+6      	; 0x1f76 <__vector_11+0x276>
    1f70:	81 e2       	ldi	r24, 0x21	; 33
    1f72:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1f76:	6c 96       	adiw	r28, 0x1c	; 28
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	de bf       	out	0x3e, r29	; 62
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	cd bf       	out	0x3d, r28	; 61
    1f82:	df 91       	pop	r29
    1f84:	cf 91       	pop	r28
    1f86:	ff 91       	pop	r31
    1f88:	ef 91       	pop	r30
    1f8a:	bf 91       	pop	r27
    1f8c:	af 91       	pop	r26
    1f8e:	9f 91       	pop	r25
    1f90:	8f 91       	pop	r24
    1f92:	7f 91       	pop	r23
    1f94:	6f 91       	pop	r22
    1f96:	5f 91       	pop	r21
    1f98:	4f 91       	pop	r20
    1f9a:	3f 91       	pop	r19
    1f9c:	2f 91       	pop	r18
    1f9e:	1f 91       	pop	r17
    1fa0:	0f 91       	pop	r16
    1fa2:	ff 90       	pop	r15
    1fa4:	ef 90       	pop	r14
    1fa6:	df 90       	pop	r13
    1fa8:	cf 90       	pop	r12
    1faa:	0f 90       	pop	r0
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	0f 90       	pop	r0
    1fb0:	1f 90       	pop	r1
    1fb2:	18 95       	reti

00001fb4 <_Z9USB_Flushh>:
    1fb4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1fb8:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1fbc:	88 23       	and	r24, r24
    1fbe:	19 f0       	breq	.+6      	; 0x1fc6 <_Z9USB_Flushh+0x12>
    1fc0:	8a e3       	ldi	r24, 0x3A	; 58
    1fc2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1fc6:	08 95       	ret

00001fc8 <__vector_10>:
    1fc8:	1f 92       	push	r1
    1fca:	0f 92       	push	r0
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	0f 92       	push	r0
    1fd0:	11 24       	eor	r1, r1
    1fd2:	2f 93       	push	r18
    1fd4:	3f 93       	push	r19
    1fd6:	4f 93       	push	r20
    1fd8:	5f 93       	push	r21
    1fda:	6f 93       	push	r22
    1fdc:	7f 93       	push	r23
    1fde:	8f 93       	push	r24
    1fe0:	9f 93       	push	r25
    1fe2:	af 93       	push	r26
    1fe4:	bf 93       	push	r27
    1fe6:	cf 93       	push	r28
    1fe8:	ef 93       	push	r30
    1fea:	ff 93       	push	r31
    1fec:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1ff0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1ff4:	83 7f       	andi	r24, 0xF3	; 243
    1ff6:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1ffa:	c3 ff       	sbrs	r28, 3
    1ffc:	0f c0       	rjmp	.+30     	; 0x201c <__vector_10+0x54>
    1ffe:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2008:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    200c:	82 e3       	ldi	r24, 0x32	; 50
    200e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    2012:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <_usbConfiguration>
    2016:	88 e0       	ldi	r24, 0x08	; 8
    2018:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    201c:	c2 ff       	sbrs	r28, 2
    201e:	19 c0       	rjmp	.+50     	; 0x2052 <__vector_10+0x8a>
    2020:	83 e0       	ldi	r24, 0x03	; 3
    2022:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <_Z9USB_Flushh>
    2026:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <TxLEDPulse>
    202a:	88 23       	and	r24, r24
    202c:	39 f0       	breq	.+14     	; 0x203c <__vector_10+0x74>
    202e:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <TxLEDPulse>
    2032:	81 50       	subi	r24, 0x01	; 1
    2034:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <TxLEDPulse>
    2038:	88 23       	and	r24, r24
    203a:	89 f1       	breq	.+98     	; 0x209e <__vector_10+0xd6>
    203c:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <RxLEDPulse>
    2040:	88 23       	and	r24, r24
    2042:	39 f0       	breq	.+14     	; 0x2052 <__vector_10+0x8a>
    2044:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <RxLEDPulse>
    2048:	81 50       	subi	r24, 0x01	; 1
    204a:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <RxLEDPulse>
    204e:	88 23       	and	r24, r24
    2050:	41 f1       	breq	.+80     	; 0x20a2 <__vector_10+0xda>
    2052:	c4 ff       	sbrs	r28, 4
    2054:	10 c0       	rjmp	.+32     	; 0x2076 <__vector_10+0xae>
    2056:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    205a:	8e 7e       	andi	r24, 0xEE	; 238
    205c:	81 60       	ori	r24, 0x01	; 1
    205e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2062:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2066:	8f 7e       	andi	r24, 0xEF	; 239
    2068:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    206c:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <_usbSuspendState>
    2070:	8e 7e       	andi	r24, 0xEE	; 238
    2072:	80 61       	ori	r24, 0x10	; 16
    2074:	11 c0       	rjmp	.+34     	; 0x2098 <__vector_10+0xd0>
    2076:	c0 ff       	sbrs	r28, 0
    2078:	16 c0       	rjmp	.+44     	; 0x20a6 <__vector_10+0xde>
    207a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    207e:	8e 7e       	andi	r24, 0xEE	; 238
    2080:	80 61       	ori	r24, 0x10	; 16
    2082:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2086:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    208a:	8e 7e       	andi	r24, 0xEE	; 238
    208c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2090:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <_usbSuspendState>
    2094:	8e 7e       	andi	r24, 0xEE	; 238
    2096:	81 60       	ori	r24, 0x01	; 1
    2098:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <_usbSuspendState>
    209c:	04 c0       	rjmp	.+8      	; 0x20a6 <__vector_10+0xde>
    209e:	5d 9a       	sbi	0x0b, 5	; 11
    20a0:	cd cf       	rjmp	.-102    	; 0x203c <__vector_10+0x74>
    20a2:	28 9a       	sbi	0x05, 0	; 5
    20a4:	d6 cf       	rjmp	.-84     	; 0x2052 <__vector_10+0x8a>
    20a6:	ff 91       	pop	r31
    20a8:	ef 91       	pop	r30
    20aa:	cf 91       	pop	r28
    20ac:	bf 91       	pop	r27
    20ae:	af 91       	pop	r26
    20b0:	9f 91       	pop	r25
    20b2:	8f 91       	pop	r24
    20b4:	7f 91       	pop	r23
    20b6:	6f 91       	pop	r22
    20b8:	5f 91       	pop	r21
    20ba:	4f 91       	pop	r20
    20bc:	3f 91       	pop	r19
    20be:	2f 91       	pop	r18
    20c0:	0f 90       	pop	r0
    20c2:	0f be       	out	0x3f, r0	; 63
    20c4:	0f 90       	pop	r0
    20c6:	1f 90       	pop	r1
    20c8:	18 95       	reti

000020ca <_ZN10USBDevice_6attachEv>:
{
}

void USBDevice_::attach()
{
	_usbConfiguration = 0;
    20ca:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <_usbConfiguration>
	_usbCurrentStatus = 0;
    20ce:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <_usbCurrentStatus>
	_usbSuspendState = 0;
    20d2:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <_usbSuspendState>
	USB_ClockEnable();
    20d6:	0e 94 af 0c 	call	0x195e	; 0x195e <_ZL15USB_ClockEnablev>

	UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear already pending WAKEUP / SUSPEND requests
    20da:	e1 ee       	ldi	r30, 0xE1	; 225
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	8e 7e       	andi	r24, 0xEE	; 238
    20e2:	80 83       	st	Z, r24
	UDIEN = (1<<EORSTE) | (1<<SOFE) | (1<<SUSPE);	// Enable interrupts for EOR (End of Reset), SOF (start of frame) and SUSPEND
    20e4:	8d e0       	ldi	r24, 0x0D	; 13
    20e6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	
	TX_RX_LED_INIT;
    20ea:	55 9a       	sbi	0x0a, 5	; 10
    20ec:	20 9a       	sbi	0x04, 0	; 4
    20ee:	08 95       	ret

000020f0 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    20f0:	1f 92       	push	r1
    20f2:	0f 92       	push	r0
    20f4:	0f b6       	in	r0, 0x3f	; 63
    20f6:	0f 92       	push	r0
    20f8:	11 24       	eor	r1, r1
    20fa:	2f 93       	push	r18
    20fc:	3f 93       	push	r19
    20fe:	8f 93       	push	r24
    2100:	9f 93       	push	r25
    2102:	af 93       	push	r26
    2104:	bf 93       	push	r27
    2106:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <timer0_millis>
    210a:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <timer0_millis+0x1>
    210e:	a0 91 7c 02 	lds	r26, 0x027C	; 0x80027c <timer0_millis+0x2>
    2112:	b0 91 7d 02 	lds	r27, 0x027D	; 0x80027d <timer0_millis+0x3>
    2116:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <timer0_fract>
    211a:	23 e0       	ldi	r18, 0x03	; 3
    211c:	23 0f       	add	r18, r19
    211e:	2d 37       	cpi	r18, 0x7D	; 125
    2120:	20 f4       	brcc	.+8      	; 0x212a <__vector_23+0x3a>
    2122:	01 96       	adiw	r24, 0x01	; 1
    2124:	a1 1d       	adc	r26, r1
    2126:	b1 1d       	adc	r27, r1
    2128:	05 c0       	rjmp	.+10     	; 0x2134 <__vector_23+0x44>
    212a:	26 e8       	ldi	r18, 0x86	; 134
    212c:	23 0f       	add	r18, r19
    212e:	02 96       	adiw	r24, 0x02	; 2
    2130:	a1 1d       	adc	r26, r1
    2132:	b1 1d       	adc	r27, r1
    2134:	20 93 79 02 	sts	0x0279, r18	; 0x800279 <timer0_fract>
    2138:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <timer0_millis>
    213c:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <timer0_millis+0x1>
    2140:	a0 93 7c 02 	sts	0x027C, r26	; 0x80027c <timer0_millis+0x2>
    2144:	b0 93 7d 02 	sts	0x027D, r27	; 0x80027d <timer0_millis+0x3>
    2148:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <timer0_overflow_count>
    214c:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <timer0_overflow_count+0x1>
    2150:	a0 91 80 02 	lds	r26, 0x0280	; 0x800280 <timer0_overflow_count+0x2>
    2154:	b0 91 81 02 	lds	r27, 0x0281	; 0x800281 <timer0_overflow_count+0x3>
    2158:	01 96       	adiw	r24, 0x01	; 1
    215a:	a1 1d       	adc	r26, r1
    215c:	b1 1d       	adc	r27, r1
    215e:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <timer0_overflow_count>
    2162:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <timer0_overflow_count+0x1>
    2166:	a0 93 80 02 	sts	0x0280, r26	; 0x800280 <timer0_overflow_count+0x2>
    216a:	b0 93 81 02 	sts	0x0281, r27	; 0x800281 <timer0_overflow_count+0x3>
    216e:	bf 91       	pop	r27
    2170:	af 91       	pop	r26
    2172:	9f 91       	pop	r25
    2174:	8f 91       	pop	r24
    2176:	3f 91       	pop	r19
    2178:	2f 91       	pop	r18
    217a:	0f 90       	pop	r0
    217c:	0f be       	out	0x3f, r0	; 63
    217e:	0f 90       	pop	r0
    2180:	1f 90       	pop	r1
    2182:	18 95       	reti

00002184 <micros>:
    2184:	3f b7       	in	r19, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <timer0_overflow_count>
    218c:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <timer0_overflow_count+0x1>
    2190:	a0 91 80 02 	lds	r26, 0x0280	; 0x800280 <timer0_overflow_count+0x2>
    2194:	b0 91 81 02 	lds	r27, 0x0281	; 0x800281 <timer0_overflow_count+0x3>
    2198:	26 b5       	in	r18, 0x26	; 38
    219a:	a8 9b       	sbis	0x15, 0	; 21
    219c:	05 c0       	rjmp	.+10     	; 0x21a8 <micros+0x24>
    219e:	2f 3f       	cpi	r18, 0xFF	; 255
    21a0:	19 f0       	breq	.+6      	; 0x21a8 <micros+0x24>
    21a2:	01 96       	adiw	r24, 0x01	; 1
    21a4:	a1 1d       	adc	r26, r1
    21a6:	b1 1d       	adc	r27, r1
    21a8:	3f bf       	out	0x3f, r19	; 63
    21aa:	ba 2f       	mov	r27, r26
    21ac:	a9 2f       	mov	r26, r25
    21ae:	98 2f       	mov	r25, r24
    21b0:	88 27       	eor	r24, r24
    21b2:	82 0f       	add	r24, r18
    21b4:	91 1d       	adc	r25, r1
    21b6:	a1 1d       	adc	r26, r1
    21b8:	b1 1d       	adc	r27, r1
    21ba:	bc 01       	movw	r22, r24
    21bc:	cd 01       	movw	r24, r26
    21be:	42 e0       	ldi	r20, 0x02	; 2
    21c0:	66 0f       	add	r22, r22
    21c2:	77 1f       	adc	r23, r23
    21c4:	88 1f       	adc	r24, r24
    21c6:	99 1f       	adc	r25, r25
    21c8:	4a 95       	dec	r20
    21ca:	d1 f7       	brne	.-12     	; 0x21c0 <micros+0x3c>
    21cc:	08 95       	ret

000021ce <delay>:
    21ce:	8f 92       	push	r8
    21d0:	9f 92       	push	r9
    21d2:	af 92       	push	r10
    21d4:	bf 92       	push	r11
    21d6:	cf 92       	push	r12
    21d8:	df 92       	push	r13
    21da:	ef 92       	push	r14
    21dc:	ff 92       	push	r15
    21de:	6b 01       	movw	r12, r22
    21e0:	7c 01       	movw	r14, r24
    21e2:	0e 94 c2 10 	call	0x2184	; 0x2184 <micros>
    21e6:	4b 01       	movw	r8, r22
    21e8:	5c 01       	movw	r10, r24
    21ea:	c1 14       	cp	r12, r1
    21ec:	d1 04       	cpc	r13, r1
    21ee:	e1 04       	cpc	r14, r1
    21f0:	f1 04       	cpc	r15, r1
    21f2:	01 f1       	breq	.+64     	; 0x2234 <delay+0x66>
    21f4:	0e 94 3b 13 	call	0x2676	; 0x2676 <yield>
    21f8:	0e 94 c2 10 	call	0x2184	; 0x2184 <micros>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	88 19       	sub	r24, r8
    2202:	99 09       	sbc	r25, r9
    2204:	aa 09       	sbc	r26, r10
    2206:	bb 09       	sbc	r27, r11
    2208:	88 3e       	cpi	r24, 0xE8	; 232
    220a:	93 40       	sbci	r25, 0x03	; 3
    220c:	a1 05       	cpc	r26, r1
    220e:	b1 05       	cpc	r27, r1
    2210:	60 f3       	brcs	.-40     	; 0x21ea <delay+0x1c>
    2212:	21 e0       	ldi	r18, 0x01	; 1
    2214:	c2 1a       	sub	r12, r18
    2216:	d1 08       	sbc	r13, r1
    2218:	e1 08       	sbc	r14, r1
    221a:	f1 08       	sbc	r15, r1
    221c:	88 ee       	ldi	r24, 0xE8	; 232
    221e:	88 0e       	add	r8, r24
    2220:	83 e0       	ldi	r24, 0x03	; 3
    2222:	98 1e       	adc	r9, r24
    2224:	a1 1c       	adc	r10, r1
    2226:	b1 1c       	adc	r11, r1
    2228:	c1 14       	cp	r12, r1
    222a:	d1 04       	cpc	r13, r1
    222c:	e1 04       	cpc	r14, r1
    222e:	f1 04       	cpc	r15, r1
    2230:	19 f7       	brne	.-58     	; 0x21f8 <delay+0x2a>
    2232:	db cf       	rjmp	.-74     	; 0x21ea <delay+0x1c>
    2234:	ff 90       	pop	r15
    2236:	ef 90       	pop	r14
    2238:	df 90       	pop	r13
    223a:	cf 90       	pop	r12
    223c:	bf 90       	pop	r11
    223e:	af 90       	pop	r10
    2240:	9f 90       	pop	r9
    2242:	8f 90       	pop	r8
    2244:	08 95       	ret

00002246 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2246:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2248:	84 b5       	in	r24, 0x24	; 36
    224a:	82 60       	ori	r24, 0x02	; 2
    224c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    224e:	84 b5       	in	r24, 0x24	; 36
    2250:	81 60       	ori	r24, 0x01	; 1
    2252:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2254:	85 b5       	in	r24, 0x25	; 37
    2256:	82 60       	ori	r24, 0x02	; 2
    2258:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    225a:	85 b5       	in	r24, 0x25	; 37
    225c:	81 60       	ori	r24, 0x01	; 1
    225e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2260:	ee e6       	ldi	r30, 0x6E	; 110
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	81 60       	ori	r24, 0x01	; 1
    2268:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    226a:	e1 e8       	ldi	r30, 0x81	; 129
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2270:	80 81       	ld	r24, Z
    2272:	82 60       	ori	r24, 0x02	; 2
    2274:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2276:	80 81       	ld	r24, Z
    2278:	81 60       	ori	r24, 0x01	; 1
    227a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    227c:	e0 e8       	ldi	r30, 0x80	; 128
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	81 60       	ori	r24, 0x01	; 1
    2284:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    2286:	e1 e9       	ldi	r30, 0x91	; 145
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	82 60       	ori	r24, 0x02	; 2
    228e:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    2290:	80 81       	ld	r24, Z
    2292:	81 60       	ori	r24, 0x01	; 1
    2294:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    2296:	e0 e9       	ldi	r30, 0x90	; 144
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	81 60       	ori	r24, 0x01	; 1
    229e:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
    22a0:	e1 ec       	ldi	r30, 0xC1	; 193
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	84 60       	ori	r24, 0x04	; 4
    22a8:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
    22aa:	80 81       	ld	r24, Z
    22ac:	82 60       	ori	r24, 0x02	; 2
    22ae:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    22b0:	80 81       	ld	r24, Z
    22b2:	81 60       	ori	r24, 0x01	; 1
    22b4:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
    22b6:	e3 ec       	ldi	r30, 0xC3	; 195
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	81 60       	ori	r24, 0x01	; 1
    22be:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
    22c0:	e0 ec       	ldi	r30, 0xC0	; 192
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	80 81       	ld	r24, Z
    22c6:	82 60       	ori	r24, 0x02	; 2
    22c8:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
    22ca:	e2 ec       	ldi	r30, 0xC2	; 194
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	81 60       	ori	r24, 0x01	; 1
    22d2:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    22d4:	ea e7       	ldi	r30, 0x7A	; 122
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	84 60       	ori	r24, 0x04	; 4
    22dc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    22de:	80 81       	ld	r24, Z
    22e0:	82 60       	ori	r24, 0x02	; 2
    22e2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    22e4:	80 81       	ld	r24, Z
    22e6:	81 60       	ori	r24, 0x01	; 1
    22e8:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    22ea:	80 81       	ld	r24, Z
    22ec:	80 68       	ori	r24, 0x80	; 128
    22ee:	80 83       	st	Z, r24
    22f0:	08 95       	ret

000022f2 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	fc 01       	movw	r30, r24
    22f6:	31 97       	sbiw	r30, 0x01	; 1
    22f8:	ef 30       	cpi	r30, 0x0F	; 15
    22fa:	f1 05       	cpc	r31, r1
    22fc:	b0 f5       	brcc	.+108    	; 0x236a <turnOffPWM+0x78>
    22fe:	ea 5a       	subi	r30, 0xAA	; 170
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2306:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    230a:	8f 77       	andi	r24, 0x7F	; 127
    230c:	03 c0       	rjmp	.+6      	; 0x2314 <turnOffPWM+0x22>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    230e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2312:	8f 7d       	andi	r24, 0xDF	; 223
    2314:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2318:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    231a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    231e:	87 7f       	andi	r24, 0xF7	; 247
    2320:	f9 cf       	rjmp	.-14     	; 0x2314 <turnOffPWM+0x22>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2322:	84 b5       	in	r24, 0x24	; 36
    2324:	8f 77       	andi	r24, 0x7F	; 127
    2326:	02 c0       	rjmp	.+4      	; 0x232c <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2328:	84 b5       	in	r24, 0x24	; 36
    232a:	8f 7d       	andi	r24, 0xDF	; 223
    232c:	84 bd       	out	0x24, r24	; 36
    232e:	08 95       	ret
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    2330:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2334:	8f 77       	andi	r24, 0x7F	; 127
    2336:	07 c0       	rjmp	.+14     	; 0x2346 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    2338:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    233c:	8f 7d       	andi	r24, 0xDF	; 223
    233e:	03 c0       	rjmp	.+6      	; 0x2346 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    2340:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2344:	87 7f       	andi	r24, 0xF7	; 247
    2346:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    234a:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    234c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    2350:	8f 77       	andi	r24, 0x7F	; 127
    2352:	03 c0       	rjmp	.+6      	; 0x235a <turnOffPWM+0x68>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    2354:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    2358:	8f 7d       	andi	r24, 0xDF	; 223
    235a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    235e:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
		#endif			
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
    2360:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    2364:	87 7f       	andi	r24, 0xF7	; 247
    2366:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    236a:	08 95       	ret

0000236c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    236c:	cf 93       	push	r28
    236e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	fc 01       	movw	r30, r24
    2374:	e4 5e       	subi	r30, 0xE4	; 228
    2376:	fe 4f       	sbci	r31, 0xFE	; 254
    2378:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    237a:	fc 01       	movw	r30, r24
    237c:	e5 5c       	subi	r30, 0xC5	; 197
    237e:	fe 4f       	sbci	r31, 0xFE	; 254
    2380:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2382:	88 23       	and	r24, r24
    2384:	61 f1       	breq	.+88     	; 0x23de <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	88 0f       	add	r24, r24
    238a:	99 1f       	adc	r25, r25
    238c:	fc 01       	movw	r30, r24
    238e:	e8 59       	subi	r30, 0x98	; 152
    2390:	fe 4f       	sbci	r31, 0xFE	; 254
    2392:	c5 91       	lpm	r28, Z+
    2394:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2396:	fc 01       	movw	r30, r24
    2398:	e6 5a       	subi	r30, 0xA6	; 166
    239a:	fe 4f       	sbci	r31, 0xFE	; 254
    239c:	a5 91       	lpm	r26, Z+
    239e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    23a0:	61 11       	cpse	r22, r1
    23a2:	09 c0       	rjmp	.+18     	; 0x23b6 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    23a4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    23a6:	f8 94       	cli
		*reg &= ~bit;
    23a8:	88 81       	ld	r24, Y
    23aa:	20 95       	com	r18
    23ac:	82 23       	and	r24, r18
    23ae:	88 83       	st	Y, r24
		*out &= ~bit;
    23b0:	ec 91       	ld	r30, X
    23b2:	2e 23       	and	r18, r30
    23b4:	0b c0       	rjmp	.+22     	; 0x23cc <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    23b6:	62 30       	cpi	r22, 0x02	; 2
    23b8:	61 f4       	brne	.+24     	; 0x23d2 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    23ba:	9f b7       	in	r25, 0x3f	; 63
                cli();
    23bc:	f8 94       	cli
		*reg &= ~bit;
    23be:	88 81       	ld	r24, Y
    23c0:	32 2f       	mov	r19, r18
    23c2:	30 95       	com	r19
    23c4:	83 23       	and	r24, r19
    23c6:	88 83       	st	Y, r24
		*out |= bit;
    23c8:	ec 91       	ld	r30, X
    23ca:	2e 2b       	or	r18, r30
    23cc:	2c 93       	st	X, r18
		SREG = oldSREG;
    23ce:	9f bf       	out	0x3f, r25	; 63
    23d0:	06 c0       	rjmp	.+12     	; 0x23de <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    23d2:	8f b7       	in	r24, 0x3f	; 63
                cli();
    23d4:	f8 94       	cli
		*reg |= bit;
    23d6:	e8 81       	ld	r30, Y
    23d8:	2e 2b       	or	r18, r30
    23da:	28 83       	st	Y, r18
		SREG = oldSREG;
    23dc:	8f bf       	out	0x3f, r24	; 63
	}
}
    23de:	df 91       	pop	r29
    23e0:	cf 91       	pop	r28
    23e2:	08 95       	ret

000023e4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    23e4:	1f 93       	push	r17
    23e6:	cf 93       	push	r28
    23e8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    23ea:	28 2f       	mov	r18, r24
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	f9 01       	movw	r30, r18
    23f0:	e3 50       	subi	r30, 0x03	; 3
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    23f6:	f9 01       	movw	r30, r18
    23f8:	e4 5e       	subi	r30, 0xE4	; 228
    23fa:	fe 4f       	sbci	r31, 0xFE	; 254
    23fc:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    23fe:	f9 01       	movw	r30, r18
    2400:	e5 5c       	subi	r30, 0xC5	; 197
    2402:	fe 4f       	sbci	r31, 0xFE	; 254
    2404:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2406:	cc 23       	and	r28, r28
    2408:	c1 f0       	breq	.+48     	; 0x243a <digitalWrite+0x56>
    240a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    240c:	81 11       	cpse	r24, r1
    240e:	0e 94 79 11 	call	0x22f2	; 0x22f2 <turnOffPWM>

	out = portOutputRegister(port);
    2412:	ec 2f       	mov	r30, r28
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	ee 0f       	add	r30, r30
    2418:	ff 1f       	adc	r31, r31
    241a:	e6 5a       	subi	r30, 0xA6	; 166
    241c:	fe 4f       	sbci	r31, 0xFE	; 254
    241e:	a5 91       	lpm	r26, Z+
    2420:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2422:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2424:	f8 94       	cli

	if (val == LOW) {
    2426:	11 11       	cpse	r17, r1
    2428:	04 c0       	rjmp	.+8      	; 0x2432 <digitalWrite+0x4e>
		*out &= ~bit;
    242a:	8c 91       	ld	r24, X
    242c:	d0 95       	com	r29
    242e:	d8 23       	and	r29, r24
    2430:	02 c0       	rjmp	.+4      	; 0x2436 <digitalWrite+0x52>
	} else {
		*out |= bit;
    2432:	ec 91       	ld	r30, X
    2434:	de 2b       	or	r29, r30
    2436:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    2438:	9f bf       	out	0x3f, r25	; 63
}
    243a:	df 91       	pop	r29
    243c:	cf 91       	pop	r28
    243e:	1f 91       	pop	r17
    2440:	08 95       	ret

00002442 <_ZN7Serial_5writeEh>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		ret = breakValue;
		breakValue = -1;
	}
	return ret;
}
    2442:	cf 93       	push	r28
    2444:	df 93       	push	r29
    2446:	1f 92       	push	r1
    2448:	cd b7       	in	r28, 0x3d	; 61
    244a:	de b7       	in	r29, 0x3e	; 62
    244c:	69 83       	std	Y+1, r22	; 0x01
    244e:	dc 01       	movw	r26, r24
    2450:	ed 91       	ld	r30, X+
    2452:	fc 91       	ld	r31, X
    2454:	02 80       	ldd	r0, Z+2	; 0x02
    2456:	f3 81       	ldd	r31, Z+3	; 0x03
    2458:	e0 2d       	mov	r30, r0
    245a:	41 e0       	ldi	r20, 0x01	; 1
    245c:	50 e0       	ldi	r21, 0x00	; 0
    245e:	be 01       	movw	r22, r28
    2460:	6f 5f       	subi	r22, 0xFF	; 255
    2462:	7f 4f       	sbci	r23, 0xFF	; 255
    2464:	09 95       	icall
    2466:	0f 90       	pop	r0
    2468:	df 91       	pop	r29
    246a:	cf 91       	pop	r28
    246c:	08 95       	ret

0000246e <_ZN7Serial_4peekEv>:
    246e:	cf 93       	push	r28
    2470:	df 93       	push	r29
    2472:	ec 01       	movw	r28, r24
    2474:	8c 85       	ldd	r24, Y+12	; 0x0c
    2476:	9d 85       	ldd	r25, Y+13	; 0x0d
    2478:	97 ff       	sbrs	r25, 7
    247a:	05 c0       	rjmp	.+10     	; 0x2486 <_ZN7Serial_4peekEv+0x18>
    247c:	82 e0       	ldi	r24, 0x02	; 2
    247e:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <_Z8USB_Recvh>
    2482:	9d 87       	std	Y+13, r25	; 0x0d
    2484:	8c 87       	std	Y+12, r24	; 0x0c
    2486:	8c 85       	ldd	r24, Y+12	; 0x0c
    2488:	9d 85       	ldd	r25, Y+13	; 0x0d
    248a:	df 91       	pop	r29
    248c:	cf 91       	pop	r28
    248e:	08 95       	ret

00002490 <_ZN7Serial_17availableForWriteEv>:
    2490:	83 e0       	ldi	r24, 0x03	; 3
    2492:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_Z13USB_SendSpaceh>
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	08 95       	ret

0000249a <_ZN7Serial_5flushEv>:
    249a:	83 e0       	ldi	r24, 0x03	; 3
    249c:	0c 94 da 0f 	jmp	0x1fb4	; 0x1fb4 <_Z9USB_Flushh>

000024a0 <_ZN7Serial_9availableEv>:
    24a0:	fc 01       	movw	r30, r24
    24a2:	84 85       	ldd	r24, Z+12	; 0x0c
    24a4:	95 85       	ldd	r25, Z+13	; 0x0d
    24a6:	97 fd       	sbrc	r25, 7
    24a8:	06 c0       	rjmp	.+12     	; 0x24b6 <_ZN7Serial_9availableEv+0x16>
    24aa:	82 e0       	ldi	r24, 0x02	; 2
    24ac:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <_Z13USB_Availableh>
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	01 96       	adiw	r24, 0x01	; 1
    24b4:	08 95       	ret
    24b6:	82 e0       	ldi	r24, 0x02	; 2
    24b8:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <_Z13USB_Availableh>
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	08 95       	ret

000024c0 <_ZN7Serial_4readEv>:
    24c0:	fc 01       	movw	r30, r24
    24c2:	84 85       	ldd	r24, Z+12	; 0x0c
    24c4:	95 85       	ldd	r25, Z+13	; 0x0d
    24c6:	97 fd       	sbrc	r25, 7
    24c8:	05 c0       	rjmp	.+10     	; 0x24d4 <_ZN7Serial_4readEv+0x14>
    24ca:	2f ef       	ldi	r18, 0xFF	; 255
    24cc:	3f ef       	ldi	r19, 0xFF	; 255
    24ce:	35 87       	std	Z+13, r19	; 0x0d
    24d0:	24 87       	std	Z+12, r18	; 0x0c
    24d2:	08 95       	ret
    24d4:	82 e0       	ldi	r24, 0x02	; 2
    24d6:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <_Z8USB_Recvh>

000024da <_ZN7Serial_5writeEPKhj>:
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
    24de:	ec 01       	movw	r28, r24
    24e0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_ZL12_usbLineInfo+0x7>
    24e4:	88 23       	and	r24, r24
    24e6:	31 f0       	breq	.+12     	; 0x24f4 <_ZN7Serial_5writeEPKhj+0x1a>
    24e8:	83 e0       	ldi	r24, 0x03	; 3
    24ea:	0e 94 76 0d 	call	0x1aec	; 0x1aec <_Z8USB_SendhPKvi>
    24ee:	18 16       	cp	r1, r24
    24f0:	19 06       	cpc	r1, r25
    24f2:	34 f0       	brlt	.+12     	; 0x2500 <_ZN7Serial_5writeEPKhj+0x26>
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	9b 83       	std	Y+3, r25	; 0x03
    24fa:	8a 83       	std	Y+2, r24	; 0x02
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	df 91       	pop	r29
    2502:	cf 91       	pop	r28
    2504:	08 95       	ret

00002506 <_Z16isLUFAbootloaderv>:
    2506:	ee ef       	ldi	r30, 0xFE	; 254
    2508:	ff e7       	ldi	r31, 0x7F	; 127
    250a:	25 91       	lpm	r18, Z+
    250c:	34 91       	lpm	r19, Z
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	2b 3f       	cpi	r18, 0xFB	; 251
    2512:	3c 4d       	sbci	r19, 0xDC	; 220
    2514:	09 f0       	breq	.+2      	; 0x2518 <_Z16isLUFAbootloaderv+0x12>
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	08 95       	ret

0000251a <_Z16CDC_GetInterfacePh>:
    251a:	fc 01       	movw	r30, r24
    251c:	90 81       	ld	r25, Z
    251e:	9e 5f       	subi	r25, 0xFE	; 254
    2520:	90 83       	st	Z, r25
    2522:	42 e4       	ldi	r20, 0x42	; 66
    2524:	50 e0       	ldi	r21, 0x00	; 0
    2526:	66 e7       	ldi	r22, 0x76	; 118
    2528:	71 e0       	ldi	r23, 0x01	; 1
    252a:	80 e8       	ldi	r24, 0x80	; 128
    252c:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <_Z15USB_SendControlhPKvi>

00002530 <_Z9CDC_SetupR8USBSetup>:
    2530:	fc 01       	movw	r30, r24
    2532:	81 81       	ldd	r24, Z+1	; 0x01
    2534:	90 81       	ld	r25, Z
    2536:	91 3a       	cpi	r25, 0xA1	; 161
    2538:	59 f4       	brne	.+22     	; 0x2550 <_Z9CDC_SetupR8USBSetup+0x20>
    253a:	81 32       	cpi	r24, 0x21	; 33
    253c:	09 f0       	breq	.+2      	; 0x2540 <_Z9CDC_SetupR8USBSetup+0x10>
    253e:	65 c0       	rjmp	.+202    	; 0x260a <_Z9CDC_SetupR8USBSetup+0xda>
    2540:	47 e0       	ldi	r20, 0x07	; 7
    2542:	50 e0       	ldi	r21, 0x00	; 0
    2544:	6b e0       	ldi	r22, 0x0B	; 11
    2546:	71 e0       	ldi	r23, 0x01	; 1
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <_Z15USB_SendControlhPKvi>
    254e:	5b c0       	rjmp	.+182    	; 0x2606 <_Z9CDC_SetupR8USBSetup+0xd6>
    2550:	91 32       	cpi	r25, 0x21	; 33
    2552:	09 f0       	breq	.+2      	; 0x2556 <_Z9CDC_SetupR8USBSetup+0x26>
    2554:	5a c0       	rjmp	.+180    	; 0x260a <_Z9CDC_SetupR8USBSetup+0xda>
    2556:	83 32       	cpi	r24, 0x23	; 35
    2558:	69 f4       	brne	.+26     	; 0x2574 <_Z9CDC_SetupR8USBSetup+0x44>
    255a:	82 81       	ldd	r24, Z+2	; 0x02
    255c:	93 81       	ldd	r25, Z+3	; 0x03
    255e:	a0 e0       	ldi	r26, 0x00	; 0
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZL10breakValue>
    2566:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_ZL10breakValue+0x1>
    256a:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_ZL10breakValue+0x2>
    256e:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_ZL10breakValue+0x3>
    2572:	49 c0       	rjmp	.+146    	; 0x2606 <_Z9CDC_SetupR8USBSetup+0xd6>
    2574:	80 32       	cpi	r24, 0x20	; 32
    2576:	39 f4       	brne	.+14     	; 0x2586 <_Z9CDC_SetupR8USBSetup+0x56>
    2578:	67 e0       	ldi	r22, 0x07	; 7
    257a:	70 e0       	ldi	r23, 0x00	; 0
    257c:	8b e0       	ldi	r24, 0x0B	; 11
    257e:	91 e0       	ldi	r25, 0x01	; 1
    2580:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_Z15USB_RecvControlPvi>
    2584:	40 c0       	rjmp	.+128    	; 0x2606 <_Z9CDC_SetupR8USBSetup+0xd6>
    2586:	82 32       	cpi	r24, 0x22	; 34
    2588:	09 f0       	breq	.+2      	; 0x258c <_Z9CDC_SetupR8USBSetup+0x5c>
    258a:	3d c0       	rjmp	.+122    	; 0x2606 <_Z9CDC_SetupR8USBSetup+0xd6>
    258c:	82 81       	ldd	r24, Z+2	; 0x02
    258e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_ZL12_usbLineInfo+0x7>
    2592:	0e 94 83 12 	call	0x2506	; 0x2506 <_Z16isLUFAbootloaderv>
    2596:	88 23       	and	r24, r24
    2598:	19 f0       	breq	.+6      	; 0x25a0 <_Z9CDC_SetupR8USBSetup+0x70>
    259a:	ee ef       	ldi	r30, 0xFE	; 254
    259c:	fa e0       	ldi	r31, 0x0A	; 10
    259e:	02 c0       	rjmp	.+4      	; 0x25a4 <_Z9CDC_SetupR8USBSetup+0x74>
    25a0:	e0 e0       	ldi	r30, 0x00	; 0
    25a2:	f8 e0       	ldi	r31, 0x08	; 8
    25a4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZL12_usbLineInfo>
    25a8:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <_ZL12_usbLineInfo+0x1>
    25ac:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <_ZL12_usbLineInfo+0x2>
    25b0:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <_ZL12_usbLineInfo+0x3>
    25b4:	80 3b       	cpi	r24, 0xB0	; 176
    25b6:	94 40       	sbci	r25, 0x04	; 4
    25b8:	a1 05       	cpc	r26, r1
    25ba:	b1 05       	cpc	r27, r1
    25bc:	41 f5       	brne	.+80     	; 0x260e <_Z9CDC_SetupR8USBSetup+0xde>
    25be:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_ZL12_usbLineInfo+0x7>
    25c2:	80 fd       	sbrc	r24, 0
    25c4:	24 c0       	rjmp	.+72     	; 0x260e <_Z9CDC_SetupR8USBSetup+0xde>
    25c6:	ee 3f       	cpi	r30, 0xFE	; 254
    25c8:	8a e0       	ldi	r24, 0x0A	; 10
    25ca:	f8 07       	cpc	r31, r24
    25cc:	51 f0       	breq	.+20     	; 0x25e2 <_Z9CDC_SetupR8USBSetup+0xb2>
    25ce:	80 81       	ld	r24, Z
    25d0:	91 81       	ldd	r25, Z+1	; 0x01
    25d2:	87 37       	cpi	r24, 0x77	; 119
    25d4:	27 e7       	ldi	r18, 0x77	; 119
    25d6:	92 07       	cpc	r25, r18
    25d8:	21 f0       	breq	.+8      	; 0x25e2 <_Z9CDC_SetupR8USBSetup+0xb2>
    25da:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x820>
    25de:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x81f>
    25e2:	87 e7       	ldi	r24, 0x77	; 119
    25e4:	97 e7       	ldi	r25, 0x77	; 119
    25e6:	91 83       	std	Z+1, r25	; 0x01
    25e8:	80 83       	st	Z, r24
    25ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    25ee:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <_ZL11wdtcsr_save>
    25f2:	9b e0       	ldi	r25, 0x0B	; 11
    25f4:	88 e1       	ldi	r24, 0x18	; 24
    25f6:	0f b6       	in	r0, 0x3f	; 63
    25f8:	f8 94       	cli
    25fa:	a8 95       	wdr
    25fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    2600:	0f be       	out	0x3f, r0	; 63
    2602:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	08 95       	ret
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	08 95       	ret
    260e:	80 81       	ld	r24, Z
    2610:	91 81       	ldd	r25, Z+1	; 0x01
    2612:	87 37       	cpi	r24, 0x77	; 119
    2614:	97 47       	sbci	r25, 0x77	; 119
    2616:	b9 f7       	brne	.-18     	; 0x2606 <_Z9CDC_SetupR8USBSetup+0xd6>
    2618:	a8 95       	wdr
    261a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    261e:	88 61       	ori	r24, 0x18	; 24
    2620:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    2624:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <_ZL11wdtcsr_save>
    2628:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    262c:	ee 3f       	cpi	r30, 0xFE	; 254
    262e:	8a e0       	ldi	r24, 0x0A	; 10
    2630:	f8 07       	cpc	r31, r24
    2632:	39 f0       	breq	.+14     	; 0x2642 <_Z9CDC_SetupR8USBSetup+0x112>
    2634:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x81f>
    2638:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x820>
    263c:	91 83       	std	Z+1, r25	; 0x01
    263e:	80 83       	st	Z, r24
    2640:	e2 cf       	rjmp	.-60     	; 0x2606 <_Z9CDC_SetupR8USBSetup+0xd6>
    2642:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x820>
    2646:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x81f>
    264a:	dd cf       	rjmp	.-70     	; 0x2606 <_Z9CDC_SetupR8USBSetup+0xd6>

0000264c <_GLOBAL__sub_I__cdcInterface>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    264c:	e2 e8       	ldi	r30, 0x82	; 130
    264e:	f2 e0       	ldi	r31, 0x02	; 2
    2650:	13 82       	std	Z+3, r1	; 0x03
    2652:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    2654:	88 ee       	ldi	r24, 0xE8	; 232
    2656:	93 e0       	ldi	r25, 0x03	; 3
    2658:	a0 e0       	ldi	r26, 0x00	; 0
    265a:	b0 e0       	ldi	r27, 0x00	; 0
    265c:	84 83       	std	Z+4, r24	; 0x04
    265e:	95 83       	std	Z+5, r25	; 0x05
    2660:	a6 83       	std	Z+6, r26	; 0x06
    2662:	b7 83       	std	Z+7, r27	; 0x07
class Serial_ : public Stream
{
private:
	int peek_buffer;
public:
	Serial_() { peek_buffer = -1; };
    2664:	8d e6       	ldi	r24, 0x6D	; 109
    2666:	91 e0       	ldi	r25, 0x01	; 1
    2668:	91 83       	std	Z+1, r25	; 0x01
    266a:	80 83       	st	Z, r24
    266c:	8f ef       	ldi	r24, 0xFF	; 255
    266e:	9f ef       	ldi	r25, 0xFF	; 255
    2670:	95 87       	std	Z+13, r25	; 0x0d
    2672:	84 87       	std	Z+12, r24	; 0x0c
    2674:	08 95       	ret

00002676 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2676:	08 95       	ret

00002678 <_ZN13PluggableUSB_12getInterfaceEPh>:
		_initEndpoints[lastEp] = node->endpointType[i];
		lastEp++;
	}
	return true;
	// restart USB layer???
}
    2678:	ef 92       	push	r14
    267a:	ff 92       	push	r15
    267c:	0f 93       	push	r16
    267e:	1f 93       	push	r17
    2680:	cf 93       	push	r28
    2682:	df 93       	push	r29
    2684:	7b 01       	movw	r14, r22
    2686:	fc 01       	movw	r30, r24
    2688:	c2 81       	ldd	r28, Z+2	; 0x02
    268a:	d3 81       	ldd	r29, Z+3	; 0x03
    268c:	00 e0       	ldi	r16, 0x00	; 0
    268e:	10 e0       	ldi	r17, 0x00	; 0
    2690:	20 97       	sbiw	r28, 0x00	; 0
    2692:	81 f0       	breq	.+32     	; 0x26b4 <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
    2694:	e8 81       	ld	r30, Y
    2696:	f9 81       	ldd	r31, Y+1	; 0x01
    2698:	02 80       	ldd	r0, Z+2	; 0x02
    269a:	f3 81       	ldd	r31, Z+3	; 0x03
    269c:	e0 2d       	mov	r30, r0
    269e:	b7 01       	movw	r22, r14
    26a0:	ce 01       	movw	r24, r28
    26a2:	09 95       	icall
    26a4:	97 fd       	sbrc	r25, 7
    26a6:	08 c0       	rjmp	.+16     	; 0x26b8 <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
    26a8:	08 0f       	add	r16, r24
    26aa:	19 1f       	adc	r17, r25
    26ac:	08 84       	ldd	r0, Y+8	; 0x08
    26ae:	d9 85       	ldd	r29, Y+9	; 0x09
    26b0:	c0 2d       	mov	r28, r0
    26b2:	ee cf       	rjmp	.-36     	; 0x2690 <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    26b4:	c8 01       	movw	r24, r16
    26b6:	02 c0       	rjmp	.+4      	; 0x26bc <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
    26b8:	8f ef       	ldi	r24, 0xFF	; 255
    26ba:	9f ef       	ldi	r25, 0xFF	; 255
    26bc:	df 91       	pop	r29
    26be:	cf 91       	pop	r28
    26c0:	1f 91       	pop	r17
    26c2:	0f 91       	pop	r16
    26c4:	ff 90       	pop	r15
    26c6:	ef 90       	pop	r14
    26c8:	08 95       	ret

000026ca <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    26ca:	0f 93       	push	r16
    26cc:	1f 93       	push	r17
    26ce:	cf 93       	push	r28
    26d0:	df 93       	push	r29
    26d2:	8b 01       	movw	r16, r22
    26d4:	fc 01       	movw	r30, r24
    26d6:	c2 81       	ldd	r28, Z+2	; 0x02
    26d8:	d3 81       	ldd	r29, Z+3	; 0x03
    26da:	20 97       	sbiw	r28, 0x00	; 0
    26dc:	71 f0       	breq	.+28     	; 0x26fa <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
    26de:	e8 81       	ld	r30, Y
    26e0:	f9 81       	ldd	r31, Y+1	; 0x01
    26e2:	04 80       	ldd	r0, Z+4	; 0x04
    26e4:	f5 81       	ldd	r31, Z+5	; 0x05
    26e6:	e0 2d       	mov	r30, r0
    26e8:	b8 01       	movw	r22, r16
    26ea:	ce 01       	movw	r24, r28
    26ec:	09 95       	icall
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	31 f4       	brne	.+12     	; 0x26fe <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
    26f2:	08 84       	ldd	r0, Y+8	; 0x08
    26f4:	d9 85       	ldd	r29, Y+9	; 0x09
    26f6:	c0 2d       	mov	r28, r0
    26f8:	f0 cf       	rjmp	.-32     	; 0x26da <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	df 91       	pop	r29
    2700:	cf 91       	pop	r28
    2702:	1f 91       	pop	r17
    2704:	0f 91       	pop	r16
    2706:	08 95       	ret

00002708 <_ZN13PluggableUSB_12getShortNameEPc>:
    2708:	0f 93       	push	r16
    270a:	1f 93       	push	r17
    270c:	cf 93       	push	r28
    270e:	df 93       	push	r29
    2710:	8b 01       	movw	r16, r22
    2712:	fc 01       	movw	r30, r24
    2714:	c2 81       	ldd	r28, Z+2	; 0x02
    2716:	d3 81       	ldd	r29, Z+3	; 0x03
    2718:	20 97       	sbiw	r28, 0x00	; 0
    271a:	71 f0       	breq	.+28     	; 0x2738 <_ZN13PluggableUSB_12getShortNameEPc+0x30>
    271c:	e8 81       	ld	r30, Y
    271e:	f9 81       	ldd	r31, Y+1	; 0x01
    2720:	06 80       	ldd	r0, Z+6	; 0x06
    2722:	f7 81       	ldd	r31, Z+7	; 0x07
    2724:	e0 2d       	mov	r30, r0
    2726:	b8 01       	movw	r22, r16
    2728:	ce 01       	movw	r24, r28
    272a:	09 95       	icall
    272c:	08 0f       	add	r16, r24
    272e:	11 1d       	adc	r17, r1
    2730:	08 84       	ldd	r0, Y+8	; 0x08
    2732:	d9 85       	ldd	r29, Y+9	; 0x09
    2734:	c0 2d       	mov	r28, r0
    2736:	f0 cf       	rjmp	.-32     	; 0x2718 <_ZN13PluggableUSB_12getShortNameEPc+0x10>
    2738:	f8 01       	movw	r30, r16
    273a:	10 82       	st	Z, r1
    273c:	df 91       	pop	r29
    273e:	cf 91       	pop	r28
    2740:	1f 91       	pop	r17
    2742:	0f 91       	pop	r16
    2744:	08 95       	ret

00002746 <_ZN13PluggableUSB_5setupER8USBSetup>:
    2746:	0f 93       	push	r16
    2748:	1f 93       	push	r17
    274a:	cf 93       	push	r28
    274c:	df 93       	push	r29
    274e:	8b 01       	movw	r16, r22
    2750:	fc 01       	movw	r30, r24
    2752:	c2 81       	ldd	r28, Z+2	; 0x02
    2754:	d3 81       	ldd	r29, Z+3	; 0x03
    2756:	20 97       	sbiw	r28, 0x00	; 0
    2758:	71 f0       	breq	.+28     	; 0x2776 <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
    275a:	e8 81       	ld	r30, Y
    275c:	f9 81       	ldd	r31, Y+1	; 0x01
    275e:	01 90       	ld	r0, Z+
    2760:	f0 81       	ld	r31, Z
    2762:	e0 2d       	mov	r30, r0
    2764:	b8 01       	movw	r22, r16
    2766:	ce 01       	movw	r24, r28
    2768:	09 95       	icall
    276a:	81 11       	cpse	r24, r1
    276c:	05 c0       	rjmp	.+10     	; 0x2778 <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
    276e:	08 84       	ldd	r0, Y+8	; 0x08
    2770:	d9 85       	ldd	r29, Y+9	; 0x09
    2772:	c0 2d       	mov	r28, r0
    2774:	f0 cf       	rjmp	.-32     	; 0x2756 <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	df 91       	pop	r29
    277a:	cf 91       	pop	r28
    277c:	1f 91       	pop	r17
    277e:	0f 91       	pop	r16
    2780:	08 95       	ret

00002782 <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    2782:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <_ZGVZ12PluggableUSBvE3obj>
    2786:	81 11       	cpse	r24, r1
    2788:	0d c0       	rjmp	.+26     	; 0x27a4 <_Z12PluggableUSBv+0x22>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    278a:	82 e0       	ldi	r24, 0x02	; 2
    278c:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <_ZZ12PluggableUSBvE3obj>
    2790:	84 e0       	ldi	r24, 0x04	; 4
    2792:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <_ZZ12PluggableUSBvE3obj+0x1>
    2796:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <_ZZ12PluggableUSBvE3obj+0x3>
    279a:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <_ZZ12PluggableUSBvE3obj+0x2>
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <_ZGVZ12PluggableUSBvE3obj>
	return obj;
}
    27a4:	83 ed       	ldi	r24, 0xD3	; 211
    27a6:	92 e0       	ldi	r25, 0x02	; 2
    27a8:	08 95       	ret

000027aa <__udivmodsi4>:
    27aa:	a1 e2       	ldi	r26, 0x21	; 33
    27ac:	1a 2e       	mov	r1, r26
    27ae:	aa 1b       	sub	r26, r26
    27b0:	bb 1b       	sub	r27, r27
    27b2:	fd 01       	movw	r30, r26
    27b4:	0d c0       	rjmp	.+26     	; 0x27d0 <__udivmodsi4_ep>

000027b6 <__udivmodsi4_loop>:
    27b6:	aa 1f       	adc	r26, r26
    27b8:	bb 1f       	adc	r27, r27
    27ba:	ee 1f       	adc	r30, r30
    27bc:	ff 1f       	adc	r31, r31
    27be:	a2 17       	cp	r26, r18
    27c0:	b3 07       	cpc	r27, r19
    27c2:	e4 07       	cpc	r30, r20
    27c4:	f5 07       	cpc	r31, r21
    27c6:	20 f0       	brcs	.+8      	; 0x27d0 <__udivmodsi4_ep>
    27c8:	a2 1b       	sub	r26, r18
    27ca:	b3 0b       	sbc	r27, r19
    27cc:	e4 0b       	sbc	r30, r20
    27ce:	f5 0b       	sbc	r31, r21

000027d0 <__udivmodsi4_ep>:
    27d0:	66 1f       	adc	r22, r22
    27d2:	77 1f       	adc	r23, r23
    27d4:	88 1f       	adc	r24, r24
    27d6:	99 1f       	adc	r25, r25
    27d8:	1a 94       	dec	r1
    27da:	69 f7       	brne	.-38     	; 0x27b6 <__udivmodsi4_loop>
    27dc:	60 95       	com	r22
    27de:	70 95       	com	r23
    27e0:	80 95       	com	r24
    27e2:	90 95       	com	r25
    27e4:	9b 01       	movw	r18, r22
    27e6:	ac 01       	movw	r20, r24
    27e8:	bd 01       	movw	r22, r26
    27ea:	cf 01       	movw	r24, r30
    27ec:	08 95       	ret

000027ee <__tablejump2__>:
    27ee:	ee 0f       	add	r30, r30
    27f0:	ff 1f       	adc	r31, r31
    27f2:	05 90       	lpm	r0, Z+
    27f4:	f4 91       	lpm	r31, Z
    27f6:	e0 2d       	mov	r30, r0
    27f8:	09 94       	ijmp

000027fa <abort>:
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	f8 94       	cli
    2800:	0c 94 02 14 	jmp	0x2804	; 0x2804 <_exit>

00002804 <_exit>:
    2804:	f8 94       	cli

00002806 <__stop_program>:
    2806:	ff cf       	rjmp	.-2      	; 0x2806 <__stop_program>
