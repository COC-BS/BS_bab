
Projektarbeit_COC_BRA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000019a  00800100  0000424c  000042e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000424c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000026d  0080029a  0080029a  0000447a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000447a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000044ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b58  00000000  00000000  000044ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000186f4  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004114  00000000  00000000  0001d738  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000063a2  00000000  00000000  0002184c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000023d0  00000000  00000000  00027bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004f08  00000000  00000000  00029fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ca5e  00000000  00000000  0002eec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c48  00000000  00000000  0003b926  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__dtors_end>
       4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      10:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      14:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      18:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      1c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      20:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      24:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      28:	0c 94 2f 19 	jmp	0x325e	; 0x325e <__vector_10>
      2c:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__vector_11>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      34:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      38:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      3c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      40:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      44:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      48:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      4c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      50:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      54:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      58:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      5c:	0c 94 c3 19 	jmp	0x3386	; 0x3386 <__vector_23>
      60:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      64:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      68:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      6c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      70:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      74:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      78:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      7c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      80:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      84:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      88:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      8c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      90:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__vector_36>
      94:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      98:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      9c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ac:	24 1b       	sub	r18, r20
      ae:	27 1b       	sub	r18, r23
      b0:	16 1b       	sub	r17, r22
      b2:	1a 1b       	sub	r17, r26
      b4:	20 1b       	sub	r18, r16
      b6:	48 1b       	sub	r20, r24
      b8:	48 1b       	sub	r20, r24
      ba:	48 1b       	sub	r20, r24
      bc:	2b 1b       	sub	r18, r27
      be:	2f 1b       	sub	r18, r31
      c0:	33 1b       	sub	r19, r19
      c2:	39 1b       	sub	r19, r25
      c4:	3d 1b       	sub	r19, r29
      c6:	48 1b       	sub	r20, r24
      c8:	43 1b       	sub	r20, r19

000000ca <USB_DeviceDescriptorIAD>:
      ca:	12 01 00 02 ef 02 01 40 41 23 36 80 00 01 01 02     .......@A#6.....
      da:	03 01                                               ..

000000dc <STRING_MANUFACTURER>:
      dc:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

000000e8 <STRING_PRODUCT>:
      e8:	41 72 64 75 69 6e 6f 20 4c 65 6f 6e 61 72 64 6f     Arduino Leonardo
	...

000000f9 <STRING_LANGUAGE>:
      f9:	04 03 09 04                                         ....

000000fd <analog_pin_to_channel_PGM>:
      fd:	07 06 05 04 01 00 08 0a 0b 0c 0d 09                 ............

00000109 <digital_pin_to_timer_PGM>:
     109:	00 00 00 02 00 09 0f 00 00 03 04 01 00 0c 00 00     ................
	...

00000128 <digital_pin_to_bit_mask_PGM>:
     128:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     138:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

00000147 <digital_pin_to_port_PGM>:
     147:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     157:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

00000166 <port_to_input_PGM>:
     166:	00 00 00 00 23 00 26 00 29 00 2c 00 2f 00           ....#.&.).,./.

00000174 <port_to_output_PGM>:
     174:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

00000182 <port_to_mode_PGM>:
     182:	00 00 00 00 24 00 27 00 2a 00 2d 00 30 00           ....$.'.*.-.0.

00000190 <_cdcInterface>:
     190:	08 0b 00 02 02 02 01 00 09 04 00 00 01 02 02 00     ................
     1a0:	00 05 24 00 10 01 05 24 01 01 01 04 24 02 06 05     ..$....$....$...
     1b0:	24 06 00 01 07 05 81 03 10 00 40 09 04 01 00 02     $.........@.....
     1c0:	0a 00 00 00 07 05 02 02 40 00 00 07 05 83 02 40     ........@......@
	...

000001d2 <__ctors_start>:
     1d2:	36 06       	cpc	r3, r22
     1d4:	01 12       	cpse	r0, r17
     1d6:	3c 1d       	adc	r19, r12

000001d8 <__ctors_end>:
     1d8:	6d 07       	cpc	r22, r29

000001da <__dtors_end>:
     1da:	11 24       	eor	r1, r1
     1dc:	1f be       	out	0x3f, r1	; 63
     1de:	cf ef       	ldi	r28, 0xFF	; 255
     1e0:	da e0       	ldi	r29, 0x0A	; 10
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	cd bf       	out	0x3d, r28	; 61

000001e6 <__do_copy_data>:
     1e6:	12 e0       	ldi	r17, 0x02	; 2
     1e8:	a0 e0       	ldi	r26, 0x00	; 0
     1ea:	b1 e0       	ldi	r27, 0x01	; 1
     1ec:	ec e4       	ldi	r30, 0x4C	; 76
     1ee:	f2 e4       	ldi	r31, 0x42	; 66
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <__do_copy_data+0x10>
     1f2:	05 90       	lpm	r0, Z+
     1f4:	0d 92       	st	X+, r0
     1f6:	aa 39       	cpi	r26, 0x9A	; 154
     1f8:	b1 07       	cpc	r27, r17
     1fa:	d9 f7       	brne	.-10     	; 0x1f2 <__do_copy_data+0xc>

000001fc <__do_clear_bss>:
     1fc:	25 e0       	ldi	r18, 0x05	; 5
     1fe:	aa e9       	ldi	r26, 0x9A	; 154
     200:	b2 e0       	ldi	r27, 0x02	; 2
     202:	01 c0       	rjmp	.+2      	; 0x206 <.do_clear_bss_start>

00000204 <.do_clear_bss_loop>:
     204:	1d 92       	st	X+, r1

00000206 <.do_clear_bss_start>:
     206:	a7 30       	cpi	r26, 0x07	; 7
     208:	b2 07       	cpc	r27, r18
     20a:	e1 f7       	brne	.-8      	; 0x204 <.do_clear_bss_loop>

0000020c <__do_global_ctors>:
     20c:	10 e0       	ldi	r17, 0x00	; 0
     20e:	cc ee       	ldi	r28, 0xEC	; 236
     210:	d0 e0       	ldi	r29, 0x00	; 0
     212:	04 c0       	rjmp	.+8      	; 0x21c <__do_global_ctors+0x10>
     214:	21 97       	sbiw	r28, 0x01	; 1
     216:	fe 01       	movw	r30, r28
     218:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <__tablejump2__>
     21c:	c9 3e       	cpi	r28, 0xE9	; 233
     21e:	d1 07       	cpc	r29, r17
     220:	c9 f7       	brne	.-14     	; 0x214 <__do_global_ctors+0x8>
     222:	0e 94 99 13 	call	0x2732	; 0x2732 <main>
     226:	0c 94 19 21 	jmp	0x4232	; 0x4232 <__do_global_dtors>

0000022a <__bad_interrupt>:
     22a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022e <_Z6getkeyv>:
 */
int getkey(void)
{
	static int keys[NUMKEYS+1];
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <analogRead>

	if (val > 1020) { // no key pressed
     234:	8d 3f       	cpi	r24, 0xFD	; 253
     236:	23 e0       	ldi	r18, 0x03	; 3
     238:	92 07       	cpc	r25, r18
     23a:	20 f1       	brcs	.+72     	; 0x284 <_Z6getkeyv+0x56>
		if (++keys[0] > NOPRESS) {
     23c:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <__data_end>
     240:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <__data_end+0x1>
     244:	01 96       	adiw	r24, 0x01	; 1
     246:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <__data_end+0x1>
     24a:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <__data_end>
     24e:	03 97       	sbiw	r24, 0x03	; 3
     250:	0c f4       	brge	.+2      	; 0x254 <_Z6getkeyv+0x26>
     252:	6a c0       	rjmp	.+212    	; 0x328 <_Z6getkeyv+0xfa>
     254:	ea e9       	ldi	r30, 0x9A	; 154
     256:	f2 e0       	ldi	r31, 0x02	; 2
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	90 e0       	ldi	r25, 0x00	; 0
			for(uint8_t i = 0; i <= NUMKEYS; i++){
				if(keys[i] > KEYPRESS){
     260:	40 81       	ld	r20, Z
     262:	51 81       	ldd	r21, Z+1	; 0x01
     264:	44 30       	cpi	r20, 0x04	; 4
     266:	51 05       	cpc	r21, r1
     268:	2c f0       	brlt	.+10     	; 0x274 <_Z6getkeyv+0x46>
     26a:	c9 01       	movw	r24, r18
					data = i;
					if(keys[i] > LONGPRESS) data += 5;
     26c:	49 3c       	cpi	r20, 0xC9	; 201
     26e:	51 05       	cpc	r21, r1
     270:	0c f0       	brlt	.+2      	; 0x274 <_Z6getkeyv+0x46>
     272:	05 96       	adiw	r24, 0x05	; 5
				}
				keys[i] = 0;
     274:	11 92       	st	Z+, r1
     276:	11 92       	st	Z+, r1
     278:	2f 5f       	subi	r18, 0xFF	; 255
     27a:	3f 4f       	sbci	r19, 0xFF	; 255
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);

	if (val > 1020) { // no key pressed
		if (++keys[0] > NOPRESS) {
			for(uint8_t i = 0; i <= NUMKEYS; i++){
     27c:	26 30       	cpi	r18, 0x06	; 6
     27e:	31 05       	cpc	r19, r1
     280:	79 f7       	brne	.-34     	; 0x260 <_Z6getkeyv+0x32>
     282:	08 95       	ret
			}
		}
		else data = 0;
	}
	else {
		if (val < S1_LIMIT && keys[1] < 32000) ++keys[1]; // key1 pressed
     284:	89 34       	cpi	r24, 0x49	; 73
     286:	91 05       	cpc	r25, r1
     288:	70 f4       	brcc	.+28     	; 0x2a6 <_Z6getkeyv+0x78>
     28a:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <__data_end+0x2>
     28e:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <__data_end+0x3>
     292:	81 15       	cp	r24, r1
     294:	2d e7       	ldi	r18, 0x7D	; 125
     296:	92 07       	cpc	r25, r18
     298:	4c f4       	brge	.+18     	; 0x2ac <_Z6getkeyv+0x7e>
     29a:	01 96       	adiw	r24, 0x01	; 1
     29c:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <__data_end+0x3>
     2a0:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <__data_end+0x2>
     2a4:	41 c0       	rjmp	.+130    	; 0x328 <_Z6getkeyv+0xfa>
		else if (val < S2_LIMIT && keys[2] < 32000) ++keys[2]; //key2 pressed
     2a6:	8e 3e       	cpi	r24, 0xEE	; 238
     2a8:	91 05       	cpc	r25, r1
     2aa:	70 f4       	brcc	.+28     	; 0x2c8 <_Z6getkeyv+0x9a>
     2ac:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <__data_end+0x4>
     2b0:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <__data_end+0x5>
     2b4:	81 15       	cp	r24, r1
     2b6:	2d e7       	ldi	r18, 0x7D	; 125
     2b8:	92 07       	cpc	r25, r18
     2ba:	54 f4       	brge	.+20     	; 0x2d0 <_Z6getkeyv+0xa2>
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <__data_end+0x5>
     2c2:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <__data_end+0x4>
     2c6:	30 c0       	rjmp	.+96     	; 0x328 <_Z6getkeyv+0xfa>
		else if (val < S3_LIMIT && keys[3] < 32000) ++keys[3]; //key3 pressed
     2c8:	82 3a       	cpi	r24, 0xA2	; 162
     2ca:	21 e0       	ldi	r18, 0x01	; 1
     2cc:	92 07       	cpc	r25, r18
     2ce:	70 f4       	brcc	.+28     	; 0x2ec <_Z6getkeyv+0xbe>
     2d0:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <__data_end+0x6>
     2d4:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <__data_end+0x7>
     2d8:	81 15       	cp	r24, r1
     2da:	2d e7       	ldi	r18, 0x7D	; 125
     2dc:	92 07       	cpc	r25, r18
     2de:	4c f4       	brge	.+18     	; 0x2f2 <_Z6getkeyv+0xc4>
     2e0:	01 96       	adiw	r24, 0x01	; 1
     2e2:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <__data_end+0x7>
     2e6:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <__data_end+0x6>
     2ea:	1e c0       	rjmp	.+60     	; 0x328 <_Z6getkeyv+0xfa>
		else if (val < S4_LIMIT && keys[4] < 32000) ++keys[4]; //key4 pressed
     2ec:	80 37       	cpi	r24, 0x70	; 112
     2ee:	92 40       	sbci	r25, 0x02	; 2
     2f0:	70 f4       	brcc	.+28     	; 0x30e <_Z6getkeyv+0xe0>
     2f2:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <__data_end+0x8>
     2f6:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <__data_end+0x9>
     2fa:	81 15       	cp	r24, r1
     2fc:	2d e7       	ldi	r18, 0x7D	; 125
     2fe:	92 07       	cpc	r25, r18
     300:	34 f4       	brge	.+12     	; 0x30e <_Z6getkeyv+0xe0>
     302:	01 96       	adiw	r24, 0x01	; 1
     304:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <__data_end+0x9>
     308:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <__data_end+0x8>
     30c:	0d c0       	rjmp	.+26     	; 0x328 <_Z6getkeyv+0xfa>
		else if ( keys[5] < 32000) ++keys[5]; // key5 pressed
     30e:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <__data_end+0xa>
     312:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <__data_end+0xb>
     316:	81 15       	cp	r24, r1
     318:	2d e7       	ldi	r18, 0x7D	; 125
     31a:	92 07       	cpc	r25, r18
     31c:	2c f4       	brge	.+10     	; 0x328 <_Z6getkeyv+0xfa>
     31e:	01 96       	adiw	r24, 0x01	; 1
     320:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <__data_end+0xb>
     324:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <__data_end+0xa>
		data = 0;
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
	}
	return data;
}
     32c:	08 95       	ret

0000032e <_ZN5Print17availableForWriteEv>:
void callibratePointer() 
{
	lcd.clear();
	lcd.print("Zeiger kalibrieren");
	delay(2000);
	lcd.clear();
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	08 95       	ret

00000334 <_ZN5Print5flushEv>:
     334:	08 95       	ret

00000336 <_ZN7hd4478013iosetContrastEh>:
     336:	8d ef       	ldi	r24, 0xFD	; 253
     338:	9f ef       	ldi	r25, 0xFF	; 255
     33a:	08 95       	ret

0000033c <_Z14chooseTimeZonev>:
     33c:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <timeZoneChoosen>
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	89 27       	eor	r24, r25
     344:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <timeZoneChoosen>
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	08 95       	ret

0000034e <_Z10changeAMPMv>:
     34e:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <ampm>
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	89 27       	eor	r24, r25
     356:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <ampm>
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	08 95       	ret

00000360 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>:
     360:	0f 93       	push	r16
     362:	1f 93       	push	r17
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
     368:	18 2f       	mov	r17, r24
     36a:	d0 e0       	ldi	r29, 0x00	; 0
     36c:	c0 e2       	ldi	r28, 0x20	; 32
     36e:	6c 2f       	mov	r22, r28
     370:	8d e3       	ldi	r24, 0x3D	; 61
     372:	94 e0       	ldi	r25, 0x04	; 4
     374:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN7TwoWire17beginTransmissionEh>
     378:	8d e3       	ldi	r24, 0x3D	; 61
     37a:	94 e0       	ldi	r25, 0x04	; 4
     37c:	0e 94 fe 11 	call	0x23fc	; 0x23fc <_ZN7TwoWire15endTransmissionEv>
     380:	08 2f       	mov	r16, r24
     382:	61 e0       	ldi	r22, 0x01	; 1
     384:	70 e0       	ldi	r23, 0x00	; 0
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	0e 94 3e 1a 	call	0x347c	; 0x347c <delay>
     38e:	01 11       	cpse	r16, r1
     390:	03 c0       	rjmp	.+6      	; 0x398 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x38>
     392:	1d 17       	cp	r17, r29
     394:	f9 f0       	breq	.+62     	; 0x3d4 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x74>
     396:	df 5f       	subi	r29, 0xFF	; 255
     398:	cf 5f       	subi	r28, 0xFF	; 255
     39a:	c8 32       	cpi	r28, 0x28	; 40
     39c:	41 f7       	brne	.-48     	; 0x36e <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0xe>
     39e:	c8 e3       	ldi	r28, 0x38	; 56
     3a0:	6c 2f       	mov	r22, r28
     3a2:	8d e3       	ldi	r24, 0x3D	; 61
     3a4:	94 e0       	ldi	r25, 0x04	; 4
     3a6:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN7TwoWire17beginTransmissionEh>
     3aa:	8d e3       	ldi	r24, 0x3D	; 61
     3ac:	94 e0       	ldi	r25, 0x04	; 4
     3ae:	0e 94 fe 11 	call	0x23fc	; 0x23fc <_ZN7TwoWire15endTransmissionEv>
     3b2:	08 2f       	mov	r16, r24
     3b4:	61 e0       	ldi	r22, 0x01	; 1
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 3e 1a 	call	0x347c	; 0x347c <delay>
     3c0:	01 11       	cpse	r16, r1
     3c2:	03 c0       	rjmp	.+6      	; 0x3ca <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x6a>
     3c4:	1d 17       	cp	r17, r29
     3c6:	31 f0       	breq	.+12     	; 0x3d4 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x74>
     3c8:	df 5f       	subi	r29, 0xFF	; 255
     3ca:	cf 5f       	subi	r28, 0xFF	; 255
     3cc:	c0 34       	cpi	r28, 0x40	; 64
     3ce:	41 f7       	brne	.-48     	; 0x3a0 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x40>
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x76>
     3d4:	8c 2f       	mov	r24, r28
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	08 95       	ret

000003e0 <_ZN7TwoWire5writeEi>:
     3e0:	dc 01       	movw	r26, r24
     3e2:	ed 91       	ld	r30, X+
     3e4:	fc 91       	ld	r31, X
     3e6:	01 90       	ld	r0, Z+
     3e8:	f0 81       	ld	r31, Z
     3ea:	e0 2d       	mov	r30, r0
     3ec:	09 94       	ijmp

000003ee <_ZN4Zeit4TickEv>:
     3ee:	fc 01       	movw	r30, r24
     3f0:	84 81       	ldd	r24, Z+4	; 0x04
     3f2:	95 81       	ldd	r25, Z+5	; 0x05
     3f4:	01 96       	adiw	r24, 0x01	; 1
     3f6:	2c e3       	ldi	r18, 0x3C	; 60
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	b9 01       	movw	r22, r18
     3fc:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <__divmodhi4>
     400:	95 83       	std	Z+5, r25	; 0x05
     402:	84 83       	std	Z+4, r24	; 0x04
     404:	89 2b       	or	r24, r25
     406:	19 f0       	breq	.+6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	08 95       	ret
     40e:	82 81       	ldd	r24, Z+2	; 0x02
     410:	93 81       	ldd	r25, Z+3	; 0x03
     412:	01 96       	adiw	r24, 0x01	; 1
     414:	b9 01       	movw	r22, r18
     416:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <__divmodhi4>
     41a:	93 83       	std	Z+3, r25	; 0x03
     41c:	82 83       	std	Z+2, r24	; 0x02
     41e:	89 2b       	or	r24, r25
     420:	99 f7       	brne	.-26     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	01 96       	adiw	r24, 0x01	; 1
     428:	68 e1       	ldi	r22, 0x18	; 24
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <__divmodhi4>
     430:	ac 01       	movw	r20, r24
     432:	91 83       	std	Z+1, r25	; 0x01
     434:	80 83       	st	Z, r24
     436:	21 e0       	ldi	r18, 0x01	; 1
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	45 2b       	or	r20, r21
     43c:	09 f0       	breq	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	82 2f       	mov	r24, r18
     442:	08 95       	ret

00000444 <_ZN5Datum11DaysOfMonthEv>:
     444:	fc 01       	movw	r30, r24
     446:	22 81       	ldd	r18, Z+2	; 0x02
     448:	33 81       	ldd	r19, Z+3	; 0x03
     44a:	26 30       	cpi	r18, 0x06	; 6
     44c:	31 05       	cpc	r19, r1
     44e:	d9 f0       	breq	.+54     	; 0x486 <_ZN5Datum11DaysOfMonthEv+0x42>
     450:	3c f4       	brge	.+14     	; 0x460 <_ZN5Datum11DaysOfMonthEv+0x1c>
     452:	22 30       	cpi	r18, 0x02	; 2
     454:	31 05       	cpc	r19, r1
     456:	69 f0       	breq	.+26     	; 0x472 <_ZN5Datum11DaysOfMonthEv+0x2e>
     458:	24 30       	cpi	r18, 0x04	; 4
     45a:	31 05       	cpc	r19, r1
     45c:	39 f4       	brne	.+14     	; 0x46c <_ZN5Datum11DaysOfMonthEv+0x28>
     45e:	13 c0       	rjmp	.+38     	; 0x486 <_ZN5Datum11DaysOfMonthEv+0x42>
     460:	29 30       	cpi	r18, 0x09	; 9
     462:	31 05       	cpc	r19, r1
     464:	81 f0       	breq	.+32     	; 0x486 <_ZN5Datum11DaysOfMonthEv+0x42>
     466:	2b 30       	cpi	r18, 0x0B	; 11
     468:	31 05       	cpc	r19, r1
     46a:	69 f0       	breq	.+26     	; 0x486 <_ZN5Datum11DaysOfMonthEv+0x42>
     46c:	8f e1       	ldi	r24, 0x1F	; 31
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	08 95       	ret
     472:	fc 01       	movw	r30, r24
     474:	80 81       	ld	r24, Z
     476:	91 81       	ldd	r25, Z+1	; 0x01
     478:	83 70       	andi	r24, 0x03	; 3
     47a:	99 27       	eor	r25, r25
     47c:	89 2b       	or	r24, r25
     47e:	31 f4       	brne	.+12     	; 0x48c <_ZN5Datum11DaysOfMonthEv+0x48>
     480:	8d e1       	ldi	r24, 0x1D	; 29
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	08 95       	ret
     486:	8e e1       	ldi	r24, 0x1E	; 30
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	08 95       	ret
     48c:	8c e1       	ldi	r24, 0x1C	; 28
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	08 95       	ret

00000492 <_ZN5Datum4TickEv>:
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	ec 01       	movw	r28, r24
     49c:	0c 81       	ldd	r16, Y+4	; 0x04
     49e:	1d 81       	ldd	r17, Y+5	; 0x05
     4a0:	0f 5f       	subi	r16, 0xFF	; 255
     4a2:	1f 4f       	sbci	r17, 0xFF	; 255
     4a4:	1d 83       	std	Y+5, r17	; 0x05
     4a6:	0c 83       	std	Y+4, r16	; 0x04
     4a8:	0e 94 22 02 	call	0x444	; 0x444 <_ZN5Datum11DaysOfMonthEv>
     4ac:	80 17       	cp	r24, r16
     4ae:	91 07       	cpc	r25, r17
     4b0:	a4 f4       	brge	.+40     	; 0x4da <_ZN5Datum4TickEv+0x48>
     4b2:	21 e0       	ldi	r18, 0x01	; 1
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	3d 83       	std	Y+5, r19	; 0x05
     4b8:	2c 83       	std	Y+4, r18	; 0x04
     4ba:	8a 81       	ldd	r24, Y+2	; 0x02
     4bc:	9b 81       	ldd	r25, Y+3	; 0x03
     4be:	01 96       	adiw	r24, 0x01	; 1
     4c0:	8d 30       	cpi	r24, 0x0D	; 13
     4c2:	91 05       	cpc	r25, r1
     4c4:	1c f4       	brge	.+6      	; 0x4cc <_ZN5Datum4TickEv+0x3a>
     4c6:	9b 83       	std	Y+3, r25	; 0x03
     4c8:	8a 83       	std	Y+2, r24	; 0x02
     4ca:	07 c0       	rjmp	.+14     	; 0x4da <_ZN5Datum4TickEv+0x48>
     4cc:	3b 83       	std	Y+3, r19	; 0x03
     4ce:	2a 83       	std	Y+2, r18	; 0x02
     4d0:	88 81       	ld	r24, Y
     4d2:	99 81       	ldd	r25, Y+1	; 0x01
     4d4:	01 96       	adiw	r24, 0x01	; 1
     4d6:	99 83       	std	Y+1, r25	; 0x01
     4d8:	88 83       	st	Y, r24
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	1f 91       	pop	r17
     4e0:	0f 91       	pop	r16
     4e2:	08 95       	ret

000004e4 <_Z5Watchv>:
     4e4:	0f 93       	push	r16
     4e6:	1f 93       	push	r17
     4e8:	0e 94 0d 1a 	call	0x341a	; 0x341a <millis>
     4ec:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZZ5WatchvE6target>
     4f0:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZZ5WatchvE6target+0x1>
     4f4:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <_ZZ5WatchvE6target+0x2>
     4f8:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <_ZZ5WatchvE6target+0x3>
     4fc:	06 17       	cp	r16, r22
     4fe:	17 07       	cpc	r17, r23
     500:	28 07       	cpc	r18, r24
     502:	39 07       	cpc	r19, r25
     504:	70 f5       	brcc	.+92     	; 0x562 <_Z5Watchv+0x7e>
     506:	d9 01       	movw	r26, r18
     508:	c8 01       	movw	r24, r16
     50a:	88 51       	subi	r24, 0x18	; 24
     50c:	9c 4f       	sbci	r25, 0xFC	; 252
     50e:	af 4f       	sbci	r26, 0xFF	; 255
     510:	bf 4f       	sbci	r27, 0xFF	; 255
     512:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZZ5WatchvE6target>
     516:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZZ5WatchvE6target+0x1>
     51a:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_ZZ5WatchvE6target+0x2>
     51e:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_ZZ5WatchvE6target+0x3>
     522:	84 ed       	ldi	r24, 0xD4	; 212
     524:	92 e0       	ldi	r25, 0x02	; 2
     526:	0e 94 f7 01 	call	0x3ee	; 0x3ee <_ZN4Zeit4TickEv>
     52a:	89 2b       	or	r24, r25
     52c:	21 f0       	breq	.+8      	; 0x536 <_Z5Watchv+0x52>
     52e:	8c eb       	ldi	r24, 0xBC	; 188
     530:	92 e0       	ldi	r25, 0x02	; 2
     532:	0e 94 49 02 	call	0x492	; 0x492 <_ZN5Datum4TickEv>
     536:	8c ec       	ldi	r24, 0xCC	; 204
     538:	92 e0       	ldi	r25, 0x02	; 2
     53a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <_ZN4Zeit4TickEv>
     53e:	89 2b       	or	r24, r25
     540:	21 f0       	breq	.+8      	; 0x54a <_Z5Watchv+0x66>
     542:	84 eb       	ldi	r24, 0xB4	; 180
     544:	92 e0       	ldi	r25, 0x02	; 2
     546:	0e 94 49 02 	call	0x492	; 0x492 <_ZN5Datum4TickEv>
     54a:	84 ec       	ldi	r24, 0xC4	; 196
     54c:	92 e0       	ldi	r25, 0x02	; 2
     54e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <_ZN4Zeit4TickEv>
     552:	89 2b       	or	r24, r25
     554:	31 f0       	breq	.+12     	; 0x562 <_Z5Watchv+0x7e>
     556:	8c ea       	ldi	r24, 0xAC	; 172
     558:	92 e0       	ldi	r25, 0x02	; 2
     55a:	1f 91       	pop	r17
     55c:	0f 91       	pop	r16
     55e:	0c 94 49 02 	jmp	0x492	; 0x492 <_ZN5Datum4TickEv>
     562:	1f 91       	pop	r17
     564:	0f 91       	pop	r16
     566:	08 95       	ret

00000568 <_Z11printhhmmssR4Zeit>:
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	8c 01       	movw	r16, r24
     572:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <ampm>
     576:	f8 01       	movw	r30, r16
     578:	c0 81       	ld	r28, Z
     57a:	d1 81       	ldd	r29, Z+1	; 0x01
     57c:	88 23       	and	r24, r24
     57e:	89 f0       	breq	.+34     	; 0x5a2 <_Z11printhhmmssR4Zeit+0x3a>
     580:	cd 30       	cpi	r28, 0x0D	; 13
     582:	d1 05       	cpc	r29, r1
     584:	0c f0       	brlt	.+2      	; 0x588 <_Z11printhhmmssR4Zeit+0x20>
     586:	2c 97       	sbiw	r28, 0x0c	; 12
     588:	ca 30       	cpi	r28, 0x0A	; 10
     58a:	d1 05       	cpc	r29, r1
     58c:	34 f4       	brge	.+12     	; 0x59a <_Z11printhhmmssR4Zeit+0x32>
     58e:	6f e1       	ldi	r22, 0x1F	; 31
     590:	71 e0       	ldi	r23, 0x01	; 1
     592:	82 ea       	ldi	r24, 0xA2	; 162
     594:	93 e0       	ldi	r25, 0x03	; 3
     596:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <_ZN5Print5printEPKc>
     59a:	4a e0       	ldi	r20, 0x0A	; 10
     59c:	50 e0       	ldi	r21, 0x00	; 0
     59e:	be 01       	movw	r22, r28
     5a0:	0d c0       	rjmp	.+26     	; 0x5bc <_Z11printhhmmssR4Zeit+0x54>
     5a2:	2a 97       	sbiw	r28, 0x0a	; 10
     5a4:	34 f4       	brge	.+12     	; 0x5b2 <_Z11printhhmmssR4Zeit+0x4a>
     5a6:	6f e1       	ldi	r22, 0x1F	; 31
     5a8:	71 e0       	ldi	r23, 0x01	; 1
     5aa:	82 ea       	ldi	r24, 0xA2	; 162
     5ac:	93 e0       	ldi	r25, 0x03	; 3
     5ae:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <_ZN5Print5printEPKc>
     5b2:	f8 01       	movw	r30, r16
     5b4:	60 81       	ld	r22, Z
     5b6:	71 81       	ldd	r23, Z+1	; 0x01
     5b8:	4a e0       	ldi	r20, 0x0A	; 10
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	82 ea       	ldi	r24, 0xA2	; 162
     5be:	93 e0       	ldi	r25, 0x03	; 3
     5c0:	0e 94 a6 14 	call	0x294c	; 0x294c <_ZN5Print5printEii>
     5c4:	f8 01       	movw	r30, r16
     5c6:	82 81       	ldd	r24, Z+2	; 0x02
     5c8:	93 81       	ldd	r25, Z+3	; 0x03
     5ca:	0a 97       	sbiw	r24, 0x0a	; 10
     5cc:	1c f4       	brge	.+6      	; 0x5d4 <_Z11printhhmmssR4Zeit+0x6c>
     5ce:	6e e1       	ldi	r22, 0x1E	; 30
     5d0:	71 e0       	ldi	r23, 0x01	; 1
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <_Z11printhhmmssR4Zeit+0x70>
     5d4:	61 e2       	ldi	r22, 0x21	; 33
     5d6:	71 e0       	ldi	r23, 0x01	; 1
     5d8:	82 ea       	ldi	r24, 0xA2	; 162
     5da:	93 e0       	ldi	r25, 0x03	; 3
     5dc:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <_ZN5Print5printEPKc>
     5e0:	f8 01       	movw	r30, r16
     5e2:	62 81       	ldd	r22, Z+2	; 0x02
     5e4:	73 81       	ldd	r23, Z+3	; 0x03
     5e6:	4a e0       	ldi	r20, 0x0A	; 10
     5e8:	50 e0       	ldi	r21, 0x00	; 0
     5ea:	82 ea       	ldi	r24, 0xA2	; 162
     5ec:	93 e0       	ldi	r25, 0x03	; 3
     5ee:	0e 94 a6 14 	call	0x294c	; 0x294c <_ZN5Print5printEii>
     5f2:	f8 01       	movw	r30, r16
     5f4:	84 81       	ldd	r24, Z+4	; 0x04
     5f6:	95 81       	ldd	r25, Z+5	; 0x05
     5f8:	0a 97       	sbiw	r24, 0x0a	; 10
     5fa:	1c f4       	brge	.+6      	; 0x602 <_Z11printhhmmssR4Zeit+0x9a>
     5fc:	6e e1       	ldi	r22, 0x1E	; 30
     5fe:	71 e0       	ldi	r23, 0x01	; 1
     600:	02 c0       	rjmp	.+4      	; 0x606 <_Z11printhhmmssR4Zeit+0x9e>
     602:	61 e2       	ldi	r22, 0x21	; 33
     604:	71 e0       	ldi	r23, 0x01	; 1
     606:	82 ea       	ldi	r24, 0xA2	; 162
     608:	93 e0       	ldi	r25, 0x03	; 3
     60a:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <_ZN5Print5printEPKc>
     60e:	f8 01       	movw	r30, r16
     610:	64 81       	ldd	r22, Z+4	; 0x04
     612:	75 81       	ldd	r23, Z+5	; 0x05
     614:	4a e0       	ldi	r20, 0x0A	; 10
     616:	50 e0       	ldi	r21, 0x00	; 0
     618:	82 ea       	ldi	r24, 0xA2	; 162
     61a:	93 e0       	ldi	r25, 0x03	; 3
     61c:	0e 94 a6 14 	call	0x294c	; 0x294c <_ZN5Print5printEii>
     620:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <ampm>
     624:	88 23       	and	r24, r24
     626:	91 f0       	breq	.+36     	; 0x64c <_Z11printhhmmssR4Zeit+0xe4>
     628:	f8 01       	movw	r30, r16
     62a:	80 81       	ld	r24, Z
     62c:	91 81       	ldd	r25, Z+1	; 0x01
     62e:	0d 97       	sbiw	r24, 0x0d	; 13
     630:	1c f0       	brlt	.+6      	; 0x638 <_Z11printhhmmssR4Zeit+0xd0>
     632:	63 e2       	ldi	r22, 0x23	; 35
     634:	71 e0       	ldi	r23, 0x01	; 1
     636:	02 c0       	rjmp	.+4      	; 0x63c <_Z11printhhmmssR4Zeit+0xd4>
     638:	67 e2       	ldi	r22, 0x27	; 39
     63a:	71 e0       	ldi	r23, 0x01	; 1
     63c:	82 ea       	ldi	r24, 0xA2	; 162
     63e:	93 e0       	ldi	r25, 0x03	; 3
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	0c 94 f9 13 	jmp	0x27f2	; 0x27f2 <_ZN5Print5printEPKc>
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	1f 91       	pop	r17
     652:	0f 91       	pop	r16
     654:	08 95       	ret

00000656 <_Z13printddmmyyyyR5Datum>:
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	ec 01       	movw	r28, r24
     65c:	8c 81       	ldd	r24, Y+4	; 0x04
     65e:	9d 81       	ldd	r25, Y+5	; 0x05
     660:	0a 97       	sbiw	r24, 0x0a	; 10
     662:	34 f4       	brge	.+12     	; 0x670 <_Z13printddmmyyyyR5Datum+0x1a>
     664:	61 e4       	ldi	r22, 0x41	; 65
     666:	71 e0       	ldi	r23, 0x01	; 1
     668:	82 ea       	ldi	r24, 0xA2	; 162
     66a:	93 e0       	ldi	r25, 0x03	; 3
     66c:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <_ZN5Print5printEPKc>
     670:	6c 81       	ldd	r22, Y+4	; 0x04
     672:	7d 81       	ldd	r23, Y+5	; 0x05
     674:	4a e0       	ldi	r20, 0x0A	; 10
     676:	50 e0       	ldi	r21, 0x00	; 0
     678:	82 ea       	ldi	r24, 0xA2	; 162
     67a:	93 e0       	ldi	r25, 0x03	; 3
     67c:	0e 94 a6 14 	call	0x294c	; 0x294c <_ZN5Print5printEii>
     680:	8a 81       	ldd	r24, Y+2	; 0x02
     682:	9b 81       	ldd	r25, Y+3	; 0x03
     684:	0a 97       	sbiw	r24, 0x0a	; 10
     686:	1c f4       	brge	.+6      	; 0x68e <_Z13printddmmyyyyR5Datum+0x38>
     688:	6b e2       	ldi	r22, 0x2B	; 43
     68a:	71 e0       	ldi	r23, 0x01	; 1
     68c:	02 c0       	rjmp	.+4      	; 0x692 <_Z13printddmmyyyyR5Datum+0x3c>
     68e:	6e e2       	ldi	r22, 0x2E	; 46
     690:	71 e0       	ldi	r23, 0x01	; 1
     692:	82 ea       	ldi	r24, 0xA2	; 162
     694:	93 e0       	ldi	r25, 0x03	; 3
     696:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <_ZN5Print5printEPKc>
     69a:	6a 81       	ldd	r22, Y+2	; 0x02
     69c:	7b 81       	ldd	r23, Y+3	; 0x03
     69e:	4a e0       	ldi	r20, 0x0A	; 10
     6a0:	50 e0       	ldi	r21, 0x00	; 0
     6a2:	82 ea       	ldi	r24, 0xA2	; 162
     6a4:	93 e0       	ldi	r25, 0x03	; 3
     6a6:	0e 94 a6 14 	call	0x294c	; 0x294c <_ZN5Print5printEii>
     6aa:	6e e2       	ldi	r22, 0x2E	; 46
     6ac:	71 e0       	ldi	r23, 0x01	; 1
     6ae:	82 ea       	ldi	r24, 0xA2	; 162
     6b0:	93 e0       	ldi	r25, 0x03	; 3
     6b2:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <_ZN5Print5printEPKc>
     6b6:	68 81       	ld	r22, Y
     6b8:	79 81       	ldd	r23, Y+1	; 0x01
     6ba:	4a e0       	ldi	r20, 0x0A	; 10
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	82 ea       	ldi	r24, 0xA2	; 162
     6c0:	93 e0       	ldi	r25, 0x03	; 3
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	0c 94 a6 14 	jmp	0x294c	; 0x294c <_ZN5Print5printEii>

000006ca <_Z15dateAlarmScreeni>:
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	ec 01       	movw	r28, r24
     6d0:	40 e0       	ldi	r20, 0x00	; 0
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	82 ea       	ldi	r24, 0xA2	; 162
     6d6:	93 e0       	ldi	r25, 0x03	; 3
     6d8:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN7hd447809setCursorEhh>
     6dc:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <timeZoneChoosen>
     6e0:	88 23       	and	r24, r24
     6e2:	d9 f0       	breq	.+54     	; 0x71a <_Z15dateAlarmScreeni+0x50>
     6e4:	84 eb       	ldi	r24, 0xB4	; 180
     6e6:	92 e0       	ldi	r25, 0x02	; 2
     6e8:	0e 94 2b 03 	call	0x656	; 0x656 <_Z13printddmmyyyyR5Datum>
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	6d e0       	ldi	r22, 0x0D	; 13
     6f0:	82 ea       	ldi	r24, 0xA2	; 162
     6f2:	93 e0       	ldi	r25, 0x03	; 3
     6f4:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN7hd447809setCursorEhh>
     6f8:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <tz>
     6fc:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <tz+0x1>
     700:	2e e0       	ldi	r18, 0x0E	; 14
     702:	28 9f       	mul	r18, r24
     704:	b0 01       	movw	r22, r0
     706:	29 9f       	mul	r18, r25
     708:	70 0d       	add	r23, r0
     70a:	11 24       	eor	r1, r1
     70c:	6e 5f       	subi	r22, 0xFE	; 254
     70e:	7c 4f       	sbci	r23, 0xFC	; 252
     710:	82 ea       	ldi	r24, 0xA2	; 162
     712:	93 e0       	ldi	r25, 0x03	; 3
     714:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN5Print5printERK6String>
     718:	04 c0       	rjmp	.+8      	; 0x722 <_Z15dateAlarmScreeni+0x58>
     71a:	8c ea       	ldi	r24, 0xAC	; 172
     71c:	92 e0       	ldi	r25, 0x02	; 2
     71e:	0e 94 2b 03 	call	0x656	; 0x656 <_Z13printddmmyyyyR5Datum>
     722:	ce 01       	movw	r24, r28
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	08 95       	ret

0000072a <_Z17printHumidityTempv>:
     72a:	cf 92       	push	r12
     72c:	df 92       	push	r13
     72e:	ef 92       	push	r14
     730:	ff 92       	push	r15
     732:	41 e0       	ldi	r20, 0x01	; 1
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	82 ea       	ldi	r24, 0xA2	; 162
     738:	93 e0       	ldi	r25, 0x03	; 3
     73a:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN7hd447809setCursorEhh>
     73e:	c0 90 f0 02 	lds	r12, 0x02F0	; 0x8002f0 <temp>
     742:	d0 90 f1 02 	lds	r13, 0x02F1	; 0x8002f1 <temp+0x1>
     746:	e0 90 f2 02 	lds	r14, 0x02F2	; 0x8002f2 <temp+0x2>
     74a:	f0 90 f3 02 	lds	r15, 0x02F3	; 0x8002f3 <temp+0x3>
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	a9 01       	movw	r20, r18
     754:	c7 01       	movw	r24, r14
     756:	b6 01       	movw	r22, r12
     758:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__cmpsf2>
     75c:	81 11       	cpse	r24, r1
     75e:	03 c0       	rjmp	.+6      	; 0x766 <_Z17printHumidityTempv+0x3c>
     760:	60 e3       	ldi	r22, 0x30	; 48
     762:	71 e0       	ldi	r23, 0x01	; 1
     764:	23 c0       	rjmp	.+70     	; 0x7ac <_Z17printHumidityTempv+0x82>
     766:	22 e0       	ldi	r18, 0x02	; 2
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	b7 01       	movw	r22, r14
     76c:	a6 01       	movw	r20, r12
     76e:	82 ea       	ldi	r24, 0xA2	; 162
     770:	93 e0       	ldi	r25, 0x03	; 3
     772:	0e 94 88 15 	call	0x2b10	; 0x2b10 <_ZN5Print5printEdi>
     776:	6f ed       	ldi	r22, 0xDF	; 223
     778:	82 ea       	ldi	r24, 0xA2	; 162
     77a:	93 e0       	ldi	r25, 0x03	; 3
     77c:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <_ZN5Print5printEc>
     780:	6e e3       	ldi	r22, 0x3E	; 62
     782:	71 e0       	ldi	r23, 0x01	; 1
     784:	82 ea       	ldi	r24, 0xA2	; 162
     786:	93 e0       	ldi	r25, 0x03	; 3
     788:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <_ZN5Print5printEPKc>
     78c:	40 91 ec 02 	lds	r20, 0x02EC	; 0x8002ec <hum>
     790:	50 91 ed 02 	lds	r21, 0x02ED	; 0x8002ed <hum+0x1>
     794:	60 91 ee 02 	lds	r22, 0x02EE	; 0x8002ee <hum+0x2>
     798:	70 91 ef 02 	lds	r23, 0x02EF	; 0x8002ef <hum+0x3>
     79c:	22 e0       	ldi	r18, 0x02	; 2
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	82 ea       	ldi	r24, 0xA2	; 162
     7a2:	93 e0       	ldi	r25, 0x03	; 3
     7a4:	0e 94 88 15 	call	0x2b10	; 0x2b10 <_ZN5Print5printEdi>
     7a8:	63 e4       	ldi	r22, 0x43	; 67
     7aa:	71 e0       	ldi	r23, 0x01	; 1
     7ac:	82 ea       	ldi	r24, 0xA2	; 162
     7ae:	93 e0       	ldi	r25, 0x03	; 3
     7b0:	ff 90       	pop	r15
     7b2:	ef 90       	pop	r14
     7b4:	df 90       	pop	r13
     7b6:	cf 90       	pop	r12
     7b8:	0c 94 f9 13 	jmp	0x27f2	; 0x27f2 <_ZN5Print5printEPKc>

000007bc <_Z10homeScreeni>:
     7bc:	0f 93       	push	r16
     7be:	1f 93       	push	r17
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	ec 01       	movw	r28, r24
     7c6:	0e 94 0d 1a 	call	0x341a	; 0x341a <millis>
     7ca:	00 91 f4 02 	lds	r16, 0x02F4	; 0x8002f4 <readSensor>
     7ce:	10 91 f5 02 	lds	r17, 0x02F5	; 0x8002f5 <readSensor+0x1>
     7d2:	20 91 f6 02 	lds	r18, 0x02F6	; 0x8002f6 <readSensor+0x2>
     7d6:	30 91 f7 02 	lds	r19, 0x02F7	; 0x8002f7 <readSensor+0x3>
     7da:	06 17       	cp	r16, r22
     7dc:	17 07       	cpc	r17, r23
     7de:	28 07       	cpc	r18, r24
     7e0:	39 07       	cpc	r19, r25
     7e2:	b8 f5       	brcc	.+110    	; 0x852 <_Z10homeScreeni+0x96>
     7e4:	66 e1       	ldi	r22, 0x16	; 22
     7e6:	8c ed       	ldi	r24, 0xDC	; 220
     7e8:	92 e0       	ldi	r25, 0x02	; 2
     7ea:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <_ZN3dht4readEh>
     7ee:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <DHT+0x4>
     7f2:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <DHT+0x5>
     7f6:	a0 91 e2 02 	lds	r26, 0x02E2	; 0x8002e2 <DHT+0x6>
     7fa:	b0 91 e3 02 	lds	r27, 0x02E3	; 0x8002e3 <DHT+0x7>
     7fe:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <temp>
     802:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <temp+0x1>
     806:	a0 93 f2 02 	sts	0x02F2, r26	; 0x8002f2 <temp+0x2>
     80a:	b0 93 f3 02 	sts	0x02F3, r27	; 0x8002f3 <temp+0x3>
     80e:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <DHT>
     812:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <DHT+0x1>
     816:	a0 91 de 02 	lds	r26, 0x02DE	; 0x8002de <DHT+0x2>
     81a:	b0 91 df 02 	lds	r27, 0x02DF	; 0x8002df <DHT+0x3>
     81e:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <hum>
     822:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <hum+0x1>
     826:	a0 93 ee 02 	sts	0x02EE, r26	; 0x8002ee <hum+0x2>
     82a:	b0 93 ef 02 	sts	0x02EF, r27	; 0x8002ef <hum+0x3>
     82e:	0e 94 95 03 	call	0x72a	; 0x72a <_Z17printHumidityTempv>
     832:	0e 94 0d 1a 	call	0x341a	; 0x341a <millis>
     836:	dc 01       	movw	r26, r24
     838:	cb 01       	movw	r24, r22
     83a:	88 57       	subi	r24, 0x78	; 120
     83c:	9c 4e       	sbci	r25, 0xEC	; 236
     83e:	af 4f       	sbci	r26, 0xFF	; 255
     840:	bf 4f       	sbci	r27, 0xFF	; 255
     842:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <readSensor>
     846:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <readSensor+0x1>
     84a:	a0 93 f6 02 	sts	0x02F6, r26	; 0x8002f6 <readSensor+0x2>
     84e:	b0 93 f7 02 	sts	0x02F7, r27	; 0x8002f7 <readSensor+0x3>
     852:	0e 94 95 03 	call	0x72a	; 0x72a <_Z17printHumidityTempv>
     856:	40 e0       	ldi	r20, 0x00	; 0
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	82 ea       	ldi	r24, 0xA2	; 162
     85c:	93 e0       	ldi	r25, 0x03	; 3
     85e:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN7hd447809setCursorEhh>
     862:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <timeZoneChoosen>
     866:	88 23       	and	r24, r24
     868:	d9 f0       	breq	.+54     	; 0x8a0 <_Z10homeScreeni+0xe4>
     86a:	8c ec       	ldi	r24, 0xCC	; 204
     86c:	92 e0       	ldi	r25, 0x02	; 2
     86e:	0e 94 b4 02 	call	0x568	; 0x568 <_Z11printhhmmssR4Zeit>
     872:	40 e0       	ldi	r20, 0x00	; 0
     874:	6d e0       	ldi	r22, 0x0D	; 13
     876:	82 ea       	ldi	r24, 0xA2	; 162
     878:	93 e0       	ldi	r25, 0x03	; 3
     87a:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN7hd447809setCursorEhh>
     87e:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <tz>
     882:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <tz+0x1>
     886:	2e e0       	ldi	r18, 0x0E	; 14
     888:	28 9f       	mul	r18, r24
     88a:	b0 01       	movw	r22, r0
     88c:	29 9f       	mul	r18, r25
     88e:	70 0d       	add	r23, r0
     890:	11 24       	eor	r1, r1
     892:	6e 5f       	subi	r22, 0xFE	; 254
     894:	7c 4f       	sbci	r23, 0xFC	; 252
     896:	82 ea       	ldi	r24, 0xA2	; 162
     898:	93 e0       	ldi	r25, 0x03	; 3
     89a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN5Print5printERK6String>
     89e:	04 c0       	rjmp	.+8      	; 0x8a8 <_Z10homeScreeni+0xec>
     8a0:	84 ec       	ldi	r24, 0xC4	; 196
     8a2:	92 e0       	ldi	r25, 0x02	; 2
     8a4:	0e 94 b4 02 	call	0x568	; 0x568 <_Z11printhhmmssR4Zeit>
     8a8:	ce 01       	movw	r24, r28
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	1f 91       	pop	r17
     8b0:	0f 91       	pop	r16
     8b2:	08 95       	ret

000008b4 <_Z13calculateTimev>:
     8b4:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <tz>
     8b8:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <tz+0x1>
     8bc:	2e e0       	ldi	r18, 0x0E	; 14
     8be:	28 9f       	mul	r18, r24
     8c0:	f0 01       	movw	r30, r0
     8c2:	29 9f       	mul	r18, r25
     8c4:	f0 0d       	add	r31, r0
     8c6:	11 24       	eor	r1, r1
     8c8:	e6 50       	subi	r30, 0x06	; 6
     8ca:	fd 4f       	sbci	r31, 0xFD	; 253
     8cc:	26 81       	ldd	r18, Z+6	; 0x06
     8ce:	37 81       	ldd	r19, Z+7	; 0x07
     8d0:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <zeitGMT>
     8d4:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <zeitGMT+0x1>
     8d8:	82 0f       	add	r24, r18
     8da:	93 1f       	adc	r25, r19
     8dc:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <zeitTimeZone+0x1>
     8e0:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <zeitTimeZone>
     8e4:	28 e0       	ldi	r18, 0x08	; 8
     8e6:	ec eb       	ldi	r30, 0xBC	; 188
     8e8:	f2 e0       	ldi	r31, 0x02	; 2
     8ea:	a4 eb       	ldi	r26, 0xB4	; 180
     8ec:	b2 e0       	ldi	r27, 0x02	; 2
     8ee:	01 90       	ld	r0, Z+
     8f0:	0d 92       	st	X+, r0
     8f2:	2a 95       	dec	r18
     8f4:	e1 f7       	brne	.-8      	; 0x8ee <_Z13calculateTimev+0x3a>
     8f6:	88 31       	cpi	r24, 0x18	; 24
     8f8:	91 05       	cpc	r25, r1
     8fa:	4c f0       	brlt	.+18     	; 0x90e <_Z13calculateTimev+0x5a>
     8fc:	48 97       	sbiw	r24, 0x18	; 24
     8fe:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <zeitTimeZone+0x1>
     902:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <zeitTimeZone>
     906:	84 eb       	ldi	r24, 0xB4	; 180
     908:	92 e0       	ldi	r25, 0x02	; 2
     90a:	0e 94 49 02 	call	0x492	; 0x492 <_ZN5Datum4TickEv>
     90e:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <zeitTimeZone>
     912:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <zeitTimeZone+0x1>
     916:	97 ff       	sbrs	r25, 7
     918:	2f c0       	rjmp	.+94     	; 0x978 <_Z13calculateTimev+0xc4>
     91a:	48 96       	adiw	r24, 0x18	; 24
     91c:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <zeitTimeZone+0x1>
     920:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <zeitTimeZone>
     924:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <datumTimeZone+0x4>
     928:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <datumTimeZone+0x5>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <datumTimeZone+0x5>
     932:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <datumTimeZone+0x4>
     936:	89 2b       	or	r24, r25
     938:	f9 f4       	brne	.+62     	; 0x978 <_Z13calculateTimev+0xc4>
     93a:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <datumTimeZone+0x2>
     93e:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <datumTimeZone+0x3>
     942:	01 97       	sbiw	r24, 0x01	; 1
     944:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <datumTimeZone+0x3>
     948:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <datumTimeZone+0x2>
     94c:	89 2b       	or	r24, r25
     94e:	29 f0       	breq	.+10     	; 0x95a <_Z13calculateTimev+0xa6>
     950:	84 eb       	ldi	r24, 0xB4	; 180
     952:	92 e0       	ldi	r25, 0x02	; 2
     954:	0e 94 22 02 	call	0x444	; 0x444 <_ZN5Datum11DaysOfMonthEv>
     958:	0b c0       	rjmp	.+22     	; 0x970 <_Z13calculateTimev+0xbc>
     95a:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <datumTimeZone>
     95e:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <datumTimeZone+0x1>
     962:	01 97       	sbiw	r24, 0x01	; 1
     964:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <datumTimeZone+0x1>
     968:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <datumTimeZone>
     96c:	8f e1       	ldi	r24, 0x1F	; 31
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <datumTimeZone+0x5>
     974:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <datumTimeZone+0x4>
     978:	08 95       	ret

0000097a <_Z14changeTimeZonei>:
     97a:	83 30       	cpi	r24, 0x03	; 3
     97c:	91 05       	cpc	r25, r1
     97e:	39 f0       	breq	.+14     	; 0x98e <_Z14changeTimeZonei+0x14>
     980:	8a 30       	cpi	r24, 0x0A	; 10
     982:	91 05       	cpc	r25, r1
     984:	21 f0       	breq	.+8      	; 0x98e <_Z14changeTimeZonei+0x14>
     986:	81 30       	cpi	r24, 0x01	; 1
     988:	91 05       	cpc	r25, r1
     98a:	51 f5       	brne	.+84     	; 0x9e0 <_Z14changeTimeZonei+0x66>
     98c:	17 c0       	rjmp	.+46     	; 0x9bc <_Z14changeTimeZonei+0x42>
     98e:	82 ea       	ldi	r24, 0xA2	; 162
     990:	93 e0       	ldi	r25, 0x03	; 3
     992:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_ZN7hd447805clearEv>
     996:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <tz>
     99a:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <tz+0x1>
     99e:	00 97       	sbiw	r24, 0x00	; 0
     9a0:	19 f4       	brne	.+6      	; 0x9a8 <_Z14changeTimeZonei+0x2e>
     9a2:	8b e0       	ldi	r24, 0x0B	; 11
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	01 c0       	rjmp	.+2      	; 0x9aa <_Z14changeTimeZonei+0x30>
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <tz+0x1>
     9ae:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <tz>
     9b2:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_Z13calculateTimev>
     9b6:	8a e0       	ldi	r24, 0x0A	; 10
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	08 95       	ret
     9bc:	82 ea       	ldi	r24, 0xA2	; 162
     9be:	93 e0       	ldi	r25, 0x03	; 3
     9c0:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_ZN7hd447805clearEv>
     9c4:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <tz>
     9c8:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <tz+0x1>
     9cc:	8b 30       	cpi	r24, 0x0B	; 11
     9ce:	91 05       	cpc	r25, r1
     9d0:	29 f4       	brne	.+10     	; 0x9dc <_Z14changeTimeZonei+0x62>
     9d2:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <tz+0x1>
     9d6:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <tz>
     9da:	eb cf       	rjmp	.-42     	; 0x9b2 <_Z14changeTimeZonei+0x38>
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	e5 cf       	rjmp	.-54     	; 0x9aa <_Z14changeTimeZonei+0x30>
     9e0:	08 95       	ret

000009e2 <_Z11setTimeZonei>:
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	0e 94 bd 04 	call	0x97a	; 0x97a <_Z14changeTimeZonei>
     9ea:	ec 01       	movw	r28, r24
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	82 ea       	ldi	r24, 0xA2	; 162
     9f2:	93 e0       	ldi	r25, 0x03	; 3
     9f4:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN7hd447809setCursorEhh>
     9f8:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <tz>
     9fc:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <tz+0x1>
     a00:	2e e0       	ldi	r18, 0x0E	; 14
     a02:	28 9f       	mul	r18, r24
     a04:	b0 01       	movw	r22, r0
     a06:	29 9f       	mul	r18, r25
     a08:	70 0d       	add	r23, r0
     a0a:	11 24       	eor	r1, r1
     a0c:	66 50       	subi	r22, 0x06	; 6
     a0e:	7d 4f       	sbci	r23, 0xFD	; 253
     a10:	82 ea       	ldi	r24, 0xA2	; 162
     a12:	93 e0       	ldi	r25, 0x03	; 3
     a14:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <_ZN5Print5printERK6String>
     a18:	41 e0       	ldi	r20, 0x01	; 1
     a1a:	60 e0       	ldi	r22, 0x00	; 0
     a1c:	82 ea       	ldi	r24, 0xA2	; 162
     a1e:	93 e0       	ldi	r25, 0x03	; 3
     a20:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN7hd447809setCursorEhh>
     a24:	8c ec       	ldi	r24, 0xCC	; 204
     a26:	92 e0       	ldi	r25, 0x02	; 2
     a28:	0e 94 b4 02 	call	0x568	; 0x568 <_Z11printhhmmssR4Zeit>
     a2c:	ce 01       	movw	r24, r28
     a2e:	df 91       	pop	r29
     a30:	cf 91       	pop	r28
     a32:	08 95       	ret

00000a34 <setup>:
 * \return void
 */
void setup()
{
	//LCD konfigurieren
	lcd.begin(16, 2);
     a34:	20 e0       	ldi	r18, 0x00	; 0
     a36:	42 e0       	ldi	r20, 0x02	; 2
     a38:	60 e1       	ldi	r22, 0x10	; 16
     a3a:	82 ea       	ldi	r24, 0xA2	; 162
     a3c:	93 e0       	ldi	r25, 0x03	; 3
     a3e:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <_ZN7hd447805beginEhhh>
	lcd.noBacklight();
     a42:	82 ea       	ldi	r24, 0xA2	; 162
     a44:	93 e0       	ldi	r25, 0x03	; 3
     a46:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <_ZN7hd4478011noBacklightEv>
	lcd.noCursor();
     a4a:	82 ea       	ldi	r24, 0xA2	; 162
     a4c:	93 e0       	ldi	r25, 0x03	; 3
     a4e:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <_ZN7hd447808noCursorEv>
	lcd.home();
     a52:	82 ea       	ldi	r24, 0xA2	; 162
     a54:	93 e0       	ldi	r25, 0x03	; 3
     a56:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <_ZN7hd447804homeEv>
	lcd.print("Romeo V2.2 Watch");
     a5a:	68 e5       	ldi	r22, 0x58	; 88
     a5c:	71 e0       	ldi	r23, 0x01	; 1
     a5e:	82 ea       	ldi	r24, 0xA2	; 162
     a60:	93 e0       	ldi	r25, 0x03	; 3
     a62:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
     a66:	41 e0       	ldi	r20, 0x01	; 1
     a68:	60 e0       	ldi	r22, 0x00	; 0
     a6a:	82 ea       	ldi	r24, 0xA2	; 162
     a6c:	93 e0       	ldi	r25, 0x03	; 3
     a6e:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN7hd447809setCursorEhh>
	lcd.print("Coray / Bruno");
     a72:	69 e6       	ldi	r22, 0x69	; 105
     a74:	71 e0       	ldi	r23, 0x01	; 1
     a76:	82 ea       	ldi	r24, 0xA2	; 162
     a78:	93 e0       	ldi	r25, 0x03	; 3
     a7a:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <_ZN5Print5printEPKc>
	while(millis()<3000);
     a7e:	0e 94 0d 1a 	call	0x341a	; 0x341a <millis>
     a82:	68 3b       	cpi	r22, 0xB8	; 184
     a84:	7b 40       	sbci	r23, 0x0B	; 11
     a86:	81 05       	cpc	r24, r1
     a88:	91 05       	cpc	r25, r1
     a8a:	c8 f3       	brcs	.-14     	; 0xa7e <setup+0x4a>
	lcd.clear();
     a8c:	82 ea       	ldi	r24, 0xA2	; 162
     a8e:	93 e0       	ldi	r25, 0x03	; 3
     a90:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_ZN7hd447805clearEv>
	
	zeitTimeZone = zeitGMT;
     a94:	88 e0       	ldi	r24, 0x08	; 8
     a96:	e4 ed       	ldi	r30, 0xD4	; 212
     a98:	f2 e0       	ldi	r31, 0x02	; 2
     a9a:	ac ec       	ldi	r26, 0xCC	; 204
     a9c:	b2 e0       	ldi	r27, 0x02	; 2
     a9e:	01 90       	ld	r0, Z+
     aa0:	0d 92       	st	X+, r0
     aa2:	8a 95       	dec	r24
     aa4:	e1 f7       	brne	.-8      	; 0xa9e <setup+0x6a>
	datumTimeZone = datumGMT;
     aa6:	88 e0       	ldi	r24, 0x08	; 8
     aa8:	ec eb       	ldi	r30, 0xBC	; 188
     aaa:	f2 e0       	ldi	r31, 0x02	; 2
     aac:	a4 eb       	ldi	r26, 0xB4	; 180
     aae:	b2 e0       	ldi	r27, 0x02	; 2
     ab0:	01 90       	ld	r0, Z+
     ab2:	0d 92       	st	X+, r0
     ab4:	8a 95       	dec	r24
     ab6:	e1 f7       	brne	.-8      	; 0xab0 <setup+0x7c>
	
	//Button uns Sensor Pin als input definiert
	pinMode(btnPin, INPUT);
     ab8:	60 e0       	ldi	r22, 0x00	; 0
     aba:	87 e0       	ldi	r24, 0x07	; 7
     abc:	0e 94 49 1b 	call	0x3692	; 0x3692 <pinMode>
	pinMode(tempSensor,INPUT);
     ac0:	60 e0       	ldi	r22, 0x00	; 0
     ac2:	86 e1       	ldi	r24, 0x16	; 22
     ac4:	0c 94 49 1b 	jmp	0x3692	; 0x3692 <pinMode>

00000ac8 <loop>:
		callibratePointer();
	}
	else
	{
	*/
	Watch();
     ac8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <_Z5Watchv>
	input = getkey();
     acc:	0e 94 17 01 	call	0x22e	; 0x22e <_Z6getkeyv>
     ad0:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <_ZL5input+0x1>
     ad4:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <_ZL5input>
	if (watchmenu[menu].active) 
     ad8:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <_ZL4menu>
     adc:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     ae0:	74 e0       	ldi	r23, 0x04	; 4
     ae2:	ee 0f       	add	r30, r30
     ae4:	ff 1f       	adc	r31, r31
     ae6:	7a 95       	dec	r23
     ae8:	e1 f7       	brne	.-8      	; 0xae2 <loop+0x1a>
     aea:	e0 5e       	subi	r30, 0xE0	; 224
     aec:	fd 4f       	sbci	r31, 0xFD	; 253
     aee:	02 84       	ldd	r0, Z+10	; 0x0a
     af0:	f3 85       	ldd	r31, Z+11	; 0x0b
     af2:	e0 2d       	mov	r30, r0
     af4:	30 97       	sbiw	r30, 0x00	; 0
     af6:	29 f0       	breq	.+10     	; 0xb02 <__stack+0x3>
		input = watchmenu[menu].active(input);
     af8:	09 95       	icall
     afa:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <_ZL5input+0x1>
     afe:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <_ZL5input>
		//! cyclic call to active function as long as menu n is active
	switch(input) {
     b02:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <_ZL5input>
     b06:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <_ZL5input+0x1>
     b0a:	83 30       	cpi	r24, 0x03	; 3
     b0c:	91 05       	cpc	r25, r1
     b0e:	d9 f1       	breq	.+118    	; 0xb86 <__stack+0x87>
     b10:	34 f4       	brge	.+12     	; 0xb1e <__stack+0x1f>
     b12:	81 30       	cpi	r24, 0x01	; 1
     b14:	91 05       	cpc	r25, r1
     b16:	79 f0       	breq	.+30     	; 0xb36 <__stack+0x37>
     b18:	02 97       	sbiw	r24, 0x02	; 2
     b1a:	19 f1       	breq	.+70     	; 0xb62 <__stack+0x63>
     b1c:	09 c0       	rjmp	.+18     	; 0xb30 <__stack+0x31>
     b1e:	85 30       	cpi	r24, 0x05	; 5
     b20:	91 05       	cpc	r25, r1
     b22:	09 f4       	brne	.+2      	; 0xb26 <__stack+0x27>
     b24:	65 c0       	rjmp	.+202    	; 0xbf0 <__stack+0xf1>
     b26:	0c f4       	brge	.+2      	; 0xb2a <__stack+0x2b>
     b28:	40 c0       	rjmp	.+128    	; 0xbaa <__stack+0xab>
     b2a:	06 97       	sbiw	r24, 0x06	; 6
     b2c:	09 f4       	brne	.+2      	; 0xb30 <__stack+0x31>
     b2e:	83 c0       	rjmp	.+262    	; 0xc36 <__stack+0x137>
		default:
		case X_KEY:
		case NO_KEY:
		newmenu = -1; // no changes made
     b30:	8f ef       	ldi	r24, 0xFF	; 255
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	11 c0       	rjmp	.+34     	; 0xb58 <__stack+0x59>
		break;
		case UP_KEY:
		lcd.clear();
     b36:	82 ea       	ldi	r24, 0xA2	; 162
     b38:	93 e0       	ldi	r25, 0x03	; 3
     b3a:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].up;
     b3e:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <_ZL4menu>
     b42:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     b46:	64 e0       	ldi	r22, 0x04	; 4
     b48:	ee 0f       	add	r30, r30
     b4a:	ff 1f       	adc	r31, r31
     b4c:	6a 95       	dec	r22
     b4e:	e1 f7       	brne	.-8      	; 0xb48 <__stack+0x49>
     b50:	e0 5e       	subi	r30, 0xE0	; 224
     b52:	fd 4f       	sbci	r31, 0xFD	; 253
     b54:	80 81       	ld	r24, Z
     b56:	91 81       	ldd	r25, Z+1	; 0x01
     b58:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <_ZL7newmenu+0x1>
     b5c:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <_ZL7newmenu>
		break;
     b60:	7a c0       	rjmp	.+244    	; 0xc56 <__stack+0x157>
		case LEFT_KEY:
		lcd.clear();
     b62:	82 ea       	ldi	r24, 0xA2	; 162
     b64:	93 e0       	ldi	r25, 0x03	; 3
     b66:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].left;
     b6a:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <_ZL4menu>
     b6e:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     b72:	54 e0       	ldi	r21, 0x04	; 4
     b74:	ee 0f       	add	r30, r30
     b76:	ff 1f       	adc	r31, r31
     b78:	5a 95       	dec	r21
     b7a:	e1 f7       	brne	.-8      	; 0xb74 <__stack+0x75>
     b7c:	e0 5e       	subi	r30, 0xE0	; 224
     b7e:	fd 4f       	sbci	r31, 0xFD	; 253
     b80:	82 81       	ldd	r24, Z+2	; 0x02
     b82:	93 81       	ldd	r25, Z+3	; 0x03
     b84:	e9 cf       	rjmp	.-46     	; 0xb58 <__stack+0x59>
		break;
		case DOWN_KEY:
		lcd.clear();
     b86:	82 ea       	ldi	r24, 0xA2	; 162
     b88:	93 e0       	ldi	r25, 0x03	; 3
     b8a:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].down;
     b8e:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <_ZL4menu>
     b92:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     b96:	44 e0       	ldi	r20, 0x04	; 4
     b98:	ee 0f       	add	r30, r30
     b9a:	ff 1f       	adc	r31, r31
     b9c:	4a 95       	dec	r20
     b9e:	e1 f7       	brne	.-8      	; 0xb98 <__stack+0x99>
     ba0:	e0 5e       	subi	r30, 0xE0	; 224
     ba2:	fd 4f       	sbci	r31, 0xFD	; 253
     ba4:	84 81       	ldd	r24, Z+4	; 0x04
     ba6:	95 81       	ldd	r25, Z+5	; 0x05
     ba8:	d7 cf       	rjmp	.-82     	; 0xb58 <__stack+0x59>
		break;
		case RIGHT_KEY:
		lcd.clear();
     baa:	82 ea       	ldi	r24, 0xA2	; 162
     bac:	93 e0       	ldi	r25, 0x03	; 3
     bae:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_ZN7hd447805clearEv>
		if(watchmenu[menu].goright != NULL) {
     bb2:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <_ZL4menu>
     bb6:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     bba:	34 e0       	ldi	r19, 0x04	; 4
     bbc:	ee 0f       	add	r30, r30
     bbe:	ff 1f       	adc	r31, r31
     bc0:	3a 95       	dec	r19
     bc2:	e1 f7       	brne	.-8      	; 0xbbc <__stack+0xbd>
     bc4:	e0 5e       	subi	r30, 0xE0	; 224
     bc6:	fd 4f       	sbci	r31, 0xFD	; 253
     bc8:	04 84       	ldd	r0, Z+12	; 0x0c
     bca:	f5 85       	ldd	r31, Z+13	; 0x0d
     bcc:	e0 2d       	mov	r30, r0
     bce:	30 97       	sbiw	r30, 0x00	; 0
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <__stack+0xd5>
			//! call go right function with new value
			watchmenu[menu].goright();
     bd2:	09 95       	icall
		}
		newmenu = watchmenu[menu].right;
     bd4:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <_ZL4menu>
     bd8:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     bdc:	24 e0       	ldi	r18, 0x04	; 4
     bde:	ee 0f       	add	r30, r30
     be0:	ff 1f       	adc	r31, r31
     be2:	2a 95       	dec	r18
     be4:	e1 f7       	brne	.-8      	; 0xbde <__stack+0xdf>
     be6:	e0 5e       	subi	r30, 0xE0	; 224
     be8:	fd 4f       	sbci	r31, 0xFD	; 253
     bea:	86 81       	ldd	r24, Z+6	; 0x06
     bec:	97 81       	ldd	r25, Z+7	; 0x07
     bee:	b4 cf       	rjmp	.-152    	; 0xb58 <__stack+0x59>
		break;
		case OK_KEY:
		lcd.clear();
     bf0:	82 ea       	ldi	r24, 0xA2	; 162
     bf2:	93 e0       	ldi	r25, 0x03	; 3
     bf4:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_ZN7hd447805clearEv>
		if(watchmenu[menu].positive != NULL) {
     bf8:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <_ZL4menu>
     bfc:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     c00:	94 e0       	ldi	r25, 0x04	; 4
     c02:	ee 0f       	add	r30, r30
     c04:	ff 1f       	adc	r31, r31
     c06:	9a 95       	dec	r25
     c08:	e1 f7       	brne	.-8      	; 0xc02 <__stack+0x103>
     c0a:	e0 5e       	subi	r30, 0xE0	; 224
     c0c:	fd 4f       	sbci	r31, 0xFD	; 253
     c0e:	06 84       	ldd	r0, Z+14	; 0x0e
     c10:	f7 85       	ldd	r31, Z+15	; 0x0f
     c12:	e0 2d       	mov	r30, r0
     c14:	30 97       	sbiw	r30, 0x00	; 0
     c16:	09 f0       	breq	.+2      	; 0xc1a <__stack+0x11b>
			//! call positive answer function with new value
			watchmenu[menu].positive();
     c18:	09 95       	icall
		}
		newmenu = watchmenu[menu].ok;
     c1a:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <_ZL4menu>
     c1e:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     c22:	84 e0       	ldi	r24, 0x04	; 4
     c24:	ee 0f       	add	r30, r30
     c26:	ff 1f       	adc	r31, r31
     c28:	8a 95       	dec	r24
     c2a:	e1 f7       	brne	.-8      	; 0xc24 <__stack+0x125>
     c2c:	e0 5e       	subi	r30, 0xE0	; 224
     c2e:	fd 4f       	sbci	r31, 0xFD	; 253
     c30:	80 85       	ldd	r24, Z+8	; 0x08
     c32:	91 85       	ldd	r25, Z+9	; 0x09
     c34:	91 cf       	rjmp	.-222    	; 0xb58 <__stack+0x59>
		break;
		case BK_KEY:
		lcd.clear();
     c36:	82 ea       	ldi	r24, 0xA2	; 162
     c38:	93 e0       	ldi	r25, 0x03	; 3
     c3a:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_ZN7hd447805clearEv>
		lcd.noCursor();
     c3e:	82 ea       	ldi	r24, 0xA2	; 162
     c40:	93 e0       	ldi	r25, 0x03	; 3
     c42:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <_ZN7hd447808noCursorEv>
		lcd.noBlink();
     c46:	82 ea       	ldi	r24, 0xA2	; 162
     c48:	93 e0       	ldi	r25, 0x03	; 3
     c4a:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN7hd447807noBlinkEv>
		newmenu = 0;
     c4e:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <_ZL7newmenu+0x1>
     c52:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <_ZL7newmenu>
		break;
	}
	if(newmenu >= 0) menu = newmenu;
     c56:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <_ZL7newmenu>
     c5a:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <_ZL7newmenu+0x1>
     c5e:	97 fd       	sbrc	r25, 7
     c60:	04 c0       	rjmp	.+8      	; 0xc6a <__stack+0x16b>
     c62:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <_ZL4menu+0x1>
     c66:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <_ZL4menu>
     c6a:	08 95       	ret

00000c6c <_GLOBAL__sub_I_lcd>:

	//} //else Klammer
}
     c6c:	af 92       	push	r10
     c6e:	bf 92       	push	r11
     c70:	cf 92       	push	r12
     c72:	df 92       	push	r13
     c74:	ef 92       	push	r14
     c76:	ff 92       	push	r15
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
// ====================

//	-- Automagic / auto-detect constructors --

// Auto find next instance and auto config pin mapping
hd44780_I2Cexp(){ _addr = 0; _expType = I2Cexp_UNKNOWN;}
     c80:	82 ea       	ldi	r24, 0xA2	; 162
     c82:	93 e0       	ldi	r25, 0x03	; 3
     c84:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <_ZN7hd44780C1Ev>
     c88:	e2 ea       	ldi	r30, 0xA2	; 162
     c8a:	f3 e0       	ldi	r31, 0x03	; 3
     c8c:	8e e0       	ldi	r24, 0x0E	; 14
     c8e:	92 e0       	ldi	r25, 0x02	; 2
     c90:	91 83       	std	Z+1, r25	; 0x01
     c92:	80 83       	st	Z, r24
     c94:	10 a2       	std	Z+32, r1	; 0x20
     c96:	11 a2       	std	Z+33, r1	; 0x21

const struct CITY_TIME_DIF CITIES [] {
	{"London", 0, "LON"},{"New-York", -5, "NEY"},{"Paris", 1, "PAR"},{ "Tokyo", 9, "TOK"},
	{"Hongkong", 8, "HNK"},{"Los Angeles", -8, "LAN"},{"Chicago", -6, "CHI"},{"Seoul", 9, "SEO"},
	{ "Bruessel",  1, "BRU"},{"Washington",  -5, "WAS"},{"Singapur", 8, "SIN"},{"Sydney", 11, "SYD"}
	};
     c98:	67 e7       	ldi	r22, 0x77	; 119
     c9a:	71 e0       	ldi	r23, 0x01	; 1
     c9c:	8a ef       	ldi	r24, 0xFA	; 250
     c9e:	92 e0       	ldi	r25, 0x02	; 2
     ca0:	0e 94 22 1c 	call	0x3844	; 0x3844 <_ZN6StringC1EPKc>
     ca4:	ca ef       	ldi	r28, 0xFA	; 250
     ca6:	d2 e0       	ldi	r29, 0x02	; 2
     ca8:	1f 82       	std	Y+7, r1	; 0x07
     caa:	1e 82       	std	Y+6, r1	; 0x06
     cac:	6e e7       	ldi	r22, 0x7E	; 126
     cae:	71 e0       	ldi	r23, 0x01	; 1
     cb0:	82 e0       	ldi	r24, 0x02	; 2
     cb2:	93 e0       	ldi	r25, 0x03	; 3
     cb4:	0e 94 22 1c 	call	0x3844	; 0x3844 <_ZN6StringC1EPKc>
     cb8:	62 e8       	ldi	r22, 0x82	; 130
     cba:	71 e0       	ldi	r23, 0x01	; 1
     cbc:	88 e0       	ldi	r24, 0x08	; 8
     cbe:	93 e0       	ldi	r25, 0x03	; 3
     cc0:	0e 94 22 1c 	call	0x3844	; 0x3844 <_ZN6StringC1EPKc>
     cc4:	8b ef       	ldi	r24, 0xFB	; 251
     cc6:	a8 2e       	mov	r10, r24
     cc8:	bb 24       	eor	r11, r11
     cca:	ba 94       	dec	r11
     ccc:	bd 8a       	std	Y+21, r11	; 0x15
     cce:	ac 8a       	std	Y+20, r10	; 0x14
     cd0:	6b e8       	ldi	r22, 0x8B	; 139
     cd2:	71 e0       	ldi	r23, 0x01	; 1
     cd4:	80 e1       	ldi	r24, 0x10	; 16
     cd6:	93 e0       	ldi	r25, 0x03	; 3
     cd8:	0e 94 22 1c 	call	0x3844	; 0x3844 <_ZN6StringC1EPKc>
     cdc:	6f e8       	ldi	r22, 0x8F	; 143
     cde:	71 e0       	ldi	r23, 0x01	; 1
     ce0:	86 e1       	ldi	r24, 0x16	; 22
     ce2:	93 e0       	ldi	r25, 0x03	; 3
     ce4:	0e 94 22 1c 	call	0x3844	; 0x3844 <_ZN6StringC1EPKc>
     ce8:	ee 24       	eor	r14, r14
     cea:	e3 94       	inc	r14
     cec:	f1 2c       	mov	r15, r1
     cee:	fb a2       	std	Y+35, r15	; 0x23
     cf0:	ea a2       	std	Y+34, r14	; 0x22
     cf2:	65 e9       	ldi	r22, 0x95	; 149
     cf4:	71 e0       	ldi	r23, 0x01	; 1
     cf6:	8e e1       	ldi	r24, 0x1E	; 30
     cf8:	93 e0       	ldi	r25, 0x03	; 3
     cfa:	0e 94 22 1c 	call	0x3844	; 0x3844 <_ZN6StringC1EPKc>
     cfe:	69 e9       	ldi	r22, 0x99	; 153
     d00:	71 e0       	ldi	r23, 0x01	; 1
     d02:	84 e2       	ldi	r24, 0x24	; 36
     d04:	93 e0       	ldi	r25, 0x03	; 3
     d06:	0e 94 22 1c 	call	0x3844	; 0x3844 <_ZN6StringC1EPKc>
     d0a:	09 e0       	ldi	r16, 0x09	; 9
     d0c:	10 e0       	ldi	r17, 0x00	; 0
     d0e:	19 ab       	std	Y+49, r17	; 0x31
     d10:	08 ab       	std	Y+48, r16	; 0x30
     d12:	6f e9       	ldi	r22, 0x9F	; 159
     d14:	71 e0       	ldi	r23, 0x01	; 1
     d16:	8c e2       	ldi	r24, 0x2C	; 44
     d18:	93 e0       	ldi	r25, 0x03	; 3
     d1a:	0e 94 22 1c 	call	0x3844	; 0x3844 <_ZN6StringC1EPKc>
     d1e:	63 ea       	ldi	r22, 0xA3	; 163
     d20:	71 e0       	ldi	r23, 0x01	; 1
     d22:	82 e3       	ldi	r24, 0x32	; 50
     d24:	93 e0       	ldi	r25, 0x03	; 3
     d26:	0e 94 22 1c 	call	0x3844	; 0x3844 <_ZN6StringC1EPKc>
     d2a:	28 e0       	ldi	r18, 0x08	; 8
     d2c:	c2 2e       	mov	r12, r18
     d2e:	d1 2c       	mov	r13, r1
     d30:	df ae       	std	Y+63, r13	; 0x3f
     d32:	ce ae       	std	Y+62, r12	; 0x3e
     d34:	6c ea       	ldi	r22, 0xAC	; 172
     d36:	71 e0       	ldi	r23, 0x01	; 1
     d38:	8a e3       	ldi	r24, 0x3A	; 58
     d3a:	93 e0       	ldi	r25, 0x03	; 3
     d3c:	0e 94 22 1c 	call	0x3844	; 0x3844 <_ZN6StringC1EPKc>
     d40:	60 eb       	ldi	r22, 0xB0	; 176
     d42:	71 e0       	ldi	r23, 0x01	; 1
     d44:	80 e4       	ldi	r24, 0x40	; 64
     d46:	93 e0       	ldi	r25, 0x03	; 3
     d48:	0e 94 22 1c 	call	0x3844	; 0x3844 <_ZN6StringC1EPKc>
     d4c:	88 ef       	ldi	r24, 0xF8	; 248
     d4e:	9f ef       	ldi	r25, 0xFF	; 255
     d50:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <_ZL6CITIES+0x4d>
     d54:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <_ZL6CITIES+0x4c>
     d58:	6c eb       	ldi	r22, 0xBC	; 188
     d5a:	71 e0       	ldi	r23, 0x01	; 1
     d5c:	88 e4       	ldi	r24, 0x48	; 72
     d5e:	93 e0       	ldi	r25, 0x03	; 3
     d60:	0e 94 22 1c 	call	0x3844	; 0x3844 <_ZN6StringC1EPKc>
     d64:	60 ec       	ldi	r22, 0xC0	; 192
     d66:	71 e0       	ldi	r23, 0x01	; 1
     d68:	8e e4       	ldi	r24, 0x4E	; 78
     d6a:	93 e0       	ldi	r25, 0x03	; 3
     d6c:	0e 94 22 1c 	call	0x3844	; 0x3844 <_ZN6StringC1EPKc>
     d70:	8a ef       	ldi	r24, 0xFA	; 250
     d72:	9f ef       	ldi	r25, 0xFF	; 255
     d74:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <_ZL6CITIES+0x5b>
     d78:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <_ZL6CITIES+0x5a>
     d7c:	68 ec       	ldi	r22, 0xC8	; 200
     d7e:	71 e0       	ldi	r23, 0x01	; 1
     d80:	86 e5       	ldi	r24, 0x56	; 86
     d82:	93 e0       	ldi	r25, 0x03	; 3
     d84:	0e 94 22 1c 	call	0x3844	; 0x3844 <_ZN6StringC1EPKc>
     d88:	6c ec       	ldi	r22, 0xCC	; 204
     d8a:	71 e0       	ldi	r23, 0x01	; 1
     d8c:	8c e5       	ldi	r24, 0x5C	; 92
     d8e:	93 e0       	ldi	r25, 0x03	; 3
     d90:	0e 94 22 1c 	call	0x3844	; 0x3844 <_ZN6StringC1EPKc>
     d94:	10 93 63 03 	sts	0x0363, r17	; 0x800363 <_ZL6CITIES+0x69>
     d98:	00 93 62 03 	sts	0x0362, r16	; 0x800362 <_ZL6CITIES+0x68>
     d9c:	62 ed       	ldi	r22, 0xD2	; 210
     d9e:	71 e0       	ldi	r23, 0x01	; 1
     da0:	84 e6       	ldi	r24, 0x64	; 100
     da2:	93 e0       	ldi	r25, 0x03	; 3
     da4:	0e 94 22 1c 	call	0x3844	; 0x3844 <_ZN6StringC1EPKc>
     da8:	66 ed       	ldi	r22, 0xD6	; 214
     daa:	71 e0       	ldi	r23, 0x01	; 1
     dac:	8a e6       	ldi	r24, 0x6A	; 106
     dae:	93 e0       	ldi	r25, 0x03	; 3
     db0:	0e 94 22 1c 	call	0x3844	; 0x3844 <_ZN6StringC1EPKc>
     db4:	f0 92 71 03 	sts	0x0371, r15	; 0x800371 <_ZL6CITIES+0x77>
     db8:	e0 92 70 03 	sts	0x0370, r14	; 0x800370 <_ZL6CITIES+0x76>
     dbc:	6f ed       	ldi	r22, 0xDF	; 223
     dbe:	71 e0       	ldi	r23, 0x01	; 1
     dc0:	82 e7       	ldi	r24, 0x72	; 114
     dc2:	93 e0       	ldi	r25, 0x03	; 3
     dc4:	0e 94 22 1c 	call	0x3844	; 0x3844 <_ZN6StringC1EPKc>
     dc8:	63 ee       	ldi	r22, 0xE3	; 227
     dca:	71 e0       	ldi	r23, 0x01	; 1
     dcc:	88 e7       	ldi	r24, 0x78	; 120
     dce:	93 e0       	ldi	r25, 0x03	; 3
     dd0:	0e 94 22 1c 	call	0x3844	; 0x3844 <_ZN6StringC1EPKc>
     dd4:	b0 92 7f 03 	sts	0x037F, r11	; 0x80037f <_ZL6CITIES+0x85>
     dd8:	a0 92 7e 03 	sts	0x037E, r10	; 0x80037e <_ZL6CITIES+0x84>
     ddc:	6e ee       	ldi	r22, 0xEE	; 238
     dde:	71 e0       	ldi	r23, 0x01	; 1
     de0:	80 e8       	ldi	r24, 0x80	; 128
     de2:	93 e0       	ldi	r25, 0x03	; 3
     de4:	0e 94 22 1c 	call	0x3844	; 0x3844 <_ZN6StringC1EPKc>
     de8:	62 ef       	ldi	r22, 0xF2	; 242
     dea:	71 e0       	ldi	r23, 0x01	; 1
     dec:	86 e8       	ldi	r24, 0x86	; 134
     dee:	93 e0       	ldi	r25, 0x03	; 3
     df0:	0e 94 22 1c 	call	0x3844	; 0x3844 <_ZN6StringC1EPKc>
     df4:	d0 92 8d 03 	sts	0x038D, r13	; 0x80038d <_ZL6CITIES+0x93>
     df8:	c0 92 8c 03 	sts	0x038C, r12	; 0x80038c <_ZL6CITIES+0x92>
     dfc:	6b ef       	ldi	r22, 0xFB	; 251
     dfe:	71 e0       	ldi	r23, 0x01	; 1
     e00:	8e e8       	ldi	r24, 0x8E	; 142
     e02:	93 e0       	ldi	r25, 0x03	; 3
     e04:	0e 94 22 1c 	call	0x3844	; 0x3844 <_ZN6StringC1EPKc>
     e08:	6f ef       	ldi	r22, 0xFF	; 255
     e0a:	71 e0       	ldi	r23, 0x01	; 1
     e0c:	84 e9       	ldi	r24, 0x94	; 148
     e0e:	93 e0       	ldi	r25, 0x03	; 3
     e10:	0e 94 22 1c 	call	0x3844	; 0x3844 <_ZN6StringC1EPKc>
     e14:	8b e0       	ldi	r24, 0x0B	; 11
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <_ZL6CITIES+0xa1>
     e1c:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <_ZL6CITIES+0xa0>
     e20:	66 e0       	ldi	r22, 0x06	; 6
     e22:	72 e0       	ldi	r23, 0x02	; 2
     e24:	8c e9       	ldi	r24, 0x9C	; 156
     e26:	93 e0       	ldi	r25, 0x03	; 3
     e28:	0e 94 22 1c 	call	0x3844	; 0x3844 <_ZN6StringC1EPKc>
#endif

class dht
{
public:
    dht() { _disableIRQ = false; };
     e2c:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <DHT+0xd>
	int hh_;
	int mm_;
	int ss_;
	int set_;
public:
	Zeit(int h, int m, int s){ hh_=h; mm_=m; ss_=s; set_ =0;};
     e30:	e4 ed       	ldi	r30, 0xD4	; 212
     e32:	f2 e0       	ldi	r31, 0x02	; 2
     e34:	84 e0       	ldi	r24, 0x04	; 4
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	91 83       	std	Z+1, r25	; 0x01
     e3a:	80 83       	st	Z, r24
     e3c:	22 e3       	ldi	r18, 0x32	; 50
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	33 83       	std	Z+3, r19	; 0x03
     e42:	22 83       	std	Z+2, r18	; 0x02
     e44:	15 82       	std	Z+5, r1	; 0x05
     e46:	14 82       	std	Z+4, r1	; 0x04
     e48:	17 82       	std	Z+7, r1	; 0x07
     e4a:	16 82       	std	Z+6, r1	; 0x06
     e4c:	ec ec       	ldi	r30, 0xCC	; 204
     e4e:	f2 e0       	ldi	r31, 0x02	; 2
     e50:	8c e0       	ldi	r24, 0x0C	; 12
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	91 83       	std	Z+1, r25	; 0x01
     e56:	80 83       	st	Z, r24
     e58:	13 82       	std	Z+3, r1	; 0x03
     e5a:	12 82       	std	Z+2, r1	; 0x02
     e5c:	15 82       	std	Z+5, r1	; 0x05
     e5e:	14 82       	std	Z+4, r1	; 0x04
     e60:	17 82       	std	Z+7, r1	; 0x07
     e62:	16 82       	std	Z+6, r1	; 0x06
     e64:	e4 ec       	ldi	r30, 0xC4	; 196
     e66:	f2 e0       	ldi	r31, 0x02	; 2
     e68:	45 e0       	ldi	r20, 0x05	; 5
     e6a:	50 e0       	ldi	r21, 0x00	; 0
     e6c:	51 83       	std	Z+1, r21	; 0x01
     e6e:	40 83       	st	Z, r20
     e70:	33 83       	std	Z+3, r19	; 0x03
     e72:	22 83       	std	Z+2, r18	; 0x02
     e74:	15 82       	std	Z+5, r1	; 0x05
     e76:	14 82       	std	Z+4, r1	; 0x04
     e78:	17 82       	std	Z+7, r1	; 0x07
     e7a:	16 82       	std	Z+6, r1	; 0x06
	int YYYY_;
	int MM_;
	int DD_;
	int set_;
public:
	Datum(int d, int m, int y){DD_=d; MM_=m;YYYY_=y; set_ = 0;};
     e7c:	ec eb       	ldi	r30, 0xBC	; 188
     e7e:	f2 e0       	ldi	r31, 0x02	; 2
     e80:	4e e0       	ldi	r20, 0x0E	; 14
     e82:	50 e0       	ldi	r21, 0x00	; 0
     e84:	55 83       	std	Z+5, r21	; 0x05
     e86:	44 83       	std	Z+4, r20	; 0x04
     e88:	93 83       	std	Z+3, r25	; 0x03
     e8a:	82 83       	std	Z+2, r24	; 0x02
     e8c:	23 ee       	ldi	r18, 0xE3	; 227
     e8e:	37 e0       	ldi	r19, 0x07	; 7
     e90:	31 83       	std	Z+1, r19	; 0x01
     e92:	20 83       	st	Z, r18
     e94:	17 82       	std	Z+7, r1	; 0x07
     e96:	16 82       	std	Z+6, r1	; 0x06
     e98:	e4 eb       	ldi	r30, 0xB4	; 180
     e9a:	f2 e0       	ldi	r31, 0x02	; 2
     e9c:	f5 82       	std	Z+5, r15	; 0x05
     e9e:	e4 82       	std	Z+4, r14	; 0x04
     ea0:	13 83       	std	Z+3, r17	; 0x03
     ea2:	02 83       	std	Z+2, r16	; 0x02
     ea4:	60 ed       	ldi	r22, 0xD0	; 208
     ea6:	77 e0       	ldi	r23, 0x07	; 7
     ea8:	71 83       	std	Z+1, r23	; 0x01
     eaa:	60 83       	st	Z, r22
     eac:	17 82       	std	Z+7, r1	; 0x07
     eae:	16 82       	std	Z+6, r1	; 0x06
     eb0:	ec ea       	ldi	r30, 0xAC	; 172
     eb2:	f2 e0       	ldi	r31, 0x02	; 2
     eb4:	55 83       	std	Z+5, r21	; 0x05
     eb6:	44 83       	std	Z+4, r20	; 0x04
     eb8:	93 83       	std	Z+3, r25	; 0x03
     eba:	82 83       	std	Z+2, r24	; 0x02
     ebc:	31 83       	std	Z+1, r19	; 0x01
     ebe:	20 83       	st	Z, r18
     ec0:	17 82       	std	Z+7, r1	; 0x07
     ec2:	16 82       	std	Z+6, r1	; 0x06
		break;
	}
	if(newmenu >= 0) menu = newmenu;

	//} //else Klammer
}
     ec4:	df 91       	pop	r29
     ec6:	cf 91       	pop	r28
     ec8:	1f 91       	pop	r17
     eca:	0f 91       	pop	r16
     ecc:	ff 90       	pop	r15
     ece:	ef 90       	pop	r14
     ed0:	df 90       	pop	r13
     ed2:	cf 90       	pop	r12
     ed4:	bf 90       	pop	r11
     ed6:	af 90       	pop	r10
     ed8:	08 95       	ret

00000eda <_GLOBAL__sub_D_lcd>:
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	c2 ea       	ldi	r28, 0xA2	; 162
     ee0:	d3 e0       	ldi	r29, 0x03	; 3
	String name;
	int timediff;
	String initials;
};

const struct CITY_TIME_DIF CITIES [] {
     ee2:	2e 97       	sbiw	r28, 0x0e	; 14


hd44780_I2Cexp lcd;

//Strukt um Städte und deren Zweitverschiebung zu GMT (London)
struct CITY_TIME_DIF {
     ee4:	ce 01       	movw	r24, r28
     ee6:	08 96       	adiw	r24, 0x08	; 8
     ee8:	0e 94 b4 1b 	call	0x3768	; 0x3768 <_ZN6StringD1Ev>
     eec:	ce 01       	movw	r24, r28
     eee:	0e 94 b4 1b 	call	0x3768	; 0x3768 <_ZN6StringD1Ev>
	String name;
	int timediff;
	String initials;
};

const struct CITY_TIME_DIF CITIES [] {
     ef2:	82 e0       	ldi	r24, 0x02	; 2
     ef4:	ca 3f       	cpi	r28, 0xFA	; 250
     ef6:	d8 07       	cpc	r29, r24
     ef8:	a1 f7       	brne	.-24     	; 0xee2 <_GLOBAL__sub_D_lcd+0x8>
		break;
	}
	if(newmenu >= 0) menu = newmenu;

	//} //else Klammer
}
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	08 95       	ret

00000f00 <_ZN14hd44780_I2Cexp14iosetBacklightEh>:
}

// iosetBacklight()  - set backlight brightness
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	fc 01       	movw	r30, r24
{
	if(!_bl) // backlight control?
     f06:	81 a5       	ldd	r24, Z+41	; 0x29
     f08:	88 23       	and	r24, r24
     f0a:	71 f1       	breq	.+92     	; 0xf68 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x68>
     f0c:	92 a5       	ldd	r25, Z+42	; 0x2a
		return(hd44780::RV_ENOTSUP); // not backlight control support

	// dimvalue 0 is backlight off any other dimvalue is backlight on
	// configure backlight state mask according to active level
	if(((dimvalue) && (_blLevel == HIGH)) || 
     f0e:	66 23       	and	r22, r22
     f10:	19 f0       	breq	.+6      	; 0xf18 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x18>
     f12:	91 30       	cpi	r25, 0x01	; 1
     f14:	29 f4       	brne	.+10     	; 0xf20 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x1c>
			((dimvalue == 0) && (_blLevel == LOW)))
     f18:	91 11       	cpse	r25, r1
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
	{
		_blCurState = _bl;
     f1c:	83 a7       	std	Z+43, r24	; 0x2b
     f1e:	01 c0       	rjmp	.+2      	; 0xf22 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x22>
	}
	else 
	{
		_blCurState = 0;
     f20:	13 a6       	std	Z+43, r1	; 0x2b
     f22:	ef 01       	movw	r28, r30
	}
	Wire.beginTransmission(_addr);
     f24:	60 a1       	ldd	r22, Z+32	; 0x20
     f26:	8d e3       	ldi	r24, 0x3D	; 61
     f28:	94 e0       	ldi	r25, 0x04	; 4
     f2a:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
     f2e:	89 a1       	ldd	r24, Y+33	; 0x21
     f30:	82 30       	cpi	r24, 0x02	; 2
     f32:	31 f4       	brne	.+12     	; 0xf40 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x40>
	{
		Wire.write(9); // point to GPIO
     f34:	69 e0       	ldi	r22, 0x09	; 9
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	8d e3       	ldi	r24, 0x3D	; 61
     f3a:	94 e0       	ldi	r25, 0x04	; 4
     f3c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
	}
	Wire.write( _blCurState );
     f40:	6b a5       	ldd	r22, Y+43	; 0x2b
     f42:	8d e3       	ldi	r24, 0x3D	; 61
     f44:	94 e0       	ldi	r25, 0x04	; 4
     f46:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     f4a:	8d e3       	ldi	r24, 0x3D	; 61
     f4c:	94 e0       	ldi	r25, 0x04	; 4
     f4e:	0e 94 fe 11 	call	0x23fc	; 0x23fc <_ZN7TwoWire15endTransmissionEv>
     f52:	21 e0       	ldi	r18, 0x01	; 1
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	81 11       	cpse	r24, r1
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x5e>
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	88 27       	eor	r24, r24
     f60:	99 27       	eor	r25, r25
     f62:	82 1b       	sub	r24, r18
     f64:	93 0b       	sbc	r25, r19
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x6c>
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
{
	if(!_bl) // backlight control?
		return(hd44780::RV_ENOTSUP); // not backlight control support
     f68:	8d ef       	ldi	r24, 0xFD	; 253
     f6a:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write( _blCurState );
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR); // all is good
}
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	08 95       	ret

00000f72 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>:
	return(0);
}


// write4bits - send a nibble to the LCD through i/o expander port
void write4bits(uint8_t value, hd44780::iotype type ) 
     f72:	cf 93       	push	r28
     f74:	fc 01       	movw	r30, r24
{
uint8_t gpioValue =  _blCurState;
     f76:	c3 a5       	ldd	r28, Z+43	; 0x2b
   
	// convert the value to an i/o expander port value
	// based on pin mappings
	if(value & (1 << 0))
     f78:	60 ff       	sbrs	r22, 0
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0xe>
		gpioValue |= _d4;
     f7c:	85 a1       	ldd	r24, Z+37	; 0x25
     f7e:	c8 2b       	or	r28, r24

	if(value & (1 << 1))
     f80:	61 ff       	sbrs	r22, 1
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x16>
		gpioValue |= _d5;
     f84:	86 a1       	ldd	r24, Z+38	; 0x26
     f86:	c8 2b       	or	r28, r24

	if(value & (1 << 2))
     f88:	62 ff       	sbrs	r22, 2
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x1e>
		gpioValue |= _d6;
     f8c:	87 a1       	ldd	r24, Z+39	; 0x27
     f8e:	c8 2b       	or	r28, r24

	if(value & (1 << 3))
     f90:	63 ff       	sbrs	r22, 3
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x26>
		gpioValue |= _d7;
     f94:	80 a5       	ldd	r24, Z+40	; 0x28
     f96:	c8 2b       	or	r28, r24


	if(type == hd44780::HD44780_IOdata) 
     f98:	41 30       	cpi	r20, 0x01	; 1
     f9a:	11 f4       	brne	.+4      	; 0xfa0 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x2e>
	{
		gpioValue |= _rs; // set RS high to send to data reg
     f9c:	82 a1       	ldd	r24, Z+34	; 0x22
     f9e:	c8 2b       	or	r28, r24
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
     fa0:	64 a1       	ldd	r22, Z+36	; 0x24
     fa2:	6c 2b       	or	r22, r28
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	8d e3       	ldi	r24, 0x3D	; 61
     fa8:	94 e0       	ldi	r25, 0x04	; 4
     faa:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
	Wire.write(gpioValue);		// with E LOW
     fae:	6c 2f       	mov	r22, r28
     fb0:	8d e3       	ldi	r24, 0x3D	; 61
     fb2:	94 e0       	ldi	r25, 0x04	; 4
}
     fb4:	cf 91       	pop	r28
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
	Wire.write(gpioValue);		// with E LOW
     fb6:	0c 94 29 11 	jmp	0x2252	; 0x2252 <_ZN7TwoWire5writeEh>

00000fba <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh>:
	return(rval);
}

// iowrite(type, value) - send either command or data byte to lcd
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
     fba:	8f 92       	push	r8
     fbc:	9f 92       	push	r9
     fbe:	af 92       	push	r10
     fc0:	bf 92       	push	r11
     fc2:	cf 92       	push	r12
     fc4:	df 92       	push	r13
     fc6:	ef 92       	push	r14
     fc8:	ff 92       	push	r15
     fca:	0f 93       	push	r16
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	ec 01       	movw	r28, r24
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
     fd4:	88 a1       	ldd	r24, Y+32	; 0x20
     fd6:	88 23       	and	r24, r24
     fd8:	09 f4       	brne	.+2      	; 0xfdc <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x22>
     fda:	50 c0       	rjmp	.+160    	; 0x107c <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
     fdc:	89 a1       	ldd	r24, Y+33	; 0x21
     fde:	88 23       	and	r24, r24
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x2a>
     fe2:	4c c0       	rjmp	.+152    	; 0x107c <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
     fe4:	14 2f       	mov	r17, r20
     fe6:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
     fe8:	8c 8c       	ldd	r8, Y+28	; 0x1c
     fea:	9d 8c       	ldd	r9, Y+29	; 0x1d
     fec:	ae 8c       	ldd	r10, Y+30	; 0x1e
     fee:	bf 8c       	ldd	r11, Y+31	; 0x1f
     ff0:	c8 8c       	ldd	r12, Y+24	; 0x18
     ff2:	d9 8c       	ldd	r13, Y+25	; 0x19
     ff4:	ea 8c       	ldd	r14, Y+26	; 0x1a
     ff6:	fb 8c       	ldd	r15, Y+27	; 0x1b
     ff8:	8d e2       	ldi	r24, 0x2D	; 45
     ffa:	c8 1a       	sub	r12, r24
     ffc:	d1 08       	sbc	r13, r1
     ffe:	e1 08       	sbc	r14, r1
    1000:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
    1002:	0e 94 19 1a 	call	0x3432	; 0x3432 <micros>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	8c 19       	sub	r24, r12
    100c:	9d 09       	sbc	r25, r13
    100e:	ae 09       	sbc	r26, r14
    1010:	bf 09       	sbc	r27, r15
    1012:	88 15       	cp	r24, r8
    1014:	99 05       	cpc	r25, r9
    1016:	aa 05       	cpc	r26, r10
    1018:	bb 05       	cpc	r27, r11
    101a:	98 f3       	brcs	.-26     	; 0x1002 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x48>
	 */

	waitReady(-45);
   
	// grab i2c bus
	Wire.beginTransmission(_addr);
    101c:	68 a1       	ldd	r22, Y+32	; 0x20
    101e:	8d e3       	ldi	r24, 0x3D	; 61
    1020:	94 e0       	ldi	r25, 0x04	; 4
    1022:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
    1026:	89 a1       	ldd	r24, Y+33	; 0x21
    1028:	82 30       	cpi	r24, 0x02	; 2
    102a:	31 f4       	brne	.+12     	; 0x1038 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x7e>
	{
		Wire.write(9); // point to GPIO
    102c:	69 e0       	ldi	r22, 0x09	; 9
    102e:	70 e0       	ldi	r23, 0x00	; 0
    1030:	8d e3       	ldi	r24, 0x3D	; 61
    1032:	94 e0       	ldi	r25, 0x04	; 4
    1034:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
	}
	// send both nibbles in same i2c connection
	write4bits( (value >> 4), type );  // send upper nibble
    1038:	61 2f       	mov	r22, r17
    103a:	70 e0       	ldi	r23, 0x00	; 0
    103c:	84 e0       	ldi	r24, 0x04	; 4
    103e:	75 95       	asr	r23
    1040:	67 95       	ror	r22
    1042:	8a 95       	dec	r24
    1044:	e1 f7       	brne	.-8      	; 0x103e <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x84>
    1046:	40 2f       	mov	r20, r16
    1048:	ce 01       	movw	r24, r28
    104a:	0e 94 b9 07 	call	0xf72	; 0xf72 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	 * are used to reliably get the LCD and host in nibble sync
	 * with each other and to get the LCD into 4 bit mode.
	 * When sending a "4 bit command" only the upper nibble of
	 * of the 8 bit byte will presented on LCD signals D4-D7.
	 */
	if(type != hd44780::HD44780_IOcmd4bit)
    104e:	02 30       	cpi	r16, 0x02	; 2
    1050:	31 f0       	breq	.+12     	; 0x105e <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xa4>
	{
		write4bits( (value & 0x0F), type); // lower nibble, if not 4bit cmd
    1052:	61 2f       	mov	r22, r17
    1054:	6f 70       	andi	r22, 0x0F	; 15
    1056:	40 2f       	mov	r20, r16
    1058:	ce 01       	movw	r24, r28
    105a:	0e 94 b9 07 	call	0xf72	; 0xf72 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	}
	if(Wire.endTransmission())
    105e:	8d e3       	ldi	r24, 0x3D	; 61
    1060:	94 e0       	ldi	r25, 0x04	; 4
    1062:	0e 94 fe 11 	call	0x23fc	; 0x23fc <_ZN7TwoWire15endTransmissionEv>
    1066:	21 e0       	ldi	r18, 0x01	; 1
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 11       	cpse	r24, r1
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xb8>
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	88 27       	eor	r24, r24
    1074:	99 27       	eor	r25, r25
    1076:	82 1b       	sub	r24, r18
    1078:	93 0b       	sbc	r25, r19
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc6>
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
    107c:	8c ef       	ldi	r24, 0xFC	; 252
    107e:	9f ef       	ldi	r25, 0xFF	; 255
	}
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR);
}
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	1f 91       	pop	r17
    1086:	0f 91       	pop	r16
    1088:	ff 90       	pop	r15
    108a:	ef 90       	pop	r14
    108c:	df 90       	pop	r13
    108e:	cf 90       	pop	r12
    1090:	bf 90       	pop	r11
    1092:	af 90       	pop	r10
    1094:	9f 90       	pop	r9
    1096:	8f 90       	pop	r8
    1098:	08 95       	ret

0000109a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE>:
// ioread(type) - read a byte from LCD DDRAM
//
// returns:
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
    109a:	8f 92       	push	r8
    109c:	9f 92       	push	r9
    109e:	af 92       	push	r10
    10a0:	bf 92       	push	r11
    10a2:	cf 92       	push	r12
    10a4:	df 92       	push	r13
    10a6:	ef 92       	push	r14
    10a8:	ff 92       	push	r15
    10aa:	0f 93       	push	r16
    10ac:	1f 93       	push	r17
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	ec 01       	movw	r28, r24
{
uint8_t gpioValue =  _blCurState;
    10b4:	1b a5       	ldd	r17, Y+43	; 0x2b
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
    10b6:	88 a1       	ldd	r24, Y+32	; 0x20
    10b8:	88 23       	and	r24, r24
    10ba:	09 f4       	brne	.+2      	; 0x10be <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x24>
    10bc:	f6 c0       	rjmp	.+492    	; 0x12aa <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
    10be:	89 a1       	ldd	r24, Y+33	; 0x21
    10c0:	88 23       	and	r24, r24
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x2c>
    10c4:	f2 c0       	rjmp	.+484    	; 0x12aa <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
		return(hd44780::RV_ENXIO);

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
    10c6:	82 30       	cpi	r24, 0x02	; 2
    10c8:	09 f4       	brne	.+2      	; 0x10cc <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x32>
    10ca:	f1 c0       	rjmp	.+482    	; 0x12ae <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
	{
		return(hd44780::RV_ENOTSUP);
	}

	// check if reads supported
	if(!_rw)
    10cc:	8b a1       	ldd	r24, Y+35	; 0x23
    10ce:	88 23       	and	r24, r24
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x3a>
    10d2:	ed c0       	rjmp	.+474    	; 0x12ae <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
    10d4:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
    10d6:	8c 8c       	ldd	r8, Y+28	; 0x1c
    10d8:	9d 8c       	ldd	r9, Y+29	; 0x1d
    10da:	ae 8c       	ldd	r10, Y+30	; 0x1e
    10dc:	bf 8c       	ldd	r11, Y+31	; 0x1f
    10de:	c8 8c       	ldd	r12, Y+24	; 0x18
    10e0:	d9 8c       	ldd	r13, Y+25	; 0x19
    10e2:	ea 8c       	ldd	r14, Y+26	; 0x1a
    10e4:	fb 8c       	ldd	r15, Y+27	; 0x1b
    10e6:	8d e2       	ldi	r24, 0x2D	; 45
    10e8:	c8 1a       	sub	r12, r24
    10ea:	d1 08       	sbc	r13, r1
    10ec:	e1 08       	sbc	r14, r1
    10ee:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
    10f0:	0e 94 19 1a 	call	0x3432	; 0x3432 <micros>
    10f4:	dc 01       	movw	r26, r24
    10f6:	cb 01       	movw	r24, r22
    10f8:	8c 19       	sub	r24, r12
    10fa:	9d 09       	sbc	r25, r13
    10fc:	ae 09       	sbc	r26, r14
    10fe:	bf 09       	sbc	r27, r15
    1100:	88 15       	cp	r24, r8
    1102:	99 05       	cpc	r25, r9
    1104:	aa 05       	cpc	r26, r10
    1106:	bb 05       	cpc	r27, r11
    1108:	98 f3       	brcs	.-26     	; 0x10f0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x56>
    110a:	8d a1       	ldd	r24, Y+37	; 0x25
    110c:	18 2b       	or	r17, r24
    110e:	8e a1       	ldd	r24, Y+38	; 0x26
    1110:	18 2b       	or	r17, r24
    1112:	8f a1       	ldd	r24, Y+39	; 0x27
    1114:	18 2b       	or	r17, r24
   
	// put all the expander LCD data pins into input mode.
	// PCF8574 psuedo inputs use pullups so setting them to 1
	// makes them suitible for inputs.

	gpioValue |= _d4|_d5|_d6|_d7;
    1116:	88 a5       	ldd	r24, Y+40	; 0x28
    1118:	18 2b       	or	r17, r24

	// set RS based on type of read (data or status/cmd)
	if(type == hd44780::HD44780_IOdata) 
    111a:	01 30       	cpi	r16, 0x01	; 1
    111c:	11 f4       	brne	.+4      	; 0x1122 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x88>
	{
		gpioValue |= _rs; // RS high to read data reg
    111e:	8a a1       	ldd	r24, Y+34	; 0x22
    1120:	18 2b       	or	r17, r24
	}

	gpioValue |= _rw; // r/w high for reading
    1122:	8b a1       	ldd	r24, Y+35	; 0x23
    1124:	18 2b       	or	r17, r24

	// write all the bits to the expander port
	
	Wire.beginTransmission(_addr);
    1126:	68 a1       	ldd	r22, Y+32	; 0x20
    1128:	8d e3       	ldi	r24, 0x3D	; 61
    112a:	94 e0       	ldi	r25, 0x04	; 4
    112c:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue);		// d4-d7 are inputs, RS, r/w high, E LOW
    1130:	61 2f       	mov	r22, r17
    1132:	8d e3       	ldi	r24, 0x3D	; 61
    1134:	94 e0       	ldi	r25, 0x04	; 4
    1136:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    113a:	8d e3       	ldi	r24, 0x3D	; 61
    113c:	94 e0       	ldi	r25, 0x04	; 4
    113e:	0e 94 fe 11 	call	0x23fc	; 0x23fc <_ZN7TwoWire15endTransmissionEv>
    1142:	88 23       	and	r24, r24
    1144:	19 f0       	breq	.+6      	; 0x114c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xb2>
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;
    1146:	0f ef       	ldi	r16, 0xFF	; 255
    1148:	1f ef       	ldi	r17, 0xFF	; 255
    114a:	9d c0       	rjmp	.+314    	; 0x1286 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ec>
	if(Wire.endTransmission())
		goto returnStatus;


	// raise E to read the data.
	Wire.beginTransmission(_addr);
    114c:	68 a1       	ldd	r22, Y+32	; 0x20
    114e:	8d e3       	ldi	r24, 0x3D	; 61
    1150:	94 e0       	ldi	r25, 0x04	; 4
    1152:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raises E 
    1156:	6c a1       	ldd	r22, Y+36	; 0x24
    1158:	61 2b       	or	r22, r17
    115a:	70 e0       	ldi	r23, 0x00	; 0
    115c:	8d e3       	ldi	r24, 0x3D	; 61
    115e:	94 e0       	ldi	r25, 0x04	; 4
    1160:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
    1164:	8d e3       	ldi	r24, 0x3D	; 61
    1166:	94 e0       	ldi	r25, 0x04	; 4
    1168:	0e 94 fe 11 	call	0x23fc	; 0x23fc <_ZN7TwoWire15endTransmissionEv>
    116c:	81 11       	cpse	r24, r1
    116e:	eb cf       	rjmp	.-42     	; 0x1146 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// read the expander port to get the upper nibble of the byte
	Wire.requestFrom((int)_addr, 1);
    1170:	68 a1       	ldd	r22, Y+32	; 0x20
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	41 e0       	ldi	r20, 0x01	; 1
    1176:	50 e0       	ldi	r21, 0x00	; 0
    1178:	8d e3       	ldi	r24, 0x3D	; 61
    117a:	94 e0       	ldi	r25, 0x04	; 4
    117c:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <_ZN7TwoWire11requestFromEii>
	iodata = Wire.read();
    1180:	8d e3       	ldi	r24, 0x3D	; 61
    1182:	94 e0       	ldi	r25, 0x04	; 4
    1184:	0e 94 a2 10 	call	0x2144	; 0x2144 <_ZN7TwoWire4readEv>
    1188:	7c 01       	movw	r14, r24
	if(iodata < 0) // did we not receive a byte?
    118a:	97 fd       	sbrc	r25, 7
    118c:	dc cf       	rjmp	.-72     	; 0x1146 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
    118e:	68 a1       	ldd	r22, Y+32	; 0x20
    1190:	8d e3       	ldi	r24, 0x3D	; 61
    1192:	94 e0       	ldi	r25, 0x04	; 4
    1194:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
    1198:	61 2f       	mov	r22, r17
    119a:	8d e3       	ldi	r24, 0x3D	; 61
    119c:	94 e0       	ldi	r25, 0x04	; 4
    119e:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    11a2:	8d e3       	ldi	r24, 0x3D	; 61
    11a4:	94 e0       	ldi	r25, 0x04	; 4
    11a6:	0e 94 fe 11 	call	0x23fc	; 0x23fc <_ZN7TwoWire15endTransmissionEv>
    11aa:	81 11       	cpse	r24, r1
    11ac:	cc cf       	rjmp	.-104    	; 0x1146 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
    11ae:	8d a1       	ldd	r24, Y+37	; 0x25
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	8e 21       	and	r24, r14
    11b4:	9f 21       	and	r25, r15
    11b6:	89 2b       	or	r24, r25
    11b8:	11 f4       	brne	.+4      	; 0x11be <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x124>
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
    11ba:	00 e0       	ldi	r16, 0x00	; 0
    11bc:	01 c0       	rjmp	.+2      	; 0x11c0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x126>
	if(Wire.endTransmission())
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
		data |= (1 << 4);
    11be:	00 e1       	ldi	r16, 0x10	; 16

	if(iodata & _d5)
    11c0:	8e a1       	ldd	r24, Y+38	; 0x26
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	8e 21       	and	r24, r14
    11c6:	9f 21       	and	r25, r15
    11c8:	89 2b       	or	r24, r25
    11ca:	09 f0       	breq	.+2      	; 0x11ce <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x134>
		data |= (1 << 5);
    11cc:	00 62       	ori	r16, 0x20	; 32

	if(iodata & _d6)
    11ce:	8f a1       	ldd	r24, Y+39	; 0x27
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	8e 21       	and	r24, r14
    11d4:	9f 21       	and	r25, r15
    11d6:	89 2b       	or	r24, r25
    11d8:	09 f0       	breq	.+2      	; 0x11dc <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x142>
		data |= (1 << 6);
    11da:	00 64       	ori	r16, 0x40	; 64

	if(iodata & _d7)
    11dc:	88 a5       	ldd	r24, Y+40	; 0x28
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	e8 22       	and	r14, r24
    11e2:	f9 22       	and	r15, r25
    11e4:	ef 28       	or	r14, r15
    11e6:	09 f0       	breq	.+2      	; 0x11ea <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x150>
		data |= (1 << 7);
    11e8:	00 68       	ori	r16, 0x80	; 128
	
	Wire.beginTransmission(_addr);
    11ea:	68 a1       	ldd	r22, Y+32	; 0x20
    11ec:	8d e3       	ldi	r24, 0x3D	; 61
    11ee:	94 e0       	ldi	r25, 0x04	; 4
    11f0:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raise E to read next nibble
    11f4:	6c a1       	ldd	r22, Y+36	; 0x24
    11f6:	61 2b       	or	r22, r17
    11f8:	70 e0       	ldi	r23, 0x00	; 0
    11fa:	8d e3       	ldi	r24, 0x3D	; 61
    11fc:	94 e0       	ldi	r25, 0x04	; 4
    11fe:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
    1202:	8d e3       	ldi	r24, 0x3D	; 61
    1204:	94 e0       	ldi	r25, 0x04	; 4
    1206:	0e 94 fe 11 	call	0x23fc	; 0x23fc <_ZN7TwoWire15endTransmissionEv>
    120a:	81 11       	cpse	r24, r1
    120c:	9c cf       	rjmp	.-200    	; 0x1146 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>

	// read the expander port to get the lower nibble of the byte
	// We can't look at the return value from requestFrom() on the TineyWireM
	// library as it doesn't work like it is supposed to.
	// So we look at the return status from read() instead.
	Wire.requestFrom((int)_addr, 1);
    120e:	68 a1       	ldd	r22, Y+32	; 0x20
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	41 e0       	ldi	r20, 0x01	; 1
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	8d e3       	ldi	r24, 0x3D	; 61
    1218:	94 e0       	ldi	r25, 0x04	; 4
    121a:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <_ZN7TwoWire11requestFromEii>

	iodata = Wire.read();
    121e:	8d e3       	ldi	r24, 0x3D	; 61
    1220:	94 e0       	ldi	r25, 0x04	; 4
    1222:	0e 94 a2 10 	call	0x2144	; 0x2144 <_ZN7TwoWire4readEv>
    1226:	7c 01       	movw	r14, r24

	if(iodata < 0) // did we not receive a byte?
    1228:	97 fd       	sbrc	r25, 7
    122a:	8d cf       	rjmp	.-230    	; 0x1146 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
    122c:	68 a1       	ldd	r22, Y+32	; 0x20
    122e:	8d e3       	ldi	r24, 0x3D	; 61
    1230:	94 e0       	ldi	r25, 0x04	; 4
    1232:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
    1236:	61 2f       	mov	r22, r17
    1238:	8d e3       	ldi	r24, 0x3D	; 61
    123a:	94 e0       	ldi	r25, 0x04	; 4
    123c:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    1240:	8d e3       	ldi	r24, 0x3D	; 61
    1242:	94 e0       	ldi	r25, 0x04	; 4
    1244:	0e 94 fe 11 	call	0x23fc	; 0x23fc <_ZN7TwoWire15endTransmissionEv>
    1248:	81 11       	cpse	r24, r1
    124a:	7d cf       	rjmp	.-262    	; 0x1146 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into lower nibble of byte
	if(iodata & _d4)
    124c:	8d a1       	ldd	r24, Y+37	; 0x25
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	8e 21       	and	r24, r14
    1252:	9f 21       	and	r25, r15
    1254:	89 2b       	or	r24, r25
    1256:	09 f0       	breq	.+2      	; 0x125a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1c0>
		data |= (1 << 0);
    1258:	01 60       	ori	r16, 0x01	; 1

	if(iodata & _d5)
    125a:	8e a1       	ldd	r24, Y+38	; 0x26
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	8e 21       	and	r24, r14
    1260:	9f 21       	and	r25, r15
    1262:	89 2b       	or	r24, r25
    1264:	09 f0       	breq	.+2      	; 0x1268 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ce>
		data |= (1 << 1);
    1266:	02 60       	ori	r16, 0x02	; 2

	if(iodata & _d6)
    1268:	8f a1       	ldd	r24, Y+39	; 0x27
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	8e 21       	and	r24, r14
    126e:	9f 21       	and	r25, r15
    1270:	89 2b       	or	r24, r25
    1272:	09 f0       	breq	.+2      	; 0x1276 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1dc>
		data |= (1 << 2);
    1274:	04 60       	ori	r16, 0x04	; 4

	if(iodata & _d7)
    1276:	88 a5       	ldd	r24, Y+40	; 0x28
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	e8 22       	and	r14, r24
    127c:	f9 22       	and	r15, r25
    127e:	ef 28       	or	r14, r15
    1280:	09 f0       	breq	.+2      	; 0x1284 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ea>
		data |= (1 << 3);
    1282:	08 60       	ori	r16, 0x08	; 8

	rval = data;
    1284:	10 e0       	ldi	r17, 0x00	; 0

returnStatus:

	// try to put gpio port back to all outputs state with WR signal low for writes
	Wire.beginTransmission(_addr);
    1286:	68 a1       	ldd	r22, Y+32	; 0x20
    1288:	8d e3       	ldi	r24, 0x3D	; 61
    128a:	94 e0       	ldi	r25, 0x04	; 4
    128c:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(_blCurState);		// with E LOW
    1290:	6b a5       	ldd	r22, Y+43	; 0x2b
    1292:	8d e3       	ldi	r24, 0x3D	; 61
    1294:	94 e0       	ldi	r25, 0x04	; 4
    1296:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    129a:	8d e3       	ldi	r24, 0x3D	; 61
    129c:	94 e0       	ldi	r25, 0x04	; 4
    129e:	0e 94 fe 11 	call	0x23fc	; 0x23fc <_ZN7TwoWire15endTransmissionEv>
    12a2:	88 23       	and	r24, r24
    12a4:	39 f0       	breq	.+14     	; 0x12b4 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21a>
		rval = hd44780::RV_EIO;
    12a6:	8f ef       	ldi	r24, 0xFF	; 255
    12a8:	03 c0       	rjmp	.+6      	; 0x12b0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
    12aa:	8c ef       	ldi	r24, 0xFC	; 252
    12ac:	01 c0       	rjmp	.+2      	; 0x12b0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
	{
		return(hd44780::RV_ENOTSUP);
    12ae:	8d ef       	ldi	r24, 0xFD	; 253
    12b0:	9f ef       	ldi	r25, 0xFF	; 255
    12b2:	01 c0       	rjmp	.+2      	; 0x12b6 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21c>
    12b4:	c8 01       	movw	r24, r16
	Wire.write(_blCurState);		// with E LOW
	if(Wire.endTransmission())
		rval = hd44780::RV_EIO;

	return(rval);
}
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	1f 91       	pop	r17
    12bc:	0f 91       	pop	r16
    12be:	ff 90       	pop	r15
    12c0:	ef 90       	pop	r14
    12c2:	df 90       	pop	r13
    12c4:	cf 90       	pop	r12
    12c6:	bf 90       	pop	r11
    12c8:	af 90       	pop	r10
    12ca:	9f 90       	pop	r9
    12cc:	8f 90       	pop	r8
    12ce:	08 95       	ret

000012d0 <_ZN14hd44780_I2Cexp11autocfg8574Ev>:
 * a new resistor to  connect to the base of the transistor.
 * 
 * As a result the SYDZ backpack cannot use autoconfiguration.
 */

int autocfg8574()
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	ec 01       	movw	r28, r24
uint8_t data, data2;
uint8_t rs, rw, en, d4, d5, d6, d7, bl, blLevel;

	// First put a 0xff in the output port

	Wire.beginTransmission(_addr);
    12da:	68 a1       	ldd	r22, Y+32	; 0x20
    12dc:	8d e3       	ldi	r24, 0x3D	; 61
    12de:	94 e0       	ldi	r25, 0x04	; 4
    12e0:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0xff);
    12e4:	6f ef       	ldi	r22, 0xFF	; 255
    12e6:	8d e3       	ldi	r24, 0x3D	; 61
    12e8:	94 e0       	ldi	r25, 0x04	; 4
    12ea:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    12ee:	8d e3       	ldi	r24, 0x3D	; 61
    12f0:	94 e0       	ldi	r25, 0x04	; 4
    12f2:	0e 94 fe 11 	call	0x23fc	; 0x23fc <_ZN7TwoWire15endTransmissionEv>

	// now read back from the port

	Wire.requestFrom((int)_addr, 1);
    12f6:	68 a1       	ldd	r22, Y+32	; 0x20
    12f8:	70 e0       	ldi	r23, 0x00	; 0
    12fa:	41 e0       	ldi	r20, 0x01	; 1
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	8d e3       	ldi	r24, 0x3D	; 61
    1300:	94 e0       	ldi	r25, 0x04	; 4
    1302:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    1306:	8d e3       	ldi	r24, 0x3D	; 61
    1308:	94 e0       	ldi	r25, 0x04	; 4
    130a:	0e 94 a2 10 	call	0x2144	; 0x2144 <_ZN7TwoWire4readEv>
    130e:	8c 01       	movw	r16, r24

	// Turn off bit2 to attempt to see if en is bit 2,
	// if it is, it should change all lcd data bits to 1s
	
	Wire.beginTransmission(_addr);
    1310:	68 a1       	ldd	r22, Y+32	; 0x20
    1312:	8d e3       	ldi	r24, 0x3D	; 61
    1314:	94 e0       	ldi	r25, 0x04	; 4
    1316:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) (~(1 << 2)) );
    131a:	6b ef       	ldi	r22, 0xFB	; 251
    131c:	8d e3       	ldi	r24, 0x3D	; 61
    131e:	94 e0       	ldi	r25, 0x04	; 4
    1320:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    1324:	8d e3       	ldi	r24, 0x3D	; 61
    1326:	94 e0       	ldi	r25, 0x04	; 4
    1328:	0e 94 fe 11 	call	0x23fc	; 0x23fc <_ZN7TwoWire15endTransmissionEv>

	// read back data
	Wire.requestFrom((int)_addr, 1);
    132c:	68 a1       	ldd	r22, Y+32	; 0x20
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	41 e0       	ldi	r20, 0x01	; 1
    1332:	50 e0       	ldi	r21, 0x00	; 0
    1334:	8d e3       	ldi	r24, 0x3D	; 61
    1336:	94 e0       	ldi	r25, 0x04	; 4
    1338:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <_ZN7TwoWire11requestFromEii>
	data2 = Wire.read();
    133c:	8d e3       	ldi	r24, 0x3D	; 61
    133e:	94 e0       	ldi	r25, 0x04	; 4
    1340:	0e 94 a2 10 	call	0x2144	; 0x2144 <_ZN7TwoWire4readEv>

	// If lower 3 bits are high and all 4 upper bits are high after clearing bit 2
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
    1344:	98 01       	movw	r18, r16
    1346:	27 70       	andi	r18, 0x07	; 7
    1348:	33 27       	eor	r19, r19
    134a:	27 30       	cpi	r18, 0x07	; 7
    134c:	31 05       	cpc	r19, r1
    134e:	b1 f4       	brne	.+44     	; 0x137c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
    1350:	80 7f       	andi	r24, 0xF0	; 240
    1352:	99 27       	eor	r25, r25
    1354:	80 3f       	cpi	r24, 0xF0	; 240
    1356:	91 05       	cpc	r25, r1
    1358:	89 f4       	brne	.+34     	; 0x137c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
    135a:	83 e0       	ldi	r24, 0x03	; 3
    135c:	16 95       	lsr	r17
    135e:	07 95       	ror	r16
    1360:	8a 95       	dec	r24
    1362:	e1 f7       	brne	.-8      	; 0x135c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x8c>
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	08 27       	eor	r16, r24
    1368:	01 70       	andi	r16, 0x01	; 1
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
	{
		rs = 0; rw = 1; en = 2; d4 = 4; d5 = 5; d6 = 6; d7 = 7; bl = 3;
    136a:	43 e0       	ldi	r20, 0x03	; 3
    136c:	57 e0       	ldi	r21, 0x07	; 7
    136e:	66 e0       	ldi	r22, 0x06	; 6
    1370:	75 e0       	ldi	r23, 0x05	; 5
    1372:	e4 e0       	ldi	r30, 0x04	; 4
    1374:	22 e0       	ldi	r18, 0x02	; 2
    1376:	f1 e0       	ldi	r31, 0x01	; 1
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	34 c0       	rjmp	.+104    	; 0x13e4 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x114>
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
		}
	}
	else if((data & 0x70) == 0x70)
    137c:	c8 01       	movw	r24, r16
    137e:	80 77       	andi	r24, 0x70	; 112
    1380:	99 27       	eor	r25, r25
    1382:	80 37       	cpi	r24, 0x70	; 112
    1384:	91 05       	cpc	r25, r1
    1386:	09 f0       	breq	.+2      	; 0x138a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xba>
    1388:	68 c0       	rjmp	.+208    	; 0x145a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18a>
		// both use bit 7 for backlight control

		// Turn off the en bit which should change the data bits
		// bit 4 on the mjkdz is en so we try that bit
	
		Wire.beginTransmission(_addr);
    138a:	68 a1       	ldd	r22, Y+32	; 0x20
    138c:	8d e3       	ldi	r24, 0x3D	; 61
    138e:	94 e0       	ldi	r25, 0x04	; 4
    1390:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t) (~(1 << 4)) );
    1394:	6f ee       	ldi	r22, 0xEF	; 239
    1396:	8d e3       	ldi	r24, 0x3D	; 61
    1398:	94 e0       	ldi	r25, 0x04	; 4
    139a:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    139e:	8d e3       	ldi	r24, 0x3D	; 61
    13a0:	94 e0       	ldi	r25, 0x04	; 4
    13a2:	0e 94 fe 11 	call	0x23fc	; 0x23fc <_ZN7TwoWire15endTransmissionEv>

		// read back data
		Wire.requestFrom((int)_addr, 1);
    13a6:	68 a1       	ldd	r22, Y+32	; 0x20
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	41 e0       	ldi	r20, 0x01	; 1
    13ac:	50 e0       	ldi	r21, 0x00	; 0
    13ae:	8d e3       	ldi	r24, 0x3D	; 61
    13b0:	94 e0       	ldi	r25, 0x04	; 4
    13b2:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <_ZN7TwoWire11requestFromEii>
		data2 = Wire.read();
    13b6:	8d e3       	ldi	r24, 0x3D	; 61
    13b8:	94 e0       	ldi	r25, 0x04	; 4
    13ba:	0e 94 a2 10 	call	0x2144	; 0x2144 <_ZN7TwoWire4readEv>
		// look at data bits and see if they changed
		// if they changed to 0xf, then en was bit 4 and it is mjdkz
		// this will happen since when E is low the LCD is not
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
    13be:	8f 70       	andi	r24, 0x0F	; 15
    13c0:	99 27       	eor	r25, r25
    13c2:	0f 97       	sbiw	r24, 0x0f	; 15
    13c4:	19 f0       	breq	.+6      	; 0x13cc <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xfc>
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
		}
		else
		{
			// electrofun LCDXIO
			rs = 4; rw = 5; en = 6; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
    13c6:	26 e0       	ldi	r18, 0x06	; 6
    13c8:	34 e0       	ldi	r19, 0x04	; 4
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x100>
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
		{
			// mjkdz
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
    13cc:	24 e0       	ldi	r18, 0x04	; 4
    13ce:	36 e0       	ldi	r19, 0x06	; 6
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
    13d0:	00 95       	com	r16
    13d2:	00 1f       	adc	r16, r16
    13d4:	00 27       	eor	r16, r16
    13d6:	00 1f       	adc	r16, r16
    13d8:	47 e0       	ldi	r20, 0x07	; 7
    13da:	53 e0       	ldi	r21, 0x03	; 3
    13dc:	62 e0       	ldi	r22, 0x02	; 2
    13de:	71 e0       	ldi	r23, 0x01	; 1
    13e0:	e0 e0       	ldi	r30, 0x00	; 0
    13e2:	f5 e0       	ldi	r31, 0x05	; 5
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	dc 01       	movw	r26, r24
    13ea:	01 c0       	rjmp	.+2      	; 0x13ee <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11e>
    13ec:	aa 0f       	add	r26, r26
    13ee:	3a 95       	dec	r19
    13f0:	ea f7       	brpl	.-6      	; 0x13ec <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11c>
    13f2:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
    13f4:	dc 01       	movw	r26, r24
    13f6:	01 c0       	rjmp	.+2      	; 0x13fa <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x12a>
    13f8:	aa 0f       	add	r26, r26
    13fa:	fa 95       	dec	r31
    13fc:	ea f7       	brpl	.-6      	; 0x13f8 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x128>
    13fe:	ab a3       	std	Y+35, r26	; 0x23
	else
		_rw = 0; // no r/w control

	_en = ( 1 << en );
    1400:	dc 01       	movw	r26, r24
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x138>
    1404:	aa 0f       	add	r26, r26
    1406:	bb 1f       	adc	r27, r27
    1408:	2a 95       	dec	r18
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x134>
    140c:	ac a3       	std	Y+36, r26	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
    140e:	9c 01       	movw	r18, r24
    1410:	01 c0       	rjmp	.+2      	; 0x1414 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x144>
    1412:	22 0f       	add	r18, r18
    1414:	ea 95       	dec	r30
    1416:	ea f7       	brpl	.-6      	; 0x1412 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x142>
    1418:	2d a3       	std	Y+37, r18	; 0x25
	_d5 = ( 1 << d5 );
    141a:	9c 01       	movw	r18, r24
    141c:	01 c0       	rjmp	.+2      	; 0x1420 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x150>
    141e:	22 0f       	add	r18, r18
    1420:	7a 95       	dec	r23
    1422:	ea f7       	brpl	.-6      	; 0x141e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x14e>
    1424:	2e a3       	std	Y+38, r18	; 0x26
	_d6 = ( 1 << d6 );
    1426:	9c 01       	movw	r18, r24
    1428:	01 c0       	rjmp	.+2      	; 0x142c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15c>
    142a:	22 0f       	add	r18, r18
    142c:	6a 95       	dec	r22
    142e:	ea f7       	brpl	.-6      	; 0x142a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15a>
    1430:	2f a3       	std	Y+39, r18	; 0x27
	_d7 = ( 1 << d7 );   
    1432:	9c 01       	movw	r18, r24
    1434:	01 c0       	rjmp	.+2      	; 0x1438 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x168>
    1436:	22 0f       	add	r18, r18
    1438:	5a 95       	dec	r21
    143a:	ea f7       	brpl	.-6      	; 0x1436 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x166>
    143c:	28 a7       	std	Y+40, r18	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
    143e:	01 c0       	rjmp	.+2      	; 0x1442 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x172>
    1440:	88 0f       	add	r24, r24
    1442:	4a 95       	dec	r20
    1444:	ea f7       	brpl	.-6      	; 0x1440 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x170>
    1446:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
    1448:	0a a7       	std	Y+42, r16	; 0x2a
	// set default bl state to backlight on
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
    144a:	01 30       	cpi	r16, 0x01	; 1
    144c:	11 f4       	brne	.+4      	; 0x1452 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x182>
		_blCurState = _bl;
    144e:	8b a7       	std	Y+43, r24	; 0x2b
    1450:	01 c0       	rjmp	.+2      	; 0x1454 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x184>
	else
		_blCurState = 0;
    1452:	1b a6       	std	Y+43, r1	; 0x2b
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 c0       	rjmp	.+4      	; 0x145e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18e>
		}
	}
	else
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
    145a:	8d ef       	ldi	r24, 0xFD	; 253
    145c:	9f ef       	ldi	r25, 0xFF	; 255
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	1f 91       	pop	r17
    1464:	0f 91       	pop	r16
    1466:	08 95       	ret

00001468 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>:
 * if GP1 is low then the board is the BOARD_XXX board
 * The BOARD_XXX may not work as GP1 is used for D5 on WIDEHK and LCDPLUG
 *
 *
 */
int autocfgMCP23008()
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	ec 01       	movw	r28, r24

	/*
	 * Now set up output port
	 * Make no assumptions as to the state of IOCON BYTE mode
	 */
	Wire.beginTransmission(_addr);
    146e:	68 a1       	ldd	r22, Y+32	; 0x20
    1470:	8d e3       	ldi	r24, 0x3D	; 61
    1472:	94 e0       	ldi	r25, 0x04	; 4
    1474:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t)0); // point to IODIR
    1478:	60 e0       	ldi	r22, 0x00	; 0
    147a:	8d e3       	ldi	r24, 0x3D	; 61
    147c:	94 e0       	ldi	r25, 0x04	; 4
    147e:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN7TwoWire5writeEh>
	Wire.write(0xff); // all pins inputs
    1482:	6f ef       	ldi	r22, 0xFF	; 255
    1484:	70 e0       	ldi	r23, 0x00	; 0
    1486:	8d e3       	ldi	r24, 0x3D	; 61
    1488:	94 e0       	ldi	r25, 0x04	; 4
    148a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    148e:	8d e3       	ldi	r24, 0x3D	; 61
    1490:	94 e0       	ldi	r25, 0x04	; 4
    1492:	0e 94 fe 11 	call	0x23fc	; 0x23fc <_ZN7TwoWire15endTransmissionEv>

	Wire.beginTransmission(_addr);
    1496:	68 a1       	ldd	r22, Y+32	; 0x20
    1498:	8d e3       	ldi	r24, 0x3D	; 61
    149a:	94 e0       	ldi	r25, 0x04	; 4
    149c:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(6); // point to GPPU
    14a0:	66 e0       	ldi	r22, 0x06	; 6
    14a2:	70 e0       	ldi	r23, 0x00	; 0
    14a4:	8d e3       	ldi	r24, 0x3D	; 61
    14a6:	94 e0       	ldi	r25, 0x04	; 4
    14a8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
	Wire.write(0xff); // turn on pullups
    14ac:	6f ef       	ldi	r22, 0xFF	; 255
    14ae:	70 e0       	ldi	r23, 0x00	; 0
    14b0:	8d e3       	ldi	r24, 0x3D	; 61
    14b2:	94 e0       	ldi	r25, 0x04	; 4
    14b4:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    14b8:	8d e3       	ldi	r24, 0x3D	; 61
    14ba:	94 e0       	ldi	r25, 0x04	; 4
    14bc:	0e 94 fe 11 	call	0x23fc	; 0x23fc <_ZN7TwoWire15endTransmissionEv>

	/*
	 * read from the GPIO port
	 */

	Wire.beginTransmission(_addr);
    14c0:	68 a1       	ldd	r22, Y+32	; 0x20
    14c2:	8d e3       	ldi	r24, 0x3D	; 61
    14c4:	94 e0       	ldi	r25, 0x04	; 4
    14c6:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(9); // point to GPIO
    14ca:	69 e0       	ldi	r22, 0x09	; 9
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	8d e3       	ldi	r24, 0x3D	; 61
    14d0:	94 e0       	ldi	r25, 0x04	; 4
    14d2:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    14d6:	8d e3       	ldi	r24, 0x3D	; 61
    14d8:	94 e0       	ldi	r25, 0x04	; 4
    14da:	0e 94 fe 11 	call	0x23fc	; 0x23fc <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom((int)_addr, 1);
    14de:	68 a1       	ldd	r22, Y+32	; 0x20
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	41 e0       	ldi	r20, 0x01	; 1
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	8d e3       	ldi	r24, 0x3D	; 61
    14e8:	94 e0       	ldi	r25, 0x04	; 4
    14ea:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    14ee:	8d e3       	ldi	r24, 0x3D	; 61
    14f0:	94 e0       	ldi	r25, 0x04	; 4
    14f2:	0e 94 a2 10 	call	0x2144	; 0x2144 <_ZN7TwoWire4readEv>

	blLevel = HIGH; // known boards are active HIGH bl

	if(data == 0x7f) // bit 7 low, and other control and data lines high
    14f6:	8f 37       	cpi	r24, 0x7F	; 127
    14f8:	61 f0       	breq	.+24     	; 0x1512 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xaa>
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
    14fa:	86 ff       	sbrs	r24, 6
    14fc:	12 c0       	rjmp	.+36     	; 0x1522 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xba>
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
    14fe:	81 fd       	sbrc	r24, 1
    1500:	4c c0       	rjmp	.+152    	; 0x159a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x132>
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
		bl = 1;
    1502:	21 e0       	ldi	r18, 0x01	; 1
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
    1504:	32 e0       	ldi	r19, 0x02	; 2
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
    1506:	43 e0       	ldi	r20, 0x03	; 3
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
    1508:	54 e0       	ldi	r21, 0x04	; 4
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
    150a:	65 e0       	ldi	r22, 0x05	; 5
	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
    150c:	76 e0       	ldi	r23, 0x06	; 6
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
    150e:	e7 e0       	ldi	r30, 0x07	; 7
    1510:	0f c0       	rjmp	.+30     	; 0x1530 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;
    1512:	27 e0       	ldi	r18, 0x07	; 7
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
    1514:	36 e0       	ldi	r19, 0x06	; 6
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
    1516:	45 e0       	ldi	r20, 0x05	; 5
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
    1518:	54 e0       	ldi	r21, 0x04	; 4
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
    151a:	63 e0       	ldi	r22, 0x03	; 3
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
    151c:	72 e0       	ldi	r23, 0x02	; 2

	if(data == 0x7f) // bit 7 low, and other control and data lines high
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
    151e:	e1 e0       	ldi	r30, 0x01	; 1
    1520:	07 c0       	rjmp	.+14     	; 0x1530 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;
    1522:	26 e0       	ldi	r18, 0x06	; 6
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
    1524:	33 e0       	ldi	r19, 0x03	; 3
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
    1526:	42 e0       	ldi	r20, 0x02	; 2
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
    1528:	51 e0       	ldi	r21, 0x01	; 1
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
    152a:	60 e0       	ldi	r22, 0x00	; 0
	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
    152c:	77 e0       	ldi	r23, 0x07	; 7
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
    152e:	e4 e0       	ldi	r30, 0x04	; 4
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	dc 01       	movw	r26, r24
    1536:	02 c0       	rjmp	.+4      	; 0x153c <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd4>
    1538:	aa 0f       	add	r26, r26
    153a:	bb 1f       	adc	r27, r27
    153c:	ea 95       	dec	r30
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd0>
    1540:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
	else
		_rw = 0; // no r/w control
    1542:	1b a2       	std	Y+35, r1	; 0x23

	_en = ( 1 << en );
    1544:	fc 01       	movw	r30, r24
    1546:	01 c0       	rjmp	.+2      	; 0x154a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe2>
    1548:	ee 0f       	add	r30, r30
    154a:	7a 95       	dec	r23
    154c:	ea f7       	brpl	.-6      	; 0x1548 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe0>
    154e:	ec a3       	std	Y+36, r30	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
    1550:	fc 01       	movw	r30, r24
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xf0>
    1554:	ee 0f       	add	r30, r30
    1556:	ff 1f       	adc	r31, r31
    1558:	6a 95       	dec	r22
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xec>
    155c:	ed a3       	std	Y+37, r30	; 0x25
	_d5 = ( 1 << d5 );
    155e:	bc 01       	movw	r22, r24
    1560:	01 c0       	rjmp	.+2      	; 0x1564 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfc>
    1562:	66 0f       	add	r22, r22
    1564:	5a 95       	dec	r21
    1566:	ea f7       	brpl	.-6      	; 0x1562 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfa>
    1568:	6e a3       	std	Y+38, r22	; 0x26
	_d6 = ( 1 << d6 );
    156a:	bc 01       	movw	r22, r24
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x10a>
    156e:	66 0f       	add	r22, r22
    1570:	77 1f       	adc	r23, r23
    1572:	4a 95       	dec	r20
    1574:	e2 f7       	brpl	.-8      	; 0x156e <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x106>
    1576:	6f a3       	std	Y+39, r22	; 0x27
	_d7 = ( 1 << d7 );   
    1578:	ac 01       	movw	r20, r24
    157a:	01 c0       	rjmp	.+2      	; 0x157e <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x116>
    157c:	44 0f       	add	r20, r20
    157e:	3a 95       	dec	r19
    1580:	ea f7       	brpl	.-6      	; 0x157c <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x114>
    1582:	48 a7       	std	Y+40, r20	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
    1584:	01 c0       	rjmp	.+2      	; 0x1588 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x120>
    1586:	88 0f       	add	r24, r24
    1588:	2a 95       	dec	r18
    158a:	ea f7       	brpl	.-6      	; 0x1586 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x11e>
    158c:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
    158e:	91 e0       	ldi	r25, 0x01	; 1
    1590:	9a a7       	std	Y+42, r25	; 0x2a
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
		_blCurState = _bl;
    1592:	8b a7       	std	Y+43, r24	; 0x2b
		// could not identify board
		return(hd44780::RV_ENOTSUP);
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	02 c0       	rjmp	.+4      	; 0x159e <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x136>

	}
	else
	{
		// could not identify board
		return(hd44780::RV_ENOTSUP);
    159a:	8d ef       	ldi	r24, 0xFD	; 253
    159c:	9f ef       	ldi	r25, 0xFF	; 255
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
    159e:	df 91       	pop	r29
    15a0:	cf 91       	pop	r28
    15a2:	08 95       	ret

000015a4 <_ZN14hd44780_I2Cexp6ioinitEv>:
// Returns non zero if initialization failed.
//
// can't be used from constructors because not everything is initalized yet.
// (maybe interrupts or other library constructors)
// if Wire library is used in constructor, it will hang.
int ioinit()
    15a4:	1f 93       	push	r17
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	ec 01       	movw	r28, r24
	 * I believe that it is unreasonable to require the the user
	 * sketch code to do it, because all that should change between
	 * hd44780 i/o interfaces should be the constructor
	 * So we go ahead and call it here.
	 */
	Wire.begin();
    15ac:	8d e3       	ldi	r24, 0x3D	; 61
    15ae:	94 e0       	ldi	r25, 0x04	; 4
    15b0:	0e 94 68 11 	call	0x22d0	; 0x22d0 <_ZN7TwoWire5beginEv>

	// auto locate i2c expander and magically detect pin mappings

	if(!_addr) // locate next instance
    15b4:	68 a1       	ldd	r22, Y+32	; 0x20
    15b6:	61 11       	cpse	r22, r1
    15b8:	0a c0       	rjmp	.+20     	; 0x15ce <_ZN14hd44780_I2Cexp6ioinitEv+0x2a>
	{
		_addr = LocateDevice(AutoInst++);
    15ba:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    15be:	91 e0       	ldi	r25, 0x01	; 1
    15c0:	98 0f       	add	r25, r24
    15c2:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    15c6:	0e 94 b0 01 	call	0x360	; 0x360 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
    15ca:	88 a3       	std	Y+32, r24	; 0x20
    15cc:	0d c0       	rjmp	.+26     	; 0x15e8 <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
	}
	else
	{
		// check to see if device at specified address is really there
		Wire.beginTransmission(_addr);
    15ce:	8d e3       	ldi	r24, 0x3D	; 61
    15d0:	94 e0       	ldi	r25, 0x04	; 4
    15d2:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN7TwoWire17beginTransmissionEh>
		if(Wire.endTransmission())
    15d6:	8d e3       	ldi	r24, 0x3D	; 61
    15d8:	94 e0       	ldi	r25, 0x04	; 4
    15da:	0e 94 fe 11 	call	0x23fc	; 0x23fc <_ZN7TwoWire15endTransmissionEv>
    15de:	88 23       	and	r24, r24
    15e0:	19 f0       	breq	.+6      	; 0x15e8 <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
			return(hd44780::RV_ENXIO);
    15e2:	8c ef       	ldi	r24, 0xFC	; 252
    15e4:	9f ef       	ldi	r25, 0xFF	; 255
    15e6:	a7 c0       	rjmp	.+334    	; 0x1736 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	}

	if(!_addr) // locate next instance
    15e8:	88 a1       	ldd	r24, Y+32	; 0x20
    15ea:	81 11       	cpse	r24, r1
    15ec:	09 c0       	rjmp	.+18     	; 0x1600 <_ZN14hd44780_I2Cexp6ioinitEv+0x5c>
		_addr = LocateDevice(AutoInst++);
    15ee:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    15f2:	91 e0       	ldi	r25, 0x01	; 1
    15f4:	98 0f       	add	r25, r24
    15f6:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    15fa:	0e 94 b0 01 	call	0x360	; 0x360 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
    15fe:	88 a3       	std	Y+32, r24	; 0x20

	if(!_addr) // if we couldn't locate it, return error
    1600:	18 a1       	ldd	r17, Y+32	; 0x20
    1602:	11 23       	and	r17, r17
    1604:	71 f3       	breq	.-36     	; 0x15e2 <_ZN14hd44780_I2Cexp6ioinitEv+0x3e>
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
    1606:	89 a1       	ldd	r24, Y+33	; 0x21
    1608:	88 23       	and	r24, r24
    160a:	c1 f1       	breq	.+112    	; 0x167c <_ZN14hd44780_I2Cexp6ioinitEv+0xd8>
			return(status);
	}

	// initialize IO expander chip

	Wire.beginTransmission(_addr);
    160c:	68 a1       	ldd	r22, Y+32	; 0x20
    160e:	8d e3       	ldi	r24, 0x3D	; 61
    1610:	94 e0       	ldi	r25, 0x04	; 4
    1612:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN7TwoWire17beginTransmissionEh>

	if(_expType == I2Cexp_MCP23008)
    1616:	89 a1       	ldd	r24, Y+33	; 0x21
    1618:	82 30       	cpi	r24, 0x02	; 2
    161a:	09 f0       	breq	.+2      	; 0x161e <_ZN14hd44780_I2Cexp6ioinitEv+0x7a>
    161c:	76 c0       	rjmp	.+236    	; 0x170a <_ZN14hd44780_I2Cexp6ioinitEv+0x166>
		 * within the same i2c connection by simply sending more bytes.
		 * This is necessary as the code uses back to back writes to perform
		 * the nibble updates as well as the toggling the enable signal.
		 * This methodology offers significant performance gains.
		 */
		Wire.write(5);	// point to IOCON
    161e:	65 e0       	ldi	r22, 0x05	; 5
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	8d e3       	ldi	r24, 0x3D	; 61
    1624:	94 e0       	ldi	r25, 0x04	; 4
    1626:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
		Wire.write(0x20);// disable sequential mode (enables BYTE mode)
    162a:	60 e2       	ldi	r22, 0x20	; 32
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	8d e3       	ldi	r24, 0x3D	; 61
    1630:	94 e0       	ldi	r25, 0x04	; 4
    1632:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    1636:	8d e3       	ldi	r24, 0x3D	; 61
    1638:	94 e0       	ldi	r25, 0x04	; 4
    163a:	0e 94 fe 11 	call	0x23fc	; 0x23fc <_ZN7TwoWire15endTransmissionEv>

		/*
		 * Now set up output port
		 */
		Wire.beginTransmission(_addr);
    163e:	68 a1       	ldd	r22, Y+32	; 0x20
    1640:	8d e3       	ldi	r24, 0x3D	; 61
    1642:	94 e0       	ldi	r25, 0x04	; 4
    1644:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t)0); // point to IODIR
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	8d e3       	ldi	r24, 0x3D	; 61
    164c:	94 e0       	ldi	r25, 0x04	; 4
    164e:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN7TwoWire5writeEh>
		Wire.write((uint8_t)0); // all pins output
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	8d e3       	ldi	r24, 0x3D	; 61
    1656:	94 e0       	ldi	r25, 0x04	; 4
    1658:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    165c:	8d e3       	ldi	r24, 0x3D	; 61
    165e:	94 e0       	ldi	r25, 0x04	; 4
    1660:	0e 94 fe 11 	call	0x23fc	; 0x23fc <_ZN7TwoWire15endTransmissionEv>
	
		/*
		 * point chip to GPIO
		 */
		Wire.beginTransmission(_addr);
    1664:	68 a1       	ldd	r22, Y+32	; 0x20
    1666:	8d e3       	ldi	r24, 0x3D	; 61
    1668:	94 e0       	ldi	r25, 0x04	; 4
    166a:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write(9); // point to GPIO
    166e:	69 e0       	ldi	r22, 0x09	; 9
    1670:	70 e0       	ldi	r23, 0x00	; 0
    1672:	8d e3       	ldi	r24, 0x3D	; 61
    1674:	94 e0       	ldi	r25, 0x04	; 4
    1676:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
    167a:	47 c0       	rjmp	.+142    	; 0x170a <_ZN14hd44780_I2Cexp6ioinitEv+0x166>

	/*
	 * First try to write 0xff to MCP23008 IODIR
	 * On a PCF8574 this will end up writing 0 and then ff to output port
	 */
	Wire.beginTransmission(address);
    167c:	61 2f       	mov	r22, r17
    167e:	8d e3       	ldi	r24, 0x3D	; 61
    1680:	94 e0       	ldi	r25, 0x04	; 4
    1682:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
    1686:	60 e0       	ldi	r22, 0x00	; 0
    1688:	8d e3       	ldi	r24, 0x3D	; 61
    168a:	94 e0       	ldi	r25, 0x04	; 4
    168c:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN7TwoWire5writeEh>
	Wire.write((uint8_t) 0xff);	// try to write to MCP23008 IODR
    1690:	6f ef       	ldi	r22, 0xFF	; 255
    1692:	8d e3       	ldi	r24, 0x3D	; 61
    1694:	94 e0       	ldi	r25, 0x04	; 4
    1696:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    169a:	8d e3       	ldi	r24, 0x3D	; 61
    169c:	94 e0       	ldi	r25, 0x04	; 4
    169e:	0e 94 fe 11 	call	0x23fc	; 0x23fc <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now try to point MCP23008 to IODIR for read
	 * On a PCF8574 this will end up writing a 0 to the output port
	 */

	Wire.beginTransmission(address);
    16a2:	61 2f       	mov	r22, r17
    16a4:	8d e3       	ldi	r24, 0x3D	; 61
    16a6:	94 e0       	ldi	r25, 0x04	; 4
    16a8:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
    16ac:	60 e0       	ldi	r22, 0x00	; 0
    16ae:	8d e3       	ldi	r24, 0x3D	; 61
    16b0:	94 e0       	ldi	r25, 0x04	; 4
    16b2:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    16b6:	8d e3       	ldi	r24, 0x3D	; 61
    16b8:	94 e0       	ldi	r25, 0x04	; 4
    16ba:	0e 94 fe 11 	call	0x23fc	; 0x23fc <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now read a byte
	 * On a MCP23008 we should read the 0xff we wrote to IODIR
	 * On a PCF8574 we should read 0 since the output port was set to 0
	 */
	Wire.requestFrom((int)address, 1);
    16be:	61 2f       	mov	r22, r17
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	41 e0       	ldi	r20, 0x01	; 1
    16c4:	50 e0       	ldi	r21, 0x00	; 0
    16c6:	8d e3       	ldi	r24, 0x3D	; 61
    16c8:	94 e0       	ldi	r25, 0x04	; 4
    16ca:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    16ce:	8d e3       	ldi	r24, 0x3D	; 61
    16d0:	94 e0       	ldi	r25, 0x04	; 4
    16d2:	0e 94 a2 10 	call	0x2144	; 0x2144 <_ZN7TwoWire4readEv>
    16d6:	9c 01       	movw	r18, r24

	if(data == 0xff)
    16d8:	8f 3f       	cpi	r24, 0xFF	; 255
    16da:	91 05       	cpc	r25, r1
    16dc:	29 f0       	breq	.+10     	; 0x16e8 <_ZN14hd44780_I2Cexp6ioinitEv+0x144>
	{
		chiptype = I2Cexp_MCP23008;
    16de:	91 e0       	ldi	r25, 0x01	; 1
    16e0:	23 2b       	or	r18, r19
    16e2:	19 f0       	breq	.+6      	; 0x16ea <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	01 c0       	rjmp	.+2      	; 0x16ea <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    16e8:	92 e0       	ldi	r25, 0x02	; 2
	if(!_addr) // if we couldn't locate it, return error
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);
    16ea:	99 a3       	std	Y+33, r25	; 0x21

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
    16ec:	99 23       	and	r25, r25
    16ee:	09 f1       	breq	.+66     	; 0x1732 <_ZN14hd44780_I2Cexp6ioinitEv+0x18e>
			return(hd44780::RV_EIO);

		if(_expType == I2Cexp_PCF8574)
    16f0:	91 30       	cpi	r25, 0x01	; 1
    16f2:	21 f4       	brne	.+8      	; 0x16fc <_ZN14hd44780_I2Cexp6ioinitEv+0x158>
			status = autocfg8574();		// go auto configure the pin mappings
    16f4:	ce 01       	movw	r24, r28
    16f6:	0e 94 68 09 	call	0x12d0	; 0x12d0 <_ZN14hd44780_I2Cexp11autocfg8574Ev>
    16fa:	03 c0       	rjmp	.+6      	; 0x1702 <_ZN14hd44780_I2Cexp6ioinitEv+0x15e>
		else
			status = autocfgMCP23008();	// go auto configure the pin mappings
    16fc:	ce 01       	movw	r24, r28
    16fe:	0e 94 34 0a 	call	0x1468	; 0x1468 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>
		if(status)
    1702:	00 97       	sbiw	r24, 0x00	; 0
    1704:	09 f4       	brne	.+2      	; 0x1708 <_ZN14hd44780_I2Cexp6ioinitEv+0x164>
    1706:	82 cf       	rjmp	.-252    	; 0x160c <_ZN14hd44780_I2Cexp6ioinitEv+0x68>
    1708:	16 c0       	rjmp	.+44     	; 0x1736 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
		 */
		Wire.beginTransmission(_addr);
		Wire.write(9); // point to GPIO
		
	}
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
    170a:	60 e0       	ldi	r22, 0x00	; 0
    170c:	8d e3       	ldi	r24, 0x3D	; 61
    170e:	94 e0       	ldi	r25, 0x04	; 4
    1710:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN7TwoWire5writeEh>
	if( (status = Wire.endTransmission()) ) // assignment
    1714:	8d e3       	ldi	r24, 0x3D	; 61
    1716:	94 e0       	ldi	r25, 0x04	; 4
    1718:	0e 94 fe 11 	call	0x23fc	; 0x23fc <_ZN7TwoWire15endTransmissionEv>
    171c:	21 e0       	ldi	r18, 0x01	; 1
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	81 11       	cpse	r24, r1
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <_ZN14hd44780_I2Cexp6ioinitEv+0x184>
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	88 27       	eor	r24, r24
    172a:	99 27       	eor	r25, r25
    172c:	82 1b       	sub	r24, r18
    172e:	93 0b       	sbc	r25, r19
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
			return(hd44780::RV_EIO);
    1732:	8f ef       	ldi	r24, 0xFF	; 255
    1734:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
	if( (status = Wire.endTransmission()) ) // assignment
		status = hd44780::RV_EIO;

	return ( status );
}
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	1f 91       	pop	r17
    173c:	08 95       	ret

0000173e <_ZN3dht11_readSensorEhhh>:
    if (bits[4] != sum)
    {
        return DHTLIB_ERROR_CHECKSUM;
    }
    return result;
}
    173e:	2f 92       	push	r2
    1740:	3f 92       	push	r3
    1742:	4f 92       	push	r4
    1744:	5f 92       	push	r5
    1746:	6f 92       	push	r6
    1748:	7f 92       	push	r7
    174a:	8f 92       	push	r8
    174c:	9f 92       	push	r9
    174e:	af 92       	push	r10
    1750:	bf 92       	push	r11
    1752:	cf 92       	push	r12
    1754:	df 92       	push	r13
    1756:	ef 92       	push	r14
    1758:	ff 92       	push	r15
    175a:	0f 93       	push	r16
    175c:	1f 93       	push	r17
    175e:	cf 93       	push	r28
    1760:	df 93       	push	r29
    1762:	ec 01       	movw	r28, r24
    1764:	f6 2e       	mov	r15, r22
    1766:	04 2f       	mov	r16, r20
    1768:	e2 2e       	mov	r14, r18
    176a:	86 2f       	mov	r24, r22
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	fc 01       	movw	r30, r24
    1770:	e8 5d       	subi	r30, 0xD8	; 216
    1772:	fe 4f       	sbci	r31, 0xFE	; 254
    1774:	14 91       	lpm	r17, Z
    1776:	fc 01       	movw	r30, r24
    1778:	e9 5b       	subi	r30, 0xB9	; 185
    177a:	fe 4f       	sbci	r31, 0xFE	; 254
    177c:	e4 91       	lpm	r30, Z
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	ee 0f       	add	r30, r30
    1782:	ff 1f       	adc	r31, r31
    1784:	ea 59       	subi	r30, 0x9A	; 154
    1786:	fe 4f       	sbci	r31, 0xFE	; 254
    1788:	c5 90       	lpm	r12, Z+
    178a:	d4 90       	lpm	r13, Z
    178c:	61 e0       	ldi	r22, 0x01	; 1
    178e:	8f 2d       	mov	r24, r15
    1790:	0e 94 49 1b 	call	0x3692	; 0x3692 <pinMode>
    1794:	60 e0       	ldi	r22, 0x00	; 0
    1796:	8f 2d       	mov	r24, r15
    1798:	0e 94 85 1b 	call	0x370a	; 0x370a <digitalWrite>
    179c:	09 30       	cpi	r16, 0x09	; 9
    179e:	38 f0       	brcs	.+14     	; 0x17ae <_ZN3dht11_readSensorEhhh+0x70>
    17a0:	60 2f       	mov	r22, r16
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	0e 94 3e 1a 	call	0x347c	; 0x347c <delay>
    17ac:	0a c0       	rjmp	.+20     	; 0x17c2 <_ZN3dht11_readSensorEhhh+0x84>
    17ae:	88 ee       	ldi	r24, 0xE8	; 232
    17b0:	93 e0       	ldi	r25, 0x03	; 3
    17b2:	9c 01       	movw	r18, r24
    17b4:	02 9f       	mul	r16, r18
    17b6:	c0 01       	movw	r24, r0
    17b8:	03 9f       	mul	r16, r19
    17ba:	90 0d       	add	r25, r0
    17bc:	11 24       	eor	r1, r1
    17be:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <delayMicroseconds>
    17c2:	60 e0       	ldi	r22, 0x00	; 0
    17c4:	8f 2d       	mov	r24, r15
    17c6:	0e 94 49 1b 	call	0x3692	; 0x3692 <pinMode>
    17ca:	80 e2       	ldi	r24, 0x20	; 32
    17cc:	93 e0       	ldi	r25, 0x03	; 3
    17ce:	d6 01       	movw	r26, r12
    17d0:	2c 91       	ld	r18, X
    17d2:	21 23       	and	r18, r17
    17d4:	21 f0       	breq	.+8      	; 0x17de <_ZN3dht11_readSensorEhhh+0xa0>
    17d6:	01 97       	sbiw	r24, 0x01	; 1
    17d8:	d1 f7       	brne	.-12     	; 0x17ce <_ZN3dht11_readSensorEhhh+0x90>
    17da:	8d ef       	ldi	r24, 0xFD	; 253
    17dc:	5f c0       	rjmp	.+190    	; 0x189c <_ZN3dht11_readSensorEhhh+0x15e>
    17de:	80 e9       	ldi	r24, 0x90	; 144
    17e0:	91 e0       	ldi	r25, 0x01	; 1
    17e2:	f6 01       	movw	r30, r12
    17e4:	20 81       	ld	r18, Z
    17e6:	21 23       	and	r18, r17
    17e8:	21 f4       	brne	.+8      	; 0x17f2 <_ZN3dht11_readSensorEhhh+0xb4>
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	d1 f7       	brne	.-12     	; 0x17e2 <_ZN3dht11_readSensorEhhh+0xa4>
    17ee:	8c ef       	ldi	r24, 0xFC	; 252
    17f0:	55 c0       	rjmp	.+170    	; 0x189c <_ZN3dht11_readSensorEhhh+0x15e>
    17f2:	80 e9       	ldi	r24, 0x90	; 144
    17f4:	91 e0       	ldi	r25, 0x01	; 1
    17f6:	d6 01       	movw	r26, r12
    17f8:	2c 91       	ld	r18, X
    17fa:	21 23       	and	r18, r17
    17fc:	21 f0       	breq	.+8      	; 0x1806 <_ZN3dht11_readSensorEhhh+0xc8>
    17fe:	01 97       	sbiw	r24, 0x01	; 1
    1800:	d1 f7       	brne	.-12     	; 0x17f6 <_ZN3dht11_readSensorEhhh+0xb8>
    1802:	8b ef       	ldi	r24, 0xFB	; 251
    1804:	4b c0       	rjmp	.+150    	; 0x189c <_ZN3dht11_readSensorEhhh+0x15e>
    1806:	58 e2       	ldi	r21, 0x28	; 40
    1808:	80 e9       	ldi	r24, 0x90	; 144
    180a:	91 e0       	ldi	r25, 0x01	; 1
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	e0 e9       	ldi	r30, 0x90	; 144
    1812:	f1 e0       	ldi	r31, 0x01	; 1
    1814:	00 e0       	ldi	r16, 0x00	; 0
    1816:	60 e0       	ldi	r22, 0x00	; 0
    1818:	31 2c       	mov	r3, r1
    181a:	40 e8       	ldi	r20, 0x80	; 128
    181c:	25 2e       	mov	r2, r21
    181e:	2e 18       	sub	r2, r14
    1820:	70 e9       	ldi	r23, 0x90	; 144
    1822:	87 2e       	mov	r8, r23
    1824:	99 24       	eor	r9, r9
    1826:	93 94       	inc	r9
    1828:	a1 2c       	mov	r10, r1
    182a:	b1 2c       	mov	r11, r1
    182c:	d6 01       	movw	r26, r12
    182e:	7c 91       	ld	r23, X
    1830:	71 23       	and	r23, r17
    1832:	61 f5       	brne	.+88     	; 0x188c <_ZN3dht11_readSensorEhhh+0x14e>
    1834:	00 23       	and	r16, r16
    1836:	51 f1       	breq	.+84     	; 0x188c <_ZN3dht11_readSensorEhhh+0x14e>
    1838:	25 16       	cp	r2, r21
    183a:	98 f4       	brcc	.+38     	; 0x1862 <_ZN3dht11_readSensorEhhh+0x124>
    183c:	8e 17       	cp	r24, r30
    183e:	9f 07       	cpc	r25, r31
    1840:	08 f4       	brcc	.+2      	; 0x1844 <_ZN3dht11_readSensorEhhh+0x106>
    1842:	fc 01       	movw	r30, r24
    1844:	24 01       	movw	r4, r8
    1846:	35 01       	movw	r6, r10
    1848:	4e 1a       	sub	r4, r30
    184a:	5f 0a       	sbc	r5, r31
    184c:	61 08       	sbc	r6, r1
    184e:	71 08       	sbc	r7, r1
    1850:	82 e0       	ldi	r24, 0x02	; 2
    1852:	75 94       	asr	r7
    1854:	67 94       	ror	r6
    1856:	57 94       	ror	r5
    1858:	47 94       	ror	r4
    185a:	8a 95       	dec	r24
    185c:	d1 f7       	brne	.-12     	; 0x1852 <_ZN3dht11_readSensorEhhh+0x114>
    185e:	92 01       	movw	r18, r4
    1860:	07 c0       	rjmp	.+14     	; 0x1870 <_ZN3dht11_readSensorEhhh+0x132>
    1862:	7f 01       	movw	r14, r30
    1864:	e2 1a       	sub	r14, r18
    1866:	f3 0a       	sbc	r15, r19
    1868:	e8 16       	cp	r14, r24
    186a:	f9 06       	cpc	r15, r25
    186c:	08 f0       	brcs	.+2      	; 0x1870 <_ZN3dht11_readSensorEhhh+0x132>
    186e:	64 2b       	or	r22, r20
    1870:	46 95       	lsr	r20
    1872:	49 f4       	brne	.+18     	; 0x1886 <_ZN3dht11_readSensorEhhh+0x148>
    1874:	ce 01       	movw	r24, r28
    1876:	83 0d       	add	r24, r3
    1878:	91 1d       	adc	r25, r1
    187a:	dc 01       	movw	r26, r24
    187c:	18 96       	adiw	r26, 0x08	; 8
    187e:	6c 93       	st	X, r22
    1880:	33 94       	inc	r3
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	40 e8       	ldi	r20, 0x80	; 128
    1886:	51 50       	subi	r21, 0x01	; 1
    1888:	80 e9       	ldi	r24, 0x90	; 144
    188a:	91 e0       	ldi	r25, 0x01	; 1
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	29 f0       	breq	.+10     	; 0x189a <_ZN3dht11_readSensorEhhh+0x15c>
    1890:	07 2f       	mov	r16, r23
    1892:	51 11       	cpse	r21, r1
    1894:	cb cf       	rjmp	.-106    	; 0x182c <_ZN3dht11_readSensorEhhh+0xee>
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	01 c0       	rjmp	.+2      	; 0x189c <_ZN3dht11_readSensorEhhh+0x15e>
    189a:	8e ef       	ldi	r24, 0xFE	; 254
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	1f 91       	pop	r17
    18a2:	0f 91       	pop	r16
    18a4:	ff 90       	pop	r15
    18a6:	ef 90       	pop	r14
    18a8:	df 90       	pop	r13
    18aa:	cf 90       	pop	r12
    18ac:	bf 90       	pop	r11
    18ae:	af 90       	pop	r10
    18b0:	9f 90       	pop	r9
    18b2:	8f 90       	pop	r8
    18b4:	7f 90       	pop	r7
    18b6:	6f 90       	pop	r6
    18b8:	5f 90       	pop	r5
    18ba:	4f 90       	pop	r4
    18bc:	3f 90       	pop	r3
    18be:	2f 90       	pop	r2
    18c0:	08 95       	ret

000018c2 <_ZN3dht4readEh>:

int8_t dht::read(uint8_t pin)
{
    18c2:	cf 92       	push	r12
    18c4:	df 92       	push	r13
    18c6:	ef 92       	push	r14
    18c8:	ff 92       	push	r15
    18ca:	0f 93       	push	r16
    18cc:	1f 93       	push	r17
    18ce:	cf 93       	push	r28
    18d0:	df 93       	push	r29
    18d2:	ec 01       	movw	r28, r24
    // READ VALUES
    if (_disableIRQ) noInterrupts();
    18d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d6:	88 23       	and	r24, r24
    18d8:	09 f0       	breq	.+2      	; 0x18dc <_ZN3dht4readEh+0x1a>
    18da:	f8 94       	cli
    int8_t result = _readSensor(pin, DHTLIB_DHT_WAKEUP, DHTLIB_DHT_LEADING_ZEROS);
    18dc:	26 e0       	ldi	r18, 0x06	; 6
    18de:	41 e0       	ldi	r20, 0x01	; 1
    18e0:	ce 01       	movw	r24, r28
    18e2:	0e 94 9f 0b 	call	0x173e	; 0x173e <_ZN3dht11_readSensorEhhh>
    18e6:	e8 2e       	mov	r14, r24
    if (_disableIRQ) interrupts();
    18e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ea:	88 23       	and	r24, r24
    18ec:	09 f0       	breq	.+2      	; 0x18f0 <_ZN3dht4readEh+0x2e>
    18ee:	78 94       	sei

    // these bits are always zero, masking them reduces errors.
    bits[0] &= 0x03;
    18f0:	08 85       	ldd	r16, Y+8	; 0x08
    18f2:	03 70       	andi	r16, 0x03	; 3
    18f4:	08 87       	std	Y+8, r16	; 0x08
    bits[2] &= 0x83;
    18f6:	1a 85       	ldd	r17, Y+10	; 0x0a
    18f8:	81 2f       	mov	r24, r17
    18fa:	83 78       	andi	r24, 0x83	; 131
    18fc:	f8 2e       	mov	r15, r24
    18fe:	8a 87       	std	Y+10, r24	; 0x0a

    // CONVERT AND STORE
    humidity = (bits[0]*256 + bits[1]) * 0.1;
    1900:	c9 84       	ldd	r12, Y+9	; 0x09
    1902:	60 2f       	mov	r22, r16
    1904:	70 e0       	ldi	r23, 0x00	; 0
    1906:	76 2f       	mov	r23, r22
    1908:	66 27       	eor	r22, r22
    190a:	6c 0d       	add	r22, r12
    190c:	71 1d       	adc	r23, r1
    190e:	07 2e       	mov	r0, r23
    1910:	00 0c       	add	r0, r0
    1912:	88 0b       	sbc	r24, r24
    1914:	99 0b       	sbc	r25, r25
    1916:	0e 94 79 12 	call	0x24f2	; 0x24f2 <__floatsisf>
    191a:	2d ec       	ldi	r18, 0xCD	; 205
    191c:	3c ec       	ldi	r19, 0xCC	; 204
    191e:	4c ec       	ldi	r20, 0xCC	; 204
    1920:	5d e3       	ldi	r21, 0x3D	; 61
    1922:	0e 94 29 13 	call	0x2652	; 0x2652 <__mulsf3>
    1926:	68 83       	st	Y, r22
    1928:	79 83       	std	Y+1, r23	; 0x01
    192a:	8a 83       	std	Y+2, r24	; 0x02
    192c:	9b 83       	std	Y+3, r25	; 0x03
    temperature = ((bits[2] & 0x7F)*256 + bits[3]) * 0.1;
    192e:	db 84       	ldd	r13, Y+11	; 0x0b
    1930:	13 70       	andi	r17, 0x03	; 3
    1932:	61 2f       	mov	r22, r17
    1934:	70 e0       	ldi	r23, 0x00	; 0
    1936:	76 2f       	mov	r23, r22
    1938:	66 27       	eor	r22, r22
    193a:	6d 0d       	add	r22, r13
    193c:	71 1d       	adc	r23, r1
    193e:	07 2e       	mov	r0, r23
    1940:	00 0c       	add	r0, r0
    1942:	88 0b       	sbc	r24, r24
    1944:	99 0b       	sbc	r25, r25
    1946:	0e 94 79 12 	call	0x24f2	; 0x24f2 <__floatsisf>
    194a:	2d ec       	ldi	r18, 0xCD	; 205
    194c:	3c ec       	ldi	r19, 0xCC	; 204
    194e:	4c ec       	ldi	r20, 0xCC	; 204
    1950:	5d e3       	ldi	r21, 0x3D	; 61
    1952:	0e 94 29 13 	call	0x2652	; 0x2652 <__mulsf3>
    if (bits[2] & 0x80)  // negative temperature
    1956:	f7 fc       	sbrc	r15, 7
    1958:	05 c0       	rjmp	.+10     	; 0x1964 <_ZN3dht4readEh+0xa2>
    bits[0] &= 0x03;
    bits[2] &= 0x83;

    // CONVERT AND STORE
    humidity = (bits[0]*256 + bits[1]) * 0.1;
    temperature = ((bits[2] & 0x7F)*256 + bits[3]) * 0.1;
    195a:	6c 83       	std	Y+4, r22	; 0x04
    195c:	7d 83       	std	Y+5, r23	; 0x05
    195e:	8e 83       	std	Y+6, r24	; 0x06
    1960:	9f 83       	std	Y+7, r25	; 0x07
    1962:	07 c0       	rjmp	.+14     	; 0x1972 <_ZN3dht4readEh+0xb0>
    if (bits[2] & 0x80)  // negative temperature
    {
        temperature = -temperature;
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	b0 58       	subi	r27, 0x80	; 128
    196a:	8c 83       	std	Y+4, r24	; 0x04
    196c:	9d 83       	std	Y+5, r25	; 0x05
    196e:	ae 83       	std	Y+6, r26	; 0x06
    1970:	bf 83       	std	Y+7, r27	; 0x07
    }

    // TEST CHECKSUM
    uint8_t sum = bits[0] + bits[1] + bits[2] + bits[3];
    if (bits[4] != sum)
    1972:	dc 0c       	add	r13, r12
    1974:	0d 0d       	add	r16, r13
    1976:	f0 0e       	add	r15, r16
    1978:	8c 85       	ldd	r24, Y+12	; 0x0c
    197a:	f8 12       	cpse	r15, r24
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <_ZN3dht4readEh+0xc0>
    {
        return DHTLIB_ERROR_CHECKSUM;
    }
    return result;
    197e:	8e 2d       	mov	r24, r14
    1980:	01 c0       	rjmp	.+2      	; 0x1984 <_ZN3dht4readEh+0xc2>

    // TEST CHECKSUM
    uint8_t sum = bits[0] + bits[1] + bits[2] + bits[3];
    if (bits[4] != sum)
    {
        return DHTLIB_ERROR_CHECKSUM;
    1982:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return result;
}
    1984:	df 91       	pop	r29
    1986:	cf 91       	pop	r28
    1988:	1f 91       	pop	r17
    198a:	0f 91       	pop	r16
    198c:	ff 90       	pop	r15
    198e:	ef 90       	pop	r14
    1990:	df 90       	pop	r13
    1992:	cf 90       	pop	r12
    1994:	08 95       	ret

00001996 <_ZN7hd447806ioinitEv>:
	{
		buf[i] = pgm_read_byte(charmap++);
	}
	// call the RAM based function to actually send it to the LCD
	return(createChar(location, buf));
}
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	08 95       	ret

0000199c <_ZN7hd447806ioreadENS_6iotypeE>:
    199c:	8d ef       	ldi	r24, 0xFD	; 253
    199e:	9f ef       	ldi	r25, 0xFF	; 255
    19a0:	08 95       	ret

000019a2 <_ZN7hd4478014iosetBacklightEh>:
    19a2:	8d ef       	ldi	r24, 0xFD	; 253
    19a4:	9f ef       	ldi	r25, 0xFF	; 255
    19a6:	08 95       	ret

000019a8 <_ZN7hd44780C1Ev>:
    19a8:	cf 93       	push	r28
    19aa:	df 93       	push	r29
    19ac:	ec 01       	movw	r28, r24
    19ae:	1b 82       	std	Y+3, r1	; 0x03
    19b0:	1a 82       	std	Y+2, r1	; 0x02
    19b2:	84 e5       	ldi	r24, 0x54	; 84
    19b4:	92 e0       	ldi	r25, 0x02	; 2
    19b6:	99 83       	std	Y+1, r25	; 0x01
    19b8:	88 83       	st	Y, r24
    19ba:	1f 82       	std	Y+7, r1	; 0x07
    19bc:	18 86       	std	Y+8, r1	; 0x08
    19be:	80 ed       	ldi	r24, 0xD0	; 208
    19c0:	97 e0       	ldi	r25, 0x07	; 7
    19c2:	a0 e0       	ldi	r26, 0x00	; 0
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	88 8b       	std	Y+16, r24	; 0x10
    19c8:	99 8b       	std	Y+17, r25	; 0x11
    19ca:	aa 8b       	std	Y+18, r26	; 0x12
    19cc:	bb 8b       	std	Y+19, r27	; 0x13
    19ce:	86 e2       	ldi	r24, 0x26	; 38
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	a0 e0       	ldi	r26, 0x00	; 0
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	8c 8b       	std	Y+20, r24	; 0x14
    19d8:	9d 8b       	std	Y+21, r25	; 0x15
    19da:	ae 8b       	std	Y+22, r26	; 0x16
    19dc:	bf 8b       	std	Y+23, r27	; 0x17
    19de:	1c 86       	std	Y+12, r1	; 0x0c
    19e0:	1d 86       	std	Y+13, r1	; 0x0d
    19e2:	1e 86       	std	Y+14, r1	; 0x0e
    19e4:	1f 86       	std	Y+15, r1	; 0x0f
    19e6:	1b 86       	std	Y+11, r1	; 0x0b
    19e8:	0e 94 19 1a 	call	0x3432	; 0x3432 <micros>
    19ec:	68 8f       	std	Y+24, r22	; 0x18
    19ee:	79 8f       	std	Y+25, r23	; 0x19
    19f0:	8a 8f       	std	Y+26, r24	; 0x1a
    19f2:	9b 8f       	std	Y+27, r25	; 0x1b
    19f4:	1c 8e       	std	Y+28, r1	; 0x1c
    19f6:	1d 8e       	std	Y+29, r1	; 0x1d
    19f8:	1e 8e       	std	Y+30, r1	; 0x1e
    19fa:	1f 8e       	std	Y+31, r1	; 0x1f
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	08 95       	ret

00001a02 <_ZN7hd447809backlightEv>:
    1a02:	dc 01       	movw	r26, r24
    1a04:	ed 91       	ld	r30, X+
    1a06:	fc 91       	ld	r31, X
    1a08:	06 84       	ldd	r0, Z+14	; 0x0e
    1a0a:	f7 85       	ldd	r31, Z+15	; 0x0f
    1a0c:	e0 2d       	mov	r30, r0
    1a0e:	6f ef       	ldi	r22, 0xFF	; 255
    1a10:	09 94       	ijmp

00001a12 <_ZN7hd4478011noBacklightEv>:
    1a12:	dc 01       	movw	r26, r24
    1a14:	ed 91       	ld	r30, X+
    1a16:	fc 91       	ld	r31, X
    1a18:	06 84       	ldd	r0, Z+14	; 0x0e
    1a1a:	f7 85       	ldd	r31, Z+15	; 0x0f
    1a1c:	e0 2d       	mov	r30, r0
    1a1e:	60 e0       	ldi	r22, 0x00	; 0
    1a20:	09 94       	ijmp

00001a22 <_ZN7hd447807commandEh>:
    1a22:	8f 92       	push	r8
    1a24:	9f 92       	push	r9
    1a26:	af 92       	push	r10
    1a28:	bf 92       	push	r11
    1a2a:	ef 92       	push	r14
    1a2c:	ff 92       	push	r15
    1a2e:	1f 93       	push	r17
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
    1a34:	ec 01       	movw	r28, r24
    1a36:	16 2f       	mov	r17, r22
    1a38:	e8 81       	ld	r30, Y
    1a3a:	f9 81       	ldd	r31, Y+1	; 0x01
    1a3c:	04 84       	ldd	r0, Z+12	; 0x0c
    1a3e:	f5 85       	ldd	r31, Z+13	; 0x0d
    1a40:	e0 2d       	mov	r30, r0
    1a42:	46 2f       	mov	r20, r22
    1a44:	60 e0       	ldi	r22, 0x00	; 0
    1a46:	09 95       	icall
    1a48:	7c 01       	movw	r14, r24
    1a4a:	11 50       	subi	r17, 0x01	; 1
    1a4c:	12 30       	cpi	r17, 0x02	; 2
    1a4e:	38 f4       	brcc	.+14     	; 0x1a5e <_ZN7hd447807commandEh+0x3c>
    1a50:	19 86       	std	Y+9, r1	; 0x09
    1a52:	1a 86       	std	Y+10, r1	; 0x0a
    1a54:	88 88       	ldd	r8, Y+16	; 0x10
    1a56:	99 88       	ldd	r9, Y+17	; 0x11
    1a58:	aa 88       	ldd	r10, Y+18	; 0x12
    1a5a:	bb 88       	ldd	r11, Y+19	; 0x13
    1a5c:	04 c0       	rjmp	.+8      	; 0x1a66 <_ZN7hd447807commandEh+0x44>
    1a5e:	8c 88       	ldd	r8, Y+20	; 0x14
    1a60:	9d 88       	ldd	r9, Y+21	; 0x15
    1a62:	ae 88       	ldd	r10, Y+22	; 0x16
    1a64:	bf 88       	ldd	r11, Y+23	; 0x17
    1a66:	0e 94 19 1a 	call	0x3432	; 0x3432 <micros>
    1a6a:	68 8f       	std	Y+24, r22	; 0x18
    1a6c:	79 8f       	std	Y+25, r23	; 0x19
    1a6e:	8a 8f       	std	Y+26, r24	; 0x1a
    1a70:	9b 8f       	std	Y+27, r25	; 0x1b
    1a72:	8c 8e       	std	Y+28, r8	; 0x1c
    1a74:	9d 8e       	std	Y+29, r9	; 0x1d
    1a76:	ae 8e       	std	Y+30, r10	; 0x1e
    1a78:	bf 8e       	std	Y+31, r11	; 0x1f
    1a7a:	c7 01       	movw	r24, r14
    1a7c:	df 91       	pop	r29
    1a7e:	cf 91       	pop	r28
    1a80:	1f 91       	pop	r17
    1a82:	ff 90       	pop	r15
    1a84:	ef 90       	pop	r14
    1a86:	bf 90       	pop	r11
    1a88:	af 90       	pop	r10
    1a8a:	9f 90       	pop	r9
    1a8c:	8f 90       	pop	r8
    1a8e:	08 95       	ret

00001a90 <_ZN7hd447805clearEv>:
    1a90:	61 e0       	ldi	r22, 0x01	; 1
    1a92:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <_ZN7hd447807commandEh>

00001a96 <_ZN7hd447804homeEv>:
    1a96:	62 e0       	ldi	r22, 0x02	; 2
    1a98:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <_ZN7hd447807commandEh>

00001a9c <_ZN7hd447809setCursorEhh>:
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	80 85       	ldd	r24, Z+8	; 0x08
    1aa0:	48 17       	cp	r20, r24
    1aa2:	10 f0       	brcs	.+4      	; 0x1aa8 <_ZN7hd447809setCursorEhh+0xc>
    1aa4:	4f ef       	ldi	r20, 0xFF	; 255
    1aa6:	48 0f       	add	r20, r24
    1aa8:	93 85       	ldd	r25, Z+11	; 0x0b
    1aaa:	99 23       	and	r25, r25
    1aac:	59 f0       	breq	.+22     	; 0x1ac4 <_ZN7hd447809setCursorEhh+0x28>
    1aae:	97 81       	ldd	r25, Z+7	; 0x07
    1ab0:	69 17       	cp	r22, r25
    1ab2:	30 f0       	brcs	.+12     	; 0x1ac0 <_ZN7hd447809setCursorEhh+0x24>
    1ab4:	69 1b       	sub	r22, r25
    1ab6:	4f 5f       	subi	r20, 0xFF	; 255
    1ab8:	48 17       	cp	r20, r24
    1aba:	d0 f3       	brcs	.-12     	; 0x1ab0 <_ZN7hd447809setCursorEhh+0x14>
    1abc:	40 e0       	ldi	r20, 0x00	; 0
    1abe:	f8 cf       	rjmp	.-16     	; 0x1ab0 <_ZN7hd447809setCursorEhh+0x14>
    1ac0:	61 87       	std	Z+9, r22	; 0x09
    1ac2:	42 87       	std	Z+10, r20	; 0x0a
    1ac4:	df 01       	movw	r26, r30
    1ac6:	a4 0f       	add	r26, r20
    1ac8:	b1 1d       	adc	r27, r1
    1aca:	1c 96       	adiw	r26, 0x0c	; 12
    1acc:	8c 91       	ld	r24, X
    1ace:	68 0f       	add	r22, r24
    1ad0:	60 68       	ori	r22, 0x80	; 128
    1ad2:	cf 01       	movw	r24, r30
    1ad4:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <_ZN7hd447807commandEh>

00001ad8 <_ZN7hd447807displayEv>:
    1ad8:	fc 01       	movw	r30, r24
    1ada:	65 81       	ldd	r22, Z+5	; 0x05
    1adc:	26 2f       	mov	r18, r22
    1ade:	24 60       	ori	r18, 0x04	; 4
    1ae0:	25 83       	std	Z+5, r18	; 0x05
    1ae2:	6c 60       	ori	r22, 0x0C	; 12
    1ae4:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <_ZN7hd447807commandEh>

00001ae8 <_ZN7hd447805beginEhhh>:
    1ae8:	0f 93       	push	r16
    1aea:	1f 93       	push	r17
    1aec:	cf 93       	push	r28
    1aee:	df 93       	push	r29
    1af0:	ec 01       	movw	r28, r24
    1af2:	02 2f       	mov	r16, r18
    1af4:	14 2f       	mov	r17, r20
    1af6:	45 30       	cpi	r20, 0x05	; 5
    1af8:	08 f0       	brcs	.+2      	; 0x1afc <_ZN7hd447805beginEhhh+0x14>
    1afa:	14 e0       	ldi	r17, 0x04	; 4
    1afc:	8c 85       	ldd	r24, Y+12	; 0x0c
    1afe:	81 11       	cpse	r24, r1
    1b00:	09 c0       	rjmp	.+18     	; 0x1b14 <_ZN7hd447805beginEhhh+0x2c>
    1b02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b04:	81 11       	cpse	r24, r1
    1b06:	06 c0       	rjmp	.+12     	; 0x1b14 <_ZN7hd447805beginEhhh+0x2c>
    1b08:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b0a:	81 11       	cpse	r24, r1
    1b0c:	03 c0       	rjmp	.+6      	; 0x1b14 <_ZN7hd447805beginEhhh+0x2c>
    1b0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b10:	88 23       	and	r24, r24
    1b12:	29 f0       	breq	.+10     	; 0x1b1e <_ZN7hd447805beginEhhh+0x36>
    1b14:	8f 81       	ldd	r24, Y+7	; 0x07
    1b16:	88 23       	and	r24, r24
    1b18:	59 f0       	breq	.+22     	; 0x1b30 <_ZN7hd447805beginEhhh+0x48>
    1b1a:	86 17       	cp	r24, r22
    1b1c:	49 f0       	breq	.+18     	; 0x1b30 <_ZN7hd447805beginEhhh+0x48>
    1b1e:	1c 86       	std	Y+12, r1	; 0x0c
    1b20:	80 e4       	ldi	r24, 0x40	; 64
    1b22:	8d 87       	std	Y+13, r24	; 0x0d
    1b24:	6e 87       	std	Y+14, r22	; 0x0e
    1b26:	86 2f       	mov	r24, r22
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	80 5c       	subi	r24, 0xC0	; 192
    1b2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b2e:	8f 87       	std	Y+15, r24	; 0x0f
    1b30:	18 87       	std	Y+8, r17	; 0x08
    1b32:	6f 83       	std	Y+7, r22	; 0x07
    1b34:	64 e6       	ldi	r22, 0x64	; 100
    1b36:	70 e0       	ldi	r23, 0x00	; 0
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	0e 94 3e 1a 	call	0x347c	; 0x347c <delay>
    1b40:	1c 82       	std	Y+4, r1	; 0x04
    1b42:	e8 81       	ld	r30, Y
    1b44:	f9 81       	ldd	r31, Y+1	; 0x01
    1b46:	00 84       	ldd	r0, Z+8	; 0x08
    1b48:	f1 85       	ldd	r31, Z+9	; 0x09
    1b4a:	e0 2d       	mov	r30, r0
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	09 95       	icall
    1b50:	00 97       	sbiw	r24, 0x00	; 0
    1b52:	09 f0       	breq	.+2      	; 0x1b56 <_ZN7hd447805beginEhhh+0x6e>
    1b54:	5e c0       	rjmp	.+188    	; 0x1c12 <_ZN7hd447805beginEhhh+0x12a>
    1b56:	88 85       	ldd	r24, Y+8	; 0x08
    1b58:	82 30       	cpi	r24, 0x02	; 2
    1b5a:	18 f0       	brcs	.+6      	; 0x1b62 <_ZN7hd447805beginEhhh+0x7a>
    1b5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5e:	88 60       	ori	r24, 0x08	; 8
    1b60:	8c 83       	std	Y+4, r24	; 0x04
    1b62:	00 23       	and	r16, r16
    1b64:	29 f0       	breq	.+10     	; 0x1b70 <_ZN7hd447805beginEhhh+0x88>
    1b66:	11 30       	cpi	r17, 0x01	; 1
    1b68:	19 f4       	brne	.+6      	; 0x1b70 <_ZN7hd447805beginEhhh+0x88>
    1b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6c:	84 60       	ori	r24, 0x04	; 4
    1b6e:	8c 83       	std	Y+4, r24	; 0x04
    1b70:	e8 81       	ld	r30, Y
    1b72:	f9 81       	ldd	r31, Y+1	; 0x01
    1b74:	04 84       	ldd	r0, Z+12	; 0x0c
    1b76:	f5 85       	ldd	r31, Z+13	; 0x0d
    1b78:	e0 2d       	mov	r30, r0
    1b7a:	40 e3       	ldi	r20, 0x30	; 48
    1b7c:	62 e0       	ldi	r22, 0x02	; 2
    1b7e:	ce 01       	movw	r24, r28
    1b80:	09 95       	icall
    1b82:	65 e0       	ldi	r22, 0x05	; 5
    1b84:	70 e0       	ldi	r23, 0x00	; 0
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	0e 94 3e 1a 	call	0x347c	; 0x347c <delay>
    1b8e:	e8 81       	ld	r30, Y
    1b90:	f9 81       	ldd	r31, Y+1	; 0x01
    1b92:	04 84       	ldd	r0, Z+12	; 0x0c
    1b94:	f5 85       	ldd	r31, Z+13	; 0x0d
    1b96:	e0 2d       	mov	r30, r0
    1b98:	40 e3       	ldi	r20, 0x30	; 48
    1b9a:	62 e0       	ldi	r22, 0x02	; 2
    1b9c:	ce 01       	movw	r24, r28
    1b9e:	09 95       	icall
    1ba0:	61 e0       	ldi	r22, 0x01	; 1
    1ba2:	70 e0       	ldi	r23, 0x00	; 0
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	0e 94 3e 1a 	call	0x347c	; 0x347c <delay>
    1bac:	e8 81       	ld	r30, Y
    1bae:	f9 81       	ldd	r31, Y+1	; 0x01
    1bb0:	04 84       	ldd	r0, Z+12	; 0x0c
    1bb2:	f5 85       	ldd	r31, Z+13	; 0x0d
    1bb4:	e0 2d       	mov	r30, r0
    1bb6:	40 e3       	ldi	r20, 0x30	; 48
    1bb8:	62 e0       	ldi	r22, 0x02	; 2
    1bba:	ce 01       	movw	r24, r28
    1bbc:	09 95       	icall
    1bbe:	61 e0       	ldi	r22, 0x01	; 1
    1bc0:	70 e0       	ldi	r23, 0x00	; 0
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	0e 94 3e 1a 	call	0x347c	; 0x347c <delay>
    1bca:	8c 81       	ldd	r24, Y+4	; 0x04
    1bcc:	84 fd       	sbrc	r24, 4
    1bce:	09 c0       	rjmp	.+18     	; 0x1be2 <_ZN7hd447805beginEhhh+0xfa>
    1bd0:	e8 81       	ld	r30, Y
    1bd2:	f9 81       	ldd	r31, Y+1	; 0x01
    1bd4:	04 84       	ldd	r0, Z+12	; 0x0c
    1bd6:	f5 85       	ldd	r31, Z+13	; 0x0d
    1bd8:	e0 2d       	mov	r30, r0
    1bda:	40 e2       	ldi	r20, 0x20	; 32
    1bdc:	62 e0       	ldi	r22, 0x02	; 2
    1bde:	ce 01       	movw	r24, r28
    1be0:	09 95       	icall
    1be2:	6c 81       	ldd	r22, Y+4	; 0x04
    1be4:	60 62       	ori	r22, 0x20	; 32
    1be6:	ce 01       	movw	r24, r28
    1be8:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <_ZN7hd447807commandEh>
    1bec:	84 e0       	ldi	r24, 0x04	; 4
    1bee:	8d 83       	std	Y+5, r24	; 0x05
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <_ZN7hd447807displayEv>
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_ZN7hd447805clearEv>
    1bfc:	82 e0       	ldi	r24, 0x02	; 2
    1bfe:	8e 83       	std	Y+6, r24	; 0x06
    1c00:	66 e0       	ldi	r22, 0x06	; 6
    1c02:	ce 01       	movw	r24, r28
    1c04:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <_ZN7hd447807commandEh>
    1c08:	8c 01       	movw	r16, r24
    1c0a:	ce 01       	movw	r24, r28
    1c0c:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <_ZN7hd447809backlightEv>
    1c10:	c8 01       	movw	r24, r16
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	1f 91       	pop	r17
    1c18:	0f 91       	pop	r16
    1c1a:	08 95       	ret

00001c1c <_ZN7hd447808noCursorEv>:
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	65 81       	ldd	r22, Z+5	; 0x05
    1c20:	6d 7f       	andi	r22, 0xFD	; 253
    1c22:	65 83       	std	Z+5, r22	; 0x05
    1c24:	68 60       	ori	r22, 0x08	; 8
    1c26:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <_ZN7hd447807commandEh>

00001c2a <_ZN7hd447807noBlinkEv>:
    1c2a:	fc 01       	movw	r30, r24
    1c2c:	65 81       	ldd	r22, Z+5	; 0x05
    1c2e:	6e 7f       	andi	r22, 0xFE	; 254
    1c30:	65 83       	std	Z+5, r22	; 0x05
    1c32:	68 60       	ori	r22, 0x08	; 8
    1c34:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <_ZN7hd447807commandEh>

00001c38 <_ZN7hd447806_writeEh>:
    1c38:	cf 92       	push	r12
    1c3a:	df 92       	push	r13
    1c3c:	ef 92       	push	r14
    1c3e:	ff 92       	push	r15
    1c40:	0f 93       	push	r16
    1c42:	1f 93       	push	r17
    1c44:	cf 93       	push	r28
    1c46:	df 93       	push	r29
    1c48:	ec 01       	movw	r28, r24
    1c4a:	46 2f       	mov	r20, r22
    1c4c:	e8 81       	ld	r30, Y
    1c4e:	f9 81       	ldd	r31, Y+1	; 0x01
    1c50:	04 84       	ldd	r0, Z+12	; 0x0c
    1c52:	f5 85       	ldd	r31, Z+13	; 0x0d
    1c54:	e0 2d       	mov	r30, r0
    1c56:	61 e0       	ldi	r22, 0x01	; 1
    1c58:	09 95       	icall
    1c5a:	8c 01       	movw	r16, r24
    1c5c:	cc 88       	ldd	r12, Y+20	; 0x14
    1c5e:	dd 88       	ldd	r13, Y+21	; 0x15
    1c60:	ee 88       	ldd	r14, Y+22	; 0x16
    1c62:	ff 88       	ldd	r15, Y+23	; 0x17
    1c64:	0e 94 19 1a 	call	0x3432	; 0x3432 <micros>
    1c68:	68 8f       	std	Y+24, r22	; 0x18
    1c6a:	79 8f       	std	Y+25, r23	; 0x19
    1c6c:	8a 8f       	std	Y+26, r24	; 0x1a
    1c6e:	9b 8f       	std	Y+27, r25	; 0x1b
    1c70:	cc 8e       	std	Y+28, r12	; 0x1c
    1c72:	dd 8e       	std	Y+29, r13	; 0x1d
    1c74:	ee 8e       	std	Y+30, r14	; 0x1e
    1c76:	ff 8e       	std	Y+31, r15	; 0x1f
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	01 2b       	or	r16, r17
    1c7e:	11 f0       	breq	.+4      	; 0x1c84 <_ZN7hd447806_writeEh+0x4c>
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	df 91       	pop	r29
    1c86:	cf 91       	pop	r28
    1c88:	1f 91       	pop	r17
    1c8a:	0f 91       	pop	r16
    1c8c:	ff 90       	pop	r15
    1c8e:	ef 90       	pop	r14
    1c90:	df 90       	pop	r13
    1c92:	cf 90       	pop	r12
    1c94:	08 95       	ret

00001c96 <_ZN7hd447805writeEh>:

// write() - process data character byte to lcd
// returns number of bytes successfully written to device
// i.e. 1 if success or 0 if no character was processed (error)
size_t hd44780::write(uint8_t value)
{
    1c96:	0f 93       	push	r16
    1c98:	1f 93       	push	r17
    1c9a:	cf 93       	push	r28
    1c9c:	df 93       	push	r29
    1c9e:	ec 01       	movw	r28, r24
size_t rval;

	rval = _write(value);
    1ca0:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZN7hd447806_writeEh>
    1ca4:	8c 01       	movw	r16, r24
	if(_wraplines)
    1ca6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ca8:	88 23       	and	r24, r24
    1caa:	99 f0       	breq	.+38     	; 0x1cd2 <_ZN7hd447805writeEh+0x3c>
	{
		// currently only works for left to right mode
		if(++_curcol >= _cols)
    1cac:	89 85       	ldd	r24, Y+9	; 0x09
    1cae:	8f 5f       	subi	r24, 0xFF	; 255
    1cb0:	89 87       	std	Y+9, r24	; 0x09
    1cb2:	9f 81       	ldd	r25, Y+7	; 0x07
    1cb4:	89 17       	cp	r24, r25
    1cb6:	68 f0       	brcs	.+26     	; 0x1cd2 <_ZN7hd447805writeEh+0x3c>
		{
			_curcol = 0;
    1cb8:	19 86       	std	Y+9, r1	; 0x09
			_currow++;
    1cba:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cbc:	8f 5f       	subi	r24, 0xFF	; 255
    1cbe:	8a 87       	std	Y+10, r24	; 0x0a
			if(_currow >= _rows)
    1cc0:	98 85       	ldd	r25, Y+8	; 0x08
    1cc2:	89 17       	cp	r24, r25
    1cc4:	08 f0       	brcs	.+2      	; 0x1cc8 <_ZN7hd447805writeEh+0x32>
				_currow = 0;
    1cc6:	1a 86       	std	Y+10, r1	; 0x0a
			setCursor(_curcol, _currow);
    1cc8:	4a 85       	ldd	r20, Y+10	; 0x0a
    1cca:	60 e0       	ldi	r22, 0x00	; 0
    1ccc:	ce 01       	movw	r24, r28
    1cce:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN7hd447809setCursorEhh>
		}
	}
	return (rval);
}
    1cd2:	c8 01       	movw	r24, r16
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	1f 91       	pop	r17
    1cda:	0f 91       	pop	r16
    1cdc:	08 95       	ret

00001cde <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1cde:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <twi_state>
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <twi_sendStop>
    1ce8:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <twi_inRepStart>
    1cec:	61 e0       	ldi	r22, 0x01	; 1
    1cee:	82 e0       	ldi	r24, 0x02	; 2
    1cf0:	0e 94 85 1b 	call	0x370a	; 0x370a <digitalWrite>
    1cf4:	61 e0       	ldi	r22, 0x01	; 1
    1cf6:	83 e0       	ldi	r24, 0x03	; 3
    1cf8:	0e 94 85 1b 	call	0x370a	; 0x370a <digitalWrite>
    1cfc:	e9 eb       	ldi	r30, 0xB9	; 185
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	8e 7f       	andi	r24, 0xFE	; 254
    1d04:	80 83       	st	Z, r24
    1d06:	80 81       	ld	r24, Z
    1d08:	8d 7f       	andi	r24, 0xFD	; 253
    1d0a:	80 83       	st	Z, r24
    1d0c:	88 e4       	ldi	r24, 0x48	; 72
    1d0e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1d12:	85 e4       	ldi	r24, 0x45	; 69
    1d14:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1d18:	08 95       	ret

00001d1a <twi_readFrom>:
    1d1a:	41 32       	cpi	r20, 0x21	; 33
    1d1c:	08 f0       	brcs	.+2      	; 0x1d20 <twi_readFrom+0x6>
    1d1e:	43 c0       	rjmp	.+134    	; 0x1da6 <twi_readFrom+0x8c>
    1d20:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <twi_state>
    1d24:	91 11       	cpse	r25, r1
    1d26:	fc cf       	rjmp	.-8      	; 0x1d20 <twi_readFrom+0x6>
    1d28:	91 e0       	ldi	r25, 0x01	; 1
    1d2a:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <twi_state>
    1d2e:	20 93 3a 04 	sts	0x043A, r18	; 0x80043a <twi_sendStop>
    1d32:	2f ef       	ldi	r18, 0xFF	; 255
    1d34:	20 93 cf 03 	sts	0x03CF, r18	; 0x8003cf <twi_error>
    1d38:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <twi_masterBufferIndex>
    1d3c:	24 0f       	add	r18, r20
    1d3e:	20 93 13 04 	sts	0x0413, r18	; 0x800413 <twi_masterBufferLength>
    1d42:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <twi_slarw>
    1d46:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <twi_slarw>
    1d4a:	88 0f       	add	r24, r24
    1d4c:	89 2b       	or	r24, r25
    1d4e:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <twi_slarw>
    1d52:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <twi_inRepStart>
    1d56:	81 30       	cpi	r24, 0x01	; 1
    1d58:	61 f4       	brne	.+24     	; 0x1d72 <twi_readFrom+0x58>
    1d5a:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <twi_inRepStart>
    1d5e:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <twi_slarw>
    1d62:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1d66:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1d6a:	83 fd       	sbrc	r24, 3
    1d6c:	f8 cf       	rjmp	.-16     	; 0x1d5e <twi_readFrom+0x44>
    1d6e:	85 ec       	ldi	r24, 0xC5	; 197
    1d70:	01 c0       	rjmp	.+2      	; 0x1d74 <twi_readFrom+0x5a>
    1d72:	85 ee       	ldi	r24, 0xE5	; 229
    1d74:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1d78:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <twi_state>
    1d7c:	81 30       	cpi	r24, 0x01	; 1
    1d7e:	e1 f3       	breq	.-8      	; 0x1d78 <twi_readFrom+0x5e>
    1d80:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <twi_masterBufferIndex>
    1d84:	84 17       	cp	r24, r20
    1d86:	10 f4       	brcc	.+4      	; 0x1d8c <twi_readFrom+0x72>
    1d88:	40 91 14 04 	lds	r20, 0x0414	; 0x800414 <twi_masterBufferIndex>
    1d8c:	a5 e1       	ldi	r26, 0x15	; 21
    1d8e:	b4 e0       	ldi	r27, 0x04	; 4
    1d90:	96 2f       	mov	r25, r22
    1d92:	fb 01       	movw	r30, r22
    1d94:	8e 2f       	mov	r24, r30
    1d96:	89 1b       	sub	r24, r25
    1d98:	84 17       	cp	r24, r20
    1d9a:	18 f4       	brcc	.+6      	; 0x1da2 <twi_readFrom+0x88>
    1d9c:	8d 91       	ld	r24, X+
    1d9e:	81 93       	st	Z+, r24
    1da0:	f9 cf       	rjmp	.-14     	; 0x1d94 <twi_readFrom+0x7a>
    1da2:	84 2f       	mov	r24, r20
    1da4:	08 95       	ret
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	08 95       	ret

00001daa <twi_writeTo>:
    1daa:	0f 93       	push	r16
    1dac:	41 32       	cpi	r20, 0x21	; 33
    1dae:	08 f0       	brcs	.+2      	; 0x1db2 <twi_writeTo+0x8>
    1db0:	4a c0       	rjmp	.+148    	; 0x1e46 <twi_writeTo+0x9c>
    1db2:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <twi_state>
    1db6:	91 11       	cpse	r25, r1
    1db8:	fc cf       	rjmp	.-8      	; 0x1db2 <twi_writeTo+0x8>
    1dba:	32 e0       	ldi	r19, 0x02	; 2
    1dbc:	30 93 3c 04 	sts	0x043C, r19	; 0x80043c <twi_state>
    1dc0:	00 93 3a 04 	sts	0x043A, r16	; 0x80043a <twi_sendStop>
    1dc4:	3f ef       	ldi	r19, 0xFF	; 255
    1dc6:	30 93 cf 03 	sts	0x03CF, r19	; 0x8003cf <twi_error>
    1dca:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <twi_masterBufferIndex>
    1dce:	40 93 13 04 	sts	0x0413, r20	; 0x800413 <twi_masterBufferLength>
    1dd2:	56 2f       	mov	r21, r22
    1dd4:	a5 e1       	ldi	r26, 0x15	; 21
    1dd6:	b4 e0       	ldi	r27, 0x04	; 4
    1dd8:	fb 01       	movw	r30, r22
    1dda:	3e 2f       	mov	r19, r30
    1ddc:	35 1b       	sub	r19, r21
    1dde:	34 17       	cp	r19, r20
    1de0:	18 f4       	brcc	.+6      	; 0x1de8 <twi_writeTo+0x3e>
    1de2:	31 91       	ld	r19, Z+
    1de4:	3d 93       	st	X+, r19
    1de6:	f9 cf       	rjmp	.-14     	; 0x1dda <twi_writeTo+0x30>
    1de8:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <twi_slarw>
    1dec:	30 91 3b 04 	lds	r19, 0x043B	; 0x80043b <twi_slarw>
    1df0:	88 0f       	add	r24, r24
    1df2:	83 2b       	or	r24, r19
    1df4:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <twi_slarw>
    1df8:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <twi_inRepStart>
    1dfc:	81 30       	cpi	r24, 0x01	; 1
    1dfe:	61 f4       	brne	.+24     	; 0x1e18 <twi_writeTo+0x6e>
    1e00:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <twi_inRepStart>
    1e04:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <twi_slarw>
    1e08:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1e0c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1e10:	83 fd       	sbrc	r24, 3
    1e12:	f8 cf       	rjmp	.-16     	; 0x1e04 <twi_writeTo+0x5a>
    1e14:	85 ec       	ldi	r24, 0xC5	; 197
    1e16:	01 c0       	rjmp	.+2      	; 0x1e1a <twi_writeTo+0x70>
    1e18:	85 ee       	ldi	r24, 0xE5	; 229
    1e1a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1e1e:	22 23       	and	r18, r18
    1e20:	21 f0       	breq	.+8      	; 0x1e2a <twi_writeTo+0x80>
    1e22:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <twi_state>
    1e26:	82 30       	cpi	r24, 0x02	; 2
    1e28:	d1 f3       	breq	.-12     	; 0x1e1e <twi_writeTo+0x74>
    1e2a:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <twi_error>
    1e2e:	8f 3f       	cpi	r24, 0xFF	; 255
    1e30:	79 f0       	breq	.+30     	; 0x1e50 <twi_writeTo+0xa6>
    1e32:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <twi_error>
    1e36:	80 32       	cpi	r24, 0x20	; 32
    1e38:	41 f0       	breq	.+16     	; 0x1e4a <twi_writeTo+0xa0>
    1e3a:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <twi_error>
    1e3e:	80 33       	cpi	r24, 0x30	; 48
    1e40:	31 f0       	breq	.+12     	; 0x1e4e <twi_writeTo+0xa4>
    1e42:	94 e0       	ldi	r25, 0x04	; 4
    1e44:	05 c0       	rjmp	.+10     	; 0x1e50 <twi_writeTo+0xa6>
    1e46:	91 e0       	ldi	r25, 0x01	; 1
    1e48:	03 c0       	rjmp	.+6      	; 0x1e50 <twi_writeTo+0xa6>
    1e4a:	92 e0       	ldi	r25, 0x02	; 2
    1e4c:	01 c0       	rjmp	.+2      	; 0x1e50 <twi_writeTo+0xa6>
    1e4e:	93 e0       	ldi	r25, 0x03	; 3
    1e50:	89 2f       	mov	r24, r25
    1e52:	0f 91       	pop	r16
    1e54:	08 95       	ret

00001e56 <twi_transmit>:
    1e56:	40 91 f1 03 	lds	r20, 0x03F1	; 0x8003f1 <twi_txBufferLength>
    1e5a:	26 2f       	mov	r18, r22
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	24 0f       	add	r18, r20
    1e60:	31 1d       	adc	r19, r1
    1e62:	21 32       	cpi	r18, 0x21	; 33
    1e64:	31 05       	cpc	r19, r1
    1e66:	dc f4       	brge	.+54     	; 0x1e9e <twi_transmit+0x48>
    1e68:	20 91 3c 04 	lds	r18, 0x043C	; 0x80043c <twi_state>
    1e6c:	24 30       	cpi	r18, 0x04	; 4
    1e6e:	c9 f4       	brne	.+50     	; 0x1ea2 <twi_transmit+0x4c>
    1e70:	fc 01       	movw	r30, r24
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	86 17       	cp	r24, r22
    1e78:	58 f4       	brcc	.+22     	; 0x1e90 <twi_transmit+0x3a>
    1e7a:	30 91 f1 03 	lds	r19, 0x03F1	; 0x8003f1 <twi_txBufferLength>
    1e7e:	21 91       	ld	r18, Z+
    1e80:	dc 01       	movw	r26, r24
    1e82:	ad 50       	subi	r26, 0x0D	; 13
    1e84:	bc 4f       	sbci	r27, 0xFC	; 252
    1e86:	a3 0f       	add	r26, r19
    1e88:	b1 1d       	adc	r27, r1
    1e8a:	2c 93       	st	X, r18
    1e8c:	01 96       	adiw	r24, 0x01	; 1
    1e8e:	f3 cf       	rjmp	.-26     	; 0x1e76 <twi_transmit+0x20>
    1e90:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <twi_txBufferLength>
    1e94:	68 0f       	add	r22, r24
    1e96:	60 93 f1 03 	sts	0x03F1, r22	; 0x8003f1 <twi_txBufferLength>
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	08 95       	ret
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	08 95       	ret
    1ea2:	82 e0       	ldi	r24, 0x02	; 2
    1ea4:	08 95       	ret

00001ea6 <twi_attachSlaveRxEvent>:
    1ea6:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <twi_onSlaveReceive+0x1>
    1eaa:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <twi_onSlaveReceive>
    1eae:	08 95       	ret

00001eb0 <twi_attachSlaveTxEvent>:
    1eb0:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <twi_onSlaveTransmit+0x1>
    1eb4:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <twi_onSlaveTransmit>
    1eb8:	08 95       	ret

00001eba <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1eba:	85 ed       	ldi	r24, 0xD5	; 213
    1ebc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1ec0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1ec4:	84 fd       	sbrc	r24, 4
    1ec6:	fc cf       	rjmp	.-8      	; 0x1ec0 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1ec8:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <twi_state>
    1ecc:	08 95       	ret

00001ece <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1ece:	85 ec       	ldi	r24, 0xC5	; 197
    1ed0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    1ed4:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <twi_state>
    1ed8:	08 95       	ret

00001eda <__vector_36>:
}

ISR(TWI_vect)
{
    1eda:	1f 92       	push	r1
    1edc:	0f 92       	push	r0
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	0f 92       	push	r0
    1ee2:	11 24       	eor	r1, r1
    1ee4:	2f 93       	push	r18
    1ee6:	3f 93       	push	r19
    1ee8:	4f 93       	push	r20
    1eea:	5f 93       	push	r21
    1eec:	6f 93       	push	r22
    1eee:	7f 93       	push	r23
    1ef0:	8f 93       	push	r24
    1ef2:	9f 93       	push	r25
    1ef4:	af 93       	push	r26
    1ef6:	bf 93       	push	r27
    1ef8:	ef 93       	push	r30
    1efa:	ff 93       	push	r31
  switch(TW_STATUS){
    1efc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1f00:	88 7f       	andi	r24, 0xF8	; 248
    1f02:	80 36       	cpi	r24, 0x60	; 96
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <__vector_36+0x2e>
    1f06:	9e c0       	rjmp	.+316    	; 0x2044 <__vector_36+0x16a>
    1f08:	78 f5       	brcc	.+94     	; 0x1f68 <__vector_36+0x8e>
    1f0a:	88 32       	cpi	r24, 0x28	; 40
    1f0c:	09 f4       	brne	.+2      	; 0x1f10 <__vector_36+0x36>
    1f0e:	5d c0       	rjmp	.+186    	; 0x1fca <__vector_36+0xf0>
    1f10:	90 f4       	brcc	.+36     	; 0x1f36 <__vector_36+0x5c>
    1f12:	80 31       	cpi	r24, 0x10	; 16
    1f14:	09 f4       	brne	.+2      	; 0x1f18 <__vector_36+0x3e>
    1f16:	56 c0       	rjmp	.+172    	; 0x1fc4 <__vector_36+0xea>
    1f18:	38 f4       	brcc	.+14     	; 0x1f28 <__vector_36+0x4e>
    1f1a:	88 23       	and	r24, r24
    1f1c:	09 f4       	brne	.+2      	; 0x1f20 <__vector_36+0x46>
    1f1e:	f5 c0       	rjmp	.+490    	; 0x210a <__vector_36+0x230>
    1f20:	88 30       	cpi	r24, 0x08	; 8
    1f22:	09 f4       	brne	.+2      	; 0x1f26 <__vector_36+0x4c>
    1f24:	4f c0       	rjmp	.+158    	; 0x1fc4 <__vector_36+0xea>
    1f26:	f5 c0       	rjmp	.+490    	; 0x2112 <__vector_36+0x238>
    1f28:	88 31       	cpi	r24, 0x18	; 24
    1f2a:	09 f4       	brne	.+2      	; 0x1f2e <__vector_36+0x54>
    1f2c:	4e c0       	rjmp	.+156    	; 0x1fca <__vector_36+0xf0>
    1f2e:	80 32       	cpi	r24, 0x20	; 32
    1f30:	09 f4       	brne	.+2      	; 0x1f34 <__vector_36+0x5a>
    1f32:	5f c0       	rjmp	.+190    	; 0x1ff2 <__vector_36+0x118>
    1f34:	ee c0       	rjmp	.+476    	; 0x2112 <__vector_36+0x238>
    1f36:	80 34       	cpi	r24, 0x40	; 64
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <__vector_36+0x62>
    1f3a:	6a c0       	rjmp	.+212    	; 0x2010 <__vector_36+0x136>
    1f3c:	58 f4       	brcc	.+22     	; 0x1f54 <__vector_36+0x7a>
    1f3e:	80 33       	cpi	r24, 0x30	; 48
    1f40:	09 f4       	brne	.+2      	; 0x1f44 <__vector_36+0x6a>
    1f42:	57 c0       	rjmp	.+174    	; 0x1ff2 <__vector_36+0x118>
    1f44:	88 33       	cpi	r24, 0x38	; 56
    1f46:	09 f0       	breq	.+2      	; 0x1f4a <__vector_36+0x70>
    1f48:	e4 c0       	rjmp	.+456    	; 0x2112 <__vector_36+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1f4a:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <twi_error>
      twi_releaseBus();
    1f4e:	0e 94 67 0f 	call	0x1ece	; 0x1ece <twi_releaseBus>
      break;
    1f52:	df c0       	rjmp	.+446    	; 0x2112 <__vector_36+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1f54:	80 35       	cpi	r24, 0x50	; 80
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <__vector_36+0x80>
    1f58:	4f c0       	rjmp	.+158    	; 0x1ff8 <__vector_36+0x11e>
    1f5a:	88 35       	cpi	r24, 0x58	; 88
    1f5c:	09 f4       	brne	.+2      	; 0x1f60 <__vector_36+0x86>
    1f5e:	5d c0       	rjmp	.+186    	; 0x201a <__vector_36+0x140>
    1f60:	88 34       	cpi	r24, 0x48	; 72
    1f62:	09 f0       	breq	.+2      	; 0x1f66 <__vector_36+0x8c>
    1f64:	d6 c0       	rjmp	.+428    	; 0x2112 <__vector_36+0x238>
    1f66:	d3 c0       	rjmp	.+422    	; 0x210e <__vector_36+0x234>
    1f68:	88 39       	cpi	r24, 0x98	; 152
    1f6a:	09 f4       	brne	.+2      	; 0x1f6e <__vector_36+0x94>
    1f6c:	c4 c0       	rjmp	.+392    	; 0x20f6 <__vector_36+0x21c>
    1f6e:	a8 f4       	brcc	.+42     	; 0x1f9a <__vector_36+0xc0>
    1f70:	88 37       	cpi	r24, 0x78	; 120
    1f72:	09 f4       	brne	.+2      	; 0x1f76 <__vector_36+0x9c>
    1f74:	67 c0       	rjmp	.+206    	; 0x2044 <__vector_36+0x16a>
    1f76:	38 f4       	brcc	.+14     	; 0x1f86 <__vector_36+0xac>
    1f78:	88 36       	cpi	r24, 0x68	; 104
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <__vector_36+0xa4>
    1f7c:	63 c0       	rjmp	.+198    	; 0x2044 <__vector_36+0x16a>
    1f7e:	80 37       	cpi	r24, 0x70	; 112
    1f80:	09 f4       	brne	.+2      	; 0x1f84 <__vector_36+0xaa>
    1f82:	60 c0       	rjmp	.+192    	; 0x2044 <__vector_36+0x16a>
    1f84:	c6 c0       	rjmp	.+396    	; 0x2112 <__vector_36+0x238>
    1f86:	88 38       	cpi	r24, 0x88	; 136
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <__vector_36+0xb2>
    1f8a:	b5 c0       	rjmp	.+362    	; 0x20f6 <__vector_36+0x21c>
    1f8c:	80 39       	cpi	r24, 0x90	; 144
    1f8e:	09 f4       	brne	.+2      	; 0x1f92 <__vector_36+0xb8>
    1f90:	5f c0       	rjmp	.+190    	; 0x2050 <__vector_36+0x176>
    1f92:	80 38       	cpi	r24, 0x80	; 128
    1f94:	09 f0       	breq	.+2      	; 0x1f98 <__vector_36+0xbe>
    1f96:	bd c0       	rjmp	.+378    	; 0x2112 <__vector_36+0x238>
    1f98:	5b c0       	rjmp	.+182    	; 0x2050 <__vector_36+0x176>
    1f9a:	80 3b       	cpi	r24, 0xB0	; 176
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <__vector_36+0xc6>
    1f9e:	83 c0       	rjmp	.+262    	; 0x20a6 <__vector_36+0x1cc>
    1fa0:	38 f4       	brcc	.+14     	; 0x1fb0 <__vector_36+0xd6>
    1fa2:	80 3a       	cpi	r24, 0xA0	; 160
    1fa4:	09 f4       	brne	.+2      	; 0x1fa8 <__vector_36+0xce>
    1fa6:	66 c0       	rjmp	.+204    	; 0x2074 <__vector_36+0x19a>
    1fa8:	88 3a       	cpi	r24, 0xA8	; 168
    1faa:	09 f4       	brne	.+2      	; 0x1fae <__vector_36+0xd4>
    1fac:	7c c0       	rjmp	.+248    	; 0x20a6 <__vector_36+0x1cc>
    1fae:	b1 c0       	rjmp	.+354    	; 0x2112 <__vector_36+0x238>
    1fb0:	80 3c       	cpi	r24, 0xC0	; 192
    1fb2:	09 f4       	brne	.+2      	; 0x1fb6 <__vector_36+0xdc>
    1fb4:	a4 c0       	rjmp	.+328    	; 0x20fe <__vector_36+0x224>
    1fb6:	88 3c       	cpi	r24, 0xC8	; 200
    1fb8:	09 f4       	brne	.+2      	; 0x1fbc <__vector_36+0xe2>
    1fba:	a1 c0       	rjmp	.+322    	; 0x20fe <__vector_36+0x224>
    1fbc:	88 3b       	cpi	r24, 0xB8	; 184
    1fbe:	09 f4       	brne	.+2      	; 0x1fc2 <__vector_36+0xe8>
    1fc0:	87 c0       	rjmp	.+270    	; 0x20d0 <__vector_36+0x1f6>
    1fc2:	a7 c0       	rjmp	.+334    	; 0x2112 <__vector_36+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1fc4:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <twi_slarw>
    1fc8:	10 c0       	rjmp	.+32     	; 0x1fea <__vector_36+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1fca:	90 91 14 04 	lds	r25, 0x0414	; 0x800414 <twi_masterBufferIndex>
    1fce:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <twi_masterBufferLength>
    1fd2:	98 17       	cp	r25, r24
    1fd4:	70 f5       	brcc	.+92     	; 0x2032 <__vector_36+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1fd6:	e0 91 14 04 	lds	r30, 0x0414	; 0x800414 <twi_masterBufferIndex>
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	8e 0f       	add	r24, r30
    1fde:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <twi_masterBufferIndex>
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	eb 5e       	subi	r30, 0xEB	; 235
    1fe6:	fb 4f       	sbci	r31, 0xFB	; 251
    1fe8:	80 81       	ld	r24, Z
    1fea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1fee:	85 ec       	ldi	r24, 0xC5	; 197
    1ff0:	83 c0       	rjmp	.+262    	; 0x20f8 <__vector_36+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1ff2:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <twi_error>
    1ff6:	8b c0       	rjmp	.+278    	; 0x210e <__vector_36+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1ff8:	e0 91 14 04 	lds	r30, 0x0414	; 0x800414 <twi_masterBufferIndex>
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	8e 0f       	add	r24, r30
    2000:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <twi_masterBufferIndex>
    2004:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	eb 5e       	subi	r30, 0xEB	; 235
    200c:	fb 4f       	sbci	r31, 0xFB	; 251
    200e:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2010:	90 91 14 04 	lds	r25, 0x0414	; 0x800414 <twi_masterBufferIndex>
    2014:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <twi_masterBufferLength>
    2018:	6b c0       	rjmp	.+214    	; 0x20f0 <__vector_36+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    201a:	e0 91 14 04 	lds	r30, 0x0414	; 0x800414 <twi_masterBufferIndex>
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	8e 0f       	add	r24, r30
    2022:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <twi_masterBufferIndex>
    2026:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	eb 5e       	subi	r30, 0xEB	; 235
    202e:	fb 4f       	sbci	r31, 0xFB	; 251
    2030:	80 83       	st	Z, r24
	if (twi_sendStop)
    2032:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <twi_sendStop>
    2036:	81 11       	cpse	r24, r1
    2038:	6a c0       	rjmp	.+212    	; 0x210e <__vector_36+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2040:	84 ea       	ldi	r24, 0xA4	; 164
    2042:	5e c0       	rjmp	.+188    	; 0x2100 <__vector_36+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2044:	83 e0       	ldi	r24, 0x03	; 3
    2046:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    204a:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <twi_rxBufferIndex>
    204e:	cf cf       	rjmp	.-98     	; 0x1fee <__vector_36+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2050:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <twi_rxBufferIndex>
    2054:	80 32       	cpi	r24, 0x20	; 32
    2056:	08 f0       	brcs	.+2      	; 0x205a <__vector_36+0x180>
    2058:	4e c0       	rjmp	.+156    	; 0x20f6 <__vector_36+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    205a:	e0 91 d0 03 	lds	r30, 0x03D0	; 0x8003d0 <twi_rxBufferIndex>
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	8e 0f       	add	r24, r30
    2062:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <twi_rxBufferIndex>
    2066:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	ef 52       	subi	r30, 0x2F	; 47
    206e:	fc 4f       	sbci	r31, 0xFC	; 252
    2070:	80 83       	st	Z, r24
    2072:	bd cf       	rjmp	.-134    	; 0x1fee <__vector_36+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2074:	0e 94 67 0f 	call	0x1ece	; 0x1ece <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2078:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <twi_rxBufferIndex>
    207c:	80 32       	cpi	r24, 0x20	; 32
    207e:	30 f4       	brcc	.+12     	; 0x208c <__vector_36+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2080:	e0 91 d0 03 	lds	r30, 0x03D0	; 0x8003d0 <twi_rxBufferIndex>
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	ef 52       	subi	r30, 0x2F	; 47
    2088:	fc 4f       	sbci	r31, 0xFC	; 252
    208a:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    208c:	60 91 d0 03 	lds	r22, 0x03D0	; 0x8003d0 <twi_rxBufferIndex>
    2090:	70 e0       	ldi	r23, 0x00	; 0
    2092:	e0 91 35 04 	lds	r30, 0x0435	; 0x800435 <twi_onSlaveReceive>
    2096:	f0 91 36 04 	lds	r31, 0x0436	; 0x800436 <twi_onSlaveReceive+0x1>
    209a:	81 ed       	ldi	r24, 0xD1	; 209
    209c:	93 e0       	ldi	r25, 0x03	; 3
    209e:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    20a0:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <twi_rxBufferIndex>
      break;
    20a4:	36 c0       	rjmp	.+108    	; 0x2112 <__vector_36+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    20a6:	84 e0       	ldi	r24, 0x04	; 4
    20a8:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    20ac:	10 92 f2 03 	sts	0x03F2, r1	; 0x8003f2 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    20b0:	10 92 f1 03 	sts	0x03F1, r1	; 0x8003f1 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    20b4:	e0 91 37 04 	lds	r30, 0x0437	; 0x800437 <twi_onSlaveTransmit>
    20b8:	f0 91 38 04 	lds	r31, 0x0438	; 0x800438 <twi_onSlaveTransmit+0x1>
    20bc:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    20be:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <twi_txBufferLength>
    20c2:	81 11       	cpse	r24, r1
    20c4:	05 c0       	rjmp	.+10     	; 0x20d0 <__vector_36+0x1f6>
        twi_txBufferLength = 1;
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    20cc:	10 92 f3 03 	sts	0x03F3, r1	; 0x8003f3 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    20d0:	e0 91 f2 03 	lds	r30, 0x03F2	; 0x8003f2 <twi_txBufferIndex>
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	8e 0f       	add	r24, r30
    20d8:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <twi_txBufferIndex>
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	ed 50       	subi	r30, 0x0D	; 13
    20e0:	fc 4f       	sbci	r31, 0xFC	; 252
    20e2:	80 81       	ld	r24, Z
    20e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    20e8:	90 91 f2 03 	lds	r25, 0x03F2	; 0x8003f2 <twi_txBufferIndex>
    20ec:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <twi_txBufferLength>
    20f0:	98 17       	cp	r25, r24
    20f2:	08 f4       	brcc	.+2      	; 0x20f6 <__vector_36+0x21c>
    20f4:	7c cf       	rjmp	.-264    	; 0x1fee <__vector_36+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    20f6:	85 e8       	ldi	r24, 0x85	; 133
    20f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    20fc:	0a c0       	rjmp	.+20     	; 0x2112 <__vector_36+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    20fe:	85 ec       	ldi	r24, 0xC5	; 197
    2100:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2104:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <twi_state>
      break;
    2108:	04 c0       	rjmp	.+8      	; 0x2112 <__vector_36+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    210a:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <twi_error>
      twi_stop();
    210e:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <twi_stop>
      break;
  }
}
    2112:	ff 91       	pop	r31
    2114:	ef 91       	pop	r30
    2116:	bf 91       	pop	r27
    2118:	af 91       	pop	r26
    211a:	9f 91       	pop	r25
    211c:	8f 91       	pop	r24
    211e:	7f 91       	pop	r23
    2120:	6f 91       	pop	r22
    2122:	5f 91       	pop	r21
    2124:	4f 91       	pop	r20
    2126:	3f 91       	pop	r19
    2128:	2f 91       	pop	r18
    212a:	0f 90       	pop	r0
    212c:	0f be       	out	0x3f, r0	; 63
    212e:	0f 90       	pop	r0
    2130:	1f 90       	pop	r1
    2132:	18 95       	reti

00002134 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2134:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <_ZN7TwoWire14rxBufferLengthE>
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	20 91 72 04 	lds	r18, 0x0472	; 0x800472 <_ZN7TwoWire13rxBufferIndexE>
    213e:	82 1b       	sub	r24, r18
    2140:	91 09       	sbc	r25, r1
    2142:	08 95       	ret

00002144 <_ZN7TwoWire4readEv>:
    2144:	90 91 72 04 	lds	r25, 0x0472	; 0x800472 <_ZN7TwoWire13rxBufferIndexE>
    2148:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <_ZN7TwoWire14rxBufferLengthE>
    214c:	98 17       	cp	r25, r24
    214e:	50 f4       	brcc	.+20     	; 0x2164 <_ZN7TwoWire4readEv+0x20>
    2150:	e9 2f       	mov	r30, r25
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	ed 58       	subi	r30, 0x8D	; 141
    2156:	fb 4f       	sbci	r31, 0xFB	; 251
    2158:	20 81       	ld	r18, Z
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	9f 5f       	subi	r25, 0xFF	; 255
    215e:	90 93 72 04 	sts	0x0472, r25	; 0x800472 <_ZN7TwoWire13rxBufferIndexE>
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <_ZN7TwoWire4readEv+0x24>
    2164:	2f ef       	ldi	r18, 0xFF	; 255
    2166:	3f ef       	ldi	r19, 0xFF	; 255
    2168:	c9 01       	movw	r24, r18
    216a:	08 95       	ret

0000216c <_ZN7TwoWire4peekEv>:
    216c:	e0 91 72 04 	lds	r30, 0x0472	; 0x800472 <_ZN7TwoWire13rxBufferIndexE>
    2170:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <_ZN7TwoWire14rxBufferLengthE>
    2174:	e8 17       	cp	r30, r24
    2176:	30 f4       	brcc	.+12     	; 0x2184 <_ZN7TwoWire4peekEv+0x18>
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	ed 58       	subi	r30, 0x8D	; 141
    217c:	fb 4f       	sbci	r31, 0xFB	; 251
    217e:	80 81       	ld	r24, Z
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	08 95       	ret
    2184:	8f ef       	ldi	r24, 0xFF	; 255
    2186:	9f ef       	ldi	r25, 0xFF	; 255
    2188:	08 95       	ret

0000218a <_ZN7TwoWire5flushEv>:
    218a:	08 95       	ret

0000218c <_ZN7TwoWire16onReceiveServiceEPhi>:
    218c:	cf 93       	push	r28
    218e:	df 93       	push	r29
    2190:	ec 01       	movw	r28, r24
    2192:	e0 91 49 04 	lds	r30, 0x0449	; 0x800449 <_ZN7TwoWire14user_onReceiveE>
    2196:	f0 91 4a 04 	lds	r31, 0x044A	; 0x80044a <_ZN7TwoWire14user_onReceiveE+0x1>
    219a:	30 97       	sbiw	r30, 0x00	; 0
    219c:	f1 f0       	breq	.+60     	; 0x21da <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    219e:	90 91 72 04 	lds	r25, 0x0472	; 0x800472 <_ZN7TwoWire13rxBufferIndexE>
    21a2:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <_ZN7TwoWire14rxBufferLengthE>
    21a6:	98 17       	cp	r25, r24
    21a8:	c0 f0       	brcs	.+48     	; 0x21da <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	29 2f       	mov	r18, r25
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	26 17       	cp	r18, r22
    21b2:	37 07       	cpc	r19, r23
    21b4:	54 f4       	brge	.+20     	; 0x21ca <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    21b6:	de 01       	movw	r26, r28
    21b8:	a2 0f       	add	r26, r18
    21ba:	b3 1f       	adc	r27, r19
    21bc:	4c 91       	ld	r20, X
    21be:	d9 01       	movw	r26, r18
    21c0:	ad 58       	subi	r26, 0x8D	; 141
    21c2:	bb 4f       	sbci	r27, 0xFB	; 251
    21c4:	4c 93       	st	X, r20
    21c6:	9f 5f       	subi	r25, 0xFF	; 255
    21c8:	f1 cf       	rjmp	.-30     	; 0x21ac <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    21ca:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <_ZN7TwoWire13rxBufferIndexE>
    21ce:	60 93 71 04 	sts	0x0471, r22	; 0x800471 <_ZN7TwoWire14rxBufferLengthE>
    21d2:	cb 01       	movw	r24, r22
    21d4:	df 91       	pop	r29
    21d6:	cf 91       	pop	r28
    21d8:	09 94       	ijmp
    21da:	df 91       	pop	r29
    21dc:	cf 91       	pop	r28
    21de:	08 95       	ret

000021e0 <_ZN7TwoWire16onRequestServiceEv>:
    21e0:	e0 91 4b 04 	lds	r30, 0x044B	; 0x80044b <_ZN7TwoWire14user_onRequestE>
    21e4:	f0 91 4c 04 	lds	r31, 0x044C	; 0x80044c <_ZN7TwoWire14user_onRequestE+0x1>
    21e8:	30 97       	sbiw	r30, 0x00	; 0
    21ea:	29 f0       	breq	.+10     	; 0x21f6 <_ZN7TwoWire16onRequestServiceEv+0x16>
    21ec:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <_ZN7TwoWire13txBufferIndexE>
    21f0:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <_ZN7TwoWire14txBufferLengthE>
    21f4:	09 94       	ijmp
    21f6:	08 95       	ret

000021f8 <_ZN7TwoWire5writeEPKhj>:
    21f8:	cf 92       	push	r12
    21fa:	df 92       	push	r13
    21fc:	ef 92       	push	r14
    21fe:	ff 92       	push	r15
    2200:	0f 93       	push	r16
    2202:	1f 93       	push	r17
    2204:	cf 93       	push	r28
    2206:	df 93       	push	r29
    2208:	7c 01       	movw	r14, r24
    220a:	cb 01       	movw	r24, r22
    220c:	8a 01       	movw	r16, r20
    220e:	20 91 4d 04 	lds	r18, 0x044D	; 0x80044d <_ZN7TwoWire12transmittingE>
    2212:	22 23       	and	r18, r18
    2214:	89 f0       	breq	.+34     	; 0x2238 <_ZN7TwoWire5writeEPKhj+0x40>
    2216:	eb 01       	movw	r28, r22
    2218:	6b 01       	movw	r12, r22
    221a:	c4 0e       	add	r12, r20
    221c:	d5 1e       	adc	r13, r21
    221e:	cc 15       	cp	r28, r12
    2220:	dd 05       	cpc	r29, r13
    2222:	69 f0       	breq	.+26     	; 0x223e <_ZN7TwoWire5writeEPKhj+0x46>
    2224:	69 91       	ld	r22, Y+
    2226:	d7 01       	movw	r26, r14
    2228:	ed 91       	ld	r30, X+
    222a:	fc 91       	ld	r31, X
    222c:	01 90       	ld	r0, Z+
    222e:	f0 81       	ld	r31, Z
    2230:	e0 2d       	mov	r30, r0
    2232:	c7 01       	movw	r24, r14
    2234:	09 95       	icall
    2236:	f3 cf       	rjmp	.-26     	; 0x221e <_ZN7TwoWire5writeEPKhj+0x26>
    2238:	64 2f       	mov	r22, r20
    223a:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <twi_transmit>
    223e:	c8 01       	movw	r24, r16
    2240:	df 91       	pop	r29
    2242:	cf 91       	pop	r28
    2244:	1f 91       	pop	r17
    2246:	0f 91       	pop	r16
    2248:	ff 90       	pop	r15
    224a:	ef 90       	pop	r14
    224c:	df 90       	pop	r13
    224e:	cf 90       	pop	r12
    2250:	08 95       	ret

00002252 <_ZN7TwoWire5writeEh>:
    2252:	cf 93       	push	r28
    2254:	df 93       	push	r29
    2256:	1f 92       	push	r1
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    225c:	69 83       	std	Y+1, r22	; 0x01
    225e:	20 91 4d 04 	lds	r18, 0x044D	; 0x80044d <_ZN7TwoWire12transmittingE>
    2262:	22 23       	and	r18, r18
    2264:	d1 f0       	breq	.+52     	; 0x229a <_ZN7TwoWire5writeEh+0x48>
    2266:	20 91 4e 04 	lds	r18, 0x044E	; 0x80044e <_ZN7TwoWire14txBufferLengthE>
    226a:	20 32       	cpi	r18, 0x20	; 32
    226c:	40 f0       	brcs	.+16     	; 0x227e <_ZN7TwoWire5writeEh+0x2c>
    226e:	21 e0       	ldi	r18, 0x01	; 1
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	fc 01       	movw	r30, r24
    2274:	33 83       	std	Z+3, r19	; 0x03
    2276:	22 83       	std	Z+2, r18	; 0x02
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	15 c0       	rjmp	.+42     	; 0x22a8 <_ZN7TwoWire5writeEh+0x56>
    227e:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <_ZN7TwoWire13txBufferIndexE>
    2282:	e8 2f       	mov	r30, r24
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	e0 5b       	subi	r30, 0xB0	; 176
    2288:	fb 4f       	sbci	r31, 0xFB	; 251
    228a:	99 81       	ldd	r25, Y+1	; 0x01
    228c:	90 83       	st	Z, r25
    228e:	8f 5f       	subi	r24, 0xFF	; 255
    2290:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <_ZN7TwoWire13txBufferIndexE>
    2294:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <_ZN7TwoWire14txBufferLengthE>
    2298:	05 c0       	rjmp	.+10     	; 0x22a4 <_ZN7TwoWire5writeEh+0x52>
    229a:	61 e0       	ldi	r22, 0x01	; 1
    229c:	ce 01       	movw	r24, r28
    229e:	01 96       	adiw	r24, 0x01	; 1
    22a0:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <twi_transmit>
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	0f 90       	pop	r0
    22aa:	df 91       	pop	r29
    22ac:	cf 91       	pop	r28
    22ae:	08 95       	ret

000022b0 <_ZN7TwoWireC1Ev>:
    22b0:	fc 01       	movw	r30, r24
    22b2:	13 82       	std	Z+3, r1	; 0x03
    22b4:	12 82       	std	Z+2, r1	; 0x02
    22b6:	88 ee       	ldi	r24, 0xE8	; 232
    22b8:	93 e0       	ldi	r25, 0x03	; 3
    22ba:	a0 e0       	ldi	r26, 0x00	; 0
    22bc:	b0 e0       	ldi	r27, 0x00	; 0
    22be:	84 83       	std	Z+4, r24	; 0x04
    22c0:	95 83       	std	Z+5, r25	; 0x05
    22c2:	a6 83       	std	Z+6, r26	; 0x06
    22c4:	b7 83       	std	Z+7, r27	; 0x07
    22c6:	8a e6       	ldi	r24, 0x6A	; 106
    22c8:	92 e0       	ldi	r25, 0x02	; 2
    22ca:	91 83       	std	Z+1, r25	; 0x01
    22cc:	80 83       	st	Z, r24
    22ce:	08 95       	ret

000022d0 <_ZN7TwoWire5beginEv>:
    22d0:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <_ZN7TwoWire13rxBufferIndexE>
    22d4:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <_ZN7TwoWire14rxBufferLengthE>
    22d8:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <_ZN7TwoWire13txBufferIndexE>
    22dc:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <_ZN7TwoWire14txBufferLengthE>
    22e0:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <twi_init>
    22e4:	80 ef       	ldi	r24, 0xF0	; 240
    22e6:	90 e1       	ldi	r25, 0x10	; 16
    22e8:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <twi_attachSlaveTxEvent>
    22ec:	86 ec       	ldi	r24, 0xC6	; 198
    22ee:	90 e1       	ldi	r25, 0x10	; 16
    22f0:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <twi_attachSlaveRxEvent>

000022f4 <_ZN7TwoWire17beginTransmissionEh>:
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <_ZN7TwoWire12transmittingE>
    22fa:	60 93 70 04 	sts	0x0470, r22	; 0x800470 <_ZN7TwoWire9txAddressE>
    22fe:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <_ZN7TwoWire13txBufferIndexE>
    2302:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <_ZN7TwoWire14txBufferLengthE>
    2306:	08 95       	ret

00002308 <_ZN7TwoWire15endTransmissionEh>:
    2308:	0f 93       	push	r16
    230a:	06 2f       	mov	r16, r22
    230c:	21 e0       	ldi	r18, 0x01	; 1
    230e:	40 91 4e 04 	lds	r20, 0x044E	; 0x80044e <_ZN7TwoWire14txBufferLengthE>
    2312:	60 e5       	ldi	r22, 0x50	; 80
    2314:	74 e0       	ldi	r23, 0x04	; 4
    2316:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <_ZN7TwoWire9txAddressE>
    231a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <twi_writeTo>
    231e:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <_ZN7TwoWire13txBufferIndexE>
    2322:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <_ZN7TwoWire14txBufferLengthE>
    2326:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <_ZN7TwoWire12transmittingE>
    232a:	0f 91       	pop	r16
    232c:	08 95       	ret

0000232e <_ZN7TwoWire11requestFromEhhmhh>:
    232e:	4f 92       	push	r4
    2330:	5f 92       	push	r5
    2332:	6f 92       	push	r6
    2334:	7f 92       	push	r7
    2336:	af 92       	push	r10
    2338:	bf 92       	push	r11
    233a:	cf 92       	push	r12
    233c:	ef 92       	push	r14
    233e:	ff 92       	push	r15
    2340:	0f 93       	push	r16
    2342:	1f 93       	push	r17
    2344:	cf 93       	push	r28
    2346:	df 93       	push	r29
    2348:	5c 01       	movw	r10, r24
    234a:	f6 2e       	mov	r15, r22
    234c:	d4 2f       	mov	r29, r20
    234e:	28 01       	movw	r4, r16
    2350:	39 01       	movw	r6, r18
    2352:	ee 20       	and	r14, r14
    2354:	21 f1       	breq	.+72     	; 0x239e <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2356:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <_ZN7TwoWire17beginTransmissionEh>
    235a:	ce 2d       	mov	r28, r14
    235c:	c4 30       	cpi	r28, 0x04	; 4
    235e:	08 f0       	brcs	.+2      	; 0x2362 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2360:	c3 e0       	ldi	r28, 0x03	; 3
    2362:	c1 50       	subi	r28, 0x01	; 1
    2364:	c0 f0       	brcs	.+48     	; 0x2396 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2366:	28 e0       	ldi	r18, 0x08	; 8
    2368:	c2 9f       	mul	r28, r18
    236a:	c0 01       	movw	r24, r0
    236c:	11 24       	eor	r1, r1
    236e:	a3 01       	movw	r20, r6
    2370:	92 01       	movw	r18, r4
    2372:	04 c0       	rjmp	.+8      	; 0x237c <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    2374:	56 95       	lsr	r21
    2376:	47 95       	ror	r20
    2378:	37 95       	ror	r19
    237a:	27 95       	ror	r18
    237c:	8a 95       	dec	r24
    237e:	d2 f7       	brpl	.-12     	; 0x2374 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    2380:	ca 01       	movw	r24, r20
    2382:	b9 01       	movw	r22, r18
    2384:	d5 01       	movw	r26, r10
    2386:	ed 91       	ld	r30, X+
    2388:	fc 91       	ld	r31, X
    238a:	01 90       	ld	r0, Z+
    238c:	f0 81       	ld	r31, Z
    238e:	e0 2d       	mov	r30, r0
    2390:	c5 01       	movw	r24, r10
    2392:	09 95       	icall
    2394:	e6 cf       	rjmp	.-52     	; 0x2362 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2396:	60 e0       	ldi	r22, 0x00	; 0
    2398:	c5 01       	movw	r24, r10
    239a:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN7TwoWire15endTransmissionEh>
    239e:	4d 2f       	mov	r20, r29
    23a0:	d1 32       	cpi	r29, 0x21	; 33
    23a2:	08 f0       	brcs	.+2      	; 0x23a6 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    23a4:	40 e2       	ldi	r20, 0x20	; 32
    23a6:	2c 2d       	mov	r18, r12
    23a8:	63 e7       	ldi	r22, 0x73	; 115
    23aa:	74 e0       	ldi	r23, 0x04	; 4
    23ac:	8f 2d       	mov	r24, r15
    23ae:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <twi_readFrom>
    23b2:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <_ZN7TwoWire13rxBufferIndexE>
    23b6:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <_ZN7TwoWire14rxBufferLengthE>
    23ba:	df 91       	pop	r29
    23bc:	cf 91       	pop	r28
    23be:	1f 91       	pop	r17
    23c0:	0f 91       	pop	r16
    23c2:	ff 90       	pop	r15
    23c4:	ef 90       	pop	r14
    23c6:	cf 90       	pop	r12
    23c8:	bf 90       	pop	r11
    23ca:	af 90       	pop	r10
    23cc:	7f 90       	pop	r7
    23ce:	6f 90       	pop	r6
    23d0:	5f 90       	pop	r5
    23d2:	4f 90       	pop	r4
    23d4:	08 95       	ret

000023d6 <_ZN7TwoWire11requestFromEhhh>:
    23d6:	cf 92       	push	r12
    23d8:	ef 92       	push	r14
    23da:	0f 93       	push	r16
    23dc:	1f 93       	push	r17
    23de:	c2 2e       	mov	r12, r18
    23e0:	e1 2c       	mov	r14, r1
    23e2:	00 e0       	ldi	r16, 0x00	; 0
    23e4:	10 e0       	ldi	r17, 0x00	; 0
    23e6:	98 01       	movw	r18, r16
    23e8:	0e 94 97 11 	call	0x232e	; 0x232e <_ZN7TwoWire11requestFromEhhmhh>
    23ec:	1f 91       	pop	r17
    23ee:	0f 91       	pop	r16
    23f0:	ef 90       	pop	r14
    23f2:	cf 90       	pop	r12
    23f4:	08 95       	ret

000023f6 <_ZN7TwoWire11requestFromEii>:
    23f6:	21 e0       	ldi	r18, 0x01	; 1
    23f8:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <_ZN7TwoWire11requestFromEhhh>

000023fc <_ZN7TwoWire15endTransmissionEv>:
    23fc:	61 e0       	ldi	r22, 0x01	; 1
    23fe:	0c 94 84 11 	jmp	0x2308	; 0x2308 <_ZN7TwoWire15endTransmissionEh>

00002402 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2402:	8d e3       	ldi	r24, 0x3D	; 61
    2404:	94 e0       	ldi	r25, 0x04	; 4
    2406:	0c 94 58 11 	jmp	0x22b0	; 0x22b0 <_ZN7TwoWireC1Ev>

0000240a <__subsf3>:
    240a:	50 58       	subi	r21, 0x80	; 128

0000240c <__addsf3>:
    240c:	bb 27       	eor	r27, r27
    240e:	aa 27       	eor	r26, r26
    2410:	0e 94 1d 12 	call	0x243a	; 0x243a <__addsf3x>
    2414:	0c 94 ef 12 	jmp	0x25de	; 0x25de <__fp_round>
    2418:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__fp_pscA>
    241c:	38 f0       	brcs	.+14     	; 0x242c <__addsf3+0x20>
    241e:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__fp_pscB>
    2422:	20 f0       	brcs	.+8      	; 0x242c <__addsf3+0x20>
    2424:	39 f4       	brne	.+14     	; 0x2434 <__addsf3+0x28>
    2426:	9f 3f       	cpi	r25, 0xFF	; 255
    2428:	19 f4       	brne	.+6      	; 0x2430 <__addsf3+0x24>
    242a:	26 f4       	brtc	.+8      	; 0x2434 <__addsf3+0x28>
    242c:	0c 94 de 12 	jmp	0x25bc	; 0x25bc <__fp_nan>
    2430:	0e f4       	brtc	.+2      	; 0x2434 <__addsf3+0x28>
    2432:	e0 95       	com	r30
    2434:	e7 fb       	bst	r30, 7
    2436:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <__fp_inf>

0000243a <__addsf3x>:
    243a:	e9 2f       	mov	r30, r25
    243c:	0e 94 00 13 	call	0x2600	; 0x2600 <__fp_split3>
    2440:	58 f3       	brcs	.-42     	; 0x2418 <__addsf3+0xc>
    2442:	ba 17       	cp	r27, r26
    2444:	62 07       	cpc	r22, r18
    2446:	73 07       	cpc	r23, r19
    2448:	84 07       	cpc	r24, r20
    244a:	95 07       	cpc	r25, r21
    244c:	20 f0       	brcs	.+8      	; 0x2456 <__addsf3x+0x1c>
    244e:	79 f4       	brne	.+30     	; 0x246e <__addsf3x+0x34>
    2450:	a6 f5       	brtc	.+104    	; 0x24ba <__addsf3x+0x80>
    2452:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__fp_zero>
    2456:	0e f4       	brtc	.+2      	; 0x245a <__addsf3x+0x20>
    2458:	e0 95       	com	r30
    245a:	0b 2e       	mov	r0, r27
    245c:	ba 2f       	mov	r27, r26
    245e:	a0 2d       	mov	r26, r0
    2460:	0b 01       	movw	r0, r22
    2462:	b9 01       	movw	r22, r18
    2464:	90 01       	movw	r18, r0
    2466:	0c 01       	movw	r0, r24
    2468:	ca 01       	movw	r24, r20
    246a:	a0 01       	movw	r20, r0
    246c:	11 24       	eor	r1, r1
    246e:	ff 27       	eor	r31, r31
    2470:	59 1b       	sub	r21, r25
    2472:	99 f0       	breq	.+38     	; 0x249a <__addsf3x+0x60>
    2474:	59 3f       	cpi	r21, 0xF9	; 249
    2476:	50 f4       	brcc	.+20     	; 0x248c <__addsf3x+0x52>
    2478:	50 3e       	cpi	r21, 0xE0	; 224
    247a:	68 f1       	brcs	.+90     	; 0x24d6 <__addsf3x+0x9c>
    247c:	1a 16       	cp	r1, r26
    247e:	f0 40       	sbci	r31, 0x00	; 0
    2480:	a2 2f       	mov	r26, r18
    2482:	23 2f       	mov	r18, r19
    2484:	34 2f       	mov	r19, r20
    2486:	44 27       	eor	r20, r20
    2488:	58 5f       	subi	r21, 0xF8	; 248
    248a:	f3 cf       	rjmp	.-26     	; 0x2472 <__addsf3x+0x38>
    248c:	46 95       	lsr	r20
    248e:	37 95       	ror	r19
    2490:	27 95       	ror	r18
    2492:	a7 95       	ror	r26
    2494:	f0 40       	sbci	r31, 0x00	; 0
    2496:	53 95       	inc	r21
    2498:	c9 f7       	brne	.-14     	; 0x248c <__addsf3x+0x52>
    249a:	7e f4       	brtc	.+30     	; 0x24ba <__addsf3x+0x80>
    249c:	1f 16       	cp	r1, r31
    249e:	ba 0b       	sbc	r27, r26
    24a0:	62 0b       	sbc	r22, r18
    24a2:	73 0b       	sbc	r23, r19
    24a4:	84 0b       	sbc	r24, r20
    24a6:	ba f0       	brmi	.+46     	; 0x24d6 <__addsf3x+0x9c>
    24a8:	91 50       	subi	r25, 0x01	; 1
    24aa:	a1 f0       	breq	.+40     	; 0x24d4 <__addsf3x+0x9a>
    24ac:	ff 0f       	add	r31, r31
    24ae:	bb 1f       	adc	r27, r27
    24b0:	66 1f       	adc	r22, r22
    24b2:	77 1f       	adc	r23, r23
    24b4:	88 1f       	adc	r24, r24
    24b6:	c2 f7       	brpl	.-16     	; 0x24a8 <__addsf3x+0x6e>
    24b8:	0e c0       	rjmp	.+28     	; 0x24d6 <__addsf3x+0x9c>
    24ba:	ba 0f       	add	r27, r26
    24bc:	62 1f       	adc	r22, r18
    24be:	73 1f       	adc	r23, r19
    24c0:	84 1f       	adc	r24, r20
    24c2:	48 f4       	brcc	.+18     	; 0x24d6 <__addsf3x+0x9c>
    24c4:	87 95       	ror	r24
    24c6:	77 95       	ror	r23
    24c8:	67 95       	ror	r22
    24ca:	b7 95       	ror	r27
    24cc:	f7 95       	ror	r31
    24ce:	9e 3f       	cpi	r25, 0xFE	; 254
    24d0:	08 f0       	brcs	.+2      	; 0x24d4 <__addsf3x+0x9a>
    24d2:	b0 cf       	rjmp	.-160    	; 0x2434 <__addsf3+0x28>
    24d4:	93 95       	inc	r25
    24d6:	88 0f       	add	r24, r24
    24d8:	08 f0       	brcs	.+2      	; 0x24dc <__addsf3x+0xa2>
    24da:	99 27       	eor	r25, r25
    24dc:	ee 0f       	add	r30, r30
    24de:	97 95       	ror	r25
    24e0:	87 95       	ror	r24
    24e2:	08 95       	ret

000024e4 <__cmpsf2>:
    24e4:	0e 94 b4 12 	call	0x2568	; 0x2568 <__fp_cmp>
    24e8:	08 f4       	brcc	.+2      	; 0x24ec <__cmpsf2+0x8>
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	08 95       	ret

000024ee <__floatunsisf>:
    24ee:	e8 94       	clt
    24f0:	09 c0       	rjmp	.+18     	; 0x2504 <__floatsisf+0x12>

000024f2 <__floatsisf>:
    24f2:	97 fb       	bst	r25, 7
    24f4:	3e f4       	brtc	.+14     	; 0x2504 <__floatsisf+0x12>
    24f6:	90 95       	com	r25
    24f8:	80 95       	com	r24
    24fa:	70 95       	com	r23
    24fc:	61 95       	neg	r22
    24fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2500:	8f 4f       	sbci	r24, 0xFF	; 255
    2502:	9f 4f       	sbci	r25, 0xFF	; 255
    2504:	99 23       	and	r25, r25
    2506:	a9 f0       	breq	.+42     	; 0x2532 <__floatsisf+0x40>
    2508:	f9 2f       	mov	r31, r25
    250a:	96 e9       	ldi	r25, 0x96	; 150
    250c:	bb 27       	eor	r27, r27
    250e:	93 95       	inc	r25
    2510:	f6 95       	lsr	r31
    2512:	87 95       	ror	r24
    2514:	77 95       	ror	r23
    2516:	67 95       	ror	r22
    2518:	b7 95       	ror	r27
    251a:	f1 11       	cpse	r31, r1
    251c:	f8 cf       	rjmp	.-16     	; 0x250e <__floatsisf+0x1c>
    251e:	fa f4       	brpl	.+62     	; 0x255e <__floatsisf+0x6c>
    2520:	bb 0f       	add	r27, r27
    2522:	11 f4       	brne	.+4      	; 0x2528 <__floatsisf+0x36>
    2524:	60 ff       	sbrs	r22, 0
    2526:	1b c0       	rjmp	.+54     	; 0x255e <__floatsisf+0x6c>
    2528:	6f 5f       	subi	r22, 0xFF	; 255
    252a:	7f 4f       	sbci	r23, 0xFF	; 255
    252c:	8f 4f       	sbci	r24, 0xFF	; 255
    252e:	9f 4f       	sbci	r25, 0xFF	; 255
    2530:	16 c0       	rjmp	.+44     	; 0x255e <__floatsisf+0x6c>
    2532:	88 23       	and	r24, r24
    2534:	11 f0       	breq	.+4      	; 0x253a <__floatsisf+0x48>
    2536:	96 e9       	ldi	r25, 0x96	; 150
    2538:	11 c0       	rjmp	.+34     	; 0x255c <__floatsisf+0x6a>
    253a:	77 23       	and	r23, r23
    253c:	21 f0       	breq	.+8      	; 0x2546 <__floatsisf+0x54>
    253e:	9e e8       	ldi	r25, 0x8E	; 142
    2540:	87 2f       	mov	r24, r23
    2542:	76 2f       	mov	r23, r22
    2544:	05 c0       	rjmp	.+10     	; 0x2550 <__floatsisf+0x5e>
    2546:	66 23       	and	r22, r22
    2548:	71 f0       	breq	.+28     	; 0x2566 <__floatsisf+0x74>
    254a:	96 e8       	ldi	r25, 0x86	; 134
    254c:	86 2f       	mov	r24, r22
    254e:	70 e0       	ldi	r23, 0x00	; 0
    2550:	60 e0       	ldi	r22, 0x00	; 0
    2552:	2a f0       	brmi	.+10     	; 0x255e <__floatsisf+0x6c>
    2554:	9a 95       	dec	r25
    2556:	66 0f       	add	r22, r22
    2558:	77 1f       	adc	r23, r23
    255a:	88 1f       	adc	r24, r24
    255c:	da f7       	brpl	.-10     	; 0x2554 <__floatsisf+0x62>
    255e:	88 0f       	add	r24, r24
    2560:	96 95       	lsr	r25
    2562:	87 95       	ror	r24
    2564:	97 f9       	bld	r25, 7
    2566:	08 95       	ret

00002568 <__fp_cmp>:
    2568:	99 0f       	add	r25, r25
    256a:	00 08       	sbc	r0, r0
    256c:	55 0f       	add	r21, r21
    256e:	aa 0b       	sbc	r26, r26
    2570:	e0 e8       	ldi	r30, 0x80	; 128
    2572:	fe ef       	ldi	r31, 0xFE	; 254
    2574:	16 16       	cp	r1, r22
    2576:	17 06       	cpc	r1, r23
    2578:	e8 07       	cpc	r30, r24
    257a:	f9 07       	cpc	r31, r25
    257c:	c0 f0       	brcs	.+48     	; 0x25ae <__fp_cmp+0x46>
    257e:	12 16       	cp	r1, r18
    2580:	13 06       	cpc	r1, r19
    2582:	e4 07       	cpc	r30, r20
    2584:	f5 07       	cpc	r31, r21
    2586:	98 f0       	brcs	.+38     	; 0x25ae <__fp_cmp+0x46>
    2588:	62 1b       	sub	r22, r18
    258a:	73 0b       	sbc	r23, r19
    258c:	84 0b       	sbc	r24, r20
    258e:	95 0b       	sbc	r25, r21
    2590:	39 f4       	brne	.+14     	; 0x25a0 <__fp_cmp+0x38>
    2592:	0a 26       	eor	r0, r26
    2594:	61 f0       	breq	.+24     	; 0x25ae <__fp_cmp+0x46>
    2596:	23 2b       	or	r18, r19
    2598:	24 2b       	or	r18, r20
    259a:	25 2b       	or	r18, r21
    259c:	21 f4       	brne	.+8      	; 0x25a6 <__fp_cmp+0x3e>
    259e:	08 95       	ret
    25a0:	0a 26       	eor	r0, r26
    25a2:	09 f4       	brne	.+2      	; 0x25a6 <__fp_cmp+0x3e>
    25a4:	a1 40       	sbci	r26, 0x01	; 1
    25a6:	a6 95       	lsr	r26
    25a8:	8f ef       	ldi	r24, 0xFF	; 255
    25aa:	81 1d       	adc	r24, r1
    25ac:	81 1d       	adc	r24, r1
    25ae:	08 95       	ret

000025b0 <__fp_inf>:
    25b0:	97 f9       	bld	r25, 7
    25b2:	9f 67       	ori	r25, 0x7F	; 127
    25b4:	80 e8       	ldi	r24, 0x80	; 128
    25b6:	70 e0       	ldi	r23, 0x00	; 0
    25b8:	60 e0       	ldi	r22, 0x00	; 0
    25ba:	08 95       	ret

000025bc <__fp_nan>:
    25bc:	9f ef       	ldi	r25, 0xFF	; 255
    25be:	80 ec       	ldi	r24, 0xC0	; 192
    25c0:	08 95       	ret

000025c2 <__fp_pscA>:
    25c2:	00 24       	eor	r0, r0
    25c4:	0a 94       	dec	r0
    25c6:	16 16       	cp	r1, r22
    25c8:	17 06       	cpc	r1, r23
    25ca:	18 06       	cpc	r1, r24
    25cc:	09 06       	cpc	r0, r25
    25ce:	08 95       	ret

000025d0 <__fp_pscB>:
    25d0:	00 24       	eor	r0, r0
    25d2:	0a 94       	dec	r0
    25d4:	12 16       	cp	r1, r18
    25d6:	13 06       	cpc	r1, r19
    25d8:	14 06       	cpc	r1, r20
    25da:	05 06       	cpc	r0, r21
    25dc:	08 95       	ret

000025de <__fp_round>:
    25de:	09 2e       	mov	r0, r25
    25e0:	03 94       	inc	r0
    25e2:	00 0c       	add	r0, r0
    25e4:	11 f4       	brne	.+4      	; 0x25ea <__fp_round+0xc>
    25e6:	88 23       	and	r24, r24
    25e8:	52 f0       	brmi	.+20     	; 0x25fe <__fp_round+0x20>
    25ea:	bb 0f       	add	r27, r27
    25ec:	40 f4       	brcc	.+16     	; 0x25fe <__fp_round+0x20>
    25ee:	bf 2b       	or	r27, r31
    25f0:	11 f4       	brne	.+4      	; 0x25f6 <__fp_round+0x18>
    25f2:	60 ff       	sbrs	r22, 0
    25f4:	04 c0       	rjmp	.+8      	; 0x25fe <__fp_round+0x20>
    25f6:	6f 5f       	subi	r22, 0xFF	; 255
    25f8:	7f 4f       	sbci	r23, 0xFF	; 255
    25fa:	8f 4f       	sbci	r24, 0xFF	; 255
    25fc:	9f 4f       	sbci	r25, 0xFF	; 255
    25fe:	08 95       	ret

00002600 <__fp_split3>:
    2600:	57 fd       	sbrc	r21, 7
    2602:	90 58       	subi	r25, 0x80	; 128
    2604:	44 0f       	add	r20, r20
    2606:	55 1f       	adc	r21, r21
    2608:	59 f0       	breq	.+22     	; 0x2620 <__fp_splitA+0x10>
    260a:	5f 3f       	cpi	r21, 0xFF	; 255
    260c:	71 f0       	breq	.+28     	; 0x262a <__fp_splitA+0x1a>
    260e:	47 95       	ror	r20

00002610 <__fp_splitA>:
    2610:	88 0f       	add	r24, r24
    2612:	97 fb       	bst	r25, 7
    2614:	99 1f       	adc	r25, r25
    2616:	61 f0       	breq	.+24     	; 0x2630 <__fp_splitA+0x20>
    2618:	9f 3f       	cpi	r25, 0xFF	; 255
    261a:	79 f0       	breq	.+30     	; 0x263a <__fp_splitA+0x2a>
    261c:	87 95       	ror	r24
    261e:	08 95       	ret
    2620:	12 16       	cp	r1, r18
    2622:	13 06       	cpc	r1, r19
    2624:	14 06       	cpc	r1, r20
    2626:	55 1f       	adc	r21, r21
    2628:	f2 cf       	rjmp	.-28     	; 0x260e <__fp_split3+0xe>
    262a:	46 95       	lsr	r20
    262c:	f1 df       	rcall	.-30     	; 0x2610 <__fp_splitA>
    262e:	08 c0       	rjmp	.+16     	; 0x2640 <__fp_splitA+0x30>
    2630:	16 16       	cp	r1, r22
    2632:	17 06       	cpc	r1, r23
    2634:	18 06       	cpc	r1, r24
    2636:	99 1f       	adc	r25, r25
    2638:	f1 cf       	rjmp	.-30     	; 0x261c <__fp_splitA+0xc>
    263a:	86 95       	lsr	r24
    263c:	71 05       	cpc	r23, r1
    263e:	61 05       	cpc	r22, r1
    2640:	08 94       	sec
    2642:	08 95       	ret

00002644 <__fp_zero>:
    2644:	e8 94       	clt

00002646 <__fp_szero>:
    2646:	bb 27       	eor	r27, r27
    2648:	66 27       	eor	r22, r22
    264a:	77 27       	eor	r23, r23
    264c:	cb 01       	movw	r24, r22
    264e:	97 f9       	bld	r25, 7
    2650:	08 95       	ret

00002652 <__mulsf3>:
    2652:	0e 94 3c 13 	call	0x2678	; 0x2678 <__mulsf3x>
    2656:	0c 94 ef 12 	jmp	0x25de	; 0x25de <__fp_round>
    265a:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__fp_pscA>
    265e:	38 f0       	brcs	.+14     	; 0x266e <__mulsf3+0x1c>
    2660:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__fp_pscB>
    2664:	20 f0       	brcs	.+8      	; 0x266e <__mulsf3+0x1c>
    2666:	95 23       	and	r25, r21
    2668:	11 f0       	breq	.+4      	; 0x266e <__mulsf3+0x1c>
    266a:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <__fp_inf>
    266e:	0c 94 de 12 	jmp	0x25bc	; 0x25bc <__fp_nan>
    2672:	11 24       	eor	r1, r1
    2674:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__fp_szero>

00002678 <__mulsf3x>:
    2678:	0e 94 00 13 	call	0x2600	; 0x2600 <__fp_split3>
    267c:	70 f3       	brcs	.-36     	; 0x265a <__mulsf3+0x8>

0000267e <__mulsf3_pse>:
    267e:	95 9f       	mul	r25, r21
    2680:	c1 f3       	breq	.-16     	; 0x2672 <__mulsf3+0x20>
    2682:	95 0f       	add	r25, r21
    2684:	50 e0       	ldi	r21, 0x00	; 0
    2686:	55 1f       	adc	r21, r21
    2688:	62 9f       	mul	r22, r18
    268a:	f0 01       	movw	r30, r0
    268c:	72 9f       	mul	r23, r18
    268e:	bb 27       	eor	r27, r27
    2690:	f0 0d       	add	r31, r0
    2692:	b1 1d       	adc	r27, r1
    2694:	63 9f       	mul	r22, r19
    2696:	aa 27       	eor	r26, r26
    2698:	f0 0d       	add	r31, r0
    269a:	b1 1d       	adc	r27, r1
    269c:	aa 1f       	adc	r26, r26
    269e:	64 9f       	mul	r22, r20
    26a0:	66 27       	eor	r22, r22
    26a2:	b0 0d       	add	r27, r0
    26a4:	a1 1d       	adc	r26, r1
    26a6:	66 1f       	adc	r22, r22
    26a8:	82 9f       	mul	r24, r18
    26aa:	22 27       	eor	r18, r18
    26ac:	b0 0d       	add	r27, r0
    26ae:	a1 1d       	adc	r26, r1
    26b0:	62 1f       	adc	r22, r18
    26b2:	73 9f       	mul	r23, r19
    26b4:	b0 0d       	add	r27, r0
    26b6:	a1 1d       	adc	r26, r1
    26b8:	62 1f       	adc	r22, r18
    26ba:	83 9f       	mul	r24, r19
    26bc:	a0 0d       	add	r26, r0
    26be:	61 1d       	adc	r22, r1
    26c0:	22 1f       	adc	r18, r18
    26c2:	74 9f       	mul	r23, r20
    26c4:	33 27       	eor	r19, r19
    26c6:	a0 0d       	add	r26, r0
    26c8:	61 1d       	adc	r22, r1
    26ca:	23 1f       	adc	r18, r19
    26cc:	84 9f       	mul	r24, r20
    26ce:	60 0d       	add	r22, r0
    26d0:	21 1d       	adc	r18, r1
    26d2:	82 2f       	mov	r24, r18
    26d4:	76 2f       	mov	r23, r22
    26d6:	6a 2f       	mov	r22, r26
    26d8:	11 24       	eor	r1, r1
    26da:	9f 57       	subi	r25, 0x7F	; 127
    26dc:	50 40       	sbci	r21, 0x00	; 0
    26de:	9a f0       	brmi	.+38     	; 0x2706 <__mulsf3_pse+0x88>
    26e0:	f1 f0       	breq	.+60     	; 0x271e <__mulsf3_pse+0xa0>
    26e2:	88 23       	and	r24, r24
    26e4:	4a f0       	brmi	.+18     	; 0x26f8 <__mulsf3_pse+0x7a>
    26e6:	ee 0f       	add	r30, r30
    26e8:	ff 1f       	adc	r31, r31
    26ea:	bb 1f       	adc	r27, r27
    26ec:	66 1f       	adc	r22, r22
    26ee:	77 1f       	adc	r23, r23
    26f0:	88 1f       	adc	r24, r24
    26f2:	91 50       	subi	r25, 0x01	; 1
    26f4:	50 40       	sbci	r21, 0x00	; 0
    26f6:	a9 f7       	brne	.-22     	; 0x26e2 <__mulsf3_pse+0x64>
    26f8:	9e 3f       	cpi	r25, 0xFE	; 254
    26fa:	51 05       	cpc	r21, r1
    26fc:	80 f0       	brcs	.+32     	; 0x271e <__mulsf3_pse+0xa0>
    26fe:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <__fp_inf>
    2702:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__fp_szero>
    2706:	5f 3f       	cpi	r21, 0xFF	; 255
    2708:	e4 f3       	brlt	.-8      	; 0x2702 <__mulsf3_pse+0x84>
    270a:	98 3e       	cpi	r25, 0xE8	; 232
    270c:	d4 f3       	brlt	.-12     	; 0x2702 <__mulsf3_pse+0x84>
    270e:	86 95       	lsr	r24
    2710:	77 95       	ror	r23
    2712:	67 95       	ror	r22
    2714:	b7 95       	ror	r27
    2716:	f7 95       	ror	r31
    2718:	e7 95       	ror	r30
    271a:	9f 5f       	subi	r25, 0xFF	; 255
    271c:	c1 f7       	brne	.-16     	; 0x270e <__mulsf3_pse+0x90>
    271e:	fe 2b       	or	r31, r30
    2720:	88 0f       	add	r24, r24
    2722:	91 1d       	adc	r25, r1
    2724:	96 95       	lsr	r25
    2726:	87 95       	ror	r24
    2728:	97 f9       	bld	r25, 7
    272a:	08 95       	ret

0000272c <__cxa_pure_virtual>:
    272c:	0e 94 cd 20 	call	0x419a	; 0x419a <abort>

00002730 <initVariant>:
    2730:	08 95       	ret

00002732 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2732:	0e 94 85 1a 	call	0x350a	; 0x350a <init>

	initVariant();
    2736:	0e 94 98 13 	call	0x2730	; 0x2730 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
    273a:	83 e9       	ldi	r24, 0x93	; 147
    273c:	94 e0       	ldi	r25, 0x04	; 4
    273e:	0e 94 b0 19 	call	0x3360	; 0x3360 <_ZN10USBDevice_6attachEv>
#endif
	
	setup();
    2742:	0e 94 1a 05 	call	0xa34	; 0xa34 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2746:	c0 e0       	ldi	r28, 0x00	; 0
    2748:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    274a:	0e 94 64 05 	call	0xac8	; 0xac8 <loop>
		if (serialEventRun) serialEventRun();
    274e:	20 97       	sbiw	r28, 0x00	; 0
    2750:	e1 f3       	breq	.-8      	; 0x274a <main+0x18>
    2752:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2756:	f9 cf       	rjmp	.-14     	; 0x274a <main+0x18>

00002758 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2758:	cf 92       	push	r12
    275a:	df 92       	push	r13
    275c:	ef 92       	push	r14
    275e:	ff 92       	push	r15
    2760:	0f 93       	push	r16
    2762:	1f 93       	push	r17
    2764:	cf 93       	push	r28
    2766:	df 93       	push	r29
    2768:	6c 01       	movw	r12, r24
    276a:	7a 01       	movw	r14, r20
    276c:	8b 01       	movw	r16, r22
    276e:	c0 e0       	ldi	r28, 0x00	; 0
    2770:	d0 e0       	ldi	r29, 0x00	; 0
    2772:	ce 15       	cp	r28, r14
    2774:	df 05       	cpc	r29, r15
    2776:	81 f0       	breq	.+32     	; 0x2798 <_ZN5Print5writeEPKhj+0x40>
    2778:	d8 01       	movw	r26, r16
    277a:	6d 91       	ld	r22, X+
    277c:	8d 01       	movw	r16, r26
    277e:	d6 01       	movw	r26, r12
    2780:	ed 91       	ld	r30, X+
    2782:	fc 91       	ld	r31, X
    2784:	01 90       	ld	r0, Z+
    2786:	f0 81       	ld	r31, Z
    2788:	e0 2d       	mov	r30, r0
    278a:	c6 01       	movw	r24, r12
    278c:	09 95       	icall
    278e:	89 2b       	or	r24, r25
    2790:	11 f0       	breq	.+4      	; 0x2796 <_ZN5Print5writeEPKhj+0x3e>
    2792:	21 96       	adiw	r28, 0x01	; 1
    2794:	ee cf       	rjmp	.-36     	; 0x2772 <_ZN5Print5writeEPKhj+0x1a>
    2796:	7e 01       	movw	r14, r28
    2798:	c7 01       	movw	r24, r14
    279a:	df 91       	pop	r29
    279c:	cf 91       	pop	r28
    279e:	1f 91       	pop	r17
    27a0:	0f 91       	pop	r16
    27a2:	ff 90       	pop	r15
    27a4:	ef 90       	pop	r14
    27a6:	df 90       	pop	r13
    27a8:	cf 90       	pop	r12
    27aa:	08 95       	ret

000027ac <_ZN5Print5writeEPKc>:
    27ac:	61 15       	cp	r22, r1
    27ae:	71 05       	cpc	r23, r1
    27b0:	79 f0       	breq	.+30     	; 0x27d0 <_ZN5Print5writeEPKc+0x24>
    27b2:	fb 01       	movw	r30, r22
    27b4:	01 90       	ld	r0, Z+
    27b6:	00 20       	and	r0, r0
    27b8:	e9 f7       	brne	.-6      	; 0x27b4 <_ZN5Print5writeEPKc+0x8>
    27ba:	31 97       	sbiw	r30, 0x01	; 1
    27bc:	af 01       	movw	r20, r30
    27be:	46 1b       	sub	r20, r22
    27c0:	57 0b       	sbc	r21, r23
    27c2:	dc 01       	movw	r26, r24
    27c4:	ed 91       	ld	r30, X+
    27c6:	fc 91       	ld	r31, X
    27c8:	02 80       	ldd	r0, Z+2	; 0x02
    27ca:	f3 81       	ldd	r31, Z+3	; 0x03
    27cc:	e0 2d       	mov	r30, r0
    27ce:	09 94       	ijmp
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	08 95       	ret

000027d6 <_ZN5Print5printERK6String>:
    27d6:	db 01       	movw	r26, r22
    27d8:	14 96       	adiw	r26, 0x04	; 4
    27da:	4d 91       	ld	r20, X+
    27dc:	5c 91       	ld	r21, X
    27de:	15 97       	sbiw	r26, 0x05	; 5
    27e0:	6d 91       	ld	r22, X+
    27e2:	7c 91       	ld	r23, X
    27e4:	dc 01       	movw	r26, r24
    27e6:	ed 91       	ld	r30, X+
    27e8:	fc 91       	ld	r31, X
    27ea:	02 80       	ldd	r0, Z+2	; 0x02
    27ec:	f3 81       	ldd	r31, Z+3	; 0x03
    27ee:	e0 2d       	mov	r30, r0
    27f0:	09 94       	ijmp

000027f2 <_ZN5Print5printEPKc>:
    27f2:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <_ZN5Print5writeEPKc>

000027f6 <_ZN5Print5printEc>:
    27f6:	dc 01       	movw	r26, r24
    27f8:	ed 91       	ld	r30, X+
    27fa:	fc 91       	ld	r31, X
    27fc:	01 90       	ld	r0, Z+
    27fe:	f0 81       	ld	r31, Z
    2800:	e0 2d       	mov	r30, r0
    2802:	09 94       	ijmp

00002804 <_ZN5Print11printNumberEmh>:
    2804:	8f 92       	push	r8
    2806:	9f 92       	push	r9
    2808:	af 92       	push	r10
    280a:	bf 92       	push	r11
    280c:	ef 92       	push	r14
    280e:	ff 92       	push	r15
    2810:	0f 93       	push	r16
    2812:	1f 93       	push	r17
    2814:	cf 93       	push	r28
    2816:	df 93       	push	r29
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
    281c:	a1 97       	sbiw	r28, 0x21	; 33
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	f8 94       	cli
    2822:	de bf       	out	0x3e, r29	; 62
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	cd bf       	out	0x3d, r28	; 61
    2828:	7c 01       	movw	r14, r24
    282a:	fa 01       	movw	r30, r20
    282c:	cb 01       	movw	r24, r22
    282e:	19 a2       	std	Y+33, r1	; 0x21
    2830:	22 30       	cpi	r18, 0x02	; 2
    2832:	08 f4       	brcc	.+2      	; 0x2836 <_ZN5Print11printNumberEmh+0x32>
    2834:	2a e0       	ldi	r18, 0x0A	; 10
    2836:	8e 01       	movw	r16, r28
    2838:	0f 5d       	subi	r16, 0xDF	; 223
    283a:	1f 4f       	sbci	r17, 0xFF	; 255
    283c:	82 2e       	mov	r8, r18
    283e:	91 2c       	mov	r9, r1
    2840:	a1 2c       	mov	r10, r1
    2842:	b1 2c       	mov	r11, r1
    2844:	bf 01       	movw	r22, r30
    2846:	a5 01       	movw	r20, r10
    2848:	94 01       	movw	r18, r8
    284a:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <__udivmodsi4>
    284e:	f9 01       	movw	r30, r18
    2850:	ca 01       	movw	r24, r20
    2852:	01 50       	subi	r16, 0x01	; 1
    2854:	11 09       	sbc	r17, r1
    2856:	6a 30       	cpi	r22, 0x0A	; 10
    2858:	10 f4       	brcc	.+4      	; 0x285e <_ZN5Print11printNumberEmh+0x5a>
    285a:	60 5d       	subi	r22, 0xD0	; 208
    285c:	01 c0       	rjmp	.+2      	; 0x2860 <_ZN5Print11printNumberEmh+0x5c>
    285e:	69 5c       	subi	r22, 0xC9	; 201
    2860:	d8 01       	movw	r26, r16
    2862:	6c 93       	st	X, r22
    2864:	23 2b       	or	r18, r19
    2866:	24 2b       	or	r18, r20
    2868:	25 2b       	or	r18, r21
    286a:	61 f7       	brne	.-40     	; 0x2844 <_ZN5Print11printNumberEmh+0x40>
    286c:	b8 01       	movw	r22, r16
    286e:	c7 01       	movw	r24, r14
    2870:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_ZN5Print5writeEPKc>
    2874:	a1 96       	adiw	r28, 0x21	; 33
    2876:	0f b6       	in	r0, 0x3f	; 63
    2878:	f8 94       	cli
    287a:	de bf       	out	0x3e, r29	; 62
    287c:	0f be       	out	0x3f, r0	; 63
    287e:	cd bf       	out	0x3d, r28	; 61
    2880:	df 91       	pop	r29
    2882:	cf 91       	pop	r28
    2884:	1f 91       	pop	r17
    2886:	0f 91       	pop	r16
    2888:	ff 90       	pop	r15
    288a:	ef 90       	pop	r14
    288c:	bf 90       	pop	r11
    288e:	af 90       	pop	r10
    2890:	9f 90       	pop	r9
    2892:	8f 90       	pop	r8
    2894:	08 95       	ret

00002896 <_ZN5Print5printEmi>:
    2896:	21 15       	cp	r18, r1
    2898:	31 05       	cpc	r19, r1
    289a:	41 f4       	brne	.+16     	; 0x28ac <_ZN5Print5printEmi+0x16>
    289c:	dc 01       	movw	r26, r24
    289e:	ed 91       	ld	r30, X+
    28a0:	fc 91       	ld	r31, X
    28a2:	01 90       	ld	r0, Z+
    28a4:	f0 81       	ld	r31, Z
    28a6:	e0 2d       	mov	r30, r0
    28a8:	64 2f       	mov	r22, r20
    28aa:	09 94       	ijmp
    28ac:	0c 94 02 14 	jmp	0x2804	; 0x2804 <_ZN5Print11printNumberEmh>

000028b0 <_ZN5Print5printEji>:
    28b0:	9a 01       	movw	r18, r20
    28b2:	ab 01       	movw	r20, r22
    28b4:	60 e0       	ldi	r22, 0x00	; 0
    28b6:	70 e0       	ldi	r23, 0x00	; 0
    28b8:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <_ZN5Print5printEmi>

000028bc <_ZN5Print5printEli>:
    28bc:	cf 92       	push	r12
    28be:	df 92       	push	r13
    28c0:	ef 92       	push	r14
    28c2:	ff 92       	push	r15
    28c4:	0f 93       	push	r16
    28c6:	1f 93       	push	r17
    28c8:	cf 93       	push	r28
    28ca:	df 93       	push	r29
    28cc:	21 15       	cp	r18, r1
    28ce:	31 05       	cpc	r19, r1
    28d0:	81 f4       	brne	.+32     	; 0x28f2 <_ZN5Print5printEli+0x36>
    28d2:	dc 01       	movw	r26, r24
    28d4:	ed 91       	ld	r30, X+
    28d6:	fc 91       	ld	r31, X
    28d8:	01 90       	ld	r0, Z+
    28da:	f0 81       	ld	r31, Z
    28dc:	e0 2d       	mov	r30, r0
    28de:	64 2f       	mov	r22, r20
    28e0:	df 91       	pop	r29
    28e2:	cf 91       	pop	r28
    28e4:	1f 91       	pop	r17
    28e6:	0f 91       	pop	r16
    28e8:	ff 90       	pop	r15
    28ea:	ef 90       	pop	r14
    28ec:	df 90       	pop	r13
    28ee:	cf 90       	pop	r12
    28f0:	09 94       	ijmp
    28f2:	2a 30       	cpi	r18, 0x0A	; 10
    28f4:	31 05       	cpc	r19, r1
    28f6:	01 f5       	brne	.+64     	; 0x2938 <_ZN5Print5printEli+0x7c>
    28f8:	77 ff       	sbrs	r23, 7
    28fa:	1d c0       	rjmp	.+58     	; 0x2936 <_ZN5Print5printEli+0x7a>
    28fc:	6a 01       	movw	r12, r20
    28fe:	7b 01       	movw	r14, r22
    2900:	ec 01       	movw	r28, r24
    2902:	6d e2       	ldi	r22, 0x2D	; 45
    2904:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <_ZN5Print5printEc>
    2908:	8c 01       	movw	r16, r24
    290a:	44 27       	eor	r20, r20
    290c:	55 27       	eor	r21, r21
    290e:	ba 01       	movw	r22, r20
    2910:	4c 19       	sub	r20, r12
    2912:	5d 09       	sbc	r21, r13
    2914:	6e 09       	sbc	r22, r14
    2916:	7f 09       	sbc	r23, r15
    2918:	2a e0       	ldi	r18, 0x0A	; 10
    291a:	ce 01       	movw	r24, r28
    291c:	0e 94 02 14 	call	0x2804	; 0x2804 <_ZN5Print11printNumberEmh>
    2920:	80 0f       	add	r24, r16
    2922:	91 1f       	adc	r25, r17
    2924:	df 91       	pop	r29
    2926:	cf 91       	pop	r28
    2928:	1f 91       	pop	r17
    292a:	0f 91       	pop	r16
    292c:	ff 90       	pop	r15
    292e:	ef 90       	pop	r14
    2930:	df 90       	pop	r13
    2932:	cf 90       	pop	r12
    2934:	08 95       	ret
    2936:	2a e0       	ldi	r18, 0x0A	; 10
    2938:	df 91       	pop	r29
    293a:	cf 91       	pop	r28
    293c:	1f 91       	pop	r17
    293e:	0f 91       	pop	r16
    2940:	ff 90       	pop	r15
    2942:	ef 90       	pop	r14
    2944:	df 90       	pop	r13
    2946:	cf 90       	pop	r12
    2948:	0c 94 02 14 	jmp	0x2804	; 0x2804 <_ZN5Print11printNumberEmh>

0000294c <_ZN5Print5printEii>:
    294c:	9a 01       	movw	r18, r20
    294e:	ab 01       	movw	r20, r22
    2950:	77 0f       	add	r23, r23
    2952:	66 0b       	sbc	r22, r22
    2954:	77 0b       	sbc	r23, r23
    2956:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <_ZN5Print5printEli>

0000295a <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    295a:	7f 92       	push	r7
    295c:	8f 92       	push	r8
    295e:	9f 92       	push	r9
    2960:	af 92       	push	r10
    2962:	bf 92       	push	r11
    2964:	cf 92       	push	r12
    2966:	df 92       	push	r13
    2968:	ef 92       	push	r14
    296a:	ff 92       	push	r15
    296c:	0f 93       	push	r16
    296e:	1f 93       	push	r17
    2970:	cf 93       	push	r28
    2972:	df 93       	push	r29
    2974:	8c 01       	movw	r16, r24
    2976:	6a 01       	movw	r12, r20
    2978:	7b 01       	movw	r14, r22
    297a:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    297c:	9a 01       	movw	r18, r20
    297e:	ab 01       	movw	r20, r22
    2980:	c7 01       	movw	r24, r14
    2982:	b6 01       	movw	r22, r12
    2984:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <__unordsf2>
    2988:	88 23       	and	r24, r24
    298a:	19 f0       	breq	.+6      	; 0x2992 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    298c:	6b e7       	ldi	r22, 0x7B	; 123
    298e:	72 e0       	ldi	r23, 0x02	; 2
    2990:	27 c0       	rjmp	.+78     	; 0x29e0 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    2992:	46 01       	movw	r8, r12
    2994:	57 01       	movw	r10, r14
    2996:	e8 94       	clt
    2998:	b7 f8       	bld	r11, 7
    299a:	2f ef       	ldi	r18, 0xFF	; 255
    299c:	3f ef       	ldi	r19, 0xFF	; 255
    299e:	4f e7       	ldi	r20, 0x7F	; 127
    29a0:	5f e7       	ldi	r21, 0x7F	; 127
    29a2:	c5 01       	movw	r24, r10
    29a4:	b4 01       	movw	r22, r8
    29a6:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <__unordsf2>
    29aa:	81 11       	cpse	r24, r1
    29ac:	0d c0       	rjmp	.+26     	; 0x29c8 <_ZN5Print10printFloatEdh+0x6e>
    29ae:	2f ef       	ldi	r18, 0xFF	; 255
    29b0:	3f ef       	ldi	r19, 0xFF	; 255
    29b2:	4f e7       	ldi	r20, 0x7F	; 127
    29b4:	5f e7       	ldi	r21, 0x7F	; 127
    29b6:	c5 01       	movw	r24, r10
    29b8:	b4 01       	movw	r22, r8
    29ba:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__cmpsf2>
    29be:	18 16       	cp	r1, r24
    29c0:	1c f4       	brge	.+6      	; 0x29c8 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    29c2:	6f e7       	ldi	r22, 0x7F	; 127
    29c4:	72 e0       	ldi	r23, 0x02	; 2
    29c6:	0c c0       	rjmp	.+24     	; 0x29e0 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    29c8:	2f ef       	ldi	r18, 0xFF	; 255
    29ca:	3f ef       	ldi	r19, 0xFF	; 255
    29cc:	4f e7       	ldi	r20, 0x7F	; 127
    29ce:	5f e4       	ldi	r21, 0x4F	; 79
    29d0:	c7 01       	movw	r24, r14
    29d2:	b6 01       	movw	r22, r12
    29d4:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <__gesf2>
    29d8:	18 16       	cp	r1, r24
    29da:	94 f4       	brge	.+36     	; 0x2a00 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    29dc:	63 e8       	ldi	r22, 0x83	; 131
    29de:	72 e0       	ldi	r23, 0x02	; 2
    29e0:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    29e2:	df 91       	pop	r29
    29e4:	cf 91       	pop	r28
    29e6:	1f 91       	pop	r17
    29e8:	0f 91       	pop	r16
    29ea:	ff 90       	pop	r15
    29ec:	ef 90       	pop	r14
    29ee:	df 90       	pop	r13
    29f0:	cf 90       	pop	r12
    29f2:	bf 90       	pop	r11
    29f4:	af 90       	pop	r10
    29f6:	9f 90       	pop	r9
    29f8:	8f 90       	pop	r8
    29fa:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    29fc:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    2a00:	2f ef       	ldi	r18, 0xFF	; 255
    2a02:	3f ef       	ldi	r19, 0xFF	; 255
    2a04:	4f e7       	ldi	r20, 0x7F	; 127
    2a06:	5f ec       	ldi	r21, 0xCF	; 207
    2a08:	c7 01       	movw	r24, r14
    2a0a:	b6 01       	movw	r22, r12
    2a0c:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__cmpsf2>
    2a10:	87 fd       	sbrc	r24, 7
    2a12:	e4 cf       	rjmp	.-56     	; 0x29dc <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	a9 01       	movw	r20, r18
    2a1a:	c7 01       	movw	r24, r14
    2a1c:	b6 01       	movw	r22, r12
    2a1e:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__cmpsf2>
    2a22:	87 ff       	sbrs	r24, 7
    2a24:	0a c0       	rjmp	.+20     	; 0x2a3a <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    2a26:	6d e2       	ldi	r22, 0x2D	; 45
    2a28:	c8 01       	movw	r24, r16
    2a2a:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <_ZN5Print5printEc>
    2a2e:	ec 01       	movw	r28, r24
     number = -number;
    2a30:	f7 fa       	bst	r15, 7
    2a32:	f0 94       	com	r15
    2a34:	f7 f8       	bld	r15, 7
    2a36:	f0 94       	com	r15
    2a38:	02 c0       	rjmp	.+4      	; 0x2a3e <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    2a3a:	c0 e0       	ldi	r28, 0x00	; 0
    2a3c:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2a3e:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    2a40:	60 e0       	ldi	r22, 0x00	; 0
    2a42:	70 e0       	ldi	r23, 0x00	; 0
    2a44:	80 e0       	ldi	r24, 0x00	; 0
    2a46:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    2a48:	7b 14       	cp	r7, r11
    2a4a:	41 f0       	breq	.+16     	; 0x2a5c <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	40 e2       	ldi	r20, 0x20	; 32
    2a52:	51 e4       	ldi	r21, 0x41	; 65
    2a54:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2a58:	b3 94       	inc	r11
    2a5a:	f6 cf       	rjmp	.-20     	; 0x2a48 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    2a5c:	a7 01       	movw	r20, r14
    2a5e:	96 01       	movw	r18, r12
    2a60:	0e 94 06 12 	call	0x240c	; 0x240c <__addsf3>
    2a64:	6b 01       	movw	r12, r22
    2a66:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    2a68:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <__fixunssfsi>
    2a6c:	4b 01       	movw	r8, r22
    2a6e:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    2a70:	2a e0       	ldi	r18, 0x0A	; 10
    2a72:	ab 01       	movw	r20, r22
    2a74:	bc 01       	movw	r22, r24
    2a76:	c8 01       	movw	r24, r16
    2a78:	0e 94 02 14 	call	0x2804	; 0x2804 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2a7c:	c8 0f       	add	r28, r24
    2a7e:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    2a80:	77 20       	and	r7, r7
    2a82:	b9 f1       	breq	.+110    	; 0x2af2 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    2a84:	c5 01       	movw	r24, r10
    2a86:	b4 01       	movw	r22, r8
    2a88:	0e 94 77 12 	call	0x24ee	; 0x24ee <__floatunsisf>
    2a8c:	9b 01       	movw	r18, r22
    2a8e:	ac 01       	movw	r20, r24
    2a90:	c7 01       	movw	r24, r14
    2a92:	b6 01       	movw	r22, r12
    2a94:	0e 94 05 12 	call	0x240a	; 0x240a <__subsf3>
    2a98:	6b 01       	movw	r12, r22
    2a9a:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    2a9c:	6e e2       	ldi	r22, 0x2E	; 46
    2a9e:	c8 01       	movw	r24, r16
    2aa0:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <_ZN5Print5printEc>
    2aa4:	c8 0f       	add	r28, r24
    2aa6:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	40 e2       	ldi	r20, 0x20	; 32
    2aae:	51 e4       	ldi	r21, 0x41	; 65
    2ab0:	c7 01       	movw	r24, r14
    2ab2:	b6 01       	movw	r22, r12
    2ab4:	0e 94 29 13 	call	0x2652	; 0x2652 <__mulsf3>
    2ab8:	4b 01       	movw	r8, r22
    2aba:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    2abc:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <__fixunssfsi>
    2ac0:	6b 01       	movw	r12, r22
    2ac2:	7c 01       	movw	r14, r24
    n += print(toPrint);
    2ac4:	4a e0       	ldi	r20, 0x0A	; 10
    2ac6:	50 e0       	ldi	r21, 0x00	; 0
    2ac8:	c8 01       	movw	r24, r16
    2aca:	0e 94 58 14 	call	0x28b0	; 0x28b0 <_ZN5Print5printEji>
    2ace:	c8 0f       	add	r28, r24
    2ad0:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    2ad2:	b6 01       	movw	r22, r12
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	0e 94 77 12 	call	0x24ee	; 0x24ee <__floatunsisf>
    2adc:	9b 01       	movw	r18, r22
    2ade:	ac 01       	movw	r20, r24
    2ae0:	c5 01       	movw	r24, r10
    2ae2:	b4 01       	movw	r22, r8
    2ae4:	0e 94 05 12 	call	0x240a	; 0x240a <__subsf3>
    2ae8:	6b 01       	movw	r12, r22
    2aea:	7c 01       	movw	r14, r24
    2aec:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2aee:	71 10       	cpse	r7, r1
    2af0:	db cf       	rjmp	.-74     	; 0x2aa8 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2af2:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2af4:	df 91       	pop	r29
    2af6:	cf 91       	pop	r28
    2af8:	1f 91       	pop	r17
    2afa:	0f 91       	pop	r16
    2afc:	ff 90       	pop	r15
    2afe:	ef 90       	pop	r14
    2b00:	df 90       	pop	r13
    2b02:	cf 90       	pop	r12
    2b04:	bf 90       	pop	r11
    2b06:	af 90       	pop	r10
    2b08:	9f 90       	pop	r9
    2b0a:	8f 90       	pop	r8
    2b0c:	7f 90       	pop	r7
    2b0e:	08 95       	ret

00002b10 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2b10:	0c 94 ad 14 	jmp	0x295a	; 0x295a <_ZN5Print10printFloatEdh>

00002b14 <_ZL4RecvPVhh>:
//=======================================================================
//=======================================================================

USBDevice_ USBDevice;

USBDevice_::USBDevice_()
    2b14:	61 50       	subi	r22, 0x01	; 1
    2b16:	30 f0       	brcs	.+12     	; 0x2b24 <_ZL4RecvPVhh+0x10>
    2b18:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2b1c:	fc 01       	movw	r30, r24
    2b1e:	20 83       	st	Z, r18
    2b20:	01 96       	adiw	r24, 0x01	; 1
    2b22:	f8 cf       	rjmp	.-16     	; 0x2b14 <_ZL4RecvPVhh>
    2b24:	28 98       	cbi	0x05, 0	; 5
    2b26:	84 e6       	ldi	r24, 0x64	; 100
    2b28:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <RxLEDPulse>
    2b2c:	08 95       	ret

00002b2e <_ZL11SendControlh>:
    2b2e:	40 91 96 04 	lds	r20, 0x0496	; 0x800496 <_ZL6_cmark>
    2b32:	50 91 97 04 	lds	r21, 0x0497	; 0x800497 <_ZL6_cmark+0x1>
    2b36:	20 91 94 04 	lds	r18, 0x0494	; 0x800494 <_ZL5_cend>
    2b3a:	30 91 95 04 	lds	r19, 0x0495	; 0x800495 <_ZL5_cend+0x1>
    2b3e:	42 17       	cp	r20, r18
    2b40:	53 07       	cpc	r21, r19
    2b42:	b4 f4       	brge	.+44     	; 0x2b70 <_ZL11SendControlh+0x42>
    2b44:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2b48:	95 70       	andi	r25, 0x05	; 5
    2b4a:	e1 f3       	breq	.-8      	; 0x2b44 <_ZL11SendControlh+0x16>
    2b4c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2b50:	92 fd       	sbrc	r25, 2
    2b52:	19 c0       	rjmp	.+50     	; 0x2b86 <_ZL11SendControlh+0x58>
    2b54:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2b58:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <_ZL6_cmark>
    2b5c:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <_ZL6_cmark+0x1>
    2b60:	01 96       	adiw	r24, 0x01	; 1
    2b62:	8f 73       	andi	r24, 0x3F	; 63
    2b64:	99 27       	eor	r25, r25
    2b66:	89 2b       	or	r24, r25
    2b68:	19 f4       	brne	.+6      	; 0x2b70 <_ZL11SendControlh+0x42>
    2b6a:	8e ef       	ldi	r24, 0xFE	; 254
    2b6c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2b70:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <_ZL6_cmark>
    2b74:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <_ZL6_cmark+0x1>
    2b78:	01 96       	adiw	r24, 0x01	; 1
    2b7a:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <_ZL6_cmark+0x1>
    2b7e:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <_ZL6_cmark>
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	08 95       	ret
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	08 95       	ret

00002b8a <_ZL24USB_SendStringDescriptorPKhhh>:
    2b8a:	df 92       	push	r13
    2b8c:	ef 92       	push	r14
    2b8e:	ff 92       	push	r15
    2b90:	0f 93       	push	r16
    2b92:	1f 93       	push	r17
    2b94:	cf 93       	push	r28
    2b96:	df 93       	push	r29
    2b98:	d8 2e       	mov	r13, r24
    2b9a:	f9 2e       	mov	r15, r25
    2b9c:	e4 2e       	mov	r14, r20
    2b9e:	06 2f       	mov	r16, r22
    2ba0:	10 e0       	ldi	r17, 0x00	; 0
    2ba2:	c8 01       	movw	r24, r16
    2ba4:	01 96       	adiw	r24, 0x01	; 1
    2ba6:	88 0f       	add	r24, r24
    2ba8:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <_ZL11SendControlh>
    2bac:	83 e0       	ldi	r24, 0x03	; 3
    2bae:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <_ZL11SendControlh>
    2bb2:	cd 2d       	mov	r28, r13
    2bb4:	df 2d       	mov	r29, r15
    2bb6:	0c 0f       	add	r16, r28
    2bb8:	1d 1f       	adc	r17, r29
    2bba:	c0 17       	cp	r28, r16
    2bbc:	d1 07       	cpc	r29, r17
    2bbe:	89 f0       	breq	.+34     	; 0x2be2 <_ZL24USB_SendStringDescriptorPKhhh+0x58>
    2bc0:	e7 fe       	sbrs	r14, 7
    2bc2:	03 c0       	rjmp	.+6      	; 0x2bca <_ZL24USB_SendStringDescriptorPKhhh+0x40>
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	84 91       	lpm	r24, Z
    2bc8:	01 c0       	rjmp	.+2      	; 0x2bcc <_ZL24USB_SendStringDescriptorPKhhh+0x42>
    2bca:	88 81       	ld	r24, Y
    2bcc:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <_ZL11SendControlh>
    2bd0:	f8 2e       	mov	r15, r24
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <_ZL11SendControlh>
    2bd8:	8f 21       	and	r24, r15
    2bda:	21 96       	adiw	r28, 0x01	; 1
    2bdc:	81 11       	cpse	r24, r1
    2bde:	ed cf       	rjmp	.-38     	; 0x2bba <_ZL24USB_SendStringDescriptorPKhhh+0x30>
    2be0:	01 c0       	rjmp	.+2      	; 0x2be4 <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	df 91       	pop	r29
    2be6:	cf 91       	pop	r28
    2be8:	1f 91       	pop	r17
    2bea:	0f 91       	pop	r16
    2bec:	ff 90       	pop	r15
    2bee:	ef 90       	pop	r14
    2bf0:	df 90       	pop	r13
    2bf2:	08 95       	ret

00002bf4 <_ZL15USB_ClockEnablev>:
    2bf4:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    2bf8:	81 60       	ori	r24, 0x01	; 1
    2bfa:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    2bfe:	80 ea       	ldi	r24, 0xA0	; 160
    2c00:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2c04:	89 b5       	in	r24, 0x29	; 41
    2c06:	80 61       	ori	r24, 0x10	; 16
    2c08:	89 bd       	out	0x29, r24	; 41
    2c0a:	89 b5       	in	r24, 0x29	; 41
    2c0c:	82 60       	ori	r24, 0x02	; 2
    2c0e:	89 bd       	out	0x29, r24	; 41
    2c10:	09 b4       	in	r0, 0x29	; 41
    2c12:	00 fe       	sbrs	r0, 0
    2c14:	fd cf       	rjmp	.-6      	; 0x2c10 <_ZL15USB_ClockEnablev+0x1c>
    2c16:	61 e0       	ldi	r22, 0x01	; 1
    2c18:	70 e0       	ldi	r23, 0x00	; 0
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	0e 94 3e 1a 	call	0x347c	; 0x347c <delay>
    2c22:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2c26:	8f 7c       	andi	r24, 0xCF	; 207
    2c28:	80 61       	ori	r24, 0x10	; 16
    2c2a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2c2e:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2c32:	80 7f       	andi	r24, 0xF0	; 240
    2c34:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2c38:	08 95       	ret

00002c3a <_ZL14SendInterfacesv>:
    2c3a:	cf 93       	push	r28
    2c3c:	df 93       	push	r29
    2c3e:	1f 92       	push	r1
    2c40:	cd b7       	in	r28, 0x3d	; 61
    2c42:	de b7       	in	r29, 0x3e	; 62
    2c44:	19 82       	std	Y+1, r1	; 0x01
    2c46:	ce 01       	movw	r24, r28
    2c48:	01 96       	adiw	r24, 0x01	; 1
    2c4a:	0e 94 a3 1c 	call	0x3946	; 0x3946 <_Z16CDC_GetInterfacePh>
    2c4e:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <_Z12PluggableUSBv>
    2c52:	be 01       	movw	r22, r28
    2c54:	6f 5f       	subi	r22, 0xFF	; 255
    2c56:	7f 4f       	sbci	r23, 0xFF	; 255
    2c58:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <_ZN13PluggableUSB_12getInterfaceEPh>
    2c5c:	89 81       	ldd	r24, Y+1	; 0x01
    2c5e:	0f 90       	pop	r0
    2c60:	df 91       	pop	r29
    2c62:	cf 91       	pop	r28
    2c64:	08 95       	ret

00002c66 <_ZN6LockEPC1Eh>:
    2c66:	2f b7       	in	r18, 0x3f	; 63
    2c68:	fc 01       	movw	r30, r24
    2c6a:	20 83       	st	Z, r18
    2c6c:	f8 94       	cli
    2c6e:	67 70       	andi	r22, 0x07	; 7
    2c70:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2c74:	08 95       	ret

00002c76 <_Z13USB_Availableh>:
    2c76:	cf 93       	push	r28
    2c78:	df 93       	push	r29
    2c7a:	1f 92       	push	r1
    2c7c:	cd b7       	in	r28, 0x3d	; 61
    2c7e:	de b7       	in	r29, 0x3e	; 62
    2c80:	68 2f       	mov	r22, r24
    2c82:	ce 01       	movw	r24, r28
    2c84:	01 96       	adiw	r24, 0x01	; 1
    2c86:	0e 94 33 16 	call	0x2c66	; 0x2c66 <_ZN6LockEPC1Eh>
    2c8a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2c8e:	99 81       	ldd	r25, Y+1	; 0x01
    2c90:	9f bf       	out	0x3f, r25	; 63
    2c92:	0f 90       	pop	r0
    2c94:	df 91       	pop	r29
    2c96:	cf 91       	pop	r28
    2c98:	08 95       	ret

00002c9a <_Z8USB_RecvhPvi>:
    2c9a:	ef 92       	push	r14
    2c9c:	ff 92       	push	r15
    2c9e:	0f 93       	push	r16
    2ca0:	1f 93       	push	r17
    2ca2:	cf 93       	push	r28
    2ca4:	df 93       	push	r29
    2ca6:	1f 92       	push	r1
    2ca8:	cd b7       	in	r28, 0x3d	; 61
    2caa:	de b7       	in	r29, 0x3e	; 62
    2cac:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <_usbConfiguration>
    2cb0:	99 23       	and	r25, r25
    2cb2:	11 f0       	breq	.+4      	; 0x2cb8 <_Z8USB_RecvhPvi+0x1e>
    2cb4:	57 ff       	sbrs	r21, 7
    2cb6:	03 c0       	rjmp	.+6      	; 0x2cbe <_Z8USB_RecvhPvi+0x24>
    2cb8:	8f ef       	ldi	r24, 0xFF	; 255
    2cba:	9f ef       	ldi	r25, 0xFF	; 255
    2cbc:	29 c0       	rjmp	.+82     	; 0x2d10 <_Z8USB_RecvhPvi+0x76>
    2cbe:	8a 01       	movw	r16, r20
    2cc0:	7b 01       	movw	r14, r22
    2cc2:	68 2f       	mov	r22, r24
    2cc4:	ce 01       	movw	r24, r28
    2cc6:	01 96       	adiw	r24, 0x01	; 1
    2cc8:	0e 94 33 16 	call	0x2c66	; 0x2c66 <_ZN6LockEPC1Eh>
    2ccc:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	02 17       	cp	r16, r18
    2cd4:	13 07       	cpc	r17, r19
    2cd6:	0c f4       	brge	.+2      	; 0x2cda <_Z8USB_RecvhPvi+0x40>
    2cd8:	98 01       	movw	r18, r16
    2cda:	82 2f       	mov	r24, r18
    2cdc:	f7 01       	movw	r30, r14
    2cde:	94 e6       	ldi	r25, 0x64	; 100
    2ce0:	81 50       	subi	r24, 0x01	; 1
    2ce2:	38 f0       	brcs	.+14     	; 0x2cf2 <_Z8USB_RecvhPvi+0x58>
    2ce4:	28 98       	cbi	0x05, 0	; 5
    2ce6:	90 93 9b 04 	sts	0x049B, r25	; 0x80049b <RxLEDPulse>
    2cea:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2cee:	41 93       	st	Z+, r20
    2cf0:	f7 cf       	rjmp	.-18     	; 0x2ce0 <_Z8USB_RecvhPvi+0x46>
    2cf2:	21 15       	cp	r18, r1
    2cf4:	31 05       	cpc	r19, r1
    2cf6:	21 f0       	breq	.+8      	; 0x2d00 <_Z8USB_RecvhPvi+0x66>
    2cf8:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2cfc:	88 23       	and	r24, r24
    2cfe:	21 f0       	breq	.+8      	; 0x2d08 <_Z8USB_RecvhPvi+0x6e>
    2d00:	89 81       	ldd	r24, Y+1	; 0x01
    2d02:	8f bf       	out	0x3f, r24	; 63
    2d04:	c9 01       	movw	r24, r18
    2d06:	04 c0       	rjmp	.+8      	; 0x2d10 <_Z8USB_RecvhPvi+0x76>
    2d08:	8b e6       	ldi	r24, 0x6B	; 107
    2d0a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2d0e:	f8 cf       	rjmp	.-16     	; 0x2d00 <_Z8USB_RecvhPvi+0x66>
    2d10:	0f 90       	pop	r0
    2d12:	df 91       	pop	r29
    2d14:	cf 91       	pop	r28
    2d16:	1f 91       	pop	r17
    2d18:	0f 91       	pop	r16
    2d1a:	ff 90       	pop	r15
    2d1c:	ef 90       	pop	r14
    2d1e:	08 95       	ret

00002d20 <_Z8USB_Recvh>:
    2d20:	cf 93       	push	r28
    2d22:	df 93       	push	r29
    2d24:	1f 92       	push	r1
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
    2d2a:	41 e0       	ldi	r20, 0x01	; 1
    2d2c:	50 e0       	ldi	r21, 0x00	; 0
    2d2e:	be 01       	movw	r22, r28
    2d30:	6f 5f       	subi	r22, 0xFF	; 255
    2d32:	7f 4f       	sbci	r23, 0xFF	; 255
    2d34:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <_Z8USB_RecvhPvi>
    2d38:	01 97       	sbiw	r24, 0x01	; 1
    2d3a:	19 f4       	brne	.+6      	; 0x2d42 <_Z8USB_Recvh+0x22>
    2d3c:	89 81       	ldd	r24, Y+1	; 0x01
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	02 c0       	rjmp	.+4      	; 0x2d46 <_Z8USB_Recvh+0x26>
    2d42:	8f ef       	ldi	r24, 0xFF	; 255
    2d44:	9f ef       	ldi	r25, 0xFF	; 255
    2d46:	0f 90       	pop	r0
    2d48:	df 91       	pop	r29
    2d4a:	cf 91       	pop	r28
    2d4c:	08 95       	ret

00002d4e <_Z13USB_SendSpaceh>:
    2d4e:	cf 93       	push	r28
    2d50:	df 93       	push	r29
    2d52:	1f 92       	push	r1
    2d54:	cd b7       	in	r28, 0x3d	; 61
    2d56:	de b7       	in	r29, 0x3e	; 62
    2d58:	68 2f       	mov	r22, r24
    2d5a:	ce 01       	movw	r24, r28
    2d5c:	01 96       	adiw	r24, 0x01	; 1
    2d5e:	0e 94 33 16 	call	0x2c66	; 0x2c66 <_ZN6LockEPC1Eh>
    2d62:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2d66:	89 2f       	mov	r24, r25
    2d68:	80 72       	andi	r24, 0x20	; 32
    2d6a:	95 ff       	sbrs	r25, 5
    2d6c:	04 c0       	rjmp	.+8      	; 0x2d76 <_Z13USB_SendSpaceh+0x28>
    2d6e:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2d72:	80 e4       	ldi	r24, 0x40	; 64
    2d74:	89 1b       	sub	r24, r25
    2d76:	99 81       	ldd	r25, Y+1	; 0x01
    2d78:	9f bf       	out	0x3f, r25	; 63
    2d7a:	0f 90       	pop	r0
    2d7c:	df 91       	pop	r29
    2d7e:	cf 91       	pop	r28
    2d80:	08 95       	ret

00002d82 <_Z8USB_SendhPKvi>:
    2d82:	5f 92       	push	r5
    2d84:	6f 92       	push	r6
    2d86:	7f 92       	push	r7
    2d88:	8f 92       	push	r8
    2d8a:	9f 92       	push	r9
    2d8c:	af 92       	push	r10
    2d8e:	bf 92       	push	r11
    2d90:	cf 92       	push	r12
    2d92:	df 92       	push	r13
    2d94:	ef 92       	push	r14
    2d96:	ff 92       	push	r15
    2d98:	0f 93       	push	r16
    2d9a:	1f 93       	push	r17
    2d9c:	cf 93       	push	r28
    2d9e:	df 93       	push	r29
    2da0:	1f 92       	push	r1
    2da2:	cd b7       	in	r28, 0x3d	; 61
    2da4:	de b7       	in	r29, 0x3e	; 62
    2da6:	98 2e       	mov	r9, r24
    2da8:	6b 01       	movw	r12, r22
    2daa:	b4 2e       	mov	r11, r20
    2dac:	05 2f       	mov	r16, r21
    2dae:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <_usbConfiguration>
    2db2:	81 11       	cpse	r24, r1
    2db4:	03 c0       	rjmp	.+6      	; 0x2dbc <_Z8USB_SendhPKvi+0x3a>
    2db6:	8f ef       	ldi	r24, 0xFF	; 255
    2db8:	9f ef       	ldi	r25, 0xFF	; 255
    2dba:	77 c0       	rjmp	.+238    	; 0x2eaa <_Z8USB_SendhPKvi+0x128>
    2dbc:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <_usbSuspendState>
    2dc0:	80 ff       	sbrs	r24, 0
    2dc2:	05 c0       	rjmp	.+10     	; 0x2dce <_Z8USB_SendhPKvi+0x4c>
    2dc4:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2dc8:	82 60       	ori	r24, 0x02	; 2
    2dca:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2dce:	eb 2c       	mov	r14, r11
    2dd0:	f0 2e       	mov	r15, r16
    2dd2:	a1 2c       	mov	r10, r1
    2dd4:	8a ef       	ldi	r24, 0xFA	; 250
    2dd6:	88 2e       	mov	r8, r24
    2dd8:	89 2d       	mov	r24, r9
    2dda:	80 72       	andi	r24, 0x20	; 32
    2ddc:	68 2e       	mov	r6, r24
    2dde:	89 2d       	mov	r24, r9
    2de0:	80 74       	andi	r24, 0x40	; 64
    2de2:	58 2e       	mov	r5, r24
    2de4:	9a e3       	ldi	r25, 0x3A	; 58
    2de6:	79 2e       	mov	r7, r25
    2de8:	e1 14       	cp	r14, r1
    2dea:	f1 04       	cpc	r15, r1
    2dec:	19 f4       	brne	.+6      	; 0x2df4 <_Z8USB_SendhPKvi+0x72>
    2dee:	aa 20       	and	r10, r10
    2df0:	09 f4       	brne	.+2      	; 0x2df4 <_Z8USB_SendhPKvi+0x72>
    2df2:	55 c0       	rjmp	.+170    	; 0x2e9e <_Z8USB_SendhPKvi+0x11c>
    2df4:	89 2d       	mov	r24, r9
    2df6:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <_Z13USB_SendSpaceh>
    2dfa:	18 2f       	mov	r17, r24
    2dfc:	81 11       	cpse	r24, r1
    2dfe:	0a c0       	rjmp	.+20     	; 0x2e14 <_Z8USB_SendhPKvi+0x92>
    2e00:	8a 94       	dec	r8
    2e02:	88 20       	and	r8, r8
    2e04:	c1 f2       	breq	.-80     	; 0x2db6 <_Z8USB_SendhPKvi+0x34>
    2e06:	61 e0       	ldi	r22, 0x01	; 1
    2e08:	70 e0       	ldi	r23, 0x00	; 0
    2e0a:	80 e0       	ldi	r24, 0x00	; 0
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	0e 94 3e 1a 	call	0x347c	; 0x347c <delay>
    2e12:	ea cf       	rjmp	.-44     	; 0x2de8 <_Z8USB_SendhPKvi+0x66>
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	e8 16       	cp	r14, r24
    2e18:	f9 06       	cpc	r15, r25
    2e1a:	0c f4       	brge	.+2      	; 0x2e1e <_Z8USB_SendhPKvi+0x9c>
    2e1c:	1e 2d       	mov	r17, r14
    2e1e:	69 2d       	mov	r22, r9
    2e20:	ce 01       	movw	r24, r28
    2e22:	01 96       	adiw	r24, 0x01	; 1
    2e24:	0e 94 33 16 	call	0x2c66	; 0x2c66 <_ZN6LockEPC1Eh>
    2e28:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2e2c:	85 ff       	sbrs	r24, 5
    2e2e:	34 c0       	rjmp	.+104    	; 0x2e98 <_Z8USB_SendhPKvi+0x116>
    2e30:	81 2f       	mov	r24, r17
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	e8 1a       	sub	r14, r24
    2e36:	f9 0a       	sbc	r15, r25
    2e38:	66 20       	and	r6, r6
    2e3a:	29 f0       	breq	.+10     	; 0x2e46 <_Z8USB_SendhPKvi+0xc4>
    2e3c:	11 50       	subi	r17, 0x01	; 1
    2e3e:	a0 f0       	brcs	.+40     	; 0x2e68 <_Z8USB_SendhPKvi+0xe6>
    2e40:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2e44:	fb cf       	rjmp	.-10     	; 0x2e3c <_Z8USB_SendhPKvi+0xba>
    2e46:	f6 01       	movw	r30, r12
    2e48:	97 fe       	sbrs	r9, 7
    2e4a:	0a c0       	rjmp	.+20     	; 0x2e60 <_Z8USB_SendhPKvi+0xde>
    2e4c:	11 50       	subi	r17, 0x01	; 1
    2e4e:	50 f0       	brcs	.+20     	; 0x2e64 <_Z8USB_SendhPKvi+0xe2>
    2e50:	24 91       	lpm	r18, Z
    2e52:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2e56:	31 96       	adiw	r30, 0x01	; 1
    2e58:	f9 cf       	rjmp	.-14     	; 0x2e4c <_Z8USB_SendhPKvi+0xca>
    2e5a:	21 91       	ld	r18, Z+
    2e5c:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2e60:	11 50       	subi	r17, 0x01	; 1
    2e62:	d8 f7       	brcc	.-10     	; 0x2e5a <_Z8USB_SendhPKvi+0xd8>
    2e64:	c8 0e       	add	r12, r24
    2e66:	d9 1e       	adc	r13, r25
    2e68:	aa 20       	and	r10, r10
    2e6a:	19 f0       	breq	.+6      	; 0x2e72 <_Z8USB_SendhPKvi+0xf0>
    2e6c:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2e70:	0b c0       	rjmp	.+22     	; 0x2e88 <_Z8USB_SendhPKvi+0x106>
    2e72:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2e76:	85 fd       	sbrc	r24, 5
    2e78:	09 c0       	rjmp	.+18     	; 0x2e8c <_Z8USB_SendhPKvi+0x10a>
    2e7a:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2e7e:	aa 24       	eor	r10, r10
    2e80:	a3 94       	inc	r10
    2e82:	e1 14       	cp	r14, r1
    2e84:	f1 04       	cpc	r15, r1
    2e86:	41 f0       	breq	.+16     	; 0x2e98 <_Z8USB_SendhPKvi+0x116>
    2e88:	a1 2c       	mov	r10, r1
    2e8a:	06 c0       	rjmp	.+12     	; 0x2e98 <_Z8USB_SendhPKvi+0x116>
    2e8c:	e1 14       	cp	r14, r1
    2e8e:	f1 04       	cpc	r15, r1
    2e90:	19 f4       	brne	.+6      	; 0x2e98 <_Z8USB_SendhPKvi+0x116>
    2e92:	51 10       	cpse	r5, r1
    2e94:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	8f bf       	out	0x3f, r24	; 63
    2e9c:	a5 cf       	rjmp	.-182    	; 0x2de8 <_Z8USB_SendhPKvi+0x66>
    2e9e:	5d 98       	cbi	0x0b, 5	; 11
    2ea0:	84 e6       	ldi	r24, 0x64	; 100
    2ea2:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <TxLEDPulse>
    2ea6:	8b 2d       	mov	r24, r11
    2ea8:	90 2f       	mov	r25, r16
    2eaa:	0f 90       	pop	r0
    2eac:	df 91       	pop	r29
    2eae:	cf 91       	pop	r28
    2eb0:	1f 91       	pop	r17
    2eb2:	0f 91       	pop	r16
    2eb4:	ff 90       	pop	r15
    2eb6:	ef 90       	pop	r14
    2eb8:	df 90       	pop	r13
    2eba:	cf 90       	pop	r12
    2ebc:	bf 90       	pop	r11
    2ebe:	af 90       	pop	r10
    2ec0:	9f 90       	pop	r9
    2ec2:	8f 90       	pop	r8
    2ec4:	7f 90       	pop	r7
    2ec6:	6f 90       	pop	r6
    2ec8:	5f 90       	pop	r5
    2eca:	08 95       	ret

00002ecc <_Z11InitControli>:
    2ecc:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2ed0:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <_ZL6_cmark+0x1>
    2ed4:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <_ZL6_cmark>
    2ed8:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <_ZL5_cend+0x1>
    2edc:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <_ZL5_cend>
    2ee0:	08 95       	ret

00002ee2 <_Z15USB_SendControlhPKvi>:
    2ee2:	df 92       	push	r13
    2ee4:	ef 92       	push	r14
    2ee6:	ff 92       	push	r15
    2ee8:	0f 93       	push	r16
    2eea:	1f 93       	push	r17
    2eec:	cf 93       	push	r28
    2eee:	df 93       	push	r29
    2ef0:	d8 2e       	mov	r13, r24
    2ef2:	8a 01       	movw	r16, r20
    2ef4:	7b 01       	movw	r14, r22
    2ef6:	e4 0e       	add	r14, r20
    2ef8:	f5 1e       	adc	r15, r21
    2efa:	eb 01       	movw	r28, r22
    2efc:	ce 15       	cp	r28, r14
    2efe:	df 05       	cpc	r29, r15
    2f00:	71 f0       	breq	.+28     	; 0x2f1e <_Z15USB_SendControlhPKvi+0x3c>
    2f02:	d7 fe       	sbrs	r13, 7
    2f04:	03 c0       	rjmp	.+6      	; 0x2f0c <_Z15USB_SendControlhPKvi+0x2a>
    2f06:	fe 01       	movw	r30, r28
    2f08:	84 91       	lpm	r24, Z
    2f0a:	01 c0       	rjmp	.+2      	; 0x2f0e <_Z15USB_SendControlhPKvi+0x2c>
    2f0c:	88 81       	ld	r24, Y
    2f0e:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <_ZL11SendControlh>
    2f12:	21 96       	adiw	r28, 0x01	; 1
    2f14:	81 11       	cpse	r24, r1
    2f16:	f2 cf       	rjmp	.-28     	; 0x2efc <_Z15USB_SendControlhPKvi+0x1a>
    2f18:	8f ef       	ldi	r24, 0xFF	; 255
    2f1a:	9f ef       	ldi	r25, 0xFF	; 255
    2f1c:	01 c0       	rjmp	.+2      	; 0x2f20 <_Z15USB_SendControlhPKvi+0x3e>
    2f1e:	c8 01       	movw	r24, r16
    2f20:	df 91       	pop	r29
    2f22:	cf 91       	pop	r28
    2f24:	1f 91       	pop	r17
    2f26:	0f 91       	pop	r16
    2f28:	ff 90       	pop	r15
    2f2a:	ef 90       	pop	r14
    2f2c:	df 90       	pop	r13
    2f2e:	08 95       	ret

00002f30 <_Z15USB_RecvControlPvi>:
    2f30:	af 92       	push	r10
    2f32:	bf 92       	push	r11
    2f34:	df 92       	push	r13
    2f36:	ef 92       	push	r14
    2f38:	ff 92       	push	r15
    2f3a:	0f 93       	push	r16
    2f3c:	1f 93       	push	r17
    2f3e:	cf 93       	push	r28
    2f40:	df 93       	push	r29
    2f42:	5c 01       	movw	r10, r24
    2f44:	8b 01       	movw	r16, r22
    2f46:	eb 01       	movw	r28, r22
    2f48:	9b ef       	ldi	r25, 0xFB	; 251
    2f4a:	d9 2e       	mov	r13, r25
    2f4c:	20 97       	sbiw	r28, 0x00	; 0
    2f4e:	c1 f0       	breq	.+48     	; 0x2f80 <_Z15USB_RecvControlPvi+0x50>
    2f50:	7e 01       	movw	r14, r28
    2f52:	c1 34       	cpi	r28, 0x41	; 65
    2f54:	d1 05       	cpc	r29, r1
    2f56:	1c f0       	brlt	.+6      	; 0x2f5e <_Z15USB_RecvControlPvi+0x2e>
    2f58:	80 e4       	ldi	r24, 0x40	; 64
    2f5a:	e8 2e       	mov	r14, r24
    2f5c:	f1 2c       	mov	r15, r1
    2f5e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2f62:	82 ff       	sbrs	r24, 2
    2f64:	fc cf       	rjmp	.-8      	; 0x2f5e <_Z15USB_RecvControlPvi+0x2e>
    2f66:	c8 01       	movw	r24, r16
    2f68:	8c 1b       	sub	r24, r28
    2f6a:	9d 0b       	sbc	r25, r29
    2f6c:	6e 2d       	mov	r22, r14
    2f6e:	8a 0d       	add	r24, r10
    2f70:	9b 1d       	adc	r25, r11
    2f72:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <_ZL4RecvPVhh>
    2f76:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2f7a:	ce 19       	sub	r28, r14
    2f7c:	df 09       	sbc	r29, r15
    2f7e:	e6 cf       	rjmp	.-52     	; 0x2f4c <_Z15USB_RecvControlPvi+0x1c>
    2f80:	c8 01       	movw	r24, r16
    2f82:	df 91       	pop	r29
    2f84:	cf 91       	pop	r28
    2f86:	1f 91       	pop	r17
    2f88:	0f 91       	pop	r16
    2f8a:	ff 90       	pop	r15
    2f8c:	ef 90       	pop	r14
    2f8e:	df 90       	pop	r13
    2f90:	bf 90       	pop	r11
    2f92:	af 90       	pop	r10
    2f94:	08 95       	ret

00002f96 <__vector_11>:
    2f96:	1f 92       	push	r1
    2f98:	0f 92       	push	r0
    2f9a:	0f b6       	in	r0, 0x3f	; 63
    2f9c:	0f 92       	push	r0
    2f9e:	11 24       	eor	r1, r1
    2fa0:	cf 92       	push	r12
    2fa2:	df 92       	push	r13
    2fa4:	ef 92       	push	r14
    2fa6:	ff 92       	push	r15
    2fa8:	0f 93       	push	r16
    2faa:	1f 93       	push	r17
    2fac:	2f 93       	push	r18
    2fae:	3f 93       	push	r19
    2fb0:	4f 93       	push	r20
    2fb2:	5f 93       	push	r21
    2fb4:	6f 93       	push	r22
    2fb6:	7f 93       	push	r23
    2fb8:	8f 93       	push	r24
    2fba:	9f 93       	push	r25
    2fbc:	af 93       	push	r26
    2fbe:	bf 93       	push	r27
    2fc0:	ef 93       	push	r30
    2fc2:	ff 93       	push	r31
    2fc4:	cf 93       	push	r28
    2fc6:	df 93       	push	r29
    2fc8:	cd b7       	in	r28, 0x3d	; 61
    2fca:	de b7       	in	r29, 0x3e	; 62
    2fcc:	6c 97       	sbiw	r28, 0x1c	; 28
    2fce:	de bf       	out	0x3e, r29	; 62
    2fd0:	cd bf       	out	0x3d, r28	; 61
    2fd2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2fd6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2fda:	83 ff       	sbrs	r24, 3
    2fdc:	17 c1       	rjmp	.+558    	; 0x320c <__vector_11+0x276>
    2fde:	68 e0       	ldi	r22, 0x08	; 8
    2fe0:	ce 01       	movw	r24, r28
    2fe2:	45 96       	adiw	r24, 0x15	; 21
    2fe4:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <_ZL4RecvPVhh>
    2fe8:	82 ef       	ldi	r24, 0xF2	; 242
    2fea:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2fee:	8d 89       	ldd	r24, Y+21	; 0x15
    2ff0:	87 ff       	sbrs	r24, 7
    2ff2:	05 c0       	rjmp	.+10     	; 0x2ffe <__vector_11+0x68>
    2ff4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2ff8:	90 ff       	sbrs	r25, 0
    2ffa:	fc cf       	rjmp	.-8      	; 0x2ff4 <__vector_11+0x5e>
    2ffc:	03 c0       	rjmp	.+6      	; 0x3004 <__vector_11+0x6e>
    2ffe:	9e ef       	ldi	r25, 0xFE	; 254
    3000:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3004:	98 2f       	mov	r25, r24
    3006:	90 76       	andi	r25, 0x60	; 96
    3008:	09 f0       	breq	.+2      	; 0x300c <__vector_11+0x76>
    300a:	d8 c0       	rjmp	.+432    	; 0x31bc <__vector_11+0x226>
    300c:	9e 89       	ldd	r25, Y+22	; 0x16
    300e:	4f 89       	ldd	r20, Y+23	; 0x17
    3010:	58 8d       	ldd	r21, Y+24	; 0x18
    3012:	2f 89       	ldd	r18, Y+23	; 0x17
    3014:	18 8d       	ldd	r17, Y+24	; 0x18
    3016:	91 11       	cpse	r25, r1
    3018:	0c c0       	rjmp	.+24     	; 0x3032 <__vector_11+0x9c>
    301a:	80 38       	cpi	r24, 0x80	; 128
    301c:	29 f4       	brne	.+10     	; 0x3028 <__vector_11+0x92>
    301e:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <_usbCurrentStatus>
    3022:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    3026:	02 c0       	rjmp	.+4      	; 0x302c <__vector_11+0x96>
    3028:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    302c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    3030:	e6 c0       	rjmp	.+460    	; 0x31fe <__vector_11+0x268>
    3032:	91 30       	cpi	r25, 0x01	; 1
    3034:	51 f4       	brne	.+20     	; 0x304a <__vector_11+0xb4>
    3036:	81 11       	cpse	r24, r1
    3038:	e2 c0       	rjmp	.+452    	; 0x31fe <__vector_11+0x268>
    303a:	41 30       	cpi	r20, 0x01	; 1
    303c:	51 05       	cpc	r21, r1
    303e:	09 f0       	breq	.+2      	; 0x3042 <__vector_11+0xac>
    3040:	de c0       	rjmp	.+444    	; 0x31fe <__vector_11+0x268>
    3042:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <_usbCurrentStatus>
    3046:	8d 7f       	andi	r24, 0xFD	; 253
    3048:	0b c0       	rjmp	.+22     	; 0x3060 <__vector_11+0xca>
    304a:	93 30       	cpi	r25, 0x03	; 3
    304c:	61 f4       	brne	.+24     	; 0x3066 <__vector_11+0xd0>
    304e:	81 11       	cpse	r24, r1
    3050:	d6 c0       	rjmp	.+428    	; 0x31fe <__vector_11+0x268>
    3052:	41 30       	cpi	r20, 0x01	; 1
    3054:	51 05       	cpc	r21, r1
    3056:	09 f0       	breq	.+2      	; 0x305a <__vector_11+0xc4>
    3058:	d2 c0       	rjmp	.+420    	; 0x31fe <__vector_11+0x268>
    305a:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <_usbCurrentStatus>
    305e:	82 60       	ori	r24, 0x02	; 2
    3060:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <_usbCurrentStatus>
    3064:	cc c0       	rjmp	.+408    	; 0x31fe <__vector_11+0x268>
    3066:	95 30       	cpi	r25, 0x05	; 5
    3068:	49 f4       	brne	.+18     	; 0x307c <__vector_11+0xe6>
    306a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    306e:	80 ff       	sbrs	r24, 0
    3070:	fc cf       	rjmp	.-8      	; 0x306a <__vector_11+0xd4>
    3072:	82 2f       	mov	r24, r18
    3074:	80 68       	ori	r24, 0x80	; 128
    3076:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    307a:	c1 c0       	rjmp	.+386    	; 0x31fe <__vector_11+0x268>
    307c:	96 30       	cpi	r25, 0x06	; 6
    307e:	09 f0       	breq	.+2      	; 0x3082 <__vector_11+0xec>
    3080:	70 c0       	rjmp	.+224    	; 0x3162 <__vector_11+0x1cc>
    3082:	eb 8c       	ldd	r14, Y+27	; 0x1b
    3084:	fc 8c       	ldd	r15, Y+28	; 0x1c
    3086:	12 30       	cpi	r17, 0x02	; 2
    3088:	69 f5       	brne	.+90     	; 0x30e4 <__vector_11+0x14e>
    308a:	80 e0       	ldi	r24, 0x00	; 0
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <_Z11InitControli>
    3092:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <_ZL14SendInterfacesv>
    3096:	99 e0       	ldi	r25, 0x09	; 9
    3098:	9e 01       	movw	r18, r28
    309a:	2f 5f       	subi	r18, 0xFF	; 255
    309c:	3f 4f       	sbci	r19, 0xFF	; 255
    309e:	69 01       	movw	r12, r18
    30a0:	f9 01       	movw	r30, r18
    30a2:	29 2f       	mov	r18, r25
    30a4:	11 92       	st	Z+, r1
    30a6:	2a 95       	dec	r18
    30a8:	e9 f7       	brne	.-6      	; 0x30a4 <__vector_11+0x10e>
    30aa:	99 83       	std	Y+1, r25	; 0x01
    30ac:	1a 83       	std	Y+2, r17	; 0x02
    30ae:	91 e0       	ldi	r25, 0x01	; 1
    30b0:	9e 83       	std	Y+6, r25	; 0x06
    30b2:	90 ea       	ldi	r25, 0xA0	; 160
    30b4:	98 87       	std	Y+8, r25	; 0x08
    30b6:	9a ef       	ldi	r25, 0xFA	; 250
    30b8:	99 87       	std	Y+9, r25	; 0x09
    30ba:	20 91 96 04 	lds	r18, 0x0496	; 0x800496 <_ZL6_cmark>
    30be:	30 91 97 04 	lds	r19, 0x0497	; 0x800497 <_ZL6_cmark+0x1>
    30c2:	27 5f       	subi	r18, 0xF7	; 247
    30c4:	3f 4f       	sbci	r19, 0xFF	; 255
    30c6:	3c 83       	std	Y+4, r19	; 0x04
    30c8:	2b 83       	std	Y+3, r18	; 0x03
    30ca:	8d 83       	std	Y+5, r24	; 0x05
    30cc:	c7 01       	movw	r24, r14
    30ce:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <_Z11InitControli>
    30d2:	49 e0       	ldi	r20, 0x09	; 9
    30d4:	50 e0       	ldi	r21, 0x00	; 0
    30d6:	b6 01       	movw	r22, r12
    30d8:	80 e0       	ldi	r24, 0x00	; 0
    30da:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <_Z15USB_SendControlhPKvi>
    30de:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <_ZL14SendInterfacesv>
    30e2:	8d c0       	rjmp	.+282    	; 0x31fe <__vector_11+0x268>
    30e4:	c7 01       	movw	r24, r14
    30e6:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <_Z11InitControli>
    30ea:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <_Z12PluggableUSBv>
    30ee:	be 01       	movw	r22, r28
    30f0:	6b 5e       	subi	r22, 0xEB	; 235
    30f2:	7f 4f       	sbci	r23, 0xFF	; 255
    30f4:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    30f8:	00 97       	sbiw	r24, 0x00	; 0
    30fa:	19 f0       	breq	.+6      	; 0x3102 <__vector_11+0x16c>
    30fc:	0c f0       	brlt	.+2      	; 0x3100 <__vector_11+0x16a>
    30fe:	7f c0       	rjmp	.+254    	; 0x31fe <__vector_11+0x268>
    3100:	82 c0       	rjmp	.+260    	; 0x3206 <__vector_11+0x270>
    3102:	11 30       	cpi	r17, 0x01	; 1
    3104:	09 f4       	brne	.+2      	; 0x3108 <__vector_11+0x172>
    3106:	70 c0       	rjmp	.+224    	; 0x31e8 <__vector_11+0x252>
    3108:	13 30       	cpi	r17, 0x03	; 3
    310a:	09 f0       	breq	.+2      	; 0x310e <__vector_11+0x178>
    310c:	7c c0       	rjmp	.+248    	; 0x3206 <__vector_11+0x270>
    310e:	8f 89       	ldd	r24, Y+23	; 0x17
    3110:	88 23       	and	r24, r24
    3112:	09 f4       	brne	.+2      	; 0x3116 <__vector_11+0x180>
    3114:	6c c0       	rjmp	.+216    	; 0x31ee <__vector_11+0x258>
    3116:	82 30       	cpi	r24, 0x02	; 2
    3118:	29 f4       	brne	.+10     	; 0x3124 <__vector_11+0x18e>
    311a:	40 e8       	ldi	r20, 0x80	; 128
    311c:	60 e1       	ldi	r22, 0x10	; 16
    311e:	88 ee       	ldi	r24, 0xE8	; 232
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	06 c0       	rjmp	.+12     	; 0x3130 <__vector_11+0x19a>
    3124:	81 30       	cpi	r24, 0x01	; 1
    3126:	39 f4       	brne	.+14     	; 0x3136 <__vector_11+0x1a0>
    3128:	40 e8       	ldi	r20, 0x80	; 128
    312a:	6b e0       	ldi	r22, 0x0B	; 11
    312c:	8c ed       	ldi	r24, 0xDC	; 220
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZL24USB_SendStringDescriptorPKhhh>
    3134:	56 c0       	rjmp	.+172    	; 0x31e2 <__vector_11+0x24c>
    3136:	83 30       	cpi	r24, 0x03	; 3
    3138:	09 f0       	breq	.+2      	; 0x313c <__vector_11+0x1a6>
    313a:	65 c0       	rjmp	.+202    	; 0x3206 <__vector_11+0x270>
    313c:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <_Z12PluggableUSBv>
    3140:	8e 01       	movw	r16, r28
    3142:	0f 5f       	subi	r16, 0xFF	; 255
    3144:	1f 4f       	sbci	r17, 0xFF	; 255
    3146:	b8 01       	movw	r22, r16
    3148:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <_ZN13PluggableUSB_12getShortNameEPc>
    314c:	f8 01       	movw	r30, r16
    314e:	01 90       	ld	r0, Z+
    3150:	00 20       	and	r0, r0
    3152:	e9 f7       	brne	.-6      	; 0x314e <__vector_11+0x1b8>
    3154:	31 97       	sbiw	r30, 0x01	; 1
    3156:	bf 01       	movw	r22, r30
    3158:	60 1b       	sub	r22, r16
    315a:	71 0b       	sbc	r23, r17
    315c:	40 e0       	ldi	r20, 0x00	; 0
    315e:	c8 01       	movw	r24, r16
    3160:	e7 cf       	rjmp	.-50     	; 0x3130 <__vector_11+0x19a>
    3162:	97 30       	cpi	r25, 0x07	; 7
    3164:	09 f4       	brne	.+2      	; 0x3168 <__vector_11+0x1d2>
    3166:	4f c0       	rjmp	.+158    	; 0x3206 <__vector_11+0x270>
    3168:	98 30       	cpi	r25, 0x08	; 8
    316a:	21 f4       	brne	.+8      	; 0x3174 <__vector_11+0x1de>
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    3172:	45 c0       	rjmp	.+138    	; 0x31fe <__vector_11+0x268>
    3174:	99 30       	cpi	r25, 0x09	; 9
    3176:	09 f0       	breq	.+2      	; 0x317a <__vector_11+0x1e4>
    3178:	42 c0       	rjmp	.+132    	; 0x31fe <__vector_11+0x268>
    317a:	83 70       	andi	r24, 0x03	; 3
    317c:	09 f0       	breq	.+2      	; 0x3180 <__vector_11+0x1ea>
    317e:	43 c0       	rjmp	.+134    	; 0x3206 <__vector_11+0x270>
    3180:	eb e0       	ldi	r30, 0x0B	; 11
    3182:	f1 e0       	ldi	r31, 0x01	; 1
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	31 e0       	ldi	r19, 0x01	; 1
    3188:	96 e3       	ldi	r25, 0x36	; 54
    318a:	20 81       	ld	r18, Z
    318c:	21 11       	cpse	r18, r1
    318e:	09 c0       	rjmp	.+18     	; 0x31a2 <__vector_11+0x20c>
    3190:	8e e7       	ldi	r24, 0x7E	; 126
    3192:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    3196:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    319a:	8f 89       	ldd	r24, Y+23	; 0x17
    319c:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <_usbConfiguration>
    31a0:	2e c0       	rjmp	.+92     	; 0x31fe <__vector_11+0x268>
    31a2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    31a6:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    31aa:	21 91       	ld	r18, Z+
    31ac:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    31b0:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    31b4:	8f 5f       	subi	r24, 0xFF	; 255
    31b6:	87 30       	cpi	r24, 0x07	; 7
    31b8:	41 f7       	brne	.-48     	; 0x318a <__vector_11+0x1f4>
    31ba:	ea cf       	rjmp	.-44     	; 0x3190 <__vector_11+0x1fa>
    31bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31c0:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <_Z11InitControli>
    31c4:	89 8d       	ldd	r24, Y+25	; 0x19
    31c6:	81 11       	cpse	r24, r1
    31c8:	05 c0       	rjmp	.+10     	; 0x31d4 <__vector_11+0x23e>
    31ca:	ce 01       	movw	r24, r28
    31cc:	45 96       	adiw	r24, 0x15	; 21
    31ce:	0e 94 ae 1c 	call	0x395c	; 0x395c <_Z9CDC_SetupR8USBSetup>
    31d2:	07 c0       	rjmp	.+14     	; 0x31e2 <__vector_11+0x24c>
    31d4:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <_Z12PluggableUSBv>
    31d8:	be 01       	movw	r22, r28
    31da:	6b 5e       	subi	r22, 0xEB	; 235
    31dc:	7f 4f       	sbci	r23, 0xFF	; 255
    31de:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <_ZN13PluggableUSB_5setupER8USBSetup>
    31e2:	88 23       	and	r24, r24
    31e4:	81 f0       	breq	.+32     	; 0x3206 <__vector_11+0x270>
    31e6:	0b c0       	rjmp	.+22     	; 0x31fe <__vector_11+0x268>
    31e8:	6a ec       	ldi	r22, 0xCA	; 202
    31ea:	70 e0       	ldi	r23, 0x00	; 0
    31ec:	02 c0       	rjmp	.+4      	; 0x31f2 <__vector_11+0x25c>
    31ee:	69 ef       	ldi	r22, 0xF9	; 249
    31f0:	70 e0       	ldi	r23, 0x00	; 0
    31f2:	fb 01       	movw	r30, r22
    31f4:	44 91       	lpm	r20, Z
    31f6:	50 e0       	ldi	r21, 0x00	; 0
    31f8:	80 e8       	ldi	r24, 0x80	; 128
    31fa:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <_Z15USB_SendControlhPKvi>
    31fe:	8e ef       	ldi	r24, 0xFE	; 254
    3200:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3204:	03 c0       	rjmp	.+6      	; 0x320c <__vector_11+0x276>
    3206:	81 e2       	ldi	r24, 0x21	; 33
    3208:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    320c:	6c 96       	adiw	r28, 0x1c	; 28
    320e:	0f b6       	in	r0, 0x3f	; 63
    3210:	f8 94       	cli
    3212:	de bf       	out	0x3e, r29	; 62
    3214:	0f be       	out	0x3f, r0	; 63
    3216:	cd bf       	out	0x3d, r28	; 61
    3218:	df 91       	pop	r29
    321a:	cf 91       	pop	r28
    321c:	ff 91       	pop	r31
    321e:	ef 91       	pop	r30
    3220:	bf 91       	pop	r27
    3222:	af 91       	pop	r26
    3224:	9f 91       	pop	r25
    3226:	8f 91       	pop	r24
    3228:	7f 91       	pop	r23
    322a:	6f 91       	pop	r22
    322c:	5f 91       	pop	r21
    322e:	4f 91       	pop	r20
    3230:	3f 91       	pop	r19
    3232:	2f 91       	pop	r18
    3234:	1f 91       	pop	r17
    3236:	0f 91       	pop	r16
    3238:	ff 90       	pop	r15
    323a:	ef 90       	pop	r14
    323c:	df 90       	pop	r13
    323e:	cf 90       	pop	r12
    3240:	0f 90       	pop	r0
    3242:	0f be       	out	0x3f, r0	; 63
    3244:	0f 90       	pop	r0
    3246:	1f 90       	pop	r1
    3248:	18 95       	reti

0000324a <_Z9USB_Flushh>:
    324a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    324e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    3252:	88 23       	and	r24, r24
    3254:	19 f0       	breq	.+6      	; 0x325c <_Z9USB_Flushh+0x12>
    3256:	8a e3       	ldi	r24, 0x3A	; 58
    3258:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    325c:	08 95       	ret

0000325e <__vector_10>:
    325e:	1f 92       	push	r1
    3260:	0f 92       	push	r0
    3262:	0f b6       	in	r0, 0x3f	; 63
    3264:	0f 92       	push	r0
    3266:	11 24       	eor	r1, r1
    3268:	2f 93       	push	r18
    326a:	3f 93       	push	r19
    326c:	4f 93       	push	r20
    326e:	5f 93       	push	r21
    3270:	6f 93       	push	r22
    3272:	7f 93       	push	r23
    3274:	8f 93       	push	r24
    3276:	9f 93       	push	r25
    3278:	af 93       	push	r26
    327a:	bf 93       	push	r27
    327c:	cf 93       	push	r28
    327e:	ef 93       	push	r30
    3280:	ff 93       	push	r31
    3282:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    3286:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    328a:	83 7f       	andi	r24, 0xF3	; 243
    328c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    3290:	c3 ff       	sbrs	r28, 3
    3292:	0f c0       	rjmp	.+30     	; 0x32b2 <__vector_10+0x54>
    3294:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    329e:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    32a2:	82 e3       	ldi	r24, 0x32	; 50
    32a4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    32a8:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <_usbConfiguration>
    32ac:	88 e0       	ldi	r24, 0x08	; 8
    32ae:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    32b2:	c2 ff       	sbrs	r28, 2
    32b4:	19 c0       	rjmp	.+50     	; 0x32e8 <__vector_10+0x8a>
    32b6:	83 e0       	ldi	r24, 0x03	; 3
    32b8:	0e 94 25 19 	call	0x324a	; 0x324a <_Z9USB_Flushh>
    32bc:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <TxLEDPulse>
    32c0:	88 23       	and	r24, r24
    32c2:	39 f0       	breq	.+14     	; 0x32d2 <__vector_10+0x74>
    32c4:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <TxLEDPulse>
    32c8:	81 50       	subi	r24, 0x01	; 1
    32ca:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <TxLEDPulse>
    32ce:	88 23       	and	r24, r24
    32d0:	89 f1       	breq	.+98     	; 0x3334 <__vector_10+0xd6>
    32d2:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <RxLEDPulse>
    32d6:	88 23       	and	r24, r24
    32d8:	39 f0       	breq	.+14     	; 0x32e8 <__vector_10+0x8a>
    32da:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <RxLEDPulse>
    32de:	81 50       	subi	r24, 0x01	; 1
    32e0:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <RxLEDPulse>
    32e4:	88 23       	and	r24, r24
    32e6:	41 f1       	breq	.+80     	; 0x3338 <__vector_10+0xda>
    32e8:	c4 ff       	sbrs	r28, 4
    32ea:	10 c0       	rjmp	.+32     	; 0x330c <__vector_10+0xae>
    32ec:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    32f0:	8e 7e       	andi	r24, 0xEE	; 238
    32f2:	81 60       	ori	r24, 0x01	; 1
    32f4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    32f8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    32fc:	8f 7e       	andi	r24, 0xEF	; 239
    32fe:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    3302:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <_usbSuspendState>
    3306:	8e 7e       	andi	r24, 0xEE	; 238
    3308:	80 61       	ori	r24, 0x10	; 16
    330a:	11 c0       	rjmp	.+34     	; 0x332e <__vector_10+0xd0>
    330c:	c0 ff       	sbrs	r28, 0
    330e:	16 c0       	rjmp	.+44     	; 0x333c <__vector_10+0xde>
    3310:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3314:	8e 7e       	andi	r24, 0xEE	; 238
    3316:	80 61       	ori	r24, 0x10	; 16
    3318:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    331c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    3320:	8e 7e       	andi	r24, 0xEE	; 238
    3322:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    3326:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <_usbSuspendState>
    332a:	8e 7e       	andi	r24, 0xEE	; 238
    332c:	81 60       	ori	r24, 0x01	; 1
    332e:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <_usbSuspendState>
    3332:	04 c0       	rjmp	.+8      	; 0x333c <__vector_10+0xde>
    3334:	5d 9a       	sbi	0x0b, 5	; 11
    3336:	cd cf       	rjmp	.-102    	; 0x32d2 <__vector_10+0x74>
    3338:	28 9a       	sbi	0x05, 0	; 5
    333a:	d6 cf       	rjmp	.-84     	; 0x32e8 <__vector_10+0x8a>
    333c:	ff 91       	pop	r31
    333e:	ef 91       	pop	r30
    3340:	cf 91       	pop	r28
    3342:	bf 91       	pop	r27
    3344:	af 91       	pop	r26
    3346:	9f 91       	pop	r25
    3348:	8f 91       	pop	r24
    334a:	7f 91       	pop	r23
    334c:	6f 91       	pop	r22
    334e:	5f 91       	pop	r21
    3350:	4f 91       	pop	r20
    3352:	3f 91       	pop	r19
    3354:	2f 91       	pop	r18
    3356:	0f 90       	pop	r0
    3358:	0f be       	out	0x3f, r0	; 63
    335a:	0f 90       	pop	r0
    335c:	1f 90       	pop	r1
    335e:	18 95       	reti

00003360 <_ZN10USBDevice_6attachEv>:
{
}

void USBDevice_::attach()
{
	_usbConfiguration = 0;
    3360:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <_usbConfiguration>
	_usbCurrentStatus = 0;
    3364:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <_usbCurrentStatus>
	_usbSuspendState = 0;
    3368:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <_usbSuspendState>
	USB_ClockEnable();
    336c:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <_ZL15USB_ClockEnablev>

	UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear already pending WAKEUP / SUSPEND requests
    3370:	e1 ee       	ldi	r30, 0xE1	; 225
    3372:	f0 e0       	ldi	r31, 0x00	; 0
    3374:	80 81       	ld	r24, Z
    3376:	8e 7e       	andi	r24, 0xEE	; 238
    3378:	80 83       	st	Z, r24
	UDIEN = (1<<EORSTE) | (1<<SOFE) | (1<<SUSPE);	// Enable interrupts for EOR (End of Reset), SOF (start of frame) and SUSPEND
    337a:	8d e0       	ldi	r24, 0x0D	; 13
    337c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	
	TX_RX_LED_INIT;
    3380:	55 9a       	sbi	0x0a, 5	; 10
    3382:	20 9a       	sbi	0x04, 0	; 4
    3384:	08 95       	ret

00003386 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    3386:	1f 92       	push	r1
    3388:	0f 92       	push	r0
    338a:	0f b6       	in	r0, 0x3f	; 63
    338c:	0f 92       	push	r0
    338e:	11 24       	eor	r1, r1
    3390:	2f 93       	push	r18
    3392:	3f 93       	push	r19
    3394:	8f 93       	push	r24
    3396:	9f 93       	push	r25
    3398:	af 93       	push	r26
    339a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    339c:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <timer0_millis>
    33a0:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <timer0_millis+0x1>
    33a4:	a0 91 a0 04 	lds	r26, 0x04A0	; 0x8004a0 <timer0_millis+0x2>
    33a8:	b0 91 a1 04 	lds	r27, 0x04A1	; 0x8004a1 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    33ac:	30 91 9d 04 	lds	r19, 0x049D	; 0x80049d <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    33b0:	23 e0       	ldi	r18, 0x03	; 3
    33b2:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    33b4:	2d 37       	cpi	r18, 0x7D	; 125
    33b6:	20 f4       	brcc	.+8      	; 0x33c0 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    33b8:	01 96       	adiw	r24, 0x01	; 1
    33ba:	a1 1d       	adc	r26, r1
    33bc:	b1 1d       	adc	r27, r1
    33be:	05 c0       	rjmp	.+10     	; 0x33ca <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    33c0:	26 e8       	ldi	r18, 0x86	; 134
    33c2:	23 0f       	add	r18, r19
		m += 1;
    33c4:	02 96       	adiw	r24, 0x02	; 2
    33c6:	a1 1d       	adc	r26, r1
    33c8:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    33ca:	20 93 9d 04 	sts	0x049D, r18	; 0x80049d <timer0_fract>
	timer0_millis = m;
    33ce:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <timer0_millis>
    33d2:	90 93 9f 04 	sts	0x049F, r25	; 0x80049f <timer0_millis+0x1>
    33d6:	a0 93 a0 04 	sts	0x04A0, r26	; 0x8004a0 <timer0_millis+0x2>
    33da:	b0 93 a1 04 	sts	0x04A1, r27	; 0x8004a1 <timer0_millis+0x3>
	timer0_overflow_count++;
    33de:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <timer0_overflow_count>
    33e2:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <timer0_overflow_count+0x1>
    33e6:	a0 91 a4 04 	lds	r26, 0x04A4	; 0x8004a4 <timer0_overflow_count+0x2>
    33ea:	b0 91 a5 04 	lds	r27, 0x04A5	; 0x8004a5 <timer0_overflow_count+0x3>
    33ee:	01 96       	adiw	r24, 0x01	; 1
    33f0:	a1 1d       	adc	r26, r1
    33f2:	b1 1d       	adc	r27, r1
    33f4:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <timer0_overflow_count>
    33f8:	90 93 a3 04 	sts	0x04A3, r25	; 0x8004a3 <timer0_overflow_count+0x1>
    33fc:	a0 93 a4 04 	sts	0x04A4, r26	; 0x8004a4 <timer0_overflow_count+0x2>
    3400:	b0 93 a5 04 	sts	0x04A5, r27	; 0x8004a5 <timer0_overflow_count+0x3>
}
    3404:	bf 91       	pop	r27
    3406:	af 91       	pop	r26
    3408:	9f 91       	pop	r25
    340a:	8f 91       	pop	r24
    340c:	3f 91       	pop	r19
    340e:	2f 91       	pop	r18
    3410:	0f 90       	pop	r0
    3412:	0f be       	out	0x3f, r0	; 63
    3414:	0f 90       	pop	r0
    3416:	1f 90       	pop	r1
    3418:	18 95       	reti

0000341a <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    341a:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    341c:	f8 94       	cli
	m = timer0_millis;
    341e:	60 91 9e 04 	lds	r22, 0x049E	; 0x80049e <timer0_millis>
    3422:	70 91 9f 04 	lds	r23, 0x049F	; 0x80049f <timer0_millis+0x1>
    3426:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <timer0_millis+0x2>
    342a:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <timer0_millis+0x3>
	SREG = oldSREG;
    342e:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    3430:	08 95       	ret

00003432 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    3432:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    3434:	f8 94       	cli
	m = timer0_overflow_count;
    3436:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <timer0_overflow_count>
    343a:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <timer0_overflow_count+0x1>
    343e:	a0 91 a4 04 	lds	r26, 0x04A4	; 0x8004a4 <timer0_overflow_count+0x2>
    3442:	b0 91 a5 04 	lds	r27, 0x04A5	; 0x8004a5 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    3446:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    3448:	a8 9b       	sbis	0x15, 0	; 21
    344a:	05 c0       	rjmp	.+10     	; 0x3456 <micros+0x24>
    344c:	2f 3f       	cpi	r18, 0xFF	; 255
    344e:	19 f0       	breq	.+6      	; 0x3456 <micros+0x24>
		m++;
    3450:	01 96       	adiw	r24, 0x01	; 1
    3452:	a1 1d       	adc	r26, r1
    3454:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    3456:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    3458:	ba 2f       	mov	r27, r26
    345a:	a9 2f       	mov	r26, r25
    345c:	98 2f       	mov	r25, r24
    345e:	88 27       	eor	r24, r24
    3460:	82 0f       	add	r24, r18
    3462:	91 1d       	adc	r25, r1
    3464:	a1 1d       	adc	r26, r1
    3466:	b1 1d       	adc	r27, r1
    3468:	bc 01       	movw	r22, r24
    346a:	cd 01       	movw	r24, r26
    346c:	42 e0       	ldi	r20, 0x02	; 2
    346e:	66 0f       	add	r22, r22
    3470:	77 1f       	adc	r23, r23
    3472:	88 1f       	adc	r24, r24
    3474:	99 1f       	adc	r25, r25
    3476:	4a 95       	dec	r20
    3478:	d1 f7       	brne	.-12     	; 0x346e <micros+0x3c>
}
    347a:	08 95       	ret

0000347c <delay>:

void delay(unsigned long ms)
{
    347c:	8f 92       	push	r8
    347e:	9f 92       	push	r9
    3480:	af 92       	push	r10
    3482:	bf 92       	push	r11
    3484:	cf 92       	push	r12
    3486:	df 92       	push	r13
    3488:	ef 92       	push	r14
    348a:	ff 92       	push	r15
    348c:	6b 01       	movw	r12, r22
    348e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    3490:	0e 94 19 1a 	call	0x3432	; 0x3432 <micros>
    3494:	4b 01       	movw	r8, r22
    3496:	5c 01       	movw	r10, r24

	while (ms > 0) {
    3498:	c1 14       	cp	r12, r1
    349a:	d1 04       	cpc	r13, r1
    349c:	e1 04       	cpc	r14, r1
    349e:	f1 04       	cpc	r15, r1
    34a0:	01 f1       	breq	.+64     	; 0x34e2 <delay+0x66>
		yield();
    34a2:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    34a6:	0e 94 19 1a 	call	0x3432	; 0x3432 <micros>
    34aa:	dc 01       	movw	r26, r24
    34ac:	cb 01       	movw	r24, r22
    34ae:	88 19       	sub	r24, r8
    34b0:	99 09       	sbc	r25, r9
    34b2:	aa 09       	sbc	r26, r10
    34b4:	bb 09       	sbc	r27, r11
    34b6:	88 3e       	cpi	r24, 0xE8	; 232
    34b8:	93 40       	sbci	r25, 0x03	; 3
    34ba:	a1 05       	cpc	r26, r1
    34bc:	b1 05       	cpc	r27, r1
    34be:	60 f3       	brcs	.-40     	; 0x3498 <delay+0x1c>
			ms--;
    34c0:	21 e0       	ldi	r18, 0x01	; 1
    34c2:	c2 1a       	sub	r12, r18
    34c4:	d1 08       	sbc	r13, r1
    34c6:	e1 08       	sbc	r14, r1
    34c8:	f1 08       	sbc	r15, r1
			start += 1000;
    34ca:	88 ee       	ldi	r24, 0xE8	; 232
    34cc:	88 0e       	add	r8, r24
    34ce:	83 e0       	ldi	r24, 0x03	; 3
    34d0:	98 1e       	adc	r9, r24
    34d2:	a1 1c       	adc	r10, r1
    34d4:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    34d6:	c1 14       	cp	r12, r1
    34d8:	d1 04       	cpc	r13, r1
    34da:	e1 04       	cpc	r14, r1
    34dc:	f1 04       	cpc	r15, r1
    34de:	19 f7       	brne	.-58     	; 0x34a6 <delay+0x2a>
    34e0:	db cf       	rjmp	.-74     	; 0x3498 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    34e2:	ff 90       	pop	r15
    34e4:	ef 90       	pop	r14
    34e6:	df 90       	pop	r13
    34e8:	cf 90       	pop	r12
    34ea:	bf 90       	pop	r11
    34ec:	af 90       	pop	r10
    34ee:	9f 90       	pop	r9
    34f0:	8f 90       	pop	r8
    34f2:	08 95       	ret

000034f4 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    34f4:	82 30       	cpi	r24, 0x02	; 2
    34f6:	91 05       	cpc	r25, r1
    34f8:	38 f0       	brcs	.+14     	; 0x3508 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    34fa:	88 0f       	add	r24, r24
    34fc:	99 1f       	adc	r25, r25
    34fe:	88 0f       	add	r24, r24
    3500:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    3502:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    3504:	01 97       	sbiw	r24, 0x01	; 1
    3506:	f1 f7       	brne	.-4      	; 0x3504 <delayMicroseconds+0x10>
    3508:	08 95       	ret

0000350a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    350a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    350c:	84 b5       	in	r24, 0x24	; 36
    350e:	82 60       	ori	r24, 0x02	; 2
    3510:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3512:	84 b5       	in	r24, 0x24	; 36
    3514:	81 60       	ori	r24, 0x01	; 1
    3516:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3518:	85 b5       	in	r24, 0x25	; 37
    351a:	82 60       	ori	r24, 0x02	; 2
    351c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    351e:	85 b5       	in	r24, 0x25	; 37
    3520:	81 60       	ori	r24, 0x01	; 1
    3522:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3524:	ee e6       	ldi	r30, 0x6E	; 110
    3526:	f0 e0       	ldi	r31, 0x00	; 0
    3528:	80 81       	ld	r24, Z
    352a:	81 60       	ori	r24, 0x01	; 1
    352c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    352e:	e1 e8       	ldi	r30, 0x81	; 129
    3530:	f0 e0       	ldi	r31, 0x00	; 0
    3532:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3534:	80 81       	ld	r24, Z
    3536:	82 60       	ori	r24, 0x02	; 2
    3538:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    353a:	80 81       	ld	r24, Z
    353c:	81 60       	ori	r24, 0x01	; 1
    353e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3540:	e0 e8       	ldi	r30, 0x80	; 128
    3542:	f0 e0       	ldi	r31, 0x00	; 0
    3544:	80 81       	ld	r24, Z
    3546:	81 60       	ori	r24, 0x01	; 1
    3548:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    354a:	e1 e9       	ldi	r30, 0x91	; 145
    354c:	f0 e0       	ldi	r31, 0x00	; 0
    354e:	80 81       	ld	r24, Z
    3550:	82 60       	ori	r24, 0x02	; 2
    3552:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    3554:	80 81       	ld	r24, Z
    3556:	81 60       	ori	r24, 0x01	; 1
    3558:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    355a:	e0 e9       	ldi	r30, 0x90	; 144
    355c:	f0 e0       	ldi	r31, 0x00	; 0
    355e:	80 81       	ld	r24, Z
    3560:	81 60       	ori	r24, 0x01	; 1
    3562:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
    3564:	e1 ec       	ldi	r30, 0xC1	; 193
    3566:	f0 e0       	ldi	r31, 0x00	; 0
    3568:	80 81       	ld	r24, Z
    356a:	84 60       	ori	r24, 0x04	; 4
    356c:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
    356e:	80 81       	ld	r24, Z
    3570:	82 60       	ori	r24, 0x02	; 2
    3572:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    3574:	80 81       	ld	r24, Z
    3576:	81 60       	ori	r24, 0x01	; 1
    3578:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
    357a:	e3 ec       	ldi	r30, 0xC3	; 195
    357c:	f0 e0       	ldi	r31, 0x00	; 0
    357e:	80 81       	ld	r24, Z
    3580:	81 60       	ori	r24, 0x01	; 1
    3582:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
    3584:	e0 ec       	ldi	r30, 0xC0	; 192
    3586:	f0 e0       	ldi	r31, 0x00	; 0
    3588:	80 81       	ld	r24, Z
    358a:	82 60       	ori	r24, 0x02	; 2
    358c:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
    358e:	e2 ec       	ldi	r30, 0xC2	; 194
    3590:	f0 e0       	ldi	r31, 0x00	; 0
    3592:	80 81       	ld	r24, Z
    3594:	81 60       	ori	r24, 0x01	; 1
    3596:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3598:	ea e7       	ldi	r30, 0x7A	; 122
    359a:	f0 e0       	ldi	r31, 0x00	; 0
    359c:	80 81       	ld	r24, Z
    359e:	84 60       	ori	r24, 0x04	; 4
    35a0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    35a2:	80 81       	ld	r24, Z
    35a4:	82 60       	ori	r24, 0x02	; 2
    35a6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    35a8:	80 81       	ld	r24, Z
    35aa:	81 60       	ori	r24, 0x01	; 1
    35ac:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    35ae:	80 81       	ld	r24, Z
    35b0:	80 68       	ori	r24, 0x80	; 128
    35b2:	80 83       	st	Z, r24
    35b4:	08 95       	ret

000035b6 <analogRead>:
{
	uint8_t low, high;

#if defined(analogPinToChannel)
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
    35b6:	82 31       	cpi	r24, 0x12	; 18
    35b8:	08 f0       	brcs	.+2      	; 0x35bc <analogRead+0x6>
    35ba:	82 51       	subi	r24, 0x12	; 18
#endif
	pin = analogPinToChannel(pin);
    35bc:	e8 2f       	mov	r30, r24
    35be:	f0 e0       	ldi	r31, 0x00	; 0
    35c0:	e3 50       	subi	r30, 0x03	; 3
    35c2:	ff 4f       	sbci	r31, 0xFF	; 255
    35c4:	e4 91       	lpm	r30, Z
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    35c6:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    35ca:	e3 fb       	bst	r30, 3
    35cc:	22 27       	eor	r18, r18
    35ce:	20 f9       	bld	r18, 0
    35d0:	30 e0       	ldi	r19, 0x00	; 0
    35d2:	95 e0       	ldi	r25, 0x05	; 5
    35d4:	22 0f       	add	r18, r18
    35d6:	33 1f       	adc	r19, r19
    35d8:	9a 95       	dec	r25
    35da:	e1 f7       	brne	.-8      	; 0x35d4 <analogRead+0x1e>
    35dc:	8f 7d       	andi	r24, 0xDF	; 223
    35de:	28 2b       	or	r18, r24
    35e0:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    35e4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <analog_reference>
    35e8:	20 e4       	ldi	r18, 0x40	; 64
    35ea:	82 9f       	mul	r24, r18
    35ec:	c0 01       	movw	r24, r0
    35ee:	11 24       	eor	r1, r1
    35f0:	e7 70       	andi	r30, 0x07	; 7
    35f2:	e8 2b       	or	r30, r24
    35f4:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    35f8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    35fc:	80 64       	ori	r24, 0x40	; 64
    35fe:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    3602:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3606:	86 fd       	sbrc	r24, 6
    3608:	fc cf       	rjmp	.-8      	; 0x3602 <analogRead+0x4c>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    360a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    360e:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    3612:	90 e0       	ldi	r25, 0x00	; 0
}
    3614:	92 2b       	or	r25, r18
    3616:	08 95       	ret

00003618 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	fc 01       	movw	r30, r24
    361c:	31 97       	sbiw	r30, 0x01	; 1
    361e:	ef 30       	cpi	r30, 0x0F	; 15
    3620:	f1 05       	cpc	r31, r1
    3622:	b0 f5       	brcc	.+108    	; 0x3690 <turnOffPWM+0x78>
    3624:	ea 5a       	subi	r30, 0xAA	; 170
    3626:	ff 4f       	sbci	r31, 0xFF	; 255
    3628:	0c 94 cc 1e 	jmp	0x3d98	; 0x3d98 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    362c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3630:	8f 77       	andi	r24, 0x7F	; 127
    3632:	03 c0       	rjmp	.+6      	; 0x363a <turnOffPWM+0x22>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3634:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3638:	8f 7d       	andi	r24, 0xDF	; 223
    363a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    363e:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    3640:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3644:	87 7f       	andi	r24, 0xF7	; 247
    3646:	f9 cf       	rjmp	.-14     	; 0x363a <turnOffPWM+0x22>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3648:	84 b5       	in	r24, 0x24	; 36
    364a:	8f 77       	andi	r24, 0x7F	; 127
    364c:	02 c0       	rjmp	.+4      	; 0x3652 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    364e:	84 b5       	in	r24, 0x24	; 36
    3650:	8f 7d       	andi	r24, 0xDF	; 223
    3652:	84 bd       	out	0x24, r24	; 36
    3654:	08 95       	ret
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    3656:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    365a:	8f 77       	andi	r24, 0x7F	; 127
    365c:	07 c0       	rjmp	.+14     	; 0x366c <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    365e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    3662:	8f 7d       	andi	r24, 0xDF	; 223
    3664:	03 c0       	rjmp	.+6      	; 0x366c <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    3666:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    366a:	87 7f       	andi	r24, 0xF7	; 247
    366c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    3670:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    3672:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3676:	8f 77       	andi	r24, 0x7F	; 127
    3678:	03 c0       	rjmp	.+6      	; 0x3680 <turnOffPWM+0x68>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    367a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    367e:	8f 7d       	andi	r24, 0xDF	; 223
    3680:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3684:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
		#endif			
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
    3686:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    368a:	87 7f       	andi	r24, 0xF7	; 247
    368c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    3690:	08 95       	ret

00003692 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3692:	cf 93       	push	r28
    3694:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	fc 01       	movw	r30, r24
    369a:	e8 5d       	subi	r30, 0xD8	; 216
    369c:	fe 4f       	sbci	r31, 0xFE	; 254
    369e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    36a0:	fc 01       	movw	r30, r24
    36a2:	e9 5b       	subi	r30, 0xB9	; 185
    36a4:	fe 4f       	sbci	r31, 0xFE	; 254
    36a6:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    36a8:	88 23       	and	r24, r24
    36aa:	61 f1       	breq	.+88     	; 0x3704 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	88 0f       	add	r24, r24
    36b0:	99 1f       	adc	r25, r25
    36b2:	fc 01       	movw	r30, r24
    36b4:	ee 57       	subi	r30, 0x7E	; 126
    36b6:	fe 4f       	sbci	r31, 0xFE	; 254
    36b8:	c5 91       	lpm	r28, Z+
    36ba:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    36bc:	fc 01       	movw	r30, r24
    36be:	ec 58       	subi	r30, 0x8C	; 140
    36c0:	fe 4f       	sbci	r31, 0xFE	; 254
    36c2:	a5 91       	lpm	r26, Z+
    36c4:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    36c6:	61 11       	cpse	r22, r1
    36c8:	09 c0       	rjmp	.+18     	; 0x36dc <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    36ca:	9f b7       	in	r25, 0x3f	; 63
                cli();
    36cc:	f8 94       	cli
		*reg &= ~bit;
    36ce:	88 81       	ld	r24, Y
    36d0:	20 95       	com	r18
    36d2:	82 23       	and	r24, r18
    36d4:	88 83       	st	Y, r24
		*out &= ~bit;
    36d6:	ec 91       	ld	r30, X
    36d8:	2e 23       	and	r18, r30
    36da:	0b c0       	rjmp	.+22     	; 0x36f2 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    36dc:	62 30       	cpi	r22, 0x02	; 2
    36de:	61 f4       	brne	.+24     	; 0x36f8 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    36e0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    36e2:	f8 94       	cli
		*reg &= ~bit;
    36e4:	88 81       	ld	r24, Y
    36e6:	32 2f       	mov	r19, r18
    36e8:	30 95       	com	r19
    36ea:	83 23       	and	r24, r19
    36ec:	88 83       	st	Y, r24
		*out |= bit;
    36ee:	ec 91       	ld	r30, X
    36f0:	2e 2b       	or	r18, r30
    36f2:	2c 93       	st	X, r18
		SREG = oldSREG;
    36f4:	9f bf       	out	0x3f, r25	; 63
    36f6:	06 c0       	rjmp	.+12     	; 0x3704 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    36f8:	8f b7       	in	r24, 0x3f	; 63
                cli();
    36fa:	f8 94       	cli
		*reg |= bit;
    36fc:	e8 81       	ld	r30, Y
    36fe:	2e 2b       	or	r18, r30
    3700:	28 83       	st	Y, r18
		SREG = oldSREG;
    3702:	8f bf       	out	0x3f, r24	; 63
	}
}
    3704:	df 91       	pop	r29
    3706:	cf 91       	pop	r28
    3708:	08 95       	ret

0000370a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    370a:	1f 93       	push	r17
    370c:	cf 93       	push	r28
    370e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3710:	28 2f       	mov	r18, r24
    3712:	30 e0       	ldi	r19, 0x00	; 0
    3714:	f9 01       	movw	r30, r18
    3716:	e7 5f       	subi	r30, 0xF7	; 247
    3718:	fe 4f       	sbci	r31, 0xFE	; 254
    371a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    371c:	f9 01       	movw	r30, r18
    371e:	e8 5d       	subi	r30, 0xD8	; 216
    3720:	fe 4f       	sbci	r31, 0xFE	; 254
    3722:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3724:	f9 01       	movw	r30, r18
    3726:	e9 5b       	subi	r30, 0xB9	; 185
    3728:	fe 4f       	sbci	r31, 0xFE	; 254
    372a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    372c:	cc 23       	and	r28, r28
    372e:	c1 f0       	breq	.+48     	; 0x3760 <digitalWrite+0x56>
    3730:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3732:	81 11       	cpse	r24, r1
    3734:	0e 94 0c 1b 	call	0x3618	; 0x3618 <turnOffPWM>

	out = portOutputRegister(port);
    3738:	ec 2f       	mov	r30, r28
    373a:	f0 e0       	ldi	r31, 0x00	; 0
    373c:	ee 0f       	add	r30, r30
    373e:	ff 1f       	adc	r31, r31
    3740:	ec 58       	subi	r30, 0x8C	; 140
    3742:	fe 4f       	sbci	r31, 0xFE	; 254
    3744:	a5 91       	lpm	r26, Z+
    3746:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3748:	9f b7       	in	r25, 0x3f	; 63
	cli();
    374a:	f8 94       	cli

	if (val == LOW) {
    374c:	11 11       	cpse	r17, r1
    374e:	04 c0       	rjmp	.+8      	; 0x3758 <digitalWrite+0x4e>
		*out &= ~bit;
    3750:	8c 91       	ld	r24, X
    3752:	d0 95       	com	r29
    3754:	d8 23       	and	r29, r24
    3756:	02 c0       	rjmp	.+4      	; 0x375c <digitalWrite+0x52>
	} else {
		*out |= bit;
    3758:	ec 91       	ld	r30, X
    375a:	de 2b       	or	r29, r30
    375c:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    375e:	9f bf       	out	0x3f, r25	; 63
}
    3760:	df 91       	pop	r29
    3762:	cf 91       	pop	r28
    3764:	1f 91       	pop	r17
    3766:	08 95       	ret

00003768 <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    3768:	fc 01       	movw	r30, r24
    376a:	80 81       	ld	r24, Z
    376c:	91 81       	ldd	r25, Z+1	; 0x01
    376e:	0c 94 7e 1f 	jmp	0x3efc	; 0x3efc <free>

00003772 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    3772:	cf 93       	push	r28
    3774:	df 93       	push	r29
    3776:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    3778:	88 81       	ld	r24, Y
    377a:	99 81       	ldd	r25, Y+1	; 0x01
    377c:	00 97       	sbiw	r24, 0x00	; 0
    377e:	11 f0       	breq	.+4      	; 0x3784 <_ZN6String10invalidateEv+0x12>
    3780:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <free>
	buffer = NULL;
    3784:	19 82       	std	Y+1, r1	; 0x01
    3786:	18 82       	st	Y, r1
	capacity = len = 0;
    3788:	1d 82       	std	Y+5, r1	; 0x05
    378a:	1c 82       	std	Y+4, r1	; 0x04
    378c:	1b 82       	std	Y+3, r1	; 0x03
    378e:	1a 82       	std	Y+2, r1	; 0x02
}
    3790:	df 91       	pop	r29
    3792:	cf 91       	pop	r28
    3794:	08 95       	ret

00003796 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    3796:	0f 93       	push	r16
    3798:	1f 93       	push	r17
    379a:	cf 93       	push	r28
    379c:	df 93       	push	r29
    379e:	ec 01       	movw	r28, r24
    37a0:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    37a2:	6f 5f       	subi	r22, 0xFF	; 255
    37a4:	7f 4f       	sbci	r23, 0xFF	; 255
    37a6:	88 81       	ld	r24, Y
    37a8:	99 81       	ldd	r25, Y+1	; 0x01
    37aa:	0e 94 07 20 	call	0x400e	; 0x400e <realloc>
	if (newbuffer) {
    37ae:	00 97       	sbiw	r24, 0x00	; 0
    37b0:	31 f0       	breq	.+12     	; 0x37be <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    37b2:	99 83       	std	Y+1, r25	; 0x01
    37b4:	88 83       	st	Y, r24
		capacity = maxStrLen;
    37b6:	1b 83       	std	Y+3, r17	; 0x03
    37b8:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    37ba:	81 e0       	ldi	r24, 0x01	; 1
    37bc:	01 c0       	rjmp	.+2      	; 0x37c0 <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    37be:	80 e0       	ldi	r24, 0x00	; 0
}
    37c0:	df 91       	pop	r29
    37c2:	cf 91       	pop	r28
    37c4:	1f 91       	pop	r17
    37c6:	0f 91       	pop	r16
    37c8:	08 95       	ret

000037ca <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    37ca:	cf 93       	push	r28
    37cc:	df 93       	push	r29
    37ce:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    37d0:	88 81       	ld	r24, Y
    37d2:	99 81       	ldd	r25, Y+1	; 0x01
    37d4:	89 2b       	or	r24, r25
    37d6:	29 f0       	breq	.+10     	; 0x37e2 <_ZN6String7reserveEj+0x18>
    37d8:	8a 81       	ldd	r24, Y+2	; 0x02
    37da:	9b 81       	ldd	r25, Y+3	; 0x03
    37dc:	86 17       	cp	r24, r22
    37de:	97 07       	cpc	r25, r23
    37e0:	60 f4       	brcc	.+24     	; 0x37fa <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    37e2:	ce 01       	movw	r24, r28
    37e4:	0e 94 cb 1b 	call	0x3796	; 0x3796 <_ZN6String12changeBufferEj>
    37e8:	88 23       	and	r24, r24
    37ea:	41 f0       	breq	.+16     	; 0x37fc <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    37ec:	8c 81       	ldd	r24, Y+4	; 0x04
    37ee:	9d 81       	ldd	r25, Y+5	; 0x05
    37f0:	89 2b       	or	r24, r25
    37f2:	19 f4       	brne	.+6      	; 0x37fa <_ZN6String7reserveEj+0x30>
    37f4:	e8 81       	ld	r30, Y
    37f6:	f9 81       	ldd	r31, Y+1	; 0x01
    37f8:	10 82       	st	Z, r1
    37fa:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    37fc:	df 91       	pop	r29
    37fe:	cf 91       	pop	r28
    3800:	08 95       	ret

00003802 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    3802:	ef 92       	push	r14
    3804:	ff 92       	push	r15
    3806:	0f 93       	push	r16
    3808:	1f 93       	push	r17
    380a:	cf 93       	push	r28
    380c:	df 93       	push	r29
    380e:	ec 01       	movw	r28, r24
    3810:	7b 01       	movw	r14, r22
    3812:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    3814:	ba 01       	movw	r22, r20
    3816:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <_ZN6String7reserveEj>
    381a:	81 11       	cpse	r24, r1
    381c:	04 c0       	rjmp	.+8      	; 0x3826 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    381e:	ce 01       	movw	r24, r28
    3820:	0e 94 b9 1b 	call	0x3772	; 0x3772 <_ZN6String10invalidateEv>
		return *this;
    3824:	07 c0       	rjmp	.+14     	; 0x3834 <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    3826:	1d 83       	std	Y+5, r17	; 0x05
    3828:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    382a:	b7 01       	movw	r22, r14
    382c:	88 81       	ld	r24, Y
    382e:	99 81       	ldd	r25, Y+1	; 0x01
    3830:	0e 94 db 20 	call	0x41b6	; 0x41b6 <strcpy>
	return *this;
}
    3834:	ce 01       	movw	r24, r28
    3836:	df 91       	pop	r29
    3838:	cf 91       	pop	r28
    383a:	1f 91       	pop	r17
    383c:	0f 91       	pop	r16
    383e:	ff 90       	pop	r15
    3840:	ef 90       	pop	r14
    3842:	08 95       	ret

00003844 <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3844:	fc 01       	movw	r30, r24
    3846:	11 82       	std	Z+1, r1	; 0x01
    3848:	10 82       	st	Z, r1
	capacity = 0;
    384a:	13 82       	std	Z+3, r1	; 0x03
    384c:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    384e:	15 82       	std	Z+5, r1	; 0x05
    3850:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    3852:	61 15       	cp	r22, r1
    3854:	71 05       	cpc	r23, r1
    3856:	51 f0       	breq	.+20     	; 0x386c <_ZN6StringC1EPKc+0x28>
    3858:	fb 01       	movw	r30, r22
    385a:	01 90       	ld	r0, Z+
    385c:	00 20       	and	r0, r0
    385e:	e9 f7       	brne	.-6      	; 0x385a <_ZN6StringC1EPKc+0x16>
    3860:	31 97       	sbiw	r30, 0x01	; 1
    3862:	af 01       	movw	r20, r30
    3864:	46 1b       	sub	r20, r22
    3866:	57 0b       	sbc	r21, r23
    3868:	0c 94 01 1c 	jmp	0x3802	; 0x3802 <_ZN6String4copyEPKcj>
    386c:	08 95       	ret

0000386e <_ZN7Serial_5writeEh>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		ret = breakValue;
		breakValue = -1;
	}
	return ret;
}
    386e:	cf 93       	push	r28
    3870:	df 93       	push	r29
    3872:	1f 92       	push	r1
    3874:	cd b7       	in	r28, 0x3d	; 61
    3876:	de b7       	in	r29, 0x3e	; 62
    3878:	69 83       	std	Y+1, r22	; 0x01
    387a:	dc 01       	movw	r26, r24
    387c:	ed 91       	ld	r30, X+
    387e:	fc 91       	ld	r31, X
    3880:	02 80       	ldd	r0, Z+2	; 0x02
    3882:	f3 81       	ldd	r31, Z+3	; 0x03
    3884:	e0 2d       	mov	r30, r0
    3886:	41 e0       	ldi	r20, 0x01	; 1
    3888:	50 e0       	ldi	r21, 0x00	; 0
    388a:	be 01       	movw	r22, r28
    388c:	6f 5f       	subi	r22, 0xFF	; 255
    388e:	7f 4f       	sbci	r23, 0xFF	; 255
    3890:	09 95       	icall
    3892:	0f 90       	pop	r0
    3894:	df 91       	pop	r29
    3896:	cf 91       	pop	r28
    3898:	08 95       	ret

0000389a <_ZN7Serial_4peekEv>:
    389a:	cf 93       	push	r28
    389c:	df 93       	push	r29
    389e:	ec 01       	movw	r28, r24
    38a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    38a2:	9d 85       	ldd	r25, Y+13	; 0x0d
    38a4:	97 ff       	sbrs	r25, 7
    38a6:	05 c0       	rjmp	.+10     	; 0x38b2 <_ZN7Serial_4peekEv+0x18>
    38a8:	82 e0       	ldi	r24, 0x02	; 2
    38aa:	0e 94 90 16 	call	0x2d20	; 0x2d20 <_Z8USB_Recvh>
    38ae:	9d 87       	std	Y+13, r25	; 0x0d
    38b0:	8c 87       	std	Y+12, r24	; 0x0c
    38b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    38b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    38b6:	df 91       	pop	r29
    38b8:	cf 91       	pop	r28
    38ba:	08 95       	ret

000038bc <_ZN7Serial_17availableForWriteEv>:
    38bc:	83 e0       	ldi	r24, 0x03	; 3
    38be:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <_Z13USB_SendSpaceh>
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	08 95       	ret

000038c6 <_ZN7Serial_5flushEv>:
    38c6:	83 e0       	ldi	r24, 0x03	; 3
    38c8:	0c 94 25 19 	jmp	0x324a	; 0x324a <_Z9USB_Flushh>

000038cc <_ZN7Serial_9availableEv>:
    38cc:	fc 01       	movw	r30, r24
    38ce:	84 85       	ldd	r24, Z+12	; 0x0c
    38d0:	95 85       	ldd	r25, Z+13	; 0x0d
    38d2:	97 fd       	sbrc	r25, 7
    38d4:	06 c0       	rjmp	.+12     	; 0x38e2 <_ZN7Serial_9availableEv+0x16>
    38d6:	82 e0       	ldi	r24, 0x02	; 2
    38d8:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <_Z13USB_Availableh>
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	01 96       	adiw	r24, 0x01	; 1
    38e0:	08 95       	ret
    38e2:	82 e0       	ldi	r24, 0x02	; 2
    38e4:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <_Z13USB_Availableh>
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	08 95       	ret

000038ec <_ZN7Serial_4readEv>:
    38ec:	fc 01       	movw	r30, r24
    38ee:	84 85       	ldd	r24, Z+12	; 0x0c
    38f0:	95 85       	ldd	r25, Z+13	; 0x0d
    38f2:	97 fd       	sbrc	r25, 7
    38f4:	05 c0       	rjmp	.+10     	; 0x3900 <_ZN7Serial_4readEv+0x14>
    38f6:	2f ef       	ldi	r18, 0xFF	; 255
    38f8:	3f ef       	ldi	r19, 0xFF	; 255
    38fa:	35 87       	std	Z+13, r19	; 0x0d
    38fc:	24 87       	std	Z+12, r18	; 0x0c
    38fe:	08 95       	ret
    3900:	82 e0       	ldi	r24, 0x02	; 2
    3902:	0c 94 90 16 	jmp	0x2d20	; 0x2d20 <_Z8USB_Recvh>

00003906 <_ZN7Serial_5writeEPKhj>:
    3906:	cf 93       	push	r28
    3908:	df 93       	push	r29
    390a:	ec 01       	movw	r28, r24
    390c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL12_usbLineInfo+0x7>
    3910:	88 23       	and	r24, r24
    3912:	31 f0       	breq	.+12     	; 0x3920 <_ZN7Serial_5writeEPKhj+0x1a>
    3914:	83 e0       	ldi	r24, 0x03	; 3
    3916:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <_Z8USB_SendhPKvi>
    391a:	18 16       	cp	r1, r24
    391c:	19 06       	cpc	r1, r25
    391e:	34 f0       	brlt	.+12     	; 0x392c <_ZN7Serial_5writeEPKhj+0x26>
    3920:	81 e0       	ldi	r24, 0x01	; 1
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	9b 83       	std	Y+3, r25	; 0x03
    3926:	8a 83       	std	Y+2, r24	; 0x02
    3928:	80 e0       	ldi	r24, 0x00	; 0
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	df 91       	pop	r29
    392e:	cf 91       	pop	r28
    3930:	08 95       	ret

00003932 <_Z16isLUFAbootloaderv>:
    3932:	ee ef       	ldi	r30, 0xFE	; 254
    3934:	ff e7       	ldi	r31, 0x7F	; 127
    3936:	25 91       	lpm	r18, Z+
    3938:	34 91       	lpm	r19, Z
    393a:	81 e0       	ldi	r24, 0x01	; 1
    393c:	2b 3f       	cpi	r18, 0xFB	; 251
    393e:	3c 4d       	sbci	r19, 0xDC	; 220
    3940:	09 f0       	breq	.+2      	; 0x3944 <_Z16isLUFAbootloaderv+0x12>
    3942:	80 e0       	ldi	r24, 0x00	; 0
    3944:	08 95       	ret

00003946 <_Z16CDC_GetInterfacePh>:
    3946:	fc 01       	movw	r30, r24
    3948:	90 81       	ld	r25, Z
    394a:	9e 5f       	subi	r25, 0xFE	; 254
    394c:	90 83       	st	Z, r25
    394e:	42 e4       	ldi	r20, 0x42	; 66
    3950:	50 e0       	ldi	r21, 0x00	; 0
    3952:	60 e9       	ldi	r22, 0x90	; 144
    3954:	71 e0       	ldi	r23, 0x01	; 1
    3956:	80 e8       	ldi	r24, 0x80	; 128
    3958:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <_Z15USB_SendControlhPKvi>

0000395c <_Z9CDC_SetupR8USBSetup>:
    395c:	fc 01       	movw	r30, r24
    395e:	81 81       	ldd	r24, Z+1	; 0x01
    3960:	90 81       	ld	r25, Z
    3962:	91 3a       	cpi	r25, 0xA1	; 161
    3964:	59 f4       	brne	.+22     	; 0x397c <_Z9CDC_SetupR8USBSetup+0x20>
    3966:	81 32       	cpi	r24, 0x21	; 33
    3968:	09 f0       	breq	.+2      	; 0x396c <_Z9CDC_SetupR8USBSetup+0x10>
    396a:	65 c0       	rjmp	.+202    	; 0x3a36 <_Z9CDC_SetupR8USBSetup+0xda>
    396c:	47 e0       	ldi	r20, 0x07	; 7
    396e:	50 e0       	ldi	r21, 0x00	; 0
    3970:	66 e1       	ldi	r22, 0x16	; 22
    3972:	71 e0       	ldi	r23, 0x01	; 1
    3974:	80 e0       	ldi	r24, 0x00	; 0
    3976:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <_Z15USB_SendControlhPKvi>
    397a:	5b c0       	rjmp	.+182    	; 0x3a32 <_Z9CDC_SetupR8USBSetup+0xd6>
    397c:	91 32       	cpi	r25, 0x21	; 33
    397e:	09 f0       	breq	.+2      	; 0x3982 <_Z9CDC_SetupR8USBSetup+0x26>
    3980:	5a c0       	rjmp	.+180    	; 0x3a36 <_Z9CDC_SetupR8USBSetup+0xda>
    3982:	83 32       	cpi	r24, 0x23	; 35
    3984:	69 f4       	brne	.+26     	; 0x39a0 <_Z9CDC_SetupR8USBSetup+0x44>
    3986:	82 81       	ldd	r24, Z+2	; 0x02
    3988:	93 81       	ldd	r25, Z+3	; 0x03
    398a:	a0 e0       	ldi	r26, 0x00	; 0
    398c:	b0 e0       	ldi	r27, 0x00	; 0
    398e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_ZL10breakValue>
    3992:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_ZL10breakValue+0x1>
    3996:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <_ZL10breakValue+0x2>
    399a:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <_ZL10breakValue+0x3>
    399e:	49 c0       	rjmp	.+146    	; 0x3a32 <_Z9CDC_SetupR8USBSetup+0xd6>
    39a0:	80 32       	cpi	r24, 0x20	; 32
    39a2:	39 f4       	brne	.+14     	; 0x39b2 <_Z9CDC_SetupR8USBSetup+0x56>
    39a4:	67 e0       	ldi	r22, 0x07	; 7
    39a6:	70 e0       	ldi	r23, 0x00	; 0
    39a8:	86 e1       	ldi	r24, 0x16	; 22
    39aa:	91 e0       	ldi	r25, 0x01	; 1
    39ac:	0e 94 98 17 	call	0x2f30	; 0x2f30 <_Z15USB_RecvControlPvi>
    39b0:	40 c0       	rjmp	.+128    	; 0x3a32 <_Z9CDC_SetupR8USBSetup+0xd6>
    39b2:	82 32       	cpi	r24, 0x22	; 34
    39b4:	09 f0       	breq	.+2      	; 0x39b8 <_Z9CDC_SetupR8USBSetup+0x5c>
    39b6:	3d c0       	rjmp	.+122    	; 0x3a32 <_Z9CDC_SetupR8USBSetup+0xd6>
    39b8:	82 81       	ldd	r24, Z+2	; 0x02
    39ba:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZL12_usbLineInfo+0x7>
    39be:	0e 94 99 1c 	call	0x3932	; 0x3932 <_Z16isLUFAbootloaderv>
    39c2:	88 23       	and	r24, r24
    39c4:	19 f0       	breq	.+6      	; 0x39cc <_Z9CDC_SetupR8USBSetup+0x70>
    39c6:	ee ef       	ldi	r30, 0xFE	; 254
    39c8:	fa e0       	ldi	r31, 0x0A	; 10
    39ca:	02 c0       	rjmp	.+4      	; 0x39d0 <_Z9CDC_SetupR8USBSetup+0x74>
    39cc:	e0 e0       	ldi	r30, 0x00	; 0
    39ce:	f8 e0       	ldi	r31, 0x08	; 8
    39d0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_ZL12_usbLineInfo>
    39d4:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <_ZL12_usbLineInfo+0x1>
    39d8:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <_ZL12_usbLineInfo+0x2>
    39dc:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <_ZL12_usbLineInfo+0x3>
    39e0:	80 3b       	cpi	r24, 0xB0	; 176
    39e2:	94 40       	sbci	r25, 0x04	; 4
    39e4:	a1 05       	cpc	r26, r1
    39e6:	b1 05       	cpc	r27, r1
    39e8:	41 f5       	brne	.+80     	; 0x3a3a <_Z9CDC_SetupR8USBSetup+0xde>
    39ea:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL12_usbLineInfo+0x7>
    39ee:	80 fd       	sbrc	r24, 0
    39f0:	24 c0       	rjmp	.+72     	; 0x3a3a <_Z9CDC_SetupR8USBSetup+0xde>
    39f2:	ee 3f       	cpi	r30, 0xFE	; 254
    39f4:	8a e0       	ldi	r24, 0x0A	; 10
    39f6:	f8 07       	cpc	r31, r24
    39f8:	51 f0       	breq	.+20     	; 0x3a0e <_Z9CDC_SetupR8USBSetup+0xb2>
    39fa:	80 81       	ld	r24, Z
    39fc:	91 81       	ldd	r25, Z+1	; 0x01
    39fe:	87 37       	cpi	r24, 0x77	; 119
    3a00:	27 e7       	ldi	r18, 0x77	; 119
    3a02:	92 07       	cpc	r25, r18
    3a04:	21 f0       	breq	.+8      	; 0x3a0e <_Z9CDC_SetupR8USBSetup+0xb2>
    3a06:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x5f8>
    3a0a:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x5f7>
    3a0e:	87 e7       	ldi	r24, 0x77	; 119
    3a10:	97 e7       	ldi	r25, 0x77	; 119
    3a12:	91 83       	std	Z+1, r25	; 0x01
    3a14:	80 83       	st	Z, r24
    3a16:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3a1a:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <_ZL11wdtcsr_save>
    3a1e:	9b e0       	ldi	r25, 0x0B	; 11
    3a20:	88 e1       	ldi	r24, 0x18	; 24
    3a22:	0f b6       	in	r0, 0x3f	; 63
    3a24:	f8 94       	cli
    3a26:	a8 95       	wdr
    3a28:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3a2c:	0f be       	out	0x3f, r0	; 63
    3a2e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3a32:	81 e0       	ldi	r24, 0x01	; 1
    3a34:	08 95       	ret
    3a36:	80 e0       	ldi	r24, 0x00	; 0
    3a38:	08 95       	ret
    3a3a:	80 81       	ld	r24, Z
    3a3c:	91 81       	ldd	r25, Z+1	; 0x01
    3a3e:	87 37       	cpi	r24, 0x77	; 119
    3a40:	97 47       	sbci	r25, 0x77	; 119
    3a42:	b9 f7       	brne	.-18     	; 0x3a32 <_Z9CDC_SetupR8USBSetup+0xd6>
    3a44:	a8 95       	wdr
    3a46:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3a4a:	88 61       	ori	r24, 0x18	; 24
    3a4c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3a50:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <_ZL11wdtcsr_save>
    3a54:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3a58:	ee 3f       	cpi	r30, 0xFE	; 254
    3a5a:	8a e0       	ldi	r24, 0x0A	; 10
    3a5c:	f8 07       	cpc	r31, r24
    3a5e:	39 f0       	breq	.+14     	; 0x3a6e <_Z9CDC_SetupR8USBSetup+0x112>
    3a60:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x5f7>
    3a64:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x5f8>
    3a68:	91 83       	std	Z+1, r25	; 0x01
    3a6a:	80 83       	st	Z, r24
    3a6c:	e2 cf       	rjmp	.-60     	; 0x3a32 <_Z9CDC_SetupR8USBSetup+0xd6>
    3a6e:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x5f8>
    3a72:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x5f7>
    3a76:	dd cf       	rjmp	.-70     	; 0x3a32 <_Z9CDC_SetupR8USBSetup+0xd6>

00003a78 <_GLOBAL__sub_I__cdcInterface>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3a78:	e6 ea       	ldi	r30, 0xA6	; 166
    3a7a:	f4 e0       	ldi	r31, 0x04	; 4
    3a7c:	13 82       	std	Z+3, r1	; 0x03
    3a7e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    3a80:	88 ee       	ldi	r24, 0xE8	; 232
    3a82:	93 e0       	ldi	r25, 0x03	; 3
    3a84:	a0 e0       	ldi	r26, 0x00	; 0
    3a86:	b0 e0       	ldi	r27, 0x00	; 0
    3a88:	84 83       	std	Z+4, r24	; 0x04
    3a8a:	95 83       	std	Z+5, r25	; 0x05
    3a8c:	a6 83       	std	Z+6, r26	; 0x06
    3a8e:	b7 83       	std	Z+7, r27	; 0x07
class Serial_ : public Stream
{
private:
	int peek_buffer;
public:
	Serial_() { peek_buffer = -1; };
    3a90:	8b e8       	ldi	r24, 0x8B	; 139
    3a92:	92 e0       	ldi	r25, 0x02	; 2
    3a94:	91 83       	std	Z+1, r25	; 0x01
    3a96:	80 83       	st	Z, r24
    3a98:	8f ef       	ldi	r24, 0xFF	; 255
    3a9a:	9f ef       	ldi	r25, 0xFF	; 255
    3a9c:	95 87       	std	Z+13, r25	; 0x0d
    3a9e:	84 87       	std	Z+12, r24	; 0x0c
    3aa0:	08 95       	ret

00003aa2 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3aa2:	08 95       	ret

00003aa4 <_ZN13PluggableUSB_12getInterfaceEPh>:
		_initEndpoints[lastEp] = node->endpointType[i];
		lastEp++;
	}
	return true;
	// restart USB layer???
}
    3aa4:	ef 92       	push	r14
    3aa6:	ff 92       	push	r15
    3aa8:	0f 93       	push	r16
    3aaa:	1f 93       	push	r17
    3aac:	cf 93       	push	r28
    3aae:	df 93       	push	r29
    3ab0:	7b 01       	movw	r14, r22
    3ab2:	fc 01       	movw	r30, r24
    3ab4:	c2 81       	ldd	r28, Z+2	; 0x02
    3ab6:	d3 81       	ldd	r29, Z+3	; 0x03
    3ab8:	00 e0       	ldi	r16, 0x00	; 0
    3aba:	10 e0       	ldi	r17, 0x00	; 0
    3abc:	20 97       	sbiw	r28, 0x00	; 0
    3abe:	81 f0       	breq	.+32     	; 0x3ae0 <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
    3ac0:	e8 81       	ld	r30, Y
    3ac2:	f9 81       	ldd	r31, Y+1	; 0x01
    3ac4:	02 80       	ldd	r0, Z+2	; 0x02
    3ac6:	f3 81       	ldd	r31, Z+3	; 0x03
    3ac8:	e0 2d       	mov	r30, r0
    3aca:	b7 01       	movw	r22, r14
    3acc:	ce 01       	movw	r24, r28
    3ace:	09 95       	icall
    3ad0:	97 fd       	sbrc	r25, 7
    3ad2:	08 c0       	rjmp	.+16     	; 0x3ae4 <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
    3ad4:	08 0f       	add	r16, r24
    3ad6:	19 1f       	adc	r17, r25
    3ad8:	08 84       	ldd	r0, Y+8	; 0x08
    3ada:	d9 85       	ldd	r29, Y+9	; 0x09
    3adc:	c0 2d       	mov	r28, r0
    3ade:	ee cf       	rjmp	.-36     	; 0x3abc <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    3ae0:	c8 01       	movw	r24, r16
    3ae2:	02 c0       	rjmp	.+4      	; 0x3ae8 <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
    3ae4:	8f ef       	ldi	r24, 0xFF	; 255
    3ae6:	9f ef       	ldi	r25, 0xFF	; 255
    3ae8:	df 91       	pop	r29
    3aea:	cf 91       	pop	r28
    3aec:	1f 91       	pop	r17
    3aee:	0f 91       	pop	r16
    3af0:	ff 90       	pop	r15
    3af2:	ef 90       	pop	r14
    3af4:	08 95       	ret

00003af6 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    3af6:	0f 93       	push	r16
    3af8:	1f 93       	push	r17
    3afa:	cf 93       	push	r28
    3afc:	df 93       	push	r29
    3afe:	8b 01       	movw	r16, r22
    3b00:	fc 01       	movw	r30, r24
    3b02:	c2 81       	ldd	r28, Z+2	; 0x02
    3b04:	d3 81       	ldd	r29, Z+3	; 0x03
    3b06:	20 97       	sbiw	r28, 0x00	; 0
    3b08:	71 f0       	breq	.+28     	; 0x3b26 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
    3b0a:	e8 81       	ld	r30, Y
    3b0c:	f9 81       	ldd	r31, Y+1	; 0x01
    3b0e:	04 80       	ldd	r0, Z+4	; 0x04
    3b10:	f5 81       	ldd	r31, Z+5	; 0x05
    3b12:	e0 2d       	mov	r30, r0
    3b14:	b8 01       	movw	r22, r16
    3b16:	ce 01       	movw	r24, r28
    3b18:	09 95       	icall
    3b1a:	00 97       	sbiw	r24, 0x00	; 0
    3b1c:	31 f4       	brne	.+12     	; 0x3b2a <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
    3b1e:	08 84       	ldd	r0, Y+8	; 0x08
    3b20:	d9 85       	ldd	r29, Y+9	; 0x09
    3b22:	c0 2d       	mov	r28, r0
    3b24:	f0 cf       	rjmp	.-32     	; 0x3b06 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
    3b26:	80 e0       	ldi	r24, 0x00	; 0
    3b28:	90 e0       	ldi	r25, 0x00	; 0
    3b2a:	df 91       	pop	r29
    3b2c:	cf 91       	pop	r28
    3b2e:	1f 91       	pop	r17
    3b30:	0f 91       	pop	r16
    3b32:	08 95       	ret

00003b34 <_ZN13PluggableUSB_12getShortNameEPc>:
    3b34:	0f 93       	push	r16
    3b36:	1f 93       	push	r17
    3b38:	cf 93       	push	r28
    3b3a:	df 93       	push	r29
    3b3c:	8b 01       	movw	r16, r22
    3b3e:	fc 01       	movw	r30, r24
    3b40:	c2 81       	ldd	r28, Z+2	; 0x02
    3b42:	d3 81       	ldd	r29, Z+3	; 0x03
    3b44:	20 97       	sbiw	r28, 0x00	; 0
    3b46:	71 f0       	breq	.+28     	; 0x3b64 <_ZN13PluggableUSB_12getShortNameEPc+0x30>
    3b48:	e8 81       	ld	r30, Y
    3b4a:	f9 81       	ldd	r31, Y+1	; 0x01
    3b4c:	06 80       	ldd	r0, Z+6	; 0x06
    3b4e:	f7 81       	ldd	r31, Z+7	; 0x07
    3b50:	e0 2d       	mov	r30, r0
    3b52:	b8 01       	movw	r22, r16
    3b54:	ce 01       	movw	r24, r28
    3b56:	09 95       	icall
    3b58:	08 0f       	add	r16, r24
    3b5a:	11 1d       	adc	r17, r1
    3b5c:	08 84       	ldd	r0, Y+8	; 0x08
    3b5e:	d9 85       	ldd	r29, Y+9	; 0x09
    3b60:	c0 2d       	mov	r28, r0
    3b62:	f0 cf       	rjmp	.-32     	; 0x3b44 <_ZN13PluggableUSB_12getShortNameEPc+0x10>
    3b64:	f8 01       	movw	r30, r16
    3b66:	10 82       	st	Z, r1
    3b68:	df 91       	pop	r29
    3b6a:	cf 91       	pop	r28
    3b6c:	1f 91       	pop	r17
    3b6e:	0f 91       	pop	r16
    3b70:	08 95       	ret

00003b72 <_ZN13PluggableUSB_5setupER8USBSetup>:
    3b72:	0f 93       	push	r16
    3b74:	1f 93       	push	r17
    3b76:	cf 93       	push	r28
    3b78:	df 93       	push	r29
    3b7a:	8b 01       	movw	r16, r22
    3b7c:	fc 01       	movw	r30, r24
    3b7e:	c2 81       	ldd	r28, Z+2	; 0x02
    3b80:	d3 81       	ldd	r29, Z+3	; 0x03
    3b82:	20 97       	sbiw	r28, 0x00	; 0
    3b84:	71 f0       	breq	.+28     	; 0x3ba2 <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
    3b86:	e8 81       	ld	r30, Y
    3b88:	f9 81       	ldd	r31, Y+1	; 0x01
    3b8a:	01 90       	ld	r0, Z+
    3b8c:	f0 81       	ld	r31, Z
    3b8e:	e0 2d       	mov	r30, r0
    3b90:	b8 01       	movw	r22, r16
    3b92:	ce 01       	movw	r24, r28
    3b94:	09 95       	icall
    3b96:	81 11       	cpse	r24, r1
    3b98:	05 c0       	rjmp	.+10     	; 0x3ba4 <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
    3b9a:	08 84       	ldd	r0, Y+8	; 0x08
    3b9c:	d9 85       	ldd	r29, Y+9	; 0x09
    3b9e:	c0 2d       	mov	r28, r0
    3ba0:	f0 cf       	rjmp	.-32     	; 0x3b82 <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
    3ba2:	80 e0       	ldi	r24, 0x00	; 0
    3ba4:	df 91       	pop	r29
    3ba6:	cf 91       	pop	r28
    3ba8:	1f 91       	pop	r17
    3baa:	0f 91       	pop	r16
    3bac:	08 95       	ret

00003bae <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    3bae:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <_ZGVZ12PluggableUSBvE3obj>
    3bb2:	81 11       	cpse	r24, r1
    3bb4:	0d c0       	rjmp	.+26     	; 0x3bd0 <_Z12PluggableUSBv+0x22>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    3bb6:	82 e0       	ldi	r24, 0x02	; 2
    3bb8:	80 93 f7 04 	sts	0x04F7, r24	; 0x8004f7 <_ZZ12PluggableUSBvE3obj>
    3bbc:	84 e0       	ldi	r24, 0x04	; 4
    3bbe:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <_ZZ12PluggableUSBvE3obj+0x1>
    3bc2:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <_ZZ12PluggableUSBvE3obj+0x3>
    3bc6:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <_ZZ12PluggableUSBvE3obj+0x2>
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    3bca:	81 e0       	ldi	r24, 0x01	; 1
    3bcc:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <_ZGVZ12PluggableUSBvE3obj>
	return obj;
}
    3bd0:	87 ef       	ldi	r24, 0xF7	; 247
    3bd2:	94 e0       	ldi	r25, 0x04	; 4
    3bd4:	08 95       	ret

00003bd6 <__divsf3>:
    3bd6:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <__divsf3x>
    3bda:	0c 94 ef 12 	jmp	0x25de	; 0x25de <__fp_round>
    3bde:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__fp_pscB>
    3be2:	58 f0       	brcs	.+22     	; 0x3bfa <__divsf3+0x24>
    3be4:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__fp_pscA>
    3be8:	40 f0       	brcs	.+16     	; 0x3bfa <__divsf3+0x24>
    3bea:	29 f4       	brne	.+10     	; 0x3bf6 <__divsf3+0x20>
    3bec:	5f 3f       	cpi	r21, 0xFF	; 255
    3bee:	29 f0       	breq	.+10     	; 0x3bfa <__divsf3+0x24>
    3bf0:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <__fp_inf>
    3bf4:	51 11       	cpse	r21, r1
    3bf6:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__fp_szero>
    3bfa:	0c 94 de 12 	jmp	0x25bc	; 0x25bc <__fp_nan>

00003bfe <__divsf3x>:
    3bfe:	0e 94 00 13 	call	0x2600	; 0x2600 <__fp_split3>
    3c02:	68 f3       	brcs	.-38     	; 0x3bde <__divsf3+0x8>

00003c04 <__divsf3_pse>:
    3c04:	99 23       	and	r25, r25
    3c06:	b1 f3       	breq	.-20     	; 0x3bf4 <__divsf3+0x1e>
    3c08:	55 23       	and	r21, r21
    3c0a:	91 f3       	breq	.-28     	; 0x3bf0 <__divsf3+0x1a>
    3c0c:	95 1b       	sub	r25, r21
    3c0e:	55 0b       	sbc	r21, r21
    3c10:	bb 27       	eor	r27, r27
    3c12:	aa 27       	eor	r26, r26
    3c14:	62 17       	cp	r22, r18
    3c16:	73 07       	cpc	r23, r19
    3c18:	84 07       	cpc	r24, r20
    3c1a:	38 f0       	brcs	.+14     	; 0x3c2a <__divsf3_pse+0x26>
    3c1c:	9f 5f       	subi	r25, 0xFF	; 255
    3c1e:	5f 4f       	sbci	r21, 0xFF	; 255
    3c20:	22 0f       	add	r18, r18
    3c22:	33 1f       	adc	r19, r19
    3c24:	44 1f       	adc	r20, r20
    3c26:	aa 1f       	adc	r26, r26
    3c28:	a9 f3       	breq	.-22     	; 0x3c14 <__divsf3_pse+0x10>
    3c2a:	35 d0       	rcall	.+106    	; 0x3c96 <__divsf3_pse+0x92>
    3c2c:	0e 2e       	mov	r0, r30
    3c2e:	3a f0       	brmi	.+14     	; 0x3c3e <__divsf3_pse+0x3a>
    3c30:	e0 e8       	ldi	r30, 0x80	; 128
    3c32:	32 d0       	rcall	.+100    	; 0x3c98 <__divsf3_pse+0x94>
    3c34:	91 50       	subi	r25, 0x01	; 1
    3c36:	50 40       	sbci	r21, 0x00	; 0
    3c38:	e6 95       	lsr	r30
    3c3a:	00 1c       	adc	r0, r0
    3c3c:	ca f7       	brpl	.-14     	; 0x3c30 <__divsf3_pse+0x2c>
    3c3e:	2b d0       	rcall	.+86     	; 0x3c96 <__divsf3_pse+0x92>
    3c40:	fe 2f       	mov	r31, r30
    3c42:	29 d0       	rcall	.+82     	; 0x3c96 <__divsf3_pse+0x92>
    3c44:	66 0f       	add	r22, r22
    3c46:	77 1f       	adc	r23, r23
    3c48:	88 1f       	adc	r24, r24
    3c4a:	bb 1f       	adc	r27, r27
    3c4c:	26 17       	cp	r18, r22
    3c4e:	37 07       	cpc	r19, r23
    3c50:	48 07       	cpc	r20, r24
    3c52:	ab 07       	cpc	r26, r27
    3c54:	b0 e8       	ldi	r27, 0x80	; 128
    3c56:	09 f0       	breq	.+2      	; 0x3c5a <__divsf3_pse+0x56>
    3c58:	bb 0b       	sbc	r27, r27
    3c5a:	80 2d       	mov	r24, r0
    3c5c:	bf 01       	movw	r22, r30
    3c5e:	ff 27       	eor	r31, r31
    3c60:	93 58       	subi	r25, 0x83	; 131
    3c62:	5f 4f       	sbci	r21, 0xFF	; 255
    3c64:	3a f0       	brmi	.+14     	; 0x3c74 <__divsf3_pse+0x70>
    3c66:	9e 3f       	cpi	r25, 0xFE	; 254
    3c68:	51 05       	cpc	r21, r1
    3c6a:	78 f0       	brcs	.+30     	; 0x3c8a <__divsf3_pse+0x86>
    3c6c:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <__fp_inf>
    3c70:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__fp_szero>
    3c74:	5f 3f       	cpi	r21, 0xFF	; 255
    3c76:	e4 f3       	brlt	.-8      	; 0x3c70 <__divsf3_pse+0x6c>
    3c78:	98 3e       	cpi	r25, 0xE8	; 232
    3c7a:	d4 f3       	brlt	.-12     	; 0x3c70 <__divsf3_pse+0x6c>
    3c7c:	86 95       	lsr	r24
    3c7e:	77 95       	ror	r23
    3c80:	67 95       	ror	r22
    3c82:	b7 95       	ror	r27
    3c84:	f7 95       	ror	r31
    3c86:	9f 5f       	subi	r25, 0xFF	; 255
    3c88:	c9 f7       	brne	.-14     	; 0x3c7c <__divsf3_pse+0x78>
    3c8a:	88 0f       	add	r24, r24
    3c8c:	91 1d       	adc	r25, r1
    3c8e:	96 95       	lsr	r25
    3c90:	87 95       	ror	r24
    3c92:	97 f9       	bld	r25, 7
    3c94:	08 95       	ret
    3c96:	e1 e0       	ldi	r30, 0x01	; 1
    3c98:	66 0f       	add	r22, r22
    3c9a:	77 1f       	adc	r23, r23
    3c9c:	88 1f       	adc	r24, r24
    3c9e:	bb 1f       	adc	r27, r27
    3ca0:	62 17       	cp	r22, r18
    3ca2:	73 07       	cpc	r23, r19
    3ca4:	84 07       	cpc	r24, r20
    3ca6:	ba 07       	cpc	r27, r26
    3ca8:	20 f0       	brcs	.+8      	; 0x3cb2 <__divsf3_pse+0xae>
    3caa:	62 1b       	sub	r22, r18
    3cac:	73 0b       	sbc	r23, r19
    3cae:	84 0b       	sbc	r24, r20
    3cb0:	ba 0b       	sbc	r27, r26
    3cb2:	ee 1f       	adc	r30, r30
    3cb4:	88 f7       	brcc	.-30     	; 0x3c98 <__divsf3_pse+0x94>
    3cb6:	e0 95       	com	r30
    3cb8:	08 95       	ret

00003cba <__fixunssfsi>:
    3cba:	0e 94 08 13 	call	0x2610	; 0x2610 <__fp_splitA>
    3cbe:	88 f0       	brcs	.+34     	; 0x3ce2 <__fixunssfsi+0x28>
    3cc0:	9f 57       	subi	r25, 0x7F	; 127
    3cc2:	98 f0       	brcs	.+38     	; 0x3cea <__fixunssfsi+0x30>
    3cc4:	b9 2f       	mov	r27, r25
    3cc6:	99 27       	eor	r25, r25
    3cc8:	b7 51       	subi	r27, 0x17	; 23
    3cca:	b0 f0       	brcs	.+44     	; 0x3cf8 <__fixunssfsi+0x3e>
    3ccc:	e1 f0       	breq	.+56     	; 0x3d06 <__fixunssfsi+0x4c>
    3cce:	66 0f       	add	r22, r22
    3cd0:	77 1f       	adc	r23, r23
    3cd2:	88 1f       	adc	r24, r24
    3cd4:	99 1f       	adc	r25, r25
    3cd6:	1a f0       	brmi	.+6      	; 0x3cde <__fixunssfsi+0x24>
    3cd8:	ba 95       	dec	r27
    3cda:	c9 f7       	brne	.-14     	; 0x3cce <__fixunssfsi+0x14>
    3cdc:	14 c0       	rjmp	.+40     	; 0x3d06 <__fixunssfsi+0x4c>
    3cde:	b1 30       	cpi	r27, 0x01	; 1
    3ce0:	91 f0       	breq	.+36     	; 0x3d06 <__fixunssfsi+0x4c>
    3ce2:	0e 94 22 13 	call	0x2644	; 0x2644 <__fp_zero>
    3ce6:	b1 e0       	ldi	r27, 0x01	; 1
    3ce8:	08 95       	ret
    3cea:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__fp_zero>
    3cee:	67 2f       	mov	r22, r23
    3cf0:	78 2f       	mov	r23, r24
    3cf2:	88 27       	eor	r24, r24
    3cf4:	b8 5f       	subi	r27, 0xF8	; 248
    3cf6:	39 f0       	breq	.+14     	; 0x3d06 <__fixunssfsi+0x4c>
    3cf8:	b9 3f       	cpi	r27, 0xF9	; 249
    3cfa:	cc f3       	brlt	.-14     	; 0x3cee <__fixunssfsi+0x34>
    3cfc:	86 95       	lsr	r24
    3cfe:	77 95       	ror	r23
    3d00:	67 95       	ror	r22
    3d02:	b3 95       	inc	r27
    3d04:	d9 f7       	brne	.-10     	; 0x3cfc <__fixunssfsi+0x42>
    3d06:	3e f4       	brtc	.+14     	; 0x3d16 <__fixunssfsi+0x5c>
    3d08:	90 95       	com	r25
    3d0a:	80 95       	com	r24
    3d0c:	70 95       	com	r23
    3d0e:	61 95       	neg	r22
    3d10:	7f 4f       	sbci	r23, 0xFF	; 255
    3d12:	8f 4f       	sbci	r24, 0xFF	; 255
    3d14:	9f 4f       	sbci	r25, 0xFF	; 255
    3d16:	08 95       	ret

00003d18 <__gesf2>:
    3d18:	0e 94 b4 12 	call	0x2568	; 0x2568 <__fp_cmp>
    3d1c:	08 f4       	brcc	.+2      	; 0x3d20 <__gesf2+0x8>
    3d1e:	8f ef       	ldi	r24, 0xFF	; 255
    3d20:	08 95       	ret

00003d22 <__unordsf2>:
    3d22:	0e 94 b4 12 	call	0x2568	; 0x2568 <__fp_cmp>
    3d26:	88 0b       	sbc	r24, r24
    3d28:	99 0b       	sbc	r25, r25
    3d2a:	08 95       	ret

00003d2c <__divmodhi4>:
    3d2c:	97 fb       	bst	r25, 7
    3d2e:	07 2e       	mov	r0, r23
    3d30:	16 f4       	brtc	.+4      	; 0x3d36 <__divmodhi4+0xa>
    3d32:	00 94       	com	r0
    3d34:	07 d0       	rcall	.+14     	; 0x3d44 <__divmodhi4_neg1>
    3d36:	77 fd       	sbrc	r23, 7
    3d38:	09 d0       	rcall	.+18     	; 0x3d4c <__divmodhi4_neg2>
    3d3a:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <__udivmodhi4>
    3d3e:	07 fc       	sbrc	r0, 7
    3d40:	05 d0       	rcall	.+10     	; 0x3d4c <__divmodhi4_neg2>
    3d42:	3e f4       	brtc	.+14     	; 0x3d52 <__divmodhi4_exit>

00003d44 <__divmodhi4_neg1>:
    3d44:	90 95       	com	r25
    3d46:	81 95       	neg	r24
    3d48:	9f 4f       	sbci	r25, 0xFF	; 255
    3d4a:	08 95       	ret

00003d4c <__divmodhi4_neg2>:
    3d4c:	70 95       	com	r23
    3d4e:	61 95       	neg	r22
    3d50:	7f 4f       	sbci	r23, 0xFF	; 255

00003d52 <__divmodhi4_exit>:
    3d52:	08 95       	ret

00003d54 <__udivmodsi4>:
    3d54:	a1 e2       	ldi	r26, 0x21	; 33
    3d56:	1a 2e       	mov	r1, r26
    3d58:	aa 1b       	sub	r26, r26
    3d5a:	bb 1b       	sub	r27, r27
    3d5c:	fd 01       	movw	r30, r26
    3d5e:	0d c0       	rjmp	.+26     	; 0x3d7a <__udivmodsi4_ep>

00003d60 <__udivmodsi4_loop>:
    3d60:	aa 1f       	adc	r26, r26
    3d62:	bb 1f       	adc	r27, r27
    3d64:	ee 1f       	adc	r30, r30
    3d66:	ff 1f       	adc	r31, r31
    3d68:	a2 17       	cp	r26, r18
    3d6a:	b3 07       	cpc	r27, r19
    3d6c:	e4 07       	cpc	r30, r20
    3d6e:	f5 07       	cpc	r31, r21
    3d70:	20 f0       	brcs	.+8      	; 0x3d7a <__udivmodsi4_ep>
    3d72:	a2 1b       	sub	r26, r18
    3d74:	b3 0b       	sbc	r27, r19
    3d76:	e4 0b       	sbc	r30, r20
    3d78:	f5 0b       	sbc	r31, r21

00003d7a <__udivmodsi4_ep>:
    3d7a:	66 1f       	adc	r22, r22
    3d7c:	77 1f       	adc	r23, r23
    3d7e:	88 1f       	adc	r24, r24
    3d80:	99 1f       	adc	r25, r25
    3d82:	1a 94       	dec	r1
    3d84:	69 f7       	brne	.-38     	; 0x3d60 <__udivmodsi4_loop>
    3d86:	60 95       	com	r22
    3d88:	70 95       	com	r23
    3d8a:	80 95       	com	r24
    3d8c:	90 95       	com	r25
    3d8e:	9b 01       	movw	r18, r22
    3d90:	ac 01       	movw	r20, r24
    3d92:	bd 01       	movw	r22, r26
    3d94:	cf 01       	movw	r24, r30
    3d96:	08 95       	ret

00003d98 <__tablejump2__>:
    3d98:	ee 0f       	add	r30, r30
    3d9a:	ff 1f       	adc	r31, r31
    3d9c:	05 90       	lpm	r0, Z+
    3d9e:	f4 91       	lpm	r31, Z
    3da0:	e0 2d       	mov	r30, r0
    3da2:	09 94       	ijmp

00003da4 <__udivmodhi4>:
    3da4:	aa 1b       	sub	r26, r26
    3da6:	bb 1b       	sub	r27, r27
    3da8:	51 e1       	ldi	r21, 0x11	; 17
    3daa:	07 c0       	rjmp	.+14     	; 0x3dba <__udivmodhi4_ep>

00003dac <__udivmodhi4_loop>:
    3dac:	aa 1f       	adc	r26, r26
    3dae:	bb 1f       	adc	r27, r27
    3db0:	a6 17       	cp	r26, r22
    3db2:	b7 07       	cpc	r27, r23
    3db4:	10 f0       	brcs	.+4      	; 0x3dba <__udivmodhi4_ep>
    3db6:	a6 1b       	sub	r26, r22
    3db8:	b7 0b       	sbc	r27, r23

00003dba <__udivmodhi4_ep>:
    3dba:	88 1f       	adc	r24, r24
    3dbc:	99 1f       	adc	r25, r25
    3dbe:	5a 95       	dec	r21
    3dc0:	a9 f7       	brne	.-22     	; 0x3dac <__udivmodhi4_loop>
    3dc2:	80 95       	com	r24
    3dc4:	90 95       	com	r25
    3dc6:	bc 01       	movw	r22, r24
    3dc8:	cd 01       	movw	r24, r26
    3dca:	08 95       	ret

00003dcc <malloc>:
    3dcc:	0f 93       	push	r16
    3dce:	1f 93       	push	r17
    3dd0:	cf 93       	push	r28
    3dd2:	df 93       	push	r29
    3dd4:	82 30       	cpi	r24, 0x02	; 2
    3dd6:	91 05       	cpc	r25, r1
    3dd8:	10 f4       	brcc	.+4      	; 0x3dde <malloc+0x12>
    3dda:	82 e0       	ldi	r24, 0x02	; 2
    3ddc:	90 e0       	ldi	r25, 0x00	; 0
    3dde:	e0 91 05 05 	lds	r30, 0x0505	; 0x800505 <__flp>
    3de2:	f0 91 06 05 	lds	r31, 0x0506	; 0x800506 <__flp+0x1>
    3de6:	20 e0       	ldi	r18, 0x00	; 0
    3de8:	30 e0       	ldi	r19, 0x00	; 0
    3dea:	a0 e0       	ldi	r26, 0x00	; 0
    3dec:	b0 e0       	ldi	r27, 0x00	; 0
    3dee:	30 97       	sbiw	r30, 0x00	; 0
    3df0:	19 f1       	breq	.+70     	; 0x3e38 <malloc+0x6c>
    3df2:	40 81       	ld	r20, Z
    3df4:	51 81       	ldd	r21, Z+1	; 0x01
    3df6:	02 81       	ldd	r16, Z+2	; 0x02
    3df8:	13 81       	ldd	r17, Z+3	; 0x03
    3dfa:	48 17       	cp	r20, r24
    3dfc:	59 07       	cpc	r21, r25
    3dfe:	c8 f0       	brcs	.+50     	; 0x3e32 <malloc+0x66>
    3e00:	84 17       	cp	r24, r20
    3e02:	95 07       	cpc	r25, r21
    3e04:	69 f4       	brne	.+26     	; 0x3e20 <malloc+0x54>
    3e06:	10 97       	sbiw	r26, 0x00	; 0
    3e08:	31 f0       	breq	.+12     	; 0x3e16 <malloc+0x4a>
    3e0a:	12 96       	adiw	r26, 0x02	; 2
    3e0c:	0c 93       	st	X, r16
    3e0e:	12 97       	sbiw	r26, 0x02	; 2
    3e10:	13 96       	adiw	r26, 0x03	; 3
    3e12:	1c 93       	st	X, r17
    3e14:	27 c0       	rjmp	.+78     	; 0x3e64 <malloc+0x98>
    3e16:	00 93 05 05 	sts	0x0505, r16	; 0x800505 <__flp>
    3e1a:	10 93 06 05 	sts	0x0506, r17	; 0x800506 <__flp+0x1>
    3e1e:	22 c0       	rjmp	.+68     	; 0x3e64 <malloc+0x98>
    3e20:	21 15       	cp	r18, r1
    3e22:	31 05       	cpc	r19, r1
    3e24:	19 f0       	breq	.+6      	; 0x3e2c <malloc+0x60>
    3e26:	42 17       	cp	r20, r18
    3e28:	53 07       	cpc	r21, r19
    3e2a:	18 f4       	brcc	.+6      	; 0x3e32 <malloc+0x66>
    3e2c:	9a 01       	movw	r18, r20
    3e2e:	bd 01       	movw	r22, r26
    3e30:	ef 01       	movw	r28, r30
    3e32:	df 01       	movw	r26, r30
    3e34:	f8 01       	movw	r30, r16
    3e36:	db cf       	rjmp	.-74     	; 0x3dee <malloc+0x22>
    3e38:	21 15       	cp	r18, r1
    3e3a:	31 05       	cpc	r19, r1
    3e3c:	f9 f0       	breq	.+62     	; 0x3e7c <malloc+0xb0>
    3e3e:	28 1b       	sub	r18, r24
    3e40:	39 0b       	sbc	r19, r25
    3e42:	24 30       	cpi	r18, 0x04	; 4
    3e44:	31 05       	cpc	r19, r1
    3e46:	80 f4       	brcc	.+32     	; 0x3e68 <malloc+0x9c>
    3e48:	8a 81       	ldd	r24, Y+2	; 0x02
    3e4a:	9b 81       	ldd	r25, Y+3	; 0x03
    3e4c:	61 15       	cp	r22, r1
    3e4e:	71 05       	cpc	r23, r1
    3e50:	21 f0       	breq	.+8      	; 0x3e5a <malloc+0x8e>
    3e52:	fb 01       	movw	r30, r22
    3e54:	93 83       	std	Z+3, r25	; 0x03
    3e56:	82 83       	std	Z+2, r24	; 0x02
    3e58:	04 c0       	rjmp	.+8      	; 0x3e62 <malloc+0x96>
    3e5a:	90 93 06 05 	sts	0x0506, r25	; 0x800506 <__flp+0x1>
    3e5e:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <__flp>
    3e62:	fe 01       	movw	r30, r28
    3e64:	32 96       	adiw	r30, 0x02	; 2
    3e66:	44 c0       	rjmp	.+136    	; 0x3ef0 <malloc+0x124>
    3e68:	fe 01       	movw	r30, r28
    3e6a:	e2 0f       	add	r30, r18
    3e6c:	f3 1f       	adc	r31, r19
    3e6e:	81 93       	st	Z+, r24
    3e70:	91 93       	st	Z+, r25
    3e72:	22 50       	subi	r18, 0x02	; 2
    3e74:	31 09       	sbc	r19, r1
    3e76:	39 83       	std	Y+1, r19	; 0x01
    3e78:	28 83       	st	Y, r18
    3e7a:	3a c0       	rjmp	.+116    	; 0x3ef0 <malloc+0x124>
    3e7c:	20 91 03 05 	lds	r18, 0x0503	; 0x800503 <__brkval>
    3e80:	30 91 04 05 	lds	r19, 0x0504	; 0x800504 <__brkval+0x1>
    3e84:	23 2b       	or	r18, r19
    3e86:	41 f4       	brne	.+16     	; 0x3e98 <malloc+0xcc>
    3e88:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3e8c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3e90:	30 93 04 05 	sts	0x0504, r19	; 0x800504 <__brkval+0x1>
    3e94:	20 93 03 05 	sts	0x0503, r18	; 0x800503 <__brkval>
    3e98:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3e9c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3ea0:	21 15       	cp	r18, r1
    3ea2:	31 05       	cpc	r19, r1
    3ea4:	41 f4       	brne	.+16     	; 0x3eb6 <malloc+0xea>
    3ea6:	2d b7       	in	r18, 0x3d	; 61
    3ea8:	3e b7       	in	r19, 0x3e	; 62
    3eaa:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3eae:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3eb2:	24 1b       	sub	r18, r20
    3eb4:	35 0b       	sbc	r19, r21
    3eb6:	e0 91 03 05 	lds	r30, 0x0503	; 0x800503 <__brkval>
    3eba:	f0 91 04 05 	lds	r31, 0x0504	; 0x800504 <__brkval+0x1>
    3ebe:	e2 17       	cp	r30, r18
    3ec0:	f3 07       	cpc	r31, r19
    3ec2:	a0 f4       	brcc	.+40     	; 0x3eec <malloc+0x120>
    3ec4:	2e 1b       	sub	r18, r30
    3ec6:	3f 0b       	sbc	r19, r31
    3ec8:	28 17       	cp	r18, r24
    3eca:	39 07       	cpc	r19, r25
    3ecc:	78 f0       	brcs	.+30     	; 0x3eec <malloc+0x120>
    3ece:	ac 01       	movw	r20, r24
    3ed0:	4e 5f       	subi	r20, 0xFE	; 254
    3ed2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ed4:	24 17       	cp	r18, r20
    3ed6:	35 07       	cpc	r19, r21
    3ed8:	48 f0       	brcs	.+18     	; 0x3eec <malloc+0x120>
    3eda:	4e 0f       	add	r20, r30
    3edc:	5f 1f       	adc	r21, r31
    3ede:	50 93 04 05 	sts	0x0504, r21	; 0x800504 <__brkval+0x1>
    3ee2:	40 93 03 05 	sts	0x0503, r20	; 0x800503 <__brkval>
    3ee6:	81 93       	st	Z+, r24
    3ee8:	91 93       	st	Z+, r25
    3eea:	02 c0       	rjmp	.+4      	; 0x3ef0 <malloc+0x124>
    3eec:	e0 e0       	ldi	r30, 0x00	; 0
    3eee:	f0 e0       	ldi	r31, 0x00	; 0
    3ef0:	cf 01       	movw	r24, r30
    3ef2:	df 91       	pop	r29
    3ef4:	cf 91       	pop	r28
    3ef6:	1f 91       	pop	r17
    3ef8:	0f 91       	pop	r16
    3efa:	08 95       	ret

00003efc <free>:
    3efc:	cf 93       	push	r28
    3efe:	df 93       	push	r29
    3f00:	00 97       	sbiw	r24, 0x00	; 0
    3f02:	09 f4       	brne	.+2      	; 0x3f06 <free+0xa>
    3f04:	81 c0       	rjmp	.+258    	; 0x4008 <free+0x10c>
    3f06:	fc 01       	movw	r30, r24
    3f08:	32 97       	sbiw	r30, 0x02	; 2
    3f0a:	13 82       	std	Z+3, r1	; 0x03
    3f0c:	12 82       	std	Z+2, r1	; 0x02
    3f0e:	a0 91 05 05 	lds	r26, 0x0505	; 0x800505 <__flp>
    3f12:	b0 91 06 05 	lds	r27, 0x0506	; 0x800506 <__flp+0x1>
    3f16:	10 97       	sbiw	r26, 0x00	; 0
    3f18:	81 f4       	brne	.+32     	; 0x3f3a <free+0x3e>
    3f1a:	20 81       	ld	r18, Z
    3f1c:	31 81       	ldd	r19, Z+1	; 0x01
    3f1e:	82 0f       	add	r24, r18
    3f20:	93 1f       	adc	r25, r19
    3f22:	20 91 03 05 	lds	r18, 0x0503	; 0x800503 <__brkval>
    3f26:	30 91 04 05 	lds	r19, 0x0504	; 0x800504 <__brkval+0x1>
    3f2a:	28 17       	cp	r18, r24
    3f2c:	39 07       	cpc	r19, r25
    3f2e:	51 f5       	brne	.+84     	; 0x3f84 <free+0x88>
    3f30:	f0 93 04 05 	sts	0x0504, r31	; 0x800504 <__brkval+0x1>
    3f34:	e0 93 03 05 	sts	0x0503, r30	; 0x800503 <__brkval>
    3f38:	67 c0       	rjmp	.+206    	; 0x4008 <free+0x10c>
    3f3a:	ed 01       	movw	r28, r26
    3f3c:	20 e0       	ldi	r18, 0x00	; 0
    3f3e:	30 e0       	ldi	r19, 0x00	; 0
    3f40:	ce 17       	cp	r28, r30
    3f42:	df 07       	cpc	r29, r31
    3f44:	40 f4       	brcc	.+16     	; 0x3f56 <free+0x5a>
    3f46:	4a 81       	ldd	r20, Y+2	; 0x02
    3f48:	5b 81       	ldd	r21, Y+3	; 0x03
    3f4a:	9e 01       	movw	r18, r28
    3f4c:	41 15       	cp	r20, r1
    3f4e:	51 05       	cpc	r21, r1
    3f50:	f1 f0       	breq	.+60     	; 0x3f8e <free+0x92>
    3f52:	ea 01       	movw	r28, r20
    3f54:	f5 cf       	rjmp	.-22     	; 0x3f40 <free+0x44>
    3f56:	d3 83       	std	Z+3, r29	; 0x03
    3f58:	c2 83       	std	Z+2, r28	; 0x02
    3f5a:	40 81       	ld	r20, Z
    3f5c:	51 81       	ldd	r21, Z+1	; 0x01
    3f5e:	84 0f       	add	r24, r20
    3f60:	95 1f       	adc	r25, r21
    3f62:	c8 17       	cp	r28, r24
    3f64:	d9 07       	cpc	r29, r25
    3f66:	59 f4       	brne	.+22     	; 0x3f7e <free+0x82>
    3f68:	88 81       	ld	r24, Y
    3f6a:	99 81       	ldd	r25, Y+1	; 0x01
    3f6c:	84 0f       	add	r24, r20
    3f6e:	95 1f       	adc	r25, r21
    3f70:	02 96       	adiw	r24, 0x02	; 2
    3f72:	91 83       	std	Z+1, r25	; 0x01
    3f74:	80 83       	st	Z, r24
    3f76:	8a 81       	ldd	r24, Y+2	; 0x02
    3f78:	9b 81       	ldd	r25, Y+3	; 0x03
    3f7a:	93 83       	std	Z+3, r25	; 0x03
    3f7c:	82 83       	std	Z+2, r24	; 0x02
    3f7e:	21 15       	cp	r18, r1
    3f80:	31 05       	cpc	r19, r1
    3f82:	29 f4       	brne	.+10     	; 0x3f8e <free+0x92>
    3f84:	f0 93 06 05 	sts	0x0506, r31	; 0x800506 <__flp+0x1>
    3f88:	e0 93 05 05 	sts	0x0505, r30	; 0x800505 <__flp>
    3f8c:	3d c0       	rjmp	.+122    	; 0x4008 <free+0x10c>
    3f8e:	e9 01       	movw	r28, r18
    3f90:	fb 83       	std	Y+3, r31	; 0x03
    3f92:	ea 83       	std	Y+2, r30	; 0x02
    3f94:	49 91       	ld	r20, Y+
    3f96:	59 91       	ld	r21, Y+
    3f98:	c4 0f       	add	r28, r20
    3f9a:	d5 1f       	adc	r29, r21
    3f9c:	ec 17       	cp	r30, r28
    3f9e:	fd 07       	cpc	r31, r29
    3fa0:	61 f4       	brne	.+24     	; 0x3fba <free+0xbe>
    3fa2:	80 81       	ld	r24, Z
    3fa4:	91 81       	ldd	r25, Z+1	; 0x01
    3fa6:	84 0f       	add	r24, r20
    3fa8:	95 1f       	adc	r25, r21
    3faa:	02 96       	adiw	r24, 0x02	; 2
    3fac:	e9 01       	movw	r28, r18
    3fae:	99 83       	std	Y+1, r25	; 0x01
    3fb0:	88 83       	st	Y, r24
    3fb2:	82 81       	ldd	r24, Z+2	; 0x02
    3fb4:	93 81       	ldd	r25, Z+3	; 0x03
    3fb6:	9b 83       	std	Y+3, r25	; 0x03
    3fb8:	8a 83       	std	Y+2, r24	; 0x02
    3fba:	e0 e0       	ldi	r30, 0x00	; 0
    3fbc:	f0 e0       	ldi	r31, 0x00	; 0
    3fbe:	12 96       	adiw	r26, 0x02	; 2
    3fc0:	8d 91       	ld	r24, X+
    3fc2:	9c 91       	ld	r25, X
    3fc4:	13 97       	sbiw	r26, 0x03	; 3
    3fc6:	00 97       	sbiw	r24, 0x00	; 0
    3fc8:	19 f0       	breq	.+6      	; 0x3fd0 <free+0xd4>
    3fca:	fd 01       	movw	r30, r26
    3fcc:	dc 01       	movw	r26, r24
    3fce:	f7 cf       	rjmp	.-18     	; 0x3fbe <free+0xc2>
    3fd0:	8d 91       	ld	r24, X+
    3fd2:	9c 91       	ld	r25, X
    3fd4:	11 97       	sbiw	r26, 0x01	; 1
    3fd6:	9d 01       	movw	r18, r26
    3fd8:	2e 5f       	subi	r18, 0xFE	; 254
    3fda:	3f 4f       	sbci	r19, 0xFF	; 255
    3fdc:	82 0f       	add	r24, r18
    3fde:	93 1f       	adc	r25, r19
    3fe0:	20 91 03 05 	lds	r18, 0x0503	; 0x800503 <__brkval>
    3fe4:	30 91 04 05 	lds	r19, 0x0504	; 0x800504 <__brkval+0x1>
    3fe8:	28 17       	cp	r18, r24
    3fea:	39 07       	cpc	r19, r25
    3fec:	69 f4       	brne	.+26     	; 0x4008 <free+0x10c>
    3fee:	30 97       	sbiw	r30, 0x00	; 0
    3ff0:	29 f4       	brne	.+10     	; 0x3ffc <free+0x100>
    3ff2:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <__flp+0x1>
    3ff6:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <__flp>
    3ffa:	02 c0       	rjmp	.+4      	; 0x4000 <free+0x104>
    3ffc:	13 82       	std	Z+3, r1	; 0x03
    3ffe:	12 82       	std	Z+2, r1	; 0x02
    4000:	b0 93 04 05 	sts	0x0504, r27	; 0x800504 <__brkval+0x1>
    4004:	a0 93 03 05 	sts	0x0503, r26	; 0x800503 <__brkval>
    4008:	df 91       	pop	r29
    400a:	cf 91       	pop	r28
    400c:	08 95       	ret

0000400e <realloc>:
    400e:	a0 e0       	ldi	r26, 0x00	; 0
    4010:	b0 e0       	ldi	r27, 0x00	; 0
    4012:	ed e0       	ldi	r30, 0x0D	; 13
    4014:	f0 e2       	ldi	r31, 0x20	; 32
    4016:	0c 94 e6 20 	jmp	0x41cc	; 0x41cc <__prologue_saves__+0x8>
    401a:	ec 01       	movw	r28, r24
    401c:	00 97       	sbiw	r24, 0x00	; 0
    401e:	21 f4       	brne	.+8      	; 0x4028 <realloc+0x1a>
    4020:	cb 01       	movw	r24, r22
    4022:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <malloc>
    4026:	b4 c0       	rjmp	.+360    	; 0x4190 <realloc+0x182>
    4028:	fc 01       	movw	r30, r24
    402a:	e6 0f       	add	r30, r22
    402c:	f7 1f       	adc	r31, r23
    402e:	9c 01       	movw	r18, r24
    4030:	22 50       	subi	r18, 0x02	; 2
    4032:	31 09       	sbc	r19, r1
    4034:	e2 17       	cp	r30, r18
    4036:	f3 07       	cpc	r31, r19
    4038:	08 f4       	brcc	.+2      	; 0x403c <realloc+0x2e>
    403a:	a8 c0       	rjmp	.+336    	; 0x418c <realloc+0x17e>
    403c:	d9 01       	movw	r26, r18
    403e:	0d 91       	ld	r16, X+
    4040:	1c 91       	ld	r17, X
    4042:	11 97       	sbiw	r26, 0x01	; 1
    4044:	06 17       	cp	r16, r22
    4046:	17 07       	cpc	r17, r23
    4048:	b0 f0       	brcs	.+44     	; 0x4076 <realloc+0x68>
    404a:	05 30       	cpi	r16, 0x05	; 5
    404c:	11 05       	cpc	r17, r1
    404e:	08 f4       	brcc	.+2      	; 0x4052 <realloc+0x44>
    4050:	9b c0       	rjmp	.+310    	; 0x4188 <realloc+0x17a>
    4052:	c8 01       	movw	r24, r16
    4054:	04 97       	sbiw	r24, 0x04	; 4
    4056:	86 17       	cp	r24, r22
    4058:	97 07       	cpc	r25, r23
    405a:	08 f4       	brcc	.+2      	; 0x405e <realloc+0x50>
    405c:	95 c0       	rjmp	.+298    	; 0x4188 <realloc+0x17a>
    405e:	02 50       	subi	r16, 0x02	; 2
    4060:	11 09       	sbc	r17, r1
    4062:	06 1b       	sub	r16, r22
    4064:	17 0b       	sbc	r17, r23
    4066:	01 93       	st	Z+, r16
    4068:	11 93       	st	Z+, r17
    406a:	6d 93       	st	X+, r22
    406c:	7c 93       	st	X, r23
    406e:	cf 01       	movw	r24, r30
    4070:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <free>
    4074:	89 c0       	rjmp	.+274    	; 0x4188 <realloc+0x17a>
    4076:	5b 01       	movw	r10, r22
    4078:	a0 1a       	sub	r10, r16
    407a:	b1 0a       	sbc	r11, r17
    407c:	4c 01       	movw	r8, r24
    407e:	80 0e       	add	r8, r16
    4080:	91 1e       	adc	r9, r17
    4082:	a0 91 05 05 	lds	r26, 0x0505	; 0x800505 <__flp>
    4086:	b0 91 06 05 	lds	r27, 0x0506	; 0x800506 <__flp+0x1>
    408a:	61 2c       	mov	r6, r1
    408c:	71 2c       	mov	r7, r1
    408e:	e1 2c       	mov	r14, r1
    4090:	f1 2c       	mov	r15, r1
    4092:	10 97       	sbiw	r26, 0x00	; 0
    4094:	09 f4       	brne	.+2      	; 0x4098 <realloc+0x8a>
    4096:	46 c0       	rjmp	.+140    	; 0x4124 <realloc+0x116>
    4098:	8d 91       	ld	r24, X+
    409a:	9c 91       	ld	r25, X
    409c:	11 97       	sbiw	r26, 0x01	; 1
    409e:	a8 15       	cp	r26, r8
    40a0:	b9 05       	cpc	r27, r9
    40a2:	b1 f5       	brne	.+108    	; 0x4110 <realloc+0x102>
    40a4:	6c 01       	movw	r12, r24
    40a6:	42 e0       	ldi	r20, 0x02	; 2
    40a8:	c4 0e       	add	r12, r20
    40aa:	d1 1c       	adc	r13, r1
    40ac:	ca 14       	cp	r12, r10
    40ae:	db 04       	cpc	r13, r11
    40b0:	78 f1       	brcs	.+94     	; 0x4110 <realloc+0x102>
    40b2:	4c 01       	movw	r8, r24
    40b4:	8a 18       	sub	r8, r10
    40b6:	9b 08       	sbc	r9, r11
    40b8:	64 01       	movw	r12, r8
    40ba:	42 e0       	ldi	r20, 0x02	; 2
    40bc:	c4 0e       	add	r12, r20
    40be:	d1 1c       	adc	r13, r1
    40c0:	12 96       	adiw	r26, 0x02	; 2
    40c2:	bc 90       	ld	r11, X
    40c4:	12 97       	sbiw	r26, 0x02	; 2
    40c6:	13 96       	adiw	r26, 0x03	; 3
    40c8:	ac 91       	ld	r26, X
    40ca:	b5 e0       	ldi	r27, 0x05	; 5
    40cc:	cb 16       	cp	r12, r27
    40ce:	d1 04       	cpc	r13, r1
    40d0:	40 f0       	brcs	.+16     	; 0x40e2 <realloc+0xd4>
    40d2:	b2 82       	std	Z+2, r11	; 0x02
    40d4:	a3 83       	std	Z+3, r26	; 0x03
    40d6:	91 82       	std	Z+1, r9	; 0x01
    40d8:	80 82       	st	Z, r8
    40da:	d9 01       	movw	r26, r18
    40dc:	6d 93       	st	X+, r22
    40de:	7c 93       	st	X, r23
    40e0:	09 c0       	rjmp	.+18     	; 0x40f4 <realloc+0xe6>
    40e2:	0e 5f       	subi	r16, 0xFE	; 254
    40e4:	1f 4f       	sbci	r17, 0xFF	; 255
    40e6:	80 0f       	add	r24, r16
    40e8:	91 1f       	adc	r25, r17
    40ea:	f9 01       	movw	r30, r18
    40ec:	91 83       	std	Z+1, r25	; 0x01
    40ee:	80 83       	st	Z, r24
    40f0:	eb 2d       	mov	r30, r11
    40f2:	fa 2f       	mov	r31, r26
    40f4:	e1 14       	cp	r14, r1
    40f6:	f1 04       	cpc	r15, r1
    40f8:	31 f0       	breq	.+12     	; 0x4106 <realloc+0xf8>
    40fa:	d7 01       	movw	r26, r14
    40fc:	13 96       	adiw	r26, 0x03	; 3
    40fe:	fc 93       	st	X, r31
    4100:	ee 93       	st	-X, r30
    4102:	12 97       	sbiw	r26, 0x02	; 2
    4104:	41 c0       	rjmp	.+130    	; 0x4188 <realloc+0x17a>
    4106:	f0 93 06 05 	sts	0x0506, r31	; 0x800506 <__flp+0x1>
    410a:	e0 93 05 05 	sts	0x0505, r30	; 0x800505 <__flp>
    410e:	3c c0       	rjmp	.+120    	; 0x4188 <realloc+0x17a>
    4110:	68 16       	cp	r6, r24
    4112:	79 06       	cpc	r7, r25
    4114:	08 f4       	brcc	.+2      	; 0x4118 <realloc+0x10a>
    4116:	3c 01       	movw	r6, r24
    4118:	7d 01       	movw	r14, r26
    411a:	12 96       	adiw	r26, 0x02	; 2
    411c:	0d 90       	ld	r0, X+
    411e:	bc 91       	ld	r27, X
    4120:	a0 2d       	mov	r26, r0
    4122:	b7 cf       	rjmp	.-146    	; 0x4092 <realloc+0x84>
    4124:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <__brkval>
    4128:	90 91 04 05 	lds	r25, 0x0504	; 0x800504 <__brkval+0x1>
    412c:	88 16       	cp	r8, r24
    412e:	99 06       	cpc	r9, r25
    4130:	e1 f4       	brne	.+56     	; 0x416a <realloc+0x15c>
    4132:	66 16       	cp	r6, r22
    4134:	77 06       	cpc	r7, r23
    4136:	c8 f4       	brcc	.+50     	; 0x416a <realloc+0x15c>
    4138:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    413c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    4140:	00 97       	sbiw	r24, 0x00	; 0
    4142:	41 f4       	brne	.+16     	; 0x4154 <realloc+0x146>
    4144:	8d b7       	in	r24, 0x3d	; 61
    4146:	9e b7       	in	r25, 0x3e	; 62
    4148:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    414c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4150:	84 1b       	sub	r24, r20
    4152:	95 0b       	sbc	r25, r21
    4154:	e8 17       	cp	r30, r24
    4156:	f9 07       	cpc	r31, r25
    4158:	c8 f4       	brcc	.+50     	; 0x418c <realloc+0x17e>
    415a:	f0 93 04 05 	sts	0x0504, r31	; 0x800504 <__brkval+0x1>
    415e:	e0 93 03 05 	sts	0x0503, r30	; 0x800503 <__brkval>
    4162:	f9 01       	movw	r30, r18
    4164:	71 83       	std	Z+1, r23	; 0x01
    4166:	60 83       	st	Z, r22
    4168:	0f c0       	rjmp	.+30     	; 0x4188 <realloc+0x17a>
    416a:	cb 01       	movw	r24, r22
    416c:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <malloc>
    4170:	7c 01       	movw	r14, r24
    4172:	00 97       	sbiw	r24, 0x00	; 0
    4174:	59 f0       	breq	.+22     	; 0x418c <realloc+0x17e>
    4176:	a8 01       	movw	r20, r16
    4178:	be 01       	movw	r22, r28
    417a:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <memcpy>
    417e:	ce 01       	movw	r24, r28
    4180:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <free>
    4184:	c7 01       	movw	r24, r14
    4186:	04 c0       	rjmp	.+8      	; 0x4190 <realloc+0x182>
    4188:	ce 01       	movw	r24, r28
    418a:	02 c0       	rjmp	.+4      	; 0x4190 <realloc+0x182>
    418c:	80 e0       	ldi	r24, 0x00	; 0
    418e:	90 e0       	ldi	r25, 0x00	; 0
    4190:	cd b7       	in	r28, 0x3d	; 61
    4192:	de b7       	in	r29, 0x3e	; 62
    4194:	ee e0       	ldi	r30, 0x0E	; 14
    4196:	0c 94 02 21 	jmp	0x4204	; 0x4204 <__epilogue_restores__+0x8>

0000419a <abort>:
    419a:	81 e0       	ldi	r24, 0x01	; 1
    419c:	90 e0       	ldi	r25, 0x00	; 0
    419e:	f8 94       	cli
    41a0:	0c 94 19 21 	jmp	0x4232	; 0x4232 <__do_global_dtors>

000041a4 <memcpy>:
    41a4:	fb 01       	movw	r30, r22
    41a6:	dc 01       	movw	r26, r24
    41a8:	02 c0       	rjmp	.+4      	; 0x41ae <memcpy+0xa>
    41aa:	01 90       	ld	r0, Z+
    41ac:	0d 92       	st	X+, r0
    41ae:	41 50       	subi	r20, 0x01	; 1
    41b0:	50 40       	sbci	r21, 0x00	; 0
    41b2:	d8 f7       	brcc	.-10     	; 0x41aa <memcpy+0x6>
    41b4:	08 95       	ret

000041b6 <strcpy>:
    41b6:	fb 01       	movw	r30, r22
    41b8:	dc 01       	movw	r26, r24
    41ba:	01 90       	ld	r0, Z+
    41bc:	0d 92       	st	X+, r0
    41be:	00 20       	and	r0, r0
    41c0:	e1 f7       	brne	.-8      	; 0x41ba <strcpy+0x4>
    41c2:	08 95       	ret

000041c4 <__prologue_saves__>:
    41c4:	2f 92       	push	r2
    41c6:	3f 92       	push	r3
    41c8:	4f 92       	push	r4
    41ca:	5f 92       	push	r5
    41cc:	6f 92       	push	r6
    41ce:	7f 92       	push	r7
    41d0:	8f 92       	push	r8
    41d2:	9f 92       	push	r9
    41d4:	af 92       	push	r10
    41d6:	bf 92       	push	r11
    41d8:	cf 92       	push	r12
    41da:	df 92       	push	r13
    41dc:	ef 92       	push	r14
    41de:	ff 92       	push	r15
    41e0:	0f 93       	push	r16
    41e2:	1f 93       	push	r17
    41e4:	cf 93       	push	r28
    41e6:	df 93       	push	r29
    41e8:	cd b7       	in	r28, 0x3d	; 61
    41ea:	de b7       	in	r29, 0x3e	; 62
    41ec:	ca 1b       	sub	r28, r26
    41ee:	db 0b       	sbc	r29, r27
    41f0:	0f b6       	in	r0, 0x3f	; 63
    41f2:	f8 94       	cli
    41f4:	de bf       	out	0x3e, r29	; 62
    41f6:	0f be       	out	0x3f, r0	; 63
    41f8:	cd bf       	out	0x3d, r28	; 61
    41fa:	09 94       	ijmp

000041fc <__epilogue_restores__>:
    41fc:	2a 88       	ldd	r2, Y+18	; 0x12
    41fe:	39 88       	ldd	r3, Y+17	; 0x11
    4200:	48 88       	ldd	r4, Y+16	; 0x10
    4202:	5f 84       	ldd	r5, Y+15	; 0x0f
    4204:	6e 84       	ldd	r6, Y+14	; 0x0e
    4206:	7d 84       	ldd	r7, Y+13	; 0x0d
    4208:	8c 84       	ldd	r8, Y+12	; 0x0c
    420a:	9b 84       	ldd	r9, Y+11	; 0x0b
    420c:	aa 84       	ldd	r10, Y+10	; 0x0a
    420e:	b9 84       	ldd	r11, Y+9	; 0x09
    4210:	c8 84       	ldd	r12, Y+8	; 0x08
    4212:	df 80       	ldd	r13, Y+7	; 0x07
    4214:	ee 80       	ldd	r14, Y+6	; 0x06
    4216:	fd 80       	ldd	r15, Y+5	; 0x05
    4218:	0c 81       	ldd	r16, Y+4	; 0x04
    421a:	1b 81       	ldd	r17, Y+3	; 0x03
    421c:	aa 81       	ldd	r26, Y+2	; 0x02
    421e:	b9 81       	ldd	r27, Y+1	; 0x01
    4220:	ce 0f       	add	r28, r30
    4222:	d1 1d       	adc	r29, r1
    4224:	0f b6       	in	r0, 0x3f	; 63
    4226:	f8 94       	cli
    4228:	de bf       	out	0x3e, r29	; 62
    422a:	0f be       	out	0x3f, r0	; 63
    422c:	cd bf       	out	0x3d, r28	; 61
    422e:	ed 01       	movw	r28, r26
    4230:	08 95       	ret

00004232 <__do_global_dtors>:
    4232:	10 e0       	ldi	r17, 0x00	; 0
    4234:	cc ee       	ldi	r28, 0xEC	; 236
    4236:	d0 e0       	ldi	r29, 0x00	; 0
    4238:	04 c0       	rjmp	.+8      	; 0x4242 <__do_global_dtors+0x10>
    423a:	fe 01       	movw	r30, r28
    423c:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <__tablejump2__>
    4240:	21 96       	adiw	r28, 0x01	; 1
    4242:	cd 3e       	cpi	r28, 0xED	; 237
    4244:	d1 07       	cpc	r29, r17
    4246:	c9 f7       	brne	.-14     	; 0x423a <__do_global_dtors+0x8>
    4248:	f8 94       	cli

0000424a <__stop_program>:
    424a:	ff cf       	rjmp	.-2      	; 0x424a <__stop_program>
