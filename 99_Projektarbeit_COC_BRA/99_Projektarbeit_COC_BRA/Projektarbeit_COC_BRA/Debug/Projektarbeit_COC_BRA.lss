
Projektarbeit_COC_BRA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000244  00800100  00005a70  00005b04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005a70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003b9  00800344  00800344  00005d48  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005d48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005d78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000d30  00000000  00000000  00005db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001e0d1  00000000  00000000  00006ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004db3  00000000  00000000  00024bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000076e2  00000000  00000000  0002996c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002c68  00000000  00000000  00031050  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000057ab  00000000  00000000  00033cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000eba2  00000000  00000000  00039463  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000df8  00000000  00000000  00048005  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__dtors_end>
       4:	0c 94 9c 25 	jmp	0x4b38	; 0x4b38 <__vector_1>
       8:	0c 94 c3 25 	jmp	0x4b86	; 0x4b86 <__vector_2>
       c:	0c 94 ea 25 	jmp	0x4bd4	; 0x4bd4 <__vector_3>
      10:	0c 94 11 26 	jmp	0x4c22	; 0x4c22 <__vector_4>
      14:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      18:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      1c:	0c 94 38 26 	jmp	0x4c70	; 0x4c70 <__vector_7>
      20:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      24:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      28:	0c 94 b7 24 	jmp	0x496e	; 0x496e <__vector_10>
      2c:	0c 94 53 23 	jmp	0x46a6	; 0x46a6 <__vector_11>
      30:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      34:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      38:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      3c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      40:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      44:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      48:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      4c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      50:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      54:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      58:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      5c:	0c 94 5f 26 	jmp	0x4cbe	; 0x4cbe <__vector_23>
      60:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      64:	0c 94 91 1e 	jmp	0x3d22	; 0x3d22 <__vector_25>
      68:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <__vector_26>
      6c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      70:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      74:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      78:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      7c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      80:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      84:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      88:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      8c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      90:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__vector_36>
      94:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      98:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      9c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      a0:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      a4:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      a8:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      ac:	cf 27       	eor	r28, r31
      ae:	d4 27       	eor	r29, r20
      b0:	d9 27       	eor	r29, r25
      b2:	e3 27       	eor	r30, r19
      b4:	ed 27       	eor	r30, r29
      b6:	37 28       	or	r3, r7
      b8:	37 28       	or	r3, r7
      ba:	37 28       	or	r3, r7
      bc:	f7 27       	eor	r31, r23
      be:	01 28       	or	r0, r1
      c0:	0b 28       	or	r0, r11
      c2:	15 28       	or	r1, r5
      c4:	22 28       	or	r2, r2
      c6:	37 28       	or	r3, r7
      c8:	2a 28       	or	r2, r10
      ca:	58 28       	or	r5, r8
      cc:	5b 28       	or	r5, r11
      ce:	4a 28       	or	r4, r10
      d0:	4e 28       	or	r4, r14
      d2:	54 28       	or	r5, r4
      d4:	7c 28       	or	r7, r12
      d6:	7c 28       	or	r7, r12
      d8:	7c 28       	or	r7, r12
      da:	5f 28       	or	r5, r15
      dc:	63 28       	or	r6, r3
      de:	67 28       	or	r6, r7
      e0:	6d 28       	or	r6, r13
      e2:	71 28       	or	r7, r1
      e4:	7c 28       	or	r7, r12
      e6:	77 28       	or	r7, r7

000000e8 <__trampolines_end>:
      e8:	08 0b       	sbc	r16, r24
      ea:	00 02       	muls	r16, r16
      ec:	02 02       	muls	r16, r18
      ee:	01 00       	.word	0x0001	; ????
      f0:	09 04       	cpc	r0, r9
      f2:	00 00       	nop
      f4:	01 02       	muls	r16, r17
      f6:	02 00       	.word	0x0002	; ????
      f8:	00 05       	cpc	r16, r0
      fa:	24 00       	.word	0x0024	; ????
      fc:	10 01       	movw	r2, r0
      fe:	05 24       	eor	r0, r5
     100:	01 01       	movw	r0, r2
     102:	01 04       	cpc	r0, r1
     104:	24 02       	muls	r18, r20
     106:	06 05       	cpc	r16, r6
     108:	24 06       	cpc	r2, r20
     10a:	00 01       	movw	r0, r0
     10c:	07 05       	cpc	r16, r7
     10e:	81 03       	fmuls	r16, r17
     110:	10 00       	.word	0x0010	; ????
     112:	40 09       	sbc	r20, r0
     114:	04 01       	movw	r0, r8
     116:	00 02       	muls	r16, r16
     118:	0a 00       	.word	0x000a	; ????
     11a:	00 00       	nop
     11c:	07 05       	cpc	r16, r7
     11e:	02 02       	muls	r16, r18
     120:	40 00       	.word	0x0040	; ????
     122:	00 07       	cpc	r16, r16
     124:	05 83       	std	Z+5, r16	; 0x05
     126:	02 40       	sbci	r16, 0x02	; 2
	...

0000012a <USB_DeviceDescriptorIAD>:
     12a:	12 01 00 02 ef 02 01 40 41 23 36 80 00 01 01 02     .......@A#6.....
     13a:	03 01                                               ..

0000013c <STRING_MANUFACTURER>:
     13c:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

00000148 <STRING_PRODUCT>:
     148:	41 72 64 75 69 6e 6f 20 4c 65 6f 6e 61 72 64 6f     Arduino Leonardo
	...

00000159 <STRING_LANGUAGE>:
     159:	04 03 09 04                                         ....

0000015d <analog_pin_to_channel_PGM>:
     15d:	07 06 05 04 01 00 08 0a 0b 0c 0d 09                 ............

00000169 <digital_pin_to_timer_PGM>:
     169:	00 00 00 02 00 09 0f 00 00 03 04 01 00 0c 00 00     ................
	...

00000188 <digital_pin_to_bit_mask_PGM>:
     188:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     198:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

000001a7 <digital_pin_to_port_PGM>:
     1a7:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     1b7:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

000001c6 <port_to_input_PGM>:
     1c6:	00 00 00 00 23 00 26 00 29 00 2c 00 2f 00           ....#.&.).,./.

000001d4 <port_to_output_PGM>:
     1d4:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

000001e2 <port_to_mode_PGM>:
     1e2:	00 00 00 00 24 00 27 00 2a 00 2d 00 30 00           ....$.'.*.-.0.

000001f0 <__ctors_start>:
     1f0:	3c 06       	cpc	r3, r28
     1f2:	ee 19       	sub	r30, r14
     1f4:	3d 1d       	adc	r19, r13
     1f6:	f3 1e       	adc	r15, r19

000001f8 <__ctors_end>:
     1f8:	b7 07       	cpc	r27, r23

000001fa <__dtors_end>:
     1fa:	11 24       	eor	r1, r1
     1fc:	1f be       	out	0x3f, r1	; 63
     1fe:	cf ef       	ldi	r28, 0xFF	; 255
     200:	da e0       	ldi	r29, 0x0A	; 10
     202:	de bf       	out	0x3e, r29	; 62
     204:	cd bf       	out	0x3d, r28	; 61

00000206 <__do_copy_data>:
     206:	13 e0       	ldi	r17, 0x03	; 3
     208:	a0 e0       	ldi	r26, 0x00	; 0
     20a:	b1 e0       	ldi	r27, 0x01	; 1
     20c:	e0 e7       	ldi	r30, 0x70	; 112
     20e:	fa e5       	ldi	r31, 0x5A	; 90
     210:	02 c0       	rjmp	.+4      	; 0x216 <__do_copy_data+0x10>
     212:	05 90       	lpm	r0, Z+
     214:	0d 92       	st	X+, r0
     216:	a4 34       	cpi	r26, 0x44	; 68
     218:	b1 07       	cpc	r27, r17
     21a:	d9 f7       	brne	.-10     	; 0x212 <__do_copy_data+0xc>

0000021c <__do_clear_bss>:
     21c:	26 e0       	ldi	r18, 0x06	; 6
     21e:	a4 e4       	ldi	r26, 0x44	; 68
     220:	b3 e0       	ldi	r27, 0x03	; 3
     222:	01 c0       	rjmp	.+2      	; 0x226 <.do_clear_bss_start>

00000224 <.do_clear_bss_loop>:
     224:	1d 92       	st	X+, r1

00000226 <.do_clear_bss_start>:
     226:	ad 3f       	cpi	r26, 0xFD	; 253
     228:	b2 07       	cpc	r27, r18
     22a:	e1 f7       	brne	.-8      	; 0x224 <.do_clear_bss_loop>

0000022c <__do_global_ctors>:
     22c:	10 e0       	ldi	r17, 0x00	; 0
     22e:	cc ef       	ldi	r28, 0xFC	; 252
     230:	d0 e0       	ldi	r29, 0x00	; 0
     232:	04 c0       	rjmp	.+8      	; 0x23c <__do_global_ctors+0x10>
     234:	21 97       	sbiw	r28, 0x01	; 1
     236:	fe 01       	movw	r30, r28
     238:	0e 94 88 2a 	call	0x5510	; 0x5510 <__tablejump2__>
     23c:	c8 3f       	cpi	r28, 0xF8	; 248
     23e:	d1 07       	cpc	r29, r17
     240:	c9 f7       	brne	.-14     	; 0x234 <__do_global_ctors+0x8>
     242:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <main>
     246:	0c 94 2b 2d 	jmp	0x5a56	; 0x5a56 <__do_global_dtors>

0000024a <__bad_interrupt>:
     24a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024e <_Z6getkeyv>:
 */
int getkey(void)
{
	static int keys[NUMKEYS+1];
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	0e 94 77 27 	call	0x4eee	; 0x4eee <analogRead>

	if (val > 1020) { // no key pressed
     254:	8d 3f       	cpi	r24, 0xFD	; 253
     256:	23 e0       	ldi	r18, 0x03	; 3
     258:	92 07       	cpc	r25, r18
     25a:	20 f1       	brcs	.+72     	; 0x2a4 <_Z6getkeyv+0x56>
		if (++keys[0] > NOPRESS) {
     25c:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <__data_end>
     260:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <__data_end+0x1>
     264:	01 96       	adiw	r24, 0x01	; 1
     266:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <__data_end+0x1>
     26a:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <__data_end>
     26e:	03 97       	sbiw	r24, 0x03	; 3
     270:	0c f4       	brge	.+2      	; 0x274 <_Z6getkeyv+0x26>
     272:	6a c0       	rjmp	.+212    	; 0x348 <_Z6getkeyv+0xfa>
     274:	e4 e4       	ldi	r30, 0x44	; 68
     276:	f3 e0       	ldi	r31, 0x03	; 3
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	90 e0       	ldi	r25, 0x00	; 0
			for(uint8_t i = 0; i <= NUMKEYS; i++){
				if(keys[i] > KEYPRESS){
     280:	40 81       	ld	r20, Z
     282:	51 81       	ldd	r21, Z+1	; 0x01
     284:	44 30       	cpi	r20, 0x04	; 4
     286:	51 05       	cpc	r21, r1
     288:	2c f0       	brlt	.+10     	; 0x294 <_Z6getkeyv+0x46>
     28a:	c9 01       	movw	r24, r18
					data = i;
					if(keys[i] > LONGPRESS) data += 5;
     28c:	49 3c       	cpi	r20, 0xC9	; 201
     28e:	51 05       	cpc	r21, r1
     290:	0c f0       	brlt	.+2      	; 0x294 <_Z6getkeyv+0x46>
     292:	05 96       	adiw	r24, 0x05	; 5
				}
				keys[i] = 0;
     294:	11 92       	st	Z+, r1
     296:	11 92       	st	Z+, r1
     298:	2f 5f       	subi	r18, 0xFF	; 255
     29a:	3f 4f       	sbci	r19, 0xFF	; 255
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);

	if (val > 1020) { // no key pressed
		if (++keys[0] > NOPRESS) {
			for(uint8_t i = 0; i <= NUMKEYS; i++){
     29c:	26 30       	cpi	r18, 0x06	; 6
     29e:	31 05       	cpc	r19, r1
     2a0:	79 f7       	brne	.-34     	; 0x280 <_Z6getkeyv+0x32>
     2a2:	08 95       	ret
			}
		}
		else data = 0;
	}
	else {
		if (val < S1_LIMIT && keys[1] < 32000) ++keys[1]; // key1 pressed
     2a4:	89 34       	cpi	r24, 0x49	; 73
     2a6:	91 05       	cpc	r25, r1
     2a8:	70 f4       	brcc	.+28     	; 0x2c6 <_Z6getkeyv+0x78>
     2aa:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <__data_end+0x2>
     2ae:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <__data_end+0x3>
     2b2:	81 15       	cp	r24, r1
     2b4:	2d e7       	ldi	r18, 0x7D	; 125
     2b6:	92 07       	cpc	r25, r18
     2b8:	4c f4       	brge	.+18     	; 0x2cc <_Z6getkeyv+0x7e>
     2ba:	01 96       	adiw	r24, 0x01	; 1
     2bc:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <__data_end+0x3>
     2c0:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <__data_end+0x2>
     2c4:	41 c0       	rjmp	.+130    	; 0x348 <_Z6getkeyv+0xfa>
		else if (val < S2_LIMIT && keys[2] < 32000) ++keys[2]; //key2 pressed
     2c6:	8e 3e       	cpi	r24, 0xEE	; 238
     2c8:	91 05       	cpc	r25, r1
     2ca:	70 f4       	brcc	.+28     	; 0x2e8 <_Z6getkeyv+0x9a>
     2cc:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <__data_end+0x4>
     2d0:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <__data_end+0x5>
     2d4:	81 15       	cp	r24, r1
     2d6:	2d e7       	ldi	r18, 0x7D	; 125
     2d8:	92 07       	cpc	r25, r18
     2da:	54 f4       	brge	.+20     	; 0x2f0 <_Z6getkeyv+0xa2>
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	90 93 49 03 	sts	0x0349, r25	; 0x800349 <__data_end+0x5>
     2e2:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <__data_end+0x4>
     2e6:	30 c0       	rjmp	.+96     	; 0x348 <_Z6getkeyv+0xfa>
		else if (val < S3_LIMIT && keys[3] < 32000) ++keys[3]; //key3 pressed
     2e8:	82 3a       	cpi	r24, 0xA2	; 162
     2ea:	21 e0       	ldi	r18, 0x01	; 1
     2ec:	92 07       	cpc	r25, r18
     2ee:	70 f4       	brcc	.+28     	; 0x30c <_Z6getkeyv+0xbe>
     2f0:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <__data_end+0x6>
     2f4:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <__data_end+0x7>
     2f8:	81 15       	cp	r24, r1
     2fa:	2d e7       	ldi	r18, 0x7D	; 125
     2fc:	92 07       	cpc	r25, r18
     2fe:	4c f4       	brge	.+18     	; 0x312 <_Z6getkeyv+0xc4>
     300:	01 96       	adiw	r24, 0x01	; 1
     302:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <__data_end+0x7>
     306:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <__data_end+0x6>
     30a:	1e c0       	rjmp	.+60     	; 0x348 <_Z6getkeyv+0xfa>
		else if (val < S4_LIMIT && keys[4] < 32000) ++keys[4]; //key4 pressed
     30c:	80 37       	cpi	r24, 0x70	; 112
     30e:	92 40       	sbci	r25, 0x02	; 2
     310:	70 f4       	brcc	.+28     	; 0x32e <_Z6getkeyv+0xe0>
     312:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <__data_end+0x8>
     316:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <__data_end+0x9>
     31a:	81 15       	cp	r24, r1
     31c:	2d e7       	ldi	r18, 0x7D	; 125
     31e:	92 07       	cpc	r25, r18
     320:	34 f4       	brge	.+12     	; 0x32e <_Z6getkeyv+0xe0>
     322:	01 96       	adiw	r24, 0x01	; 1
     324:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <__data_end+0x9>
     328:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <__data_end+0x8>
     32c:	0d c0       	rjmp	.+26     	; 0x348 <_Z6getkeyv+0xfa>
		else if ( keys[5] < 32000) ++keys[5]; // key5 pressed
     32e:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <__data_end+0xa>
     332:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <__data_end+0xb>
     336:	81 15       	cp	r24, r1
     338:	2d e7       	ldi	r18, 0x7D	; 125
     33a:	92 07       	cpc	r25, r18
     33c:	2c f4       	brge	.+10     	; 0x348 <_Z6getkeyv+0xfa>
     33e:	01 96       	adiw	r24, 0x01	; 1
     340:	90 93 4f 03 	sts	0x034F, r25	; 0x80034f <__data_end+0xb>
     344:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <__data_end+0xa>
		data = 0;
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
	}
	return data;
}
     34c:	08 95       	ret

0000034e <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	08 95       	ret

00000354 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     354:	08 95       	ret

00000356 <_ZN7hd4478013iosetContrastEh>:
{	
	analogWrite(En_Motor,0);
	lcd.clear();
	lcd.print("Zeiger kalibrieren");
	delay(2000);
	lcd.clear();
     356:	8d ef       	ldi	r24, 0xFD	; 253
     358:	9f ef       	ldi	r25, 0xFF	; 255
     35a:	08 95       	ret

0000035c <_Z14chooseTimeZonev>:
     35c:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <timeZoneChoosen>
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	89 27       	eor	r24, r25
     364:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <timeZoneChoosen>
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	08 95       	ret

0000036e <_Z10changeAMPMv>:
     36e:	90 91 35 04 	lds	r25, 0x0435	; 0x800435 <ampm>
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	89 27       	eor	r24, r25
     376:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <ampm>
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	08 95       	ret

00000380 <_Z8setAlarmv>:
     380:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <weckerStatus>
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	89 27       	eor	r24, r25
     388:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <weckerStatus>
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	08 95       	ret

00000392 <_Z10wheelSpeedv>:
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	40 e8       	ldi	r20, 0x80	; 128
     398:	5f e3       	ldi	r21, 0x3F	; 63
     39a:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <duration>
     39e:	70 91 32 04 	lds	r23, 0x0432	; 0x800432 <duration+0x1>
     3a2:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <duration+0x2>
     3a6:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <duration+0x3>
     3aa:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__addsf3>
     3ae:	60 93 31 04 	sts	0x0431, r22	; 0x800431 <duration>
     3b2:	70 93 32 04 	sts	0x0432, r23	; 0x800432 <duration+0x1>
     3b6:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <duration+0x2>
     3ba:	90 93 34 04 	sts	0x0434, r25	; 0x800434 <duration+0x3>
     3be:	08 95       	ret

000003c0 <_Z9gpsScreeni>:
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	ec 01       	movw	r28, r24
     3c6:	40 e0       	ldi	r20, 0x00	; 0
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	8b ef       	ldi	r24, 0xFB	; 251
     3cc:	94 e0       	ldi	r25, 0x04	; 4
     3ce:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_ZN7hd447809setCursorEhh>
     3d2:	66 e3       	ldi	r22, 0x36	; 54
     3d4:	71 e0       	ldi	r23, 0x01	; 1
     3d6:	8b ef       	ldi	r24, 0xFB	; 251
     3d8:	94 e0       	ldi	r25, 0x04	; 4
     3da:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <_ZN5Print5printEPKc>
     3de:	ce 01       	movw	r24, r28
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	08 95       	ret

000003e6 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>:
     3e6:	0f 93       	push	r16
     3e8:	1f 93       	push	r17
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	18 2f       	mov	r17, r24
     3f0:	d0 e0       	ldi	r29, 0x00	; 0
     3f2:	c0 e2       	ldi	r28, 0x20	; 32
     3f4:	6c 2f       	mov	r22, r28
     3f6:	86 e9       	ldi	r24, 0x96	; 150
     3f8:	95 e0       	ldi	r25, 0x05	; 5
     3fa:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN7TwoWire17beginTransmissionEh>
     3fe:	86 e9       	ldi	r24, 0x96	; 150
     400:	95 e0       	ldi	r25, 0x05	; 5
     402:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_ZN7TwoWire15endTransmissionEv>
     406:	08 2f       	mov	r16, r24
     408:	61 e0       	ldi	r22, 0x01	; 1
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	0e 94 da 26 	call	0x4db4	; 0x4db4 <delay>
     414:	01 11       	cpse	r16, r1
     416:	03 c0       	rjmp	.+6      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     418:	1d 17       	cp	r17, r29
     41a:	f9 f0       	breq	.+62     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     41c:	df 5f       	subi	r29, 0xFF	; 255
     41e:	cf 5f       	subi	r28, 0xFF	; 255
     420:	c8 32       	cpi	r28, 0x28	; 40
     422:	41 f7       	brne	.-48     	; 0x3f4 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0xe>
     424:	c8 e3       	ldi	r28, 0x38	; 56
     426:	6c 2f       	mov	r22, r28
     428:	86 e9       	ldi	r24, 0x96	; 150
     42a:	95 e0       	ldi	r25, 0x05	; 5
     42c:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN7TwoWire17beginTransmissionEh>
     430:	86 e9       	ldi	r24, 0x96	; 150
     432:	95 e0       	ldi	r25, 0x05	; 5
     434:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_ZN7TwoWire15endTransmissionEv>
     438:	08 2f       	mov	r16, r24
     43a:	61 e0       	ldi	r22, 0x01	; 1
     43c:	70 e0       	ldi	r23, 0x00	; 0
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 da 26 	call	0x4db4	; 0x4db4 <delay>
     446:	01 11       	cpse	r16, r1
     448:	03 c0       	rjmp	.+6      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44a:	1d 17       	cp	r17, r29
     44c:	31 f0       	breq	.+12     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     44e:	df 5f       	subi	r29, 0xFF	; 255
     450:	cf 5f       	subi	r28, 0xFF	; 255
     452:	c0 34       	cpi	r28, 0x40	; 64
     454:	41 f7       	brne	.-48     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	01 c0       	rjmp	.+2      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     45a:	8c 2f       	mov	r24, r28
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	08 95       	ret

00000466 <_ZN7TwoWire5writeEi>:
     466:	dc 01       	movw	r26, r24
     468:	ed 91       	ld	r30, X+
     46a:	fc 91       	ld	r31, X
     46c:	01 90       	ld	r0, Z+
     46e:	f0 81       	ld	r31, Z
     470:	e0 2d       	mov	r30, r0
     472:	09 94       	ijmp

00000474 <_ZN4Zeit4TickEv>:
     474:	fc 01       	movw	r30, r24
     476:	84 81       	ldd	r24, Z+4	; 0x04
     478:	95 81       	ldd	r25, Z+5	; 0x05
     47a:	01 96       	adiw	r24, 0x01	; 1
     47c:	2c e3       	ldi	r18, 0x3C	; 60
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	b9 01       	movw	r22, r18
     482:	0e 94 33 2a 	call	0x5466	; 0x5466 <__divmodhi4>
     486:	95 83       	std	Z+5, r25	; 0x05
     488:	84 83       	std	Z+4, r24	; 0x04
     48a:	89 2b       	or	r24, r25
     48c:	19 f0       	breq	.+6      	; 0x494 <_ZN4Zeit4TickEv+0x20>
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	08 95       	ret
     494:	82 81       	ldd	r24, Z+2	; 0x02
     496:	93 81       	ldd	r25, Z+3	; 0x03
     498:	01 96       	adiw	r24, 0x01	; 1
     49a:	b9 01       	movw	r22, r18
     49c:	0e 94 33 2a 	call	0x5466	; 0x5466 <__divmodhi4>
     4a0:	93 83       	std	Z+3, r25	; 0x03
     4a2:	82 83       	std	Z+2, r24	; 0x02
     4a4:	89 2b       	or	r24, r25
     4a6:	99 f7       	brne	.-26     	; 0x48e <_ZN4Zeit4TickEv+0x1a>
     4a8:	80 81       	ld	r24, Z
     4aa:	91 81       	ldd	r25, Z+1	; 0x01
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	68 e1       	ldi	r22, 0x18	; 24
     4b0:	70 e0       	ldi	r23, 0x00	; 0
     4b2:	0e 94 33 2a 	call	0x5466	; 0x5466 <__divmodhi4>
     4b6:	ac 01       	movw	r20, r24
     4b8:	91 83       	std	Z+1, r25	; 0x01
     4ba:	80 83       	st	Z, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	45 2b       	or	r20, r21
     4c2:	09 f0       	breq	.+2      	; 0x4c6 <_ZN4Zeit4TickEv+0x52>
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	82 2f       	mov	r24, r18
     4c8:	08 95       	ret

000004ca <_ZN5Datum11DaysOfMonthEv>:
     4ca:	fc 01       	movw	r30, r24
     4cc:	22 81       	ldd	r18, Z+2	; 0x02
     4ce:	33 81       	ldd	r19, Z+3	; 0x03
     4d0:	26 30       	cpi	r18, 0x06	; 6
     4d2:	31 05       	cpc	r19, r1
     4d4:	d9 f0       	breq	.+54     	; 0x50c <_ZN5Datum11DaysOfMonthEv+0x42>
     4d6:	3c f4       	brge	.+14     	; 0x4e6 <_ZN5Datum11DaysOfMonthEv+0x1c>
     4d8:	22 30       	cpi	r18, 0x02	; 2
     4da:	31 05       	cpc	r19, r1
     4dc:	69 f0       	breq	.+26     	; 0x4f8 <_ZN5Datum11DaysOfMonthEv+0x2e>
     4de:	24 30       	cpi	r18, 0x04	; 4
     4e0:	31 05       	cpc	r19, r1
     4e2:	39 f4       	brne	.+14     	; 0x4f2 <_ZN5Datum11DaysOfMonthEv+0x28>
     4e4:	13 c0       	rjmp	.+38     	; 0x50c <_ZN5Datum11DaysOfMonthEv+0x42>
     4e6:	29 30       	cpi	r18, 0x09	; 9
     4e8:	31 05       	cpc	r19, r1
     4ea:	81 f0       	breq	.+32     	; 0x50c <_ZN5Datum11DaysOfMonthEv+0x42>
     4ec:	2b 30       	cpi	r18, 0x0B	; 11
     4ee:	31 05       	cpc	r19, r1
     4f0:	69 f0       	breq	.+26     	; 0x50c <_ZN5Datum11DaysOfMonthEv+0x42>
     4f2:	8f e1       	ldi	r24, 0x1F	; 31
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	08 95       	ret
     4f8:	fc 01       	movw	r30, r24
     4fa:	80 81       	ld	r24, Z
     4fc:	91 81       	ldd	r25, Z+1	; 0x01
     4fe:	83 70       	andi	r24, 0x03	; 3
     500:	99 27       	eor	r25, r25
     502:	89 2b       	or	r24, r25
     504:	31 f4       	brne	.+12     	; 0x512 <_ZN5Datum11DaysOfMonthEv+0x48>
     506:	8d e1       	ldi	r24, 0x1D	; 29
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	08 95       	ret
     50c:	8e e1       	ldi	r24, 0x1E	; 30
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	08 95       	ret
     512:	8c e1       	ldi	r24, 0x1C	; 28
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	08 95       	ret

00000518 <_ZN5Datum4TickEv>:
     518:	0f 93       	push	r16
     51a:	1f 93       	push	r17
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	ec 01       	movw	r28, r24
     522:	0c 81       	ldd	r16, Y+4	; 0x04
     524:	1d 81       	ldd	r17, Y+5	; 0x05
     526:	0f 5f       	subi	r16, 0xFF	; 255
     528:	1f 4f       	sbci	r17, 0xFF	; 255
     52a:	1d 83       	std	Y+5, r17	; 0x05
     52c:	0c 83       	std	Y+4, r16	; 0x04
     52e:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN5Datum11DaysOfMonthEv>
     532:	80 17       	cp	r24, r16
     534:	91 07       	cpc	r25, r17
     536:	a4 f4       	brge	.+40     	; 0x560 <_ZN5Datum4TickEv+0x48>
     538:	21 e0       	ldi	r18, 0x01	; 1
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	3d 83       	std	Y+5, r19	; 0x05
     53e:	2c 83       	std	Y+4, r18	; 0x04
     540:	8a 81       	ldd	r24, Y+2	; 0x02
     542:	9b 81       	ldd	r25, Y+3	; 0x03
     544:	01 96       	adiw	r24, 0x01	; 1
     546:	8d 30       	cpi	r24, 0x0D	; 13
     548:	91 05       	cpc	r25, r1
     54a:	1c f4       	brge	.+6      	; 0x552 <_ZN5Datum4TickEv+0x3a>
     54c:	9b 83       	std	Y+3, r25	; 0x03
     54e:	8a 83       	std	Y+2, r24	; 0x02
     550:	07 c0       	rjmp	.+14     	; 0x560 <_ZN5Datum4TickEv+0x48>
     552:	3b 83       	std	Y+3, r19	; 0x03
     554:	2a 83       	std	Y+2, r18	; 0x02
     556:	88 81       	ld	r24, Y
     558:	99 81       	ldd	r25, Y+1	; 0x01
     55a:	01 96       	adiw	r24, 0x01	; 1
     55c:	99 83       	std	Y+1, r25	; 0x01
     55e:	88 83       	st	Y, r24
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	1f 91       	pop	r17
     566:	0f 91       	pop	r16
     568:	08 95       	ret

0000056a <_Z5Watchv>:
     56a:	0f 93       	push	r16
     56c:	1f 93       	push	r17
     56e:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <millis>
     572:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZZ5WatchvE6target>
     576:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZZ5WatchvE6target+0x1>
     57a:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <_ZZ5WatchvE6target+0x2>
     57e:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <_ZZ5WatchvE6target+0x3>
     582:	06 17       	cp	r16, r22
     584:	17 07       	cpc	r17, r23
     586:	28 07       	cpc	r18, r24
     588:	39 07       	cpc	r19, r25
     58a:	70 f5       	brcc	.+92     	; 0x5e8 <_Z5Watchv+0x7e>
     58c:	d9 01       	movw	r26, r18
     58e:	c8 01       	movw	r24, r16
     590:	88 51       	subi	r24, 0x18	; 24
     592:	9c 4f       	sbci	r25, 0xFC	; 252
     594:	af 4f       	sbci	r26, 0xFF	; 255
     596:	bf 4f       	sbci	r27, 0xFF	; 255
     598:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZZ5WatchvE6target>
     59c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZZ5WatchvE6target+0x1>
     5a0:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_ZZ5WatchvE6target+0x2>
     5a4:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_ZZ5WatchvE6target+0x3>
     5a8:	89 e8       	ldi	r24, 0x89	; 137
     5aa:	93 e0       	ldi	r25, 0x03	; 3
     5ac:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN4Zeit4TickEv>
     5b0:	89 2b       	or	r24, r25
     5b2:	21 f0       	breq	.+8      	; 0x5bc <_Z5Watchv+0x52>
     5b4:	86 e6       	ldi	r24, 0x66	; 102
     5b6:	93 e0       	ldi	r25, 0x03	; 3
     5b8:	0e 94 8c 02 	call	0x518	; 0x518 <_ZN5Datum4TickEv>
     5bc:	81 e8       	ldi	r24, 0x81	; 129
     5be:	93 e0       	ldi	r25, 0x03	; 3
     5c0:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN4Zeit4TickEv>
     5c4:	89 2b       	or	r24, r25
     5c6:	21 f0       	breq	.+8      	; 0x5d0 <_Z5Watchv+0x66>
     5c8:	8e e5       	ldi	r24, 0x5E	; 94
     5ca:	93 e0       	ldi	r25, 0x03	; 3
     5cc:	0e 94 8c 02 	call	0x518	; 0x518 <_ZN5Datum4TickEv>
     5d0:	89 e7       	ldi	r24, 0x79	; 121
     5d2:	93 e0       	ldi	r25, 0x03	; 3
     5d4:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN4Zeit4TickEv>
     5d8:	89 2b       	or	r24, r25
     5da:	31 f0       	breq	.+12     	; 0x5e8 <_Z5Watchv+0x7e>
     5dc:	86 e5       	ldi	r24, 0x56	; 86
     5de:	93 e0       	ldi	r25, 0x03	; 3
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	0c 94 8c 02 	jmp	0x518	; 0x518 <_ZN5Datum4TickEv>
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	08 95       	ret

000005ee <_ZN4Zeit6ChangeEi>:
     5ee:	fc 01       	movw	r30, r24
     5f0:	cb 01       	movw	r24, r22
     5f2:	26 81       	ldd	r18, Z+6	; 0x06
     5f4:	37 81       	ldd	r19, Z+7	; 0x07
     5f6:	21 50       	subi	r18, 0x01	; 1
     5f8:	31 09       	sbc	r19, r1
     5fa:	22 30       	cpi	r18, 0x02	; 2
     5fc:	31 05       	cpc	r19, r1
     5fe:	58 f0       	brcs	.+22     	; 0x616 <_ZN4Zeit6ChangeEi+0x28>
     600:	21 e0       	ldi	r18, 0x01	; 1
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	37 83       	std	Z+7, r19	; 0x07
     606:	26 83       	std	Z+6, r18	; 0x06
     608:	62 30       	cpi	r22, 0x02	; 2
     60a:	71 05       	cpc	r23, r1
     60c:	69 f0       	breq	.+26     	; 0x628 <_ZN4Zeit6ChangeEi+0x3a>
     60e:	64 30       	cpi	r22, 0x04	; 4
     610:	71 05       	cpc	r23, r1
     612:	39 f0       	breq	.+14     	; 0x622 <_ZN4Zeit6ChangeEi+0x34>
     614:	14 c0       	rjmp	.+40     	; 0x63e <_ZN4Zeit6ChangeEi+0x50>
     616:	62 30       	cpi	r22, 0x02	; 2
     618:	71 05       	cpc	r23, r1
     61a:	31 f0       	breq	.+12     	; 0x628 <_ZN4Zeit6ChangeEi+0x3a>
     61c:	64 30       	cpi	r22, 0x04	; 4
     61e:	71 05       	cpc	r23, r1
     620:	49 f4       	brne	.+18     	; 0x634 <_ZN4Zeit6ChangeEi+0x46>
     622:	82 e0       	ldi	r24, 0x02	; 2
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	02 c0       	rjmp	.+4      	; 0x62c <_ZN4Zeit6ChangeEi+0x3e>
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	97 83       	std	Z+7, r25	; 0x07
     62e:	86 83       	std	Z+6, r24	; 0x06
     630:	8a e0       	ldi	r24, 0x0A	; 10
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	26 81       	ldd	r18, Z+6	; 0x06
     636:	37 81       	ldd	r19, Z+7	; 0x07
     638:	21 30       	cpi	r18, 0x01	; 1
     63a:	31 05       	cpc	r19, r1
     63c:	d1 f4       	brne	.+52     	; 0x672 <_ZN4Zeit6ChangeEi+0x84>
     63e:	81 30       	cpi	r24, 0x01	; 1
     640:	91 05       	cpc	r25, r1
     642:	21 f0       	breq	.+8      	; 0x64c <_ZN4Zeit6ChangeEi+0x5e>
     644:	83 30       	cpi	r24, 0x03	; 3
     646:	91 05       	cpc	r25, r1
     648:	49 f0       	breq	.+18     	; 0x65c <_ZN4Zeit6ChangeEi+0x6e>
     64a:	08 95       	ret
     64c:	80 81       	ld	r24, Z
     64e:	91 81       	ldd	r25, Z+1	; 0x01
     650:	01 96       	adiw	r24, 0x01	; 1
     652:	68 e1       	ldi	r22, 0x18	; 24
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	0e 94 33 2a 	call	0x5466	; 0x5466 <__divmodhi4>
     65a:	08 c0       	rjmp	.+16     	; 0x66c <_ZN4Zeit6ChangeEi+0x7e>
     65c:	80 81       	ld	r24, Z
     65e:	91 81       	ldd	r25, Z+1	; 0x01
     660:	00 97       	sbiw	r24, 0x00	; 0
     662:	19 f4       	brne	.+6      	; 0x66a <_ZN4Zeit6ChangeEi+0x7c>
     664:	87 e1       	ldi	r24, 0x17	; 23
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	01 c0       	rjmp	.+2      	; 0x66c <_ZN4Zeit6ChangeEi+0x7e>
     66a:	01 97       	sbiw	r24, 0x01	; 1
     66c:	91 83       	std	Z+1, r25	; 0x01
     66e:	80 83       	st	Z, r24
     670:	13 c0       	rjmp	.+38     	; 0x698 <_ZN4Zeit6ChangeEi+0xaa>
     672:	22 30       	cpi	r18, 0x02	; 2
     674:	31 05       	cpc	r19, r1
     676:	f1 f4       	brne	.+60     	; 0x6b4 <_ZN4Zeit6ChangeEi+0xc6>
     678:	81 30       	cpi	r24, 0x01	; 1
     67a:	91 05       	cpc	r25, r1
     67c:	21 f0       	breq	.+8      	; 0x686 <_ZN4Zeit6ChangeEi+0x98>
     67e:	83 30       	cpi	r24, 0x03	; 3
     680:	91 05       	cpc	r25, r1
     682:	79 f0       	breq	.+30     	; 0x6a2 <_ZN4Zeit6ChangeEi+0xb4>
     684:	08 95       	ret
     686:	82 81       	ldd	r24, Z+2	; 0x02
     688:	93 81       	ldd	r25, Z+3	; 0x03
     68a:	01 96       	adiw	r24, 0x01	; 1
     68c:	6c e3       	ldi	r22, 0x3C	; 60
     68e:	70 e0       	ldi	r23, 0x00	; 0
     690:	0e 94 33 2a 	call	0x5466	; 0x5466 <__divmodhi4>
     694:	93 83       	std	Z+3, r25	; 0x03
     696:	82 83       	std	Z+2, r24	; 0x02
     698:	15 82       	std	Z+5, r1	; 0x05
     69a:	14 82       	std	Z+4, r1	; 0x04
     69c:	8a e0       	ldi	r24, 0x0A	; 10
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	08 95       	ret
     6a2:	82 81       	ldd	r24, Z+2	; 0x02
     6a4:	93 81       	ldd	r25, Z+3	; 0x03
     6a6:	00 97       	sbiw	r24, 0x00	; 0
     6a8:	19 f4       	brne	.+6      	; 0x6b0 <_ZN4Zeit6ChangeEi+0xc2>
     6aa:	8b e3       	ldi	r24, 0x3B	; 59
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	f2 cf       	rjmp	.-28     	; 0x694 <_ZN4Zeit6ChangeEi+0xa6>
     6b0:	01 97       	sbiw	r24, 0x01	; 1
     6b2:	f0 cf       	rjmp	.-32     	; 0x694 <_ZN4Zeit6ChangeEi+0xa6>
     6b4:	08 95       	ret

000006b6 <_Z11printhhmmssR4Zeit>:
     6b6:	0f 93       	push	r16
     6b8:	1f 93       	push	r17
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	8c 01       	movw	r16, r24
     6c0:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <ampm>
     6c4:	f8 01       	movw	r30, r16
     6c6:	c0 81       	ld	r28, Z
     6c8:	d1 81       	ldd	r29, Z+1	; 0x01
     6ca:	88 23       	and	r24, r24
     6cc:	89 f0       	breq	.+34     	; 0x6f0 <_Z11printhhmmssR4Zeit+0x3a>
     6ce:	cd 30       	cpi	r28, 0x0D	; 13
     6d0:	d1 05       	cpc	r29, r1
     6d2:	0c f0       	brlt	.+2      	; 0x6d6 <_Z11printhhmmssR4Zeit+0x20>
     6d4:	2c 97       	sbiw	r28, 0x0c	; 12
     6d6:	ca 30       	cpi	r28, 0x0A	; 10
     6d8:	d1 05       	cpc	r29, r1
     6da:	34 f4       	brge	.+12     	; 0x6e8 <_Z11printhhmmssR4Zeit+0x32>
     6dc:	61 e4       	ldi	r22, 0x41	; 65
     6de:	71 e0       	ldi	r23, 0x01	; 1
     6e0:	8b ef       	ldi	r24, 0xFB	; 251
     6e2:	94 e0       	ldi	r25, 0x04	; 4
     6e4:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <_ZN5Print5printEPKc>
     6e8:	4a e0       	ldi	r20, 0x0A	; 10
     6ea:	50 e0       	ldi	r21, 0x00	; 0
     6ec:	be 01       	movw	r22, r28
     6ee:	0d c0       	rjmp	.+26     	; 0x70a <_Z11printhhmmssR4Zeit+0x54>
     6f0:	2a 97       	sbiw	r28, 0x0a	; 10
     6f2:	34 f4       	brge	.+12     	; 0x700 <_Z11printhhmmssR4Zeit+0x4a>
     6f4:	61 e4       	ldi	r22, 0x41	; 65
     6f6:	71 e0       	ldi	r23, 0x01	; 1
     6f8:	8b ef       	ldi	r24, 0xFB	; 251
     6fa:	94 e0       	ldi	r25, 0x04	; 4
     6fc:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <_ZN5Print5printEPKc>
     700:	f8 01       	movw	r30, r16
     702:	60 81       	ld	r22, Z
     704:	71 81       	ldd	r23, Z+1	; 0x01
     706:	4a e0       	ldi	r20, 0x0A	; 10
     708:	50 e0       	ldi	r21, 0x00	; 0
     70a:	8b ef       	ldi	r24, 0xFB	; 251
     70c:	94 e0       	ldi	r25, 0x04	; 4
     70e:	0e 94 2e 20 	call	0x405c	; 0x405c <_ZN5Print5printEii>
     712:	f8 01       	movw	r30, r16
     714:	82 81       	ldd	r24, Z+2	; 0x02
     716:	93 81       	ldd	r25, Z+3	; 0x03
     718:	0a 97       	sbiw	r24, 0x0a	; 10
     71a:	1c f4       	brge	.+6      	; 0x722 <_Z11printhhmmssR4Zeit+0x6c>
     71c:	60 e4       	ldi	r22, 0x40	; 64
     71e:	71 e0       	ldi	r23, 0x01	; 1
     720:	02 c0       	rjmp	.+4      	; 0x726 <_Z11printhhmmssR4Zeit+0x70>
     722:	63 e4       	ldi	r22, 0x43	; 67
     724:	71 e0       	ldi	r23, 0x01	; 1
     726:	8b ef       	ldi	r24, 0xFB	; 251
     728:	94 e0       	ldi	r25, 0x04	; 4
     72a:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <_ZN5Print5printEPKc>
     72e:	f8 01       	movw	r30, r16
     730:	62 81       	ldd	r22, Z+2	; 0x02
     732:	73 81       	ldd	r23, Z+3	; 0x03
     734:	4a e0       	ldi	r20, 0x0A	; 10
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	8b ef       	ldi	r24, 0xFB	; 251
     73a:	94 e0       	ldi	r25, 0x04	; 4
     73c:	0e 94 2e 20 	call	0x405c	; 0x405c <_ZN5Print5printEii>
     740:	f8 01       	movw	r30, r16
     742:	84 81       	ldd	r24, Z+4	; 0x04
     744:	95 81       	ldd	r25, Z+5	; 0x05
     746:	0a 97       	sbiw	r24, 0x0a	; 10
     748:	1c f4       	brge	.+6      	; 0x750 <_Z11printhhmmssR4Zeit+0x9a>
     74a:	60 e4       	ldi	r22, 0x40	; 64
     74c:	71 e0       	ldi	r23, 0x01	; 1
     74e:	02 c0       	rjmp	.+4      	; 0x754 <_Z11printhhmmssR4Zeit+0x9e>
     750:	63 e4       	ldi	r22, 0x43	; 67
     752:	71 e0       	ldi	r23, 0x01	; 1
     754:	8b ef       	ldi	r24, 0xFB	; 251
     756:	94 e0       	ldi	r25, 0x04	; 4
     758:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <_ZN5Print5printEPKc>
     75c:	f8 01       	movw	r30, r16
     75e:	64 81       	ldd	r22, Z+4	; 0x04
     760:	75 81       	ldd	r23, Z+5	; 0x05
     762:	4a e0       	ldi	r20, 0x0A	; 10
     764:	50 e0       	ldi	r21, 0x00	; 0
     766:	8b ef       	ldi	r24, 0xFB	; 251
     768:	94 e0       	ldi	r25, 0x04	; 4
     76a:	0e 94 2e 20 	call	0x405c	; 0x405c <_ZN5Print5printEii>
     76e:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <ampm>
     772:	88 23       	and	r24, r24
     774:	91 f0       	breq	.+36     	; 0x79a <_Z11printhhmmssR4Zeit+0xe4>
     776:	f8 01       	movw	r30, r16
     778:	80 81       	ld	r24, Z
     77a:	91 81       	ldd	r25, Z+1	; 0x01
     77c:	0d 97       	sbiw	r24, 0x0d	; 13
     77e:	1c f0       	brlt	.+6      	; 0x786 <_Z11printhhmmssR4Zeit+0xd0>
     780:	65 e4       	ldi	r22, 0x45	; 69
     782:	71 e0       	ldi	r23, 0x01	; 1
     784:	02 c0       	rjmp	.+4      	; 0x78a <_Z11printhhmmssR4Zeit+0xd4>
     786:	69 e4       	ldi	r22, 0x49	; 73
     788:	71 e0       	ldi	r23, 0x01	; 1
     78a:	8b ef       	ldi	r24, 0xFB	; 251
     78c:	94 e0       	ldi	r25, 0x04	; 4
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
     796:	0c 94 81 1f 	jmp	0x3f02	; 0x3f02 <_ZN5Print5printEPKc>
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	08 95       	ret

000007a4 <_Z11alarmScreeni>:
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	ec 01       	movw	r28, r24
     7aa:	40 e0       	ldi	r20, 0x00	; 0
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	8b ef       	ldi	r24, 0xFB	; 251
     7b0:	94 e0       	ldi	r25, 0x04	; 4
     7b2:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_ZN7hd447809setCursorEhh>
     7b6:	6d e4       	ldi	r22, 0x4D	; 77
     7b8:	71 e0       	ldi	r23, 0x01	; 1
     7ba:	8b ef       	ldi	r24, 0xFB	; 251
     7bc:	94 e0       	ldi	r25, 0x04	; 4
     7be:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <_ZN5Print5printEPKc>
     7c2:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <weckerStatus>
     7c6:	88 23       	and	r24, r24
     7c8:	19 f0       	breq	.+6      	; 0x7d0 <_Z11alarmScreeni+0x2c>
     7ca:	66 e5       	ldi	r22, 0x56	; 86
     7cc:	71 e0       	ldi	r23, 0x01	; 1
     7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <_Z11alarmScreeni+0x30>
     7d0:	6a e5       	ldi	r22, 0x5A	; 90
     7d2:	71 e0       	ldi	r23, 0x01	; 1
     7d4:	8b ef       	ldi	r24, 0xFB	; 251
     7d6:	94 e0       	ldi	r25, 0x04	; 4
     7d8:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <_ZN5Print5printEPKc>
     7dc:	41 e0       	ldi	r20, 0x01	; 1
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	8b ef       	ldi	r24, 0xFB	; 251
     7e2:	94 e0       	ldi	r25, 0x04	; 4
     7e4:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_ZN7hd447809setCursorEhh>
     7e8:	81 e7       	ldi	r24, 0x71	; 113
     7ea:	93 e0       	ldi	r25, 0x03	; 3
     7ec:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_Z11printhhmmssR4Zeit>
     7f0:	ce 01       	movw	r24, r28
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	08 95       	ret

000007f8 <_Z11changeAlarmi>:
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	ec 01       	movw	r28, r24
     7fe:	40 e0       	ldi	r20, 0x00	; 0
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	8b ef       	ldi	r24, 0xFB	; 251
     804:	94 e0       	ldi	r25, 0x04	; 4
     806:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_ZN7hd447809setCursorEhh>
     80a:	6e e5       	ldi	r22, 0x5E	; 94
     80c:	71 e0       	ldi	r23, 0x01	; 1
     80e:	8b ef       	ldi	r24, 0xFB	; 251
     810:	94 e0       	ldi	r25, 0x04	; 4
     812:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <_ZN5Print5printEPKc>
     816:	be 01       	movw	r22, r28
     818:	81 e7       	ldi	r24, 0x71	; 113
     81a:	93 e0       	ldi	r25, 0x03	; 3
     81c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <_ZN4Zeit6ChangeEi>
     820:	ec 01       	movw	r28, r24
     822:	41 e0       	ldi	r20, 0x01	; 1
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	8b ef       	ldi	r24, 0xFB	; 251
     828:	94 e0       	ldi	r25, 0x04	; 4
     82a:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_ZN7hd447809setCursorEhh>
     82e:	81 e7       	ldi	r24, 0x71	; 113
     830:	93 e0       	ldi	r25, 0x03	; 3
     832:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_Z11printhhmmssR4Zeit>
     836:	ce 01       	movw	r24, r28
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	08 95       	ret

0000083e <_Z13printddmmyyyyR5Datum>:
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	ec 01       	movw	r28, r24
     844:	8c 81       	ldd	r24, Y+4	; 0x04
     846:	9d 81       	ldd	r25, Y+5	; 0x05
     848:	0a 97       	sbiw	r24, 0x0a	; 10
     84a:	34 f4       	brge	.+12     	; 0x858 <_Z13printddmmyyyyR5Datum+0x1a>
     84c:	6e e7       	ldi	r22, 0x7E	; 126
     84e:	71 e0       	ldi	r23, 0x01	; 1
     850:	8b ef       	ldi	r24, 0xFB	; 251
     852:	94 e0       	ldi	r25, 0x04	; 4
     854:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <_ZN5Print5printEPKc>
     858:	6c 81       	ldd	r22, Y+4	; 0x04
     85a:	7d 81       	ldd	r23, Y+5	; 0x05
     85c:	4a e0       	ldi	r20, 0x0A	; 10
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	8b ef       	ldi	r24, 0xFB	; 251
     862:	94 e0       	ldi	r25, 0x04	; 4
     864:	0e 94 2e 20 	call	0x405c	; 0x405c <_ZN5Print5printEii>
     868:	8a 81       	ldd	r24, Y+2	; 0x02
     86a:	9b 81       	ldd	r25, Y+3	; 0x03
     86c:	0a 97       	sbiw	r24, 0x0a	; 10
     86e:	1c f4       	brge	.+6      	; 0x876 <_Z13printddmmyyyyR5Datum+0x38>
     870:	68 e6       	ldi	r22, 0x68	; 104
     872:	71 e0       	ldi	r23, 0x01	; 1
     874:	02 c0       	rjmp	.+4      	; 0x87a <_Z13printddmmyyyyR5Datum+0x3c>
     876:	6b e6       	ldi	r22, 0x6B	; 107
     878:	71 e0       	ldi	r23, 0x01	; 1
     87a:	8b ef       	ldi	r24, 0xFB	; 251
     87c:	94 e0       	ldi	r25, 0x04	; 4
     87e:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <_ZN5Print5printEPKc>
     882:	6a 81       	ldd	r22, Y+2	; 0x02
     884:	7b 81       	ldd	r23, Y+3	; 0x03
     886:	4a e0       	ldi	r20, 0x0A	; 10
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	8b ef       	ldi	r24, 0xFB	; 251
     88c:	94 e0       	ldi	r25, 0x04	; 4
     88e:	0e 94 2e 20 	call	0x405c	; 0x405c <_ZN5Print5printEii>
     892:	6b e6       	ldi	r22, 0x6B	; 107
     894:	71 e0       	ldi	r23, 0x01	; 1
     896:	8b ef       	ldi	r24, 0xFB	; 251
     898:	94 e0       	ldi	r25, 0x04	; 4
     89a:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <_ZN5Print5printEPKc>
     89e:	68 81       	ld	r22, Y
     8a0:	79 81       	ldd	r23, Y+1	; 0x01
     8a2:	4a e0       	ldi	r20, 0x0A	; 10
     8a4:	50 e0       	ldi	r21, 0x00	; 0
     8a6:	8b ef       	ldi	r24, 0xFB	; 251
     8a8:	94 e0       	ldi	r25, 0x04	; 4
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	0c 94 2e 20 	jmp	0x405c	; 0x405c <_ZN5Print5printEii>

000008b2 <_Z10dateScreeni>:
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	ec 01       	movw	r28, r24
     8b8:	40 e0       	ldi	r20, 0x00	; 0
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	8b ef       	ldi	r24, 0xFB	; 251
     8be:	94 e0       	ldi	r25, 0x04	; 4
     8c0:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_ZN7hd447809setCursorEhh>
     8c4:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <timeZoneChoosen>
     8c8:	88 23       	and	r24, r24
     8ca:	19 f1       	breq	.+70     	; 0x912 <_Z10dateScreeni+0x60>
     8cc:	81 e8       	ldi	r24, 0x81	; 129
     8ce:	93 e0       	ldi	r25, 0x03	; 3
     8d0:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_Z11printhhmmssR4Zeit>
     8d4:	40 e0       	ldi	r20, 0x00	; 0
     8d6:	6d e0       	ldi	r22, 0x0D	; 13
     8d8:	8b ef       	ldi	r24, 0xFB	; 251
     8da:	94 e0       	ldi	r25, 0x04	; 4
     8dc:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_ZN7hd447809setCursorEhh>
     8e0:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <tz>
     8e4:	90 91 52 04 	lds	r25, 0x0452	; 0x800452 <tz+0x1>
     8e8:	2e e0       	ldi	r18, 0x0E	; 14
     8ea:	28 9f       	mul	r18, r24
     8ec:	b0 01       	movw	r22, r0
     8ee:	29 9f       	mul	r18, r25
     8f0:	70 0d       	add	r23, r0
     8f2:	11 24       	eor	r1, r1
     8f4:	65 5a       	subi	r22, 0xA5	; 165
     8f6:	7b 4f       	sbci	r23, 0xFB	; 251
     8f8:	8b ef       	ldi	r24, 0xFB	; 251
     8fa:	94 e0       	ldi	r25, 0x04	; 4
     8fc:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <_ZN5Print5printERK6String>
     900:	41 e0       	ldi	r20, 0x01	; 1
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	8b ef       	ldi	r24, 0xFB	; 251
     906:	94 e0       	ldi	r25, 0x04	; 4
     908:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_ZN7hd447809setCursorEhh>
     90c:	8e e5       	ldi	r24, 0x5E	; 94
     90e:	93 e0       	ldi	r25, 0x03	; 3
     910:	0c c0       	rjmp	.+24     	; 0x92a <_Z10dateScreeni+0x78>
     912:	89 e7       	ldi	r24, 0x79	; 121
     914:	93 e0       	ldi	r25, 0x03	; 3
     916:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_Z11printhhmmssR4Zeit>
     91a:	41 e0       	ldi	r20, 0x01	; 1
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	8b ef       	ldi	r24, 0xFB	; 251
     920:	94 e0       	ldi	r25, 0x04	; 4
     922:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_ZN7hd447809setCursorEhh>
     926:	86 e5       	ldi	r24, 0x56	; 86
     928:	93 e0       	ldi	r25, 0x03	; 3
     92a:	0e 94 1f 04 	call	0x83e	; 0x83e <_Z13printddmmyyyyR5Datum>
     92e:	ce 01       	movw	r24, r28
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	08 95       	ret

00000936 <_Z17printHumidityTempv>:
     936:	cf 92       	push	r12
     938:	df 92       	push	r13
     93a:	ef 92       	push	r14
     93c:	ff 92       	push	r15
     93e:	41 e0       	ldi	r20, 0x01	; 1
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	8b ef       	ldi	r24, 0xFB	; 251
     944:	94 e0       	ldi	r25, 0x04	; 4
     946:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_ZN7hd447809setCursorEhh>
     94a:	c0 90 3b 04 	lds	r12, 0x043B	; 0x80043b <temp>
     94e:	d0 90 3c 04 	lds	r13, 0x043C	; 0x80043c <temp+0x1>
     952:	e0 90 3d 04 	lds	r14, 0x043D	; 0x80043d <temp+0x2>
     956:	f0 90 3e 04 	lds	r15, 0x043E	; 0x80043e <temp+0x3>
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	a9 01       	movw	r20, r18
     960:	c7 01       	movw	r24, r14
     962:	b6 01       	movw	r22, r12
     964:	0e 94 5f 1a 	call	0x34be	; 0x34be <__cmpsf2>
     968:	81 11       	cpse	r24, r1
     96a:	03 c0       	rjmp	.+6      	; 0x972 <_Z17printHumidityTempv+0x3c>
     96c:	6d e6       	ldi	r22, 0x6D	; 109
     96e:	71 e0       	ldi	r23, 0x01	; 1
     970:	23 c0       	rjmp	.+70     	; 0x9b8 <_Z17printHumidityTempv+0x82>
     972:	22 e0       	ldi	r18, 0x02	; 2
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	b7 01       	movw	r22, r14
     978:	a6 01       	movw	r20, r12
     97a:	8b ef       	ldi	r24, 0xFB	; 251
     97c:	94 e0       	ldi	r25, 0x04	; 4
     97e:	0e 94 10 21 	call	0x4220	; 0x4220 <_ZN5Print5printEdi>
     982:	6f ed       	ldi	r22, 0xDF	; 223
     984:	8b ef       	ldi	r24, 0xFB	; 251
     986:	94 e0       	ldi	r25, 0x04	; 4
     988:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <_ZN5Print5printEc>
     98c:	6b e7       	ldi	r22, 0x7B	; 123
     98e:	71 e0       	ldi	r23, 0x01	; 1
     990:	8b ef       	ldi	r24, 0xFB	; 251
     992:	94 e0       	ldi	r25, 0x04	; 4
     994:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <_ZN5Print5printEPKc>
     998:	40 91 37 04 	lds	r20, 0x0437	; 0x800437 <hum>
     99c:	50 91 38 04 	lds	r21, 0x0438	; 0x800438 <hum+0x1>
     9a0:	60 91 39 04 	lds	r22, 0x0439	; 0x800439 <hum+0x2>
     9a4:	70 91 3a 04 	lds	r23, 0x043A	; 0x80043a <hum+0x3>
     9a8:	22 e0       	ldi	r18, 0x02	; 2
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	8b ef       	ldi	r24, 0xFB	; 251
     9ae:	94 e0       	ldi	r25, 0x04	; 4
     9b0:	0e 94 10 21 	call	0x4220	; 0x4220 <_ZN5Print5printEdi>
     9b4:	60 e8       	ldi	r22, 0x80	; 128
     9b6:	71 e0       	ldi	r23, 0x01	; 1
     9b8:	8b ef       	ldi	r24, 0xFB	; 251
     9ba:	94 e0       	ldi	r25, 0x04	; 4
     9bc:	ff 90       	pop	r15
     9be:	ef 90       	pop	r14
     9c0:	df 90       	pop	r13
     9c2:	cf 90       	pop	r12
     9c4:	0c 94 81 1f 	jmp	0x3f02	; 0x3f02 <_ZN5Print5printEPKc>

000009c8 <_Z10homeScreeni>:
     9c8:	0f 93       	push	r16
     9ca:	1f 93       	push	r17
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	ec 01       	movw	r28, r24
     9d2:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <millis>
     9d6:	00 91 3f 04 	lds	r16, 0x043F	; 0x80043f <readSensor>
     9da:	10 91 40 04 	lds	r17, 0x0440	; 0x800440 <readSensor+0x1>
     9de:	20 91 41 04 	lds	r18, 0x0441	; 0x800441 <readSensor+0x2>
     9e2:	30 91 42 04 	lds	r19, 0x0442	; 0x800442 <readSensor+0x3>
     9e6:	06 17       	cp	r16, r22
     9e8:	17 07       	cpc	r17, r23
     9ea:	28 07       	cpc	r18, r24
     9ec:	39 07       	cpc	r19, r25
     9ee:	b8 f5       	brcc	.+110    	; 0xa5e <_Z10homeScreeni+0x96>
     9f0:	66 e1       	ldi	r22, 0x16	; 22
     9f2:	83 e4       	ldi	r24, 0x43	; 67
     9f4:	94 e0       	ldi	r25, 0x04	; 4
     9f6:	0e 94 4e 14 	call	0x289c	; 0x289c <_ZN3dht4readEh>
     9fa:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <DHT+0x4>
     9fe:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <DHT+0x5>
     a02:	a0 91 49 04 	lds	r26, 0x0449	; 0x800449 <DHT+0x6>
     a06:	b0 91 4a 04 	lds	r27, 0x044A	; 0x80044a <DHT+0x7>
     a0a:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <temp>
     a0e:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <temp+0x1>
     a12:	a0 93 3d 04 	sts	0x043D, r26	; 0x80043d <temp+0x2>
     a16:	b0 93 3e 04 	sts	0x043E, r27	; 0x80043e <temp+0x3>
     a1a:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <DHT>
     a1e:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <DHT+0x1>
     a22:	a0 91 45 04 	lds	r26, 0x0445	; 0x800445 <DHT+0x2>
     a26:	b0 91 46 04 	lds	r27, 0x0446	; 0x800446 <DHT+0x3>
     a2a:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <hum>
     a2e:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <hum+0x1>
     a32:	a0 93 39 04 	sts	0x0439, r26	; 0x800439 <hum+0x2>
     a36:	b0 93 3a 04 	sts	0x043A, r27	; 0x80043a <hum+0x3>
     a3a:	0e 94 9b 04 	call	0x936	; 0x936 <_Z17printHumidityTempv>
     a3e:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <millis>
     a42:	dc 01       	movw	r26, r24
     a44:	cb 01       	movw	r24, r22
     a46:	88 57       	subi	r24, 0x78	; 120
     a48:	9c 4e       	sbci	r25, 0xEC	; 236
     a4a:	af 4f       	sbci	r26, 0xFF	; 255
     a4c:	bf 4f       	sbci	r27, 0xFF	; 255
     a4e:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <readSensor>
     a52:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <readSensor+0x1>
     a56:	a0 93 41 04 	sts	0x0441, r26	; 0x800441 <readSensor+0x2>
     a5a:	b0 93 42 04 	sts	0x0442, r27	; 0x800442 <readSensor+0x3>
     a5e:	0e 94 9b 04 	call	0x936	; 0x936 <_Z17printHumidityTempv>
     a62:	40 e0       	ldi	r20, 0x00	; 0
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	8b ef       	ldi	r24, 0xFB	; 251
     a68:	94 e0       	ldi	r25, 0x04	; 4
     a6a:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_ZN7hd447809setCursorEhh>
     a6e:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <timeZoneChoosen>
     a72:	88 23       	and	r24, r24
     a74:	d9 f0       	breq	.+54     	; 0xaac <_Z10homeScreeni+0xe4>
     a76:	81 e8       	ldi	r24, 0x81	; 129
     a78:	93 e0       	ldi	r25, 0x03	; 3
     a7a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_Z11printhhmmssR4Zeit>
     a7e:	40 e0       	ldi	r20, 0x00	; 0
     a80:	6d e0       	ldi	r22, 0x0D	; 13
     a82:	8b ef       	ldi	r24, 0xFB	; 251
     a84:	94 e0       	ldi	r25, 0x04	; 4
     a86:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_ZN7hd447809setCursorEhh>
     a8a:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <tz>
     a8e:	90 91 52 04 	lds	r25, 0x0452	; 0x800452 <tz+0x1>
     a92:	2e e0       	ldi	r18, 0x0E	; 14
     a94:	28 9f       	mul	r18, r24
     a96:	b0 01       	movw	r22, r0
     a98:	29 9f       	mul	r18, r25
     a9a:	70 0d       	add	r23, r0
     a9c:	11 24       	eor	r1, r1
     a9e:	65 5a       	subi	r22, 0xA5	; 165
     aa0:	7b 4f       	sbci	r23, 0xFB	; 251
     aa2:	8b ef       	ldi	r24, 0xFB	; 251
     aa4:	94 e0       	ldi	r25, 0x04	; 4
     aa6:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <_ZN5Print5printERK6String>
     aaa:	04 c0       	rjmp	.+8      	; 0xab4 <_Z10homeScreeni+0xec>
     aac:	89 e7       	ldi	r24, 0x79	; 121
     aae:	93 e0       	ldi	r25, 0x03	; 3
     ab0:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_Z11printhhmmssR4Zeit>
     ab4:	ce 01       	movw	r24, r28
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	08 95       	ret

00000ac0 <_Z13calculateTimev>:
     ac0:	88 e0       	ldi	r24, 0x08	; 8
     ac2:	e9 e8       	ldi	r30, 0x89	; 137
     ac4:	f3 e0       	ldi	r31, 0x03	; 3
     ac6:	a1 e8       	ldi	r26, 0x81	; 129
     ac8:	b3 e0       	ldi	r27, 0x03	; 3
     aca:	01 90       	ld	r0, Z+
     acc:	0d 92       	st	X+, r0
     ace:	8a 95       	dec	r24
     ad0:	e1 f7       	brne	.-8      	; 0xaca <_Z13calculateTimev+0xa>
     ad2:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <tz>
     ad6:	90 91 52 04 	lds	r25, 0x0452	; 0x800452 <tz+0x1>
     ada:	2e e0       	ldi	r18, 0x0E	; 14
     adc:	28 9f       	mul	r18, r24
     ade:	f0 01       	movw	r30, r0
     ae0:	29 9f       	mul	r18, r25
     ae2:	f0 0d       	add	r31, r0
     ae4:	11 24       	eor	r1, r1
     ae6:	ed 5a       	subi	r30, 0xAD	; 173
     ae8:	fb 4f       	sbci	r31, 0xFB	; 251
     aea:	26 81       	ldd	r18, Z+6	; 0x06
     aec:	37 81       	ldd	r19, Z+7	; 0x07
     aee:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <zeitGMT>
     af2:	90 91 8a 03 	lds	r25, 0x038A	; 0x80038a <zeitGMT+0x1>
     af6:	82 0f       	add	r24, r18
     af8:	93 1f       	adc	r25, r19
     afa:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <zeitTimeZone+0x1>
     afe:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <zeitTimeZone>
     b02:	28 e0       	ldi	r18, 0x08	; 8
     b04:	e6 e6       	ldi	r30, 0x66	; 102
     b06:	f3 e0       	ldi	r31, 0x03	; 3
     b08:	ae e5       	ldi	r26, 0x5E	; 94
     b0a:	b3 e0       	ldi	r27, 0x03	; 3
     b0c:	01 90       	ld	r0, Z+
     b0e:	0d 92       	st	X+, r0
     b10:	2a 95       	dec	r18
     b12:	e1 f7       	brne	.-8      	; 0xb0c <__stack+0xd>
     b14:	88 31       	cpi	r24, 0x18	; 24
     b16:	91 05       	cpc	r25, r1
     b18:	4c f0       	brlt	.+18     	; 0xb2c <__stack+0x2d>
     b1a:	48 97       	sbiw	r24, 0x18	; 24
     b1c:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <zeitTimeZone+0x1>
     b20:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <zeitTimeZone>
     b24:	8e e5       	ldi	r24, 0x5E	; 94
     b26:	93 e0       	ldi	r25, 0x03	; 3
     b28:	0e 94 8c 02 	call	0x518	; 0x518 <_ZN5Datum4TickEv>
     b2c:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <zeitTimeZone>
     b30:	90 91 82 03 	lds	r25, 0x0382	; 0x800382 <zeitTimeZone+0x1>
     b34:	97 ff       	sbrs	r25, 7
     b36:	2f c0       	rjmp	.+94     	; 0xb96 <__stack+0x97>
     b38:	48 96       	adiw	r24, 0x18	; 24
     b3a:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <zeitTimeZone+0x1>
     b3e:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <zeitTimeZone>
     b42:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <datumTimeZone+0x4>
     b46:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <datumTimeZone+0x5>
     b4a:	01 97       	sbiw	r24, 0x01	; 1
     b4c:	90 93 63 03 	sts	0x0363, r25	; 0x800363 <datumTimeZone+0x5>
     b50:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <datumTimeZone+0x4>
     b54:	89 2b       	or	r24, r25
     b56:	f9 f4       	brne	.+62     	; 0xb96 <__stack+0x97>
     b58:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <datumTimeZone+0x2>
     b5c:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <datumTimeZone+0x3>
     b60:	01 97       	sbiw	r24, 0x01	; 1
     b62:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <datumTimeZone+0x3>
     b66:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <datumTimeZone+0x2>
     b6a:	89 2b       	or	r24, r25
     b6c:	29 f0       	breq	.+10     	; 0xb78 <__stack+0x79>
     b6e:	8e e5       	ldi	r24, 0x5E	; 94
     b70:	93 e0       	ldi	r25, 0x03	; 3
     b72:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN5Datum11DaysOfMonthEv>
     b76:	0b c0       	rjmp	.+22     	; 0xb8e <__stack+0x8f>
     b78:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <datumTimeZone>
     b7c:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <datumTimeZone+0x1>
     b80:	01 97       	sbiw	r24, 0x01	; 1
     b82:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <datumTimeZone+0x1>
     b86:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <datumTimeZone>
     b8a:	8f e1       	ldi	r24, 0x1F	; 31
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	90 93 63 03 	sts	0x0363, r25	; 0x800363 <datumTimeZone+0x5>
     b92:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <datumTimeZone+0x4>
     b96:	08 95       	ret

00000b98 <_Z14changeTimeZonei>:
     b98:	83 30       	cpi	r24, 0x03	; 3
     b9a:	91 05       	cpc	r25, r1
     b9c:	39 f0       	breq	.+14     	; 0xbac <_Z14changeTimeZonei+0x14>
     b9e:	8a 30       	cpi	r24, 0x0A	; 10
     ba0:	91 05       	cpc	r25, r1
     ba2:	21 f0       	breq	.+8      	; 0xbac <_Z14changeTimeZonei+0x14>
     ba4:	81 30       	cpi	r24, 0x01	; 1
     ba6:	91 05       	cpc	r25, r1
     ba8:	51 f5       	brne	.+84     	; 0xbfe <_Z14changeTimeZonei+0x66>
     baa:	17 c0       	rjmp	.+46     	; 0xbda <_Z14changeTimeZonei+0x42>
     bac:	8b ef       	ldi	r24, 0xFB	; 251
     bae:	94 e0       	ldi	r25, 0x04	; 4
     bb0:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN7hd447805clearEv>
     bb4:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <tz>
     bb8:	90 91 52 04 	lds	r25, 0x0452	; 0x800452 <tz+0x1>
     bbc:	00 97       	sbiw	r24, 0x00	; 0
     bbe:	19 f4       	brne	.+6      	; 0xbc6 <_Z14changeTimeZonei+0x2e>
     bc0:	8b e0       	ldi	r24, 0x0B	; 11
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	01 c0       	rjmp	.+2      	; 0xbc8 <_Z14changeTimeZonei+0x30>
     bc6:	01 97       	sbiw	r24, 0x01	; 1
     bc8:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <tz+0x1>
     bcc:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <tz>
     bd0:	0e 94 60 05 	call	0xac0	; 0xac0 <_Z13calculateTimev>
     bd4:	8a e0       	ldi	r24, 0x0A	; 10
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	08 95       	ret
     bda:	8b ef       	ldi	r24, 0xFB	; 251
     bdc:	94 e0       	ldi	r25, 0x04	; 4
     bde:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN7hd447805clearEv>
     be2:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <tz>
     be6:	90 91 52 04 	lds	r25, 0x0452	; 0x800452 <tz+0x1>
     bea:	8b 30       	cpi	r24, 0x0B	; 11
     bec:	91 05       	cpc	r25, r1
     bee:	29 f4       	brne	.+10     	; 0xbfa <_Z14changeTimeZonei+0x62>
     bf0:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <tz+0x1>
     bf4:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <tz>
     bf8:	eb cf       	rjmp	.-42     	; 0xbd0 <_Z14changeTimeZonei+0x38>
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	e5 cf       	rjmp	.-54     	; 0xbc8 <_Z14changeTimeZonei+0x30>
     bfe:	08 95       	ret

00000c00 <_Z11setTimeZonei>:
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	0e 94 cc 05 	call	0xb98	; 0xb98 <_Z14changeTimeZonei>
     c08:	ec 01       	movw	r28, r24
     c0a:	40 e0       	ldi	r20, 0x00	; 0
     c0c:	60 e0       	ldi	r22, 0x00	; 0
     c0e:	8b ef       	ldi	r24, 0xFB	; 251
     c10:	94 e0       	ldi	r25, 0x04	; 4
     c12:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_ZN7hd447809setCursorEhh>
     c16:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <tz>
     c1a:	90 91 52 04 	lds	r25, 0x0452	; 0x800452 <tz+0x1>
     c1e:	2e e0       	ldi	r18, 0x0E	; 14
     c20:	28 9f       	mul	r18, r24
     c22:	b0 01       	movw	r22, r0
     c24:	29 9f       	mul	r18, r25
     c26:	70 0d       	add	r23, r0
     c28:	11 24       	eor	r1, r1
     c2a:	6d 5a       	subi	r22, 0xAD	; 173
     c2c:	7b 4f       	sbci	r23, 0xFB	; 251
     c2e:	8b ef       	ldi	r24, 0xFB	; 251
     c30:	94 e0       	ldi	r25, 0x04	; 4
     c32:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <_ZN5Print5printERK6String>
     c36:	41 e0       	ldi	r20, 0x01	; 1
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	8b ef       	ldi	r24, 0xFB	; 251
     c3c:	94 e0       	ldi	r25, 0x04	; 4
     c3e:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_ZN7hd447809setCursorEhh>
     c42:	81 e8       	ldi	r24, 0x81	; 129
     c44:	93 e0       	ldi	r25, 0x03	; 3
     c46:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_Z11printhhmmssR4Zeit>
     c4a:	ce 01       	movw	r24, r28
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	08 95       	ret

00000c52 <_Z7advancev>:
}

void advance()//Motor Forward
{
	digitalWrite(Dir_Motor,LOW);
     c52:	60 e0       	ldi	r22, 0x00	; 0
     c54:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Dir_Motor>
     c58:	0e 94 b9 28 	call	0x5172	; 0x5172 <digitalWrite>
	analogWrite(En_Motor,val_output);
     c5c:	60 91 28 04 	lds	r22, 0x0428	; 0x800428 <val_output>
     c60:	70 91 29 04 	lds	r23, 0x0429	; 0x800429 <val_output+0x1>
     c64:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <val_output+0x2>
     c68:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <val_output+0x3>
     c6c:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <__fixsfsi>
     c70:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <En_Motor>
     c74:	0c 94 a8 27 	jmp	0x4f50	; 0x4f50 <analogWrite>

00000c78 <_GLOBAL__sub_I_lcd>:
		break;
	}
	if(newmenu >= 0) menu = newmenu;

	} //else Klammer
}
     c78:	6f 92       	push	r6
     c7a:	7f 92       	push	r7
     c7c:	8f 92       	push	r8
     c7e:	9f 92       	push	r9
     c80:	af 92       	push	r10
     c82:	bf 92       	push	r11
     c84:	cf 92       	push	r12
     c86:	df 92       	push	r13
     c88:	ef 92       	push	r14
     c8a:	ff 92       	push	r15
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
// ====================

//	-- Automagic / auto-detect constructors --

// Auto find next instance and auto config pin mapping
hd44780_I2Cexp(){ _addr = 0; _expType = I2Cexp_UNKNOWN;}
     c94:	8b ef       	ldi	r24, 0xFB	; 251
     c96:	94 e0       	ldi	r25, 0x04	; 4
     c98:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN7hd44780C1Ev>
     c9c:	eb ef       	ldi	r30, 0xFB	; 251
     c9e:	f4 e0       	ldi	r31, 0x04	; 4
     ca0:	87 e7       	ldi	r24, 0x77	; 119
     ca2:	92 e0       	ldi	r25, 0x02	; 2
     ca4:	91 83       	std	Z+1, r25	; 0x01
     ca6:	80 83       	st	Z, r24
     ca8:	10 a2       	std	Z+32, r1	; 0x20
     caa:	11 a2       	std	Z+33, r1	; 0x21

const struct CITY_TIME_DIF CITIES [] {
	{"London", 0, "LON"},{"New-York", -5, "NEY"},{"Paris", 1, "PAR"},{ "Tokyo", 9, "TOK"},
	{"Hongkong", 8, "HNK"},{"Los Angeles", -8, "LAN"},{"Chicago", -6, "CHI"},{"Seoul", 9, "SEO"},
	{ "Bruessel",  1, "BRU"},{"Washington",  -5, "WAS"},{"Singapur", 8, "SIN"},{"Sydney", 11, "SYD"}
	};
     cac:	65 e9       	ldi	r22, 0x95	; 149
     cae:	71 e0       	ldi	r23, 0x01	; 1
     cb0:	83 e5       	ldi	r24, 0x53	; 83
     cb2:	94 e0       	ldi	r25, 0x04	; 4
     cb4:	0e 94 7f 29 	call	0x52fe	; 0x52fe <_ZN6StringC1EPKc>
     cb8:	c3 e5       	ldi	r28, 0x53	; 83
     cba:	d4 e0       	ldi	r29, 0x04	; 4
     cbc:	1f 82       	std	Y+7, r1	; 0x07
     cbe:	1e 82       	std	Y+6, r1	; 0x06
     cc0:	6c e9       	ldi	r22, 0x9C	; 156
     cc2:	71 e0       	ldi	r23, 0x01	; 1
     cc4:	8b e5       	ldi	r24, 0x5B	; 91
     cc6:	94 e0       	ldi	r25, 0x04	; 4
     cc8:	0e 94 7f 29 	call	0x52fe	; 0x52fe <_ZN6StringC1EPKc>
     ccc:	60 ea       	ldi	r22, 0xA0	; 160
     cce:	71 e0       	ldi	r23, 0x01	; 1
     cd0:	81 e6       	ldi	r24, 0x61	; 97
     cd2:	94 e0       	ldi	r25, 0x04	; 4
     cd4:	0e 94 7f 29 	call	0x52fe	; 0x52fe <_ZN6StringC1EPKc>
     cd8:	8b ef       	ldi	r24, 0xFB	; 251
     cda:	e8 2e       	mov	r14, r24
     cdc:	ff 24       	eor	r15, r15
     cde:	fa 94       	dec	r15
     ce0:	fd 8a       	std	Y+21, r15	; 0x15
     ce2:	ec 8a       	std	Y+20, r14	; 0x14
     ce4:	69 ea       	ldi	r22, 0xA9	; 169
     ce6:	71 e0       	ldi	r23, 0x01	; 1
     ce8:	89 e6       	ldi	r24, 0x69	; 105
     cea:	94 e0       	ldi	r25, 0x04	; 4
     cec:	0e 94 7f 29 	call	0x52fe	; 0x52fe <_ZN6StringC1EPKc>
     cf0:	6d ea       	ldi	r22, 0xAD	; 173
     cf2:	71 e0       	ldi	r23, 0x01	; 1
     cf4:	8f e6       	ldi	r24, 0x6F	; 111
     cf6:	94 e0       	ldi	r25, 0x04	; 4
     cf8:	0e 94 7f 29 	call	0x52fe	; 0x52fe <_ZN6StringC1EPKc>
     cfc:	66 24       	eor	r6, r6
     cfe:	63 94       	inc	r6
     d00:	71 2c       	mov	r7, r1
     d02:	7b a2       	std	Y+35, r7	; 0x23
     d04:	6a a2       	std	Y+34, r6	; 0x22
     d06:	63 eb       	ldi	r22, 0xB3	; 179
     d08:	71 e0       	ldi	r23, 0x01	; 1
     d0a:	87 e7       	ldi	r24, 0x77	; 119
     d0c:	94 e0       	ldi	r25, 0x04	; 4
     d0e:	0e 94 7f 29 	call	0x52fe	; 0x52fe <_ZN6StringC1EPKc>
     d12:	67 eb       	ldi	r22, 0xB7	; 183
     d14:	71 e0       	ldi	r23, 0x01	; 1
     d16:	8d e7       	ldi	r24, 0x7D	; 125
     d18:	94 e0       	ldi	r25, 0x04	; 4
     d1a:	0e 94 7f 29 	call	0x52fe	; 0x52fe <_ZN6StringC1EPKc>
     d1e:	29 e0       	ldi	r18, 0x09	; 9
     d20:	82 2e       	mov	r8, r18
     d22:	91 2c       	mov	r9, r1
     d24:	99 aa       	std	Y+49, r9	; 0x31
     d26:	88 aa       	std	Y+48, r8	; 0x30
     d28:	6d eb       	ldi	r22, 0xBD	; 189
     d2a:	71 e0       	ldi	r23, 0x01	; 1
     d2c:	85 e8       	ldi	r24, 0x85	; 133
     d2e:	94 e0       	ldi	r25, 0x04	; 4
     d30:	0e 94 7f 29 	call	0x52fe	; 0x52fe <_ZN6StringC1EPKc>
     d34:	61 ec       	ldi	r22, 0xC1	; 193
     d36:	71 e0       	ldi	r23, 0x01	; 1
     d38:	8b e8       	ldi	r24, 0x8B	; 139
     d3a:	94 e0       	ldi	r25, 0x04	; 4
     d3c:	0e 94 7f 29 	call	0x52fe	; 0x52fe <_ZN6StringC1EPKc>
     d40:	08 e0       	ldi	r16, 0x08	; 8
     d42:	10 e0       	ldi	r17, 0x00	; 0
     d44:	1f af       	std	Y+63, r17	; 0x3f
     d46:	0e af       	std	Y+62, r16	; 0x3e
     d48:	6a ec       	ldi	r22, 0xCA	; 202
     d4a:	71 e0       	ldi	r23, 0x01	; 1
     d4c:	83 e9       	ldi	r24, 0x93	; 147
     d4e:	94 e0       	ldi	r25, 0x04	; 4
     d50:	0e 94 7f 29 	call	0x52fe	; 0x52fe <_ZN6StringC1EPKc>
     d54:	6e ec       	ldi	r22, 0xCE	; 206
     d56:	71 e0       	ldi	r23, 0x01	; 1
     d58:	89 e9       	ldi	r24, 0x99	; 153
     d5a:	94 e0       	ldi	r25, 0x04	; 4
     d5c:	0e 94 7f 29 	call	0x52fe	; 0x52fe <_ZN6StringC1EPKc>
     d60:	88 ef       	ldi	r24, 0xF8	; 248
     d62:	9f ef       	ldi	r25, 0xFF	; 255
     d64:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <_ZL6CITIES+0x4d>
     d68:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <_ZL6CITIES+0x4c>
     d6c:	6a ed       	ldi	r22, 0xDA	; 218
     d6e:	71 e0       	ldi	r23, 0x01	; 1
     d70:	81 ea       	ldi	r24, 0xA1	; 161
     d72:	94 e0       	ldi	r25, 0x04	; 4
     d74:	0e 94 7f 29 	call	0x52fe	; 0x52fe <_ZN6StringC1EPKc>
     d78:	6e ed       	ldi	r22, 0xDE	; 222
     d7a:	71 e0       	ldi	r23, 0x01	; 1
     d7c:	87 ea       	ldi	r24, 0xA7	; 167
     d7e:	94 e0       	ldi	r25, 0x04	; 4
     d80:	0e 94 7f 29 	call	0x52fe	; 0x52fe <_ZN6StringC1EPKc>
     d84:	8a ef       	ldi	r24, 0xFA	; 250
     d86:	9f ef       	ldi	r25, 0xFF	; 255
     d88:	90 93 ae 04 	sts	0x04AE, r25	; 0x8004ae <_ZL6CITIES+0x5b>
     d8c:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <_ZL6CITIES+0x5a>
     d90:	66 ee       	ldi	r22, 0xE6	; 230
     d92:	71 e0       	ldi	r23, 0x01	; 1
     d94:	8f ea       	ldi	r24, 0xAF	; 175
     d96:	94 e0       	ldi	r25, 0x04	; 4
     d98:	0e 94 7f 29 	call	0x52fe	; 0x52fe <_ZN6StringC1EPKc>
     d9c:	6a ee       	ldi	r22, 0xEA	; 234
     d9e:	71 e0       	ldi	r23, 0x01	; 1
     da0:	85 eb       	ldi	r24, 0xB5	; 181
     da2:	94 e0       	ldi	r25, 0x04	; 4
     da4:	0e 94 7f 29 	call	0x52fe	; 0x52fe <_ZN6StringC1EPKc>
     da8:	90 92 bc 04 	sts	0x04BC, r9	; 0x8004bc <_ZL6CITIES+0x69>
     dac:	80 92 bb 04 	sts	0x04BB, r8	; 0x8004bb <_ZL6CITIES+0x68>
     db0:	60 ef       	ldi	r22, 0xF0	; 240
     db2:	71 e0       	ldi	r23, 0x01	; 1
     db4:	8d eb       	ldi	r24, 0xBD	; 189
     db6:	94 e0       	ldi	r25, 0x04	; 4
     db8:	0e 94 7f 29 	call	0x52fe	; 0x52fe <_ZN6StringC1EPKc>
     dbc:	64 ef       	ldi	r22, 0xF4	; 244
     dbe:	71 e0       	ldi	r23, 0x01	; 1
     dc0:	83 ec       	ldi	r24, 0xC3	; 195
     dc2:	94 e0       	ldi	r25, 0x04	; 4
     dc4:	0e 94 7f 29 	call	0x52fe	; 0x52fe <_ZN6StringC1EPKc>
     dc8:	70 92 ca 04 	sts	0x04CA, r7	; 0x8004ca <_ZL6CITIES+0x77>
     dcc:	60 92 c9 04 	sts	0x04C9, r6	; 0x8004c9 <_ZL6CITIES+0x76>
     dd0:	6d ef       	ldi	r22, 0xFD	; 253
     dd2:	71 e0       	ldi	r23, 0x01	; 1
     dd4:	8b ec       	ldi	r24, 0xCB	; 203
     dd6:	94 e0       	ldi	r25, 0x04	; 4
     dd8:	0e 94 7f 29 	call	0x52fe	; 0x52fe <_ZN6StringC1EPKc>
     ddc:	61 e0       	ldi	r22, 0x01	; 1
     dde:	72 e0       	ldi	r23, 0x02	; 2
     de0:	81 ed       	ldi	r24, 0xD1	; 209
     de2:	94 e0       	ldi	r25, 0x04	; 4
     de4:	0e 94 7f 29 	call	0x52fe	; 0x52fe <_ZN6StringC1EPKc>
     de8:	f0 92 d8 04 	sts	0x04D8, r15	; 0x8004d8 <_ZL6CITIES+0x85>
     dec:	e0 92 d7 04 	sts	0x04D7, r14	; 0x8004d7 <_ZL6CITIES+0x84>
     df0:	6c e0       	ldi	r22, 0x0C	; 12
     df2:	72 e0       	ldi	r23, 0x02	; 2
     df4:	89 ed       	ldi	r24, 0xD9	; 217
     df6:	94 e0       	ldi	r25, 0x04	; 4
     df8:	0e 94 7f 29 	call	0x52fe	; 0x52fe <_ZN6StringC1EPKc>
     dfc:	60 e1       	ldi	r22, 0x10	; 16
     dfe:	72 e0       	ldi	r23, 0x02	; 2
     e00:	8f ed       	ldi	r24, 0xDF	; 223
     e02:	94 e0       	ldi	r25, 0x04	; 4
     e04:	0e 94 7f 29 	call	0x52fe	; 0x52fe <_ZN6StringC1EPKc>
     e08:	10 93 e6 04 	sts	0x04E6, r17	; 0x8004e6 <_ZL6CITIES+0x93>
     e0c:	00 93 e5 04 	sts	0x04E5, r16	; 0x8004e5 <_ZL6CITIES+0x92>
     e10:	69 e1       	ldi	r22, 0x19	; 25
     e12:	72 e0       	ldi	r23, 0x02	; 2
     e14:	87 ee       	ldi	r24, 0xE7	; 231
     e16:	94 e0       	ldi	r25, 0x04	; 4
     e18:	0e 94 7f 29 	call	0x52fe	; 0x52fe <_ZN6StringC1EPKc>
     e1c:	6d e1       	ldi	r22, 0x1D	; 29
     e1e:	72 e0       	ldi	r23, 0x02	; 2
     e20:	8d ee       	ldi	r24, 0xED	; 237
     e22:	94 e0       	ldi	r25, 0x04	; 4
     e24:	0e 94 7f 29 	call	0x52fe	; 0x52fe <_ZN6StringC1EPKc>
     e28:	8b e0       	ldi	r24, 0x0B	; 11
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	90 93 f4 04 	sts	0x04F4, r25	; 0x8004f4 <_ZL6CITIES+0xa1>
     e30:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <_ZL6CITIES+0xa0>
     e34:	64 e2       	ldi	r22, 0x24	; 36
     e36:	72 e0       	ldi	r23, 0x02	; 2
     e38:	85 ef       	ldi	r24, 0xF5	; 245
     e3a:	94 e0       	ldi	r25, 0x04	; 4
     e3c:	0e 94 7f 29 	call	0x52fe	; 0x52fe <_ZN6StringC1EPKc>
#endif

class dht
{
public:
    dht() { _disableIRQ = false; };
     e40:	10 92 50 04 	sts	0x0450, r1	; 0x800450 <DHT+0xd>
boolean motorOn = false;

double val_output;//Power supplied to the motor PWM value.
double Setpoint;
double Kp=3, Ki=5, Kd=0;
PID myPID(&abs_duration, &val_output, &Setpoint, Kp, Ki, Kd, DIRECT);
     e44:	a0 90 0c 01 	lds	r10, 0x010C	; 0x80010c <Ki>
     e48:	b0 90 0d 01 	lds	r11, 0x010D	; 0x80010d <Ki+0x1>
     e4c:	c0 90 0e 01 	lds	r12, 0x010E	; 0x80010e <Ki+0x2>
     e50:	d0 90 0f 01 	lds	r13, 0x010F	; 0x80010f <Ki+0x3>
     e54:	e0 90 10 01 	lds	r14, 0x0110	; 0x800110 <Kp>
     e58:	f0 90 11 01 	lds	r15, 0x0111	; 0x800111 <Kp+0x1>
     e5c:	00 91 12 01 	lds	r16, 0x0112	; 0x800112 <Kp+0x2>
     e60:	10 91 13 01 	lds	r17, 0x0113	; 0x800113 <Kp+0x3>
     e64:	1f 92       	push	r1
     e66:	1f 92       	push	r1
     e68:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <Kd+0x3>
     e6c:	8f 93       	push	r24
     e6e:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <Kd+0x2>
     e72:	8f 93       	push	r24
     e74:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <Kd+0x1>
     e78:	8f 93       	push	r24
     e7a:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <Kd>
     e7e:	8f 93       	push	r24
     e80:	24 e2       	ldi	r18, 0x24	; 36
     e82:	34 e0       	ldi	r19, 0x04	; 4
     e84:	48 e2       	ldi	r20, 0x28	; 40
     e86:	54 e0       	ldi	r21, 0x04	; 4
     e88:	6d e2       	ldi	r22, 0x2D	; 45
     e8a:	74 e0       	ldi	r23, 0x04	; 4
     e8c:	84 ee       	ldi	r24, 0xE4	; 228
     e8e:	93 e0       	ldi	r25, 0x03	; 3
     e90:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <_ZN3PIDC1EPdS0_S0_dddi>
	int hh_;
	int mm_;
	int ss_;
	int set_;
public:
	Zeit(int h, int m, int s){ hh_=h; mm_=m; ss_=s; set_ =0;};
     e94:	e9 e8       	ldi	r30, 0x89	; 137
     e96:	f3 e0       	ldi	r31, 0x03	; 3
     e98:	80 e1       	ldi	r24, 0x10	; 16
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	91 83       	std	Z+1, r25	; 0x01
     e9e:	80 83       	st	Z, r24
     ea0:	2b e3       	ldi	r18, 0x3B	; 59
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	33 83       	std	Z+3, r19	; 0x03
     ea6:	22 83       	std	Z+2, r18	; 0x02
     ea8:	8d e2       	ldi	r24, 0x2D	; 45
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	95 83       	std	Z+5, r25	; 0x05
     eae:	84 83       	std	Z+4, r24	; 0x04
     eb0:	17 82       	std	Z+7, r1	; 0x07
     eb2:	16 82       	std	Z+6, r1	; 0x06
     eb4:	e1 e8       	ldi	r30, 0x81	; 129
     eb6:	f3 e0       	ldi	r31, 0x03	; 3
     eb8:	11 82       	std	Z+1, r1	; 0x01
     eba:	10 82       	st	Z, r1
     ebc:	13 82       	std	Z+3, r1	; 0x03
     ebe:	12 82       	std	Z+2, r1	; 0x02
     ec0:	15 82       	std	Z+5, r1	; 0x05
     ec2:	14 82       	std	Z+4, r1	; 0x04
     ec4:	17 82       	std	Z+7, r1	; 0x07
     ec6:	16 82       	std	Z+6, r1	; 0x06
     ec8:	e9 e7       	ldi	r30, 0x79	; 121
     eca:	f3 e0       	ldi	r31, 0x03	; 3
     ecc:	41 e1       	ldi	r20, 0x11	; 17
     ece:	50 e0       	ldi	r21, 0x00	; 0
     ed0:	51 83       	std	Z+1, r21	; 0x01
     ed2:	40 83       	st	Z, r20
     ed4:	33 83       	std	Z+3, r19	; 0x03
     ed6:	22 83       	std	Z+2, r18	; 0x02
     ed8:	95 83       	std	Z+5, r25	; 0x05
     eda:	84 83       	std	Z+4, r24	; 0x04
     edc:	17 82       	std	Z+7, r1	; 0x07
     ede:	16 82       	std	Z+6, r1	; 0x06
     ee0:	e1 e7       	ldi	r30, 0x71	; 113
     ee2:	f3 e0       	ldi	r31, 0x03	; 3
     ee4:	82 e1       	ldi	r24, 0x12	; 18
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	91 83       	std	Z+1, r25	; 0x01
     eea:	80 83       	st	Z, r24
     eec:	13 82       	std	Z+3, r1	; 0x03
     eee:	12 82       	std	Z+2, r1	; 0x02
     ef0:	15 82       	std	Z+5, r1	; 0x05
     ef2:	14 82       	std	Z+4, r1	; 0x04
     ef4:	17 82       	std	Z+7, r1	; 0x07
     ef6:	16 82       	std	Z+6, r1	; 0x06
	int YYYY_;
	int MM_;
	int DD_;
	int set_;
public:
	Datum(int d, int m, int y){DD_=d; MM_=m;YYYY_=y; set_ = 0;};
     ef8:	e6 e6       	ldi	r30, 0x66	; 102
     efa:	f3 e0       	ldi	r31, 0x03	; 3
     efc:	4e e0       	ldi	r20, 0x0E	; 14
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	55 83       	std	Z+5, r21	; 0x05
     f02:	44 83       	std	Z+4, r20	; 0x04
     f04:	2c e0       	ldi	r18, 0x0C	; 12
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	33 83       	std	Z+3, r19	; 0x03
     f0a:	22 83       	std	Z+2, r18	; 0x02
     f0c:	83 ee       	ldi	r24, 0xE3	; 227
     f0e:	97 e0       	ldi	r25, 0x07	; 7
     f10:	91 83       	std	Z+1, r25	; 0x01
     f12:	80 83       	st	Z, r24
     f14:	17 82       	std	Z+7, r1	; 0x07
     f16:	16 82       	std	Z+6, r1	; 0x06
     f18:	ee e5       	ldi	r30, 0x5E	; 94
     f1a:	f3 e0       	ldi	r31, 0x03	; 3
     f1c:	75 82       	std	Z+5, r7	; 0x05
     f1e:	64 82       	std	Z+4, r6	; 0x04
     f20:	93 82       	std	Z+3, r9	; 0x03
     f22:	82 82       	std	Z+2, r8	; 0x02
     f24:	60 ed       	ldi	r22, 0xD0	; 208
     f26:	77 e0       	ldi	r23, 0x07	; 7
     f28:	71 83       	std	Z+1, r23	; 0x01
     f2a:	60 83       	st	Z, r22
     f2c:	17 82       	std	Z+7, r1	; 0x07
     f2e:	16 82       	std	Z+6, r1	; 0x06
     f30:	e6 e5       	ldi	r30, 0x56	; 86
     f32:	f3 e0       	ldi	r31, 0x03	; 3
     f34:	55 83       	std	Z+5, r21	; 0x05
     f36:	44 83       	std	Z+4, r20	; 0x04
     f38:	33 83       	std	Z+3, r19	; 0x03
     f3a:	22 83       	std	Z+2, r18	; 0x02
     f3c:	91 83       	std	Z+1, r25	; 0x01
     f3e:	80 83       	st	Z, r24
     f40:	17 82       	std	Z+7, r1	; 0x07
     f42:	16 82       	std	Z+6, r1	; 0x06
		break;
	}
	if(newmenu >= 0) menu = newmenu;

	} //else Klammer
}
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	ff 90       	pop	r15
     f5a:	ef 90       	pop	r14
     f5c:	df 90       	pop	r13
     f5e:	cf 90       	pop	r12
     f60:	bf 90       	pop	r11
     f62:	af 90       	pop	r10
     f64:	9f 90       	pop	r9
     f66:	8f 90       	pop	r8
     f68:	7f 90       	pop	r7
     f6a:	6f 90       	pop	r6
     f6c:	08 95       	ret

00000f6e <_GLOBAL__sub_D_lcd>:
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	cb ef       	ldi	r28, 0xFB	; 251
     f74:	d4 e0       	ldi	r29, 0x04	; 4
	String name;
	int timediff;
	String initials;
};

const struct CITY_TIME_DIF CITIES [] {
     f76:	2e 97       	sbiw	r28, 0x0e	; 14


hd44780_I2Cexp lcd;

//Strukt um Städte und deren Zweitverschiebung zu GMT (London) abzuspeichern
struct CITY_TIME_DIF {
     f78:	ce 01       	movw	r24, r28
     f7a:	08 96       	adiw	r24, 0x08	; 8
     f7c:	0e 94 11 29 	call	0x5222	; 0x5222 <_ZN6StringD1Ev>
     f80:	ce 01       	movw	r24, r28
     f82:	0e 94 11 29 	call	0x5222	; 0x5222 <_ZN6StringD1Ev>
	String name;
	int timediff;
	String initials;
};

const struct CITY_TIME_DIF CITIES [] {
     f86:	84 e0       	ldi	r24, 0x04	; 4
     f88:	c3 35       	cpi	r28, 0x53	; 83
     f8a:	d8 07       	cpc	r29, r24
     f8c:	a1 f7       	brne	.-24     	; 0xf76 <_GLOBAL__sub_D_lcd+0x8>
		break;
	}
	if(newmenu >= 0) menu = newmenu;

	} //else Klammer
}
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	08 95       	ret

00000f94 <_ZN14hd44780_I2Cexp14iosetBacklightEh>:
}

// iosetBacklight()  - set backlight brightness
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
     f98:	fc 01       	movw	r30, r24
{
	if(!_bl) // backlight control?
     f9a:	81 a5       	ldd	r24, Z+41	; 0x29
     f9c:	88 23       	and	r24, r24
     f9e:	71 f1       	breq	.+92     	; 0xffc <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x68>
     fa0:	92 a5       	ldd	r25, Z+42	; 0x2a
		return(hd44780::RV_ENOTSUP); // not backlight control support

	// dimvalue 0 is backlight off any other dimvalue is backlight on
	// configure backlight state mask according to active level
	if(((dimvalue) && (_blLevel == HIGH)) || 
     fa2:	66 23       	and	r22, r22
     fa4:	19 f0       	breq	.+6      	; 0xfac <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x18>
     fa6:	91 30       	cpi	r25, 0x01	; 1
     fa8:	29 f4       	brne	.+10     	; 0xfb4 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x1c>
			((dimvalue == 0) && (_blLevel == LOW)))
     fac:	91 11       	cpse	r25, r1
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
	{
		_blCurState = _bl;
     fb0:	83 a7       	std	Z+43, r24	; 0x2b
     fb2:	01 c0       	rjmp	.+2      	; 0xfb6 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x22>
	}
	else 
	{
		_blCurState = 0;
     fb4:	13 a6       	std	Z+43, r1	; 0x2b
     fb6:	ef 01       	movw	r28, r30
	}
	Wire.beginTransmission(_addr);
     fb8:	60 a1       	ldd	r22, Z+32	; 0x20
     fba:	86 e9       	ldi	r24, 0x96	; 150
     fbc:	95 e0       	ldi	r25, 0x05	; 5
     fbe:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
     fc2:	89 a1       	ldd	r24, Y+33	; 0x21
     fc4:	82 30       	cpi	r24, 0x02	; 2
     fc6:	31 f4       	brne	.+12     	; 0xfd4 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x40>
	{
		Wire.write(9); // point to GPIO
     fc8:	69 e0       	ldi	r22, 0x09	; 9
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	86 e9       	ldi	r24, 0x96	; 150
     fce:	95 e0       	ldi	r25, 0x05	; 5
     fd0:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7TwoWire5writeEi>
	}
	Wire.write( _blCurState );
     fd4:	6b a5       	ldd	r22, Y+43	; 0x2b
     fd6:	86 e9       	ldi	r24, 0x96	; 150
     fd8:	95 e0       	ldi	r25, 0x05	; 5
     fda:	0e 94 16 19 	call	0x322c	; 0x322c <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     fde:	86 e9       	ldi	r24, 0x96	; 150
     fe0:	95 e0       	ldi	r25, 0x05	; 5
     fe2:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_ZN7TwoWire15endTransmissionEv>
     fe6:	21 e0       	ldi	r18, 0x01	; 1
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 11       	cpse	r24, r1
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x5e>
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	88 27       	eor	r24, r24
     ff4:	99 27       	eor	r25, r25
     ff6:	82 1b       	sub	r24, r18
     ff8:	93 0b       	sbc	r25, r19
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x6c>
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
{
	if(!_bl) // backlight control?
		return(hd44780::RV_ENOTSUP); // not backlight control support
     ffc:	8d ef       	ldi	r24, 0xFD	; 253
     ffe:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write( _blCurState );
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR); // all is good
}
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	08 95       	ret

00001006 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>:
	return(0);
}


// write4bits - send a nibble to the LCD through i/o expander port
void write4bits(uint8_t value, hd44780::iotype type ) 
    1006:	cf 93       	push	r28
    1008:	fc 01       	movw	r30, r24
{
uint8_t gpioValue =  _blCurState;
    100a:	c3 a5       	ldd	r28, Z+43	; 0x2b
   
	// convert the value to an i/o expander port value
	// based on pin mappings
	if(value & (1 << 0))
    100c:	60 ff       	sbrs	r22, 0
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0xe>
		gpioValue |= _d4;
    1010:	85 a1       	ldd	r24, Z+37	; 0x25
    1012:	c8 2b       	or	r28, r24

	if(value & (1 << 1))
    1014:	61 ff       	sbrs	r22, 1
    1016:	02 c0       	rjmp	.+4      	; 0x101c <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x16>
		gpioValue |= _d5;
    1018:	86 a1       	ldd	r24, Z+38	; 0x26
    101a:	c8 2b       	or	r28, r24

	if(value & (1 << 2))
    101c:	62 ff       	sbrs	r22, 2
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x1e>
		gpioValue |= _d6;
    1020:	87 a1       	ldd	r24, Z+39	; 0x27
    1022:	c8 2b       	or	r28, r24

	if(value & (1 << 3))
    1024:	63 ff       	sbrs	r22, 3
    1026:	02 c0       	rjmp	.+4      	; 0x102c <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x26>
		gpioValue |= _d7;
    1028:	80 a5       	ldd	r24, Z+40	; 0x28
    102a:	c8 2b       	or	r28, r24


	if(type == hd44780::HD44780_IOdata) 
    102c:	41 30       	cpi	r20, 0x01	; 1
    102e:	11 f4       	brne	.+4      	; 0x1034 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x2e>
	{
		gpioValue |= _rs; // set RS high to send to data reg
    1030:	82 a1       	ldd	r24, Z+34	; 0x22
    1032:	c8 2b       	or	r28, r24
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
    1034:	64 a1       	ldd	r22, Z+36	; 0x24
    1036:	6c 2b       	or	r22, r28
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	86 e9       	ldi	r24, 0x96	; 150
    103c:	95 e0       	ldi	r25, 0x05	; 5
    103e:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7TwoWire5writeEi>
	Wire.write(gpioValue);		// with E LOW
    1042:	6c 2f       	mov	r22, r28
    1044:	86 e9       	ldi	r24, 0x96	; 150
    1046:	95 e0       	ldi	r25, 0x05	; 5
}
    1048:	cf 91       	pop	r28
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
	Wire.write(gpioValue);		// with E LOW
    104a:	0c 94 16 19 	jmp	0x322c	; 0x322c <_ZN7TwoWire5writeEh>

0000104e <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh>:
	return(rval);
}

// iowrite(type, value) - send either command or data byte to lcd
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
    104e:	8f 92       	push	r8
    1050:	9f 92       	push	r9
    1052:	af 92       	push	r10
    1054:	bf 92       	push	r11
    1056:	cf 92       	push	r12
    1058:	df 92       	push	r13
    105a:	ef 92       	push	r14
    105c:	ff 92       	push	r15
    105e:	0f 93       	push	r16
    1060:	1f 93       	push	r17
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	ec 01       	movw	r28, r24
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
    1068:	88 a1       	ldd	r24, Y+32	; 0x20
    106a:	88 23       	and	r24, r24
    106c:	09 f4       	brne	.+2      	; 0x1070 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x22>
    106e:	50 c0       	rjmp	.+160    	; 0x1110 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
    1070:	89 a1       	ldd	r24, Y+33	; 0x21
    1072:	88 23       	and	r24, r24
    1074:	09 f4       	brne	.+2      	; 0x1078 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x2a>
    1076:	4c c0       	rjmp	.+152    	; 0x1110 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
    1078:	14 2f       	mov	r17, r20
    107a:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
    107c:	8c 8c       	ldd	r8, Y+28	; 0x1c
    107e:	9d 8c       	ldd	r9, Y+29	; 0x1d
    1080:	ae 8c       	ldd	r10, Y+30	; 0x1e
    1082:	bf 8c       	ldd	r11, Y+31	; 0x1f
    1084:	c8 8c       	ldd	r12, Y+24	; 0x18
    1086:	d9 8c       	ldd	r13, Y+25	; 0x19
    1088:	ea 8c       	ldd	r14, Y+26	; 0x1a
    108a:	fb 8c       	ldd	r15, Y+27	; 0x1b
    108c:	8d e2       	ldi	r24, 0x2D	; 45
    108e:	c8 1a       	sub	r12, r24
    1090:	d1 08       	sbc	r13, r1
    1092:	e1 08       	sbc	r14, r1
    1094:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
    1096:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <micros>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	8c 19       	sub	r24, r12
    10a0:	9d 09       	sbc	r25, r13
    10a2:	ae 09       	sbc	r26, r14
    10a4:	bf 09       	sbc	r27, r15
    10a6:	88 15       	cp	r24, r8
    10a8:	99 05       	cpc	r25, r9
    10aa:	aa 05       	cpc	r26, r10
    10ac:	bb 05       	cpc	r27, r11
    10ae:	98 f3       	brcs	.-26     	; 0x1096 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x48>
	 */

	waitReady(-45);
   
	// grab i2c bus
	Wire.beginTransmission(_addr);
    10b0:	68 a1       	ldd	r22, Y+32	; 0x20
    10b2:	86 e9       	ldi	r24, 0x96	; 150
    10b4:	95 e0       	ldi	r25, 0x05	; 5
    10b6:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
    10ba:	89 a1       	ldd	r24, Y+33	; 0x21
    10bc:	82 30       	cpi	r24, 0x02	; 2
    10be:	31 f4       	brne	.+12     	; 0x10cc <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x7e>
	{
		Wire.write(9); // point to GPIO
    10c0:	69 e0       	ldi	r22, 0x09	; 9
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	86 e9       	ldi	r24, 0x96	; 150
    10c6:	95 e0       	ldi	r25, 0x05	; 5
    10c8:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7TwoWire5writeEi>
	}
	// send both nibbles in same i2c connection
	write4bits( (value >> 4), type );  // send upper nibble
    10cc:	61 2f       	mov	r22, r17
    10ce:	70 e0       	ldi	r23, 0x00	; 0
    10d0:	84 e0       	ldi	r24, 0x04	; 4
    10d2:	75 95       	asr	r23
    10d4:	67 95       	ror	r22
    10d6:	8a 95       	dec	r24
    10d8:	e1 f7       	brne	.-8      	; 0x10d2 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x84>
    10da:	40 2f       	mov	r20, r16
    10dc:	ce 01       	movw	r24, r28
    10de:	0e 94 03 08 	call	0x1006	; 0x1006 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	 * are used to reliably get the LCD and host in nibble sync
	 * with each other and to get the LCD into 4 bit mode.
	 * When sending a "4 bit command" only the upper nibble of
	 * of the 8 bit byte will presented on LCD signals D4-D7.
	 */
	if(type != hd44780::HD44780_IOcmd4bit)
    10e2:	02 30       	cpi	r16, 0x02	; 2
    10e4:	31 f0       	breq	.+12     	; 0x10f2 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xa4>
	{
		write4bits( (value & 0x0F), type); // lower nibble, if not 4bit cmd
    10e6:	61 2f       	mov	r22, r17
    10e8:	6f 70       	andi	r22, 0x0F	; 15
    10ea:	40 2f       	mov	r20, r16
    10ec:	ce 01       	movw	r24, r28
    10ee:	0e 94 03 08 	call	0x1006	; 0x1006 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	}
	if(Wire.endTransmission())
    10f2:	86 e9       	ldi	r24, 0x96	; 150
    10f4:	95 e0       	ldi	r25, 0x05	; 5
    10f6:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_ZN7TwoWire15endTransmissionEv>
    10fa:	21 e0       	ldi	r18, 0x01	; 1
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	81 11       	cpse	r24, r1
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xb8>
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	88 27       	eor	r24, r24
    1108:	99 27       	eor	r25, r25
    110a:	82 1b       	sub	r24, r18
    110c:	93 0b       	sbc	r25, r19
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc6>
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
    1110:	8c ef       	ldi	r24, 0xFC	; 252
    1112:	9f ef       	ldi	r25, 0xFF	; 255
	}
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR);
}
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	ff 90       	pop	r15
    111e:	ef 90       	pop	r14
    1120:	df 90       	pop	r13
    1122:	cf 90       	pop	r12
    1124:	bf 90       	pop	r11
    1126:	af 90       	pop	r10
    1128:	9f 90       	pop	r9
    112a:	8f 90       	pop	r8
    112c:	08 95       	ret

0000112e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE>:
// ioread(type) - read a byte from LCD DDRAM
//
// returns:
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
    112e:	8f 92       	push	r8
    1130:	9f 92       	push	r9
    1132:	af 92       	push	r10
    1134:	bf 92       	push	r11
    1136:	cf 92       	push	r12
    1138:	df 92       	push	r13
    113a:	ef 92       	push	r14
    113c:	ff 92       	push	r15
    113e:	0f 93       	push	r16
    1140:	1f 93       	push	r17
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	ec 01       	movw	r28, r24
{
uint8_t gpioValue =  _blCurState;
    1148:	1b a5       	ldd	r17, Y+43	; 0x2b
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
    114a:	88 a1       	ldd	r24, Y+32	; 0x20
    114c:	88 23       	and	r24, r24
    114e:	09 f4       	brne	.+2      	; 0x1152 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x24>
    1150:	f6 c0       	rjmp	.+492    	; 0x133e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
    1152:	89 a1       	ldd	r24, Y+33	; 0x21
    1154:	88 23       	and	r24, r24
    1156:	09 f4       	brne	.+2      	; 0x115a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x2c>
    1158:	f2 c0       	rjmp	.+484    	; 0x133e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
		return(hd44780::RV_ENXIO);

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
    115a:	82 30       	cpi	r24, 0x02	; 2
    115c:	09 f4       	brne	.+2      	; 0x1160 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x32>
    115e:	f1 c0       	rjmp	.+482    	; 0x1342 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
	{
		return(hd44780::RV_ENOTSUP);
	}

	// check if reads supported
	if(!_rw)
    1160:	8b a1       	ldd	r24, Y+35	; 0x23
    1162:	88 23       	and	r24, r24
    1164:	09 f4       	brne	.+2      	; 0x1168 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x3a>
    1166:	ed c0       	rjmp	.+474    	; 0x1342 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
    1168:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
    116a:	8c 8c       	ldd	r8, Y+28	; 0x1c
    116c:	9d 8c       	ldd	r9, Y+29	; 0x1d
    116e:	ae 8c       	ldd	r10, Y+30	; 0x1e
    1170:	bf 8c       	ldd	r11, Y+31	; 0x1f
    1172:	c8 8c       	ldd	r12, Y+24	; 0x18
    1174:	d9 8c       	ldd	r13, Y+25	; 0x19
    1176:	ea 8c       	ldd	r14, Y+26	; 0x1a
    1178:	fb 8c       	ldd	r15, Y+27	; 0x1b
    117a:	8d e2       	ldi	r24, 0x2D	; 45
    117c:	c8 1a       	sub	r12, r24
    117e:	d1 08       	sbc	r13, r1
    1180:	e1 08       	sbc	r14, r1
    1182:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
    1184:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <micros>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22
    118c:	8c 19       	sub	r24, r12
    118e:	9d 09       	sbc	r25, r13
    1190:	ae 09       	sbc	r26, r14
    1192:	bf 09       	sbc	r27, r15
    1194:	88 15       	cp	r24, r8
    1196:	99 05       	cpc	r25, r9
    1198:	aa 05       	cpc	r26, r10
    119a:	bb 05       	cpc	r27, r11
    119c:	98 f3       	brcs	.-26     	; 0x1184 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x56>
    119e:	8d a1       	ldd	r24, Y+37	; 0x25
    11a0:	18 2b       	or	r17, r24
    11a2:	8e a1       	ldd	r24, Y+38	; 0x26
    11a4:	18 2b       	or	r17, r24
    11a6:	8f a1       	ldd	r24, Y+39	; 0x27
    11a8:	18 2b       	or	r17, r24
   
	// put all the expander LCD data pins into input mode.
	// PCF8574 psuedo inputs use pullups so setting them to 1
	// makes them suitible for inputs.

	gpioValue |= _d4|_d5|_d6|_d7;
    11aa:	88 a5       	ldd	r24, Y+40	; 0x28
    11ac:	18 2b       	or	r17, r24

	// set RS based on type of read (data or status/cmd)
	if(type == hd44780::HD44780_IOdata) 
    11ae:	01 30       	cpi	r16, 0x01	; 1
    11b0:	11 f4       	brne	.+4      	; 0x11b6 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x88>
	{
		gpioValue |= _rs; // RS high to read data reg
    11b2:	8a a1       	ldd	r24, Y+34	; 0x22
    11b4:	18 2b       	or	r17, r24
	}

	gpioValue |= _rw; // r/w high for reading
    11b6:	8b a1       	ldd	r24, Y+35	; 0x23
    11b8:	18 2b       	or	r17, r24

	// write all the bits to the expander port
	
	Wire.beginTransmission(_addr);
    11ba:	68 a1       	ldd	r22, Y+32	; 0x20
    11bc:	86 e9       	ldi	r24, 0x96	; 150
    11be:	95 e0       	ldi	r25, 0x05	; 5
    11c0:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue);		// d4-d7 are inputs, RS, r/w high, E LOW
    11c4:	61 2f       	mov	r22, r17
    11c6:	86 e9       	ldi	r24, 0x96	; 150
    11c8:	95 e0       	ldi	r25, 0x05	; 5
    11ca:	0e 94 16 19 	call	0x322c	; 0x322c <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    11ce:	86 e9       	ldi	r24, 0x96	; 150
    11d0:	95 e0       	ldi	r25, 0x05	; 5
    11d2:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_ZN7TwoWire15endTransmissionEv>
    11d6:	88 23       	and	r24, r24
    11d8:	19 f0       	breq	.+6      	; 0x11e0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xb2>
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;
    11da:	0f ef       	ldi	r16, 0xFF	; 255
    11dc:	1f ef       	ldi	r17, 0xFF	; 255
    11de:	9d c0       	rjmp	.+314    	; 0x131a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ec>
	if(Wire.endTransmission())
		goto returnStatus;


	// raise E to read the data.
	Wire.beginTransmission(_addr);
    11e0:	68 a1       	ldd	r22, Y+32	; 0x20
    11e2:	86 e9       	ldi	r24, 0x96	; 150
    11e4:	95 e0       	ldi	r25, 0x05	; 5
    11e6:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raises E 
    11ea:	6c a1       	ldd	r22, Y+36	; 0x24
    11ec:	61 2b       	or	r22, r17
    11ee:	70 e0       	ldi	r23, 0x00	; 0
    11f0:	86 e9       	ldi	r24, 0x96	; 150
    11f2:	95 e0       	ldi	r25, 0x05	; 5
    11f4:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
    11f8:	86 e9       	ldi	r24, 0x96	; 150
    11fa:	95 e0       	ldi	r25, 0x05	; 5
    11fc:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_ZN7TwoWire15endTransmissionEv>
    1200:	81 11       	cpse	r24, r1
    1202:	eb cf       	rjmp	.-42     	; 0x11da <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// read the expander port to get the upper nibble of the byte
	Wire.requestFrom((int)_addr, 1);
    1204:	68 a1       	ldd	r22, Y+32	; 0x20
    1206:	70 e0       	ldi	r23, 0x00	; 0
    1208:	41 e0       	ldi	r20, 0x01	; 1
    120a:	50 e0       	ldi	r21, 0x00	; 0
    120c:	86 e9       	ldi	r24, 0x96	; 150
    120e:	95 e0       	ldi	r25, 0x05	; 5
    1210:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <_ZN7TwoWire11requestFromEii>
	iodata = Wire.read();
    1214:	86 e9       	ldi	r24, 0x96	; 150
    1216:	95 e0       	ldi	r25, 0x05	; 5
    1218:	0e 94 8f 18 	call	0x311e	; 0x311e <_ZN7TwoWire4readEv>
    121c:	7c 01       	movw	r14, r24
	if(iodata < 0) // did we not receive a byte?
    121e:	97 fd       	sbrc	r25, 7
    1220:	dc cf       	rjmp	.-72     	; 0x11da <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
    1222:	68 a1       	ldd	r22, Y+32	; 0x20
    1224:	86 e9       	ldi	r24, 0x96	; 150
    1226:	95 e0       	ldi	r25, 0x05	; 5
    1228:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
    122c:	61 2f       	mov	r22, r17
    122e:	86 e9       	ldi	r24, 0x96	; 150
    1230:	95 e0       	ldi	r25, 0x05	; 5
    1232:	0e 94 16 19 	call	0x322c	; 0x322c <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    1236:	86 e9       	ldi	r24, 0x96	; 150
    1238:	95 e0       	ldi	r25, 0x05	; 5
    123a:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_ZN7TwoWire15endTransmissionEv>
    123e:	81 11       	cpse	r24, r1
    1240:	cc cf       	rjmp	.-104    	; 0x11da <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
    1242:	8d a1       	ldd	r24, Y+37	; 0x25
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	8e 21       	and	r24, r14
    1248:	9f 21       	and	r25, r15
    124a:	89 2b       	or	r24, r25
    124c:	11 f4       	brne	.+4      	; 0x1252 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x124>
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
    124e:	00 e0       	ldi	r16, 0x00	; 0
    1250:	01 c0       	rjmp	.+2      	; 0x1254 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x126>
	if(Wire.endTransmission())
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
		data |= (1 << 4);
    1252:	00 e1       	ldi	r16, 0x10	; 16

	if(iodata & _d5)
    1254:	8e a1       	ldd	r24, Y+38	; 0x26
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	8e 21       	and	r24, r14
    125a:	9f 21       	and	r25, r15
    125c:	89 2b       	or	r24, r25
    125e:	09 f0       	breq	.+2      	; 0x1262 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x134>
		data |= (1 << 5);
    1260:	00 62       	ori	r16, 0x20	; 32

	if(iodata & _d6)
    1262:	8f a1       	ldd	r24, Y+39	; 0x27
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	8e 21       	and	r24, r14
    1268:	9f 21       	and	r25, r15
    126a:	89 2b       	or	r24, r25
    126c:	09 f0       	breq	.+2      	; 0x1270 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x142>
		data |= (1 << 6);
    126e:	00 64       	ori	r16, 0x40	; 64

	if(iodata & _d7)
    1270:	88 a5       	ldd	r24, Y+40	; 0x28
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	e8 22       	and	r14, r24
    1276:	f9 22       	and	r15, r25
    1278:	ef 28       	or	r14, r15
    127a:	09 f0       	breq	.+2      	; 0x127e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x150>
		data |= (1 << 7);
    127c:	00 68       	ori	r16, 0x80	; 128
	
	Wire.beginTransmission(_addr);
    127e:	68 a1       	ldd	r22, Y+32	; 0x20
    1280:	86 e9       	ldi	r24, 0x96	; 150
    1282:	95 e0       	ldi	r25, 0x05	; 5
    1284:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raise E to read next nibble
    1288:	6c a1       	ldd	r22, Y+36	; 0x24
    128a:	61 2b       	or	r22, r17
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	86 e9       	ldi	r24, 0x96	; 150
    1290:	95 e0       	ldi	r25, 0x05	; 5
    1292:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
    1296:	86 e9       	ldi	r24, 0x96	; 150
    1298:	95 e0       	ldi	r25, 0x05	; 5
    129a:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_ZN7TwoWire15endTransmissionEv>
    129e:	81 11       	cpse	r24, r1
    12a0:	9c cf       	rjmp	.-200    	; 0x11da <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>

	// read the expander port to get the lower nibble of the byte
	// We can't look at the return value from requestFrom() on the TineyWireM
	// library as it doesn't work like it is supposed to.
	// So we look at the return status from read() instead.
	Wire.requestFrom((int)_addr, 1);
    12a2:	68 a1       	ldd	r22, Y+32	; 0x20
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	41 e0       	ldi	r20, 0x01	; 1
    12a8:	50 e0       	ldi	r21, 0x00	; 0
    12aa:	86 e9       	ldi	r24, 0x96	; 150
    12ac:	95 e0       	ldi	r25, 0x05	; 5
    12ae:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <_ZN7TwoWire11requestFromEii>

	iodata = Wire.read();
    12b2:	86 e9       	ldi	r24, 0x96	; 150
    12b4:	95 e0       	ldi	r25, 0x05	; 5
    12b6:	0e 94 8f 18 	call	0x311e	; 0x311e <_ZN7TwoWire4readEv>
    12ba:	7c 01       	movw	r14, r24

	if(iodata < 0) // did we not receive a byte?
    12bc:	97 fd       	sbrc	r25, 7
    12be:	8d cf       	rjmp	.-230    	; 0x11da <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
    12c0:	68 a1       	ldd	r22, Y+32	; 0x20
    12c2:	86 e9       	ldi	r24, 0x96	; 150
    12c4:	95 e0       	ldi	r25, 0x05	; 5
    12c6:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
    12ca:	61 2f       	mov	r22, r17
    12cc:	86 e9       	ldi	r24, 0x96	; 150
    12ce:	95 e0       	ldi	r25, 0x05	; 5
    12d0:	0e 94 16 19 	call	0x322c	; 0x322c <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    12d4:	86 e9       	ldi	r24, 0x96	; 150
    12d6:	95 e0       	ldi	r25, 0x05	; 5
    12d8:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_ZN7TwoWire15endTransmissionEv>
    12dc:	81 11       	cpse	r24, r1
    12de:	7d cf       	rjmp	.-262    	; 0x11da <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into lower nibble of byte
	if(iodata & _d4)
    12e0:	8d a1       	ldd	r24, Y+37	; 0x25
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	8e 21       	and	r24, r14
    12e6:	9f 21       	and	r25, r15
    12e8:	89 2b       	or	r24, r25
    12ea:	09 f0       	breq	.+2      	; 0x12ee <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1c0>
		data |= (1 << 0);
    12ec:	01 60       	ori	r16, 0x01	; 1

	if(iodata & _d5)
    12ee:	8e a1       	ldd	r24, Y+38	; 0x26
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	8e 21       	and	r24, r14
    12f4:	9f 21       	and	r25, r15
    12f6:	89 2b       	or	r24, r25
    12f8:	09 f0       	breq	.+2      	; 0x12fc <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ce>
		data |= (1 << 1);
    12fa:	02 60       	ori	r16, 0x02	; 2

	if(iodata & _d6)
    12fc:	8f a1       	ldd	r24, Y+39	; 0x27
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	8e 21       	and	r24, r14
    1302:	9f 21       	and	r25, r15
    1304:	89 2b       	or	r24, r25
    1306:	09 f0       	breq	.+2      	; 0x130a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1dc>
		data |= (1 << 2);
    1308:	04 60       	ori	r16, 0x04	; 4

	if(iodata & _d7)
    130a:	88 a5       	ldd	r24, Y+40	; 0x28
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	e8 22       	and	r14, r24
    1310:	f9 22       	and	r15, r25
    1312:	ef 28       	or	r14, r15
    1314:	09 f0       	breq	.+2      	; 0x1318 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ea>
		data |= (1 << 3);
    1316:	08 60       	ori	r16, 0x08	; 8

	rval = data;
    1318:	10 e0       	ldi	r17, 0x00	; 0

returnStatus:

	// try to put gpio port back to all outputs state with WR signal low for writes
	Wire.beginTransmission(_addr);
    131a:	68 a1       	ldd	r22, Y+32	; 0x20
    131c:	86 e9       	ldi	r24, 0x96	; 150
    131e:	95 e0       	ldi	r25, 0x05	; 5
    1320:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(_blCurState);		// with E LOW
    1324:	6b a5       	ldd	r22, Y+43	; 0x2b
    1326:	86 e9       	ldi	r24, 0x96	; 150
    1328:	95 e0       	ldi	r25, 0x05	; 5
    132a:	0e 94 16 19 	call	0x322c	; 0x322c <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    132e:	86 e9       	ldi	r24, 0x96	; 150
    1330:	95 e0       	ldi	r25, 0x05	; 5
    1332:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_ZN7TwoWire15endTransmissionEv>
    1336:	88 23       	and	r24, r24
    1338:	39 f0       	breq	.+14     	; 0x1348 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21a>
		rval = hd44780::RV_EIO;
    133a:	8f ef       	ldi	r24, 0xFF	; 255
    133c:	03 c0       	rjmp	.+6      	; 0x1344 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
    133e:	8c ef       	ldi	r24, 0xFC	; 252
    1340:	01 c0       	rjmp	.+2      	; 0x1344 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
	{
		return(hd44780::RV_ENOTSUP);
    1342:	8d ef       	ldi	r24, 0xFD	; 253
    1344:	9f ef       	ldi	r25, 0xFF	; 255
    1346:	01 c0       	rjmp	.+2      	; 0x134a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21c>
    1348:	c8 01       	movw	r24, r16
	Wire.write(_blCurState);		// with E LOW
	if(Wire.endTransmission())
		rval = hd44780::RV_EIO;

	return(rval);
}
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	1f 91       	pop	r17
    1350:	0f 91       	pop	r16
    1352:	ff 90       	pop	r15
    1354:	ef 90       	pop	r14
    1356:	df 90       	pop	r13
    1358:	cf 90       	pop	r12
    135a:	bf 90       	pop	r11
    135c:	af 90       	pop	r10
    135e:	9f 90       	pop	r9
    1360:	8f 90       	pop	r8
    1362:	08 95       	ret

00001364 <_ZN14hd44780_I2Cexp11autocfg8574Ev>:
 * a new resistor to  connect to the base of the transistor.
 * 
 * As a result the SYDZ backpack cannot use autoconfiguration.
 */

int autocfg8574()
    1364:	0f 93       	push	r16
    1366:	1f 93       	push	r17
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	ec 01       	movw	r28, r24
uint8_t data, data2;
uint8_t rs, rw, en, d4, d5, d6, d7, bl, blLevel;

	// First put a 0xff in the output port

	Wire.beginTransmission(_addr);
    136e:	68 a1       	ldd	r22, Y+32	; 0x20
    1370:	86 e9       	ldi	r24, 0x96	; 150
    1372:	95 e0       	ldi	r25, 0x05	; 5
    1374:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0xff);
    1378:	6f ef       	ldi	r22, 0xFF	; 255
    137a:	86 e9       	ldi	r24, 0x96	; 150
    137c:	95 e0       	ldi	r25, 0x05	; 5
    137e:	0e 94 16 19 	call	0x322c	; 0x322c <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    1382:	86 e9       	ldi	r24, 0x96	; 150
    1384:	95 e0       	ldi	r25, 0x05	; 5
    1386:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_ZN7TwoWire15endTransmissionEv>

	// now read back from the port

	Wire.requestFrom((int)_addr, 1);
    138a:	68 a1       	ldd	r22, Y+32	; 0x20
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	41 e0       	ldi	r20, 0x01	; 1
    1390:	50 e0       	ldi	r21, 0x00	; 0
    1392:	86 e9       	ldi	r24, 0x96	; 150
    1394:	95 e0       	ldi	r25, 0x05	; 5
    1396:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    139a:	86 e9       	ldi	r24, 0x96	; 150
    139c:	95 e0       	ldi	r25, 0x05	; 5
    139e:	0e 94 8f 18 	call	0x311e	; 0x311e <_ZN7TwoWire4readEv>
    13a2:	8c 01       	movw	r16, r24

	// Turn off bit2 to attempt to see if en is bit 2,
	// if it is, it should change all lcd data bits to 1s
	
	Wire.beginTransmission(_addr);
    13a4:	68 a1       	ldd	r22, Y+32	; 0x20
    13a6:	86 e9       	ldi	r24, 0x96	; 150
    13a8:	95 e0       	ldi	r25, 0x05	; 5
    13aa:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) (~(1 << 2)) );
    13ae:	6b ef       	ldi	r22, 0xFB	; 251
    13b0:	86 e9       	ldi	r24, 0x96	; 150
    13b2:	95 e0       	ldi	r25, 0x05	; 5
    13b4:	0e 94 16 19 	call	0x322c	; 0x322c <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    13b8:	86 e9       	ldi	r24, 0x96	; 150
    13ba:	95 e0       	ldi	r25, 0x05	; 5
    13bc:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_ZN7TwoWire15endTransmissionEv>

	// read back data
	Wire.requestFrom((int)_addr, 1);
    13c0:	68 a1       	ldd	r22, Y+32	; 0x20
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	41 e0       	ldi	r20, 0x01	; 1
    13c6:	50 e0       	ldi	r21, 0x00	; 0
    13c8:	86 e9       	ldi	r24, 0x96	; 150
    13ca:	95 e0       	ldi	r25, 0x05	; 5
    13cc:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <_ZN7TwoWire11requestFromEii>
	data2 = Wire.read();
    13d0:	86 e9       	ldi	r24, 0x96	; 150
    13d2:	95 e0       	ldi	r25, 0x05	; 5
    13d4:	0e 94 8f 18 	call	0x311e	; 0x311e <_ZN7TwoWire4readEv>

	// If lower 3 bits are high and all 4 upper bits are high after clearing bit 2
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
    13d8:	98 01       	movw	r18, r16
    13da:	27 70       	andi	r18, 0x07	; 7
    13dc:	33 27       	eor	r19, r19
    13de:	27 30       	cpi	r18, 0x07	; 7
    13e0:	31 05       	cpc	r19, r1
    13e2:	b1 f4       	brne	.+44     	; 0x1410 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
    13e4:	80 7f       	andi	r24, 0xF0	; 240
    13e6:	99 27       	eor	r25, r25
    13e8:	80 3f       	cpi	r24, 0xF0	; 240
    13ea:	91 05       	cpc	r25, r1
    13ec:	89 f4       	brne	.+34     	; 0x1410 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
    13ee:	83 e0       	ldi	r24, 0x03	; 3
    13f0:	16 95       	lsr	r17
    13f2:	07 95       	ror	r16
    13f4:	8a 95       	dec	r24
    13f6:	e1 f7       	brne	.-8      	; 0x13f0 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x8c>
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	08 27       	eor	r16, r24
    13fc:	01 70       	andi	r16, 0x01	; 1
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
	{
		rs = 0; rw = 1; en = 2; d4 = 4; d5 = 5; d6 = 6; d7 = 7; bl = 3;
    13fe:	43 e0       	ldi	r20, 0x03	; 3
    1400:	57 e0       	ldi	r21, 0x07	; 7
    1402:	66 e0       	ldi	r22, 0x06	; 6
    1404:	75 e0       	ldi	r23, 0x05	; 5
    1406:	e4 e0       	ldi	r30, 0x04	; 4
    1408:	22 e0       	ldi	r18, 0x02	; 2
    140a:	f1 e0       	ldi	r31, 0x01	; 1
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	34 c0       	rjmp	.+104    	; 0x1478 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x114>
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
		}
	}
	else if((data & 0x70) == 0x70)
    1410:	c8 01       	movw	r24, r16
    1412:	80 77       	andi	r24, 0x70	; 112
    1414:	99 27       	eor	r25, r25
    1416:	80 37       	cpi	r24, 0x70	; 112
    1418:	91 05       	cpc	r25, r1
    141a:	09 f0       	breq	.+2      	; 0x141e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xba>
    141c:	68 c0       	rjmp	.+208    	; 0x14ee <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18a>
		// both use bit 7 for backlight control

		// Turn off the en bit which should change the data bits
		// bit 4 on the mjkdz is en so we try that bit
	
		Wire.beginTransmission(_addr);
    141e:	68 a1       	ldd	r22, Y+32	; 0x20
    1420:	86 e9       	ldi	r24, 0x96	; 150
    1422:	95 e0       	ldi	r25, 0x05	; 5
    1424:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t) (~(1 << 4)) );
    1428:	6f ee       	ldi	r22, 0xEF	; 239
    142a:	86 e9       	ldi	r24, 0x96	; 150
    142c:	95 e0       	ldi	r25, 0x05	; 5
    142e:	0e 94 16 19 	call	0x322c	; 0x322c <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    1432:	86 e9       	ldi	r24, 0x96	; 150
    1434:	95 e0       	ldi	r25, 0x05	; 5
    1436:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_ZN7TwoWire15endTransmissionEv>

		// read back data
		Wire.requestFrom((int)_addr, 1);
    143a:	68 a1       	ldd	r22, Y+32	; 0x20
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	41 e0       	ldi	r20, 0x01	; 1
    1440:	50 e0       	ldi	r21, 0x00	; 0
    1442:	86 e9       	ldi	r24, 0x96	; 150
    1444:	95 e0       	ldi	r25, 0x05	; 5
    1446:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <_ZN7TwoWire11requestFromEii>
		data2 = Wire.read();
    144a:	86 e9       	ldi	r24, 0x96	; 150
    144c:	95 e0       	ldi	r25, 0x05	; 5
    144e:	0e 94 8f 18 	call	0x311e	; 0x311e <_ZN7TwoWire4readEv>
		// look at data bits and see if they changed
		// if they changed to 0xf, then en was bit 4 and it is mjdkz
		// this will happen since when E is low the LCD is not
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
    1452:	8f 70       	andi	r24, 0x0F	; 15
    1454:	99 27       	eor	r25, r25
    1456:	0f 97       	sbiw	r24, 0x0f	; 15
    1458:	19 f0       	breq	.+6      	; 0x1460 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xfc>
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
		}
		else
		{
			// electrofun LCDXIO
			rs = 4; rw = 5; en = 6; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
    145a:	26 e0       	ldi	r18, 0x06	; 6
    145c:	34 e0       	ldi	r19, 0x04	; 4
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x100>
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
		{
			// mjkdz
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
    1460:	24 e0       	ldi	r18, 0x04	; 4
    1462:	36 e0       	ldi	r19, 0x06	; 6
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
    1464:	00 95       	com	r16
    1466:	00 1f       	adc	r16, r16
    1468:	00 27       	eor	r16, r16
    146a:	00 1f       	adc	r16, r16
    146c:	47 e0       	ldi	r20, 0x07	; 7
    146e:	53 e0       	ldi	r21, 0x03	; 3
    1470:	62 e0       	ldi	r22, 0x02	; 2
    1472:	71 e0       	ldi	r23, 0x01	; 1
    1474:	e0 e0       	ldi	r30, 0x00	; 0
    1476:	f5 e0       	ldi	r31, 0x05	; 5
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	dc 01       	movw	r26, r24
    147e:	01 c0       	rjmp	.+2      	; 0x1482 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11e>
    1480:	aa 0f       	add	r26, r26
    1482:	3a 95       	dec	r19
    1484:	ea f7       	brpl	.-6      	; 0x1480 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11c>
    1486:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
    1488:	dc 01       	movw	r26, r24
    148a:	01 c0       	rjmp	.+2      	; 0x148e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x12a>
    148c:	aa 0f       	add	r26, r26
    148e:	fa 95       	dec	r31
    1490:	ea f7       	brpl	.-6      	; 0x148c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x128>
    1492:	ab a3       	std	Y+35, r26	; 0x23
	else
		_rw = 0; // no r/w control

	_en = ( 1 << en );
    1494:	dc 01       	movw	r26, r24
    1496:	02 c0       	rjmp	.+4      	; 0x149c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x138>
    1498:	aa 0f       	add	r26, r26
    149a:	bb 1f       	adc	r27, r27
    149c:	2a 95       	dec	r18
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x134>
    14a0:	ac a3       	std	Y+36, r26	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
    14a2:	9c 01       	movw	r18, r24
    14a4:	01 c0       	rjmp	.+2      	; 0x14a8 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x144>
    14a6:	22 0f       	add	r18, r18
    14a8:	ea 95       	dec	r30
    14aa:	ea f7       	brpl	.-6      	; 0x14a6 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x142>
    14ac:	2d a3       	std	Y+37, r18	; 0x25
	_d5 = ( 1 << d5 );
    14ae:	9c 01       	movw	r18, r24
    14b0:	01 c0       	rjmp	.+2      	; 0x14b4 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x150>
    14b2:	22 0f       	add	r18, r18
    14b4:	7a 95       	dec	r23
    14b6:	ea f7       	brpl	.-6      	; 0x14b2 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x14e>
    14b8:	2e a3       	std	Y+38, r18	; 0x26
	_d6 = ( 1 << d6 );
    14ba:	9c 01       	movw	r18, r24
    14bc:	01 c0       	rjmp	.+2      	; 0x14c0 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15c>
    14be:	22 0f       	add	r18, r18
    14c0:	6a 95       	dec	r22
    14c2:	ea f7       	brpl	.-6      	; 0x14be <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15a>
    14c4:	2f a3       	std	Y+39, r18	; 0x27
	_d7 = ( 1 << d7 );   
    14c6:	9c 01       	movw	r18, r24
    14c8:	01 c0       	rjmp	.+2      	; 0x14cc <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x168>
    14ca:	22 0f       	add	r18, r18
    14cc:	5a 95       	dec	r21
    14ce:	ea f7       	brpl	.-6      	; 0x14ca <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x166>
    14d0:	28 a7       	std	Y+40, r18	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
    14d2:	01 c0       	rjmp	.+2      	; 0x14d6 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x172>
    14d4:	88 0f       	add	r24, r24
    14d6:	4a 95       	dec	r20
    14d8:	ea f7       	brpl	.-6      	; 0x14d4 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x170>
    14da:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
    14dc:	0a a7       	std	Y+42, r16	; 0x2a
	// set default bl state to backlight on
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
    14de:	01 30       	cpi	r16, 0x01	; 1
    14e0:	11 f4       	brne	.+4      	; 0x14e6 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x182>
		_blCurState = _bl;
    14e2:	8b a7       	std	Y+43, r24	; 0x2b
    14e4:	01 c0       	rjmp	.+2      	; 0x14e8 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x184>
	else
		_blCurState = 0;
    14e6:	1b a6       	std	Y+43, r1	; 0x2b
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18e>
		}
	}
	else
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
    14ee:	8d ef       	ldi	r24, 0xFD	; 253
    14f0:	9f ef       	ldi	r25, 0xFF	; 255
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	1f 91       	pop	r17
    14f8:	0f 91       	pop	r16
    14fa:	08 95       	ret

000014fc <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>:
 * if GP1 is low then the board is the BOARD_XXX board
 * The BOARD_XXX may not work as GP1 is used for D5 on WIDEHK and LCDPLUG
 *
 *
 */
int autocfgMCP23008()
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	ec 01       	movw	r28, r24

	/*
	 * Now set up output port
	 * Make no assumptions as to the state of IOCON BYTE mode
	 */
	Wire.beginTransmission(_addr);
    1502:	68 a1       	ldd	r22, Y+32	; 0x20
    1504:	86 e9       	ldi	r24, 0x96	; 150
    1506:	95 e0       	ldi	r25, 0x05	; 5
    1508:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t)0); // point to IODIR
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	86 e9       	ldi	r24, 0x96	; 150
    1510:	95 e0       	ldi	r25, 0x05	; 5
    1512:	0e 94 16 19 	call	0x322c	; 0x322c <_ZN7TwoWire5writeEh>
	Wire.write(0xff); // all pins inputs
    1516:	6f ef       	ldi	r22, 0xFF	; 255
    1518:	70 e0       	ldi	r23, 0x00	; 0
    151a:	86 e9       	ldi	r24, 0x96	; 150
    151c:	95 e0       	ldi	r25, 0x05	; 5
    151e:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    1522:	86 e9       	ldi	r24, 0x96	; 150
    1524:	95 e0       	ldi	r25, 0x05	; 5
    1526:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_ZN7TwoWire15endTransmissionEv>

	Wire.beginTransmission(_addr);
    152a:	68 a1       	ldd	r22, Y+32	; 0x20
    152c:	86 e9       	ldi	r24, 0x96	; 150
    152e:	95 e0       	ldi	r25, 0x05	; 5
    1530:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(6); // point to GPPU
    1534:	66 e0       	ldi	r22, 0x06	; 6
    1536:	70 e0       	ldi	r23, 0x00	; 0
    1538:	86 e9       	ldi	r24, 0x96	; 150
    153a:	95 e0       	ldi	r25, 0x05	; 5
    153c:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7TwoWire5writeEi>
	Wire.write(0xff); // turn on pullups
    1540:	6f ef       	ldi	r22, 0xFF	; 255
    1542:	70 e0       	ldi	r23, 0x00	; 0
    1544:	86 e9       	ldi	r24, 0x96	; 150
    1546:	95 e0       	ldi	r25, 0x05	; 5
    1548:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    154c:	86 e9       	ldi	r24, 0x96	; 150
    154e:	95 e0       	ldi	r25, 0x05	; 5
    1550:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_ZN7TwoWire15endTransmissionEv>

	/*
	 * read from the GPIO port
	 */

	Wire.beginTransmission(_addr);
    1554:	68 a1       	ldd	r22, Y+32	; 0x20
    1556:	86 e9       	ldi	r24, 0x96	; 150
    1558:	95 e0       	ldi	r25, 0x05	; 5
    155a:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(9); // point to GPIO
    155e:	69 e0       	ldi	r22, 0x09	; 9
    1560:	70 e0       	ldi	r23, 0x00	; 0
    1562:	86 e9       	ldi	r24, 0x96	; 150
    1564:	95 e0       	ldi	r25, 0x05	; 5
    1566:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    156a:	86 e9       	ldi	r24, 0x96	; 150
    156c:	95 e0       	ldi	r25, 0x05	; 5
    156e:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom((int)_addr, 1);
    1572:	68 a1       	ldd	r22, Y+32	; 0x20
    1574:	70 e0       	ldi	r23, 0x00	; 0
    1576:	41 e0       	ldi	r20, 0x01	; 1
    1578:	50 e0       	ldi	r21, 0x00	; 0
    157a:	86 e9       	ldi	r24, 0x96	; 150
    157c:	95 e0       	ldi	r25, 0x05	; 5
    157e:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    1582:	86 e9       	ldi	r24, 0x96	; 150
    1584:	95 e0       	ldi	r25, 0x05	; 5
    1586:	0e 94 8f 18 	call	0x311e	; 0x311e <_ZN7TwoWire4readEv>

	blLevel = HIGH; // known boards are active HIGH bl

	if(data == 0x7f) // bit 7 low, and other control and data lines high
    158a:	8f 37       	cpi	r24, 0x7F	; 127
    158c:	61 f0       	breq	.+24     	; 0x15a6 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xaa>
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
    158e:	86 ff       	sbrs	r24, 6
    1590:	12 c0       	rjmp	.+36     	; 0x15b6 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xba>
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
    1592:	81 fd       	sbrc	r24, 1
    1594:	4c c0       	rjmp	.+152    	; 0x162e <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x132>
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
		bl = 1;
    1596:	21 e0       	ldi	r18, 0x01	; 1
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
    1598:	32 e0       	ldi	r19, 0x02	; 2
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
    159a:	43 e0       	ldi	r20, 0x03	; 3
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
    159c:	54 e0       	ldi	r21, 0x04	; 4
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
    159e:	65 e0       	ldi	r22, 0x05	; 5
	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
    15a0:	76 e0       	ldi	r23, 0x06	; 6
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
    15a2:	e7 e0       	ldi	r30, 0x07	; 7
    15a4:	0f c0       	rjmp	.+30     	; 0x15c4 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;
    15a6:	27 e0       	ldi	r18, 0x07	; 7
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
    15a8:	36 e0       	ldi	r19, 0x06	; 6
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
    15aa:	45 e0       	ldi	r20, 0x05	; 5
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
    15ac:	54 e0       	ldi	r21, 0x04	; 4
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
    15ae:	63 e0       	ldi	r22, 0x03	; 3
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
    15b0:	72 e0       	ldi	r23, 0x02	; 2

	if(data == 0x7f) // bit 7 low, and other control and data lines high
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
    15b2:	e1 e0       	ldi	r30, 0x01	; 1
    15b4:	07 c0       	rjmp	.+14     	; 0x15c4 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;
    15b6:	26 e0       	ldi	r18, 0x06	; 6
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
    15b8:	33 e0       	ldi	r19, 0x03	; 3
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
    15ba:	42 e0       	ldi	r20, 0x02	; 2
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
    15bc:	51 e0       	ldi	r21, 0x01	; 1
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
    15be:	60 e0       	ldi	r22, 0x00	; 0
	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
    15c0:	77 e0       	ldi	r23, 0x07	; 7
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
    15c2:	e4 e0       	ldi	r30, 0x04	; 4
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	dc 01       	movw	r26, r24
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd4>
    15cc:	aa 0f       	add	r26, r26
    15ce:	bb 1f       	adc	r27, r27
    15d0:	ea 95       	dec	r30
    15d2:	e2 f7       	brpl	.-8      	; 0x15cc <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd0>
    15d4:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
	else
		_rw = 0; // no r/w control
    15d6:	1b a2       	std	Y+35, r1	; 0x23

	_en = ( 1 << en );
    15d8:	fc 01       	movw	r30, r24
    15da:	01 c0       	rjmp	.+2      	; 0x15de <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe2>
    15dc:	ee 0f       	add	r30, r30
    15de:	7a 95       	dec	r23
    15e0:	ea f7       	brpl	.-6      	; 0x15dc <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe0>
    15e2:	ec a3       	std	Y+36, r30	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
    15e4:	fc 01       	movw	r30, r24
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xf0>
    15e8:	ee 0f       	add	r30, r30
    15ea:	ff 1f       	adc	r31, r31
    15ec:	6a 95       	dec	r22
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xec>
    15f0:	ed a3       	std	Y+37, r30	; 0x25
	_d5 = ( 1 << d5 );
    15f2:	bc 01       	movw	r22, r24
    15f4:	01 c0       	rjmp	.+2      	; 0x15f8 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfc>
    15f6:	66 0f       	add	r22, r22
    15f8:	5a 95       	dec	r21
    15fa:	ea f7       	brpl	.-6      	; 0x15f6 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfa>
    15fc:	6e a3       	std	Y+38, r22	; 0x26
	_d6 = ( 1 << d6 );
    15fe:	bc 01       	movw	r22, r24
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x10a>
    1602:	66 0f       	add	r22, r22
    1604:	77 1f       	adc	r23, r23
    1606:	4a 95       	dec	r20
    1608:	e2 f7       	brpl	.-8      	; 0x1602 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x106>
    160a:	6f a3       	std	Y+39, r22	; 0x27
	_d7 = ( 1 << d7 );   
    160c:	ac 01       	movw	r20, r24
    160e:	01 c0       	rjmp	.+2      	; 0x1612 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x116>
    1610:	44 0f       	add	r20, r20
    1612:	3a 95       	dec	r19
    1614:	ea f7       	brpl	.-6      	; 0x1610 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x114>
    1616:	48 a7       	std	Y+40, r20	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
    1618:	01 c0       	rjmp	.+2      	; 0x161c <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x120>
    161a:	88 0f       	add	r24, r24
    161c:	2a 95       	dec	r18
    161e:	ea f7       	brpl	.-6      	; 0x161a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x11e>
    1620:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
    1622:	91 e0       	ldi	r25, 0x01	; 1
    1624:	9a a7       	std	Y+42, r25	; 0x2a
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
		_blCurState = _bl;
    1626:	8b a7       	std	Y+43, r24	; 0x2b
		// could not identify board
		return(hd44780::RV_ENOTSUP);
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x136>

	}
	else
	{
		// could not identify board
		return(hd44780::RV_ENOTSUP);
    162e:	8d ef       	ldi	r24, 0xFD	; 253
    1630:	9f ef       	ldi	r25, 0xFF	; 255
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	08 95       	ret

00001638 <_ZN14hd44780_I2Cexp6ioinitEv>:
// Returns non zero if initialization failed.
//
// can't be used from constructors because not everything is initalized yet.
// (maybe interrupts or other library constructors)
// if Wire library is used in constructor, it will hang.
int ioinit()
    1638:	1f 93       	push	r17
    163a:	cf 93       	push	r28
    163c:	df 93       	push	r29
    163e:	ec 01       	movw	r28, r24
	 * I believe that it is unreasonable to require the the user
	 * sketch code to do it, because all that should change between
	 * hd44780 i/o interfaces should be the constructor
	 * So we go ahead and call it here.
	 */
	Wire.begin();
    1640:	86 e9       	ldi	r24, 0x96	; 150
    1642:	95 e0       	ldi	r25, 0x05	; 5
    1644:	0e 94 55 19 	call	0x32aa	; 0x32aa <_ZN7TwoWire5beginEv>

	// auto locate i2c expander and magically detect pin mappings

	if(!_addr) // locate next instance
    1648:	68 a1       	ldd	r22, Y+32	; 0x20
    164a:	61 11       	cpse	r22, r1
    164c:	0a c0       	rjmp	.+20     	; 0x1662 <_ZN14hd44780_I2Cexp6ioinitEv+0x2a>
	{
		_addr = LocateDevice(AutoInst++);
    164e:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    1652:	91 e0       	ldi	r25, 0x01	; 1
    1654:	98 0f       	add	r25, r24
    1656:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    165a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
    165e:	88 a3       	std	Y+32, r24	; 0x20
    1660:	0d c0       	rjmp	.+26     	; 0x167c <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
	}
	else
	{
		// check to see if device at specified address is really there
		Wire.beginTransmission(_addr);
    1662:	86 e9       	ldi	r24, 0x96	; 150
    1664:	95 e0       	ldi	r25, 0x05	; 5
    1666:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN7TwoWire17beginTransmissionEh>
		if(Wire.endTransmission())
    166a:	86 e9       	ldi	r24, 0x96	; 150
    166c:	95 e0       	ldi	r25, 0x05	; 5
    166e:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_ZN7TwoWire15endTransmissionEv>
    1672:	88 23       	and	r24, r24
    1674:	19 f0       	breq	.+6      	; 0x167c <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
			return(hd44780::RV_ENXIO);
    1676:	8c ef       	ldi	r24, 0xFC	; 252
    1678:	9f ef       	ldi	r25, 0xFF	; 255
    167a:	a7 c0       	rjmp	.+334    	; 0x17ca <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	}

	if(!_addr) // locate next instance
    167c:	88 a1       	ldd	r24, Y+32	; 0x20
    167e:	81 11       	cpse	r24, r1
    1680:	09 c0       	rjmp	.+18     	; 0x1694 <_ZN14hd44780_I2Cexp6ioinitEv+0x5c>
		_addr = LocateDevice(AutoInst++);
    1682:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    1686:	91 e0       	ldi	r25, 0x01	; 1
    1688:	98 0f       	add	r25, r24
    168a:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    168e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
    1692:	88 a3       	std	Y+32, r24	; 0x20

	if(!_addr) // if we couldn't locate it, return error
    1694:	18 a1       	ldd	r17, Y+32	; 0x20
    1696:	11 23       	and	r17, r17
    1698:	71 f3       	breq	.-36     	; 0x1676 <_ZN14hd44780_I2Cexp6ioinitEv+0x3e>
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
    169a:	89 a1       	ldd	r24, Y+33	; 0x21
    169c:	88 23       	and	r24, r24
    169e:	c1 f1       	breq	.+112    	; 0x1710 <_ZN14hd44780_I2Cexp6ioinitEv+0xd8>
			return(status);
	}

	// initialize IO expander chip

	Wire.beginTransmission(_addr);
    16a0:	68 a1       	ldd	r22, Y+32	; 0x20
    16a2:	86 e9       	ldi	r24, 0x96	; 150
    16a4:	95 e0       	ldi	r25, 0x05	; 5
    16a6:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN7TwoWire17beginTransmissionEh>

	if(_expType == I2Cexp_MCP23008)
    16aa:	89 a1       	ldd	r24, Y+33	; 0x21
    16ac:	82 30       	cpi	r24, 0x02	; 2
    16ae:	09 f0       	breq	.+2      	; 0x16b2 <_ZN14hd44780_I2Cexp6ioinitEv+0x7a>
    16b0:	76 c0       	rjmp	.+236    	; 0x179e <_ZN14hd44780_I2Cexp6ioinitEv+0x166>
		 * within the same i2c connection by simply sending more bytes.
		 * This is necessary as the code uses back to back writes to perform
		 * the nibble updates as well as the toggling the enable signal.
		 * This methodology offers significant performance gains.
		 */
		Wire.write(5);	// point to IOCON
    16b2:	65 e0       	ldi	r22, 0x05	; 5
    16b4:	70 e0       	ldi	r23, 0x00	; 0
    16b6:	86 e9       	ldi	r24, 0x96	; 150
    16b8:	95 e0       	ldi	r25, 0x05	; 5
    16ba:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7TwoWire5writeEi>
		Wire.write(0x20);// disable sequential mode (enables BYTE mode)
    16be:	60 e2       	ldi	r22, 0x20	; 32
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	86 e9       	ldi	r24, 0x96	; 150
    16c4:	95 e0       	ldi	r25, 0x05	; 5
    16c6:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    16ca:	86 e9       	ldi	r24, 0x96	; 150
    16cc:	95 e0       	ldi	r25, 0x05	; 5
    16ce:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_ZN7TwoWire15endTransmissionEv>

		/*
		 * Now set up output port
		 */
		Wire.beginTransmission(_addr);
    16d2:	68 a1       	ldd	r22, Y+32	; 0x20
    16d4:	86 e9       	ldi	r24, 0x96	; 150
    16d6:	95 e0       	ldi	r25, 0x05	; 5
    16d8:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t)0); // point to IODIR
    16dc:	60 e0       	ldi	r22, 0x00	; 0
    16de:	86 e9       	ldi	r24, 0x96	; 150
    16e0:	95 e0       	ldi	r25, 0x05	; 5
    16e2:	0e 94 16 19 	call	0x322c	; 0x322c <_ZN7TwoWire5writeEh>
		Wire.write((uint8_t)0); // all pins output
    16e6:	60 e0       	ldi	r22, 0x00	; 0
    16e8:	86 e9       	ldi	r24, 0x96	; 150
    16ea:	95 e0       	ldi	r25, 0x05	; 5
    16ec:	0e 94 16 19 	call	0x322c	; 0x322c <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    16f0:	86 e9       	ldi	r24, 0x96	; 150
    16f2:	95 e0       	ldi	r25, 0x05	; 5
    16f4:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_ZN7TwoWire15endTransmissionEv>
	
		/*
		 * point chip to GPIO
		 */
		Wire.beginTransmission(_addr);
    16f8:	68 a1       	ldd	r22, Y+32	; 0x20
    16fa:	86 e9       	ldi	r24, 0x96	; 150
    16fc:	95 e0       	ldi	r25, 0x05	; 5
    16fe:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN7TwoWire17beginTransmissionEh>
		Wire.write(9); // point to GPIO
    1702:	69 e0       	ldi	r22, 0x09	; 9
    1704:	70 e0       	ldi	r23, 0x00	; 0
    1706:	86 e9       	ldi	r24, 0x96	; 150
    1708:	95 e0       	ldi	r25, 0x05	; 5
    170a:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7TwoWire5writeEi>
    170e:	47 c0       	rjmp	.+142    	; 0x179e <_ZN14hd44780_I2Cexp6ioinitEv+0x166>

	/*
	 * First try to write 0xff to MCP23008 IODIR
	 * On a PCF8574 this will end up writing 0 and then ff to output port
	 */
	Wire.beginTransmission(address);
    1710:	61 2f       	mov	r22, r17
    1712:	86 e9       	ldi	r24, 0x96	; 150
    1714:	95 e0       	ldi	r25, 0x05	; 5
    1716:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
    171a:	60 e0       	ldi	r22, 0x00	; 0
    171c:	86 e9       	ldi	r24, 0x96	; 150
    171e:	95 e0       	ldi	r25, 0x05	; 5
    1720:	0e 94 16 19 	call	0x322c	; 0x322c <_ZN7TwoWire5writeEh>
	Wire.write((uint8_t) 0xff);	// try to write to MCP23008 IODR
    1724:	6f ef       	ldi	r22, 0xFF	; 255
    1726:	86 e9       	ldi	r24, 0x96	; 150
    1728:	95 e0       	ldi	r25, 0x05	; 5
    172a:	0e 94 16 19 	call	0x322c	; 0x322c <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    172e:	86 e9       	ldi	r24, 0x96	; 150
    1730:	95 e0       	ldi	r25, 0x05	; 5
    1732:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now try to point MCP23008 to IODIR for read
	 * On a PCF8574 this will end up writing a 0 to the output port
	 */

	Wire.beginTransmission(address);
    1736:	61 2f       	mov	r22, r17
    1738:	86 e9       	ldi	r24, 0x96	; 150
    173a:	95 e0       	ldi	r25, 0x05	; 5
    173c:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
    1740:	60 e0       	ldi	r22, 0x00	; 0
    1742:	86 e9       	ldi	r24, 0x96	; 150
    1744:	95 e0       	ldi	r25, 0x05	; 5
    1746:	0e 94 16 19 	call	0x322c	; 0x322c <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    174a:	86 e9       	ldi	r24, 0x96	; 150
    174c:	95 e0       	ldi	r25, 0x05	; 5
    174e:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now read a byte
	 * On a MCP23008 we should read the 0xff we wrote to IODIR
	 * On a PCF8574 we should read 0 since the output port was set to 0
	 */
	Wire.requestFrom((int)address, 1);
    1752:	61 2f       	mov	r22, r17
    1754:	70 e0       	ldi	r23, 0x00	; 0
    1756:	41 e0       	ldi	r20, 0x01	; 1
    1758:	50 e0       	ldi	r21, 0x00	; 0
    175a:	86 e9       	ldi	r24, 0x96	; 150
    175c:	95 e0       	ldi	r25, 0x05	; 5
    175e:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    1762:	86 e9       	ldi	r24, 0x96	; 150
    1764:	95 e0       	ldi	r25, 0x05	; 5
    1766:	0e 94 8f 18 	call	0x311e	; 0x311e <_ZN7TwoWire4readEv>
    176a:	9c 01       	movw	r18, r24

	if(data == 0xff)
    176c:	8f 3f       	cpi	r24, 0xFF	; 255
    176e:	91 05       	cpc	r25, r1
    1770:	29 f0       	breq	.+10     	; 0x177c <_ZN14hd44780_I2Cexp6ioinitEv+0x144>
	{
		chiptype = I2Cexp_MCP23008;
    1772:	91 e0       	ldi	r25, 0x01	; 1
    1774:	23 2b       	or	r18, r19
    1776:	19 f0       	breq	.+6      	; 0x177e <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	01 c0       	rjmp	.+2      	; 0x177e <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    177c:	92 e0       	ldi	r25, 0x02	; 2
	if(!_addr) // if we couldn't locate it, return error
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);
    177e:	99 a3       	std	Y+33, r25	; 0x21

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
    1780:	99 23       	and	r25, r25
    1782:	09 f1       	breq	.+66     	; 0x17c6 <_ZN14hd44780_I2Cexp6ioinitEv+0x18e>
			return(hd44780::RV_EIO);

		if(_expType == I2Cexp_PCF8574)
    1784:	91 30       	cpi	r25, 0x01	; 1
    1786:	21 f4       	brne	.+8      	; 0x1790 <_ZN14hd44780_I2Cexp6ioinitEv+0x158>
			status = autocfg8574();		// go auto configure the pin mappings
    1788:	ce 01       	movw	r24, r28
    178a:	0e 94 b2 09 	call	0x1364	; 0x1364 <_ZN14hd44780_I2Cexp11autocfg8574Ev>
    178e:	03 c0       	rjmp	.+6      	; 0x1796 <_ZN14hd44780_I2Cexp6ioinitEv+0x15e>
		else
			status = autocfgMCP23008();	// go auto configure the pin mappings
    1790:	ce 01       	movw	r24, r28
    1792:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>
		if(status)
    1796:	00 97       	sbiw	r24, 0x00	; 0
    1798:	09 f4       	brne	.+2      	; 0x179c <_ZN14hd44780_I2Cexp6ioinitEv+0x164>
    179a:	82 cf       	rjmp	.-252    	; 0x16a0 <_ZN14hd44780_I2Cexp6ioinitEv+0x68>
    179c:	16 c0       	rjmp	.+44     	; 0x17ca <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
		 */
		Wire.beginTransmission(_addr);
		Wire.write(9); // point to GPIO
		
	}
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
    179e:	60 e0       	ldi	r22, 0x00	; 0
    17a0:	86 e9       	ldi	r24, 0x96	; 150
    17a2:	95 e0       	ldi	r25, 0x05	; 5
    17a4:	0e 94 16 19 	call	0x322c	; 0x322c <_ZN7TwoWire5writeEh>
	if( (status = Wire.endTransmission()) ) // assignment
    17a8:	86 e9       	ldi	r24, 0x96	; 150
    17aa:	95 e0       	ldi	r25, 0x05	; 5
    17ac:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <_ZN7TwoWire15endTransmissionEv>
    17b0:	21 e0       	ldi	r18, 0x01	; 1
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	81 11       	cpse	r24, r1
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <_ZN14hd44780_I2Cexp6ioinitEv+0x184>
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	88 27       	eor	r24, r24
    17be:	99 27       	eor	r25, r25
    17c0:	82 1b       	sub	r24, r18
    17c2:	93 0b       	sbc	r25, r19
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
			return(hd44780::RV_EIO);
    17c6:	8f ef       	ldi	r24, 0xFF	; 255
    17c8:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
	if( (status = Wire.endTransmission()) ) // assignment
		status = hd44780::RV_EIO;

	return ( status );
}
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
    17ce:	1f 91       	pop	r17
    17d0:	08 95       	ret

000017d2 <_Z7readGPSv>:
{
	duration++;
}

boolean readGPS()
{
    17d2:	8f 92       	push	r8
    17d4:	9f 92       	push	r9
    17d6:	af 92       	push	r10
    17d8:	bf 92       	push	r11
    17da:	cf 92       	push	r12
    17dc:	df 92       	push	r13
    17de:	ef 92       	push	r14
    17e0:	ff 92       	push	r15
    17e2:	0f 93       	push	r16
    17e4:	1f 93       	push	r17
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
    17ee:	2c 97       	sbiw	r28, 0x0c	; 12
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	f8 94       	cli
    17f4:	de bf       	out	0x3e, r29	; 62
    17f6:	0f be       	out	0x3f, r0	; 63
    17f8:	cd bf       	out	0x3d, r28	; 61
	while(Serial1.available()) {							// as long as data is available on NMEA device
		unsigned char c =  buffer[count] = Serial1.read();	// write data into array
		Serial.write(c);									// and write data to PC (Serial)
		if(count < BUFFERSIZE-1) count++;					// to avoid buffer overflow
		if(c == '$') {
			ptr = buffer;
    17fa:	9c e9       	ldi	r25, 0x9C	; 156
    17fc:	c9 2e       	mov	r12, r25
    17fe:	93 e0       	ldi	r25, 0x03	; 3
    1800:	d9 2e       	mov	r13, r25
			while(ptr < buffer + BUFFERSIZE)  *ptr++=0;		// fill with 0
			count = 0;										// start of frame found, reset buffer
			buffer[count++] = c;							// store start of frame
    1802:	ee 24       	eor	r14, r14
    1804:	e3 94       	inc	r14
    1806:	24 e2       	ldi	r18, 0x24	; 36
    1808:	b2 2e       	mov	r11, r18
}

boolean readGPS()
{
	boolean getData = false;
	while(Serial1.available()) {							// as long as data is available on NMEA device
    180a:	8d e3       	ldi	r24, 0x3D	; 61
    180c:	96 e0       	ldi	r25, 0x06	; 6
    180e:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <_ZN14HardwareSerial9availableEv>
    1812:	89 2b       	or	r24, r25
    1814:	d1 f1       	breq	.+116    	; 0x188a <_Z7readGPSv+0xb8>
		unsigned char c =  buffer[count] = Serial1.read();	// write data into array
    1816:	00 91 9b 03 	lds	r16, 0x039B	; 0x80039b <count>
    181a:	10 e0       	ldi	r17, 0x00	; 0
    181c:	8d e3       	ldi	r24, 0x3D	; 61
    181e:	96 e0       	ldi	r25, 0x06	; 6
    1820:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <_ZN14HardwareSerial4readEv>
    1824:	f8 2e       	mov	r15, r24
    1826:	f8 01       	movw	r30, r16
    1828:	e4 56       	subi	r30, 0x64	; 100
    182a:	fc 4f       	sbci	r31, 0xFC	; 252
    182c:	80 83       	st	Z, r24
		Serial.write(c);									// and write data to PC (Serial)
    182e:	68 2f       	mov	r22, r24
    1830:	8c ee       	ldi	r24, 0xEC	; 236
    1832:	95 e0       	ldi	r25, 0x05	; 5
    1834:	0e 94 32 1c 	call	0x3864	; 0x3864 <_ZN7Serial_5writeEh>
		if(count < BUFFERSIZE-1) count++;					// to avoid buffer overflow
    1838:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <count>
    183c:	8f 33       	cpi	r24, 0x3F	; 63
    183e:	18 f4       	brcc	.+6      	; 0x1846 <_Z7readGPSv+0x74>
    1840:	8f 5f       	subi	r24, 0xFF	; 255
    1842:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <count>
		if(c == '$') {
    1846:	84 e2       	ldi	r24, 0x24	; 36
    1848:	f8 12       	cpse	r15, r24
    184a:	19 c0       	rjmp	.+50     	; 0x187e <_Z7readGPSv+0xac>
			ptr = buffer;
    184c:	d0 92 9a 03 	sts	0x039A, r13	; 0x80039a <ptr+0x1>
    1850:	c0 92 99 03 	sts	0x0399, r12	; 0x800399 <ptr>
			while(ptr < buffer + BUFFERSIZE)  *ptr++=0;		// fill with 0
    1854:	e0 91 99 03 	lds	r30, 0x0399	; 0x800399 <ptr>
    1858:	f0 91 9a 03 	lds	r31, 0x039A	; 0x80039a <ptr+0x1>
    185c:	83 e0       	ldi	r24, 0x03	; 3
    185e:	ec 3d       	cpi	r30, 0xDC	; 220
    1860:	f8 07       	cpc	r31, r24
    1862:	40 f4       	brcc	.+16     	; 0x1874 <_Z7readGPSv+0xa2>
    1864:	cf 01       	movw	r24, r30
    1866:	01 96       	adiw	r24, 0x01	; 1
    1868:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <ptr+0x1>
    186c:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <ptr>
    1870:	10 82       	st	Z, r1
    1872:	f0 cf       	rjmp	.-32     	; 0x1854 <_Z7readGPSv+0x82>
			count = 0;										// start of frame found, reset buffer
			buffer[count++] = c;							// store start of frame
    1874:	e0 92 9b 03 	sts	0x039B, r14	; 0x80039b <count>
    1878:	b0 92 9c 03 	sts	0x039C, r11	; 0x80039c <buffer>
    187c:	c6 cf       	rjmp	.-116    	; 0x180a <_Z7readGPSv+0x38>
		}
		if(c == '*') {										// end of frame found, start conversion
    187e:	8a e2       	ldi	r24, 0x2A	; 42
    1880:	f8 12       	cpse	r15, r24
    1882:	c3 cf       	rjmp	.-122    	; 0x180a <_Z7readGPSv+0x38>
			frame = 1;
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <frame>
			break;
		}
	}
	if(frame) {												// full frame in buffer, so parse and decode
    188a:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <frame>
    188e:	81 11       	cpse	r24, r1
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <_Z7readGPSv+0xc4>
	duration++;
}

boolean readGPS()
{
	boolean getData = false;
    1892:	10 e0       	ldi	r17, 0x00	; 0
    1894:	8e c0       	rjmp	.+284    	; 0x19b2 <_Z7readGPSv+0x1e0>
			frame = 1;
			break;
		}
	}
	if(frame) {												// full frame in buffer, so parse and decode
		frame = 0;
    1896:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <frame>
		ptr = strstr(buffer, NMEA_TIME);					// scan for GPRMC keyword
    189a:	68 e2       	ldi	r22, 0x28	; 40
    189c:	72 e0       	ldi	r23, 0x02	; 2
    189e:	8c e9       	ldi	r24, 0x9C	; 156
    18a0:	93 e0       	ldi	r25, 0x03	; 3
    18a2:	0e 94 c5 2c 	call	0x598a	; 0x598a <strstr>
    18a6:	8c 01       	movw	r16, r24
		if(ptr != NULL) {									// GPRMC keyword found, read time
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	29 f4       	brne	.+10     	; 0x18b6 <_Z7readGPSv+0xe4>
			break;
		}
	}
	if(frame) {												// full frame in buffer, so parse and decode
		frame = 0;
		ptr = strstr(buffer, NMEA_TIME);					// scan for GPRMC keyword
    18ac:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <ptr+0x1>
    18b0:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <ptr>
    18b4:	ee cf       	rjmp	.-36     	; 0x1892 <_Z7readGPSv+0xc0>
		if(ptr != NULL) {									// GPRMC keyword found, read time
			ptr += strlen(NMEA_TIME);
    18b6:	06 96       	adiw	r24, 0x06	; 6
    18b8:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <ptr+0x1>
    18bc:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <ptr>
			t = atol(ptr);									// parse time value into hour, minute, second
    18c0:	0e 94 8e 2c 	call	0x591c	; 0x591c <atol>
    18c4:	6b 01       	movw	r12, r22
    18c6:	7c 01       	movw	r14, r24
    18c8:	60 93 94 03 	sts	0x0394, r22	; 0x800394 <t>
    18cc:	70 93 95 03 	sts	0x0395, r23	; 0x800395 <t+0x1>
    18d0:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <t+0x2>
    18d4:	90 93 97 03 	sts	0x0397, r25	; 0x800397 <t+0x3>
			zeitLocal.ss_ = t % 100;
    18d8:	84 e6       	ldi	r24, 0x64	; 100
    18da:	88 2e       	mov	r8, r24
    18dc:	91 2c       	mov	r9, r1
    18de:	a1 2c       	mov	r10, r1
    18e0:	b1 2c       	mov	r11, r1
    18e2:	c7 01       	movw	r24, r14
    18e4:	b6 01       	movw	r22, r12
    18e6:	a5 01       	movw	r20, r10
    18e8:	94 01       	movw	r18, r8
    18ea:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <__divmodsi4>
    18ee:	70 93 7e 03 	sts	0x037E, r23	; 0x80037e <zeitLocal+0x5>
    18f2:	60 93 7d 03 	sts	0x037D, r22	; 0x80037d <zeitLocal+0x4>
			zeitLocal.mm_ = (t / 100) % 100;
    18f6:	ca 01       	movw	r24, r20
    18f8:	b9 01       	movw	r22, r18
    18fa:	a5 01       	movw	r20, r10
    18fc:	94 01       	movw	r18, r8
    18fe:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <__divmodsi4>
    1902:	70 93 7c 03 	sts	0x037C, r23	; 0x80037c <zeitLocal+0x3>
    1906:	60 93 7b 03 	sts	0x037B, r22	; 0x80037b <zeitLocal+0x2>
			zeitLocal.hh_ = ((t / 10000) + TIMEZONE) % 24;	
    190a:	c7 01       	movw	r24, r14
    190c:	b6 01       	movw	r22, r12
    190e:	20 e1       	ldi	r18, 0x10	; 16
    1910:	37 e2       	ldi	r19, 0x27	; 39
    1912:	40 e0       	ldi	r20, 0x00	; 0
    1914:	50 e0       	ldi	r21, 0x00	; 0
    1916:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <__divmodsi4>
    191a:	ca 01       	movw	r24, r20
    191c:	b9 01       	movw	r22, r18
    191e:	6f 5f       	subi	r22, 0xFF	; 255
    1920:	7f 4f       	sbci	r23, 0xFF	; 255
    1922:	8f 4f       	sbci	r24, 0xFF	; 255
    1924:	9f 4f       	sbci	r25, 0xFF	; 255
    1926:	28 e1       	ldi	r18, 0x18	; 24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 e0       	ldi	r20, 0x00	; 0
    192c:	50 e0       	ldi	r21, 0x00	; 0
    192e:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <__divmodsi4>
    1932:	70 93 7a 03 	sts	0x037A, r23	; 0x80037a <zeitLocal+0x1>
    1936:	60 93 79 03 	sts	0x0379, r22	; 0x800379 <zeitLocal>
			
			getData = true;
			
			ptr += 10;
    193a:	00 5f       	subi	r16, 0xF0	; 240
    193c:	1f 4f       	sbci	r17, 0xFF	; 255
    193e:	10 93 9a 03 	sts	0x039A, r17	; 0x80039a <ptr+0x1>
    1942:	00 93 99 03 	sts	0x0399, r16	; 0x800399 <ptr>
			//Readout Latitude & Longitude
			String latitude;
    1946:	67 e3       	ldi	r22, 0x37	; 55
    1948:	73 e0       	ldi	r23, 0x03	; 3
    194a:	ce 01       	movw	r24, r28
    194c:	07 96       	adiw	r24, 0x07	; 7
    194e:	0e 94 7f 29 	call	0x52fe	; 0x52fe <_ZN6StringC1EPKc>
			//strlcpy(latitude, buffer + ptr,9);
			
			ptr += 9; 
    1952:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <ptr>
    1956:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <ptr+0x1>
    195a:	09 96       	adiw	r24, 0x09	; 9
    195c:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <ptr+0x1>
    1960:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <ptr>
			String longitude;
    1964:	67 e3       	ldi	r22, 0x37	; 55
    1966:	73 e0       	ldi	r23, 0x03	; 3
    1968:	ce 01       	movw	r24, r28
    196a:	01 96       	adiw	r24, 0x01	; 1
    196c:	0e 94 7f 29 	call	0x52fe	; 0x52fe <_ZN6StringC1EPKc>
			//strlcpy(longitude, buffer + ptr, 9);
								
			ptr = buffer;
    1970:	8c e9       	ldi	r24, 0x9C	; 156
    1972:	93 e0       	ldi	r25, 0x03	; 3
    1974:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <ptr+0x1>
    1978:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <ptr>
			while(ptr < buffer + BUFFERSIZE)  *ptr++=0;		// fill with 0
    197c:	e0 91 99 03 	lds	r30, 0x0399	; 0x800399 <ptr>
    1980:	f0 91 9a 03 	lds	r31, 0x039A	; 0x80039a <ptr+0x1>
    1984:	83 e0       	ldi	r24, 0x03	; 3
    1986:	ec 3d       	cpi	r30, 0xDC	; 220
    1988:	f8 07       	cpc	r31, r24
    198a:	40 f4       	brcc	.+16     	; 0x199c <_Z7readGPSv+0x1ca>
    198c:	cf 01       	movw	r24, r30
    198e:	01 96       	adiw	r24, 0x01	; 1
    1990:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <ptr+0x1>
    1994:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <ptr>
    1998:	10 82       	st	Z, r1
    199a:	f0 cf       	rjmp	.-32     	; 0x197c <_Z7readGPSv+0x1aa>
			count = 0;										// clear buffer and start new
    199c:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <count>
			//Readout Latitude & Longitude
			String latitude;
			//strlcpy(latitude, buffer + ptr,9);
			
			ptr += 9; 
			String longitude;
    19a0:	ce 01       	movw	r24, r28
    19a2:	01 96       	adiw	r24, 0x01	; 1
    19a4:	0e 94 11 29 	call	0x5222	; 0x5222 <_ZN6StringD1Ev>
			
			getData = true;
			
			ptr += 10;
			//Readout Latitude & Longitude
			String latitude;
    19a8:	ce 01       	movw	r24, r28
    19aa:	07 96       	adiw	r24, 0x07	; 7
    19ac:	0e 94 11 29 	call	0x5222	; 0x5222 <_ZN6StringD1Ev>
			t = atol(ptr);									// parse time value into hour, minute, second
			zeitLocal.ss_ = t % 100;
			zeitLocal.mm_ = (t / 100) % 100;
			zeitLocal.hh_ = ((t / 10000) + TIMEZONE) % 24;	
			
			getData = true;
    19b0:	11 e0       	ldi	r17, 0x01	; 1
			ptr = buffer;
			while(ptr < buffer + BUFFERSIZE)  *ptr++=0;		// fill with 0
			count = 0;										// clear buffer and start new
		}
	}
	if (Serial.available()){								// if data is available from PC
    19b2:	8c ee       	ldi	r24, 0xEC	; 236
    19b4:	95 e0       	ldi	r25, 0x05	; 5
    19b6:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <_ZN7Serial_9availableEv>
    19ba:	89 2b       	or	r24, r25
    19bc:	49 f0       	breq	.+18     	; 0x19d0 <_Z7readGPSv+0x1fe>
		Serial1.write(Serial.read());						// write it to the NMEA device
    19be:	8c ee       	ldi	r24, 0xEC	; 236
    19c0:	95 e0       	ldi	r25, 0x05	; 5
    19c2:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <_ZN7Serial_4readEv>
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    19c6:	68 2f       	mov	r22, r24
    19c8:	8d e3       	ldi	r24, 0x3D	; 61
    19ca:	96 e0       	ldi	r25, 0x06	; 6
    19cc:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <_ZN14HardwareSerial5writeEh>
	}
	zeitGMT = zeitLocal;
    19d0:	88 e0       	ldi	r24, 0x08	; 8
    19d2:	e9 e7       	ldi	r30, 0x79	; 121
    19d4:	f3 e0       	ldi	r31, 0x03	; 3
    19d6:	a9 e8       	ldi	r26, 0x89	; 137
    19d8:	b3 e0       	ldi	r27, 0x03	; 3
    19da:	01 90       	ld	r0, Z+
    19dc:	0d 92       	st	X+, r0
    19de:	8a 95       	dec	r24
    19e0:	e1 f7       	brne	.-8      	; 0x19da <_Z7readGPSv+0x208>
	zeitGMT.hh_ -= 1;
    19e2:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <zeitGMT>
    19e6:	90 91 8a 03 	lds	r25, 0x038A	; 0x80038a <zeitGMT+0x1>
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	90 93 8a 03 	sts	0x038A, r25	; 0x80038a <zeitGMT+0x1>
    19f0:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <zeitGMT>
	return getData;
}
    19f4:	81 2f       	mov	r24, r17
    19f6:	2c 96       	adiw	r28, 0x0c	; 12
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	f8 94       	cli
    19fc:	de bf       	out	0x3e, r29	; 62
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	cd bf       	out	0x3d, r28	; 61
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	1f 91       	pop	r17
    1a08:	0f 91       	pop	r16
    1a0a:	ff 90       	pop	r15
    1a0c:	ef 90       	pop	r14
    1a0e:	df 90       	pop	r13
    1a10:	cf 90       	pop	r12
    1a12:	bf 90       	pop	r11
    1a14:	af 90       	pop	r10
    1a16:	9f 90       	pop	r9
    1a18:	8f 90       	pop	r8
    1a1a:	08 95       	ret

00001a1c <setup>:
 * 
 * called once at program startup
 * \return void
 */
void setup()
{
    1a1c:	cf 92       	push	r12
    1a1e:	df 92       	push	r13
    1a20:	ef 92       	push	r14
    1a22:	ff 92       	push	r15
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1a24:	26 e0       	ldi	r18, 0x06	; 6
    1a26:	40 e8       	ldi	r20, 0x80	; 128
    1a28:	55 e2       	ldi	r21, 0x25	; 37
    1a2a:	60 e0       	ldi	r22, 0x00	; 0
    1a2c:	70 e0       	ldi	r23, 0x00	; 0
    1a2e:	8d e3       	ldi	r24, 0x3D	; 61
    1a30:	96 e0       	ldi	r25, 0x06	; 6
    1a32:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <_ZN14HardwareSerial5beginEmh>
	Serial1.begin(9600);
	Serial.begin(9600);
    1a36:	40 e8       	ldi	r20, 0x80	; 128
    1a38:	55 e2       	ldi	r21, 0x25	; 37
    1a3a:	60 e0       	ldi	r22, 0x00	; 0
    1a3c:	70 e0       	ldi	r23, 0x00	; 0
    1a3e:	8c ee       	ldi	r24, 0xEC	; 236
    1a40:	95 e0       	ldi	r25, 0x05	; 5
    1a42:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <_ZN7Serial_5beginEm>
	//LCD konfigurieren
	lcd.begin(16, 2);
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	42 e0       	ldi	r20, 0x02	; 2
    1a4a:	60 e1       	ldi	r22, 0x10	; 16
    1a4c:	8b ef       	ldi	r24, 0xFB	; 251
    1a4e:	94 e0       	ldi	r25, 0x04	; 4
    1a50:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <_ZN7hd447805beginEhhh>
	lcd.noBacklight();
    1a54:	8b ef       	ldi	r24, 0xFB	; 251
    1a56:	94 e0       	ldi	r25, 0x04	; 4
    1a58:	0e 94 f6 14 	call	0x29ec	; 0x29ec <_ZN7hd4478011noBacklightEv>
	lcd.noCursor();
    1a5c:	8b ef       	ldi	r24, 0xFB	; 251
    1a5e:	94 e0       	ldi	r25, 0x04	; 4
    1a60:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <_ZN7hd447808noCursorEv>
	lcd.home();
    1a64:	8b ef       	ldi	r24, 0xFB	; 251
    1a66:	94 e0       	ldi	r25, 0x04	; 4
    1a68:	0e 94 38 15 	call	0x2a70	; 0x2a70 <_ZN7hd447804homeEv>
	lcd.print("Romeo V2.2 Watch");
    1a6c:	6f e2       	ldi	r22, 0x2F	; 47
    1a6e:	72 e0       	ldi	r23, 0x02	; 2
    1a70:	8b ef       	ldi	r24, 0xFB	; 251
    1a72:	94 e0       	ldi	r25, 0x04	; 4
    1a74:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
    1a78:	41 e0       	ldi	r20, 0x01	; 1
    1a7a:	60 e0       	ldi	r22, 0x00	; 0
    1a7c:	8b ef       	ldi	r24, 0xFB	; 251
    1a7e:	94 e0       	ldi	r25, 0x04	; 4
    1a80:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_ZN7hd447809setCursorEhh>
	lcd.print("Coray / Bruno");
    1a84:	60 e4       	ldi	r22, 0x40	; 64
    1a86:	72 e0       	ldi	r23, 0x02	; 2
    1a88:	8b ef       	ldi	r24, 0xFB	; 251
    1a8a:	94 e0       	ldi	r25, 0x04	; 4
    1a8c:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <_ZN5Print5printEPKc>
	while(millis()<3000);
    1a90:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <millis>
    1a94:	68 3b       	cpi	r22, 0xB8	; 184
    1a96:	7b 40       	sbci	r23, 0x0B	; 11
    1a98:	81 05       	cpc	r24, r1
    1a9a:	91 05       	cpc	r25, r1
    1a9c:	c8 f3       	brcs	.-14     	; 0x1a90 <setup+0x74>
	lcd.clear();
    1a9e:	8b ef       	ldi	r24, 0xFB	; 251
    1aa0:	94 e0       	ldi	r25, 0x04	; 4
    1aa2:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN7hd447805clearEv>
	
	//Pin definitionen
	pinMode(btnPin, INPUT);
    1aa6:	60 e0       	ldi	r22, 0x00	; 0
    1aa8:	88 e0       	ldi	r24, 0x08	; 8
    1aaa:	0e 94 7d 28 	call	0x50fa	; 0x50fa <pinMode>
	pinMode(tempSensor,INPUT);
    1aae:	60 e0       	ldi	r22, 0x00	; 0
    1ab0:	86 e1       	ldi	r24, 0x16	; 22
    1ab2:	0e 94 7d 28 	call	0x50fa	; 0x50fa <pinMode>
	pinMode(Dir_Motor, OUTPUT);
    1ab6:	61 e0       	ldi	r22, 0x01	; 1
    1ab8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Dir_Motor>
    1abc:	0e 94 7d 28 	call	0x50fa	; 0x50fa <pinMode>
	pinMode(En_Motor, OUTPUT);
    1ac0:	61 e0       	ldi	r22, 0x01	; 1
    1ac2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <En_Motor>
    1ac6:	0e 94 7d 28 	call	0x50fa	; 0x50fa <pinMode>
	pinMode(encoder0pinB,INPUT);
    1aca:	60 e0       	ldi	r22, 0x00	; 0
    1acc:	87 e0       	ldi	r24, 0x07	; 7
    1ace:	0e 94 7d 28 	call	0x50fa	; 0x50fa <pinMode>
	
	//PID-Regler
	Setpoint = 20; //Setpint 15 works
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	a0 ea       	ldi	r26, 0xA0	; 160
    1ad8:	b1 e4       	ldi	r27, 0x41	; 65
    1ada:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <Setpoint>
    1ade:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <Setpoint+0x1>
    1ae2:	a0 93 26 04 	sts	0x0426, r26	; 0x800426 <Setpoint+0x2>
    1ae6:	b0 93 27 04 	sts	0x0427, r27	; 0x800427 <Setpoint+0x3>
	myPID.SetMode(AUTOMATIC);//PID is set to automatic mode
    1aea:	61 e0       	ldi	r22, 0x01	; 1
    1aec:	70 e0       	ldi	r23, 0x00	; 0
    1aee:	84 ee       	ldi	r24, 0xE4	; 228
    1af0:	93 e0       	ldi	r25, 0x03	; 3
    1af2:	0e 94 96 12 	call	0x252c	; 0x252c <_ZN3PID7SetModeEi>
	myPID.SetSampleTime(100);//Set PID sampling frequency is 100ms
    1af6:	64 e6       	ldi	r22, 0x64	; 100
    1af8:	70 e0       	ldi	r23, 0x00	; 0
    1afa:	84 ee       	ldi	r24, 0xE4	; 228
    1afc:	93 e0       	ldi	r25, 0x03	; 3
    1afe:	0e 94 02 12 	call	0x2404	; 0x2404 <_ZN3PID13SetSampleTimeEi>
	attachInterrupt(digitalPinToInterrupt(7), wheelSpeed, CHANGE); //Pin 7 -> Interrupt 4
    1b02:	41 e0       	ldi	r20, 0x01	; 1
    1b04:	50 e0       	ldi	r21, 0x00	; 0
    1b06:	69 ec       	ldi	r22, 0xC9	; 201
    1b08:	71 e0       	ldi	r23, 0x01	; 1
    1b0a:	84 e0       	ldi	r24, 0x04	; 4
    1b0c:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <attachInterrupt>
	previousMillis = millis();
    1b10:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <millis>
    1b14:	60 93 e0 03 	sts	0x03E0, r22	; 0x8003e0 <previousMillis>
    1b18:	70 93 e1 03 	sts	0x03E1, r23	; 0x8003e1 <previousMillis+0x1>
    1b1c:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <previousMillis+0x2>
    1b20:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <previousMillis+0x3>
	
	//GPS-Modul auslesen
	while (millis()<6000)
    1b24:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <millis>
    1b28:	60 37       	cpi	r22, 0x70	; 112
    1b2a:	77 41       	sbci	r23, 0x17	; 23
    1b2c:	81 05       	cpc	r24, r1
    1b2e:	91 05       	cpc	r25, r1
    1b30:	58 f5       	brcc	.+86     	; 0x1b88 <setup+0x16c>
	{
		lcd.setCursor(0,0);
    1b32:	40 e0       	ldi	r20, 0x00	; 0
    1b34:	60 e0       	ldi	r22, 0x00	; 0
    1b36:	8b ef       	ldi	r24, 0xFB	; 251
    1b38:	94 e0       	ldi	r25, 0x04	; 4
    1b3a:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_ZN7hd447809setCursorEhh>
		lcd.print("Read GPS");	
    1b3e:	6e e4       	ldi	r22, 0x4E	; 78
    1b40:	72 e0       	ldi	r23, 0x02	; 2
    1b42:	8b ef       	ldi	r24, 0xFB	; 251
    1b44:	94 e0       	ldi	r25, 0x04	; 4
    1b46:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <_ZN5Print5printEPKc>
		if (readGPS())
    1b4a:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_Z7readGPSv>
    1b4e:	88 23       	and	r24, r24
    1b50:	a1 f0       	breq	.+40     	; 0x1b7a <setup+0x15e>
		{
			lcd.clear();
    1b52:	8b ef       	ldi	r24, 0xFB	; 251
    1b54:	94 e0       	ldi	r25, 0x04	; 4
    1b56:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN7hd447805clearEv>
			lcd.print("Data received");
    1b5a:	67 e5       	ldi	r22, 0x57	; 87
    1b5c:	72 e0       	ldi	r23, 0x02	; 2
    1b5e:	8b ef       	ldi	r24, 0xFB	; 251
    1b60:	94 e0       	ldi	r25, 0x04	; 4
    1b62:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <_ZN5Print5printEPKc>
			gpsDataReceived = true;
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <gpsDataReceived>
			timeDataReceived = millis();
    1b6c:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <millis>
    1b70:	70 93 92 03 	sts	0x0392, r23	; 0x800392 <timeDataReceived+0x1>
    1b74:	60 93 91 03 	sts	0x0391, r22	; 0x800391 <timeDataReceived>
			break;
    1b78:	07 c0       	rjmp	.+14     	; 0x1b88 <setup+0x16c>
		}
		else timeDataReceived = millis();
    1b7a:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <millis>
    1b7e:	70 93 92 03 	sts	0x0392, r23	; 0x800392 <timeDataReceived+0x1>
    1b82:	60 93 91 03 	sts	0x0391, r22	; 0x800391 <timeDataReceived>
	myPID.SetSampleTime(100);//Set PID sampling frequency is 100ms
	attachInterrupt(digitalPinToInterrupt(7), wheelSpeed, CHANGE); //Pin 7 -> Interrupt 4
	previousMillis = millis();
	
	//GPS-Modul auslesen
	while (millis()<6000)
    1b86:	ce cf       	rjmp	.-100    	; 0x1b24 <setup+0x108>
			timeDataReceived = millis();
			break;
		}
		else timeDataReceived = millis();
	}
	if (gpsDataReceived == false) 
    1b88:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <gpsDataReceived>
    1b8c:	81 11       	cpse	r24, r1
    1b8e:	0a c0       	rjmp	.+20     	; 0x1ba4 <setup+0x188>
	{
		lcd.clear();
    1b90:	8b ef       	ldi	r24, 0xFB	; 251
    1b92:	94 e0       	ldi	r25, 0x04	; 4
    1b94:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN7hd447805clearEv>
		lcd.print("No GPS-Signal");	
    1b98:	65 e6       	ldi	r22, 0x65	; 101
    1b9a:	72 e0       	ldi	r23, 0x02	; 2
    1b9c:	8b ef       	ldi	r24, 0xFB	; 251
    1b9e:	94 e0       	ldi	r25, 0x04	; 4
    1ba0:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <_ZN5Print5printEPKc>
	}
	zeitTimeZone = zeitGMT;
    1ba4:	88 e0       	ldi	r24, 0x08	; 8
    1ba6:	e9 e8       	ldi	r30, 0x89	; 137
    1ba8:	f3 e0       	ldi	r31, 0x03	; 3
    1baa:	a1 e8       	ldi	r26, 0x81	; 129
    1bac:	b3 e0       	ldi	r27, 0x03	; 3
    1bae:	01 90       	ld	r0, Z+
    1bb0:	0d 92       	st	X+, r0
    1bb2:	8a 95       	dec	r24
    1bb4:	e1 f7       	brne	.-8      	; 0x1bae <setup+0x192>
	while((timeDataReceived+2000) > millis());
    1bb6:	c0 90 91 03 	lds	r12, 0x0391	; 0x800391 <timeDataReceived>
    1bba:	d0 90 92 03 	lds	r13, 0x0392	; 0x800392 <timeDataReceived+0x1>
    1bbe:	80 e3       	ldi	r24, 0x30	; 48
    1bc0:	c8 1a       	sub	r12, r24
    1bc2:	88 ef       	ldi	r24, 0xF8	; 248
    1bc4:	d8 0a       	sbc	r13, r24
    1bc6:	0d 2c       	mov	r0, r13
    1bc8:	00 0c       	add	r0, r0
    1bca:	ee 08       	sbc	r14, r14
    1bcc:	ff 08       	sbc	r15, r15
    1bce:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <millis>
    1bd2:	6c 15       	cp	r22, r12
    1bd4:	7d 05       	cpc	r23, r13
    1bd6:	8e 05       	cpc	r24, r14
    1bd8:	9f 05       	cpc	r25, r15
    1bda:	68 f3       	brcs	.-38     	; 0x1bb6 <setup+0x19a>
	lcd.clear();
    1bdc:	8b ef       	ldi	r24, 0xFB	; 251
    1bde:	94 e0       	ldi	r25, 0x04	; 4
}
    1be0:	ff 90       	pop	r15
    1be2:	ef 90       	pop	r14
    1be4:	df 90       	pop	r13
    1be6:	cf 90       	pop	r12
		lcd.clear();
		lcd.print("No GPS-Signal");	
	}
	zeitTimeZone = zeitGMT;
	while((timeDataReceived+2000) > millis());
	lcd.clear();
    1be8:	0c 94 35 15 	jmp	0x2a6a	; 0x2a6a <_ZN7hd447805clearEv>

00001bec <loop>:
 * called repeatedly in an endless loop
 * 
 * \return void
 */
void loop()
{
    1bec:	cf 92       	push	r12
    1bee:	df 92       	push	r13
    1bf0:	ef 92       	push	r14
    1bf2:	ff 92       	push	r15
    1bf4:	0f 93       	push	r16
    1bf6:	1f 93       	push	r17
	//Wenn keine GPS-Daten vorhanden sind wird weiter nach Daten gesucht.
	//Wurden beim Setup GPS-DAten gefunden wird alle 30min die Uhrzeit und das Datum synchronisiert.
	if (gpsDataReceived == false || (timeDataReceived + 1000*60*30) < millis()) 
    1bf8:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <gpsDataReceived>
    1bfc:	88 23       	and	r24, r24
    1bfe:	09 f4       	brne	.+2      	; 0x1c02 <loop+0x16>
    1c00:	ab c1       	rjmp	.+854    	; 0x1f58 <loop+0x36c>
    1c02:	c0 90 91 03 	lds	r12, 0x0391	; 0x800391 <timeDataReceived>
    1c06:	d0 90 92 03 	lds	r13, 0x0392	; 0x800392 <timeDataReceived+0x1>
    1c0a:	80 ec       	ldi	r24, 0xC0	; 192
    1c0c:	c8 1a       	sub	r12, r24
    1c0e:	88 e8       	ldi	r24, 0x88	; 136
    1c10:	d8 0a       	sbc	r13, r24
    1c12:	0d 2c       	mov	r0, r13
    1c14:	00 0c       	add	r0, r0
    1c16:	ee 08       	sbc	r14, r14
    1c18:	ff 08       	sbc	r15, r15
    1c1a:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <millis>
    1c1e:	c6 16       	cp	r12, r22
    1c20:	d7 06       	cpc	r13, r23
    1c22:	e8 06       	cpc	r14, r24
    1c24:	f9 06       	cpc	r15, r25
    1c26:	08 f4       	brcc	.+2      	; 0x1c2a <loop+0x3e>
    1c28:	97 c1       	rjmp	.+814    	; 0x1f58 <loop+0x36c>
		gpsDataReceived = readGPS();
		timeDataReceived = millis();
	}	
		
	//Button-Pin auslesen und auf Nullstellung reagieren
	if (digitalRead(btnPin) == HIGH)
    1c2a:	88 e0       	ldi	r24, 0x08	; 8
    1c2c:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <digitalRead>
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	49 f4       	brne	.+18     	; 0x1c46 <loop+0x5a>
	{
		Setpoint = 0;
    1c34:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <Setpoint>
    1c38:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <Setpoint+0x1>
    1c3c:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <Setpoint+0x2>
    1c40:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <Setpoint+0x3>
    1c44:	9b c1       	rjmp	.+822    	; 0x1f7c <loop+0x390>
	}
	else
	{
	//Aktueller Zeigerstand als Nullstellung definiert
	if (zeitLocal.GetSeconds() == 0) Setpoint = 20;
    1c46:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <zeitLocal+0x4>
    1c4a:	90 91 7e 03 	lds	r25, 0x037E	; 0x80037e <zeitLocal+0x5>
    1c4e:	89 2b       	or	r24, r25
    1c50:	61 f4       	brne	.+24     	; 0x1c6a <loop+0x7e>
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	a0 ea       	ldi	r26, 0xA0	; 160
    1c58:	b1 e4       	ldi	r27, 0x41	; 65
    1c5a:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <Setpoint>
    1c5e:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <Setpoint+0x1>
    1c62:	a0 93 26 04 	sts	0x0426, r26	; 0x800426 <Setpoint+0x2>
    1c66:	b0 93 27 04 	sts	0x0427, r27	; 0x800427 <Setpoint+0x3>
	//PID-Regelung
	advance(); //Motor forward
    1c6a:	0e 94 29 06 	call	0xc52	; 0xc52 <_Z7advancev>
	currentMillis = millis();
    1c6e:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <millis>
    1c72:	60 93 dc 03 	sts	0x03DC, r22	; 0x8003dc <currentMillis>
    1c76:	70 93 dd 03 	sts	0x03DD, r23	; 0x8003dd <currentMillis+0x1>
    1c7a:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <currentMillis+0x2>
    1c7e:	90 93 df 03 	sts	0x03DF, r25	; 0x8003df <currentMillis+0x3>
	if (currentMillis - previousMillis > interval)
    1c82:	00 91 e0 03 	lds	r16, 0x03E0	; 0x8003e0 <previousMillis>
    1c86:	10 91 e1 03 	lds	r17, 0x03E1	; 0x8003e1 <previousMillis+0x1>
    1c8a:	20 91 e2 03 	lds	r18, 0x03E2	; 0x8003e2 <previousMillis+0x2>
    1c8e:	30 91 e3 03 	lds	r19, 0x03E3	; 0x8003e3 <previousMillis+0x3>
    1c92:	6b 01       	movw	r12, r22
    1c94:	7c 01       	movw	r14, r24
    1c96:	c0 1a       	sub	r12, r16
    1c98:	d1 0a       	sbc	r13, r17
    1c9a:	e2 0a       	sbc	r14, r18
    1c9c:	f3 0a       	sbc	r15, r19
    1c9e:	97 01       	movw	r18, r14
    1ca0:	86 01       	movw	r16, r12
    1ca2:	c0 90 0a 01 	lds	r12, 0x010A	; 0x80010a <interval>
    1ca6:	d0 90 0b 01 	lds	r13, 0x010B	; 0x80010b <interval+0x1>
    1caa:	0d 2c       	mov	r0, r13
    1cac:	00 0c       	add	r0, r0
    1cae:	ee 08       	sbc	r14, r14
    1cb0:	ff 08       	sbc	r15, r15
    1cb2:	c0 16       	cp	r12, r16
    1cb4:	d1 06       	cpc	r13, r17
    1cb6:	e2 06       	cpc	r14, r18
    1cb8:	f3 06       	cpc	r15, r19
    1cba:	a4 f5       	brge	.+104    	; 0x1d24 <loop+0x138>
	{
		previousMillis = currentMillis;
    1cbc:	60 93 e0 03 	sts	0x03E0, r22	; 0x8003e0 <previousMillis>
    1cc0:	70 93 e1 03 	sts	0x03E1, r23	; 0x8003e1 <previousMillis+0x1>
    1cc4:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <previousMillis+0x2>
    1cc8:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <previousMillis+0x3>
		
		abs_duration=duration * 60 / 1920;
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e7       	ldi	r20, 0x70	; 112
    1cd2:	52 e4       	ldi	r21, 0x42	; 66
    1cd4:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <duration>
    1cd8:	70 91 32 04 	lds	r23, 0x0432	; 0x800432 <duration+0x1>
    1cdc:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <duration+0x2>
    1ce0:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <duration+0x3>
    1ce4:	0e 94 c3 1b 	call	0x3786	; 0x3786 <__mulsf3>
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 ef       	ldi	r20, 0xF0	; 240
    1cee:	54 e4       	ldi	r21, 0x44	; 68
    1cf0:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <__divsf3>
    1cf4:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <abs_duration>
    1cf8:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <abs_duration+0x1>
    1cfc:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <abs_duration+0x2>
    1d00:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <abs_duration+0x3>
			
		result=myPID.Compute();//PID conversion is complete and returns 1
    1d04:	84 ee       	ldi	r24, 0xE4	; 228
    1d06:	93 e0       	ldi	r25, 0x03	; 3
    1d08:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <_ZN3PID7ComputeEv>
    1d0c:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <result>
		if(result)
    1d10:	88 23       	and	r24, r24
    1d12:	41 f0       	breq	.+16     	; 0x1d24 <loop+0x138>
		{
			duration = 0; //Count clear, wait for the next count
    1d14:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <duration>
    1d18:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <duration+0x1>
    1d1c:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <duration+0x2>
    1d20:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <duration+0x3>
		}
	}
	Watch();
    1d24:	0e 94 b5 02 	call	0x56a	; 0x56a <_Z5Watchv>
	if(weckerStatus&&(zeitLocal.GetHours()==weckzeit.GetHours())&&(zeitLocal.GetMinutes()==weckzeit.GetMinutes())&&(zeitLocal.GetSeconds()==weckzeit.GetSeconds())) buzzer = 1;
    1d28:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <weckerStatus>
    1d2c:	88 23       	and	r24, r24
    1d2e:	11 f1       	breq	.+68     	; 0x1d74 <loop+0x188>
    1d30:	20 91 79 03 	lds	r18, 0x0379	; 0x800379 <zeitLocal>
    1d34:	30 91 7a 03 	lds	r19, 0x037A	; 0x80037a <zeitLocal+0x1>
    1d38:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <weckzeit>
    1d3c:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <weckzeit+0x1>
    1d40:	28 17       	cp	r18, r24
    1d42:	39 07       	cpc	r19, r25
    1d44:	b9 f4       	brne	.+46     	; 0x1d74 <loop+0x188>
    1d46:	20 91 7b 03 	lds	r18, 0x037B	; 0x80037b <zeitLocal+0x2>
    1d4a:	30 91 7c 03 	lds	r19, 0x037C	; 0x80037c <zeitLocal+0x3>
    1d4e:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <weckzeit+0x2>
    1d52:	90 91 74 03 	lds	r25, 0x0374	; 0x800374 <weckzeit+0x3>
    1d56:	28 17       	cp	r18, r24
    1d58:	39 07       	cpc	r19, r25
    1d5a:	61 f4       	brne	.+24     	; 0x1d74 <loop+0x188>
    1d5c:	20 91 7d 03 	lds	r18, 0x037D	; 0x80037d <zeitLocal+0x4>
    1d60:	30 91 7e 03 	lds	r19, 0x037E	; 0x80037e <zeitLocal+0x5>
    1d64:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <weckzeit+0x4>
    1d68:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <weckzeit+0x5>
    1d6c:	28 17       	cp	r18, r24
    1d6e:	39 07       	cpc	r19, r25
    1d70:	09 f4       	brne	.+2      	; 0x1d74 <loop+0x188>
    1d72:	fd c0       	rjmp	.+506    	; 0x1f6e <loop+0x382>
	input = getkey();
    1d74:	0e 94 27 01 	call	0x24e	; 0x24e <_Z6getkeyv>
    1d78:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <_ZL5input+0x1>
    1d7c:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <_ZL5input>
		if(buzzer)
    1d80:	20 91 6e 03 	lds	r18, 0x036E	; 0x80036e <buzzer>
    1d84:	30 91 6f 03 	lds	r19, 0x036F	; 0x80036f <buzzer+0x1>
    1d88:	23 2b       	or	r18, r19
    1d8a:	c1 f0       	breq	.+48     	; 0x1dbc <loop+0x1d0>
		{
			if(input){
    1d8c:	89 2b       	or	r24, r25
    1d8e:	49 f0       	breq	.+18     	; 0x1da2 <loop+0x1b6>
				lcd.noBacklight();
    1d90:	8b ef       	ldi	r24, 0xFB	; 251
    1d92:	94 e0       	ldi	r25, 0x04	; 4
    1d94:	0e 94 f6 14 	call	0x29ec	; 0x29ec <_ZN7hd4478011noBacklightEv>
				buzzer = 0;
    1d98:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <buzzer+0x1>
    1d9c:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <buzzer>
    1da0:	0d c0       	rjmp	.+26     	; 0x1dbc <loop+0x1d0>
			}
			else if(zeitLocal.GetSeconds()%2) lcd.backlight(); else lcd.noBacklight();
    1da2:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <zeitLocal+0x4>
    1da6:	80 ff       	sbrs	r24, 0
    1da8:	05 c0       	rjmp	.+10     	; 0x1db4 <loop+0x1c8>
    1daa:	8b ef       	ldi	r24, 0xFB	; 251
    1dac:	94 e0       	ldi	r25, 0x04	; 4
    1dae:	0e 94 ee 14 	call	0x29dc	; 0x29dc <_ZN7hd447809backlightEv>
    1db2:	04 c0       	rjmp	.+8      	; 0x1dbc <loop+0x1d0>
    1db4:	8b ef       	ldi	r24, 0xFB	; 251
    1db6:	94 e0       	ldi	r25, 0x04	; 4
    1db8:	0e 94 f6 14 	call	0x29ec	; 0x29ec <_ZN7hd4478011noBacklightEv>
		}
	if (watchmenu[menu].active) input = watchmenu[menu].active(input);
    1dbc:	e0 91 54 03 	lds	r30, 0x0354	; 0x800354 <_ZL4menu>
    1dc0:	f0 91 55 03 	lds	r31, 0x0355	; 0x800355 <_ZL4menu+0x1>
    1dc4:	74 e0       	ldi	r23, 0x04	; 4
    1dc6:	ee 0f       	add	r30, r30
    1dc8:	ff 1f       	adc	r31, r31
    1dca:	7a 95       	dec	r23
    1dcc:	e1 f7       	brne	.-8      	; 0x1dc6 <loop+0x1da>
    1dce:	e7 57       	subi	r30, 0x77	; 119
    1dd0:	fd 4f       	sbci	r31, 0xFD	; 253
    1dd2:	02 84       	ldd	r0, Z+10	; 0x0a
    1dd4:	f3 85       	ldd	r31, Z+11	; 0x0b
    1dd6:	e0 2d       	mov	r30, r0
    1dd8:	30 97       	sbiw	r30, 0x00	; 0
    1dda:	49 f0       	breq	.+18     	; 0x1dee <loop+0x202>
    1ddc:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <_ZL5input>
    1de0:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <_ZL5input+0x1>
    1de4:	09 95       	icall
    1de6:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <_ZL5input+0x1>
    1dea:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <_ZL5input>
		//! cyclic call to active function as long as menu n is active
	switch(input) {
    1dee:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <_ZL5input>
    1df2:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <_ZL5input+0x1>
    1df6:	83 30       	cpi	r24, 0x03	; 3
    1df8:	91 05       	cpc	r25, r1
    1dfa:	d9 f1       	breq	.+118    	; 0x1e72 <loop+0x286>
    1dfc:	34 f4       	brge	.+12     	; 0x1e0a <loop+0x21e>
    1dfe:	81 30       	cpi	r24, 0x01	; 1
    1e00:	91 05       	cpc	r25, r1
    1e02:	79 f0       	breq	.+30     	; 0x1e22 <loop+0x236>
    1e04:	02 97       	sbiw	r24, 0x02	; 2
    1e06:	19 f1       	breq	.+70     	; 0x1e4e <loop+0x262>
    1e08:	09 c0       	rjmp	.+18     	; 0x1e1c <loop+0x230>
    1e0a:	85 30       	cpi	r24, 0x05	; 5
    1e0c:	91 05       	cpc	r25, r1
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <loop+0x226>
    1e10:	65 c0       	rjmp	.+202    	; 0x1edc <loop+0x2f0>
    1e12:	0c f4       	brge	.+2      	; 0x1e16 <loop+0x22a>
    1e14:	40 c0       	rjmp	.+128    	; 0x1e96 <loop+0x2aa>
    1e16:	06 97       	sbiw	r24, 0x06	; 6
    1e18:	09 f4       	brne	.+2      	; 0x1e1c <loop+0x230>
    1e1a:	83 c0       	rjmp	.+262    	; 0x1f22 <loop+0x336>
		default:
		case X_KEY:
		case NO_KEY:
		newmenu = -1; // no changes made
    1e1c:	8f ef       	ldi	r24, 0xFF	; 255
    1e1e:	9f ef       	ldi	r25, 0xFF	; 255
    1e20:	11 c0       	rjmp	.+34     	; 0x1e44 <loop+0x258>
		break;
		case UP_KEY:
		lcd.clear();
    1e22:	8b ef       	ldi	r24, 0xFB	; 251
    1e24:	94 e0       	ldi	r25, 0x04	; 4
    1e26:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].up;
    1e2a:	e0 91 54 03 	lds	r30, 0x0354	; 0x800354 <_ZL4menu>
    1e2e:	f0 91 55 03 	lds	r31, 0x0355	; 0x800355 <_ZL4menu+0x1>
    1e32:	64 e0       	ldi	r22, 0x04	; 4
    1e34:	ee 0f       	add	r30, r30
    1e36:	ff 1f       	adc	r31, r31
    1e38:	6a 95       	dec	r22
    1e3a:	e1 f7       	brne	.-8      	; 0x1e34 <loop+0x248>
    1e3c:	e7 57       	subi	r30, 0x77	; 119
    1e3e:	fd 4f       	sbci	r31, 0xFD	; 253
    1e40:	80 81       	ld	r24, Z
    1e42:	91 81       	ldd	r25, Z+1	; 0x01
    1e44:	90 93 53 03 	sts	0x0353, r25	; 0x800353 <_ZL7newmenu+0x1>
    1e48:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <_ZL7newmenu>
		break;
    1e4c:	7a c0       	rjmp	.+244    	; 0x1f42 <loop+0x356>
		case LEFT_KEY:
		lcd.clear();
    1e4e:	8b ef       	ldi	r24, 0xFB	; 251
    1e50:	94 e0       	ldi	r25, 0x04	; 4
    1e52:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].left;
    1e56:	e0 91 54 03 	lds	r30, 0x0354	; 0x800354 <_ZL4menu>
    1e5a:	f0 91 55 03 	lds	r31, 0x0355	; 0x800355 <_ZL4menu+0x1>
    1e5e:	54 e0       	ldi	r21, 0x04	; 4
    1e60:	ee 0f       	add	r30, r30
    1e62:	ff 1f       	adc	r31, r31
    1e64:	5a 95       	dec	r21
    1e66:	e1 f7       	brne	.-8      	; 0x1e60 <loop+0x274>
    1e68:	e7 57       	subi	r30, 0x77	; 119
    1e6a:	fd 4f       	sbci	r31, 0xFD	; 253
    1e6c:	82 81       	ldd	r24, Z+2	; 0x02
    1e6e:	93 81       	ldd	r25, Z+3	; 0x03
    1e70:	e9 cf       	rjmp	.-46     	; 0x1e44 <loop+0x258>
		break;
		case DOWN_KEY:
		lcd.clear();
    1e72:	8b ef       	ldi	r24, 0xFB	; 251
    1e74:	94 e0       	ldi	r25, 0x04	; 4
    1e76:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].down;
    1e7a:	e0 91 54 03 	lds	r30, 0x0354	; 0x800354 <_ZL4menu>
    1e7e:	f0 91 55 03 	lds	r31, 0x0355	; 0x800355 <_ZL4menu+0x1>
    1e82:	44 e0       	ldi	r20, 0x04	; 4
    1e84:	ee 0f       	add	r30, r30
    1e86:	ff 1f       	adc	r31, r31
    1e88:	4a 95       	dec	r20
    1e8a:	e1 f7       	brne	.-8      	; 0x1e84 <loop+0x298>
    1e8c:	e7 57       	subi	r30, 0x77	; 119
    1e8e:	fd 4f       	sbci	r31, 0xFD	; 253
    1e90:	84 81       	ldd	r24, Z+4	; 0x04
    1e92:	95 81       	ldd	r25, Z+5	; 0x05
    1e94:	d7 cf       	rjmp	.-82     	; 0x1e44 <loop+0x258>
		break;
		case RIGHT_KEY:
		lcd.clear();
    1e96:	8b ef       	ldi	r24, 0xFB	; 251
    1e98:	94 e0       	ldi	r25, 0x04	; 4
    1e9a:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN7hd447805clearEv>
		if(watchmenu[menu].goright != NULL) {
    1e9e:	e0 91 54 03 	lds	r30, 0x0354	; 0x800354 <_ZL4menu>
    1ea2:	f0 91 55 03 	lds	r31, 0x0355	; 0x800355 <_ZL4menu+0x1>
    1ea6:	34 e0       	ldi	r19, 0x04	; 4
    1ea8:	ee 0f       	add	r30, r30
    1eaa:	ff 1f       	adc	r31, r31
    1eac:	3a 95       	dec	r19
    1eae:	e1 f7       	brne	.-8      	; 0x1ea8 <loop+0x2bc>
    1eb0:	e7 57       	subi	r30, 0x77	; 119
    1eb2:	fd 4f       	sbci	r31, 0xFD	; 253
    1eb4:	04 84       	ldd	r0, Z+12	; 0x0c
    1eb6:	f5 85       	ldd	r31, Z+13	; 0x0d
    1eb8:	e0 2d       	mov	r30, r0
    1eba:	30 97       	sbiw	r30, 0x00	; 0
    1ebc:	09 f0       	breq	.+2      	; 0x1ec0 <loop+0x2d4>
			//! call go right function with new value
			watchmenu[menu].goright();
    1ebe:	09 95       	icall
		}
		newmenu = watchmenu[menu].right;
    1ec0:	e0 91 54 03 	lds	r30, 0x0354	; 0x800354 <_ZL4menu>
    1ec4:	f0 91 55 03 	lds	r31, 0x0355	; 0x800355 <_ZL4menu+0x1>
    1ec8:	24 e0       	ldi	r18, 0x04	; 4
    1eca:	ee 0f       	add	r30, r30
    1ecc:	ff 1f       	adc	r31, r31
    1ece:	2a 95       	dec	r18
    1ed0:	e1 f7       	brne	.-8      	; 0x1eca <loop+0x2de>
    1ed2:	e7 57       	subi	r30, 0x77	; 119
    1ed4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ed6:	86 81       	ldd	r24, Z+6	; 0x06
    1ed8:	97 81       	ldd	r25, Z+7	; 0x07
    1eda:	b4 cf       	rjmp	.-152    	; 0x1e44 <loop+0x258>
		break;
		case OK_KEY:
		lcd.clear();
    1edc:	8b ef       	ldi	r24, 0xFB	; 251
    1ede:	94 e0       	ldi	r25, 0x04	; 4
    1ee0:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN7hd447805clearEv>
		if(watchmenu[menu].positive != NULL) {
    1ee4:	e0 91 54 03 	lds	r30, 0x0354	; 0x800354 <_ZL4menu>
    1ee8:	f0 91 55 03 	lds	r31, 0x0355	; 0x800355 <_ZL4menu+0x1>
    1eec:	94 e0       	ldi	r25, 0x04	; 4
    1eee:	ee 0f       	add	r30, r30
    1ef0:	ff 1f       	adc	r31, r31
    1ef2:	9a 95       	dec	r25
    1ef4:	e1 f7       	brne	.-8      	; 0x1eee <loop+0x302>
    1ef6:	e7 57       	subi	r30, 0x77	; 119
    1ef8:	fd 4f       	sbci	r31, 0xFD	; 253
    1efa:	06 84       	ldd	r0, Z+14	; 0x0e
    1efc:	f7 85       	ldd	r31, Z+15	; 0x0f
    1efe:	e0 2d       	mov	r30, r0
    1f00:	30 97       	sbiw	r30, 0x00	; 0
    1f02:	09 f0       	breq	.+2      	; 0x1f06 <loop+0x31a>
			//! call positive answer function with new value
			watchmenu[menu].positive();
    1f04:	09 95       	icall
		}
		newmenu = watchmenu[menu].ok;
    1f06:	e0 91 54 03 	lds	r30, 0x0354	; 0x800354 <_ZL4menu>
    1f0a:	f0 91 55 03 	lds	r31, 0x0355	; 0x800355 <_ZL4menu+0x1>
    1f0e:	84 e0       	ldi	r24, 0x04	; 4
    1f10:	ee 0f       	add	r30, r30
    1f12:	ff 1f       	adc	r31, r31
    1f14:	8a 95       	dec	r24
    1f16:	e1 f7       	brne	.-8      	; 0x1f10 <loop+0x324>
    1f18:	e7 57       	subi	r30, 0x77	; 119
    1f1a:	fd 4f       	sbci	r31, 0xFD	; 253
    1f1c:	80 85       	ldd	r24, Z+8	; 0x08
    1f1e:	91 85       	ldd	r25, Z+9	; 0x09
    1f20:	91 cf       	rjmp	.-222    	; 0x1e44 <loop+0x258>
		break;
		case BK_KEY:
		lcd.clear();
    1f22:	8b ef       	ldi	r24, 0xFB	; 251
    1f24:	94 e0       	ldi	r25, 0x04	; 4
    1f26:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN7hd447805clearEv>
		lcd.noCursor();
    1f2a:	8b ef       	ldi	r24, 0xFB	; 251
    1f2c:	94 e0       	ldi	r25, 0x04	; 4
    1f2e:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <_ZN7hd447808noCursorEv>
		lcd.noBlink();
    1f32:	8b ef       	ldi	r24, 0xFB	; 251
    1f34:	94 e0       	ldi	r25, 0x04	; 4
    1f36:	0e 94 02 16 	call	0x2c04	; 0x2c04 <_ZN7hd447807noBlinkEv>
		newmenu = 0;
    1f3a:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <_ZL7newmenu+0x1>
    1f3e:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <_ZL7newmenu>
		break;
	}
	if(newmenu >= 0) menu = newmenu;
    1f42:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <_ZL7newmenu>
    1f46:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <_ZL7newmenu+0x1>
    1f4a:	97 fd       	sbrc	r25, 7
    1f4c:	17 c0       	rjmp	.+46     	; 0x1f7c <loop+0x390>
    1f4e:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <_ZL4menu+0x1>
    1f52:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <_ZL4menu>

	} //else Klammer
}
    1f56:	12 c0       	rjmp	.+36     	; 0x1f7c <loop+0x390>
{
	//Wenn keine GPS-Daten vorhanden sind wird weiter nach Daten gesucht.
	//Wurden beim Setup GPS-DAten gefunden wird alle 30min die Uhrzeit und das Datum synchronisiert.
	if (gpsDataReceived == false || (timeDataReceived + 1000*60*30) < millis()) 
	{
		gpsDataReceived = readGPS();
    1f58:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_Z7readGPSv>
    1f5c:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <gpsDataReceived>
		timeDataReceived = millis();
    1f60:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <millis>
    1f64:	70 93 92 03 	sts	0x0392, r23	; 0x800392 <timeDataReceived+0x1>
    1f68:	60 93 91 03 	sts	0x0391, r22	; 0x800391 <timeDataReceived>
    1f6c:	5e ce       	rjmp	.-836    	; 0x1c2a <loop+0x3e>
		{
			duration = 0; //Count clear, wait for the next count
		}
	}
	Watch();
	if(weckerStatus&&(zeitLocal.GetHours()==weckzeit.GetHours())&&(zeitLocal.GetMinutes()==weckzeit.GetMinutes())&&(zeitLocal.GetSeconds()==weckzeit.GetSeconds())) buzzer = 1;
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <buzzer+0x1>
    1f76:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <buzzer>
    1f7a:	fc ce       	rjmp	.-520    	; 0x1d74 <loop+0x188>
		break;
	}
	if(newmenu >= 0) menu = newmenu;

	} //else Klammer
}
    1f7c:	1f 91       	pop	r17
    1f7e:	0f 91       	pop	r16
    1f80:	ff 90       	pop	r15
    1f82:	ef 90       	pop	r14
    1f84:	df 90       	pop	r13
    1f86:	cf 90       	pop	r12
    1f88:	08 95       	ret

00001f8a <_ZN3PID7ComputeEv>:
	   else if(*myOutput < outMin) *myOutput = outMin;

	   if(outputSum > outMax) outputSum= outMax;
	   else if(outputSum < outMin) outputSum= outMin;
   }
}
    1f8a:	2f 92       	push	r2
    1f8c:	3f 92       	push	r3
    1f8e:	4f 92       	push	r4
    1f90:	5f 92       	push	r5
    1f92:	6f 92       	push	r6
    1f94:	7f 92       	push	r7
    1f96:	8f 92       	push	r8
    1f98:	9f 92       	push	r9
    1f9a:	af 92       	push	r10
    1f9c:	bf 92       	push	r11
    1f9e:	cf 92       	push	r12
    1fa0:	df 92       	push	r13
    1fa2:	ef 92       	push	r14
    1fa4:	ff 92       	push	r15
    1fa6:	0f 93       	push	r16
    1fa8:	1f 93       	push	r17
    1faa:	cf 93       	push	r28
    1fac:	df 93       	push	r29
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
    1fb2:	60 97       	sbiw	r28, 0x10	; 16
    1fb4:	0f b6       	in	r0, 0x3f	; 63
    1fb6:	f8 94       	cli
    1fb8:	de bf       	out	0x3e, r29	; 62
    1fba:	0f be       	out	0x3f, r0	; 63
    1fbc:	cd bf       	out	0x3d, r28	; 61
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	da 96       	adiw	r26, 0x3a	; 58
    1fc2:	bc 91       	ld	r27, X
    1fc4:	b9 83       	std	Y+1, r27	; 0x01
    1fc6:	b1 11       	cpse	r27, r1
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <_ZN3PID7ComputeEv+0x44>
    1fca:	19 82       	std	Y+1, r1	; 0x01
    1fcc:	2b c1       	rjmp	.+598    	; 0x2224 <_ZN3PID7ComputeEv+0x29a>
    1fce:	98 8b       	std	Y+16, r25	; 0x10
    1fd0:	8f 87       	std	Y+15, r24	; 0x0f
    1fd2:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <millis>
    1fd6:	6e 83       	std	Y+6, r22	; 0x06
    1fd8:	7f 83       	std	Y+7, r23	; 0x07
    1fda:	88 87       	std	Y+8, r24	; 0x08
    1fdc:	99 87       	std	Y+9, r25	; 0x09
    1fde:	ef 85       	ldd	r30, Y+15	; 0x0f
    1fe0:	f8 89       	ldd	r31, Y+16	; 0x10
    1fe2:	82 a1       	ldd	r24, Z+34	; 0x22
    1fe4:	93 a1       	ldd	r25, Z+35	; 0x23
    1fe6:	a4 a1       	ldd	r26, Z+36	; 0x24
    1fe8:	b5 a1       	ldd	r27, Z+37	; 0x25
    1fea:	4e 81       	ldd	r20, Y+6	; 0x06
    1fec:	5f 81       	ldd	r21, Y+7	; 0x07
    1fee:	68 85       	ldd	r22, Y+8	; 0x08
    1ff0:	79 85       	ldd	r23, Y+9	; 0x09
    1ff2:	48 1b       	sub	r20, r24
    1ff4:	59 0b       	sbc	r21, r25
    1ff6:	6a 0b       	sbc	r22, r26
    1ff8:	7b 0b       	sbc	r23, r27
    1ffa:	86 a5       	ldd	r24, Z+46	; 0x2e
    1ffc:	97 a5       	ldd	r25, Z+47	; 0x2f
    1ffe:	a0 a9       	ldd	r26, Z+48	; 0x30
    2000:	b1 a9       	ldd	r27, Z+49	; 0x31
    2002:	48 17       	cp	r20, r24
    2004:	59 07       	cpc	r21, r25
    2006:	6a 07       	cpc	r22, r26
    2008:	7b 07       	cpc	r23, r27
    200a:	f8 f2       	brcs	.-66     	; 0x1fca <_ZN3PID7ComputeEv+0x40>
    200c:	04 8c       	ldd	r0, Z+28	; 0x1c
    200e:	f5 8d       	ldd	r31, Z+29	; 0x1d
    2010:	e0 2d       	mov	r30, r0
    2012:	80 81       	ld	r24, Z
    2014:	91 81       	ldd	r25, Z+1	; 0x01
    2016:	a2 81       	ldd	r26, Z+2	; 0x02
    2018:	b3 81       	ldd	r27, Z+3	; 0x03
    201a:	8a 83       	std	Y+2, r24	; 0x02
    201c:	9b 83       	std	Y+3, r25	; 0x03
    201e:	ac 83       	std	Y+4, r26	; 0x04
    2020:	bd 83       	std	Y+5, r27	; 0x05
    2022:	af 85       	ldd	r26, Y+15	; 0x0f
    2024:	b8 89       	ldd	r27, Y+16	; 0x10
    2026:	90 96       	adiw	r26, 0x20	; 32
    2028:	ed 91       	ld	r30, X+
    202a:	fc 91       	ld	r31, X
    202c:	91 97       	sbiw	r26, 0x21	; 33
    202e:	2a 81       	ldd	r18, Y+2	; 0x02
    2030:	3b 81       	ldd	r19, Y+3	; 0x03
    2032:	4c 81       	ldd	r20, Y+4	; 0x04
    2034:	5d 81       	ldd	r21, Y+5	; 0x05
    2036:	60 81       	ld	r22, Z
    2038:	71 81       	ldd	r23, Z+1	; 0x01
    203a:	82 81       	ldd	r24, Z+2	; 0x02
    203c:	93 81       	ldd	r25, Z+3	; 0x03
    203e:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__subsf3>
    2042:	4b 01       	movw	r8, r22
    2044:	5c 01       	movw	r10, r24
    2046:	ef 85       	ldd	r30, Y+15	; 0x0f
    2048:	f8 89       	ldd	r31, Y+16	; 0x10
    204a:	22 a5       	ldd	r18, Z+42	; 0x2a
    204c:	33 a5       	ldd	r19, Z+43	; 0x2b
    204e:	44 a5       	ldd	r20, Z+44	; 0x2c
    2050:	55 a5       	ldd	r21, Z+45	; 0x2d
    2052:	6a 81       	ldd	r22, Y+2	; 0x02
    2054:	7b 81       	ldd	r23, Y+3	; 0x03
    2056:	8c 81       	ldd	r24, Y+4	; 0x04
    2058:	9d 81       	ldd	r25, Y+5	; 0x05
    205a:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__subsf3>
    205e:	6b 01       	movw	r12, r22
    2060:	7c 01       	movw	r14, r24
    2062:	af 85       	ldd	r26, Y+15	; 0x0f
    2064:	b8 89       	ldd	r27, Y+16	; 0x10
    2066:	50 96       	adiw	r26, 0x10	; 16
    2068:	2d 91       	ld	r18, X+
    206a:	3d 91       	ld	r19, X+
    206c:	4d 91       	ld	r20, X+
    206e:	5c 91       	ld	r21, X
    2070:	53 97       	sbiw	r26, 0x13	; 19
    2072:	c5 01       	movw	r24, r10
    2074:	b4 01       	movw	r22, r8
    2076:	0e 94 c3 1b 	call	0x3786	; 0x3786 <__mulsf3>
    207a:	ef 85       	ldd	r30, Y+15	; 0x0f
    207c:	f8 89       	ldd	r31, Y+16	; 0x10
    207e:	26 a1       	ldd	r18, Z+38	; 0x26
    2080:	37 a1       	ldd	r19, Z+39	; 0x27
    2082:	40 a5       	ldd	r20, Z+40	; 0x28
    2084:	51 a5       	ldd	r21, Z+41	; 0x29
    2086:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__addsf3>
    208a:	2b 01       	movw	r4, r22
    208c:	3c 01       	movw	r6, r24
    208e:	af 85       	ldd	r26, Y+15	; 0x0f
    2090:	b8 89       	ldd	r27, Y+16	; 0x10
    2092:	96 96       	adiw	r26, 0x26	; 38
    2094:	6d 93       	st	X+, r22
    2096:	7d 93       	st	X+, r23
    2098:	8d 93       	st	X+, r24
    209a:	9c 93       	st	X, r25
    209c:	99 97       	sbiw	r26, 0x29	; 41
    209e:	db 96       	adiw	r26, 0x3b	; 59
    20a0:	bc 91       	ld	r27, X
    20a2:	ba 87       	std	Y+10, r27	; 0x0a
    20a4:	b1 11       	cpse	r27, r1
    20a6:	18 c0       	rjmp	.+48     	; 0x20d8 <_ZN3PID7ComputeEv+0x14e>
    20a8:	ef 85       	ldd	r30, Y+15	; 0x0f
    20aa:	f8 89       	ldd	r31, Y+16	; 0x10
    20ac:	24 85       	ldd	r18, Z+12	; 0x0c
    20ae:	35 85       	ldd	r19, Z+13	; 0x0d
    20b0:	46 85       	ldd	r20, Z+14	; 0x0e
    20b2:	57 85       	ldd	r21, Z+15	; 0x0f
    20b4:	c7 01       	movw	r24, r14
    20b6:	b6 01       	movw	r22, r12
    20b8:	0e 94 c3 1b 	call	0x3786	; 0x3786 <__mulsf3>
    20bc:	9b 01       	movw	r18, r22
    20be:	ac 01       	movw	r20, r24
    20c0:	c3 01       	movw	r24, r6
    20c2:	b2 01       	movw	r22, r4
    20c4:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__subsf3>
    20c8:	af 85       	ldd	r26, Y+15	; 0x0f
    20ca:	b8 89       	ldd	r27, Y+16	; 0x10
    20cc:	96 96       	adiw	r26, 0x26	; 38
    20ce:	6d 93       	st	X+, r22
    20d0:	7d 93       	st	X+, r23
    20d2:	8d 93       	st	X+, r24
    20d4:	9c 93       	st	X, r25
    20d6:	99 97       	sbiw	r26, 0x29	; 41
    20d8:	ef 85       	ldd	r30, Y+15	; 0x0f
    20da:	f8 89       	ldd	r31, Y+16	; 0x10
    20dc:	46 a0       	ldd	r4, Z+38	; 0x26
    20de:	57 a0       	ldd	r5, Z+39	; 0x27
    20e0:	60 a4       	ldd	r6, Z+40	; 0x28
    20e2:	71 a4       	ldd	r7, Z+41	; 0x29
    20e4:	16 a9       	ldd	r17, Z+54	; 0x36
    20e6:	07 a9       	ldd	r16, Z+55	; 0x37
    20e8:	30 ac       	ldd	r3, Z+56	; 0x38
    20ea:	21 ac       	ldd	r2, Z+57	; 0x39
    20ec:	21 2f       	mov	r18, r17
    20ee:	30 2f       	mov	r19, r16
    20f0:	43 2d       	mov	r20, r3
    20f2:	52 2d       	mov	r21, r2
    20f4:	c3 01       	movw	r24, r6
    20f6:	b2 01       	movw	r22, r4
    20f8:	0e 94 be 1b 	call	0x377c	; 0x377c <__gesf2>
    20fc:	18 16       	cp	r1, r24
    20fe:	2c f4       	brge	.+10     	; 0x210a <_ZN3PID7ComputeEv+0x180>
    2100:	81 2f       	mov	r24, r17
    2102:	90 2f       	mov	r25, r16
    2104:	a3 2d       	mov	r26, r3
    2106:	b2 2d       	mov	r27, r2
    2108:	18 c0       	rjmp	.+48     	; 0x213a <_ZN3PID7ComputeEv+0x1b0>
    210a:	af 85       	ldd	r26, Y+15	; 0x0f
    210c:	b8 89       	ldd	r27, Y+16	; 0x10
    210e:	d2 96       	adiw	r26, 0x32	; 50
    2110:	8d 91       	ld	r24, X+
    2112:	9d 91       	ld	r25, X+
    2114:	0d 90       	ld	r0, X+
    2116:	bc 91       	ld	r27, X
    2118:	a0 2d       	mov	r26, r0
    211a:	8b 87       	std	Y+11, r24	; 0x0b
    211c:	9c 87       	std	Y+12, r25	; 0x0c
    211e:	ad 87       	std	Y+13, r26	; 0x0d
    2120:	be 87       	std	Y+14, r27	; 0x0e
    2122:	9c 01       	movw	r18, r24
    2124:	ad 01       	movw	r20, r26
    2126:	c3 01       	movw	r24, r6
    2128:	b2 01       	movw	r22, r4
    212a:	0e 94 5f 1a 	call	0x34be	; 0x34be <__cmpsf2>
    212e:	87 ff       	sbrs	r24, 7
    2130:	0a c0       	rjmp	.+20     	; 0x2146 <_ZN3PID7ComputeEv+0x1bc>
    2132:	8b 85       	ldd	r24, Y+11	; 0x0b
    2134:	9c 85       	ldd	r25, Y+12	; 0x0c
    2136:	ad 85       	ldd	r26, Y+13	; 0x0d
    2138:	be 85       	ldd	r27, Y+14	; 0x0e
    213a:	ef 85       	ldd	r30, Y+15	; 0x0f
    213c:	f8 89       	ldd	r31, Y+16	; 0x10
    213e:	86 a3       	std	Z+38, r24	; 0x26
    2140:	97 a3       	std	Z+39, r25	; 0x27
    2142:	a0 a7       	std	Z+40, r26	; 0x28
    2144:	b1 a7       	std	Z+41, r27	; 0x29
    2146:	fa 85       	ldd	r31, Y+10	; 0x0a
    2148:	ff 23       	and	r31, r31
    214a:	79 f0       	breq	.+30     	; 0x216a <_ZN3PID7ComputeEv+0x1e0>
    214c:	af 85       	ldd	r26, Y+15	; 0x0f
    214e:	b8 89       	ldd	r27, Y+16	; 0x10
    2150:	1c 96       	adiw	r26, 0x0c	; 12
    2152:	2d 91       	ld	r18, X+
    2154:	3d 91       	ld	r19, X+
    2156:	4d 91       	ld	r20, X+
    2158:	5c 91       	ld	r21, X
    215a:	1f 97       	sbiw	r26, 0x0f	; 15
    215c:	c5 01       	movw	r24, r10
    215e:	b4 01       	movw	r22, r8
    2160:	0e 94 c3 1b 	call	0x3786	; 0x3786 <__mulsf3>
    2164:	4b 01       	movw	r8, r22
    2166:	5c 01       	movw	r10, r24
    2168:	03 c0       	rjmp	.+6      	; 0x2170 <_ZN3PID7ComputeEv+0x1e6>
    216a:	81 2c       	mov	r8, r1
    216c:	91 2c       	mov	r9, r1
    216e:	54 01       	movw	r10, r8
    2170:	ef 85       	ldd	r30, Y+15	; 0x0f
    2172:	f8 89       	ldd	r31, Y+16	; 0x10
    2174:	24 89       	ldd	r18, Z+20	; 0x14
    2176:	35 89       	ldd	r19, Z+21	; 0x15
    2178:	46 89       	ldd	r20, Z+22	; 0x16
    217a:	57 89       	ldd	r21, Z+23	; 0x17
    217c:	c7 01       	movw	r24, r14
    217e:	b6 01       	movw	r22, r12
    2180:	0e 94 c3 1b 	call	0x3786	; 0x3786 <__mulsf3>
    2184:	9b 01       	movw	r18, r22
    2186:	ac 01       	movw	r20, r24
    2188:	af 85       	ldd	r26, Y+15	; 0x0f
    218a:	b8 89       	ldd	r27, Y+16	; 0x10
    218c:	96 96       	adiw	r26, 0x26	; 38
    218e:	6d 91       	ld	r22, X+
    2190:	7d 91       	ld	r23, X+
    2192:	8d 91       	ld	r24, X+
    2194:	9c 91       	ld	r25, X
    2196:	99 97       	sbiw	r26, 0x29	; 41
    2198:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__subsf3>
    219c:	a5 01       	movw	r20, r10
    219e:	94 01       	movw	r18, r8
    21a0:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__addsf3>
    21a4:	6b 01       	movw	r12, r22
    21a6:	7c 01       	movw	r14, r24
    21a8:	9b 01       	movw	r18, r22
    21aa:	ac 01       	movw	r20, r24
    21ac:	61 2f       	mov	r22, r17
    21ae:	70 2f       	mov	r23, r16
    21b0:	83 2d       	mov	r24, r3
    21b2:	92 2d       	mov	r25, r2
    21b4:	0e 94 5f 1a 	call	0x34be	; 0x34be <__cmpsf2>
    21b8:	87 fd       	sbrc	r24, 7
    21ba:	14 c0       	rjmp	.+40     	; 0x21e4 <_ZN3PID7ComputeEv+0x25a>
    21bc:	ef 85       	ldd	r30, Y+15	; 0x0f
    21be:	f8 89       	ldd	r31, Y+16	; 0x10
    21c0:	12 a9       	ldd	r17, Z+50	; 0x32
    21c2:	03 a9       	ldd	r16, Z+51	; 0x33
    21c4:	34 a8       	ldd	r3, Z+52	; 0x34
    21c6:	25 a8       	ldd	r2, Z+53	; 0x35
    21c8:	21 2f       	mov	r18, r17
    21ca:	30 2f       	mov	r19, r16
    21cc:	43 2d       	mov	r20, r3
    21ce:	52 2d       	mov	r21, r2
    21d0:	b6 01       	movw	r22, r12
    21d2:	c7 01       	movw	r24, r14
    21d4:	0e 94 5f 1a 	call	0x34be	; 0x34be <__cmpsf2>
    21d8:	87 fd       	sbrc	r24, 7
    21da:	04 c0       	rjmp	.+8      	; 0x21e4 <_ZN3PID7ComputeEv+0x25a>
    21dc:	1c 2d       	mov	r17, r12
    21de:	0d 2d       	mov	r16, r13
    21e0:	3e 2c       	mov	r3, r14
    21e2:	2f 2c       	mov	r2, r15
    21e4:	af 85       	ldd	r26, Y+15	; 0x0f
    21e6:	b8 89       	ldd	r27, Y+16	; 0x10
    21e8:	5e 96       	adiw	r26, 0x1e	; 30
    21ea:	ed 91       	ld	r30, X+
    21ec:	fc 91       	ld	r31, X
    21ee:	5f 97       	sbiw	r26, 0x1f	; 31
    21f0:	81 2f       	mov	r24, r17
    21f2:	90 2f       	mov	r25, r16
    21f4:	a3 2d       	mov	r26, r3
    21f6:	b2 2d       	mov	r27, r2
    21f8:	80 83       	st	Z, r24
    21fa:	91 83       	std	Z+1, r25	; 0x01
    21fc:	a2 83       	std	Z+2, r26	; 0x02
    21fe:	b3 83       	std	Z+3, r27	; 0x03
    2200:	8a 81       	ldd	r24, Y+2	; 0x02
    2202:	9b 81       	ldd	r25, Y+3	; 0x03
    2204:	ac 81       	ldd	r26, Y+4	; 0x04
    2206:	bd 81       	ldd	r27, Y+5	; 0x05
    2208:	ef 85       	ldd	r30, Y+15	; 0x0f
    220a:	f8 89       	ldd	r31, Y+16	; 0x10
    220c:	82 a7       	std	Z+42, r24	; 0x2a
    220e:	93 a7       	std	Z+43, r25	; 0x2b
    2210:	a4 a7       	std	Z+44, r26	; 0x2c
    2212:	b5 a7       	std	Z+45, r27	; 0x2d
    2214:	8e 81       	ldd	r24, Y+6	; 0x06
    2216:	9f 81       	ldd	r25, Y+7	; 0x07
    2218:	a8 85       	ldd	r26, Y+8	; 0x08
    221a:	b9 85       	ldd	r27, Y+9	; 0x09
    221c:	82 a3       	std	Z+34, r24	; 0x22
    221e:	93 a3       	std	Z+35, r25	; 0x23
    2220:	a4 a3       	std	Z+36, r26	; 0x24
    2222:	b5 a3       	std	Z+37, r27	; 0x25
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	60 96       	adiw	r28, 0x10	; 16
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	f8 94       	cli
    222c:	de bf       	out	0x3e, r29	; 62
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	cd bf       	out	0x3d, r28	; 61
    2232:	df 91       	pop	r29
    2234:	cf 91       	pop	r28
    2236:	1f 91       	pop	r17
    2238:	0f 91       	pop	r16
    223a:	ff 90       	pop	r15
    223c:	ef 90       	pop	r14
    223e:	df 90       	pop	r13
    2240:	cf 90       	pop	r12
    2242:	bf 90       	pop	r11
    2244:	af 90       	pop	r10
    2246:	9f 90       	pop	r9
    2248:	8f 90       	pop	r8
    224a:	7f 90       	pop	r7
    224c:	6f 90       	pop	r6
    224e:	5f 90       	pop	r5
    2250:	4f 90       	pop	r4
    2252:	3f 90       	pop	r3
    2254:	2f 90       	pop	r2
    2256:	08 95       	ret

00002258 <_ZN3PID10SetTuningsEdddi>:
    2258:	4f 92       	push	r4
    225a:	5f 92       	push	r5
    225c:	6f 92       	push	r6
    225e:	7f 92       	push	r7
    2260:	8f 92       	push	r8
    2262:	9f 92       	push	r9
    2264:	af 92       	push	r10
    2266:	bf 92       	push	r11
    2268:	cf 92       	push	r12
    226a:	df 92       	push	r13
    226c:	ef 92       	push	r14
    226e:	ff 92       	push	r15
    2270:	0f 93       	push	r16
    2272:	1f 93       	push	r17
    2274:	cf 93       	push	r28
    2276:	df 93       	push	r29
    2278:	00 d0       	rcall	.+0      	; 0x227a <_ZN3PID10SetTuningsEdddi+0x22>
    227a:	00 d0       	rcall	.+0      	; 0x227c <_ZN3PID10SetTuningsEdddi+0x24>
    227c:	00 d0       	rcall	.+0      	; 0x227e <_ZN3PID10SetTuningsEdddi+0x26>
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
    2282:	9e 83       	std	Y+6, r25	; 0x06
    2284:	8d 83       	std	Y+5, r24	; 0x05
    2286:	49 83       	std	Y+1, r20	; 0x01
    2288:	5a 83       	std	Y+2, r21	; 0x02
    228a:	6b 83       	std	Y+3, r22	; 0x03
    228c:	7c 83       	std	Y+4, r23	; 0x04
    228e:	28 01       	movw	r4, r16
    2290:	39 01       	movw	r6, r18
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	a9 01       	movw	r20, r18
    2298:	69 81       	ldd	r22, Y+1	; 0x01
    229a:	7a 81       	ldd	r23, Y+2	; 0x02
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	9c 81       	ldd	r25, Y+4	; 0x04
    22a0:	0e 94 5f 1a 	call	0x34be	; 0x34be <__cmpsf2>
    22a4:	87 fd       	sbrc	r24, 7
    22a6:	97 c0       	rjmp	.+302    	; 0x23d6 <_ZN3PID10SetTuningsEdddi+0x17e>
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	a9 01       	movw	r20, r18
    22ae:	c3 01       	movw	r24, r6
    22b0:	b2 01       	movw	r22, r4
    22b2:	0e 94 5f 1a 	call	0x34be	; 0x34be <__cmpsf2>
    22b6:	87 fd       	sbrc	r24, 7
    22b8:	8e c0       	rjmp	.+284    	; 0x23d6 <_ZN3PID10SetTuningsEdddi+0x17e>
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	a9 01       	movw	r20, r18
    22c0:	c7 01       	movw	r24, r14
    22c2:	b6 01       	movw	r22, r12
    22c4:	0e 94 5f 1a 	call	0x34be	; 0x34be <__cmpsf2>
    22c8:	87 fd       	sbrc	r24, 7
    22ca:	85 c0       	rjmp	.+266    	; 0x23d6 <_ZN3PID10SetTuningsEdddi+0x17e>
    22cc:	ad 81       	ldd	r26, Y+5	; 0x05
    22ce:	be 81       	ldd	r27, Y+6	; 0x06
    22d0:	5b 96       	adiw	r26, 0x1b	; 27
    22d2:	bc 92       	st	X, r11
    22d4:	ae 92       	st	-X, r10
    22d6:	5a 97       	sbiw	r26, 0x1a	; 26
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	aa 94       	dec	r10
    22dc:	ab 28       	or	r10, r11
    22de:	09 f0       	breq	.+2      	; 0x22e2 <_ZN3PID10SetTuningsEdddi+0x8a>
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	ed 81       	ldd	r30, Y+5	; 0x05
    22e4:	fe 81       	ldd	r31, Y+6	; 0x06
    22e6:	83 af       	std	Z+59, r24	; 0x3b
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
    22ea:	9a 81       	ldd	r25, Y+2	; 0x02
    22ec:	ab 81       	ldd	r26, Y+3	; 0x03
    22ee:	bc 81       	ldd	r27, Y+4	; 0x04
    22f0:	80 83       	st	Z, r24
    22f2:	91 83       	std	Z+1, r25	; 0x01
    22f4:	a2 83       	std	Z+2, r26	; 0x02
    22f6:	b3 83       	std	Z+3, r27	; 0x03
    22f8:	44 82       	std	Z+4, r4	; 0x04
    22fa:	55 82       	std	Z+5, r5	; 0x05
    22fc:	66 82       	std	Z+6, r6	; 0x06
    22fe:	77 82       	std	Z+7, r7	; 0x07
    2300:	c0 86       	std	Z+8, r12	; 0x08
    2302:	d1 86       	std	Z+9, r13	; 0x09
    2304:	e2 86       	std	Z+10, r14	; 0x0a
    2306:	f3 86       	std	Z+11, r15	; 0x0b
    2308:	66 a5       	ldd	r22, Z+46	; 0x2e
    230a:	77 a5       	ldd	r23, Z+47	; 0x2f
    230c:	80 a9       	ldd	r24, Z+48	; 0x30
    230e:	91 a9       	ldd	r25, Z+49	; 0x31
    2310:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__floatunsisf>
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	4a e7       	ldi	r20, 0x7A	; 122
    231a:	54 e4       	ldi	r21, 0x44	; 68
    231c:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <__divsf3>
    2320:	4b 01       	movw	r8, r22
    2322:	5c 01       	movw	r10, r24
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	9a 81       	ldd	r25, Y+2	; 0x02
    2328:	ab 81       	ldd	r26, Y+3	; 0x03
    232a:	bc 81       	ldd	r27, Y+4	; 0x04
    232c:	ed 81       	ldd	r30, Y+5	; 0x05
    232e:	fe 81       	ldd	r31, Y+6	; 0x06
    2330:	84 87       	std	Z+12, r24	; 0x0c
    2332:	95 87       	std	Z+13, r25	; 0x0d
    2334:	a6 87       	std	Z+14, r26	; 0x0e
    2336:	b7 87       	std	Z+15, r27	; 0x0f
    2338:	a5 01       	movw	r20, r10
    233a:	94 01       	movw	r18, r8
    233c:	c3 01       	movw	r24, r6
    233e:	b2 01       	movw	r22, r4
    2340:	0e 94 c3 1b 	call	0x3786	; 0x3786 <__mulsf3>
    2344:	2b 01       	movw	r4, r22
    2346:	3c 01       	movw	r6, r24
    2348:	ad 81       	ldd	r26, Y+5	; 0x05
    234a:	be 81       	ldd	r27, Y+6	; 0x06
    234c:	50 96       	adiw	r26, 0x10	; 16
    234e:	6d 93       	st	X+, r22
    2350:	7d 93       	st	X+, r23
    2352:	8d 93       	st	X+, r24
    2354:	9c 93       	st	X, r25
    2356:	53 97       	sbiw	r26, 0x13	; 19
    2358:	a5 01       	movw	r20, r10
    235a:	94 01       	movw	r18, r8
    235c:	c7 01       	movw	r24, r14
    235e:	b6 01       	movw	r22, r12
    2360:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <__divsf3>
    2364:	6b 01       	movw	r12, r22
    2366:	7c 01       	movw	r14, r24
    2368:	ed 81       	ldd	r30, Y+5	; 0x05
    236a:	fe 81       	ldd	r31, Y+6	; 0x06
    236c:	64 8b       	std	Z+20, r22	; 0x14
    236e:	75 8b       	std	Z+21, r23	; 0x15
    2370:	86 8b       	std	Z+22, r24	; 0x16
    2372:	97 8b       	std	Z+23, r25	; 0x17
    2374:	80 8d       	ldd	r24, Z+24	; 0x18
    2376:	91 8d       	ldd	r25, Z+25	; 0x19
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	69 f5       	brne	.+90     	; 0x23d6 <_ZN3PID10SetTuningsEdddi+0x17e>
    237c:	29 81       	ldd	r18, Y+1	; 0x01
    237e:	3a 81       	ldd	r19, Y+2	; 0x02
    2380:	4b 81       	ldd	r20, Y+3	; 0x03
    2382:	5c 81       	ldd	r21, Y+4	; 0x04
    2384:	60 e0       	ldi	r22, 0x00	; 0
    2386:	70 e0       	ldi	r23, 0x00	; 0
    2388:	cb 01       	movw	r24, r22
    238a:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__subsf3>
    238e:	ad 81       	ldd	r26, Y+5	; 0x05
    2390:	be 81       	ldd	r27, Y+6	; 0x06
    2392:	1c 96       	adiw	r26, 0x0c	; 12
    2394:	6d 93       	st	X+, r22
    2396:	7d 93       	st	X+, r23
    2398:	8d 93       	st	X+, r24
    239a:	9c 93       	st	X, r25
    239c:	1f 97       	sbiw	r26, 0x0f	; 15
    239e:	a3 01       	movw	r20, r6
    23a0:	92 01       	movw	r18, r4
    23a2:	60 e0       	ldi	r22, 0x00	; 0
    23a4:	70 e0       	ldi	r23, 0x00	; 0
    23a6:	cb 01       	movw	r24, r22
    23a8:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__subsf3>
    23ac:	ed 81       	ldd	r30, Y+5	; 0x05
    23ae:	fe 81       	ldd	r31, Y+6	; 0x06
    23b0:	60 8b       	std	Z+16, r22	; 0x10
    23b2:	71 8b       	std	Z+17, r23	; 0x11
    23b4:	82 8b       	std	Z+18, r24	; 0x12
    23b6:	93 8b       	std	Z+19, r25	; 0x13
    23b8:	a7 01       	movw	r20, r14
    23ba:	96 01       	movw	r18, r12
    23bc:	60 e0       	ldi	r22, 0x00	; 0
    23be:	70 e0       	ldi	r23, 0x00	; 0
    23c0:	cb 01       	movw	r24, r22
    23c2:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__subsf3>
    23c6:	ad 81       	ldd	r26, Y+5	; 0x05
    23c8:	be 81       	ldd	r27, Y+6	; 0x06
    23ca:	54 96       	adiw	r26, 0x14	; 20
    23cc:	6d 93       	st	X+, r22
    23ce:	7d 93       	st	X+, r23
    23d0:	8d 93       	st	X+, r24
    23d2:	9c 93       	st	X, r25
    23d4:	57 97       	sbiw	r26, 0x17	; 23
    23d6:	26 96       	adiw	r28, 0x06	; 6
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	f8 94       	cli
    23dc:	de bf       	out	0x3e, r29	; 62
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	cd bf       	out	0x3d, r28	; 61
    23e2:	df 91       	pop	r29
    23e4:	cf 91       	pop	r28
    23e6:	1f 91       	pop	r17
    23e8:	0f 91       	pop	r16
    23ea:	ff 90       	pop	r15
    23ec:	ef 90       	pop	r14
    23ee:	df 90       	pop	r13
    23f0:	cf 90       	pop	r12
    23f2:	bf 90       	pop	r11
    23f4:	af 90       	pop	r10
    23f6:	9f 90       	pop	r9
    23f8:	8f 90       	pop	r8
    23fa:	7f 90       	pop	r7
    23fc:	6f 90       	pop	r6
    23fe:	5f 90       	pop	r5
    2400:	4f 90       	pop	r4
    2402:	08 95       	ret

00002404 <_ZN3PID13SetSampleTimeEi>:
    2404:	8f 92       	push	r8
    2406:	9f 92       	push	r9
    2408:	af 92       	push	r10
    240a:	bf 92       	push	r11
    240c:	cf 92       	push	r12
    240e:	df 92       	push	r13
    2410:	ef 92       	push	r14
    2412:	ff 92       	push	r15
    2414:	cf 93       	push	r28
    2416:	df 93       	push	r29
    2418:	16 16       	cp	r1, r22
    241a:	17 06       	cpc	r1, r23
    241c:	b4 f5       	brge	.+108    	; 0x248a <_ZN3PID13SetSampleTimeEi+0x86>
    241e:	6b 01       	movw	r12, r22
    2420:	ec 01       	movw	r28, r24
    2422:	0d 2c       	mov	r0, r13
    2424:	00 0c       	add	r0, r0
    2426:	ee 08       	sbc	r14, r14
    2428:	ff 08       	sbc	r15, r15
    242a:	c7 01       	movw	r24, r14
    242c:	b6 01       	movw	r22, r12
    242e:	0e 94 0e 1b 	call	0x361c	; 0x361c <__floatsisf>
    2432:	4b 01       	movw	r8, r22
    2434:	5c 01       	movw	r10, r24
    2436:	6e a5       	ldd	r22, Y+46	; 0x2e
    2438:	7f a5       	ldd	r23, Y+47	; 0x2f
    243a:	88 a9       	ldd	r24, Y+48	; 0x30
    243c:	99 a9       	ldd	r25, Y+49	; 0x31
    243e:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__floatunsisf>
    2442:	9b 01       	movw	r18, r22
    2444:	ac 01       	movw	r20, r24
    2446:	c5 01       	movw	r24, r10
    2448:	b4 01       	movw	r22, r8
    244a:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <__divsf3>
    244e:	4b 01       	movw	r8, r22
    2450:	5c 01       	movw	r10, r24
    2452:	9b 01       	movw	r18, r22
    2454:	ac 01       	movw	r20, r24
    2456:	68 89       	ldd	r22, Y+16	; 0x10
    2458:	79 89       	ldd	r23, Y+17	; 0x11
    245a:	8a 89       	ldd	r24, Y+18	; 0x12
    245c:	9b 89       	ldd	r25, Y+19	; 0x13
    245e:	0e 94 c3 1b 	call	0x3786	; 0x3786 <__mulsf3>
    2462:	68 8b       	std	Y+16, r22	; 0x10
    2464:	79 8b       	std	Y+17, r23	; 0x11
    2466:	8a 8b       	std	Y+18, r24	; 0x12
    2468:	9b 8b       	std	Y+19, r25	; 0x13
    246a:	a5 01       	movw	r20, r10
    246c:	94 01       	movw	r18, r8
    246e:	6c 89       	ldd	r22, Y+20	; 0x14
    2470:	7d 89       	ldd	r23, Y+21	; 0x15
    2472:	8e 89       	ldd	r24, Y+22	; 0x16
    2474:	9f 89       	ldd	r25, Y+23	; 0x17
    2476:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <__divsf3>
    247a:	6c 8b       	std	Y+20, r22	; 0x14
    247c:	7d 8b       	std	Y+21, r23	; 0x15
    247e:	8e 8b       	std	Y+22, r24	; 0x16
    2480:	9f 8b       	std	Y+23, r25	; 0x17
    2482:	ce a6       	std	Y+46, r12	; 0x2e
    2484:	df a6       	std	Y+47, r13	; 0x2f
    2486:	e8 aa       	std	Y+48, r14	; 0x30
    2488:	f9 aa       	std	Y+49, r15	; 0x31
    248a:	df 91       	pop	r29
    248c:	cf 91       	pop	r28
    248e:	ff 90       	pop	r15
    2490:	ef 90       	pop	r14
    2492:	df 90       	pop	r13
    2494:	cf 90       	pop	r12
    2496:	bf 90       	pop	r11
    2498:	af 90       	pop	r10
    249a:	9f 90       	pop	r9
    249c:	8f 90       	pop	r8
    249e:	08 95       	ret

000024a0 <_ZN3PID10InitializeEv>:
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
    24a0:	8f 92       	push	r8
    24a2:	9f 92       	push	r9
    24a4:	af 92       	push	r10
    24a6:	bf 92       	push	r11
    24a8:	cf 92       	push	r12
    24aa:	df 92       	push	r13
    24ac:	ef 92       	push	r14
    24ae:	ff 92       	push	r15
    24b0:	cf 93       	push	r28
    24b2:	df 93       	push	r29
    24b4:	ec 01       	movw	r28, r24
   outputSum = *myOutput;
    24b6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    24b8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    24ba:	c0 80       	ld	r12, Z
    24bc:	d1 80       	ldd	r13, Z+1	; 0x01
    24be:	e2 80       	ldd	r14, Z+2	; 0x02
    24c0:	f3 80       	ldd	r15, Z+3	; 0x03
    24c2:	ce a2       	std	Y+38, r12	; 0x26
    24c4:	df a2       	std	Y+39, r13	; 0x27
    24c6:	e8 a6       	std	Y+40, r14	; 0x28
    24c8:	f9 a6       	std	Y+41, r15	; 0x29
   lastInput = *myInput;
    24ca:	ec 8d       	ldd	r30, Y+28	; 0x1c
    24cc:	fd 8d       	ldd	r31, Y+29	; 0x1d
    24ce:	80 81       	ld	r24, Z
    24d0:	91 81       	ldd	r25, Z+1	; 0x01
    24d2:	a2 81       	ldd	r26, Z+2	; 0x02
    24d4:	b3 81       	ldd	r27, Z+3	; 0x03
    24d6:	8a a7       	std	Y+42, r24	; 0x2a
    24d8:	9b a7       	std	Y+43, r25	; 0x2b
    24da:	ac a7       	std	Y+44, r26	; 0x2c
    24dc:	bd a7       	std	Y+45, r27	; 0x2d
   if(outputSum > outMax) outputSum = outMax;
    24de:	8e a8       	ldd	r8, Y+54	; 0x36
    24e0:	9f a8       	ldd	r9, Y+55	; 0x37
    24e2:	a8 ac       	ldd	r10, Y+56	; 0x38
    24e4:	b9 ac       	ldd	r11, Y+57	; 0x39
    24e6:	a5 01       	movw	r20, r10
    24e8:	94 01       	movw	r18, r8
    24ea:	c7 01       	movw	r24, r14
    24ec:	b6 01       	movw	r22, r12
    24ee:	0e 94 be 1b 	call	0x377c	; 0x377c <__gesf2>
    24f2:	18 16       	cp	r1, r24
    24f4:	64 f0       	brlt	.+24     	; 0x250e <_ZN3PID10InitializeEv+0x6e>
   else if(outputSum < outMin) outputSum = outMin;
    24f6:	8a a8       	ldd	r8, Y+50	; 0x32
    24f8:	9b a8       	ldd	r9, Y+51	; 0x33
    24fa:	ac a8       	ldd	r10, Y+52	; 0x34
    24fc:	bd a8       	ldd	r11, Y+53	; 0x35
    24fe:	a5 01       	movw	r20, r10
    2500:	94 01       	movw	r18, r8
    2502:	c7 01       	movw	r24, r14
    2504:	b6 01       	movw	r22, r12
    2506:	0e 94 5f 1a 	call	0x34be	; 0x34be <__cmpsf2>
    250a:	87 ff       	sbrs	r24, 7
    250c:	04 c0       	rjmp	.+8      	; 0x2516 <_ZN3PID10InitializeEv+0x76>
    250e:	8e a2       	std	Y+38, r8	; 0x26
    2510:	9f a2       	std	Y+39, r9	; 0x27
    2512:	a8 a6       	std	Y+40, r10	; 0x28
    2514:	b9 a6       	std	Y+41, r11	; 0x29
}
    2516:	df 91       	pop	r29
    2518:	cf 91       	pop	r28
    251a:	ff 90       	pop	r15
    251c:	ef 90       	pop	r14
    251e:	df 90       	pop	r13
    2520:	cf 90       	pop	r12
    2522:	bf 90       	pop	r11
    2524:	af 90       	pop	r10
    2526:	9f 90       	pop	r9
    2528:	8f 90       	pop	r8
    252a:	08 95       	ret

0000252c <_ZN3PID7SetModeEi>:
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
    252c:	1f 93       	push	r17
    252e:	cf 93       	push	r28
    2530:	df 93       	push	r29
    2532:	ec 01       	movw	r28, r24
    bool newAuto = (Mode == AUTOMATIC);
    2534:	11 e0       	ldi	r17, 0x01	; 1
    2536:	61 30       	cpi	r22, 0x01	; 1
    2538:	71 05       	cpc	r23, r1
    253a:	09 f0       	breq	.+2      	; 0x253e <_ZN3PID7SetModeEi+0x12>
    253c:	10 e0       	ldi	r17, 0x00	; 0
    if(newAuto && !inAuto)
    253e:	61 30       	cpi	r22, 0x01	; 1
    2540:	71 05       	cpc	r23, r1
    2542:	31 f4       	brne	.+12     	; 0x2550 <_ZN3PID7SetModeEi+0x24>
    2544:	8a ad       	ldd	r24, Y+58	; 0x3a
    2546:	81 11       	cpse	r24, r1
    2548:	03 c0       	rjmp	.+6      	; 0x2550 <_ZN3PID7SetModeEi+0x24>
    {  /*we just went from manual to auto*/
        PID::Initialize();
    254a:	ce 01       	movw	r24, r28
    254c:	0e 94 50 12 	call	0x24a0	; 0x24a0 <_ZN3PID10InitializeEv>
    }
    inAuto = newAuto;
    2550:	1a af       	std	Y+58, r17	; 0x3a
}
    2552:	df 91       	pop	r29
    2554:	cf 91       	pop	r28
    2556:	1f 91       	pop	r17
    2558:	08 95       	ret

0000255a <_ZN3PID22SetControllerDirectionEi>:
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
    255a:	0f 93       	push	r16
    255c:	1f 93       	push	r17
    255e:	cf 93       	push	r28
    2560:	df 93       	push	r29
    2562:	ec 01       	movw	r28, r24
    2564:	8b 01       	movw	r16, r22
   if(inAuto && Direction !=controllerDirection)
    2566:	8a ad       	ldd	r24, Y+58	; 0x3a
    2568:	88 23       	and	r24, r24
    256a:	61 f1       	breq	.+88     	; 0x25c4 <_ZN3PID22SetControllerDirectionEi+0x6a>
    256c:	88 8d       	ldd	r24, Y+24	; 0x18
    256e:	99 8d       	ldd	r25, Y+25	; 0x19
    2570:	86 17       	cp	r24, r22
    2572:	97 07       	cpc	r25, r23
    2574:	39 f1       	breq	.+78     	; 0x25c4 <_ZN3PID22SetControllerDirectionEi+0x6a>
   {
	    kp = (0 - kp);
    2576:	2c 85       	ldd	r18, Y+12	; 0x0c
    2578:	3d 85       	ldd	r19, Y+13	; 0x0d
    257a:	4e 85       	ldd	r20, Y+14	; 0x0e
    257c:	5f 85       	ldd	r21, Y+15	; 0x0f
    257e:	60 e0       	ldi	r22, 0x00	; 0
    2580:	70 e0       	ldi	r23, 0x00	; 0
    2582:	cb 01       	movw	r24, r22
    2584:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__subsf3>
    2588:	6c 87       	std	Y+12, r22	; 0x0c
    258a:	7d 87       	std	Y+13, r23	; 0x0d
    258c:	8e 87       	std	Y+14, r24	; 0x0e
    258e:	9f 87       	std	Y+15, r25	; 0x0f
      ki = (0 - ki);
    2590:	28 89       	ldd	r18, Y+16	; 0x10
    2592:	39 89       	ldd	r19, Y+17	; 0x11
    2594:	4a 89       	ldd	r20, Y+18	; 0x12
    2596:	5b 89       	ldd	r21, Y+19	; 0x13
    2598:	60 e0       	ldi	r22, 0x00	; 0
    259a:	70 e0       	ldi	r23, 0x00	; 0
    259c:	cb 01       	movw	r24, r22
    259e:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__subsf3>
    25a2:	68 8b       	std	Y+16, r22	; 0x10
    25a4:	79 8b       	std	Y+17, r23	; 0x11
    25a6:	8a 8b       	std	Y+18, r24	; 0x12
    25a8:	9b 8b       	std	Y+19, r25	; 0x13
      kd = (0 - kd);
    25aa:	2c 89       	ldd	r18, Y+20	; 0x14
    25ac:	3d 89       	ldd	r19, Y+21	; 0x15
    25ae:	4e 89       	ldd	r20, Y+22	; 0x16
    25b0:	5f 89       	ldd	r21, Y+23	; 0x17
    25b2:	60 e0       	ldi	r22, 0x00	; 0
    25b4:	70 e0       	ldi	r23, 0x00	; 0
    25b6:	cb 01       	movw	r24, r22
    25b8:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__subsf3>
    25bc:	6c 8b       	std	Y+20, r22	; 0x14
    25be:	7d 8b       	std	Y+21, r23	; 0x15
    25c0:	8e 8b       	std	Y+22, r24	; 0x16
    25c2:	9f 8b       	std	Y+23, r25	; 0x17
   }
   controllerDirection = Direction;
    25c4:	19 8f       	std	Y+25, r17	; 0x19
    25c6:	08 8f       	std	Y+24, r16	; 0x18
}
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
    25cc:	1f 91       	pop	r17
    25ce:	0f 91       	pop	r16
    25d0:	08 95       	ret

000025d2 <_ZN3PIDC1EPdS0_S0_dddii>:

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
    25d2:	4f 92       	push	r4
    25d4:	5f 92       	push	r5
    25d6:	6f 92       	push	r6
    25d8:	7f 92       	push	r7
    25da:	8f 92       	push	r8
    25dc:	9f 92       	push	r9
    25de:	af 92       	push	r10
    25e0:	bf 92       	push	r11
    25e2:	cf 92       	push	r12
    25e4:	df 92       	push	r13
    25e6:	ef 92       	push	r14
    25e8:	ff 92       	push	r15
    25ea:	0f 93       	push	r16
    25ec:	1f 93       	push	r17
    25ee:	cf 93       	push	r28
    25f0:	df 93       	push	r29
    25f2:	00 d0       	rcall	.+0      	; 0x25f4 <_ZN3PIDC1EPdS0_S0_dddii+0x22>
    25f4:	00 d0       	rcall	.+0      	; 0x25f6 <_ZN3PIDC1EPdS0_S0_dddii+0x24>
    25f6:	cd b7       	in	r28, 0x3d	; 61
    25f8:	de b7       	in	r29, 0x3e	; 62
    25fa:	4c 01       	movw	r8, r24
    25fc:	27 01       	movw	r4, r14
    25fe:	38 01       	movw	r6, r16
    2600:	a9 82       	std	Y+1, r10	; 0x01
    2602:	ba 82       	std	Y+2, r11	; 0x02
    2604:	cb 82       	std	Y+3, r12	; 0x03
    2606:	dc 82       	std	Y+4, r13	; 0x04
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
    2608:	fc 01       	movw	r30, r24
    260a:	57 8f       	std	Z+31, r21	; 0x1f
    260c:	46 8f       	std	Z+30, r20	; 0x1e
    myInput = Input;
    260e:	75 8f       	std	Z+29, r23	; 0x1d
    2610:	64 8f       	std	Z+28, r22	; 0x1c
    mySetpoint = Setpoint;
    2612:	31 a3       	std	Z+33, r19	; 0x21
    2614:	20 a3       	std	Z+32, r18	; 0x20
    inAuto = false;
    2616:	12 ae       	std	Z+58, r1	; 0x3a
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
    2618:	12 aa       	std	Z+50, r1	; 0x32
    261a:	13 aa       	std	Z+51, r1	; 0x33
    261c:	14 aa       	std	Z+52, r1	; 0x34
    261e:	15 aa       	std	Z+53, r1	; 0x35
   outMax = Max;
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	af e7       	ldi	r26, 0x7F	; 127
    2626:	b3 e4       	ldi	r27, 0x43	; 67
    2628:	86 ab       	std	Z+54, r24	; 0x36
    262a:	97 ab       	std	Z+55, r25	; 0x37
    262c:	a0 af       	std	Z+56, r26	; 0x38
    262e:	b1 af       	std	Z+57, r27	; 0x39
    inAuto = false;

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
    2630:	84 e6       	ldi	r24, 0x64	; 100
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	a0 e0       	ldi	r26, 0x00	; 0
    2636:	b0 e0       	ldi	r27, 0x00	; 0
    2638:	86 a7       	std	Z+46, r24	; 0x2e
    263a:	97 a7       	std	Z+47, r25	; 0x2f
    263c:	a0 ab       	std	Z+48, r26	; 0x30
    263e:	b1 ab       	std	Z+49, r27	; 0x31

    PID::SetControllerDirection(ControllerDirection);
    2640:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2642:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2644:	c4 01       	movw	r24, r8
    2646:	0e 94 ad 12 	call	0x255a	; 0x255a <_ZN3PID22SetControllerDirectionEi>
    PID::SetTunings(Kp, Ki, Kd, POn);
    264a:	ab 8c       	ldd	r10, Y+27	; 0x1b
    264c:	bc 8c       	ldd	r11, Y+28	; 0x1c
    264e:	cf 88       	ldd	r12, Y+23	; 0x17
    2650:	d8 8c       	ldd	r13, Y+24	; 0x18
    2652:	e9 8c       	ldd	r14, Y+25	; 0x19
    2654:	fa 8c       	ldd	r15, Y+26	; 0x1a
    2656:	09 81       	ldd	r16, Y+1	; 0x01
    2658:	1a 81       	ldd	r17, Y+2	; 0x02
    265a:	2b 81       	ldd	r18, Y+3	; 0x03
    265c:	3c 81       	ldd	r19, Y+4	; 0x04
    265e:	b3 01       	movw	r22, r6
    2660:	a2 01       	movw	r20, r4
    2662:	c4 01       	movw	r24, r8
    2664:	0e 94 2c 11 	call	0x2258	; 0x2258 <_ZN3PID10SetTuningsEdddi>

    lastTime = millis()-SampleTime;
    2668:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <millis>
    266c:	f4 01       	movw	r30, r8
    266e:	46 a4       	ldd	r4, Z+46	; 0x2e
    2670:	57 a4       	ldd	r5, Z+47	; 0x2f
    2672:	60 a8       	ldd	r6, Z+48	; 0x30
    2674:	71 a8       	ldd	r7, Z+49	; 0x31
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	84 19       	sub	r24, r4
    267c:	95 09       	sbc	r25, r5
    267e:	a6 09       	sbc	r26, r6
    2680:	b7 09       	sbc	r27, r7
    2682:	82 a3       	std	Z+34, r24	; 0x22
    2684:	93 a3       	std	Z+35, r25	; 0x23
    2686:	a4 a3       	std	Z+36, r26	; 0x24
    2688:	b5 a3       	std	Z+37, r27	; 0x25
}
    268a:	0f 90       	pop	r0
    268c:	0f 90       	pop	r0
    268e:	0f 90       	pop	r0
    2690:	0f 90       	pop	r0
    2692:	df 91       	pop	r29
    2694:	cf 91       	pop	r28
    2696:	1f 91       	pop	r17
    2698:	0f 91       	pop	r16
    269a:	ff 90       	pop	r15
    269c:	ef 90       	pop	r14
    269e:	df 90       	pop	r13
    26a0:	cf 90       	pop	r12
    26a2:	bf 90       	pop	r11
    26a4:	af 90       	pop	r10
    26a6:	9f 90       	pop	r9
    26a8:	8f 90       	pop	r8
    26aa:	7f 90       	pop	r7
    26ac:	6f 90       	pop	r6
    26ae:	5f 90       	pop	r5
    26b0:	4f 90       	pop	r4
    26b2:	08 95       	ret

000026b4 <_ZN3PIDC1EPdS0_S0_dddi>:
/*Constructor (...)*********************************************************
 *    To allow backwards compatability for v1.1, or for people that just want
 *    to use Proportional on Error without explicitly saying so
 ***************************************************************************/

PID::PID(double* Input, double* Output, double* Setpoint,
    26b4:	8f 92       	push	r8
    26b6:	9f 92       	push	r9
    26b8:	af 92       	push	r10
    26ba:	bf 92       	push	r11
    26bc:	cf 92       	push	r12
    26be:	df 92       	push	r13
    26c0:	ef 92       	push	r14
    26c2:	ff 92       	push	r15
    26c4:	0f 93       	push	r16
    26c6:	1f 93       	push	r17
    26c8:	cf 93       	push	r28
    26ca:	df 93       	push	r29
    26cc:	cd b7       	in	r28, 0x3d	; 61
    26ce:	de b7       	in	r29, 0x3e	; 62
    26d0:	ef 85       	ldd	r30, Y+15	; 0x0f
    26d2:	f8 89       	ldd	r31, Y+16	; 0x10
    26d4:	a9 89       	ldd	r26, Y+17	; 0x11
    26d6:	ba 89       	ldd	r27, Y+18	; 0x12
    26d8:	9b 88       	ldd	r9, Y+19	; 0x13
    26da:	8c 88       	ldd	r8, Y+20	; 0x14
        double Kp, double Ki, double Kd, int ControllerDirection)
    :PID::PID(Input, Output, Setpoint, Kp, Ki, Kd, P_ON_E, ControllerDirection)
    26dc:	8f 92       	push	r8
    26de:	9f 92       	push	r9
    26e0:	1f 92       	push	r1
    26e2:	99 24       	eor	r9, r9
    26e4:	93 94       	inc	r9
    26e6:	9f 92       	push	r9
    26e8:	bf 93       	push	r27
    26ea:	af 93       	push	r26
    26ec:	ff 93       	push	r31
    26ee:	ef 93       	push	r30
    26f0:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <_ZN3PIDC1EPdS0_S0_dddii>
{

}
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	f8 94       	cli
    26f8:	de bf       	out	0x3e, r29	; 62
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	cd bf       	out	0x3d, r28	; 61
    26fe:	df 91       	pop	r29
    2700:	cf 91       	pop	r28
    2702:	1f 91       	pop	r17
    2704:	0f 91       	pop	r16
    2706:	ff 90       	pop	r15
    2708:	ef 90       	pop	r14
    270a:	df 90       	pop	r13
    270c:	cf 90       	pop	r12
    270e:	bf 90       	pop	r11
    2710:	af 90       	pop	r10
    2712:	9f 90       	pop	r9
    2714:	8f 90       	pop	r8
    2716:	08 95       	ret

00002718 <_ZN3dht11_readSensorEhhh>:
    if (bits[4] != sum)
    {
        return DHTLIB_ERROR_CHECKSUM;
    }
    return result;
}
    2718:	2f 92       	push	r2
    271a:	3f 92       	push	r3
    271c:	4f 92       	push	r4
    271e:	5f 92       	push	r5
    2720:	6f 92       	push	r6
    2722:	7f 92       	push	r7
    2724:	8f 92       	push	r8
    2726:	9f 92       	push	r9
    2728:	af 92       	push	r10
    272a:	bf 92       	push	r11
    272c:	cf 92       	push	r12
    272e:	df 92       	push	r13
    2730:	ef 92       	push	r14
    2732:	ff 92       	push	r15
    2734:	0f 93       	push	r16
    2736:	1f 93       	push	r17
    2738:	cf 93       	push	r28
    273a:	df 93       	push	r29
    273c:	ec 01       	movw	r28, r24
    273e:	f6 2e       	mov	r15, r22
    2740:	04 2f       	mov	r16, r20
    2742:	e2 2e       	mov	r14, r18
    2744:	86 2f       	mov	r24, r22
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	fc 01       	movw	r30, r24
    274a:	e8 57       	subi	r30, 0x78	; 120
    274c:	fe 4f       	sbci	r31, 0xFE	; 254
    274e:	14 91       	lpm	r17, Z
    2750:	fc 01       	movw	r30, r24
    2752:	e9 55       	subi	r30, 0x59	; 89
    2754:	fe 4f       	sbci	r31, 0xFE	; 254
    2756:	e4 91       	lpm	r30, Z
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	ee 0f       	add	r30, r30
    275c:	ff 1f       	adc	r31, r31
    275e:	ea 53       	subi	r30, 0x3A	; 58
    2760:	fe 4f       	sbci	r31, 0xFE	; 254
    2762:	c5 90       	lpm	r12, Z+
    2764:	d4 90       	lpm	r13, Z
    2766:	61 e0       	ldi	r22, 0x01	; 1
    2768:	8f 2d       	mov	r24, r15
    276a:	0e 94 7d 28 	call	0x50fa	; 0x50fa <pinMode>
    276e:	60 e0       	ldi	r22, 0x00	; 0
    2770:	8f 2d       	mov	r24, r15
    2772:	0e 94 b9 28 	call	0x5172	; 0x5172 <digitalWrite>
    2776:	09 30       	cpi	r16, 0x09	; 9
    2778:	38 f0       	brcs	.+14     	; 0x2788 <_ZN3dht11_readSensorEhhh+0x70>
    277a:	60 2f       	mov	r22, r16
    277c:	70 e0       	ldi	r23, 0x00	; 0
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	0e 94 da 26 	call	0x4db4	; 0x4db4 <delay>
    2786:	0a c0       	rjmp	.+20     	; 0x279c <_ZN3dht11_readSensorEhhh+0x84>
    2788:	88 ee       	ldi	r24, 0xE8	; 232
    278a:	93 e0       	ldi	r25, 0x03	; 3
    278c:	9c 01       	movw	r18, r24
    278e:	02 9f       	mul	r16, r18
    2790:	c0 01       	movw	r24, r0
    2792:	03 9f       	mul	r16, r19
    2794:	90 0d       	add	r25, r0
    2796:	11 24       	eor	r1, r1
    2798:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <delayMicroseconds>
    279c:	60 e0       	ldi	r22, 0x00	; 0
    279e:	8f 2d       	mov	r24, r15
    27a0:	0e 94 7d 28 	call	0x50fa	; 0x50fa <pinMode>
    27a4:	80 e2       	ldi	r24, 0x20	; 32
    27a6:	93 e0       	ldi	r25, 0x03	; 3
    27a8:	d6 01       	movw	r26, r12
    27aa:	2c 91       	ld	r18, X
    27ac:	21 23       	and	r18, r17
    27ae:	21 f0       	breq	.+8      	; 0x27b8 <_ZN3dht11_readSensorEhhh+0xa0>
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	d1 f7       	brne	.-12     	; 0x27a8 <_ZN3dht11_readSensorEhhh+0x90>
    27b4:	8d ef       	ldi	r24, 0xFD	; 253
    27b6:	5f c0       	rjmp	.+190    	; 0x2876 <_ZN3dht11_readSensorEhhh+0x15e>
    27b8:	80 e9       	ldi	r24, 0x90	; 144
    27ba:	91 e0       	ldi	r25, 0x01	; 1
    27bc:	f6 01       	movw	r30, r12
    27be:	20 81       	ld	r18, Z
    27c0:	21 23       	and	r18, r17
    27c2:	21 f4       	brne	.+8      	; 0x27cc <_ZN3dht11_readSensorEhhh+0xb4>
    27c4:	01 97       	sbiw	r24, 0x01	; 1
    27c6:	d1 f7       	brne	.-12     	; 0x27bc <_ZN3dht11_readSensorEhhh+0xa4>
    27c8:	8c ef       	ldi	r24, 0xFC	; 252
    27ca:	55 c0       	rjmp	.+170    	; 0x2876 <_ZN3dht11_readSensorEhhh+0x15e>
    27cc:	80 e9       	ldi	r24, 0x90	; 144
    27ce:	91 e0       	ldi	r25, 0x01	; 1
    27d0:	d6 01       	movw	r26, r12
    27d2:	2c 91       	ld	r18, X
    27d4:	21 23       	and	r18, r17
    27d6:	21 f0       	breq	.+8      	; 0x27e0 <_ZN3dht11_readSensorEhhh+0xc8>
    27d8:	01 97       	sbiw	r24, 0x01	; 1
    27da:	d1 f7       	brne	.-12     	; 0x27d0 <_ZN3dht11_readSensorEhhh+0xb8>
    27dc:	8b ef       	ldi	r24, 0xFB	; 251
    27de:	4b c0       	rjmp	.+150    	; 0x2876 <_ZN3dht11_readSensorEhhh+0x15e>
    27e0:	58 e2       	ldi	r21, 0x28	; 40
    27e2:	80 e9       	ldi	r24, 0x90	; 144
    27e4:	91 e0       	ldi	r25, 0x01	; 1
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	e0 e9       	ldi	r30, 0x90	; 144
    27ec:	f1 e0       	ldi	r31, 0x01	; 1
    27ee:	00 e0       	ldi	r16, 0x00	; 0
    27f0:	60 e0       	ldi	r22, 0x00	; 0
    27f2:	31 2c       	mov	r3, r1
    27f4:	40 e8       	ldi	r20, 0x80	; 128
    27f6:	25 2e       	mov	r2, r21
    27f8:	2e 18       	sub	r2, r14
    27fa:	70 e9       	ldi	r23, 0x90	; 144
    27fc:	87 2e       	mov	r8, r23
    27fe:	99 24       	eor	r9, r9
    2800:	93 94       	inc	r9
    2802:	a1 2c       	mov	r10, r1
    2804:	b1 2c       	mov	r11, r1
    2806:	d6 01       	movw	r26, r12
    2808:	7c 91       	ld	r23, X
    280a:	71 23       	and	r23, r17
    280c:	61 f5       	brne	.+88     	; 0x2866 <_ZN3dht11_readSensorEhhh+0x14e>
    280e:	00 23       	and	r16, r16
    2810:	51 f1       	breq	.+84     	; 0x2866 <_ZN3dht11_readSensorEhhh+0x14e>
    2812:	25 16       	cp	r2, r21
    2814:	98 f4       	brcc	.+38     	; 0x283c <_ZN3dht11_readSensorEhhh+0x124>
    2816:	8e 17       	cp	r24, r30
    2818:	9f 07       	cpc	r25, r31
    281a:	08 f4       	brcc	.+2      	; 0x281e <_ZN3dht11_readSensorEhhh+0x106>
    281c:	fc 01       	movw	r30, r24
    281e:	24 01       	movw	r4, r8
    2820:	35 01       	movw	r6, r10
    2822:	4e 1a       	sub	r4, r30
    2824:	5f 0a       	sbc	r5, r31
    2826:	61 08       	sbc	r6, r1
    2828:	71 08       	sbc	r7, r1
    282a:	82 e0       	ldi	r24, 0x02	; 2
    282c:	75 94       	asr	r7
    282e:	67 94       	ror	r6
    2830:	57 94       	ror	r5
    2832:	47 94       	ror	r4
    2834:	8a 95       	dec	r24
    2836:	d1 f7       	brne	.-12     	; 0x282c <_ZN3dht11_readSensorEhhh+0x114>
    2838:	92 01       	movw	r18, r4
    283a:	07 c0       	rjmp	.+14     	; 0x284a <_ZN3dht11_readSensorEhhh+0x132>
    283c:	7f 01       	movw	r14, r30
    283e:	e2 1a       	sub	r14, r18
    2840:	f3 0a       	sbc	r15, r19
    2842:	e8 16       	cp	r14, r24
    2844:	f9 06       	cpc	r15, r25
    2846:	08 f0       	brcs	.+2      	; 0x284a <_ZN3dht11_readSensorEhhh+0x132>
    2848:	64 2b       	or	r22, r20
    284a:	46 95       	lsr	r20
    284c:	49 f4       	brne	.+18     	; 0x2860 <_ZN3dht11_readSensorEhhh+0x148>
    284e:	ce 01       	movw	r24, r28
    2850:	83 0d       	add	r24, r3
    2852:	91 1d       	adc	r25, r1
    2854:	dc 01       	movw	r26, r24
    2856:	18 96       	adiw	r26, 0x08	; 8
    2858:	6c 93       	st	X, r22
    285a:	33 94       	inc	r3
    285c:	60 e0       	ldi	r22, 0x00	; 0
    285e:	40 e8       	ldi	r20, 0x80	; 128
    2860:	51 50       	subi	r21, 0x01	; 1
    2862:	80 e9       	ldi	r24, 0x90	; 144
    2864:	91 e0       	ldi	r25, 0x01	; 1
    2866:	01 97       	sbiw	r24, 0x01	; 1
    2868:	29 f0       	breq	.+10     	; 0x2874 <_ZN3dht11_readSensorEhhh+0x15c>
    286a:	07 2f       	mov	r16, r23
    286c:	51 11       	cpse	r21, r1
    286e:	cb cf       	rjmp	.-106    	; 0x2806 <_ZN3dht11_readSensorEhhh+0xee>
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	01 c0       	rjmp	.+2      	; 0x2876 <_ZN3dht11_readSensorEhhh+0x15e>
    2874:	8e ef       	ldi	r24, 0xFE	; 254
    2876:	df 91       	pop	r29
    2878:	cf 91       	pop	r28
    287a:	1f 91       	pop	r17
    287c:	0f 91       	pop	r16
    287e:	ff 90       	pop	r15
    2880:	ef 90       	pop	r14
    2882:	df 90       	pop	r13
    2884:	cf 90       	pop	r12
    2886:	bf 90       	pop	r11
    2888:	af 90       	pop	r10
    288a:	9f 90       	pop	r9
    288c:	8f 90       	pop	r8
    288e:	7f 90       	pop	r7
    2890:	6f 90       	pop	r6
    2892:	5f 90       	pop	r5
    2894:	4f 90       	pop	r4
    2896:	3f 90       	pop	r3
    2898:	2f 90       	pop	r2
    289a:	08 95       	ret

0000289c <_ZN3dht4readEh>:

int8_t dht::read(uint8_t pin)
{
    289c:	cf 92       	push	r12
    289e:	df 92       	push	r13
    28a0:	ef 92       	push	r14
    28a2:	ff 92       	push	r15
    28a4:	0f 93       	push	r16
    28a6:	1f 93       	push	r17
    28a8:	cf 93       	push	r28
    28aa:	df 93       	push	r29
    28ac:	ec 01       	movw	r28, r24
    // READ VALUES
    if (_disableIRQ) noInterrupts();
    28ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    28b0:	88 23       	and	r24, r24
    28b2:	09 f0       	breq	.+2      	; 0x28b6 <_ZN3dht4readEh+0x1a>
    28b4:	f8 94       	cli
    int8_t result = _readSensor(pin, DHTLIB_DHT_WAKEUP, DHTLIB_DHT_LEADING_ZEROS);
    28b6:	26 e0       	ldi	r18, 0x06	; 6
    28b8:	41 e0       	ldi	r20, 0x01	; 1
    28ba:	ce 01       	movw	r24, r28
    28bc:	0e 94 8c 13 	call	0x2718	; 0x2718 <_ZN3dht11_readSensorEhhh>
    28c0:	e8 2e       	mov	r14, r24
    if (_disableIRQ) interrupts();
    28c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c4:	88 23       	and	r24, r24
    28c6:	09 f0       	breq	.+2      	; 0x28ca <_ZN3dht4readEh+0x2e>
    28c8:	78 94       	sei

    // these bits are always zero, masking them reduces errors.
    bits[0] &= 0x03;
    28ca:	08 85       	ldd	r16, Y+8	; 0x08
    28cc:	03 70       	andi	r16, 0x03	; 3
    28ce:	08 87       	std	Y+8, r16	; 0x08
    bits[2] &= 0x83;
    28d0:	1a 85       	ldd	r17, Y+10	; 0x0a
    28d2:	81 2f       	mov	r24, r17
    28d4:	83 78       	andi	r24, 0x83	; 131
    28d6:	f8 2e       	mov	r15, r24
    28d8:	8a 87       	std	Y+10, r24	; 0x0a

    // CONVERT AND STORE
    humidity = (bits[0]*256 + bits[1]) * 0.1;
    28da:	c9 84       	ldd	r12, Y+9	; 0x09
    28dc:	60 2f       	mov	r22, r16
    28de:	70 e0       	ldi	r23, 0x00	; 0
    28e0:	76 2f       	mov	r23, r22
    28e2:	66 27       	eor	r22, r22
    28e4:	6c 0d       	add	r22, r12
    28e6:	71 1d       	adc	r23, r1
    28e8:	07 2e       	mov	r0, r23
    28ea:	00 0c       	add	r0, r0
    28ec:	88 0b       	sbc	r24, r24
    28ee:	99 0b       	sbc	r25, r25
    28f0:	0e 94 0e 1b 	call	0x361c	; 0x361c <__floatsisf>
    28f4:	2d ec       	ldi	r18, 0xCD	; 205
    28f6:	3c ec       	ldi	r19, 0xCC	; 204
    28f8:	4c ec       	ldi	r20, 0xCC	; 204
    28fa:	5d e3       	ldi	r21, 0x3D	; 61
    28fc:	0e 94 c3 1b 	call	0x3786	; 0x3786 <__mulsf3>
    2900:	68 83       	st	Y, r22
    2902:	79 83       	std	Y+1, r23	; 0x01
    2904:	8a 83       	std	Y+2, r24	; 0x02
    2906:	9b 83       	std	Y+3, r25	; 0x03
    temperature = ((bits[2] & 0x7F)*256 + bits[3]) * 0.1;
    2908:	db 84       	ldd	r13, Y+11	; 0x0b
    290a:	13 70       	andi	r17, 0x03	; 3
    290c:	61 2f       	mov	r22, r17
    290e:	70 e0       	ldi	r23, 0x00	; 0
    2910:	76 2f       	mov	r23, r22
    2912:	66 27       	eor	r22, r22
    2914:	6d 0d       	add	r22, r13
    2916:	71 1d       	adc	r23, r1
    2918:	07 2e       	mov	r0, r23
    291a:	00 0c       	add	r0, r0
    291c:	88 0b       	sbc	r24, r24
    291e:	99 0b       	sbc	r25, r25
    2920:	0e 94 0e 1b 	call	0x361c	; 0x361c <__floatsisf>
    2924:	2d ec       	ldi	r18, 0xCD	; 205
    2926:	3c ec       	ldi	r19, 0xCC	; 204
    2928:	4c ec       	ldi	r20, 0xCC	; 204
    292a:	5d e3       	ldi	r21, 0x3D	; 61
    292c:	0e 94 c3 1b 	call	0x3786	; 0x3786 <__mulsf3>
    if (bits[2] & 0x80)  // negative temperature
    2930:	f7 fc       	sbrc	r15, 7
    2932:	05 c0       	rjmp	.+10     	; 0x293e <_ZN3dht4readEh+0xa2>
    bits[0] &= 0x03;
    bits[2] &= 0x83;

    // CONVERT AND STORE
    humidity = (bits[0]*256 + bits[1]) * 0.1;
    temperature = ((bits[2] & 0x7F)*256 + bits[3]) * 0.1;
    2934:	6c 83       	std	Y+4, r22	; 0x04
    2936:	7d 83       	std	Y+5, r23	; 0x05
    2938:	8e 83       	std	Y+6, r24	; 0x06
    293a:	9f 83       	std	Y+7, r25	; 0x07
    293c:	07 c0       	rjmp	.+14     	; 0x294c <_ZN3dht4readEh+0xb0>
    if (bits[2] & 0x80)  // negative temperature
    {
        temperature = -temperature;
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	b0 58       	subi	r27, 0x80	; 128
    2944:	8c 83       	std	Y+4, r24	; 0x04
    2946:	9d 83       	std	Y+5, r25	; 0x05
    2948:	ae 83       	std	Y+6, r26	; 0x06
    294a:	bf 83       	std	Y+7, r27	; 0x07
    }

    // TEST CHECKSUM
    uint8_t sum = bits[0] + bits[1] + bits[2] + bits[3];
    if (bits[4] != sum)
    294c:	dc 0c       	add	r13, r12
    294e:	0d 0d       	add	r16, r13
    2950:	f0 0e       	add	r15, r16
    2952:	8c 85       	ldd	r24, Y+12	; 0x0c
    2954:	f8 12       	cpse	r15, r24
    2956:	02 c0       	rjmp	.+4      	; 0x295c <_ZN3dht4readEh+0xc0>
    {
        return DHTLIB_ERROR_CHECKSUM;
    }
    return result;
    2958:	8e 2d       	mov	r24, r14
    295a:	01 c0       	rjmp	.+2      	; 0x295e <_ZN3dht4readEh+0xc2>

    // TEST CHECKSUM
    uint8_t sum = bits[0] + bits[1] + bits[2] + bits[3];
    if (bits[4] != sum)
    {
        return DHTLIB_ERROR_CHECKSUM;
    295c:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return result;
}
    295e:	df 91       	pop	r29
    2960:	cf 91       	pop	r28
    2962:	1f 91       	pop	r17
    2964:	0f 91       	pop	r16
    2966:	ff 90       	pop	r15
    2968:	ef 90       	pop	r14
    296a:	df 90       	pop	r13
    296c:	cf 90       	pop	r12
    296e:	08 95       	ret

00002970 <_ZN7hd447806ioinitEv>:
	{
		buf[i] = pgm_read_byte(charmap++);
	}
	// call the RAM based function to actually send it to the LCD
	return(createChar(location, buf));
}
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	08 95       	ret

00002976 <_ZN7hd447806ioreadENS_6iotypeE>:
    2976:	8d ef       	ldi	r24, 0xFD	; 253
    2978:	9f ef       	ldi	r25, 0xFF	; 255
    297a:	08 95       	ret

0000297c <_ZN7hd4478014iosetBacklightEh>:
    297c:	8d ef       	ldi	r24, 0xFD	; 253
    297e:	9f ef       	ldi	r25, 0xFF	; 255
    2980:	08 95       	ret

00002982 <_ZN7hd44780C1Ev>:
    2982:	cf 93       	push	r28
    2984:	df 93       	push	r29
    2986:	ec 01       	movw	r28, r24
    2988:	1b 82       	std	Y+3, r1	; 0x03
    298a:	1a 82       	std	Y+2, r1	; 0x02
    298c:	8d ee       	ldi	r24, 0xED	; 237
    298e:	92 e0       	ldi	r25, 0x02	; 2
    2990:	99 83       	std	Y+1, r25	; 0x01
    2992:	88 83       	st	Y, r24
    2994:	1f 82       	std	Y+7, r1	; 0x07
    2996:	18 86       	std	Y+8, r1	; 0x08
    2998:	80 ed       	ldi	r24, 0xD0	; 208
    299a:	97 e0       	ldi	r25, 0x07	; 7
    299c:	a0 e0       	ldi	r26, 0x00	; 0
    299e:	b0 e0       	ldi	r27, 0x00	; 0
    29a0:	88 8b       	std	Y+16, r24	; 0x10
    29a2:	99 8b       	std	Y+17, r25	; 0x11
    29a4:	aa 8b       	std	Y+18, r26	; 0x12
    29a6:	bb 8b       	std	Y+19, r27	; 0x13
    29a8:	86 e2       	ldi	r24, 0x26	; 38
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	a0 e0       	ldi	r26, 0x00	; 0
    29ae:	b0 e0       	ldi	r27, 0x00	; 0
    29b0:	8c 8b       	std	Y+20, r24	; 0x14
    29b2:	9d 8b       	std	Y+21, r25	; 0x15
    29b4:	ae 8b       	std	Y+22, r26	; 0x16
    29b6:	bf 8b       	std	Y+23, r27	; 0x17
    29b8:	1c 86       	std	Y+12, r1	; 0x0c
    29ba:	1d 86       	std	Y+13, r1	; 0x0d
    29bc:	1e 86       	std	Y+14, r1	; 0x0e
    29be:	1f 86       	std	Y+15, r1	; 0x0f
    29c0:	1b 86       	std	Y+11, r1	; 0x0b
    29c2:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <micros>
    29c6:	68 8f       	std	Y+24, r22	; 0x18
    29c8:	79 8f       	std	Y+25, r23	; 0x19
    29ca:	8a 8f       	std	Y+26, r24	; 0x1a
    29cc:	9b 8f       	std	Y+27, r25	; 0x1b
    29ce:	1c 8e       	std	Y+28, r1	; 0x1c
    29d0:	1d 8e       	std	Y+29, r1	; 0x1d
    29d2:	1e 8e       	std	Y+30, r1	; 0x1e
    29d4:	1f 8e       	std	Y+31, r1	; 0x1f
    29d6:	df 91       	pop	r29
    29d8:	cf 91       	pop	r28
    29da:	08 95       	ret

000029dc <_ZN7hd447809backlightEv>:
    29dc:	dc 01       	movw	r26, r24
    29de:	ed 91       	ld	r30, X+
    29e0:	fc 91       	ld	r31, X
    29e2:	06 84       	ldd	r0, Z+14	; 0x0e
    29e4:	f7 85       	ldd	r31, Z+15	; 0x0f
    29e6:	e0 2d       	mov	r30, r0
    29e8:	6f ef       	ldi	r22, 0xFF	; 255
    29ea:	09 94       	ijmp

000029ec <_ZN7hd4478011noBacklightEv>:
    29ec:	dc 01       	movw	r26, r24
    29ee:	ed 91       	ld	r30, X+
    29f0:	fc 91       	ld	r31, X
    29f2:	06 84       	ldd	r0, Z+14	; 0x0e
    29f4:	f7 85       	ldd	r31, Z+15	; 0x0f
    29f6:	e0 2d       	mov	r30, r0
    29f8:	60 e0       	ldi	r22, 0x00	; 0
    29fa:	09 94       	ijmp

000029fc <_ZN7hd447807commandEh>:
    29fc:	8f 92       	push	r8
    29fe:	9f 92       	push	r9
    2a00:	af 92       	push	r10
    2a02:	bf 92       	push	r11
    2a04:	ef 92       	push	r14
    2a06:	ff 92       	push	r15
    2a08:	1f 93       	push	r17
    2a0a:	cf 93       	push	r28
    2a0c:	df 93       	push	r29
    2a0e:	ec 01       	movw	r28, r24
    2a10:	16 2f       	mov	r17, r22
    2a12:	e8 81       	ld	r30, Y
    2a14:	f9 81       	ldd	r31, Y+1	; 0x01
    2a16:	04 84       	ldd	r0, Z+12	; 0x0c
    2a18:	f5 85       	ldd	r31, Z+13	; 0x0d
    2a1a:	e0 2d       	mov	r30, r0
    2a1c:	46 2f       	mov	r20, r22
    2a1e:	60 e0       	ldi	r22, 0x00	; 0
    2a20:	09 95       	icall
    2a22:	7c 01       	movw	r14, r24
    2a24:	11 50       	subi	r17, 0x01	; 1
    2a26:	12 30       	cpi	r17, 0x02	; 2
    2a28:	38 f4       	brcc	.+14     	; 0x2a38 <_ZN7hd447807commandEh+0x3c>
    2a2a:	19 86       	std	Y+9, r1	; 0x09
    2a2c:	1a 86       	std	Y+10, r1	; 0x0a
    2a2e:	88 88       	ldd	r8, Y+16	; 0x10
    2a30:	99 88       	ldd	r9, Y+17	; 0x11
    2a32:	aa 88       	ldd	r10, Y+18	; 0x12
    2a34:	bb 88       	ldd	r11, Y+19	; 0x13
    2a36:	04 c0       	rjmp	.+8      	; 0x2a40 <_ZN7hd447807commandEh+0x44>
    2a38:	8c 88       	ldd	r8, Y+20	; 0x14
    2a3a:	9d 88       	ldd	r9, Y+21	; 0x15
    2a3c:	ae 88       	ldd	r10, Y+22	; 0x16
    2a3e:	bf 88       	ldd	r11, Y+23	; 0x17
    2a40:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <micros>
    2a44:	68 8f       	std	Y+24, r22	; 0x18
    2a46:	79 8f       	std	Y+25, r23	; 0x19
    2a48:	8a 8f       	std	Y+26, r24	; 0x1a
    2a4a:	9b 8f       	std	Y+27, r25	; 0x1b
    2a4c:	8c 8e       	std	Y+28, r8	; 0x1c
    2a4e:	9d 8e       	std	Y+29, r9	; 0x1d
    2a50:	ae 8e       	std	Y+30, r10	; 0x1e
    2a52:	bf 8e       	std	Y+31, r11	; 0x1f
    2a54:	c7 01       	movw	r24, r14
    2a56:	df 91       	pop	r29
    2a58:	cf 91       	pop	r28
    2a5a:	1f 91       	pop	r17
    2a5c:	ff 90       	pop	r15
    2a5e:	ef 90       	pop	r14
    2a60:	bf 90       	pop	r11
    2a62:	af 90       	pop	r10
    2a64:	9f 90       	pop	r9
    2a66:	8f 90       	pop	r8
    2a68:	08 95       	ret

00002a6a <_ZN7hd447805clearEv>:
    2a6a:	61 e0       	ldi	r22, 0x01	; 1
    2a6c:	0c 94 fe 14 	jmp	0x29fc	; 0x29fc <_ZN7hd447807commandEh>

00002a70 <_ZN7hd447804homeEv>:
    2a70:	62 e0       	ldi	r22, 0x02	; 2
    2a72:	0c 94 fe 14 	jmp	0x29fc	; 0x29fc <_ZN7hd447807commandEh>

00002a76 <_ZN7hd447809setCursorEhh>:
    2a76:	fc 01       	movw	r30, r24
    2a78:	80 85       	ldd	r24, Z+8	; 0x08
    2a7a:	48 17       	cp	r20, r24
    2a7c:	10 f0       	brcs	.+4      	; 0x2a82 <_ZN7hd447809setCursorEhh+0xc>
    2a7e:	4f ef       	ldi	r20, 0xFF	; 255
    2a80:	48 0f       	add	r20, r24
    2a82:	93 85       	ldd	r25, Z+11	; 0x0b
    2a84:	99 23       	and	r25, r25
    2a86:	59 f0       	breq	.+22     	; 0x2a9e <_ZN7hd447809setCursorEhh+0x28>
    2a88:	97 81       	ldd	r25, Z+7	; 0x07
    2a8a:	69 17       	cp	r22, r25
    2a8c:	30 f0       	brcs	.+12     	; 0x2a9a <_ZN7hd447809setCursorEhh+0x24>
    2a8e:	69 1b       	sub	r22, r25
    2a90:	4f 5f       	subi	r20, 0xFF	; 255
    2a92:	48 17       	cp	r20, r24
    2a94:	d0 f3       	brcs	.-12     	; 0x2a8a <_ZN7hd447809setCursorEhh+0x14>
    2a96:	40 e0       	ldi	r20, 0x00	; 0
    2a98:	f8 cf       	rjmp	.-16     	; 0x2a8a <_ZN7hd447809setCursorEhh+0x14>
    2a9a:	61 87       	std	Z+9, r22	; 0x09
    2a9c:	42 87       	std	Z+10, r20	; 0x0a
    2a9e:	df 01       	movw	r26, r30
    2aa0:	a4 0f       	add	r26, r20
    2aa2:	b1 1d       	adc	r27, r1
    2aa4:	1c 96       	adiw	r26, 0x0c	; 12
    2aa6:	8c 91       	ld	r24, X
    2aa8:	68 0f       	add	r22, r24
    2aaa:	60 68       	ori	r22, 0x80	; 128
    2aac:	cf 01       	movw	r24, r30
    2aae:	0c 94 fe 14 	jmp	0x29fc	; 0x29fc <_ZN7hd447807commandEh>

00002ab2 <_ZN7hd447807displayEv>:
    2ab2:	fc 01       	movw	r30, r24
    2ab4:	65 81       	ldd	r22, Z+5	; 0x05
    2ab6:	26 2f       	mov	r18, r22
    2ab8:	24 60       	ori	r18, 0x04	; 4
    2aba:	25 83       	std	Z+5, r18	; 0x05
    2abc:	6c 60       	ori	r22, 0x0C	; 12
    2abe:	0c 94 fe 14 	jmp	0x29fc	; 0x29fc <_ZN7hd447807commandEh>

00002ac2 <_ZN7hd447805beginEhhh>:
    2ac2:	0f 93       	push	r16
    2ac4:	1f 93       	push	r17
    2ac6:	cf 93       	push	r28
    2ac8:	df 93       	push	r29
    2aca:	ec 01       	movw	r28, r24
    2acc:	02 2f       	mov	r16, r18
    2ace:	14 2f       	mov	r17, r20
    2ad0:	45 30       	cpi	r20, 0x05	; 5
    2ad2:	08 f0       	brcs	.+2      	; 0x2ad6 <_ZN7hd447805beginEhhh+0x14>
    2ad4:	14 e0       	ldi	r17, 0x04	; 4
    2ad6:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ad8:	81 11       	cpse	r24, r1
    2ada:	09 c0       	rjmp	.+18     	; 0x2aee <_ZN7hd447805beginEhhh+0x2c>
    2adc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ade:	81 11       	cpse	r24, r1
    2ae0:	06 c0       	rjmp	.+12     	; 0x2aee <_ZN7hd447805beginEhhh+0x2c>
    2ae2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ae4:	81 11       	cpse	r24, r1
    2ae6:	03 c0       	rjmp	.+6      	; 0x2aee <_ZN7hd447805beginEhhh+0x2c>
    2ae8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aea:	88 23       	and	r24, r24
    2aec:	29 f0       	breq	.+10     	; 0x2af8 <_ZN7hd447805beginEhhh+0x36>
    2aee:	8f 81       	ldd	r24, Y+7	; 0x07
    2af0:	88 23       	and	r24, r24
    2af2:	59 f0       	breq	.+22     	; 0x2b0a <_ZN7hd447805beginEhhh+0x48>
    2af4:	86 17       	cp	r24, r22
    2af6:	49 f0       	breq	.+18     	; 0x2b0a <_ZN7hd447805beginEhhh+0x48>
    2af8:	1c 86       	std	Y+12, r1	; 0x0c
    2afa:	80 e4       	ldi	r24, 0x40	; 64
    2afc:	8d 87       	std	Y+13, r24	; 0x0d
    2afe:	6e 87       	std	Y+14, r22	; 0x0e
    2b00:	86 2f       	mov	r24, r22
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	80 5c       	subi	r24, 0xC0	; 192
    2b06:	9f 4f       	sbci	r25, 0xFF	; 255
    2b08:	8f 87       	std	Y+15, r24	; 0x0f
    2b0a:	18 87       	std	Y+8, r17	; 0x08
    2b0c:	6f 83       	std	Y+7, r22	; 0x07
    2b0e:	64 e6       	ldi	r22, 0x64	; 100
    2b10:	70 e0       	ldi	r23, 0x00	; 0
    2b12:	80 e0       	ldi	r24, 0x00	; 0
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	0e 94 da 26 	call	0x4db4	; 0x4db4 <delay>
    2b1a:	1c 82       	std	Y+4, r1	; 0x04
    2b1c:	e8 81       	ld	r30, Y
    2b1e:	f9 81       	ldd	r31, Y+1	; 0x01
    2b20:	00 84       	ldd	r0, Z+8	; 0x08
    2b22:	f1 85       	ldd	r31, Z+9	; 0x09
    2b24:	e0 2d       	mov	r30, r0
    2b26:	ce 01       	movw	r24, r28
    2b28:	09 95       	icall
    2b2a:	00 97       	sbiw	r24, 0x00	; 0
    2b2c:	09 f0       	breq	.+2      	; 0x2b30 <_ZN7hd447805beginEhhh+0x6e>
    2b2e:	5e c0       	rjmp	.+188    	; 0x2bec <_ZN7hd447805beginEhhh+0x12a>
    2b30:	88 85       	ldd	r24, Y+8	; 0x08
    2b32:	82 30       	cpi	r24, 0x02	; 2
    2b34:	18 f0       	brcs	.+6      	; 0x2b3c <_ZN7hd447805beginEhhh+0x7a>
    2b36:	8c 81       	ldd	r24, Y+4	; 0x04
    2b38:	88 60       	ori	r24, 0x08	; 8
    2b3a:	8c 83       	std	Y+4, r24	; 0x04
    2b3c:	00 23       	and	r16, r16
    2b3e:	29 f0       	breq	.+10     	; 0x2b4a <_ZN7hd447805beginEhhh+0x88>
    2b40:	11 30       	cpi	r17, 0x01	; 1
    2b42:	19 f4       	brne	.+6      	; 0x2b4a <_ZN7hd447805beginEhhh+0x88>
    2b44:	8c 81       	ldd	r24, Y+4	; 0x04
    2b46:	84 60       	ori	r24, 0x04	; 4
    2b48:	8c 83       	std	Y+4, r24	; 0x04
    2b4a:	e8 81       	ld	r30, Y
    2b4c:	f9 81       	ldd	r31, Y+1	; 0x01
    2b4e:	04 84       	ldd	r0, Z+12	; 0x0c
    2b50:	f5 85       	ldd	r31, Z+13	; 0x0d
    2b52:	e0 2d       	mov	r30, r0
    2b54:	40 e3       	ldi	r20, 0x30	; 48
    2b56:	62 e0       	ldi	r22, 0x02	; 2
    2b58:	ce 01       	movw	r24, r28
    2b5a:	09 95       	icall
    2b5c:	65 e0       	ldi	r22, 0x05	; 5
    2b5e:	70 e0       	ldi	r23, 0x00	; 0
    2b60:	80 e0       	ldi	r24, 0x00	; 0
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	0e 94 da 26 	call	0x4db4	; 0x4db4 <delay>
    2b68:	e8 81       	ld	r30, Y
    2b6a:	f9 81       	ldd	r31, Y+1	; 0x01
    2b6c:	04 84       	ldd	r0, Z+12	; 0x0c
    2b6e:	f5 85       	ldd	r31, Z+13	; 0x0d
    2b70:	e0 2d       	mov	r30, r0
    2b72:	40 e3       	ldi	r20, 0x30	; 48
    2b74:	62 e0       	ldi	r22, 0x02	; 2
    2b76:	ce 01       	movw	r24, r28
    2b78:	09 95       	icall
    2b7a:	61 e0       	ldi	r22, 0x01	; 1
    2b7c:	70 e0       	ldi	r23, 0x00	; 0
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	0e 94 da 26 	call	0x4db4	; 0x4db4 <delay>
    2b86:	e8 81       	ld	r30, Y
    2b88:	f9 81       	ldd	r31, Y+1	; 0x01
    2b8a:	04 84       	ldd	r0, Z+12	; 0x0c
    2b8c:	f5 85       	ldd	r31, Z+13	; 0x0d
    2b8e:	e0 2d       	mov	r30, r0
    2b90:	40 e3       	ldi	r20, 0x30	; 48
    2b92:	62 e0       	ldi	r22, 0x02	; 2
    2b94:	ce 01       	movw	r24, r28
    2b96:	09 95       	icall
    2b98:	61 e0       	ldi	r22, 0x01	; 1
    2b9a:	70 e0       	ldi	r23, 0x00	; 0
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	0e 94 da 26 	call	0x4db4	; 0x4db4 <delay>
    2ba4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ba6:	84 fd       	sbrc	r24, 4
    2ba8:	09 c0       	rjmp	.+18     	; 0x2bbc <_ZN7hd447805beginEhhh+0xfa>
    2baa:	e8 81       	ld	r30, Y
    2bac:	f9 81       	ldd	r31, Y+1	; 0x01
    2bae:	04 84       	ldd	r0, Z+12	; 0x0c
    2bb0:	f5 85       	ldd	r31, Z+13	; 0x0d
    2bb2:	e0 2d       	mov	r30, r0
    2bb4:	40 e2       	ldi	r20, 0x20	; 32
    2bb6:	62 e0       	ldi	r22, 0x02	; 2
    2bb8:	ce 01       	movw	r24, r28
    2bba:	09 95       	icall
    2bbc:	6c 81       	ldd	r22, Y+4	; 0x04
    2bbe:	60 62       	ori	r22, 0x20	; 32
    2bc0:	ce 01       	movw	r24, r28
    2bc2:	0e 94 fe 14 	call	0x29fc	; 0x29fc <_ZN7hd447807commandEh>
    2bc6:	84 e0       	ldi	r24, 0x04	; 4
    2bc8:	8d 83       	std	Y+5, r24	; 0x05
    2bca:	ce 01       	movw	r24, r28
    2bcc:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <_ZN7hd447807displayEv>
    2bd0:	ce 01       	movw	r24, r28
    2bd2:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN7hd447805clearEv>
    2bd6:	82 e0       	ldi	r24, 0x02	; 2
    2bd8:	8e 83       	std	Y+6, r24	; 0x06
    2bda:	66 e0       	ldi	r22, 0x06	; 6
    2bdc:	ce 01       	movw	r24, r28
    2bde:	0e 94 fe 14 	call	0x29fc	; 0x29fc <_ZN7hd447807commandEh>
    2be2:	8c 01       	movw	r16, r24
    2be4:	ce 01       	movw	r24, r28
    2be6:	0e 94 ee 14 	call	0x29dc	; 0x29dc <_ZN7hd447809backlightEv>
    2bea:	c8 01       	movw	r24, r16
    2bec:	df 91       	pop	r29
    2bee:	cf 91       	pop	r28
    2bf0:	1f 91       	pop	r17
    2bf2:	0f 91       	pop	r16
    2bf4:	08 95       	ret

00002bf6 <_ZN7hd447808noCursorEv>:
    2bf6:	fc 01       	movw	r30, r24
    2bf8:	65 81       	ldd	r22, Z+5	; 0x05
    2bfa:	6d 7f       	andi	r22, 0xFD	; 253
    2bfc:	65 83       	std	Z+5, r22	; 0x05
    2bfe:	68 60       	ori	r22, 0x08	; 8
    2c00:	0c 94 fe 14 	jmp	0x29fc	; 0x29fc <_ZN7hd447807commandEh>

00002c04 <_ZN7hd447807noBlinkEv>:
    2c04:	fc 01       	movw	r30, r24
    2c06:	65 81       	ldd	r22, Z+5	; 0x05
    2c08:	6e 7f       	andi	r22, 0xFE	; 254
    2c0a:	65 83       	std	Z+5, r22	; 0x05
    2c0c:	68 60       	ori	r22, 0x08	; 8
    2c0e:	0c 94 fe 14 	jmp	0x29fc	; 0x29fc <_ZN7hd447807commandEh>

00002c12 <_ZN7hd447806_writeEh>:
    2c12:	cf 92       	push	r12
    2c14:	df 92       	push	r13
    2c16:	ef 92       	push	r14
    2c18:	ff 92       	push	r15
    2c1a:	0f 93       	push	r16
    2c1c:	1f 93       	push	r17
    2c1e:	cf 93       	push	r28
    2c20:	df 93       	push	r29
    2c22:	ec 01       	movw	r28, r24
    2c24:	46 2f       	mov	r20, r22
    2c26:	e8 81       	ld	r30, Y
    2c28:	f9 81       	ldd	r31, Y+1	; 0x01
    2c2a:	04 84       	ldd	r0, Z+12	; 0x0c
    2c2c:	f5 85       	ldd	r31, Z+13	; 0x0d
    2c2e:	e0 2d       	mov	r30, r0
    2c30:	61 e0       	ldi	r22, 0x01	; 1
    2c32:	09 95       	icall
    2c34:	8c 01       	movw	r16, r24
    2c36:	cc 88       	ldd	r12, Y+20	; 0x14
    2c38:	dd 88       	ldd	r13, Y+21	; 0x15
    2c3a:	ee 88       	ldd	r14, Y+22	; 0x16
    2c3c:	ff 88       	ldd	r15, Y+23	; 0x17
    2c3e:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <micros>
    2c42:	68 8f       	std	Y+24, r22	; 0x18
    2c44:	79 8f       	std	Y+25, r23	; 0x19
    2c46:	8a 8f       	std	Y+26, r24	; 0x1a
    2c48:	9b 8f       	std	Y+27, r25	; 0x1b
    2c4a:	cc 8e       	std	Y+28, r12	; 0x1c
    2c4c:	dd 8e       	std	Y+29, r13	; 0x1d
    2c4e:	ee 8e       	std	Y+30, r14	; 0x1e
    2c50:	ff 8e       	std	Y+31, r15	; 0x1f
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	01 2b       	or	r16, r17
    2c58:	11 f0       	breq	.+4      	; 0x2c5e <_ZN7hd447806_writeEh+0x4c>
    2c5a:	80 e0       	ldi	r24, 0x00	; 0
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	df 91       	pop	r29
    2c60:	cf 91       	pop	r28
    2c62:	1f 91       	pop	r17
    2c64:	0f 91       	pop	r16
    2c66:	ff 90       	pop	r15
    2c68:	ef 90       	pop	r14
    2c6a:	df 90       	pop	r13
    2c6c:	cf 90       	pop	r12
    2c6e:	08 95       	ret

00002c70 <_ZN7hd447805writeEh>:

// write() - process data character byte to lcd
// returns number of bytes successfully written to device
// i.e. 1 if success or 0 if no character was processed (error)
size_t hd44780::write(uint8_t value)
{
    2c70:	0f 93       	push	r16
    2c72:	1f 93       	push	r17
    2c74:	cf 93       	push	r28
    2c76:	df 93       	push	r29
    2c78:	ec 01       	movw	r28, r24
size_t rval;

	rval = _write(value);
    2c7a:	0e 94 09 16 	call	0x2c12	; 0x2c12 <_ZN7hd447806_writeEh>
    2c7e:	8c 01       	movw	r16, r24
	if(_wraplines)
    2c80:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c82:	88 23       	and	r24, r24
    2c84:	99 f0       	breq	.+38     	; 0x2cac <_ZN7hd447805writeEh+0x3c>
	{
		// currently only works for left to right mode
		if(++_curcol >= _cols)
    2c86:	89 85       	ldd	r24, Y+9	; 0x09
    2c88:	8f 5f       	subi	r24, 0xFF	; 255
    2c8a:	89 87       	std	Y+9, r24	; 0x09
    2c8c:	9f 81       	ldd	r25, Y+7	; 0x07
    2c8e:	89 17       	cp	r24, r25
    2c90:	68 f0       	brcs	.+26     	; 0x2cac <_ZN7hd447805writeEh+0x3c>
		{
			_curcol = 0;
    2c92:	19 86       	std	Y+9, r1	; 0x09
			_currow++;
    2c94:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c96:	8f 5f       	subi	r24, 0xFF	; 255
    2c98:	8a 87       	std	Y+10, r24	; 0x0a
			if(_currow >= _rows)
    2c9a:	98 85       	ldd	r25, Y+8	; 0x08
    2c9c:	89 17       	cp	r24, r25
    2c9e:	08 f0       	brcs	.+2      	; 0x2ca2 <_ZN7hd447805writeEh+0x32>
				_currow = 0;
    2ca0:	1a 86       	std	Y+10, r1	; 0x0a
			setCursor(_curcol, _currow);
    2ca2:	4a 85       	ldd	r20, Y+10	; 0x0a
    2ca4:	60 e0       	ldi	r22, 0x00	; 0
    2ca6:	ce 01       	movw	r24, r28
    2ca8:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_ZN7hd447809setCursorEhh>
		}
	}
	return (rval);
}
    2cac:	c8 01       	movw	r24, r16
    2cae:	df 91       	pop	r29
    2cb0:	cf 91       	pop	r28
    2cb2:	1f 91       	pop	r17
    2cb4:	0f 91       	pop	r16
    2cb6:	08 95       	ret

00002cb8 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2cb8:	10 92 95 05 	sts	0x0595, r1	; 0x800595 <twi_state>
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	80 93 93 05 	sts	0x0593, r24	; 0x800593 <twi_sendStop>
    2cc2:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <twi_inRepStart>
    2cc6:	61 e0       	ldi	r22, 0x01	; 1
    2cc8:	82 e0       	ldi	r24, 0x02	; 2
    2cca:	0e 94 b9 28 	call	0x5172	; 0x5172 <digitalWrite>
    2cce:	61 e0       	ldi	r22, 0x01	; 1
    2cd0:	83 e0       	ldi	r24, 0x03	; 3
    2cd2:	0e 94 b9 28 	call	0x5172	; 0x5172 <digitalWrite>
    2cd6:	e9 eb       	ldi	r30, 0xB9	; 185
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	80 81       	ld	r24, Z
    2cdc:	8e 7f       	andi	r24, 0xFE	; 254
    2cde:	80 83       	st	Z, r24
    2ce0:	80 81       	ld	r24, Z
    2ce2:	8d 7f       	andi	r24, 0xFD	; 253
    2ce4:	80 83       	st	Z, r24
    2ce6:	88 e4       	ldi	r24, 0x48	; 72
    2ce8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    2cec:	85 e4       	ldi	r24, 0x45	; 69
    2cee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2cf2:	08 95       	ret

00002cf4 <twi_readFrom>:
    2cf4:	41 32       	cpi	r20, 0x21	; 33
    2cf6:	08 f0       	brcs	.+2      	; 0x2cfa <twi_readFrom+0x6>
    2cf8:	43 c0       	rjmp	.+134    	; 0x2d80 <twi_readFrom+0x8c>
    2cfa:	90 91 95 05 	lds	r25, 0x0595	; 0x800595 <twi_state>
    2cfe:	91 11       	cpse	r25, r1
    2d00:	fc cf       	rjmp	.-8      	; 0x2cfa <twi_readFrom+0x6>
    2d02:	91 e0       	ldi	r25, 0x01	; 1
    2d04:	90 93 95 05 	sts	0x0595, r25	; 0x800595 <twi_state>
    2d08:	20 93 93 05 	sts	0x0593, r18	; 0x800593 <twi_sendStop>
    2d0c:	2f ef       	ldi	r18, 0xFF	; 255
    2d0e:	20 93 28 05 	sts	0x0528, r18	; 0x800528 <twi_error>
    2d12:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <twi_masterBufferIndex>
    2d16:	24 0f       	add	r18, r20
    2d18:	20 93 6c 05 	sts	0x056C, r18	; 0x80056c <twi_masterBufferLength>
    2d1c:	90 93 94 05 	sts	0x0594, r25	; 0x800594 <twi_slarw>
    2d20:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <twi_slarw>
    2d24:	88 0f       	add	r24, r24
    2d26:	89 2b       	or	r24, r25
    2d28:	80 93 94 05 	sts	0x0594, r24	; 0x800594 <twi_slarw>
    2d2c:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <twi_inRepStart>
    2d30:	81 30       	cpi	r24, 0x01	; 1
    2d32:	61 f4       	brne	.+24     	; 0x2d4c <twi_readFrom+0x58>
    2d34:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <twi_inRepStart>
    2d38:	80 91 94 05 	lds	r24, 0x0594	; 0x800594 <twi_slarw>
    2d3c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2d40:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2d44:	83 fd       	sbrc	r24, 3
    2d46:	f8 cf       	rjmp	.-16     	; 0x2d38 <twi_readFrom+0x44>
    2d48:	85 ec       	ldi	r24, 0xC5	; 197
    2d4a:	01 c0       	rjmp	.+2      	; 0x2d4e <twi_readFrom+0x5a>
    2d4c:	85 ee       	ldi	r24, 0xE5	; 229
    2d4e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2d52:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <twi_state>
    2d56:	81 30       	cpi	r24, 0x01	; 1
    2d58:	e1 f3       	breq	.-8      	; 0x2d52 <twi_readFrom+0x5e>
    2d5a:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <twi_masterBufferIndex>
    2d5e:	84 17       	cp	r24, r20
    2d60:	10 f4       	brcc	.+4      	; 0x2d66 <twi_readFrom+0x72>
    2d62:	40 91 6d 05 	lds	r20, 0x056D	; 0x80056d <twi_masterBufferIndex>
    2d66:	ae e6       	ldi	r26, 0x6E	; 110
    2d68:	b5 e0       	ldi	r27, 0x05	; 5
    2d6a:	96 2f       	mov	r25, r22
    2d6c:	fb 01       	movw	r30, r22
    2d6e:	8e 2f       	mov	r24, r30
    2d70:	89 1b       	sub	r24, r25
    2d72:	84 17       	cp	r24, r20
    2d74:	18 f4       	brcc	.+6      	; 0x2d7c <twi_readFrom+0x88>
    2d76:	8d 91       	ld	r24, X+
    2d78:	81 93       	st	Z+, r24
    2d7a:	f9 cf       	rjmp	.-14     	; 0x2d6e <twi_readFrom+0x7a>
    2d7c:	84 2f       	mov	r24, r20
    2d7e:	08 95       	ret
    2d80:	80 e0       	ldi	r24, 0x00	; 0
    2d82:	08 95       	ret

00002d84 <twi_writeTo>:
    2d84:	0f 93       	push	r16
    2d86:	41 32       	cpi	r20, 0x21	; 33
    2d88:	08 f0       	brcs	.+2      	; 0x2d8c <twi_writeTo+0x8>
    2d8a:	4a c0       	rjmp	.+148    	; 0x2e20 <twi_writeTo+0x9c>
    2d8c:	90 91 95 05 	lds	r25, 0x0595	; 0x800595 <twi_state>
    2d90:	91 11       	cpse	r25, r1
    2d92:	fc cf       	rjmp	.-8      	; 0x2d8c <twi_writeTo+0x8>
    2d94:	32 e0       	ldi	r19, 0x02	; 2
    2d96:	30 93 95 05 	sts	0x0595, r19	; 0x800595 <twi_state>
    2d9a:	00 93 93 05 	sts	0x0593, r16	; 0x800593 <twi_sendStop>
    2d9e:	3f ef       	ldi	r19, 0xFF	; 255
    2da0:	30 93 28 05 	sts	0x0528, r19	; 0x800528 <twi_error>
    2da4:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <twi_masterBufferIndex>
    2da8:	40 93 6c 05 	sts	0x056C, r20	; 0x80056c <twi_masterBufferLength>
    2dac:	56 2f       	mov	r21, r22
    2dae:	ae e6       	ldi	r26, 0x6E	; 110
    2db0:	b5 e0       	ldi	r27, 0x05	; 5
    2db2:	fb 01       	movw	r30, r22
    2db4:	3e 2f       	mov	r19, r30
    2db6:	35 1b       	sub	r19, r21
    2db8:	34 17       	cp	r19, r20
    2dba:	18 f4       	brcc	.+6      	; 0x2dc2 <twi_writeTo+0x3e>
    2dbc:	31 91       	ld	r19, Z+
    2dbe:	3d 93       	st	X+, r19
    2dc0:	f9 cf       	rjmp	.-14     	; 0x2db4 <twi_writeTo+0x30>
    2dc2:	10 92 94 05 	sts	0x0594, r1	; 0x800594 <twi_slarw>
    2dc6:	30 91 94 05 	lds	r19, 0x0594	; 0x800594 <twi_slarw>
    2dca:	88 0f       	add	r24, r24
    2dcc:	83 2b       	or	r24, r19
    2dce:	80 93 94 05 	sts	0x0594, r24	; 0x800594 <twi_slarw>
    2dd2:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <twi_inRepStart>
    2dd6:	81 30       	cpi	r24, 0x01	; 1
    2dd8:	61 f4       	brne	.+24     	; 0x2df2 <twi_writeTo+0x6e>
    2dda:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <twi_inRepStart>
    2dde:	80 91 94 05 	lds	r24, 0x0594	; 0x800594 <twi_slarw>
    2de2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2de6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2dea:	83 fd       	sbrc	r24, 3
    2dec:	f8 cf       	rjmp	.-16     	; 0x2dde <twi_writeTo+0x5a>
    2dee:	85 ec       	ldi	r24, 0xC5	; 197
    2df0:	01 c0       	rjmp	.+2      	; 0x2df4 <twi_writeTo+0x70>
    2df2:	85 ee       	ldi	r24, 0xE5	; 229
    2df4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2df8:	22 23       	and	r18, r18
    2dfa:	21 f0       	breq	.+8      	; 0x2e04 <twi_writeTo+0x80>
    2dfc:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <twi_state>
    2e00:	82 30       	cpi	r24, 0x02	; 2
    2e02:	d1 f3       	breq	.-12     	; 0x2df8 <twi_writeTo+0x74>
    2e04:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <twi_error>
    2e08:	8f 3f       	cpi	r24, 0xFF	; 255
    2e0a:	79 f0       	breq	.+30     	; 0x2e2a <twi_writeTo+0xa6>
    2e0c:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <twi_error>
    2e10:	80 32       	cpi	r24, 0x20	; 32
    2e12:	41 f0       	breq	.+16     	; 0x2e24 <twi_writeTo+0xa0>
    2e14:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <twi_error>
    2e18:	80 33       	cpi	r24, 0x30	; 48
    2e1a:	31 f0       	breq	.+12     	; 0x2e28 <twi_writeTo+0xa4>
    2e1c:	94 e0       	ldi	r25, 0x04	; 4
    2e1e:	05 c0       	rjmp	.+10     	; 0x2e2a <twi_writeTo+0xa6>
    2e20:	91 e0       	ldi	r25, 0x01	; 1
    2e22:	03 c0       	rjmp	.+6      	; 0x2e2a <twi_writeTo+0xa6>
    2e24:	92 e0       	ldi	r25, 0x02	; 2
    2e26:	01 c0       	rjmp	.+2      	; 0x2e2a <twi_writeTo+0xa6>
    2e28:	93 e0       	ldi	r25, 0x03	; 3
    2e2a:	89 2f       	mov	r24, r25
    2e2c:	0f 91       	pop	r16
    2e2e:	08 95       	ret

00002e30 <twi_transmit>:
    2e30:	40 91 4a 05 	lds	r20, 0x054A	; 0x80054a <twi_txBufferLength>
    2e34:	26 2f       	mov	r18, r22
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	24 0f       	add	r18, r20
    2e3a:	31 1d       	adc	r19, r1
    2e3c:	21 32       	cpi	r18, 0x21	; 33
    2e3e:	31 05       	cpc	r19, r1
    2e40:	dc f4       	brge	.+54     	; 0x2e78 <twi_transmit+0x48>
    2e42:	20 91 95 05 	lds	r18, 0x0595	; 0x800595 <twi_state>
    2e46:	24 30       	cpi	r18, 0x04	; 4
    2e48:	c9 f4       	brne	.+50     	; 0x2e7c <twi_transmit+0x4c>
    2e4a:	fc 01       	movw	r30, r24
    2e4c:	80 e0       	ldi	r24, 0x00	; 0
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	86 17       	cp	r24, r22
    2e52:	58 f4       	brcc	.+22     	; 0x2e6a <twi_transmit+0x3a>
    2e54:	30 91 4a 05 	lds	r19, 0x054A	; 0x80054a <twi_txBufferLength>
    2e58:	21 91       	ld	r18, Z+
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	a4 5b       	subi	r26, 0xB4	; 180
    2e5e:	ba 4f       	sbci	r27, 0xFA	; 250
    2e60:	a3 0f       	add	r26, r19
    2e62:	b1 1d       	adc	r27, r1
    2e64:	2c 93       	st	X, r18
    2e66:	01 96       	adiw	r24, 0x01	; 1
    2e68:	f3 cf       	rjmp	.-26     	; 0x2e50 <twi_transmit+0x20>
    2e6a:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <twi_txBufferLength>
    2e6e:	68 0f       	add	r22, r24
    2e70:	60 93 4a 05 	sts	0x054A, r22	; 0x80054a <twi_txBufferLength>
    2e74:	80 e0       	ldi	r24, 0x00	; 0
    2e76:	08 95       	ret
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	08 95       	ret
    2e7c:	82 e0       	ldi	r24, 0x02	; 2
    2e7e:	08 95       	ret

00002e80 <twi_attachSlaveRxEvent>:
    2e80:	90 93 8f 05 	sts	0x058F, r25	; 0x80058f <twi_onSlaveReceive+0x1>
    2e84:	80 93 8e 05 	sts	0x058E, r24	; 0x80058e <twi_onSlaveReceive>
    2e88:	08 95       	ret

00002e8a <twi_attachSlaveTxEvent>:
    2e8a:	90 93 91 05 	sts	0x0591, r25	; 0x800591 <twi_onSlaveTransmit+0x1>
    2e8e:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <twi_onSlaveTransmit>
    2e92:	08 95       	ret

00002e94 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2e94:	85 ed       	ldi	r24, 0xD5	; 213
    2e96:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2e9a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2e9e:	84 fd       	sbrc	r24, 4
    2ea0:	fc cf       	rjmp	.-8      	; 0x2e9a <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2ea2:	10 92 95 05 	sts	0x0595, r1	; 0x800595 <twi_state>
    2ea6:	08 95       	ret

00002ea8 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2ea8:	85 ec       	ldi	r24, 0xC5	; 197
    2eaa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    2eae:	10 92 95 05 	sts	0x0595, r1	; 0x800595 <twi_state>
    2eb2:	08 95       	ret

00002eb4 <__vector_36>:
}

ISR(TWI_vect)
{
    2eb4:	1f 92       	push	r1
    2eb6:	0f 92       	push	r0
    2eb8:	0f b6       	in	r0, 0x3f	; 63
    2eba:	0f 92       	push	r0
    2ebc:	11 24       	eor	r1, r1
    2ebe:	2f 93       	push	r18
    2ec0:	3f 93       	push	r19
    2ec2:	4f 93       	push	r20
    2ec4:	5f 93       	push	r21
    2ec6:	6f 93       	push	r22
    2ec8:	7f 93       	push	r23
    2eca:	8f 93       	push	r24
    2ecc:	9f 93       	push	r25
    2ece:	af 93       	push	r26
    2ed0:	bf 93       	push	r27
    2ed2:	ef 93       	push	r30
    2ed4:	ff 93       	push	r31
  switch(TW_STATUS){
    2ed6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2eda:	88 7f       	andi	r24, 0xF8	; 248
    2edc:	80 36       	cpi	r24, 0x60	; 96
    2ede:	09 f4       	brne	.+2      	; 0x2ee2 <__vector_36+0x2e>
    2ee0:	9e c0       	rjmp	.+316    	; 0x301e <__vector_36+0x16a>
    2ee2:	78 f5       	brcc	.+94     	; 0x2f42 <__vector_36+0x8e>
    2ee4:	88 32       	cpi	r24, 0x28	; 40
    2ee6:	09 f4       	brne	.+2      	; 0x2eea <__vector_36+0x36>
    2ee8:	5d c0       	rjmp	.+186    	; 0x2fa4 <__vector_36+0xf0>
    2eea:	90 f4       	brcc	.+36     	; 0x2f10 <__vector_36+0x5c>
    2eec:	80 31       	cpi	r24, 0x10	; 16
    2eee:	09 f4       	brne	.+2      	; 0x2ef2 <__vector_36+0x3e>
    2ef0:	56 c0       	rjmp	.+172    	; 0x2f9e <__vector_36+0xea>
    2ef2:	38 f4       	brcc	.+14     	; 0x2f02 <__vector_36+0x4e>
    2ef4:	88 23       	and	r24, r24
    2ef6:	09 f4       	brne	.+2      	; 0x2efa <__vector_36+0x46>
    2ef8:	f5 c0       	rjmp	.+490    	; 0x30e4 <__vector_36+0x230>
    2efa:	88 30       	cpi	r24, 0x08	; 8
    2efc:	09 f4       	brne	.+2      	; 0x2f00 <__vector_36+0x4c>
    2efe:	4f c0       	rjmp	.+158    	; 0x2f9e <__vector_36+0xea>
    2f00:	f5 c0       	rjmp	.+490    	; 0x30ec <__vector_36+0x238>
    2f02:	88 31       	cpi	r24, 0x18	; 24
    2f04:	09 f4       	brne	.+2      	; 0x2f08 <__vector_36+0x54>
    2f06:	4e c0       	rjmp	.+156    	; 0x2fa4 <__vector_36+0xf0>
    2f08:	80 32       	cpi	r24, 0x20	; 32
    2f0a:	09 f4       	brne	.+2      	; 0x2f0e <__vector_36+0x5a>
    2f0c:	5f c0       	rjmp	.+190    	; 0x2fcc <__vector_36+0x118>
    2f0e:	ee c0       	rjmp	.+476    	; 0x30ec <__vector_36+0x238>
    2f10:	80 34       	cpi	r24, 0x40	; 64
    2f12:	09 f4       	brne	.+2      	; 0x2f16 <__vector_36+0x62>
    2f14:	6a c0       	rjmp	.+212    	; 0x2fea <__vector_36+0x136>
    2f16:	58 f4       	brcc	.+22     	; 0x2f2e <__vector_36+0x7a>
    2f18:	80 33       	cpi	r24, 0x30	; 48
    2f1a:	09 f4       	brne	.+2      	; 0x2f1e <__vector_36+0x6a>
    2f1c:	57 c0       	rjmp	.+174    	; 0x2fcc <__vector_36+0x118>
    2f1e:	88 33       	cpi	r24, 0x38	; 56
    2f20:	09 f0       	breq	.+2      	; 0x2f24 <__vector_36+0x70>
    2f22:	e4 c0       	rjmp	.+456    	; 0x30ec <__vector_36+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2f24:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <twi_error>
      twi_releaseBus();
    2f28:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <twi_releaseBus>
      break;
    2f2c:	df c0       	rjmp	.+446    	; 0x30ec <__vector_36+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2f2e:	80 35       	cpi	r24, 0x50	; 80
    2f30:	09 f4       	brne	.+2      	; 0x2f34 <__vector_36+0x80>
    2f32:	4f c0       	rjmp	.+158    	; 0x2fd2 <__vector_36+0x11e>
    2f34:	88 35       	cpi	r24, 0x58	; 88
    2f36:	09 f4       	brne	.+2      	; 0x2f3a <__vector_36+0x86>
    2f38:	5d c0       	rjmp	.+186    	; 0x2ff4 <__vector_36+0x140>
    2f3a:	88 34       	cpi	r24, 0x48	; 72
    2f3c:	09 f0       	breq	.+2      	; 0x2f40 <__vector_36+0x8c>
    2f3e:	d6 c0       	rjmp	.+428    	; 0x30ec <__vector_36+0x238>
    2f40:	d3 c0       	rjmp	.+422    	; 0x30e8 <__vector_36+0x234>
    2f42:	88 39       	cpi	r24, 0x98	; 152
    2f44:	09 f4       	brne	.+2      	; 0x2f48 <__vector_36+0x94>
    2f46:	c4 c0       	rjmp	.+392    	; 0x30d0 <__vector_36+0x21c>
    2f48:	a8 f4       	brcc	.+42     	; 0x2f74 <__vector_36+0xc0>
    2f4a:	88 37       	cpi	r24, 0x78	; 120
    2f4c:	09 f4       	brne	.+2      	; 0x2f50 <__vector_36+0x9c>
    2f4e:	67 c0       	rjmp	.+206    	; 0x301e <__vector_36+0x16a>
    2f50:	38 f4       	brcc	.+14     	; 0x2f60 <__vector_36+0xac>
    2f52:	88 36       	cpi	r24, 0x68	; 104
    2f54:	09 f4       	brne	.+2      	; 0x2f58 <__vector_36+0xa4>
    2f56:	63 c0       	rjmp	.+198    	; 0x301e <__vector_36+0x16a>
    2f58:	80 37       	cpi	r24, 0x70	; 112
    2f5a:	09 f4       	brne	.+2      	; 0x2f5e <__vector_36+0xaa>
    2f5c:	60 c0       	rjmp	.+192    	; 0x301e <__vector_36+0x16a>
    2f5e:	c6 c0       	rjmp	.+396    	; 0x30ec <__vector_36+0x238>
    2f60:	88 38       	cpi	r24, 0x88	; 136
    2f62:	09 f4       	brne	.+2      	; 0x2f66 <__vector_36+0xb2>
    2f64:	b5 c0       	rjmp	.+362    	; 0x30d0 <__vector_36+0x21c>
    2f66:	80 39       	cpi	r24, 0x90	; 144
    2f68:	09 f4       	brne	.+2      	; 0x2f6c <__vector_36+0xb8>
    2f6a:	5f c0       	rjmp	.+190    	; 0x302a <__vector_36+0x176>
    2f6c:	80 38       	cpi	r24, 0x80	; 128
    2f6e:	09 f0       	breq	.+2      	; 0x2f72 <__vector_36+0xbe>
    2f70:	bd c0       	rjmp	.+378    	; 0x30ec <__vector_36+0x238>
    2f72:	5b c0       	rjmp	.+182    	; 0x302a <__vector_36+0x176>
    2f74:	80 3b       	cpi	r24, 0xB0	; 176
    2f76:	09 f4       	brne	.+2      	; 0x2f7a <__vector_36+0xc6>
    2f78:	83 c0       	rjmp	.+262    	; 0x3080 <__vector_36+0x1cc>
    2f7a:	38 f4       	brcc	.+14     	; 0x2f8a <__vector_36+0xd6>
    2f7c:	80 3a       	cpi	r24, 0xA0	; 160
    2f7e:	09 f4       	brne	.+2      	; 0x2f82 <__vector_36+0xce>
    2f80:	66 c0       	rjmp	.+204    	; 0x304e <__vector_36+0x19a>
    2f82:	88 3a       	cpi	r24, 0xA8	; 168
    2f84:	09 f4       	brne	.+2      	; 0x2f88 <__vector_36+0xd4>
    2f86:	7c c0       	rjmp	.+248    	; 0x3080 <__vector_36+0x1cc>
    2f88:	b1 c0       	rjmp	.+354    	; 0x30ec <__vector_36+0x238>
    2f8a:	80 3c       	cpi	r24, 0xC0	; 192
    2f8c:	09 f4       	brne	.+2      	; 0x2f90 <__vector_36+0xdc>
    2f8e:	a4 c0       	rjmp	.+328    	; 0x30d8 <__vector_36+0x224>
    2f90:	88 3c       	cpi	r24, 0xC8	; 200
    2f92:	09 f4       	brne	.+2      	; 0x2f96 <__vector_36+0xe2>
    2f94:	a1 c0       	rjmp	.+322    	; 0x30d8 <__vector_36+0x224>
    2f96:	88 3b       	cpi	r24, 0xB8	; 184
    2f98:	09 f4       	brne	.+2      	; 0x2f9c <__vector_36+0xe8>
    2f9a:	87 c0       	rjmp	.+270    	; 0x30aa <__vector_36+0x1f6>
    2f9c:	a7 c0       	rjmp	.+334    	; 0x30ec <__vector_36+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2f9e:	80 91 94 05 	lds	r24, 0x0594	; 0x800594 <twi_slarw>
    2fa2:	10 c0       	rjmp	.+32     	; 0x2fc4 <__vector_36+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2fa4:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <twi_masterBufferIndex>
    2fa8:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <twi_masterBufferLength>
    2fac:	98 17       	cp	r25, r24
    2fae:	70 f5       	brcc	.+92     	; 0x300c <__vector_36+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2fb0:	e0 91 6d 05 	lds	r30, 0x056D	; 0x80056d <twi_masterBufferIndex>
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	8e 0f       	add	r24, r30
    2fb8:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <twi_masterBufferIndex>
    2fbc:	f0 e0       	ldi	r31, 0x00	; 0
    2fbe:	e2 59       	subi	r30, 0x92	; 146
    2fc0:	fa 4f       	sbci	r31, 0xFA	; 250
    2fc2:	80 81       	ld	r24, Z
    2fc4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2fc8:	85 ec       	ldi	r24, 0xC5	; 197
    2fca:	83 c0       	rjmp	.+262    	; 0x30d2 <__vector_36+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2fcc:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <twi_error>
    2fd0:	8b c0       	rjmp	.+278    	; 0x30e8 <__vector_36+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2fd2:	e0 91 6d 05 	lds	r30, 0x056D	; 0x80056d <twi_masterBufferIndex>
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	8e 0f       	add	r24, r30
    2fda:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <twi_masterBufferIndex>
    2fde:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2fe2:	f0 e0       	ldi	r31, 0x00	; 0
    2fe4:	e2 59       	subi	r30, 0x92	; 146
    2fe6:	fa 4f       	sbci	r31, 0xFA	; 250
    2fe8:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2fea:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <twi_masterBufferIndex>
    2fee:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <twi_masterBufferLength>
    2ff2:	6b c0       	rjmp	.+214    	; 0x30ca <__vector_36+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2ff4:	e0 91 6d 05 	lds	r30, 0x056D	; 0x80056d <twi_masterBufferIndex>
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	8e 0f       	add	r24, r30
    2ffc:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <twi_masterBufferIndex>
    3000:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3004:	f0 e0       	ldi	r31, 0x00	; 0
    3006:	e2 59       	subi	r30, 0x92	; 146
    3008:	fa 4f       	sbci	r31, 0xFA	; 250
    300a:	80 83       	st	Z, r24
	if (twi_sendStop)
    300c:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <twi_sendStop>
    3010:	81 11       	cpse	r24, r1
    3012:	6a c0       	rjmp	.+212    	; 0x30e8 <__vector_36+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3014:	81 e0       	ldi	r24, 0x01	; 1
    3016:	80 93 92 05 	sts	0x0592, r24	; 0x800592 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    301a:	84 ea       	ldi	r24, 0xA4	; 164
    301c:	5e c0       	rjmp	.+188    	; 0x30da <__vector_36+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    301e:	83 e0       	ldi	r24, 0x03	; 3
    3020:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    3024:	10 92 29 05 	sts	0x0529, r1	; 0x800529 <twi_rxBufferIndex>
    3028:	cf cf       	rjmp	.-98     	; 0x2fc8 <__vector_36+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    302a:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <twi_rxBufferIndex>
    302e:	80 32       	cpi	r24, 0x20	; 32
    3030:	08 f0       	brcs	.+2      	; 0x3034 <__vector_36+0x180>
    3032:	4e c0       	rjmp	.+156    	; 0x30d0 <__vector_36+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3034:	e0 91 29 05 	lds	r30, 0x0529	; 0x800529 <twi_rxBufferIndex>
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	8e 0f       	add	r24, r30
    303c:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <twi_rxBufferIndex>
    3040:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3044:	f0 e0       	ldi	r31, 0x00	; 0
    3046:	e6 5d       	subi	r30, 0xD6	; 214
    3048:	fa 4f       	sbci	r31, 0xFA	; 250
    304a:	80 83       	st	Z, r24
    304c:	bd cf       	rjmp	.-134    	; 0x2fc8 <__vector_36+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    304e:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3052:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <twi_rxBufferIndex>
    3056:	80 32       	cpi	r24, 0x20	; 32
    3058:	30 f4       	brcc	.+12     	; 0x3066 <__vector_36+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    305a:	e0 91 29 05 	lds	r30, 0x0529	; 0x800529 <twi_rxBufferIndex>
    305e:	f0 e0       	ldi	r31, 0x00	; 0
    3060:	e6 5d       	subi	r30, 0xD6	; 214
    3062:	fa 4f       	sbci	r31, 0xFA	; 250
    3064:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3066:	60 91 29 05 	lds	r22, 0x0529	; 0x800529 <twi_rxBufferIndex>
    306a:	70 e0       	ldi	r23, 0x00	; 0
    306c:	e0 91 8e 05 	lds	r30, 0x058E	; 0x80058e <twi_onSlaveReceive>
    3070:	f0 91 8f 05 	lds	r31, 0x058F	; 0x80058f <twi_onSlaveReceive+0x1>
    3074:	8a e2       	ldi	r24, 0x2A	; 42
    3076:	95 e0       	ldi	r25, 0x05	; 5
    3078:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    307a:	10 92 29 05 	sts	0x0529, r1	; 0x800529 <twi_rxBufferIndex>
      break;
    307e:	36 c0       	rjmp	.+108    	; 0x30ec <__vector_36+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3080:	84 e0       	ldi	r24, 0x04	; 4
    3082:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3086:	10 92 4b 05 	sts	0x054B, r1	; 0x80054b <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    308a:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    308e:	e0 91 90 05 	lds	r30, 0x0590	; 0x800590 <twi_onSlaveTransmit>
    3092:	f0 91 91 05 	lds	r31, 0x0591	; 0x800591 <twi_onSlaveTransmit+0x1>
    3096:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3098:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <twi_txBufferLength>
    309c:	81 11       	cpse	r24, r1
    309e:	05 c0       	rjmp	.+10     	; 0x30aa <__vector_36+0x1f6>
        twi_txBufferLength = 1;
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	80 93 4a 05 	sts	0x054A, r24	; 0x80054a <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    30a6:	10 92 4c 05 	sts	0x054C, r1	; 0x80054c <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    30aa:	e0 91 4b 05 	lds	r30, 0x054B	; 0x80054b <twi_txBufferIndex>
    30ae:	81 e0       	ldi	r24, 0x01	; 1
    30b0:	8e 0f       	add	r24, r30
    30b2:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <twi_txBufferIndex>
    30b6:	f0 e0       	ldi	r31, 0x00	; 0
    30b8:	e4 5b       	subi	r30, 0xB4	; 180
    30ba:	fa 4f       	sbci	r31, 0xFA	; 250
    30bc:	80 81       	ld	r24, Z
    30be:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    30c2:	90 91 4b 05 	lds	r25, 0x054B	; 0x80054b <twi_txBufferIndex>
    30c6:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <twi_txBufferLength>
    30ca:	98 17       	cp	r25, r24
    30cc:	08 f4       	brcc	.+2      	; 0x30d0 <__vector_36+0x21c>
    30ce:	7c cf       	rjmp	.-264    	; 0x2fc8 <__vector_36+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    30d0:	85 e8       	ldi	r24, 0x85	; 133
    30d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    30d6:	0a c0       	rjmp	.+20     	; 0x30ec <__vector_36+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    30d8:	85 ec       	ldi	r24, 0xC5	; 197
    30da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    30de:	10 92 95 05 	sts	0x0595, r1	; 0x800595 <twi_state>
      break;
    30e2:	04 c0       	rjmp	.+8      	; 0x30ec <__vector_36+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    30e4:	10 92 28 05 	sts	0x0528, r1	; 0x800528 <twi_error>
      twi_stop();
    30e8:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <twi_stop>
      break;
  }
}
    30ec:	ff 91       	pop	r31
    30ee:	ef 91       	pop	r30
    30f0:	bf 91       	pop	r27
    30f2:	af 91       	pop	r26
    30f4:	9f 91       	pop	r25
    30f6:	8f 91       	pop	r24
    30f8:	7f 91       	pop	r23
    30fa:	6f 91       	pop	r22
    30fc:	5f 91       	pop	r21
    30fe:	4f 91       	pop	r20
    3100:	3f 91       	pop	r19
    3102:	2f 91       	pop	r18
    3104:	0f 90       	pop	r0
    3106:	0f be       	out	0x3f, r0	; 63
    3108:	0f 90       	pop	r0
    310a:	1f 90       	pop	r1
    310c:	18 95       	reti

0000310e <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    310e:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <_ZN7TwoWire14rxBufferLengthE>
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	20 91 cb 05 	lds	r18, 0x05CB	; 0x8005cb <_ZN7TwoWire13rxBufferIndexE>
    3118:	82 1b       	sub	r24, r18
    311a:	91 09       	sbc	r25, r1
    311c:	08 95       	ret

0000311e <_ZN7TwoWire4readEv>:
    311e:	90 91 cb 05 	lds	r25, 0x05CB	; 0x8005cb <_ZN7TwoWire13rxBufferIndexE>
    3122:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <_ZN7TwoWire14rxBufferLengthE>
    3126:	98 17       	cp	r25, r24
    3128:	50 f4       	brcc	.+20     	; 0x313e <_ZN7TwoWire4readEv+0x20>
    312a:	e9 2f       	mov	r30, r25
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	e4 53       	subi	r30, 0x34	; 52
    3130:	fa 4f       	sbci	r31, 0xFA	; 250
    3132:	20 81       	ld	r18, Z
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	9f 5f       	subi	r25, 0xFF	; 255
    3138:	90 93 cb 05 	sts	0x05CB, r25	; 0x8005cb <_ZN7TwoWire13rxBufferIndexE>
    313c:	02 c0       	rjmp	.+4      	; 0x3142 <_ZN7TwoWire4readEv+0x24>
    313e:	2f ef       	ldi	r18, 0xFF	; 255
    3140:	3f ef       	ldi	r19, 0xFF	; 255
    3142:	c9 01       	movw	r24, r18
    3144:	08 95       	ret

00003146 <_ZN7TwoWire4peekEv>:
    3146:	e0 91 cb 05 	lds	r30, 0x05CB	; 0x8005cb <_ZN7TwoWire13rxBufferIndexE>
    314a:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <_ZN7TwoWire14rxBufferLengthE>
    314e:	e8 17       	cp	r30, r24
    3150:	30 f4       	brcc	.+12     	; 0x315e <_ZN7TwoWire4peekEv+0x18>
    3152:	f0 e0       	ldi	r31, 0x00	; 0
    3154:	e4 53       	subi	r30, 0x34	; 52
    3156:	fa 4f       	sbci	r31, 0xFA	; 250
    3158:	80 81       	ld	r24, Z
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	08 95       	ret
    315e:	8f ef       	ldi	r24, 0xFF	; 255
    3160:	9f ef       	ldi	r25, 0xFF	; 255
    3162:	08 95       	ret

00003164 <_ZN7TwoWire5flushEv>:
    3164:	08 95       	ret

00003166 <_ZN7TwoWire16onReceiveServiceEPhi>:
    3166:	cf 93       	push	r28
    3168:	df 93       	push	r29
    316a:	ec 01       	movw	r28, r24
    316c:	e0 91 a2 05 	lds	r30, 0x05A2	; 0x8005a2 <_ZN7TwoWire14user_onReceiveE>
    3170:	f0 91 a3 05 	lds	r31, 0x05A3	; 0x8005a3 <_ZN7TwoWire14user_onReceiveE+0x1>
    3174:	30 97       	sbiw	r30, 0x00	; 0
    3176:	f1 f0       	breq	.+60     	; 0x31b4 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3178:	90 91 cb 05 	lds	r25, 0x05CB	; 0x8005cb <_ZN7TwoWire13rxBufferIndexE>
    317c:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <_ZN7TwoWire14rxBufferLengthE>
    3180:	98 17       	cp	r25, r24
    3182:	c0 f0       	brcs	.+48     	; 0x31b4 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	29 2f       	mov	r18, r25
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	26 17       	cp	r18, r22
    318c:	37 07       	cpc	r19, r23
    318e:	54 f4       	brge	.+20     	; 0x31a4 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    3190:	de 01       	movw	r26, r28
    3192:	a2 0f       	add	r26, r18
    3194:	b3 1f       	adc	r27, r19
    3196:	4c 91       	ld	r20, X
    3198:	d9 01       	movw	r26, r18
    319a:	a4 53       	subi	r26, 0x34	; 52
    319c:	ba 4f       	sbci	r27, 0xFA	; 250
    319e:	4c 93       	st	X, r20
    31a0:	9f 5f       	subi	r25, 0xFF	; 255
    31a2:	f1 cf       	rjmp	.-30     	; 0x3186 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    31a4:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <_ZN7TwoWire13rxBufferIndexE>
    31a8:	60 93 ca 05 	sts	0x05CA, r22	; 0x8005ca <_ZN7TwoWire14rxBufferLengthE>
    31ac:	cb 01       	movw	r24, r22
    31ae:	df 91       	pop	r29
    31b0:	cf 91       	pop	r28
    31b2:	09 94       	ijmp
    31b4:	df 91       	pop	r29
    31b6:	cf 91       	pop	r28
    31b8:	08 95       	ret

000031ba <_ZN7TwoWire16onRequestServiceEv>:
    31ba:	e0 91 a4 05 	lds	r30, 0x05A4	; 0x8005a4 <_ZN7TwoWire14user_onRequestE>
    31be:	f0 91 a5 05 	lds	r31, 0x05A5	; 0x8005a5 <_ZN7TwoWire14user_onRequestE+0x1>
    31c2:	30 97       	sbiw	r30, 0x00	; 0
    31c4:	29 f0       	breq	.+10     	; 0x31d0 <_ZN7TwoWire16onRequestServiceEv+0x16>
    31c6:	10 92 a8 05 	sts	0x05A8, r1	; 0x8005a8 <_ZN7TwoWire13txBufferIndexE>
    31ca:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <_ZN7TwoWire14txBufferLengthE>
    31ce:	09 94       	ijmp
    31d0:	08 95       	ret

000031d2 <_ZN7TwoWire5writeEPKhj>:
    31d2:	cf 92       	push	r12
    31d4:	df 92       	push	r13
    31d6:	ef 92       	push	r14
    31d8:	ff 92       	push	r15
    31da:	0f 93       	push	r16
    31dc:	1f 93       	push	r17
    31de:	cf 93       	push	r28
    31e0:	df 93       	push	r29
    31e2:	7c 01       	movw	r14, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	8a 01       	movw	r16, r20
    31e8:	20 91 a6 05 	lds	r18, 0x05A6	; 0x8005a6 <_ZN7TwoWire12transmittingE>
    31ec:	22 23       	and	r18, r18
    31ee:	89 f0       	breq	.+34     	; 0x3212 <_ZN7TwoWire5writeEPKhj+0x40>
    31f0:	eb 01       	movw	r28, r22
    31f2:	6b 01       	movw	r12, r22
    31f4:	c4 0e       	add	r12, r20
    31f6:	d5 1e       	adc	r13, r21
    31f8:	cc 15       	cp	r28, r12
    31fa:	dd 05       	cpc	r29, r13
    31fc:	69 f0       	breq	.+26     	; 0x3218 <_ZN7TwoWire5writeEPKhj+0x46>
    31fe:	69 91       	ld	r22, Y+
    3200:	d7 01       	movw	r26, r14
    3202:	ed 91       	ld	r30, X+
    3204:	fc 91       	ld	r31, X
    3206:	01 90       	ld	r0, Z+
    3208:	f0 81       	ld	r31, Z
    320a:	e0 2d       	mov	r30, r0
    320c:	c7 01       	movw	r24, r14
    320e:	09 95       	icall
    3210:	f3 cf       	rjmp	.-26     	; 0x31f8 <_ZN7TwoWire5writeEPKhj+0x26>
    3212:	64 2f       	mov	r22, r20
    3214:	0e 94 18 17 	call	0x2e30	; 0x2e30 <twi_transmit>
    3218:	c8 01       	movw	r24, r16
    321a:	df 91       	pop	r29
    321c:	cf 91       	pop	r28
    321e:	1f 91       	pop	r17
    3220:	0f 91       	pop	r16
    3222:	ff 90       	pop	r15
    3224:	ef 90       	pop	r14
    3226:	df 90       	pop	r13
    3228:	cf 90       	pop	r12
    322a:	08 95       	ret

0000322c <_ZN7TwoWire5writeEh>:
    322c:	cf 93       	push	r28
    322e:	df 93       	push	r29
    3230:	1f 92       	push	r1
    3232:	cd b7       	in	r28, 0x3d	; 61
    3234:	de b7       	in	r29, 0x3e	; 62
    3236:	69 83       	std	Y+1, r22	; 0x01
    3238:	20 91 a6 05 	lds	r18, 0x05A6	; 0x8005a6 <_ZN7TwoWire12transmittingE>
    323c:	22 23       	and	r18, r18
    323e:	d1 f0       	breq	.+52     	; 0x3274 <_ZN7TwoWire5writeEh+0x48>
    3240:	20 91 a7 05 	lds	r18, 0x05A7	; 0x8005a7 <_ZN7TwoWire14txBufferLengthE>
    3244:	20 32       	cpi	r18, 0x20	; 32
    3246:	40 f0       	brcs	.+16     	; 0x3258 <_ZN7TwoWire5writeEh+0x2c>
    3248:	21 e0       	ldi	r18, 0x01	; 1
    324a:	30 e0       	ldi	r19, 0x00	; 0
    324c:	fc 01       	movw	r30, r24
    324e:	33 83       	std	Z+3, r19	; 0x03
    3250:	22 83       	std	Z+2, r18	; 0x02
    3252:	80 e0       	ldi	r24, 0x00	; 0
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	15 c0       	rjmp	.+42     	; 0x3282 <_ZN7TwoWire5writeEh+0x56>
    3258:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <_ZN7TwoWire13txBufferIndexE>
    325c:	e8 2f       	mov	r30, r24
    325e:	f0 e0       	ldi	r31, 0x00	; 0
    3260:	e7 55       	subi	r30, 0x57	; 87
    3262:	fa 4f       	sbci	r31, 0xFA	; 250
    3264:	99 81       	ldd	r25, Y+1	; 0x01
    3266:	90 83       	st	Z, r25
    3268:	8f 5f       	subi	r24, 0xFF	; 255
    326a:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <_ZN7TwoWire13txBufferIndexE>
    326e:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <_ZN7TwoWire14txBufferLengthE>
    3272:	05 c0       	rjmp	.+10     	; 0x327e <_ZN7TwoWire5writeEh+0x52>
    3274:	61 e0       	ldi	r22, 0x01	; 1
    3276:	ce 01       	movw	r24, r28
    3278:	01 96       	adiw	r24, 0x01	; 1
    327a:	0e 94 18 17 	call	0x2e30	; 0x2e30 <twi_transmit>
    327e:	81 e0       	ldi	r24, 0x01	; 1
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	0f 90       	pop	r0
    3284:	df 91       	pop	r29
    3286:	cf 91       	pop	r28
    3288:	08 95       	ret

0000328a <_ZN7TwoWireC1Ev>:
    328a:	fc 01       	movw	r30, r24
    328c:	13 82       	std	Z+3, r1	; 0x03
    328e:	12 82       	std	Z+2, r1	; 0x02
    3290:	88 ee       	ldi	r24, 0xE8	; 232
    3292:	93 e0       	ldi	r25, 0x03	; 3
    3294:	a0 e0       	ldi	r26, 0x00	; 0
    3296:	b0 e0       	ldi	r27, 0x00	; 0
    3298:	84 83       	std	Z+4, r24	; 0x04
    329a:	95 83       	std	Z+5, r25	; 0x05
    329c:	a6 83       	std	Z+6, r26	; 0x06
    329e:	b7 83       	std	Z+7, r27	; 0x07
    32a0:	83 e0       	ldi	r24, 0x03	; 3
    32a2:	93 e0       	ldi	r25, 0x03	; 3
    32a4:	91 83       	std	Z+1, r25	; 0x01
    32a6:	80 83       	st	Z, r24
    32a8:	08 95       	ret

000032aa <_ZN7TwoWire5beginEv>:
    32aa:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <_ZN7TwoWire13rxBufferIndexE>
    32ae:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <_ZN7TwoWire14rxBufferLengthE>
    32b2:	10 92 a8 05 	sts	0x05A8, r1	; 0x8005a8 <_ZN7TwoWire13txBufferIndexE>
    32b6:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <_ZN7TwoWire14txBufferLengthE>
    32ba:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <twi_init>
    32be:	8d ed       	ldi	r24, 0xDD	; 221
    32c0:	98 e1       	ldi	r25, 0x18	; 24
    32c2:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <twi_attachSlaveTxEvent>
    32c6:	83 eb       	ldi	r24, 0xB3	; 179
    32c8:	98 e1       	ldi	r25, 0x18	; 24
    32ca:	0c 94 40 17 	jmp	0x2e80	; 0x2e80 <twi_attachSlaveRxEvent>

000032ce <_ZN7TwoWire17beginTransmissionEh>:
    32ce:	81 e0       	ldi	r24, 0x01	; 1
    32d0:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <_ZN7TwoWire12transmittingE>
    32d4:	60 93 c9 05 	sts	0x05C9, r22	; 0x8005c9 <_ZN7TwoWire9txAddressE>
    32d8:	10 92 a8 05 	sts	0x05A8, r1	; 0x8005a8 <_ZN7TwoWire13txBufferIndexE>
    32dc:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <_ZN7TwoWire14txBufferLengthE>
    32e0:	08 95       	ret

000032e2 <_ZN7TwoWire15endTransmissionEh>:
    32e2:	0f 93       	push	r16
    32e4:	06 2f       	mov	r16, r22
    32e6:	21 e0       	ldi	r18, 0x01	; 1
    32e8:	40 91 a7 05 	lds	r20, 0x05A7	; 0x8005a7 <_ZN7TwoWire14txBufferLengthE>
    32ec:	69 ea       	ldi	r22, 0xA9	; 169
    32ee:	75 e0       	ldi	r23, 0x05	; 5
    32f0:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <_ZN7TwoWire9txAddressE>
    32f4:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <twi_writeTo>
    32f8:	10 92 a8 05 	sts	0x05A8, r1	; 0x8005a8 <_ZN7TwoWire13txBufferIndexE>
    32fc:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <_ZN7TwoWire14txBufferLengthE>
    3300:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <_ZN7TwoWire12transmittingE>
    3304:	0f 91       	pop	r16
    3306:	08 95       	ret

00003308 <_ZN7TwoWire11requestFromEhhmhh>:
    3308:	4f 92       	push	r4
    330a:	5f 92       	push	r5
    330c:	6f 92       	push	r6
    330e:	7f 92       	push	r7
    3310:	af 92       	push	r10
    3312:	bf 92       	push	r11
    3314:	cf 92       	push	r12
    3316:	ef 92       	push	r14
    3318:	ff 92       	push	r15
    331a:	0f 93       	push	r16
    331c:	1f 93       	push	r17
    331e:	cf 93       	push	r28
    3320:	df 93       	push	r29
    3322:	5c 01       	movw	r10, r24
    3324:	f6 2e       	mov	r15, r22
    3326:	d4 2f       	mov	r29, r20
    3328:	28 01       	movw	r4, r16
    332a:	39 01       	movw	r6, r18
    332c:	ee 20       	and	r14, r14
    332e:	21 f1       	breq	.+72     	; 0x3378 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    3330:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN7TwoWire17beginTransmissionEh>
    3334:	ce 2d       	mov	r28, r14
    3336:	c4 30       	cpi	r28, 0x04	; 4
    3338:	08 f0       	brcs	.+2      	; 0x333c <_ZN7TwoWire11requestFromEhhmhh+0x34>
    333a:	c3 e0       	ldi	r28, 0x03	; 3
    333c:	c1 50       	subi	r28, 0x01	; 1
    333e:	c0 f0       	brcs	.+48     	; 0x3370 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    3340:	28 e0       	ldi	r18, 0x08	; 8
    3342:	c2 9f       	mul	r28, r18
    3344:	c0 01       	movw	r24, r0
    3346:	11 24       	eor	r1, r1
    3348:	a3 01       	movw	r20, r6
    334a:	92 01       	movw	r18, r4
    334c:	04 c0       	rjmp	.+8      	; 0x3356 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    334e:	56 95       	lsr	r21
    3350:	47 95       	ror	r20
    3352:	37 95       	ror	r19
    3354:	27 95       	ror	r18
    3356:	8a 95       	dec	r24
    3358:	d2 f7       	brpl	.-12     	; 0x334e <_ZN7TwoWire11requestFromEhhmhh+0x46>
    335a:	ca 01       	movw	r24, r20
    335c:	b9 01       	movw	r22, r18
    335e:	d5 01       	movw	r26, r10
    3360:	ed 91       	ld	r30, X+
    3362:	fc 91       	ld	r31, X
    3364:	01 90       	ld	r0, Z+
    3366:	f0 81       	ld	r31, Z
    3368:	e0 2d       	mov	r30, r0
    336a:	c5 01       	movw	r24, r10
    336c:	09 95       	icall
    336e:	e6 cf       	rjmp	.-52     	; 0x333c <_ZN7TwoWire11requestFromEhhmhh+0x34>
    3370:	60 e0       	ldi	r22, 0x00	; 0
    3372:	c5 01       	movw	r24, r10
    3374:	0e 94 71 19 	call	0x32e2	; 0x32e2 <_ZN7TwoWire15endTransmissionEh>
    3378:	4d 2f       	mov	r20, r29
    337a:	d1 32       	cpi	r29, 0x21	; 33
    337c:	08 f0       	brcs	.+2      	; 0x3380 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    337e:	40 e2       	ldi	r20, 0x20	; 32
    3380:	2c 2d       	mov	r18, r12
    3382:	6c ec       	ldi	r22, 0xCC	; 204
    3384:	75 e0       	ldi	r23, 0x05	; 5
    3386:	8f 2d       	mov	r24, r15
    3388:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <twi_readFrom>
    338c:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <_ZN7TwoWire13rxBufferIndexE>
    3390:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <_ZN7TwoWire14rxBufferLengthE>
    3394:	df 91       	pop	r29
    3396:	cf 91       	pop	r28
    3398:	1f 91       	pop	r17
    339a:	0f 91       	pop	r16
    339c:	ff 90       	pop	r15
    339e:	ef 90       	pop	r14
    33a0:	cf 90       	pop	r12
    33a2:	bf 90       	pop	r11
    33a4:	af 90       	pop	r10
    33a6:	7f 90       	pop	r7
    33a8:	6f 90       	pop	r6
    33aa:	5f 90       	pop	r5
    33ac:	4f 90       	pop	r4
    33ae:	08 95       	ret

000033b0 <_ZN7TwoWire11requestFromEhhh>:
    33b0:	cf 92       	push	r12
    33b2:	ef 92       	push	r14
    33b4:	0f 93       	push	r16
    33b6:	1f 93       	push	r17
    33b8:	c2 2e       	mov	r12, r18
    33ba:	e1 2c       	mov	r14, r1
    33bc:	00 e0       	ldi	r16, 0x00	; 0
    33be:	10 e0       	ldi	r17, 0x00	; 0
    33c0:	98 01       	movw	r18, r16
    33c2:	0e 94 84 19 	call	0x3308	; 0x3308 <_ZN7TwoWire11requestFromEhhmhh>
    33c6:	1f 91       	pop	r17
    33c8:	0f 91       	pop	r16
    33ca:	ef 90       	pop	r14
    33cc:	cf 90       	pop	r12
    33ce:	08 95       	ret

000033d0 <_ZN7TwoWire11requestFromEii>:
    33d0:	21 e0       	ldi	r18, 0x01	; 1
    33d2:	0c 94 d8 19 	jmp	0x33b0	; 0x33b0 <_ZN7TwoWire11requestFromEhhh>

000033d6 <_ZN7TwoWire15endTransmissionEv>:
    33d6:	61 e0       	ldi	r22, 0x01	; 1
    33d8:	0c 94 71 19 	jmp	0x32e2	; 0x32e2 <_ZN7TwoWire15endTransmissionEh>

000033dc <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    33dc:	86 e9       	ldi	r24, 0x96	; 150
    33de:	95 e0       	ldi	r25, 0x05	; 5
    33e0:	0c 94 45 19 	jmp	0x328a	; 0x328a <_ZN7TwoWireC1Ev>

000033e4 <__subsf3>:
    33e4:	50 58       	subi	r21, 0x80	; 128

000033e6 <__addsf3>:
    33e6:	bb 27       	eor	r27, r27
    33e8:	aa 27       	eor	r26, r26
    33ea:	0e 94 0a 1a 	call	0x3414	; 0x3414 <__addsf3x>
    33ee:	0c 94 84 1b 	jmp	0x3708	; 0x3708 <__fp_round>
    33f2:	0e 94 76 1b 	call	0x36ec	; 0x36ec <__fp_pscA>
    33f6:	38 f0       	brcs	.+14     	; 0x3406 <__addsf3+0x20>
    33f8:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <__fp_pscB>
    33fc:	20 f0       	brcs	.+8      	; 0x3406 <__addsf3+0x20>
    33fe:	39 f4       	brne	.+14     	; 0x340e <__addsf3+0x28>
    3400:	9f 3f       	cpi	r25, 0xFF	; 255
    3402:	19 f4       	brne	.+6      	; 0x340a <__addsf3+0x24>
    3404:	26 f4       	brtc	.+8      	; 0x340e <__addsf3+0x28>
    3406:	0c 94 73 1b 	jmp	0x36e6	; 0x36e6 <__fp_nan>
    340a:	0e f4       	brtc	.+2      	; 0x340e <__addsf3+0x28>
    340c:	e0 95       	com	r30
    340e:	e7 fb       	bst	r30, 7
    3410:	0c 94 6d 1b 	jmp	0x36da	; 0x36da <__fp_inf>

00003414 <__addsf3x>:
    3414:	e9 2f       	mov	r30, r25
    3416:	0e 94 95 1b 	call	0x372a	; 0x372a <__fp_split3>
    341a:	58 f3       	brcs	.-42     	; 0x33f2 <__addsf3+0xc>
    341c:	ba 17       	cp	r27, r26
    341e:	62 07       	cpc	r22, r18
    3420:	73 07       	cpc	r23, r19
    3422:	84 07       	cpc	r24, r20
    3424:	95 07       	cpc	r25, r21
    3426:	20 f0       	brcs	.+8      	; 0x3430 <__addsf3x+0x1c>
    3428:	79 f4       	brne	.+30     	; 0x3448 <__addsf3x+0x34>
    342a:	a6 f5       	brtc	.+104    	; 0x3494 <__addsf3x+0x80>
    342c:	0c 94 b7 1b 	jmp	0x376e	; 0x376e <__fp_zero>
    3430:	0e f4       	brtc	.+2      	; 0x3434 <__addsf3x+0x20>
    3432:	e0 95       	com	r30
    3434:	0b 2e       	mov	r0, r27
    3436:	ba 2f       	mov	r27, r26
    3438:	a0 2d       	mov	r26, r0
    343a:	0b 01       	movw	r0, r22
    343c:	b9 01       	movw	r22, r18
    343e:	90 01       	movw	r18, r0
    3440:	0c 01       	movw	r0, r24
    3442:	ca 01       	movw	r24, r20
    3444:	a0 01       	movw	r20, r0
    3446:	11 24       	eor	r1, r1
    3448:	ff 27       	eor	r31, r31
    344a:	59 1b       	sub	r21, r25
    344c:	99 f0       	breq	.+38     	; 0x3474 <__addsf3x+0x60>
    344e:	59 3f       	cpi	r21, 0xF9	; 249
    3450:	50 f4       	brcc	.+20     	; 0x3466 <__addsf3x+0x52>
    3452:	50 3e       	cpi	r21, 0xE0	; 224
    3454:	68 f1       	brcs	.+90     	; 0x34b0 <__addsf3x+0x9c>
    3456:	1a 16       	cp	r1, r26
    3458:	f0 40       	sbci	r31, 0x00	; 0
    345a:	a2 2f       	mov	r26, r18
    345c:	23 2f       	mov	r18, r19
    345e:	34 2f       	mov	r19, r20
    3460:	44 27       	eor	r20, r20
    3462:	58 5f       	subi	r21, 0xF8	; 248
    3464:	f3 cf       	rjmp	.-26     	; 0x344c <__addsf3x+0x38>
    3466:	46 95       	lsr	r20
    3468:	37 95       	ror	r19
    346a:	27 95       	ror	r18
    346c:	a7 95       	ror	r26
    346e:	f0 40       	sbci	r31, 0x00	; 0
    3470:	53 95       	inc	r21
    3472:	c9 f7       	brne	.-14     	; 0x3466 <__addsf3x+0x52>
    3474:	7e f4       	brtc	.+30     	; 0x3494 <__addsf3x+0x80>
    3476:	1f 16       	cp	r1, r31
    3478:	ba 0b       	sbc	r27, r26
    347a:	62 0b       	sbc	r22, r18
    347c:	73 0b       	sbc	r23, r19
    347e:	84 0b       	sbc	r24, r20
    3480:	ba f0       	brmi	.+46     	; 0x34b0 <__addsf3x+0x9c>
    3482:	91 50       	subi	r25, 0x01	; 1
    3484:	a1 f0       	breq	.+40     	; 0x34ae <__addsf3x+0x9a>
    3486:	ff 0f       	add	r31, r31
    3488:	bb 1f       	adc	r27, r27
    348a:	66 1f       	adc	r22, r22
    348c:	77 1f       	adc	r23, r23
    348e:	88 1f       	adc	r24, r24
    3490:	c2 f7       	brpl	.-16     	; 0x3482 <__addsf3x+0x6e>
    3492:	0e c0       	rjmp	.+28     	; 0x34b0 <__addsf3x+0x9c>
    3494:	ba 0f       	add	r27, r26
    3496:	62 1f       	adc	r22, r18
    3498:	73 1f       	adc	r23, r19
    349a:	84 1f       	adc	r24, r20
    349c:	48 f4       	brcc	.+18     	; 0x34b0 <__addsf3x+0x9c>
    349e:	87 95       	ror	r24
    34a0:	77 95       	ror	r23
    34a2:	67 95       	ror	r22
    34a4:	b7 95       	ror	r27
    34a6:	f7 95       	ror	r31
    34a8:	9e 3f       	cpi	r25, 0xFE	; 254
    34aa:	08 f0       	brcs	.+2      	; 0x34ae <__addsf3x+0x9a>
    34ac:	b0 cf       	rjmp	.-160    	; 0x340e <__addsf3+0x28>
    34ae:	93 95       	inc	r25
    34b0:	88 0f       	add	r24, r24
    34b2:	08 f0       	brcs	.+2      	; 0x34b6 <__addsf3x+0xa2>
    34b4:	99 27       	eor	r25, r25
    34b6:	ee 0f       	add	r30, r30
    34b8:	97 95       	ror	r25
    34ba:	87 95       	ror	r24
    34bc:	08 95       	ret

000034be <__cmpsf2>:
    34be:	0e 94 49 1b 	call	0x3692	; 0x3692 <__fp_cmp>
    34c2:	08 f4       	brcc	.+2      	; 0x34c6 <__cmpsf2+0x8>
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	08 95       	ret

000034c8 <__divsf3>:
    34c8:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__divsf3x>
    34cc:	0c 94 84 1b 	jmp	0x3708	; 0x3708 <__fp_round>
    34d0:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <__fp_pscB>
    34d4:	58 f0       	brcs	.+22     	; 0x34ec <__divsf3+0x24>
    34d6:	0e 94 76 1b 	call	0x36ec	; 0x36ec <__fp_pscA>
    34da:	40 f0       	brcs	.+16     	; 0x34ec <__divsf3+0x24>
    34dc:	29 f4       	brne	.+10     	; 0x34e8 <__divsf3+0x20>
    34de:	5f 3f       	cpi	r21, 0xFF	; 255
    34e0:	29 f0       	breq	.+10     	; 0x34ec <__divsf3+0x24>
    34e2:	0c 94 6d 1b 	jmp	0x36da	; 0x36da <__fp_inf>
    34e6:	51 11       	cpse	r21, r1
    34e8:	0c 94 b8 1b 	jmp	0x3770	; 0x3770 <__fp_szero>
    34ec:	0c 94 73 1b 	jmp	0x36e6	; 0x36e6 <__fp_nan>

000034f0 <__divsf3x>:
    34f0:	0e 94 95 1b 	call	0x372a	; 0x372a <__fp_split3>
    34f4:	68 f3       	brcs	.-38     	; 0x34d0 <__divsf3+0x8>

000034f6 <__divsf3_pse>:
    34f6:	99 23       	and	r25, r25
    34f8:	b1 f3       	breq	.-20     	; 0x34e6 <__divsf3+0x1e>
    34fa:	55 23       	and	r21, r21
    34fc:	91 f3       	breq	.-28     	; 0x34e2 <__divsf3+0x1a>
    34fe:	95 1b       	sub	r25, r21
    3500:	55 0b       	sbc	r21, r21
    3502:	bb 27       	eor	r27, r27
    3504:	aa 27       	eor	r26, r26
    3506:	62 17       	cp	r22, r18
    3508:	73 07       	cpc	r23, r19
    350a:	84 07       	cpc	r24, r20
    350c:	38 f0       	brcs	.+14     	; 0x351c <__divsf3_pse+0x26>
    350e:	9f 5f       	subi	r25, 0xFF	; 255
    3510:	5f 4f       	sbci	r21, 0xFF	; 255
    3512:	22 0f       	add	r18, r18
    3514:	33 1f       	adc	r19, r19
    3516:	44 1f       	adc	r20, r20
    3518:	aa 1f       	adc	r26, r26
    351a:	a9 f3       	breq	.-22     	; 0x3506 <__divsf3_pse+0x10>
    351c:	35 d0       	rcall	.+106    	; 0x3588 <__divsf3_pse+0x92>
    351e:	0e 2e       	mov	r0, r30
    3520:	3a f0       	brmi	.+14     	; 0x3530 <__divsf3_pse+0x3a>
    3522:	e0 e8       	ldi	r30, 0x80	; 128
    3524:	32 d0       	rcall	.+100    	; 0x358a <__divsf3_pse+0x94>
    3526:	91 50       	subi	r25, 0x01	; 1
    3528:	50 40       	sbci	r21, 0x00	; 0
    352a:	e6 95       	lsr	r30
    352c:	00 1c       	adc	r0, r0
    352e:	ca f7       	brpl	.-14     	; 0x3522 <__divsf3_pse+0x2c>
    3530:	2b d0       	rcall	.+86     	; 0x3588 <__divsf3_pse+0x92>
    3532:	fe 2f       	mov	r31, r30
    3534:	29 d0       	rcall	.+82     	; 0x3588 <__divsf3_pse+0x92>
    3536:	66 0f       	add	r22, r22
    3538:	77 1f       	adc	r23, r23
    353a:	88 1f       	adc	r24, r24
    353c:	bb 1f       	adc	r27, r27
    353e:	26 17       	cp	r18, r22
    3540:	37 07       	cpc	r19, r23
    3542:	48 07       	cpc	r20, r24
    3544:	ab 07       	cpc	r26, r27
    3546:	b0 e8       	ldi	r27, 0x80	; 128
    3548:	09 f0       	breq	.+2      	; 0x354c <__divsf3_pse+0x56>
    354a:	bb 0b       	sbc	r27, r27
    354c:	80 2d       	mov	r24, r0
    354e:	bf 01       	movw	r22, r30
    3550:	ff 27       	eor	r31, r31
    3552:	93 58       	subi	r25, 0x83	; 131
    3554:	5f 4f       	sbci	r21, 0xFF	; 255
    3556:	3a f0       	brmi	.+14     	; 0x3566 <__divsf3_pse+0x70>
    3558:	9e 3f       	cpi	r25, 0xFE	; 254
    355a:	51 05       	cpc	r21, r1
    355c:	78 f0       	brcs	.+30     	; 0x357c <__divsf3_pse+0x86>
    355e:	0c 94 6d 1b 	jmp	0x36da	; 0x36da <__fp_inf>
    3562:	0c 94 b8 1b 	jmp	0x3770	; 0x3770 <__fp_szero>
    3566:	5f 3f       	cpi	r21, 0xFF	; 255
    3568:	e4 f3       	brlt	.-8      	; 0x3562 <__divsf3_pse+0x6c>
    356a:	98 3e       	cpi	r25, 0xE8	; 232
    356c:	d4 f3       	brlt	.-12     	; 0x3562 <__divsf3_pse+0x6c>
    356e:	86 95       	lsr	r24
    3570:	77 95       	ror	r23
    3572:	67 95       	ror	r22
    3574:	b7 95       	ror	r27
    3576:	f7 95       	ror	r31
    3578:	9f 5f       	subi	r25, 0xFF	; 255
    357a:	c9 f7       	brne	.-14     	; 0x356e <__divsf3_pse+0x78>
    357c:	88 0f       	add	r24, r24
    357e:	91 1d       	adc	r25, r1
    3580:	96 95       	lsr	r25
    3582:	87 95       	ror	r24
    3584:	97 f9       	bld	r25, 7
    3586:	08 95       	ret
    3588:	e1 e0       	ldi	r30, 0x01	; 1
    358a:	66 0f       	add	r22, r22
    358c:	77 1f       	adc	r23, r23
    358e:	88 1f       	adc	r24, r24
    3590:	bb 1f       	adc	r27, r27
    3592:	62 17       	cp	r22, r18
    3594:	73 07       	cpc	r23, r19
    3596:	84 07       	cpc	r24, r20
    3598:	ba 07       	cpc	r27, r26
    359a:	20 f0       	brcs	.+8      	; 0x35a4 <__divsf3_pse+0xae>
    359c:	62 1b       	sub	r22, r18
    359e:	73 0b       	sbc	r23, r19
    35a0:	84 0b       	sbc	r24, r20
    35a2:	ba 0b       	sbc	r27, r26
    35a4:	ee 1f       	adc	r30, r30
    35a6:	88 f7       	brcc	.-30     	; 0x358a <__divsf3_pse+0x94>
    35a8:	e0 95       	com	r30
    35aa:	08 95       	ret

000035ac <__fixsfsi>:
    35ac:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <__fixunssfsi>
    35b0:	68 94       	set
    35b2:	b1 11       	cpse	r27, r1
    35b4:	0c 94 b8 1b 	jmp	0x3770	; 0x3770 <__fp_szero>
    35b8:	08 95       	ret

000035ba <__fixunssfsi>:
    35ba:	0e 94 9d 1b 	call	0x373a	; 0x373a <__fp_splitA>
    35be:	88 f0       	brcs	.+34     	; 0x35e2 <__fixunssfsi+0x28>
    35c0:	9f 57       	subi	r25, 0x7F	; 127
    35c2:	98 f0       	brcs	.+38     	; 0x35ea <__fixunssfsi+0x30>
    35c4:	b9 2f       	mov	r27, r25
    35c6:	99 27       	eor	r25, r25
    35c8:	b7 51       	subi	r27, 0x17	; 23
    35ca:	b0 f0       	brcs	.+44     	; 0x35f8 <__fixunssfsi+0x3e>
    35cc:	e1 f0       	breq	.+56     	; 0x3606 <__fixunssfsi+0x4c>
    35ce:	66 0f       	add	r22, r22
    35d0:	77 1f       	adc	r23, r23
    35d2:	88 1f       	adc	r24, r24
    35d4:	99 1f       	adc	r25, r25
    35d6:	1a f0       	brmi	.+6      	; 0x35de <__fixunssfsi+0x24>
    35d8:	ba 95       	dec	r27
    35da:	c9 f7       	brne	.-14     	; 0x35ce <__fixunssfsi+0x14>
    35dc:	14 c0       	rjmp	.+40     	; 0x3606 <__fixunssfsi+0x4c>
    35de:	b1 30       	cpi	r27, 0x01	; 1
    35e0:	91 f0       	breq	.+36     	; 0x3606 <__fixunssfsi+0x4c>
    35e2:	0e 94 b7 1b 	call	0x376e	; 0x376e <__fp_zero>
    35e6:	b1 e0       	ldi	r27, 0x01	; 1
    35e8:	08 95       	ret
    35ea:	0c 94 b7 1b 	jmp	0x376e	; 0x376e <__fp_zero>
    35ee:	67 2f       	mov	r22, r23
    35f0:	78 2f       	mov	r23, r24
    35f2:	88 27       	eor	r24, r24
    35f4:	b8 5f       	subi	r27, 0xF8	; 248
    35f6:	39 f0       	breq	.+14     	; 0x3606 <__fixunssfsi+0x4c>
    35f8:	b9 3f       	cpi	r27, 0xF9	; 249
    35fa:	cc f3       	brlt	.-14     	; 0x35ee <__fixunssfsi+0x34>
    35fc:	86 95       	lsr	r24
    35fe:	77 95       	ror	r23
    3600:	67 95       	ror	r22
    3602:	b3 95       	inc	r27
    3604:	d9 f7       	brne	.-10     	; 0x35fc <__fixunssfsi+0x42>
    3606:	3e f4       	brtc	.+14     	; 0x3616 <__fixunssfsi+0x5c>
    3608:	90 95       	com	r25
    360a:	80 95       	com	r24
    360c:	70 95       	com	r23
    360e:	61 95       	neg	r22
    3610:	7f 4f       	sbci	r23, 0xFF	; 255
    3612:	8f 4f       	sbci	r24, 0xFF	; 255
    3614:	9f 4f       	sbci	r25, 0xFF	; 255
    3616:	08 95       	ret

00003618 <__floatunsisf>:
    3618:	e8 94       	clt
    361a:	09 c0       	rjmp	.+18     	; 0x362e <__floatsisf+0x12>

0000361c <__floatsisf>:
    361c:	97 fb       	bst	r25, 7
    361e:	3e f4       	brtc	.+14     	; 0x362e <__floatsisf+0x12>
    3620:	90 95       	com	r25
    3622:	80 95       	com	r24
    3624:	70 95       	com	r23
    3626:	61 95       	neg	r22
    3628:	7f 4f       	sbci	r23, 0xFF	; 255
    362a:	8f 4f       	sbci	r24, 0xFF	; 255
    362c:	9f 4f       	sbci	r25, 0xFF	; 255
    362e:	99 23       	and	r25, r25
    3630:	a9 f0       	breq	.+42     	; 0x365c <__floatsisf+0x40>
    3632:	f9 2f       	mov	r31, r25
    3634:	96 e9       	ldi	r25, 0x96	; 150
    3636:	bb 27       	eor	r27, r27
    3638:	93 95       	inc	r25
    363a:	f6 95       	lsr	r31
    363c:	87 95       	ror	r24
    363e:	77 95       	ror	r23
    3640:	67 95       	ror	r22
    3642:	b7 95       	ror	r27
    3644:	f1 11       	cpse	r31, r1
    3646:	f8 cf       	rjmp	.-16     	; 0x3638 <__floatsisf+0x1c>
    3648:	fa f4       	brpl	.+62     	; 0x3688 <__floatsisf+0x6c>
    364a:	bb 0f       	add	r27, r27
    364c:	11 f4       	brne	.+4      	; 0x3652 <__floatsisf+0x36>
    364e:	60 ff       	sbrs	r22, 0
    3650:	1b c0       	rjmp	.+54     	; 0x3688 <__floatsisf+0x6c>
    3652:	6f 5f       	subi	r22, 0xFF	; 255
    3654:	7f 4f       	sbci	r23, 0xFF	; 255
    3656:	8f 4f       	sbci	r24, 0xFF	; 255
    3658:	9f 4f       	sbci	r25, 0xFF	; 255
    365a:	16 c0       	rjmp	.+44     	; 0x3688 <__floatsisf+0x6c>
    365c:	88 23       	and	r24, r24
    365e:	11 f0       	breq	.+4      	; 0x3664 <__floatsisf+0x48>
    3660:	96 e9       	ldi	r25, 0x96	; 150
    3662:	11 c0       	rjmp	.+34     	; 0x3686 <__floatsisf+0x6a>
    3664:	77 23       	and	r23, r23
    3666:	21 f0       	breq	.+8      	; 0x3670 <__floatsisf+0x54>
    3668:	9e e8       	ldi	r25, 0x8E	; 142
    366a:	87 2f       	mov	r24, r23
    366c:	76 2f       	mov	r23, r22
    366e:	05 c0       	rjmp	.+10     	; 0x367a <__floatsisf+0x5e>
    3670:	66 23       	and	r22, r22
    3672:	71 f0       	breq	.+28     	; 0x3690 <__floatsisf+0x74>
    3674:	96 e8       	ldi	r25, 0x86	; 134
    3676:	86 2f       	mov	r24, r22
    3678:	70 e0       	ldi	r23, 0x00	; 0
    367a:	60 e0       	ldi	r22, 0x00	; 0
    367c:	2a f0       	brmi	.+10     	; 0x3688 <__floatsisf+0x6c>
    367e:	9a 95       	dec	r25
    3680:	66 0f       	add	r22, r22
    3682:	77 1f       	adc	r23, r23
    3684:	88 1f       	adc	r24, r24
    3686:	da f7       	brpl	.-10     	; 0x367e <__floatsisf+0x62>
    3688:	88 0f       	add	r24, r24
    368a:	96 95       	lsr	r25
    368c:	87 95       	ror	r24
    368e:	97 f9       	bld	r25, 7
    3690:	08 95       	ret

00003692 <__fp_cmp>:
    3692:	99 0f       	add	r25, r25
    3694:	00 08       	sbc	r0, r0
    3696:	55 0f       	add	r21, r21
    3698:	aa 0b       	sbc	r26, r26
    369a:	e0 e8       	ldi	r30, 0x80	; 128
    369c:	fe ef       	ldi	r31, 0xFE	; 254
    369e:	16 16       	cp	r1, r22
    36a0:	17 06       	cpc	r1, r23
    36a2:	e8 07       	cpc	r30, r24
    36a4:	f9 07       	cpc	r31, r25
    36a6:	c0 f0       	brcs	.+48     	; 0x36d8 <__fp_cmp+0x46>
    36a8:	12 16       	cp	r1, r18
    36aa:	13 06       	cpc	r1, r19
    36ac:	e4 07       	cpc	r30, r20
    36ae:	f5 07       	cpc	r31, r21
    36b0:	98 f0       	brcs	.+38     	; 0x36d8 <__fp_cmp+0x46>
    36b2:	62 1b       	sub	r22, r18
    36b4:	73 0b       	sbc	r23, r19
    36b6:	84 0b       	sbc	r24, r20
    36b8:	95 0b       	sbc	r25, r21
    36ba:	39 f4       	brne	.+14     	; 0x36ca <__fp_cmp+0x38>
    36bc:	0a 26       	eor	r0, r26
    36be:	61 f0       	breq	.+24     	; 0x36d8 <__fp_cmp+0x46>
    36c0:	23 2b       	or	r18, r19
    36c2:	24 2b       	or	r18, r20
    36c4:	25 2b       	or	r18, r21
    36c6:	21 f4       	brne	.+8      	; 0x36d0 <__fp_cmp+0x3e>
    36c8:	08 95       	ret
    36ca:	0a 26       	eor	r0, r26
    36cc:	09 f4       	brne	.+2      	; 0x36d0 <__fp_cmp+0x3e>
    36ce:	a1 40       	sbci	r26, 0x01	; 1
    36d0:	a6 95       	lsr	r26
    36d2:	8f ef       	ldi	r24, 0xFF	; 255
    36d4:	81 1d       	adc	r24, r1
    36d6:	81 1d       	adc	r24, r1
    36d8:	08 95       	ret

000036da <__fp_inf>:
    36da:	97 f9       	bld	r25, 7
    36dc:	9f 67       	ori	r25, 0x7F	; 127
    36de:	80 e8       	ldi	r24, 0x80	; 128
    36e0:	70 e0       	ldi	r23, 0x00	; 0
    36e2:	60 e0       	ldi	r22, 0x00	; 0
    36e4:	08 95       	ret

000036e6 <__fp_nan>:
    36e6:	9f ef       	ldi	r25, 0xFF	; 255
    36e8:	80 ec       	ldi	r24, 0xC0	; 192
    36ea:	08 95       	ret

000036ec <__fp_pscA>:
    36ec:	00 24       	eor	r0, r0
    36ee:	0a 94       	dec	r0
    36f0:	16 16       	cp	r1, r22
    36f2:	17 06       	cpc	r1, r23
    36f4:	18 06       	cpc	r1, r24
    36f6:	09 06       	cpc	r0, r25
    36f8:	08 95       	ret

000036fa <__fp_pscB>:
    36fa:	00 24       	eor	r0, r0
    36fc:	0a 94       	dec	r0
    36fe:	12 16       	cp	r1, r18
    3700:	13 06       	cpc	r1, r19
    3702:	14 06       	cpc	r1, r20
    3704:	05 06       	cpc	r0, r21
    3706:	08 95       	ret

00003708 <__fp_round>:
    3708:	09 2e       	mov	r0, r25
    370a:	03 94       	inc	r0
    370c:	00 0c       	add	r0, r0
    370e:	11 f4       	brne	.+4      	; 0x3714 <__fp_round+0xc>
    3710:	88 23       	and	r24, r24
    3712:	52 f0       	brmi	.+20     	; 0x3728 <__fp_round+0x20>
    3714:	bb 0f       	add	r27, r27
    3716:	40 f4       	brcc	.+16     	; 0x3728 <__fp_round+0x20>
    3718:	bf 2b       	or	r27, r31
    371a:	11 f4       	brne	.+4      	; 0x3720 <__fp_round+0x18>
    371c:	60 ff       	sbrs	r22, 0
    371e:	04 c0       	rjmp	.+8      	; 0x3728 <__fp_round+0x20>
    3720:	6f 5f       	subi	r22, 0xFF	; 255
    3722:	7f 4f       	sbci	r23, 0xFF	; 255
    3724:	8f 4f       	sbci	r24, 0xFF	; 255
    3726:	9f 4f       	sbci	r25, 0xFF	; 255
    3728:	08 95       	ret

0000372a <__fp_split3>:
    372a:	57 fd       	sbrc	r21, 7
    372c:	90 58       	subi	r25, 0x80	; 128
    372e:	44 0f       	add	r20, r20
    3730:	55 1f       	adc	r21, r21
    3732:	59 f0       	breq	.+22     	; 0x374a <__fp_splitA+0x10>
    3734:	5f 3f       	cpi	r21, 0xFF	; 255
    3736:	71 f0       	breq	.+28     	; 0x3754 <__fp_splitA+0x1a>
    3738:	47 95       	ror	r20

0000373a <__fp_splitA>:
    373a:	88 0f       	add	r24, r24
    373c:	97 fb       	bst	r25, 7
    373e:	99 1f       	adc	r25, r25
    3740:	61 f0       	breq	.+24     	; 0x375a <__fp_splitA+0x20>
    3742:	9f 3f       	cpi	r25, 0xFF	; 255
    3744:	79 f0       	breq	.+30     	; 0x3764 <__fp_splitA+0x2a>
    3746:	87 95       	ror	r24
    3748:	08 95       	ret
    374a:	12 16       	cp	r1, r18
    374c:	13 06       	cpc	r1, r19
    374e:	14 06       	cpc	r1, r20
    3750:	55 1f       	adc	r21, r21
    3752:	f2 cf       	rjmp	.-28     	; 0x3738 <__fp_split3+0xe>
    3754:	46 95       	lsr	r20
    3756:	f1 df       	rcall	.-30     	; 0x373a <__fp_splitA>
    3758:	08 c0       	rjmp	.+16     	; 0x376a <__fp_splitA+0x30>
    375a:	16 16       	cp	r1, r22
    375c:	17 06       	cpc	r1, r23
    375e:	18 06       	cpc	r1, r24
    3760:	99 1f       	adc	r25, r25
    3762:	f1 cf       	rjmp	.-30     	; 0x3746 <__fp_splitA+0xc>
    3764:	86 95       	lsr	r24
    3766:	71 05       	cpc	r23, r1
    3768:	61 05       	cpc	r22, r1
    376a:	08 94       	sec
    376c:	08 95       	ret

0000376e <__fp_zero>:
    376e:	e8 94       	clt

00003770 <__fp_szero>:
    3770:	bb 27       	eor	r27, r27
    3772:	66 27       	eor	r22, r22
    3774:	77 27       	eor	r23, r23
    3776:	cb 01       	movw	r24, r22
    3778:	97 f9       	bld	r25, 7
    377a:	08 95       	ret

0000377c <__gesf2>:
    377c:	0e 94 49 1b 	call	0x3692	; 0x3692 <__fp_cmp>
    3780:	08 f4       	brcc	.+2      	; 0x3784 <__gesf2+0x8>
    3782:	8f ef       	ldi	r24, 0xFF	; 255
    3784:	08 95       	ret

00003786 <__mulsf3>:
    3786:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <__mulsf3x>
    378a:	0c 94 84 1b 	jmp	0x3708	; 0x3708 <__fp_round>
    378e:	0e 94 76 1b 	call	0x36ec	; 0x36ec <__fp_pscA>
    3792:	38 f0       	brcs	.+14     	; 0x37a2 <__mulsf3+0x1c>
    3794:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <__fp_pscB>
    3798:	20 f0       	brcs	.+8      	; 0x37a2 <__mulsf3+0x1c>
    379a:	95 23       	and	r25, r21
    379c:	11 f0       	breq	.+4      	; 0x37a2 <__mulsf3+0x1c>
    379e:	0c 94 6d 1b 	jmp	0x36da	; 0x36da <__fp_inf>
    37a2:	0c 94 73 1b 	jmp	0x36e6	; 0x36e6 <__fp_nan>
    37a6:	11 24       	eor	r1, r1
    37a8:	0c 94 b8 1b 	jmp	0x3770	; 0x3770 <__fp_szero>

000037ac <__mulsf3x>:
    37ac:	0e 94 95 1b 	call	0x372a	; 0x372a <__fp_split3>
    37b0:	70 f3       	brcs	.-36     	; 0x378e <__mulsf3+0x8>

000037b2 <__mulsf3_pse>:
    37b2:	95 9f       	mul	r25, r21
    37b4:	c1 f3       	breq	.-16     	; 0x37a6 <__mulsf3+0x20>
    37b6:	95 0f       	add	r25, r21
    37b8:	50 e0       	ldi	r21, 0x00	; 0
    37ba:	55 1f       	adc	r21, r21
    37bc:	62 9f       	mul	r22, r18
    37be:	f0 01       	movw	r30, r0
    37c0:	72 9f       	mul	r23, r18
    37c2:	bb 27       	eor	r27, r27
    37c4:	f0 0d       	add	r31, r0
    37c6:	b1 1d       	adc	r27, r1
    37c8:	63 9f       	mul	r22, r19
    37ca:	aa 27       	eor	r26, r26
    37cc:	f0 0d       	add	r31, r0
    37ce:	b1 1d       	adc	r27, r1
    37d0:	aa 1f       	adc	r26, r26
    37d2:	64 9f       	mul	r22, r20
    37d4:	66 27       	eor	r22, r22
    37d6:	b0 0d       	add	r27, r0
    37d8:	a1 1d       	adc	r26, r1
    37da:	66 1f       	adc	r22, r22
    37dc:	82 9f       	mul	r24, r18
    37de:	22 27       	eor	r18, r18
    37e0:	b0 0d       	add	r27, r0
    37e2:	a1 1d       	adc	r26, r1
    37e4:	62 1f       	adc	r22, r18
    37e6:	73 9f       	mul	r23, r19
    37e8:	b0 0d       	add	r27, r0
    37ea:	a1 1d       	adc	r26, r1
    37ec:	62 1f       	adc	r22, r18
    37ee:	83 9f       	mul	r24, r19
    37f0:	a0 0d       	add	r26, r0
    37f2:	61 1d       	adc	r22, r1
    37f4:	22 1f       	adc	r18, r18
    37f6:	74 9f       	mul	r23, r20
    37f8:	33 27       	eor	r19, r19
    37fa:	a0 0d       	add	r26, r0
    37fc:	61 1d       	adc	r22, r1
    37fe:	23 1f       	adc	r18, r19
    3800:	84 9f       	mul	r24, r20
    3802:	60 0d       	add	r22, r0
    3804:	21 1d       	adc	r18, r1
    3806:	82 2f       	mov	r24, r18
    3808:	76 2f       	mov	r23, r22
    380a:	6a 2f       	mov	r22, r26
    380c:	11 24       	eor	r1, r1
    380e:	9f 57       	subi	r25, 0x7F	; 127
    3810:	50 40       	sbci	r21, 0x00	; 0
    3812:	9a f0       	brmi	.+38     	; 0x383a <__mulsf3_pse+0x88>
    3814:	f1 f0       	breq	.+60     	; 0x3852 <__mulsf3_pse+0xa0>
    3816:	88 23       	and	r24, r24
    3818:	4a f0       	brmi	.+18     	; 0x382c <__mulsf3_pse+0x7a>
    381a:	ee 0f       	add	r30, r30
    381c:	ff 1f       	adc	r31, r31
    381e:	bb 1f       	adc	r27, r27
    3820:	66 1f       	adc	r22, r22
    3822:	77 1f       	adc	r23, r23
    3824:	88 1f       	adc	r24, r24
    3826:	91 50       	subi	r25, 0x01	; 1
    3828:	50 40       	sbci	r21, 0x00	; 0
    382a:	a9 f7       	brne	.-22     	; 0x3816 <__mulsf3_pse+0x64>
    382c:	9e 3f       	cpi	r25, 0xFE	; 254
    382e:	51 05       	cpc	r21, r1
    3830:	80 f0       	brcs	.+32     	; 0x3852 <__mulsf3_pse+0xa0>
    3832:	0c 94 6d 1b 	jmp	0x36da	; 0x36da <__fp_inf>
    3836:	0c 94 b8 1b 	jmp	0x3770	; 0x3770 <__fp_szero>
    383a:	5f 3f       	cpi	r21, 0xFF	; 255
    383c:	e4 f3       	brlt	.-8      	; 0x3836 <__mulsf3_pse+0x84>
    383e:	98 3e       	cpi	r25, 0xE8	; 232
    3840:	d4 f3       	brlt	.-12     	; 0x3836 <__mulsf3_pse+0x84>
    3842:	86 95       	lsr	r24
    3844:	77 95       	ror	r23
    3846:	67 95       	ror	r22
    3848:	b7 95       	ror	r27
    384a:	f7 95       	ror	r31
    384c:	e7 95       	ror	r30
    384e:	9f 5f       	subi	r25, 0xFF	; 255
    3850:	c1 f7       	brne	.-16     	; 0x3842 <__mulsf3_pse+0x90>
    3852:	fe 2b       	or	r31, r30
    3854:	88 0f       	add	r24, r24
    3856:	91 1d       	adc	r25, r1
    3858:	96 95       	lsr	r25
    385a:	87 95       	ror	r24
    385c:	97 f9       	bld	r25, 7
    385e:	08 95       	ret

00003860 <__cxa_pure_virtual>:
    3860:	0e 94 89 2c 	call	0x5912	; 0x5912 <abort>

00003864 <_ZN7Serial_5writeEh>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		ret = breakValue;
		breakValue = -1;
	}
	return ret;
}
    3864:	cf 93       	push	r28
    3866:	df 93       	push	r29
    3868:	1f 92       	push	r1
    386a:	cd b7       	in	r28, 0x3d	; 61
    386c:	de b7       	in	r29, 0x3e	; 62
    386e:	69 83       	std	Y+1, r22	; 0x01
    3870:	dc 01       	movw	r26, r24
    3872:	ed 91       	ld	r30, X+
    3874:	fc 91       	ld	r31, X
    3876:	02 80       	ldd	r0, Z+2	; 0x02
    3878:	f3 81       	ldd	r31, Z+3	; 0x03
    387a:	e0 2d       	mov	r30, r0
    387c:	41 e0       	ldi	r20, 0x01	; 1
    387e:	50 e0       	ldi	r21, 0x00	; 0
    3880:	be 01       	movw	r22, r28
    3882:	6f 5f       	subi	r22, 0xFF	; 255
    3884:	7f 4f       	sbci	r23, 0xFF	; 255
    3886:	09 95       	icall
    3888:	0f 90       	pop	r0
    388a:	df 91       	pop	r29
    388c:	cf 91       	pop	r28
    388e:	08 95       	ret

00003890 <_ZN7Serial_4peekEv>:
    3890:	cf 93       	push	r28
    3892:	df 93       	push	r29
    3894:	ec 01       	movw	r28, r24
    3896:	8c 85       	ldd	r24, Y+12	; 0x0c
    3898:	9d 85       	ldd	r25, Y+13	; 0x0d
    389a:	97 ff       	sbrs	r25, 7
    389c:	05 c0       	rjmp	.+10     	; 0x38a8 <_ZN7Serial_4peekEv+0x18>
    389e:	82 e0       	ldi	r24, 0x02	; 2
    38a0:	0e 94 18 22 	call	0x4430	; 0x4430 <_Z8USB_Recvh>
    38a4:	9d 87       	std	Y+13, r25	; 0x0d
    38a6:	8c 87       	std	Y+12, r24	; 0x0c
    38a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    38aa:	9d 85       	ldd	r25, Y+13	; 0x0d
    38ac:	df 91       	pop	r29
    38ae:	cf 91       	pop	r28
    38b0:	08 95       	ret

000038b2 <_ZN7Serial_17availableForWriteEv>:
    38b2:	83 e0       	ldi	r24, 0x03	; 3
    38b4:	0e 94 2f 22 	call	0x445e	; 0x445e <_Z13USB_SendSpaceh>
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	08 95       	ret

000038bc <_ZN7Serial_5flushEv>:
    38bc:	83 e0       	ldi	r24, 0x03	; 3
    38be:	0c 94 ad 24 	jmp	0x495a	; 0x495a <_Z9USB_Flushh>

000038c2 <_ZN7Serial_9availableEv>:
    38c2:	fc 01       	movw	r30, r24
    38c4:	84 85       	ldd	r24, Z+12	; 0x0c
    38c6:	95 85       	ldd	r25, Z+13	; 0x0d
    38c8:	97 fd       	sbrc	r25, 7
    38ca:	06 c0       	rjmp	.+12     	; 0x38d8 <_ZN7Serial_9availableEv+0x16>
    38cc:	82 e0       	ldi	r24, 0x02	; 2
    38ce:	0e 94 c3 21 	call	0x4386	; 0x4386 <_Z13USB_Availableh>
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	01 96       	adiw	r24, 0x01	; 1
    38d6:	08 95       	ret
    38d8:	82 e0       	ldi	r24, 0x02	; 2
    38da:	0e 94 c3 21 	call	0x4386	; 0x4386 <_Z13USB_Availableh>
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	08 95       	ret

000038e2 <_ZN7Serial_4readEv>:
    38e2:	fc 01       	movw	r30, r24
    38e4:	84 85       	ldd	r24, Z+12	; 0x0c
    38e6:	95 85       	ldd	r25, Z+13	; 0x0d
    38e8:	97 fd       	sbrc	r25, 7
    38ea:	05 c0       	rjmp	.+10     	; 0x38f6 <_ZN7Serial_4readEv+0x14>
    38ec:	2f ef       	ldi	r18, 0xFF	; 255
    38ee:	3f ef       	ldi	r19, 0xFF	; 255
    38f0:	35 87       	std	Z+13, r19	; 0x0d
    38f2:	24 87       	std	Z+12, r18	; 0x0c
    38f4:	08 95       	ret
    38f6:	82 e0       	ldi	r24, 0x02	; 2
    38f8:	0c 94 18 22 	jmp	0x4430	; 0x4430 <_Z8USB_Recvh>

000038fc <_ZN7Serial_5writeEPKhj>:
    38fc:	cf 93       	push	r28
    38fe:	df 93       	push	r29
    3900:	ec 01       	movw	r28, r24
    3902:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <_ZL12_usbLineInfo+0x7>
    3906:	88 23       	and	r24, r24
    3908:	31 f0       	breq	.+12     	; 0x3916 <_ZN7Serial_5writeEPKhj+0x1a>
    390a:	83 e0       	ldi	r24, 0x03	; 3
    390c:	0e 94 49 22 	call	0x4492	; 0x4492 <_Z8USB_SendhPKvi>
    3910:	18 16       	cp	r1, r24
    3912:	19 06       	cpc	r1, r25
    3914:	34 f0       	brlt	.+12     	; 0x3922 <_ZN7Serial_5writeEPKhj+0x26>
    3916:	81 e0       	ldi	r24, 0x01	; 1
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	9b 83       	std	Y+3, r25	; 0x03
    391c:	8a 83       	std	Y+2, r24	; 0x02
    391e:	80 e0       	ldi	r24, 0x00	; 0
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	df 91       	pop	r29
    3924:	cf 91       	pop	r28
    3926:	08 95       	ret

00003928 <_Z16isLUFAbootloaderv>:
    3928:	ee ef       	ldi	r30, 0xFE	; 254
    392a:	ff e7       	ldi	r31, 0x7F	; 127
    392c:	25 91       	lpm	r18, Z+
    392e:	34 91       	lpm	r19, Z
    3930:	81 e0       	ldi	r24, 0x01	; 1
    3932:	2b 3f       	cpi	r18, 0xFB	; 251
    3934:	3c 4d       	sbci	r19, 0xDC	; 220
    3936:	09 f0       	breq	.+2      	; 0x393a <_Z16isLUFAbootloaderv+0x12>
    3938:	80 e0       	ldi	r24, 0x00	; 0
    393a:	08 95       	ret

0000393c <_Z16CDC_GetInterfacePh>:
    393c:	fc 01       	movw	r30, r24
    393e:	90 81       	ld	r25, Z
    3940:	9e 5f       	subi	r25, 0xFE	; 254
    3942:	90 83       	st	Z, r25
    3944:	42 e4       	ldi	r20, 0x42	; 66
    3946:	50 e0       	ldi	r21, 0x00	; 0
    3948:	68 ee       	ldi	r22, 0xE8	; 232
    394a:	70 e0       	ldi	r23, 0x00	; 0
    394c:	80 e8       	ldi	r24, 0x80	; 128
    394e:	0c 94 f9 22 	jmp	0x45f2	; 0x45f2 <_Z15USB_SendControlhPKvi>

00003952 <_Z9CDC_SetupR8USBSetup>:
    3952:	fc 01       	movw	r30, r24
    3954:	81 81       	ldd	r24, Z+1	; 0x01
    3956:	90 81       	ld	r25, Z
    3958:	91 3a       	cpi	r25, 0xA1	; 161
    395a:	59 f4       	brne	.+22     	; 0x3972 <_Z9CDC_SetupR8USBSetup+0x20>
    395c:	81 32       	cpi	r24, 0x21	; 33
    395e:	09 f0       	breq	.+2      	; 0x3962 <_Z9CDC_SetupR8USBSetup+0x10>
    3960:	65 c0       	rjmp	.+202    	; 0x3a2c <_Z9CDC_SetupR8USBSetup+0xda>
    3962:	47 e0       	ldi	r20, 0x07	; 7
    3964:	50 e0       	ldi	r21, 0x00	; 0
    3966:	6c e1       	ldi	r22, 0x1C	; 28
    3968:	71 e0       	ldi	r23, 0x01	; 1
    396a:	80 e0       	ldi	r24, 0x00	; 0
    396c:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <_Z15USB_SendControlhPKvi>
    3970:	5b c0       	rjmp	.+182    	; 0x3a28 <_Z9CDC_SetupR8USBSetup+0xd6>
    3972:	91 32       	cpi	r25, 0x21	; 33
    3974:	09 f0       	breq	.+2      	; 0x3978 <_Z9CDC_SetupR8USBSetup+0x26>
    3976:	5a c0       	rjmp	.+180    	; 0x3a2c <_Z9CDC_SetupR8USBSetup+0xda>
    3978:	83 32       	cpi	r24, 0x23	; 35
    397a:	69 f4       	brne	.+26     	; 0x3996 <_Z9CDC_SetupR8USBSetup+0x44>
    397c:	82 81       	ldd	r24, Z+2	; 0x02
    397e:	93 81       	ldd	r25, Z+3	; 0x03
    3980:	a0 e0       	ldi	r26, 0x00	; 0
    3982:	b0 e0       	ldi	r27, 0x00	; 0
    3984:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_ZL10breakValue>
    3988:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <_ZL10breakValue+0x1>
    398c:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <_ZL10breakValue+0x2>
    3990:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <_ZL10breakValue+0x3>
    3994:	49 c0       	rjmp	.+146    	; 0x3a28 <_Z9CDC_SetupR8USBSetup+0xd6>
    3996:	80 32       	cpi	r24, 0x20	; 32
    3998:	39 f4       	brne	.+14     	; 0x39a8 <_Z9CDC_SetupR8USBSetup+0x56>
    399a:	67 e0       	ldi	r22, 0x07	; 7
    399c:	70 e0       	ldi	r23, 0x00	; 0
    399e:	8c e1       	ldi	r24, 0x1C	; 28
    39a0:	91 e0       	ldi	r25, 0x01	; 1
    39a2:	0e 94 20 23 	call	0x4640	; 0x4640 <_Z15USB_RecvControlPvi>
    39a6:	40 c0       	rjmp	.+128    	; 0x3a28 <_Z9CDC_SetupR8USBSetup+0xd6>
    39a8:	82 32       	cpi	r24, 0x22	; 34
    39aa:	09 f0       	breq	.+2      	; 0x39ae <_Z9CDC_SetupR8USBSetup+0x5c>
    39ac:	3d c0       	rjmp	.+122    	; 0x3a28 <_Z9CDC_SetupR8USBSetup+0xd6>
    39ae:	82 81       	ldd	r24, Z+2	; 0x02
    39b0:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <_ZL12_usbLineInfo+0x7>
    39b4:	0e 94 94 1c 	call	0x3928	; 0x3928 <_Z16isLUFAbootloaderv>
    39b8:	88 23       	and	r24, r24
    39ba:	19 f0       	breq	.+6      	; 0x39c2 <_Z9CDC_SetupR8USBSetup+0x70>
    39bc:	ee ef       	ldi	r30, 0xFE	; 254
    39be:	fa e0       	ldi	r31, 0x0A	; 10
    39c0:	02 c0       	rjmp	.+4      	; 0x39c6 <_Z9CDC_SetupR8USBSetup+0x74>
    39c2:	e0 e0       	ldi	r30, 0x00	; 0
    39c4:	f8 e0       	ldi	r31, 0x08	; 8
    39c6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <_ZL12_usbLineInfo>
    39ca:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <_ZL12_usbLineInfo+0x1>
    39ce:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <_ZL12_usbLineInfo+0x2>
    39d2:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <_ZL12_usbLineInfo+0x3>
    39d6:	80 3b       	cpi	r24, 0xB0	; 176
    39d8:	94 40       	sbci	r25, 0x04	; 4
    39da:	a1 05       	cpc	r26, r1
    39dc:	b1 05       	cpc	r27, r1
    39de:	41 f5       	brne	.+80     	; 0x3a30 <_Z9CDC_SetupR8USBSetup+0xde>
    39e0:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <_ZL12_usbLineInfo+0x7>
    39e4:	80 fd       	sbrc	r24, 0
    39e6:	24 c0       	rjmp	.+72     	; 0x3a30 <_Z9CDC_SetupR8USBSetup+0xde>
    39e8:	ee 3f       	cpi	r30, 0xFE	; 254
    39ea:	8a e0       	ldi	r24, 0x0A	; 10
    39ec:	f8 07       	cpc	r31, r24
    39ee:	51 f0       	breq	.+20     	; 0x3a04 <_Z9CDC_SetupR8USBSetup+0xb2>
    39f0:	80 81       	ld	r24, Z
    39f2:	91 81       	ldd	r25, Z+1	; 0x01
    39f4:	87 37       	cpi	r24, 0x77	; 119
    39f6:	27 e7       	ldi	r18, 0x77	; 119
    39f8:	92 07       	cpc	r25, r18
    39fa:	21 f0       	breq	.+8      	; 0x3a04 <_Z9CDC_SetupR8USBSetup+0xb2>
    39fc:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x402>
    3a00:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x401>
    3a04:	87 e7       	ldi	r24, 0x77	; 119
    3a06:	97 e7       	ldi	r25, 0x77	; 119
    3a08:	91 83       	std	Z+1, r25	; 0x01
    3a0a:	80 83       	st	Z, r24
    3a0c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3a10:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <_ZL11wdtcsr_save>
    3a14:	9b e0       	ldi	r25, 0x0B	; 11
    3a16:	88 e1       	ldi	r24, 0x18	; 24
    3a18:	0f b6       	in	r0, 0x3f	; 63
    3a1a:	f8 94       	cli
    3a1c:	a8 95       	wdr
    3a1e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3a22:	0f be       	out	0x3f, r0	; 63
    3a24:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3a28:	81 e0       	ldi	r24, 0x01	; 1
    3a2a:	08 95       	ret
    3a2c:	80 e0       	ldi	r24, 0x00	; 0
    3a2e:	08 95       	ret
    3a30:	80 81       	ld	r24, Z
    3a32:	91 81       	ldd	r25, Z+1	; 0x01
    3a34:	87 37       	cpi	r24, 0x77	; 119
    3a36:	97 47       	sbci	r25, 0x77	; 119
    3a38:	b9 f7       	brne	.-18     	; 0x3a28 <_Z9CDC_SetupR8USBSetup+0xd6>
    3a3a:	a8 95       	wdr
    3a3c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3a40:	88 61       	ori	r24, 0x18	; 24
    3a42:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3a46:	80 91 3c 06 	lds	r24, 0x063C	; 0x80063c <_ZL11wdtcsr_save>
    3a4a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3a4e:	ee 3f       	cpi	r30, 0xFE	; 254
    3a50:	8a e0       	ldi	r24, 0x0A	; 10
    3a52:	f8 07       	cpc	r31, r24
    3a54:	39 f0       	breq	.+14     	; 0x3a64 <_Z9CDC_SetupR8USBSetup+0x112>
    3a56:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x401>
    3a5a:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x402>
    3a5e:	91 83       	std	Z+1, r25	; 0x01
    3a60:	80 83       	st	Z, r24
    3a62:	e2 cf       	rjmp	.-60     	; 0x3a28 <_Z9CDC_SetupR8USBSetup+0xd6>
    3a64:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x402>
    3a68:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x401>
    3a6c:	dd cf       	rjmp	.-70     	; 0x3a28 <_Z9CDC_SetupR8USBSetup+0xd6>

00003a6e <_ZN7Serial_5beginEm>:
    3a6e:	2f ef       	ldi	r18, 0xFF	; 255
    3a70:	3f ef       	ldi	r19, 0xFF	; 255
    3a72:	fc 01       	movw	r30, r24
    3a74:	35 87       	std	Z+13, r19	; 0x0d
    3a76:	24 87       	std	Z+12, r18	; 0x0c
    3a78:	08 95       	ret

00003a7a <_GLOBAL__sub_I__cdcInterface>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3a7a:	ec ee       	ldi	r30, 0xEC	; 236
    3a7c:	f5 e0       	ldi	r31, 0x05	; 5
    3a7e:	13 82       	std	Z+3, r1	; 0x03
    3a80:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    3a82:	88 ee       	ldi	r24, 0xE8	; 232
    3a84:	93 e0       	ldi	r25, 0x03	; 3
    3a86:	a0 e0       	ldi	r26, 0x00	; 0
    3a88:	b0 e0       	ldi	r27, 0x00	; 0
    3a8a:	84 83       	std	Z+4, r24	; 0x04
    3a8c:	95 83       	std	Z+5, r25	; 0x05
    3a8e:	a6 83       	std	Z+6, r26	; 0x06
    3a90:	b7 83       	std	Z+7, r27	; 0x07
class Serial_ : public Stream
{
private:
	int peek_buffer;
public:
	Serial_() { peek_buffer = -1; };
    3a92:	85 e1       	ldi	r24, 0x15	; 21
    3a94:	93 e0       	ldi	r25, 0x03	; 3
    3a96:	91 83       	std	Z+1, r25	; 0x01
    3a98:	80 83       	st	Z, r24
    3a9a:	8f ef       	ldi	r24, 0xFF	; 255
    3a9c:	9f ef       	ldi	r25, 0xFF	; 255
    3a9e:	95 87       	std	Z+13, r25	; 0x0d
    3aa0:	84 87       	std	Z+12, r24	; 0x0c
    3aa2:	08 95       	ret

00003aa4 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    3aa4:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    3aa6:	91 8d       	ldd	r25, Z+25	; 0x19
    3aa8:	22 8d       	ldd	r18, Z+26	; 0x1a
    3aaa:	89 2f       	mov	r24, r25
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	80 5c       	subi	r24, 0xC0	; 192
    3ab0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ab2:	82 1b       	sub	r24, r18
    3ab4:	91 09       	sbc	r25, r1
}
    3ab6:	8f 73       	andi	r24, 0x3F	; 63
    3ab8:	99 27       	eor	r25, r25
    3aba:	08 95       	ret

00003abc <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3abc:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3abe:	91 8d       	ldd	r25, Z+25	; 0x19
    3ac0:	82 8d       	ldd	r24, Z+26	; 0x1a
    3ac2:	98 17       	cp	r25, r24
    3ac4:	31 f0       	breq	.+12     	; 0x3ad2 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    3ac6:	82 8d       	ldd	r24, Z+26	; 0x1a
    3ac8:	e8 0f       	add	r30, r24
    3aca:	f1 1d       	adc	r31, r1
    3acc:	85 8d       	ldd	r24, Z+29	; 0x1d
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3ad2:	8f ef       	ldi	r24, 0xFF	; 255
    3ad4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3ad6:	08 95       	ret

00003ad8 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    3ad8:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3ada:	91 8d       	ldd	r25, Z+25	; 0x19
    3adc:	82 8d       	ldd	r24, Z+26	; 0x1a
    3ade:	98 17       	cp	r25, r24
    3ae0:	61 f0       	breq	.+24     	; 0x3afa <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3ae2:	82 8d       	ldd	r24, Z+26	; 0x1a
    3ae4:	df 01       	movw	r26, r30
    3ae6:	a8 0f       	add	r26, r24
    3ae8:	b1 1d       	adc	r27, r1
    3aea:	5d 96       	adiw	r26, 0x1d	; 29
    3aec:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3aee:	92 8d       	ldd	r25, Z+26	; 0x1a
    3af0:	9f 5f       	subi	r25, 0xFF	; 255
    3af2:	9f 73       	andi	r25, 0x3F	; 63
    3af4:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    3af6:	90 e0       	ldi	r25, 0x00	; 0
    3af8:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3afa:	8f ef       	ldi	r24, 0xFF	; 255
    3afc:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3afe:	08 95       	ret

00003b00 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    3b00:	fc 01       	movw	r30, r24
    3b02:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    3b04:	44 8d       	ldd	r20, Z+28	; 0x1c
    3b06:	25 2f       	mov	r18, r21
    3b08:	30 e0       	ldi	r19, 0x00	; 0
    3b0a:	84 2f       	mov	r24, r20
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    3b0e:	82 1b       	sub	r24, r18
    3b10:	93 0b       	sbc	r25, r19
    3b12:	54 17       	cp	r21, r20
    3b14:	10 f0       	brcs	.+4      	; 0x3b1a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    3b16:	cf 96       	adiw	r24, 0x3f	; 63
    3b18:	08 95       	ret
  return tail - head - 1;
    3b1a:	01 97       	sbiw	r24, 0x01	; 1
}
    3b1c:	08 95       	ret

00003b1e <_Z14serialEventRunv>:
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    3b1e:	89 ee       	ldi	r24, 0xE9	; 233
    3b20:	9e e1       	ldi	r25, 0x1E	; 30
    3b22:	89 2b       	or	r24, r25
    3b24:	49 f0       	breq	.+18     	; 0x3b38 <_Z14serialEventRunv+0x1a>
    3b26:	80 e0       	ldi	r24, 0x00	; 0
    3b28:	90 e0       	ldi	r25, 0x00	; 0
    3b2a:	89 2b       	or	r24, r25
    3b2c:	29 f0       	breq	.+10     	; 0x3b38 <_Z14serialEventRunv+0x1a>
    3b2e:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <_Z17Serial1_availablev>
    3b32:	81 11       	cpse	r24, r1
    3b34:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3b38:	08 95       	ret

00003b3a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3b3a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3b3c:	84 8d       	ldd	r24, Z+28	; 0x1c
    3b3e:	df 01       	movw	r26, r30
    3b40:	a8 0f       	add	r26, r24
    3b42:	b1 1d       	adc	r27, r1
    3b44:	a3 5a       	subi	r26, 0xA3	; 163
    3b46:	bf 4f       	sbci	r27, 0xFF	; 255
    3b48:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3b4a:	84 8d       	ldd	r24, Z+28	; 0x1c
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	01 96       	adiw	r24, 0x01	; 1
    3b50:	8f 73       	andi	r24, 0x3F	; 63
    3b52:	99 27       	eor	r25, r25
    3b54:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    3b56:	a6 89       	ldd	r26, Z+22	; 0x16
    3b58:	b7 89       	ldd	r27, Z+23	; 0x17
    3b5a:	2c 93       	st	X, r18
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
    3b5c:	a0 89       	ldd	r26, Z+16	; 0x10
    3b5e:	b1 89       	ldd	r27, Z+17	; 0x11
    3b60:	8c 91       	ld	r24, X
    3b62:	82 74       	andi	r24, 0x42	; 66
    3b64:	8c 93       	st	X, r24
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    3b66:	93 8d       	ldd	r25, Z+27	; 0x1b
    3b68:	84 8d       	ldd	r24, Z+28	; 0x1c
    3b6a:	98 13       	cpse	r25, r24
    3b6c:	06 c0       	rjmp	.+12     	; 0x3b7a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3b6e:	02 88       	ldd	r0, Z+18	; 0x12
    3b70:	f3 89       	ldd	r31, Z+19	; 0x13
    3b72:	e0 2d       	mov	r30, r0
    3b74:	80 81       	ld	r24, Z
    3b76:	8f 7d       	andi	r24, 0xDF	; 223
    3b78:	80 83       	st	Z, r24
    3b7a:	08 95       	ret

00003b7c <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    3b7c:	ef 92       	push	r14
    3b7e:	ff 92       	push	r15
    3b80:	0f 93       	push	r16
    3b82:	1f 93       	push	r17
    3b84:	cf 93       	push	r28
    3b86:	df 93       	push	r29
    3b88:	ec 01       	movw	r28, r24
  _written = true;
    3b8a:	81 e0       	ldi	r24, 0x01	; 1
    3b8c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3b8e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3b90:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3b92:	98 13       	cpse	r25, r24
    3b94:	05 c0       	rjmp	.+10     	; 0x3ba0 <_ZN14HardwareSerial5writeEh+0x24>
    3b96:	e8 89       	ldd	r30, Y+16	; 0x10
    3b98:	f9 89       	ldd	r31, Y+17	; 0x11
    3b9a:	80 81       	ld	r24, Z
    3b9c:	85 fd       	sbrc	r24, 5
    3b9e:	26 c0       	rjmp	.+76     	; 0x3bec <_ZN14HardwareSerial5writeEh+0x70>
    3ba0:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3ba2:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3ba4:	10 e0       	ldi	r17, 0x00	; 0
    3ba6:	0f 5f       	subi	r16, 0xFF	; 255
    3ba8:	1f 4f       	sbci	r17, 0xFF	; 255
    3baa:	0f 73       	andi	r16, 0x3F	; 63
    3bac:	11 27       	eor	r17, r17
    3bae:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3bb0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3bb2:	e8 12       	cpse	r14, r24
    3bb4:	0c c0       	rjmp	.+24     	; 0x3bce <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    3bb6:	0f b6       	in	r0, 0x3f	; 63
    3bb8:	07 fc       	sbrc	r0, 7
    3bba:	fa cf       	rjmp	.-12     	; 0x3bb0 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3bbc:	e8 89       	ldd	r30, Y+16	; 0x10
    3bbe:	f9 89       	ldd	r31, Y+17	; 0x11
    3bc0:	80 81       	ld	r24, Z
    3bc2:	85 ff       	sbrs	r24, 5
    3bc4:	f5 cf       	rjmp	.-22     	; 0x3bb0 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3bc6:	ce 01       	movw	r24, r28
    3bc8:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3bcc:	f1 cf       	rjmp	.-30     	; 0x3bb0 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3bce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bd0:	fe 01       	movw	r30, r28
    3bd2:	e8 0f       	add	r30, r24
    3bd4:	f1 1d       	adc	r31, r1
    3bd6:	e3 5a       	subi	r30, 0xA3	; 163
    3bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bda:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3bdc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3bde:	f8 94       	cli
    _tx_buffer_head = i;
    3be0:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    3be2:	ea 89       	ldd	r30, Y+18	; 0x12
    3be4:	fb 89       	ldd	r31, Y+19	; 0x13
    3be6:	80 81       	ld	r24, Z
    3be8:	80 62       	ori	r24, 0x20	; 32
    3bea:	09 c0       	rjmp	.+18     	; 0x3bfe <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3bec:	9f b7       	in	r25, 0x3f	; 63
    3bee:	f8 94       	cli
      *_udr = c;
    3bf0:	ee 89       	ldd	r30, Y+22	; 0x16
    3bf2:	ff 89       	ldd	r31, Y+23	; 0x17
    3bf4:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
#else
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
    3bf6:	e8 89       	ldd	r30, Y+16	; 0x10
    3bf8:	f9 89       	ldd	r31, Y+17	; 0x11
    3bfa:	80 81       	ld	r24, Z
    3bfc:	82 74       	andi	r24, 0x42	; 66
    3bfe:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3c00:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    3c02:	81 e0       	ldi	r24, 0x01	; 1
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	df 91       	pop	r29
    3c08:	cf 91       	pop	r28
    3c0a:	1f 91       	pop	r17
    3c0c:	0f 91       	pop	r16
    3c0e:	ff 90       	pop	r15
    3c10:	ef 90       	pop	r14
    3c12:	08 95       	ret

00003c14 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3c14:	cf 93       	push	r28
    3c16:	df 93       	push	r29
    3c18:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3c1a:	88 8d       	ldd	r24, Y+24	; 0x18
    3c1c:	88 23       	and	r24, r24
    3c1e:	c9 f0       	breq	.+50     	; 0x3c52 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3c20:	ea 89       	ldd	r30, Y+18	; 0x12
    3c22:	fb 89       	ldd	r31, Y+19	; 0x13
    3c24:	80 81       	ld	r24, Z
    3c26:	85 fd       	sbrc	r24, 5
    3c28:	05 c0       	rjmp	.+10     	; 0x3c34 <_ZN14HardwareSerial5flushEv+0x20>
    3c2a:	a8 89       	ldd	r26, Y+16	; 0x10
    3c2c:	b9 89       	ldd	r27, Y+17	; 0x11
    3c2e:	8c 91       	ld	r24, X
    3c30:	86 fd       	sbrc	r24, 6
    3c32:	0f c0       	rjmp	.+30     	; 0x3c52 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3c34:	0f b6       	in	r0, 0x3f	; 63
    3c36:	07 fc       	sbrc	r0, 7
    3c38:	f5 cf       	rjmp	.-22     	; 0x3c24 <_ZN14HardwareSerial5flushEv+0x10>
    3c3a:	80 81       	ld	r24, Z
    3c3c:	85 ff       	sbrs	r24, 5
    3c3e:	f2 cf       	rjmp	.-28     	; 0x3c24 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3c40:	a8 89       	ldd	r26, Y+16	; 0x10
    3c42:	b9 89       	ldd	r27, Y+17	; 0x11
    3c44:	8c 91       	ld	r24, X
    3c46:	85 ff       	sbrs	r24, 5
    3c48:	ed cf       	rjmp	.-38     	; 0x3c24 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3c4a:	ce 01       	movw	r24, r28
    3c4c:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3c50:	e7 cf       	rjmp	.-50     	; 0x3c20 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3c52:	df 91       	pop	r29
    3c54:	cf 91       	pop	r28
    3c56:	08 95       	ret

00003c58 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3c58:	cf 92       	push	r12
    3c5a:	df 92       	push	r13
    3c5c:	ef 92       	push	r14
    3c5e:	ff 92       	push	r15
    3c60:	1f 93       	push	r17
    3c62:	cf 93       	push	r28
    3c64:	df 93       	push	r29
    3c66:	ec 01       	movw	r28, r24
    3c68:	6a 01       	movw	r12, r20
    3c6a:	7b 01       	movw	r14, r22
    3c6c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3c6e:	e8 89       	ldd	r30, Y+16	; 0x10
    3c70:	f9 89       	ldd	r31, Y+17	; 0x11
    3c72:	82 e0       	ldi	r24, 0x02	; 2
    3c74:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3c76:	41 15       	cp	r20, r1
    3c78:	51 4e       	sbci	r21, 0xE1	; 225
    3c7a:	61 05       	cpc	r22, r1
    3c7c:	71 05       	cpc	r23, r1
    3c7e:	b1 f0       	breq	.+44     	; 0x3cac <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3c80:	60 e0       	ldi	r22, 0x00	; 0
    3c82:	79 e0       	ldi	r23, 0x09	; 9
    3c84:	8d e3       	ldi	r24, 0x3D	; 61
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	a7 01       	movw	r20, r14
    3c8a:	96 01       	movw	r18, r12
    3c8c:	0e 94 47 2a 	call	0x548e	; 0x548e <__udivmodsi4>
    3c90:	da 01       	movw	r26, r20
    3c92:	c9 01       	movw	r24, r18
    3c94:	01 97       	sbiw	r24, 0x01	; 1
    3c96:	a1 09       	sbc	r26, r1
    3c98:	b1 09       	sbc	r27, r1
    3c9a:	b6 95       	lsr	r27
    3c9c:	a7 95       	ror	r26
    3c9e:	97 95       	ror	r25
    3ca0:	87 95       	ror	r24
    3ca2:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3ca4:	21 15       	cp	r18, r1
    3ca6:	80 e1       	ldi	r24, 0x10	; 16
    3ca8:	38 07       	cpc	r19, r24
    3caa:	a8 f0       	brcs	.+42     	; 0x3cd6 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    3cac:	e8 89       	ldd	r30, Y+16	; 0x10
    3cae:	f9 89       	ldd	r31, Y+17	; 0x11
    3cb0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3cb2:	60 e8       	ldi	r22, 0x80	; 128
    3cb4:	74 e8       	ldi	r23, 0x84	; 132
    3cb6:	8e e1       	ldi	r24, 0x1E	; 30
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	a7 01       	movw	r20, r14
    3cbc:	96 01       	movw	r18, r12
    3cbe:	0e 94 47 2a 	call	0x548e	; 0x548e <__udivmodsi4>
    3cc2:	da 01       	movw	r26, r20
    3cc4:	c9 01       	movw	r24, r18
    3cc6:	01 97       	sbiw	r24, 0x01	; 1
    3cc8:	a1 09       	sbc	r26, r1
    3cca:	b1 09       	sbc	r27, r1
    3ccc:	b6 95       	lsr	r27
    3cce:	a7 95       	ror	r26
    3cd0:	97 95       	ror	r25
    3cd2:	87 95       	ror	r24
    3cd4:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3cd6:	ec 85       	ldd	r30, Y+12	; 0x0c
    3cd8:	fd 85       	ldd	r31, Y+13	; 0x0d
    3cda:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    3cdc:	ee 85       	ldd	r30, Y+14	; 0x0e
    3cde:	ff 85       	ldd	r31, Y+15	; 0x0f
    3ce0:	20 83       	st	Z, r18

  _written = false;
    3ce2:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3ce4:	ec 89       	ldd	r30, Y+20	; 0x14
    3ce6:	fd 89       	ldd	r31, Y+21	; 0x15
    3ce8:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    3cea:	ea 89       	ldd	r30, Y+18	; 0x12
    3cec:	fb 89       	ldd	r31, Y+19	; 0x13
    3cee:	80 81       	ld	r24, Z
    3cf0:	80 61       	ori	r24, 0x10	; 16
    3cf2:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    3cf4:	ea 89       	ldd	r30, Y+18	; 0x12
    3cf6:	fb 89       	ldd	r31, Y+19	; 0x13
    3cf8:	80 81       	ld	r24, Z
    3cfa:	88 60       	ori	r24, 0x08	; 8
    3cfc:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    3cfe:	ea 89       	ldd	r30, Y+18	; 0x12
    3d00:	fb 89       	ldd	r31, Y+19	; 0x13
    3d02:	80 81       	ld	r24, Z
    3d04:	80 68       	ori	r24, 0x80	; 128
    3d06:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    3d08:	ea 89       	ldd	r30, Y+18	; 0x12
    3d0a:	fb 89       	ldd	r31, Y+19	; 0x13
    3d0c:	80 81       	ld	r24, Z
    3d0e:	8f 7d       	andi	r24, 0xDF	; 223
    3d10:	80 83       	st	Z, r24
}
    3d12:	df 91       	pop	r29
    3d14:	cf 91       	pop	r28
    3d16:	1f 91       	pop	r17
    3d18:	ff 90       	pop	r15
    3d1a:	ef 90       	pop	r14
    3d1c:	df 90       	pop	r13
    3d1e:	cf 90       	pop	r12
    3d20:	08 95       	ret

00003d22 <__vector_25>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    3d22:	1f 92       	push	r1
    3d24:	0f 92       	push	r0
    3d26:	0f b6       	in	r0, 0x3f	; 63
    3d28:	0f 92       	push	r0
    3d2a:	11 24       	eor	r1, r1
    3d2c:	2f 93       	push	r18
    3d2e:	8f 93       	push	r24
    3d30:	9f 93       	push	r25
    3d32:	ef 93       	push	r30
    3d34:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3d36:	e0 91 4d 06 	lds	r30, 0x064D	; 0x80064d <Serial1+0x10>
    3d3a:	f0 91 4e 06 	lds	r31, 0x064E	; 0x80064e <Serial1+0x11>
    3d3e:	80 81       	ld	r24, Z
    3d40:	e0 91 53 06 	lds	r30, 0x0653	; 0x800653 <Serial1+0x16>
    3d44:	f0 91 54 06 	lds	r31, 0x0654	; 0x800654 <Serial1+0x17>
    3d48:	82 fd       	sbrc	r24, 2
    3d4a:	12 c0       	rjmp	.+36     	; 0x3d70 <__vector_25+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3d4c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3d4e:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <Serial1+0x19>
    3d52:	8f 5f       	subi	r24, 0xFF	; 255
    3d54:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3d56:	20 91 57 06 	lds	r18, 0x0657	; 0x800657 <Serial1+0x1a>
    3d5a:	82 17       	cp	r24, r18
    3d5c:	51 f0       	breq	.+20     	; 0x3d72 <__vector_25+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    3d5e:	e0 91 56 06 	lds	r30, 0x0656	; 0x800656 <Serial1+0x19>
    3d62:	f0 e0       	ldi	r31, 0x00	; 0
    3d64:	e3 5c       	subi	r30, 0xC3	; 195
    3d66:	f9 4f       	sbci	r31, 0xF9	; 249
    3d68:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3d6a:	80 93 56 06 	sts	0x0656, r24	; 0x800656 <Serial1+0x19>
    3d6e:	01 c0       	rjmp	.+2      	; 0x3d72 <__vector_25+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3d70:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    3d72:	ff 91       	pop	r31
    3d74:	ef 91       	pop	r30
    3d76:	9f 91       	pop	r25
    3d78:	8f 91       	pop	r24
    3d7a:	2f 91       	pop	r18
    3d7c:	0f 90       	pop	r0
    3d7e:	0f be       	out	0x3f, r0	; 63
    3d80:	0f 90       	pop	r0
    3d82:	1f 90       	pop	r1
    3d84:	18 95       	reti

00003d86 <__vector_26>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    3d86:	1f 92       	push	r1
    3d88:	0f 92       	push	r0
    3d8a:	0f b6       	in	r0, 0x3f	; 63
    3d8c:	0f 92       	push	r0
    3d8e:	11 24       	eor	r1, r1
    3d90:	2f 93       	push	r18
    3d92:	3f 93       	push	r19
    3d94:	4f 93       	push	r20
    3d96:	5f 93       	push	r21
    3d98:	6f 93       	push	r22
    3d9a:	7f 93       	push	r23
    3d9c:	8f 93       	push	r24
    3d9e:	9f 93       	push	r25
    3da0:	af 93       	push	r26
    3da2:	bf 93       	push	r27
    3da4:	ef 93       	push	r30
    3da6:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    3da8:	8d e3       	ldi	r24, 0x3D	; 61
    3daa:	96 e0       	ldi	r25, 0x06	; 6
    3dac:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    3db0:	ff 91       	pop	r31
    3db2:	ef 91       	pop	r30
    3db4:	bf 91       	pop	r27
    3db6:	af 91       	pop	r26
    3db8:	9f 91       	pop	r25
    3dba:	8f 91       	pop	r24
    3dbc:	7f 91       	pop	r23
    3dbe:	6f 91       	pop	r22
    3dc0:	5f 91       	pop	r21
    3dc2:	4f 91       	pop	r20
    3dc4:	3f 91       	pop	r19
    3dc6:	2f 91       	pop	r18
    3dc8:	0f 90       	pop	r0
    3dca:	0f be       	out	0x3f, r0	; 63
    3dcc:	0f 90       	pop	r0
    3dce:	1f 90       	pop	r1
    3dd0:	18 95       	reti

00003dd2 <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    3dd2:	8d e3       	ldi	r24, 0x3D	; 61
    3dd4:	96 e0       	ldi	r25, 0x06	; 6
    3dd6:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <_ZN14HardwareSerial9availableEv>
    3dda:	21 e0       	ldi	r18, 0x01	; 1
    3ddc:	89 2b       	or	r24, r25
    3dde:	09 f4       	brne	.+2      	; 0x3de2 <_Z17Serial1_availablev+0x10>
    3de0:	20 e0       	ldi	r18, 0x00	; 0
}
    3de2:	82 2f       	mov	r24, r18
    3de4:	08 95       	ret

00003de6 <_GLOBAL__sub_I___vector_25>:
    3de6:	ed e3       	ldi	r30, 0x3D	; 61
    3de8:	f6 e0       	ldi	r31, 0x06	; 6
    3dea:	13 82       	std	Z+3, r1	; 0x03
    3dec:	12 82       	std	Z+2, r1	; 0x02
    3dee:	88 ee       	ldi	r24, 0xE8	; 232
    3df0:	93 e0       	ldi	r25, 0x03	; 3
    3df2:	a0 e0       	ldi	r26, 0x00	; 0
    3df4:	b0 e0       	ldi	r27, 0x00	; 0
    3df6:	84 83       	std	Z+4, r24	; 0x04
    3df8:	95 83       	std	Z+5, r25	; 0x05
    3dfa:	a6 83       	std	Z+6, r26	; 0x06
    3dfc:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3dfe:	87 e2       	ldi	r24, 0x27	; 39
    3e00:	93 e0       	ldi	r25, 0x03	; 3
    3e02:	91 83       	std	Z+1, r25	; 0x01
    3e04:	80 83       	st	Z, r24
    3e06:	8d ec       	ldi	r24, 0xCD	; 205
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	95 87       	std	Z+13, r25	; 0x0d
    3e0c:	84 87       	std	Z+12, r24	; 0x0c
    3e0e:	8c ec       	ldi	r24, 0xCC	; 204
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	97 87       	std	Z+15, r25	; 0x0f
    3e14:	86 87       	std	Z+14, r24	; 0x0e
    3e16:	88 ec       	ldi	r24, 0xC8	; 200
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	91 8b       	std	Z+17, r25	; 0x11
    3e1c:	80 8b       	std	Z+16, r24	; 0x10
    3e1e:	89 ec       	ldi	r24, 0xC9	; 201
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	93 8b       	std	Z+19, r25	; 0x13
    3e24:	82 8b       	std	Z+18, r24	; 0x12
    3e26:	8a ec       	ldi	r24, 0xCA	; 202
    3e28:	90 e0       	ldi	r25, 0x00	; 0
    3e2a:	95 8b       	std	Z+21, r25	; 0x15
    3e2c:	84 8b       	std	Z+20, r24	; 0x14
    3e2e:	8e ec       	ldi	r24, 0xCE	; 206
    3e30:	90 e0       	ldi	r25, 0x00	; 0
    3e32:	97 8b       	std	Z+23, r25	; 0x17
    3e34:	86 8b       	std	Z+22, r24	; 0x16
    3e36:	11 8e       	std	Z+25, r1	; 0x19
    3e38:	12 8e       	std	Z+26, r1	; 0x1a
    3e3a:	13 8e       	std	Z+27, r1	; 0x1b
    3e3c:	14 8e       	std	Z+28, r1	; 0x1c
    3e3e:	08 95       	ret

00003e40 <initVariant>:
    3e40:	08 95       	ret

00003e42 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    3e42:	0e 94 21 27 	call	0x4e42	; 0x4e42 <init>

	initVariant();
    3e46:	0e 94 20 1f 	call	0x3e40	; 0x3e40 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
    3e4a:	8a ed       	ldi	r24, 0xDA	; 218
    3e4c:	96 e0       	ldi	r25, 0x06	; 6
    3e4e:	0e 94 38 25 	call	0x4a70	; 0x4a70 <_ZN10USBDevice_6attachEv>
#endif
	
	setup();
    3e52:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3e56:	cf e8       	ldi	r28, 0x8F	; 143
    3e58:	dd e1       	ldi	r29, 0x1D	; 29
#endif
	
	setup();
    
	for (;;) {
		loop();
    3e5a:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <loop>
		if (serialEventRun) serialEventRun();
    3e5e:	20 97       	sbiw	r28, 0x00	; 0
    3e60:	e1 f3       	breq	.-8      	; 0x3e5a <main+0x18>
    3e62:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <_Z14serialEventRunv>
    3e66:	f9 cf       	rjmp	.-14     	; 0x3e5a <main+0x18>

00003e68 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    3e68:	cf 92       	push	r12
    3e6a:	df 92       	push	r13
    3e6c:	ef 92       	push	r14
    3e6e:	ff 92       	push	r15
    3e70:	0f 93       	push	r16
    3e72:	1f 93       	push	r17
    3e74:	cf 93       	push	r28
    3e76:	df 93       	push	r29
    3e78:	6c 01       	movw	r12, r24
    3e7a:	7a 01       	movw	r14, r20
    3e7c:	8b 01       	movw	r16, r22
    3e7e:	c0 e0       	ldi	r28, 0x00	; 0
    3e80:	d0 e0       	ldi	r29, 0x00	; 0
    3e82:	ce 15       	cp	r28, r14
    3e84:	df 05       	cpc	r29, r15
    3e86:	81 f0       	breq	.+32     	; 0x3ea8 <_ZN5Print5writeEPKhj+0x40>
    3e88:	d8 01       	movw	r26, r16
    3e8a:	6d 91       	ld	r22, X+
    3e8c:	8d 01       	movw	r16, r26
    3e8e:	d6 01       	movw	r26, r12
    3e90:	ed 91       	ld	r30, X+
    3e92:	fc 91       	ld	r31, X
    3e94:	01 90       	ld	r0, Z+
    3e96:	f0 81       	ld	r31, Z
    3e98:	e0 2d       	mov	r30, r0
    3e9a:	c6 01       	movw	r24, r12
    3e9c:	09 95       	icall
    3e9e:	89 2b       	or	r24, r25
    3ea0:	11 f0       	breq	.+4      	; 0x3ea6 <_ZN5Print5writeEPKhj+0x3e>
    3ea2:	21 96       	adiw	r28, 0x01	; 1
    3ea4:	ee cf       	rjmp	.-36     	; 0x3e82 <_ZN5Print5writeEPKhj+0x1a>
    3ea6:	7e 01       	movw	r14, r28
    3ea8:	c7 01       	movw	r24, r14
    3eaa:	df 91       	pop	r29
    3eac:	cf 91       	pop	r28
    3eae:	1f 91       	pop	r17
    3eb0:	0f 91       	pop	r16
    3eb2:	ff 90       	pop	r15
    3eb4:	ef 90       	pop	r14
    3eb6:	df 90       	pop	r13
    3eb8:	cf 90       	pop	r12
    3eba:	08 95       	ret

00003ebc <_ZN5Print5writeEPKc>:
    3ebc:	61 15       	cp	r22, r1
    3ebe:	71 05       	cpc	r23, r1
    3ec0:	79 f0       	breq	.+30     	; 0x3ee0 <_ZN5Print5writeEPKc+0x24>
    3ec2:	fb 01       	movw	r30, r22
    3ec4:	01 90       	ld	r0, Z+
    3ec6:	00 20       	and	r0, r0
    3ec8:	e9 f7       	brne	.-6      	; 0x3ec4 <_ZN5Print5writeEPKc+0x8>
    3eca:	31 97       	sbiw	r30, 0x01	; 1
    3ecc:	af 01       	movw	r20, r30
    3ece:	46 1b       	sub	r20, r22
    3ed0:	57 0b       	sbc	r21, r23
    3ed2:	dc 01       	movw	r26, r24
    3ed4:	ed 91       	ld	r30, X+
    3ed6:	fc 91       	ld	r31, X
    3ed8:	02 80       	ldd	r0, Z+2	; 0x02
    3eda:	f3 81       	ldd	r31, Z+3	; 0x03
    3edc:	e0 2d       	mov	r30, r0
    3ede:	09 94       	ijmp
    3ee0:	80 e0       	ldi	r24, 0x00	; 0
    3ee2:	90 e0       	ldi	r25, 0x00	; 0
    3ee4:	08 95       	ret

00003ee6 <_ZN5Print5printERK6String>:
    3ee6:	db 01       	movw	r26, r22
    3ee8:	14 96       	adiw	r26, 0x04	; 4
    3eea:	4d 91       	ld	r20, X+
    3eec:	5c 91       	ld	r21, X
    3eee:	15 97       	sbiw	r26, 0x05	; 5
    3ef0:	6d 91       	ld	r22, X+
    3ef2:	7c 91       	ld	r23, X
    3ef4:	dc 01       	movw	r26, r24
    3ef6:	ed 91       	ld	r30, X+
    3ef8:	fc 91       	ld	r31, X
    3efa:	02 80       	ldd	r0, Z+2	; 0x02
    3efc:	f3 81       	ldd	r31, Z+3	; 0x03
    3efe:	e0 2d       	mov	r30, r0
    3f00:	09 94       	ijmp

00003f02 <_ZN5Print5printEPKc>:
    3f02:	0c 94 5e 1f 	jmp	0x3ebc	; 0x3ebc <_ZN5Print5writeEPKc>

00003f06 <_ZN5Print5printEc>:
    3f06:	dc 01       	movw	r26, r24
    3f08:	ed 91       	ld	r30, X+
    3f0a:	fc 91       	ld	r31, X
    3f0c:	01 90       	ld	r0, Z+
    3f0e:	f0 81       	ld	r31, Z
    3f10:	e0 2d       	mov	r30, r0
    3f12:	09 94       	ijmp

00003f14 <_ZN5Print11printNumberEmh>:
    3f14:	8f 92       	push	r8
    3f16:	9f 92       	push	r9
    3f18:	af 92       	push	r10
    3f1a:	bf 92       	push	r11
    3f1c:	ef 92       	push	r14
    3f1e:	ff 92       	push	r15
    3f20:	0f 93       	push	r16
    3f22:	1f 93       	push	r17
    3f24:	cf 93       	push	r28
    3f26:	df 93       	push	r29
    3f28:	cd b7       	in	r28, 0x3d	; 61
    3f2a:	de b7       	in	r29, 0x3e	; 62
    3f2c:	a1 97       	sbiw	r28, 0x21	; 33
    3f2e:	0f b6       	in	r0, 0x3f	; 63
    3f30:	f8 94       	cli
    3f32:	de bf       	out	0x3e, r29	; 62
    3f34:	0f be       	out	0x3f, r0	; 63
    3f36:	cd bf       	out	0x3d, r28	; 61
    3f38:	7c 01       	movw	r14, r24
    3f3a:	fa 01       	movw	r30, r20
    3f3c:	cb 01       	movw	r24, r22
    3f3e:	19 a2       	std	Y+33, r1	; 0x21
    3f40:	22 30       	cpi	r18, 0x02	; 2
    3f42:	08 f4       	brcc	.+2      	; 0x3f46 <_ZN5Print11printNumberEmh+0x32>
    3f44:	2a e0       	ldi	r18, 0x0A	; 10
    3f46:	8e 01       	movw	r16, r28
    3f48:	0f 5d       	subi	r16, 0xDF	; 223
    3f4a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f4c:	82 2e       	mov	r8, r18
    3f4e:	91 2c       	mov	r9, r1
    3f50:	a1 2c       	mov	r10, r1
    3f52:	b1 2c       	mov	r11, r1
    3f54:	bf 01       	movw	r22, r30
    3f56:	a5 01       	movw	r20, r10
    3f58:	94 01       	movw	r18, r8
    3f5a:	0e 94 47 2a 	call	0x548e	; 0x548e <__udivmodsi4>
    3f5e:	f9 01       	movw	r30, r18
    3f60:	ca 01       	movw	r24, r20
    3f62:	01 50       	subi	r16, 0x01	; 1
    3f64:	11 09       	sbc	r17, r1
    3f66:	6a 30       	cpi	r22, 0x0A	; 10
    3f68:	10 f4       	brcc	.+4      	; 0x3f6e <_ZN5Print11printNumberEmh+0x5a>
    3f6a:	60 5d       	subi	r22, 0xD0	; 208
    3f6c:	01 c0       	rjmp	.+2      	; 0x3f70 <_ZN5Print11printNumberEmh+0x5c>
    3f6e:	69 5c       	subi	r22, 0xC9	; 201
    3f70:	d8 01       	movw	r26, r16
    3f72:	6c 93       	st	X, r22
    3f74:	23 2b       	or	r18, r19
    3f76:	24 2b       	or	r18, r20
    3f78:	25 2b       	or	r18, r21
    3f7a:	61 f7       	brne	.-40     	; 0x3f54 <_ZN5Print11printNumberEmh+0x40>
    3f7c:	b8 01       	movw	r22, r16
    3f7e:	c7 01       	movw	r24, r14
    3f80:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <_ZN5Print5writeEPKc>
    3f84:	a1 96       	adiw	r28, 0x21	; 33
    3f86:	0f b6       	in	r0, 0x3f	; 63
    3f88:	f8 94       	cli
    3f8a:	de bf       	out	0x3e, r29	; 62
    3f8c:	0f be       	out	0x3f, r0	; 63
    3f8e:	cd bf       	out	0x3d, r28	; 61
    3f90:	df 91       	pop	r29
    3f92:	cf 91       	pop	r28
    3f94:	1f 91       	pop	r17
    3f96:	0f 91       	pop	r16
    3f98:	ff 90       	pop	r15
    3f9a:	ef 90       	pop	r14
    3f9c:	bf 90       	pop	r11
    3f9e:	af 90       	pop	r10
    3fa0:	9f 90       	pop	r9
    3fa2:	8f 90       	pop	r8
    3fa4:	08 95       	ret

00003fa6 <_ZN5Print5printEmi>:
    3fa6:	21 15       	cp	r18, r1
    3fa8:	31 05       	cpc	r19, r1
    3faa:	41 f4       	brne	.+16     	; 0x3fbc <_ZN5Print5printEmi+0x16>
    3fac:	dc 01       	movw	r26, r24
    3fae:	ed 91       	ld	r30, X+
    3fb0:	fc 91       	ld	r31, X
    3fb2:	01 90       	ld	r0, Z+
    3fb4:	f0 81       	ld	r31, Z
    3fb6:	e0 2d       	mov	r30, r0
    3fb8:	64 2f       	mov	r22, r20
    3fba:	09 94       	ijmp
    3fbc:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <_ZN5Print11printNumberEmh>

00003fc0 <_ZN5Print5printEji>:
    3fc0:	9a 01       	movw	r18, r20
    3fc2:	ab 01       	movw	r20, r22
    3fc4:	60 e0       	ldi	r22, 0x00	; 0
    3fc6:	70 e0       	ldi	r23, 0x00	; 0
    3fc8:	0c 94 d3 1f 	jmp	0x3fa6	; 0x3fa6 <_ZN5Print5printEmi>

00003fcc <_ZN5Print5printEli>:
    3fcc:	cf 92       	push	r12
    3fce:	df 92       	push	r13
    3fd0:	ef 92       	push	r14
    3fd2:	ff 92       	push	r15
    3fd4:	0f 93       	push	r16
    3fd6:	1f 93       	push	r17
    3fd8:	cf 93       	push	r28
    3fda:	df 93       	push	r29
    3fdc:	21 15       	cp	r18, r1
    3fde:	31 05       	cpc	r19, r1
    3fe0:	81 f4       	brne	.+32     	; 0x4002 <_ZN5Print5printEli+0x36>
    3fe2:	dc 01       	movw	r26, r24
    3fe4:	ed 91       	ld	r30, X+
    3fe6:	fc 91       	ld	r31, X
    3fe8:	01 90       	ld	r0, Z+
    3fea:	f0 81       	ld	r31, Z
    3fec:	e0 2d       	mov	r30, r0
    3fee:	64 2f       	mov	r22, r20
    3ff0:	df 91       	pop	r29
    3ff2:	cf 91       	pop	r28
    3ff4:	1f 91       	pop	r17
    3ff6:	0f 91       	pop	r16
    3ff8:	ff 90       	pop	r15
    3ffa:	ef 90       	pop	r14
    3ffc:	df 90       	pop	r13
    3ffe:	cf 90       	pop	r12
    4000:	09 94       	ijmp
    4002:	2a 30       	cpi	r18, 0x0A	; 10
    4004:	31 05       	cpc	r19, r1
    4006:	01 f5       	brne	.+64     	; 0x4048 <_ZN5Print5printEli+0x7c>
    4008:	77 ff       	sbrs	r23, 7
    400a:	1d c0       	rjmp	.+58     	; 0x4046 <_ZN5Print5printEli+0x7a>
    400c:	6a 01       	movw	r12, r20
    400e:	7b 01       	movw	r14, r22
    4010:	ec 01       	movw	r28, r24
    4012:	6d e2       	ldi	r22, 0x2D	; 45
    4014:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <_ZN5Print5printEc>
    4018:	8c 01       	movw	r16, r24
    401a:	44 27       	eor	r20, r20
    401c:	55 27       	eor	r21, r21
    401e:	ba 01       	movw	r22, r20
    4020:	4c 19       	sub	r20, r12
    4022:	5d 09       	sbc	r21, r13
    4024:	6e 09       	sbc	r22, r14
    4026:	7f 09       	sbc	r23, r15
    4028:	2a e0       	ldi	r18, 0x0A	; 10
    402a:	ce 01       	movw	r24, r28
    402c:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <_ZN5Print11printNumberEmh>
    4030:	80 0f       	add	r24, r16
    4032:	91 1f       	adc	r25, r17
    4034:	df 91       	pop	r29
    4036:	cf 91       	pop	r28
    4038:	1f 91       	pop	r17
    403a:	0f 91       	pop	r16
    403c:	ff 90       	pop	r15
    403e:	ef 90       	pop	r14
    4040:	df 90       	pop	r13
    4042:	cf 90       	pop	r12
    4044:	08 95       	ret
    4046:	2a e0       	ldi	r18, 0x0A	; 10
    4048:	df 91       	pop	r29
    404a:	cf 91       	pop	r28
    404c:	1f 91       	pop	r17
    404e:	0f 91       	pop	r16
    4050:	ff 90       	pop	r15
    4052:	ef 90       	pop	r14
    4054:	df 90       	pop	r13
    4056:	cf 90       	pop	r12
    4058:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <_ZN5Print11printNumberEmh>

0000405c <_ZN5Print5printEii>:
    405c:	9a 01       	movw	r18, r20
    405e:	ab 01       	movw	r20, r22
    4060:	77 0f       	add	r23, r23
    4062:	66 0b       	sbc	r22, r22
    4064:	77 0b       	sbc	r23, r23
    4066:	0c 94 e6 1f 	jmp	0x3fcc	; 0x3fcc <_ZN5Print5printEli>

0000406a <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    406a:	7f 92       	push	r7
    406c:	8f 92       	push	r8
    406e:	9f 92       	push	r9
    4070:	af 92       	push	r10
    4072:	bf 92       	push	r11
    4074:	cf 92       	push	r12
    4076:	df 92       	push	r13
    4078:	ef 92       	push	r14
    407a:	ff 92       	push	r15
    407c:	0f 93       	push	r16
    407e:	1f 93       	push	r17
    4080:	cf 93       	push	r28
    4082:	df 93       	push	r29
    4084:	8c 01       	movw	r16, r24
    4086:	6a 01       	movw	r12, r20
    4088:	7b 01       	movw	r14, r22
    408a:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    408c:	9a 01       	movw	r18, r20
    408e:	ab 01       	movw	r20, r22
    4090:	c7 01       	movw	r24, r14
    4092:	b6 01       	movw	r22, r12
    4094:	0e 94 2e 2a 	call	0x545c	; 0x545c <__unordsf2>
    4098:	88 23       	and	r24, r24
    409a:	19 f0       	breq	.+6      	; 0x40a2 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    409c:	68 e3       	ldi	r22, 0x38	; 56
    409e:	73 e0       	ldi	r23, 0x03	; 3
    40a0:	27 c0       	rjmp	.+78     	; 0x40f0 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    40a2:	46 01       	movw	r8, r12
    40a4:	57 01       	movw	r10, r14
    40a6:	e8 94       	clt
    40a8:	b7 f8       	bld	r11, 7
    40aa:	2f ef       	ldi	r18, 0xFF	; 255
    40ac:	3f ef       	ldi	r19, 0xFF	; 255
    40ae:	4f e7       	ldi	r20, 0x7F	; 127
    40b0:	5f e7       	ldi	r21, 0x7F	; 127
    40b2:	c5 01       	movw	r24, r10
    40b4:	b4 01       	movw	r22, r8
    40b6:	0e 94 2e 2a 	call	0x545c	; 0x545c <__unordsf2>
    40ba:	81 11       	cpse	r24, r1
    40bc:	0d c0       	rjmp	.+26     	; 0x40d8 <_ZN5Print10printFloatEdh+0x6e>
    40be:	2f ef       	ldi	r18, 0xFF	; 255
    40c0:	3f ef       	ldi	r19, 0xFF	; 255
    40c2:	4f e7       	ldi	r20, 0x7F	; 127
    40c4:	5f e7       	ldi	r21, 0x7F	; 127
    40c6:	c5 01       	movw	r24, r10
    40c8:	b4 01       	movw	r22, r8
    40ca:	0e 94 5f 1a 	call	0x34be	; 0x34be <__cmpsf2>
    40ce:	18 16       	cp	r1, r24
    40d0:	1c f4       	brge	.+6      	; 0x40d8 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    40d2:	6c e3       	ldi	r22, 0x3C	; 60
    40d4:	73 e0       	ldi	r23, 0x03	; 3
    40d6:	0c c0       	rjmp	.+24     	; 0x40f0 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    40d8:	2f ef       	ldi	r18, 0xFF	; 255
    40da:	3f ef       	ldi	r19, 0xFF	; 255
    40dc:	4f e7       	ldi	r20, 0x7F	; 127
    40de:	5f e4       	ldi	r21, 0x4F	; 79
    40e0:	c7 01       	movw	r24, r14
    40e2:	b6 01       	movw	r22, r12
    40e4:	0e 94 be 1b 	call	0x377c	; 0x377c <__gesf2>
    40e8:	18 16       	cp	r1, r24
    40ea:	94 f4       	brge	.+36     	; 0x4110 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    40ec:	60 e4       	ldi	r22, 0x40	; 64
    40ee:	73 e0       	ldi	r23, 0x03	; 3
    40f0:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    40f2:	df 91       	pop	r29
    40f4:	cf 91       	pop	r28
    40f6:	1f 91       	pop	r17
    40f8:	0f 91       	pop	r16
    40fa:	ff 90       	pop	r15
    40fc:	ef 90       	pop	r14
    40fe:	df 90       	pop	r13
    4100:	cf 90       	pop	r12
    4102:	bf 90       	pop	r11
    4104:	af 90       	pop	r10
    4106:	9f 90       	pop	r9
    4108:	8f 90       	pop	r8
    410a:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    410c:	0c 94 5e 1f 	jmp	0x3ebc	; 0x3ebc <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    4110:	2f ef       	ldi	r18, 0xFF	; 255
    4112:	3f ef       	ldi	r19, 0xFF	; 255
    4114:	4f e7       	ldi	r20, 0x7F	; 127
    4116:	5f ec       	ldi	r21, 0xCF	; 207
    4118:	c7 01       	movw	r24, r14
    411a:	b6 01       	movw	r22, r12
    411c:	0e 94 5f 1a 	call	0x34be	; 0x34be <__cmpsf2>
    4120:	87 fd       	sbrc	r24, 7
    4122:	e4 cf       	rjmp	.-56     	; 0x40ec <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    4124:	20 e0       	ldi	r18, 0x00	; 0
    4126:	30 e0       	ldi	r19, 0x00	; 0
    4128:	a9 01       	movw	r20, r18
    412a:	c7 01       	movw	r24, r14
    412c:	b6 01       	movw	r22, r12
    412e:	0e 94 5f 1a 	call	0x34be	; 0x34be <__cmpsf2>
    4132:	87 ff       	sbrs	r24, 7
    4134:	0a c0       	rjmp	.+20     	; 0x414a <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    4136:	6d e2       	ldi	r22, 0x2D	; 45
    4138:	c8 01       	movw	r24, r16
    413a:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <_ZN5Print5printEc>
    413e:	ec 01       	movw	r28, r24
     number = -number;
    4140:	f7 fa       	bst	r15, 7
    4142:	f0 94       	com	r15
    4144:	f7 f8       	bld	r15, 7
    4146:	f0 94       	com	r15
    4148:	02 c0       	rjmp	.+4      	; 0x414e <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    414a:	c0 e0       	ldi	r28, 0x00	; 0
    414c:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    414e:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    4150:	60 e0       	ldi	r22, 0x00	; 0
    4152:	70 e0       	ldi	r23, 0x00	; 0
    4154:	80 e0       	ldi	r24, 0x00	; 0
    4156:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    4158:	7b 14       	cp	r7, r11
    415a:	41 f0       	breq	.+16     	; 0x416c <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    415c:	20 e0       	ldi	r18, 0x00	; 0
    415e:	30 e0       	ldi	r19, 0x00	; 0
    4160:	40 e2       	ldi	r20, 0x20	; 32
    4162:	51 e4       	ldi	r21, 0x41	; 65
    4164:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    4168:	b3 94       	inc	r11
    416a:	f6 cf       	rjmp	.-20     	; 0x4158 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    416c:	a7 01       	movw	r20, r14
    416e:	96 01       	movw	r18, r12
    4170:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__addsf3>
    4174:	6b 01       	movw	r12, r22
    4176:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    4178:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <__fixunssfsi>
    417c:	4b 01       	movw	r8, r22
    417e:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    4180:	2a e0       	ldi	r18, 0x0A	; 10
    4182:	ab 01       	movw	r20, r22
    4184:	bc 01       	movw	r22, r24
    4186:	c8 01       	movw	r24, r16
    4188:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    418c:	c8 0f       	add	r28, r24
    418e:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    4190:	77 20       	and	r7, r7
    4192:	b9 f1       	breq	.+110    	; 0x4202 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    4194:	c5 01       	movw	r24, r10
    4196:	b4 01       	movw	r22, r8
    4198:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__floatunsisf>
    419c:	9b 01       	movw	r18, r22
    419e:	ac 01       	movw	r20, r24
    41a0:	c7 01       	movw	r24, r14
    41a2:	b6 01       	movw	r22, r12
    41a4:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__subsf3>
    41a8:	6b 01       	movw	r12, r22
    41aa:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    41ac:	6e e2       	ldi	r22, 0x2E	; 46
    41ae:	c8 01       	movw	r24, r16
    41b0:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <_ZN5Print5printEc>
    41b4:	c8 0f       	add	r28, r24
    41b6:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    41b8:	20 e0       	ldi	r18, 0x00	; 0
    41ba:	30 e0       	ldi	r19, 0x00	; 0
    41bc:	40 e2       	ldi	r20, 0x20	; 32
    41be:	51 e4       	ldi	r21, 0x41	; 65
    41c0:	c7 01       	movw	r24, r14
    41c2:	b6 01       	movw	r22, r12
    41c4:	0e 94 c3 1b 	call	0x3786	; 0x3786 <__mulsf3>
    41c8:	4b 01       	movw	r8, r22
    41ca:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    41cc:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <__fixunssfsi>
    41d0:	6b 01       	movw	r12, r22
    41d2:	7c 01       	movw	r14, r24
    n += print(toPrint);
    41d4:	4a e0       	ldi	r20, 0x0A	; 10
    41d6:	50 e0       	ldi	r21, 0x00	; 0
    41d8:	c8 01       	movw	r24, r16
    41da:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <_ZN5Print5printEji>
    41de:	c8 0f       	add	r28, r24
    41e0:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    41e2:	b6 01       	movw	r22, r12
    41e4:	80 e0       	ldi	r24, 0x00	; 0
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	0e 94 0c 1b 	call	0x3618	; 0x3618 <__floatunsisf>
    41ec:	9b 01       	movw	r18, r22
    41ee:	ac 01       	movw	r20, r24
    41f0:	c5 01       	movw	r24, r10
    41f2:	b4 01       	movw	r22, r8
    41f4:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__subsf3>
    41f8:	6b 01       	movw	r12, r22
    41fa:	7c 01       	movw	r14, r24
    41fc:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    41fe:	71 10       	cpse	r7, r1
    4200:	db cf       	rjmp	.-74     	; 0x41b8 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    4202:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    4204:	df 91       	pop	r29
    4206:	cf 91       	pop	r28
    4208:	1f 91       	pop	r17
    420a:	0f 91       	pop	r16
    420c:	ff 90       	pop	r15
    420e:	ef 90       	pop	r14
    4210:	df 90       	pop	r13
    4212:	cf 90       	pop	r12
    4214:	bf 90       	pop	r11
    4216:	af 90       	pop	r10
    4218:	9f 90       	pop	r9
    421a:	8f 90       	pop	r8
    421c:	7f 90       	pop	r7
    421e:	08 95       	ret

00004220 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    4220:	0c 94 35 20 	jmp	0x406a	; 0x406a <_ZN5Print10printFloatEdh>

00004224 <_ZL4RecvPVhh>:
//=======================================================================
//=======================================================================

USBDevice_ USBDevice;

USBDevice_::USBDevice_()
    4224:	61 50       	subi	r22, 0x01	; 1
    4226:	30 f0       	brcs	.+12     	; 0x4234 <_ZL4RecvPVhh+0x10>
    4228:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    422c:	fc 01       	movw	r30, r24
    422e:	20 83       	st	Z, r18
    4230:	01 96       	adiw	r24, 0x01	; 1
    4232:	f8 cf       	rjmp	.-16     	; 0x4224 <_ZL4RecvPVhh>
    4234:	28 98       	cbi	0x05, 0	; 5
    4236:	84 e6       	ldi	r24, 0x64	; 100
    4238:	80 93 e2 06 	sts	0x06E2, r24	; 0x8006e2 <RxLEDPulse>
    423c:	08 95       	ret

0000423e <_ZL11SendControlh>:
    423e:	40 91 dd 06 	lds	r20, 0x06DD	; 0x8006dd <_ZL6_cmark>
    4242:	50 91 de 06 	lds	r21, 0x06DE	; 0x8006de <_ZL6_cmark+0x1>
    4246:	20 91 db 06 	lds	r18, 0x06DB	; 0x8006db <_ZL5_cend>
    424a:	30 91 dc 06 	lds	r19, 0x06DC	; 0x8006dc <_ZL5_cend+0x1>
    424e:	42 17       	cp	r20, r18
    4250:	53 07       	cpc	r21, r19
    4252:	b4 f4       	brge	.+44     	; 0x4280 <_ZL11SendControlh+0x42>
    4254:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4258:	95 70       	andi	r25, 0x05	; 5
    425a:	e1 f3       	breq	.-8      	; 0x4254 <_ZL11SendControlh+0x16>
    425c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4260:	92 fd       	sbrc	r25, 2
    4262:	19 c0       	rjmp	.+50     	; 0x4296 <_ZL11SendControlh+0x58>
    4264:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    4268:	80 91 dd 06 	lds	r24, 0x06DD	; 0x8006dd <_ZL6_cmark>
    426c:	90 91 de 06 	lds	r25, 0x06DE	; 0x8006de <_ZL6_cmark+0x1>
    4270:	01 96       	adiw	r24, 0x01	; 1
    4272:	8f 73       	andi	r24, 0x3F	; 63
    4274:	99 27       	eor	r25, r25
    4276:	89 2b       	or	r24, r25
    4278:	19 f4       	brne	.+6      	; 0x4280 <_ZL11SendControlh+0x42>
    427a:	8e ef       	ldi	r24, 0xFE	; 254
    427c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4280:	80 91 dd 06 	lds	r24, 0x06DD	; 0x8006dd <_ZL6_cmark>
    4284:	90 91 de 06 	lds	r25, 0x06DE	; 0x8006de <_ZL6_cmark+0x1>
    4288:	01 96       	adiw	r24, 0x01	; 1
    428a:	90 93 de 06 	sts	0x06DE, r25	; 0x8006de <_ZL6_cmark+0x1>
    428e:	80 93 dd 06 	sts	0x06DD, r24	; 0x8006dd <_ZL6_cmark>
    4292:	81 e0       	ldi	r24, 0x01	; 1
    4294:	08 95       	ret
    4296:	80 e0       	ldi	r24, 0x00	; 0
    4298:	08 95       	ret

0000429a <_ZL24USB_SendStringDescriptorPKhhh>:
    429a:	df 92       	push	r13
    429c:	ef 92       	push	r14
    429e:	ff 92       	push	r15
    42a0:	0f 93       	push	r16
    42a2:	1f 93       	push	r17
    42a4:	cf 93       	push	r28
    42a6:	df 93       	push	r29
    42a8:	d8 2e       	mov	r13, r24
    42aa:	f9 2e       	mov	r15, r25
    42ac:	e4 2e       	mov	r14, r20
    42ae:	06 2f       	mov	r16, r22
    42b0:	10 e0       	ldi	r17, 0x00	; 0
    42b2:	c8 01       	movw	r24, r16
    42b4:	01 96       	adiw	r24, 0x01	; 1
    42b6:	88 0f       	add	r24, r24
    42b8:	0e 94 1f 21 	call	0x423e	; 0x423e <_ZL11SendControlh>
    42bc:	83 e0       	ldi	r24, 0x03	; 3
    42be:	0e 94 1f 21 	call	0x423e	; 0x423e <_ZL11SendControlh>
    42c2:	cd 2d       	mov	r28, r13
    42c4:	df 2d       	mov	r29, r15
    42c6:	0c 0f       	add	r16, r28
    42c8:	1d 1f       	adc	r17, r29
    42ca:	c0 17       	cp	r28, r16
    42cc:	d1 07       	cpc	r29, r17
    42ce:	89 f0       	breq	.+34     	; 0x42f2 <_ZL24USB_SendStringDescriptorPKhhh+0x58>
    42d0:	e7 fe       	sbrs	r14, 7
    42d2:	03 c0       	rjmp	.+6      	; 0x42da <_ZL24USB_SendStringDescriptorPKhhh+0x40>
    42d4:	fe 01       	movw	r30, r28
    42d6:	84 91       	lpm	r24, Z
    42d8:	01 c0       	rjmp	.+2      	; 0x42dc <_ZL24USB_SendStringDescriptorPKhhh+0x42>
    42da:	88 81       	ld	r24, Y
    42dc:	0e 94 1f 21 	call	0x423e	; 0x423e <_ZL11SendControlh>
    42e0:	f8 2e       	mov	r15, r24
    42e2:	80 e0       	ldi	r24, 0x00	; 0
    42e4:	0e 94 1f 21 	call	0x423e	; 0x423e <_ZL11SendControlh>
    42e8:	8f 21       	and	r24, r15
    42ea:	21 96       	adiw	r28, 0x01	; 1
    42ec:	81 11       	cpse	r24, r1
    42ee:	ed cf       	rjmp	.-38     	; 0x42ca <_ZL24USB_SendStringDescriptorPKhhh+0x30>
    42f0:	01 c0       	rjmp	.+2      	; 0x42f4 <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
    42f2:	81 e0       	ldi	r24, 0x01	; 1
    42f4:	df 91       	pop	r29
    42f6:	cf 91       	pop	r28
    42f8:	1f 91       	pop	r17
    42fa:	0f 91       	pop	r16
    42fc:	ff 90       	pop	r15
    42fe:	ef 90       	pop	r14
    4300:	df 90       	pop	r13
    4302:	08 95       	ret

00004304 <_ZL15USB_ClockEnablev>:
    4304:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    4308:	81 60       	ori	r24, 0x01	; 1
    430a:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    430e:	80 ea       	ldi	r24, 0xA0	; 160
    4310:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    4314:	89 b5       	in	r24, 0x29	; 41
    4316:	80 61       	ori	r24, 0x10	; 16
    4318:	89 bd       	out	0x29, r24	; 41
    431a:	89 b5       	in	r24, 0x29	; 41
    431c:	82 60       	ori	r24, 0x02	; 2
    431e:	89 bd       	out	0x29, r24	; 41
    4320:	09 b4       	in	r0, 0x29	; 41
    4322:	00 fe       	sbrs	r0, 0
    4324:	fd cf       	rjmp	.-6      	; 0x4320 <_ZL15USB_ClockEnablev+0x1c>
    4326:	61 e0       	ldi	r22, 0x01	; 1
    4328:	70 e0       	ldi	r23, 0x00	; 0
    432a:	80 e0       	ldi	r24, 0x00	; 0
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	0e 94 da 26 	call	0x4db4	; 0x4db4 <delay>
    4332:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    4336:	8f 7c       	andi	r24, 0xCF	; 207
    4338:	80 61       	ori	r24, 0x10	; 16
    433a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    433e:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    4342:	80 7f       	andi	r24, 0xF0	; 240
    4344:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    4348:	08 95       	ret

0000434a <_ZL14SendInterfacesv>:
    434a:	cf 93       	push	r28
    434c:	df 93       	push	r29
    434e:	1f 92       	push	r1
    4350:	cd b7       	in	r28, 0x3d	; 61
    4352:	de b7       	in	r29, 0x3e	; 62
    4354:	19 82       	std	Y+1, r1	; 0x01
    4356:	ce 01       	movw	r24, r28
    4358:	01 96       	adiw	r24, 0x01	; 1
    435a:	0e 94 9e 1c 	call	0x393c	; 0x393c <_Z16CDC_GetInterfacePh>
    435e:	0e 94 1a 2a 	call	0x5434	; 0x5434 <_Z12PluggableUSBv>
    4362:	be 01       	movw	r22, r28
    4364:	6f 5f       	subi	r22, 0xFF	; 255
    4366:	7f 4f       	sbci	r23, 0xFF	; 255
    4368:	0e 94 95 29 	call	0x532a	; 0x532a <_ZN13PluggableUSB_12getInterfaceEPh>
    436c:	89 81       	ldd	r24, Y+1	; 0x01
    436e:	0f 90       	pop	r0
    4370:	df 91       	pop	r29
    4372:	cf 91       	pop	r28
    4374:	08 95       	ret

00004376 <_ZN6LockEPC1Eh>:
    4376:	2f b7       	in	r18, 0x3f	; 63
    4378:	fc 01       	movw	r30, r24
    437a:	20 83       	st	Z, r18
    437c:	f8 94       	cli
    437e:	67 70       	andi	r22, 0x07	; 7
    4380:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    4384:	08 95       	ret

00004386 <_Z13USB_Availableh>:
    4386:	cf 93       	push	r28
    4388:	df 93       	push	r29
    438a:	1f 92       	push	r1
    438c:	cd b7       	in	r28, 0x3d	; 61
    438e:	de b7       	in	r29, 0x3e	; 62
    4390:	68 2f       	mov	r22, r24
    4392:	ce 01       	movw	r24, r28
    4394:	01 96       	adiw	r24, 0x01	; 1
    4396:	0e 94 bb 21 	call	0x4376	; 0x4376 <_ZN6LockEPC1Eh>
    439a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    439e:	99 81       	ldd	r25, Y+1	; 0x01
    43a0:	9f bf       	out	0x3f, r25	; 63
    43a2:	0f 90       	pop	r0
    43a4:	df 91       	pop	r29
    43a6:	cf 91       	pop	r28
    43a8:	08 95       	ret

000043aa <_Z8USB_RecvhPvi>:
    43aa:	ef 92       	push	r14
    43ac:	ff 92       	push	r15
    43ae:	0f 93       	push	r16
    43b0:	1f 93       	push	r17
    43b2:	cf 93       	push	r28
    43b4:	df 93       	push	r29
    43b6:	1f 92       	push	r1
    43b8:	cd b7       	in	r28, 0x3d	; 61
    43ba:	de b7       	in	r29, 0x3e	; 62
    43bc:	90 91 e1 06 	lds	r25, 0x06E1	; 0x8006e1 <_usbConfiguration>
    43c0:	99 23       	and	r25, r25
    43c2:	11 f0       	breq	.+4      	; 0x43c8 <_Z8USB_RecvhPvi+0x1e>
    43c4:	57 ff       	sbrs	r21, 7
    43c6:	03 c0       	rjmp	.+6      	; 0x43ce <_Z8USB_RecvhPvi+0x24>
    43c8:	8f ef       	ldi	r24, 0xFF	; 255
    43ca:	9f ef       	ldi	r25, 0xFF	; 255
    43cc:	29 c0       	rjmp	.+82     	; 0x4420 <_Z8USB_RecvhPvi+0x76>
    43ce:	8a 01       	movw	r16, r20
    43d0:	7b 01       	movw	r14, r22
    43d2:	68 2f       	mov	r22, r24
    43d4:	ce 01       	movw	r24, r28
    43d6:	01 96       	adiw	r24, 0x01	; 1
    43d8:	0e 94 bb 21 	call	0x4376	; 0x4376 <_ZN6LockEPC1Eh>
    43dc:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    43e0:	30 e0       	ldi	r19, 0x00	; 0
    43e2:	02 17       	cp	r16, r18
    43e4:	13 07       	cpc	r17, r19
    43e6:	0c f4       	brge	.+2      	; 0x43ea <_Z8USB_RecvhPvi+0x40>
    43e8:	98 01       	movw	r18, r16
    43ea:	82 2f       	mov	r24, r18
    43ec:	f7 01       	movw	r30, r14
    43ee:	94 e6       	ldi	r25, 0x64	; 100
    43f0:	81 50       	subi	r24, 0x01	; 1
    43f2:	38 f0       	brcs	.+14     	; 0x4402 <_Z8USB_RecvhPvi+0x58>
    43f4:	28 98       	cbi	0x05, 0	; 5
    43f6:	90 93 e2 06 	sts	0x06E2, r25	; 0x8006e2 <RxLEDPulse>
    43fa:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    43fe:	41 93       	st	Z+, r20
    4400:	f7 cf       	rjmp	.-18     	; 0x43f0 <_Z8USB_RecvhPvi+0x46>
    4402:	21 15       	cp	r18, r1
    4404:	31 05       	cpc	r19, r1
    4406:	21 f0       	breq	.+8      	; 0x4410 <_Z8USB_RecvhPvi+0x66>
    4408:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    440c:	88 23       	and	r24, r24
    440e:	21 f0       	breq	.+8      	; 0x4418 <_Z8USB_RecvhPvi+0x6e>
    4410:	89 81       	ldd	r24, Y+1	; 0x01
    4412:	8f bf       	out	0x3f, r24	; 63
    4414:	c9 01       	movw	r24, r18
    4416:	04 c0       	rjmp	.+8      	; 0x4420 <_Z8USB_RecvhPvi+0x76>
    4418:	8b e6       	ldi	r24, 0x6B	; 107
    441a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    441e:	f8 cf       	rjmp	.-16     	; 0x4410 <_Z8USB_RecvhPvi+0x66>
    4420:	0f 90       	pop	r0
    4422:	df 91       	pop	r29
    4424:	cf 91       	pop	r28
    4426:	1f 91       	pop	r17
    4428:	0f 91       	pop	r16
    442a:	ff 90       	pop	r15
    442c:	ef 90       	pop	r14
    442e:	08 95       	ret

00004430 <_Z8USB_Recvh>:
    4430:	cf 93       	push	r28
    4432:	df 93       	push	r29
    4434:	1f 92       	push	r1
    4436:	cd b7       	in	r28, 0x3d	; 61
    4438:	de b7       	in	r29, 0x3e	; 62
    443a:	41 e0       	ldi	r20, 0x01	; 1
    443c:	50 e0       	ldi	r21, 0x00	; 0
    443e:	be 01       	movw	r22, r28
    4440:	6f 5f       	subi	r22, 0xFF	; 255
    4442:	7f 4f       	sbci	r23, 0xFF	; 255
    4444:	0e 94 d5 21 	call	0x43aa	; 0x43aa <_Z8USB_RecvhPvi>
    4448:	01 97       	sbiw	r24, 0x01	; 1
    444a:	19 f4       	brne	.+6      	; 0x4452 <_Z8USB_Recvh+0x22>
    444c:	89 81       	ldd	r24, Y+1	; 0x01
    444e:	90 e0       	ldi	r25, 0x00	; 0
    4450:	02 c0       	rjmp	.+4      	; 0x4456 <_Z8USB_Recvh+0x26>
    4452:	8f ef       	ldi	r24, 0xFF	; 255
    4454:	9f ef       	ldi	r25, 0xFF	; 255
    4456:	0f 90       	pop	r0
    4458:	df 91       	pop	r29
    445a:	cf 91       	pop	r28
    445c:	08 95       	ret

0000445e <_Z13USB_SendSpaceh>:
    445e:	cf 93       	push	r28
    4460:	df 93       	push	r29
    4462:	1f 92       	push	r1
    4464:	cd b7       	in	r28, 0x3d	; 61
    4466:	de b7       	in	r29, 0x3e	; 62
    4468:	68 2f       	mov	r22, r24
    446a:	ce 01       	movw	r24, r28
    446c:	01 96       	adiw	r24, 0x01	; 1
    446e:	0e 94 bb 21 	call	0x4376	; 0x4376 <_ZN6LockEPC1Eh>
    4472:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4476:	89 2f       	mov	r24, r25
    4478:	80 72       	andi	r24, 0x20	; 32
    447a:	95 ff       	sbrs	r25, 5
    447c:	04 c0       	rjmp	.+8      	; 0x4486 <_Z13USB_SendSpaceh+0x28>
    447e:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    4482:	80 e4       	ldi	r24, 0x40	; 64
    4484:	89 1b       	sub	r24, r25
    4486:	99 81       	ldd	r25, Y+1	; 0x01
    4488:	9f bf       	out	0x3f, r25	; 63
    448a:	0f 90       	pop	r0
    448c:	df 91       	pop	r29
    448e:	cf 91       	pop	r28
    4490:	08 95       	ret

00004492 <_Z8USB_SendhPKvi>:
    4492:	5f 92       	push	r5
    4494:	6f 92       	push	r6
    4496:	7f 92       	push	r7
    4498:	8f 92       	push	r8
    449a:	9f 92       	push	r9
    449c:	af 92       	push	r10
    449e:	bf 92       	push	r11
    44a0:	cf 92       	push	r12
    44a2:	df 92       	push	r13
    44a4:	ef 92       	push	r14
    44a6:	ff 92       	push	r15
    44a8:	0f 93       	push	r16
    44aa:	1f 93       	push	r17
    44ac:	cf 93       	push	r28
    44ae:	df 93       	push	r29
    44b0:	1f 92       	push	r1
    44b2:	cd b7       	in	r28, 0x3d	; 61
    44b4:	de b7       	in	r29, 0x3e	; 62
    44b6:	98 2e       	mov	r9, r24
    44b8:	6b 01       	movw	r12, r22
    44ba:	b4 2e       	mov	r11, r20
    44bc:	05 2f       	mov	r16, r21
    44be:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <_usbConfiguration>
    44c2:	81 11       	cpse	r24, r1
    44c4:	03 c0       	rjmp	.+6      	; 0x44cc <_Z8USB_SendhPKvi+0x3a>
    44c6:	8f ef       	ldi	r24, 0xFF	; 255
    44c8:	9f ef       	ldi	r25, 0xFF	; 255
    44ca:	77 c0       	rjmp	.+238    	; 0x45ba <_Z8USB_SendhPKvi+0x128>
    44cc:	80 91 df 06 	lds	r24, 0x06DF	; 0x8006df <_usbSuspendState>
    44d0:	80 ff       	sbrs	r24, 0
    44d2:	05 c0       	rjmp	.+10     	; 0x44de <_Z8USB_SendhPKvi+0x4c>
    44d4:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    44d8:	82 60       	ori	r24, 0x02	; 2
    44da:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    44de:	eb 2c       	mov	r14, r11
    44e0:	f0 2e       	mov	r15, r16
    44e2:	a1 2c       	mov	r10, r1
    44e4:	8a ef       	ldi	r24, 0xFA	; 250
    44e6:	88 2e       	mov	r8, r24
    44e8:	89 2d       	mov	r24, r9
    44ea:	80 72       	andi	r24, 0x20	; 32
    44ec:	68 2e       	mov	r6, r24
    44ee:	89 2d       	mov	r24, r9
    44f0:	80 74       	andi	r24, 0x40	; 64
    44f2:	58 2e       	mov	r5, r24
    44f4:	9a e3       	ldi	r25, 0x3A	; 58
    44f6:	79 2e       	mov	r7, r25
    44f8:	e1 14       	cp	r14, r1
    44fa:	f1 04       	cpc	r15, r1
    44fc:	19 f4       	brne	.+6      	; 0x4504 <_Z8USB_SendhPKvi+0x72>
    44fe:	aa 20       	and	r10, r10
    4500:	09 f4       	brne	.+2      	; 0x4504 <_Z8USB_SendhPKvi+0x72>
    4502:	55 c0       	rjmp	.+170    	; 0x45ae <_Z8USB_SendhPKvi+0x11c>
    4504:	89 2d       	mov	r24, r9
    4506:	0e 94 2f 22 	call	0x445e	; 0x445e <_Z13USB_SendSpaceh>
    450a:	18 2f       	mov	r17, r24
    450c:	81 11       	cpse	r24, r1
    450e:	0a c0       	rjmp	.+20     	; 0x4524 <_Z8USB_SendhPKvi+0x92>
    4510:	8a 94       	dec	r8
    4512:	88 20       	and	r8, r8
    4514:	c1 f2       	breq	.-80     	; 0x44c6 <_Z8USB_SendhPKvi+0x34>
    4516:	61 e0       	ldi	r22, 0x01	; 1
    4518:	70 e0       	ldi	r23, 0x00	; 0
    451a:	80 e0       	ldi	r24, 0x00	; 0
    451c:	90 e0       	ldi	r25, 0x00	; 0
    451e:	0e 94 da 26 	call	0x4db4	; 0x4db4 <delay>
    4522:	ea cf       	rjmp	.-44     	; 0x44f8 <_Z8USB_SendhPKvi+0x66>
    4524:	90 e0       	ldi	r25, 0x00	; 0
    4526:	e8 16       	cp	r14, r24
    4528:	f9 06       	cpc	r15, r25
    452a:	0c f4       	brge	.+2      	; 0x452e <_Z8USB_SendhPKvi+0x9c>
    452c:	1e 2d       	mov	r17, r14
    452e:	69 2d       	mov	r22, r9
    4530:	ce 01       	movw	r24, r28
    4532:	01 96       	adiw	r24, 0x01	; 1
    4534:	0e 94 bb 21 	call	0x4376	; 0x4376 <_ZN6LockEPC1Eh>
    4538:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    453c:	85 ff       	sbrs	r24, 5
    453e:	34 c0       	rjmp	.+104    	; 0x45a8 <_Z8USB_SendhPKvi+0x116>
    4540:	81 2f       	mov	r24, r17
    4542:	90 e0       	ldi	r25, 0x00	; 0
    4544:	e8 1a       	sub	r14, r24
    4546:	f9 0a       	sbc	r15, r25
    4548:	66 20       	and	r6, r6
    454a:	29 f0       	breq	.+10     	; 0x4556 <_Z8USB_SendhPKvi+0xc4>
    454c:	11 50       	subi	r17, 0x01	; 1
    454e:	a0 f0       	brcs	.+40     	; 0x4578 <_Z8USB_SendhPKvi+0xe6>
    4550:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    4554:	fb cf       	rjmp	.-10     	; 0x454c <_Z8USB_SendhPKvi+0xba>
    4556:	f6 01       	movw	r30, r12
    4558:	97 fe       	sbrs	r9, 7
    455a:	0a c0       	rjmp	.+20     	; 0x4570 <_Z8USB_SendhPKvi+0xde>
    455c:	11 50       	subi	r17, 0x01	; 1
    455e:	50 f0       	brcs	.+20     	; 0x4574 <_Z8USB_SendhPKvi+0xe2>
    4560:	24 91       	lpm	r18, Z
    4562:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    4566:	31 96       	adiw	r30, 0x01	; 1
    4568:	f9 cf       	rjmp	.-14     	; 0x455c <_Z8USB_SendhPKvi+0xca>
    456a:	21 91       	ld	r18, Z+
    456c:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    4570:	11 50       	subi	r17, 0x01	; 1
    4572:	d8 f7       	brcc	.-10     	; 0x456a <_Z8USB_SendhPKvi+0xd8>
    4574:	c8 0e       	add	r12, r24
    4576:	d9 1e       	adc	r13, r25
    4578:	aa 20       	and	r10, r10
    457a:	19 f0       	breq	.+6      	; 0x4582 <_Z8USB_SendhPKvi+0xf0>
    457c:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4580:	0b c0       	rjmp	.+22     	; 0x4598 <_Z8USB_SendhPKvi+0x106>
    4582:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4586:	85 fd       	sbrc	r24, 5
    4588:	09 c0       	rjmp	.+18     	; 0x459c <_Z8USB_SendhPKvi+0x10a>
    458a:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    458e:	aa 24       	eor	r10, r10
    4590:	a3 94       	inc	r10
    4592:	e1 14       	cp	r14, r1
    4594:	f1 04       	cpc	r15, r1
    4596:	41 f0       	breq	.+16     	; 0x45a8 <_Z8USB_SendhPKvi+0x116>
    4598:	a1 2c       	mov	r10, r1
    459a:	06 c0       	rjmp	.+12     	; 0x45a8 <_Z8USB_SendhPKvi+0x116>
    459c:	e1 14       	cp	r14, r1
    459e:	f1 04       	cpc	r15, r1
    45a0:	19 f4       	brne	.+6      	; 0x45a8 <_Z8USB_SendhPKvi+0x116>
    45a2:	51 10       	cpse	r5, r1
    45a4:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    45a8:	89 81       	ldd	r24, Y+1	; 0x01
    45aa:	8f bf       	out	0x3f, r24	; 63
    45ac:	a5 cf       	rjmp	.-182    	; 0x44f8 <_Z8USB_SendhPKvi+0x66>
    45ae:	5d 98       	cbi	0x0b, 5	; 11
    45b0:	84 e6       	ldi	r24, 0x64	; 100
    45b2:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <TxLEDPulse>
    45b6:	8b 2d       	mov	r24, r11
    45b8:	90 2f       	mov	r25, r16
    45ba:	0f 90       	pop	r0
    45bc:	df 91       	pop	r29
    45be:	cf 91       	pop	r28
    45c0:	1f 91       	pop	r17
    45c2:	0f 91       	pop	r16
    45c4:	ff 90       	pop	r15
    45c6:	ef 90       	pop	r14
    45c8:	df 90       	pop	r13
    45ca:	cf 90       	pop	r12
    45cc:	bf 90       	pop	r11
    45ce:	af 90       	pop	r10
    45d0:	9f 90       	pop	r9
    45d2:	8f 90       	pop	r8
    45d4:	7f 90       	pop	r7
    45d6:	6f 90       	pop	r6
    45d8:	5f 90       	pop	r5
    45da:	08 95       	ret

000045dc <_Z11InitControli>:
    45dc:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    45e0:	10 92 de 06 	sts	0x06DE, r1	; 0x8006de <_ZL6_cmark+0x1>
    45e4:	10 92 dd 06 	sts	0x06DD, r1	; 0x8006dd <_ZL6_cmark>
    45e8:	90 93 dc 06 	sts	0x06DC, r25	; 0x8006dc <_ZL5_cend+0x1>
    45ec:	80 93 db 06 	sts	0x06DB, r24	; 0x8006db <_ZL5_cend>
    45f0:	08 95       	ret

000045f2 <_Z15USB_SendControlhPKvi>:
    45f2:	df 92       	push	r13
    45f4:	ef 92       	push	r14
    45f6:	ff 92       	push	r15
    45f8:	0f 93       	push	r16
    45fa:	1f 93       	push	r17
    45fc:	cf 93       	push	r28
    45fe:	df 93       	push	r29
    4600:	d8 2e       	mov	r13, r24
    4602:	8a 01       	movw	r16, r20
    4604:	7b 01       	movw	r14, r22
    4606:	e4 0e       	add	r14, r20
    4608:	f5 1e       	adc	r15, r21
    460a:	eb 01       	movw	r28, r22
    460c:	ce 15       	cp	r28, r14
    460e:	df 05       	cpc	r29, r15
    4610:	71 f0       	breq	.+28     	; 0x462e <_Z15USB_SendControlhPKvi+0x3c>
    4612:	d7 fe       	sbrs	r13, 7
    4614:	03 c0       	rjmp	.+6      	; 0x461c <_Z15USB_SendControlhPKvi+0x2a>
    4616:	fe 01       	movw	r30, r28
    4618:	84 91       	lpm	r24, Z
    461a:	01 c0       	rjmp	.+2      	; 0x461e <_Z15USB_SendControlhPKvi+0x2c>
    461c:	88 81       	ld	r24, Y
    461e:	0e 94 1f 21 	call	0x423e	; 0x423e <_ZL11SendControlh>
    4622:	21 96       	adiw	r28, 0x01	; 1
    4624:	81 11       	cpse	r24, r1
    4626:	f2 cf       	rjmp	.-28     	; 0x460c <_Z15USB_SendControlhPKvi+0x1a>
    4628:	8f ef       	ldi	r24, 0xFF	; 255
    462a:	9f ef       	ldi	r25, 0xFF	; 255
    462c:	01 c0       	rjmp	.+2      	; 0x4630 <_Z15USB_SendControlhPKvi+0x3e>
    462e:	c8 01       	movw	r24, r16
    4630:	df 91       	pop	r29
    4632:	cf 91       	pop	r28
    4634:	1f 91       	pop	r17
    4636:	0f 91       	pop	r16
    4638:	ff 90       	pop	r15
    463a:	ef 90       	pop	r14
    463c:	df 90       	pop	r13
    463e:	08 95       	ret

00004640 <_Z15USB_RecvControlPvi>:
    4640:	af 92       	push	r10
    4642:	bf 92       	push	r11
    4644:	df 92       	push	r13
    4646:	ef 92       	push	r14
    4648:	ff 92       	push	r15
    464a:	0f 93       	push	r16
    464c:	1f 93       	push	r17
    464e:	cf 93       	push	r28
    4650:	df 93       	push	r29
    4652:	5c 01       	movw	r10, r24
    4654:	8b 01       	movw	r16, r22
    4656:	eb 01       	movw	r28, r22
    4658:	9b ef       	ldi	r25, 0xFB	; 251
    465a:	d9 2e       	mov	r13, r25
    465c:	20 97       	sbiw	r28, 0x00	; 0
    465e:	c1 f0       	breq	.+48     	; 0x4690 <_Z15USB_RecvControlPvi+0x50>
    4660:	7e 01       	movw	r14, r28
    4662:	c1 34       	cpi	r28, 0x41	; 65
    4664:	d1 05       	cpc	r29, r1
    4666:	1c f0       	brlt	.+6      	; 0x466e <_Z15USB_RecvControlPvi+0x2e>
    4668:	80 e4       	ldi	r24, 0x40	; 64
    466a:	e8 2e       	mov	r14, r24
    466c:	f1 2c       	mov	r15, r1
    466e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4672:	82 ff       	sbrs	r24, 2
    4674:	fc cf       	rjmp	.-8      	; 0x466e <_Z15USB_RecvControlPvi+0x2e>
    4676:	c8 01       	movw	r24, r16
    4678:	8c 1b       	sub	r24, r28
    467a:	9d 0b       	sbc	r25, r29
    467c:	6e 2d       	mov	r22, r14
    467e:	8a 0d       	add	r24, r10
    4680:	9b 1d       	adc	r25, r11
    4682:	0e 94 12 21 	call	0x4224	; 0x4224 <_ZL4RecvPVhh>
    4686:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    468a:	ce 19       	sub	r28, r14
    468c:	df 09       	sbc	r29, r15
    468e:	e6 cf       	rjmp	.-52     	; 0x465c <_Z15USB_RecvControlPvi+0x1c>
    4690:	c8 01       	movw	r24, r16
    4692:	df 91       	pop	r29
    4694:	cf 91       	pop	r28
    4696:	1f 91       	pop	r17
    4698:	0f 91       	pop	r16
    469a:	ff 90       	pop	r15
    469c:	ef 90       	pop	r14
    469e:	df 90       	pop	r13
    46a0:	bf 90       	pop	r11
    46a2:	af 90       	pop	r10
    46a4:	08 95       	ret

000046a6 <__vector_11>:
    46a6:	1f 92       	push	r1
    46a8:	0f 92       	push	r0
    46aa:	0f b6       	in	r0, 0x3f	; 63
    46ac:	0f 92       	push	r0
    46ae:	11 24       	eor	r1, r1
    46b0:	cf 92       	push	r12
    46b2:	df 92       	push	r13
    46b4:	ef 92       	push	r14
    46b6:	ff 92       	push	r15
    46b8:	0f 93       	push	r16
    46ba:	1f 93       	push	r17
    46bc:	2f 93       	push	r18
    46be:	3f 93       	push	r19
    46c0:	4f 93       	push	r20
    46c2:	5f 93       	push	r21
    46c4:	6f 93       	push	r22
    46c6:	7f 93       	push	r23
    46c8:	8f 93       	push	r24
    46ca:	9f 93       	push	r25
    46cc:	af 93       	push	r26
    46ce:	bf 93       	push	r27
    46d0:	ef 93       	push	r30
    46d2:	ff 93       	push	r31
    46d4:	cf 93       	push	r28
    46d6:	df 93       	push	r29
    46d8:	cd b7       	in	r28, 0x3d	; 61
    46da:	de b7       	in	r29, 0x3e	; 62
    46dc:	6c 97       	sbiw	r28, 0x1c	; 28
    46de:	de bf       	out	0x3e, r29	; 62
    46e0:	cd bf       	out	0x3d, r28	; 61
    46e2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    46e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    46ea:	83 ff       	sbrs	r24, 3
    46ec:	17 c1       	rjmp	.+558    	; 0x491c <__vector_11+0x276>
    46ee:	68 e0       	ldi	r22, 0x08	; 8
    46f0:	ce 01       	movw	r24, r28
    46f2:	45 96       	adiw	r24, 0x15	; 21
    46f4:	0e 94 12 21 	call	0x4224	; 0x4224 <_ZL4RecvPVhh>
    46f8:	82 ef       	ldi	r24, 0xF2	; 242
    46fa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    46fe:	8d 89       	ldd	r24, Y+21	; 0x15
    4700:	87 ff       	sbrs	r24, 7
    4702:	05 c0       	rjmp	.+10     	; 0x470e <__vector_11+0x68>
    4704:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4708:	90 ff       	sbrs	r25, 0
    470a:	fc cf       	rjmp	.-8      	; 0x4704 <__vector_11+0x5e>
    470c:	03 c0       	rjmp	.+6      	; 0x4714 <__vector_11+0x6e>
    470e:	9e ef       	ldi	r25, 0xFE	; 254
    4710:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4714:	98 2f       	mov	r25, r24
    4716:	90 76       	andi	r25, 0x60	; 96
    4718:	09 f0       	breq	.+2      	; 0x471c <__vector_11+0x76>
    471a:	d8 c0       	rjmp	.+432    	; 0x48cc <__vector_11+0x226>
    471c:	9e 89       	ldd	r25, Y+22	; 0x16
    471e:	4f 89       	ldd	r20, Y+23	; 0x17
    4720:	58 8d       	ldd	r21, Y+24	; 0x18
    4722:	2f 89       	ldd	r18, Y+23	; 0x17
    4724:	18 8d       	ldd	r17, Y+24	; 0x18
    4726:	91 11       	cpse	r25, r1
    4728:	0c c0       	rjmp	.+24     	; 0x4742 <__vector_11+0x9c>
    472a:	80 38       	cpi	r24, 0x80	; 128
    472c:	29 f4       	brne	.+10     	; 0x4738 <__vector_11+0x92>
    472e:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <_usbCurrentStatus>
    4732:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    4736:	02 c0       	rjmp	.+4      	; 0x473c <__vector_11+0x96>
    4738:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    473c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    4740:	e6 c0       	rjmp	.+460    	; 0x490e <__vector_11+0x268>
    4742:	91 30       	cpi	r25, 0x01	; 1
    4744:	51 f4       	brne	.+20     	; 0x475a <__vector_11+0xb4>
    4746:	81 11       	cpse	r24, r1
    4748:	e2 c0       	rjmp	.+452    	; 0x490e <__vector_11+0x268>
    474a:	41 30       	cpi	r20, 0x01	; 1
    474c:	51 05       	cpc	r21, r1
    474e:	09 f0       	breq	.+2      	; 0x4752 <__vector_11+0xac>
    4750:	de c0       	rjmp	.+444    	; 0x490e <__vector_11+0x268>
    4752:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <_usbCurrentStatus>
    4756:	8d 7f       	andi	r24, 0xFD	; 253
    4758:	0b c0       	rjmp	.+22     	; 0x4770 <__vector_11+0xca>
    475a:	93 30       	cpi	r25, 0x03	; 3
    475c:	61 f4       	brne	.+24     	; 0x4776 <__vector_11+0xd0>
    475e:	81 11       	cpse	r24, r1
    4760:	d6 c0       	rjmp	.+428    	; 0x490e <__vector_11+0x268>
    4762:	41 30       	cpi	r20, 0x01	; 1
    4764:	51 05       	cpc	r21, r1
    4766:	09 f0       	breq	.+2      	; 0x476a <__vector_11+0xc4>
    4768:	d2 c0       	rjmp	.+420    	; 0x490e <__vector_11+0x268>
    476a:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <_usbCurrentStatus>
    476e:	82 60       	ori	r24, 0x02	; 2
    4770:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <_usbCurrentStatus>
    4774:	cc c0       	rjmp	.+408    	; 0x490e <__vector_11+0x268>
    4776:	95 30       	cpi	r25, 0x05	; 5
    4778:	49 f4       	brne	.+18     	; 0x478c <__vector_11+0xe6>
    477a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    477e:	80 ff       	sbrs	r24, 0
    4780:	fc cf       	rjmp	.-8      	; 0x477a <__vector_11+0xd4>
    4782:	82 2f       	mov	r24, r18
    4784:	80 68       	ori	r24, 0x80	; 128
    4786:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    478a:	c1 c0       	rjmp	.+386    	; 0x490e <__vector_11+0x268>
    478c:	96 30       	cpi	r25, 0x06	; 6
    478e:	09 f0       	breq	.+2      	; 0x4792 <__vector_11+0xec>
    4790:	70 c0       	rjmp	.+224    	; 0x4872 <__vector_11+0x1cc>
    4792:	eb 8c       	ldd	r14, Y+27	; 0x1b
    4794:	fc 8c       	ldd	r15, Y+28	; 0x1c
    4796:	12 30       	cpi	r17, 0x02	; 2
    4798:	69 f5       	brne	.+90     	; 0x47f4 <__vector_11+0x14e>
    479a:	80 e0       	ldi	r24, 0x00	; 0
    479c:	90 e0       	ldi	r25, 0x00	; 0
    479e:	0e 94 ee 22 	call	0x45dc	; 0x45dc <_Z11InitControli>
    47a2:	0e 94 a5 21 	call	0x434a	; 0x434a <_ZL14SendInterfacesv>
    47a6:	99 e0       	ldi	r25, 0x09	; 9
    47a8:	9e 01       	movw	r18, r28
    47aa:	2f 5f       	subi	r18, 0xFF	; 255
    47ac:	3f 4f       	sbci	r19, 0xFF	; 255
    47ae:	69 01       	movw	r12, r18
    47b0:	f9 01       	movw	r30, r18
    47b2:	29 2f       	mov	r18, r25
    47b4:	11 92       	st	Z+, r1
    47b6:	2a 95       	dec	r18
    47b8:	e9 f7       	brne	.-6      	; 0x47b4 <__vector_11+0x10e>
    47ba:	99 83       	std	Y+1, r25	; 0x01
    47bc:	1a 83       	std	Y+2, r17	; 0x02
    47be:	91 e0       	ldi	r25, 0x01	; 1
    47c0:	9e 83       	std	Y+6, r25	; 0x06
    47c2:	90 ea       	ldi	r25, 0xA0	; 160
    47c4:	98 87       	std	Y+8, r25	; 0x08
    47c6:	9a ef       	ldi	r25, 0xFA	; 250
    47c8:	99 87       	std	Y+9, r25	; 0x09
    47ca:	20 91 dd 06 	lds	r18, 0x06DD	; 0x8006dd <_ZL6_cmark>
    47ce:	30 91 de 06 	lds	r19, 0x06DE	; 0x8006de <_ZL6_cmark+0x1>
    47d2:	27 5f       	subi	r18, 0xF7	; 247
    47d4:	3f 4f       	sbci	r19, 0xFF	; 255
    47d6:	3c 83       	std	Y+4, r19	; 0x04
    47d8:	2b 83       	std	Y+3, r18	; 0x03
    47da:	8d 83       	std	Y+5, r24	; 0x05
    47dc:	c7 01       	movw	r24, r14
    47de:	0e 94 ee 22 	call	0x45dc	; 0x45dc <_Z11InitControli>
    47e2:	49 e0       	ldi	r20, 0x09	; 9
    47e4:	50 e0       	ldi	r21, 0x00	; 0
    47e6:	b6 01       	movw	r22, r12
    47e8:	80 e0       	ldi	r24, 0x00	; 0
    47ea:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <_Z15USB_SendControlhPKvi>
    47ee:	0e 94 a5 21 	call	0x434a	; 0x434a <_ZL14SendInterfacesv>
    47f2:	8d c0       	rjmp	.+282    	; 0x490e <__vector_11+0x268>
    47f4:	c7 01       	movw	r24, r14
    47f6:	0e 94 ee 22 	call	0x45dc	; 0x45dc <_Z11InitControli>
    47fa:	0e 94 1a 2a 	call	0x5434	; 0x5434 <_Z12PluggableUSBv>
    47fe:	be 01       	movw	r22, r28
    4800:	6b 5e       	subi	r22, 0xEB	; 235
    4802:	7f 4f       	sbci	r23, 0xFF	; 255
    4804:	0e 94 be 29 	call	0x537c	; 0x537c <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    4808:	00 97       	sbiw	r24, 0x00	; 0
    480a:	19 f0       	breq	.+6      	; 0x4812 <__vector_11+0x16c>
    480c:	0c f0       	brlt	.+2      	; 0x4810 <__vector_11+0x16a>
    480e:	7f c0       	rjmp	.+254    	; 0x490e <__vector_11+0x268>
    4810:	82 c0       	rjmp	.+260    	; 0x4916 <__vector_11+0x270>
    4812:	11 30       	cpi	r17, 0x01	; 1
    4814:	09 f4       	brne	.+2      	; 0x4818 <__vector_11+0x172>
    4816:	70 c0       	rjmp	.+224    	; 0x48f8 <__vector_11+0x252>
    4818:	13 30       	cpi	r17, 0x03	; 3
    481a:	09 f0       	breq	.+2      	; 0x481e <__vector_11+0x178>
    481c:	7c c0       	rjmp	.+248    	; 0x4916 <__vector_11+0x270>
    481e:	8f 89       	ldd	r24, Y+23	; 0x17
    4820:	88 23       	and	r24, r24
    4822:	09 f4       	brne	.+2      	; 0x4826 <__vector_11+0x180>
    4824:	6c c0       	rjmp	.+216    	; 0x48fe <__vector_11+0x258>
    4826:	82 30       	cpi	r24, 0x02	; 2
    4828:	29 f4       	brne	.+10     	; 0x4834 <__vector_11+0x18e>
    482a:	40 e8       	ldi	r20, 0x80	; 128
    482c:	60 e1       	ldi	r22, 0x10	; 16
    482e:	88 e4       	ldi	r24, 0x48	; 72
    4830:	91 e0       	ldi	r25, 0x01	; 1
    4832:	06 c0       	rjmp	.+12     	; 0x4840 <__vector_11+0x19a>
    4834:	81 30       	cpi	r24, 0x01	; 1
    4836:	39 f4       	brne	.+14     	; 0x4846 <__vector_11+0x1a0>
    4838:	40 e8       	ldi	r20, 0x80	; 128
    483a:	6b e0       	ldi	r22, 0x0B	; 11
    483c:	8c e3       	ldi	r24, 0x3C	; 60
    483e:	91 e0       	ldi	r25, 0x01	; 1
    4840:	0e 94 4d 21 	call	0x429a	; 0x429a <_ZL24USB_SendStringDescriptorPKhhh>
    4844:	56 c0       	rjmp	.+172    	; 0x48f2 <__vector_11+0x24c>
    4846:	83 30       	cpi	r24, 0x03	; 3
    4848:	09 f0       	breq	.+2      	; 0x484c <__vector_11+0x1a6>
    484a:	65 c0       	rjmp	.+202    	; 0x4916 <__vector_11+0x270>
    484c:	0e 94 1a 2a 	call	0x5434	; 0x5434 <_Z12PluggableUSBv>
    4850:	8e 01       	movw	r16, r28
    4852:	0f 5f       	subi	r16, 0xFF	; 255
    4854:	1f 4f       	sbci	r17, 0xFF	; 255
    4856:	b8 01       	movw	r22, r16
    4858:	0e 94 dd 29 	call	0x53ba	; 0x53ba <_ZN13PluggableUSB_12getShortNameEPc>
    485c:	f8 01       	movw	r30, r16
    485e:	01 90       	ld	r0, Z+
    4860:	00 20       	and	r0, r0
    4862:	e9 f7       	brne	.-6      	; 0x485e <__vector_11+0x1b8>
    4864:	31 97       	sbiw	r30, 0x01	; 1
    4866:	bf 01       	movw	r22, r30
    4868:	60 1b       	sub	r22, r16
    486a:	71 0b       	sbc	r23, r17
    486c:	40 e0       	ldi	r20, 0x00	; 0
    486e:	c8 01       	movw	r24, r16
    4870:	e7 cf       	rjmp	.-50     	; 0x4840 <__vector_11+0x19a>
    4872:	97 30       	cpi	r25, 0x07	; 7
    4874:	09 f4       	brne	.+2      	; 0x4878 <__vector_11+0x1d2>
    4876:	4f c0       	rjmp	.+158    	; 0x4916 <__vector_11+0x270>
    4878:	98 30       	cpi	r25, 0x08	; 8
    487a:	21 f4       	brne	.+8      	; 0x4884 <__vector_11+0x1de>
    487c:	81 e0       	ldi	r24, 0x01	; 1
    487e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    4882:	45 c0       	rjmp	.+138    	; 0x490e <__vector_11+0x268>
    4884:	99 30       	cpi	r25, 0x09	; 9
    4886:	09 f0       	breq	.+2      	; 0x488a <__vector_11+0x1e4>
    4888:	42 c0       	rjmp	.+132    	; 0x490e <__vector_11+0x268>
    488a:	83 70       	andi	r24, 0x03	; 3
    488c:	09 f0       	breq	.+2      	; 0x4890 <__vector_11+0x1ea>
    488e:	43 c0       	rjmp	.+134    	; 0x4916 <__vector_11+0x270>
    4890:	e5 e2       	ldi	r30, 0x25	; 37
    4892:	f1 e0       	ldi	r31, 0x01	; 1
    4894:	81 e0       	ldi	r24, 0x01	; 1
    4896:	31 e0       	ldi	r19, 0x01	; 1
    4898:	96 e3       	ldi	r25, 0x36	; 54
    489a:	20 81       	ld	r18, Z
    489c:	21 11       	cpse	r18, r1
    489e:	09 c0       	rjmp	.+18     	; 0x48b2 <__vector_11+0x20c>
    48a0:	8e e7       	ldi	r24, 0x7E	; 126
    48a2:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    48a6:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    48aa:	8f 89       	ldd	r24, Y+23	; 0x17
    48ac:	80 93 e1 06 	sts	0x06E1, r24	; 0x8006e1 <_usbConfiguration>
    48b0:	2e c0       	rjmp	.+92     	; 0x490e <__vector_11+0x268>
    48b2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    48b6:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    48ba:	21 91       	ld	r18, Z+
    48bc:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    48c0:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    48c4:	8f 5f       	subi	r24, 0xFF	; 255
    48c6:	87 30       	cpi	r24, 0x07	; 7
    48c8:	41 f7       	brne	.-48     	; 0x489a <__vector_11+0x1f4>
    48ca:	ea cf       	rjmp	.-44     	; 0x48a0 <__vector_11+0x1fa>
    48cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    48ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    48d0:	0e 94 ee 22 	call	0x45dc	; 0x45dc <_Z11InitControli>
    48d4:	89 8d       	ldd	r24, Y+25	; 0x19
    48d6:	81 11       	cpse	r24, r1
    48d8:	05 c0       	rjmp	.+10     	; 0x48e4 <__vector_11+0x23e>
    48da:	ce 01       	movw	r24, r28
    48dc:	45 96       	adiw	r24, 0x15	; 21
    48de:	0e 94 a9 1c 	call	0x3952	; 0x3952 <_Z9CDC_SetupR8USBSetup>
    48e2:	07 c0       	rjmp	.+14     	; 0x48f2 <__vector_11+0x24c>
    48e4:	0e 94 1a 2a 	call	0x5434	; 0x5434 <_Z12PluggableUSBv>
    48e8:	be 01       	movw	r22, r28
    48ea:	6b 5e       	subi	r22, 0xEB	; 235
    48ec:	7f 4f       	sbci	r23, 0xFF	; 255
    48ee:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <_ZN13PluggableUSB_5setupER8USBSetup>
    48f2:	88 23       	and	r24, r24
    48f4:	81 f0       	breq	.+32     	; 0x4916 <__vector_11+0x270>
    48f6:	0b c0       	rjmp	.+22     	; 0x490e <__vector_11+0x268>
    48f8:	6a e2       	ldi	r22, 0x2A	; 42
    48fa:	71 e0       	ldi	r23, 0x01	; 1
    48fc:	02 c0       	rjmp	.+4      	; 0x4902 <__vector_11+0x25c>
    48fe:	69 e5       	ldi	r22, 0x59	; 89
    4900:	71 e0       	ldi	r23, 0x01	; 1
    4902:	fb 01       	movw	r30, r22
    4904:	44 91       	lpm	r20, Z
    4906:	50 e0       	ldi	r21, 0x00	; 0
    4908:	80 e8       	ldi	r24, 0x80	; 128
    490a:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <_Z15USB_SendControlhPKvi>
    490e:	8e ef       	ldi	r24, 0xFE	; 254
    4910:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4914:	03 c0       	rjmp	.+6      	; 0x491c <__vector_11+0x276>
    4916:	81 e2       	ldi	r24, 0x21	; 33
    4918:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    491c:	6c 96       	adiw	r28, 0x1c	; 28
    491e:	0f b6       	in	r0, 0x3f	; 63
    4920:	f8 94       	cli
    4922:	de bf       	out	0x3e, r29	; 62
    4924:	0f be       	out	0x3f, r0	; 63
    4926:	cd bf       	out	0x3d, r28	; 61
    4928:	df 91       	pop	r29
    492a:	cf 91       	pop	r28
    492c:	ff 91       	pop	r31
    492e:	ef 91       	pop	r30
    4930:	bf 91       	pop	r27
    4932:	af 91       	pop	r26
    4934:	9f 91       	pop	r25
    4936:	8f 91       	pop	r24
    4938:	7f 91       	pop	r23
    493a:	6f 91       	pop	r22
    493c:	5f 91       	pop	r21
    493e:	4f 91       	pop	r20
    4940:	3f 91       	pop	r19
    4942:	2f 91       	pop	r18
    4944:	1f 91       	pop	r17
    4946:	0f 91       	pop	r16
    4948:	ff 90       	pop	r15
    494a:	ef 90       	pop	r14
    494c:	df 90       	pop	r13
    494e:	cf 90       	pop	r12
    4950:	0f 90       	pop	r0
    4952:	0f be       	out	0x3f, r0	; 63
    4954:	0f 90       	pop	r0
    4956:	1f 90       	pop	r1
    4958:	18 95       	reti

0000495a <_Z9USB_Flushh>:
    495a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    495e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    4962:	88 23       	and	r24, r24
    4964:	19 f0       	breq	.+6      	; 0x496c <_Z9USB_Flushh+0x12>
    4966:	8a e3       	ldi	r24, 0x3A	; 58
    4968:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    496c:	08 95       	ret

0000496e <__vector_10>:
    496e:	1f 92       	push	r1
    4970:	0f 92       	push	r0
    4972:	0f b6       	in	r0, 0x3f	; 63
    4974:	0f 92       	push	r0
    4976:	11 24       	eor	r1, r1
    4978:	2f 93       	push	r18
    497a:	3f 93       	push	r19
    497c:	4f 93       	push	r20
    497e:	5f 93       	push	r21
    4980:	6f 93       	push	r22
    4982:	7f 93       	push	r23
    4984:	8f 93       	push	r24
    4986:	9f 93       	push	r25
    4988:	af 93       	push	r26
    498a:	bf 93       	push	r27
    498c:	cf 93       	push	r28
    498e:	ef 93       	push	r30
    4990:	ff 93       	push	r31
    4992:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    4996:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    499a:	83 7f       	andi	r24, 0xF3	; 243
    499c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    49a0:	c3 ff       	sbrs	r28, 3
    49a2:	0f c0       	rjmp	.+30     	; 0x49c2 <__vector_10+0x54>
    49a4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    49a8:	81 e0       	ldi	r24, 0x01	; 1
    49aa:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    49ae:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    49b2:	82 e3       	ldi	r24, 0x32	; 50
    49b4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    49b8:	10 92 e1 06 	sts	0x06E1, r1	; 0x8006e1 <_usbConfiguration>
    49bc:	88 e0       	ldi	r24, 0x08	; 8
    49be:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    49c2:	c2 ff       	sbrs	r28, 2
    49c4:	19 c0       	rjmp	.+50     	; 0x49f8 <__vector_10+0x8a>
    49c6:	83 e0       	ldi	r24, 0x03	; 3
    49c8:	0e 94 ad 24 	call	0x495a	; 0x495a <_Z9USB_Flushh>
    49cc:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <TxLEDPulse>
    49d0:	88 23       	and	r24, r24
    49d2:	39 f0       	breq	.+14     	; 0x49e2 <__vector_10+0x74>
    49d4:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <TxLEDPulse>
    49d8:	81 50       	subi	r24, 0x01	; 1
    49da:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <TxLEDPulse>
    49de:	88 23       	and	r24, r24
    49e0:	89 f1       	breq	.+98     	; 0x4a44 <__vector_10+0xd6>
    49e2:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <RxLEDPulse>
    49e6:	88 23       	and	r24, r24
    49e8:	39 f0       	breq	.+14     	; 0x49f8 <__vector_10+0x8a>
    49ea:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <RxLEDPulse>
    49ee:	81 50       	subi	r24, 0x01	; 1
    49f0:	80 93 e2 06 	sts	0x06E2, r24	; 0x8006e2 <RxLEDPulse>
    49f4:	88 23       	and	r24, r24
    49f6:	41 f1       	breq	.+80     	; 0x4a48 <__vector_10+0xda>
    49f8:	c4 ff       	sbrs	r28, 4
    49fa:	10 c0       	rjmp	.+32     	; 0x4a1c <__vector_10+0xae>
    49fc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    4a00:	8e 7e       	andi	r24, 0xEE	; 238
    4a02:	81 60       	ori	r24, 0x01	; 1
    4a04:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    4a08:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    4a0c:	8f 7e       	andi	r24, 0xEF	; 239
    4a0e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    4a12:	80 91 df 06 	lds	r24, 0x06DF	; 0x8006df <_usbSuspendState>
    4a16:	8e 7e       	andi	r24, 0xEE	; 238
    4a18:	80 61       	ori	r24, 0x10	; 16
    4a1a:	11 c0       	rjmp	.+34     	; 0x4a3e <__vector_10+0xd0>
    4a1c:	c0 ff       	sbrs	r28, 0
    4a1e:	16 c0       	rjmp	.+44     	; 0x4a4c <__vector_10+0xde>
    4a20:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    4a24:	8e 7e       	andi	r24, 0xEE	; 238
    4a26:	80 61       	ori	r24, 0x10	; 16
    4a28:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    4a2c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    4a30:	8e 7e       	andi	r24, 0xEE	; 238
    4a32:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    4a36:	80 91 df 06 	lds	r24, 0x06DF	; 0x8006df <_usbSuspendState>
    4a3a:	8e 7e       	andi	r24, 0xEE	; 238
    4a3c:	81 60       	ori	r24, 0x01	; 1
    4a3e:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <_usbSuspendState>
    4a42:	04 c0       	rjmp	.+8      	; 0x4a4c <__vector_10+0xde>
    4a44:	5d 9a       	sbi	0x0b, 5	; 11
    4a46:	cd cf       	rjmp	.-102    	; 0x49e2 <__vector_10+0x74>
    4a48:	28 9a       	sbi	0x05, 0	; 5
    4a4a:	d6 cf       	rjmp	.-84     	; 0x49f8 <__vector_10+0x8a>
    4a4c:	ff 91       	pop	r31
    4a4e:	ef 91       	pop	r30
    4a50:	cf 91       	pop	r28
    4a52:	bf 91       	pop	r27
    4a54:	af 91       	pop	r26
    4a56:	9f 91       	pop	r25
    4a58:	8f 91       	pop	r24
    4a5a:	7f 91       	pop	r23
    4a5c:	6f 91       	pop	r22
    4a5e:	5f 91       	pop	r21
    4a60:	4f 91       	pop	r20
    4a62:	3f 91       	pop	r19
    4a64:	2f 91       	pop	r18
    4a66:	0f 90       	pop	r0
    4a68:	0f be       	out	0x3f, r0	; 63
    4a6a:	0f 90       	pop	r0
    4a6c:	1f 90       	pop	r1
    4a6e:	18 95       	reti

00004a70 <_ZN10USBDevice_6attachEv>:
{
}

void USBDevice_::attach()
{
	_usbConfiguration = 0;
    4a70:	10 92 e1 06 	sts	0x06E1, r1	; 0x8006e1 <_usbConfiguration>
	_usbCurrentStatus = 0;
    4a74:	10 92 e0 06 	sts	0x06E0, r1	; 0x8006e0 <_usbCurrentStatus>
	_usbSuspendState = 0;
    4a78:	10 92 df 06 	sts	0x06DF, r1	; 0x8006df <_usbSuspendState>
	USB_ClockEnable();
    4a7c:	0e 94 82 21 	call	0x4304	; 0x4304 <_ZL15USB_ClockEnablev>

	UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear already pending WAKEUP / SUSPEND requests
    4a80:	e1 ee       	ldi	r30, 0xE1	; 225
    4a82:	f0 e0       	ldi	r31, 0x00	; 0
    4a84:	80 81       	ld	r24, Z
    4a86:	8e 7e       	andi	r24, 0xEE	; 238
    4a88:	80 83       	st	Z, r24
	UDIEN = (1<<EORSTE) | (1<<SOFE) | (1<<SUSPE);	// Enable interrupts for EOR (End of Reset), SOF (start of frame) and SUSPEND
    4a8a:	8d e0       	ldi	r24, 0x0D	; 13
    4a8c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	
	TX_RX_LED_INIT;
    4a90:	55 9a       	sbi	0x0a, 5	; 10
    4a92:	20 9a       	sbi	0x04, 0	; 4
    4a94:	08 95       	ret

00004a96 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    4a96:	08 95       	ret

00004a98 <attachInterrupt>:
    4a98:	85 30       	cpi	r24, 0x05	; 5
    4a9a:	08 f0       	brcs	.+2      	; 0x4a9e <attachInterrupt+0x6>
    4a9c:	4c c0       	rjmp	.+152    	; 0x4b36 <attachInterrupt+0x9e>
    4a9e:	e8 2f       	mov	r30, r24
    4aa0:	f0 e0       	ldi	r31, 0x00	; 0
    4aa2:	ee 0f       	add	r30, r30
    4aa4:	ff 1f       	adc	r31, r31
    4aa6:	e5 5d       	subi	r30, 0xD5	; 213
    4aa8:	fe 4f       	sbci	r31, 0xFE	; 254
    4aaa:	71 83       	std	Z+1, r23	; 0x01
    4aac:	60 83       	st	Z, r22
    4aae:	82 30       	cpi	r24, 0x02	; 2
    4ab0:	e1 f0       	breq	.+56     	; 0x4aea <attachInterrupt+0x52>
    4ab2:	18 f4       	brcc	.+6      	; 0x4aba <attachInterrupt+0x22>
    4ab4:	81 30       	cpi	r24, 0x01	; 1
    4ab6:	69 f0       	breq	.+26     	; 0x4ad2 <attachInterrupt+0x3a>
    4ab8:	04 c0       	rjmp	.+8      	; 0x4ac2 <attachInterrupt+0x2a>
    4aba:	83 30       	cpi	r24, 0x03	; 3
    4abc:	19 f1       	breq	.+70     	; 0x4b04 <attachInterrupt+0x6c>
    4abe:	84 30       	cpi	r24, 0x04	; 4
    4ac0:	71 f1       	breq	.+92     	; 0x4b1e <attachInterrupt+0x86>
    4ac2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    4ac6:	8c 7f       	andi	r24, 0xFC	; 252
    4ac8:	48 2b       	or	r20, r24
    4aca:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    4ace:	e8 9a       	sbi	0x1d, 0	; 29
    4ad0:	08 95       	ret
    4ad2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    4ad6:	83 7f       	andi	r24, 0xF3	; 243
    4ad8:	44 0f       	add	r20, r20
    4ada:	55 1f       	adc	r21, r21
    4adc:	44 0f       	add	r20, r20
    4ade:	55 1f       	adc	r21, r21
    4ae0:	48 2b       	or	r20, r24
    4ae2:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    4ae6:	e9 9a       	sbi	0x1d, 1	; 29
    4ae8:	08 95       	ret
    4aea:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    4aee:	8f 7c       	andi	r24, 0xCF	; 207
    4af0:	34 e0       	ldi	r19, 0x04	; 4
    4af2:	44 0f       	add	r20, r20
    4af4:	55 1f       	adc	r21, r21
    4af6:	3a 95       	dec	r19
    4af8:	e1 f7       	brne	.-8      	; 0x4af2 <attachInterrupt+0x5a>
    4afa:	48 2b       	or	r20, r24
    4afc:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    4b00:	ea 9a       	sbi	0x1d, 2	; 29
    4b02:	08 95       	ret
    4b04:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    4b08:	8f 73       	andi	r24, 0x3F	; 63
    4b0a:	26 e0       	ldi	r18, 0x06	; 6
    4b0c:	44 0f       	add	r20, r20
    4b0e:	55 1f       	adc	r21, r21
    4b10:	2a 95       	dec	r18
    4b12:	e1 f7       	brne	.-8      	; 0x4b0c <attachInterrupt+0x74>
    4b14:	48 2b       	or	r20, r24
    4b16:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    4b1a:	eb 9a       	sbi	0x1d, 3	; 29
    4b1c:	08 95       	ret
    4b1e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
    4b22:	8f 7c       	andi	r24, 0xCF	; 207
    4b24:	94 e0       	ldi	r25, 0x04	; 4
    4b26:	44 0f       	add	r20, r20
    4b28:	55 1f       	adc	r21, r21
    4b2a:	9a 95       	dec	r25
    4b2c:	e1 f7       	brne	.-8      	; 0x4b26 <attachInterrupt+0x8e>
    4b2e:	48 2b       	or	r20, r24
    4b30:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
    4b34:	ee 9a       	sbi	0x1d, 6	; 29
    4b36:	08 95       	ret

00004b38 <__vector_1>:
    intFunc[interrupt](); \
  }

#if defined(__AVR_ATmega32U4__)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    4b38:	1f 92       	push	r1
    4b3a:	0f 92       	push	r0
    4b3c:	0f b6       	in	r0, 0x3f	; 63
    4b3e:	0f 92       	push	r0
    4b40:	11 24       	eor	r1, r1
    4b42:	2f 93       	push	r18
    4b44:	3f 93       	push	r19
    4b46:	4f 93       	push	r20
    4b48:	5f 93       	push	r21
    4b4a:	6f 93       	push	r22
    4b4c:	7f 93       	push	r23
    4b4e:	8f 93       	push	r24
    4b50:	9f 93       	push	r25
    4b52:	af 93       	push	r26
    4b54:	bf 93       	push	r27
    4b56:	ef 93       	push	r30
    4b58:	ff 93       	push	r31
    4b5a:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <intFunc>
    4b5e:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <intFunc+0x1>
    4b62:	09 95       	icall
    4b64:	ff 91       	pop	r31
    4b66:	ef 91       	pop	r30
    4b68:	bf 91       	pop	r27
    4b6a:	af 91       	pop	r26
    4b6c:	9f 91       	pop	r25
    4b6e:	8f 91       	pop	r24
    4b70:	7f 91       	pop	r23
    4b72:	6f 91       	pop	r22
    4b74:	5f 91       	pop	r21
    4b76:	4f 91       	pop	r20
    4b78:	3f 91       	pop	r19
    4b7a:	2f 91       	pop	r18
    4b7c:	0f 90       	pop	r0
    4b7e:	0f be       	out	0x3f, r0	; 63
    4b80:	0f 90       	pop	r0
    4b82:	1f 90       	pop	r1
    4b84:	18 95       	reti

00004b86 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    4b86:	1f 92       	push	r1
    4b88:	0f 92       	push	r0
    4b8a:	0f b6       	in	r0, 0x3f	; 63
    4b8c:	0f 92       	push	r0
    4b8e:	11 24       	eor	r1, r1
    4b90:	2f 93       	push	r18
    4b92:	3f 93       	push	r19
    4b94:	4f 93       	push	r20
    4b96:	5f 93       	push	r21
    4b98:	6f 93       	push	r22
    4b9a:	7f 93       	push	r23
    4b9c:	8f 93       	push	r24
    4b9e:	9f 93       	push	r25
    4ba0:	af 93       	push	r26
    4ba2:	bf 93       	push	r27
    4ba4:	ef 93       	push	r30
    4ba6:	ff 93       	push	r31
    4ba8:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <intFunc+0x2>
    4bac:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <intFunc+0x3>
    4bb0:	09 95       	icall
    4bb2:	ff 91       	pop	r31
    4bb4:	ef 91       	pop	r30
    4bb6:	bf 91       	pop	r27
    4bb8:	af 91       	pop	r26
    4bba:	9f 91       	pop	r25
    4bbc:	8f 91       	pop	r24
    4bbe:	7f 91       	pop	r23
    4bc0:	6f 91       	pop	r22
    4bc2:	5f 91       	pop	r21
    4bc4:	4f 91       	pop	r20
    4bc6:	3f 91       	pop	r19
    4bc8:	2f 91       	pop	r18
    4bca:	0f 90       	pop	r0
    4bcc:	0f be       	out	0x3f, r0	; 63
    4bce:	0f 90       	pop	r0
    4bd0:	1f 90       	pop	r1
    4bd2:	18 95       	reti

00004bd4 <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_2)
    4bd4:	1f 92       	push	r1
    4bd6:	0f 92       	push	r0
    4bd8:	0f b6       	in	r0, 0x3f	; 63
    4bda:	0f 92       	push	r0
    4bdc:	11 24       	eor	r1, r1
    4bde:	2f 93       	push	r18
    4be0:	3f 93       	push	r19
    4be2:	4f 93       	push	r20
    4be4:	5f 93       	push	r21
    4be6:	6f 93       	push	r22
    4be8:	7f 93       	push	r23
    4bea:	8f 93       	push	r24
    4bec:	9f 93       	push	r25
    4bee:	af 93       	push	r26
    4bf0:	bf 93       	push	r27
    4bf2:	ef 93       	push	r30
    4bf4:	ff 93       	push	r31
    4bf6:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <intFunc+0x4>
    4bfa:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <intFunc+0x5>
    4bfe:	09 95       	icall
    4c00:	ff 91       	pop	r31
    4c02:	ef 91       	pop	r30
    4c04:	bf 91       	pop	r27
    4c06:	af 91       	pop	r26
    4c08:	9f 91       	pop	r25
    4c0a:	8f 91       	pop	r24
    4c0c:	7f 91       	pop	r23
    4c0e:	6f 91       	pop	r22
    4c10:	5f 91       	pop	r21
    4c12:	4f 91       	pop	r20
    4c14:	3f 91       	pop	r19
    4c16:	2f 91       	pop	r18
    4c18:	0f 90       	pop	r0
    4c1a:	0f be       	out	0x3f, r0	; 63
    4c1c:	0f 90       	pop	r0
    4c1e:	1f 90       	pop	r1
    4c20:	18 95       	reti

00004c22 <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
    4c22:	1f 92       	push	r1
    4c24:	0f 92       	push	r0
    4c26:	0f b6       	in	r0, 0x3f	; 63
    4c28:	0f 92       	push	r0
    4c2a:	11 24       	eor	r1, r1
    4c2c:	2f 93       	push	r18
    4c2e:	3f 93       	push	r19
    4c30:	4f 93       	push	r20
    4c32:	5f 93       	push	r21
    4c34:	6f 93       	push	r22
    4c36:	7f 93       	push	r23
    4c38:	8f 93       	push	r24
    4c3a:	9f 93       	push	r25
    4c3c:	af 93       	push	r26
    4c3e:	bf 93       	push	r27
    4c40:	ef 93       	push	r30
    4c42:	ff 93       	push	r31
    4c44:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <intFunc+0x6>
    4c48:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <intFunc+0x7>
    4c4c:	09 95       	icall
    4c4e:	ff 91       	pop	r31
    4c50:	ef 91       	pop	r30
    4c52:	bf 91       	pop	r27
    4c54:	af 91       	pop	r26
    4c56:	9f 91       	pop	r25
    4c58:	8f 91       	pop	r24
    4c5a:	7f 91       	pop	r23
    4c5c:	6f 91       	pop	r22
    4c5e:	5f 91       	pop	r21
    4c60:	4f 91       	pop	r20
    4c62:	3f 91       	pop	r19
    4c64:	2f 91       	pop	r18
    4c66:	0f 90       	pop	r0
    4c68:	0f be       	out	0x3f, r0	; 63
    4c6a:	0f 90       	pop	r0
    4c6c:	1f 90       	pop	r1
    4c6e:	18 95       	reti

00004c70 <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_4)
    4c70:	1f 92       	push	r1
    4c72:	0f 92       	push	r0
    4c74:	0f b6       	in	r0, 0x3f	; 63
    4c76:	0f 92       	push	r0
    4c78:	11 24       	eor	r1, r1
    4c7a:	2f 93       	push	r18
    4c7c:	3f 93       	push	r19
    4c7e:	4f 93       	push	r20
    4c80:	5f 93       	push	r21
    4c82:	6f 93       	push	r22
    4c84:	7f 93       	push	r23
    4c86:	8f 93       	push	r24
    4c88:	9f 93       	push	r25
    4c8a:	af 93       	push	r26
    4c8c:	bf 93       	push	r27
    4c8e:	ef 93       	push	r30
    4c90:	ff 93       	push	r31
    4c92:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <intFunc+0x8>
    4c96:	f0 91 34 01 	lds	r31, 0x0134	; 0x800134 <intFunc+0x9>
    4c9a:	09 95       	icall
    4c9c:	ff 91       	pop	r31
    4c9e:	ef 91       	pop	r30
    4ca0:	bf 91       	pop	r27
    4ca2:	af 91       	pop	r26
    4ca4:	9f 91       	pop	r25
    4ca6:	8f 91       	pop	r24
    4ca8:	7f 91       	pop	r23
    4caa:	6f 91       	pop	r22
    4cac:	5f 91       	pop	r21
    4cae:	4f 91       	pop	r20
    4cb0:	3f 91       	pop	r19
    4cb2:	2f 91       	pop	r18
    4cb4:	0f 90       	pop	r0
    4cb6:	0f be       	out	0x3f, r0	; 63
    4cb8:	0f 90       	pop	r0
    4cba:	1f 90       	pop	r1
    4cbc:	18 95       	reti

00004cbe <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    4cbe:	1f 92       	push	r1
    4cc0:	0f 92       	push	r0
    4cc2:	0f b6       	in	r0, 0x3f	; 63
    4cc4:	0f 92       	push	r0
    4cc6:	11 24       	eor	r1, r1
    4cc8:	2f 93       	push	r18
    4cca:	3f 93       	push	r19
    4ccc:	8f 93       	push	r24
    4cce:	9f 93       	push	r25
    4cd0:	af 93       	push	r26
    4cd2:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    4cd4:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <timer0_millis>
    4cd8:	90 91 e6 06 	lds	r25, 0x06E6	; 0x8006e6 <timer0_millis+0x1>
    4cdc:	a0 91 e7 06 	lds	r26, 0x06E7	; 0x8006e7 <timer0_millis+0x2>
    4ce0:	b0 91 e8 06 	lds	r27, 0x06E8	; 0x8006e8 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    4ce4:	30 91 e4 06 	lds	r19, 0x06E4	; 0x8006e4 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    4ce8:	23 e0       	ldi	r18, 0x03	; 3
    4cea:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    4cec:	2d 37       	cpi	r18, 0x7D	; 125
    4cee:	20 f4       	brcc	.+8      	; 0x4cf8 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    4cf0:	01 96       	adiw	r24, 0x01	; 1
    4cf2:	a1 1d       	adc	r26, r1
    4cf4:	b1 1d       	adc	r27, r1
    4cf6:	05 c0       	rjmp	.+10     	; 0x4d02 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    4cf8:	26 e8       	ldi	r18, 0x86	; 134
    4cfa:	23 0f       	add	r18, r19
		m += 1;
    4cfc:	02 96       	adiw	r24, 0x02	; 2
    4cfe:	a1 1d       	adc	r26, r1
    4d00:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    4d02:	20 93 e4 06 	sts	0x06E4, r18	; 0x8006e4 <timer0_fract>
	timer0_millis = m;
    4d06:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <timer0_millis>
    4d0a:	90 93 e6 06 	sts	0x06E6, r25	; 0x8006e6 <timer0_millis+0x1>
    4d0e:	a0 93 e7 06 	sts	0x06E7, r26	; 0x8006e7 <timer0_millis+0x2>
    4d12:	b0 93 e8 06 	sts	0x06E8, r27	; 0x8006e8 <timer0_millis+0x3>
	timer0_overflow_count++;
    4d16:	80 91 e9 06 	lds	r24, 0x06E9	; 0x8006e9 <timer0_overflow_count>
    4d1a:	90 91 ea 06 	lds	r25, 0x06EA	; 0x8006ea <timer0_overflow_count+0x1>
    4d1e:	a0 91 eb 06 	lds	r26, 0x06EB	; 0x8006eb <timer0_overflow_count+0x2>
    4d22:	b0 91 ec 06 	lds	r27, 0x06EC	; 0x8006ec <timer0_overflow_count+0x3>
    4d26:	01 96       	adiw	r24, 0x01	; 1
    4d28:	a1 1d       	adc	r26, r1
    4d2a:	b1 1d       	adc	r27, r1
    4d2c:	80 93 e9 06 	sts	0x06E9, r24	; 0x8006e9 <timer0_overflow_count>
    4d30:	90 93 ea 06 	sts	0x06EA, r25	; 0x8006ea <timer0_overflow_count+0x1>
    4d34:	a0 93 eb 06 	sts	0x06EB, r26	; 0x8006eb <timer0_overflow_count+0x2>
    4d38:	b0 93 ec 06 	sts	0x06EC, r27	; 0x8006ec <timer0_overflow_count+0x3>
}
    4d3c:	bf 91       	pop	r27
    4d3e:	af 91       	pop	r26
    4d40:	9f 91       	pop	r25
    4d42:	8f 91       	pop	r24
    4d44:	3f 91       	pop	r19
    4d46:	2f 91       	pop	r18
    4d48:	0f 90       	pop	r0
    4d4a:	0f be       	out	0x3f, r0	; 63
    4d4c:	0f 90       	pop	r0
    4d4e:	1f 90       	pop	r1
    4d50:	18 95       	reti

00004d52 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    4d52:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    4d54:	f8 94       	cli
	m = timer0_millis;
    4d56:	60 91 e5 06 	lds	r22, 0x06E5	; 0x8006e5 <timer0_millis>
    4d5a:	70 91 e6 06 	lds	r23, 0x06E6	; 0x8006e6 <timer0_millis+0x1>
    4d5e:	80 91 e7 06 	lds	r24, 0x06E7	; 0x8006e7 <timer0_millis+0x2>
    4d62:	90 91 e8 06 	lds	r25, 0x06E8	; 0x8006e8 <timer0_millis+0x3>
	SREG = oldSREG;
    4d66:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    4d68:	08 95       	ret

00004d6a <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    4d6a:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    4d6c:	f8 94       	cli
	m = timer0_overflow_count;
    4d6e:	80 91 e9 06 	lds	r24, 0x06E9	; 0x8006e9 <timer0_overflow_count>
    4d72:	90 91 ea 06 	lds	r25, 0x06EA	; 0x8006ea <timer0_overflow_count+0x1>
    4d76:	a0 91 eb 06 	lds	r26, 0x06EB	; 0x8006eb <timer0_overflow_count+0x2>
    4d7a:	b0 91 ec 06 	lds	r27, 0x06EC	; 0x8006ec <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    4d7e:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    4d80:	a8 9b       	sbis	0x15, 0	; 21
    4d82:	05 c0       	rjmp	.+10     	; 0x4d8e <micros+0x24>
    4d84:	2f 3f       	cpi	r18, 0xFF	; 255
    4d86:	19 f0       	breq	.+6      	; 0x4d8e <micros+0x24>
		m++;
    4d88:	01 96       	adiw	r24, 0x01	; 1
    4d8a:	a1 1d       	adc	r26, r1
    4d8c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    4d8e:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    4d90:	ba 2f       	mov	r27, r26
    4d92:	a9 2f       	mov	r26, r25
    4d94:	98 2f       	mov	r25, r24
    4d96:	88 27       	eor	r24, r24
    4d98:	82 0f       	add	r24, r18
    4d9a:	91 1d       	adc	r25, r1
    4d9c:	a1 1d       	adc	r26, r1
    4d9e:	b1 1d       	adc	r27, r1
    4da0:	bc 01       	movw	r22, r24
    4da2:	cd 01       	movw	r24, r26
    4da4:	42 e0       	ldi	r20, 0x02	; 2
    4da6:	66 0f       	add	r22, r22
    4da8:	77 1f       	adc	r23, r23
    4daa:	88 1f       	adc	r24, r24
    4dac:	99 1f       	adc	r25, r25
    4dae:	4a 95       	dec	r20
    4db0:	d1 f7       	brne	.-12     	; 0x4da6 <micros+0x3c>
}
    4db2:	08 95       	ret

00004db4 <delay>:

void delay(unsigned long ms)
{
    4db4:	8f 92       	push	r8
    4db6:	9f 92       	push	r9
    4db8:	af 92       	push	r10
    4dba:	bf 92       	push	r11
    4dbc:	cf 92       	push	r12
    4dbe:	df 92       	push	r13
    4dc0:	ef 92       	push	r14
    4dc2:	ff 92       	push	r15
    4dc4:	6b 01       	movw	r12, r22
    4dc6:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    4dc8:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <micros>
    4dcc:	4b 01       	movw	r8, r22
    4dce:	5c 01       	movw	r10, r24

	while (ms > 0) {
    4dd0:	c1 14       	cp	r12, r1
    4dd2:	d1 04       	cpc	r13, r1
    4dd4:	e1 04       	cpc	r14, r1
    4dd6:	f1 04       	cpc	r15, r1
    4dd8:	01 f1       	breq	.+64     	; 0x4e1a <delay+0x66>
		yield();
    4dda:	0e 94 94 29 	call	0x5328	; 0x5328 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    4dde:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <micros>
    4de2:	dc 01       	movw	r26, r24
    4de4:	cb 01       	movw	r24, r22
    4de6:	88 19       	sub	r24, r8
    4de8:	99 09       	sbc	r25, r9
    4dea:	aa 09       	sbc	r26, r10
    4dec:	bb 09       	sbc	r27, r11
    4dee:	88 3e       	cpi	r24, 0xE8	; 232
    4df0:	93 40       	sbci	r25, 0x03	; 3
    4df2:	a1 05       	cpc	r26, r1
    4df4:	b1 05       	cpc	r27, r1
    4df6:	60 f3       	brcs	.-40     	; 0x4dd0 <delay+0x1c>
			ms--;
    4df8:	21 e0       	ldi	r18, 0x01	; 1
    4dfa:	c2 1a       	sub	r12, r18
    4dfc:	d1 08       	sbc	r13, r1
    4dfe:	e1 08       	sbc	r14, r1
    4e00:	f1 08       	sbc	r15, r1
			start += 1000;
    4e02:	88 ee       	ldi	r24, 0xE8	; 232
    4e04:	88 0e       	add	r8, r24
    4e06:	83 e0       	ldi	r24, 0x03	; 3
    4e08:	98 1e       	adc	r9, r24
    4e0a:	a1 1c       	adc	r10, r1
    4e0c:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    4e0e:	c1 14       	cp	r12, r1
    4e10:	d1 04       	cpc	r13, r1
    4e12:	e1 04       	cpc	r14, r1
    4e14:	f1 04       	cpc	r15, r1
    4e16:	19 f7       	brne	.-58     	; 0x4dde <delay+0x2a>
    4e18:	db cf       	rjmp	.-74     	; 0x4dd0 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    4e1a:	ff 90       	pop	r15
    4e1c:	ef 90       	pop	r14
    4e1e:	df 90       	pop	r13
    4e20:	cf 90       	pop	r12
    4e22:	bf 90       	pop	r11
    4e24:	af 90       	pop	r10
    4e26:	9f 90       	pop	r9
    4e28:	8f 90       	pop	r8
    4e2a:	08 95       	ret

00004e2c <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    4e2c:	82 30       	cpi	r24, 0x02	; 2
    4e2e:	91 05       	cpc	r25, r1
    4e30:	38 f0       	brcs	.+14     	; 0x4e40 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    4e32:	88 0f       	add	r24, r24
    4e34:	99 1f       	adc	r25, r25
    4e36:	88 0f       	add	r24, r24
    4e38:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    4e3a:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    4e3c:	01 97       	sbiw	r24, 0x01	; 1
    4e3e:	f1 f7       	brne	.-4      	; 0x4e3c <delayMicroseconds+0x10>
    4e40:	08 95       	ret

00004e42 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    4e42:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    4e44:	84 b5       	in	r24, 0x24	; 36
    4e46:	82 60       	ori	r24, 0x02	; 2
    4e48:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    4e4a:	84 b5       	in	r24, 0x24	; 36
    4e4c:	81 60       	ori	r24, 0x01	; 1
    4e4e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    4e50:	85 b5       	in	r24, 0x25	; 37
    4e52:	82 60       	ori	r24, 0x02	; 2
    4e54:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    4e56:	85 b5       	in	r24, 0x25	; 37
    4e58:	81 60       	ori	r24, 0x01	; 1
    4e5a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    4e5c:	ee e6       	ldi	r30, 0x6E	; 110
    4e5e:	f0 e0       	ldi	r31, 0x00	; 0
    4e60:	80 81       	ld	r24, Z
    4e62:	81 60       	ori	r24, 0x01	; 1
    4e64:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    4e66:	e1 e8       	ldi	r30, 0x81	; 129
    4e68:	f0 e0       	ldi	r31, 0x00	; 0
    4e6a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    4e6c:	80 81       	ld	r24, Z
    4e6e:	82 60       	ori	r24, 0x02	; 2
    4e70:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    4e72:	80 81       	ld	r24, Z
    4e74:	81 60       	ori	r24, 0x01	; 1
    4e76:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    4e78:	e0 e8       	ldi	r30, 0x80	; 128
    4e7a:	f0 e0       	ldi	r31, 0x00	; 0
    4e7c:	80 81       	ld	r24, Z
    4e7e:	81 60       	ori	r24, 0x01	; 1
    4e80:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    4e82:	e1 e9       	ldi	r30, 0x91	; 145
    4e84:	f0 e0       	ldi	r31, 0x00	; 0
    4e86:	80 81       	ld	r24, Z
    4e88:	82 60       	ori	r24, 0x02	; 2
    4e8a:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    4e8c:	80 81       	ld	r24, Z
    4e8e:	81 60       	ori	r24, 0x01	; 1
    4e90:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    4e92:	e0 e9       	ldi	r30, 0x90	; 144
    4e94:	f0 e0       	ldi	r31, 0x00	; 0
    4e96:	80 81       	ld	r24, Z
    4e98:	81 60       	ori	r24, 0x01	; 1
    4e9a:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
    4e9c:	e1 ec       	ldi	r30, 0xC1	; 193
    4e9e:	f0 e0       	ldi	r31, 0x00	; 0
    4ea0:	80 81       	ld	r24, Z
    4ea2:	84 60       	ori	r24, 0x04	; 4
    4ea4:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
    4ea6:	80 81       	ld	r24, Z
    4ea8:	82 60       	ori	r24, 0x02	; 2
    4eaa:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    4eac:	80 81       	ld	r24, Z
    4eae:	81 60       	ori	r24, 0x01	; 1
    4eb0:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
    4eb2:	e3 ec       	ldi	r30, 0xC3	; 195
    4eb4:	f0 e0       	ldi	r31, 0x00	; 0
    4eb6:	80 81       	ld	r24, Z
    4eb8:	81 60       	ori	r24, 0x01	; 1
    4eba:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
    4ebc:	e0 ec       	ldi	r30, 0xC0	; 192
    4ebe:	f0 e0       	ldi	r31, 0x00	; 0
    4ec0:	80 81       	ld	r24, Z
    4ec2:	82 60       	ori	r24, 0x02	; 2
    4ec4:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
    4ec6:	e2 ec       	ldi	r30, 0xC2	; 194
    4ec8:	f0 e0       	ldi	r31, 0x00	; 0
    4eca:	80 81       	ld	r24, Z
    4ecc:	81 60       	ori	r24, 0x01	; 1
    4ece:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    4ed0:	ea e7       	ldi	r30, 0x7A	; 122
    4ed2:	f0 e0       	ldi	r31, 0x00	; 0
    4ed4:	80 81       	ld	r24, Z
    4ed6:	84 60       	ori	r24, 0x04	; 4
    4ed8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    4eda:	80 81       	ld	r24, Z
    4edc:	82 60       	ori	r24, 0x02	; 2
    4ede:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    4ee0:	80 81       	ld	r24, Z
    4ee2:	81 60       	ori	r24, 0x01	; 1
    4ee4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    4ee6:	80 81       	ld	r24, Z
    4ee8:	80 68       	ori	r24, 0x80	; 128
    4eea:	80 83       	st	Z, r24
    4eec:	08 95       	ret

00004eee <analogRead>:
{
	uint8_t low, high;

#if defined(analogPinToChannel)
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
    4eee:	82 31       	cpi	r24, 0x12	; 18
    4ef0:	08 f0       	brcs	.+2      	; 0x4ef4 <analogRead+0x6>
    4ef2:	82 51       	subi	r24, 0x12	; 18
#endif
	pin = analogPinToChannel(pin);
    4ef4:	e8 2f       	mov	r30, r24
    4ef6:	f0 e0       	ldi	r31, 0x00	; 0
    4ef8:	e3 5a       	subi	r30, 0xA3	; 163
    4efa:	fe 4f       	sbci	r31, 0xFE	; 254
    4efc:	e4 91       	lpm	r30, Z
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    4efe:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    4f02:	e3 fb       	bst	r30, 3
    4f04:	22 27       	eor	r18, r18
    4f06:	20 f9       	bld	r18, 0
    4f08:	30 e0       	ldi	r19, 0x00	; 0
    4f0a:	95 e0       	ldi	r25, 0x05	; 5
    4f0c:	22 0f       	add	r18, r18
    4f0e:	33 1f       	adc	r19, r19
    4f10:	9a 95       	dec	r25
    4f12:	e1 f7       	brne	.-8      	; 0x4f0c <analogRead+0x1e>
    4f14:	8f 7d       	andi	r24, 0xDF	; 223
    4f16:	28 2b       	or	r18, r24
    4f18:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    4f1c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <analog_reference>
    4f20:	20 e4       	ldi	r18, 0x40	; 64
    4f22:	82 9f       	mul	r24, r18
    4f24:	c0 01       	movw	r24, r0
    4f26:	11 24       	eor	r1, r1
    4f28:	e7 70       	andi	r30, 0x07	; 7
    4f2a:	e8 2b       	or	r30, r24
    4f2c:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    4f30:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    4f34:	80 64       	ori	r24, 0x40	; 64
    4f36:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    4f3a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    4f3e:	86 fd       	sbrc	r24, 6
    4f40:	fc cf       	rjmp	.-8      	; 0x4f3a <analogRead+0x4c>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    4f42:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    4f46:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    4f4a:	90 e0       	ldi	r25, 0x00	; 0
}
    4f4c:	92 2b       	or	r25, r18
    4f4e:	08 95       	ret

00004f50 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    4f50:	1f 93       	push	r17
    4f52:	cf 93       	push	r28
    4f54:	df 93       	push	r29
    4f56:	18 2f       	mov	r17, r24
    4f58:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    4f5a:	61 e0       	ldi	r22, 0x01	; 1
    4f5c:	0e 94 7d 28 	call	0x50fa	; 0x50fa <pinMode>
	if (val == 0)
    4f60:	20 97       	sbiw	r28, 0x00	; 0
    4f62:	11 f4       	brne	.+4      	; 0x4f68 <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    4f64:	60 e0       	ldi	r22, 0x00	; 0
    4f66:	04 c0       	rjmp	.+8      	; 0x4f70 <analogWrite+0x20>
	}
	else if (val == 255)
    4f68:	cf 3f       	cpi	r28, 0xFF	; 255
    4f6a:	d1 05       	cpc	r29, r1
    4f6c:	39 f4       	brne	.+14     	; 0x4f7c <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    4f6e:	61 e0       	ldi	r22, 0x01	; 1
    4f70:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    4f72:	df 91       	pop	r29
    4f74:	cf 91       	pop	r28
    4f76:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    4f78:	0c 94 b9 28 	jmp	0x5172	; 0x5172 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    4f7c:	e1 2f       	mov	r30, r17
    4f7e:	f0 e0       	ldi	r31, 0x00	; 0
    4f80:	e7 59       	subi	r30, 0x97	; 151
    4f82:	fe 4f       	sbci	r31, 0xFE	; 254
    4f84:	e4 91       	lpm	r30, Z
    4f86:	8e 2f       	mov	r24, r30
    4f88:	90 e0       	ldi	r25, 0x00	; 0
    4f8a:	fc 01       	movw	r30, r24
    4f8c:	31 97       	sbiw	r30, 0x01	; 1
    4f8e:	ef 30       	cpi	r30, 0x0F	; 15
    4f90:	f1 05       	cpc	r31, r1
    4f92:	08 f0       	brcs	.+2      	; 0x4f96 <analogWrite+0x46>
    4f94:	6c c0       	rjmp	.+216    	; 0x506e <analogWrite+0x11e>
    4f96:	ea 5a       	subi	r30, 0xAA	; 170
    4f98:	ff 4f       	sbci	r31, 0xFF	; 255
    4f9a:	0c 94 88 2a 	jmp	0x5510	; 0x5510 <__tablejump2__>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    4f9e:	84 b5       	in	r24, 0x24	; 36
    4fa0:	80 68       	ori	r24, 0x80	; 128
    4fa2:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    4fa4:	c7 bd       	out	0x27, r28	; 39
				break;
    4fa6:	68 c0       	rjmp	.+208    	; 0x5078 <analogWrite+0x128>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    4fa8:	84 b5       	in	r24, 0x24	; 36
    4faa:	80 62       	ori	r24, 0x20	; 32
    4fac:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    4fae:	c8 bd       	out	0x28, r28	; 40
				break;
    4fb0:	63 c0       	rjmp	.+198    	; 0x5078 <analogWrite+0x128>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    4fb2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4fb6:	80 68       	ori	r24, 0x80	; 128
    4fb8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1A = val; // set pwm duty
    4fbc:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    4fc0:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				break;
    4fc4:	59 c0       	rjmp	.+178    	; 0x5078 <analogWrite+0x128>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    4fc6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4fca:	80 62       	ori	r24, 0x20	; 32
    4fcc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1B = val; // set pwm duty
    4fd0:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    4fd4:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				break;
    4fd8:	4f c0       	rjmp	.+158    	; 0x5078 <analogWrite+0x128>
			#endif

			#if defined(TCCR1A) && defined(COM1C1)
			case TIMER1C:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1C1);
    4fda:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4fde:	88 60       	ori	r24, 0x08	; 8
    4fe0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1C = val; // set pwm duty
    4fe4:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <__TEXT_REGION_LENGTH__+0x7e008d>
    4fe8:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
				break;
    4fec:	45 c0       	rjmp	.+138    	; 0x5078 <analogWrite+0x128>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
    4fee:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    4ff2:	80 68       	ori	r24, 0x80	; 128
    4ff4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
				OCR3A = val; // set pwm duty
    4ff8:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    4ffc:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
				break;
    5000:	3b c0       	rjmp	.+118    	; 0x5078 <analogWrite+0x128>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
    5002:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    5006:	80 62       	ori	r24, 0x20	; 32
    5008:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
				OCR3B = val; // set pwm duty
    500c:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    5010:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
				break;
    5014:	31 c0       	rjmp	.+98     	; 0x5078 <analogWrite+0x128>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
    5016:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    501a:	88 60       	ori	r24, 0x08	; 8
    501c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
				OCR3C = val; // set pwm duty
    5020:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
    5024:	c0 93 9c 00 	sts	0x009C, r28	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
				break;
    5028:	27 c0       	rjmp	.+78     	; 0x5078 <analogWrite+0x128>
			#endif

			#if defined(TCCR4A)
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
    502a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    502e:	80 68       	ori	r24, 0x80	; 128
    5030:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
				#if defined(COM4A0)		// only used on 32U4
				cbi(TCCR4A, COM4A0);
    5034:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5038:	8f 7b       	andi	r24, 0xBF	; 191
    503a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
				#endif
				OCR4A = val;	// set pwm duty
    503e:	c0 93 cf 00 	sts	0x00CF, r28	; 0x8000cf <__TEXT_REGION_LENGTH__+0x7e00cf>
				break;
    5042:	1a c0       	rjmp	.+52     	; 0x5078 <analogWrite+0x128>
			#endif
			
			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
    5044:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5048:	80 62       	ori	r24, 0x20	; 32
    504a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
				OCR4B = val; // set pwm duty
    504e:	c0 93 d0 00 	sts	0x00D0, r28	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
				break;
    5052:	12 c0       	rjmp	.+36     	; 0x5078 <analogWrite+0x128>
			#endif
				
			#if defined(TCCR4C) && defined(COM4D1)
			case TIMER4D:				
				// connect pwm to pin on timer 4, channel D
				sbi(TCCR4C, COM4D1);
    5054:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    5058:	88 60       	ori	r24, 0x08	; 8
    505a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
				#if defined(COM4D0)		// only used on 32U4
				cbi(TCCR4C, COM4D0);
    505e:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    5062:	8b 7f       	andi	r24, 0xFB	; 251
    5064:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
				#endif
				OCR4D = val;	// set pwm duty
    5068:	c0 93 d2 00 	sts	0x00D2, r28	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
				break;
    506c:	05 c0       	rjmp	.+10     	; 0x5078 <analogWrite+0x128>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    506e:	c0 38       	cpi	r28, 0x80	; 128
    5070:	d1 05       	cpc	r29, r1
    5072:	0c f0       	brlt	.+2      	; 0x5076 <analogWrite+0x126>
    5074:	7c cf       	rjmp	.-264    	; 0x4f6e <analogWrite+0x1e>
    5076:	76 cf       	rjmp	.-276    	; 0x4f64 <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    5078:	df 91       	pop	r29
    507a:	cf 91       	pop	r28
    507c:	1f 91       	pop	r17
    507e:	08 95       	ret

00005080 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    5080:	90 e0       	ldi	r25, 0x00	; 0
    5082:	fc 01       	movw	r30, r24
    5084:	31 97       	sbiw	r30, 0x01	; 1
    5086:	ef 30       	cpi	r30, 0x0F	; 15
    5088:	f1 05       	cpc	r31, r1
    508a:	b0 f5       	brcc	.+108    	; 0x50f8 <turnOffPWM+0x78>
    508c:	eb 59       	subi	r30, 0x9B	; 155
    508e:	ff 4f       	sbci	r31, 0xFF	; 255
    5090:	0c 94 88 2a 	jmp	0x5510	; 0x5510 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    5094:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5098:	8f 77       	andi	r24, 0x7F	; 127
    509a:	03 c0       	rjmp	.+6      	; 0x50a2 <turnOffPWM+0x22>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    509c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    50a0:	8f 7d       	andi	r24, 0xDF	; 223
    50a2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    50a6:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    50a8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    50ac:	87 7f       	andi	r24, 0xF7	; 247
    50ae:	f9 cf       	rjmp	.-14     	; 0x50a2 <turnOffPWM+0x22>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    50b0:	84 b5       	in	r24, 0x24	; 36
    50b2:	8f 77       	andi	r24, 0x7F	; 127
    50b4:	02 c0       	rjmp	.+4      	; 0x50ba <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    50b6:	84 b5       	in	r24, 0x24	; 36
    50b8:	8f 7d       	andi	r24, 0xDF	; 223
    50ba:	84 bd       	out	0x24, r24	; 36
    50bc:	08 95       	ret
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    50be:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    50c2:	8f 77       	andi	r24, 0x7F	; 127
    50c4:	07 c0       	rjmp	.+14     	; 0x50d4 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    50c6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    50ca:	8f 7d       	andi	r24, 0xDF	; 223
    50cc:	03 c0       	rjmp	.+6      	; 0x50d4 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    50ce:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    50d2:	87 7f       	andi	r24, 0xF7	; 247
    50d4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    50d8:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    50da:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    50de:	8f 77       	andi	r24, 0x7F	; 127
    50e0:	03 c0       	rjmp	.+6      	; 0x50e8 <turnOffPWM+0x68>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    50e2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    50e6:	8f 7d       	andi	r24, 0xDF	; 223
    50e8:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    50ec:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
		#endif			
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
    50ee:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    50f2:	87 7f       	andi	r24, 0xF7	; 247
    50f4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    50f8:	08 95       	ret

000050fa <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    50fa:	cf 93       	push	r28
    50fc:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    50fe:	90 e0       	ldi	r25, 0x00	; 0
    5100:	fc 01       	movw	r30, r24
    5102:	e8 57       	subi	r30, 0x78	; 120
    5104:	fe 4f       	sbci	r31, 0xFE	; 254
    5106:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    5108:	fc 01       	movw	r30, r24
    510a:	e9 55       	subi	r30, 0x59	; 89
    510c:	fe 4f       	sbci	r31, 0xFE	; 254
    510e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    5110:	88 23       	and	r24, r24
    5112:	61 f1       	breq	.+88     	; 0x516c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    5114:	90 e0       	ldi	r25, 0x00	; 0
    5116:	88 0f       	add	r24, r24
    5118:	99 1f       	adc	r25, r25
    511a:	fc 01       	movw	r30, r24
    511c:	ee 51       	subi	r30, 0x1E	; 30
    511e:	fe 4f       	sbci	r31, 0xFE	; 254
    5120:	c5 91       	lpm	r28, Z+
    5122:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    5124:	fc 01       	movw	r30, r24
    5126:	ec 52       	subi	r30, 0x2C	; 44
    5128:	fe 4f       	sbci	r31, 0xFE	; 254
    512a:	a5 91       	lpm	r26, Z+
    512c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    512e:	61 11       	cpse	r22, r1
    5130:	09 c0       	rjmp	.+18     	; 0x5144 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    5132:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5134:	f8 94       	cli
		*reg &= ~bit;
    5136:	88 81       	ld	r24, Y
    5138:	20 95       	com	r18
    513a:	82 23       	and	r24, r18
    513c:	88 83       	st	Y, r24
		*out &= ~bit;
    513e:	ec 91       	ld	r30, X
    5140:	2e 23       	and	r18, r30
    5142:	0b c0       	rjmp	.+22     	; 0x515a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    5144:	62 30       	cpi	r22, 0x02	; 2
    5146:	61 f4       	brne	.+24     	; 0x5160 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    5148:	9f b7       	in	r25, 0x3f	; 63
                cli();
    514a:	f8 94       	cli
		*reg &= ~bit;
    514c:	88 81       	ld	r24, Y
    514e:	32 2f       	mov	r19, r18
    5150:	30 95       	com	r19
    5152:	83 23       	and	r24, r19
    5154:	88 83       	st	Y, r24
		*out |= bit;
    5156:	ec 91       	ld	r30, X
    5158:	2e 2b       	or	r18, r30
    515a:	2c 93       	st	X, r18
		SREG = oldSREG;
    515c:	9f bf       	out	0x3f, r25	; 63
    515e:	06 c0       	rjmp	.+12     	; 0x516c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    5160:	8f b7       	in	r24, 0x3f	; 63
                cli();
    5162:	f8 94       	cli
		*reg |= bit;
    5164:	e8 81       	ld	r30, Y
    5166:	2e 2b       	or	r18, r30
    5168:	28 83       	st	Y, r18
		SREG = oldSREG;
    516a:	8f bf       	out	0x3f, r24	; 63
	}
}
    516c:	df 91       	pop	r29
    516e:	cf 91       	pop	r28
    5170:	08 95       	ret

00005172 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    5172:	1f 93       	push	r17
    5174:	cf 93       	push	r28
    5176:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    5178:	28 2f       	mov	r18, r24
    517a:	30 e0       	ldi	r19, 0x00	; 0
    517c:	f9 01       	movw	r30, r18
    517e:	e7 59       	subi	r30, 0x97	; 151
    5180:	fe 4f       	sbci	r31, 0xFE	; 254
    5182:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    5184:	f9 01       	movw	r30, r18
    5186:	e8 57       	subi	r30, 0x78	; 120
    5188:	fe 4f       	sbci	r31, 0xFE	; 254
    518a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    518c:	f9 01       	movw	r30, r18
    518e:	e9 55       	subi	r30, 0x59	; 89
    5190:	fe 4f       	sbci	r31, 0xFE	; 254
    5192:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    5194:	cc 23       	and	r28, r28
    5196:	c1 f0       	breq	.+48     	; 0x51c8 <digitalWrite+0x56>
    5198:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    519a:	81 11       	cpse	r24, r1
    519c:	0e 94 40 28 	call	0x5080	; 0x5080 <turnOffPWM>

	out = portOutputRegister(port);
    51a0:	ec 2f       	mov	r30, r28
    51a2:	f0 e0       	ldi	r31, 0x00	; 0
    51a4:	ee 0f       	add	r30, r30
    51a6:	ff 1f       	adc	r31, r31
    51a8:	ec 52       	subi	r30, 0x2C	; 44
    51aa:	fe 4f       	sbci	r31, 0xFE	; 254
    51ac:	a5 91       	lpm	r26, Z+
    51ae:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    51b0:	9f b7       	in	r25, 0x3f	; 63
	cli();
    51b2:	f8 94       	cli

	if (val == LOW) {
    51b4:	11 11       	cpse	r17, r1
    51b6:	04 c0       	rjmp	.+8      	; 0x51c0 <digitalWrite+0x4e>
		*out &= ~bit;
    51b8:	8c 91       	ld	r24, X
    51ba:	d0 95       	com	r29
    51bc:	d8 23       	and	r29, r24
    51be:	02 c0       	rjmp	.+4      	; 0x51c4 <digitalWrite+0x52>
	} else {
		*out |= bit;
    51c0:	ec 91       	ld	r30, X
    51c2:	de 2b       	or	r29, r30
    51c4:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    51c6:	9f bf       	out	0x3f, r25	; 63
}
    51c8:	df 91       	pop	r29
    51ca:	cf 91       	pop	r28
    51cc:	1f 91       	pop	r17
    51ce:	08 95       	ret

000051d0 <digitalRead>:

int digitalRead(uint8_t pin)
{
    51d0:	cf 93       	push	r28
    51d2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    51d4:	28 2f       	mov	r18, r24
    51d6:	30 e0       	ldi	r19, 0x00	; 0
    51d8:	f9 01       	movw	r30, r18
    51da:	e7 59       	subi	r30, 0x97	; 151
    51dc:	fe 4f       	sbci	r31, 0xFE	; 254
    51de:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    51e0:	f9 01       	movw	r30, r18
    51e2:	e8 57       	subi	r30, 0x78	; 120
    51e4:	fe 4f       	sbci	r31, 0xFE	; 254
    51e6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    51e8:	f9 01       	movw	r30, r18
    51ea:	e9 55       	subi	r30, 0x59	; 89
    51ec:	fe 4f       	sbci	r31, 0xFE	; 254
    51ee:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    51f0:	cc 23       	and	r28, r28
    51f2:	91 f0       	breq	.+36     	; 0x5218 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    51f4:	81 11       	cpse	r24, r1
    51f6:	0e 94 40 28 	call	0x5080	; 0x5080 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    51fa:	ec 2f       	mov	r30, r28
    51fc:	f0 e0       	ldi	r31, 0x00	; 0
    51fe:	ee 0f       	add	r30, r30
    5200:	ff 1f       	adc	r31, r31
    5202:	ea 53       	subi	r30, 0x3A	; 58
    5204:	fe 4f       	sbci	r31, 0xFE	; 254
    5206:	a5 91       	lpm	r26, Z+
    5208:	b4 91       	lpm	r27, Z
    520a:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    520c:	ed 23       	and	r30, r29
    520e:	81 e0       	ldi	r24, 0x01	; 1
    5210:	90 e0       	ldi	r25, 0x00	; 0
    5212:	21 f4       	brne	.+8      	; 0x521c <digitalRead+0x4c>
    5214:	80 e0       	ldi	r24, 0x00	; 0
    5216:	02 c0       	rjmp	.+4      	; 0x521c <digitalRead+0x4c>
    5218:	80 e0       	ldi	r24, 0x00	; 0
    521a:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    521c:	df 91       	pop	r29
    521e:	cf 91       	pop	r28
    5220:	08 95       	ret

00005222 <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    5222:	fc 01       	movw	r30, r24
    5224:	80 81       	ld	r24, Z
    5226:	91 81       	ldd	r25, Z+1	; 0x01
    5228:	0c 94 3a 2b 	jmp	0x5674	; 0x5674 <free>

0000522c <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    522c:	cf 93       	push	r28
    522e:	df 93       	push	r29
    5230:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    5232:	88 81       	ld	r24, Y
    5234:	99 81       	ldd	r25, Y+1	; 0x01
    5236:	00 97       	sbiw	r24, 0x00	; 0
    5238:	11 f0       	breq	.+4      	; 0x523e <_ZN6String10invalidateEv+0x12>
    523a:	0e 94 3a 2b 	call	0x5674	; 0x5674 <free>
	buffer = NULL;
    523e:	19 82       	std	Y+1, r1	; 0x01
    5240:	18 82       	st	Y, r1
	capacity = len = 0;
    5242:	1d 82       	std	Y+5, r1	; 0x05
    5244:	1c 82       	std	Y+4, r1	; 0x04
    5246:	1b 82       	std	Y+3, r1	; 0x03
    5248:	1a 82       	std	Y+2, r1	; 0x02
}
    524a:	df 91       	pop	r29
    524c:	cf 91       	pop	r28
    524e:	08 95       	ret

00005250 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    5250:	0f 93       	push	r16
    5252:	1f 93       	push	r17
    5254:	cf 93       	push	r28
    5256:	df 93       	push	r29
    5258:	ec 01       	movw	r28, r24
    525a:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    525c:	6f 5f       	subi	r22, 0xFF	; 255
    525e:	7f 4f       	sbci	r23, 0xFF	; 255
    5260:	88 81       	ld	r24, Y
    5262:	99 81       	ldd	r25, Y+1	; 0x01
    5264:	0e 94 c3 2b 	call	0x5786	; 0x5786 <realloc>
	if (newbuffer) {
    5268:	00 97       	sbiw	r24, 0x00	; 0
    526a:	31 f0       	breq	.+12     	; 0x5278 <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    526c:	99 83       	std	Y+1, r25	; 0x01
    526e:	88 83       	st	Y, r24
		capacity = maxStrLen;
    5270:	1b 83       	std	Y+3, r17	; 0x03
    5272:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    5274:	81 e0       	ldi	r24, 0x01	; 1
    5276:	01 c0       	rjmp	.+2      	; 0x527a <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    5278:	80 e0       	ldi	r24, 0x00	; 0
}
    527a:	df 91       	pop	r29
    527c:	cf 91       	pop	r28
    527e:	1f 91       	pop	r17
    5280:	0f 91       	pop	r16
    5282:	08 95       	ret

00005284 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    5284:	cf 93       	push	r28
    5286:	df 93       	push	r29
    5288:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    528a:	88 81       	ld	r24, Y
    528c:	99 81       	ldd	r25, Y+1	; 0x01
    528e:	89 2b       	or	r24, r25
    5290:	29 f0       	breq	.+10     	; 0x529c <_ZN6String7reserveEj+0x18>
    5292:	8a 81       	ldd	r24, Y+2	; 0x02
    5294:	9b 81       	ldd	r25, Y+3	; 0x03
    5296:	86 17       	cp	r24, r22
    5298:	97 07       	cpc	r25, r23
    529a:	60 f4       	brcc	.+24     	; 0x52b4 <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    529c:	ce 01       	movw	r24, r28
    529e:	0e 94 28 29 	call	0x5250	; 0x5250 <_ZN6String12changeBufferEj>
    52a2:	88 23       	and	r24, r24
    52a4:	41 f0       	breq	.+16     	; 0x52b6 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    52a6:	8c 81       	ldd	r24, Y+4	; 0x04
    52a8:	9d 81       	ldd	r25, Y+5	; 0x05
    52aa:	89 2b       	or	r24, r25
    52ac:	19 f4       	brne	.+6      	; 0x52b4 <_ZN6String7reserveEj+0x30>
    52ae:	e8 81       	ld	r30, Y
    52b0:	f9 81       	ldd	r31, Y+1	; 0x01
    52b2:	10 82       	st	Z, r1
    52b4:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    52b6:	df 91       	pop	r29
    52b8:	cf 91       	pop	r28
    52ba:	08 95       	ret

000052bc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    52bc:	ef 92       	push	r14
    52be:	ff 92       	push	r15
    52c0:	0f 93       	push	r16
    52c2:	1f 93       	push	r17
    52c4:	cf 93       	push	r28
    52c6:	df 93       	push	r29
    52c8:	ec 01       	movw	r28, r24
    52ca:	7b 01       	movw	r14, r22
    52cc:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    52ce:	ba 01       	movw	r22, r20
    52d0:	0e 94 42 29 	call	0x5284	; 0x5284 <_ZN6String7reserveEj>
    52d4:	81 11       	cpse	r24, r1
    52d6:	04 c0       	rjmp	.+8      	; 0x52e0 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    52d8:	ce 01       	movw	r24, r28
    52da:	0e 94 16 29 	call	0x522c	; 0x522c <_ZN6String10invalidateEv>
		return *this;
    52de:	07 c0       	rjmp	.+14     	; 0x52ee <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    52e0:	1d 83       	std	Y+5, r17	; 0x05
    52e2:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    52e4:	b7 01       	movw	r22, r14
    52e6:	88 81       	ld	r24, Y
    52e8:	99 81       	ldd	r25, Y+1	; 0x01
    52ea:	0e 94 be 2c 	call	0x597c	; 0x597c <strcpy>
	return *this;
}
    52ee:	ce 01       	movw	r24, r28
    52f0:	df 91       	pop	r29
    52f2:	cf 91       	pop	r28
    52f4:	1f 91       	pop	r17
    52f6:	0f 91       	pop	r16
    52f8:	ff 90       	pop	r15
    52fa:	ef 90       	pop	r14
    52fc:	08 95       	ret

000052fe <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    52fe:	fc 01       	movw	r30, r24
    5300:	11 82       	std	Z+1, r1	; 0x01
    5302:	10 82       	st	Z, r1
	capacity = 0;
    5304:	13 82       	std	Z+3, r1	; 0x03
    5306:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    5308:	15 82       	std	Z+5, r1	; 0x05
    530a:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    530c:	61 15       	cp	r22, r1
    530e:	71 05       	cpc	r23, r1
    5310:	51 f0       	breq	.+20     	; 0x5326 <_ZN6StringC1EPKc+0x28>
    5312:	fb 01       	movw	r30, r22
    5314:	01 90       	ld	r0, Z+
    5316:	00 20       	and	r0, r0
    5318:	e9 f7       	brne	.-6      	; 0x5314 <_ZN6StringC1EPKc+0x16>
    531a:	31 97       	sbiw	r30, 0x01	; 1
    531c:	af 01       	movw	r20, r30
    531e:	46 1b       	sub	r20, r22
    5320:	57 0b       	sbc	r21, r23
    5322:	0c 94 5e 29 	jmp	0x52bc	; 0x52bc <_ZN6String4copyEPKcj>
    5326:	08 95       	ret

00005328 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    5328:	08 95       	ret

0000532a <_ZN13PluggableUSB_12getInterfaceEPh>:
		_initEndpoints[lastEp] = node->endpointType[i];
		lastEp++;
	}
	return true;
	// restart USB layer???
}
    532a:	ef 92       	push	r14
    532c:	ff 92       	push	r15
    532e:	0f 93       	push	r16
    5330:	1f 93       	push	r17
    5332:	cf 93       	push	r28
    5334:	df 93       	push	r29
    5336:	7b 01       	movw	r14, r22
    5338:	fc 01       	movw	r30, r24
    533a:	c2 81       	ldd	r28, Z+2	; 0x02
    533c:	d3 81       	ldd	r29, Z+3	; 0x03
    533e:	00 e0       	ldi	r16, 0x00	; 0
    5340:	10 e0       	ldi	r17, 0x00	; 0
    5342:	20 97       	sbiw	r28, 0x00	; 0
    5344:	81 f0       	breq	.+32     	; 0x5366 <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
    5346:	e8 81       	ld	r30, Y
    5348:	f9 81       	ldd	r31, Y+1	; 0x01
    534a:	02 80       	ldd	r0, Z+2	; 0x02
    534c:	f3 81       	ldd	r31, Z+3	; 0x03
    534e:	e0 2d       	mov	r30, r0
    5350:	b7 01       	movw	r22, r14
    5352:	ce 01       	movw	r24, r28
    5354:	09 95       	icall
    5356:	97 fd       	sbrc	r25, 7
    5358:	08 c0       	rjmp	.+16     	; 0x536a <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
    535a:	08 0f       	add	r16, r24
    535c:	19 1f       	adc	r17, r25
    535e:	08 84       	ldd	r0, Y+8	; 0x08
    5360:	d9 85       	ldd	r29, Y+9	; 0x09
    5362:	c0 2d       	mov	r28, r0
    5364:	ee cf       	rjmp	.-36     	; 0x5342 <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    5366:	c8 01       	movw	r24, r16
    5368:	02 c0       	rjmp	.+4      	; 0x536e <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
    536a:	8f ef       	ldi	r24, 0xFF	; 255
    536c:	9f ef       	ldi	r25, 0xFF	; 255
    536e:	df 91       	pop	r29
    5370:	cf 91       	pop	r28
    5372:	1f 91       	pop	r17
    5374:	0f 91       	pop	r16
    5376:	ff 90       	pop	r15
    5378:	ef 90       	pop	r14
    537a:	08 95       	ret

0000537c <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    537c:	0f 93       	push	r16
    537e:	1f 93       	push	r17
    5380:	cf 93       	push	r28
    5382:	df 93       	push	r29
    5384:	8b 01       	movw	r16, r22
    5386:	fc 01       	movw	r30, r24
    5388:	c2 81       	ldd	r28, Z+2	; 0x02
    538a:	d3 81       	ldd	r29, Z+3	; 0x03
    538c:	20 97       	sbiw	r28, 0x00	; 0
    538e:	71 f0       	breq	.+28     	; 0x53ac <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
    5390:	e8 81       	ld	r30, Y
    5392:	f9 81       	ldd	r31, Y+1	; 0x01
    5394:	04 80       	ldd	r0, Z+4	; 0x04
    5396:	f5 81       	ldd	r31, Z+5	; 0x05
    5398:	e0 2d       	mov	r30, r0
    539a:	b8 01       	movw	r22, r16
    539c:	ce 01       	movw	r24, r28
    539e:	09 95       	icall
    53a0:	00 97       	sbiw	r24, 0x00	; 0
    53a2:	31 f4       	brne	.+12     	; 0x53b0 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
    53a4:	08 84       	ldd	r0, Y+8	; 0x08
    53a6:	d9 85       	ldd	r29, Y+9	; 0x09
    53a8:	c0 2d       	mov	r28, r0
    53aa:	f0 cf       	rjmp	.-32     	; 0x538c <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
    53ac:	80 e0       	ldi	r24, 0x00	; 0
    53ae:	90 e0       	ldi	r25, 0x00	; 0
    53b0:	df 91       	pop	r29
    53b2:	cf 91       	pop	r28
    53b4:	1f 91       	pop	r17
    53b6:	0f 91       	pop	r16
    53b8:	08 95       	ret

000053ba <_ZN13PluggableUSB_12getShortNameEPc>:
    53ba:	0f 93       	push	r16
    53bc:	1f 93       	push	r17
    53be:	cf 93       	push	r28
    53c0:	df 93       	push	r29
    53c2:	8b 01       	movw	r16, r22
    53c4:	fc 01       	movw	r30, r24
    53c6:	c2 81       	ldd	r28, Z+2	; 0x02
    53c8:	d3 81       	ldd	r29, Z+3	; 0x03
    53ca:	20 97       	sbiw	r28, 0x00	; 0
    53cc:	71 f0       	breq	.+28     	; 0x53ea <_ZN13PluggableUSB_12getShortNameEPc+0x30>
    53ce:	e8 81       	ld	r30, Y
    53d0:	f9 81       	ldd	r31, Y+1	; 0x01
    53d2:	06 80       	ldd	r0, Z+6	; 0x06
    53d4:	f7 81       	ldd	r31, Z+7	; 0x07
    53d6:	e0 2d       	mov	r30, r0
    53d8:	b8 01       	movw	r22, r16
    53da:	ce 01       	movw	r24, r28
    53dc:	09 95       	icall
    53de:	08 0f       	add	r16, r24
    53e0:	11 1d       	adc	r17, r1
    53e2:	08 84       	ldd	r0, Y+8	; 0x08
    53e4:	d9 85       	ldd	r29, Y+9	; 0x09
    53e6:	c0 2d       	mov	r28, r0
    53e8:	f0 cf       	rjmp	.-32     	; 0x53ca <_ZN13PluggableUSB_12getShortNameEPc+0x10>
    53ea:	f8 01       	movw	r30, r16
    53ec:	10 82       	st	Z, r1
    53ee:	df 91       	pop	r29
    53f0:	cf 91       	pop	r28
    53f2:	1f 91       	pop	r17
    53f4:	0f 91       	pop	r16
    53f6:	08 95       	ret

000053f8 <_ZN13PluggableUSB_5setupER8USBSetup>:
    53f8:	0f 93       	push	r16
    53fa:	1f 93       	push	r17
    53fc:	cf 93       	push	r28
    53fe:	df 93       	push	r29
    5400:	8b 01       	movw	r16, r22
    5402:	fc 01       	movw	r30, r24
    5404:	c2 81       	ldd	r28, Z+2	; 0x02
    5406:	d3 81       	ldd	r29, Z+3	; 0x03
    5408:	20 97       	sbiw	r28, 0x00	; 0
    540a:	71 f0       	breq	.+28     	; 0x5428 <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
    540c:	e8 81       	ld	r30, Y
    540e:	f9 81       	ldd	r31, Y+1	; 0x01
    5410:	01 90       	ld	r0, Z+
    5412:	f0 81       	ld	r31, Z
    5414:	e0 2d       	mov	r30, r0
    5416:	b8 01       	movw	r22, r16
    5418:	ce 01       	movw	r24, r28
    541a:	09 95       	icall
    541c:	81 11       	cpse	r24, r1
    541e:	05 c0       	rjmp	.+10     	; 0x542a <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
    5420:	08 84       	ldd	r0, Y+8	; 0x08
    5422:	d9 85       	ldd	r29, Y+9	; 0x09
    5424:	c0 2d       	mov	r28, r0
    5426:	f0 cf       	rjmp	.-32     	; 0x5408 <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
    5428:	80 e0       	ldi	r24, 0x00	; 0
    542a:	df 91       	pop	r29
    542c:	cf 91       	pop	r28
    542e:	1f 91       	pop	r17
    5430:	0f 91       	pop	r16
    5432:	08 95       	ret

00005434 <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    5434:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <_ZGVZ12PluggableUSBvE3obj>
    5438:	81 11       	cpse	r24, r1
    543a:	0d c0       	rjmp	.+26     	; 0x5456 <_Z12PluggableUSBv+0x22>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    543c:	82 e0       	ldi	r24, 0x02	; 2
    543e:	80 93 ed 06 	sts	0x06ED, r24	; 0x8006ed <_ZZ12PluggableUSBvE3obj>
    5442:	84 e0       	ldi	r24, 0x04	; 4
    5444:	80 93 ee 06 	sts	0x06EE, r24	; 0x8006ee <_ZZ12PluggableUSBvE3obj+0x1>
    5448:	10 92 f0 06 	sts	0x06F0, r1	; 0x8006f0 <_ZZ12PluggableUSBvE3obj+0x3>
    544c:	10 92 ef 06 	sts	0x06EF, r1	; 0x8006ef <_ZZ12PluggableUSBvE3obj+0x2>
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    5450:	81 e0       	ldi	r24, 0x01	; 1
    5452:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <_ZGVZ12PluggableUSBvE3obj>
	return obj;
}
    5456:	8d ee       	ldi	r24, 0xED	; 237
    5458:	96 e0       	ldi	r25, 0x06	; 6
    545a:	08 95       	ret

0000545c <__unordsf2>:
    545c:	0e 94 49 1b 	call	0x3692	; 0x3692 <__fp_cmp>
    5460:	88 0b       	sbc	r24, r24
    5462:	99 0b       	sbc	r25, r25
    5464:	08 95       	ret

00005466 <__divmodhi4>:
    5466:	97 fb       	bst	r25, 7
    5468:	07 2e       	mov	r0, r23
    546a:	16 f4       	brtc	.+4      	; 0x5470 <__divmodhi4+0xa>
    546c:	00 94       	com	r0
    546e:	07 d0       	rcall	.+14     	; 0x547e <__divmodhi4_neg1>
    5470:	77 fd       	sbrc	r23, 7
    5472:	09 d0       	rcall	.+18     	; 0x5486 <__divmodhi4_neg2>
    5474:	0e 94 8e 2a 	call	0x551c	; 0x551c <__udivmodhi4>
    5478:	07 fc       	sbrc	r0, 7
    547a:	05 d0       	rcall	.+10     	; 0x5486 <__divmodhi4_neg2>
    547c:	3e f4       	brtc	.+14     	; 0x548c <__divmodhi4_exit>

0000547e <__divmodhi4_neg1>:
    547e:	90 95       	com	r25
    5480:	81 95       	neg	r24
    5482:	9f 4f       	sbci	r25, 0xFF	; 255
    5484:	08 95       	ret

00005486 <__divmodhi4_neg2>:
    5486:	70 95       	com	r23
    5488:	61 95       	neg	r22
    548a:	7f 4f       	sbci	r23, 0xFF	; 255

0000548c <__divmodhi4_exit>:
    548c:	08 95       	ret

0000548e <__udivmodsi4>:
    548e:	a1 e2       	ldi	r26, 0x21	; 33
    5490:	1a 2e       	mov	r1, r26
    5492:	aa 1b       	sub	r26, r26
    5494:	bb 1b       	sub	r27, r27
    5496:	fd 01       	movw	r30, r26
    5498:	0d c0       	rjmp	.+26     	; 0x54b4 <__udivmodsi4_ep>

0000549a <__udivmodsi4_loop>:
    549a:	aa 1f       	adc	r26, r26
    549c:	bb 1f       	adc	r27, r27
    549e:	ee 1f       	adc	r30, r30
    54a0:	ff 1f       	adc	r31, r31
    54a2:	a2 17       	cp	r26, r18
    54a4:	b3 07       	cpc	r27, r19
    54a6:	e4 07       	cpc	r30, r20
    54a8:	f5 07       	cpc	r31, r21
    54aa:	20 f0       	brcs	.+8      	; 0x54b4 <__udivmodsi4_ep>
    54ac:	a2 1b       	sub	r26, r18
    54ae:	b3 0b       	sbc	r27, r19
    54b0:	e4 0b       	sbc	r30, r20
    54b2:	f5 0b       	sbc	r31, r21

000054b4 <__udivmodsi4_ep>:
    54b4:	66 1f       	adc	r22, r22
    54b6:	77 1f       	adc	r23, r23
    54b8:	88 1f       	adc	r24, r24
    54ba:	99 1f       	adc	r25, r25
    54bc:	1a 94       	dec	r1
    54be:	69 f7       	brne	.-38     	; 0x549a <__udivmodsi4_loop>
    54c0:	60 95       	com	r22
    54c2:	70 95       	com	r23
    54c4:	80 95       	com	r24
    54c6:	90 95       	com	r25
    54c8:	9b 01       	movw	r18, r22
    54ca:	ac 01       	movw	r20, r24
    54cc:	bd 01       	movw	r22, r26
    54ce:	cf 01       	movw	r24, r30
    54d0:	08 95       	ret

000054d2 <__divmodsi4>:
    54d2:	05 2e       	mov	r0, r21
    54d4:	97 fb       	bst	r25, 7
    54d6:	1e f4       	brtc	.+6      	; 0x54de <__divmodsi4+0xc>
    54d8:	00 94       	com	r0
    54da:	0e 94 80 2a 	call	0x5500	; 0x5500 <__negsi2>
    54de:	57 fd       	sbrc	r21, 7
    54e0:	07 d0       	rcall	.+14     	; 0x54f0 <__divmodsi4_neg2>
    54e2:	0e 94 47 2a 	call	0x548e	; 0x548e <__udivmodsi4>
    54e6:	07 fc       	sbrc	r0, 7
    54e8:	03 d0       	rcall	.+6      	; 0x54f0 <__divmodsi4_neg2>
    54ea:	4e f4       	brtc	.+18     	; 0x54fe <__divmodsi4_exit>
    54ec:	0c 94 80 2a 	jmp	0x5500	; 0x5500 <__negsi2>

000054f0 <__divmodsi4_neg2>:
    54f0:	50 95       	com	r21
    54f2:	40 95       	com	r20
    54f4:	30 95       	com	r19
    54f6:	21 95       	neg	r18
    54f8:	3f 4f       	sbci	r19, 0xFF	; 255
    54fa:	4f 4f       	sbci	r20, 0xFF	; 255
    54fc:	5f 4f       	sbci	r21, 0xFF	; 255

000054fe <__divmodsi4_exit>:
    54fe:	08 95       	ret

00005500 <__negsi2>:
    5500:	90 95       	com	r25
    5502:	80 95       	com	r24
    5504:	70 95       	com	r23
    5506:	61 95       	neg	r22
    5508:	7f 4f       	sbci	r23, 0xFF	; 255
    550a:	8f 4f       	sbci	r24, 0xFF	; 255
    550c:	9f 4f       	sbci	r25, 0xFF	; 255
    550e:	08 95       	ret

00005510 <__tablejump2__>:
    5510:	ee 0f       	add	r30, r30
    5512:	ff 1f       	adc	r31, r31
    5514:	05 90       	lpm	r0, Z+
    5516:	f4 91       	lpm	r31, Z
    5518:	e0 2d       	mov	r30, r0
    551a:	09 94       	ijmp

0000551c <__udivmodhi4>:
    551c:	aa 1b       	sub	r26, r26
    551e:	bb 1b       	sub	r27, r27
    5520:	51 e1       	ldi	r21, 0x11	; 17
    5522:	07 c0       	rjmp	.+14     	; 0x5532 <__udivmodhi4_ep>

00005524 <__udivmodhi4_loop>:
    5524:	aa 1f       	adc	r26, r26
    5526:	bb 1f       	adc	r27, r27
    5528:	a6 17       	cp	r26, r22
    552a:	b7 07       	cpc	r27, r23
    552c:	10 f0       	brcs	.+4      	; 0x5532 <__udivmodhi4_ep>
    552e:	a6 1b       	sub	r26, r22
    5530:	b7 0b       	sbc	r27, r23

00005532 <__udivmodhi4_ep>:
    5532:	88 1f       	adc	r24, r24
    5534:	99 1f       	adc	r25, r25
    5536:	5a 95       	dec	r21
    5538:	a9 f7       	brne	.-22     	; 0x5524 <__udivmodhi4_loop>
    553a:	80 95       	com	r24
    553c:	90 95       	com	r25
    553e:	bc 01       	movw	r22, r24
    5540:	cd 01       	movw	r24, r26
    5542:	08 95       	ret

00005544 <malloc>:
    5544:	0f 93       	push	r16
    5546:	1f 93       	push	r17
    5548:	cf 93       	push	r28
    554a:	df 93       	push	r29
    554c:	82 30       	cpi	r24, 0x02	; 2
    554e:	91 05       	cpc	r25, r1
    5550:	10 f4       	brcc	.+4      	; 0x5556 <malloc+0x12>
    5552:	82 e0       	ldi	r24, 0x02	; 2
    5554:	90 e0       	ldi	r25, 0x00	; 0
    5556:	e0 91 fb 06 	lds	r30, 0x06FB	; 0x8006fb <__flp>
    555a:	f0 91 fc 06 	lds	r31, 0x06FC	; 0x8006fc <__flp+0x1>
    555e:	20 e0       	ldi	r18, 0x00	; 0
    5560:	30 e0       	ldi	r19, 0x00	; 0
    5562:	a0 e0       	ldi	r26, 0x00	; 0
    5564:	b0 e0       	ldi	r27, 0x00	; 0
    5566:	30 97       	sbiw	r30, 0x00	; 0
    5568:	19 f1       	breq	.+70     	; 0x55b0 <malloc+0x6c>
    556a:	40 81       	ld	r20, Z
    556c:	51 81       	ldd	r21, Z+1	; 0x01
    556e:	02 81       	ldd	r16, Z+2	; 0x02
    5570:	13 81       	ldd	r17, Z+3	; 0x03
    5572:	48 17       	cp	r20, r24
    5574:	59 07       	cpc	r21, r25
    5576:	c8 f0       	brcs	.+50     	; 0x55aa <malloc+0x66>
    5578:	84 17       	cp	r24, r20
    557a:	95 07       	cpc	r25, r21
    557c:	69 f4       	brne	.+26     	; 0x5598 <malloc+0x54>
    557e:	10 97       	sbiw	r26, 0x00	; 0
    5580:	31 f0       	breq	.+12     	; 0x558e <malloc+0x4a>
    5582:	12 96       	adiw	r26, 0x02	; 2
    5584:	0c 93       	st	X, r16
    5586:	12 97       	sbiw	r26, 0x02	; 2
    5588:	13 96       	adiw	r26, 0x03	; 3
    558a:	1c 93       	st	X, r17
    558c:	27 c0       	rjmp	.+78     	; 0x55dc <malloc+0x98>
    558e:	00 93 fb 06 	sts	0x06FB, r16	; 0x8006fb <__flp>
    5592:	10 93 fc 06 	sts	0x06FC, r17	; 0x8006fc <__flp+0x1>
    5596:	22 c0       	rjmp	.+68     	; 0x55dc <malloc+0x98>
    5598:	21 15       	cp	r18, r1
    559a:	31 05       	cpc	r19, r1
    559c:	19 f0       	breq	.+6      	; 0x55a4 <malloc+0x60>
    559e:	42 17       	cp	r20, r18
    55a0:	53 07       	cpc	r21, r19
    55a2:	18 f4       	brcc	.+6      	; 0x55aa <malloc+0x66>
    55a4:	9a 01       	movw	r18, r20
    55a6:	bd 01       	movw	r22, r26
    55a8:	ef 01       	movw	r28, r30
    55aa:	df 01       	movw	r26, r30
    55ac:	f8 01       	movw	r30, r16
    55ae:	db cf       	rjmp	.-74     	; 0x5566 <malloc+0x22>
    55b0:	21 15       	cp	r18, r1
    55b2:	31 05       	cpc	r19, r1
    55b4:	f9 f0       	breq	.+62     	; 0x55f4 <malloc+0xb0>
    55b6:	28 1b       	sub	r18, r24
    55b8:	39 0b       	sbc	r19, r25
    55ba:	24 30       	cpi	r18, 0x04	; 4
    55bc:	31 05       	cpc	r19, r1
    55be:	80 f4       	brcc	.+32     	; 0x55e0 <malloc+0x9c>
    55c0:	8a 81       	ldd	r24, Y+2	; 0x02
    55c2:	9b 81       	ldd	r25, Y+3	; 0x03
    55c4:	61 15       	cp	r22, r1
    55c6:	71 05       	cpc	r23, r1
    55c8:	21 f0       	breq	.+8      	; 0x55d2 <malloc+0x8e>
    55ca:	fb 01       	movw	r30, r22
    55cc:	93 83       	std	Z+3, r25	; 0x03
    55ce:	82 83       	std	Z+2, r24	; 0x02
    55d0:	04 c0       	rjmp	.+8      	; 0x55da <malloc+0x96>
    55d2:	90 93 fc 06 	sts	0x06FC, r25	; 0x8006fc <__flp+0x1>
    55d6:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <__flp>
    55da:	fe 01       	movw	r30, r28
    55dc:	32 96       	adiw	r30, 0x02	; 2
    55de:	44 c0       	rjmp	.+136    	; 0x5668 <malloc+0x124>
    55e0:	fe 01       	movw	r30, r28
    55e2:	e2 0f       	add	r30, r18
    55e4:	f3 1f       	adc	r31, r19
    55e6:	81 93       	st	Z+, r24
    55e8:	91 93       	st	Z+, r25
    55ea:	22 50       	subi	r18, 0x02	; 2
    55ec:	31 09       	sbc	r19, r1
    55ee:	39 83       	std	Y+1, r19	; 0x01
    55f0:	28 83       	st	Y, r18
    55f2:	3a c0       	rjmp	.+116    	; 0x5668 <malloc+0x124>
    55f4:	20 91 f9 06 	lds	r18, 0x06F9	; 0x8006f9 <__brkval>
    55f8:	30 91 fa 06 	lds	r19, 0x06FA	; 0x8006fa <__brkval+0x1>
    55fc:	23 2b       	or	r18, r19
    55fe:	41 f4       	brne	.+16     	; 0x5610 <malloc+0xcc>
    5600:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    5604:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    5608:	30 93 fa 06 	sts	0x06FA, r19	; 0x8006fa <__brkval+0x1>
    560c:	20 93 f9 06 	sts	0x06F9, r18	; 0x8006f9 <__brkval>
    5610:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    5614:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    5618:	21 15       	cp	r18, r1
    561a:	31 05       	cpc	r19, r1
    561c:	41 f4       	brne	.+16     	; 0x562e <malloc+0xea>
    561e:	2d b7       	in	r18, 0x3d	; 61
    5620:	3e b7       	in	r19, 0x3e	; 62
    5622:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    5626:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    562a:	24 1b       	sub	r18, r20
    562c:	35 0b       	sbc	r19, r21
    562e:	e0 91 f9 06 	lds	r30, 0x06F9	; 0x8006f9 <__brkval>
    5632:	f0 91 fa 06 	lds	r31, 0x06FA	; 0x8006fa <__brkval+0x1>
    5636:	e2 17       	cp	r30, r18
    5638:	f3 07       	cpc	r31, r19
    563a:	a0 f4       	brcc	.+40     	; 0x5664 <malloc+0x120>
    563c:	2e 1b       	sub	r18, r30
    563e:	3f 0b       	sbc	r19, r31
    5640:	28 17       	cp	r18, r24
    5642:	39 07       	cpc	r19, r25
    5644:	78 f0       	brcs	.+30     	; 0x5664 <malloc+0x120>
    5646:	ac 01       	movw	r20, r24
    5648:	4e 5f       	subi	r20, 0xFE	; 254
    564a:	5f 4f       	sbci	r21, 0xFF	; 255
    564c:	24 17       	cp	r18, r20
    564e:	35 07       	cpc	r19, r21
    5650:	48 f0       	brcs	.+18     	; 0x5664 <malloc+0x120>
    5652:	4e 0f       	add	r20, r30
    5654:	5f 1f       	adc	r21, r31
    5656:	50 93 fa 06 	sts	0x06FA, r21	; 0x8006fa <__brkval+0x1>
    565a:	40 93 f9 06 	sts	0x06F9, r20	; 0x8006f9 <__brkval>
    565e:	81 93       	st	Z+, r24
    5660:	91 93       	st	Z+, r25
    5662:	02 c0       	rjmp	.+4      	; 0x5668 <malloc+0x124>
    5664:	e0 e0       	ldi	r30, 0x00	; 0
    5666:	f0 e0       	ldi	r31, 0x00	; 0
    5668:	cf 01       	movw	r24, r30
    566a:	df 91       	pop	r29
    566c:	cf 91       	pop	r28
    566e:	1f 91       	pop	r17
    5670:	0f 91       	pop	r16
    5672:	08 95       	ret

00005674 <free>:
    5674:	cf 93       	push	r28
    5676:	df 93       	push	r29
    5678:	00 97       	sbiw	r24, 0x00	; 0
    567a:	09 f4       	brne	.+2      	; 0x567e <free+0xa>
    567c:	81 c0       	rjmp	.+258    	; 0x5780 <free+0x10c>
    567e:	fc 01       	movw	r30, r24
    5680:	32 97       	sbiw	r30, 0x02	; 2
    5682:	13 82       	std	Z+3, r1	; 0x03
    5684:	12 82       	std	Z+2, r1	; 0x02
    5686:	a0 91 fb 06 	lds	r26, 0x06FB	; 0x8006fb <__flp>
    568a:	b0 91 fc 06 	lds	r27, 0x06FC	; 0x8006fc <__flp+0x1>
    568e:	10 97       	sbiw	r26, 0x00	; 0
    5690:	81 f4       	brne	.+32     	; 0x56b2 <free+0x3e>
    5692:	20 81       	ld	r18, Z
    5694:	31 81       	ldd	r19, Z+1	; 0x01
    5696:	82 0f       	add	r24, r18
    5698:	93 1f       	adc	r25, r19
    569a:	20 91 f9 06 	lds	r18, 0x06F9	; 0x8006f9 <__brkval>
    569e:	30 91 fa 06 	lds	r19, 0x06FA	; 0x8006fa <__brkval+0x1>
    56a2:	28 17       	cp	r18, r24
    56a4:	39 07       	cpc	r19, r25
    56a6:	51 f5       	brne	.+84     	; 0x56fc <free+0x88>
    56a8:	f0 93 fa 06 	sts	0x06FA, r31	; 0x8006fa <__brkval+0x1>
    56ac:	e0 93 f9 06 	sts	0x06F9, r30	; 0x8006f9 <__brkval>
    56b0:	67 c0       	rjmp	.+206    	; 0x5780 <free+0x10c>
    56b2:	ed 01       	movw	r28, r26
    56b4:	20 e0       	ldi	r18, 0x00	; 0
    56b6:	30 e0       	ldi	r19, 0x00	; 0
    56b8:	ce 17       	cp	r28, r30
    56ba:	df 07       	cpc	r29, r31
    56bc:	40 f4       	brcc	.+16     	; 0x56ce <free+0x5a>
    56be:	4a 81       	ldd	r20, Y+2	; 0x02
    56c0:	5b 81       	ldd	r21, Y+3	; 0x03
    56c2:	9e 01       	movw	r18, r28
    56c4:	41 15       	cp	r20, r1
    56c6:	51 05       	cpc	r21, r1
    56c8:	f1 f0       	breq	.+60     	; 0x5706 <free+0x92>
    56ca:	ea 01       	movw	r28, r20
    56cc:	f5 cf       	rjmp	.-22     	; 0x56b8 <free+0x44>
    56ce:	d3 83       	std	Z+3, r29	; 0x03
    56d0:	c2 83       	std	Z+2, r28	; 0x02
    56d2:	40 81       	ld	r20, Z
    56d4:	51 81       	ldd	r21, Z+1	; 0x01
    56d6:	84 0f       	add	r24, r20
    56d8:	95 1f       	adc	r25, r21
    56da:	c8 17       	cp	r28, r24
    56dc:	d9 07       	cpc	r29, r25
    56de:	59 f4       	brne	.+22     	; 0x56f6 <free+0x82>
    56e0:	88 81       	ld	r24, Y
    56e2:	99 81       	ldd	r25, Y+1	; 0x01
    56e4:	84 0f       	add	r24, r20
    56e6:	95 1f       	adc	r25, r21
    56e8:	02 96       	adiw	r24, 0x02	; 2
    56ea:	91 83       	std	Z+1, r25	; 0x01
    56ec:	80 83       	st	Z, r24
    56ee:	8a 81       	ldd	r24, Y+2	; 0x02
    56f0:	9b 81       	ldd	r25, Y+3	; 0x03
    56f2:	93 83       	std	Z+3, r25	; 0x03
    56f4:	82 83       	std	Z+2, r24	; 0x02
    56f6:	21 15       	cp	r18, r1
    56f8:	31 05       	cpc	r19, r1
    56fa:	29 f4       	brne	.+10     	; 0x5706 <free+0x92>
    56fc:	f0 93 fc 06 	sts	0x06FC, r31	; 0x8006fc <__flp+0x1>
    5700:	e0 93 fb 06 	sts	0x06FB, r30	; 0x8006fb <__flp>
    5704:	3d c0       	rjmp	.+122    	; 0x5780 <free+0x10c>
    5706:	e9 01       	movw	r28, r18
    5708:	fb 83       	std	Y+3, r31	; 0x03
    570a:	ea 83       	std	Y+2, r30	; 0x02
    570c:	49 91       	ld	r20, Y+
    570e:	59 91       	ld	r21, Y+
    5710:	c4 0f       	add	r28, r20
    5712:	d5 1f       	adc	r29, r21
    5714:	ec 17       	cp	r30, r28
    5716:	fd 07       	cpc	r31, r29
    5718:	61 f4       	brne	.+24     	; 0x5732 <free+0xbe>
    571a:	80 81       	ld	r24, Z
    571c:	91 81       	ldd	r25, Z+1	; 0x01
    571e:	84 0f       	add	r24, r20
    5720:	95 1f       	adc	r25, r21
    5722:	02 96       	adiw	r24, 0x02	; 2
    5724:	e9 01       	movw	r28, r18
    5726:	99 83       	std	Y+1, r25	; 0x01
    5728:	88 83       	st	Y, r24
    572a:	82 81       	ldd	r24, Z+2	; 0x02
    572c:	93 81       	ldd	r25, Z+3	; 0x03
    572e:	9b 83       	std	Y+3, r25	; 0x03
    5730:	8a 83       	std	Y+2, r24	; 0x02
    5732:	e0 e0       	ldi	r30, 0x00	; 0
    5734:	f0 e0       	ldi	r31, 0x00	; 0
    5736:	12 96       	adiw	r26, 0x02	; 2
    5738:	8d 91       	ld	r24, X+
    573a:	9c 91       	ld	r25, X
    573c:	13 97       	sbiw	r26, 0x03	; 3
    573e:	00 97       	sbiw	r24, 0x00	; 0
    5740:	19 f0       	breq	.+6      	; 0x5748 <free+0xd4>
    5742:	fd 01       	movw	r30, r26
    5744:	dc 01       	movw	r26, r24
    5746:	f7 cf       	rjmp	.-18     	; 0x5736 <free+0xc2>
    5748:	8d 91       	ld	r24, X+
    574a:	9c 91       	ld	r25, X
    574c:	11 97       	sbiw	r26, 0x01	; 1
    574e:	9d 01       	movw	r18, r26
    5750:	2e 5f       	subi	r18, 0xFE	; 254
    5752:	3f 4f       	sbci	r19, 0xFF	; 255
    5754:	82 0f       	add	r24, r18
    5756:	93 1f       	adc	r25, r19
    5758:	20 91 f9 06 	lds	r18, 0x06F9	; 0x8006f9 <__brkval>
    575c:	30 91 fa 06 	lds	r19, 0x06FA	; 0x8006fa <__brkval+0x1>
    5760:	28 17       	cp	r18, r24
    5762:	39 07       	cpc	r19, r25
    5764:	69 f4       	brne	.+26     	; 0x5780 <free+0x10c>
    5766:	30 97       	sbiw	r30, 0x00	; 0
    5768:	29 f4       	brne	.+10     	; 0x5774 <free+0x100>
    576a:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <__flp+0x1>
    576e:	10 92 fb 06 	sts	0x06FB, r1	; 0x8006fb <__flp>
    5772:	02 c0       	rjmp	.+4      	; 0x5778 <free+0x104>
    5774:	13 82       	std	Z+3, r1	; 0x03
    5776:	12 82       	std	Z+2, r1	; 0x02
    5778:	b0 93 fa 06 	sts	0x06FA, r27	; 0x8006fa <__brkval+0x1>
    577c:	a0 93 f9 06 	sts	0x06F9, r26	; 0x8006f9 <__brkval>
    5780:	df 91       	pop	r29
    5782:	cf 91       	pop	r28
    5784:	08 95       	ret

00005786 <realloc>:
    5786:	a0 e0       	ldi	r26, 0x00	; 0
    5788:	b0 e0       	ldi	r27, 0x00	; 0
    578a:	e9 ec       	ldi	r30, 0xC9	; 201
    578c:	fb e2       	ldi	r31, 0x2B	; 43
    578e:	0c 94 f8 2c 	jmp	0x59f0	; 0x59f0 <__prologue_saves__+0x8>
    5792:	ec 01       	movw	r28, r24
    5794:	00 97       	sbiw	r24, 0x00	; 0
    5796:	21 f4       	brne	.+8      	; 0x57a0 <realloc+0x1a>
    5798:	cb 01       	movw	r24, r22
    579a:	0e 94 a2 2a 	call	0x5544	; 0x5544 <malloc>
    579e:	b4 c0       	rjmp	.+360    	; 0x5908 <realloc+0x182>
    57a0:	fc 01       	movw	r30, r24
    57a2:	e6 0f       	add	r30, r22
    57a4:	f7 1f       	adc	r31, r23
    57a6:	9c 01       	movw	r18, r24
    57a8:	22 50       	subi	r18, 0x02	; 2
    57aa:	31 09       	sbc	r19, r1
    57ac:	e2 17       	cp	r30, r18
    57ae:	f3 07       	cpc	r31, r19
    57b0:	08 f4       	brcc	.+2      	; 0x57b4 <realloc+0x2e>
    57b2:	a8 c0       	rjmp	.+336    	; 0x5904 <realloc+0x17e>
    57b4:	d9 01       	movw	r26, r18
    57b6:	0d 91       	ld	r16, X+
    57b8:	1c 91       	ld	r17, X
    57ba:	11 97       	sbiw	r26, 0x01	; 1
    57bc:	06 17       	cp	r16, r22
    57be:	17 07       	cpc	r17, r23
    57c0:	b0 f0       	brcs	.+44     	; 0x57ee <realloc+0x68>
    57c2:	05 30       	cpi	r16, 0x05	; 5
    57c4:	11 05       	cpc	r17, r1
    57c6:	08 f4       	brcc	.+2      	; 0x57ca <realloc+0x44>
    57c8:	9b c0       	rjmp	.+310    	; 0x5900 <realloc+0x17a>
    57ca:	c8 01       	movw	r24, r16
    57cc:	04 97       	sbiw	r24, 0x04	; 4
    57ce:	86 17       	cp	r24, r22
    57d0:	97 07       	cpc	r25, r23
    57d2:	08 f4       	brcc	.+2      	; 0x57d6 <realloc+0x50>
    57d4:	95 c0       	rjmp	.+298    	; 0x5900 <realloc+0x17a>
    57d6:	02 50       	subi	r16, 0x02	; 2
    57d8:	11 09       	sbc	r17, r1
    57da:	06 1b       	sub	r16, r22
    57dc:	17 0b       	sbc	r17, r23
    57de:	01 93       	st	Z+, r16
    57e0:	11 93       	st	Z+, r17
    57e2:	6d 93       	st	X+, r22
    57e4:	7c 93       	st	X, r23
    57e6:	cf 01       	movw	r24, r30
    57e8:	0e 94 3a 2b 	call	0x5674	; 0x5674 <free>
    57ec:	89 c0       	rjmp	.+274    	; 0x5900 <realloc+0x17a>
    57ee:	5b 01       	movw	r10, r22
    57f0:	a0 1a       	sub	r10, r16
    57f2:	b1 0a       	sbc	r11, r17
    57f4:	4c 01       	movw	r8, r24
    57f6:	80 0e       	add	r8, r16
    57f8:	91 1e       	adc	r9, r17
    57fa:	a0 91 fb 06 	lds	r26, 0x06FB	; 0x8006fb <__flp>
    57fe:	b0 91 fc 06 	lds	r27, 0x06FC	; 0x8006fc <__flp+0x1>
    5802:	61 2c       	mov	r6, r1
    5804:	71 2c       	mov	r7, r1
    5806:	e1 2c       	mov	r14, r1
    5808:	f1 2c       	mov	r15, r1
    580a:	10 97       	sbiw	r26, 0x00	; 0
    580c:	09 f4       	brne	.+2      	; 0x5810 <realloc+0x8a>
    580e:	46 c0       	rjmp	.+140    	; 0x589c <realloc+0x116>
    5810:	8d 91       	ld	r24, X+
    5812:	9c 91       	ld	r25, X
    5814:	11 97       	sbiw	r26, 0x01	; 1
    5816:	a8 15       	cp	r26, r8
    5818:	b9 05       	cpc	r27, r9
    581a:	b1 f5       	brne	.+108    	; 0x5888 <realloc+0x102>
    581c:	6c 01       	movw	r12, r24
    581e:	42 e0       	ldi	r20, 0x02	; 2
    5820:	c4 0e       	add	r12, r20
    5822:	d1 1c       	adc	r13, r1
    5824:	ca 14       	cp	r12, r10
    5826:	db 04       	cpc	r13, r11
    5828:	78 f1       	brcs	.+94     	; 0x5888 <realloc+0x102>
    582a:	4c 01       	movw	r8, r24
    582c:	8a 18       	sub	r8, r10
    582e:	9b 08       	sbc	r9, r11
    5830:	64 01       	movw	r12, r8
    5832:	42 e0       	ldi	r20, 0x02	; 2
    5834:	c4 0e       	add	r12, r20
    5836:	d1 1c       	adc	r13, r1
    5838:	12 96       	adiw	r26, 0x02	; 2
    583a:	bc 90       	ld	r11, X
    583c:	12 97       	sbiw	r26, 0x02	; 2
    583e:	13 96       	adiw	r26, 0x03	; 3
    5840:	ac 91       	ld	r26, X
    5842:	b5 e0       	ldi	r27, 0x05	; 5
    5844:	cb 16       	cp	r12, r27
    5846:	d1 04       	cpc	r13, r1
    5848:	40 f0       	brcs	.+16     	; 0x585a <realloc+0xd4>
    584a:	b2 82       	std	Z+2, r11	; 0x02
    584c:	a3 83       	std	Z+3, r26	; 0x03
    584e:	91 82       	std	Z+1, r9	; 0x01
    5850:	80 82       	st	Z, r8
    5852:	d9 01       	movw	r26, r18
    5854:	6d 93       	st	X+, r22
    5856:	7c 93       	st	X, r23
    5858:	09 c0       	rjmp	.+18     	; 0x586c <realloc+0xe6>
    585a:	0e 5f       	subi	r16, 0xFE	; 254
    585c:	1f 4f       	sbci	r17, 0xFF	; 255
    585e:	80 0f       	add	r24, r16
    5860:	91 1f       	adc	r25, r17
    5862:	f9 01       	movw	r30, r18
    5864:	91 83       	std	Z+1, r25	; 0x01
    5866:	80 83       	st	Z, r24
    5868:	eb 2d       	mov	r30, r11
    586a:	fa 2f       	mov	r31, r26
    586c:	e1 14       	cp	r14, r1
    586e:	f1 04       	cpc	r15, r1
    5870:	31 f0       	breq	.+12     	; 0x587e <realloc+0xf8>
    5872:	d7 01       	movw	r26, r14
    5874:	13 96       	adiw	r26, 0x03	; 3
    5876:	fc 93       	st	X, r31
    5878:	ee 93       	st	-X, r30
    587a:	12 97       	sbiw	r26, 0x02	; 2
    587c:	41 c0       	rjmp	.+130    	; 0x5900 <realloc+0x17a>
    587e:	f0 93 fc 06 	sts	0x06FC, r31	; 0x8006fc <__flp+0x1>
    5882:	e0 93 fb 06 	sts	0x06FB, r30	; 0x8006fb <__flp>
    5886:	3c c0       	rjmp	.+120    	; 0x5900 <realloc+0x17a>
    5888:	68 16       	cp	r6, r24
    588a:	79 06       	cpc	r7, r25
    588c:	08 f4       	brcc	.+2      	; 0x5890 <realloc+0x10a>
    588e:	3c 01       	movw	r6, r24
    5890:	7d 01       	movw	r14, r26
    5892:	12 96       	adiw	r26, 0x02	; 2
    5894:	0d 90       	ld	r0, X+
    5896:	bc 91       	ld	r27, X
    5898:	a0 2d       	mov	r26, r0
    589a:	b7 cf       	rjmp	.-146    	; 0x580a <realloc+0x84>
    589c:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <__brkval>
    58a0:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <__brkval+0x1>
    58a4:	88 16       	cp	r8, r24
    58a6:	99 06       	cpc	r9, r25
    58a8:	e1 f4       	brne	.+56     	; 0x58e2 <realloc+0x15c>
    58aa:	66 16       	cp	r6, r22
    58ac:	77 06       	cpc	r7, r23
    58ae:	c8 f4       	brcc	.+50     	; 0x58e2 <realloc+0x15c>
    58b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    58b4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    58b8:	00 97       	sbiw	r24, 0x00	; 0
    58ba:	41 f4       	brne	.+16     	; 0x58cc <realloc+0x146>
    58bc:	8d b7       	in	r24, 0x3d	; 61
    58be:	9e b7       	in	r25, 0x3e	; 62
    58c0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    58c4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    58c8:	84 1b       	sub	r24, r20
    58ca:	95 0b       	sbc	r25, r21
    58cc:	e8 17       	cp	r30, r24
    58ce:	f9 07       	cpc	r31, r25
    58d0:	c8 f4       	brcc	.+50     	; 0x5904 <realloc+0x17e>
    58d2:	f0 93 fa 06 	sts	0x06FA, r31	; 0x8006fa <__brkval+0x1>
    58d6:	e0 93 f9 06 	sts	0x06F9, r30	; 0x8006f9 <__brkval>
    58da:	f9 01       	movw	r30, r18
    58dc:	71 83       	std	Z+1, r23	; 0x01
    58de:	60 83       	st	Z, r22
    58e0:	0f c0       	rjmp	.+30     	; 0x5900 <realloc+0x17a>
    58e2:	cb 01       	movw	r24, r22
    58e4:	0e 94 a2 2a 	call	0x5544	; 0x5544 <malloc>
    58e8:	7c 01       	movw	r14, r24
    58ea:	00 97       	sbiw	r24, 0x00	; 0
    58ec:	59 f0       	breq	.+22     	; 0x5904 <realloc+0x17e>
    58ee:	a8 01       	movw	r20, r16
    58f0:	be 01       	movw	r22, r28
    58f2:	0e 94 b5 2c 	call	0x596a	; 0x596a <memcpy>
    58f6:	ce 01       	movw	r24, r28
    58f8:	0e 94 3a 2b 	call	0x5674	; 0x5674 <free>
    58fc:	c7 01       	movw	r24, r14
    58fe:	04 c0       	rjmp	.+8      	; 0x5908 <realloc+0x182>
    5900:	ce 01       	movw	r24, r28
    5902:	02 c0       	rjmp	.+4      	; 0x5908 <realloc+0x182>
    5904:	80 e0       	ldi	r24, 0x00	; 0
    5906:	90 e0       	ldi	r25, 0x00	; 0
    5908:	cd b7       	in	r28, 0x3d	; 61
    590a:	de b7       	in	r29, 0x3e	; 62
    590c:	ee e0       	ldi	r30, 0x0E	; 14
    590e:	0c 94 14 2d 	jmp	0x5a28	; 0x5a28 <__epilogue_restores__+0x8>

00005912 <abort>:
    5912:	81 e0       	ldi	r24, 0x01	; 1
    5914:	90 e0       	ldi	r25, 0x00	; 0
    5916:	f8 94       	cli
    5918:	0c 94 2b 2d 	jmp	0x5a56	; 0x5a56 <__do_global_dtors>

0000591c <atol>:
    591c:	1f 93       	push	r17
    591e:	fc 01       	movw	r30, r24
    5920:	99 27       	eor	r25, r25
    5922:	88 27       	eor	r24, r24
    5924:	bc 01       	movw	r22, r24
    5926:	e8 94       	clt
    5928:	11 91       	ld	r17, Z+
    592a:	10 32       	cpi	r17, 0x20	; 32
    592c:	e9 f3       	breq	.-6      	; 0x5928 <atol+0xc>
    592e:	19 30       	cpi	r17, 0x09	; 9
    5930:	10 f0       	brcs	.+4      	; 0x5936 <atol+0x1a>
    5932:	1e 30       	cpi	r17, 0x0E	; 14
    5934:	c8 f3       	brcs	.-14     	; 0x5928 <atol+0xc>
    5936:	1b 32       	cpi	r17, 0x2B	; 43
    5938:	51 f0       	breq	.+20     	; 0x594e <atol+0x32>
    593a:	1d 32       	cpi	r17, 0x2D	; 45
    593c:	49 f4       	brne	.+18     	; 0x5950 <atol+0x34>
    593e:	68 94       	set
    5940:	06 c0       	rjmp	.+12     	; 0x594e <atol+0x32>
    5942:	0e 94 df 2c 	call	0x59be	; 0x59be <__mulsi_const_10>
    5946:	61 0f       	add	r22, r17
    5948:	71 1d       	adc	r23, r1
    594a:	81 1d       	adc	r24, r1
    594c:	91 1d       	adc	r25, r1
    594e:	11 91       	ld	r17, Z+
    5950:	10 53       	subi	r17, 0x30	; 48
    5952:	1a 30       	cpi	r17, 0x0A	; 10
    5954:	b0 f3       	brcs	.-20     	; 0x5942 <atol+0x26>
    5956:	3e f4       	brtc	.+14     	; 0x5966 <atol+0x4a>
    5958:	90 95       	com	r25
    595a:	80 95       	com	r24
    595c:	70 95       	com	r23
    595e:	61 95       	neg	r22
    5960:	7f 4f       	sbci	r23, 0xFF	; 255
    5962:	8f 4f       	sbci	r24, 0xFF	; 255
    5964:	9f 4f       	sbci	r25, 0xFF	; 255
    5966:	1f 91       	pop	r17
    5968:	08 95       	ret

0000596a <memcpy>:
    596a:	fb 01       	movw	r30, r22
    596c:	dc 01       	movw	r26, r24
    596e:	02 c0       	rjmp	.+4      	; 0x5974 <memcpy+0xa>
    5970:	01 90       	ld	r0, Z+
    5972:	0d 92       	st	X+, r0
    5974:	41 50       	subi	r20, 0x01	; 1
    5976:	50 40       	sbci	r21, 0x00	; 0
    5978:	d8 f7       	brcc	.-10     	; 0x5970 <memcpy+0x6>
    597a:	08 95       	ret

0000597c <strcpy>:
    597c:	fb 01       	movw	r30, r22
    597e:	dc 01       	movw	r26, r24
    5980:	01 90       	ld	r0, Z+
    5982:	0d 92       	st	X+, r0
    5984:	00 20       	and	r0, r0
    5986:	e1 f7       	brne	.-8      	; 0x5980 <strcpy+0x4>
    5988:	08 95       	ret

0000598a <strstr>:
    598a:	fb 01       	movw	r30, r22
    598c:	51 91       	ld	r21, Z+
    598e:	55 23       	and	r21, r21
    5990:	a9 f0       	breq	.+42     	; 0x59bc <strstr+0x32>
    5992:	bf 01       	movw	r22, r30
    5994:	dc 01       	movw	r26, r24
    5996:	4d 91       	ld	r20, X+
    5998:	45 17       	cp	r20, r21
    599a:	41 11       	cpse	r20, r1
    599c:	e1 f7       	brne	.-8      	; 0x5996 <strstr+0xc>
    599e:	59 f4       	brne	.+22     	; 0x59b6 <strstr+0x2c>
    59a0:	cd 01       	movw	r24, r26
    59a2:	01 90       	ld	r0, Z+
    59a4:	00 20       	and	r0, r0
    59a6:	49 f0       	breq	.+18     	; 0x59ba <strstr+0x30>
    59a8:	4d 91       	ld	r20, X+
    59aa:	40 15       	cp	r20, r0
    59ac:	41 11       	cpse	r20, r1
    59ae:	c9 f3       	breq	.-14     	; 0x59a2 <strstr+0x18>
    59b0:	fb 01       	movw	r30, r22
    59b2:	41 11       	cpse	r20, r1
    59b4:	ef cf       	rjmp	.-34     	; 0x5994 <strstr+0xa>
    59b6:	81 e0       	ldi	r24, 0x01	; 1
    59b8:	90 e0       	ldi	r25, 0x00	; 0
    59ba:	01 97       	sbiw	r24, 0x01	; 1
    59bc:	08 95       	ret

000059be <__mulsi_const_10>:
    59be:	59 2f       	mov	r21, r25
    59c0:	48 2f       	mov	r20, r24
    59c2:	37 2f       	mov	r19, r23
    59c4:	26 2f       	mov	r18, r22
    59c6:	66 0f       	add	r22, r22
    59c8:	77 1f       	adc	r23, r23
    59ca:	88 1f       	adc	r24, r24
    59cc:	99 1f       	adc	r25, r25
    59ce:	66 0f       	add	r22, r22
    59d0:	77 1f       	adc	r23, r23
    59d2:	88 1f       	adc	r24, r24
    59d4:	99 1f       	adc	r25, r25
    59d6:	62 0f       	add	r22, r18
    59d8:	73 1f       	adc	r23, r19
    59da:	84 1f       	adc	r24, r20
    59dc:	95 1f       	adc	r25, r21
    59de:	66 0f       	add	r22, r22
    59e0:	77 1f       	adc	r23, r23
    59e2:	88 1f       	adc	r24, r24
    59e4:	99 1f       	adc	r25, r25
    59e6:	08 95       	ret

000059e8 <__prologue_saves__>:
    59e8:	2f 92       	push	r2
    59ea:	3f 92       	push	r3
    59ec:	4f 92       	push	r4
    59ee:	5f 92       	push	r5
    59f0:	6f 92       	push	r6
    59f2:	7f 92       	push	r7
    59f4:	8f 92       	push	r8
    59f6:	9f 92       	push	r9
    59f8:	af 92       	push	r10
    59fa:	bf 92       	push	r11
    59fc:	cf 92       	push	r12
    59fe:	df 92       	push	r13
    5a00:	ef 92       	push	r14
    5a02:	ff 92       	push	r15
    5a04:	0f 93       	push	r16
    5a06:	1f 93       	push	r17
    5a08:	cf 93       	push	r28
    5a0a:	df 93       	push	r29
    5a0c:	cd b7       	in	r28, 0x3d	; 61
    5a0e:	de b7       	in	r29, 0x3e	; 62
    5a10:	ca 1b       	sub	r28, r26
    5a12:	db 0b       	sbc	r29, r27
    5a14:	0f b6       	in	r0, 0x3f	; 63
    5a16:	f8 94       	cli
    5a18:	de bf       	out	0x3e, r29	; 62
    5a1a:	0f be       	out	0x3f, r0	; 63
    5a1c:	cd bf       	out	0x3d, r28	; 61
    5a1e:	09 94       	ijmp

00005a20 <__epilogue_restores__>:
    5a20:	2a 88       	ldd	r2, Y+18	; 0x12
    5a22:	39 88       	ldd	r3, Y+17	; 0x11
    5a24:	48 88       	ldd	r4, Y+16	; 0x10
    5a26:	5f 84       	ldd	r5, Y+15	; 0x0f
    5a28:	6e 84       	ldd	r6, Y+14	; 0x0e
    5a2a:	7d 84       	ldd	r7, Y+13	; 0x0d
    5a2c:	8c 84       	ldd	r8, Y+12	; 0x0c
    5a2e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5a30:	aa 84       	ldd	r10, Y+10	; 0x0a
    5a32:	b9 84       	ldd	r11, Y+9	; 0x09
    5a34:	c8 84       	ldd	r12, Y+8	; 0x08
    5a36:	df 80       	ldd	r13, Y+7	; 0x07
    5a38:	ee 80       	ldd	r14, Y+6	; 0x06
    5a3a:	fd 80       	ldd	r15, Y+5	; 0x05
    5a3c:	0c 81       	ldd	r16, Y+4	; 0x04
    5a3e:	1b 81       	ldd	r17, Y+3	; 0x03
    5a40:	aa 81       	ldd	r26, Y+2	; 0x02
    5a42:	b9 81       	ldd	r27, Y+1	; 0x01
    5a44:	ce 0f       	add	r28, r30
    5a46:	d1 1d       	adc	r29, r1
    5a48:	0f b6       	in	r0, 0x3f	; 63
    5a4a:	f8 94       	cli
    5a4c:	de bf       	out	0x3e, r29	; 62
    5a4e:	0f be       	out	0x3f, r0	; 63
    5a50:	cd bf       	out	0x3d, r28	; 61
    5a52:	ed 01       	movw	r28, r26
    5a54:	08 95       	ret

00005a56 <__do_global_dtors>:
    5a56:	10 e0       	ldi	r17, 0x00	; 0
    5a58:	cc ef       	ldi	r28, 0xFC	; 252
    5a5a:	d0 e0       	ldi	r29, 0x00	; 0
    5a5c:	04 c0       	rjmp	.+8      	; 0x5a66 <__do_global_dtors+0x10>
    5a5e:	fe 01       	movw	r30, r28
    5a60:	0e 94 88 2a 	call	0x5510	; 0x5510 <__tablejump2__>
    5a64:	21 96       	adiw	r28, 0x01	; 1
    5a66:	cd 3f       	cpi	r28, 0xFD	; 253
    5a68:	d1 07       	cpc	r29, r17
    5a6a:	c9 f7       	brne	.-14     	; 0x5a5e <__do_global_dtors+0x8>
    5a6c:	f8 94       	cli

00005a6e <__stop_program>:
    5a6e:	ff cf       	rjmp	.-2      	; 0x5a6e <__stop_program>
