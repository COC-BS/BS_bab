
Projektarbeit_COC_BRA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ee  00800100  0000454a  000045de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000454a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000278  008002ee  008002ee  000047cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000047cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000047fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b80  00000000  00000000  0000483c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00018af1  00000000  00000000  000053bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004118  00000000  00000000  0001dead  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000658a  00000000  00000000  00021fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002444  00000000  00000000  00028550  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004f83  00000000  00000000  0002a994  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000cc85  00000000  00000000  0002f917  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c70  00000000  00000000  0003c59c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__dtors_end>
       4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      10:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      14:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      18:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      1c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      20:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      24:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      28:	0c 94 85 1a 	jmp	0x350a	; 0x350a <__vector_10>
      2c:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__vector_11>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      34:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      38:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      3c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      40:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      44:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      48:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      4c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      50:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      54:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      58:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      5c:	0c 94 19 1b 	jmp	0x3632	; 0x3632 <__vector_23>
      60:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      64:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      68:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      6c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      70:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      74:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      78:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      7c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      80:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      84:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      88:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      8c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      90:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__vector_36>
      94:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      98:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      9c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ac:	7a 1c       	adc	r7, r10
      ae:	7d 1c       	adc	r7, r13
      b0:	6c 1c       	adc	r6, r12
      b2:	70 1c       	adc	r7, r0
      b4:	76 1c       	adc	r7, r6
      b6:	9e 1c       	adc	r9, r14
      b8:	9e 1c       	adc	r9, r14
      ba:	9e 1c       	adc	r9, r14
      bc:	81 1c       	adc	r8, r1
      be:	85 1c       	adc	r8, r5
      c0:	89 1c       	adc	r8, r9
      c2:	8f 1c       	adc	r8, r15
      c4:	93 1c       	adc	r9, r3
      c6:	9e 1c       	adc	r9, r14
      c8:	99 1c       	adc	r9, r9

000000ca <USB_DeviceDescriptorIAD>:
      ca:	12 01 00 02 ef 02 01 40 41 23 36 80 00 01 01 02     .......@A#6.....
      da:	03 01                                               ..

000000dc <STRING_MANUFACTURER>:
      dc:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

000000e8 <STRING_PRODUCT>:
      e8:	41 72 64 75 69 6e 6f 20 4c 65 6f 6e 61 72 64 6f     Arduino Leonardo
	...

000000f9 <STRING_LANGUAGE>:
      f9:	04 03 09 04                                         ....

000000fd <analog_pin_to_channel_PGM>:
      fd:	07 06 05 04 01 00 08 0a 0b 0c 0d 09                 ............

00000109 <digital_pin_to_timer_PGM>:
     109:	00 00 00 02 00 09 0f 00 00 03 04 01 00 0c 00 00     ................
	...

00000128 <digital_pin_to_bit_mask_PGM>:
     128:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     138:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

00000147 <digital_pin_to_port_PGM>:
     147:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     157:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

00000166 <port_to_input_PGM>:
     166:	00 00 00 00 23 00 26 00 29 00 2c 00 2f 00           ....#.&.).,./.

00000174 <port_to_output_PGM>:
     174:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

00000182 <port_to_mode_PGM>:
     182:	00 00 00 00 24 00 27 00 2a 00 2d 00 30 00           ....$.'.*.-.0.

00000190 <_cdcInterface>:
     190:	08 0b 00 02 02 02 01 00 09 04 00 00 01 02 02 00     ................
     1a0:	00 05 24 00 10 01 05 24 01 01 01 04 24 02 06 05     ..$....$....$...
     1b0:	24 06 00 01 07 05 81 03 10 00 40 09 04 01 00 02     $.........@.....
     1c0:	0a 00 00 00 07 05 02 02 40 00 00 07 05 83 02 40     ........@......@
	...

000001d2 <__ctors_start>:
     1d2:	80 07       	cpc	r24, r16
     1d4:	57 13       	cpse	r21, r23
     1d6:	bb 1e       	adc	r11, r27

000001d8 <__ctors_end>:
     1d8:	c3 08       	sbc	r12, r3

000001da <__dtors_end>:
     1da:	11 24       	eor	r1, r1
     1dc:	1f be       	out	0x3f, r1	; 63
     1de:	cf ef       	ldi	r28, 0xFF	; 255
     1e0:	da e0       	ldi	r29, 0x0A	; 10
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	cd bf       	out	0x3d, r28	; 61

000001e6 <__do_copy_data>:
     1e6:	12 e0       	ldi	r17, 0x02	; 2
     1e8:	a0 e0       	ldi	r26, 0x00	; 0
     1ea:	b1 e0       	ldi	r27, 0x01	; 1
     1ec:	ea e4       	ldi	r30, 0x4A	; 74
     1ee:	f5 e4       	ldi	r31, 0x45	; 69
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <__do_copy_data+0x10>
     1f2:	05 90       	lpm	r0, Z+
     1f4:	0d 92       	st	X+, r0
     1f6:	ae 3e       	cpi	r26, 0xEE	; 238
     1f8:	b1 07       	cpc	r27, r17
     1fa:	d9 f7       	brne	.-10     	; 0x1f2 <__do_copy_data+0xc>

000001fc <__do_clear_bss>:
     1fc:	25 e0       	ldi	r18, 0x05	; 5
     1fe:	ae ee       	ldi	r26, 0xEE	; 238
     200:	b2 e0       	ldi	r27, 0x02	; 2
     202:	01 c0       	rjmp	.+2      	; 0x206 <.do_clear_bss_start>

00000204 <.do_clear_bss_loop>:
     204:	1d 92       	st	X+, r1

00000206 <.do_clear_bss_start>:
     206:	a6 36       	cpi	r26, 0x66	; 102
     208:	b2 07       	cpc	r27, r18
     20a:	e1 f7       	brne	.-8      	; 0x204 <.do_clear_bss_loop>

0000020c <__do_global_ctors>:
     20c:	10 e0       	ldi	r17, 0x00	; 0
     20e:	cc ee       	ldi	r28, 0xEC	; 236
     210:	d0 e0       	ldi	r29, 0x00	; 0
     212:	04 c0       	rjmp	.+8      	; 0x21c <__do_global_ctors+0x10>
     214:	21 97       	sbiw	r28, 0x01	; 1
     216:	fe 01       	movw	r30, r28
     218:	0e 94 4b 20 	call	0x4096	; 0x4096 <__tablejump2__>
     21c:	c9 3e       	cpi	r28, 0xE9	; 233
     21e:	d1 07       	cpc	r29, r17
     220:	c9 f7       	brne	.-14     	; 0x214 <__do_global_ctors+0x8>
     222:	0e 94 ef 14 	call	0x29de	; 0x29de <main>
     226:	0c 94 98 22 	jmp	0x4530	; 0x4530 <__do_global_dtors>

0000022a <__bad_interrupt>:
     22a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022e <_Z6getkeyv>:
 */
int getkey(void)
{
	static int keys[NUMKEYS+1];
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	0e 94 31 1c 	call	0x3862	; 0x3862 <analogRead>

	if (val > 1020) { // no key pressed
     234:	8d 3f       	cpi	r24, 0xFD	; 253
     236:	23 e0       	ldi	r18, 0x03	; 3
     238:	92 07       	cpc	r25, r18
     23a:	20 f1       	brcs	.+72     	; 0x284 <_Z6getkeyv+0x56>
		if (++keys[0] > NOPRESS) {
     23c:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <__data_end>
     240:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <__data_end+0x1>
     244:	01 96       	adiw	r24, 0x01	; 1
     246:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <__data_end+0x1>
     24a:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <__data_end>
     24e:	03 97       	sbiw	r24, 0x03	; 3
     250:	0c f4       	brge	.+2      	; 0x254 <_Z6getkeyv+0x26>
     252:	6a c0       	rjmp	.+212    	; 0x328 <_Z6getkeyv+0xfa>
     254:	ee ee       	ldi	r30, 0xEE	; 238
     256:	f2 e0       	ldi	r31, 0x02	; 2
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	90 e0       	ldi	r25, 0x00	; 0
			for(uint8_t i = 0; i <= NUMKEYS; i++){
				if(keys[i] > KEYPRESS){
     260:	40 81       	ld	r20, Z
     262:	51 81       	ldd	r21, Z+1	; 0x01
     264:	44 30       	cpi	r20, 0x04	; 4
     266:	51 05       	cpc	r21, r1
     268:	2c f0       	brlt	.+10     	; 0x274 <_Z6getkeyv+0x46>
     26a:	c9 01       	movw	r24, r18
					data = i;
					if(keys[i] > LONGPRESS) data += 5;
     26c:	49 3c       	cpi	r20, 0xC9	; 201
     26e:	51 05       	cpc	r21, r1
     270:	0c f0       	brlt	.+2      	; 0x274 <_Z6getkeyv+0x46>
     272:	05 96       	adiw	r24, 0x05	; 5
				}
				keys[i] = 0;
     274:	11 92       	st	Z+, r1
     276:	11 92       	st	Z+, r1
     278:	2f 5f       	subi	r18, 0xFF	; 255
     27a:	3f 4f       	sbci	r19, 0xFF	; 255
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);

	if (val > 1020) { // no key pressed
		if (++keys[0] > NOPRESS) {
			for(uint8_t i = 0; i <= NUMKEYS; i++){
     27c:	26 30       	cpi	r18, 0x06	; 6
     27e:	31 05       	cpc	r19, r1
     280:	79 f7       	brne	.-34     	; 0x260 <_Z6getkeyv+0x32>
     282:	08 95       	ret
			}
		}
		else data = 0;
	}
	else {
		if (val < S1_LIMIT && keys[1] < 32000) ++keys[1]; // key1 pressed
     284:	89 34       	cpi	r24, 0x49	; 73
     286:	91 05       	cpc	r25, r1
     288:	70 f4       	brcc	.+28     	; 0x2a6 <_Z6getkeyv+0x78>
     28a:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <__data_end+0x2>
     28e:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <__data_end+0x3>
     292:	81 15       	cp	r24, r1
     294:	2d e7       	ldi	r18, 0x7D	; 125
     296:	92 07       	cpc	r25, r18
     298:	4c f4       	brge	.+18     	; 0x2ac <_Z6getkeyv+0x7e>
     29a:	01 96       	adiw	r24, 0x01	; 1
     29c:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <__data_end+0x3>
     2a0:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <__data_end+0x2>
     2a4:	41 c0       	rjmp	.+130    	; 0x328 <_Z6getkeyv+0xfa>
		else if (val < S2_LIMIT && keys[2] < 32000) ++keys[2]; //key2 pressed
     2a6:	8e 3e       	cpi	r24, 0xEE	; 238
     2a8:	91 05       	cpc	r25, r1
     2aa:	70 f4       	brcc	.+28     	; 0x2c8 <_Z6getkeyv+0x9a>
     2ac:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <__data_end+0x4>
     2b0:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <__data_end+0x5>
     2b4:	81 15       	cp	r24, r1
     2b6:	2d e7       	ldi	r18, 0x7D	; 125
     2b8:	92 07       	cpc	r25, r18
     2ba:	54 f4       	brge	.+20     	; 0x2d0 <_Z6getkeyv+0xa2>
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <__data_end+0x5>
     2c2:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <__data_end+0x4>
     2c6:	30 c0       	rjmp	.+96     	; 0x328 <_Z6getkeyv+0xfa>
		else if (val < S3_LIMIT && keys[3] < 32000) ++keys[3]; //key3 pressed
     2c8:	82 3a       	cpi	r24, 0xA2	; 162
     2ca:	21 e0       	ldi	r18, 0x01	; 1
     2cc:	92 07       	cpc	r25, r18
     2ce:	70 f4       	brcc	.+28     	; 0x2ec <_Z6getkeyv+0xbe>
     2d0:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <__data_end+0x6>
     2d4:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <__data_end+0x7>
     2d8:	81 15       	cp	r24, r1
     2da:	2d e7       	ldi	r18, 0x7D	; 125
     2dc:	92 07       	cpc	r25, r18
     2de:	4c f4       	brge	.+18     	; 0x2f2 <_Z6getkeyv+0xc4>
     2e0:	01 96       	adiw	r24, 0x01	; 1
     2e2:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <__data_end+0x7>
     2e6:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <__data_end+0x6>
     2ea:	1e c0       	rjmp	.+60     	; 0x328 <_Z6getkeyv+0xfa>
		else if (val < S4_LIMIT && keys[4] < 32000) ++keys[4]; //key4 pressed
     2ec:	80 37       	cpi	r24, 0x70	; 112
     2ee:	92 40       	sbci	r25, 0x02	; 2
     2f0:	70 f4       	brcc	.+28     	; 0x30e <_Z6getkeyv+0xe0>
     2f2:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <__data_end+0x8>
     2f6:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <__data_end+0x9>
     2fa:	81 15       	cp	r24, r1
     2fc:	2d e7       	ldi	r18, 0x7D	; 125
     2fe:	92 07       	cpc	r25, r18
     300:	34 f4       	brge	.+12     	; 0x30e <_Z6getkeyv+0xe0>
     302:	01 96       	adiw	r24, 0x01	; 1
     304:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <__data_end+0x9>
     308:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <__data_end+0x8>
     30c:	0d c0       	rjmp	.+26     	; 0x328 <_Z6getkeyv+0xfa>
		else if ( keys[5] < 32000) ++keys[5]; // key5 pressed
     30e:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <__data_end+0xa>
     312:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <__data_end+0xb>
     316:	81 15       	cp	r24, r1
     318:	2d e7       	ldi	r18, 0x7D	; 125
     31a:	92 07       	cpc	r25, r18
     31c:	2c f4       	brge	.+10     	; 0x328 <_Z6getkeyv+0xfa>
     31e:	01 96       	adiw	r24, 0x01	; 1
     320:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <__data_end+0xb>
     324:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <__data_end+0xa>
		data = 0;
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
	}
	return data;
}
     32c:	08 95       	ret

0000032e <_ZN5Print17availableForWriteEv>:
		return 31;
	}
}
int Datum::GetYear(){return YYYY_;};
int Datum::GetMonth(){return MM_;};
int Datum::GetDay(){return DD_;};
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	08 95       	ret

00000334 <_ZN5Print5flushEv>:
     334:	08 95       	ret

00000336 <_ZN7hd4478013iosetContrastEh>:
     336:	8d ef       	ldi	r24, 0xFD	; 253
     338:	9f ef       	ldi	r25, 0xFF	; 255
     33a:	08 95       	ret

0000033c <_Z14chooseTimeZonev>:
     33c:	90 91 3c 03 	lds	r25, 0x033C	; 0x80033c <timeZoneChoosen>
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	89 27       	eor	r24, r25
     344:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <timeZoneChoosen>
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	08 95       	ret

0000034e <_Z10changeAMPMv>:
     34e:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <ampm>
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	89 27       	eor	r24, r25
     356:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <ampm>
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	08 95       	ret

00000360 <_Z8setAlarmv>:
     360:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <weckerStatus>
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	89 27       	eor	r24, r25
     368:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <weckerStatus>
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	08 95       	ret

00000372 <_Z9gpsScreeni>:
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	ec 01       	movw	r28, r24
     378:	40 e0       	ldi	r20, 0x00	; 0
     37a:	60 e0       	ldi	r22, 0x00	; 0
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	94 e0       	ldi	r25, 0x04	; 4
     380:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7hd447809setCursorEhh>
     384:	6e e1       	ldi	r22, 0x1E	; 30
     386:	71 e0       	ldi	r23, 0x01	; 1
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	94 e0       	ldi	r25, 0x04	; 4
     38c:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <_ZN5Print5printEPKc>
     390:	ce 01       	movw	r24, r28
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>:
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	18 2f       	mov	r17, r24
     3a2:	d0 e0       	ldi	r29, 0x00	; 0
     3a4:	c0 e2       	ldi	r28, 0x20	; 32
     3a6:	6c 2f       	mov	r22, r28
     3a8:	8c e9       	ldi	r24, 0x9C	; 156
     3aa:	94 e0       	ldi	r25, 0x04	; 4
     3ac:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
     3b0:	8c e9       	ldi	r24, 0x9C	; 156
     3b2:	94 e0       	ldi	r25, 0x04	; 4
     3b4:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN7TwoWire15endTransmissionEv>
     3b8:	08 2f       	mov	r16, r24
     3ba:	61 e0       	ldi	r22, 0x01	; 1
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 94 1b 	call	0x3728	; 0x3728 <delay>
     3c6:	01 11       	cpse	r16, r1
     3c8:	03 c0       	rjmp	.+6      	; 0x3d0 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x38>
     3ca:	1d 17       	cp	r17, r29
     3cc:	f9 f0       	breq	.+62     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3ce:	df 5f       	subi	r29, 0xFF	; 255
     3d0:	cf 5f       	subi	r28, 0xFF	; 255
     3d2:	c8 32       	cpi	r28, 0x28	; 40
     3d4:	41 f7       	brne	.-48     	; 0x3a6 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0xe>
     3d6:	c8 e3       	ldi	r28, 0x38	; 56
     3d8:	6c 2f       	mov	r22, r28
     3da:	8c e9       	ldi	r24, 0x9C	; 156
     3dc:	94 e0       	ldi	r25, 0x04	; 4
     3de:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
     3e2:	8c e9       	ldi	r24, 0x9C	; 156
     3e4:	94 e0       	ldi	r25, 0x04	; 4
     3e6:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN7TwoWire15endTransmissionEv>
     3ea:	08 2f       	mov	r16, r24
     3ec:	61 e0       	ldi	r22, 0x01	; 1
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	0e 94 94 1b 	call	0x3728	; 0x3728 <delay>
     3f8:	01 11       	cpse	r16, r1
     3fa:	03 c0       	rjmp	.+6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3fc:	1d 17       	cp	r17, r29
     3fe:	31 f0       	breq	.+12     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     400:	df 5f       	subi	r29, 0xFF	; 255
     402:	cf 5f       	subi	r28, 0xFF	; 255
     404:	c0 34       	cpi	r28, 0x40	; 64
     406:	41 f7       	brne	.-48     	; 0x3d8 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x40>
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	01 c0       	rjmp	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40c:	8c 2f       	mov	r24, r28
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	1f 91       	pop	r17
     414:	0f 91       	pop	r16
     416:	08 95       	ret

00000418 <_ZN7TwoWire5writeEi>:
     418:	dc 01       	movw	r26, r24
     41a:	ed 91       	ld	r30, X+
     41c:	fc 91       	ld	r31, X
     41e:	01 90       	ld	r0, Z+
     420:	f0 81       	ld	r31, Z
     422:	e0 2d       	mov	r30, r0
     424:	09 94       	ijmp

00000426 <_ZN4Zeit4TickEv>:
     426:	fc 01       	movw	r30, r24
     428:	84 81       	ldd	r24, Z+4	; 0x04
     42a:	95 81       	ldd	r25, Z+5	; 0x05
     42c:	01 96       	adiw	r24, 0x01	; 1
     42e:	2c e3       	ldi	r18, 0x3C	; 60
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	b9 01       	movw	r22, r18
     434:	0e 94 15 20 	call	0x402a	; 0x402a <__divmodhi4>
     438:	95 83       	std	Z+5, r25	; 0x05
     43a:	84 83       	std	Z+4, r24	; 0x04
     43c:	89 2b       	or	r24, r25
     43e:	19 f0       	breq	.+6      	; 0x446 <_ZN4Zeit4TickEv+0x20>
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	08 95       	ret
     446:	82 81       	ldd	r24, Z+2	; 0x02
     448:	93 81       	ldd	r25, Z+3	; 0x03
     44a:	01 96       	adiw	r24, 0x01	; 1
     44c:	b9 01       	movw	r22, r18
     44e:	0e 94 15 20 	call	0x402a	; 0x402a <__divmodhi4>
     452:	93 83       	std	Z+3, r25	; 0x03
     454:	82 83       	std	Z+2, r24	; 0x02
     456:	89 2b       	or	r24, r25
     458:	99 f7       	brne	.-26     	; 0x440 <_ZN4Zeit4TickEv+0x1a>
     45a:	80 81       	ld	r24, Z
     45c:	91 81       	ldd	r25, Z+1	; 0x01
     45e:	01 96       	adiw	r24, 0x01	; 1
     460:	68 e1       	ldi	r22, 0x18	; 24
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	0e 94 15 20 	call	0x402a	; 0x402a <__divmodhi4>
     468:	ac 01       	movw	r20, r24
     46a:	91 83       	std	Z+1, r25	; 0x01
     46c:	80 83       	st	Z, r24
     46e:	21 e0       	ldi	r18, 0x01	; 1
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	45 2b       	or	r20, r21
     474:	09 f0       	breq	.+2      	; 0x478 <_ZN4Zeit4TickEv+0x52>
     476:	20 e0       	ldi	r18, 0x00	; 0
     478:	82 2f       	mov	r24, r18
     47a:	08 95       	ret

0000047c <_ZN5Datum11DaysOfMonthEv>:
     47c:	fc 01       	movw	r30, r24
     47e:	22 81       	ldd	r18, Z+2	; 0x02
     480:	33 81       	ldd	r19, Z+3	; 0x03
     482:	26 30       	cpi	r18, 0x06	; 6
     484:	31 05       	cpc	r19, r1
     486:	d9 f0       	breq	.+54     	; 0x4be <_ZN5Datum11DaysOfMonthEv+0x42>
     488:	3c f4       	brge	.+14     	; 0x498 <_ZN5Datum11DaysOfMonthEv+0x1c>
     48a:	22 30       	cpi	r18, 0x02	; 2
     48c:	31 05       	cpc	r19, r1
     48e:	69 f0       	breq	.+26     	; 0x4aa <_ZN5Datum11DaysOfMonthEv+0x2e>
     490:	24 30       	cpi	r18, 0x04	; 4
     492:	31 05       	cpc	r19, r1
     494:	39 f4       	brne	.+14     	; 0x4a4 <_ZN5Datum11DaysOfMonthEv+0x28>
     496:	13 c0       	rjmp	.+38     	; 0x4be <_ZN5Datum11DaysOfMonthEv+0x42>
     498:	29 30       	cpi	r18, 0x09	; 9
     49a:	31 05       	cpc	r19, r1
     49c:	81 f0       	breq	.+32     	; 0x4be <_ZN5Datum11DaysOfMonthEv+0x42>
     49e:	2b 30       	cpi	r18, 0x0B	; 11
     4a0:	31 05       	cpc	r19, r1
     4a2:	69 f0       	breq	.+26     	; 0x4be <_ZN5Datum11DaysOfMonthEv+0x42>
     4a4:	8f e1       	ldi	r24, 0x1F	; 31
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	08 95       	ret
     4aa:	fc 01       	movw	r30, r24
     4ac:	80 81       	ld	r24, Z
     4ae:	91 81       	ldd	r25, Z+1	; 0x01
     4b0:	83 70       	andi	r24, 0x03	; 3
     4b2:	99 27       	eor	r25, r25
     4b4:	89 2b       	or	r24, r25
     4b6:	31 f4       	brne	.+12     	; 0x4c4 <_ZN5Datum11DaysOfMonthEv+0x48>
     4b8:	8d e1       	ldi	r24, 0x1D	; 29
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	08 95       	ret
     4be:	8e e1       	ldi	r24, 0x1E	; 30
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	08 95       	ret
     4c4:	8c e1       	ldi	r24, 0x1C	; 28
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	08 95       	ret

000004ca <_ZN5Datum4TickEv>:
     4ca:	0f 93       	push	r16
     4cc:	1f 93       	push	r17
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
     4d2:	ec 01       	movw	r28, r24
     4d4:	0c 81       	ldd	r16, Y+4	; 0x04
     4d6:	1d 81       	ldd	r17, Y+5	; 0x05
     4d8:	0f 5f       	subi	r16, 0xFF	; 255
     4da:	1f 4f       	sbci	r17, 0xFF	; 255
     4dc:	1d 83       	std	Y+5, r17	; 0x05
     4de:	0c 83       	std	Y+4, r16	; 0x04
     4e0:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN5Datum11DaysOfMonthEv>
     4e4:	80 17       	cp	r24, r16
     4e6:	91 07       	cpc	r25, r17
     4e8:	a4 f4       	brge	.+40     	; 0x512 <_ZN5Datum4TickEv+0x48>
     4ea:	21 e0       	ldi	r18, 0x01	; 1
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	3d 83       	std	Y+5, r19	; 0x05
     4f0:	2c 83       	std	Y+4, r18	; 0x04
     4f2:	8a 81       	ldd	r24, Y+2	; 0x02
     4f4:	9b 81       	ldd	r25, Y+3	; 0x03
     4f6:	01 96       	adiw	r24, 0x01	; 1
     4f8:	8d 30       	cpi	r24, 0x0D	; 13
     4fa:	91 05       	cpc	r25, r1
     4fc:	1c f4       	brge	.+6      	; 0x504 <_ZN5Datum4TickEv+0x3a>
     4fe:	9b 83       	std	Y+3, r25	; 0x03
     500:	8a 83       	std	Y+2, r24	; 0x02
     502:	07 c0       	rjmp	.+14     	; 0x512 <_ZN5Datum4TickEv+0x48>
     504:	3b 83       	std	Y+3, r19	; 0x03
     506:	2a 83       	std	Y+2, r18	; 0x02
     508:	88 81       	ld	r24, Y
     50a:	99 81       	ldd	r25, Y+1	; 0x01
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	99 83       	std	Y+1, r25	; 0x01
     510:	88 83       	st	Y, r24
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	1f 91       	pop	r17
     518:	0f 91       	pop	r16
     51a:	08 95       	ret

0000051c <_Z5Watchv>:
 * frequent calls will result in counting the time. days-of-month and leap years are taken into account
 *
 * @return void
 */
void Watch()
{
     51c:	0f 93       	push	r16
     51e:	1f 93       	push	r17
#define INTERVAL 1000L
	static long target = INTERVAL;
	if (millis() > target)	{
     520:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <millis>
     524:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZZ5WatchvE6target>
     528:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZZ5WatchvE6target+0x1>
     52c:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <_ZZ5WatchvE6target+0x2>
     530:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <_ZZ5WatchvE6target+0x3>
     534:	06 17       	cp	r16, r22
     536:	17 07       	cpc	r17, r23
     538:	28 07       	cpc	r18, r24
     53a:	39 07       	cpc	r19, r25
     53c:	70 f5       	brcc	.+92     	; 0x59a <_Z5Watchv+0x7e>
		target += INTERVAL;
     53e:	d9 01       	movw	r26, r18
     540:	c8 01       	movw	r24, r16
     542:	88 51       	subi	r24, 0x18	; 24
     544:	9c 4f       	sbci	r25, 0xFC	; 252
     546:	af 4f       	sbci	r26, 0xFF	; 255
     548:	bf 4f       	sbci	r27, 0xFF	; 255
     54a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZZ5WatchvE6target>
     54e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZZ5WatchvE6target+0x1>
     552:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_ZZ5WatchvE6target+0x2>
     556:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_ZZ5WatchvE6target+0x3>
		if(zeitGMT.Tick()) datumGMT.Tick(); //Wenn die Zeit bei 24.00 ankommt wird ret = 1 gesetzt und das Datum eins weitergestellt
     55a:	83 e3       	ldi	r24, 0x33	; 51
     55c:	93 e0       	ldi	r25, 0x03	; 3
     55e:	0e 94 13 02 	call	0x426	; 0x426 <_ZN4Zeit4TickEv>
     562:	89 2b       	or	r24, r25
     564:	21 f0       	breq	.+8      	; 0x56e <_Z5Watchv+0x52>
     566:	80 e1       	ldi	r24, 0x10	; 16
     568:	93 e0       	ldi	r25, 0x03	; 3
     56a:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN5Datum4TickEv>
		if(zeitTimeZone.Tick()) datumTimeZone.Tick();
     56e:	8b e2       	ldi	r24, 0x2B	; 43
     570:	93 e0       	ldi	r25, 0x03	; 3
     572:	0e 94 13 02 	call	0x426	; 0x426 <_ZN4Zeit4TickEv>
     576:	89 2b       	or	r24, r25
     578:	21 f0       	breq	.+8      	; 0x582 <_Z5Watchv+0x66>
     57a:	88 e0       	ldi	r24, 0x08	; 8
     57c:	93 e0       	ldi	r25, 0x03	; 3
     57e:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN5Datum4TickEv>
		if(zeitLocal.Tick()) datumLocal.Tick(); 
     582:	83 e2       	ldi	r24, 0x23	; 35
     584:	93 e0       	ldi	r25, 0x03	; 3
     586:	0e 94 13 02 	call	0x426	; 0x426 <_ZN4Zeit4TickEv>
     58a:	89 2b       	or	r24, r25
     58c:	31 f0       	breq	.+12     	; 0x59a <_Z5Watchv+0x7e>
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	93 e0       	ldi	r25, 0x03	; 3
	}
#undef INTERVAL
}
     592:	1f 91       	pop	r17
     594:	0f 91       	pop	r16
	static long target = INTERVAL;
	if (millis() > target)	{
		target += INTERVAL;
		if(zeitGMT.Tick()) datumGMT.Tick(); //Wenn die Zeit bei 24.00 ankommt wird ret = 1 gesetzt und das Datum eins weitergestellt
		if(zeitTimeZone.Tick()) datumTimeZone.Tick();
		if(zeitLocal.Tick()) datumLocal.Tick(); 
     596:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <_ZN5Datum4TickEv>
	}
#undef INTERVAL
}
     59a:	1f 91       	pop	r17
     59c:	0f 91       	pop	r16
     59e:	08 95       	ret

000005a0 <_ZN4Zeit6ChangeEi>:
 * input UP, DOWN, RIGHT, LEFT_KEY is processed and returned as NO_KEY 
 *
 * @return int processed user input,  all except the four above mentioned is returned
 */
int Zeit::Change(int key)
{
     5a0:	fc 01       	movw	r30, r24
     5a2:	cb 01       	movw	r24, r22
	if((set_ < 1) || (set_ > 2)) set_ = 1;
     5a4:	26 81       	ldd	r18, Z+6	; 0x06
     5a6:	37 81       	ldd	r19, Z+7	; 0x07
     5a8:	21 50       	subi	r18, 0x01	; 1
     5aa:	31 09       	sbc	r19, r1
     5ac:	22 30       	cpi	r18, 0x02	; 2
     5ae:	31 05       	cpc	r19, r1
     5b0:	58 f0       	brcs	.+22     	; 0x5c8 <_ZN4Zeit6ChangeEi+0x28>
     5b2:	21 e0       	ldi	r18, 0x01	; 1
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	37 83       	std	Z+7, r19	; 0x07
     5b8:	26 83       	std	Z+6, r18	; 0x06
	switch(key){
     5ba:	62 30       	cpi	r22, 0x02	; 2
     5bc:	71 05       	cpc	r23, r1
     5be:	69 f0       	breq	.+26     	; 0x5da <_ZN4Zeit6ChangeEi+0x3a>
     5c0:	64 30       	cpi	r22, 0x04	; 4
     5c2:	71 05       	cpc	r23, r1
     5c4:	39 f0       	breq	.+14     	; 0x5d4 <_ZN4Zeit6ChangeEi+0x34>
     5c6:	14 c0       	rjmp	.+40     	; 0x5f0 <_ZN4Zeit6ChangeEi+0x50>
     5c8:	62 30       	cpi	r22, 0x02	; 2
     5ca:	71 05       	cpc	r23, r1
     5cc:	31 f0       	breq	.+12     	; 0x5da <_ZN4Zeit6ChangeEi+0x3a>
     5ce:	64 30       	cpi	r22, 0x04	; 4
     5d0:	71 05       	cpc	r23, r1
     5d2:	49 f4       	brne	.+18     	; 0x5e6 <_ZN4Zeit6ChangeEi+0x46>
	case RIGHT_KEY:
		set_ = 2;
     5d4:	82 e0       	ldi	r24, 0x02	; 2
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <_ZN4Zeit6ChangeEi+0x3e>
		key = X_KEY;
		break;
	case LEFT_KEY:
		set_ = 1;
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	97 83       	std	Z+7, r25	; 0x07
     5e0:	86 83       	std	Z+6, r24	; 0x06
		key = X_KEY;
     5e2:	8a e0       	ldi	r24, 0x0A	; 10
     5e4:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}
	
	if(set_ == 1){
     5e6:	26 81       	ldd	r18, Z+6	; 0x06
     5e8:	37 81       	ldd	r19, Z+7	; 0x07
     5ea:	21 30       	cpi	r18, 0x01	; 1
     5ec:	31 05       	cpc	r19, r1
     5ee:	d1 f4       	brne	.+52     	; 0x624 <_ZN4Zeit6ChangeEi+0x84>
		//! change hours
		switch(key){
     5f0:	81 30       	cpi	r24, 0x01	; 1
     5f2:	91 05       	cpc	r25, r1
     5f4:	21 f0       	breq	.+8      	; 0x5fe <_ZN4Zeit6ChangeEi+0x5e>
     5f6:	83 30       	cpi	r24, 0x03	; 3
     5f8:	91 05       	cpc	r25, r1
     5fa:	49 f0       	breq	.+18     	; 0x60e <_ZN4Zeit6ChangeEi+0x6e>
     5fc:	08 95       	ret
		case UP_KEY:
			hh_=(hh_+1)%24;
     5fe:	80 81       	ld	r24, Z
     600:	91 81       	ldd	r25, Z+1	; 0x01
     602:	01 96       	adiw	r24, 0x01	; 1
     604:	68 e1       	ldi	r22, 0x18	; 24
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	0e 94 15 20 	call	0x402a	; 0x402a <__divmodhi4>
     60c:	08 c0       	rjmp	.+16     	; 0x61e <_ZN4Zeit6ChangeEi+0x7e>
			ss_ = 0;
			key=X_KEY;
			break;
		case DOWN_KEY:
			if(hh_==0) hh_=23;
     60e:	80 81       	ld	r24, Z
     610:	91 81       	ldd	r25, Z+1	; 0x01
     612:	00 97       	sbiw	r24, 0x00	; 0
     614:	19 f4       	brne	.+6      	; 0x61c <_ZN4Zeit6ChangeEi+0x7c>
     616:	87 e1       	ldi	r24, 0x17	; 23
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	01 c0       	rjmp	.+2      	; 0x61e <_ZN4Zeit6ChangeEi+0x7e>
			else --hh_;
     61c:	01 97       	sbiw	r24, 0x01	; 1
     61e:	91 83       	std	Z+1, r25	; 0x01
     620:	80 83       	st	Z, r24
     622:	13 c0       	rjmp	.+38     	; 0x64a <_ZN4Zeit6ChangeEi+0xaa>
			ss_ = 0;
			key=X_KEY;
			break;
		}
	}
	else if(set_ == 2){
     624:	22 30       	cpi	r18, 0x02	; 2
     626:	31 05       	cpc	r19, r1
     628:	f1 f4       	brne	.+60     	; 0x666 <_ZN4Zeit6ChangeEi+0xc6>
		//! change minutes
		switch(key){
     62a:	81 30       	cpi	r24, 0x01	; 1
     62c:	91 05       	cpc	r25, r1
     62e:	21 f0       	breq	.+8      	; 0x638 <_ZN4Zeit6ChangeEi+0x98>
     630:	83 30       	cpi	r24, 0x03	; 3
     632:	91 05       	cpc	r25, r1
     634:	79 f0       	breq	.+30     	; 0x654 <_ZN4Zeit6ChangeEi+0xb4>
     636:	08 95       	ret
		case UP_KEY:
			mm_=(mm_+1)%60;
     638:	82 81       	ldd	r24, Z+2	; 0x02
     63a:	93 81       	ldd	r25, Z+3	; 0x03
     63c:	01 96       	adiw	r24, 0x01	; 1
     63e:	6c e3       	ldi	r22, 0x3C	; 60
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	0e 94 15 20 	call	0x402a	; 0x402a <__divmodhi4>
     646:	93 83       	std	Z+3, r25	; 0x03
     648:	82 83       	std	Z+2, r24	; 0x02
			ss_ = 0;
     64a:	15 82       	std	Z+5, r1	; 0x05
     64c:	14 82       	std	Z+4, r1	; 0x04
			key=X_KEY;
     64e:	8a e0       	ldi	r24, 0x0A	; 10
     650:	90 e0       	ldi	r25, 0x00	; 0
			break;
     652:	08 95       	ret
		case DOWN_KEY:
			if(mm_==0) mm_=59;
     654:	82 81       	ldd	r24, Z+2	; 0x02
     656:	93 81       	ldd	r25, Z+3	; 0x03
     658:	00 97       	sbiw	r24, 0x00	; 0
     65a:	19 f4       	brne	.+6      	; 0x662 <_ZN4Zeit6ChangeEi+0xc2>
     65c:	8b e3       	ldi	r24, 0x3B	; 59
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	f2 cf       	rjmp	.-28     	; 0x646 <_ZN4Zeit6ChangeEi+0xa6>
			else --mm_;
     662:	01 97       	sbiw	r24, 0x01	; 1
     664:	f0 cf       	rjmp	.-32     	; 0x646 <_ZN4Zeit6ChangeEi+0xa6>
			key=X_KEY;
			break;
		}
	}
	return key;
}
     666:	08 95       	ret

00000668 <_Z11printhhmmssR4Zeit>:
 * @param[in] zeit: struct 
 * 
 * @return void
 */
void printhhmmss(class Zeit &z)
{
     668:	0f 93       	push	r16
     66a:	1f 93       	push	r17
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
     670:	8c 01       	movw	r16, r24
	if (ampm)
     672:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <ampm>
     676:	f8 01       	movw	r30, r16
     678:	c0 81       	ld	r28, Z
     67a:	d1 81       	ldd	r29, Z+1	; 0x01
     67c:	88 23       	and	r24, r24
     67e:	89 f0       	breq	.+34     	; 0x6a2 <_Z11printhhmmssR4Zeit+0x3a>
	{
		int ampmhours = z.GetHours(); 
		if (ampmhours > 12)
     680:	cd 30       	cpi	r28, 0x0D	; 13
     682:	d1 05       	cpc	r29, r1
     684:	0c f0       	brlt	.+2      	; 0x688 <_Z11printhhmmssR4Zeit+0x20>
		{
			 ampmhours -= 12;
     686:	2c 97       	sbiw	r28, 0x0c	; 12
			 if(ampmhours<=9)lcd.print("0");
			 lcd.print(ampmhours);
		}	
		else
		{
			if(ampmhours<=9)lcd.print("0");
     688:	ca 30       	cpi	r28, 0x0A	; 10
     68a:	d1 05       	cpc	r29, r1
     68c:	34 f4       	brge	.+12     	; 0x69a <_Z11printhhmmssR4Zeit+0x32>
     68e:	69 e2       	ldi	r22, 0x29	; 41
     690:	71 e0       	ldi	r23, 0x01	; 1
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	94 e0       	ldi	r25, 0x04	; 4
     696:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <_ZN5Print5printEPKc>
			 lcd.print(ampmhours);
     69a:	4a e0       	ldi	r20, 0x0A	; 10
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	be 01       	movw	r22, r28
     6a0:	0d c0       	rjmp	.+26     	; 0x6bc <_Z11printhhmmssR4Zeit+0x54>
		}	 
	}
	
	else
	{
		if(z.GetHours()<=9)lcd.print("0");
     6a2:	2a 97       	sbiw	r28, 0x0a	; 10
     6a4:	34 f4       	brge	.+12     	; 0x6b2 <_Z11printhhmmssR4Zeit+0x4a>
     6a6:	69 e2       	ldi	r22, 0x29	; 41
     6a8:	71 e0       	ldi	r23, 0x01	; 1
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	94 e0       	ldi	r25, 0x04	; 4
     6ae:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <_ZN5Print5printEPKc>
		lcd.print(z.GetHours());
     6b2:	f8 01       	movw	r30, r16
     6b4:	60 81       	ld	r22, Z
     6b6:	71 81       	ldd	r23, Z+1	; 0x01
     6b8:	4a e0       	ldi	r20, 0x0A	; 10
     6ba:	50 e0       	ldi	r21, 0x00	; 0
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	94 e0       	ldi	r25, 0x04	; 4
     6c0:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <_ZN5Print5printEii>
	}
	if(z.GetMinutes()<=9)lcd.print(":0"); else lcd.print(":");
     6c4:	f8 01       	movw	r30, r16
     6c6:	82 81       	ldd	r24, Z+2	; 0x02
     6c8:	93 81       	ldd	r25, Z+3	; 0x03
     6ca:	0a 97       	sbiw	r24, 0x0a	; 10
     6cc:	1c f4       	brge	.+6      	; 0x6d4 <_Z11printhhmmssR4Zeit+0x6c>
     6ce:	68 e2       	ldi	r22, 0x28	; 40
     6d0:	71 e0       	ldi	r23, 0x01	; 1
     6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <_Z11printhhmmssR4Zeit+0x70>
     6d4:	6b e2       	ldi	r22, 0x2B	; 43
     6d6:	71 e0       	ldi	r23, 0x01	; 1
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	94 e0       	ldi	r25, 0x04	; 4
     6dc:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <_ZN5Print5printEPKc>
	lcd.print(z.GetMinutes());
     6e0:	f8 01       	movw	r30, r16
     6e2:	62 81       	ldd	r22, Z+2	; 0x02
     6e4:	73 81       	ldd	r23, Z+3	; 0x03
     6e6:	4a e0       	ldi	r20, 0x0A	; 10
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	94 e0       	ldi	r25, 0x04	; 4
     6ee:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <_ZN5Print5printEii>
	if(z.GetSeconds()<=9)lcd.print(":0"); else lcd.print(":");
     6f2:	f8 01       	movw	r30, r16
     6f4:	84 81       	ldd	r24, Z+4	; 0x04
     6f6:	95 81       	ldd	r25, Z+5	; 0x05
     6f8:	0a 97       	sbiw	r24, 0x0a	; 10
     6fa:	1c f4       	brge	.+6      	; 0x702 <_Z11printhhmmssR4Zeit+0x9a>
     6fc:	68 e2       	ldi	r22, 0x28	; 40
     6fe:	71 e0       	ldi	r23, 0x01	; 1
     700:	02 c0       	rjmp	.+4      	; 0x706 <_Z11printhhmmssR4Zeit+0x9e>
     702:	6b e2       	ldi	r22, 0x2B	; 43
     704:	71 e0       	ldi	r23, 0x01	; 1
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	94 e0       	ldi	r25, 0x04	; 4
     70a:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <_ZN5Print5printEPKc>
	lcd.print(z.GetSeconds());
     70e:	f8 01       	movw	r30, r16
     710:	64 81       	ldd	r22, Z+4	; 0x04
     712:	75 81       	ldd	r23, Z+5	; 0x05
     714:	4a e0       	ldi	r20, 0x0A	; 10
     716:	50 e0       	ldi	r21, 0x00	; 0
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	94 e0       	ldi	r25, 0x04	; 4
     71c:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <_ZN5Print5printEii>
	if (ampm && z.GetHours() > 12) lcd.print(" PM");
     720:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <ampm>
     724:	88 23       	and	r24, r24
     726:	91 f0       	breq	.+36     	; 0x74c <_Z11printhhmmssR4Zeit+0xe4>
     728:	f8 01       	movw	r30, r16
     72a:	80 81       	ld	r24, Z
     72c:	91 81       	ldd	r25, Z+1	; 0x01
     72e:	0d 97       	sbiw	r24, 0x0d	; 13
     730:	1c f0       	brlt	.+6      	; 0x738 <_Z11printhhmmssR4Zeit+0xd0>
     732:	6d e2       	ldi	r22, 0x2D	; 45
     734:	71 e0       	ldi	r23, 0x01	; 1
     736:	02 c0       	rjmp	.+4      	; 0x73c <_Z11printhhmmssR4Zeit+0xd4>
	else if (ampm && z.GetHours() <= 12) lcd.print(" AM");
     738:	61 e3       	ldi	r22, 0x31	; 49
     73a:	71 e0       	ldi	r23, 0x01	; 1
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	94 e0       	ldi	r25, 0x04	; 4
}
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
	if(z.GetMinutes()<=9)lcd.print(":0"); else lcd.print(":");
	lcd.print(z.GetMinutes());
	if(z.GetSeconds()<=9)lcd.print(":0"); else lcd.print(":");
	lcd.print(z.GetSeconds());
	if (ampm && z.GetHours() > 12) lcd.print(" PM");
	else if (ampm && z.GetHours() <= 12) lcd.print(" AM");
     748:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <_ZN5Print5printEPKc>
}
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	1f 91       	pop	r17
     752:	0f 91       	pop	r16
     754:	08 95       	ret

00000756 <_Z11alarmScreeni>:
 * @param[in] key : int, user input
 *
 * @return key
 */
int alarmScreen(int key)
{
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	ec 01       	movw	r28, r24
	lcd.setCursor(0,0);
     75c:	40 e0       	ldi	r20, 0x00	; 0
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	94 e0       	ldi	r25, 0x04	; 4
     764:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7hd447809setCursorEhh>
	lcd.print("Wecker: ");
     768:	65 e3       	ldi	r22, 0x35	; 53
     76a:	71 e0       	ldi	r23, 0x01	; 1
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	94 e0       	ldi	r25, 0x04	; 4
     770:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <_ZN5Print5printEPKc>
	if (weckerStatus)
     774:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <weckerStatus>
     778:	88 23       	and	r24, r24
     77a:	19 f0       	breq	.+6      	; 0x782 <_Z11alarmScreeni+0x2c>
	{
		lcd.print("Ein");
     77c:	6e e3       	ldi	r22, 0x3E	; 62
     77e:	71 e0       	ldi	r23, 0x01	; 1
     780:	02 c0       	rjmp	.+4      	; 0x786 <_Z11alarmScreeni+0x30>
		
	}
	else lcd.print("Aus");
     782:	62 e4       	ldi	r22, 0x42	; 66
     784:	71 e0       	ldi	r23, 0x01	; 1
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	94 e0       	ldi	r25, 0x04	; 4
     78a:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
     78e:	41 e0       	ldi	r20, 0x01	; 1
     790:	60 e0       	ldi	r22, 0x00	; 0
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	94 e0       	ldi	r25, 0x04	; 4
     796:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7hd447809setCursorEhh>
	printhhmmss(weckzeit);
     79a:	8b e1       	ldi	r24, 0x1B	; 27
     79c:	93 e0       	ldi	r25, 0x03	; 3
     79e:	0e 94 34 03 	call	0x668	; 0x668 <_Z11printhhmmssR4Zeit>
	return key;
}
     7a2:	ce 01       	movw	r24, r28
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	08 95       	ret

000007aa <_Z11changeAlarmi>:
 * @param[in] key : int, user input
 *
 * @return key
 */
int changeAlarm (int key)
{
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
     7ae:	ec 01       	movw	r28, r24
	lcd.setCursor(0,0);
     7b0:	40 e0       	ldi	r20, 0x00	; 0
     7b2:	60 e0       	ldi	r22, 0x00	; 0
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	94 e0       	ldi	r25, 0x04	; 4
     7b8:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7hd447809setCursorEhh>
	lcd.print("Weckzeit?");
     7bc:	66 e4       	ldi	r22, 0x46	; 70
     7be:	71 e0       	ldi	r23, 0x01	; 1
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	94 e0       	ldi	r25, 0x04	; 4
     7c4:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <_ZN5Print5printEPKc>
	key = weckzeit.Change(key);
     7c8:	be 01       	movw	r22, r28
     7ca:	8b e1       	ldi	r24, 0x1B	; 27
     7cc:	93 e0       	ldi	r25, 0x03	; 3
     7ce:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN4Zeit6ChangeEi>
     7d2:	ec 01       	movw	r28, r24
	lcd.setCursor(0,1);
     7d4:	41 e0       	ldi	r20, 0x01	; 1
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	94 e0       	ldi	r25, 0x04	; 4
     7dc:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7hd447809setCursorEhh>
	printhhmmss(weckzeit);
     7e0:	8b e1       	ldi	r24, 0x1B	; 27
     7e2:	93 e0       	ldi	r25, 0x03	; 3
     7e4:	0e 94 34 03 	call	0x668	; 0x668 <_Z11printhhmmssR4Zeit>

		return key;
	
	return key;
}
     7e8:	ce 01       	movw	r24, r28
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	08 95       	ret

000007f0 <_Z13printddmmyyyyR5Datum>:
 * @param[in] datum: struct 
 * 
 * @return void
 */
void printddmmyyyy(class Datum &d)
{
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	ec 01       	movw	r28, r24
	if(d.GetDay()<=9)lcd.print(" ");
     7f6:	8c 81       	ldd	r24, Y+4	; 0x04
     7f8:	9d 81       	ldd	r25, Y+5	; 0x05
     7fa:	0a 97       	sbiw	r24, 0x0a	; 10
     7fc:	34 f4       	brge	.+12     	; 0x80a <_Z13printddmmyyyyR5Datum+0x1a>
     7fe:	66 e6       	ldi	r22, 0x66	; 102
     800:	71 e0       	ldi	r23, 0x01	; 1
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	94 e0       	ldi	r25, 0x04	; 4
     806:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <_ZN5Print5printEPKc>
	lcd.print(d.GetDay());
     80a:	6c 81       	ldd	r22, Y+4	; 0x04
     80c:	7d 81       	ldd	r23, Y+5	; 0x05
     80e:	4a e0       	ldi	r20, 0x0A	; 10
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	94 e0       	ldi	r25, 0x04	; 4
     816:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <_ZN5Print5printEii>
	if(d.GetMonth()<=9)lcd.print(". "); else lcd.print(".");
     81a:	8a 81       	ldd	r24, Y+2	; 0x02
     81c:	9b 81       	ldd	r25, Y+3	; 0x03
     81e:	0a 97       	sbiw	r24, 0x0a	; 10
     820:	1c f4       	brge	.+6      	; 0x828 <_Z13printddmmyyyyR5Datum+0x38>
     822:	60 e5       	ldi	r22, 0x50	; 80
     824:	71 e0       	ldi	r23, 0x01	; 1
     826:	02 c0       	rjmp	.+4      	; 0x82c <_Z13printddmmyyyyR5Datum+0x3c>
     828:	63 e5       	ldi	r22, 0x53	; 83
     82a:	71 e0       	ldi	r23, 0x01	; 1
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	94 e0       	ldi	r25, 0x04	; 4
     830:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <_ZN5Print5printEPKc>
	lcd.print(d.GetMonth());
     834:	6a 81       	ldd	r22, Y+2	; 0x02
     836:	7b 81       	ldd	r23, Y+3	; 0x03
     838:	4a e0       	ldi	r20, 0x0A	; 10
     83a:	50 e0       	ldi	r21, 0x00	; 0
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	94 e0       	ldi	r25, 0x04	; 4
     840:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <_ZN5Print5printEii>
	lcd.print(".");
     844:	63 e5       	ldi	r22, 0x53	; 83
     846:	71 e0       	ldi	r23, 0x01	; 1
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	94 e0       	ldi	r25, 0x04	; 4
     84c:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <_ZN5Print5printEPKc>
	lcd.print(d.GetYear());
     850:	68 81       	ld	r22, Y
     852:	79 81       	ldd	r23, Y+1	; 0x01
     854:	4a e0       	ldi	r20, 0x0A	; 10
     856:	50 e0       	ldi	r21, 0x00	; 0
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	94 e0       	ldi	r25, 0x04	; 4
}
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
	if(d.GetDay()<=9)lcd.print(" ");
	lcd.print(d.GetDay());
	if(d.GetMonth()<=9)lcd.print(". "); else lcd.print(".");
	lcd.print(d.GetMonth());
	lcd.print(".");
	lcd.print(d.GetYear());
     860:	0c 94 fc 15 	jmp	0x2bf8	; 0x2bf8 <_ZN5Print5printEii>

00000864 <_Z10dateScreeni>:
 * @param[in] key : int, user input
 *
 * @return key
 */
int dateScreen(int key)
{
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
     868:	ec 01       	movw	r28, r24
	lcd.setCursor(0,0);
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	94 e0       	ldi	r25, 0x04	; 4
     872:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7hd447809setCursorEhh>
	if (timeZoneChoosen)
     876:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <timeZoneChoosen>
     87a:	88 23       	and	r24, r24
     87c:	19 f1       	breq	.+70     	; 0x8c4 <_Z10dateScreeni+0x60>
	{
		printhhmmss(zeitTimeZone);
     87e:	8b e2       	ldi	r24, 0x2B	; 43
     880:	93 e0       	ldi	r25, 0x03	; 3
     882:	0e 94 34 03 	call	0x668	; 0x668 <_Z11printhhmmssR4Zeit>
		lcd.setCursor(13,0);
     886:	40 e0       	ldi	r20, 0x00	; 0
     888:	6d e0       	ldi	r22, 0x0D	; 13
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	94 e0       	ldi	r25, 0x04	; 4
     88e:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7hd447809setCursorEhh>
		lcd.print(CITIES[tz].initials);
     892:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <tz>
     896:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <tz+0x1>
     89a:	2e e0       	ldi	r18, 0x0E	; 14
     89c:	28 9f       	mul	r18, r24
     89e:	b0 01       	movw	r22, r0
     8a0:	29 9f       	mul	r18, r25
     8a2:	70 0d       	add	r23, r0
     8a4:	11 24       	eor	r1, r1
     8a6:	6f 59       	subi	r22, 0x9F	; 159
     8a8:	7c 4f       	sbci	r23, 0xFC	; 252
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	94 e0       	ldi	r25, 0x04	; 4
     8ae:	0e 94 41 15 	call	0x2a82	; 0x2a82 <_ZN5Print5printERK6String>
		lcd.setCursor(0,1);
     8b2:	41 e0       	ldi	r20, 0x01	; 1
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	94 e0       	ldi	r25, 0x04	; 4
     8ba:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7hd447809setCursorEhh>
		printddmmyyyy(datumTimeZone);
     8be:	88 e0       	ldi	r24, 0x08	; 8
     8c0:	93 e0       	ldi	r25, 0x03	; 3
     8c2:	0c c0       	rjmp	.+24     	; 0x8dc <_Z10dateScreeni+0x78>
	}
	else
	{
		printhhmmss(zeitLocal);
     8c4:	83 e2       	ldi	r24, 0x23	; 35
     8c6:	93 e0       	ldi	r25, 0x03	; 3
     8c8:	0e 94 34 03 	call	0x668	; 0x668 <_Z11printhhmmssR4Zeit>
		lcd.setCursor(0,1);
     8cc:	41 e0       	ldi	r20, 0x01	; 1
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	94 e0       	ldi	r25, 0x04	; 4
     8d4:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7hd447809setCursorEhh>
		printddmmyyyy(datumLocal);
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	93 e0       	ldi	r25, 0x03	; 3
     8dc:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <_Z13printddmmyyyyR5Datum>
	}
	return key;
}
     8e0:	ce 01       	movw	r24, r28
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	08 95       	ret

000008e8 <_Z17printHumidityTempv>:
 * und schreibt den Wert auf das LCD
 *
 * @return void
 */
void printHumidityTemp (void)
{
     8e8:	cf 92       	push	r12
     8ea:	df 92       	push	r13
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
	lcd.setCursor(0,1);
     8f0:	41 e0       	ldi	r20, 0x01	; 1
     8f2:	60 e0       	ldi	r22, 0x00	; 0
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	94 e0       	ldi	r25, 0x04	; 4
     8f8:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7hd447809setCursorEhh>
	if (temp == 0) lcd.print("Sensor defekt");
     8fc:	c0 90 41 03 	lds	r12, 0x0341	; 0x800341 <temp>
     900:	d0 90 42 03 	lds	r13, 0x0342	; 0x800342 <temp+0x1>
     904:	e0 90 43 03 	lds	r14, 0x0343	; 0x800343 <temp+0x2>
     908:	f0 90 44 03 	lds	r15, 0x0344	; 0x800344 <temp+0x3>
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	a9 01       	movw	r20, r18
     912:	c7 01       	movw	r24, r14
     914:	b6 01       	movw	r22, r12
     916:	0e 94 c8 13 	call	0x2790	; 0x2790 <__cmpsf2>
     91a:	81 11       	cpse	r24, r1
     91c:	03 c0       	rjmp	.+6      	; 0x924 <_Z17printHumidityTempv+0x3c>
     91e:	65 e5       	ldi	r22, 0x55	; 85
     920:	71 e0       	ldi	r23, 0x01	; 1
     922:	23 c0       	rjmp	.+70     	; 0x96a <_Z17printHumidityTempv+0x82>
	else {
		lcd.print(temp);
     924:	22 e0       	ldi	r18, 0x02	; 2
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	b7 01       	movw	r22, r14
     92a:	a6 01       	movw	r20, r12
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	94 e0       	ldi	r25, 0x04	; 4
     930:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <_ZN5Print5printEdi>
		lcd.print((char)223);
     934:	6f ed       	ldi	r22, 0xDF	; 223
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	94 e0       	ldi	r25, 0x04	; 4
     93a:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <_ZN5Print5printEc>
		lcd.print("C   ");
     93e:	63 e6       	ldi	r22, 0x63	; 99
     940:	71 e0       	ldi	r23, 0x01	; 1
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	94 e0       	ldi	r25, 0x04	; 4
     946:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <_ZN5Print5printEPKc>
		lcd.print(hum);
     94a:	40 91 3d 03 	lds	r20, 0x033D	; 0x80033d <hum>
     94e:	50 91 3e 03 	lds	r21, 0x033E	; 0x80033e <hum+0x1>
     952:	60 91 3f 03 	lds	r22, 0x033F	; 0x80033f <hum+0x2>
     956:	70 91 40 03 	lds	r23, 0x0340	; 0x800340 <hum+0x3>
     95a:	22 e0       	ldi	r18, 0x02	; 2
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	94 e0       	ldi	r25, 0x04	; 4
     962:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <_ZN5Print5printEdi>
		lcd.print("%");
     966:	68 e6       	ldi	r22, 0x68	; 104
     968:	71 e0       	ldi	r23, 0x01	; 1
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	94 e0       	ldi	r25, 0x04	; 4
	}
}
     96e:	ff 90       	pop	r15
     970:	ef 90       	pop	r14
     972:	df 90       	pop	r13
     974:	cf 90       	pop	r12
	else {
		lcd.print(temp);
		lcd.print((char)223);
		lcd.print("C   ");
		lcd.print(hum);
		lcd.print("%");
     976:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <_ZN5Print5printEPKc>

0000097a <_Z10homeScreeni>:
 * @param[in] key : int, user input
 *
 * @return key
 */
int homeScreen(int key)
{
     97a:	0f 93       	push	r16
     97c:	1f 93       	push	r17
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
     982:	ec 01       	movw	r28, r24
	if (readSensor < millis())
     984:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <millis>
     988:	00 91 45 03 	lds	r16, 0x0345	; 0x800345 <readSensor>
     98c:	10 91 46 03 	lds	r17, 0x0346	; 0x800346 <readSensor+0x1>
     990:	20 91 47 03 	lds	r18, 0x0347	; 0x800347 <readSensor+0x2>
     994:	30 91 48 03 	lds	r19, 0x0348	; 0x800348 <readSensor+0x3>
     998:	06 17       	cp	r16, r22
     99a:	17 07       	cpc	r17, r23
     99c:	28 07       	cpc	r18, r24
     99e:	39 07       	cpc	r19, r25
     9a0:	b8 f5       	brcc	.+110    	; 0xa10 <_Z10homeScreeni+0x96>
    int8_t read11(uint8_t pin);
    int8_t read(uint8_t pin);
    int8_t read12(uint8_t pin);

    inline int8_t read21(uint8_t pin)   { return read(pin); };
    inline int8_t read22(uint8_t pin)   { return read(pin); };
     9a2:	66 e1       	ldi	r22, 0x16	; 22
     9a4:	89 e4       	ldi	r24, 0x49	; 73
     9a6:	93 e0       	ldi	r25, 0x03	; 3
     9a8:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN3dht4readEh>
	{	
		int readData = DHT.read22(tempSensor);
		temp = DHT.temperature;
     9ac:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <DHT+0x4>
     9b0:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <DHT+0x5>
     9b4:	a0 91 4f 03 	lds	r26, 0x034F	; 0x80034f <DHT+0x6>
     9b8:	b0 91 50 03 	lds	r27, 0x0350	; 0x800350 <DHT+0x7>
     9bc:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <temp>
     9c0:	90 93 42 03 	sts	0x0342, r25	; 0x800342 <temp+0x1>
     9c4:	a0 93 43 03 	sts	0x0343, r26	; 0x800343 <temp+0x2>
     9c8:	b0 93 44 03 	sts	0x0344, r27	; 0x800344 <temp+0x3>
		hum = DHT.humidity;
     9cc:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <DHT>
     9d0:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <DHT+0x1>
     9d4:	a0 91 4b 03 	lds	r26, 0x034B	; 0x80034b <DHT+0x2>
     9d8:	b0 91 4c 03 	lds	r27, 0x034C	; 0x80034c <DHT+0x3>
     9dc:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <hum>
     9e0:	90 93 3e 03 	sts	0x033E, r25	; 0x80033e <hum+0x1>
     9e4:	a0 93 3f 03 	sts	0x033F, r26	; 0x80033f <hum+0x2>
     9e8:	b0 93 40 03 	sts	0x0340, r27	; 0x800340 <hum+0x3>
		printHumidityTemp();
     9ec:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_Z17printHumidityTempv>
		readSensor = millis() + 5000;
     9f0:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <millis>
     9f4:	dc 01       	movw	r26, r24
     9f6:	cb 01       	movw	r24, r22
     9f8:	88 57       	subi	r24, 0x78	; 120
     9fa:	9c 4e       	sbci	r25, 0xEC	; 236
     9fc:	af 4f       	sbci	r26, 0xFF	; 255
     9fe:	bf 4f       	sbci	r27, 0xFF	; 255
     a00:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <readSensor>
     a04:	90 93 46 03 	sts	0x0346, r25	; 0x800346 <readSensor+0x1>
     a08:	a0 93 47 03 	sts	0x0347, r26	; 0x800347 <readSensor+0x2>
     a0c:	b0 93 48 03 	sts	0x0348, r27	; 0x800348 <readSensor+0x3>
	}
	printHumidityTemp();
     a10:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_Z17printHumidityTempv>
	lcd.setCursor(0,0);
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	60 e0       	ldi	r22, 0x00	; 0
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	94 e0       	ldi	r25, 0x04	; 4
     a1c:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7hd447809setCursorEhh>
	if (timeZoneChoosen)
     a20:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <timeZoneChoosen>
     a24:	88 23       	and	r24, r24
     a26:	d9 f0       	breq	.+54     	; 0xa5e <_Z10homeScreeni+0xe4>
	{
		printhhmmss(zeitTimeZone);
     a28:	8b e2       	ldi	r24, 0x2B	; 43
     a2a:	93 e0       	ldi	r25, 0x03	; 3
     a2c:	0e 94 34 03 	call	0x668	; 0x668 <_Z11printhhmmssR4Zeit>
		lcd.setCursor(13,0);
     a30:	40 e0       	ldi	r20, 0x00	; 0
     a32:	6d e0       	ldi	r22, 0x0D	; 13
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	94 e0       	ldi	r25, 0x04	; 4
     a38:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7hd447809setCursorEhh>
		lcd.print(CITIES[tz].initials);
     a3c:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <tz>
     a40:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <tz+0x1>
     a44:	2e e0       	ldi	r18, 0x0E	; 14
     a46:	28 9f       	mul	r18, r24
     a48:	b0 01       	movw	r22, r0
     a4a:	29 9f       	mul	r18, r25
     a4c:	70 0d       	add	r23, r0
     a4e:	11 24       	eor	r1, r1
     a50:	6f 59       	subi	r22, 0x9F	; 159
     a52:	7c 4f       	sbci	r23, 0xFC	; 252
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	94 e0       	ldi	r25, 0x04	; 4
     a58:	0e 94 41 15 	call	0x2a82	; 0x2a82 <_ZN5Print5printERK6String>
     a5c:	04 c0       	rjmp	.+8      	; 0xa66 <_Z10homeScreeni+0xec>
	}
	else
	{
		printhhmmss(zeitLocal);	
     a5e:	83 e2       	ldi	r24, 0x23	; 35
     a60:	93 e0       	ldi	r25, 0x03	; 3
     a62:	0e 94 34 03 	call	0x668	; 0x668 <_Z11printhhmmssR4Zeit>
	}
	return key;
}
     a66:	ce 01       	movw	r24, r28
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	1f 91       	pop	r17
     a6e:	0f 91       	pop	r16
     a70:	08 95       	ret

00000a72 <_Z13calculateTimev>:
 * Stellt sicher, dass die Zeiten richtig sind. 
 * Zwischen 0 und kleiner als 24.
 * Ändert das Datum bei Zeitübertrag.
 */
void calculateTime() {
	zeitTimeZone.hh_= zeitGMT.hh_ + CITIES[tz].timediff;
     a72:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <tz>
     a76:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <tz+0x1>
     a7a:	2e e0       	ldi	r18, 0x0E	; 14
     a7c:	28 9f       	mul	r18, r24
     a7e:	f0 01       	movw	r30, r0
     a80:	29 9f       	mul	r18, r25
     a82:	f0 0d       	add	r31, r0
     a84:	11 24       	eor	r1, r1
     a86:	e7 5a       	subi	r30, 0xA7	; 167
     a88:	fc 4f       	sbci	r31, 0xFC	; 252
     a8a:	26 81       	ldd	r18, Z+6	; 0x06
     a8c:	37 81       	ldd	r19, Z+7	; 0x07
     a8e:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <zeitGMT>
     a92:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <zeitGMT+0x1>
     a96:	82 0f       	add	r24, r18
     a98:	93 1f       	adc	r25, r19
     a9a:	90 93 2c 03 	sts	0x032C, r25	; 0x80032c <zeitTimeZone+0x1>
     a9e:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <zeitTimeZone>
	datumTimeZone = datumGMT;
     aa2:	28 e0       	ldi	r18, 0x08	; 8
     aa4:	e0 e1       	ldi	r30, 0x10	; 16
     aa6:	f3 e0       	ldi	r31, 0x03	; 3
     aa8:	a8 e0       	ldi	r26, 0x08	; 8
     aaa:	b3 e0       	ldi	r27, 0x03	; 3
     aac:	01 90       	ld	r0, Z+
     aae:	0d 92       	st	X+, r0
     ab0:	2a 95       	dec	r18
     ab2:	e1 f7       	brne	.-8      	; 0xaac <_Z13calculateTimev+0x3a>
	if (zeitTimeZone.hh_ > 23)
     ab4:	88 31       	cpi	r24, 0x18	; 24
     ab6:	91 05       	cpc	r25, r1
     ab8:	4c f0       	brlt	.+18     	; 0xacc <_Z13calculateTimev+0x5a>
	{
		zeitTimeZone.hh_ -= 24;
     aba:	48 97       	sbiw	r24, 0x18	; 24
     abc:	90 93 2c 03 	sts	0x032C, r25	; 0x80032c <zeitTimeZone+0x1>
     ac0:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <zeitTimeZone>
		datumTimeZone.Tick();
     ac4:	88 e0       	ldi	r24, 0x08	; 8
     ac6:	93 e0       	ldi	r25, 0x03	; 3
     ac8:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN5Datum4TickEv>
	}
	if (zeitTimeZone.hh_ < 0)
     acc:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <zeitTimeZone>
     ad0:	90 91 2c 03 	lds	r25, 0x032C	; 0x80032c <zeitTimeZone+0x1>
     ad4:	97 ff       	sbrs	r25, 7
     ad6:	2f c0       	rjmp	.+94     	; 0xb36 <__stack+0x37>
	{
		zeitTimeZone.hh_ = 24 + zeitTimeZone.hh_;
     ad8:	48 96       	adiw	r24, 0x18	; 24
     ada:	90 93 2c 03 	sts	0x032C, r25	; 0x80032c <zeitTimeZone+0x1>
     ade:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <zeitTimeZone>
		datumTimeZone.DD_ -= 1;
     ae2:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <datumTimeZone+0x4>
     ae6:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <datumTimeZone+0x5>
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <datumTimeZone+0x5>
     af0:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <datumTimeZone+0x4>
		if (datumTimeZone.DD_ == 0)
     af4:	89 2b       	or	r24, r25
     af6:	f9 f4       	brne	.+62     	; 0xb36 <__stack+0x37>
		{
			datumTimeZone.MM_ -= 1;
     af8:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <datumTimeZone+0x2>
     afc:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <datumTimeZone+0x3>
     b00:	01 97       	sbiw	r24, 0x01	; 1
     b02:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <datumTimeZone+0x3>
     b06:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <datumTimeZone+0x2>
			if (datumTimeZone.MM_ != 0)	datumTimeZone.DD_ = datumTimeZone.DaysOfMonth();	
     b0a:	89 2b       	or	r24, r25
     b0c:	29 f0       	breq	.+10     	; 0xb18 <__stack+0x19>
     b0e:	88 e0       	ldi	r24, 0x08	; 8
     b10:	93 e0       	ldi	r25, 0x03	; 3
     b12:	0e 94 3e 02 	call	0x47c	; 0x47c <_ZN5Datum11DaysOfMonthEv>
     b16:	0b c0       	rjmp	.+22     	; 0xb2e <__stack+0x2f>
			else
			{
				datumTimeZone.YYYY_ -= 1;
     b18:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <datumTimeZone>
     b1c:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <datumTimeZone+0x1>
     b20:	01 97       	sbiw	r24, 0x01	; 1
     b22:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <datumTimeZone+0x1>
     b26:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <datumTimeZone>
				datumTimeZone.DD_ = 31;
     b2a:	8f e1       	ldi	r24, 0x1F	; 31
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <datumTimeZone+0x5>
     b32:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <datumTimeZone+0x4>
     b36:	08 95       	ret

00000b38 <_Z14changeTimeZonei>:
 * 
 * @return key
 */
int changeTimeZone (int key)
{
	switch (key)
     b38:	83 30       	cpi	r24, 0x03	; 3
     b3a:	91 05       	cpc	r25, r1
     b3c:	39 f0       	breq	.+14     	; 0xb4c <_Z14changeTimeZonei+0x14>
     b3e:	8a 30       	cpi	r24, 0x0A	; 10
     b40:	91 05       	cpc	r25, r1
     b42:	21 f0       	breq	.+8      	; 0xb4c <_Z14changeTimeZonei+0x14>
     b44:	81 30       	cpi	r24, 0x01	; 1
     b46:	91 05       	cpc	r25, r1
     b48:	51 f5       	brne	.+84     	; 0xb9e <_Z14changeTimeZonei+0x66>
     b4a:	17 c0       	rjmp	.+46     	; 0xb7a <_Z14changeTimeZonei+0x42>
	{
		case X_KEY:
		//zeit2 = zeitLocal;
		case DOWN_KEY:
		lcd.clear();
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	94 e0       	ldi	r25, 0x04	; 4
     b50:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <_ZN7hd447805clearEv>
		if (tz == 0)
     b54:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <tz>
     b58:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <tz+0x1>
     b5c:	00 97       	sbiw	r24, 0x00	; 0
     b5e:	19 f4       	brne	.+6      	; 0xb66 <_Z14changeTimeZonei+0x2e>
		{
			tz = 11;
     b60:	8b e0       	ldi	r24, 0x0B	; 11
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	01 c0       	rjmp	.+2      	; 0xb68 <_Z14changeTimeZonei+0x30>
		}
		else tz -= 1;
     b66:	01 97       	sbiw	r24, 0x01	; 1
     b68:	90 93 58 03 	sts	0x0358, r25	; 0x800358 <tz+0x1>
     b6c:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <tz>
		calculateTime();	
     b70:	0e 94 39 05 	call	0xa72	; 0xa72 <_Z13calculateTimev>
		key = X_KEY;
     b74:	8a e0       	ldi	r24, 0x0A	; 10
     b76:	90 e0       	ldi	r25, 0x00	; 0
		break;
     b78:	08 95       	ret
		case UP_KEY:
		lcd.clear();
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	94 e0       	ldi	r25, 0x04	; 4
     b7e:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <_ZN7hd447805clearEv>
		if (tz == 11)
     b82:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <tz>
     b86:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <tz+0x1>
     b8a:	8b 30       	cpi	r24, 0x0B	; 11
     b8c:	91 05       	cpc	r25, r1
     b8e:	29 f4       	brne	.+10     	; 0xb9a <_Z14changeTimeZonei+0x62>
		{
			tz = 0;
     b90:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <tz+0x1>
     b94:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <tz>
     b98:	eb cf       	rjmp	.-42     	; 0xb70 <_Z14changeTimeZonei+0x38>
		}
		else tz += 1;
     b9a:	01 96       	adiw	r24, 0x01	; 1
     b9c:	e5 cf       	rjmp	.-54     	; 0xb68 <_Z14changeTimeZonei+0x30>
		break;
		case RIGHT_KEY:
		break;
	}
	return key;
}
     b9e:	08 95       	ret

00000ba0 <_Z11setTimeZonei>:
 * @param[in] key : int, user input
 *
 * @return key
 */
int setTimeZone(int key)
{
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
	int input = changeTimeZone(key);
     ba4:	0e 94 9c 05 	call	0xb38	; 0xb38 <_Z14changeTimeZonei>
     ba8:	ec 01       	movw	r28, r24
	lcd.setCursor(0,0);
     baa:	40 e0       	ldi	r20, 0x00	; 0
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	94 e0       	ldi	r25, 0x04	; 4
     bb2:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7hd447809setCursorEhh>
	lcd.print(CITIES[tz].name);
     bb6:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <tz>
     bba:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <tz+0x1>
     bbe:	2e e0       	ldi	r18, 0x0E	; 14
     bc0:	28 9f       	mul	r18, r24
     bc2:	b0 01       	movw	r22, r0
     bc4:	29 9f       	mul	r18, r25
     bc6:	70 0d       	add	r23, r0
     bc8:	11 24       	eor	r1, r1
     bca:	67 5a       	subi	r22, 0xA7	; 167
     bcc:	7c 4f       	sbci	r23, 0xFC	; 252
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	94 e0       	ldi	r25, 0x04	; 4
     bd2:	0e 94 41 15 	call	0x2a82	; 0x2a82 <_ZN5Print5printERK6String>
	lcd.setCursor(0,1);
     bd6:	41 e0       	ldi	r20, 0x01	; 1
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	94 e0       	ldi	r25, 0x04	; 4
     bde:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7hd447809setCursorEhh>
	printhhmmss(zeitTimeZone);
     be2:	8b e2       	ldi	r24, 0x2B	; 43
     be4:	93 e0       	ldi	r25, 0x03	; 3
     be6:	0e 94 34 03 	call	0x668	; 0x668 <_Z11printhhmmssR4Zeit>
	//lcd.setCursor(11,0);
	//printddmmyyyy(datumTimeZone);
	return input;
}
     bea:	ce 01       	movw	r24, r28
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	08 95       	ret

00000bf2 <_Z17callibratePointerv>:
 * @brief set zero position of the three pointer
 *
 */
void callibratePointer() 
{
	lcd.clear();
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	94 e0       	ldi	r25, 0x04	; 4
     bf6:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <_ZN7hd447805clearEv>
	lcd.print("Zeiger kalibrieren");
     bfa:	6a e6       	ldi	r22, 0x6A	; 106
     bfc:	71 e0       	ldi	r23, 0x01	; 1
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	94 e0       	ldi	r25, 0x04	; 4
     c02:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <_ZN5Print5printEPKc>
	delay(2000);
     c06:	60 ed       	ldi	r22, 0xD0	; 208
     c08:	77 e0       	ldi	r23, 0x07	; 7
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	0e 94 94 1b 	call	0x3728	; 0x3728 <delay>
	lcd.clear();
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	94 e0       	ldi	r25, 0x04	; 4
     c16:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <_ZN7hd447805clearEv>

00000c1a <setup>:
 * \return void
 */
void setup()
{
	//LCD konfigurieren
	lcd.begin(16, 2);
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	42 e0       	ldi	r20, 0x02	; 2
     c1e:	60 e1       	ldi	r22, 0x10	; 16
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	94 e0       	ldi	r25, 0x04	; 4
     c24:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <_ZN7hd447805beginEhhh>
	lcd.noBacklight();
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	94 e0       	ldi	r25, 0x04	; 4
     c2c:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <_ZN7hd4478011noBacklightEv>
	lcd.noCursor();
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	94 e0       	ldi	r25, 0x04	; 4
     c34:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN7hd447808noCursorEv>
	lcd.home();
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	94 e0       	ldi	r25, 0x04	; 4
     c3c:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <_ZN7hd447804homeEv>
	lcd.print("Romeo V2.2 Watch");
     c40:	6d e7       	ldi	r22, 0x7D	; 125
     c42:	71 e0       	ldi	r23, 0x01	; 1
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	94 e0       	ldi	r25, 0x04	; 4
     c48:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
     c4c:	41 e0       	ldi	r20, 0x01	; 1
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	94 e0       	ldi	r25, 0x04	; 4
     c54:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7hd447809setCursorEhh>
	lcd.print("Coray / Bruno");
     c58:	6e e8       	ldi	r22, 0x8E	; 142
     c5a:	71 e0       	ldi	r23, 0x01	; 1
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	94 e0       	ldi	r25, 0x04	; 4
     c60:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <_ZN5Print5printEPKc>
	while(millis()<3000);
     c64:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <millis>
     c68:	68 3b       	cpi	r22, 0xB8	; 184
     c6a:	7b 40       	sbci	r23, 0x0B	; 11
     c6c:	81 05       	cpc	r24, r1
     c6e:	91 05       	cpc	r25, r1
     c70:	c8 f3       	brcs	.-14     	; 0xc64 <setup+0x4a>
	lcd.clear();
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	94 e0       	ldi	r25, 0x04	; 4
     c76:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <_ZN7hd447805clearEv>
	
	zeitTimeZone = zeitGMT;
     c7a:	88 e0       	ldi	r24, 0x08	; 8
     c7c:	e3 e3       	ldi	r30, 0x33	; 51
     c7e:	f3 e0       	ldi	r31, 0x03	; 3
     c80:	ab e2       	ldi	r26, 0x2B	; 43
     c82:	b3 e0       	ldi	r27, 0x03	; 3
     c84:	01 90       	ld	r0, Z+
     c86:	0d 92       	st	X+, r0
     c88:	8a 95       	dec	r24
     c8a:	e1 f7       	brne	.-8      	; 0xc84 <setup+0x6a>
	datumTimeZone = datumGMT;
     c8c:	88 e0       	ldi	r24, 0x08	; 8
     c8e:	e0 e1       	ldi	r30, 0x10	; 16
     c90:	f3 e0       	ldi	r31, 0x03	; 3
     c92:	a8 e0       	ldi	r26, 0x08	; 8
     c94:	b3 e0       	ldi	r27, 0x03	; 3
     c96:	01 90       	ld	r0, Z+
     c98:	0d 92       	st	X+, r0
     c9a:	8a 95       	dec	r24
     c9c:	e1 f7       	brne	.-8      	; 0xc96 <setup+0x7c>
	
	//Button uns Sensor Pin als input definiert
	pinMode(btnPin, INPUT);
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	88 e0       	ldi	r24, 0x08	; 8
     ca2:	0e 94 9f 1c 	call	0x393e	; 0x393e <pinMode>
	pinMode(tempSensor,INPUT);
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	86 e1       	ldi	r24, 0x16	; 22
     caa:	0c 94 9f 1c 	jmp	0x393e	; 0x393e <pinMode>

00000cae <loop>:
 * \return void
 */
void loop()
{
	//Button-Pin auslesen
	if (digitalRead(btnPin) == HIGH)
     cae:	88 e0       	ldi	r24, 0x08	; 8
     cb0:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <digitalRead>
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	11 f4       	brne	.+4      	; 0xcbc <loop+0xe>
	{
		callibratePointer();
     cb8:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <_Z17callibratePointerv>
	}
	else
	{

	Watch();
     cbc:	0e 94 8e 02 	call	0x51c	; 0x51c <_Z5Watchv>
	if(weckerStatus&&(zeitLocal.GetHours()==weckzeit.GetHours())&&(zeitLocal.GetMinutes()==weckzeit.GetMinutes())&&(zeitLocal.GetSeconds()==weckzeit.GetSeconds())) buzzer = 1;
     cc0:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <weckerStatus>
     cc4:	88 23       	and	r24, r24
     cc6:	11 f1       	breq	.+68     	; 0xd0c <loop+0x5e>
     cc8:	20 91 23 03 	lds	r18, 0x0323	; 0x800323 <zeitLocal>
     ccc:	30 91 24 03 	lds	r19, 0x0324	; 0x800324 <zeitLocal+0x1>
     cd0:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <weckzeit>
     cd4:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <weckzeit+0x1>
     cd8:	28 17       	cp	r18, r24
     cda:	39 07       	cpc	r19, r25
     cdc:	b9 f4       	brne	.+46     	; 0xd0c <loop+0x5e>
     cde:	20 91 25 03 	lds	r18, 0x0325	; 0x800325 <zeitLocal+0x2>
     ce2:	30 91 26 03 	lds	r19, 0x0326	; 0x800326 <zeitLocal+0x3>
     ce6:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <weckzeit+0x2>
     cea:	90 91 1e 03 	lds	r25, 0x031E	; 0x80031e <weckzeit+0x3>
     cee:	28 17       	cp	r18, r24
     cf0:	39 07       	cpc	r19, r25
     cf2:	61 f4       	brne	.+24     	; 0xd0c <loop+0x5e>
     cf4:	20 91 27 03 	lds	r18, 0x0327	; 0x800327 <zeitLocal+0x4>
     cf8:	30 91 28 03 	lds	r19, 0x0328	; 0x800328 <zeitLocal+0x5>
     cfc:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <weckzeit+0x4>
     d00:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <weckzeit+0x5>
     d04:	28 17       	cp	r18, r24
     d06:	39 07       	cpc	r19, r25
     d08:	09 f4       	brne	.+2      	; 0xd0c <loop+0x5e>
     d0a:	f2 c0       	rjmp	.+484    	; 0xef0 <loop+0x242>
	input = getkey();
     d0c:	0e 94 17 01 	call	0x22e	; 0x22e <_Z6getkeyv>
     d10:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <_ZL5input+0x1>
     d14:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <_ZL5input>
		if(buzzer)
     d18:	20 91 18 03 	lds	r18, 0x0318	; 0x800318 <buzzer>
     d1c:	30 91 19 03 	lds	r19, 0x0319	; 0x800319 <buzzer+0x1>
     d20:	23 2b       	or	r18, r19
     d22:	c1 f0       	breq	.+48     	; 0xd54 <loop+0xa6>
		{
			if(input){
     d24:	89 2b       	or	r24, r25
     d26:	49 f0       	breq	.+18     	; 0xd3a <loop+0x8c>
				lcd.noBacklight();
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	94 e0       	ldi	r25, 0x04	; 4
     d2c:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <_ZN7hd4478011noBacklightEv>
				buzzer = 0;
     d30:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <buzzer+0x1>
     d34:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <buzzer>
     d38:	0d c0       	rjmp	.+26     	; 0xd54 <loop+0xa6>
			}
			else if(zeitLocal.GetSeconds()%2) lcd.backlight(); else lcd.noBacklight();
     d3a:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <zeitLocal+0x4>
     d3e:	80 ff       	sbrs	r24, 0
     d40:	05 c0       	rjmp	.+10     	; 0xd4c <loop+0x9e>
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	94 e0       	ldi	r25, 0x04	; 4
     d46:	0e 94 57 0e 	call	0x1cae	; 0x1cae <_ZN7hd447809backlightEv>
     d4a:	04 c0       	rjmp	.+8      	; 0xd54 <loop+0xa6>
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	94 e0       	ldi	r25, 0x04	; 4
     d50:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <_ZN7hd4478011noBacklightEv>
		}
	if (watchmenu[menu].active) input = watchmenu[menu].active(input);
     d54:	e0 91 fe 02 	lds	r30, 0x02FE	; 0x8002fe <_ZL4menu>
     d58:	f0 91 ff 02 	lds	r31, 0x02FF	; 0x8002ff <_ZL4menu+0x1>
     d5c:	74 e0       	ldi	r23, 0x04	; 4
     d5e:	ee 0f       	add	r30, r30
     d60:	ff 1f       	adc	r31, r31
     d62:	7a 95       	dec	r23
     d64:	e1 f7       	brne	.-8      	; 0xd5e <loop+0xb0>
     d66:	eb 5b       	subi	r30, 0xBB	; 187
     d68:	fd 4f       	sbci	r31, 0xFD	; 253
     d6a:	02 84       	ldd	r0, Z+10	; 0x0a
     d6c:	f3 85       	ldd	r31, Z+11	; 0x0b
     d6e:	e0 2d       	mov	r30, r0
     d70:	30 97       	sbiw	r30, 0x00	; 0
     d72:	49 f0       	breq	.+18     	; 0xd86 <loop+0xd8>
     d74:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <_ZL5input>
     d78:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <_ZL5input+0x1>
     d7c:	09 95       	icall
     d7e:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <_ZL5input+0x1>
     d82:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <_ZL5input>
		//! cyclic call to active function as long as menu n is active
	switch(input) {
     d86:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <_ZL5input>
     d8a:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <_ZL5input+0x1>
     d8e:	83 30       	cpi	r24, 0x03	; 3
     d90:	91 05       	cpc	r25, r1
     d92:	d9 f1       	breq	.+118    	; 0xe0a <loop+0x15c>
     d94:	34 f4       	brge	.+12     	; 0xda2 <loop+0xf4>
     d96:	81 30       	cpi	r24, 0x01	; 1
     d98:	91 05       	cpc	r25, r1
     d9a:	79 f0       	breq	.+30     	; 0xdba <loop+0x10c>
     d9c:	02 97       	sbiw	r24, 0x02	; 2
     d9e:	19 f1       	breq	.+70     	; 0xde6 <loop+0x138>
     da0:	09 c0       	rjmp	.+18     	; 0xdb4 <loop+0x106>
     da2:	85 30       	cpi	r24, 0x05	; 5
     da4:	91 05       	cpc	r25, r1
     da6:	09 f4       	brne	.+2      	; 0xdaa <loop+0xfc>
     da8:	65 c0       	rjmp	.+202    	; 0xe74 <loop+0x1c6>
     daa:	0c f4       	brge	.+2      	; 0xdae <loop+0x100>
     dac:	40 c0       	rjmp	.+128    	; 0xe2e <loop+0x180>
     dae:	06 97       	sbiw	r24, 0x06	; 6
     db0:	09 f4       	brne	.+2      	; 0xdb4 <loop+0x106>
     db2:	83 c0       	rjmp	.+262    	; 0xeba <loop+0x20c>
		default:
		case X_KEY:
		case NO_KEY:
		newmenu = -1; // no changes made
     db4:	8f ef       	ldi	r24, 0xFF	; 255
     db6:	9f ef       	ldi	r25, 0xFF	; 255
     db8:	11 c0       	rjmp	.+34     	; 0xddc <loop+0x12e>
		break;
		case UP_KEY:
		lcd.clear();
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	94 e0       	ldi	r25, 0x04	; 4
     dbe:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].up;
     dc2:	e0 91 fe 02 	lds	r30, 0x02FE	; 0x8002fe <_ZL4menu>
     dc6:	f0 91 ff 02 	lds	r31, 0x02FF	; 0x8002ff <_ZL4menu+0x1>
     dca:	64 e0       	ldi	r22, 0x04	; 4
     dcc:	ee 0f       	add	r30, r30
     dce:	ff 1f       	adc	r31, r31
     dd0:	6a 95       	dec	r22
     dd2:	e1 f7       	brne	.-8      	; 0xdcc <loop+0x11e>
     dd4:	eb 5b       	subi	r30, 0xBB	; 187
     dd6:	fd 4f       	sbci	r31, 0xFD	; 253
     dd8:	80 81       	ld	r24, Z
     dda:	91 81       	ldd	r25, Z+1	; 0x01
     ddc:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <_ZL7newmenu+0x1>
     de0:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <_ZL7newmenu>
		break;
     de4:	7a c0       	rjmp	.+244    	; 0xeda <loop+0x22c>
		case LEFT_KEY:
		lcd.clear();
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	94 e0       	ldi	r25, 0x04	; 4
     dea:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].left;
     dee:	e0 91 fe 02 	lds	r30, 0x02FE	; 0x8002fe <_ZL4menu>
     df2:	f0 91 ff 02 	lds	r31, 0x02FF	; 0x8002ff <_ZL4menu+0x1>
     df6:	54 e0       	ldi	r21, 0x04	; 4
     df8:	ee 0f       	add	r30, r30
     dfa:	ff 1f       	adc	r31, r31
     dfc:	5a 95       	dec	r21
     dfe:	e1 f7       	brne	.-8      	; 0xdf8 <loop+0x14a>
     e00:	eb 5b       	subi	r30, 0xBB	; 187
     e02:	fd 4f       	sbci	r31, 0xFD	; 253
     e04:	82 81       	ldd	r24, Z+2	; 0x02
     e06:	93 81       	ldd	r25, Z+3	; 0x03
     e08:	e9 cf       	rjmp	.-46     	; 0xddc <loop+0x12e>
		break;
		case DOWN_KEY:
		lcd.clear();
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	94 e0       	ldi	r25, 0x04	; 4
     e0e:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].down;
     e12:	e0 91 fe 02 	lds	r30, 0x02FE	; 0x8002fe <_ZL4menu>
     e16:	f0 91 ff 02 	lds	r31, 0x02FF	; 0x8002ff <_ZL4menu+0x1>
     e1a:	44 e0       	ldi	r20, 0x04	; 4
     e1c:	ee 0f       	add	r30, r30
     e1e:	ff 1f       	adc	r31, r31
     e20:	4a 95       	dec	r20
     e22:	e1 f7       	brne	.-8      	; 0xe1c <loop+0x16e>
     e24:	eb 5b       	subi	r30, 0xBB	; 187
     e26:	fd 4f       	sbci	r31, 0xFD	; 253
     e28:	84 81       	ldd	r24, Z+4	; 0x04
     e2a:	95 81       	ldd	r25, Z+5	; 0x05
     e2c:	d7 cf       	rjmp	.-82     	; 0xddc <loop+0x12e>
		break;
		case RIGHT_KEY:
		lcd.clear();
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	94 e0       	ldi	r25, 0x04	; 4
     e32:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <_ZN7hd447805clearEv>
		if(watchmenu[menu].goright != NULL) {
     e36:	e0 91 fe 02 	lds	r30, 0x02FE	; 0x8002fe <_ZL4menu>
     e3a:	f0 91 ff 02 	lds	r31, 0x02FF	; 0x8002ff <_ZL4menu+0x1>
     e3e:	34 e0       	ldi	r19, 0x04	; 4
     e40:	ee 0f       	add	r30, r30
     e42:	ff 1f       	adc	r31, r31
     e44:	3a 95       	dec	r19
     e46:	e1 f7       	brne	.-8      	; 0xe40 <loop+0x192>
     e48:	eb 5b       	subi	r30, 0xBB	; 187
     e4a:	fd 4f       	sbci	r31, 0xFD	; 253
     e4c:	04 84       	ldd	r0, Z+12	; 0x0c
     e4e:	f5 85       	ldd	r31, Z+13	; 0x0d
     e50:	e0 2d       	mov	r30, r0
     e52:	30 97       	sbiw	r30, 0x00	; 0
     e54:	09 f0       	breq	.+2      	; 0xe58 <loop+0x1aa>
			//! call go right function with new value
			watchmenu[menu].goright();
     e56:	09 95       	icall
		}
		newmenu = watchmenu[menu].right;
     e58:	e0 91 fe 02 	lds	r30, 0x02FE	; 0x8002fe <_ZL4menu>
     e5c:	f0 91 ff 02 	lds	r31, 0x02FF	; 0x8002ff <_ZL4menu+0x1>
     e60:	24 e0       	ldi	r18, 0x04	; 4
     e62:	ee 0f       	add	r30, r30
     e64:	ff 1f       	adc	r31, r31
     e66:	2a 95       	dec	r18
     e68:	e1 f7       	brne	.-8      	; 0xe62 <loop+0x1b4>
     e6a:	eb 5b       	subi	r30, 0xBB	; 187
     e6c:	fd 4f       	sbci	r31, 0xFD	; 253
     e6e:	86 81       	ldd	r24, Z+6	; 0x06
     e70:	97 81       	ldd	r25, Z+7	; 0x07
     e72:	b4 cf       	rjmp	.-152    	; 0xddc <loop+0x12e>
		break;
		case OK_KEY:
		lcd.clear();
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	94 e0       	ldi	r25, 0x04	; 4
     e78:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <_ZN7hd447805clearEv>
		if(watchmenu[menu].positive != NULL) {
     e7c:	e0 91 fe 02 	lds	r30, 0x02FE	; 0x8002fe <_ZL4menu>
     e80:	f0 91 ff 02 	lds	r31, 0x02FF	; 0x8002ff <_ZL4menu+0x1>
     e84:	94 e0       	ldi	r25, 0x04	; 4
     e86:	ee 0f       	add	r30, r30
     e88:	ff 1f       	adc	r31, r31
     e8a:	9a 95       	dec	r25
     e8c:	e1 f7       	brne	.-8      	; 0xe86 <loop+0x1d8>
     e8e:	eb 5b       	subi	r30, 0xBB	; 187
     e90:	fd 4f       	sbci	r31, 0xFD	; 253
     e92:	06 84       	ldd	r0, Z+14	; 0x0e
     e94:	f7 85       	ldd	r31, Z+15	; 0x0f
     e96:	e0 2d       	mov	r30, r0
     e98:	30 97       	sbiw	r30, 0x00	; 0
     e9a:	09 f0       	breq	.+2      	; 0xe9e <loop+0x1f0>
			//! call positive answer function with new value
			watchmenu[menu].positive();
     e9c:	09 95       	icall
		}
		newmenu = watchmenu[menu].ok;
     e9e:	e0 91 fe 02 	lds	r30, 0x02FE	; 0x8002fe <_ZL4menu>
     ea2:	f0 91 ff 02 	lds	r31, 0x02FF	; 0x8002ff <_ZL4menu+0x1>
     ea6:	84 e0       	ldi	r24, 0x04	; 4
     ea8:	ee 0f       	add	r30, r30
     eaa:	ff 1f       	adc	r31, r31
     eac:	8a 95       	dec	r24
     eae:	e1 f7       	brne	.-8      	; 0xea8 <loop+0x1fa>
     eb0:	eb 5b       	subi	r30, 0xBB	; 187
     eb2:	fd 4f       	sbci	r31, 0xFD	; 253
     eb4:	80 85       	ldd	r24, Z+8	; 0x08
     eb6:	91 85       	ldd	r25, Z+9	; 0x09
     eb8:	91 cf       	rjmp	.-222    	; 0xddc <loop+0x12e>
		break;
		case BK_KEY:
		lcd.clear();
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	94 e0       	ldi	r25, 0x04	; 4
     ebe:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <_ZN7hd447805clearEv>
		lcd.noCursor();
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	94 e0       	ldi	r25, 0x04	; 4
     ec6:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN7hd447808noCursorEv>
		lcd.noBlink();
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	94 e0       	ldi	r25, 0x04	; 4
     ece:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <_ZN7hd447807noBlinkEv>
		newmenu = 0;
     ed2:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <_ZL7newmenu+0x1>
     ed6:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <_ZL7newmenu>
		break;
	}
	if(newmenu >= 0) menu = newmenu;
     eda:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <_ZL7newmenu>
     ede:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <_ZL7newmenu+0x1>
     ee2:	97 fd       	sbrc	r25, 7
     ee4:	0c c0       	rjmp	.+24     	; 0xefe <loop+0x250>
     ee6:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <_ZL4menu+0x1>
     eea:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <_ZL4menu>

	} //else Klammer
}
     eee:	08 95       	ret
	}
	else
	{

	Watch();
	if(weckerStatus&&(zeitLocal.GetHours()==weckzeit.GetHours())&&(zeitLocal.GetMinutes()==weckzeit.GetMinutes())&&(zeitLocal.GetSeconds()==weckzeit.GetSeconds())) buzzer = 1;
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <buzzer+0x1>
     ef8:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <buzzer>
     efc:	07 cf       	rjmp	.-498    	; 0xd0c <loop+0x5e>
     efe:	08 95       	ret

00000f00 <_GLOBAL__sub_I_lcd>:
		break;
	}
	if(newmenu >= 0) menu = newmenu;

	} //else Klammer
}
     f00:	af 92       	push	r10
     f02:	bf 92       	push	r11
     f04:	cf 92       	push	r12
     f06:	df 92       	push	r13
     f08:	ef 92       	push	r14
     f0a:	ff 92       	push	r15
     f0c:	0f 93       	push	r16
     f0e:	1f 93       	push	r17
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
// ====================

//	-- Automagic / auto-detect constructors --

// Auto find next instance and auto config pin mapping
hd44780_I2Cexp(){ _addr = 0; _expType = I2Cexp_UNKNOWN;}
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	94 e0       	ldi	r25, 0x04	; 4
     f18:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <_ZN7hd44780C1Ev>
     f1c:	e1 e0       	ldi	r30, 0x01	; 1
     f1e:	f4 e0       	ldi	r31, 0x04	; 4
     f20:	83 e3       	ldi	r24, 0x33	; 51
     f22:	92 e0       	ldi	r25, 0x02	; 2
     f24:	91 83       	std	Z+1, r25	; 0x01
     f26:	80 83       	st	Z, r24
     f28:	10 a2       	std	Z+32, r1	; 0x20
     f2a:	11 a2       	std	Z+33, r1	; 0x21

const struct CITY_TIME_DIF CITIES [] {
	{"London", 0, "LON"},{"New-York", -5, "NEY"},{"Paris", 1, "PAR"},{ "Tokyo", 9, "TOK"},
	{"Hongkong", 8, "HNK"},{"Los Angeles", -8, "LAN"},{"Chicago", -6, "CHI"},{"Seoul", 9, "SEO"},
	{ "Bruessel",  1, "BRU"},{"Washington",  -5, "WAS"},{"Singapur", 8, "SIN"},{"Sydney", 11, "SYD"}
	};
     f2c:	6c e9       	ldi	r22, 0x9C	; 156
     f2e:	71 e0       	ldi	r23, 0x01	; 1
     f30:	89 e5       	ldi	r24, 0x59	; 89
     f32:	93 e0       	ldi	r25, 0x03	; 3
     f34:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN6StringC1EPKc>
     f38:	c9 e5       	ldi	r28, 0x59	; 89
     f3a:	d3 e0       	ldi	r29, 0x03	; 3
     f3c:	1f 82       	std	Y+7, r1	; 0x07
     f3e:	1e 82       	std	Y+6, r1	; 0x06
     f40:	63 ea       	ldi	r22, 0xA3	; 163
     f42:	71 e0       	ldi	r23, 0x01	; 1
     f44:	81 e6       	ldi	r24, 0x61	; 97
     f46:	93 e0       	ldi	r25, 0x03	; 3
     f48:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN6StringC1EPKc>
     f4c:	67 ea       	ldi	r22, 0xA7	; 167
     f4e:	71 e0       	ldi	r23, 0x01	; 1
     f50:	87 e6       	ldi	r24, 0x67	; 103
     f52:	93 e0       	ldi	r25, 0x03	; 3
     f54:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN6StringC1EPKc>
     f58:	8b ef       	ldi	r24, 0xFB	; 251
     f5a:	a8 2e       	mov	r10, r24
     f5c:	bb 24       	eor	r11, r11
     f5e:	ba 94       	dec	r11
     f60:	bd 8a       	std	Y+21, r11	; 0x15
     f62:	ac 8a       	std	Y+20, r10	; 0x14
     f64:	60 eb       	ldi	r22, 0xB0	; 176
     f66:	71 e0       	ldi	r23, 0x01	; 1
     f68:	8f e6       	ldi	r24, 0x6F	; 111
     f6a:	93 e0       	ldi	r25, 0x03	; 3
     f6c:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN6StringC1EPKc>
     f70:	64 eb       	ldi	r22, 0xB4	; 180
     f72:	71 e0       	ldi	r23, 0x01	; 1
     f74:	85 e7       	ldi	r24, 0x75	; 117
     f76:	93 e0       	ldi	r25, 0x03	; 3
     f78:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN6StringC1EPKc>
     f7c:	ee 24       	eor	r14, r14
     f7e:	e3 94       	inc	r14
     f80:	f1 2c       	mov	r15, r1
     f82:	fb a2       	std	Y+35, r15	; 0x23
     f84:	ea a2       	std	Y+34, r14	; 0x22
     f86:	6a eb       	ldi	r22, 0xBA	; 186
     f88:	71 e0       	ldi	r23, 0x01	; 1
     f8a:	8d e7       	ldi	r24, 0x7D	; 125
     f8c:	93 e0       	ldi	r25, 0x03	; 3
     f8e:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN6StringC1EPKc>
     f92:	6e eb       	ldi	r22, 0xBE	; 190
     f94:	71 e0       	ldi	r23, 0x01	; 1
     f96:	83 e8       	ldi	r24, 0x83	; 131
     f98:	93 e0       	ldi	r25, 0x03	; 3
     f9a:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN6StringC1EPKc>
     f9e:	09 e0       	ldi	r16, 0x09	; 9
     fa0:	10 e0       	ldi	r17, 0x00	; 0
     fa2:	19 ab       	std	Y+49, r17	; 0x31
     fa4:	08 ab       	std	Y+48, r16	; 0x30
     fa6:	64 ec       	ldi	r22, 0xC4	; 196
     fa8:	71 e0       	ldi	r23, 0x01	; 1
     faa:	8b e8       	ldi	r24, 0x8B	; 139
     fac:	93 e0       	ldi	r25, 0x03	; 3
     fae:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN6StringC1EPKc>
     fb2:	68 ec       	ldi	r22, 0xC8	; 200
     fb4:	71 e0       	ldi	r23, 0x01	; 1
     fb6:	81 e9       	ldi	r24, 0x91	; 145
     fb8:	93 e0       	ldi	r25, 0x03	; 3
     fba:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN6StringC1EPKc>
     fbe:	28 e0       	ldi	r18, 0x08	; 8
     fc0:	c2 2e       	mov	r12, r18
     fc2:	d1 2c       	mov	r13, r1
     fc4:	df ae       	std	Y+63, r13	; 0x3f
     fc6:	ce ae       	std	Y+62, r12	; 0x3e
     fc8:	61 ed       	ldi	r22, 0xD1	; 209
     fca:	71 e0       	ldi	r23, 0x01	; 1
     fcc:	89 e9       	ldi	r24, 0x99	; 153
     fce:	93 e0       	ldi	r25, 0x03	; 3
     fd0:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN6StringC1EPKc>
     fd4:	65 ed       	ldi	r22, 0xD5	; 213
     fd6:	71 e0       	ldi	r23, 0x01	; 1
     fd8:	8f e9       	ldi	r24, 0x9F	; 159
     fda:	93 e0       	ldi	r25, 0x03	; 3
     fdc:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN6StringC1EPKc>
     fe0:	88 ef       	ldi	r24, 0xF8	; 248
     fe2:	9f ef       	ldi	r25, 0xFF	; 255
     fe4:	90 93 a6 03 	sts	0x03A6, r25	; 0x8003a6 <_ZL6CITIES+0x4d>
     fe8:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <_ZL6CITIES+0x4c>
     fec:	61 ee       	ldi	r22, 0xE1	; 225
     fee:	71 e0       	ldi	r23, 0x01	; 1
     ff0:	87 ea       	ldi	r24, 0xA7	; 167
     ff2:	93 e0       	ldi	r25, 0x03	; 3
     ff4:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN6StringC1EPKc>
     ff8:	65 ee       	ldi	r22, 0xE5	; 229
     ffa:	71 e0       	ldi	r23, 0x01	; 1
     ffc:	8d ea       	ldi	r24, 0xAD	; 173
     ffe:	93 e0       	ldi	r25, 0x03	; 3
    1000:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN6StringC1EPKc>
    1004:	8a ef       	ldi	r24, 0xFA	; 250
    1006:	9f ef       	ldi	r25, 0xFF	; 255
    1008:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <_ZL6CITIES+0x5b>
    100c:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <_ZL6CITIES+0x5a>
    1010:	6d ee       	ldi	r22, 0xED	; 237
    1012:	71 e0       	ldi	r23, 0x01	; 1
    1014:	85 eb       	ldi	r24, 0xB5	; 181
    1016:	93 e0       	ldi	r25, 0x03	; 3
    1018:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN6StringC1EPKc>
    101c:	61 ef       	ldi	r22, 0xF1	; 241
    101e:	71 e0       	ldi	r23, 0x01	; 1
    1020:	8b eb       	ldi	r24, 0xBB	; 187
    1022:	93 e0       	ldi	r25, 0x03	; 3
    1024:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN6StringC1EPKc>
    1028:	10 93 c2 03 	sts	0x03C2, r17	; 0x8003c2 <_ZL6CITIES+0x69>
    102c:	00 93 c1 03 	sts	0x03C1, r16	; 0x8003c1 <_ZL6CITIES+0x68>
    1030:	67 ef       	ldi	r22, 0xF7	; 247
    1032:	71 e0       	ldi	r23, 0x01	; 1
    1034:	83 ec       	ldi	r24, 0xC3	; 195
    1036:	93 e0       	ldi	r25, 0x03	; 3
    1038:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN6StringC1EPKc>
    103c:	6b ef       	ldi	r22, 0xFB	; 251
    103e:	71 e0       	ldi	r23, 0x01	; 1
    1040:	89 ec       	ldi	r24, 0xC9	; 201
    1042:	93 e0       	ldi	r25, 0x03	; 3
    1044:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN6StringC1EPKc>
    1048:	f0 92 d0 03 	sts	0x03D0, r15	; 0x8003d0 <_ZL6CITIES+0x77>
    104c:	e0 92 cf 03 	sts	0x03CF, r14	; 0x8003cf <_ZL6CITIES+0x76>
    1050:	64 e0       	ldi	r22, 0x04	; 4
    1052:	72 e0       	ldi	r23, 0x02	; 2
    1054:	81 ed       	ldi	r24, 0xD1	; 209
    1056:	93 e0       	ldi	r25, 0x03	; 3
    1058:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN6StringC1EPKc>
    105c:	68 e0       	ldi	r22, 0x08	; 8
    105e:	72 e0       	ldi	r23, 0x02	; 2
    1060:	87 ed       	ldi	r24, 0xD7	; 215
    1062:	93 e0       	ldi	r25, 0x03	; 3
    1064:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN6StringC1EPKc>
    1068:	b0 92 de 03 	sts	0x03DE, r11	; 0x8003de <_ZL6CITIES+0x85>
    106c:	a0 92 dd 03 	sts	0x03DD, r10	; 0x8003dd <_ZL6CITIES+0x84>
    1070:	63 e1       	ldi	r22, 0x13	; 19
    1072:	72 e0       	ldi	r23, 0x02	; 2
    1074:	8f ed       	ldi	r24, 0xDF	; 223
    1076:	93 e0       	ldi	r25, 0x03	; 3
    1078:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN6StringC1EPKc>
    107c:	67 e1       	ldi	r22, 0x17	; 23
    107e:	72 e0       	ldi	r23, 0x02	; 2
    1080:	85 ee       	ldi	r24, 0xE5	; 229
    1082:	93 e0       	ldi	r25, 0x03	; 3
    1084:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN6StringC1EPKc>
    1088:	d0 92 ec 03 	sts	0x03EC, r13	; 0x8003ec <_ZL6CITIES+0x93>
    108c:	c0 92 eb 03 	sts	0x03EB, r12	; 0x8003eb <_ZL6CITIES+0x92>
    1090:	60 e2       	ldi	r22, 0x20	; 32
    1092:	72 e0       	ldi	r23, 0x02	; 2
    1094:	8d ee       	ldi	r24, 0xED	; 237
    1096:	93 e0       	ldi	r25, 0x03	; 3
    1098:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN6StringC1EPKc>
    109c:	64 e2       	ldi	r22, 0x24	; 36
    109e:	72 e0       	ldi	r23, 0x02	; 2
    10a0:	83 ef       	ldi	r24, 0xF3	; 243
    10a2:	93 e0       	ldi	r25, 0x03	; 3
    10a4:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN6StringC1EPKc>
    10a8:	8b e0       	ldi	r24, 0x0B	; 11
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	90 93 fa 03 	sts	0x03FA, r25	; 0x8003fa <_ZL6CITIES+0xa1>
    10b0:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <_ZL6CITIES+0xa0>
    10b4:	6b e2       	ldi	r22, 0x2B	; 43
    10b6:	72 e0       	ldi	r23, 0x02	; 2
    10b8:	8b ef       	ldi	r24, 0xFB	; 251
    10ba:	93 e0       	ldi	r25, 0x03	; 3
    10bc:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_ZN6StringC1EPKc>
#endif

class dht
{
public:
    dht() { _disableIRQ = false; };
    10c0:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <DHT+0xd>
	int hh_;
	int mm_;
	int ss_;
	int set_;
public:
	Zeit(int h, int m, int s){ hh_=h; mm_=m; ss_=s; set_ =0;};
    10c4:	e3 e3       	ldi	r30, 0x33	; 51
    10c6:	f3 e0       	ldi	r31, 0x03	; 3
    10c8:	61 e1       	ldi	r22, 0x11	; 17
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	71 83       	std	Z+1, r23	; 0x01
    10ce:	60 83       	st	Z, r22
    10d0:	4b e3       	ldi	r20, 0x3B	; 59
    10d2:	50 e0       	ldi	r21, 0x00	; 0
    10d4:	53 83       	std	Z+3, r21	; 0x03
    10d6:	42 83       	std	Z+2, r20	; 0x02
    10d8:	2d e2       	ldi	r18, 0x2D	; 45
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	35 83       	std	Z+5, r19	; 0x05
    10de:	24 83       	std	Z+4, r18	; 0x04
    10e0:	17 82       	std	Z+7, r1	; 0x07
    10e2:	16 82       	std	Z+6, r1	; 0x06
    10e4:	eb e2       	ldi	r30, 0x2B	; 43
    10e6:	f3 e0       	ldi	r31, 0x03	; 3
    10e8:	8c e0       	ldi	r24, 0x0C	; 12
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	91 83       	std	Z+1, r25	; 0x01
    10ee:	80 83       	st	Z, r24
    10f0:	13 82       	std	Z+3, r1	; 0x03
    10f2:	12 82       	std	Z+2, r1	; 0x02
    10f4:	15 82       	std	Z+5, r1	; 0x05
    10f6:	14 82       	std	Z+4, r1	; 0x04
    10f8:	17 82       	std	Z+7, r1	; 0x07
    10fa:	16 82       	std	Z+6, r1	; 0x06
    10fc:	e3 e2       	ldi	r30, 0x23	; 35
    10fe:	f3 e0       	ldi	r31, 0x03	; 3
    1100:	71 83       	std	Z+1, r23	; 0x01
    1102:	60 83       	st	Z, r22
    1104:	53 83       	std	Z+3, r21	; 0x03
    1106:	42 83       	std	Z+2, r20	; 0x02
    1108:	35 83       	std	Z+5, r19	; 0x05
    110a:	24 83       	std	Z+4, r18	; 0x04
    110c:	17 82       	std	Z+7, r1	; 0x07
    110e:	16 82       	std	Z+6, r1	; 0x06
    1110:	eb e1       	ldi	r30, 0x1B	; 27
    1112:	f3 e0       	ldi	r31, 0x03	; 3
    1114:	22 e1       	ldi	r18, 0x12	; 18
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	31 83       	std	Z+1, r19	; 0x01
    111a:	20 83       	st	Z, r18
    111c:	13 82       	std	Z+3, r1	; 0x03
    111e:	12 82       	std	Z+2, r1	; 0x02
    1120:	15 82       	std	Z+5, r1	; 0x05
    1122:	14 82       	std	Z+4, r1	; 0x04
    1124:	17 82       	std	Z+7, r1	; 0x07
    1126:	16 82       	std	Z+6, r1	; 0x06
	int YYYY_;
	int MM_;
	int DD_;
	int set_;
public:
	Datum(int d, int m, int y){DD_=d; MM_=m;YYYY_=y; set_ = 0;};
    1128:	e0 e1       	ldi	r30, 0x10	; 16
    112a:	f3 e0       	ldi	r31, 0x03	; 3
    112c:	4e e0       	ldi	r20, 0x0E	; 14
    112e:	50 e0       	ldi	r21, 0x00	; 0
    1130:	55 83       	std	Z+5, r21	; 0x05
    1132:	44 83       	std	Z+4, r20	; 0x04
    1134:	93 83       	std	Z+3, r25	; 0x03
    1136:	82 83       	std	Z+2, r24	; 0x02
    1138:	23 ee       	ldi	r18, 0xE3	; 227
    113a:	37 e0       	ldi	r19, 0x07	; 7
    113c:	31 83       	std	Z+1, r19	; 0x01
    113e:	20 83       	st	Z, r18
    1140:	17 82       	std	Z+7, r1	; 0x07
    1142:	16 82       	std	Z+6, r1	; 0x06
    1144:	e8 e0       	ldi	r30, 0x08	; 8
    1146:	f3 e0       	ldi	r31, 0x03	; 3
    1148:	f5 82       	std	Z+5, r15	; 0x05
    114a:	e4 82       	std	Z+4, r14	; 0x04
    114c:	13 83       	std	Z+3, r17	; 0x03
    114e:	02 83       	std	Z+2, r16	; 0x02
    1150:	60 ed       	ldi	r22, 0xD0	; 208
    1152:	77 e0       	ldi	r23, 0x07	; 7
    1154:	71 83       	std	Z+1, r23	; 0x01
    1156:	60 83       	st	Z, r22
    1158:	17 82       	std	Z+7, r1	; 0x07
    115a:	16 82       	std	Z+6, r1	; 0x06
    115c:	e0 e0       	ldi	r30, 0x00	; 0
    115e:	f3 e0       	ldi	r31, 0x03	; 3
    1160:	55 83       	std	Z+5, r21	; 0x05
    1162:	44 83       	std	Z+4, r20	; 0x04
    1164:	93 83       	std	Z+3, r25	; 0x03
    1166:	82 83       	std	Z+2, r24	; 0x02
    1168:	31 83       	std	Z+1, r19	; 0x01
    116a:	20 83       	st	Z, r18
    116c:	17 82       	std	Z+7, r1	; 0x07
    116e:	16 82       	std	Z+6, r1	; 0x06
		break;
	}
	if(newmenu >= 0) menu = newmenu;

	} //else Klammer
}
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	ff 90       	pop	r15
    117a:	ef 90       	pop	r14
    117c:	df 90       	pop	r13
    117e:	cf 90       	pop	r12
    1180:	bf 90       	pop	r11
    1182:	af 90       	pop	r10
    1184:	08 95       	ret

00001186 <_GLOBAL__sub_D_lcd>:
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
    118a:	c1 e0       	ldi	r28, 0x01	; 1
    118c:	d4 e0       	ldi	r29, 0x04	; 4
	String name;
	int timediff;
	String initials;
};

const struct CITY_TIME_DIF CITIES [] {
    118e:	2e 97       	sbiw	r28, 0x0e	; 14


hd44780_I2Cexp lcd;

//Strukt um Städte und deren Zweitverschiebung zu GMT (London) abzuspeichern
struct CITY_TIME_DIF {
    1190:	ce 01       	movw	r24, r28
    1192:	08 96       	adiw	r24, 0x08	; 8
    1194:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <_ZN6StringD1Ev>
    1198:	ce 01       	movw	r24, r28
    119a:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <_ZN6StringD1Ev>
	String name;
	int timediff;
	String initials;
};

const struct CITY_TIME_DIF CITIES [] {
    119e:	83 e0       	ldi	r24, 0x03	; 3
    11a0:	c9 35       	cpi	r28, 0x59	; 89
    11a2:	d8 07       	cpc	r29, r24
    11a4:	a1 f7       	brne	.-24     	; 0x118e <_GLOBAL__sub_D_lcd+0x8>
		break;
	}
	if(newmenu >= 0) menu = newmenu;

	} //else Klammer
}
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	08 95       	ret

000011ac <_ZN14hd44780_I2Cexp14iosetBacklightEh>:
}

// iosetBacklight()  - set backlight brightness
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	fc 01       	movw	r30, r24
{
	if(!_bl) // backlight control?
    11b2:	81 a5       	ldd	r24, Z+41	; 0x29
    11b4:	88 23       	and	r24, r24
    11b6:	71 f1       	breq	.+92     	; 0x1214 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x68>
    11b8:	92 a5       	ldd	r25, Z+42	; 0x2a
		return(hd44780::RV_ENOTSUP); // not backlight control support

	// dimvalue 0 is backlight off any other dimvalue is backlight on
	// configure backlight state mask according to active level
	if(((dimvalue) && (_blLevel == HIGH)) || 
    11ba:	66 23       	and	r22, r22
    11bc:	19 f0       	breq	.+6      	; 0x11c4 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x18>
    11be:	91 30       	cpi	r25, 0x01	; 1
    11c0:	29 f4       	brne	.+10     	; 0x11cc <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x1c>
			((dimvalue == 0) && (_blLevel == LOW)))
    11c4:	91 11       	cpse	r25, r1
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
	{
		_blCurState = _bl;
    11c8:	83 a7       	std	Z+43, r24	; 0x2b
    11ca:	01 c0       	rjmp	.+2      	; 0x11ce <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x22>
	}
	else 
	{
		_blCurState = 0;
    11cc:	13 a6       	std	Z+43, r1	; 0x2b
    11ce:	ef 01       	movw	r28, r30
	}
	Wire.beginTransmission(_addr);
    11d0:	60 a1       	ldd	r22, Z+32	; 0x20
    11d2:	8c e9       	ldi	r24, 0x9C	; 156
    11d4:	94 e0       	ldi	r25, 0x04	; 4
    11d6:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
    11da:	89 a1       	ldd	r24, Y+33	; 0x21
    11dc:	82 30       	cpi	r24, 0x02	; 2
    11de:	31 f4       	brne	.+12     	; 0x11ec <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x40>
	{
		Wire.write(9); // point to GPIO
    11e0:	69 e0       	ldi	r22, 0x09	; 9
    11e2:	70 e0       	ldi	r23, 0x00	; 0
    11e4:	8c e9       	ldi	r24, 0x9C	; 156
    11e6:	94 e0       	ldi	r25, 0x04	; 4
    11e8:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7TwoWire5writeEi>
	}
	Wire.write( _blCurState );
    11ec:	6b a5       	ldd	r22, Y+43	; 0x2b
    11ee:	8c e9       	ldi	r24, 0x9C	; 156
    11f0:	94 e0       	ldi	r25, 0x04	; 4
    11f2:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    11f6:	8c e9       	ldi	r24, 0x9C	; 156
    11f8:	94 e0       	ldi	r25, 0x04	; 4
    11fa:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN7TwoWire15endTransmissionEv>
    11fe:	21 e0       	ldi	r18, 0x01	; 1
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	81 11       	cpse	r24, r1
    1204:	02 c0       	rjmp	.+4      	; 0x120a <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x5e>
    1206:	20 e0       	ldi	r18, 0x00	; 0
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	88 27       	eor	r24, r24
    120c:	99 27       	eor	r25, r25
    120e:	82 1b       	sub	r24, r18
    1210:	93 0b       	sbc	r25, r19
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x6c>
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
{
	if(!_bl) // backlight control?
		return(hd44780::RV_ENOTSUP); // not backlight control support
    1214:	8d ef       	ldi	r24, 0xFD	; 253
    1216:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write( _blCurState );
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR); // all is good
}
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	08 95       	ret

0000121e <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>:
	return(0);
}


// write4bits - send a nibble to the LCD through i/o expander port
void write4bits(uint8_t value, hd44780::iotype type ) 
    121e:	cf 93       	push	r28
    1220:	fc 01       	movw	r30, r24
{
uint8_t gpioValue =  _blCurState;
    1222:	c3 a5       	ldd	r28, Z+43	; 0x2b
   
	// convert the value to an i/o expander port value
	// based on pin mappings
	if(value & (1 << 0))
    1224:	60 ff       	sbrs	r22, 0
    1226:	02 c0       	rjmp	.+4      	; 0x122c <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0xe>
		gpioValue |= _d4;
    1228:	85 a1       	ldd	r24, Z+37	; 0x25
    122a:	c8 2b       	or	r28, r24

	if(value & (1 << 1))
    122c:	61 ff       	sbrs	r22, 1
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x16>
		gpioValue |= _d5;
    1230:	86 a1       	ldd	r24, Z+38	; 0x26
    1232:	c8 2b       	or	r28, r24

	if(value & (1 << 2))
    1234:	62 ff       	sbrs	r22, 2
    1236:	02 c0       	rjmp	.+4      	; 0x123c <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x1e>
		gpioValue |= _d6;
    1238:	87 a1       	ldd	r24, Z+39	; 0x27
    123a:	c8 2b       	or	r28, r24

	if(value & (1 << 3))
    123c:	63 ff       	sbrs	r22, 3
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x26>
		gpioValue |= _d7;
    1240:	80 a5       	ldd	r24, Z+40	; 0x28
    1242:	c8 2b       	or	r28, r24


	if(type == hd44780::HD44780_IOdata) 
    1244:	41 30       	cpi	r20, 0x01	; 1
    1246:	11 f4       	brne	.+4      	; 0x124c <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x2e>
	{
		gpioValue |= _rs; // set RS high to send to data reg
    1248:	82 a1       	ldd	r24, Z+34	; 0x22
    124a:	c8 2b       	or	r28, r24
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
    124c:	64 a1       	ldd	r22, Z+36	; 0x24
    124e:	6c 2b       	or	r22, r28
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	8c e9       	ldi	r24, 0x9C	; 156
    1254:	94 e0       	ldi	r25, 0x04	; 4
    1256:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7TwoWire5writeEi>
	Wire.write(gpioValue);		// with E LOW
    125a:	6c 2f       	mov	r22, r28
    125c:	8c e9       	ldi	r24, 0x9C	; 156
    125e:	94 e0       	ldi	r25, 0x04	; 4
}
    1260:	cf 91       	pop	r28
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
	Wire.write(gpioValue);		// with E LOW
    1262:	0c 94 7f 12 	jmp	0x24fe	; 0x24fe <_ZN7TwoWire5writeEh>

00001266 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh>:
	return(rval);
}

// iowrite(type, value) - send either command or data byte to lcd
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
    1266:	8f 92       	push	r8
    1268:	9f 92       	push	r9
    126a:	af 92       	push	r10
    126c:	bf 92       	push	r11
    126e:	cf 92       	push	r12
    1270:	df 92       	push	r13
    1272:	ef 92       	push	r14
    1274:	ff 92       	push	r15
    1276:	0f 93       	push	r16
    1278:	1f 93       	push	r17
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	ec 01       	movw	r28, r24
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
    1280:	88 a1       	ldd	r24, Y+32	; 0x20
    1282:	88 23       	and	r24, r24
    1284:	09 f4       	brne	.+2      	; 0x1288 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x22>
    1286:	50 c0       	rjmp	.+160    	; 0x1328 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
    1288:	89 a1       	ldd	r24, Y+33	; 0x21
    128a:	88 23       	and	r24, r24
    128c:	09 f4       	brne	.+2      	; 0x1290 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x2a>
    128e:	4c c0       	rjmp	.+152    	; 0x1328 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
    1290:	14 2f       	mov	r17, r20
    1292:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
    1294:	8c 8c       	ldd	r8, Y+28	; 0x1c
    1296:	9d 8c       	ldd	r9, Y+29	; 0x1d
    1298:	ae 8c       	ldd	r10, Y+30	; 0x1e
    129a:	bf 8c       	ldd	r11, Y+31	; 0x1f
    129c:	c8 8c       	ldd	r12, Y+24	; 0x18
    129e:	d9 8c       	ldd	r13, Y+25	; 0x19
    12a0:	ea 8c       	ldd	r14, Y+26	; 0x1a
    12a2:	fb 8c       	ldd	r15, Y+27	; 0x1b
    12a4:	8d e2       	ldi	r24, 0x2D	; 45
    12a6:	c8 1a       	sub	r12, r24
    12a8:	d1 08       	sbc	r13, r1
    12aa:	e1 08       	sbc	r14, r1
    12ac:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
    12ae:	0e 94 6f 1b 	call	0x36de	; 0x36de <micros>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	8c 19       	sub	r24, r12
    12b8:	9d 09       	sbc	r25, r13
    12ba:	ae 09       	sbc	r26, r14
    12bc:	bf 09       	sbc	r27, r15
    12be:	88 15       	cp	r24, r8
    12c0:	99 05       	cpc	r25, r9
    12c2:	aa 05       	cpc	r26, r10
    12c4:	bb 05       	cpc	r27, r11
    12c6:	98 f3       	brcs	.-26     	; 0x12ae <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x48>
	 */

	waitReady(-45);
   
	// grab i2c bus
	Wire.beginTransmission(_addr);
    12c8:	68 a1       	ldd	r22, Y+32	; 0x20
    12ca:	8c e9       	ldi	r24, 0x9C	; 156
    12cc:	94 e0       	ldi	r25, 0x04	; 4
    12ce:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
    12d2:	89 a1       	ldd	r24, Y+33	; 0x21
    12d4:	82 30       	cpi	r24, 0x02	; 2
    12d6:	31 f4       	brne	.+12     	; 0x12e4 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x7e>
	{
		Wire.write(9); // point to GPIO
    12d8:	69 e0       	ldi	r22, 0x09	; 9
    12da:	70 e0       	ldi	r23, 0x00	; 0
    12dc:	8c e9       	ldi	r24, 0x9C	; 156
    12de:	94 e0       	ldi	r25, 0x04	; 4
    12e0:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7TwoWire5writeEi>
	}
	// send both nibbles in same i2c connection
	write4bits( (value >> 4), type );  // send upper nibble
    12e4:	61 2f       	mov	r22, r17
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	84 e0       	ldi	r24, 0x04	; 4
    12ea:	75 95       	asr	r23
    12ec:	67 95       	ror	r22
    12ee:	8a 95       	dec	r24
    12f0:	e1 f7       	brne	.-8      	; 0x12ea <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x84>
    12f2:	40 2f       	mov	r20, r16
    12f4:	ce 01       	movw	r24, r28
    12f6:	0e 94 0f 09 	call	0x121e	; 0x121e <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	 * are used to reliably get the LCD and host in nibble sync
	 * with each other and to get the LCD into 4 bit mode.
	 * When sending a "4 bit command" only the upper nibble of
	 * of the 8 bit byte will presented on LCD signals D4-D7.
	 */
	if(type != hd44780::HD44780_IOcmd4bit)
    12fa:	02 30       	cpi	r16, 0x02	; 2
    12fc:	31 f0       	breq	.+12     	; 0x130a <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xa4>
	{
		write4bits( (value & 0x0F), type); // lower nibble, if not 4bit cmd
    12fe:	61 2f       	mov	r22, r17
    1300:	6f 70       	andi	r22, 0x0F	; 15
    1302:	40 2f       	mov	r20, r16
    1304:	ce 01       	movw	r24, r28
    1306:	0e 94 0f 09 	call	0x121e	; 0x121e <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	}
	if(Wire.endTransmission())
    130a:	8c e9       	ldi	r24, 0x9C	; 156
    130c:	94 e0       	ldi	r25, 0x04	; 4
    130e:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN7TwoWire15endTransmissionEv>
    1312:	21 e0       	ldi	r18, 0x01	; 1
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	81 11       	cpse	r24, r1
    1318:	02 c0       	rjmp	.+4      	; 0x131e <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xb8>
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	88 27       	eor	r24, r24
    1320:	99 27       	eor	r25, r25
    1322:	82 1b       	sub	r24, r18
    1324:	93 0b       	sbc	r25, r19
    1326:	02 c0       	rjmp	.+4      	; 0x132c <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc6>
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
    1328:	8c ef       	ldi	r24, 0xFC	; 252
    132a:	9f ef       	ldi	r25, 0xFF	; 255
	}
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR);
}
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	1f 91       	pop	r17
    1332:	0f 91       	pop	r16
    1334:	ff 90       	pop	r15
    1336:	ef 90       	pop	r14
    1338:	df 90       	pop	r13
    133a:	cf 90       	pop	r12
    133c:	bf 90       	pop	r11
    133e:	af 90       	pop	r10
    1340:	9f 90       	pop	r9
    1342:	8f 90       	pop	r8
    1344:	08 95       	ret

00001346 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE>:
// ioread(type) - read a byte from LCD DDRAM
//
// returns:
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
    1346:	8f 92       	push	r8
    1348:	9f 92       	push	r9
    134a:	af 92       	push	r10
    134c:	bf 92       	push	r11
    134e:	cf 92       	push	r12
    1350:	df 92       	push	r13
    1352:	ef 92       	push	r14
    1354:	ff 92       	push	r15
    1356:	0f 93       	push	r16
    1358:	1f 93       	push	r17
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	ec 01       	movw	r28, r24
{
uint8_t gpioValue =  _blCurState;
    1360:	1b a5       	ldd	r17, Y+43	; 0x2b
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
    1362:	88 a1       	ldd	r24, Y+32	; 0x20
    1364:	88 23       	and	r24, r24
    1366:	09 f4       	brne	.+2      	; 0x136a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x24>
    1368:	f6 c0       	rjmp	.+492    	; 0x1556 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
    136a:	89 a1       	ldd	r24, Y+33	; 0x21
    136c:	88 23       	and	r24, r24
    136e:	09 f4       	brne	.+2      	; 0x1372 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x2c>
    1370:	f2 c0       	rjmp	.+484    	; 0x1556 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
		return(hd44780::RV_ENXIO);

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
    1372:	82 30       	cpi	r24, 0x02	; 2
    1374:	09 f4       	brne	.+2      	; 0x1378 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x32>
    1376:	f1 c0       	rjmp	.+482    	; 0x155a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
	{
		return(hd44780::RV_ENOTSUP);
	}

	// check if reads supported
	if(!_rw)
    1378:	8b a1       	ldd	r24, Y+35	; 0x23
    137a:	88 23       	and	r24, r24
    137c:	09 f4       	brne	.+2      	; 0x1380 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x3a>
    137e:	ed c0       	rjmp	.+474    	; 0x155a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
    1380:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
    1382:	8c 8c       	ldd	r8, Y+28	; 0x1c
    1384:	9d 8c       	ldd	r9, Y+29	; 0x1d
    1386:	ae 8c       	ldd	r10, Y+30	; 0x1e
    1388:	bf 8c       	ldd	r11, Y+31	; 0x1f
    138a:	c8 8c       	ldd	r12, Y+24	; 0x18
    138c:	d9 8c       	ldd	r13, Y+25	; 0x19
    138e:	ea 8c       	ldd	r14, Y+26	; 0x1a
    1390:	fb 8c       	ldd	r15, Y+27	; 0x1b
    1392:	8d e2       	ldi	r24, 0x2D	; 45
    1394:	c8 1a       	sub	r12, r24
    1396:	d1 08       	sbc	r13, r1
    1398:	e1 08       	sbc	r14, r1
    139a:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
    139c:	0e 94 6f 1b 	call	0x36de	; 0x36de <micros>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	8c 19       	sub	r24, r12
    13a6:	9d 09       	sbc	r25, r13
    13a8:	ae 09       	sbc	r26, r14
    13aa:	bf 09       	sbc	r27, r15
    13ac:	88 15       	cp	r24, r8
    13ae:	99 05       	cpc	r25, r9
    13b0:	aa 05       	cpc	r26, r10
    13b2:	bb 05       	cpc	r27, r11
    13b4:	98 f3       	brcs	.-26     	; 0x139c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x56>
    13b6:	8d a1       	ldd	r24, Y+37	; 0x25
    13b8:	18 2b       	or	r17, r24
    13ba:	8e a1       	ldd	r24, Y+38	; 0x26
    13bc:	18 2b       	or	r17, r24
    13be:	8f a1       	ldd	r24, Y+39	; 0x27
    13c0:	18 2b       	or	r17, r24
   
	// put all the expander LCD data pins into input mode.
	// PCF8574 psuedo inputs use pullups so setting them to 1
	// makes them suitible for inputs.

	gpioValue |= _d4|_d5|_d6|_d7;
    13c2:	88 a5       	ldd	r24, Y+40	; 0x28
    13c4:	18 2b       	or	r17, r24

	// set RS based on type of read (data or status/cmd)
	if(type == hd44780::HD44780_IOdata) 
    13c6:	01 30       	cpi	r16, 0x01	; 1
    13c8:	11 f4       	brne	.+4      	; 0x13ce <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x88>
	{
		gpioValue |= _rs; // RS high to read data reg
    13ca:	8a a1       	ldd	r24, Y+34	; 0x22
    13cc:	18 2b       	or	r17, r24
	}

	gpioValue |= _rw; // r/w high for reading
    13ce:	8b a1       	ldd	r24, Y+35	; 0x23
    13d0:	18 2b       	or	r17, r24

	// write all the bits to the expander port
	
	Wire.beginTransmission(_addr);
    13d2:	68 a1       	ldd	r22, Y+32	; 0x20
    13d4:	8c e9       	ldi	r24, 0x9C	; 156
    13d6:	94 e0       	ldi	r25, 0x04	; 4
    13d8:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue);		// d4-d7 are inputs, RS, r/w high, E LOW
    13dc:	61 2f       	mov	r22, r17
    13de:	8c e9       	ldi	r24, 0x9C	; 156
    13e0:	94 e0       	ldi	r25, 0x04	; 4
    13e2:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    13e6:	8c e9       	ldi	r24, 0x9C	; 156
    13e8:	94 e0       	ldi	r25, 0x04	; 4
    13ea:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN7TwoWire15endTransmissionEv>
    13ee:	88 23       	and	r24, r24
    13f0:	19 f0       	breq	.+6      	; 0x13f8 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xb2>
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;
    13f2:	0f ef       	ldi	r16, 0xFF	; 255
    13f4:	1f ef       	ldi	r17, 0xFF	; 255
    13f6:	9d c0       	rjmp	.+314    	; 0x1532 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ec>
	if(Wire.endTransmission())
		goto returnStatus;


	// raise E to read the data.
	Wire.beginTransmission(_addr);
    13f8:	68 a1       	ldd	r22, Y+32	; 0x20
    13fa:	8c e9       	ldi	r24, 0x9C	; 156
    13fc:	94 e0       	ldi	r25, 0x04	; 4
    13fe:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raises E 
    1402:	6c a1       	ldd	r22, Y+36	; 0x24
    1404:	61 2b       	or	r22, r17
    1406:	70 e0       	ldi	r23, 0x00	; 0
    1408:	8c e9       	ldi	r24, 0x9C	; 156
    140a:	94 e0       	ldi	r25, 0x04	; 4
    140c:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
    1410:	8c e9       	ldi	r24, 0x9C	; 156
    1412:	94 e0       	ldi	r25, 0x04	; 4
    1414:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN7TwoWire15endTransmissionEv>
    1418:	81 11       	cpse	r24, r1
    141a:	eb cf       	rjmp	.-42     	; 0x13f2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// read the expander port to get the upper nibble of the byte
	Wire.requestFrom((int)_addr, 1);
    141c:	68 a1       	ldd	r22, Y+32	; 0x20
    141e:	70 e0       	ldi	r23, 0x00	; 0
    1420:	41 e0       	ldi	r20, 0x01	; 1
    1422:	50 e0       	ldi	r21, 0x00	; 0
    1424:	8c e9       	ldi	r24, 0x9C	; 156
    1426:	94 e0       	ldi	r25, 0x04	; 4
    1428:	0e 94 51 13 	call	0x26a2	; 0x26a2 <_ZN7TwoWire11requestFromEii>
	iodata = Wire.read();
    142c:	8c e9       	ldi	r24, 0x9C	; 156
    142e:	94 e0       	ldi	r25, 0x04	; 4
    1430:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <_ZN7TwoWire4readEv>
    1434:	7c 01       	movw	r14, r24
	if(iodata < 0) // did we not receive a byte?
    1436:	97 fd       	sbrc	r25, 7
    1438:	dc cf       	rjmp	.-72     	; 0x13f2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
    143a:	68 a1       	ldd	r22, Y+32	; 0x20
    143c:	8c e9       	ldi	r24, 0x9C	; 156
    143e:	94 e0       	ldi	r25, 0x04	; 4
    1440:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
    1444:	61 2f       	mov	r22, r17
    1446:	8c e9       	ldi	r24, 0x9C	; 156
    1448:	94 e0       	ldi	r25, 0x04	; 4
    144a:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    144e:	8c e9       	ldi	r24, 0x9C	; 156
    1450:	94 e0       	ldi	r25, 0x04	; 4
    1452:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN7TwoWire15endTransmissionEv>
    1456:	81 11       	cpse	r24, r1
    1458:	cc cf       	rjmp	.-104    	; 0x13f2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
    145a:	8d a1       	ldd	r24, Y+37	; 0x25
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	8e 21       	and	r24, r14
    1460:	9f 21       	and	r25, r15
    1462:	89 2b       	or	r24, r25
    1464:	11 f4       	brne	.+4      	; 0x146a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x124>
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
    1466:	00 e0       	ldi	r16, 0x00	; 0
    1468:	01 c0       	rjmp	.+2      	; 0x146c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x126>
	if(Wire.endTransmission())
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
		data |= (1 << 4);
    146a:	00 e1       	ldi	r16, 0x10	; 16

	if(iodata & _d5)
    146c:	8e a1       	ldd	r24, Y+38	; 0x26
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	8e 21       	and	r24, r14
    1472:	9f 21       	and	r25, r15
    1474:	89 2b       	or	r24, r25
    1476:	09 f0       	breq	.+2      	; 0x147a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x134>
		data |= (1 << 5);
    1478:	00 62       	ori	r16, 0x20	; 32

	if(iodata & _d6)
    147a:	8f a1       	ldd	r24, Y+39	; 0x27
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	8e 21       	and	r24, r14
    1480:	9f 21       	and	r25, r15
    1482:	89 2b       	or	r24, r25
    1484:	09 f0       	breq	.+2      	; 0x1488 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x142>
		data |= (1 << 6);
    1486:	00 64       	ori	r16, 0x40	; 64

	if(iodata & _d7)
    1488:	88 a5       	ldd	r24, Y+40	; 0x28
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	e8 22       	and	r14, r24
    148e:	f9 22       	and	r15, r25
    1490:	ef 28       	or	r14, r15
    1492:	09 f0       	breq	.+2      	; 0x1496 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x150>
		data |= (1 << 7);
    1494:	00 68       	ori	r16, 0x80	; 128
	
	Wire.beginTransmission(_addr);
    1496:	68 a1       	ldd	r22, Y+32	; 0x20
    1498:	8c e9       	ldi	r24, 0x9C	; 156
    149a:	94 e0       	ldi	r25, 0x04	; 4
    149c:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raise E to read next nibble
    14a0:	6c a1       	ldd	r22, Y+36	; 0x24
    14a2:	61 2b       	or	r22, r17
    14a4:	70 e0       	ldi	r23, 0x00	; 0
    14a6:	8c e9       	ldi	r24, 0x9C	; 156
    14a8:	94 e0       	ldi	r25, 0x04	; 4
    14aa:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
    14ae:	8c e9       	ldi	r24, 0x9C	; 156
    14b0:	94 e0       	ldi	r25, 0x04	; 4
    14b2:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN7TwoWire15endTransmissionEv>
    14b6:	81 11       	cpse	r24, r1
    14b8:	9c cf       	rjmp	.-200    	; 0x13f2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>

	// read the expander port to get the lower nibble of the byte
	// We can't look at the return value from requestFrom() on the TineyWireM
	// library as it doesn't work like it is supposed to.
	// So we look at the return status from read() instead.
	Wire.requestFrom((int)_addr, 1);
    14ba:	68 a1       	ldd	r22, Y+32	; 0x20
    14bc:	70 e0       	ldi	r23, 0x00	; 0
    14be:	41 e0       	ldi	r20, 0x01	; 1
    14c0:	50 e0       	ldi	r21, 0x00	; 0
    14c2:	8c e9       	ldi	r24, 0x9C	; 156
    14c4:	94 e0       	ldi	r25, 0x04	; 4
    14c6:	0e 94 51 13 	call	0x26a2	; 0x26a2 <_ZN7TwoWire11requestFromEii>

	iodata = Wire.read();
    14ca:	8c e9       	ldi	r24, 0x9C	; 156
    14cc:	94 e0       	ldi	r25, 0x04	; 4
    14ce:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <_ZN7TwoWire4readEv>
    14d2:	7c 01       	movw	r14, r24

	if(iodata < 0) // did we not receive a byte?
    14d4:	97 fd       	sbrc	r25, 7
    14d6:	8d cf       	rjmp	.-230    	; 0x13f2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
    14d8:	68 a1       	ldd	r22, Y+32	; 0x20
    14da:	8c e9       	ldi	r24, 0x9C	; 156
    14dc:	94 e0       	ldi	r25, 0x04	; 4
    14de:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
    14e2:	61 2f       	mov	r22, r17
    14e4:	8c e9       	ldi	r24, 0x9C	; 156
    14e6:	94 e0       	ldi	r25, 0x04	; 4
    14e8:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    14ec:	8c e9       	ldi	r24, 0x9C	; 156
    14ee:	94 e0       	ldi	r25, 0x04	; 4
    14f0:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN7TwoWire15endTransmissionEv>
    14f4:	81 11       	cpse	r24, r1
    14f6:	7d cf       	rjmp	.-262    	; 0x13f2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into lower nibble of byte
	if(iodata & _d4)
    14f8:	8d a1       	ldd	r24, Y+37	; 0x25
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	8e 21       	and	r24, r14
    14fe:	9f 21       	and	r25, r15
    1500:	89 2b       	or	r24, r25
    1502:	09 f0       	breq	.+2      	; 0x1506 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1c0>
		data |= (1 << 0);
    1504:	01 60       	ori	r16, 0x01	; 1

	if(iodata & _d5)
    1506:	8e a1       	ldd	r24, Y+38	; 0x26
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	8e 21       	and	r24, r14
    150c:	9f 21       	and	r25, r15
    150e:	89 2b       	or	r24, r25
    1510:	09 f0       	breq	.+2      	; 0x1514 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ce>
		data |= (1 << 1);
    1512:	02 60       	ori	r16, 0x02	; 2

	if(iodata & _d6)
    1514:	8f a1       	ldd	r24, Y+39	; 0x27
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	8e 21       	and	r24, r14
    151a:	9f 21       	and	r25, r15
    151c:	89 2b       	or	r24, r25
    151e:	09 f0       	breq	.+2      	; 0x1522 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1dc>
		data |= (1 << 2);
    1520:	04 60       	ori	r16, 0x04	; 4

	if(iodata & _d7)
    1522:	88 a5       	ldd	r24, Y+40	; 0x28
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	e8 22       	and	r14, r24
    1528:	f9 22       	and	r15, r25
    152a:	ef 28       	or	r14, r15
    152c:	09 f0       	breq	.+2      	; 0x1530 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ea>
		data |= (1 << 3);
    152e:	08 60       	ori	r16, 0x08	; 8

	rval = data;
    1530:	10 e0       	ldi	r17, 0x00	; 0

returnStatus:

	// try to put gpio port back to all outputs state with WR signal low for writes
	Wire.beginTransmission(_addr);
    1532:	68 a1       	ldd	r22, Y+32	; 0x20
    1534:	8c e9       	ldi	r24, 0x9C	; 156
    1536:	94 e0       	ldi	r25, 0x04	; 4
    1538:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(_blCurState);		// with E LOW
    153c:	6b a5       	ldd	r22, Y+43	; 0x2b
    153e:	8c e9       	ldi	r24, 0x9C	; 156
    1540:	94 e0       	ldi	r25, 0x04	; 4
    1542:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    1546:	8c e9       	ldi	r24, 0x9C	; 156
    1548:	94 e0       	ldi	r25, 0x04	; 4
    154a:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN7TwoWire15endTransmissionEv>
    154e:	88 23       	and	r24, r24
    1550:	39 f0       	breq	.+14     	; 0x1560 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21a>
		rval = hd44780::RV_EIO;
    1552:	8f ef       	ldi	r24, 0xFF	; 255
    1554:	03 c0       	rjmp	.+6      	; 0x155c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
    1556:	8c ef       	ldi	r24, 0xFC	; 252
    1558:	01 c0       	rjmp	.+2      	; 0x155c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
	{
		return(hd44780::RV_ENOTSUP);
    155a:	8d ef       	ldi	r24, 0xFD	; 253
    155c:	9f ef       	ldi	r25, 0xFF	; 255
    155e:	01 c0       	rjmp	.+2      	; 0x1562 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21c>
    1560:	c8 01       	movw	r24, r16
	Wire.write(_blCurState);		// with E LOW
	if(Wire.endTransmission())
		rval = hd44780::RV_EIO;

	return(rval);
}
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
    1566:	1f 91       	pop	r17
    1568:	0f 91       	pop	r16
    156a:	ff 90       	pop	r15
    156c:	ef 90       	pop	r14
    156e:	df 90       	pop	r13
    1570:	cf 90       	pop	r12
    1572:	bf 90       	pop	r11
    1574:	af 90       	pop	r10
    1576:	9f 90       	pop	r9
    1578:	8f 90       	pop	r8
    157a:	08 95       	ret

0000157c <_ZN14hd44780_I2Cexp11autocfg8574Ev>:
 * a new resistor to  connect to the base of the transistor.
 * 
 * As a result the SYDZ backpack cannot use autoconfiguration.
 */

int autocfg8574()
    157c:	0f 93       	push	r16
    157e:	1f 93       	push	r17
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	ec 01       	movw	r28, r24
uint8_t data, data2;
uint8_t rs, rw, en, d4, d5, d6, d7, bl, blLevel;

	// First put a 0xff in the output port

	Wire.beginTransmission(_addr);
    1586:	68 a1       	ldd	r22, Y+32	; 0x20
    1588:	8c e9       	ldi	r24, 0x9C	; 156
    158a:	94 e0       	ldi	r25, 0x04	; 4
    158c:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0xff);
    1590:	6f ef       	ldi	r22, 0xFF	; 255
    1592:	8c e9       	ldi	r24, 0x9C	; 156
    1594:	94 e0       	ldi	r25, 0x04	; 4
    1596:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    159a:	8c e9       	ldi	r24, 0x9C	; 156
    159c:	94 e0       	ldi	r25, 0x04	; 4
    159e:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN7TwoWire15endTransmissionEv>

	// now read back from the port

	Wire.requestFrom((int)_addr, 1);
    15a2:	68 a1       	ldd	r22, Y+32	; 0x20
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	41 e0       	ldi	r20, 0x01	; 1
    15a8:	50 e0       	ldi	r21, 0x00	; 0
    15aa:	8c e9       	ldi	r24, 0x9C	; 156
    15ac:	94 e0       	ldi	r25, 0x04	; 4
    15ae:	0e 94 51 13 	call	0x26a2	; 0x26a2 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    15b2:	8c e9       	ldi	r24, 0x9C	; 156
    15b4:	94 e0       	ldi	r25, 0x04	; 4
    15b6:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <_ZN7TwoWire4readEv>
    15ba:	8c 01       	movw	r16, r24

	// Turn off bit2 to attempt to see if en is bit 2,
	// if it is, it should change all lcd data bits to 1s
	
	Wire.beginTransmission(_addr);
    15bc:	68 a1       	ldd	r22, Y+32	; 0x20
    15be:	8c e9       	ldi	r24, 0x9C	; 156
    15c0:	94 e0       	ldi	r25, 0x04	; 4
    15c2:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) (~(1 << 2)) );
    15c6:	6b ef       	ldi	r22, 0xFB	; 251
    15c8:	8c e9       	ldi	r24, 0x9C	; 156
    15ca:	94 e0       	ldi	r25, 0x04	; 4
    15cc:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    15d0:	8c e9       	ldi	r24, 0x9C	; 156
    15d2:	94 e0       	ldi	r25, 0x04	; 4
    15d4:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN7TwoWire15endTransmissionEv>

	// read back data
	Wire.requestFrom((int)_addr, 1);
    15d8:	68 a1       	ldd	r22, Y+32	; 0x20
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	41 e0       	ldi	r20, 0x01	; 1
    15de:	50 e0       	ldi	r21, 0x00	; 0
    15e0:	8c e9       	ldi	r24, 0x9C	; 156
    15e2:	94 e0       	ldi	r25, 0x04	; 4
    15e4:	0e 94 51 13 	call	0x26a2	; 0x26a2 <_ZN7TwoWire11requestFromEii>
	data2 = Wire.read();
    15e8:	8c e9       	ldi	r24, 0x9C	; 156
    15ea:	94 e0       	ldi	r25, 0x04	; 4
    15ec:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <_ZN7TwoWire4readEv>

	// If lower 3 bits are high and all 4 upper bits are high after clearing bit 2
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
    15f0:	98 01       	movw	r18, r16
    15f2:	27 70       	andi	r18, 0x07	; 7
    15f4:	33 27       	eor	r19, r19
    15f6:	27 30       	cpi	r18, 0x07	; 7
    15f8:	31 05       	cpc	r19, r1
    15fa:	b1 f4       	brne	.+44     	; 0x1628 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
    15fc:	80 7f       	andi	r24, 0xF0	; 240
    15fe:	99 27       	eor	r25, r25
    1600:	80 3f       	cpi	r24, 0xF0	; 240
    1602:	91 05       	cpc	r25, r1
    1604:	89 f4       	brne	.+34     	; 0x1628 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
    1606:	83 e0       	ldi	r24, 0x03	; 3
    1608:	16 95       	lsr	r17
    160a:	07 95       	ror	r16
    160c:	8a 95       	dec	r24
    160e:	e1 f7       	brne	.-8      	; 0x1608 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x8c>
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	08 27       	eor	r16, r24
    1614:	01 70       	andi	r16, 0x01	; 1
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
	{
		rs = 0; rw = 1; en = 2; d4 = 4; d5 = 5; d6 = 6; d7 = 7; bl = 3;
    1616:	43 e0       	ldi	r20, 0x03	; 3
    1618:	57 e0       	ldi	r21, 0x07	; 7
    161a:	66 e0       	ldi	r22, 0x06	; 6
    161c:	75 e0       	ldi	r23, 0x05	; 5
    161e:	e4 e0       	ldi	r30, 0x04	; 4
    1620:	22 e0       	ldi	r18, 0x02	; 2
    1622:	f1 e0       	ldi	r31, 0x01	; 1
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	34 c0       	rjmp	.+104    	; 0x1690 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x114>
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
		}
	}
	else if((data & 0x70) == 0x70)
    1628:	c8 01       	movw	r24, r16
    162a:	80 77       	andi	r24, 0x70	; 112
    162c:	99 27       	eor	r25, r25
    162e:	80 37       	cpi	r24, 0x70	; 112
    1630:	91 05       	cpc	r25, r1
    1632:	09 f0       	breq	.+2      	; 0x1636 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xba>
    1634:	68 c0       	rjmp	.+208    	; 0x1706 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18a>
		// both use bit 7 for backlight control

		// Turn off the en bit which should change the data bits
		// bit 4 on the mjkdz is en so we try that bit
	
		Wire.beginTransmission(_addr);
    1636:	68 a1       	ldd	r22, Y+32	; 0x20
    1638:	8c e9       	ldi	r24, 0x9C	; 156
    163a:	94 e0       	ldi	r25, 0x04	; 4
    163c:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t) (~(1 << 4)) );
    1640:	6f ee       	ldi	r22, 0xEF	; 239
    1642:	8c e9       	ldi	r24, 0x9C	; 156
    1644:	94 e0       	ldi	r25, 0x04	; 4
    1646:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    164a:	8c e9       	ldi	r24, 0x9C	; 156
    164c:	94 e0       	ldi	r25, 0x04	; 4
    164e:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN7TwoWire15endTransmissionEv>

		// read back data
		Wire.requestFrom((int)_addr, 1);
    1652:	68 a1       	ldd	r22, Y+32	; 0x20
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	41 e0       	ldi	r20, 0x01	; 1
    1658:	50 e0       	ldi	r21, 0x00	; 0
    165a:	8c e9       	ldi	r24, 0x9C	; 156
    165c:	94 e0       	ldi	r25, 0x04	; 4
    165e:	0e 94 51 13 	call	0x26a2	; 0x26a2 <_ZN7TwoWire11requestFromEii>
		data2 = Wire.read();
    1662:	8c e9       	ldi	r24, 0x9C	; 156
    1664:	94 e0       	ldi	r25, 0x04	; 4
    1666:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <_ZN7TwoWire4readEv>
		// look at data bits and see if they changed
		// if they changed to 0xf, then en was bit 4 and it is mjdkz
		// this will happen since when E is low the LCD is not
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
    166a:	8f 70       	andi	r24, 0x0F	; 15
    166c:	99 27       	eor	r25, r25
    166e:	0f 97       	sbiw	r24, 0x0f	; 15
    1670:	19 f0       	breq	.+6      	; 0x1678 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xfc>
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
		}
		else
		{
			// electrofun LCDXIO
			rs = 4; rw = 5; en = 6; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
    1672:	26 e0       	ldi	r18, 0x06	; 6
    1674:	34 e0       	ldi	r19, 0x04	; 4
    1676:	02 c0       	rjmp	.+4      	; 0x167c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x100>
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
		{
			// mjkdz
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
    1678:	24 e0       	ldi	r18, 0x04	; 4
    167a:	36 e0       	ldi	r19, 0x06	; 6
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
    167c:	00 95       	com	r16
    167e:	00 1f       	adc	r16, r16
    1680:	00 27       	eor	r16, r16
    1682:	00 1f       	adc	r16, r16
    1684:	47 e0       	ldi	r20, 0x07	; 7
    1686:	53 e0       	ldi	r21, 0x03	; 3
    1688:	62 e0       	ldi	r22, 0x02	; 2
    168a:	71 e0       	ldi	r23, 0x01	; 1
    168c:	e0 e0       	ldi	r30, 0x00	; 0
    168e:	f5 e0       	ldi	r31, 0x05	; 5
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	dc 01       	movw	r26, r24
    1696:	01 c0       	rjmp	.+2      	; 0x169a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11e>
    1698:	aa 0f       	add	r26, r26
    169a:	3a 95       	dec	r19
    169c:	ea f7       	brpl	.-6      	; 0x1698 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11c>
    169e:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
    16a0:	dc 01       	movw	r26, r24
    16a2:	01 c0       	rjmp	.+2      	; 0x16a6 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x12a>
    16a4:	aa 0f       	add	r26, r26
    16a6:	fa 95       	dec	r31
    16a8:	ea f7       	brpl	.-6      	; 0x16a4 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x128>
    16aa:	ab a3       	std	Y+35, r26	; 0x23
	else
		_rw = 0; // no r/w control

	_en = ( 1 << en );
    16ac:	dc 01       	movw	r26, r24
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x138>
    16b0:	aa 0f       	add	r26, r26
    16b2:	bb 1f       	adc	r27, r27
    16b4:	2a 95       	dec	r18
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x134>
    16b8:	ac a3       	std	Y+36, r26	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
    16ba:	9c 01       	movw	r18, r24
    16bc:	01 c0       	rjmp	.+2      	; 0x16c0 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x144>
    16be:	22 0f       	add	r18, r18
    16c0:	ea 95       	dec	r30
    16c2:	ea f7       	brpl	.-6      	; 0x16be <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x142>
    16c4:	2d a3       	std	Y+37, r18	; 0x25
	_d5 = ( 1 << d5 );
    16c6:	9c 01       	movw	r18, r24
    16c8:	01 c0       	rjmp	.+2      	; 0x16cc <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x150>
    16ca:	22 0f       	add	r18, r18
    16cc:	7a 95       	dec	r23
    16ce:	ea f7       	brpl	.-6      	; 0x16ca <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x14e>
    16d0:	2e a3       	std	Y+38, r18	; 0x26
	_d6 = ( 1 << d6 );
    16d2:	9c 01       	movw	r18, r24
    16d4:	01 c0       	rjmp	.+2      	; 0x16d8 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15c>
    16d6:	22 0f       	add	r18, r18
    16d8:	6a 95       	dec	r22
    16da:	ea f7       	brpl	.-6      	; 0x16d6 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15a>
    16dc:	2f a3       	std	Y+39, r18	; 0x27
	_d7 = ( 1 << d7 );   
    16de:	9c 01       	movw	r18, r24
    16e0:	01 c0       	rjmp	.+2      	; 0x16e4 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x168>
    16e2:	22 0f       	add	r18, r18
    16e4:	5a 95       	dec	r21
    16e6:	ea f7       	brpl	.-6      	; 0x16e2 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x166>
    16e8:	28 a7       	std	Y+40, r18	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
    16ea:	01 c0       	rjmp	.+2      	; 0x16ee <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x172>
    16ec:	88 0f       	add	r24, r24
    16ee:	4a 95       	dec	r20
    16f0:	ea f7       	brpl	.-6      	; 0x16ec <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x170>
    16f2:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
    16f4:	0a a7       	std	Y+42, r16	; 0x2a
	// set default bl state to backlight on
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
    16f6:	01 30       	cpi	r16, 0x01	; 1
    16f8:	11 f4       	brne	.+4      	; 0x16fe <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x182>
		_blCurState = _bl;
    16fa:	8b a7       	std	Y+43, r24	; 0x2b
    16fc:	01 c0       	rjmp	.+2      	; 0x1700 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x184>
	else
		_blCurState = 0;
    16fe:	1b a6       	std	Y+43, r1	; 0x2b
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	02 c0       	rjmp	.+4      	; 0x170a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18e>
		}
	}
	else
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
    1706:	8d ef       	ldi	r24, 0xFD	; 253
    1708:	9f ef       	ldi	r25, 0xFF	; 255
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	1f 91       	pop	r17
    1710:	0f 91       	pop	r16
    1712:	08 95       	ret

00001714 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>:
 * if GP1 is low then the board is the BOARD_XXX board
 * The BOARD_XXX may not work as GP1 is used for D5 on WIDEHK and LCDPLUG
 *
 *
 */
int autocfgMCP23008()
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	ec 01       	movw	r28, r24

	/*
	 * Now set up output port
	 * Make no assumptions as to the state of IOCON BYTE mode
	 */
	Wire.beginTransmission(_addr);
    171a:	68 a1       	ldd	r22, Y+32	; 0x20
    171c:	8c e9       	ldi	r24, 0x9C	; 156
    171e:	94 e0       	ldi	r25, 0x04	; 4
    1720:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t)0); // point to IODIR
    1724:	60 e0       	ldi	r22, 0x00	; 0
    1726:	8c e9       	ldi	r24, 0x9C	; 156
    1728:	94 e0       	ldi	r25, 0x04	; 4
    172a:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN7TwoWire5writeEh>
	Wire.write(0xff); // all pins inputs
    172e:	6f ef       	ldi	r22, 0xFF	; 255
    1730:	70 e0       	ldi	r23, 0x00	; 0
    1732:	8c e9       	ldi	r24, 0x9C	; 156
    1734:	94 e0       	ldi	r25, 0x04	; 4
    1736:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    173a:	8c e9       	ldi	r24, 0x9C	; 156
    173c:	94 e0       	ldi	r25, 0x04	; 4
    173e:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN7TwoWire15endTransmissionEv>

	Wire.beginTransmission(_addr);
    1742:	68 a1       	ldd	r22, Y+32	; 0x20
    1744:	8c e9       	ldi	r24, 0x9C	; 156
    1746:	94 e0       	ldi	r25, 0x04	; 4
    1748:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(6); // point to GPPU
    174c:	66 e0       	ldi	r22, 0x06	; 6
    174e:	70 e0       	ldi	r23, 0x00	; 0
    1750:	8c e9       	ldi	r24, 0x9C	; 156
    1752:	94 e0       	ldi	r25, 0x04	; 4
    1754:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7TwoWire5writeEi>
	Wire.write(0xff); // turn on pullups
    1758:	6f ef       	ldi	r22, 0xFF	; 255
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	8c e9       	ldi	r24, 0x9C	; 156
    175e:	94 e0       	ldi	r25, 0x04	; 4
    1760:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    1764:	8c e9       	ldi	r24, 0x9C	; 156
    1766:	94 e0       	ldi	r25, 0x04	; 4
    1768:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN7TwoWire15endTransmissionEv>

	/*
	 * read from the GPIO port
	 */

	Wire.beginTransmission(_addr);
    176c:	68 a1       	ldd	r22, Y+32	; 0x20
    176e:	8c e9       	ldi	r24, 0x9C	; 156
    1770:	94 e0       	ldi	r25, 0x04	; 4
    1772:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(9); // point to GPIO
    1776:	69 e0       	ldi	r22, 0x09	; 9
    1778:	70 e0       	ldi	r23, 0x00	; 0
    177a:	8c e9       	ldi	r24, 0x9C	; 156
    177c:	94 e0       	ldi	r25, 0x04	; 4
    177e:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    1782:	8c e9       	ldi	r24, 0x9C	; 156
    1784:	94 e0       	ldi	r25, 0x04	; 4
    1786:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom((int)_addr, 1);
    178a:	68 a1       	ldd	r22, Y+32	; 0x20
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	41 e0       	ldi	r20, 0x01	; 1
    1790:	50 e0       	ldi	r21, 0x00	; 0
    1792:	8c e9       	ldi	r24, 0x9C	; 156
    1794:	94 e0       	ldi	r25, 0x04	; 4
    1796:	0e 94 51 13 	call	0x26a2	; 0x26a2 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    179a:	8c e9       	ldi	r24, 0x9C	; 156
    179c:	94 e0       	ldi	r25, 0x04	; 4
    179e:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <_ZN7TwoWire4readEv>

	blLevel = HIGH; // known boards are active HIGH bl

	if(data == 0x7f) // bit 7 low, and other control and data lines high
    17a2:	8f 37       	cpi	r24, 0x7F	; 127
    17a4:	61 f0       	breq	.+24     	; 0x17be <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xaa>
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
    17a6:	86 ff       	sbrs	r24, 6
    17a8:	12 c0       	rjmp	.+36     	; 0x17ce <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xba>
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
    17aa:	81 fd       	sbrc	r24, 1
    17ac:	4c c0       	rjmp	.+152    	; 0x1846 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x132>
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
		bl = 1;
    17ae:	21 e0       	ldi	r18, 0x01	; 1
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
    17b0:	32 e0       	ldi	r19, 0x02	; 2
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
    17b2:	43 e0       	ldi	r20, 0x03	; 3
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
    17b4:	54 e0       	ldi	r21, 0x04	; 4
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
    17b6:	65 e0       	ldi	r22, 0x05	; 5
	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
    17b8:	76 e0       	ldi	r23, 0x06	; 6
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
    17ba:	e7 e0       	ldi	r30, 0x07	; 7
    17bc:	0f c0       	rjmp	.+30     	; 0x17dc <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;
    17be:	27 e0       	ldi	r18, 0x07	; 7
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
    17c0:	36 e0       	ldi	r19, 0x06	; 6
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
    17c2:	45 e0       	ldi	r20, 0x05	; 5
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
    17c4:	54 e0       	ldi	r21, 0x04	; 4
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
    17c6:	63 e0       	ldi	r22, 0x03	; 3
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
    17c8:	72 e0       	ldi	r23, 0x02	; 2

	if(data == 0x7f) // bit 7 low, and other control and data lines high
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
    17ca:	e1 e0       	ldi	r30, 0x01	; 1
    17cc:	07 c0       	rjmp	.+14     	; 0x17dc <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;
    17ce:	26 e0       	ldi	r18, 0x06	; 6
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
    17d0:	33 e0       	ldi	r19, 0x03	; 3
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
    17d2:	42 e0       	ldi	r20, 0x02	; 2
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
    17d4:	51 e0       	ldi	r21, 0x01	; 1
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
    17d6:	60 e0       	ldi	r22, 0x00	; 0
	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
    17d8:	77 e0       	ldi	r23, 0x07	; 7
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
    17da:	e4 e0       	ldi	r30, 0x04	; 4
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	dc 01       	movw	r26, r24
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd4>
    17e4:	aa 0f       	add	r26, r26
    17e6:	bb 1f       	adc	r27, r27
    17e8:	ea 95       	dec	r30
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd0>
    17ec:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
	else
		_rw = 0; // no r/w control
    17ee:	1b a2       	std	Y+35, r1	; 0x23

	_en = ( 1 << en );
    17f0:	fc 01       	movw	r30, r24
    17f2:	01 c0       	rjmp	.+2      	; 0x17f6 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe2>
    17f4:	ee 0f       	add	r30, r30
    17f6:	7a 95       	dec	r23
    17f8:	ea f7       	brpl	.-6      	; 0x17f4 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe0>
    17fa:	ec a3       	std	Y+36, r30	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
    17fc:	fc 01       	movw	r30, r24
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xf0>
    1800:	ee 0f       	add	r30, r30
    1802:	ff 1f       	adc	r31, r31
    1804:	6a 95       	dec	r22
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xec>
    1808:	ed a3       	std	Y+37, r30	; 0x25
	_d5 = ( 1 << d5 );
    180a:	bc 01       	movw	r22, r24
    180c:	01 c0       	rjmp	.+2      	; 0x1810 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfc>
    180e:	66 0f       	add	r22, r22
    1810:	5a 95       	dec	r21
    1812:	ea f7       	brpl	.-6      	; 0x180e <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfa>
    1814:	6e a3       	std	Y+38, r22	; 0x26
	_d6 = ( 1 << d6 );
    1816:	bc 01       	movw	r22, r24
    1818:	02 c0       	rjmp	.+4      	; 0x181e <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x10a>
    181a:	66 0f       	add	r22, r22
    181c:	77 1f       	adc	r23, r23
    181e:	4a 95       	dec	r20
    1820:	e2 f7       	brpl	.-8      	; 0x181a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x106>
    1822:	6f a3       	std	Y+39, r22	; 0x27
	_d7 = ( 1 << d7 );   
    1824:	ac 01       	movw	r20, r24
    1826:	01 c0       	rjmp	.+2      	; 0x182a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x116>
    1828:	44 0f       	add	r20, r20
    182a:	3a 95       	dec	r19
    182c:	ea f7       	brpl	.-6      	; 0x1828 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x114>
    182e:	48 a7       	std	Y+40, r20	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
    1830:	01 c0       	rjmp	.+2      	; 0x1834 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x120>
    1832:	88 0f       	add	r24, r24
    1834:	2a 95       	dec	r18
    1836:	ea f7       	brpl	.-6      	; 0x1832 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x11e>
    1838:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
    183a:	91 e0       	ldi	r25, 0x01	; 1
    183c:	9a a7       	std	Y+42, r25	; 0x2a
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
		_blCurState = _bl;
    183e:	8b a7       	std	Y+43, r24	; 0x2b
		// could not identify board
		return(hd44780::RV_ENOTSUP);
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	02 c0       	rjmp	.+4      	; 0x184a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x136>

	}
	else
	{
		// could not identify board
		return(hd44780::RV_ENOTSUP);
    1846:	8d ef       	ldi	r24, 0xFD	; 253
    1848:	9f ef       	ldi	r25, 0xFF	; 255
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
    184a:	df 91       	pop	r29
    184c:	cf 91       	pop	r28
    184e:	08 95       	ret

00001850 <_ZN14hd44780_I2Cexp6ioinitEv>:
// Returns non zero if initialization failed.
//
// can't be used from constructors because not everything is initalized yet.
// (maybe interrupts or other library constructors)
// if Wire library is used in constructor, it will hang.
int ioinit()
    1850:	1f 93       	push	r17
    1852:	cf 93       	push	r28
    1854:	df 93       	push	r29
    1856:	ec 01       	movw	r28, r24
	 * I believe that it is unreasonable to require the the user
	 * sketch code to do it, because all that should change between
	 * hd44780 i/o interfaces should be the constructor
	 * So we go ahead and call it here.
	 */
	Wire.begin();
    1858:	8c e9       	ldi	r24, 0x9C	; 156
    185a:	94 e0       	ldi	r25, 0x04	; 4
    185c:	0e 94 be 12 	call	0x257c	; 0x257c <_ZN7TwoWire5beginEv>

	// auto locate i2c expander and magically detect pin mappings

	if(!_addr) // locate next instance
    1860:	68 a1       	ldd	r22, Y+32	; 0x20
    1862:	61 11       	cpse	r22, r1
    1864:	0a c0       	rjmp	.+20     	; 0x187a <_ZN14hd44780_I2Cexp6ioinitEv+0x2a>
	{
		_addr = LocateDevice(AutoInst++);
    1866:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    186a:	91 e0       	ldi	r25, 0x01	; 1
    186c:	98 0f       	add	r25, r24
    186e:	90 93 2d 04 	sts	0x042D, r25	; 0x80042d <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    1872:	0e 94 cc 01 	call	0x398	; 0x398 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
    1876:	88 a3       	std	Y+32, r24	; 0x20
    1878:	0d c0       	rjmp	.+26     	; 0x1894 <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
	}
	else
	{
		// check to see if device at specified address is really there
		Wire.beginTransmission(_addr);
    187a:	8c e9       	ldi	r24, 0x9C	; 156
    187c:	94 e0       	ldi	r25, 0x04	; 4
    187e:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
		if(Wire.endTransmission())
    1882:	8c e9       	ldi	r24, 0x9C	; 156
    1884:	94 e0       	ldi	r25, 0x04	; 4
    1886:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN7TwoWire15endTransmissionEv>
    188a:	88 23       	and	r24, r24
    188c:	19 f0       	breq	.+6      	; 0x1894 <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
			return(hd44780::RV_ENXIO);
    188e:	8c ef       	ldi	r24, 0xFC	; 252
    1890:	9f ef       	ldi	r25, 0xFF	; 255
    1892:	a7 c0       	rjmp	.+334    	; 0x19e2 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	}

	if(!_addr) // locate next instance
    1894:	88 a1       	ldd	r24, Y+32	; 0x20
    1896:	81 11       	cpse	r24, r1
    1898:	09 c0       	rjmp	.+18     	; 0x18ac <_ZN14hd44780_I2Cexp6ioinitEv+0x5c>
		_addr = LocateDevice(AutoInst++);
    189a:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    189e:	91 e0       	ldi	r25, 0x01	; 1
    18a0:	98 0f       	add	r25, r24
    18a2:	90 93 2d 04 	sts	0x042D, r25	; 0x80042d <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    18a6:	0e 94 cc 01 	call	0x398	; 0x398 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
    18aa:	88 a3       	std	Y+32, r24	; 0x20

	if(!_addr) // if we couldn't locate it, return error
    18ac:	18 a1       	ldd	r17, Y+32	; 0x20
    18ae:	11 23       	and	r17, r17
    18b0:	71 f3       	breq	.-36     	; 0x188e <_ZN14hd44780_I2Cexp6ioinitEv+0x3e>
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
    18b2:	89 a1       	ldd	r24, Y+33	; 0x21
    18b4:	88 23       	and	r24, r24
    18b6:	c1 f1       	breq	.+112    	; 0x1928 <_ZN14hd44780_I2Cexp6ioinitEv+0xd8>
			return(status);
	}

	// initialize IO expander chip

	Wire.beginTransmission(_addr);
    18b8:	68 a1       	ldd	r22, Y+32	; 0x20
    18ba:	8c e9       	ldi	r24, 0x9C	; 156
    18bc:	94 e0       	ldi	r25, 0x04	; 4
    18be:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>

	if(_expType == I2Cexp_MCP23008)
    18c2:	89 a1       	ldd	r24, Y+33	; 0x21
    18c4:	82 30       	cpi	r24, 0x02	; 2
    18c6:	09 f0       	breq	.+2      	; 0x18ca <_ZN14hd44780_I2Cexp6ioinitEv+0x7a>
    18c8:	76 c0       	rjmp	.+236    	; 0x19b6 <_ZN14hd44780_I2Cexp6ioinitEv+0x166>
		 * within the same i2c connection by simply sending more bytes.
		 * This is necessary as the code uses back to back writes to perform
		 * the nibble updates as well as the toggling the enable signal.
		 * This methodology offers significant performance gains.
		 */
		Wire.write(5);	// point to IOCON
    18ca:	65 e0       	ldi	r22, 0x05	; 5
    18cc:	70 e0       	ldi	r23, 0x00	; 0
    18ce:	8c e9       	ldi	r24, 0x9C	; 156
    18d0:	94 e0       	ldi	r25, 0x04	; 4
    18d2:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7TwoWire5writeEi>
		Wire.write(0x20);// disable sequential mode (enables BYTE mode)
    18d6:	60 e2       	ldi	r22, 0x20	; 32
    18d8:	70 e0       	ldi	r23, 0x00	; 0
    18da:	8c e9       	ldi	r24, 0x9C	; 156
    18dc:	94 e0       	ldi	r25, 0x04	; 4
    18de:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    18e2:	8c e9       	ldi	r24, 0x9C	; 156
    18e4:	94 e0       	ldi	r25, 0x04	; 4
    18e6:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN7TwoWire15endTransmissionEv>

		/*
		 * Now set up output port
		 */
		Wire.beginTransmission(_addr);
    18ea:	68 a1       	ldd	r22, Y+32	; 0x20
    18ec:	8c e9       	ldi	r24, 0x9C	; 156
    18ee:	94 e0       	ldi	r25, 0x04	; 4
    18f0:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t)0); // point to IODIR
    18f4:	60 e0       	ldi	r22, 0x00	; 0
    18f6:	8c e9       	ldi	r24, 0x9C	; 156
    18f8:	94 e0       	ldi	r25, 0x04	; 4
    18fa:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN7TwoWire5writeEh>
		Wire.write((uint8_t)0); // all pins output
    18fe:	60 e0       	ldi	r22, 0x00	; 0
    1900:	8c e9       	ldi	r24, 0x9C	; 156
    1902:	94 e0       	ldi	r25, 0x04	; 4
    1904:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    1908:	8c e9       	ldi	r24, 0x9C	; 156
    190a:	94 e0       	ldi	r25, 0x04	; 4
    190c:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN7TwoWire15endTransmissionEv>
	
		/*
		 * point chip to GPIO
		 */
		Wire.beginTransmission(_addr);
    1910:	68 a1       	ldd	r22, Y+32	; 0x20
    1912:	8c e9       	ldi	r24, 0x9C	; 156
    1914:	94 e0       	ldi	r25, 0x04	; 4
    1916:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write(9); // point to GPIO
    191a:	69 e0       	ldi	r22, 0x09	; 9
    191c:	70 e0       	ldi	r23, 0x00	; 0
    191e:	8c e9       	ldi	r24, 0x9C	; 156
    1920:	94 e0       	ldi	r25, 0x04	; 4
    1922:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7TwoWire5writeEi>
    1926:	47 c0       	rjmp	.+142    	; 0x19b6 <_ZN14hd44780_I2Cexp6ioinitEv+0x166>

	/*
	 * First try to write 0xff to MCP23008 IODIR
	 * On a PCF8574 this will end up writing 0 and then ff to output port
	 */
	Wire.beginTransmission(address);
    1928:	61 2f       	mov	r22, r17
    192a:	8c e9       	ldi	r24, 0x9C	; 156
    192c:	94 e0       	ldi	r25, 0x04	; 4
    192e:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
    1932:	60 e0       	ldi	r22, 0x00	; 0
    1934:	8c e9       	ldi	r24, 0x9C	; 156
    1936:	94 e0       	ldi	r25, 0x04	; 4
    1938:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN7TwoWire5writeEh>
	Wire.write((uint8_t) 0xff);	// try to write to MCP23008 IODR
    193c:	6f ef       	ldi	r22, 0xFF	; 255
    193e:	8c e9       	ldi	r24, 0x9C	; 156
    1940:	94 e0       	ldi	r25, 0x04	; 4
    1942:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    1946:	8c e9       	ldi	r24, 0x9C	; 156
    1948:	94 e0       	ldi	r25, 0x04	; 4
    194a:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now try to point MCP23008 to IODIR for read
	 * On a PCF8574 this will end up writing a 0 to the output port
	 */

	Wire.beginTransmission(address);
    194e:	61 2f       	mov	r22, r17
    1950:	8c e9       	ldi	r24, 0x9C	; 156
    1952:	94 e0       	ldi	r25, 0x04	; 4
    1954:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
    1958:	60 e0       	ldi	r22, 0x00	; 0
    195a:	8c e9       	ldi	r24, 0x9C	; 156
    195c:	94 e0       	ldi	r25, 0x04	; 4
    195e:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    1962:	8c e9       	ldi	r24, 0x9C	; 156
    1964:	94 e0       	ldi	r25, 0x04	; 4
    1966:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now read a byte
	 * On a MCP23008 we should read the 0xff we wrote to IODIR
	 * On a PCF8574 we should read 0 since the output port was set to 0
	 */
	Wire.requestFrom((int)address, 1);
    196a:	61 2f       	mov	r22, r17
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	41 e0       	ldi	r20, 0x01	; 1
    1970:	50 e0       	ldi	r21, 0x00	; 0
    1972:	8c e9       	ldi	r24, 0x9C	; 156
    1974:	94 e0       	ldi	r25, 0x04	; 4
    1976:	0e 94 51 13 	call	0x26a2	; 0x26a2 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    197a:	8c e9       	ldi	r24, 0x9C	; 156
    197c:	94 e0       	ldi	r25, 0x04	; 4
    197e:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <_ZN7TwoWire4readEv>
    1982:	9c 01       	movw	r18, r24

	if(data == 0xff)
    1984:	8f 3f       	cpi	r24, 0xFF	; 255
    1986:	91 05       	cpc	r25, r1
    1988:	29 f0       	breq	.+10     	; 0x1994 <_ZN14hd44780_I2Cexp6ioinitEv+0x144>
	{
		chiptype = I2Cexp_MCP23008;
    198a:	91 e0       	ldi	r25, 0x01	; 1
    198c:	23 2b       	or	r18, r19
    198e:	19 f0       	breq	.+6      	; 0x1996 <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	01 c0       	rjmp	.+2      	; 0x1996 <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    1994:	92 e0       	ldi	r25, 0x02	; 2
	if(!_addr) // if we couldn't locate it, return error
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);
    1996:	99 a3       	std	Y+33, r25	; 0x21

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
    1998:	99 23       	and	r25, r25
    199a:	09 f1       	breq	.+66     	; 0x19de <_ZN14hd44780_I2Cexp6ioinitEv+0x18e>
			return(hd44780::RV_EIO);

		if(_expType == I2Cexp_PCF8574)
    199c:	91 30       	cpi	r25, 0x01	; 1
    199e:	21 f4       	brne	.+8      	; 0x19a8 <_ZN14hd44780_I2Cexp6ioinitEv+0x158>
			status = autocfg8574();		// go auto configure the pin mappings
    19a0:	ce 01       	movw	r24, r28
    19a2:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN14hd44780_I2Cexp11autocfg8574Ev>
    19a6:	03 c0       	rjmp	.+6      	; 0x19ae <_ZN14hd44780_I2Cexp6ioinitEv+0x15e>
		else
			status = autocfgMCP23008();	// go auto configure the pin mappings
    19a8:	ce 01       	movw	r24, r28
    19aa:	0e 94 8a 0b 	call	0x1714	; 0x1714 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>
		if(status)
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	09 f4       	brne	.+2      	; 0x19b4 <_ZN14hd44780_I2Cexp6ioinitEv+0x164>
    19b2:	82 cf       	rjmp	.-252    	; 0x18b8 <_ZN14hd44780_I2Cexp6ioinitEv+0x68>
    19b4:	16 c0       	rjmp	.+44     	; 0x19e2 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
		 */
		Wire.beginTransmission(_addr);
		Wire.write(9); // point to GPIO
		
	}
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
    19b6:	60 e0       	ldi	r22, 0x00	; 0
    19b8:	8c e9       	ldi	r24, 0x9C	; 156
    19ba:	94 e0       	ldi	r25, 0x04	; 4
    19bc:	0e 94 7f 12 	call	0x24fe	; 0x24fe <_ZN7TwoWire5writeEh>
	if( (status = Wire.endTransmission()) ) // assignment
    19c0:	8c e9       	ldi	r24, 0x9C	; 156
    19c2:	94 e0       	ldi	r25, 0x04	; 4
    19c4:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_ZN7TwoWire15endTransmissionEv>
    19c8:	21 e0       	ldi	r18, 0x01	; 1
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	81 11       	cpse	r24, r1
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <_ZN14hd44780_I2Cexp6ioinitEv+0x184>
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	88 27       	eor	r24, r24
    19d6:	99 27       	eor	r25, r25
    19d8:	82 1b       	sub	r24, r18
    19da:	93 0b       	sbc	r25, r19
    19dc:	02 c0       	rjmp	.+4      	; 0x19e2 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
			return(hd44780::RV_EIO);
    19de:	8f ef       	ldi	r24, 0xFF	; 255
    19e0:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
	if( (status = Wire.endTransmission()) ) // assignment
		status = hd44780::RV_EIO;

	return ( status );
}
    19e2:	df 91       	pop	r29
    19e4:	cf 91       	pop	r28
    19e6:	1f 91       	pop	r17
    19e8:	08 95       	ret

000019ea <_ZN3dht11_readSensorEhhh>:
    if (bits[4] != sum)
    {
        return DHTLIB_ERROR_CHECKSUM;
    }
    return result;
}
    19ea:	2f 92       	push	r2
    19ec:	3f 92       	push	r3
    19ee:	4f 92       	push	r4
    19f0:	5f 92       	push	r5
    19f2:	6f 92       	push	r6
    19f4:	7f 92       	push	r7
    19f6:	8f 92       	push	r8
    19f8:	9f 92       	push	r9
    19fa:	af 92       	push	r10
    19fc:	bf 92       	push	r11
    19fe:	cf 92       	push	r12
    1a00:	df 92       	push	r13
    1a02:	ef 92       	push	r14
    1a04:	ff 92       	push	r15
    1a06:	0f 93       	push	r16
    1a08:	1f 93       	push	r17
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
    1a0e:	ec 01       	movw	r28, r24
    1a10:	f6 2e       	mov	r15, r22
    1a12:	04 2f       	mov	r16, r20
    1a14:	e2 2e       	mov	r14, r18
    1a16:	86 2f       	mov	r24, r22
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	e8 5d       	subi	r30, 0xD8	; 216
    1a1e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a20:	14 91       	lpm	r17, Z
    1a22:	fc 01       	movw	r30, r24
    1a24:	e9 5b       	subi	r30, 0xB9	; 185
    1a26:	fe 4f       	sbci	r31, 0xFE	; 254
    1a28:	e4 91       	lpm	r30, Z
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	ee 0f       	add	r30, r30
    1a2e:	ff 1f       	adc	r31, r31
    1a30:	ea 59       	subi	r30, 0x9A	; 154
    1a32:	fe 4f       	sbci	r31, 0xFE	; 254
    1a34:	c5 90       	lpm	r12, Z+
    1a36:	d4 90       	lpm	r13, Z
    1a38:	61 e0       	ldi	r22, 0x01	; 1
    1a3a:	8f 2d       	mov	r24, r15
    1a3c:	0e 94 9f 1c 	call	0x393e	; 0x393e <pinMode>
    1a40:	60 e0       	ldi	r22, 0x00	; 0
    1a42:	8f 2d       	mov	r24, r15
    1a44:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <digitalWrite>
    1a48:	09 30       	cpi	r16, 0x09	; 9
    1a4a:	38 f0       	brcs	.+14     	; 0x1a5a <_ZN3dht11_readSensorEhhh+0x70>
    1a4c:	60 2f       	mov	r22, r16
    1a4e:	70 e0       	ldi	r23, 0x00	; 0
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	0e 94 94 1b 	call	0x3728	; 0x3728 <delay>
    1a58:	0a c0       	rjmp	.+20     	; 0x1a6e <_ZN3dht11_readSensorEhhh+0x84>
    1a5a:	88 ee       	ldi	r24, 0xE8	; 232
    1a5c:	93 e0       	ldi	r25, 0x03	; 3
    1a5e:	9c 01       	movw	r18, r24
    1a60:	02 9f       	mul	r16, r18
    1a62:	c0 01       	movw	r24, r0
    1a64:	03 9f       	mul	r16, r19
    1a66:	90 0d       	add	r25, r0
    1a68:	11 24       	eor	r1, r1
    1a6a:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <delayMicroseconds>
    1a6e:	60 e0       	ldi	r22, 0x00	; 0
    1a70:	8f 2d       	mov	r24, r15
    1a72:	0e 94 9f 1c 	call	0x393e	; 0x393e <pinMode>
    1a76:	80 e2       	ldi	r24, 0x20	; 32
    1a78:	93 e0       	ldi	r25, 0x03	; 3
    1a7a:	d6 01       	movw	r26, r12
    1a7c:	2c 91       	ld	r18, X
    1a7e:	21 23       	and	r18, r17
    1a80:	21 f0       	breq	.+8      	; 0x1a8a <_ZN3dht11_readSensorEhhh+0xa0>
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	d1 f7       	brne	.-12     	; 0x1a7a <_ZN3dht11_readSensorEhhh+0x90>
    1a86:	8d ef       	ldi	r24, 0xFD	; 253
    1a88:	5f c0       	rjmp	.+190    	; 0x1b48 <_ZN3dht11_readSensorEhhh+0x15e>
    1a8a:	80 e9       	ldi	r24, 0x90	; 144
    1a8c:	91 e0       	ldi	r25, 0x01	; 1
    1a8e:	f6 01       	movw	r30, r12
    1a90:	20 81       	ld	r18, Z
    1a92:	21 23       	and	r18, r17
    1a94:	21 f4       	brne	.+8      	; 0x1a9e <_ZN3dht11_readSensorEhhh+0xb4>
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	d1 f7       	brne	.-12     	; 0x1a8e <_ZN3dht11_readSensorEhhh+0xa4>
    1a9a:	8c ef       	ldi	r24, 0xFC	; 252
    1a9c:	55 c0       	rjmp	.+170    	; 0x1b48 <_ZN3dht11_readSensorEhhh+0x15e>
    1a9e:	80 e9       	ldi	r24, 0x90	; 144
    1aa0:	91 e0       	ldi	r25, 0x01	; 1
    1aa2:	d6 01       	movw	r26, r12
    1aa4:	2c 91       	ld	r18, X
    1aa6:	21 23       	and	r18, r17
    1aa8:	21 f0       	breq	.+8      	; 0x1ab2 <_ZN3dht11_readSensorEhhh+0xc8>
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	d1 f7       	brne	.-12     	; 0x1aa2 <_ZN3dht11_readSensorEhhh+0xb8>
    1aae:	8b ef       	ldi	r24, 0xFB	; 251
    1ab0:	4b c0       	rjmp	.+150    	; 0x1b48 <_ZN3dht11_readSensorEhhh+0x15e>
    1ab2:	58 e2       	ldi	r21, 0x28	; 40
    1ab4:	80 e9       	ldi	r24, 0x90	; 144
    1ab6:	91 e0       	ldi	r25, 0x01	; 1
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	e0 e9       	ldi	r30, 0x90	; 144
    1abe:	f1 e0       	ldi	r31, 0x01	; 1
    1ac0:	00 e0       	ldi	r16, 0x00	; 0
    1ac2:	60 e0       	ldi	r22, 0x00	; 0
    1ac4:	31 2c       	mov	r3, r1
    1ac6:	40 e8       	ldi	r20, 0x80	; 128
    1ac8:	25 2e       	mov	r2, r21
    1aca:	2e 18       	sub	r2, r14
    1acc:	70 e9       	ldi	r23, 0x90	; 144
    1ace:	87 2e       	mov	r8, r23
    1ad0:	99 24       	eor	r9, r9
    1ad2:	93 94       	inc	r9
    1ad4:	a1 2c       	mov	r10, r1
    1ad6:	b1 2c       	mov	r11, r1
    1ad8:	d6 01       	movw	r26, r12
    1ada:	7c 91       	ld	r23, X
    1adc:	71 23       	and	r23, r17
    1ade:	61 f5       	brne	.+88     	; 0x1b38 <_ZN3dht11_readSensorEhhh+0x14e>
    1ae0:	00 23       	and	r16, r16
    1ae2:	51 f1       	breq	.+84     	; 0x1b38 <_ZN3dht11_readSensorEhhh+0x14e>
    1ae4:	25 16       	cp	r2, r21
    1ae6:	98 f4       	brcc	.+38     	; 0x1b0e <_ZN3dht11_readSensorEhhh+0x124>
    1ae8:	8e 17       	cp	r24, r30
    1aea:	9f 07       	cpc	r25, r31
    1aec:	08 f4       	brcc	.+2      	; 0x1af0 <_ZN3dht11_readSensorEhhh+0x106>
    1aee:	fc 01       	movw	r30, r24
    1af0:	24 01       	movw	r4, r8
    1af2:	35 01       	movw	r6, r10
    1af4:	4e 1a       	sub	r4, r30
    1af6:	5f 0a       	sbc	r5, r31
    1af8:	61 08       	sbc	r6, r1
    1afa:	71 08       	sbc	r7, r1
    1afc:	82 e0       	ldi	r24, 0x02	; 2
    1afe:	75 94       	asr	r7
    1b00:	67 94       	ror	r6
    1b02:	57 94       	ror	r5
    1b04:	47 94       	ror	r4
    1b06:	8a 95       	dec	r24
    1b08:	d1 f7       	brne	.-12     	; 0x1afe <_ZN3dht11_readSensorEhhh+0x114>
    1b0a:	92 01       	movw	r18, r4
    1b0c:	07 c0       	rjmp	.+14     	; 0x1b1c <_ZN3dht11_readSensorEhhh+0x132>
    1b0e:	7f 01       	movw	r14, r30
    1b10:	e2 1a       	sub	r14, r18
    1b12:	f3 0a       	sbc	r15, r19
    1b14:	e8 16       	cp	r14, r24
    1b16:	f9 06       	cpc	r15, r25
    1b18:	08 f0       	brcs	.+2      	; 0x1b1c <_ZN3dht11_readSensorEhhh+0x132>
    1b1a:	64 2b       	or	r22, r20
    1b1c:	46 95       	lsr	r20
    1b1e:	49 f4       	brne	.+18     	; 0x1b32 <_ZN3dht11_readSensorEhhh+0x148>
    1b20:	ce 01       	movw	r24, r28
    1b22:	83 0d       	add	r24, r3
    1b24:	91 1d       	adc	r25, r1
    1b26:	dc 01       	movw	r26, r24
    1b28:	18 96       	adiw	r26, 0x08	; 8
    1b2a:	6c 93       	st	X, r22
    1b2c:	33 94       	inc	r3
    1b2e:	60 e0       	ldi	r22, 0x00	; 0
    1b30:	40 e8       	ldi	r20, 0x80	; 128
    1b32:	51 50       	subi	r21, 0x01	; 1
    1b34:	80 e9       	ldi	r24, 0x90	; 144
    1b36:	91 e0       	ldi	r25, 0x01	; 1
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	29 f0       	breq	.+10     	; 0x1b46 <_ZN3dht11_readSensorEhhh+0x15c>
    1b3c:	07 2f       	mov	r16, r23
    1b3e:	51 11       	cpse	r21, r1
    1b40:	cb cf       	rjmp	.-106    	; 0x1ad8 <_ZN3dht11_readSensorEhhh+0xee>
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	01 c0       	rjmp	.+2      	; 0x1b48 <_ZN3dht11_readSensorEhhh+0x15e>
    1b46:	8e ef       	ldi	r24, 0xFE	; 254
    1b48:	df 91       	pop	r29
    1b4a:	cf 91       	pop	r28
    1b4c:	1f 91       	pop	r17
    1b4e:	0f 91       	pop	r16
    1b50:	ff 90       	pop	r15
    1b52:	ef 90       	pop	r14
    1b54:	df 90       	pop	r13
    1b56:	cf 90       	pop	r12
    1b58:	bf 90       	pop	r11
    1b5a:	af 90       	pop	r10
    1b5c:	9f 90       	pop	r9
    1b5e:	8f 90       	pop	r8
    1b60:	7f 90       	pop	r7
    1b62:	6f 90       	pop	r6
    1b64:	5f 90       	pop	r5
    1b66:	4f 90       	pop	r4
    1b68:	3f 90       	pop	r3
    1b6a:	2f 90       	pop	r2
    1b6c:	08 95       	ret

00001b6e <_ZN3dht4readEh>:

int8_t dht::read(uint8_t pin)
{
    1b6e:	cf 92       	push	r12
    1b70:	df 92       	push	r13
    1b72:	ef 92       	push	r14
    1b74:	ff 92       	push	r15
    1b76:	0f 93       	push	r16
    1b78:	1f 93       	push	r17
    1b7a:	cf 93       	push	r28
    1b7c:	df 93       	push	r29
    1b7e:	ec 01       	movw	r28, r24
    // READ VALUES
    if (_disableIRQ) noInterrupts();
    1b80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b82:	88 23       	and	r24, r24
    1b84:	09 f0       	breq	.+2      	; 0x1b88 <_ZN3dht4readEh+0x1a>
    1b86:	f8 94       	cli
    int8_t result = _readSensor(pin, DHTLIB_DHT_WAKEUP, DHTLIB_DHT_LEADING_ZEROS);
    1b88:	26 e0       	ldi	r18, 0x06	; 6
    1b8a:	41 e0       	ldi	r20, 0x01	; 1
    1b8c:	ce 01       	movw	r24, r28
    1b8e:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <_ZN3dht11_readSensorEhhh>
    1b92:	e8 2e       	mov	r14, r24
    if (_disableIRQ) interrupts();
    1b94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b96:	88 23       	and	r24, r24
    1b98:	09 f0       	breq	.+2      	; 0x1b9c <_ZN3dht4readEh+0x2e>
    1b9a:	78 94       	sei

    // these bits are always zero, masking them reduces errors.
    bits[0] &= 0x03;
    1b9c:	08 85       	ldd	r16, Y+8	; 0x08
    1b9e:	03 70       	andi	r16, 0x03	; 3
    1ba0:	08 87       	std	Y+8, r16	; 0x08
    bits[2] &= 0x83;
    1ba2:	1a 85       	ldd	r17, Y+10	; 0x0a
    1ba4:	81 2f       	mov	r24, r17
    1ba6:	83 78       	andi	r24, 0x83	; 131
    1ba8:	f8 2e       	mov	r15, r24
    1baa:	8a 87       	std	Y+10, r24	; 0x0a

    // CONVERT AND STORE
    humidity = (bits[0]*256 + bits[1]) * 0.1;
    1bac:	c9 84       	ldd	r12, Y+9	; 0x09
    1bae:	60 2f       	mov	r22, r16
    1bb0:	70 e0       	ldi	r23, 0x00	; 0
    1bb2:	76 2f       	mov	r23, r22
    1bb4:	66 27       	eor	r22, r22
    1bb6:	6c 0d       	add	r22, r12
    1bb8:	71 1d       	adc	r23, r1
    1bba:	07 2e       	mov	r0, r23
    1bbc:	00 0c       	add	r0, r0
    1bbe:	88 0b       	sbc	r24, r24
    1bc0:	99 0b       	sbc	r25, r25
    1bc2:	0e 94 cf 13 	call	0x279e	; 0x279e <__floatsisf>
    1bc6:	2d ec       	ldi	r18, 0xCD	; 205
    1bc8:	3c ec       	ldi	r19, 0xCC	; 204
    1bca:	4c ec       	ldi	r20, 0xCC	; 204
    1bcc:	5d e3       	ldi	r21, 0x3D	; 61
    1bce:	0e 94 7f 14 	call	0x28fe	; 0x28fe <__mulsf3>
    1bd2:	68 83       	st	Y, r22
    1bd4:	79 83       	std	Y+1, r23	; 0x01
    1bd6:	8a 83       	std	Y+2, r24	; 0x02
    1bd8:	9b 83       	std	Y+3, r25	; 0x03
    temperature = ((bits[2] & 0x7F)*256 + bits[3]) * 0.1;
    1bda:	db 84       	ldd	r13, Y+11	; 0x0b
    1bdc:	13 70       	andi	r17, 0x03	; 3
    1bde:	61 2f       	mov	r22, r17
    1be0:	70 e0       	ldi	r23, 0x00	; 0
    1be2:	76 2f       	mov	r23, r22
    1be4:	66 27       	eor	r22, r22
    1be6:	6d 0d       	add	r22, r13
    1be8:	71 1d       	adc	r23, r1
    1bea:	07 2e       	mov	r0, r23
    1bec:	00 0c       	add	r0, r0
    1bee:	88 0b       	sbc	r24, r24
    1bf0:	99 0b       	sbc	r25, r25
    1bf2:	0e 94 cf 13 	call	0x279e	; 0x279e <__floatsisf>
    1bf6:	2d ec       	ldi	r18, 0xCD	; 205
    1bf8:	3c ec       	ldi	r19, 0xCC	; 204
    1bfa:	4c ec       	ldi	r20, 0xCC	; 204
    1bfc:	5d e3       	ldi	r21, 0x3D	; 61
    1bfe:	0e 94 7f 14 	call	0x28fe	; 0x28fe <__mulsf3>
    if (bits[2] & 0x80)  // negative temperature
    1c02:	f7 fc       	sbrc	r15, 7
    1c04:	05 c0       	rjmp	.+10     	; 0x1c10 <_ZN3dht4readEh+0xa2>
    bits[0] &= 0x03;
    bits[2] &= 0x83;

    // CONVERT AND STORE
    humidity = (bits[0]*256 + bits[1]) * 0.1;
    temperature = ((bits[2] & 0x7F)*256 + bits[3]) * 0.1;
    1c06:	6c 83       	std	Y+4, r22	; 0x04
    1c08:	7d 83       	std	Y+5, r23	; 0x05
    1c0a:	8e 83       	std	Y+6, r24	; 0x06
    1c0c:	9f 83       	std	Y+7, r25	; 0x07
    1c0e:	07 c0       	rjmp	.+14     	; 0x1c1e <_ZN3dht4readEh+0xb0>
    if (bits[2] & 0x80)  // negative temperature
    {
        temperature = -temperature;
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	b0 58       	subi	r27, 0x80	; 128
    1c16:	8c 83       	std	Y+4, r24	; 0x04
    1c18:	9d 83       	std	Y+5, r25	; 0x05
    1c1a:	ae 83       	std	Y+6, r26	; 0x06
    1c1c:	bf 83       	std	Y+7, r27	; 0x07
    }

    // TEST CHECKSUM
    uint8_t sum = bits[0] + bits[1] + bits[2] + bits[3];
    if (bits[4] != sum)
    1c1e:	dc 0c       	add	r13, r12
    1c20:	0d 0d       	add	r16, r13
    1c22:	f0 0e       	add	r15, r16
    1c24:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c26:	f8 12       	cpse	r15, r24
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <_ZN3dht4readEh+0xc0>
    {
        return DHTLIB_ERROR_CHECKSUM;
    }
    return result;
    1c2a:	8e 2d       	mov	r24, r14
    1c2c:	01 c0       	rjmp	.+2      	; 0x1c30 <_ZN3dht4readEh+0xc2>

    // TEST CHECKSUM
    uint8_t sum = bits[0] + bits[1] + bits[2] + bits[3];
    if (bits[4] != sum)
    {
        return DHTLIB_ERROR_CHECKSUM;
    1c2e:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return result;
}
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	1f 91       	pop	r17
    1c36:	0f 91       	pop	r16
    1c38:	ff 90       	pop	r15
    1c3a:	ef 90       	pop	r14
    1c3c:	df 90       	pop	r13
    1c3e:	cf 90       	pop	r12
    1c40:	08 95       	ret

00001c42 <_ZN7hd447806ioinitEv>:
	{
		buf[i] = pgm_read_byte(charmap++);
	}
	// call the RAM based function to actually send it to the LCD
	return(createChar(location, buf));
}
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	08 95       	ret

00001c48 <_ZN7hd447806ioreadENS_6iotypeE>:
    1c48:	8d ef       	ldi	r24, 0xFD	; 253
    1c4a:	9f ef       	ldi	r25, 0xFF	; 255
    1c4c:	08 95       	ret

00001c4e <_ZN7hd4478014iosetBacklightEh>:
    1c4e:	8d ef       	ldi	r24, 0xFD	; 253
    1c50:	9f ef       	ldi	r25, 0xFF	; 255
    1c52:	08 95       	ret

00001c54 <_ZN7hd44780C1Ev>:
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
    1c58:	ec 01       	movw	r28, r24
    1c5a:	1b 82       	std	Y+3, r1	; 0x03
    1c5c:	1a 82       	std	Y+2, r1	; 0x02
    1c5e:	89 ea       	ldi	r24, 0xA9	; 169
    1c60:	92 e0       	ldi	r25, 0x02	; 2
    1c62:	99 83       	std	Y+1, r25	; 0x01
    1c64:	88 83       	st	Y, r24
    1c66:	1f 82       	std	Y+7, r1	; 0x07
    1c68:	18 86       	std	Y+8, r1	; 0x08
    1c6a:	80 ed       	ldi	r24, 0xD0	; 208
    1c6c:	97 e0       	ldi	r25, 0x07	; 7
    1c6e:	a0 e0       	ldi	r26, 0x00	; 0
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	88 8b       	std	Y+16, r24	; 0x10
    1c74:	99 8b       	std	Y+17, r25	; 0x11
    1c76:	aa 8b       	std	Y+18, r26	; 0x12
    1c78:	bb 8b       	std	Y+19, r27	; 0x13
    1c7a:	86 e2       	ldi	r24, 0x26	; 38
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	a0 e0       	ldi	r26, 0x00	; 0
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	8c 8b       	std	Y+20, r24	; 0x14
    1c84:	9d 8b       	std	Y+21, r25	; 0x15
    1c86:	ae 8b       	std	Y+22, r26	; 0x16
    1c88:	bf 8b       	std	Y+23, r27	; 0x17
    1c8a:	1c 86       	std	Y+12, r1	; 0x0c
    1c8c:	1d 86       	std	Y+13, r1	; 0x0d
    1c8e:	1e 86       	std	Y+14, r1	; 0x0e
    1c90:	1f 86       	std	Y+15, r1	; 0x0f
    1c92:	1b 86       	std	Y+11, r1	; 0x0b
    1c94:	0e 94 6f 1b 	call	0x36de	; 0x36de <micros>
    1c98:	68 8f       	std	Y+24, r22	; 0x18
    1c9a:	79 8f       	std	Y+25, r23	; 0x19
    1c9c:	8a 8f       	std	Y+26, r24	; 0x1a
    1c9e:	9b 8f       	std	Y+27, r25	; 0x1b
    1ca0:	1c 8e       	std	Y+28, r1	; 0x1c
    1ca2:	1d 8e       	std	Y+29, r1	; 0x1d
    1ca4:	1e 8e       	std	Y+30, r1	; 0x1e
    1ca6:	1f 8e       	std	Y+31, r1	; 0x1f
    1ca8:	df 91       	pop	r29
    1caa:	cf 91       	pop	r28
    1cac:	08 95       	ret

00001cae <_ZN7hd447809backlightEv>:
    1cae:	dc 01       	movw	r26, r24
    1cb0:	ed 91       	ld	r30, X+
    1cb2:	fc 91       	ld	r31, X
    1cb4:	06 84       	ldd	r0, Z+14	; 0x0e
    1cb6:	f7 85       	ldd	r31, Z+15	; 0x0f
    1cb8:	e0 2d       	mov	r30, r0
    1cba:	6f ef       	ldi	r22, 0xFF	; 255
    1cbc:	09 94       	ijmp

00001cbe <_ZN7hd4478011noBacklightEv>:
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	ed 91       	ld	r30, X+
    1cc2:	fc 91       	ld	r31, X
    1cc4:	06 84       	ldd	r0, Z+14	; 0x0e
    1cc6:	f7 85       	ldd	r31, Z+15	; 0x0f
    1cc8:	e0 2d       	mov	r30, r0
    1cca:	60 e0       	ldi	r22, 0x00	; 0
    1ccc:	09 94       	ijmp

00001cce <_ZN7hd447807commandEh>:
    1cce:	8f 92       	push	r8
    1cd0:	9f 92       	push	r9
    1cd2:	af 92       	push	r10
    1cd4:	bf 92       	push	r11
    1cd6:	ef 92       	push	r14
    1cd8:	ff 92       	push	r15
    1cda:	1f 93       	push	r17
    1cdc:	cf 93       	push	r28
    1cde:	df 93       	push	r29
    1ce0:	ec 01       	movw	r28, r24
    1ce2:	16 2f       	mov	r17, r22
    1ce4:	e8 81       	ld	r30, Y
    1ce6:	f9 81       	ldd	r31, Y+1	; 0x01
    1ce8:	04 84       	ldd	r0, Z+12	; 0x0c
    1cea:	f5 85       	ldd	r31, Z+13	; 0x0d
    1cec:	e0 2d       	mov	r30, r0
    1cee:	46 2f       	mov	r20, r22
    1cf0:	60 e0       	ldi	r22, 0x00	; 0
    1cf2:	09 95       	icall
    1cf4:	7c 01       	movw	r14, r24
    1cf6:	11 50       	subi	r17, 0x01	; 1
    1cf8:	12 30       	cpi	r17, 0x02	; 2
    1cfa:	38 f4       	brcc	.+14     	; 0x1d0a <_ZN7hd447807commandEh+0x3c>
    1cfc:	19 86       	std	Y+9, r1	; 0x09
    1cfe:	1a 86       	std	Y+10, r1	; 0x0a
    1d00:	88 88       	ldd	r8, Y+16	; 0x10
    1d02:	99 88       	ldd	r9, Y+17	; 0x11
    1d04:	aa 88       	ldd	r10, Y+18	; 0x12
    1d06:	bb 88       	ldd	r11, Y+19	; 0x13
    1d08:	04 c0       	rjmp	.+8      	; 0x1d12 <_ZN7hd447807commandEh+0x44>
    1d0a:	8c 88       	ldd	r8, Y+20	; 0x14
    1d0c:	9d 88       	ldd	r9, Y+21	; 0x15
    1d0e:	ae 88       	ldd	r10, Y+22	; 0x16
    1d10:	bf 88       	ldd	r11, Y+23	; 0x17
    1d12:	0e 94 6f 1b 	call	0x36de	; 0x36de <micros>
    1d16:	68 8f       	std	Y+24, r22	; 0x18
    1d18:	79 8f       	std	Y+25, r23	; 0x19
    1d1a:	8a 8f       	std	Y+26, r24	; 0x1a
    1d1c:	9b 8f       	std	Y+27, r25	; 0x1b
    1d1e:	8c 8e       	std	Y+28, r8	; 0x1c
    1d20:	9d 8e       	std	Y+29, r9	; 0x1d
    1d22:	ae 8e       	std	Y+30, r10	; 0x1e
    1d24:	bf 8e       	std	Y+31, r11	; 0x1f
    1d26:	c7 01       	movw	r24, r14
    1d28:	df 91       	pop	r29
    1d2a:	cf 91       	pop	r28
    1d2c:	1f 91       	pop	r17
    1d2e:	ff 90       	pop	r15
    1d30:	ef 90       	pop	r14
    1d32:	bf 90       	pop	r11
    1d34:	af 90       	pop	r10
    1d36:	9f 90       	pop	r9
    1d38:	8f 90       	pop	r8
    1d3a:	08 95       	ret

00001d3c <_ZN7hd447805clearEv>:
    1d3c:	61 e0       	ldi	r22, 0x01	; 1
    1d3e:	0c 94 67 0e 	jmp	0x1cce	; 0x1cce <_ZN7hd447807commandEh>

00001d42 <_ZN7hd447804homeEv>:
    1d42:	62 e0       	ldi	r22, 0x02	; 2
    1d44:	0c 94 67 0e 	jmp	0x1cce	; 0x1cce <_ZN7hd447807commandEh>

00001d48 <_ZN7hd447809setCursorEhh>:
    1d48:	fc 01       	movw	r30, r24
    1d4a:	80 85       	ldd	r24, Z+8	; 0x08
    1d4c:	48 17       	cp	r20, r24
    1d4e:	10 f0       	brcs	.+4      	; 0x1d54 <_ZN7hd447809setCursorEhh+0xc>
    1d50:	4f ef       	ldi	r20, 0xFF	; 255
    1d52:	48 0f       	add	r20, r24
    1d54:	93 85       	ldd	r25, Z+11	; 0x0b
    1d56:	99 23       	and	r25, r25
    1d58:	59 f0       	breq	.+22     	; 0x1d70 <_ZN7hd447809setCursorEhh+0x28>
    1d5a:	97 81       	ldd	r25, Z+7	; 0x07
    1d5c:	69 17       	cp	r22, r25
    1d5e:	30 f0       	brcs	.+12     	; 0x1d6c <_ZN7hd447809setCursorEhh+0x24>
    1d60:	69 1b       	sub	r22, r25
    1d62:	4f 5f       	subi	r20, 0xFF	; 255
    1d64:	48 17       	cp	r20, r24
    1d66:	d0 f3       	brcs	.-12     	; 0x1d5c <_ZN7hd447809setCursorEhh+0x14>
    1d68:	40 e0       	ldi	r20, 0x00	; 0
    1d6a:	f8 cf       	rjmp	.-16     	; 0x1d5c <_ZN7hd447809setCursorEhh+0x14>
    1d6c:	61 87       	std	Z+9, r22	; 0x09
    1d6e:	42 87       	std	Z+10, r20	; 0x0a
    1d70:	df 01       	movw	r26, r30
    1d72:	a4 0f       	add	r26, r20
    1d74:	b1 1d       	adc	r27, r1
    1d76:	1c 96       	adiw	r26, 0x0c	; 12
    1d78:	8c 91       	ld	r24, X
    1d7a:	68 0f       	add	r22, r24
    1d7c:	60 68       	ori	r22, 0x80	; 128
    1d7e:	cf 01       	movw	r24, r30
    1d80:	0c 94 67 0e 	jmp	0x1cce	; 0x1cce <_ZN7hd447807commandEh>

00001d84 <_ZN7hd447807displayEv>:
    1d84:	fc 01       	movw	r30, r24
    1d86:	65 81       	ldd	r22, Z+5	; 0x05
    1d88:	26 2f       	mov	r18, r22
    1d8a:	24 60       	ori	r18, 0x04	; 4
    1d8c:	25 83       	std	Z+5, r18	; 0x05
    1d8e:	6c 60       	ori	r22, 0x0C	; 12
    1d90:	0c 94 67 0e 	jmp	0x1cce	; 0x1cce <_ZN7hd447807commandEh>

00001d94 <_ZN7hd447805beginEhhh>:
    1d94:	0f 93       	push	r16
    1d96:	1f 93       	push	r17
    1d98:	cf 93       	push	r28
    1d9a:	df 93       	push	r29
    1d9c:	ec 01       	movw	r28, r24
    1d9e:	02 2f       	mov	r16, r18
    1da0:	14 2f       	mov	r17, r20
    1da2:	45 30       	cpi	r20, 0x05	; 5
    1da4:	08 f0       	brcs	.+2      	; 0x1da8 <_ZN7hd447805beginEhhh+0x14>
    1da6:	14 e0       	ldi	r17, 0x04	; 4
    1da8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1daa:	81 11       	cpse	r24, r1
    1dac:	09 c0       	rjmp	.+18     	; 0x1dc0 <_ZN7hd447805beginEhhh+0x2c>
    1dae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db0:	81 11       	cpse	r24, r1
    1db2:	06 c0       	rjmp	.+12     	; 0x1dc0 <_ZN7hd447805beginEhhh+0x2c>
    1db4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1db6:	81 11       	cpse	r24, r1
    1db8:	03 c0       	rjmp	.+6      	; 0x1dc0 <_ZN7hd447805beginEhhh+0x2c>
    1dba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dbc:	88 23       	and	r24, r24
    1dbe:	29 f0       	breq	.+10     	; 0x1dca <_ZN7hd447805beginEhhh+0x36>
    1dc0:	8f 81       	ldd	r24, Y+7	; 0x07
    1dc2:	88 23       	and	r24, r24
    1dc4:	59 f0       	breq	.+22     	; 0x1ddc <_ZN7hd447805beginEhhh+0x48>
    1dc6:	86 17       	cp	r24, r22
    1dc8:	49 f0       	breq	.+18     	; 0x1ddc <_ZN7hd447805beginEhhh+0x48>
    1dca:	1c 86       	std	Y+12, r1	; 0x0c
    1dcc:	80 e4       	ldi	r24, 0x40	; 64
    1dce:	8d 87       	std	Y+13, r24	; 0x0d
    1dd0:	6e 87       	std	Y+14, r22	; 0x0e
    1dd2:	86 2f       	mov	r24, r22
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	80 5c       	subi	r24, 0xC0	; 192
    1dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dda:	8f 87       	std	Y+15, r24	; 0x0f
    1ddc:	18 87       	std	Y+8, r17	; 0x08
    1dde:	6f 83       	std	Y+7, r22	; 0x07
    1de0:	64 e6       	ldi	r22, 0x64	; 100
    1de2:	70 e0       	ldi	r23, 0x00	; 0
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	0e 94 94 1b 	call	0x3728	; 0x3728 <delay>
    1dec:	1c 82       	std	Y+4, r1	; 0x04
    1dee:	e8 81       	ld	r30, Y
    1df0:	f9 81       	ldd	r31, Y+1	; 0x01
    1df2:	00 84       	ldd	r0, Z+8	; 0x08
    1df4:	f1 85       	ldd	r31, Z+9	; 0x09
    1df6:	e0 2d       	mov	r30, r0
    1df8:	ce 01       	movw	r24, r28
    1dfa:	09 95       	icall
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	09 f0       	breq	.+2      	; 0x1e02 <_ZN7hd447805beginEhhh+0x6e>
    1e00:	5e c0       	rjmp	.+188    	; 0x1ebe <_ZN7hd447805beginEhhh+0x12a>
    1e02:	88 85       	ldd	r24, Y+8	; 0x08
    1e04:	82 30       	cpi	r24, 0x02	; 2
    1e06:	18 f0       	brcs	.+6      	; 0x1e0e <_ZN7hd447805beginEhhh+0x7a>
    1e08:	8c 81       	ldd	r24, Y+4	; 0x04
    1e0a:	88 60       	ori	r24, 0x08	; 8
    1e0c:	8c 83       	std	Y+4, r24	; 0x04
    1e0e:	00 23       	and	r16, r16
    1e10:	29 f0       	breq	.+10     	; 0x1e1c <_ZN7hd447805beginEhhh+0x88>
    1e12:	11 30       	cpi	r17, 0x01	; 1
    1e14:	19 f4       	brne	.+6      	; 0x1e1c <_ZN7hd447805beginEhhh+0x88>
    1e16:	8c 81       	ldd	r24, Y+4	; 0x04
    1e18:	84 60       	ori	r24, 0x04	; 4
    1e1a:	8c 83       	std	Y+4, r24	; 0x04
    1e1c:	e8 81       	ld	r30, Y
    1e1e:	f9 81       	ldd	r31, Y+1	; 0x01
    1e20:	04 84       	ldd	r0, Z+12	; 0x0c
    1e22:	f5 85       	ldd	r31, Z+13	; 0x0d
    1e24:	e0 2d       	mov	r30, r0
    1e26:	40 e3       	ldi	r20, 0x30	; 48
    1e28:	62 e0       	ldi	r22, 0x02	; 2
    1e2a:	ce 01       	movw	r24, r28
    1e2c:	09 95       	icall
    1e2e:	65 e0       	ldi	r22, 0x05	; 5
    1e30:	70 e0       	ldi	r23, 0x00	; 0
    1e32:	80 e0       	ldi	r24, 0x00	; 0
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	0e 94 94 1b 	call	0x3728	; 0x3728 <delay>
    1e3a:	e8 81       	ld	r30, Y
    1e3c:	f9 81       	ldd	r31, Y+1	; 0x01
    1e3e:	04 84       	ldd	r0, Z+12	; 0x0c
    1e40:	f5 85       	ldd	r31, Z+13	; 0x0d
    1e42:	e0 2d       	mov	r30, r0
    1e44:	40 e3       	ldi	r20, 0x30	; 48
    1e46:	62 e0       	ldi	r22, 0x02	; 2
    1e48:	ce 01       	movw	r24, r28
    1e4a:	09 95       	icall
    1e4c:	61 e0       	ldi	r22, 0x01	; 1
    1e4e:	70 e0       	ldi	r23, 0x00	; 0
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	0e 94 94 1b 	call	0x3728	; 0x3728 <delay>
    1e58:	e8 81       	ld	r30, Y
    1e5a:	f9 81       	ldd	r31, Y+1	; 0x01
    1e5c:	04 84       	ldd	r0, Z+12	; 0x0c
    1e5e:	f5 85       	ldd	r31, Z+13	; 0x0d
    1e60:	e0 2d       	mov	r30, r0
    1e62:	40 e3       	ldi	r20, 0x30	; 48
    1e64:	62 e0       	ldi	r22, 0x02	; 2
    1e66:	ce 01       	movw	r24, r28
    1e68:	09 95       	icall
    1e6a:	61 e0       	ldi	r22, 0x01	; 1
    1e6c:	70 e0       	ldi	r23, 0x00	; 0
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	0e 94 94 1b 	call	0x3728	; 0x3728 <delay>
    1e76:	8c 81       	ldd	r24, Y+4	; 0x04
    1e78:	84 fd       	sbrc	r24, 4
    1e7a:	09 c0       	rjmp	.+18     	; 0x1e8e <_ZN7hd447805beginEhhh+0xfa>
    1e7c:	e8 81       	ld	r30, Y
    1e7e:	f9 81       	ldd	r31, Y+1	; 0x01
    1e80:	04 84       	ldd	r0, Z+12	; 0x0c
    1e82:	f5 85       	ldd	r31, Z+13	; 0x0d
    1e84:	e0 2d       	mov	r30, r0
    1e86:	40 e2       	ldi	r20, 0x20	; 32
    1e88:	62 e0       	ldi	r22, 0x02	; 2
    1e8a:	ce 01       	movw	r24, r28
    1e8c:	09 95       	icall
    1e8e:	6c 81       	ldd	r22, Y+4	; 0x04
    1e90:	60 62       	ori	r22, 0x20	; 32
    1e92:	ce 01       	movw	r24, r28
    1e94:	0e 94 67 0e 	call	0x1cce	; 0x1cce <_ZN7hd447807commandEh>
    1e98:	84 e0       	ldi	r24, 0x04	; 4
    1e9a:	8d 83       	std	Y+5, r24	; 0x05
    1e9c:	ce 01       	movw	r24, r28
    1e9e:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <_ZN7hd447807displayEv>
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <_ZN7hd447805clearEv>
    1ea8:	82 e0       	ldi	r24, 0x02	; 2
    1eaa:	8e 83       	std	Y+6, r24	; 0x06
    1eac:	66 e0       	ldi	r22, 0x06	; 6
    1eae:	ce 01       	movw	r24, r28
    1eb0:	0e 94 67 0e 	call	0x1cce	; 0x1cce <_ZN7hd447807commandEh>
    1eb4:	8c 01       	movw	r16, r24
    1eb6:	ce 01       	movw	r24, r28
    1eb8:	0e 94 57 0e 	call	0x1cae	; 0x1cae <_ZN7hd447809backlightEv>
    1ebc:	c8 01       	movw	r24, r16
    1ebe:	df 91       	pop	r29
    1ec0:	cf 91       	pop	r28
    1ec2:	1f 91       	pop	r17
    1ec4:	0f 91       	pop	r16
    1ec6:	08 95       	ret

00001ec8 <_ZN7hd447808noCursorEv>:
    1ec8:	fc 01       	movw	r30, r24
    1eca:	65 81       	ldd	r22, Z+5	; 0x05
    1ecc:	6d 7f       	andi	r22, 0xFD	; 253
    1ece:	65 83       	std	Z+5, r22	; 0x05
    1ed0:	68 60       	ori	r22, 0x08	; 8
    1ed2:	0c 94 67 0e 	jmp	0x1cce	; 0x1cce <_ZN7hd447807commandEh>

00001ed6 <_ZN7hd447807noBlinkEv>:
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	65 81       	ldd	r22, Z+5	; 0x05
    1eda:	6e 7f       	andi	r22, 0xFE	; 254
    1edc:	65 83       	std	Z+5, r22	; 0x05
    1ede:	68 60       	ori	r22, 0x08	; 8
    1ee0:	0c 94 67 0e 	jmp	0x1cce	; 0x1cce <_ZN7hd447807commandEh>

00001ee4 <_ZN7hd447806_writeEh>:
    1ee4:	cf 92       	push	r12
    1ee6:	df 92       	push	r13
    1ee8:	ef 92       	push	r14
    1eea:	ff 92       	push	r15
    1eec:	0f 93       	push	r16
    1eee:	1f 93       	push	r17
    1ef0:	cf 93       	push	r28
    1ef2:	df 93       	push	r29
    1ef4:	ec 01       	movw	r28, r24
    1ef6:	46 2f       	mov	r20, r22
    1ef8:	e8 81       	ld	r30, Y
    1efa:	f9 81       	ldd	r31, Y+1	; 0x01
    1efc:	04 84       	ldd	r0, Z+12	; 0x0c
    1efe:	f5 85       	ldd	r31, Z+13	; 0x0d
    1f00:	e0 2d       	mov	r30, r0
    1f02:	61 e0       	ldi	r22, 0x01	; 1
    1f04:	09 95       	icall
    1f06:	8c 01       	movw	r16, r24
    1f08:	cc 88       	ldd	r12, Y+20	; 0x14
    1f0a:	dd 88       	ldd	r13, Y+21	; 0x15
    1f0c:	ee 88       	ldd	r14, Y+22	; 0x16
    1f0e:	ff 88       	ldd	r15, Y+23	; 0x17
    1f10:	0e 94 6f 1b 	call	0x36de	; 0x36de <micros>
    1f14:	68 8f       	std	Y+24, r22	; 0x18
    1f16:	79 8f       	std	Y+25, r23	; 0x19
    1f18:	8a 8f       	std	Y+26, r24	; 0x1a
    1f1a:	9b 8f       	std	Y+27, r25	; 0x1b
    1f1c:	cc 8e       	std	Y+28, r12	; 0x1c
    1f1e:	dd 8e       	std	Y+29, r13	; 0x1d
    1f20:	ee 8e       	std	Y+30, r14	; 0x1e
    1f22:	ff 8e       	std	Y+31, r15	; 0x1f
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	01 2b       	or	r16, r17
    1f2a:	11 f0       	breq	.+4      	; 0x1f30 <_ZN7hd447806_writeEh+0x4c>
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	df 91       	pop	r29
    1f32:	cf 91       	pop	r28
    1f34:	1f 91       	pop	r17
    1f36:	0f 91       	pop	r16
    1f38:	ff 90       	pop	r15
    1f3a:	ef 90       	pop	r14
    1f3c:	df 90       	pop	r13
    1f3e:	cf 90       	pop	r12
    1f40:	08 95       	ret

00001f42 <_ZN7hd447805writeEh>:

// write() - process data character byte to lcd
// returns number of bytes successfully written to device
// i.e. 1 if success or 0 if no character was processed (error)
size_t hd44780::write(uint8_t value)
{
    1f42:	0f 93       	push	r16
    1f44:	1f 93       	push	r17
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
    1f4a:	ec 01       	movw	r28, r24
size_t rval;

	rval = _write(value);
    1f4c:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <_ZN7hd447806_writeEh>
    1f50:	8c 01       	movw	r16, r24
	if(_wraplines)
    1f52:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f54:	88 23       	and	r24, r24
    1f56:	99 f0       	breq	.+38     	; 0x1f7e <_ZN7hd447805writeEh+0x3c>
	{
		// currently only works for left to right mode
		if(++_curcol >= _cols)
    1f58:	89 85       	ldd	r24, Y+9	; 0x09
    1f5a:	8f 5f       	subi	r24, 0xFF	; 255
    1f5c:	89 87       	std	Y+9, r24	; 0x09
    1f5e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f60:	89 17       	cp	r24, r25
    1f62:	68 f0       	brcs	.+26     	; 0x1f7e <_ZN7hd447805writeEh+0x3c>
		{
			_curcol = 0;
    1f64:	19 86       	std	Y+9, r1	; 0x09
			_currow++;
    1f66:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f68:	8f 5f       	subi	r24, 0xFF	; 255
    1f6a:	8a 87       	std	Y+10, r24	; 0x0a
			if(_currow >= _rows)
    1f6c:	98 85       	ldd	r25, Y+8	; 0x08
    1f6e:	89 17       	cp	r24, r25
    1f70:	08 f0       	brcs	.+2      	; 0x1f74 <_ZN7hd447805writeEh+0x32>
				_currow = 0;
    1f72:	1a 86       	std	Y+10, r1	; 0x0a
			setCursor(_curcol, _currow);
    1f74:	4a 85       	ldd	r20, Y+10	; 0x0a
    1f76:	60 e0       	ldi	r22, 0x00	; 0
    1f78:	ce 01       	movw	r24, r28
    1f7a:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7hd447809setCursorEhh>
		}
	}
	return (rval);
}
    1f7e:	c8 01       	movw	r24, r16
    1f80:	df 91       	pop	r29
    1f82:	cf 91       	pop	r28
    1f84:	1f 91       	pop	r17
    1f86:	0f 91       	pop	r16
    1f88:	08 95       	ret

00001f8a <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1f8a:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <twi_state>
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <twi_sendStop>
    1f94:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <twi_inRepStart>
    1f98:	61 e0       	ldi	r22, 0x01	; 1
    1f9a:	82 e0       	ldi	r24, 0x02	; 2
    1f9c:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <digitalWrite>
    1fa0:	61 e0       	ldi	r22, 0x01	; 1
    1fa2:	83 e0       	ldi	r24, 0x03	; 3
    1fa4:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <digitalWrite>
    1fa8:	e9 eb       	ldi	r30, 0xB9	; 185
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	8e 7f       	andi	r24, 0xFE	; 254
    1fb0:	80 83       	st	Z, r24
    1fb2:	80 81       	ld	r24, Z
    1fb4:	8d 7f       	andi	r24, 0xFD	; 253
    1fb6:	80 83       	st	Z, r24
    1fb8:	88 e4       	ldi	r24, 0x48	; 72
    1fba:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1fbe:	85 e4       	ldi	r24, 0x45	; 69
    1fc0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1fc4:	08 95       	ret

00001fc6 <twi_readFrom>:
    1fc6:	41 32       	cpi	r20, 0x21	; 33
    1fc8:	08 f0       	brcs	.+2      	; 0x1fcc <twi_readFrom+0x6>
    1fca:	43 c0       	rjmp	.+134    	; 0x2052 <twi_readFrom+0x8c>
    1fcc:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <twi_state>
    1fd0:	91 11       	cpse	r25, r1
    1fd2:	fc cf       	rjmp	.-8      	; 0x1fcc <twi_readFrom+0x6>
    1fd4:	91 e0       	ldi	r25, 0x01	; 1
    1fd6:	90 93 9b 04 	sts	0x049B, r25	; 0x80049b <twi_state>
    1fda:	20 93 99 04 	sts	0x0499, r18	; 0x800499 <twi_sendStop>
    1fde:	2f ef       	ldi	r18, 0xFF	; 255
    1fe0:	20 93 2e 04 	sts	0x042E, r18	; 0x80042e <twi_error>
    1fe4:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <twi_masterBufferIndex>
    1fe8:	24 0f       	add	r18, r20
    1fea:	20 93 72 04 	sts	0x0472, r18	; 0x800472 <twi_masterBufferLength>
    1fee:	90 93 9a 04 	sts	0x049A, r25	; 0x80049a <twi_slarw>
    1ff2:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <twi_slarw>
    1ff6:	88 0f       	add	r24, r24
    1ff8:	89 2b       	or	r24, r25
    1ffa:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <twi_slarw>
    1ffe:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <twi_inRepStart>
    2002:	81 30       	cpi	r24, 0x01	; 1
    2004:	61 f4       	brne	.+24     	; 0x201e <twi_readFrom+0x58>
    2006:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <twi_inRepStart>
    200a:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <twi_slarw>
    200e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2012:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2016:	83 fd       	sbrc	r24, 3
    2018:	f8 cf       	rjmp	.-16     	; 0x200a <twi_readFrom+0x44>
    201a:	85 ec       	ldi	r24, 0xC5	; 197
    201c:	01 c0       	rjmp	.+2      	; 0x2020 <twi_readFrom+0x5a>
    201e:	85 ee       	ldi	r24, 0xE5	; 229
    2020:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2024:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <twi_state>
    2028:	81 30       	cpi	r24, 0x01	; 1
    202a:	e1 f3       	breq	.-8      	; 0x2024 <twi_readFrom+0x5e>
    202c:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <twi_masterBufferIndex>
    2030:	84 17       	cp	r24, r20
    2032:	10 f4       	brcc	.+4      	; 0x2038 <twi_readFrom+0x72>
    2034:	40 91 73 04 	lds	r20, 0x0473	; 0x800473 <twi_masterBufferIndex>
    2038:	a4 e7       	ldi	r26, 0x74	; 116
    203a:	b4 e0       	ldi	r27, 0x04	; 4
    203c:	96 2f       	mov	r25, r22
    203e:	fb 01       	movw	r30, r22
    2040:	8e 2f       	mov	r24, r30
    2042:	89 1b       	sub	r24, r25
    2044:	84 17       	cp	r24, r20
    2046:	18 f4       	brcc	.+6      	; 0x204e <twi_readFrom+0x88>
    2048:	8d 91       	ld	r24, X+
    204a:	81 93       	st	Z+, r24
    204c:	f9 cf       	rjmp	.-14     	; 0x2040 <twi_readFrom+0x7a>
    204e:	84 2f       	mov	r24, r20
    2050:	08 95       	ret
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	08 95       	ret

00002056 <twi_writeTo>:
    2056:	0f 93       	push	r16
    2058:	41 32       	cpi	r20, 0x21	; 33
    205a:	08 f0       	brcs	.+2      	; 0x205e <twi_writeTo+0x8>
    205c:	4a c0       	rjmp	.+148    	; 0x20f2 <twi_writeTo+0x9c>
    205e:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <twi_state>
    2062:	91 11       	cpse	r25, r1
    2064:	fc cf       	rjmp	.-8      	; 0x205e <twi_writeTo+0x8>
    2066:	32 e0       	ldi	r19, 0x02	; 2
    2068:	30 93 9b 04 	sts	0x049B, r19	; 0x80049b <twi_state>
    206c:	00 93 99 04 	sts	0x0499, r16	; 0x800499 <twi_sendStop>
    2070:	3f ef       	ldi	r19, 0xFF	; 255
    2072:	30 93 2e 04 	sts	0x042E, r19	; 0x80042e <twi_error>
    2076:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <twi_masterBufferIndex>
    207a:	40 93 72 04 	sts	0x0472, r20	; 0x800472 <twi_masterBufferLength>
    207e:	56 2f       	mov	r21, r22
    2080:	a4 e7       	ldi	r26, 0x74	; 116
    2082:	b4 e0       	ldi	r27, 0x04	; 4
    2084:	fb 01       	movw	r30, r22
    2086:	3e 2f       	mov	r19, r30
    2088:	35 1b       	sub	r19, r21
    208a:	34 17       	cp	r19, r20
    208c:	18 f4       	brcc	.+6      	; 0x2094 <twi_writeTo+0x3e>
    208e:	31 91       	ld	r19, Z+
    2090:	3d 93       	st	X+, r19
    2092:	f9 cf       	rjmp	.-14     	; 0x2086 <twi_writeTo+0x30>
    2094:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <twi_slarw>
    2098:	30 91 9a 04 	lds	r19, 0x049A	; 0x80049a <twi_slarw>
    209c:	88 0f       	add	r24, r24
    209e:	83 2b       	or	r24, r19
    20a0:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <twi_slarw>
    20a4:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <twi_inRepStart>
    20a8:	81 30       	cpi	r24, 0x01	; 1
    20aa:	61 f4       	brne	.+24     	; 0x20c4 <twi_writeTo+0x6e>
    20ac:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <twi_inRepStart>
    20b0:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <twi_slarw>
    20b4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    20b8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    20bc:	83 fd       	sbrc	r24, 3
    20be:	f8 cf       	rjmp	.-16     	; 0x20b0 <twi_writeTo+0x5a>
    20c0:	85 ec       	ldi	r24, 0xC5	; 197
    20c2:	01 c0       	rjmp	.+2      	; 0x20c6 <twi_writeTo+0x70>
    20c4:	85 ee       	ldi	r24, 0xE5	; 229
    20c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    20ca:	22 23       	and	r18, r18
    20cc:	21 f0       	breq	.+8      	; 0x20d6 <twi_writeTo+0x80>
    20ce:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <twi_state>
    20d2:	82 30       	cpi	r24, 0x02	; 2
    20d4:	d1 f3       	breq	.-12     	; 0x20ca <twi_writeTo+0x74>
    20d6:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <twi_error>
    20da:	8f 3f       	cpi	r24, 0xFF	; 255
    20dc:	79 f0       	breq	.+30     	; 0x20fc <twi_writeTo+0xa6>
    20de:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <twi_error>
    20e2:	80 32       	cpi	r24, 0x20	; 32
    20e4:	41 f0       	breq	.+16     	; 0x20f6 <twi_writeTo+0xa0>
    20e6:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <twi_error>
    20ea:	80 33       	cpi	r24, 0x30	; 48
    20ec:	31 f0       	breq	.+12     	; 0x20fa <twi_writeTo+0xa4>
    20ee:	94 e0       	ldi	r25, 0x04	; 4
    20f0:	05 c0       	rjmp	.+10     	; 0x20fc <twi_writeTo+0xa6>
    20f2:	91 e0       	ldi	r25, 0x01	; 1
    20f4:	03 c0       	rjmp	.+6      	; 0x20fc <twi_writeTo+0xa6>
    20f6:	92 e0       	ldi	r25, 0x02	; 2
    20f8:	01 c0       	rjmp	.+2      	; 0x20fc <twi_writeTo+0xa6>
    20fa:	93 e0       	ldi	r25, 0x03	; 3
    20fc:	89 2f       	mov	r24, r25
    20fe:	0f 91       	pop	r16
    2100:	08 95       	ret

00002102 <twi_transmit>:
    2102:	40 91 50 04 	lds	r20, 0x0450	; 0x800450 <twi_txBufferLength>
    2106:	26 2f       	mov	r18, r22
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	24 0f       	add	r18, r20
    210c:	31 1d       	adc	r19, r1
    210e:	21 32       	cpi	r18, 0x21	; 33
    2110:	31 05       	cpc	r19, r1
    2112:	dc f4       	brge	.+54     	; 0x214a <twi_transmit+0x48>
    2114:	20 91 9b 04 	lds	r18, 0x049B	; 0x80049b <twi_state>
    2118:	24 30       	cpi	r18, 0x04	; 4
    211a:	c9 f4       	brne	.+50     	; 0x214e <twi_transmit+0x4c>
    211c:	fc 01       	movw	r30, r24
    211e:	80 e0       	ldi	r24, 0x00	; 0
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	86 17       	cp	r24, r22
    2124:	58 f4       	brcc	.+22     	; 0x213c <twi_transmit+0x3a>
    2126:	30 91 50 04 	lds	r19, 0x0450	; 0x800450 <twi_txBufferLength>
    212a:	21 91       	ld	r18, Z+
    212c:	dc 01       	movw	r26, r24
    212e:	ae 5a       	subi	r26, 0xAE	; 174
    2130:	bb 4f       	sbci	r27, 0xFB	; 251
    2132:	a3 0f       	add	r26, r19
    2134:	b1 1d       	adc	r27, r1
    2136:	2c 93       	st	X, r18
    2138:	01 96       	adiw	r24, 0x01	; 1
    213a:	f3 cf       	rjmp	.-26     	; 0x2122 <twi_transmit+0x20>
    213c:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <twi_txBufferLength>
    2140:	68 0f       	add	r22, r24
    2142:	60 93 50 04 	sts	0x0450, r22	; 0x800450 <twi_txBufferLength>
    2146:	80 e0       	ldi	r24, 0x00	; 0
    2148:	08 95       	ret
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	08 95       	ret
    214e:	82 e0       	ldi	r24, 0x02	; 2
    2150:	08 95       	ret

00002152 <twi_attachSlaveRxEvent>:
    2152:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <twi_onSlaveReceive+0x1>
    2156:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <twi_onSlaveReceive>
    215a:	08 95       	ret

0000215c <twi_attachSlaveTxEvent>:
    215c:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <twi_onSlaveTransmit+0x1>
    2160:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <twi_onSlaveTransmit>
    2164:	08 95       	ret

00002166 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2166:	85 ed       	ldi	r24, 0xD5	; 213
    2168:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    216c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2170:	84 fd       	sbrc	r24, 4
    2172:	fc cf       	rjmp	.-8      	; 0x216c <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2174:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <twi_state>
    2178:	08 95       	ret

0000217a <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    217a:	85 ec       	ldi	r24, 0xC5	; 197
    217c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    2180:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <twi_state>
    2184:	08 95       	ret

00002186 <__vector_36>:
}

ISR(TWI_vect)
{
    2186:	1f 92       	push	r1
    2188:	0f 92       	push	r0
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	0f 92       	push	r0
    218e:	11 24       	eor	r1, r1
    2190:	2f 93       	push	r18
    2192:	3f 93       	push	r19
    2194:	4f 93       	push	r20
    2196:	5f 93       	push	r21
    2198:	6f 93       	push	r22
    219a:	7f 93       	push	r23
    219c:	8f 93       	push	r24
    219e:	9f 93       	push	r25
    21a0:	af 93       	push	r26
    21a2:	bf 93       	push	r27
    21a4:	ef 93       	push	r30
    21a6:	ff 93       	push	r31
  switch(TW_STATUS){
    21a8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    21ac:	88 7f       	andi	r24, 0xF8	; 248
    21ae:	80 36       	cpi	r24, 0x60	; 96
    21b0:	09 f4       	brne	.+2      	; 0x21b4 <__vector_36+0x2e>
    21b2:	9e c0       	rjmp	.+316    	; 0x22f0 <__vector_36+0x16a>
    21b4:	78 f5       	brcc	.+94     	; 0x2214 <__vector_36+0x8e>
    21b6:	88 32       	cpi	r24, 0x28	; 40
    21b8:	09 f4       	brne	.+2      	; 0x21bc <__vector_36+0x36>
    21ba:	5d c0       	rjmp	.+186    	; 0x2276 <__vector_36+0xf0>
    21bc:	90 f4       	brcc	.+36     	; 0x21e2 <__vector_36+0x5c>
    21be:	80 31       	cpi	r24, 0x10	; 16
    21c0:	09 f4       	brne	.+2      	; 0x21c4 <__vector_36+0x3e>
    21c2:	56 c0       	rjmp	.+172    	; 0x2270 <__vector_36+0xea>
    21c4:	38 f4       	brcc	.+14     	; 0x21d4 <__vector_36+0x4e>
    21c6:	88 23       	and	r24, r24
    21c8:	09 f4       	brne	.+2      	; 0x21cc <__vector_36+0x46>
    21ca:	f5 c0       	rjmp	.+490    	; 0x23b6 <__vector_36+0x230>
    21cc:	88 30       	cpi	r24, 0x08	; 8
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <__vector_36+0x4c>
    21d0:	4f c0       	rjmp	.+158    	; 0x2270 <__vector_36+0xea>
    21d2:	f5 c0       	rjmp	.+490    	; 0x23be <__vector_36+0x238>
    21d4:	88 31       	cpi	r24, 0x18	; 24
    21d6:	09 f4       	brne	.+2      	; 0x21da <__vector_36+0x54>
    21d8:	4e c0       	rjmp	.+156    	; 0x2276 <__vector_36+0xf0>
    21da:	80 32       	cpi	r24, 0x20	; 32
    21dc:	09 f4       	brne	.+2      	; 0x21e0 <__vector_36+0x5a>
    21de:	5f c0       	rjmp	.+190    	; 0x229e <__vector_36+0x118>
    21e0:	ee c0       	rjmp	.+476    	; 0x23be <__vector_36+0x238>
    21e2:	80 34       	cpi	r24, 0x40	; 64
    21e4:	09 f4       	brne	.+2      	; 0x21e8 <__vector_36+0x62>
    21e6:	6a c0       	rjmp	.+212    	; 0x22bc <__vector_36+0x136>
    21e8:	58 f4       	brcc	.+22     	; 0x2200 <__vector_36+0x7a>
    21ea:	80 33       	cpi	r24, 0x30	; 48
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <__vector_36+0x6a>
    21ee:	57 c0       	rjmp	.+174    	; 0x229e <__vector_36+0x118>
    21f0:	88 33       	cpi	r24, 0x38	; 56
    21f2:	09 f0       	breq	.+2      	; 0x21f6 <__vector_36+0x70>
    21f4:	e4 c0       	rjmp	.+456    	; 0x23be <__vector_36+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    21f6:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <twi_error>
      twi_releaseBus();
    21fa:	0e 94 bd 10 	call	0x217a	; 0x217a <twi_releaseBus>
      break;
    21fe:	df c0       	rjmp	.+446    	; 0x23be <__vector_36+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2200:	80 35       	cpi	r24, 0x50	; 80
    2202:	09 f4       	brne	.+2      	; 0x2206 <__vector_36+0x80>
    2204:	4f c0       	rjmp	.+158    	; 0x22a4 <__vector_36+0x11e>
    2206:	88 35       	cpi	r24, 0x58	; 88
    2208:	09 f4       	brne	.+2      	; 0x220c <__vector_36+0x86>
    220a:	5d c0       	rjmp	.+186    	; 0x22c6 <__vector_36+0x140>
    220c:	88 34       	cpi	r24, 0x48	; 72
    220e:	09 f0       	breq	.+2      	; 0x2212 <__vector_36+0x8c>
    2210:	d6 c0       	rjmp	.+428    	; 0x23be <__vector_36+0x238>
    2212:	d3 c0       	rjmp	.+422    	; 0x23ba <__vector_36+0x234>
    2214:	88 39       	cpi	r24, 0x98	; 152
    2216:	09 f4       	brne	.+2      	; 0x221a <__vector_36+0x94>
    2218:	c4 c0       	rjmp	.+392    	; 0x23a2 <__vector_36+0x21c>
    221a:	a8 f4       	brcc	.+42     	; 0x2246 <__vector_36+0xc0>
    221c:	88 37       	cpi	r24, 0x78	; 120
    221e:	09 f4       	brne	.+2      	; 0x2222 <__vector_36+0x9c>
    2220:	67 c0       	rjmp	.+206    	; 0x22f0 <__vector_36+0x16a>
    2222:	38 f4       	brcc	.+14     	; 0x2232 <__vector_36+0xac>
    2224:	88 36       	cpi	r24, 0x68	; 104
    2226:	09 f4       	brne	.+2      	; 0x222a <__vector_36+0xa4>
    2228:	63 c0       	rjmp	.+198    	; 0x22f0 <__vector_36+0x16a>
    222a:	80 37       	cpi	r24, 0x70	; 112
    222c:	09 f4       	brne	.+2      	; 0x2230 <__vector_36+0xaa>
    222e:	60 c0       	rjmp	.+192    	; 0x22f0 <__vector_36+0x16a>
    2230:	c6 c0       	rjmp	.+396    	; 0x23be <__vector_36+0x238>
    2232:	88 38       	cpi	r24, 0x88	; 136
    2234:	09 f4       	brne	.+2      	; 0x2238 <__vector_36+0xb2>
    2236:	b5 c0       	rjmp	.+362    	; 0x23a2 <__vector_36+0x21c>
    2238:	80 39       	cpi	r24, 0x90	; 144
    223a:	09 f4       	brne	.+2      	; 0x223e <__vector_36+0xb8>
    223c:	5f c0       	rjmp	.+190    	; 0x22fc <__vector_36+0x176>
    223e:	80 38       	cpi	r24, 0x80	; 128
    2240:	09 f0       	breq	.+2      	; 0x2244 <__vector_36+0xbe>
    2242:	bd c0       	rjmp	.+378    	; 0x23be <__vector_36+0x238>
    2244:	5b c0       	rjmp	.+182    	; 0x22fc <__vector_36+0x176>
    2246:	80 3b       	cpi	r24, 0xB0	; 176
    2248:	09 f4       	brne	.+2      	; 0x224c <__vector_36+0xc6>
    224a:	83 c0       	rjmp	.+262    	; 0x2352 <__vector_36+0x1cc>
    224c:	38 f4       	brcc	.+14     	; 0x225c <__vector_36+0xd6>
    224e:	80 3a       	cpi	r24, 0xA0	; 160
    2250:	09 f4       	brne	.+2      	; 0x2254 <__vector_36+0xce>
    2252:	66 c0       	rjmp	.+204    	; 0x2320 <__vector_36+0x19a>
    2254:	88 3a       	cpi	r24, 0xA8	; 168
    2256:	09 f4       	brne	.+2      	; 0x225a <__vector_36+0xd4>
    2258:	7c c0       	rjmp	.+248    	; 0x2352 <__vector_36+0x1cc>
    225a:	b1 c0       	rjmp	.+354    	; 0x23be <__vector_36+0x238>
    225c:	80 3c       	cpi	r24, 0xC0	; 192
    225e:	09 f4       	brne	.+2      	; 0x2262 <__vector_36+0xdc>
    2260:	a4 c0       	rjmp	.+328    	; 0x23aa <__vector_36+0x224>
    2262:	88 3c       	cpi	r24, 0xC8	; 200
    2264:	09 f4       	brne	.+2      	; 0x2268 <__vector_36+0xe2>
    2266:	a1 c0       	rjmp	.+322    	; 0x23aa <__vector_36+0x224>
    2268:	88 3b       	cpi	r24, 0xB8	; 184
    226a:	09 f4       	brne	.+2      	; 0x226e <__vector_36+0xe8>
    226c:	87 c0       	rjmp	.+270    	; 0x237c <__vector_36+0x1f6>
    226e:	a7 c0       	rjmp	.+334    	; 0x23be <__vector_36+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2270:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <twi_slarw>
    2274:	10 c0       	rjmp	.+32     	; 0x2296 <__vector_36+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2276:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <twi_masterBufferIndex>
    227a:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <twi_masterBufferLength>
    227e:	98 17       	cp	r25, r24
    2280:	70 f5       	brcc	.+92     	; 0x22de <__vector_36+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2282:	e0 91 73 04 	lds	r30, 0x0473	; 0x800473 <twi_masterBufferIndex>
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	8e 0f       	add	r24, r30
    228a:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <twi_masterBufferIndex>
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	ec 58       	subi	r30, 0x8C	; 140
    2292:	fb 4f       	sbci	r31, 0xFB	; 251
    2294:	80 81       	ld	r24, Z
    2296:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    229a:	85 ec       	ldi	r24, 0xC5	; 197
    229c:	83 c0       	rjmp	.+262    	; 0x23a4 <__vector_36+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    229e:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <twi_error>
    22a2:	8b c0       	rjmp	.+278    	; 0x23ba <__vector_36+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    22a4:	e0 91 73 04 	lds	r30, 0x0473	; 0x800473 <twi_masterBufferIndex>
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	8e 0f       	add	r24, r30
    22ac:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <twi_masterBufferIndex>
    22b0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	ec 58       	subi	r30, 0x8C	; 140
    22b8:	fb 4f       	sbci	r31, 0xFB	; 251
    22ba:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    22bc:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <twi_masterBufferIndex>
    22c0:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <twi_masterBufferLength>
    22c4:	6b c0       	rjmp	.+214    	; 0x239c <__vector_36+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    22c6:	e0 91 73 04 	lds	r30, 0x0473	; 0x800473 <twi_masterBufferIndex>
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	8e 0f       	add	r24, r30
    22ce:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <twi_masterBufferIndex>
    22d2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	ec 58       	subi	r30, 0x8C	; 140
    22da:	fb 4f       	sbci	r31, 0xFB	; 251
    22dc:	80 83       	st	Z, r24
	if (twi_sendStop)
    22de:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <twi_sendStop>
    22e2:	81 11       	cpse	r24, r1
    22e4:	6a c0       	rjmp	.+212    	; 0x23ba <__vector_36+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    22ec:	84 ea       	ldi	r24, 0xA4	; 164
    22ee:	5e c0       	rjmp	.+188    	; 0x23ac <__vector_36+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    22f0:	83 e0       	ldi	r24, 0x03	; 3
    22f2:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    22f6:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <twi_rxBufferIndex>
    22fa:	cf cf       	rjmp	.-98     	; 0x229a <__vector_36+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    22fc:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <twi_rxBufferIndex>
    2300:	80 32       	cpi	r24, 0x20	; 32
    2302:	08 f0       	brcs	.+2      	; 0x2306 <__vector_36+0x180>
    2304:	4e c0       	rjmp	.+156    	; 0x23a2 <__vector_36+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2306:	e0 91 2f 04 	lds	r30, 0x042F	; 0x80042f <twi_rxBufferIndex>
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	8e 0f       	add	r24, r30
    230e:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <twi_rxBufferIndex>
    2312:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	e0 5d       	subi	r30, 0xD0	; 208
    231a:	fb 4f       	sbci	r31, 0xFB	; 251
    231c:	80 83       	st	Z, r24
    231e:	bd cf       	rjmp	.-134    	; 0x229a <__vector_36+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2320:	0e 94 bd 10 	call	0x217a	; 0x217a <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2324:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <twi_rxBufferIndex>
    2328:	80 32       	cpi	r24, 0x20	; 32
    232a:	30 f4       	brcc	.+12     	; 0x2338 <__vector_36+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    232c:	e0 91 2f 04 	lds	r30, 0x042F	; 0x80042f <twi_rxBufferIndex>
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	e0 5d       	subi	r30, 0xD0	; 208
    2334:	fb 4f       	sbci	r31, 0xFB	; 251
    2336:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2338:	60 91 2f 04 	lds	r22, 0x042F	; 0x80042f <twi_rxBufferIndex>
    233c:	70 e0       	ldi	r23, 0x00	; 0
    233e:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <twi_onSlaveReceive>
    2342:	f0 91 95 04 	lds	r31, 0x0495	; 0x800495 <twi_onSlaveReceive+0x1>
    2346:	80 e3       	ldi	r24, 0x30	; 48
    2348:	94 e0       	ldi	r25, 0x04	; 4
    234a:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    234c:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <twi_rxBufferIndex>
      break;
    2350:	36 c0       	rjmp	.+108    	; 0x23be <__vector_36+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2352:	84 e0       	ldi	r24, 0x04	; 4
    2354:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2358:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    235c:	10 92 50 04 	sts	0x0450, r1	; 0x800450 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2360:	e0 91 96 04 	lds	r30, 0x0496	; 0x800496 <twi_onSlaveTransmit>
    2364:	f0 91 97 04 	lds	r31, 0x0497	; 0x800497 <twi_onSlaveTransmit+0x1>
    2368:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    236a:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <twi_txBufferLength>
    236e:	81 11       	cpse	r24, r1
    2370:	05 c0       	rjmp	.+10     	; 0x237c <__vector_36+0x1f6>
        twi_txBufferLength = 1;
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2378:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    237c:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <twi_txBufferIndex>
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	8e 0f       	add	r24, r30
    2384:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <twi_txBufferIndex>
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	ee 5a       	subi	r30, 0xAE	; 174
    238c:	fb 4f       	sbci	r31, 0xFB	; 251
    238e:	80 81       	ld	r24, Z
    2390:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2394:	90 91 51 04 	lds	r25, 0x0451	; 0x800451 <twi_txBufferIndex>
    2398:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <twi_txBufferLength>
    239c:	98 17       	cp	r25, r24
    239e:	08 f4       	brcc	.+2      	; 0x23a2 <__vector_36+0x21c>
    23a0:	7c cf       	rjmp	.-264    	; 0x229a <__vector_36+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    23a2:	85 e8       	ldi	r24, 0x85	; 133
    23a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    23a8:	0a c0       	rjmp	.+20     	; 0x23be <__vector_36+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    23aa:	85 ec       	ldi	r24, 0xC5	; 197
    23ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    23b0:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <twi_state>
      break;
    23b4:	04 c0       	rjmp	.+8      	; 0x23be <__vector_36+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    23b6:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <twi_error>
      twi_stop();
    23ba:	0e 94 b3 10 	call	0x2166	; 0x2166 <twi_stop>
      break;
  }
}
    23be:	ff 91       	pop	r31
    23c0:	ef 91       	pop	r30
    23c2:	bf 91       	pop	r27
    23c4:	af 91       	pop	r26
    23c6:	9f 91       	pop	r25
    23c8:	8f 91       	pop	r24
    23ca:	7f 91       	pop	r23
    23cc:	6f 91       	pop	r22
    23ce:	5f 91       	pop	r21
    23d0:	4f 91       	pop	r20
    23d2:	3f 91       	pop	r19
    23d4:	2f 91       	pop	r18
    23d6:	0f 90       	pop	r0
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	0f 90       	pop	r0
    23dc:	1f 90       	pop	r1
    23de:	18 95       	reti

000023e0 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    23e0:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <_ZN7TwoWire14rxBufferLengthE>
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	20 91 d1 04 	lds	r18, 0x04D1	; 0x8004d1 <_ZN7TwoWire13rxBufferIndexE>
    23ea:	82 1b       	sub	r24, r18
    23ec:	91 09       	sbc	r25, r1
    23ee:	08 95       	ret

000023f0 <_ZN7TwoWire4readEv>:
    23f0:	90 91 d1 04 	lds	r25, 0x04D1	; 0x8004d1 <_ZN7TwoWire13rxBufferIndexE>
    23f4:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <_ZN7TwoWire14rxBufferLengthE>
    23f8:	98 17       	cp	r25, r24
    23fa:	50 f4       	brcc	.+20     	; 0x2410 <_ZN7TwoWire4readEv+0x20>
    23fc:	e9 2f       	mov	r30, r25
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	ee 52       	subi	r30, 0x2E	; 46
    2402:	fb 4f       	sbci	r31, 0xFB	; 251
    2404:	20 81       	ld	r18, Z
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	9f 5f       	subi	r25, 0xFF	; 255
    240a:	90 93 d1 04 	sts	0x04D1, r25	; 0x8004d1 <_ZN7TwoWire13rxBufferIndexE>
    240e:	02 c0       	rjmp	.+4      	; 0x2414 <_ZN7TwoWire4readEv+0x24>
    2410:	2f ef       	ldi	r18, 0xFF	; 255
    2412:	3f ef       	ldi	r19, 0xFF	; 255
    2414:	c9 01       	movw	r24, r18
    2416:	08 95       	ret

00002418 <_ZN7TwoWire4peekEv>:
    2418:	e0 91 d1 04 	lds	r30, 0x04D1	; 0x8004d1 <_ZN7TwoWire13rxBufferIndexE>
    241c:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <_ZN7TwoWire14rxBufferLengthE>
    2420:	e8 17       	cp	r30, r24
    2422:	30 f4       	brcc	.+12     	; 0x2430 <_ZN7TwoWire4peekEv+0x18>
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	ee 52       	subi	r30, 0x2E	; 46
    2428:	fb 4f       	sbci	r31, 0xFB	; 251
    242a:	80 81       	ld	r24, Z
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	08 95       	ret
    2430:	8f ef       	ldi	r24, 0xFF	; 255
    2432:	9f ef       	ldi	r25, 0xFF	; 255
    2434:	08 95       	ret

00002436 <_ZN7TwoWire5flushEv>:
    2436:	08 95       	ret

00002438 <_ZN7TwoWire16onReceiveServiceEPhi>:
    2438:	cf 93       	push	r28
    243a:	df 93       	push	r29
    243c:	ec 01       	movw	r28, r24
    243e:	e0 91 a8 04 	lds	r30, 0x04A8	; 0x8004a8 <_ZN7TwoWire14user_onReceiveE>
    2442:	f0 91 a9 04 	lds	r31, 0x04A9	; 0x8004a9 <_ZN7TwoWire14user_onReceiveE+0x1>
    2446:	30 97       	sbiw	r30, 0x00	; 0
    2448:	f1 f0       	breq	.+60     	; 0x2486 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    244a:	90 91 d1 04 	lds	r25, 0x04D1	; 0x8004d1 <_ZN7TwoWire13rxBufferIndexE>
    244e:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <_ZN7TwoWire14rxBufferLengthE>
    2452:	98 17       	cp	r25, r24
    2454:	c0 f0       	brcs	.+48     	; 0x2486 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	29 2f       	mov	r18, r25
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	26 17       	cp	r18, r22
    245e:	37 07       	cpc	r19, r23
    2460:	54 f4       	brge	.+20     	; 0x2476 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2462:	de 01       	movw	r26, r28
    2464:	a2 0f       	add	r26, r18
    2466:	b3 1f       	adc	r27, r19
    2468:	4c 91       	ld	r20, X
    246a:	d9 01       	movw	r26, r18
    246c:	ae 52       	subi	r26, 0x2E	; 46
    246e:	bb 4f       	sbci	r27, 0xFB	; 251
    2470:	4c 93       	st	X, r20
    2472:	9f 5f       	subi	r25, 0xFF	; 255
    2474:	f1 cf       	rjmp	.-30     	; 0x2458 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2476:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <_ZN7TwoWire13rxBufferIndexE>
    247a:	60 93 d0 04 	sts	0x04D0, r22	; 0x8004d0 <_ZN7TwoWire14rxBufferLengthE>
    247e:	cb 01       	movw	r24, r22
    2480:	df 91       	pop	r29
    2482:	cf 91       	pop	r28
    2484:	09 94       	ijmp
    2486:	df 91       	pop	r29
    2488:	cf 91       	pop	r28
    248a:	08 95       	ret

0000248c <_ZN7TwoWire16onRequestServiceEv>:
    248c:	e0 91 aa 04 	lds	r30, 0x04AA	; 0x8004aa <_ZN7TwoWire14user_onRequestE>
    2490:	f0 91 ab 04 	lds	r31, 0x04AB	; 0x8004ab <_ZN7TwoWire14user_onRequestE+0x1>
    2494:	30 97       	sbiw	r30, 0x00	; 0
    2496:	29 f0       	breq	.+10     	; 0x24a2 <_ZN7TwoWire16onRequestServiceEv+0x16>
    2498:	10 92 ae 04 	sts	0x04AE, r1	; 0x8004ae <_ZN7TwoWire13txBufferIndexE>
    249c:	10 92 ad 04 	sts	0x04AD, r1	; 0x8004ad <_ZN7TwoWire14txBufferLengthE>
    24a0:	09 94       	ijmp
    24a2:	08 95       	ret

000024a4 <_ZN7TwoWire5writeEPKhj>:
    24a4:	cf 92       	push	r12
    24a6:	df 92       	push	r13
    24a8:	ef 92       	push	r14
    24aa:	ff 92       	push	r15
    24ac:	0f 93       	push	r16
    24ae:	1f 93       	push	r17
    24b0:	cf 93       	push	r28
    24b2:	df 93       	push	r29
    24b4:	7c 01       	movw	r14, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	8a 01       	movw	r16, r20
    24ba:	20 91 ac 04 	lds	r18, 0x04AC	; 0x8004ac <_ZN7TwoWire12transmittingE>
    24be:	22 23       	and	r18, r18
    24c0:	89 f0       	breq	.+34     	; 0x24e4 <_ZN7TwoWire5writeEPKhj+0x40>
    24c2:	eb 01       	movw	r28, r22
    24c4:	6b 01       	movw	r12, r22
    24c6:	c4 0e       	add	r12, r20
    24c8:	d5 1e       	adc	r13, r21
    24ca:	cc 15       	cp	r28, r12
    24cc:	dd 05       	cpc	r29, r13
    24ce:	69 f0       	breq	.+26     	; 0x24ea <_ZN7TwoWire5writeEPKhj+0x46>
    24d0:	69 91       	ld	r22, Y+
    24d2:	d7 01       	movw	r26, r14
    24d4:	ed 91       	ld	r30, X+
    24d6:	fc 91       	ld	r31, X
    24d8:	01 90       	ld	r0, Z+
    24da:	f0 81       	ld	r31, Z
    24dc:	e0 2d       	mov	r30, r0
    24de:	c7 01       	movw	r24, r14
    24e0:	09 95       	icall
    24e2:	f3 cf       	rjmp	.-26     	; 0x24ca <_ZN7TwoWire5writeEPKhj+0x26>
    24e4:	64 2f       	mov	r22, r20
    24e6:	0e 94 81 10 	call	0x2102	; 0x2102 <twi_transmit>
    24ea:	c8 01       	movw	r24, r16
    24ec:	df 91       	pop	r29
    24ee:	cf 91       	pop	r28
    24f0:	1f 91       	pop	r17
    24f2:	0f 91       	pop	r16
    24f4:	ff 90       	pop	r15
    24f6:	ef 90       	pop	r14
    24f8:	df 90       	pop	r13
    24fa:	cf 90       	pop	r12
    24fc:	08 95       	ret

000024fe <_ZN7TwoWire5writeEh>:
    24fe:	cf 93       	push	r28
    2500:	df 93       	push	r29
    2502:	1f 92       	push	r1
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
    2508:	69 83       	std	Y+1, r22	; 0x01
    250a:	20 91 ac 04 	lds	r18, 0x04AC	; 0x8004ac <_ZN7TwoWire12transmittingE>
    250e:	22 23       	and	r18, r18
    2510:	d1 f0       	breq	.+52     	; 0x2546 <_ZN7TwoWire5writeEh+0x48>
    2512:	20 91 ad 04 	lds	r18, 0x04AD	; 0x8004ad <_ZN7TwoWire14txBufferLengthE>
    2516:	20 32       	cpi	r18, 0x20	; 32
    2518:	40 f0       	brcs	.+16     	; 0x252a <_ZN7TwoWire5writeEh+0x2c>
    251a:	21 e0       	ldi	r18, 0x01	; 1
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	fc 01       	movw	r30, r24
    2520:	33 83       	std	Z+3, r19	; 0x03
    2522:	22 83       	std	Z+2, r18	; 0x02
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	15 c0       	rjmp	.+42     	; 0x2554 <_ZN7TwoWire5writeEh+0x56>
    252a:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <_ZN7TwoWire13txBufferIndexE>
    252e:	e8 2f       	mov	r30, r24
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	e1 55       	subi	r30, 0x51	; 81
    2534:	fb 4f       	sbci	r31, 0xFB	; 251
    2536:	99 81       	ldd	r25, Y+1	; 0x01
    2538:	90 83       	st	Z, r25
    253a:	8f 5f       	subi	r24, 0xFF	; 255
    253c:	80 93 ae 04 	sts	0x04AE, r24	; 0x8004ae <_ZN7TwoWire13txBufferIndexE>
    2540:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <_ZN7TwoWire14txBufferLengthE>
    2544:	05 c0       	rjmp	.+10     	; 0x2550 <_ZN7TwoWire5writeEh+0x52>
    2546:	61 e0       	ldi	r22, 0x01	; 1
    2548:	ce 01       	movw	r24, r28
    254a:	01 96       	adiw	r24, 0x01	; 1
    254c:	0e 94 81 10 	call	0x2102	; 0x2102 <twi_transmit>
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	0f 90       	pop	r0
    2556:	df 91       	pop	r29
    2558:	cf 91       	pop	r28
    255a:	08 95       	ret

0000255c <_ZN7TwoWireC1Ev>:
    255c:	fc 01       	movw	r30, r24
    255e:	13 82       	std	Z+3, r1	; 0x03
    2560:	12 82       	std	Z+2, r1	; 0x02
    2562:	88 ee       	ldi	r24, 0xE8	; 232
    2564:	93 e0       	ldi	r25, 0x03	; 3
    2566:	a0 e0       	ldi	r26, 0x00	; 0
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	84 83       	std	Z+4, r24	; 0x04
    256c:	95 83       	std	Z+5, r25	; 0x05
    256e:	a6 83       	std	Z+6, r26	; 0x06
    2570:	b7 83       	std	Z+7, r27	; 0x07
    2572:	8f eb       	ldi	r24, 0xBF	; 191
    2574:	92 e0       	ldi	r25, 0x02	; 2
    2576:	91 83       	std	Z+1, r25	; 0x01
    2578:	80 83       	st	Z, r24
    257a:	08 95       	ret

0000257c <_ZN7TwoWire5beginEv>:
    257c:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <_ZN7TwoWire13rxBufferIndexE>
    2580:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <_ZN7TwoWire14rxBufferLengthE>
    2584:	10 92 ae 04 	sts	0x04AE, r1	; 0x8004ae <_ZN7TwoWire13txBufferIndexE>
    2588:	10 92 ad 04 	sts	0x04AD, r1	; 0x8004ad <_ZN7TwoWire14txBufferLengthE>
    258c:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <twi_init>
    2590:	86 e4       	ldi	r24, 0x46	; 70
    2592:	92 e1       	ldi	r25, 0x12	; 18
    2594:	0e 94 ae 10 	call	0x215c	; 0x215c <twi_attachSlaveTxEvent>
    2598:	8c e1       	ldi	r24, 0x1C	; 28
    259a:	92 e1       	ldi	r25, 0x12	; 18
    259c:	0c 94 a9 10 	jmp	0x2152	; 0x2152 <twi_attachSlaveRxEvent>

000025a0 <_ZN7TwoWire17beginTransmissionEh>:
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <_ZN7TwoWire12transmittingE>
    25a6:	60 93 cf 04 	sts	0x04CF, r22	; 0x8004cf <_ZN7TwoWire9txAddressE>
    25aa:	10 92 ae 04 	sts	0x04AE, r1	; 0x8004ae <_ZN7TwoWire13txBufferIndexE>
    25ae:	10 92 ad 04 	sts	0x04AD, r1	; 0x8004ad <_ZN7TwoWire14txBufferLengthE>
    25b2:	08 95       	ret

000025b4 <_ZN7TwoWire15endTransmissionEh>:
    25b4:	0f 93       	push	r16
    25b6:	06 2f       	mov	r16, r22
    25b8:	21 e0       	ldi	r18, 0x01	; 1
    25ba:	40 91 ad 04 	lds	r20, 0x04AD	; 0x8004ad <_ZN7TwoWire14txBufferLengthE>
    25be:	6f ea       	ldi	r22, 0xAF	; 175
    25c0:	74 e0       	ldi	r23, 0x04	; 4
    25c2:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <_ZN7TwoWire9txAddressE>
    25c6:	0e 94 2b 10 	call	0x2056	; 0x2056 <twi_writeTo>
    25ca:	10 92 ae 04 	sts	0x04AE, r1	; 0x8004ae <_ZN7TwoWire13txBufferIndexE>
    25ce:	10 92 ad 04 	sts	0x04AD, r1	; 0x8004ad <_ZN7TwoWire14txBufferLengthE>
    25d2:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <_ZN7TwoWire12transmittingE>
    25d6:	0f 91       	pop	r16
    25d8:	08 95       	ret

000025da <_ZN7TwoWire11requestFromEhhmhh>:
    25da:	4f 92       	push	r4
    25dc:	5f 92       	push	r5
    25de:	6f 92       	push	r6
    25e0:	7f 92       	push	r7
    25e2:	af 92       	push	r10
    25e4:	bf 92       	push	r11
    25e6:	cf 92       	push	r12
    25e8:	ef 92       	push	r14
    25ea:	ff 92       	push	r15
    25ec:	0f 93       	push	r16
    25ee:	1f 93       	push	r17
    25f0:	cf 93       	push	r28
    25f2:	df 93       	push	r29
    25f4:	5c 01       	movw	r10, r24
    25f6:	f6 2e       	mov	r15, r22
    25f8:	d4 2f       	mov	r29, r20
    25fa:	28 01       	movw	r4, r16
    25fc:	39 01       	movw	r6, r18
    25fe:	ee 20       	and	r14, r14
    2600:	21 f1       	breq	.+72     	; 0x264a <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2602:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN7TwoWire17beginTransmissionEh>
    2606:	ce 2d       	mov	r28, r14
    2608:	c4 30       	cpi	r28, 0x04	; 4
    260a:	08 f0       	brcs	.+2      	; 0x260e <_ZN7TwoWire11requestFromEhhmhh+0x34>
    260c:	c3 e0       	ldi	r28, 0x03	; 3
    260e:	c1 50       	subi	r28, 0x01	; 1
    2610:	c0 f0       	brcs	.+48     	; 0x2642 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2612:	28 e0       	ldi	r18, 0x08	; 8
    2614:	c2 9f       	mul	r28, r18
    2616:	c0 01       	movw	r24, r0
    2618:	11 24       	eor	r1, r1
    261a:	a3 01       	movw	r20, r6
    261c:	92 01       	movw	r18, r4
    261e:	04 c0       	rjmp	.+8      	; 0x2628 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    2620:	56 95       	lsr	r21
    2622:	47 95       	ror	r20
    2624:	37 95       	ror	r19
    2626:	27 95       	ror	r18
    2628:	8a 95       	dec	r24
    262a:	d2 f7       	brpl	.-12     	; 0x2620 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    262c:	ca 01       	movw	r24, r20
    262e:	b9 01       	movw	r22, r18
    2630:	d5 01       	movw	r26, r10
    2632:	ed 91       	ld	r30, X+
    2634:	fc 91       	ld	r31, X
    2636:	01 90       	ld	r0, Z+
    2638:	f0 81       	ld	r31, Z
    263a:	e0 2d       	mov	r30, r0
    263c:	c5 01       	movw	r24, r10
    263e:	09 95       	icall
    2640:	e6 cf       	rjmp	.-52     	; 0x260e <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2642:	60 e0       	ldi	r22, 0x00	; 0
    2644:	c5 01       	movw	r24, r10
    2646:	0e 94 da 12 	call	0x25b4	; 0x25b4 <_ZN7TwoWire15endTransmissionEh>
    264a:	4d 2f       	mov	r20, r29
    264c:	d1 32       	cpi	r29, 0x21	; 33
    264e:	08 f0       	brcs	.+2      	; 0x2652 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2650:	40 e2       	ldi	r20, 0x20	; 32
    2652:	2c 2d       	mov	r18, r12
    2654:	62 ed       	ldi	r22, 0xD2	; 210
    2656:	74 e0       	ldi	r23, 0x04	; 4
    2658:	8f 2d       	mov	r24, r15
    265a:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <twi_readFrom>
    265e:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <_ZN7TwoWire13rxBufferIndexE>
    2662:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <_ZN7TwoWire14rxBufferLengthE>
    2666:	df 91       	pop	r29
    2668:	cf 91       	pop	r28
    266a:	1f 91       	pop	r17
    266c:	0f 91       	pop	r16
    266e:	ff 90       	pop	r15
    2670:	ef 90       	pop	r14
    2672:	cf 90       	pop	r12
    2674:	bf 90       	pop	r11
    2676:	af 90       	pop	r10
    2678:	7f 90       	pop	r7
    267a:	6f 90       	pop	r6
    267c:	5f 90       	pop	r5
    267e:	4f 90       	pop	r4
    2680:	08 95       	ret

00002682 <_ZN7TwoWire11requestFromEhhh>:
    2682:	cf 92       	push	r12
    2684:	ef 92       	push	r14
    2686:	0f 93       	push	r16
    2688:	1f 93       	push	r17
    268a:	c2 2e       	mov	r12, r18
    268c:	e1 2c       	mov	r14, r1
    268e:	00 e0       	ldi	r16, 0x00	; 0
    2690:	10 e0       	ldi	r17, 0x00	; 0
    2692:	98 01       	movw	r18, r16
    2694:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7TwoWire11requestFromEhhmhh>
    2698:	1f 91       	pop	r17
    269a:	0f 91       	pop	r16
    269c:	ef 90       	pop	r14
    269e:	cf 90       	pop	r12
    26a0:	08 95       	ret

000026a2 <_ZN7TwoWire11requestFromEii>:
    26a2:	21 e0       	ldi	r18, 0x01	; 1
    26a4:	0c 94 41 13 	jmp	0x2682	; 0x2682 <_ZN7TwoWire11requestFromEhhh>

000026a8 <_ZN7TwoWire15endTransmissionEv>:
    26a8:	61 e0       	ldi	r22, 0x01	; 1
    26aa:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <_ZN7TwoWire15endTransmissionEh>

000026ae <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    26ae:	8c e9       	ldi	r24, 0x9C	; 156
    26b0:	94 e0       	ldi	r25, 0x04	; 4
    26b2:	0c 94 ae 12 	jmp	0x255c	; 0x255c <_ZN7TwoWireC1Ev>

000026b6 <__subsf3>:
    26b6:	50 58       	subi	r21, 0x80	; 128

000026b8 <__addsf3>:
    26b8:	bb 27       	eor	r27, r27
    26ba:	aa 27       	eor	r26, r26
    26bc:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__addsf3x>
    26c0:	0c 94 45 14 	jmp	0x288a	; 0x288a <__fp_round>
    26c4:	0e 94 37 14 	call	0x286e	; 0x286e <__fp_pscA>
    26c8:	38 f0       	brcs	.+14     	; 0x26d8 <__addsf3+0x20>
    26ca:	0e 94 3e 14 	call	0x287c	; 0x287c <__fp_pscB>
    26ce:	20 f0       	brcs	.+8      	; 0x26d8 <__addsf3+0x20>
    26d0:	39 f4       	brne	.+14     	; 0x26e0 <__addsf3+0x28>
    26d2:	9f 3f       	cpi	r25, 0xFF	; 255
    26d4:	19 f4       	brne	.+6      	; 0x26dc <__addsf3+0x24>
    26d6:	26 f4       	brtc	.+8      	; 0x26e0 <__addsf3+0x28>
    26d8:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__fp_nan>
    26dc:	0e f4       	brtc	.+2      	; 0x26e0 <__addsf3+0x28>
    26de:	e0 95       	com	r30
    26e0:	e7 fb       	bst	r30, 7
    26e2:	0c 94 2e 14 	jmp	0x285c	; 0x285c <__fp_inf>

000026e6 <__addsf3x>:
    26e6:	e9 2f       	mov	r30, r25
    26e8:	0e 94 56 14 	call	0x28ac	; 0x28ac <__fp_split3>
    26ec:	58 f3       	brcs	.-42     	; 0x26c4 <__addsf3+0xc>
    26ee:	ba 17       	cp	r27, r26
    26f0:	62 07       	cpc	r22, r18
    26f2:	73 07       	cpc	r23, r19
    26f4:	84 07       	cpc	r24, r20
    26f6:	95 07       	cpc	r25, r21
    26f8:	20 f0       	brcs	.+8      	; 0x2702 <__addsf3x+0x1c>
    26fa:	79 f4       	brne	.+30     	; 0x271a <__addsf3x+0x34>
    26fc:	a6 f5       	brtc	.+104    	; 0x2766 <__addsf3x+0x80>
    26fe:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__fp_zero>
    2702:	0e f4       	brtc	.+2      	; 0x2706 <__addsf3x+0x20>
    2704:	e0 95       	com	r30
    2706:	0b 2e       	mov	r0, r27
    2708:	ba 2f       	mov	r27, r26
    270a:	a0 2d       	mov	r26, r0
    270c:	0b 01       	movw	r0, r22
    270e:	b9 01       	movw	r22, r18
    2710:	90 01       	movw	r18, r0
    2712:	0c 01       	movw	r0, r24
    2714:	ca 01       	movw	r24, r20
    2716:	a0 01       	movw	r20, r0
    2718:	11 24       	eor	r1, r1
    271a:	ff 27       	eor	r31, r31
    271c:	59 1b       	sub	r21, r25
    271e:	99 f0       	breq	.+38     	; 0x2746 <__addsf3x+0x60>
    2720:	59 3f       	cpi	r21, 0xF9	; 249
    2722:	50 f4       	brcc	.+20     	; 0x2738 <__addsf3x+0x52>
    2724:	50 3e       	cpi	r21, 0xE0	; 224
    2726:	68 f1       	brcs	.+90     	; 0x2782 <__addsf3x+0x9c>
    2728:	1a 16       	cp	r1, r26
    272a:	f0 40       	sbci	r31, 0x00	; 0
    272c:	a2 2f       	mov	r26, r18
    272e:	23 2f       	mov	r18, r19
    2730:	34 2f       	mov	r19, r20
    2732:	44 27       	eor	r20, r20
    2734:	58 5f       	subi	r21, 0xF8	; 248
    2736:	f3 cf       	rjmp	.-26     	; 0x271e <__addsf3x+0x38>
    2738:	46 95       	lsr	r20
    273a:	37 95       	ror	r19
    273c:	27 95       	ror	r18
    273e:	a7 95       	ror	r26
    2740:	f0 40       	sbci	r31, 0x00	; 0
    2742:	53 95       	inc	r21
    2744:	c9 f7       	brne	.-14     	; 0x2738 <__addsf3x+0x52>
    2746:	7e f4       	brtc	.+30     	; 0x2766 <__addsf3x+0x80>
    2748:	1f 16       	cp	r1, r31
    274a:	ba 0b       	sbc	r27, r26
    274c:	62 0b       	sbc	r22, r18
    274e:	73 0b       	sbc	r23, r19
    2750:	84 0b       	sbc	r24, r20
    2752:	ba f0       	brmi	.+46     	; 0x2782 <__addsf3x+0x9c>
    2754:	91 50       	subi	r25, 0x01	; 1
    2756:	a1 f0       	breq	.+40     	; 0x2780 <__addsf3x+0x9a>
    2758:	ff 0f       	add	r31, r31
    275a:	bb 1f       	adc	r27, r27
    275c:	66 1f       	adc	r22, r22
    275e:	77 1f       	adc	r23, r23
    2760:	88 1f       	adc	r24, r24
    2762:	c2 f7       	brpl	.-16     	; 0x2754 <__addsf3x+0x6e>
    2764:	0e c0       	rjmp	.+28     	; 0x2782 <__addsf3x+0x9c>
    2766:	ba 0f       	add	r27, r26
    2768:	62 1f       	adc	r22, r18
    276a:	73 1f       	adc	r23, r19
    276c:	84 1f       	adc	r24, r20
    276e:	48 f4       	brcc	.+18     	; 0x2782 <__addsf3x+0x9c>
    2770:	87 95       	ror	r24
    2772:	77 95       	ror	r23
    2774:	67 95       	ror	r22
    2776:	b7 95       	ror	r27
    2778:	f7 95       	ror	r31
    277a:	9e 3f       	cpi	r25, 0xFE	; 254
    277c:	08 f0       	brcs	.+2      	; 0x2780 <__addsf3x+0x9a>
    277e:	b0 cf       	rjmp	.-160    	; 0x26e0 <__addsf3+0x28>
    2780:	93 95       	inc	r25
    2782:	88 0f       	add	r24, r24
    2784:	08 f0       	brcs	.+2      	; 0x2788 <__addsf3x+0xa2>
    2786:	99 27       	eor	r25, r25
    2788:	ee 0f       	add	r30, r30
    278a:	97 95       	ror	r25
    278c:	87 95       	ror	r24
    278e:	08 95       	ret

00002790 <__cmpsf2>:
    2790:	0e 94 0a 14 	call	0x2814	; 0x2814 <__fp_cmp>
    2794:	08 f4       	brcc	.+2      	; 0x2798 <__cmpsf2+0x8>
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	08 95       	ret

0000279a <__floatunsisf>:
    279a:	e8 94       	clt
    279c:	09 c0       	rjmp	.+18     	; 0x27b0 <__floatsisf+0x12>

0000279e <__floatsisf>:
    279e:	97 fb       	bst	r25, 7
    27a0:	3e f4       	brtc	.+14     	; 0x27b0 <__floatsisf+0x12>
    27a2:	90 95       	com	r25
    27a4:	80 95       	com	r24
    27a6:	70 95       	com	r23
    27a8:	61 95       	neg	r22
    27aa:	7f 4f       	sbci	r23, 0xFF	; 255
    27ac:	8f 4f       	sbci	r24, 0xFF	; 255
    27ae:	9f 4f       	sbci	r25, 0xFF	; 255
    27b0:	99 23       	and	r25, r25
    27b2:	a9 f0       	breq	.+42     	; 0x27de <__floatsisf+0x40>
    27b4:	f9 2f       	mov	r31, r25
    27b6:	96 e9       	ldi	r25, 0x96	; 150
    27b8:	bb 27       	eor	r27, r27
    27ba:	93 95       	inc	r25
    27bc:	f6 95       	lsr	r31
    27be:	87 95       	ror	r24
    27c0:	77 95       	ror	r23
    27c2:	67 95       	ror	r22
    27c4:	b7 95       	ror	r27
    27c6:	f1 11       	cpse	r31, r1
    27c8:	f8 cf       	rjmp	.-16     	; 0x27ba <__floatsisf+0x1c>
    27ca:	fa f4       	brpl	.+62     	; 0x280a <__floatsisf+0x6c>
    27cc:	bb 0f       	add	r27, r27
    27ce:	11 f4       	brne	.+4      	; 0x27d4 <__floatsisf+0x36>
    27d0:	60 ff       	sbrs	r22, 0
    27d2:	1b c0       	rjmp	.+54     	; 0x280a <__floatsisf+0x6c>
    27d4:	6f 5f       	subi	r22, 0xFF	; 255
    27d6:	7f 4f       	sbci	r23, 0xFF	; 255
    27d8:	8f 4f       	sbci	r24, 0xFF	; 255
    27da:	9f 4f       	sbci	r25, 0xFF	; 255
    27dc:	16 c0       	rjmp	.+44     	; 0x280a <__floatsisf+0x6c>
    27de:	88 23       	and	r24, r24
    27e0:	11 f0       	breq	.+4      	; 0x27e6 <__floatsisf+0x48>
    27e2:	96 e9       	ldi	r25, 0x96	; 150
    27e4:	11 c0       	rjmp	.+34     	; 0x2808 <__floatsisf+0x6a>
    27e6:	77 23       	and	r23, r23
    27e8:	21 f0       	breq	.+8      	; 0x27f2 <__floatsisf+0x54>
    27ea:	9e e8       	ldi	r25, 0x8E	; 142
    27ec:	87 2f       	mov	r24, r23
    27ee:	76 2f       	mov	r23, r22
    27f0:	05 c0       	rjmp	.+10     	; 0x27fc <__floatsisf+0x5e>
    27f2:	66 23       	and	r22, r22
    27f4:	71 f0       	breq	.+28     	; 0x2812 <__floatsisf+0x74>
    27f6:	96 e8       	ldi	r25, 0x86	; 134
    27f8:	86 2f       	mov	r24, r22
    27fa:	70 e0       	ldi	r23, 0x00	; 0
    27fc:	60 e0       	ldi	r22, 0x00	; 0
    27fe:	2a f0       	brmi	.+10     	; 0x280a <__floatsisf+0x6c>
    2800:	9a 95       	dec	r25
    2802:	66 0f       	add	r22, r22
    2804:	77 1f       	adc	r23, r23
    2806:	88 1f       	adc	r24, r24
    2808:	da f7       	brpl	.-10     	; 0x2800 <__floatsisf+0x62>
    280a:	88 0f       	add	r24, r24
    280c:	96 95       	lsr	r25
    280e:	87 95       	ror	r24
    2810:	97 f9       	bld	r25, 7
    2812:	08 95       	ret

00002814 <__fp_cmp>:
    2814:	99 0f       	add	r25, r25
    2816:	00 08       	sbc	r0, r0
    2818:	55 0f       	add	r21, r21
    281a:	aa 0b       	sbc	r26, r26
    281c:	e0 e8       	ldi	r30, 0x80	; 128
    281e:	fe ef       	ldi	r31, 0xFE	; 254
    2820:	16 16       	cp	r1, r22
    2822:	17 06       	cpc	r1, r23
    2824:	e8 07       	cpc	r30, r24
    2826:	f9 07       	cpc	r31, r25
    2828:	c0 f0       	brcs	.+48     	; 0x285a <__fp_cmp+0x46>
    282a:	12 16       	cp	r1, r18
    282c:	13 06       	cpc	r1, r19
    282e:	e4 07       	cpc	r30, r20
    2830:	f5 07       	cpc	r31, r21
    2832:	98 f0       	brcs	.+38     	; 0x285a <__fp_cmp+0x46>
    2834:	62 1b       	sub	r22, r18
    2836:	73 0b       	sbc	r23, r19
    2838:	84 0b       	sbc	r24, r20
    283a:	95 0b       	sbc	r25, r21
    283c:	39 f4       	brne	.+14     	; 0x284c <__fp_cmp+0x38>
    283e:	0a 26       	eor	r0, r26
    2840:	61 f0       	breq	.+24     	; 0x285a <__fp_cmp+0x46>
    2842:	23 2b       	or	r18, r19
    2844:	24 2b       	or	r18, r20
    2846:	25 2b       	or	r18, r21
    2848:	21 f4       	brne	.+8      	; 0x2852 <__fp_cmp+0x3e>
    284a:	08 95       	ret
    284c:	0a 26       	eor	r0, r26
    284e:	09 f4       	brne	.+2      	; 0x2852 <__fp_cmp+0x3e>
    2850:	a1 40       	sbci	r26, 0x01	; 1
    2852:	a6 95       	lsr	r26
    2854:	8f ef       	ldi	r24, 0xFF	; 255
    2856:	81 1d       	adc	r24, r1
    2858:	81 1d       	adc	r24, r1
    285a:	08 95       	ret

0000285c <__fp_inf>:
    285c:	97 f9       	bld	r25, 7
    285e:	9f 67       	ori	r25, 0x7F	; 127
    2860:	80 e8       	ldi	r24, 0x80	; 128
    2862:	70 e0       	ldi	r23, 0x00	; 0
    2864:	60 e0       	ldi	r22, 0x00	; 0
    2866:	08 95       	ret

00002868 <__fp_nan>:
    2868:	9f ef       	ldi	r25, 0xFF	; 255
    286a:	80 ec       	ldi	r24, 0xC0	; 192
    286c:	08 95       	ret

0000286e <__fp_pscA>:
    286e:	00 24       	eor	r0, r0
    2870:	0a 94       	dec	r0
    2872:	16 16       	cp	r1, r22
    2874:	17 06       	cpc	r1, r23
    2876:	18 06       	cpc	r1, r24
    2878:	09 06       	cpc	r0, r25
    287a:	08 95       	ret

0000287c <__fp_pscB>:
    287c:	00 24       	eor	r0, r0
    287e:	0a 94       	dec	r0
    2880:	12 16       	cp	r1, r18
    2882:	13 06       	cpc	r1, r19
    2884:	14 06       	cpc	r1, r20
    2886:	05 06       	cpc	r0, r21
    2888:	08 95       	ret

0000288a <__fp_round>:
    288a:	09 2e       	mov	r0, r25
    288c:	03 94       	inc	r0
    288e:	00 0c       	add	r0, r0
    2890:	11 f4       	brne	.+4      	; 0x2896 <__fp_round+0xc>
    2892:	88 23       	and	r24, r24
    2894:	52 f0       	brmi	.+20     	; 0x28aa <__fp_round+0x20>
    2896:	bb 0f       	add	r27, r27
    2898:	40 f4       	brcc	.+16     	; 0x28aa <__fp_round+0x20>
    289a:	bf 2b       	or	r27, r31
    289c:	11 f4       	brne	.+4      	; 0x28a2 <__fp_round+0x18>
    289e:	60 ff       	sbrs	r22, 0
    28a0:	04 c0       	rjmp	.+8      	; 0x28aa <__fp_round+0x20>
    28a2:	6f 5f       	subi	r22, 0xFF	; 255
    28a4:	7f 4f       	sbci	r23, 0xFF	; 255
    28a6:	8f 4f       	sbci	r24, 0xFF	; 255
    28a8:	9f 4f       	sbci	r25, 0xFF	; 255
    28aa:	08 95       	ret

000028ac <__fp_split3>:
    28ac:	57 fd       	sbrc	r21, 7
    28ae:	90 58       	subi	r25, 0x80	; 128
    28b0:	44 0f       	add	r20, r20
    28b2:	55 1f       	adc	r21, r21
    28b4:	59 f0       	breq	.+22     	; 0x28cc <__fp_splitA+0x10>
    28b6:	5f 3f       	cpi	r21, 0xFF	; 255
    28b8:	71 f0       	breq	.+28     	; 0x28d6 <__fp_splitA+0x1a>
    28ba:	47 95       	ror	r20

000028bc <__fp_splitA>:
    28bc:	88 0f       	add	r24, r24
    28be:	97 fb       	bst	r25, 7
    28c0:	99 1f       	adc	r25, r25
    28c2:	61 f0       	breq	.+24     	; 0x28dc <__fp_splitA+0x20>
    28c4:	9f 3f       	cpi	r25, 0xFF	; 255
    28c6:	79 f0       	breq	.+30     	; 0x28e6 <__fp_splitA+0x2a>
    28c8:	87 95       	ror	r24
    28ca:	08 95       	ret
    28cc:	12 16       	cp	r1, r18
    28ce:	13 06       	cpc	r1, r19
    28d0:	14 06       	cpc	r1, r20
    28d2:	55 1f       	adc	r21, r21
    28d4:	f2 cf       	rjmp	.-28     	; 0x28ba <__fp_split3+0xe>
    28d6:	46 95       	lsr	r20
    28d8:	f1 df       	rcall	.-30     	; 0x28bc <__fp_splitA>
    28da:	08 c0       	rjmp	.+16     	; 0x28ec <__fp_splitA+0x30>
    28dc:	16 16       	cp	r1, r22
    28de:	17 06       	cpc	r1, r23
    28e0:	18 06       	cpc	r1, r24
    28e2:	99 1f       	adc	r25, r25
    28e4:	f1 cf       	rjmp	.-30     	; 0x28c8 <__fp_splitA+0xc>
    28e6:	86 95       	lsr	r24
    28e8:	71 05       	cpc	r23, r1
    28ea:	61 05       	cpc	r22, r1
    28ec:	08 94       	sec
    28ee:	08 95       	ret

000028f0 <__fp_zero>:
    28f0:	e8 94       	clt

000028f2 <__fp_szero>:
    28f2:	bb 27       	eor	r27, r27
    28f4:	66 27       	eor	r22, r22
    28f6:	77 27       	eor	r23, r23
    28f8:	cb 01       	movw	r24, r22
    28fa:	97 f9       	bld	r25, 7
    28fc:	08 95       	ret

000028fe <__mulsf3>:
    28fe:	0e 94 92 14 	call	0x2924	; 0x2924 <__mulsf3x>
    2902:	0c 94 45 14 	jmp	0x288a	; 0x288a <__fp_round>
    2906:	0e 94 37 14 	call	0x286e	; 0x286e <__fp_pscA>
    290a:	38 f0       	brcs	.+14     	; 0x291a <__mulsf3+0x1c>
    290c:	0e 94 3e 14 	call	0x287c	; 0x287c <__fp_pscB>
    2910:	20 f0       	brcs	.+8      	; 0x291a <__mulsf3+0x1c>
    2912:	95 23       	and	r25, r21
    2914:	11 f0       	breq	.+4      	; 0x291a <__mulsf3+0x1c>
    2916:	0c 94 2e 14 	jmp	0x285c	; 0x285c <__fp_inf>
    291a:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__fp_nan>
    291e:	11 24       	eor	r1, r1
    2920:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <__fp_szero>

00002924 <__mulsf3x>:
    2924:	0e 94 56 14 	call	0x28ac	; 0x28ac <__fp_split3>
    2928:	70 f3       	brcs	.-36     	; 0x2906 <__mulsf3+0x8>

0000292a <__mulsf3_pse>:
    292a:	95 9f       	mul	r25, r21
    292c:	c1 f3       	breq	.-16     	; 0x291e <__mulsf3+0x20>
    292e:	95 0f       	add	r25, r21
    2930:	50 e0       	ldi	r21, 0x00	; 0
    2932:	55 1f       	adc	r21, r21
    2934:	62 9f       	mul	r22, r18
    2936:	f0 01       	movw	r30, r0
    2938:	72 9f       	mul	r23, r18
    293a:	bb 27       	eor	r27, r27
    293c:	f0 0d       	add	r31, r0
    293e:	b1 1d       	adc	r27, r1
    2940:	63 9f       	mul	r22, r19
    2942:	aa 27       	eor	r26, r26
    2944:	f0 0d       	add	r31, r0
    2946:	b1 1d       	adc	r27, r1
    2948:	aa 1f       	adc	r26, r26
    294a:	64 9f       	mul	r22, r20
    294c:	66 27       	eor	r22, r22
    294e:	b0 0d       	add	r27, r0
    2950:	a1 1d       	adc	r26, r1
    2952:	66 1f       	adc	r22, r22
    2954:	82 9f       	mul	r24, r18
    2956:	22 27       	eor	r18, r18
    2958:	b0 0d       	add	r27, r0
    295a:	a1 1d       	adc	r26, r1
    295c:	62 1f       	adc	r22, r18
    295e:	73 9f       	mul	r23, r19
    2960:	b0 0d       	add	r27, r0
    2962:	a1 1d       	adc	r26, r1
    2964:	62 1f       	adc	r22, r18
    2966:	83 9f       	mul	r24, r19
    2968:	a0 0d       	add	r26, r0
    296a:	61 1d       	adc	r22, r1
    296c:	22 1f       	adc	r18, r18
    296e:	74 9f       	mul	r23, r20
    2970:	33 27       	eor	r19, r19
    2972:	a0 0d       	add	r26, r0
    2974:	61 1d       	adc	r22, r1
    2976:	23 1f       	adc	r18, r19
    2978:	84 9f       	mul	r24, r20
    297a:	60 0d       	add	r22, r0
    297c:	21 1d       	adc	r18, r1
    297e:	82 2f       	mov	r24, r18
    2980:	76 2f       	mov	r23, r22
    2982:	6a 2f       	mov	r22, r26
    2984:	11 24       	eor	r1, r1
    2986:	9f 57       	subi	r25, 0x7F	; 127
    2988:	50 40       	sbci	r21, 0x00	; 0
    298a:	9a f0       	brmi	.+38     	; 0x29b2 <__mulsf3_pse+0x88>
    298c:	f1 f0       	breq	.+60     	; 0x29ca <__mulsf3_pse+0xa0>
    298e:	88 23       	and	r24, r24
    2990:	4a f0       	brmi	.+18     	; 0x29a4 <__mulsf3_pse+0x7a>
    2992:	ee 0f       	add	r30, r30
    2994:	ff 1f       	adc	r31, r31
    2996:	bb 1f       	adc	r27, r27
    2998:	66 1f       	adc	r22, r22
    299a:	77 1f       	adc	r23, r23
    299c:	88 1f       	adc	r24, r24
    299e:	91 50       	subi	r25, 0x01	; 1
    29a0:	50 40       	sbci	r21, 0x00	; 0
    29a2:	a9 f7       	brne	.-22     	; 0x298e <__mulsf3_pse+0x64>
    29a4:	9e 3f       	cpi	r25, 0xFE	; 254
    29a6:	51 05       	cpc	r21, r1
    29a8:	80 f0       	brcs	.+32     	; 0x29ca <__mulsf3_pse+0xa0>
    29aa:	0c 94 2e 14 	jmp	0x285c	; 0x285c <__fp_inf>
    29ae:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <__fp_szero>
    29b2:	5f 3f       	cpi	r21, 0xFF	; 255
    29b4:	e4 f3       	brlt	.-8      	; 0x29ae <__mulsf3_pse+0x84>
    29b6:	98 3e       	cpi	r25, 0xE8	; 232
    29b8:	d4 f3       	brlt	.-12     	; 0x29ae <__mulsf3_pse+0x84>
    29ba:	86 95       	lsr	r24
    29bc:	77 95       	ror	r23
    29be:	67 95       	ror	r22
    29c0:	b7 95       	ror	r27
    29c2:	f7 95       	ror	r31
    29c4:	e7 95       	ror	r30
    29c6:	9f 5f       	subi	r25, 0xFF	; 255
    29c8:	c1 f7       	brne	.-16     	; 0x29ba <__mulsf3_pse+0x90>
    29ca:	fe 2b       	or	r31, r30
    29cc:	88 0f       	add	r24, r24
    29ce:	91 1d       	adc	r25, r1
    29d0:	96 95       	lsr	r25
    29d2:	87 95       	ror	r24
    29d4:	97 f9       	bld	r25, 7
    29d6:	08 95       	ret

000029d8 <__cxa_pure_virtual>:
    29d8:	0e 94 4c 22 	call	0x4498	; 0x4498 <abort>

000029dc <initVariant>:
    29dc:	08 95       	ret

000029de <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    29de:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <init>

	initVariant();
    29e2:	0e 94 ee 14 	call	0x29dc	; 0x29dc <initVariant>

#if defined(USBCON)
	USBDevice.attach();
    29e6:	82 ef       	ldi	r24, 0xF2	; 242
    29e8:	94 e0       	ldi	r25, 0x04	; 4
    29ea:	0e 94 06 1b 	call	0x360c	; 0x360c <_ZN10USBDevice_6attachEv>
#endif
	
	setup();
    29ee:	0e 94 0d 06 	call	0xc1a	; 0xc1a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    29f2:	c0 e0       	ldi	r28, 0x00	; 0
    29f4:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    29f6:	0e 94 57 06 	call	0xcae	; 0xcae <loop>
		if (serialEventRun) serialEventRun();
    29fa:	20 97       	sbiw	r28, 0x00	; 0
    29fc:	e1 f3       	breq	.-8      	; 0x29f6 <main+0x18>
    29fe:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2a02:	f9 cf       	rjmp	.-14     	; 0x29f6 <main+0x18>

00002a04 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2a04:	cf 92       	push	r12
    2a06:	df 92       	push	r13
    2a08:	ef 92       	push	r14
    2a0a:	ff 92       	push	r15
    2a0c:	0f 93       	push	r16
    2a0e:	1f 93       	push	r17
    2a10:	cf 93       	push	r28
    2a12:	df 93       	push	r29
    2a14:	6c 01       	movw	r12, r24
    2a16:	7a 01       	movw	r14, r20
    2a18:	8b 01       	movw	r16, r22
    2a1a:	c0 e0       	ldi	r28, 0x00	; 0
    2a1c:	d0 e0       	ldi	r29, 0x00	; 0
    2a1e:	ce 15       	cp	r28, r14
    2a20:	df 05       	cpc	r29, r15
    2a22:	81 f0       	breq	.+32     	; 0x2a44 <_ZN5Print5writeEPKhj+0x40>
    2a24:	d8 01       	movw	r26, r16
    2a26:	6d 91       	ld	r22, X+
    2a28:	8d 01       	movw	r16, r26
    2a2a:	d6 01       	movw	r26, r12
    2a2c:	ed 91       	ld	r30, X+
    2a2e:	fc 91       	ld	r31, X
    2a30:	01 90       	ld	r0, Z+
    2a32:	f0 81       	ld	r31, Z
    2a34:	e0 2d       	mov	r30, r0
    2a36:	c6 01       	movw	r24, r12
    2a38:	09 95       	icall
    2a3a:	89 2b       	or	r24, r25
    2a3c:	11 f0       	breq	.+4      	; 0x2a42 <_ZN5Print5writeEPKhj+0x3e>
    2a3e:	21 96       	adiw	r28, 0x01	; 1
    2a40:	ee cf       	rjmp	.-36     	; 0x2a1e <_ZN5Print5writeEPKhj+0x1a>
    2a42:	7e 01       	movw	r14, r28
    2a44:	c7 01       	movw	r24, r14
    2a46:	df 91       	pop	r29
    2a48:	cf 91       	pop	r28
    2a4a:	1f 91       	pop	r17
    2a4c:	0f 91       	pop	r16
    2a4e:	ff 90       	pop	r15
    2a50:	ef 90       	pop	r14
    2a52:	df 90       	pop	r13
    2a54:	cf 90       	pop	r12
    2a56:	08 95       	ret

00002a58 <_ZN5Print5writeEPKc>:
    2a58:	61 15       	cp	r22, r1
    2a5a:	71 05       	cpc	r23, r1
    2a5c:	79 f0       	breq	.+30     	; 0x2a7c <_ZN5Print5writeEPKc+0x24>
    2a5e:	fb 01       	movw	r30, r22
    2a60:	01 90       	ld	r0, Z+
    2a62:	00 20       	and	r0, r0
    2a64:	e9 f7       	brne	.-6      	; 0x2a60 <_ZN5Print5writeEPKc+0x8>
    2a66:	31 97       	sbiw	r30, 0x01	; 1
    2a68:	af 01       	movw	r20, r30
    2a6a:	46 1b       	sub	r20, r22
    2a6c:	57 0b       	sbc	r21, r23
    2a6e:	dc 01       	movw	r26, r24
    2a70:	ed 91       	ld	r30, X+
    2a72:	fc 91       	ld	r31, X
    2a74:	02 80       	ldd	r0, Z+2	; 0x02
    2a76:	f3 81       	ldd	r31, Z+3	; 0x03
    2a78:	e0 2d       	mov	r30, r0
    2a7a:	09 94       	ijmp
    2a7c:	80 e0       	ldi	r24, 0x00	; 0
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	08 95       	ret

00002a82 <_ZN5Print5printERK6String>:
    2a82:	db 01       	movw	r26, r22
    2a84:	14 96       	adiw	r26, 0x04	; 4
    2a86:	4d 91       	ld	r20, X+
    2a88:	5c 91       	ld	r21, X
    2a8a:	15 97       	sbiw	r26, 0x05	; 5
    2a8c:	6d 91       	ld	r22, X+
    2a8e:	7c 91       	ld	r23, X
    2a90:	dc 01       	movw	r26, r24
    2a92:	ed 91       	ld	r30, X+
    2a94:	fc 91       	ld	r31, X
    2a96:	02 80       	ldd	r0, Z+2	; 0x02
    2a98:	f3 81       	ldd	r31, Z+3	; 0x03
    2a9a:	e0 2d       	mov	r30, r0
    2a9c:	09 94       	ijmp

00002a9e <_ZN5Print5printEPKc>:
    2a9e:	0c 94 2c 15 	jmp	0x2a58	; 0x2a58 <_ZN5Print5writeEPKc>

00002aa2 <_ZN5Print5printEc>:
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	ed 91       	ld	r30, X+
    2aa6:	fc 91       	ld	r31, X
    2aa8:	01 90       	ld	r0, Z+
    2aaa:	f0 81       	ld	r31, Z
    2aac:	e0 2d       	mov	r30, r0
    2aae:	09 94       	ijmp

00002ab0 <_ZN5Print11printNumberEmh>:
    2ab0:	8f 92       	push	r8
    2ab2:	9f 92       	push	r9
    2ab4:	af 92       	push	r10
    2ab6:	bf 92       	push	r11
    2ab8:	ef 92       	push	r14
    2aba:	ff 92       	push	r15
    2abc:	0f 93       	push	r16
    2abe:	1f 93       	push	r17
    2ac0:	cf 93       	push	r28
    2ac2:	df 93       	push	r29
    2ac4:	cd b7       	in	r28, 0x3d	; 61
    2ac6:	de b7       	in	r29, 0x3e	; 62
    2ac8:	a1 97       	sbiw	r28, 0x21	; 33
    2aca:	0f b6       	in	r0, 0x3f	; 63
    2acc:	f8 94       	cli
    2ace:	de bf       	out	0x3e, r29	; 62
    2ad0:	0f be       	out	0x3f, r0	; 63
    2ad2:	cd bf       	out	0x3d, r28	; 61
    2ad4:	7c 01       	movw	r14, r24
    2ad6:	fa 01       	movw	r30, r20
    2ad8:	cb 01       	movw	r24, r22
    2ada:	19 a2       	std	Y+33, r1	; 0x21
    2adc:	22 30       	cpi	r18, 0x02	; 2
    2ade:	08 f4       	brcc	.+2      	; 0x2ae2 <_ZN5Print11printNumberEmh+0x32>
    2ae0:	2a e0       	ldi	r18, 0x0A	; 10
    2ae2:	8e 01       	movw	r16, r28
    2ae4:	0f 5d       	subi	r16, 0xDF	; 223
    2ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae8:	82 2e       	mov	r8, r18
    2aea:	91 2c       	mov	r9, r1
    2aec:	a1 2c       	mov	r10, r1
    2aee:	b1 2c       	mov	r11, r1
    2af0:	bf 01       	movw	r22, r30
    2af2:	a5 01       	movw	r20, r10
    2af4:	94 01       	movw	r18, r8
    2af6:	0e 94 29 20 	call	0x4052	; 0x4052 <__udivmodsi4>
    2afa:	f9 01       	movw	r30, r18
    2afc:	ca 01       	movw	r24, r20
    2afe:	01 50       	subi	r16, 0x01	; 1
    2b00:	11 09       	sbc	r17, r1
    2b02:	6a 30       	cpi	r22, 0x0A	; 10
    2b04:	10 f4       	brcc	.+4      	; 0x2b0a <_ZN5Print11printNumberEmh+0x5a>
    2b06:	60 5d       	subi	r22, 0xD0	; 208
    2b08:	01 c0       	rjmp	.+2      	; 0x2b0c <_ZN5Print11printNumberEmh+0x5c>
    2b0a:	69 5c       	subi	r22, 0xC9	; 201
    2b0c:	d8 01       	movw	r26, r16
    2b0e:	6c 93       	st	X, r22
    2b10:	23 2b       	or	r18, r19
    2b12:	24 2b       	or	r18, r20
    2b14:	25 2b       	or	r18, r21
    2b16:	61 f7       	brne	.-40     	; 0x2af0 <_ZN5Print11printNumberEmh+0x40>
    2b18:	b8 01       	movw	r22, r16
    2b1a:	c7 01       	movw	r24, r14
    2b1c:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <_ZN5Print5writeEPKc>
    2b20:	a1 96       	adiw	r28, 0x21	; 33
    2b22:	0f b6       	in	r0, 0x3f	; 63
    2b24:	f8 94       	cli
    2b26:	de bf       	out	0x3e, r29	; 62
    2b28:	0f be       	out	0x3f, r0	; 63
    2b2a:	cd bf       	out	0x3d, r28	; 61
    2b2c:	df 91       	pop	r29
    2b2e:	cf 91       	pop	r28
    2b30:	1f 91       	pop	r17
    2b32:	0f 91       	pop	r16
    2b34:	ff 90       	pop	r15
    2b36:	ef 90       	pop	r14
    2b38:	bf 90       	pop	r11
    2b3a:	af 90       	pop	r10
    2b3c:	9f 90       	pop	r9
    2b3e:	8f 90       	pop	r8
    2b40:	08 95       	ret

00002b42 <_ZN5Print5printEmi>:
    2b42:	21 15       	cp	r18, r1
    2b44:	31 05       	cpc	r19, r1
    2b46:	41 f4       	brne	.+16     	; 0x2b58 <_ZN5Print5printEmi+0x16>
    2b48:	dc 01       	movw	r26, r24
    2b4a:	ed 91       	ld	r30, X+
    2b4c:	fc 91       	ld	r31, X
    2b4e:	01 90       	ld	r0, Z+
    2b50:	f0 81       	ld	r31, Z
    2b52:	e0 2d       	mov	r30, r0
    2b54:	64 2f       	mov	r22, r20
    2b56:	09 94       	ijmp
    2b58:	0c 94 58 15 	jmp	0x2ab0	; 0x2ab0 <_ZN5Print11printNumberEmh>

00002b5c <_ZN5Print5printEji>:
    2b5c:	9a 01       	movw	r18, r20
    2b5e:	ab 01       	movw	r20, r22
    2b60:	60 e0       	ldi	r22, 0x00	; 0
    2b62:	70 e0       	ldi	r23, 0x00	; 0
    2b64:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <_ZN5Print5printEmi>

00002b68 <_ZN5Print5printEli>:
    2b68:	cf 92       	push	r12
    2b6a:	df 92       	push	r13
    2b6c:	ef 92       	push	r14
    2b6e:	ff 92       	push	r15
    2b70:	0f 93       	push	r16
    2b72:	1f 93       	push	r17
    2b74:	cf 93       	push	r28
    2b76:	df 93       	push	r29
    2b78:	21 15       	cp	r18, r1
    2b7a:	31 05       	cpc	r19, r1
    2b7c:	81 f4       	brne	.+32     	; 0x2b9e <_ZN5Print5printEli+0x36>
    2b7e:	dc 01       	movw	r26, r24
    2b80:	ed 91       	ld	r30, X+
    2b82:	fc 91       	ld	r31, X
    2b84:	01 90       	ld	r0, Z+
    2b86:	f0 81       	ld	r31, Z
    2b88:	e0 2d       	mov	r30, r0
    2b8a:	64 2f       	mov	r22, r20
    2b8c:	df 91       	pop	r29
    2b8e:	cf 91       	pop	r28
    2b90:	1f 91       	pop	r17
    2b92:	0f 91       	pop	r16
    2b94:	ff 90       	pop	r15
    2b96:	ef 90       	pop	r14
    2b98:	df 90       	pop	r13
    2b9a:	cf 90       	pop	r12
    2b9c:	09 94       	ijmp
    2b9e:	2a 30       	cpi	r18, 0x0A	; 10
    2ba0:	31 05       	cpc	r19, r1
    2ba2:	01 f5       	brne	.+64     	; 0x2be4 <_ZN5Print5printEli+0x7c>
    2ba4:	77 ff       	sbrs	r23, 7
    2ba6:	1d c0       	rjmp	.+58     	; 0x2be2 <_ZN5Print5printEli+0x7a>
    2ba8:	6a 01       	movw	r12, r20
    2baa:	7b 01       	movw	r14, r22
    2bac:	ec 01       	movw	r28, r24
    2bae:	6d e2       	ldi	r22, 0x2D	; 45
    2bb0:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <_ZN5Print5printEc>
    2bb4:	8c 01       	movw	r16, r24
    2bb6:	44 27       	eor	r20, r20
    2bb8:	55 27       	eor	r21, r21
    2bba:	ba 01       	movw	r22, r20
    2bbc:	4c 19       	sub	r20, r12
    2bbe:	5d 09       	sbc	r21, r13
    2bc0:	6e 09       	sbc	r22, r14
    2bc2:	7f 09       	sbc	r23, r15
    2bc4:	2a e0       	ldi	r18, 0x0A	; 10
    2bc6:	ce 01       	movw	r24, r28
    2bc8:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <_ZN5Print11printNumberEmh>
    2bcc:	80 0f       	add	r24, r16
    2bce:	91 1f       	adc	r25, r17
    2bd0:	df 91       	pop	r29
    2bd2:	cf 91       	pop	r28
    2bd4:	1f 91       	pop	r17
    2bd6:	0f 91       	pop	r16
    2bd8:	ff 90       	pop	r15
    2bda:	ef 90       	pop	r14
    2bdc:	df 90       	pop	r13
    2bde:	cf 90       	pop	r12
    2be0:	08 95       	ret
    2be2:	2a e0       	ldi	r18, 0x0A	; 10
    2be4:	df 91       	pop	r29
    2be6:	cf 91       	pop	r28
    2be8:	1f 91       	pop	r17
    2bea:	0f 91       	pop	r16
    2bec:	ff 90       	pop	r15
    2bee:	ef 90       	pop	r14
    2bf0:	df 90       	pop	r13
    2bf2:	cf 90       	pop	r12
    2bf4:	0c 94 58 15 	jmp	0x2ab0	; 0x2ab0 <_ZN5Print11printNumberEmh>

00002bf8 <_ZN5Print5printEii>:
    2bf8:	9a 01       	movw	r18, r20
    2bfa:	ab 01       	movw	r20, r22
    2bfc:	77 0f       	add	r23, r23
    2bfe:	66 0b       	sbc	r22, r22
    2c00:	77 0b       	sbc	r23, r23
    2c02:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <_ZN5Print5printEli>

00002c06 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    2c06:	7f 92       	push	r7
    2c08:	8f 92       	push	r8
    2c0a:	9f 92       	push	r9
    2c0c:	af 92       	push	r10
    2c0e:	bf 92       	push	r11
    2c10:	cf 92       	push	r12
    2c12:	df 92       	push	r13
    2c14:	ef 92       	push	r14
    2c16:	ff 92       	push	r15
    2c18:	0f 93       	push	r16
    2c1a:	1f 93       	push	r17
    2c1c:	cf 93       	push	r28
    2c1e:	df 93       	push	r29
    2c20:	8c 01       	movw	r16, r24
    2c22:	6a 01       	movw	r12, r20
    2c24:	7b 01       	movw	r14, r22
    2c26:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    2c28:	9a 01       	movw	r18, r20
    2c2a:	ab 01       	movw	r20, r22
    2c2c:	c7 01       	movw	r24, r14
    2c2e:	b6 01       	movw	r22, r12
    2c30:	0e 94 10 20 	call	0x4020	; 0x4020 <__unordsf2>
    2c34:	88 23       	and	r24, r24
    2c36:	19 f0       	breq	.+6      	; 0x2c3e <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2c38:	60 ed       	ldi	r22, 0xD0	; 208
    2c3a:	72 e0       	ldi	r23, 0x02	; 2
    2c3c:	27 c0       	rjmp	.+78     	; 0x2c8c <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    2c3e:	46 01       	movw	r8, r12
    2c40:	57 01       	movw	r10, r14
    2c42:	e8 94       	clt
    2c44:	b7 f8       	bld	r11, 7
    2c46:	2f ef       	ldi	r18, 0xFF	; 255
    2c48:	3f ef       	ldi	r19, 0xFF	; 255
    2c4a:	4f e7       	ldi	r20, 0x7F	; 127
    2c4c:	5f e7       	ldi	r21, 0x7F	; 127
    2c4e:	c5 01       	movw	r24, r10
    2c50:	b4 01       	movw	r22, r8
    2c52:	0e 94 10 20 	call	0x4020	; 0x4020 <__unordsf2>
    2c56:	81 11       	cpse	r24, r1
    2c58:	0d c0       	rjmp	.+26     	; 0x2c74 <_ZN5Print10printFloatEdh+0x6e>
    2c5a:	2f ef       	ldi	r18, 0xFF	; 255
    2c5c:	3f ef       	ldi	r19, 0xFF	; 255
    2c5e:	4f e7       	ldi	r20, 0x7F	; 127
    2c60:	5f e7       	ldi	r21, 0x7F	; 127
    2c62:	c5 01       	movw	r24, r10
    2c64:	b4 01       	movw	r22, r8
    2c66:	0e 94 c8 13 	call	0x2790	; 0x2790 <__cmpsf2>
    2c6a:	18 16       	cp	r1, r24
    2c6c:	1c f4       	brge	.+6      	; 0x2c74 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2c6e:	64 ed       	ldi	r22, 0xD4	; 212
    2c70:	72 e0       	ldi	r23, 0x02	; 2
    2c72:	0c c0       	rjmp	.+24     	; 0x2c8c <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    2c74:	2f ef       	ldi	r18, 0xFF	; 255
    2c76:	3f ef       	ldi	r19, 0xFF	; 255
    2c78:	4f e7       	ldi	r20, 0x7F	; 127
    2c7a:	5f e4       	ldi	r21, 0x4F	; 79
    2c7c:	c7 01       	movw	r24, r14
    2c7e:	b6 01       	movw	r22, r12
    2c80:	0e 94 0b 20 	call	0x4016	; 0x4016 <__gesf2>
    2c84:	18 16       	cp	r1, r24
    2c86:	94 f4       	brge	.+36     	; 0x2cac <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2c88:	68 ed       	ldi	r22, 0xD8	; 216
    2c8a:	72 e0       	ldi	r23, 0x02	; 2
    2c8c:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2c8e:	df 91       	pop	r29
    2c90:	cf 91       	pop	r28
    2c92:	1f 91       	pop	r17
    2c94:	0f 91       	pop	r16
    2c96:	ff 90       	pop	r15
    2c98:	ef 90       	pop	r14
    2c9a:	df 90       	pop	r13
    2c9c:	cf 90       	pop	r12
    2c9e:	bf 90       	pop	r11
    2ca0:	af 90       	pop	r10
    2ca2:	9f 90       	pop	r9
    2ca4:	8f 90       	pop	r8
    2ca6:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2ca8:	0c 94 2c 15 	jmp	0x2a58	; 0x2a58 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    2cac:	2f ef       	ldi	r18, 0xFF	; 255
    2cae:	3f ef       	ldi	r19, 0xFF	; 255
    2cb0:	4f e7       	ldi	r20, 0x7F	; 127
    2cb2:	5f ec       	ldi	r21, 0xCF	; 207
    2cb4:	c7 01       	movw	r24, r14
    2cb6:	b6 01       	movw	r22, r12
    2cb8:	0e 94 c8 13 	call	0x2790	; 0x2790 <__cmpsf2>
    2cbc:	87 fd       	sbrc	r24, 7
    2cbe:	e4 cf       	rjmp	.-56     	; 0x2c88 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	a9 01       	movw	r20, r18
    2cc6:	c7 01       	movw	r24, r14
    2cc8:	b6 01       	movw	r22, r12
    2cca:	0e 94 c8 13 	call	0x2790	; 0x2790 <__cmpsf2>
    2cce:	87 ff       	sbrs	r24, 7
    2cd0:	0a c0       	rjmp	.+20     	; 0x2ce6 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    2cd2:	6d e2       	ldi	r22, 0x2D	; 45
    2cd4:	c8 01       	movw	r24, r16
    2cd6:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <_ZN5Print5printEc>
    2cda:	ec 01       	movw	r28, r24
     number = -number;
    2cdc:	f7 fa       	bst	r15, 7
    2cde:	f0 94       	com	r15
    2ce0:	f7 f8       	bld	r15, 7
    2ce2:	f0 94       	com	r15
    2ce4:	02 c0       	rjmp	.+4      	; 0x2cea <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    2ce6:	c0 e0       	ldi	r28, 0x00	; 0
    2ce8:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2cea:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    2cec:	60 e0       	ldi	r22, 0x00	; 0
    2cee:	70 e0       	ldi	r23, 0x00	; 0
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
    2cf2:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    2cf4:	7b 14       	cp	r7, r11
    2cf6:	41 f0       	breq	.+16     	; 0x2d08 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	40 e2       	ldi	r20, 0x20	; 32
    2cfe:	51 e4       	ldi	r21, 0x41	; 65
    2d00:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2d04:	b3 94       	inc	r11
    2d06:	f6 cf       	rjmp	.-20     	; 0x2cf4 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    2d08:	a7 01       	movw	r20, r14
    2d0a:	96 01       	movw	r18, r12
    2d0c:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__addsf3>
    2d10:	6b 01       	movw	r12, r22
    2d12:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    2d14:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__fixunssfsi>
    2d18:	4b 01       	movw	r8, r22
    2d1a:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    2d1c:	2a e0       	ldi	r18, 0x0A	; 10
    2d1e:	ab 01       	movw	r20, r22
    2d20:	bc 01       	movw	r22, r24
    2d22:	c8 01       	movw	r24, r16
    2d24:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2d28:	c8 0f       	add	r28, r24
    2d2a:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    2d2c:	77 20       	and	r7, r7
    2d2e:	b9 f1       	breq	.+110    	; 0x2d9e <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    2d30:	c5 01       	movw	r24, r10
    2d32:	b4 01       	movw	r22, r8
    2d34:	0e 94 cd 13 	call	0x279a	; 0x279a <__floatunsisf>
    2d38:	9b 01       	movw	r18, r22
    2d3a:	ac 01       	movw	r20, r24
    2d3c:	c7 01       	movw	r24, r14
    2d3e:	b6 01       	movw	r22, r12
    2d40:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__subsf3>
    2d44:	6b 01       	movw	r12, r22
    2d46:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    2d48:	6e e2       	ldi	r22, 0x2E	; 46
    2d4a:	c8 01       	movw	r24, r16
    2d4c:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <_ZN5Print5printEc>
    2d50:	c8 0f       	add	r28, r24
    2d52:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	40 e2       	ldi	r20, 0x20	; 32
    2d5a:	51 e4       	ldi	r21, 0x41	; 65
    2d5c:	c7 01       	movw	r24, r14
    2d5e:	b6 01       	movw	r22, r12
    2d60:	0e 94 7f 14 	call	0x28fe	; 0x28fe <__mulsf3>
    2d64:	4b 01       	movw	r8, r22
    2d66:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    2d68:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__fixunssfsi>
    2d6c:	6b 01       	movw	r12, r22
    2d6e:	7c 01       	movw	r14, r24
    n += print(toPrint);
    2d70:	4a e0       	ldi	r20, 0x0A	; 10
    2d72:	50 e0       	ldi	r21, 0x00	; 0
    2d74:	c8 01       	movw	r24, r16
    2d76:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <_ZN5Print5printEji>
    2d7a:	c8 0f       	add	r28, r24
    2d7c:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    2d7e:	b6 01       	movw	r22, r12
    2d80:	80 e0       	ldi	r24, 0x00	; 0
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	0e 94 cd 13 	call	0x279a	; 0x279a <__floatunsisf>
    2d88:	9b 01       	movw	r18, r22
    2d8a:	ac 01       	movw	r20, r24
    2d8c:	c5 01       	movw	r24, r10
    2d8e:	b4 01       	movw	r22, r8
    2d90:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__subsf3>
    2d94:	6b 01       	movw	r12, r22
    2d96:	7c 01       	movw	r14, r24
    2d98:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2d9a:	71 10       	cpse	r7, r1
    2d9c:	db cf       	rjmp	.-74     	; 0x2d54 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2d9e:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2da0:	df 91       	pop	r29
    2da2:	cf 91       	pop	r28
    2da4:	1f 91       	pop	r17
    2da6:	0f 91       	pop	r16
    2da8:	ff 90       	pop	r15
    2daa:	ef 90       	pop	r14
    2dac:	df 90       	pop	r13
    2dae:	cf 90       	pop	r12
    2db0:	bf 90       	pop	r11
    2db2:	af 90       	pop	r10
    2db4:	9f 90       	pop	r9
    2db6:	8f 90       	pop	r8
    2db8:	7f 90       	pop	r7
    2dba:	08 95       	ret

00002dbc <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2dbc:	0c 94 03 16 	jmp	0x2c06	; 0x2c06 <_ZN5Print10printFloatEdh>

00002dc0 <_ZL4RecvPVhh>:
//=======================================================================
//=======================================================================

USBDevice_ USBDevice;

USBDevice_::USBDevice_()
    2dc0:	61 50       	subi	r22, 0x01	; 1
    2dc2:	30 f0       	brcs	.+12     	; 0x2dd0 <_ZL4RecvPVhh+0x10>
    2dc4:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2dc8:	fc 01       	movw	r30, r24
    2dca:	20 83       	st	Z, r18
    2dcc:	01 96       	adiw	r24, 0x01	; 1
    2dce:	f8 cf       	rjmp	.-16     	; 0x2dc0 <_ZL4RecvPVhh>
    2dd0:	28 98       	cbi	0x05, 0	; 5
    2dd2:	84 e6       	ldi	r24, 0x64	; 100
    2dd4:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <RxLEDPulse>
    2dd8:	08 95       	ret

00002dda <_ZL11SendControlh>:
    2dda:	40 91 f5 04 	lds	r20, 0x04F5	; 0x8004f5 <_ZL6_cmark>
    2dde:	50 91 f6 04 	lds	r21, 0x04F6	; 0x8004f6 <_ZL6_cmark+0x1>
    2de2:	20 91 f3 04 	lds	r18, 0x04F3	; 0x8004f3 <_ZL5_cend>
    2de6:	30 91 f4 04 	lds	r19, 0x04F4	; 0x8004f4 <_ZL5_cend+0x1>
    2dea:	42 17       	cp	r20, r18
    2dec:	53 07       	cpc	r21, r19
    2dee:	b4 f4       	brge	.+44     	; 0x2e1c <_ZL11SendControlh+0x42>
    2df0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2df4:	95 70       	andi	r25, 0x05	; 5
    2df6:	e1 f3       	breq	.-8      	; 0x2df0 <_ZL11SendControlh+0x16>
    2df8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2dfc:	92 fd       	sbrc	r25, 2
    2dfe:	19 c0       	rjmp	.+50     	; 0x2e32 <_ZL11SendControlh+0x58>
    2e00:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2e04:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <_ZL6_cmark>
    2e08:	90 91 f6 04 	lds	r25, 0x04F6	; 0x8004f6 <_ZL6_cmark+0x1>
    2e0c:	01 96       	adiw	r24, 0x01	; 1
    2e0e:	8f 73       	andi	r24, 0x3F	; 63
    2e10:	99 27       	eor	r25, r25
    2e12:	89 2b       	or	r24, r25
    2e14:	19 f4       	brne	.+6      	; 0x2e1c <_ZL11SendControlh+0x42>
    2e16:	8e ef       	ldi	r24, 0xFE	; 254
    2e18:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2e1c:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <_ZL6_cmark>
    2e20:	90 91 f6 04 	lds	r25, 0x04F6	; 0x8004f6 <_ZL6_cmark+0x1>
    2e24:	01 96       	adiw	r24, 0x01	; 1
    2e26:	90 93 f6 04 	sts	0x04F6, r25	; 0x8004f6 <_ZL6_cmark+0x1>
    2e2a:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <_ZL6_cmark>
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	08 95       	ret
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	08 95       	ret

00002e36 <_ZL24USB_SendStringDescriptorPKhhh>:
    2e36:	df 92       	push	r13
    2e38:	ef 92       	push	r14
    2e3a:	ff 92       	push	r15
    2e3c:	0f 93       	push	r16
    2e3e:	1f 93       	push	r17
    2e40:	cf 93       	push	r28
    2e42:	df 93       	push	r29
    2e44:	d8 2e       	mov	r13, r24
    2e46:	f9 2e       	mov	r15, r25
    2e48:	e4 2e       	mov	r14, r20
    2e4a:	06 2f       	mov	r16, r22
    2e4c:	10 e0       	ldi	r17, 0x00	; 0
    2e4e:	c8 01       	movw	r24, r16
    2e50:	01 96       	adiw	r24, 0x01	; 1
    2e52:	88 0f       	add	r24, r24
    2e54:	0e 94 ed 16 	call	0x2dda	; 0x2dda <_ZL11SendControlh>
    2e58:	83 e0       	ldi	r24, 0x03	; 3
    2e5a:	0e 94 ed 16 	call	0x2dda	; 0x2dda <_ZL11SendControlh>
    2e5e:	cd 2d       	mov	r28, r13
    2e60:	df 2d       	mov	r29, r15
    2e62:	0c 0f       	add	r16, r28
    2e64:	1d 1f       	adc	r17, r29
    2e66:	c0 17       	cp	r28, r16
    2e68:	d1 07       	cpc	r29, r17
    2e6a:	89 f0       	breq	.+34     	; 0x2e8e <_ZL24USB_SendStringDescriptorPKhhh+0x58>
    2e6c:	e7 fe       	sbrs	r14, 7
    2e6e:	03 c0       	rjmp	.+6      	; 0x2e76 <_ZL24USB_SendStringDescriptorPKhhh+0x40>
    2e70:	fe 01       	movw	r30, r28
    2e72:	84 91       	lpm	r24, Z
    2e74:	01 c0       	rjmp	.+2      	; 0x2e78 <_ZL24USB_SendStringDescriptorPKhhh+0x42>
    2e76:	88 81       	ld	r24, Y
    2e78:	0e 94 ed 16 	call	0x2dda	; 0x2dda <_ZL11SendControlh>
    2e7c:	f8 2e       	mov	r15, r24
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
    2e80:	0e 94 ed 16 	call	0x2dda	; 0x2dda <_ZL11SendControlh>
    2e84:	8f 21       	and	r24, r15
    2e86:	21 96       	adiw	r28, 0x01	; 1
    2e88:	81 11       	cpse	r24, r1
    2e8a:	ed cf       	rjmp	.-38     	; 0x2e66 <_ZL24USB_SendStringDescriptorPKhhh+0x30>
    2e8c:	01 c0       	rjmp	.+2      	; 0x2e90 <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
    2e8e:	81 e0       	ldi	r24, 0x01	; 1
    2e90:	df 91       	pop	r29
    2e92:	cf 91       	pop	r28
    2e94:	1f 91       	pop	r17
    2e96:	0f 91       	pop	r16
    2e98:	ff 90       	pop	r15
    2e9a:	ef 90       	pop	r14
    2e9c:	df 90       	pop	r13
    2e9e:	08 95       	ret

00002ea0 <_ZL15USB_ClockEnablev>:
    2ea0:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    2ea4:	81 60       	ori	r24, 0x01	; 1
    2ea6:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    2eaa:	80 ea       	ldi	r24, 0xA0	; 160
    2eac:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2eb0:	89 b5       	in	r24, 0x29	; 41
    2eb2:	80 61       	ori	r24, 0x10	; 16
    2eb4:	89 bd       	out	0x29, r24	; 41
    2eb6:	89 b5       	in	r24, 0x29	; 41
    2eb8:	82 60       	ori	r24, 0x02	; 2
    2eba:	89 bd       	out	0x29, r24	; 41
    2ebc:	09 b4       	in	r0, 0x29	; 41
    2ebe:	00 fe       	sbrs	r0, 0
    2ec0:	fd cf       	rjmp	.-6      	; 0x2ebc <_ZL15USB_ClockEnablev+0x1c>
    2ec2:	61 e0       	ldi	r22, 0x01	; 1
    2ec4:	70 e0       	ldi	r23, 0x00	; 0
    2ec6:	80 e0       	ldi	r24, 0x00	; 0
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	0e 94 94 1b 	call	0x3728	; 0x3728 <delay>
    2ece:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2ed2:	8f 7c       	andi	r24, 0xCF	; 207
    2ed4:	80 61       	ori	r24, 0x10	; 16
    2ed6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2eda:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2ede:	80 7f       	andi	r24, 0xF0	; 240
    2ee0:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2ee4:	08 95       	ret

00002ee6 <_ZL14SendInterfacesv>:
    2ee6:	cf 93       	push	r28
    2ee8:	df 93       	push	r29
    2eea:	1f 92       	push	r1
    2eec:	cd b7       	in	r28, 0x3d	; 61
    2eee:	de b7       	in	r29, 0x3e	; 62
    2ef0:	19 82       	std	Y+1, r1	; 0x01
    2ef2:	ce 01       	movw	r24, r28
    2ef4:	01 96       	adiw	r24, 0x01	; 1
    2ef6:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <_Z16CDC_GetInterfacePh>
    2efa:	0e 94 56 1f 	call	0x3eac	; 0x3eac <_Z12PluggableUSBv>
    2efe:	be 01       	movw	r22, r28
    2f00:	6f 5f       	subi	r22, 0xFF	; 255
    2f02:	7f 4f       	sbci	r23, 0xFF	; 255
    2f04:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <_ZN13PluggableUSB_12getInterfaceEPh>
    2f08:	89 81       	ldd	r24, Y+1	; 0x01
    2f0a:	0f 90       	pop	r0
    2f0c:	df 91       	pop	r29
    2f0e:	cf 91       	pop	r28
    2f10:	08 95       	ret

00002f12 <_ZN6LockEPC1Eh>:
    2f12:	2f b7       	in	r18, 0x3f	; 63
    2f14:	fc 01       	movw	r30, r24
    2f16:	20 83       	st	Z, r18
    2f18:	f8 94       	cli
    2f1a:	67 70       	andi	r22, 0x07	; 7
    2f1c:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2f20:	08 95       	ret

00002f22 <_Z13USB_Availableh>:
    2f22:	cf 93       	push	r28
    2f24:	df 93       	push	r29
    2f26:	1f 92       	push	r1
    2f28:	cd b7       	in	r28, 0x3d	; 61
    2f2a:	de b7       	in	r29, 0x3e	; 62
    2f2c:	68 2f       	mov	r22, r24
    2f2e:	ce 01       	movw	r24, r28
    2f30:	01 96       	adiw	r24, 0x01	; 1
    2f32:	0e 94 89 17 	call	0x2f12	; 0x2f12 <_ZN6LockEPC1Eh>
    2f36:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2f3a:	99 81       	ldd	r25, Y+1	; 0x01
    2f3c:	9f bf       	out	0x3f, r25	; 63
    2f3e:	0f 90       	pop	r0
    2f40:	df 91       	pop	r29
    2f42:	cf 91       	pop	r28
    2f44:	08 95       	ret

00002f46 <_Z8USB_RecvhPvi>:
    2f46:	ef 92       	push	r14
    2f48:	ff 92       	push	r15
    2f4a:	0f 93       	push	r16
    2f4c:	1f 93       	push	r17
    2f4e:	cf 93       	push	r28
    2f50:	df 93       	push	r29
    2f52:	1f 92       	push	r1
    2f54:	cd b7       	in	r28, 0x3d	; 61
    2f56:	de b7       	in	r29, 0x3e	; 62
    2f58:	90 91 f9 04 	lds	r25, 0x04F9	; 0x8004f9 <_usbConfiguration>
    2f5c:	99 23       	and	r25, r25
    2f5e:	11 f0       	breq	.+4      	; 0x2f64 <_Z8USB_RecvhPvi+0x1e>
    2f60:	57 ff       	sbrs	r21, 7
    2f62:	03 c0       	rjmp	.+6      	; 0x2f6a <_Z8USB_RecvhPvi+0x24>
    2f64:	8f ef       	ldi	r24, 0xFF	; 255
    2f66:	9f ef       	ldi	r25, 0xFF	; 255
    2f68:	29 c0       	rjmp	.+82     	; 0x2fbc <_Z8USB_RecvhPvi+0x76>
    2f6a:	8a 01       	movw	r16, r20
    2f6c:	7b 01       	movw	r14, r22
    2f6e:	68 2f       	mov	r22, r24
    2f70:	ce 01       	movw	r24, r28
    2f72:	01 96       	adiw	r24, 0x01	; 1
    2f74:	0e 94 89 17 	call	0x2f12	; 0x2f12 <_ZN6LockEPC1Eh>
    2f78:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	02 17       	cp	r16, r18
    2f80:	13 07       	cpc	r17, r19
    2f82:	0c f4       	brge	.+2      	; 0x2f86 <_Z8USB_RecvhPvi+0x40>
    2f84:	98 01       	movw	r18, r16
    2f86:	82 2f       	mov	r24, r18
    2f88:	f7 01       	movw	r30, r14
    2f8a:	94 e6       	ldi	r25, 0x64	; 100
    2f8c:	81 50       	subi	r24, 0x01	; 1
    2f8e:	38 f0       	brcs	.+14     	; 0x2f9e <_Z8USB_RecvhPvi+0x58>
    2f90:	28 98       	cbi	0x05, 0	; 5
    2f92:	90 93 fa 04 	sts	0x04FA, r25	; 0x8004fa <RxLEDPulse>
    2f96:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2f9a:	41 93       	st	Z+, r20
    2f9c:	f7 cf       	rjmp	.-18     	; 0x2f8c <_Z8USB_RecvhPvi+0x46>
    2f9e:	21 15       	cp	r18, r1
    2fa0:	31 05       	cpc	r19, r1
    2fa2:	21 f0       	breq	.+8      	; 0x2fac <_Z8USB_RecvhPvi+0x66>
    2fa4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2fa8:	88 23       	and	r24, r24
    2faa:	21 f0       	breq	.+8      	; 0x2fb4 <_Z8USB_RecvhPvi+0x6e>
    2fac:	89 81       	ldd	r24, Y+1	; 0x01
    2fae:	8f bf       	out	0x3f, r24	; 63
    2fb0:	c9 01       	movw	r24, r18
    2fb2:	04 c0       	rjmp	.+8      	; 0x2fbc <_Z8USB_RecvhPvi+0x76>
    2fb4:	8b e6       	ldi	r24, 0x6B	; 107
    2fb6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2fba:	f8 cf       	rjmp	.-16     	; 0x2fac <_Z8USB_RecvhPvi+0x66>
    2fbc:	0f 90       	pop	r0
    2fbe:	df 91       	pop	r29
    2fc0:	cf 91       	pop	r28
    2fc2:	1f 91       	pop	r17
    2fc4:	0f 91       	pop	r16
    2fc6:	ff 90       	pop	r15
    2fc8:	ef 90       	pop	r14
    2fca:	08 95       	ret

00002fcc <_Z8USB_Recvh>:
    2fcc:	cf 93       	push	r28
    2fce:	df 93       	push	r29
    2fd0:	1f 92       	push	r1
    2fd2:	cd b7       	in	r28, 0x3d	; 61
    2fd4:	de b7       	in	r29, 0x3e	; 62
    2fd6:	41 e0       	ldi	r20, 0x01	; 1
    2fd8:	50 e0       	ldi	r21, 0x00	; 0
    2fda:	be 01       	movw	r22, r28
    2fdc:	6f 5f       	subi	r22, 0xFF	; 255
    2fde:	7f 4f       	sbci	r23, 0xFF	; 255
    2fe0:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <_Z8USB_RecvhPvi>
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	19 f4       	brne	.+6      	; 0x2fee <_Z8USB_Recvh+0x22>
    2fe8:	89 81       	ldd	r24, Y+1	; 0x01
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	02 c0       	rjmp	.+4      	; 0x2ff2 <_Z8USB_Recvh+0x26>
    2fee:	8f ef       	ldi	r24, 0xFF	; 255
    2ff0:	9f ef       	ldi	r25, 0xFF	; 255
    2ff2:	0f 90       	pop	r0
    2ff4:	df 91       	pop	r29
    2ff6:	cf 91       	pop	r28
    2ff8:	08 95       	ret

00002ffa <_Z13USB_SendSpaceh>:
    2ffa:	cf 93       	push	r28
    2ffc:	df 93       	push	r29
    2ffe:	1f 92       	push	r1
    3000:	cd b7       	in	r28, 0x3d	; 61
    3002:	de b7       	in	r29, 0x3e	; 62
    3004:	68 2f       	mov	r22, r24
    3006:	ce 01       	movw	r24, r28
    3008:	01 96       	adiw	r24, 0x01	; 1
    300a:	0e 94 89 17 	call	0x2f12	; 0x2f12 <_ZN6LockEPC1Eh>
    300e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3012:	89 2f       	mov	r24, r25
    3014:	80 72       	andi	r24, 0x20	; 32
    3016:	95 ff       	sbrs	r25, 5
    3018:	04 c0       	rjmp	.+8      	; 0x3022 <_Z13USB_SendSpaceh+0x28>
    301a:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    301e:	80 e4       	ldi	r24, 0x40	; 64
    3020:	89 1b       	sub	r24, r25
    3022:	99 81       	ldd	r25, Y+1	; 0x01
    3024:	9f bf       	out	0x3f, r25	; 63
    3026:	0f 90       	pop	r0
    3028:	df 91       	pop	r29
    302a:	cf 91       	pop	r28
    302c:	08 95       	ret

0000302e <_Z8USB_SendhPKvi>:
    302e:	5f 92       	push	r5
    3030:	6f 92       	push	r6
    3032:	7f 92       	push	r7
    3034:	8f 92       	push	r8
    3036:	9f 92       	push	r9
    3038:	af 92       	push	r10
    303a:	bf 92       	push	r11
    303c:	cf 92       	push	r12
    303e:	df 92       	push	r13
    3040:	ef 92       	push	r14
    3042:	ff 92       	push	r15
    3044:	0f 93       	push	r16
    3046:	1f 93       	push	r17
    3048:	cf 93       	push	r28
    304a:	df 93       	push	r29
    304c:	1f 92       	push	r1
    304e:	cd b7       	in	r28, 0x3d	; 61
    3050:	de b7       	in	r29, 0x3e	; 62
    3052:	98 2e       	mov	r9, r24
    3054:	6b 01       	movw	r12, r22
    3056:	b4 2e       	mov	r11, r20
    3058:	05 2f       	mov	r16, r21
    305a:	80 91 f9 04 	lds	r24, 0x04F9	; 0x8004f9 <_usbConfiguration>
    305e:	81 11       	cpse	r24, r1
    3060:	03 c0       	rjmp	.+6      	; 0x3068 <_Z8USB_SendhPKvi+0x3a>
    3062:	8f ef       	ldi	r24, 0xFF	; 255
    3064:	9f ef       	ldi	r25, 0xFF	; 255
    3066:	77 c0       	rjmp	.+238    	; 0x3156 <_Z8USB_SendhPKvi+0x128>
    3068:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <_usbSuspendState>
    306c:	80 ff       	sbrs	r24, 0
    306e:	05 c0       	rjmp	.+10     	; 0x307a <_Z8USB_SendhPKvi+0x4c>
    3070:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    3074:	82 60       	ori	r24, 0x02	; 2
    3076:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    307a:	eb 2c       	mov	r14, r11
    307c:	f0 2e       	mov	r15, r16
    307e:	a1 2c       	mov	r10, r1
    3080:	8a ef       	ldi	r24, 0xFA	; 250
    3082:	88 2e       	mov	r8, r24
    3084:	89 2d       	mov	r24, r9
    3086:	80 72       	andi	r24, 0x20	; 32
    3088:	68 2e       	mov	r6, r24
    308a:	89 2d       	mov	r24, r9
    308c:	80 74       	andi	r24, 0x40	; 64
    308e:	58 2e       	mov	r5, r24
    3090:	9a e3       	ldi	r25, 0x3A	; 58
    3092:	79 2e       	mov	r7, r25
    3094:	e1 14       	cp	r14, r1
    3096:	f1 04       	cpc	r15, r1
    3098:	19 f4       	brne	.+6      	; 0x30a0 <_Z8USB_SendhPKvi+0x72>
    309a:	aa 20       	and	r10, r10
    309c:	09 f4       	brne	.+2      	; 0x30a0 <_Z8USB_SendhPKvi+0x72>
    309e:	55 c0       	rjmp	.+170    	; 0x314a <_Z8USB_SendhPKvi+0x11c>
    30a0:	89 2d       	mov	r24, r9
    30a2:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <_Z13USB_SendSpaceh>
    30a6:	18 2f       	mov	r17, r24
    30a8:	81 11       	cpse	r24, r1
    30aa:	0a c0       	rjmp	.+20     	; 0x30c0 <_Z8USB_SendhPKvi+0x92>
    30ac:	8a 94       	dec	r8
    30ae:	88 20       	and	r8, r8
    30b0:	c1 f2       	breq	.-80     	; 0x3062 <_Z8USB_SendhPKvi+0x34>
    30b2:	61 e0       	ldi	r22, 0x01	; 1
    30b4:	70 e0       	ldi	r23, 0x00	; 0
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	0e 94 94 1b 	call	0x3728	; 0x3728 <delay>
    30be:	ea cf       	rjmp	.-44     	; 0x3094 <_Z8USB_SendhPKvi+0x66>
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	e8 16       	cp	r14, r24
    30c4:	f9 06       	cpc	r15, r25
    30c6:	0c f4       	brge	.+2      	; 0x30ca <_Z8USB_SendhPKvi+0x9c>
    30c8:	1e 2d       	mov	r17, r14
    30ca:	69 2d       	mov	r22, r9
    30cc:	ce 01       	movw	r24, r28
    30ce:	01 96       	adiw	r24, 0x01	; 1
    30d0:	0e 94 89 17 	call	0x2f12	; 0x2f12 <_ZN6LockEPC1Eh>
    30d4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    30d8:	85 ff       	sbrs	r24, 5
    30da:	34 c0       	rjmp	.+104    	; 0x3144 <_Z8USB_SendhPKvi+0x116>
    30dc:	81 2f       	mov	r24, r17
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	e8 1a       	sub	r14, r24
    30e2:	f9 0a       	sbc	r15, r25
    30e4:	66 20       	and	r6, r6
    30e6:	29 f0       	breq	.+10     	; 0x30f2 <_Z8USB_SendhPKvi+0xc4>
    30e8:	11 50       	subi	r17, 0x01	; 1
    30ea:	a0 f0       	brcs	.+40     	; 0x3114 <_Z8USB_SendhPKvi+0xe6>
    30ec:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    30f0:	fb cf       	rjmp	.-10     	; 0x30e8 <_Z8USB_SendhPKvi+0xba>
    30f2:	f6 01       	movw	r30, r12
    30f4:	97 fe       	sbrs	r9, 7
    30f6:	0a c0       	rjmp	.+20     	; 0x310c <_Z8USB_SendhPKvi+0xde>
    30f8:	11 50       	subi	r17, 0x01	; 1
    30fa:	50 f0       	brcs	.+20     	; 0x3110 <_Z8USB_SendhPKvi+0xe2>
    30fc:	24 91       	lpm	r18, Z
    30fe:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    3102:	31 96       	adiw	r30, 0x01	; 1
    3104:	f9 cf       	rjmp	.-14     	; 0x30f8 <_Z8USB_SendhPKvi+0xca>
    3106:	21 91       	ld	r18, Z+
    3108:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    310c:	11 50       	subi	r17, 0x01	; 1
    310e:	d8 f7       	brcc	.-10     	; 0x3106 <_Z8USB_SendhPKvi+0xd8>
    3110:	c8 0e       	add	r12, r24
    3112:	d9 1e       	adc	r13, r25
    3114:	aa 20       	and	r10, r10
    3116:	19 f0       	breq	.+6      	; 0x311e <_Z8USB_SendhPKvi+0xf0>
    3118:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    311c:	0b c0       	rjmp	.+22     	; 0x3134 <_Z8USB_SendhPKvi+0x106>
    311e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3122:	85 fd       	sbrc	r24, 5
    3124:	09 c0       	rjmp	.+18     	; 0x3138 <_Z8USB_SendhPKvi+0x10a>
    3126:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    312a:	aa 24       	eor	r10, r10
    312c:	a3 94       	inc	r10
    312e:	e1 14       	cp	r14, r1
    3130:	f1 04       	cpc	r15, r1
    3132:	41 f0       	breq	.+16     	; 0x3144 <_Z8USB_SendhPKvi+0x116>
    3134:	a1 2c       	mov	r10, r1
    3136:	06 c0       	rjmp	.+12     	; 0x3144 <_Z8USB_SendhPKvi+0x116>
    3138:	e1 14       	cp	r14, r1
    313a:	f1 04       	cpc	r15, r1
    313c:	19 f4       	brne	.+6      	; 0x3144 <_Z8USB_SendhPKvi+0x116>
    313e:	51 10       	cpse	r5, r1
    3140:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3144:	89 81       	ldd	r24, Y+1	; 0x01
    3146:	8f bf       	out	0x3f, r24	; 63
    3148:	a5 cf       	rjmp	.-182    	; 0x3094 <_Z8USB_SendhPKvi+0x66>
    314a:	5d 98       	cbi	0x0b, 5	; 11
    314c:	84 e6       	ldi	r24, 0x64	; 100
    314e:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <TxLEDPulse>
    3152:	8b 2d       	mov	r24, r11
    3154:	90 2f       	mov	r25, r16
    3156:	0f 90       	pop	r0
    3158:	df 91       	pop	r29
    315a:	cf 91       	pop	r28
    315c:	1f 91       	pop	r17
    315e:	0f 91       	pop	r16
    3160:	ff 90       	pop	r15
    3162:	ef 90       	pop	r14
    3164:	df 90       	pop	r13
    3166:	cf 90       	pop	r12
    3168:	bf 90       	pop	r11
    316a:	af 90       	pop	r10
    316c:	9f 90       	pop	r9
    316e:	8f 90       	pop	r8
    3170:	7f 90       	pop	r7
    3172:	6f 90       	pop	r6
    3174:	5f 90       	pop	r5
    3176:	08 95       	ret

00003178 <_Z11InitControli>:
    3178:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    317c:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <_ZL6_cmark+0x1>
    3180:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <_ZL6_cmark>
    3184:	90 93 f4 04 	sts	0x04F4, r25	; 0x8004f4 <_ZL5_cend+0x1>
    3188:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <_ZL5_cend>
    318c:	08 95       	ret

0000318e <_Z15USB_SendControlhPKvi>:
    318e:	df 92       	push	r13
    3190:	ef 92       	push	r14
    3192:	ff 92       	push	r15
    3194:	0f 93       	push	r16
    3196:	1f 93       	push	r17
    3198:	cf 93       	push	r28
    319a:	df 93       	push	r29
    319c:	d8 2e       	mov	r13, r24
    319e:	8a 01       	movw	r16, r20
    31a0:	7b 01       	movw	r14, r22
    31a2:	e4 0e       	add	r14, r20
    31a4:	f5 1e       	adc	r15, r21
    31a6:	eb 01       	movw	r28, r22
    31a8:	ce 15       	cp	r28, r14
    31aa:	df 05       	cpc	r29, r15
    31ac:	71 f0       	breq	.+28     	; 0x31ca <_Z15USB_SendControlhPKvi+0x3c>
    31ae:	d7 fe       	sbrs	r13, 7
    31b0:	03 c0       	rjmp	.+6      	; 0x31b8 <_Z15USB_SendControlhPKvi+0x2a>
    31b2:	fe 01       	movw	r30, r28
    31b4:	84 91       	lpm	r24, Z
    31b6:	01 c0       	rjmp	.+2      	; 0x31ba <_Z15USB_SendControlhPKvi+0x2c>
    31b8:	88 81       	ld	r24, Y
    31ba:	0e 94 ed 16 	call	0x2dda	; 0x2dda <_ZL11SendControlh>
    31be:	21 96       	adiw	r28, 0x01	; 1
    31c0:	81 11       	cpse	r24, r1
    31c2:	f2 cf       	rjmp	.-28     	; 0x31a8 <_Z15USB_SendControlhPKvi+0x1a>
    31c4:	8f ef       	ldi	r24, 0xFF	; 255
    31c6:	9f ef       	ldi	r25, 0xFF	; 255
    31c8:	01 c0       	rjmp	.+2      	; 0x31cc <_Z15USB_SendControlhPKvi+0x3e>
    31ca:	c8 01       	movw	r24, r16
    31cc:	df 91       	pop	r29
    31ce:	cf 91       	pop	r28
    31d0:	1f 91       	pop	r17
    31d2:	0f 91       	pop	r16
    31d4:	ff 90       	pop	r15
    31d6:	ef 90       	pop	r14
    31d8:	df 90       	pop	r13
    31da:	08 95       	ret

000031dc <_Z15USB_RecvControlPvi>:
    31dc:	af 92       	push	r10
    31de:	bf 92       	push	r11
    31e0:	df 92       	push	r13
    31e2:	ef 92       	push	r14
    31e4:	ff 92       	push	r15
    31e6:	0f 93       	push	r16
    31e8:	1f 93       	push	r17
    31ea:	cf 93       	push	r28
    31ec:	df 93       	push	r29
    31ee:	5c 01       	movw	r10, r24
    31f0:	8b 01       	movw	r16, r22
    31f2:	eb 01       	movw	r28, r22
    31f4:	9b ef       	ldi	r25, 0xFB	; 251
    31f6:	d9 2e       	mov	r13, r25
    31f8:	20 97       	sbiw	r28, 0x00	; 0
    31fa:	c1 f0       	breq	.+48     	; 0x322c <_Z15USB_RecvControlPvi+0x50>
    31fc:	7e 01       	movw	r14, r28
    31fe:	c1 34       	cpi	r28, 0x41	; 65
    3200:	d1 05       	cpc	r29, r1
    3202:	1c f0       	brlt	.+6      	; 0x320a <_Z15USB_RecvControlPvi+0x2e>
    3204:	80 e4       	ldi	r24, 0x40	; 64
    3206:	e8 2e       	mov	r14, r24
    3208:	f1 2c       	mov	r15, r1
    320a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    320e:	82 ff       	sbrs	r24, 2
    3210:	fc cf       	rjmp	.-8      	; 0x320a <_Z15USB_RecvControlPvi+0x2e>
    3212:	c8 01       	movw	r24, r16
    3214:	8c 1b       	sub	r24, r28
    3216:	9d 0b       	sbc	r25, r29
    3218:	6e 2d       	mov	r22, r14
    321a:	8a 0d       	add	r24, r10
    321c:	9b 1d       	adc	r25, r11
    321e:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <_ZL4RecvPVhh>
    3222:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3226:	ce 19       	sub	r28, r14
    3228:	df 09       	sbc	r29, r15
    322a:	e6 cf       	rjmp	.-52     	; 0x31f8 <_Z15USB_RecvControlPvi+0x1c>
    322c:	c8 01       	movw	r24, r16
    322e:	df 91       	pop	r29
    3230:	cf 91       	pop	r28
    3232:	1f 91       	pop	r17
    3234:	0f 91       	pop	r16
    3236:	ff 90       	pop	r15
    3238:	ef 90       	pop	r14
    323a:	df 90       	pop	r13
    323c:	bf 90       	pop	r11
    323e:	af 90       	pop	r10
    3240:	08 95       	ret

00003242 <__vector_11>:
    3242:	1f 92       	push	r1
    3244:	0f 92       	push	r0
    3246:	0f b6       	in	r0, 0x3f	; 63
    3248:	0f 92       	push	r0
    324a:	11 24       	eor	r1, r1
    324c:	cf 92       	push	r12
    324e:	df 92       	push	r13
    3250:	ef 92       	push	r14
    3252:	ff 92       	push	r15
    3254:	0f 93       	push	r16
    3256:	1f 93       	push	r17
    3258:	2f 93       	push	r18
    325a:	3f 93       	push	r19
    325c:	4f 93       	push	r20
    325e:	5f 93       	push	r21
    3260:	6f 93       	push	r22
    3262:	7f 93       	push	r23
    3264:	8f 93       	push	r24
    3266:	9f 93       	push	r25
    3268:	af 93       	push	r26
    326a:	bf 93       	push	r27
    326c:	ef 93       	push	r30
    326e:	ff 93       	push	r31
    3270:	cf 93       	push	r28
    3272:	df 93       	push	r29
    3274:	cd b7       	in	r28, 0x3d	; 61
    3276:	de b7       	in	r29, 0x3e	; 62
    3278:	6c 97       	sbiw	r28, 0x1c	; 28
    327a:	de bf       	out	0x3e, r29	; 62
    327c:	cd bf       	out	0x3d, r28	; 61
    327e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3282:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3286:	83 ff       	sbrs	r24, 3
    3288:	17 c1       	rjmp	.+558    	; 0x34b8 <__vector_11+0x276>
    328a:	68 e0       	ldi	r22, 0x08	; 8
    328c:	ce 01       	movw	r24, r28
    328e:	45 96       	adiw	r24, 0x15	; 21
    3290:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <_ZL4RecvPVhh>
    3294:	82 ef       	ldi	r24, 0xF2	; 242
    3296:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    329a:	8d 89       	ldd	r24, Y+21	; 0x15
    329c:	87 ff       	sbrs	r24, 7
    329e:	05 c0       	rjmp	.+10     	; 0x32aa <__vector_11+0x68>
    32a0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    32a4:	90 ff       	sbrs	r25, 0
    32a6:	fc cf       	rjmp	.-8      	; 0x32a0 <__vector_11+0x5e>
    32a8:	03 c0       	rjmp	.+6      	; 0x32b0 <__vector_11+0x6e>
    32aa:	9e ef       	ldi	r25, 0xFE	; 254
    32ac:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    32b0:	98 2f       	mov	r25, r24
    32b2:	90 76       	andi	r25, 0x60	; 96
    32b4:	09 f0       	breq	.+2      	; 0x32b8 <__vector_11+0x76>
    32b6:	d8 c0       	rjmp	.+432    	; 0x3468 <__vector_11+0x226>
    32b8:	9e 89       	ldd	r25, Y+22	; 0x16
    32ba:	4f 89       	ldd	r20, Y+23	; 0x17
    32bc:	58 8d       	ldd	r21, Y+24	; 0x18
    32be:	2f 89       	ldd	r18, Y+23	; 0x17
    32c0:	18 8d       	ldd	r17, Y+24	; 0x18
    32c2:	91 11       	cpse	r25, r1
    32c4:	0c c0       	rjmp	.+24     	; 0x32de <__vector_11+0x9c>
    32c6:	80 38       	cpi	r24, 0x80	; 128
    32c8:	29 f4       	brne	.+10     	; 0x32d4 <__vector_11+0x92>
    32ca:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <_usbCurrentStatus>
    32ce:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    32d2:	02 c0       	rjmp	.+4      	; 0x32d8 <__vector_11+0x96>
    32d4:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    32d8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    32dc:	e6 c0       	rjmp	.+460    	; 0x34aa <__vector_11+0x268>
    32de:	91 30       	cpi	r25, 0x01	; 1
    32e0:	51 f4       	brne	.+20     	; 0x32f6 <__vector_11+0xb4>
    32e2:	81 11       	cpse	r24, r1
    32e4:	e2 c0       	rjmp	.+452    	; 0x34aa <__vector_11+0x268>
    32e6:	41 30       	cpi	r20, 0x01	; 1
    32e8:	51 05       	cpc	r21, r1
    32ea:	09 f0       	breq	.+2      	; 0x32ee <__vector_11+0xac>
    32ec:	de c0       	rjmp	.+444    	; 0x34aa <__vector_11+0x268>
    32ee:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <_usbCurrentStatus>
    32f2:	8d 7f       	andi	r24, 0xFD	; 253
    32f4:	0b c0       	rjmp	.+22     	; 0x330c <__vector_11+0xca>
    32f6:	93 30       	cpi	r25, 0x03	; 3
    32f8:	61 f4       	brne	.+24     	; 0x3312 <__vector_11+0xd0>
    32fa:	81 11       	cpse	r24, r1
    32fc:	d6 c0       	rjmp	.+428    	; 0x34aa <__vector_11+0x268>
    32fe:	41 30       	cpi	r20, 0x01	; 1
    3300:	51 05       	cpc	r21, r1
    3302:	09 f0       	breq	.+2      	; 0x3306 <__vector_11+0xc4>
    3304:	d2 c0       	rjmp	.+420    	; 0x34aa <__vector_11+0x268>
    3306:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <_usbCurrentStatus>
    330a:	82 60       	ori	r24, 0x02	; 2
    330c:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <_usbCurrentStatus>
    3310:	cc c0       	rjmp	.+408    	; 0x34aa <__vector_11+0x268>
    3312:	95 30       	cpi	r25, 0x05	; 5
    3314:	49 f4       	brne	.+18     	; 0x3328 <__vector_11+0xe6>
    3316:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    331a:	80 ff       	sbrs	r24, 0
    331c:	fc cf       	rjmp	.-8      	; 0x3316 <__vector_11+0xd4>
    331e:	82 2f       	mov	r24, r18
    3320:	80 68       	ori	r24, 0x80	; 128
    3322:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    3326:	c1 c0       	rjmp	.+386    	; 0x34aa <__vector_11+0x268>
    3328:	96 30       	cpi	r25, 0x06	; 6
    332a:	09 f0       	breq	.+2      	; 0x332e <__vector_11+0xec>
    332c:	70 c0       	rjmp	.+224    	; 0x340e <__vector_11+0x1cc>
    332e:	eb 8c       	ldd	r14, Y+27	; 0x1b
    3330:	fc 8c       	ldd	r15, Y+28	; 0x1c
    3332:	12 30       	cpi	r17, 0x02	; 2
    3334:	69 f5       	brne	.+90     	; 0x3390 <__vector_11+0x14e>
    3336:	80 e0       	ldi	r24, 0x00	; 0
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	0e 94 bc 18 	call	0x3178	; 0x3178 <_Z11InitControli>
    333e:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <_ZL14SendInterfacesv>
    3342:	99 e0       	ldi	r25, 0x09	; 9
    3344:	9e 01       	movw	r18, r28
    3346:	2f 5f       	subi	r18, 0xFF	; 255
    3348:	3f 4f       	sbci	r19, 0xFF	; 255
    334a:	69 01       	movw	r12, r18
    334c:	f9 01       	movw	r30, r18
    334e:	29 2f       	mov	r18, r25
    3350:	11 92       	st	Z+, r1
    3352:	2a 95       	dec	r18
    3354:	e9 f7       	brne	.-6      	; 0x3350 <__vector_11+0x10e>
    3356:	99 83       	std	Y+1, r25	; 0x01
    3358:	1a 83       	std	Y+2, r17	; 0x02
    335a:	91 e0       	ldi	r25, 0x01	; 1
    335c:	9e 83       	std	Y+6, r25	; 0x06
    335e:	90 ea       	ldi	r25, 0xA0	; 160
    3360:	98 87       	std	Y+8, r25	; 0x08
    3362:	9a ef       	ldi	r25, 0xFA	; 250
    3364:	99 87       	std	Y+9, r25	; 0x09
    3366:	20 91 f5 04 	lds	r18, 0x04F5	; 0x8004f5 <_ZL6_cmark>
    336a:	30 91 f6 04 	lds	r19, 0x04F6	; 0x8004f6 <_ZL6_cmark+0x1>
    336e:	27 5f       	subi	r18, 0xF7	; 247
    3370:	3f 4f       	sbci	r19, 0xFF	; 255
    3372:	3c 83       	std	Y+4, r19	; 0x04
    3374:	2b 83       	std	Y+3, r18	; 0x03
    3376:	8d 83       	std	Y+5, r24	; 0x05
    3378:	c7 01       	movw	r24, r14
    337a:	0e 94 bc 18 	call	0x3178	; 0x3178 <_Z11InitControli>
    337e:	49 e0       	ldi	r20, 0x09	; 9
    3380:	50 e0       	ldi	r21, 0x00	; 0
    3382:	b6 01       	movw	r22, r12
    3384:	80 e0       	ldi	r24, 0x00	; 0
    3386:	0e 94 c7 18 	call	0x318e	; 0x318e <_Z15USB_SendControlhPKvi>
    338a:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <_ZL14SendInterfacesv>
    338e:	8d c0       	rjmp	.+282    	; 0x34aa <__vector_11+0x268>
    3390:	c7 01       	movw	r24, r14
    3392:	0e 94 bc 18 	call	0x3178	; 0x3178 <_Z11InitControli>
    3396:	0e 94 56 1f 	call	0x3eac	; 0x3eac <_Z12PluggableUSBv>
    339a:	be 01       	movw	r22, r28
    339c:	6b 5e       	subi	r22, 0xEB	; 235
    339e:	7f 4f       	sbci	r23, 0xFF	; 255
    33a0:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    33a4:	00 97       	sbiw	r24, 0x00	; 0
    33a6:	19 f0       	breq	.+6      	; 0x33ae <__vector_11+0x16c>
    33a8:	0c f0       	brlt	.+2      	; 0x33ac <__vector_11+0x16a>
    33aa:	7f c0       	rjmp	.+254    	; 0x34aa <__vector_11+0x268>
    33ac:	82 c0       	rjmp	.+260    	; 0x34b2 <__vector_11+0x270>
    33ae:	11 30       	cpi	r17, 0x01	; 1
    33b0:	09 f4       	brne	.+2      	; 0x33b4 <__vector_11+0x172>
    33b2:	70 c0       	rjmp	.+224    	; 0x3494 <__vector_11+0x252>
    33b4:	13 30       	cpi	r17, 0x03	; 3
    33b6:	09 f0       	breq	.+2      	; 0x33ba <__vector_11+0x178>
    33b8:	7c c0       	rjmp	.+248    	; 0x34b2 <__vector_11+0x270>
    33ba:	8f 89       	ldd	r24, Y+23	; 0x17
    33bc:	88 23       	and	r24, r24
    33be:	09 f4       	brne	.+2      	; 0x33c2 <__vector_11+0x180>
    33c0:	6c c0       	rjmp	.+216    	; 0x349a <__vector_11+0x258>
    33c2:	82 30       	cpi	r24, 0x02	; 2
    33c4:	29 f4       	brne	.+10     	; 0x33d0 <__vector_11+0x18e>
    33c6:	40 e8       	ldi	r20, 0x80	; 128
    33c8:	60 e1       	ldi	r22, 0x10	; 16
    33ca:	88 ee       	ldi	r24, 0xE8	; 232
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	06 c0       	rjmp	.+12     	; 0x33dc <__vector_11+0x19a>
    33d0:	81 30       	cpi	r24, 0x01	; 1
    33d2:	39 f4       	brne	.+14     	; 0x33e2 <__vector_11+0x1a0>
    33d4:	40 e8       	ldi	r20, 0x80	; 128
    33d6:	6b e0       	ldi	r22, 0x0B	; 11
    33d8:	8c ed       	ldi	r24, 0xDC	; 220
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <_ZL24USB_SendStringDescriptorPKhhh>
    33e0:	56 c0       	rjmp	.+172    	; 0x348e <__vector_11+0x24c>
    33e2:	83 30       	cpi	r24, 0x03	; 3
    33e4:	09 f0       	breq	.+2      	; 0x33e8 <__vector_11+0x1a6>
    33e6:	65 c0       	rjmp	.+202    	; 0x34b2 <__vector_11+0x270>
    33e8:	0e 94 56 1f 	call	0x3eac	; 0x3eac <_Z12PluggableUSBv>
    33ec:	8e 01       	movw	r16, r28
    33ee:	0f 5f       	subi	r16, 0xFF	; 255
    33f0:	1f 4f       	sbci	r17, 0xFF	; 255
    33f2:	b8 01       	movw	r22, r16
    33f4:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <_ZN13PluggableUSB_12getShortNameEPc>
    33f8:	f8 01       	movw	r30, r16
    33fa:	01 90       	ld	r0, Z+
    33fc:	00 20       	and	r0, r0
    33fe:	e9 f7       	brne	.-6      	; 0x33fa <__vector_11+0x1b8>
    3400:	31 97       	sbiw	r30, 0x01	; 1
    3402:	bf 01       	movw	r22, r30
    3404:	60 1b       	sub	r22, r16
    3406:	71 0b       	sbc	r23, r17
    3408:	40 e0       	ldi	r20, 0x00	; 0
    340a:	c8 01       	movw	r24, r16
    340c:	e7 cf       	rjmp	.-50     	; 0x33dc <__vector_11+0x19a>
    340e:	97 30       	cpi	r25, 0x07	; 7
    3410:	09 f4       	brne	.+2      	; 0x3414 <__vector_11+0x1d2>
    3412:	4f c0       	rjmp	.+158    	; 0x34b2 <__vector_11+0x270>
    3414:	98 30       	cpi	r25, 0x08	; 8
    3416:	21 f4       	brne	.+8      	; 0x3420 <__vector_11+0x1de>
    3418:	81 e0       	ldi	r24, 0x01	; 1
    341a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    341e:	45 c0       	rjmp	.+138    	; 0x34aa <__vector_11+0x268>
    3420:	99 30       	cpi	r25, 0x09	; 9
    3422:	09 f0       	breq	.+2      	; 0x3426 <__vector_11+0x1e4>
    3424:	42 c0       	rjmp	.+132    	; 0x34aa <__vector_11+0x268>
    3426:	83 70       	andi	r24, 0x03	; 3
    3428:	09 f0       	breq	.+2      	; 0x342c <__vector_11+0x1ea>
    342a:	43 c0       	rjmp	.+134    	; 0x34b2 <__vector_11+0x270>
    342c:	eb e0       	ldi	r30, 0x0B	; 11
    342e:	f1 e0       	ldi	r31, 0x01	; 1
    3430:	81 e0       	ldi	r24, 0x01	; 1
    3432:	31 e0       	ldi	r19, 0x01	; 1
    3434:	96 e3       	ldi	r25, 0x36	; 54
    3436:	20 81       	ld	r18, Z
    3438:	21 11       	cpse	r18, r1
    343a:	09 c0       	rjmp	.+18     	; 0x344e <__vector_11+0x20c>
    343c:	8e e7       	ldi	r24, 0x7E	; 126
    343e:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    3442:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    3446:	8f 89       	ldd	r24, Y+23	; 0x17
    3448:	80 93 f9 04 	sts	0x04F9, r24	; 0x8004f9 <_usbConfiguration>
    344c:	2e c0       	rjmp	.+92     	; 0x34aa <__vector_11+0x268>
    344e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3452:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    3456:	21 91       	ld	r18, Z+
    3458:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    345c:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    3460:	8f 5f       	subi	r24, 0xFF	; 255
    3462:	87 30       	cpi	r24, 0x07	; 7
    3464:	41 f7       	brne	.-48     	; 0x3436 <__vector_11+0x1f4>
    3466:	ea cf       	rjmp	.-44     	; 0x343c <__vector_11+0x1fa>
    3468:	8b 8d       	ldd	r24, Y+27	; 0x1b
    346a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    346c:	0e 94 bc 18 	call	0x3178	; 0x3178 <_Z11InitControli>
    3470:	89 8d       	ldd	r24, Y+25	; 0x19
    3472:	81 11       	cpse	r24, r1
    3474:	05 c0       	rjmp	.+10     	; 0x3480 <__vector_11+0x23e>
    3476:	ce 01       	movw	r24, r28
    3478:	45 96       	adiw	r24, 0x15	; 21
    347a:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <_Z9CDC_SetupR8USBSetup>
    347e:	07 c0       	rjmp	.+14     	; 0x348e <__vector_11+0x24c>
    3480:	0e 94 56 1f 	call	0x3eac	; 0x3eac <_Z12PluggableUSBv>
    3484:	be 01       	movw	r22, r28
    3486:	6b 5e       	subi	r22, 0xEB	; 235
    3488:	7f 4f       	sbci	r23, 0xFF	; 255
    348a:	0e 94 38 1f 	call	0x3e70	; 0x3e70 <_ZN13PluggableUSB_5setupER8USBSetup>
    348e:	88 23       	and	r24, r24
    3490:	81 f0       	breq	.+32     	; 0x34b2 <__vector_11+0x270>
    3492:	0b c0       	rjmp	.+22     	; 0x34aa <__vector_11+0x268>
    3494:	6a ec       	ldi	r22, 0xCA	; 202
    3496:	70 e0       	ldi	r23, 0x00	; 0
    3498:	02 c0       	rjmp	.+4      	; 0x349e <__vector_11+0x25c>
    349a:	69 ef       	ldi	r22, 0xF9	; 249
    349c:	70 e0       	ldi	r23, 0x00	; 0
    349e:	fb 01       	movw	r30, r22
    34a0:	44 91       	lpm	r20, Z
    34a2:	50 e0       	ldi	r21, 0x00	; 0
    34a4:	80 e8       	ldi	r24, 0x80	; 128
    34a6:	0e 94 c7 18 	call	0x318e	; 0x318e <_Z15USB_SendControlhPKvi>
    34aa:	8e ef       	ldi	r24, 0xFE	; 254
    34ac:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    34b0:	03 c0       	rjmp	.+6      	; 0x34b8 <__vector_11+0x276>
    34b2:	81 e2       	ldi	r24, 0x21	; 33
    34b4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    34b8:	6c 96       	adiw	r28, 0x1c	; 28
    34ba:	0f b6       	in	r0, 0x3f	; 63
    34bc:	f8 94       	cli
    34be:	de bf       	out	0x3e, r29	; 62
    34c0:	0f be       	out	0x3f, r0	; 63
    34c2:	cd bf       	out	0x3d, r28	; 61
    34c4:	df 91       	pop	r29
    34c6:	cf 91       	pop	r28
    34c8:	ff 91       	pop	r31
    34ca:	ef 91       	pop	r30
    34cc:	bf 91       	pop	r27
    34ce:	af 91       	pop	r26
    34d0:	9f 91       	pop	r25
    34d2:	8f 91       	pop	r24
    34d4:	7f 91       	pop	r23
    34d6:	6f 91       	pop	r22
    34d8:	5f 91       	pop	r21
    34da:	4f 91       	pop	r20
    34dc:	3f 91       	pop	r19
    34de:	2f 91       	pop	r18
    34e0:	1f 91       	pop	r17
    34e2:	0f 91       	pop	r16
    34e4:	ff 90       	pop	r15
    34e6:	ef 90       	pop	r14
    34e8:	df 90       	pop	r13
    34ea:	cf 90       	pop	r12
    34ec:	0f 90       	pop	r0
    34ee:	0f be       	out	0x3f, r0	; 63
    34f0:	0f 90       	pop	r0
    34f2:	1f 90       	pop	r1
    34f4:	18 95       	reti

000034f6 <_Z9USB_Flushh>:
    34f6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    34fa:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    34fe:	88 23       	and	r24, r24
    3500:	19 f0       	breq	.+6      	; 0x3508 <_Z9USB_Flushh+0x12>
    3502:	8a e3       	ldi	r24, 0x3A	; 58
    3504:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3508:	08 95       	ret

0000350a <__vector_10>:
    350a:	1f 92       	push	r1
    350c:	0f 92       	push	r0
    350e:	0f b6       	in	r0, 0x3f	; 63
    3510:	0f 92       	push	r0
    3512:	11 24       	eor	r1, r1
    3514:	2f 93       	push	r18
    3516:	3f 93       	push	r19
    3518:	4f 93       	push	r20
    351a:	5f 93       	push	r21
    351c:	6f 93       	push	r22
    351e:	7f 93       	push	r23
    3520:	8f 93       	push	r24
    3522:	9f 93       	push	r25
    3524:	af 93       	push	r26
    3526:	bf 93       	push	r27
    3528:	cf 93       	push	r28
    352a:	ef 93       	push	r30
    352c:	ff 93       	push	r31
    352e:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    3532:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    3536:	83 7f       	andi	r24, 0xF3	; 243
    3538:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    353c:	c3 ff       	sbrs	r28, 3
    353e:	0f c0       	rjmp	.+30     	; 0x355e <__vector_10+0x54>
    3540:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3544:	81 e0       	ldi	r24, 0x01	; 1
    3546:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    354a:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    354e:	82 e3       	ldi	r24, 0x32	; 50
    3550:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    3554:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <_usbConfiguration>
    3558:	88 e0       	ldi	r24, 0x08	; 8
    355a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    355e:	c2 ff       	sbrs	r28, 2
    3560:	19 c0       	rjmp	.+50     	; 0x3594 <__vector_10+0x8a>
    3562:	83 e0       	ldi	r24, 0x03	; 3
    3564:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <_Z9USB_Flushh>
    3568:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <TxLEDPulse>
    356c:	88 23       	and	r24, r24
    356e:	39 f0       	breq	.+14     	; 0x357e <__vector_10+0x74>
    3570:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <TxLEDPulse>
    3574:	81 50       	subi	r24, 0x01	; 1
    3576:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <TxLEDPulse>
    357a:	88 23       	and	r24, r24
    357c:	89 f1       	breq	.+98     	; 0x35e0 <__vector_10+0xd6>
    357e:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <RxLEDPulse>
    3582:	88 23       	and	r24, r24
    3584:	39 f0       	breq	.+14     	; 0x3594 <__vector_10+0x8a>
    3586:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <RxLEDPulse>
    358a:	81 50       	subi	r24, 0x01	; 1
    358c:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <RxLEDPulse>
    3590:	88 23       	and	r24, r24
    3592:	41 f1       	breq	.+80     	; 0x35e4 <__vector_10+0xda>
    3594:	c4 ff       	sbrs	r28, 4
    3596:	10 c0       	rjmp	.+32     	; 0x35b8 <__vector_10+0xae>
    3598:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    359c:	8e 7e       	andi	r24, 0xEE	; 238
    359e:	81 60       	ori	r24, 0x01	; 1
    35a0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    35a4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    35a8:	8f 7e       	andi	r24, 0xEF	; 239
    35aa:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    35ae:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <_usbSuspendState>
    35b2:	8e 7e       	andi	r24, 0xEE	; 238
    35b4:	80 61       	ori	r24, 0x10	; 16
    35b6:	11 c0       	rjmp	.+34     	; 0x35da <__vector_10+0xd0>
    35b8:	c0 ff       	sbrs	r28, 0
    35ba:	16 c0       	rjmp	.+44     	; 0x35e8 <__vector_10+0xde>
    35bc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    35c0:	8e 7e       	andi	r24, 0xEE	; 238
    35c2:	80 61       	ori	r24, 0x10	; 16
    35c4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    35c8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    35cc:	8e 7e       	andi	r24, 0xEE	; 238
    35ce:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    35d2:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <_usbSuspendState>
    35d6:	8e 7e       	andi	r24, 0xEE	; 238
    35d8:	81 60       	ori	r24, 0x01	; 1
    35da:	80 93 f7 04 	sts	0x04F7, r24	; 0x8004f7 <_usbSuspendState>
    35de:	04 c0       	rjmp	.+8      	; 0x35e8 <__vector_10+0xde>
    35e0:	5d 9a       	sbi	0x0b, 5	; 11
    35e2:	cd cf       	rjmp	.-102    	; 0x357e <__vector_10+0x74>
    35e4:	28 9a       	sbi	0x05, 0	; 5
    35e6:	d6 cf       	rjmp	.-84     	; 0x3594 <__vector_10+0x8a>
    35e8:	ff 91       	pop	r31
    35ea:	ef 91       	pop	r30
    35ec:	cf 91       	pop	r28
    35ee:	bf 91       	pop	r27
    35f0:	af 91       	pop	r26
    35f2:	9f 91       	pop	r25
    35f4:	8f 91       	pop	r24
    35f6:	7f 91       	pop	r23
    35f8:	6f 91       	pop	r22
    35fa:	5f 91       	pop	r21
    35fc:	4f 91       	pop	r20
    35fe:	3f 91       	pop	r19
    3600:	2f 91       	pop	r18
    3602:	0f 90       	pop	r0
    3604:	0f be       	out	0x3f, r0	; 63
    3606:	0f 90       	pop	r0
    3608:	1f 90       	pop	r1
    360a:	18 95       	reti

0000360c <_ZN10USBDevice_6attachEv>:
{
}

void USBDevice_::attach()
{
	_usbConfiguration = 0;
    360c:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <_usbConfiguration>
	_usbCurrentStatus = 0;
    3610:	10 92 f8 04 	sts	0x04F8, r1	; 0x8004f8 <_usbCurrentStatus>
	_usbSuspendState = 0;
    3614:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <_usbSuspendState>
	USB_ClockEnable();
    3618:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <_ZL15USB_ClockEnablev>

	UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear already pending WAKEUP / SUSPEND requests
    361c:	e1 ee       	ldi	r30, 0xE1	; 225
    361e:	f0 e0       	ldi	r31, 0x00	; 0
    3620:	80 81       	ld	r24, Z
    3622:	8e 7e       	andi	r24, 0xEE	; 238
    3624:	80 83       	st	Z, r24
	UDIEN = (1<<EORSTE) | (1<<SOFE) | (1<<SUSPE);	// Enable interrupts for EOR (End of Reset), SOF (start of frame) and SUSPEND
    3626:	8d e0       	ldi	r24, 0x0D	; 13
    3628:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	
	TX_RX_LED_INIT;
    362c:	55 9a       	sbi	0x0a, 5	; 10
    362e:	20 9a       	sbi	0x04, 0	; 4
    3630:	08 95       	ret

00003632 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    3632:	1f 92       	push	r1
    3634:	0f 92       	push	r0
    3636:	0f b6       	in	r0, 0x3f	; 63
    3638:	0f 92       	push	r0
    363a:	11 24       	eor	r1, r1
    363c:	2f 93       	push	r18
    363e:	3f 93       	push	r19
    3640:	8f 93       	push	r24
    3642:	9f 93       	push	r25
    3644:	af 93       	push	r26
    3646:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    3648:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <timer0_millis>
    364c:	90 91 fe 04 	lds	r25, 0x04FE	; 0x8004fe <timer0_millis+0x1>
    3650:	a0 91 ff 04 	lds	r26, 0x04FF	; 0x8004ff <timer0_millis+0x2>
    3654:	b0 91 00 05 	lds	r27, 0x0500	; 0x800500 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    3658:	30 91 fc 04 	lds	r19, 0x04FC	; 0x8004fc <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    365c:	23 e0       	ldi	r18, 0x03	; 3
    365e:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    3660:	2d 37       	cpi	r18, 0x7D	; 125
    3662:	20 f4       	brcc	.+8      	; 0x366c <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    3664:	01 96       	adiw	r24, 0x01	; 1
    3666:	a1 1d       	adc	r26, r1
    3668:	b1 1d       	adc	r27, r1
    366a:	05 c0       	rjmp	.+10     	; 0x3676 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    366c:	26 e8       	ldi	r18, 0x86	; 134
    366e:	23 0f       	add	r18, r19
		m += 1;
    3670:	02 96       	adiw	r24, 0x02	; 2
    3672:	a1 1d       	adc	r26, r1
    3674:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    3676:	20 93 fc 04 	sts	0x04FC, r18	; 0x8004fc <timer0_fract>
	timer0_millis = m;
    367a:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <timer0_millis>
    367e:	90 93 fe 04 	sts	0x04FE, r25	; 0x8004fe <timer0_millis+0x1>
    3682:	a0 93 ff 04 	sts	0x04FF, r26	; 0x8004ff <timer0_millis+0x2>
    3686:	b0 93 00 05 	sts	0x0500, r27	; 0x800500 <timer0_millis+0x3>
	timer0_overflow_count++;
    368a:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <timer0_overflow_count>
    368e:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <timer0_overflow_count+0x1>
    3692:	a0 91 03 05 	lds	r26, 0x0503	; 0x800503 <timer0_overflow_count+0x2>
    3696:	b0 91 04 05 	lds	r27, 0x0504	; 0x800504 <timer0_overflow_count+0x3>
    369a:	01 96       	adiw	r24, 0x01	; 1
    369c:	a1 1d       	adc	r26, r1
    369e:	b1 1d       	adc	r27, r1
    36a0:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <timer0_overflow_count>
    36a4:	90 93 02 05 	sts	0x0502, r25	; 0x800502 <timer0_overflow_count+0x1>
    36a8:	a0 93 03 05 	sts	0x0503, r26	; 0x800503 <timer0_overflow_count+0x2>
    36ac:	b0 93 04 05 	sts	0x0504, r27	; 0x800504 <timer0_overflow_count+0x3>
}
    36b0:	bf 91       	pop	r27
    36b2:	af 91       	pop	r26
    36b4:	9f 91       	pop	r25
    36b6:	8f 91       	pop	r24
    36b8:	3f 91       	pop	r19
    36ba:	2f 91       	pop	r18
    36bc:	0f 90       	pop	r0
    36be:	0f be       	out	0x3f, r0	; 63
    36c0:	0f 90       	pop	r0
    36c2:	1f 90       	pop	r1
    36c4:	18 95       	reti

000036c6 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    36c6:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    36c8:	f8 94       	cli
	m = timer0_millis;
    36ca:	60 91 fd 04 	lds	r22, 0x04FD	; 0x8004fd <timer0_millis>
    36ce:	70 91 fe 04 	lds	r23, 0x04FE	; 0x8004fe <timer0_millis+0x1>
    36d2:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <timer0_millis+0x2>
    36d6:	90 91 00 05 	lds	r25, 0x0500	; 0x800500 <timer0_millis+0x3>
	SREG = oldSREG;
    36da:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    36dc:	08 95       	ret

000036de <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    36de:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    36e0:	f8 94       	cli
	m = timer0_overflow_count;
    36e2:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <timer0_overflow_count>
    36e6:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <timer0_overflow_count+0x1>
    36ea:	a0 91 03 05 	lds	r26, 0x0503	; 0x800503 <timer0_overflow_count+0x2>
    36ee:	b0 91 04 05 	lds	r27, 0x0504	; 0x800504 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    36f2:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    36f4:	a8 9b       	sbis	0x15, 0	; 21
    36f6:	05 c0       	rjmp	.+10     	; 0x3702 <micros+0x24>
    36f8:	2f 3f       	cpi	r18, 0xFF	; 255
    36fa:	19 f0       	breq	.+6      	; 0x3702 <micros+0x24>
		m++;
    36fc:	01 96       	adiw	r24, 0x01	; 1
    36fe:	a1 1d       	adc	r26, r1
    3700:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    3702:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    3704:	ba 2f       	mov	r27, r26
    3706:	a9 2f       	mov	r26, r25
    3708:	98 2f       	mov	r25, r24
    370a:	88 27       	eor	r24, r24
    370c:	82 0f       	add	r24, r18
    370e:	91 1d       	adc	r25, r1
    3710:	a1 1d       	adc	r26, r1
    3712:	b1 1d       	adc	r27, r1
    3714:	bc 01       	movw	r22, r24
    3716:	cd 01       	movw	r24, r26
    3718:	42 e0       	ldi	r20, 0x02	; 2
    371a:	66 0f       	add	r22, r22
    371c:	77 1f       	adc	r23, r23
    371e:	88 1f       	adc	r24, r24
    3720:	99 1f       	adc	r25, r25
    3722:	4a 95       	dec	r20
    3724:	d1 f7       	brne	.-12     	; 0x371a <micros+0x3c>
}
    3726:	08 95       	ret

00003728 <delay>:

void delay(unsigned long ms)
{
    3728:	8f 92       	push	r8
    372a:	9f 92       	push	r9
    372c:	af 92       	push	r10
    372e:	bf 92       	push	r11
    3730:	cf 92       	push	r12
    3732:	df 92       	push	r13
    3734:	ef 92       	push	r14
    3736:	ff 92       	push	r15
    3738:	6b 01       	movw	r12, r22
    373a:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    373c:	0e 94 6f 1b 	call	0x36de	; 0x36de <micros>
    3740:	4b 01       	movw	r8, r22
    3742:	5c 01       	movw	r10, r24

	while (ms > 0) {
    3744:	c1 14       	cp	r12, r1
    3746:	d1 04       	cpc	r13, r1
    3748:	e1 04       	cpc	r14, r1
    374a:	f1 04       	cpc	r15, r1
    374c:	01 f1       	breq	.+64     	; 0x378e <delay+0x66>
		yield();
    374e:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    3752:	0e 94 6f 1b 	call	0x36de	; 0x36de <micros>
    3756:	dc 01       	movw	r26, r24
    3758:	cb 01       	movw	r24, r22
    375a:	88 19       	sub	r24, r8
    375c:	99 09       	sbc	r25, r9
    375e:	aa 09       	sbc	r26, r10
    3760:	bb 09       	sbc	r27, r11
    3762:	88 3e       	cpi	r24, 0xE8	; 232
    3764:	93 40       	sbci	r25, 0x03	; 3
    3766:	a1 05       	cpc	r26, r1
    3768:	b1 05       	cpc	r27, r1
    376a:	60 f3       	brcs	.-40     	; 0x3744 <delay+0x1c>
			ms--;
    376c:	21 e0       	ldi	r18, 0x01	; 1
    376e:	c2 1a       	sub	r12, r18
    3770:	d1 08       	sbc	r13, r1
    3772:	e1 08       	sbc	r14, r1
    3774:	f1 08       	sbc	r15, r1
			start += 1000;
    3776:	88 ee       	ldi	r24, 0xE8	; 232
    3778:	88 0e       	add	r8, r24
    377a:	83 e0       	ldi	r24, 0x03	; 3
    377c:	98 1e       	adc	r9, r24
    377e:	a1 1c       	adc	r10, r1
    3780:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    3782:	c1 14       	cp	r12, r1
    3784:	d1 04       	cpc	r13, r1
    3786:	e1 04       	cpc	r14, r1
    3788:	f1 04       	cpc	r15, r1
    378a:	19 f7       	brne	.-58     	; 0x3752 <delay+0x2a>
    378c:	db cf       	rjmp	.-74     	; 0x3744 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    378e:	ff 90       	pop	r15
    3790:	ef 90       	pop	r14
    3792:	df 90       	pop	r13
    3794:	cf 90       	pop	r12
    3796:	bf 90       	pop	r11
    3798:	af 90       	pop	r10
    379a:	9f 90       	pop	r9
    379c:	8f 90       	pop	r8
    379e:	08 95       	ret

000037a0 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    37a0:	82 30       	cpi	r24, 0x02	; 2
    37a2:	91 05       	cpc	r25, r1
    37a4:	38 f0       	brcs	.+14     	; 0x37b4 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    37a6:	88 0f       	add	r24, r24
    37a8:	99 1f       	adc	r25, r25
    37aa:	88 0f       	add	r24, r24
    37ac:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    37ae:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    37b0:	01 97       	sbiw	r24, 0x01	; 1
    37b2:	f1 f7       	brne	.-4      	; 0x37b0 <delayMicroseconds+0x10>
    37b4:	08 95       	ret

000037b6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    37b6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    37b8:	84 b5       	in	r24, 0x24	; 36
    37ba:	82 60       	ori	r24, 0x02	; 2
    37bc:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    37be:	84 b5       	in	r24, 0x24	; 36
    37c0:	81 60       	ori	r24, 0x01	; 1
    37c2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    37c4:	85 b5       	in	r24, 0x25	; 37
    37c6:	82 60       	ori	r24, 0x02	; 2
    37c8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    37ca:	85 b5       	in	r24, 0x25	; 37
    37cc:	81 60       	ori	r24, 0x01	; 1
    37ce:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    37d0:	ee e6       	ldi	r30, 0x6E	; 110
    37d2:	f0 e0       	ldi	r31, 0x00	; 0
    37d4:	80 81       	ld	r24, Z
    37d6:	81 60       	ori	r24, 0x01	; 1
    37d8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    37da:	e1 e8       	ldi	r30, 0x81	; 129
    37dc:	f0 e0       	ldi	r31, 0x00	; 0
    37de:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    37e0:	80 81       	ld	r24, Z
    37e2:	82 60       	ori	r24, 0x02	; 2
    37e4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    37e6:	80 81       	ld	r24, Z
    37e8:	81 60       	ori	r24, 0x01	; 1
    37ea:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    37ec:	e0 e8       	ldi	r30, 0x80	; 128
    37ee:	f0 e0       	ldi	r31, 0x00	; 0
    37f0:	80 81       	ld	r24, Z
    37f2:	81 60       	ori	r24, 0x01	; 1
    37f4:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    37f6:	e1 e9       	ldi	r30, 0x91	; 145
    37f8:	f0 e0       	ldi	r31, 0x00	; 0
    37fa:	80 81       	ld	r24, Z
    37fc:	82 60       	ori	r24, 0x02	; 2
    37fe:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    3800:	80 81       	ld	r24, Z
    3802:	81 60       	ori	r24, 0x01	; 1
    3804:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    3806:	e0 e9       	ldi	r30, 0x90	; 144
    3808:	f0 e0       	ldi	r31, 0x00	; 0
    380a:	80 81       	ld	r24, Z
    380c:	81 60       	ori	r24, 0x01	; 1
    380e:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
    3810:	e1 ec       	ldi	r30, 0xC1	; 193
    3812:	f0 e0       	ldi	r31, 0x00	; 0
    3814:	80 81       	ld	r24, Z
    3816:	84 60       	ori	r24, 0x04	; 4
    3818:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
    381a:	80 81       	ld	r24, Z
    381c:	82 60       	ori	r24, 0x02	; 2
    381e:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    3820:	80 81       	ld	r24, Z
    3822:	81 60       	ori	r24, 0x01	; 1
    3824:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
    3826:	e3 ec       	ldi	r30, 0xC3	; 195
    3828:	f0 e0       	ldi	r31, 0x00	; 0
    382a:	80 81       	ld	r24, Z
    382c:	81 60       	ori	r24, 0x01	; 1
    382e:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
    3830:	e0 ec       	ldi	r30, 0xC0	; 192
    3832:	f0 e0       	ldi	r31, 0x00	; 0
    3834:	80 81       	ld	r24, Z
    3836:	82 60       	ori	r24, 0x02	; 2
    3838:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
    383a:	e2 ec       	ldi	r30, 0xC2	; 194
    383c:	f0 e0       	ldi	r31, 0x00	; 0
    383e:	80 81       	ld	r24, Z
    3840:	81 60       	ori	r24, 0x01	; 1
    3842:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3844:	ea e7       	ldi	r30, 0x7A	; 122
    3846:	f0 e0       	ldi	r31, 0x00	; 0
    3848:	80 81       	ld	r24, Z
    384a:	84 60       	ori	r24, 0x04	; 4
    384c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    384e:	80 81       	ld	r24, Z
    3850:	82 60       	ori	r24, 0x02	; 2
    3852:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3854:	80 81       	ld	r24, Z
    3856:	81 60       	ori	r24, 0x01	; 1
    3858:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    385a:	80 81       	ld	r24, Z
    385c:	80 68       	ori	r24, 0x80	; 128
    385e:	80 83       	st	Z, r24
    3860:	08 95       	ret

00003862 <analogRead>:
{
	uint8_t low, high;

#if defined(analogPinToChannel)
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
    3862:	82 31       	cpi	r24, 0x12	; 18
    3864:	08 f0       	brcs	.+2      	; 0x3868 <analogRead+0x6>
    3866:	82 51       	subi	r24, 0x12	; 18
#endif
	pin = analogPinToChannel(pin);
    3868:	e8 2f       	mov	r30, r24
    386a:	f0 e0       	ldi	r31, 0x00	; 0
    386c:	e3 50       	subi	r30, 0x03	; 3
    386e:	ff 4f       	sbci	r31, 0xFF	; 255
    3870:	e4 91       	lpm	r30, Z
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    3872:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    3876:	e3 fb       	bst	r30, 3
    3878:	22 27       	eor	r18, r18
    387a:	20 f9       	bld	r18, 0
    387c:	30 e0       	ldi	r19, 0x00	; 0
    387e:	95 e0       	ldi	r25, 0x05	; 5
    3880:	22 0f       	add	r18, r18
    3882:	33 1f       	adc	r19, r19
    3884:	9a 95       	dec	r25
    3886:	e1 f7       	brne	.-8      	; 0x3880 <analogRead+0x1e>
    3888:	8f 7d       	andi	r24, 0xDF	; 223
    388a:	28 2b       	or	r18, r24
    388c:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    3890:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <analog_reference>
    3894:	20 e4       	ldi	r18, 0x40	; 64
    3896:	82 9f       	mul	r24, r18
    3898:	c0 01       	movw	r24, r0
    389a:	11 24       	eor	r1, r1
    389c:	e7 70       	andi	r30, 0x07	; 7
    389e:	e8 2b       	or	r30, r24
    38a0:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    38a4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    38a8:	80 64       	ori	r24, 0x40	; 64
    38aa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    38ae:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    38b2:	86 fd       	sbrc	r24, 6
    38b4:	fc cf       	rjmp	.-8      	; 0x38ae <analogRead+0x4c>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    38b6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    38ba:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    38be:	90 e0       	ldi	r25, 0x00	; 0
}
    38c0:	92 2b       	or	r25, r18
    38c2:	08 95       	ret

000038c4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	fc 01       	movw	r30, r24
    38c8:	31 97       	sbiw	r30, 0x01	; 1
    38ca:	ef 30       	cpi	r30, 0x0F	; 15
    38cc:	f1 05       	cpc	r31, r1
    38ce:	b0 f5       	brcc	.+108    	; 0x393c <turnOffPWM+0x78>
    38d0:	ea 5a       	subi	r30, 0xAA	; 170
    38d2:	ff 4f       	sbci	r31, 0xFF	; 255
    38d4:	0c 94 4b 20 	jmp	0x4096	; 0x4096 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    38d8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    38dc:	8f 77       	andi	r24, 0x7F	; 127
    38de:	03 c0       	rjmp	.+6      	; 0x38e6 <turnOffPWM+0x22>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    38e0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    38e4:	8f 7d       	andi	r24, 0xDF	; 223
    38e6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    38ea:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    38ec:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    38f0:	87 7f       	andi	r24, 0xF7	; 247
    38f2:	f9 cf       	rjmp	.-14     	; 0x38e6 <turnOffPWM+0x22>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    38f4:	84 b5       	in	r24, 0x24	; 36
    38f6:	8f 77       	andi	r24, 0x7F	; 127
    38f8:	02 c0       	rjmp	.+4      	; 0x38fe <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    38fa:	84 b5       	in	r24, 0x24	; 36
    38fc:	8f 7d       	andi	r24, 0xDF	; 223
    38fe:	84 bd       	out	0x24, r24	; 36
    3900:	08 95       	ret
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    3902:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    3906:	8f 77       	andi	r24, 0x7F	; 127
    3908:	07 c0       	rjmp	.+14     	; 0x3918 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    390a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    390e:	8f 7d       	andi	r24, 0xDF	; 223
    3910:	03 c0       	rjmp	.+6      	; 0x3918 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    3912:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    3916:	87 7f       	andi	r24, 0xF7	; 247
    3918:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    391c:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    391e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3922:	8f 77       	andi	r24, 0x7F	; 127
    3924:	03 c0       	rjmp	.+6      	; 0x392c <turnOffPWM+0x68>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    3926:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    392a:	8f 7d       	andi	r24, 0xDF	; 223
    392c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3930:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
		#endif			
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
    3932:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    3936:	87 7f       	andi	r24, 0xF7	; 247
    3938:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    393c:	08 95       	ret

0000393e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    393e:	cf 93       	push	r28
    3940:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	fc 01       	movw	r30, r24
    3946:	e8 5d       	subi	r30, 0xD8	; 216
    3948:	fe 4f       	sbci	r31, 0xFE	; 254
    394a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    394c:	fc 01       	movw	r30, r24
    394e:	e9 5b       	subi	r30, 0xB9	; 185
    3950:	fe 4f       	sbci	r31, 0xFE	; 254
    3952:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3954:	88 23       	and	r24, r24
    3956:	61 f1       	breq	.+88     	; 0x39b0 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	88 0f       	add	r24, r24
    395c:	99 1f       	adc	r25, r25
    395e:	fc 01       	movw	r30, r24
    3960:	ee 57       	subi	r30, 0x7E	; 126
    3962:	fe 4f       	sbci	r31, 0xFE	; 254
    3964:	c5 91       	lpm	r28, Z+
    3966:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3968:	fc 01       	movw	r30, r24
    396a:	ec 58       	subi	r30, 0x8C	; 140
    396c:	fe 4f       	sbci	r31, 0xFE	; 254
    396e:	a5 91       	lpm	r26, Z+
    3970:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3972:	61 11       	cpse	r22, r1
    3974:	09 c0       	rjmp	.+18     	; 0x3988 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3976:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3978:	f8 94       	cli
		*reg &= ~bit;
    397a:	88 81       	ld	r24, Y
    397c:	20 95       	com	r18
    397e:	82 23       	and	r24, r18
    3980:	88 83       	st	Y, r24
		*out &= ~bit;
    3982:	ec 91       	ld	r30, X
    3984:	2e 23       	and	r18, r30
    3986:	0b c0       	rjmp	.+22     	; 0x399e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3988:	62 30       	cpi	r22, 0x02	; 2
    398a:	61 f4       	brne	.+24     	; 0x39a4 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    398c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    398e:	f8 94       	cli
		*reg &= ~bit;
    3990:	88 81       	ld	r24, Y
    3992:	32 2f       	mov	r19, r18
    3994:	30 95       	com	r19
    3996:	83 23       	and	r24, r19
    3998:	88 83       	st	Y, r24
		*out |= bit;
    399a:	ec 91       	ld	r30, X
    399c:	2e 2b       	or	r18, r30
    399e:	2c 93       	st	X, r18
		SREG = oldSREG;
    39a0:	9f bf       	out	0x3f, r25	; 63
    39a2:	06 c0       	rjmp	.+12     	; 0x39b0 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    39a4:	8f b7       	in	r24, 0x3f	; 63
                cli();
    39a6:	f8 94       	cli
		*reg |= bit;
    39a8:	e8 81       	ld	r30, Y
    39aa:	2e 2b       	or	r18, r30
    39ac:	28 83       	st	Y, r18
		SREG = oldSREG;
    39ae:	8f bf       	out	0x3f, r24	; 63
	}
}
    39b0:	df 91       	pop	r29
    39b2:	cf 91       	pop	r28
    39b4:	08 95       	ret

000039b6 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    39b6:	1f 93       	push	r17
    39b8:	cf 93       	push	r28
    39ba:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    39bc:	28 2f       	mov	r18, r24
    39be:	30 e0       	ldi	r19, 0x00	; 0
    39c0:	f9 01       	movw	r30, r18
    39c2:	e7 5f       	subi	r30, 0xF7	; 247
    39c4:	fe 4f       	sbci	r31, 0xFE	; 254
    39c6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    39c8:	f9 01       	movw	r30, r18
    39ca:	e8 5d       	subi	r30, 0xD8	; 216
    39cc:	fe 4f       	sbci	r31, 0xFE	; 254
    39ce:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    39d0:	f9 01       	movw	r30, r18
    39d2:	e9 5b       	subi	r30, 0xB9	; 185
    39d4:	fe 4f       	sbci	r31, 0xFE	; 254
    39d6:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    39d8:	cc 23       	and	r28, r28
    39da:	c1 f0       	breq	.+48     	; 0x3a0c <digitalWrite+0x56>
    39dc:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    39de:	81 11       	cpse	r24, r1
    39e0:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <turnOffPWM>

	out = portOutputRegister(port);
    39e4:	ec 2f       	mov	r30, r28
    39e6:	f0 e0       	ldi	r31, 0x00	; 0
    39e8:	ee 0f       	add	r30, r30
    39ea:	ff 1f       	adc	r31, r31
    39ec:	ec 58       	subi	r30, 0x8C	; 140
    39ee:	fe 4f       	sbci	r31, 0xFE	; 254
    39f0:	a5 91       	lpm	r26, Z+
    39f2:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    39f4:	9f b7       	in	r25, 0x3f	; 63
	cli();
    39f6:	f8 94       	cli

	if (val == LOW) {
    39f8:	11 11       	cpse	r17, r1
    39fa:	04 c0       	rjmp	.+8      	; 0x3a04 <digitalWrite+0x4e>
		*out &= ~bit;
    39fc:	8c 91       	ld	r24, X
    39fe:	d0 95       	com	r29
    3a00:	d8 23       	and	r29, r24
    3a02:	02 c0       	rjmp	.+4      	; 0x3a08 <digitalWrite+0x52>
	} else {
		*out |= bit;
    3a04:	ec 91       	ld	r30, X
    3a06:	de 2b       	or	r29, r30
    3a08:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3a0a:	9f bf       	out	0x3f, r25	; 63
}
    3a0c:	df 91       	pop	r29
    3a0e:	cf 91       	pop	r28
    3a10:	1f 91       	pop	r17
    3a12:	08 95       	ret

00003a14 <digitalRead>:

int digitalRead(uint8_t pin)
{
    3a14:	cf 93       	push	r28
    3a16:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3a18:	28 2f       	mov	r18, r24
    3a1a:	30 e0       	ldi	r19, 0x00	; 0
    3a1c:	f9 01       	movw	r30, r18
    3a1e:	e7 5f       	subi	r30, 0xF7	; 247
    3a20:	fe 4f       	sbci	r31, 0xFE	; 254
    3a22:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3a24:	f9 01       	movw	r30, r18
    3a26:	e8 5d       	subi	r30, 0xD8	; 216
    3a28:	fe 4f       	sbci	r31, 0xFE	; 254
    3a2a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3a2c:	f9 01       	movw	r30, r18
    3a2e:	e9 5b       	subi	r30, 0xB9	; 185
    3a30:	fe 4f       	sbci	r31, 0xFE	; 254
    3a32:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    3a34:	cc 23       	and	r28, r28
    3a36:	91 f0       	breq	.+36     	; 0x3a5c <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3a38:	81 11       	cpse	r24, r1
    3a3a:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    3a3e:	ec 2f       	mov	r30, r28
    3a40:	f0 e0       	ldi	r31, 0x00	; 0
    3a42:	ee 0f       	add	r30, r30
    3a44:	ff 1f       	adc	r31, r31
    3a46:	ea 59       	subi	r30, 0x9A	; 154
    3a48:	fe 4f       	sbci	r31, 0xFE	; 254
    3a4a:	a5 91       	lpm	r26, Z+
    3a4c:	b4 91       	lpm	r27, Z
    3a4e:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    3a50:	ed 23       	and	r30, r29
    3a52:	81 e0       	ldi	r24, 0x01	; 1
    3a54:	90 e0       	ldi	r25, 0x00	; 0
    3a56:	21 f4       	brne	.+8      	; 0x3a60 <digitalRead+0x4c>
    3a58:	80 e0       	ldi	r24, 0x00	; 0
    3a5a:	02 c0       	rjmp	.+4      	; 0x3a60 <digitalRead+0x4c>
    3a5c:	80 e0       	ldi	r24, 0x00	; 0
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    3a60:	df 91       	pop	r29
    3a62:	cf 91       	pop	r28
    3a64:	08 95       	ret

00003a66 <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    3a66:	fc 01       	movw	r30, r24
    3a68:	80 81       	ld	r24, Z
    3a6a:	91 81       	ldd	r25, Z+1	; 0x01
    3a6c:	0c 94 fd 20 	jmp	0x41fa	; 0x41fa <free>

00003a70 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    3a70:	cf 93       	push	r28
    3a72:	df 93       	push	r29
    3a74:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    3a76:	88 81       	ld	r24, Y
    3a78:	99 81       	ldd	r25, Y+1	; 0x01
    3a7a:	00 97       	sbiw	r24, 0x00	; 0
    3a7c:	11 f0       	breq	.+4      	; 0x3a82 <_ZN6String10invalidateEv+0x12>
    3a7e:	0e 94 fd 20 	call	0x41fa	; 0x41fa <free>
	buffer = NULL;
    3a82:	19 82       	std	Y+1, r1	; 0x01
    3a84:	18 82       	st	Y, r1
	capacity = len = 0;
    3a86:	1d 82       	std	Y+5, r1	; 0x05
    3a88:	1c 82       	std	Y+4, r1	; 0x04
    3a8a:	1b 82       	std	Y+3, r1	; 0x03
    3a8c:	1a 82       	std	Y+2, r1	; 0x02
}
    3a8e:	df 91       	pop	r29
    3a90:	cf 91       	pop	r28
    3a92:	08 95       	ret

00003a94 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    3a94:	0f 93       	push	r16
    3a96:	1f 93       	push	r17
    3a98:	cf 93       	push	r28
    3a9a:	df 93       	push	r29
    3a9c:	ec 01       	movw	r28, r24
    3a9e:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    3aa0:	6f 5f       	subi	r22, 0xFF	; 255
    3aa2:	7f 4f       	sbci	r23, 0xFF	; 255
    3aa4:	88 81       	ld	r24, Y
    3aa6:	99 81       	ldd	r25, Y+1	; 0x01
    3aa8:	0e 94 86 21 	call	0x430c	; 0x430c <realloc>
	if (newbuffer) {
    3aac:	00 97       	sbiw	r24, 0x00	; 0
    3aae:	31 f0       	breq	.+12     	; 0x3abc <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    3ab0:	99 83       	std	Y+1, r25	; 0x01
    3ab2:	88 83       	st	Y, r24
		capacity = maxStrLen;
    3ab4:	1b 83       	std	Y+3, r17	; 0x03
    3ab6:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    3ab8:	81 e0       	ldi	r24, 0x01	; 1
    3aba:	01 c0       	rjmp	.+2      	; 0x3abe <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    3abc:	80 e0       	ldi	r24, 0x00	; 0
}
    3abe:	df 91       	pop	r29
    3ac0:	cf 91       	pop	r28
    3ac2:	1f 91       	pop	r17
    3ac4:	0f 91       	pop	r16
    3ac6:	08 95       	ret

00003ac8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    3ac8:	cf 93       	push	r28
    3aca:	df 93       	push	r29
    3acc:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    3ace:	88 81       	ld	r24, Y
    3ad0:	99 81       	ldd	r25, Y+1	; 0x01
    3ad2:	89 2b       	or	r24, r25
    3ad4:	29 f0       	breq	.+10     	; 0x3ae0 <_ZN6String7reserveEj+0x18>
    3ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    3ada:	86 17       	cp	r24, r22
    3adc:	97 07       	cpc	r25, r23
    3ade:	60 f4       	brcc	.+24     	; 0x3af8 <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    3ae0:	ce 01       	movw	r24, r28
    3ae2:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <_ZN6String12changeBufferEj>
    3ae6:	88 23       	and	r24, r24
    3ae8:	41 f0       	breq	.+16     	; 0x3afa <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    3aea:	8c 81       	ldd	r24, Y+4	; 0x04
    3aec:	9d 81       	ldd	r25, Y+5	; 0x05
    3aee:	89 2b       	or	r24, r25
    3af0:	19 f4       	brne	.+6      	; 0x3af8 <_ZN6String7reserveEj+0x30>
    3af2:	e8 81       	ld	r30, Y
    3af4:	f9 81       	ldd	r31, Y+1	; 0x01
    3af6:	10 82       	st	Z, r1
    3af8:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    3afa:	df 91       	pop	r29
    3afc:	cf 91       	pop	r28
    3afe:	08 95       	ret

00003b00 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    3b00:	ef 92       	push	r14
    3b02:	ff 92       	push	r15
    3b04:	0f 93       	push	r16
    3b06:	1f 93       	push	r17
    3b08:	cf 93       	push	r28
    3b0a:	df 93       	push	r29
    3b0c:	ec 01       	movw	r28, r24
    3b0e:	7b 01       	movw	r14, r22
    3b10:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    3b12:	ba 01       	movw	r22, r20
    3b14:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <_ZN6String7reserveEj>
    3b18:	81 11       	cpse	r24, r1
    3b1a:	04 c0       	rjmp	.+8      	; 0x3b24 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    3b1c:	ce 01       	movw	r24, r28
    3b1e:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <_ZN6String10invalidateEv>
		return *this;
    3b22:	07 c0       	rjmp	.+14     	; 0x3b32 <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    3b24:	1d 83       	std	Y+5, r17	; 0x05
    3b26:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    3b28:	b7 01       	movw	r22, r14
    3b2a:	88 81       	ld	r24, Y
    3b2c:	99 81       	ldd	r25, Y+1	; 0x01
    3b2e:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <strcpy>
	return *this;
}
    3b32:	ce 01       	movw	r24, r28
    3b34:	df 91       	pop	r29
    3b36:	cf 91       	pop	r28
    3b38:	1f 91       	pop	r17
    3b3a:	0f 91       	pop	r16
    3b3c:	ff 90       	pop	r15
    3b3e:	ef 90       	pop	r14
    3b40:	08 95       	ret

00003b42 <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3b42:	fc 01       	movw	r30, r24
    3b44:	11 82       	std	Z+1, r1	; 0x01
    3b46:	10 82       	st	Z, r1
	capacity = 0;
    3b48:	13 82       	std	Z+3, r1	; 0x03
    3b4a:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3b4c:	15 82       	std	Z+5, r1	; 0x05
    3b4e:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    3b50:	61 15       	cp	r22, r1
    3b52:	71 05       	cpc	r23, r1
    3b54:	51 f0       	breq	.+20     	; 0x3b6a <_ZN6StringC1EPKc+0x28>
    3b56:	fb 01       	movw	r30, r22
    3b58:	01 90       	ld	r0, Z+
    3b5a:	00 20       	and	r0, r0
    3b5c:	e9 f7       	brne	.-6      	; 0x3b58 <_ZN6StringC1EPKc+0x16>
    3b5e:	31 97       	sbiw	r30, 0x01	; 1
    3b60:	af 01       	movw	r20, r30
    3b62:	46 1b       	sub	r20, r22
    3b64:	57 0b       	sbc	r21, r23
    3b66:	0c 94 80 1d 	jmp	0x3b00	; 0x3b00 <_ZN6String4copyEPKcj>
    3b6a:	08 95       	ret

00003b6c <_ZN7Serial_5writeEh>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		ret = breakValue;
		breakValue = -1;
	}
	return ret;
}
    3b6c:	cf 93       	push	r28
    3b6e:	df 93       	push	r29
    3b70:	1f 92       	push	r1
    3b72:	cd b7       	in	r28, 0x3d	; 61
    3b74:	de b7       	in	r29, 0x3e	; 62
    3b76:	69 83       	std	Y+1, r22	; 0x01
    3b78:	dc 01       	movw	r26, r24
    3b7a:	ed 91       	ld	r30, X+
    3b7c:	fc 91       	ld	r31, X
    3b7e:	02 80       	ldd	r0, Z+2	; 0x02
    3b80:	f3 81       	ldd	r31, Z+3	; 0x03
    3b82:	e0 2d       	mov	r30, r0
    3b84:	41 e0       	ldi	r20, 0x01	; 1
    3b86:	50 e0       	ldi	r21, 0x00	; 0
    3b88:	be 01       	movw	r22, r28
    3b8a:	6f 5f       	subi	r22, 0xFF	; 255
    3b8c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b8e:	09 95       	icall
    3b90:	0f 90       	pop	r0
    3b92:	df 91       	pop	r29
    3b94:	cf 91       	pop	r28
    3b96:	08 95       	ret

00003b98 <_ZN7Serial_4peekEv>:
    3b98:	cf 93       	push	r28
    3b9a:	df 93       	push	r29
    3b9c:	ec 01       	movw	r28, r24
    3b9e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ba0:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ba2:	97 ff       	sbrs	r25, 7
    3ba4:	05 c0       	rjmp	.+10     	; 0x3bb0 <_ZN7Serial_4peekEv+0x18>
    3ba6:	82 e0       	ldi	r24, 0x02	; 2
    3ba8:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <_Z8USB_Recvh>
    3bac:	9d 87       	std	Y+13, r25	; 0x0d
    3bae:	8c 87       	std	Y+12, r24	; 0x0c
    3bb0:	8c 85       	ldd	r24, Y+12	; 0x0c
    3bb2:	9d 85       	ldd	r25, Y+13	; 0x0d
    3bb4:	df 91       	pop	r29
    3bb6:	cf 91       	pop	r28
    3bb8:	08 95       	ret

00003bba <_ZN7Serial_17availableForWriteEv>:
    3bba:	83 e0       	ldi	r24, 0x03	; 3
    3bbc:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <_Z13USB_SendSpaceh>
    3bc0:	90 e0       	ldi	r25, 0x00	; 0
    3bc2:	08 95       	ret

00003bc4 <_ZN7Serial_5flushEv>:
    3bc4:	83 e0       	ldi	r24, 0x03	; 3
    3bc6:	0c 94 7b 1a 	jmp	0x34f6	; 0x34f6 <_Z9USB_Flushh>

00003bca <_ZN7Serial_9availableEv>:
    3bca:	fc 01       	movw	r30, r24
    3bcc:	84 85       	ldd	r24, Z+12	; 0x0c
    3bce:	95 85       	ldd	r25, Z+13	; 0x0d
    3bd0:	97 fd       	sbrc	r25, 7
    3bd2:	06 c0       	rjmp	.+12     	; 0x3be0 <_ZN7Serial_9availableEv+0x16>
    3bd4:	82 e0       	ldi	r24, 0x02	; 2
    3bd6:	0e 94 91 17 	call	0x2f22	; 0x2f22 <_Z13USB_Availableh>
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	01 96       	adiw	r24, 0x01	; 1
    3bde:	08 95       	ret
    3be0:	82 e0       	ldi	r24, 0x02	; 2
    3be2:	0e 94 91 17 	call	0x2f22	; 0x2f22 <_Z13USB_Availableh>
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	08 95       	ret

00003bea <_ZN7Serial_4readEv>:
    3bea:	fc 01       	movw	r30, r24
    3bec:	84 85       	ldd	r24, Z+12	; 0x0c
    3bee:	95 85       	ldd	r25, Z+13	; 0x0d
    3bf0:	97 fd       	sbrc	r25, 7
    3bf2:	05 c0       	rjmp	.+10     	; 0x3bfe <_ZN7Serial_4readEv+0x14>
    3bf4:	2f ef       	ldi	r18, 0xFF	; 255
    3bf6:	3f ef       	ldi	r19, 0xFF	; 255
    3bf8:	35 87       	std	Z+13, r19	; 0x0d
    3bfa:	24 87       	std	Z+12, r18	; 0x0c
    3bfc:	08 95       	ret
    3bfe:	82 e0       	ldi	r24, 0x02	; 2
    3c00:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <_Z8USB_Recvh>

00003c04 <_ZN7Serial_5writeEPKhj>:
    3c04:	cf 93       	push	r28
    3c06:	df 93       	push	r29
    3c08:	ec 01       	movw	r28, r24
    3c0a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL12_usbLineInfo+0x7>
    3c0e:	88 23       	and	r24, r24
    3c10:	31 f0       	breq	.+12     	; 0x3c1e <_ZN7Serial_5writeEPKhj+0x1a>
    3c12:	83 e0       	ldi	r24, 0x03	; 3
    3c14:	0e 94 17 18 	call	0x302e	; 0x302e <_Z8USB_SendhPKvi>
    3c18:	18 16       	cp	r1, r24
    3c1a:	19 06       	cpc	r1, r25
    3c1c:	34 f0       	brlt	.+12     	; 0x3c2a <_ZN7Serial_5writeEPKhj+0x26>
    3c1e:	81 e0       	ldi	r24, 0x01	; 1
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	9b 83       	std	Y+3, r25	; 0x03
    3c24:	8a 83       	std	Y+2, r24	; 0x02
    3c26:	80 e0       	ldi	r24, 0x00	; 0
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	df 91       	pop	r29
    3c2c:	cf 91       	pop	r28
    3c2e:	08 95       	ret

00003c30 <_Z16isLUFAbootloaderv>:
    3c30:	ee ef       	ldi	r30, 0xFE	; 254
    3c32:	ff e7       	ldi	r31, 0x7F	; 127
    3c34:	25 91       	lpm	r18, Z+
    3c36:	34 91       	lpm	r19, Z
    3c38:	81 e0       	ldi	r24, 0x01	; 1
    3c3a:	2b 3f       	cpi	r18, 0xFB	; 251
    3c3c:	3c 4d       	sbci	r19, 0xDC	; 220
    3c3e:	09 f0       	breq	.+2      	; 0x3c42 <_Z16isLUFAbootloaderv+0x12>
    3c40:	80 e0       	ldi	r24, 0x00	; 0
    3c42:	08 95       	ret

00003c44 <_Z16CDC_GetInterfacePh>:
    3c44:	fc 01       	movw	r30, r24
    3c46:	90 81       	ld	r25, Z
    3c48:	9e 5f       	subi	r25, 0xFE	; 254
    3c4a:	90 83       	st	Z, r25
    3c4c:	42 e4       	ldi	r20, 0x42	; 66
    3c4e:	50 e0       	ldi	r21, 0x00	; 0
    3c50:	60 e9       	ldi	r22, 0x90	; 144
    3c52:	71 e0       	ldi	r23, 0x01	; 1
    3c54:	80 e8       	ldi	r24, 0x80	; 128
    3c56:	0c 94 c7 18 	jmp	0x318e	; 0x318e <_Z15USB_SendControlhPKvi>

00003c5a <_Z9CDC_SetupR8USBSetup>:
    3c5a:	fc 01       	movw	r30, r24
    3c5c:	81 81       	ldd	r24, Z+1	; 0x01
    3c5e:	90 81       	ld	r25, Z
    3c60:	91 3a       	cpi	r25, 0xA1	; 161
    3c62:	59 f4       	brne	.+22     	; 0x3c7a <_Z9CDC_SetupR8USBSetup+0x20>
    3c64:	81 32       	cpi	r24, 0x21	; 33
    3c66:	09 f0       	breq	.+2      	; 0x3c6a <_Z9CDC_SetupR8USBSetup+0x10>
    3c68:	65 c0       	rjmp	.+202    	; 0x3d34 <_Z9CDC_SetupR8USBSetup+0xda>
    3c6a:	47 e0       	ldi	r20, 0x07	; 7
    3c6c:	50 e0       	ldi	r21, 0x00	; 0
    3c6e:	66 e1       	ldi	r22, 0x16	; 22
    3c70:	71 e0       	ldi	r23, 0x01	; 1
    3c72:	80 e0       	ldi	r24, 0x00	; 0
    3c74:	0e 94 c7 18 	call	0x318e	; 0x318e <_Z15USB_SendControlhPKvi>
    3c78:	5b c0       	rjmp	.+182    	; 0x3d30 <_Z9CDC_SetupR8USBSetup+0xd6>
    3c7a:	91 32       	cpi	r25, 0x21	; 33
    3c7c:	09 f0       	breq	.+2      	; 0x3c80 <_Z9CDC_SetupR8USBSetup+0x26>
    3c7e:	5a c0       	rjmp	.+180    	; 0x3d34 <_Z9CDC_SetupR8USBSetup+0xda>
    3c80:	83 32       	cpi	r24, 0x23	; 35
    3c82:	69 f4       	brne	.+26     	; 0x3c9e <_Z9CDC_SetupR8USBSetup+0x44>
    3c84:	82 81       	ldd	r24, Z+2	; 0x02
    3c86:	93 81       	ldd	r25, Z+3	; 0x03
    3c88:	a0 e0       	ldi	r26, 0x00	; 0
    3c8a:	b0 e0       	ldi	r27, 0x00	; 0
    3c8c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_ZL10breakValue>
    3c90:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_ZL10breakValue+0x1>
    3c94:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <_ZL10breakValue+0x2>
    3c98:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <_ZL10breakValue+0x3>
    3c9c:	49 c0       	rjmp	.+146    	; 0x3d30 <_Z9CDC_SetupR8USBSetup+0xd6>
    3c9e:	80 32       	cpi	r24, 0x20	; 32
    3ca0:	39 f4       	brne	.+14     	; 0x3cb0 <_Z9CDC_SetupR8USBSetup+0x56>
    3ca2:	67 e0       	ldi	r22, 0x07	; 7
    3ca4:	70 e0       	ldi	r23, 0x00	; 0
    3ca6:	86 e1       	ldi	r24, 0x16	; 22
    3ca8:	91 e0       	ldi	r25, 0x01	; 1
    3caa:	0e 94 ee 18 	call	0x31dc	; 0x31dc <_Z15USB_RecvControlPvi>
    3cae:	40 c0       	rjmp	.+128    	; 0x3d30 <_Z9CDC_SetupR8USBSetup+0xd6>
    3cb0:	82 32       	cpi	r24, 0x22	; 34
    3cb2:	09 f0       	breq	.+2      	; 0x3cb6 <_Z9CDC_SetupR8USBSetup+0x5c>
    3cb4:	3d c0       	rjmp	.+122    	; 0x3d30 <_Z9CDC_SetupR8USBSetup+0xd6>
    3cb6:	82 81       	ldd	r24, Z+2	; 0x02
    3cb8:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZL12_usbLineInfo+0x7>
    3cbc:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <_Z16isLUFAbootloaderv>
    3cc0:	88 23       	and	r24, r24
    3cc2:	19 f0       	breq	.+6      	; 0x3cca <_Z9CDC_SetupR8USBSetup+0x70>
    3cc4:	ee ef       	ldi	r30, 0xFE	; 254
    3cc6:	fa e0       	ldi	r31, 0x0A	; 10
    3cc8:	02 c0       	rjmp	.+4      	; 0x3cce <_Z9CDC_SetupR8USBSetup+0x74>
    3cca:	e0 e0       	ldi	r30, 0x00	; 0
    3ccc:	f8 e0       	ldi	r31, 0x08	; 8
    3cce:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_ZL12_usbLineInfo>
    3cd2:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <_ZL12_usbLineInfo+0x1>
    3cd6:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <_ZL12_usbLineInfo+0x2>
    3cda:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <_ZL12_usbLineInfo+0x3>
    3cde:	80 3b       	cpi	r24, 0xB0	; 176
    3ce0:	94 40       	sbci	r25, 0x04	; 4
    3ce2:	a1 05       	cpc	r26, r1
    3ce4:	b1 05       	cpc	r27, r1
    3ce6:	41 f5       	brne	.+80     	; 0x3d38 <_Z9CDC_SetupR8USBSetup+0xde>
    3ce8:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL12_usbLineInfo+0x7>
    3cec:	80 fd       	sbrc	r24, 0
    3cee:	24 c0       	rjmp	.+72     	; 0x3d38 <_Z9CDC_SetupR8USBSetup+0xde>
    3cf0:	ee 3f       	cpi	r30, 0xFE	; 254
    3cf2:	8a e0       	ldi	r24, 0x0A	; 10
    3cf4:	f8 07       	cpc	r31, r24
    3cf6:	51 f0       	breq	.+20     	; 0x3d0c <_Z9CDC_SetupR8USBSetup+0xb2>
    3cf8:	80 81       	ld	r24, Z
    3cfa:	91 81       	ldd	r25, Z+1	; 0x01
    3cfc:	87 37       	cpi	r24, 0x77	; 119
    3cfe:	27 e7       	ldi	r18, 0x77	; 119
    3d00:	92 07       	cpc	r25, r18
    3d02:	21 f0       	breq	.+8      	; 0x3d0c <_Z9CDC_SetupR8USBSetup+0xb2>
    3d04:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x599>
    3d08:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x598>
    3d0c:	87 e7       	ldi	r24, 0x77	; 119
    3d0e:	97 e7       	ldi	r25, 0x77	; 119
    3d10:	91 83       	std	Z+1, r25	; 0x01
    3d12:	80 83       	st	Z, r24
    3d14:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3d18:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <_ZL11wdtcsr_save>
    3d1c:	9b e0       	ldi	r25, 0x0B	; 11
    3d1e:	88 e1       	ldi	r24, 0x18	; 24
    3d20:	0f b6       	in	r0, 0x3f	; 63
    3d22:	f8 94       	cli
    3d24:	a8 95       	wdr
    3d26:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3d2a:	0f be       	out	0x3f, r0	; 63
    3d2c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3d30:	81 e0       	ldi	r24, 0x01	; 1
    3d32:	08 95       	ret
    3d34:	80 e0       	ldi	r24, 0x00	; 0
    3d36:	08 95       	ret
    3d38:	80 81       	ld	r24, Z
    3d3a:	91 81       	ldd	r25, Z+1	; 0x01
    3d3c:	87 37       	cpi	r24, 0x77	; 119
    3d3e:	97 47       	sbci	r25, 0x77	; 119
    3d40:	b9 f7       	brne	.-18     	; 0x3d30 <_Z9CDC_SetupR8USBSetup+0xd6>
    3d42:	a8 95       	wdr
    3d44:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3d48:	88 61       	ori	r24, 0x18	; 24
    3d4a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3d4e:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <_ZL11wdtcsr_save>
    3d52:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3d56:	ee 3f       	cpi	r30, 0xFE	; 254
    3d58:	8a e0       	ldi	r24, 0x0A	; 10
    3d5a:	f8 07       	cpc	r31, r24
    3d5c:	39 f0       	breq	.+14     	; 0x3d6c <_Z9CDC_SetupR8USBSetup+0x112>
    3d5e:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x598>
    3d62:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x599>
    3d66:	91 83       	std	Z+1, r25	; 0x01
    3d68:	80 83       	st	Z, r24
    3d6a:	e2 cf       	rjmp	.-60     	; 0x3d30 <_Z9CDC_SetupR8USBSetup+0xd6>
    3d6c:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x599>
    3d70:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x598>
    3d74:	dd cf       	rjmp	.-70     	; 0x3d30 <_Z9CDC_SetupR8USBSetup+0xd6>

00003d76 <_GLOBAL__sub_I__cdcInterface>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3d76:	e5 e0       	ldi	r30, 0x05	; 5
    3d78:	f5 e0       	ldi	r31, 0x05	; 5
    3d7a:	13 82       	std	Z+3, r1	; 0x03
    3d7c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    3d7e:	88 ee       	ldi	r24, 0xE8	; 232
    3d80:	93 e0       	ldi	r25, 0x03	; 3
    3d82:	a0 e0       	ldi	r26, 0x00	; 0
    3d84:	b0 e0       	ldi	r27, 0x00	; 0
    3d86:	84 83       	std	Z+4, r24	; 0x04
    3d88:	95 83       	std	Z+5, r25	; 0x05
    3d8a:	a6 83       	std	Z+6, r26	; 0x06
    3d8c:	b7 83       	std	Z+7, r27	; 0x07
class Serial_ : public Stream
{
private:
	int peek_buffer;
public:
	Serial_() { peek_buffer = -1; };
    3d8e:	80 ee       	ldi	r24, 0xE0	; 224
    3d90:	92 e0       	ldi	r25, 0x02	; 2
    3d92:	91 83       	std	Z+1, r25	; 0x01
    3d94:	80 83       	st	Z, r24
    3d96:	8f ef       	ldi	r24, 0xFF	; 255
    3d98:	9f ef       	ldi	r25, 0xFF	; 255
    3d9a:	95 87       	std	Z+13, r25	; 0x0d
    3d9c:	84 87       	std	Z+12, r24	; 0x0c
    3d9e:	08 95       	ret

00003da0 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3da0:	08 95       	ret

00003da2 <_ZN13PluggableUSB_12getInterfaceEPh>:
		_initEndpoints[lastEp] = node->endpointType[i];
		lastEp++;
	}
	return true;
	// restart USB layer???
}
    3da2:	ef 92       	push	r14
    3da4:	ff 92       	push	r15
    3da6:	0f 93       	push	r16
    3da8:	1f 93       	push	r17
    3daa:	cf 93       	push	r28
    3dac:	df 93       	push	r29
    3dae:	7b 01       	movw	r14, r22
    3db0:	fc 01       	movw	r30, r24
    3db2:	c2 81       	ldd	r28, Z+2	; 0x02
    3db4:	d3 81       	ldd	r29, Z+3	; 0x03
    3db6:	00 e0       	ldi	r16, 0x00	; 0
    3db8:	10 e0       	ldi	r17, 0x00	; 0
    3dba:	20 97       	sbiw	r28, 0x00	; 0
    3dbc:	81 f0       	breq	.+32     	; 0x3dde <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
    3dbe:	e8 81       	ld	r30, Y
    3dc0:	f9 81       	ldd	r31, Y+1	; 0x01
    3dc2:	02 80       	ldd	r0, Z+2	; 0x02
    3dc4:	f3 81       	ldd	r31, Z+3	; 0x03
    3dc6:	e0 2d       	mov	r30, r0
    3dc8:	b7 01       	movw	r22, r14
    3dca:	ce 01       	movw	r24, r28
    3dcc:	09 95       	icall
    3dce:	97 fd       	sbrc	r25, 7
    3dd0:	08 c0       	rjmp	.+16     	; 0x3de2 <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
    3dd2:	08 0f       	add	r16, r24
    3dd4:	19 1f       	adc	r17, r25
    3dd6:	08 84       	ldd	r0, Y+8	; 0x08
    3dd8:	d9 85       	ldd	r29, Y+9	; 0x09
    3dda:	c0 2d       	mov	r28, r0
    3ddc:	ee cf       	rjmp	.-36     	; 0x3dba <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    3dde:	c8 01       	movw	r24, r16
    3de0:	02 c0       	rjmp	.+4      	; 0x3de6 <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
    3de2:	8f ef       	ldi	r24, 0xFF	; 255
    3de4:	9f ef       	ldi	r25, 0xFF	; 255
    3de6:	df 91       	pop	r29
    3de8:	cf 91       	pop	r28
    3dea:	1f 91       	pop	r17
    3dec:	0f 91       	pop	r16
    3dee:	ff 90       	pop	r15
    3df0:	ef 90       	pop	r14
    3df2:	08 95       	ret

00003df4 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    3df4:	0f 93       	push	r16
    3df6:	1f 93       	push	r17
    3df8:	cf 93       	push	r28
    3dfa:	df 93       	push	r29
    3dfc:	8b 01       	movw	r16, r22
    3dfe:	fc 01       	movw	r30, r24
    3e00:	c2 81       	ldd	r28, Z+2	; 0x02
    3e02:	d3 81       	ldd	r29, Z+3	; 0x03
    3e04:	20 97       	sbiw	r28, 0x00	; 0
    3e06:	71 f0       	breq	.+28     	; 0x3e24 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
    3e08:	e8 81       	ld	r30, Y
    3e0a:	f9 81       	ldd	r31, Y+1	; 0x01
    3e0c:	04 80       	ldd	r0, Z+4	; 0x04
    3e0e:	f5 81       	ldd	r31, Z+5	; 0x05
    3e10:	e0 2d       	mov	r30, r0
    3e12:	b8 01       	movw	r22, r16
    3e14:	ce 01       	movw	r24, r28
    3e16:	09 95       	icall
    3e18:	00 97       	sbiw	r24, 0x00	; 0
    3e1a:	31 f4       	brne	.+12     	; 0x3e28 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
    3e1c:	08 84       	ldd	r0, Y+8	; 0x08
    3e1e:	d9 85       	ldd	r29, Y+9	; 0x09
    3e20:	c0 2d       	mov	r28, r0
    3e22:	f0 cf       	rjmp	.-32     	; 0x3e04 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
    3e24:	80 e0       	ldi	r24, 0x00	; 0
    3e26:	90 e0       	ldi	r25, 0x00	; 0
    3e28:	df 91       	pop	r29
    3e2a:	cf 91       	pop	r28
    3e2c:	1f 91       	pop	r17
    3e2e:	0f 91       	pop	r16
    3e30:	08 95       	ret

00003e32 <_ZN13PluggableUSB_12getShortNameEPc>:
    3e32:	0f 93       	push	r16
    3e34:	1f 93       	push	r17
    3e36:	cf 93       	push	r28
    3e38:	df 93       	push	r29
    3e3a:	8b 01       	movw	r16, r22
    3e3c:	fc 01       	movw	r30, r24
    3e3e:	c2 81       	ldd	r28, Z+2	; 0x02
    3e40:	d3 81       	ldd	r29, Z+3	; 0x03
    3e42:	20 97       	sbiw	r28, 0x00	; 0
    3e44:	71 f0       	breq	.+28     	; 0x3e62 <_ZN13PluggableUSB_12getShortNameEPc+0x30>
    3e46:	e8 81       	ld	r30, Y
    3e48:	f9 81       	ldd	r31, Y+1	; 0x01
    3e4a:	06 80       	ldd	r0, Z+6	; 0x06
    3e4c:	f7 81       	ldd	r31, Z+7	; 0x07
    3e4e:	e0 2d       	mov	r30, r0
    3e50:	b8 01       	movw	r22, r16
    3e52:	ce 01       	movw	r24, r28
    3e54:	09 95       	icall
    3e56:	08 0f       	add	r16, r24
    3e58:	11 1d       	adc	r17, r1
    3e5a:	08 84       	ldd	r0, Y+8	; 0x08
    3e5c:	d9 85       	ldd	r29, Y+9	; 0x09
    3e5e:	c0 2d       	mov	r28, r0
    3e60:	f0 cf       	rjmp	.-32     	; 0x3e42 <_ZN13PluggableUSB_12getShortNameEPc+0x10>
    3e62:	f8 01       	movw	r30, r16
    3e64:	10 82       	st	Z, r1
    3e66:	df 91       	pop	r29
    3e68:	cf 91       	pop	r28
    3e6a:	1f 91       	pop	r17
    3e6c:	0f 91       	pop	r16
    3e6e:	08 95       	ret

00003e70 <_ZN13PluggableUSB_5setupER8USBSetup>:
    3e70:	0f 93       	push	r16
    3e72:	1f 93       	push	r17
    3e74:	cf 93       	push	r28
    3e76:	df 93       	push	r29
    3e78:	8b 01       	movw	r16, r22
    3e7a:	fc 01       	movw	r30, r24
    3e7c:	c2 81       	ldd	r28, Z+2	; 0x02
    3e7e:	d3 81       	ldd	r29, Z+3	; 0x03
    3e80:	20 97       	sbiw	r28, 0x00	; 0
    3e82:	71 f0       	breq	.+28     	; 0x3ea0 <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
    3e84:	e8 81       	ld	r30, Y
    3e86:	f9 81       	ldd	r31, Y+1	; 0x01
    3e88:	01 90       	ld	r0, Z+
    3e8a:	f0 81       	ld	r31, Z
    3e8c:	e0 2d       	mov	r30, r0
    3e8e:	b8 01       	movw	r22, r16
    3e90:	ce 01       	movw	r24, r28
    3e92:	09 95       	icall
    3e94:	81 11       	cpse	r24, r1
    3e96:	05 c0       	rjmp	.+10     	; 0x3ea2 <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
    3e98:	08 84       	ldd	r0, Y+8	; 0x08
    3e9a:	d9 85       	ldd	r29, Y+9	; 0x09
    3e9c:	c0 2d       	mov	r28, r0
    3e9e:	f0 cf       	rjmp	.-32     	; 0x3e80 <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
    3ea0:	80 e0       	ldi	r24, 0x00	; 0
    3ea2:	df 91       	pop	r29
    3ea4:	cf 91       	pop	r28
    3ea6:	1f 91       	pop	r17
    3ea8:	0f 91       	pop	r16
    3eaa:	08 95       	ret

00003eac <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    3eac:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <_ZGVZ12PluggableUSBvE3obj>
    3eb0:	81 11       	cpse	r24, r1
    3eb2:	0d c0       	rjmp	.+26     	; 0x3ece <_Z12PluggableUSBv+0x22>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    3eb4:	82 e0       	ldi	r24, 0x02	; 2
    3eb6:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <_ZZ12PluggableUSBvE3obj>
    3eba:	84 e0       	ldi	r24, 0x04	; 4
    3ebc:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <_ZZ12PluggableUSBvE3obj+0x1>
    3ec0:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <_ZZ12PluggableUSBvE3obj+0x3>
    3ec4:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <_ZZ12PluggableUSBvE3obj+0x2>
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    3ec8:	81 e0       	ldi	r24, 0x01	; 1
    3eca:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <_ZGVZ12PluggableUSBvE3obj>
	return obj;
}
    3ece:	86 e5       	ldi	r24, 0x56	; 86
    3ed0:	95 e0       	ldi	r25, 0x05	; 5
    3ed2:	08 95       	ret

00003ed4 <__divsf3>:
    3ed4:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__divsf3x>
    3ed8:	0c 94 45 14 	jmp	0x288a	; 0x288a <__fp_round>
    3edc:	0e 94 3e 14 	call	0x287c	; 0x287c <__fp_pscB>
    3ee0:	58 f0       	brcs	.+22     	; 0x3ef8 <__divsf3+0x24>
    3ee2:	0e 94 37 14 	call	0x286e	; 0x286e <__fp_pscA>
    3ee6:	40 f0       	brcs	.+16     	; 0x3ef8 <__divsf3+0x24>
    3ee8:	29 f4       	brne	.+10     	; 0x3ef4 <__divsf3+0x20>
    3eea:	5f 3f       	cpi	r21, 0xFF	; 255
    3eec:	29 f0       	breq	.+10     	; 0x3ef8 <__divsf3+0x24>
    3eee:	0c 94 2e 14 	jmp	0x285c	; 0x285c <__fp_inf>
    3ef2:	51 11       	cpse	r21, r1
    3ef4:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <__fp_szero>
    3ef8:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__fp_nan>

00003efc <__divsf3x>:
    3efc:	0e 94 56 14 	call	0x28ac	; 0x28ac <__fp_split3>
    3f00:	68 f3       	brcs	.-38     	; 0x3edc <__divsf3+0x8>

00003f02 <__divsf3_pse>:
    3f02:	99 23       	and	r25, r25
    3f04:	b1 f3       	breq	.-20     	; 0x3ef2 <__divsf3+0x1e>
    3f06:	55 23       	and	r21, r21
    3f08:	91 f3       	breq	.-28     	; 0x3eee <__divsf3+0x1a>
    3f0a:	95 1b       	sub	r25, r21
    3f0c:	55 0b       	sbc	r21, r21
    3f0e:	bb 27       	eor	r27, r27
    3f10:	aa 27       	eor	r26, r26
    3f12:	62 17       	cp	r22, r18
    3f14:	73 07       	cpc	r23, r19
    3f16:	84 07       	cpc	r24, r20
    3f18:	38 f0       	brcs	.+14     	; 0x3f28 <__divsf3_pse+0x26>
    3f1a:	9f 5f       	subi	r25, 0xFF	; 255
    3f1c:	5f 4f       	sbci	r21, 0xFF	; 255
    3f1e:	22 0f       	add	r18, r18
    3f20:	33 1f       	adc	r19, r19
    3f22:	44 1f       	adc	r20, r20
    3f24:	aa 1f       	adc	r26, r26
    3f26:	a9 f3       	breq	.-22     	; 0x3f12 <__divsf3_pse+0x10>
    3f28:	35 d0       	rcall	.+106    	; 0x3f94 <__divsf3_pse+0x92>
    3f2a:	0e 2e       	mov	r0, r30
    3f2c:	3a f0       	brmi	.+14     	; 0x3f3c <__divsf3_pse+0x3a>
    3f2e:	e0 e8       	ldi	r30, 0x80	; 128
    3f30:	32 d0       	rcall	.+100    	; 0x3f96 <__divsf3_pse+0x94>
    3f32:	91 50       	subi	r25, 0x01	; 1
    3f34:	50 40       	sbci	r21, 0x00	; 0
    3f36:	e6 95       	lsr	r30
    3f38:	00 1c       	adc	r0, r0
    3f3a:	ca f7       	brpl	.-14     	; 0x3f2e <__divsf3_pse+0x2c>
    3f3c:	2b d0       	rcall	.+86     	; 0x3f94 <__divsf3_pse+0x92>
    3f3e:	fe 2f       	mov	r31, r30
    3f40:	29 d0       	rcall	.+82     	; 0x3f94 <__divsf3_pse+0x92>
    3f42:	66 0f       	add	r22, r22
    3f44:	77 1f       	adc	r23, r23
    3f46:	88 1f       	adc	r24, r24
    3f48:	bb 1f       	adc	r27, r27
    3f4a:	26 17       	cp	r18, r22
    3f4c:	37 07       	cpc	r19, r23
    3f4e:	48 07       	cpc	r20, r24
    3f50:	ab 07       	cpc	r26, r27
    3f52:	b0 e8       	ldi	r27, 0x80	; 128
    3f54:	09 f0       	breq	.+2      	; 0x3f58 <__divsf3_pse+0x56>
    3f56:	bb 0b       	sbc	r27, r27
    3f58:	80 2d       	mov	r24, r0
    3f5a:	bf 01       	movw	r22, r30
    3f5c:	ff 27       	eor	r31, r31
    3f5e:	93 58       	subi	r25, 0x83	; 131
    3f60:	5f 4f       	sbci	r21, 0xFF	; 255
    3f62:	3a f0       	brmi	.+14     	; 0x3f72 <__divsf3_pse+0x70>
    3f64:	9e 3f       	cpi	r25, 0xFE	; 254
    3f66:	51 05       	cpc	r21, r1
    3f68:	78 f0       	brcs	.+30     	; 0x3f88 <__divsf3_pse+0x86>
    3f6a:	0c 94 2e 14 	jmp	0x285c	; 0x285c <__fp_inf>
    3f6e:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <__fp_szero>
    3f72:	5f 3f       	cpi	r21, 0xFF	; 255
    3f74:	e4 f3       	brlt	.-8      	; 0x3f6e <__divsf3_pse+0x6c>
    3f76:	98 3e       	cpi	r25, 0xE8	; 232
    3f78:	d4 f3       	brlt	.-12     	; 0x3f6e <__divsf3_pse+0x6c>
    3f7a:	86 95       	lsr	r24
    3f7c:	77 95       	ror	r23
    3f7e:	67 95       	ror	r22
    3f80:	b7 95       	ror	r27
    3f82:	f7 95       	ror	r31
    3f84:	9f 5f       	subi	r25, 0xFF	; 255
    3f86:	c9 f7       	brne	.-14     	; 0x3f7a <__divsf3_pse+0x78>
    3f88:	88 0f       	add	r24, r24
    3f8a:	91 1d       	adc	r25, r1
    3f8c:	96 95       	lsr	r25
    3f8e:	87 95       	ror	r24
    3f90:	97 f9       	bld	r25, 7
    3f92:	08 95       	ret
    3f94:	e1 e0       	ldi	r30, 0x01	; 1
    3f96:	66 0f       	add	r22, r22
    3f98:	77 1f       	adc	r23, r23
    3f9a:	88 1f       	adc	r24, r24
    3f9c:	bb 1f       	adc	r27, r27
    3f9e:	62 17       	cp	r22, r18
    3fa0:	73 07       	cpc	r23, r19
    3fa2:	84 07       	cpc	r24, r20
    3fa4:	ba 07       	cpc	r27, r26
    3fa6:	20 f0       	brcs	.+8      	; 0x3fb0 <__divsf3_pse+0xae>
    3fa8:	62 1b       	sub	r22, r18
    3faa:	73 0b       	sbc	r23, r19
    3fac:	84 0b       	sbc	r24, r20
    3fae:	ba 0b       	sbc	r27, r26
    3fb0:	ee 1f       	adc	r30, r30
    3fb2:	88 f7       	brcc	.-30     	; 0x3f96 <__divsf3_pse+0x94>
    3fb4:	e0 95       	com	r30
    3fb6:	08 95       	ret

00003fb8 <__fixunssfsi>:
    3fb8:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__fp_splitA>
    3fbc:	88 f0       	brcs	.+34     	; 0x3fe0 <__fixunssfsi+0x28>
    3fbe:	9f 57       	subi	r25, 0x7F	; 127
    3fc0:	98 f0       	brcs	.+38     	; 0x3fe8 <__fixunssfsi+0x30>
    3fc2:	b9 2f       	mov	r27, r25
    3fc4:	99 27       	eor	r25, r25
    3fc6:	b7 51       	subi	r27, 0x17	; 23
    3fc8:	b0 f0       	brcs	.+44     	; 0x3ff6 <__fixunssfsi+0x3e>
    3fca:	e1 f0       	breq	.+56     	; 0x4004 <__fixunssfsi+0x4c>
    3fcc:	66 0f       	add	r22, r22
    3fce:	77 1f       	adc	r23, r23
    3fd0:	88 1f       	adc	r24, r24
    3fd2:	99 1f       	adc	r25, r25
    3fd4:	1a f0       	brmi	.+6      	; 0x3fdc <__fixunssfsi+0x24>
    3fd6:	ba 95       	dec	r27
    3fd8:	c9 f7       	brne	.-14     	; 0x3fcc <__fixunssfsi+0x14>
    3fda:	14 c0       	rjmp	.+40     	; 0x4004 <__fixunssfsi+0x4c>
    3fdc:	b1 30       	cpi	r27, 0x01	; 1
    3fde:	91 f0       	breq	.+36     	; 0x4004 <__fixunssfsi+0x4c>
    3fe0:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__fp_zero>
    3fe4:	b1 e0       	ldi	r27, 0x01	; 1
    3fe6:	08 95       	ret
    3fe8:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__fp_zero>
    3fec:	67 2f       	mov	r22, r23
    3fee:	78 2f       	mov	r23, r24
    3ff0:	88 27       	eor	r24, r24
    3ff2:	b8 5f       	subi	r27, 0xF8	; 248
    3ff4:	39 f0       	breq	.+14     	; 0x4004 <__fixunssfsi+0x4c>
    3ff6:	b9 3f       	cpi	r27, 0xF9	; 249
    3ff8:	cc f3       	brlt	.-14     	; 0x3fec <__fixunssfsi+0x34>
    3ffa:	86 95       	lsr	r24
    3ffc:	77 95       	ror	r23
    3ffe:	67 95       	ror	r22
    4000:	b3 95       	inc	r27
    4002:	d9 f7       	brne	.-10     	; 0x3ffa <__fixunssfsi+0x42>
    4004:	3e f4       	brtc	.+14     	; 0x4014 <__fixunssfsi+0x5c>
    4006:	90 95       	com	r25
    4008:	80 95       	com	r24
    400a:	70 95       	com	r23
    400c:	61 95       	neg	r22
    400e:	7f 4f       	sbci	r23, 0xFF	; 255
    4010:	8f 4f       	sbci	r24, 0xFF	; 255
    4012:	9f 4f       	sbci	r25, 0xFF	; 255
    4014:	08 95       	ret

00004016 <__gesf2>:
    4016:	0e 94 0a 14 	call	0x2814	; 0x2814 <__fp_cmp>
    401a:	08 f4       	brcc	.+2      	; 0x401e <__gesf2+0x8>
    401c:	8f ef       	ldi	r24, 0xFF	; 255
    401e:	08 95       	ret

00004020 <__unordsf2>:
    4020:	0e 94 0a 14 	call	0x2814	; 0x2814 <__fp_cmp>
    4024:	88 0b       	sbc	r24, r24
    4026:	99 0b       	sbc	r25, r25
    4028:	08 95       	ret

0000402a <__divmodhi4>:
    402a:	97 fb       	bst	r25, 7
    402c:	07 2e       	mov	r0, r23
    402e:	16 f4       	brtc	.+4      	; 0x4034 <__divmodhi4+0xa>
    4030:	00 94       	com	r0
    4032:	07 d0       	rcall	.+14     	; 0x4042 <__divmodhi4_neg1>
    4034:	77 fd       	sbrc	r23, 7
    4036:	09 d0       	rcall	.+18     	; 0x404a <__divmodhi4_neg2>
    4038:	0e 94 51 20 	call	0x40a2	; 0x40a2 <__udivmodhi4>
    403c:	07 fc       	sbrc	r0, 7
    403e:	05 d0       	rcall	.+10     	; 0x404a <__divmodhi4_neg2>
    4040:	3e f4       	brtc	.+14     	; 0x4050 <__divmodhi4_exit>

00004042 <__divmodhi4_neg1>:
    4042:	90 95       	com	r25
    4044:	81 95       	neg	r24
    4046:	9f 4f       	sbci	r25, 0xFF	; 255
    4048:	08 95       	ret

0000404a <__divmodhi4_neg2>:
    404a:	70 95       	com	r23
    404c:	61 95       	neg	r22
    404e:	7f 4f       	sbci	r23, 0xFF	; 255

00004050 <__divmodhi4_exit>:
    4050:	08 95       	ret

00004052 <__udivmodsi4>:
    4052:	a1 e2       	ldi	r26, 0x21	; 33
    4054:	1a 2e       	mov	r1, r26
    4056:	aa 1b       	sub	r26, r26
    4058:	bb 1b       	sub	r27, r27
    405a:	fd 01       	movw	r30, r26
    405c:	0d c0       	rjmp	.+26     	; 0x4078 <__udivmodsi4_ep>

0000405e <__udivmodsi4_loop>:
    405e:	aa 1f       	adc	r26, r26
    4060:	bb 1f       	adc	r27, r27
    4062:	ee 1f       	adc	r30, r30
    4064:	ff 1f       	adc	r31, r31
    4066:	a2 17       	cp	r26, r18
    4068:	b3 07       	cpc	r27, r19
    406a:	e4 07       	cpc	r30, r20
    406c:	f5 07       	cpc	r31, r21
    406e:	20 f0       	brcs	.+8      	; 0x4078 <__udivmodsi4_ep>
    4070:	a2 1b       	sub	r26, r18
    4072:	b3 0b       	sbc	r27, r19
    4074:	e4 0b       	sbc	r30, r20
    4076:	f5 0b       	sbc	r31, r21

00004078 <__udivmodsi4_ep>:
    4078:	66 1f       	adc	r22, r22
    407a:	77 1f       	adc	r23, r23
    407c:	88 1f       	adc	r24, r24
    407e:	99 1f       	adc	r25, r25
    4080:	1a 94       	dec	r1
    4082:	69 f7       	brne	.-38     	; 0x405e <__udivmodsi4_loop>
    4084:	60 95       	com	r22
    4086:	70 95       	com	r23
    4088:	80 95       	com	r24
    408a:	90 95       	com	r25
    408c:	9b 01       	movw	r18, r22
    408e:	ac 01       	movw	r20, r24
    4090:	bd 01       	movw	r22, r26
    4092:	cf 01       	movw	r24, r30
    4094:	08 95       	ret

00004096 <__tablejump2__>:
    4096:	ee 0f       	add	r30, r30
    4098:	ff 1f       	adc	r31, r31
    409a:	05 90       	lpm	r0, Z+
    409c:	f4 91       	lpm	r31, Z
    409e:	e0 2d       	mov	r30, r0
    40a0:	09 94       	ijmp

000040a2 <__udivmodhi4>:
    40a2:	aa 1b       	sub	r26, r26
    40a4:	bb 1b       	sub	r27, r27
    40a6:	51 e1       	ldi	r21, 0x11	; 17
    40a8:	07 c0       	rjmp	.+14     	; 0x40b8 <__udivmodhi4_ep>

000040aa <__udivmodhi4_loop>:
    40aa:	aa 1f       	adc	r26, r26
    40ac:	bb 1f       	adc	r27, r27
    40ae:	a6 17       	cp	r26, r22
    40b0:	b7 07       	cpc	r27, r23
    40b2:	10 f0       	brcs	.+4      	; 0x40b8 <__udivmodhi4_ep>
    40b4:	a6 1b       	sub	r26, r22
    40b6:	b7 0b       	sbc	r27, r23

000040b8 <__udivmodhi4_ep>:
    40b8:	88 1f       	adc	r24, r24
    40ba:	99 1f       	adc	r25, r25
    40bc:	5a 95       	dec	r21
    40be:	a9 f7       	brne	.-22     	; 0x40aa <__udivmodhi4_loop>
    40c0:	80 95       	com	r24
    40c2:	90 95       	com	r25
    40c4:	bc 01       	movw	r22, r24
    40c6:	cd 01       	movw	r24, r26
    40c8:	08 95       	ret

000040ca <malloc>:
    40ca:	0f 93       	push	r16
    40cc:	1f 93       	push	r17
    40ce:	cf 93       	push	r28
    40d0:	df 93       	push	r29
    40d2:	82 30       	cpi	r24, 0x02	; 2
    40d4:	91 05       	cpc	r25, r1
    40d6:	10 f4       	brcc	.+4      	; 0x40dc <malloc+0x12>
    40d8:	82 e0       	ldi	r24, 0x02	; 2
    40da:	90 e0       	ldi	r25, 0x00	; 0
    40dc:	e0 91 64 05 	lds	r30, 0x0564	; 0x800564 <__flp>
    40e0:	f0 91 65 05 	lds	r31, 0x0565	; 0x800565 <__flp+0x1>
    40e4:	20 e0       	ldi	r18, 0x00	; 0
    40e6:	30 e0       	ldi	r19, 0x00	; 0
    40e8:	a0 e0       	ldi	r26, 0x00	; 0
    40ea:	b0 e0       	ldi	r27, 0x00	; 0
    40ec:	30 97       	sbiw	r30, 0x00	; 0
    40ee:	19 f1       	breq	.+70     	; 0x4136 <malloc+0x6c>
    40f0:	40 81       	ld	r20, Z
    40f2:	51 81       	ldd	r21, Z+1	; 0x01
    40f4:	02 81       	ldd	r16, Z+2	; 0x02
    40f6:	13 81       	ldd	r17, Z+3	; 0x03
    40f8:	48 17       	cp	r20, r24
    40fa:	59 07       	cpc	r21, r25
    40fc:	c8 f0       	brcs	.+50     	; 0x4130 <malloc+0x66>
    40fe:	84 17       	cp	r24, r20
    4100:	95 07       	cpc	r25, r21
    4102:	69 f4       	brne	.+26     	; 0x411e <malloc+0x54>
    4104:	10 97       	sbiw	r26, 0x00	; 0
    4106:	31 f0       	breq	.+12     	; 0x4114 <malloc+0x4a>
    4108:	12 96       	adiw	r26, 0x02	; 2
    410a:	0c 93       	st	X, r16
    410c:	12 97       	sbiw	r26, 0x02	; 2
    410e:	13 96       	adiw	r26, 0x03	; 3
    4110:	1c 93       	st	X, r17
    4112:	27 c0       	rjmp	.+78     	; 0x4162 <malloc+0x98>
    4114:	00 93 64 05 	sts	0x0564, r16	; 0x800564 <__flp>
    4118:	10 93 65 05 	sts	0x0565, r17	; 0x800565 <__flp+0x1>
    411c:	22 c0       	rjmp	.+68     	; 0x4162 <malloc+0x98>
    411e:	21 15       	cp	r18, r1
    4120:	31 05       	cpc	r19, r1
    4122:	19 f0       	breq	.+6      	; 0x412a <malloc+0x60>
    4124:	42 17       	cp	r20, r18
    4126:	53 07       	cpc	r21, r19
    4128:	18 f4       	brcc	.+6      	; 0x4130 <malloc+0x66>
    412a:	9a 01       	movw	r18, r20
    412c:	bd 01       	movw	r22, r26
    412e:	ef 01       	movw	r28, r30
    4130:	df 01       	movw	r26, r30
    4132:	f8 01       	movw	r30, r16
    4134:	db cf       	rjmp	.-74     	; 0x40ec <malloc+0x22>
    4136:	21 15       	cp	r18, r1
    4138:	31 05       	cpc	r19, r1
    413a:	f9 f0       	breq	.+62     	; 0x417a <malloc+0xb0>
    413c:	28 1b       	sub	r18, r24
    413e:	39 0b       	sbc	r19, r25
    4140:	24 30       	cpi	r18, 0x04	; 4
    4142:	31 05       	cpc	r19, r1
    4144:	80 f4       	brcc	.+32     	; 0x4166 <malloc+0x9c>
    4146:	8a 81       	ldd	r24, Y+2	; 0x02
    4148:	9b 81       	ldd	r25, Y+3	; 0x03
    414a:	61 15       	cp	r22, r1
    414c:	71 05       	cpc	r23, r1
    414e:	21 f0       	breq	.+8      	; 0x4158 <malloc+0x8e>
    4150:	fb 01       	movw	r30, r22
    4152:	93 83       	std	Z+3, r25	; 0x03
    4154:	82 83       	std	Z+2, r24	; 0x02
    4156:	04 c0       	rjmp	.+8      	; 0x4160 <malloc+0x96>
    4158:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <__flp+0x1>
    415c:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <__flp>
    4160:	fe 01       	movw	r30, r28
    4162:	32 96       	adiw	r30, 0x02	; 2
    4164:	44 c0       	rjmp	.+136    	; 0x41ee <malloc+0x124>
    4166:	fe 01       	movw	r30, r28
    4168:	e2 0f       	add	r30, r18
    416a:	f3 1f       	adc	r31, r19
    416c:	81 93       	st	Z+, r24
    416e:	91 93       	st	Z+, r25
    4170:	22 50       	subi	r18, 0x02	; 2
    4172:	31 09       	sbc	r19, r1
    4174:	39 83       	std	Y+1, r19	; 0x01
    4176:	28 83       	st	Y, r18
    4178:	3a c0       	rjmp	.+116    	; 0x41ee <malloc+0x124>
    417a:	20 91 62 05 	lds	r18, 0x0562	; 0x800562 <__brkval>
    417e:	30 91 63 05 	lds	r19, 0x0563	; 0x800563 <__brkval+0x1>
    4182:	23 2b       	or	r18, r19
    4184:	41 f4       	brne	.+16     	; 0x4196 <malloc+0xcc>
    4186:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    418a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    418e:	30 93 63 05 	sts	0x0563, r19	; 0x800563 <__brkval+0x1>
    4192:	20 93 62 05 	sts	0x0562, r18	; 0x800562 <__brkval>
    4196:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    419a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    419e:	21 15       	cp	r18, r1
    41a0:	31 05       	cpc	r19, r1
    41a2:	41 f4       	brne	.+16     	; 0x41b4 <malloc+0xea>
    41a4:	2d b7       	in	r18, 0x3d	; 61
    41a6:	3e b7       	in	r19, 0x3e	; 62
    41a8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    41ac:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    41b0:	24 1b       	sub	r18, r20
    41b2:	35 0b       	sbc	r19, r21
    41b4:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <__brkval>
    41b8:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <__brkval+0x1>
    41bc:	e2 17       	cp	r30, r18
    41be:	f3 07       	cpc	r31, r19
    41c0:	a0 f4       	brcc	.+40     	; 0x41ea <malloc+0x120>
    41c2:	2e 1b       	sub	r18, r30
    41c4:	3f 0b       	sbc	r19, r31
    41c6:	28 17       	cp	r18, r24
    41c8:	39 07       	cpc	r19, r25
    41ca:	78 f0       	brcs	.+30     	; 0x41ea <malloc+0x120>
    41cc:	ac 01       	movw	r20, r24
    41ce:	4e 5f       	subi	r20, 0xFE	; 254
    41d0:	5f 4f       	sbci	r21, 0xFF	; 255
    41d2:	24 17       	cp	r18, r20
    41d4:	35 07       	cpc	r19, r21
    41d6:	48 f0       	brcs	.+18     	; 0x41ea <malloc+0x120>
    41d8:	4e 0f       	add	r20, r30
    41da:	5f 1f       	adc	r21, r31
    41dc:	50 93 63 05 	sts	0x0563, r21	; 0x800563 <__brkval+0x1>
    41e0:	40 93 62 05 	sts	0x0562, r20	; 0x800562 <__brkval>
    41e4:	81 93       	st	Z+, r24
    41e6:	91 93       	st	Z+, r25
    41e8:	02 c0       	rjmp	.+4      	; 0x41ee <malloc+0x124>
    41ea:	e0 e0       	ldi	r30, 0x00	; 0
    41ec:	f0 e0       	ldi	r31, 0x00	; 0
    41ee:	cf 01       	movw	r24, r30
    41f0:	df 91       	pop	r29
    41f2:	cf 91       	pop	r28
    41f4:	1f 91       	pop	r17
    41f6:	0f 91       	pop	r16
    41f8:	08 95       	ret

000041fa <free>:
    41fa:	cf 93       	push	r28
    41fc:	df 93       	push	r29
    41fe:	00 97       	sbiw	r24, 0x00	; 0
    4200:	09 f4       	brne	.+2      	; 0x4204 <free+0xa>
    4202:	81 c0       	rjmp	.+258    	; 0x4306 <free+0x10c>
    4204:	fc 01       	movw	r30, r24
    4206:	32 97       	sbiw	r30, 0x02	; 2
    4208:	13 82       	std	Z+3, r1	; 0x03
    420a:	12 82       	std	Z+2, r1	; 0x02
    420c:	a0 91 64 05 	lds	r26, 0x0564	; 0x800564 <__flp>
    4210:	b0 91 65 05 	lds	r27, 0x0565	; 0x800565 <__flp+0x1>
    4214:	10 97       	sbiw	r26, 0x00	; 0
    4216:	81 f4       	brne	.+32     	; 0x4238 <free+0x3e>
    4218:	20 81       	ld	r18, Z
    421a:	31 81       	ldd	r19, Z+1	; 0x01
    421c:	82 0f       	add	r24, r18
    421e:	93 1f       	adc	r25, r19
    4220:	20 91 62 05 	lds	r18, 0x0562	; 0x800562 <__brkval>
    4224:	30 91 63 05 	lds	r19, 0x0563	; 0x800563 <__brkval+0x1>
    4228:	28 17       	cp	r18, r24
    422a:	39 07       	cpc	r19, r25
    422c:	51 f5       	brne	.+84     	; 0x4282 <free+0x88>
    422e:	f0 93 63 05 	sts	0x0563, r31	; 0x800563 <__brkval+0x1>
    4232:	e0 93 62 05 	sts	0x0562, r30	; 0x800562 <__brkval>
    4236:	67 c0       	rjmp	.+206    	; 0x4306 <free+0x10c>
    4238:	ed 01       	movw	r28, r26
    423a:	20 e0       	ldi	r18, 0x00	; 0
    423c:	30 e0       	ldi	r19, 0x00	; 0
    423e:	ce 17       	cp	r28, r30
    4240:	df 07       	cpc	r29, r31
    4242:	40 f4       	brcc	.+16     	; 0x4254 <free+0x5a>
    4244:	4a 81       	ldd	r20, Y+2	; 0x02
    4246:	5b 81       	ldd	r21, Y+3	; 0x03
    4248:	9e 01       	movw	r18, r28
    424a:	41 15       	cp	r20, r1
    424c:	51 05       	cpc	r21, r1
    424e:	f1 f0       	breq	.+60     	; 0x428c <free+0x92>
    4250:	ea 01       	movw	r28, r20
    4252:	f5 cf       	rjmp	.-22     	; 0x423e <free+0x44>
    4254:	d3 83       	std	Z+3, r29	; 0x03
    4256:	c2 83       	std	Z+2, r28	; 0x02
    4258:	40 81       	ld	r20, Z
    425a:	51 81       	ldd	r21, Z+1	; 0x01
    425c:	84 0f       	add	r24, r20
    425e:	95 1f       	adc	r25, r21
    4260:	c8 17       	cp	r28, r24
    4262:	d9 07       	cpc	r29, r25
    4264:	59 f4       	brne	.+22     	; 0x427c <free+0x82>
    4266:	88 81       	ld	r24, Y
    4268:	99 81       	ldd	r25, Y+1	; 0x01
    426a:	84 0f       	add	r24, r20
    426c:	95 1f       	adc	r25, r21
    426e:	02 96       	adiw	r24, 0x02	; 2
    4270:	91 83       	std	Z+1, r25	; 0x01
    4272:	80 83       	st	Z, r24
    4274:	8a 81       	ldd	r24, Y+2	; 0x02
    4276:	9b 81       	ldd	r25, Y+3	; 0x03
    4278:	93 83       	std	Z+3, r25	; 0x03
    427a:	82 83       	std	Z+2, r24	; 0x02
    427c:	21 15       	cp	r18, r1
    427e:	31 05       	cpc	r19, r1
    4280:	29 f4       	brne	.+10     	; 0x428c <free+0x92>
    4282:	f0 93 65 05 	sts	0x0565, r31	; 0x800565 <__flp+0x1>
    4286:	e0 93 64 05 	sts	0x0564, r30	; 0x800564 <__flp>
    428a:	3d c0       	rjmp	.+122    	; 0x4306 <free+0x10c>
    428c:	e9 01       	movw	r28, r18
    428e:	fb 83       	std	Y+3, r31	; 0x03
    4290:	ea 83       	std	Y+2, r30	; 0x02
    4292:	49 91       	ld	r20, Y+
    4294:	59 91       	ld	r21, Y+
    4296:	c4 0f       	add	r28, r20
    4298:	d5 1f       	adc	r29, r21
    429a:	ec 17       	cp	r30, r28
    429c:	fd 07       	cpc	r31, r29
    429e:	61 f4       	brne	.+24     	; 0x42b8 <free+0xbe>
    42a0:	80 81       	ld	r24, Z
    42a2:	91 81       	ldd	r25, Z+1	; 0x01
    42a4:	84 0f       	add	r24, r20
    42a6:	95 1f       	adc	r25, r21
    42a8:	02 96       	adiw	r24, 0x02	; 2
    42aa:	e9 01       	movw	r28, r18
    42ac:	99 83       	std	Y+1, r25	; 0x01
    42ae:	88 83       	st	Y, r24
    42b0:	82 81       	ldd	r24, Z+2	; 0x02
    42b2:	93 81       	ldd	r25, Z+3	; 0x03
    42b4:	9b 83       	std	Y+3, r25	; 0x03
    42b6:	8a 83       	std	Y+2, r24	; 0x02
    42b8:	e0 e0       	ldi	r30, 0x00	; 0
    42ba:	f0 e0       	ldi	r31, 0x00	; 0
    42bc:	12 96       	adiw	r26, 0x02	; 2
    42be:	8d 91       	ld	r24, X+
    42c0:	9c 91       	ld	r25, X
    42c2:	13 97       	sbiw	r26, 0x03	; 3
    42c4:	00 97       	sbiw	r24, 0x00	; 0
    42c6:	19 f0       	breq	.+6      	; 0x42ce <free+0xd4>
    42c8:	fd 01       	movw	r30, r26
    42ca:	dc 01       	movw	r26, r24
    42cc:	f7 cf       	rjmp	.-18     	; 0x42bc <free+0xc2>
    42ce:	8d 91       	ld	r24, X+
    42d0:	9c 91       	ld	r25, X
    42d2:	11 97       	sbiw	r26, 0x01	; 1
    42d4:	9d 01       	movw	r18, r26
    42d6:	2e 5f       	subi	r18, 0xFE	; 254
    42d8:	3f 4f       	sbci	r19, 0xFF	; 255
    42da:	82 0f       	add	r24, r18
    42dc:	93 1f       	adc	r25, r19
    42de:	20 91 62 05 	lds	r18, 0x0562	; 0x800562 <__brkval>
    42e2:	30 91 63 05 	lds	r19, 0x0563	; 0x800563 <__brkval+0x1>
    42e6:	28 17       	cp	r18, r24
    42e8:	39 07       	cpc	r19, r25
    42ea:	69 f4       	brne	.+26     	; 0x4306 <free+0x10c>
    42ec:	30 97       	sbiw	r30, 0x00	; 0
    42ee:	29 f4       	brne	.+10     	; 0x42fa <free+0x100>
    42f0:	10 92 65 05 	sts	0x0565, r1	; 0x800565 <__flp+0x1>
    42f4:	10 92 64 05 	sts	0x0564, r1	; 0x800564 <__flp>
    42f8:	02 c0       	rjmp	.+4      	; 0x42fe <free+0x104>
    42fa:	13 82       	std	Z+3, r1	; 0x03
    42fc:	12 82       	std	Z+2, r1	; 0x02
    42fe:	b0 93 63 05 	sts	0x0563, r27	; 0x800563 <__brkval+0x1>
    4302:	a0 93 62 05 	sts	0x0562, r26	; 0x800562 <__brkval>
    4306:	df 91       	pop	r29
    4308:	cf 91       	pop	r28
    430a:	08 95       	ret

0000430c <realloc>:
    430c:	a0 e0       	ldi	r26, 0x00	; 0
    430e:	b0 e0       	ldi	r27, 0x00	; 0
    4310:	ec e8       	ldi	r30, 0x8C	; 140
    4312:	f1 e2       	ldi	r31, 0x21	; 33
    4314:	0c 94 65 22 	jmp	0x44ca	; 0x44ca <__prologue_saves__+0x8>
    4318:	ec 01       	movw	r28, r24
    431a:	00 97       	sbiw	r24, 0x00	; 0
    431c:	21 f4       	brne	.+8      	; 0x4326 <realloc+0x1a>
    431e:	cb 01       	movw	r24, r22
    4320:	0e 94 65 20 	call	0x40ca	; 0x40ca <malloc>
    4324:	b4 c0       	rjmp	.+360    	; 0x448e <realloc+0x182>
    4326:	fc 01       	movw	r30, r24
    4328:	e6 0f       	add	r30, r22
    432a:	f7 1f       	adc	r31, r23
    432c:	9c 01       	movw	r18, r24
    432e:	22 50       	subi	r18, 0x02	; 2
    4330:	31 09       	sbc	r19, r1
    4332:	e2 17       	cp	r30, r18
    4334:	f3 07       	cpc	r31, r19
    4336:	08 f4       	brcc	.+2      	; 0x433a <realloc+0x2e>
    4338:	a8 c0       	rjmp	.+336    	; 0x448a <realloc+0x17e>
    433a:	d9 01       	movw	r26, r18
    433c:	0d 91       	ld	r16, X+
    433e:	1c 91       	ld	r17, X
    4340:	11 97       	sbiw	r26, 0x01	; 1
    4342:	06 17       	cp	r16, r22
    4344:	17 07       	cpc	r17, r23
    4346:	b0 f0       	brcs	.+44     	; 0x4374 <realloc+0x68>
    4348:	05 30       	cpi	r16, 0x05	; 5
    434a:	11 05       	cpc	r17, r1
    434c:	08 f4       	brcc	.+2      	; 0x4350 <realloc+0x44>
    434e:	9b c0       	rjmp	.+310    	; 0x4486 <realloc+0x17a>
    4350:	c8 01       	movw	r24, r16
    4352:	04 97       	sbiw	r24, 0x04	; 4
    4354:	86 17       	cp	r24, r22
    4356:	97 07       	cpc	r25, r23
    4358:	08 f4       	brcc	.+2      	; 0x435c <realloc+0x50>
    435a:	95 c0       	rjmp	.+298    	; 0x4486 <realloc+0x17a>
    435c:	02 50       	subi	r16, 0x02	; 2
    435e:	11 09       	sbc	r17, r1
    4360:	06 1b       	sub	r16, r22
    4362:	17 0b       	sbc	r17, r23
    4364:	01 93       	st	Z+, r16
    4366:	11 93       	st	Z+, r17
    4368:	6d 93       	st	X+, r22
    436a:	7c 93       	st	X, r23
    436c:	cf 01       	movw	r24, r30
    436e:	0e 94 fd 20 	call	0x41fa	; 0x41fa <free>
    4372:	89 c0       	rjmp	.+274    	; 0x4486 <realloc+0x17a>
    4374:	5b 01       	movw	r10, r22
    4376:	a0 1a       	sub	r10, r16
    4378:	b1 0a       	sbc	r11, r17
    437a:	4c 01       	movw	r8, r24
    437c:	80 0e       	add	r8, r16
    437e:	91 1e       	adc	r9, r17
    4380:	a0 91 64 05 	lds	r26, 0x0564	; 0x800564 <__flp>
    4384:	b0 91 65 05 	lds	r27, 0x0565	; 0x800565 <__flp+0x1>
    4388:	61 2c       	mov	r6, r1
    438a:	71 2c       	mov	r7, r1
    438c:	e1 2c       	mov	r14, r1
    438e:	f1 2c       	mov	r15, r1
    4390:	10 97       	sbiw	r26, 0x00	; 0
    4392:	09 f4       	brne	.+2      	; 0x4396 <realloc+0x8a>
    4394:	46 c0       	rjmp	.+140    	; 0x4422 <realloc+0x116>
    4396:	8d 91       	ld	r24, X+
    4398:	9c 91       	ld	r25, X
    439a:	11 97       	sbiw	r26, 0x01	; 1
    439c:	a8 15       	cp	r26, r8
    439e:	b9 05       	cpc	r27, r9
    43a0:	b1 f5       	brne	.+108    	; 0x440e <realloc+0x102>
    43a2:	6c 01       	movw	r12, r24
    43a4:	42 e0       	ldi	r20, 0x02	; 2
    43a6:	c4 0e       	add	r12, r20
    43a8:	d1 1c       	adc	r13, r1
    43aa:	ca 14       	cp	r12, r10
    43ac:	db 04       	cpc	r13, r11
    43ae:	78 f1       	brcs	.+94     	; 0x440e <realloc+0x102>
    43b0:	4c 01       	movw	r8, r24
    43b2:	8a 18       	sub	r8, r10
    43b4:	9b 08       	sbc	r9, r11
    43b6:	64 01       	movw	r12, r8
    43b8:	42 e0       	ldi	r20, 0x02	; 2
    43ba:	c4 0e       	add	r12, r20
    43bc:	d1 1c       	adc	r13, r1
    43be:	12 96       	adiw	r26, 0x02	; 2
    43c0:	bc 90       	ld	r11, X
    43c2:	12 97       	sbiw	r26, 0x02	; 2
    43c4:	13 96       	adiw	r26, 0x03	; 3
    43c6:	ac 91       	ld	r26, X
    43c8:	b5 e0       	ldi	r27, 0x05	; 5
    43ca:	cb 16       	cp	r12, r27
    43cc:	d1 04       	cpc	r13, r1
    43ce:	40 f0       	brcs	.+16     	; 0x43e0 <realloc+0xd4>
    43d0:	b2 82       	std	Z+2, r11	; 0x02
    43d2:	a3 83       	std	Z+3, r26	; 0x03
    43d4:	91 82       	std	Z+1, r9	; 0x01
    43d6:	80 82       	st	Z, r8
    43d8:	d9 01       	movw	r26, r18
    43da:	6d 93       	st	X+, r22
    43dc:	7c 93       	st	X, r23
    43de:	09 c0       	rjmp	.+18     	; 0x43f2 <realloc+0xe6>
    43e0:	0e 5f       	subi	r16, 0xFE	; 254
    43e2:	1f 4f       	sbci	r17, 0xFF	; 255
    43e4:	80 0f       	add	r24, r16
    43e6:	91 1f       	adc	r25, r17
    43e8:	f9 01       	movw	r30, r18
    43ea:	91 83       	std	Z+1, r25	; 0x01
    43ec:	80 83       	st	Z, r24
    43ee:	eb 2d       	mov	r30, r11
    43f0:	fa 2f       	mov	r31, r26
    43f2:	e1 14       	cp	r14, r1
    43f4:	f1 04       	cpc	r15, r1
    43f6:	31 f0       	breq	.+12     	; 0x4404 <realloc+0xf8>
    43f8:	d7 01       	movw	r26, r14
    43fa:	13 96       	adiw	r26, 0x03	; 3
    43fc:	fc 93       	st	X, r31
    43fe:	ee 93       	st	-X, r30
    4400:	12 97       	sbiw	r26, 0x02	; 2
    4402:	41 c0       	rjmp	.+130    	; 0x4486 <realloc+0x17a>
    4404:	f0 93 65 05 	sts	0x0565, r31	; 0x800565 <__flp+0x1>
    4408:	e0 93 64 05 	sts	0x0564, r30	; 0x800564 <__flp>
    440c:	3c c0       	rjmp	.+120    	; 0x4486 <realloc+0x17a>
    440e:	68 16       	cp	r6, r24
    4410:	79 06       	cpc	r7, r25
    4412:	08 f4       	brcc	.+2      	; 0x4416 <realloc+0x10a>
    4414:	3c 01       	movw	r6, r24
    4416:	7d 01       	movw	r14, r26
    4418:	12 96       	adiw	r26, 0x02	; 2
    441a:	0d 90       	ld	r0, X+
    441c:	bc 91       	ld	r27, X
    441e:	a0 2d       	mov	r26, r0
    4420:	b7 cf       	rjmp	.-146    	; 0x4390 <realloc+0x84>
    4422:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <__brkval>
    4426:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <__brkval+0x1>
    442a:	88 16       	cp	r8, r24
    442c:	99 06       	cpc	r9, r25
    442e:	e1 f4       	brne	.+56     	; 0x4468 <realloc+0x15c>
    4430:	66 16       	cp	r6, r22
    4432:	77 06       	cpc	r7, r23
    4434:	c8 f4       	brcc	.+50     	; 0x4468 <realloc+0x15c>
    4436:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    443a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    443e:	00 97       	sbiw	r24, 0x00	; 0
    4440:	41 f4       	brne	.+16     	; 0x4452 <realloc+0x146>
    4442:	8d b7       	in	r24, 0x3d	; 61
    4444:	9e b7       	in	r25, 0x3e	; 62
    4446:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    444a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    444e:	84 1b       	sub	r24, r20
    4450:	95 0b       	sbc	r25, r21
    4452:	e8 17       	cp	r30, r24
    4454:	f9 07       	cpc	r31, r25
    4456:	c8 f4       	brcc	.+50     	; 0x448a <realloc+0x17e>
    4458:	f0 93 63 05 	sts	0x0563, r31	; 0x800563 <__brkval+0x1>
    445c:	e0 93 62 05 	sts	0x0562, r30	; 0x800562 <__brkval>
    4460:	f9 01       	movw	r30, r18
    4462:	71 83       	std	Z+1, r23	; 0x01
    4464:	60 83       	st	Z, r22
    4466:	0f c0       	rjmp	.+30     	; 0x4486 <realloc+0x17a>
    4468:	cb 01       	movw	r24, r22
    446a:	0e 94 65 20 	call	0x40ca	; 0x40ca <malloc>
    446e:	7c 01       	movw	r14, r24
    4470:	00 97       	sbiw	r24, 0x00	; 0
    4472:	59 f0       	breq	.+22     	; 0x448a <realloc+0x17e>
    4474:	a8 01       	movw	r20, r16
    4476:	be 01       	movw	r22, r28
    4478:	0e 94 51 22 	call	0x44a2	; 0x44a2 <memcpy>
    447c:	ce 01       	movw	r24, r28
    447e:	0e 94 fd 20 	call	0x41fa	; 0x41fa <free>
    4482:	c7 01       	movw	r24, r14
    4484:	04 c0       	rjmp	.+8      	; 0x448e <realloc+0x182>
    4486:	ce 01       	movw	r24, r28
    4488:	02 c0       	rjmp	.+4      	; 0x448e <realloc+0x182>
    448a:	80 e0       	ldi	r24, 0x00	; 0
    448c:	90 e0       	ldi	r25, 0x00	; 0
    448e:	cd b7       	in	r28, 0x3d	; 61
    4490:	de b7       	in	r29, 0x3e	; 62
    4492:	ee e0       	ldi	r30, 0x0E	; 14
    4494:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__epilogue_restores__+0x8>

00004498 <abort>:
    4498:	81 e0       	ldi	r24, 0x01	; 1
    449a:	90 e0       	ldi	r25, 0x00	; 0
    449c:	f8 94       	cli
    449e:	0c 94 98 22 	jmp	0x4530	; 0x4530 <__do_global_dtors>

000044a2 <memcpy>:
    44a2:	fb 01       	movw	r30, r22
    44a4:	dc 01       	movw	r26, r24
    44a6:	02 c0       	rjmp	.+4      	; 0x44ac <memcpy+0xa>
    44a8:	01 90       	ld	r0, Z+
    44aa:	0d 92       	st	X+, r0
    44ac:	41 50       	subi	r20, 0x01	; 1
    44ae:	50 40       	sbci	r21, 0x00	; 0
    44b0:	d8 f7       	brcc	.-10     	; 0x44a8 <memcpy+0x6>
    44b2:	08 95       	ret

000044b4 <strcpy>:
    44b4:	fb 01       	movw	r30, r22
    44b6:	dc 01       	movw	r26, r24
    44b8:	01 90       	ld	r0, Z+
    44ba:	0d 92       	st	X+, r0
    44bc:	00 20       	and	r0, r0
    44be:	e1 f7       	brne	.-8      	; 0x44b8 <strcpy+0x4>
    44c0:	08 95       	ret

000044c2 <__prologue_saves__>:
    44c2:	2f 92       	push	r2
    44c4:	3f 92       	push	r3
    44c6:	4f 92       	push	r4
    44c8:	5f 92       	push	r5
    44ca:	6f 92       	push	r6
    44cc:	7f 92       	push	r7
    44ce:	8f 92       	push	r8
    44d0:	9f 92       	push	r9
    44d2:	af 92       	push	r10
    44d4:	bf 92       	push	r11
    44d6:	cf 92       	push	r12
    44d8:	df 92       	push	r13
    44da:	ef 92       	push	r14
    44dc:	ff 92       	push	r15
    44de:	0f 93       	push	r16
    44e0:	1f 93       	push	r17
    44e2:	cf 93       	push	r28
    44e4:	df 93       	push	r29
    44e6:	cd b7       	in	r28, 0x3d	; 61
    44e8:	de b7       	in	r29, 0x3e	; 62
    44ea:	ca 1b       	sub	r28, r26
    44ec:	db 0b       	sbc	r29, r27
    44ee:	0f b6       	in	r0, 0x3f	; 63
    44f0:	f8 94       	cli
    44f2:	de bf       	out	0x3e, r29	; 62
    44f4:	0f be       	out	0x3f, r0	; 63
    44f6:	cd bf       	out	0x3d, r28	; 61
    44f8:	09 94       	ijmp

000044fa <__epilogue_restores__>:
    44fa:	2a 88       	ldd	r2, Y+18	; 0x12
    44fc:	39 88       	ldd	r3, Y+17	; 0x11
    44fe:	48 88       	ldd	r4, Y+16	; 0x10
    4500:	5f 84       	ldd	r5, Y+15	; 0x0f
    4502:	6e 84       	ldd	r6, Y+14	; 0x0e
    4504:	7d 84       	ldd	r7, Y+13	; 0x0d
    4506:	8c 84       	ldd	r8, Y+12	; 0x0c
    4508:	9b 84       	ldd	r9, Y+11	; 0x0b
    450a:	aa 84       	ldd	r10, Y+10	; 0x0a
    450c:	b9 84       	ldd	r11, Y+9	; 0x09
    450e:	c8 84       	ldd	r12, Y+8	; 0x08
    4510:	df 80       	ldd	r13, Y+7	; 0x07
    4512:	ee 80       	ldd	r14, Y+6	; 0x06
    4514:	fd 80       	ldd	r15, Y+5	; 0x05
    4516:	0c 81       	ldd	r16, Y+4	; 0x04
    4518:	1b 81       	ldd	r17, Y+3	; 0x03
    451a:	aa 81       	ldd	r26, Y+2	; 0x02
    451c:	b9 81       	ldd	r27, Y+1	; 0x01
    451e:	ce 0f       	add	r28, r30
    4520:	d1 1d       	adc	r29, r1
    4522:	0f b6       	in	r0, 0x3f	; 63
    4524:	f8 94       	cli
    4526:	de bf       	out	0x3e, r29	; 62
    4528:	0f be       	out	0x3f, r0	; 63
    452a:	cd bf       	out	0x3d, r28	; 61
    452c:	ed 01       	movw	r28, r26
    452e:	08 95       	ret

00004530 <__do_global_dtors>:
    4530:	10 e0       	ldi	r17, 0x00	; 0
    4532:	cc ee       	ldi	r28, 0xEC	; 236
    4534:	d0 e0       	ldi	r29, 0x00	; 0
    4536:	04 c0       	rjmp	.+8      	; 0x4540 <__do_global_dtors+0x10>
    4538:	fe 01       	movw	r30, r28
    453a:	0e 94 4b 20 	call	0x4096	; 0x4096 <__tablejump2__>
    453e:	21 96       	adiw	r28, 0x01	; 1
    4540:	cd 3e       	cpi	r28, 0xED	; 237
    4542:	d1 07       	cpc	r29, r17
    4544:	c9 f7       	brne	.-14     	; 0x4538 <__do_global_dtors+0x8>
    4546:	f8 94       	cli

00004548 <__stop_program>:
    4548:	ff cf       	rjmp	.-2      	; 0x4548 <__stop_program>
