
Projektarbeit_COC_BRA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000248  00800100  00005e90  00005f24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005e90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003cd  00800348  00800348  0000616c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000616c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000619c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000d30  00000000  00000000  000061dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001e5db  00000000  00000000  00006f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004daf  00000000  00000000  000254e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000077e0  00000000  00000000  0002a296  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002c7c  00000000  00000000  00031a78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005818  00000000  00000000  000346f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ec80  00000000  00000000  00039f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e10  00000000  00000000  00048b8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__dtors_end>
       4:	0c 94 b1 26 	jmp	0x4d62	; 0x4d62 <__vector_1>
       8:	0c 94 d8 26 	jmp	0x4db0	; 0x4db0 <__vector_2>
       c:	0c 94 ff 26 	jmp	0x4dfe	; 0x4dfe <__vector_3>
      10:	0c 94 26 27 	jmp	0x4e4c	; 0x4e4c <__vector_4>
      14:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      18:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      1c:	0c 94 4d 27 	jmp	0x4e9a	; 0x4e9a <__vector_7>
      20:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      24:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      28:	0c 94 cc 25 	jmp	0x4b98	; 0x4b98 <__vector_10>
      2c:	0c 94 68 24 	jmp	0x48d0	; 0x48d0 <__vector_11>
      30:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      34:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      38:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      3c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      40:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      44:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      48:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      4c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      50:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      54:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      58:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      5c:	0c 94 74 27 	jmp	0x4ee8	; 0x4ee8 <__vector_23>
      60:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      64:	0c 94 a6 1f 	jmp	0x3f4c	; 0x3f4c <__vector_25>
      68:	0c 94 d8 1f 	jmp	0x3fb0	; 0x3fb0 <__vector_26>
      6c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      70:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      74:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      78:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      7c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      80:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      84:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      88:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      8c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      90:	0c 94 6f 18 	jmp	0x30de	; 0x30de <__vector_36>
      94:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      98:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      9c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      a0:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      a4:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      a8:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      ac:	e4 28       	or	r14, r4
      ae:	e9 28       	or	r14, r9
      b0:	ee 28       	or	r14, r14
      b2:	f8 28       	or	r15, r8
      b4:	02 29       	or	r16, r2
      b6:	4c 29       	or	r20, r12
      b8:	4c 29       	or	r20, r12
      ba:	4c 29       	or	r20, r12
      bc:	0c 29       	or	r16, r12
      be:	16 29       	or	r17, r6
      c0:	20 29       	or	r18, r0
      c2:	2a 29       	or	r18, r10
      c4:	37 29       	or	r19, r7
      c6:	4c 29       	or	r20, r12
      c8:	3f 29       	or	r19, r15
      ca:	6d 29       	or	r22, r13
      cc:	70 29       	or	r23, r0
      ce:	5f 29       	or	r21, r15
      d0:	63 29       	or	r22, r3
      d2:	69 29       	or	r22, r9
      d4:	91 29       	or	r25, r1
      d6:	91 29       	or	r25, r1
      d8:	91 29       	or	r25, r1
      da:	74 29       	or	r23, r4
      dc:	78 29       	or	r23, r8
      de:	7c 29       	or	r23, r12
      e0:	82 29       	or	r24, r2
      e2:	86 29       	or	r24, r6
      e4:	91 29       	or	r25, r1
      e6:	8c 29       	or	r24, r12

000000e8 <__trampolines_end>:
      e8:	08 0b       	sbc	r16, r24
      ea:	00 02       	muls	r16, r16
      ec:	02 02       	muls	r16, r18
      ee:	01 00       	.word	0x0001	; ????
      f0:	09 04       	cpc	r0, r9
      f2:	00 00       	nop
      f4:	01 02       	muls	r16, r17
      f6:	02 00       	.word	0x0002	; ????
      f8:	00 05       	cpc	r16, r0
      fa:	24 00       	.word	0x0024	; ????
      fc:	10 01       	movw	r2, r0
      fe:	05 24       	eor	r0, r5
     100:	01 01       	movw	r0, r2
     102:	01 04       	cpc	r0, r1
     104:	24 02       	muls	r18, r20
     106:	06 05       	cpc	r16, r6
     108:	24 06       	cpc	r2, r20
     10a:	00 01       	movw	r0, r0
     10c:	07 05       	cpc	r16, r7
     10e:	81 03       	fmuls	r16, r17
     110:	10 00       	.word	0x0010	; ????
     112:	40 09       	sbc	r20, r0
     114:	04 01       	movw	r0, r8
     116:	00 02       	muls	r16, r16
     118:	0a 00       	.word	0x000a	; ????
     11a:	00 00       	nop
     11c:	07 05       	cpc	r16, r7
     11e:	02 02       	muls	r16, r18
     120:	40 00       	.word	0x0040	; ????
     122:	00 07       	cpc	r16, r16
     124:	05 83       	std	Z+5, r16	; 0x05
     126:	02 40       	sbci	r16, 0x02	; 2
	...

0000012a <USB_DeviceDescriptorIAD>:
     12a:	12 01 00 02 ef 02 01 40 41 23 36 80 00 01 01 02     .......@A#6.....
     13a:	03 01                                               ..

0000013c <STRING_MANUFACTURER>:
     13c:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

00000148 <STRING_PRODUCT>:
     148:	41 72 64 75 69 6e 6f 20 4c 65 6f 6e 61 72 64 6f     Arduino Leonardo
	...

00000159 <STRING_LANGUAGE>:
     159:	04 03 09 04                                         ....

0000015d <analog_pin_to_channel_PGM>:
     15d:	07 06 05 04 01 00 08 0a 0b 0c 0d 09                 ............

00000169 <digital_pin_to_timer_PGM>:
     169:	00 00 00 02 00 09 0f 00 00 03 04 01 00 0c 00 00     ................
	...

00000188 <digital_pin_to_bit_mask_PGM>:
     188:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     198:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

000001a7 <digital_pin_to_port_PGM>:
     1a7:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     1b7:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

000001c6 <port_to_input_PGM>:
     1c6:	00 00 00 00 23 00 26 00 29 00 2c 00 2f 00           ....#.&.).,./.

000001d4 <port_to_output_PGM>:
     1d4:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

000001e2 <port_to_mode_PGM>:
     1e2:	00 00 00 00 24 00 27 00 2a 00 2d 00 30 00           ....$.'.*.-.0.

000001f0 <__ctors_start>:
     1f0:	9a 06       	cpc	r9, r26
     1f2:	03 1b       	sub	r16, r19
     1f4:	52 1e       	adc	r5, r18
     1f6:	08 20       	and	r0, r8

000001f8 <__ctors_end>:
     1f8:	21 08       	sbc	r2, r1

000001fa <__dtors_end>:
     1fa:	11 24       	eor	r1, r1
     1fc:	1f be       	out	0x3f, r1	; 63
     1fe:	cf ef       	ldi	r28, 0xFF	; 255
     200:	da e0       	ldi	r29, 0x0A	; 10
     202:	de bf       	out	0x3e, r29	; 62
     204:	cd bf       	out	0x3d, r28	; 61

00000206 <__do_copy_data>:
     206:	13 e0       	ldi	r17, 0x03	; 3
     208:	a0 e0       	ldi	r26, 0x00	; 0
     20a:	b1 e0       	ldi	r27, 0x01	; 1
     20c:	e0 e9       	ldi	r30, 0x90	; 144
     20e:	fe e5       	ldi	r31, 0x5E	; 94
     210:	02 c0       	rjmp	.+4      	; 0x216 <__do_copy_data+0x10>
     212:	05 90       	lpm	r0, Z+
     214:	0d 92       	st	X+, r0
     216:	a8 34       	cpi	r26, 0x48	; 72
     218:	b1 07       	cpc	r27, r17
     21a:	d9 f7       	brne	.-10     	; 0x212 <__do_copy_data+0xc>

0000021c <__do_clear_bss>:
     21c:	27 e0       	ldi	r18, 0x07	; 7
     21e:	a8 e4       	ldi	r26, 0x48	; 72
     220:	b3 e0       	ldi	r27, 0x03	; 3
     222:	01 c0       	rjmp	.+2      	; 0x226 <.do_clear_bss_start>

00000224 <.do_clear_bss_loop>:
     224:	1d 92       	st	X+, r1

00000226 <.do_clear_bss_start>:
     226:	a5 31       	cpi	r26, 0x15	; 21
     228:	b2 07       	cpc	r27, r18
     22a:	e1 f7       	brne	.-8      	; 0x224 <.do_clear_bss_loop>

0000022c <__do_global_ctors>:
     22c:	10 e0       	ldi	r17, 0x00	; 0
     22e:	cc ef       	ldi	r28, 0xFC	; 252
     230:	d0 e0       	ldi	r29, 0x00	; 0
     232:	04 c0       	rjmp	.+8      	; 0x23c <__do_global_ctors+0x10>
     234:	21 97       	sbiw	r28, 0x01	; 1
     236:	fe 01       	movw	r30, r28
     238:	0e 94 4c 2c 	call	0x5898	; 0x5898 <__tablejump2__>
     23c:	c8 3f       	cpi	r28, 0xF8	; 248
     23e:	d1 07       	cpc	r29, r17
     240:	c9 f7       	brne	.-14     	; 0x234 <__do_global_ctors+0x8>
     242:	0e 94 36 20 	call	0x406c	; 0x406c <main>
     246:	0c 94 3b 2f 	jmp	0x5e76	; 0x5e76 <__do_global_dtors>

0000024a <__bad_interrupt>:
     24a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024e <_Z6getkeyv>:
 */
int getkey(void)
{
	static int keys[NUMKEYS+1];
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	0e 94 8c 28 	call	0x5118	; 0x5118 <analogRead>

	if (val > 1020) { // no key pressed
     254:	8d 3f       	cpi	r24, 0xFD	; 253
     256:	23 e0       	ldi	r18, 0x03	; 3
     258:	92 07       	cpc	r25, r18
     25a:	20 f1       	brcs	.+72     	; 0x2a4 <_Z6getkeyv+0x56>
		if (++keys[0] > NOPRESS) {
     25c:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <__data_end>
     260:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <__data_end+0x1>
     264:	01 96       	adiw	r24, 0x01	; 1
     266:	90 93 49 03 	sts	0x0349, r25	; 0x800349 <__data_end+0x1>
     26a:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <__data_end>
     26e:	03 97       	sbiw	r24, 0x03	; 3
     270:	0c f4       	brge	.+2      	; 0x274 <_Z6getkeyv+0x26>
     272:	6a c0       	rjmp	.+212    	; 0x348 <_Z6getkeyv+0xfa>
     274:	e8 e4       	ldi	r30, 0x48	; 72
     276:	f3 e0       	ldi	r31, 0x03	; 3
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	90 e0       	ldi	r25, 0x00	; 0
			for(uint8_t i = 0; i <= NUMKEYS; i++){
				if(keys[i] > KEYPRESS){
     280:	40 81       	ld	r20, Z
     282:	51 81       	ldd	r21, Z+1	; 0x01
     284:	44 30       	cpi	r20, 0x04	; 4
     286:	51 05       	cpc	r21, r1
     288:	2c f0       	brlt	.+10     	; 0x294 <_Z6getkeyv+0x46>
     28a:	c9 01       	movw	r24, r18
					data = i;
					if(keys[i] > LONGPRESS) data += 5;
     28c:	49 3c       	cpi	r20, 0xC9	; 201
     28e:	51 05       	cpc	r21, r1
     290:	0c f0       	brlt	.+2      	; 0x294 <_Z6getkeyv+0x46>
     292:	05 96       	adiw	r24, 0x05	; 5
				}
				keys[i] = 0;
     294:	11 92       	st	Z+, r1
     296:	11 92       	st	Z+, r1
     298:	2f 5f       	subi	r18, 0xFF	; 255
     29a:	3f 4f       	sbci	r19, 0xFF	; 255
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);

	if (val > 1020) { // no key pressed
		if (++keys[0] > NOPRESS) {
			for(uint8_t i = 0; i <= NUMKEYS; i++){
     29c:	26 30       	cpi	r18, 0x06	; 6
     29e:	31 05       	cpc	r19, r1
     2a0:	79 f7       	brne	.-34     	; 0x280 <_Z6getkeyv+0x32>
     2a2:	08 95       	ret
			}
		}
		else data = 0;
	}
	else {
		if (val < S1_LIMIT && keys[1] < 32000) ++keys[1]; // key1 pressed
     2a4:	89 34       	cpi	r24, 0x49	; 73
     2a6:	91 05       	cpc	r25, r1
     2a8:	70 f4       	brcc	.+28     	; 0x2c6 <_Z6getkeyv+0x78>
     2aa:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <__data_end+0x2>
     2ae:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <__data_end+0x3>
     2b2:	81 15       	cp	r24, r1
     2b4:	2d e7       	ldi	r18, 0x7D	; 125
     2b6:	92 07       	cpc	r25, r18
     2b8:	4c f4       	brge	.+18     	; 0x2cc <_Z6getkeyv+0x7e>
     2ba:	01 96       	adiw	r24, 0x01	; 1
     2bc:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <__data_end+0x3>
     2c0:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <__data_end+0x2>
     2c4:	41 c0       	rjmp	.+130    	; 0x348 <_Z6getkeyv+0xfa>
		else if (val < S2_LIMIT && keys[2] < 32000) ++keys[2]; //key2 pressed
     2c6:	8e 3e       	cpi	r24, 0xEE	; 238
     2c8:	91 05       	cpc	r25, r1
     2ca:	70 f4       	brcc	.+28     	; 0x2e8 <_Z6getkeyv+0x9a>
     2cc:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <__data_end+0x4>
     2d0:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <__data_end+0x5>
     2d4:	81 15       	cp	r24, r1
     2d6:	2d e7       	ldi	r18, 0x7D	; 125
     2d8:	92 07       	cpc	r25, r18
     2da:	54 f4       	brge	.+20     	; 0x2f0 <_Z6getkeyv+0xa2>
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <__data_end+0x5>
     2e2:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <__data_end+0x4>
     2e6:	30 c0       	rjmp	.+96     	; 0x348 <_Z6getkeyv+0xfa>
		else if (val < S3_LIMIT && keys[3] < 32000) ++keys[3]; //key3 pressed
     2e8:	82 3a       	cpi	r24, 0xA2	; 162
     2ea:	21 e0       	ldi	r18, 0x01	; 1
     2ec:	92 07       	cpc	r25, r18
     2ee:	70 f4       	brcc	.+28     	; 0x30c <_Z6getkeyv+0xbe>
     2f0:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <__data_end+0x6>
     2f4:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <__data_end+0x7>
     2f8:	81 15       	cp	r24, r1
     2fa:	2d e7       	ldi	r18, 0x7D	; 125
     2fc:	92 07       	cpc	r25, r18
     2fe:	4c f4       	brge	.+18     	; 0x312 <_Z6getkeyv+0xc4>
     300:	01 96       	adiw	r24, 0x01	; 1
     302:	90 93 4f 03 	sts	0x034F, r25	; 0x80034f <__data_end+0x7>
     306:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <__data_end+0x6>
     30a:	1e c0       	rjmp	.+60     	; 0x348 <_Z6getkeyv+0xfa>
		else if (val < S4_LIMIT && keys[4] < 32000) ++keys[4]; //key4 pressed
     30c:	80 37       	cpi	r24, 0x70	; 112
     30e:	92 40       	sbci	r25, 0x02	; 2
     310:	70 f4       	brcc	.+28     	; 0x32e <_Z6getkeyv+0xe0>
     312:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <__data_end+0x8>
     316:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <__data_end+0x9>
     31a:	81 15       	cp	r24, r1
     31c:	2d e7       	ldi	r18, 0x7D	; 125
     31e:	92 07       	cpc	r25, r18
     320:	34 f4       	brge	.+12     	; 0x32e <_Z6getkeyv+0xe0>
     322:	01 96       	adiw	r24, 0x01	; 1
     324:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <__data_end+0x9>
     328:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <__data_end+0x8>
     32c:	0d c0       	rjmp	.+26     	; 0x348 <_Z6getkeyv+0xfa>
		else if ( keys[5] < 32000) ++keys[5]; // key5 pressed
     32e:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <__data_end+0xa>
     332:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <__data_end+0xb>
     336:	81 15       	cp	r24, r1
     338:	2d e7       	ldi	r18, 0x7D	; 125
     33a:	92 07       	cpc	r25, r18
     33c:	2c f4       	brge	.+10     	; 0x348 <_Z6getkeyv+0xfa>
     33e:	01 96       	adiw	r24, 0x01	; 1
     340:	90 93 53 03 	sts	0x0353, r25	; 0x800353 <__data_end+0xb>
     344:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <__data_end+0xa>
		data = 0;
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
	}
	return data;
}
     34c:	08 95       	ret

0000034e <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	08 95       	ret

00000354 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     354:	08 95       	ret

00000356 <_ZN7hd4478013iosetContrastEh>:
{	
	analogWrite(En_Motor,0);
	lcd.clear();
	lcd.print("Zeiger kalibrieren");
	delay(2000);
	lcd.clear();
     356:	8d ef       	ldi	r24, 0xFD	; 253
     358:	9f ef       	ldi	r25, 0xFF	; 255
     35a:	08 95       	ret

0000035c <_Z14chooseTimeZonev>:
     35c:	90 91 4e 04 	lds	r25, 0x044E	; 0x80044e <timeZoneChoosen>
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	89 27       	eor	r24, r25
     364:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <timeZoneChoosen>
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	08 95       	ret

0000036e <_Z10changeAMPMv>:
     36e:	90 91 4d 04 	lds	r25, 0x044D	; 0x80044d <ampm>
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	89 27       	eor	r24, r25
     376:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <ampm>
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	08 95       	ret

00000380 <_Z8setAlarmv>:
     380:	90 91 74 03 	lds	r25, 0x0374	; 0x800374 <weckerStatus>
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	89 27       	eor	r24, r25
     388:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <weckerStatus>
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	08 95       	ret

00000392 <_Z10wheelSpeedv>:
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	40 e8       	ldi	r20, 0x80	; 128
     398:	5f e3       	ldi	r21, 0x3F	; 63
     39a:	60 91 49 04 	lds	r22, 0x0449	; 0x800449 <duration>
     39e:	70 91 4a 04 	lds	r23, 0x044A	; 0x80044a <duration+0x1>
     3a2:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <duration+0x2>
     3a6:	90 91 4c 04 	lds	r25, 0x044C	; 0x80044c <duration+0x3>
     3aa:	0e 94 08 1b 	call	0x3610	; 0x3610 <__addsf3>
     3ae:	60 93 49 04 	sts	0x0449, r22	; 0x800449 <duration>
     3b2:	70 93 4a 04 	sts	0x044A, r23	; 0x80044a <duration+0x1>
     3b6:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <duration+0x2>
     3ba:	90 93 4c 04 	sts	0x044C, r25	; 0x80044c <duration+0x3>
     3be:	08 95       	ret

000003c0 <_Z9gpsScreeni>:
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	ec 01       	movw	r28, r24
     3c6:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <gpsDataReceived>
     3ca:	40 e0       	ldi	r20, 0x00	; 0
     3cc:	60 e0       	ldi	r22, 0x00	; 0
     3ce:	88 23       	and	r24, r24
     3d0:	09 f4       	brne	.+2      	; 0x3d4 <_Z9gpsScreeni+0x14>
     3d2:	4d c0       	rjmp	.+154    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     3d4:	83 e1       	ldi	r24, 0x13	; 19
     3d6:	95 e0       	ldi	r25, 0x05	; 5
     3d8:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN7hd447809setCursorEhh>
     3dc:	6c e9       	ldi	r22, 0x9C	; 156
     3de:	73 e0       	ldi	r23, 0x03	; 3
     3e0:	83 e1       	ldi	r24, 0x13	; 19
     3e2:	95 e0       	ldi	r25, 0x05	; 5
     3e4:	0e 94 88 20 	call	0x4110	; 0x4110 <_ZN5Print5printERK6String>
     3e8:	6f ed       	ldi	r22, 0xDF	; 223
     3ea:	83 e1       	ldi	r24, 0x13	; 19
     3ec:	95 e0       	ldi	r25, 0x05	; 5
     3ee:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN5Print5printEc>
     3f2:	66 e9       	ldi	r22, 0x96	; 150
     3f4:	73 e0       	ldi	r23, 0x03	; 3
     3f6:	83 e1       	ldi	r24, 0x13	; 19
     3f8:	95 e0       	ldi	r25, 0x05	; 5
     3fa:	0e 94 88 20 	call	0x4110	; 0x4110 <_ZN5Print5printERK6String>
     3fe:	66 e3       	ldi	r22, 0x36	; 54
     400:	71 e0       	ldi	r23, 0x01	; 1
     402:	83 e1       	ldi	r24, 0x13	; 19
     404:	95 e0       	ldi	r25, 0x05	; 5
     406:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN5Print5printEPKc>
     40a:	60 91 95 03 	lds	r22, 0x0395	; 0x800395 <latitudeDir>
     40e:	83 e1       	ldi	r24, 0x13	; 19
     410:	95 e0       	ldi	r25, 0x05	; 5
     412:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN5Print5printEc>
     416:	41 e0       	ldi	r20, 0x01	; 1
     418:	60 e0       	ldi	r22, 0x00	; 0
     41a:	83 e1       	ldi	r24, 0x13	; 19
     41c:	95 e0       	ldi	r25, 0x05	; 5
     41e:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN7hd447809setCursorEhh>
     422:	60 91 a5 03 	lds	r22, 0x03A5	; 0x8003a5 <longitudeDegr>
     426:	70 91 a6 03 	lds	r23, 0x03A6	; 0x8003a6 <longitudeDegr+0x1>
     42a:	4a e0       	ldi	r20, 0x0A	; 10
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	83 e1       	ldi	r24, 0x13	; 19
     430:	95 e0       	ldi	r25, 0x05	; 5
     432:	0e 94 43 21 	call	0x4286	; 0x4286 <_ZN5Print5printEii>
     436:	6f ed       	ldi	r22, 0xDF	; 223
     438:	83 e1       	ldi	r24, 0x13	; 19
     43a:	95 e0       	ldi	r25, 0x05	; 5
     43c:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN5Print5printEc>
     440:	60 91 a3 03 	lds	r22, 0x03A3	; 0x8003a3 <longitudeMin>
     444:	70 91 a4 03 	lds	r23, 0x03A4	; 0x8003a4 <longitudeMin+0x1>
     448:	4a e0       	ldi	r20, 0x0A	; 10
     44a:	50 e0       	ldi	r21, 0x00	; 0
     44c:	83 e1       	ldi	r24, 0x13	; 19
     44e:	95 e0       	ldi	r25, 0x05	; 5
     450:	0e 94 43 21 	call	0x4286	; 0x4286 <_ZN5Print5printEii>
     454:	66 e3       	ldi	r22, 0x36	; 54
     456:	71 e0       	ldi	r23, 0x01	; 1
     458:	83 e1       	ldi	r24, 0x13	; 19
     45a:	95 e0       	ldi	r25, 0x05	; 5
     45c:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN5Print5printEPKc>
     460:	60 91 a2 03 	lds	r22, 0x03A2	; 0x8003a2 <longitudeDir>
     464:	83 e1       	ldi	r24, 0x13	; 19
     466:	95 e0       	ldi	r25, 0x05	; 5
     468:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN5Print5printEc>
     46c:	16 c0       	rjmp	.+44     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     46e:	83 e1       	ldi	r24, 0x13	; 19
     470:	95 e0       	ldi	r25, 0x05	; 5
     472:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN7hd447809setCursorEhh>
     476:	69 e3       	ldi	r22, 0x39	; 57
     478:	71 e0       	ldi	r23, 0x01	; 1
     47a:	83 e1       	ldi	r24, 0x13	; 19
     47c:	95 e0       	ldi	r25, 0x05	; 5
     47e:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN5Print5printEPKc>
     482:	41 e0       	ldi	r20, 0x01	; 1
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	83 e1       	ldi	r24, 0x13	; 19
     488:	95 e0       	ldi	r25, 0x05	; 5
     48a:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN7hd447809setCursorEhh>
     48e:	6f e6       	ldi	r22, 0x6F	; 111
     490:	72 e0       	ldi	r23, 0x02	; 2
     492:	83 e1       	ldi	r24, 0x13	; 19
     494:	95 e0       	ldi	r25, 0x05	; 5
     496:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN5Print5printEPKc>
     49a:	ce 01       	movw	r24, r28
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	08 95       	ret

000004a2 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.2>:
     4a2:	0f 93       	push	r16
     4a4:	1f 93       	push	r17
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	18 2f       	mov	r17, r24
     4ac:	d0 e0       	ldi	r29, 0x00	; 0
     4ae:	c0 e2       	ldi	r28, 0x20	; 32
     4b0:	6c 2f       	mov	r22, r28
     4b2:	8e ea       	ldi	r24, 0xAE	; 174
     4b4:	95 e0       	ldi	r25, 0x05	; 5
     4b6:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_ZN7TwoWire17beginTransmissionEh>
     4ba:	8e ea       	ldi	r24, 0xAE	; 174
     4bc:	95 e0       	ldi	r25, 0x05	; 5
     4be:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN7TwoWire15endTransmissionEv>
     4c2:	08 2f       	mov	r16, r24
     4c4:	61 e0       	ldi	r22, 0x01	; 1
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0e 94 ef 27 	call	0x4fde	; 0x4fde <delay>
     4d0:	01 11       	cpse	r16, r1
     4d2:	03 c0       	rjmp	.+6      	; 0x4da <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.2+0x38>
     4d4:	1d 17       	cp	r17, r29
     4d6:	f9 f0       	breq	.+62     	; 0x516 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.2+0x74>
     4d8:	df 5f       	subi	r29, 0xFF	; 255
     4da:	cf 5f       	subi	r28, 0xFF	; 255
     4dc:	c8 32       	cpi	r28, 0x28	; 40
     4de:	41 f7       	brne	.-48     	; 0x4b0 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.2+0xe>
     4e0:	c8 e3       	ldi	r28, 0x38	; 56
     4e2:	6c 2f       	mov	r22, r28
     4e4:	8e ea       	ldi	r24, 0xAE	; 174
     4e6:	95 e0       	ldi	r25, 0x05	; 5
     4e8:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_ZN7TwoWire17beginTransmissionEh>
     4ec:	8e ea       	ldi	r24, 0xAE	; 174
     4ee:	95 e0       	ldi	r25, 0x05	; 5
     4f0:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN7TwoWire15endTransmissionEv>
     4f4:	08 2f       	mov	r16, r24
     4f6:	61 e0       	ldi	r22, 0x01	; 1
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	0e 94 ef 27 	call	0x4fde	; 0x4fde <delay>
     502:	01 11       	cpse	r16, r1
     504:	03 c0       	rjmp	.+6      	; 0x50c <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.2+0x6a>
     506:	1d 17       	cp	r17, r29
     508:	31 f0       	breq	.+12     	; 0x516 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.2+0x74>
     50a:	df 5f       	subi	r29, 0xFF	; 255
     50c:	cf 5f       	subi	r28, 0xFF	; 255
     50e:	c0 34       	cpi	r28, 0x40	; 64
     510:	41 f7       	brne	.-48     	; 0x4e2 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.2+0x40>
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	01 c0       	rjmp	.+2      	; 0x518 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.2+0x76>
     516:	8c 2f       	mov	r24, r28
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	1f 91       	pop	r17
     51e:	0f 91       	pop	r16
     520:	08 95       	ret

00000522 <_ZN7TwoWire5writeEi>:
     522:	dc 01       	movw	r26, r24
     524:	ed 91       	ld	r30, X+
     526:	fc 91       	ld	r31, X
     528:	01 90       	ld	r0, Z+
     52a:	f0 81       	ld	r31, Z
     52c:	e0 2d       	mov	r30, r0
     52e:	09 94       	ijmp

00000530 <_ZN4Zeit4TickEv>:
     530:	fc 01       	movw	r30, r24
     532:	84 81       	ldd	r24, Z+4	; 0x04
     534:	95 81       	ldd	r25, Z+5	; 0x05
     536:	01 96       	adiw	r24, 0x01	; 1
     538:	2c e3       	ldi	r18, 0x3C	; 60
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	b9 01       	movw	r22, r18
     53e:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <__divmodhi4>
     542:	95 83       	std	Z+5, r25	; 0x05
     544:	84 83       	std	Z+4, r24	; 0x04
     546:	89 2b       	or	r24, r25
     548:	19 f0       	breq	.+6      	; 0x550 <_ZN4Zeit4TickEv+0x20>
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	08 95       	ret
     550:	82 81       	ldd	r24, Z+2	; 0x02
     552:	93 81       	ldd	r25, Z+3	; 0x03
     554:	01 96       	adiw	r24, 0x01	; 1
     556:	b9 01       	movw	r22, r18
     558:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <__divmodhi4>
     55c:	93 83       	std	Z+3, r25	; 0x03
     55e:	82 83       	std	Z+2, r24	; 0x02
     560:	89 2b       	or	r24, r25
     562:	99 f7       	brne	.-26     	; 0x54a <_ZN4Zeit4TickEv+0x1a>
     564:	80 81       	ld	r24, Z
     566:	91 81       	ldd	r25, Z+1	; 0x01
     568:	01 96       	adiw	r24, 0x01	; 1
     56a:	68 e1       	ldi	r22, 0x18	; 24
     56c:	70 e0       	ldi	r23, 0x00	; 0
     56e:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <__divmodhi4>
     572:	ac 01       	movw	r20, r24
     574:	91 83       	std	Z+1, r25	; 0x01
     576:	80 83       	st	Z, r24
     578:	21 e0       	ldi	r18, 0x01	; 1
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	45 2b       	or	r20, r21
     57e:	09 f0       	breq	.+2      	; 0x582 <_ZN4Zeit4TickEv+0x52>
     580:	20 e0       	ldi	r18, 0x00	; 0
     582:	82 2f       	mov	r24, r18
     584:	08 95       	ret

00000586 <_ZN5Datum11DaysOfMonthEv>:
     586:	fc 01       	movw	r30, r24
     588:	22 81       	ldd	r18, Z+2	; 0x02
     58a:	33 81       	ldd	r19, Z+3	; 0x03
     58c:	26 30       	cpi	r18, 0x06	; 6
     58e:	31 05       	cpc	r19, r1
     590:	d9 f0       	breq	.+54     	; 0x5c8 <_ZN5Datum11DaysOfMonthEv+0x42>
     592:	3c f4       	brge	.+14     	; 0x5a2 <_ZN5Datum11DaysOfMonthEv+0x1c>
     594:	22 30       	cpi	r18, 0x02	; 2
     596:	31 05       	cpc	r19, r1
     598:	69 f0       	breq	.+26     	; 0x5b4 <_ZN5Datum11DaysOfMonthEv+0x2e>
     59a:	24 30       	cpi	r18, 0x04	; 4
     59c:	31 05       	cpc	r19, r1
     59e:	39 f4       	brne	.+14     	; 0x5ae <_ZN5Datum11DaysOfMonthEv+0x28>
     5a0:	13 c0       	rjmp	.+38     	; 0x5c8 <_ZN5Datum11DaysOfMonthEv+0x42>
     5a2:	29 30       	cpi	r18, 0x09	; 9
     5a4:	31 05       	cpc	r19, r1
     5a6:	81 f0       	breq	.+32     	; 0x5c8 <_ZN5Datum11DaysOfMonthEv+0x42>
     5a8:	2b 30       	cpi	r18, 0x0B	; 11
     5aa:	31 05       	cpc	r19, r1
     5ac:	69 f0       	breq	.+26     	; 0x5c8 <_ZN5Datum11DaysOfMonthEv+0x42>
     5ae:	8f e1       	ldi	r24, 0x1F	; 31
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	08 95       	ret
     5b4:	fc 01       	movw	r30, r24
     5b6:	80 81       	ld	r24, Z
     5b8:	91 81       	ldd	r25, Z+1	; 0x01
     5ba:	83 70       	andi	r24, 0x03	; 3
     5bc:	99 27       	eor	r25, r25
     5be:	89 2b       	or	r24, r25
     5c0:	31 f4       	brne	.+12     	; 0x5ce <_ZN5Datum11DaysOfMonthEv+0x48>
     5c2:	8d e1       	ldi	r24, 0x1D	; 29
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	08 95       	ret
     5c8:	8e e1       	ldi	r24, 0x1E	; 30
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	08 95       	ret
     5ce:	8c e1       	ldi	r24, 0x1C	; 28
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	08 95       	ret

000005d4 <_ZN5Datum4TickEv>:
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	ec 01       	movw	r28, r24
     5de:	0c 81       	ldd	r16, Y+4	; 0x04
     5e0:	1d 81       	ldd	r17, Y+5	; 0x05
     5e2:	0f 5f       	subi	r16, 0xFF	; 255
     5e4:	1f 4f       	sbci	r17, 0xFF	; 255
     5e6:	1d 83       	std	Y+5, r17	; 0x05
     5e8:	0c 83       	std	Y+4, r16	; 0x04
     5ea:	0e 94 c3 02 	call	0x586	; 0x586 <_ZN5Datum11DaysOfMonthEv>
     5ee:	80 17       	cp	r24, r16
     5f0:	91 07       	cpc	r25, r17
     5f2:	a4 f4       	brge	.+40     	; 0x61c <_ZN5Datum4TickEv+0x48>
     5f4:	21 e0       	ldi	r18, 0x01	; 1
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	3d 83       	std	Y+5, r19	; 0x05
     5fa:	2c 83       	std	Y+4, r18	; 0x04
     5fc:	8a 81       	ldd	r24, Y+2	; 0x02
     5fe:	9b 81       	ldd	r25, Y+3	; 0x03
     600:	01 96       	adiw	r24, 0x01	; 1
     602:	8d 30       	cpi	r24, 0x0D	; 13
     604:	91 05       	cpc	r25, r1
     606:	1c f4       	brge	.+6      	; 0x60e <_ZN5Datum4TickEv+0x3a>
     608:	9b 83       	std	Y+3, r25	; 0x03
     60a:	8a 83       	std	Y+2, r24	; 0x02
     60c:	07 c0       	rjmp	.+14     	; 0x61c <_ZN5Datum4TickEv+0x48>
     60e:	3b 83       	std	Y+3, r19	; 0x03
     610:	2a 83       	std	Y+2, r18	; 0x02
     612:	88 81       	ld	r24, Y
     614:	99 81       	ldd	r25, Y+1	; 0x01
     616:	01 96       	adiw	r24, 0x01	; 1
     618:	99 83       	std	Y+1, r25	; 0x01
     61a:	88 83       	st	Y, r24
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	1f 91       	pop	r17
     622:	0f 91       	pop	r16
     624:	08 95       	ret

00000626 <_Z5Watchv>:
     626:	0f 93       	push	r16
     628:	1f 93       	push	r17
     62a:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <millis>
     62e:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZZ5WatchvE6target>
     632:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZZ5WatchvE6target+0x1>
     636:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <_ZZ5WatchvE6target+0x2>
     63a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <_ZZ5WatchvE6target+0x3>
     63e:	06 17       	cp	r16, r22
     640:	17 07       	cpc	r17, r23
     642:	28 07       	cpc	r18, r24
     644:	39 07       	cpc	r19, r25
     646:	70 f5       	brcc	.+92     	; 0x6a4 <_Z5Watchv+0x7e>
     648:	d9 01       	movw	r26, r18
     64a:	c8 01       	movw	r24, r16
     64c:	88 51       	subi	r24, 0x18	; 24
     64e:	9c 4f       	sbci	r25, 0xFC	; 252
     650:	af 4f       	sbci	r26, 0xFF	; 255
     652:	bf 4f       	sbci	r27, 0xFF	; 255
     654:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZZ5WatchvE6target>
     658:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZZ5WatchvE6target+0x1>
     65c:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_ZZ5WatchvE6target+0x2>
     660:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_ZZ5WatchvE6target+0x3>
     664:	8d e8       	ldi	r24, 0x8D	; 141
     666:	93 e0       	ldi	r25, 0x03	; 3
     668:	0e 94 98 02 	call	0x530	; 0x530 <_ZN4Zeit4TickEv>
     66c:	89 2b       	or	r24, r25
     66e:	21 f0       	breq	.+8      	; 0x678 <_Z5Watchv+0x52>
     670:	8a e6       	ldi	r24, 0x6A	; 106
     672:	93 e0       	ldi	r25, 0x03	; 3
     674:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN5Datum4TickEv>
     678:	85 e8       	ldi	r24, 0x85	; 133
     67a:	93 e0       	ldi	r25, 0x03	; 3
     67c:	0e 94 98 02 	call	0x530	; 0x530 <_ZN4Zeit4TickEv>
     680:	89 2b       	or	r24, r25
     682:	21 f0       	breq	.+8      	; 0x68c <_Z5Watchv+0x66>
     684:	82 e6       	ldi	r24, 0x62	; 98
     686:	93 e0       	ldi	r25, 0x03	; 3
     688:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN5Datum4TickEv>
     68c:	8d e7       	ldi	r24, 0x7D	; 125
     68e:	93 e0       	ldi	r25, 0x03	; 3
     690:	0e 94 98 02 	call	0x530	; 0x530 <_ZN4Zeit4TickEv>
     694:	89 2b       	or	r24, r25
     696:	31 f0       	breq	.+12     	; 0x6a4 <_Z5Watchv+0x7e>
     698:	8a e5       	ldi	r24, 0x5A	; 90
     69a:	93 e0       	ldi	r25, 0x03	; 3
     69c:	1f 91       	pop	r17
     69e:	0f 91       	pop	r16
     6a0:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <_ZN5Datum4TickEv>
     6a4:	1f 91       	pop	r17
     6a6:	0f 91       	pop	r16
     6a8:	08 95       	ret

000006aa <_ZN4Zeit6ChangeEi>:
     6aa:	fc 01       	movw	r30, r24
     6ac:	cb 01       	movw	r24, r22
     6ae:	26 81       	ldd	r18, Z+6	; 0x06
     6b0:	37 81       	ldd	r19, Z+7	; 0x07
     6b2:	21 50       	subi	r18, 0x01	; 1
     6b4:	31 09       	sbc	r19, r1
     6b6:	22 30       	cpi	r18, 0x02	; 2
     6b8:	31 05       	cpc	r19, r1
     6ba:	58 f0       	brcs	.+22     	; 0x6d2 <_ZN4Zeit6ChangeEi+0x28>
     6bc:	21 e0       	ldi	r18, 0x01	; 1
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	37 83       	std	Z+7, r19	; 0x07
     6c2:	26 83       	std	Z+6, r18	; 0x06
     6c4:	62 30       	cpi	r22, 0x02	; 2
     6c6:	71 05       	cpc	r23, r1
     6c8:	69 f0       	breq	.+26     	; 0x6e4 <_ZN4Zeit6ChangeEi+0x3a>
     6ca:	64 30       	cpi	r22, 0x04	; 4
     6cc:	71 05       	cpc	r23, r1
     6ce:	39 f0       	breq	.+14     	; 0x6de <_ZN4Zeit6ChangeEi+0x34>
     6d0:	14 c0       	rjmp	.+40     	; 0x6fa <_ZN4Zeit6ChangeEi+0x50>
     6d2:	62 30       	cpi	r22, 0x02	; 2
     6d4:	71 05       	cpc	r23, r1
     6d6:	31 f0       	breq	.+12     	; 0x6e4 <_ZN4Zeit6ChangeEi+0x3a>
     6d8:	64 30       	cpi	r22, 0x04	; 4
     6da:	71 05       	cpc	r23, r1
     6dc:	49 f4       	brne	.+18     	; 0x6f0 <_ZN4Zeit6ChangeEi+0x46>
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <_ZN4Zeit6ChangeEi+0x3e>
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	97 83       	std	Z+7, r25	; 0x07
     6ea:	86 83       	std	Z+6, r24	; 0x06
     6ec:	8a e0       	ldi	r24, 0x0A	; 10
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	26 81       	ldd	r18, Z+6	; 0x06
     6f2:	37 81       	ldd	r19, Z+7	; 0x07
     6f4:	21 30       	cpi	r18, 0x01	; 1
     6f6:	31 05       	cpc	r19, r1
     6f8:	d1 f4       	brne	.+52     	; 0x72e <_ZN4Zeit6ChangeEi+0x84>
     6fa:	81 30       	cpi	r24, 0x01	; 1
     6fc:	91 05       	cpc	r25, r1
     6fe:	21 f0       	breq	.+8      	; 0x708 <_ZN4Zeit6ChangeEi+0x5e>
     700:	83 30       	cpi	r24, 0x03	; 3
     702:	91 05       	cpc	r25, r1
     704:	49 f0       	breq	.+18     	; 0x718 <_ZN4Zeit6ChangeEi+0x6e>
     706:	08 95       	ret
     708:	80 81       	ld	r24, Z
     70a:	91 81       	ldd	r25, Z+1	; 0x01
     70c:	01 96       	adiw	r24, 0x01	; 1
     70e:	68 e1       	ldi	r22, 0x18	; 24
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <__divmodhi4>
     716:	08 c0       	rjmp	.+16     	; 0x728 <_ZN4Zeit6ChangeEi+0x7e>
     718:	80 81       	ld	r24, Z
     71a:	91 81       	ldd	r25, Z+1	; 0x01
     71c:	00 97       	sbiw	r24, 0x00	; 0
     71e:	19 f4       	brne	.+6      	; 0x726 <_ZN4Zeit6ChangeEi+0x7c>
     720:	87 e1       	ldi	r24, 0x17	; 23
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	01 c0       	rjmp	.+2      	; 0x728 <_ZN4Zeit6ChangeEi+0x7e>
     726:	01 97       	sbiw	r24, 0x01	; 1
     728:	91 83       	std	Z+1, r25	; 0x01
     72a:	80 83       	st	Z, r24
     72c:	13 c0       	rjmp	.+38     	; 0x754 <_ZN4Zeit6ChangeEi+0xaa>
     72e:	22 30       	cpi	r18, 0x02	; 2
     730:	31 05       	cpc	r19, r1
     732:	f1 f4       	brne	.+60     	; 0x770 <_ZN4Zeit6ChangeEi+0xc6>
     734:	81 30       	cpi	r24, 0x01	; 1
     736:	91 05       	cpc	r25, r1
     738:	21 f0       	breq	.+8      	; 0x742 <_ZN4Zeit6ChangeEi+0x98>
     73a:	83 30       	cpi	r24, 0x03	; 3
     73c:	91 05       	cpc	r25, r1
     73e:	79 f0       	breq	.+30     	; 0x75e <_ZN4Zeit6ChangeEi+0xb4>
     740:	08 95       	ret
     742:	82 81       	ldd	r24, Z+2	; 0x02
     744:	93 81       	ldd	r25, Z+3	; 0x03
     746:	01 96       	adiw	r24, 0x01	; 1
     748:	6c e3       	ldi	r22, 0x3C	; 60
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <__divmodhi4>
     750:	93 83       	std	Z+3, r25	; 0x03
     752:	82 83       	std	Z+2, r24	; 0x02
     754:	15 82       	std	Z+5, r1	; 0x05
     756:	14 82       	std	Z+4, r1	; 0x04
     758:	8a e0       	ldi	r24, 0x0A	; 10
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	08 95       	ret
     75e:	82 81       	ldd	r24, Z+2	; 0x02
     760:	93 81       	ldd	r25, Z+3	; 0x03
     762:	00 97       	sbiw	r24, 0x00	; 0
     764:	19 f4       	brne	.+6      	; 0x76c <_ZN4Zeit6ChangeEi+0xc2>
     766:	8b e3       	ldi	r24, 0x3B	; 59
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	f2 cf       	rjmp	.-28     	; 0x750 <_ZN4Zeit6ChangeEi+0xa6>
     76c:	01 97       	sbiw	r24, 0x01	; 1
     76e:	f0 cf       	rjmp	.-32     	; 0x750 <_ZN4Zeit6ChangeEi+0xa6>
     770:	08 95       	ret

00000772 <_Z11printhhmmssR4Zeit>:
     772:	0f 93       	push	r16
     774:	1f 93       	push	r17
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	8c 01       	movw	r16, r24
     77c:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <ampm>
     780:	f8 01       	movw	r30, r16
     782:	c0 81       	ld	r28, Z
     784:	d1 81       	ldd	r29, Z+1	; 0x01
     786:	88 23       	and	r24, r24
     788:	89 f0       	breq	.+34     	; 0x7ac <_Z11printhhmmssR4Zeit+0x3a>
     78a:	cd 30       	cpi	r28, 0x0D	; 13
     78c:	d1 05       	cpc	r29, r1
     78e:	0c f0       	brlt	.+2      	; 0x792 <_Z11printhhmmssR4Zeit+0x20>
     790:	2c 97       	sbiw	r28, 0x0c	; 12
     792:	ca 30       	cpi	r28, 0x0A	; 10
     794:	d1 05       	cpc	r29, r1
     796:	34 f4       	brge	.+12     	; 0x7a4 <_Z11printhhmmssR4Zeit+0x32>
     798:	69 e6       	ldi	r22, 0x69	; 105
     79a:	71 e0       	ldi	r23, 0x01	; 1
     79c:	83 e1       	ldi	r24, 0x13	; 19
     79e:	95 e0       	ldi	r25, 0x05	; 5
     7a0:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN5Print5printEPKc>
     7a4:	4a e0       	ldi	r20, 0x0A	; 10
     7a6:	50 e0       	ldi	r21, 0x00	; 0
     7a8:	be 01       	movw	r22, r28
     7aa:	0d c0       	rjmp	.+26     	; 0x7c6 <_Z11printhhmmssR4Zeit+0x54>
     7ac:	2a 97       	sbiw	r28, 0x0a	; 10
     7ae:	34 f4       	brge	.+12     	; 0x7bc <_Z11printhhmmssR4Zeit+0x4a>
     7b0:	69 e6       	ldi	r22, 0x69	; 105
     7b2:	71 e0       	ldi	r23, 0x01	; 1
     7b4:	83 e1       	ldi	r24, 0x13	; 19
     7b6:	95 e0       	ldi	r25, 0x05	; 5
     7b8:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN5Print5printEPKc>
     7bc:	f8 01       	movw	r30, r16
     7be:	60 81       	ld	r22, Z
     7c0:	71 81       	ldd	r23, Z+1	; 0x01
     7c2:	4a e0       	ldi	r20, 0x0A	; 10
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	83 e1       	ldi	r24, 0x13	; 19
     7c8:	95 e0       	ldi	r25, 0x05	; 5
     7ca:	0e 94 43 21 	call	0x4286	; 0x4286 <_ZN5Print5printEii>
     7ce:	f8 01       	movw	r30, r16
     7d0:	82 81       	ldd	r24, Z+2	; 0x02
     7d2:	93 81       	ldd	r25, Z+3	; 0x03
     7d4:	0a 97       	sbiw	r24, 0x0a	; 10
     7d6:	1c f4       	brge	.+6      	; 0x7de <_Z11printhhmmssR4Zeit+0x6c>
     7d8:	60 e4       	ldi	r22, 0x40	; 64
     7da:	71 e0       	ldi	r23, 0x01	; 1
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <_Z11printhhmmssR4Zeit+0x70>
     7de:	63 e4       	ldi	r22, 0x43	; 67
     7e0:	71 e0       	ldi	r23, 0x01	; 1
     7e2:	83 e1       	ldi	r24, 0x13	; 19
     7e4:	95 e0       	ldi	r25, 0x05	; 5
     7e6:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN5Print5printEPKc>
     7ea:	f8 01       	movw	r30, r16
     7ec:	62 81       	ldd	r22, Z+2	; 0x02
     7ee:	73 81       	ldd	r23, Z+3	; 0x03
     7f0:	4a e0       	ldi	r20, 0x0A	; 10
     7f2:	50 e0       	ldi	r21, 0x00	; 0
     7f4:	83 e1       	ldi	r24, 0x13	; 19
     7f6:	95 e0       	ldi	r25, 0x05	; 5
     7f8:	0e 94 43 21 	call	0x4286	; 0x4286 <_ZN5Print5printEii>
     7fc:	f8 01       	movw	r30, r16
     7fe:	84 81       	ldd	r24, Z+4	; 0x04
     800:	95 81       	ldd	r25, Z+5	; 0x05
     802:	0a 97       	sbiw	r24, 0x0a	; 10
     804:	1c f4       	brge	.+6      	; 0x80c <_Z11printhhmmssR4Zeit+0x9a>
     806:	60 e4       	ldi	r22, 0x40	; 64
     808:	71 e0       	ldi	r23, 0x01	; 1
     80a:	02 c0       	rjmp	.+4      	; 0x810 <_Z11printhhmmssR4Zeit+0x9e>
     80c:	63 e4       	ldi	r22, 0x43	; 67
     80e:	71 e0       	ldi	r23, 0x01	; 1
     810:	83 e1       	ldi	r24, 0x13	; 19
     812:	95 e0       	ldi	r25, 0x05	; 5
     814:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN5Print5printEPKc>
     818:	f8 01       	movw	r30, r16
     81a:	64 81       	ldd	r22, Z+4	; 0x04
     81c:	75 81       	ldd	r23, Z+5	; 0x05
     81e:	4a e0       	ldi	r20, 0x0A	; 10
     820:	50 e0       	ldi	r21, 0x00	; 0
     822:	83 e1       	ldi	r24, 0x13	; 19
     824:	95 e0       	ldi	r25, 0x05	; 5
     826:	0e 94 43 21 	call	0x4286	; 0x4286 <_ZN5Print5printEii>
     82a:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <ampm>
     82e:	88 23       	and	r24, r24
     830:	91 f0       	breq	.+36     	; 0x856 <_Z11printhhmmssR4Zeit+0xe4>
     832:	f8 01       	movw	r30, r16
     834:	80 81       	ld	r24, Z
     836:	91 81       	ldd	r25, Z+1	; 0x01
     838:	0d 97       	sbiw	r24, 0x0d	; 13
     83a:	1c f0       	brlt	.+6      	; 0x842 <_Z11printhhmmssR4Zeit+0xd0>
     83c:	65 e4       	ldi	r22, 0x45	; 69
     83e:	71 e0       	ldi	r23, 0x01	; 1
     840:	02 c0       	rjmp	.+4      	; 0x846 <_Z11printhhmmssR4Zeit+0xd4>
     842:	69 e4       	ldi	r22, 0x49	; 73
     844:	71 e0       	ldi	r23, 0x01	; 1
     846:	83 e1       	ldi	r24, 0x13	; 19
     848:	95 e0       	ldi	r25, 0x05	; 5
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	1f 91       	pop	r17
     850:	0f 91       	pop	r16
     852:	0c 94 96 20 	jmp	0x412c	; 0x412c <_ZN5Print5printEPKc>
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	1f 91       	pop	r17
     85c:	0f 91       	pop	r16
     85e:	08 95       	ret

00000860 <_Z11alarmScreeni>:
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	ec 01       	movw	r28, r24
     866:	40 e0       	ldi	r20, 0x00	; 0
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	83 e1       	ldi	r24, 0x13	; 19
     86c:	95 e0       	ldi	r25, 0x05	; 5
     86e:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN7hd447809setCursorEhh>
     872:	6d e4       	ldi	r22, 0x4D	; 77
     874:	71 e0       	ldi	r23, 0x01	; 1
     876:	83 e1       	ldi	r24, 0x13	; 19
     878:	95 e0       	ldi	r25, 0x05	; 5
     87a:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN5Print5printEPKc>
     87e:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <weckerStatus>
     882:	88 23       	and	r24, r24
     884:	19 f0       	breq	.+6      	; 0x88c <_Z11alarmScreeni+0x2c>
     886:	66 e5       	ldi	r22, 0x56	; 86
     888:	71 e0       	ldi	r23, 0x01	; 1
     88a:	02 c0       	rjmp	.+4      	; 0x890 <_Z11alarmScreeni+0x30>
     88c:	6a e5       	ldi	r22, 0x5A	; 90
     88e:	71 e0       	ldi	r23, 0x01	; 1
     890:	83 e1       	ldi	r24, 0x13	; 19
     892:	95 e0       	ldi	r25, 0x05	; 5
     894:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN5Print5printEPKc>
     898:	41 e0       	ldi	r20, 0x01	; 1
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	83 e1       	ldi	r24, 0x13	; 19
     89e:	95 e0       	ldi	r25, 0x05	; 5
     8a0:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN7hd447809setCursorEhh>
     8a4:	85 e7       	ldi	r24, 0x75	; 117
     8a6:	93 e0       	ldi	r25, 0x03	; 3
     8a8:	0e 94 b9 03 	call	0x772	; 0x772 <_Z11printhhmmssR4Zeit>
     8ac:	ce 01       	movw	r24, r28
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	08 95       	ret

000008b4 <_Z11changeAlarmi>:
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	ec 01       	movw	r28, r24
     8ba:	40 e0       	ldi	r20, 0x00	; 0
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	83 e1       	ldi	r24, 0x13	; 19
     8c0:	95 e0       	ldi	r25, 0x05	; 5
     8c2:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN7hd447809setCursorEhh>
     8c6:	6e e5       	ldi	r22, 0x5E	; 94
     8c8:	71 e0       	ldi	r23, 0x01	; 1
     8ca:	83 e1       	ldi	r24, 0x13	; 19
     8cc:	95 e0       	ldi	r25, 0x05	; 5
     8ce:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN5Print5printEPKc>
     8d2:	be 01       	movw	r22, r28
     8d4:	85 e7       	ldi	r24, 0x75	; 117
     8d6:	93 e0       	ldi	r25, 0x03	; 3
     8d8:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN4Zeit6ChangeEi>
     8dc:	ec 01       	movw	r28, r24
     8de:	41 e0       	ldi	r20, 0x01	; 1
     8e0:	60 e0       	ldi	r22, 0x00	; 0
     8e2:	83 e1       	ldi	r24, 0x13	; 19
     8e4:	95 e0       	ldi	r25, 0x05	; 5
     8e6:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN7hd447809setCursorEhh>
     8ea:	85 e7       	ldi	r24, 0x75	; 117
     8ec:	93 e0       	ldi	r25, 0x03	; 3
     8ee:	0e 94 b9 03 	call	0x772	; 0x772 <_Z11printhhmmssR4Zeit>
     8f2:	ce 01       	movw	r24, r28
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	08 95       	ret

000008fa <_Z13printddmmyyyyR5Datum>:
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	ec 01       	movw	r28, r24
     900:	8c 81       	ldd	r24, Y+4	; 0x04
     902:	9d 81       	ldd	r25, Y+5	; 0x05
     904:	0a 97       	sbiw	r24, 0x0a	; 10
     906:	34 f4       	brge	.+12     	; 0x914 <_Z13printddmmyyyyR5Datum+0x1a>
     908:	69 e6       	ldi	r22, 0x69	; 105
     90a:	71 e0       	ldi	r23, 0x01	; 1
     90c:	83 e1       	ldi	r24, 0x13	; 19
     90e:	95 e0       	ldi	r25, 0x05	; 5
     910:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN5Print5printEPKc>
     914:	6c 81       	ldd	r22, Y+4	; 0x04
     916:	7d 81       	ldd	r23, Y+5	; 0x05
     918:	4a e0       	ldi	r20, 0x0A	; 10
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	83 e1       	ldi	r24, 0x13	; 19
     91e:	95 e0       	ldi	r25, 0x05	; 5
     920:	0e 94 43 21 	call	0x4286	; 0x4286 <_ZN5Print5printEii>
     924:	8a 81       	ldd	r24, Y+2	; 0x02
     926:	9b 81       	ldd	r25, Y+3	; 0x03
     928:	0a 97       	sbiw	r24, 0x0a	; 10
     92a:	1c f4       	brge	.+6      	; 0x932 <_Z13printddmmyyyyR5Datum+0x38>
     92c:	68 e6       	ldi	r22, 0x68	; 104
     92e:	71 e0       	ldi	r23, 0x01	; 1
     930:	02 c0       	rjmp	.+4      	; 0x936 <_Z13printddmmyyyyR5Datum+0x3c>
     932:	6b e6       	ldi	r22, 0x6B	; 107
     934:	71 e0       	ldi	r23, 0x01	; 1
     936:	83 e1       	ldi	r24, 0x13	; 19
     938:	95 e0       	ldi	r25, 0x05	; 5
     93a:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN5Print5printEPKc>
     93e:	6a 81       	ldd	r22, Y+2	; 0x02
     940:	7b 81       	ldd	r23, Y+3	; 0x03
     942:	4a e0       	ldi	r20, 0x0A	; 10
     944:	50 e0       	ldi	r21, 0x00	; 0
     946:	83 e1       	ldi	r24, 0x13	; 19
     948:	95 e0       	ldi	r25, 0x05	; 5
     94a:	0e 94 43 21 	call	0x4286	; 0x4286 <_ZN5Print5printEii>
     94e:	6b e6       	ldi	r22, 0x6B	; 107
     950:	71 e0       	ldi	r23, 0x01	; 1
     952:	83 e1       	ldi	r24, 0x13	; 19
     954:	95 e0       	ldi	r25, 0x05	; 5
     956:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN5Print5printEPKc>
     95a:	68 81       	ld	r22, Y
     95c:	79 81       	ldd	r23, Y+1	; 0x01
     95e:	4a e0       	ldi	r20, 0x0A	; 10
     960:	50 e0       	ldi	r21, 0x00	; 0
     962:	83 e1       	ldi	r24, 0x13	; 19
     964:	95 e0       	ldi	r25, 0x05	; 5
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	0c 94 43 21 	jmp	0x4286	; 0x4286 <_ZN5Print5printEii>

0000096e <_Z10dateScreeni>:
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	ec 01       	movw	r28, r24
     974:	40 e0       	ldi	r20, 0x00	; 0
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	83 e1       	ldi	r24, 0x13	; 19
     97a:	95 e0       	ldi	r25, 0x05	; 5
     97c:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN7hd447809setCursorEhh>
     980:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <timeZoneChoosen>
     984:	88 23       	and	r24, r24
     986:	19 f1       	breq	.+70     	; 0x9ce <_Z10dateScreeni+0x60>
     988:	85 e8       	ldi	r24, 0x85	; 133
     98a:	93 e0       	ldi	r25, 0x03	; 3
     98c:	0e 94 b9 03 	call	0x772	; 0x772 <_Z11printhhmmssR4Zeit>
     990:	40 e0       	ldi	r20, 0x00	; 0
     992:	6d e0       	ldi	r22, 0x0D	; 13
     994:	83 e1       	ldi	r24, 0x13	; 19
     996:	95 e0       	ldi	r25, 0x05	; 5
     998:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN7hd447809setCursorEhh>
     99c:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <tz>
     9a0:	90 91 6a 04 	lds	r25, 0x046A	; 0x80046a <tz+0x1>
     9a4:	2e e0       	ldi	r18, 0x0E	; 14
     9a6:	28 9f       	mul	r18, r24
     9a8:	b0 01       	movw	r22, r0
     9aa:	29 9f       	mul	r18, r25
     9ac:	70 0d       	add	r23, r0
     9ae:	11 24       	eor	r1, r1
     9b0:	6d 58       	subi	r22, 0x8D	; 141
     9b2:	7b 4f       	sbci	r23, 0xFB	; 251
     9b4:	83 e1       	ldi	r24, 0x13	; 19
     9b6:	95 e0       	ldi	r25, 0x05	; 5
     9b8:	0e 94 88 20 	call	0x4110	; 0x4110 <_ZN5Print5printERK6String>
     9bc:	41 e0       	ldi	r20, 0x01	; 1
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	83 e1       	ldi	r24, 0x13	; 19
     9c2:	95 e0       	ldi	r25, 0x05	; 5
     9c4:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN7hd447809setCursorEhh>
     9c8:	82 e6       	ldi	r24, 0x62	; 98
     9ca:	93 e0       	ldi	r25, 0x03	; 3
     9cc:	0c c0       	rjmp	.+24     	; 0x9e6 <_Z10dateScreeni+0x78>
     9ce:	8d e7       	ldi	r24, 0x7D	; 125
     9d0:	93 e0       	ldi	r25, 0x03	; 3
     9d2:	0e 94 b9 03 	call	0x772	; 0x772 <_Z11printhhmmssR4Zeit>
     9d6:	41 e0       	ldi	r20, 0x01	; 1
     9d8:	60 e0       	ldi	r22, 0x00	; 0
     9da:	83 e1       	ldi	r24, 0x13	; 19
     9dc:	95 e0       	ldi	r25, 0x05	; 5
     9de:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN7hd447809setCursorEhh>
     9e2:	8a e5       	ldi	r24, 0x5A	; 90
     9e4:	93 e0       	ldi	r25, 0x03	; 3
     9e6:	0e 94 7d 04 	call	0x8fa	; 0x8fa <_Z13printddmmyyyyR5Datum>
     9ea:	ce 01       	movw	r24, r28
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	08 95       	ret

000009f2 <_Z17printHumidityTempv>:
     9f2:	cf 92       	push	r12
     9f4:	df 92       	push	r13
     9f6:	ef 92       	push	r14
     9f8:	ff 92       	push	r15
     9fa:	41 e0       	ldi	r20, 0x01	; 1
     9fc:	60 e0       	ldi	r22, 0x00	; 0
     9fe:	83 e1       	ldi	r24, 0x13	; 19
     a00:	95 e0       	ldi	r25, 0x05	; 5
     a02:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN7hd447809setCursorEhh>
     a06:	c0 90 53 04 	lds	r12, 0x0453	; 0x800453 <temp>
     a0a:	d0 90 54 04 	lds	r13, 0x0454	; 0x800454 <temp+0x1>
     a0e:	e0 90 55 04 	lds	r14, 0x0455	; 0x800455 <temp+0x2>
     a12:	f0 90 56 04 	lds	r15, 0x0456	; 0x800456 <temp+0x3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	a9 01       	movw	r20, r18
     a1c:	c7 01       	movw	r24, r14
     a1e:	b6 01       	movw	r22, r12
     a20:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <__cmpsf2>
     a24:	81 11       	cpse	r24, r1
     a26:	03 c0       	rjmp	.+6      	; 0xa2e <_Z17printHumidityTempv+0x3c>
     a28:	6d e6       	ldi	r22, 0x6D	; 109
     a2a:	71 e0       	ldi	r23, 0x01	; 1
     a2c:	23 c0       	rjmp	.+70     	; 0xa74 <_Z17printHumidityTempv+0x82>
     a2e:	22 e0       	ldi	r18, 0x02	; 2
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	b7 01       	movw	r22, r14
     a34:	a6 01       	movw	r20, r12
     a36:	83 e1       	ldi	r24, 0x13	; 19
     a38:	95 e0       	ldi	r25, 0x05	; 5
     a3a:	0e 94 25 22 	call	0x444a	; 0x444a <_ZN5Print5printEdi>
     a3e:	6f ed       	ldi	r22, 0xDF	; 223
     a40:	83 e1       	ldi	r24, 0x13	; 19
     a42:	95 e0       	ldi	r25, 0x05	; 5
     a44:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN5Print5printEc>
     a48:	6b e7       	ldi	r22, 0x7B	; 123
     a4a:	71 e0       	ldi	r23, 0x01	; 1
     a4c:	83 e1       	ldi	r24, 0x13	; 19
     a4e:	95 e0       	ldi	r25, 0x05	; 5
     a50:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN5Print5printEPKc>
     a54:	40 91 4f 04 	lds	r20, 0x044F	; 0x80044f <hum>
     a58:	50 91 50 04 	lds	r21, 0x0450	; 0x800450 <hum+0x1>
     a5c:	60 91 51 04 	lds	r22, 0x0451	; 0x800451 <hum+0x2>
     a60:	70 91 52 04 	lds	r23, 0x0452	; 0x800452 <hum+0x3>
     a64:	22 e0       	ldi	r18, 0x02	; 2
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	83 e1       	ldi	r24, 0x13	; 19
     a6a:	95 e0       	ldi	r25, 0x05	; 5
     a6c:	0e 94 25 22 	call	0x444a	; 0x444a <_ZN5Print5printEdi>
     a70:	60 e8       	ldi	r22, 0x80	; 128
     a72:	71 e0       	ldi	r23, 0x01	; 1
     a74:	83 e1       	ldi	r24, 0x13	; 19
     a76:	95 e0       	ldi	r25, 0x05	; 5
     a78:	ff 90       	pop	r15
     a7a:	ef 90       	pop	r14
     a7c:	df 90       	pop	r13
     a7e:	cf 90       	pop	r12
     a80:	0c 94 96 20 	jmp	0x412c	; 0x412c <_ZN5Print5printEPKc>

00000a84 <_Z10homeScreeni>:
     a84:	0f 93       	push	r16
     a86:	1f 93       	push	r17
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	ec 01       	movw	r28, r24
     a8e:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <millis>
     a92:	00 91 57 04 	lds	r16, 0x0457	; 0x800457 <readSensor>
     a96:	10 91 58 04 	lds	r17, 0x0458	; 0x800458 <readSensor+0x1>
     a9a:	20 91 59 04 	lds	r18, 0x0459	; 0x800459 <readSensor+0x2>
     a9e:	30 91 5a 04 	lds	r19, 0x045A	; 0x80045a <readSensor+0x3>
     aa2:	06 17       	cp	r16, r22
     aa4:	17 07       	cpc	r17, r23
     aa6:	28 07       	cpc	r18, r24
     aa8:	39 07       	cpc	r19, r25
     aaa:	b8 f5       	brcc	.+110    	; 0xb1a <__stack+0x1b>
     aac:	66 e1       	ldi	r22, 0x16	; 22
     aae:	8b e5       	ldi	r24, 0x5B	; 91
     ab0:	94 e0       	ldi	r25, 0x04	; 4
     ab2:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <_ZN3dht4readEh>
     ab6:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <DHT+0x4>
     aba:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <DHT+0x5>
     abe:	a0 91 61 04 	lds	r26, 0x0461	; 0x800461 <DHT+0x6>
     ac2:	b0 91 62 04 	lds	r27, 0x0462	; 0x800462 <DHT+0x7>
     ac6:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <temp>
     aca:	90 93 54 04 	sts	0x0454, r25	; 0x800454 <temp+0x1>
     ace:	a0 93 55 04 	sts	0x0455, r26	; 0x800455 <temp+0x2>
     ad2:	b0 93 56 04 	sts	0x0456, r27	; 0x800456 <temp+0x3>
     ad6:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <DHT>
     ada:	90 91 5c 04 	lds	r25, 0x045C	; 0x80045c <DHT+0x1>
     ade:	a0 91 5d 04 	lds	r26, 0x045D	; 0x80045d <DHT+0x2>
     ae2:	b0 91 5e 04 	lds	r27, 0x045E	; 0x80045e <DHT+0x3>
     ae6:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <hum>
     aea:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <hum+0x1>
     aee:	a0 93 51 04 	sts	0x0451, r26	; 0x800451 <hum+0x2>
     af2:	b0 93 52 04 	sts	0x0452, r27	; 0x800452 <hum+0x3>
     af6:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <_Z17printHumidityTempv>
     afa:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <millis>
     afe:	dc 01       	movw	r26, r24
     b00:	cb 01       	movw	r24, r22
     b02:	88 57       	subi	r24, 0x78	; 120
     b04:	9c 4e       	sbci	r25, 0xEC	; 236
     b06:	af 4f       	sbci	r26, 0xFF	; 255
     b08:	bf 4f       	sbci	r27, 0xFF	; 255
     b0a:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <readSensor>
     b0e:	90 93 58 04 	sts	0x0458, r25	; 0x800458 <readSensor+0x1>
     b12:	a0 93 59 04 	sts	0x0459, r26	; 0x800459 <readSensor+0x2>
     b16:	b0 93 5a 04 	sts	0x045A, r27	; 0x80045a <readSensor+0x3>
     b1a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <_Z17printHumidityTempv>
     b1e:	40 e0       	ldi	r20, 0x00	; 0
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	83 e1       	ldi	r24, 0x13	; 19
     b24:	95 e0       	ldi	r25, 0x05	; 5
     b26:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN7hd447809setCursorEhh>
     b2a:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <timeZoneChoosen>
     b2e:	88 23       	and	r24, r24
     b30:	d9 f0       	breq	.+54     	; 0xb68 <__stack+0x69>
     b32:	85 e8       	ldi	r24, 0x85	; 133
     b34:	93 e0       	ldi	r25, 0x03	; 3
     b36:	0e 94 b9 03 	call	0x772	; 0x772 <_Z11printhhmmssR4Zeit>
     b3a:	40 e0       	ldi	r20, 0x00	; 0
     b3c:	6d e0       	ldi	r22, 0x0D	; 13
     b3e:	83 e1       	ldi	r24, 0x13	; 19
     b40:	95 e0       	ldi	r25, 0x05	; 5
     b42:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN7hd447809setCursorEhh>
     b46:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <tz>
     b4a:	90 91 6a 04 	lds	r25, 0x046A	; 0x80046a <tz+0x1>
     b4e:	2e e0       	ldi	r18, 0x0E	; 14
     b50:	28 9f       	mul	r18, r24
     b52:	b0 01       	movw	r22, r0
     b54:	29 9f       	mul	r18, r25
     b56:	70 0d       	add	r23, r0
     b58:	11 24       	eor	r1, r1
     b5a:	6d 58       	subi	r22, 0x8D	; 141
     b5c:	7b 4f       	sbci	r23, 0xFB	; 251
     b5e:	83 e1       	ldi	r24, 0x13	; 19
     b60:	95 e0       	ldi	r25, 0x05	; 5
     b62:	0e 94 88 20 	call	0x4110	; 0x4110 <_ZN5Print5printERK6String>
     b66:	04 c0       	rjmp	.+8      	; 0xb70 <__stack+0x71>
     b68:	8d e7       	ldi	r24, 0x7D	; 125
     b6a:	93 e0       	ldi	r25, 0x03	; 3
     b6c:	0e 94 b9 03 	call	0x772	; 0x772 <_Z11printhhmmssR4Zeit>
     b70:	ce 01       	movw	r24, r28
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	08 95       	ret

00000b7c <_Z13calculateTimev>:
     b7c:	88 e0       	ldi	r24, 0x08	; 8
     b7e:	ed e8       	ldi	r30, 0x8D	; 141
     b80:	f3 e0       	ldi	r31, 0x03	; 3
     b82:	a5 e8       	ldi	r26, 0x85	; 133
     b84:	b3 e0       	ldi	r27, 0x03	; 3
     b86:	01 90       	ld	r0, Z+
     b88:	0d 92       	st	X+, r0
     b8a:	8a 95       	dec	r24
     b8c:	e1 f7       	brne	.-8      	; 0xb86 <_Z13calculateTimev+0xa>
     b8e:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <tz>
     b92:	90 91 6a 04 	lds	r25, 0x046A	; 0x80046a <tz+0x1>
     b96:	2e e0       	ldi	r18, 0x0E	; 14
     b98:	28 9f       	mul	r18, r24
     b9a:	f0 01       	movw	r30, r0
     b9c:	29 9f       	mul	r18, r25
     b9e:	f0 0d       	add	r31, r0
     ba0:	11 24       	eor	r1, r1
     ba2:	e5 59       	subi	r30, 0x95	; 149
     ba4:	fb 4f       	sbci	r31, 0xFB	; 251
     ba6:	26 81       	ldd	r18, Z+6	; 0x06
     ba8:	37 81       	ldd	r19, Z+7	; 0x07
     baa:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <zeitGMT>
     bae:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <zeitGMT+0x1>
     bb2:	82 0f       	add	r24, r18
     bb4:	93 1f       	adc	r25, r19
     bb6:	90 93 86 03 	sts	0x0386, r25	; 0x800386 <zeitTimeZone+0x1>
     bba:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <zeitTimeZone>
     bbe:	28 e0       	ldi	r18, 0x08	; 8
     bc0:	ea e6       	ldi	r30, 0x6A	; 106
     bc2:	f3 e0       	ldi	r31, 0x03	; 3
     bc4:	a2 e6       	ldi	r26, 0x62	; 98
     bc6:	b3 e0       	ldi	r27, 0x03	; 3
     bc8:	01 90       	ld	r0, Z+
     bca:	0d 92       	st	X+, r0
     bcc:	2a 95       	dec	r18
     bce:	e1 f7       	brne	.-8      	; 0xbc8 <_Z13calculateTimev+0x4c>
     bd0:	88 31       	cpi	r24, 0x18	; 24
     bd2:	91 05       	cpc	r25, r1
     bd4:	4c f0       	brlt	.+18     	; 0xbe8 <_Z13calculateTimev+0x6c>
     bd6:	48 97       	sbiw	r24, 0x18	; 24
     bd8:	90 93 86 03 	sts	0x0386, r25	; 0x800386 <zeitTimeZone+0x1>
     bdc:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <zeitTimeZone>
     be0:	82 e6       	ldi	r24, 0x62	; 98
     be2:	93 e0       	ldi	r25, 0x03	; 3
     be4:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN5Datum4TickEv>
     be8:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <zeitTimeZone>
     bec:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <zeitTimeZone+0x1>
     bf0:	97 ff       	sbrs	r25, 7
     bf2:	2f c0       	rjmp	.+94     	; 0xc52 <_Z13calculateTimev+0xd6>
     bf4:	48 96       	adiw	r24, 0x18	; 24
     bf6:	90 93 86 03 	sts	0x0386, r25	; 0x800386 <zeitTimeZone+0x1>
     bfa:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <zeitTimeZone>
     bfe:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <datumTimeZone+0x4>
     c02:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <datumTimeZone+0x5>
     c06:	01 97       	sbiw	r24, 0x01	; 1
     c08:	90 93 67 03 	sts	0x0367, r25	; 0x800367 <datumTimeZone+0x5>
     c0c:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <datumTimeZone+0x4>
     c10:	89 2b       	or	r24, r25
     c12:	f9 f4       	brne	.+62     	; 0xc52 <_Z13calculateTimev+0xd6>
     c14:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <datumTimeZone+0x2>
     c18:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <datumTimeZone+0x3>
     c1c:	01 97       	sbiw	r24, 0x01	; 1
     c1e:	90 93 65 03 	sts	0x0365, r25	; 0x800365 <datumTimeZone+0x3>
     c22:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <datumTimeZone+0x2>
     c26:	89 2b       	or	r24, r25
     c28:	29 f0       	breq	.+10     	; 0xc34 <_Z13calculateTimev+0xb8>
     c2a:	82 e6       	ldi	r24, 0x62	; 98
     c2c:	93 e0       	ldi	r25, 0x03	; 3
     c2e:	0e 94 c3 02 	call	0x586	; 0x586 <_ZN5Datum11DaysOfMonthEv>
     c32:	0b c0       	rjmp	.+22     	; 0xc4a <_Z13calculateTimev+0xce>
     c34:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <datumTimeZone>
     c38:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <datumTimeZone+0x1>
     c3c:	01 97       	sbiw	r24, 0x01	; 1
     c3e:	90 93 63 03 	sts	0x0363, r25	; 0x800363 <datumTimeZone+0x1>
     c42:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <datumTimeZone>
     c46:	8f e1       	ldi	r24, 0x1F	; 31
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	90 93 67 03 	sts	0x0367, r25	; 0x800367 <datumTimeZone+0x5>
     c4e:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <datumTimeZone+0x4>
     c52:	08 95       	ret

00000c54 <_Z14changeTimeZonei>:
     c54:	83 30       	cpi	r24, 0x03	; 3
     c56:	91 05       	cpc	r25, r1
     c58:	39 f0       	breq	.+14     	; 0xc68 <_Z14changeTimeZonei+0x14>
     c5a:	8a 30       	cpi	r24, 0x0A	; 10
     c5c:	91 05       	cpc	r25, r1
     c5e:	21 f0       	breq	.+8      	; 0xc68 <_Z14changeTimeZonei+0x14>
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	91 05       	cpc	r25, r1
     c64:	51 f5       	brne	.+84     	; 0xcba <_Z14changeTimeZonei+0x66>
     c66:	17 c0       	rjmp	.+46     	; 0xc96 <_Z14changeTimeZonei+0x42>
     c68:	83 e1       	ldi	r24, 0x13	; 19
     c6a:	95 e0       	ldi	r25, 0x05	; 5
     c6c:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <_ZN7hd447805clearEv>
     c70:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <tz>
     c74:	90 91 6a 04 	lds	r25, 0x046A	; 0x80046a <tz+0x1>
     c78:	00 97       	sbiw	r24, 0x00	; 0
     c7a:	19 f4       	brne	.+6      	; 0xc82 <_Z14changeTimeZonei+0x2e>
     c7c:	8b e0       	ldi	r24, 0x0B	; 11
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	01 c0       	rjmp	.+2      	; 0xc84 <_Z14changeTimeZonei+0x30>
     c82:	01 97       	sbiw	r24, 0x01	; 1
     c84:	90 93 6a 04 	sts	0x046A, r25	; 0x80046a <tz+0x1>
     c88:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <tz>
     c8c:	0e 94 be 05 	call	0xb7c	; 0xb7c <_Z13calculateTimev>
     c90:	8a e0       	ldi	r24, 0x0A	; 10
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	08 95       	ret
     c96:	83 e1       	ldi	r24, 0x13	; 19
     c98:	95 e0       	ldi	r25, 0x05	; 5
     c9a:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <_ZN7hd447805clearEv>
     c9e:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <tz>
     ca2:	90 91 6a 04 	lds	r25, 0x046A	; 0x80046a <tz+0x1>
     ca6:	8b 30       	cpi	r24, 0x0B	; 11
     ca8:	91 05       	cpc	r25, r1
     caa:	29 f4       	brne	.+10     	; 0xcb6 <_Z14changeTimeZonei+0x62>
     cac:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <tz+0x1>
     cb0:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <tz>
     cb4:	eb cf       	rjmp	.-42     	; 0xc8c <_Z14changeTimeZonei+0x38>
     cb6:	01 96       	adiw	r24, 0x01	; 1
     cb8:	e5 cf       	rjmp	.-54     	; 0xc84 <_Z14changeTimeZonei+0x30>
     cba:	08 95       	ret

00000cbc <_Z11setTimeZonei>:
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	0e 94 2a 06 	call	0xc54	; 0xc54 <_Z14changeTimeZonei>
     cc4:	ec 01       	movw	r28, r24
     cc6:	40 e0       	ldi	r20, 0x00	; 0
     cc8:	60 e0       	ldi	r22, 0x00	; 0
     cca:	83 e1       	ldi	r24, 0x13	; 19
     ccc:	95 e0       	ldi	r25, 0x05	; 5
     cce:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN7hd447809setCursorEhh>
     cd2:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <tz>
     cd6:	90 91 6a 04 	lds	r25, 0x046A	; 0x80046a <tz+0x1>
     cda:	2e e0       	ldi	r18, 0x0E	; 14
     cdc:	28 9f       	mul	r18, r24
     cde:	b0 01       	movw	r22, r0
     ce0:	29 9f       	mul	r18, r25
     ce2:	70 0d       	add	r23, r0
     ce4:	11 24       	eor	r1, r1
     ce6:	65 59       	subi	r22, 0x95	; 149
     ce8:	7b 4f       	sbci	r23, 0xFB	; 251
     cea:	83 e1       	ldi	r24, 0x13	; 19
     cec:	95 e0       	ldi	r25, 0x05	; 5
     cee:	0e 94 88 20 	call	0x4110	; 0x4110 <_ZN5Print5printERK6String>
     cf2:	41 e0       	ldi	r20, 0x01	; 1
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	83 e1       	ldi	r24, 0x13	; 19
     cf8:	95 e0       	ldi	r25, 0x05	; 5
     cfa:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN7hd447809setCursorEhh>
     cfe:	85 e8       	ldi	r24, 0x85	; 133
     d00:	93 e0       	ldi	r25, 0x03	; 3
     d02:	0e 94 b9 03 	call	0x772	; 0x772 <_Z11printhhmmssR4Zeit>
     d06:	ce 01       	movw	r24, r28
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	08 95       	ret

00000d0e <_Z7advancev>:
}

void advance()//Motor Forward
{
	digitalWrite(Dir_Motor,LOW);
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Dir_Motor>
     d14:	0e 94 ce 29 	call	0x539c	; 0x539c <digitalWrite>
	analogWrite(En_Motor,val_output);
     d18:	60 91 40 04 	lds	r22, 0x0440	; 0x800440 <val_output>
     d1c:	70 91 41 04 	lds	r23, 0x0441	; 0x800441 <val_output+0x1>
     d20:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <val_output+0x2>
     d24:	90 91 43 04 	lds	r25, 0x0443	; 0x800443 <val_output+0x3>
     d28:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__fixsfsi>
     d2c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <En_Motor>
     d30:	0c 94 bd 28 	jmp	0x517a	; 0x517a <analogWrite>

00000d34 <_GLOBAL__sub_I_lcd>:
		break;
	}
	if(newmenu >= 0) menu = newmenu;

	} //else Klammer
}
     d34:	6f 92       	push	r6
     d36:	7f 92       	push	r7
     d38:	8f 92       	push	r8
     d3a:	9f 92       	push	r9
     d3c:	af 92       	push	r10
     d3e:	bf 92       	push	r11
     d40:	cf 92       	push	r12
     d42:	df 92       	push	r13
     d44:	ef 92       	push	r14
     d46:	ff 92       	push	r15
     d48:	0f 93       	push	r16
     d4a:	1f 93       	push	r17
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
// ====================

//	-- Automagic / auto-detect constructors --

// Auto find next instance and auto config pin mapping
hd44780_I2Cexp(){ _addr = 0; _expType = I2Cexp_UNKNOWN;}
     d50:	83 e1       	ldi	r24, 0x13	; 19
     d52:	95 e0       	ldi	r25, 0x05	; 5
     d54:	0e 94 d6 15 	call	0x2bac	; 0x2bac <_ZN7hd44780C1Ev>
     d58:	e3 e1       	ldi	r30, 0x13	; 19
     d5a:	f5 e0       	ldi	r31, 0x05	; 5
     d5c:	8a e7       	ldi	r24, 0x7A	; 122
     d5e:	92 e0       	ldi	r25, 0x02	; 2
     d60:	91 83       	std	Z+1, r25	; 0x01
     d62:	80 83       	st	Z, r24
     d64:	10 a2       	std	Z+32, r1	; 0x20
     d66:	11 a2       	std	Z+33, r1	; 0x21

const struct CITY_TIME_DIF CITIES [] {
	{"London", 0, "LON"},{"New-York", -5, "NEY"},{"Paris", 1, "PAR"},{ "Tokyo", 9, "TOK"},
	{"Hongkong", 8, "HNK"},{"Los Angeles", -8, "LAN"},{"Chicago", -6, "CHI"},{"Seoul", 9, "SEO"},
	{ "Bruessel",  1, "BRU"},{"Washington",  -5, "WAS"},{"Singapur", 8, "SIN"},{"Sydney", 11, "SYD"}
	};
     d68:	65 e9       	ldi	r22, 0x95	; 149
     d6a:	71 e0       	ldi	r23, 0x01	; 1
     d6c:	8b e6       	ldi	r24, 0x6B	; 107
     d6e:	94 e0       	ldi	r25, 0x04	; 4
     d70:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6StringC1EPKc>
     d74:	cb e6       	ldi	r28, 0x6B	; 107
     d76:	d4 e0       	ldi	r29, 0x04	; 4
     d78:	1f 82       	std	Y+7, r1	; 0x07
     d7a:	1e 82       	std	Y+6, r1	; 0x06
     d7c:	6c e9       	ldi	r22, 0x9C	; 156
     d7e:	71 e0       	ldi	r23, 0x01	; 1
     d80:	83 e7       	ldi	r24, 0x73	; 115
     d82:	94 e0       	ldi	r25, 0x04	; 4
     d84:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6StringC1EPKc>
     d88:	60 ea       	ldi	r22, 0xA0	; 160
     d8a:	71 e0       	ldi	r23, 0x01	; 1
     d8c:	89 e7       	ldi	r24, 0x79	; 121
     d8e:	94 e0       	ldi	r25, 0x04	; 4
     d90:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6StringC1EPKc>
     d94:	8b ef       	ldi	r24, 0xFB	; 251
     d96:	e8 2e       	mov	r14, r24
     d98:	ff 24       	eor	r15, r15
     d9a:	fa 94       	dec	r15
     d9c:	fd 8a       	std	Y+21, r15	; 0x15
     d9e:	ec 8a       	std	Y+20, r14	; 0x14
     da0:	69 ea       	ldi	r22, 0xA9	; 169
     da2:	71 e0       	ldi	r23, 0x01	; 1
     da4:	81 e8       	ldi	r24, 0x81	; 129
     da6:	94 e0       	ldi	r25, 0x04	; 4
     da8:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6StringC1EPKc>
     dac:	6d ea       	ldi	r22, 0xAD	; 173
     dae:	71 e0       	ldi	r23, 0x01	; 1
     db0:	87 e8       	ldi	r24, 0x87	; 135
     db2:	94 e0       	ldi	r25, 0x04	; 4
     db4:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6StringC1EPKc>
     db8:	66 24       	eor	r6, r6
     dba:	63 94       	inc	r6
     dbc:	71 2c       	mov	r7, r1
     dbe:	7b a2       	std	Y+35, r7	; 0x23
     dc0:	6a a2       	std	Y+34, r6	; 0x22
     dc2:	63 eb       	ldi	r22, 0xB3	; 179
     dc4:	71 e0       	ldi	r23, 0x01	; 1
     dc6:	8f e8       	ldi	r24, 0x8F	; 143
     dc8:	94 e0       	ldi	r25, 0x04	; 4
     dca:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6StringC1EPKc>
     dce:	67 eb       	ldi	r22, 0xB7	; 183
     dd0:	71 e0       	ldi	r23, 0x01	; 1
     dd2:	85 e9       	ldi	r24, 0x95	; 149
     dd4:	94 e0       	ldi	r25, 0x04	; 4
     dd6:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6StringC1EPKc>
     dda:	29 e0       	ldi	r18, 0x09	; 9
     ddc:	82 2e       	mov	r8, r18
     dde:	91 2c       	mov	r9, r1
     de0:	99 aa       	std	Y+49, r9	; 0x31
     de2:	88 aa       	std	Y+48, r8	; 0x30
     de4:	6d eb       	ldi	r22, 0xBD	; 189
     de6:	71 e0       	ldi	r23, 0x01	; 1
     de8:	8d e9       	ldi	r24, 0x9D	; 157
     dea:	94 e0       	ldi	r25, 0x04	; 4
     dec:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6StringC1EPKc>
     df0:	61 ec       	ldi	r22, 0xC1	; 193
     df2:	71 e0       	ldi	r23, 0x01	; 1
     df4:	83 ea       	ldi	r24, 0xA3	; 163
     df6:	94 e0       	ldi	r25, 0x04	; 4
     df8:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6StringC1EPKc>
     dfc:	08 e0       	ldi	r16, 0x08	; 8
     dfe:	10 e0       	ldi	r17, 0x00	; 0
     e00:	1f af       	std	Y+63, r17	; 0x3f
     e02:	0e af       	std	Y+62, r16	; 0x3e
     e04:	6a ec       	ldi	r22, 0xCA	; 202
     e06:	71 e0       	ldi	r23, 0x01	; 1
     e08:	8b ea       	ldi	r24, 0xAB	; 171
     e0a:	94 e0       	ldi	r25, 0x04	; 4
     e0c:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6StringC1EPKc>
     e10:	6e ec       	ldi	r22, 0xCE	; 206
     e12:	71 e0       	ldi	r23, 0x01	; 1
     e14:	81 eb       	ldi	r24, 0xB1	; 177
     e16:	94 e0       	ldi	r25, 0x04	; 4
     e18:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6StringC1EPKc>
     e1c:	88 ef       	ldi	r24, 0xF8	; 248
     e1e:	9f ef       	ldi	r25, 0xFF	; 255
     e20:	90 93 b8 04 	sts	0x04B8, r25	; 0x8004b8 <_ZL6CITIES+0x4d>
     e24:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <_ZL6CITIES+0x4c>
     e28:	6a ed       	ldi	r22, 0xDA	; 218
     e2a:	71 e0       	ldi	r23, 0x01	; 1
     e2c:	89 eb       	ldi	r24, 0xB9	; 185
     e2e:	94 e0       	ldi	r25, 0x04	; 4
     e30:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6StringC1EPKc>
     e34:	6e ed       	ldi	r22, 0xDE	; 222
     e36:	71 e0       	ldi	r23, 0x01	; 1
     e38:	8f eb       	ldi	r24, 0xBF	; 191
     e3a:	94 e0       	ldi	r25, 0x04	; 4
     e3c:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6StringC1EPKc>
     e40:	8a ef       	ldi	r24, 0xFA	; 250
     e42:	9f ef       	ldi	r25, 0xFF	; 255
     e44:	90 93 c6 04 	sts	0x04C6, r25	; 0x8004c6 <_ZL6CITIES+0x5b>
     e48:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <_ZL6CITIES+0x5a>
     e4c:	66 ee       	ldi	r22, 0xE6	; 230
     e4e:	71 e0       	ldi	r23, 0x01	; 1
     e50:	87 ec       	ldi	r24, 0xC7	; 199
     e52:	94 e0       	ldi	r25, 0x04	; 4
     e54:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6StringC1EPKc>
     e58:	6a ee       	ldi	r22, 0xEA	; 234
     e5a:	71 e0       	ldi	r23, 0x01	; 1
     e5c:	8d ec       	ldi	r24, 0xCD	; 205
     e5e:	94 e0       	ldi	r25, 0x04	; 4
     e60:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6StringC1EPKc>
     e64:	90 92 d4 04 	sts	0x04D4, r9	; 0x8004d4 <_ZL6CITIES+0x69>
     e68:	80 92 d3 04 	sts	0x04D3, r8	; 0x8004d3 <_ZL6CITIES+0x68>
     e6c:	60 ef       	ldi	r22, 0xF0	; 240
     e6e:	71 e0       	ldi	r23, 0x01	; 1
     e70:	85 ed       	ldi	r24, 0xD5	; 213
     e72:	94 e0       	ldi	r25, 0x04	; 4
     e74:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6StringC1EPKc>
     e78:	64 ef       	ldi	r22, 0xF4	; 244
     e7a:	71 e0       	ldi	r23, 0x01	; 1
     e7c:	8b ed       	ldi	r24, 0xDB	; 219
     e7e:	94 e0       	ldi	r25, 0x04	; 4
     e80:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6StringC1EPKc>
     e84:	70 92 e2 04 	sts	0x04E2, r7	; 0x8004e2 <_ZL6CITIES+0x77>
     e88:	60 92 e1 04 	sts	0x04E1, r6	; 0x8004e1 <_ZL6CITIES+0x76>
     e8c:	6d ef       	ldi	r22, 0xFD	; 253
     e8e:	71 e0       	ldi	r23, 0x01	; 1
     e90:	83 ee       	ldi	r24, 0xE3	; 227
     e92:	94 e0       	ldi	r25, 0x04	; 4
     e94:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6StringC1EPKc>
     e98:	61 e0       	ldi	r22, 0x01	; 1
     e9a:	72 e0       	ldi	r23, 0x02	; 2
     e9c:	89 ee       	ldi	r24, 0xE9	; 233
     e9e:	94 e0       	ldi	r25, 0x04	; 4
     ea0:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6StringC1EPKc>
     ea4:	f0 92 f0 04 	sts	0x04F0, r15	; 0x8004f0 <_ZL6CITIES+0x85>
     ea8:	e0 92 ef 04 	sts	0x04EF, r14	; 0x8004ef <_ZL6CITIES+0x84>
     eac:	6c e0       	ldi	r22, 0x0C	; 12
     eae:	72 e0       	ldi	r23, 0x02	; 2
     eb0:	81 ef       	ldi	r24, 0xF1	; 241
     eb2:	94 e0       	ldi	r25, 0x04	; 4
     eb4:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6StringC1EPKc>
     eb8:	60 e1       	ldi	r22, 0x10	; 16
     eba:	72 e0       	ldi	r23, 0x02	; 2
     ebc:	87 ef       	ldi	r24, 0xF7	; 247
     ebe:	94 e0       	ldi	r25, 0x04	; 4
     ec0:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6StringC1EPKc>
     ec4:	10 93 fe 04 	sts	0x04FE, r17	; 0x8004fe <_ZL6CITIES+0x93>
     ec8:	00 93 fd 04 	sts	0x04FD, r16	; 0x8004fd <_ZL6CITIES+0x92>
     ecc:	69 e1       	ldi	r22, 0x19	; 25
     ece:	72 e0       	ldi	r23, 0x02	; 2
     ed0:	8f ef       	ldi	r24, 0xFF	; 255
     ed2:	94 e0       	ldi	r25, 0x04	; 4
     ed4:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6StringC1EPKc>
     ed8:	6d e1       	ldi	r22, 0x1D	; 29
     eda:	72 e0       	ldi	r23, 0x02	; 2
     edc:	85 e0       	ldi	r24, 0x05	; 5
     ede:	95 e0       	ldi	r25, 0x05	; 5
     ee0:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6StringC1EPKc>
     ee4:	8b e0       	ldi	r24, 0x0B	; 11
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	90 93 0c 05 	sts	0x050C, r25	; 0x80050c <_ZL6CITIES+0xa1>
     eec:	80 93 0b 05 	sts	0x050B, r24	; 0x80050b <_ZL6CITIES+0xa0>
     ef0:	64 e2       	ldi	r22, 0x24	; 36
     ef2:	72 e0       	ldi	r23, 0x02	; 2
     ef4:	8d e0       	ldi	r24, 0x0D	; 13
     ef6:	95 e0       	ldi	r25, 0x05	; 5
     ef8:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6StringC1EPKc>
#endif

class dht
{
public:
    dht() { _disableIRQ = false; };
     efc:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <DHT+0xd>
boolean motorOn = false;

double val_output;//Power supplied to the motor PWM value.
double Setpoint;
double Kp=3, Ki=5, Kd=0;
PID myPID(&abs_duration, &val_output, &Setpoint, Kp, Ki, Kd, DIRECT);
     f00:	a0 90 0c 01 	lds	r10, 0x010C	; 0x80010c <Ki>
     f04:	b0 90 0d 01 	lds	r11, 0x010D	; 0x80010d <Ki+0x1>
     f08:	c0 90 0e 01 	lds	r12, 0x010E	; 0x80010e <Ki+0x2>
     f0c:	d0 90 0f 01 	lds	r13, 0x010F	; 0x80010f <Ki+0x3>
     f10:	e0 90 10 01 	lds	r14, 0x0110	; 0x800110 <Kp>
     f14:	f0 90 11 01 	lds	r15, 0x0111	; 0x800111 <Kp+0x1>
     f18:	00 91 12 01 	lds	r16, 0x0112	; 0x800112 <Kp+0x2>
     f1c:	10 91 13 01 	lds	r17, 0x0113	; 0x800113 <Kp+0x3>
     f20:	1f 92       	push	r1
     f22:	1f 92       	push	r1
     f24:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <Kd+0x3>
     f28:	8f 93       	push	r24
     f2a:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <Kd+0x2>
     f2e:	8f 93       	push	r24
     f30:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <Kd+0x1>
     f34:	8f 93       	push	r24
     f36:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <Kd>
     f3a:	8f 93       	push	r24
     f3c:	2c e3       	ldi	r18, 0x3C	; 60
     f3e:	34 e0       	ldi	r19, 0x04	; 4
     f40:	40 e4       	ldi	r20, 0x40	; 64
     f42:	54 e0       	ldi	r21, 0x04	; 4
     f44:	65 e4       	ldi	r22, 0x45	; 69
     f46:	74 e0       	ldi	r23, 0x04	; 4
     f48:	8c ef       	ldi	r24, 0xFC	; 252
     f4a:	93 e0       	ldi	r25, 0x03	; 3
     f4c:	0e 94 6f 14 	call	0x28de	; 0x28de <_ZN3PIDC1EPdS0_S0_dddi>
int timeDataReceived;

int longitudeDegr;
int longitudeMin;
char longitudeDir;
String latitudeDegr;
     f50:	6a e3       	ldi	r22, 0x3A	; 58
     f52:	73 e0       	ldi	r23, 0x03	; 3
     f54:	8c e9       	ldi	r24, 0x9C	; 156
     f56:	93 e0       	ldi	r25, 0x03	; 3
     f58:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6StringC1EPKc>
String latitudeMin;
     f5c:	6a e3       	ldi	r22, 0x3A	; 58
     f5e:	73 e0       	ldi	r23, 0x03	; 3
     f60:	86 e9       	ldi	r24, 0x96	; 150
     f62:	93 e0       	ldi	r25, 0x03	; 3
     f64:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6StringC1EPKc>
	int hh_;
	int mm_;
	int ss_;
	int set_;
public:
	Zeit(int h, int m, int s){ hh_=h; mm_=m; ss_=s; set_ =0;};
     f68:	ed e8       	ldi	r30, 0x8D	; 141
     f6a:	f3 e0       	ldi	r31, 0x03	; 3
     f6c:	80 e1       	ldi	r24, 0x10	; 16
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	91 83       	std	Z+1, r25	; 0x01
     f72:	80 83       	st	Z, r24
     f74:	2b e3       	ldi	r18, 0x3B	; 59
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	33 83       	std	Z+3, r19	; 0x03
     f7a:	22 83       	std	Z+2, r18	; 0x02
     f7c:	8d e2       	ldi	r24, 0x2D	; 45
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	95 83       	std	Z+5, r25	; 0x05
     f82:	84 83       	std	Z+4, r24	; 0x04
     f84:	17 82       	std	Z+7, r1	; 0x07
     f86:	16 82       	std	Z+6, r1	; 0x06
     f88:	e5 e8       	ldi	r30, 0x85	; 133
     f8a:	f3 e0       	ldi	r31, 0x03	; 3
     f8c:	11 82       	std	Z+1, r1	; 0x01
     f8e:	10 82       	st	Z, r1
     f90:	13 82       	std	Z+3, r1	; 0x03
     f92:	12 82       	std	Z+2, r1	; 0x02
     f94:	15 82       	std	Z+5, r1	; 0x05
     f96:	14 82       	std	Z+4, r1	; 0x04
     f98:	17 82       	std	Z+7, r1	; 0x07
     f9a:	16 82       	std	Z+6, r1	; 0x06
     f9c:	ed e7       	ldi	r30, 0x7D	; 125
     f9e:	f3 e0       	ldi	r31, 0x03	; 3
     fa0:	41 e1       	ldi	r20, 0x11	; 17
     fa2:	50 e0       	ldi	r21, 0x00	; 0
     fa4:	51 83       	std	Z+1, r21	; 0x01
     fa6:	40 83       	st	Z, r20
     fa8:	33 83       	std	Z+3, r19	; 0x03
     faa:	22 83       	std	Z+2, r18	; 0x02
     fac:	95 83       	std	Z+5, r25	; 0x05
     fae:	84 83       	std	Z+4, r24	; 0x04
     fb0:	17 82       	std	Z+7, r1	; 0x07
     fb2:	16 82       	std	Z+6, r1	; 0x06
     fb4:	e5 e7       	ldi	r30, 0x75	; 117
     fb6:	f3 e0       	ldi	r31, 0x03	; 3
     fb8:	82 e1       	ldi	r24, 0x12	; 18
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	91 83       	std	Z+1, r25	; 0x01
     fbe:	80 83       	st	Z, r24
     fc0:	13 82       	std	Z+3, r1	; 0x03
     fc2:	12 82       	std	Z+2, r1	; 0x02
     fc4:	15 82       	std	Z+5, r1	; 0x05
     fc6:	14 82       	std	Z+4, r1	; 0x04
     fc8:	17 82       	std	Z+7, r1	; 0x07
     fca:	16 82       	std	Z+6, r1	; 0x06
	int YYYY_;
	int MM_;
	int DD_;
	int set_;
public:
	Datum(int d, int m, int y){DD_=d; MM_=m;YYYY_=y; set_ = 0;};
     fcc:	ea e6       	ldi	r30, 0x6A	; 106
     fce:	f3 e0       	ldi	r31, 0x03	; 3
     fd0:	4e e0       	ldi	r20, 0x0E	; 14
     fd2:	50 e0       	ldi	r21, 0x00	; 0
     fd4:	55 83       	std	Z+5, r21	; 0x05
     fd6:	44 83       	std	Z+4, r20	; 0x04
     fd8:	2c e0       	ldi	r18, 0x0C	; 12
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	33 83       	std	Z+3, r19	; 0x03
     fde:	22 83       	std	Z+2, r18	; 0x02
     fe0:	83 ee       	ldi	r24, 0xE3	; 227
     fe2:	97 e0       	ldi	r25, 0x07	; 7
     fe4:	91 83       	std	Z+1, r25	; 0x01
     fe6:	80 83       	st	Z, r24
     fe8:	17 82       	std	Z+7, r1	; 0x07
     fea:	16 82       	std	Z+6, r1	; 0x06
     fec:	e2 e6       	ldi	r30, 0x62	; 98
     fee:	f3 e0       	ldi	r31, 0x03	; 3
     ff0:	75 82       	std	Z+5, r7	; 0x05
     ff2:	64 82       	std	Z+4, r6	; 0x04
     ff4:	93 82       	std	Z+3, r9	; 0x03
     ff6:	82 82       	std	Z+2, r8	; 0x02
     ff8:	60 ed       	ldi	r22, 0xD0	; 208
     ffa:	77 e0       	ldi	r23, 0x07	; 7
     ffc:	71 83       	std	Z+1, r23	; 0x01
     ffe:	60 83       	st	Z, r22
    1000:	17 82       	std	Z+7, r1	; 0x07
    1002:	16 82       	std	Z+6, r1	; 0x06
    1004:	ea e5       	ldi	r30, 0x5A	; 90
    1006:	f3 e0       	ldi	r31, 0x03	; 3
    1008:	55 83       	std	Z+5, r21	; 0x05
    100a:	44 83       	std	Z+4, r20	; 0x04
    100c:	33 83       	std	Z+3, r19	; 0x03
    100e:	22 83       	std	Z+2, r18	; 0x02
    1010:	91 83       	std	Z+1, r25	; 0x01
    1012:	80 83       	st	Z, r24
    1014:	17 82       	std	Z+7, r1	; 0x07
    1016:	16 82       	std	Z+6, r1	; 0x06
		break;
	}
	if(newmenu >= 0) menu = newmenu;

	} //else Klammer
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	1f 91       	pop	r17
    102a:	0f 91       	pop	r16
    102c:	ff 90       	pop	r15
    102e:	ef 90       	pop	r14
    1030:	df 90       	pop	r13
    1032:	cf 90       	pop	r12
    1034:	bf 90       	pop	r11
    1036:	af 90       	pop	r10
    1038:	9f 90       	pop	r9
    103a:	8f 90       	pop	r8
    103c:	7f 90       	pop	r7
    103e:	6f 90       	pop	r6
    1040:	08 95       	ret

00001042 <_GLOBAL__sub_D_lcd>:
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29

int longitudeDegr;
int longitudeMin;
char longitudeDir;
String latitudeDegr;
String latitudeMin;
    1046:	86 e9       	ldi	r24, 0x96	; 150
    1048:	93 e0       	ldi	r25, 0x03	; 3
    104a:	0e 94 27 2a 	call	0x544e	; 0x544e <_ZN6StringD1Ev>
int timeDataReceived;

int longitudeDegr;
int longitudeMin;
char longitudeDir;
String latitudeDegr;
    104e:	8c e9       	ldi	r24, 0x9C	; 156
    1050:	93 e0       	ldi	r25, 0x03	; 3
    1052:	0e 94 27 2a 	call	0x544e	; 0x544e <_ZN6StringD1Ev>
	String name;
	int timediff;
	String initials;
};

const struct CITY_TIME_DIF CITIES [] {
    1056:	c3 e1       	ldi	r28, 0x13	; 19
    1058:	d5 e0       	ldi	r29, 0x05	; 5
    105a:	2e 97       	sbiw	r28, 0x0e	; 14


hd44780_I2Cexp lcd;

//Strukt um Städte und deren Zweitverschiebung zu GMT (London) abzuspeichern
struct CITY_TIME_DIF {
    105c:	ce 01       	movw	r24, r28
    105e:	08 96       	adiw	r24, 0x08	; 8
    1060:	0e 94 27 2a 	call	0x544e	; 0x544e <_ZN6StringD1Ev>
    1064:	ce 01       	movw	r24, r28
    1066:	0e 94 27 2a 	call	0x544e	; 0x544e <_ZN6StringD1Ev>
	String name;
	int timediff;
	String initials;
};

const struct CITY_TIME_DIF CITIES [] {
    106a:	84 e0       	ldi	r24, 0x04	; 4
    106c:	cb 36       	cpi	r28, 0x6B	; 107
    106e:	d8 07       	cpc	r29, r24
    1070:	a1 f7       	brne	.-24     	; 0x105a <_GLOBAL__sub_D_lcd+0x18>
		break;
	}
	if(newmenu >= 0) menu = newmenu;

	} //else Klammer
}
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	08 95       	ret

00001078 <_ZN14hd44780_I2Cexp14iosetBacklightEh>:
}

// iosetBacklight()  - set backlight brightness
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	fc 01       	movw	r30, r24
{
	if(!_bl) // backlight control?
    107e:	81 a5       	ldd	r24, Z+41	; 0x29
    1080:	88 23       	and	r24, r24
    1082:	71 f1       	breq	.+92     	; 0x10e0 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x68>
    1084:	92 a5       	ldd	r25, Z+42	; 0x2a
		return(hd44780::RV_ENOTSUP); // not backlight control support

	// dimvalue 0 is backlight off any other dimvalue is backlight on
	// configure backlight state mask according to active level
	if(((dimvalue) && (_blLevel == HIGH)) || 
    1086:	66 23       	and	r22, r22
    1088:	19 f0       	breq	.+6      	; 0x1090 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x18>
    108a:	91 30       	cpi	r25, 0x01	; 1
    108c:	29 f4       	brne	.+10     	; 0x1098 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x1c>
			((dimvalue == 0) && (_blLevel == LOW)))
    1090:	91 11       	cpse	r25, r1
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
	{
		_blCurState = _bl;
    1094:	83 a7       	std	Z+43, r24	; 0x2b
    1096:	01 c0       	rjmp	.+2      	; 0x109a <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x22>
	}
	else 
	{
		_blCurState = 0;
    1098:	13 a6       	std	Z+43, r1	; 0x2b
    109a:	ef 01       	movw	r28, r30
	}
	Wire.beginTransmission(_addr);
    109c:	60 a1       	ldd	r22, Z+32	; 0x20
    109e:	8e ea       	ldi	r24, 0xAE	; 174
    10a0:	95 e0       	ldi	r25, 0x05	; 5
    10a2:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
    10a6:	89 a1       	ldd	r24, Y+33	; 0x21
    10a8:	82 30       	cpi	r24, 0x02	; 2
    10aa:	31 f4       	brne	.+12     	; 0x10b8 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x40>
	{
		Wire.write(9); // point to GPIO
    10ac:	69 e0       	ldi	r22, 0x09	; 9
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	8e ea       	ldi	r24, 0xAE	; 174
    10b2:	95 e0       	ldi	r25, 0x05	; 5
    10b4:	0e 94 91 02 	call	0x522	; 0x522 <_ZN7TwoWire5writeEi>
	}
	Wire.write( _blCurState );
    10b8:	6b a5       	ldd	r22, Y+43	; 0x2b
    10ba:	8e ea       	ldi	r24, 0xAE	; 174
    10bc:	95 e0       	ldi	r25, 0x05	; 5
    10be:	0e 94 2b 1a 	call	0x3456	; 0x3456 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    10c2:	8e ea       	ldi	r24, 0xAE	; 174
    10c4:	95 e0       	ldi	r25, 0x05	; 5
    10c6:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN7TwoWire15endTransmissionEv>
    10ca:	21 e0       	ldi	r18, 0x01	; 1
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 11       	cpse	r24, r1
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x5e>
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	88 27       	eor	r24, r24
    10d8:	99 27       	eor	r25, r25
    10da:	82 1b       	sub	r24, r18
    10dc:	93 0b       	sbc	r25, r19
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x6c>
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
{
	if(!_bl) // backlight control?
		return(hd44780::RV_ENOTSUP); // not backlight control support
    10e0:	8d ef       	ldi	r24, 0xFD	; 253
    10e2:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write( _blCurState );
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR); // all is good
}
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	08 95       	ret

000010ea <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>:
	return(0);
}


// write4bits - send a nibble to the LCD through i/o expander port
void write4bits(uint8_t value, hd44780::iotype type ) 
    10ea:	cf 93       	push	r28
    10ec:	fc 01       	movw	r30, r24
{
uint8_t gpioValue =  _blCurState;
    10ee:	c3 a5       	ldd	r28, Z+43	; 0x2b
   
	// convert the value to an i/o expander port value
	// based on pin mappings
	if(value & (1 << 0))
    10f0:	60 ff       	sbrs	r22, 0
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0xe>
		gpioValue |= _d4;
    10f4:	85 a1       	ldd	r24, Z+37	; 0x25
    10f6:	c8 2b       	or	r28, r24

	if(value & (1 << 1))
    10f8:	61 ff       	sbrs	r22, 1
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x16>
		gpioValue |= _d5;
    10fc:	86 a1       	ldd	r24, Z+38	; 0x26
    10fe:	c8 2b       	or	r28, r24

	if(value & (1 << 2))
    1100:	62 ff       	sbrs	r22, 2
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x1e>
		gpioValue |= _d6;
    1104:	87 a1       	ldd	r24, Z+39	; 0x27
    1106:	c8 2b       	or	r28, r24

	if(value & (1 << 3))
    1108:	63 ff       	sbrs	r22, 3
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x26>
		gpioValue |= _d7;
    110c:	80 a5       	ldd	r24, Z+40	; 0x28
    110e:	c8 2b       	or	r28, r24


	if(type == hd44780::HD44780_IOdata) 
    1110:	41 30       	cpi	r20, 0x01	; 1
    1112:	11 f4       	brne	.+4      	; 0x1118 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x2e>
	{
		gpioValue |= _rs; // set RS high to send to data reg
    1114:	82 a1       	ldd	r24, Z+34	; 0x22
    1116:	c8 2b       	or	r28, r24
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
    1118:	64 a1       	ldd	r22, Z+36	; 0x24
    111a:	6c 2b       	or	r22, r28
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	8e ea       	ldi	r24, 0xAE	; 174
    1120:	95 e0       	ldi	r25, 0x05	; 5
    1122:	0e 94 91 02 	call	0x522	; 0x522 <_ZN7TwoWire5writeEi>
	Wire.write(gpioValue);		// with E LOW
    1126:	6c 2f       	mov	r22, r28
    1128:	8e ea       	ldi	r24, 0xAE	; 174
    112a:	95 e0       	ldi	r25, 0x05	; 5
}
    112c:	cf 91       	pop	r28
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
	Wire.write(gpioValue);		// with E LOW
    112e:	0c 94 2b 1a 	jmp	0x3456	; 0x3456 <_ZN7TwoWire5writeEh>

00001132 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh>:
	return(rval);
}

// iowrite(type, value) - send either command or data byte to lcd
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
    1132:	8f 92       	push	r8
    1134:	9f 92       	push	r9
    1136:	af 92       	push	r10
    1138:	bf 92       	push	r11
    113a:	cf 92       	push	r12
    113c:	df 92       	push	r13
    113e:	ef 92       	push	r14
    1140:	ff 92       	push	r15
    1142:	0f 93       	push	r16
    1144:	1f 93       	push	r17
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	ec 01       	movw	r28, r24
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
    114c:	88 a1       	ldd	r24, Y+32	; 0x20
    114e:	88 23       	and	r24, r24
    1150:	09 f4       	brne	.+2      	; 0x1154 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x22>
    1152:	50 c0       	rjmp	.+160    	; 0x11f4 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
    1154:	89 a1       	ldd	r24, Y+33	; 0x21
    1156:	88 23       	and	r24, r24
    1158:	09 f4       	brne	.+2      	; 0x115c <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x2a>
    115a:	4c c0       	rjmp	.+152    	; 0x11f4 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
    115c:	14 2f       	mov	r17, r20
    115e:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
    1160:	8c 8c       	ldd	r8, Y+28	; 0x1c
    1162:	9d 8c       	ldd	r9, Y+29	; 0x1d
    1164:	ae 8c       	ldd	r10, Y+30	; 0x1e
    1166:	bf 8c       	ldd	r11, Y+31	; 0x1f
    1168:	c8 8c       	ldd	r12, Y+24	; 0x18
    116a:	d9 8c       	ldd	r13, Y+25	; 0x19
    116c:	ea 8c       	ldd	r14, Y+26	; 0x1a
    116e:	fb 8c       	ldd	r15, Y+27	; 0x1b
    1170:	8d e2       	ldi	r24, 0x2D	; 45
    1172:	c8 1a       	sub	r12, r24
    1174:	d1 08       	sbc	r13, r1
    1176:	e1 08       	sbc	r14, r1
    1178:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
    117a:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <micros>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	8c 19       	sub	r24, r12
    1184:	9d 09       	sbc	r25, r13
    1186:	ae 09       	sbc	r26, r14
    1188:	bf 09       	sbc	r27, r15
    118a:	88 15       	cp	r24, r8
    118c:	99 05       	cpc	r25, r9
    118e:	aa 05       	cpc	r26, r10
    1190:	bb 05       	cpc	r27, r11
    1192:	98 f3       	brcs	.-26     	; 0x117a <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x48>
	 */

	waitReady(-45);
   
	// grab i2c bus
	Wire.beginTransmission(_addr);
    1194:	68 a1       	ldd	r22, Y+32	; 0x20
    1196:	8e ea       	ldi	r24, 0xAE	; 174
    1198:	95 e0       	ldi	r25, 0x05	; 5
    119a:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
    119e:	89 a1       	ldd	r24, Y+33	; 0x21
    11a0:	82 30       	cpi	r24, 0x02	; 2
    11a2:	31 f4       	brne	.+12     	; 0x11b0 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x7e>
	{
		Wire.write(9); // point to GPIO
    11a4:	69 e0       	ldi	r22, 0x09	; 9
    11a6:	70 e0       	ldi	r23, 0x00	; 0
    11a8:	8e ea       	ldi	r24, 0xAE	; 174
    11aa:	95 e0       	ldi	r25, 0x05	; 5
    11ac:	0e 94 91 02 	call	0x522	; 0x522 <_ZN7TwoWire5writeEi>
	}
	// send both nibbles in same i2c connection
	write4bits( (value >> 4), type );  // send upper nibble
    11b0:	61 2f       	mov	r22, r17
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	84 e0       	ldi	r24, 0x04	; 4
    11b6:	75 95       	asr	r23
    11b8:	67 95       	ror	r22
    11ba:	8a 95       	dec	r24
    11bc:	e1 f7       	brne	.-8      	; 0x11b6 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x84>
    11be:	40 2f       	mov	r20, r16
    11c0:	ce 01       	movw	r24, r28
    11c2:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	 * are used to reliably get the LCD and host in nibble sync
	 * with each other and to get the LCD into 4 bit mode.
	 * When sending a "4 bit command" only the upper nibble of
	 * of the 8 bit byte will presented on LCD signals D4-D7.
	 */
	if(type != hd44780::HD44780_IOcmd4bit)
    11c6:	02 30       	cpi	r16, 0x02	; 2
    11c8:	31 f0       	breq	.+12     	; 0x11d6 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xa4>
	{
		write4bits( (value & 0x0F), type); // lower nibble, if not 4bit cmd
    11ca:	61 2f       	mov	r22, r17
    11cc:	6f 70       	andi	r22, 0x0F	; 15
    11ce:	40 2f       	mov	r20, r16
    11d0:	ce 01       	movw	r24, r28
    11d2:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	}
	if(Wire.endTransmission())
    11d6:	8e ea       	ldi	r24, 0xAE	; 174
    11d8:	95 e0       	ldi	r25, 0x05	; 5
    11da:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN7TwoWire15endTransmissionEv>
    11de:	21 e0       	ldi	r18, 0x01	; 1
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	81 11       	cpse	r24, r1
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xb8>
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	88 27       	eor	r24, r24
    11ec:	99 27       	eor	r25, r25
    11ee:	82 1b       	sub	r24, r18
    11f0:	93 0b       	sbc	r25, r19
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc6>
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
    11f4:	8c ef       	ldi	r24, 0xFC	; 252
    11f6:	9f ef       	ldi	r25, 0xFF	; 255
	}
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR);
}
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	1f 91       	pop	r17
    11fe:	0f 91       	pop	r16
    1200:	ff 90       	pop	r15
    1202:	ef 90       	pop	r14
    1204:	df 90       	pop	r13
    1206:	cf 90       	pop	r12
    1208:	bf 90       	pop	r11
    120a:	af 90       	pop	r10
    120c:	9f 90       	pop	r9
    120e:	8f 90       	pop	r8
    1210:	08 95       	ret

00001212 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE>:
// ioread(type) - read a byte from LCD DDRAM
//
// returns:
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
    1212:	8f 92       	push	r8
    1214:	9f 92       	push	r9
    1216:	af 92       	push	r10
    1218:	bf 92       	push	r11
    121a:	cf 92       	push	r12
    121c:	df 92       	push	r13
    121e:	ef 92       	push	r14
    1220:	ff 92       	push	r15
    1222:	0f 93       	push	r16
    1224:	1f 93       	push	r17
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
    122a:	ec 01       	movw	r28, r24
{
uint8_t gpioValue =  _blCurState;
    122c:	1b a5       	ldd	r17, Y+43	; 0x2b
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
    122e:	88 a1       	ldd	r24, Y+32	; 0x20
    1230:	88 23       	and	r24, r24
    1232:	09 f4       	brne	.+2      	; 0x1236 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x24>
    1234:	f6 c0       	rjmp	.+492    	; 0x1422 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
    1236:	89 a1       	ldd	r24, Y+33	; 0x21
    1238:	88 23       	and	r24, r24
    123a:	09 f4       	brne	.+2      	; 0x123e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x2c>
    123c:	f2 c0       	rjmp	.+484    	; 0x1422 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
		return(hd44780::RV_ENXIO);

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
    123e:	82 30       	cpi	r24, 0x02	; 2
    1240:	09 f4       	brne	.+2      	; 0x1244 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x32>
    1242:	f1 c0       	rjmp	.+482    	; 0x1426 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
	{
		return(hd44780::RV_ENOTSUP);
	}

	// check if reads supported
	if(!_rw)
    1244:	8b a1       	ldd	r24, Y+35	; 0x23
    1246:	88 23       	and	r24, r24
    1248:	09 f4       	brne	.+2      	; 0x124c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x3a>
    124a:	ed c0       	rjmp	.+474    	; 0x1426 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
    124c:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
    124e:	8c 8c       	ldd	r8, Y+28	; 0x1c
    1250:	9d 8c       	ldd	r9, Y+29	; 0x1d
    1252:	ae 8c       	ldd	r10, Y+30	; 0x1e
    1254:	bf 8c       	ldd	r11, Y+31	; 0x1f
    1256:	c8 8c       	ldd	r12, Y+24	; 0x18
    1258:	d9 8c       	ldd	r13, Y+25	; 0x19
    125a:	ea 8c       	ldd	r14, Y+26	; 0x1a
    125c:	fb 8c       	ldd	r15, Y+27	; 0x1b
    125e:	8d e2       	ldi	r24, 0x2D	; 45
    1260:	c8 1a       	sub	r12, r24
    1262:	d1 08       	sbc	r13, r1
    1264:	e1 08       	sbc	r14, r1
    1266:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
    1268:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <micros>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	8c 19       	sub	r24, r12
    1272:	9d 09       	sbc	r25, r13
    1274:	ae 09       	sbc	r26, r14
    1276:	bf 09       	sbc	r27, r15
    1278:	88 15       	cp	r24, r8
    127a:	99 05       	cpc	r25, r9
    127c:	aa 05       	cpc	r26, r10
    127e:	bb 05       	cpc	r27, r11
    1280:	98 f3       	brcs	.-26     	; 0x1268 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x56>
    1282:	8d a1       	ldd	r24, Y+37	; 0x25
    1284:	18 2b       	or	r17, r24
    1286:	8e a1       	ldd	r24, Y+38	; 0x26
    1288:	18 2b       	or	r17, r24
    128a:	8f a1       	ldd	r24, Y+39	; 0x27
    128c:	18 2b       	or	r17, r24
   
	// put all the expander LCD data pins into input mode.
	// PCF8574 psuedo inputs use pullups so setting them to 1
	// makes them suitible for inputs.

	gpioValue |= _d4|_d5|_d6|_d7;
    128e:	88 a5       	ldd	r24, Y+40	; 0x28
    1290:	18 2b       	or	r17, r24

	// set RS based on type of read (data or status/cmd)
	if(type == hd44780::HD44780_IOdata) 
    1292:	01 30       	cpi	r16, 0x01	; 1
    1294:	11 f4       	brne	.+4      	; 0x129a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x88>
	{
		gpioValue |= _rs; // RS high to read data reg
    1296:	8a a1       	ldd	r24, Y+34	; 0x22
    1298:	18 2b       	or	r17, r24
	}

	gpioValue |= _rw; // r/w high for reading
    129a:	8b a1       	ldd	r24, Y+35	; 0x23
    129c:	18 2b       	or	r17, r24

	// write all the bits to the expander port
	
	Wire.beginTransmission(_addr);
    129e:	68 a1       	ldd	r22, Y+32	; 0x20
    12a0:	8e ea       	ldi	r24, 0xAE	; 174
    12a2:	95 e0       	ldi	r25, 0x05	; 5
    12a4:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue);		// d4-d7 are inputs, RS, r/w high, E LOW
    12a8:	61 2f       	mov	r22, r17
    12aa:	8e ea       	ldi	r24, 0xAE	; 174
    12ac:	95 e0       	ldi	r25, 0x05	; 5
    12ae:	0e 94 2b 1a 	call	0x3456	; 0x3456 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    12b2:	8e ea       	ldi	r24, 0xAE	; 174
    12b4:	95 e0       	ldi	r25, 0x05	; 5
    12b6:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN7TwoWire15endTransmissionEv>
    12ba:	88 23       	and	r24, r24
    12bc:	19 f0       	breq	.+6      	; 0x12c4 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xb2>
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;
    12be:	0f ef       	ldi	r16, 0xFF	; 255
    12c0:	1f ef       	ldi	r17, 0xFF	; 255
    12c2:	9d c0       	rjmp	.+314    	; 0x13fe <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ec>
	if(Wire.endTransmission())
		goto returnStatus;


	// raise E to read the data.
	Wire.beginTransmission(_addr);
    12c4:	68 a1       	ldd	r22, Y+32	; 0x20
    12c6:	8e ea       	ldi	r24, 0xAE	; 174
    12c8:	95 e0       	ldi	r25, 0x05	; 5
    12ca:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raises E 
    12ce:	6c a1       	ldd	r22, Y+36	; 0x24
    12d0:	61 2b       	or	r22, r17
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	8e ea       	ldi	r24, 0xAE	; 174
    12d6:	95 e0       	ldi	r25, 0x05	; 5
    12d8:	0e 94 91 02 	call	0x522	; 0x522 <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
    12dc:	8e ea       	ldi	r24, 0xAE	; 174
    12de:	95 e0       	ldi	r25, 0x05	; 5
    12e0:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN7TwoWire15endTransmissionEv>
    12e4:	81 11       	cpse	r24, r1
    12e6:	eb cf       	rjmp	.-42     	; 0x12be <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// read the expander port to get the upper nibble of the byte
	Wire.requestFrom((int)_addr, 1);
    12e8:	68 a1       	ldd	r22, Y+32	; 0x20
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	41 e0       	ldi	r20, 0x01	; 1
    12ee:	50 e0       	ldi	r21, 0x00	; 0
    12f0:	8e ea       	ldi	r24, 0xAE	; 174
    12f2:	95 e0       	ldi	r25, 0x05	; 5
    12f4:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN7TwoWire11requestFromEii>
	iodata = Wire.read();
    12f8:	8e ea       	ldi	r24, 0xAE	; 174
    12fa:	95 e0       	ldi	r25, 0x05	; 5
    12fc:	0e 94 a4 19 	call	0x3348	; 0x3348 <_ZN7TwoWire4readEv>
    1300:	7c 01       	movw	r14, r24
	if(iodata < 0) // did we not receive a byte?
    1302:	97 fd       	sbrc	r25, 7
    1304:	dc cf       	rjmp	.-72     	; 0x12be <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
    1306:	68 a1       	ldd	r22, Y+32	; 0x20
    1308:	8e ea       	ldi	r24, 0xAE	; 174
    130a:	95 e0       	ldi	r25, 0x05	; 5
    130c:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
    1310:	61 2f       	mov	r22, r17
    1312:	8e ea       	ldi	r24, 0xAE	; 174
    1314:	95 e0       	ldi	r25, 0x05	; 5
    1316:	0e 94 2b 1a 	call	0x3456	; 0x3456 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    131a:	8e ea       	ldi	r24, 0xAE	; 174
    131c:	95 e0       	ldi	r25, 0x05	; 5
    131e:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN7TwoWire15endTransmissionEv>
    1322:	81 11       	cpse	r24, r1
    1324:	cc cf       	rjmp	.-104    	; 0x12be <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
    1326:	8d a1       	ldd	r24, Y+37	; 0x25
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	8e 21       	and	r24, r14
    132c:	9f 21       	and	r25, r15
    132e:	89 2b       	or	r24, r25
    1330:	11 f4       	brne	.+4      	; 0x1336 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x124>
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
    1332:	00 e0       	ldi	r16, 0x00	; 0
    1334:	01 c0       	rjmp	.+2      	; 0x1338 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x126>
	if(Wire.endTransmission())
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
		data |= (1 << 4);
    1336:	00 e1       	ldi	r16, 0x10	; 16

	if(iodata & _d5)
    1338:	8e a1       	ldd	r24, Y+38	; 0x26
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	8e 21       	and	r24, r14
    133e:	9f 21       	and	r25, r15
    1340:	89 2b       	or	r24, r25
    1342:	09 f0       	breq	.+2      	; 0x1346 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x134>
		data |= (1 << 5);
    1344:	00 62       	ori	r16, 0x20	; 32

	if(iodata & _d6)
    1346:	8f a1       	ldd	r24, Y+39	; 0x27
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	8e 21       	and	r24, r14
    134c:	9f 21       	and	r25, r15
    134e:	89 2b       	or	r24, r25
    1350:	09 f0       	breq	.+2      	; 0x1354 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x142>
		data |= (1 << 6);
    1352:	00 64       	ori	r16, 0x40	; 64

	if(iodata & _d7)
    1354:	88 a5       	ldd	r24, Y+40	; 0x28
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	e8 22       	and	r14, r24
    135a:	f9 22       	and	r15, r25
    135c:	ef 28       	or	r14, r15
    135e:	09 f0       	breq	.+2      	; 0x1362 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x150>
		data |= (1 << 7);
    1360:	00 68       	ori	r16, 0x80	; 128
	
	Wire.beginTransmission(_addr);
    1362:	68 a1       	ldd	r22, Y+32	; 0x20
    1364:	8e ea       	ldi	r24, 0xAE	; 174
    1366:	95 e0       	ldi	r25, 0x05	; 5
    1368:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raise E to read next nibble
    136c:	6c a1       	ldd	r22, Y+36	; 0x24
    136e:	61 2b       	or	r22, r17
    1370:	70 e0       	ldi	r23, 0x00	; 0
    1372:	8e ea       	ldi	r24, 0xAE	; 174
    1374:	95 e0       	ldi	r25, 0x05	; 5
    1376:	0e 94 91 02 	call	0x522	; 0x522 <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
    137a:	8e ea       	ldi	r24, 0xAE	; 174
    137c:	95 e0       	ldi	r25, 0x05	; 5
    137e:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN7TwoWire15endTransmissionEv>
    1382:	81 11       	cpse	r24, r1
    1384:	9c cf       	rjmp	.-200    	; 0x12be <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>

	// read the expander port to get the lower nibble of the byte
	// We can't look at the return value from requestFrom() on the TineyWireM
	// library as it doesn't work like it is supposed to.
	// So we look at the return status from read() instead.
	Wire.requestFrom((int)_addr, 1);
    1386:	68 a1       	ldd	r22, Y+32	; 0x20
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	41 e0       	ldi	r20, 0x01	; 1
    138c:	50 e0       	ldi	r21, 0x00	; 0
    138e:	8e ea       	ldi	r24, 0xAE	; 174
    1390:	95 e0       	ldi	r25, 0x05	; 5
    1392:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN7TwoWire11requestFromEii>

	iodata = Wire.read();
    1396:	8e ea       	ldi	r24, 0xAE	; 174
    1398:	95 e0       	ldi	r25, 0x05	; 5
    139a:	0e 94 a4 19 	call	0x3348	; 0x3348 <_ZN7TwoWire4readEv>
    139e:	7c 01       	movw	r14, r24

	if(iodata < 0) // did we not receive a byte?
    13a0:	97 fd       	sbrc	r25, 7
    13a2:	8d cf       	rjmp	.-230    	; 0x12be <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
    13a4:	68 a1       	ldd	r22, Y+32	; 0x20
    13a6:	8e ea       	ldi	r24, 0xAE	; 174
    13a8:	95 e0       	ldi	r25, 0x05	; 5
    13aa:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
    13ae:	61 2f       	mov	r22, r17
    13b0:	8e ea       	ldi	r24, 0xAE	; 174
    13b2:	95 e0       	ldi	r25, 0x05	; 5
    13b4:	0e 94 2b 1a 	call	0x3456	; 0x3456 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    13b8:	8e ea       	ldi	r24, 0xAE	; 174
    13ba:	95 e0       	ldi	r25, 0x05	; 5
    13bc:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN7TwoWire15endTransmissionEv>
    13c0:	81 11       	cpse	r24, r1
    13c2:	7d cf       	rjmp	.-262    	; 0x12be <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into lower nibble of byte
	if(iodata & _d4)
    13c4:	8d a1       	ldd	r24, Y+37	; 0x25
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	8e 21       	and	r24, r14
    13ca:	9f 21       	and	r25, r15
    13cc:	89 2b       	or	r24, r25
    13ce:	09 f0       	breq	.+2      	; 0x13d2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1c0>
		data |= (1 << 0);
    13d0:	01 60       	ori	r16, 0x01	; 1

	if(iodata & _d5)
    13d2:	8e a1       	ldd	r24, Y+38	; 0x26
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	8e 21       	and	r24, r14
    13d8:	9f 21       	and	r25, r15
    13da:	89 2b       	or	r24, r25
    13dc:	09 f0       	breq	.+2      	; 0x13e0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ce>
		data |= (1 << 1);
    13de:	02 60       	ori	r16, 0x02	; 2

	if(iodata & _d6)
    13e0:	8f a1       	ldd	r24, Y+39	; 0x27
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	8e 21       	and	r24, r14
    13e6:	9f 21       	and	r25, r15
    13e8:	89 2b       	or	r24, r25
    13ea:	09 f0       	breq	.+2      	; 0x13ee <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1dc>
		data |= (1 << 2);
    13ec:	04 60       	ori	r16, 0x04	; 4

	if(iodata & _d7)
    13ee:	88 a5       	ldd	r24, Y+40	; 0x28
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	e8 22       	and	r14, r24
    13f4:	f9 22       	and	r15, r25
    13f6:	ef 28       	or	r14, r15
    13f8:	09 f0       	breq	.+2      	; 0x13fc <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ea>
		data |= (1 << 3);
    13fa:	08 60       	ori	r16, 0x08	; 8

	rval = data;
    13fc:	10 e0       	ldi	r17, 0x00	; 0

returnStatus:

	// try to put gpio port back to all outputs state with WR signal low for writes
	Wire.beginTransmission(_addr);
    13fe:	68 a1       	ldd	r22, Y+32	; 0x20
    1400:	8e ea       	ldi	r24, 0xAE	; 174
    1402:	95 e0       	ldi	r25, 0x05	; 5
    1404:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(_blCurState);		// with E LOW
    1408:	6b a5       	ldd	r22, Y+43	; 0x2b
    140a:	8e ea       	ldi	r24, 0xAE	; 174
    140c:	95 e0       	ldi	r25, 0x05	; 5
    140e:	0e 94 2b 1a 	call	0x3456	; 0x3456 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    1412:	8e ea       	ldi	r24, 0xAE	; 174
    1414:	95 e0       	ldi	r25, 0x05	; 5
    1416:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN7TwoWire15endTransmissionEv>
    141a:	88 23       	and	r24, r24
    141c:	39 f0       	breq	.+14     	; 0x142c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21a>
		rval = hd44780::RV_EIO;
    141e:	8f ef       	ldi	r24, 0xFF	; 255
    1420:	03 c0       	rjmp	.+6      	; 0x1428 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
    1422:	8c ef       	ldi	r24, 0xFC	; 252
    1424:	01 c0       	rjmp	.+2      	; 0x1428 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
	{
		return(hd44780::RV_ENOTSUP);
    1426:	8d ef       	ldi	r24, 0xFD	; 253
    1428:	9f ef       	ldi	r25, 0xFF	; 255
    142a:	01 c0       	rjmp	.+2      	; 0x142e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21c>
    142c:	c8 01       	movw	r24, r16
	Wire.write(_blCurState);		// with E LOW
	if(Wire.endTransmission())
		rval = hd44780::RV_EIO;

	return(rval);
}
    142e:	df 91       	pop	r29
    1430:	cf 91       	pop	r28
    1432:	1f 91       	pop	r17
    1434:	0f 91       	pop	r16
    1436:	ff 90       	pop	r15
    1438:	ef 90       	pop	r14
    143a:	df 90       	pop	r13
    143c:	cf 90       	pop	r12
    143e:	bf 90       	pop	r11
    1440:	af 90       	pop	r10
    1442:	9f 90       	pop	r9
    1444:	8f 90       	pop	r8
    1446:	08 95       	ret

00001448 <_ZN14hd44780_I2Cexp11autocfg8574Ev>:
 * a new resistor to  connect to the base of the transistor.
 * 
 * As a result the SYDZ backpack cannot use autoconfiguration.
 */

int autocfg8574()
    1448:	0f 93       	push	r16
    144a:	1f 93       	push	r17
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	ec 01       	movw	r28, r24
uint8_t data, data2;
uint8_t rs, rw, en, d4, d5, d6, d7, bl, blLevel;

	// First put a 0xff in the output port

	Wire.beginTransmission(_addr);
    1452:	68 a1       	ldd	r22, Y+32	; 0x20
    1454:	8e ea       	ldi	r24, 0xAE	; 174
    1456:	95 e0       	ldi	r25, 0x05	; 5
    1458:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0xff);
    145c:	6f ef       	ldi	r22, 0xFF	; 255
    145e:	8e ea       	ldi	r24, 0xAE	; 174
    1460:	95 e0       	ldi	r25, 0x05	; 5
    1462:	0e 94 2b 1a 	call	0x3456	; 0x3456 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    1466:	8e ea       	ldi	r24, 0xAE	; 174
    1468:	95 e0       	ldi	r25, 0x05	; 5
    146a:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN7TwoWire15endTransmissionEv>

	// now read back from the port

	Wire.requestFrom((int)_addr, 1);
    146e:	68 a1       	ldd	r22, Y+32	; 0x20
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	41 e0       	ldi	r20, 0x01	; 1
    1474:	50 e0       	ldi	r21, 0x00	; 0
    1476:	8e ea       	ldi	r24, 0xAE	; 174
    1478:	95 e0       	ldi	r25, 0x05	; 5
    147a:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    147e:	8e ea       	ldi	r24, 0xAE	; 174
    1480:	95 e0       	ldi	r25, 0x05	; 5
    1482:	0e 94 a4 19 	call	0x3348	; 0x3348 <_ZN7TwoWire4readEv>
    1486:	8c 01       	movw	r16, r24

	// Turn off bit2 to attempt to see if en is bit 2,
	// if it is, it should change all lcd data bits to 1s
	
	Wire.beginTransmission(_addr);
    1488:	68 a1       	ldd	r22, Y+32	; 0x20
    148a:	8e ea       	ldi	r24, 0xAE	; 174
    148c:	95 e0       	ldi	r25, 0x05	; 5
    148e:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) (~(1 << 2)) );
    1492:	6b ef       	ldi	r22, 0xFB	; 251
    1494:	8e ea       	ldi	r24, 0xAE	; 174
    1496:	95 e0       	ldi	r25, 0x05	; 5
    1498:	0e 94 2b 1a 	call	0x3456	; 0x3456 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    149c:	8e ea       	ldi	r24, 0xAE	; 174
    149e:	95 e0       	ldi	r25, 0x05	; 5
    14a0:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN7TwoWire15endTransmissionEv>

	// read back data
	Wire.requestFrom((int)_addr, 1);
    14a4:	68 a1       	ldd	r22, Y+32	; 0x20
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	41 e0       	ldi	r20, 0x01	; 1
    14aa:	50 e0       	ldi	r21, 0x00	; 0
    14ac:	8e ea       	ldi	r24, 0xAE	; 174
    14ae:	95 e0       	ldi	r25, 0x05	; 5
    14b0:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN7TwoWire11requestFromEii>
	data2 = Wire.read();
    14b4:	8e ea       	ldi	r24, 0xAE	; 174
    14b6:	95 e0       	ldi	r25, 0x05	; 5
    14b8:	0e 94 a4 19 	call	0x3348	; 0x3348 <_ZN7TwoWire4readEv>

	// If lower 3 bits are high and all 4 upper bits are high after clearing bit 2
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
    14bc:	98 01       	movw	r18, r16
    14be:	27 70       	andi	r18, 0x07	; 7
    14c0:	33 27       	eor	r19, r19
    14c2:	27 30       	cpi	r18, 0x07	; 7
    14c4:	31 05       	cpc	r19, r1
    14c6:	b1 f4       	brne	.+44     	; 0x14f4 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
    14c8:	80 7f       	andi	r24, 0xF0	; 240
    14ca:	99 27       	eor	r25, r25
    14cc:	80 3f       	cpi	r24, 0xF0	; 240
    14ce:	91 05       	cpc	r25, r1
    14d0:	89 f4       	brne	.+34     	; 0x14f4 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
    14d2:	83 e0       	ldi	r24, 0x03	; 3
    14d4:	16 95       	lsr	r17
    14d6:	07 95       	ror	r16
    14d8:	8a 95       	dec	r24
    14da:	e1 f7       	brne	.-8      	; 0x14d4 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x8c>
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	08 27       	eor	r16, r24
    14e0:	01 70       	andi	r16, 0x01	; 1
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
	{
		rs = 0; rw = 1; en = 2; d4 = 4; d5 = 5; d6 = 6; d7 = 7; bl = 3;
    14e2:	43 e0       	ldi	r20, 0x03	; 3
    14e4:	57 e0       	ldi	r21, 0x07	; 7
    14e6:	66 e0       	ldi	r22, 0x06	; 6
    14e8:	75 e0       	ldi	r23, 0x05	; 5
    14ea:	e4 e0       	ldi	r30, 0x04	; 4
    14ec:	22 e0       	ldi	r18, 0x02	; 2
    14ee:	f1 e0       	ldi	r31, 0x01	; 1
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	34 c0       	rjmp	.+104    	; 0x155c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x114>
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
		}
	}
	else if((data & 0x70) == 0x70)
    14f4:	c8 01       	movw	r24, r16
    14f6:	80 77       	andi	r24, 0x70	; 112
    14f8:	99 27       	eor	r25, r25
    14fa:	80 37       	cpi	r24, 0x70	; 112
    14fc:	91 05       	cpc	r25, r1
    14fe:	09 f0       	breq	.+2      	; 0x1502 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xba>
    1500:	68 c0       	rjmp	.+208    	; 0x15d2 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18a>
		// both use bit 7 for backlight control

		// Turn off the en bit which should change the data bits
		// bit 4 on the mjkdz is en so we try that bit
	
		Wire.beginTransmission(_addr);
    1502:	68 a1       	ldd	r22, Y+32	; 0x20
    1504:	8e ea       	ldi	r24, 0xAE	; 174
    1506:	95 e0       	ldi	r25, 0x05	; 5
    1508:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t) (~(1 << 4)) );
    150c:	6f ee       	ldi	r22, 0xEF	; 239
    150e:	8e ea       	ldi	r24, 0xAE	; 174
    1510:	95 e0       	ldi	r25, 0x05	; 5
    1512:	0e 94 2b 1a 	call	0x3456	; 0x3456 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    1516:	8e ea       	ldi	r24, 0xAE	; 174
    1518:	95 e0       	ldi	r25, 0x05	; 5
    151a:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN7TwoWire15endTransmissionEv>

		// read back data
		Wire.requestFrom((int)_addr, 1);
    151e:	68 a1       	ldd	r22, Y+32	; 0x20
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	41 e0       	ldi	r20, 0x01	; 1
    1524:	50 e0       	ldi	r21, 0x00	; 0
    1526:	8e ea       	ldi	r24, 0xAE	; 174
    1528:	95 e0       	ldi	r25, 0x05	; 5
    152a:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN7TwoWire11requestFromEii>
		data2 = Wire.read();
    152e:	8e ea       	ldi	r24, 0xAE	; 174
    1530:	95 e0       	ldi	r25, 0x05	; 5
    1532:	0e 94 a4 19 	call	0x3348	; 0x3348 <_ZN7TwoWire4readEv>
		// look at data bits and see if they changed
		// if they changed to 0xf, then en was bit 4 and it is mjdkz
		// this will happen since when E is low the LCD is not
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
    1536:	8f 70       	andi	r24, 0x0F	; 15
    1538:	99 27       	eor	r25, r25
    153a:	0f 97       	sbiw	r24, 0x0f	; 15
    153c:	19 f0       	breq	.+6      	; 0x1544 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xfc>
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
		}
		else
		{
			// electrofun LCDXIO
			rs = 4; rw = 5; en = 6; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
    153e:	26 e0       	ldi	r18, 0x06	; 6
    1540:	34 e0       	ldi	r19, 0x04	; 4
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x100>
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
		{
			// mjkdz
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
    1544:	24 e0       	ldi	r18, 0x04	; 4
    1546:	36 e0       	ldi	r19, 0x06	; 6
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
    1548:	00 95       	com	r16
    154a:	00 1f       	adc	r16, r16
    154c:	00 27       	eor	r16, r16
    154e:	00 1f       	adc	r16, r16
    1550:	47 e0       	ldi	r20, 0x07	; 7
    1552:	53 e0       	ldi	r21, 0x03	; 3
    1554:	62 e0       	ldi	r22, 0x02	; 2
    1556:	71 e0       	ldi	r23, 0x01	; 1
    1558:	e0 e0       	ldi	r30, 0x00	; 0
    155a:	f5 e0       	ldi	r31, 0x05	; 5
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	dc 01       	movw	r26, r24
    1562:	01 c0       	rjmp	.+2      	; 0x1566 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11e>
    1564:	aa 0f       	add	r26, r26
    1566:	3a 95       	dec	r19
    1568:	ea f7       	brpl	.-6      	; 0x1564 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11c>
    156a:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
    156c:	dc 01       	movw	r26, r24
    156e:	01 c0       	rjmp	.+2      	; 0x1572 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x12a>
    1570:	aa 0f       	add	r26, r26
    1572:	fa 95       	dec	r31
    1574:	ea f7       	brpl	.-6      	; 0x1570 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x128>
    1576:	ab a3       	std	Y+35, r26	; 0x23
	else
		_rw = 0; // no r/w control

	_en = ( 1 << en );
    1578:	dc 01       	movw	r26, r24
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x138>
    157c:	aa 0f       	add	r26, r26
    157e:	bb 1f       	adc	r27, r27
    1580:	2a 95       	dec	r18
    1582:	e2 f7       	brpl	.-8      	; 0x157c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x134>
    1584:	ac a3       	std	Y+36, r26	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
    1586:	9c 01       	movw	r18, r24
    1588:	01 c0       	rjmp	.+2      	; 0x158c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x144>
    158a:	22 0f       	add	r18, r18
    158c:	ea 95       	dec	r30
    158e:	ea f7       	brpl	.-6      	; 0x158a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x142>
    1590:	2d a3       	std	Y+37, r18	; 0x25
	_d5 = ( 1 << d5 );
    1592:	9c 01       	movw	r18, r24
    1594:	01 c0       	rjmp	.+2      	; 0x1598 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x150>
    1596:	22 0f       	add	r18, r18
    1598:	7a 95       	dec	r23
    159a:	ea f7       	brpl	.-6      	; 0x1596 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x14e>
    159c:	2e a3       	std	Y+38, r18	; 0x26
	_d6 = ( 1 << d6 );
    159e:	9c 01       	movw	r18, r24
    15a0:	01 c0       	rjmp	.+2      	; 0x15a4 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15c>
    15a2:	22 0f       	add	r18, r18
    15a4:	6a 95       	dec	r22
    15a6:	ea f7       	brpl	.-6      	; 0x15a2 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15a>
    15a8:	2f a3       	std	Y+39, r18	; 0x27
	_d7 = ( 1 << d7 );   
    15aa:	9c 01       	movw	r18, r24
    15ac:	01 c0       	rjmp	.+2      	; 0x15b0 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x168>
    15ae:	22 0f       	add	r18, r18
    15b0:	5a 95       	dec	r21
    15b2:	ea f7       	brpl	.-6      	; 0x15ae <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x166>
    15b4:	28 a7       	std	Y+40, r18	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
    15b6:	01 c0       	rjmp	.+2      	; 0x15ba <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x172>
    15b8:	88 0f       	add	r24, r24
    15ba:	4a 95       	dec	r20
    15bc:	ea f7       	brpl	.-6      	; 0x15b8 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x170>
    15be:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
    15c0:	0a a7       	std	Y+42, r16	; 0x2a
	// set default bl state to backlight on
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
    15c2:	01 30       	cpi	r16, 0x01	; 1
    15c4:	11 f4       	brne	.+4      	; 0x15ca <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x182>
		_blCurState = _bl;
    15c6:	8b a7       	std	Y+43, r24	; 0x2b
    15c8:	01 c0       	rjmp	.+2      	; 0x15cc <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x184>
	else
		_blCurState = 0;
    15ca:	1b a6       	std	Y+43, r1	; 0x2b
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18e>
		}
	}
	else
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
    15d2:	8d ef       	ldi	r24, 0xFD	; 253
    15d4:	9f ef       	ldi	r25, 0xFF	; 255
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	1f 91       	pop	r17
    15dc:	0f 91       	pop	r16
    15de:	08 95       	ret

000015e0 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>:
 * if GP1 is low then the board is the BOARD_XXX board
 * The BOARD_XXX may not work as GP1 is used for D5 on WIDEHK and LCDPLUG
 *
 *
 */
int autocfgMCP23008()
    15e0:	cf 93       	push	r28
    15e2:	df 93       	push	r29
    15e4:	ec 01       	movw	r28, r24

	/*
	 * Now set up output port
	 * Make no assumptions as to the state of IOCON BYTE mode
	 */
	Wire.beginTransmission(_addr);
    15e6:	68 a1       	ldd	r22, Y+32	; 0x20
    15e8:	8e ea       	ldi	r24, 0xAE	; 174
    15ea:	95 e0       	ldi	r25, 0x05	; 5
    15ec:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t)0); // point to IODIR
    15f0:	60 e0       	ldi	r22, 0x00	; 0
    15f2:	8e ea       	ldi	r24, 0xAE	; 174
    15f4:	95 e0       	ldi	r25, 0x05	; 5
    15f6:	0e 94 2b 1a 	call	0x3456	; 0x3456 <_ZN7TwoWire5writeEh>
	Wire.write(0xff); // all pins inputs
    15fa:	6f ef       	ldi	r22, 0xFF	; 255
    15fc:	70 e0       	ldi	r23, 0x00	; 0
    15fe:	8e ea       	ldi	r24, 0xAE	; 174
    1600:	95 e0       	ldi	r25, 0x05	; 5
    1602:	0e 94 91 02 	call	0x522	; 0x522 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    1606:	8e ea       	ldi	r24, 0xAE	; 174
    1608:	95 e0       	ldi	r25, 0x05	; 5
    160a:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN7TwoWire15endTransmissionEv>

	Wire.beginTransmission(_addr);
    160e:	68 a1       	ldd	r22, Y+32	; 0x20
    1610:	8e ea       	ldi	r24, 0xAE	; 174
    1612:	95 e0       	ldi	r25, 0x05	; 5
    1614:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(6); // point to GPPU
    1618:	66 e0       	ldi	r22, 0x06	; 6
    161a:	70 e0       	ldi	r23, 0x00	; 0
    161c:	8e ea       	ldi	r24, 0xAE	; 174
    161e:	95 e0       	ldi	r25, 0x05	; 5
    1620:	0e 94 91 02 	call	0x522	; 0x522 <_ZN7TwoWire5writeEi>
	Wire.write(0xff); // turn on pullups
    1624:	6f ef       	ldi	r22, 0xFF	; 255
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	8e ea       	ldi	r24, 0xAE	; 174
    162a:	95 e0       	ldi	r25, 0x05	; 5
    162c:	0e 94 91 02 	call	0x522	; 0x522 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    1630:	8e ea       	ldi	r24, 0xAE	; 174
    1632:	95 e0       	ldi	r25, 0x05	; 5
    1634:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN7TwoWire15endTransmissionEv>

	/*
	 * read from the GPIO port
	 */

	Wire.beginTransmission(_addr);
    1638:	68 a1       	ldd	r22, Y+32	; 0x20
    163a:	8e ea       	ldi	r24, 0xAE	; 174
    163c:	95 e0       	ldi	r25, 0x05	; 5
    163e:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(9); // point to GPIO
    1642:	69 e0       	ldi	r22, 0x09	; 9
    1644:	70 e0       	ldi	r23, 0x00	; 0
    1646:	8e ea       	ldi	r24, 0xAE	; 174
    1648:	95 e0       	ldi	r25, 0x05	; 5
    164a:	0e 94 91 02 	call	0x522	; 0x522 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    164e:	8e ea       	ldi	r24, 0xAE	; 174
    1650:	95 e0       	ldi	r25, 0x05	; 5
    1652:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom((int)_addr, 1);
    1656:	68 a1       	ldd	r22, Y+32	; 0x20
    1658:	70 e0       	ldi	r23, 0x00	; 0
    165a:	41 e0       	ldi	r20, 0x01	; 1
    165c:	50 e0       	ldi	r21, 0x00	; 0
    165e:	8e ea       	ldi	r24, 0xAE	; 174
    1660:	95 e0       	ldi	r25, 0x05	; 5
    1662:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    1666:	8e ea       	ldi	r24, 0xAE	; 174
    1668:	95 e0       	ldi	r25, 0x05	; 5
    166a:	0e 94 a4 19 	call	0x3348	; 0x3348 <_ZN7TwoWire4readEv>

	blLevel = HIGH; // known boards are active HIGH bl

	if(data == 0x7f) // bit 7 low, and other control and data lines high
    166e:	8f 37       	cpi	r24, 0x7F	; 127
    1670:	61 f0       	breq	.+24     	; 0x168a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xaa>
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
    1672:	86 ff       	sbrs	r24, 6
    1674:	12 c0       	rjmp	.+36     	; 0x169a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xba>
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
    1676:	81 fd       	sbrc	r24, 1
    1678:	4c c0       	rjmp	.+152    	; 0x1712 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x132>
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
		bl = 1;
    167a:	21 e0       	ldi	r18, 0x01	; 1
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
    167c:	32 e0       	ldi	r19, 0x02	; 2
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
    167e:	43 e0       	ldi	r20, 0x03	; 3
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
    1680:	54 e0       	ldi	r21, 0x04	; 4
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
    1682:	65 e0       	ldi	r22, 0x05	; 5
	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
    1684:	76 e0       	ldi	r23, 0x06	; 6
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
    1686:	e7 e0       	ldi	r30, 0x07	; 7
    1688:	0f c0       	rjmp	.+30     	; 0x16a8 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;
    168a:	27 e0       	ldi	r18, 0x07	; 7
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
    168c:	36 e0       	ldi	r19, 0x06	; 6
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
    168e:	45 e0       	ldi	r20, 0x05	; 5
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
    1690:	54 e0       	ldi	r21, 0x04	; 4
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
    1692:	63 e0       	ldi	r22, 0x03	; 3
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
    1694:	72 e0       	ldi	r23, 0x02	; 2

	if(data == 0x7f) // bit 7 low, and other control and data lines high
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
    1696:	e1 e0       	ldi	r30, 0x01	; 1
    1698:	07 c0       	rjmp	.+14     	; 0x16a8 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;
    169a:	26 e0       	ldi	r18, 0x06	; 6
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
    169c:	33 e0       	ldi	r19, 0x03	; 3
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
    169e:	42 e0       	ldi	r20, 0x02	; 2
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
    16a0:	51 e0       	ldi	r21, 0x01	; 1
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
    16a2:	60 e0       	ldi	r22, 0x00	; 0
	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
    16a4:	77 e0       	ldi	r23, 0x07	; 7
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
    16a6:	e4 e0       	ldi	r30, 0x04	; 4
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	dc 01       	movw	r26, r24
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd4>
    16b0:	aa 0f       	add	r26, r26
    16b2:	bb 1f       	adc	r27, r27
    16b4:	ea 95       	dec	r30
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd0>
    16b8:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
	else
		_rw = 0; // no r/w control
    16ba:	1b a2       	std	Y+35, r1	; 0x23

	_en = ( 1 << en );
    16bc:	fc 01       	movw	r30, r24
    16be:	01 c0       	rjmp	.+2      	; 0x16c2 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe2>
    16c0:	ee 0f       	add	r30, r30
    16c2:	7a 95       	dec	r23
    16c4:	ea f7       	brpl	.-6      	; 0x16c0 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe0>
    16c6:	ec a3       	std	Y+36, r30	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
    16c8:	fc 01       	movw	r30, r24
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xf0>
    16cc:	ee 0f       	add	r30, r30
    16ce:	ff 1f       	adc	r31, r31
    16d0:	6a 95       	dec	r22
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xec>
    16d4:	ed a3       	std	Y+37, r30	; 0x25
	_d5 = ( 1 << d5 );
    16d6:	bc 01       	movw	r22, r24
    16d8:	01 c0       	rjmp	.+2      	; 0x16dc <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfc>
    16da:	66 0f       	add	r22, r22
    16dc:	5a 95       	dec	r21
    16de:	ea f7       	brpl	.-6      	; 0x16da <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfa>
    16e0:	6e a3       	std	Y+38, r22	; 0x26
	_d6 = ( 1 << d6 );
    16e2:	bc 01       	movw	r22, r24
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x10a>
    16e6:	66 0f       	add	r22, r22
    16e8:	77 1f       	adc	r23, r23
    16ea:	4a 95       	dec	r20
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x106>
    16ee:	6f a3       	std	Y+39, r22	; 0x27
	_d7 = ( 1 << d7 );   
    16f0:	ac 01       	movw	r20, r24
    16f2:	01 c0       	rjmp	.+2      	; 0x16f6 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x116>
    16f4:	44 0f       	add	r20, r20
    16f6:	3a 95       	dec	r19
    16f8:	ea f7       	brpl	.-6      	; 0x16f4 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x114>
    16fa:	48 a7       	std	Y+40, r20	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
    16fc:	01 c0       	rjmp	.+2      	; 0x1700 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x120>
    16fe:	88 0f       	add	r24, r24
    1700:	2a 95       	dec	r18
    1702:	ea f7       	brpl	.-6      	; 0x16fe <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x11e>
    1704:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
    1706:	91 e0       	ldi	r25, 0x01	; 1
    1708:	9a a7       	std	Y+42, r25	; 0x2a
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
		_blCurState = _bl;
    170a:	8b a7       	std	Y+43, r24	; 0x2b
		// could not identify board
		return(hd44780::RV_ENOTSUP);
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x136>

	}
	else
	{
		// could not identify board
		return(hd44780::RV_ENOTSUP);
    1712:	8d ef       	ldi	r24, 0xFD	; 253
    1714:	9f ef       	ldi	r25, 0xFF	; 255
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	08 95       	ret

0000171c <_ZN14hd44780_I2Cexp6ioinitEv>:
// Returns non zero if initialization failed.
//
// can't be used from constructors because not everything is initalized yet.
// (maybe interrupts or other library constructors)
// if Wire library is used in constructor, it will hang.
int ioinit()
    171c:	1f 93       	push	r17
    171e:	cf 93       	push	r28
    1720:	df 93       	push	r29
    1722:	ec 01       	movw	r28, r24
	 * I believe that it is unreasonable to require the the user
	 * sketch code to do it, because all that should change between
	 * hd44780 i/o interfaces should be the constructor
	 * So we go ahead and call it here.
	 */
	Wire.begin();
    1724:	8e ea       	ldi	r24, 0xAE	; 174
    1726:	95 e0       	ldi	r25, 0x05	; 5
    1728:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <_ZN7TwoWire5beginEv>

	// auto locate i2c expander and magically detect pin mappings

	if(!_addr) // locate next instance
    172c:	68 a1       	ldd	r22, Y+32	; 0x20
    172e:	61 11       	cpse	r22, r1
    1730:	0a c0       	rjmp	.+20     	; 0x1746 <_ZN14hd44780_I2Cexp6ioinitEv+0x2a>
	{
		_addr = LocateDevice(AutoInst++);
    1732:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    1736:	91 e0       	ldi	r25, 0x01	; 1
    1738:	98 0f       	add	r25, r24
    173a:	90 93 3f 05 	sts	0x053F, r25	; 0x80053f <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    173e:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.2>
    1742:	88 a3       	std	Y+32, r24	; 0x20
    1744:	0d c0       	rjmp	.+26     	; 0x1760 <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
	}
	else
	{
		// check to see if device at specified address is really there
		Wire.beginTransmission(_addr);
    1746:	8e ea       	ldi	r24, 0xAE	; 174
    1748:	95 e0       	ldi	r25, 0x05	; 5
    174a:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_ZN7TwoWire17beginTransmissionEh>
		if(Wire.endTransmission())
    174e:	8e ea       	ldi	r24, 0xAE	; 174
    1750:	95 e0       	ldi	r25, 0x05	; 5
    1752:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN7TwoWire15endTransmissionEv>
    1756:	88 23       	and	r24, r24
    1758:	19 f0       	breq	.+6      	; 0x1760 <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
			return(hd44780::RV_ENXIO);
    175a:	8c ef       	ldi	r24, 0xFC	; 252
    175c:	9f ef       	ldi	r25, 0xFF	; 255
    175e:	a7 c0       	rjmp	.+334    	; 0x18ae <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	}

	if(!_addr) // locate next instance
    1760:	88 a1       	ldd	r24, Y+32	; 0x20
    1762:	81 11       	cpse	r24, r1
    1764:	09 c0       	rjmp	.+18     	; 0x1778 <_ZN14hd44780_I2Cexp6ioinitEv+0x5c>
		_addr = LocateDevice(AutoInst++);
    1766:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    176a:	91 e0       	ldi	r25, 0x01	; 1
    176c:	98 0f       	add	r25, r24
    176e:	90 93 3f 05 	sts	0x053F, r25	; 0x80053f <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    1772:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.2>
    1776:	88 a3       	std	Y+32, r24	; 0x20

	if(!_addr) // if we couldn't locate it, return error
    1778:	18 a1       	ldd	r17, Y+32	; 0x20
    177a:	11 23       	and	r17, r17
    177c:	71 f3       	breq	.-36     	; 0x175a <_ZN14hd44780_I2Cexp6ioinitEv+0x3e>
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
    177e:	89 a1       	ldd	r24, Y+33	; 0x21
    1780:	88 23       	and	r24, r24
    1782:	c1 f1       	breq	.+112    	; 0x17f4 <_ZN14hd44780_I2Cexp6ioinitEv+0xd8>
			return(status);
	}

	// initialize IO expander chip

	Wire.beginTransmission(_addr);
    1784:	68 a1       	ldd	r22, Y+32	; 0x20
    1786:	8e ea       	ldi	r24, 0xAE	; 174
    1788:	95 e0       	ldi	r25, 0x05	; 5
    178a:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_ZN7TwoWire17beginTransmissionEh>

	if(_expType == I2Cexp_MCP23008)
    178e:	89 a1       	ldd	r24, Y+33	; 0x21
    1790:	82 30       	cpi	r24, 0x02	; 2
    1792:	09 f0       	breq	.+2      	; 0x1796 <_ZN14hd44780_I2Cexp6ioinitEv+0x7a>
    1794:	76 c0       	rjmp	.+236    	; 0x1882 <_ZN14hd44780_I2Cexp6ioinitEv+0x166>
		 * within the same i2c connection by simply sending more bytes.
		 * This is necessary as the code uses back to back writes to perform
		 * the nibble updates as well as the toggling the enable signal.
		 * This methodology offers significant performance gains.
		 */
		Wire.write(5);	// point to IOCON
    1796:	65 e0       	ldi	r22, 0x05	; 5
    1798:	70 e0       	ldi	r23, 0x00	; 0
    179a:	8e ea       	ldi	r24, 0xAE	; 174
    179c:	95 e0       	ldi	r25, 0x05	; 5
    179e:	0e 94 91 02 	call	0x522	; 0x522 <_ZN7TwoWire5writeEi>
		Wire.write(0x20);// disable sequential mode (enables BYTE mode)
    17a2:	60 e2       	ldi	r22, 0x20	; 32
    17a4:	70 e0       	ldi	r23, 0x00	; 0
    17a6:	8e ea       	ldi	r24, 0xAE	; 174
    17a8:	95 e0       	ldi	r25, 0x05	; 5
    17aa:	0e 94 91 02 	call	0x522	; 0x522 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    17ae:	8e ea       	ldi	r24, 0xAE	; 174
    17b0:	95 e0       	ldi	r25, 0x05	; 5
    17b2:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN7TwoWire15endTransmissionEv>

		/*
		 * Now set up output port
		 */
		Wire.beginTransmission(_addr);
    17b6:	68 a1       	ldd	r22, Y+32	; 0x20
    17b8:	8e ea       	ldi	r24, 0xAE	; 174
    17ba:	95 e0       	ldi	r25, 0x05	; 5
    17bc:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t)0); // point to IODIR
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	8e ea       	ldi	r24, 0xAE	; 174
    17c4:	95 e0       	ldi	r25, 0x05	; 5
    17c6:	0e 94 2b 1a 	call	0x3456	; 0x3456 <_ZN7TwoWire5writeEh>
		Wire.write((uint8_t)0); // all pins output
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	8e ea       	ldi	r24, 0xAE	; 174
    17ce:	95 e0       	ldi	r25, 0x05	; 5
    17d0:	0e 94 2b 1a 	call	0x3456	; 0x3456 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    17d4:	8e ea       	ldi	r24, 0xAE	; 174
    17d6:	95 e0       	ldi	r25, 0x05	; 5
    17d8:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN7TwoWire15endTransmissionEv>
	
		/*
		 * point chip to GPIO
		 */
		Wire.beginTransmission(_addr);
    17dc:	68 a1       	ldd	r22, Y+32	; 0x20
    17de:	8e ea       	ldi	r24, 0xAE	; 174
    17e0:	95 e0       	ldi	r25, 0x05	; 5
    17e2:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write(9); // point to GPIO
    17e6:	69 e0       	ldi	r22, 0x09	; 9
    17e8:	70 e0       	ldi	r23, 0x00	; 0
    17ea:	8e ea       	ldi	r24, 0xAE	; 174
    17ec:	95 e0       	ldi	r25, 0x05	; 5
    17ee:	0e 94 91 02 	call	0x522	; 0x522 <_ZN7TwoWire5writeEi>
    17f2:	47 c0       	rjmp	.+142    	; 0x1882 <_ZN14hd44780_I2Cexp6ioinitEv+0x166>

	/*
	 * First try to write 0xff to MCP23008 IODIR
	 * On a PCF8574 this will end up writing 0 and then ff to output port
	 */
	Wire.beginTransmission(address);
    17f4:	61 2f       	mov	r22, r17
    17f6:	8e ea       	ldi	r24, 0xAE	; 174
    17f8:	95 e0       	ldi	r25, 0x05	; 5
    17fa:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	8e ea       	ldi	r24, 0xAE	; 174
    1802:	95 e0       	ldi	r25, 0x05	; 5
    1804:	0e 94 2b 1a 	call	0x3456	; 0x3456 <_ZN7TwoWire5writeEh>
	Wire.write((uint8_t) 0xff);	// try to write to MCP23008 IODR
    1808:	6f ef       	ldi	r22, 0xFF	; 255
    180a:	8e ea       	ldi	r24, 0xAE	; 174
    180c:	95 e0       	ldi	r25, 0x05	; 5
    180e:	0e 94 2b 1a 	call	0x3456	; 0x3456 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    1812:	8e ea       	ldi	r24, 0xAE	; 174
    1814:	95 e0       	ldi	r25, 0x05	; 5
    1816:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now try to point MCP23008 to IODIR for read
	 * On a PCF8574 this will end up writing a 0 to the output port
	 */

	Wire.beginTransmission(address);
    181a:	61 2f       	mov	r22, r17
    181c:	8e ea       	ldi	r24, 0xAE	; 174
    181e:	95 e0       	ldi	r25, 0x05	; 5
    1820:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
    1824:	60 e0       	ldi	r22, 0x00	; 0
    1826:	8e ea       	ldi	r24, 0xAE	; 174
    1828:	95 e0       	ldi	r25, 0x05	; 5
    182a:	0e 94 2b 1a 	call	0x3456	; 0x3456 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    182e:	8e ea       	ldi	r24, 0xAE	; 174
    1830:	95 e0       	ldi	r25, 0x05	; 5
    1832:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now read a byte
	 * On a MCP23008 we should read the 0xff we wrote to IODIR
	 * On a PCF8574 we should read 0 since the output port was set to 0
	 */
	Wire.requestFrom((int)address, 1);
    1836:	61 2f       	mov	r22, r17
    1838:	70 e0       	ldi	r23, 0x00	; 0
    183a:	41 e0       	ldi	r20, 0x01	; 1
    183c:	50 e0       	ldi	r21, 0x00	; 0
    183e:	8e ea       	ldi	r24, 0xAE	; 174
    1840:	95 e0       	ldi	r25, 0x05	; 5
    1842:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    1846:	8e ea       	ldi	r24, 0xAE	; 174
    1848:	95 e0       	ldi	r25, 0x05	; 5
    184a:	0e 94 a4 19 	call	0x3348	; 0x3348 <_ZN7TwoWire4readEv>
    184e:	9c 01       	movw	r18, r24

	if(data == 0xff)
    1850:	8f 3f       	cpi	r24, 0xFF	; 255
    1852:	91 05       	cpc	r25, r1
    1854:	29 f0       	breq	.+10     	; 0x1860 <_ZN14hd44780_I2Cexp6ioinitEv+0x144>
	{
		chiptype = I2Cexp_MCP23008;
    1856:	91 e0       	ldi	r25, 0x01	; 1
    1858:	23 2b       	or	r18, r19
    185a:	19 f0       	breq	.+6      	; 0x1862 <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	01 c0       	rjmp	.+2      	; 0x1862 <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    1860:	92 e0       	ldi	r25, 0x02	; 2
	if(!_addr) // if we couldn't locate it, return error
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);
    1862:	99 a3       	std	Y+33, r25	; 0x21

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
    1864:	99 23       	and	r25, r25
    1866:	09 f1       	breq	.+66     	; 0x18aa <_ZN14hd44780_I2Cexp6ioinitEv+0x18e>
			return(hd44780::RV_EIO);

		if(_expType == I2Cexp_PCF8574)
    1868:	91 30       	cpi	r25, 0x01	; 1
    186a:	21 f4       	brne	.+8      	; 0x1874 <_ZN14hd44780_I2Cexp6ioinitEv+0x158>
			status = autocfg8574();		// go auto configure the pin mappings
    186c:	ce 01       	movw	r24, r28
    186e:	0e 94 24 0a 	call	0x1448	; 0x1448 <_ZN14hd44780_I2Cexp11autocfg8574Ev>
    1872:	03 c0       	rjmp	.+6      	; 0x187a <_ZN14hd44780_I2Cexp6ioinitEv+0x15e>
		else
			status = autocfgMCP23008();	// go auto configure the pin mappings
    1874:	ce 01       	movw	r24, r28
    1876:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>
		if(status)
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	09 f4       	brne	.+2      	; 0x1880 <_ZN14hd44780_I2Cexp6ioinitEv+0x164>
    187e:	82 cf       	rjmp	.-252    	; 0x1784 <_ZN14hd44780_I2Cexp6ioinitEv+0x68>
    1880:	16 c0       	rjmp	.+44     	; 0x18ae <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
		 */
		Wire.beginTransmission(_addr);
		Wire.write(9); // point to GPIO
		
	}
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	8e ea       	ldi	r24, 0xAE	; 174
    1886:	95 e0       	ldi	r25, 0x05	; 5
    1888:	0e 94 2b 1a 	call	0x3456	; 0x3456 <_ZN7TwoWire5writeEh>
	if( (status = Wire.endTransmission()) ) // assignment
    188c:	8e ea       	ldi	r24, 0xAE	; 174
    188e:	95 e0       	ldi	r25, 0x05	; 5
    1890:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN7TwoWire15endTransmissionEv>
    1894:	21 e0       	ldi	r18, 0x01	; 1
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	81 11       	cpse	r24, r1
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <_ZN14hd44780_I2Cexp6ioinitEv+0x184>
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	88 27       	eor	r24, r24
    18a2:	99 27       	eor	r25, r25
    18a4:	82 1b       	sub	r24, r18
    18a6:	93 0b       	sbc	r25, r19
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
			return(hd44780::RV_EIO);
    18aa:	8f ef       	ldi	r24, 0xFF	; 255
    18ac:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
	if( (status = Wire.endTransmission()) ) // assignment
		status = hd44780::RV_EIO;

	return ( status );
}
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	1f 91       	pop	r17
    18b4:	08 95       	ret

000018b6 <_Z7readGPSv>:
{
	duration++;
}

boolean readGPS()
{
    18b6:	4f 92       	push	r4
    18b8:	5f 92       	push	r5
    18ba:	6f 92       	push	r6
    18bc:	7f 92       	push	r7
    18be:	8f 92       	push	r8
    18c0:	9f 92       	push	r9
    18c2:	af 92       	push	r10
    18c4:	bf 92       	push	r11
    18c6:	cf 92       	push	r12
    18c8:	df 92       	push	r13
    18ca:	ef 92       	push	r14
    18cc:	ff 92       	push	r15
    18ce:	0f 93       	push	r16
    18d0:	1f 93       	push	r17
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	2c 97       	sbiw	r28, 0x0c	; 12
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	f8 94       	cli
    18e0:	de bf       	out	0x3e, r29	; 62
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	cd bf       	out	0x3d, r28	; 61
	while(Serial1.available()) {							// as long as data is available on NMEA device
		unsigned char c =  buffer[count] = Serial1.read();	// write data into array
		Serial.write(c);									// and write data to PC (Serial)
		if(count < BUFFERSIZE-1) count++;					// to avoid buffer overflow
		if(c == '$') {
			ptr = buffer;
    18e6:	2e ea       	ldi	r18, 0xAE	; 174
    18e8:	c2 2e       	mov	r12, r18
    18ea:	23 e0       	ldi	r18, 0x03	; 3
    18ec:	d2 2e       	mov	r13, r18
			while(ptr < buffer + BUFFERSIZE)  *ptr++=0;		// fill with 0
			count = 0;										// start of frame found, reset buffer
			buffer[count++] = c;							// store start of frame
    18ee:	ee 24       	eor	r14, r14
    18f0:	e3 94       	inc	r14
    18f2:	34 e2       	ldi	r19, 0x24	; 36
    18f4:	b3 2e       	mov	r11, r19

boolean readGPS()
{
	boolean getData = false;
	long tempLong;
	while(Serial1.available()) {							// as long as data is available on NMEA device
    18f6:	85 e5       	ldi	r24, 0x55	; 85
    18f8:	96 e0       	ldi	r25, 0x06	; 6
    18fa:	0e 94 67 1e 	call	0x3cce	; 0x3cce <_ZN14HardwareSerial9availableEv>
    18fe:	89 2b       	or	r24, r25
    1900:	d1 f1       	breq	.+116    	; 0x1976 <_Z7readGPSv+0xc0>
		unsigned char c =  buffer[count] = Serial1.read();	// write data into array
    1902:	00 91 ad 03 	lds	r16, 0x03AD	; 0x8003ad <count>
    1906:	10 e0       	ldi	r17, 0x00	; 0
    1908:	85 e5       	ldi	r24, 0x55	; 85
    190a:	96 e0       	ldi	r25, 0x06	; 6
    190c:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <_ZN14HardwareSerial4readEv>
    1910:	f8 2e       	mov	r15, r24
    1912:	f8 01       	movw	r30, r16
    1914:	e2 55       	subi	r30, 0x52	; 82
    1916:	fc 4f       	sbci	r31, 0xFC	; 252
    1918:	80 83       	st	Z, r24
		Serial.write(c);									// and write data to PC (Serial)
    191a:	68 2f       	mov	r22, r24
    191c:	84 e0       	ldi	r24, 0x04	; 4
    191e:	96 e0       	ldi	r25, 0x06	; 6
    1920:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <_ZN7Serial_5writeEh>
		if(count < BUFFERSIZE-1) count++;					// to avoid buffer overflow
    1924:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <count>
    1928:	85 34       	cpi	r24, 0x45	; 69
    192a:	18 f4       	brcc	.+6      	; 0x1932 <_Z7readGPSv+0x7c>
    192c:	8f 5f       	subi	r24, 0xFF	; 255
    192e:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <count>
		if(c == '$') {
    1932:	84 e2       	ldi	r24, 0x24	; 36
    1934:	f8 12       	cpse	r15, r24
    1936:	19 c0       	rjmp	.+50     	; 0x196a <_Z7readGPSv+0xb4>
			ptr = buffer;
    1938:	d0 92 ac 03 	sts	0x03AC, r13	; 0x8003ac <ptr+0x1>
    193c:	c0 92 ab 03 	sts	0x03AB, r12	; 0x8003ab <ptr>
			while(ptr < buffer + BUFFERSIZE)  *ptr++=0;		// fill with 0
    1940:	e0 91 ab 03 	lds	r30, 0x03AB	; 0x8003ab <ptr>
    1944:	f0 91 ac 03 	lds	r31, 0x03AC	; 0x8003ac <ptr+0x1>
    1948:	83 e0       	ldi	r24, 0x03	; 3
    194a:	e4 3f       	cpi	r30, 0xF4	; 244
    194c:	f8 07       	cpc	r31, r24
    194e:	40 f4       	brcc	.+16     	; 0x1960 <_Z7readGPSv+0xaa>
    1950:	cf 01       	movw	r24, r30
    1952:	01 96       	adiw	r24, 0x01	; 1
    1954:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <ptr+0x1>
    1958:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <ptr>
    195c:	10 82       	st	Z, r1
    195e:	f0 cf       	rjmp	.-32     	; 0x1940 <_Z7readGPSv+0x8a>
			count = 0;										// start of frame found, reset buffer
			buffer[count++] = c;							// store start of frame
    1960:	e0 92 ad 03 	sts	0x03AD, r14	; 0x8003ad <count>
    1964:	b0 92 ae 03 	sts	0x03AE, r11	; 0x8003ae <buffer>
    1968:	c6 cf       	rjmp	.-116    	; 0x18f6 <_Z7readGPSv+0x40>
		}
		if(c == '*') {										// end of frame found, start conversion
    196a:	ea e2       	ldi	r30, 0x2A	; 42
    196c:	fe 12       	cpse	r15, r30
    196e:	c3 cf       	rjmp	.-122    	; 0x18f6 <_Z7readGPSv+0x40>
			frame = 1;
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <frame>
	}
	
	
	//GPRMC,hhmmss.sss,A,ddmm.mmmm,N,ddmm.mmmm,E,0.51,193.93,ddmmyy
	
	if(frame) {												// full frame in buffer, so parse and decode
    1976:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <frame>
    197a:	81 11       	cpse	r24, r1
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <_Z7readGPSv+0xcc>
	duration++;
}

boolean readGPS()
{
	boolean getData = false;
    197e:	10 e0       	ldi	r17, 0x00	; 0
    1980:	0d c1       	rjmp	.+538    	; 0x1b9c <_Z7readGPSv+0x2e6>
	
	
	//GPRMC,hhmmss.sss,A,ddmm.mmmm,N,ddmm.mmmm,E,0.51,193.93,ddmmyy
	
	if(frame) {												// full frame in buffer, so parse and decode
		frame = 0;
    1982:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <frame>
		ptr = strstr(buffer, NMEA_TIME);					// scan for GPRMC keyword
    1986:	68 e2       	ldi	r22, 0x28	; 40
    1988:	72 e0       	ldi	r23, 0x02	; 2
    198a:	8e ea       	ldi	r24, 0xAE	; 174
    198c:	93 e0       	ldi	r25, 0x03	; 3
    198e:	0e 94 89 2e 	call	0x5d12	; 0x5d12 <strstr>
		if(ptr != NULL) {
    1992:	00 97       	sbiw	r24, 0x00	; 0
    1994:	29 f4       	brne	.+10     	; 0x19a0 <_Z7readGPSv+0xea>
	
	//GPRMC,hhmmss.sss,A,ddmm.mmmm,N,ddmm.mmmm,E,0.51,193.93,ddmmyy
	
	if(frame) {												// full frame in buffer, so parse and decode
		frame = 0;
		ptr = strstr(buffer, NMEA_TIME);					// scan for GPRMC keyword
    1996:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <ptr+0x1>
    199a:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <ptr>
    199e:	ef cf       	rjmp	.-34     	; 0x197e <_Z7readGPSv+0xc8>
		if(ptr != NULL) {
			//buffer;											// GPRMC keyword found, read time
			ptr += strlen(NMEA_TIME);
    19a0:	8c 01       	movw	r16, r24
    19a2:	0a 5f       	subi	r16, 0xFA	; 250
    19a4:	1f 4f       	sbci	r17, 0xFF	; 255
    19a6:	10 93 ac 03 	sts	0x03AC, r17	; 0x8003ac <ptr+0x1>
    19aa:	00 93 ab 03 	sts	0x03AB, r16	; 0x8003ab <ptr>
			tempLong = atol(ptr);									// parse time value into hour, minute, second
    19ae:	c8 01       	movw	r24, r16
    19b0:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <atol>
    19b4:	2b 01       	movw	r4, r22
    19b6:	3c 01       	movw	r6, r24
			zeitLocal.ss_ = tempLong % 100;
    19b8:	84 e6       	ldi	r24, 0x64	; 100
    19ba:	c8 2e       	mov	r12, r24
    19bc:	d1 2c       	mov	r13, r1
    19be:	e1 2c       	mov	r14, r1
    19c0:	f1 2c       	mov	r15, r1
    19c2:	c3 01       	movw	r24, r6
    19c4:	b2 01       	movw	r22, r4
    19c6:	a7 01       	movw	r20, r14
    19c8:	96 01       	movw	r18, r12
    19ca:	0e 94 2d 2c 	call	0x585a	; 0x585a <__divmodsi4>
    19ce:	70 93 82 03 	sts	0x0382, r23	; 0x800382 <zeitLocal+0x5>
    19d2:	60 93 81 03 	sts	0x0381, r22	; 0x800381 <zeitLocal+0x4>
			zeitLocal.mm_ = (tempLong / 100) % 100;
    19d6:	ca 01       	movw	r24, r20
    19d8:	b9 01       	movw	r22, r18
    19da:	a7 01       	movw	r20, r14
    19dc:	96 01       	movw	r18, r12
    19de:	0e 94 2d 2c 	call	0x585a	; 0x585a <__divmodsi4>
    19e2:	70 93 80 03 	sts	0x0380, r23	; 0x800380 <zeitLocal+0x3>
    19e6:	60 93 7f 03 	sts	0x037F, r22	; 0x80037f <zeitLocal+0x2>
			zeitLocal.hh_ = ((tempLong / 10000) + TIMEZONE) % 24;	
    19ea:	90 e1       	ldi	r25, 0x10	; 16
    19ec:	89 2e       	mov	r8, r25
    19ee:	97 e2       	ldi	r25, 0x27	; 39
    19f0:	99 2e       	mov	r9, r25
    19f2:	a1 2c       	mov	r10, r1
    19f4:	b1 2c       	mov	r11, r1
    19f6:	c3 01       	movw	r24, r6
    19f8:	b2 01       	movw	r22, r4
    19fa:	a5 01       	movw	r20, r10
    19fc:	94 01       	movw	r18, r8
    19fe:	0e 94 2d 2c 	call	0x585a	; 0x585a <__divmodsi4>
    1a02:	ca 01       	movw	r24, r20
    1a04:	b9 01       	movw	r22, r18
    1a06:	6f 5f       	subi	r22, 0xFF	; 255
    1a08:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a0e:	28 e1       	ldi	r18, 0x18	; 24
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	40 e0       	ldi	r20, 0x00	; 0
    1a14:	50 e0       	ldi	r21, 0x00	; 0
    1a16:	0e 94 2d 2c 	call	0x585a	; 0x585a <__divmodsi4>
    1a1a:	70 93 7e 03 	sts	0x037E, r23	; 0x80037e <zeitLocal+0x1>
    1a1e:	60 93 7d 03 	sts	0x037D, r22	; 0x80037d <zeitLocal>
			
			getData = true;
			
			String buf = String(ptr);
    1a22:	b8 01       	movw	r22, r16
    1a24:	ce 01       	movw	r24, r28
    1a26:	07 96       	adiw	r24, 0x07	; 7
    1a28:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6StringC1EPKc>
			
			//If GPS-Data is not valid
			if (buf.indexOf("A,") == -1)
    1a2c:	6f e2       	ldi	r22, 0x2F	; 47
    1a2e:	72 e0       	ldi	r23, 0x02	; 2
    1a30:	ce 01       	movw	r24, r28
    1a32:	01 96       	adiw	r24, 0x01	; 1
    1a34:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN6StringC1EPKc>
    1a38:	be 01       	movw	r22, r28
    1a3a:	6f 5f       	subi	r22, 0xFF	; 255
    1a3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3e:	ce 01       	movw	r24, r28
    1a40:	07 96       	adiw	r24, 0x07	; 7
    1a42:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <_ZNK6String7indexOfERKS_>
    1a46:	8c 01       	movw	r16, r24
    1a48:	ce 01       	movw	r24, r28
    1a4a:	01 96       	adiw	r24, 0x01	; 1
    1a4c:	0e 94 27 2a 	call	0x544e	; 0x544e <_ZN6StringD1Ev>
    1a50:	0f 3f       	cpi	r16, 0xFF	; 255
    1a52:	1f 4f       	sbci	r17, 0xFF	; 255
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <_Z7readGPSv+0x1a2>
    1a56:	85 c0       	rjmp	.+266    	; 0x1b62 <_Z7readGPSv+0x2ac>
				longitudeMin = buf.substring(buf.indexOf("N,")+5, buf.indexOf("N,")+7);
			
				latitudeDir = 'N';
				longitudeDir = 'E';
				*/
				tempLong = atol(ptr+13);
    1a58:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <ptr>
    1a5c:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <ptr+0x1>
    1a60:	0d 96       	adiw	r24, 0x0d	; 13
    1a62:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <atol>
	StringSumHelper(const char *p) : String(p) {}
	StringSumHelper(char c) : String(c) {}
	StringSumHelper(unsigned char num) : String(num) {}
	StringSumHelper(int num) : String(num) {}
	StringSumHelper(unsigned int num) : String(num) {}
	StringSumHelper(long num) : String(num) {}
    1a66:	a7 01       	movw	r20, r14
    1a68:	96 01       	movw	r18, r12
    1a6a:	0e 94 2d 2c 	call	0x585a	; 0x585a <__divmodsi4>
    1a6e:	29 01       	movw	r4, r18
    1a70:	3a 01       	movw	r6, r20
    1a72:	ab 01       	movw	r20, r22
    1a74:	bc 01       	movw	r22, r24
    1a76:	2a e0       	ldi	r18, 0x0A	; 10
    1a78:	ce 01       	movw	r24, r28
    1a7a:	01 96       	adiw	r24, 0x01	; 1
    1a7c:	0e 94 0a 2b 	call	0x5614	; 0x5614 <_ZN6StringC1Elh>
				latitudeMin = tempLong % 100;
    1a80:	be 01       	movw	r22, r28
    1a82:	6f 5f       	subi	r22, 0xFF	; 255
    1a84:	7f 4f       	sbci	r23, 0xFF	; 255
    1a86:	86 e9       	ldi	r24, 0x96	; 150
    1a88:	93 e0       	ldi	r25, 0x03	; 3
    1a8a:	0e 94 e7 2a 	call	0x55ce	; 0x55ce <_ZN6StringaSEO15StringSumHelper>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1a8e:	ce 01       	movw	r24, r28
    1a90:	01 96       	adiw	r24, 0x01	; 1
    1a92:	0e 94 27 2a 	call	0x544e	; 0x544e <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
	StringSumHelper(char c) : String(c) {}
	StringSumHelper(unsigned char num) : String(num) {}
	StringSumHelper(int num) : String(num) {}
	StringSumHelper(unsigned int num) : String(num) {}
	StringSumHelper(long num) : String(num) {}
    1a96:	c3 01       	movw	r24, r6
    1a98:	b2 01       	movw	r22, r4
    1a9a:	a7 01       	movw	r20, r14
    1a9c:	96 01       	movw	r18, r12
    1a9e:	0e 94 2d 2c 	call	0x585a	; 0x585a <__divmodsi4>
    1aa2:	ab 01       	movw	r20, r22
    1aa4:	bc 01       	movw	r22, r24
    1aa6:	2a e0       	ldi	r18, 0x0A	; 10
    1aa8:	ce 01       	movw	r24, r28
    1aaa:	01 96       	adiw	r24, 0x01	; 1
    1aac:	0e 94 0a 2b 	call	0x5614	; 0x5614 <_ZN6StringC1Elh>
				latitudeDegr = (tempLong / 100) % 100;
    1ab0:	be 01       	movw	r22, r28
    1ab2:	6f 5f       	subi	r22, 0xFF	; 255
    1ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab6:	8c e9       	ldi	r24, 0x9C	; 156
    1ab8:	93 e0       	ldi	r25, 0x03	; 3
    1aba:	0e 94 e7 2a 	call	0x55ce	; 0x55ce <_ZN6StringaSEO15StringSumHelper>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1abe:	ce 01       	movw	r24, r28
    1ac0:	01 96       	adiw	r24, 0x01	; 1
    1ac2:	0e 94 27 2a 	call	0x544e	; 0x544e <_ZN6StringD1Ev>
				latitudeDir = *(ptr+23);
    1ac6:	00 91 ab 03 	lds	r16, 0x03AB	; 0x8003ab <ptr>
    1aca:	10 91 ac 03 	lds	r17, 0x03AC	; 0x8003ac <ptr+0x1>
    1ace:	f8 01       	movw	r30, r16
    1ad0:	87 89       	ldd	r24, Z+23	; 0x17
    1ad2:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <latitudeDir>
				
				tempLong = atol(ptr+25);
    1ad6:	c8 01       	movw	r24, r16
    1ad8:	49 96       	adiw	r24, 0x19	; 25
    1ada:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <atol>
				longitudeMin = tempLong % 100;
    1ade:	a7 01       	movw	r20, r14
    1ae0:	96 01       	movw	r18, r12
    1ae2:	0e 94 2d 2c 	call	0x585a	; 0x585a <__divmodsi4>
    1ae6:	70 93 a4 03 	sts	0x03A4, r23	; 0x8003a4 <longitudeMin+0x1>
    1aea:	60 93 a3 03 	sts	0x03A3, r22	; 0x8003a3 <longitudeMin>
				longitudeDegr = (tempLong / 100) % 100;
    1aee:	ca 01       	movw	r24, r20
    1af0:	b9 01       	movw	r22, r18
    1af2:	a7 01       	movw	r20, r14
    1af4:	96 01       	movw	r18, r12
    1af6:	0e 94 2d 2c 	call	0x585a	; 0x585a <__divmodsi4>
    1afa:	70 93 a6 03 	sts	0x03A6, r23	; 0x8003a6 <longitudeDegr+0x1>
    1afe:	60 93 a5 03 	sts	0x03A5, r22	; 0x8003a5 <longitudeDegr>
				longitudeDir = *(ptr+36);
    1b02:	f8 01       	movw	r30, r16
    1b04:	84 a1       	ldd	r24, Z+36	; 0x24
    1b06:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <longitudeDir>
				
				tempLong = atol(ptr+50);
    1b0a:	c8 01       	movw	r24, r16
    1b0c:	c2 96       	adiw	r24, 0x32	; 50
    1b0e:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <atol>
    1b12:	2b 01       	movw	r4, r22
    1b14:	3c 01       	movw	r6, r24
				datumLocal.YYYY_ = 2000 + tempLong % 100;
    1b16:	a7 01       	movw	r20, r14
    1b18:	96 01       	movw	r18, r12
    1b1a:	0e 94 2d 2c 	call	0x585a	; 0x585a <__divmodsi4>
    1b1e:	60 53       	subi	r22, 0x30	; 48
    1b20:	78 4f       	sbci	r23, 0xF8	; 248
    1b22:	70 93 5b 03 	sts	0x035B, r23	; 0x80035b <datumLocal+0x1>
    1b26:	60 93 5a 03 	sts	0x035A, r22	; 0x80035a <datumLocal>
				datumLocal.MM_ = (tempLong / 100) % 100;
    1b2a:	ca 01       	movw	r24, r20
    1b2c:	b9 01       	movw	r22, r18
    1b2e:	a7 01       	movw	r20, r14
    1b30:	96 01       	movw	r18, r12
    1b32:	0e 94 2d 2c 	call	0x585a	; 0x585a <__divmodsi4>
    1b36:	70 93 5d 03 	sts	0x035D, r23	; 0x80035d <datumLocal+0x3>
    1b3a:	60 93 5c 03 	sts	0x035C, r22	; 0x80035c <datumLocal+0x2>
				datumLocal.DD_ = (tempLong / 10000) % 100;	
    1b3e:	c3 01       	movw	r24, r6
    1b40:	b2 01       	movw	r22, r4
    1b42:	a5 01       	movw	r20, r10
    1b44:	94 01       	movw	r18, r8
    1b46:	0e 94 2d 2c 	call	0x585a	; 0x585a <__divmodsi4>
    1b4a:	ca 01       	movw	r24, r20
    1b4c:	b9 01       	movw	r22, r18
    1b4e:	a7 01       	movw	r20, r14
    1b50:	96 01       	movw	r18, r12
    1b52:	0e 94 2d 2c 	call	0x585a	; 0x585a <__divmodsi4>
    1b56:	70 93 5f 03 	sts	0x035F, r23	; 0x80035f <datumLocal+0x5>
    1b5a:	60 93 5e 03 	sts	0x035E, r22	; 0x80035e <datumLocal+0x4>
			tempLong = atol(ptr);									// parse time value into hour, minute, second
			zeitLocal.ss_ = tempLong % 100;
			zeitLocal.mm_ = (tempLong / 100) % 100;
			zeitLocal.hh_ = ((tempLong / 10000) + TIMEZONE) % 24;	
			
			getData = true;
    1b5e:	11 e0       	ldi	r17, 0x01	; 1
    1b60:	01 c0       	rjmp	.+2      	; 0x1b64 <_Z7readGPSv+0x2ae>
			String buf = String(ptr);
			
			//If GPS-Data is not valid
			if (buf.indexOf("A,") == -1)
			{
				getData = false;
    1b62:	10 e0       	ldi	r17, 0x00	; 0
				datumLocal.MM_ = (tempLong / 100) % 100;
				datumLocal.DD_ = (tempLong / 10000) % 100;	
			}
			
											
			ptr = buffer;
    1b64:	8e ea       	ldi	r24, 0xAE	; 174
    1b66:	93 e0       	ldi	r25, 0x03	; 3
    1b68:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <ptr+0x1>
    1b6c:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <ptr>
			while(ptr < buffer + BUFFERSIZE)  *ptr++=0;		// fill with 0
    1b70:	e0 91 ab 03 	lds	r30, 0x03AB	; 0x8003ab <ptr>
    1b74:	f0 91 ac 03 	lds	r31, 0x03AC	; 0x8003ac <ptr+0x1>
    1b78:	83 e0       	ldi	r24, 0x03	; 3
    1b7a:	e4 3f       	cpi	r30, 0xF4	; 244
    1b7c:	f8 07       	cpc	r31, r24
    1b7e:	40 f4       	brcc	.+16     	; 0x1b90 <_Z7readGPSv+0x2da>
    1b80:	cf 01       	movw	r24, r30
    1b82:	01 96       	adiw	r24, 0x01	; 1
    1b84:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <ptr+0x1>
    1b88:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <ptr>
    1b8c:	10 82       	st	Z, r1
    1b8e:	f0 cf       	rjmp	.-32     	; 0x1b70 <_Z7readGPSv+0x2ba>
			count = 0;										// clear buffer and start new
    1b90:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <count>
			zeitLocal.mm_ = (tempLong / 100) % 100;
			zeitLocal.hh_ = ((tempLong / 10000) + TIMEZONE) % 24;	
			
			getData = true;
			
			String buf = String(ptr);
    1b94:	ce 01       	movw	r24, r28
    1b96:	07 96       	adiw	r24, 0x07	; 7
    1b98:	0e 94 27 2a 	call	0x544e	; 0x544e <_ZN6StringD1Ev>
			ptr = buffer;
			while(ptr < buffer + BUFFERSIZE)  *ptr++=0;		// fill with 0
			count = 0;										// clear buffer and start new
		}
	}
	if (Serial.available()){								// if data is available from PC
    1b9c:	84 e0       	ldi	r24, 0x04	; 4
    1b9e:	96 e0       	ldi	r25, 0x06	; 6
    1ba0:	0e 94 76 1d 	call	0x3aec	; 0x3aec <_ZN7Serial_9availableEv>
    1ba4:	89 2b       	or	r24, r25
    1ba6:	49 f0       	breq	.+18     	; 0x1bba <_Z7readGPSv+0x304>
		Serial1.write(Serial.read());						// write it to the NMEA device
    1ba8:	84 e0       	ldi	r24, 0x04	; 4
    1baa:	96 e0       	ldi	r25, 0x06	; 6
    1bac:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <_ZN7Serial_4readEv>
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    1bb0:	68 2f       	mov	r22, r24
    1bb2:	85 e5       	ldi	r24, 0x55	; 85
    1bb4:	96 e0       	ldi	r25, 0x06	; 6
    1bb6:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_ZN14HardwareSerial5writeEh>
	}
	zeitGMT = zeitLocal;
    1bba:	88 e0       	ldi	r24, 0x08	; 8
    1bbc:	ed e7       	ldi	r30, 0x7D	; 125
    1bbe:	f3 e0       	ldi	r31, 0x03	; 3
    1bc0:	ad e8       	ldi	r26, 0x8D	; 141
    1bc2:	b3 e0       	ldi	r27, 0x03	; 3
    1bc4:	01 90       	ld	r0, Z+
    1bc6:	0d 92       	st	X+, r0
    1bc8:	8a 95       	dec	r24
    1bca:	e1 f7       	brne	.-8      	; 0x1bc4 <_Z7readGPSv+0x30e>
	zeitGMT.hh_ -= 1;
    1bcc:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <zeitGMT>
    1bd0:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <zeitGMT+0x1>
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	90 93 8e 03 	sts	0x038E, r25	; 0x80038e <zeitGMT+0x1>
    1bda:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <zeitGMT>
	
	datumGMT = datumLocal;
    1bde:	88 e0       	ldi	r24, 0x08	; 8
    1be0:	ea e5       	ldi	r30, 0x5A	; 90
    1be2:	f3 e0       	ldi	r31, 0x03	; 3
    1be4:	aa e6       	ldi	r26, 0x6A	; 106
    1be6:	b3 e0       	ldi	r27, 0x03	; 3
    1be8:	01 90       	ld	r0, Z+
    1bea:	0d 92       	st	X+, r0
    1bec:	8a 95       	dec	r24
    1bee:	e1 f7       	brne	.-8      	; 0x1be8 <_Z7readGPSv+0x332>
	return getData;
}
    1bf0:	81 2f       	mov	r24, r17
    1bf2:	2c 96       	adiw	r28, 0x0c	; 12
    1bf4:	0f b6       	in	r0, 0x3f	; 63
    1bf6:	f8 94       	cli
    1bf8:	de bf       	out	0x3e, r29	; 62
    1bfa:	0f be       	out	0x3f, r0	; 63
    1bfc:	cd bf       	out	0x3d, r28	; 61
    1bfe:	df 91       	pop	r29
    1c00:	cf 91       	pop	r28
    1c02:	1f 91       	pop	r17
    1c04:	0f 91       	pop	r16
    1c06:	ff 90       	pop	r15
    1c08:	ef 90       	pop	r14
    1c0a:	df 90       	pop	r13
    1c0c:	cf 90       	pop	r12
    1c0e:	bf 90       	pop	r11
    1c10:	af 90       	pop	r10
    1c12:	9f 90       	pop	r9
    1c14:	8f 90       	pop	r8
    1c16:	7f 90       	pop	r7
    1c18:	6f 90       	pop	r6
    1c1a:	5f 90       	pop	r5
    1c1c:	4f 90       	pop	r4
    1c1e:	08 95       	ret

00001c20 <setup>:
 * 
 * called once at program startup
 * \return void
 */
void setup()
{
    1c20:	cf 92       	push	r12
    1c22:	df 92       	push	r13
    1c24:	ef 92       	push	r14
    1c26:	ff 92       	push	r15
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1c28:	26 e0       	ldi	r18, 0x06	; 6
    1c2a:	40 e8       	ldi	r20, 0x80	; 128
    1c2c:	55 e2       	ldi	r21, 0x25	; 37
    1c2e:	60 e0       	ldi	r22, 0x00	; 0
    1c30:	70 e0       	ldi	r23, 0x00	; 0
    1c32:	85 e5       	ldi	r24, 0x55	; 85
    1c34:	96 e0       	ldi	r25, 0x06	; 6
    1c36:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <_ZN14HardwareSerial5beginEmh>
	Serial1.begin(9600);
	Serial.begin(9600);
    1c3a:	40 e8       	ldi	r20, 0x80	; 128
    1c3c:	55 e2       	ldi	r21, 0x25	; 37
    1c3e:	60 e0       	ldi	r22, 0x00	; 0
    1c40:	70 e0       	ldi	r23, 0x00	; 0
    1c42:	84 e0       	ldi	r24, 0x04	; 4
    1c44:	96 e0       	ldi	r25, 0x06	; 6
    1c46:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <_ZN7Serial_5beginEm>
	//LCD konfigurieren
	lcd.begin(16, 2);
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	42 e0       	ldi	r20, 0x02	; 2
    1c4e:	60 e1       	ldi	r22, 0x10	; 16
    1c50:	83 e1       	ldi	r24, 0x13	; 19
    1c52:	95 e0       	ldi	r25, 0x05	; 5
    1c54:	0e 94 76 16 	call	0x2cec	; 0x2cec <_ZN7hd447805beginEhhh>
	lcd.noBacklight();
    1c58:	83 e1       	ldi	r24, 0x13	; 19
    1c5a:	95 e0       	ldi	r25, 0x05	; 5
    1c5c:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <_ZN7hd4478011noBacklightEv>
	lcd.noCursor();
    1c60:	83 e1       	ldi	r24, 0x13	; 19
    1c62:	95 e0       	ldi	r25, 0x05	; 5
    1c64:	0e 94 10 17 	call	0x2e20	; 0x2e20 <_ZN7hd447808noCursorEv>
	lcd.home();
    1c68:	83 e1       	ldi	r24, 0x13	; 19
    1c6a:	95 e0       	ldi	r25, 0x05	; 5
    1c6c:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <_ZN7hd447804homeEv>
	lcd.print("Romeo V2.2 Watch");
    1c70:	62 e3       	ldi	r22, 0x32	; 50
    1c72:	72 e0       	ldi	r23, 0x02	; 2
    1c74:	83 e1       	ldi	r24, 0x13	; 19
    1c76:	95 e0       	ldi	r25, 0x05	; 5
    1c78:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
    1c7c:	41 e0       	ldi	r20, 0x01	; 1
    1c7e:	60 e0       	ldi	r22, 0x00	; 0
    1c80:	83 e1       	ldi	r24, 0x13	; 19
    1c82:	95 e0       	ldi	r25, 0x05	; 5
    1c84:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN7hd447809setCursorEhh>
	lcd.print("Coray / Bruno");
    1c88:	63 e4       	ldi	r22, 0x43	; 67
    1c8a:	72 e0       	ldi	r23, 0x02	; 2
    1c8c:	83 e1       	ldi	r24, 0x13	; 19
    1c8e:	95 e0       	ldi	r25, 0x05	; 5
    1c90:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN5Print5printEPKc>
	while(millis()<3000);
    1c94:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <millis>
    1c98:	68 3b       	cpi	r22, 0xB8	; 184
    1c9a:	7b 40       	sbci	r23, 0x0B	; 11
    1c9c:	81 05       	cpc	r24, r1
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	c8 f3       	brcs	.-14     	; 0x1c94 <setup+0x74>
	lcd.clear();
    1ca2:	83 e1       	ldi	r24, 0x13	; 19
    1ca4:	95 e0       	ldi	r25, 0x05	; 5
    1ca6:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <_ZN7hd447805clearEv>
	
	//Pin definitionen
	pinMode(btnPin, INPUT);
    1caa:	60 e0       	ldi	r22, 0x00	; 0
    1cac:	88 e0       	ldi	r24, 0x08	; 8
    1cae:	0e 94 92 29 	call	0x5324	; 0x5324 <pinMode>
	pinMode(tempSensor,INPUT);
    1cb2:	60 e0       	ldi	r22, 0x00	; 0
    1cb4:	86 e1       	ldi	r24, 0x16	; 22
    1cb6:	0e 94 92 29 	call	0x5324	; 0x5324 <pinMode>
	pinMode(Dir_Motor, OUTPUT);
    1cba:	61 e0       	ldi	r22, 0x01	; 1
    1cbc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Dir_Motor>
    1cc0:	0e 94 92 29 	call	0x5324	; 0x5324 <pinMode>
	pinMode(En_Motor, OUTPUT);
    1cc4:	61 e0       	ldi	r22, 0x01	; 1
    1cc6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <En_Motor>
    1cca:	0e 94 92 29 	call	0x5324	; 0x5324 <pinMode>
	pinMode(encoder0pinB,INPUT);
    1cce:	60 e0       	ldi	r22, 0x00	; 0
    1cd0:	87 e0       	ldi	r24, 0x07	; 7
    1cd2:	0e 94 92 29 	call	0x5324	; 0x5324 <pinMode>
	
	//PID-Regler
	Setpoint = 20; //Setpint 15 works
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	a0 ea       	ldi	r26, 0xA0	; 160
    1cdc:	b1 e4       	ldi	r27, 0x41	; 65
    1cde:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <Setpoint>
    1ce2:	90 93 3d 04 	sts	0x043D, r25	; 0x80043d <Setpoint+0x1>
    1ce6:	a0 93 3e 04 	sts	0x043E, r26	; 0x80043e <Setpoint+0x2>
    1cea:	b0 93 3f 04 	sts	0x043F, r27	; 0x80043f <Setpoint+0x3>
	myPID.SetMode(AUTOMATIC);//PID is set to automatic mode
    1cee:	61 e0       	ldi	r22, 0x01	; 1
    1cf0:	70 e0       	ldi	r23, 0x00	; 0
    1cf2:	8c ef       	ldi	r24, 0xFC	; 252
    1cf4:	93 e0       	ldi	r25, 0x03	; 3
    1cf6:	0e 94 ab 13 	call	0x2756	; 0x2756 <_ZN3PID7SetModeEi>
	myPID.SetSampleTime(100);//Set PID sampling frequency is 100ms
    1cfa:	64 e6       	ldi	r22, 0x64	; 100
    1cfc:	70 e0       	ldi	r23, 0x00	; 0
    1cfe:	8c ef       	ldi	r24, 0xFC	; 252
    1d00:	93 e0       	ldi	r25, 0x03	; 3
    1d02:	0e 94 17 13 	call	0x262e	; 0x262e <_ZN3PID13SetSampleTimeEi>
	attachInterrupt(digitalPinToInterrupt(7), wheelSpeed, CHANGE); //Pin 7 -> Interrupt 4
    1d06:	41 e0       	ldi	r20, 0x01	; 1
    1d08:	50 e0       	ldi	r21, 0x00	; 0
    1d0a:	69 ec       	ldi	r22, 0xC9	; 201
    1d0c:	71 e0       	ldi	r23, 0x01	; 1
    1d0e:	84 e0       	ldi	r24, 0x04	; 4
    1d10:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <attachInterrupt>
	previousMillis = millis();
    1d14:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <millis>
    1d18:	60 93 f8 03 	sts	0x03F8, r22	; 0x8003f8 <previousMillis>
    1d1c:	70 93 f9 03 	sts	0x03F9, r23	; 0x8003f9 <previousMillis+0x1>
    1d20:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <previousMillis+0x2>
    1d24:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <previousMillis+0x3>
	
	//GPS-Modul auslesen
	while (millis()<6000)
    1d28:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <millis>
    1d2c:	60 37       	cpi	r22, 0x70	; 112
    1d2e:	77 41       	sbci	r23, 0x17	; 23
    1d30:	81 05       	cpc	r24, r1
    1d32:	91 05       	cpc	r25, r1
    1d34:	58 f5       	brcc	.+86     	; 0x1d8c <setup+0x16c>
	{
		lcd.setCursor(0,0);
    1d36:	40 e0       	ldi	r20, 0x00	; 0
    1d38:	60 e0       	ldi	r22, 0x00	; 0
    1d3a:	83 e1       	ldi	r24, 0x13	; 19
    1d3c:	95 e0       	ldi	r25, 0x05	; 5
    1d3e:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN7hd447809setCursorEhh>
		lcd.print("Read GPS");	
    1d42:	61 e5       	ldi	r22, 0x51	; 81
    1d44:	72 e0       	ldi	r23, 0x02	; 2
    1d46:	83 e1       	ldi	r24, 0x13	; 19
    1d48:	95 e0       	ldi	r25, 0x05	; 5
    1d4a:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN5Print5printEPKc>
		if (readGPS())
    1d4e:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <_Z7readGPSv>
    1d52:	88 23       	and	r24, r24
    1d54:	a1 f0       	breq	.+40     	; 0x1d7e <setup+0x15e>
		{
			lcd.clear();
    1d56:	83 e1       	ldi	r24, 0x13	; 19
    1d58:	95 e0       	ldi	r25, 0x05	; 5
    1d5a:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <_ZN7hd447805clearEv>
			lcd.print("Data received");
    1d5e:	6a e5       	ldi	r22, 0x5A	; 90
    1d60:	72 e0       	ldi	r23, 0x02	; 2
    1d62:	83 e1       	ldi	r24, 0x13	; 19
    1d64:	95 e0       	ldi	r25, 0x05	; 5
    1d66:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN5Print5printEPKc>
			gpsDataReceived = true;
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <gpsDataReceived>
			timeDataReceived = millis();
    1d70:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <millis>
    1d74:	70 93 a8 03 	sts	0x03A8, r23	; 0x8003a8 <timeDataReceived+0x1>
    1d78:	60 93 a7 03 	sts	0x03A7, r22	; 0x8003a7 <timeDataReceived>
			break;
    1d7c:	07 c0       	rjmp	.+14     	; 0x1d8c <setup+0x16c>
		}
		else timeDataReceived = millis();
    1d7e:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <millis>
    1d82:	70 93 a8 03 	sts	0x03A8, r23	; 0x8003a8 <timeDataReceived+0x1>
    1d86:	60 93 a7 03 	sts	0x03A7, r22	; 0x8003a7 <timeDataReceived>
	myPID.SetSampleTime(100);//Set PID sampling frequency is 100ms
	attachInterrupt(digitalPinToInterrupt(7), wheelSpeed, CHANGE); //Pin 7 -> Interrupt 4
	previousMillis = millis();
	
	//GPS-Modul auslesen
	while (millis()<6000)
    1d8a:	ce cf       	rjmp	.-100    	; 0x1d28 <setup+0x108>
			timeDataReceived = millis();
			break;
		}
		else timeDataReceived = millis();
	}
	if (gpsDataReceived == false) 
    1d8c:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <gpsDataReceived>
    1d90:	81 11       	cpse	r24, r1
    1d92:	0a c0       	rjmp	.+20     	; 0x1da8 <setup+0x188>
	{
		lcd.clear();
    1d94:	83 e1       	ldi	r24, 0x13	; 19
    1d96:	95 e0       	ldi	r25, 0x05	; 5
    1d98:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <_ZN7hd447805clearEv>
		lcd.print("No GPS-Signal");	
    1d9c:	68 e6       	ldi	r22, 0x68	; 104
    1d9e:	72 e0       	ldi	r23, 0x02	; 2
    1da0:	83 e1       	ldi	r24, 0x13	; 19
    1da2:	95 e0       	ldi	r25, 0x05	; 5
    1da4:	0e 94 96 20 	call	0x412c	; 0x412c <_ZN5Print5printEPKc>
	}
	zeitTimeZone = zeitGMT;
    1da8:	88 e0       	ldi	r24, 0x08	; 8
    1daa:	ed e8       	ldi	r30, 0x8D	; 141
    1dac:	f3 e0       	ldi	r31, 0x03	; 3
    1dae:	a5 e8       	ldi	r26, 0x85	; 133
    1db0:	b3 e0       	ldi	r27, 0x03	; 3
    1db2:	01 90       	ld	r0, Z+
    1db4:	0d 92       	st	X+, r0
    1db6:	8a 95       	dec	r24
    1db8:	e1 f7       	brne	.-8      	; 0x1db2 <setup+0x192>
	while((timeDataReceived+2000) > millis());
    1dba:	c0 90 a7 03 	lds	r12, 0x03A7	; 0x8003a7 <timeDataReceived>
    1dbe:	d0 90 a8 03 	lds	r13, 0x03A8	; 0x8003a8 <timeDataReceived+0x1>
    1dc2:	80 e3       	ldi	r24, 0x30	; 48
    1dc4:	c8 1a       	sub	r12, r24
    1dc6:	88 ef       	ldi	r24, 0xF8	; 248
    1dc8:	d8 0a       	sbc	r13, r24
    1dca:	0d 2c       	mov	r0, r13
    1dcc:	00 0c       	add	r0, r0
    1dce:	ee 08       	sbc	r14, r14
    1dd0:	ff 08       	sbc	r15, r15
    1dd2:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <millis>
    1dd6:	6c 15       	cp	r22, r12
    1dd8:	7d 05       	cpc	r23, r13
    1dda:	8e 05       	cpc	r24, r14
    1ddc:	9f 05       	cpc	r25, r15
    1dde:	68 f3       	brcs	.-38     	; 0x1dba <setup+0x19a>
	lcd.clear();
    1de0:	83 e1       	ldi	r24, 0x13	; 19
    1de2:	95 e0       	ldi	r25, 0x05	; 5
}
    1de4:	ff 90       	pop	r15
    1de6:	ef 90       	pop	r14
    1de8:	df 90       	pop	r13
    1dea:	cf 90       	pop	r12
		lcd.clear();
		lcd.print("No GPS-Signal");	
	}
	zeitTimeZone = zeitGMT;
	while((timeDataReceived+2000) > millis());
	lcd.clear();
    1dec:	0c 94 4a 16 	jmp	0x2c94	; 0x2c94 <_ZN7hd447805clearEv>

00001df0 <loop>:
 * called repeatedly in an endless loop
 * 
 * \return void
 */
void loop()
{
    1df0:	cf 92       	push	r12
    1df2:	df 92       	push	r13
    1df4:	ef 92       	push	r14
    1df6:	ff 92       	push	r15
    1df8:	0f 93       	push	r16
    1dfa:	1f 93       	push	r17
	//Wenn keine GPS-Daten vorhanden sind wird weiter nach Daten gesucht.
	//Wurden beim Setup GPS-DAten gefunden wird alle 30min die Uhrzeit und das Datum synchronisiert.
	if (gpsDataReceived == false || (timeDataReceived + 1000*60*30) < millis()) 
    1dfc:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <gpsDataReceived>
    1e00:	88 23       	and	r24, r24
    1e02:	09 f4       	brne	.+2      	; 0x1e06 <loop+0x16>
    1e04:	be c1       	rjmp	.+892    	; 0x2182 <loop+0x392>
    1e06:	c0 90 a7 03 	lds	r12, 0x03A7	; 0x8003a7 <timeDataReceived>
    1e0a:	d0 90 a8 03 	lds	r13, 0x03A8	; 0x8003a8 <timeDataReceived+0x1>
    1e0e:	80 ec       	ldi	r24, 0xC0	; 192
    1e10:	c8 1a       	sub	r12, r24
    1e12:	88 e8       	ldi	r24, 0x88	; 136
    1e14:	d8 0a       	sbc	r13, r24
    1e16:	0d 2c       	mov	r0, r13
    1e18:	00 0c       	add	r0, r0
    1e1a:	ee 08       	sbc	r14, r14
    1e1c:	ff 08       	sbc	r15, r15
    1e1e:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <millis>
    1e22:	c6 16       	cp	r12, r22
    1e24:	d7 06       	cpc	r13, r23
    1e26:	e8 06       	cpc	r14, r24
    1e28:	f9 06       	cpc	r15, r25
    1e2a:	08 f4       	brcc	.+2      	; 0x1e2e <loop+0x3e>
    1e2c:	aa c1       	rjmp	.+852    	; 0x2182 <loop+0x392>
		gpsDataReceived = readGPS();
		timeDataReceived = millis();
	}	
		
	//Button-Pin auslesen und auf Nullstellung reagieren
	if (digitalRead(btnPin) == HIGH)
    1e2e:	88 e0       	ldi	r24, 0x08	; 8
    1e30:	0e 94 fd 29 	call	0x53fa	; 0x53fa <digitalRead>
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	e1 f4       	brne	.+56     	; 0x1e70 <loop+0x80>
	{
		Setpoint = 0;
    1e38:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <Setpoint>
    1e3c:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <Setpoint+0x1>
    1e40:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <Setpoint+0x2>
    1e44:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <Setpoint+0x3>
		duration = 0;
    1e48:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <duration>
    1e4c:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <duration+0x1>
    1e50:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <duration+0x2>
    1e54:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <duration+0x3>
		analogWrite(En_Motor,0);
    1e58:	60 e0       	ldi	r22, 0x00	; 0
    1e5a:	70 e0       	ldi	r23, 0x00	; 0
    1e5c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <En_Motor>
		break;
	}
	if(newmenu >= 0) menu = newmenu;

	} //else Klammer
}
    1e60:	1f 91       	pop	r17
    1e62:	0f 91       	pop	r16
    1e64:	ff 90       	pop	r15
    1e66:	ef 90       	pop	r14
    1e68:	df 90       	pop	r13
    1e6a:	cf 90       	pop	r12
	//Button-Pin auslesen und auf Nullstellung reagieren
	if (digitalRead(btnPin) == HIGH)
	{
		Setpoint = 0;
		duration = 0;
		analogWrite(En_Motor,0);
    1e6c:	0c 94 bd 28 	jmp	0x517a	; 0x517a <analogWrite>
		
	}
	else
	{
	//Aktueller Zeigerstand als Nullstellung definiert
	if (zeitLocal.GetSeconds() == 0) Setpoint = 20;
    1e70:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <zeitLocal+0x4>
    1e74:	90 91 82 03 	lds	r25, 0x0382	; 0x800382 <zeitLocal+0x5>
    1e78:	89 2b       	or	r24, r25
    1e7a:	61 f4       	brne	.+24     	; 0x1e94 <loop+0xa4>
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	a0 ea       	ldi	r26, 0xA0	; 160
    1e82:	b1 e4       	ldi	r27, 0x41	; 65
    1e84:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <Setpoint>
    1e88:	90 93 3d 04 	sts	0x043D, r25	; 0x80043d <Setpoint+0x1>
    1e8c:	a0 93 3e 04 	sts	0x043E, r26	; 0x80043e <Setpoint+0x2>
    1e90:	b0 93 3f 04 	sts	0x043F, r27	; 0x80043f <Setpoint+0x3>
	//PID-Regelung
	advance(); //Motor forward
    1e94:	0e 94 87 06 	call	0xd0e	; 0xd0e <_Z7advancev>
	currentMillis = millis();
    1e98:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <millis>
    1e9c:	60 93 f4 03 	sts	0x03F4, r22	; 0x8003f4 <currentMillis>
    1ea0:	70 93 f5 03 	sts	0x03F5, r23	; 0x8003f5 <currentMillis+0x1>
    1ea4:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <currentMillis+0x2>
    1ea8:	90 93 f7 03 	sts	0x03F7, r25	; 0x8003f7 <currentMillis+0x3>
	if (currentMillis - previousMillis > interval)
    1eac:	00 91 f8 03 	lds	r16, 0x03F8	; 0x8003f8 <previousMillis>
    1eb0:	10 91 f9 03 	lds	r17, 0x03F9	; 0x8003f9 <previousMillis+0x1>
    1eb4:	20 91 fa 03 	lds	r18, 0x03FA	; 0x8003fa <previousMillis+0x2>
    1eb8:	30 91 fb 03 	lds	r19, 0x03FB	; 0x8003fb <previousMillis+0x3>
    1ebc:	6b 01       	movw	r12, r22
    1ebe:	7c 01       	movw	r14, r24
    1ec0:	c0 1a       	sub	r12, r16
    1ec2:	d1 0a       	sbc	r13, r17
    1ec4:	e2 0a       	sbc	r14, r18
    1ec6:	f3 0a       	sbc	r15, r19
    1ec8:	97 01       	movw	r18, r14
    1eca:	86 01       	movw	r16, r12
    1ecc:	c0 90 0a 01 	lds	r12, 0x010A	; 0x80010a <interval>
    1ed0:	d0 90 0b 01 	lds	r13, 0x010B	; 0x80010b <interval+0x1>
    1ed4:	0d 2c       	mov	r0, r13
    1ed6:	00 0c       	add	r0, r0
    1ed8:	ee 08       	sbc	r14, r14
    1eda:	ff 08       	sbc	r15, r15
    1edc:	c0 16       	cp	r12, r16
    1ede:	d1 06       	cpc	r13, r17
    1ee0:	e2 06       	cpc	r14, r18
    1ee2:	f3 06       	cpc	r15, r19
    1ee4:	a4 f5       	brge	.+104    	; 0x1f4e <loop+0x15e>
	{
		previousMillis = currentMillis;
    1ee6:	60 93 f8 03 	sts	0x03F8, r22	; 0x8003f8 <previousMillis>
    1eea:	70 93 f9 03 	sts	0x03F9, r23	; 0x8003f9 <previousMillis+0x1>
    1eee:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <previousMillis+0x2>
    1ef2:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <previousMillis+0x3>
		
		abs_duration=duration * 60 / 1920;
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 e7       	ldi	r20, 0x70	; 112
    1efc:	52 e4       	ldi	r21, 0x42	; 66
    1efe:	60 91 49 04 	lds	r22, 0x0449	; 0x800449 <duration>
    1f02:	70 91 4a 04 	lds	r23, 0x044A	; 0x80044a <duration+0x1>
    1f06:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <duration+0x2>
    1f0a:	90 91 4c 04 	lds	r25, 0x044C	; 0x80044c <duration+0x3>
    1f0e:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__mulsf3>
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 ef       	ldi	r20, 0xF0	; 240
    1f18:	54 e4       	ldi	r21, 0x44	; 68
    1f1a:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__divsf3>
    1f1e:	60 93 45 04 	sts	0x0445, r22	; 0x800445 <abs_duration>
    1f22:	70 93 46 04 	sts	0x0446, r23	; 0x800446 <abs_duration+0x1>
    1f26:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <abs_duration+0x2>
    1f2a:	90 93 48 04 	sts	0x0448, r25	; 0x800448 <abs_duration+0x3>
			
		result=myPID.Compute();//PID conversion is complete and returns 1
    1f2e:	8c ef       	ldi	r24, 0xFC	; 252
    1f30:	93 e0       	ldi	r25, 0x03	; 3
    1f32:	0e 94 da 10 	call	0x21b4	; 0x21b4 <_ZN3PID7ComputeEv>
    1f36:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <result>
		if(result)
    1f3a:	88 23       	and	r24, r24
    1f3c:	41 f0       	breq	.+16     	; 0x1f4e <loop+0x15e>
		{
			duration = 0; //Count clear, wait for the next count
    1f3e:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <duration>
    1f42:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <duration+0x1>
    1f46:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <duration+0x2>
    1f4a:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <duration+0x3>
		}
	}
	Watch();
    1f4e:	0e 94 13 03 	call	0x626	; 0x626 <_Z5Watchv>
	if(weckerStatus&&(zeitLocal.GetHours()==weckzeit.GetHours())&&(zeitLocal.GetMinutes()==weckzeit.GetMinutes())&&(zeitLocal.GetSeconds()==weckzeit.GetSeconds())) buzzer = 1;
    1f52:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <weckerStatus>
    1f56:	88 23       	and	r24, r24
    1f58:	11 f1       	breq	.+68     	; 0x1f9e <loop+0x1ae>
    1f5a:	20 91 7d 03 	lds	r18, 0x037D	; 0x80037d <zeitLocal>
    1f5e:	30 91 7e 03 	lds	r19, 0x037E	; 0x80037e <zeitLocal+0x1>
    1f62:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <weckzeit>
    1f66:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <weckzeit+0x1>
    1f6a:	28 17       	cp	r18, r24
    1f6c:	39 07       	cpc	r19, r25
    1f6e:	b9 f4       	brne	.+46     	; 0x1f9e <loop+0x1ae>
    1f70:	20 91 7f 03 	lds	r18, 0x037F	; 0x80037f <zeitLocal+0x2>
    1f74:	30 91 80 03 	lds	r19, 0x0380	; 0x800380 <zeitLocal+0x3>
    1f78:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <weckzeit+0x2>
    1f7c:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <weckzeit+0x3>
    1f80:	28 17       	cp	r18, r24
    1f82:	39 07       	cpc	r19, r25
    1f84:	61 f4       	brne	.+24     	; 0x1f9e <loop+0x1ae>
    1f86:	20 91 81 03 	lds	r18, 0x0381	; 0x800381 <zeitLocal+0x4>
    1f8a:	30 91 82 03 	lds	r19, 0x0382	; 0x800382 <zeitLocal+0x5>
    1f8e:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <weckzeit+0x4>
    1f92:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <weckzeit+0x5>
    1f96:	28 17       	cp	r18, r24
    1f98:	39 07       	cpc	r19, r25
    1f9a:	09 f4       	brne	.+2      	; 0x1f9e <loop+0x1ae>
    1f9c:	fd c0       	rjmp	.+506    	; 0x2198 <loop+0x3a8>
	input = getkey();
    1f9e:	0e 94 27 01 	call	0x24e	; 0x24e <_Z6getkeyv>
    1fa2:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <_ZL5input+0x1>
    1fa6:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <_ZL5input>
		if(buzzer)
    1faa:	20 91 72 03 	lds	r18, 0x0372	; 0x800372 <buzzer>
    1fae:	30 91 73 03 	lds	r19, 0x0373	; 0x800373 <buzzer+0x1>
    1fb2:	23 2b       	or	r18, r19
    1fb4:	c1 f0       	breq	.+48     	; 0x1fe6 <loop+0x1f6>
		{
			if(input){
    1fb6:	89 2b       	or	r24, r25
    1fb8:	49 f0       	breq	.+18     	; 0x1fcc <loop+0x1dc>
				lcd.noBacklight();
    1fba:	83 e1       	ldi	r24, 0x13	; 19
    1fbc:	95 e0       	ldi	r25, 0x05	; 5
    1fbe:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <_ZN7hd4478011noBacklightEv>
				buzzer = 0;
    1fc2:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <buzzer+0x1>
    1fc6:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <buzzer>
    1fca:	0d c0       	rjmp	.+26     	; 0x1fe6 <loop+0x1f6>
			}
			else if(zeitLocal.GetSeconds()%2) lcd.backlight(); else lcd.noBacklight();
    1fcc:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <zeitLocal+0x4>
    1fd0:	80 ff       	sbrs	r24, 0
    1fd2:	05 c0       	rjmp	.+10     	; 0x1fde <loop+0x1ee>
    1fd4:	83 e1       	ldi	r24, 0x13	; 19
    1fd6:	95 e0       	ldi	r25, 0x05	; 5
    1fd8:	0e 94 03 16 	call	0x2c06	; 0x2c06 <_ZN7hd447809backlightEv>
    1fdc:	04 c0       	rjmp	.+8      	; 0x1fe6 <loop+0x1f6>
    1fde:	83 e1       	ldi	r24, 0x13	; 19
    1fe0:	95 e0       	ldi	r25, 0x05	; 5
    1fe2:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <_ZN7hd4478011noBacklightEv>
		}
	if (watchmenu[menu].active) input = watchmenu[menu].active(input);
    1fe6:	e0 91 58 03 	lds	r30, 0x0358	; 0x800358 <_ZL4menu>
    1fea:	f0 91 59 03 	lds	r31, 0x0359	; 0x800359 <_ZL4menu+0x1>
    1fee:	74 e0       	ldi	r23, 0x04	; 4
    1ff0:	ee 0f       	add	r30, r30
    1ff2:	ff 1f       	adc	r31, r31
    1ff4:	7a 95       	dec	r23
    1ff6:	e1 f7       	brne	.-8      	; 0x1ff0 <loop+0x200>
    1ff8:	e4 57       	subi	r30, 0x74	; 116
    1ffa:	fd 4f       	sbci	r31, 0xFD	; 253
    1ffc:	02 84       	ldd	r0, Z+10	; 0x0a
    1ffe:	f3 85       	ldd	r31, Z+11	; 0x0b
    2000:	e0 2d       	mov	r30, r0
    2002:	30 97       	sbiw	r30, 0x00	; 0
    2004:	49 f0       	breq	.+18     	; 0x2018 <loop+0x228>
    2006:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <_ZL5input>
    200a:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <_ZL5input+0x1>
    200e:	09 95       	icall
    2010:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <_ZL5input+0x1>
    2014:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <_ZL5input>
		//! cyclic call to active function as long as menu n is active
	switch(input) {
    2018:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <_ZL5input>
    201c:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <_ZL5input+0x1>
    2020:	83 30       	cpi	r24, 0x03	; 3
    2022:	91 05       	cpc	r25, r1
    2024:	d9 f1       	breq	.+118    	; 0x209c <loop+0x2ac>
    2026:	34 f4       	brge	.+12     	; 0x2034 <loop+0x244>
    2028:	81 30       	cpi	r24, 0x01	; 1
    202a:	91 05       	cpc	r25, r1
    202c:	79 f0       	breq	.+30     	; 0x204c <loop+0x25c>
    202e:	02 97       	sbiw	r24, 0x02	; 2
    2030:	19 f1       	breq	.+70     	; 0x2078 <loop+0x288>
    2032:	09 c0       	rjmp	.+18     	; 0x2046 <loop+0x256>
    2034:	85 30       	cpi	r24, 0x05	; 5
    2036:	91 05       	cpc	r25, r1
    2038:	09 f4       	brne	.+2      	; 0x203c <loop+0x24c>
    203a:	65 c0       	rjmp	.+202    	; 0x2106 <loop+0x316>
    203c:	0c f4       	brge	.+2      	; 0x2040 <loop+0x250>
    203e:	40 c0       	rjmp	.+128    	; 0x20c0 <loop+0x2d0>
    2040:	06 97       	sbiw	r24, 0x06	; 6
    2042:	09 f4       	brne	.+2      	; 0x2046 <loop+0x256>
    2044:	83 c0       	rjmp	.+262    	; 0x214c <loop+0x35c>
		default:
		case X_KEY:
		case NO_KEY:
		newmenu = -1; // no changes made
    2046:	8f ef       	ldi	r24, 0xFF	; 255
    2048:	9f ef       	ldi	r25, 0xFF	; 255
    204a:	11 c0       	rjmp	.+34     	; 0x206e <loop+0x27e>
		break;
		case UP_KEY:
		lcd.clear();
    204c:	83 e1       	ldi	r24, 0x13	; 19
    204e:	95 e0       	ldi	r25, 0x05	; 5
    2050:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].up;
    2054:	e0 91 58 03 	lds	r30, 0x0358	; 0x800358 <_ZL4menu>
    2058:	f0 91 59 03 	lds	r31, 0x0359	; 0x800359 <_ZL4menu+0x1>
    205c:	64 e0       	ldi	r22, 0x04	; 4
    205e:	ee 0f       	add	r30, r30
    2060:	ff 1f       	adc	r31, r31
    2062:	6a 95       	dec	r22
    2064:	e1 f7       	brne	.-8      	; 0x205e <loop+0x26e>
    2066:	e4 57       	subi	r30, 0x74	; 116
    2068:	fd 4f       	sbci	r31, 0xFD	; 253
    206a:	80 81       	ld	r24, Z
    206c:	91 81       	ldd	r25, Z+1	; 0x01
    206e:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <_ZL7newmenu+0x1>
    2072:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <_ZL7newmenu>
		break;
    2076:	7a c0       	rjmp	.+244    	; 0x216c <loop+0x37c>
		case LEFT_KEY:
		lcd.clear();
    2078:	83 e1       	ldi	r24, 0x13	; 19
    207a:	95 e0       	ldi	r25, 0x05	; 5
    207c:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].left;
    2080:	e0 91 58 03 	lds	r30, 0x0358	; 0x800358 <_ZL4menu>
    2084:	f0 91 59 03 	lds	r31, 0x0359	; 0x800359 <_ZL4menu+0x1>
    2088:	54 e0       	ldi	r21, 0x04	; 4
    208a:	ee 0f       	add	r30, r30
    208c:	ff 1f       	adc	r31, r31
    208e:	5a 95       	dec	r21
    2090:	e1 f7       	brne	.-8      	; 0x208a <loop+0x29a>
    2092:	e4 57       	subi	r30, 0x74	; 116
    2094:	fd 4f       	sbci	r31, 0xFD	; 253
    2096:	82 81       	ldd	r24, Z+2	; 0x02
    2098:	93 81       	ldd	r25, Z+3	; 0x03
    209a:	e9 cf       	rjmp	.-46     	; 0x206e <loop+0x27e>
		break;
		case DOWN_KEY:
		lcd.clear();
    209c:	83 e1       	ldi	r24, 0x13	; 19
    209e:	95 e0       	ldi	r25, 0x05	; 5
    20a0:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].down;
    20a4:	e0 91 58 03 	lds	r30, 0x0358	; 0x800358 <_ZL4menu>
    20a8:	f0 91 59 03 	lds	r31, 0x0359	; 0x800359 <_ZL4menu+0x1>
    20ac:	44 e0       	ldi	r20, 0x04	; 4
    20ae:	ee 0f       	add	r30, r30
    20b0:	ff 1f       	adc	r31, r31
    20b2:	4a 95       	dec	r20
    20b4:	e1 f7       	brne	.-8      	; 0x20ae <loop+0x2be>
    20b6:	e4 57       	subi	r30, 0x74	; 116
    20b8:	fd 4f       	sbci	r31, 0xFD	; 253
    20ba:	84 81       	ldd	r24, Z+4	; 0x04
    20bc:	95 81       	ldd	r25, Z+5	; 0x05
    20be:	d7 cf       	rjmp	.-82     	; 0x206e <loop+0x27e>
		break;
		case RIGHT_KEY:
		lcd.clear();
    20c0:	83 e1       	ldi	r24, 0x13	; 19
    20c2:	95 e0       	ldi	r25, 0x05	; 5
    20c4:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <_ZN7hd447805clearEv>
		if(watchmenu[menu].goright != NULL) {
    20c8:	e0 91 58 03 	lds	r30, 0x0358	; 0x800358 <_ZL4menu>
    20cc:	f0 91 59 03 	lds	r31, 0x0359	; 0x800359 <_ZL4menu+0x1>
    20d0:	34 e0       	ldi	r19, 0x04	; 4
    20d2:	ee 0f       	add	r30, r30
    20d4:	ff 1f       	adc	r31, r31
    20d6:	3a 95       	dec	r19
    20d8:	e1 f7       	brne	.-8      	; 0x20d2 <loop+0x2e2>
    20da:	e4 57       	subi	r30, 0x74	; 116
    20dc:	fd 4f       	sbci	r31, 0xFD	; 253
    20de:	04 84       	ldd	r0, Z+12	; 0x0c
    20e0:	f5 85       	ldd	r31, Z+13	; 0x0d
    20e2:	e0 2d       	mov	r30, r0
    20e4:	30 97       	sbiw	r30, 0x00	; 0
    20e6:	09 f0       	breq	.+2      	; 0x20ea <loop+0x2fa>
			//! call go right function with new value
			watchmenu[menu].goright();
    20e8:	09 95       	icall
		}
		newmenu = watchmenu[menu].right;
    20ea:	e0 91 58 03 	lds	r30, 0x0358	; 0x800358 <_ZL4menu>
    20ee:	f0 91 59 03 	lds	r31, 0x0359	; 0x800359 <_ZL4menu+0x1>
    20f2:	24 e0       	ldi	r18, 0x04	; 4
    20f4:	ee 0f       	add	r30, r30
    20f6:	ff 1f       	adc	r31, r31
    20f8:	2a 95       	dec	r18
    20fa:	e1 f7       	brne	.-8      	; 0x20f4 <loop+0x304>
    20fc:	e4 57       	subi	r30, 0x74	; 116
    20fe:	fd 4f       	sbci	r31, 0xFD	; 253
    2100:	86 81       	ldd	r24, Z+6	; 0x06
    2102:	97 81       	ldd	r25, Z+7	; 0x07
    2104:	b4 cf       	rjmp	.-152    	; 0x206e <loop+0x27e>
		break;
		case OK_KEY:
		lcd.clear();
    2106:	83 e1       	ldi	r24, 0x13	; 19
    2108:	95 e0       	ldi	r25, 0x05	; 5
    210a:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <_ZN7hd447805clearEv>
		if(watchmenu[menu].positive != NULL) {
    210e:	e0 91 58 03 	lds	r30, 0x0358	; 0x800358 <_ZL4menu>
    2112:	f0 91 59 03 	lds	r31, 0x0359	; 0x800359 <_ZL4menu+0x1>
    2116:	94 e0       	ldi	r25, 0x04	; 4
    2118:	ee 0f       	add	r30, r30
    211a:	ff 1f       	adc	r31, r31
    211c:	9a 95       	dec	r25
    211e:	e1 f7       	brne	.-8      	; 0x2118 <loop+0x328>
    2120:	e4 57       	subi	r30, 0x74	; 116
    2122:	fd 4f       	sbci	r31, 0xFD	; 253
    2124:	06 84       	ldd	r0, Z+14	; 0x0e
    2126:	f7 85       	ldd	r31, Z+15	; 0x0f
    2128:	e0 2d       	mov	r30, r0
    212a:	30 97       	sbiw	r30, 0x00	; 0
    212c:	09 f0       	breq	.+2      	; 0x2130 <loop+0x340>
			//! call positive answer function with new value
			watchmenu[menu].positive();
    212e:	09 95       	icall
		}
		newmenu = watchmenu[menu].ok;
    2130:	e0 91 58 03 	lds	r30, 0x0358	; 0x800358 <_ZL4menu>
    2134:	f0 91 59 03 	lds	r31, 0x0359	; 0x800359 <_ZL4menu+0x1>
    2138:	84 e0       	ldi	r24, 0x04	; 4
    213a:	ee 0f       	add	r30, r30
    213c:	ff 1f       	adc	r31, r31
    213e:	8a 95       	dec	r24
    2140:	e1 f7       	brne	.-8      	; 0x213a <loop+0x34a>
    2142:	e4 57       	subi	r30, 0x74	; 116
    2144:	fd 4f       	sbci	r31, 0xFD	; 253
    2146:	80 85       	ldd	r24, Z+8	; 0x08
    2148:	91 85       	ldd	r25, Z+9	; 0x09
    214a:	91 cf       	rjmp	.-222    	; 0x206e <loop+0x27e>
		break;
		case BK_KEY:
		lcd.clear();
    214c:	83 e1       	ldi	r24, 0x13	; 19
    214e:	95 e0       	ldi	r25, 0x05	; 5
    2150:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <_ZN7hd447805clearEv>
		lcd.noCursor();
    2154:	83 e1       	ldi	r24, 0x13	; 19
    2156:	95 e0       	ldi	r25, 0x05	; 5
    2158:	0e 94 10 17 	call	0x2e20	; 0x2e20 <_ZN7hd447808noCursorEv>
		lcd.noBlink();
    215c:	83 e1       	ldi	r24, 0x13	; 19
    215e:	95 e0       	ldi	r25, 0x05	; 5
    2160:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <_ZN7hd447807noBlinkEv>
		newmenu = 0;
    2164:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <_ZL7newmenu+0x1>
    2168:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <_ZL7newmenu>
		break;
	}
	if(newmenu >= 0) menu = newmenu;
    216c:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <_ZL7newmenu>
    2170:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <_ZL7newmenu+0x1>
    2174:	97 fd       	sbrc	r25, 7
    2176:	17 c0       	rjmp	.+46     	; 0x21a6 <loop+0x3b6>
    2178:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <_ZL4menu+0x1>
    217c:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <_ZL4menu>

	} //else Klammer
}
    2180:	12 c0       	rjmp	.+36     	; 0x21a6 <loop+0x3b6>
{
	//Wenn keine GPS-Daten vorhanden sind wird weiter nach Daten gesucht.
	//Wurden beim Setup GPS-DAten gefunden wird alle 30min die Uhrzeit und das Datum synchronisiert.
	if (gpsDataReceived == false || (timeDataReceived + 1000*60*30) < millis()) 
	{
		gpsDataReceived = readGPS();
    2182:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <_Z7readGPSv>
    2186:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <gpsDataReceived>
		timeDataReceived = millis();
    218a:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <millis>
    218e:	70 93 a8 03 	sts	0x03A8, r23	; 0x8003a8 <timeDataReceived+0x1>
    2192:	60 93 a7 03 	sts	0x03A7, r22	; 0x8003a7 <timeDataReceived>
    2196:	4b ce       	rjmp	.-874    	; 0x1e2e <loop+0x3e>
		{
			duration = 0; //Count clear, wait for the next count
		}
	}
	Watch();
	if(weckerStatus&&(zeitLocal.GetHours()==weckzeit.GetHours())&&(zeitLocal.GetMinutes()==weckzeit.GetMinutes())&&(zeitLocal.GetSeconds()==weckzeit.GetSeconds())) buzzer = 1;
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	90 93 73 03 	sts	0x0373, r25	; 0x800373 <buzzer+0x1>
    21a0:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <buzzer>
    21a4:	fc ce       	rjmp	.-520    	; 0x1f9e <loop+0x1ae>
		break;
	}
	if(newmenu >= 0) menu = newmenu;

	} //else Klammer
}
    21a6:	1f 91       	pop	r17
    21a8:	0f 91       	pop	r16
    21aa:	ff 90       	pop	r15
    21ac:	ef 90       	pop	r14
    21ae:	df 90       	pop	r13
    21b0:	cf 90       	pop	r12
    21b2:	08 95       	ret

000021b4 <_ZN3PID7ComputeEv>:
	   else if(*myOutput < outMin) *myOutput = outMin;

	   if(outputSum > outMax) outputSum= outMax;
	   else if(outputSum < outMin) outputSum= outMin;
   }
}
    21b4:	2f 92       	push	r2
    21b6:	3f 92       	push	r3
    21b8:	4f 92       	push	r4
    21ba:	5f 92       	push	r5
    21bc:	6f 92       	push	r6
    21be:	7f 92       	push	r7
    21c0:	8f 92       	push	r8
    21c2:	9f 92       	push	r9
    21c4:	af 92       	push	r10
    21c6:	bf 92       	push	r11
    21c8:	cf 92       	push	r12
    21ca:	df 92       	push	r13
    21cc:	ef 92       	push	r14
    21ce:	ff 92       	push	r15
    21d0:	0f 93       	push	r16
    21d2:	1f 93       	push	r17
    21d4:	cf 93       	push	r28
    21d6:	df 93       	push	r29
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
    21dc:	60 97       	sbiw	r28, 0x10	; 16
    21de:	0f b6       	in	r0, 0x3f	; 63
    21e0:	f8 94       	cli
    21e2:	de bf       	out	0x3e, r29	; 62
    21e4:	0f be       	out	0x3f, r0	; 63
    21e6:	cd bf       	out	0x3d, r28	; 61
    21e8:	dc 01       	movw	r26, r24
    21ea:	da 96       	adiw	r26, 0x3a	; 58
    21ec:	bc 91       	ld	r27, X
    21ee:	b9 83       	std	Y+1, r27	; 0x01
    21f0:	b1 11       	cpse	r27, r1
    21f2:	02 c0       	rjmp	.+4      	; 0x21f8 <_ZN3PID7ComputeEv+0x44>
    21f4:	19 82       	std	Y+1, r1	; 0x01
    21f6:	2b c1       	rjmp	.+598    	; 0x244e <_ZN3PID7ComputeEv+0x29a>
    21f8:	98 8b       	std	Y+16, r25	; 0x10
    21fa:	8f 87       	std	Y+15, r24	; 0x0f
    21fc:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <millis>
    2200:	6e 83       	std	Y+6, r22	; 0x06
    2202:	7f 83       	std	Y+7, r23	; 0x07
    2204:	88 87       	std	Y+8, r24	; 0x08
    2206:	99 87       	std	Y+9, r25	; 0x09
    2208:	ef 85       	ldd	r30, Y+15	; 0x0f
    220a:	f8 89       	ldd	r31, Y+16	; 0x10
    220c:	82 a1       	ldd	r24, Z+34	; 0x22
    220e:	93 a1       	ldd	r25, Z+35	; 0x23
    2210:	a4 a1       	ldd	r26, Z+36	; 0x24
    2212:	b5 a1       	ldd	r27, Z+37	; 0x25
    2214:	4e 81       	ldd	r20, Y+6	; 0x06
    2216:	5f 81       	ldd	r21, Y+7	; 0x07
    2218:	68 85       	ldd	r22, Y+8	; 0x08
    221a:	79 85       	ldd	r23, Y+9	; 0x09
    221c:	48 1b       	sub	r20, r24
    221e:	59 0b       	sbc	r21, r25
    2220:	6a 0b       	sbc	r22, r26
    2222:	7b 0b       	sbc	r23, r27
    2224:	86 a5       	ldd	r24, Z+46	; 0x2e
    2226:	97 a5       	ldd	r25, Z+47	; 0x2f
    2228:	a0 a9       	ldd	r26, Z+48	; 0x30
    222a:	b1 a9       	ldd	r27, Z+49	; 0x31
    222c:	48 17       	cp	r20, r24
    222e:	59 07       	cpc	r21, r25
    2230:	6a 07       	cpc	r22, r26
    2232:	7b 07       	cpc	r23, r27
    2234:	f8 f2       	brcs	.-66     	; 0x21f4 <_ZN3PID7ComputeEv+0x40>
    2236:	04 8c       	ldd	r0, Z+28	; 0x1c
    2238:	f5 8d       	ldd	r31, Z+29	; 0x1d
    223a:	e0 2d       	mov	r30, r0
    223c:	80 81       	ld	r24, Z
    223e:	91 81       	ldd	r25, Z+1	; 0x01
    2240:	a2 81       	ldd	r26, Z+2	; 0x02
    2242:	b3 81       	ldd	r27, Z+3	; 0x03
    2244:	8a 83       	std	Y+2, r24	; 0x02
    2246:	9b 83       	std	Y+3, r25	; 0x03
    2248:	ac 83       	std	Y+4, r26	; 0x04
    224a:	bd 83       	std	Y+5, r27	; 0x05
    224c:	af 85       	ldd	r26, Y+15	; 0x0f
    224e:	b8 89       	ldd	r27, Y+16	; 0x10
    2250:	90 96       	adiw	r26, 0x20	; 32
    2252:	ed 91       	ld	r30, X+
    2254:	fc 91       	ld	r31, X
    2256:	91 97       	sbiw	r26, 0x21	; 33
    2258:	2a 81       	ldd	r18, Y+2	; 0x02
    225a:	3b 81       	ldd	r19, Y+3	; 0x03
    225c:	4c 81       	ldd	r20, Y+4	; 0x04
    225e:	5d 81       	ldd	r21, Y+5	; 0x05
    2260:	60 81       	ld	r22, Z
    2262:	71 81       	ldd	r23, Z+1	; 0x01
    2264:	82 81       	ldd	r24, Z+2	; 0x02
    2266:	93 81       	ldd	r25, Z+3	; 0x03
    2268:	0e 94 07 1b 	call	0x360e	; 0x360e <__subsf3>
    226c:	4b 01       	movw	r8, r22
    226e:	5c 01       	movw	r10, r24
    2270:	ef 85       	ldd	r30, Y+15	; 0x0f
    2272:	f8 89       	ldd	r31, Y+16	; 0x10
    2274:	22 a5       	ldd	r18, Z+42	; 0x2a
    2276:	33 a5       	ldd	r19, Z+43	; 0x2b
    2278:	44 a5       	ldd	r20, Z+44	; 0x2c
    227a:	55 a5       	ldd	r21, Z+45	; 0x2d
    227c:	6a 81       	ldd	r22, Y+2	; 0x02
    227e:	7b 81       	ldd	r23, Y+3	; 0x03
    2280:	8c 81       	ldd	r24, Y+4	; 0x04
    2282:	9d 81       	ldd	r25, Y+5	; 0x05
    2284:	0e 94 07 1b 	call	0x360e	; 0x360e <__subsf3>
    2288:	6b 01       	movw	r12, r22
    228a:	7c 01       	movw	r14, r24
    228c:	af 85       	ldd	r26, Y+15	; 0x0f
    228e:	b8 89       	ldd	r27, Y+16	; 0x10
    2290:	50 96       	adiw	r26, 0x10	; 16
    2292:	2d 91       	ld	r18, X+
    2294:	3d 91       	ld	r19, X+
    2296:	4d 91       	ld	r20, X+
    2298:	5c 91       	ld	r21, X
    229a:	53 97       	sbiw	r26, 0x13	; 19
    229c:	c5 01       	movw	r24, r10
    229e:	b4 01       	movw	r22, r8
    22a0:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__mulsf3>
    22a4:	ef 85       	ldd	r30, Y+15	; 0x0f
    22a6:	f8 89       	ldd	r31, Y+16	; 0x10
    22a8:	26 a1       	ldd	r18, Z+38	; 0x26
    22aa:	37 a1       	ldd	r19, Z+39	; 0x27
    22ac:	40 a5       	ldd	r20, Z+40	; 0x28
    22ae:	51 a5       	ldd	r21, Z+41	; 0x29
    22b0:	0e 94 08 1b 	call	0x3610	; 0x3610 <__addsf3>
    22b4:	2b 01       	movw	r4, r22
    22b6:	3c 01       	movw	r6, r24
    22b8:	af 85       	ldd	r26, Y+15	; 0x0f
    22ba:	b8 89       	ldd	r27, Y+16	; 0x10
    22bc:	96 96       	adiw	r26, 0x26	; 38
    22be:	6d 93       	st	X+, r22
    22c0:	7d 93       	st	X+, r23
    22c2:	8d 93       	st	X+, r24
    22c4:	9c 93       	st	X, r25
    22c6:	99 97       	sbiw	r26, 0x29	; 41
    22c8:	db 96       	adiw	r26, 0x3b	; 59
    22ca:	bc 91       	ld	r27, X
    22cc:	ba 87       	std	Y+10, r27	; 0x0a
    22ce:	b1 11       	cpse	r27, r1
    22d0:	18 c0       	rjmp	.+48     	; 0x2302 <_ZN3PID7ComputeEv+0x14e>
    22d2:	ef 85       	ldd	r30, Y+15	; 0x0f
    22d4:	f8 89       	ldd	r31, Y+16	; 0x10
    22d6:	24 85       	ldd	r18, Z+12	; 0x0c
    22d8:	35 85       	ldd	r19, Z+13	; 0x0d
    22da:	46 85       	ldd	r20, Z+14	; 0x0e
    22dc:	57 85       	ldd	r21, Z+15	; 0x0f
    22de:	c7 01       	movw	r24, r14
    22e0:	b6 01       	movw	r22, r12
    22e2:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__mulsf3>
    22e6:	9b 01       	movw	r18, r22
    22e8:	ac 01       	movw	r20, r24
    22ea:	c3 01       	movw	r24, r6
    22ec:	b2 01       	movw	r22, r4
    22ee:	0e 94 07 1b 	call	0x360e	; 0x360e <__subsf3>
    22f2:	af 85       	ldd	r26, Y+15	; 0x0f
    22f4:	b8 89       	ldd	r27, Y+16	; 0x10
    22f6:	96 96       	adiw	r26, 0x26	; 38
    22f8:	6d 93       	st	X+, r22
    22fa:	7d 93       	st	X+, r23
    22fc:	8d 93       	st	X+, r24
    22fe:	9c 93       	st	X, r25
    2300:	99 97       	sbiw	r26, 0x29	; 41
    2302:	ef 85       	ldd	r30, Y+15	; 0x0f
    2304:	f8 89       	ldd	r31, Y+16	; 0x10
    2306:	46 a0       	ldd	r4, Z+38	; 0x26
    2308:	57 a0       	ldd	r5, Z+39	; 0x27
    230a:	60 a4       	ldd	r6, Z+40	; 0x28
    230c:	71 a4       	ldd	r7, Z+41	; 0x29
    230e:	16 a9       	ldd	r17, Z+54	; 0x36
    2310:	07 a9       	ldd	r16, Z+55	; 0x37
    2312:	30 ac       	ldd	r3, Z+56	; 0x38
    2314:	21 ac       	ldd	r2, Z+57	; 0x39
    2316:	21 2f       	mov	r18, r17
    2318:	30 2f       	mov	r19, r16
    231a:	43 2d       	mov	r20, r3
    231c:	52 2d       	mov	r21, r2
    231e:	c3 01       	movw	r24, r6
    2320:	b2 01       	movw	r22, r4
    2322:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <__gesf2>
    2326:	18 16       	cp	r1, r24
    2328:	2c f4       	brge	.+10     	; 0x2334 <_ZN3PID7ComputeEv+0x180>
    232a:	81 2f       	mov	r24, r17
    232c:	90 2f       	mov	r25, r16
    232e:	a3 2d       	mov	r26, r3
    2330:	b2 2d       	mov	r27, r2
    2332:	18 c0       	rjmp	.+48     	; 0x2364 <_ZN3PID7ComputeEv+0x1b0>
    2334:	af 85       	ldd	r26, Y+15	; 0x0f
    2336:	b8 89       	ldd	r27, Y+16	; 0x10
    2338:	d2 96       	adiw	r26, 0x32	; 50
    233a:	8d 91       	ld	r24, X+
    233c:	9d 91       	ld	r25, X+
    233e:	0d 90       	ld	r0, X+
    2340:	bc 91       	ld	r27, X
    2342:	a0 2d       	mov	r26, r0
    2344:	8b 87       	std	Y+11, r24	; 0x0b
    2346:	9c 87       	std	Y+12, r25	; 0x0c
    2348:	ad 87       	std	Y+13, r26	; 0x0d
    234a:	be 87       	std	Y+14, r27	; 0x0e
    234c:	9c 01       	movw	r18, r24
    234e:	ad 01       	movw	r20, r26
    2350:	c3 01       	movw	r24, r6
    2352:	b2 01       	movw	r22, r4
    2354:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <__cmpsf2>
    2358:	87 ff       	sbrs	r24, 7
    235a:	0a c0       	rjmp	.+20     	; 0x2370 <_ZN3PID7ComputeEv+0x1bc>
    235c:	8b 85       	ldd	r24, Y+11	; 0x0b
    235e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2360:	ad 85       	ldd	r26, Y+13	; 0x0d
    2362:	be 85       	ldd	r27, Y+14	; 0x0e
    2364:	ef 85       	ldd	r30, Y+15	; 0x0f
    2366:	f8 89       	ldd	r31, Y+16	; 0x10
    2368:	86 a3       	std	Z+38, r24	; 0x26
    236a:	97 a3       	std	Z+39, r25	; 0x27
    236c:	a0 a7       	std	Z+40, r26	; 0x28
    236e:	b1 a7       	std	Z+41, r27	; 0x29
    2370:	fa 85       	ldd	r31, Y+10	; 0x0a
    2372:	ff 23       	and	r31, r31
    2374:	79 f0       	breq	.+30     	; 0x2394 <_ZN3PID7ComputeEv+0x1e0>
    2376:	af 85       	ldd	r26, Y+15	; 0x0f
    2378:	b8 89       	ldd	r27, Y+16	; 0x10
    237a:	1c 96       	adiw	r26, 0x0c	; 12
    237c:	2d 91       	ld	r18, X+
    237e:	3d 91       	ld	r19, X+
    2380:	4d 91       	ld	r20, X+
    2382:	5c 91       	ld	r21, X
    2384:	1f 97       	sbiw	r26, 0x0f	; 15
    2386:	c5 01       	movw	r24, r10
    2388:	b4 01       	movw	r22, r8
    238a:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__mulsf3>
    238e:	4b 01       	movw	r8, r22
    2390:	5c 01       	movw	r10, r24
    2392:	03 c0       	rjmp	.+6      	; 0x239a <_ZN3PID7ComputeEv+0x1e6>
    2394:	81 2c       	mov	r8, r1
    2396:	91 2c       	mov	r9, r1
    2398:	54 01       	movw	r10, r8
    239a:	ef 85       	ldd	r30, Y+15	; 0x0f
    239c:	f8 89       	ldd	r31, Y+16	; 0x10
    239e:	24 89       	ldd	r18, Z+20	; 0x14
    23a0:	35 89       	ldd	r19, Z+21	; 0x15
    23a2:	46 89       	ldd	r20, Z+22	; 0x16
    23a4:	57 89       	ldd	r21, Z+23	; 0x17
    23a6:	c7 01       	movw	r24, r14
    23a8:	b6 01       	movw	r22, r12
    23aa:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__mulsf3>
    23ae:	9b 01       	movw	r18, r22
    23b0:	ac 01       	movw	r20, r24
    23b2:	af 85       	ldd	r26, Y+15	; 0x0f
    23b4:	b8 89       	ldd	r27, Y+16	; 0x10
    23b6:	96 96       	adiw	r26, 0x26	; 38
    23b8:	6d 91       	ld	r22, X+
    23ba:	7d 91       	ld	r23, X+
    23bc:	8d 91       	ld	r24, X+
    23be:	9c 91       	ld	r25, X
    23c0:	99 97       	sbiw	r26, 0x29	; 41
    23c2:	0e 94 07 1b 	call	0x360e	; 0x360e <__subsf3>
    23c6:	a5 01       	movw	r20, r10
    23c8:	94 01       	movw	r18, r8
    23ca:	0e 94 08 1b 	call	0x3610	; 0x3610 <__addsf3>
    23ce:	6b 01       	movw	r12, r22
    23d0:	7c 01       	movw	r14, r24
    23d2:	9b 01       	movw	r18, r22
    23d4:	ac 01       	movw	r20, r24
    23d6:	61 2f       	mov	r22, r17
    23d8:	70 2f       	mov	r23, r16
    23da:	83 2d       	mov	r24, r3
    23dc:	92 2d       	mov	r25, r2
    23de:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <__cmpsf2>
    23e2:	87 fd       	sbrc	r24, 7
    23e4:	14 c0       	rjmp	.+40     	; 0x240e <_ZN3PID7ComputeEv+0x25a>
    23e6:	ef 85       	ldd	r30, Y+15	; 0x0f
    23e8:	f8 89       	ldd	r31, Y+16	; 0x10
    23ea:	12 a9       	ldd	r17, Z+50	; 0x32
    23ec:	03 a9       	ldd	r16, Z+51	; 0x33
    23ee:	34 a8       	ldd	r3, Z+52	; 0x34
    23f0:	25 a8       	ldd	r2, Z+53	; 0x35
    23f2:	21 2f       	mov	r18, r17
    23f4:	30 2f       	mov	r19, r16
    23f6:	43 2d       	mov	r20, r3
    23f8:	52 2d       	mov	r21, r2
    23fa:	b6 01       	movw	r22, r12
    23fc:	c7 01       	movw	r24, r14
    23fe:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <__cmpsf2>
    2402:	87 fd       	sbrc	r24, 7
    2404:	04 c0       	rjmp	.+8      	; 0x240e <_ZN3PID7ComputeEv+0x25a>
    2406:	1c 2d       	mov	r17, r12
    2408:	0d 2d       	mov	r16, r13
    240a:	3e 2c       	mov	r3, r14
    240c:	2f 2c       	mov	r2, r15
    240e:	af 85       	ldd	r26, Y+15	; 0x0f
    2410:	b8 89       	ldd	r27, Y+16	; 0x10
    2412:	5e 96       	adiw	r26, 0x1e	; 30
    2414:	ed 91       	ld	r30, X+
    2416:	fc 91       	ld	r31, X
    2418:	5f 97       	sbiw	r26, 0x1f	; 31
    241a:	81 2f       	mov	r24, r17
    241c:	90 2f       	mov	r25, r16
    241e:	a3 2d       	mov	r26, r3
    2420:	b2 2d       	mov	r27, r2
    2422:	80 83       	st	Z, r24
    2424:	91 83       	std	Z+1, r25	; 0x01
    2426:	a2 83       	std	Z+2, r26	; 0x02
    2428:	b3 83       	std	Z+3, r27	; 0x03
    242a:	8a 81       	ldd	r24, Y+2	; 0x02
    242c:	9b 81       	ldd	r25, Y+3	; 0x03
    242e:	ac 81       	ldd	r26, Y+4	; 0x04
    2430:	bd 81       	ldd	r27, Y+5	; 0x05
    2432:	ef 85       	ldd	r30, Y+15	; 0x0f
    2434:	f8 89       	ldd	r31, Y+16	; 0x10
    2436:	82 a7       	std	Z+42, r24	; 0x2a
    2438:	93 a7       	std	Z+43, r25	; 0x2b
    243a:	a4 a7       	std	Z+44, r26	; 0x2c
    243c:	b5 a7       	std	Z+45, r27	; 0x2d
    243e:	8e 81       	ldd	r24, Y+6	; 0x06
    2440:	9f 81       	ldd	r25, Y+7	; 0x07
    2442:	a8 85       	ldd	r26, Y+8	; 0x08
    2444:	b9 85       	ldd	r27, Y+9	; 0x09
    2446:	82 a3       	std	Z+34, r24	; 0x22
    2448:	93 a3       	std	Z+35, r25	; 0x23
    244a:	a4 a3       	std	Z+36, r26	; 0x24
    244c:	b5 a3       	std	Z+37, r27	; 0x25
    244e:	89 81       	ldd	r24, Y+1	; 0x01
    2450:	60 96       	adiw	r28, 0x10	; 16
    2452:	0f b6       	in	r0, 0x3f	; 63
    2454:	f8 94       	cli
    2456:	de bf       	out	0x3e, r29	; 62
    2458:	0f be       	out	0x3f, r0	; 63
    245a:	cd bf       	out	0x3d, r28	; 61
    245c:	df 91       	pop	r29
    245e:	cf 91       	pop	r28
    2460:	1f 91       	pop	r17
    2462:	0f 91       	pop	r16
    2464:	ff 90       	pop	r15
    2466:	ef 90       	pop	r14
    2468:	df 90       	pop	r13
    246a:	cf 90       	pop	r12
    246c:	bf 90       	pop	r11
    246e:	af 90       	pop	r10
    2470:	9f 90       	pop	r9
    2472:	8f 90       	pop	r8
    2474:	7f 90       	pop	r7
    2476:	6f 90       	pop	r6
    2478:	5f 90       	pop	r5
    247a:	4f 90       	pop	r4
    247c:	3f 90       	pop	r3
    247e:	2f 90       	pop	r2
    2480:	08 95       	ret

00002482 <_ZN3PID10SetTuningsEdddi>:
    2482:	4f 92       	push	r4
    2484:	5f 92       	push	r5
    2486:	6f 92       	push	r6
    2488:	7f 92       	push	r7
    248a:	8f 92       	push	r8
    248c:	9f 92       	push	r9
    248e:	af 92       	push	r10
    2490:	bf 92       	push	r11
    2492:	cf 92       	push	r12
    2494:	df 92       	push	r13
    2496:	ef 92       	push	r14
    2498:	ff 92       	push	r15
    249a:	0f 93       	push	r16
    249c:	1f 93       	push	r17
    249e:	cf 93       	push	r28
    24a0:	df 93       	push	r29
    24a2:	00 d0       	rcall	.+0      	; 0x24a4 <_ZN3PID10SetTuningsEdddi+0x22>
    24a4:	00 d0       	rcall	.+0      	; 0x24a6 <_ZN3PID10SetTuningsEdddi+0x24>
    24a6:	00 d0       	rcall	.+0      	; 0x24a8 <_ZN3PID10SetTuningsEdddi+0x26>
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	9e 83       	std	Y+6, r25	; 0x06
    24ae:	8d 83       	std	Y+5, r24	; 0x05
    24b0:	49 83       	std	Y+1, r20	; 0x01
    24b2:	5a 83       	std	Y+2, r21	; 0x02
    24b4:	6b 83       	std	Y+3, r22	; 0x03
    24b6:	7c 83       	std	Y+4, r23	; 0x04
    24b8:	28 01       	movw	r4, r16
    24ba:	39 01       	movw	r6, r18
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	a9 01       	movw	r20, r18
    24c2:	69 81       	ldd	r22, Y+1	; 0x01
    24c4:	7a 81       	ldd	r23, Y+2	; 0x02
    24c6:	8b 81       	ldd	r24, Y+3	; 0x03
    24c8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ca:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <__cmpsf2>
    24ce:	87 fd       	sbrc	r24, 7
    24d0:	97 c0       	rjmp	.+302    	; 0x2600 <_ZN3PID10SetTuningsEdddi+0x17e>
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	a9 01       	movw	r20, r18
    24d8:	c3 01       	movw	r24, r6
    24da:	b2 01       	movw	r22, r4
    24dc:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <__cmpsf2>
    24e0:	87 fd       	sbrc	r24, 7
    24e2:	8e c0       	rjmp	.+284    	; 0x2600 <_ZN3PID10SetTuningsEdddi+0x17e>
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	a9 01       	movw	r20, r18
    24ea:	c7 01       	movw	r24, r14
    24ec:	b6 01       	movw	r22, r12
    24ee:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <__cmpsf2>
    24f2:	87 fd       	sbrc	r24, 7
    24f4:	85 c0       	rjmp	.+266    	; 0x2600 <_ZN3PID10SetTuningsEdddi+0x17e>
    24f6:	ad 81       	ldd	r26, Y+5	; 0x05
    24f8:	be 81       	ldd	r27, Y+6	; 0x06
    24fa:	5b 96       	adiw	r26, 0x1b	; 27
    24fc:	bc 92       	st	X, r11
    24fe:	ae 92       	st	-X, r10
    2500:	5a 97       	sbiw	r26, 0x1a	; 26
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	aa 94       	dec	r10
    2506:	ab 28       	or	r10, r11
    2508:	09 f0       	breq	.+2      	; 0x250c <_ZN3PID10SetTuningsEdddi+0x8a>
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	ed 81       	ldd	r30, Y+5	; 0x05
    250e:	fe 81       	ldd	r31, Y+6	; 0x06
    2510:	83 af       	std	Z+59, r24	; 0x3b
    2512:	89 81       	ldd	r24, Y+1	; 0x01
    2514:	9a 81       	ldd	r25, Y+2	; 0x02
    2516:	ab 81       	ldd	r26, Y+3	; 0x03
    2518:	bc 81       	ldd	r27, Y+4	; 0x04
    251a:	80 83       	st	Z, r24
    251c:	91 83       	std	Z+1, r25	; 0x01
    251e:	a2 83       	std	Z+2, r26	; 0x02
    2520:	b3 83       	std	Z+3, r27	; 0x03
    2522:	44 82       	std	Z+4, r4	; 0x04
    2524:	55 82       	std	Z+5, r5	; 0x05
    2526:	66 82       	std	Z+6, r6	; 0x06
    2528:	77 82       	std	Z+7, r7	; 0x07
    252a:	c0 86       	std	Z+8, r12	; 0x08
    252c:	d1 86       	std	Z+9, r13	; 0x09
    252e:	e2 86       	std	Z+10, r14	; 0x0a
    2530:	f3 86       	std	Z+11, r15	; 0x0b
    2532:	66 a5       	ldd	r22, Z+46	; 0x2e
    2534:	77 a5       	ldd	r23, Z+47	; 0x2f
    2536:	80 a9       	ldd	r24, Z+48	; 0x30
    2538:	91 a9       	ldd	r25, Z+49	; 0x31
    253a:	0e 94 21 1c 	call	0x3842	; 0x3842 <__floatunsisf>
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	4a e7       	ldi	r20, 0x7A	; 122
    2544:	54 e4       	ldi	r21, 0x44	; 68
    2546:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__divsf3>
    254a:	4b 01       	movw	r8, r22
    254c:	5c 01       	movw	r10, r24
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	9a 81       	ldd	r25, Y+2	; 0x02
    2552:	ab 81       	ldd	r26, Y+3	; 0x03
    2554:	bc 81       	ldd	r27, Y+4	; 0x04
    2556:	ed 81       	ldd	r30, Y+5	; 0x05
    2558:	fe 81       	ldd	r31, Y+6	; 0x06
    255a:	84 87       	std	Z+12, r24	; 0x0c
    255c:	95 87       	std	Z+13, r25	; 0x0d
    255e:	a6 87       	std	Z+14, r26	; 0x0e
    2560:	b7 87       	std	Z+15, r27	; 0x0f
    2562:	a5 01       	movw	r20, r10
    2564:	94 01       	movw	r18, r8
    2566:	c3 01       	movw	r24, r6
    2568:	b2 01       	movw	r22, r4
    256a:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__mulsf3>
    256e:	2b 01       	movw	r4, r22
    2570:	3c 01       	movw	r6, r24
    2572:	ad 81       	ldd	r26, Y+5	; 0x05
    2574:	be 81       	ldd	r27, Y+6	; 0x06
    2576:	50 96       	adiw	r26, 0x10	; 16
    2578:	6d 93       	st	X+, r22
    257a:	7d 93       	st	X+, r23
    257c:	8d 93       	st	X+, r24
    257e:	9c 93       	st	X, r25
    2580:	53 97       	sbiw	r26, 0x13	; 19
    2582:	a5 01       	movw	r20, r10
    2584:	94 01       	movw	r18, r8
    2586:	c7 01       	movw	r24, r14
    2588:	b6 01       	movw	r22, r12
    258a:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__divsf3>
    258e:	6b 01       	movw	r12, r22
    2590:	7c 01       	movw	r14, r24
    2592:	ed 81       	ldd	r30, Y+5	; 0x05
    2594:	fe 81       	ldd	r31, Y+6	; 0x06
    2596:	64 8b       	std	Z+20, r22	; 0x14
    2598:	75 8b       	std	Z+21, r23	; 0x15
    259a:	86 8b       	std	Z+22, r24	; 0x16
    259c:	97 8b       	std	Z+23, r25	; 0x17
    259e:	80 8d       	ldd	r24, Z+24	; 0x18
    25a0:	91 8d       	ldd	r25, Z+25	; 0x19
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	69 f5       	brne	.+90     	; 0x2600 <_ZN3PID10SetTuningsEdddi+0x17e>
    25a6:	29 81       	ldd	r18, Y+1	; 0x01
    25a8:	3a 81       	ldd	r19, Y+2	; 0x02
    25aa:	4b 81       	ldd	r20, Y+3	; 0x03
    25ac:	5c 81       	ldd	r21, Y+4	; 0x04
    25ae:	60 e0       	ldi	r22, 0x00	; 0
    25b0:	70 e0       	ldi	r23, 0x00	; 0
    25b2:	cb 01       	movw	r24, r22
    25b4:	0e 94 07 1b 	call	0x360e	; 0x360e <__subsf3>
    25b8:	ad 81       	ldd	r26, Y+5	; 0x05
    25ba:	be 81       	ldd	r27, Y+6	; 0x06
    25bc:	1c 96       	adiw	r26, 0x0c	; 12
    25be:	6d 93       	st	X+, r22
    25c0:	7d 93       	st	X+, r23
    25c2:	8d 93       	st	X+, r24
    25c4:	9c 93       	st	X, r25
    25c6:	1f 97       	sbiw	r26, 0x0f	; 15
    25c8:	a3 01       	movw	r20, r6
    25ca:	92 01       	movw	r18, r4
    25cc:	60 e0       	ldi	r22, 0x00	; 0
    25ce:	70 e0       	ldi	r23, 0x00	; 0
    25d0:	cb 01       	movw	r24, r22
    25d2:	0e 94 07 1b 	call	0x360e	; 0x360e <__subsf3>
    25d6:	ed 81       	ldd	r30, Y+5	; 0x05
    25d8:	fe 81       	ldd	r31, Y+6	; 0x06
    25da:	60 8b       	std	Z+16, r22	; 0x10
    25dc:	71 8b       	std	Z+17, r23	; 0x11
    25de:	82 8b       	std	Z+18, r24	; 0x12
    25e0:	93 8b       	std	Z+19, r25	; 0x13
    25e2:	a7 01       	movw	r20, r14
    25e4:	96 01       	movw	r18, r12
    25e6:	60 e0       	ldi	r22, 0x00	; 0
    25e8:	70 e0       	ldi	r23, 0x00	; 0
    25ea:	cb 01       	movw	r24, r22
    25ec:	0e 94 07 1b 	call	0x360e	; 0x360e <__subsf3>
    25f0:	ad 81       	ldd	r26, Y+5	; 0x05
    25f2:	be 81       	ldd	r27, Y+6	; 0x06
    25f4:	54 96       	adiw	r26, 0x14	; 20
    25f6:	6d 93       	st	X+, r22
    25f8:	7d 93       	st	X+, r23
    25fa:	8d 93       	st	X+, r24
    25fc:	9c 93       	st	X, r25
    25fe:	57 97       	sbiw	r26, 0x17	; 23
    2600:	26 96       	adiw	r28, 0x06	; 6
    2602:	0f b6       	in	r0, 0x3f	; 63
    2604:	f8 94       	cli
    2606:	de bf       	out	0x3e, r29	; 62
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	cd bf       	out	0x3d, r28	; 61
    260c:	df 91       	pop	r29
    260e:	cf 91       	pop	r28
    2610:	1f 91       	pop	r17
    2612:	0f 91       	pop	r16
    2614:	ff 90       	pop	r15
    2616:	ef 90       	pop	r14
    2618:	df 90       	pop	r13
    261a:	cf 90       	pop	r12
    261c:	bf 90       	pop	r11
    261e:	af 90       	pop	r10
    2620:	9f 90       	pop	r9
    2622:	8f 90       	pop	r8
    2624:	7f 90       	pop	r7
    2626:	6f 90       	pop	r6
    2628:	5f 90       	pop	r5
    262a:	4f 90       	pop	r4
    262c:	08 95       	ret

0000262e <_ZN3PID13SetSampleTimeEi>:
    262e:	8f 92       	push	r8
    2630:	9f 92       	push	r9
    2632:	af 92       	push	r10
    2634:	bf 92       	push	r11
    2636:	cf 92       	push	r12
    2638:	df 92       	push	r13
    263a:	ef 92       	push	r14
    263c:	ff 92       	push	r15
    263e:	cf 93       	push	r28
    2640:	df 93       	push	r29
    2642:	16 16       	cp	r1, r22
    2644:	17 06       	cpc	r1, r23
    2646:	b4 f5       	brge	.+108    	; 0x26b4 <_ZN3PID13SetSampleTimeEi+0x86>
    2648:	6b 01       	movw	r12, r22
    264a:	ec 01       	movw	r28, r24
    264c:	0d 2c       	mov	r0, r13
    264e:	00 0c       	add	r0, r0
    2650:	ee 08       	sbc	r14, r14
    2652:	ff 08       	sbc	r15, r15
    2654:	c7 01       	movw	r24, r14
    2656:	b6 01       	movw	r22, r12
    2658:	0e 94 23 1c 	call	0x3846	; 0x3846 <__floatsisf>
    265c:	4b 01       	movw	r8, r22
    265e:	5c 01       	movw	r10, r24
    2660:	6e a5       	ldd	r22, Y+46	; 0x2e
    2662:	7f a5       	ldd	r23, Y+47	; 0x2f
    2664:	88 a9       	ldd	r24, Y+48	; 0x30
    2666:	99 a9       	ldd	r25, Y+49	; 0x31
    2668:	0e 94 21 1c 	call	0x3842	; 0x3842 <__floatunsisf>
    266c:	9b 01       	movw	r18, r22
    266e:	ac 01       	movw	r20, r24
    2670:	c5 01       	movw	r24, r10
    2672:	b4 01       	movw	r22, r8
    2674:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__divsf3>
    2678:	4b 01       	movw	r8, r22
    267a:	5c 01       	movw	r10, r24
    267c:	9b 01       	movw	r18, r22
    267e:	ac 01       	movw	r20, r24
    2680:	68 89       	ldd	r22, Y+16	; 0x10
    2682:	79 89       	ldd	r23, Y+17	; 0x11
    2684:	8a 89       	ldd	r24, Y+18	; 0x12
    2686:	9b 89       	ldd	r25, Y+19	; 0x13
    2688:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__mulsf3>
    268c:	68 8b       	std	Y+16, r22	; 0x10
    268e:	79 8b       	std	Y+17, r23	; 0x11
    2690:	8a 8b       	std	Y+18, r24	; 0x12
    2692:	9b 8b       	std	Y+19, r25	; 0x13
    2694:	a5 01       	movw	r20, r10
    2696:	94 01       	movw	r18, r8
    2698:	6c 89       	ldd	r22, Y+20	; 0x14
    269a:	7d 89       	ldd	r23, Y+21	; 0x15
    269c:	8e 89       	ldd	r24, Y+22	; 0x16
    269e:	9f 89       	ldd	r25, Y+23	; 0x17
    26a0:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__divsf3>
    26a4:	6c 8b       	std	Y+20, r22	; 0x14
    26a6:	7d 8b       	std	Y+21, r23	; 0x15
    26a8:	8e 8b       	std	Y+22, r24	; 0x16
    26aa:	9f 8b       	std	Y+23, r25	; 0x17
    26ac:	ce a6       	std	Y+46, r12	; 0x2e
    26ae:	df a6       	std	Y+47, r13	; 0x2f
    26b0:	e8 aa       	std	Y+48, r14	; 0x30
    26b2:	f9 aa       	std	Y+49, r15	; 0x31
    26b4:	df 91       	pop	r29
    26b6:	cf 91       	pop	r28
    26b8:	ff 90       	pop	r15
    26ba:	ef 90       	pop	r14
    26bc:	df 90       	pop	r13
    26be:	cf 90       	pop	r12
    26c0:	bf 90       	pop	r11
    26c2:	af 90       	pop	r10
    26c4:	9f 90       	pop	r9
    26c6:	8f 90       	pop	r8
    26c8:	08 95       	ret

000026ca <_ZN3PID10InitializeEv>:
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
    26ca:	8f 92       	push	r8
    26cc:	9f 92       	push	r9
    26ce:	af 92       	push	r10
    26d0:	bf 92       	push	r11
    26d2:	cf 92       	push	r12
    26d4:	df 92       	push	r13
    26d6:	ef 92       	push	r14
    26d8:	ff 92       	push	r15
    26da:	cf 93       	push	r28
    26dc:	df 93       	push	r29
    26de:	ec 01       	movw	r28, r24
   outputSum = *myOutput;
    26e0:	ee 8d       	ldd	r30, Y+30	; 0x1e
    26e2:	ff 8d       	ldd	r31, Y+31	; 0x1f
    26e4:	c0 80       	ld	r12, Z
    26e6:	d1 80       	ldd	r13, Z+1	; 0x01
    26e8:	e2 80       	ldd	r14, Z+2	; 0x02
    26ea:	f3 80       	ldd	r15, Z+3	; 0x03
    26ec:	ce a2       	std	Y+38, r12	; 0x26
    26ee:	df a2       	std	Y+39, r13	; 0x27
    26f0:	e8 a6       	std	Y+40, r14	; 0x28
    26f2:	f9 a6       	std	Y+41, r15	; 0x29
   lastInput = *myInput;
    26f4:	ec 8d       	ldd	r30, Y+28	; 0x1c
    26f6:	fd 8d       	ldd	r31, Y+29	; 0x1d
    26f8:	80 81       	ld	r24, Z
    26fa:	91 81       	ldd	r25, Z+1	; 0x01
    26fc:	a2 81       	ldd	r26, Z+2	; 0x02
    26fe:	b3 81       	ldd	r27, Z+3	; 0x03
    2700:	8a a7       	std	Y+42, r24	; 0x2a
    2702:	9b a7       	std	Y+43, r25	; 0x2b
    2704:	ac a7       	std	Y+44, r26	; 0x2c
    2706:	bd a7       	std	Y+45, r27	; 0x2d
   if(outputSum > outMax) outputSum = outMax;
    2708:	8e a8       	ldd	r8, Y+54	; 0x36
    270a:	9f a8       	ldd	r9, Y+55	; 0x37
    270c:	a8 ac       	ldd	r10, Y+56	; 0x38
    270e:	b9 ac       	ldd	r11, Y+57	; 0x39
    2710:	a5 01       	movw	r20, r10
    2712:	94 01       	movw	r18, r8
    2714:	c7 01       	movw	r24, r14
    2716:	b6 01       	movw	r22, r12
    2718:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <__gesf2>
    271c:	18 16       	cp	r1, r24
    271e:	64 f0       	brlt	.+24     	; 0x2738 <_ZN3PID10InitializeEv+0x6e>
   else if(outputSum < outMin) outputSum = outMin;
    2720:	8a a8       	ldd	r8, Y+50	; 0x32
    2722:	9b a8       	ldd	r9, Y+51	; 0x33
    2724:	ac a8       	ldd	r10, Y+52	; 0x34
    2726:	bd a8       	ldd	r11, Y+53	; 0x35
    2728:	a5 01       	movw	r20, r10
    272a:	94 01       	movw	r18, r8
    272c:	c7 01       	movw	r24, r14
    272e:	b6 01       	movw	r22, r12
    2730:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <__cmpsf2>
    2734:	87 ff       	sbrs	r24, 7
    2736:	04 c0       	rjmp	.+8      	; 0x2740 <_ZN3PID10InitializeEv+0x76>
    2738:	8e a2       	std	Y+38, r8	; 0x26
    273a:	9f a2       	std	Y+39, r9	; 0x27
    273c:	a8 a6       	std	Y+40, r10	; 0x28
    273e:	b9 a6       	std	Y+41, r11	; 0x29
}
    2740:	df 91       	pop	r29
    2742:	cf 91       	pop	r28
    2744:	ff 90       	pop	r15
    2746:	ef 90       	pop	r14
    2748:	df 90       	pop	r13
    274a:	cf 90       	pop	r12
    274c:	bf 90       	pop	r11
    274e:	af 90       	pop	r10
    2750:	9f 90       	pop	r9
    2752:	8f 90       	pop	r8
    2754:	08 95       	ret

00002756 <_ZN3PID7SetModeEi>:
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
    2756:	1f 93       	push	r17
    2758:	cf 93       	push	r28
    275a:	df 93       	push	r29
    275c:	ec 01       	movw	r28, r24
    bool newAuto = (Mode == AUTOMATIC);
    275e:	11 e0       	ldi	r17, 0x01	; 1
    2760:	61 30       	cpi	r22, 0x01	; 1
    2762:	71 05       	cpc	r23, r1
    2764:	09 f0       	breq	.+2      	; 0x2768 <_ZN3PID7SetModeEi+0x12>
    2766:	10 e0       	ldi	r17, 0x00	; 0
    if(newAuto && !inAuto)
    2768:	61 30       	cpi	r22, 0x01	; 1
    276a:	71 05       	cpc	r23, r1
    276c:	31 f4       	brne	.+12     	; 0x277a <_ZN3PID7SetModeEi+0x24>
    276e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2770:	81 11       	cpse	r24, r1
    2772:	03 c0       	rjmp	.+6      	; 0x277a <_ZN3PID7SetModeEi+0x24>
    {  /*we just went from manual to auto*/
        PID::Initialize();
    2774:	ce 01       	movw	r24, r28
    2776:	0e 94 65 13 	call	0x26ca	; 0x26ca <_ZN3PID10InitializeEv>
    }
    inAuto = newAuto;
    277a:	1a af       	std	Y+58, r17	; 0x3a
}
    277c:	df 91       	pop	r29
    277e:	cf 91       	pop	r28
    2780:	1f 91       	pop	r17
    2782:	08 95       	ret

00002784 <_ZN3PID22SetControllerDirectionEi>:
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
    2784:	0f 93       	push	r16
    2786:	1f 93       	push	r17
    2788:	cf 93       	push	r28
    278a:	df 93       	push	r29
    278c:	ec 01       	movw	r28, r24
    278e:	8b 01       	movw	r16, r22
   if(inAuto && Direction !=controllerDirection)
    2790:	8a ad       	ldd	r24, Y+58	; 0x3a
    2792:	88 23       	and	r24, r24
    2794:	61 f1       	breq	.+88     	; 0x27ee <_ZN3PID22SetControllerDirectionEi+0x6a>
    2796:	88 8d       	ldd	r24, Y+24	; 0x18
    2798:	99 8d       	ldd	r25, Y+25	; 0x19
    279a:	86 17       	cp	r24, r22
    279c:	97 07       	cpc	r25, r23
    279e:	39 f1       	breq	.+78     	; 0x27ee <_ZN3PID22SetControllerDirectionEi+0x6a>
   {
	    kp = (0 - kp);
    27a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    27a2:	3d 85       	ldd	r19, Y+13	; 0x0d
    27a4:	4e 85       	ldd	r20, Y+14	; 0x0e
    27a6:	5f 85       	ldd	r21, Y+15	; 0x0f
    27a8:	60 e0       	ldi	r22, 0x00	; 0
    27aa:	70 e0       	ldi	r23, 0x00	; 0
    27ac:	cb 01       	movw	r24, r22
    27ae:	0e 94 07 1b 	call	0x360e	; 0x360e <__subsf3>
    27b2:	6c 87       	std	Y+12, r22	; 0x0c
    27b4:	7d 87       	std	Y+13, r23	; 0x0d
    27b6:	8e 87       	std	Y+14, r24	; 0x0e
    27b8:	9f 87       	std	Y+15, r25	; 0x0f
      ki = (0 - ki);
    27ba:	28 89       	ldd	r18, Y+16	; 0x10
    27bc:	39 89       	ldd	r19, Y+17	; 0x11
    27be:	4a 89       	ldd	r20, Y+18	; 0x12
    27c0:	5b 89       	ldd	r21, Y+19	; 0x13
    27c2:	60 e0       	ldi	r22, 0x00	; 0
    27c4:	70 e0       	ldi	r23, 0x00	; 0
    27c6:	cb 01       	movw	r24, r22
    27c8:	0e 94 07 1b 	call	0x360e	; 0x360e <__subsf3>
    27cc:	68 8b       	std	Y+16, r22	; 0x10
    27ce:	79 8b       	std	Y+17, r23	; 0x11
    27d0:	8a 8b       	std	Y+18, r24	; 0x12
    27d2:	9b 8b       	std	Y+19, r25	; 0x13
      kd = (0 - kd);
    27d4:	2c 89       	ldd	r18, Y+20	; 0x14
    27d6:	3d 89       	ldd	r19, Y+21	; 0x15
    27d8:	4e 89       	ldd	r20, Y+22	; 0x16
    27da:	5f 89       	ldd	r21, Y+23	; 0x17
    27dc:	60 e0       	ldi	r22, 0x00	; 0
    27de:	70 e0       	ldi	r23, 0x00	; 0
    27e0:	cb 01       	movw	r24, r22
    27e2:	0e 94 07 1b 	call	0x360e	; 0x360e <__subsf3>
    27e6:	6c 8b       	std	Y+20, r22	; 0x14
    27e8:	7d 8b       	std	Y+21, r23	; 0x15
    27ea:	8e 8b       	std	Y+22, r24	; 0x16
    27ec:	9f 8b       	std	Y+23, r25	; 0x17
   }
   controllerDirection = Direction;
    27ee:	19 8f       	std	Y+25, r17	; 0x19
    27f0:	08 8f       	std	Y+24, r16	; 0x18
}
    27f2:	df 91       	pop	r29
    27f4:	cf 91       	pop	r28
    27f6:	1f 91       	pop	r17
    27f8:	0f 91       	pop	r16
    27fa:	08 95       	ret

000027fc <_ZN3PIDC1EPdS0_S0_dddii>:

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
    27fc:	4f 92       	push	r4
    27fe:	5f 92       	push	r5
    2800:	6f 92       	push	r6
    2802:	7f 92       	push	r7
    2804:	8f 92       	push	r8
    2806:	9f 92       	push	r9
    2808:	af 92       	push	r10
    280a:	bf 92       	push	r11
    280c:	cf 92       	push	r12
    280e:	df 92       	push	r13
    2810:	ef 92       	push	r14
    2812:	ff 92       	push	r15
    2814:	0f 93       	push	r16
    2816:	1f 93       	push	r17
    2818:	cf 93       	push	r28
    281a:	df 93       	push	r29
    281c:	00 d0       	rcall	.+0      	; 0x281e <_ZN3PIDC1EPdS0_S0_dddii+0x22>
    281e:	00 d0       	rcall	.+0      	; 0x2820 <_ZN3PIDC1EPdS0_S0_dddii+0x24>
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
    2824:	4c 01       	movw	r8, r24
    2826:	27 01       	movw	r4, r14
    2828:	38 01       	movw	r6, r16
    282a:	a9 82       	std	Y+1, r10	; 0x01
    282c:	ba 82       	std	Y+2, r11	; 0x02
    282e:	cb 82       	std	Y+3, r12	; 0x03
    2830:	dc 82       	std	Y+4, r13	; 0x04
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
    2832:	fc 01       	movw	r30, r24
    2834:	57 8f       	std	Z+31, r21	; 0x1f
    2836:	46 8f       	std	Z+30, r20	; 0x1e
    myInput = Input;
    2838:	75 8f       	std	Z+29, r23	; 0x1d
    283a:	64 8f       	std	Z+28, r22	; 0x1c
    mySetpoint = Setpoint;
    283c:	31 a3       	std	Z+33, r19	; 0x21
    283e:	20 a3       	std	Z+32, r18	; 0x20
    inAuto = false;
    2840:	12 ae       	std	Z+58, r1	; 0x3a
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
    2842:	12 aa       	std	Z+50, r1	; 0x32
    2844:	13 aa       	std	Z+51, r1	; 0x33
    2846:	14 aa       	std	Z+52, r1	; 0x34
    2848:	15 aa       	std	Z+53, r1	; 0x35
   outMax = Max;
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	af e7       	ldi	r26, 0x7F	; 127
    2850:	b3 e4       	ldi	r27, 0x43	; 67
    2852:	86 ab       	std	Z+54, r24	; 0x36
    2854:	97 ab       	std	Z+55, r25	; 0x37
    2856:	a0 af       	std	Z+56, r26	; 0x38
    2858:	b1 af       	std	Z+57, r27	; 0x39
    inAuto = false;

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
    285a:	84 e6       	ldi	r24, 0x64	; 100
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	a0 e0       	ldi	r26, 0x00	; 0
    2860:	b0 e0       	ldi	r27, 0x00	; 0
    2862:	86 a7       	std	Z+46, r24	; 0x2e
    2864:	97 a7       	std	Z+47, r25	; 0x2f
    2866:	a0 ab       	std	Z+48, r26	; 0x30
    2868:	b1 ab       	std	Z+49, r27	; 0x31

    PID::SetControllerDirection(ControllerDirection);
    286a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    286c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    286e:	c4 01       	movw	r24, r8
    2870:	0e 94 c2 13 	call	0x2784	; 0x2784 <_ZN3PID22SetControllerDirectionEi>
    PID::SetTunings(Kp, Ki, Kd, POn);
    2874:	ab 8c       	ldd	r10, Y+27	; 0x1b
    2876:	bc 8c       	ldd	r11, Y+28	; 0x1c
    2878:	cf 88       	ldd	r12, Y+23	; 0x17
    287a:	d8 8c       	ldd	r13, Y+24	; 0x18
    287c:	e9 8c       	ldd	r14, Y+25	; 0x19
    287e:	fa 8c       	ldd	r15, Y+26	; 0x1a
    2880:	09 81       	ldd	r16, Y+1	; 0x01
    2882:	1a 81       	ldd	r17, Y+2	; 0x02
    2884:	2b 81       	ldd	r18, Y+3	; 0x03
    2886:	3c 81       	ldd	r19, Y+4	; 0x04
    2888:	b3 01       	movw	r22, r6
    288a:	a2 01       	movw	r20, r4
    288c:	c4 01       	movw	r24, r8
    288e:	0e 94 41 12 	call	0x2482	; 0x2482 <_ZN3PID10SetTuningsEdddi>

    lastTime = millis()-SampleTime;
    2892:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <millis>
    2896:	f4 01       	movw	r30, r8
    2898:	46 a4       	ldd	r4, Z+46	; 0x2e
    289a:	57 a4       	ldd	r5, Z+47	; 0x2f
    289c:	60 a8       	ldd	r6, Z+48	; 0x30
    289e:	71 a8       	ldd	r7, Z+49	; 0x31
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	84 19       	sub	r24, r4
    28a6:	95 09       	sbc	r25, r5
    28a8:	a6 09       	sbc	r26, r6
    28aa:	b7 09       	sbc	r27, r7
    28ac:	82 a3       	std	Z+34, r24	; 0x22
    28ae:	93 a3       	std	Z+35, r25	; 0x23
    28b0:	a4 a3       	std	Z+36, r26	; 0x24
    28b2:	b5 a3       	std	Z+37, r27	; 0x25
}
    28b4:	0f 90       	pop	r0
    28b6:	0f 90       	pop	r0
    28b8:	0f 90       	pop	r0
    28ba:	0f 90       	pop	r0
    28bc:	df 91       	pop	r29
    28be:	cf 91       	pop	r28
    28c0:	1f 91       	pop	r17
    28c2:	0f 91       	pop	r16
    28c4:	ff 90       	pop	r15
    28c6:	ef 90       	pop	r14
    28c8:	df 90       	pop	r13
    28ca:	cf 90       	pop	r12
    28cc:	bf 90       	pop	r11
    28ce:	af 90       	pop	r10
    28d0:	9f 90       	pop	r9
    28d2:	8f 90       	pop	r8
    28d4:	7f 90       	pop	r7
    28d6:	6f 90       	pop	r6
    28d8:	5f 90       	pop	r5
    28da:	4f 90       	pop	r4
    28dc:	08 95       	ret

000028de <_ZN3PIDC1EPdS0_S0_dddi>:
/*Constructor (...)*********************************************************
 *    To allow backwards compatability for v1.1, or for people that just want
 *    to use Proportional on Error without explicitly saying so
 ***************************************************************************/

PID::PID(double* Input, double* Output, double* Setpoint,
    28de:	8f 92       	push	r8
    28e0:	9f 92       	push	r9
    28e2:	af 92       	push	r10
    28e4:	bf 92       	push	r11
    28e6:	cf 92       	push	r12
    28e8:	df 92       	push	r13
    28ea:	ef 92       	push	r14
    28ec:	ff 92       	push	r15
    28ee:	0f 93       	push	r16
    28f0:	1f 93       	push	r17
    28f2:	cf 93       	push	r28
    28f4:	df 93       	push	r29
    28f6:	cd b7       	in	r28, 0x3d	; 61
    28f8:	de b7       	in	r29, 0x3e	; 62
    28fa:	ef 85       	ldd	r30, Y+15	; 0x0f
    28fc:	f8 89       	ldd	r31, Y+16	; 0x10
    28fe:	a9 89       	ldd	r26, Y+17	; 0x11
    2900:	ba 89       	ldd	r27, Y+18	; 0x12
    2902:	9b 88       	ldd	r9, Y+19	; 0x13
    2904:	8c 88       	ldd	r8, Y+20	; 0x14
        double Kp, double Ki, double Kd, int ControllerDirection)
    :PID::PID(Input, Output, Setpoint, Kp, Ki, Kd, P_ON_E, ControllerDirection)
    2906:	8f 92       	push	r8
    2908:	9f 92       	push	r9
    290a:	1f 92       	push	r1
    290c:	99 24       	eor	r9, r9
    290e:	93 94       	inc	r9
    2910:	9f 92       	push	r9
    2912:	bf 93       	push	r27
    2914:	af 93       	push	r26
    2916:	ff 93       	push	r31
    2918:	ef 93       	push	r30
    291a:	0e 94 fe 13 	call	0x27fc	; 0x27fc <_ZN3PIDC1EPdS0_S0_dddii>
{

}
    291e:	0f b6       	in	r0, 0x3f	; 63
    2920:	f8 94       	cli
    2922:	de bf       	out	0x3e, r29	; 62
    2924:	0f be       	out	0x3f, r0	; 63
    2926:	cd bf       	out	0x3d, r28	; 61
    2928:	df 91       	pop	r29
    292a:	cf 91       	pop	r28
    292c:	1f 91       	pop	r17
    292e:	0f 91       	pop	r16
    2930:	ff 90       	pop	r15
    2932:	ef 90       	pop	r14
    2934:	df 90       	pop	r13
    2936:	cf 90       	pop	r12
    2938:	bf 90       	pop	r11
    293a:	af 90       	pop	r10
    293c:	9f 90       	pop	r9
    293e:	8f 90       	pop	r8
    2940:	08 95       	ret

00002942 <_ZN3dht11_readSensorEhhh>:
    if (bits[4] != sum)
    {
        return DHTLIB_ERROR_CHECKSUM;
    }
    return result;
}
    2942:	2f 92       	push	r2
    2944:	3f 92       	push	r3
    2946:	4f 92       	push	r4
    2948:	5f 92       	push	r5
    294a:	6f 92       	push	r6
    294c:	7f 92       	push	r7
    294e:	8f 92       	push	r8
    2950:	9f 92       	push	r9
    2952:	af 92       	push	r10
    2954:	bf 92       	push	r11
    2956:	cf 92       	push	r12
    2958:	df 92       	push	r13
    295a:	ef 92       	push	r14
    295c:	ff 92       	push	r15
    295e:	0f 93       	push	r16
    2960:	1f 93       	push	r17
    2962:	cf 93       	push	r28
    2964:	df 93       	push	r29
    2966:	ec 01       	movw	r28, r24
    2968:	f6 2e       	mov	r15, r22
    296a:	04 2f       	mov	r16, r20
    296c:	e2 2e       	mov	r14, r18
    296e:	86 2f       	mov	r24, r22
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	fc 01       	movw	r30, r24
    2974:	e8 57       	subi	r30, 0x78	; 120
    2976:	fe 4f       	sbci	r31, 0xFE	; 254
    2978:	14 91       	lpm	r17, Z
    297a:	fc 01       	movw	r30, r24
    297c:	e9 55       	subi	r30, 0x59	; 89
    297e:	fe 4f       	sbci	r31, 0xFE	; 254
    2980:	e4 91       	lpm	r30, Z
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	ee 0f       	add	r30, r30
    2986:	ff 1f       	adc	r31, r31
    2988:	ea 53       	subi	r30, 0x3A	; 58
    298a:	fe 4f       	sbci	r31, 0xFE	; 254
    298c:	c5 90       	lpm	r12, Z+
    298e:	d4 90       	lpm	r13, Z
    2990:	61 e0       	ldi	r22, 0x01	; 1
    2992:	8f 2d       	mov	r24, r15
    2994:	0e 94 92 29 	call	0x5324	; 0x5324 <pinMode>
    2998:	60 e0       	ldi	r22, 0x00	; 0
    299a:	8f 2d       	mov	r24, r15
    299c:	0e 94 ce 29 	call	0x539c	; 0x539c <digitalWrite>
    29a0:	09 30       	cpi	r16, 0x09	; 9
    29a2:	38 f0       	brcs	.+14     	; 0x29b2 <_ZN3dht11_readSensorEhhh+0x70>
    29a4:	60 2f       	mov	r22, r16
    29a6:	70 e0       	ldi	r23, 0x00	; 0
    29a8:	80 e0       	ldi	r24, 0x00	; 0
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	0e 94 ef 27 	call	0x4fde	; 0x4fde <delay>
    29b0:	0a c0       	rjmp	.+20     	; 0x29c6 <_ZN3dht11_readSensorEhhh+0x84>
    29b2:	88 ee       	ldi	r24, 0xE8	; 232
    29b4:	93 e0       	ldi	r25, 0x03	; 3
    29b6:	9c 01       	movw	r18, r24
    29b8:	02 9f       	mul	r16, r18
    29ba:	c0 01       	movw	r24, r0
    29bc:	03 9f       	mul	r16, r19
    29be:	90 0d       	add	r25, r0
    29c0:	11 24       	eor	r1, r1
    29c2:	0e 94 2b 28 	call	0x5056	; 0x5056 <delayMicroseconds>
    29c6:	60 e0       	ldi	r22, 0x00	; 0
    29c8:	8f 2d       	mov	r24, r15
    29ca:	0e 94 92 29 	call	0x5324	; 0x5324 <pinMode>
    29ce:	80 e2       	ldi	r24, 0x20	; 32
    29d0:	93 e0       	ldi	r25, 0x03	; 3
    29d2:	d6 01       	movw	r26, r12
    29d4:	2c 91       	ld	r18, X
    29d6:	21 23       	and	r18, r17
    29d8:	21 f0       	breq	.+8      	; 0x29e2 <_ZN3dht11_readSensorEhhh+0xa0>
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	d1 f7       	brne	.-12     	; 0x29d2 <_ZN3dht11_readSensorEhhh+0x90>
    29de:	8d ef       	ldi	r24, 0xFD	; 253
    29e0:	5f c0       	rjmp	.+190    	; 0x2aa0 <_ZN3dht11_readSensorEhhh+0x15e>
    29e2:	80 e9       	ldi	r24, 0x90	; 144
    29e4:	91 e0       	ldi	r25, 0x01	; 1
    29e6:	f6 01       	movw	r30, r12
    29e8:	20 81       	ld	r18, Z
    29ea:	21 23       	and	r18, r17
    29ec:	21 f4       	brne	.+8      	; 0x29f6 <_ZN3dht11_readSensorEhhh+0xb4>
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	d1 f7       	brne	.-12     	; 0x29e6 <_ZN3dht11_readSensorEhhh+0xa4>
    29f2:	8c ef       	ldi	r24, 0xFC	; 252
    29f4:	55 c0       	rjmp	.+170    	; 0x2aa0 <_ZN3dht11_readSensorEhhh+0x15e>
    29f6:	80 e9       	ldi	r24, 0x90	; 144
    29f8:	91 e0       	ldi	r25, 0x01	; 1
    29fa:	d6 01       	movw	r26, r12
    29fc:	2c 91       	ld	r18, X
    29fe:	21 23       	and	r18, r17
    2a00:	21 f0       	breq	.+8      	; 0x2a0a <_ZN3dht11_readSensorEhhh+0xc8>
    2a02:	01 97       	sbiw	r24, 0x01	; 1
    2a04:	d1 f7       	brne	.-12     	; 0x29fa <_ZN3dht11_readSensorEhhh+0xb8>
    2a06:	8b ef       	ldi	r24, 0xFB	; 251
    2a08:	4b c0       	rjmp	.+150    	; 0x2aa0 <_ZN3dht11_readSensorEhhh+0x15e>
    2a0a:	58 e2       	ldi	r21, 0x28	; 40
    2a0c:	80 e9       	ldi	r24, 0x90	; 144
    2a0e:	91 e0       	ldi	r25, 0x01	; 1
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	e0 e9       	ldi	r30, 0x90	; 144
    2a16:	f1 e0       	ldi	r31, 0x01	; 1
    2a18:	00 e0       	ldi	r16, 0x00	; 0
    2a1a:	60 e0       	ldi	r22, 0x00	; 0
    2a1c:	31 2c       	mov	r3, r1
    2a1e:	40 e8       	ldi	r20, 0x80	; 128
    2a20:	25 2e       	mov	r2, r21
    2a22:	2e 18       	sub	r2, r14
    2a24:	70 e9       	ldi	r23, 0x90	; 144
    2a26:	87 2e       	mov	r8, r23
    2a28:	99 24       	eor	r9, r9
    2a2a:	93 94       	inc	r9
    2a2c:	a1 2c       	mov	r10, r1
    2a2e:	b1 2c       	mov	r11, r1
    2a30:	d6 01       	movw	r26, r12
    2a32:	7c 91       	ld	r23, X
    2a34:	71 23       	and	r23, r17
    2a36:	61 f5       	brne	.+88     	; 0x2a90 <_ZN3dht11_readSensorEhhh+0x14e>
    2a38:	00 23       	and	r16, r16
    2a3a:	51 f1       	breq	.+84     	; 0x2a90 <_ZN3dht11_readSensorEhhh+0x14e>
    2a3c:	25 16       	cp	r2, r21
    2a3e:	98 f4       	brcc	.+38     	; 0x2a66 <_ZN3dht11_readSensorEhhh+0x124>
    2a40:	8e 17       	cp	r24, r30
    2a42:	9f 07       	cpc	r25, r31
    2a44:	08 f4       	brcc	.+2      	; 0x2a48 <_ZN3dht11_readSensorEhhh+0x106>
    2a46:	fc 01       	movw	r30, r24
    2a48:	24 01       	movw	r4, r8
    2a4a:	35 01       	movw	r6, r10
    2a4c:	4e 1a       	sub	r4, r30
    2a4e:	5f 0a       	sbc	r5, r31
    2a50:	61 08       	sbc	r6, r1
    2a52:	71 08       	sbc	r7, r1
    2a54:	82 e0       	ldi	r24, 0x02	; 2
    2a56:	75 94       	asr	r7
    2a58:	67 94       	ror	r6
    2a5a:	57 94       	ror	r5
    2a5c:	47 94       	ror	r4
    2a5e:	8a 95       	dec	r24
    2a60:	d1 f7       	brne	.-12     	; 0x2a56 <_ZN3dht11_readSensorEhhh+0x114>
    2a62:	92 01       	movw	r18, r4
    2a64:	07 c0       	rjmp	.+14     	; 0x2a74 <_ZN3dht11_readSensorEhhh+0x132>
    2a66:	7f 01       	movw	r14, r30
    2a68:	e2 1a       	sub	r14, r18
    2a6a:	f3 0a       	sbc	r15, r19
    2a6c:	e8 16       	cp	r14, r24
    2a6e:	f9 06       	cpc	r15, r25
    2a70:	08 f0       	brcs	.+2      	; 0x2a74 <_ZN3dht11_readSensorEhhh+0x132>
    2a72:	64 2b       	or	r22, r20
    2a74:	46 95       	lsr	r20
    2a76:	49 f4       	brne	.+18     	; 0x2a8a <_ZN3dht11_readSensorEhhh+0x148>
    2a78:	ce 01       	movw	r24, r28
    2a7a:	83 0d       	add	r24, r3
    2a7c:	91 1d       	adc	r25, r1
    2a7e:	dc 01       	movw	r26, r24
    2a80:	18 96       	adiw	r26, 0x08	; 8
    2a82:	6c 93       	st	X, r22
    2a84:	33 94       	inc	r3
    2a86:	60 e0       	ldi	r22, 0x00	; 0
    2a88:	40 e8       	ldi	r20, 0x80	; 128
    2a8a:	51 50       	subi	r21, 0x01	; 1
    2a8c:	80 e9       	ldi	r24, 0x90	; 144
    2a8e:	91 e0       	ldi	r25, 0x01	; 1
    2a90:	01 97       	sbiw	r24, 0x01	; 1
    2a92:	29 f0       	breq	.+10     	; 0x2a9e <_ZN3dht11_readSensorEhhh+0x15c>
    2a94:	07 2f       	mov	r16, r23
    2a96:	51 11       	cpse	r21, r1
    2a98:	cb cf       	rjmp	.-106    	; 0x2a30 <_ZN3dht11_readSensorEhhh+0xee>
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	01 c0       	rjmp	.+2      	; 0x2aa0 <_ZN3dht11_readSensorEhhh+0x15e>
    2a9e:	8e ef       	ldi	r24, 0xFE	; 254
    2aa0:	df 91       	pop	r29
    2aa2:	cf 91       	pop	r28
    2aa4:	1f 91       	pop	r17
    2aa6:	0f 91       	pop	r16
    2aa8:	ff 90       	pop	r15
    2aaa:	ef 90       	pop	r14
    2aac:	df 90       	pop	r13
    2aae:	cf 90       	pop	r12
    2ab0:	bf 90       	pop	r11
    2ab2:	af 90       	pop	r10
    2ab4:	9f 90       	pop	r9
    2ab6:	8f 90       	pop	r8
    2ab8:	7f 90       	pop	r7
    2aba:	6f 90       	pop	r6
    2abc:	5f 90       	pop	r5
    2abe:	4f 90       	pop	r4
    2ac0:	3f 90       	pop	r3
    2ac2:	2f 90       	pop	r2
    2ac4:	08 95       	ret

00002ac6 <_ZN3dht4readEh>:

int8_t dht::read(uint8_t pin)
{
    2ac6:	cf 92       	push	r12
    2ac8:	df 92       	push	r13
    2aca:	ef 92       	push	r14
    2acc:	ff 92       	push	r15
    2ace:	0f 93       	push	r16
    2ad0:	1f 93       	push	r17
    2ad2:	cf 93       	push	r28
    2ad4:	df 93       	push	r29
    2ad6:	ec 01       	movw	r28, r24
    // READ VALUES
    if (_disableIRQ) noInterrupts();
    2ad8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ada:	88 23       	and	r24, r24
    2adc:	09 f0       	breq	.+2      	; 0x2ae0 <_ZN3dht4readEh+0x1a>
    2ade:	f8 94       	cli
    int8_t result = _readSensor(pin, DHTLIB_DHT_WAKEUP, DHTLIB_DHT_LEADING_ZEROS);
    2ae0:	26 e0       	ldi	r18, 0x06	; 6
    2ae2:	41 e0       	ldi	r20, 0x01	; 1
    2ae4:	ce 01       	movw	r24, r28
    2ae6:	0e 94 a1 14 	call	0x2942	; 0x2942 <_ZN3dht11_readSensorEhhh>
    2aea:	e8 2e       	mov	r14, r24
    if (_disableIRQ) interrupts();
    2aec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aee:	88 23       	and	r24, r24
    2af0:	09 f0       	breq	.+2      	; 0x2af4 <_ZN3dht4readEh+0x2e>
    2af2:	78 94       	sei

    // these bits are always zero, masking them reduces errors.
    bits[0] &= 0x03;
    2af4:	08 85       	ldd	r16, Y+8	; 0x08
    2af6:	03 70       	andi	r16, 0x03	; 3
    2af8:	08 87       	std	Y+8, r16	; 0x08
    bits[2] &= 0x83;
    2afa:	1a 85       	ldd	r17, Y+10	; 0x0a
    2afc:	81 2f       	mov	r24, r17
    2afe:	83 78       	andi	r24, 0x83	; 131
    2b00:	f8 2e       	mov	r15, r24
    2b02:	8a 87       	std	Y+10, r24	; 0x0a

    // CONVERT AND STORE
    humidity = (bits[0]*256 + bits[1]) * 0.1;
    2b04:	c9 84       	ldd	r12, Y+9	; 0x09
    2b06:	60 2f       	mov	r22, r16
    2b08:	70 e0       	ldi	r23, 0x00	; 0
    2b0a:	76 2f       	mov	r23, r22
    2b0c:	66 27       	eor	r22, r22
    2b0e:	6c 0d       	add	r22, r12
    2b10:	71 1d       	adc	r23, r1
    2b12:	07 2e       	mov	r0, r23
    2b14:	00 0c       	add	r0, r0
    2b16:	88 0b       	sbc	r24, r24
    2b18:	99 0b       	sbc	r25, r25
    2b1a:	0e 94 23 1c 	call	0x3846	; 0x3846 <__floatsisf>
    2b1e:	2d ec       	ldi	r18, 0xCD	; 205
    2b20:	3c ec       	ldi	r19, 0xCC	; 204
    2b22:	4c ec       	ldi	r20, 0xCC	; 204
    2b24:	5d e3       	ldi	r21, 0x3D	; 61
    2b26:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__mulsf3>
    2b2a:	68 83       	st	Y, r22
    2b2c:	79 83       	std	Y+1, r23	; 0x01
    2b2e:	8a 83       	std	Y+2, r24	; 0x02
    2b30:	9b 83       	std	Y+3, r25	; 0x03
    temperature = ((bits[2] & 0x7F)*256 + bits[3]) * 0.1;
    2b32:	db 84       	ldd	r13, Y+11	; 0x0b
    2b34:	13 70       	andi	r17, 0x03	; 3
    2b36:	61 2f       	mov	r22, r17
    2b38:	70 e0       	ldi	r23, 0x00	; 0
    2b3a:	76 2f       	mov	r23, r22
    2b3c:	66 27       	eor	r22, r22
    2b3e:	6d 0d       	add	r22, r13
    2b40:	71 1d       	adc	r23, r1
    2b42:	07 2e       	mov	r0, r23
    2b44:	00 0c       	add	r0, r0
    2b46:	88 0b       	sbc	r24, r24
    2b48:	99 0b       	sbc	r25, r25
    2b4a:	0e 94 23 1c 	call	0x3846	; 0x3846 <__floatsisf>
    2b4e:	2d ec       	ldi	r18, 0xCD	; 205
    2b50:	3c ec       	ldi	r19, 0xCC	; 204
    2b52:	4c ec       	ldi	r20, 0xCC	; 204
    2b54:	5d e3       	ldi	r21, 0x3D	; 61
    2b56:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__mulsf3>
    if (bits[2] & 0x80)  // negative temperature
    2b5a:	f7 fc       	sbrc	r15, 7
    2b5c:	05 c0       	rjmp	.+10     	; 0x2b68 <_ZN3dht4readEh+0xa2>
    bits[0] &= 0x03;
    bits[2] &= 0x83;

    // CONVERT AND STORE
    humidity = (bits[0]*256 + bits[1]) * 0.1;
    temperature = ((bits[2] & 0x7F)*256 + bits[3]) * 0.1;
    2b5e:	6c 83       	std	Y+4, r22	; 0x04
    2b60:	7d 83       	std	Y+5, r23	; 0x05
    2b62:	8e 83       	std	Y+6, r24	; 0x06
    2b64:	9f 83       	std	Y+7, r25	; 0x07
    2b66:	07 c0       	rjmp	.+14     	; 0x2b76 <_ZN3dht4readEh+0xb0>
    if (bits[2] & 0x80)  // negative temperature
    {
        temperature = -temperature;
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	b0 58       	subi	r27, 0x80	; 128
    2b6e:	8c 83       	std	Y+4, r24	; 0x04
    2b70:	9d 83       	std	Y+5, r25	; 0x05
    2b72:	ae 83       	std	Y+6, r26	; 0x06
    2b74:	bf 83       	std	Y+7, r27	; 0x07
    }

    // TEST CHECKSUM
    uint8_t sum = bits[0] + bits[1] + bits[2] + bits[3];
    if (bits[4] != sum)
    2b76:	dc 0c       	add	r13, r12
    2b78:	0d 0d       	add	r16, r13
    2b7a:	f0 0e       	add	r15, r16
    2b7c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b7e:	f8 12       	cpse	r15, r24
    2b80:	02 c0       	rjmp	.+4      	; 0x2b86 <_ZN3dht4readEh+0xc0>
    {
        return DHTLIB_ERROR_CHECKSUM;
    }
    return result;
    2b82:	8e 2d       	mov	r24, r14
    2b84:	01 c0       	rjmp	.+2      	; 0x2b88 <_ZN3dht4readEh+0xc2>

    // TEST CHECKSUM
    uint8_t sum = bits[0] + bits[1] + bits[2] + bits[3];
    if (bits[4] != sum)
    {
        return DHTLIB_ERROR_CHECKSUM;
    2b86:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return result;
}
    2b88:	df 91       	pop	r29
    2b8a:	cf 91       	pop	r28
    2b8c:	1f 91       	pop	r17
    2b8e:	0f 91       	pop	r16
    2b90:	ff 90       	pop	r15
    2b92:	ef 90       	pop	r14
    2b94:	df 90       	pop	r13
    2b96:	cf 90       	pop	r12
    2b98:	08 95       	ret

00002b9a <_ZN7hd447806ioinitEv>:
	{
		buf[i] = pgm_read_byte(charmap++);
	}
	// call the RAM based function to actually send it to the LCD
	return(createChar(location, buf));
}
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	08 95       	ret

00002ba0 <_ZN7hd447806ioreadENS_6iotypeE>:
    2ba0:	8d ef       	ldi	r24, 0xFD	; 253
    2ba2:	9f ef       	ldi	r25, 0xFF	; 255
    2ba4:	08 95       	ret

00002ba6 <_ZN7hd4478014iosetBacklightEh>:
    2ba6:	8d ef       	ldi	r24, 0xFD	; 253
    2ba8:	9f ef       	ldi	r25, 0xFF	; 255
    2baa:	08 95       	ret

00002bac <_ZN7hd44780C1Ev>:
    2bac:	cf 93       	push	r28
    2bae:	df 93       	push	r29
    2bb0:	ec 01       	movw	r28, r24
    2bb2:	1b 82       	std	Y+3, r1	; 0x03
    2bb4:	1a 82       	std	Y+2, r1	; 0x02
    2bb6:	80 ef       	ldi	r24, 0xF0	; 240
    2bb8:	92 e0       	ldi	r25, 0x02	; 2
    2bba:	99 83       	std	Y+1, r25	; 0x01
    2bbc:	88 83       	st	Y, r24
    2bbe:	1f 82       	std	Y+7, r1	; 0x07
    2bc0:	18 86       	std	Y+8, r1	; 0x08
    2bc2:	80 ed       	ldi	r24, 0xD0	; 208
    2bc4:	97 e0       	ldi	r25, 0x07	; 7
    2bc6:	a0 e0       	ldi	r26, 0x00	; 0
    2bc8:	b0 e0       	ldi	r27, 0x00	; 0
    2bca:	88 8b       	std	Y+16, r24	; 0x10
    2bcc:	99 8b       	std	Y+17, r25	; 0x11
    2bce:	aa 8b       	std	Y+18, r26	; 0x12
    2bd0:	bb 8b       	std	Y+19, r27	; 0x13
    2bd2:	86 e2       	ldi	r24, 0x26	; 38
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	a0 e0       	ldi	r26, 0x00	; 0
    2bd8:	b0 e0       	ldi	r27, 0x00	; 0
    2bda:	8c 8b       	std	Y+20, r24	; 0x14
    2bdc:	9d 8b       	std	Y+21, r25	; 0x15
    2bde:	ae 8b       	std	Y+22, r26	; 0x16
    2be0:	bf 8b       	std	Y+23, r27	; 0x17
    2be2:	1c 86       	std	Y+12, r1	; 0x0c
    2be4:	1d 86       	std	Y+13, r1	; 0x0d
    2be6:	1e 86       	std	Y+14, r1	; 0x0e
    2be8:	1f 86       	std	Y+15, r1	; 0x0f
    2bea:	1b 86       	std	Y+11, r1	; 0x0b
    2bec:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <micros>
    2bf0:	68 8f       	std	Y+24, r22	; 0x18
    2bf2:	79 8f       	std	Y+25, r23	; 0x19
    2bf4:	8a 8f       	std	Y+26, r24	; 0x1a
    2bf6:	9b 8f       	std	Y+27, r25	; 0x1b
    2bf8:	1c 8e       	std	Y+28, r1	; 0x1c
    2bfa:	1d 8e       	std	Y+29, r1	; 0x1d
    2bfc:	1e 8e       	std	Y+30, r1	; 0x1e
    2bfe:	1f 8e       	std	Y+31, r1	; 0x1f
    2c00:	df 91       	pop	r29
    2c02:	cf 91       	pop	r28
    2c04:	08 95       	ret

00002c06 <_ZN7hd447809backlightEv>:
    2c06:	dc 01       	movw	r26, r24
    2c08:	ed 91       	ld	r30, X+
    2c0a:	fc 91       	ld	r31, X
    2c0c:	06 84       	ldd	r0, Z+14	; 0x0e
    2c0e:	f7 85       	ldd	r31, Z+15	; 0x0f
    2c10:	e0 2d       	mov	r30, r0
    2c12:	6f ef       	ldi	r22, 0xFF	; 255
    2c14:	09 94       	ijmp

00002c16 <_ZN7hd4478011noBacklightEv>:
    2c16:	dc 01       	movw	r26, r24
    2c18:	ed 91       	ld	r30, X+
    2c1a:	fc 91       	ld	r31, X
    2c1c:	06 84       	ldd	r0, Z+14	; 0x0e
    2c1e:	f7 85       	ldd	r31, Z+15	; 0x0f
    2c20:	e0 2d       	mov	r30, r0
    2c22:	60 e0       	ldi	r22, 0x00	; 0
    2c24:	09 94       	ijmp

00002c26 <_ZN7hd447807commandEh>:
    2c26:	8f 92       	push	r8
    2c28:	9f 92       	push	r9
    2c2a:	af 92       	push	r10
    2c2c:	bf 92       	push	r11
    2c2e:	ef 92       	push	r14
    2c30:	ff 92       	push	r15
    2c32:	1f 93       	push	r17
    2c34:	cf 93       	push	r28
    2c36:	df 93       	push	r29
    2c38:	ec 01       	movw	r28, r24
    2c3a:	16 2f       	mov	r17, r22
    2c3c:	e8 81       	ld	r30, Y
    2c3e:	f9 81       	ldd	r31, Y+1	; 0x01
    2c40:	04 84       	ldd	r0, Z+12	; 0x0c
    2c42:	f5 85       	ldd	r31, Z+13	; 0x0d
    2c44:	e0 2d       	mov	r30, r0
    2c46:	46 2f       	mov	r20, r22
    2c48:	60 e0       	ldi	r22, 0x00	; 0
    2c4a:	09 95       	icall
    2c4c:	7c 01       	movw	r14, r24
    2c4e:	11 50       	subi	r17, 0x01	; 1
    2c50:	12 30       	cpi	r17, 0x02	; 2
    2c52:	38 f4       	brcc	.+14     	; 0x2c62 <_ZN7hd447807commandEh+0x3c>
    2c54:	19 86       	std	Y+9, r1	; 0x09
    2c56:	1a 86       	std	Y+10, r1	; 0x0a
    2c58:	88 88       	ldd	r8, Y+16	; 0x10
    2c5a:	99 88       	ldd	r9, Y+17	; 0x11
    2c5c:	aa 88       	ldd	r10, Y+18	; 0x12
    2c5e:	bb 88       	ldd	r11, Y+19	; 0x13
    2c60:	04 c0       	rjmp	.+8      	; 0x2c6a <_ZN7hd447807commandEh+0x44>
    2c62:	8c 88       	ldd	r8, Y+20	; 0x14
    2c64:	9d 88       	ldd	r9, Y+21	; 0x15
    2c66:	ae 88       	ldd	r10, Y+22	; 0x16
    2c68:	bf 88       	ldd	r11, Y+23	; 0x17
    2c6a:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <micros>
    2c6e:	68 8f       	std	Y+24, r22	; 0x18
    2c70:	79 8f       	std	Y+25, r23	; 0x19
    2c72:	8a 8f       	std	Y+26, r24	; 0x1a
    2c74:	9b 8f       	std	Y+27, r25	; 0x1b
    2c76:	8c 8e       	std	Y+28, r8	; 0x1c
    2c78:	9d 8e       	std	Y+29, r9	; 0x1d
    2c7a:	ae 8e       	std	Y+30, r10	; 0x1e
    2c7c:	bf 8e       	std	Y+31, r11	; 0x1f
    2c7e:	c7 01       	movw	r24, r14
    2c80:	df 91       	pop	r29
    2c82:	cf 91       	pop	r28
    2c84:	1f 91       	pop	r17
    2c86:	ff 90       	pop	r15
    2c88:	ef 90       	pop	r14
    2c8a:	bf 90       	pop	r11
    2c8c:	af 90       	pop	r10
    2c8e:	9f 90       	pop	r9
    2c90:	8f 90       	pop	r8
    2c92:	08 95       	ret

00002c94 <_ZN7hd447805clearEv>:
    2c94:	61 e0       	ldi	r22, 0x01	; 1
    2c96:	0c 94 13 16 	jmp	0x2c26	; 0x2c26 <_ZN7hd447807commandEh>

00002c9a <_ZN7hd447804homeEv>:
    2c9a:	62 e0       	ldi	r22, 0x02	; 2
    2c9c:	0c 94 13 16 	jmp	0x2c26	; 0x2c26 <_ZN7hd447807commandEh>

00002ca0 <_ZN7hd447809setCursorEhh>:
    2ca0:	fc 01       	movw	r30, r24
    2ca2:	80 85       	ldd	r24, Z+8	; 0x08
    2ca4:	48 17       	cp	r20, r24
    2ca6:	10 f0       	brcs	.+4      	; 0x2cac <_ZN7hd447809setCursorEhh+0xc>
    2ca8:	4f ef       	ldi	r20, 0xFF	; 255
    2caa:	48 0f       	add	r20, r24
    2cac:	93 85       	ldd	r25, Z+11	; 0x0b
    2cae:	99 23       	and	r25, r25
    2cb0:	59 f0       	breq	.+22     	; 0x2cc8 <_ZN7hd447809setCursorEhh+0x28>
    2cb2:	97 81       	ldd	r25, Z+7	; 0x07
    2cb4:	69 17       	cp	r22, r25
    2cb6:	30 f0       	brcs	.+12     	; 0x2cc4 <_ZN7hd447809setCursorEhh+0x24>
    2cb8:	69 1b       	sub	r22, r25
    2cba:	4f 5f       	subi	r20, 0xFF	; 255
    2cbc:	48 17       	cp	r20, r24
    2cbe:	d0 f3       	brcs	.-12     	; 0x2cb4 <_ZN7hd447809setCursorEhh+0x14>
    2cc0:	40 e0       	ldi	r20, 0x00	; 0
    2cc2:	f8 cf       	rjmp	.-16     	; 0x2cb4 <_ZN7hd447809setCursorEhh+0x14>
    2cc4:	61 87       	std	Z+9, r22	; 0x09
    2cc6:	42 87       	std	Z+10, r20	; 0x0a
    2cc8:	df 01       	movw	r26, r30
    2cca:	a4 0f       	add	r26, r20
    2ccc:	b1 1d       	adc	r27, r1
    2cce:	1c 96       	adiw	r26, 0x0c	; 12
    2cd0:	8c 91       	ld	r24, X
    2cd2:	68 0f       	add	r22, r24
    2cd4:	60 68       	ori	r22, 0x80	; 128
    2cd6:	cf 01       	movw	r24, r30
    2cd8:	0c 94 13 16 	jmp	0x2c26	; 0x2c26 <_ZN7hd447807commandEh>

00002cdc <_ZN7hd447807displayEv>:
    2cdc:	fc 01       	movw	r30, r24
    2cde:	65 81       	ldd	r22, Z+5	; 0x05
    2ce0:	26 2f       	mov	r18, r22
    2ce2:	24 60       	ori	r18, 0x04	; 4
    2ce4:	25 83       	std	Z+5, r18	; 0x05
    2ce6:	6c 60       	ori	r22, 0x0C	; 12
    2ce8:	0c 94 13 16 	jmp	0x2c26	; 0x2c26 <_ZN7hd447807commandEh>

00002cec <_ZN7hd447805beginEhhh>:
    2cec:	0f 93       	push	r16
    2cee:	1f 93       	push	r17
    2cf0:	cf 93       	push	r28
    2cf2:	df 93       	push	r29
    2cf4:	ec 01       	movw	r28, r24
    2cf6:	02 2f       	mov	r16, r18
    2cf8:	14 2f       	mov	r17, r20
    2cfa:	45 30       	cpi	r20, 0x05	; 5
    2cfc:	08 f0       	brcs	.+2      	; 0x2d00 <_ZN7hd447805beginEhhh+0x14>
    2cfe:	14 e0       	ldi	r17, 0x04	; 4
    2d00:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d02:	81 11       	cpse	r24, r1
    2d04:	09 c0       	rjmp	.+18     	; 0x2d18 <_ZN7hd447805beginEhhh+0x2c>
    2d06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d08:	81 11       	cpse	r24, r1
    2d0a:	06 c0       	rjmp	.+12     	; 0x2d18 <_ZN7hd447805beginEhhh+0x2c>
    2d0c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d0e:	81 11       	cpse	r24, r1
    2d10:	03 c0       	rjmp	.+6      	; 0x2d18 <_ZN7hd447805beginEhhh+0x2c>
    2d12:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d14:	88 23       	and	r24, r24
    2d16:	29 f0       	breq	.+10     	; 0x2d22 <_ZN7hd447805beginEhhh+0x36>
    2d18:	8f 81       	ldd	r24, Y+7	; 0x07
    2d1a:	88 23       	and	r24, r24
    2d1c:	59 f0       	breq	.+22     	; 0x2d34 <_ZN7hd447805beginEhhh+0x48>
    2d1e:	86 17       	cp	r24, r22
    2d20:	49 f0       	breq	.+18     	; 0x2d34 <_ZN7hd447805beginEhhh+0x48>
    2d22:	1c 86       	std	Y+12, r1	; 0x0c
    2d24:	80 e4       	ldi	r24, 0x40	; 64
    2d26:	8d 87       	std	Y+13, r24	; 0x0d
    2d28:	6e 87       	std	Y+14, r22	; 0x0e
    2d2a:	86 2f       	mov	r24, r22
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	80 5c       	subi	r24, 0xC0	; 192
    2d30:	9f 4f       	sbci	r25, 0xFF	; 255
    2d32:	8f 87       	std	Y+15, r24	; 0x0f
    2d34:	18 87       	std	Y+8, r17	; 0x08
    2d36:	6f 83       	std	Y+7, r22	; 0x07
    2d38:	64 e6       	ldi	r22, 0x64	; 100
    2d3a:	70 e0       	ldi	r23, 0x00	; 0
    2d3c:	80 e0       	ldi	r24, 0x00	; 0
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	0e 94 ef 27 	call	0x4fde	; 0x4fde <delay>
    2d44:	1c 82       	std	Y+4, r1	; 0x04
    2d46:	e8 81       	ld	r30, Y
    2d48:	f9 81       	ldd	r31, Y+1	; 0x01
    2d4a:	00 84       	ldd	r0, Z+8	; 0x08
    2d4c:	f1 85       	ldd	r31, Z+9	; 0x09
    2d4e:	e0 2d       	mov	r30, r0
    2d50:	ce 01       	movw	r24, r28
    2d52:	09 95       	icall
    2d54:	00 97       	sbiw	r24, 0x00	; 0
    2d56:	09 f0       	breq	.+2      	; 0x2d5a <_ZN7hd447805beginEhhh+0x6e>
    2d58:	5e c0       	rjmp	.+188    	; 0x2e16 <_ZN7hd447805beginEhhh+0x12a>
    2d5a:	88 85       	ldd	r24, Y+8	; 0x08
    2d5c:	82 30       	cpi	r24, 0x02	; 2
    2d5e:	18 f0       	brcs	.+6      	; 0x2d66 <_ZN7hd447805beginEhhh+0x7a>
    2d60:	8c 81       	ldd	r24, Y+4	; 0x04
    2d62:	88 60       	ori	r24, 0x08	; 8
    2d64:	8c 83       	std	Y+4, r24	; 0x04
    2d66:	00 23       	and	r16, r16
    2d68:	29 f0       	breq	.+10     	; 0x2d74 <_ZN7hd447805beginEhhh+0x88>
    2d6a:	11 30       	cpi	r17, 0x01	; 1
    2d6c:	19 f4       	brne	.+6      	; 0x2d74 <_ZN7hd447805beginEhhh+0x88>
    2d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d70:	84 60       	ori	r24, 0x04	; 4
    2d72:	8c 83       	std	Y+4, r24	; 0x04
    2d74:	e8 81       	ld	r30, Y
    2d76:	f9 81       	ldd	r31, Y+1	; 0x01
    2d78:	04 84       	ldd	r0, Z+12	; 0x0c
    2d7a:	f5 85       	ldd	r31, Z+13	; 0x0d
    2d7c:	e0 2d       	mov	r30, r0
    2d7e:	40 e3       	ldi	r20, 0x30	; 48
    2d80:	62 e0       	ldi	r22, 0x02	; 2
    2d82:	ce 01       	movw	r24, r28
    2d84:	09 95       	icall
    2d86:	65 e0       	ldi	r22, 0x05	; 5
    2d88:	70 e0       	ldi	r23, 0x00	; 0
    2d8a:	80 e0       	ldi	r24, 0x00	; 0
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	0e 94 ef 27 	call	0x4fde	; 0x4fde <delay>
    2d92:	e8 81       	ld	r30, Y
    2d94:	f9 81       	ldd	r31, Y+1	; 0x01
    2d96:	04 84       	ldd	r0, Z+12	; 0x0c
    2d98:	f5 85       	ldd	r31, Z+13	; 0x0d
    2d9a:	e0 2d       	mov	r30, r0
    2d9c:	40 e3       	ldi	r20, 0x30	; 48
    2d9e:	62 e0       	ldi	r22, 0x02	; 2
    2da0:	ce 01       	movw	r24, r28
    2da2:	09 95       	icall
    2da4:	61 e0       	ldi	r22, 0x01	; 1
    2da6:	70 e0       	ldi	r23, 0x00	; 0
    2da8:	80 e0       	ldi	r24, 0x00	; 0
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	0e 94 ef 27 	call	0x4fde	; 0x4fde <delay>
    2db0:	e8 81       	ld	r30, Y
    2db2:	f9 81       	ldd	r31, Y+1	; 0x01
    2db4:	04 84       	ldd	r0, Z+12	; 0x0c
    2db6:	f5 85       	ldd	r31, Z+13	; 0x0d
    2db8:	e0 2d       	mov	r30, r0
    2dba:	40 e3       	ldi	r20, 0x30	; 48
    2dbc:	62 e0       	ldi	r22, 0x02	; 2
    2dbe:	ce 01       	movw	r24, r28
    2dc0:	09 95       	icall
    2dc2:	61 e0       	ldi	r22, 0x01	; 1
    2dc4:	70 e0       	ldi	r23, 0x00	; 0
    2dc6:	80 e0       	ldi	r24, 0x00	; 0
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	0e 94 ef 27 	call	0x4fde	; 0x4fde <delay>
    2dce:	8c 81       	ldd	r24, Y+4	; 0x04
    2dd0:	84 fd       	sbrc	r24, 4
    2dd2:	09 c0       	rjmp	.+18     	; 0x2de6 <_ZN7hd447805beginEhhh+0xfa>
    2dd4:	e8 81       	ld	r30, Y
    2dd6:	f9 81       	ldd	r31, Y+1	; 0x01
    2dd8:	04 84       	ldd	r0, Z+12	; 0x0c
    2dda:	f5 85       	ldd	r31, Z+13	; 0x0d
    2ddc:	e0 2d       	mov	r30, r0
    2dde:	40 e2       	ldi	r20, 0x20	; 32
    2de0:	62 e0       	ldi	r22, 0x02	; 2
    2de2:	ce 01       	movw	r24, r28
    2de4:	09 95       	icall
    2de6:	6c 81       	ldd	r22, Y+4	; 0x04
    2de8:	60 62       	ori	r22, 0x20	; 32
    2dea:	ce 01       	movw	r24, r28
    2dec:	0e 94 13 16 	call	0x2c26	; 0x2c26 <_ZN7hd447807commandEh>
    2df0:	84 e0       	ldi	r24, 0x04	; 4
    2df2:	8d 83       	std	Y+5, r24	; 0x05
    2df4:	ce 01       	movw	r24, r28
    2df6:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <_ZN7hd447807displayEv>
    2dfa:	ce 01       	movw	r24, r28
    2dfc:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <_ZN7hd447805clearEv>
    2e00:	82 e0       	ldi	r24, 0x02	; 2
    2e02:	8e 83       	std	Y+6, r24	; 0x06
    2e04:	66 e0       	ldi	r22, 0x06	; 6
    2e06:	ce 01       	movw	r24, r28
    2e08:	0e 94 13 16 	call	0x2c26	; 0x2c26 <_ZN7hd447807commandEh>
    2e0c:	8c 01       	movw	r16, r24
    2e0e:	ce 01       	movw	r24, r28
    2e10:	0e 94 03 16 	call	0x2c06	; 0x2c06 <_ZN7hd447809backlightEv>
    2e14:	c8 01       	movw	r24, r16
    2e16:	df 91       	pop	r29
    2e18:	cf 91       	pop	r28
    2e1a:	1f 91       	pop	r17
    2e1c:	0f 91       	pop	r16
    2e1e:	08 95       	ret

00002e20 <_ZN7hd447808noCursorEv>:
    2e20:	fc 01       	movw	r30, r24
    2e22:	65 81       	ldd	r22, Z+5	; 0x05
    2e24:	6d 7f       	andi	r22, 0xFD	; 253
    2e26:	65 83       	std	Z+5, r22	; 0x05
    2e28:	68 60       	ori	r22, 0x08	; 8
    2e2a:	0c 94 13 16 	jmp	0x2c26	; 0x2c26 <_ZN7hd447807commandEh>

00002e2e <_ZN7hd447807noBlinkEv>:
    2e2e:	fc 01       	movw	r30, r24
    2e30:	65 81       	ldd	r22, Z+5	; 0x05
    2e32:	6e 7f       	andi	r22, 0xFE	; 254
    2e34:	65 83       	std	Z+5, r22	; 0x05
    2e36:	68 60       	ori	r22, 0x08	; 8
    2e38:	0c 94 13 16 	jmp	0x2c26	; 0x2c26 <_ZN7hd447807commandEh>

00002e3c <_ZN7hd447806_writeEh>:
    2e3c:	cf 92       	push	r12
    2e3e:	df 92       	push	r13
    2e40:	ef 92       	push	r14
    2e42:	ff 92       	push	r15
    2e44:	0f 93       	push	r16
    2e46:	1f 93       	push	r17
    2e48:	cf 93       	push	r28
    2e4a:	df 93       	push	r29
    2e4c:	ec 01       	movw	r28, r24
    2e4e:	46 2f       	mov	r20, r22
    2e50:	e8 81       	ld	r30, Y
    2e52:	f9 81       	ldd	r31, Y+1	; 0x01
    2e54:	04 84       	ldd	r0, Z+12	; 0x0c
    2e56:	f5 85       	ldd	r31, Z+13	; 0x0d
    2e58:	e0 2d       	mov	r30, r0
    2e5a:	61 e0       	ldi	r22, 0x01	; 1
    2e5c:	09 95       	icall
    2e5e:	8c 01       	movw	r16, r24
    2e60:	cc 88       	ldd	r12, Y+20	; 0x14
    2e62:	dd 88       	ldd	r13, Y+21	; 0x15
    2e64:	ee 88       	ldd	r14, Y+22	; 0x16
    2e66:	ff 88       	ldd	r15, Y+23	; 0x17
    2e68:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <micros>
    2e6c:	68 8f       	std	Y+24, r22	; 0x18
    2e6e:	79 8f       	std	Y+25, r23	; 0x19
    2e70:	8a 8f       	std	Y+26, r24	; 0x1a
    2e72:	9b 8f       	std	Y+27, r25	; 0x1b
    2e74:	cc 8e       	std	Y+28, r12	; 0x1c
    2e76:	dd 8e       	std	Y+29, r13	; 0x1d
    2e78:	ee 8e       	std	Y+30, r14	; 0x1e
    2e7a:	ff 8e       	std	Y+31, r15	; 0x1f
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	01 2b       	or	r16, r17
    2e82:	11 f0       	breq	.+4      	; 0x2e88 <_ZN7hd447806_writeEh+0x4c>
    2e84:	80 e0       	ldi	r24, 0x00	; 0
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	df 91       	pop	r29
    2e8a:	cf 91       	pop	r28
    2e8c:	1f 91       	pop	r17
    2e8e:	0f 91       	pop	r16
    2e90:	ff 90       	pop	r15
    2e92:	ef 90       	pop	r14
    2e94:	df 90       	pop	r13
    2e96:	cf 90       	pop	r12
    2e98:	08 95       	ret

00002e9a <_ZN7hd447805writeEh>:

// write() - process data character byte to lcd
// returns number of bytes successfully written to device
// i.e. 1 if success or 0 if no character was processed (error)
size_t hd44780::write(uint8_t value)
{
    2e9a:	0f 93       	push	r16
    2e9c:	1f 93       	push	r17
    2e9e:	cf 93       	push	r28
    2ea0:	df 93       	push	r29
    2ea2:	ec 01       	movw	r28, r24
size_t rval;

	rval = _write(value);
    2ea4:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN7hd447806_writeEh>
    2ea8:	8c 01       	movw	r16, r24
	if(_wraplines)
    2eaa:	8b 85       	ldd	r24, Y+11	; 0x0b
    2eac:	88 23       	and	r24, r24
    2eae:	99 f0       	breq	.+38     	; 0x2ed6 <_ZN7hd447805writeEh+0x3c>
	{
		// currently only works for left to right mode
		if(++_curcol >= _cols)
    2eb0:	89 85       	ldd	r24, Y+9	; 0x09
    2eb2:	8f 5f       	subi	r24, 0xFF	; 255
    2eb4:	89 87       	std	Y+9, r24	; 0x09
    2eb6:	9f 81       	ldd	r25, Y+7	; 0x07
    2eb8:	89 17       	cp	r24, r25
    2eba:	68 f0       	brcs	.+26     	; 0x2ed6 <_ZN7hd447805writeEh+0x3c>
		{
			_curcol = 0;
    2ebc:	19 86       	std	Y+9, r1	; 0x09
			_currow++;
    2ebe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ec0:	8f 5f       	subi	r24, 0xFF	; 255
    2ec2:	8a 87       	std	Y+10, r24	; 0x0a
			if(_currow >= _rows)
    2ec4:	98 85       	ldd	r25, Y+8	; 0x08
    2ec6:	89 17       	cp	r24, r25
    2ec8:	08 f0       	brcs	.+2      	; 0x2ecc <_ZN7hd447805writeEh+0x32>
				_currow = 0;
    2eca:	1a 86       	std	Y+10, r1	; 0x0a
			setCursor(_curcol, _currow);
    2ecc:	4a 85       	ldd	r20, Y+10	; 0x0a
    2ece:	60 e0       	ldi	r22, 0x00	; 0
    2ed0:	ce 01       	movw	r24, r28
    2ed2:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN7hd447809setCursorEhh>
		}
	}
	return (rval);
}
    2ed6:	c8 01       	movw	r24, r16
    2ed8:	df 91       	pop	r29
    2eda:	cf 91       	pop	r28
    2edc:	1f 91       	pop	r17
    2ede:	0f 91       	pop	r16
    2ee0:	08 95       	ret

00002ee2 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2ee2:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <twi_state>
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	80 93 ab 05 	sts	0x05AB, r24	; 0x8005ab <twi_sendStop>
    2eec:	10 92 aa 05 	sts	0x05AA, r1	; 0x8005aa <twi_inRepStart>
    2ef0:	61 e0       	ldi	r22, 0x01	; 1
    2ef2:	82 e0       	ldi	r24, 0x02	; 2
    2ef4:	0e 94 ce 29 	call	0x539c	; 0x539c <digitalWrite>
    2ef8:	61 e0       	ldi	r22, 0x01	; 1
    2efa:	83 e0       	ldi	r24, 0x03	; 3
    2efc:	0e 94 ce 29 	call	0x539c	; 0x539c <digitalWrite>
    2f00:	e9 eb       	ldi	r30, 0xB9	; 185
    2f02:	f0 e0       	ldi	r31, 0x00	; 0
    2f04:	80 81       	ld	r24, Z
    2f06:	8e 7f       	andi	r24, 0xFE	; 254
    2f08:	80 83       	st	Z, r24
    2f0a:	80 81       	ld	r24, Z
    2f0c:	8d 7f       	andi	r24, 0xFD	; 253
    2f0e:	80 83       	st	Z, r24
    2f10:	88 e4       	ldi	r24, 0x48	; 72
    2f12:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    2f16:	85 e4       	ldi	r24, 0x45	; 69
    2f18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2f1c:	08 95       	ret

00002f1e <twi_readFrom>:
    2f1e:	41 32       	cpi	r20, 0x21	; 33
    2f20:	08 f0       	brcs	.+2      	; 0x2f24 <twi_readFrom+0x6>
    2f22:	43 c0       	rjmp	.+134    	; 0x2faa <twi_readFrom+0x8c>
    2f24:	90 91 ad 05 	lds	r25, 0x05AD	; 0x8005ad <twi_state>
    2f28:	91 11       	cpse	r25, r1
    2f2a:	fc cf       	rjmp	.-8      	; 0x2f24 <twi_readFrom+0x6>
    2f2c:	91 e0       	ldi	r25, 0x01	; 1
    2f2e:	90 93 ad 05 	sts	0x05AD, r25	; 0x8005ad <twi_state>
    2f32:	20 93 ab 05 	sts	0x05AB, r18	; 0x8005ab <twi_sendStop>
    2f36:	2f ef       	ldi	r18, 0xFF	; 255
    2f38:	20 93 40 05 	sts	0x0540, r18	; 0x800540 <twi_error>
    2f3c:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <twi_masterBufferIndex>
    2f40:	24 0f       	add	r18, r20
    2f42:	20 93 84 05 	sts	0x0584, r18	; 0x800584 <twi_masterBufferLength>
    2f46:	90 93 ac 05 	sts	0x05AC, r25	; 0x8005ac <twi_slarw>
    2f4a:	90 91 ac 05 	lds	r25, 0x05AC	; 0x8005ac <twi_slarw>
    2f4e:	88 0f       	add	r24, r24
    2f50:	89 2b       	or	r24, r25
    2f52:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <twi_slarw>
    2f56:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <twi_inRepStart>
    2f5a:	81 30       	cpi	r24, 0x01	; 1
    2f5c:	61 f4       	brne	.+24     	; 0x2f76 <twi_readFrom+0x58>
    2f5e:	10 92 aa 05 	sts	0x05AA, r1	; 0x8005aa <twi_inRepStart>
    2f62:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <twi_slarw>
    2f66:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2f6a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2f6e:	83 fd       	sbrc	r24, 3
    2f70:	f8 cf       	rjmp	.-16     	; 0x2f62 <twi_readFrom+0x44>
    2f72:	85 ec       	ldi	r24, 0xC5	; 197
    2f74:	01 c0       	rjmp	.+2      	; 0x2f78 <twi_readFrom+0x5a>
    2f76:	85 ee       	ldi	r24, 0xE5	; 229
    2f78:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2f7c:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <twi_state>
    2f80:	81 30       	cpi	r24, 0x01	; 1
    2f82:	e1 f3       	breq	.-8      	; 0x2f7c <twi_readFrom+0x5e>
    2f84:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <twi_masterBufferIndex>
    2f88:	84 17       	cp	r24, r20
    2f8a:	10 f4       	brcc	.+4      	; 0x2f90 <twi_readFrom+0x72>
    2f8c:	40 91 85 05 	lds	r20, 0x0585	; 0x800585 <twi_masterBufferIndex>
    2f90:	a6 e8       	ldi	r26, 0x86	; 134
    2f92:	b5 e0       	ldi	r27, 0x05	; 5
    2f94:	96 2f       	mov	r25, r22
    2f96:	fb 01       	movw	r30, r22
    2f98:	8e 2f       	mov	r24, r30
    2f9a:	89 1b       	sub	r24, r25
    2f9c:	84 17       	cp	r24, r20
    2f9e:	18 f4       	brcc	.+6      	; 0x2fa6 <twi_readFrom+0x88>
    2fa0:	8d 91       	ld	r24, X+
    2fa2:	81 93       	st	Z+, r24
    2fa4:	f9 cf       	rjmp	.-14     	; 0x2f98 <twi_readFrom+0x7a>
    2fa6:	84 2f       	mov	r24, r20
    2fa8:	08 95       	ret
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	08 95       	ret

00002fae <twi_writeTo>:
    2fae:	0f 93       	push	r16
    2fb0:	41 32       	cpi	r20, 0x21	; 33
    2fb2:	08 f0       	brcs	.+2      	; 0x2fb6 <twi_writeTo+0x8>
    2fb4:	4a c0       	rjmp	.+148    	; 0x304a <twi_writeTo+0x9c>
    2fb6:	90 91 ad 05 	lds	r25, 0x05AD	; 0x8005ad <twi_state>
    2fba:	91 11       	cpse	r25, r1
    2fbc:	fc cf       	rjmp	.-8      	; 0x2fb6 <twi_writeTo+0x8>
    2fbe:	32 e0       	ldi	r19, 0x02	; 2
    2fc0:	30 93 ad 05 	sts	0x05AD, r19	; 0x8005ad <twi_state>
    2fc4:	00 93 ab 05 	sts	0x05AB, r16	; 0x8005ab <twi_sendStop>
    2fc8:	3f ef       	ldi	r19, 0xFF	; 255
    2fca:	30 93 40 05 	sts	0x0540, r19	; 0x800540 <twi_error>
    2fce:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <twi_masterBufferIndex>
    2fd2:	40 93 84 05 	sts	0x0584, r20	; 0x800584 <twi_masterBufferLength>
    2fd6:	56 2f       	mov	r21, r22
    2fd8:	a6 e8       	ldi	r26, 0x86	; 134
    2fda:	b5 e0       	ldi	r27, 0x05	; 5
    2fdc:	fb 01       	movw	r30, r22
    2fde:	3e 2f       	mov	r19, r30
    2fe0:	35 1b       	sub	r19, r21
    2fe2:	34 17       	cp	r19, r20
    2fe4:	18 f4       	brcc	.+6      	; 0x2fec <twi_writeTo+0x3e>
    2fe6:	31 91       	ld	r19, Z+
    2fe8:	3d 93       	st	X+, r19
    2fea:	f9 cf       	rjmp	.-14     	; 0x2fde <twi_writeTo+0x30>
    2fec:	10 92 ac 05 	sts	0x05AC, r1	; 0x8005ac <twi_slarw>
    2ff0:	30 91 ac 05 	lds	r19, 0x05AC	; 0x8005ac <twi_slarw>
    2ff4:	88 0f       	add	r24, r24
    2ff6:	83 2b       	or	r24, r19
    2ff8:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <twi_slarw>
    2ffc:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <twi_inRepStart>
    3000:	81 30       	cpi	r24, 0x01	; 1
    3002:	61 f4       	brne	.+24     	; 0x301c <twi_writeTo+0x6e>
    3004:	10 92 aa 05 	sts	0x05AA, r1	; 0x8005aa <twi_inRepStart>
    3008:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <twi_slarw>
    300c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3010:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3014:	83 fd       	sbrc	r24, 3
    3016:	f8 cf       	rjmp	.-16     	; 0x3008 <twi_writeTo+0x5a>
    3018:	85 ec       	ldi	r24, 0xC5	; 197
    301a:	01 c0       	rjmp	.+2      	; 0x301e <twi_writeTo+0x70>
    301c:	85 ee       	ldi	r24, 0xE5	; 229
    301e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3022:	22 23       	and	r18, r18
    3024:	21 f0       	breq	.+8      	; 0x302e <twi_writeTo+0x80>
    3026:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <twi_state>
    302a:	82 30       	cpi	r24, 0x02	; 2
    302c:	d1 f3       	breq	.-12     	; 0x3022 <twi_writeTo+0x74>
    302e:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <twi_error>
    3032:	8f 3f       	cpi	r24, 0xFF	; 255
    3034:	79 f0       	breq	.+30     	; 0x3054 <twi_writeTo+0xa6>
    3036:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <twi_error>
    303a:	80 32       	cpi	r24, 0x20	; 32
    303c:	41 f0       	breq	.+16     	; 0x304e <twi_writeTo+0xa0>
    303e:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <twi_error>
    3042:	80 33       	cpi	r24, 0x30	; 48
    3044:	31 f0       	breq	.+12     	; 0x3052 <twi_writeTo+0xa4>
    3046:	94 e0       	ldi	r25, 0x04	; 4
    3048:	05 c0       	rjmp	.+10     	; 0x3054 <twi_writeTo+0xa6>
    304a:	91 e0       	ldi	r25, 0x01	; 1
    304c:	03 c0       	rjmp	.+6      	; 0x3054 <twi_writeTo+0xa6>
    304e:	92 e0       	ldi	r25, 0x02	; 2
    3050:	01 c0       	rjmp	.+2      	; 0x3054 <twi_writeTo+0xa6>
    3052:	93 e0       	ldi	r25, 0x03	; 3
    3054:	89 2f       	mov	r24, r25
    3056:	0f 91       	pop	r16
    3058:	08 95       	ret

0000305a <twi_transmit>:
    305a:	40 91 62 05 	lds	r20, 0x0562	; 0x800562 <twi_txBufferLength>
    305e:	26 2f       	mov	r18, r22
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	24 0f       	add	r18, r20
    3064:	31 1d       	adc	r19, r1
    3066:	21 32       	cpi	r18, 0x21	; 33
    3068:	31 05       	cpc	r19, r1
    306a:	dc f4       	brge	.+54     	; 0x30a2 <twi_transmit+0x48>
    306c:	20 91 ad 05 	lds	r18, 0x05AD	; 0x8005ad <twi_state>
    3070:	24 30       	cpi	r18, 0x04	; 4
    3072:	c9 f4       	brne	.+50     	; 0x30a6 <twi_transmit+0x4c>
    3074:	fc 01       	movw	r30, r24
    3076:	80 e0       	ldi	r24, 0x00	; 0
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	86 17       	cp	r24, r22
    307c:	58 f4       	brcc	.+22     	; 0x3094 <twi_transmit+0x3a>
    307e:	30 91 62 05 	lds	r19, 0x0562	; 0x800562 <twi_txBufferLength>
    3082:	21 91       	ld	r18, Z+
    3084:	dc 01       	movw	r26, r24
    3086:	ac 59       	subi	r26, 0x9C	; 156
    3088:	ba 4f       	sbci	r27, 0xFA	; 250
    308a:	a3 0f       	add	r26, r19
    308c:	b1 1d       	adc	r27, r1
    308e:	2c 93       	st	X, r18
    3090:	01 96       	adiw	r24, 0x01	; 1
    3092:	f3 cf       	rjmp	.-26     	; 0x307a <twi_transmit+0x20>
    3094:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <twi_txBufferLength>
    3098:	68 0f       	add	r22, r24
    309a:	60 93 62 05 	sts	0x0562, r22	; 0x800562 <twi_txBufferLength>
    309e:	80 e0       	ldi	r24, 0x00	; 0
    30a0:	08 95       	ret
    30a2:	81 e0       	ldi	r24, 0x01	; 1
    30a4:	08 95       	ret
    30a6:	82 e0       	ldi	r24, 0x02	; 2
    30a8:	08 95       	ret

000030aa <twi_attachSlaveRxEvent>:
    30aa:	90 93 a7 05 	sts	0x05A7, r25	; 0x8005a7 <twi_onSlaveReceive+0x1>
    30ae:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <twi_onSlaveReceive>
    30b2:	08 95       	ret

000030b4 <twi_attachSlaveTxEvent>:
    30b4:	90 93 a9 05 	sts	0x05A9, r25	; 0x8005a9 <twi_onSlaveTransmit+0x1>
    30b8:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <twi_onSlaveTransmit>
    30bc:	08 95       	ret

000030be <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    30be:	85 ed       	ldi	r24, 0xD5	; 213
    30c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    30c4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    30c8:	84 fd       	sbrc	r24, 4
    30ca:	fc cf       	rjmp	.-8      	; 0x30c4 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    30cc:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <twi_state>
    30d0:	08 95       	ret

000030d2 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    30d2:	85 ec       	ldi	r24, 0xC5	; 197
    30d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    30d8:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <twi_state>
    30dc:	08 95       	ret

000030de <__vector_36>:
}

ISR(TWI_vect)
{
    30de:	1f 92       	push	r1
    30e0:	0f 92       	push	r0
    30e2:	0f b6       	in	r0, 0x3f	; 63
    30e4:	0f 92       	push	r0
    30e6:	11 24       	eor	r1, r1
    30e8:	2f 93       	push	r18
    30ea:	3f 93       	push	r19
    30ec:	4f 93       	push	r20
    30ee:	5f 93       	push	r21
    30f0:	6f 93       	push	r22
    30f2:	7f 93       	push	r23
    30f4:	8f 93       	push	r24
    30f6:	9f 93       	push	r25
    30f8:	af 93       	push	r26
    30fa:	bf 93       	push	r27
    30fc:	ef 93       	push	r30
    30fe:	ff 93       	push	r31
  switch(TW_STATUS){
    3100:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    3104:	88 7f       	andi	r24, 0xF8	; 248
    3106:	80 36       	cpi	r24, 0x60	; 96
    3108:	09 f4       	brne	.+2      	; 0x310c <__vector_36+0x2e>
    310a:	9e c0       	rjmp	.+316    	; 0x3248 <__vector_36+0x16a>
    310c:	78 f5       	brcc	.+94     	; 0x316c <__vector_36+0x8e>
    310e:	88 32       	cpi	r24, 0x28	; 40
    3110:	09 f4       	brne	.+2      	; 0x3114 <__vector_36+0x36>
    3112:	5d c0       	rjmp	.+186    	; 0x31ce <__vector_36+0xf0>
    3114:	90 f4       	brcc	.+36     	; 0x313a <__vector_36+0x5c>
    3116:	80 31       	cpi	r24, 0x10	; 16
    3118:	09 f4       	brne	.+2      	; 0x311c <__vector_36+0x3e>
    311a:	56 c0       	rjmp	.+172    	; 0x31c8 <__vector_36+0xea>
    311c:	38 f4       	brcc	.+14     	; 0x312c <__vector_36+0x4e>
    311e:	88 23       	and	r24, r24
    3120:	09 f4       	brne	.+2      	; 0x3124 <__vector_36+0x46>
    3122:	f5 c0       	rjmp	.+490    	; 0x330e <__vector_36+0x230>
    3124:	88 30       	cpi	r24, 0x08	; 8
    3126:	09 f4       	brne	.+2      	; 0x312a <__vector_36+0x4c>
    3128:	4f c0       	rjmp	.+158    	; 0x31c8 <__vector_36+0xea>
    312a:	f5 c0       	rjmp	.+490    	; 0x3316 <__vector_36+0x238>
    312c:	88 31       	cpi	r24, 0x18	; 24
    312e:	09 f4       	brne	.+2      	; 0x3132 <__vector_36+0x54>
    3130:	4e c0       	rjmp	.+156    	; 0x31ce <__vector_36+0xf0>
    3132:	80 32       	cpi	r24, 0x20	; 32
    3134:	09 f4       	brne	.+2      	; 0x3138 <__vector_36+0x5a>
    3136:	5f c0       	rjmp	.+190    	; 0x31f6 <__vector_36+0x118>
    3138:	ee c0       	rjmp	.+476    	; 0x3316 <__vector_36+0x238>
    313a:	80 34       	cpi	r24, 0x40	; 64
    313c:	09 f4       	brne	.+2      	; 0x3140 <__vector_36+0x62>
    313e:	6a c0       	rjmp	.+212    	; 0x3214 <__vector_36+0x136>
    3140:	58 f4       	brcc	.+22     	; 0x3158 <__vector_36+0x7a>
    3142:	80 33       	cpi	r24, 0x30	; 48
    3144:	09 f4       	brne	.+2      	; 0x3148 <__vector_36+0x6a>
    3146:	57 c0       	rjmp	.+174    	; 0x31f6 <__vector_36+0x118>
    3148:	88 33       	cpi	r24, 0x38	; 56
    314a:	09 f0       	breq	.+2      	; 0x314e <__vector_36+0x70>
    314c:	e4 c0       	rjmp	.+456    	; 0x3316 <__vector_36+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    314e:	80 93 40 05 	sts	0x0540, r24	; 0x800540 <twi_error>
      twi_releaseBus();
    3152:	0e 94 69 18 	call	0x30d2	; 0x30d2 <twi_releaseBus>
      break;
    3156:	df c0       	rjmp	.+446    	; 0x3316 <__vector_36+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3158:	80 35       	cpi	r24, 0x50	; 80
    315a:	09 f4       	brne	.+2      	; 0x315e <__vector_36+0x80>
    315c:	4f c0       	rjmp	.+158    	; 0x31fc <__vector_36+0x11e>
    315e:	88 35       	cpi	r24, 0x58	; 88
    3160:	09 f4       	brne	.+2      	; 0x3164 <__vector_36+0x86>
    3162:	5d c0       	rjmp	.+186    	; 0x321e <__vector_36+0x140>
    3164:	88 34       	cpi	r24, 0x48	; 72
    3166:	09 f0       	breq	.+2      	; 0x316a <__vector_36+0x8c>
    3168:	d6 c0       	rjmp	.+428    	; 0x3316 <__vector_36+0x238>
    316a:	d3 c0       	rjmp	.+422    	; 0x3312 <__vector_36+0x234>
    316c:	88 39       	cpi	r24, 0x98	; 152
    316e:	09 f4       	brne	.+2      	; 0x3172 <__vector_36+0x94>
    3170:	c4 c0       	rjmp	.+392    	; 0x32fa <__vector_36+0x21c>
    3172:	a8 f4       	brcc	.+42     	; 0x319e <__vector_36+0xc0>
    3174:	88 37       	cpi	r24, 0x78	; 120
    3176:	09 f4       	brne	.+2      	; 0x317a <__vector_36+0x9c>
    3178:	67 c0       	rjmp	.+206    	; 0x3248 <__vector_36+0x16a>
    317a:	38 f4       	brcc	.+14     	; 0x318a <__vector_36+0xac>
    317c:	88 36       	cpi	r24, 0x68	; 104
    317e:	09 f4       	brne	.+2      	; 0x3182 <__vector_36+0xa4>
    3180:	63 c0       	rjmp	.+198    	; 0x3248 <__vector_36+0x16a>
    3182:	80 37       	cpi	r24, 0x70	; 112
    3184:	09 f4       	brne	.+2      	; 0x3188 <__vector_36+0xaa>
    3186:	60 c0       	rjmp	.+192    	; 0x3248 <__vector_36+0x16a>
    3188:	c6 c0       	rjmp	.+396    	; 0x3316 <__vector_36+0x238>
    318a:	88 38       	cpi	r24, 0x88	; 136
    318c:	09 f4       	brne	.+2      	; 0x3190 <__vector_36+0xb2>
    318e:	b5 c0       	rjmp	.+362    	; 0x32fa <__vector_36+0x21c>
    3190:	80 39       	cpi	r24, 0x90	; 144
    3192:	09 f4       	brne	.+2      	; 0x3196 <__vector_36+0xb8>
    3194:	5f c0       	rjmp	.+190    	; 0x3254 <__vector_36+0x176>
    3196:	80 38       	cpi	r24, 0x80	; 128
    3198:	09 f0       	breq	.+2      	; 0x319c <__vector_36+0xbe>
    319a:	bd c0       	rjmp	.+378    	; 0x3316 <__vector_36+0x238>
    319c:	5b c0       	rjmp	.+182    	; 0x3254 <__vector_36+0x176>
    319e:	80 3b       	cpi	r24, 0xB0	; 176
    31a0:	09 f4       	brne	.+2      	; 0x31a4 <__vector_36+0xc6>
    31a2:	83 c0       	rjmp	.+262    	; 0x32aa <__vector_36+0x1cc>
    31a4:	38 f4       	brcc	.+14     	; 0x31b4 <__vector_36+0xd6>
    31a6:	80 3a       	cpi	r24, 0xA0	; 160
    31a8:	09 f4       	brne	.+2      	; 0x31ac <__vector_36+0xce>
    31aa:	66 c0       	rjmp	.+204    	; 0x3278 <__vector_36+0x19a>
    31ac:	88 3a       	cpi	r24, 0xA8	; 168
    31ae:	09 f4       	brne	.+2      	; 0x31b2 <__vector_36+0xd4>
    31b0:	7c c0       	rjmp	.+248    	; 0x32aa <__vector_36+0x1cc>
    31b2:	b1 c0       	rjmp	.+354    	; 0x3316 <__vector_36+0x238>
    31b4:	80 3c       	cpi	r24, 0xC0	; 192
    31b6:	09 f4       	brne	.+2      	; 0x31ba <__vector_36+0xdc>
    31b8:	a4 c0       	rjmp	.+328    	; 0x3302 <__vector_36+0x224>
    31ba:	88 3c       	cpi	r24, 0xC8	; 200
    31bc:	09 f4       	brne	.+2      	; 0x31c0 <__vector_36+0xe2>
    31be:	a1 c0       	rjmp	.+322    	; 0x3302 <__vector_36+0x224>
    31c0:	88 3b       	cpi	r24, 0xB8	; 184
    31c2:	09 f4       	brne	.+2      	; 0x31c6 <__vector_36+0xe8>
    31c4:	87 c0       	rjmp	.+270    	; 0x32d4 <__vector_36+0x1f6>
    31c6:	a7 c0       	rjmp	.+334    	; 0x3316 <__vector_36+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    31c8:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <twi_slarw>
    31cc:	10 c0       	rjmp	.+32     	; 0x31ee <__vector_36+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    31ce:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <twi_masterBufferIndex>
    31d2:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <twi_masterBufferLength>
    31d6:	98 17       	cp	r25, r24
    31d8:	70 f5       	brcc	.+92     	; 0x3236 <__vector_36+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    31da:	e0 91 85 05 	lds	r30, 0x0585	; 0x800585 <twi_masterBufferIndex>
    31de:	81 e0       	ldi	r24, 0x01	; 1
    31e0:	8e 0f       	add	r24, r30
    31e2:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <twi_masterBufferIndex>
    31e6:	f0 e0       	ldi	r31, 0x00	; 0
    31e8:	ea 57       	subi	r30, 0x7A	; 122
    31ea:	fa 4f       	sbci	r31, 0xFA	; 250
    31ec:	80 81       	ld	r24, Z
    31ee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    31f2:	85 ec       	ldi	r24, 0xC5	; 197
    31f4:	83 c0       	rjmp	.+262    	; 0x32fc <__vector_36+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    31f6:	80 93 40 05 	sts	0x0540, r24	; 0x800540 <twi_error>
    31fa:	8b c0       	rjmp	.+278    	; 0x3312 <__vector_36+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    31fc:	e0 91 85 05 	lds	r30, 0x0585	; 0x800585 <twi_masterBufferIndex>
    3200:	81 e0       	ldi	r24, 0x01	; 1
    3202:	8e 0f       	add	r24, r30
    3204:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <twi_masterBufferIndex>
    3208:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    320c:	f0 e0       	ldi	r31, 0x00	; 0
    320e:	ea 57       	subi	r30, 0x7A	; 122
    3210:	fa 4f       	sbci	r31, 0xFA	; 250
    3212:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3214:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <twi_masterBufferIndex>
    3218:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <twi_masterBufferLength>
    321c:	6b c0       	rjmp	.+214    	; 0x32f4 <__vector_36+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    321e:	e0 91 85 05 	lds	r30, 0x0585	; 0x800585 <twi_masterBufferIndex>
    3222:	81 e0       	ldi	r24, 0x01	; 1
    3224:	8e 0f       	add	r24, r30
    3226:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <twi_masterBufferIndex>
    322a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    322e:	f0 e0       	ldi	r31, 0x00	; 0
    3230:	ea 57       	subi	r30, 0x7A	; 122
    3232:	fa 4f       	sbci	r31, 0xFA	; 250
    3234:	80 83       	st	Z, r24
	if (twi_sendStop)
    3236:	80 91 ab 05 	lds	r24, 0x05AB	; 0x8005ab <twi_sendStop>
    323a:	81 11       	cpse	r24, r1
    323c:	6a c0       	rjmp	.+212    	; 0x3312 <__vector_36+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    323e:	81 e0       	ldi	r24, 0x01	; 1
    3240:	80 93 aa 05 	sts	0x05AA, r24	; 0x8005aa <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3244:	84 ea       	ldi	r24, 0xA4	; 164
    3246:	5e c0       	rjmp	.+188    	; 0x3304 <__vector_36+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3248:	83 e0       	ldi	r24, 0x03	; 3
    324a:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    324e:	10 92 41 05 	sts	0x0541, r1	; 0x800541 <twi_rxBufferIndex>
    3252:	cf cf       	rjmp	.-98     	; 0x31f2 <__vector_36+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3254:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <twi_rxBufferIndex>
    3258:	80 32       	cpi	r24, 0x20	; 32
    325a:	08 f0       	brcs	.+2      	; 0x325e <__vector_36+0x180>
    325c:	4e c0       	rjmp	.+156    	; 0x32fa <__vector_36+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    325e:	e0 91 41 05 	lds	r30, 0x0541	; 0x800541 <twi_rxBufferIndex>
    3262:	81 e0       	ldi	r24, 0x01	; 1
    3264:	8e 0f       	add	r24, r30
    3266:	80 93 41 05 	sts	0x0541, r24	; 0x800541 <twi_rxBufferIndex>
    326a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    326e:	f0 e0       	ldi	r31, 0x00	; 0
    3270:	ee 5b       	subi	r30, 0xBE	; 190
    3272:	fa 4f       	sbci	r31, 0xFA	; 250
    3274:	80 83       	st	Z, r24
    3276:	bd cf       	rjmp	.-134    	; 0x31f2 <__vector_36+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    3278:	0e 94 69 18 	call	0x30d2	; 0x30d2 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    327c:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <twi_rxBufferIndex>
    3280:	80 32       	cpi	r24, 0x20	; 32
    3282:	30 f4       	brcc	.+12     	; 0x3290 <__vector_36+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3284:	e0 91 41 05 	lds	r30, 0x0541	; 0x800541 <twi_rxBufferIndex>
    3288:	f0 e0       	ldi	r31, 0x00	; 0
    328a:	ee 5b       	subi	r30, 0xBE	; 190
    328c:	fa 4f       	sbci	r31, 0xFA	; 250
    328e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3290:	60 91 41 05 	lds	r22, 0x0541	; 0x800541 <twi_rxBufferIndex>
    3294:	70 e0       	ldi	r23, 0x00	; 0
    3296:	e0 91 a6 05 	lds	r30, 0x05A6	; 0x8005a6 <twi_onSlaveReceive>
    329a:	f0 91 a7 05 	lds	r31, 0x05A7	; 0x8005a7 <twi_onSlaveReceive+0x1>
    329e:	82 e4       	ldi	r24, 0x42	; 66
    32a0:	95 e0       	ldi	r25, 0x05	; 5
    32a2:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    32a4:	10 92 41 05 	sts	0x0541, r1	; 0x800541 <twi_rxBufferIndex>
      break;
    32a8:	36 c0       	rjmp	.+108    	; 0x3316 <__vector_36+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    32aa:	84 e0       	ldi	r24, 0x04	; 4
    32ac:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    32b0:	10 92 63 05 	sts	0x0563, r1	; 0x800563 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    32b4:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    32b8:	e0 91 a8 05 	lds	r30, 0x05A8	; 0x8005a8 <twi_onSlaveTransmit>
    32bc:	f0 91 a9 05 	lds	r31, 0x05A9	; 0x8005a9 <twi_onSlaveTransmit+0x1>
    32c0:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    32c2:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <twi_txBufferLength>
    32c6:	81 11       	cpse	r24, r1
    32c8:	05 c0       	rjmp	.+10     	; 0x32d4 <__vector_36+0x1f6>
        twi_txBufferLength = 1;
    32ca:	81 e0       	ldi	r24, 0x01	; 1
    32cc:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    32d0:	10 92 64 05 	sts	0x0564, r1	; 0x800564 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    32d4:	e0 91 63 05 	lds	r30, 0x0563	; 0x800563 <twi_txBufferIndex>
    32d8:	81 e0       	ldi	r24, 0x01	; 1
    32da:	8e 0f       	add	r24, r30
    32dc:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <twi_txBufferIndex>
    32e0:	f0 e0       	ldi	r31, 0x00	; 0
    32e2:	ec 59       	subi	r30, 0x9C	; 156
    32e4:	fa 4f       	sbci	r31, 0xFA	; 250
    32e6:	80 81       	ld	r24, Z
    32e8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    32ec:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <twi_txBufferIndex>
    32f0:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <twi_txBufferLength>
    32f4:	98 17       	cp	r25, r24
    32f6:	08 f4       	brcc	.+2      	; 0x32fa <__vector_36+0x21c>
    32f8:	7c cf       	rjmp	.-264    	; 0x31f2 <__vector_36+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    32fa:	85 e8       	ldi	r24, 0x85	; 133
    32fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3300:	0a c0       	rjmp	.+20     	; 0x3316 <__vector_36+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3302:	85 ec       	ldi	r24, 0xC5	; 197
    3304:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3308:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <twi_state>
      break;
    330c:	04 c0       	rjmp	.+8      	; 0x3316 <__vector_36+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    330e:	10 92 40 05 	sts	0x0540, r1	; 0x800540 <twi_error>
      twi_stop();
    3312:	0e 94 5f 18 	call	0x30be	; 0x30be <twi_stop>
      break;
  }
}
    3316:	ff 91       	pop	r31
    3318:	ef 91       	pop	r30
    331a:	bf 91       	pop	r27
    331c:	af 91       	pop	r26
    331e:	9f 91       	pop	r25
    3320:	8f 91       	pop	r24
    3322:	7f 91       	pop	r23
    3324:	6f 91       	pop	r22
    3326:	5f 91       	pop	r21
    3328:	4f 91       	pop	r20
    332a:	3f 91       	pop	r19
    332c:	2f 91       	pop	r18
    332e:	0f 90       	pop	r0
    3330:	0f be       	out	0x3f, r0	; 63
    3332:	0f 90       	pop	r0
    3334:	1f 90       	pop	r1
    3336:	18 95       	reti

00003338 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    3338:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <_ZN7TwoWire14rxBufferLengthE>
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	20 91 e3 05 	lds	r18, 0x05E3	; 0x8005e3 <_ZN7TwoWire13rxBufferIndexE>
    3342:	82 1b       	sub	r24, r18
    3344:	91 09       	sbc	r25, r1
    3346:	08 95       	ret

00003348 <_ZN7TwoWire4readEv>:
    3348:	90 91 e3 05 	lds	r25, 0x05E3	; 0x8005e3 <_ZN7TwoWire13rxBufferIndexE>
    334c:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <_ZN7TwoWire14rxBufferLengthE>
    3350:	98 17       	cp	r25, r24
    3352:	50 f4       	brcc	.+20     	; 0x3368 <_ZN7TwoWire4readEv+0x20>
    3354:	e9 2f       	mov	r30, r25
    3356:	f0 e0       	ldi	r31, 0x00	; 0
    3358:	ec 51       	subi	r30, 0x1C	; 28
    335a:	fa 4f       	sbci	r31, 0xFA	; 250
    335c:	20 81       	ld	r18, Z
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	9f 5f       	subi	r25, 0xFF	; 255
    3362:	90 93 e3 05 	sts	0x05E3, r25	; 0x8005e3 <_ZN7TwoWire13rxBufferIndexE>
    3366:	02 c0       	rjmp	.+4      	; 0x336c <_ZN7TwoWire4readEv+0x24>
    3368:	2f ef       	ldi	r18, 0xFF	; 255
    336a:	3f ef       	ldi	r19, 0xFF	; 255
    336c:	c9 01       	movw	r24, r18
    336e:	08 95       	ret

00003370 <_ZN7TwoWire4peekEv>:
    3370:	e0 91 e3 05 	lds	r30, 0x05E3	; 0x8005e3 <_ZN7TwoWire13rxBufferIndexE>
    3374:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <_ZN7TwoWire14rxBufferLengthE>
    3378:	e8 17       	cp	r30, r24
    337a:	30 f4       	brcc	.+12     	; 0x3388 <_ZN7TwoWire4peekEv+0x18>
    337c:	f0 e0       	ldi	r31, 0x00	; 0
    337e:	ec 51       	subi	r30, 0x1C	; 28
    3380:	fa 4f       	sbci	r31, 0xFA	; 250
    3382:	80 81       	ld	r24, Z
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	08 95       	ret
    3388:	8f ef       	ldi	r24, 0xFF	; 255
    338a:	9f ef       	ldi	r25, 0xFF	; 255
    338c:	08 95       	ret

0000338e <_ZN7TwoWire5flushEv>:
    338e:	08 95       	ret

00003390 <_ZN7TwoWire16onReceiveServiceEPhi>:
    3390:	cf 93       	push	r28
    3392:	df 93       	push	r29
    3394:	ec 01       	movw	r28, r24
    3396:	e0 91 ba 05 	lds	r30, 0x05BA	; 0x8005ba <_ZN7TwoWire14user_onReceiveE>
    339a:	f0 91 bb 05 	lds	r31, 0x05BB	; 0x8005bb <_ZN7TwoWire14user_onReceiveE+0x1>
    339e:	30 97       	sbiw	r30, 0x00	; 0
    33a0:	f1 f0       	breq	.+60     	; 0x33de <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    33a2:	90 91 e3 05 	lds	r25, 0x05E3	; 0x8005e3 <_ZN7TwoWire13rxBufferIndexE>
    33a6:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <_ZN7TwoWire14rxBufferLengthE>
    33aa:	98 17       	cp	r25, r24
    33ac:	c0 f0       	brcs	.+48     	; 0x33de <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	29 2f       	mov	r18, r25
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	26 17       	cp	r18, r22
    33b6:	37 07       	cpc	r19, r23
    33b8:	54 f4       	brge	.+20     	; 0x33ce <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    33ba:	de 01       	movw	r26, r28
    33bc:	a2 0f       	add	r26, r18
    33be:	b3 1f       	adc	r27, r19
    33c0:	4c 91       	ld	r20, X
    33c2:	d9 01       	movw	r26, r18
    33c4:	ac 51       	subi	r26, 0x1C	; 28
    33c6:	ba 4f       	sbci	r27, 0xFA	; 250
    33c8:	4c 93       	st	X, r20
    33ca:	9f 5f       	subi	r25, 0xFF	; 255
    33cc:	f1 cf       	rjmp	.-30     	; 0x33b0 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    33ce:	10 92 e3 05 	sts	0x05E3, r1	; 0x8005e3 <_ZN7TwoWire13rxBufferIndexE>
    33d2:	60 93 e2 05 	sts	0x05E2, r22	; 0x8005e2 <_ZN7TwoWire14rxBufferLengthE>
    33d6:	cb 01       	movw	r24, r22
    33d8:	df 91       	pop	r29
    33da:	cf 91       	pop	r28
    33dc:	09 94       	ijmp
    33de:	df 91       	pop	r29
    33e0:	cf 91       	pop	r28
    33e2:	08 95       	ret

000033e4 <_ZN7TwoWire16onRequestServiceEv>:
    33e4:	e0 91 bc 05 	lds	r30, 0x05BC	; 0x8005bc <_ZN7TwoWire14user_onRequestE>
    33e8:	f0 91 bd 05 	lds	r31, 0x05BD	; 0x8005bd <_ZN7TwoWire14user_onRequestE+0x1>
    33ec:	30 97       	sbiw	r30, 0x00	; 0
    33ee:	29 f0       	breq	.+10     	; 0x33fa <_ZN7TwoWire16onRequestServiceEv+0x16>
    33f0:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <_ZN7TwoWire13txBufferIndexE>
    33f4:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <_ZN7TwoWire14txBufferLengthE>
    33f8:	09 94       	ijmp
    33fa:	08 95       	ret

000033fc <_ZN7TwoWire5writeEPKhj>:
    33fc:	cf 92       	push	r12
    33fe:	df 92       	push	r13
    3400:	ef 92       	push	r14
    3402:	ff 92       	push	r15
    3404:	0f 93       	push	r16
    3406:	1f 93       	push	r17
    3408:	cf 93       	push	r28
    340a:	df 93       	push	r29
    340c:	7c 01       	movw	r14, r24
    340e:	cb 01       	movw	r24, r22
    3410:	8a 01       	movw	r16, r20
    3412:	20 91 be 05 	lds	r18, 0x05BE	; 0x8005be <_ZN7TwoWire12transmittingE>
    3416:	22 23       	and	r18, r18
    3418:	89 f0       	breq	.+34     	; 0x343c <_ZN7TwoWire5writeEPKhj+0x40>
    341a:	eb 01       	movw	r28, r22
    341c:	6b 01       	movw	r12, r22
    341e:	c4 0e       	add	r12, r20
    3420:	d5 1e       	adc	r13, r21
    3422:	cc 15       	cp	r28, r12
    3424:	dd 05       	cpc	r29, r13
    3426:	69 f0       	breq	.+26     	; 0x3442 <_ZN7TwoWire5writeEPKhj+0x46>
    3428:	69 91       	ld	r22, Y+
    342a:	d7 01       	movw	r26, r14
    342c:	ed 91       	ld	r30, X+
    342e:	fc 91       	ld	r31, X
    3430:	01 90       	ld	r0, Z+
    3432:	f0 81       	ld	r31, Z
    3434:	e0 2d       	mov	r30, r0
    3436:	c7 01       	movw	r24, r14
    3438:	09 95       	icall
    343a:	f3 cf       	rjmp	.-26     	; 0x3422 <_ZN7TwoWire5writeEPKhj+0x26>
    343c:	64 2f       	mov	r22, r20
    343e:	0e 94 2d 18 	call	0x305a	; 0x305a <twi_transmit>
    3442:	c8 01       	movw	r24, r16
    3444:	df 91       	pop	r29
    3446:	cf 91       	pop	r28
    3448:	1f 91       	pop	r17
    344a:	0f 91       	pop	r16
    344c:	ff 90       	pop	r15
    344e:	ef 90       	pop	r14
    3450:	df 90       	pop	r13
    3452:	cf 90       	pop	r12
    3454:	08 95       	ret

00003456 <_ZN7TwoWire5writeEh>:
    3456:	cf 93       	push	r28
    3458:	df 93       	push	r29
    345a:	1f 92       	push	r1
    345c:	cd b7       	in	r28, 0x3d	; 61
    345e:	de b7       	in	r29, 0x3e	; 62
    3460:	69 83       	std	Y+1, r22	; 0x01
    3462:	20 91 be 05 	lds	r18, 0x05BE	; 0x8005be <_ZN7TwoWire12transmittingE>
    3466:	22 23       	and	r18, r18
    3468:	d1 f0       	breq	.+52     	; 0x349e <_ZN7TwoWire5writeEh+0x48>
    346a:	20 91 bf 05 	lds	r18, 0x05BF	; 0x8005bf <_ZN7TwoWire14txBufferLengthE>
    346e:	20 32       	cpi	r18, 0x20	; 32
    3470:	40 f0       	brcs	.+16     	; 0x3482 <_ZN7TwoWire5writeEh+0x2c>
    3472:	21 e0       	ldi	r18, 0x01	; 1
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	fc 01       	movw	r30, r24
    3478:	33 83       	std	Z+3, r19	; 0x03
    347a:	22 83       	std	Z+2, r18	; 0x02
    347c:	80 e0       	ldi	r24, 0x00	; 0
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	15 c0       	rjmp	.+42     	; 0x34ac <_ZN7TwoWire5writeEh+0x56>
    3482:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <_ZN7TwoWire13txBufferIndexE>
    3486:	e8 2f       	mov	r30, r24
    3488:	f0 e0       	ldi	r31, 0x00	; 0
    348a:	ef 53       	subi	r30, 0x3F	; 63
    348c:	fa 4f       	sbci	r31, 0xFA	; 250
    348e:	99 81       	ldd	r25, Y+1	; 0x01
    3490:	90 83       	st	Z, r25
    3492:	8f 5f       	subi	r24, 0xFF	; 255
    3494:	80 93 c0 05 	sts	0x05C0, r24	; 0x8005c0 <_ZN7TwoWire13txBufferIndexE>
    3498:	80 93 bf 05 	sts	0x05BF, r24	; 0x8005bf <_ZN7TwoWire14txBufferLengthE>
    349c:	05 c0       	rjmp	.+10     	; 0x34a8 <_ZN7TwoWire5writeEh+0x52>
    349e:	61 e0       	ldi	r22, 0x01	; 1
    34a0:	ce 01       	movw	r24, r28
    34a2:	01 96       	adiw	r24, 0x01	; 1
    34a4:	0e 94 2d 18 	call	0x305a	; 0x305a <twi_transmit>
    34a8:	81 e0       	ldi	r24, 0x01	; 1
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	0f 90       	pop	r0
    34ae:	df 91       	pop	r29
    34b0:	cf 91       	pop	r28
    34b2:	08 95       	ret

000034b4 <_ZN7TwoWireC1Ev>:
    34b4:	fc 01       	movw	r30, r24
    34b6:	13 82       	std	Z+3, r1	; 0x03
    34b8:	12 82       	std	Z+2, r1	; 0x02
    34ba:	88 ee       	ldi	r24, 0xE8	; 232
    34bc:	93 e0       	ldi	r25, 0x03	; 3
    34be:	a0 e0       	ldi	r26, 0x00	; 0
    34c0:	b0 e0       	ldi	r27, 0x00	; 0
    34c2:	84 83       	std	Z+4, r24	; 0x04
    34c4:	95 83       	std	Z+5, r25	; 0x05
    34c6:	a6 83       	std	Z+6, r26	; 0x06
    34c8:	b7 83       	std	Z+7, r27	; 0x07
    34ca:	86 e0       	ldi	r24, 0x06	; 6
    34cc:	93 e0       	ldi	r25, 0x03	; 3
    34ce:	91 83       	std	Z+1, r25	; 0x01
    34d0:	80 83       	st	Z, r24
    34d2:	08 95       	ret

000034d4 <_ZN7TwoWire5beginEv>:
    34d4:	10 92 e3 05 	sts	0x05E3, r1	; 0x8005e3 <_ZN7TwoWire13rxBufferIndexE>
    34d8:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <_ZN7TwoWire14rxBufferLengthE>
    34dc:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <_ZN7TwoWire13txBufferIndexE>
    34e0:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <_ZN7TwoWire14txBufferLengthE>
    34e4:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <twi_init>
    34e8:	82 ef       	ldi	r24, 0xF2	; 242
    34ea:	99 e1       	ldi	r25, 0x19	; 25
    34ec:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <twi_attachSlaveTxEvent>
    34f0:	88 ec       	ldi	r24, 0xC8	; 200
    34f2:	99 e1       	ldi	r25, 0x19	; 25
    34f4:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <twi_attachSlaveRxEvent>

000034f8 <_ZN7TwoWire17beginTransmissionEh>:
    34f8:	81 e0       	ldi	r24, 0x01	; 1
    34fa:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <_ZN7TwoWire12transmittingE>
    34fe:	60 93 e1 05 	sts	0x05E1, r22	; 0x8005e1 <_ZN7TwoWire9txAddressE>
    3502:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <_ZN7TwoWire13txBufferIndexE>
    3506:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <_ZN7TwoWire14txBufferLengthE>
    350a:	08 95       	ret

0000350c <_ZN7TwoWire15endTransmissionEh>:
    350c:	0f 93       	push	r16
    350e:	06 2f       	mov	r16, r22
    3510:	21 e0       	ldi	r18, 0x01	; 1
    3512:	40 91 bf 05 	lds	r20, 0x05BF	; 0x8005bf <_ZN7TwoWire14txBufferLengthE>
    3516:	61 ec       	ldi	r22, 0xC1	; 193
    3518:	75 e0       	ldi	r23, 0x05	; 5
    351a:	80 91 e1 05 	lds	r24, 0x05E1	; 0x8005e1 <_ZN7TwoWire9txAddressE>
    351e:	0e 94 d7 17 	call	0x2fae	; 0x2fae <twi_writeTo>
    3522:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <_ZN7TwoWire13txBufferIndexE>
    3526:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <_ZN7TwoWire14txBufferLengthE>
    352a:	10 92 be 05 	sts	0x05BE, r1	; 0x8005be <_ZN7TwoWire12transmittingE>
    352e:	0f 91       	pop	r16
    3530:	08 95       	ret

00003532 <_ZN7TwoWire11requestFromEhhmhh>:
    3532:	4f 92       	push	r4
    3534:	5f 92       	push	r5
    3536:	6f 92       	push	r6
    3538:	7f 92       	push	r7
    353a:	af 92       	push	r10
    353c:	bf 92       	push	r11
    353e:	cf 92       	push	r12
    3540:	ef 92       	push	r14
    3542:	ff 92       	push	r15
    3544:	0f 93       	push	r16
    3546:	1f 93       	push	r17
    3548:	cf 93       	push	r28
    354a:	df 93       	push	r29
    354c:	5c 01       	movw	r10, r24
    354e:	f6 2e       	mov	r15, r22
    3550:	d4 2f       	mov	r29, r20
    3552:	28 01       	movw	r4, r16
    3554:	39 01       	movw	r6, r18
    3556:	ee 20       	and	r14, r14
    3558:	21 f1       	breq	.+72     	; 0x35a2 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    355a:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <_ZN7TwoWire17beginTransmissionEh>
    355e:	ce 2d       	mov	r28, r14
    3560:	c4 30       	cpi	r28, 0x04	; 4
    3562:	08 f0       	brcs	.+2      	; 0x3566 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    3564:	c3 e0       	ldi	r28, 0x03	; 3
    3566:	c1 50       	subi	r28, 0x01	; 1
    3568:	c0 f0       	brcs	.+48     	; 0x359a <_ZN7TwoWire11requestFromEhhmhh+0x68>
    356a:	28 e0       	ldi	r18, 0x08	; 8
    356c:	c2 9f       	mul	r28, r18
    356e:	c0 01       	movw	r24, r0
    3570:	11 24       	eor	r1, r1
    3572:	a3 01       	movw	r20, r6
    3574:	92 01       	movw	r18, r4
    3576:	04 c0       	rjmp	.+8      	; 0x3580 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    3578:	56 95       	lsr	r21
    357a:	47 95       	ror	r20
    357c:	37 95       	ror	r19
    357e:	27 95       	ror	r18
    3580:	8a 95       	dec	r24
    3582:	d2 f7       	brpl	.-12     	; 0x3578 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    3584:	ca 01       	movw	r24, r20
    3586:	b9 01       	movw	r22, r18
    3588:	d5 01       	movw	r26, r10
    358a:	ed 91       	ld	r30, X+
    358c:	fc 91       	ld	r31, X
    358e:	01 90       	ld	r0, Z+
    3590:	f0 81       	ld	r31, Z
    3592:	e0 2d       	mov	r30, r0
    3594:	c5 01       	movw	r24, r10
    3596:	09 95       	icall
    3598:	e6 cf       	rjmp	.-52     	; 0x3566 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    359a:	60 e0       	ldi	r22, 0x00	; 0
    359c:	c5 01       	movw	r24, r10
    359e:	0e 94 86 1a 	call	0x350c	; 0x350c <_ZN7TwoWire15endTransmissionEh>
    35a2:	4d 2f       	mov	r20, r29
    35a4:	d1 32       	cpi	r29, 0x21	; 33
    35a6:	08 f0       	brcs	.+2      	; 0x35aa <_ZN7TwoWire11requestFromEhhmhh+0x78>
    35a8:	40 e2       	ldi	r20, 0x20	; 32
    35aa:	2c 2d       	mov	r18, r12
    35ac:	64 ee       	ldi	r22, 0xE4	; 228
    35ae:	75 e0       	ldi	r23, 0x05	; 5
    35b0:	8f 2d       	mov	r24, r15
    35b2:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <twi_readFrom>
    35b6:	10 92 e3 05 	sts	0x05E3, r1	; 0x8005e3 <_ZN7TwoWire13rxBufferIndexE>
    35ba:	80 93 e2 05 	sts	0x05E2, r24	; 0x8005e2 <_ZN7TwoWire14rxBufferLengthE>
    35be:	df 91       	pop	r29
    35c0:	cf 91       	pop	r28
    35c2:	1f 91       	pop	r17
    35c4:	0f 91       	pop	r16
    35c6:	ff 90       	pop	r15
    35c8:	ef 90       	pop	r14
    35ca:	cf 90       	pop	r12
    35cc:	bf 90       	pop	r11
    35ce:	af 90       	pop	r10
    35d0:	7f 90       	pop	r7
    35d2:	6f 90       	pop	r6
    35d4:	5f 90       	pop	r5
    35d6:	4f 90       	pop	r4
    35d8:	08 95       	ret

000035da <_ZN7TwoWire11requestFromEhhh>:
    35da:	cf 92       	push	r12
    35dc:	ef 92       	push	r14
    35de:	0f 93       	push	r16
    35e0:	1f 93       	push	r17
    35e2:	c2 2e       	mov	r12, r18
    35e4:	e1 2c       	mov	r14, r1
    35e6:	00 e0       	ldi	r16, 0x00	; 0
    35e8:	10 e0       	ldi	r17, 0x00	; 0
    35ea:	98 01       	movw	r18, r16
    35ec:	0e 94 99 1a 	call	0x3532	; 0x3532 <_ZN7TwoWire11requestFromEhhmhh>
    35f0:	1f 91       	pop	r17
    35f2:	0f 91       	pop	r16
    35f4:	ef 90       	pop	r14
    35f6:	cf 90       	pop	r12
    35f8:	08 95       	ret

000035fa <_ZN7TwoWire11requestFromEii>:
    35fa:	21 e0       	ldi	r18, 0x01	; 1
    35fc:	0c 94 ed 1a 	jmp	0x35da	; 0x35da <_ZN7TwoWire11requestFromEhhh>

00003600 <_ZN7TwoWire15endTransmissionEv>:
    3600:	61 e0       	ldi	r22, 0x01	; 1
    3602:	0c 94 86 1a 	jmp	0x350c	; 0x350c <_ZN7TwoWire15endTransmissionEh>

00003606 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3606:	8e ea       	ldi	r24, 0xAE	; 174
    3608:	95 e0       	ldi	r25, 0x05	; 5
    360a:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <_ZN7TwoWireC1Ev>

0000360e <__subsf3>:
    360e:	50 58       	subi	r21, 0x80	; 128

00003610 <__addsf3>:
    3610:	bb 27       	eor	r27, r27
    3612:	aa 27       	eor	r26, r26
    3614:	0e 94 1f 1b 	call	0x363e	; 0x363e <__addsf3x>
    3618:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <__fp_round>
    361c:	0e 94 8b 1c 	call	0x3916	; 0x3916 <__fp_pscA>
    3620:	38 f0       	brcs	.+14     	; 0x3630 <__addsf3+0x20>
    3622:	0e 94 92 1c 	call	0x3924	; 0x3924 <__fp_pscB>
    3626:	20 f0       	brcs	.+8      	; 0x3630 <__addsf3+0x20>
    3628:	39 f4       	brne	.+14     	; 0x3638 <__addsf3+0x28>
    362a:	9f 3f       	cpi	r25, 0xFF	; 255
    362c:	19 f4       	brne	.+6      	; 0x3634 <__addsf3+0x24>
    362e:	26 f4       	brtc	.+8      	; 0x3638 <__addsf3+0x28>
    3630:	0c 94 88 1c 	jmp	0x3910	; 0x3910 <__fp_nan>
    3634:	0e f4       	brtc	.+2      	; 0x3638 <__addsf3+0x28>
    3636:	e0 95       	com	r30
    3638:	e7 fb       	bst	r30, 7
    363a:	0c 94 82 1c 	jmp	0x3904	; 0x3904 <__fp_inf>

0000363e <__addsf3x>:
    363e:	e9 2f       	mov	r30, r25
    3640:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__fp_split3>
    3644:	58 f3       	brcs	.-42     	; 0x361c <__addsf3+0xc>
    3646:	ba 17       	cp	r27, r26
    3648:	62 07       	cpc	r22, r18
    364a:	73 07       	cpc	r23, r19
    364c:	84 07       	cpc	r24, r20
    364e:	95 07       	cpc	r25, r21
    3650:	20 f0       	brcs	.+8      	; 0x365a <__addsf3x+0x1c>
    3652:	79 f4       	brne	.+30     	; 0x3672 <__addsf3x+0x34>
    3654:	a6 f5       	brtc	.+104    	; 0x36be <__addsf3x+0x80>
    3656:	0c 94 cc 1c 	jmp	0x3998	; 0x3998 <__fp_zero>
    365a:	0e f4       	brtc	.+2      	; 0x365e <__addsf3x+0x20>
    365c:	e0 95       	com	r30
    365e:	0b 2e       	mov	r0, r27
    3660:	ba 2f       	mov	r27, r26
    3662:	a0 2d       	mov	r26, r0
    3664:	0b 01       	movw	r0, r22
    3666:	b9 01       	movw	r22, r18
    3668:	90 01       	movw	r18, r0
    366a:	0c 01       	movw	r0, r24
    366c:	ca 01       	movw	r24, r20
    366e:	a0 01       	movw	r20, r0
    3670:	11 24       	eor	r1, r1
    3672:	ff 27       	eor	r31, r31
    3674:	59 1b       	sub	r21, r25
    3676:	99 f0       	breq	.+38     	; 0x369e <__addsf3x+0x60>
    3678:	59 3f       	cpi	r21, 0xF9	; 249
    367a:	50 f4       	brcc	.+20     	; 0x3690 <__addsf3x+0x52>
    367c:	50 3e       	cpi	r21, 0xE0	; 224
    367e:	68 f1       	brcs	.+90     	; 0x36da <__addsf3x+0x9c>
    3680:	1a 16       	cp	r1, r26
    3682:	f0 40       	sbci	r31, 0x00	; 0
    3684:	a2 2f       	mov	r26, r18
    3686:	23 2f       	mov	r18, r19
    3688:	34 2f       	mov	r19, r20
    368a:	44 27       	eor	r20, r20
    368c:	58 5f       	subi	r21, 0xF8	; 248
    368e:	f3 cf       	rjmp	.-26     	; 0x3676 <__addsf3x+0x38>
    3690:	46 95       	lsr	r20
    3692:	37 95       	ror	r19
    3694:	27 95       	ror	r18
    3696:	a7 95       	ror	r26
    3698:	f0 40       	sbci	r31, 0x00	; 0
    369a:	53 95       	inc	r21
    369c:	c9 f7       	brne	.-14     	; 0x3690 <__addsf3x+0x52>
    369e:	7e f4       	brtc	.+30     	; 0x36be <__addsf3x+0x80>
    36a0:	1f 16       	cp	r1, r31
    36a2:	ba 0b       	sbc	r27, r26
    36a4:	62 0b       	sbc	r22, r18
    36a6:	73 0b       	sbc	r23, r19
    36a8:	84 0b       	sbc	r24, r20
    36aa:	ba f0       	brmi	.+46     	; 0x36da <__addsf3x+0x9c>
    36ac:	91 50       	subi	r25, 0x01	; 1
    36ae:	a1 f0       	breq	.+40     	; 0x36d8 <__addsf3x+0x9a>
    36b0:	ff 0f       	add	r31, r31
    36b2:	bb 1f       	adc	r27, r27
    36b4:	66 1f       	adc	r22, r22
    36b6:	77 1f       	adc	r23, r23
    36b8:	88 1f       	adc	r24, r24
    36ba:	c2 f7       	brpl	.-16     	; 0x36ac <__addsf3x+0x6e>
    36bc:	0e c0       	rjmp	.+28     	; 0x36da <__addsf3x+0x9c>
    36be:	ba 0f       	add	r27, r26
    36c0:	62 1f       	adc	r22, r18
    36c2:	73 1f       	adc	r23, r19
    36c4:	84 1f       	adc	r24, r20
    36c6:	48 f4       	brcc	.+18     	; 0x36da <__addsf3x+0x9c>
    36c8:	87 95       	ror	r24
    36ca:	77 95       	ror	r23
    36cc:	67 95       	ror	r22
    36ce:	b7 95       	ror	r27
    36d0:	f7 95       	ror	r31
    36d2:	9e 3f       	cpi	r25, 0xFE	; 254
    36d4:	08 f0       	brcs	.+2      	; 0x36d8 <__addsf3x+0x9a>
    36d6:	b0 cf       	rjmp	.-160    	; 0x3638 <__addsf3+0x28>
    36d8:	93 95       	inc	r25
    36da:	88 0f       	add	r24, r24
    36dc:	08 f0       	brcs	.+2      	; 0x36e0 <__addsf3x+0xa2>
    36de:	99 27       	eor	r25, r25
    36e0:	ee 0f       	add	r30, r30
    36e2:	97 95       	ror	r25
    36e4:	87 95       	ror	r24
    36e6:	08 95       	ret

000036e8 <__cmpsf2>:
    36e8:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <__fp_cmp>
    36ec:	08 f4       	brcc	.+2      	; 0x36f0 <__cmpsf2+0x8>
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	08 95       	ret

000036f2 <__divsf3>:
    36f2:	0e 94 8d 1b 	call	0x371a	; 0x371a <__divsf3x>
    36f6:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <__fp_round>
    36fa:	0e 94 92 1c 	call	0x3924	; 0x3924 <__fp_pscB>
    36fe:	58 f0       	brcs	.+22     	; 0x3716 <__divsf3+0x24>
    3700:	0e 94 8b 1c 	call	0x3916	; 0x3916 <__fp_pscA>
    3704:	40 f0       	brcs	.+16     	; 0x3716 <__divsf3+0x24>
    3706:	29 f4       	brne	.+10     	; 0x3712 <__divsf3+0x20>
    3708:	5f 3f       	cpi	r21, 0xFF	; 255
    370a:	29 f0       	breq	.+10     	; 0x3716 <__divsf3+0x24>
    370c:	0c 94 82 1c 	jmp	0x3904	; 0x3904 <__fp_inf>
    3710:	51 11       	cpse	r21, r1
    3712:	0c 94 cd 1c 	jmp	0x399a	; 0x399a <__fp_szero>
    3716:	0c 94 88 1c 	jmp	0x3910	; 0x3910 <__fp_nan>

0000371a <__divsf3x>:
    371a:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__fp_split3>
    371e:	68 f3       	brcs	.-38     	; 0x36fa <__divsf3+0x8>

00003720 <__divsf3_pse>:
    3720:	99 23       	and	r25, r25
    3722:	b1 f3       	breq	.-20     	; 0x3710 <__divsf3+0x1e>
    3724:	55 23       	and	r21, r21
    3726:	91 f3       	breq	.-28     	; 0x370c <__divsf3+0x1a>
    3728:	95 1b       	sub	r25, r21
    372a:	55 0b       	sbc	r21, r21
    372c:	bb 27       	eor	r27, r27
    372e:	aa 27       	eor	r26, r26
    3730:	62 17       	cp	r22, r18
    3732:	73 07       	cpc	r23, r19
    3734:	84 07       	cpc	r24, r20
    3736:	38 f0       	brcs	.+14     	; 0x3746 <__divsf3_pse+0x26>
    3738:	9f 5f       	subi	r25, 0xFF	; 255
    373a:	5f 4f       	sbci	r21, 0xFF	; 255
    373c:	22 0f       	add	r18, r18
    373e:	33 1f       	adc	r19, r19
    3740:	44 1f       	adc	r20, r20
    3742:	aa 1f       	adc	r26, r26
    3744:	a9 f3       	breq	.-22     	; 0x3730 <__divsf3_pse+0x10>
    3746:	35 d0       	rcall	.+106    	; 0x37b2 <__divsf3_pse+0x92>
    3748:	0e 2e       	mov	r0, r30
    374a:	3a f0       	brmi	.+14     	; 0x375a <__divsf3_pse+0x3a>
    374c:	e0 e8       	ldi	r30, 0x80	; 128
    374e:	32 d0       	rcall	.+100    	; 0x37b4 <__divsf3_pse+0x94>
    3750:	91 50       	subi	r25, 0x01	; 1
    3752:	50 40       	sbci	r21, 0x00	; 0
    3754:	e6 95       	lsr	r30
    3756:	00 1c       	adc	r0, r0
    3758:	ca f7       	brpl	.-14     	; 0x374c <__divsf3_pse+0x2c>
    375a:	2b d0       	rcall	.+86     	; 0x37b2 <__divsf3_pse+0x92>
    375c:	fe 2f       	mov	r31, r30
    375e:	29 d0       	rcall	.+82     	; 0x37b2 <__divsf3_pse+0x92>
    3760:	66 0f       	add	r22, r22
    3762:	77 1f       	adc	r23, r23
    3764:	88 1f       	adc	r24, r24
    3766:	bb 1f       	adc	r27, r27
    3768:	26 17       	cp	r18, r22
    376a:	37 07       	cpc	r19, r23
    376c:	48 07       	cpc	r20, r24
    376e:	ab 07       	cpc	r26, r27
    3770:	b0 e8       	ldi	r27, 0x80	; 128
    3772:	09 f0       	breq	.+2      	; 0x3776 <__divsf3_pse+0x56>
    3774:	bb 0b       	sbc	r27, r27
    3776:	80 2d       	mov	r24, r0
    3778:	bf 01       	movw	r22, r30
    377a:	ff 27       	eor	r31, r31
    377c:	93 58       	subi	r25, 0x83	; 131
    377e:	5f 4f       	sbci	r21, 0xFF	; 255
    3780:	3a f0       	brmi	.+14     	; 0x3790 <__divsf3_pse+0x70>
    3782:	9e 3f       	cpi	r25, 0xFE	; 254
    3784:	51 05       	cpc	r21, r1
    3786:	78 f0       	brcs	.+30     	; 0x37a6 <__divsf3_pse+0x86>
    3788:	0c 94 82 1c 	jmp	0x3904	; 0x3904 <__fp_inf>
    378c:	0c 94 cd 1c 	jmp	0x399a	; 0x399a <__fp_szero>
    3790:	5f 3f       	cpi	r21, 0xFF	; 255
    3792:	e4 f3       	brlt	.-8      	; 0x378c <__divsf3_pse+0x6c>
    3794:	98 3e       	cpi	r25, 0xE8	; 232
    3796:	d4 f3       	brlt	.-12     	; 0x378c <__divsf3_pse+0x6c>
    3798:	86 95       	lsr	r24
    379a:	77 95       	ror	r23
    379c:	67 95       	ror	r22
    379e:	b7 95       	ror	r27
    37a0:	f7 95       	ror	r31
    37a2:	9f 5f       	subi	r25, 0xFF	; 255
    37a4:	c9 f7       	brne	.-14     	; 0x3798 <__divsf3_pse+0x78>
    37a6:	88 0f       	add	r24, r24
    37a8:	91 1d       	adc	r25, r1
    37aa:	96 95       	lsr	r25
    37ac:	87 95       	ror	r24
    37ae:	97 f9       	bld	r25, 7
    37b0:	08 95       	ret
    37b2:	e1 e0       	ldi	r30, 0x01	; 1
    37b4:	66 0f       	add	r22, r22
    37b6:	77 1f       	adc	r23, r23
    37b8:	88 1f       	adc	r24, r24
    37ba:	bb 1f       	adc	r27, r27
    37bc:	62 17       	cp	r22, r18
    37be:	73 07       	cpc	r23, r19
    37c0:	84 07       	cpc	r24, r20
    37c2:	ba 07       	cpc	r27, r26
    37c4:	20 f0       	brcs	.+8      	; 0x37ce <__divsf3_pse+0xae>
    37c6:	62 1b       	sub	r22, r18
    37c8:	73 0b       	sbc	r23, r19
    37ca:	84 0b       	sbc	r24, r20
    37cc:	ba 0b       	sbc	r27, r26
    37ce:	ee 1f       	adc	r30, r30
    37d0:	88 f7       	brcc	.-30     	; 0x37b4 <__divsf3_pse+0x94>
    37d2:	e0 95       	com	r30
    37d4:	08 95       	ret

000037d6 <__fixsfsi>:
    37d6:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <__fixunssfsi>
    37da:	68 94       	set
    37dc:	b1 11       	cpse	r27, r1
    37de:	0c 94 cd 1c 	jmp	0x399a	; 0x399a <__fp_szero>
    37e2:	08 95       	ret

000037e4 <__fixunssfsi>:
    37e4:	0e 94 b2 1c 	call	0x3964	; 0x3964 <__fp_splitA>
    37e8:	88 f0       	brcs	.+34     	; 0x380c <__fixunssfsi+0x28>
    37ea:	9f 57       	subi	r25, 0x7F	; 127
    37ec:	98 f0       	brcs	.+38     	; 0x3814 <__fixunssfsi+0x30>
    37ee:	b9 2f       	mov	r27, r25
    37f0:	99 27       	eor	r25, r25
    37f2:	b7 51       	subi	r27, 0x17	; 23
    37f4:	b0 f0       	brcs	.+44     	; 0x3822 <__fixunssfsi+0x3e>
    37f6:	e1 f0       	breq	.+56     	; 0x3830 <__fixunssfsi+0x4c>
    37f8:	66 0f       	add	r22, r22
    37fa:	77 1f       	adc	r23, r23
    37fc:	88 1f       	adc	r24, r24
    37fe:	99 1f       	adc	r25, r25
    3800:	1a f0       	brmi	.+6      	; 0x3808 <__fixunssfsi+0x24>
    3802:	ba 95       	dec	r27
    3804:	c9 f7       	brne	.-14     	; 0x37f8 <__fixunssfsi+0x14>
    3806:	14 c0       	rjmp	.+40     	; 0x3830 <__fixunssfsi+0x4c>
    3808:	b1 30       	cpi	r27, 0x01	; 1
    380a:	91 f0       	breq	.+36     	; 0x3830 <__fixunssfsi+0x4c>
    380c:	0e 94 cc 1c 	call	0x3998	; 0x3998 <__fp_zero>
    3810:	b1 e0       	ldi	r27, 0x01	; 1
    3812:	08 95       	ret
    3814:	0c 94 cc 1c 	jmp	0x3998	; 0x3998 <__fp_zero>
    3818:	67 2f       	mov	r22, r23
    381a:	78 2f       	mov	r23, r24
    381c:	88 27       	eor	r24, r24
    381e:	b8 5f       	subi	r27, 0xF8	; 248
    3820:	39 f0       	breq	.+14     	; 0x3830 <__fixunssfsi+0x4c>
    3822:	b9 3f       	cpi	r27, 0xF9	; 249
    3824:	cc f3       	brlt	.-14     	; 0x3818 <__fixunssfsi+0x34>
    3826:	86 95       	lsr	r24
    3828:	77 95       	ror	r23
    382a:	67 95       	ror	r22
    382c:	b3 95       	inc	r27
    382e:	d9 f7       	brne	.-10     	; 0x3826 <__fixunssfsi+0x42>
    3830:	3e f4       	brtc	.+14     	; 0x3840 <__fixunssfsi+0x5c>
    3832:	90 95       	com	r25
    3834:	80 95       	com	r24
    3836:	70 95       	com	r23
    3838:	61 95       	neg	r22
    383a:	7f 4f       	sbci	r23, 0xFF	; 255
    383c:	8f 4f       	sbci	r24, 0xFF	; 255
    383e:	9f 4f       	sbci	r25, 0xFF	; 255
    3840:	08 95       	ret

00003842 <__floatunsisf>:
    3842:	e8 94       	clt
    3844:	09 c0       	rjmp	.+18     	; 0x3858 <__floatsisf+0x12>

00003846 <__floatsisf>:
    3846:	97 fb       	bst	r25, 7
    3848:	3e f4       	brtc	.+14     	; 0x3858 <__floatsisf+0x12>
    384a:	90 95       	com	r25
    384c:	80 95       	com	r24
    384e:	70 95       	com	r23
    3850:	61 95       	neg	r22
    3852:	7f 4f       	sbci	r23, 0xFF	; 255
    3854:	8f 4f       	sbci	r24, 0xFF	; 255
    3856:	9f 4f       	sbci	r25, 0xFF	; 255
    3858:	99 23       	and	r25, r25
    385a:	a9 f0       	breq	.+42     	; 0x3886 <__floatsisf+0x40>
    385c:	f9 2f       	mov	r31, r25
    385e:	96 e9       	ldi	r25, 0x96	; 150
    3860:	bb 27       	eor	r27, r27
    3862:	93 95       	inc	r25
    3864:	f6 95       	lsr	r31
    3866:	87 95       	ror	r24
    3868:	77 95       	ror	r23
    386a:	67 95       	ror	r22
    386c:	b7 95       	ror	r27
    386e:	f1 11       	cpse	r31, r1
    3870:	f8 cf       	rjmp	.-16     	; 0x3862 <__floatsisf+0x1c>
    3872:	fa f4       	brpl	.+62     	; 0x38b2 <__floatsisf+0x6c>
    3874:	bb 0f       	add	r27, r27
    3876:	11 f4       	brne	.+4      	; 0x387c <__floatsisf+0x36>
    3878:	60 ff       	sbrs	r22, 0
    387a:	1b c0       	rjmp	.+54     	; 0x38b2 <__floatsisf+0x6c>
    387c:	6f 5f       	subi	r22, 0xFF	; 255
    387e:	7f 4f       	sbci	r23, 0xFF	; 255
    3880:	8f 4f       	sbci	r24, 0xFF	; 255
    3882:	9f 4f       	sbci	r25, 0xFF	; 255
    3884:	16 c0       	rjmp	.+44     	; 0x38b2 <__floatsisf+0x6c>
    3886:	88 23       	and	r24, r24
    3888:	11 f0       	breq	.+4      	; 0x388e <__floatsisf+0x48>
    388a:	96 e9       	ldi	r25, 0x96	; 150
    388c:	11 c0       	rjmp	.+34     	; 0x38b0 <__floatsisf+0x6a>
    388e:	77 23       	and	r23, r23
    3890:	21 f0       	breq	.+8      	; 0x389a <__floatsisf+0x54>
    3892:	9e e8       	ldi	r25, 0x8E	; 142
    3894:	87 2f       	mov	r24, r23
    3896:	76 2f       	mov	r23, r22
    3898:	05 c0       	rjmp	.+10     	; 0x38a4 <__floatsisf+0x5e>
    389a:	66 23       	and	r22, r22
    389c:	71 f0       	breq	.+28     	; 0x38ba <__floatsisf+0x74>
    389e:	96 e8       	ldi	r25, 0x86	; 134
    38a0:	86 2f       	mov	r24, r22
    38a2:	70 e0       	ldi	r23, 0x00	; 0
    38a4:	60 e0       	ldi	r22, 0x00	; 0
    38a6:	2a f0       	brmi	.+10     	; 0x38b2 <__floatsisf+0x6c>
    38a8:	9a 95       	dec	r25
    38aa:	66 0f       	add	r22, r22
    38ac:	77 1f       	adc	r23, r23
    38ae:	88 1f       	adc	r24, r24
    38b0:	da f7       	brpl	.-10     	; 0x38a8 <__floatsisf+0x62>
    38b2:	88 0f       	add	r24, r24
    38b4:	96 95       	lsr	r25
    38b6:	87 95       	ror	r24
    38b8:	97 f9       	bld	r25, 7
    38ba:	08 95       	ret

000038bc <__fp_cmp>:
    38bc:	99 0f       	add	r25, r25
    38be:	00 08       	sbc	r0, r0
    38c0:	55 0f       	add	r21, r21
    38c2:	aa 0b       	sbc	r26, r26
    38c4:	e0 e8       	ldi	r30, 0x80	; 128
    38c6:	fe ef       	ldi	r31, 0xFE	; 254
    38c8:	16 16       	cp	r1, r22
    38ca:	17 06       	cpc	r1, r23
    38cc:	e8 07       	cpc	r30, r24
    38ce:	f9 07       	cpc	r31, r25
    38d0:	c0 f0       	brcs	.+48     	; 0x3902 <__fp_cmp+0x46>
    38d2:	12 16       	cp	r1, r18
    38d4:	13 06       	cpc	r1, r19
    38d6:	e4 07       	cpc	r30, r20
    38d8:	f5 07       	cpc	r31, r21
    38da:	98 f0       	brcs	.+38     	; 0x3902 <__fp_cmp+0x46>
    38dc:	62 1b       	sub	r22, r18
    38de:	73 0b       	sbc	r23, r19
    38e0:	84 0b       	sbc	r24, r20
    38e2:	95 0b       	sbc	r25, r21
    38e4:	39 f4       	brne	.+14     	; 0x38f4 <__fp_cmp+0x38>
    38e6:	0a 26       	eor	r0, r26
    38e8:	61 f0       	breq	.+24     	; 0x3902 <__fp_cmp+0x46>
    38ea:	23 2b       	or	r18, r19
    38ec:	24 2b       	or	r18, r20
    38ee:	25 2b       	or	r18, r21
    38f0:	21 f4       	brne	.+8      	; 0x38fa <__fp_cmp+0x3e>
    38f2:	08 95       	ret
    38f4:	0a 26       	eor	r0, r26
    38f6:	09 f4       	brne	.+2      	; 0x38fa <__fp_cmp+0x3e>
    38f8:	a1 40       	sbci	r26, 0x01	; 1
    38fa:	a6 95       	lsr	r26
    38fc:	8f ef       	ldi	r24, 0xFF	; 255
    38fe:	81 1d       	adc	r24, r1
    3900:	81 1d       	adc	r24, r1
    3902:	08 95       	ret

00003904 <__fp_inf>:
    3904:	97 f9       	bld	r25, 7
    3906:	9f 67       	ori	r25, 0x7F	; 127
    3908:	80 e8       	ldi	r24, 0x80	; 128
    390a:	70 e0       	ldi	r23, 0x00	; 0
    390c:	60 e0       	ldi	r22, 0x00	; 0
    390e:	08 95       	ret

00003910 <__fp_nan>:
    3910:	9f ef       	ldi	r25, 0xFF	; 255
    3912:	80 ec       	ldi	r24, 0xC0	; 192
    3914:	08 95       	ret

00003916 <__fp_pscA>:
    3916:	00 24       	eor	r0, r0
    3918:	0a 94       	dec	r0
    391a:	16 16       	cp	r1, r22
    391c:	17 06       	cpc	r1, r23
    391e:	18 06       	cpc	r1, r24
    3920:	09 06       	cpc	r0, r25
    3922:	08 95       	ret

00003924 <__fp_pscB>:
    3924:	00 24       	eor	r0, r0
    3926:	0a 94       	dec	r0
    3928:	12 16       	cp	r1, r18
    392a:	13 06       	cpc	r1, r19
    392c:	14 06       	cpc	r1, r20
    392e:	05 06       	cpc	r0, r21
    3930:	08 95       	ret

00003932 <__fp_round>:
    3932:	09 2e       	mov	r0, r25
    3934:	03 94       	inc	r0
    3936:	00 0c       	add	r0, r0
    3938:	11 f4       	brne	.+4      	; 0x393e <__fp_round+0xc>
    393a:	88 23       	and	r24, r24
    393c:	52 f0       	brmi	.+20     	; 0x3952 <__fp_round+0x20>
    393e:	bb 0f       	add	r27, r27
    3940:	40 f4       	brcc	.+16     	; 0x3952 <__fp_round+0x20>
    3942:	bf 2b       	or	r27, r31
    3944:	11 f4       	brne	.+4      	; 0x394a <__fp_round+0x18>
    3946:	60 ff       	sbrs	r22, 0
    3948:	04 c0       	rjmp	.+8      	; 0x3952 <__fp_round+0x20>
    394a:	6f 5f       	subi	r22, 0xFF	; 255
    394c:	7f 4f       	sbci	r23, 0xFF	; 255
    394e:	8f 4f       	sbci	r24, 0xFF	; 255
    3950:	9f 4f       	sbci	r25, 0xFF	; 255
    3952:	08 95       	ret

00003954 <__fp_split3>:
    3954:	57 fd       	sbrc	r21, 7
    3956:	90 58       	subi	r25, 0x80	; 128
    3958:	44 0f       	add	r20, r20
    395a:	55 1f       	adc	r21, r21
    395c:	59 f0       	breq	.+22     	; 0x3974 <__fp_splitA+0x10>
    395e:	5f 3f       	cpi	r21, 0xFF	; 255
    3960:	71 f0       	breq	.+28     	; 0x397e <__fp_splitA+0x1a>
    3962:	47 95       	ror	r20

00003964 <__fp_splitA>:
    3964:	88 0f       	add	r24, r24
    3966:	97 fb       	bst	r25, 7
    3968:	99 1f       	adc	r25, r25
    396a:	61 f0       	breq	.+24     	; 0x3984 <__fp_splitA+0x20>
    396c:	9f 3f       	cpi	r25, 0xFF	; 255
    396e:	79 f0       	breq	.+30     	; 0x398e <__fp_splitA+0x2a>
    3970:	87 95       	ror	r24
    3972:	08 95       	ret
    3974:	12 16       	cp	r1, r18
    3976:	13 06       	cpc	r1, r19
    3978:	14 06       	cpc	r1, r20
    397a:	55 1f       	adc	r21, r21
    397c:	f2 cf       	rjmp	.-28     	; 0x3962 <__fp_split3+0xe>
    397e:	46 95       	lsr	r20
    3980:	f1 df       	rcall	.-30     	; 0x3964 <__fp_splitA>
    3982:	08 c0       	rjmp	.+16     	; 0x3994 <__fp_splitA+0x30>
    3984:	16 16       	cp	r1, r22
    3986:	17 06       	cpc	r1, r23
    3988:	18 06       	cpc	r1, r24
    398a:	99 1f       	adc	r25, r25
    398c:	f1 cf       	rjmp	.-30     	; 0x3970 <__fp_splitA+0xc>
    398e:	86 95       	lsr	r24
    3990:	71 05       	cpc	r23, r1
    3992:	61 05       	cpc	r22, r1
    3994:	08 94       	sec
    3996:	08 95       	ret

00003998 <__fp_zero>:
    3998:	e8 94       	clt

0000399a <__fp_szero>:
    399a:	bb 27       	eor	r27, r27
    399c:	66 27       	eor	r22, r22
    399e:	77 27       	eor	r23, r23
    39a0:	cb 01       	movw	r24, r22
    39a2:	97 f9       	bld	r25, 7
    39a4:	08 95       	ret

000039a6 <__gesf2>:
    39a6:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <__fp_cmp>
    39aa:	08 f4       	brcc	.+2      	; 0x39ae <__gesf2+0x8>
    39ac:	8f ef       	ldi	r24, 0xFF	; 255
    39ae:	08 95       	ret

000039b0 <__mulsf3>:
    39b0:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <__mulsf3x>
    39b4:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <__fp_round>
    39b8:	0e 94 8b 1c 	call	0x3916	; 0x3916 <__fp_pscA>
    39bc:	38 f0       	brcs	.+14     	; 0x39cc <__mulsf3+0x1c>
    39be:	0e 94 92 1c 	call	0x3924	; 0x3924 <__fp_pscB>
    39c2:	20 f0       	brcs	.+8      	; 0x39cc <__mulsf3+0x1c>
    39c4:	95 23       	and	r25, r21
    39c6:	11 f0       	breq	.+4      	; 0x39cc <__mulsf3+0x1c>
    39c8:	0c 94 82 1c 	jmp	0x3904	; 0x3904 <__fp_inf>
    39cc:	0c 94 88 1c 	jmp	0x3910	; 0x3910 <__fp_nan>
    39d0:	11 24       	eor	r1, r1
    39d2:	0c 94 cd 1c 	jmp	0x399a	; 0x399a <__fp_szero>

000039d6 <__mulsf3x>:
    39d6:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__fp_split3>
    39da:	70 f3       	brcs	.-36     	; 0x39b8 <__mulsf3+0x8>

000039dc <__mulsf3_pse>:
    39dc:	95 9f       	mul	r25, r21
    39de:	c1 f3       	breq	.-16     	; 0x39d0 <__mulsf3+0x20>
    39e0:	95 0f       	add	r25, r21
    39e2:	50 e0       	ldi	r21, 0x00	; 0
    39e4:	55 1f       	adc	r21, r21
    39e6:	62 9f       	mul	r22, r18
    39e8:	f0 01       	movw	r30, r0
    39ea:	72 9f       	mul	r23, r18
    39ec:	bb 27       	eor	r27, r27
    39ee:	f0 0d       	add	r31, r0
    39f0:	b1 1d       	adc	r27, r1
    39f2:	63 9f       	mul	r22, r19
    39f4:	aa 27       	eor	r26, r26
    39f6:	f0 0d       	add	r31, r0
    39f8:	b1 1d       	adc	r27, r1
    39fa:	aa 1f       	adc	r26, r26
    39fc:	64 9f       	mul	r22, r20
    39fe:	66 27       	eor	r22, r22
    3a00:	b0 0d       	add	r27, r0
    3a02:	a1 1d       	adc	r26, r1
    3a04:	66 1f       	adc	r22, r22
    3a06:	82 9f       	mul	r24, r18
    3a08:	22 27       	eor	r18, r18
    3a0a:	b0 0d       	add	r27, r0
    3a0c:	a1 1d       	adc	r26, r1
    3a0e:	62 1f       	adc	r22, r18
    3a10:	73 9f       	mul	r23, r19
    3a12:	b0 0d       	add	r27, r0
    3a14:	a1 1d       	adc	r26, r1
    3a16:	62 1f       	adc	r22, r18
    3a18:	83 9f       	mul	r24, r19
    3a1a:	a0 0d       	add	r26, r0
    3a1c:	61 1d       	adc	r22, r1
    3a1e:	22 1f       	adc	r18, r18
    3a20:	74 9f       	mul	r23, r20
    3a22:	33 27       	eor	r19, r19
    3a24:	a0 0d       	add	r26, r0
    3a26:	61 1d       	adc	r22, r1
    3a28:	23 1f       	adc	r18, r19
    3a2a:	84 9f       	mul	r24, r20
    3a2c:	60 0d       	add	r22, r0
    3a2e:	21 1d       	adc	r18, r1
    3a30:	82 2f       	mov	r24, r18
    3a32:	76 2f       	mov	r23, r22
    3a34:	6a 2f       	mov	r22, r26
    3a36:	11 24       	eor	r1, r1
    3a38:	9f 57       	subi	r25, 0x7F	; 127
    3a3a:	50 40       	sbci	r21, 0x00	; 0
    3a3c:	9a f0       	brmi	.+38     	; 0x3a64 <__mulsf3_pse+0x88>
    3a3e:	f1 f0       	breq	.+60     	; 0x3a7c <__mulsf3_pse+0xa0>
    3a40:	88 23       	and	r24, r24
    3a42:	4a f0       	brmi	.+18     	; 0x3a56 <__mulsf3_pse+0x7a>
    3a44:	ee 0f       	add	r30, r30
    3a46:	ff 1f       	adc	r31, r31
    3a48:	bb 1f       	adc	r27, r27
    3a4a:	66 1f       	adc	r22, r22
    3a4c:	77 1f       	adc	r23, r23
    3a4e:	88 1f       	adc	r24, r24
    3a50:	91 50       	subi	r25, 0x01	; 1
    3a52:	50 40       	sbci	r21, 0x00	; 0
    3a54:	a9 f7       	brne	.-22     	; 0x3a40 <__mulsf3_pse+0x64>
    3a56:	9e 3f       	cpi	r25, 0xFE	; 254
    3a58:	51 05       	cpc	r21, r1
    3a5a:	80 f0       	brcs	.+32     	; 0x3a7c <__mulsf3_pse+0xa0>
    3a5c:	0c 94 82 1c 	jmp	0x3904	; 0x3904 <__fp_inf>
    3a60:	0c 94 cd 1c 	jmp	0x399a	; 0x399a <__fp_szero>
    3a64:	5f 3f       	cpi	r21, 0xFF	; 255
    3a66:	e4 f3       	brlt	.-8      	; 0x3a60 <__mulsf3_pse+0x84>
    3a68:	98 3e       	cpi	r25, 0xE8	; 232
    3a6a:	d4 f3       	brlt	.-12     	; 0x3a60 <__mulsf3_pse+0x84>
    3a6c:	86 95       	lsr	r24
    3a6e:	77 95       	ror	r23
    3a70:	67 95       	ror	r22
    3a72:	b7 95       	ror	r27
    3a74:	f7 95       	ror	r31
    3a76:	e7 95       	ror	r30
    3a78:	9f 5f       	subi	r25, 0xFF	; 255
    3a7a:	c1 f7       	brne	.-16     	; 0x3a6c <__mulsf3_pse+0x90>
    3a7c:	fe 2b       	or	r31, r30
    3a7e:	88 0f       	add	r24, r24
    3a80:	91 1d       	adc	r25, r1
    3a82:	96 95       	lsr	r25
    3a84:	87 95       	ror	r24
    3a86:	97 f9       	bld	r25, 7
    3a88:	08 95       	ret

00003a8a <__cxa_pure_virtual>:
    3a8a:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <abort>

00003a8e <_ZN7Serial_5writeEh>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		ret = breakValue;
		breakValue = -1;
	}
	return ret;
}
    3a8e:	cf 93       	push	r28
    3a90:	df 93       	push	r29
    3a92:	1f 92       	push	r1
    3a94:	cd b7       	in	r28, 0x3d	; 61
    3a96:	de b7       	in	r29, 0x3e	; 62
    3a98:	69 83       	std	Y+1, r22	; 0x01
    3a9a:	dc 01       	movw	r26, r24
    3a9c:	ed 91       	ld	r30, X+
    3a9e:	fc 91       	ld	r31, X
    3aa0:	02 80       	ldd	r0, Z+2	; 0x02
    3aa2:	f3 81       	ldd	r31, Z+3	; 0x03
    3aa4:	e0 2d       	mov	r30, r0
    3aa6:	41 e0       	ldi	r20, 0x01	; 1
    3aa8:	50 e0       	ldi	r21, 0x00	; 0
    3aaa:	be 01       	movw	r22, r28
    3aac:	6f 5f       	subi	r22, 0xFF	; 255
    3aae:	7f 4f       	sbci	r23, 0xFF	; 255
    3ab0:	09 95       	icall
    3ab2:	0f 90       	pop	r0
    3ab4:	df 91       	pop	r29
    3ab6:	cf 91       	pop	r28
    3ab8:	08 95       	ret

00003aba <_ZN7Serial_4peekEv>:
    3aba:	cf 93       	push	r28
    3abc:	df 93       	push	r29
    3abe:	ec 01       	movw	r28, r24
    3ac0:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ac2:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ac4:	97 ff       	sbrs	r25, 7
    3ac6:	05 c0       	rjmp	.+10     	; 0x3ad2 <_ZN7Serial_4peekEv+0x18>
    3ac8:	82 e0       	ldi	r24, 0x02	; 2
    3aca:	0e 94 2d 23 	call	0x465a	; 0x465a <_Z8USB_Recvh>
    3ace:	9d 87       	std	Y+13, r25	; 0x0d
    3ad0:	8c 87       	std	Y+12, r24	; 0x0c
    3ad2:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ad4:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ad6:	df 91       	pop	r29
    3ad8:	cf 91       	pop	r28
    3ada:	08 95       	ret

00003adc <_ZN7Serial_17availableForWriteEv>:
    3adc:	83 e0       	ldi	r24, 0x03	; 3
    3ade:	0e 94 44 23 	call	0x4688	; 0x4688 <_Z13USB_SendSpaceh>
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	08 95       	ret

00003ae6 <_ZN7Serial_5flushEv>:
    3ae6:	83 e0       	ldi	r24, 0x03	; 3
    3ae8:	0c 94 c2 25 	jmp	0x4b84	; 0x4b84 <_Z9USB_Flushh>

00003aec <_ZN7Serial_9availableEv>:
    3aec:	fc 01       	movw	r30, r24
    3aee:	84 85       	ldd	r24, Z+12	; 0x0c
    3af0:	95 85       	ldd	r25, Z+13	; 0x0d
    3af2:	97 fd       	sbrc	r25, 7
    3af4:	06 c0       	rjmp	.+12     	; 0x3b02 <_ZN7Serial_9availableEv+0x16>
    3af6:	82 e0       	ldi	r24, 0x02	; 2
    3af8:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <_Z13USB_Availableh>
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	01 96       	adiw	r24, 0x01	; 1
    3b00:	08 95       	ret
    3b02:	82 e0       	ldi	r24, 0x02	; 2
    3b04:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <_Z13USB_Availableh>
    3b08:	90 e0       	ldi	r25, 0x00	; 0
    3b0a:	08 95       	ret

00003b0c <_ZN7Serial_4readEv>:
    3b0c:	fc 01       	movw	r30, r24
    3b0e:	84 85       	ldd	r24, Z+12	; 0x0c
    3b10:	95 85       	ldd	r25, Z+13	; 0x0d
    3b12:	97 fd       	sbrc	r25, 7
    3b14:	05 c0       	rjmp	.+10     	; 0x3b20 <_ZN7Serial_4readEv+0x14>
    3b16:	2f ef       	ldi	r18, 0xFF	; 255
    3b18:	3f ef       	ldi	r19, 0xFF	; 255
    3b1a:	35 87       	std	Z+13, r19	; 0x0d
    3b1c:	24 87       	std	Z+12, r18	; 0x0c
    3b1e:	08 95       	ret
    3b20:	82 e0       	ldi	r24, 0x02	; 2
    3b22:	0c 94 2d 23 	jmp	0x465a	; 0x465a <_Z8USB_Recvh>

00003b26 <_ZN7Serial_5writeEPKhj>:
    3b26:	cf 93       	push	r28
    3b28:	df 93       	push	r29
    3b2a:	ec 01       	movw	r28, r24
    3b2c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <_ZL12_usbLineInfo+0x7>
    3b30:	88 23       	and	r24, r24
    3b32:	31 f0       	breq	.+12     	; 0x3b40 <_ZN7Serial_5writeEPKhj+0x1a>
    3b34:	83 e0       	ldi	r24, 0x03	; 3
    3b36:	0e 94 5e 23 	call	0x46bc	; 0x46bc <_Z8USB_SendhPKvi>
    3b3a:	18 16       	cp	r1, r24
    3b3c:	19 06       	cpc	r1, r25
    3b3e:	34 f0       	brlt	.+12     	; 0x3b4c <_ZN7Serial_5writeEPKhj+0x26>
    3b40:	81 e0       	ldi	r24, 0x01	; 1
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	9b 83       	std	Y+3, r25	; 0x03
    3b46:	8a 83       	std	Y+2, r24	; 0x02
    3b48:	80 e0       	ldi	r24, 0x00	; 0
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	df 91       	pop	r29
    3b4e:	cf 91       	pop	r28
    3b50:	08 95       	ret

00003b52 <_Z16isLUFAbootloaderv>:
    3b52:	ee ef       	ldi	r30, 0xFE	; 254
    3b54:	ff e7       	ldi	r31, 0x7F	; 127
    3b56:	25 91       	lpm	r18, Z+
    3b58:	34 91       	lpm	r19, Z
    3b5a:	81 e0       	ldi	r24, 0x01	; 1
    3b5c:	2b 3f       	cpi	r18, 0xFB	; 251
    3b5e:	3c 4d       	sbci	r19, 0xDC	; 220
    3b60:	09 f0       	breq	.+2      	; 0x3b64 <_Z16isLUFAbootloaderv+0x12>
    3b62:	80 e0       	ldi	r24, 0x00	; 0
    3b64:	08 95       	ret

00003b66 <_Z16CDC_GetInterfacePh>:
    3b66:	fc 01       	movw	r30, r24
    3b68:	90 81       	ld	r25, Z
    3b6a:	9e 5f       	subi	r25, 0xFE	; 254
    3b6c:	90 83       	st	Z, r25
    3b6e:	42 e4       	ldi	r20, 0x42	; 66
    3b70:	50 e0       	ldi	r21, 0x00	; 0
    3b72:	68 ee       	ldi	r22, 0xE8	; 232
    3b74:	70 e0       	ldi	r23, 0x00	; 0
    3b76:	80 e8       	ldi	r24, 0x80	; 128
    3b78:	0c 94 0e 24 	jmp	0x481c	; 0x481c <_Z15USB_SendControlhPKvi>

00003b7c <_Z9CDC_SetupR8USBSetup>:
    3b7c:	fc 01       	movw	r30, r24
    3b7e:	81 81       	ldd	r24, Z+1	; 0x01
    3b80:	90 81       	ld	r25, Z
    3b82:	91 3a       	cpi	r25, 0xA1	; 161
    3b84:	59 f4       	brne	.+22     	; 0x3b9c <_Z9CDC_SetupR8USBSetup+0x20>
    3b86:	81 32       	cpi	r24, 0x21	; 33
    3b88:	09 f0       	breq	.+2      	; 0x3b8c <_Z9CDC_SetupR8USBSetup+0x10>
    3b8a:	65 c0       	rjmp	.+202    	; 0x3c56 <_Z9CDC_SetupR8USBSetup+0xda>
    3b8c:	47 e0       	ldi	r20, 0x07	; 7
    3b8e:	50 e0       	ldi	r21, 0x00	; 0
    3b90:	6c e1       	ldi	r22, 0x1C	; 28
    3b92:	71 e0       	ldi	r23, 0x01	; 1
    3b94:	80 e0       	ldi	r24, 0x00	; 0
    3b96:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z15USB_SendControlhPKvi>
    3b9a:	5b c0       	rjmp	.+182    	; 0x3c52 <_Z9CDC_SetupR8USBSetup+0xd6>
    3b9c:	91 32       	cpi	r25, 0x21	; 33
    3b9e:	09 f0       	breq	.+2      	; 0x3ba2 <_Z9CDC_SetupR8USBSetup+0x26>
    3ba0:	5a c0       	rjmp	.+180    	; 0x3c56 <_Z9CDC_SetupR8USBSetup+0xda>
    3ba2:	83 32       	cpi	r24, 0x23	; 35
    3ba4:	69 f4       	brne	.+26     	; 0x3bc0 <_Z9CDC_SetupR8USBSetup+0x44>
    3ba6:	82 81       	ldd	r24, Z+2	; 0x02
    3ba8:	93 81       	ldd	r25, Z+3	; 0x03
    3baa:	a0 e0       	ldi	r26, 0x00	; 0
    3bac:	b0 e0       	ldi	r27, 0x00	; 0
    3bae:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_ZL10breakValue>
    3bb2:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <_ZL10breakValue+0x1>
    3bb6:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <_ZL10breakValue+0x2>
    3bba:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <_ZL10breakValue+0x3>
    3bbe:	49 c0       	rjmp	.+146    	; 0x3c52 <_Z9CDC_SetupR8USBSetup+0xd6>
    3bc0:	80 32       	cpi	r24, 0x20	; 32
    3bc2:	39 f4       	brne	.+14     	; 0x3bd2 <_Z9CDC_SetupR8USBSetup+0x56>
    3bc4:	67 e0       	ldi	r22, 0x07	; 7
    3bc6:	70 e0       	ldi	r23, 0x00	; 0
    3bc8:	8c e1       	ldi	r24, 0x1C	; 28
    3bca:	91 e0       	ldi	r25, 0x01	; 1
    3bcc:	0e 94 35 24 	call	0x486a	; 0x486a <_Z15USB_RecvControlPvi>
    3bd0:	40 c0       	rjmp	.+128    	; 0x3c52 <_Z9CDC_SetupR8USBSetup+0xd6>
    3bd2:	82 32       	cpi	r24, 0x22	; 34
    3bd4:	09 f0       	breq	.+2      	; 0x3bd8 <_Z9CDC_SetupR8USBSetup+0x5c>
    3bd6:	3d c0       	rjmp	.+122    	; 0x3c52 <_Z9CDC_SetupR8USBSetup+0xd6>
    3bd8:	82 81       	ldd	r24, Z+2	; 0x02
    3bda:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <_ZL12_usbLineInfo+0x7>
    3bde:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <_Z16isLUFAbootloaderv>
    3be2:	88 23       	and	r24, r24
    3be4:	19 f0       	breq	.+6      	; 0x3bec <_Z9CDC_SetupR8USBSetup+0x70>
    3be6:	ee ef       	ldi	r30, 0xFE	; 254
    3be8:	fa e0       	ldi	r31, 0x0A	; 10
    3bea:	02 c0       	rjmp	.+4      	; 0x3bf0 <_Z9CDC_SetupR8USBSetup+0x74>
    3bec:	e0 e0       	ldi	r30, 0x00	; 0
    3bee:	f8 e0       	ldi	r31, 0x08	; 8
    3bf0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <_ZL12_usbLineInfo>
    3bf4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <_ZL12_usbLineInfo+0x1>
    3bf8:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <_ZL12_usbLineInfo+0x2>
    3bfc:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <_ZL12_usbLineInfo+0x3>
    3c00:	80 3b       	cpi	r24, 0xB0	; 176
    3c02:	94 40       	sbci	r25, 0x04	; 4
    3c04:	a1 05       	cpc	r26, r1
    3c06:	b1 05       	cpc	r27, r1
    3c08:	41 f5       	brne	.+80     	; 0x3c5a <_Z9CDC_SetupR8USBSetup+0xde>
    3c0a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <_ZL12_usbLineInfo+0x7>
    3c0e:	80 fd       	sbrc	r24, 0
    3c10:	24 c0       	rjmp	.+72     	; 0x3c5a <_Z9CDC_SetupR8USBSetup+0xde>
    3c12:	ee 3f       	cpi	r30, 0xFE	; 254
    3c14:	8a e0       	ldi	r24, 0x0A	; 10
    3c16:	f8 07       	cpc	r31, r24
    3c18:	51 f0       	breq	.+20     	; 0x3c2e <_Z9CDC_SetupR8USBSetup+0xb2>
    3c1a:	80 81       	ld	r24, Z
    3c1c:	91 81       	ldd	r25, Z+1	; 0x01
    3c1e:	87 37       	cpi	r24, 0x77	; 119
    3c20:	27 e7       	ldi	r18, 0x77	; 119
    3c22:	92 07       	cpc	r25, r18
    3c24:	21 f0       	breq	.+8      	; 0x3c2e <_Z9CDC_SetupR8USBSetup+0xb2>
    3c26:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x3ea>
    3c2a:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x3e9>
    3c2e:	87 e7       	ldi	r24, 0x77	; 119
    3c30:	97 e7       	ldi	r25, 0x77	; 119
    3c32:	91 83       	std	Z+1, r25	; 0x01
    3c34:	80 83       	st	Z, r24
    3c36:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3c3a:	80 93 54 06 	sts	0x0654, r24	; 0x800654 <_ZL11wdtcsr_save>
    3c3e:	9b e0       	ldi	r25, 0x0B	; 11
    3c40:	88 e1       	ldi	r24, 0x18	; 24
    3c42:	0f b6       	in	r0, 0x3f	; 63
    3c44:	f8 94       	cli
    3c46:	a8 95       	wdr
    3c48:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3c4c:	0f be       	out	0x3f, r0	; 63
    3c4e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3c52:	81 e0       	ldi	r24, 0x01	; 1
    3c54:	08 95       	ret
    3c56:	80 e0       	ldi	r24, 0x00	; 0
    3c58:	08 95       	ret
    3c5a:	80 81       	ld	r24, Z
    3c5c:	91 81       	ldd	r25, Z+1	; 0x01
    3c5e:	87 37       	cpi	r24, 0x77	; 119
    3c60:	97 47       	sbci	r25, 0x77	; 119
    3c62:	b9 f7       	brne	.-18     	; 0x3c52 <_Z9CDC_SetupR8USBSetup+0xd6>
    3c64:	a8 95       	wdr
    3c66:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3c6a:	88 61       	ori	r24, 0x18	; 24
    3c6c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3c70:	80 91 54 06 	lds	r24, 0x0654	; 0x800654 <_ZL11wdtcsr_save>
    3c74:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3c78:	ee 3f       	cpi	r30, 0xFE	; 254
    3c7a:	8a e0       	ldi	r24, 0x0A	; 10
    3c7c:	f8 07       	cpc	r31, r24
    3c7e:	39 f0       	breq	.+14     	; 0x3c8e <_Z9CDC_SetupR8USBSetup+0x112>
    3c80:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x3e9>
    3c84:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x3ea>
    3c88:	91 83       	std	Z+1, r25	; 0x01
    3c8a:	80 83       	st	Z, r24
    3c8c:	e2 cf       	rjmp	.-60     	; 0x3c52 <_Z9CDC_SetupR8USBSetup+0xd6>
    3c8e:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x3ea>
    3c92:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x3e9>
    3c96:	dd cf       	rjmp	.-70     	; 0x3c52 <_Z9CDC_SetupR8USBSetup+0xd6>

00003c98 <_ZN7Serial_5beginEm>:
    3c98:	2f ef       	ldi	r18, 0xFF	; 255
    3c9a:	3f ef       	ldi	r19, 0xFF	; 255
    3c9c:	fc 01       	movw	r30, r24
    3c9e:	35 87       	std	Z+13, r19	; 0x0d
    3ca0:	24 87       	std	Z+12, r18	; 0x0c
    3ca2:	08 95       	ret

00003ca4 <_GLOBAL__sub_I__cdcInterface>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3ca4:	e4 e0       	ldi	r30, 0x04	; 4
    3ca6:	f6 e0       	ldi	r31, 0x06	; 6
    3ca8:	13 82       	std	Z+3, r1	; 0x03
    3caa:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    3cac:	88 ee       	ldi	r24, 0xE8	; 232
    3cae:	93 e0       	ldi	r25, 0x03	; 3
    3cb0:	a0 e0       	ldi	r26, 0x00	; 0
    3cb2:	b0 e0       	ldi	r27, 0x00	; 0
    3cb4:	84 83       	std	Z+4, r24	; 0x04
    3cb6:	95 83       	std	Z+5, r25	; 0x05
    3cb8:	a6 83       	std	Z+6, r26	; 0x06
    3cba:	b7 83       	std	Z+7, r27	; 0x07
class Serial_ : public Stream
{
private:
	int peek_buffer;
public:
	Serial_() { peek_buffer = -1; };
    3cbc:	88 e1       	ldi	r24, 0x18	; 24
    3cbe:	93 e0       	ldi	r25, 0x03	; 3
    3cc0:	91 83       	std	Z+1, r25	; 0x01
    3cc2:	80 83       	st	Z, r24
    3cc4:	8f ef       	ldi	r24, 0xFF	; 255
    3cc6:	9f ef       	ldi	r25, 0xFF	; 255
    3cc8:	95 87       	std	Z+13, r25	; 0x0d
    3cca:	84 87       	std	Z+12, r24	; 0x0c
    3ccc:	08 95       	ret

00003cce <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    3cce:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    3cd0:	91 8d       	ldd	r25, Z+25	; 0x19
    3cd2:	22 8d       	ldd	r18, Z+26	; 0x1a
    3cd4:	89 2f       	mov	r24, r25
    3cd6:	90 e0       	ldi	r25, 0x00	; 0
    3cd8:	80 5c       	subi	r24, 0xC0	; 192
    3cda:	9f 4f       	sbci	r25, 0xFF	; 255
    3cdc:	82 1b       	sub	r24, r18
    3cde:	91 09       	sbc	r25, r1
}
    3ce0:	8f 73       	andi	r24, 0x3F	; 63
    3ce2:	99 27       	eor	r25, r25
    3ce4:	08 95       	ret

00003ce6 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3ce6:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3ce8:	91 8d       	ldd	r25, Z+25	; 0x19
    3cea:	82 8d       	ldd	r24, Z+26	; 0x1a
    3cec:	98 17       	cp	r25, r24
    3cee:	31 f0       	breq	.+12     	; 0x3cfc <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    3cf0:	82 8d       	ldd	r24, Z+26	; 0x1a
    3cf2:	e8 0f       	add	r30, r24
    3cf4:	f1 1d       	adc	r31, r1
    3cf6:	85 8d       	ldd	r24, Z+29	; 0x1d
    3cf8:	90 e0       	ldi	r25, 0x00	; 0
    3cfa:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3cfc:	8f ef       	ldi	r24, 0xFF	; 255
    3cfe:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3d00:	08 95       	ret

00003d02 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    3d02:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3d04:	91 8d       	ldd	r25, Z+25	; 0x19
    3d06:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d08:	98 17       	cp	r25, r24
    3d0a:	61 f0       	breq	.+24     	; 0x3d24 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3d0c:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d0e:	df 01       	movw	r26, r30
    3d10:	a8 0f       	add	r26, r24
    3d12:	b1 1d       	adc	r27, r1
    3d14:	5d 96       	adiw	r26, 0x1d	; 29
    3d16:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3d18:	92 8d       	ldd	r25, Z+26	; 0x1a
    3d1a:	9f 5f       	subi	r25, 0xFF	; 255
    3d1c:	9f 73       	andi	r25, 0x3F	; 63
    3d1e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    3d20:	90 e0       	ldi	r25, 0x00	; 0
    3d22:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3d24:	8f ef       	ldi	r24, 0xFF	; 255
    3d26:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3d28:	08 95       	ret

00003d2a <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    3d2a:	fc 01       	movw	r30, r24
    3d2c:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    3d2e:	44 8d       	ldd	r20, Z+28	; 0x1c
    3d30:	25 2f       	mov	r18, r21
    3d32:	30 e0       	ldi	r19, 0x00	; 0
    3d34:	84 2f       	mov	r24, r20
    3d36:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    3d38:	82 1b       	sub	r24, r18
    3d3a:	93 0b       	sbc	r25, r19
    3d3c:	54 17       	cp	r21, r20
    3d3e:	10 f0       	brcs	.+4      	; 0x3d44 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    3d40:	cf 96       	adiw	r24, 0x3f	; 63
    3d42:	08 95       	ret
  return tail - head - 1;
    3d44:	01 97       	sbiw	r24, 0x01	; 1
}
    3d46:	08 95       	ret

00003d48 <_Z14serialEventRunv>:
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    3d48:	8e ef       	ldi	r24, 0xFE	; 254
    3d4a:	9f e1       	ldi	r25, 0x1F	; 31
    3d4c:	89 2b       	or	r24, r25
    3d4e:	49 f0       	breq	.+18     	; 0x3d62 <_Z14serialEventRunv+0x1a>
    3d50:	80 e0       	ldi	r24, 0x00	; 0
    3d52:	90 e0       	ldi	r25, 0x00	; 0
    3d54:	89 2b       	or	r24, r25
    3d56:	29 f0       	breq	.+10     	; 0x3d62 <_Z14serialEventRunv+0x1a>
    3d58:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <_Z17Serial1_availablev>
    3d5c:	81 11       	cpse	r24, r1
    3d5e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3d62:	08 95       	ret

00003d64 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3d64:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3d66:	84 8d       	ldd	r24, Z+28	; 0x1c
    3d68:	df 01       	movw	r26, r30
    3d6a:	a8 0f       	add	r26, r24
    3d6c:	b1 1d       	adc	r27, r1
    3d6e:	a3 5a       	subi	r26, 0xA3	; 163
    3d70:	bf 4f       	sbci	r27, 0xFF	; 255
    3d72:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3d74:	84 8d       	ldd	r24, Z+28	; 0x1c
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	01 96       	adiw	r24, 0x01	; 1
    3d7a:	8f 73       	andi	r24, 0x3F	; 63
    3d7c:	99 27       	eor	r25, r25
    3d7e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    3d80:	a6 89       	ldd	r26, Z+22	; 0x16
    3d82:	b7 89       	ldd	r27, Z+23	; 0x17
    3d84:	2c 93       	st	X, r18
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
    3d86:	a0 89       	ldd	r26, Z+16	; 0x10
    3d88:	b1 89       	ldd	r27, Z+17	; 0x11
    3d8a:	8c 91       	ld	r24, X
    3d8c:	82 74       	andi	r24, 0x42	; 66
    3d8e:	8c 93       	st	X, r24
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    3d90:	93 8d       	ldd	r25, Z+27	; 0x1b
    3d92:	84 8d       	ldd	r24, Z+28	; 0x1c
    3d94:	98 13       	cpse	r25, r24
    3d96:	06 c0       	rjmp	.+12     	; 0x3da4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3d98:	02 88       	ldd	r0, Z+18	; 0x12
    3d9a:	f3 89       	ldd	r31, Z+19	; 0x13
    3d9c:	e0 2d       	mov	r30, r0
    3d9e:	80 81       	ld	r24, Z
    3da0:	8f 7d       	andi	r24, 0xDF	; 223
    3da2:	80 83       	st	Z, r24
    3da4:	08 95       	ret

00003da6 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    3da6:	ef 92       	push	r14
    3da8:	ff 92       	push	r15
    3daa:	0f 93       	push	r16
    3dac:	1f 93       	push	r17
    3dae:	cf 93       	push	r28
    3db0:	df 93       	push	r29
    3db2:	ec 01       	movw	r28, r24
  _written = true;
    3db4:	81 e0       	ldi	r24, 0x01	; 1
    3db6:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3db8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3dba:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3dbc:	98 13       	cpse	r25, r24
    3dbe:	05 c0       	rjmp	.+10     	; 0x3dca <_ZN14HardwareSerial5writeEh+0x24>
    3dc0:	e8 89       	ldd	r30, Y+16	; 0x10
    3dc2:	f9 89       	ldd	r31, Y+17	; 0x11
    3dc4:	80 81       	ld	r24, Z
    3dc6:	85 fd       	sbrc	r24, 5
    3dc8:	26 c0       	rjmp	.+76     	; 0x3e16 <_ZN14HardwareSerial5writeEh+0x70>
    3dca:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3dcc:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3dce:	10 e0       	ldi	r17, 0x00	; 0
    3dd0:	0f 5f       	subi	r16, 0xFF	; 255
    3dd2:	1f 4f       	sbci	r17, 0xFF	; 255
    3dd4:	0f 73       	andi	r16, 0x3F	; 63
    3dd6:	11 27       	eor	r17, r17
    3dd8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3dda:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3ddc:	e8 12       	cpse	r14, r24
    3dde:	0c c0       	rjmp	.+24     	; 0x3df8 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    3de0:	0f b6       	in	r0, 0x3f	; 63
    3de2:	07 fc       	sbrc	r0, 7
    3de4:	fa cf       	rjmp	.-12     	; 0x3dda <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3de6:	e8 89       	ldd	r30, Y+16	; 0x10
    3de8:	f9 89       	ldd	r31, Y+17	; 0x11
    3dea:	80 81       	ld	r24, Z
    3dec:	85 ff       	sbrs	r24, 5
    3dee:	f5 cf       	rjmp	.-22     	; 0x3dda <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3df0:	ce 01       	movw	r24, r28
    3df2:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3df6:	f1 cf       	rjmp	.-30     	; 0x3dda <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3df8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3dfa:	fe 01       	movw	r30, r28
    3dfc:	e8 0f       	add	r30, r24
    3dfe:	f1 1d       	adc	r31, r1
    3e00:	e3 5a       	subi	r30, 0xA3	; 163
    3e02:	ff 4f       	sbci	r31, 0xFF	; 255
    3e04:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3e06:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3e08:	f8 94       	cli
    _tx_buffer_head = i;
    3e0a:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    3e0c:	ea 89       	ldd	r30, Y+18	; 0x12
    3e0e:	fb 89       	ldd	r31, Y+19	; 0x13
    3e10:	80 81       	ld	r24, Z
    3e12:	80 62       	ori	r24, 0x20	; 32
    3e14:	09 c0       	rjmp	.+18     	; 0x3e28 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3e16:	9f b7       	in	r25, 0x3f	; 63
    3e18:	f8 94       	cli
      *_udr = c;
    3e1a:	ee 89       	ldd	r30, Y+22	; 0x16
    3e1c:	ff 89       	ldd	r31, Y+23	; 0x17
    3e1e:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
#else
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
    3e20:	e8 89       	ldd	r30, Y+16	; 0x10
    3e22:	f9 89       	ldd	r31, Y+17	; 0x11
    3e24:	80 81       	ld	r24, Z
    3e26:	82 74       	andi	r24, 0x42	; 66
    3e28:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3e2a:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    3e2c:	81 e0       	ldi	r24, 0x01	; 1
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	df 91       	pop	r29
    3e32:	cf 91       	pop	r28
    3e34:	1f 91       	pop	r17
    3e36:	0f 91       	pop	r16
    3e38:	ff 90       	pop	r15
    3e3a:	ef 90       	pop	r14
    3e3c:	08 95       	ret

00003e3e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3e3e:	cf 93       	push	r28
    3e40:	df 93       	push	r29
    3e42:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3e44:	88 8d       	ldd	r24, Y+24	; 0x18
    3e46:	88 23       	and	r24, r24
    3e48:	c9 f0       	breq	.+50     	; 0x3e7c <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3e4a:	ea 89       	ldd	r30, Y+18	; 0x12
    3e4c:	fb 89       	ldd	r31, Y+19	; 0x13
    3e4e:	80 81       	ld	r24, Z
    3e50:	85 fd       	sbrc	r24, 5
    3e52:	05 c0       	rjmp	.+10     	; 0x3e5e <_ZN14HardwareSerial5flushEv+0x20>
    3e54:	a8 89       	ldd	r26, Y+16	; 0x10
    3e56:	b9 89       	ldd	r27, Y+17	; 0x11
    3e58:	8c 91       	ld	r24, X
    3e5a:	86 fd       	sbrc	r24, 6
    3e5c:	0f c0       	rjmp	.+30     	; 0x3e7c <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3e5e:	0f b6       	in	r0, 0x3f	; 63
    3e60:	07 fc       	sbrc	r0, 7
    3e62:	f5 cf       	rjmp	.-22     	; 0x3e4e <_ZN14HardwareSerial5flushEv+0x10>
    3e64:	80 81       	ld	r24, Z
    3e66:	85 ff       	sbrs	r24, 5
    3e68:	f2 cf       	rjmp	.-28     	; 0x3e4e <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3e6a:	a8 89       	ldd	r26, Y+16	; 0x10
    3e6c:	b9 89       	ldd	r27, Y+17	; 0x11
    3e6e:	8c 91       	ld	r24, X
    3e70:	85 ff       	sbrs	r24, 5
    3e72:	ed cf       	rjmp	.-38     	; 0x3e4e <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3e74:	ce 01       	movw	r24, r28
    3e76:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3e7a:	e7 cf       	rjmp	.-50     	; 0x3e4a <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3e7c:	df 91       	pop	r29
    3e7e:	cf 91       	pop	r28
    3e80:	08 95       	ret

00003e82 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3e82:	cf 92       	push	r12
    3e84:	df 92       	push	r13
    3e86:	ef 92       	push	r14
    3e88:	ff 92       	push	r15
    3e8a:	1f 93       	push	r17
    3e8c:	cf 93       	push	r28
    3e8e:	df 93       	push	r29
    3e90:	ec 01       	movw	r28, r24
    3e92:	6a 01       	movw	r12, r20
    3e94:	7b 01       	movw	r14, r22
    3e96:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3e98:	e8 89       	ldd	r30, Y+16	; 0x10
    3e9a:	f9 89       	ldd	r31, Y+17	; 0x11
    3e9c:	82 e0       	ldi	r24, 0x02	; 2
    3e9e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3ea0:	41 15       	cp	r20, r1
    3ea2:	51 4e       	sbci	r21, 0xE1	; 225
    3ea4:	61 05       	cpc	r22, r1
    3ea6:	71 05       	cpc	r23, r1
    3ea8:	b1 f0       	breq	.+44     	; 0x3ed6 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3eaa:	60 e0       	ldi	r22, 0x00	; 0
    3eac:	79 e0       	ldi	r23, 0x09	; 9
    3eae:	8d e3       	ldi	r24, 0x3D	; 61
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	a7 01       	movw	r20, r14
    3eb4:	96 01       	movw	r18, r12
    3eb6:	0e 94 0b 2c 	call	0x5816	; 0x5816 <__udivmodsi4>
    3eba:	da 01       	movw	r26, r20
    3ebc:	c9 01       	movw	r24, r18
    3ebe:	01 97       	sbiw	r24, 0x01	; 1
    3ec0:	a1 09       	sbc	r26, r1
    3ec2:	b1 09       	sbc	r27, r1
    3ec4:	b6 95       	lsr	r27
    3ec6:	a7 95       	ror	r26
    3ec8:	97 95       	ror	r25
    3eca:	87 95       	ror	r24
    3ecc:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3ece:	21 15       	cp	r18, r1
    3ed0:	80 e1       	ldi	r24, 0x10	; 16
    3ed2:	38 07       	cpc	r19, r24
    3ed4:	a8 f0       	brcs	.+42     	; 0x3f00 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    3ed6:	e8 89       	ldd	r30, Y+16	; 0x10
    3ed8:	f9 89       	ldd	r31, Y+17	; 0x11
    3eda:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3edc:	60 e8       	ldi	r22, 0x80	; 128
    3ede:	74 e8       	ldi	r23, 0x84	; 132
    3ee0:	8e e1       	ldi	r24, 0x1E	; 30
    3ee2:	90 e0       	ldi	r25, 0x00	; 0
    3ee4:	a7 01       	movw	r20, r14
    3ee6:	96 01       	movw	r18, r12
    3ee8:	0e 94 0b 2c 	call	0x5816	; 0x5816 <__udivmodsi4>
    3eec:	da 01       	movw	r26, r20
    3eee:	c9 01       	movw	r24, r18
    3ef0:	01 97       	sbiw	r24, 0x01	; 1
    3ef2:	a1 09       	sbc	r26, r1
    3ef4:	b1 09       	sbc	r27, r1
    3ef6:	b6 95       	lsr	r27
    3ef8:	a7 95       	ror	r26
    3efa:	97 95       	ror	r25
    3efc:	87 95       	ror	r24
    3efe:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3f00:	ec 85       	ldd	r30, Y+12	; 0x0c
    3f02:	fd 85       	ldd	r31, Y+13	; 0x0d
    3f04:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    3f06:	ee 85       	ldd	r30, Y+14	; 0x0e
    3f08:	ff 85       	ldd	r31, Y+15	; 0x0f
    3f0a:	20 83       	st	Z, r18

  _written = false;
    3f0c:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3f0e:	ec 89       	ldd	r30, Y+20	; 0x14
    3f10:	fd 89       	ldd	r31, Y+21	; 0x15
    3f12:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    3f14:	ea 89       	ldd	r30, Y+18	; 0x12
    3f16:	fb 89       	ldd	r31, Y+19	; 0x13
    3f18:	80 81       	ld	r24, Z
    3f1a:	80 61       	ori	r24, 0x10	; 16
    3f1c:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    3f1e:	ea 89       	ldd	r30, Y+18	; 0x12
    3f20:	fb 89       	ldd	r31, Y+19	; 0x13
    3f22:	80 81       	ld	r24, Z
    3f24:	88 60       	ori	r24, 0x08	; 8
    3f26:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    3f28:	ea 89       	ldd	r30, Y+18	; 0x12
    3f2a:	fb 89       	ldd	r31, Y+19	; 0x13
    3f2c:	80 81       	ld	r24, Z
    3f2e:	80 68       	ori	r24, 0x80	; 128
    3f30:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    3f32:	ea 89       	ldd	r30, Y+18	; 0x12
    3f34:	fb 89       	ldd	r31, Y+19	; 0x13
    3f36:	80 81       	ld	r24, Z
    3f38:	8f 7d       	andi	r24, 0xDF	; 223
    3f3a:	80 83       	st	Z, r24
}
    3f3c:	df 91       	pop	r29
    3f3e:	cf 91       	pop	r28
    3f40:	1f 91       	pop	r17
    3f42:	ff 90       	pop	r15
    3f44:	ef 90       	pop	r14
    3f46:	df 90       	pop	r13
    3f48:	cf 90       	pop	r12
    3f4a:	08 95       	ret

00003f4c <__vector_25>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    3f4c:	1f 92       	push	r1
    3f4e:	0f 92       	push	r0
    3f50:	0f b6       	in	r0, 0x3f	; 63
    3f52:	0f 92       	push	r0
    3f54:	11 24       	eor	r1, r1
    3f56:	2f 93       	push	r18
    3f58:	8f 93       	push	r24
    3f5a:	9f 93       	push	r25
    3f5c:	ef 93       	push	r30
    3f5e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3f60:	e0 91 65 06 	lds	r30, 0x0665	; 0x800665 <Serial1+0x10>
    3f64:	f0 91 66 06 	lds	r31, 0x0666	; 0x800666 <Serial1+0x11>
    3f68:	80 81       	ld	r24, Z
    3f6a:	e0 91 6b 06 	lds	r30, 0x066B	; 0x80066b <Serial1+0x16>
    3f6e:	f0 91 6c 06 	lds	r31, 0x066C	; 0x80066c <Serial1+0x17>
    3f72:	82 fd       	sbrc	r24, 2
    3f74:	12 c0       	rjmp	.+36     	; 0x3f9a <__vector_25+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3f76:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3f78:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <Serial1+0x19>
    3f7c:	8f 5f       	subi	r24, 0xFF	; 255
    3f7e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3f80:	20 91 6f 06 	lds	r18, 0x066F	; 0x80066f <Serial1+0x1a>
    3f84:	82 17       	cp	r24, r18
    3f86:	51 f0       	breq	.+20     	; 0x3f9c <__vector_25+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    3f88:	e0 91 6e 06 	lds	r30, 0x066E	; 0x80066e <Serial1+0x19>
    3f8c:	f0 e0       	ldi	r31, 0x00	; 0
    3f8e:	eb 5a       	subi	r30, 0xAB	; 171
    3f90:	f9 4f       	sbci	r31, 0xF9	; 249
    3f92:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3f94:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <Serial1+0x19>
    3f98:	01 c0       	rjmp	.+2      	; 0x3f9c <__vector_25+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3f9a:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    3f9c:	ff 91       	pop	r31
    3f9e:	ef 91       	pop	r30
    3fa0:	9f 91       	pop	r25
    3fa2:	8f 91       	pop	r24
    3fa4:	2f 91       	pop	r18
    3fa6:	0f 90       	pop	r0
    3fa8:	0f be       	out	0x3f, r0	; 63
    3faa:	0f 90       	pop	r0
    3fac:	1f 90       	pop	r1
    3fae:	18 95       	reti

00003fb0 <__vector_26>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    3fb0:	1f 92       	push	r1
    3fb2:	0f 92       	push	r0
    3fb4:	0f b6       	in	r0, 0x3f	; 63
    3fb6:	0f 92       	push	r0
    3fb8:	11 24       	eor	r1, r1
    3fba:	2f 93       	push	r18
    3fbc:	3f 93       	push	r19
    3fbe:	4f 93       	push	r20
    3fc0:	5f 93       	push	r21
    3fc2:	6f 93       	push	r22
    3fc4:	7f 93       	push	r23
    3fc6:	8f 93       	push	r24
    3fc8:	9f 93       	push	r25
    3fca:	af 93       	push	r26
    3fcc:	bf 93       	push	r27
    3fce:	ef 93       	push	r30
    3fd0:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    3fd2:	85 e5       	ldi	r24, 0x55	; 85
    3fd4:	96 e0       	ldi	r25, 0x06	; 6
    3fd6:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    3fda:	ff 91       	pop	r31
    3fdc:	ef 91       	pop	r30
    3fde:	bf 91       	pop	r27
    3fe0:	af 91       	pop	r26
    3fe2:	9f 91       	pop	r25
    3fe4:	8f 91       	pop	r24
    3fe6:	7f 91       	pop	r23
    3fe8:	6f 91       	pop	r22
    3fea:	5f 91       	pop	r21
    3fec:	4f 91       	pop	r20
    3fee:	3f 91       	pop	r19
    3ff0:	2f 91       	pop	r18
    3ff2:	0f 90       	pop	r0
    3ff4:	0f be       	out	0x3f, r0	; 63
    3ff6:	0f 90       	pop	r0
    3ff8:	1f 90       	pop	r1
    3ffa:	18 95       	reti

00003ffc <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    3ffc:	85 e5       	ldi	r24, 0x55	; 85
    3ffe:	96 e0       	ldi	r25, 0x06	; 6
    4000:	0e 94 67 1e 	call	0x3cce	; 0x3cce <_ZN14HardwareSerial9availableEv>
    4004:	21 e0       	ldi	r18, 0x01	; 1
    4006:	89 2b       	or	r24, r25
    4008:	09 f4       	brne	.+2      	; 0x400c <_Z17Serial1_availablev+0x10>
    400a:	20 e0       	ldi	r18, 0x00	; 0
}
    400c:	82 2f       	mov	r24, r18
    400e:	08 95       	ret

00004010 <_GLOBAL__sub_I___vector_25>:
    4010:	e5 e5       	ldi	r30, 0x55	; 85
    4012:	f6 e0       	ldi	r31, 0x06	; 6
    4014:	13 82       	std	Z+3, r1	; 0x03
    4016:	12 82       	std	Z+2, r1	; 0x02
    4018:	88 ee       	ldi	r24, 0xE8	; 232
    401a:	93 e0       	ldi	r25, 0x03	; 3
    401c:	a0 e0       	ldi	r26, 0x00	; 0
    401e:	b0 e0       	ldi	r27, 0x00	; 0
    4020:	84 83       	std	Z+4, r24	; 0x04
    4022:	95 83       	std	Z+5, r25	; 0x05
    4024:	a6 83       	std	Z+6, r26	; 0x06
    4026:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    4028:	8a e2       	ldi	r24, 0x2A	; 42
    402a:	93 e0       	ldi	r25, 0x03	; 3
    402c:	91 83       	std	Z+1, r25	; 0x01
    402e:	80 83       	st	Z, r24
    4030:	8d ec       	ldi	r24, 0xCD	; 205
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	95 87       	std	Z+13, r25	; 0x0d
    4036:	84 87       	std	Z+12, r24	; 0x0c
    4038:	8c ec       	ldi	r24, 0xCC	; 204
    403a:	90 e0       	ldi	r25, 0x00	; 0
    403c:	97 87       	std	Z+15, r25	; 0x0f
    403e:	86 87       	std	Z+14, r24	; 0x0e
    4040:	88 ec       	ldi	r24, 0xC8	; 200
    4042:	90 e0       	ldi	r25, 0x00	; 0
    4044:	91 8b       	std	Z+17, r25	; 0x11
    4046:	80 8b       	std	Z+16, r24	; 0x10
    4048:	89 ec       	ldi	r24, 0xC9	; 201
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	93 8b       	std	Z+19, r25	; 0x13
    404e:	82 8b       	std	Z+18, r24	; 0x12
    4050:	8a ec       	ldi	r24, 0xCA	; 202
    4052:	90 e0       	ldi	r25, 0x00	; 0
    4054:	95 8b       	std	Z+21, r25	; 0x15
    4056:	84 8b       	std	Z+20, r24	; 0x14
    4058:	8e ec       	ldi	r24, 0xCE	; 206
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	97 8b       	std	Z+23, r25	; 0x17
    405e:	86 8b       	std	Z+22, r24	; 0x16
    4060:	11 8e       	std	Z+25, r1	; 0x19
    4062:	12 8e       	std	Z+26, r1	; 0x1a
    4064:	13 8e       	std	Z+27, r1	; 0x1b
    4066:	14 8e       	std	Z+28, r1	; 0x1c
    4068:	08 95       	ret

0000406a <initVariant>:
    406a:	08 95       	ret

0000406c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    406c:	0e 94 36 28 	call	0x506c	; 0x506c <init>

	initVariant();
    4070:	0e 94 35 20 	call	0x406a	; 0x406a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
    4074:	82 ef       	ldi	r24, 0xF2	; 242
    4076:	96 e0       	ldi	r25, 0x06	; 6
    4078:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <_ZN10USBDevice_6attachEv>
#endif
	
	setup();
    407c:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    4080:	c4 ea       	ldi	r28, 0xA4	; 164
    4082:	de e1       	ldi	r29, 0x1E	; 30
#endif
	
	setup();
    
	for (;;) {
		loop();
    4084:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <loop>
		if (serialEventRun) serialEventRun();
    4088:	20 97       	sbiw	r28, 0x00	; 0
    408a:	e1 f3       	breq	.-8      	; 0x4084 <main+0x18>
    408c:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <_Z14serialEventRunv>
    4090:	f9 cf       	rjmp	.-14     	; 0x4084 <main+0x18>

00004092 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    4092:	cf 92       	push	r12
    4094:	df 92       	push	r13
    4096:	ef 92       	push	r14
    4098:	ff 92       	push	r15
    409a:	0f 93       	push	r16
    409c:	1f 93       	push	r17
    409e:	cf 93       	push	r28
    40a0:	df 93       	push	r29
    40a2:	6c 01       	movw	r12, r24
    40a4:	7a 01       	movw	r14, r20
    40a6:	8b 01       	movw	r16, r22
    40a8:	c0 e0       	ldi	r28, 0x00	; 0
    40aa:	d0 e0       	ldi	r29, 0x00	; 0
    40ac:	ce 15       	cp	r28, r14
    40ae:	df 05       	cpc	r29, r15
    40b0:	81 f0       	breq	.+32     	; 0x40d2 <_ZN5Print5writeEPKhj+0x40>
    40b2:	d8 01       	movw	r26, r16
    40b4:	6d 91       	ld	r22, X+
    40b6:	8d 01       	movw	r16, r26
    40b8:	d6 01       	movw	r26, r12
    40ba:	ed 91       	ld	r30, X+
    40bc:	fc 91       	ld	r31, X
    40be:	01 90       	ld	r0, Z+
    40c0:	f0 81       	ld	r31, Z
    40c2:	e0 2d       	mov	r30, r0
    40c4:	c6 01       	movw	r24, r12
    40c6:	09 95       	icall
    40c8:	89 2b       	or	r24, r25
    40ca:	11 f0       	breq	.+4      	; 0x40d0 <_ZN5Print5writeEPKhj+0x3e>
    40cc:	21 96       	adiw	r28, 0x01	; 1
    40ce:	ee cf       	rjmp	.-36     	; 0x40ac <_ZN5Print5writeEPKhj+0x1a>
    40d0:	7e 01       	movw	r14, r28
    40d2:	c7 01       	movw	r24, r14
    40d4:	df 91       	pop	r29
    40d6:	cf 91       	pop	r28
    40d8:	1f 91       	pop	r17
    40da:	0f 91       	pop	r16
    40dc:	ff 90       	pop	r15
    40de:	ef 90       	pop	r14
    40e0:	df 90       	pop	r13
    40e2:	cf 90       	pop	r12
    40e4:	08 95       	ret

000040e6 <_ZN5Print5writeEPKc>:
    40e6:	61 15       	cp	r22, r1
    40e8:	71 05       	cpc	r23, r1
    40ea:	79 f0       	breq	.+30     	; 0x410a <_ZN5Print5writeEPKc+0x24>
    40ec:	fb 01       	movw	r30, r22
    40ee:	01 90       	ld	r0, Z+
    40f0:	00 20       	and	r0, r0
    40f2:	e9 f7       	brne	.-6      	; 0x40ee <_ZN5Print5writeEPKc+0x8>
    40f4:	31 97       	sbiw	r30, 0x01	; 1
    40f6:	af 01       	movw	r20, r30
    40f8:	46 1b       	sub	r20, r22
    40fa:	57 0b       	sbc	r21, r23
    40fc:	dc 01       	movw	r26, r24
    40fe:	ed 91       	ld	r30, X+
    4100:	fc 91       	ld	r31, X
    4102:	02 80       	ldd	r0, Z+2	; 0x02
    4104:	f3 81       	ldd	r31, Z+3	; 0x03
    4106:	e0 2d       	mov	r30, r0
    4108:	09 94       	ijmp
    410a:	80 e0       	ldi	r24, 0x00	; 0
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	08 95       	ret

00004110 <_ZN5Print5printERK6String>:
    4110:	db 01       	movw	r26, r22
    4112:	14 96       	adiw	r26, 0x04	; 4
    4114:	4d 91       	ld	r20, X+
    4116:	5c 91       	ld	r21, X
    4118:	15 97       	sbiw	r26, 0x05	; 5
    411a:	6d 91       	ld	r22, X+
    411c:	7c 91       	ld	r23, X
    411e:	dc 01       	movw	r26, r24
    4120:	ed 91       	ld	r30, X+
    4122:	fc 91       	ld	r31, X
    4124:	02 80       	ldd	r0, Z+2	; 0x02
    4126:	f3 81       	ldd	r31, Z+3	; 0x03
    4128:	e0 2d       	mov	r30, r0
    412a:	09 94       	ijmp

0000412c <_ZN5Print5printEPKc>:
    412c:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <_ZN5Print5writeEPKc>

00004130 <_ZN5Print5printEc>:
    4130:	dc 01       	movw	r26, r24
    4132:	ed 91       	ld	r30, X+
    4134:	fc 91       	ld	r31, X
    4136:	01 90       	ld	r0, Z+
    4138:	f0 81       	ld	r31, Z
    413a:	e0 2d       	mov	r30, r0
    413c:	09 94       	ijmp

0000413e <_ZN5Print11printNumberEmh>:
    413e:	8f 92       	push	r8
    4140:	9f 92       	push	r9
    4142:	af 92       	push	r10
    4144:	bf 92       	push	r11
    4146:	ef 92       	push	r14
    4148:	ff 92       	push	r15
    414a:	0f 93       	push	r16
    414c:	1f 93       	push	r17
    414e:	cf 93       	push	r28
    4150:	df 93       	push	r29
    4152:	cd b7       	in	r28, 0x3d	; 61
    4154:	de b7       	in	r29, 0x3e	; 62
    4156:	a1 97       	sbiw	r28, 0x21	; 33
    4158:	0f b6       	in	r0, 0x3f	; 63
    415a:	f8 94       	cli
    415c:	de bf       	out	0x3e, r29	; 62
    415e:	0f be       	out	0x3f, r0	; 63
    4160:	cd bf       	out	0x3d, r28	; 61
    4162:	7c 01       	movw	r14, r24
    4164:	fa 01       	movw	r30, r20
    4166:	cb 01       	movw	r24, r22
    4168:	19 a2       	std	Y+33, r1	; 0x21
    416a:	22 30       	cpi	r18, 0x02	; 2
    416c:	08 f4       	brcc	.+2      	; 0x4170 <_ZN5Print11printNumberEmh+0x32>
    416e:	2a e0       	ldi	r18, 0x0A	; 10
    4170:	8e 01       	movw	r16, r28
    4172:	0f 5d       	subi	r16, 0xDF	; 223
    4174:	1f 4f       	sbci	r17, 0xFF	; 255
    4176:	82 2e       	mov	r8, r18
    4178:	91 2c       	mov	r9, r1
    417a:	a1 2c       	mov	r10, r1
    417c:	b1 2c       	mov	r11, r1
    417e:	bf 01       	movw	r22, r30
    4180:	a5 01       	movw	r20, r10
    4182:	94 01       	movw	r18, r8
    4184:	0e 94 0b 2c 	call	0x5816	; 0x5816 <__udivmodsi4>
    4188:	f9 01       	movw	r30, r18
    418a:	ca 01       	movw	r24, r20
    418c:	01 50       	subi	r16, 0x01	; 1
    418e:	11 09       	sbc	r17, r1
    4190:	6a 30       	cpi	r22, 0x0A	; 10
    4192:	10 f4       	brcc	.+4      	; 0x4198 <_ZN5Print11printNumberEmh+0x5a>
    4194:	60 5d       	subi	r22, 0xD0	; 208
    4196:	01 c0       	rjmp	.+2      	; 0x419a <_ZN5Print11printNumberEmh+0x5c>
    4198:	69 5c       	subi	r22, 0xC9	; 201
    419a:	d8 01       	movw	r26, r16
    419c:	6c 93       	st	X, r22
    419e:	23 2b       	or	r18, r19
    41a0:	24 2b       	or	r18, r20
    41a2:	25 2b       	or	r18, r21
    41a4:	61 f7       	brne	.-40     	; 0x417e <_ZN5Print11printNumberEmh+0x40>
    41a6:	b8 01       	movw	r22, r16
    41a8:	c7 01       	movw	r24, r14
    41aa:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN5Print5writeEPKc>
    41ae:	a1 96       	adiw	r28, 0x21	; 33
    41b0:	0f b6       	in	r0, 0x3f	; 63
    41b2:	f8 94       	cli
    41b4:	de bf       	out	0x3e, r29	; 62
    41b6:	0f be       	out	0x3f, r0	; 63
    41b8:	cd bf       	out	0x3d, r28	; 61
    41ba:	df 91       	pop	r29
    41bc:	cf 91       	pop	r28
    41be:	1f 91       	pop	r17
    41c0:	0f 91       	pop	r16
    41c2:	ff 90       	pop	r15
    41c4:	ef 90       	pop	r14
    41c6:	bf 90       	pop	r11
    41c8:	af 90       	pop	r10
    41ca:	9f 90       	pop	r9
    41cc:	8f 90       	pop	r8
    41ce:	08 95       	ret

000041d0 <_ZN5Print5printEmi>:
    41d0:	21 15       	cp	r18, r1
    41d2:	31 05       	cpc	r19, r1
    41d4:	41 f4       	brne	.+16     	; 0x41e6 <_ZN5Print5printEmi+0x16>
    41d6:	dc 01       	movw	r26, r24
    41d8:	ed 91       	ld	r30, X+
    41da:	fc 91       	ld	r31, X
    41dc:	01 90       	ld	r0, Z+
    41de:	f0 81       	ld	r31, Z
    41e0:	e0 2d       	mov	r30, r0
    41e2:	64 2f       	mov	r22, r20
    41e4:	09 94       	ijmp
    41e6:	0c 94 9f 20 	jmp	0x413e	; 0x413e <_ZN5Print11printNumberEmh>

000041ea <_ZN5Print5printEji>:
    41ea:	9a 01       	movw	r18, r20
    41ec:	ab 01       	movw	r20, r22
    41ee:	60 e0       	ldi	r22, 0x00	; 0
    41f0:	70 e0       	ldi	r23, 0x00	; 0
    41f2:	0c 94 e8 20 	jmp	0x41d0	; 0x41d0 <_ZN5Print5printEmi>

000041f6 <_ZN5Print5printEli>:
    41f6:	cf 92       	push	r12
    41f8:	df 92       	push	r13
    41fa:	ef 92       	push	r14
    41fc:	ff 92       	push	r15
    41fe:	0f 93       	push	r16
    4200:	1f 93       	push	r17
    4202:	cf 93       	push	r28
    4204:	df 93       	push	r29
    4206:	21 15       	cp	r18, r1
    4208:	31 05       	cpc	r19, r1
    420a:	81 f4       	brne	.+32     	; 0x422c <_ZN5Print5printEli+0x36>
    420c:	dc 01       	movw	r26, r24
    420e:	ed 91       	ld	r30, X+
    4210:	fc 91       	ld	r31, X
    4212:	01 90       	ld	r0, Z+
    4214:	f0 81       	ld	r31, Z
    4216:	e0 2d       	mov	r30, r0
    4218:	64 2f       	mov	r22, r20
    421a:	df 91       	pop	r29
    421c:	cf 91       	pop	r28
    421e:	1f 91       	pop	r17
    4220:	0f 91       	pop	r16
    4222:	ff 90       	pop	r15
    4224:	ef 90       	pop	r14
    4226:	df 90       	pop	r13
    4228:	cf 90       	pop	r12
    422a:	09 94       	ijmp
    422c:	2a 30       	cpi	r18, 0x0A	; 10
    422e:	31 05       	cpc	r19, r1
    4230:	01 f5       	brne	.+64     	; 0x4272 <_ZN5Print5printEli+0x7c>
    4232:	77 ff       	sbrs	r23, 7
    4234:	1d c0       	rjmp	.+58     	; 0x4270 <_ZN5Print5printEli+0x7a>
    4236:	6a 01       	movw	r12, r20
    4238:	7b 01       	movw	r14, r22
    423a:	ec 01       	movw	r28, r24
    423c:	6d e2       	ldi	r22, 0x2D	; 45
    423e:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN5Print5printEc>
    4242:	8c 01       	movw	r16, r24
    4244:	44 27       	eor	r20, r20
    4246:	55 27       	eor	r21, r21
    4248:	ba 01       	movw	r22, r20
    424a:	4c 19       	sub	r20, r12
    424c:	5d 09       	sbc	r21, r13
    424e:	6e 09       	sbc	r22, r14
    4250:	7f 09       	sbc	r23, r15
    4252:	2a e0       	ldi	r18, 0x0A	; 10
    4254:	ce 01       	movw	r24, r28
    4256:	0e 94 9f 20 	call	0x413e	; 0x413e <_ZN5Print11printNumberEmh>
    425a:	80 0f       	add	r24, r16
    425c:	91 1f       	adc	r25, r17
    425e:	df 91       	pop	r29
    4260:	cf 91       	pop	r28
    4262:	1f 91       	pop	r17
    4264:	0f 91       	pop	r16
    4266:	ff 90       	pop	r15
    4268:	ef 90       	pop	r14
    426a:	df 90       	pop	r13
    426c:	cf 90       	pop	r12
    426e:	08 95       	ret
    4270:	2a e0       	ldi	r18, 0x0A	; 10
    4272:	df 91       	pop	r29
    4274:	cf 91       	pop	r28
    4276:	1f 91       	pop	r17
    4278:	0f 91       	pop	r16
    427a:	ff 90       	pop	r15
    427c:	ef 90       	pop	r14
    427e:	df 90       	pop	r13
    4280:	cf 90       	pop	r12
    4282:	0c 94 9f 20 	jmp	0x413e	; 0x413e <_ZN5Print11printNumberEmh>

00004286 <_ZN5Print5printEii>:
    4286:	9a 01       	movw	r18, r20
    4288:	ab 01       	movw	r20, r22
    428a:	77 0f       	add	r23, r23
    428c:	66 0b       	sbc	r22, r22
    428e:	77 0b       	sbc	r23, r23
    4290:	0c 94 fb 20 	jmp	0x41f6	; 0x41f6 <_ZN5Print5printEli>

00004294 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    4294:	7f 92       	push	r7
    4296:	8f 92       	push	r8
    4298:	9f 92       	push	r9
    429a:	af 92       	push	r10
    429c:	bf 92       	push	r11
    429e:	cf 92       	push	r12
    42a0:	df 92       	push	r13
    42a2:	ef 92       	push	r14
    42a4:	ff 92       	push	r15
    42a6:	0f 93       	push	r16
    42a8:	1f 93       	push	r17
    42aa:	cf 93       	push	r28
    42ac:	df 93       	push	r29
    42ae:	8c 01       	movw	r16, r24
    42b0:	6a 01       	movw	r12, r20
    42b2:	7b 01       	movw	r14, r22
    42b4:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    42b6:	9a 01       	movw	r18, r20
    42b8:	ab 01       	movw	r20, r22
    42ba:	c7 01       	movw	r24, r14
    42bc:	b6 01       	movw	r22, r12
    42be:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <__unordsf2>
    42c2:	88 23       	and	r24, r24
    42c4:	19 f0       	breq	.+6      	; 0x42cc <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    42c6:	6b e3       	ldi	r22, 0x3B	; 59
    42c8:	73 e0       	ldi	r23, 0x03	; 3
    42ca:	27 c0       	rjmp	.+78     	; 0x431a <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    42cc:	46 01       	movw	r8, r12
    42ce:	57 01       	movw	r10, r14
    42d0:	e8 94       	clt
    42d2:	b7 f8       	bld	r11, 7
    42d4:	2f ef       	ldi	r18, 0xFF	; 255
    42d6:	3f ef       	ldi	r19, 0xFF	; 255
    42d8:	4f e7       	ldi	r20, 0x7F	; 127
    42da:	5f e7       	ldi	r21, 0x7F	; 127
    42dc:	c5 01       	movw	r24, r10
    42de:	b4 01       	movw	r22, r8
    42e0:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <__unordsf2>
    42e4:	81 11       	cpse	r24, r1
    42e6:	0d c0       	rjmp	.+26     	; 0x4302 <_ZN5Print10printFloatEdh+0x6e>
    42e8:	2f ef       	ldi	r18, 0xFF	; 255
    42ea:	3f ef       	ldi	r19, 0xFF	; 255
    42ec:	4f e7       	ldi	r20, 0x7F	; 127
    42ee:	5f e7       	ldi	r21, 0x7F	; 127
    42f0:	c5 01       	movw	r24, r10
    42f2:	b4 01       	movw	r22, r8
    42f4:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <__cmpsf2>
    42f8:	18 16       	cp	r1, r24
    42fa:	1c f4       	brge	.+6      	; 0x4302 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    42fc:	6f e3       	ldi	r22, 0x3F	; 63
    42fe:	73 e0       	ldi	r23, 0x03	; 3
    4300:	0c c0       	rjmp	.+24     	; 0x431a <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    4302:	2f ef       	ldi	r18, 0xFF	; 255
    4304:	3f ef       	ldi	r19, 0xFF	; 255
    4306:	4f e7       	ldi	r20, 0x7F	; 127
    4308:	5f e4       	ldi	r21, 0x4F	; 79
    430a:	c7 01       	movw	r24, r14
    430c:	b6 01       	movw	r22, r12
    430e:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <__gesf2>
    4312:	18 16       	cp	r1, r24
    4314:	94 f4       	brge	.+36     	; 0x433a <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    4316:	63 e4       	ldi	r22, 0x43	; 67
    4318:	73 e0       	ldi	r23, 0x03	; 3
    431a:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    431c:	df 91       	pop	r29
    431e:	cf 91       	pop	r28
    4320:	1f 91       	pop	r17
    4322:	0f 91       	pop	r16
    4324:	ff 90       	pop	r15
    4326:	ef 90       	pop	r14
    4328:	df 90       	pop	r13
    432a:	cf 90       	pop	r12
    432c:	bf 90       	pop	r11
    432e:	af 90       	pop	r10
    4330:	9f 90       	pop	r9
    4332:	8f 90       	pop	r8
    4334:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    4336:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    433a:	2f ef       	ldi	r18, 0xFF	; 255
    433c:	3f ef       	ldi	r19, 0xFF	; 255
    433e:	4f e7       	ldi	r20, 0x7F	; 127
    4340:	5f ec       	ldi	r21, 0xCF	; 207
    4342:	c7 01       	movw	r24, r14
    4344:	b6 01       	movw	r22, r12
    4346:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <__cmpsf2>
    434a:	87 fd       	sbrc	r24, 7
    434c:	e4 cf       	rjmp	.-56     	; 0x4316 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    434e:	20 e0       	ldi	r18, 0x00	; 0
    4350:	30 e0       	ldi	r19, 0x00	; 0
    4352:	a9 01       	movw	r20, r18
    4354:	c7 01       	movw	r24, r14
    4356:	b6 01       	movw	r22, r12
    4358:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <__cmpsf2>
    435c:	87 ff       	sbrs	r24, 7
    435e:	0a c0       	rjmp	.+20     	; 0x4374 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    4360:	6d e2       	ldi	r22, 0x2D	; 45
    4362:	c8 01       	movw	r24, r16
    4364:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN5Print5printEc>
    4368:	ec 01       	movw	r28, r24
     number = -number;
    436a:	f7 fa       	bst	r15, 7
    436c:	f0 94       	com	r15
    436e:	f7 f8       	bld	r15, 7
    4370:	f0 94       	com	r15
    4372:	02 c0       	rjmp	.+4      	; 0x4378 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    4374:	c0 e0       	ldi	r28, 0x00	; 0
    4376:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    4378:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    437a:	60 e0       	ldi	r22, 0x00	; 0
    437c:	70 e0       	ldi	r23, 0x00	; 0
    437e:	80 e0       	ldi	r24, 0x00	; 0
    4380:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    4382:	7b 14       	cp	r7, r11
    4384:	41 f0       	breq	.+16     	; 0x4396 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    4386:	20 e0       	ldi	r18, 0x00	; 0
    4388:	30 e0       	ldi	r19, 0x00	; 0
    438a:	40 e2       	ldi	r20, 0x20	; 32
    438c:	51 e4       	ldi	r21, 0x41	; 65
    438e:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    4392:	b3 94       	inc	r11
    4394:	f6 cf       	rjmp	.-20     	; 0x4382 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    4396:	a7 01       	movw	r20, r14
    4398:	96 01       	movw	r18, r12
    439a:	0e 94 08 1b 	call	0x3610	; 0x3610 <__addsf3>
    439e:	6b 01       	movw	r12, r22
    43a0:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    43a2:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <__fixunssfsi>
    43a6:	4b 01       	movw	r8, r22
    43a8:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    43aa:	2a e0       	ldi	r18, 0x0A	; 10
    43ac:	ab 01       	movw	r20, r22
    43ae:	bc 01       	movw	r22, r24
    43b0:	c8 01       	movw	r24, r16
    43b2:	0e 94 9f 20 	call	0x413e	; 0x413e <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    43b6:	c8 0f       	add	r28, r24
    43b8:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    43ba:	77 20       	and	r7, r7
    43bc:	b9 f1       	breq	.+110    	; 0x442c <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    43be:	c5 01       	movw	r24, r10
    43c0:	b4 01       	movw	r22, r8
    43c2:	0e 94 21 1c 	call	0x3842	; 0x3842 <__floatunsisf>
    43c6:	9b 01       	movw	r18, r22
    43c8:	ac 01       	movw	r20, r24
    43ca:	c7 01       	movw	r24, r14
    43cc:	b6 01       	movw	r22, r12
    43ce:	0e 94 07 1b 	call	0x360e	; 0x360e <__subsf3>
    43d2:	6b 01       	movw	r12, r22
    43d4:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    43d6:	6e e2       	ldi	r22, 0x2E	; 46
    43d8:	c8 01       	movw	r24, r16
    43da:	0e 94 98 20 	call	0x4130	; 0x4130 <_ZN5Print5printEc>
    43de:	c8 0f       	add	r28, r24
    43e0:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    43e2:	20 e0       	ldi	r18, 0x00	; 0
    43e4:	30 e0       	ldi	r19, 0x00	; 0
    43e6:	40 e2       	ldi	r20, 0x20	; 32
    43e8:	51 e4       	ldi	r21, 0x41	; 65
    43ea:	c7 01       	movw	r24, r14
    43ec:	b6 01       	movw	r22, r12
    43ee:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__mulsf3>
    43f2:	4b 01       	movw	r8, r22
    43f4:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    43f6:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <__fixunssfsi>
    43fa:	6b 01       	movw	r12, r22
    43fc:	7c 01       	movw	r14, r24
    n += print(toPrint);
    43fe:	4a e0       	ldi	r20, 0x0A	; 10
    4400:	50 e0       	ldi	r21, 0x00	; 0
    4402:	c8 01       	movw	r24, r16
    4404:	0e 94 f5 20 	call	0x41ea	; 0x41ea <_ZN5Print5printEji>
    4408:	c8 0f       	add	r28, r24
    440a:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    440c:	b6 01       	movw	r22, r12
    440e:	80 e0       	ldi	r24, 0x00	; 0
    4410:	90 e0       	ldi	r25, 0x00	; 0
    4412:	0e 94 21 1c 	call	0x3842	; 0x3842 <__floatunsisf>
    4416:	9b 01       	movw	r18, r22
    4418:	ac 01       	movw	r20, r24
    441a:	c5 01       	movw	r24, r10
    441c:	b4 01       	movw	r22, r8
    441e:	0e 94 07 1b 	call	0x360e	; 0x360e <__subsf3>
    4422:	6b 01       	movw	r12, r22
    4424:	7c 01       	movw	r14, r24
    4426:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    4428:	71 10       	cpse	r7, r1
    442a:	db cf       	rjmp	.-74     	; 0x43e2 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    442c:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    442e:	df 91       	pop	r29
    4430:	cf 91       	pop	r28
    4432:	1f 91       	pop	r17
    4434:	0f 91       	pop	r16
    4436:	ff 90       	pop	r15
    4438:	ef 90       	pop	r14
    443a:	df 90       	pop	r13
    443c:	cf 90       	pop	r12
    443e:	bf 90       	pop	r11
    4440:	af 90       	pop	r10
    4442:	9f 90       	pop	r9
    4444:	8f 90       	pop	r8
    4446:	7f 90       	pop	r7
    4448:	08 95       	ret

0000444a <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    444a:	0c 94 4a 21 	jmp	0x4294	; 0x4294 <_ZN5Print10printFloatEdh>

0000444e <_ZL4RecvPVhh>:
//=======================================================================
//=======================================================================

USBDevice_ USBDevice;

USBDevice_::USBDevice_()
    444e:	61 50       	subi	r22, 0x01	; 1
    4450:	30 f0       	brcs	.+12     	; 0x445e <_ZL4RecvPVhh+0x10>
    4452:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    4456:	fc 01       	movw	r30, r24
    4458:	20 83       	st	Z, r18
    445a:	01 96       	adiw	r24, 0x01	; 1
    445c:	f8 cf       	rjmp	.-16     	; 0x444e <_ZL4RecvPVhh>
    445e:	28 98       	cbi	0x05, 0	; 5
    4460:	84 e6       	ldi	r24, 0x64	; 100
    4462:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <RxLEDPulse>
    4466:	08 95       	ret

00004468 <_ZL11SendControlh>:
    4468:	40 91 f5 06 	lds	r20, 0x06F5	; 0x8006f5 <_ZL6_cmark>
    446c:	50 91 f6 06 	lds	r21, 0x06F6	; 0x8006f6 <_ZL6_cmark+0x1>
    4470:	20 91 f3 06 	lds	r18, 0x06F3	; 0x8006f3 <_ZL5_cend>
    4474:	30 91 f4 06 	lds	r19, 0x06F4	; 0x8006f4 <_ZL5_cend+0x1>
    4478:	42 17       	cp	r20, r18
    447a:	53 07       	cpc	r21, r19
    447c:	b4 f4       	brge	.+44     	; 0x44aa <_ZL11SendControlh+0x42>
    447e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4482:	95 70       	andi	r25, 0x05	; 5
    4484:	e1 f3       	breq	.-8      	; 0x447e <_ZL11SendControlh+0x16>
    4486:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    448a:	92 fd       	sbrc	r25, 2
    448c:	19 c0       	rjmp	.+50     	; 0x44c0 <_ZL11SendControlh+0x58>
    448e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    4492:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <_ZL6_cmark>
    4496:	90 91 f6 06 	lds	r25, 0x06F6	; 0x8006f6 <_ZL6_cmark+0x1>
    449a:	01 96       	adiw	r24, 0x01	; 1
    449c:	8f 73       	andi	r24, 0x3F	; 63
    449e:	99 27       	eor	r25, r25
    44a0:	89 2b       	or	r24, r25
    44a2:	19 f4       	brne	.+6      	; 0x44aa <_ZL11SendControlh+0x42>
    44a4:	8e ef       	ldi	r24, 0xFE	; 254
    44a6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    44aa:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <_ZL6_cmark>
    44ae:	90 91 f6 06 	lds	r25, 0x06F6	; 0x8006f6 <_ZL6_cmark+0x1>
    44b2:	01 96       	adiw	r24, 0x01	; 1
    44b4:	90 93 f6 06 	sts	0x06F6, r25	; 0x8006f6 <_ZL6_cmark+0x1>
    44b8:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <_ZL6_cmark>
    44bc:	81 e0       	ldi	r24, 0x01	; 1
    44be:	08 95       	ret
    44c0:	80 e0       	ldi	r24, 0x00	; 0
    44c2:	08 95       	ret

000044c4 <_ZL24USB_SendStringDescriptorPKhhh>:
    44c4:	df 92       	push	r13
    44c6:	ef 92       	push	r14
    44c8:	ff 92       	push	r15
    44ca:	0f 93       	push	r16
    44cc:	1f 93       	push	r17
    44ce:	cf 93       	push	r28
    44d0:	df 93       	push	r29
    44d2:	d8 2e       	mov	r13, r24
    44d4:	f9 2e       	mov	r15, r25
    44d6:	e4 2e       	mov	r14, r20
    44d8:	06 2f       	mov	r16, r22
    44da:	10 e0       	ldi	r17, 0x00	; 0
    44dc:	c8 01       	movw	r24, r16
    44de:	01 96       	adiw	r24, 0x01	; 1
    44e0:	88 0f       	add	r24, r24
    44e2:	0e 94 34 22 	call	0x4468	; 0x4468 <_ZL11SendControlh>
    44e6:	83 e0       	ldi	r24, 0x03	; 3
    44e8:	0e 94 34 22 	call	0x4468	; 0x4468 <_ZL11SendControlh>
    44ec:	cd 2d       	mov	r28, r13
    44ee:	df 2d       	mov	r29, r15
    44f0:	0c 0f       	add	r16, r28
    44f2:	1d 1f       	adc	r17, r29
    44f4:	c0 17       	cp	r28, r16
    44f6:	d1 07       	cpc	r29, r17
    44f8:	89 f0       	breq	.+34     	; 0x451c <_ZL24USB_SendStringDescriptorPKhhh+0x58>
    44fa:	e7 fe       	sbrs	r14, 7
    44fc:	03 c0       	rjmp	.+6      	; 0x4504 <_ZL24USB_SendStringDescriptorPKhhh+0x40>
    44fe:	fe 01       	movw	r30, r28
    4500:	84 91       	lpm	r24, Z
    4502:	01 c0       	rjmp	.+2      	; 0x4506 <_ZL24USB_SendStringDescriptorPKhhh+0x42>
    4504:	88 81       	ld	r24, Y
    4506:	0e 94 34 22 	call	0x4468	; 0x4468 <_ZL11SendControlh>
    450a:	f8 2e       	mov	r15, r24
    450c:	80 e0       	ldi	r24, 0x00	; 0
    450e:	0e 94 34 22 	call	0x4468	; 0x4468 <_ZL11SendControlh>
    4512:	8f 21       	and	r24, r15
    4514:	21 96       	adiw	r28, 0x01	; 1
    4516:	81 11       	cpse	r24, r1
    4518:	ed cf       	rjmp	.-38     	; 0x44f4 <_ZL24USB_SendStringDescriptorPKhhh+0x30>
    451a:	01 c0       	rjmp	.+2      	; 0x451e <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
    451c:	81 e0       	ldi	r24, 0x01	; 1
    451e:	df 91       	pop	r29
    4520:	cf 91       	pop	r28
    4522:	1f 91       	pop	r17
    4524:	0f 91       	pop	r16
    4526:	ff 90       	pop	r15
    4528:	ef 90       	pop	r14
    452a:	df 90       	pop	r13
    452c:	08 95       	ret

0000452e <_ZL15USB_ClockEnablev>:
    452e:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    4532:	81 60       	ori	r24, 0x01	; 1
    4534:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    4538:	80 ea       	ldi	r24, 0xA0	; 160
    453a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    453e:	89 b5       	in	r24, 0x29	; 41
    4540:	80 61       	ori	r24, 0x10	; 16
    4542:	89 bd       	out	0x29, r24	; 41
    4544:	89 b5       	in	r24, 0x29	; 41
    4546:	82 60       	ori	r24, 0x02	; 2
    4548:	89 bd       	out	0x29, r24	; 41
    454a:	09 b4       	in	r0, 0x29	; 41
    454c:	00 fe       	sbrs	r0, 0
    454e:	fd cf       	rjmp	.-6      	; 0x454a <_ZL15USB_ClockEnablev+0x1c>
    4550:	61 e0       	ldi	r22, 0x01	; 1
    4552:	70 e0       	ldi	r23, 0x00	; 0
    4554:	80 e0       	ldi	r24, 0x00	; 0
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	0e 94 ef 27 	call	0x4fde	; 0x4fde <delay>
    455c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    4560:	8f 7c       	andi	r24, 0xCF	; 207
    4562:	80 61       	ori	r24, 0x10	; 16
    4564:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    4568:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    456c:	80 7f       	andi	r24, 0xF0	; 240
    456e:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    4572:	08 95       	ret

00004574 <_ZL14SendInterfacesv>:
    4574:	cf 93       	push	r28
    4576:	df 93       	push	r29
    4578:	1f 92       	push	r1
    457a:	cd b7       	in	r28, 0x3d	; 61
    457c:	de b7       	in	r29, 0x3e	; 62
    457e:	19 82       	std	Y+1, r1	; 0x01
    4580:	ce 01       	movw	r24, r28
    4582:	01 96       	adiw	r24, 0x01	; 1
    4584:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <_Z16CDC_GetInterfacePh>
    4588:	0e 94 de 2b 	call	0x57bc	; 0x57bc <_Z12PluggableUSBv>
    458c:	be 01       	movw	r22, r28
    458e:	6f 5f       	subi	r22, 0xFF	; 255
    4590:	7f 4f       	sbci	r23, 0xFF	; 255
    4592:	0e 94 59 2b 	call	0x56b2	; 0x56b2 <_ZN13PluggableUSB_12getInterfaceEPh>
    4596:	89 81       	ldd	r24, Y+1	; 0x01
    4598:	0f 90       	pop	r0
    459a:	df 91       	pop	r29
    459c:	cf 91       	pop	r28
    459e:	08 95       	ret

000045a0 <_ZN6LockEPC1Eh>:
    45a0:	2f b7       	in	r18, 0x3f	; 63
    45a2:	fc 01       	movw	r30, r24
    45a4:	20 83       	st	Z, r18
    45a6:	f8 94       	cli
    45a8:	67 70       	andi	r22, 0x07	; 7
    45aa:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    45ae:	08 95       	ret

000045b0 <_Z13USB_Availableh>:
    45b0:	cf 93       	push	r28
    45b2:	df 93       	push	r29
    45b4:	1f 92       	push	r1
    45b6:	cd b7       	in	r28, 0x3d	; 61
    45b8:	de b7       	in	r29, 0x3e	; 62
    45ba:	68 2f       	mov	r22, r24
    45bc:	ce 01       	movw	r24, r28
    45be:	01 96       	adiw	r24, 0x01	; 1
    45c0:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <_ZN6LockEPC1Eh>
    45c4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    45c8:	99 81       	ldd	r25, Y+1	; 0x01
    45ca:	9f bf       	out	0x3f, r25	; 63
    45cc:	0f 90       	pop	r0
    45ce:	df 91       	pop	r29
    45d0:	cf 91       	pop	r28
    45d2:	08 95       	ret

000045d4 <_Z8USB_RecvhPvi>:
    45d4:	ef 92       	push	r14
    45d6:	ff 92       	push	r15
    45d8:	0f 93       	push	r16
    45da:	1f 93       	push	r17
    45dc:	cf 93       	push	r28
    45de:	df 93       	push	r29
    45e0:	1f 92       	push	r1
    45e2:	cd b7       	in	r28, 0x3d	; 61
    45e4:	de b7       	in	r29, 0x3e	; 62
    45e6:	90 91 f9 06 	lds	r25, 0x06F9	; 0x8006f9 <_usbConfiguration>
    45ea:	99 23       	and	r25, r25
    45ec:	11 f0       	breq	.+4      	; 0x45f2 <_Z8USB_RecvhPvi+0x1e>
    45ee:	57 ff       	sbrs	r21, 7
    45f0:	03 c0       	rjmp	.+6      	; 0x45f8 <_Z8USB_RecvhPvi+0x24>
    45f2:	8f ef       	ldi	r24, 0xFF	; 255
    45f4:	9f ef       	ldi	r25, 0xFF	; 255
    45f6:	29 c0       	rjmp	.+82     	; 0x464a <_Z8USB_RecvhPvi+0x76>
    45f8:	8a 01       	movw	r16, r20
    45fa:	7b 01       	movw	r14, r22
    45fc:	68 2f       	mov	r22, r24
    45fe:	ce 01       	movw	r24, r28
    4600:	01 96       	adiw	r24, 0x01	; 1
    4602:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <_ZN6LockEPC1Eh>
    4606:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    460a:	30 e0       	ldi	r19, 0x00	; 0
    460c:	02 17       	cp	r16, r18
    460e:	13 07       	cpc	r17, r19
    4610:	0c f4       	brge	.+2      	; 0x4614 <_Z8USB_RecvhPvi+0x40>
    4612:	98 01       	movw	r18, r16
    4614:	82 2f       	mov	r24, r18
    4616:	f7 01       	movw	r30, r14
    4618:	94 e6       	ldi	r25, 0x64	; 100
    461a:	81 50       	subi	r24, 0x01	; 1
    461c:	38 f0       	brcs	.+14     	; 0x462c <_Z8USB_RecvhPvi+0x58>
    461e:	28 98       	cbi	0x05, 0	; 5
    4620:	90 93 fa 06 	sts	0x06FA, r25	; 0x8006fa <RxLEDPulse>
    4624:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    4628:	41 93       	st	Z+, r20
    462a:	f7 cf       	rjmp	.-18     	; 0x461a <_Z8USB_RecvhPvi+0x46>
    462c:	21 15       	cp	r18, r1
    462e:	31 05       	cpc	r19, r1
    4630:	21 f0       	breq	.+8      	; 0x463a <_Z8USB_RecvhPvi+0x66>
    4632:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    4636:	88 23       	and	r24, r24
    4638:	21 f0       	breq	.+8      	; 0x4642 <_Z8USB_RecvhPvi+0x6e>
    463a:	89 81       	ldd	r24, Y+1	; 0x01
    463c:	8f bf       	out	0x3f, r24	; 63
    463e:	c9 01       	movw	r24, r18
    4640:	04 c0       	rjmp	.+8      	; 0x464a <_Z8USB_RecvhPvi+0x76>
    4642:	8b e6       	ldi	r24, 0x6B	; 107
    4644:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4648:	f8 cf       	rjmp	.-16     	; 0x463a <_Z8USB_RecvhPvi+0x66>
    464a:	0f 90       	pop	r0
    464c:	df 91       	pop	r29
    464e:	cf 91       	pop	r28
    4650:	1f 91       	pop	r17
    4652:	0f 91       	pop	r16
    4654:	ff 90       	pop	r15
    4656:	ef 90       	pop	r14
    4658:	08 95       	ret

0000465a <_Z8USB_Recvh>:
    465a:	cf 93       	push	r28
    465c:	df 93       	push	r29
    465e:	1f 92       	push	r1
    4660:	cd b7       	in	r28, 0x3d	; 61
    4662:	de b7       	in	r29, 0x3e	; 62
    4664:	41 e0       	ldi	r20, 0x01	; 1
    4666:	50 e0       	ldi	r21, 0x00	; 0
    4668:	be 01       	movw	r22, r28
    466a:	6f 5f       	subi	r22, 0xFF	; 255
    466c:	7f 4f       	sbci	r23, 0xFF	; 255
    466e:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <_Z8USB_RecvhPvi>
    4672:	01 97       	sbiw	r24, 0x01	; 1
    4674:	19 f4       	brne	.+6      	; 0x467c <_Z8USB_Recvh+0x22>
    4676:	89 81       	ldd	r24, Y+1	; 0x01
    4678:	90 e0       	ldi	r25, 0x00	; 0
    467a:	02 c0       	rjmp	.+4      	; 0x4680 <_Z8USB_Recvh+0x26>
    467c:	8f ef       	ldi	r24, 0xFF	; 255
    467e:	9f ef       	ldi	r25, 0xFF	; 255
    4680:	0f 90       	pop	r0
    4682:	df 91       	pop	r29
    4684:	cf 91       	pop	r28
    4686:	08 95       	ret

00004688 <_Z13USB_SendSpaceh>:
    4688:	cf 93       	push	r28
    468a:	df 93       	push	r29
    468c:	1f 92       	push	r1
    468e:	cd b7       	in	r28, 0x3d	; 61
    4690:	de b7       	in	r29, 0x3e	; 62
    4692:	68 2f       	mov	r22, r24
    4694:	ce 01       	movw	r24, r28
    4696:	01 96       	adiw	r24, 0x01	; 1
    4698:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <_ZN6LockEPC1Eh>
    469c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    46a0:	89 2f       	mov	r24, r25
    46a2:	80 72       	andi	r24, 0x20	; 32
    46a4:	95 ff       	sbrs	r25, 5
    46a6:	04 c0       	rjmp	.+8      	; 0x46b0 <_Z13USB_SendSpaceh+0x28>
    46a8:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    46ac:	80 e4       	ldi	r24, 0x40	; 64
    46ae:	89 1b       	sub	r24, r25
    46b0:	99 81       	ldd	r25, Y+1	; 0x01
    46b2:	9f bf       	out	0x3f, r25	; 63
    46b4:	0f 90       	pop	r0
    46b6:	df 91       	pop	r29
    46b8:	cf 91       	pop	r28
    46ba:	08 95       	ret

000046bc <_Z8USB_SendhPKvi>:
    46bc:	5f 92       	push	r5
    46be:	6f 92       	push	r6
    46c0:	7f 92       	push	r7
    46c2:	8f 92       	push	r8
    46c4:	9f 92       	push	r9
    46c6:	af 92       	push	r10
    46c8:	bf 92       	push	r11
    46ca:	cf 92       	push	r12
    46cc:	df 92       	push	r13
    46ce:	ef 92       	push	r14
    46d0:	ff 92       	push	r15
    46d2:	0f 93       	push	r16
    46d4:	1f 93       	push	r17
    46d6:	cf 93       	push	r28
    46d8:	df 93       	push	r29
    46da:	1f 92       	push	r1
    46dc:	cd b7       	in	r28, 0x3d	; 61
    46de:	de b7       	in	r29, 0x3e	; 62
    46e0:	98 2e       	mov	r9, r24
    46e2:	6b 01       	movw	r12, r22
    46e4:	b4 2e       	mov	r11, r20
    46e6:	05 2f       	mov	r16, r21
    46e8:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <_usbConfiguration>
    46ec:	81 11       	cpse	r24, r1
    46ee:	03 c0       	rjmp	.+6      	; 0x46f6 <_Z8USB_SendhPKvi+0x3a>
    46f0:	8f ef       	ldi	r24, 0xFF	; 255
    46f2:	9f ef       	ldi	r25, 0xFF	; 255
    46f4:	77 c0       	rjmp	.+238    	; 0x47e4 <_Z8USB_SendhPKvi+0x128>
    46f6:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <_usbSuspendState>
    46fa:	80 ff       	sbrs	r24, 0
    46fc:	05 c0       	rjmp	.+10     	; 0x4708 <_Z8USB_SendhPKvi+0x4c>
    46fe:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    4702:	82 60       	ori	r24, 0x02	; 2
    4704:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    4708:	eb 2c       	mov	r14, r11
    470a:	f0 2e       	mov	r15, r16
    470c:	a1 2c       	mov	r10, r1
    470e:	8a ef       	ldi	r24, 0xFA	; 250
    4710:	88 2e       	mov	r8, r24
    4712:	89 2d       	mov	r24, r9
    4714:	80 72       	andi	r24, 0x20	; 32
    4716:	68 2e       	mov	r6, r24
    4718:	89 2d       	mov	r24, r9
    471a:	80 74       	andi	r24, 0x40	; 64
    471c:	58 2e       	mov	r5, r24
    471e:	9a e3       	ldi	r25, 0x3A	; 58
    4720:	79 2e       	mov	r7, r25
    4722:	e1 14       	cp	r14, r1
    4724:	f1 04       	cpc	r15, r1
    4726:	19 f4       	brne	.+6      	; 0x472e <_Z8USB_SendhPKvi+0x72>
    4728:	aa 20       	and	r10, r10
    472a:	09 f4       	brne	.+2      	; 0x472e <_Z8USB_SendhPKvi+0x72>
    472c:	55 c0       	rjmp	.+170    	; 0x47d8 <_Z8USB_SendhPKvi+0x11c>
    472e:	89 2d       	mov	r24, r9
    4730:	0e 94 44 23 	call	0x4688	; 0x4688 <_Z13USB_SendSpaceh>
    4734:	18 2f       	mov	r17, r24
    4736:	81 11       	cpse	r24, r1
    4738:	0a c0       	rjmp	.+20     	; 0x474e <_Z8USB_SendhPKvi+0x92>
    473a:	8a 94       	dec	r8
    473c:	88 20       	and	r8, r8
    473e:	c1 f2       	breq	.-80     	; 0x46f0 <_Z8USB_SendhPKvi+0x34>
    4740:	61 e0       	ldi	r22, 0x01	; 1
    4742:	70 e0       	ldi	r23, 0x00	; 0
    4744:	80 e0       	ldi	r24, 0x00	; 0
    4746:	90 e0       	ldi	r25, 0x00	; 0
    4748:	0e 94 ef 27 	call	0x4fde	; 0x4fde <delay>
    474c:	ea cf       	rjmp	.-44     	; 0x4722 <_Z8USB_SendhPKvi+0x66>
    474e:	90 e0       	ldi	r25, 0x00	; 0
    4750:	e8 16       	cp	r14, r24
    4752:	f9 06       	cpc	r15, r25
    4754:	0c f4       	brge	.+2      	; 0x4758 <_Z8USB_SendhPKvi+0x9c>
    4756:	1e 2d       	mov	r17, r14
    4758:	69 2d       	mov	r22, r9
    475a:	ce 01       	movw	r24, r28
    475c:	01 96       	adiw	r24, 0x01	; 1
    475e:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <_ZN6LockEPC1Eh>
    4762:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4766:	85 ff       	sbrs	r24, 5
    4768:	34 c0       	rjmp	.+104    	; 0x47d2 <_Z8USB_SendhPKvi+0x116>
    476a:	81 2f       	mov	r24, r17
    476c:	90 e0       	ldi	r25, 0x00	; 0
    476e:	e8 1a       	sub	r14, r24
    4770:	f9 0a       	sbc	r15, r25
    4772:	66 20       	and	r6, r6
    4774:	29 f0       	breq	.+10     	; 0x4780 <_Z8USB_SendhPKvi+0xc4>
    4776:	11 50       	subi	r17, 0x01	; 1
    4778:	a0 f0       	brcs	.+40     	; 0x47a2 <_Z8USB_SendhPKvi+0xe6>
    477a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    477e:	fb cf       	rjmp	.-10     	; 0x4776 <_Z8USB_SendhPKvi+0xba>
    4780:	f6 01       	movw	r30, r12
    4782:	97 fe       	sbrs	r9, 7
    4784:	0a c0       	rjmp	.+20     	; 0x479a <_Z8USB_SendhPKvi+0xde>
    4786:	11 50       	subi	r17, 0x01	; 1
    4788:	50 f0       	brcs	.+20     	; 0x479e <_Z8USB_SendhPKvi+0xe2>
    478a:	24 91       	lpm	r18, Z
    478c:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    4790:	31 96       	adiw	r30, 0x01	; 1
    4792:	f9 cf       	rjmp	.-14     	; 0x4786 <_Z8USB_SendhPKvi+0xca>
    4794:	21 91       	ld	r18, Z+
    4796:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    479a:	11 50       	subi	r17, 0x01	; 1
    479c:	d8 f7       	brcc	.-10     	; 0x4794 <_Z8USB_SendhPKvi+0xd8>
    479e:	c8 0e       	add	r12, r24
    47a0:	d9 1e       	adc	r13, r25
    47a2:	aa 20       	and	r10, r10
    47a4:	19 f0       	breq	.+6      	; 0x47ac <_Z8USB_SendhPKvi+0xf0>
    47a6:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    47aa:	0b c0       	rjmp	.+22     	; 0x47c2 <_Z8USB_SendhPKvi+0x106>
    47ac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    47b0:	85 fd       	sbrc	r24, 5
    47b2:	09 c0       	rjmp	.+18     	; 0x47c6 <_Z8USB_SendhPKvi+0x10a>
    47b4:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    47b8:	aa 24       	eor	r10, r10
    47ba:	a3 94       	inc	r10
    47bc:	e1 14       	cp	r14, r1
    47be:	f1 04       	cpc	r15, r1
    47c0:	41 f0       	breq	.+16     	; 0x47d2 <_Z8USB_SendhPKvi+0x116>
    47c2:	a1 2c       	mov	r10, r1
    47c4:	06 c0       	rjmp	.+12     	; 0x47d2 <_Z8USB_SendhPKvi+0x116>
    47c6:	e1 14       	cp	r14, r1
    47c8:	f1 04       	cpc	r15, r1
    47ca:	19 f4       	brne	.+6      	; 0x47d2 <_Z8USB_SendhPKvi+0x116>
    47cc:	51 10       	cpse	r5, r1
    47ce:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    47d2:	89 81       	ldd	r24, Y+1	; 0x01
    47d4:	8f bf       	out	0x3f, r24	; 63
    47d6:	a5 cf       	rjmp	.-182    	; 0x4722 <_Z8USB_SendhPKvi+0x66>
    47d8:	5d 98       	cbi	0x0b, 5	; 11
    47da:	84 e6       	ldi	r24, 0x64	; 100
    47dc:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <TxLEDPulse>
    47e0:	8b 2d       	mov	r24, r11
    47e2:	90 2f       	mov	r25, r16
    47e4:	0f 90       	pop	r0
    47e6:	df 91       	pop	r29
    47e8:	cf 91       	pop	r28
    47ea:	1f 91       	pop	r17
    47ec:	0f 91       	pop	r16
    47ee:	ff 90       	pop	r15
    47f0:	ef 90       	pop	r14
    47f2:	df 90       	pop	r13
    47f4:	cf 90       	pop	r12
    47f6:	bf 90       	pop	r11
    47f8:	af 90       	pop	r10
    47fa:	9f 90       	pop	r9
    47fc:	8f 90       	pop	r8
    47fe:	7f 90       	pop	r7
    4800:	6f 90       	pop	r6
    4802:	5f 90       	pop	r5
    4804:	08 95       	ret

00004806 <_Z11InitControli>:
    4806:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    480a:	10 92 f6 06 	sts	0x06F6, r1	; 0x8006f6 <_ZL6_cmark+0x1>
    480e:	10 92 f5 06 	sts	0x06F5, r1	; 0x8006f5 <_ZL6_cmark>
    4812:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <_ZL5_cend+0x1>
    4816:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <_ZL5_cend>
    481a:	08 95       	ret

0000481c <_Z15USB_SendControlhPKvi>:
    481c:	df 92       	push	r13
    481e:	ef 92       	push	r14
    4820:	ff 92       	push	r15
    4822:	0f 93       	push	r16
    4824:	1f 93       	push	r17
    4826:	cf 93       	push	r28
    4828:	df 93       	push	r29
    482a:	d8 2e       	mov	r13, r24
    482c:	8a 01       	movw	r16, r20
    482e:	7b 01       	movw	r14, r22
    4830:	e4 0e       	add	r14, r20
    4832:	f5 1e       	adc	r15, r21
    4834:	eb 01       	movw	r28, r22
    4836:	ce 15       	cp	r28, r14
    4838:	df 05       	cpc	r29, r15
    483a:	71 f0       	breq	.+28     	; 0x4858 <_Z15USB_SendControlhPKvi+0x3c>
    483c:	d7 fe       	sbrs	r13, 7
    483e:	03 c0       	rjmp	.+6      	; 0x4846 <_Z15USB_SendControlhPKvi+0x2a>
    4840:	fe 01       	movw	r30, r28
    4842:	84 91       	lpm	r24, Z
    4844:	01 c0       	rjmp	.+2      	; 0x4848 <_Z15USB_SendControlhPKvi+0x2c>
    4846:	88 81       	ld	r24, Y
    4848:	0e 94 34 22 	call	0x4468	; 0x4468 <_ZL11SendControlh>
    484c:	21 96       	adiw	r28, 0x01	; 1
    484e:	81 11       	cpse	r24, r1
    4850:	f2 cf       	rjmp	.-28     	; 0x4836 <_Z15USB_SendControlhPKvi+0x1a>
    4852:	8f ef       	ldi	r24, 0xFF	; 255
    4854:	9f ef       	ldi	r25, 0xFF	; 255
    4856:	01 c0       	rjmp	.+2      	; 0x485a <_Z15USB_SendControlhPKvi+0x3e>
    4858:	c8 01       	movw	r24, r16
    485a:	df 91       	pop	r29
    485c:	cf 91       	pop	r28
    485e:	1f 91       	pop	r17
    4860:	0f 91       	pop	r16
    4862:	ff 90       	pop	r15
    4864:	ef 90       	pop	r14
    4866:	df 90       	pop	r13
    4868:	08 95       	ret

0000486a <_Z15USB_RecvControlPvi>:
    486a:	af 92       	push	r10
    486c:	bf 92       	push	r11
    486e:	df 92       	push	r13
    4870:	ef 92       	push	r14
    4872:	ff 92       	push	r15
    4874:	0f 93       	push	r16
    4876:	1f 93       	push	r17
    4878:	cf 93       	push	r28
    487a:	df 93       	push	r29
    487c:	5c 01       	movw	r10, r24
    487e:	8b 01       	movw	r16, r22
    4880:	eb 01       	movw	r28, r22
    4882:	9b ef       	ldi	r25, 0xFB	; 251
    4884:	d9 2e       	mov	r13, r25
    4886:	20 97       	sbiw	r28, 0x00	; 0
    4888:	c1 f0       	breq	.+48     	; 0x48ba <_Z15USB_RecvControlPvi+0x50>
    488a:	7e 01       	movw	r14, r28
    488c:	c1 34       	cpi	r28, 0x41	; 65
    488e:	d1 05       	cpc	r29, r1
    4890:	1c f0       	brlt	.+6      	; 0x4898 <_Z15USB_RecvControlPvi+0x2e>
    4892:	80 e4       	ldi	r24, 0x40	; 64
    4894:	e8 2e       	mov	r14, r24
    4896:	f1 2c       	mov	r15, r1
    4898:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    489c:	82 ff       	sbrs	r24, 2
    489e:	fc cf       	rjmp	.-8      	; 0x4898 <_Z15USB_RecvControlPvi+0x2e>
    48a0:	c8 01       	movw	r24, r16
    48a2:	8c 1b       	sub	r24, r28
    48a4:	9d 0b       	sbc	r25, r29
    48a6:	6e 2d       	mov	r22, r14
    48a8:	8a 0d       	add	r24, r10
    48aa:	9b 1d       	adc	r25, r11
    48ac:	0e 94 27 22 	call	0x444e	; 0x444e <_ZL4RecvPVhh>
    48b0:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    48b4:	ce 19       	sub	r28, r14
    48b6:	df 09       	sbc	r29, r15
    48b8:	e6 cf       	rjmp	.-52     	; 0x4886 <_Z15USB_RecvControlPvi+0x1c>
    48ba:	c8 01       	movw	r24, r16
    48bc:	df 91       	pop	r29
    48be:	cf 91       	pop	r28
    48c0:	1f 91       	pop	r17
    48c2:	0f 91       	pop	r16
    48c4:	ff 90       	pop	r15
    48c6:	ef 90       	pop	r14
    48c8:	df 90       	pop	r13
    48ca:	bf 90       	pop	r11
    48cc:	af 90       	pop	r10
    48ce:	08 95       	ret

000048d0 <__vector_11>:
    48d0:	1f 92       	push	r1
    48d2:	0f 92       	push	r0
    48d4:	0f b6       	in	r0, 0x3f	; 63
    48d6:	0f 92       	push	r0
    48d8:	11 24       	eor	r1, r1
    48da:	cf 92       	push	r12
    48dc:	df 92       	push	r13
    48de:	ef 92       	push	r14
    48e0:	ff 92       	push	r15
    48e2:	0f 93       	push	r16
    48e4:	1f 93       	push	r17
    48e6:	2f 93       	push	r18
    48e8:	3f 93       	push	r19
    48ea:	4f 93       	push	r20
    48ec:	5f 93       	push	r21
    48ee:	6f 93       	push	r22
    48f0:	7f 93       	push	r23
    48f2:	8f 93       	push	r24
    48f4:	9f 93       	push	r25
    48f6:	af 93       	push	r26
    48f8:	bf 93       	push	r27
    48fa:	ef 93       	push	r30
    48fc:	ff 93       	push	r31
    48fe:	cf 93       	push	r28
    4900:	df 93       	push	r29
    4902:	cd b7       	in	r28, 0x3d	; 61
    4904:	de b7       	in	r29, 0x3e	; 62
    4906:	6c 97       	sbiw	r28, 0x1c	; 28
    4908:	de bf       	out	0x3e, r29	; 62
    490a:	cd bf       	out	0x3d, r28	; 61
    490c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    4910:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4914:	83 ff       	sbrs	r24, 3
    4916:	17 c1       	rjmp	.+558    	; 0x4b46 <__vector_11+0x276>
    4918:	68 e0       	ldi	r22, 0x08	; 8
    491a:	ce 01       	movw	r24, r28
    491c:	45 96       	adiw	r24, 0x15	; 21
    491e:	0e 94 27 22 	call	0x444e	; 0x444e <_ZL4RecvPVhh>
    4922:	82 ef       	ldi	r24, 0xF2	; 242
    4924:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4928:	8d 89       	ldd	r24, Y+21	; 0x15
    492a:	87 ff       	sbrs	r24, 7
    492c:	05 c0       	rjmp	.+10     	; 0x4938 <__vector_11+0x68>
    492e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4932:	90 ff       	sbrs	r25, 0
    4934:	fc cf       	rjmp	.-8      	; 0x492e <__vector_11+0x5e>
    4936:	03 c0       	rjmp	.+6      	; 0x493e <__vector_11+0x6e>
    4938:	9e ef       	ldi	r25, 0xFE	; 254
    493a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    493e:	98 2f       	mov	r25, r24
    4940:	90 76       	andi	r25, 0x60	; 96
    4942:	09 f0       	breq	.+2      	; 0x4946 <__vector_11+0x76>
    4944:	d8 c0       	rjmp	.+432    	; 0x4af6 <__vector_11+0x226>
    4946:	9e 89       	ldd	r25, Y+22	; 0x16
    4948:	4f 89       	ldd	r20, Y+23	; 0x17
    494a:	58 8d       	ldd	r21, Y+24	; 0x18
    494c:	2f 89       	ldd	r18, Y+23	; 0x17
    494e:	18 8d       	ldd	r17, Y+24	; 0x18
    4950:	91 11       	cpse	r25, r1
    4952:	0c c0       	rjmp	.+24     	; 0x496c <__vector_11+0x9c>
    4954:	80 38       	cpi	r24, 0x80	; 128
    4956:	29 f4       	brne	.+10     	; 0x4962 <__vector_11+0x92>
    4958:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <_usbCurrentStatus>
    495c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    4960:	02 c0       	rjmp	.+4      	; 0x4966 <__vector_11+0x96>
    4962:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    4966:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    496a:	e6 c0       	rjmp	.+460    	; 0x4b38 <__vector_11+0x268>
    496c:	91 30       	cpi	r25, 0x01	; 1
    496e:	51 f4       	brne	.+20     	; 0x4984 <__vector_11+0xb4>
    4970:	81 11       	cpse	r24, r1
    4972:	e2 c0       	rjmp	.+452    	; 0x4b38 <__vector_11+0x268>
    4974:	41 30       	cpi	r20, 0x01	; 1
    4976:	51 05       	cpc	r21, r1
    4978:	09 f0       	breq	.+2      	; 0x497c <__vector_11+0xac>
    497a:	de c0       	rjmp	.+444    	; 0x4b38 <__vector_11+0x268>
    497c:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <_usbCurrentStatus>
    4980:	8d 7f       	andi	r24, 0xFD	; 253
    4982:	0b c0       	rjmp	.+22     	; 0x499a <__vector_11+0xca>
    4984:	93 30       	cpi	r25, 0x03	; 3
    4986:	61 f4       	brne	.+24     	; 0x49a0 <__vector_11+0xd0>
    4988:	81 11       	cpse	r24, r1
    498a:	d6 c0       	rjmp	.+428    	; 0x4b38 <__vector_11+0x268>
    498c:	41 30       	cpi	r20, 0x01	; 1
    498e:	51 05       	cpc	r21, r1
    4990:	09 f0       	breq	.+2      	; 0x4994 <__vector_11+0xc4>
    4992:	d2 c0       	rjmp	.+420    	; 0x4b38 <__vector_11+0x268>
    4994:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <_usbCurrentStatus>
    4998:	82 60       	ori	r24, 0x02	; 2
    499a:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <_usbCurrentStatus>
    499e:	cc c0       	rjmp	.+408    	; 0x4b38 <__vector_11+0x268>
    49a0:	95 30       	cpi	r25, 0x05	; 5
    49a2:	49 f4       	brne	.+18     	; 0x49b6 <__vector_11+0xe6>
    49a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    49a8:	80 ff       	sbrs	r24, 0
    49aa:	fc cf       	rjmp	.-8      	; 0x49a4 <__vector_11+0xd4>
    49ac:	82 2f       	mov	r24, r18
    49ae:	80 68       	ori	r24, 0x80	; 128
    49b0:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    49b4:	c1 c0       	rjmp	.+386    	; 0x4b38 <__vector_11+0x268>
    49b6:	96 30       	cpi	r25, 0x06	; 6
    49b8:	09 f0       	breq	.+2      	; 0x49bc <__vector_11+0xec>
    49ba:	70 c0       	rjmp	.+224    	; 0x4a9c <__vector_11+0x1cc>
    49bc:	eb 8c       	ldd	r14, Y+27	; 0x1b
    49be:	fc 8c       	ldd	r15, Y+28	; 0x1c
    49c0:	12 30       	cpi	r17, 0x02	; 2
    49c2:	69 f5       	brne	.+90     	; 0x4a1e <__vector_11+0x14e>
    49c4:	80 e0       	ldi	r24, 0x00	; 0
    49c6:	90 e0       	ldi	r25, 0x00	; 0
    49c8:	0e 94 03 24 	call	0x4806	; 0x4806 <_Z11InitControli>
    49cc:	0e 94 ba 22 	call	0x4574	; 0x4574 <_ZL14SendInterfacesv>
    49d0:	99 e0       	ldi	r25, 0x09	; 9
    49d2:	9e 01       	movw	r18, r28
    49d4:	2f 5f       	subi	r18, 0xFF	; 255
    49d6:	3f 4f       	sbci	r19, 0xFF	; 255
    49d8:	69 01       	movw	r12, r18
    49da:	f9 01       	movw	r30, r18
    49dc:	29 2f       	mov	r18, r25
    49de:	11 92       	st	Z+, r1
    49e0:	2a 95       	dec	r18
    49e2:	e9 f7       	brne	.-6      	; 0x49de <__vector_11+0x10e>
    49e4:	99 83       	std	Y+1, r25	; 0x01
    49e6:	1a 83       	std	Y+2, r17	; 0x02
    49e8:	91 e0       	ldi	r25, 0x01	; 1
    49ea:	9e 83       	std	Y+6, r25	; 0x06
    49ec:	90 ea       	ldi	r25, 0xA0	; 160
    49ee:	98 87       	std	Y+8, r25	; 0x08
    49f0:	9a ef       	ldi	r25, 0xFA	; 250
    49f2:	99 87       	std	Y+9, r25	; 0x09
    49f4:	20 91 f5 06 	lds	r18, 0x06F5	; 0x8006f5 <_ZL6_cmark>
    49f8:	30 91 f6 06 	lds	r19, 0x06F6	; 0x8006f6 <_ZL6_cmark+0x1>
    49fc:	27 5f       	subi	r18, 0xF7	; 247
    49fe:	3f 4f       	sbci	r19, 0xFF	; 255
    4a00:	3c 83       	std	Y+4, r19	; 0x04
    4a02:	2b 83       	std	Y+3, r18	; 0x03
    4a04:	8d 83       	std	Y+5, r24	; 0x05
    4a06:	c7 01       	movw	r24, r14
    4a08:	0e 94 03 24 	call	0x4806	; 0x4806 <_Z11InitControli>
    4a0c:	49 e0       	ldi	r20, 0x09	; 9
    4a0e:	50 e0       	ldi	r21, 0x00	; 0
    4a10:	b6 01       	movw	r22, r12
    4a12:	80 e0       	ldi	r24, 0x00	; 0
    4a14:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z15USB_SendControlhPKvi>
    4a18:	0e 94 ba 22 	call	0x4574	; 0x4574 <_ZL14SendInterfacesv>
    4a1c:	8d c0       	rjmp	.+282    	; 0x4b38 <__vector_11+0x268>
    4a1e:	c7 01       	movw	r24, r14
    4a20:	0e 94 03 24 	call	0x4806	; 0x4806 <_Z11InitControli>
    4a24:	0e 94 de 2b 	call	0x57bc	; 0x57bc <_Z12PluggableUSBv>
    4a28:	be 01       	movw	r22, r28
    4a2a:	6b 5e       	subi	r22, 0xEB	; 235
    4a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    4a2e:	0e 94 82 2b 	call	0x5704	; 0x5704 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    4a32:	00 97       	sbiw	r24, 0x00	; 0
    4a34:	19 f0       	breq	.+6      	; 0x4a3c <__vector_11+0x16c>
    4a36:	0c f0       	brlt	.+2      	; 0x4a3a <__vector_11+0x16a>
    4a38:	7f c0       	rjmp	.+254    	; 0x4b38 <__vector_11+0x268>
    4a3a:	82 c0       	rjmp	.+260    	; 0x4b40 <__vector_11+0x270>
    4a3c:	11 30       	cpi	r17, 0x01	; 1
    4a3e:	09 f4       	brne	.+2      	; 0x4a42 <__vector_11+0x172>
    4a40:	70 c0       	rjmp	.+224    	; 0x4b22 <__vector_11+0x252>
    4a42:	13 30       	cpi	r17, 0x03	; 3
    4a44:	09 f0       	breq	.+2      	; 0x4a48 <__vector_11+0x178>
    4a46:	7c c0       	rjmp	.+248    	; 0x4b40 <__vector_11+0x270>
    4a48:	8f 89       	ldd	r24, Y+23	; 0x17
    4a4a:	88 23       	and	r24, r24
    4a4c:	09 f4       	brne	.+2      	; 0x4a50 <__vector_11+0x180>
    4a4e:	6c c0       	rjmp	.+216    	; 0x4b28 <__vector_11+0x258>
    4a50:	82 30       	cpi	r24, 0x02	; 2
    4a52:	29 f4       	brne	.+10     	; 0x4a5e <__vector_11+0x18e>
    4a54:	40 e8       	ldi	r20, 0x80	; 128
    4a56:	60 e1       	ldi	r22, 0x10	; 16
    4a58:	88 e4       	ldi	r24, 0x48	; 72
    4a5a:	91 e0       	ldi	r25, 0x01	; 1
    4a5c:	06 c0       	rjmp	.+12     	; 0x4a6a <__vector_11+0x19a>
    4a5e:	81 30       	cpi	r24, 0x01	; 1
    4a60:	39 f4       	brne	.+14     	; 0x4a70 <__vector_11+0x1a0>
    4a62:	40 e8       	ldi	r20, 0x80	; 128
    4a64:	6b e0       	ldi	r22, 0x0B	; 11
    4a66:	8c e3       	ldi	r24, 0x3C	; 60
    4a68:	91 e0       	ldi	r25, 0x01	; 1
    4a6a:	0e 94 62 22 	call	0x44c4	; 0x44c4 <_ZL24USB_SendStringDescriptorPKhhh>
    4a6e:	56 c0       	rjmp	.+172    	; 0x4b1c <__vector_11+0x24c>
    4a70:	83 30       	cpi	r24, 0x03	; 3
    4a72:	09 f0       	breq	.+2      	; 0x4a76 <__vector_11+0x1a6>
    4a74:	65 c0       	rjmp	.+202    	; 0x4b40 <__vector_11+0x270>
    4a76:	0e 94 de 2b 	call	0x57bc	; 0x57bc <_Z12PluggableUSBv>
    4a7a:	8e 01       	movw	r16, r28
    4a7c:	0f 5f       	subi	r16, 0xFF	; 255
    4a7e:	1f 4f       	sbci	r17, 0xFF	; 255
    4a80:	b8 01       	movw	r22, r16
    4a82:	0e 94 a1 2b 	call	0x5742	; 0x5742 <_ZN13PluggableUSB_12getShortNameEPc>
    4a86:	f8 01       	movw	r30, r16
    4a88:	01 90       	ld	r0, Z+
    4a8a:	00 20       	and	r0, r0
    4a8c:	e9 f7       	brne	.-6      	; 0x4a88 <__vector_11+0x1b8>
    4a8e:	31 97       	sbiw	r30, 0x01	; 1
    4a90:	bf 01       	movw	r22, r30
    4a92:	60 1b       	sub	r22, r16
    4a94:	71 0b       	sbc	r23, r17
    4a96:	40 e0       	ldi	r20, 0x00	; 0
    4a98:	c8 01       	movw	r24, r16
    4a9a:	e7 cf       	rjmp	.-50     	; 0x4a6a <__vector_11+0x19a>
    4a9c:	97 30       	cpi	r25, 0x07	; 7
    4a9e:	09 f4       	brne	.+2      	; 0x4aa2 <__vector_11+0x1d2>
    4aa0:	4f c0       	rjmp	.+158    	; 0x4b40 <__vector_11+0x270>
    4aa2:	98 30       	cpi	r25, 0x08	; 8
    4aa4:	21 f4       	brne	.+8      	; 0x4aae <__vector_11+0x1de>
    4aa6:	81 e0       	ldi	r24, 0x01	; 1
    4aa8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    4aac:	45 c0       	rjmp	.+138    	; 0x4b38 <__vector_11+0x268>
    4aae:	99 30       	cpi	r25, 0x09	; 9
    4ab0:	09 f0       	breq	.+2      	; 0x4ab4 <__vector_11+0x1e4>
    4ab2:	42 c0       	rjmp	.+132    	; 0x4b38 <__vector_11+0x268>
    4ab4:	83 70       	andi	r24, 0x03	; 3
    4ab6:	09 f0       	breq	.+2      	; 0x4aba <__vector_11+0x1ea>
    4ab8:	43 c0       	rjmp	.+134    	; 0x4b40 <__vector_11+0x270>
    4aba:	e5 e2       	ldi	r30, 0x25	; 37
    4abc:	f1 e0       	ldi	r31, 0x01	; 1
    4abe:	81 e0       	ldi	r24, 0x01	; 1
    4ac0:	31 e0       	ldi	r19, 0x01	; 1
    4ac2:	96 e3       	ldi	r25, 0x36	; 54
    4ac4:	20 81       	ld	r18, Z
    4ac6:	21 11       	cpse	r18, r1
    4ac8:	09 c0       	rjmp	.+18     	; 0x4adc <__vector_11+0x20c>
    4aca:	8e e7       	ldi	r24, 0x7E	; 126
    4acc:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    4ad0:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    4ad4:	8f 89       	ldd	r24, Y+23	; 0x17
    4ad6:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <_usbConfiguration>
    4ada:	2e c0       	rjmp	.+92     	; 0x4b38 <__vector_11+0x268>
    4adc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    4ae0:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    4ae4:	21 91       	ld	r18, Z+
    4ae6:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    4aea:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    4aee:	8f 5f       	subi	r24, 0xFF	; 255
    4af0:	87 30       	cpi	r24, 0x07	; 7
    4af2:	41 f7       	brne	.-48     	; 0x4ac4 <__vector_11+0x1f4>
    4af4:	ea cf       	rjmp	.-44     	; 0x4aca <__vector_11+0x1fa>
    4af6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4af8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4afa:	0e 94 03 24 	call	0x4806	; 0x4806 <_Z11InitControli>
    4afe:	89 8d       	ldd	r24, Y+25	; 0x19
    4b00:	81 11       	cpse	r24, r1
    4b02:	05 c0       	rjmp	.+10     	; 0x4b0e <__vector_11+0x23e>
    4b04:	ce 01       	movw	r24, r28
    4b06:	45 96       	adiw	r24, 0x15	; 21
    4b08:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <_Z9CDC_SetupR8USBSetup>
    4b0c:	07 c0       	rjmp	.+14     	; 0x4b1c <__vector_11+0x24c>
    4b0e:	0e 94 de 2b 	call	0x57bc	; 0x57bc <_Z12PluggableUSBv>
    4b12:	be 01       	movw	r22, r28
    4b14:	6b 5e       	subi	r22, 0xEB	; 235
    4b16:	7f 4f       	sbci	r23, 0xFF	; 255
    4b18:	0e 94 c0 2b 	call	0x5780	; 0x5780 <_ZN13PluggableUSB_5setupER8USBSetup>
    4b1c:	88 23       	and	r24, r24
    4b1e:	81 f0       	breq	.+32     	; 0x4b40 <__vector_11+0x270>
    4b20:	0b c0       	rjmp	.+22     	; 0x4b38 <__vector_11+0x268>
    4b22:	6a e2       	ldi	r22, 0x2A	; 42
    4b24:	71 e0       	ldi	r23, 0x01	; 1
    4b26:	02 c0       	rjmp	.+4      	; 0x4b2c <__vector_11+0x25c>
    4b28:	69 e5       	ldi	r22, 0x59	; 89
    4b2a:	71 e0       	ldi	r23, 0x01	; 1
    4b2c:	fb 01       	movw	r30, r22
    4b2e:	44 91       	lpm	r20, Z
    4b30:	50 e0       	ldi	r21, 0x00	; 0
    4b32:	80 e8       	ldi	r24, 0x80	; 128
    4b34:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z15USB_SendControlhPKvi>
    4b38:	8e ef       	ldi	r24, 0xFE	; 254
    4b3a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4b3e:	03 c0       	rjmp	.+6      	; 0x4b46 <__vector_11+0x276>
    4b40:	81 e2       	ldi	r24, 0x21	; 33
    4b42:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    4b46:	6c 96       	adiw	r28, 0x1c	; 28
    4b48:	0f b6       	in	r0, 0x3f	; 63
    4b4a:	f8 94       	cli
    4b4c:	de bf       	out	0x3e, r29	; 62
    4b4e:	0f be       	out	0x3f, r0	; 63
    4b50:	cd bf       	out	0x3d, r28	; 61
    4b52:	df 91       	pop	r29
    4b54:	cf 91       	pop	r28
    4b56:	ff 91       	pop	r31
    4b58:	ef 91       	pop	r30
    4b5a:	bf 91       	pop	r27
    4b5c:	af 91       	pop	r26
    4b5e:	9f 91       	pop	r25
    4b60:	8f 91       	pop	r24
    4b62:	7f 91       	pop	r23
    4b64:	6f 91       	pop	r22
    4b66:	5f 91       	pop	r21
    4b68:	4f 91       	pop	r20
    4b6a:	3f 91       	pop	r19
    4b6c:	2f 91       	pop	r18
    4b6e:	1f 91       	pop	r17
    4b70:	0f 91       	pop	r16
    4b72:	ff 90       	pop	r15
    4b74:	ef 90       	pop	r14
    4b76:	df 90       	pop	r13
    4b78:	cf 90       	pop	r12
    4b7a:	0f 90       	pop	r0
    4b7c:	0f be       	out	0x3f, r0	; 63
    4b7e:	0f 90       	pop	r0
    4b80:	1f 90       	pop	r1
    4b82:	18 95       	reti

00004b84 <_Z9USB_Flushh>:
    4b84:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    4b88:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    4b8c:	88 23       	and	r24, r24
    4b8e:	19 f0       	breq	.+6      	; 0x4b96 <_Z9USB_Flushh+0x12>
    4b90:	8a e3       	ldi	r24, 0x3A	; 58
    4b92:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4b96:	08 95       	ret

00004b98 <__vector_10>:
    4b98:	1f 92       	push	r1
    4b9a:	0f 92       	push	r0
    4b9c:	0f b6       	in	r0, 0x3f	; 63
    4b9e:	0f 92       	push	r0
    4ba0:	11 24       	eor	r1, r1
    4ba2:	2f 93       	push	r18
    4ba4:	3f 93       	push	r19
    4ba6:	4f 93       	push	r20
    4ba8:	5f 93       	push	r21
    4baa:	6f 93       	push	r22
    4bac:	7f 93       	push	r23
    4bae:	8f 93       	push	r24
    4bb0:	9f 93       	push	r25
    4bb2:	af 93       	push	r26
    4bb4:	bf 93       	push	r27
    4bb6:	cf 93       	push	r28
    4bb8:	ef 93       	push	r30
    4bba:	ff 93       	push	r31
    4bbc:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    4bc0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    4bc4:	83 7f       	andi	r24, 0xF3	; 243
    4bc6:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    4bca:	c3 ff       	sbrs	r28, 3
    4bcc:	0f c0       	rjmp	.+30     	; 0x4bec <__vector_10+0x54>
    4bce:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    4bd2:	81 e0       	ldi	r24, 0x01	; 1
    4bd4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    4bd8:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    4bdc:	82 e3       	ldi	r24, 0x32	; 50
    4bde:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    4be2:	10 92 f9 06 	sts	0x06F9, r1	; 0x8006f9 <_usbConfiguration>
    4be6:	88 e0       	ldi	r24, 0x08	; 8
    4be8:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    4bec:	c2 ff       	sbrs	r28, 2
    4bee:	19 c0       	rjmp	.+50     	; 0x4c22 <__vector_10+0x8a>
    4bf0:	83 e0       	ldi	r24, 0x03	; 3
    4bf2:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <_Z9USB_Flushh>
    4bf6:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <TxLEDPulse>
    4bfa:	88 23       	and	r24, r24
    4bfc:	39 f0       	breq	.+14     	; 0x4c0c <__vector_10+0x74>
    4bfe:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <TxLEDPulse>
    4c02:	81 50       	subi	r24, 0x01	; 1
    4c04:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <TxLEDPulse>
    4c08:	88 23       	and	r24, r24
    4c0a:	89 f1       	breq	.+98     	; 0x4c6e <__vector_10+0xd6>
    4c0c:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <RxLEDPulse>
    4c10:	88 23       	and	r24, r24
    4c12:	39 f0       	breq	.+14     	; 0x4c22 <__vector_10+0x8a>
    4c14:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <RxLEDPulse>
    4c18:	81 50       	subi	r24, 0x01	; 1
    4c1a:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <RxLEDPulse>
    4c1e:	88 23       	and	r24, r24
    4c20:	41 f1       	breq	.+80     	; 0x4c72 <__vector_10+0xda>
    4c22:	c4 ff       	sbrs	r28, 4
    4c24:	10 c0       	rjmp	.+32     	; 0x4c46 <__vector_10+0xae>
    4c26:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    4c2a:	8e 7e       	andi	r24, 0xEE	; 238
    4c2c:	81 60       	ori	r24, 0x01	; 1
    4c2e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    4c32:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    4c36:	8f 7e       	andi	r24, 0xEF	; 239
    4c38:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    4c3c:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <_usbSuspendState>
    4c40:	8e 7e       	andi	r24, 0xEE	; 238
    4c42:	80 61       	ori	r24, 0x10	; 16
    4c44:	11 c0       	rjmp	.+34     	; 0x4c68 <__vector_10+0xd0>
    4c46:	c0 ff       	sbrs	r28, 0
    4c48:	16 c0       	rjmp	.+44     	; 0x4c76 <__vector_10+0xde>
    4c4a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    4c4e:	8e 7e       	andi	r24, 0xEE	; 238
    4c50:	80 61       	ori	r24, 0x10	; 16
    4c52:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    4c56:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    4c5a:	8e 7e       	andi	r24, 0xEE	; 238
    4c5c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    4c60:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <_usbSuspendState>
    4c64:	8e 7e       	andi	r24, 0xEE	; 238
    4c66:	81 60       	ori	r24, 0x01	; 1
    4c68:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <_usbSuspendState>
    4c6c:	04 c0       	rjmp	.+8      	; 0x4c76 <__vector_10+0xde>
    4c6e:	5d 9a       	sbi	0x0b, 5	; 11
    4c70:	cd cf       	rjmp	.-102    	; 0x4c0c <__vector_10+0x74>
    4c72:	28 9a       	sbi	0x05, 0	; 5
    4c74:	d6 cf       	rjmp	.-84     	; 0x4c22 <__vector_10+0x8a>
    4c76:	ff 91       	pop	r31
    4c78:	ef 91       	pop	r30
    4c7a:	cf 91       	pop	r28
    4c7c:	bf 91       	pop	r27
    4c7e:	af 91       	pop	r26
    4c80:	9f 91       	pop	r25
    4c82:	8f 91       	pop	r24
    4c84:	7f 91       	pop	r23
    4c86:	6f 91       	pop	r22
    4c88:	5f 91       	pop	r21
    4c8a:	4f 91       	pop	r20
    4c8c:	3f 91       	pop	r19
    4c8e:	2f 91       	pop	r18
    4c90:	0f 90       	pop	r0
    4c92:	0f be       	out	0x3f, r0	; 63
    4c94:	0f 90       	pop	r0
    4c96:	1f 90       	pop	r1
    4c98:	18 95       	reti

00004c9a <_ZN10USBDevice_6attachEv>:
{
}

void USBDevice_::attach()
{
	_usbConfiguration = 0;
    4c9a:	10 92 f9 06 	sts	0x06F9, r1	; 0x8006f9 <_usbConfiguration>
	_usbCurrentStatus = 0;
    4c9e:	10 92 f8 06 	sts	0x06F8, r1	; 0x8006f8 <_usbCurrentStatus>
	_usbSuspendState = 0;
    4ca2:	10 92 f7 06 	sts	0x06F7, r1	; 0x8006f7 <_usbSuspendState>
	USB_ClockEnable();
    4ca6:	0e 94 97 22 	call	0x452e	; 0x452e <_ZL15USB_ClockEnablev>

	UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear already pending WAKEUP / SUSPEND requests
    4caa:	e1 ee       	ldi	r30, 0xE1	; 225
    4cac:	f0 e0       	ldi	r31, 0x00	; 0
    4cae:	80 81       	ld	r24, Z
    4cb0:	8e 7e       	andi	r24, 0xEE	; 238
    4cb2:	80 83       	st	Z, r24
	UDIEN = (1<<EORSTE) | (1<<SOFE) | (1<<SUSPE);	// Enable interrupts for EOR (End of Reset), SOF (start of frame) and SUSPEND
    4cb4:	8d e0       	ldi	r24, 0x0D	; 13
    4cb6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	
	TX_RX_LED_INIT;
    4cba:	55 9a       	sbi	0x0a, 5	; 10
    4cbc:	20 9a       	sbi	0x04, 0	; 4
    4cbe:	08 95       	ret

00004cc0 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    4cc0:	08 95       	ret

00004cc2 <attachInterrupt>:
    4cc2:	85 30       	cpi	r24, 0x05	; 5
    4cc4:	08 f0       	brcs	.+2      	; 0x4cc8 <attachInterrupt+0x6>
    4cc6:	4c c0       	rjmp	.+152    	; 0x4d60 <attachInterrupt+0x9e>
    4cc8:	e8 2f       	mov	r30, r24
    4cca:	f0 e0       	ldi	r31, 0x00	; 0
    4ccc:	ee 0f       	add	r30, r30
    4cce:	ff 1f       	adc	r31, r31
    4cd0:	e5 5d       	subi	r30, 0xD5	; 213
    4cd2:	fe 4f       	sbci	r31, 0xFE	; 254
    4cd4:	71 83       	std	Z+1, r23	; 0x01
    4cd6:	60 83       	st	Z, r22
    4cd8:	82 30       	cpi	r24, 0x02	; 2
    4cda:	e1 f0       	breq	.+56     	; 0x4d14 <attachInterrupt+0x52>
    4cdc:	18 f4       	brcc	.+6      	; 0x4ce4 <attachInterrupt+0x22>
    4cde:	81 30       	cpi	r24, 0x01	; 1
    4ce0:	69 f0       	breq	.+26     	; 0x4cfc <attachInterrupt+0x3a>
    4ce2:	04 c0       	rjmp	.+8      	; 0x4cec <attachInterrupt+0x2a>
    4ce4:	83 30       	cpi	r24, 0x03	; 3
    4ce6:	19 f1       	breq	.+70     	; 0x4d2e <attachInterrupt+0x6c>
    4ce8:	84 30       	cpi	r24, 0x04	; 4
    4cea:	71 f1       	breq	.+92     	; 0x4d48 <attachInterrupt+0x86>
    4cec:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    4cf0:	8c 7f       	andi	r24, 0xFC	; 252
    4cf2:	48 2b       	or	r20, r24
    4cf4:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    4cf8:	e8 9a       	sbi	0x1d, 0	; 29
    4cfa:	08 95       	ret
    4cfc:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    4d00:	83 7f       	andi	r24, 0xF3	; 243
    4d02:	44 0f       	add	r20, r20
    4d04:	55 1f       	adc	r21, r21
    4d06:	44 0f       	add	r20, r20
    4d08:	55 1f       	adc	r21, r21
    4d0a:	48 2b       	or	r20, r24
    4d0c:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    4d10:	e9 9a       	sbi	0x1d, 1	; 29
    4d12:	08 95       	ret
    4d14:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    4d18:	8f 7c       	andi	r24, 0xCF	; 207
    4d1a:	34 e0       	ldi	r19, 0x04	; 4
    4d1c:	44 0f       	add	r20, r20
    4d1e:	55 1f       	adc	r21, r21
    4d20:	3a 95       	dec	r19
    4d22:	e1 f7       	brne	.-8      	; 0x4d1c <attachInterrupt+0x5a>
    4d24:	48 2b       	or	r20, r24
    4d26:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    4d2a:	ea 9a       	sbi	0x1d, 2	; 29
    4d2c:	08 95       	ret
    4d2e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    4d32:	8f 73       	andi	r24, 0x3F	; 63
    4d34:	26 e0       	ldi	r18, 0x06	; 6
    4d36:	44 0f       	add	r20, r20
    4d38:	55 1f       	adc	r21, r21
    4d3a:	2a 95       	dec	r18
    4d3c:	e1 f7       	brne	.-8      	; 0x4d36 <attachInterrupt+0x74>
    4d3e:	48 2b       	or	r20, r24
    4d40:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    4d44:	eb 9a       	sbi	0x1d, 3	; 29
    4d46:	08 95       	ret
    4d48:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
    4d4c:	8f 7c       	andi	r24, 0xCF	; 207
    4d4e:	94 e0       	ldi	r25, 0x04	; 4
    4d50:	44 0f       	add	r20, r20
    4d52:	55 1f       	adc	r21, r21
    4d54:	9a 95       	dec	r25
    4d56:	e1 f7       	brne	.-8      	; 0x4d50 <attachInterrupt+0x8e>
    4d58:	48 2b       	or	r20, r24
    4d5a:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
    4d5e:	ee 9a       	sbi	0x1d, 6	; 29
    4d60:	08 95       	ret

00004d62 <__vector_1>:
    intFunc[interrupt](); \
  }

#if defined(__AVR_ATmega32U4__)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    4d62:	1f 92       	push	r1
    4d64:	0f 92       	push	r0
    4d66:	0f b6       	in	r0, 0x3f	; 63
    4d68:	0f 92       	push	r0
    4d6a:	11 24       	eor	r1, r1
    4d6c:	2f 93       	push	r18
    4d6e:	3f 93       	push	r19
    4d70:	4f 93       	push	r20
    4d72:	5f 93       	push	r21
    4d74:	6f 93       	push	r22
    4d76:	7f 93       	push	r23
    4d78:	8f 93       	push	r24
    4d7a:	9f 93       	push	r25
    4d7c:	af 93       	push	r26
    4d7e:	bf 93       	push	r27
    4d80:	ef 93       	push	r30
    4d82:	ff 93       	push	r31
    4d84:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <intFunc>
    4d88:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <intFunc+0x1>
    4d8c:	09 95       	icall
    4d8e:	ff 91       	pop	r31
    4d90:	ef 91       	pop	r30
    4d92:	bf 91       	pop	r27
    4d94:	af 91       	pop	r26
    4d96:	9f 91       	pop	r25
    4d98:	8f 91       	pop	r24
    4d9a:	7f 91       	pop	r23
    4d9c:	6f 91       	pop	r22
    4d9e:	5f 91       	pop	r21
    4da0:	4f 91       	pop	r20
    4da2:	3f 91       	pop	r19
    4da4:	2f 91       	pop	r18
    4da6:	0f 90       	pop	r0
    4da8:	0f be       	out	0x3f, r0	; 63
    4daa:	0f 90       	pop	r0
    4dac:	1f 90       	pop	r1
    4dae:	18 95       	reti

00004db0 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    4db0:	1f 92       	push	r1
    4db2:	0f 92       	push	r0
    4db4:	0f b6       	in	r0, 0x3f	; 63
    4db6:	0f 92       	push	r0
    4db8:	11 24       	eor	r1, r1
    4dba:	2f 93       	push	r18
    4dbc:	3f 93       	push	r19
    4dbe:	4f 93       	push	r20
    4dc0:	5f 93       	push	r21
    4dc2:	6f 93       	push	r22
    4dc4:	7f 93       	push	r23
    4dc6:	8f 93       	push	r24
    4dc8:	9f 93       	push	r25
    4dca:	af 93       	push	r26
    4dcc:	bf 93       	push	r27
    4dce:	ef 93       	push	r30
    4dd0:	ff 93       	push	r31
    4dd2:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <intFunc+0x2>
    4dd6:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <intFunc+0x3>
    4dda:	09 95       	icall
    4ddc:	ff 91       	pop	r31
    4dde:	ef 91       	pop	r30
    4de0:	bf 91       	pop	r27
    4de2:	af 91       	pop	r26
    4de4:	9f 91       	pop	r25
    4de6:	8f 91       	pop	r24
    4de8:	7f 91       	pop	r23
    4dea:	6f 91       	pop	r22
    4dec:	5f 91       	pop	r21
    4dee:	4f 91       	pop	r20
    4df0:	3f 91       	pop	r19
    4df2:	2f 91       	pop	r18
    4df4:	0f 90       	pop	r0
    4df6:	0f be       	out	0x3f, r0	; 63
    4df8:	0f 90       	pop	r0
    4dfa:	1f 90       	pop	r1
    4dfc:	18 95       	reti

00004dfe <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_2)
    4dfe:	1f 92       	push	r1
    4e00:	0f 92       	push	r0
    4e02:	0f b6       	in	r0, 0x3f	; 63
    4e04:	0f 92       	push	r0
    4e06:	11 24       	eor	r1, r1
    4e08:	2f 93       	push	r18
    4e0a:	3f 93       	push	r19
    4e0c:	4f 93       	push	r20
    4e0e:	5f 93       	push	r21
    4e10:	6f 93       	push	r22
    4e12:	7f 93       	push	r23
    4e14:	8f 93       	push	r24
    4e16:	9f 93       	push	r25
    4e18:	af 93       	push	r26
    4e1a:	bf 93       	push	r27
    4e1c:	ef 93       	push	r30
    4e1e:	ff 93       	push	r31
    4e20:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <intFunc+0x4>
    4e24:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <intFunc+0x5>
    4e28:	09 95       	icall
    4e2a:	ff 91       	pop	r31
    4e2c:	ef 91       	pop	r30
    4e2e:	bf 91       	pop	r27
    4e30:	af 91       	pop	r26
    4e32:	9f 91       	pop	r25
    4e34:	8f 91       	pop	r24
    4e36:	7f 91       	pop	r23
    4e38:	6f 91       	pop	r22
    4e3a:	5f 91       	pop	r21
    4e3c:	4f 91       	pop	r20
    4e3e:	3f 91       	pop	r19
    4e40:	2f 91       	pop	r18
    4e42:	0f 90       	pop	r0
    4e44:	0f be       	out	0x3f, r0	; 63
    4e46:	0f 90       	pop	r0
    4e48:	1f 90       	pop	r1
    4e4a:	18 95       	reti

00004e4c <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
    4e4c:	1f 92       	push	r1
    4e4e:	0f 92       	push	r0
    4e50:	0f b6       	in	r0, 0x3f	; 63
    4e52:	0f 92       	push	r0
    4e54:	11 24       	eor	r1, r1
    4e56:	2f 93       	push	r18
    4e58:	3f 93       	push	r19
    4e5a:	4f 93       	push	r20
    4e5c:	5f 93       	push	r21
    4e5e:	6f 93       	push	r22
    4e60:	7f 93       	push	r23
    4e62:	8f 93       	push	r24
    4e64:	9f 93       	push	r25
    4e66:	af 93       	push	r26
    4e68:	bf 93       	push	r27
    4e6a:	ef 93       	push	r30
    4e6c:	ff 93       	push	r31
    4e6e:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <intFunc+0x6>
    4e72:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <intFunc+0x7>
    4e76:	09 95       	icall
    4e78:	ff 91       	pop	r31
    4e7a:	ef 91       	pop	r30
    4e7c:	bf 91       	pop	r27
    4e7e:	af 91       	pop	r26
    4e80:	9f 91       	pop	r25
    4e82:	8f 91       	pop	r24
    4e84:	7f 91       	pop	r23
    4e86:	6f 91       	pop	r22
    4e88:	5f 91       	pop	r21
    4e8a:	4f 91       	pop	r20
    4e8c:	3f 91       	pop	r19
    4e8e:	2f 91       	pop	r18
    4e90:	0f 90       	pop	r0
    4e92:	0f be       	out	0x3f, r0	; 63
    4e94:	0f 90       	pop	r0
    4e96:	1f 90       	pop	r1
    4e98:	18 95       	reti

00004e9a <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_4)
    4e9a:	1f 92       	push	r1
    4e9c:	0f 92       	push	r0
    4e9e:	0f b6       	in	r0, 0x3f	; 63
    4ea0:	0f 92       	push	r0
    4ea2:	11 24       	eor	r1, r1
    4ea4:	2f 93       	push	r18
    4ea6:	3f 93       	push	r19
    4ea8:	4f 93       	push	r20
    4eaa:	5f 93       	push	r21
    4eac:	6f 93       	push	r22
    4eae:	7f 93       	push	r23
    4eb0:	8f 93       	push	r24
    4eb2:	9f 93       	push	r25
    4eb4:	af 93       	push	r26
    4eb6:	bf 93       	push	r27
    4eb8:	ef 93       	push	r30
    4eba:	ff 93       	push	r31
    4ebc:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <intFunc+0x8>
    4ec0:	f0 91 34 01 	lds	r31, 0x0134	; 0x800134 <intFunc+0x9>
    4ec4:	09 95       	icall
    4ec6:	ff 91       	pop	r31
    4ec8:	ef 91       	pop	r30
    4eca:	bf 91       	pop	r27
    4ecc:	af 91       	pop	r26
    4ece:	9f 91       	pop	r25
    4ed0:	8f 91       	pop	r24
    4ed2:	7f 91       	pop	r23
    4ed4:	6f 91       	pop	r22
    4ed6:	5f 91       	pop	r21
    4ed8:	4f 91       	pop	r20
    4eda:	3f 91       	pop	r19
    4edc:	2f 91       	pop	r18
    4ede:	0f 90       	pop	r0
    4ee0:	0f be       	out	0x3f, r0	; 63
    4ee2:	0f 90       	pop	r0
    4ee4:	1f 90       	pop	r1
    4ee6:	18 95       	reti

00004ee8 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    4ee8:	1f 92       	push	r1
    4eea:	0f 92       	push	r0
    4eec:	0f b6       	in	r0, 0x3f	; 63
    4eee:	0f 92       	push	r0
    4ef0:	11 24       	eor	r1, r1
    4ef2:	2f 93       	push	r18
    4ef4:	3f 93       	push	r19
    4ef6:	8f 93       	push	r24
    4ef8:	9f 93       	push	r25
    4efa:	af 93       	push	r26
    4efc:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    4efe:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <timer0_millis>
    4f02:	90 91 fe 06 	lds	r25, 0x06FE	; 0x8006fe <timer0_millis+0x1>
    4f06:	a0 91 ff 06 	lds	r26, 0x06FF	; 0x8006ff <timer0_millis+0x2>
    4f0a:	b0 91 00 07 	lds	r27, 0x0700	; 0x800700 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    4f0e:	30 91 fc 06 	lds	r19, 0x06FC	; 0x8006fc <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    4f12:	23 e0       	ldi	r18, 0x03	; 3
    4f14:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    4f16:	2d 37       	cpi	r18, 0x7D	; 125
    4f18:	20 f4       	brcc	.+8      	; 0x4f22 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    4f1a:	01 96       	adiw	r24, 0x01	; 1
    4f1c:	a1 1d       	adc	r26, r1
    4f1e:	b1 1d       	adc	r27, r1
    4f20:	05 c0       	rjmp	.+10     	; 0x4f2c <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    4f22:	26 e8       	ldi	r18, 0x86	; 134
    4f24:	23 0f       	add	r18, r19
		m += 1;
    4f26:	02 96       	adiw	r24, 0x02	; 2
    4f28:	a1 1d       	adc	r26, r1
    4f2a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    4f2c:	20 93 fc 06 	sts	0x06FC, r18	; 0x8006fc <timer0_fract>
	timer0_millis = m;
    4f30:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <timer0_millis>
    4f34:	90 93 fe 06 	sts	0x06FE, r25	; 0x8006fe <timer0_millis+0x1>
    4f38:	a0 93 ff 06 	sts	0x06FF, r26	; 0x8006ff <timer0_millis+0x2>
    4f3c:	b0 93 00 07 	sts	0x0700, r27	; 0x800700 <timer0_millis+0x3>
	timer0_overflow_count++;
    4f40:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <timer0_overflow_count>
    4f44:	90 91 02 07 	lds	r25, 0x0702	; 0x800702 <timer0_overflow_count+0x1>
    4f48:	a0 91 03 07 	lds	r26, 0x0703	; 0x800703 <timer0_overflow_count+0x2>
    4f4c:	b0 91 04 07 	lds	r27, 0x0704	; 0x800704 <timer0_overflow_count+0x3>
    4f50:	01 96       	adiw	r24, 0x01	; 1
    4f52:	a1 1d       	adc	r26, r1
    4f54:	b1 1d       	adc	r27, r1
    4f56:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <timer0_overflow_count>
    4f5a:	90 93 02 07 	sts	0x0702, r25	; 0x800702 <timer0_overflow_count+0x1>
    4f5e:	a0 93 03 07 	sts	0x0703, r26	; 0x800703 <timer0_overflow_count+0x2>
    4f62:	b0 93 04 07 	sts	0x0704, r27	; 0x800704 <timer0_overflow_count+0x3>
}
    4f66:	bf 91       	pop	r27
    4f68:	af 91       	pop	r26
    4f6a:	9f 91       	pop	r25
    4f6c:	8f 91       	pop	r24
    4f6e:	3f 91       	pop	r19
    4f70:	2f 91       	pop	r18
    4f72:	0f 90       	pop	r0
    4f74:	0f be       	out	0x3f, r0	; 63
    4f76:	0f 90       	pop	r0
    4f78:	1f 90       	pop	r1
    4f7a:	18 95       	reti

00004f7c <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    4f7c:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    4f7e:	f8 94       	cli
	m = timer0_millis;
    4f80:	60 91 fd 06 	lds	r22, 0x06FD	; 0x8006fd <timer0_millis>
    4f84:	70 91 fe 06 	lds	r23, 0x06FE	; 0x8006fe <timer0_millis+0x1>
    4f88:	80 91 ff 06 	lds	r24, 0x06FF	; 0x8006ff <timer0_millis+0x2>
    4f8c:	90 91 00 07 	lds	r25, 0x0700	; 0x800700 <timer0_millis+0x3>
	SREG = oldSREG;
    4f90:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    4f92:	08 95       	ret

00004f94 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    4f94:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    4f96:	f8 94       	cli
	m = timer0_overflow_count;
    4f98:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <timer0_overflow_count>
    4f9c:	90 91 02 07 	lds	r25, 0x0702	; 0x800702 <timer0_overflow_count+0x1>
    4fa0:	a0 91 03 07 	lds	r26, 0x0703	; 0x800703 <timer0_overflow_count+0x2>
    4fa4:	b0 91 04 07 	lds	r27, 0x0704	; 0x800704 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    4fa8:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    4faa:	a8 9b       	sbis	0x15, 0	; 21
    4fac:	05 c0       	rjmp	.+10     	; 0x4fb8 <micros+0x24>
    4fae:	2f 3f       	cpi	r18, 0xFF	; 255
    4fb0:	19 f0       	breq	.+6      	; 0x4fb8 <micros+0x24>
		m++;
    4fb2:	01 96       	adiw	r24, 0x01	; 1
    4fb4:	a1 1d       	adc	r26, r1
    4fb6:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    4fb8:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    4fba:	ba 2f       	mov	r27, r26
    4fbc:	a9 2f       	mov	r26, r25
    4fbe:	98 2f       	mov	r25, r24
    4fc0:	88 27       	eor	r24, r24
    4fc2:	82 0f       	add	r24, r18
    4fc4:	91 1d       	adc	r25, r1
    4fc6:	a1 1d       	adc	r26, r1
    4fc8:	b1 1d       	adc	r27, r1
    4fca:	bc 01       	movw	r22, r24
    4fcc:	cd 01       	movw	r24, r26
    4fce:	42 e0       	ldi	r20, 0x02	; 2
    4fd0:	66 0f       	add	r22, r22
    4fd2:	77 1f       	adc	r23, r23
    4fd4:	88 1f       	adc	r24, r24
    4fd6:	99 1f       	adc	r25, r25
    4fd8:	4a 95       	dec	r20
    4fda:	d1 f7       	brne	.-12     	; 0x4fd0 <micros+0x3c>
}
    4fdc:	08 95       	ret

00004fde <delay>:

void delay(unsigned long ms)
{
    4fde:	8f 92       	push	r8
    4fe0:	9f 92       	push	r9
    4fe2:	af 92       	push	r10
    4fe4:	bf 92       	push	r11
    4fe6:	cf 92       	push	r12
    4fe8:	df 92       	push	r13
    4fea:	ef 92       	push	r14
    4fec:	ff 92       	push	r15
    4fee:	6b 01       	movw	r12, r22
    4ff0:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    4ff2:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <micros>
    4ff6:	4b 01       	movw	r8, r22
    4ff8:	5c 01       	movw	r10, r24

	while (ms > 0) {
    4ffa:	c1 14       	cp	r12, r1
    4ffc:	d1 04       	cpc	r13, r1
    4ffe:	e1 04       	cpc	r14, r1
    5000:	f1 04       	cpc	r15, r1
    5002:	01 f1       	breq	.+64     	; 0x5044 <delay+0x66>
		yield();
    5004:	0e 94 58 2b 	call	0x56b0	; 0x56b0 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    5008:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <micros>
    500c:	dc 01       	movw	r26, r24
    500e:	cb 01       	movw	r24, r22
    5010:	88 19       	sub	r24, r8
    5012:	99 09       	sbc	r25, r9
    5014:	aa 09       	sbc	r26, r10
    5016:	bb 09       	sbc	r27, r11
    5018:	88 3e       	cpi	r24, 0xE8	; 232
    501a:	93 40       	sbci	r25, 0x03	; 3
    501c:	a1 05       	cpc	r26, r1
    501e:	b1 05       	cpc	r27, r1
    5020:	60 f3       	brcs	.-40     	; 0x4ffa <delay+0x1c>
			ms--;
    5022:	21 e0       	ldi	r18, 0x01	; 1
    5024:	c2 1a       	sub	r12, r18
    5026:	d1 08       	sbc	r13, r1
    5028:	e1 08       	sbc	r14, r1
    502a:	f1 08       	sbc	r15, r1
			start += 1000;
    502c:	88 ee       	ldi	r24, 0xE8	; 232
    502e:	88 0e       	add	r8, r24
    5030:	83 e0       	ldi	r24, 0x03	; 3
    5032:	98 1e       	adc	r9, r24
    5034:	a1 1c       	adc	r10, r1
    5036:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    5038:	c1 14       	cp	r12, r1
    503a:	d1 04       	cpc	r13, r1
    503c:	e1 04       	cpc	r14, r1
    503e:	f1 04       	cpc	r15, r1
    5040:	19 f7       	brne	.-58     	; 0x5008 <delay+0x2a>
    5042:	db cf       	rjmp	.-74     	; 0x4ffa <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    5044:	ff 90       	pop	r15
    5046:	ef 90       	pop	r14
    5048:	df 90       	pop	r13
    504a:	cf 90       	pop	r12
    504c:	bf 90       	pop	r11
    504e:	af 90       	pop	r10
    5050:	9f 90       	pop	r9
    5052:	8f 90       	pop	r8
    5054:	08 95       	ret

00005056 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    5056:	82 30       	cpi	r24, 0x02	; 2
    5058:	91 05       	cpc	r25, r1
    505a:	38 f0       	brcs	.+14     	; 0x506a <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    505c:	88 0f       	add	r24, r24
    505e:	99 1f       	adc	r25, r25
    5060:	88 0f       	add	r24, r24
    5062:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    5064:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    5066:	01 97       	sbiw	r24, 0x01	; 1
    5068:	f1 f7       	brne	.-4      	; 0x5066 <delayMicroseconds+0x10>
    506a:	08 95       	ret

0000506c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    506c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    506e:	84 b5       	in	r24, 0x24	; 36
    5070:	82 60       	ori	r24, 0x02	; 2
    5072:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    5074:	84 b5       	in	r24, 0x24	; 36
    5076:	81 60       	ori	r24, 0x01	; 1
    5078:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    507a:	85 b5       	in	r24, 0x25	; 37
    507c:	82 60       	ori	r24, 0x02	; 2
    507e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    5080:	85 b5       	in	r24, 0x25	; 37
    5082:	81 60       	ori	r24, 0x01	; 1
    5084:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    5086:	ee e6       	ldi	r30, 0x6E	; 110
    5088:	f0 e0       	ldi	r31, 0x00	; 0
    508a:	80 81       	ld	r24, Z
    508c:	81 60       	ori	r24, 0x01	; 1
    508e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    5090:	e1 e8       	ldi	r30, 0x81	; 129
    5092:	f0 e0       	ldi	r31, 0x00	; 0
    5094:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    5096:	80 81       	ld	r24, Z
    5098:	82 60       	ori	r24, 0x02	; 2
    509a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    509c:	80 81       	ld	r24, Z
    509e:	81 60       	ori	r24, 0x01	; 1
    50a0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    50a2:	e0 e8       	ldi	r30, 0x80	; 128
    50a4:	f0 e0       	ldi	r31, 0x00	; 0
    50a6:	80 81       	ld	r24, Z
    50a8:	81 60       	ori	r24, 0x01	; 1
    50aa:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    50ac:	e1 e9       	ldi	r30, 0x91	; 145
    50ae:	f0 e0       	ldi	r31, 0x00	; 0
    50b0:	80 81       	ld	r24, Z
    50b2:	82 60       	ori	r24, 0x02	; 2
    50b4:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    50b6:	80 81       	ld	r24, Z
    50b8:	81 60       	ori	r24, 0x01	; 1
    50ba:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    50bc:	e0 e9       	ldi	r30, 0x90	; 144
    50be:	f0 e0       	ldi	r31, 0x00	; 0
    50c0:	80 81       	ld	r24, Z
    50c2:	81 60       	ori	r24, 0x01	; 1
    50c4:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
    50c6:	e1 ec       	ldi	r30, 0xC1	; 193
    50c8:	f0 e0       	ldi	r31, 0x00	; 0
    50ca:	80 81       	ld	r24, Z
    50cc:	84 60       	ori	r24, 0x04	; 4
    50ce:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
    50d0:	80 81       	ld	r24, Z
    50d2:	82 60       	ori	r24, 0x02	; 2
    50d4:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    50d6:	80 81       	ld	r24, Z
    50d8:	81 60       	ori	r24, 0x01	; 1
    50da:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
    50dc:	e3 ec       	ldi	r30, 0xC3	; 195
    50de:	f0 e0       	ldi	r31, 0x00	; 0
    50e0:	80 81       	ld	r24, Z
    50e2:	81 60       	ori	r24, 0x01	; 1
    50e4:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
    50e6:	e0 ec       	ldi	r30, 0xC0	; 192
    50e8:	f0 e0       	ldi	r31, 0x00	; 0
    50ea:	80 81       	ld	r24, Z
    50ec:	82 60       	ori	r24, 0x02	; 2
    50ee:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
    50f0:	e2 ec       	ldi	r30, 0xC2	; 194
    50f2:	f0 e0       	ldi	r31, 0x00	; 0
    50f4:	80 81       	ld	r24, Z
    50f6:	81 60       	ori	r24, 0x01	; 1
    50f8:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    50fa:	ea e7       	ldi	r30, 0x7A	; 122
    50fc:	f0 e0       	ldi	r31, 0x00	; 0
    50fe:	80 81       	ld	r24, Z
    5100:	84 60       	ori	r24, 0x04	; 4
    5102:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    5104:	80 81       	ld	r24, Z
    5106:	82 60       	ori	r24, 0x02	; 2
    5108:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    510a:	80 81       	ld	r24, Z
    510c:	81 60       	ori	r24, 0x01	; 1
    510e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    5110:	80 81       	ld	r24, Z
    5112:	80 68       	ori	r24, 0x80	; 128
    5114:	80 83       	st	Z, r24
    5116:	08 95       	ret

00005118 <analogRead>:
{
	uint8_t low, high;

#if defined(analogPinToChannel)
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
    5118:	82 31       	cpi	r24, 0x12	; 18
    511a:	08 f0       	brcs	.+2      	; 0x511e <analogRead+0x6>
    511c:	82 51       	subi	r24, 0x12	; 18
#endif
	pin = analogPinToChannel(pin);
    511e:	e8 2f       	mov	r30, r24
    5120:	f0 e0       	ldi	r31, 0x00	; 0
    5122:	e3 5a       	subi	r30, 0xA3	; 163
    5124:	fe 4f       	sbci	r31, 0xFE	; 254
    5126:	e4 91       	lpm	r30, Z
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    5128:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    512c:	e3 fb       	bst	r30, 3
    512e:	22 27       	eor	r18, r18
    5130:	20 f9       	bld	r18, 0
    5132:	30 e0       	ldi	r19, 0x00	; 0
    5134:	95 e0       	ldi	r25, 0x05	; 5
    5136:	22 0f       	add	r18, r18
    5138:	33 1f       	adc	r19, r19
    513a:	9a 95       	dec	r25
    513c:	e1 f7       	brne	.-8      	; 0x5136 <analogRead+0x1e>
    513e:	8f 7d       	andi	r24, 0xDF	; 223
    5140:	28 2b       	or	r18, r24
    5142:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    5146:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <analog_reference>
    514a:	20 e4       	ldi	r18, 0x40	; 64
    514c:	82 9f       	mul	r24, r18
    514e:	c0 01       	movw	r24, r0
    5150:	11 24       	eor	r1, r1
    5152:	e7 70       	andi	r30, 0x07	; 7
    5154:	e8 2b       	or	r30, r24
    5156:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    515a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    515e:	80 64       	ori	r24, 0x40	; 64
    5160:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    5164:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    5168:	86 fd       	sbrc	r24, 6
    516a:	fc cf       	rjmp	.-8      	; 0x5164 <analogRead+0x4c>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    516c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    5170:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    5174:	90 e0       	ldi	r25, 0x00	; 0
}
    5176:	92 2b       	or	r25, r18
    5178:	08 95       	ret

0000517a <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    517a:	1f 93       	push	r17
    517c:	cf 93       	push	r28
    517e:	df 93       	push	r29
    5180:	18 2f       	mov	r17, r24
    5182:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    5184:	61 e0       	ldi	r22, 0x01	; 1
    5186:	0e 94 92 29 	call	0x5324	; 0x5324 <pinMode>
	if (val == 0)
    518a:	20 97       	sbiw	r28, 0x00	; 0
    518c:	11 f4       	brne	.+4      	; 0x5192 <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    518e:	60 e0       	ldi	r22, 0x00	; 0
    5190:	04 c0       	rjmp	.+8      	; 0x519a <analogWrite+0x20>
	}
	else if (val == 255)
    5192:	cf 3f       	cpi	r28, 0xFF	; 255
    5194:	d1 05       	cpc	r29, r1
    5196:	39 f4       	brne	.+14     	; 0x51a6 <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    5198:	61 e0       	ldi	r22, 0x01	; 1
    519a:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    519c:	df 91       	pop	r29
    519e:	cf 91       	pop	r28
    51a0:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    51a2:	0c 94 ce 29 	jmp	0x539c	; 0x539c <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    51a6:	e1 2f       	mov	r30, r17
    51a8:	f0 e0       	ldi	r31, 0x00	; 0
    51aa:	e7 59       	subi	r30, 0x97	; 151
    51ac:	fe 4f       	sbci	r31, 0xFE	; 254
    51ae:	e4 91       	lpm	r30, Z
    51b0:	8e 2f       	mov	r24, r30
    51b2:	90 e0       	ldi	r25, 0x00	; 0
    51b4:	fc 01       	movw	r30, r24
    51b6:	31 97       	sbiw	r30, 0x01	; 1
    51b8:	ef 30       	cpi	r30, 0x0F	; 15
    51ba:	f1 05       	cpc	r31, r1
    51bc:	08 f0       	brcs	.+2      	; 0x51c0 <analogWrite+0x46>
    51be:	6c c0       	rjmp	.+216    	; 0x5298 <analogWrite+0x11e>
    51c0:	ea 5a       	subi	r30, 0xAA	; 170
    51c2:	ff 4f       	sbci	r31, 0xFF	; 255
    51c4:	0c 94 4c 2c 	jmp	0x5898	; 0x5898 <__tablejump2__>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    51c8:	84 b5       	in	r24, 0x24	; 36
    51ca:	80 68       	ori	r24, 0x80	; 128
    51cc:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    51ce:	c7 bd       	out	0x27, r28	; 39
				break;
    51d0:	68 c0       	rjmp	.+208    	; 0x52a2 <analogWrite+0x128>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    51d2:	84 b5       	in	r24, 0x24	; 36
    51d4:	80 62       	ori	r24, 0x20	; 32
    51d6:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    51d8:	c8 bd       	out	0x28, r28	; 40
				break;
    51da:	63 c0       	rjmp	.+198    	; 0x52a2 <analogWrite+0x128>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    51dc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    51e0:	80 68       	ori	r24, 0x80	; 128
    51e2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1A = val; // set pwm duty
    51e6:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    51ea:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				break;
    51ee:	59 c0       	rjmp	.+178    	; 0x52a2 <analogWrite+0x128>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    51f0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    51f4:	80 62       	ori	r24, 0x20	; 32
    51f6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1B = val; // set pwm duty
    51fa:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    51fe:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				break;
    5202:	4f c0       	rjmp	.+158    	; 0x52a2 <analogWrite+0x128>
			#endif

			#if defined(TCCR1A) && defined(COM1C1)
			case TIMER1C:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1C1);
    5204:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5208:	88 60       	ori	r24, 0x08	; 8
    520a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1C = val; // set pwm duty
    520e:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <__TEXT_REGION_LENGTH__+0x7e008d>
    5212:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
				break;
    5216:	45 c0       	rjmp	.+138    	; 0x52a2 <analogWrite+0x128>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
    5218:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    521c:	80 68       	ori	r24, 0x80	; 128
    521e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
				OCR3A = val; // set pwm duty
    5222:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    5226:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
				break;
    522a:	3b c0       	rjmp	.+118    	; 0x52a2 <analogWrite+0x128>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
    522c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    5230:	80 62       	ori	r24, 0x20	; 32
    5232:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
				OCR3B = val; // set pwm duty
    5236:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    523a:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
				break;
    523e:	31 c0       	rjmp	.+98     	; 0x52a2 <analogWrite+0x128>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
    5240:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    5244:	88 60       	ori	r24, 0x08	; 8
    5246:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
				OCR3C = val; // set pwm duty
    524a:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
    524e:	c0 93 9c 00 	sts	0x009C, r28	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
				break;
    5252:	27 c0       	rjmp	.+78     	; 0x52a2 <analogWrite+0x128>
			#endif

			#if defined(TCCR4A)
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
    5254:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5258:	80 68       	ori	r24, 0x80	; 128
    525a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
				#if defined(COM4A0)		// only used on 32U4
				cbi(TCCR4A, COM4A0);
    525e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5262:	8f 7b       	andi	r24, 0xBF	; 191
    5264:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
				#endif
				OCR4A = val;	// set pwm duty
    5268:	c0 93 cf 00 	sts	0x00CF, r28	; 0x8000cf <__TEXT_REGION_LENGTH__+0x7e00cf>
				break;
    526c:	1a c0       	rjmp	.+52     	; 0x52a2 <analogWrite+0x128>
			#endif
			
			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
    526e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5272:	80 62       	ori	r24, 0x20	; 32
    5274:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
				OCR4B = val; // set pwm duty
    5278:	c0 93 d0 00 	sts	0x00D0, r28	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
				break;
    527c:	12 c0       	rjmp	.+36     	; 0x52a2 <analogWrite+0x128>
			#endif
				
			#if defined(TCCR4C) && defined(COM4D1)
			case TIMER4D:				
				// connect pwm to pin on timer 4, channel D
				sbi(TCCR4C, COM4D1);
    527e:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    5282:	88 60       	ori	r24, 0x08	; 8
    5284:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
				#if defined(COM4D0)		// only used on 32U4
				cbi(TCCR4C, COM4D0);
    5288:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    528c:	8b 7f       	andi	r24, 0xFB	; 251
    528e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
				#endif
				OCR4D = val;	// set pwm duty
    5292:	c0 93 d2 00 	sts	0x00D2, r28	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
				break;
    5296:	05 c0       	rjmp	.+10     	; 0x52a2 <analogWrite+0x128>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    5298:	c0 38       	cpi	r28, 0x80	; 128
    529a:	d1 05       	cpc	r29, r1
    529c:	0c f0       	brlt	.+2      	; 0x52a0 <analogWrite+0x126>
    529e:	7c cf       	rjmp	.-264    	; 0x5198 <analogWrite+0x1e>
    52a0:	76 cf       	rjmp	.-276    	; 0x518e <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    52a2:	df 91       	pop	r29
    52a4:	cf 91       	pop	r28
    52a6:	1f 91       	pop	r17
    52a8:	08 95       	ret

000052aa <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    52aa:	90 e0       	ldi	r25, 0x00	; 0
    52ac:	fc 01       	movw	r30, r24
    52ae:	31 97       	sbiw	r30, 0x01	; 1
    52b0:	ef 30       	cpi	r30, 0x0F	; 15
    52b2:	f1 05       	cpc	r31, r1
    52b4:	b0 f5       	brcc	.+108    	; 0x5322 <turnOffPWM+0x78>
    52b6:	eb 59       	subi	r30, 0x9B	; 155
    52b8:	ff 4f       	sbci	r31, 0xFF	; 255
    52ba:	0c 94 4c 2c 	jmp	0x5898	; 0x5898 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    52be:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    52c2:	8f 77       	andi	r24, 0x7F	; 127
    52c4:	03 c0       	rjmp	.+6      	; 0x52cc <turnOffPWM+0x22>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    52c6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    52ca:	8f 7d       	andi	r24, 0xDF	; 223
    52cc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    52d0:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    52d2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    52d6:	87 7f       	andi	r24, 0xF7	; 247
    52d8:	f9 cf       	rjmp	.-14     	; 0x52cc <turnOffPWM+0x22>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    52da:	84 b5       	in	r24, 0x24	; 36
    52dc:	8f 77       	andi	r24, 0x7F	; 127
    52de:	02 c0       	rjmp	.+4      	; 0x52e4 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    52e0:	84 b5       	in	r24, 0x24	; 36
    52e2:	8f 7d       	andi	r24, 0xDF	; 223
    52e4:	84 bd       	out	0x24, r24	; 36
    52e6:	08 95       	ret
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    52e8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    52ec:	8f 77       	andi	r24, 0x7F	; 127
    52ee:	07 c0       	rjmp	.+14     	; 0x52fe <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    52f0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    52f4:	8f 7d       	andi	r24, 0xDF	; 223
    52f6:	03 c0       	rjmp	.+6      	; 0x52fe <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    52f8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    52fc:	87 7f       	andi	r24, 0xF7	; 247
    52fe:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    5302:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    5304:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5308:	8f 77       	andi	r24, 0x7F	; 127
    530a:	03 c0       	rjmp	.+6      	; 0x5312 <turnOffPWM+0x68>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    530c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5310:	8f 7d       	andi	r24, 0xDF	; 223
    5312:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5316:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
		#endif			
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
    5318:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    531c:	87 7f       	andi	r24, 0xF7	; 247
    531e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    5322:	08 95       	ret

00005324 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    5324:	cf 93       	push	r28
    5326:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    5328:	90 e0       	ldi	r25, 0x00	; 0
    532a:	fc 01       	movw	r30, r24
    532c:	e8 57       	subi	r30, 0x78	; 120
    532e:	fe 4f       	sbci	r31, 0xFE	; 254
    5330:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    5332:	fc 01       	movw	r30, r24
    5334:	e9 55       	subi	r30, 0x59	; 89
    5336:	fe 4f       	sbci	r31, 0xFE	; 254
    5338:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    533a:	88 23       	and	r24, r24
    533c:	61 f1       	breq	.+88     	; 0x5396 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    533e:	90 e0       	ldi	r25, 0x00	; 0
    5340:	88 0f       	add	r24, r24
    5342:	99 1f       	adc	r25, r25
    5344:	fc 01       	movw	r30, r24
    5346:	ee 51       	subi	r30, 0x1E	; 30
    5348:	fe 4f       	sbci	r31, 0xFE	; 254
    534a:	c5 91       	lpm	r28, Z+
    534c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    534e:	fc 01       	movw	r30, r24
    5350:	ec 52       	subi	r30, 0x2C	; 44
    5352:	fe 4f       	sbci	r31, 0xFE	; 254
    5354:	a5 91       	lpm	r26, Z+
    5356:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    5358:	61 11       	cpse	r22, r1
    535a:	09 c0       	rjmp	.+18     	; 0x536e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    535c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    535e:	f8 94       	cli
		*reg &= ~bit;
    5360:	88 81       	ld	r24, Y
    5362:	20 95       	com	r18
    5364:	82 23       	and	r24, r18
    5366:	88 83       	st	Y, r24
		*out &= ~bit;
    5368:	ec 91       	ld	r30, X
    536a:	2e 23       	and	r18, r30
    536c:	0b c0       	rjmp	.+22     	; 0x5384 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    536e:	62 30       	cpi	r22, 0x02	; 2
    5370:	61 f4       	brne	.+24     	; 0x538a <pinMode+0x66>
		uint8_t oldSREG = SREG;
    5372:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5374:	f8 94       	cli
		*reg &= ~bit;
    5376:	88 81       	ld	r24, Y
    5378:	32 2f       	mov	r19, r18
    537a:	30 95       	com	r19
    537c:	83 23       	and	r24, r19
    537e:	88 83       	st	Y, r24
		*out |= bit;
    5380:	ec 91       	ld	r30, X
    5382:	2e 2b       	or	r18, r30
    5384:	2c 93       	st	X, r18
		SREG = oldSREG;
    5386:	9f bf       	out	0x3f, r25	; 63
    5388:	06 c0       	rjmp	.+12     	; 0x5396 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    538a:	8f b7       	in	r24, 0x3f	; 63
                cli();
    538c:	f8 94       	cli
		*reg |= bit;
    538e:	e8 81       	ld	r30, Y
    5390:	2e 2b       	or	r18, r30
    5392:	28 83       	st	Y, r18
		SREG = oldSREG;
    5394:	8f bf       	out	0x3f, r24	; 63
	}
}
    5396:	df 91       	pop	r29
    5398:	cf 91       	pop	r28
    539a:	08 95       	ret

0000539c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    539c:	1f 93       	push	r17
    539e:	cf 93       	push	r28
    53a0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    53a2:	28 2f       	mov	r18, r24
    53a4:	30 e0       	ldi	r19, 0x00	; 0
    53a6:	f9 01       	movw	r30, r18
    53a8:	e7 59       	subi	r30, 0x97	; 151
    53aa:	fe 4f       	sbci	r31, 0xFE	; 254
    53ac:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    53ae:	f9 01       	movw	r30, r18
    53b0:	e8 57       	subi	r30, 0x78	; 120
    53b2:	fe 4f       	sbci	r31, 0xFE	; 254
    53b4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    53b6:	f9 01       	movw	r30, r18
    53b8:	e9 55       	subi	r30, 0x59	; 89
    53ba:	fe 4f       	sbci	r31, 0xFE	; 254
    53bc:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    53be:	cc 23       	and	r28, r28
    53c0:	c1 f0       	breq	.+48     	; 0x53f2 <digitalWrite+0x56>
    53c2:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    53c4:	81 11       	cpse	r24, r1
    53c6:	0e 94 55 29 	call	0x52aa	; 0x52aa <turnOffPWM>

	out = portOutputRegister(port);
    53ca:	ec 2f       	mov	r30, r28
    53cc:	f0 e0       	ldi	r31, 0x00	; 0
    53ce:	ee 0f       	add	r30, r30
    53d0:	ff 1f       	adc	r31, r31
    53d2:	ec 52       	subi	r30, 0x2C	; 44
    53d4:	fe 4f       	sbci	r31, 0xFE	; 254
    53d6:	a5 91       	lpm	r26, Z+
    53d8:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    53da:	9f b7       	in	r25, 0x3f	; 63
	cli();
    53dc:	f8 94       	cli

	if (val == LOW) {
    53de:	11 11       	cpse	r17, r1
    53e0:	04 c0       	rjmp	.+8      	; 0x53ea <digitalWrite+0x4e>
		*out &= ~bit;
    53e2:	8c 91       	ld	r24, X
    53e4:	d0 95       	com	r29
    53e6:	d8 23       	and	r29, r24
    53e8:	02 c0       	rjmp	.+4      	; 0x53ee <digitalWrite+0x52>
	} else {
		*out |= bit;
    53ea:	ec 91       	ld	r30, X
    53ec:	de 2b       	or	r29, r30
    53ee:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    53f0:	9f bf       	out	0x3f, r25	; 63
}
    53f2:	df 91       	pop	r29
    53f4:	cf 91       	pop	r28
    53f6:	1f 91       	pop	r17
    53f8:	08 95       	ret

000053fa <digitalRead>:

int digitalRead(uint8_t pin)
{
    53fa:	cf 93       	push	r28
    53fc:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    53fe:	28 2f       	mov	r18, r24
    5400:	30 e0       	ldi	r19, 0x00	; 0
    5402:	f9 01       	movw	r30, r18
    5404:	e7 59       	subi	r30, 0x97	; 151
    5406:	fe 4f       	sbci	r31, 0xFE	; 254
    5408:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    540a:	f9 01       	movw	r30, r18
    540c:	e8 57       	subi	r30, 0x78	; 120
    540e:	fe 4f       	sbci	r31, 0xFE	; 254
    5410:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    5412:	f9 01       	movw	r30, r18
    5414:	e9 55       	subi	r30, 0x59	; 89
    5416:	fe 4f       	sbci	r31, 0xFE	; 254
    5418:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    541a:	cc 23       	and	r28, r28
    541c:	91 f0       	breq	.+36     	; 0x5442 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    541e:	81 11       	cpse	r24, r1
    5420:	0e 94 55 29 	call	0x52aa	; 0x52aa <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    5424:	ec 2f       	mov	r30, r28
    5426:	f0 e0       	ldi	r31, 0x00	; 0
    5428:	ee 0f       	add	r30, r30
    542a:	ff 1f       	adc	r31, r31
    542c:	ea 53       	subi	r30, 0x3A	; 58
    542e:	fe 4f       	sbci	r31, 0xFE	; 254
    5430:	a5 91       	lpm	r26, Z+
    5432:	b4 91       	lpm	r27, Z
    5434:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    5436:	ed 23       	and	r30, r29
    5438:	81 e0       	ldi	r24, 0x01	; 1
    543a:	90 e0       	ldi	r25, 0x00	; 0
    543c:	21 f4       	brne	.+8      	; 0x5446 <digitalRead+0x4c>
    543e:	80 e0       	ldi	r24, 0x00	; 0
    5440:	02 c0       	rjmp	.+4      	; 0x5446 <digitalRead+0x4c>
    5442:	80 e0       	ldi	r24, 0x00	; 0
    5444:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    5446:	df 91       	pop	r29
    5448:	cf 91       	pop	r28
    544a:	08 95       	ret

0000544c <_ZNK6String14StringIfHelperEv>:
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
	return indexOf(c, 0);
    544c:	08 95       	ret

0000544e <_ZN6StringD1Ev>:
    544e:	fc 01       	movw	r30, r24
    5450:	80 81       	ld	r24, Z
    5452:	91 81       	ldd	r25, Z+1	; 0x01
    5454:	0c 94 fe 2c 	jmp	0x59fc	; 0x59fc <free>

00005458 <_ZN6String10invalidateEv>:
    5458:	cf 93       	push	r28
    545a:	df 93       	push	r29
    545c:	ec 01       	movw	r28, r24
    545e:	88 81       	ld	r24, Y
    5460:	99 81       	ldd	r25, Y+1	; 0x01
    5462:	00 97       	sbiw	r24, 0x00	; 0
    5464:	11 f0       	breq	.+4      	; 0x546a <_ZN6String10invalidateEv+0x12>
    5466:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <free>
    546a:	19 82       	std	Y+1, r1	; 0x01
    546c:	18 82       	st	Y, r1
    546e:	1d 82       	std	Y+5, r1	; 0x05
    5470:	1c 82       	std	Y+4, r1	; 0x04
    5472:	1b 82       	std	Y+3, r1	; 0x03
    5474:	1a 82       	std	Y+2, r1	; 0x02
    5476:	df 91       	pop	r29
    5478:	cf 91       	pop	r28
    547a:	08 95       	ret

0000547c <_ZN6String12changeBufferEj>:
    547c:	0f 93       	push	r16
    547e:	1f 93       	push	r17
    5480:	cf 93       	push	r28
    5482:	df 93       	push	r29
    5484:	ec 01       	movw	r28, r24
    5486:	8b 01       	movw	r16, r22
    5488:	6f 5f       	subi	r22, 0xFF	; 255
    548a:	7f 4f       	sbci	r23, 0xFF	; 255
    548c:	88 81       	ld	r24, Y
    548e:	99 81       	ldd	r25, Y+1	; 0x01
    5490:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <realloc>
    5494:	00 97       	sbiw	r24, 0x00	; 0
    5496:	31 f0       	breq	.+12     	; 0x54a4 <_ZN6String12changeBufferEj+0x28>
    5498:	99 83       	std	Y+1, r25	; 0x01
    549a:	88 83       	st	Y, r24
    549c:	1b 83       	std	Y+3, r17	; 0x03
    549e:	0a 83       	std	Y+2, r16	; 0x02
    54a0:	81 e0       	ldi	r24, 0x01	; 1
    54a2:	01 c0       	rjmp	.+2      	; 0x54a6 <_ZN6String12changeBufferEj+0x2a>
    54a4:	80 e0       	ldi	r24, 0x00	; 0
    54a6:	df 91       	pop	r29
    54a8:	cf 91       	pop	r28
    54aa:	1f 91       	pop	r17
    54ac:	0f 91       	pop	r16
    54ae:	08 95       	ret

000054b0 <_ZN6String7reserveEj>:
    54b0:	cf 93       	push	r28
    54b2:	df 93       	push	r29
    54b4:	ec 01       	movw	r28, r24
    54b6:	88 81       	ld	r24, Y
    54b8:	99 81       	ldd	r25, Y+1	; 0x01
    54ba:	89 2b       	or	r24, r25
    54bc:	29 f0       	breq	.+10     	; 0x54c8 <_ZN6String7reserveEj+0x18>
    54be:	8a 81       	ldd	r24, Y+2	; 0x02
    54c0:	9b 81       	ldd	r25, Y+3	; 0x03
    54c2:	86 17       	cp	r24, r22
    54c4:	97 07       	cpc	r25, r23
    54c6:	60 f4       	brcc	.+24     	; 0x54e0 <_ZN6String7reserveEj+0x30>
    54c8:	ce 01       	movw	r24, r28
    54ca:	0e 94 3e 2a 	call	0x547c	; 0x547c <_ZN6String12changeBufferEj>
    54ce:	88 23       	and	r24, r24
    54d0:	41 f0       	breq	.+16     	; 0x54e2 <_ZN6String7reserveEj+0x32>
    54d2:	8c 81       	ldd	r24, Y+4	; 0x04
    54d4:	9d 81       	ldd	r25, Y+5	; 0x05
    54d6:	89 2b       	or	r24, r25
    54d8:	19 f4       	brne	.+6      	; 0x54e0 <_ZN6String7reserveEj+0x30>
    54da:	e8 81       	ld	r30, Y
    54dc:	f9 81       	ldd	r31, Y+1	; 0x01
    54de:	10 82       	st	Z, r1
    54e0:	81 e0       	ldi	r24, 0x01	; 1
    54e2:	df 91       	pop	r29
    54e4:	cf 91       	pop	r28
    54e6:	08 95       	ret

000054e8 <_ZN6String4copyEPKcj>:
    54e8:	ef 92       	push	r14
    54ea:	ff 92       	push	r15
    54ec:	0f 93       	push	r16
    54ee:	1f 93       	push	r17
    54f0:	cf 93       	push	r28
    54f2:	df 93       	push	r29
    54f4:	ec 01       	movw	r28, r24
    54f6:	7b 01       	movw	r14, r22
    54f8:	8a 01       	movw	r16, r20
    54fa:	ba 01       	movw	r22, r20
    54fc:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <_ZN6String7reserveEj>
    5500:	81 11       	cpse	r24, r1
    5502:	04 c0       	rjmp	.+8      	; 0x550c <_ZN6String4copyEPKcj+0x24>
    5504:	ce 01       	movw	r24, r28
    5506:	0e 94 2c 2a 	call	0x5458	; 0x5458 <_ZN6String10invalidateEv>
    550a:	07 c0       	rjmp	.+14     	; 0x551a <_ZN6String4copyEPKcj+0x32>
    550c:	1d 83       	std	Y+5, r17	; 0x05
    550e:	0c 83       	std	Y+4, r16	; 0x04
    5510:	b7 01       	movw	r22, r14
    5512:	88 81       	ld	r24, Y
    5514:	99 81       	ldd	r25, Y+1	; 0x01
    5516:	0e 94 82 2e 	call	0x5d04	; 0x5d04 <strcpy>
    551a:	ce 01       	movw	r24, r28
    551c:	df 91       	pop	r29
    551e:	cf 91       	pop	r28
    5520:	1f 91       	pop	r17
    5522:	0f 91       	pop	r16
    5524:	ff 90       	pop	r15
    5526:	ef 90       	pop	r14
    5528:	08 95       	ret

0000552a <_ZN6StringC1EPKc>:
    552a:	fc 01       	movw	r30, r24
    552c:	11 82       	std	Z+1, r1	; 0x01
    552e:	10 82       	st	Z, r1
    5530:	13 82       	std	Z+3, r1	; 0x03
    5532:	12 82       	std	Z+2, r1	; 0x02
    5534:	15 82       	std	Z+5, r1	; 0x05
    5536:	14 82       	std	Z+4, r1	; 0x04
    5538:	61 15       	cp	r22, r1
    553a:	71 05       	cpc	r23, r1
    553c:	51 f0       	breq	.+20     	; 0x5552 <_ZN6StringC1EPKc+0x28>
    553e:	fb 01       	movw	r30, r22
    5540:	01 90       	ld	r0, Z+
    5542:	00 20       	and	r0, r0
    5544:	e9 f7       	brne	.-6      	; 0x5540 <_ZN6StringC1EPKc+0x16>
    5546:	31 97       	sbiw	r30, 0x01	; 1
    5548:	af 01       	movw	r20, r30
    554a:	46 1b       	sub	r20, r22
    554c:	57 0b       	sbc	r21, r23
    554e:	0c 94 74 2a 	jmp	0x54e8	; 0x54e8 <_ZN6String4copyEPKcj>
    5552:	08 95       	ret

00005554 <_ZN6String4moveERS_>:
    5554:	0f 93       	push	r16
    5556:	1f 93       	push	r17
    5558:	cf 93       	push	r28
    555a:	df 93       	push	r29
    555c:	8c 01       	movw	r16, r24
    555e:	eb 01       	movw	r28, r22
    5560:	fc 01       	movw	r30, r24
    5562:	80 81       	ld	r24, Z
    5564:	91 81       	ldd	r25, Z+1	; 0x01
    5566:	00 97       	sbiw	r24, 0x00	; 0
    5568:	d1 f0       	breq	.+52     	; 0x559e <_ZN6String4moveERS_+0x4a>
    556a:	68 81       	ld	r22, Y
    556c:	79 81       	ldd	r23, Y+1	; 0x01
    556e:	61 15       	cp	r22, r1
    5570:	71 05       	cpc	r23, r1
    5572:	99 f0       	breq	.+38     	; 0x559a <_ZN6String4moveERS_+0x46>
    5574:	26 e2       	ldi	r18, 0x26	; 38
    5576:	3a e2       	ldi	r19, 0x2A	; 42
    5578:	23 2b       	or	r18, r19
    557a:	79 f0       	breq	.+30     	; 0x559a <_ZN6String4moveERS_+0x46>
    557c:	42 81       	ldd	r20, Z+2	; 0x02
    557e:	53 81       	ldd	r21, Z+3	; 0x03
    5580:	2c 81       	ldd	r18, Y+4	; 0x04
    5582:	3d 81       	ldd	r19, Y+5	; 0x05
    5584:	42 17       	cp	r20, r18
    5586:	53 07       	cpc	r21, r19
    5588:	40 f0       	brcs	.+16     	; 0x559a <_ZN6String4moveERS_+0x46>
    558a:	0e 94 82 2e 	call	0x5d04	; 0x5d04 <strcpy>
    558e:	8c 81       	ldd	r24, Y+4	; 0x04
    5590:	9d 81       	ldd	r25, Y+5	; 0x05
    5592:	f8 01       	movw	r30, r16
    5594:	95 83       	std	Z+5, r25	; 0x05
    5596:	84 83       	std	Z+4, r24	; 0x04
    5598:	13 c0       	rjmp	.+38     	; 0x55c0 <_ZN6String4moveERS_+0x6c>
    559a:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <free>
    559e:	88 81       	ld	r24, Y
    55a0:	99 81       	ldd	r25, Y+1	; 0x01
    55a2:	f8 01       	movw	r30, r16
    55a4:	91 83       	std	Z+1, r25	; 0x01
    55a6:	80 83       	st	Z, r24
    55a8:	8a 81       	ldd	r24, Y+2	; 0x02
    55aa:	9b 81       	ldd	r25, Y+3	; 0x03
    55ac:	93 83       	std	Z+3, r25	; 0x03
    55ae:	82 83       	std	Z+2, r24	; 0x02
    55b0:	8c 81       	ldd	r24, Y+4	; 0x04
    55b2:	9d 81       	ldd	r25, Y+5	; 0x05
    55b4:	95 83       	std	Z+5, r25	; 0x05
    55b6:	84 83       	std	Z+4, r24	; 0x04
    55b8:	19 82       	std	Y+1, r1	; 0x01
    55ba:	18 82       	st	Y, r1
    55bc:	1b 82       	std	Y+3, r1	; 0x03
    55be:	1a 82       	std	Y+2, r1	; 0x02
    55c0:	1d 82       	std	Y+5, r1	; 0x05
    55c2:	1c 82       	std	Y+4, r1	; 0x04
    55c4:	df 91       	pop	r29
    55c6:	cf 91       	pop	r28
    55c8:	1f 91       	pop	r17
    55ca:	0f 91       	pop	r16
    55cc:	08 95       	ret

000055ce <_ZN6StringaSEO15StringSumHelper>:
    55ce:	cf 93       	push	r28
    55d0:	df 93       	push	r29
    55d2:	ec 01       	movw	r28, r24
    55d4:	68 17       	cp	r22, r24
    55d6:	79 07       	cpc	r23, r25
    55d8:	11 f0       	breq	.+4      	; 0x55de <_ZN6StringaSEO15StringSumHelper+0x10>
    55da:	0e 94 aa 2a 	call	0x5554	; 0x5554 <_ZN6String4moveERS_>
    55de:	ce 01       	movw	r24, r28
    55e0:	df 91       	pop	r29
    55e2:	cf 91       	pop	r28
    55e4:	08 95       	ret

000055e6 <_ZN6StringaSEPKc>:
    55e6:	cf 93       	push	r28
    55e8:	df 93       	push	r29
    55ea:	ec 01       	movw	r28, r24
    55ec:	61 15       	cp	r22, r1
    55ee:	71 05       	cpc	r23, r1
    55f0:	59 f0       	breq	.+22     	; 0x5608 <_ZN6StringaSEPKc+0x22>
    55f2:	fb 01       	movw	r30, r22
    55f4:	01 90       	ld	r0, Z+
    55f6:	00 20       	and	r0, r0
    55f8:	e9 f7       	brne	.-6      	; 0x55f4 <_ZN6StringaSEPKc+0xe>
    55fa:	31 97       	sbiw	r30, 0x01	; 1
    55fc:	af 01       	movw	r20, r30
    55fe:	46 1b       	sub	r20, r22
    5600:	57 0b       	sbc	r21, r23
    5602:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <_ZN6String4copyEPKcj>
    5606:	02 c0       	rjmp	.+4      	; 0x560c <_ZN6StringaSEPKc+0x26>
    5608:	0e 94 2c 2a 	call	0x5458	; 0x5458 <_ZN6String10invalidateEv>
    560c:	ce 01       	movw	r24, r28
    560e:	df 91       	pop	r29
    5610:	cf 91       	pop	r28
    5612:	08 95       	ret

00005614 <_ZN6StringC1Elh>:
    5614:	0f 93       	push	r16
    5616:	1f 93       	push	r17
    5618:	cf 93       	push	r28
    561a:	df 93       	push	r29
    561c:	cd b7       	in	r28, 0x3d	; 61
    561e:	de b7       	in	r29, 0x3e	; 62
    5620:	a2 97       	sbiw	r28, 0x22	; 34
    5622:	0f b6       	in	r0, 0x3f	; 63
    5624:	f8 94       	cli
    5626:	de bf       	out	0x3e, r29	; 62
    5628:	0f be       	out	0x3f, r0	; 63
    562a:	cd bf       	out	0x3d, r28	; 61
    562c:	8c 01       	movw	r16, r24
    562e:	cb 01       	movw	r24, r22
    5630:	ba 01       	movw	r22, r20
    5632:	f8 01       	movw	r30, r16
    5634:	11 82       	std	Z+1, r1	; 0x01
    5636:	10 82       	st	Z, r1
    5638:	13 82       	std	Z+3, r1	; 0x03
    563a:	12 82       	std	Z+2, r1	; 0x02
    563c:	15 82       	std	Z+5, r1	; 0x05
    563e:	14 82       	std	Z+4, r1	; 0x04
    5640:	30 e0       	ldi	r19, 0x00	; 0
    5642:	ae 01       	movw	r20, r28
    5644:	4f 5f       	subi	r20, 0xFF	; 255
    5646:	5f 4f       	sbci	r21, 0xFF	; 255
    5648:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <ltoa>
    564c:	be 01       	movw	r22, r28
    564e:	6f 5f       	subi	r22, 0xFF	; 255
    5650:	7f 4f       	sbci	r23, 0xFF	; 255
    5652:	c8 01       	movw	r24, r16
    5654:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <_ZN6StringaSEPKc>
    5658:	a2 96       	adiw	r28, 0x22	; 34
    565a:	0f b6       	in	r0, 0x3f	; 63
    565c:	f8 94       	cli
    565e:	de bf       	out	0x3e, r29	; 62
    5660:	0f be       	out	0x3f, r0	; 63
    5662:	cd bf       	out	0x3d, r28	; 61
    5664:	df 91       	pop	r29
    5666:	cf 91       	pop	r28
    5668:	1f 91       	pop	r17
    566a:	0f 91       	pop	r16
    566c:	08 95       	ret

0000566e <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
    566e:	cf 93       	push	r28
    5670:	df 93       	push	r29
	if (fromIndex >= len) return -1;
    5672:	fc 01       	movw	r30, r24
    5674:	24 81       	ldd	r18, Z+4	; 0x04
    5676:	35 81       	ldd	r19, Z+5	; 0x05
    5678:	42 17       	cp	r20, r18
    567a:	53 07       	cpc	r21, r19
    567c:	80 f4       	brcc	.+32     	; 0x569e <_ZNK6String7indexOfERKS_j+0x30>
    567e:	fb 01       	movw	r30, r22
    5680:	dc 01       	movw	r26, r24
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    5682:	cd 91       	ld	r28, X+
    5684:	dc 91       	ld	r29, X
    5686:	60 81       	ld	r22, Z
    5688:	71 81       	ldd	r23, Z+1	; 0x01
    568a:	ce 01       	movw	r24, r28
    568c:	84 0f       	add	r24, r20
    568e:	95 1f       	adc	r25, r21
    5690:	0e 94 89 2e 	call	0x5d12	; 0x5d12 <strstr>
	if (found == NULL) return -1;
    5694:	00 97       	sbiw	r24, 0x00	; 0
    5696:	19 f0       	breq	.+6      	; 0x569e <_ZNK6String7indexOfERKS_j+0x30>
	return found - buffer;
    5698:	8c 1b       	sub	r24, r28
    569a:	9d 0b       	sbc	r25, r29
    569c:	02 c0       	rjmp	.+4      	; 0x56a2 <_ZNK6String7indexOfERKS_j+0x34>
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
    569e:	8f ef       	ldi	r24, 0xFF	; 255
    56a0:	9f ef       	ldi	r25, 0xFF	; 255
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}
    56a2:	df 91       	pop	r29
    56a4:	cf 91       	pop	r28
    56a6:	08 95       	ret

000056a8 <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
    56a8:	40 e0       	ldi	r20, 0x00	; 0
    56aa:	50 e0       	ldi	r21, 0x00	; 0
    56ac:	0c 94 37 2b 	jmp	0x566e	; 0x566e <_ZNK6String7indexOfERKS_j>

000056b0 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    56b0:	08 95       	ret

000056b2 <_ZN13PluggableUSB_12getInterfaceEPh>:
		_initEndpoints[lastEp] = node->endpointType[i];
		lastEp++;
	}
	return true;
	// restart USB layer???
}
    56b2:	ef 92       	push	r14
    56b4:	ff 92       	push	r15
    56b6:	0f 93       	push	r16
    56b8:	1f 93       	push	r17
    56ba:	cf 93       	push	r28
    56bc:	df 93       	push	r29
    56be:	7b 01       	movw	r14, r22
    56c0:	fc 01       	movw	r30, r24
    56c2:	c2 81       	ldd	r28, Z+2	; 0x02
    56c4:	d3 81       	ldd	r29, Z+3	; 0x03
    56c6:	00 e0       	ldi	r16, 0x00	; 0
    56c8:	10 e0       	ldi	r17, 0x00	; 0
    56ca:	20 97       	sbiw	r28, 0x00	; 0
    56cc:	81 f0       	breq	.+32     	; 0x56ee <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
    56ce:	e8 81       	ld	r30, Y
    56d0:	f9 81       	ldd	r31, Y+1	; 0x01
    56d2:	02 80       	ldd	r0, Z+2	; 0x02
    56d4:	f3 81       	ldd	r31, Z+3	; 0x03
    56d6:	e0 2d       	mov	r30, r0
    56d8:	b7 01       	movw	r22, r14
    56da:	ce 01       	movw	r24, r28
    56dc:	09 95       	icall
    56de:	97 fd       	sbrc	r25, 7
    56e0:	08 c0       	rjmp	.+16     	; 0x56f2 <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
    56e2:	08 0f       	add	r16, r24
    56e4:	19 1f       	adc	r17, r25
    56e6:	08 84       	ldd	r0, Y+8	; 0x08
    56e8:	d9 85       	ldd	r29, Y+9	; 0x09
    56ea:	c0 2d       	mov	r28, r0
    56ec:	ee cf       	rjmp	.-36     	; 0x56ca <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    56ee:	c8 01       	movw	r24, r16
    56f0:	02 c0       	rjmp	.+4      	; 0x56f6 <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
    56f2:	8f ef       	ldi	r24, 0xFF	; 255
    56f4:	9f ef       	ldi	r25, 0xFF	; 255
    56f6:	df 91       	pop	r29
    56f8:	cf 91       	pop	r28
    56fa:	1f 91       	pop	r17
    56fc:	0f 91       	pop	r16
    56fe:	ff 90       	pop	r15
    5700:	ef 90       	pop	r14
    5702:	08 95       	ret

00005704 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    5704:	0f 93       	push	r16
    5706:	1f 93       	push	r17
    5708:	cf 93       	push	r28
    570a:	df 93       	push	r29
    570c:	8b 01       	movw	r16, r22
    570e:	fc 01       	movw	r30, r24
    5710:	c2 81       	ldd	r28, Z+2	; 0x02
    5712:	d3 81       	ldd	r29, Z+3	; 0x03
    5714:	20 97       	sbiw	r28, 0x00	; 0
    5716:	71 f0       	breq	.+28     	; 0x5734 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
    5718:	e8 81       	ld	r30, Y
    571a:	f9 81       	ldd	r31, Y+1	; 0x01
    571c:	04 80       	ldd	r0, Z+4	; 0x04
    571e:	f5 81       	ldd	r31, Z+5	; 0x05
    5720:	e0 2d       	mov	r30, r0
    5722:	b8 01       	movw	r22, r16
    5724:	ce 01       	movw	r24, r28
    5726:	09 95       	icall
    5728:	00 97       	sbiw	r24, 0x00	; 0
    572a:	31 f4       	brne	.+12     	; 0x5738 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
    572c:	08 84       	ldd	r0, Y+8	; 0x08
    572e:	d9 85       	ldd	r29, Y+9	; 0x09
    5730:	c0 2d       	mov	r28, r0
    5732:	f0 cf       	rjmp	.-32     	; 0x5714 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
    5734:	80 e0       	ldi	r24, 0x00	; 0
    5736:	90 e0       	ldi	r25, 0x00	; 0
    5738:	df 91       	pop	r29
    573a:	cf 91       	pop	r28
    573c:	1f 91       	pop	r17
    573e:	0f 91       	pop	r16
    5740:	08 95       	ret

00005742 <_ZN13PluggableUSB_12getShortNameEPc>:
    5742:	0f 93       	push	r16
    5744:	1f 93       	push	r17
    5746:	cf 93       	push	r28
    5748:	df 93       	push	r29
    574a:	8b 01       	movw	r16, r22
    574c:	fc 01       	movw	r30, r24
    574e:	c2 81       	ldd	r28, Z+2	; 0x02
    5750:	d3 81       	ldd	r29, Z+3	; 0x03
    5752:	20 97       	sbiw	r28, 0x00	; 0
    5754:	71 f0       	breq	.+28     	; 0x5772 <_ZN13PluggableUSB_12getShortNameEPc+0x30>
    5756:	e8 81       	ld	r30, Y
    5758:	f9 81       	ldd	r31, Y+1	; 0x01
    575a:	06 80       	ldd	r0, Z+6	; 0x06
    575c:	f7 81       	ldd	r31, Z+7	; 0x07
    575e:	e0 2d       	mov	r30, r0
    5760:	b8 01       	movw	r22, r16
    5762:	ce 01       	movw	r24, r28
    5764:	09 95       	icall
    5766:	08 0f       	add	r16, r24
    5768:	11 1d       	adc	r17, r1
    576a:	08 84       	ldd	r0, Y+8	; 0x08
    576c:	d9 85       	ldd	r29, Y+9	; 0x09
    576e:	c0 2d       	mov	r28, r0
    5770:	f0 cf       	rjmp	.-32     	; 0x5752 <_ZN13PluggableUSB_12getShortNameEPc+0x10>
    5772:	f8 01       	movw	r30, r16
    5774:	10 82       	st	Z, r1
    5776:	df 91       	pop	r29
    5778:	cf 91       	pop	r28
    577a:	1f 91       	pop	r17
    577c:	0f 91       	pop	r16
    577e:	08 95       	ret

00005780 <_ZN13PluggableUSB_5setupER8USBSetup>:
    5780:	0f 93       	push	r16
    5782:	1f 93       	push	r17
    5784:	cf 93       	push	r28
    5786:	df 93       	push	r29
    5788:	8b 01       	movw	r16, r22
    578a:	fc 01       	movw	r30, r24
    578c:	c2 81       	ldd	r28, Z+2	; 0x02
    578e:	d3 81       	ldd	r29, Z+3	; 0x03
    5790:	20 97       	sbiw	r28, 0x00	; 0
    5792:	71 f0       	breq	.+28     	; 0x57b0 <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
    5794:	e8 81       	ld	r30, Y
    5796:	f9 81       	ldd	r31, Y+1	; 0x01
    5798:	01 90       	ld	r0, Z+
    579a:	f0 81       	ld	r31, Z
    579c:	e0 2d       	mov	r30, r0
    579e:	b8 01       	movw	r22, r16
    57a0:	ce 01       	movw	r24, r28
    57a2:	09 95       	icall
    57a4:	81 11       	cpse	r24, r1
    57a6:	05 c0       	rjmp	.+10     	; 0x57b2 <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
    57a8:	08 84       	ldd	r0, Y+8	; 0x08
    57aa:	d9 85       	ldd	r29, Y+9	; 0x09
    57ac:	c0 2d       	mov	r28, r0
    57ae:	f0 cf       	rjmp	.-32     	; 0x5790 <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
    57b0:	80 e0       	ldi	r24, 0x00	; 0
    57b2:	df 91       	pop	r29
    57b4:	cf 91       	pop	r28
    57b6:	1f 91       	pop	r17
    57b8:	0f 91       	pop	r16
    57ba:	08 95       	ret

000057bc <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    57bc:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <_ZGVZ12PluggableUSBvE3obj>
    57c0:	81 11       	cpse	r24, r1
    57c2:	0d c0       	rjmp	.+26     	; 0x57de <_Z12PluggableUSBv+0x22>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    57c4:	82 e0       	ldi	r24, 0x02	; 2
    57c6:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <_ZZ12PluggableUSBvE3obj>
    57ca:	84 e0       	ldi	r24, 0x04	; 4
    57cc:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <_ZZ12PluggableUSBvE3obj+0x1>
    57d0:	10 92 08 07 	sts	0x0708, r1	; 0x800708 <_ZZ12PluggableUSBvE3obj+0x3>
    57d4:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <_ZZ12PluggableUSBvE3obj+0x2>
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    57d8:	81 e0       	ldi	r24, 0x01	; 1
    57da:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <_ZGVZ12PluggableUSBvE3obj>
	return obj;
}
    57de:	85 e0       	ldi	r24, 0x05	; 5
    57e0:	97 e0       	ldi	r25, 0x07	; 7
    57e2:	08 95       	ret

000057e4 <__unordsf2>:
    57e4:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <__fp_cmp>
    57e8:	88 0b       	sbc	r24, r24
    57ea:	99 0b       	sbc	r25, r25
    57ec:	08 95       	ret

000057ee <__divmodhi4>:
    57ee:	97 fb       	bst	r25, 7
    57f0:	07 2e       	mov	r0, r23
    57f2:	16 f4       	brtc	.+4      	; 0x57f8 <__divmodhi4+0xa>
    57f4:	00 94       	com	r0
    57f6:	07 d0       	rcall	.+14     	; 0x5806 <__divmodhi4_neg1>
    57f8:	77 fd       	sbrc	r23, 7
    57fa:	09 d0       	rcall	.+18     	; 0x580e <__divmodhi4_neg2>
    57fc:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <__udivmodhi4>
    5800:	07 fc       	sbrc	r0, 7
    5802:	05 d0       	rcall	.+10     	; 0x580e <__divmodhi4_neg2>
    5804:	3e f4       	brtc	.+14     	; 0x5814 <__divmodhi4_exit>

00005806 <__divmodhi4_neg1>:
    5806:	90 95       	com	r25
    5808:	81 95       	neg	r24
    580a:	9f 4f       	sbci	r25, 0xFF	; 255
    580c:	08 95       	ret

0000580e <__divmodhi4_neg2>:
    580e:	70 95       	com	r23
    5810:	61 95       	neg	r22
    5812:	7f 4f       	sbci	r23, 0xFF	; 255

00005814 <__divmodhi4_exit>:
    5814:	08 95       	ret

00005816 <__udivmodsi4>:
    5816:	a1 e2       	ldi	r26, 0x21	; 33
    5818:	1a 2e       	mov	r1, r26
    581a:	aa 1b       	sub	r26, r26
    581c:	bb 1b       	sub	r27, r27
    581e:	fd 01       	movw	r30, r26
    5820:	0d c0       	rjmp	.+26     	; 0x583c <__udivmodsi4_ep>

00005822 <__udivmodsi4_loop>:
    5822:	aa 1f       	adc	r26, r26
    5824:	bb 1f       	adc	r27, r27
    5826:	ee 1f       	adc	r30, r30
    5828:	ff 1f       	adc	r31, r31
    582a:	a2 17       	cp	r26, r18
    582c:	b3 07       	cpc	r27, r19
    582e:	e4 07       	cpc	r30, r20
    5830:	f5 07       	cpc	r31, r21
    5832:	20 f0       	brcs	.+8      	; 0x583c <__udivmodsi4_ep>
    5834:	a2 1b       	sub	r26, r18
    5836:	b3 0b       	sbc	r27, r19
    5838:	e4 0b       	sbc	r30, r20
    583a:	f5 0b       	sbc	r31, r21

0000583c <__udivmodsi4_ep>:
    583c:	66 1f       	adc	r22, r22
    583e:	77 1f       	adc	r23, r23
    5840:	88 1f       	adc	r24, r24
    5842:	99 1f       	adc	r25, r25
    5844:	1a 94       	dec	r1
    5846:	69 f7       	brne	.-38     	; 0x5822 <__udivmodsi4_loop>
    5848:	60 95       	com	r22
    584a:	70 95       	com	r23
    584c:	80 95       	com	r24
    584e:	90 95       	com	r25
    5850:	9b 01       	movw	r18, r22
    5852:	ac 01       	movw	r20, r24
    5854:	bd 01       	movw	r22, r26
    5856:	cf 01       	movw	r24, r30
    5858:	08 95       	ret

0000585a <__divmodsi4>:
    585a:	05 2e       	mov	r0, r21
    585c:	97 fb       	bst	r25, 7
    585e:	1e f4       	brtc	.+6      	; 0x5866 <__divmodsi4+0xc>
    5860:	00 94       	com	r0
    5862:	0e 94 44 2c 	call	0x5888	; 0x5888 <__negsi2>
    5866:	57 fd       	sbrc	r21, 7
    5868:	07 d0       	rcall	.+14     	; 0x5878 <__divmodsi4_neg2>
    586a:	0e 94 0b 2c 	call	0x5816	; 0x5816 <__udivmodsi4>
    586e:	07 fc       	sbrc	r0, 7
    5870:	03 d0       	rcall	.+6      	; 0x5878 <__divmodsi4_neg2>
    5872:	4e f4       	brtc	.+18     	; 0x5886 <__divmodsi4_exit>
    5874:	0c 94 44 2c 	jmp	0x5888	; 0x5888 <__negsi2>

00005878 <__divmodsi4_neg2>:
    5878:	50 95       	com	r21
    587a:	40 95       	com	r20
    587c:	30 95       	com	r19
    587e:	21 95       	neg	r18
    5880:	3f 4f       	sbci	r19, 0xFF	; 255
    5882:	4f 4f       	sbci	r20, 0xFF	; 255
    5884:	5f 4f       	sbci	r21, 0xFF	; 255

00005886 <__divmodsi4_exit>:
    5886:	08 95       	ret

00005888 <__negsi2>:
    5888:	90 95       	com	r25
    588a:	80 95       	com	r24
    588c:	70 95       	com	r23
    588e:	61 95       	neg	r22
    5890:	7f 4f       	sbci	r23, 0xFF	; 255
    5892:	8f 4f       	sbci	r24, 0xFF	; 255
    5894:	9f 4f       	sbci	r25, 0xFF	; 255
    5896:	08 95       	ret

00005898 <__tablejump2__>:
    5898:	ee 0f       	add	r30, r30
    589a:	ff 1f       	adc	r31, r31
    589c:	05 90       	lpm	r0, Z+
    589e:	f4 91       	lpm	r31, Z
    58a0:	e0 2d       	mov	r30, r0
    58a2:	09 94       	ijmp

000058a4 <__udivmodhi4>:
    58a4:	aa 1b       	sub	r26, r26
    58a6:	bb 1b       	sub	r27, r27
    58a8:	51 e1       	ldi	r21, 0x11	; 17
    58aa:	07 c0       	rjmp	.+14     	; 0x58ba <__udivmodhi4_ep>

000058ac <__udivmodhi4_loop>:
    58ac:	aa 1f       	adc	r26, r26
    58ae:	bb 1f       	adc	r27, r27
    58b0:	a6 17       	cp	r26, r22
    58b2:	b7 07       	cpc	r27, r23
    58b4:	10 f0       	brcs	.+4      	; 0x58ba <__udivmodhi4_ep>
    58b6:	a6 1b       	sub	r26, r22
    58b8:	b7 0b       	sbc	r27, r23

000058ba <__udivmodhi4_ep>:
    58ba:	88 1f       	adc	r24, r24
    58bc:	99 1f       	adc	r25, r25
    58be:	5a 95       	dec	r21
    58c0:	a9 f7       	brne	.-22     	; 0x58ac <__udivmodhi4_loop>
    58c2:	80 95       	com	r24
    58c4:	90 95       	com	r25
    58c6:	bc 01       	movw	r22, r24
    58c8:	cd 01       	movw	r24, r26
    58ca:	08 95       	ret

000058cc <malloc>:
    58cc:	0f 93       	push	r16
    58ce:	1f 93       	push	r17
    58d0:	cf 93       	push	r28
    58d2:	df 93       	push	r29
    58d4:	82 30       	cpi	r24, 0x02	; 2
    58d6:	91 05       	cpc	r25, r1
    58d8:	10 f4       	brcc	.+4      	; 0x58de <malloc+0x12>
    58da:	82 e0       	ldi	r24, 0x02	; 2
    58dc:	90 e0       	ldi	r25, 0x00	; 0
    58de:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <__flp>
    58e2:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <__flp+0x1>
    58e6:	20 e0       	ldi	r18, 0x00	; 0
    58e8:	30 e0       	ldi	r19, 0x00	; 0
    58ea:	a0 e0       	ldi	r26, 0x00	; 0
    58ec:	b0 e0       	ldi	r27, 0x00	; 0
    58ee:	30 97       	sbiw	r30, 0x00	; 0
    58f0:	19 f1       	breq	.+70     	; 0x5938 <malloc+0x6c>
    58f2:	40 81       	ld	r20, Z
    58f4:	51 81       	ldd	r21, Z+1	; 0x01
    58f6:	02 81       	ldd	r16, Z+2	; 0x02
    58f8:	13 81       	ldd	r17, Z+3	; 0x03
    58fa:	48 17       	cp	r20, r24
    58fc:	59 07       	cpc	r21, r25
    58fe:	c8 f0       	brcs	.+50     	; 0x5932 <malloc+0x66>
    5900:	84 17       	cp	r24, r20
    5902:	95 07       	cpc	r25, r21
    5904:	69 f4       	brne	.+26     	; 0x5920 <malloc+0x54>
    5906:	10 97       	sbiw	r26, 0x00	; 0
    5908:	31 f0       	breq	.+12     	; 0x5916 <malloc+0x4a>
    590a:	12 96       	adiw	r26, 0x02	; 2
    590c:	0c 93       	st	X, r16
    590e:	12 97       	sbiw	r26, 0x02	; 2
    5910:	13 96       	adiw	r26, 0x03	; 3
    5912:	1c 93       	st	X, r17
    5914:	27 c0       	rjmp	.+78     	; 0x5964 <malloc+0x98>
    5916:	00 93 13 07 	sts	0x0713, r16	; 0x800713 <__flp>
    591a:	10 93 14 07 	sts	0x0714, r17	; 0x800714 <__flp+0x1>
    591e:	22 c0       	rjmp	.+68     	; 0x5964 <malloc+0x98>
    5920:	21 15       	cp	r18, r1
    5922:	31 05       	cpc	r19, r1
    5924:	19 f0       	breq	.+6      	; 0x592c <malloc+0x60>
    5926:	42 17       	cp	r20, r18
    5928:	53 07       	cpc	r21, r19
    592a:	18 f4       	brcc	.+6      	; 0x5932 <malloc+0x66>
    592c:	9a 01       	movw	r18, r20
    592e:	bd 01       	movw	r22, r26
    5930:	ef 01       	movw	r28, r30
    5932:	df 01       	movw	r26, r30
    5934:	f8 01       	movw	r30, r16
    5936:	db cf       	rjmp	.-74     	; 0x58ee <malloc+0x22>
    5938:	21 15       	cp	r18, r1
    593a:	31 05       	cpc	r19, r1
    593c:	f9 f0       	breq	.+62     	; 0x597c <malloc+0xb0>
    593e:	28 1b       	sub	r18, r24
    5940:	39 0b       	sbc	r19, r25
    5942:	24 30       	cpi	r18, 0x04	; 4
    5944:	31 05       	cpc	r19, r1
    5946:	80 f4       	brcc	.+32     	; 0x5968 <malloc+0x9c>
    5948:	8a 81       	ldd	r24, Y+2	; 0x02
    594a:	9b 81       	ldd	r25, Y+3	; 0x03
    594c:	61 15       	cp	r22, r1
    594e:	71 05       	cpc	r23, r1
    5950:	21 f0       	breq	.+8      	; 0x595a <malloc+0x8e>
    5952:	fb 01       	movw	r30, r22
    5954:	93 83       	std	Z+3, r25	; 0x03
    5956:	82 83       	std	Z+2, r24	; 0x02
    5958:	04 c0       	rjmp	.+8      	; 0x5962 <malloc+0x96>
    595a:	90 93 14 07 	sts	0x0714, r25	; 0x800714 <__flp+0x1>
    595e:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <__flp>
    5962:	fe 01       	movw	r30, r28
    5964:	32 96       	adiw	r30, 0x02	; 2
    5966:	44 c0       	rjmp	.+136    	; 0x59f0 <malloc+0x124>
    5968:	fe 01       	movw	r30, r28
    596a:	e2 0f       	add	r30, r18
    596c:	f3 1f       	adc	r31, r19
    596e:	81 93       	st	Z+, r24
    5970:	91 93       	st	Z+, r25
    5972:	22 50       	subi	r18, 0x02	; 2
    5974:	31 09       	sbc	r19, r1
    5976:	39 83       	std	Y+1, r19	; 0x01
    5978:	28 83       	st	Y, r18
    597a:	3a c0       	rjmp	.+116    	; 0x59f0 <malloc+0x124>
    597c:	20 91 11 07 	lds	r18, 0x0711	; 0x800711 <__brkval>
    5980:	30 91 12 07 	lds	r19, 0x0712	; 0x800712 <__brkval+0x1>
    5984:	23 2b       	or	r18, r19
    5986:	41 f4       	brne	.+16     	; 0x5998 <malloc+0xcc>
    5988:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    598c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    5990:	30 93 12 07 	sts	0x0712, r19	; 0x800712 <__brkval+0x1>
    5994:	20 93 11 07 	sts	0x0711, r18	; 0x800711 <__brkval>
    5998:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    599c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    59a0:	21 15       	cp	r18, r1
    59a2:	31 05       	cpc	r19, r1
    59a4:	41 f4       	brne	.+16     	; 0x59b6 <malloc+0xea>
    59a6:	2d b7       	in	r18, 0x3d	; 61
    59a8:	3e b7       	in	r19, 0x3e	; 62
    59aa:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    59ae:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    59b2:	24 1b       	sub	r18, r20
    59b4:	35 0b       	sbc	r19, r21
    59b6:	e0 91 11 07 	lds	r30, 0x0711	; 0x800711 <__brkval>
    59ba:	f0 91 12 07 	lds	r31, 0x0712	; 0x800712 <__brkval+0x1>
    59be:	e2 17       	cp	r30, r18
    59c0:	f3 07       	cpc	r31, r19
    59c2:	a0 f4       	brcc	.+40     	; 0x59ec <malloc+0x120>
    59c4:	2e 1b       	sub	r18, r30
    59c6:	3f 0b       	sbc	r19, r31
    59c8:	28 17       	cp	r18, r24
    59ca:	39 07       	cpc	r19, r25
    59cc:	78 f0       	brcs	.+30     	; 0x59ec <malloc+0x120>
    59ce:	ac 01       	movw	r20, r24
    59d0:	4e 5f       	subi	r20, 0xFE	; 254
    59d2:	5f 4f       	sbci	r21, 0xFF	; 255
    59d4:	24 17       	cp	r18, r20
    59d6:	35 07       	cpc	r19, r21
    59d8:	48 f0       	brcs	.+18     	; 0x59ec <malloc+0x120>
    59da:	4e 0f       	add	r20, r30
    59dc:	5f 1f       	adc	r21, r31
    59de:	50 93 12 07 	sts	0x0712, r21	; 0x800712 <__brkval+0x1>
    59e2:	40 93 11 07 	sts	0x0711, r20	; 0x800711 <__brkval>
    59e6:	81 93       	st	Z+, r24
    59e8:	91 93       	st	Z+, r25
    59ea:	02 c0       	rjmp	.+4      	; 0x59f0 <malloc+0x124>
    59ec:	e0 e0       	ldi	r30, 0x00	; 0
    59ee:	f0 e0       	ldi	r31, 0x00	; 0
    59f0:	cf 01       	movw	r24, r30
    59f2:	df 91       	pop	r29
    59f4:	cf 91       	pop	r28
    59f6:	1f 91       	pop	r17
    59f8:	0f 91       	pop	r16
    59fa:	08 95       	ret

000059fc <free>:
    59fc:	cf 93       	push	r28
    59fe:	df 93       	push	r29
    5a00:	00 97       	sbiw	r24, 0x00	; 0
    5a02:	09 f4       	brne	.+2      	; 0x5a06 <free+0xa>
    5a04:	81 c0       	rjmp	.+258    	; 0x5b08 <free+0x10c>
    5a06:	fc 01       	movw	r30, r24
    5a08:	32 97       	sbiw	r30, 0x02	; 2
    5a0a:	13 82       	std	Z+3, r1	; 0x03
    5a0c:	12 82       	std	Z+2, r1	; 0x02
    5a0e:	a0 91 13 07 	lds	r26, 0x0713	; 0x800713 <__flp>
    5a12:	b0 91 14 07 	lds	r27, 0x0714	; 0x800714 <__flp+0x1>
    5a16:	10 97       	sbiw	r26, 0x00	; 0
    5a18:	81 f4       	brne	.+32     	; 0x5a3a <free+0x3e>
    5a1a:	20 81       	ld	r18, Z
    5a1c:	31 81       	ldd	r19, Z+1	; 0x01
    5a1e:	82 0f       	add	r24, r18
    5a20:	93 1f       	adc	r25, r19
    5a22:	20 91 11 07 	lds	r18, 0x0711	; 0x800711 <__brkval>
    5a26:	30 91 12 07 	lds	r19, 0x0712	; 0x800712 <__brkval+0x1>
    5a2a:	28 17       	cp	r18, r24
    5a2c:	39 07       	cpc	r19, r25
    5a2e:	51 f5       	brne	.+84     	; 0x5a84 <free+0x88>
    5a30:	f0 93 12 07 	sts	0x0712, r31	; 0x800712 <__brkval+0x1>
    5a34:	e0 93 11 07 	sts	0x0711, r30	; 0x800711 <__brkval>
    5a38:	67 c0       	rjmp	.+206    	; 0x5b08 <free+0x10c>
    5a3a:	ed 01       	movw	r28, r26
    5a3c:	20 e0       	ldi	r18, 0x00	; 0
    5a3e:	30 e0       	ldi	r19, 0x00	; 0
    5a40:	ce 17       	cp	r28, r30
    5a42:	df 07       	cpc	r29, r31
    5a44:	40 f4       	brcc	.+16     	; 0x5a56 <free+0x5a>
    5a46:	4a 81       	ldd	r20, Y+2	; 0x02
    5a48:	5b 81       	ldd	r21, Y+3	; 0x03
    5a4a:	9e 01       	movw	r18, r28
    5a4c:	41 15       	cp	r20, r1
    5a4e:	51 05       	cpc	r21, r1
    5a50:	f1 f0       	breq	.+60     	; 0x5a8e <free+0x92>
    5a52:	ea 01       	movw	r28, r20
    5a54:	f5 cf       	rjmp	.-22     	; 0x5a40 <free+0x44>
    5a56:	d3 83       	std	Z+3, r29	; 0x03
    5a58:	c2 83       	std	Z+2, r28	; 0x02
    5a5a:	40 81       	ld	r20, Z
    5a5c:	51 81       	ldd	r21, Z+1	; 0x01
    5a5e:	84 0f       	add	r24, r20
    5a60:	95 1f       	adc	r25, r21
    5a62:	c8 17       	cp	r28, r24
    5a64:	d9 07       	cpc	r29, r25
    5a66:	59 f4       	brne	.+22     	; 0x5a7e <free+0x82>
    5a68:	88 81       	ld	r24, Y
    5a6a:	99 81       	ldd	r25, Y+1	; 0x01
    5a6c:	84 0f       	add	r24, r20
    5a6e:	95 1f       	adc	r25, r21
    5a70:	02 96       	adiw	r24, 0x02	; 2
    5a72:	91 83       	std	Z+1, r25	; 0x01
    5a74:	80 83       	st	Z, r24
    5a76:	8a 81       	ldd	r24, Y+2	; 0x02
    5a78:	9b 81       	ldd	r25, Y+3	; 0x03
    5a7a:	93 83       	std	Z+3, r25	; 0x03
    5a7c:	82 83       	std	Z+2, r24	; 0x02
    5a7e:	21 15       	cp	r18, r1
    5a80:	31 05       	cpc	r19, r1
    5a82:	29 f4       	brne	.+10     	; 0x5a8e <free+0x92>
    5a84:	f0 93 14 07 	sts	0x0714, r31	; 0x800714 <__flp+0x1>
    5a88:	e0 93 13 07 	sts	0x0713, r30	; 0x800713 <__flp>
    5a8c:	3d c0       	rjmp	.+122    	; 0x5b08 <free+0x10c>
    5a8e:	e9 01       	movw	r28, r18
    5a90:	fb 83       	std	Y+3, r31	; 0x03
    5a92:	ea 83       	std	Y+2, r30	; 0x02
    5a94:	49 91       	ld	r20, Y+
    5a96:	59 91       	ld	r21, Y+
    5a98:	c4 0f       	add	r28, r20
    5a9a:	d5 1f       	adc	r29, r21
    5a9c:	ec 17       	cp	r30, r28
    5a9e:	fd 07       	cpc	r31, r29
    5aa0:	61 f4       	brne	.+24     	; 0x5aba <free+0xbe>
    5aa2:	80 81       	ld	r24, Z
    5aa4:	91 81       	ldd	r25, Z+1	; 0x01
    5aa6:	84 0f       	add	r24, r20
    5aa8:	95 1f       	adc	r25, r21
    5aaa:	02 96       	adiw	r24, 0x02	; 2
    5aac:	e9 01       	movw	r28, r18
    5aae:	99 83       	std	Y+1, r25	; 0x01
    5ab0:	88 83       	st	Y, r24
    5ab2:	82 81       	ldd	r24, Z+2	; 0x02
    5ab4:	93 81       	ldd	r25, Z+3	; 0x03
    5ab6:	9b 83       	std	Y+3, r25	; 0x03
    5ab8:	8a 83       	std	Y+2, r24	; 0x02
    5aba:	e0 e0       	ldi	r30, 0x00	; 0
    5abc:	f0 e0       	ldi	r31, 0x00	; 0
    5abe:	12 96       	adiw	r26, 0x02	; 2
    5ac0:	8d 91       	ld	r24, X+
    5ac2:	9c 91       	ld	r25, X
    5ac4:	13 97       	sbiw	r26, 0x03	; 3
    5ac6:	00 97       	sbiw	r24, 0x00	; 0
    5ac8:	19 f0       	breq	.+6      	; 0x5ad0 <free+0xd4>
    5aca:	fd 01       	movw	r30, r26
    5acc:	dc 01       	movw	r26, r24
    5ace:	f7 cf       	rjmp	.-18     	; 0x5abe <free+0xc2>
    5ad0:	8d 91       	ld	r24, X+
    5ad2:	9c 91       	ld	r25, X
    5ad4:	11 97       	sbiw	r26, 0x01	; 1
    5ad6:	9d 01       	movw	r18, r26
    5ad8:	2e 5f       	subi	r18, 0xFE	; 254
    5ada:	3f 4f       	sbci	r19, 0xFF	; 255
    5adc:	82 0f       	add	r24, r18
    5ade:	93 1f       	adc	r25, r19
    5ae0:	20 91 11 07 	lds	r18, 0x0711	; 0x800711 <__brkval>
    5ae4:	30 91 12 07 	lds	r19, 0x0712	; 0x800712 <__brkval+0x1>
    5ae8:	28 17       	cp	r18, r24
    5aea:	39 07       	cpc	r19, r25
    5aec:	69 f4       	brne	.+26     	; 0x5b08 <free+0x10c>
    5aee:	30 97       	sbiw	r30, 0x00	; 0
    5af0:	29 f4       	brne	.+10     	; 0x5afc <free+0x100>
    5af2:	10 92 14 07 	sts	0x0714, r1	; 0x800714 <__flp+0x1>
    5af6:	10 92 13 07 	sts	0x0713, r1	; 0x800713 <__flp>
    5afa:	02 c0       	rjmp	.+4      	; 0x5b00 <free+0x104>
    5afc:	13 82       	std	Z+3, r1	; 0x03
    5afe:	12 82       	std	Z+2, r1	; 0x02
    5b00:	b0 93 12 07 	sts	0x0712, r27	; 0x800712 <__brkval+0x1>
    5b04:	a0 93 11 07 	sts	0x0711, r26	; 0x800711 <__brkval>
    5b08:	df 91       	pop	r29
    5b0a:	cf 91       	pop	r28
    5b0c:	08 95       	ret

00005b0e <realloc>:
    5b0e:	a0 e0       	ldi	r26, 0x00	; 0
    5b10:	b0 e0       	ldi	r27, 0x00	; 0
    5b12:	ed e8       	ldi	r30, 0x8D	; 141
    5b14:	fd e2       	ldi	r31, 0x2D	; 45
    5b16:	0c 94 08 2f 	jmp	0x5e10	; 0x5e10 <__prologue_saves__+0x8>
    5b1a:	ec 01       	movw	r28, r24
    5b1c:	00 97       	sbiw	r24, 0x00	; 0
    5b1e:	21 f4       	brne	.+8      	; 0x5b28 <realloc+0x1a>
    5b20:	cb 01       	movw	r24, r22
    5b22:	0e 94 66 2c 	call	0x58cc	; 0x58cc <malloc>
    5b26:	b4 c0       	rjmp	.+360    	; 0x5c90 <realloc+0x182>
    5b28:	fc 01       	movw	r30, r24
    5b2a:	e6 0f       	add	r30, r22
    5b2c:	f7 1f       	adc	r31, r23
    5b2e:	9c 01       	movw	r18, r24
    5b30:	22 50       	subi	r18, 0x02	; 2
    5b32:	31 09       	sbc	r19, r1
    5b34:	e2 17       	cp	r30, r18
    5b36:	f3 07       	cpc	r31, r19
    5b38:	08 f4       	brcc	.+2      	; 0x5b3c <realloc+0x2e>
    5b3a:	a8 c0       	rjmp	.+336    	; 0x5c8c <realloc+0x17e>
    5b3c:	d9 01       	movw	r26, r18
    5b3e:	0d 91       	ld	r16, X+
    5b40:	1c 91       	ld	r17, X
    5b42:	11 97       	sbiw	r26, 0x01	; 1
    5b44:	06 17       	cp	r16, r22
    5b46:	17 07       	cpc	r17, r23
    5b48:	b0 f0       	brcs	.+44     	; 0x5b76 <realloc+0x68>
    5b4a:	05 30       	cpi	r16, 0x05	; 5
    5b4c:	11 05       	cpc	r17, r1
    5b4e:	08 f4       	brcc	.+2      	; 0x5b52 <realloc+0x44>
    5b50:	9b c0       	rjmp	.+310    	; 0x5c88 <realloc+0x17a>
    5b52:	c8 01       	movw	r24, r16
    5b54:	04 97       	sbiw	r24, 0x04	; 4
    5b56:	86 17       	cp	r24, r22
    5b58:	97 07       	cpc	r25, r23
    5b5a:	08 f4       	brcc	.+2      	; 0x5b5e <realloc+0x50>
    5b5c:	95 c0       	rjmp	.+298    	; 0x5c88 <realloc+0x17a>
    5b5e:	02 50       	subi	r16, 0x02	; 2
    5b60:	11 09       	sbc	r17, r1
    5b62:	06 1b       	sub	r16, r22
    5b64:	17 0b       	sbc	r17, r23
    5b66:	01 93       	st	Z+, r16
    5b68:	11 93       	st	Z+, r17
    5b6a:	6d 93       	st	X+, r22
    5b6c:	7c 93       	st	X, r23
    5b6e:	cf 01       	movw	r24, r30
    5b70:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <free>
    5b74:	89 c0       	rjmp	.+274    	; 0x5c88 <realloc+0x17a>
    5b76:	5b 01       	movw	r10, r22
    5b78:	a0 1a       	sub	r10, r16
    5b7a:	b1 0a       	sbc	r11, r17
    5b7c:	4c 01       	movw	r8, r24
    5b7e:	80 0e       	add	r8, r16
    5b80:	91 1e       	adc	r9, r17
    5b82:	a0 91 13 07 	lds	r26, 0x0713	; 0x800713 <__flp>
    5b86:	b0 91 14 07 	lds	r27, 0x0714	; 0x800714 <__flp+0x1>
    5b8a:	61 2c       	mov	r6, r1
    5b8c:	71 2c       	mov	r7, r1
    5b8e:	e1 2c       	mov	r14, r1
    5b90:	f1 2c       	mov	r15, r1
    5b92:	10 97       	sbiw	r26, 0x00	; 0
    5b94:	09 f4       	brne	.+2      	; 0x5b98 <realloc+0x8a>
    5b96:	46 c0       	rjmp	.+140    	; 0x5c24 <realloc+0x116>
    5b98:	8d 91       	ld	r24, X+
    5b9a:	9c 91       	ld	r25, X
    5b9c:	11 97       	sbiw	r26, 0x01	; 1
    5b9e:	a8 15       	cp	r26, r8
    5ba0:	b9 05       	cpc	r27, r9
    5ba2:	b1 f5       	brne	.+108    	; 0x5c10 <realloc+0x102>
    5ba4:	6c 01       	movw	r12, r24
    5ba6:	42 e0       	ldi	r20, 0x02	; 2
    5ba8:	c4 0e       	add	r12, r20
    5baa:	d1 1c       	adc	r13, r1
    5bac:	ca 14       	cp	r12, r10
    5bae:	db 04       	cpc	r13, r11
    5bb0:	78 f1       	brcs	.+94     	; 0x5c10 <realloc+0x102>
    5bb2:	4c 01       	movw	r8, r24
    5bb4:	8a 18       	sub	r8, r10
    5bb6:	9b 08       	sbc	r9, r11
    5bb8:	64 01       	movw	r12, r8
    5bba:	42 e0       	ldi	r20, 0x02	; 2
    5bbc:	c4 0e       	add	r12, r20
    5bbe:	d1 1c       	adc	r13, r1
    5bc0:	12 96       	adiw	r26, 0x02	; 2
    5bc2:	bc 90       	ld	r11, X
    5bc4:	12 97       	sbiw	r26, 0x02	; 2
    5bc6:	13 96       	adiw	r26, 0x03	; 3
    5bc8:	ac 91       	ld	r26, X
    5bca:	b5 e0       	ldi	r27, 0x05	; 5
    5bcc:	cb 16       	cp	r12, r27
    5bce:	d1 04       	cpc	r13, r1
    5bd0:	40 f0       	brcs	.+16     	; 0x5be2 <realloc+0xd4>
    5bd2:	b2 82       	std	Z+2, r11	; 0x02
    5bd4:	a3 83       	std	Z+3, r26	; 0x03
    5bd6:	91 82       	std	Z+1, r9	; 0x01
    5bd8:	80 82       	st	Z, r8
    5bda:	d9 01       	movw	r26, r18
    5bdc:	6d 93       	st	X+, r22
    5bde:	7c 93       	st	X, r23
    5be0:	09 c0       	rjmp	.+18     	; 0x5bf4 <realloc+0xe6>
    5be2:	0e 5f       	subi	r16, 0xFE	; 254
    5be4:	1f 4f       	sbci	r17, 0xFF	; 255
    5be6:	80 0f       	add	r24, r16
    5be8:	91 1f       	adc	r25, r17
    5bea:	f9 01       	movw	r30, r18
    5bec:	91 83       	std	Z+1, r25	; 0x01
    5bee:	80 83       	st	Z, r24
    5bf0:	eb 2d       	mov	r30, r11
    5bf2:	fa 2f       	mov	r31, r26
    5bf4:	e1 14       	cp	r14, r1
    5bf6:	f1 04       	cpc	r15, r1
    5bf8:	31 f0       	breq	.+12     	; 0x5c06 <realloc+0xf8>
    5bfa:	d7 01       	movw	r26, r14
    5bfc:	13 96       	adiw	r26, 0x03	; 3
    5bfe:	fc 93       	st	X, r31
    5c00:	ee 93       	st	-X, r30
    5c02:	12 97       	sbiw	r26, 0x02	; 2
    5c04:	41 c0       	rjmp	.+130    	; 0x5c88 <realloc+0x17a>
    5c06:	f0 93 14 07 	sts	0x0714, r31	; 0x800714 <__flp+0x1>
    5c0a:	e0 93 13 07 	sts	0x0713, r30	; 0x800713 <__flp>
    5c0e:	3c c0       	rjmp	.+120    	; 0x5c88 <realloc+0x17a>
    5c10:	68 16       	cp	r6, r24
    5c12:	79 06       	cpc	r7, r25
    5c14:	08 f4       	brcc	.+2      	; 0x5c18 <realloc+0x10a>
    5c16:	3c 01       	movw	r6, r24
    5c18:	7d 01       	movw	r14, r26
    5c1a:	12 96       	adiw	r26, 0x02	; 2
    5c1c:	0d 90       	ld	r0, X+
    5c1e:	bc 91       	ld	r27, X
    5c20:	a0 2d       	mov	r26, r0
    5c22:	b7 cf       	rjmp	.-146    	; 0x5b92 <realloc+0x84>
    5c24:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <__brkval>
    5c28:	90 91 12 07 	lds	r25, 0x0712	; 0x800712 <__brkval+0x1>
    5c2c:	88 16       	cp	r8, r24
    5c2e:	99 06       	cpc	r9, r25
    5c30:	e1 f4       	brne	.+56     	; 0x5c6a <realloc+0x15c>
    5c32:	66 16       	cp	r6, r22
    5c34:	77 06       	cpc	r7, r23
    5c36:	c8 f4       	brcc	.+50     	; 0x5c6a <realloc+0x15c>
    5c38:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    5c3c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    5c40:	00 97       	sbiw	r24, 0x00	; 0
    5c42:	41 f4       	brne	.+16     	; 0x5c54 <realloc+0x146>
    5c44:	8d b7       	in	r24, 0x3d	; 61
    5c46:	9e b7       	in	r25, 0x3e	; 62
    5c48:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    5c4c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    5c50:	84 1b       	sub	r24, r20
    5c52:	95 0b       	sbc	r25, r21
    5c54:	e8 17       	cp	r30, r24
    5c56:	f9 07       	cpc	r31, r25
    5c58:	c8 f4       	brcc	.+50     	; 0x5c8c <realloc+0x17e>
    5c5a:	f0 93 12 07 	sts	0x0712, r31	; 0x800712 <__brkval+0x1>
    5c5e:	e0 93 11 07 	sts	0x0711, r30	; 0x800711 <__brkval>
    5c62:	f9 01       	movw	r30, r18
    5c64:	71 83       	std	Z+1, r23	; 0x01
    5c66:	60 83       	st	Z, r22
    5c68:	0f c0       	rjmp	.+30     	; 0x5c88 <realloc+0x17a>
    5c6a:	cb 01       	movw	r24, r22
    5c6c:	0e 94 66 2c 	call	0x58cc	; 0x58cc <malloc>
    5c70:	7c 01       	movw	r14, r24
    5c72:	00 97       	sbiw	r24, 0x00	; 0
    5c74:	59 f0       	breq	.+22     	; 0x5c8c <realloc+0x17e>
    5c76:	a8 01       	movw	r20, r16
    5c78:	be 01       	movw	r22, r28
    5c7a:	0e 94 79 2e 	call	0x5cf2	; 0x5cf2 <memcpy>
    5c7e:	ce 01       	movw	r24, r28
    5c80:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <free>
    5c84:	c7 01       	movw	r24, r14
    5c86:	04 c0       	rjmp	.+8      	; 0x5c90 <realloc+0x182>
    5c88:	ce 01       	movw	r24, r28
    5c8a:	02 c0       	rjmp	.+4      	; 0x5c90 <realloc+0x182>
    5c8c:	80 e0       	ldi	r24, 0x00	; 0
    5c8e:	90 e0       	ldi	r25, 0x00	; 0
    5c90:	cd b7       	in	r28, 0x3d	; 61
    5c92:	de b7       	in	r29, 0x3e	; 62
    5c94:	ee e0       	ldi	r30, 0x0E	; 14
    5c96:	0c 94 24 2f 	jmp	0x5e48	; 0x5e48 <__epilogue_restores__+0x8>

00005c9a <abort>:
    5c9a:	81 e0       	ldi	r24, 0x01	; 1
    5c9c:	90 e0       	ldi	r25, 0x00	; 0
    5c9e:	f8 94       	cli
    5ca0:	0c 94 3b 2f 	jmp	0x5e76	; 0x5e76 <__do_global_dtors>

00005ca4 <atol>:
    5ca4:	1f 93       	push	r17
    5ca6:	fc 01       	movw	r30, r24
    5ca8:	99 27       	eor	r25, r25
    5caa:	88 27       	eor	r24, r24
    5cac:	bc 01       	movw	r22, r24
    5cae:	e8 94       	clt
    5cb0:	11 91       	ld	r17, Z+
    5cb2:	10 32       	cpi	r17, 0x20	; 32
    5cb4:	e9 f3       	breq	.-6      	; 0x5cb0 <atol+0xc>
    5cb6:	19 30       	cpi	r17, 0x09	; 9
    5cb8:	10 f0       	brcs	.+4      	; 0x5cbe <atol+0x1a>
    5cba:	1e 30       	cpi	r17, 0x0E	; 14
    5cbc:	c8 f3       	brcs	.-14     	; 0x5cb0 <atol+0xc>
    5cbe:	1b 32       	cpi	r17, 0x2B	; 43
    5cc0:	51 f0       	breq	.+20     	; 0x5cd6 <atol+0x32>
    5cc2:	1d 32       	cpi	r17, 0x2D	; 45
    5cc4:	49 f4       	brne	.+18     	; 0x5cd8 <atol+0x34>
    5cc6:	68 94       	set
    5cc8:	06 c0       	rjmp	.+12     	; 0x5cd6 <atol+0x32>
    5cca:	0e 94 bd 2e 	call	0x5d7a	; 0x5d7a <__mulsi_const_10>
    5cce:	61 0f       	add	r22, r17
    5cd0:	71 1d       	adc	r23, r1
    5cd2:	81 1d       	adc	r24, r1
    5cd4:	91 1d       	adc	r25, r1
    5cd6:	11 91       	ld	r17, Z+
    5cd8:	10 53       	subi	r17, 0x30	; 48
    5cda:	1a 30       	cpi	r17, 0x0A	; 10
    5cdc:	b0 f3       	brcs	.-20     	; 0x5cca <atol+0x26>
    5cde:	3e f4       	brtc	.+14     	; 0x5cee <atol+0x4a>
    5ce0:	90 95       	com	r25
    5ce2:	80 95       	com	r24
    5ce4:	70 95       	com	r23
    5ce6:	61 95       	neg	r22
    5ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    5cea:	8f 4f       	sbci	r24, 0xFF	; 255
    5cec:	9f 4f       	sbci	r25, 0xFF	; 255
    5cee:	1f 91       	pop	r17
    5cf0:	08 95       	ret

00005cf2 <memcpy>:
    5cf2:	fb 01       	movw	r30, r22
    5cf4:	dc 01       	movw	r26, r24
    5cf6:	02 c0       	rjmp	.+4      	; 0x5cfc <memcpy+0xa>
    5cf8:	01 90       	ld	r0, Z+
    5cfa:	0d 92       	st	X+, r0
    5cfc:	41 50       	subi	r20, 0x01	; 1
    5cfe:	50 40       	sbci	r21, 0x00	; 0
    5d00:	d8 f7       	brcc	.-10     	; 0x5cf8 <memcpy+0x6>
    5d02:	08 95       	ret

00005d04 <strcpy>:
    5d04:	fb 01       	movw	r30, r22
    5d06:	dc 01       	movw	r26, r24
    5d08:	01 90       	ld	r0, Z+
    5d0a:	0d 92       	st	X+, r0
    5d0c:	00 20       	and	r0, r0
    5d0e:	e1 f7       	brne	.-8      	; 0x5d08 <strcpy+0x4>
    5d10:	08 95       	ret

00005d12 <strstr>:
    5d12:	fb 01       	movw	r30, r22
    5d14:	51 91       	ld	r21, Z+
    5d16:	55 23       	and	r21, r21
    5d18:	a9 f0       	breq	.+42     	; 0x5d44 <strstr+0x32>
    5d1a:	bf 01       	movw	r22, r30
    5d1c:	dc 01       	movw	r26, r24
    5d1e:	4d 91       	ld	r20, X+
    5d20:	45 17       	cp	r20, r21
    5d22:	41 11       	cpse	r20, r1
    5d24:	e1 f7       	brne	.-8      	; 0x5d1e <strstr+0xc>
    5d26:	59 f4       	brne	.+22     	; 0x5d3e <strstr+0x2c>
    5d28:	cd 01       	movw	r24, r26
    5d2a:	01 90       	ld	r0, Z+
    5d2c:	00 20       	and	r0, r0
    5d2e:	49 f0       	breq	.+18     	; 0x5d42 <strstr+0x30>
    5d30:	4d 91       	ld	r20, X+
    5d32:	40 15       	cp	r20, r0
    5d34:	41 11       	cpse	r20, r1
    5d36:	c9 f3       	breq	.-14     	; 0x5d2a <strstr+0x18>
    5d38:	fb 01       	movw	r30, r22
    5d3a:	41 11       	cpse	r20, r1
    5d3c:	ef cf       	rjmp	.-34     	; 0x5d1c <strstr+0xa>
    5d3e:	81 e0       	ldi	r24, 0x01	; 1
    5d40:	90 e0       	ldi	r25, 0x00	; 0
    5d42:	01 97       	sbiw	r24, 0x01	; 1
    5d44:	08 95       	ret

00005d46 <ltoa>:
    5d46:	25 32       	cpi	r18, 0x25	; 37
    5d48:	31 05       	cpc	r19, r1
    5d4a:	20 f4       	brcc	.+8      	; 0x5d54 <ltoa+0xe>
    5d4c:	22 30       	cpi	r18, 0x02	; 2
    5d4e:	10 f0       	brcs	.+4      	; 0x5d54 <ltoa+0xe>
    5d50:	0c 94 ae 2e 	jmp	0x5d5c	; 0x5d5c <__ltoa_ncheck>
    5d54:	fa 01       	movw	r30, r20
    5d56:	10 82       	st	Z, r1
    5d58:	ca 01       	movw	r24, r20
    5d5a:	08 95       	ret

00005d5c <__ltoa_ncheck>:
    5d5c:	bb 27       	eor	r27, r27
    5d5e:	2a 30       	cpi	r18, 0x0A	; 10
    5d60:	51 f4       	brne	.+20     	; 0x5d76 <__ltoa_ncheck+0x1a>
    5d62:	99 23       	and	r25, r25
    5d64:	42 f4       	brpl	.+16     	; 0x5d76 <__ltoa_ncheck+0x1a>
    5d66:	bd e2       	ldi	r27, 0x2D	; 45
    5d68:	90 95       	com	r25
    5d6a:	80 95       	com	r24
    5d6c:	70 95       	com	r23
    5d6e:	61 95       	neg	r22
    5d70:	7f 4f       	sbci	r23, 0xFF	; 255
    5d72:	8f 4f       	sbci	r24, 0xFF	; 255
    5d74:	9f 4f       	sbci	r25, 0xFF	; 255
    5d76:	0c 94 d3 2e 	jmp	0x5da6	; 0x5da6 <__ultoa_common>

00005d7a <__mulsi_const_10>:
    5d7a:	59 2f       	mov	r21, r25
    5d7c:	48 2f       	mov	r20, r24
    5d7e:	37 2f       	mov	r19, r23
    5d80:	26 2f       	mov	r18, r22
    5d82:	66 0f       	add	r22, r22
    5d84:	77 1f       	adc	r23, r23
    5d86:	88 1f       	adc	r24, r24
    5d88:	99 1f       	adc	r25, r25
    5d8a:	66 0f       	add	r22, r22
    5d8c:	77 1f       	adc	r23, r23
    5d8e:	88 1f       	adc	r24, r24
    5d90:	99 1f       	adc	r25, r25
    5d92:	62 0f       	add	r22, r18
    5d94:	73 1f       	adc	r23, r19
    5d96:	84 1f       	adc	r24, r20
    5d98:	95 1f       	adc	r25, r21
    5d9a:	66 0f       	add	r22, r22
    5d9c:	77 1f       	adc	r23, r23
    5d9e:	88 1f       	adc	r24, r24
    5da0:	99 1f       	adc	r25, r25
    5da2:	08 95       	ret

00005da4 <__ultoa_ncheck>:
    5da4:	bb 27       	eor	r27, r27

00005da6 <__ultoa_common>:
    5da6:	fa 01       	movw	r30, r20
    5da8:	a6 2f       	mov	r26, r22
    5daa:	62 17       	cp	r22, r18
    5dac:	71 05       	cpc	r23, r1
    5dae:	81 05       	cpc	r24, r1
    5db0:	91 05       	cpc	r25, r1
    5db2:	33 0b       	sbc	r19, r19
    5db4:	30 fb       	bst	r19, 0
    5db6:	66 f0       	brts	.+24     	; 0x5dd0 <__ultoa_common+0x2a>
    5db8:	aa 27       	eor	r26, r26
    5dba:	66 0f       	add	r22, r22
    5dbc:	77 1f       	adc	r23, r23
    5dbe:	88 1f       	adc	r24, r24
    5dc0:	99 1f       	adc	r25, r25
    5dc2:	aa 1f       	adc	r26, r26
    5dc4:	a2 17       	cp	r26, r18
    5dc6:	10 f0       	brcs	.+4      	; 0x5dcc <__ultoa_common+0x26>
    5dc8:	a2 1b       	sub	r26, r18
    5dca:	63 95       	inc	r22
    5dcc:	38 50       	subi	r19, 0x08	; 8
    5dce:	a9 f7       	brne	.-22     	; 0x5dba <__ultoa_common+0x14>
    5dd0:	a0 5d       	subi	r26, 0xD0	; 208
    5dd2:	aa 33       	cpi	r26, 0x3A	; 58
    5dd4:	08 f0       	brcs	.+2      	; 0x5dd8 <__ultoa_common+0x32>
    5dd6:	a9 5d       	subi	r26, 0xD9	; 217
    5dd8:	a1 93       	st	Z+, r26
    5dda:	36 f7       	brtc	.-52     	; 0x5da8 <__ultoa_common+0x2>
    5ddc:	b1 11       	cpse	r27, r1
    5dde:	b1 93       	st	Z+, r27
    5de0:	10 82       	st	Z, r1
    5de2:	ca 01       	movw	r24, r20
    5de4:	0c 94 f4 2e 	jmp	0x5de8	; 0x5de8 <strrev>

00005de8 <strrev>:
    5de8:	dc 01       	movw	r26, r24
    5dea:	fc 01       	movw	r30, r24
    5dec:	67 2f       	mov	r22, r23
    5dee:	71 91       	ld	r23, Z+
    5df0:	77 23       	and	r23, r23
    5df2:	e1 f7       	brne	.-8      	; 0x5dec <strrev+0x4>
    5df4:	32 97       	sbiw	r30, 0x02	; 2
    5df6:	04 c0       	rjmp	.+8      	; 0x5e00 <strrev+0x18>
    5df8:	7c 91       	ld	r23, X
    5dfa:	6d 93       	st	X+, r22
    5dfc:	70 83       	st	Z, r23
    5dfe:	62 91       	ld	r22, -Z
    5e00:	ae 17       	cp	r26, r30
    5e02:	bf 07       	cpc	r27, r31
    5e04:	c8 f3       	brcs	.-14     	; 0x5df8 <strrev+0x10>
    5e06:	08 95       	ret

00005e08 <__prologue_saves__>:
    5e08:	2f 92       	push	r2
    5e0a:	3f 92       	push	r3
    5e0c:	4f 92       	push	r4
    5e0e:	5f 92       	push	r5
    5e10:	6f 92       	push	r6
    5e12:	7f 92       	push	r7
    5e14:	8f 92       	push	r8
    5e16:	9f 92       	push	r9
    5e18:	af 92       	push	r10
    5e1a:	bf 92       	push	r11
    5e1c:	cf 92       	push	r12
    5e1e:	df 92       	push	r13
    5e20:	ef 92       	push	r14
    5e22:	ff 92       	push	r15
    5e24:	0f 93       	push	r16
    5e26:	1f 93       	push	r17
    5e28:	cf 93       	push	r28
    5e2a:	df 93       	push	r29
    5e2c:	cd b7       	in	r28, 0x3d	; 61
    5e2e:	de b7       	in	r29, 0x3e	; 62
    5e30:	ca 1b       	sub	r28, r26
    5e32:	db 0b       	sbc	r29, r27
    5e34:	0f b6       	in	r0, 0x3f	; 63
    5e36:	f8 94       	cli
    5e38:	de bf       	out	0x3e, r29	; 62
    5e3a:	0f be       	out	0x3f, r0	; 63
    5e3c:	cd bf       	out	0x3d, r28	; 61
    5e3e:	09 94       	ijmp

00005e40 <__epilogue_restores__>:
    5e40:	2a 88       	ldd	r2, Y+18	; 0x12
    5e42:	39 88       	ldd	r3, Y+17	; 0x11
    5e44:	48 88       	ldd	r4, Y+16	; 0x10
    5e46:	5f 84       	ldd	r5, Y+15	; 0x0f
    5e48:	6e 84       	ldd	r6, Y+14	; 0x0e
    5e4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    5e4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    5e4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5e50:	aa 84       	ldd	r10, Y+10	; 0x0a
    5e52:	b9 84       	ldd	r11, Y+9	; 0x09
    5e54:	c8 84       	ldd	r12, Y+8	; 0x08
    5e56:	df 80       	ldd	r13, Y+7	; 0x07
    5e58:	ee 80       	ldd	r14, Y+6	; 0x06
    5e5a:	fd 80       	ldd	r15, Y+5	; 0x05
    5e5c:	0c 81       	ldd	r16, Y+4	; 0x04
    5e5e:	1b 81       	ldd	r17, Y+3	; 0x03
    5e60:	aa 81       	ldd	r26, Y+2	; 0x02
    5e62:	b9 81       	ldd	r27, Y+1	; 0x01
    5e64:	ce 0f       	add	r28, r30
    5e66:	d1 1d       	adc	r29, r1
    5e68:	0f b6       	in	r0, 0x3f	; 63
    5e6a:	f8 94       	cli
    5e6c:	de bf       	out	0x3e, r29	; 62
    5e6e:	0f be       	out	0x3f, r0	; 63
    5e70:	cd bf       	out	0x3d, r28	; 61
    5e72:	ed 01       	movw	r28, r26
    5e74:	08 95       	ret

00005e76 <__do_global_dtors>:
    5e76:	10 e0       	ldi	r17, 0x00	; 0
    5e78:	cc ef       	ldi	r28, 0xFC	; 252
    5e7a:	d0 e0       	ldi	r29, 0x00	; 0
    5e7c:	04 c0       	rjmp	.+8      	; 0x5e86 <__do_global_dtors+0x10>
    5e7e:	fe 01       	movw	r30, r28
    5e80:	0e 94 4c 2c 	call	0x5898	; 0x5898 <__tablejump2__>
    5e84:	21 96       	adiw	r28, 0x01	; 1
    5e86:	cd 3f       	cpi	r28, 0xFD	; 253
    5e88:	d1 07       	cpc	r29, r17
    5e8a:	c9 f7       	brne	.-14     	; 0x5e7e <__do_global_dtors+0x8>
    5e8c:	f8 94       	cli

00005e8e <__stop_program>:
    5e8e:	ff cf       	rjmp	.-2      	; 0x5e8e <__stop_program>
