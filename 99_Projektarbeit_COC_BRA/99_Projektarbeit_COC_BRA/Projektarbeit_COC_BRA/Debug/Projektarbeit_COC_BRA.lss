
Projektarbeit_COC_BRA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000206  00800100  0000526a  000052fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000526a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002d1  00800306  00800306  00005504  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005504  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005534  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c78  00000000  00000000  00005574  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001a0a5  00000000  00000000  000061ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000450d  00000000  00000000  00020291  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006d78  00000000  00000000  0002479e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002a10  00000000  00000000  0002b518  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000053a7  00000000  00000000  0002df28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000e391  00000000  00000000  000332cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d48  00000000  00000000  00041660  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__dtors_end>
       4:	0c 94 f4 20 	jmp	0x41e8	; 0x41e8 <__vector_1>
       8:	0c 94 1b 21 	jmp	0x4236	; 0x4236 <__vector_2>
       c:	0c 94 42 21 	jmp	0x4284	; 0x4284 <__vector_3>
      10:	0c 94 69 21 	jmp	0x42d2	; 0x42d2 <__vector_4>
      14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      1c:	0c 94 90 21 	jmp	0x4320	; 0x4320 <__vector_7>
      20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      28:	0c 94 0f 20 	jmp	0x401e	; 0x401e <__vector_10>
      2c:	0c 94 ab 1e 	jmp	0x3d56	; 0x3d56 <__vector_11>
      30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      5c:	0c 94 b7 21 	jmp	0x436e	; 0x436e <__vector_23>
      60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      70:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      90:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__vector_36>
      94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      ac:	27 23       	and	r18, r23
      ae:	2c 23       	and	r18, r28
      b0:	31 23       	and	r19, r17
      b2:	3b 23       	and	r19, r27
      b4:	45 23       	and	r20, r21
      b6:	8f 23       	and	r24, r31
      b8:	8f 23       	and	r24, r31
      ba:	8f 23       	and	r24, r31
      bc:	4f 23       	and	r20, r31
      be:	59 23       	and	r21, r25
      c0:	63 23       	and	r22, r19
      c2:	6d 23       	and	r22, r29
      c4:	7a 23       	and	r23, r26
      c6:	8f 23       	and	r24, r31
      c8:	82 23       	and	r24, r18
      ca:	b0 23       	and	r27, r16
      cc:	b3 23       	and	r27, r19
      ce:	a2 23       	and	r26, r18
      d0:	a6 23       	and	r26, r22
      d2:	ac 23       	and	r26, r28
      d4:	d4 23       	and	r29, r20
      d6:	d4 23       	and	r29, r20
      d8:	d4 23       	and	r29, r20
      da:	b7 23       	and	r27, r23
      dc:	bb 23       	and	r27, r27
      de:	bf 23       	and	r27, r31
      e0:	c5 23       	and	r28, r21
      e2:	c9 23       	and	r28, r25
      e4:	d4 23       	and	r29, r20
      e6:	cf 23       	and	r28, r31

000000e8 <USB_DeviceDescriptorIAD>:
      e8:	12 01 00 02 ef 02 01 40 41 23 36 80 00 01 01 02     .......@A#6.....
      f8:	03 01                                               ..

000000fa <STRING_MANUFACTURER>:
      fa:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

00000106 <STRING_PRODUCT>:
     106:	41 72 64 75 69 6e 6f 20 4c 65 6f 6e 61 72 64 6f     Arduino Leonardo
	...

00000117 <STRING_LANGUAGE>:
     117:	04 03 09 04                                         ....

0000011b <analog_pin_to_channel_PGM>:
     11b:	07 06 05 04 01 00 08 0a 0b 0c 0d 09                 ............

00000127 <digital_pin_to_timer_PGM>:
     127:	00 00 00 02 00 09 0f 00 00 03 04 01 00 0c 00 00     ................
	...

00000146 <digital_pin_to_bit_mask_PGM>:
     146:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     156:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

00000165 <digital_pin_to_port_PGM>:
     165:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     175:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

00000184 <port_to_input_PGM>:
     184:	00 00 00 00 23 00 26 00 29 00 2c 00 2f 00           ....#.&.).,./.

00000192 <port_to_output_PGM>:
     192:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

000001a0 <port_to_mode_PGM>:
     1a0:	00 00 00 00 24 00 27 00 2a 00 2d 00 30 00           ....$.'.*.-.0.

000001ae <_cdcInterface>:
     1ae:	08 0b 00 02 02 02 01 00 09 04 00 00 01 02 02 00     ................
     1be:	00 05 24 00 10 01 05 24 01 01 01 04 24 02 06 05     ..$....$....$...
     1ce:	24 06 00 01 07 05 81 03 10 00 40 09 04 01 00 02     $.........@.....
     1de:	0a 00 00 00 07 05 02 02 40 00 00 07 05 83 02 40     ........@......@
	...

000001f0 <__ctors_start>:
     1f0:	60 08       	sbc	r6, r0
     1f2:	34 18       	sub	r3, r4
     1f4:	f1 25       	eor	r31, r1

000001f6 <__ctors_end>:
     1f6:	d9 09       	sbc	r29, r9

000001f8 <__dtors_end>:
     1f8:	11 24       	eor	r1, r1
     1fa:	1f be       	out	0x3f, r1	; 63
     1fc:	cf ef       	ldi	r28, 0xFF	; 255
     1fe:	da e0       	ldi	r29, 0x0A	; 10
     200:	de bf       	out	0x3e, r29	; 62
     202:	cd bf       	out	0x3d, r28	; 61

00000204 <__do_copy_data>:
     204:	13 e0       	ldi	r17, 0x03	; 3
     206:	a0 e0       	ldi	r26, 0x00	; 0
     208:	b1 e0       	ldi	r27, 0x01	; 1
     20a:	ea e6       	ldi	r30, 0x6A	; 106
     20c:	f2 e5       	ldi	r31, 0x52	; 82
     20e:	02 c0       	rjmp	.+4      	; 0x214 <__do_copy_data+0x10>
     210:	05 90       	lpm	r0, Z+
     212:	0d 92       	st	X+, r0
     214:	a6 30       	cpi	r26, 0x06	; 6
     216:	b1 07       	cpc	r27, r17
     218:	d9 f7       	brne	.-10     	; 0x210 <__do_copy_data+0xc>

0000021a <__do_clear_bss>:
     21a:	25 e0       	ldi	r18, 0x05	; 5
     21c:	a6 e0       	ldi	r26, 0x06	; 6
     21e:	b3 e0       	ldi	r27, 0x03	; 3
     220:	01 c0       	rjmp	.+2      	; 0x224 <.do_clear_bss_start>

00000222 <.do_clear_bss_loop>:
     222:	1d 92       	st	X+, r1

00000224 <.do_clear_bss_start>:
     224:	a7 3d       	cpi	r26, 0xD7	; 215
     226:	b2 07       	cpc	r27, r18
     228:	e1 f7       	brne	.-8      	; 0x222 <.do_clear_bss_loop>

0000022a <__do_global_ctors>:
     22a:	10 e0       	ldi	r17, 0x00	; 0
     22c:	cb ef       	ldi	r28, 0xFB	; 251
     22e:	d0 e0       	ldi	r29, 0x00	; 0
     230:	04 c0       	rjmp	.+8      	; 0x23a <__do_global_ctors+0x10>
     232:	21 97       	sbiw	r28, 0x01	; 1
     234:	fe 01       	movw	r30, r28
     236:	0e 94 db 26 	call	0x4db6	; 0x4db6 <__tablejump2__>
     23a:	c8 3f       	cpi	r28, 0xF8	; 248
     23c:	d1 07       	cpc	r29, r17
     23e:	c9 f7       	brne	.-14     	; 0x232 <__do_global_ctors+0x8>
     240:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <main>
     244:	0c 94 28 29 	jmp	0x5250	; 0x5250 <__do_global_dtors>

00000248 <__bad_interrupt>:
     248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <_Z6getkeyv>:
 */
int getkey(void)
{
	static int keys[NUMKEYS+1];
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	0e 94 cf 22 	call	0x459e	; 0x459e <analogRead>

	if (val > 1020) { // no key pressed
     252:	8d 3f       	cpi	r24, 0xFD	; 253
     254:	23 e0       	ldi	r18, 0x03	; 3
     256:	92 07       	cpc	r25, r18
     258:	20 f1       	brcs	.+72     	; 0x2a2 <_Z6getkeyv+0x56>
		if (++keys[0] > NOPRESS) {
     25a:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <__data_end>
     25e:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <__data_end+0x1>
     262:	01 96       	adiw	r24, 0x01	; 1
     264:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <__data_end+0x1>
     268:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <__data_end>
     26c:	03 97       	sbiw	r24, 0x03	; 3
     26e:	0c f4       	brge	.+2      	; 0x272 <_Z6getkeyv+0x26>
     270:	6a c0       	rjmp	.+212    	; 0x346 <_Z6getkeyv+0xfa>
     272:	e6 e0       	ldi	r30, 0x06	; 6
     274:	f3 e0       	ldi	r31, 0x03	; 3
     276:	20 e0       	ldi	r18, 0x00	; 0
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	90 e0       	ldi	r25, 0x00	; 0
			for(uint8_t i = 0; i <= NUMKEYS; i++){
				if(keys[i] > KEYPRESS){
     27e:	40 81       	ld	r20, Z
     280:	51 81       	ldd	r21, Z+1	; 0x01
     282:	44 30       	cpi	r20, 0x04	; 4
     284:	51 05       	cpc	r21, r1
     286:	2c f0       	brlt	.+10     	; 0x292 <_Z6getkeyv+0x46>
     288:	c9 01       	movw	r24, r18
					data = i;
					if(keys[i] > LONGPRESS) data += 5;
     28a:	49 3c       	cpi	r20, 0xC9	; 201
     28c:	51 05       	cpc	r21, r1
     28e:	0c f0       	brlt	.+2      	; 0x292 <_Z6getkeyv+0x46>
     290:	05 96       	adiw	r24, 0x05	; 5
				}
				keys[i] = 0;
     292:	11 92       	st	Z+, r1
     294:	11 92       	st	Z+, r1
     296:	2f 5f       	subi	r18, 0xFF	; 255
     298:	3f 4f       	sbci	r19, 0xFF	; 255
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);

	if (val > 1020) { // no key pressed
		if (++keys[0] > NOPRESS) {
			for(uint8_t i = 0; i <= NUMKEYS; i++){
     29a:	26 30       	cpi	r18, 0x06	; 6
     29c:	31 05       	cpc	r19, r1
     29e:	79 f7       	brne	.-34     	; 0x27e <_Z6getkeyv+0x32>
     2a0:	08 95       	ret
			}
		}
		else data = 0;
	}
	else {
		if (val < S1_LIMIT && keys[1] < 32000) ++keys[1]; // key1 pressed
     2a2:	89 34       	cpi	r24, 0x49	; 73
     2a4:	91 05       	cpc	r25, r1
     2a6:	70 f4       	brcc	.+28     	; 0x2c4 <_Z6getkeyv+0x78>
     2a8:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <__data_end+0x2>
     2ac:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <__data_end+0x3>
     2b0:	81 15       	cp	r24, r1
     2b2:	2d e7       	ldi	r18, 0x7D	; 125
     2b4:	92 07       	cpc	r25, r18
     2b6:	4c f4       	brge	.+18     	; 0x2ca <_Z6getkeyv+0x7e>
     2b8:	01 96       	adiw	r24, 0x01	; 1
     2ba:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <__data_end+0x3>
     2be:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <__data_end+0x2>
     2c2:	41 c0       	rjmp	.+130    	; 0x346 <_Z6getkeyv+0xfa>
		else if (val < S2_LIMIT && keys[2] < 32000) ++keys[2]; //key2 pressed
     2c4:	8e 3e       	cpi	r24, 0xEE	; 238
     2c6:	91 05       	cpc	r25, r1
     2c8:	70 f4       	brcc	.+28     	; 0x2e6 <_Z6getkeyv+0x9a>
     2ca:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <__data_end+0x4>
     2ce:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <__data_end+0x5>
     2d2:	81 15       	cp	r24, r1
     2d4:	2d e7       	ldi	r18, 0x7D	; 125
     2d6:	92 07       	cpc	r25, r18
     2d8:	54 f4       	brge	.+20     	; 0x2ee <_Z6getkeyv+0xa2>
     2da:	01 96       	adiw	r24, 0x01	; 1
     2dc:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <__data_end+0x5>
     2e0:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <__data_end+0x4>
     2e4:	30 c0       	rjmp	.+96     	; 0x346 <_Z6getkeyv+0xfa>
		else if (val < S3_LIMIT && keys[3] < 32000) ++keys[3]; //key3 pressed
     2e6:	82 3a       	cpi	r24, 0xA2	; 162
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	92 07       	cpc	r25, r18
     2ec:	70 f4       	brcc	.+28     	; 0x30a <_Z6getkeyv+0xbe>
     2ee:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <__data_end+0x6>
     2f2:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <__data_end+0x7>
     2f6:	81 15       	cp	r24, r1
     2f8:	2d e7       	ldi	r18, 0x7D	; 125
     2fa:	92 07       	cpc	r25, r18
     2fc:	4c f4       	brge	.+18     	; 0x310 <_Z6getkeyv+0xc4>
     2fe:	01 96       	adiw	r24, 0x01	; 1
     300:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <__data_end+0x7>
     304:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <__data_end+0x6>
     308:	1e c0       	rjmp	.+60     	; 0x346 <_Z6getkeyv+0xfa>
		else if (val < S4_LIMIT && keys[4] < 32000) ++keys[4]; //key4 pressed
     30a:	80 37       	cpi	r24, 0x70	; 112
     30c:	92 40       	sbci	r25, 0x02	; 2
     30e:	70 f4       	brcc	.+28     	; 0x32c <_Z6getkeyv+0xe0>
     310:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <__data_end+0x8>
     314:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <__data_end+0x9>
     318:	81 15       	cp	r24, r1
     31a:	2d e7       	ldi	r18, 0x7D	; 125
     31c:	92 07       	cpc	r25, r18
     31e:	34 f4       	brge	.+12     	; 0x32c <_Z6getkeyv+0xe0>
     320:	01 96       	adiw	r24, 0x01	; 1
     322:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <__data_end+0x9>
     326:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <__data_end+0x8>
     32a:	0d c0       	rjmp	.+26     	; 0x346 <_Z6getkeyv+0xfa>
		else if ( keys[5] < 32000) ++keys[5]; // key5 pressed
     32c:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <__data_end+0xa>
     330:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <__data_end+0xb>
     334:	81 15       	cp	r24, r1
     336:	2d e7       	ldi	r18, 0x7D	; 125
     338:	92 07       	cpc	r25, r18
     33a:	2c f4       	brge	.+10     	; 0x346 <_Z6getkeyv+0xfa>
     33c:	01 96       	adiw	r24, 0x01	; 1
     33e:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <__data_end+0xb>
     342:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <__data_end+0xa>
		data = 0;
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	90 e0       	ldi	r25, 0x00	; 0
	}
	return data;
}
     34a:	08 95       	ret

0000034c <_ZN5Print17availableForWriteEv>:
		return 31;
	}
}
int Datum::GetYear(){return YYYY_;};
int Datum::GetMonth(){return MM_;};
int Datum::GetDay(){return DD_;};
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	08 95       	ret

00000352 <_ZN5Print5flushEv>:
     352:	08 95       	ret

00000354 <_ZN7hd4478013iosetContrastEh>:
     354:	8d ef       	ldi	r24, 0xFD	; 253
     356:	9f ef       	ldi	r25, 0xFF	; 255
     358:	08 95       	ret

0000035a <_Z14chooseTimeZonev>:
     35a:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <timeZoneChoosen>
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	89 27       	eor	r24, r25
     362:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <timeZoneChoosen>
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	08 95       	ret

0000036c <_Z10changeAMPMv>:
     36c:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <ampm>
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	89 27       	eor	r24, r25
     374:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <ampm>
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	08 95       	ret

0000037e <_Z8setAlarmv>:
     37e:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <weckerStatus>
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	89 27       	eor	r24, r25
     386:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <weckerStatus>
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	08 95       	ret

00000390 <_Z10wheelSpeedv>:
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	40 e8       	ldi	r20, 0x80	; 128
     396:	5f e3       	ldi	r21, 0x3F	; 63
     398:	60 91 a8 03 	lds	r22, 0x03A8	; 0x8003a8 <duration>
     39c:	70 91 a9 03 	lds	r23, 0x03A9	; 0x8003a9 <duration+0x1>
     3a0:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <duration+0x2>
     3a4:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <duration+0x3>
     3a8:	0e 94 39 18 	call	0x3072	; 0x3072 <__addsf3>
     3ac:	60 93 a8 03 	sts	0x03A8, r22	; 0x8003a8 <duration>
     3b0:	70 93 a9 03 	sts	0x03A9, r23	; 0x8003a9 <duration+0x1>
     3b4:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <duration+0x2>
     3b8:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <duration+0x3>
     3bc:	08 95       	ret

000003be <_Z9gpsScreeni>:
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	ec 01       	movw	r28, r24
     3c4:	40 e0       	ldi	r20, 0x00	; 0
     3c6:	60 e0       	ldi	r22, 0x00	; 0
     3c8:	82 e7       	ldi	r24, 0x72	; 114
     3ca:	94 e0       	ldi	r25, 0x04	; 4
     3cc:	0e 94 81 13 	call	0x2702	; 0x2702 <_ZN7hd447809setCursorEhh>
     3d0:	66 e3       	ldi	r22, 0x36	; 54
     3d2:	71 e0       	ldi	r23, 0x01	; 1
     3d4:	82 e7       	ldi	r24, 0x72	; 114
     3d6:	94 e0       	ldi	r25, 0x04	; 4
     3d8:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print5printEPKc>
     3dc:	ce 01       	movw	r24, r28
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	08 95       	ret

000003e4 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>:
     3e4:	0f 93       	push	r16
     3e6:	1f 93       	push	r17
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	18 2f       	mov	r17, r24
     3ee:	d0 e0       	ldi	r29, 0x00	; 0
     3f0:	c0 e2       	ldi	r28, 0x20	; 32
     3f2:	6c 2f       	mov	r22, r28
     3f4:	8d e0       	ldi	r24, 0x0D	; 13
     3f6:	95 e0       	ldi	r25, 0x05	; 5
     3f8:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEh>
     3fc:	8d e0       	ldi	r24, 0x0D	; 13
     3fe:	95 e0       	ldi	r25, 0x05	; 5
     400:	0e 94 31 18 	call	0x3062	; 0x3062 <_ZN7TwoWire15endTransmissionEv>
     404:	08 2f       	mov	r16, r24
     406:	61 e0       	ldi	r22, 0x01	; 1
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	0e 94 32 22 	call	0x4464	; 0x4464 <delay>
     412:	01 11       	cpse	r16, r1
     414:	03 c0       	rjmp	.+6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     416:	1d 17       	cp	r17, r29
     418:	f9 f0       	breq	.+62     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     41a:	df 5f       	subi	r29, 0xFF	; 255
     41c:	cf 5f       	subi	r28, 0xFF	; 255
     41e:	c8 32       	cpi	r28, 0x28	; 40
     420:	41 f7       	brne	.-48     	; 0x3f2 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0xe>
     422:	c8 e3       	ldi	r28, 0x38	; 56
     424:	6c 2f       	mov	r22, r28
     426:	8d e0       	ldi	r24, 0x0D	; 13
     428:	95 e0       	ldi	r25, 0x05	; 5
     42a:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEh>
     42e:	8d e0       	ldi	r24, 0x0D	; 13
     430:	95 e0       	ldi	r25, 0x05	; 5
     432:	0e 94 31 18 	call	0x3062	; 0x3062 <_ZN7TwoWire15endTransmissionEv>
     436:	08 2f       	mov	r16, r24
     438:	61 e0       	ldi	r22, 0x01	; 1
     43a:	70 e0       	ldi	r23, 0x00	; 0
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 32 22 	call	0x4464	; 0x4464 <delay>
     444:	01 11       	cpse	r16, r1
     446:	03 c0       	rjmp	.+6      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     448:	1d 17       	cp	r17, r29
     44a:	31 f0       	breq	.+12     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     44c:	df 5f       	subi	r29, 0xFF	; 255
     44e:	cf 5f       	subi	r28, 0xFF	; 255
     450:	c0 34       	cpi	r28, 0x40	; 64
     452:	41 f7       	brne	.-48     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	01 c0       	rjmp	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     458:	8c 2f       	mov	r24, r28
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	08 95       	ret

00000464 <_ZN7TwoWire5writeEi>:
     464:	dc 01       	movw	r26, r24
     466:	ed 91       	ld	r30, X+
     468:	fc 91       	ld	r31, X
     46a:	01 90       	ld	r0, Z+
     46c:	f0 81       	ld	r31, Z
     46e:	e0 2d       	mov	r30, r0
     470:	09 94       	ijmp

00000472 <_ZN4Zeit4TickEv>:
     472:	fc 01       	movw	r30, r24
     474:	84 81       	ldd	r24, Z+4	; 0x04
     476:	95 81       	ldd	r25, Z+5	; 0x05
     478:	01 96       	adiw	r24, 0x01	; 1
     47a:	2c e3       	ldi	r18, 0x3C	; 60
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	b9 01       	movw	r22, r18
     480:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <__divmodhi4>
     484:	95 83       	std	Z+5, r25	; 0x05
     486:	84 83       	std	Z+4, r24	; 0x04
     488:	89 2b       	or	r24, r25
     48a:	19 f0       	breq	.+6      	; 0x492 <_ZN4Zeit4TickEv+0x20>
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	08 95       	ret
     492:	82 81       	ldd	r24, Z+2	; 0x02
     494:	93 81       	ldd	r25, Z+3	; 0x03
     496:	01 96       	adiw	r24, 0x01	; 1
     498:	b9 01       	movw	r22, r18
     49a:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <__divmodhi4>
     49e:	93 83       	std	Z+3, r25	; 0x03
     4a0:	82 83       	std	Z+2, r24	; 0x02
     4a2:	89 2b       	or	r24, r25
     4a4:	99 f7       	brne	.-26     	; 0x48c <_ZN4Zeit4TickEv+0x1a>
     4a6:	80 81       	ld	r24, Z
     4a8:	91 81       	ldd	r25, Z+1	; 0x01
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	68 e1       	ldi	r22, 0x18	; 24
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <__divmodhi4>
     4b4:	ac 01       	movw	r20, r24
     4b6:	91 83       	std	Z+1, r25	; 0x01
     4b8:	80 83       	st	Z, r24
     4ba:	21 e0       	ldi	r18, 0x01	; 1
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	45 2b       	or	r20, r21
     4c0:	09 f0       	breq	.+2      	; 0x4c4 <_ZN4Zeit4TickEv+0x52>
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	82 2f       	mov	r24, r18
     4c6:	08 95       	ret

000004c8 <_ZN5Datum11DaysOfMonthEv>:
     4c8:	fc 01       	movw	r30, r24
     4ca:	22 81       	ldd	r18, Z+2	; 0x02
     4cc:	33 81       	ldd	r19, Z+3	; 0x03
     4ce:	26 30       	cpi	r18, 0x06	; 6
     4d0:	31 05       	cpc	r19, r1
     4d2:	d9 f0       	breq	.+54     	; 0x50a <_ZN5Datum11DaysOfMonthEv+0x42>
     4d4:	3c f4       	brge	.+14     	; 0x4e4 <_ZN5Datum11DaysOfMonthEv+0x1c>
     4d6:	22 30       	cpi	r18, 0x02	; 2
     4d8:	31 05       	cpc	r19, r1
     4da:	69 f0       	breq	.+26     	; 0x4f6 <_ZN5Datum11DaysOfMonthEv+0x2e>
     4dc:	24 30       	cpi	r18, 0x04	; 4
     4de:	31 05       	cpc	r19, r1
     4e0:	39 f4       	brne	.+14     	; 0x4f0 <_ZN5Datum11DaysOfMonthEv+0x28>
     4e2:	13 c0       	rjmp	.+38     	; 0x50a <_ZN5Datum11DaysOfMonthEv+0x42>
     4e4:	29 30       	cpi	r18, 0x09	; 9
     4e6:	31 05       	cpc	r19, r1
     4e8:	81 f0       	breq	.+32     	; 0x50a <_ZN5Datum11DaysOfMonthEv+0x42>
     4ea:	2b 30       	cpi	r18, 0x0B	; 11
     4ec:	31 05       	cpc	r19, r1
     4ee:	69 f0       	breq	.+26     	; 0x50a <_ZN5Datum11DaysOfMonthEv+0x42>
     4f0:	8f e1       	ldi	r24, 0x1F	; 31
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	08 95       	ret
     4f6:	fc 01       	movw	r30, r24
     4f8:	80 81       	ld	r24, Z
     4fa:	91 81       	ldd	r25, Z+1	; 0x01
     4fc:	83 70       	andi	r24, 0x03	; 3
     4fe:	99 27       	eor	r25, r25
     500:	89 2b       	or	r24, r25
     502:	31 f4       	brne	.+12     	; 0x510 <_ZN5Datum11DaysOfMonthEv+0x48>
     504:	8d e1       	ldi	r24, 0x1D	; 29
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	08 95       	ret
     50a:	8e e1       	ldi	r24, 0x1E	; 30
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	08 95       	ret
     510:	8c e1       	ldi	r24, 0x1C	; 28
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	08 95       	ret

00000516 <_ZN5Datum4TickEv>:
     516:	0f 93       	push	r16
     518:	1f 93       	push	r17
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	ec 01       	movw	r28, r24
     520:	0c 81       	ldd	r16, Y+4	; 0x04
     522:	1d 81       	ldd	r17, Y+5	; 0x05
     524:	0f 5f       	subi	r16, 0xFF	; 255
     526:	1f 4f       	sbci	r17, 0xFF	; 255
     528:	1d 83       	std	Y+5, r17	; 0x05
     52a:	0c 83       	std	Y+4, r16	; 0x04
     52c:	0e 94 64 02 	call	0x4c8	; 0x4c8 <_ZN5Datum11DaysOfMonthEv>
     530:	80 17       	cp	r24, r16
     532:	91 07       	cpc	r25, r17
     534:	a4 f4       	brge	.+40     	; 0x55e <_ZN5Datum4TickEv+0x48>
     536:	21 e0       	ldi	r18, 0x01	; 1
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	3d 83       	std	Y+5, r19	; 0x05
     53c:	2c 83       	std	Y+4, r18	; 0x04
     53e:	8a 81       	ldd	r24, Y+2	; 0x02
     540:	9b 81       	ldd	r25, Y+3	; 0x03
     542:	01 96       	adiw	r24, 0x01	; 1
     544:	8d 30       	cpi	r24, 0x0D	; 13
     546:	91 05       	cpc	r25, r1
     548:	1c f4       	brge	.+6      	; 0x550 <_ZN5Datum4TickEv+0x3a>
     54a:	9b 83       	std	Y+3, r25	; 0x03
     54c:	8a 83       	std	Y+2, r24	; 0x02
     54e:	07 c0       	rjmp	.+14     	; 0x55e <_ZN5Datum4TickEv+0x48>
     550:	3b 83       	std	Y+3, r19	; 0x03
     552:	2a 83       	std	Y+2, r18	; 0x02
     554:	88 81       	ld	r24, Y
     556:	99 81       	ldd	r25, Y+1	; 0x01
     558:	01 96       	adiw	r24, 0x01	; 1
     55a:	99 83       	std	Y+1, r25	; 0x01
     55c:	88 83       	st	Y, r24
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	1f 91       	pop	r17
     564:	0f 91       	pop	r16
     566:	08 95       	ret

00000568 <_Z5Watchv>:
 * frequent calls will result in counting the time. days-of-month and leap years are taken into account
 *
 * @return void
 */
void Watch()
{
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
#define INTERVAL 1000L
	static long target = INTERVAL;
	if (millis() > target)	{
     56c:	0e 94 01 22 	call	0x4402	; 0x4402 <millis>
     570:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZZ5WatchvE6target>
     574:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZZ5WatchvE6target+0x1>
     578:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <_ZZ5WatchvE6target+0x2>
     57c:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <_ZZ5WatchvE6target+0x3>
     580:	06 17       	cp	r16, r22
     582:	17 07       	cpc	r17, r23
     584:	28 07       	cpc	r18, r24
     586:	39 07       	cpc	r19, r25
     588:	70 f5       	brcc	.+92     	; 0x5e6 <_Z5Watchv+0x7e>
		target += INTERVAL;
     58a:	d9 01       	movw	r26, r18
     58c:	c8 01       	movw	r24, r16
     58e:	88 51       	subi	r24, 0x18	; 24
     590:	9c 4f       	sbci	r25, 0xFC	; 252
     592:	af 4f       	sbci	r26, 0xFF	; 255
     594:	bf 4f       	sbci	r27, 0xFF	; 255
     596:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZZ5WatchvE6target>
     59a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZZ5WatchvE6target+0x1>
     59e:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_ZZ5WatchvE6target+0x2>
     5a2:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_ZZ5WatchvE6target+0x3>
		if(zeitGMT.Tick()) datumGMT.Tick(); //Wenn die Zeit bei 24.00 ankommt wird ret = 1 gesetzt und das Datum eins weitergestellt
     5a6:	8b e4       	ldi	r24, 0x4B	; 75
     5a8:	93 e0       	ldi	r25, 0x03	; 3
     5aa:	0e 94 39 02 	call	0x472	; 0x472 <_ZN4Zeit4TickEv>
     5ae:	89 2b       	or	r24, r25
     5b0:	21 f0       	breq	.+8      	; 0x5ba <_Z5Watchv+0x52>
     5b2:	88 e2       	ldi	r24, 0x28	; 40
     5b4:	93 e0       	ldi	r25, 0x03	; 3
     5b6:	0e 94 8b 02 	call	0x516	; 0x516 <_ZN5Datum4TickEv>
		if(zeitTimeZone.Tick()) datumTimeZone.Tick();
     5ba:	83 e4       	ldi	r24, 0x43	; 67
     5bc:	93 e0       	ldi	r25, 0x03	; 3
     5be:	0e 94 39 02 	call	0x472	; 0x472 <_ZN4Zeit4TickEv>
     5c2:	89 2b       	or	r24, r25
     5c4:	21 f0       	breq	.+8      	; 0x5ce <_Z5Watchv+0x66>
     5c6:	80 e2       	ldi	r24, 0x20	; 32
     5c8:	93 e0       	ldi	r25, 0x03	; 3
     5ca:	0e 94 8b 02 	call	0x516	; 0x516 <_ZN5Datum4TickEv>
		if(zeitLocal.Tick()) datumLocal.Tick(); 
     5ce:	8b e3       	ldi	r24, 0x3B	; 59
     5d0:	93 e0       	ldi	r25, 0x03	; 3
     5d2:	0e 94 39 02 	call	0x472	; 0x472 <_ZN4Zeit4TickEv>
     5d6:	89 2b       	or	r24, r25
     5d8:	31 f0       	breq	.+12     	; 0x5e6 <_Z5Watchv+0x7e>
     5da:	88 e1       	ldi	r24, 0x18	; 24
     5dc:	93 e0       	ldi	r25, 0x03	; 3
	}
#undef INTERVAL
}
     5de:	1f 91       	pop	r17
     5e0:	0f 91       	pop	r16
	static long target = INTERVAL;
	if (millis() > target)	{
		target += INTERVAL;
		if(zeitGMT.Tick()) datumGMT.Tick(); //Wenn die Zeit bei 24.00 ankommt wird ret = 1 gesetzt und das Datum eins weitergestellt
		if(zeitTimeZone.Tick()) datumTimeZone.Tick();
		if(zeitLocal.Tick()) datumLocal.Tick(); 
     5e2:	0c 94 8b 02 	jmp	0x516	; 0x516 <_ZN5Datum4TickEv>
	}
#undef INTERVAL
}
     5e6:	1f 91       	pop	r17
     5e8:	0f 91       	pop	r16
     5ea:	08 95       	ret

000005ec <_ZN4Zeit6ChangeEi>:
 * input UP, DOWN, RIGHT, LEFT_KEY is processed and returned as NO_KEY 
 *
 * @return int processed user input,  all except the four above mentioned is returned
 */
int Zeit::Change(int key)
{
     5ec:	fc 01       	movw	r30, r24
     5ee:	cb 01       	movw	r24, r22
	if((set_ < 1) || (set_ > 2)) set_ = 1;
     5f0:	26 81       	ldd	r18, Z+6	; 0x06
     5f2:	37 81       	ldd	r19, Z+7	; 0x07
     5f4:	21 50       	subi	r18, 0x01	; 1
     5f6:	31 09       	sbc	r19, r1
     5f8:	22 30       	cpi	r18, 0x02	; 2
     5fa:	31 05       	cpc	r19, r1
     5fc:	58 f0       	brcs	.+22     	; 0x614 <_ZN4Zeit6ChangeEi+0x28>
     5fe:	21 e0       	ldi	r18, 0x01	; 1
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	37 83       	std	Z+7, r19	; 0x07
     604:	26 83       	std	Z+6, r18	; 0x06
	switch(key){
     606:	62 30       	cpi	r22, 0x02	; 2
     608:	71 05       	cpc	r23, r1
     60a:	69 f0       	breq	.+26     	; 0x626 <_ZN4Zeit6ChangeEi+0x3a>
     60c:	64 30       	cpi	r22, 0x04	; 4
     60e:	71 05       	cpc	r23, r1
     610:	39 f0       	breq	.+14     	; 0x620 <_ZN4Zeit6ChangeEi+0x34>
     612:	14 c0       	rjmp	.+40     	; 0x63c <_ZN4Zeit6ChangeEi+0x50>
     614:	62 30       	cpi	r22, 0x02	; 2
     616:	71 05       	cpc	r23, r1
     618:	31 f0       	breq	.+12     	; 0x626 <_ZN4Zeit6ChangeEi+0x3a>
     61a:	64 30       	cpi	r22, 0x04	; 4
     61c:	71 05       	cpc	r23, r1
     61e:	49 f4       	brne	.+18     	; 0x632 <_ZN4Zeit6ChangeEi+0x46>
	case RIGHT_KEY:
		set_ = 2;
     620:	82 e0       	ldi	r24, 0x02	; 2
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	02 c0       	rjmp	.+4      	; 0x62a <_ZN4Zeit6ChangeEi+0x3e>
		key = X_KEY;
		break;
	case LEFT_KEY:
		set_ = 1;
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	97 83       	std	Z+7, r25	; 0x07
     62c:	86 83       	std	Z+6, r24	; 0x06
		key = X_KEY;
     62e:	8a e0       	ldi	r24, 0x0A	; 10
     630:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}
	
	if(set_ == 1){
     632:	26 81       	ldd	r18, Z+6	; 0x06
     634:	37 81       	ldd	r19, Z+7	; 0x07
     636:	21 30       	cpi	r18, 0x01	; 1
     638:	31 05       	cpc	r19, r1
     63a:	d1 f4       	brne	.+52     	; 0x670 <_ZN4Zeit6ChangeEi+0x84>
		//! change hours
		switch(key){
     63c:	81 30       	cpi	r24, 0x01	; 1
     63e:	91 05       	cpc	r25, r1
     640:	21 f0       	breq	.+8      	; 0x64a <_ZN4Zeit6ChangeEi+0x5e>
     642:	83 30       	cpi	r24, 0x03	; 3
     644:	91 05       	cpc	r25, r1
     646:	49 f0       	breq	.+18     	; 0x65a <_ZN4Zeit6ChangeEi+0x6e>
     648:	08 95       	ret
		case UP_KEY:
			hh_=(hh_+1)%24;
     64a:	80 81       	ld	r24, Z
     64c:	91 81       	ldd	r25, Z+1	; 0x01
     64e:	01 96       	adiw	r24, 0x01	; 1
     650:	68 e1       	ldi	r22, 0x18	; 24
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <__divmodhi4>
     658:	08 c0       	rjmp	.+16     	; 0x66a <_ZN4Zeit6ChangeEi+0x7e>
			ss_ = 0;
			key=X_KEY;
			break;
		case DOWN_KEY:
			if(hh_==0) hh_=23;
     65a:	80 81       	ld	r24, Z
     65c:	91 81       	ldd	r25, Z+1	; 0x01
     65e:	00 97       	sbiw	r24, 0x00	; 0
     660:	19 f4       	brne	.+6      	; 0x668 <_ZN4Zeit6ChangeEi+0x7c>
     662:	87 e1       	ldi	r24, 0x17	; 23
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	01 c0       	rjmp	.+2      	; 0x66a <_ZN4Zeit6ChangeEi+0x7e>
			else --hh_;
     668:	01 97       	sbiw	r24, 0x01	; 1
     66a:	91 83       	std	Z+1, r25	; 0x01
     66c:	80 83       	st	Z, r24
     66e:	13 c0       	rjmp	.+38     	; 0x696 <_ZN4Zeit6ChangeEi+0xaa>
			ss_ = 0;
			key=X_KEY;
			break;
		}
	}
	else if(set_ == 2){
     670:	22 30       	cpi	r18, 0x02	; 2
     672:	31 05       	cpc	r19, r1
     674:	f1 f4       	brne	.+60     	; 0x6b2 <_ZN4Zeit6ChangeEi+0xc6>
		//! change minutes
		switch(key){
     676:	81 30       	cpi	r24, 0x01	; 1
     678:	91 05       	cpc	r25, r1
     67a:	21 f0       	breq	.+8      	; 0x684 <_ZN4Zeit6ChangeEi+0x98>
     67c:	83 30       	cpi	r24, 0x03	; 3
     67e:	91 05       	cpc	r25, r1
     680:	79 f0       	breq	.+30     	; 0x6a0 <_ZN4Zeit6ChangeEi+0xb4>
     682:	08 95       	ret
		case UP_KEY:
			mm_=(mm_+1)%60;
     684:	82 81       	ldd	r24, Z+2	; 0x02
     686:	93 81       	ldd	r25, Z+3	; 0x03
     688:	01 96       	adiw	r24, 0x01	; 1
     68a:	6c e3       	ldi	r22, 0x3C	; 60
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <__divmodhi4>
     692:	93 83       	std	Z+3, r25	; 0x03
     694:	82 83       	std	Z+2, r24	; 0x02
			ss_ = 0;
     696:	15 82       	std	Z+5, r1	; 0x05
     698:	14 82       	std	Z+4, r1	; 0x04
			key=X_KEY;
     69a:	8a e0       	ldi	r24, 0x0A	; 10
     69c:	90 e0       	ldi	r25, 0x00	; 0
			break;
     69e:	08 95       	ret
		case DOWN_KEY:
			if(mm_==0) mm_=59;
     6a0:	82 81       	ldd	r24, Z+2	; 0x02
     6a2:	93 81       	ldd	r25, Z+3	; 0x03
     6a4:	00 97       	sbiw	r24, 0x00	; 0
     6a6:	19 f4       	brne	.+6      	; 0x6ae <_ZN4Zeit6ChangeEi+0xc2>
     6a8:	8b e3       	ldi	r24, 0x3B	; 59
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	f2 cf       	rjmp	.-28     	; 0x692 <_ZN4Zeit6ChangeEi+0xa6>
			else --mm_;
     6ae:	01 97       	sbiw	r24, 0x01	; 1
     6b0:	f0 cf       	rjmp	.-32     	; 0x692 <_ZN4Zeit6ChangeEi+0xa6>
			key=X_KEY;
			break;
		}
	}
	return key;
}
     6b2:	08 95       	ret

000006b4 <_Z11printhhmmssR4Zeit>:
 * @param[in] zeit: struct 
 * 
 * @return void
 */
void printhhmmss(class Zeit &z)
{
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	8c 01       	movw	r16, r24
	if (ampm)
     6be:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <ampm>
     6c2:	f8 01       	movw	r30, r16
     6c4:	c0 81       	ld	r28, Z
     6c6:	d1 81       	ldd	r29, Z+1	; 0x01
     6c8:	88 23       	and	r24, r24
     6ca:	89 f0       	breq	.+34     	; 0x6ee <_Z11printhhmmssR4Zeit+0x3a>
	{
		int ampmhours = z.GetHours(); 
		if (ampmhours > 12)
     6cc:	cd 30       	cpi	r28, 0x0D	; 13
     6ce:	d1 05       	cpc	r29, r1
     6d0:	0c f0       	brlt	.+2      	; 0x6d4 <_Z11printhhmmssR4Zeit+0x20>
		{
			 ampmhours -= 12;
     6d2:	2c 97       	sbiw	r28, 0x0c	; 12
			 if(ampmhours<=9)lcd.print("0");
			 lcd.print(ampmhours);
		}	
		else
		{
			if(ampmhours<=9)lcd.print("0");
     6d4:	ca 30       	cpi	r28, 0x0A	; 10
     6d6:	d1 05       	cpc	r29, r1
     6d8:	34 f4       	brge	.+12     	; 0x6e6 <_Z11printhhmmssR4Zeit+0x32>
     6da:	61 e4       	ldi	r22, 0x41	; 65
     6dc:	71 e0       	ldi	r23, 0x01	; 1
     6de:	82 e7       	ldi	r24, 0x72	; 114
     6e0:	94 e0       	ldi	r25, 0x04	; 4
     6e2:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print5printEPKc>
			 lcd.print(ampmhours);
     6e6:	4a e0       	ldi	r20, 0x0A	; 10
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	be 01       	movw	r22, r28
     6ec:	0d c0       	rjmp	.+26     	; 0x708 <_Z11printhhmmssR4Zeit+0x54>
		}	 
	}
	
	else
	{
		if(z.GetHours()<=9)lcd.print("0");
     6ee:	2a 97       	sbiw	r28, 0x0a	; 10
     6f0:	34 f4       	brge	.+12     	; 0x6fe <_Z11printhhmmssR4Zeit+0x4a>
     6f2:	61 e4       	ldi	r22, 0x41	; 65
     6f4:	71 e0       	ldi	r23, 0x01	; 1
     6f6:	82 e7       	ldi	r24, 0x72	; 114
     6f8:	94 e0       	ldi	r25, 0x04	; 4
     6fa:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print5printEPKc>
		lcd.print(z.GetHours());
     6fe:	f8 01       	movw	r30, r16
     700:	60 81       	ld	r22, Z
     702:	71 81       	ldd	r23, Z+1	; 0x01
     704:	4a e0       	ldi	r20, 0x0A	; 10
     706:	50 e0       	ldi	r21, 0x00	; 0
     708:	82 e7       	ldi	r24, 0x72	; 114
     70a:	94 e0       	ldi	r25, 0x04	; 4
     70c:	0e 94 86 1b 	call	0x370c	; 0x370c <_ZN5Print5printEii>
	}
	if(z.GetMinutes()<=9)lcd.print(":0"); else lcd.print(":");
     710:	f8 01       	movw	r30, r16
     712:	82 81       	ldd	r24, Z+2	; 0x02
     714:	93 81       	ldd	r25, Z+3	; 0x03
     716:	0a 97       	sbiw	r24, 0x0a	; 10
     718:	1c f4       	brge	.+6      	; 0x720 <_Z11printhhmmssR4Zeit+0x6c>
     71a:	60 e4       	ldi	r22, 0x40	; 64
     71c:	71 e0       	ldi	r23, 0x01	; 1
     71e:	02 c0       	rjmp	.+4      	; 0x724 <_Z11printhhmmssR4Zeit+0x70>
     720:	63 e4       	ldi	r22, 0x43	; 67
     722:	71 e0       	ldi	r23, 0x01	; 1
     724:	82 e7       	ldi	r24, 0x72	; 114
     726:	94 e0       	ldi	r25, 0x04	; 4
     728:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print5printEPKc>
	lcd.print(z.GetMinutes());
     72c:	f8 01       	movw	r30, r16
     72e:	62 81       	ldd	r22, Z+2	; 0x02
     730:	73 81       	ldd	r23, Z+3	; 0x03
     732:	4a e0       	ldi	r20, 0x0A	; 10
     734:	50 e0       	ldi	r21, 0x00	; 0
     736:	82 e7       	ldi	r24, 0x72	; 114
     738:	94 e0       	ldi	r25, 0x04	; 4
     73a:	0e 94 86 1b 	call	0x370c	; 0x370c <_ZN5Print5printEii>
	if(z.GetSeconds()<=9)lcd.print(":0"); else lcd.print(":");
     73e:	f8 01       	movw	r30, r16
     740:	84 81       	ldd	r24, Z+4	; 0x04
     742:	95 81       	ldd	r25, Z+5	; 0x05
     744:	0a 97       	sbiw	r24, 0x0a	; 10
     746:	1c f4       	brge	.+6      	; 0x74e <_Z11printhhmmssR4Zeit+0x9a>
     748:	60 e4       	ldi	r22, 0x40	; 64
     74a:	71 e0       	ldi	r23, 0x01	; 1
     74c:	02 c0       	rjmp	.+4      	; 0x752 <_Z11printhhmmssR4Zeit+0x9e>
     74e:	63 e4       	ldi	r22, 0x43	; 67
     750:	71 e0       	ldi	r23, 0x01	; 1
     752:	82 e7       	ldi	r24, 0x72	; 114
     754:	94 e0       	ldi	r25, 0x04	; 4
     756:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print5printEPKc>
	lcd.print(z.GetSeconds());
     75a:	f8 01       	movw	r30, r16
     75c:	64 81       	ldd	r22, Z+4	; 0x04
     75e:	75 81       	ldd	r23, Z+5	; 0x05
     760:	4a e0       	ldi	r20, 0x0A	; 10
     762:	50 e0       	ldi	r21, 0x00	; 0
     764:	82 e7       	ldi	r24, 0x72	; 114
     766:	94 e0       	ldi	r25, 0x04	; 4
     768:	0e 94 86 1b 	call	0x370c	; 0x370c <_ZN5Print5printEii>
	if (ampm && z.GetHours() > 12) lcd.print(" PM");
     76c:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <ampm>
     770:	88 23       	and	r24, r24
     772:	91 f0       	breq	.+36     	; 0x798 <_Z11printhhmmssR4Zeit+0xe4>
     774:	f8 01       	movw	r30, r16
     776:	80 81       	ld	r24, Z
     778:	91 81       	ldd	r25, Z+1	; 0x01
     77a:	0d 97       	sbiw	r24, 0x0d	; 13
     77c:	1c f0       	brlt	.+6      	; 0x784 <_Z11printhhmmssR4Zeit+0xd0>
     77e:	65 e4       	ldi	r22, 0x45	; 69
     780:	71 e0       	ldi	r23, 0x01	; 1
     782:	02 c0       	rjmp	.+4      	; 0x788 <_Z11printhhmmssR4Zeit+0xd4>
	else if (ampm && z.GetHours() <= 12) lcd.print(" AM");
     784:	69 e4       	ldi	r22, 0x49	; 73
     786:	71 e0       	ldi	r23, 0x01	; 1
     788:	82 e7       	ldi	r24, 0x72	; 114
     78a:	94 e0       	ldi	r25, 0x04	; 4
}
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	1f 91       	pop	r17
     792:	0f 91       	pop	r16
	if(z.GetMinutes()<=9)lcd.print(":0"); else lcd.print(":");
	lcd.print(z.GetMinutes());
	if(z.GetSeconds()<=9)lcd.print(":0"); else lcd.print(":");
	lcd.print(z.GetSeconds());
	if (ampm && z.GetHours() > 12) lcd.print(" PM");
	else if (ampm && z.GetHours() <= 12) lcd.print(" AM");
     794:	0c 94 d9 1a 	jmp	0x35b2	; 0x35b2 <_ZN5Print5printEPKc>
}
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	08 95       	ret

000007a2 <_Z11alarmScreeni>:
 * @param[in] key : int, user input
 *
 * @return key
 */
int alarmScreen(int key)
{
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	ec 01       	movw	r28, r24
	lcd.setCursor(0,0);
     7a8:	40 e0       	ldi	r20, 0x00	; 0
     7aa:	60 e0       	ldi	r22, 0x00	; 0
     7ac:	82 e7       	ldi	r24, 0x72	; 114
     7ae:	94 e0       	ldi	r25, 0x04	; 4
     7b0:	0e 94 81 13 	call	0x2702	; 0x2702 <_ZN7hd447809setCursorEhh>
	lcd.print("Wecker: ");
     7b4:	6d e4       	ldi	r22, 0x4D	; 77
     7b6:	71 e0       	ldi	r23, 0x01	; 1
     7b8:	82 e7       	ldi	r24, 0x72	; 114
     7ba:	94 e0       	ldi	r25, 0x04	; 4
     7bc:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print5printEPKc>
	if (weckerStatus)
     7c0:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <weckerStatus>
     7c4:	88 23       	and	r24, r24
     7c6:	19 f0       	breq	.+6      	; 0x7ce <_Z11alarmScreeni+0x2c>
	{
		lcd.print("Ein");
     7c8:	66 e5       	ldi	r22, 0x56	; 86
     7ca:	71 e0       	ldi	r23, 0x01	; 1
     7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <_Z11alarmScreeni+0x30>
		
	}
	else lcd.print("Aus");
     7ce:	6a e5       	ldi	r22, 0x5A	; 90
     7d0:	71 e0       	ldi	r23, 0x01	; 1
     7d2:	82 e7       	ldi	r24, 0x72	; 114
     7d4:	94 e0       	ldi	r25, 0x04	; 4
     7d6:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
     7da:	41 e0       	ldi	r20, 0x01	; 1
     7dc:	60 e0       	ldi	r22, 0x00	; 0
     7de:	82 e7       	ldi	r24, 0x72	; 114
     7e0:	94 e0       	ldi	r25, 0x04	; 4
     7e2:	0e 94 81 13 	call	0x2702	; 0x2702 <_ZN7hd447809setCursorEhh>
	printhhmmss(weckzeit);
     7e6:	83 e3       	ldi	r24, 0x33	; 51
     7e8:	93 e0       	ldi	r25, 0x03	; 3
     7ea:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <_Z11printhhmmssR4Zeit>
	return key;
}
     7ee:	ce 01       	movw	r24, r28
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	08 95       	ret

000007f6 <_Z11changeAlarmi>:
 * @param[in] key : int, user input
 *
 * @return key
 */
int changeAlarm (int key)
{
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
     7fa:	ec 01       	movw	r28, r24
	lcd.setCursor(0,0);
     7fc:	40 e0       	ldi	r20, 0x00	; 0
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	82 e7       	ldi	r24, 0x72	; 114
     802:	94 e0       	ldi	r25, 0x04	; 4
     804:	0e 94 81 13 	call	0x2702	; 0x2702 <_ZN7hd447809setCursorEhh>
	lcd.print("Weckzeit?");
     808:	6e e5       	ldi	r22, 0x5E	; 94
     80a:	71 e0       	ldi	r23, 0x01	; 1
     80c:	82 e7       	ldi	r24, 0x72	; 114
     80e:	94 e0       	ldi	r25, 0x04	; 4
     810:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print5printEPKc>
	key = weckzeit.Change(key);
     814:	be 01       	movw	r22, r28
     816:	83 e3       	ldi	r24, 0x33	; 51
     818:	93 e0       	ldi	r25, 0x03	; 3
     81a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_ZN4Zeit6ChangeEi>
     81e:	ec 01       	movw	r28, r24
	lcd.setCursor(0,1);
     820:	41 e0       	ldi	r20, 0x01	; 1
     822:	60 e0       	ldi	r22, 0x00	; 0
     824:	82 e7       	ldi	r24, 0x72	; 114
     826:	94 e0       	ldi	r25, 0x04	; 4
     828:	0e 94 81 13 	call	0x2702	; 0x2702 <_ZN7hd447809setCursorEhh>
	printhhmmss(weckzeit);
     82c:	83 e3       	ldi	r24, 0x33	; 51
     82e:	93 e0       	ldi	r25, 0x03	; 3
     830:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <_Z11printhhmmssR4Zeit>

		return key;
	
	return key;
}
     834:	ce 01       	movw	r24, r28
     836:	df 91       	pop	r29
     838:	cf 91       	pop	r28
     83a:	08 95       	ret

0000083c <_Z13printddmmyyyyR5Datum>:
 * @param[in] datum: struct 
 * 
 * @return void
 */
void printddmmyyyy(class Datum &d)
{
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	ec 01       	movw	r28, r24
	if(d.GetDay()<=9)lcd.print(" ");
     842:	8c 81       	ldd	r24, Y+4	; 0x04
     844:	9d 81       	ldd	r25, Y+5	; 0x05
     846:	0a 97       	sbiw	r24, 0x0a	; 10
     848:	34 f4       	brge	.+12     	; 0x856 <_Z13printddmmyyyyR5Datum+0x1a>
     84a:	6e e7       	ldi	r22, 0x7E	; 126
     84c:	71 e0       	ldi	r23, 0x01	; 1
     84e:	82 e7       	ldi	r24, 0x72	; 114
     850:	94 e0       	ldi	r25, 0x04	; 4
     852:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print5printEPKc>
	lcd.print(d.GetDay());
     856:	6c 81       	ldd	r22, Y+4	; 0x04
     858:	7d 81       	ldd	r23, Y+5	; 0x05
     85a:	4a e0       	ldi	r20, 0x0A	; 10
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	82 e7       	ldi	r24, 0x72	; 114
     860:	94 e0       	ldi	r25, 0x04	; 4
     862:	0e 94 86 1b 	call	0x370c	; 0x370c <_ZN5Print5printEii>
	if(d.GetMonth()<=9)lcd.print(". "); else lcd.print(".");
     866:	8a 81       	ldd	r24, Y+2	; 0x02
     868:	9b 81       	ldd	r25, Y+3	; 0x03
     86a:	0a 97       	sbiw	r24, 0x0a	; 10
     86c:	1c f4       	brge	.+6      	; 0x874 <_Z13printddmmyyyyR5Datum+0x38>
     86e:	68 e6       	ldi	r22, 0x68	; 104
     870:	71 e0       	ldi	r23, 0x01	; 1
     872:	02 c0       	rjmp	.+4      	; 0x878 <_Z13printddmmyyyyR5Datum+0x3c>
     874:	6b e6       	ldi	r22, 0x6B	; 107
     876:	71 e0       	ldi	r23, 0x01	; 1
     878:	82 e7       	ldi	r24, 0x72	; 114
     87a:	94 e0       	ldi	r25, 0x04	; 4
     87c:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print5printEPKc>
	lcd.print(d.GetMonth());
     880:	6a 81       	ldd	r22, Y+2	; 0x02
     882:	7b 81       	ldd	r23, Y+3	; 0x03
     884:	4a e0       	ldi	r20, 0x0A	; 10
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	82 e7       	ldi	r24, 0x72	; 114
     88a:	94 e0       	ldi	r25, 0x04	; 4
     88c:	0e 94 86 1b 	call	0x370c	; 0x370c <_ZN5Print5printEii>
	lcd.print(".");
     890:	6b e6       	ldi	r22, 0x6B	; 107
     892:	71 e0       	ldi	r23, 0x01	; 1
     894:	82 e7       	ldi	r24, 0x72	; 114
     896:	94 e0       	ldi	r25, 0x04	; 4
     898:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print5printEPKc>
	lcd.print(d.GetYear());
     89c:	68 81       	ld	r22, Y
     89e:	79 81       	ldd	r23, Y+1	; 0x01
     8a0:	4a e0       	ldi	r20, 0x0A	; 10
     8a2:	50 e0       	ldi	r21, 0x00	; 0
     8a4:	82 e7       	ldi	r24, 0x72	; 114
     8a6:	94 e0       	ldi	r25, 0x04	; 4
}
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
	if(d.GetDay()<=9)lcd.print(" ");
	lcd.print(d.GetDay());
	if(d.GetMonth()<=9)lcd.print(". "); else lcd.print(".");
	lcd.print(d.GetMonth());
	lcd.print(".");
	lcd.print(d.GetYear());
     8ac:	0c 94 86 1b 	jmp	0x370c	; 0x370c <_ZN5Print5printEii>

000008b0 <_Z10dateScreeni>:
 * @param[in] key : int, user input
 *
 * @return key
 */
int dateScreen(int key)
{
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	ec 01       	movw	r28, r24
	lcd.setCursor(0,0);
     8b6:	40 e0       	ldi	r20, 0x00	; 0
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	82 e7       	ldi	r24, 0x72	; 114
     8bc:	94 e0       	ldi	r25, 0x04	; 4
     8be:	0e 94 81 13 	call	0x2702	; 0x2702 <_ZN7hd447809setCursorEhh>
	if (timeZoneChoosen)
     8c2:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <timeZoneChoosen>
     8c6:	88 23       	and	r24, r24
     8c8:	19 f1       	breq	.+70     	; 0x910 <_Z10dateScreeni+0x60>
	{
		printhhmmss(zeitTimeZone);
     8ca:	83 e4       	ldi	r24, 0x43	; 67
     8cc:	93 e0       	ldi	r25, 0x03	; 3
     8ce:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <_Z11printhhmmssR4Zeit>
		lcd.setCursor(13,0);
     8d2:	40 e0       	ldi	r20, 0x00	; 0
     8d4:	6d e0       	ldi	r22, 0x0D	; 13
     8d6:	82 e7       	ldi	r24, 0x72	; 114
     8d8:	94 e0       	ldi	r25, 0x04	; 4
     8da:	0e 94 81 13 	call	0x2702	; 0x2702 <_ZN7hd447809setCursorEhh>
		lcd.print(CITIES[tz].initials);
     8de:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <tz>
     8e2:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <tz+0x1>
     8e6:	2e e0       	ldi	r18, 0x0E	; 14
     8e8:	28 9f       	mul	r18, r24
     8ea:	b0 01       	movw	r22, r0
     8ec:	29 9f       	mul	r18, r25
     8ee:	70 0d       	add	r23, r0
     8f0:	11 24       	eor	r1, r1
     8f2:	6e 52       	subi	r22, 0x2E	; 46
     8f4:	7c 4f       	sbci	r23, 0xFC	; 252
     8f6:	82 e7       	ldi	r24, 0x72	; 114
     8f8:	94 e0       	ldi	r25, 0x04	; 4
     8fa:	0e 94 cb 1a 	call	0x3596	; 0x3596 <_ZN5Print5printERK6String>
		lcd.setCursor(0,1);
     8fe:	41 e0       	ldi	r20, 0x01	; 1
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	82 e7       	ldi	r24, 0x72	; 114
     904:	94 e0       	ldi	r25, 0x04	; 4
     906:	0e 94 81 13 	call	0x2702	; 0x2702 <_ZN7hd447809setCursorEhh>
		printddmmyyyy(datumTimeZone);
     90a:	80 e2       	ldi	r24, 0x20	; 32
     90c:	93 e0       	ldi	r25, 0x03	; 3
     90e:	0c c0       	rjmp	.+24     	; 0x928 <_Z10dateScreeni+0x78>
	}
	else
	{
		printhhmmss(zeitLocal);
     910:	8b e3       	ldi	r24, 0x3B	; 59
     912:	93 e0       	ldi	r25, 0x03	; 3
     914:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <_Z11printhhmmssR4Zeit>
		lcd.setCursor(0,1);
     918:	41 e0       	ldi	r20, 0x01	; 1
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	82 e7       	ldi	r24, 0x72	; 114
     91e:	94 e0       	ldi	r25, 0x04	; 4
     920:	0e 94 81 13 	call	0x2702	; 0x2702 <_ZN7hd447809setCursorEhh>
		printddmmyyyy(datumLocal);
     924:	88 e1       	ldi	r24, 0x18	; 24
     926:	93 e0       	ldi	r25, 0x03	; 3
     928:	0e 94 1e 04 	call	0x83c	; 0x83c <_Z13printddmmyyyyR5Datum>
	}
	return key;
}
     92c:	ce 01       	movw	r24, r28
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	08 95       	ret

00000934 <_Z17printHumidityTempv>:
 * und schreibt den Wert auf das LCD
 *
 * @return void
 */
void printHumidityTemp (void)
{
     934:	cf 92       	push	r12
     936:	df 92       	push	r13
     938:	ef 92       	push	r14
     93a:	ff 92       	push	r15
	lcd.setCursor(0,1);
     93c:	41 e0       	ldi	r20, 0x01	; 1
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	82 e7       	ldi	r24, 0x72	; 114
     942:	94 e0       	ldi	r25, 0x04	; 4
     944:	0e 94 81 13 	call	0x2702	; 0x2702 <_ZN7hd447809setCursorEhh>
	if (temp == 0) lcd.print("Sensor defekt");
     948:	c0 90 b2 03 	lds	r12, 0x03B2	; 0x8003b2 <temp>
     94c:	d0 90 b3 03 	lds	r13, 0x03B3	; 0x8003b3 <temp+0x1>
     950:	e0 90 b4 03 	lds	r14, 0x03B4	; 0x8003b4 <temp+0x2>
     954:	f0 90 b5 03 	lds	r15, 0x03B5	; 0x8003b5 <temp+0x3>
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	a9 01       	movw	r20, r18
     95e:	c7 01       	movw	r24, r14
     960:	b6 01       	movw	r22, r12
     962:	0e 94 a5 18 	call	0x314a	; 0x314a <__cmpsf2>
     966:	81 11       	cpse	r24, r1
     968:	03 c0       	rjmp	.+6      	; 0x970 <_Z17printHumidityTempv+0x3c>
     96a:	6d e6       	ldi	r22, 0x6D	; 109
     96c:	71 e0       	ldi	r23, 0x01	; 1
     96e:	23 c0       	rjmp	.+70     	; 0x9b6 <_Z17printHumidityTempv+0x82>
	else {
		lcd.print(temp);
     970:	22 e0       	ldi	r18, 0x02	; 2
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	b7 01       	movw	r22, r14
     976:	a6 01       	movw	r20, r12
     978:	82 e7       	ldi	r24, 0x72	; 114
     97a:	94 e0       	ldi	r25, 0x04	; 4
     97c:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <_ZN5Print5printEdi>
		lcd.print((char)223);
     980:	6f ed       	ldi	r22, 0xDF	; 223
     982:	82 e7       	ldi	r24, 0x72	; 114
     984:	94 e0       	ldi	r25, 0x04	; 4
     986:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <_ZN5Print5printEc>
		lcd.print("C   ");
     98a:	6b e7       	ldi	r22, 0x7B	; 123
     98c:	71 e0       	ldi	r23, 0x01	; 1
     98e:	82 e7       	ldi	r24, 0x72	; 114
     990:	94 e0       	ldi	r25, 0x04	; 4
     992:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print5printEPKc>
		lcd.print(hum);
     996:	40 91 ae 03 	lds	r20, 0x03AE	; 0x8003ae <hum>
     99a:	50 91 af 03 	lds	r21, 0x03AF	; 0x8003af <hum+0x1>
     99e:	60 91 b0 03 	lds	r22, 0x03B0	; 0x8003b0 <hum+0x2>
     9a2:	70 91 b1 03 	lds	r23, 0x03B1	; 0x8003b1 <hum+0x3>
     9a6:	22 e0       	ldi	r18, 0x02	; 2
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	82 e7       	ldi	r24, 0x72	; 114
     9ac:	94 e0       	ldi	r25, 0x04	; 4
     9ae:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <_ZN5Print5printEdi>
		lcd.print("%");
     9b2:	60 e8       	ldi	r22, 0x80	; 128
     9b4:	71 e0       	ldi	r23, 0x01	; 1
     9b6:	82 e7       	ldi	r24, 0x72	; 114
     9b8:	94 e0       	ldi	r25, 0x04	; 4
	}
}
     9ba:	ff 90       	pop	r15
     9bc:	ef 90       	pop	r14
     9be:	df 90       	pop	r13
     9c0:	cf 90       	pop	r12
	else {
		lcd.print(temp);
		lcd.print((char)223);
		lcd.print("C   ");
		lcd.print(hum);
		lcd.print("%");
     9c2:	0c 94 d9 1a 	jmp	0x35b2	; 0x35b2 <_ZN5Print5printEPKc>

000009c6 <_Z10homeScreeni>:
 * @param[in] key : int, user input
 *
 * @return key
 */
int homeScreen(int key)
{
     9c6:	0f 93       	push	r16
     9c8:	1f 93       	push	r17
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	ec 01       	movw	r28, r24
	if (readSensor < millis())
     9d0:	0e 94 01 22 	call	0x4402	; 0x4402 <millis>
     9d4:	00 91 b6 03 	lds	r16, 0x03B6	; 0x8003b6 <readSensor>
     9d8:	10 91 b7 03 	lds	r17, 0x03B7	; 0x8003b7 <readSensor+0x1>
     9dc:	20 91 b8 03 	lds	r18, 0x03B8	; 0x8003b8 <readSensor+0x2>
     9e0:	30 91 b9 03 	lds	r19, 0x03B9	; 0x8003b9 <readSensor+0x3>
     9e4:	06 17       	cp	r16, r22
     9e6:	17 07       	cpc	r17, r23
     9e8:	28 07       	cpc	r18, r24
     9ea:	39 07       	cpc	r19, r25
     9ec:	b8 f5       	brcc	.+110    	; 0xa5c <_Z10homeScreeni+0x96>
    int8_t read11(uint8_t pin);
    int8_t read(uint8_t pin);
    int8_t read12(uint8_t pin);

    inline int8_t read21(uint8_t pin)   { return read(pin); };
    inline int8_t read22(uint8_t pin)   { return read(pin); };
     9ee:	66 e1       	ldi	r22, 0x16	; 22
     9f0:	8a eb       	ldi	r24, 0xBA	; 186
     9f2:	93 e0       	ldi	r25, 0x03	; 3
     9f4:	0e 94 94 12 	call	0x2528	; 0x2528 <_ZN3dht4readEh>
	{	
		int readData = DHT.read22(tempSensor);
		temp = DHT.temperature;
     9f8:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <DHT+0x4>
     9fc:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <DHT+0x5>
     a00:	a0 91 c0 03 	lds	r26, 0x03C0	; 0x8003c0 <DHT+0x6>
     a04:	b0 91 c1 03 	lds	r27, 0x03C1	; 0x8003c1 <DHT+0x7>
     a08:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <temp>
     a0c:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <temp+0x1>
     a10:	a0 93 b4 03 	sts	0x03B4, r26	; 0x8003b4 <temp+0x2>
     a14:	b0 93 b5 03 	sts	0x03B5, r27	; 0x8003b5 <temp+0x3>
		hum = DHT.humidity;
     a18:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <DHT>
     a1c:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <DHT+0x1>
     a20:	a0 91 bc 03 	lds	r26, 0x03BC	; 0x8003bc <DHT+0x2>
     a24:	b0 91 bd 03 	lds	r27, 0x03BD	; 0x8003bd <DHT+0x3>
     a28:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <hum>
     a2c:	90 93 af 03 	sts	0x03AF, r25	; 0x8003af <hum+0x1>
     a30:	a0 93 b0 03 	sts	0x03B0, r26	; 0x8003b0 <hum+0x2>
     a34:	b0 93 b1 03 	sts	0x03B1, r27	; 0x8003b1 <hum+0x3>
		printHumidityTemp();
     a38:	0e 94 9a 04 	call	0x934	; 0x934 <_Z17printHumidityTempv>
		readSensor = millis() + 5000;
     a3c:	0e 94 01 22 	call	0x4402	; 0x4402 <millis>
     a40:	dc 01       	movw	r26, r24
     a42:	cb 01       	movw	r24, r22
     a44:	88 57       	subi	r24, 0x78	; 120
     a46:	9c 4e       	sbci	r25, 0xEC	; 236
     a48:	af 4f       	sbci	r26, 0xFF	; 255
     a4a:	bf 4f       	sbci	r27, 0xFF	; 255
     a4c:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <readSensor>
     a50:	90 93 b7 03 	sts	0x03B7, r25	; 0x8003b7 <readSensor+0x1>
     a54:	a0 93 b8 03 	sts	0x03B8, r26	; 0x8003b8 <readSensor+0x2>
     a58:	b0 93 b9 03 	sts	0x03B9, r27	; 0x8003b9 <readSensor+0x3>
	}
	printHumidityTemp();
     a5c:	0e 94 9a 04 	call	0x934	; 0x934 <_Z17printHumidityTempv>
	lcd.setCursor(0,0);
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	82 e7       	ldi	r24, 0x72	; 114
     a66:	94 e0       	ldi	r25, 0x04	; 4
     a68:	0e 94 81 13 	call	0x2702	; 0x2702 <_ZN7hd447809setCursorEhh>
	if (timeZoneChoosen)
     a6c:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <timeZoneChoosen>
     a70:	88 23       	and	r24, r24
     a72:	d9 f0       	breq	.+54     	; 0xaaa <_Z10homeScreeni+0xe4>
	{
		printhhmmss(zeitTimeZone);
     a74:	83 e4       	ldi	r24, 0x43	; 67
     a76:	93 e0       	ldi	r25, 0x03	; 3
     a78:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <_Z11printhhmmssR4Zeit>
		lcd.setCursor(13,0);
     a7c:	40 e0       	ldi	r20, 0x00	; 0
     a7e:	6d e0       	ldi	r22, 0x0D	; 13
     a80:	82 e7       	ldi	r24, 0x72	; 114
     a82:	94 e0       	ldi	r25, 0x04	; 4
     a84:	0e 94 81 13 	call	0x2702	; 0x2702 <_ZN7hd447809setCursorEhh>
		lcd.print(CITIES[tz].initials);
     a88:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <tz>
     a8c:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <tz+0x1>
     a90:	2e e0       	ldi	r18, 0x0E	; 14
     a92:	28 9f       	mul	r18, r24
     a94:	b0 01       	movw	r22, r0
     a96:	29 9f       	mul	r18, r25
     a98:	70 0d       	add	r23, r0
     a9a:	11 24       	eor	r1, r1
     a9c:	6e 52       	subi	r22, 0x2E	; 46
     a9e:	7c 4f       	sbci	r23, 0xFC	; 252
     aa0:	82 e7       	ldi	r24, 0x72	; 114
     aa2:	94 e0       	ldi	r25, 0x04	; 4
     aa4:	0e 94 cb 1a 	call	0x3596	; 0x3596 <_ZN5Print5printERK6String>
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <_Z10homeScreeni+0xec>
	}
	else
	{
		printhhmmss(zeitLocal);	
     aaa:	8b e3       	ldi	r24, 0x3B	; 59
     aac:	93 e0       	ldi	r25, 0x03	; 3
     aae:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <_Z11printhhmmssR4Zeit>
	}
	return key;
}
     ab2:	ce 01       	movw	r24, r28
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	08 95       	ret

00000abe <_Z13calculateTimev>:
 * Stellt sicher, dass die Zeiten richtig sind. 
 * Zwischen 0 und kleiner als 24.
 * Ändert das Datum bei Zeitübertrag.
 */
void calculateTime() {
	zeitTimeZone.hh_= zeitGMT.hh_ + CITIES[tz].timediff;
     abe:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <tz>
     ac2:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <tz+0x1>
     ac6:	2e e0       	ldi	r18, 0x0E	; 14
     ac8:	28 9f       	mul	r18, r24
     aca:	f0 01       	movw	r30, r0
     acc:	29 9f       	mul	r18, r25
     ace:	f0 0d       	add	r31, r0
     ad0:	11 24       	eor	r1, r1
     ad2:	e6 53       	subi	r30, 0x36	; 54
     ad4:	fc 4f       	sbci	r31, 0xFC	; 252
     ad6:	26 81       	ldd	r18, Z+6	; 0x06
     ad8:	37 81       	ldd	r19, Z+7	; 0x07
     ada:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <zeitGMT>
     ade:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <zeitGMT+0x1>
     ae2:	82 0f       	add	r24, r18
     ae4:	93 1f       	adc	r25, r19
     ae6:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <zeitTimeZone+0x1>
     aea:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <zeitTimeZone>
	datumTimeZone = datumGMT;
     aee:	28 e0       	ldi	r18, 0x08	; 8
     af0:	e8 e2       	ldi	r30, 0x28	; 40
     af2:	f3 e0       	ldi	r31, 0x03	; 3
     af4:	a0 e2       	ldi	r26, 0x20	; 32
     af6:	b3 e0       	ldi	r27, 0x03	; 3
     af8:	01 90       	ld	r0, Z+
     afa:	0d 92       	st	X+, r0
     afc:	2a 95       	dec	r18
     afe:	e1 f7       	brne	.-8      	; 0xaf8 <_Z13calculateTimev+0x3a>
	if (zeitTimeZone.hh_ > 23)
     b00:	88 31       	cpi	r24, 0x18	; 24
     b02:	91 05       	cpc	r25, r1
     b04:	4c f0       	brlt	.+18     	; 0xb18 <__stack+0x19>
	{
		zeitTimeZone.hh_ -= 24;
     b06:	48 97       	sbiw	r24, 0x18	; 24
     b08:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <zeitTimeZone+0x1>
     b0c:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <zeitTimeZone>
		datumTimeZone.Tick();
     b10:	80 e2       	ldi	r24, 0x20	; 32
     b12:	93 e0       	ldi	r25, 0x03	; 3
     b14:	0e 94 8b 02 	call	0x516	; 0x516 <_ZN5Datum4TickEv>
	}
	if (zeitTimeZone.hh_ < 0)
     b18:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <zeitTimeZone>
     b1c:	90 91 44 03 	lds	r25, 0x0344	; 0x800344 <zeitTimeZone+0x1>
     b20:	97 ff       	sbrs	r25, 7
     b22:	2f c0       	rjmp	.+94     	; 0xb82 <__stack+0x83>
	{
		zeitTimeZone.hh_ = 24 + zeitTimeZone.hh_;
     b24:	48 96       	adiw	r24, 0x18	; 24
     b26:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <zeitTimeZone+0x1>
     b2a:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <zeitTimeZone>
		datumTimeZone.DD_ -= 1;
     b2e:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <datumTimeZone+0x4>
     b32:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <datumTimeZone+0x5>
     b36:	01 97       	sbiw	r24, 0x01	; 1
     b38:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <datumTimeZone+0x5>
     b3c:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <datumTimeZone+0x4>
		if (datumTimeZone.DD_ == 0)
     b40:	89 2b       	or	r24, r25
     b42:	f9 f4       	brne	.+62     	; 0xb82 <__stack+0x83>
		{
			datumTimeZone.MM_ -= 1;
     b44:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <datumTimeZone+0x2>
     b48:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <datumTimeZone+0x3>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <datumTimeZone+0x3>
     b52:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <datumTimeZone+0x2>
			if (datumTimeZone.MM_ != 0)	datumTimeZone.DD_ = datumTimeZone.DaysOfMonth();	
     b56:	89 2b       	or	r24, r25
     b58:	29 f0       	breq	.+10     	; 0xb64 <__stack+0x65>
     b5a:	80 e2       	ldi	r24, 0x20	; 32
     b5c:	93 e0       	ldi	r25, 0x03	; 3
     b5e:	0e 94 64 02 	call	0x4c8	; 0x4c8 <_ZN5Datum11DaysOfMonthEv>
     b62:	0b c0       	rjmp	.+22     	; 0xb7a <__stack+0x7b>
			else
			{
				datumTimeZone.YYYY_ -= 1;
     b64:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <datumTimeZone>
     b68:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <datumTimeZone+0x1>
     b6c:	01 97       	sbiw	r24, 0x01	; 1
     b6e:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <datumTimeZone+0x1>
     b72:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <datumTimeZone>
				datumTimeZone.DD_ = 31;
     b76:	8f e1       	ldi	r24, 0x1F	; 31
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <datumTimeZone+0x5>
     b7e:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <datumTimeZone+0x4>
     b82:	08 95       	ret

00000b84 <_Z14changeTimeZonei>:
 * 
 * @return key
 */
int changeTimeZone (int key)
{
	switch (key)
     b84:	83 30       	cpi	r24, 0x03	; 3
     b86:	91 05       	cpc	r25, r1
     b88:	39 f0       	breq	.+14     	; 0xb98 <_Z14changeTimeZonei+0x14>
     b8a:	8a 30       	cpi	r24, 0x0A	; 10
     b8c:	91 05       	cpc	r25, r1
     b8e:	21 f0       	breq	.+8      	; 0xb98 <_Z14changeTimeZonei+0x14>
     b90:	81 30       	cpi	r24, 0x01	; 1
     b92:	91 05       	cpc	r25, r1
     b94:	51 f5       	brne	.+84     	; 0xbea <_Z14changeTimeZonei+0x66>
     b96:	17 c0       	rjmp	.+46     	; 0xbc6 <_Z14changeTimeZonei+0x42>
	{
		case X_KEY:
		//zeit2 = zeitLocal;
		case DOWN_KEY:
		lcd.clear();
     b98:	82 e7       	ldi	r24, 0x72	; 114
     b9a:	94 e0       	ldi	r25, 0x04	; 4
     b9c:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <_ZN7hd447805clearEv>
		if (tz == 0)
     ba0:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <tz>
     ba4:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <tz+0x1>
     ba8:	00 97       	sbiw	r24, 0x00	; 0
     baa:	19 f4       	brne	.+6      	; 0xbb2 <_Z14changeTimeZonei+0x2e>
		{
			tz = 11;
     bac:	8b e0       	ldi	r24, 0x0B	; 11
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	01 c0       	rjmp	.+2      	; 0xbb4 <_Z14changeTimeZonei+0x30>
		}
		else tz -= 1;
     bb2:	01 97       	sbiw	r24, 0x01	; 1
     bb4:	90 93 c9 03 	sts	0x03C9, r25	; 0x8003c9 <tz+0x1>
     bb8:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <tz>
		calculateTime();	
     bbc:	0e 94 5f 05 	call	0xabe	; 0xabe <_Z13calculateTimev>
		key = X_KEY;
     bc0:	8a e0       	ldi	r24, 0x0A	; 10
     bc2:	90 e0       	ldi	r25, 0x00	; 0
		break;
     bc4:	08 95       	ret
		case UP_KEY:
		lcd.clear();
     bc6:	82 e7       	ldi	r24, 0x72	; 114
     bc8:	94 e0       	ldi	r25, 0x04	; 4
     bca:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <_ZN7hd447805clearEv>
		if (tz == 11)
     bce:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <tz>
     bd2:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <tz+0x1>
     bd6:	8b 30       	cpi	r24, 0x0B	; 11
     bd8:	91 05       	cpc	r25, r1
     bda:	29 f4       	brne	.+10     	; 0xbe6 <_Z14changeTimeZonei+0x62>
		{
			tz = 0;
     bdc:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <tz+0x1>
     be0:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <tz>
     be4:	eb cf       	rjmp	.-42     	; 0xbbc <_Z14changeTimeZonei+0x38>
		}
		else tz += 1;
     be6:	01 96       	adiw	r24, 0x01	; 1
     be8:	e5 cf       	rjmp	.-54     	; 0xbb4 <_Z14changeTimeZonei+0x30>
		break;
		case RIGHT_KEY:
		break;
	}
	return key;
}
     bea:	08 95       	ret

00000bec <_Z11setTimeZonei>:
 * @param[in] key : int, user input
 *
 * @return key
 */
int setTimeZone(int key)
{
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
	int input = changeTimeZone(key);
     bf0:	0e 94 c2 05 	call	0xb84	; 0xb84 <_Z14changeTimeZonei>
     bf4:	ec 01       	movw	r28, r24
	lcd.setCursor(0,0);
     bf6:	40 e0       	ldi	r20, 0x00	; 0
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	82 e7       	ldi	r24, 0x72	; 114
     bfc:	94 e0       	ldi	r25, 0x04	; 4
     bfe:	0e 94 81 13 	call	0x2702	; 0x2702 <_ZN7hd447809setCursorEhh>
	lcd.print(CITIES[tz].name);
     c02:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <tz>
     c06:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <tz+0x1>
     c0a:	2e e0       	ldi	r18, 0x0E	; 14
     c0c:	28 9f       	mul	r18, r24
     c0e:	b0 01       	movw	r22, r0
     c10:	29 9f       	mul	r18, r25
     c12:	70 0d       	add	r23, r0
     c14:	11 24       	eor	r1, r1
     c16:	66 53       	subi	r22, 0x36	; 54
     c18:	7c 4f       	sbci	r23, 0xFC	; 252
     c1a:	82 e7       	ldi	r24, 0x72	; 114
     c1c:	94 e0       	ldi	r25, 0x04	; 4
     c1e:	0e 94 cb 1a 	call	0x3596	; 0x3596 <_ZN5Print5printERK6String>
	lcd.setCursor(0,1);
     c22:	41 e0       	ldi	r20, 0x01	; 1
     c24:	60 e0       	ldi	r22, 0x00	; 0
     c26:	82 e7       	ldi	r24, 0x72	; 114
     c28:	94 e0       	ldi	r25, 0x04	; 4
     c2a:	0e 94 81 13 	call	0x2702	; 0x2702 <_ZN7hd447809setCursorEhh>
	printhhmmss(zeitTimeZone);
     c2e:	83 e4       	ldi	r24, 0x43	; 67
     c30:	93 e0       	ldi	r25, 0x03	; 3
     c32:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <_Z11printhhmmssR4Zeit>
	//lcd.setCursor(11,0);
	//printddmmyyyy(datumTimeZone);
	return input;
}
     c36:	ce 01       	movw	r24, r28
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	08 95       	ret

00000c3e <_Z17callibratePointerv>:
 * @brief set zero position of the three pointer
 *
 */
void callibratePointer() 
{
	analogWrite(En_Motor,0);
     c3e:	60 e0       	ldi	r22, 0x00	; 0
     c40:	70 e0       	ldi	r23, 0x00	; 0
     c42:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <En_Motor>
     c46:	0e 94 00 23 	call	0x4600	; 0x4600 <analogWrite>
	lcd.clear();
     c4a:	82 e7       	ldi	r24, 0x72	; 114
     c4c:	94 e0       	ldi	r25, 0x04	; 4
     c4e:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <_ZN7hd447805clearEv>
	lcd.print("Zeiger kalibrieren");
     c52:	62 e8       	ldi	r22, 0x82	; 130
     c54:	71 e0       	ldi	r23, 0x01	; 1
     c56:	82 e7       	ldi	r24, 0x72	; 114
     c58:	94 e0       	ldi	r25, 0x04	; 4
     c5a:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print5printEPKc>
	delay(2000);
     c5e:	60 ed       	ldi	r22, 0xD0	; 208
     c60:	77 e0       	ldi	r23, 0x07	; 7
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	0e 94 32 22 	call	0x4464	; 0x4464 <delay>
	lcd.clear();
     c6a:	82 e7       	ldi	r24, 0x72	; 114
     c6c:	94 e0       	ldi	r25, 0x04	; 4
     c6e:	0c 94 7b 13 	jmp	0x26f6	; 0x26f6 <_ZN7hd447805clearEv>

00000c72 <_Z7advancev>:
}

void advance()//Motor Forward
{
	digitalWrite(Dir_Motor,LOW);
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Dir_Motor>
     c78:	0e 94 11 24 	call	0x4822	; 0x4822 <digitalWrite>
	analogWrite(En_Motor,val_output);
     c7c:	60 91 9f 03 	lds	r22, 0x039F	; 0x80039f <val_output>
     c80:	70 91 a0 03 	lds	r23, 0x03A0	; 0x8003a0 <val_output+0x1>
     c84:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <val_output+0x2>
     c88:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <val_output+0x3>
     c8c:	0e 94 1c 19 	call	0x3238	; 0x3238 <__fixsfsi>
     c90:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <En_Motor>
     c94:	0c 94 00 23 	jmp	0x4600	; 0x4600 <analogWrite>

00000c98 <setup>:
 * \return void
 */
void setup()
{
	//LCD konfigurieren
	lcd.begin(16, 2);
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	42 e0       	ldi	r20, 0x02	; 2
     c9c:	60 e1       	ldi	r22, 0x10	; 16
     c9e:	82 e7       	ldi	r24, 0x72	; 114
     ca0:	94 e0       	ldi	r25, 0x04	; 4
     ca2:	0e 94 a7 13 	call	0x274e	; 0x274e <_ZN7hd447805beginEhhh>
	lcd.noBacklight();
     ca6:	82 e7       	ldi	r24, 0x72	; 114
     ca8:	94 e0       	ldi	r25, 0x04	; 4
     caa:	0e 94 3c 13 	call	0x2678	; 0x2678 <_ZN7hd4478011noBacklightEv>
	lcd.noCursor();
     cae:	82 e7       	ldi	r24, 0x72	; 114
     cb0:	94 e0       	ldi	r25, 0x04	; 4
     cb2:	0e 94 41 14 	call	0x2882	; 0x2882 <_ZN7hd447808noCursorEv>
	lcd.home();
     cb6:	82 e7       	ldi	r24, 0x72	; 114
     cb8:	94 e0       	ldi	r25, 0x04	; 4
     cba:	0e 94 7e 13 	call	0x26fc	; 0x26fc <_ZN7hd447804homeEv>
	lcd.print("Romeo V2.2 Watch");
     cbe:	65 e9       	ldi	r22, 0x95	; 149
     cc0:	71 e0       	ldi	r23, 0x01	; 1
     cc2:	82 e7       	ldi	r24, 0x72	; 114
     cc4:	94 e0       	ldi	r25, 0x04	; 4
     cc6:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
     cca:	41 e0       	ldi	r20, 0x01	; 1
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	82 e7       	ldi	r24, 0x72	; 114
     cd0:	94 e0       	ldi	r25, 0x04	; 4
     cd2:	0e 94 81 13 	call	0x2702	; 0x2702 <_ZN7hd447809setCursorEhh>
	lcd.print("Coray / Bruno");
     cd6:	66 ea       	ldi	r22, 0xA6	; 166
     cd8:	71 e0       	ldi	r23, 0x01	; 1
     cda:	82 e7       	ldi	r24, 0x72	; 114
     cdc:	94 e0       	ldi	r25, 0x04	; 4
     cde:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_ZN5Print5printEPKc>
	while(millis()<3000);
     ce2:	0e 94 01 22 	call	0x4402	; 0x4402 <millis>
     ce6:	68 3b       	cpi	r22, 0xB8	; 184
     ce8:	7b 40       	sbci	r23, 0x0B	; 11
     cea:	81 05       	cpc	r24, r1
     cec:	91 05       	cpc	r25, r1
     cee:	c8 f3       	brcs	.-14     	; 0xce2 <setup+0x4a>
	lcd.clear();
     cf0:	82 e7       	ldi	r24, 0x72	; 114
     cf2:	94 e0       	ldi	r25, 0x04	; 4
     cf4:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <_ZN7hd447805clearEv>
	
	zeitTimeZone = zeitGMT;
     cf8:	88 e0       	ldi	r24, 0x08	; 8
     cfa:	eb e4       	ldi	r30, 0x4B	; 75
     cfc:	f3 e0       	ldi	r31, 0x03	; 3
     cfe:	a3 e4       	ldi	r26, 0x43	; 67
     d00:	b3 e0       	ldi	r27, 0x03	; 3
     d02:	01 90       	ld	r0, Z+
     d04:	0d 92       	st	X+, r0
     d06:	8a 95       	dec	r24
     d08:	e1 f7       	brne	.-8      	; 0xd02 <setup+0x6a>
	datumTimeZone = datumGMT;
     d0a:	88 e0       	ldi	r24, 0x08	; 8
     d0c:	e8 e2       	ldi	r30, 0x28	; 40
     d0e:	f3 e0       	ldi	r31, 0x03	; 3
     d10:	a0 e2       	ldi	r26, 0x20	; 32
     d12:	b3 e0       	ldi	r27, 0x03	; 3
     d14:	01 90       	ld	r0, Z+
     d16:	0d 92       	st	X+, r0
     d18:	8a 95       	dec	r24
     d1a:	e1 f7       	brne	.-8      	; 0xd14 <setup+0x7c>
	
	//Pin definitionen
	pinMode(btnPin, INPUT);
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	88 e0       	ldi	r24, 0x08	; 8
     d20:	0e 94 d5 23 	call	0x47aa	; 0x47aa <pinMode>
	pinMode(tempSensor,INPUT);
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	86 e1       	ldi	r24, 0x16	; 22
     d28:	0e 94 d5 23 	call	0x47aa	; 0x47aa <pinMode>
	pinMode(Dir_Motor, OUTPUT);
     d2c:	61 e0       	ldi	r22, 0x01	; 1
     d2e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Dir_Motor>
     d32:	0e 94 d5 23 	call	0x47aa	; 0x47aa <pinMode>
	pinMode(En_Motor, OUTPUT);
     d36:	61 e0       	ldi	r22, 0x01	; 1
     d38:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <En_Motor>
     d3c:	0e 94 d5 23 	call	0x47aa	; 0x47aa <pinMode>
	pinMode(encoder0pinB,INPUT);
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	87 e0       	ldi	r24, 0x07	; 7
     d44:	0e 94 d5 23 	call	0x47aa	; 0x47aa <pinMode>
	
	//PID-Regler
	Setpoint = 0; //Setpint 10 works
     d48:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <Setpoint>
     d4c:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <Setpoint+0x1>
     d50:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <Setpoint+0x2>
     d54:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <Setpoint+0x3>
	myPID.SetMode(AUTOMATIC);//PID is set to automatic mode
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	8b e5       	ldi	r24, 0x5B	; 91
     d5e:	93 e0       	ldi	r25, 0x03	; 3
     d60:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <_ZN3PID7SetModeEi>
	myPID.SetSampleTime(100);//Set PID sampling frequency is 100ms
     d64:	64 e6       	ldi	r22, 0x64	; 100
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	8b e5       	ldi	r24, 0x5B	; 91
     d6a:	93 e0       	ldi	r25, 0x03	; 3
     d6c:	0e 94 48 10 	call	0x2090	; 0x2090 <_ZN3PID13SetSampleTimeEi>
	attachInterrupt(digitalPinToInterrupt(7), wheelSpeed, CHANGE); //Pin 7 -> Interrupt 4
     d70:	41 e0       	ldi	r20, 0x01	; 1
     d72:	50 e0       	ldi	r21, 0x00	; 0
     d74:	68 ec       	ldi	r22, 0xC8	; 200
     d76:	71 e0       	ldi	r23, 0x01	; 1
     d78:	84 e0       	ldi	r24, 0x04	; 4
     d7a:	0e 94 a4 20 	call	0x4148	; 0x4148 <attachInterrupt>
	
	previousMillis = millis();
     d7e:	0e 94 01 22 	call	0x4402	; 0x4402 <millis>
     d82:	60 93 57 03 	sts	0x0357, r22	; 0x800357 <previousMillis>
     d86:	70 93 58 03 	sts	0x0358, r23	; 0x800358 <previousMillis+0x1>
     d8a:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <previousMillis+0x2>
     d8e:	90 93 5a 03 	sts	0x035A, r25	; 0x80035a <previousMillis+0x3>
     d92:	08 95       	ret

00000d94 <loop>:
 * called repeatedly in an endless loop
 * 
 * \return void
 */
void loop()
{
     d94:	cf 92       	push	r12
     d96:	df 92       	push	r13
     d98:	ef 92       	push	r14
     d9a:	ff 92       	push	r15
     d9c:	0f 93       	push	r16
     d9e:	1f 93       	push	r17
	//Button-Pin auslesen
	if (digitalRead(btnPin) == HIGH)
     da0:	88 e0       	ldi	r24, 0x08	; 8
     da2:	0e 94 40 24 	call	0x4880	; 0x4880 <digitalRead>
     da6:	01 97       	sbiw	r24, 0x01	; 1
     da8:	41 f4       	brne	.+16     	; 0xdba <loop+0x26>
		break;
	}
	if(newmenu >= 0) menu = newmenu;

	} //else Klammer
}
     daa:	1f 91       	pop	r17
     dac:	0f 91       	pop	r16
     dae:	ff 90       	pop	r15
     db0:	ef 90       	pop	r14
     db2:	df 90       	pop	r13
     db4:	cf 90       	pop	r12
void loop()
{
	//Button-Pin auslesen
	if (digitalRead(btnPin) == HIGH)
	{
		callibratePointer();
     db6:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <_Z17callibratePointerv>
	}
	else
	{
	//PID-Regelung
	advance(); //Motor forward
     dba:	0e 94 39 06 	call	0xc72	; 0xc72 <_Z7advancev>
	currentMillis = millis();
     dbe:	0e 94 01 22 	call	0x4402	; 0x4402 <millis>
     dc2:	60 93 53 03 	sts	0x0353, r22	; 0x800353 <currentMillis>
     dc6:	70 93 54 03 	sts	0x0354, r23	; 0x800354 <currentMillis+0x1>
     dca:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <currentMillis+0x2>
     dce:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <currentMillis+0x3>
	if (currentMillis - previousMillis > interval)
     dd2:	00 91 57 03 	lds	r16, 0x0357	; 0x800357 <previousMillis>
     dd6:	10 91 58 03 	lds	r17, 0x0358	; 0x800358 <previousMillis+0x1>
     dda:	20 91 59 03 	lds	r18, 0x0359	; 0x800359 <previousMillis+0x2>
     dde:	30 91 5a 03 	lds	r19, 0x035A	; 0x80035a <previousMillis+0x3>
     de2:	6b 01       	movw	r12, r22
     de4:	7c 01       	movw	r14, r24
     de6:	c0 1a       	sub	r12, r16
     de8:	d1 0a       	sbc	r13, r17
     dea:	e2 0a       	sbc	r14, r18
     dec:	f3 0a       	sbc	r15, r19
     dee:	00 91 0a 01 	lds	r16, 0x010A	; 0x80010a <interval>
     df2:	10 91 0b 01 	lds	r17, 0x010B	; 0x80010b <interval+0x1>
     df6:	01 2e       	mov	r0, r17
     df8:	00 0c       	add	r0, r0
     dfa:	22 0b       	sbc	r18, r18
     dfc:	33 0b       	sbc	r19, r19
     dfe:	0c 15       	cp	r16, r12
     e00:	1d 05       	cpc	r17, r13
     e02:	2e 05       	cpc	r18, r14
     e04:	3f 05       	cpc	r19, r15
     e06:	a4 f5       	brge	.+104    	; 0xe70 <loop+0xdc>
	{
		previousMillis = currentMillis;
     e08:	60 93 57 03 	sts	0x0357, r22	; 0x800357 <previousMillis>
     e0c:	70 93 58 03 	sts	0x0358, r23	; 0x800358 <previousMillis+0x1>
     e10:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <previousMillis+0x2>
     e14:	90 93 5a 03 	sts	0x035A, r25	; 0x80035a <previousMillis+0x3>
		
		abs_duration=duration * 60 / 1920;
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	40 e7       	ldi	r20, 0x70	; 112
     e1e:	52 e4       	ldi	r21, 0x42	; 66
     e20:	60 91 a8 03 	lds	r22, 0x03A8	; 0x8003a8 <duration>
     e24:	70 91 a9 03 	lds	r23, 0x03A9	; 0x8003a9 <duration+0x1>
     e28:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <duration+0x2>
     e2c:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <duration+0x3>
     e30:	0e 94 09 1a 	call	0x3412	; 0x3412 <__mulsf3>
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	40 ef       	ldi	r20, 0xF0	; 240
     e3a:	54 e4       	ldi	r21, 0x44	; 68
     e3c:	0e 94 aa 18 	call	0x3154	; 0x3154 <__divsf3>
     e40:	60 93 a4 03 	sts	0x03A4, r22	; 0x8003a4 <abs_duration>
     e44:	70 93 a5 03 	sts	0x03A5, r23	; 0x8003a5 <abs_duration+0x1>
     e48:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <abs_duration+0x2>
     e4c:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <abs_duration+0x3>
			
		result=myPID.Compute();//PID conversion is complete and returns 1
     e50:	8b e5       	ldi	r24, 0x5B	; 91
     e52:	93 e0       	ldi	r25, 0x03	; 3
     e54:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <_ZN3PID7ComputeEv>
     e58:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <result>
		if(result)
     e5c:	88 23       	and	r24, r24
     e5e:	41 f0       	breq	.+16     	; 0xe70 <loop+0xdc>
		{
			duration = 0; //Count clear, wait for the next count
     e60:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <duration>
     e64:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <duration+0x1>
     e68:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <duration+0x2>
     e6c:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <duration+0x3>
		}
	}
	Watch();
     e70:	0e 94 b4 02 	call	0x568	; 0x568 <_Z5Watchv>
	if(weckerStatus&&(zeitLocal.GetHours()==weckzeit.GetHours())&&(zeitLocal.GetMinutes()==weckzeit.GetMinutes())&&(zeitLocal.GetSeconds()==weckzeit.GetSeconds())) buzzer = 1;
     e74:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <weckerStatus>
     e78:	88 23       	and	r24, r24
     e7a:	11 f1       	breq	.+68     	; 0xec0 <loop+0x12c>
     e7c:	20 91 3b 03 	lds	r18, 0x033B	; 0x80033b <zeitLocal>
     e80:	30 91 3c 03 	lds	r19, 0x033C	; 0x80033c <zeitLocal+0x1>
     e84:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <weckzeit>
     e88:	90 91 34 03 	lds	r25, 0x0334	; 0x800334 <weckzeit+0x1>
     e8c:	28 17       	cp	r18, r24
     e8e:	39 07       	cpc	r19, r25
     e90:	b9 f4       	brne	.+46     	; 0xec0 <loop+0x12c>
     e92:	20 91 3d 03 	lds	r18, 0x033D	; 0x80033d <zeitLocal+0x2>
     e96:	30 91 3e 03 	lds	r19, 0x033E	; 0x80033e <zeitLocal+0x3>
     e9a:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <weckzeit+0x2>
     e9e:	90 91 36 03 	lds	r25, 0x0336	; 0x800336 <weckzeit+0x3>
     ea2:	28 17       	cp	r18, r24
     ea4:	39 07       	cpc	r19, r25
     ea6:	61 f4       	brne	.+24     	; 0xec0 <loop+0x12c>
     ea8:	20 91 3f 03 	lds	r18, 0x033F	; 0x80033f <zeitLocal+0x4>
     eac:	30 91 40 03 	lds	r19, 0x0340	; 0x800340 <zeitLocal+0x5>
     eb0:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <weckzeit+0x4>
     eb4:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <weckzeit+0x5>
     eb8:	28 17       	cp	r18, r24
     eba:	39 07       	cpc	r19, r25
     ebc:	09 f4       	brne	.+2      	; 0xec0 <loop+0x12c>
     ebe:	f2 c0       	rjmp	.+484    	; 0x10a4 <loop+0x310>
	input = getkey();
     ec0:	0e 94 26 01 	call	0x24c	; 0x24c <_Z6getkeyv>
     ec4:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <_ZL5input+0x1>
     ec8:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <_ZL5input>
		if(buzzer)
     ecc:	20 91 30 03 	lds	r18, 0x0330	; 0x800330 <buzzer>
     ed0:	30 91 31 03 	lds	r19, 0x0331	; 0x800331 <buzzer+0x1>
     ed4:	23 2b       	or	r18, r19
     ed6:	c1 f0       	breq	.+48     	; 0xf08 <loop+0x174>
		{
			if(input){
     ed8:	89 2b       	or	r24, r25
     eda:	49 f0       	breq	.+18     	; 0xeee <loop+0x15a>
				lcd.noBacklight();
     edc:	82 e7       	ldi	r24, 0x72	; 114
     ede:	94 e0       	ldi	r25, 0x04	; 4
     ee0:	0e 94 3c 13 	call	0x2678	; 0x2678 <_ZN7hd4478011noBacklightEv>
				buzzer = 0;
     ee4:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <buzzer+0x1>
     ee8:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <buzzer>
     eec:	0d c0       	rjmp	.+26     	; 0xf08 <loop+0x174>
			}
			else if(zeitLocal.GetSeconds()%2) lcd.backlight(); else lcd.noBacklight();
     eee:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <zeitLocal+0x4>
     ef2:	80 ff       	sbrs	r24, 0
     ef4:	05 c0       	rjmp	.+10     	; 0xf00 <loop+0x16c>
     ef6:	82 e7       	ldi	r24, 0x72	; 114
     ef8:	94 e0       	ldi	r25, 0x04	; 4
     efa:	0e 94 34 13 	call	0x2668	; 0x2668 <_ZN7hd447809backlightEv>
     efe:	04 c0       	rjmp	.+8      	; 0xf08 <loop+0x174>
     f00:	82 e7       	ldi	r24, 0x72	; 114
     f02:	94 e0       	ldi	r25, 0x04	; 4
     f04:	0e 94 3c 13 	call	0x2678	; 0x2678 <_ZN7hd4478011noBacklightEv>
		}
	if (watchmenu[menu].active) input = watchmenu[menu].active(input);
     f08:	e0 91 16 03 	lds	r30, 0x0316	; 0x800316 <_ZL4menu>
     f0c:	f0 91 17 03 	lds	r31, 0x0317	; 0x800317 <_ZL4menu+0x1>
     f10:	74 e0       	ldi	r23, 0x04	; 4
     f12:	ee 0f       	add	r30, r30
     f14:	ff 1f       	adc	r31, r31
     f16:	7a 95       	dec	r23
     f18:	e1 f7       	brne	.-8      	; 0xf12 <loop+0x17e>
     f1a:	e3 5a       	subi	r30, 0xA3	; 163
     f1c:	fd 4f       	sbci	r31, 0xFD	; 253
     f1e:	02 84       	ldd	r0, Z+10	; 0x0a
     f20:	f3 85       	ldd	r31, Z+11	; 0x0b
     f22:	e0 2d       	mov	r30, r0
     f24:	30 97       	sbiw	r30, 0x00	; 0
     f26:	49 f0       	breq	.+18     	; 0xf3a <loop+0x1a6>
     f28:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <_ZL5input>
     f2c:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <_ZL5input+0x1>
     f30:	09 95       	icall
     f32:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <_ZL5input+0x1>
     f36:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <_ZL5input>
		//! cyclic call to active function as long as menu n is active
	switch(input) {
     f3a:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <_ZL5input>
     f3e:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <_ZL5input+0x1>
     f42:	83 30       	cpi	r24, 0x03	; 3
     f44:	91 05       	cpc	r25, r1
     f46:	d9 f1       	breq	.+118    	; 0xfbe <loop+0x22a>
     f48:	34 f4       	brge	.+12     	; 0xf56 <loop+0x1c2>
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	91 05       	cpc	r25, r1
     f4e:	79 f0       	breq	.+30     	; 0xf6e <loop+0x1da>
     f50:	02 97       	sbiw	r24, 0x02	; 2
     f52:	19 f1       	breq	.+70     	; 0xf9a <loop+0x206>
     f54:	09 c0       	rjmp	.+18     	; 0xf68 <loop+0x1d4>
     f56:	85 30       	cpi	r24, 0x05	; 5
     f58:	91 05       	cpc	r25, r1
     f5a:	09 f4       	brne	.+2      	; 0xf5e <loop+0x1ca>
     f5c:	65 c0       	rjmp	.+202    	; 0x1028 <loop+0x294>
     f5e:	0c f4       	brge	.+2      	; 0xf62 <loop+0x1ce>
     f60:	40 c0       	rjmp	.+128    	; 0xfe2 <loop+0x24e>
     f62:	06 97       	sbiw	r24, 0x06	; 6
     f64:	09 f4       	brne	.+2      	; 0xf68 <loop+0x1d4>
     f66:	83 c0       	rjmp	.+262    	; 0x106e <loop+0x2da>
		default:
		case X_KEY:
		case NO_KEY:
		newmenu = -1; // no changes made
     f68:	8f ef       	ldi	r24, 0xFF	; 255
     f6a:	9f ef       	ldi	r25, 0xFF	; 255
     f6c:	11 c0       	rjmp	.+34     	; 0xf90 <loop+0x1fc>
		break;
		case UP_KEY:
		lcd.clear();
     f6e:	82 e7       	ldi	r24, 0x72	; 114
     f70:	94 e0       	ldi	r25, 0x04	; 4
     f72:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].up;
     f76:	e0 91 16 03 	lds	r30, 0x0316	; 0x800316 <_ZL4menu>
     f7a:	f0 91 17 03 	lds	r31, 0x0317	; 0x800317 <_ZL4menu+0x1>
     f7e:	64 e0       	ldi	r22, 0x04	; 4
     f80:	ee 0f       	add	r30, r30
     f82:	ff 1f       	adc	r31, r31
     f84:	6a 95       	dec	r22
     f86:	e1 f7       	brne	.-8      	; 0xf80 <loop+0x1ec>
     f88:	e3 5a       	subi	r30, 0xA3	; 163
     f8a:	fd 4f       	sbci	r31, 0xFD	; 253
     f8c:	80 81       	ld	r24, Z
     f8e:	91 81       	ldd	r25, Z+1	; 0x01
     f90:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <_ZL7newmenu+0x1>
     f94:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <_ZL7newmenu>
		break;
     f98:	7a c0       	rjmp	.+244    	; 0x108e <loop+0x2fa>
		case LEFT_KEY:
		lcd.clear();
     f9a:	82 e7       	ldi	r24, 0x72	; 114
     f9c:	94 e0       	ldi	r25, 0x04	; 4
     f9e:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].left;
     fa2:	e0 91 16 03 	lds	r30, 0x0316	; 0x800316 <_ZL4menu>
     fa6:	f0 91 17 03 	lds	r31, 0x0317	; 0x800317 <_ZL4menu+0x1>
     faa:	54 e0       	ldi	r21, 0x04	; 4
     fac:	ee 0f       	add	r30, r30
     fae:	ff 1f       	adc	r31, r31
     fb0:	5a 95       	dec	r21
     fb2:	e1 f7       	brne	.-8      	; 0xfac <loop+0x218>
     fb4:	e3 5a       	subi	r30, 0xA3	; 163
     fb6:	fd 4f       	sbci	r31, 0xFD	; 253
     fb8:	82 81       	ldd	r24, Z+2	; 0x02
     fba:	93 81       	ldd	r25, Z+3	; 0x03
     fbc:	e9 cf       	rjmp	.-46     	; 0xf90 <loop+0x1fc>
		break;
		case DOWN_KEY:
		lcd.clear();
     fbe:	82 e7       	ldi	r24, 0x72	; 114
     fc0:	94 e0       	ldi	r25, 0x04	; 4
     fc2:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].down;
     fc6:	e0 91 16 03 	lds	r30, 0x0316	; 0x800316 <_ZL4menu>
     fca:	f0 91 17 03 	lds	r31, 0x0317	; 0x800317 <_ZL4menu+0x1>
     fce:	44 e0       	ldi	r20, 0x04	; 4
     fd0:	ee 0f       	add	r30, r30
     fd2:	ff 1f       	adc	r31, r31
     fd4:	4a 95       	dec	r20
     fd6:	e1 f7       	brne	.-8      	; 0xfd0 <loop+0x23c>
     fd8:	e3 5a       	subi	r30, 0xA3	; 163
     fda:	fd 4f       	sbci	r31, 0xFD	; 253
     fdc:	84 81       	ldd	r24, Z+4	; 0x04
     fde:	95 81       	ldd	r25, Z+5	; 0x05
     fe0:	d7 cf       	rjmp	.-82     	; 0xf90 <loop+0x1fc>
		break;
		case RIGHT_KEY:
		lcd.clear();
     fe2:	82 e7       	ldi	r24, 0x72	; 114
     fe4:	94 e0       	ldi	r25, 0x04	; 4
     fe6:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <_ZN7hd447805clearEv>
		if(watchmenu[menu].goright != NULL) {
     fea:	e0 91 16 03 	lds	r30, 0x0316	; 0x800316 <_ZL4menu>
     fee:	f0 91 17 03 	lds	r31, 0x0317	; 0x800317 <_ZL4menu+0x1>
     ff2:	34 e0       	ldi	r19, 0x04	; 4
     ff4:	ee 0f       	add	r30, r30
     ff6:	ff 1f       	adc	r31, r31
     ff8:	3a 95       	dec	r19
     ffa:	e1 f7       	brne	.-8      	; 0xff4 <loop+0x260>
     ffc:	e3 5a       	subi	r30, 0xA3	; 163
     ffe:	fd 4f       	sbci	r31, 0xFD	; 253
    1000:	04 84       	ldd	r0, Z+12	; 0x0c
    1002:	f5 85       	ldd	r31, Z+13	; 0x0d
    1004:	e0 2d       	mov	r30, r0
    1006:	30 97       	sbiw	r30, 0x00	; 0
    1008:	09 f0       	breq	.+2      	; 0x100c <loop+0x278>
			//! call go right function with new value
			watchmenu[menu].goright();
    100a:	09 95       	icall
		}
		newmenu = watchmenu[menu].right;
    100c:	e0 91 16 03 	lds	r30, 0x0316	; 0x800316 <_ZL4menu>
    1010:	f0 91 17 03 	lds	r31, 0x0317	; 0x800317 <_ZL4menu+0x1>
    1014:	24 e0       	ldi	r18, 0x04	; 4
    1016:	ee 0f       	add	r30, r30
    1018:	ff 1f       	adc	r31, r31
    101a:	2a 95       	dec	r18
    101c:	e1 f7       	brne	.-8      	; 0x1016 <loop+0x282>
    101e:	e3 5a       	subi	r30, 0xA3	; 163
    1020:	fd 4f       	sbci	r31, 0xFD	; 253
    1022:	86 81       	ldd	r24, Z+6	; 0x06
    1024:	97 81       	ldd	r25, Z+7	; 0x07
    1026:	b4 cf       	rjmp	.-152    	; 0xf90 <loop+0x1fc>
		break;
		case OK_KEY:
		lcd.clear();
    1028:	82 e7       	ldi	r24, 0x72	; 114
    102a:	94 e0       	ldi	r25, 0x04	; 4
    102c:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <_ZN7hd447805clearEv>
		if(watchmenu[menu].positive != NULL) {
    1030:	e0 91 16 03 	lds	r30, 0x0316	; 0x800316 <_ZL4menu>
    1034:	f0 91 17 03 	lds	r31, 0x0317	; 0x800317 <_ZL4menu+0x1>
    1038:	94 e0       	ldi	r25, 0x04	; 4
    103a:	ee 0f       	add	r30, r30
    103c:	ff 1f       	adc	r31, r31
    103e:	9a 95       	dec	r25
    1040:	e1 f7       	brne	.-8      	; 0x103a <loop+0x2a6>
    1042:	e3 5a       	subi	r30, 0xA3	; 163
    1044:	fd 4f       	sbci	r31, 0xFD	; 253
    1046:	06 84       	ldd	r0, Z+14	; 0x0e
    1048:	f7 85       	ldd	r31, Z+15	; 0x0f
    104a:	e0 2d       	mov	r30, r0
    104c:	30 97       	sbiw	r30, 0x00	; 0
    104e:	09 f0       	breq	.+2      	; 0x1052 <loop+0x2be>
			//! call positive answer function with new value
			watchmenu[menu].positive();
    1050:	09 95       	icall
		}
		newmenu = watchmenu[menu].ok;
    1052:	e0 91 16 03 	lds	r30, 0x0316	; 0x800316 <_ZL4menu>
    1056:	f0 91 17 03 	lds	r31, 0x0317	; 0x800317 <_ZL4menu+0x1>
    105a:	84 e0       	ldi	r24, 0x04	; 4
    105c:	ee 0f       	add	r30, r30
    105e:	ff 1f       	adc	r31, r31
    1060:	8a 95       	dec	r24
    1062:	e1 f7       	brne	.-8      	; 0x105c <loop+0x2c8>
    1064:	e3 5a       	subi	r30, 0xA3	; 163
    1066:	fd 4f       	sbci	r31, 0xFD	; 253
    1068:	80 85       	ldd	r24, Z+8	; 0x08
    106a:	91 85       	ldd	r25, Z+9	; 0x09
    106c:	91 cf       	rjmp	.-222    	; 0xf90 <loop+0x1fc>
		break;
		case BK_KEY:
		lcd.clear();
    106e:	82 e7       	ldi	r24, 0x72	; 114
    1070:	94 e0       	ldi	r25, 0x04	; 4
    1072:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <_ZN7hd447805clearEv>
		lcd.noCursor();
    1076:	82 e7       	ldi	r24, 0x72	; 114
    1078:	94 e0       	ldi	r25, 0x04	; 4
    107a:	0e 94 41 14 	call	0x2882	; 0x2882 <_ZN7hd447808noCursorEv>
		lcd.noBlink();
    107e:	82 e7       	ldi	r24, 0x72	; 114
    1080:	94 e0       	ldi	r25, 0x04	; 4
    1082:	0e 94 48 14 	call	0x2890	; 0x2890 <_ZN7hd447807noBlinkEv>
		newmenu = 0;
    1086:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <_ZL7newmenu+0x1>
    108a:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <_ZL7newmenu>
		break;
	}
	if(newmenu >= 0) menu = newmenu;
    108e:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <_ZL7newmenu>
    1092:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <_ZL7newmenu+0x1>
    1096:	97 fd       	sbrc	r25, 7
    1098:	0c c0       	rjmp	.+24     	; 0x10b2 <loop+0x31e>
    109a:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <_ZL4menu+0x1>
    109e:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <_ZL4menu>

	} //else Klammer
}
    10a2:	07 c0       	rjmp	.+14     	; 0x10b2 <loop+0x31e>
		{
			duration = 0; //Count clear, wait for the next count
		}
	}
	Watch();
	if(weckerStatus&&(zeitLocal.GetHours()==weckzeit.GetHours())&&(zeitLocal.GetMinutes()==weckzeit.GetMinutes())&&(zeitLocal.GetSeconds()==weckzeit.GetSeconds())) buzzer = 1;
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <buzzer+0x1>
    10ac:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <buzzer>
    10b0:	07 cf       	rjmp	.-498    	; 0xec0 <loop+0x12c>
		break;
	}
	if(newmenu >= 0) menu = newmenu;

	} //else Klammer
}
    10b2:	1f 91       	pop	r17
    10b4:	0f 91       	pop	r16
    10b6:	ff 90       	pop	r15
    10b8:	ef 90       	pop	r14
    10ba:	df 90       	pop	r13
    10bc:	cf 90       	pop	r12
    10be:	08 95       	ret

000010c0 <_GLOBAL__sub_I_lcd>:
    10c0:	6f 92       	push	r6
    10c2:	7f 92       	push	r7
    10c4:	8f 92       	push	r8
    10c6:	9f 92       	push	r9
    10c8:	af 92       	push	r10
    10ca:	bf 92       	push	r11
    10cc:	cf 92       	push	r12
    10ce:	df 92       	push	r13
    10d0:	ef 92       	push	r14
    10d2:	ff 92       	push	r15
    10d4:	0f 93       	push	r16
    10d6:	1f 93       	push	r17
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
// ====================

//	-- Automagic / auto-detect constructors --

// Auto find next instance and auto config pin mapping
hd44780_I2Cexp(){ _addr = 0; _expType = I2Cexp_UNKNOWN;}
    10dc:	82 e7       	ldi	r24, 0x72	; 114
    10de:	94 e0       	ldi	r25, 0x04	; 4
    10e0:	0e 94 07 13 	call	0x260e	; 0x260e <_ZN7hd44780C1Ev>
    10e4:	e2 e7       	ldi	r30, 0x72	; 114
    10e6:	f4 e0       	ldi	r31, 0x04	; 4
    10e8:	8b e4       	ldi	r24, 0x4B	; 75
    10ea:	92 e0       	ldi	r25, 0x02	; 2
    10ec:	91 83       	std	Z+1, r25	; 0x01
    10ee:	80 83       	st	Z, r24
    10f0:	10 a2       	std	Z+32, r1	; 0x20
    10f2:	11 a2       	std	Z+33, r1	; 0x21

const struct CITY_TIME_DIF CITIES [] {
	{"London", 0, "LON"},{"New-York", -5, "NEY"},{"Paris", 1, "PAR"},{ "Tokyo", 9, "TOK"},
	{"Hongkong", 8, "HNK"},{"Los Angeles", -8, "LAN"},{"Chicago", -6, "CHI"},{"Seoul", 9, "SEO"},
	{ "Bruessel",  1, "BRU"},{"Washington",  -5, "WAS"},{"Singapur", 8, "SIN"},{"Sydney", 11, "SYD"}
	};
    10f4:	64 eb       	ldi	r22, 0xB4	; 180
    10f6:	71 e0       	ldi	r23, 0x01	; 1
    10f8:	8a ec       	ldi	r24, 0xCA	; 202
    10fa:	93 e0       	ldi	r25, 0x03	; 3
    10fc:	0e 94 d7 24 	call	0x49ae	; 0x49ae <_ZN6StringC1EPKc>
    1100:	ca ec       	ldi	r28, 0xCA	; 202
    1102:	d3 e0       	ldi	r29, 0x03	; 3
    1104:	1f 82       	std	Y+7, r1	; 0x07
    1106:	1e 82       	std	Y+6, r1	; 0x06
    1108:	6b eb       	ldi	r22, 0xBB	; 187
    110a:	71 e0       	ldi	r23, 0x01	; 1
    110c:	82 ed       	ldi	r24, 0xD2	; 210
    110e:	93 e0       	ldi	r25, 0x03	; 3
    1110:	0e 94 d7 24 	call	0x49ae	; 0x49ae <_ZN6StringC1EPKc>
    1114:	6f eb       	ldi	r22, 0xBF	; 191
    1116:	71 e0       	ldi	r23, 0x01	; 1
    1118:	88 ed       	ldi	r24, 0xD8	; 216
    111a:	93 e0       	ldi	r25, 0x03	; 3
    111c:	0e 94 d7 24 	call	0x49ae	; 0x49ae <_ZN6StringC1EPKc>
    1120:	8b ef       	ldi	r24, 0xFB	; 251
    1122:	e8 2e       	mov	r14, r24
    1124:	ff 24       	eor	r15, r15
    1126:	fa 94       	dec	r15
    1128:	fd 8a       	std	Y+21, r15	; 0x15
    112a:	ec 8a       	std	Y+20, r14	; 0x14
    112c:	68 ec       	ldi	r22, 0xC8	; 200
    112e:	71 e0       	ldi	r23, 0x01	; 1
    1130:	80 ee       	ldi	r24, 0xE0	; 224
    1132:	93 e0       	ldi	r25, 0x03	; 3
    1134:	0e 94 d7 24 	call	0x49ae	; 0x49ae <_ZN6StringC1EPKc>
    1138:	6c ec       	ldi	r22, 0xCC	; 204
    113a:	71 e0       	ldi	r23, 0x01	; 1
    113c:	86 ee       	ldi	r24, 0xE6	; 230
    113e:	93 e0       	ldi	r25, 0x03	; 3
    1140:	0e 94 d7 24 	call	0x49ae	; 0x49ae <_ZN6StringC1EPKc>
    1144:	66 24       	eor	r6, r6
    1146:	63 94       	inc	r6
    1148:	71 2c       	mov	r7, r1
    114a:	7b a2       	std	Y+35, r7	; 0x23
    114c:	6a a2       	std	Y+34, r6	; 0x22
    114e:	62 ed       	ldi	r22, 0xD2	; 210
    1150:	71 e0       	ldi	r23, 0x01	; 1
    1152:	8e ee       	ldi	r24, 0xEE	; 238
    1154:	93 e0       	ldi	r25, 0x03	; 3
    1156:	0e 94 d7 24 	call	0x49ae	; 0x49ae <_ZN6StringC1EPKc>
    115a:	66 ed       	ldi	r22, 0xD6	; 214
    115c:	71 e0       	ldi	r23, 0x01	; 1
    115e:	84 ef       	ldi	r24, 0xF4	; 244
    1160:	93 e0       	ldi	r25, 0x03	; 3
    1162:	0e 94 d7 24 	call	0x49ae	; 0x49ae <_ZN6StringC1EPKc>
    1166:	29 e0       	ldi	r18, 0x09	; 9
    1168:	82 2e       	mov	r8, r18
    116a:	91 2c       	mov	r9, r1
    116c:	99 aa       	std	Y+49, r9	; 0x31
    116e:	88 aa       	std	Y+48, r8	; 0x30
    1170:	6c ed       	ldi	r22, 0xDC	; 220
    1172:	71 e0       	ldi	r23, 0x01	; 1
    1174:	8c ef       	ldi	r24, 0xFC	; 252
    1176:	93 e0       	ldi	r25, 0x03	; 3
    1178:	0e 94 d7 24 	call	0x49ae	; 0x49ae <_ZN6StringC1EPKc>
    117c:	60 ee       	ldi	r22, 0xE0	; 224
    117e:	71 e0       	ldi	r23, 0x01	; 1
    1180:	82 e0       	ldi	r24, 0x02	; 2
    1182:	94 e0       	ldi	r25, 0x04	; 4
    1184:	0e 94 d7 24 	call	0x49ae	; 0x49ae <_ZN6StringC1EPKc>
    1188:	08 e0       	ldi	r16, 0x08	; 8
    118a:	10 e0       	ldi	r17, 0x00	; 0
    118c:	1f af       	std	Y+63, r17	; 0x3f
    118e:	0e af       	std	Y+62, r16	; 0x3e
    1190:	69 ee       	ldi	r22, 0xE9	; 233
    1192:	71 e0       	ldi	r23, 0x01	; 1
    1194:	8a e0       	ldi	r24, 0x0A	; 10
    1196:	94 e0       	ldi	r25, 0x04	; 4
    1198:	0e 94 d7 24 	call	0x49ae	; 0x49ae <_ZN6StringC1EPKc>
    119c:	6d ee       	ldi	r22, 0xED	; 237
    119e:	71 e0       	ldi	r23, 0x01	; 1
    11a0:	80 e1       	ldi	r24, 0x10	; 16
    11a2:	94 e0       	ldi	r25, 0x04	; 4
    11a4:	0e 94 d7 24 	call	0x49ae	; 0x49ae <_ZN6StringC1EPKc>
    11a8:	88 ef       	ldi	r24, 0xF8	; 248
    11aa:	9f ef       	ldi	r25, 0xFF	; 255
    11ac:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <_ZL6CITIES+0x4d>
    11b0:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <_ZL6CITIES+0x4c>
    11b4:	69 ef       	ldi	r22, 0xF9	; 249
    11b6:	71 e0       	ldi	r23, 0x01	; 1
    11b8:	88 e1       	ldi	r24, 0x18	; 24
    11ba:	94 e0       	ldi	r25, 0x04	; 4
    11bc:	0e 94 d7 24 	call	0x49ae	; 0x49ae <_ZN6StringC1EPKc>
    11c0:	6d ef       	ldi	r22, 0xFD	; 253
    11c2:	71 e0       	ldi	r23, 0x01	; 1
    11c4:	8e e1       	ldi	r24, 0x1E	; 30
    11c6:	94 e0       	ldi	r25, 0x04	; 4
    11c8:	0e 94 d7 24 	call	0x49ae	; 0x49ae <_ZN6StringC1EPKc>
    11cc:	8a ef       	ldi	r24, 0xFA	; 250
    11ce:	9f ef       	ldi	r25, 0xFF	; 255
    11d0:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <_ZL6CITIES+0x5b>
    11d4:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <_ZL6CITIES+0x5a>
    11d8:	65 e0       	ldi	r22, 0x05	; 5
    11da:	72 e0       	ldi	r23, 0x02	; 2
    11dc:	86 e2       	ldi	r24, 0x26	; 38
    11de:	94 e0       	ldi	r25, 0x04	; 4
    11e0:	0e 94 d7 24 	call	0x49ae	; 0x49ae <_ZN6StringC1EPKc>
    11e4:	69 e0       	ldi	r22, 0x09	; 9
    11e6:	72 e0       	ldi	r23, 0x02	; 2
    11e8:	8c e2       	ldi	r24, 0x2C	; 44
    11ea:	94 e0       	ldi	r25, 0x04	; 4
    11ec:	0e 94 d7 24 	call	0x49ae	; 0x49ae <_ZN6StringC1EPKc>
    11f0:	90 92 33 04 	sts	0x0433, r9	; 0x800433 <_ZL6CITIES+0x69>
    11f4:	80 92 32 04 	sts	0x0432, r8	; 0x800432 <_ZL6CITIES+0x68>
    11f8:	6f e0       	ldi	r22, 0x0F	; 15
    11fa:	72 e0       	ldi	r23, 0x02	; 2
    11fc:	84 e3       	ldi	r24, 0x34	; 52
    11fe:	94 e0       	ldi	r25, 0x04	; 4
    1200:	0e 94 d7 24 	call	0x49ae	; 0x49ae <_ZN6StringC1EPKc>
    1204:	63 e1       	ldi	r22, 0x13	; 19
    1206:	72 e0       	ldi	r23, 0x02	; 2
    1208:	8a e3       	ldi	r24, 0x3A	; 58
    120a:	94 e0       	ldi	r25, 0x04	; 4
    120c:	0e 94 d7 24 	call	0x49ae	; 0x49ae <_ZN6StringC1EPKc>
    1210:	70 92 41 04 	sts	0x0441, r7	; 0x800441 <_ZL6CITIES+0x77>
    1214:	60 92 40 04 	sts	0x0440, r6	; 0x800440 <_ZL6CITIES+0x76>
    1218:	6c e1       	ldi	r22, 0x1C	; 28
    121a:	72 e0       	ldi	r23, 0x02	; 2
    121c:	82 e4       	ldi	r24, 0x42	; 66
    121e:	94 e0       	ldi	r25, 0x04	; 4
    1220:	0e 94 d7 24 	call	0x49ae	; 0x49ae <_ZN6StringC1EPKc>
    1224:	60 e2       	ldi	r22, 0x20	; 32
    1226:	72 e0       	ldi	r23, 0x02	; 2
    1228:	88 e4       	ldi	r24, 0x48	; 72
    122a:	94 e0       	ldi	r25, 0x04	; 4
    122c:	0e 94 d7 24 	call	0x49ae	; 0x49ae <_ZN6StringC1EPKc>
    1230:	f0 92 4f 04 	sts	0x044F, r15	; 0x80044f <_ZL6CITIES+0x85>
    1234:	e0 92 4e 04 	sts	0x044E, r14	; 0x80044e <_ZL6CITIES+0x84>
    1238:	6b e2       	ldi	r22, 0x2B	; 43
    123a:	72 e0       	ldi	r23, 0x02	; 2
    123c:	80 e5       	ldi	r24, 0x50	; 80
    123e:	94 e0       	ldi	r25, 0x04	; 4
    1240:	0e 94 d7 24 	call	0x49ae	; 0x49ae <_ZN6StringC1EPKc>
    1244:	6f e2       	ldi	r22, 0x2F	; 47
    1246:	72 e0       	ldi	r23, 0x02	; 2
    1248:	86 e5       	ldi	r24, 0x56	; 86
    124a:	94 e0       	ldi	r25, 0x04	; 4
    124c:	0e 94 d7 24 	call	0x49ae	; 0x49ae <_ZN6StringC1EPKc>
    1250:	10 93 5d 04 	sts	0x045D, r17	; 0x80045d <_ZL6CITIES+0x93>
    1254:	00 93 5c 04 	sts	0x045C, r16	; 0x80045c <_ZL6CITIES+0x92>
    1258:	68 e3       	ldi	r22, 0x38	; 56
    125a:	72 e0       	ldi	r23, 0x02	; 2
    125c:	8e e5       	ldi	r24, 0x5E	; 94
    125e:	94 e0       	ldi	r25, 0x04	; 4
    1260:	0e 94 d7 24 	call	0x49ae	; 0x49ae <_ZN6StringC1EPKc>
    1264:	6c e3       	ldi	r22, 0x3C	; 60
    1266:	72 e0       	ldi	r23, 0x02	; 2
    1268:	84 e6       	ldi	r24, 0x64	; 100
    126a:	94 e0       	ldi	r25, 0x04	; 4
    126c:	0e 94 d7 24 	call	0x49ae	; 0x49ae <_ZN6StringC1EPKc>
    1270:	8b e0       	ldi	r24, 0x0B	; 11
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	90 93 6b 04 	sts	0x046B, r25	; 0x80046b <_ZL6CITIES+0xa1>
    1278:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <_ZL6CITIES+0xa0>
    127c:	63 e4       	ldi	r22, 0x43	; 67
    127e:	72 e0       	ldi	r23, 0x02	; 2
    1280:	8c e6       	ldi	r24, 0x6C	; 108
    1282:	94 e0       	ldi	r25, 0x04	; 4
    1284:	0e 94 d7 24 	call	0x49ae	; 0x49ae <_ZN6StringC1EPKc>
#endif

class dht
{
public:
    dht() { _disableIRQ = false; };
    1288:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <DHT+0xd>
boolean result;

double val_output;//Power supplied to the motor PWM value.
double Setpoint;
double Kp=3, Ki=5, Kd=0;
PID myPID(&abs_duration, &val_output, &Setpoint, Kp, Ki, Kd, DIRECT);
    128c:	a0 90 0c 01 	lds	r10, 0x010C	; 0x80010c <Ki>
    1290:	b0 90 0d 01 	lds	r11, 0x010D	; 0x80010d <Ki+0x1>
    1294:	c0 90 0e 01 	lds	r12, 0x010E	; 0x80010e <Ki+0x2>
    1298:	d0 90 0f 01 	lds	r13, 0x010F	; 0x80010f <Ki+0x3>
    129c:	e0 90 10 01 	lds	r14, 0x0110	; 0x800110 <Kp>
    12a0:	f0 90 11 01 	lds	r15, 0x0111	; 0x800111 <Kp+0x1>
    12a4:	00 91 12 01 	lds	r16, 0x0112	; 0x800112 <Kp+0x2>
    12a8:	10 91 13 01 	lds	r17, 0x0113	; 0x800113 <Kp+0x3>
    12ac:	1f 92       	push	r1
    12ae:	1f 92       	push	r1
    12b0:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <Kd+0x3>
    12b4:	8f 93       	push	r24
    12b6:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <Kd+0x2>
    12ba:	8f 93       	push	r24
    12bc:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <Kd+0x1>
    12c0:	8f 93       	push	r24
    12c2:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <Kd>
    12c6:	8f 93       	push	r24
    12c8:	2b e9       	ldi	r18, 0x9B	; 155
    12ca:	33 e0       	ldi	r19, 0x03	; 3
    12cc:	4f e9       	ldi	r20, 0x9F	; 159
    12ce:	53 e0       	ldi	r21, 0x03	; 3
    12d0:	64 ea       	ldi	r22, 0xA4	; 164
    12d2:	73 e0       	ldi	r23, 0x03	; 3
    12d4:	8b e5       	ldi	r24, 0x5B	; 91
    12d6:	93 e0       	ldi	r25, 0x03	; 3
    12d8:	0e 94 a0 11 	call	0x2340	; 0x2340 <_ZN3PIDC1EPdS0_S0_dddi>
	int hh_;
	int mm_;
	int ss_;
	int set_;
public:
	Zeit(int h, int m, int s){ hh_=h; mm_=m; ss_=s; set_ =0;};
    12dc:	eb e4       	ldi	r30, 0x4B	; 75
    12de:	f3 e0       	ldi	r31, 0x03	; 3
    12e0:	61 e1       	ldi	r22, 0x11	; 17
    12e2:	70 e0       	ldi	r23, 0x00	; 0
    12e4:	71 83       	std	Z+1, r23	; 0x01
    12e6:	60 83       	st	Z, r22
    12e8:	4b e3       	ldi	r20, 0x3B	; 59
    12ea:	50 e0       	ldi	r21, 0x00	; 0
    12ec:	53 83       	std	Z+3, r21	; 0x03
    12ee:	42 83       	std	Z+2, r20	; 0x02
    12f0:	2d e2       	ldi	r18, 0x2D	; 45
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	35 83       	std	Z+5, r19	; 0x05
    12f6:	24 83       	std	Z+4, r18	; 0x04
    12f8:	17 82       	std	Z+7, r1	; 0x07
    12fa:	16 82       	std	Z+6, r1	; 0x06
    12fc:	e3 e4       	ldi	r30, 0x43	; 67
    12fe:	f3 e0       	ldi	r31, 0x03	; 3
    1300:	8c e0       	ldi	r24, 0x0C	; 12
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	91 83       	std	Z+1, r25	; 0x01
    1306:	80 83       	st	Z, r24
    1308:	13 82       	std	Z+3, r1	; 0x03
    130a:	12 82       	std	Z+2, r1	; 0x02
    130c:	15 82       	std	Z+5, r1	; 0x05
    130e:	14 82       	std	Z+4, r1	; 0x04
    1310:	17 82       	std	Z+7, r1	; 0x07
    1312:	16 82       	std	Z+6, r1	; 0x06
    1314:	eb e3       	ldi	r30, 0x3B	; 59
    1316:	f3 e0       	ldi	r31, 0x03	; 3
    1318:	71 83       	std	Z+1, r23	; 0x01
    131a:	60 83       	st	Z, r22
    131c:	53 83       	std	Z+3, r21	; 0x03
    131e:	42 83       	std	Z+2, r20	; 0x02
    1320:	35 83       	std	Z+5, r19	; 0x05
    1322:	24 83       	std	Z+4, r18	; 0x04
    1324:	17 82       	std	Z+7, r1	; 0x07
    1326:	16 82       	std	Z+6, r1	; 0x06
    1328:	e3 e3       	ldi	r30, 0x33	; 51
    132a:	f3 e0       	ldi	r31, 0x03	; 3
    132c:	22 e1       	ldi	r18, 0x12	; 18
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	31 83       	std	Z+1, r19	; 0x01
    1332:	20 83       	st	Z, r18
    1334:	13 82       	std	Z+3, r1	; 0x03
    1336:	12 82       	std	Z+2, r1	; 0x02
    1338:	15 82       	std	Z+5, r1	; 0x05
    133a:	14 82       	std	Z+4, r1	; 0x04
    133c:	17 82       	std	Z+7, r1	; 0x07
    133e:	16 82       	std	Z+6, r1	; 0x06
	int YYYY_;
	int MM_;
	int DD_;
	int set_;
public:
	Datum(int d, int m, int y){DD_=d; MM_=m;YYYY_=y; set_ = 0;};
    1340:	e8 e2       	ldi	r30, 0x28	; 40
    1342:	f3 e0       	ldi	r31, 0x03	; 3
    1344:	4e e0       	ldi	r20, 0x0E	; 14
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	55 83       	std	Z+5, r21	; 0x05
    134a:	44 83       	std	Z+4, r20	; 0x04
    134c:	93 83       	std	Z+3, r25	; 0x03
    134e:	82 83       	std	Z+2, r24	; 0x02
    1350:	23 ee       	ldi	r18, 0xE3	; 227
    1352:	37 e0       	ldi	r19, 0x07	; 7
    1354:	31 83       	std	Z+1, r19	; 0x01
    1356:	20 83       	st	Z, r18
    1358:	17 82       	std	Z+7, r1	; 0x07
    135a:	16 82       	std	Z+6, r1	; 0x06
    135c:	e0 e2       	ldi	r30, 0x20	; 32
    135e:	f3 e0       	ldi	r31, 0x03	; 3
    1360:	75 82       	std	Z+5, r7	; 0x05
    1362:	64 82       	std	Z+4, r6	; 0x04
    1364:	93 82       	std	Z+3, r9	; 0x03
    1366:	82 82       	std	Z+2, r8	; 0x02
    1368:	60 ed       	ldi	r22, 0xD0	; 208
    136a:	77 e0       	ldi	r23, 0x07	; 7
    136c:	71 83       	std	Z+1, r23	; 0x01
    136e:	60 83       	st	Z, r22
    1370:	17 82       	std	Z+7, r1	; 0x07
    1372:	16 82       	std	Z+6, r1	; 0x06
    1374:	e8 e1       	ldi	r30, 0x18	; 24
    1376:	f3 e0       	ldi	r31, 0x03	; 3
    1378:	55 83       	std	Z+5, r21	; 0x05
    137a:	44 83       	std	Z+4, r20	; 0x04
    137c:	93 83       	std	Z+3, r25	; 0x03
    137e:	82 83       	std	Z+2, r24	; 0x02
    1380:	31 83       	std	Z+1, r19	; 0x01
    1382:	20 83       	st	Z, r18
    1384:	17 82       	std	Z+7, r1	; 0x07
    1386:	16 82       	std	Z+6, r1	; 0x06
		break;
	}
	if(newmenu >= 0) menu = newmenu;

	} //else Klammer
}
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	1f 91       	pop	r17
    139a:	0f 91       	pop	r16
    139c:	ff 90       	pop	r15
    139e:	ef 90       	pop	r14
    13a0:	df 90       	pop	r13
    13a2:	cf 90       	pop	r12
    13a4:	bf 90       	pop	r11
    13a6:	af 90       	pop	r10
    13a8:	9f 90       	pop	r9
    13aa:	8f 90       	pop	r8
    13ac:	7f 90       	pop	r7
    13ae:	6f 90       	pop	r6
    13b0:	08 95       	ret

000013b2 <_GLOBAL__sub_D_lcd>:
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	c2 e7       	ldi	r28, 0x72	; 114
    13b8:	d4 e0       	ldi	r29, 0x04	; 4
	String name;
	int timediff;
	String initials;
};

const struct CITY_TIME_DIF CITIES [] {
    13ba:	2e 97       	sbiw	r28, 0x0e	; 14


hd44780_I2Cexp lcd;

//Strukt um Städte und deren Zweitverschiebung zu GMT (London) abzuspeichern
struct CITY_TIME_DIF {
    13bc:	ce 01       	movw	r24, r28
    13be:	08 96       	adiw	r24, 0x08	; 8
    13c0:	0e 94 69 24 	call	0x48d2	; 0x48d2 <_ZN6StringD1Ev>
    13c4:	ce 01       	movw	r24, r28
    13c6:	0e 94 69 24 	call	0x48d2	; 0x48d2 <_ZN6StringD1Ev>
	String name;
	int timediff;
	String initials;
};

const struct CITY_TIME_DIF CITIES [] {
    13ca:	83 e0       	ldi	r24, 0x03	; 3
    13cc:	ca 3c       	cpi	r28, 0xCA	; 202
    13ce:	d8 07       	cpc	r29, r24
    13d0:	a1 f7       	brne	.-24     	; 0x13ba <_GLOBAL__sub_D_lcd+0x8>
		break;
	}
	if(newmenu >= 0) menu = newmenu;

	} //else Klammer
}
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	08 95       	ret

000013d8 <_ZN14hd44780_I2Cexp14iosetBacklightEh>:
}

// iosetBacklight()  - set backlight brightness
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	fc 01       	movw	r30, r24
{
	if(!_bl) // backlight control?
    13de:	81 a5       	ldd	r24, Z+41	; 0x29
    13e0:	88 23       	and	r24, r24
    13e2:	71 f1       	breq	.+92     	; 0x1440 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x68>
    13e4:	92 a5       	ldd	r25, Z+42	; 0x2a
		return(hd44780::RV_ENOTSUP); // not backlight control support

	// dimvalue 0 is backlight off any other dimvalue is backlight on
	// configure backlight state mask according to active level
	if(((dimvalue) && (_blLevel == HIGH)) || 
    13e6:	66 23       	and	r22, r22
    13e8:	19 f0       	breq	.+6      	; 0x13f0 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x18>
    13ea:	91 30       	cpi	r25, 0x01	; 1
    13ec:	29 f4       	brne	.+10     	; 0x13f8 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x1c>
			((dimvalue == 0) && (_blLevel == LOW)))
    13f0:	91 11       	cpse	r25, r1
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
	{
		_blCurState = _bl;
    13f4:	83 a7       	std	Z+43, r24	; 0x2b
    13f6:	01 c0       	rjmp	.+2      	; 0x13fa <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x22>
	}
	else 
	{
		_blCurState = 0;
    13f8:	13 a6       	std	Z+43, r1	; 0x2b
    13fa:	ef 01       	movw	r28, r30
	}
	Wire.beginTransmission(_addr);
    13fc:	60 a1       	ldd	r22, Z+32	; 0x20
    13fe:	8d e0       	ldi	r24, 0x0D	; 13
    1400:	95 e0       	ldi	r25, 0x05	; 5
    1402:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
    1406:	89 a1       	ldd	r24, Y+33	; 0x21
    1408:	82 30       	cpi	r24, 0x02	; 2
    140a:	31 f4       	brne	.+12     	; 0x1418 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x40>
	{
		Wire.write(9); // point to GPIO
    140c:	69 e0       	ldi	r22, 0x09	; 9
    140e:	70 e0       	ldi	r23, 0x00	; 0
    1410:	8d e0       	ldi	r24, 0x0D	; 13
    1412:	95 e0       	ldi	r25, 0x05	; 5
    1414:	0e 94 32 02 	call	0x464	; 0x464 <_ZN7TwoWire5writeEi>
	}
	Wire.write( _blCurState );
    1418:	6b a5       	ldd	r22, Y+43	; 0x2b
    141a:	8d e0       	ldi	r24, 0x0D	; 13
    141c:	95 e0       	ldi	r25, 0x05	; 5
    141e:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    1422:	8d e0       	ldi	r24, 0x0D	; 13
    1424:	95 e0       	ldi	r25, 0x05	; 5
    1426:	0e 94 31 18 	call	0x3062	; 0x3062 <_ZN7TwoWire15endTransmissionEv>
    142a:	21 e0       	ldi	r18, 0x01	; 1
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	81 11       	cpse	r24, r1
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x5e>
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	88 27       	eor	r24, r24
    1438:	99 27       	eor	r25, r25
    143a:	82 1b       	sub	r24, r18
    143c:	93 0b       	sbc	r25, r19
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x6c>
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
{
	if(!_bl) // backlight control?
		return(hd44780::RV_ENOTSUP); // not backlight control support
    1440:	8d ef       	ldi	r24, 0xFD	; 253
    1442:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write( _blCurState );
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR); // all is good
}
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	08 95       	ret

0000144a <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>:
	return(0);
}


// write4bits - send a nibble to the LCD through i/o expander port
void write4bits(uint8_t value, hd44780::iotype type ) 
    144a:	cf 93       	push	r28
    144c:	fc 01       	movw	r30, r24
{
uint8_t gpioValue =  _blCurState;
    144e:	c3 a5       	ldd	r28, Z+43	; 0x2b
   
	// convert the value to an i/o expander port value
	// based on pin mappings
	if(value & (1 << 0))
    1450:	60 ff       	sbrs	r22, 0
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0xe>
		gpioValue |= _d4;
    1454:	85 a1       	ldd	r24, Z+37	; 0x25
    1456:	c8 2b       	or	r28, r24

	if(value & (1 << 1))
    1458:	61 ff       	sbrs	r22, 1
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x16>
		gpioValue |= _d5;
    145c:	86 a1       	ldd	r24, Z+38	; 0x26
    145e:	c8 2b       	or	r28, r24

	if(value & (1 << 2))
    1460:	62 ff       	sbrs	r22, 2
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x1e>
		gpioValue |= _d6;
    1464:	87 a1       	ldd	r24, Z+39	; 0x27
    1466:	c8 2b       	or	r28, r24

	if(value & (1 << 3))
    1468:	63 ff       	sbrs	r22, 3
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x26>
		gpioValue |= _d7;
    146c:	80 a5       	ldd	r24, Z+40	; 0x28
    146e:	c8 2b       	or	r28, r24


	if(type == hd44780::HD44780_IOdata) 
    1470:	41 30       	cpi	r20, 0x01	; 1
    1472:	11 f4       	brne	.+4      	; 0x1478 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x2e>
	{
		gpioValue |= _rs; // set RS high to send to data reg
    1474:	82 a1       	ldd	r24, Z+34	; 0x22
    1476:	c8 2b       	or	r28, r24
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
    1478:	64 a1       	ldd	r22, Z+36	; 0x24
    147a:	6c 2b       	or	r22, r28
    147c:	70 e0       	ldi	r23, 0x00	; 0
    147e:	8d e0       	ldi	r24, 0x0D	; 13
    1480:	95 e0       	ldi	r25, 0x05	; 5
    1482:	0e 94 32 02 	call	0x464	; 0x464 <_ZN7TwoWire5writeEi>
	Wire.write(gpioValue);		// with E LOW
    1486:	6c 2f       	mov	r22, r28
    1488:	8d e0       	ldi	r24, 0x0D	; 13
    148a:	95 e0       	ldi	r25, 0x05	; 5
}
    148c:	cf 91       	pop	r28
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
	Wire.write(gpioValue);		// with E LOW
    148e:	0c 94 5c 17 	jmp	0x2eb8	; 0x2eb8 <_ZN7TwoWire5writeEh>

00001492 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh>:
	return(rval);
}

// iowrite(type, value) - send either command or data byte to lcd
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
    1492:	8f 92       	push	r8
    1494:	9f 92       	push	r9
    1496:	af 92       	push	r10
    1498:	bf 92       	push	r11
    149a:	cf 92       	push	r12
    149c:	df 92       	push	r13
    149e:	ef 92       	push	r14
    14a0:	ff 92       	push	r15
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	ec 01       	movw	r28, r24
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
    14ac:	88 a1       	ldd	r24, Y+32	; 0x20
    14ae:	88 23       	and	r24, r24
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x22>
    14b2:	50 c0       	rjmp	.+160    	; 0x1554 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
    14b4:	89 a1       	ldd	r24, Y+33	; 0x21
    14b6:	88 23       	and	r24, r24
    14b8:	09 f4       	brne	.+2      	; 0x14bc <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x2a>
    14ba:	4c c0       	rjmp	.+152    	; 0x1554 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
    14bc:	14 2f       	mov	r17, r20
    14be:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
    14c0:	8c 8c       	ldd	r8, Y+28	; 0x1c
    14c2:	9d 8c       	ldd	r9, Y+29	; 0x1d
    14c4:	ae 8c       	ldd	r10, Y+30	; 0x1e
    14c6:	bf 8c       	ldd	r11, Y+31	; 0x1f
    14c8:	c8 8c       	ldd	r12, Y+24	; 0x18
    14ca:	d9 8c       	ldd	r13, Y+25	; 0x19
    14cc:	ea 8c       	ldd	r14, Y+26	; 0x1a
    14ce:	fb 8c       	ldd	r15, Y+27	; 0x1b
    14d0:	8d e2       	ldi	r24, 0x2D	; 45
    14d2:	c8 1a       	sub	r12, r24
    14d4:	d1 08       	sbc	r13, r1
    14d6:	e1 08       	sbc	r14, r1
    14d8:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
    14da:	0e 94 0d 22 	call	0x441a	; 0x441a <micros>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	8c 19       	sub	r24, r12
    14e4:	9d 09       	sbc	r25, r13
    14e6:	ae 09       	sbc	r26, r14
    14e8:	bf 09       	sbc	r27, r15
    14ea:	88 15       	cp	r24, r8
    14ec:	99 05       	cpc	r25, r9
    14ee:	aa 05       	cpc	r26, r10
    14f0:	bb 05       	cpc	r27, r11
    14f2:	98 f3       	brcs	.-26     	; 0x14da <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x48>
	 */

	waitReady(-45);
   
	// grab i2c bus
	Wire.beginTransmission(_addr);
    14f4:	68 a1       	ldd	r22, Y+32	; 0x20
    14f6:	8d e0       	ldi	r24, 0x0D	; 13
    14f8:	95 e0       	ldi	r25, 0x05	; 5
    14fa:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
    14fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1500:	82 30       	cpi	r24, 0x02	; 2
    1502:	31 f4       	brne	.+12     	; 0x1510 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x7e>
	{
		Wire.write(9); // point to GPIO
    1504:	69 e0       	ldi	r22, 0x09	; 9
    1506:	70 e0       	ldi	r23, 0x00	; 0
    1508:	8d e0       	ldi	r24, 0x0D	; 13
    150a:	95 e0       	ldi	r25, 0x05	; 5
    150c:	0e 94 32 02 	call	0x464	; 0x464 <_ZN7TwoWire5writeEi>
	}
	// send both nibbles in same i2c connection
	write4bits( (value >> 4), type );  // send upper nibble
    1510:	61 2f       	mov	r22, r17
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	84 e0       	ldi	r24, 0x04	; 4
    1516:	75 95       	asr	r23
    1518:	67 95       	ror	r22
    151a:	8a 95       	dec	r24
    151c:	e1 f7       	brne	.-8      	; 0x1516 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x84>
    151e:	40 2f       	mov	r20, r16
    1520:	ce 01       	movw	r24, r28
    1522:	0e 94 25 0a 	call	0x144a	; 0x144a <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	 * are used to reliably get the LCD and host in nibble sync
	 * with each other and to get the LCD into 4 bit mode.
	 * When sending a "4 bit command" only the upper nibble of
	 * of the 8 bit byte will presented on LCD signals D4-D7.
	 */
	if(type != hd44780::HD44780_IOcmd4bit)
    1526:	02 30       	cpi	r16, 0x02	; 2
    1528:	31 f0       	breq	.+12     	; 0x1536 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xa4>
	{
		write4bits( (value & 0x0F), type); // lower nibble, if not 4bit cmd
    152a:	61 2f       	mov	r22, r17
    152c:	6f 70       	andi	r22, 0x0F	; 15
    152e:	40 2f       	mov	r20, r16
    1530:	ce 01       	movw	r24, r28
    1532:	0e 94 25 0a 	call	0x144a	; 0x144a <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	}
	if(Wire.endTransmission())
    1536:	8d e0       	ldi	r24, 0x0D	; 13
    1538:	95 e0       	ldi	r25, 0x05	; 5
    153a:	0e 94 31 18 	call	0x3062	; 0x3062 <_ZN7TwoWire15endTransmissionEv>
    153e:	21 e0       	ldi	r18, 0x01	; 1
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	81 11       	cpse	r24, r1
    1544:	02 c0       	rjmp	.+4      	; 0x154a <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xb8>
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	88 27       	eor	r24, r24
    154c:	99 27       	eor	r25, r25
    154e:	82 1b       	sub	r24, r18
    1550:	93 0b       	sbc	r25, r19
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc6>
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
    1554:	8c ef       	ldi	r24, 0xFC	; 252
    1556:	9f ef       	ldi	r25, 0xFF	; 255
	}
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR);
}
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	1f 91       	pop	r17
    155e:	0f 91       	pop	r16
    1560:	ff 90       	pop	r15
    1562:	ef 90       	pop	r14
    1564:	df 90       	pop	r13
    1566:	cf 90       	pop	r12
    1568:	bf 90       	pop	r11
    156a:	af 90       	pop	r10
    156c:	9f 90       	pop	r9
    156e:	8f 90       	pop	r8
    1570:	08 95       	ret

00001572 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE>:
// ioread(type) - read a byte from LCD DDRAM
//
// returns:
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
    1572:	8f 92       	push	r8
    1574:	9f 92       	push	r9
    1576:	af 92       	push	r10
    1578:	bf 92       	push	r11
    157a:	cf 92       	push	r12
    157c:	df 92       	push	r13
    157e:	ef 92       	push	r14
    1580:	ff 92       	push	r15
    1582:	0f 93       	push	r16
    1584:	1f 93       	push	r17
    1586:	cf 93       	push	r28
    1588:	df 93       	push	r29
    158a:	ec 01       	movw	r28, r24
{
uint8_t gpioValue =  _blCurState;
    158c:	1b a5       	ldd	r17, Y+43	; 0x2b
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
    158e:	88 a1       	ldd	r24, Y+32	; 0x20
    1590:	88 23       	and	r24, r24
    1592:	09 f4       	brne	.+2      	; 0x1596 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x24>
    1594:	f6 c0       	rjmp	.+492    	; 0x1782 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
    1596:	89 a1       	ldd	r24, Y+33	; 0x21
    1598:	88 23       	and	r24, r24
    159a:	09 f4       	brne	.+2      	; 0x159e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x2c>
    159c:	f2 c0       	rjmp	.+484    	; 0x1782 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
		return(hd44780::RV_ENXIO);

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
    159e:	82 30       	cpi	r24, 0x02	; 2
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x32>
    15a2:	f1 c0       	rjmp	.+482    	; 0x1786 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
	{
		return(hd44780::RV_ENOTSUP);
	}

	// check if reads supported
	if(!_rw)
    15a4:	8b a1       	ldd	r24, Y+35	; 0x23
    15a6:	88 23       	and	r24, r24
    15a8:	09 f4       	brne	.+2      	; 0x15ac <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x3a>
    15aa:	ed c0       	rjmp	.+474    	; 0x1786 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
    15ac:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
    15ae:	8c 8c       	ldd	r8, Y+28	; 0x1c
    15b0:	9d 8c       	ldd	r9, Y+29	; 0x1d
    15b2:	ae 8c       	ldd	r10, Y+30	; 0x1e
    15b4:	bf 8c       	ldd	r11, Y+31	; 0x1f
    15b6:	c8 8c       	ldd	r12, Y+24	; 0x18
    15b8:	d9 8c       	ldd	r13, Y+25	; 0x19
    15ba:	ea 8c       	ldd	r14, Y+26	; 0x1a
    15bc:	fb 8c       	ldd	r15, Y+27	; 0x1b
    15be:	8d e2       	ldi	r24, 0x2D	; 45
    15c0:	c8 1a       	sub	r12, r24
    15c2:	d1 08       	sbc	r13, r1
    15c4:	e1 08       	sbc	r14, r1
    15c6:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
    15c8:	0e 94 0d 22 	call	0x441a	; 0x441a <micros>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	8c 19       	sub	r24, r12
    15d2:	9d 09       	sbc	r25, r13
    15d4:	ae 09       	sbc	r26, r14
    15d6:	bf 09       	sbc	r27, r15
    15d8:	88 15       	cp	r24, r8
    15da:	99 05       	cpc	r25, r9
    15dc:	aa 05       	cpc	r26, r10
    15de:	bb 05       	cpc	r27, r11
    15e0:	98 f3       	brcs	.-26     	; 0x15c8 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x56>
    15e2:	8d a1       	ldd	r24, Y+37	; 0x25
    15e4:	18 2b       	or	r17, r24
    15e6:	8e a1       	ldd	r24, Y+38	; 0x26
    15e8:	18 2b       	or	r17, r24
    15ea:	8f a1       	ldd	r24, Y+39	; 0x27
    15ec:	18 2b       	or	r17, r24
   
	// put all the expander LCD data pins into input mode.
	// PCF8574 psuedo inputs use pullups so setting them to 1
	// makes them suitible for inputs.

	gpioValue |= _d4|_d5|_d6|_d7;
    15ee:	88 a5       	ldd	r24, Y+40	; 0x28
    15f0:	18 2b       	or	r17, r24

	// set RS based on type of read (data or status/cmd)
	if(type == hd44780::HD44780_IOdata) 
    15f2:	01 30       	cpi	r16, 0x01	; 1
    15f4:	11 f4       	brne	.+4      	; 0x15fa <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x88>
	{
		gpioValue |= _rs; // RS high to read data reg
    15f6:	8a a1       	ldd	r24, Y+34	; 0x22
    15f8:	18 2b       	or	r17, r24
	}

	gpioValue |= _rw; // r/w high for reading
    15fa:	8b a1       	ldd	r24, Y+35	; 0x23
    15fc:	18 2b       	or	r17, r24

	// write all the bits to the expander port
	
	Wire.beginTransmission(_addr);
    15fe:	68 a1       	ldd	r22, Y+32	; 0x20
    1600:	8d e0       	ldi	r24, 0x0D	; 13
    1602:	95 e0       	ldi	r25, 0x05	; 5
    1604:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue);		// d4-d7 are inputs, RS, r/w high, E LOW
    1608:	61 2f       	mov	r22, r17
    160a:	8d e0       	ldi	r24, 0x0D	; 13
    160c:	95 e0       	ldi	r25, 0x05	; 5
    160e:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    1612:	8d e0       	ldi	r24, 0x0D	; 13
    1614:	95 e0       	ldi	r25, 0x05	; 5
    1616:	0e 94 31 18 	call	0x3062	; 0x3062 <_ZN7TwoWire15endTransmissionEv>
    161a:	88 23       	and	r24, r24
    161c:	19 f0       	breq	.+6      	; 0x1624 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xb2>
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;
    161e:	0f ef       	ldi	r16, 0xFF	; 255
    1620:	1f ef       	ldi	r17, 0xFF	; 255
    1622:	9d c0       	rjmp	.+314    	; 0x175e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ec>
	if(Wire.endTransmission())
		goto returnStatus;


	// raise E to read the data.
	Wire.beginTransmission(_addr);
    1624:	68 a1       	ldd	r22, Y+32	; 0x20
    1626:	8d e0       	ldi	r24, 0x0D	; 13
    1628:	95 e0       	ldi	r25, 0x05	; 5
    162a:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raises E 
    162e:	6c a1       	ldd	r22, Y+36	; 0x24
    1630:	61 2b       	or	r22, r17
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	8d e0       	ldi	r24, 0x0D	; 13
    1636:	95 e0       	ldi	r25, 0x05	; 5
    1638:	0e 94 32 02 	call	0x464	; 0x464 <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
    163c:	8d e0       	ldi	r24, 0x0D	; 13
    163e:	95 e0       	ldi	r25, 0x05	; 5
    1640:	0e 94 31 18 	call	0x3062	; 0x3062 <_ZN7TwoWire15endTransmissionEv>
    1644:	81 11       	cpse	r24, r1
    1646:	eb cf       	rjmp	.-42     	; 0x161e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// read the expander port to get the upper nibble of the byte
	Wire.requestFrom((int)_addr, 1);
    1648:	68 a1       	ldd	r22, Y+32	; 0x20
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	41 e0       	ldi	r20, 0x01	; 1
    164e:	50 e0       	ldi	r21, 0x00	; 0
    1650:	8d e0       	ldi	r24, 0x0D	; 13
    1652:	95 e0       	ldi	r25, 0x05	; 5
    1654:	0e 94 2e 18 	call	0x305c	; 0x305c <_ZN7TwoWire11requestFromEii>
	iodata = Wire.read();
    1658:	8d e0       	ldi	r24, 0x0D	; 13
    165a:	95 e0       	ldi	r25, 0x05	; 5
    165c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZN7TwoWire4readEv>
    1660:	7c 01       	movw	r14, r24
	if(iodata < 0) // did we not receive a byte?
    1662:	97 fd       	sbrc	r25, 7
    1664:	dc cf       	rjmp	.-72     	; 0x161e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
    1666:	68 a1       	ldd	r22, Y+32	; 0x20
    1668:	8d e0       	ldi	r24, 0x0D	; 13
    166a:	95 e0       	ldi	r25, 0x05	; 5
    166c:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
    1670:	61 2f       	mov	r22, r17
    1672:	8d e0       	ldi	r24, 0x0D	; 13
    1674:	95 e0       	ldi	r25, 0x05	; 5
    1676:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    167a:	8d e0       	ldi	r24, 0x0D	; 13
    167c:	95 e0       	ldi	r25, 0x05	; 5
    167e:	0e 94 31 18 	call	0x3062	; 0x3062 <_ZN7TwoWire15endTransmissionEv>
    1682:	81 11       	cpse	r24, r1
    1684:	cc cf       	rjmp	.-104    	; 0x161e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
    1686:	8d a1       	ldd	r24, Y+37	; 0x25
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	8e 21       	and	r24, r14
    168c:	9f 21       	and	r25, r15
    168e:	89 2b       	or	r24, r25
    1690:	11 f4       	brne	.+4      	; 0x1696 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x124>
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
    1692:	00 e0       	ldi	r16, 0x00	; 0
    1694:	01 c0       	rjmp	.+2      	; 0x1698 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x126>
	if(Wire.endTransmission())
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
		data |= (1 << 4);
    1696:	00 e1       	ldi	r16, 0x10	; 16

	if(iodata & _d5)
    1698:	8e a1       	ldd	r24, Y+38	; 0x26
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	8e 21       	and	r24, r14
    169e:	9f 21       	and	r25, r15
    16a0:	89 2b       	or	r24, r25
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x134>
		data |= (1 << 5);
    16a4:	00 62       	ori	r16, 0x20	; 32

	if(iodata & _d6)
    16a6:	8f a1       	ldd	r24, Y+39	; 0x27
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	8e 21       	and	r24, r14
    16ac:	9f 21       	and	r25, r15
    16ae:	89 2b       	or	r24, r25
    16b0:	09 f0       	breq	.+2      	; 0x16b4 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x142>
		data |= (1 << 6);
    16b2:	00 64       	ori	r16, 0x40	; 64

	if(iodata & _d7)
    16b4:	88 a5       	ldd	r24, Y+40	; 0x28
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	e8 22       	and	r14, r24
    16ba:	f9 22       	and	r15, r25
    16bc:	ef 28       	or	r14, r15
    16be:	09 f0       	breq	.+2      	; 0x16c2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x150>
		data |= (1 << 7);
    16c0:	00 68       	ori	r16, 0x80	; 128
	
	Wire.beginTransmission(_addr);
    16c2:	68 a1       	ldd	r22, Y+32	; 0x20
    16c4:	8d e0       	ldi	r24, 0x0D	; 13
    16c6:	95 e0       	ldi	r25, 0x05	; 5
    16c8:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raise E to read next nibble
    16cc:	6c a1       	ldd	r22, Y+36	; 0x24
    16ce:	61 2b       	or	r22, r17
    16d0:	70 e0       	ldi	r23, 0x00	; 0
    16d2:	8d e0       	ldi	r24, 0x0D	; 13
    16d4:	95 e0       	ldi	r25, 0x05	; 5
    16d6:	0e 94 32 02 	call	0x464	; 0x464 <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
    16da:	8d e0       	ldi	r24, 0x0D	; 13
    16dc:	95 e0       	ldi	r25, 0x05	; 5
    16de:	0e 94 31 18 	call	0x3062	; 0x3062 <_ZN7TwoWire15endTransmissionEv>
    16e2:	81 11       	cpse	r24, r1
    16e4:	9c cf       	rjmp	.-200    	; 0x161e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>

	// read the expander port to get the lower nibble of the byte
	// We can't look at the return value from requestFrom() on the TineyWireM
	// library as it doesn't work like it is supposed to.
	// So we look at the return status from read() instead.
	Wire.requestFrom((int)_addr, 1);
    16e6:	68 a1       	ldd	r22, Y+32	; 0x20
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	41 e0       	ldi	r20, 0x01	; 1
    16ec:	50 e0       	ldi	r21, 0x00	; 0
    16ee:	8d e0       	ldi	r24, 0x0D	; 13
    16f0:	95 e0       	ldi	r25, 0x05	; 5
    16f2:	0e 94 2e 18 	call	0x305c	; 0x305c <_ZN7TwoWire11requestFromEii>

	iodata = Wire.read();
    16f6:	8d e0       	ldi	r24, 0x0D	; 13
    16f8:	95 e0       	ldi	r25, 0x05	; 5
    16fa:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZN7TwoWire4readEv>
    16fe:	7c 01       	movw	r14, r24

	if(iodata < 0) // did we not receive a byte?
    1700:	97 fd       	sbrc	r25, 7
    1702:	8d cf       	rjmp	.-230    	; 0x161e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
    1704:	68 a1       	ldd	r22, Y+32	; 0x20
    1706:	8d e0       	ldi	r24, 0x0D	; 13
    1708:	95 e0       	ldi	r25, 0x05	; 5
    170a:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
    170e:	61 2f       	mov	r22, r17
    1710:	8d e0       	ldi	r24, 0x0D	; 13
    1712:	95 e0       	ldi	r25, 0x05	; 5
    1714:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    1718:	8d e0       	ldi	r24, 0x0D	; 13
    171a:	95 e0       	ldi	r25, 0x05	; 5
    171c:	0e 94 31 18 	call	0x3062	; 0x3062 <_ZN7TwoWire15endTransmissionEv>
    1720:	81 11       	cpse	r24, r1
    1722:	7d cf       	rjmp	.-262    	; 0x161e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into lower nibble of byte
	if(iodata & _d4)
    1724:	8d a1       	ldd	r24, Y+37	; 0x25
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	8e 21       	and	r24, r14
    172a:	9f 21       	and	r25, r15
    172c:	89 2b       	or	r24, r25
    172e:	09 f0       	breq	.+2      	; 0x1732 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1c0>
		data |= (1 << 0);
    1730:	01 60       	ori	r16, 0x01	; 1

	if(iodata & _d5)
    1732:	8e a1       	ldd	r24, Y+38	; 0x26
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	8e 21       	and	r24, r14
    1738:	9f 21       	and	r25, r15
    173a:	89 2b       	or	r24, r25
    173c:	09 f0       	breq	.+2      	; 0x1740 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ce>
		data |= (1 << 1);
    173e:	02 60       	ori	r16, 0x02	; 2

	if(iodata & _d6)
    1740:	8f a1       	ldd	r24, Y+39	; 0x27
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	8e 21       	and	r24, r14
    1746:	9f 21       	and	r25, r15
    1748:	89 2b       	or	r24, r25
    174a:	09 f0       	breq	.+2      	; 0x174e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1dc>
		data |= (1 << 2);
    174c:	04 60       	ori	r16, 0x04	; 4

	if(iodata & _d7)
    174e:	88 a5       	ldd	r24, Y+40	; 0x28
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	e8 22       	and	r14, r24
    1754:	f9 22       	and	r15, r25
    1756:	ef 28       	or	r14, r15
    1758:	09 f0       	breq	.+2      	; 0x175c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ea>
		data |= (1 << 3);
    175a:	08 60       	ori	r16, 0x08	; 8

	rval = data;
    175c:	10 e0       	ldi	r17, 0x00	; 0

returnStatus:

	// try to put gpio port back to all outputs state with WR signal low for writes
	Wire.beginTransmission(_addr);
    175e:	68 a1       	ldd	r22, Y+32	; 0x20
    1760:	8d e0       	ldi	r24, 0x0D	; 13
    1762:	95 e0       	ldi	r25, 0x05	; 5
    1764:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(_blCurState);		// with E LOW
    1768:	6b a5       	ldd	r22, Y+43	; 0x2b
    176a:	8d e0       	ldi	r24, 0x0D	; 13
    176c:	95 e0       	ldi	r25, 0x05	; 5
    176e:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    1772:	8d e0       	ldi	r24, 0x0D	; 13
    1774:	95 e0       	ldi	r25, 0x05	; 5
    1776:	0e 94 31 18 	call	0x3062	; 0x3062 <_ZN7TwoWire15endTransmissionEv>
    177a:	88 23       	and	r24, r24
    177c:	39 f0       	breq	.+14     	; 0x178c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21a>
		rval = hd44780::RV_EIO;
    177e:	8f ef       	ldi	r24, 0xFF	; 255
    1780:	03 c0       	rjmp	.+6      	; 0x1788 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
    1782:	8c ef       	ldi	r24, 0xFC	; 252
    1784:	01 c0       	rjmp	.+2      	; 0x1788 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
	{
		return(hd44780::RV_ENOTSUP);
    1786:	8d ef       	ldi	r24, 0xFD	; 253
    1788:	9f ef       	ldi	r25, 0xFF	; 255
    178a:	01 c0       	rjmp	.+2      	; 0x178e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21c>
    178c:	c8 01       	movw	r24, r16
	Wire.write(_blCurState);		// with E LOW
	if(Wire.endTransmission())
		rval = hd44780::RV_EIO;

	return(rval);
}
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	1f 91       	pop	r17
    1794:	0f 91       	pop	r16
    1796:	ff 90       	pop	r15
    1798:	ef 90       	pop	r14
    179a:	df 90       	pop	r13
    179c:	cf 90       	pop	r12
    179e:	bf 90       	pop	r11
    17a0:	af 90       	pop	r10
    17a2:	9f 90       	pop	r9
    17a4:	8f 90       	pop	r8
    17a6:	08 95       	ret

000017a8 <_ZN14hd44780_I2Cexp11autocfg8574Ev>:
 * a new resistor to  connect to the base of the transistor.
 * 
 * As a result the SYDZ backpack cannot use autoconfiguration.
 */

int autocfg8574()
    17a8:	0f 93       	push	r16
    17aa:	1f 93       	push	r17
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	ec 01       	movw	r28, r24
uint8_t data, data2;
uint8_t rs, rw, en, d4, d5, d6, d7, bl, blLevel;

	// First put a 0xff in the output port

	Wire.beginTransmission(_addr);
    17b2:	68 a1       	ldd	r22, Y+32	; 0x20
    17b4:	8d e0       	ldi	r24, 0x0D	; 13
    17b6:	95 e0       	ldi	r25, 0x05	; 5
    17b8:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0xff);
    17bc:	6f ef       	ldi	r22, 0xFF	; 255
    17be:	8d e0       	ldi	r24, 0x0D	; 13
    17c0:	95 e0       	ldi	r25, 0x05	; 5
    17c2:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    17c6:	8d e0       	ldi	r24, 0x0D	; 13
    17c8:	95 e0       	ldi	r25, 0x05	; 5
    17ca:	0e 94 31 18 	call	0x3062	; 0x3062 <_ZN7TwoWire15endTransmissionEv>

	// now read back from the port

	Wire.requestFrom((int)_addr, 1);
    17ce:	68 a1       	ldd	r22, Y+32	; 0x20
    17d0:	70 e0       	ldi	r23, 0x00	; 0
    17d2:	41 e0       	ldi	r20, 0x01	; 1
    17d4:	50 e0       	ldi	r21, 0x00	; 0
    17d6:	8d e0       	ldi	r24, 0x0D	; 13
    17d8:	95 e0       	ldi	r25, 0x05	; 5
    17da:	0e 94 2e 18 	call	0x305c	; 0x305c <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    17de:	8d e0       	ldi	r24, 0x0D	; 13
    17e0:	95 e0       	ldi	r25, 0x05	; 5
    17e2:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZN7TwoWire4readEv>
    17e6:	8c 01       	movw	r16, r24

	// Turn off bit2 to attempt to see if en is bit 2,
	// if it is, it should change all lcd data bits to 1s
	
	Wire.beginTransmission(_addr);
    17e8:	68 a1       	ldd	r22, Y+32	; 0x20
    17ea:	8d e0       	ldi	r24, 0x0D	; 13
    17ec:	95 e0       	ldi	r25, 0x05	; 5
    17ee:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) (~(1 << 2)) );
    17f2:	6b ef       	ldi	r22, 0xFB	; 251
    17f4:	8d e0       	ldi	r24, 0x0D	; 13
    17f6:	95 e0       	ldi	r25, 0x05	; 5
    17f8:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    17fc:	8d e0       	ldi	r24, 0x0D	; 13
    17fe:	95 e0       	ldi	r25, 0x05	; 5
    1800:	0e 94 31 18 	call	0x3062	; 0x3062 <_ZN7TwoWire15endTransmissionEv>

	// read back data
	Wire.requestFrom((int)_addr, 1);
    1804:	68 a1       	ldd	r22, Y+32	; 0x20
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	41 e0       	ldi	r20, 0x01	; 1
    180a:	50 e0       	ldi	r21, 0x00	; 0
    180c:	8d e0       	ldi	r24, 0x0D	; 13
    180e:	95 e0       	ldi	r25, 0x05	; 5
    1810:	0e 94 2e 18 	call	0x305c	; 0x305c <_ZN7TwoWire11requestFromEii>
	data2 = Wire.read();
    1814:	8d e0       	ldi	r24, 0x0D	; 13
    1816:	95 e0       	ldi	r25, 0x05	; 5
    1818:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZN7TwoWire4readEv>

	// If lower 3 bits are high and all 4 upper bits are high after clearing bit 2
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
    181c:	98 01       	movw	r18, r16
    181e:	27 70       	andi	r18, 0x07	; 7
    1820:	33 27       	eor	r19, r19
    1822:	27 30       	cpi	r18, 0x07	; 7
    1824:	31 05       	cpc	r19, r1
    1826:	b1 f4       	brne	.+44     	; 0x1854 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
    1828:	80 7f       	andi	r24, 0xF0	; 240
    182a:	99 27       	eor	r25, r25
    182c:	80 3f       	cpi	r24, 0xF0	; 240
    182e:	91 05       	cpc	r25, r1
    1830:	89 f4       	brne	.+34     	; 0x1854 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
    1832:	83 e0       	ldi	r24, 0x03	; 3
    1834:	16 95       	lsr	r17
    1836:	07 95       	ror	r16
    1838:	8a 95       	dec	r24
    183a:	e1 f7       	brne	.-8      	; 0x1834 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x8c>
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	08 27       	eor	r16, r24
    1840:	01 70       	andi	r16, 0x01	; 1
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
	{
		rs = 0; rw = 1; en = 2; d4 = 4; d5 = 5; d6 = 6; d7 = 7; bl = 3;
    1842:	43 e0       	ldi	r20, 0x03	; 3
    1844:	57 e0       	ldi	r21, 0x07	; 7
    1846:	66 e0       	ldi	r22, 0x06	; 6
    1848:	75 e0       	ldi	r23, 0x05	; 5
    184a:	e4 e0       	ldi	r30, 0x04	; 4
    184c:	22 e0       	ldi	r18, 0x02	; 2
    184e:	f1 e0       	ldi	r31, 0x01	; 1
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	34 c0       	rjmp	.+104    	; 0x18bc <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x114>
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
		}
	}
	else if((data & 0x70) == 0x70)
    1854:	c8 01       	movw	r24, r16
    1856:	80 77       	andi	r24, 0x70	; 112
    1858:	99 27       	eor	r25, r25
    185a:	80 37       	cpi	r24, 0x70	; 112
    185c:	91 05       	cpc	r25, r1
    185e:	09 f0       	breq	.+2      	; 0x1862 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xba>
    1860:	68 c0       	rjmp	.+208    	; 0x1932 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18a>
		// both use bit 7 for backlight control

		// Turn off the en bit which should change the data bits
		// bit 4 on the mjkdz is en so we try that bit
	
		Wire.beginTransmission(_addr);
    1862:	68 a1       	ldd	r22, Y+32	; 0x20
    1864:	8d e0       	ldi	r24, 0x0D	; 13
    1866:	95 e0       	ldi	r25, 0x05	; 5
    1868:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t) (~(1 << 4)) );
    186c:	6f ee       	ldi	r22, 0xEF	; 239
    186e:	8d e0       	ldi	r24, 0x0D	; 13
    1870:	95 e0       	ldi	r25, 0x05	; 5
    1872:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    1876:	8d e0       	ldi	r24, 0x0D	; 13
    1878:	95 e0       	ldi	r25, 0x05	; 5
    187a:	0e 94 31 18 	call	0x3062	; 0x3062 <_ZN7TwoWire15endTransmissionEv>

		// read back data
		Wire.requestFrom((int)_addr, 1);
    187e:	68 a1       	ldd	r22, Y+32	; 0x20
    1880:	70 e0       	ldi	r23, 0x00	; 0
    1882:	41 e0       	ldi	r20, 0x01	; 1
    1884:	50 e0       	ldi	r21, 0x00	; 0
    1886:	8d e0       	ldi	r24, 0x0D	; 13
    1888:	95 e0       	ldi	r25, 0x05	; 5
    188a:	0e 94 2e 18 	call	0x305c	; 0x305c <_ZN7TwoWire11requestFromEii>
		data2 = Wire.read();
    188e:	8d e0       	ldi	r24, 0x0D	; 13
    1890:	95 e0       	ldi	r25, 0x05	; 5
    1892:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZN7TwoWire4readEv>
		// look at data bits and see if they changed
		// if they changed to 0xf, then en was bit 4 and it is mjdkz
		// this will happen since when E is low the LCD is not
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
    1896:	8f 70       	andi	r24, 0x0F	; 15
    1898:	99 27       	eor	r25, r25
    189a:	0f 97       	sbiw	r24, 0x0f	; 15
    189c:	19 f0       	breq	.+6      	; 0x18a4 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xfc>
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
		}
		else
		{
			// electrofun LCDXIO
			rs = 4; rw = 5; en = 6; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
    189e:	26 e0       	ldi	r18, 0x06	; 6
    18a0:	34 e0       	ldi	r19, 0x04	; 4
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x100>
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
		{
			// mjkdz
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
    18a4:	24 e0       	ldi	r18, 0x04	; 4
    18a6:	36 e0       	ldi	r19, 0x06	; 6
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
    18a8:	00 95       	com	r16
    18aa:	00 1f       	adc	r16, r16
    18ac:	00 27       	eor	r16, r16
    18ae:	00 1f       	adc	r16, r16
    18b0:	47 e0       	ldi	r20, 0x07	; 7
    18b2:	53 e0       	ldi	r21, 0x03	; 3
    18b4:	62 e0       	ldi	r22, 0x02	; 2
    18b6:	71 e0       	ldi	r23, 0x01	; 1
    18b8:	e0 e0       	ldi	r30, 0x00	; 0
    18ba:	f5 e0       	ldi	r31, 0x05	; 5
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	dc 01       	movw	r26, r24
    18c2:	01 c0       	rjmp	.+2      	; 0x18c6 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11e>
    18c4:	aa 0f       	add	r26, r26
    18c6:	3a 95       	dec	r19
    18c8:	ea f7       	brpl	.-6      	; 0x18c4 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11c>
    18ca:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
    18cc:	dc 01       	movw	r26, r24
    18ce:	01 c0       	rjmp	.+2      	; 0x18d2 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x12a>
    18d0:	aa 0f       	add	r26, r26
    18d2:	fa 95       	dec	r31
    18d4:	ea f7       	brpl	.-6      	; 0x18d0 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x128>
    18d6:	ab a3       	std	Y+35, r26	; 0x23
	else
		_rw = 0; // no r/w control

	_en = ( 1 << en );
    18d8:	dc 01       	movw	r26, r24
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x138>
    18dc:	aa 0f       	add	r26, r26
    18de:	bb 1f       	adc	r27, r27
    18e0:	2a 95       	dec	r18
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x134>
    18e4:	ac a3       	std	Y+36, r26	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
    18e6:	9c 01       	movw	r18, r24
    18e8:	01 c0       	rjmp	.+2      	; 0x18ec <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x144>
    18ea:	22 0f       	add	r18, r18
    18ec:	ea 95       	dec	r30
    18ee:	ea f7       	brpl	.-6      	; 0x18ea <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x142>
    18f0:	2d a3       	std	Y+37, r18	; 0x25
	_d5 = ( 1 << d5 );
    18f2:	9c 01       	movw	r18, r24
    18f4:	01 c0       	rjmp	.+2      	; 0x18f8 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x150>
    18f6:	22 0f       	add	r18, r18
    18f8:	7a 95       	dec	r23
    18fa:	ea f7       	brpl	.-6      	; 0x18f6 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x14e>
    18fc:	2e a3       	std	Y+38, r18	; 0x26
	_d6 = ( 1 << d6 );
    18fe:	9c 01       	movw	r18, r24
    1900:	01 c0       	rjmp	.+2      	; 0x1904 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15c>
    1902:	22 0f       	add	r18, r18
    1904:	6a 95       	dec	r22
    1906:	ea f7       	brpl	.-6      	; 0x1902 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15a>
    1908:	2f a3       	std	Y+39, r18	; 0x27
	_d7 = ( 1 << d7 );   
    190a:	9c 01       	movw	r18, r24
    190c:	01 c0       	rjmp	.+2      	; 0x1910 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x168>
    190e:	22 0f       	add	r18, r18
    1910:	5a 95       	dec	r21
    1912:	ea f7       	brpl	.-6      	; 0x190e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x166>
    1914:	28 a7       	std	Y+40, r18	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
    1916:	01 c0       	rjmp	.+2      	; 0x191a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x172>
    1918:	88 0f       	add	r24, r24
    191a:	4a 95       	dec	r20
    191c:	ea f7       	brpl	.-6      	; 0x1918 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x170>
    191e:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
    1920:	0a a7       	std	Y+42, r16	; 0x2a
	// set default bl state to backlight on
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
    1922:	01 30       	cpi	r16, 0x01	; 1
    1924:	11 f4       	brne	.+4      	; 0x192a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x182>
		_blCurState = _bl;
    1926:	8b a7       	std	Y+43, r24	; 0x2b
    1928:	01 c0       	rjmp	.+2      	; 0x192c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x184>
	else
		_blCurState = 0;
    192a:	1b a6       	std	Y+43, r1	; 0x2b
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18e>
		}
	}
	else
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
    1932:	8d ef       	ldi	r24, 0xFD	; 253
    1934:	9f ef       	ldi	r25, 0xFF	; 255
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
    1936:	df 91       	pop	r29
    1938:	cf 91       	pop	r28
    193a:	1f 91       	pop	r17
    193c:	0f 91       	pop	r16
    193e:	08 95       	ret

00001940 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>:
 * if GP1 is low then the board is the BOARD_XXX board
 * The BOARD_XXX may not work as GP1 is used for D5 on WIDEHK and LCDPLUG
 *
 *
 */
int autocfgMCP23008()
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	ec 01       	movw	r28, r24

	/*
	 * Now set up output port
	 * Make no assumptions as to the state of IOCON BYTE mode
	 */
	Wire.beginTransmission(_addr);
    1946:	68 a1       	ldd	r22, Y+32	; 0x20
    1948:	8d e0       	ldi	r24, 0x0D	; 13
    194a:	95 e0       	ldi	r25, 0x05	; 5
    194c:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t)0); // point to IODIR
    1950:	60 e0       	ldi	r22, 0x00	; 0
    1952:	8d e0       	ldi	r24, 0x0D	; 13
    1954:	95 e0       	ldi	r25, 0x05	; 5
    1956:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <_ZN7TwoWire5writeEh>
	Wire.write(0xff); // all pins inputs
    195a:	6f ef       	ldi	r22, 0xFF	; 255
    195c:	70 e0       	ldi	r23, 0x00	; 0
    195e:	8d e0       	ldi	r24, 0x0D	; 13
    1960:	95 e0       	ldi	r25, 0x05	; 5
    1962:	0e 94 32 02 	call	0x464	; 0x464 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    1966:	8d e0       	ldi	r24, 0x0D	; 13
    1968:	95 e0       	ldi	r25, 0x05	; 5
    196a:	0e 94 31 18 	call	0x3062	; 0x3062 <_ZN7TwoWire15endTransmissionEv>

	Wire.beginTransmission(_addr);
    196e:	68 a1       	ldd	r22, Y+32	; 0x20
    1970:	8d e0       	ldi	r24, 0x0D	; 13
    1972:	95 e0       	ldi	r25, 0x05	; 5
    1974:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(6); // point to GPPU
    1978:	66 e0       	ldi	r22, 0x06	; 6
    197a:	70 e0       	ldi	r23, 0x00	; 0
    197c:	8d e0       	ldi	r24, 0x0D	; 13
    197e:	95 e0       	ldi	r25, 0x05	; 5
    1980:	0e 94 32 02 	call	0x464	; 0x464 <_ZN7TwoWire5writeEi>
	Wire.write(0xff); // turn on pullups
    1984:	6f ef       	ldi	r22, 0xFF	; 255
    1986:	70 e0       	ldi	r23, 0x00	; 0
    1988:	8d e0       	ldi	r24, 0x0D	; 13
    198a:	95 e0       	ldi	r25, 0x05	; 5
    198c:	0e 94 32 02 	call	0x464	; 0x464 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    1990:	8d e0       	ldi	r24, 0x0D	; 13
    1992:	95 e0       	ldi	r25, 0x05	; 5
    1994:	0e 94 31 18 	call	0x3062	; 0x3062 <_ZN7TwoWire15endTransmissionEv>

	/*
	 * read from the GPIO port
	 */

	Wire.beginTransmission(_addr);
    1998:	68 a1       	ldd	r22, Y+32	; 0x20
    199a:	8d e0       	ldi	r24, 0x0D	; 13
    199c:	95 e0       	ldi	r25, 0x05	; 5
    199e:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(9); // point to GPIO
    19a2:	69 e0       	ldi	r22, 0x09	; 9
    19a4:	70 e0       	ldi	r23, 0x00	; 0
    19a6:	8d e0       	ldi	r24, 0x0D	; 13
    19a8:	95 e0       	ldi	r25, 0x05	; 5
    19aa:	0e 94 32 02 	call	0x464	; 0x464 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    19ae:	8d e0       	ldi	r24, 0x0D	; 13
    19b0:	95 e0       	ldi	r25, 0x05	; 5
    19b2:	0e 94 31 18 	call	0x3062	; 0x3062 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom((int)_addr, 1);
    19b6:	68 a1       	ldd	r22, Y+32	; 0x20
    19b8:	70 e0       	ldi	r23, 0x00	; 0
    19ba:	41 e0       	ldi	r20, 0x01	; 1
    19bc:	50 e0       	ldi	r21, 0x00	; 0
    19be:	8d e0       	ldi	r24, 0x0D	; 13
    19c0:	95 e0       	ldi	r25, 0x05	; 5
    19c2:	0e 94 2e 18 	call	0x305c	; 0x305c <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    19c6:	8d e0       	ldi	r24, 0x0D	; 13
    19c8:	95 e0       	ldi	r25, 0x05	; 5
    19ca:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZN7TwoWire4readEv>

	blLevel = HIGH; // known boards are active HIGH bl

	if(data == 0x7f) // bit 7 low, and other control and data lines high
    19ce:	8f 37       	cpi	r24, 0x7F	; 127
    19d0:	61 f0       	breq	.+24     	; 0x19ea <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xaa>
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
    19d2:	86 ff       	sbrs	r24, 6
    19d4:	12 c0       	rjmp	.+36     	; 0x19fa <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xba>
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
    19d6:	81 fd       	sbrc	r24, 1
    19d8:	4c c0       	rjmp	.+152    	; 0x1a72 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x132>
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
		bl = 1;
    19da:	21 e0       	ldi	r18, 0x01	; 1
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
    19dc:	32 e0       	ldi	r19, 0x02	; 2
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
    19de:	43 e0       	ldi	r20, 0x03	; 3
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
    19e0:	54 e0       	ldi	r21, 0x04	; 4
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
    19e2:	65 e0       	ldi	r22, 0x05	; 5
	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
    19e4:	76 e0       	ldi	r23, 0x06	; 6
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
    19e6:	e7 e0       	ldi	r30, 0x07	; 7
    19e8:	0f c0       	rjmp	.+30     	; 0x1a08 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;
    19ea:	27 e0       	ldi	r18, 0x07	; 7
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
    19ec:	36 e0       	ldi	r19, 0x06	; 6
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
    19ee:	45 e0       	ldi	r20, 0x05	; 5
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
    19f0:	54 e0       	ldi	r21, 0x04	; 4
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
    19f2:	63 e0       	ldi	r22, 0x03	; 3
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
    19f4:	72 e0       	ldi	r23, 0x02	; 2

	if(data == 0x7f) // bit 7 low, and other control and data lines high
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
    19f6:	e1 e0       	ldi	r30, 0x01	; 1
    19f8:	07 c0       	rjmp	.+14     	; 0x1a08 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;
    19fa:	26 e0       	ldi	r18, 0x06	; 6
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
    19fc:	33 e0       	ldi	r19, 0x03	; 3
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
    19fe:	42 e0       	ldi	r20, 0x02	; 2
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
    1a00:	51 e0       	ldi	r21, 0x01	; 1
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
    1a02:	60 e0       	ldi	r22, 0x00	; 0
	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
    1a04:	77 e0       	ldi	r23, 0x07	; 7
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
    1a06:	e4 e0       	ldi	r30, 0x04	; 4
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd4>
    1a10:	aa 0f       	add	r26, r26
    1a12:	bb 1f       	adc	r27, r27
    1a14:	ea 95       	dec	r30
    1a16:	e2 f7       	brpl	.-8      	; 0x1a10 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd0>
    1a18:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
	else
		_rw = 0; // no r/w control
    1a1a:	1b a2       	std	Y+35, r1	; 0x23

	_en = ( 1 << en );
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	01 c0       	rjmp	.+2      	; 0x1a22 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe2>
    1a20:	ee 0f       	add	r30, r30
    1a22:	7a 95       	dec	r23
    1a24:	ea f7       	brpl	.-6      	; 0x1a20 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe0>
    1a26:	ec a3       	std	Y+36, r30	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
    1a28:	fc 01       	movw	r30, r24
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xf0>
    1a2c:	ee 0f       	add	r30, r30
    1a2e:	ff 1f       	adc	r31, r31
    1a30:	6a 95       	dec	r22
    1a32:	e2 f7       	brpl	.-8      	; 0x1a2c <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xec>
    1a34:	ed a3       	std	Y+37, r30	; 0x25
	_d5 = ( 1 << d5 );
    1a36:	bc 01       	movw	r22, r24
    1a38:	01 c0       	rjmp	.+2      	; 0x1a3c <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfc>
    1a3a:	66 0f       	add	r22, r22
    1a3c:	5a 95       	dec	r21
    1a3e:	ea f7       	brpl	.-6      	; 0x1a3a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfa>
    1a40:	6e a3       	std	Y+38, r22	; 0x26
	_d6 = ( 1 << d6 );
    1a42:	bc 01       	movw	r22, r24
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x10a>
    1a46:	66 0f       	add	r22, r22
    1a48:	77 1f       	adc	r23, r23
    1a4a:	4a 95       	dec	r20
    1a4c:	e2 f7       	brpl	.-8      	; 0x1a46 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x106>
    1a4e:	6f a3       	std	Y+39, r22	; 0x27
	_d7 = ( 1 << d7 );   
    1a50:	ac 01       	movw	r20, r24
    1a52:	01 c0       	rjmp	.+2      	; 0x1a56 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x116>
    1a54:	44 0f       	add	r20, r20
    1a56:	3a 95       	dec	r19
    1a58:	ea f7       	brpl	.-6      	; 0x1a54 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x114>
    1a5a:	48 a7       	std	Y+40, r20	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
    1a5c:	01 c0       	rjmp	.+2      	; 0x1a60 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x120>
    1a5e:	88 0f       	add	r24, r24
    1a60:	2a 95       	dec	r18
    1a62:	ea f7       	brpl	.-6      	; 0x1a5e <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x11e>
    1a64:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
    1a66:	91 e0       	ldi	r25, 0x01	; 1
    1a68:	9a a7       	std	Y+42, r25	; 0x2a
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
		_blCurState = _bl;
    1a6a:	8b a7       	std	Y+43, r24	; 0x2b
		// could not identify board
		return(hd44780::RV_ENOTSUP);
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x136>

	}
	else
	{
		// could not identify board
		return(hd44780::RV_ENOTSUP);
    1a72:	8d ef       	ldi	r24, 0xFD	; 253
    1a74:	9f ef       	ldi	r25, 0xFF	; 255
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
    1a76:	df 91       	pop	r29
    1a78:	cf 91       	pop	r28
    1a7a:	08 95       	ret

00001a7c <_ZN14hd44780_I2Cexp6ioinitEv>:
// Returns non zero if initialization failed.
//
// can't be used from constructors because not everything is initalized yet.
// (maybe interrupts or other library constructors)
// if Wire library is used in constructor, it will hang.
int ioinit()
    1a7c:	1f 93       	push	r17
    1a7e:	cf 93       	push	r28
    1a80:	df 93       	push	r29
    1a82:	ec 01       	movw	r28, r24
	 * I believe that it is unreasonable to require the the user
	 * sketch code to do it, because all that should change between
	 * hd44780 i/o interfaces should be the constructor
	 * So we go ahead and call it here.
	 */
	Wire.begin();
    1a84:	8d e0       	ldi	r24, 0x0D	; 13
    1a86:	95 e0       	ldi	r25, 0x05	; 5
    1a88:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <_ZN7TwoWire5beginEv>

	// auto locate i2c expander and magically detect pin mappings

	if(!_addr) // locate next instance
    1a8c:	68 a1       	ldd	r22, Y+32	; 0x20
    1a8e:	61 11       	cpse	r22, r1
    1a90:	0a c0       	rjmp	.+20     	; 0x1aa6 <_ZN14hd44780_I2Cexp6ioinitEv+0x2a>
	{
		_addr = LocateDevice(AutoInst++);
    1a92:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    1a96:	91 e0       	ldi	r25, 0x01	; 1
    1a98:	98 0f       	add	r25, r24
    1a9a:	90 93 9e 04 	sts	0x049E, r25	; 0x80049e <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    1a9e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
    1aa2:	88 a3       	std	Y+32, r24	; 0x20
    1aa4:	0d c0       	rjmp	.+26     	; 0x1ac0 <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
	}
	else
	{
		// check to see if device at specified address is really there
		Wire.beginTransmission(_addr);
    1aa6:	8d e0       	ldi	r24, 0x0D	; 13
    1aa8:	95 e0       	ldi	r25, 0x05	; 5
    1aaa:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEh>
		if(Wire.endTransmission())
    1aae:	8d e0       	ldi	r24, 0x0D	; 13
    1ab0:	95 e0       	ldi	r25, 0x05	; 5
    1ab2:	0e 94 31 18 	call	0x3062	; 0x3062 <_ZN7TwoWire15endTransmissionEv>
    1ab6:	88 23       	and	r24, r24
    1ab8:	19 f0       	breq	.+6      	; 0x1ac0 <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
			return(hd44780::RV_ENXIO);
    1aba:	8c ef       	ldi	r24, 0xFC	; 252
    1abc:	9f ef       	ldi	r25, 0xFF	; 255
    1abe:	a7 c0       	rjmp	.+334    	; 0x1c0e <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	}

	if(!_addr) // locate next instance
    1ac0:	88 a1       	ldd	r24, Y+32	; 0x20
    1ac2:	81 11       	cpse	r24, r1
    1ac4:	09 c0       	rjmp	.+18     	; 0x1ad8 <_ZN14hd44780_I2Cexp6ioinitEv+0x5c>
		_addr = LocateDevice(AutoInst++);
    1ac6:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    1aca:	91 e0       	ldi	r25, 0x01	; 1
    1acc:	98 0f       	add	r25, r24
    1ace:	90 93 9e 04 	sts	0x049E, r25	; 0x80049e <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    1ad2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
    1ad6:	88 a3       	std	Y+32, r24	; 0x20

	if(!_addr) // if we couldn't locate it, return error
    1ad8:	18 a1       	ldd	r17, Y+32	; 0x20
    1ada:	11 23       	and	r17, r17
    1adc:	71 f3       	breq	.-36     	; 0x1aba <_ZN14hd44780_I2Cexp6ioinitEv+0x3e>
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
    1ade:	89 a1       	ldd	r24, Y+33	; 0x21
    1ae0:	88 23       	and	r24, r24
    1ae2:	c1 f1       	breq	.+112    	; 0x1b54 <_ZN14hd44780_I2Cexp6ioinitEv+0xd8>
			return(status);
	}

	// initialize IO expander chip

	Wire.beginTransmission(_addr);
    1ae4:	68 a1       	ldd	r22, Y+32	; 0x20
    1ae6:	8d e0       	ldi	r24, 0x0D	; 13
    1ae8:	95 e0       	ldi	r25, 0x05	; 5
    1aea:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEh>

	if(_expType == I2Cexp_MCP23008)
    1aee:	89 a1       	ldd	r24, Y+33	; 0x21
    1af0:	82 30       	cpi	r24, 0x02	; 2
    1af2:	09 f0       	breq	.+2      	; 0x1af6 <_ZN14hd44780_I2Cexp6ioinitEv+0x7a>
    1af4:	76 c0       	rjmp	.+236    	; 0x1be2 <_ZN14hd44780_I2Cexp6ioinitEv+0x166>
		 * within the same i2c connection by simply sending more bytes.
		 * This is necessary as the code uses back to back writes to perform
		 * the nibble updates as well as the toggling the enable signal.
		 * This methodology offers significant performance gains.
		 */
		Wire.write(5);	// point to IOCON
    1af6:	65 e0       	ldi	r22, 0x05	; 5
    1af8:	70 e0       	ldi	r23, 0x00	; 0
    1afa:	8d e0       	ldi	r24, 0x0D	; 13
    1afc:	95 e0       	ldi	r25, 0x05	; 5
    1afe:	0e 94 32 02 	call	0x464	; 0x464 <_ZN7TwoWire5writeEi>
		Wire.write(0x20);// disable sequential mode (enables BYTE mode)
    1b02:	60 e2       	ldi	r22, 0x20	; 32
    1b04:	70 e0       	ldi	r23, 0x00	; 0
    1b06:	8d e0       	ldi	r24, 0x0D	; 13
    1b08:	95 e0       	ldi	r25, 0x05	; 5
    1b0a:	0e 94 32 02 	call	0x464	; 0x464 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    1b0e:	8d e0       	ldi	r24, 0x0D	; 13
    1b10:	95 e0       	ldi	r25, 0x05	; 5
    1b12:	0e 94 31 18 	call	0x3062	; 0x3062 <_ZN7TwoWire15endTransmissionEv>

		/*
		 * Now set up output port
		 */
		Wire.beginTransmission(_addr);
    1b16:	68 a1       	ldd	r22, Y+32	; 0x20
    1b18:	8d e0       	ldi	r24, 0x0D	; 13
    1b1a:	95 e0       	ldi	r25, 0x05	; 5
    1b1c:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t)0); // point to IODIR
    1b20:	60 e0       	ldi	r22, 0x00	; 0
    1b22:	8d e0       	ldi	r24, 0x0D	; 13
    1b24:	95 e0       	ldi	r25, 0x05	; 5
    1b26:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <_ZN7TwoWire5writeEh>
		Wire.write((uint8_t)0); // all pins output
    1b2a:	60 e0       	ldi	r22, 0x00	; 0
    1b2c:	8d e0       	ldi	r24, 0x0D	; 13
    1b2e:	95 e0       	ldi	r25, 0x05	; 5
    1b30:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    1b34:	8d e0       	ldi	r24, 0x0D	; 13
    1b36:	95 e0       	ldi	r25, 0x05	; 5
    1b38:	0e 94 31 18 	call	0x3062	; 0x3062 <_ZN7TwoWire15endTransmissionEv>
	
		/*
		 * point chip to GPIO
		 */
		Wire.beginTransmission(_addr);
    1b3c:	68 a1       	ldd	r22, Y+32	; 0x20
    1b3e:	8d e0       	ldi	r24, 0x0D	; 13
    1b40:	95 e0       	ldi	r25, 0x05	; 5
    1b42:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEh>
		Wire.write(9); // point to GPIO
    1b46:	69 e0       	ldi	r22, 0x09	; 9
    1b48:	70 e0       	ldi	r23, 0x00	; 0
    1b4a:	8d e0       	ldi	r24, 0x0D	; 13
    1b4c:	95 e0       	ldi	r25, 0x05	; 5
    1b4e:	0e 94 32 02 	call	0x464	; 0x464 <_ZN7TwoWire5writeEi>
    1b52:	47 c0       	rjmp	.+142    	; 0x1be2 <_ZN14hd44780_I2Cexp6ioinitEv+0x166>

	/*
	 * First try to write 0xff to MCP23008 IODIR
	 * On a PCF8574 this will end up writing 0 and then ff to output port
	 */
	Wire.beginTransmission(address);
    1b54:	61 2f       	mov	r22, r17
    1b56:	8d e0       	ldi	r24, 0x0D	; 13
    1b58:	95 e0       	ldi	r25, 0x05	; 5
    1b5a:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
    1b5e:	60 e0       	ldi	r22, 0x00	; 0
    1b60:	8d e0       	ldi	r24, 0x0D	; 13
    1b62:	95 e0       	ldi	r25, 0x05	; 5
    1b64:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <_ZN7TwoWire5writeEh>
	Wire.write((uint8_t) 0xff);	// try to write to MCP23008 IODR
    1b68:	6f ef       	ldi	r22, 0xFF	; 255
    1b6a:	8d e0       	ldi	r24, 0x0D	; 13
    1b6c:	95 e0       	ldi	r25, 0x05	; 5
    1b6e:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    1b72:	8d e0       	ldi	r24, 0x0D	; 13
    1b74:	95 e0       	ldi	r25, 0x05	; 5
    1b76:	0e 94 31 18 	call	0x3062	; 0x3062 <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now try to point MCP23008 to IODIR for read
	 * On a PCF8574 this will end up writing a 0 to the output port
	 */

	Wire.beginTransmission(address);
    1b7a:	61 2f       	mov	r22, r17
    1b7c:	8d e0       	ldi	r24, 0x0D	; 13
    1b7e:	95 e0       	ldi	r25, 0x05	; 5
    1b80:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
    1b84:	60 e0       	ldi	r22, 0x00	; 0
    1b86:	8d e0       	ldi	r24, 0x0D	; 13
    1b88:	95 e0       	ldi	r25, 0x05	; 5
    1b8a:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    1b8e:	8d e0       	ldi	r24, 0x0D	; 13
    1b90:	95 e0       	ldi	r25, 0x05	; 5
    1b92:	0e 94 31 18 	call	0x3062	; 0x3062 <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now read a byte
	 * On a MCP23008 we should read the 0xff we wrote to IODIR
	 * On a PCF8574 we should read 0 since the output port was set to 0
	 */
	Wire.requestFrom((int)address, 1);
    1b96:	61 2f       	mov	r22, r17
    1b98:	70 e0       	ldi	r23, 0x00	; 0
    1b9a:	41 e0       	ldi	r20, 0x01	; 1
    1b9c:	50 e0       	ldi	r21, 0x00	; 0
    1b9e:	8d e0       	ldi	r24, 0x0D	; 13
    1ba0:	95 e0       	ldi	r25, 0x05	; 5
    1ba2:	0e 94 2e 18 	call	0x305c	; 0x305c <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    1ba6:	8d e0       	ldi	r24, 0x0D	; 13
    1ba8:	95 e0       	ldi	r25, 0x05	; 5
    1baa:	0e 94 d5 16 	call	0x2daa	; 0x2daa <_ZN7TwoWire4readEv>
    1bae:	9c 01       	movw	r18, r24

	if(data == 0xff)
    1bb0:	8f 3f       	cpi	r24, 0xFF	; 255
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	29 f0       	breq	.+10     	; 0x1bc0 <_ZN14hd44780_I2Cexp6ioinitEv+0x144>
	{
		chiptype = I2Cexp_MCP23008;
    1bb6:	91 e0       	ldi	r25, 0x01	; 1
    1bb8:	23 2b       	or	r18, r19
    1bba:	19 f0       	breq	.+6      	; 0x1bc2 <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	01 c0       	rjmp	.+2      	; 0x1bc2 <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    1bc0:	92 e0       	ldi	r25, 0x02	; 2
	if(!_addr) // if we couldn't locate it, return error
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);
    1bc2:	99 a3       	std	Y+33, r25	; 0x21

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
    1bc4:	99 23       	and	r25, r25
    1bc6:	09 f1       	breq	.+66     	; 0x1c0a <_ZN14hd44780_I2Cexp6ioinitEv+0x18e>
			return(hd44780::RV_EIO);

		if(_expType == I2Cexp_PCF8574)
    1bc8:	91 30       	cpi	r25, 0x01	; 1
    1bca:	21 f4       	brne	.+8      	; 0x1bd4 <_ZN14hd44780_I2Cexp6ioinitEv+0x158>
			status = autocfg8574();		// go auto configure the pin mappings
    1bcc:	ce 01       	movw	r24, r28
    1bce:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_ZN14hd44780_I2Cexp11autocfg8574Ev>
    1bd2:	03 c0       	rjmp	.+6      	; 0x1bda <_ZN14hd44780_I2Cexp6ioinitEv+0x15e>
		else
			status = autocfgMCP23008();	// go auto configure the pin mappings
    1bd4:	ce 01       	movw	r24, r28
    1bd6:	0e 94 a0 0c 	call	0x1940	; 0x1940 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>
		if(status)
    1bda:	00 97       	sbiw	r24, 0x00	; 0
    1bdc:	09 f4       	brne	.+2      	; 0x1be0 <_ZN14hd44780_I2Cexp6ioinitEv+0x164>
    1bde:	82 cf       	rjmp	.-252    	; 0x1ae4 <_ZN14hd44780_I2Cexp6ioinitEv+0x68>
    1be0:	16 c0       	rjmp	.+44     	; 0x1c0e <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
		 */
		Wire.beginTransmission(_addr);
		Wire.write(9); // point to GPIO
		
	}
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
    1be2:	60 e0       	ldi	r22, 0x00	; 0
    1be4:	8d e0       	ldi	r24, 0x0D	; 13
    1be6:	95 e0       	ldi	r25, 0x05	; 5
    1be8:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <_ZN7TwoWire5writeEh>
	if( (status = Wire.endTransmission()) ) // assignment
    1bec:	8d e0       	ldi	r24, 0x0D	; 13
    1bee:	95 e0       	ldi	r25, 0x05	; 5
    1bf0:	0e 94 31 18 	call	0x3062	; 0x3062 <_ZN7TwoWire15endTransmissionEv>
    1bf4:	21 e0       	ldi	r18, 0x01	; 1
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	81 11       	cpse	r24, r1
    1bfa:	02 c0       	rjmp	.+4      	; 0x1c00 <_ZN14hd44780_I2Cexp6ioinitEv+0x184>
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	88 27       	eor	r24, r24
    1c02:	99 27       	eor	r25, r25
    1c04:	82 1b       	sub	r24, r18
    1c06:	93 0b       	sbc	r25, r19
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
			return(hd44780::RV_EIO);
    1c0a:	8f ef       	ldi	r24, 0xFF	; 255
    1c0c:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
	if( (status = Wire.endTransmission()) ) // assignment
		status = hd44780::RV_EIO;

	return ( status );
}
    1c0e:	df 91       	pop	r29
    1c10:	cf 91       	pop	r28
    1c12:	1f 91       	pop	r17
    1c14:	08 95       	ret

00001c16 <_ZN3PID7ComputeEv>:
	   else if(*myOutput < outMin) *myOutput = outMin;

	   if(outputSum > outMax) outputSum= outMax;
	   else if(outputSum < outMin) outputSum= outMin;
   }
}
    1c16:	2f 92       	push	r2
    1c18:	3f 92       	push	r3
    1c1a:	4f 92       	push	r4
    1c1c:	5f 92       	push	r5
    1c1e:	6f 92       	push	r6
    1c20:	7f 92       	push	r7
    1c22:	8f 92       	push	r8
    1c24:	9f 92       	push	r9
    1c26:	af 92       	push	r10
    1c28:	bf 92       	push	r11
    1c2a:	cf 92       	push	r12
    1c2c:	df 92       	push	r13
    1c2e:	ef 92       	push	r14
    1c30:	ff 92       	push	r15
    1c32:	0f 93       	push	r16
    1c34:	1f 93       	push	r17
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	60 97       	sbiw	r28, 0x10	; 16
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	da 96       	adiw	r26, 0x3a	; 58
    1c4e:	bc 91       	ld	r27, X
    1c50:	b9 83       	std	Y+1, r27	; 0x01
    1c52:	b1 11       	cpse	r27, r1
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <_ZN3PID7ComputeEv+0x44>
    1c56:	19 82       	std	Y+1, r1	; 0x01
    1c58:	2b c1       	rjmp	.+598    	; 0x1eb0 <_ZN3PID7ComputeEv+0x29a>
    1c5a:	98 8b       	std	Y+16, r25	; 0x10
    1c5c:	8f 87       	std	Y+15, r24	; 0x0f
    1c5e:	0e 94 01 22 	call	0x4402	; 0x4402 <millis>
    1c62:	6e 83       	std	Y+6, r22	; 0x06
    1c64:	7f 83       	std	Y+7, r23	; 0x07
    1c66:	88 87       	std	Y+8, r24	; 0x08
    1c68:	99 87       	std	Y+9, r25	; 0x09
    1c6a:	ef 85       	ldd	r30, Y+15	; 0x0f
    1c6c:	f8 89       	ldd	r31, Y+16	; 0x10
    1c6e:	82 a1       	ldd	r24, Z+34	; 0x22
    1c70:	93 a1       	ldd	r25, Z+35	; 0x23
    1c72:	a4 a1       	ldd	r26, Z+36	; 0x24
    1c74:	b5 a1       	ldd	r27, Z+37	; 0x25
    1c76:	4e 81       	ldd	r20, Y+6	; 0x06
    1c78:	5f 81       	ldd	r21, Y+7	; 0x07
    1c7a:	68 85       	ldd	r22, Y+8	; 0x08
    1c7c:	79 85       	ldd	r23, Y+9	; 0x09
    1c7e:	48 1b       	sub	r20, r24
    1c80:	59 0b       	sbc	r21, r25
    1c82:	6a 0b       	sbc	r22, r26
    1c84:	7b 0b       	sbc	r23, r27
    1c86:	86 a5       	ldd	r24, Z+46	; 0x2e
    1c88:	97 a5       	ldd	r25, Z+47	; 0x2f
    1c8a:	a0 a9       	ldd	r26, Z+48	; 0x30
    1c8c:	b1 a9       	ldd	r27, Z+49	; 0x31
    1c8e:	48 17       	cp	r20, r24
    1c90:	59 07       	cpc	r21, r25
    1c92:	6a 07       	cpc	r22, r26
    1c94:	7b 07       	cpc	r23, r27
    1c96:	f8 f2       	brcs	.-66     	; 0x1c56 <_ZN3PID7ComputeEv+0x40>
    1c98:	04 8c       	ldd	r0, Z+28	; 0x1c
    1c9a:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1c9c:	e0 2d       	mov	r30, r0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	91 81       	ldd	r25, Z+1	; 0x01
    1ca2:	a2 81       	ldd	r26, Z+2	; 0x02
    1ca4:	b3 81       	ldd	r27, Z+3	; 0x03
    1ca6:	8a 83       	std	Y+2, r24	; 0x02
    1ca8:	9b 83       	std	Y+3, r25	; 0x03
    1caa:	ac 83       	std	Y+4, r26	; 0x04
    1cac:	bd 83       	std	Y+5, r27	; 0x05
    1cae:	af 85       	ldd	r26, Y+15	; 0x0f
    1cb0:	b8 89       	ldd	r27, Y+16	; 0x10
    1cb2:	90 96       	adiw	r26, 0x20	; 32
    1cb4:	ed 91       	ld	r30, X+
    1cb6:	fc 91       	ld	r31, X
    1cb8:	91 97       	sbiw	r26, 0x21	; 33
    1cba:	2a 81       	ldd	r18, Y+2	; 0x02
    1cbc:	3b 81       	ldd	r19, Y+3	; 0x03
    1cbe:	4c 81       	ldd	r20, Y+4	; 0x04
    1cc0:	5d 81       	ldd	r21, Y+5	; 0x05
    1cc2:	60 81       	ld	r22, Z
    1cc4:	71 81       	ldd	r23, Z+1	; 0x01
    1cc6:	82 81       	ldd	r24, Z+2	; 0x02
    1cc8:	93 81       	ldd	r25, Z+3	; 0x03
    1cca:	0e 94 38 18 	call	0x3070	; 0x3070 <__subsf3>
    1cce:	4b 01       	movw	r8, r22
    1cd0:	5c 01       	movw	r10, r24
    1cd2:	ef 85       	ldd	r30, Y+15	; 0x0f
    1cd4:	f8 89       	ldd	r31, Y+16	; 0x10
    1cd6:	22 a5       	ldd	r18, Z+42	; 0x2a
    1cd8:	33 a5       	ldd	r19, Z+43	; 0x2b
    1cda:	44 a5       	ldd	r20, Z+44	; 0x2c
    1cdc:	55 a5       	ldd	r21, Z+45	; 0x2d
    1cde:	6a 81       	ldd	r22, Y+2	; 0x02
    1ce0:	7b 81       	ldd	r23, Y+3	; 0x03
    1ce2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce6:	0e 94 38 18 	call	0x3070	; 0x3070 <__subsf3>
    1cea:	6b 01       	movw	r12, r22
    1cec:	7c 01       	movw	r14, r24
    1cee:	af 85       	ldd	r26, Y+15	; 0x0f
    1cf0:	b8 89       	ldd	r27, Y+16	; 0x10
    1cf2:	50 96       	adiw	r26, 0x10	; 16
    1cf4:	2d 91       	ld	r18, X+
    1cf6:	3d 91       	ld	r19, X+
    1cf8:	4d 91       	ld	r20, X+
    1cfa:	5c 91       	ld	r21, X
    1cfc:	53 97       	sbiw	r26, 0x13	; 19
    1cfe:	c5 01       	movw	r24, r10
    1d00:	b4 01       	movw	r22, r8
    1d02:	0e 94 09 1a 	call	0x3412	; 0x3412 <__mulsf3>
    1d06:	ef 85       	ldd	r30, Y+15	; 0x0f
    1d08:	f8 89       	ldd	r31, Y+16	; 0x10
    1d0a:	26 a1       	ldd	r18, Z+38	; 0x26
    1d0c:	37 a1       	ldd	r19, Z+39	; 0x27
    1d0e:	40 a5       	ldd	r20, Z+40	; 0x28
    1d10:	51 a5       	ldd	r21, Z+41	; 0x29
    1d12:	0e 94 39 18 	call	0x3072	; 0x3072 <__addsf3>
    1d16:	2b 01       	movw	r4, r22
    1d18:	3c 01       	movw	r6, r24
    1d1a:	af 85       	ldd	r26, Y+15	; 0x0f
    1d1c:	b8 89       	ldd	r27, Y+16	; 0x10
    1d1e:	96 96       	adiw	r26, 0x26	; 38
    1d20:	6d 93       	st	X+, r22
    1d22:	7d 93       	st	X+, r23
    1d24:	8d 93       	st	X+, r24
    1d26:	9c 93       	st	X, r25
    1d28:	99 97       	sbiw	r26, 0x29	; 41
    1d2a:	db 96       	adiw	r26, 0x3b	; 59
    1d2c:	bc 91       	ld	r27, X
    1d2e:	ba 87       	std	Y+10, r27	; 0x0a
    1d30:	b1 11       	cpse	r27, r1
    1d32:	18 c0       	rjmp	.+48     	; 0x1d64 <_ZN3PID7ComputeEv+0x14e>
    1d34:	ef 85       	ldd	r30, Y+15	; 0x0f
    1d36:	f8 89       	ldd	r31, Y+16	; 0x10
    1d38:	24 85       	ldd	r18, Z+12	; 0x0c
    1d3a:	35 85       	ldd	r19, Z+13	; 0x0d
    1d3c:	46 85       	ldd	r20, Z+14	; 0x0e
    1d3e:	57 85       	ldd	r21, Z+15	; 0x0f
    1d40:	c7 01       	movw	r24, r14
    1d42:	b6 01       	movw	r22, r12
    1d44:	0e 94 09 1a 	call	0x3412	; 0x3412 <__mulsf3>
    1d48:	9b 01       	movw	r18, r22
    1d4a:	ac 01       	movw	r20, r24
    1d4c:	c3 01       	movw	r24, r6
    1d4e:	b2 01       	movw	r22, r4
    1d50:	0e 94 38 18 	call	0x3070	; 0x3070 <__subsf3>
    1d54:	af 85       	ldd	r26, Y+15	; 0x0f
    1d56:	b8 89       	ldd	r27, Y+16	; 0x10
    1d58:	96 96       	adiw	r26, 0x26	; 38
    1d5a:	6d 93       	st	X+, r22
    1d5c:	7d 93       	st	X+, r23
    1d5e:	8d 93       	st	X+, r24
    1d60:	9c 93       	st	X, r25
    1d62:	99 97       	sbiw	r26, 0x29	; 41
    1d64:	ef 85       	ldd	r30, Y+15	; 0x0f
    1d66:	f8 89       	ldd	r31, Y+16	; 0x10
    1d68:	46 a0       	ldd	r4, Z+38	; 0x26
    1d6a:	57 a0       	ldd	r5, Z+39	; 0x27
    1d6c:	60 a4       	ldd	r6, Z+40	; 0x28
    1d6e:	71 a4       	ldd	r7, Z+41	; 0x29
    1d70:	16 a9       	ldd	r17, Z+54	; 0x36
    1d72:	07 a9       	ldd	r16, Z+55	; 0x37
    1d74:	30 ac       	ldd	r3, Z+56	; 0x38
    1d76:	21 ac       	ldd	r2, Z+57	; 0x39
    1d78:	21 2f       	mov	r18, r17
    1d7a:	30 2f       	mov	r19, r16
    1d7c:	43 2d       	mov	r20, r3
    1d7e:	52 2d       	mov	r21, r2
    1d80:	c3 01       	movw	r24, r6
    1d82:	b2 01       	movw	r22, r4
    1d84:	0e 94 04 1a 	call	0x3408	; 0x3408 <__gesf2>
    1d88:	18 16       	cp	r1, r24
    1d8a:	2c f4       	brge	.+10     	; 0x1d96 <_ZN3PID7ComputeEv+0x180>
    1d8c:	81 2f       	mov	r24, r17
    1d8e:	90 2f       	mov	r25, r16
    1d90:	a3 2d       	mov	r26, r3
    1d92:	b2 2d       	mov	r27, r2
    1d94:	18 c0       	rjmp	.+48     	; 0x1dc6 <_ZN3PID7ComputeEv+0x1b0>
    1d96:	af 85       	ldd	r26, Y+15	; 0x0f
    1d98:	b8 89       	ldd	r27, Y+16	; 0x10
    1d9a:	d2 96       	adiw	r26, 0x32	; 50
    1d9c:	8d 91       	ld	r24, X+
    1d9e:	9d 91       	ld	r25, X+
    1da0:	0d 90       	ld	r0, X+
    1da2:	bc 91       	ld	r27, X
    1da4:	a0 2d       	mov	r26, r0
    1da6:	8b 87       	std	Y+11, r24	; 0x0b
    1da8:	9c 87       	std	Y+12, r25	; 0x0c
    1daa:	ad 87       	std	Y+13, r26	; 0x0d
    1dac:	be 87       	std	Y+14, r27	; 0x0e
    1dae:	9c 01       	movw	r18, r24
    1db0:	ad 01       	movw	r20, r26
    1db2:	c3 01       	movw	r24, r6
    1db4:	b2 01       	movw	r22, r4
    1db6:	0e 94 a5 18 	call	0x314a	; 0x314a <__cmpsf2>
    1dba:	87 ff       	sbrs	r24, 7
    1dbc:	0a c0       	rjmp	.+20     	; 0x1dd2 <_ZN3PID7ComputeEv+0x1bc>
    1dbe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dc0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1dc2:	ad 85       	ldd	r26, Y+13	; 0x0d
    1dc4:	be 85       	ldd	r27, Y+14	; 0x0e
    1dc6:	ef 85       	ldd	r30, Y+15	; 0x0f
    1dc8:	f8 89       	ldd	r31, Y+16	; 0x10
    1dca:	86 a3       	std	Z+38, r24	; 0x26
    1dcc:	97 a3       	std	Z+39, r25	; 0x27
    1dce:	a0 a7       	std	Z+40, r26	; 0x28
    1dd0:	b1 a7       	std	Z+41, r27	; 0x29
    1dd2:	fa 85       	ldd	r31, Y+10	; 0x0a
    1dd4:	ff 23       	and	r31, r31
    1dd6:	79 f0       	breq	.+30     	; 0x1df6 <_ZN3PID7ComputeEv+0x1e0>
    1dd8:	af 85       	ldd	r26, Y+15	; 0x0f
    1dda:	b8 89       	ldd	r27, Y+16	; 0x10
    1ddc:	1c 96       	adiw	r26, 0x0c	; 12
    1dde:	2d 91       	ld	r18, X+
    1de0:	3d 91       	ld	r19, X+
    1de2:	4d 91       	ld	r20, X+
    1de4:	5c 91       	ld	r21, X
    1de6:	1f 97       	sbiw	r26, 0x0f	; 15
    1de8:	c5 01       	movw	r24, r10
    1dea:	b4 01       	movw	r22, r8
    1dec:	0e 94 09 1a 	call	0x3412	; 0x3412 <__mulsf3>
    1df0:	4b 01       	movw	r8, r22
    1df2:	5c 01       	movw	r10, r24
    1df4:	03 c0       	rjmp	.+6      	; 0x1dfc <_ZN3PID7ComputeEv+0x1e6>
    1df6:	81 2c       	mov	r8, r1
    1df8:	91 2c       	mov	r9, r1
    1dfa:	54 01       	movw	r10, r8
    1dfc:	ef 85       	ldd	r30, Y+15	; 0x0f
    1dfe:	f8 89       	ldd	r31, Y+16	; 0x10
    1e00:	24 89       	ldd	r18, Z+20	; 0x14
    1e02:	35 89       	ldd	r19, Z+21	; 0x15
    1e04:	46 89       	ldd	r20, Z+22	; 0x16
    1e06:	57 89       	ldd	r21, Z+23	; 0x17
    1e08:	c7 01       	movw	r24, r14
    1e0a:	b6 01       	movw	r22, r12
    1e0c:	0e 94 09 1a 	call	0x3412	; 0x3412 <__mulsf3>
    1e10:	9b 01       	movw	r18, r22
    1e12:	ac 01       	movw	r20, r24
    1e14:	af 85       	ldd	r26, Y+15	; 0x0f
    1e16:	b8 89       	ldd	r27, Y+16	; 0x10
    1e18:	96 96       	adiw	r26, 0x26	; 38
    1e1a:	6d 91       	ld	r22, X+
    1e1c:	7d 91       	ld	r23, X+
    1e1e:	8d 91       	ld	r24, X+
    1e20:	9c 91       	ld	r25, X
    1e22:	99 97       	sbiw	r26, 0x29	; 41
    1e24:	0e 94 38 18 	call	0x3070	; 0x3070 <__subsf3>
    1e28:	a5 01       	movw	r20, r10
    1e2a:	94 01       	movw	r18, r8
    1e2c:	0e 94 39 18 	call	0x3072	; 0x3072 <__addsf3>
    1e30:	6b 01       	movw	r12, r22
    1e32:	7c 01       	movw	r14, r24
    1e34:	9b 01       	movw	r18, r22
    1e36:	ac 01       	movw	r20, r24
    1e38:	61 2f       	mov	r22, r17
    1e3a:	70 2f       	mov	r23, r16
    1e3c:	83 2d       	mov	r24, r3
    1e3e:	92 2d       	mov	r25, r2
    1e40:	0e 94 a5 18 	call	0x314a	; 0x314a <__cmpsf2>
    1e44:	87 fd       	sbrc	r24, 7
    1e46:	14 c0       	rjmp	.+40     	; 0x1e70 <_ZN3PID7ComputeEv+0x25a>
    1e48:	ef 85       	ldd	r30, Y+15	; 0x0f
    1e4a:	f8 89       	ldd	r31, Y+16	; 0x10
    1e4c:	12 a9       	ldd	r17, Z+50	; 0x32
    1e4e:	03 a9       	ldd	r16, Z+51	; 0x33
    1e50:	34 a8       	ldd	r3, Z+52	; 0x34
    1e52:	25 a8       	ldd	r2, Z+53	; 0x35
    1e54:	21 2f       	mov	r18, r17
    1e56:	30 2f       	mov	r19, r16
    1e58:	43 2d       	mov	r20, r3
    1e5a:	52 2d       	mov	r21, r2
    1e5c:	b6 01       	movw	r22, r12
    1e5e:	c7 01       	movw	r24, r14
    1e60:	0e 94 a5 18 	call	0x314a	; 0x314a <__cmpsf2>
    1e64:	87 fd       	sbrc	r24, 7
    1e66:	04 c0       	rjmp	.+8      	; 0x1e70 <_ZN3PID7ComputeEv+0x25a>
    1e68:	1c 2d       	mov	r17, r12
    1e6a:	0d 2d       	mov	r16, r13
    1e6c:	3e 2c       	mov	r3, r14
    1e6e:	2f 2c       	mov	r2, r15
    1e70:	af 85       	ldd	r26, Y+15	; 0x0f
    1e72:	b8 89       	ldd	r27, Y+16	; 0x10
    1e74:	5e 96       	adiw	r26, 0x1e	; 30
    1e76:	ed 91       	ld	r30, X+
    1e78:	fc 91       	ld	r31, X
    1e7a:	5f 97       	sbiw	r26, 0x1f	; 31
    1e7c:	81 2f       	mov	r24, r17
    1e7e:	90 2f       	mov	r25, r16
    1e80:	a3 2d       	mov	r26, r3
    1e82:	b2 2d       	mov	r27, r2
    1e84:	80 83       	st	Z, r24
    1e86:	91 83       	std	Z+1, r25	; 0x01
    1e88:	a2 83       	std	Z+2, r26	; 0x02
    1e8a:	b3 83       	std	Z+3, r27	; 0x03
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e90:	ac 81       	ldd	r26, Y+4	; 0x04
    1e92:	bd 81       	ldd	r27, Y+5	; 0x05
    1e94:	ef 85       	ldd	r30, Y+15	; 0x0f
    1e96:	f8 89       	ldd	r31, Y+16	; 0x10
    1e98:	82 a7       	std	Z+42, r24	; 0x2a
    1e9a:	93 a7       	std	Z+43, r25	; 0x2b
    1e9c:	a4 a7       	std	Z+44, r26	; 0x2c
    1e9e:	b5 a7       	std	Z+45, r27	; 0x2d
    1ea0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ea4:	a8 85       	ldd	r26, Y+8	; 0x08
    1ea6:	b9 85       	ldd	r27, Y+9	; 0x09
    1ea8:	82 a3       	std	Z+34, r24	; 0x22
    1eaa:	93 a3       	std	Z+35, r25	; 0x23
    1eac:	a4 a3       	std	Z+36, r26	; 0x24
    1eae:	b5 a3       	std	Z+37, r27	; 0x25
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	60 96       	adiw	r28, 0x10	; 16
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	f8 94       	cli
    1eb8:	de bf       	out	0x3e, r29	; 62
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	cd bf       	out	0x3d, r28	; 61
    1ebe:	df 91       	pop	r29
    1ec0:	cf 91       	pop	r28
    1ec2:	1f 91       	pop	r17
    1ec4:	0f 91       	pop	r16
    1ec6:	ff 90       	pop	r15
    1ec8:	ef 90       	pop	r14
    1eca:	df 90       	pop	r13
    1ecc:	cf 90       	pop	r12
    1ece:	bf 90       	pop	r11
    1ed0:	af 90       	pop	r10
    1ed2:	9f 90       	pop	r9
    1ed4:	8f 90       	pop	r8
    1ed6:	7f 90       	pop	r7
    1ed8:	6f 90       	pop	r6
    1eda:	5f 90       	pop	r5
    1edc:	4f 90       	pop	r4
    1ede:	3f 90       	pop	r3
    1ee0:	2f 90       	pop	r2
    1ee2:	08 95       	ret

00001ee4 <_ZN3PID10SetTuningsEdddi>:
    1ee4:	4f 92       	push	r4
    1ee6:	5f 92       	push	r5
    1ee8:	6f 92       	push	r6
    1eea:	7f 92       	push	r7
    1eec:	8f 92       	push	r8
    1eee:	9f 92       	push	r9
    1ef0:	af 92       	push	r10
    1ef2:	bf 92       	push	r11
    1ef4:	cf 92       	push	r12
    1ef6:	df 92       	push	r13
    1ef8:	ef 92       	push	r14
    1efa:	ff 92       	push	r15
    1efc:	0f 93       	push	r16
    1efe:	1f 93       	push	r17
    1f00:	cf 93       	push	r28
    1f02:	df 93       	push	r29
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <_ZN3PID10SetTuningsEdddi+0x22>
    1f06:	00 d0       	rcall	.+0      	; 0x1f08 <_ZN3PID10SetTuningsEdddi+0x24>
    1f08:	00 d0       	rcall	.+0      	; 0x1f0a <_ZN3PID10SetTuningsEdddi+0x26>
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    1f0e:	9e 83       	std	Y+6, r25	; 0x06
    1f10:	8d 83       	std	Y+5, r24	; 0x05
    1f12:	49 83       	std	Y+1, r20	; 0x01
    1f14:	5a 83       	std	Y+2, r21	; 0x02
    1f16:	6b 83       	std	Y+3, r22	; 0x03
    1f18:	7c 83       	std	Y+4, r23	; 0x04
    1f1a:	28 01       	movw	r4, r16
    1f1c:	39 01       	movw	r6, r18
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	a9 01       	movw	r20, r18
    1f24:	69 81       	ldd	r22, Y+1	; 0x01
    1f26:	7a 81       	ldd	r23, Y+2	; 0x02
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2c:	0e 94 a5 18 	call	0x314a	; 0x314a <__cmpsf2>
    1f30:	87 fd       	sbrc	r24, 7
    1f32:	97 c0       	rjmp	.+302    	; 0x2062 <_ZN3PID10SetTuningsEdddi+0x17e>
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	a9 01       	movw	r20, r18
    1f3a:	c3 01       	movw	r24, r6
    1f3c:	b2 01       	movw	r22, r4
    1f3e:	0e 94 a5 18 	call	0x314a	; 0x314a <__cmpsf2>
    1f42:	87 fd       	sbrc	r24, 7
    1f44:	8e c0       	rjmp	.+284    	; 0x2062 <_ZN3PID10SetTuningsEdddi+0x17e>
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	a9 01       	movw	r20, r18
    1f4c:	c7 01       	movw	r24, r14
    1f4e:	b6 01       	movw	r22, r12
    1f50:	0e 94 a5 18 	call	0x314a	; 0x314a <__cmpsf2>
    1f54:	87 fd       	sbrc	r24, 7
    1f56:	85 c0       	rjmp	.+266    	; 0x2062 <_ZN3PID10SetTuningsEdddi+0x17e>
    1f58:	ad 81       	ldd	r26, Y+5	; 0x05
    1f5a:	be 81       	ldd	r27, Y+6	; 0x06
    1f5c:	5b 96       	adiw	r26, 0x1b	; 27
    1f5e:	bc 92       	st	X, r11
    1f60:	ae 92       	st	-X, r10
    1f62:	5a 97       	sbiw	r26, 0x1a	; 26
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	aa 94       	dec	r10
    1f68:	ab 28       	or	r10, r11
    1f6a:	09 f0       	breq	.+2      	; 0x1f6e <_ZN3PID10SetTuningsEdddi+0x8a>
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	ed 81       	ldd	r30, Y+5	; 0x05
    1f70:	fe 81       	ldd	r31, Y+6	; 0x06
    1f72:	83 af       	std	Z+59, r24	; 0x3b
    1f74:	89 81       	ldd	r24, Y+1	; 0x01
    1f76:	9a 81       	ldd	r25, Y+2	; 0x02
    1f78:	ab 81       	ldd	r26, Y+3	; 0x03
    1f7a:	bc 81       	ldd	r27, Y+4	; 0x04
    1f7c:	80 83       	st	Z, r24
    1f7e:	91 83       	std	Z+1, r25	; 0x01
    1f80:	a2 83       	std	Z+2, r26	; 0x02
    1f82:	b3 83       	std	Z+3, r27	; 0x03
    1f84:	44 82       	std	Z+4, r4	; 0x04
    1f86:	55 82       	std	Z+5, r5	; 0x05
    1f88:	66 82       	std	Z+6, r6	; 0x06
    1f8a:	77 82       	std	Z+7, r7	; 0x07
    1f8c:	c0 86       	std	Z+8, r12	; 0x08
    1f8e:	d1 86       	std	Z+9, r13	; 0x09
    1f90:	e2 86       	std	Z+10, r14	; 0x0a
    1f92:	f3 86       	std	Z+11, r15	; 0x0b
    1f94:	66 a5       	ldd	r22, Z+46	; 0x2e
    1f96:	77 a5       	ldd	r23, Z+47	; 0x2f
    1f98:	80 a9       	ldd	r24, Z+48	; 0x30
    1f9a:	91 a9       	ldd	r25, Z+49	; 0x31
    1f9c:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__floatunsisf>
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	4a e7       	ldi	r20, 0x7A	; 122
    1fa6:	54 e4       	ldi	r21, 0x44	; 68
    1fa8:	0e 94 aa 18 	call	0x3154	; 0x3154 <__divsf3>
    1fac:	4b 01       	movw	r8, r22
    1fae:	5c 01       	movw	r10, r24
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb4:	ab 81       	ldd	r26, Y+3	; 0x03
    1fb6:	bc 81       	ldd	r27, Y+4	; 0x04
    1fb8:	ed 81       	ldd	r30, Y+5	; 0x05
    1fba:	fe 81       	ldd	r31, Y+6	; 0x06
    1fbc:	84 87       	std	Z+12, r24	; 0x0c
    1fbe:	95 87       	std	Z+13, r25	; 0x0d
    1fc0:	a6 87       	std	Z+14, r26	; 0x0e
    1fc2:	b7 87       	std	Z+15, r27	; 0x0f
    1fc4:	a5 01       	movw	r20, r10
    1fc6:	94 01       	movw	r18, r8
    1fc8:	c3 01       	movw	r24, r6
    1fca:	b2 01       	movw	r22, r4
    1fcc:	0e 94 09 1a 	call	0x3412	; 0x3412 <__mulsf3>
    1fd0:	2b 01       	movw	r4, r22
    1fd2:	3c 01       	movw	r6, r24
    1fd4:	ad 81       	ldd	r26, Y+5	; 0x05
    1fd6:	be 81       	ldd	r27, Y+6	; 0x06
    1fd8:	50 96       	adiw	r26, 0x10	; 16
    1fda:	6d 93       	st	X+, r22
    1fdc:	7d 93       	st	X+, r23
    1fde:	8d 93       	st	X+, r24
    1fe0:	9c 93       	st	X, r25
    1fe2:	53 97       	sbiw	r26, 0x13	; 19
    1fe4:	a5 01       	movw	r20, r10
    1fe6:	94 01       	movw	r18, r8
    1fe8:	c7 01       	movw	r24, r14
    1fea:	b6 01       	movw	r22, r12
    1fec:	0e 94 aa 18 	call	0x3154	; 0x3154 <__divsf3>
    1ff0:	6b 01       	movw	r12, r22
    1ff2:	7c 01       	movw	r14, r24
    1ff4:	ed 81       	ldd	r30, Y+5	; 0x05
    1ff6:	fe 81       	ldd	r31, Y+6	; 0x06
    1ff8:	64 8b       	std	Z+20, r22	; 0x14
    1ffa:	75 8b       	std	Z+21, r23	; 0x15
    1ffc:	86 8b       	std	Z+22, r24	; 0x16
    1ffe:	97 8b       	std	Z+23, r25	; 0x17
    2000:	80 8d       	ldd	r24, Z+24	; 0x18
    2002:	91 8d       	ldd	r25, Z+25	; 0x19
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	69 f5       	brne	.+90     	; 0x2062 <_ZN3PID10SetTuningsEdddi+0x17e>
    2008:	29 81       	ldd	r18, Y+1	; 0x01
    200a:	3a 81       	ldd	r19, Y+2	; 0x02
    200c:	4b 81       	ldd	r20, Y+3	; 0x03
    200e:	5c 81       	ldd	r21, Y+4	; 0x04
    2010:	60 e0       	ldi	r22, 0x00	; 0
    2012:	70 e0       	ldi	r23, 0x00	; 0
    2014:	cb 01       	movw	r24, r22
    2016:	0e 94 38 18 	call	0x3070	; 0x3070 <__subsf3>
    201a:	ad 81       	ldd	r26, Y+5	; 0x05
    201c:	be 81       	ldd	r27, Y+6	; 0x06
    201e:	1c 96       	adiw	r26, 0x0c	; 12
    2020:	6d 93       	st	X+, r22
    2022:	7d 93       	st	X+, r23
    2024:	8d 93       	st	X+, r24
    2026:	9c 93       	st	X, r25
    2028:	1f 97       	sbiw	r26, 0x0f	; 15
    202a:	a3 01       	movw	r20, r6
    202c:	92 01       	movw	r18, r4
    202e:	60 e0       	ldi	r22, 0x00	; 0
    2030:	70 e0       	ldi	r23, 0x00	; 0
    2032:	cb 01       	movw	r24, r22
    2034:	0e 94 38 18 	call	0x3070	; 0x3070 <__subsf3>
    2038:	ed 81       	ldd	r30, Y+5	; 0x05
    203a:	fe 81       	ldd	r31, Y+6	; 0x06
    203c:	60 8b       	std	Z+16, r22	; 0x10
    203e:	71 8b       	std	Z+17, r23	; 0x11
    2040:	82 8b       	std	Z+18, r24	; 0x12
    2042:	93 8b       	std	Z+19, r25	; 0x13
    2044:	a7 01       	movw	r20, r14
    2046:	96 01       	movw	r18, r12
    2048:	60 e0       	ldi	r22, 0x00	; 0
    204a:	70 e0       	ldi	r23, 0x00	; 0
    204c:	cb 01       	movw	r24, r22
    204e:	0e 94 38 18 	call	0x3070	; 0x3070 <__subsf3>
    2052:	ad 81       	ldd	r26, Y+5	; 0x05
    2054:	be 81       	ldd	r27, Y+6	; 0x06
    2056:	54 96       	adiw	r26, 0x14	; 20
    2058:	6d 93       	st	X+, r22
    205a:	7d 93       	st	X+, r23
    205c:	8d 93       	st	X+, r24
    205e:	9c 93       	st	X, r25
    2060:	57 97       	sbiw	r26, 0x17	; 23
    2062:	26 96       	adiw	r28, 0x06	; 6
    2064:	0f b6       	in	r0, 0x3f	; 63
    2066:	f8 94       	cli
    2068:	de bf       	out	0x3e, r29	; 62
    206a:	0f be       	out	0x3f, r0	; 63
    206c:	cd bf       	out	0x3d, r28	; 61
    206e:	df 91       	pop	r29
    2070:	cf 91       	pop	r28
    2072:	1f 91       	pop	r17
    2074:	0f 91       	pop	r16
    2076:	ff 90       	pop	r15
    2078:	ef 90       	pop	r14
    207a:	df 90       	pop	r13
    207c:	cf 90       	pop	r12
    207e:	bf 90       	pop	r11
    2080:	af 90       	pop	r10
    2082:	9f 90       	pop	r9
    2084:	8f 90       	pop	r8
    2086:	7f 90       	pop	r7
    2088:	6f 90       	pop	r6
    208a:	5f 90       	pop	r5
    208c:	4f 90       	pop	r4
    208e:	08 95       	ret

00002090 <_ZN3PID13SetSampleTimeEi>:
    2090:	8f 92       	push	r8
    2092:	9f 92       	push	r9
    2094:	af 92       	push	r10
    2096:	bf 92       	push	r11
    2098:	cf 92       	push	r12
    209a:	df 92       	push	r13
    209c:	ef 92       	push	r14
    209e:	ff 92       	push	r15
    20a0:	cf 93       	push	r28
    20a2:	df 93       	push	r29
    20a4:	16 16       	cp	r1, r22
    20a6:	17 06       	cpc	r1, r23
    20a8:	b4 f5       	brge	.+108    	; 0x2116 <_ZN3PID13SetSampleTimeEi+0x86>
    20aa:	6b 01       	movw	r12, r22
    20ac:	ec 01       	movw	r28, r24
    20ae:	0d 2c       	mov	r0, r13
    20b0:	00 0c       	add	r0, r0
    20b2:	ee 08       	sbc	r14, r14
    20b4:	ff 08       	sbc	r15, r15
    20b6:	c7 01       	movw	r24, r14
    20b8:	b6 01       	movw	r22, r12
    20ba:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__floatsisf>
    20be:	4b 01       	movw	r8, r22
    20c0:	5c 01       	movw	r10, r24
    20c2:	6e a5       	ldd	r22, Y+46	; 0x2e
    20c4:	7f a5       	ldd	r23, Y+47	; 0x2f
    20c6:	88 a9       	ldd	r24, Y+48	; 0x30
    20c8:	99 a9       	ldd	r25, Y+49	; 0x31
    20ca:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__floatunsisf>
    20ce:	9b 01       	movw	r18, r22
    20d0:	ac 01       	movw	r20, r24
    20d2:	c5 01       	movw	r24, r10
    20d4:	b4 01       	movw	r22, r8
    20d6:	0e 94 aa 18 	call	0x3154	; 0x3154 <__divsf3>
    20da:	4b 01       	movw	r8, r22
    20dc:	5c 01       	movw	r10, r24
    20de:	9b 01       	movw	r18, r22
    20e0:	ac 01       	movw	r20, r24
    20e2:	68 89       	ldd	r22, Y+16	; 0x10
    20e4:	79 89       	ldd	r23, Y+17	; 0x11
    20e6:	8a 89       	ldd	r24, Y+18	; 0x12
    20e8:	9b 89       	ldd	r25, Y+19	; 0x13
    20ea:	0e 94 09 1a 	call	0x3412	; 0x3412 <__mulsf3>
    20ee:	68 8b       	std	Y+16, r22	; 0x10
    20f0:	79 8b       	std	Y+17, r23	; 0x11
    20f2:	8a 8b       	std	Y+18, r24	; 0x12
    20f4:	9b 8b       	std	Y+19, r25	; 0x13
    20f6:	a5 01       	movw	r20, r10
    20f8:	94 01       	movw	r18, r8
    20fa:	6c 89       	ldd	r22, Y+20	; 0x14
    20fc:	7d 89       	ldd	r23, Y+21	; 0x15
    20fe:	8e 89       	ldd	r24, Y+22	; 0x16
    2100:	9f 89       	ldd	r25, Y+23	; 0x17
    2102:	0e 94 aa 18 	call	0x3154	; 0x3154 <__divsf3>
    2106:	6c 8b       	std	Y+20, r22	; 0x14
    2108:	7d 8b       	std	Y+21, r23	; 0x15
    210a:	8e 8b       	std	Y+22, r24	; 0x16
    210c:	9f 8b       	std	Y+23, r25	; 0x17
    210e:	ce a6       	std	Y+46, r12	; 0x2e
    2110:	df a6       	std	Y+47, r13	; 0x2f
    2112:	e8 aa       	std	Y+48, r14	; 0x30
    2114:	f9 aa       	std	Y+49, r15	; 0x31
    2116:	df 91       	pop	r29
    2118:	cf 91       	pop	r28
    211a:	ff 90       	pop	r15
    211c:	ef 90       	pop	r14
    211e:	df 90       	pop	r13
    2120:	cf 90       	pop	r12
    2122:	bf 90       	pop	r11
    2124:	af 90       	pop	r10
    2126:	9f 90       	pop	r9
    2128:	8f 90       	pop	r8
    212a:	08 95       	ret

0000212c <_ZN3PID10InitializeEv>:
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
    212c:	8f 92       	push	r8
    212e:	9f 92       	push	r9
    2130:	af 92       	push	r10
    2132:	bf 92       	push	r11
    2134:	cf 92       	push	r12
    2136:	df 92       	push	r13
    2138:	ef 92       	push	r14
    213a:	ff 92       	push	r15
    213c:	cf 93       	push	r28
    213e:	df 93       	push	r29
    2140:	ec 01       	movw	r28, r24
   outputSum = *myOutput;
    2142:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2144:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2146:	c0 80       	ld	r12, Z
    2148:	d1 80       	ldd	r13, Z+1	; 0x01
    214a:	e2 80       	ldd	r14, Z+2	; 0x02
    214c:	f3 80       	ldd	r15, Z+3	; 0x03
    214e:	ce a2       	std	Y+38, r12	; 0x26
    2150:	df a2       	std	Y+39, r13	; 0x27
    2152:	e8 a6       	std	Y+40, r14	; 0x28
    2154:	f9 a6       	std	Y+41, r15	; 0x29
   lastInput = *myInput;
    2156:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2158:	fd 8d       	ldd	r31, Y+29	; 0x1d
    215a:	80 81       	ld	r24, Z
    215c:	91 81       	ldd	r25, Z+1	; 0x01
    215e:	a2 81       	ldd	r26, Z+2	; 0x02
    2160:	b3 81       	ldd	r27, Z+3	; 0x03
    2162:	8a a7       	std	Y+42, r24	; 0x2a
    2164:	9b a7       	std	Y+43, r25	; 0x2b
    2166:	ac a7       	std	Y+44, r26	; 0x2c
    2168:	bd a7       	std	Y+45, r27	; 0x2d
   if(outputSum > outMax) outputSum = outMax;
    216a:	8e a8       	ldd	r8, Y+54	; 0x36
    216c:	9f a8       	ldd	r9, Y+55	; 0x37
    216e:	a8 ac       	ldd	r10, Y+56	; 0x38
    2170:	b9 ac       	ldd	r11, Y+57	; 0x39
    2172:	a5 01       	movw	r20, r10
    2174:	94 01       	movw	r18, r8
    2176:	c7 01       	movw	r24, r14
    2178:	b6 01       	movw	r22, r12
    217a:	0e 94 04 1a 	call	0x3408	; 0x3408 <__gesf2>
    217e:	18 16       	cp	r1, r24
    2180:	64 f0       	brlt	.+24     	; 0x219a <_ZN3PID10InitializeEv+0x6e>
   else if(outputSum < outMin) outputSum = outMin;
    2182:	8a a8       	ldd	r8, Y+50	; 0x32
    2184:	9b a8       	ldd	r9, Y+51	; 0x33
    2186:	ac a8       	ldd	r10, Y+52	; 0x34
    2188:	bd a8       	ldd	r11, Y+53	; 0x35
    218a:	a5 01       	movw	r20, r10
    218c:	94 01       	movw	r18, r8
    218e:	c7 01       	movw	r24, r14
    2190:	b6 01       	movw	r22, r12
    2192:	0e 94 a5 18 	call	0x314a	; 0x314a <__cmpsf2>
    2196:	87 ff       	sbrs	r24, 7
    2198:	04 c0       	rjmp	.+8      	; 0x21a2 <_ZN3PID10InitializeEv+0x76>
    219a:	8e a2       	std	Y+38, r8	; 0x26
    219c:	9f a2       	std	Y+39, r9	; 0x27
    219e:	a8 a6       	std	Y+40, r10	; 0x28
    21a0:	b9 a6       	std	Y+41, r11	; 0x29
}
    21a2:	df 91       	pop	r29
    21a4:	cf 91       	pop	r28
    21a6:	ff 90       	pop	r15
    21a8:	ef 90       	pop	r14
    21aa:	df 90       	pop	r13
    21ac:	cf 90       	pop	r12
    21ae:	bf 90       	pop	r11
    21b0:	af 90       	pop	r10
    21b2:	9f 90       	pop	r9
    21b4:	8f 90       	pop	r8
    21b6:	08 95       	ret

000021b8 <_ZN3PID7SetModeEi>:
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
    21b8:	1f 93       	push	r17
    21ba:	cf 93       	push	r28
    21bc:	df 93       	push	r29
    21be:	ec 01       	movw	r28, r24
    bool newAuto = (Mode == AUTOMATIC);
    21c0:	11 e0       	ldi	r17, 0x01	; 1
    21c2:	61 30       	cpi	r22, 0x01	; 1
    21c4:	71 05       	cpc	r23, r1
    21c6:	09 f0       	breq	.+2      	; 0x21ca <_ZN3PID7SetModeEi+0x12>
    21c8:	10 e0       	ldi	r17, 0x00	; 0
    if(newAuto && !inAuto)
    21ca:	61 30       	cpi	r22, 0x01	; 1
    21cc:	71 05       	cpc	r23, r1
    21ce:	31 f4       	brne	.+12     	; 0x21dc <_ZN3PID7SetModeEi+0x24>
    21d0:	8a ad       	ldd	r24, Y+58	; 0x3a
    21d2:	81 11       	cpse	r24, r1
    21d4:	03 c0       	rjmp	.+6      	; 0x21dc <_ZN3PID7SetModeEi+0x24>
    {  /*we just went from manual to auto*/
        PID::Initialize();
    21d6:	ce 01       	movw	r24, r28
    21d8:	0e 94 96 10 	call	0x212c	; 0x212c <_ZN3PID10InitializeEv>
    }
    inAuto = newAuto;
    21dc:	1a af       	std	Y+58, r17	; 0x3a
}
    21de:	df 91       	pop	r29
    21e0:	cf 91       	pop	r28
    21e2:	1f 91       	pop	r17
    21e4:	08 95       	ret

000021e6 <_ZN3PID22SetControllerDirectionEi>:
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
    21e6:	0f 93       	push	r16
    21e8:	1f 93       	push	r17
    21ea:	cf 93       	push	r28
    21ec:	df 93       	push	r29
    21ee:	ec 01       	movw	r28, r24
    21f0:	8b 01       	movw	r16, r22
   if(inAuto && Direction !=controllerDirection)
    21f2:	8a ad       	ldd	r24, Y+58	; 0x3a
    21f4:	88 23       	and	r24, r24
    21f6:	61 f1       	breq	.+88     	; 0x2250 <_ZN3PID22SetControllerDirectionEi+0x6a>
    21f8:	88 8d       	ldd	r24, Y+24	; 0x18
    21fa:	99 8d       	ldd	r25, Y+25	; 0x19
    21fc:	86 17       	cp	r24, r22
    21fe:	97 07       	cpc	r25, r23
    2200:	39 f1       	breq	.+78     	; 0x2250 <_ZN3PID22SetControllerDirectionEi+0x6a>
   {
	    kp = (0 - kp);
    2202:	2c 85       	ldd	r18, Y+12	; 0x0c
    2204:	3d 85       	ldd	r19, Y+13	; 0x0d
    2206:	4e 85       	ldd	r20, Y+14	; 0x0e
    2208:	5f 85       	ldd	r21, Y+15	; 0x0f
    220a:	60 e0       	ldi	r22, 0x00	; 0
    220c:	70 e0       	ldi	r23, 0x00	; 0
    220e:	cb 01       	movw	r24, r22
    2210:	0e 94 38 18 	call	0x3070	; 0x3070 <__subsf3>
    2214:	6c 87       	std	Y+12, r22	; 0x0c
    2216:	7d 87       	std	Y+13, r23	; 0x0d
    2218:	8e 87       	std	Y+14, r24	; 0x0e
    221a:	9f 87       	std	Y+15, r25	; 0x0f
      ki = (0 - ki);
    221c:	28 89       	ldd	r18, Y+16	; 0x10
    221e:	39 89       	ldd	r19, Y+17	; 0x11
    2220:	4a 89       	ldd	r20, Y+18	; 0x12
    2222:	5b 89       	ldd	r21, Y+19	; 0x13
    2224:	60 e0       	ldi	r22, 0x00	; 0
    2226:	70 e0       	ldi	r23, 0x00	; 0
    2228:	cb 01       	movw	r24, r22
    222a:	0e 94 38 18 	call	0x3070	; 0x3070 <__subsf3>
    222e:	68 8b       	std	Y+16, r22	; 0x10
    2230:	79 8b       	std	Y+17, r23	; 0x11
    2232:	8a 8b       	std	Y+18, r24	; 0x12
    2234:	9b 8b       	std	Y+19, r25	; 0x13
      kd = (0 - kd);
    2236:	2c 89       	ldd	r18, Y+20	; 0x14
    2238:	3d 89       	ldd	r19, Y+21	; 0x15
    223a:	4e 89       	ldd	r20, Y+22	; 0x16
    223c:	5f 89       	ldd	r21, Y+23	; 0x17
    223e:	60 e0       	ldi	r22, 0x00	; 0
    2240:	70 e0       	ldi	r23, 0x00	; 0
    2242:	cb 01       	movw	r24, r22
    2244:	0e 94 38 18 	call	0x3070	; 0x3070 <__subsf3>
    2248:	6c 8b       	std	Y+20, r22	; 0x14
    224a:	7d 8b       	std	Y+21, r23	; 0x15
    224c:	8e 8b       	std	Y+22, r24	; 0x16
    224e:	9f 8b       	std	Y+23, r25	; 0x17
   }
   controllerDirection = Direction;
    2250:	19 8f       	std	Y+25, r17	; 0x19
    2252:	08 8f       	std	Y+24, r16	; 0x18
}
    2254:	df 91       	pop	r29
    2256:	cf 91       	pop	r28
    2258:	1f 91       	pop	r17
    225a:	0f 91       	pop	r16
    225c:	08 95       	ret

0000225e <_ZN3PIDC1EPdS0_S0_dddii>:

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
    225e:	4f 92       	push	r4
    2260:	5f 92       	push	r5
    2262:	6f 92       	push	r6
    2264:	7f 92       	push	r7
    2266:	8f 92       	push	r8
    2268:	9f 92       	push	r9
    226a:	af 92       	push	r10
    226c:	bf 92       	push	r11
    226e:	cf 92       	push	r12
    2270:	df 92       	push	r13
    2272:	ef 92       	push	r14
    2274:	ff 92       	push	r15
    2276:	0f 93       	push	r16
    2278:	1f 93       	push	r17
    227a:	cf 93       	push	r28
    227c:	df 93       	push	r29
    227e:	00 d0       	rcall	.+0      	; 0x2280 <_ZN3PIDC1EPdS0_S0_dddii+0x22>
    2280:	00 d0       	rcall	.+0      	; 0x2282 <_ZN3PIDC1EPdS0_S0_dddii+0x24>
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
    2286:	4c 01       	movw	r8, r24
    2288:	27 01       	movw	r4, r14
    228a:	38 01       	movw	r6, r16
    228c:	a9 82       	std	Y+1, r10	; 0x01
    228e:	ba 82       	std	Y+2, r11	; 0x02
    2290:	cb 82       	std	Y+3, r12	; 0x03
    2292:	dc 82       	std	Y+4, r13	; 0x04
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
    2294:	fc 01       	movw	r30, r24
    2296:	57 8f       	std	Z+31, r21	; 0x1f
    2298:	46 8f       	std	Z+30, r20	; 0x1e
    myInput = Input;
    229a:	75 8f       	std	Z+29, r23	; 0x1d
    229c:	64 8f       	std	Z+28, r22	; 0x1c
    mySetpoint = Setpoint;
    229e:	31 a3       	std	Z+33, r19	; 0x21
    22a0:	20 a3       	std	Z+32, r18	; 0x20
    inAuto = false;
    22a2:	12 ae       	std	Z+58, r1	; 0x3a
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
    22a4:	12 aa       	std	Z+50, r1	; 0x32
    22a6:	13 aa       	std	Z+51, r1	; 0x33
    22a8:	14 aa       	std	Z+52, r1	; 0x34
    22aa:	15 aa       	std	Z+53, r1	; 0x35
   outMax = Max;
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	af e7       	ldi	r26, 0x7F	; 127
    22b2:	b3 e4       	ldi	r27, 0x43	; 67
    22b4:	86 ab       	std	Z+54, r24	; 0x36
    22b6:	97 ab       	std	Z+55, r25	; 0x37
    22b8:	a0 af       	std	Z+56, r26	; 0x38
    22ba:	b1 af       	std	Z+57, r27	; 0x39
    inAuto = false;

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
    22bc:	84 e6       	ldi	r24, 0x64	; 100
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	a0 e0       	ldi	r26, 0x00	; 0
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	86 a7       	std	Z+46, r24	; 0x2e
    22c6:	97 a7       	std	Z+47, r25	; 0x2f
    22c8:	a0 ab       	std	Z+48, r26	; 0x30
    22ca:	b1 ab       	std	Z+49, r27	; 0x31

    PID::SetControllerDirection(ControllerDirection);
    22cc:	6d 8d       	ldd	r22, Y+29	; 0x1d
    22ce:	7e 8d       	ldd	r23, Y+30	; 0x1e
    22d0:	c4 01       	movw	r24, r8
    22d2:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <_ZN3PID22SetControllerDirectionEi>
    PID::SetTunings(Kp, Ki, Kd, POn);
    22d6:	ab 8c       	ldd	r10, Y+27	; 0x1b
    22d8:	bc 8c       	ldd	r11, Y+28	; 0x1c
    22da:	cf 88       	ldd	r12, Y+23	; 0x17
    22dc:	d8 8c       	ldd	r13, Y+24	; 0x18
    22de:	e9 8c       	ldd	r14, Y+25	; 0x19
    22e0:	fa 8c       	ldd	r15, Y+26	; 0x1a
    22e2:	09 81       	ldd	r16, Y+1	; 0x01
    22e4:	1a 81       	ldd	r17, Y+2	; 0x02
    22e6:	2b 81       	ldd	r18, Y+3	; 0x03
    22e8:	3c 81       	ldd	r19, Y+4	; 0x04
    22ea:	b3 01       	movw	r22, r6
    22ec:	a2 01       	movw	r20, r4
    22ee:	c4 01       	movw	r24, r8
    22f0:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <_ZN3PID10SetTuningsEdddi>

    lastTime = millis()-SampleTime;
    22f4:	0e 94 01 22 	call	0x4402	; 0x4402 <millis>
    22f8:	f4 01       	movw	r30, r8
    22fa:	46 a4       	ldd	r4, Z+46	; 0x2e
    22fc:	57 a4       	ldd	r5, Z+47	; 0x2f
    22fe:	60 a8       	ldd	r6, Z+48	; 0x30
    2300:	71 a8       	ldd	r7, Z+49	; 0x31
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	84 19       	sub	r24, r4
    2308:	95 09       	sbc	r25, r5
    230a:	a6 09       	sbc	r26, r6
    230c:	b7 09       	sbc	r27, r7
    230e:	82 a3       	std	Z+34, r24	; 0x22
    2310:	93 a3       	std	Z+35, r25	; 0x23
    2312:	a4 a3       	std	Z+36, r26	; 0x24
    2314:	b5 a3       	std	Z+37, r27	; 0x25
}
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	df 91       	pop	r29
    2320:	cf 91       	pop	r28
    2322:	1f 91       	pop	r17
    2324:	0f 91       	pop	r16
    2326:	ff 90       	pop	r15
    2328:	ef 90       	pop	r14
    232a:	df 90       	pop	r13
    232c:	cf 90       	pop	r12
    232e:	bf 90       	pop	r11
    2330:	af 90       	pop	r10
    2332:	9f 90       	pop	r9
    2334:	8f 90       	pop	r8
    2336:	7f 90       	pop	r7
    2338:	6f 90       	pop	r6
    233a:	5f 90       	pop	r5
    233c:	4f 90       	pop	r4
    233e:	08 95       	ret

00002340 <_ZN3PIDC1EPdS0_S0_dddi>:
/*Constructor (...)*********************************************************
 *    To allow backwards compatability for v1.1, or for people that just want
 *    to use Proportional on Error without explicitly saying so
 ***************************************************************************/

PID::PID(double* Input, double* Output, double* Setpoint,
    2340:	8f 92       	push	r8
    2342:	9f 92       	push	r9
    2344:	af 92       	push	r10
    2346:	bf 92       	push	r11
    2348:	cf 92       	push	r12
    234a:	df 92       	push	r13
    234c:	ef 92       	push	r14
    234e:	ff 92       	push	r15
    2350:	0f 93       	push	r16
    2352:	1f 93       	push	r17
    2354:	cf 93       	push	r28
    2356:	df 93       	push	r29
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
    235c:	ef 85       	ldd	r30, Y+15	; 0x0f
    235e:	f8 89       	ldd	r31, Y+16	; 0x10
    2360:	a9 89       	ldd	r26, Y+17	; 0x11
    2362:	ba 89       	ldd	r27, Y+18	; 0x12
    2364:	9b 88       	ldd	r9, Y+19	; 0x13
    2366:	8c 88       	ldd	r8, Y+20	; 0x14
        double Kp, double Ki, double Kd, int ControllerDirection)
    :PID::PID(Input, Output, Setpoint, Kp, Ki, Kd, P_ON_E, ControllerDirection)
    2368:	8f 92       	push	r8
    236a:	9f 92       	push	r9
    236c:	1f 92       	push	r1
    236e:	99 24       	eor	r9, r9
    2370:	93 94       	inc	r9
    2372:	9f 92       	push	r9
    2374:	bf 93       	push	r27
    2376:	af 93       	push	r26
    2378:	ff 93       	push	r31
    237a:	ef 93       	push	r30
    237c:	0e 94 2f 11 	call	0x225e	; 0x225e <_ZN3PIDC1EPdS0_S0_dddii>
{

}
    2380:	0f b6       	in	r0, 0x3f	; 63
    2382:	f8 94       	cli
    2384:	de bf       	out	0x3e, r29	; 62
    2386:	0f be       	out	0x3f, r0	; 63
    2388:	cd bf       	out	0x3d, r28	; 61
    238a:	df 91       	pop	r29
    238c:	cf 91       	pop	r28
    238e:	1f 91       	pop	r17
    2390:	0f 91       	pop	r16
    2392:	ff 90       	pop	r15
    2394:	ef 90       	pop	r14
    2396:	df 90       	pop	r13
    2398:	cf 90       	pop	r12
    239a:	bf 90       	pop	r11
    239c:	af 90       	pop	r10
    239e:	9f 90       	pop	r9
    23a0:	8f 90       	pop	r8
    23a2:	08 95       	ret

000023a4 <_ZN3dht11_readSensorEhhh>:
    if (bits[4] != sum)
    {
        return DHTLIB_ERROR_CHECKSUM;
    }
    return result;
}
    23a4:	2f 92       	push	r2
    23a6:	3f 92       	push	r3
    23a8:	4f 92       	push	r4
    23aa:	5f 92       	push	r5
    23ac:	6f 92       	push	r6
    23ae:	7f 92       	push	r7
    23b0:	8f 92       	push	r8
    23b2:	9f 92       	push	r9
    23b4:	af 92       	push	r10
    23b6:	bf 92       	push	r11
    23b8:	cf 92       	push	r12
    23ba:	df 92       	push	r13
    23bc:	ef 92       	push	r14
    23be:	ff 92       	push	r15
    23c0:	0f 93       	push	r16
    23c2:	1f 93       	push	r17
    23c4:	cf 93       	push	r28
    23c6:	df 93       	push	r29
    23c8:	ec 01       	movw	r28, r24
    23ca:	f6 2e       	mov	r15, r22
    23cc:	04 2f       	mov	r16, r20
    23ce:	e2 2e       	mov	r14, r18
    23d0:	86 2f       	mov	r24, r22
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	fc 01       	movw	r30, r24
    23d6:	ea 5b       	subi	r30, 0xBA	; 186
    23d8:	fe 4f       	sbci	r31, 0xFE	; 254
    23da:	14 91       	lpm	r17, Z
    23dc:	fc 01       	movw	r30, r24
    23de:	eb 59       	subi	r30, 0x9B	; 155
    23e0:	fe 4f       	sbci	r31, 0xFE	; 254
    23e2:	e4 91       	lpm	r30, Z
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	ee 0f       	add	r30, r30
    23e8:	ff 1f       	adc	r31, r31
    23ea:	ec 57       	subi	r30, 0x7C	; 124
    23ec:	fe 4f       	sbci	r31, 0xFE	; 254
    23ee:	c5 90       	lpm	r12, Z+
    23f0:	d4 90       	lpm	r13, Z
    23f2:	61 e0       	ldi	r22, 0x01	; 1
    23f4:	8f 2d       	mov	r24, r15
    23f6:	0e 94 d5 23 	call	0x47aa	; 0x47aa <pinMode>
    23fa:	60 e0       	ldi	r22, 0x00	; 0
    23fc:	8f 2d       	mov	r24, r15
    23fe:	0e 94 11 24 	call	0x4822	; 0x4822 <digitalWrite>
    2402:	09 30       	cpi	r16, 0x09	; 9
    2404:	38 f0       	brcs	.+14     	; 0x2414 <_ZN3dht11_readSensorEhhh+0x70>
    2406:	60 2f       	mov	r22, r16
    2408:	70 e0       	ldi	r23, 0x00	; 0
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	0e 94 32 22 	call	0x4464	; 0x4464 <delay>
    2412:	0a c0       	rjmp	.+20     	; 0x2428 <_ZN3dht11_readSensorEhhh+0x84>
    2414:	88 ee       	ldi	r24, 0xE8	; 232
    2416:	93 e0       	ldi	r25, 0x03	; 3
    2418:	9c 01       	movw	r18, r24
    241a:	02 9f       	mul	r16, r18
    241c:	c0 01       	movw	r24, r0
    241e:	03 9f       	mul	r16, r19
    2420:	90 0d       	add	r25, r0
    2422:	11 24       	eor	r1, r1
    2424:	0e 94 6e 22 	call	0x44dc	; 0x44dc <delayMicroseconds>
    2428:	60 e0       	ldi	r22, 0x00	; 0
    242a:	8f 2d       	mov	r24, r15
    242c:	0e 94 d5 23 	call	0x47aa	; 0x47aa <pinMode>
    2430:	80 e2       	ldi	r24, 0x20	; 32
    2432:	93 e0       	ldi	r25, 0x03	; 3
    2434:	d6 01       	movw	r26, r12
    2436:	2c 91       	ld	r18, X
    2438:	21 23       	and	r18, r17
    243a:	21 f0       	breq	.+8      	; 0x2444 <_ZN3dht11_readSensorEhhh+0xa0>
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	d1 f7       	brne	.-12     	; 0x2434 <_ZN3dht11_readSensorEhhh+0x90>
    2440:	8d ef       	ldi	r24, 0xFD	; 253
    2442:	5f c0       	rjmp	.+190    	; 0x2502 <_ZN3dht11_readSensorEhhh+0x15e>
    2444:	80 e9       	ldi	r24, 0x90	; 144
    2446:	91 e0       	ldi	r25, 0x01	; 1
    2448:	f6 01       	movw	r30, r12
    244a:	20 81       	ld	r18, Z
    244c:	21 23       	and	r18, r17
    244e:	21 f4       	brne	.+8      	; 0x2458 <_ZN3dht11_readSensorEhhh+0xb4>
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	d1 f7       	brne	.-12     	; 0x2448 <_ZN3dht11_readSensorEhhh+0xa4>
    2454:	8c ef       	ldi	r24, 0xFC	; 252
    2456:	55 c0       	rjmp	.+170    	; 0x2502 <_ZN3dht11_readSensorEhhh+0x15e>
    2458:	80 e9       	ldi	r24, 0x90	; 144
    245a:	91 e0       	ldi	r25, 0x01	; 1
    245c:	d6 01       	movw	r26, r12
    245e:	2c 91       	ld	r18, X
    2460:	21 23       	and	r18, r17
    2462:	21 f0       	breq	.+8      	; 0x246c <_ZN3dht11_readSensorEhhh+0xc8>
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	d1 f7       	brne	.-12     	; 0x245c <_ZN3dht11_readSensorEhhh+0xb8>
    2468:	8b ef       	ldi	r24, 0xFB	; 251
    246a:	4b c0       	rjmp	.+150    	; 0x2502 <_ZN3dht11_readSensorEhhh+0x15e>
    246c:	58 e2       	ldi	r21, 0x28	; 40
    246e:	80 e9       	ldi	r24, 0x90	; 144
    2470:	91 e0       	ldi	r25, 0x01	; 1
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	e0 e9       	ldi	r30, 0x90	; 144
    2478:	f1 e0       	ldi	r31, 0x01	; 1
    247a:	00 e0       	ldi	r16, 0x00	; 0
    247c:	60 e0       	ldi	r22, 0x00	; 0
    247e:	31 2c       	mov	r3, r1
    2480:	40 e8       	ldi	r20, 0x80	; 128
    2482:	25 2e       	mov	r2, r21
    2484:	2e 18       	sub	r2, r14
    2486:	70 e9       	ldi	r23, 0x90	; 144
    2488:	87 2e       	mov	r8, r23
    248a:	99 24       	eor	r9, r9
    248c:	93 94       	inc	r9
    248e:	a1 2c       	mov	r10, r1
    2490:	b1 2c       	mov	r11, r1
    2492:	d6 01       	movw	r26, r12
    2494:	7c 91       	ld	r23, X
    2496:	71 23       	and	r23, r17
    2498:	61 f5       	brne	.+88     	; 0x24f2 <_ZN3dht11_readSensorEhhh+0x14e>
    249a:	00 23       	and	r16, r16
    249c:	51 f1       	breq	.+84     	; 0x24f2 <_ZN3dht11_readSensorEhhh+0x14e>
    249e:	25 16       	cp	r2, r21
    24a0:	98 f4       	brcc	.+38     	; 0x24c8 <_ZN3dht11_readSensorEhhh+0x124>
    24a2:	8e 17       	cp	r24, r30
    24a4:	9f 07       	cpc	r25, r31
    24a6:	08 f4       	brcc	.+2      	; 0x24aa <_ZN3dht11_readSensorEhhh+0x106>
    24a8:	fc 01       	movw	r30, r24
    24aa:	24 01       	movw	r4, r8
    24ac:	35 01       	movw	r6, r10
    24ae:	4e 1a       	sub	r4, r30
    24b0:	5f 0a       	sbc	r5, r31
    24b2:	61 08       	sbc	r6, r1
    24b4:	71 08       	sbc	r7, r1
    24b6:	82 e0       	ldi	r24, 0x02	; 2
    24b8:	75 94       	asr	r7
    24ba:	67 94       	ror	r6
    24bc:	57 94       	ror	r5
    24be:	47 94       	ror	r4
    24c0:	8a 95       	dec	r24
    24c2:	d1 f7       	brne	.-12     	; 0x24b8 <_ZN3dht11_readSensorEhhh+0x114>
    24c4:	92 01       	movw	r18, r4
    24c6:	07 c0       	rjmp	.+14     	; 0x24d6 <_ZN3dht11_readSensorEhhh+0x132>
    24c8:	7f 01       	movw	r14, r30
    24ca:	e2 1a       	sub	r14, r18
    24cc:	f3 0a       	sbc	r15, r19
    24ce:	e8 16       	cp	r14, r24
    24d0:	f9 06       	cpc	r15, r25
    24d2:	08 f0       	brcs	.+2      	; 0x24d6 <_ZN3dht11_readSensorEhhh+0x132>
    24d4:	64 2b       	or	r22, r20
    24d6:	46 95       	lsr	r20
    24d8:	49 f4       	brne	.+18     	; 0x24ec <_ZN3dht11_readSensorEhhh+0x148>
    24da:	ce 01       	movw	r24, r28
    24dc:	83 0d       	add	r24, r3
    24de:	91 1d       	adc	r25, r1
    24e0:	dc 01       	movw	r26, r24
    24e2:	18 96       	adiw	r26, 0x08	; 8
    24e4:	6c 93       	st	X, r22
    24e6:	33 94       	inc	r3
    24e8:	60 e0       	ldi	r22, 0x00	; 0
    24ea:	40 e8       	ldi	r20, 0x80	; 128
    24ec:	51 50       	subi	r21, 0x01	; 1
    24ee:	80 e9       	ldi	r24, 0x90	; 144
    24f0:	91 e0       	ldi	r25, 0x01	; 1
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	29 f0       	breq	.+10     	; 0x2500 <_ZN3dht11_readSensorEhhh+0x15c>
    24f6:	07 2f       	mov	r16, r23
    24f8:	51 11       	cpse	r21, r1
    24fa:	cb cf       	rjmp	.-106    	; 0x2492 <_ZN3dht11_readSensorEhhh+0xee>
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	01 c0       	rjmp	.+2      	; 0x2502 <_ZN3dht11_readSensorEhhh+0x15e>
    2500:	8e ef       	ldi	r24, 0xFE	; 254
    2502:	df 91       	pop	r29
    2504:	cf 91       	pop	r28
    2506:	1f 91       	pop	r17
    2508:	0f 91       	pop	r16
    250a:	ff 90       	pop	r15
    250c:	ef 90       	pop	r14
    250e:	df 90       	pop	r13
    2510:	cf 90       	pop	r12
    2512:	bf 90       	pop	r11
    2514:	af 90       	pop	r10
    2516:	9f 90       	pop	r9
    2518:	8f 90       	pop	r8
    251a:	7f 90       	pop	r7
    251c:	6f 90       	pop	r6
    251e:	5f 90       	pop	r5
    2520:	4f 90       	pop	r4
    2522:	3f 90       	pop	r3
    2524:	2f 90       	pop	r2
    2526:	08 95       	ret

00002528 <_ZN3dht4readEh>:

int8_t dht::read(uint8_t pin)
{
    2528:	cf 92       	push	r12
    252a:	df 92       	push	r13
    252c:	ef 92       	push	r14
    252e:	ff 92       	push	r15
    2530:	0f 93       	push	r16
    2532:	1f 93       	push	r17
    2534:	cf 93       	push	r28
    2536:	df 93       	push	r29
    2538:	ec 01       	movw	r28, r24
    // READ VALUES
    if (_disableIRQ) noInterrupts();
    253a:	8d 85       	ldd	r24, Y+13	; 0x0d
    253c:	88 23       	and	r24, r24
    253e:	09 f0       	breq	.+2      	; 0x2542 <_ZN3dht4readEh+0x1a>
    2540:	f8 94       	cli
    int8_t result = _readSensor(pin, DHTLIB_DHT_WAKEUP, DHTLIB_DHT_LEADING_ZEROS);
    2542:	26 e0       	ldi	r18, 0x06	; 6
    2544:	41 e0       	ldi	r20, 0x01	; 1
    2546:	ce 01       	movw	r24, r28
    2548:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <_ZN3dht11_readSensorEhhh>
    254c:	e8 2e       	mov	r14, r24
    if (_disableIRQ) interrupts();
    254e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2550:	88 23       	and	r24, r24
    2552:	09 f0       	breq	.+2      	; 0x2556 <_ZN3dht4readEh+0x2e>
    2554:	78 94       	sei

    // these bits are always zero, masking them reduces errors.
    bits[0] &= 0x03;
    2556:	08 85       	ldd	r16, Y+8	; 0x08
    2558:	03 70       	andi	r16, 0x03	; 3
    255a:	08 87       	std	Y+8, r16	; 0x08
    bits[2] &= 0x83;
    255c:	1a 85       	ldd	r17, Y+10	; 0x0a
    255e:	81 2f       	mov	r24, r17
    2560:	83 78       	andi	r24, 0x83	; 131
    2562:	f8 2e       	mov	r15, r24
    2564:	8a 87       	std	Y+10, r24	; 0x0a

    // CONVERT AND STORE
    humidity = (bits[0]*256 + bits[1]) * 0.1;
    2566:	c9 84       	ldd	r12, Y+9	; 0x09
    2568:	60 2f       	mov	r22, r16
    256a:	70 e0       	ldi	r23, 0x00	; 0
    256c:	76 2f       	mov	r23, r22
    256e:	66 27       	eor	r22, r22
    2570:	6c 0d       	add	r22, r12
    2572:	71 1d       	adc	r23, r1
    2574:	07 2e       	mov	r0, r23
    2576:	00 0c       	add	r0, r0
    2578:	88 0b       	sbc	r24, r24
    257a:	99 0b       	sbc	r25, r25
    257c:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__floatsisf>
    2580:	2d ec       	ldi	r18, 0xCD	; 205
    2582:	3c ec       	ldi	r19, 0xCC	; 204
    2584:	4c ec       	ldi	r20, 0xCC	; 204
    2586:	5d e3       	ldi	r21, 0x3D	; 61
    2588:	0e 94 09 1a 	call	0x3412	; 0x3412 <__mulsf3>
    258c:	68 83       	st	Y, r22
    258e:	79 83       	std	Y+1, r23	; 0x01
    2590:	8a 83       	std	Y+2, r24	; 0x02
    2592:	9b 83       	std	Y+3, r25	; 0x03
    temperature = ((bits[2] & 0x7F)*256 + bits[3]) * 0.1;
    2594:	db 84       	ldd	r13, Y+11	; 0x0b
    2596:	13 70       	andi	r17, 0x03	; 3
    2598:	61 2f       	mov	r22, r17
    259a:	70 e0       	ldi	r23, 0x00	; 0
    259c:	76 2f       	mov	r23, r22
    259e:	66 27       	eor	r22, r22
    25a0:	6d 0d       	add	r22, r13
    25a2:	71 1d       	adc	r23, r1
    25a4:	07 2e       	mov	r0, r23
    25a6:	00 0c       	add	r0, r0
    25a8:	88 0b       	sbc	r24, r24
    25aa:	99 0b       	sbc	r25, r25
    25ac:	0e 94 54 19 	call	0x32a8	; 0x32a8 <__floatsisf>
    25b0:	2d ec       	ldi	r18, 0xCD	; 205
    25b2:	3c ec       	ldi	r19, 0xCC	; 204
    25b4:	4c ec       	ldi	r20, 0xCC	; 204
    25b6:	5d e3       	ldi	r21, 0x3D	; 61
    25b8:	0e 94 09 1a 	call	0x3412	; 0x3412 <__mulsf3>
    if (bits[2] & 0x80)  // negative temperature
    25bc:	f7 fc       	sbrc	r15, 7
    25be:	05 c0       	rjmp	.+10     	; 0x25ca <_ZN3dht4readEh+0xa2>
    bits[0] &= 0x03;
    bits[2] &= 0x83;

    // CONVERT AND STORE
    humidity = (bits[0]*256 + bits[1]) * 0.1;
    temperature = ((bits[2] & 0x7F)*256 + bits[3]) * 0.1;
    25c0:	6c 83       	std	Y+4, r22	; 0x04
    25c2:	7d 83       	std	Y+5, r23	; 0x05
    25c4:	8e 83       	std	Y+6, r24	; 0x06
    25c6:	9f 83       	std	Y+7, r25	; 0x07
    25c8:	07 c0       	rjmp	.+14     	; 0x25d8 <_ZN3dht4readEh+0xb0>
    if (bits[2] & 0x80)  // negative temperature
    {
        temperature = -temperature;
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	b0 58       	subi	r27, 0x80	; 128
    25d0:	8c 83       	std	Y+4, r24	; 0x04
    25d2:	9d 83       	std	Y+5, r25	; 0x05
    25d4:	ae 83       	std	Y+6, r26	; 0x06
    25d6:	bf 83       	std	Y+7, r27	; 0x07
    }

    // TEST CHECKSUM
    uint8_t sum = bits[0] + bits[1] + bits[2] + bits[3];
    if (bits[4] != sum)
    25d8:	dc 0c       	add	r13, r12
    25da:	0d 0d       	add	r16, r13
    25dc:	f0 0e       	add	r15, r16
    25de:	8c 85       	ldd	r24, Y+12	; 0x0c
    25e0:	f8 12       	cpse	r15, r24
    25e2:	02 c0       	rjmp	.+4      	; 0x25e8 <_ZN3dht4readEh+0xc0>
    {
        return DHTLIB_ERROR_CHECKSUM;
    }
    return result;
    25e4:	8e 2d       	mov	r24, r14
    25e6:	01 c0       	rjmp	.+2      	; 0x25ea <_ZN3dht4readEh+0xc2>

    // TEST CHECKSUM
    uint8_t sum = bits[0] + bits[1] + bits[2] + bits[3];
    if (bits[4] != sum)
    {
        return DHTLIB_ERROR_CHECKSUM;
    25e8:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return result;
}
    25ea:	df 91       	pop	r29
    25ec:	cf 91       	pop	r28
    25ee:	1f 91       	pop	r17
    25f0:	0f 91       	pop	r16
    25f2:	ff 90       	pop	r15
    25f4:	ef 90       	pop	r14
    25f6:	df 90       	pop	r13
    25f8:	cf 90       	pop	r12
    25fa:	08 95       	ret

000025fc <_ZN7hd447806ioinitEv>:
	{
		buf[i] = pgm_read_byte(charmap++);
	}
	// call the RAM based function to actually send it to the LCD
	return(createChar(location, buf));
}
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	08 95       	ret

00002602 <_ZN7hd447806ioreadENS_6iotypeE>:
    2602:	8d ef       	ldi	r24, 0xFD	; 253
    2604:	9f ef       	ldi	r25, 0xFF	; 255
    2606:	08 95       	ret

00002608 <_ZN7hd4478014iosetBacklightEh>:
    2608:	8d ef       	ldi	r24, 0xFD	; 253
    260a:	9f ef       	ldi	r25, 0xFF	; 255
    260c:	08 95       	ret

0000260e <_ZN7hd44780C1Ev>:
    260e:	cf 93       	push	r28
    2610:	df 93       	push	r29
    2612:	ec 01       	movw	r28, r24
    2614:	1b 82       	std	Y+3, r1	; 0x03
    2616:	1a 82       	std	Y+2, r1	; 0x02
    2618:	81 ec       	ldi	r24, 0xC1	; 193
    261a:	92 e0       	ldi	r25, 0x02	; 2
    261c:	99 83       	std	Y+1, r25	; 0x01
    261e:	88 83       	st	Y, r24
    2620:	1f 82       	std	Y+7, r1	; 0x07
    2622:	18 86       	std	Y+8, r1	; 0x08
    2624:	80 ed       	ldi	r24, 0xD0	; 208
    2626:	97 e0       	ldi	r25, 0x07	; 7
    2628:	a0 e0       	ldi	r26, 0x00	; 0
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	88 8b       	std	Y+16, r24	; 0x10
    262e:	99 8b       	std	Y+17, r25	; 0x11
    2630:	aa 8b       	std	Y+18, r26	; 0x12
    2632:	bb 8b       	std	Y+19, r27	; 0x13
    2634:	86 e2       	ldi	r24, 0x26	; 38
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	a0 e0       	ldi	r26, 0x00	; 0
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	8c 8b       	std	Y+20, r24	; 0x14
    263e:	9d 8b       	std	Y+21, r25	; 0x15
    2640:	ae 8b       	std	Y+22, r26	; 0x16
    2642:	bf 8b       	std	Y+23, r27	; 0x17
    2644:	1c 86       	std	Y+12, r1	; 0x0c
    2646:	1d 86       	std	Y+13, r1	; 0x0d
    2648:	1e 86       	std	Y+14, r1	; 0x0e
    264a:	1f 86       	std	Y+15, r1	; 0x0f
    264c:	1b 86       	std	Y+11, r1	; 0x0b
    264e:	0e 94 0d 22 	call	0x441a	; 0x441a <micros>
    2652:	68 8f       	std	Y+24, r22	; 0x18
    2654:	79 8f       	std	Y+25, r23	; 0x19
    2656:	8a 8f       	std	Y+26, r24	; 0x1a
    2658:	9b 8f       	std	Y+27, r25	; 0x1b
    265a:	1c 8e       	std	Y+28, r1	; 0x1c
    265c:	1d 8e       	std	Y+29, r1	; 0x1d
    265e:	1e 8e       	std	Y+30, r1	; 0x1e
    2660:	1f 8e       	std	Y+31, r1	; 0x1f
    2662:	df 91       	pop	r29
    2664:	cf 91       	pop	r28
    2666:	08 95       	ret

00002668 <_ZN7hd447809backlightEv>:
    2668:	dc 01       	movw	r26, r24
    266a:	ed 91       	ld	r30, X+
    266c:	fc 91       	ld	r31, X
    266e:	06 84       	ldd	r0, Z+14	; 0x0e
    2670:	f7 85       	ldd	r31, Z+15	; 0x0f
    2672:	e0 2d       	mov	r30, r0
    2674:	6f ef       	ldi	r22, 0xFF	; 255
    2676:	09 94       	ijmp

00002678 <_ZN7hd4478011noBacklightEv>:
    2678:	dc 01       	movw	r26, r24
    267a:	ed 91       	ld	r30, X+
    267c:	fc 91       	ld	r31, X
    267e:	06 84       	ldd	r0, Z+14	; 0x0e
    2680:	f7 85       	ldd	r31, Z+15	; 0x0f
    2682:	e0 2d       	mov	r30, r0
    2684:	60 e0       	ldi	r22, 0x00	; 0
    2686:	09 94       	ijmp

00002688 <_ZN7hd447807commandEh>:
    2688:	8f 92       	push	r8
    268a:	9f 92       	push	r9
    268c:	af 92       	push	r10
    268e:	bf 92       	push	r11
    2690:	ef 92       	push	r14
    2692:	ff 92       	push	r15
    2694:	1f 93       	push	r17
    2696:	cf 93       	push	r28
    2698:	df 93       	push	r29
    269a:	ec 01       	movw	r28, r24
    269c:	16 2f       	mov	r17, r22
    269e:	e8 81       	ld	r30, Y
    26a0:	f9 81       	ldd	r31, Y+1	; 0x01
    26a2:	04 84       	ldd	r0, Z+12	; 0x0c
    26a4:	f5 85       	ldd	r31, Z+13	; 0x0d
    26a6:	e0 2d       	mov	r30, r0
    26a8:	46 2f       	mov	r20, r22
    26aa:	60 e0       	ldi	r22, 0x00	; 0
    26ac:	09 95       	icall
    26ae:	7c 01       	movw	r14, r24
    26b0:	11 50       	subi	r17, 0x01	; 1
    26b2:	12 30       	cpi	r17, 0x02	; 2
    26b4:	38 f4       	brcc	.+14     	; 0x26c4 <_ZN7hd447807commandEh+0x3c>
    26b6:	19 86       	std	Y+9, r1	; 0x09
    26b8:	1a 86       	std	Y+10, r1	; 0x0a
    26ba:	88 88       	ldd	r8, Y+16	; 0x10
    26bc:	99 88       	ldd	r9, Y+17	; 0x11
    26be:	aa 88       	ldd	r10, Y+18	; 0x12
    26c0:	bb 88       	ldd	r11, Y+19	; 0x13
    26c2:	04 c0       	rjmp	.+8      	; 0x26cc <_ZN7hd447807commandEh+0x44>
    26c4:	8c 88       	ldd	r8, Y+20	; 0x14
    26c6:	9d 88       	ldd	r9, Y+21	; 0x15
    26c8:	ae 88       	ldd	r10, Y+22	; 0x16
    26ca:	bf 88       	ldd	r11, Y+23	; 0x17
    26cc:	0e 94 0d 22 	call	0x441a	; 0x441a <micros>
    26d0:	68 8f       	std	Y+24, r22	; 0x18
    26d2:	79 8f       	std	Y+25, r23	; 0x19
    26d4:	8a 8f       	std	Y+26, r24	; 0x1a
    26d6:	9b 8f       	std	Y+27, r25	; 0x1b
    26d8:	8c 8e       	std	Y+28, r8	; 0x1c
    26da:	9d 8e       	std	Y+29, r9	; 0x1d
    26dc:	ae 8e       	std	Y+30, r10	; 0x1e
    26de:	bf 8e       	std	Y+31, r11	; 0x1f
    26e0:	c7 01       	movw	r24, r14
    26e2:	df 91       	pop	r29
    26e4:	cf 91       	pop	r28
    26e6:	1f 91       	pop	r17
    26e8:	ff 90       	pop	r15
    26ea:	ef 90       	pop	r14
    26ec:	bf 90       	pop	r11
    26ee:	af 90       	pop	r10
    26f0:	9f 90       	pop	r9
    26f2:	8f 90       	pop	r8
    26f4:	08 95       	ret

000026f6 <_ZN7hd447805clearEv>:
    26f6:	61 e0       	ldi	r22, 0x01	; 1
    26f8:	0c 94 44 13 	jmp	0x2688	; 0x2688 <_ZN7hd447807commandEh>

000026fc <_ZN7hd447804homeEv>:
    26fc:	62 e0       	ldi	r22, 0x02	; 2
    26fe:	0c 94 44 13 	jmp	0x2688	; 0x2688 <_ZN7hd447807commandEh>

00002702 <_ZN7hd447809setCursorEhh>:
    2702:	fc 01       	movw	r30, r24
    2704:	80 85       	ldd	r24, Z+8	; 0x08
    2706:	48 17       	cp	r20, r24
    2708:	10 f0       	brcs	.+4      	; 0x270e <_ZN7hd447809setCursorEhh+0xc>
    270a:	4f ef       	ldi	r20, 0xFF	; 255
    270c:	48 0f       	add	r20, r24
    270e:	93 85       	ldd	r25, Z+11	; 0x0b
    2710:	99 23       	and	r25, r25
    2712:	59 f0       	breq	.+22     	; 0x272a <_ZN7hd447809setCursorEhh+0x28>
    2714:	97 81       	ldd	r25, Z+7	; 0x07
    2716:	69 17       	cp	r22, r25
    2718:	30 f0       	brcs	.+12     	; 0x2726 <_ZN7hd447809setCursorEhh+0x24>
    271a:	69 1b       	sub	r22, r25
    271c:	4f 5f       	subi	r20, 0xFF	; 255
    271e:	48 17       	cp	r20, r24
    2720:	d0 f3       	brcs	.-12     	; 0x2716 <_ZN7hd447809setCursorEhh+0x14>
    2722:	40 e0       	ldi	r20, 0x00	; 0
    2724:	f8 cf       	rjmp	.-16     	; 0x2716 <_ZN7hd447809setCursorEhh+0x14>
    2726:	61 87       	std	Z+9, r22	; 0x09
    2728:	42 87       	std	Z+10, r20	; 0x0a
    272a:	df 01       	movw	r26, r30
    272c:	a4 0f       	add	r26, r20
    272e:	b1 1d       	adc	r27, r1
    2730:	1c 96       	adiw	r26, 0x0c	; 12
    2732:	8c 91       	ld	r24, X
    2734:	68 0f       	add	r22, r24
    2736:	60 68       	ori	r22, 0x80	; 128
    2738:	cf 01       	movw	r24, r30
    273a:	0c 94 44 13 	jmp	0x2688	; 0x2688 <_ZN7hd447807commandEh>

0000273e <_ZN7hd447807displayEv>:
    273e:	fc 01       	movw	r30, r24
    2740:	65 81       	ldd	r22, Z+5	; 0x05
    2742:	26 2f       	mov	r18, r22
    2744:	24 60       	ori	r18, 0x04	; 4
    2746:	25 83       	std	Z+5, r18	; 0x05
    2748:	6c 60       	ori	r22, 0x0C	; 12
    274a:	0c 94 44 13 	jmp	0x2688	; 0x2688 <_ZN7hd447807commandEh>

0000274e <_ZN7hd447805beginEhhh>:
    274e:	0f 93       	push	r16
    2750:	1f 93       	push	r17
    2752:	cf 93       	push	r28
    2754:	df 93       	push	r29
    2756:	ec 01       	movw	r28, r24
    2758:	02 2f       	mov	r16, r18
    275a:	14 2f       	mov	r17, r20
    275c:	45 30       	cpi	r20, 0x05	; 5
    275e:	08 f0       	brcs	.+2      	; 0x2762 <_ZN7hd447805beginEhhh+0x14>
    2760:	14 e0       	ldi	r17, 0x04	; 4
    2762:	8c 85       	ldd	r24, Y+12	; 0x0c
    2764:	81 11       	cpse	r24, r1
    2766:	09 c0       	rjmp	.+18     	; 0x277a <_ZN7hd447805beginEhhh+0x2c>
    2768:	8d 85       	ldd	r24, Y+13	; 0x0d
    276a:	81 11       	cpse	r24, r1
    276c:	06 c0       	rjmp	.+12     	; 0x277a <_ZN7hd447805beginEhhh+0x2c>
    276e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2770:	81 11       	cpse	r24, r1
    2772:	03 c0       	rjmp	.+6      	; 0x277a <_ZN7hd447805beginEhhh+0x2c>
    2774:	8f 85       	ldd	r24, Y+15	; 0x0f
    2776:	88 23       	and	r24, r24
    2778:	29 f0       	breq	.+10     	; 0x2784 <_ZN7hd447805beginEhhh+0x36>
    277a:	8f 81       	ldd	r24, Y+7	; 0x07
    277c:	88 23       	and	r24, r24
    277e:	59 f0       	breq	.+22     	; 0x2796 <_ZN7hd447805beginEhhh+0x48>
    2780:	86 17       	cp	r24, r22
    2782:	49 f0       	breq	.+18     	; 0x2796 <_ZN7hd447805beginEhhh+0x48>
    2784:	1c 86       	std	Y+12, r1	; 0x0c
    2786:	80 e4       	ldi	r24, 0x40	; 64
    2788:	8d 87       	std	Y+13, r24	; 0x0d
    278a:	6e 87       	std	Y+14, r22	; 0x0e
    278c:	86 2f       	mov	r24, r22
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	80 5c       	subi	r24, 0xC0	; 192
    2792:	9f 4f       	sbci	r25, 0xFF	; 255
    2794:	8f 87       	std	Y+15, r24	; 0x0f
    2796:	18 87       	std	Y+8, r17	; 0x08
    2798:	6f 83       	std	Y+7, r22	; 0x07
    279a:	64 e6       	ldi	r22, 0x64	; 100
    279c:	70 e0       	ldi	r23, 0x00	; 0
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	0e 94 32 22 	call	0x4464	; 0x4464 <delay>
    27a6:	1c 82       	std	Y+4, r1	; 0x04
    27a8:	e8 81       	ld	r30, Y
    27aa:	f9 81       	ldd	r31, Y+1	; 0x01
    27ac:	00 84       	ldd	r0, Z+8	; 0x08
    27ae:	f1 85       	ldd	r31, Z+9	; 0x09
    27b0:	e0 2d       	mov	r30, r0
    27b2:	ce 01       	movw	r24, r28
    27b4:	09 95       	icall
    27b6:	00 97       	sbiw	r24, 0x00	; 0
    27b8:	09 f0       	breq	.+2      	; 0x27bc <_ZN7hd447805beginEhhh+0x6e>
    27ba:	5e c0       	rjmp	.+188    	; 0x2878 <_ZN7hd447805beginEhhh+0x12a>
    27bc:	88 85       	ldd	r24, Y+8	; 0x08
    27be:	82 30       	cpi	r24, 0x02	; 2
    27c0:	18 f0       	brcs	.+6      	; 0x27c8 <_ZN7hd447805beginEhhh+0x7a>
    27c2:	8c 81       	ldd	r24, Y+4	; 0x04
    27c4:	88 60       	ori	r24, 0x08	; 8
    27c6:	8c 83       	std	Y+4, r24	; 0x04
    27c8:	00 23       	and	r16, r16
    27ca:	29 f0       	breq	.+10     	; 0x27d6 <_ZN7hd447805beginEhhh+0x88>
    27cc:	11 30       	cpi	r17, 0x01	; 1
    27ce:	19 f4       	brne	.+6      	; 0x27d6 <_ZN7hd447805beginEhhh+0x88>
    27d0:	8c 81       	ldd	r24, Y+4	; 0x04
    27d2:	84 60       	ori	r24, 0x04	; 4
    27d4:	8c 83       	std	Y+4, r24	; 0x04
    27d6:	e8 81       	ld	r30, Y
    27d8:	f9 81       	ldd	r31, Y+1	; 0x01
    27da:	04 84       	ldd	r0, Z+12	; 0x0c
    27dc:	f5 85       	ldd	r31, Z+13	; 0x0d
    27de:	e0 2d       	mov	r30, r0
    27e0:	40 e3       	ldi	r20, 0x30	; 48
    27e2:	62 e0       	ldi	r22, 0x02	; 2
    27e4:	ce 01       	movw	r24, r28
    27e6:	09 95       	icall
    27e8:	65 e0       	ldi	r22, 0x05	; 5
    27ea:	70 e0       	ldi	r23, 0x00	; 0
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	0e 94 32 22 	call	0x4464	; 0x4464 <delay>
    27f4:	e8 81       	ld	r30, Y
    27f6:	f9 81       	ldd	r31, Y+1	; 0x01
    27f8:	04 84       	ldd	r0, Z+12	; 0x0c
    27fa:	f5 85       	ldd	r31, Z+13	; 0x0d
    27fc:	e0 2d       	mov	r30, r0
    27fe:	40 e3       	ldi	r20, 0x30	; 48
    2800:	62 e0       	ldi	r22, 0x02	; 2
    2802:	ce 01       	movw	r24, r28
    2804:	09 95       	icall
    2806:	61 e0       	ldi	r22, 0x01	; 1
    2808:	70 e0       	ldi	r23, 0x00	; 0
    280a:	80 e0       	ldi	r24, 0x00	; 0
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	0e 94 32 22 	call	0x4464	; 0x4464 <delay>
    2812:	e8 81       	ld	r30, Y
    2814:	f9 81       	ldd	r31, Y+1	; 0x01
    2816:	04 84       	ldd	r0, Z+12	; 0x0c
    2818:	f5 85       	ldd	r31, Z+13	; 0x0d
    281a:	e0 2d       	mov	r30, r0
    281c:	40 e3       	ldi	r20, 0x30	; 48
    281e:	62 e0       	ldi	r22, 0x02	; 2
    2820:	ce 01       	movw	r24, r28
    2822:	09 95       	icall
    2824:	61 e0       	ldi	r22, 0x01	; 1
    2826:	70 e0       	ldi	r23, 0x00	; 0
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	0e 94 32 22 	call	0x4464	; 0x4464 <delay>
    2830:	8c 81       	ldd	r24, Y+4	; 0x04
    2832:	84 fd       	sbrc	r24, 4
    2834:	09 c0       	rjmp	.+18     	; 0x2848 <_ZN7hd447805beginEhhh+0xfa>
    2836:	e8 81       	ld	r30, Y
    2838:	f9 81       	ldd	r31, Y+1	; 0x01
    283a:	04 84       	ldd	r0, Z+12	; 0x0c
    283c:	f5 85       	ldd	r31, Z+13	; 0x0d
    283e:	e0 2d       	mov	r30, r0
    2840:	40 e2       	ldi	r20, 0x20	; 32
    2842:	62 e0       	ldi	r22, 0x02	; 2
    2844:	ce 01       	movw	r24, r28
    2846:	09 95       	icall
    2848:	6c 81       	ldd	r22, Y+4	; 0x04
    284a:	60 62       	ori	r22, 0x20	; 32
    284c:	ce 01       	movw	r24, r28
    284e:	0e 94 44 13 	call	0x2688	; 0x2688 <_ZN7hd447807commandEh>
    2852:	84 e0       	ldi	r24, 0x04	; 4
    2854:	8d 83       	std	Y+5, r24	; 0x05
    2856:	ce 01       	movw	r24, r28
    2858:	0e 94 9f 13 	call	0x273e	; 0x273e <_ZN7hd447807displayEv>
    285c:	ce 01       	movw	r24, r28
    285e:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <_ZN7hd447805clearEv>
    2862:	82 e0       	ldi	r24, 0x02	; 2
    2864:	8e 83       	std	Y+6, r24	; 0x06
    2866:	66 e0       	ldi	r22, 0x06	; 6
    2868:	ce 01       	movw	r24, r28
    286a:	0e 94 44 13 	call	0x2688	; 0x2688 <_ZN7hd447807commandEh>
    286e:	8c 01       	movw	r16, r24
    2870:	ce 01       	movw	r24, r28
    2872:	0e 94 34 13 	call	0x2668	; 0x2668 <_ZN7hd447809backlightEv>
    2876:	c8 01       	movw	r24, r16
    2878:	df 91       	pop	r29
    287a:	cf 91       	pop	r28
    287c:	1f 91       	pop	r17
    287e:	0f 91       	pop	r16
    2880:	08 95       	ret

00002882 <_ZN7hd447808noCursorEv>:
    2882:	fc 01       	movw	r30, r24
    2884:	65 81       	ldd	r22, Z+5	; 0x05
    2886:	6d 7f       	andi	r22, 0xFD	; 253
    2888:	65 83       	std	Z+5, r22	; 0x05
    288a:	68 60       	ori	r22, 0x08	; 8
    288c:	0c 94 44 13 	jmp	0x2688	; 0x2688 <_ZN7hd447807commandEh>

00002890 <_ZN7hd447807noBlinkEv>:
    2890:	fc 01       	movw	r30, r24
    2892:	65 81       	ldd	r22, Z+5	; 0x05
    2894:	6e 7f       	andi	r22, 0xFE	; 254
    2896:	65 83       	std	Z+5, r22	; 0x05
    2898:	68 60       	ori	r22, 0x08	; 8
    289a:	0c 94 44 13 	jmp	0x2688	; 0x2688 <_ZN7hd447807commandEh>

0000289e <_ZN7hd447806_writeEh>:
    289e:	cf 92       	push	r12
    28a0:	df 92       	push	r13
    28a2:	ef 92       	push	r14
    28a4:	ff 92       	push	r15
    28a6:	0f 93       	push	r16
    28a8:	1f 93       	push	r17
    28aa:	cf 93       	push	r28
    28ac:	df 93       	push	r29
    28ae:	ec 01       	movw	r28, r24
    28b0:	46 2f       	mov	r20, r22
    28b2:	e8 81       	ld	r30, Y
    28b4:	f9 81       	ldd	r31, Y+1	; 0x01
    28b6:	04 84       	ldd	r0, Z+12	; 0x0c
    28b8:	f5 85       	ldd	r31, Z+13	; 0x0d
    28ba:	e0 2d       	mov	r30, r0
    28bc:	61 e0       	ldi	r22, 0x01	; 1
    28be:	09 95       	icall
    28c0:	8c 01       	movw	r16, r24
    28c2:	cc 88       	ldd	r12, Y+20	; 0x14
    28c4:	dd 88       	ldd	r13, Y+21	; 0x15
    28c6:	ee 88       	ldd	r14, Y+22	; 0x16
    28c8:	ff 88       	ldd	r15, Y+23	; 0x17
    28ca:	0e 94 0d 22 	call	0x441a	; 0x441a <micros>
    28ce:	68 8f       	std	Y+24, r22	; 0x18
    28d0:	79 8f       	std	Y+25, r23	; 0x19
    28d2:	8a 8f       	std	Y+26, r24	; 0x1a
    28d4:	9b 8f       	std	Y+27, r25	; 0x1b
    28d6:	cc 8e       	std	Y+28, r12	; 0x1c
    28d8:	dd 8e       	std	Y+29, r13	; 0x1d
    28da:	ee 8e       	std	Y+30, r14	; 0x1e
    28dc:	ff 8e       	std	Y+31, r15	; 0x1f
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	01 2b       	or	r16, r17
    28e4:	11 f0       	breq	.+4      	; 0x28ea <_ZN7hd447806_writeEh+0x4c>
    28e6:	80 e0       	ldi	r24, 0x00	; 0
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	df 91       	pop	r29
    28ec:	cf 91       	pop	r28
    28ee:	1f 91       	pop	r17
    28f0:	0f 91       	pop	r16
    28f2:	ff 90       	pop	r15
    28f4:	ef 90       	pop	r14
    28f6:	df 90       	pop	r13
    28f8:	cf 90       	pop	r12
    28fa:	08 95       	ret

000028fc <_ZN7hd447805writeEh>:

// write() - process data character byte to lcd
// returns number of bytes successfully written to device
// i.e. 1 if success or 0 if no character was processed (error)
size_t hd44780::write(uint8_t value)
{
    28fc:	0f 93       	push	r16
    28fe:	1f 93       	push	r17
    2900:	cf 93       	push	r28
    2902:	df 93       	push	r29
    2904:	ec 01       	movw	r28, r24
size_t rval;

	rval = _write(value);
    2906:	0e 94 4f 14 	call	0x289e	; 0x289e <_ZN7hd447806_writeEh>
    290a:	8c 01       	movw	r16, r24
	if(_wraplines)
    290c:	8b 85       	ldd	r24, Y+11	; 0x0b
    290e:	88 23       	and	r24, r24
    2910:	99 f0       	breq	.+38     	; 0x2938 <_ZN7hd447805writeEh+0x3c>
	{
		// currently only works for left to right mode
		if(++_curcol >= _cols)
    2912:	89 85       	ldd	r24, Y+9	; 0x09
    2914:	8f 5f       	subi	r24, 0xFF	; 255
    2916:	89 87       	std	Y+9, r24	; 0x09
    2918:	9f 81       	ldd	r25, Y+7	; 0x07
    291a:	89 17       	cp	r24, r25
    291c:	68 f0       	brcs	.+26     	; 0x2938 <_ZN7hd447805writeEh+0x3c>
		{
			_curcol = 0;
    291e:	19 86       	std	Y+9, r1	; 0x09
			_currow++;
    2920:	8a 85       	ldd	r24, Y+10	; 0x0a
    2922:	8f 5f       	subi	r24, 0xFF	; 255
    2924:	8a 87       	std	Y+10, r24	; 0x0a
			if(_currow >= _rows)
    2926:	98 85       	ldd	r25, Y+8	; 0x08
    2928:	89 17       	cp	r24, r25
    292a:	08 f0       	brcs	.+2      	; 0x292e <_ZN7hd447805writeEh+0x32>
				_currow = 0;
    292c:	1a 86       	std	Y+10, r1	; 0x0a
			setCursor(_curcol, _currow);
    292e:	4a 85       	ldd	r20, Y+10	; 0x0a
    2930:	60 e0       	ldi	r22, 0x00	; 0
    2932:	ce 01       	movw	r24, r28
    2934:	0e 94 81 13 	call	0x2702	; 0x2702 <_ZN7hd447809setCursorEhh>
		}
	}
	return (rval);
}
    2938:	c8 01       	movw	r24, r16
    293a:	df 91       	pop	r29
    293c:	cf 91       	pop	r28
    293e:	1f 91       	pop	r17
    2940:	0f 91       	pop	r16
    2942:	08 95       	ret

00002944 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2944:	10 92 0c 05 	sts	0x050C, r1	; 0x80050c <twi_state>
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <twi_sendStop>
    294e:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <twi_inRepStart>
    2952:	61 e0       	ldi	r22, 0x01	; 1
    2954:	82 e0       	ldi	r24, 0x02	; 2
    2956:	0e 94 11 24 	call	0x4822	; 0x4822 <digitalWrite>
    295a:	61 e0       	ldi	r22, 0x01	; 1
    295c:	83 e0       	ldi	r24, 0x03	; 3
    295e:	0e 94 11 24 	call	0x4822	; 0x4822 <digitalWrite>
    2962:	e9 eb       	ldi	r30, 0xB9	; 185
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	80 81       	ld	r24, Z
    2968:	8e 7f       	andi	r24, 0xFE	; 254
    296a:	80 83       	st	Z, r24
    296c:	80 81       	ld	r24, Z
    296e:	8d 7f       	andi	r24, 0xFD	; 253
    2970:	80 83       	st	Z, r24
    2972:	88 e4       	ldi	r24, 0x48	; 72
    2974:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    2978:	85 e4       	ldi	r24, 0x45	; 69
    297a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    297e:	08 95       	ret

00002980 <twi_readFrom>:
    2980:	41 32       	cpi	r20, 0x21	; 33
    2982:	08 f0       	brcs	.+2      	; 0x2986 <twi_readFrom+0x6>
    2984:	43 c0       	rjmp	.+134    	; 0x2a0c <twi_readFrom+0x8c>
    2986:	90 91 0c 05 	lds	r25, 0x050C	; 0x80050c <twi_state>
    298a:	91 11       	cpse	r25, r1
    298c:	fc cf       	rjmp	.-8      	; 0x2986 <twi_readFrom+0x6>
    298e:	91 e0       	ldi	r25, 0x01	; 1
    2990:	90 93 0c 05 	sts	0x050C, r25	; 0x80050c <twi_state>
    2994:	20 93 0a 05 	sts	0x050A, r18	; 0x80050a <twi_sendStop>
    2998:	2f ef       	ldi	r18, 0xFF	; 255
    299a:	20 93 9f 04 	sts	0x049F, r18	; 0x80049f <twi_error>
    299e:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <twi_masterBufferIndex>
    29a2:	24 0f       	add	r18, r20
    29a4:	20 93 e3 04 	sts	0x04E3, r18	; 0x8004e3 <twi_masterBufferLength>
    29a8:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <twi_slarw>
    29ac:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <twi_slarw>
    29b0:	88 0f       	add	r24, r24
    29b2:	89 2b       	or	r24, r25
    29b4:	80 93 0b 05 	sts	0x050B, r24	; 0x80050b <twi_slarw>
    29b8:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <twi_inRepStart>
    29bc:	81 30       	cpi	r24, 0x01	; 1
    29be:	61 f4       	brne	.+24     	; 0x29d8 <twi_readFrom+0x58>
    29c0:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <twi_inRepStart>
    29c4:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <twi_slarw>
    29c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    29cc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    29d0:	83 fd       	sbrc	r24, 3
    29d2:	f8 cf       	rjmp	.-16     	; 0x29c4 <twi_readFrom+0x44>
    29d4:	85 ec       	ldi	r24, 0xC5	; 197
    29d6:	01 c0       	rjmp	.+2      	; 0x29da <twi_readFrom+0x5a>
    29d8:	85 ee       	ldi	r24, 0xE5	; 229
    29da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    29de:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <twi_state>
    29e2:	81 30       	cpi	r24, 0x01	; 1
    29e4:	e1 f3       	breq	.-8      	; 0x29de <twi_readFrom+0x5e>
    29e6:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <twi_masterBufferIndex>
    29ea:	84 17       	cp	r24, r20
    29ec:	10 f4       	brcc	.+4      	; 0x29f2 <twi_readFrom+0x72>
    29ee:	40 91 e4 04 	lds	r20, 0x04E4	; 0x8004e4 <twi_masterBufferIndex>
    29f2:	a5 ee       	ldi	r26, 0xE5	; 229
    29f4:	b4 e0       	ldi	r27, 0x04	; 4
    29f6:	96 2f       	mov	r25, r22
    29f8:	fb 01       	movw	r30, r22
    29fa:	8e 2f       	mov	r24, r30
    29fc:	89 1b       	sub	r24, r25
    29fe:	84 17       	cp	r24, r20
    2a00:	18 f4       	brcc	.+6      	; 0x2a08 <twi_readFrom+0x88>
    2a02:	8d 91       	ld	r24, X+
    2a04:	81 93       	st	Z+, r24
    2a06:	f9 cf       	rjmp	.-14     	; 0x29fa <twi_readFrom+0x7a>
    2a08:	84 2f       	mov	r24, r20
    2a0a:	08 95       	ret
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	08 95       	ret

00002a10 <twi_writeTo>:
    2a10:	0f 93       	push	r16
    2a12:	41 32       	cpi	r20, 0x21	; 33
    2a14:	08 f0       	brcs	.+2      	; 0x2a18 <twi_writeTo+0x8>
    2a16:	4a c0       	rjmp	.+148    	; 0x2aac <twi_writeTo+0x9c>
    2a18:	90 91 0c 05 	lds	r25, 0x050C	; 0x80050c <twi_state>
    2a1c:	91 11       	cpse	r25, r1
    2a1e:	fc cf       	rjmp	.-8      	; 0x2a18 <twi_writeTo+0x8>
    2a20:	32 e0       	ldi	r19, 0x02	; 2
    2a22:	30 93 0c 05 	sts	0x050C, r19	; 0x80050c <twi_state>
    2a26:	00 93 0a 05 	sts	0x050A, r16	; 0x80050a <twi_sendStop>
    2a2a:	3f ef       	ldi	r19, 0xFF	; 255
    2a2c:	30 93 9f 04 	sts	0x049F, r19	; 0x80049f <twi_error>
    2a30:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <twi_masterBufferIndex>
    2a34:	40 93 e3 04 	sts	0x04E3, r20	; 0x8004e3 <twi_masterBufferLength>
    2a38:	56 2f       	mov	r21, r22
    2a3a:	a5 ee       	ldi	r26, 0xE5	; 229
    2a3c:	b4 e0       	ldi	r27, 0x04	; 4
    2a3e:	fb 01       	movw	r30, r22
    2a40:	3e 2f       	mov	r19, r30
    2a42:	35 1b       	sub	r19, r21
    2a44:	34 17       	cp	r19, r20
    2a46:	18 f4       	brcc	.+6      	; 0x2a4e <twi_writeTo+0x3e>
    2a48:	31 91       	ld	r19, Z+
    2a4a:	3d 93       	st	X+, r19
    2a4c:	f9 cf       	rjmp	.-14     	; 0x2a40 <twi_writeTo+0x30>
    2a4e:	10 92 0b 05 	sts	0x050B, r1	; 0x80050b <twi_slarw>
    2a52:	30 91 0b 05 	lds	r19, 0x050B	; 0x80050b <twi_slarw>
    2a56:	88 0f       	add	r24, r24
    2a58:	83 2b       	or	r24, r19
    2a5a:	80 93 0b 05 	sts	0x050B, r24	; 0x80050b <twi_slarw>
    2a5e:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <twi_inRepStart>
    2a62:	81 30       	cpi	r24, 0x01	; 1
    2a64:	61 f4       	brne	.+24     	; 0x2a7e <twi_writeTo+0x6e>
    2a66:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <twi_inRepStart>
    2a6a:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <twi_slarw>
    2a6e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2a72:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2a76:	83 fd       	sbrc	r24, 3
    2a78:	f8 cf       	rjmp	.-16     	; 0x2a6a <twi_writeTo+0x5a>
    2a7a:	85 ec       	ldi	r24, 0xC5	; 197
    2a7c:	01 c0       	rjmp	.+2      	; 0x2a80 <twi_writeTo+0x70>
    2a7e:	85 ee       	ldi	r24, 0xE5	; 229
    2a80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2a84:	22 23       	and	r18, r18
    2a86:	21 f0       	breq	.+8      	; 0x2a90 <twi_writeTo+0x80>
    2a88:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <twi_state>
    2a8c:	82 30       	cpi	r24, 0x02	; 2
    2a8e:	d1 f3       	breq	.-12     	; 0x2a84 <twi_writeTo+0x74>
    2a90:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <twi_error>
    2a94:	8f 3f       	cpi	r24, 0xFF	; 255
    2a96:	79 f0       	breq	.+30     	; 0x2ab6 <twi_writeTo+0xa6>
    2a98:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <twi_error>
    2a9c:	80 32       	cpi	r24, 0x20	; 32
    2a9e:	41 f0       	breq	.+16     	; 0x2ab0 <twi_writeTo+0xa0>
    2aa0:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <twi_error>
    2aa4:	80 33       	cpi	r24, 0x30	; 48
    2aa6:	31 f0       	breq	.+12     	; 0x2ab4 <twi_writeTo+0xa4>
    2aa8:	94 e0       	ldi	r25, 0x04	; 4
    2aaa:	05 c0       	rjmp	.+10     	; 0x2ab6 <twi_writeTo+0xa6>
    2aac:	91 e0       	ldi	r25, 0x01	; 1
    2aae:	03 c0       	rjmp	.+6      	; 0x2ab6 <twi_writeTo+0xa6>
    2ab0:	92 e0       	ldi	r25, 0x02	; 2
    2ab2:	01 c0       	rjmp	.+2      	; 0x2ab6 <twi_writeTo+0xa6>
    2ab4:	93 e0       	ldi	r25, 0x03	; 3
    2ab6:	89 2f       	mov	r24, r25
    2ab8:	0f 91       	pop	r16
    2aba:	08 95       	ret

00002abc <twi_transmit>:
    2abc:	40 91 c1 04 	lds	r20, 0x04C1	; 0x8004c1 <twi_txBufferLength>
    2ac0:	26 2f       	mov	r18, r22
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	24 0f       	add	r18, r20
    2ac6:	31 1d       	adc	r19, r1
    2ac8:	21 32       	cpi	r18, 0x21	; 33
    2aca:	31 05       	cpc	r19, r1
    2acc:	dc f4       	brge	.+54     	; 0x2b04 <twi_transmit+0x48>
    2ace:	20 91 0c 05 	lds	r18, 0x050C	; 0x80050c <twi_state>
    2ad2:	24 30       	cpi	r18, 0x04	; 4
    2ad4:	c9 f4       	brne	.+50     	; 0x2b08 <twi_transmit+0x4c>
    2ad6:	fc 01       	movw	r30, r24
    2ad8:	80 e0       	ldi	r24, 0x00	; 0
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	86 17       	cp	r24, r22
    2ade:	58 f4       	brcc	.+22     	; 0x2af6 <twi_transmit+0x3a>
    2ae0:	30 91 c1 04 	lds	r19, 0x04C1	; 0x8004c1 <twi_txBufferLength>
    2ae4:	21 91       	ld	r18, Z+
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	ad 53       	subi	r26, 0x3D	; 61
    2aea:	bb 4f       	sbci	r27, 0xFB	; 251
    2aec:	a3 0f       	add	r26, r19
    2aee:	b1 1d       	adc	r27, r1
    2af0:	2c 93       	st	X, r18
    2af2:	01 96       	adiw	r24, 0x01	; 1
    2af4:	f3 cf       	rjmp	.-26     	; 0x2adc <twi_transmit+0x20>
    2af6:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <twi_txBufferLength>
    2afa:	68 0f       	add	r22, r24
    2afc:	60 93 c1 04 	sts	0x04C1, r22	; 0x8004c1 <twi_txBufferLength>
    2b00:	80 e0       	ldi	r24, 0x00	; 0
    2b02:	08 95       	ret
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	08 95       	ret
    2b08:	82 e0       	ldi	r24, 0x02	; 2
    2b0a:	08 95       	ret

00002b0c <twi_attachSlaveRxEvent>:
    2b0c:	90 93 06 05 	sts	0x0506, r25	; 0x800506 <twi_onSlaveReceive+0x1>
    2b10:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <twi_onSlaveReceive>
    2b14:	08 95       	ret

00002b16 <twi_attachSlaveTxEvent>:
    2b16:	90 93 08 05 	sts	0x0508, r25	; 0x800508 <twi_onSlaveTransmit+0x1>
    2b1a:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <twi_onSlaveTransmit>
    2b1e:	08 95       	ret

00002b20 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2b20:	85 ed       	ldi	r24, 0xD5	; 213
    2b22:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2b26:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2b2a:	84 fd       	sbrc	r24, 4
    2b2c:	fc cf       	rjmp	.-8      	; 0x2b26 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2b2e:	10 92 0c 05 	sts	0x050C, r1	; 0x80050c <twi_state>
    2b32:	08 95       	ret

00002b34 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2b34:	85 ec       	ldi	r24, 0xC5	; 197
    2b36:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    2b3a:	10 92 0c 05 	sts	0x050C, r1	; 0x80050c <twi_state>
    2b3e:	08 95       	ret

00002b40 <__vector_36>:
}

ISR(TWI_vect)
{
    2b40:	1f 92       	push	r1
    2b42:	0f 92       	push	r0
    2b44:	0f b6       	in	r0, 0x3f	; 63
    2b46:	0f 92       	push	r0
    2b48:	11 24       	eor	r1, r1
    2b4a:	2f 93       	push	r18
    2b4c:	3f 93       	push	r19
    2b4e:	4f 93       	push	r20
    2b50:	5f 93       	push	r21
    2b52:	6f 93       	push	r22
    2b54:	7f 93       	push	r23
    2b56:	8f 93       	push	r24
    2b58:	9f 93       	push	r25
    2b5a:	af 93       	push	r26
    2b5c:	bf 93       	push	r27
    2b5e:	ef 93       	push	r30
    2b60:	ff 93       	push	r31
  switch(TW_STATUS){
    2b62:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2b66:	88 7f       	andi	r24, 0xF8	; 248
    2b68:	80 36       	cpi	r24, 0x60	; 96
    2b6a:	09 f4       	brne	.+2      	; 0x2b6e <__vector_36+0x2e>
    2b6c:	9e c0       	rjmp	.+316    	; 0x2caa <__vector_36+0x16a>
    2b6e:	78 f5       	brcc	.+94     	; 0x2bce <__vector_36+0x8e>
    2b70:	88 32       	cpi	r24, 0x28	; 40
    2b72:	09 f4       	brne	.+2      	; 0x2b76 <__vector_36+0x36>
    2b74:	5d c0       	rjmp	.+186    	; 0x2c30 <__vector_36+0xf0>
    2b76:	90 f4       	brcc	.+36     	; 0x2b9c <__vector_36+0x5c>
    2b78:	80 31       	cpi	r24, 0x10	; 16
    2b7a:	09 f4       	brne	.+2      	; 0x2b7e <__vector_36+0x3e>
    2b7c:	56 c0       	rjmp	.+172    	; 0x2c2a <__vector_36+0xea>
    2b7e:	38 f4       	brcc	.+14     	; 0x2b8e <__vector_36+0x4e>
    2b80:	88 23       	and	r24, r24
    2b82:	09 f4       	brne	.+2      	; 0x2b86 <__vector_36+0x46>
    2b84:	f5 c0       	rjmp	.+490    	; 0x2d70 <__vector_36+0x230>
    2b86:	88 30       	cpi	r24, 0x08	; 8
    2b88:	09 f4       	brne	.+2      	; 0x2b8c <__vector_36+0x4c>
    2b8a:	4f c0       	rjmp	.+158    	; 0x2c2a <__vector_36+0xea>
    2b8c:	f5 c0       	rjmp	.+490    	; 0x2d78 <__vector_36+0x238>
    2b8e:	88 31       	cpi	r24, 0x18	; 24
    2b90:	09 f4       	brne	.+2      	; 0x2b94 <__vector_36+0x54>
    2b92:	4e c0       	rjmp	.+156    	; 0x2c30 <__vector_36+0xf0>
    2b94:	80 32       	cpi	r24, 0x20	; 32
    2b96:	09 f4       	brne	.+2      	; 0x2b9a <__vector_36+0x5a>
    2b98:	5f c0       	rjmp	.+190    	; 0x2c58 <__vector_36+0x118>
    2b9a:	ee c0       	rjmp	.+476    	; 0x2d78 <__vector_36+0x238>
    2b9c:	80 34       	cpi	r24, 0x40	; 64
    2b9e:	09 f4       	brne	.+2      	; 0x2ba2 <__vector_36+0x62>
    2ba0:	6a c0       	rjmp	.+212    	; 0x2c76 <__vector_36+0x136>
    2ba2:	58 f4       	brcc	.+22     	; 0x2bba <__vector_36+0x7a>
    2ba4:	80 33       	cpi	r24, 0x30	; 48
    2ba6:	09 f4       	brne	.+2      	; 0x2baa <__vector_36+0x6a>
    2ba8:	57 c0       	rjmp	.+174    	; 0x2c58 <__vector_36+0x118>
    2baa:	88 33       	cpi	r24, 0x38	; 56
    2bac:	09 f0       	breq	.+2      	; 0x2bb0 <__vector_36+0x70>
    2bae:	e4 c0       	rjmp	.+456    	; 0x2d78 <__vector_36+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2bb0:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <twi_error>
      twi_releaseBus();
    2bb4:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <twi_releaseBus>
      break;
    2bb8:	df c0       	rjmp	.+446    	; 0x2d78 <__vector_36+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2bba:	80 35       	cpi	r24, 0x50	; 80
    2bbc:	09 f4       	brne	.+2      	; 0x2bc0 <__vector_36+0x80>
    2bbe:	4f c0       	rjmp	.+158    	; 0x2c5e <__vector_36+0x11e>
    2bc0:	88 35       	cpi	r24, 0x58	; 88
    2bc2:	09 f4       	brne	.+2      	; 0x2bc6 <__vector_36+0x86>
    2bc4:	5d c0       	rjmp	.+186    	; 0x2c80 <__vector_36+0x140>
    2bc6:	88 34       	cpi	r24, 0x48	; 72
    2bc8:	09 f0       	breq	.+2      	; 0x2bcc <__vector_36+0x8c>
    2bca:	d6 c0       	rjmp	.+428    	; 0x2d78 <__vector_36+0x238>
    2bcc:	d3 c0       	rjmp	.+422    	; 0x2d74 <__vector_36+0x234>
    2bce:	88 39       	cpi	r24, 0x98	; 152
    2bd0:	09 f4       	brne	.+2      	; 0x2bd4 <__vector_36+0x94>
    2bd2:	c4 c0       	rjmp	.+392    	; 0x2d5c <__vector_36+0x21c>
    2bd4:	a8 f4       	brcc	.+42     	; 0x2c00 <__vector_36+0xc0>
    2bd6:	88 37       	cpi	r24, 0x78	; 120
    2bd8:	09 f4       	brne	.+2      	; 0x2bdc <__vector_36+0x9c>
    2bda:	67 c0       	rjmp	.+206    	; 0x2caa <__vector_36+0x16a>
    2bdc:	38 f4       	brcc	.+14     	; 0x2bec <__vector_36+0xac>
    2bde:	88 36       	cpi	r24, 0x68	; 104
    2be0:	09 f4       	brne	.+2      	; 0x2be4 <__vector_36+0xa4>
    2be2:	63 c0       	rjmp	.+198    	; 0x2caa <__vector_36+0x16a>
    2be4:	80 37       	cpi	r24, 0x70	; 112
    2be6:	09 f4       	brne	.+2      	; 0x2bea <__vector_36+0xaa>
    2be8:	60 c0       	rjmp	.+192    	; 0x2caa <__vector_36+0x16a>
    2bea:	c6 c0       	rjmp	.+396    	; 0x2d78 <__vector_36+0x238>
    2bec:	88 38       	cpi	r24, 0x88	; 136
    2bee:	09 f4       	brne	.+2      	; 0x2bf2 <__vector_36+0xb2>
    2bf0:	b5 c0       	rjmp	.+362    	; 0x2d5c <__vector_36+0x21c>
    2bf2:	80 39       	cpi	r24, 0x90	; 144
    2bf4:	09 f4       	brne	.+2      	; 0x2bf8 <__vector_36+0xb8>
    2bf6:	5f c0       	rjmp	.+190    	; 0x2cb6 <__vector_36+0x176>
    2bf8:	80 38       	cpi	r24, 0x80	; 128
    2bfa:	09 f0       	breq	.+2      	; 0x2bfe <__vector_36+0xbe>
    2bfc:	bd c0       	rjmp	.+378    	; 0x2d78 <__vector_36+0x238>
    2bfe:	5b c0       	rjmp	.+182    	; 0x2cb6 <__vector_36+0x176>
    2c00:	80 3b       	cpi	r24, 0xB0	; 176
    2c02:	09 f4       	brne	.+2      	; 0x2c06 <__vector_36+0xc6>
    2c04:	83 c0       	rjmp	.+262    	; 0x2d0c <__vector_36+0x1cc>
    2c06:	38 f4       	brcc	.+14     	; 0x2c16 <__vector_36+0xd6>
    2c08:	80 3a       	cpi	r24, 0xA0	; 160
    2c0a:	09 f4       	brne	.+2      	; 0x2c0e <__vector_36+0xce>
    2c0c:	66 c0       	rjmp	.+204    	; 0x2cda <__vector_36+0x19a>
    2c0e:	88 3a       	cpi	r24, 0xA8	; 168
    2c10:	09 f4       	brne	.+2      	; 0x2c14 <__vector_36+0xd4>
    2c12:	7c c0       	rjmp	.+248    	; 0x2d0c <__vector_36+0x1cc>
    2c14:	b1 c0       	rjmp	.+354    	; 0x2d78 <__vector_36+0x238>
    2c16:	80 3c       	cpi	r24, 0xC0	; 192
    2c18:	09 f4       	brne	.+2      	; 0x2c1c <__vector_36+0xdc>
    2c1a:	a4 c0       	rjmp	.+328    	; 0x2d64 <__vector_36+0x224>
    2c1c:	88 3c       	cpi	r24, 0xC8	; 200
    2c1e:	09 f4       	brne	.+2      	; 0x2c22 <__vector_36+0xe2>
    2c20:	a1 c0       	rjmp	.+322    	; 0x2d64 <__vector_36+0x224>
    2c22:	88 3b       	cpi	r24, 0xB8	; 184
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <__vector_36+0xe8>
    2c26:	87 c0       	rjmp	.+270    	; 0x2d36 <__vector_36+0x1f6>
    2c28:	a7 c0       	rjmp	.+334    	; 0x2d78 <__vector_36+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2c2a:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <twi_slarw>
    2c2e:	10 c0       	rjmp	.+32     	; 0x2c50 <__vector_36+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2c30:	90 91 e4 04 	lds	r25, 0x04E4	; 0x8004e4 <twi_masterBufferIndex>
    2c34:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <twi_masterBufferLength>
    2c38:	98 17       	cp	r25, r24
    2c3a:	70 f5       	brcc	.+92     	; 0x2c98 <__vector_36+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2c3c:	e0 91 e4 04 	lds	r30, 0x04E4	; 0x8004e4 <twi_masterBufferIndex>
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	8e 0f       	add	r24, r30
    2c44:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <twi_masterBufferIndex>
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	eb 51       	subi	r30, 0x1B	; 27
    2c4c:	fb 4f       	sbci	r31, 0xFB	; 251
    2c4e:	80 81       	ld	r24, Z
    2c50:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2c54:	85 ec       	ldi	r24, 0xC5	; 197
    2c56:	83 c0       	rjmp	.+262    	; 0x2d5e <__vector_36+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2c58:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <twi_error>
    2c5c:	8b c0       	rjmp	.+278    	; 0x2d74 <__vector_36+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2c5e:	e0 91 e4 04 	lds	r30, 0x04E4	; 0x8004e4 <twi_masterBufferIndex>
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	8e 0f       	add	r24, r30
    2c66:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <twi_masterBufferIndex>
    2c6a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	eb 51       	subi	r30, 0x1B	; 27
    2c72:	fb 4f       	sbci	r31, 0xFB	; 251
    2c74:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2c76:	90 91 e4 04 	lds	r25, 0x04E4	; 0x8004e4 <twi_masterBufferIndex>
    2c7a:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <twi_masterBufferLength>
    2c7e:	6b c0       	rjmp	.+214    	; 0x2d56 <__vector_36+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2c80:	e0 91 e4 04 	lds	r30, 0x04E4	; 0x8004e4 <twi_masterBufferIndex>
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	8e 0f       	add	r24, r30
    2c88:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <twi_masterBufferIndex>
    2c8c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2c90:	f0 e0       	ldi	r31, 0x00	; 0
    2c92:	eb 51       	subi	r30, 0x1B	; 27
    2c94:	fb 4f       	sbci	r31, 0xFB	; 251
    2c96:	80 83       	st	Z, r24
	if (twi_sendStop)
    2c98:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <twi_sendStop>
    2c9c:	81 11       	cpse	r24, r1
    2c9e:	6a c0       	rjmp	.+212    	; 0x2d74 <__vector_36+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2ca6:	84 ea       	ldi	r24, 0xA4	; 164
    2ca8:	5e c0       	rjmp	.+188    	; 0x2d66 <__vector_36+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2caa:	83 e0       	ldi	r24, 0x03	; 3
    2cac:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2cb0:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <twi_rxBufferIndex>
    2cb4:	cf cf       	rjmp	.-98     	; 0x2c54 <__vector_36+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2cb6:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <twi_rxBufferIndex>
    2cba:	80 32       	cpi	r24, 0x20	; 32
    2cbc:	08 f0       	brcs	.+2      	; 0x2cc0 <__vector_36+0x180>
    2cbe:	4e c0       	rjmp	.+156    	; 0x2d5c <__vector_36+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2cc0:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <twi_rxBufferIndex>
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	8e 0f       	add	r24, r30
    2cc8:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <twi_rxBufferIndex>
    2ccc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	ef 55       	subi	r30, 0x5F	; 95
    2cd4:	fb 4f       	sbci	r31, 0xFB	; 251
    2cd6:	80 83       	st	Z, r24
    2cd8:	bd cf       	rjmp	.-134    	; 0x2c54 <__vector_36+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2cda:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2cde:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <twi_rxBufferIndex>
    2ce2:	80 32       	cpi	r24, 0x20	; 32
    2ce4:	30 f4       	brcc	.+12     	; 0x2cf2 <__vector_36+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2ce6:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <twi_rxBufferIndex>
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	ef 55       	subi	r30, 0x5F	; 95
    2cee:	fb 4f       	sbci	r31, 0xFB	; 251
    2cf0:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2cf2:	60 91 a0 04 	lds	r22, 0x04A0	; 0x8004a0 <twi_rxBufferIndex>
    2cf6:	70 e0       	ldi	r23, 0x00	; 0
    2cf8:	e0 91 05 05 	lds	r30, 0x0505	; 0x800505 <twi_onSlaveReceive>
    2cfc:	f0 91 06 05 	lds	r31, 0x0506	; 0x800506 <twi_onSlaveReceive+0x1>
    2d00:	81 ea       	ldi	r24, 0xA1	; 161
    2d02:	94 e0       	ldi	r25, 0x04	; 4
    2d04:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2d06:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <twi_rxBufferIndex>
      break;
    2d0a:	36 c0       	rjmp	.+108    	; 0x2d78 <__vector_36+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2d0c:	84 e0       	ldi	r24, 0x04	; 4
    2d0e:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2d12:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2d16:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2d1a:	e0 91 07 05 	lds	r30, 0x0507	; 0x800507 <twi_onSlaveTransmit>
    2d1e:	f0 91 08 05 	lds	r31, 0x0508	; 0x800508 <twi_onSlaveTransmit+0x1>
    2d22:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2d24:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <twi_txBufferLength>
    2d28:	81 11       	cpse	r24, r1
    2d2a:	05 c0       	rjmp	.+10     	; 0x2d36 <__vector_36+0x1f6>
        twi_txBufferLength = 1;
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2d32:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2d36:	e0 91 c2 04 	lds	r30, 0x04C2	; 0x8004c2 <twi_txBufferIndex>
    2d3a:	81 e0       	ldi	r24, 0x01	; 1
    2d3c:	8e 0f       	add	r24, r30
    2d3e:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <twi_txBufferIndex>
    2d42:	f0 e0       	ldi	r31, 0x00	; 0
    2d44:	ed 53       	subi	r30, 0x3D	; 61
    2d46:	fb 4f       	sbci	r31, 0xFB	; 251
    2d48:	80 81       	ld	r24, Z
    2d4a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2d4e:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <twi_txBufferIndex>
    2d52:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <twi_txBufferLength>
    2d56:	98 17       	cp	r25, r24
    2d58:	08 f4       	brcc	.+2      	; 0x2d5c <__vector_36+0x21c>
    2d5a:	7c cf       	rjmp	.-264    	; 0x2c54 <__vector_36+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2d5c:	85 e8       	ldi	r24, 0x85	; 133
    2d5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2d62:	0a c0       	rjmp	.+20     	; 0x2d78 <__vector_36+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2d64:	85 ec       	ldi	r24, 0xC5	; 197
    2d66:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2d6a:	10 92 0c 05 	sts	0x050C, r1	; 0x80050c <twi_state>
      break;
    2d6e:	04 c0       	rjmp	.+8      	; 0x2d78 <__vector_36+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2d70:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <twi_error>
      twi_stop();
    2d74:	0e 94 90 15 	call	0x2b20	; 0x2b20 <twi_stop>
      break;
  }
}
    2d78:	ff 91       	pop	r31
    2d7a:	ef 91       	pop	r30
    2d7c:	bf 91       	pop	r27
    2d7e:	af 91       	pop	r26
    2d80:	9f 91       	pop	r25
    2d82:	8f 91       	pop	r24
    2d84:	7f 91       	pop	r23
    2d86:	6f 91       	pop	r22
    2d88:	5f 91       	pop	r21
    2d8a:	4f 91       	pop	r20
    2d8c:	3f 91       	pop	r19
    2d8e:	2f 91       	pop	r18
    2d90:	0f 90       	pop	r0
    2d92:	0f be       	out	0x3f, r0	; 63
    2d94:	0f 90       	pop	r0
    2d96:	1f 90       	pop	r1
    2d98:	18 95       	reti

00002d9a <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2d9a:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <_ZN7TwoWire14rxBufferLengthE>
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	20 91 42 05 	lds	r18, 0x0542	; 0x800542 <_ZN7TwoWire13rxBufferIndexE>
    2da4:	82 1b       	sub	r24, r18
    2da6:	91 09       	sbc	r25, r1
    2da8:	08 95       	ret

00002daa <_ZN7TwoWire4readEv>:
    2daa:	90 91 42 05 	lds	r25, 0x0542	; 0x800542 <_ZN7TwoWire13rxBufferIndexE>
    2dae:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <_ZN7TwoWire14rxBufferLengthE>
    2db2:	98 17       	cp	r25, r24
    2db4:	50 f4       	brcc	.+20     	; 0x2dca <_ZN7TwoWire4readEv+0x20>
    2db6:	e9 2f       	mov	r30, r25
    2db8:	f0 e0       	ldi	r31, 0x00	; 0
    2dba:	ed 5b       	subi	r30, 0xBD	; 189
    2dbc:	fa 4f       	sbci	r31, 0xFA	; 250
    2dbe:	20 81       	ld	r18, Z
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	9f 5f       	subi	r25, 0xFF	; 255
    2dc4:	90 93 42 05 	sts	0x0542, r25	; 0x800542 <_ZN7TwoWire13rxBufferIndexE>
    2dc8:	02 c0       	rjmp	.+4      	; 0x2dce <_ZN7TwoWire4readEv+0x24>
    2dca:	2f ef       	ldi	r18, 0xFF	; 255
    2dcc:	3f ef       	ldi	r19, 0xFF	; 255
    2dce:	c9 01       	movw	r24, r18
    2dd0:	08 95       	ret

00002dd2 <_ZN7TwoWire4peekEv>:
    2dd2:	e0 91 42 05 	lds	r30, 0x0542	; 0x800542 <_ZN7TwoWire13rxBufferIndexE>
    2dd6:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <_ZN7TwoWire14rxBufferLengthE>
    2dda:	e8 17       	cp	r30, r24
    2ddc:	30 f4       	brcc	.+12     	; 0x2dea <_ZN7TwoWire4peekEv+0x18>
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	ed 5b       	subi	r30, 0xBD	; 189
    2de2:	fa 4f       	sbci	r31, 0xFA	; 250
    2de4:	80 81       	ld	r24, Z
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	08 95       	ret
    2dea:	8f ef       	ldi	r24, 0xFF	; 255
    2dec:	9f ef       	ldi	r25, 0xFF	; 255
    2dee:	08 95       	ret

00002df0 <_ZN7TwoWire5flushEv>:
    2df0:	08 95       	ret

00002df2 <_ZN7TwoWire16onReceiveServiceEPhi>:
    2df2:	cf 93       	push	r28
    2df4:	df 93       	push	r29
    2df6:	ec 01       	movw	r28, r24
    2df8:	e0 91 19 05 	lds	r30, 0x0519	; 0x800519 <_ZN7TwoWire14user_onReceiveE>
    2dfc:	f0 91 1a 05 	lds	r31, 0x051A	; 0x80051a <_ZN7TwoWire14user_onReceiveE+0x1>
    2e00:	30 97       	sbiw	r30, 0x00	; 0
    2e02:	f1 f0       	breq	.+60     	; 0x2e40 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2e04:	90 91 42 05 	lds	r25, 0x0542	; 0x800542 <_ZN7TwoWire13rxBufferIndexE>
    2e08:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <_ZN7TwoWire14rxBufferLengthE>
    2e0c:	98 17       	cp	r25, r24
    2e0e:	c0 f0       	brcs	.+48     	; 0x2e40 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	29 2f       	mov	r18, r25
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	26 17       	cp	r18, r22
    2e18:	37 07       	cpc	r19, r23
    2e1a:	54 f4       	brge	.+20     	; 0x2e30 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2e1c:	de 01       	movw	r26, r28
    2e1e:	a2 0f       	add	r26, r18
    2e20:	b3 1f       	adc	r27, r19
    2e22:	4c 91       	ld	r20, X
    2e24:	d9 01       	movw	r26, r18
    2e26:	ad 5b       	subi	r26, 0xBD	; 189
    2e28:	ba 4f       	sbci	r27, 0xFA	; 250
    2e2a:	4c 93       	st	X, r20
    2e2c:	9f 5f       	subi	r25, 0xFF	; 255
    2e2e:	f1 cf       	rjmp	.-30     	; 0x2e12 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2e30:	10 92 42 05 	sts	0x0542, r1	; 0x800542 <_ZN7TwoWire13rxBufferIndexE>
    2e34:	60 93 41 05 	sts	0x0541, r22	; 0x800541 <_ZN7TwoWire14rxBufferLengthE>
    2e38:	cb 01       	movw	r24, r22
    2e3a:	df 91       	pop	r29
    2e3c:	cf 91       	pop	r28
    2e3e:	09 94       	ijmp
    2e40:	df 91       	pop	r29
    2e42:	cf 91       	pop	r28
    2e44:	08 95       	ret

00002e46 <_ZN7TwoWire16onRequestServiceEv>:
    2e46:	e0 91 1b 05 	lds	r30, 0x051B	; 0x80051b <_ZN7TwoWire14user_onRequestE>
    2e4a:	f0 91 1c 05 	lds	r31, 0x051C	; 0x80051c <_ZN7TwoWire14user_onRequestE+0x1>
    2e4e:	30 97       	sbiw	r30, 0x00	; 0
    2e50:	29 f0       	breq	.+10     	; 0x2e5c <_ZN7TwoWire16onRequestServiceEv+0x16>
    2e52:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <_ZN7TwoWire13txBufferIndexE>
    2e56:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <_ZN7TwoWire14txBufferLengthE>
    2e5a:	09 94       	ijmp
    2e5c:	08 95       	ret

00002e5e <_ZN7TwoWire5writeEPKhj>:
    2e5e:	cf 92       	push	r12
    2e60:	df 92       	push	r13
    2e62:	ef 92       	push	r14
    2e64:	ff 92       	push	r15
    2e66:	0f 93       	push	r16
    2e68:	1f 93       	push	r17
    2e6a:	cf 93       	push	r28
    2e6c:	df 93       	push	r29
    2e6e:	7c 01       	movw	r14, r24
    2e70:	cb 01       	movw	r24, r22
    2e72:	8a 01       	movw	r16, r20
    2e74:	20 91 1d 05 	lds	r18, 0x051D	; 0x80051d <_ZN7TwoWire12transmittingE>
    2e78:	22 23       	and	r18, r18
    2e7a:	89 f0       	breq	.+34     	; 0x2e9e <_ZN7TwoWire5writeEPKhj+0x40>
    2e7c:	eb 01       	movw	r28, r22
    2e7e:	6b 01       	movw	r12, r22
    2e80:	c4 0e       	add	r12, r20
    2e82:	d5 1e       	adc	r13, r21
    2e84:	cc 15       	cp	r28, r12
    2e86:	dd 05       	cpc	r29, r13
    2e88:	69 f0       	breq	.+26     	; 0x2ea4 <_ZN7TwoWire5writeEPKhj+0x46>
    2e8a:	69 91       	ld	r22, Y+
    2e8c:	d7 01       	movw	r26, r14
    2e8e:	ed 91       	ld	r30, X+
    2e90:	fc 91       	ld	r31, X
    2e92:	01 90       	ld	r0, Z+
    2e94:	f0 81       	ld	r31, Z
    2e96:	e0 2d       	mov	r30, r0
    2e98:	c7 01       	movw	r24, r14
    2e9a:	09 95       	icall
    2e9c:	f3 cf       	rjmp	.-26     	; 0x2e84 <_ZN7TwoWire5writeEPKhj+0x26>
    2e9e:	64 2f       	mov	r22, r20
    2ea0:	0e 94 5e 15 	call	0x2abc	; 0x2abc <twi_transmit>
    2ea4:	c8 01       	movw	r24, r16
    2ea6:	df 91       	pop	r29
    2ea8:	cf 91       	pop	r28
    2eaa:	1f 91       	pop	r17
    2eac:	0f 91       	pop	r16
    2eae:	ff 90       	pop	r15
    2eb0:	ef 90       	pop	r14
    2eb2:	df 90       	pop	r13
    2eb4:	cf 90       	pop	r12
    2eb6:	08 95       	ret

00002eb8 <_ZN7TwoWire5writeEh>:
    2eb8:	cf 93       	push	r28
    2eba:	df 93       	push	r29
    2ebc:	1f 92       	push	r1
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
    2ec2:	69 83       	std	Y+1, r22	; 0x01
    2ec4:	20 91 1d 05 	lds	r18, 0x051D	; 0x80051d <_ZN7TwoWire12transmittingE>
    2ec8:	22 23       	and	r18, r18
    2eca:	d1 f0       	breq	.+52     	; 0x2f00 <_ZN7TwoWire5writeEh+0x48>
    2ecc:	20 91 1e 05 	lds	r18, 0x051E	; 0x80051e <_ZN7TwoWire14txBufferLengthE>
    2ed0:	20 32       	cpi	r18, 0x20	; 32
    2ed2:	40 f0       	brcs	.+16     	; 0x2ee4 <_ZN7TwoWire5writeEh+0x2c>
    2ed4:	21 e0       	ldi	r18, 0x01	; 1
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	fc 01       	movw	r30, r24
    2eda:	33 83       	std	Z+3, r19	; 0x03
    2edc:	22 83       	std	Z+2, r18	; 0x02
    2ede:	80 e0       	ldi	r24, 0x00	; 0
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	15 c0       	rjmp	.+42     	; 0x2f0e <_ZN7TwoWire5writeEh+0x56>
    2ee4:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <_ZN7TwoWire13txBufferIndexE>
    2ee8:	e8 2f       	mov	r30, r24
    2eea:	f0 e0       	ldi	r31, 0x00	; 0
    2eec:	e0 5e       	subi	r30, 0xE0	; 224
    2eee:	fa 4f       	sbci	r31, 0xFA	; 250
    2ef0:	99 81       	ldd	r25, Y+1	; 0x01
    2ef2:	90 83       	st	Z, r25
    2ef4:	8f 5f       	subi	r24, 0xFF	; 255
    2ef6:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <_ZN7TwoWire13txBufferIndexE>
    2efa:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <_ZN7TwoWire14txBufferLengthE>
    2efe:	05 c0       	rjmp	.+10     	; 0x2f0a <_ZN7TwoWire5writeEh+0x52>
    2f00:	61 e0       	ldi	r22, 0x01	; 1
    2f02:	ce 01       	movw	r24, r28
    2f04:	01 96       	adiw	r24, 0x01	; 1
    2f06:	0e 94 5e 15 	call	0x2abc	; 0x2abc <twi_transmit>
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	0f 90       	pop	r0
    2f10:	df 91       	pop	r29
    2f12:	cf 91       	pop	r28
    2f14:	08 95       	ret

00002f16 <_ZN7TwoWireC1Ev>:
    2f16:	fc 01       	movw	r30, r24
    2f18:	13 82       	std	Z+3, r1	; 0x03
    2f1a:	12 82       	std	Z+2, r1	; 0x02
    2f1c:	88 ee       	ldi	r24, 0xE8	; 232
    2f1e:	93 e0       	ldi	r25, 0x03	; 3
    2f20:	a0 e0       	ldi	r26, 0x00	; 0
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	84 83       	std	Z+4, r24	; 0x04
    2f26:	95 83       	std	Z+5, r25	; 0x05
    2f28:	a6 83       	std	Z+6, r26	; 0x06
    2f2a:	b7 83       	std	Z+7, r27	; 0x07
    2f2c:	87 ed       	ldi	r24, 0xD7	; 215
    2f2e:	92 e0       	ldi	r25, 0x02	; 2
    2f30:	91 83       	std	Z+1, r25	; 0x01
    2f32:	80 83       	st	Z, r24
    2f34:	08 95       	ret

00002f36 <_ZN7TwoWire5beginEv>:
    2f36:	10 92 42 05 	sts	0x0542, r1	; 0x800542 <_ZN7TwoWire13rxBufferIndexE>
    2f3a:	10 92 41 05 	sts	0x0541, r1	; 0x800541 <_ZN7TwoWire14rxBufferLengthE>
    2f3e:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <_ZN7TwoWire13txBufferIndexE>
    2f42:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <_ZN7TwoWire14txBufferLengthE>
    2f46:	0e 94 a2 14 	call	0x2944	; 0x2944 <twi_init>
    2f4a:	83 e2       	ldi	r24, 0x23	; 35
    2f4c:	97 e1       	ldi	r25, 0x17	; 23
    2f4e:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <twi_attachSlaveTxEvent>
    2f52:	89 ef       	ldi	r24, 0xF9	; 249
    2f54:	96 e1       	ldi	r25, 0x16	; 22
    2f56:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <twi_attachSlaveRxEvent>

00002f5a <_ZN7TwoWire17beginTransmissionEh>:
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <_ZN7TwoWire12transmittingE>
    2f60:	60 93 40 05 	sts	0x0540, r22	; 0x800540 <_ZN7TwoWire9txAddressE>
    2f64:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <_ZN7TwoWire13txBufferIndexE>
    2f68:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <_ZN7TwoWire14txBufferLengthE>
    2f6c:	08 95       	ret

00002f6e <_ZN7TwoWire15endTransmissionEh>:
    2f6e:	0f 93       	push	r16
    2f70:	06 2f       	mov	r16, r22
    2f72:	21 e0       	ldi	r18, 0x01	; 1
    2f74:	40 91 1e 05 	lds	r20, 0x051E	; 0x80051e <_ZN7TwoWire14txBufferLengthE>
    2f78:	60 e2       	ldi	r22, 0x20	; 32
    2f7a:	75 e0       	ldi	r23, 0x05	; 5
    2f7c:	80 91 40 05 	lds	r24, 0x0540	; 0x800540 <_ZN7TwoWire9txAddressE>
    2f80:	0e 94 08 15 	call	0x2a10	; 0x2a10 <twi_writeTo>
    2f84:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <_ZN7TwoWire13txBufferIndexE>
    2f88:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <_ZN7TwoWire14txBufferLengthE>
    2f8c:	10 92 1d 05 	sts	0x051D, r1	; 0x80051d <_ZN7TwoWire12transmittingE>
    2f90:	0f 91       	pop	r16
    2f92:	08 95       	ret

00002f94 <_ZN7TwoWire11requestFromEhhmhh>:
    2f94:	4f 92       	push	r4
    2f96:	5f 92       	push	r5
    2f98:	6f 92       	push	r6
    2f9a:	7f 92       	push	r7
    2f9c:	af 92       	push	r10
    2f9e:	bf 92       	push	r11
    2fa0:	cf 92       	push	r12
    2fa2:	ef 92       	push	r14
    2fa4:	ff 92       	push	r15
    2fa6:	0f 93       	push	r16
    2fa8:	1f 93       	push	r17
    2faa:	cf 93       	push	r28
    2fac:	df 93       	push	r29
    2fae:	5c 01       	movw	r10, r24
    2fb0:	f6 2e       	mov	r15, r22
    2fb2:	d4 2f       	mov	r29, r20
    2fb4:	28 01       	movw	r4, r16
    2fb6:	39 01       	movw	r6, r18
    2fb8:	ee 20       	and	r14, r14
    2fba:	21 f1       	breq	.+72     	; 0x3004 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2fbc:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN7TwoWire17beginTransmissionEh>
    2fc0:	ce 2d       	mov	r28, r14
    2fc2:	c4 30       	cpi	r28, 0x04	; 4
    2fc4:	08 f0       	brcs	.+2      	; 0x2fc8 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2fc6:	c3 e0       	ldi	r28, 0x03	; 3
    2fc8:	c1 50       	subi	r28, 0x01	; 1
    2fca:	c0 f0       	brcs	.+48     	; 0x2ffc <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2fcc:	28 e0       	ldi	r18, 0x08	; 8
    2fce:	c2 9f       	mul	r28, r18
    2fd0:	c0 01       	movw	r24, r0
    2fd2:	11 24       	eor	r1, r1
    2fd4:	a3 01       	movw	r20, r6
    2fd6:	92 01       	movw	r18, r4
    2fd8:	04 c0       	rjmp	.+8      	; 0x2fe2 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    2fda:	56 95       	lsr	r21
    2fdc:	47 95       	ror	r20
    2fde:	37 95       	ror	r19
    2fe0:	27 95       	ror	r18
    2fe2:	8a 95       	dec	r24
    2fe4:	d2 f7       	brpl	.-12     	; 0x2fda <_ZN7TwoWire11requestFromEhhmhh+0x46>
    2fe6:	ca 01       	movw	r24, r20
    2fe8:	b9 01       	movw	r22, r18
    2fea:	d5 01       	movw	r26, r10
    2fec:	ed 91       	ld	r30, X+
    2fee:	fc 91       	ld	r31, X
    2ff0:	01 90       	ld	r0, Z+
    2ff2:	f0 81       	ld	r31, Z
    2ff4:	e0 2d       	mov	r30, r0
    2ff6:	c5 01       	movw	r24, r10
    2ff8:	09 95       	icall
    2ffa:	e6 cf       	rjmp	.-52     	; 0x2fc8 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2ffc:	60 e0       	ldi	r22, 0x00	; 0
    2ffe:	c5 01       	movw	r24, r10
    3000:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <_ZN7TwoWire15endTransmissionEh>
    3004:	4d 2f       	mov	r20, r29
    3006:	d1 32       	cpi	r29, 0x21	; 33
    3008:	08 f0       	brcs	.+2      	; 0x300c <_ZN7TwoWire11requestFromEhhmhh+0x78>
    300a:	40 e2       	ldi	r20, 0x20	; 32
    300c:	2c 2d       	mov	r18, r12
    300e:	63 e4       	ldi	r22, 0x43	; 67
    3010:	75 e0       	ldi	r23, 0x05	; 5
    3012:	8f 2d       	mov	r24, r15
    3014:	0e 94 c0 14 	call	0x2980	; 0x2980 <twi_readFrom>
    3018:	10 92 42 05 	sts	0x0542, r1	; 0x800542 <_ZN7TwoWire13rxBufferIndexE>
    301c:	80 93 41 05 	sts	0x0541, r24	; 0x800541 <_ZN7TwoWire14rxBufferLengthE>
    3020:	df 91       	pop	r29
    3022:	cf 91       	pop	r28
    3024:	1f 91       	pop	r17
    3026:	0f 91       	pop	r16
    3028:	ff 90       	pop	r15
    302a:	ef 90       	pop	r14
    302c:	cf 90       	pop	r12
    302e:	bf 90       	pop	r11
    3030:	af 90       	pop	r10
    3032:	7f 90       	pop	r7
    3034:	6f 90       	pop	r6
    3036:	5f 90       	pop	r5
    3038:	4f 90       	pop	r4
    303a:	08 95       	ret

0000303c <_ZN7TwoWire11requestFromEhhh>:
    303c:	cf 92       	push	r12
    303e:	ef 92       	push	r14
    3040:	0f 93       	push	r16
    3042:	1f 93       	push	r17
    3044:	c2 2e       	mov	r12, r18
    3046:	e1 2c       	mov	r14, r1
    3048:	00 e0       	ldi	r16, 0x00	; 0
    304a:	10 e0       	ldi	r17, 0x00	; 0
    304c:	98 01       	movw	r18, r16
    304e:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <_ZN7TwoWire11requestFromEhhmhh>
    3052:	1f 91       	pop	r17
    3054:	0f 91       	pop	r16
    3056:	ef 90       	pop	r14
    3058:	cf 90       	pop	r12
    305a:	08 95       	ret

0000305c <_ZN7TwoWire11requestFromEii>:
    305c:	21 e0       	ldi	r18, 0x01	; 1
    305e:	0c 94 1e 18 	jmp	0x303c	; 0x303c <_ZN7TwoWire11requestFromEhhh>

00003062 <_ZN7TwoWire15endTransmissionEv>:
    3062:	61 e0       	ldi	r22, 0x01	; 1
    3064:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <_ZN7TwoWire15endTransmissionEh>

00003068 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3068:	8d e0       	ldi	r24, 0x0D	; 13
    306a:	95 e0       	ldi	r25, 0x05	; 5
    306c:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <_ZN7TwoWireC1Ev>

00003070 <__subsf3>:
    3070:	50 58       	subi	r21, 0x80	; 128

00003072 <__addsf3>:
    3072:	bb 27       	eor	r27, r27
    3074:	aa 27       	eor	r26, r26
    3076:	0e 94 50 18 	call	0x30a0	; 0x30a0 <__addsf3x>
    307a:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <__fp_round>
    307e:	0e 94 bc 19 	call	0x3378	; 0x3378 <__fp_pscA>
    3082:	38 f0       	brcs	.+14     	; 0x3092 <__addsf3+0x20>
    3084:	0e 94 c3 19 	call	0x3386	; 0x3386 <__fp_pscB>
    3088:	20 f0       	brcs	.+8      	; 0x3092 <__addsf3+0x20>
    308a:	39 f4       	brne	.+14     	; 0x309a <__addsf3+0x28>
    308c:	9f 3f       	cpi	r25, 0xFF	; 255
    308e:	19 f4       	brne	.+6      	; 0x3096 <__addsf3+0x24>
    3090:	26 f4       	brtc	.+8      	; 0x309a <__addsf3+0x28>
    3092:	0c 94 b9 19 	jmp	0x3372	; 0x3372 <__fp_nan>
    3096:	0e f4       	brtc	.+2      	; 0x309a <__addsf3+0x28>
    3098:	e0 95       	com	r30
    309a:	e7 fb       	bst	r30, 7
    309c:	0c 94 b3 19 	jmp	0x3366	; 0x3366 <__fp_inf>

000030a0 <__addsf3x>:
    30a0:	e9 2f       	mov	r30, r25
    30a2:	0e 94 db 19 	call	0x33b6	; 0x33b6 <__fp_split3>
    30a6:	58 f3       	brcs	.-42     	; 0x307e <__addsf3+0xc>
    30a8:	ba 17       	cp	r27, r26
    30aa:	62 07       	cpc	r22, r18
    30ac:	73 07       	cpc	r23, r19
    30ae:	84 07       	cpc	r24, r20
    30b0:	95 07       	cpc	r25, r21
    30b2:	20 f0       	brcs	.+8      	; 0x30bc <__addsf3x+0x1c>
    30b4:	79 f4       	brne	.+30     	; 0x30d4 <__addsf3x+0x34>
    30b6:	a6 f5       	brtc	.+104    	; 0x3120 <__addsf3x+0x80>
    30b8:	0c 94 fd 19 	jmp	0x33fa	; 0x33fa <__fp_zero>
    30bc:	0e f4       	brtc	.+2      	; 0x30c0 <__addsf3x+0x20>
    30be:	e0 95       	com	r30
    30c0:	0b 2e       	mov	r0, r27
    30c2:	ba 2f       	mov	r27, r26
    30c4:	a0 2d       	mov	r26, r0
    30c6:	0b 01       	movw	r0, r22
    30c8:	b9 01       	movw	r22, r18
    30ca:	90 01       	movw	r18, r0
    30cc:	0c 01       	movw	r0, r24
    30ce:	ca 01       	movw	r24, r20
    30d0:	a0 01       	movw	r20, r0
    30d2:	11 24       	eor	r1, r1
    30d4:	ff 27       	eor	r31, r31
    30d6:	59 1b       	sub	r21, r25
    30d8:	99 f0       	breq	.+38     	; 0x3100 <__addsf3x+0x60>
    30da:	59 3f       	cpi	r21, 0xF9	; 249
    30dc:	50 f4       	brcc	.+20     	; 0x30f2 <__addsf3x+0x52>
    30de:	50 3e       	cpi	r21, 0xE0	; 224
    30e0:	68 f1       	brcs	.+90     	; 0x313c <__addsf3x+0x9c>
    30e2:	1a 16       	cp	r1, r26
    30e4:	f0 40       	sbci	r31, 0x00	; 0
    30e6:	a2 2f       	mov	r26, r18
    30e8:	23 2f       	mov	r18, r19
    30ea:	34 2f       	mov	r19, r20
    30ec:	44 27       	eor	r20, r20
    30ee:	58 5f       	subi	r21, 0xF8	; 248
    30f0:	f3 cf       	rjmp	.-26     	; 0x30d8 <__addsf3x+0x38>
    30f2:	46 95       	lsr	r20
    30f4:	37 95       	ror	r19
    30f6:	27 95       	ror	r18
    30f8:	a7 95       	ror	r26
    30fa:	f0 40       	sbci	r31, 0x00	; 0
    30fc:	53 95       	inc	r21
    30fe:	c9 f7       	brne	.-14     	; 0x30f2 <__addsf3x+0x52>
    3100:	7e f4       	brtc	.+30     	; 0x3120 <__addsf3x+0x80>
    3102:	1f 16       	cp	r1, r31
    3104:	ba 0b       	sbc	r27, r26
    3106:	62 0b       	sbc	r22, r18
    3108:	73 0b       	sbc	r23, r19
    310a:	84 0b       	sbc	r24, r20
    310c:	ba f0       	brmi	.+46     	; 0x313c <__addsf3x+0x9c>
    310e:	91 50       	subi	r25, 0x01	; 1
    3110:	a1 f0       	breq	.+40     	; 0x313a <__addsf3x+0x9a>
    3112:	ff 0f       	add	r31, r31
    3114:	bb 1f       	adc	r27, r27
    3116:	66 1f       	adc	r22, r22
    3118:	77 1f       	adc	r23, r23
    311a:	88 1f       	adc	r24, r24
    311c:	c2 f7       	brpl	.-16     	; 0x310e <__addsf3x+0x6e>
    311e:	0e c0       	rjmp	.+28     	; 0x313c <__addsf3x+0x9c>
    3120:	ba 0f       	add	r27, r26
    3122:	62 1f       	adc	r22, r18
    3124:	73 1f       	adc	r23, r19
    3126:	84 1f       	adc	r24, r20
    3128:	48 f4       	brcc	.+18     	; 0x313c <__addsf3x+0x9c>
    312a:	87 95       	ror	r24
    312c:	77 95       	ror	r23
    312e:	67 95       	ror	r22
    3130:	b7 95       	ror	r27
    3132:	f7 95       	ror	r31
    3134:	9e 3f       	cpi	r25, 0xFE	; 254
    3136:	08 f0       	brcs	.+2      	; 0x313a <__addsf3x+0x9a>
    3138:	b0 cf       	rjmp	.-160    	; 0x309a <__addsf3+0x28>
    313a:	93 95       	inc	r25
    313c:	88 0f       	add	r24, r24
    313e:	08 f0       	brcs	.+2      	; 0x3142 <__addsf3x+0xa2>
    3140:	99 27       	eor	r25, r25
    3142:	ee 0f       	add	r30, r30
    3144:	97 95       	ror	r25
    3146:	87 95       	ror	r24
    3148:	08 95       	ret

0000314a <__cmpsf2>:
    314a:	0e 94 8f 19 	call	0x331e	; 0x331e <__fp_cmp>
    314e:	08 f4       	brcc	.+2      	; 0x3152 <__cmpsf2+0x8>
    3150:	81 e0       	ldi	r24, 0x01	; 1
    3152:	08 95       	ret

00003154 <__divsf3>:
    3154:	0e 94 be 18 	call	0x317c	; 0x317c <__divsf3x>
    3158:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <__fp_round>
    315c:	0e 94 c3 19 	call	0x3386	; 0x3386 <__fp_pscB>
    3160:	58 f0       	brcs	.+22     	; 0x3178 <__divsf3+0x24>
    3162:	0e 94 bc 19 	call	0x3378	; 0x3378 <__fp_pscA>
    3166:	40 f0       	brcs	.+16     	; 0x3178 <__divsf3+0x24>
    3168:	29 f4       	brne	.+10     	; 0x3174 <__divsf3+0x20>
    316a:	5f 3f       	cpi	r21, 0xFF	; 255
    316c:	29 f0       	breq	.+10     	; 0x3178 <__divsf3+0x24>
    316e:	0c 94 b3 19 	jmp	0x3366	; 0x3366 <__fp_inf>
    3172:	51 11       	cpse	r21, r1
    3174:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__fp_szero>
    3178:	0c 94 b9 19 	jmp	0x3372	; 0x3372 <__fp_nan>

0000317c <__divsf3x>:
    317c:	0e 94 db 19 	call	0x33b6	; 0x33b6 <__fp_split3>
    3180:	68 f3       	brcs	.-38     	; 0x315c <__divsf3+0x8>

00003182 <__divsf3_pse>:
    3182:	99 23       	and	r25, r25
    3184:	b1 f3       	breq	.-20     	; 0x3172 <__divsf3+0x1e>
    3186:	55 23       	and	r21, r21
    3188:	91 f3       	breq	.-28     	; 0x316e <__divsf3+0x1a>
    318a:	95 1b       	sub	r25, r21
    318c:	55 0b       	sbc	r21, r21
    318e:	bb 27       	eor	r27, r27
    3190:	aa 27       	eor	r26, r26
    3192:	62 17       	cp	r22, r18
    3194:	73 07       	cpc	r23, r19
    3196:	84 07       	cpc	r24, r20
    3198:	38 f0       	brcs	.+14     	; 0x31a8 <__divsf3_pse+0x26>
    319a:	9f 5f       	subi	r25, 0xFF	; 255
    319c:	5f 4f       	sbci	r21, 0xFF	; 255
    319e:	22 0f       	add	r18, r18
    31a0:	33 1f       	adc	r19, r19
    31a2:	44 1f       	adc	r20, r20
    31a4:	aa 1f       	adc	r26, r26
    31a6:	a9 f3       	breq	.-22     	; 0x3192 <__divsf3_pse+0x10>
    31a8:	35 d0       	rcall	.+106    	; 0x3214 <__divsf3_pse+0x92>
    31aa:	0e 2e       	mov	r0, r30
    31ac:	3a f0       	brmi	.+14     	; 0x31bc <__divsf3_pse+0x3a>
    31ae:	e0 e8       	ldi	r30, 0x80	; 128
    31b0:	32 d0       	rcall	.+100    	; 0x3216 <__divsf3_pse+0x94>
    31b2:	91 50       	subi	r25, 0x01	; 1
    31b4:	50 40       	sbci	r21, 0x00	; 0
    31b6:	e6 95       	lsr	r30
    31b8:	00 1c       	adc	r0, r0
    31ba:	ca f7       	brpl	.-14     	; 0x31ae <__divsf3_pse+0x2c>
    31bc:	2b d0       	rcall	.+86     	; 0x3214 <__divsf3_pse+0x92>
    31be:	fe 2f       	mov	r31, r30
    31c0:	29 d0       	rcall	.+82     	; 0x3214 <__divsf3_pse+0x92>
    31c2:	66 0f       	add	r22, r22
    31c4:	77 1f       	adc	r23, r23
    31c6:	88 1f       	adc	r24, r24
    31c8:	bb 1f       	adc	r27, r27
    31ca:	26 17       	cp	r18, r22
    31cc:	37 07       	cpc	r19, r23
    31ce:	48 07       	cpc	r20, r24
    31d0:	ab 07       	cpc	r26, r27
    31d2:	b0 e8       	ldi	r27, 0x80	; 128
    31d4:	09 f0       	breq	.+2      	; 0x31d8 <__divsf3_pse+0x56>
    31d6:	bb 0b       	sbc	r27, r27
    31d8:	80 2d       	mov	r24, r0
    31da:	bf 01       	movw	r22, r30
    31dc:	ff 27       	eor	r31, r31
    31de:	93 58       	subi	r25, 0x83	; 131
    31e0:	5f 4f       	sbci	r21, 0xFF	; 255
    31e2:	3a f0       	brmi	.+14     	; 0x31f2 <__divsf3_pse+0x70>
    31e4:	9e 3f       	cpi	r25, 0xFE	; 254
    31e6:	51 05       	cpc	r21, r1
    31e8:	78 f0       	brcs	.+30     	; 0x3208 <__divsf3_pse+0x86>
    31ea:	0c 94 b3 19 	jmp	0x3366	; 0x3366 <__fp_inf>
    31ee:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__fp_szero>
    31f2:	5f 3f       	cpi	r21, 0xFF	; 255
    31f4:	e4 f3       	brlt	.-8      	; 0x31ee <__divsf3_pse+0x6c>
    31f6:	98 3e       	cpi	r25, 0xE8	; 232
    31f8:	d4 f3       	brlt	.-12     	; 0x31ee <__divsf3_pse+0x6c>
    31fa:	86 95       	lsr	r24
    31fc:	77 95       	ror	r23
    31fe:	67 95       	ror	r22
    3200:	b7 95       	ror	r27
    3202:	f7 95       	ror	r31
    3204:	9f 5f       	subi	r25, 0xFF	; 255
    3206:	c9 f7       	brne	.-14     	; 0x31fa <__divsf3_pse+0x78>
    3208:	88 0f       	add	r24, r24
    320a:	91 1d       	adc	r25, r1
    320c:	96 95       	lsr	r25
    320e:	87 95       	ror	r24
    3210:	97 f9       	bld	r25, 7
    3212:	08 95       	ret
    3214:	e1 e0       	ldi	r30, 0x01	; 1
    3216:	66 0f       	add	r22, r22
    3218:	77 1f       	adc	r23, r23
    321a:	88 1f       	adc	r24, r24
    321c:	bb 1f       	adc	r27, r27
    321e:	62 17       	cp	r22, r18
    3220:	73 07       	cpc	r23, r19
    3222:	84 07       	cpc	r24, r20
    3224:	ba 07       	cpc	r27, r26
    3226:	20 f0       	brcs	.+8      	; 0x3230 <__divsf3_pse+0xae>
    3228:	62 1b       	sub	r22, r18
    322a:	73 0b       	sbc	r23, r19
    322c:	84 0b       	sbc	r24, r20
    322e:	ba 0b       	sbc	r27, r26
    3230:	ee 1f       	adc	r30, r30
    3232:	88 f7       	brcc	.-30     	; 0x3216 <__divsf3_pse+0x94>
    3234:	e0 95       	com	r30
    3236:	08 95       	ret

00003238 <__fixsfsi>:
    3238:	0e 94 23 19 	call	0x3246	; 0x3246 <__fixunssfsi>
    323c:	68 94       	set
    323e:	b1 11       	cpse	r27, r1
    3240:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__fp_szero>
    3244:	08 95       	ret

00003246 <__fixunssfsi>:
    3246:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <__fp_splitA>
    324a:	88 f0       	brcs	.+34     	; 0x326e <__fixunssfsi+0x28>
    324c:	9f 57       	subi	r25, 0x7F	; 127
    324e:	98 f0       	brcs	.+38     	; 0x3276 <__fixunssfsi+0x30>
    3250:	b9 2f       	mov	r27, r25
    3252:	99 27       	eor	r25, r25
    3254:	b7 51       	subi	r27, 0x17	; 23
    3256:	b0 f0       	brcs	.+44     	; 0x3284 <__fixunssfsi+0x3e>
    3258:	e1 f0       	breq	.+56     	; 0x3292 <__fixunssfsi+0x4c>
    325a:	66 0f       	add	r22, r22
    325c:	77 1f       	adc	r23, r23
    325e:	88 1f       	adc	r24, r24
    3260:	99 1f       	adc	r25, r25
    3262:	1a f0       	brmi	.+6      	; 0x326a <__fixunssfsi+0x24>
    3264:	ba 95       	dec	r27
    3266:	c9 f7       	brne	.-14     	; 0x325a <__fixunssfsi+0x14>
    3268:	14 c0       	rjmp	.+40     	; 0x3292 <__fixunssfsi+0x4c>
    326a:	b1 30       	cpi	r27, 0x01	; 1
    326c:	91 f0       	breq	.+36     	; 0x3292 <__fixunssfsi+0x4c>
    326e:	0e 94 fd 19 	call	0x33fa	; 0x33fa <__fp_zero>
    3272:	b1 e0       	ldi	r27, 0x01	; 1
    3274:	08 95       	ret
    3276:	0c 94 fd 19 	jmp	0x33fa	; 0x33fa <__fp_zero>
    327a:	67 2f       	mov	r22, r23
    327c:	78 2f       	mov	r23, r24
    327e:	88 27       	eor	r24, r24
    3280:	b8 5f       	subi	r27, 0xF8	; 248
    3282:	39 f0       	breq	.+14     	; 0x3292 <__fixunssfsi+0x4c>
    3284:	b9 3f       	cpi	r27, 0xF9	; 249
    3286:	cc f3       	brlt	.-14     	; 0x327a <__fixunssfsi+0x34>
    3288:	86 95       	lsr	r24
    328a:	77 95       	ror	r23
    328c:	67 95       	ror	r22
    328e:	b3 95       	inc	r27
    3290:	d9 f7       	brne	.-10     	; 0x3288 <__fixunssfsi+0x42>
    3292:	3e f4       	brtc	.+14     	; 0x32a2 <__fixunssfsi+0x5c>
    3294:	90 95       	com	r25
    3296:	80 95       	com	r24
    3298:	70 95       	com	r23
    329a:	61 95       	neg	r22
    329c:	7f 4f       	sbci	r23, 0xFF	; 255
    329e:	8f 4f       	sbci	r24, 0xFF	; 255
    32a0:	9f 4f       	sbci	r25, 0xFF	; 255
    32a2:	08 95       	ret

000032a4 <__floatunsisf>:
    32a4:	e8 94       	clt
    32a6:	09 c0       	rjmp	.+18     	; 0x32ba <__floatsisf+0x12>

000032a8 <__floatsisf>:
    32a8:	97 fb       	bst	r25, 7
    32aa:	3e f4       	brtc	.+14     	; 0x32ba <__floatsisf+0x12>
    32ac:	90 95       	com	r25
    32ae:	80 95       	com	r24
    32b0:	70 95       	com	r23
    32b2:	61 95       	neg	r22
    32b4:	7f 4f       	sbci	r23, 0xFF	; 255
    32b6:	8f 4f       	sbci	r24, 0xFF	; 255
    32b8:	9f 4f       	sbci	r25, 0xFF	; 255
    32ba:	99 23       	and	r25, r25
    32bc:	a9 f0       	breq	.+42     	; 0x32e8 <__floatsisf+0x40>
    32be:	f9 2f       	mov	r31, r25
    32c0:	96 e9       	ldi	r25, 0x96	; 150
    32c2:	bb 27       	eor	r27, r27
    32c4:	93 95       	inc	r25
    32c6:	f6 95       	lsr	r31
    32c8:	87 95       	ror	r24
    32ca:	77 95       	ror	r23
    32cc:	67 95       	ror	r22
    32ce:	b7 95       	ror	r27
    32d0:	f1 11       	cpse	r31, r1
    32d2:	f8 cf       	rjmp	.-16     	; 0x32c4 <__floatsisf+0x1c>
    32d4:	fa f4       	brpl	.+62     	; 0x3314 <__floatsisf+0x6c>
    32d6:	bb 0f       	add	r27, r27
    32d8:	11 f4       	brne	.+4      	; 0x32de <__floatsisf+0x36>
    32da:	60 ff       	sbrs	r22, 0
    32dc:	1b c0       	rjmp	.+54     	; 0x3314 <__floatsisf+0x6c>
    32de:	6f 5f       	subi	r22, 0xFF	; 255
    32e0:	7f 4f       	sbci	r23, 0xFF	; 255
    32e2:	8f 4f       	sbci	r24, 0xFF	; 255
    32e4:	9f 4f       	sbci	r25, 0xFF	; 255
    32e6:	16 c0       	rjmp	.+44     	; 0x3314 <__floatsisf+0x6c>
    32e8:	88 23       	and	r24, r24
    32ea:	11 f0       	breq	.+4      	; 0x32f0 <__floatsisf+0x48>
    32ec:	96 e9       	ldi	r25, 0x96	; 150
    32ee:	11 c0       	rjmp	.+34     	; 0x3312 <__floatsisf+0x6a>
    32f0:	77 23       	and	r23, r23
    32f2:	21 f0       	breq	.+8      	; 0x32fc <__floatsisf+0x54>
    32f4:	9e e8       	ldi	r25, 0x8E	; 142
    32f6:	87 2f       	mov	r24, r23
    32f8:	76 2f       	mov	r23, r22
    32fa:	05 c0       	rjmp	.+10     	; 0x3306 <__floatsisf+0x5e>
    32fc:	66 23       	and	r22, r22
    32fe:	71 f0       	breq	.+28     	; 0x331c <__floatsisf+0x74>
    3300:	96 e8       	ldi	r25, 0x86	; 134
    3302:	86 2f       	mov	r24, r22
    3304:	70 e0       	ldi	r23, 0x00	; 0
    3306:	60 e0       	ldi	r22, 0x00	; 0
    3308:	2a f0       	brmi	.+10     	; 0x3314 <__floatsisf+0x6c>
    330a:	9a 95       	dec	r25
    330c:	66 0f       	add	r22, r22
    330e:	77 1f       	adc	r23, r23
    3310:	88 1f       	adc	r24, r24
    3312:	da f7       	brpl	.-10     	; 0x330a <__floatsisf+0x62>
    3314:	88 0f       	add	r24, r24
    3316:	96 95       	lsr	r25
    3318:	87 95       	ror	r24
    331a:	97 f9       	bld	r25, 7
    331c:	08 95       	ret

0000331e <__fp_cmp>:
    331e:	99 0f       	add	r25, r25
    3320:	00 08       	sbc	r0, r0
    3322:	55 0f       	add	r21, r21
    3324:	aa 0b       	sbc	r26, r26
    3326:	e0 e8       	ldi	r30, 0x80	; 128
    3328:	fe ef       	ldi	r31, 0xFE	; 254
    332a:	16 16       	cp	r1, r22
    332c:	17 06       	cpc	r1, r23
    332e:	e8 07       	cpc	r30, r24
    3330:	f9 07       	cpc	r31, r25
    3332:	c0 f0       	brcs	.+48     	; 0x3364 <__fp_cmp+0x46>
    3334:	12 16       	cp	r1, r18
    3336:	13 06       	cpc	r1, r19
    3338:	e4 07       	cpc	r30, r20
    333a:	f5 07       	cpc	r31, r21
    333c:	98 f0       	brcs	.+38     	; 0x3364 <__fp_cmp+0x46>
    333e:	62 1b       	sub	r22, r18
    3340:	73 0b       	sbc	r23, r19
    3342:	84 0b       	sbc	r24, r20
    3344:	95 0b       	sbc	r25, r21
    3346:	39 f4       	brne	.+14     	; 0x3356 <__fp_cmp+0x38>
    3348:	0a 26       	eor	r0, r26
    334a:	61 f0       	breq	.+24     	; 0x3364 <__fp_cmp+0x46>
    334c:	23 2b       	or	r18, r19
    334e:	24 2b       	or	r18, r20
    3350:	25 2b       	or	r18, r21
    3352:	21 f4       	brne	.+8      	; 0x335c <__fp_cmp+0x3e>
    3354:	08 95       	ret
    3356:	0a 26       	eor	r0, r26
    3358:	09 f4       	brne	.+2      	; 0x335c <__fp_cmp+0x3e>
    335a:	a1 40       	sbci	r26, 0x01	; 1
    335c:	a6 95       	lsr	r26
    335e:	8f ef       	ldi	r24, 0xFF	; 255
    3360:	81 1d       	adc	r24, r1
    3362:	81 1d       	adc	r24, r1
    3364:	08 95       	ret

00003366 <__fp_inf>:
    3366:	97 f9       	bld	r25, 7
    3368:	9f 67       	ori	r25, 0x7F	; 127
    336a:	80 e8       	ldi	r24, 0x80	; 128
    336c:	70 e0       	ldi	r23, 0x00	; 0
    336e:	60 e0       	ldi	r22, 0x00	; 0
    3370:	08 95       	ret

00003372 <__fp_nan>:
    3372:	9f ef       	ldi	r25, 0xFF	; 255
    3374:	80 ec       	ldi	r24, 0xC0	; 192
    3376:	08 95       	ret

00003378 <__fp_pscA>:
    3378:	00 24       	eor	r0, r0
    337a:	0a 94       	dec	r0
    337c:	16 16       	cp	r1, r22
    337e:	17 06       	cpc	r1, r23
    3380:	18 06       	cpc	r1, r24
    3382:	09 06       	cpc	r0, r25
    3384:	08 95       	ret

00003386 <__fp_pscB>:
    3386:	00 24       	eor	r0, r0
    3388:	0a 94       	dec	r0
    338a:	12 16       	cp	r1, r18
    338c:	13 06       	cpc	r1, r19
    338e:	14 06       	cpc	r1, r20
    3390:	05 06       	cpc	r0, r21
    3392:	08 95       	ret

00003394 <__fp_round>:
    3394:	09 2e       	mov	r0, r25
    3396:	03 94       	inc	r0
    3398:	00 0c       	add	r0, r0
    339a:	11 f4       	brne	.+4      	; 0x33a0 <__fp_round+0xc>
    339c:	88 23       	and	r24, r24
    339e:	52 f0       	brmi	.+20     	; 0x33b4 <__fp_round+0x20>
    33a0:	bb 0f       	add	r27, r27
    33a2:	40 f4       	brcc	.+16     	; 0x33b4 <__fp_round+0x20>
    33a4:	bf 2b       	or	r27, r31
    33a6:	11 f4       	brne	.+4      	; 0x33ac <__fp_round+0x18>
    33a8:	60 ff       	sbrs	r22, 0
    33aa:	04 c0       	rjmp	.+8      	; 0x33b4 <__fp_round+0x20>
    33ac:	6f 5f       	subi	r22, 0xFF	; 255
    33ae:	7f 4f       	sbci	r23, 0xFF	; 255
    33b0:	8f 4f       	sbci	r24, 0xFF	; 255
    33b2:	9f 4f       	sbci	r25, 0xFF	; 255
    33b4:	08 95       	ret

000033b6 <__fp_split3>:
    33b6:	57 fd       	sbrc	r21, 7
    33b8:	90 58       	subi	r25, 0x80	; 128
    33ba:	44 0f       	add	r20, r20
    33bc:	55 1f       	adc	r21, r21
    33be:	59 f0       	breq	.+22     	; 0x33d6 <__fp_splitA+0x10>
    33c0:	5f 3f       	cpi	r21, 0xFF	; 255
    33c2:	71 f0       	breq	.+28     	; 0x33e0 <__fp_splitA+0x1a>
    33c4:	47 95       	ror	r20

000033c6 <__fp_splitA>:
    33c6:	88 0f       	add	r24, r24
    33c8:	97 fb       	bst	r25, 7
    33ca:	99 1f       	adc	r25, r25
    33cc:	61 f0       	breq	.+24     	; 0x33e6 <__fp_splitA+0x20>
    33ce:	9f 3f       	cpi	r25, 0xFF	; 255
    33d0:	79 f0       	breq	.+30     	; 0x33f0 <__fp_splitA+0x2a>
    33d2:	87 95       	ror	r24
    33d4:	08 95       	ret
    33d6:	12 16       	cp	r1, r18
    33d8:	13 06       	cpc	r1, r19
    33da:	14 06       	cpc	r1, r20
    33dc:	55 1f       	adc	r21, r21
    33de:	f2 cf       	rjmp	.-28     	; 0x33c4 <__fp_split3+0xe>
    33e0:	46 95       	lsr	r20
    33e2:	f1 df       	rcall	.-30     	; 0x33c6 <__fp_splitA>
    33e4:	08 c0       	rjmp	.+16     	; 0x33f6 <__fp_splitA+0x30>
    33e6:	16 16       	cp	r1, r22
    33e8:	17 06       	cpc	r1, r23
    33ea:	18 06       	cpc	r1, r24
    33ec:	99 1f       	adc	r25, r25
    33ee:	f1 cf       	rjmp	.-30     	; 0x33d2 <__fp_splitA+0xc>
    33f0:	86 95       	lsr	r24
    33f2:	71 05       	cpc	r23, r1
    33f4:	61 05       	cpc	r22, r1
    33f6:	08 94       	sec
    33f8:	08 95       	ret

000033fa <__fp_zero>:
    33fa:	e8 94       	clt

000033fc <__fp_szero>:
    33fc:	bb 27       	eor	r27, r27
    33fe:	66 27       	eor	r22, r22
    3400:	77 27       	eor	r23, r23
    3402:	cb 01       	movw	r24, r22
    3404:	97 f9       	bld	r25, 7
    3406:	08 95       	ret

00003408 <__gesf2>:
    3408:	0e 94 8f 19 	call	0x331e	; 0x331e <__fp_cmp>
    340c:	08 f4       	brcc	.+2      	; 0x3410 <__gesf2+0x8>
    340e:	8f ef       	ldi	r24, 0xFF	; 255
    3410:	08 95       	ret

00003412 <__mulsf3>:
    3412:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__mulsf3x>
    3416:	0c 94 ca 19 	jmp	0x3394	; 0x3394 <__fp_round>
    341a:	0e 94 bc 19 	call	0x3378	; 0x3378 <__fp_pscA>
    341e:	38 f0       	brcs	.+14     	; 0x342e <__mulsf3+0x1c>
    3420:	0e 94 c3 19 	call	0x3386	; 0x3386 <__fp_pscB>
    3424:	20 f0       	brcs	.+8      	; 0x342e <__mulsf3+0x1c>
    3426:	95 23       	and	r25, r21
    3428:	11 f0       	breq	.+4      	; 0x342e <__mulsf3+0x1c>
    342a:	0c 94 b3 19 	jmp	0x3366	; 0x3366 <__fp_inf>
    342e:	0c 94 b9 19 	jmp	0x3372	; 0x3372 <__fp_nan>
    3432:	11 24       	eor	r1, r1
    3434:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__fp_szero>

00003438 <__mulsf3x>:
    3438:	0e 94 db 19 	call	0x33b6	; 0x33b6 <__fp_split3>
    343c:	70 f3       	brcs	.-36     	; 0x341a <__mulsf3+0x8>

0000343e <__mulsf3_pse>:
    343e:	95 9f       	mul	r25, r21
    3440:	c1 f3       	breq	.-16     	; 0x3432 <__mulsf3+0x20>
    3442:	95 0f       	add	r25, r21
    3444:	50 e0       	ldi	r21, 0x00	; 0
    3446:	55 1f       	adc	r21, r21
    3448:	62 9f       	mul	r22, r18
    344a:	f0 01       	movw	r30, r0
    344c:	72 9f       	mul	r23, r18
    344e:	bb 27       	eor	r27, r27
    3450:	f0 0d       	add	r31, r0
    3452:	b1 1d       	adc	r27, r1
    3454:	63 9f       	mul	r22, r19
    3456:	aa 27       	eor	r26, r26
    3458:	f0 0d       	add	r31, r0
    345a:	b1 1d       	adc	r27, r1
    345c:	aa 1f       	adc	r26, r26
    345e:	64 9f       	mul	r22, r20
    3460:	66 27       	eor	r22, r22
    3462:	b0 0d       	add	r27, r0
    3464:	a1 1d       	adc	r26, r1
    3466:	66 1f       	adc	r22, r22
    3468:	82 9f       	mul	r24, r18
    346a:	22 27       	eor	r18, r18
    346c:	b0 0d       	add	r27, r0
    346e:	a1 1d       	adc	r26, r1
    3470:	62 1f       	adc	r22, r18
    3472:	73 9f       	mul	r23, r19
    3474:	b0 0d       	add	r27, r0
    3476:	a1 1d       	adc	r26, r1
    3478:	62 1f       	adc	r22, r18
    347a:	83 9f       	mul	r24, r19
    347c:	a0 0d       	add	r26, r0
    347e:	61 1d       	adc	r22, r1
    3480:	22 1f       	adc	r18, r18
    3482:	74 9f       	mul	r23, r20
    3484:	33 27       	eor	r19, r19
    3486:	a0 0d       	add	r26, r0
    3488:	61 1d       	adc	r22, r1
    348a:	23 1f       	adc	r18, r19
    348c:	84 9f       	mul	r24, r20
    348e:	60 0d       	add	r22, r0
    3490:	21 1d       	adc	r18, r1
    3492:	82 2f       	mov	r24, r18
    3494:	76 2f       	mov	r23, r22
    3496:	6a 2f       	mov	r22, r26
    3498:	11 24       	eor	r1, r1
    349a:	9f 57       	subi	r25, 0x7F	; 127
    349c:	50 40       	sbci	r21, 0x00	; 0
    349e:	9a f0       	brmi	.+38     	; 0x34c6 <__mulsf3_pse+0x88>
    34a0:	f1 f0       	breq	.+60     	; 0x34de <__mulsf3_pse+0xa0>
    34a2:	88 23       	and	r24, r24
    34a4:	4a f0       	brmi	.+18     	; 0x34b8 <__mulsf3_pse+0x7a>
    34a6:	ee 0f       	add	r30, r30
    34a8:	ff 1f       	adc	r31, r31
    34aa:	bb 1f       	adc	r27, r27
    34ac:	66 1f       	adc	r22, r22
    34ae:	77 1f       	adc	r23, r23
    34b0:	88 1f       	adc	r24, r24
    34b2:	91 50       	subi	r25, 0x01	; 1
    34b4:	50 40       	sbci	r21, 0x00	; 0
    34b6:	a9 f7       	brne	.-22     	; 0x34a2 <__mulsf3_pse+0x64>
    34b8:	9e 3f       	cpi	r25, 0xFE	; 254
    34ba:	51 05       	cpc	r21, r1
    34bc:	80 f0       	brcs	.+32     	; 0x34de <__mulsf3_pse+0xa0>
    34be:	0c 94 b3 19 	jmp	0x3366	; 0x3366 <__fp_inf>
    34c2:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__fp_szero>
    34c6:	5f 3f       	cpi	r21, 0xFF	; 255
    34c8:	e4 f3       	brlt	.-8      	; 0x34c2 <__mulsf3_pse+0x84>
    34ca:	98 3e       	cpi	r25, 0xE8	; 232
    34cc:	d4 f3       	brlt	.-12     	; 0x34c2 <__mulsf3_pse+0x84>
    34ce:	86 95       	lsr	r24
    34d0:	77 95       	ror	r23
    34d2:	67 95       	ror	r22
    34d4:	b7 95       	ror	r27
    34d6:	f7 95       	ror	r31
    34d8:	e7 95       	ror	r30
    34da:	9f 5f       	subi	r25, 0xFF	; 255
    34dc:	c1 f7       	brne	.-16     	; 0x34ce <__mulsf3_pse+0x90>
    34de:	fe 2b       	or	r31, r30
    34e0:	88 0f       	add	r24, r24
    34e2:	91 1d       	adc	r25, r1
    34e4:	96 95       	lsr	r25
    34e6:	87 95       	ror	r24
    34e8:	97 f9       	bld	r25, 7
    34ea:	08 95       	ret

000034ec <__cxa_pure_virtual>:
    34ec:	0e 94 dc 28 	call	0x51b8	; 0x51b8 <abort>

000034f0 <initVariant>:
    34f0:	08 95       	ret

000034f2 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    34f2:	0e 94 79 22 	call	0x44f2	; 0x44f2 <init>

	initVariant();
    34f6:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
    34fa:	83 e6       	ldi	r24, 0x63	; 99
    34fc:	95 e0       	ldi	r25, 0x05	; 5
    34fe:	0e 94 90 20 	call	0x4120	; 0x4120 <_ZN10USBDevice_6attachEv>
#endif
	
	setup();
    3502:	0e 94 4c 06 	call	0xc98	; 0xc98 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3506:	c0 e0       	ldi	r28, 0x00	; 0
    3508:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    350a:	0e 94 ca 06 	call	0xd94	; 0xd94 <loop>
		if (serialEventRun) serialEventRun();
    350e:	20 97       	sbiw	r28, 0x00	; 0
    3510:	e1 f3       	breq	.-8      	; 0x350a <main+0x18>
    3512:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3516:	f9 cf       	rjmp	.-14     	; 0x350a <main+0x18>

00003518 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    3518:	cf 92       	push	r12
    351a:	df 92       	push	r13
    351c:	ef 92       	push	r14
    351e:	ff 92       	push	r15
    3520:	0f 93       	push	r16
    3522:	1f 93       	push	r17
    3524:	cf 93       	push	r28
    3526:	df 93       	push	r29
    3528:	6c 01       	movw	r12, r24
    352a:	7a 01       	movw	r14, r20
    352c:	8b 01       	movw	r16, r22
    352e:	c0 e0       	ldi	r28, 0x00	; 0
    3530:	d0 e0       	ldi	r29, 0x00	; 0
    3532:	ce 15       	cp	r28, r14
    3534:	df 05       	cpc	r29, r15
    3536:	81 f0       	breq	.+32     	; 0x3558 <_ZN5Print5writeEPKhj+0x40>
    3538:	d8 01       	movw	r26, r16
    353a:	6d 91       	ld	r22, X+
    353c:	8d 01       	movw	r16, r26
    353e:	d6 01       	movw	r26, r12
    3540:	ed 91       	ld	r30, X+
    3542:	fc 91       	ld	r31, X
    3544:	01 90       	ld	r0, Z+
    3546:	f0 81       	ld	r31, Z
    3548:	e0 2d       	mov	r30, r0
    354a:	c6 01       	movw	r24, r12
    354c:	09 95       	icall
    354e:	89 2b       	or	r24, r25
    3550:	11 f0       	breq	.+4      	; 0x3556 <_ZN5Print5writeEPKhj+0x3e>
    3552:	21 96       	adiw	r28, 0x01	; 1
    3554:	ee cf       	rjmp	.-36     	; 0x3532 <_ZN5Print5writeEPKhj+0x1a>
    3556:	7e 01       	movw	r14, r28
    3558:	c7 01       	movw	r24, r14
    355a:	df 91       	pop	r29
    355c:	cf 91       	pop	r28
    355e:	1f 91       	pop	r17
    3560:	0f 91       	pop	r16
    3562:	ff 90       	pop	r15
    3564:	ef 90       	pop	r14
    3566:	df 90       	pop	r13
    3568:	cf 90       	pop	r12
    356a:	08 95       	ret

0000356c <_ZN5Print5writeEPKc>:
    356c:	61 15       	cp	r22, r1
    356e:	71 05       	cpc	r23, r1
    3570:	79 f0       	breq	.+30     	; 0x3590 <_ZN5Print5writeEPKc+0x24>
    3572:	fb 01       	movw	r30, r22
    3574:	01 90       	ld	r0, Z+
    3576:	00 20       	and	r0, r0
    3578:	e9 f7       	brne	.-6      	; 0x3574 <_ZN5Print5writeEPKc+0x8>
    357a:	31 97       	sbiw	r30, 0x01	; 1
    357c:	af 01       	movw	r20, r30
    357e:	46 1b       	sub	r20, r22
    3580:	57 0b       	sbc	r21, r23
    3582:	dc 01       	movw	r26, r24
    3584:	ed 91       	ld	r30, X+
    3586:	fc 91       	ld	r31, X
    3588:	02 80       	ldd	r0, Z+2	; 0x02
    358a:	f3 81       	ldd	r31, Z+3	; 0x03
    358c:	e0 2d       	mov	r30, r0
    358e:	09 94       	ijmp
    3590:	80 e0       	ldi	r24, 0x00	; 0
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	08 95       	ret

00003596 <_ZN5Print5printERK6String>:
    3596:	db 01       	movw	r26, r22
    3598:	14 96       	adiw	r26, 0x04	; 4
    359a:	4d 91       	ld	r20, X+
    359c:	5c 91       	ld	r21, X
    359e:	15 97       	sbiw	r26, 0x05	; 5
    35a0:	6d 91       	ld	r22, X+
    35a2:	7c 91       	ld	r23, X
    35a4:	dc 01       	movw	r26, r24
    35a6:	ed 91       	ld	r30, X+
    35a8:	fc 91       	ld	r31, X
    35aa:	02 80       	ldd	r0, Z+2	; 0x02
    35ac:	f3 81       	ldd	r31, Z+3	; 0x03
    35ae:	e0 2d       	mov	r30, r0
    35b0:	09 94       	ijmp

000035b2 <_ZN5Print5printEPKc>:
    35b2:	0c 94 b6 1a 	jmp	0x356c	; 0x356c <_ZN5Print5writeEPKc>

000035b6 <_ZN5Print5printEc>:
    35b6:	dc 01       	movw	r26, r24
    35b8:	ed 91       	ld	r30, X+
    35ba:	fc 91       	ld	r31, X
    35bc:	01 90       	ld	r0, Z+
    35be:	f0 81       	ld	r31, Z
    35c0:	e0 2d       	mov	r30, r0
    35c2:	09 94       	ijmp

000035c4 <_ZN5Print11printNumberEmh>:
    35c4:	8f 92       	push	r8
    35c6:	9f 92       	push	r9
    35c8:	af 92       	push	r10
    35ca:	bf 92       	push	r11
    35cc:	ef 92       	push	r14
    35ce:	ff 92       	push	r15
    35d0:	0f 93       	push	r16
    35d2:	1f 93       	push	r17
    35d4:	cf 93       	push	r28
    35d6:	df 93       	push	r29
    35d8:	cd b7       	in	r28, 0x3d	; 61
    35da:	de b7       	in	r29, 0x3e	; 62
    35dc:	a1 97       	sbiw	r28, 0x21	; 33
    35de:	0f b6       	in	r0, 0x3f	; 63
    35e0:	f8 94       	cli
    35e2:	de bf       	out	0x3e, r29	; 62
    35e4:	0f be       	out	0x3f, r0	; 63
    35e6:	cd bf       	out	0x3d, r28	; 61
    35e8:	7c 01       	movw	r14, r24
    35ea:	fa 01       	movw	r30, r20
    35ec:	cb 01       	movw	r24, r22
    35ee:	19 a2       	std	Y+33, r1	; 0x21
    35f0:	22 30       	cpi	r18, 0x02	; 2
    35f2:	08 f4       	brcc	.+2      	; 0x35f6 <_ZN5Print11printNumberEmh+0x32>
    35f4:	2a e0       	ldi	r18, 0x0A	; 10
    35f6:	8e 01       	movw	r16, r28
    35f8:	0f 5d       	subi	r16, 0xDF	; 223
    35fa:	1f 4f       	sbci	r17, 0xFF	; 255
    35fc:	82 2e       	mov	r8, r18
    35fe:	91 2c       	mov	r9, r1
    3600:	a1 2c       	mov	r10, r1
    3602:	b1 2c       	mov	r11, r1
    3604:	bf 01       	movw	r22, r30
    3606:	a5 01       	movw	r20, r10
    3608:	94 01       	movw	r18, r8
    360a:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__udivmodsi4>
    360e:	f9 01       	movw	r30, r18
    3610:	ca 01       	movw	r24, r20
    3612:	01 50       	subi	r16, 0x01	; 1
    3614:	11 09       	sbc	r17, r1
    3616:	6a 30       	cpi	r22, 0x0A	; 10
    3618:	10 f4       	brcc	.+4      	; 0x361e <_ZN5Print11printNumberEmh+0x5a>
    361a:	60 5d       	subi	r22, 0xD0	; 208
    361c:	01 c0       	rjmp	.+2      	; 0x3620 <_ZN5Print11printNumberEmh+0x5c>
    361e:	69 5c       	subi	r22, 0xC9	; 201
    3620:	d8 01       	movw	r26, r16
    3622:	6c 93       	st	X, r22
    3624:	23 2b       	or	r18, r19
    3626:	24 2b       	or	r18, r20
    3628:	25 2b       	or	r18, r21
    362a:	61 f7       	brne	.-40     	; 0x3604 <_ZN5Print11printNumberEmh+0x40>
    362c:	b8 01       	movw	r22, r16
    362e:	c7 01       	movw	r24, r14
    3630:	0e 94 b6 1a 	call	0x356c	; 0x356c <_ZN5Print5writeEPKc>
    3634:	a1 96       	adiw	r28, 0x21	; 33
    3636:	0f b6       	in	r0, 0x3f	; 63
    3638:	f8 94       	cli
    363a:	de bf       	out	0x3e, r29	; 62
    363c:	0f be       	out	0x3f, r0	; 63
    363e:	cd bf       	out	0x3d, r28	; 61
    3640:	df 91       	pop	r29
    3642:	cf 91       	pop	r28
    3644:	1f 91       	pop	r17
    3646:	0f 91       	pop	r16
    3648:	ff 90       	pop	r15
    364a:	ef 90       	pop	r14
    364c:	bf 90       	pop	r11
    364e:	af 90       	pop	r10
    3650:	9f 90       	pop	r9
    3652:	8f 90       	pop	r8
    3654:	08 95       	ret

00003656 <_ZN5Print5printEmi>:
    3656:	21 15       	cp	r18, r1
    3658:	31 05       	cpc	r19, r1
    365a:	41 f4       	brne	.+16     	; 0x366c <_ZN5Print5printEmi+0x16>
    365c:	dc 01       	movw	r26, r24
    365e:	ed 91       	ld	r30, X+
    3660:	fc 91       	ld	r31, X
    3662:	01 90       	ld	r0, Z+
    3664:	f0 81       	ld	r31, Z
    3666:	e0 2d       	mov	r30, r0
    3668:	64 2f       	mov	r22, r20
    366a:	09 94       	ijmp
    366c:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <_ZN5Print11printNumberEmh>

00003670 <_ZN5Print5printEji>:
    3670:	9a 01       	movw	r18, r20
    3672:	ab 01       	movw	r20, r22
    3674:	60 e0       	ldi	r22, 0x00	; 0
    3676:	70 e0       	ldi	r23, 0x00	; 0
    3678:	0c 94 2b 1b 	jmp	0x3656	; 0x3656 <_ZN5Print5printEmi>

0000367c <_ZN5Print5printEli>:
    367c:	cf 92       	push	r12
    367e:	df 92       	push	r13
    3680:	ef 92       	push	r14
    3682:	ff 92       	push	r15
    3684:	0f 93       	push	r16
    3686:	1f 93       	push	r17
    3688:	cf 93       	push	r28
    368a:	df 93       	push	r29
    368c:	21 15       	cp	r18, r1
    368e:	31 05       	cpc	r19, r1
    3690:	81 f4       	brne	.+32     	; 0x36b2 <_ZN5Print5printEli+0x36>
    3692:	dc 01       	movw	r26, r24
    3694:	ed 91       	ld	r30, X+
    3696:	fc 91       	ld	r31, X
    3698:	01 90       	ld	r0, Z+
    369a:	f0 81       	ld	r31, Z
    369c:	e0 2d       	mov	r30, r0
    369e:	64 2f       	mov	r22, r20
    36a0:	df 91       	pop	r29
    36a2:	cf 91       	pop	r28
    36a4:	1f 91       	pop	r17
    36a6:	0f 91       	pop	r16
    36a8:	ff 90       	pop	r15
    36aa:	ef 90       	pop	r14
    36ac:	df 90       	pop	r13
    36ae:	cf 90       	pop	r12
    36b0:	09 94       	ijmp
    36b2:	2a 30       	cpi	r18, 0x0A	; 10
    36b4:	31 05       	cpc	r19, r1
    36b6:	01 f5       	brne	.+64     	; 0x36f8 <_ZN5Print5printEli+0x7c>
    36b8:	77 ff       	sbrs	r23, 7
    36ba:	1d c0       	rjmp	.+58     	; 0x36f6 <_ZN5Print5printEli+0x7a>
    36bc:	6a 01       	movw	r12, r20
    36be:	7b 01       	movw	r14, r22
    36c0:	ec 01       	movw	r28, r24
    36c2:	6d e2       	ldi	r22, 0x2D	; 45
    36c4:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <_ZN5Print5printEc>
    36c8:	8c 01       	movw	r16, r24
    36ca:	44 27       	eor	r20, r20
    36cc:	55 27       	eor	r21, r21
    36ce:	ba 01       	movw	r22, r20
    36d0:	4c 19       	sub	r20, r12
    36d2:	5d 09       	sbc	r21, r13
    36d4:	6e 09       	sbc	r22, r14
    36d6:	7f 09       	sbc	r23, r15
    36d8:	2a e0       	ldi	r18, 0x0A	; 10
    36da:	ce 01       	movw	r24, r28
    36dc:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <_ZN5Print11printNumberEmh>
    36e0:	80 0f       	add	r24, r16
    36e2:	91 1f       	adc	r25, r17
    36e4:	df 91       	pop	r29
    36e6:	cf 91       	pop	r28
    36e8:	1f 91       	pop	r17
    36ea:	0f 91       	pop	r16
    36ec:	ff 90       	pop	r15
    36ee:	ef 90       	pop	r14
    36f0:	df 90       	pop	r13
    36f2:	cf 90       	pop	r12
    36f4:	08 95       	ret
    36f6:	2a e0       	ldi	r18, 0x0A	; 10
    36f8:	df 91       	pop	r29
    36fa:	cf 91       	pop	r28
    36fc:	1f 91       	pop	r17
    36fe:	0f 91       	pop	r16
    3700:	ff 90       	pop	r15
    3702:	ef 90       	pop	r14
    3704:	df 90       	pop	r13
    3706:	cf 90       	pop	r12
    3708:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <_ZN5Print11printNumberEmh>

0000370c <_ZN5Print5printEii>:
    370c:	9a 01       	movw	r18, r20
    370e:	ab 01       	movw	r20, r22
    3710:	77 0f       	add	r23, r23
    3712:	66 0b       	sbc	r22, r22
    3714:	77 0b       	sbc	r23, r23
    3716:	0c 94 3e 1b 	jmp	0x367c	; 0x367c <_ZN5Print5printEli>

0000371a <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    371a:	7f 92       	push	r7
    371c:	8f 92       	push	r8
    371e:	9f 92       	push	r9
    3720:	af 92       	push	r10
    3722:	bf 92       	push	r11
    3724:	cf 92       	push	r12
    3726:	df 92       	push	r13
    3728:	ef 92       	push	r14
    372a:	ff 92       	push	r15
    372c:	0f 93       	push	r16
    372e:	1f 93       	push	r17
    3730:	cf 93       	push	r28
    3732:	df 93       	push	r29
    3734:	8c 01       	movw	r16, r24
    3736:	6a 01       	movw	r12, r20
    3738:	7b 01       	movw	r14, r22
    373a:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    373c:	9a 01       	movw	r18, r20
    373e:	ab 01       	movw	r20, r22
    3740:	c7 01       	movw	r24, r14
    3742:	b6 01       	movw	r22, r12
    3744:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <__unordsf2>
    3748:	88 23       	and	r24, r24
    374a:	19 f0       	breq	.+6      	; 0x3752 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    374c:	68 ee       	ldi	r22, 0xE8	; 232
    374e:	72 e0       	ldi	r23, 0x02	; 2
    3750:	27 c0       	rjmp	.+78     	; 0x37a0 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    3752:	46 01       	movw	r8, r12
    3754:	57 01       	movw	r10, r14
    3756:	e8 94       	clt
    3758:	b7 f8       	bld	r11, 7
    375a:	2f ef       	ldi	r18, 0xFF	; 255
    375c:	3f ef       	ldi	r19, 0xFF	; 255
    375e:	4f e7       	ldi	r20, 0x7F	; 127
    3760:	5f e7       	ldi	r21, 0x7F	; 127
    3762:	c5 01       	movw	r24, r10
    3764:	b4 01       	movw	r22, r8
    3766:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <__unordsf2>
    376a:	81 11       	cpse	r24, r1
    376c:	0d c0       	rjmp	.+26     	; 0x3788 <_ZN5Print10printFloatEdh+0x6e>
    376e:	2f ef       	ldi	r18, 0xFF	; 255
    3770:	3f ef       	ldi	r19, 0xFF	; 255
    3772:	4f e7       	ldi	r20, 0x7F	; 127
    3774:	5f e7       	ldi	r21, 0x7F	; 127
    3776:	c5 01       	movw	r24, r10
    3778:	b4 01       	movw	r22, r8
    377a:	0e 94 a5 18 	call	0x314a	; 0x314a <__cmpsf2>
    377e:	18 16       	cp	r1, r24
    3780:	1c f4       	brge	.+6      	; 0x3788 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3782:	6c ee       	ldi	r22, 0xEC	; 236
    3784:	72 e0       	ldi	r23, 0x02	; 2
    3786:	0c c0       	rjmp	.+24     	; 0x37a0 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    3788:	2f ef       	ldi	r18, 0xFF	; 255
    378a:	3f ef       	ldi	r19, 0xFF	; 255
    378c:	4f e7       	ldi	r20, 0x7F	; 127
    378e:	5f e4       	ldi	r21, 0x4F	; 79
    3790:	c7 01       	movw	r24, r14
    3792:	b6 01       	movw	r22, r12
    3794:	0e 94 04 1a 	call	0x3408	; 0x3408 <__gesf2>
    3798:	18 16       	cp	r1, r24
    379a:	94 f4       	brge	.+36     	; 0x37c0 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    379c:	60 ef       	ldi	r22, 0xF0	; 240
    379e:	72 e0       	ldi	r23, 0x02	; 2
    37a0:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    37a2:	df 91       	pop	r29
    37a4:	cf 91       	pop	r28
    37a6:	1f 91       	pop	r17
    37a8:	0f 91       	pop	r16
    37aa:	ff 90       	pop	r15
    37ac:	ef 90       	pop	r14
    37ae:	df 90       	pop	r13
    37b0:	cf 90       	pop	r12
    37b2:	bf 90       	pop	r11
    37b4:	af 90       	pop	r10
    37b6:	9f 90       	pop	r9
    37b8:	8f 90       	pop	r8
    37ba:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    37bc:	0c 94 b6 1a 	jmp	0x356c	; 0x356c <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    37c0:	2f ef       	ldi	r18, 0xFF	; 255
    37c2:	3f ef       	ldi	r19, 0xFF	; 255
    37c4:	4f e7       	ldi	r20, 0x7F	; 127
    37c6:	5f ec       	ldi	r21, 0xCF	; 207
    37c8:	c7 01       	movw	r24, r14
    37ca:	b6 01       	movw	r22, r12
    37cc:	0e 94 a5 18 	call	0x314a	; 0x314a <__cmpsf2>
    37d0:	87 fd       	sbrc	r24, 7
    37d2:	e4 cf       	rjmp	.-56     	; 0x379c <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    37d4:	20 e0       	ldi	r18, 0x00	; 0
    37d6:	30 e0       	ldi	r19, 0x00	; 0
    37d8:	a9 01       	movw	r20, r18
    37da:	c7 01       	movw	r24, r14
    37dc:	b6 01       	movw	r22, r12
    37de:	0e 94 a5 18 	call	0x314a	; 0x314a <__cmpsf2>
    37e2:	87 ff       	sbrs	r24, 7
    37e4:	0a c0       	rjmp	.+20     	; 0x37fa <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    37e6:	6d e2       	ldi	r22, 0x2D	; 45
    37e8:	c8 01       	movw	r24, r16
    37ea:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <_ZN5Print5printEc>
    37ee:	ec 01       	movw	r28, r24
     number = -number;
    37f0:	f7 fa       	bst	r15, 7
    37f2:	f0 94       	com	r15
    37f4:	f7 f8       	bld	r15, 7
    37f6:	f0 94       	com	r15
    37f8:	02 c0       	rjmp	.+4      	; 0x37fe <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    37fa:	c0 e0       	ldi	r28, 0x00	; 0
    37fc:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    37fe:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    3800:	60 e0       	ldi	r22, 0x00	; 0
    3802:	70 e0       	ldi	r23, 0x00	; 0
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    3808:	7b 14       	cp	r7, r11
    380a:	41 f0       	breq	.+16     	; 0x381c <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    380c:	20 e0       	ldi	r18, 0x00	; 0
    380e:	30 e0       	ldi	r19, 0x00	; 0
    3810:	40 e2       	ldi	r20, 0x20	; 32
    3812:	51 e4       	ldi	r21, 0x41	; 65
    3814:	0e 94 aa 18 	call	0x3154	; 0x3154 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3818:	b3 94       	inc	r11
    381a:	f6 cf       	rjmp	.-20     	; 0x3808 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    381c:	a7 01       	movw	r20, r14
    381e:	96 01       	movw	r18, r12
    3820:	0e 94 39 18 	call	0x3072	; 0x3072 <__addsf3>
    3824:	6b 01       	movw	r12, r22
    3826:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    3828:	0e 94 23 19 	call	0x3246	; 0x3246 <__fixunssfsi>
    382c:	4b 01       	movw	r8, r22
    382e:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    3830:	2a e0       	ldi	r18, 0x0A	; 10
    3832:	ab 01       	movw	r20, r22
    3834:	bc 01       	movw	r22, r24
    3836:	c8 01       	movw	r24, r16
    3838:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    383c:	c8 0f       	add	r28, r24
    383e:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    3840:	77 20       	and	r7, r7
    3842:	b9 f1       	breq	.+110    	; 0x38b2 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    3844:	c5 01       	movw	r24, r10
    3846:	b4 01       	movw	r22, r8
    3848:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__floatunsisf>
    384c:	9b 01       	movw	r18, r22
    384e:	ac 01       	movw	r20, r24
    3850:	c7 01       	movw	r24, r14
    3852:	b6 01       	movw	r22, r12
    3854:	0e 94 38 18 	call	0x3070	; 0x3070 <__subsf3>
    3858:	6b 01       	movw	r12, r22
    385a:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    385c:	6e e2       	ldi	r22, 0x2E	; 46
    385e:	c8 01       	movw	r24, r16
    3860:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <_ZN5Print5printEc>
    3864:	c8 0f       	add	r28, r24
    3866:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    3868:	20 e0       	ldi	r18, 0x00	; 0
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	40 e2       	ldi	r20, 0x20	; 32
    386e:	51 e4       	ldi	r21, 0x41	; 65
    3870:	c7 01       	movw	r24, r14
    3872:	b6 01       	movw	r22, r12
    3874:	0e 94 09 1a 	call	0x3412	; 0x3412 <__mulsf3>
    3878:	4b 01       	movw	r8, r22
    387a:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    387c:	0e 94 23 19 	call	0x3246	; 0x3246 <__fixunssfsi>
    3880:	6b 01       	movw	r12, r22
    3882:	7c 01       	movw	r14, r24
    n += print(toPrint);
    3884:	4a e0       	ldi	r20, 0x0A	; 10
    3886:	50 e0       	ldi	r21, 0x00	; 0
    3888:	c8 01       	movw	r24, r16
    388a:	0e 94 38 1b 	call	0x3670	; 0x3670 <_ZN5Print5printEji>
    388e:	c8 0f       	add	r28, r24
    3890:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    3892:	b6 01       	movw	r22, r12
    3894:	80 e0       	ldi	r24, 0x00	; 0
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__floatunsisf>
    389c:	9b 01       	movw	r18, r22
    389e:	ac 01       	movw	r20, r24
    38a0:	c5 01       	movw	r24, r10
    38a2:	b4 01       	movw	r22, r8
    38a4:	0e 94 38 18 	call	0x3070	; 0x3070 <__subsf3>
    38a8:	6b 01       	movw	r12, r22
    38aa:	7c 01       	movw	r14, r24
    38ac:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    38ae:	71 10       	cpse	r7, r1
    38b0:	db cf       	rjmp	.-74     	; 0x3868 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    38b2:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    38b4:	df 91       	pop	r29
    38b6:	cf 91       	pop	r28
    38b8:	1f 91       	pop	r17
    38ba:	0f 91       	pop	r16
    38bc:	ff 90       	pop	r15
    38be:	ef 90       	pop	r14
    38c0:	df 90       	pop	r13
    38c2:	cf 90       	pop	r12
    38c4:	bf 90       	pop	r11
    38c6:	af 90       	pop	r10
    38c8:	9f 90       	pop	r9
    38ca:	8f 90       	pop	r8
    38cc:	7f 90       	pop	r7
    38ce:	08 95       	ret

000038d0 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    38d0:	0c 94 8d 1b 	jmp	0x371a	; 0x371a <_ZN5Print10printFloatEdh>

000038d4 <_ZL4RecvPVhh>:
//=======================================================================
//=======================================================================

USBDevice_ USBDevice;

USBDevice_::USBDevice_()
    38d4:	61 50       	subi	r22, 0x01	; 1
    38d6:	30 f0       	brcs	.+12     	; 0x38e4 <_ZL4RecvPVhh+0x10>
    38d8:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    38dc:	fc 01       	movw	r30, r24
    38de:	20 83       	st	Z, r18
    38e0:	01 96       	adiw	r24, 0x01	; 1
    38e2:	f8 cf       	rjmp	.-16     	; 0x38d4 <_ZL4RecvPVhh>
    38e4:	28 98       	cbi	0x05, 0	; 5
    38e6:	84 e6       	ldi	r24, 0x64	; 100
    38e8:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <RxLEDPulse>
    38ec:	08 95       	ret

000038ee <_ZL11SendControlh>:
    38ee:	40 91 66 05 	lds	r20, 0x0566	; 0x800566 <_ZL6_cmark>
    38f2:	50 91 67 05 	lds	r21, 0x0567	; 0x800567 <_ZL6_cmark+0x1>
    38f6:	20 91 64 05 	lds	r18, 0x0564	; 0x800564 <_ZL5_cend>
    38fa:	30 91 65 05 	lds	r19, 0x0565	; 0x800565 <_ZL5_cend+0x1>
    38fe:	42 17       	cp	r20, r18
    3900:	53 07       	cpc	r21, r19
    3902:	b4 f4       	brge	.+44     	; 0x3930 <_ZL11SendControlh+0x42>
    3904:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3908:	95 70       	andi	r25, 0x05	; 5
    390a:	e1 f3       	breq	.-8      	; 0x3904 <_ZL11SendControlh+0x16>
    390c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3910:	92 fd       	sbrc	r25, 2
    3912:	19 c0       	rjmp	.+50     	; 0x3946 <_ZL11SendControlh+0x58>
    3914:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    3918:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <_ZL6_cmark>
    391c:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <_ZL6_cmark+0x1>
    3920:	01 96       	adiw	r24, 0x01	; 1
    3922:	8f 73       	andi	r24, 0x3F	; 63
    3924:	99 27       	eor	r25, r25
    3926:	89 2b       	or	r24, r25
    3928:	19 f4       	brne	.+6      	; 0x3930 <_ZL11SendControlh+0x42>
    392a:	8e ef       	ldi	r24, 0xFE	; 254
    392c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3930:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <_ZL6_cmark>
    3934:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <_ZL6_cmark+0x1>
    3938:	01 96       	adiw	r24, 0x01	; 1
    393a:	90 93 67 05 	sts	0x0567, r25	; 0x800567 <_ZL6_cmark+0x1>
    393e:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <_ZL6_cmark>
    3942:	81 e0       	ldi	r24, 0x01	; 1
    3944:	08 95       	ret
    3946:	80 e0       	ldi	r24, 0x00	; 0
    3948:	08 95       	ret

0000394a <_ZL24USB_SendStringDescriptorPKhhh>:
    394a:	df 92       	push	r13
    394c:	ef 92       	push	r14
    394e:	ff 92       	push	r15
    3950:	0f 93       	push	r16
    3952:	1f 93       	push	r17
    3954:	cf 93       	push	r28
    3956:	df 93       	push	r29
    3958:	d8 2e       	mov	r13, r24
    395a:	f9 2e       	mov	r15, r25
    395c:	e4 2e       	mov	r14, r20
    395e:	06 2f       	mov	r16, r22
    3960:	10 e0       	ldi	r17, 0x00	; 0
    3962:	c8 01       	movw	r24, r16
    3964:	01 96       	adiw	r24, 0x01	; 1
    3966:	88 0f       	add	r24, r24
    3968:	0e 94 77 1c 	call	0x38ee	; 0x38ee <_ZL11SendControlh>
    396c:	83 e0       	ldi	r24, 0x03	; 3
    396e:	0e 94 77 1c 	call	0x38ee	; 0x38ee <_ZL11SendControlh>
    3972:	cd 2d       	mov	r28, r13
    3974:	df 2d       	mov	r29, r15
    3976:	0c 0f       	add	r16, r28
    3978:	1d 1f       	adc	r17, r29
    397a:	c0 17       	cp	r28, r16
    397c:	d1 07       	cpc	r29, r17
    397e:	89 f0       	breq	.+34     	; 0x39a2 <_ZL24USB_SendStringDescriptorPKhhh+0x58>
    3980:	e7 fe       	sbrs	r14, 7
    3982:	03 c0       	rjmp	.+6      	; 0x398a <_ZL24USB_SendStringDescriptorPKhhh+0x40>
    3984:	fe 01       	movw	r30, r28
    3986:	84 91       	lpm	r24, Z
    3988:	01 c0       	rjmp	.+2      	; 0x398c <_ZL24USB_SendStringDescriptorPKhhh+0x42>
    398a:	88 81       	ld	r24, Y
    398c:	0e 94 77 1c 	call	0x38ee	; 0x38ee <_ZL11SendControlh>
    3990:	f8 2e       	mov	r15, r24
    3992:	80 e0       	ldi	r24, 0x00	; 0
    3994:	0e 94 77 1c 	call	0x38ee	; 0x38ee <_ZL11SendControlh>
    3998:	8f 21       	and	r24, r15
    399a:	21 96       	adiw	r28, 0x01	; 1
    399c:	81 11       	cpse	r24, r1
    399e:	ed cf       	rjmp	.-38     	; 0x397a <_ZL24USB_SendStringDescriptorPKhhh+0x30>
    39a0:	01 c0       	rjmp	.+2      	; 0x39a4 <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
    39a2:	81 e0       	ldi	r24, 0x01	; 1
    39a4:	df 91       	pop	r29
    39a6:	cf 91       	pop	r28
    39a8:	1f 91       	pop	r17
    39aa:	0f 91       	pop	r16
    39ac:	ff 90       	pop	r15
    39ae:	ef 90       	pop	r14
    39b0:	df 90       	pop	r13
    39b2:	08 95       	ret

000039b4 <_ZL15USB_ClockEnablev>:
    39b4:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    39b8:	81 60       	ori	r24, 0x01	; 1
    39ba:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    39be:	80 ea       	ldi	r24, 0xA0	; 160
    39c0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    39c4:	89 b5       	in	r24, 0x29	; 41
    39c6:	80 61       	ori	r24, 0x10	; 16
    39c8:	89 bd       	out	0x29, r24	; 41
    39ca:	89 b5       	in	r24, 0x29	; 41
    39cc:	82 60       	ori	r24, 0x02	; 2
    39ce:	89 bd       	out	0x29, r24	; 41
    39d0:	09 b4       	in	r0, 0x29	; 41
    39d2:	00 fe       	sbrs	r0, 0
    39d4:	fd cf       	rjmp	.-6      	; 0x39d0 <_ZL15USB_ClockEnablev+0x1c>
    39d6:	61 e0       	ldi	r22, 0x01	; 1
    39d8:	70 e0       	ldi	r23, 0x00	; 0
    39da:	80 e0       	ldi	r24, 0x00	; 0
    39dc:	90 e0       	ldi	r25, 0x00	; 0
    39de:	0e 94 32 22 	call	0x4464	; 0x4464 <delay>
    39e2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    39e6:	8f 7c       	andi	r24, 0xCF	; 207
    39e8:	80 61       	ori	r24, 0x10	; 16
    39ea:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    39ee:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    39f2:	80 7f       	andi	r24, 0xF0	; 240
    39f4:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    39f8:	08 95       	ret

000039fa <_ZL14SendInterfacesv>:
    39fa:	cf 93       	push	r28
    39fc:	df 93       	push	r29
    39fe:	1f 92       	push	r1
    3a00:	cd b7       	in	r28, 0x3d	; 61
    3a02:	de b7       	in	r29, 0x3e	; 62
    3a04:	19 82       	std	Y+1, r1	; 0x01
    3a06:	ce 01       	movw	r24, r28
    3a08:	01 96       	adiw	r24, 0x01	; 1
    3a0a:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <_Z16CDC_GetInterfacePh>
    3a0e:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <_Z12PluggableUSBv>
    3a12:	be 01       	movw	r22, r28
    3a14:	6f 5f       	subi	r22, 0xFF	; 255
    3a16:	7f 4f       	sbci	r23, 0xFF	; 255
    3a18:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <_ZN13PluggableUSB_12getInterfaceEPh>
    3a1c:	89 81       	ldd	r24, Y+1	; 0x01
    3a1e:	0f 90       	pop	r0
    3a20:	df 91       	pop	r29
    3a22:	cf 91       	pop	r28
    3a24:	08 95       	ret

00003a26 <_ZN6LockEPC1Eh>:
    3a26:	2f b7       	in	r18, 0x3f	; 63
    3a28:	fc 01       	movw	r30, r24
    3a2a:	20 83       	st	Z, r18
    3a2c:	f8 94       	cli
    3a2e:	67 70       	andi	r22, 0x07	; 7
    3a30:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3a34:	08 95       	ret

00003a36 <_Z13USB_Availableh>:
    3a36:	cf 93       	push	r28
    3a38:	df 93       	push	r29
    3a3a:	1f 92       	push	r1
    3a3c:	cd b7       	in	r28, 0x3d	; 61
    3a3e:	de b7       	in	r29, 0x3e	; 62
    3a40:	68 2f       	mov	r22, r24
    3a42:	ce 01       	movw	r24, r28
    3a44:	01 96       	adiw	r24, 0x01	; 1
    3a46:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <_ZN6LockEPC1Eh>
    3a4a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    3a4e:	99 81       	ldd	r25, Y+1	; 0x01
    3a50:	9f bf       	out	0x3f, r25	; 63
    3a52:	0f 90       	pop	r0
    3a54:	df 91       	pop	r29
    3a56:	cf 91       	pop	r28
    3a58:	08 95       	ret

00003a5a <_Z8USB_RecvhPvi>:
    3a5a:	ef 92       	push	r14
    3a5c:	ff 92       	push	r15
    3a5e:	0f 93       	push	r16
    3a60:	1f 93       	push	r17
    3a62:	cf 93       	push	r28
    3a64:	df 93       	push	r29
    3a66:	1f 92       	push	r1
    3a68:	cd b7       	in	r28, 0x3d	; 61
    3a6a:	de b7       	in	r29, 0x3e	; 62
    3a6c:	90 91 6a 05 	lds	r25, 0x056A	; 0x80056a <_usbConfiguration>
    3a70:	99 23       	and	r25, r25
    3a72:	11 f0       	breq	.+4      	; 0x3a78 <_Z8USB_RecvhPvi+0x1e>
    3a74:	57 ff       	sbrs	r21, 7
    3a76:	03 c0       	rjmp	.+6      	; 0x3a7e <_Z8USB_RecvhPvi+0x24>
    3a78:	8f ef       	ldi	r24, 0xFF	; 255
    3a7a:	9f ef       	ldi	r25, 0xFF	; 255
    3a7c:	29 c0       	rjmp	.+82     	; 0x3ad0 <_Z8USB_RecvhPvi+0x76>
    3a7e:	8a 01       	movw	r16, r20
    3a80:	7b 01       	movw	r14, r22
    3a82:	68 2f       	mov	r22, r24
    3a84:	ce 01       	movw	r24, r28
    3a86:	01 96       	adiw	r24, 0x01	; 1
    3a88:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <_ZN6LockEPC1Eh>
    3a8c:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    3a90:	30 e0       	ldi	r19, 0x00	; 0
    3a92:	02 17       	cp	r16, r18
    3a94:	13 07       	cpc	r17, r19
    3a96:	0c f4       	brge	.+2      	; 0x3a9a <_Z8USB_RecvhPvi+0x40>
    3a98:	98 01       	movw	r18, r16
    3a9a:	82 2f       	mov	r24, r18
    3a9c:	f7 01       	movw	r30, r14
    3a9e:	94 e6       	ldi	r25, 0x64	; 100
    3aa0:	81 50       	subi	r24, 0x01	; 1
    3aa2:	38 f0       	brcs	.+14     	; 0x3ab2 <_Z8USB_RecvhPvi+0x58>
    3aa4:	28 98       	cbi	0x05, 0	; 5
    3aa6:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <RxLEDPulse>
    3aaa:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    3aae:	41 93       	st	Z+, r20
    3ab0:	f7 cf       	rjmp	.-18     	; 0x3aa0 <_Z8USB_RecvhPvi+0x46>
    3ab2:	21 15       	cp	r18, r1
    3ab4:	31 05       	cpc	r19, r1
    3ab6:	21 f0       	breq	.+8      	; 0x3ac0 <_Z8USB_RecvhPvi+0x66>
    3ab8:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    3abc:	88 23       	and	r24, r24
    3abe:	21 f0       	breq	.+8      	; 0x3ac8 <_Z8USB_RecvhPvi+0x6e>
    3ac0:	89 81       	ldd	r24, Y+1	; 0x01
    3ac2:	8f bf       	out	0x3f, r24	; 63
    3ac4:	c9 01       	movw	r24, r18
    3ac6:	04 c0       	rjmp	.+8      	; 0x3ad0 <_Z8USB_RecvhPvi+0x76>
    3ac8:	8b e6       	ldi	r24, 0x6B	; 107
    3aca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3ace:	f8 cf       	rjmp	.-16     	; 0x3ac0 <_Z8USB_RecvhPvi+0x66>
    3ad0:	0f 90       	pop	r0
    3ad2:	df 91       	pop	r29
    3ad4:	cf 91       	pop	r28
    3ad6:	1f 91       	pop	r17
    3ad8:	0f 91       	pop	r16
    3ada:	ff 90       	pop	r15
    3adc:	ef 90       	pop	r14
    3ade:	08 95       	ret

00003ae0 <_Z8USB_Recvh>:
    3ae0:	cf 93       	push	r28
    3ae2:	df 93       	push	r29
    3ae4:	1f 92       	push	r1
    3ae6:	cd b7       	in	r28, 0x3d	; 61
    3ae8:	de b7       	in	r29, 0x3e	; 62
    3aea:	41 e0       	ldi	r20, 0x01	; 1
    3aec:	50 e0       	ldi	r21, 0x00	; 0
    3aee:	be 01       	movw	r22, r28
    3af0:	6f 5f       	subi	r22, 0xFF	; 255
    3af2:	7f 4f       	sbci	r23, 0xFF	; 255
    3af4:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <_Z8USB_RecvhPvi>
    3af8:	01 97       	sbiw	r24, 0x01	; 1
    3afa:	19 f4       	brne	.+6      	; 0x3b02 <_Z8USB_Recvh+0x22>
    3afc:	89 81       	ldd	r24, Y+1	; 0x01
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	02 c0       	rjmp	.+4      	; 0x3b06 <_Z8USB_Recvh+0x26>
    3b02:	8f ef       	ldi	r24, 0xFF	; 255
    3b04:	9f ef       	ldi	r25, 0xFF	; 255
    3b06:	0f 90       	pop	r0
    3b08:	df 91       	pop	r29
    3b0a:	cf 91       	pop	r28
    3b0c:	08 95       	ret

00003b0e <_Z13USB_SendSpaceh>:
    3b0e:	cf 93       	push	r28
    3b10:	df 93       	push	r29
    3b12:	1f 92       	push	r1
    3b14:	cd b7       	in	r28, 0x3d	; 61
    3b16:	de b7       	in	r29, 0x3e	; 62
    3b18:	68 2f       	mov	r22, r24
    3b1a:	ce 01       	movw	r24, r28
    3b1c:	01 96       	adiw	r24, 0x01	; 1
    3b1e:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <_ZN6LockEPC1Eh>
    3b22:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3b26:	89 2f       	mov	r24, r25
    3b28:	80 72       	andi	r24, 0x20	; 32
    3b2a:	95 ff       	sbrs	r25, 5
    3b2c:	04 c0       	rjmp	.+8      	; 0x3b36 <_Z13USB_SendSpaceh+0x28>
    3b2e:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    3b32:	80 e4       	ldi	r24, 0x40	; 64
    3b34:	89 1b       	sub	r24, r25
    3b36:	99 81       	ldd	r25, Y+1	; 0x01
    3b38:	9f bf       	out	0x3f, r25	; 63
    3b3a:	0f 90       	pop	r0
    3b3c:	df 91       	pop	r29
    3b3e:	cf 91       	pop	r28
    3b40:	08 95       	ret

00003b42 <_Z8USB_SendhPKvi>:
    3b42:	5f 92       	push	r5
    3b44:	6f 92       	push	r6
    3b46:	7f 92       	push	r7
    3b48:	8f 92       	push	r8
    3b4a:	9f 92       	push	r9
    3b4c:	af 92       	push	r10
    3b4e:	bf 92       	push	r11
    3b50:	cf 92       	push	r12
    3b52:	df 92       	push	r13
    3b54:	ef 92       	push	r14
    3b56:	ff 92       	push	r15
    3b58:	0f 93       	push	r16
    3b5a:	1f 93       	push	r17
    3b5c:	cf 93       	push	r28
    3b5e:	df 93       	push	r29
    3b60:	1f 92       	push	r1
    3b62:	cd b7       	in	r28, 0x3d	; 61
    3b64:	de b7       	in	r29, 0x3e	; 62
    3b66:	98 2e       	mov	r9, r24
    3b68:	6b 01       	movw	r12, r22
    3b6a:	b4 2e       	mov	r11, r20
    3b6c:	05 2f       	mov	r16, r21
    3b6e:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <_usbConfiguration>
    3b72:	81 11       	cpse	r24, r1
    3b74:	03 c0       	rjmp	.+6      	; 0x3b7c <_Z8USB_SendhPKvi+0x3a>
    3b76:	8f ef       	ldi	r24, 0xFF	; 255
    3b78:	9f ef       	ldi	r25, 0xFF	; 255
    3b7a:	77 c0       	rjmp	.+238    	; 0x3c6a <_Z8USB_SendhPKvi+0x128>
    3b7c:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <_usbSuspendState>
    3b80:	80 ff       	sbrs	r24, 0
    3b82:	05 c0       	rjmp	.+10     	; 0x3b8e <_Z8USB_SendhPKvi+0x4c>
    3b84:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    3b88:	82 60       	ori	r24, 0x02	; 2
    3b8a:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    3b8e:	eb 2c       	mov	r14, r11
    3b90:	f0 2e       	mov	r15, r16
    3b92:	a1 2c       	mov	r10, r1
    3b94:	8a ef       	ldi	r24, 0xFA	; 250
    3b96:	88 2e       	mov	r8, r24
    3b98:	89 2d       	mov	r24, r9
    3b9a:	80 72       	andi	r24, 0x20	; 32
    3b9c:	68 2e       	mov	r6, r24
    3b9e:	89 2d       	mov	r24, r9
    3ba0:	80 74       	andi	r24, 0x40	; 64
    3ba2:	58 2e       	mov	r5, r24
    3ba4:	9a e3       	ldi	r25, 0x3A	; 58
    3ba6:	79 2e       	mov	r7, r25
    3ba8:	e1 14       	cp	r14, r1
    3baa:	f1 04       	cpc	r15, r1
    3bac:	19 f4       	brne	.+6      	; 0x3bb4 <_Z8USB_SendhPKvi+0x72>
    3bae:	aa 20       	and	r10, r10
    3bb0:	09 f4       	brne	.+2      	; 0x3bb4 <_Z8USB_SendhPKvi+0x72>
    3bb2:	55 c0       	rjmp	.+170    	; 0x3c5e <_Z8USB_SendhPKvi+0x11c>
    3bb4:	89 2d       	mov	r24, r9
    3bb6:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <_Z13USB_SendSpaceh>
    3bba:	18 2f       	mov	r17, r24
    3bbc:	81 11       	cpse	r24, r1
    3bbe:	0a c0       	rjmp	.+20     	; 0x3bd4 <_Z8USB_SendhPKvi+0x92>
    3bc0:	8a 94       	dec	r8
    3bc2:	88 20       	and	r8, r8
    3bc4:	c1 f2       	breq	.-80     	; 0x3b76 <_Z8USB_SendhPKvi+0x34>
    3bc6:	61 e0       	ldi	r22, 0x01	; 1
    3bc8:	70 e0       	ldi	r23, 0x00	; 0
    3bca:	80 e0       	ldi	r24, 0x00	; 0
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	0e 94 32 22 	call	0x4464	; 0x4464 <delay>
    3bd2:	ea cf       	rjmp	.-44     	; 0x3ba8 <_Z8USB_SendhPKvi+0x66>
    3bd4:	90 e0       	ldi	r25, 0x00	; 0
    3bd6:	e8 16       	cp	r14, r24
    3bd8:	f9 06       	cpc	r15, r25
    3bda:	0c f4       	brge	.+2      	; 0x3bde <_Z8USB_SendhPKvi+0x9c>
    3bdc:	1e 2d       	mov	r17, r14
    3bde:	69 2d       	mov	r22, r9
    3be0:	ce 01       	movw	r24, r28
    3be2:	01 96       	adiw	r24, 0x01	; 1
    3be4:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <_ZN6LockEPC1Eh>
    3be8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3bec:	85 ff       	sbrs	r24, 5
    3bee:	34 c0       	rjmp	.+104    	; 0x3c58 <_Z8USB_SendhPKvi+0x116>
    3bf0:	81 2f       	mov	r24, r17
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	e8 1a       	sub	r14, r24
    3bf6:	f9 0a       	sbc	r15, r25
    3bf8:	66 20       	and	r6, r6
    3bfa:	29 f0       	breq	.+10     	; 0x3c06 <_Z8USB_SendhPKvi+0xc4>
    3bfc:	11 50       	subi	r17, 0x01	; 1
    3bfe:	a0 f0       	brcs	.+40     	; 0x3c28 <_Z8USB_SendhPKvi+0xe6>
    3c00:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    3c04:	fb cf       	rjmp	.-10     	; 0x3bfc <_Z8USB_SendhPKvi+0xba>
    3c06:	f6 01       	movw	r30, r12
    3c08:	97 fe       	sbrs	r9, 7
    3c0a:	0a c0       	rjmp	.+20     	; 0x3c20 <_Z8USB_SendhPKvi+0xde>
    3c0c:	11 50       	subi	r17, 0x01	; 1
    3c0e:	50 f0       	brcs	.+20     	; 0x3c24 <_Z8USB_SendhPKvi+0xe2>
    3c10:	24 91       	lpm	r18, Z
    3c12:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    3c16:	31 96       	adiw	r30, 0x01	; 1
    3c18:	f9 cf       	rjmp	.-14     	; 0x3c0c <_Z8USB_SendhPKvi+0xca>
    3c1a:	21 91       	ld	r18, Z+
    3c1c:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    3c20:	11 50       	subi	r17, 0x01	; 1
    3c22:	d8 f7       	brcc	.-10     	; 0x3c1a <_Z8USB_SendhPKvi+0xd8>
    3c24:	c8 0e       	add	r12, r24
    3c26:	d9 1e       	adc	r13, r25
    3c28:	aa 20       	and	r10, r10
    3c2a:	19 f0       	breq	.+6      	; 0x3c32 <_Z8USB_SendhPKvi+0xf0>
    3c2c:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3c30:	0b c0       	rjmp	.+22     	; 0x3c48 <_Z8USB_SendhPKvi+0x106>
    3c32:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3c36:	85 fd       	sbrc	r24, 5
    3c38:	09 c0       	rjmp	.+18     	; 0x3c4c <_Z8USB_SendhPKvi+0x10a>
    3c3a:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3c3e:	aa 24       	eor	r10, r10
    3c40:	a3 94       	inc	r10
    3c42:	e1 14       	cp	r14, r1
    3c44:	f1 04       	cpc	r15, r1
    3c46:	41 f0       	breq	.+16     	; 0x3c58 <_Z8USB_SendhPKvi+0x116>
    3c48:	a1 2c       	mov	r10, r1
    3c4a:	06 c0       	rjmp	.+12     	; 0x3c58 <_Z8USB_SendhPKvi+0x116>
    3c4c:	e1 14       	cp	r14, r1
    3c4e:	f1 04       	cpc	r15, r1
    3c50:	19 f4       	brne	.+6      	; 0x3c58 <_Z8USB_SendhPKvi+0x116>
    3c52:	51 10       	cpse	r5, r1
    3c54:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3c58:	89 81       	ldd	r24, Y+1	; 0x01
    3c5a:	8f bf       	out	0x3f, r24	; 63
    3c5c:	a5 cf       	rjmp	.-182    	; 0x3ba8 <_Z8USB_SendhPKvi+0x66>
    3c5e:	5d 98       	cbi	0x0b, 5	; 11
    3c60:	84 e6       	ldi	r24, 0x64	; 100
    3c62:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <TxLEDPulse>
    3c66:	8b 2d       	mov	r24, r11
    3c68:	90 2f       	mov	r25, r16
    3c6a:	0f 90       	pop	r0
    3c6c:	df 91       	pop	r29
    3c6e:	cf 91       	pop	r28
    3c70:	1f 91       	pop	r17
    3c72:	0f 91       	pop	r16
    3c74:	ff 90       	pop	r15
    3c76:	ef 90       	pop	r14
    3c78:	df 90       	pop	r13
    3c7a:	cf 90       	pop	r12
    3c7c:	bf 90       	pop	r11
    3c7e:	af 90       	pop	r10
    3c80:	9f 90       	pop	r9
    3c82:	8f 90       	pop	r8
    3c84:	7f 90       	pop	r7
    3c86:	6f 90       	pop	r6
    3c88:	5f 90       	pop	r5
    3c8a:	08 95       	ret

00003c8c <_Z11InitControli>:
    3c8c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3c90:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <_ZL6_cmark+0x1>
    3c94:	10 92 66 05 	sts	0x0566, r1	; 0x800566 <_ZL6_cmark>
    3c98:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <_ZL5_cend+0x1>
    3c9c:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <_ZL5_cend>
    3ca0:	08 95       	ret

00003ca2 <_Z15USB_SendControlhPKvi>:
    3ca2:	df 92       	push	r13
    3ca4:	ef 92       	push	r14
    3ca6:	ff 92       	push	r15
    3ca8:	0f 93       	push	r16
    3caa:	1f 93       	push	r17
    3cac:	cf 93       	push	r28
    3cae:	df 93       	push	r29
    3cb0:	d8 2e       	mov	r13, r24
    3cb2:	8a 01       	movw	r16, r20
    3cb4:	7b 01       	movw	r14, r22
    3cb6:	e4 0e       	add	r14, r20
    3cb8:	f5 1e       	adc	r15, r21
    3cba:	eb 01       	movw	r28, r22
    3cbc:	ce 15       	cp	r28, r14
    3cbe:	df 05       	cpc	r29, r15
    3cc0:	71 f0       	breq	.+28     	; 0x3cde <_Z15USB_SendControlhPKvi+0x3c>
    3cc2:	d7 fe       	sbrs	r13, 7
    3cc4:	03 c0       	rjmp	.+6      	; 0x3ccc <_Z15USB_SendControlhPKvi+0x2a>
    3cc6:	fe 01       	movw	r30, r28
    3cc8:	84 91       	lpm	r24, Z
    3cca:	01 c0       	rjmp	.+2      	; 0x3cce <_Z15USB_SendControlhPKvi+0x2c>
    3ccc:	88 81       	ld	r24, Y
    3cce:	0e 94 77 1c 	call	0x38ee	; 0x38ee <_ZL11SendControlh>
    3cd2:	21 96       	adiw	r28, 0x01	; 1
    3cd4:	81 11       	cpse	r24, r1
    3cd6:	f2 cf       	rjmp	.-28     	; 0x3cbc <_Z15USB_SendControlhPKvi+0x1a>
    3cd8:	8f ef       	ldi	r24, 0xFF	; 255
    3cda:	9f ef       	ldi	r25, 0xFF	; 255
    3cdc:	01 c0       	rjmp	.+2      	; 0x3ce0 <_Z15USB_SendControlhPKvi+0x3e>
    3cde:	c8 01       	movw	r24, r16
    3ce0:	df 91       	pop	r29
    3ce2:	cf 91       	pop	r28
    3ce4:	1f 91       	pop	r17
    3ce6:	0f 91       	pop	r16
    3ce8:	ff 90       	pop	r15
    3cea:	ef 90       	pop	r14
    3cec:	df 90       	pop	r13
    3cee:	08 95       	ret

00003cf0 <_Z15USB_RecvControlPvi>:
    3cf0:	af 92       	push	r10
    3cf2:	bf 92       	push	r11
    3cf4:	df 92       	push	r13
    3cf6:	ef 92       	push	r14
    3cf8:	ff 92       	push	r15
    3cfa:	0f 93       	push	r16
    3cfc:	1f 93       	push	r17
    3cfe:	cf 93       	push	r28
    3d00:	df 93       	push	r29
    3d02:	5c 01       	movw	r10, r24
    3d04:	8b 01       	movw	r16, r22
    3d06:	eb 01       	movw	r28, r22
    3d08:	9b ef       	ldi	r25, 0xFB	; 251
    3d0a:	d9 2e       	mov	r13, r25
    3d0c:	20 97       	sbiw	r28, 0x00	; 0
    3d0e:	c1 f0       	breq	.+48     	; 0x3d40 <_Z15USB_RecvControlPvi+0x50>
    3d10:	7e 01       	movw	r14, r28
    3d12:	c1 34       	cpi	r28, 0x41	; 65
    3d14:	d1 05       	cpc	r29, r1
    3d16:	1c f0       	brlt	.+6      	; 0x3d1e <_Z15USB_RecvControlPvi+0x2e>
    3d18:	80 e4       	ldi	r24, 0x40	; 64
    3d1a:	e8 2e       	mov	r14, r24
    3d1c:	f1 2c       	mov	r15, r1
    3d1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3d22:	82 ff       	sbrs	r24, 2
    3d24:	fc cf       	rjmp	.-8      	; 0x3d1e <_Z15USB_RecvControlPvi+0x2e>
    3d26:	c8 01       	movw	r24, r16
    3d28:	8c 1b       	sub	r24, r28
    3d2a:	9d 0b       	sbc	r25, r29
    3d2c:	6e 2d       	mov	r22, r14
    3d2e:	8a 0d       	add	r24, r10
    3d30:	9b 1d       	adc	r25, r11
    3d32:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <_ZL4RecvPVhh>
    3d36:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3d3a:	ce 19       	sub	r28, r14
    3d3c:	df 09       	sbc	r29, r15
    3d3e:	e6 cf       	rjmp	.-52     	; 0x3d0c <_Z15USB_RecvControlPvi+0x1c>
    3d40:	c8 01       	movw	r24, r16
    3d42:	df 91       	pop	r29
    3d44:	cf 91       	pop	r28
    3d46:	1f 91       	pop	r17
    3d48:	0f 91       	pop	r16
    3d4a:	ff 90       	pop	r15
    3d4c:	ef 90       	pop	r14
    3d4e:	df 90       	pop	r13
    3d50:	bf 90       	pop	r11
    3d52:	af 90       	pop	r10
    3d54:	08 95       	ret

00003d56 <__vector_11>:
    3d56:	1f 92       	push	r1
    3d58:	0f 92       	push	r0
    3d5a:	0f b6       	in	r0, 0x3f	; 63
    3d5c:	0f 92       	push	r0
    3d5e:	11 24       	eor	r1, r1
    3d60:	cf 92       	push	r12
    3d62:	df 92       	push	r13
    3d64:	ef 92       	push	r14
    3d66:	ff 92       	push	r15
    3d68:	0f 93       	push	r16
    3d6a:	1f 93       	push	r17
    3d6c:	2f 93       	push	r18
    3d6e:	3f 93       	push	r19
    3d70:	4f 93       	push	r20
    3d72:	5f 93       	push	r21
    3d74:	6f 93       	push	r22
    3d76:	7f 93       	push	r23
    3d78:	8f 93       	push	r24
    3d7a:	9f 93       	push	r25
    3d7c:	af 93       	push	r26
    3d7e:	bf 93       	push	r27
    3d80:	ef 93       	push	r30
    3d82:	ff 93       	push	r31
    3d84:	cf 93       	push	r28
    3d86:	df 93       	push	r29
    3d88:	cd b7       	in	r28, 0x3d	; 61
    3d8a:	de b7       	in	r29, 0x3e	; 62
    3d8c:	6c 97       	sbiw	r28, 0x1c	; 28
    3d8e:	de bf       	out	0x3e, r29	; 62
    3d90:	cd bf       	out	0x3d, r28	; 61
    3d92:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3d96:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3d9a:	83 ff       	sbrs	r24, 3
    3d9c:	17 c1       	rjmp	.+558    	; 0x3fcc <__vector_11+0x276>
    3d9e:	68 e0       	ldi	r22, 0x08	; 8
    3da0:	ce 01       	movw	r24, r28
    3da2:	45 96       	adiw	r24, 0x15	; 21
    3da4:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <_ZL4RecvPVhh>
    3da8:	82 ef       	ldi	r24, 0xF2	; 242
    3daa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3dae:	8d 89       	ldd	r24, Y+21	; 0x15
    3db0:	87 ff       	sbrs	r24, 7
    3db2:	05 c0       	rjmp	.+10     	; 0x3dbe <__vector_11+0x68>
    3db4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3db8:	90 ff       	sbrs	r25, 0
    3dba:	fc cf       	rjmp	.-8      	; 0x3db4 <__vector_11+0x5e>
    3dbc:	03 c0       	rjmp	.+6      	; 0x3dc4 <__vector_11+0x6e>
    3dbe:	9e ef       	ldi	r25, 0xFE	; 254
    3dc0:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3dc4:	98 2f       	mov	r25, r24
    3dc6:	90 76       	andi	r25, 0x60	; 96
    3dc8:	09 f0       	breq	.+2      	; 0x3dcc <__vector_11+0x76>
    3dca:	d8 c0       	rjmp	.+432    	; 0x3f7c <__vector_11+0x226>
    3dcc:	9e 89       	ldd	r25, Y+22	; 0x16
    3dce:	4f 89       	ldd	r20, Y+23	; 0x17
    3dd0:	58 8d       	ldd	r21, Y+24	; 0x18
    3dd2:	2f 89       	ldd	r18, Y+23	; 0x17
    3dd4:	18 8d       	ldd	r17, Y+24	; 0x18
    3dd6:	91 11       	cpse	r25, r1
    3dd8:	0c c0       	rjmp	.+24     	; 0x3df2 <__vector_11+0x9c>
    3dda:	80 38       	cpi	r24, 0x80	; 128
    3ddc:	29 f4       	brne	.+10     	; 0x3de8 <__vector_11+0x92>
    3dde:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <_usbCurrentStatus>
    3de2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    3de6:	02 c0       	rjmp	.+4      	; 0x3dec <__vector_11+0x96>
    3de8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    3dec:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    3df0:	e6 c0       	rjmp	.+460    	; 0x3fbe <__vector_11+0x268>
    3df2:	91 30       	cpi	r25, 0x01	; 1
    3df4:	51 f4       	brne	.+20     	; 0x3e0a <__vector_11+0xb4>
    3df6:	81 11       	cpse	r24, r1
    3df8:	e2 c0       	rjmp	.+452    	; 0x3fbe <__vector_11+0x268>
    3dfa:	41 30       	cpi	r20, 0x01	; 1
    3dfc:	51 05       	cpc	r21, r1
    3dfe:	09 f0       	breq	.+2      	; 0x3e02 <__vector_11+0xac>
    3e00:	de c0       	rjmp	.+444    	; 0x3fbe <__vector_11+0x268>
    3e02:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <_usbCurrentStatus>
    3e06:	8d 7f       	andi	r24, 0xFD	; 253
    3e08:	0b c0       	rjmp	.+22     	; 0x3e20 <__vector_11+0xca>
    3e0a:	93 30       	cpi	r25, 0x03	; 3
    3e0c:	61 f4       	brne	.+24     	; 0x3e26 <__vector_11+0xd0>
    3e0e:	81 11       	cpse	r24, r1
    3e10:	d6 c0       	rjmp	.+428    	; 0x3fbe <__vector_11+0x268>
    3e12:	41 30       	cpi	r20, 0x01	; 1
    3e14:	51 05       	cpc	r21, r1
    3e16:	09 f0       	breq	.+2      	; 0x3e1a <__vector_11+0xc4>
    3e18:	d2 c0       	rjmp	.+420    	; 0x3fbe <__vector_11+0x268>
    3e1a:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <_usbCurrentStatus>
    3e1e:	82 60       	ori	r24, 0x02	; 2
    3e20:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <_usbCurrentStatus>
    3e24:	cc c0       	rjmp	.+408    	; 0x3fbe <__vector_11+0x268>
    3e26:	95 30       	cpi	r25, 0x05	; 5
    3e28:	49 f4       	brne	.+18     	; 0x3e3c <__vector_11+0xe6>
    3e2a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3e2e:	80 ff       	sbrs	r24, 0
    3e30:	fc cf       	rjmp	.-8      	; 0x3e2a <__vector_11+0xd4>
    3e32:	82 2f       	mov	r24, r18
    3e34:	80 68       	ori	r24, 0x80	; 128
    3e36:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    3e3a:	c1 c0       	rjmp	.+386    	; 0x3fbe <__vector_11+0x268>
    3e3c:	96 30       	cpi	r25, 0x06	; 6
    3e3e:	09 f0       	breq	.+2      	; 0x3e42 <__vector_11+0xec>
    3e40:	70 c0       	rjmp	.+224    	; 0x3f22 <__vector_11+0x1cc>
    3e42:	eb 8c       	ldd	r14, Y+27	; 0x1b
    3e44:	fc 8c       	ldd	r15, Y+28	; 0x1c
    3e46:	12 30       	cpi	r17, 0x02	; 2
    3e48:	69 f5       	brne	.+90     	; 0x3ea4 <__vector_11+0x14e>
    3e4a:	80 e0       	ldi	r24, 0x00	; 0
    3e4c:	90 e0       	ldi	r25, 0x00	; 0
    3e4e:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <_Z11InitControli>
    3e52:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <_ZL14SendInterfacesv>
    3e56:	99 e0       	ldi	r25, 0x09	; 9
    3e58:	9e 01       	movw	r18, r28
    3e5a:	2f 5f       	subi	r18, 0xFF	; 255
    3e5c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e5e:	69 01       	movw	r12, r18
    3e60:	f9 01       	movw	r30, r18
    3e62:	29 2f       	mov	r18, r25
    3e64:	11 92       	st	Z+, r1
    3e66:	2a 95       	dec	r18
    3e68:	e9 f7       	brne	.-6      	; 0x3e64 <__vector_11+0x10e>
    3e6a:	99 83       	std	Y+1, r25	; 0x01
    3e6c:	1a 83       	std	Y+2, r17	; 0x02
    3e6e:	91 e0       	ldi	r25, 0x01	; 1
    3e70:	9e 83       	std	Y+6, r25	; 0x06
    3e72:	90 ea       	ldi	r25, 0xA0	; 160
    3e74:	98 87       	std	Y+8, r25	; 0x08
    3e76:	9a ef       	ldi	r25, 0xFA	; 250
    3e78:	99 87       	std	Y+9, r25	; 0x09
    3e7a:	20 91 66 05 	lds	r18, 0x0566	; 0x800566 <_ZL6_cmark>
    3e7e:	30 91 67 05 	lds	r19, 0x0567	; 0x800567 <_ZL6_cmark+0x1>
    3e82:	27 5f       	subi	r18, 0xF7	; 247
    3e84:	3f 4f       	sbci	r19, 0xFF	; 255
    3e86:	3c 83       	std	Y+4, r19	; 0x04
    3e88:	2b 83       	std	Y+3, r18	; 0x03
    3e8a:	8d 83       	std	Y+5, r24	; 0x05
    3e8c:	c7 01       	movw	r24, r14
    3e8e:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <_Z11InitControli>
    3e92:	49 e0       	ldi	r20, 0x09	; 9
    3e94:	50 e0       	ldi	r21, 0x00	; 0
    3e96:	b6 01       	movw	r22, r12
    3e98:	80 e0       	ldi	r24, 0x00	; 0
    3e9a:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_Z15USB_SendControlhPKvi>
    3e9e:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <_ZL14SendInterfacesv>
    3ea2:	8d c0       	rjmp	.+282    	; 0x3fbe <__vector_11+0x268>
    3ea4:	c7 01       	movw	r24, r14
    3ea6:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <_Z11InitControli>
    3eaa:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <_Z12PluggableUSBv>
    3eae:	be 01       	movw	r22, r28
    3eb0:	6b 5e       	subi	r22, 0xEB	; 235
    3eb2:	7f 4f       	sbci	r23, 0xFF	; 255
    3eb4:	0e 94 30 26 	call	0x4c60	; 0x4c60 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    3eb8:	00 97       	sbiw	r24, 0x00	; 0
    3eba:	19 f0       	breq	.+6      	; 0x3ec2 <__vector_11+0x16c>
    3ebc:	0c f0       	brlt	.+2      	; 0x3ec0 <__vector_11+0x16a>
    3ebe:	7f c0       	rjmp	.+254    	; 0x3fbe <__vector_11+0x268>
    3ec0:	82 c0       	rjmp	.+260    	; 0x3fc6 <__vector_11+0x270>
    3ec2:	11 30       	cpi	r17, 0x01	; 1
    3ec4:	09 f4       	brne	.+2      	; 0x3ec8 <__vector_11+0x172>
    3ec6:	70 c0       	rjmp	.+224    	; 0x3fa8 <__vector_11+0x252>
    3ec8:	13 30       	cpi	r17, 0x03	; 3
    3eca:	09 f0       	breq	.+2      	; 0x3ece <__vector_11+0x178>
    3ecc:	7c c0       	rjmp	.+248    	; 0x3fc6 <__vector_11+0x270>
    3ece:	8f 89       	ldd	r24, Y+23	; 0x17
    3ed0:	88 23       	and	r24, r24
    3ed2:	09 f4       	brne	.+2      	; 0x3ed6 <__vector_11+0x180>
    3ed4:	6c c0       	rjmp	.+216    	; 0x3fae <__vector_11+0x258>
    3ed6:	82 30       	cpi	r24, 0x02	; 2
    3ed8:	29 f4       	brne	.+10     	; 0x3ee4 <__vector_11+0x18e>
    3eda:	40 e8       	ldi	r20, 0x80	; 128
    3edc:	60 e1       	ldi	r22, 0x10	; 16
    3ede:	86 e0       	ldi	r24, 0x06	; 6
    3ee0:	91 e0       	ldi	r25, 0x01	; 1
    3ee2:	06 c0       	rjmp	.+12     	; 0x3ef0 <__vector_11+0x19a>
    3ee4:	81 30       	cpi	r24, 0x01	; 1
    3ee6:	39 f4       	brne	.+14     	; 0x3ef6 <__vector_11+0x1a0>
    3ee8:	40 e8       	ldi	r20, 0x80	; 128
    3eea:	6b e0       	ldi	r22, 0x0B	; 11
    3eec:	8a ef       	ldi	r24, 0xFA	; 250
    3eee:	90 e0       	ldi	r25, 0x00	; 0
    3ef0:	0e 94 a5 1c 	call	0x394a	; 0x394a <_ZL24USB_SendStringDescriptorPKhhh>
    3ef4:	56 c0       	rjmp	.+172    	; 0x3fa2 <__vector_11+0x24c>
    3ef6:	83 30       	cpi	r24, 0x03	; 3
    3ef8:	09 f0       	breq	.+2      	; 0x3efc <__vector_11+0x1a6>
    3efa:	65 c0       	rjmp	.+202    	; 0x3fc6 <__vector_11+0x270>
    3efc:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <_Z12PluggableUSBv>
    3f00:	8e 01       	movw	r16, r28
    3f02:	0f 5f       	subi	r16, 0xFF	; 255
    3f04:	1f 4f       	sbci	r17, 0xFF	; 255
    3f06:	b8 01       	movw	r22, r16
    3f08:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <_ZN13PluggableUSB_12getShortNameEPc>
    3f0c:	f8 01       	movw	r30, r16
    3f0e:	01 90       	ld	r0, Z+
    3f10:	00 20       	and	r0, r0
    3f12:	e9 f7       	brne	.-6      	; 0x3f0e <__vector_11+0x1b8>
    3f14:	31 97       	sbiw	r30, 0x01	; 1
    3f16:	bf 01       	movw	r22, r30
    3f18:	60 1b       	sub	r22, r16
    3f1a:	71 0b       	sbc	r23, r17
    3f1c:	40 e0       	ldi	r20, 0x00	; 0
    3f1e:	c8 01       	movw	r24, r16
    3f20:	e7 cf       	rjmp	.-50     	; 0x3ef0 <__vector_11+0x19a>
    3f22:	97 30       	cpi	r25, 0x07	; 7
    3f24:	09 f4       	brne	.+2      	; 0x3f28 <__vector_11+0x1d2>
    3f26:	4f c0       	rjmp	.+158    	; 0x3fc6 <__vector_11+0x270>
    3f28:	98 30       	cpi	r25, 0x08	; 8
    3f2a:	21 f4       	brne	.+8      	; 0x3f34 <__vector_11+0x1de>
    3f2c:	81 e0       	ldi	r24, 0x01	; 1
    3f2e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    3f32:	45 c0       	rjmp	.+138    	; 0x3fbe <__vector_11+0x268>
    3f34:	99 30       	cpi	r25, 0x09	; 9
    3f36:	09 f0       	breq	.+2      	; 0x3f3a <__vector_11+0x1e4>
    3f38:	42 c0       	rjmp	.+132    	; 0x3fbe <__vector_11+0x268>
    3f3a:	83 70       	andi	r24, 0x03	; 3
    3f3c:	09 f0       	breq	.+2      	; 0x3f40 <__vector_11+0x1ea>
    3f3e:	43 c0       	rjmp	.+134    	; 0x3fc6 <__vector_11+0x270>
    3f40:	e9 e1       	ldi	r30, 0x19	; 25
    3f42:	f1 e0       	ldi	r31, 0x01	; 1
    3f44:	81 e0       	ldi	r24, 0x01	; 1
    3f46:	31 e0       	ldi	r19, 0x01	; 1
    3f48:	96 e3       	ldi	r25, 0x36	; 54
    3f4a:	20 81       	ld	r18, Z
    3f4c:	21 11       	cpse	r18, r1
    3f4e:	09 c0       	rjmp	.+18     	; 0x3f62 <__vector_11+0x20c>
    3f50:	8e e7       	ldi	r24, 0x7E	; 126
    3f52:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    3f56:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    3f5a:	8f 89       	ldd	r24, Y+23	; 0x17
    3f5c:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <_usbConfiguration>
    3f60:	2e c0       	rjmp	.+92     	; 0x3fbe <__vector_11+0x268>
    3f62:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3f66:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    3f6a:	21 91       	ld	r18, Z+
    3f6c:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    3f70:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    3f74:	8f 5f       	subi	r24, 0xFF	; 255
    3f76:	87 30       	cpi	r24, 0x07	; 7
    3f78:	41 f7       	brne	.-48     	; 0x3f4a <__vector_11+0x1f4>
    3f7a:	ea cf       	rjmp	.-44     	; 0x3f50 <__vector_11+0x1fa>
    3f7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f80:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <_Z11InitControli>
    3f84:	89 8d       	ldd	r24, Y+25	; 0x19
    3f86:	81 11       	cpse	r24, r1
    3f88:	05 c0       	rjmp	.+10     	; 0x3f94 <__vector_11+0x23e>
    3f8a:	ce 01       	movw	r24, r28
    3f8c:	45 96       	adiw	r24, 0x15	; 21
    3f8e:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <_Z9CDC_SetupR8USBSetup>
    3f92:	07 c0       	rjmp	.+14     	; 0x3fa2 <__vector_11+0x24c>
    3f94:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <_Z12PluggableUSBv>
    3f98:	be 01       	movw	r22, r28
    3f9a:	6b 5e       	subi	r22, 0xEB	; 235
    3f9c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f9e:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <_ZN13PluggableUSB_5setupER8USBSetup>
    3fa2:	88 23       	and	r24, r24
    3fa4:	81 f0       	breq	.+32     	; 0x3fc6 <__vector_11+0x270>
    3fa6:	0b c0       	rjmp	.+22     	; 0x3fbe <__vector_11+0x268>
    3fa8:	68 ee       	ldi	r22, 0xE8	; 232
    3faa:	70 e0       	ldi	r23, 0x00	; 0
    3fac:	02 c0       	rjmp	.+4      	; 0x3fb2 <__vector_11+0x25c>
    3fae:	67 e1       	ldi	r22, 0x17	; 23
    3fb0:	71 e0       	ldi	r23, 0x01	; 1
    3fb2:	fb 01       	movw	r30, r22
    3fb4:	44 91       	lpm	r20, Z
    3fb6:	50 e0       	ldi	r21, 0x00	; 0
    3fb8:	80 e8       	ldi	r24, 0x80	; 128
    3fba:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_Z15USB_SendControlhPKvi>
    3fbe:	8e ef       	ldi	r24, 0xFE	; 254
    3fc0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3fc4:	03 c0       	rjmp	.+6      	; 0x3fcc <__vector_11+0x276>
    3fc6:	81 e2       	ldi	r24, 0x21	; 33
    3fc8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    3fcc:	6c 96       	adiw	r28, 0x1c	; 28
    3fce:	0f b6       	in	r0, 0x3f	; 63
    3fd0:	f8 94       	cli
    3fd2:	de bf       	out	0x3e, r29	; 62
    3fd4:	0f be       	out	0x3f, r0	; 63
    3fd6:	cd bf       	out	0x3d, r28	; 61
    3fd8:	df 91       	pop	r29
    3fda:	cf 91       	pop	r28
    3fdc:	ff 91       	pop	r31
    3fde:	ef 91       	pop	r30
    3fe0:	bf 91       	pop	r27
    3fe2:	af 91       	pop	r26
    3fe4:	9f 91       	pop	r25
    3fe6:	8f 91       	pop	r24
    3fe8:	7f 91       	pop	r23
    3fea:	6f 91       	pop	r22
    3fec:	5f 91       	pop	r21
    3fee:	4f 91       	pop	r20
    3ff0:	3f 91       	pop	r19
    3ff2:	2f 91       	pop	r18
    3ff4:	1f 91       	pop	r17
    3ff6:	0f 91       	pop	r16
    3ff8:	ff 90       	pop	r15
    3ffa:	ef 90       	pop	r14
    3ffc:	df 90       	pop	r13
    3ffe:	cf 90       	pop	r12
    4000:	0f 90       	pop	r0
    4002:	0f be       	out	0x3f, r0	; 63
    4004:	0f 90       	pop	r0
    4006:	1f 90       	pop	r1
    4008:	18 95       	reti

0000400a <_Z9USB_Flushh>:
    400a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    400e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    4012:	88 23       	and	r24, r24
    4014:	19 f0       	breq	.+6      	; 0x401c <_Z9USB_Flushh+0x12>
    4016:	8a e3       	ldi	r24, 0x3A	; 58
    4018:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    401c:	08 95       	ret

0000401e <__vector_10>:
    401e:	1f 92       	push	r1
    4020:	0f 92       	push	r0
    4022:	0f b6       	in	r0, 0x3f	; 63
    4024:	0f 92       	push	r0
    4026:	11 24       	eor	r1, r1
    4028:	2f 93       	push	r18
    402a:	3f 93       	push	r19
    402c:	4f 93       	push	r20
    402e:	5f 93       	push	r21
    4030:	6f 93       	push	r22
    4032:	7f 93       	push	r23
    4034:	8f 93       	push	r24
    4036:	9f 93       	push	r25
    4038:	af 93       	push	r26
    403a:	bf 93       	push	r27
    403c:	cf 93       	push	r28
    403e:	ef 93       	push	r30
    4040:	ff 93       	push	r31
    4042:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    4046:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    404a:	83 7f       	andi	r24, 0xF3	; 243
    404c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    4050:	c3 ff       	sbrs	r28, 3
    4052:	0f c0       	rjmp	.+30     	; 0x4072 <__vector_10+0x54>
    4054:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    4058:	81 e0       	ldi	r24, 0x01	; 1
    405a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    405e:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    4062:	82 e3       	ldi	r24, 0x32	; 50
    4064:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    4068:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <_usbConfiguration>
    406c:	88 e0       	ldi	r24, 0x08	; 8
    406e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    4072:	c2 ff       	sbrs	r28, 2
    4074:	19 c0       	rjmp	.+50     	; 0x40a8 <__vector_10+0x8a>
    4076:	83 e0       	ldi	r24, 0x03	; 3
    4078:	0e 94 05 20 	call	0x400a	; 0x400a <_Z9USB_Flushh>
    407c:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <TxLEDPulse>
    4080:	88 23       	and	r24, r24
    4082:	39 f0       	breq	.+14     	; 0x4092 <__vector_10+0x74>
    4084:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <TxLEDPulse>
    4088:	81 50       	subi	r24, 0x01	; 1
    408a:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <TxLEDPulse>
    408e:	88 23       	and	r24, r24
    4090:	89 f1       	breq	.+98     	; 0x40f4 <__vector_10+0xd6>
    4092:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <RxLEDPulse>
    4096:	88 23       	and	r24, r24
    4098:	39 f0       	breq	.+14     	; 0x40a8 <__vector_10+0x8a>
    409a:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <RxLEDPulse>
    409e:	81 50       	subi	r24, 0x01	; 1
    40a0:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <RxLEDPulse>
    40a4:	88 23       	and	r24, r24
    40a6:	41 f1       	breq	.+80     	; 0x40f8 <__vector_10+0xda>
    40a8:	c4 ff       	sbrs	r28, 4
    40aa:	10 c0       	rjmp	.+32     	; 0x40cc <__vector_10+0xae>
    40ac:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    40b0:	8e 7e       	andi	r24, 0xEE	; 238
    40b2:	81 60       	ori	r24, 0x01	; 1
    40b4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    40b8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    40bc:	8f 7e       	andi	r24, 0xEF	; 239
    40be:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    40c2:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <_usbSuspendState>
    40c6:	8e 7e       	andi	r24, 0xEE	; 238
    40c8:	80 61       	ori	r24, 0x10	; 16
    40ca:	11 c0       	rjmp	.+34     	; 0x40ee <__vector_10+0xd0>
    40cc:	c0 ff       	sbrs	r28, 0
    40ce:	16 c0       	rjmp	.+44     	; 0x40fc <__vector_10+0xde>
    40d0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    40d4:	8e 7e       	andi	r24, 0xEE	; 238
    40d6:	80 61       	ori	r24, 0x10	; 16
    40d8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    40dc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    40e0:	8e 7e       	andi	r24, 0xEE	; 238
    40e2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    40e6:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <_usbSuspendState>
    40ea:	8e 7e       	andi	r24, 0xEE	; 238
    40ec:	81 60       	ori	r24, 0x01	; 1
    40ee:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <_usbSuspendState>
    40f2:	04 c0       	rjmp	.+8      	; 0x40fc <__vector_10+0xde>
    40f4:	5d 9a       	sbi	0x0b, 5	; 11
    40f6:	cd cf       	rjmp	.-102    	; 0x4092 <__vector_10+0x74>
    40f8:	28 9a       	sbi	0x05, 0	; 5
    40fa:	d6 cf       	rjmp	.-84     	; 0x40a8 <__vector_10+0x8a>
    40fc:	ff 91       	pop	r31
    40fe:	ef 91       	pop	r30
    4100:	cf 91       	pop	r28
    4102:	bf 91       	pop	r27
    4104:	af 91       	pop	r26
    4106:	9f 91       	pop	r25
    4108:	8f 91       	pop	r24
    410a:	7f 91       	pop	r23
    410c:	6f 91       	pop	r22
    410e:	5f 91       	pop	r21
    4110:	4f 91       	pop	r20
    4112:	3f 91       	pop	r19
    4114:	2f 91       	pop	r18
    4116:	0f 90       	pop	r0
    4118:	0f be       	out	0x3f, r0	; 63
    411a:	0f 90       	pop	r0
    411c:	1f 90       	pop	r1
    411e:	18 95       	reti

00004120 <_ZN10USBDevice_6attachEv>:
{
}

void USBDevice_::attach()
{
	_usbConfiguration = 0;
    4120:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <_usbConfiguration>
	_usbCurrentStatus = 0;
    4124:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <_usbCurrentStatus>
	_usbSuspendState = 0;
    4128:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <_usbSuspendState>
	USB_ClockEnable();
    412c:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <_ZL15USB_ClockEnablev>

	UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear already pending WAKEUP / SUSPEND requests
    4130:	e1 ee       	ldi	r30, 0xE1	; 225
    4132:	f0 e0       	ldi	r31, 0x00	; 0
    4134:	80 81       	ld	r24, Z
    4136:	8e 7e       	andi	r24, 0xEE	; 238
    4138:	80 83       	st	Z, r24
	UDIEN = (1<<EORSTE) | (1<<SOFE) | (1<<SUSPE);	// Enable interrupts for EOR (End of Reset), SOF (start of frame) and SUSPEND
    413a:	8d e0       	ldi	r24, 0x0D	; 13
    413c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	
	TX_RX_LED_INIT;
    4140:	55 9a       	sbi	0x0a, 5	; 10
    4142:	20 9a       	sbi	0x04, 0	; 4
    4144:	08 95       	ret

00004146 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    4146:	08 95       	ret

00004148 <attachInterrupt>:
    4148:	85 30       	cpi	r24, 0x05	; 5
    414a:	08 f0       	brcs	.+2      	; 0x414e <attachInterrupt+0x6>
    414c:	4c c0       	rjmp	.+152    	; 0x41e6 <attachInterrupt+0x9e>
    414e:	e8 2f       	mov	r30, r24
    4150:	f0 e0       	ldi	r31, 0x00	; 0
    4152:	ee 0f       	add	r30, r30
    4154:	ff 1f       	adc	r31, r31
    4156:	e1 5e       	subi	r30, 0xE1	; 225
    4158:	fe 4f       	sbci	r31, 0xFE	; 254
    415a:	71 83       	std	Z+1, r23	; 0x01
    415c:	60 83       	st	Z, r22
    415e:	82 30       	cpi	r24, 0x02	; 2
    4160:	e1 f0       	breq	.+56     	; 0x419a <attachInterrupt+0x52>
    4162:	18 f4       	brcc	.+6      	; 0x416a <attachInterrupt+0x22>
    4164:	81 30       	cpi	r24, 0x01	; 1
    4166:	69 f0       	breq	.+26     	; 0x4182 <attachInterrupt+0x3a>
    4168:	04 c0       	rjmp	.+8      	; 0x4172 <attachInterrupt+0x2a>
    416a:	83 30       	cpi	r24, 0x03	; 3
    416c:	19 f1       	breq	.+70     	; 0x41b4 <attachInterrupt+0x6c>
    416e:	84 30       	cpi	r24, 0x04	; 4
    4170:	71 f1       	breq	.+92     	; 0x41ce <attachInterrupt+0x86>
    4172:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    4176:	8c 7f       	andi	r24, 0xFC	; 252
    4178:	48 2b       	or	r20, r24
    417a:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    417e:	e8 9a       	sbi	0x1d, 0	; 29
    4180:	08 95       	ret
    4182:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    4186:	83 7f       	andi	r24, 0xF3	; 243
    4188:	44 0f       	add	r20, r20
    418a:	55 1f       	adc	r21, r21
    418c:	44 0f       	add	r20, r20
    418e:	55 1f       	adc	r21, r21
    4190:	48 2b       	or	r20, r24
    4192:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    4196:	e9 9a       	sbi	0x1d, 1	; 29
    4198:	08 95       	ret
    419a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    419e:	8f 7c       	andi	r24, 0xCF	; 207
    41a0:	34 e0       	ldi	r19, 0x04	; 4
    41a2:	44 0f       	add	r20, r20
    41a4:	55 1f       	adc	r21, r21
    41a6:	3a 95       	dec	r19
    41a8:	e1 f7       	brne	.-8      	; 0x41a2 <attachInterrupt+0x5a>
    41aa:	48 2b       	or	r20, r24
    41ac:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    41b0:	ea 9a       	sbi	0x1d, 2	; 29
    41b2:	08 95       	ret
    41b4:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    41b8:	8f 73       	andi	r24, 0x3F	; 63
    41ba:	26 e0       	ldi	r18, 0x06	; 6
    41bc:	44 0f       	add	r20, r20
    41be:	55 1f       	adc	r21, r21
    41c0:	2a 95       	dec	r18
    41c2:	e1 f7       	brne	.-8      	; 0x41bc <attachInterrupt+0x74>
    41c4:	48 2b       	or	r20, r24
    41c6:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    41ca:	eb 9a       	sbi	0x1d, 3	; 29
    41cc:	08 95       	ret
    41ce:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
    41d2:	8f 7c       	andi	r24, 0xCF	; 207
    41d4:	94 e0       	ldi	r25, 0x04	; 4
    41d6:	44 0f       	add	r20, r20
    41d8:	55 1f       	adc	r21, r21
    41da:	9a 95       	dec	r25
    41dc:	e1 f7       	brne	.-8      	; 0x41d6 <attachInterrupt+0x8e>
    41de:	48 2b       	or	r20, r24
    41e0:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
    41e4:	ee 9a       	sbi	0x1d, 6	; 29
    41e6:	08 95       	ret

000041e8 <__vector_1>:
    intFunc[interrupt](); \
  }

#if defined(__AVR_ATmega32U4__)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    41e8:	1f 92       	push	r1
    41ea:	0f 92       	push	r0
    41ec:	0f b6       	in	r0, 0x3f	; 63
    41ee:	0f 92       	push	r0
    41f0:	11 24       	eor	r1, r1
    41f2:	2f 93       	push	r18
    41f4:	3f 93       	push	r19
    41f6:	4f 93       	push	r20
    41f8:	5f 93       	push	r21
    41fa:	6f 93       	push	r22
    41fc:	7f 93       	push	r23
    41fe:	8f 93       	push	r24
    4200:	9f 93       	push	r25
    4202:	af 93       	push	r26
    4204:	bf 93       	push	r27
    4206:	ef 93       	push	r30
    4208:	ff 93       	push	r31
    420a:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <intFunc>
    420e:	f0 91 20 01 	lds	r31, 0x0120	; 0x800120 <intFunc+0x1>
    4212:	09 95       	icall
    4214:	ff 91       	pop	r31
    4216:	ef 91       	pop	r30
    4218:	bf 91       	pop	r27
    421a:	af 91       	pop	r26
    421c:	9f 91       	pop	r25
    421e:	8f 91       	pop	r24
    4220:	7f 91       	pop	r23
    4222:	6f 91       	pop	r22
    4224:	5f 91       	pop	r21
    4226:	4f 91       	pop	r20
    4228:	3f 91       	pop	r19
    422a:	2f 91       	pop	r18
    422c:	0f 90       	pop	r0
    422e:	0f be       	out	0x3f, r0	; 63
    4230:	0f 90       	pop	r0
    4232:	1f 90       	pop	r1
    4234:	18 95       	reti

00004236 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    4236:	1f 92       	push	r1
    4238:	0f 92       	push	r0
    423a:	0f b6       	in	r0, 0x3f	; 63
    423c:	0f 92       	push	r0
    423e:	11 24       	eor	r1, r1
    4240:	2f 93       	push	r18
    4242:	3f 93       	push	r19
    4244:	4f 93       	push	r20
    4246:	5f 93       	push	r21
    4248:	6f 93       	push	r22
    424a:	7f 93       	push	r23
    424c:	8f 93       	push	r24
    424e:	9f 93       	push	r25
    4250:	af 93       	push	r26
    4252:	bf 93       	push	r27
    4254:	ef 93       	push	r30
    4256:	ff 93       	push	r31
    4258:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <intFunc+0x2>
    425c:	f0 91 22 01 	lds	r31, 0x0122	; 0x800122 <intFunc+0x3>
    4260:	09 95       	icall
    4262:	ff 91       	pop	r31
    4264:	ef 91       	pop	r30
    4266:	bf 91       	pop	r27
    4268:	af 91       	pop	r26
    426a:	9f 91       	pop	r25
    426c:	8f 91       	pop	r24
    426e:	7f 91       	pop	r23
    4270:	6f 91       	pop	r22
    4272:	5f 91       	pop	r21
    4274:	4f 91       	pop	r20
    4276:	3f 91       	pop	r19
    4278:	2f 91       	pop	r18
    427a:	0f 90       	pop	r0
    427c:	0f be       	out	0x3f, r0	; 63
    427e:	0f 90       	pop	r0
    4280:	1f 90       	pop	r1
    4282:	18 95       	reti

00004284 <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_2)
    4284:	1f 92       	push	r1
    4286:	0f 92       	push	r0
    4288:	0f b6       	in	r0, 0x3f	; 63
    428a:	0f 92       	push	r0
    428c:	11 24       	eor	r1, r1
    428e:	2f 93       	push	r18
    4290:	3f 93       	push	r19
    4292:	4f 93       	push	r20
    4294:	5f 93       	push	r21
    4296:	6f 93       	push	r22
    4298:	7f 93       	push	r23
    429a:	8f 93       	push	r24
    429c:	9f 93       	push	r25
    429e:	af 93       	push	r26
    42a0:	bf 93       	push	r27
    42a2:	ef 93       	push	r30
    42a4:	ff 93       	push	r31
    42a6:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <intFunc+0x4>
    42aa:	f0 91 24 01 	lds	r31, 0x0124	; 0x800124 <intFunc+0x5>
    42ae:	09 95       	icall
    42b0:	ff 91       	pop	r31
    42b2:	ef 91       	pop	r30
    42b4:	bf 91       	pop	r27
    42b6:	af 91       	pop	r26
    42b8:	9f 91       	pop	r25
    42ba:	8f 91       	pop	r24
    42bc:	7f 91       	pop	r23
    42be:	6f 91       	pop	r22
    42c0:	5f 91       	pop	r21
    42c2:	4f 91       	pop	r20
    42c4:	3f 91       	pop	r19
    42c6:	2f 91       	pop	r18
    42c8:	0f 90       	pop	r0
    42ca:	0f be       	out	0x3f, r0	; 63
    42cc:	0f 90       	pop	r0
    42ce:	1f 90       	pop	r1
    42d0:	18 95       	reti

000042d2 <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
    42d2:	1f 92       	push	r1
    42d4:	0f 92       	push	r0
    42d6:	0f b6       	in	r0, 0x3f	; 63
    42d8:	0f 92       	push	r0
    42da:	11 24       	eor	r1, r1
    42dc:	2f 93       	push	r18
    42de:	3f 93       	push	r19
    42e0:	4f 93       	push	r20
    42e2:	5f 93       	push	r21
    42e4:	6f 93       	push	r22
    42e6:	7f 93       	push	r23
    42e8:	8f 93       	push	r24
    42ea:	9f 93       	push	r25
    42ec:	af 93       	push	r26
    42ee:	bf 93       	push	r27
    42f0:	ef 93       	push	r30
    42f2:	ff 93       	push	r31
    42f4:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <intFunc+0x6>
    42f8:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <intFunc+0x7>
    42fc:	09 95       	icall
    42fe:	ff 91       	pop	r31
    4300:	ef 91       	pop	r30
    4302:	bf 91       	pop	r27
    4304:	af 91       	pop	r26
    4306:	9f 91       	pop	r25
    4308:	8f 91       	pop	r24
    430a:	7f 91       	pop	r23
    430c:	6f 91       	pop	r22
    430e:	5f 91       	pop	r21
    4310:	4f 91       	pop	r20
    4312:	3f 91       	pop	r19
    4314:	2f 91       	pop	r18
    4316:	0f 90       	pop	r0
    4318:	0f be       	out	0x3f, r0	; 63
    431a:	0f 90       	pop	r0
    431c:	1f 90       	pop	r1
    431e:	18 95       	reti

00004320 <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_4)
    4320:	1f 92       	push	r1
    4322:	0f 92       	push	r0
    4324:	0f b6       	in	r0, 0x3f	; 63
    4326:	0f 92       	push	r0
    4328:	11 24       	eor	r1, r1
    432a:	2f 93       	push	r18
    432c:	3f 93       	push	r19
    432e:	4f 93       	push	r20
    4330:	5f 93       	push	r21
    4332:	6f 93       	push	r22
    4334:	7f 93       	push	r23
    4336:	8f 93       	push	r24
    4338:	9f 93       	push	r25
    433a:	af 93       	push	r26
    433c:	bf 93       	push	r27
    433e:	ef 93       	push	r30
    4340:	ff 93       	push	r31
    4342:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <intFunc+0x8>
    4346:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <intFunc+0x9>
    434a:	09 95       	icall
    434c:	ff 91       	pop	r31
    434e:	ef 91       	pop	r30
    4350:	bf 91       	pop	r27
    4352:	af 91       	pop	r26
    4354:	9f 91       	pop	r25
    4356:	8f 91       	pop	r24
    4358:	7f 91       	pop	r23
    435a:	6f 91       	pop	r22
    435c:	5f 91       	pop	r21
    435e:	4f 91       	pop	r20
    4360:	3f 91       	pop	r19
    4362:	2f 91       	pop	r18
    4364:	0f 90       	pop	r0
    4366:	0f be       	out	0x3f, r0	; 63
    4368:	0f 90       	pop	r0
    436a:	1f 90       	pop	r1
    436c:	18 95       	reti

0000436e <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    436e:	1f 92       	push	r1
    4370:	0f 92       	push	r0
    4372:	0f b6       	in	r0, 0x3f	; 63
    4374:	0f 92       	push	r0
    4376:	11 24       	eor	r1, r1
    4378:	2f 93       	push	r18
    437a:	3f 93       	push	r19
    437c:	8f 93       	push	r24
    437e:	9f 93       	push	r25
    4380:	af 93       	push	r26
    4382:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    4384:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <timer0_millis>
    4388:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <timer0_millis+0x1>
    438c:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <timer0_millis+0x2>
    4390:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    4394:	30 91 6d 05 	lds	r19, 0x056D	; 0x80056d <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    4398:	23 e0       	ldi	r18, 0x03	; 3
    439a:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    439c:	2d 37       	cpi	r18, 0x7D	; 125
    439e:	20 f4       	brcc	.+8      	; 0x43a8 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    43a0:	01 96       	adiw	r24, 0x01	; 1
    43a2:	a1 1d       	adc	r26, r1
    43a4:	b1 1d       	adc	r27, r1
    43a6:	05 c0       	rjmp	.+10     	; 0x43b2 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    43a8:	26 e8       	ldi	r18, 0x86	; 134
    43aa:	23 0f       	add	r18, r19
		m += 1;
    43ac:	02 96       	adiw	r24, 0x02	; 2
    43ae:	a1 1d       	adc	r26, r1
    43b0:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    43b2:	20 93 6d 05 	sts	0x056D, r18	; 0x80056d <timer0_fract>
	timer0_millis = m;
    43b6:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <timer0_millis>
    43ba:	90 93 6f 05 	sts	0x056F, r25	; 0x80056f <timer0_millis+0x1>
    43be:	a0 93 70 05 	sts	0x0570, r26	; 0x800570 <timer0_millis+0x2>
    43c2:	b0 93 71 05 	sts	0x0571, r27	; 0x800571 <timer0_millis+0x3>
	timer0_overflow_count++;
    43c6:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <timer0_overflow_count>
    43ca:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <timer0_overflow_count+0x1>
    43ce:	a0 91 74 05 	lds	r26, 0x0574	; 0x800574 <timer0_overflow_count+0x2>
    43d2:	b0 91 75 05 	lds	r27, 0x0575	; 0x800575 <timer0_overflow_count+0x3>
    43d6:	01 96       	adiw	r24, 0x01	; 1
    43d8:	a1 1d       	adc	r26, r1
    43da:	b1 1d       	adc	r27, r1
    43dc:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <timer0_overflow_count>
    43e0:	90 93 73 05 	sts	0x0573, r25	; 0x800573 <timer0_overflow_count+0x1>
    43e4:	a0 93 74 05 	sts	0x0574, r26	; 0x800574 <timer0_overflow_count+0x2>
    43e8:	b0 93 75 05 	sts	0x0575, r27	; 0x800575 <timer0_overflow_count+0x3>
}
    43ec:	bf 91       	pop	r27
    43ee:	af 91       	pop	r26
    43f0:	9f 91       	pop	r25
    43f2:	8f 91       	pop	r24
    43f4:	3f 91       	pop	r19
    43f6:	2f 91       	pop	r18
    43f8:	0f 90       	pop	r0
    43fa:	0f be       	out	0x3f, r0	; 63
    43fc:	0f 90       	pop	r0
    43fe:	1f 90       	pop	r1
    4400:	18 95       	reti

00004402 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    4402:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    4404:	f8 94       	cli
	m = timer0_millis;
    4406:	60 91 6e 05 	lds	r22, 0x056E	; 0x80056e <timer0_millis>
    440a:	70 91 6f 05 	lds	r23, 0x056F	; 0x80056f <timer0_millis+0x1>
    440e:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <timer0_millis+0x2>
    4412:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <timer0_millis+0x3>
	SREG = oldSREG;
    4416:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    4418:	08 95       	ret

0000441a <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    441a:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    441c:	f8 94       	cli
	m = timer0_overflow_count;
    441e:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <timer0_overflow_count>
    4422:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <timer0_overflow_count+0x1>
    4426:	a0 91 74 05 	lds	r26, 0x0574	; 0x800574 <timer0_overflow_count+0x2>
    442a:	b0 91 75 05 	lds	r27, 0x0575	; 0x800575 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    442e:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    4430:	a8 9b       	sbis	0x15, 0	; 21
    4432:	05 c0       	rjmp	.+10     	; 0x443e <micros+0x24>
    4434:	2f 3f       	cpi	r18, 0xFF	; 255
    4436:	19 f0       	breq	.+6      	; 0x443e <micros+0x24>
		m++;
    4438:	01 96       	adiw	r24, 0x01	; 1
    443a:	a1 1d       	adc	r26, r1
    443c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    443e:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    4440:	ba 2f       	mov	r27, r26
    4442:	a9 2f       	mov	r26, r25
    4444:	98 2f       	mov	r25, r24
    4446:	88 27       	eor	r24, r24
    4448:	82 0f       	add	r24, r18
    444a:	91 1d       	adc	r25, r1
    444c:	a1 1d       	adc	r26, r1
    444e:	b1 1d       	adc	r27, r1
    4450:	bc 01       	movw	r22, r24
    4452:	cd 01       	movw	r24, r26
    4454:	42 e0       	ldi	r20, 0x02	; 2
    4456:	66 0f       	add	r22, r22
    4458:	77 1f       	adc	r23, r23
    445a:	88 1f       	adc	r24, r24
    445c:	99 1f       	adc	r25, r25
    445e:	4a 95       	dec	r20
    4460:	d1 f7       	brne	.-12     	; 0x4456 <micros+0x3c>
}
    4462:	08 95       	ret

00004464 <delay>:

void delay(unsigned long ms)
{
    4464:	8f 92       	push	r8
    4466:	9f 92       	push	r9
    4468:	af 92       	push	r10
    446a:	bf 92       	push	r11
    446c:	cf 92       	push	r12
    446e:	df 92       	push	r13
    4470:	ef 92       	push	r14
    4472:	ff 92       	push	r15
    4474:	6b 01       	movw	r12, r22
    4476:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    4478:	0e 94 0d 22 	call	0x441a	; 0x441a <micros>
    447c:	4b 01       	movw	r8, r22
    447e:	5c 01       	movw	r10, r24

	while (ms > 0) {
    4480:	c1 14       	cp	r12, r1
    4482:	d1 04       	cpc	r13, r1
    4484:	e1 04       	cpc	r14, r1
    4486:	f1 04       	cpc	r15, r1
    4488:	01 f1       	breq	.+64     	; 0x44ca <delay+0x66>
		yield();
    448a:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    448e:	0e 94 0d 22 	call	0x441a	; 0x441a <micros>
    4492:	dc 01       	movw	r26, r24
    4494:	cb 01       	movw	r24, r22
    4496:	88 19       	sub	r24, r8
    4498:	99 09       	sbc	r25, r9
    449a:	aa 09       	sbc	r26, r10
    449c:	bb 09       	sbc	r27, r11
    449e:	88 3e       	cpi	r24, 0xE8	; 232
    44a0:	93 40       	sbci	r25, 0x03	; 3
    44a2:	a1 05       	cpc	r26, r1
    44a4:	b1 05       	cpc	r27, r1
    44a6:	60 f3       	brcs	.-40     	; 0x4480 <delay+0x1c>
			ms--;
    44a8:	21 e0       	ldi	r18, 0x01	; 1
    44aa:	c2 1a       	sub	r12, r18
    44ac:	d1 08       	sbc	r13, r1
    44ae:	e1 08       	sbc	r14, r1
    44b0:	f1 08       	sbc	r15, r1
			start += 1000;
    44b2:	88 ee       	ldi	r24, 0xE8	; 232
    44b4:	88 0e       	add	r8, r24
    44b6:	83 e0       	ldi	r24, 0x03	; 3
    44b8:	98 1e       	adc	r9, r24
    44ba:	a1 1c       	adc	r10, r1
    44bc:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    44be:	c1 14       	cp	r12, r1
    44c0:	d1 04       	cpc	r13, r1
    44c2:	e1 04       	cpc	r14, r1
    44c4:	f1 04       	cpc	r15, r1
    44c6:	19 f7       	brne	.-58     	; 0x448e <delay+0x2a>
    44c8:	db cf       	rjmp	.-74     	; 0x4480 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    44ca:	ff 90       	pop	r15
    44cc:	ef 90       	pop	r14
    44ce:	df 90       	pop	r13
    44d0:	cf 90       	pop	r12
    44d2:	bf 90       	pop	r11
    44d4:	af 90       	pop	r10
    44d6:	9f 90       	pop	r9
    44d8:	8f 90       	pop	r8
    44da:	08 95       	ret

000044dc <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    44dc:	82 30       	cpi	r24, 0x02	; 2
    44de:	91 05       	cpc	r25, r1
    44e0:	38 f0       	brcs	.+14     	; 0x44f0 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    44e2:	88 0f       	add	r24, r24
    44e4:	99 1f       	adc	r25, r25
    44e6:	88 0f       	add	r24, r24
    44e8:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    44ea:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    44ec:	01 97       	sbiw	r24, 0x01	; 1
    44ee:	f1 f7       	brne	.-4      	; 0x44ec <delayMicroseconds+0x10>
    44f0:	08 95       	ret

000044f2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    44f2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    44f4:	84 b5       	in	r24, 0x24	; 36
    44f6:	82 60       	ori	r24, 0x02	; 2
    44f8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    44fa:	84 b5       	in	r24, 0x24	; 36
    44fc:	81 60       	ori	r24, 0x01	; 1
    44fe:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    4500:	85 b5       	in	r24, 0x25	; 37
    4502:	82 60       	ori	r24, 0x02	; 2
    4504:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    4506:	85 b5       	in	r24, 0x25	; 37
    4508:	81 60       	ori	r24, 0x01	; 1
    450a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    450c:	ee e6       	ldi	r30, 0x6E	; 110
    450e:	f0 e0       	ldi	r31, 0x00	; 0
    4510:	80 81       	ld	r24, Z
    4512:	81 60       	ori	r24, 0x01	; 1
    4514:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    4516:	e1 e8       	ldi	r30, 0x81	; 129
    4518:	f0 e0       	ldi	r31, 0x00	; 0
    451a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    451c:	80 81       	ld	r24, Z
    451e:	82 60       	ori	r24, 0x02	; 2
    4520:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    4522:	80 81       	ld	r24, Z
    4524:	81 60       	ori	r24, 0x01	; 1
    4526:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    4528:	e0 e8       	ldi	r30, 0x80	; 128
    452a:	f0 e0       	ldi	r31, 0x00	; 0
    452c:	80 81       	ld	r24, Z
    452e:	81 60       	ori	r24, 0x01	; 1
    4530:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    4532:	e1 e9       	ldi	r30, 0x91	; 145
    4534:	f0 e0       	ldi	r31, 0x00	; 0
    4536:	80 81       	ld	r24, Z
    4538:	82 60       	ori	r24, 0x02	; 2
    453a:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    453c:	80 81       	ld	r24, Z
    453e:	81 60       	ori	r24, 0x01	; 1
    4540:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    4542:	e0 e9       	ldi	r30, 0x90	; 144
    4544:	f0 e0       	ldi	r31, 0x00	; 0
    4546:	80 81       	ld	r24, Z
    4548:	81 60       	ori	r24, 0x01	; 1
    454a:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
    454c:	e1 ec       	ldi	r30, 0xC1	; 193
    454e:	f0 e0       	ldi	r31, 0x00	; 0
    4550:	80 81       	ld	r24, Z
    4552:	84 60       	ori	r24, 0x04	; 4
    4554:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
    4556:	80 81       	ld	r24, Z
    4558:	82 60       	ori	r24, 0x02	; 2
    455a:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    455c:	80 81       	ld	r24, Z
    455e:	81 60       	ori	r24, 0x01	; 1
    4560:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
    4562:	e3 ec       	ldi	r30, 0xC3	; 195
    4564:	f0 e0       	ldi	r31, 0x00	; 0
    4566:	80 81       	ld	r24, Z
    4568:	81 60       	ori	r24, 0x01	; 1
    456a:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
    456c:	e0 ec       	ldi	r30, 0xC0	; 192
    456e:	f0 e0       	ldi	r31, 0x00	; 0
    4570:	80 81       	ld	r24, Z
    4572:	82 60       	ori	r24, 0x02	; 2
    4574:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
    4576:	e2 ec       	ldi	r30, 0xC2	; 194
    4578:	f0 e0       	ldi	r31, 0x00	; 0
    457a:	80 81       	ld	r24, Z
    457c:	81 60       	ori	r24, 0x01	; 1
    457e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    4580:	ea e7       	ldi	r30, 0x7A	; 122
    4582:	f0 e0       	ldi	r31, 0x00	; 0
    4584:	80 81       	ld	r24, Z
    4586:	84 60       	ori	r24, 0x04	; 4
    4588:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    458a:	80 81       	ld	r24, Z
    458c:	82 60       	ori	r24, 0x02	; 2
    458e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    4590:	80 81       	ld	r24, Z
    4592:	81 60       	ori	r24, 0x01	; 1
    4594:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    4596:	80 81       	ld	r24, Z
    4598:	80 68       	ori	r24, 0x80	; 128
    459a:	80 83       	st	Z, r24
    459c:	08 95       	ret

0000459e <analogRead>:
{
	uint8_t low, high;

#if defined(analogPinToChannel)
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
    459e:	82 31       	cpi	r24, 0x12	; 18
    45a0:	08 f0       	brcs	.+2      	; 0x45a4 <analogRead+0x6>
    45a2:	82 51       	subi	r24, 0x12	; 18
#endif
	pin = analogPinToChannel(pin);
    45a4:	e8 2f       	mov	r30, r24
    45a6:	f0 e0       	ldi	r31, 0x00	; 0
    45a8:	e5 5e       	subi	r30, 0xE5	; 229
    45aa:	fe 4f       	sbci	r31, 0xFE	; 254
    45ac:	e4 91       	lpm	r30, Z
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    45ae:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    45b2:	e3 fb       	bst	r30, 3
    45b4:	22 27       	eor	r18, r18
    45b6:	20 f9       	bld	r18, 0
    45b8:	30 e0       	ldi	r19, 0x00	; 0
    45ba:	95 e0       	ldi	r25, 0x05	; 5
    45bc:	22 0f       	add	r18, r18
    45be:	33 1f       	adc	r19, r19
    45c0:	9a 95       	dec	r25
    45c2:	e1 f7       	brne	.-8      	; 0x45bc <analogRead+0x1e>
    45c4:	8f 7d       	andi	r24, 0xDF	; 223
    45c6:	28 2b       	or	r18, r24
    45c8:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    45cc:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <analog_reference>
    45d0:	20 e4       	ldi	r18, 0x40	; 64
    45d2:	82 9f       	mul	r24, r18
    45d4:	c0 01       	movw	r24, r0
    45d6:	11 24       	eor	r1, r1
    45d8:	e7 70       	andi	r30, 0x07	; 7
    45da:	e8 2b       	or	r30, r24
    45dc:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    45e0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    45e4:	80 64       	ori	r24, 0x40	; 64
    45e6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    45ea:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    45ee:	86 fd       	sbrc	r24, 6
    45f0:	fc cf       	rjmp	.-8      	; 0x45ea <analogRead+0x4c>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    45f2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    45f6:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    45fa:	90 e0       	ldi	r25, 0x00	; 0
}
    45fc:	92 2b       	or	r25, r18
    45fe:	08 95       	ret

00004600 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    4600:	1f 93       	push	r17
    4602:	cf 93       	push	r28
    4604:	df 93       	push	r29
    4606:	18 2f       	mov	r17, r24
    4608:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    460a:	61 e0       	ldi	r22, 0x01	; 1
    460c:	0e 94 d5 23 	call	0x47aa	; 0x47aa <pinMode>
	if (val == 0)
    4610:	20 97       	sbiw	r28, 0x00	; 0
    4612:	11 f4       	brne	.+4      	; 0x4618 <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    4614:	60 e0       	ldi	r22, 0x00	; 0
    4616:	04 c0       	rjmp	.+8      	; 0x4620 <analogWrite+0x20>
	}
	else if (val == 255)
    4618:	cf 3f       	cpi	r28, 0xFF	; 255
    461a:	d1 05       	cpc	r29, r1
    461c:	39 f4       	brne	.+14     	; 0x462c <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    461e:	61 e0       	ldi	r22, 0x01	; 1
    4620:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    4622:	df 91       	pop	r29
    4624:	cf 91       	pop	r28
    4626:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    4628:	0c 94 11 24 	jmp	0x4822	; 0x4822 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    462c:	e1 2f       	mov	r30, r17
    462e:	f0 e0       	ldi	r31, 0x00	; 0
    4630:	e9 5d       	subi	r30, 0xD9	; 217
    4632:	fe 4f       	sbci	r31, 0xFE	; 254
    4634:	e4 91       	lpm	r30, Z
    4636:	8e 2f       	mov	r24, r30
    4638:	90 e0       	ldi	r25, 0x00	; 0
    463a:	fc 01       	movw	r30, r24
    463c:	31 97       	sbiw	r30, 0x01	; 1
    463e:	ef 30       	cpi	r30, 0x0F	; 15
    4640:	f1 05       	cpc	r31, r1
    4642:	08 f0       	brcs	.+2      	; 0x4646 <analogWrite+0x46>
    4644:	6c c0       	rjmp	.+216    	; 0x471e <analogWrite+0x11e>
    4646:	ea 5a       	subi	r30, 0xAA	; 170
    4648:	ff 4f       	sbci	r31, 0xFF	; 255
    464a:	0c 94 db 26 	jmp	0x4db6	; 0x4db6 <__tablejump2__>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    464e:	84 b5       	in	r24, 0x24	; 36
    4650:	80 68       	ori	r24, 0x80	; 128
    4652:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    4654:	c7 bd       	out	0x27, r28	; 39
				break;
    4656:	68 c0       	rjmp	.+208    	; 0x4728 <analogWrite+0x128>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    4658:	84 b5       	in	r24, 0x24	; 36
    465a:	80 62       	ori	r24, 0x20	; 32
    465c:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    465e:	c8 bd       	out	0x28, r28	; 40
				break;
    4660:	63 c0       	rjmp	.+198    	; 0x4728 <analogWrite+0x128>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    4662:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4666:	80 68       	ori	r24, 0x80	; 128
    4668:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1A = val; // set pwm duty
    466c:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    4670:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				break;
    4674:	59 c0       	rjmp	.+178    	; 0x4728 <analogWrite+0x128>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    4676:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    467a:	80 62       	ori	r24, 0x20	; 32
    467c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1B = val; // set pwm duty
    4680:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    4684:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				break;
    4688:	4f c0       	rjmp	.+158    	; 0x4728 <analogWrite+0x128>
			#endif

			#if defined(TCCR1A) && defined(COM1C1)
			case TIMER1C:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1C1);
    468a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    468e:	88 60       	ori	r24, 0x08	; 8
    4690:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1C = val; // set pwm duty
    4694:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <__TEXT_REGION_LENGTH__+0x7e008d>
    4698:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
				break;
    469c:	45 c0       	rjmp	.+138    	; 0x4728 <analogWrite+0x128>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
    469e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    46a2:	80 68       	ori	r24, 0x80	; 128
    46a4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
				OCR3A = val; // set pwm duty
    46a8:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    46ac:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
				break;
    46b0:	3b c0       	rjmp	.+118    	; 0x4728 <analogWrite+0x128>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
    46b2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    46b6:	80 62       	ori	r24, 0x20	; 32
    46b8:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
				OCR3B = val; // set pwm duty
    46bc:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    46c0:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
				break;
    46c4:	31 c0       	rjmp	.+98     	; 0x4728 <analogWrite+0x128>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
    46c6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    46ca:	88 60       	ori	r24, 0x08	; 8
    46cc:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
				OCR3C = val; // set pwm duty
    46d0:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
    46d4:	c0 93 9c 00 	sts	0x009C, r28	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
				break;
    46d8:	27 c0       	rjmp	.+78     	; 0x4728 <analogWrite+0x128>
			#endif

			#if defined(TCCR4A)
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
    46da:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    46de:	80 68       	ori	r24, 0x80	; 128
    46e0:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
				#if defined(COM4A0)		// only used on 32U4
				cbi(TCCR4A, COM4A0);
    46e4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    46e8:	8f 7b       	andi	r24, 0xBF	; 191
    46ea:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
				#endif
				OCR4A = val;	// set pwm duty
    46ee:	c0 93 cf 00 	sts	0x00CF, r28	; 0x8000cf <__TEXT_REGION_LENGTH__+0x7e00cf>
				break;
    46f2:	1a c0       	rjmp	.+52     	; 0x4728 <analogWrite+0x128>
			#endif
			
			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
    46f4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    46f8:	80 62       	ori	r24, 0x20	; 32
    46fa:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
				OCR4B = val; // set pwm duty
    46fe:	c0 93 d0 00 	sts	0x00D0, r28	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
				break;
    4702:	12 c0       	rjmp	.+36     	; 0x4728 <analogWrite+0x128>
			#endif
				
			#if defined(TCCR4C) && defined(COM4D1)
			case TIMER4D:				
				// connect pwm to pin on timer 4, channel D
				sbi(TCCR4C, COM4D1);
    4704:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    4708:	88 60       	ori	r24, 0x08	; 8
    470a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
				#if defined(COM4D0)		// only used on 32U4
				cbi(TCCR4C, COM4D0);
    470e:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    4712:	8b 7f       	andi	r24, 0xFB	; 251
    4714:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
				#endif
				OCR4D = val;	// set pwm duty
    4718:	c0 93 d2 00 	sts	0x00D2, r28	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
				break;
    471c:	05 c0       	rjmp	.+10     	; 0x4728 <analogWrite+0x128>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    471e:	c0 38       	cpi	r28, 0x80	; 128
    4720:	d1 05       	cpc	r29, r1
    4722:	0c f0       	brlt	.+2      	; 0x4726 <analogWrite+0x126>
    4724:	7c cf       	rjmp	.-264    	; 0x461e <analogWrite+0x1e>
    4726:	76 cf       	rjmp	.-276    	; 0x4614 <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    4728:	df 91       	pop	r29
    472a:	cf 91       	pop	r28
    472c:	1f 91       	pop	r17
    472e:	08 95       	ret

00004730 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    4730:	90 e0       	ldi	r25, 0x00	; 0
    4732:	fc 01       	movw	r30, r24
    4734:	31 97       	sbiw	r30, 0x01	; 1
    4736:	ef 30       	cpi	r30, 0x0F	; 15
    4738:	f1 05       	cpc	r31, r1
    473a:	b0 f5       	brcc	.+108    	; 0x47a8 <turnOffPWM+0x78>
    473c:	eb 59       	subi	r30, 0x9B	; 155
    473e:	ff 4f       	sbci	r31, 0xFF	; 255
    4740:	0c 94 db 26 	jmp	0x4db6	; 0x4db6 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    4744:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4748:	8f 77       	andi	r24, 0x7F	; 127
    474a:	03 c0       	rjmp	.+6      	; 0x4752 <turnOffPWM+0x22>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    474c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4750:	8f 7d       	andi	r24, 0xDF	; 223
    4752:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4756:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    4758:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    475c:	87 7f       	andi	r24, 0xF7	; 247
    475e:	f9 cf       	rjmp	.-14     	; 0x4752 <turnOffPWM+0x22>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    4760:	84 b5       	in	r24, 0x24	; 36
    4762:	8f 77       	andi	r24, 0x7F	; 127
    4764:	02 c0       	rjmp	.+4      	; 0x476a <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    4766:	84 b5       	in	r24, 0x24	; 36
    4768:	8f 7d       	andi	r24, 0xDF	; 223
    476a:	84 bd       	out	0x24, r24	; 36
    476c:	08 95       	ret
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    476e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    4772:	8f 77       	andi	r24, 0x7F	; 127
    4774:	07 c0       	rjmp	.+14     	; 0x4784 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    4776:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    477a:	8f 7d       	andi	r24, 0xDF	; 223
    477c:	03 c0       	rjmp	.+6      	; 0x4784 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    477e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    4782:	87 7f       	andi	r24, 0xF7	; 247
    4784:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    4788:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    478a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    478e:	8f 77       	andi	r24, 0x7F	; 127
    4790:	03 c0       	rjmp	.+6      	; 0x4798 <turnOffPWM+0x68>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    4792:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    4796:	8f 7d       	andi	r24, 0xDF	; 223
    4798:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    479c:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
		#endif			
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
    479e:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    47a2:	87 7f       	andi	r24, 0xF7	; 247
    47a4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    47a8:	08 95       	ret

000047aa <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    47aa:	cf 93       	push	r28
    47ac:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    47ae:	90 e0       	ldi	r25, 0x00	; 0
    47b0:	fc 01       	movw	r30, r24
    47b2:	ea 5b       	subi	r30, 0xBA	; 186
    47b4:	fe 4f       	sbci	r31, 0xFE	; 254
    47b6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    47b8:	fc 01       	movw	r30, r24
    47ba:	eb 59       	subi	r30, 0x9B	; 155
    47bc:	fe 4f       	sbci	r31, 0xFE	; 254
    47be:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    47c0:	88 23       	and	r24, r24
    47c2:	61 f1       	breq	.+88     	; 0x481c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    47c4:	90 e0       	ldi	r25, 0x00	; 0
    47c6:	88 0f       	add	r24, r24
    47c8:	99 1f       	adc	r25, r25
    47ca:	fc 01       	movw	r30, r24
    47cc:	e0 56       	subi	r30, 0x60	; 96
    47ce:	fe 4f       	sbci	r31, 0xFE	; 254
    47d0:	c5 91       	lpm	r28, Z+
    47d2:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    47d4:	fc 01       	movw	r30, r24
    47d6:	ee 56       	subi	r30, 0x6E	; 110
    47d8:	fe 4f       	sbci	r31, 0xFE	; 254
    47da:	a5 91       	lpm	r26, Z+
    47dc:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    47de:	61 11       	cpse	r22, r1
    47e0:	09 c0       	rjmp	.+18     	; 0x47f4 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    47e2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    47e4:	f8 94       	cli
		*reg &= ~bit;
    47e6:	88 81       	ld	r24, Y
    47e8:	20 95       	com	r18
    47ea:	82 23       	and	r24, r18
    47ec:	88 83       	st	Y, r24
		*out &= ~bit;
    47ee:	ec 91       	ld	r30, X
    47f0:	2e 23       	and	r18, r30
    47f2:	0b c0       	rjmp	.+22     	; 0x480a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    47f4:	62 30       	cpi	r22, 0x02	; 2
    47f6:	61 f4       	brne	.+24     	; 0x4810 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    47f8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    47fa:	f8 94       	cli
		*reg &= ~bit;
    47fc:	88 81       	ld	r24, Y
    47fe:	32 2f       	mov	r19, r18
    4800:	30 95       	com	r19
    4802:	83 23       	and	r24, r19
    4804:	88 83       	st	Y, r24
		*out |= bit;
    4806:	ec 91       	ld	r30, X
    4808:	2e 2b       	or	r18, r30
    480a:	2c 93       	st	X, r18
		SREG = oldSREG;
    480c:	9f bf       	out	0x3f, r25	; 63
    480e:	06 c0       	rjmp	.+12     	; 0x481c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    4810:	8f b7       	in	r24, 0x3f	; 63
                cli();
    4812:	f8 94       	cli
		*reg |= bit;
    4814:	e8 81       	ld	r30, Y
    4816:	2e 2b       	or	r18, r30
    4818:	28 83       	st	Y, r18
		SREG = oldSREG;
    481a:	8f bf       	out	0x3f, r24	; 63
	}
}
    481c:	df 91       	pop	r29
    481e:	cf 91       	pop	r28
    4820:	08 95       	ret

00004822 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    4822:	1f 93       	push	r17
    4824:	cf 93       	push	r28
    4826:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    4828:	28 2f       	mov	r18, r24
    482a:	30 e0       	ldi	r19, 0x00	; 0
    482c:	f9 01       	movw	r30, r18
    482e:	e9 5d       	subi	r30, 0xD9	; 217
    4830:	fe 4f       	sbci	r31, 0xFE	; 254
    4832:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    4834:	f9 01       	movw	r30, r18
    4836:	ea 5b       	subi	r30, 0xBA	; 186
    4838:	fe 4f       	sbci	r31, 0xFE	; 254
    483a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    483c:	f9 01       	movw	r30, r18
    483e:	eb 59       	subi	r30, 0x9B	; 155
    4840:	fe 4f       	sbci	r31, 0xFE	; 254
    4842:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    4844:	cc 23       	and	r28, r28
    4846:	c1 f0       	breq	.+48     	; 0x4878 <digitalWrite+0x56>
    4848:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    484a:	81 11       	cpse	r24, r1
    484c:	0e 94 98 23 	call	0x4730	; 0x4730 <turnOffPWM>

	out = portOutputRegister(port);
    4850:	ec 2f       	mov	r30, r28
    4852:	f0 e0       	ldi	r31, 0x00	; 0
    4854:	ee 0f       	add	r30, r30
    4856:	ff 1f       	adc	r31, r31
    4858:	ee 56       	subi	r30, 0x6E	; 110
    485a:	fe 4f       	sbci	r31, 0xFE	; 254
    485c:	a5 91       	lpm	r26, Z+
    485e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    4860:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4862:	f8 94       	cli

	if (val == LOW) {
    4864:	11 11       	cpse	r17, r1
    4866:	04 c0       	rjmp	.+8      	; 0x4870 <digitalWrite+0x4e>
		*out &= ~bit;
    4868:	8c 91       	ld	r24, X
    486a:	d0 95       	com	r29
    486c:	d8 23       	and	r29, r24
    486e:	02 c0       	rjmp	.+4      	; 0x4874 <digitalWrite+0x52>
	} else {
		*out |= bit;
    4870:	ec 91       	ld	r30, X
    4872:	de 2b       	or	r29, r30
    4874:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    4876:	9f bf       	out	0x3f, r25	; 63
}
    4878:	df 91       	pop	r29
    487a:	cf 91       	pop	r28
    487c:	1f 91       	pop	r17
    487e:	08 95       	ret

00004880 <digitalRead>:

int digitalRead(uint8_t pin)
{
    4880:	cf 93       	push	r28
    4882:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    4884:	28 2f       	mov	r18, r24
    4886:	30 e0       	ldi	r19, 0x00	; 0
    4888:	f9 01       	movw	r30, r18
    488a:	e9 5d       	subi	r30, 0xD9	; 217
    488c:	fe 4f       	sbci	r31, 0xFE	; 254
    488e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    4890:	f9 01       	movw	r30, r18
    4892:	ea 5b       	subi	r30, 0xBA	; 186
    4894:	fe 4f       	sbci	r31, 0xFE	; 254
    4896:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    4898:	f9 01       	movw	r30, r18
    489a:	eb 59       	subi	r30, 0x9B	; 155
    489c:	fe 4f       	sbci	r31, 0xFE	; 254
    489e:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    48a0:	cc 23       	and	r28, r28
    48a2:	91 f0       	breq	.+36     	; 0x48c8 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    48a4:	81 11       	cpse	r24, r1
    48a6:	0e 94 98 23 	call	0x4730	; 0x4730 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    48aa:	ec 2f       	mov	r30, r28
    48ac:	f0 e0       	ldi	r31, 0x00	; 0
    48ae:	ee 0f       	add	r30, r30
    48b0:	ff 1f       	adc	r31, r31
    48b2:	ec 57       	subi	r30, 0x7C	; 124
    48b4:	fe 4f       	sbci	r31, 0xFE	; 254
    48b6:	a5 91       	lpm	r26, Z+
    48b8:	b4 91       	lpm	r27, Z
    48ba:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    48bc:	ed 23       	and	r30, r29
    48be:	81 e0       	ldi	r24, 0x01	; 1
    48c0:	90 e0       	ldi	r25, 0x00	; 0
    48c2:	21 f4       	brne	.+8      	; 0x48cc <digitalRead+0x4c>
    48c4:	80 e0       	ldi	r24, 0x00	; 0
    48c6:	02 c0       	rjmp	.+4      	; 0x48cc <digitalRead+0x4c>
    48c8:	80 e0       	ldi	r24, 0x00	; 0
    48ca:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    48cc:	df 91       	pop	r29
    48ce:	cf 91       	pop	r28
    48d0:	08 95       	ret

000048d2 <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    48d2:	fc 01       	movw	r30, r24
    48d4:	80 81       	ld	r24, Z
    48d6:	91 81       	ldd	r25, Z+1	; 0x01
    48d8:	0c 94 8d 27 	jmp	0x4f1a	; 0x4f1a <free>

000048dc <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    48dc:	cf 93       	push	r28
    48de:	df 93       	push	r29
    48e0:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    48e2:	88 81       	ld	r24, Y
    48e4:	99 81       	ldd	r25, Y+1	; 0x01
    48e6:	00 97       	sbiw	r24, 0x00	; 0
    48e8:	11 f0       	breq	.+4      	; 0x48ee <_ZN6String10invalidateEv+0x12>
    48ea:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <free>
	buffer = NULL;
    48ee:	19 82       	std	Y+1, r1	; 0x01
    48f0:	18 82       	st	Y, r1
	capacity = len = 0;
    48f2:	1d 82       	std	Y+5, r1	; 0x05
    48f4:	1c 82       	std	Y+4, r1	; 0x04
    48f6:	1b 82       	std	Y+3, r1	; 0x03
    48f8:	1a 82       	std	Y+2, r1	; 0x02
}
    48fa:	df 91       	pop	r29
    48fc:	cf 91       	pop	r28
    48fe:	08 95       	ret

00004900 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    4900:	0f 93       	push	r16
    4902:	1f 93       	push	r17
    4904:	cf 93       	push	r28
    4906:	df 93       	push	r29
    4908:	ec 01       	movw	r28, r24
    490a:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    490c:	6f 5f       	subi	r22, 0xFF	; 255
    490e:	7f 4f       	sbci	r23, 0xFF	; 255
    4910:	88 81       	ld	r24, Y
    4912:	99 81       	ldd	r25, Y+1	; 0x01
    4914:	0e 94 16 28 	call	0x502c	; 0x502c <realloc>
	if (newbuffer) {
    4918:	00 97       	sbiw	r24, 0x00	; 0
    491a:	31 f0       	breq	.+12     	; 0x4928 <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    491c:	99 83       	std	Y+1, r25	; 0x01
    491e:	88 83       	st	Y, r24
		capacity = maxStrLen;
    4920:	1b 83       	std	Y+3, r17	; 0x03
    4922:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    4924:	81 e0       	ldi	r24, 0x01	; 1
    4926:	01 c0       	rjmp	.+2      	; 0x492a <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    4928:	80 e0       	ldi	r24, 0x00	; 0
}
    492a:	df 91       	pop	r29
    492c:	cf 91       	pop	r28
    492e:	1f 91       	pop	r17
    4930:	0f 91       	pop	r16
    4932:	08 95       	ret

00004934 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    4934:	cf 93       	push	r28
    4936:	df 93       	push	r29
    4938:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    493a:	88 81       	ld	r24, Y
    493c:	99 81       	ldd	r25, Y+1	; 0x01
    493e:	89 2b       	or	r24, r25
    4940:	29 f0       	breq	.+10     	; 0x494c <_ZN6String7reserveEj+0x18>
    4942:	8a 81       	ldd	r24, Y+2	; 0x02
    4944:	9b 81       	ldd	r25, Y+3	; 0x03
    4946:	86 17       	cp	r24, r22
    4948:	97 07       	cpc	r25, r23
    494a:	60 f4       	brcc	.+24     	; 0x4964 <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    494c:	ce 01       	movw	r24, r28
    494e:	0e 94 80 24 	call	0x4900	; 0x4900 <_ZN6String12changeBufferEj>
    4952:	88 23       	and	r24, r24
    4954:	41 f0       	breq	.+16     	; 0x4966 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    4956:	8c 81       	ldd	r24, Y+4	; 0x04
    4958:	9d 81       	ldd	r25, Y+5	; 0x05
    495a:	89 2b       	or	r24, r25
    495c:	19 f4       	brne	.+6      	; 0x4964 <_ZN6String7reserveEj+0x30>
    495e:	e8 81       	ld	r30, Y
    4960:	f9 81       	ldd	r31, Y+1	; 0x01
    4962:	10 82       	st	Z, r1
    4964:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    4966:	df 91       	pop	r29
    4968:	cf 91       	pop	r28
    496a:	08 95       	ret

0000496c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    496c:	ef 92       	push	r14
    496e:	ff 92       	push	r15
    4970:	0f 93       	push	r16
    4972:	1f 93       	push	r17
    4974:	cf 93       	push	r28
    4976:	df 93       	push	r29
    4978:	ec 01       	movw	r28, r24
    497a:	7b 01       	movw	r14, r22
    497c:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    497e:	ba 01       	movw	r22, r20
    4980:	0e 94 9a 24 	call	0x4934	; 0x4934 <_ZN6String7reserveEj>
    4984:	81 11       	cpse	r24, r1
    4986:	04 c0       	rjmp	.+8      	; 0x4990 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    4988:	ce 01       	movw	r24, r28
    498a:	0e 94 6e 24 	call	0x48dc	; 0x48dc <_ZN6String10invalidateEv>
		return *this;
    498e:	07 c0       	rjmp	.+14     	; 0x499e <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    4990:	1d 83       	std	Y+5, r17	; 0x05
    4992:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    4994:	b7 01       	movw	r22, r14
    4996:	88 81       	ld	r24, Y
    4998:	99 81       	ldd	r25, Y+1	; 0x01
    499a:	0e 94 ea 28 	call	0x51d4	; 0x51d4 <strcpy>
	return *this;
}
    499e:	ce 01       	movw	r24, r28
    49a0:	df 91       	pop	r29
    49a2:	cf 91       	pop	r28
    49a4:	1f 91       	pop	r17
    49a6:	0f 91       	pop	r16
    49a8:	ff 90       	pop	r15
    49aa:	ef 90       	pop	r14
    49ac:	08 95       	ret

000049ae <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    49ae:	fc 01       	movw	r30, r24
    49b0:	11 82       	std	Z+1, r1	; 0x01
    49b2:	10 82       	st	Z, r1
	capacity = 0;
    49b4:	13 82       	std	Z+3, r1	; 0x03
    49b6:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    49b8:	15 82       	std	Z+5, r1	; 0x05
    49ba:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    49bc:	61 15       	cp	r22, r1
    49be:	71 05       	cpc	r23, r1
    49c0:	51 f0       	breq	.+20     	; 0x49d6 <_ZN6StringC1EPKc+0x28>
    49c2:	fb 01       	movw	r30, r22
    49c4:	01 90       	ld	r0, Z+
    49c6:	00 20       	and	r0, r0
    49c8:	e9 f7       	brne	.-6      	; 0x49c4 <_ZN6StringC1EPKc+0x16>
    49ca:	31 97       	sbiw	r30, 0x01	; 1
    49cc:	af 01       	movw	r20, r30
    49ce:	46 1b       	sub	r20, r22
    49d0:	57 0b       	sbc	r21, r23
    49d2:	0c 94 b6 24 	jmp	0x496c	; 0x496c <_ZN6String4copyEPKcj>
    49d6:	08 95       	ret

000049d8 <_ZN7Serial_5writeEh>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		ret = breakValue;
		breakValue = -1;
	}
	return ret;
}
    49d8:	cf 93       	push	r28
    49da:	df 93       	push	r29
    49dc:	1f 92       	push	r1
    49de:	cd b7       	in	r28, 0x3d	; 61
    49e0:	de b7       	in	r29, 0x3e	; 62
    49e2:	69 83       	std	Y+1, r22	; 0x01
    49e4:	dc 01       	movw	r26, r24
    49e6:	ed 91       	ld	r30, X+
    49e8:	fc 91       	ld	r31, X
    49ea:	02 80       	ldd	r0, Z+2	; 0x02
    49ec:	f3 81       	ldd	r31, Z+3	; 0x03
    49ee:	e0 2d       	mov	r30, r0
    49f0:	41 e0       	ldi	r20, 0x01	; 1
    49f2:	50 e0       	ldi	r21, 0x00	; 0
    49f4:	be 01       	movw	r22, r28
    49f6:	6f 5f       	subi	r22, 0xFF	; 255
    49f8:	7f 4f       	sbci	r23, 0xFF	; 255
    49fa:	09 95       	icall
    49fc:	0f 90       	pop	r0
    49fe:	df 91       	pop	r29
    4a00:	cf 91       	pop	r28
    4a02:	08 95       	ret

00004a04 <_ZN7Serial_4peekEv>:
    4a04:	cf 93       	push	r28
    4a06:	df 93       	push	r29
    4a08:	ec 01       	movw	r28, r24
    4a0a:	8c 85       	ldd	r24, Y+12	; 0x0c
    4a0c:	9d 85       	ldd	r25, Y+13	; 0x0d
    4a0e:	97 ff       	sbrs	r25, 7
    4a10:	05 c0       	rjmp	.+10     	; 0x4a1c <_ZN7Serial_4peekEv+0x18>
    4a12:	82 e0       	ldi	r24, 0x02	; 2
    4a14:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <_Z8USB_Recvh>
    4a18:	9d 87       	std	Y+13, r25	; 0x0d
    4a1a:	8c 87       	std	Y+12, r24	; 0x0c
    4a1c:	8c 85       	ldd	r24, Y+12	; 0x0c
    4a1e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4a20:	df 91       	pop	r29
    4a22:	cf 91       	pop	r28
    4a24:	08 95       	ret

00004a26 <_ZN7Serial_17availableForWriteEv>:
    4a26:	83 e0       	ldi	r24, 0x03	; 3
    4a28:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <_Z13USB_SendSpaceh>
    4a2c:	90 e0       	ldi	r25, 0x00	; 0
    4a2e:	08 95       	ret

00004a30 <_ZN7Serial_5flushEv>:
    4a30:	83 e0       	ldi	r24, 0x03	; 3
    4a32:	0c 94 05 20 	jmp	0x400a	; 0x400a <_Z9USB_Flushh>

00004a36 <_ZN7Serial_9availableEv>:
    4a36:	fc 01       	movw	r30, r24
    4a38:	84 85       	ldd	r24, Z+12	; 0x0c
    4a3a:	95 85       	ldd	r25, Z+13	; 0x0d
    4a3c:	97 fd       	sbrc	r25, 7
    4a3e:	06 c0       	rjmp	.+12     	; 0x4a4c <_ZN7Serial_9availableEv+0x16>
    4a40:	82 e0       	ldi	r24, 0x02	; 2
    4a42:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <_Z13USB_Availableh>
    4a46:	90 e0       	ldi	r25, 0x00	; 0
    4a48:	01 96       	adiw	r24, 0x01	; 1
    4a4a:	08 95       	ret
    4a4c:	82 e0       	ldi	r24, 0x02	; 2
    4a4e:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <_Z13USB_Availableh>
    4a52:	90 e0       	ldi	r25, 0x00	; 0
    4a54:	08 95       	ret

00004a56 <_ZN7Serial_4readEv>:
    4a56:	fc 01       	movw	r30, r24
    4a58:	84 85       	ldd	r24, Z+12	; 0x0c
    4a5a:	95 85       	ldd	r25, Z+13	; 0x0d
    4a5c:	97 fd       	sbrc	r25, 7
    4a5e:	05 c0       	rjmp	.+10     	; 0x4a6a <_ZN7Serial_4readEv+0x14>
    4a60:	2f ef       	ldi	r18, 0xFF	; 255
    4a62:	3f ef       	ldi	r19, 0xFF	; 255
    4a64:	35 87       	std	Z+13, r19	; 0x0d
    4a66:	24 87       	std	Z+12, r18	; 0x0c
    4a68:	08 95       	ret
    4a6a:	82 e0       	ldi	r24, 0x02	; 2
    4a6c:	0c 94 70 1d 	jmp	0x3ae0	; 0x3ae0 <_Z8USB_Recvh>

00004a70 <_ZN7Serial_5writeEPKhj>:
    4a70:	cf 93       	push	r28
    4a72:	df 93       	push	r29
    4a74:	ec 01       	movw	r28, r24
    4a76:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <_ZL12_usbLineInfo+0x7>
    4a7a:	88 23       	and	r24, r24
    4a7c:	31 f0       	breq	.+12     	; 0x4a8a <_ZN7Serial_5writeEPKhj+0x1a>
    4a7e:	83 e0       	ldi	r24, 0x03	; 3
    4a80:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <_Z8USB_SendhPKvi>
    4a84:	18 16       	cp	r1, r24
    4a86:	19 06       	cpc	r1, r25
    4a88:	34 f0       	brlt	.+12     	; 0x4a96 <_ZN7Serial_5writeEPKhj+0x26>
    4a8a:	81 e0       	ldi	r24, 0x01	; 1
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    4a8e:	9b 83       	std	Y+3, r25	; 0x03
    4a90:	8a 83       	std	Y+2, r24	; 0x02
    4a92:	80 e0       	ldi	r24, 0x00	; 0
    4a94:	90 e0       	ldi	r25, 0x00	; 0
    4a96:	df 91       	pop	r29
    4a98:	cf 91       	pop	r28
    4a9a:	08 95       	ret

00004a9c <_Z16isLUFAbootloaderv>:
    4a9c:	ee ef       	ldi	r30, 0xFE	; 254
    4a9e:	ff e7       	ldi	r31, 0x7F	; 127
    4aa0:	25 91       	lpm	r18, Z+
    4aa2:	34 91       	lpm	r19, Z
    4aa4:	81 e0       	ldi	r24, 0x01	; 1
    4aa6:	2b 3f       	cpi	r18, 0xFB	; 251
    4aa8:	3c 4d       	sbci	r19, 0xDC	; 220
    4aaa:	09 f0       	breq	.+2      	; 0x4aae <_Z16isLUFAbootloaderv+0x12>
    4aac:	80 e0       	ldi	r24, 0x00	; 0
    4aae:	08 95       	ret

00004ab0 <_Z16CDC_GetInterfacePh>:
    4ab0:	fc 01       	movw	r30, r24
    4ab2:	90 81       	ld	r25, Z
    4ab4:	9e 5f       	subi	r25, 0xFE	; 254
    4ab6:	90 83       	st	Z, r25
    4ab8:	42 e4       	ldi	r20, 0x42	; 66
    4aba:	50 e0       	ldi	r21, 0x00	; 0
    4abc:	6e ea       	ldi	r22, 0xAE	; 174
    4abe:	71 e0       	ldi	r23, 0x01	; 1
    4ac0:	80 e8       	ldi	r24, 0x80	; 128
    4ac2:	0c 94 51 1e 	jmp	0x3ca2	; 0x3ca2 <_Z15USB_SendControlhPKvi>

00004ac6 <_Z9CDC_SetupR8USBSetup>:
    4ac6:	fc 01       	movw	r30, r24
    4ac8:	81 81       	ldd	r24, Z+1	; 0x01
    4aca:	90 81       	ld	r25, Z
    4acc:	91 3a       	cpi	r25, 0xA1	; 161
    4ace:	59 f4       	brne	.+22     	; 0x4ae6 <_Z9CDC_SetupR8USBSetup+0x20>
    4ad0:	81 32       	cpi	r24, 0x21	; 33
    4ad2:	09 f0       	breq	.+2      	; 0x4ad6 <_Z9CDC_SetupR8USBSetup+0x10>
    4ad4:	65 c0       	rjmp	.+202    	; 0x4ba0 <_Z9CDC_SetupR8USBSetup+0xda>
    4ad6:	47 e0       	ldi	r20, 0x07	; 7
    4ad8:	50 e0       	ldi	r21, 0x00	; 0
    4ada:	6e e2       	ldi	r22, 0x2E	; 46
    4adc:	71 e0       	ldi	r23, 0x01	; 1
    4ade:	80 e0       	ldi	r24, 0x00	; 0
    4ae0:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_Z15USB_SendControlhPKvi>
    4ae4:	5b c0       	rjmp	.+182    	; 0x4b9c <_Z9CDC_SetupR8USBSetup+0xd6>
    4ae6:	91 32       	cpi	r25, 0x21	; 33
    4ae8:	09 f0       	breq	.+2      	; 0x4aec <_Z9CDC_SetupR8USBSetup+0x26>
    4aea:	5a c0       	rjmp	.+180    	; 0x4ba0 <_Z9CDC_SetupR8USBSetup+0xda>
    4aec:	83 32       	cpi	r24, 0x23	; 35
    4aee:	69 f4       	brne	.+26     	; 0x4b0a <_Z9CDC_SetupR8USBSetup+0x44>
    4af0:	82 81       	ldd	r24, Z+2	; 0x02
    4af2:	93 81       	ldd	r25, Z+3	; 0x03
    4af4:	a0 e0       	ldi	r26, 0x00	; 0
    4af6:	b0 e0       	ldi	r27, 0x00	; 0
    4af8:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <_ZL10breakValue>
    4afc:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <_ZL10breakValue+0x1>
    4b00:	a0 93 2c 01 	sts	0x012C, r26	; 0x80012c <_ZL10breakValue+0x2>
    4b04:	b0 93 2d 01 	sts	0x012D, r27	; 0x80012d <_ZL10breakValue+0x3>
    4b08:	49 c0       	rjmp	.+146    	; 0x4b9c <_Z9CDC_SetupR8USBSetup+0xd6>
    4b0a:	80 32       	cpi	r24, 0x20	; 32
    4b0c:	39 f4       	brne	.+14     	; 0x4b1c <_Z9CDC_SetupR8USBSetup+0x56>
    4b0e:	67 e0       	ldi	r22, 0x07	; 7
    4b10:	70 e0       	ldi	r23, 0x00	; 0
    4b12:	8e e2       	ldi	r24, 0x2E	; 46
    4b14:	91 e0       	ldi	r25, 0x01	; 1
    4b16:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <_Z15USB_RecvControlPvi>
    4b1a:	40 c0       	rjmp	.+128    	; 0x4b9c <_Z9CDC_SetupR8USBSetup+0xd6>
    4b1c:	82 32       	cpi	r24, 0x22	; 34
    4b1e:	09 f0       	breq	.+2      	; 0x4b22 <_Z9CDC_SetupR8USBSetup+0x5c>
    4b20:	3d c0       	rjmp	.+122    	; 0x4b9c <_Z9CDC_SetupR8USBSetup+0xd6>
    4b22:	82 81       	ldd	r24, Z+2	; 0x02
    4b24:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <_ZL12_usbLineInfo+0x7>
    4b28:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <_Z16isLUFAbootloaderv>
    4b2c:	88 23       	and	r24, r24
    4b2e:	19 f0       	breq	.+6      	; 0x4b36 <_Z9CDC_SetupR8USBSetup+0x70>
    4b30:	ee ef       	ldi	r30, 0xFE	; 254
    4b32:	fa e0       	ldi	r31, 0x0A	; 10
    4b34:	02 c0       	rjmp	.+4      	; 0x4b3a <_Z9CDC_SetupR8USBSetup+0x74>
    4b36:	e0 e0       	ldi	r30, 0x00	; 0
    4b38:	f8 e0       	ldi	r31, 0x08	; 8
    4b3a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <_ZL12_usbLineInfo>
    4b3e:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <_ZL12_usbLineInfo+0x1>
    4b42:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <_ZL12_usbLineInfo+0x2>
    4b46:	b0 91 31 01 	lds	r27, 0x0131	; 0x800131 <_ZL12_usbLineInfo+0x3>
    4b4a:	80 3b       	cpi	r24, 0xB0	; 176
    4b4c:	94 40       	sbci	r25, 0x04	; 4
    4b4e:	a1 05       	cpc	r26, r1
    4b50:	b1 05       	cpc	r27, r1
    4b52:	41 f5       	brne	.+80     	; 0x4ba4 <_Z9CDC_SetupR8USBSetup+0xde>
    4b54:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <_ZL12_usbLineInfo+0x7>
    4b58:	80 fd       	sbrc	r24, 0
    4b5a:	24 c0       	rjmp	.+72     	; 0x4ba4 <_Z9CDC_SetupR8USBSetup+0xde>
    4b5c:	ee 3f       	cpi	r30, 0xFE	; 254
    4b5e:	8a e0       	ldi	r24, 0x0A	; 10
    4b60:	f8 07       	cpc	r31, r24
    4b62:	51 f0       	breq	.+20     	; 0x4b78 <_Z9CDC_SetupR8USBSetup+0xb2>
    4b64:	80 81       	ld	r24, Z
    4b66:	91 81       	ldd	r25, Z+1	; 0x01
    4b68:	87 37       	cpi	r24, 0x77	; 119
    4b6a:	27 e7       	ldi	r18, 0x77	; 119
    4b6c:	92 07       	cpc	r25, r18
    4b6e:	21 f0       	breq	.+8      	; 0x4b78 <_Z9CDC_SetupR8USBSetup+0xb2>
    4b70:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x528>
    4b74:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x527>
    4b78:	87 e7       	ldi	r24, 0x77	; 119
    4b7a:	97 e7       	ldi	r25, 0x77	; 119
    4b7c:	91 83       	std	Z+1, r25	; 0x01
    4b7e:	80 83       	st	Z, r24
    4b80:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    4b84:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <_ZL11wdtcsr_save>
    4b88:	9b e0       	ldi	r25, 0x0B	; 11
    4b8a:	88 e1       	ldi	r24, 0x18	; 24
    4b8c:	0f b6       	in	r0, 0x3f	; 63
    4b8e:	f8 94       	cli
    4b90:	a8 95       	wdr
    4b92:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    4b96:	0f be       	out	0x3f, r0	; 63
    4b98:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    4b9c:	81 e0       	ldi	r24, 0x01	; 1
    4b9e:	08 95       	ret
    4ba0:	80 e0       	ldi	r24, 0x00	; 0
    4ba2:	08 95       	ret
    4ba4:	80 81       	ld	r24, Z
    4ba6:	91 81       	ldd	r25, Z+1	; 0x01
    4ba8:	87 37       	cpi	r24, 0x77	; 119
    4baa:	97 47       	sbci	r25, 0x77	; 119
    4bac:	b9 f7       	brne	.-18     	; 0x4b9c <_Z9CDC_SetupR8USBSetup+0xd6>
    4bae:	a8 95       	wdr
    4bb0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    4bb4:	88 61       	ori	r24, 0x18	; 24
    4bb6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    4bba:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <_ZL11wdtcsr_save>
    4bbe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    4bc2:	ee 3f       	cpi	r30, 0xFE	; 254
    4bc4:	8a e0       	ldi	r24, 0x0A	; 10
    4bc6:	f8 07       	cpc	r31, r24
    4bc8:	39 f0       	breq	.+14     	; 0x4bd8 <_Z9CDC_SetupR8USBSetup+0x112>
    4bca:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x527>
    4bce:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x528>
    4bd2:	91 83       	std	Z+1, r25	; 0x01
    4bd4:	80 83       	st	Z, r24
    4bd6:	e2 cf       	rjmp	.-60     	; 0x4b9c <_Z9CDC_SetupR8USBSetup+0xd6>
    4bd8:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x528>
    4bdc:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x527>
    4be0:	dd cf       	rjmp	.-70     	; 0x4b9c <_Z9CDC_SetupR8USBSetup+0xd6>

00004be2 <_GLOBAL__sub_I__cdcInterface>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    4be2:	e6 e7       	ldi	r30, 0x76	; 118
    4be4:	f5 e0       	ldi	r31, 0x05	; 5
    4be6:	13 82       	std	Z+3, r1	; 0x03
    4be8:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    4bea:	88 ee       	ldi	r24, 0xE8	; 232
    4bec:	93 e0       	ldi	r25, 0x03	; 3
    4bee:	a0 e0       	ldi	r26, 0x00	; 0
    4bf0:	b0 e0       	ldi	r27, 0x00	; 0
    4bf2:	84 83       	std	Z+4, r24	; 0x04
    4bf4:	95 83       	std	Z+5, r25	; 0x05
    4bf6:	a6 83       	std	Z+6, r26	; 0x06
    4bf8:	b7 83       	std	Z+7, r27	; 0x07
class Serial_ : public Stream
{
private:
	int peek_buffer;
public:
	Serial_() { peek_buffer = -1; };
    4bfa:	88 ef       	ldi	r24, 0xF8	; 248
    4bfc:	92 e0       	ldi	r25, 0x02	; 2
    4bfe:	91 83       	std	Z+1, r25	; 0x01
    4c00:	80 83       	st	Z, r24
    4c02:	8f ef       	ldi	r24, 0xFF	; 255
    4c04:	9f ef       	ldi	r25, 0xFF	; 255
    4c06:	95 87       	std	Z+13, r25	; 0x0d
    4c08:	84 87       	std	Z+12, r24	; 0x0c
    4c0a:	08 95       	ret

00004c0c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    4c0c:	08 95       	ret

00004c0e <_ZN13PluggableUSB_12getInterfaceEPh>:
		_initEndpoints[lastEp] = node->endpointType[i];
		lastEp++;
	}
	return true;
	// restart USB layer???
}
    4c0e:	ef 92       	push	r14
    4c10:	ff 92       	push	r15
    4c12:	0f 93       	push	r16
    4c14:	1f 93       	push	r17
    4c16:	cf 93       	push	r28
    4c18:	df 93       	push	r29
    4c1a:	7b 01       	movw	r14, r22
    4c1c:	fc 01       	movw	r30, r24
    4c1e:	c2 81       	ldd	r28, Z+2	; 0x02
    4c20:	d3 81       	ldd	r29, Z+3	; 0x03
    4c22:	00 e0       	ldi	r16, 0x00	; 0
    4c24:	10 e0       	ldi	r17, 0x00	; 0
    4c26:	20 97       	sbiw	r28, 0x00	; 0
    4c28:	81 f0       	breq	.+32     	; 0x4c4a <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
    4c2a:	e8 81       	ld	r30, Y
    4c2c:	f9 81       	ldd	r31, Y+1	; 0x01
    4c2e:	02 80       	ldd	r0, Z+2	; 0x02
    4c30:	f3 81       	ldd	r31, Z+3	; 0x03
    4c32:	e0 2d       	mov	r30, r0
    4c34:	b7 01       	movw	r22, r14
    4c36:	ce 01       	movw	r24, r28
    4c38:	09 95       	icall
    4c3a:	97 fd       	sbrc	r25, 7
    4c3c:	08 c0       	rjmp	.+16     	; 0x4c4e <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
    4c3e:	08 0f       	add	r16, r24
    4c40:	19 1f       	adc	r17, r25
    4c42:	08 84       	ldd	r0, Y+8	; 0x08
    4c44:	d9 85       	ldd	r29, Y+9	; 0x09
    4c46:	c0 2d       	mov	r28, r0
    4c48:	ee cf       	rjmp	.-36     	; 0x4c26 <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    4c4a:	c8 01       	movw	r24, r16
    4c4c:	02 c0       	rjmp	.+4      	; 0x4c52 <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
    4c4e:	8f ef       	ldi	r24, 0xFF	; 255
    4c50:	9f ef       	ldi	r25, 0xFF	; 255
    4c52:	df 91       	pop	r29
    4c54:	cf 91       	pop	r28
    4c56:	1f 91       	pop	r17
    4c58:	0f 91       	pop	r16
    4c5a:	ff 90       	pop	r15
    4c5c:	ef 90       	pop	r14
    4c5e:	08 95       	ret

00004c60 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    4c60:	0f 93       	push	r16
    4c62:	1f 93       	push	r17
    4c64:	cf 93       	push	r28
    4c66:	df 93       	push	r29
    4c68:	8b 01       	movw	r16, r22
    4c6a:	fc 01       	movw	r30, r24
    4c6c:	c2 81       	ldd	r28, Z+2	; 0x02
    4c6e:	d3 81       	ldd	r29, Z+3	; 0x03
    4c70:	20 97       	sbiw	r28, 0x00	; 0
    4c72:	71 f0       	breq	.+28     	; 0x4c90 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
    4c74:	e8 81       	ld	r30, Y
    4c76:	f9 81       	ldd	r31, Y+1	; 0x01
    4c78:	04 80       	ldd	r0, Z+4	; 0x04
    4c7a:	f5 81       	ldd	r31, Z+5	; 0x05
    4c7c:	e0 2d       	mov	r30, r0
    4c7e:	b8 01       	movw	r22, r16
    4c80:	ce 01       	movw	r24, r28
    4c82:	09 95       	icall
    4c84:	00 97       	sbiw	r24, 0x00	; 0
    4c86:	31 f4       	brne	.+12     	; 0x4c94 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
    4c88:	08 84       	ldd	r0, Y+8	; 0x08
    4c8a:	d9 85       	ldd	r29, Y+9	; 0x09
    4c8c:	c0 2d       	mov	r28, r0
    4c8e:	f0 cf       	rjmp	.-32     	; 0x4c70 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
    4c90:	80 e0       	ldi	r24, 0x00	; 0
    4c92:	90 e0       	ldi	r25, 0x00	; 0
    4c94:	df 91       	pop	r29
    4c96:	cf 91       	pop	r28
    4c98:	1f 91       	pop	r17
    4c9a:	0f 91       	pop	r16
    4c9c:	08 95       	ret

00004c9e <_ZN13PluggableUSB_12getShortNameEPc>:
    4c9e:	0f 93       	push	r16
    4ca0:	1f 93       	push	r17
    4ca2:	cf 93       	push	r28
    4ca4:	df 93       	push	r29
    4ca6:	8b 01       	movw	r16, r22
    4ca8:	fc 01       	movw	r30, r24
    4caa:	c2 81       	ldd	r28, Z+2	; 0x02
    4cac:	d3 81       	ldd	r29, Z+3	; 0x03
    4cae:	20 97       	sbiw	r28, 0x00	; 0
    4cb0:	71 f0       	breq	.+28     	; 0x4cce <_ZN13PluggableUSB_12getShortNameEPc+0x30>
    4cb2:	e8 81       	ld	r30, Y
    4cb4:	f9 81       	ldd	r31, Y+1	; 0x01
    4cb6:	06 80       	ldd	r0, Z+6	; 0x06
    4cb8:	f7 81       	ldd	r31, Z+7	; 0x07
    4cba:	e0 2d       	mov	r30, r0
    4cbc:	b8 01       	movw	r22, r16
    4cbe:	ce 01       	movw	r24, r28
    4cc0:	09 95       	icall
    4cc2:	08 0f       	add	r16, r24
    4cc4:	11 1d       	adc	r17, r1
    4cc6:	08 84       	ldd	r0, Y+8	; 0x08
    4cc8:	d9 85       	ldd	r29, Y+9	; 0x09
    4cca:	c0 2d       	mov	r28, r0
    4ccc:	f0 cf       	rjmp	.-32     	; 0x4cae <_ZN13PluggableUSB_12getShortNameEPc+0x10>
    4cce:	f8 01       	movw	r30, r16
    4cd0:	10 82       	st	Z, r1
    4cd2:	df 91       	pop	r29
    4cd4:	cf 91       	pop	r28
    4cd6:	1f 91       	pop	r17
    4cd8:	0f 91       	pop	r16
    4cda:	08 95       	ret

00004cdc <_ZN13PluggableUSB_5setupER8USBSetup>:
    4cdc:	0f 93       	push	r16
    4cde:	1f 93       	push	r17
    4ce0:	cf 93       	push	r28
    4ce2:	df 93       	push	r29
    4ce4:	8b 01       	movw	r16, r22
    4ce6:	fc 01       	movw	r30, r24
    4ce8:	c2 81       	ldd	r28, Z+2	; 0x02
    4cea:	d3 81       	ldd	r29, Z+3	; 0x03
    4cec:	20 97       	sbiw	r28, 0x00	; 0
    4cee:	71 f0       	breq	.+28     	; 0x4d0c <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
    4cf0:	e8 81       	ld	r30, Y
    4cf2:	f9 81       	ldd	r31, Y+1	; 0x01
    4cf4:	01 90       	ld	r0, Z+
    4cf6:	f0 81       	ld	r31, Z
    4cf8:	e0 2d       	mov	r30, r0
    4cfa:	b8 01       	movw	r22, r16
    4cfc:	ce 01       	movw	r24, r28
    4cfe:	09 95       	icall
    4d00:	81 11       	cpse	r24, r1
    4d02:	05 c0       	rjmp	.+10     	; 0x4d0e <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
    4d04:	08 84       	ldd	r0, Y+8	; 0x08
    4d06:	d9 85       	ldd	r29, Y+9	; 0x09
    4d08:	c0 2d       	mov	r28, r0
    4d0a:	f0 cf       	rjmp	.-32     	; 0x4cec <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
    4d0c:	80 e0       	ldi	r24, 0x00	; 0
    4d0e:	df 91       	pop	r29
    4d10:	cf 91       	pop	r28
    4d12:	1f 91       	pop	r17
    4d14:	0f 91       	pop	r16
    4d16:	08 95       	ret

00004d18 <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    4d18:	80 91 cb 05 	lds	r24, 0x05CB	; 0x8005cb <_ZGVZ12PluggableUSBvE3obj>
    4d1c:	81 11       	cpse	r24, r1
    4d1e:	0d c0       	rjmp	.+26     	; 0x4d3a <_Z12PluggableUSBv+0x22>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    4d20:	82 e0       	ldi	r24, 0x02	; 2
    4d22:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <_ZZ12PluggableUSBvE3obj>
    4d26:	84 e0       	ldi	r24, 0x04	; 4
    4d28:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <_ZZ12PluggableUSBvE3obj+0x1>
    4d2c:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <_ZZ12PluggableUSBvE3obj+0x3>
    4d30:	10 92 c9 05 	sts	0x05C9, r1	; 0x8005c9 <_ZZ12PluggableUSBvE3obj+0x2>
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    4d34:	81 e0       	ldi	r24, 0x01	; 1
    4d36:	80 93 cb 05 	sts	0x05CB, r24	; 0x8005cb <_ZGVZ12PluggableUSBvE3obj>
	return obj;
}
    4d3a:	87 ec       	ldi	r24, 0xC7	; 199
    4d3c:	95 e0       	ldi	r25, 0x05	; 5
    4d3e:	08 95       	ret

00004d40 <__unordsf2>:
    4d40:	0e 94 8f 19 	call	0x331e	; 0x331e <__fp_cmp>
    4d44:	88 0b       	sbc	r24, r24
    4d46:	99 0b       	sbc	r25, r25
    4d48:	08 95       	ret

00004d4a <__divmodhi4>:
    4d4a:	97 fb       	bst	r25, 7
    4d4c:	07 2e       	mov	r0, r23
    4d4e:	16 f4       	brtc	.+4      	; 0x4d54 <__divmodhi4+0xa>
    4d50:	00 94       	com	r0
    4d52:	07 d0       	rcall	.+14     	; 0x4d62 <__divmodhi4_neg1>
    4d54:	77 fd       	sbrc	r23, 7
    4d56:	09 d0       	rcall	.+18     	; 0x4d6a <__divmodhi4_neg2>
    4d58:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__udivmodhi4>
    4d5c:	07 fc       	sbrc	r0, 7
    4d5e:	05 d0       	rcall	.+10     	; 0x4d6a <__divmodhi4_neg2>
    4d60:	3e f4       	brtc	.+14     	; 0x4d70 <__divmodhi4_exit>

00004d62 <__divmodhi4_neg1>:
    4d62:	90 95       	com	r25
    4d64:	81 95       	neg	r24
    4d66:	9f 4f       	sbci	r25, 0xFF	; 255
    4d68:	08 95       	ret

00004d6a <__divmodhi4_neg2>:
    4d6a:	70 95       	com	r23
    4d6c:	61 95       	neg	r22
    4d6e:	7f 4f       	sbci	r23, 0xFF	; 255

00004d70 <__divmodhi4_exit>:
    4d70:	08 95       	ret

00004d72 <__udivmodsi4>:
    4d72:	a1 e2       	ldi	r26, 0x21	; 33
    4d74:	1a 2e       	mov	r1, r26
    4d76:	aa 1b       	sub	r26, r26
    4d78:	bb 1b       	sub	r27, r27
    4d7a:	fd 01       	movw	r30, r26
    4d7c:	0d c0       	rjmp	.+26     	; 0x4d98 <__udivmodsi4_ep>

00004d7e <__udivmodsi4_loop>:
    4d7e:	aa 1f       	adc	r26, r26
    4d80:	bb 1f       	adc	r27, r27
    4d82:	ee 1f       	adc	r30, r30
    4d84:	ff 1f       	adc	r31, r31
    4d86:	a2 17       	cp	r26, r18
    4d88:	b3 07       	cpc	r27, r19
    4d8a:	e4 07       	cpc	r30, r20
    4d8c:	f5 07       	cpc	r31, r21
    4d8e:	20 f0       	brcs	.+8      	; 0x4d98 <__udivmodsi4_ep>
    4d90:	a2 1b       	sub	r26, r18
    4d92:	b3 0b       	sbc	r27, r19
    4d94:	e4 0b       	sbc	r30, r20
    4d96:	f5 0b       	sbc	r31, r21

00004d98 <__udivmodsi4_ep>:
    4d98:	66 1f       	adc	r22, r22
    4d9a:	77 1f       	adc	r23, r23
    4d9c:	88 1f       	adc	r24, r24
    4d9e:	99 1f       	adc	r25, r25
    4da0:	1a 94       	dec	r1
    4da2:	69 f7       	brne	.-38     	; 0x4d7e <__udivmodsi4_loop>
    4da4:	60 95       	com	r22
    4da6:	70 95       	com	r23
    4da8:	80 95       	com	r24
    4daa:	90 95       	com	r25
    4dac:	9b 01       	movw	r18, r22
    4dae:	ac 01       	movw	r20, r24
    4db0:	bd 01       	movw	r22, r26
    4db2:	cf 01       	movw	r24, r30
    4db4:	08 95       	ret

00004db6 <__tablejump2__>:
    4db6:	ee 0f       	add	r30, r30
    4db8:	ff 1f       	adc	r31, r31
    4dba:	05 90       	lpm	r0, Z+
    4dbc:	f4 91       	lpm	r31, Z
    4dbe:	e0 2d       	mov	r30, r0
    4dc0:	09 94       	ijmp

00004dc2 <__udivmodhi4>:
    4dc2:	aa 1b       	sub	r26, r26
    4dc4:	bb 1b       	sub	r27, r27
    4dc6:	51 e1       	ldi	r21, 0x11	; 17
    4dc8:	07 c0       	rjmp	.+14     	; 0x4dd8 <__udivmodhi4_ep>

00004dca <__udivmodhi4_loop>:
    4dca:	aa 1f       	adc	r26, r26
    4dcc:	bb 1f       	adc	r27, r27
    4dce:	a6 17       	cp	r26, r22
    4dd0:	b7 07       	cpc	r27, r23
    4dd2:	10 f0       	brcs	.+4      	; 0x4dd8 <__udivmodhi4_ep>
    4dd4:	a6 1b       	sub	r26, r22
    4dd6:	b7 0b       	sbc	r27, r23

00004dd8 <__udivmodhi4_ep>:
    4dd8:	88 1f       	adc	r24, r24
    4dda:	99 1f       	adc	r25, r25
    4ddc:	5a 95       	dec	r21
    4dde:	a9 f7       	brne	.-22     	; 0x4dca <__udivmodhi4_loop>
    4de0:	80 95       	com	r24
    4de2:	90 95       	com	r25
    4de4:	bc 01       	movw	r22, r24
    4de6:	cd 01       	movw	r24, r26
    4de8:	08 95       	ret

00004dea <malloc>:
    4dea:	0f 93       	push	r16
    4dec:	1f 93       	push	r17
    4dee:	cf 93       	push	r28
    4df0:	df 93       	push	r29
    4df2:	82 30       	cpi	r24, 0x02	; 2
    4df4:	91 05       	cpc	r25, r1
    4df6:	10 f4       	brcc	.+4      	; 0x4dfc <malloc+0x12>
    4df8:	82 e0       	ldi	r24, 0x02	; 2
    4dfa:	90 e0       	ldi	r25, 0x00	; 0
    4dfc:	e0 91 d5 05 	lds	r30, 0x05D5	; 0x8005d5 <__flp>
    4e00:	f0 91 d6 05 	lds	r31, 0x05D6	; 0x8005d6 <__flp+0x1>
    4e04:	20 e0       	ldi	r18, 0x00	; 0
    4e06:	30 e0       	ldi	r19, 0x00	; 0
    4e08:	a0 e0       	ldi	r26, 0x00	; 0
    4e0a:	b0 e0       	ldi	r27, 0x00	; 0
    4e0c:	30 97       	sbiw	r30, 0x00	; 0
    4e0e:	19 f1       	breq	.+70     	; 0x4e56 <malloc+0x6c>
    4e10:	40 81       	ld	r20, Z
    4e12:	51 81       	ldd	r21, Z+1	; 0x01
    4e14:	02 81       	ldd	r16, Z+2	; 0x02
    4e16:	13 81       	ldd	r17, Z+3	; 0x03
    4e18:	48 17       	cp	r20, r24
    4e1a:	59 07       	cpc	r21, r25
    4e1c:	c8 f0       	brcs	.+50     	; 0x4e50 <malloc+0x66>
    4e1e:	84 17       	cp	r24, r20
    4e20:	95 07       	cpc	r25, r21
    4e22:	69 f4       	brne	.+26     	; 0x4e3e <malloc+0x54>
    4e24:	10 97       	sbiw	r26, 0x00	; 0
    4e26:	31 f0       	breq	.+12     	; 0x4e34 <malloc+0x4a>
    4e28:	12 96       	adiw	r26, 0x02	; 2
    4e2a:	0c 93       	st	X, r16
    4e2c:	12 97       	sbiw	r26, 0x02	; 2
    4e2e:	13 96       	adiw	r26, 0x03	; 3
    4e30:	1c 93       	st	X, r17
    4e32:	27 c0       	rjmp	.+78     	; 0x4e82 <malloc+0x98>
    4e34:	00 93 d5 05 	sts	0x05D5, r16	; 0x8005d5 <__flp>
    4e38:	10 93 d6 05 	sts	0x05D6, r17	; 0x8005d6 <__flp+0x1>
    4e3c:	22 c0       	rjmp	.+68     	; 0x4e82 <malloc+0x98>
    4e3e:	21 15       	cp	r18, r1
    4e40:	31 05       	cpc	r19, r1
    4e42:	19 f0       	breq	.+6      	; 0x4e4a <malloc+0x60>
    4e44:	42 17       	cp	r20, r18
    4e46:	53 07       	cpc	r21, r19
    4e48:	18 f4       	brcc	.+6      	; 0x4e50 <malloc+0x66>
    4e4a:	9a 01       	movw	r18, r20
    4e4c:	bd 01       	movw	r22, r26
    4e4e:	ef 01       	movw	r28, r30
    4e50:	df 01       	movw	r26, r30
    4e52:	f8 01       	movw	r30, r16
    4e54:	db cf       	rjmp	.-74     	; 0x4e0c <malloc+0x22>
    4e56:	21 15       	cp	r18, r1
    4e58:	31 05       	cpc	r19, r1
    4e5a:	f9 f0       	breq	.+62     	; 0x4e9a <malloc+0xb0>
    4e5c:	28 1b       	sub	r18, r24
    4e5e:	39 0b       	sbc	r19, r25
    4e60:	24 30       	cpi	r18, 0x04	; 4
    4e62:	31 05       	cpc	r19, r1
    4e64:	80 f4       	brcc	.+32     	; 0x4e86 <malloc+0x9c>
    4e66:	8a 81       	ldd	r24, Y+2	; 0x02
    4e68:	9b 81       	ldd	r25, Y+3	; 0x03
    4e6a:	61 15       	cp	r22, r1
    4e6c:	71 05       	cpc	r23, r1
    4e6e:	21 f0       	breq	.+8      	; 0x4e78 <malloc+0x8e>
    4e70:	fb 01       	movw	r30, r22
    4e72:	93 83       	std	Z+3, r25	; 0x03
    4e74:	82 83       	std	Z+2, r24	; 0x02
    4e76:	04 c0       	rjmp	.+8      	; 0x4e80 <malloc+0x96>
    4e78:	90 93 d6 05 	sts	0x05D6, r25	; 0x8005d6 <__flp+0x1>
    4e7c:	80 93 d5 05 	sts	0x05D5, r24	; 0x8005d5 <__flp>
    4e80:	fe 01       	movw	r30, r28
    4e82:	32 96       	adiw	r30, 0x02	; 2
    4e84:	44 c0       	rjmp	.+136    	; 0x4f0e <malloc+0x124>
    4e86:	fe 01       	movw	r30, r28
    4e88:	e2 0f       	add	r30, r18
    4e8a:	f3 1f       	adc	r31, r19
    4e8c:	81 93       	st	Z+, r24
    4e8e:	91 93       	st	Z+, r25
    4e90:	22 50       	subi	r18, 0x02	; 2
    4e92:	31 09       	sbc	r19, r1
    4e94:	39 83       	std	Y+1, r19	; 0x01
    4e96:	28 83       	st	Y, r18
    4e98:	3a c0       	rjmp	.+116    	; 0x4f0e <malloc+0x124>
    4e9a:	20 91 d3 05 	lds	r18, 0x05D3	; 0x8005d3 <__brkval>
    4e9e:	30 91 d4 05 	lds	r19, 0x05D4	; 0x8005d4 <__brkval+0x1>
    4ea2:	23 2b       	or	r18, r19
    4ea4:	41 f4       	brne	.+16     	; 0x4eb6 <malloc+0xcc>
    4ea6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    4eaa:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4eae:	30 93 d4 05 	sts	0x05D4, r19	; 0x8005d4 <__brkval+0x1>
    4eb2:	20 93 d3 05 	sts	0x05D3, r18	; 0x8005d3 <__brkval>
    4eb6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    4eba:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4ebe:	21 15       	cp	r18, r1
    4ec0:	31 05       	cpc	r19, r1
    4ec2:	41 f4       	brne	.+16     	; 0x4ed4 <malloc+0xea>
    4ec4:	2d b7       	in	r18, 0x3d	; 61
    4ec6:	3e b7       	in	r19, 0x3e	; 62
    4ec8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4ecc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4ed0:	24 1b       	sub	r18, r20
    4ed2:	35 0b       	sbc	r19, r21
    4ed4:	e0 91 d3 05 	lds	r30, 0x05D3	; 0x8005d3 <__brkval>
    4ed8:	f0 91 d4 05 	lds	r31, 0x05D4	; 0x8005d4 <__brkval+0x1>
    4edc:	e2 17       	cp	r30, r18
    4ede:	f3 07       	cpc	r31, r19
    4ee0:	a0 f4       	brcc	.+40     	; 0x4f0a <malloc+0x120>
    4ee2:	2e 1b       	sub	r18, r30
    4ee4:	3f 0b       	sbc	r19, r31
    4ee6:	28 17       	cp	r18, r24
    4ee8:	39 07       	cpc	r19, r25
    4eea:	78 f0       	brcs	.+30     	; 0x4f0a <malloc+0x120>
    4eec:	ac 01       	movw	r20, r24
    4eee:	4e 5f       	subi	r20, 0xFE	; 254
    4ef0:	5f 4f       	sbci	r21, 0xFF	; 255
    4ef2:	24 17       	cp	r18, r20
    4ef4:	35 07       	cpc	r19, r21
    4ef6:	48 f0       	brcs	.+18     	; 0x4f0a <malloc+0x120>
    4ef8:	4e 0f       	add	r20, r30
    4efa:	5f 1f       	adc	r21, r31
    4efc:	50 93 d4 05 	sts	0x05D4, r21	; 0x8005d4 <__brkval+0x1>
    4f00:	40 93 d3 05 	sts	0x05D3, r20	; 0x8005d3 <__brkval>
    4f04:	81 93       	st	Z+, r24
    4f06:	91 93       	st	Z+, r25
    4f08:	02 c0       	rjmp	.+4      	; 0x4f0e <malloc+0x124>
    4f0a:	e0 e0       	ldi	r30, 0x00	; 0
    4f0c:	f0 e0       	ldi	r31, 0x00	; 0
    4f0e:	cf 01       	movw	r24, r30
    4f10:	df 91       	pop	r29
    4f12:	cf 91       	pop	r28
    4f14:	1f 91       	pop	r17
    4f16:	0f 91       	pop	r16
    4f18:	08 95       	ret

00004f1a <free>:
    4f1a:	cf 93       	push	r28
    4f1c:	df 93       	push	r29
    4f1e:	00 97       	sbiw	r24, 0x00	; 0
    4f20:	09 f4       	brne	.+2      	; 0x4f24 <free+0xa>
    4f22:	81 c0       	rjmp	.+258    	; 0x5026 <free+0x10c>
    4f24:	fc 01       	movw	r30, r24
    4f26:	32 97       	sbiw	r30, 0x02	; 2
    4f28:	13 82       	std	Z+3, r1	; 0x03
    4f2a:	12 82       	std	Z+2, r1	; 0x02
    4f2c:	a0 91 d5 05 	lds	r26, 0x05D5	; 0x8005d5 <__flp>
    4f30:	b0 91 d6 05 	lds	r27, 0x05D6	; 0x8005d6 <__flp+0x1>
    4f34:	10 97       	sbiw	r26, 0x00	; 0
    4f36:	81 f4       	brne	.+32     	; 0x4f58 <free+0x3e>
    4f38:	20 81       	ld	r18, Z
    4f3a:	31 81       	ldd	r19, Z+1	; 0x01
    4f3c:	82 0f       	add	r24, r18
    4f3e:	93 1f       	adc	r25, r19
    4f40:	20 91 d3 05 	lds	r18, 0x05D3	; 0x8005d3 <__brkval>
    4f44:	30 91 d4 05 	lds	r19, 0x05D4	; 0x8005d4 <__brkval+0x1>
    4f48:	28 17       	cp	r18, r24
    4f4a:	39 07       	cpc	r19, r25
    4f4c:	51 f5       	brne	.+84     	; 0x4fa2 <free+0x88>
    4f4e:	f0 93 d4 05 	sts	0x05D4, r31	; 0x8005d4 <__brkval+0x1>
    4f52:	e0 93 d3 05 	sts	0x05D3, r30	; 0x8005d3 <__brkval>
    4f56:	67 c0       	rjmp	.+206    	; 0x5026 <free+0x10c>
    4f58:	ed 01       	movw	r28, r26
    4f5a:	20 e0       	ldi	r18, 0x00	; 0
    4f5c:	30 e0       	ldi	r19, 0x00	; 0
    4f5e:	ce 17       	cp	r28, r30
    4f60:	df 07       	cpc	r29, r31
    4f62:	40 f4       	brcc	.+16     	; 0x4f74 <free+0x5a>
    4f64:	4a 81       	ldd	r20, Y+2	; 0x02
    4f66:	5b 81       	ldd	r21, Y+3	; 0x03
    4f68:	9e 01       	movw	r18, r28
    4f6a:	41 15       	cp	r20, r1
    4f6c:	51 05       	cpc	r21, r1
    4f6e:	f1 f0       	breq	.+60     	; 0x4fac <free+0x92>
    4f70:	ea 01       	movw	r28, r20
    4f72:	f5 cf       	rjmp	.-22     	; 0x4f5e <free+0x44>
    4f74:	d3 83       	std	Z+3, r29	; 0x03
    4f76:	c2 83       	std	Z+2, r28	; 0x02
    4f78:	40 81       	ld	r20, Z
    4f7a:	51 81       	ldd	r21, Z+1	; 0x01
    4f7c:	84 0f       	add	r24, r20
    4f7e:	95 1f       	adc	r25, r21
    4f80:	c8 17       	cp	r28, r24
    4f82:	d9 07       	cpc	r29, r25
    4f84:	59 f4       	brne	.+22     	; 0x4f9c <free+0x82>
    4f86:	88 81       	ld	r24, Y
    4f88:	99 81       	ldd	r25, Y+1	; 0x01
    4f8a:	84 0f       	add	r24, r20
    4f8c:	95 1f       	adc	r25, r21
    4f8e:	02 96       	adiw	r24, 0x02	; 2
    4f90:	91 83       	std	Z+1, r25	; 0x01
    4f92:	80 83       	st	Z, r24
    4f94:	8a 81       	ldd	r24, Y+2	; 0x02
    4f96:	9b 81       	ldd	r25, Y+3	; 0x03
    4f98:	93 83       	std	Z+3, r25	; 0x03
    4f9a:	82 83       	std	Z+2, r24	; 0x02
    4f9c:	21 15       	cp	r18, r1
    4f9e:	31 05       	cpc	r19, r1
    4fa0:	29 f4       	brne	.+10     	; 0x4fac <free+0x92>
    4fa2:	f0 93 d6 05 	sts	0x05D6, r31	; 0x8005d6 <__flp+0x1>
    4fa6:	e0 93 d5 05 	sts	0x05D5, r30	; 0x8005d5 <__flp>
    4faa:	3d c0       	rjmp	.+122    	; 0x5026 <free+0x10c>
    4fac:	e9 01       	movw	r28, r18
    4fae:	fb 83       	std	Y+3, r31	; 0x03
    4fb0:	ea 83       	std	Y+2, r30	; 0x02
    4fb2:	49 91       	ld	r20, Y+
    4fb4:	59 91       	ld	r21, Y+
    4fb6:	c4 0f       	add	r28, r20
    4fb8:	d5 1f       	adc	r29, r21
    4fba:	ec 17       	cp	r30, r28
    4fbc:	fd 07       	cpc	r31, r29
    4fbe:	61 f4       	brne	.+24     	; 0x4fd8 <free+0xbe>
    4fc0:	80 81       	ld	r24, Z
    4fc2:	91 81       	ldd	r25, Z+1	; 0x01
    4fc4:	84 0f       	add	r24, r20
    4fc6:	95 1f       	adc	r25, r21
    4fc8:	02 96       	adiw	r24, 0x02	; 2
    4fca:	e9 01       	movw	r28, r18
    4fcc:	99 83       	std	Y+1, r25	; 0x01
    4fce:	88 83       	st	Y, r24
    4fd0:	82 81       	ldd	r24, Z+2	; 0x02
    4fd2:	93 81       	ldd	r25, Z+3	; 0x03
    4fd4:	9b 83       	std	Y+3, r25	; 0x03
    4fd6:	8a 83       	std	Y+2, r24	; 0x02
    4fd8:	e0 e0       	ldi	r30, 0x00	; 0
    4fda:	f0 e0       	ldi	r31, 0x00	; 0
    4fdc:	12 96       	adiw	r26, 0x02	; 2
    4fde:	8d 91       	ld	r24, X+
    4fe0:	9c 91       	ld	r25, X
    4fe2:	13 97       	sbiw	r26, 0x03	; 3
    4fe4:	00 97       	sbiw	r24, 0x00	; 0
    4fe6:	19 f0       	breq	.+6      	; 0x4fee <free+0xd4>
    4fe8:	fd 01       	movw	r30, r26
    4fea:	dc 01       	movw	r26, r24
    4fec:	f7 cf       	rjmp	.-18     	; 0x4fdc <free+0xc2>
    4fee:	8d 91       	ld	r24, X+
    4ff0:	9c 91       	ld	r25, X
    4ff2:	11 97       	sbiw	r26, 0x01	; 1
    4ff4:	9d 01       	movw	r18, r26
    4ff6:	2e 5f       	subi	r18, 0xFE	; 254
    4ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    4ffa:	82 0f       	add	r24, r18
    4ffc:	93 1f       	adc	r25, r19
    4ffe:	20 91 d3 05 	lds	r18, 0x05D3	; 0x8005d3 <__brkval>
    5002:	30 91 d4 05 	lds	r19, 0x05D4	; 0x8005d4 <__brkval+0x1>
    5006:	28 17       	cp	r18, r24
    5008:	39 07       	cpc	r19, r25
    500a:	69 f4       	brne	.+26     	; 0x5026 <free+0x10c>
    500c:	30 97       	sbiw	r30, 0x00	; 0
    500e:	29 f4       	brne	.+10     	; 0x501a <free+0x100>
    5010:	10 92 d6 05 	sts	0x05D6, r1	; 0x8005d6 <__flp+0x1>
    5014:	10 92 d5 05 	sts	0x05D5, r1	; 0x8005d5 <__flp>
    5018:	02 c0       	rjmp	.+4      	; 0x501e <free+0x104>
    501a:	13 82       	std	Z+3, r1	; 0x03
    501c:	12 82       	std	Z+2, r1	; 0x02
    501e:	b0 93 d4 05 	sts	0x05D4, r27	; 0x8005d4 <__brkval+0x1>
    5022:	a0 93 d3 05 	sts	0x05D3, r26	; 0x8005d3 <__brkval>
    5026:	df 91       	pop	r29
    5028:	cf 91       	pop	r28
    502a:	08 95       	ret

0000502c <realloc>:
    502c:	a0 e0       	ldi	r26, 0x00	; 0
    502e:	b0 e0       	ldi	r27, 0x00	; 0
    5030:	ec e1       	ldi	r30, 0x1C	; 28
    5032:	f8 e2       	ldi	r31, 0x28	; 40
    5034:	0c 94 f5 28 	jmp	0x51ea	; 0x51ea <__prologue_saves__+0x8>
    5038:	ec 01       	movw	r28, r24
    503a:	00 97       	sbiw	r24, 0x00	; 0
    503c:	21 f4       	brne	.+8      	; 0x5046 <realloc+0x1a>
    503e:	cb 01       	movw	r24, r22
    5040:	0e 94 f5 26 	call	0x4dea	; 0x4dea <malloc>
    5044:	b4 c0       	rjmp	.+360    	; 0x51ae <realloc+0x182>
    5046:	fc 01       	movw	r30, r24
    5048:	e6 0f       	add	r30, r22
    504a:	f7 1f       	adc	r31, r23
    504c:	9c 01       	movw	r18, r24
    504e:	22 50       	subi	r18, 0x02	; 2
    5050:	31 09       	sbc	r19, r1
    5052:	e2 17       	cp	r30, r18
    5054:	f3 07       	cpc	r31, r19
    5056:	08 f4       	brcc	.+2      	; 0x505a <realloc+0x2e>
    5058:	a8 c0       	rjmp	.+336    	; 0x51aa <realloc+0x17e>
    505a:	d9 01       	movw	r26, r18
    505c:	0d 91       	ld	r16, X+
    505e:	1c 91       	ld	r17, X
    5060:	11 97       	sbiw	r26, 0x01	; 1
    5062:	06 17       	cp	r16, r22
    5064:	17 07       	cpc	r17, r23
    5066:	b0 f0       	brcs	.+44     	; 0x5094 <realloc+0x68>
    5068:	05 30       	cpi	r16, 0x05	; 5
    506a:	11 05       	cpc	r17, r1
    506c:	08 f4       	brcc	.+2      	; 0x5070 <realloc+0x44>
    506e:	9b c0       	rjmp	.+310    	; 0x51a6 <realloc+0x17a>
    5070:	c8 01       	movw	r24, r16
    5072:	04 97       	sbiw	r24, 0x04	; 4
    5074:	86 17       	cp	r24, r22
    5076:	97 07       	cpc	r25, r23
    5078:	08 f4       	brcc	.+2      	; 0x507c <realloc+0x50>
    507a:	95 c0       	rjmp	.+298    	; 0x51a6 <realloc+0x17a>
    507c:	02 50       	subi	r16, 0x02	; 2
    507e:	11 09       	sbc	r17, r1
    5080:	06 1b       	sub	r16, r22
    5082:	17 0b       	sbc	r17, r23
    5084:	01 93       	st	Z+, r16
    5086:	11 93       	st	Z+, r17
    5088:	6d 93       	st	X+, r22
    508a:	7c 93       	st	X, r23
    508c:	cf 01       	movw	r24, r30
    508e:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <free>
    5092:	89 c0       	rjmp	.+274    	; 0x51a6 <realloc+0x17a>
    5094:	5b 01       	movw	r10, r22
    5096:	a0 1a       	sub	r10, r16
    5098:	b1 0a       	sbc	r11, r17
    509a:	4c 01       	movw	r8, r24
    509c:	80 0e       	add	r8, r16
    509e:	91 1e       	adc	r9, r17
    50a0:	a0 91 d5 05 	lds	r26, 0x05D5	; 0x8005d5 <__flp>
    50a4:	b0 91 d6 05 	lds	r27, 0x05D6	; 0x8005d6 <__flp+0x1>
    50a8:	61 2c       	mov	r6, r1
    50aa:	71 2c       	mov	r7, r1
    50ac:	e1 2c       	mov	r14, r1
    50ae:	f1 2c       	mov	r15, r1
    50b0:	10 97       	sbiw	r26, 0x00	; 0
    50b2:	09 f4       	brne	.+2      	; 0x50b6 <realloc+0x8a>
    50b4:	46 c0       	rjmp	.+140    	; 0x5142 <realloc+0x116>
    50b6:	8d 91       	ld	r24, X+
    50b8:	9c 91       	ld	r25, X
    50ba:	11 97       	sbiw	r26, 0x01	; 1
    50bc:	a8 15       	cp	r26, r8
    50be:	b9 05       	cpc	r27, r9
    50c0:	b1 f5       	brne	.+108    	; 0x512e <realloc+0x102>
    50c2:	6c 01       	movw	r12, r24
    50c4:	42 e0       	ldi	r20, 0x02	; 2
    50c6:	c4 0e       	add	r12, r20
    50c8:	d1 1c       	adc	r13, r1
    50ca:	ca 14       	cp	r12, r10
    50cc:	db 04       	cpc	r13, r11
    50ce:	78 f1       	brcs	.+94     	; 0x512e <realloc+0x102>
    50d0:	4c 01       	movw	r8, r24
    50d2:	8a 18       	sub	r8, r10
    50d4:	9b 08       	sbc	r9, r11
    50d6:	64 01       	movw	r12, r8
    50d8:	42 e0       	ldi	r20, 0x02	; 2
    50da:	c4 0e       	add	r12, r20
    50dc:	d1 1c       	adc	r13, r1
    50de:	12 96       	adiw	r26, 0x02	; 2
    50e0:	bc 90       	ld	r11, X
    50e2:	12 97       	sbiw	r26, 0x02	; 2
    50e4:	13 96       	adiw	r26, 0x03	; 3
    50e6:	ac 91       	ld	r26, X
    50e8:	b5 e0       	ldi	r27, 0x05	; 5
    50ea:	cb 16       	cp	r12, r27
    50ec:	d1 04       	cpc	r13, r1
    50ee:	40 f0       	brcs	.+16     	; 0x5100 <realloc+0xd4>
    50f0:	b2 82       	std	Z+2, r11	; 0x02
    50f2:	a3 83       	std	Z+3, r26	; 0x03
    50f4:	91 82       	std	Z+1, r9	; 0x01
    50f6:	80 82       	st	Z, r8
    50f8:	d9 01       	movw	r26, r18
    50fa:	6d 93       	st	X+, r22
    50fc:	7c 93       	st	X, r23
    50fe:	09 c0       	rjmp	.+18     	; 0x5112 <realloc+0xe6>
    5100:	0e 5f       	subi	r16, 0xFE	; 254
    5102:	1f 4f       	sbci	r17, 0xFF	; 255
    5104:	80 0f       	add	r24, r16
    5106:	91 1f       	adc	r25, r17
    5108:	f9 01       	movw	r30, r18
    510a:	91 83       	std	Z+1, r25	; 0x01
    510c:	80 83       	st	Z, r24
    510e:	eb 2d       	mov	r30, r11
    5110:	fa 2f       	mov	r31, r26
    5112:	e1 14       	cp	r14, r1
    5114:	f1 04       	cpc	r15, r1
    5116:	31 f0       	breq	.+12     	; 0x5124 <realloc+0xf8>
    5118:	d7 01       	movw	r26, r14
    511a:	13 96       	adiw	r26, 0x03	; 3
    511c:	fc 93       	st	X, r31
    511e:	ee 93       	st	-X, r30
    5120:	12 97       	sbiw	r26, 0x02	; 2
    5122:	41 c0       	rjmp	.+130    	; 0x51a6 <realloc+0x17a>
    5124:	f0 93 d6 05 	sts	0x05D6, r31	; 0x8005d6 <__flp+0x1>
    5128:	e0 93 d5 05 	sts	0x05D5, r30	; 0x8005d5 <__flp>
    512c:	3c c0       	rjmp	.+120    	; 0x51a6 <realloc+0x17a>
    512e:	68 16       	cp	r6, r24
    5130:	79 06       	cpc	r7, r25
    5132:	08 f4       	brcc	.+2      	; 0x5136 <realloc+0x10a>
    5134:	3c 01       	movw	r6, r24
    5136:	7d 01       	movw	r14, r26
    5138:	12 96       	adiw	r26, 0x02	; 2
    513a:	0d 90       	ld	r0, X+
    513c:	bc 91       	ld	r27, X
    513e:	a0 2d       	mov	r26, r0
    5140:	b7 cf       	rjmp	.-146    	; 0x50b0 <realloc+0x84>
    5142:	80 91 d3 05 	lds	r24, 0x05D3	; 0x8005d3 <__brkval>
    5146:	90 91 d4 05 	lds	r25, 0x05D4	; 0x8005d4 <__brkval+0x1>
    514a:	88 16       	cp	r8, r24
    514c:	99 06       	cpc	r9, r25
    514e:	e1 f4       	brne	.+56     	; 0x5188 <realloc+0x15c>
    5150:	66 16       	cp	r6, r22
    5152:	77 06       	cpc	r7, r23
    5154:	c8 f4       	brcc	.+50     	; 0x5188 <realloc+0x15c>
    5156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    515a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    515e:	00 97       	sbiw	r24, 0x00	; 0
    5160:	41 f4       	brne	.+16     	; 0x5172 <realloc+0x146>
    5162:	8d b7       	in	r24, 0x3d	; 61
    5164:	9e b7       	in	r25, 0x3e	; 62
    5166:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    516a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    516e:	84 1b       	sub	r24, r20
    5170:	95 0b       	sbc	r25, r21
    5172:	e8 17       	cp	r30, r24
    5174:	f9 07       	cpc	r31, r25
    5176:	c8 f4       	brcc	.+50     	; 0x51aa <realloc+0x17e>
    5178:	f0 93 d4 05 	sts	0x05D4, r31	; 0x8005d4 <__brkval+0x1>
    517c:	e0 93 d3 05 	sts	0x05D3, r30	; 0x8005d3 <__brkval>
    5180:	f9 01       	movw	r30, r18
    5182:	71 83       	std	Z+1, r23	; 0x01
    5184:	60 83       	st	Z, r22
    5186:	0f c0       	rjmp	.+30     	; 0x51a6 <realloc+0x17a>
    5188:	cb 01       	movw	r24, r22
    518a:	0e 94 f5 26 	call	0x4dea	; 0x4dea <malloc>
    518e:	7c 01       	movw	r14, r24
    5190:	00 97       	sbiw	r24, 0x00	; 0
    5192:	59 f0       	breq	.+22     	; 0x51aa <realloc+0x17e>
    5194:	a8 01       	movw	r20, r16
    5196:	be 01       	movw	r22, r28
    5198:	0e 94 e1 28 	call	0x51c2	; 0x51c2 <memcpy>
    519c:	ce 01       	movw	r24, r28
    519e:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <free>
    51a2:	c7 01       	movw	r24, r14
    51a4:	04 c0       	rjmp	.+8      	; 0x51ae <realloc+0x182>
    51a6:	ce 01       	movw	r24, r28
    51a8:	02 c0       	rjmp	.+4      	; 0x51ae <realloc+0x182>
    51aa:	80 e0       	ldi	r24, 0x00	; 0
    51ac:	90 e0       	ldi	r25, 0x00	; 0
    51ae:	cd b7       	in	r28, 0x3d	; 61
    51b0:	de b7       	in	r29, 0x3e	; 62
    51b2:	ee e0       	ldi	r30, 0x0E	; 14
    51b4:	0c 94 11 29 	jmp	0x5222	; 0x5222 <__epilogue_restores__+0x8>

000051b8 <abort>:
    51b8:	81 e0       	ldi	r24, 0x01	; 1
    51ba:	90 e0       	ldi	r25, 0x00	; 0
    51bc:	f8 94       	cli
    51be:	0c 94 28 29 	jmp	0x5250	; 0x5250 <__do_global_dtors>

000051c2 <memcpy>:
    51c2:	fb 01       	movw	r30, r22
    51c4:	dc 01       	movw	r26, r24
    51c6:	02 c0       	rjmp	.+4      	; 0x51cc <memcpy+0xa>
    51c8:	01 90       	ld	r0, Z+
    51ca:	0d 92       	st	X+, r0
    51cc:	41 50       	subi	r20, 0x01	; 1
    51ce:	50 40       	sbci	r21, 0x00	; 0
    51d0:	d8 f7       	brcc	.-10     	; 0x51c8 <memcpy+0x6>
    51d2:	08 95       	ret

000051d4 <strcpy>:
    51d4:	fb 01       	movw	r30, r22
    51d6:	dc 01       	movw	r26, r24
    51d8:	01 90       	ld	r0, Z+
    51da:	0d 92       	st	X+, r0
    51dc:	00 20       	and	r0, r0
    51de:	e1 f7       	brne	.-8      	; 0x51d8 <strcpy+0x4>
    51e0:	08 95       	ret

000051e2 <__prologue_saves__>:
    51e2:	2f 92       	push	r2
    51e4:	3f 92       	push	r3
    51e6:	4f 92       	push	r4
    51e8:	5f 92       	push	r5
    51ea:	6f 92       	push	r6
    51ec:	7f 92       	push	r7
    51ee:	8f 92       	push	r8
    51f0:	9f 92       	push	r9
    51f2:	af 92       	push	r10
    51f4:	bf 92       	push	r11
    51f6:	cf 92       	push	r12
    51f8:	df 92       	push	r13
    51fa:	ef 92       	push	r14
    51fc:	ff 92       	push	r15
    51fe:	0f 93       	push	r16
    5200:	1f 93       	push	r17
    5202:	cf 93       	push	r28
    5204:	df 93       	push	r29
    5206:	cd b7       	in	r28, 0x3d	; 61
    5208:	de b7       	in	r29, 0x3e	; 62
    520a:	ca 1b       	sub	r28, r26
    520c:	db 0b       	sbc	r29, r27
    520e:	0f b6       	in	r0, 0x3f	; 63
    5210:	f8 94       	cli
    5212:	de bf       	out	0x3e, r29	; 62
    5214:	0f be       	out	0x3f, r0	; 63
    5216:	cd bf       	out	0x3d, r28	; 61
    5218:	09 94       	ijmp

0000521a <__epilogue_restores__>:
    521a:	2a 88       	ldd	r2, Y+18	; 0x12
    521c:	39 88       	ldd	r3, Y+17	; 0x11
    521e:	48 88       	ldd	r4, Y+16	; 0x10
    5220:	5f 84       	ldd	r5, Y+15	; 0x0f
    5222:	6e 84       	ldd	r6, Y+14	; 0x0e
    5224:	7d 84       	ldd	r7, Y+13	; 0x0d
    5226:	8c 84       	ldd	r8, Y+12	; 0x0c
    5228:	9b 84       	ldd	r9, Y+11	; 0x0b
    522a:	aa 84       	ldd	r10, Y+10	; 0x0a
    522c:	b9 84       	ldd	r11, Y+9	; 0x09
    522e:	c8 84       	ldd	r12, Y+8	; 0x08
    5230:	df 80       	ldd	r13, Y+7	; 0x07
    5232:	ee 80       	ldd	r14, Y+6	; 0x06
    5234:	fd 80       	ldd	r15, Y+5	; 0x05
    5236:	0c 81       	ldd	r16, Y+4	; 0x04
    5238:	1b 81       	ldd	r17, Y+3	; 0x03
    523a:	aa 81       	ldd	r26, Y+2	; 0x02
    523c:	b9 81       	ldd	r27, Y+1	; 0x01
    523e:	ce 0f       	add	r28, r30
    5240:	d1 1d       	adc	r29, r1
    5242:	0f b6       	in	r0, 0x3f	; 63
    5244:	f8 94       	cli
    5246:	de bf       	out	0x3e, r29	; 62
    5248:	0f be       	out	0x3f, r0	; 63
    524a:	cd bf       	out	0x3d, r28	; 61
    524c:	ed 01       	movw	r28, r26
    524e:	08 95       	ret

00005250 <__do_global_dtors>:
    5250:	10 e0       	ldi	r17, 0x00	; 0
    5252:	cb ef       	ldi	r28, 0xFB	; 251
    5254:	d0 e0       	ldi	r29, 0x00	; 0
    5256:	04 c0       	rjmp	.+8      	; 0x5260 <__do_global_dtors+0x10>
    5258:	fe 01       	movw	r30, r28
    525a:	0e 94 db 26 	call	0x4db6	; 0x4db6 <__tablejump2__>
    525e:	21 96       	adiw	r28, 0x01	; 1
    5260:	cc 3f       	cpi	r28, 0xFC	; 252
    5262:	d1 07       	cpc	r29, r17
    5264:	c9 f7       	brne	.-14     	; 0x5258 <__do_global_dtors+0x8>
    5266:	f8 94       	cli

00005268 <__stop_program>:
    5268:	ff cf       	rjmp	.-2      	; 0x5268 <__stop_program>
