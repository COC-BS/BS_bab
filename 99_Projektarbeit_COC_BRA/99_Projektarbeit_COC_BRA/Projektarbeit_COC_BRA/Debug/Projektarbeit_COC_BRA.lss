
Projektarbeit_COC_BRA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000019a  00800100  0000418a  0000421e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000418a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000026d  0080029a  0080029a  000043b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000043b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000043e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b58  00000000  00000000  00004428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00018630  00000000  00000000  00004f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000411b  00000000  00000000  0001d5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006354  00000000  00000000  000216cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000023d0  00000000  00000000  00027a20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004f08  00000000  00000000  00029df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ca44  00000000  00000000  0002ecf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c48  00000000  00000000  0003b73c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__dtors_end>
       4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      10:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      14:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      18:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      1c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      20:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      24:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      28:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__vector_10>
      2c:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <__vector_11>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      34:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      38:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      3c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      40:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      44:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      48:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      4c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      50:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      54:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      58:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      5c:	0c 94 62 19 	jmp	0x32c4	; 0x32c4 <__vector_23>
      60:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      64:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      68:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      6c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      70:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      74:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      78:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      7c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      80:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      84:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      88:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      8c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      90:	0c 94 0c 0f 	jmp	0x1e18	; 0x1e18 <__vector_36>
      94:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      98:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      9c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ac:	c3 1a       	sub	r12, r19
      ae:	c6 1a       	sub	r12, r22
      b0:	b5 1a       	sub	r11, r21
      b2:	b9 1a       	sub	r11, r25
      b4:	bf 1a       	sub	r11, r31
      b6:	e7 1a       	sub	r14, r23
      b8:	e7 1a       	sub	r14, r23
      ba:	e7 1a       	sub	r14, r23
      bc:	ca 1a       	sub	r12, r26
      be:	ce 1a       	sub	r12, r30
      c0:	d2 1a       	sub	r13, r18
      c2:	d8 1a       	sub	r13, r24
      c4:	dc 1a       	sub	r13, r28
      c6:	e7 1a       	sub	r14, r23
      c8:	e2 1a       	sub	r14, r18

000000ca <USB_DeviceDescriptorIAD>:
      ca:	12 01 00 02 ef 02 01 40 41 23 36 80 00 01 01 02     .......@A#6.....
      da:	03 01                                               ..

000000dc <STRING_MANUFACTURER>:
      dc:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

000000e8 <STRING_PRODUCT>:
      e8:	41 72 64 75 69 6e 6f 20 4c 65 6f 6e 61 72 64 6f     Arduino Leonardo
	...

000000f9 <STRING_LANGUAGE>:
      f9:	04 03 09 04                                         ....

000000fd <analog_pin_to_channel_PGM>:
      fd:	07 06 05 04 01 00 08 0a 0b 0c 0d 09                 ............

00000109 <digital_pin_to_timer_PGM>:
     109:	00 00 00 02 00 09 0f 00 00 03 04 01 00 0c 00 00     ................
	...

00000128 <digital_pin_to_bit_mask_PGM>:
     128:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     138:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

00000147 <digital_pin_to_port_PGM>:
     147:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     157:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

00000166 <port_to_input_PGM>:
     166:	00 00 00 00 23 00 26 00 29 00 2c 00 2f 00           ....#.&.).,./.

00000174 <port_to_output_PGM>:
     174:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

00000182 <port_to_mode_PGM>:
     182:	00 00 00 00 24 00 27 00 2a 00 2d 00 30 00           ....$.'.*.-.0.

00000190 <_cdcInterface>:
     190:	08 0b 00 02 02 02 01 00 09 04 00 00 01 02 02 00     ................
     1a0:	00 05 24 00 10 01 05 24 01 01 01 04 24 02 06 05     ..$....$....$...
     1b0:	24 06 00 01 07 05 81 03 10 00 40 09 04 01 00 02     $.........@.....
     1c0:	0a 00 00 00 07 05 02 02 40 00 00 07 05 83 02 40     ........@......@
	...

000001d2 <__ctors_start>:
     1d2:	d3 05       	cpc	r29, r3
     1d4:	a0 11       	cpse	r26, r0
     1d6:	db 1c       	adc	r13, r11

000001d8 <__ctors_end>:
     1d8:	0c 07       	cpc	r16, r28

000001da <__dtors_end>:
     1da:	11 24       	eor	r1, r1
     1dc:	1f be       	out	0x3f, r1	; 63
     1de:	cf ef       	ldi	r28, 0xFF	; 255
     1e0:	da e0       	ldi	r29, 0x0A	; 10
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	cd bf       	out	0x3d, r28	; 61

000001e6 <__do_copy_data>:
     1e6:	12 e0       	ldi	r17, 0x02	; 2
     1e8:	a0 e0       	ldi	r26, 0x00	; 0
     1ea:	b1 e0       	ldi	r27, 0x01	; 1
     1ec:	ea e8       	ldi	r30, 0x8A	; 138
     1ee:	f1 e4       	ldi	r31, 0x41	; 65
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <__do_copy_data+0x10>
     1f2:	05 90       	lpm	r0, Z+
     1f4:	0d 92       	st	X+, r0
     1f6:	aa 39       	cpi	r26, 0x9A	; 154
     1f8:	b1 07       	cpc	r27, r17
     1fa:	d9 f7       	brne	.-10     	; 0x1f2 <__do_copy_data+0xc>

000001fc <__do_clear_bss>:
     1fc:	25 e0       	ldi	r18, 0x05	; 5
     1fe:	aa e9       	ldi	r26, 0x9A	; 154
     200:	b2 e0       	ldi	r27, 0x02	; 2
     202:	01 c0       	rjmp	.+2      	; 0x206 <.do_clear_bss_start>

00000204 <.do_clear_bss_loop>:
     204:	1d 92       	st	X+, r1

00000206 <.do_clear_bss_start>:
     206:	a7 30       	cpi	r26, 0x07	; 7
     208:	b2 07       	cpc	r27, r18
     20a:	e1 f7       	brne	.-8      	; 0x204 <.do_clear_bss_loop>

0000020c <__do_global_ctors>:
     20c:	10 e0       	ldi	r17, 0x00	; 0
     20e:	cc ee       	ldi	r28, 0xEC	; 236
     210:	d0 e0       	ldi	r29, 0x00	; 0
     212:	04 c0       	rjmp	.+8      	; 0x21c <__do_global_ctors+0x10>
     214:	21 97       	sbiw	r28, 0x01	; 1
     216:	fe 01       	movw	r30, r28
     218:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__tablejump2__>
     21c:	c9 3e       	cpi	r28, 0xE9	; 233
     21e:	d1 07       	cpc	r29, r17
     220:	c9 f7       	brne	.-14     	; 0x214 <__do_global_ctors+0x8>
     222:	0e 94 38 13 	call	0x2670	; 0x2670 <main>
     226:	0c 94 b8 20 	jmp	0x4170	; 0x4170 <__do_global_dtors>

0000022a <__bad_interrupt>:
     22a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022e <_Z6getkeyv>:
 */
int getkey(void)
{
	static int keys[NUMKEYS+1];
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <analogRead>

	if (val > 1020) { // no key pressed
     234:	8d 3f       	cpi	r24, 0xFD	; 253
     236:	23 e0       	ldi	r18, 0x03	; 3
     238:	92 07       	cpc	r25, r18
     23a:	20 f1       	brcs	.+72     	; 0x284 <_Z6getkeyv+0x56>
		if (++keys[0] > NOPRESS) {
     23c:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <__data_end>
     240:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <__data_end+0x1>
     244:	01 96       	adiw	r24, 0x01	; 1
     246:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <__data_end+0x1>
     24a:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <__data_end>
     24e:	03 97       	sbiw	r24, 0x03	; 3
     250:	0c f4       	brge	.+2      	; 0x254 <_Z6getkeyv+0x26>
     252:	6a c0       	rjmp	.+212    	; 0x328 <_Z6getkeyv+0xfa>
     254:	ea e9       	ldi	r30, 0x9A	; 154
     256:	f2 e0       	ldi	r31, 0x02	; 2
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	90 e0       	ldi	r25, 0x00	; 0
			for(uint8_t i = 0; i <= NUMKEYS; i++){
				if(keys[i] > KEYPRESS){
     260:	40 81       	ld	r20, Z
     262:	51 81       	ldd	r21, Z+1	; 0x01
     264:	44 30       	cpi	r20, 0x04	; 4
     266:	51 05       	cpc	r21, r1
     268:	2c f0       	brlt	.+10     	; 0x274 <_Z6getkeyv+0x46>
     26a:	c9 01       	movw	r24, r18
					data = i;
					if(keys[i] > LONGPRESS) data += 5;
     26c:	49 3c       	cpi	r20, 0xC9	; 201
     26e:	51 05       	cpc	r21, r1
     270:	0c f0       	brlt	.+2      	; 0x274 <_Z6getkeyv+0x46>
     272:	05 96       	adiw	r24, 0x05	; 5
				}
				keys[i] = 0;
     274:	11 92       	st	Z+, r1
     276:	11 92       	st	Z+, r1
     278:	2f 5f       	subi	r18, 0xFF	; 255
     27a:	3f 4f       	sbci	r19, 0xFF	; 255
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);

	if (val > 1020) { // no key pressed
		if (++keys[0] > NOPRESS) {
			for(uint8_t i = 0; i <= NUMKEYS; i++){
     27c:	26 30       	cpi	r18, 0x06	; 6
     27e:	31 05       	cpc	r19, r1
     280:	79 f7       	brne	.-34     	; 0x260 <_Z6getkeyv+0x32>
     282:	08 95       	ret
			}
		}
		else data = 0;
	}
	else {
		if (val < S1_LIMIT && keys[1] < 32000) ++keys[1]; // key1 pressed
     284:	89 34       	cpi	r24, 0x49	; 73
     286:	91 05       	cpc	r25, r1
     288:	70 f4       	brcc	.+28     	; 0x2a6 <_Z6getkeyv+0x78>
     28a:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <__data_end+0x2>
     28e:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <__data_end+0x3>
     292:	81 15       	cp	r24, r1
     294:	2d e7       	ldi	r18, 0x7D	; 125
     296:	92 07       	cpc	r25, r18
     298:	4c f4       	brge	.+18     	; 0x2ac <_Z6getkeyv+0x7e>
     29a:	01 96       	adiw	r24, 0x01	; 1
     29c:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <__data_end+0x3>
     2a0:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <__data_end+0x2>
     2a4:	41 c0       	rjmp	.+130    	; 0x328 <_Z6getkeyv+0xfa>
		else if (val < S2_LIMIT && keys[2] < 32000) ++keys[2]; //key2 pressed
     2a6:	8e 3e       	cpi	r24, 0xEE	; 238
     2a8:	91 05       	cpc	r25, r1
     2aa:	70 f4       	brcc	.+28     	; 0x2c8 <_Z6getkeyv+0x9a>
     2ac:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <__data_end+0x4>
     2b0:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <__data_end+0x5>
     2b4:	81 15       	cp	r24, r1
     2b6:	2d e7       	ldi	r18, 0x7D	; 125
     2b8:	92 07       	cpc	r25, r18
     2ba:	54 f4       	brge	.+20     	; 0x2d0 <_Z6getkeyv+0xa2>
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <__data_end+0x5>
     2c2:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <__data_end+0x4>
     2c6:	30 c0       	rjmp	.+96     	; 0x328 <_Z6getkeyv+0xfa>
		else if (val < S3_LIMIT && keys[3] < 32000) ++keys[3]; //key3 pressed
     2c8:	82 3a       	cpi	r24, 0xA2	; 162
     2ca:	21 e0       	ldi	r18, 0x01	; 1
     2cc:	92 07       	cpc	r25, r18
     2ce:	70 f4       	brcc	.+28     	; 0x2ec <_Z6getkeyv+0xbe>
     2d0:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <__data_end+0x6>
     2d4:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <__data_end+0x7>
     2d8:	81 15       	cp	r24, r1
     2da:	2d e7       	ldi	r18, 0x7D	; 125
     2dc:	92 07       	cpc	r25, r18
     2de:	4c f4       	brge	.+18     	; 0x2f2 <_Z6getkeyv+0xc4>
     2e0:	01 96       	adiw	r24, 0x01	; 1
     2e2:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <__data_end+0x7>
     2e6:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <__data_end+0x6>
     2ea:	1e c0       	rjmp	.+60     	; 0x328 <_Z6getkeyv+0xfa>
		else if (val < S4_LIMIT && keys[4] < 32000) ++keys[4]; //key4 pressed
     2ec:	80 37       	cpi	r24, 0x70	; 112
     2ee:	92 40       	sbci	r25, 0x02	; 2
     2f0:	70 f4       	brcc	.+28     	; 0x30e <_Z6getkeyv+0xe0>
     2f2:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <__data_end+0x8>
     2f6:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <__data_end+0x9>
     2fa:	81 15       	cp	r24, r1
     2fc:	2d e7       	ldi	r18, 0x7D	; 125
     2fe:	92 07       	cpc	r25, r18
     300:	34 f4       	brge	.+12     	; 0x30e <_Z6getkeyv+0xe0>
     302:	01 96       	adiw	r24, 0x01	; 1
     304:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <__data_end+0x9>
     308:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <__data_end+0x8>
     30c:	0d c0       	rjmp	.+26     	; 0x328 <_Z6getkeyv+0xfa>
		else if ( keys[5] < 32000) ++keys[5]; // key5 pressed
     30e:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <__data_end+0xa>
     312:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <__data_end+0xb>
     316:	81 15       	cp	r24, r1
     318:	2d e7       	ldi	r18, 0x7D	; 125
     31a:	92 07       	cpc	r25, r18
     31c:	2c f4       	brge	.+10     	; 0x328 <_Z6getkeyv+0xfa>
     31e:	01 96       	adiw	r24, 0x01	; 1
     320:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <__data_end+0xb>
     324:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <__data_end+0xa>
		data = 0;
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
	}
	return data;
}
     32c:	08 95       	ret

0000032e <_ZN5Print17availableForWriteEv>:
void callibratePointer() 
{
	lcd.clear();
	lcd.print("Zeiger kalibrieren");
	delay(2000);
	lcd.clear();
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	08 95       	ret

00000334 <_ZN5Print5flushEv>:
     334:	08 95       	ret

00000336 <_ZN7hd4478013iosetContrastEh>:
     336:	8d ef       	ldi	r24, 0xFD	; 253
     338:	9f ef       	ldi	r25, 0xFF	; 255
     33a:	08 95       	ret

0000033c <_Z14chooseTimeZonev>:
     33c:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <timeZoneChoosen>
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	89 27       	eor	r24, r25
     344:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <timeZoneChoosen>
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	08 95       	ret

0000034e <_Z10changeAMPMv>:
     34e:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <ampm>
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	89 27       	eor	r24, r25
     356:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <ampm>
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	08 95       	ret

00000360 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>:
     360:	0f 93       	push	r16
     362:	1f 93       	push	r17
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
     368:	18 2f       	mov	r17, r24
     36a:	d0 e0       	ldi	r29, 0x00	; 0
     36c:	c0 e2       	ldi	r28, 0x20	; 32
     36e:	6c 2f       	mov	r22, r28
     370:	8d e3       	ldi	r24, 0x3D	; 61
     372:	94 e0       	ldi	r25, 0x04	; 4
     374:	0e 94 19 11 	call	0x2232	; 0x2232 <_ZN7TwoWire17beginTransmissionEh>
     378:	8d e3       	ldi	r24, 0x3D	; 61
     37a:	94 e0       	ldi	r25, 0x04	; 4
     37c:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN7TwoWire15endTransmissionEv>
     380:	08 2f       	mov	r16, r24
     382:	61 e0       	ldi	r22, 0x01	; 1
     384:	70 e0       	ldi	r23, 0x00	; 0
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	0e 94 dd 19 	call	0x33ba	; 0x33ba <delay>
     38e:	01 11       	cpse	r16, r1
     390:	03 c0       	rjmp	.+6      	; 0x398 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x38>
     392:	1d 17       	cp	r17, r29
     394:	f9 f0       	breq	.+62     	; 0x3d4 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x74>
     396:	df 5f       	subi	r29, 0xFF	; 255
     398:	cf 5f       	subi	r28, 0xFF	; 255
     39a:	c8 32       	cpi	r28, 0x28	; 40
     39c:	41 f7       	brne	.-48     	; 0x36e <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0xe>
     39e:	c8 e3       	ldi	r28, 0x38	; 56
     3a0:	6c 2f       	mov	r22, r28
     3a2:	8d e3       	ldi	r24, 0x3D	; 61
     3a4:	94 e0       	ldi	r25, 0x04	; 4
     3a6:	0e 94 19 11 	call	0x2232	; 0x2232 <_ZN7TwoWire17beginTransmissionEh>
     3aa:	8d e3       	ldi	r24, 0x3D	; 61
     3ac:	94 e0       	ldi	r25, 0x04	; 4
     3ae:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN7TwoWire15endTransmissionEv>
     3b2:	08 2f       	mov	r16, r24
     3b4:	61 e0       	ldi	r22, 0x01	; 1
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 dd 19 	call	0x33ba	; 0x33ba <delay>
     3c0:	01 11       	cpse	r16, r1
     3c2:	03 c0       	rjmp	.+6      	; 0x3ca <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x6a>
     3c4:	1d 17       	cp	r17, r29
     3c6:	31 f0       	breq	.+12     	; 0x3d4 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x74>
     3c8:	df 5f       	subi	r29, 0xFF	; 255
     3ca:	cf 5f       	subi	r28, 0xFF	; 255
     3cc:	c0 34       	cpi	r28, 0x40	; 64
     3ce:	41 f7       	brne	.-48     	; 0x3a0 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x40>
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x76>
     3d4:	8c 2f       	mov	r24, r28
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	08 95       	ret

000003e0 <_ZN7TwoWire5writeEi>:
     3e0:	dc 01       	movw	r26, r24
     3e2:	ed 91       	ld	r30, X+
     3e4:	fc 91       	ld	r31, X
     3e6:	01 90       	ld	r0, Z+
     3e8:	f0 81       	ld	r31, Z
     3ea:	e0 2d       	mov	r30, r0
     3ec:	09 94       	ijmp

000003ee <_ZN4Zeit4TickEv>:
     3ee:	fc 01       	movw	r30, r24
     3f0:	84 81       	ldd	r24, Z+4	; 0x04
     3f2:	95 81       	ldd	r25, Z+5	; 0x05
     3f4:	01 96       	adiw	r24, 0x01	; 1
     3f6:	2c e3       	ldi	r18, 0x3C	; 60
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	b9 01       	movw	r22, r18
     3fc:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__divmodhi4>
     400:	95 83       	std	Z+5, r25	; 0x05
     402:	84 83       	std	Z+4, r24	; 0x04
     404:	89 2b       	or	r24, r25
     406:	19 f0       	breq	.+6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	08 95       	ret
     40e:	82 81       	ldd	r24, Z+2	; 0x02
     410:	93 81       	ldd	r25, Z+3	; 0x03
     412:	01 96       	adiw	r24, 0x01	; 1
     414:	b9 01       	movw	r22, r18
     416:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__divmodhi4>
     41a:	93 83       	std	Z+3, r25	; 0x03
     41c:	82 83       	std	Z+2, r24	; 0x02
     41e:	89 2b       	or	r24, r25
     420:	99 f7       	brne	.-26     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	01 96       	adiw	r24, 0x01	; 1
     428:	68 e1       	ldi	r22, 0x18	; 24
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__divmodhi4>
     430:	ac 01       	movw	r20, r24
     432:	91 83       	std	Z+1, r25	; 0x01
     434:	80 83       	st	Z, r24
     436:	21 e0       	ldi	r18, 0x01	; 1
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	45 2b       	or	r20, r21
     43c:	09 f0       	breq	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	82 2f       	mov	r24, r18
     442:	08 95       	ret

00000444 <_ZN5Datum11DaysOfMonthEv>:
     444:	fc 01       	movw	r30, r24
     446:	22 81       	ldd	r18, Z+2	; 0x02
     448:	33 81       	ldd	r19, Z+3	; 0x03
     44a:	26 30       	cpi	r18, 0x06	; 6
     44c:	31 05       	cpc	r19, r1
     44e:	d9 f0       	breq	.+54     	; 0x486 <_ZN5Datum11DaysOfMonthEv+0x42>
     450:	3c f4       	brge	.+14     	; 0x460 <_ZN5Datum11DaysOfMonthEv+0x1c>
     452:	22 30       	cpi	r18, 0x02	; 2
     454:	31 05       	cpc	r19, r1
     456:	69 f0       	breq	.+26     	; 0x472 <_ZN5Datum11DaysOfMonthEv+0x2e>
     458:	24 30       	cpi	r18, 0x04	; 4
     45a:	31 05       	cpc	r19, r1
     45c:	39 f4       	brne	.+14     	; 0x46c <_ZN5Datum11DaysOfMonthEv+0x28>
     45e:	13 c0       	rjmp	.+38     	; 0x486 <_ZN5Datum11DaysOfMonthEv+0x42>
     460:	29 30       	cpi	r18, 0x09	; 9
     462:	31 05       	cpc	r19, r1
     464:	81 f0       	breq	.+32     	; 0x486 <_ZN5Datum11DaysOfMonthEv+0x42>
     466:	2b 30       	cpi	r18, 0x0B	; 11
     468:	31 05       	cpc	r19, r1
     46a:	69 f0       	breq	.+26     	; 0x486 <_ZN5Datum11DaysOfMonthEv+0x42>
     46c:	8f e1       	ldi	r24, 0x1F	; 31
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	08 95       	ret
     472:	fc 01       	movw	r30, r24
     474:	80 81       	ld	r24, Z
     476:	91 81       	ldd	r25, Z+1	; 0x01
     478:	83 70       	andi	r24, 0x03	; 3
     47a:	99 27       	eor	r25, r25
     47c:	89 2b       	or	r24, r25
     47e:	31 f4       	brne	.+12     	; 0x48c <_ZN5Datum11DaysOfMonthEv+0x48>
     480:	8d e1       	ldi	r24, 0x1D	; 29
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	08 95       	ret
     486:	8e e1       	ldi	r24, 0x1E	; 30
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	08 95       	ret
     48c:	8c e1       	ldi	r24, 0x1C	; 28
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	08 95       	ret

00000492 <_ZN5Datum4TickEv>:
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	ec 01       	movw	r28, r24
     49c:	0c 81       	ldd	r16, Y+4	; 0x04
     49e:	1d 81       	ldd	r17, Y+5	; 0x05
     4a0:	0f 5f       	subi	r16, 0xFF	; 255
     4a2:	1f 4f       	sbci	r17, 0xFF	; 255
     4a4:	1d 83       	std	Y+5, r17	; 0x05
     4a6:	0c 83       	std	Y+4, r16	; 0x04
     4a8:	0e 94 22 02 	call	0x444	; 0x444 <_ZN5Datum11DaysOfMonthEv>
     4ac:	80 17       	cp	r24, r16
     4ae:	91 07       	cpc	r25, r17
     4b0:	a4 f4       	brge	.+40     	; 0x4da <_ZN5Datum4TickEv+0x48>
     4b2:	21 e0       	ldi	r18, 0x01	; 1
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	3d 83       	std	Y+5, r19	; 0x05
     4b8:	2c 83       	std	Y+4, r18	; 0x04
     4ba:	8a 81       	ldd	r24, Y+2	; 0x02
     4bc:	9b 81       	ldd	r25, Y+3	; 0x03
     4be:	01 96       	adiw	r24, 0x01	; 1
     4c0:	8d 30       	cpi	r24, 0x0D	; 13
     4c2:	91 05       	cpc	r25, r1
     4c4:	1c f4       	brge	.+6      	; 0x4cc <_ZN5Datum4TickEv+0x3a>
     4c6:	9b 83       	std	Y+3, r25	; 0x03
     4c8:	8a 83       	std	Y+2, r24	; 0x02
     4ca:	07 c0       	rjmp	.+14     	; 0x4da <_ZN5Datum4TickEv+0x48>
     4cc:	3b 83       	std	Y+3, r19	; 0x03
     4ce:	2a 83       	std	Y+2, r18	; 0x02
     4d0:	88 81       	ld	r24, Y
     4d2:	99 81       	ldd	r25, Y+1	; 0x01
     4d4:	01 96       	adiw	r24, 0x01	; 1
     4d6:	99 83       	std	Y+1, r25	; 0x01
     4d8:	88 83       	st	Y, r24
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	1f 91       	pop	r17
     4e0:	0f 91       	pop	r16
     4e2:	08 95       	ret

000004e4 <_Z5Watchv>:
     4e4:	0f 93       	push	r16
     4e6:	1f 93       	push	r17
     4e8:	0e 94 ac 19 	call	0x3358	; 0x3358 <millis>
     4ec:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZZ5WatchvE6target>
     4f0:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZZ5WatchvE6target+0x1>
     4f4:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <_ZZ5WatchvE6target+0x2>
     4f8:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <_ZZ5WatchvE6target+0x3>
     4fc:	06 17       	cp	r16, r22
     4fe:	17 07       	cpc	r17, r23
     500:	28 07       	cpc	r18, r24
     502:	39 07       	cpc	r19, r25
     504:	70 f5       	brcc	.+92     	; 0x562 <_Z5Watchv+0x7e>
     506:	d9 01       	movw	r26, r18
     508:	c8 01       	movw	r24, r16
     50a:	88 51       	subi	r24, 0x18	; 24
     50c:	9c 4f       	sbci	r25, 0xFC	; 252
     50e:	af 4f       	sbci	r26, 0xFF	; 255
     510:	bf 4f       	sbci	r27, 0xFF	; 255
     512:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZZ5WatchvE6target>
     516:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZZ5WatchvE6target+0x1>
     51a:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_ZZ5WatchvE6target+0x2>
     51e:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_ZZ5WatchvE6target+0x3>
     522:	84 ed       	ldi	r24, 0xD4	; 212
     524:	92 e0       	ldi	r25, 0x02	; 2
     526:	0e 94 f7 01 	call	0x3ee	; 0x3ee <_ZN4Zeit4TickEv>
     52a:	89 2b       	or	r24, r25
     52c:	21 f0       	breq	.+8      	; 0x536 <_Z5Watchv+0x52>
     52e:	8c eb       	ldi	r24, 0xBC	; 188
     530:	92 e0       	ldi	r25, 0x02	; 2
     532:	0e 94 49 02 	call	0x492	; 0x492 <_ZN5Datum4TickEv>
     536:	8c ec       	ldi	r24, 0xCC	; 204
     538:	92 e0       	ldi	r25, 0x02	; 2
     53a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <_ZN4Zeit4TickEv>
     53e:	89 2b       	or	r24, r25
     540:	21 f0       	breq	.+8      	; 0x54a <_Z5Watchv+0x66>
     542:	84 eb       	ldi	r24, 0xB4	; 180
     544:	92 e0       	ldi	r25, 0x02	; 2
     546:	0e 94 49 02 	call	0x492	; 0x492 <_ZN5Datum4TickEv>
     54a:	84 ec       	ldi	r24, 0xC4	; 196
     54c:	92 e0       	ldi	r25, 0x02	; 2
     54e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <_ZN4Zeit4TickEv>
     552:	89 2b       	or	r24, r25
     554:	31 f0       	breq	.+12     	; 0x562 <_Z5Watchv+0x7e>
     556:	8c ea       	ldi	r24, 0xAC	; 172
     558:	92 e0       	ldi	r25, 0x02	; 2
     55a:	1f 91       	pop	r17
     55c:	0f 91       	pop	r16
     55e:	0c 94 49 02 	jmp	0x492	; 0x492 <_ZN5Datum4TickEv>
     562:	1f 91       	pop	r17
     564:	0f 91       	pop	r16
     566:	08 95       	ret

00000568 <_Z11printhhmmssR4Zeit>:
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	8c 01       	movw	r16, r24
     572:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <ampm>
     576:	f8 01       	movw	r30, r16
     578:	c0 81       	ld	r28, Z
     57a:	d1 81       	ldd	r29, Z+1	; 0x01
     57c:	88 23       	and	r24, r24
     57e:	89 f0       	breq	.+34     	; 0x5a2 <_Z11printhhmmssR4Zeit+0x3a>
     580:	cd 30       	cpi	r28, 0x0D	; 13
     582:	d1 05       	cpc	r29, r1
     584:	0c f0       	brlt	.+2      	; 0x588 <_Z11printhhmmssR4Zeit+0x20>
     586:	2c 97       	sbiw	r28, 0x0c	; 12
     588:	ca 30       	cpi	r28, 0x0A	; 10
     58a:	d1 05       	cpc	r29, r1
     58c:	34 f4       	brge	.+12     	; 0x59a <_Z11printhhmmssR4Zeit+0x32>
     58e:	6f e1       	ldi	r22, 0x1F	; 31
     590:	71 e0       	ldi	r23, 0x01	; 1
     592:	82 ea       	ldi	r24, 0xA2	; 162
     594:	93 e0       	ldi	r25, 0x03	; 3
     596:	0e 94 98 13 	call	0x2730	; 0x2730 <_ZN5Print5printEPKc>
     59a:	4a e0       	ldi	r20, 0x0A	; 10
     59c:	50 e0       	ldi	r21, 0x00	; 0
     59e:	be 01       	movw	r22, r28
     5a0:	0d c0       	rjmp	.+26     	; 0x5bc <_Z11printhhmmssR4Zeit+0x54>
     5a2:	2a 97       	sbiw	r28, 0x0a	; 10
     5a4:	34 f4       	brge	.+12     	; 0x5b2 <_Z11printhhmmssR4Zeit+0x4a>
     5a6:	6f e1       	ldi	r22, 0x1F	; 31
     5a8:	71 e0       	ldi	r23, 0x01	; 1
     5aa:	82 ea       	ldi	r24, 0xA2	; 162
     5ac:	93 e0       	ldi	r25, 0x03	; 3
     5ae:	0e 94 98 13 	call	0x2730	; 0x2730 <_ZN5Print5printEPKc>
     5b2:	f8 01       	movw	r30, r16
     5b4:	60 81       	ld	r22, Z
     5b6:	71 81       	ldd	r23, Z+1	; 0x01
     5b8:	4a e0       	ldi	r20, 0x0A	; 10
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	82 ea       	ldi	r24, 0xA2	; 162
     5be:	93 e0       	ldi	r25, 0x03	; 3
     5c0:	0e 94 45 14 	call	0x288a	; 0x288a <_ZN5Print5printEii>
     5c4:	f8 01       	movw	r30, r16
     5c6:	82 81       	ldd	r24, Z+2	; 0x02
     5c8:	93 81       	ldd	r25, Z+3	; 0x03
     5ca:	0a 97       	sbiw	r24, 0x0a	; 10
     5cc:	1c f4       	brge	.+6      	; 0x5d4 <_Z11printhhmmssR4Zeit+0x6c>
     5ce:	6e e1       	ldi	r22, 0x1E	; 30
     5d0:	71 e0       	ldi	r23, 0x01	; 1
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <_Z11printhhmmssR4Zeit+0x70>
     5d4:	61 e2       	ldi	r22, 0x21	; 33
     5d6:	71 e0       	ldi	r23, 0x01	; 1
     5d8:	82 ea       	ldi	r24, 0xA2	; 162
     5da:	93 e0       	ldi	r25, 0x03	; 3
     5dc:	0e 94 98 13 	call	0x2730	; 0x2730 <_ZN5Print5printEPKc>
     5e0:	f8 01       	movw	r30, r16
     5e2:	62 81       	ldd	r22, Z+2	; 0x02
     5e4:	73 81       	ldd	r23, Z+3	; 0x03
     5e6:	4a e0       	ldi	r20, 0x0A	; 10
     5e8:	50 e0       	ldi	r21, 0x00	; 0
     5ea:	82 ea       	ldi	r24, 0xA2	; 162
     5ec:	93 e0       	ldi	r25, 0x03	; 3
     5ee:	0e 94 45 14 	call	0x288a	; 0x288a <_ZN5Print5printEii>
     5f2:	f8 01       	movw	r30, r16
     5f4:	84 81       	ldd	r24, Z+4	; 0x04
     5f6:	95 81       	ldd	r25, Z+5	; 0x05
     5f8:	0a 97       	sbiw	r24, 0x0a	; 10
     5fa:	1c f4       	brge	.+6      	; 0x602 <_Z11printhhmmssR4Zeit+0x9a>
     5fc:	6e e1       	ldi	r22, 0x1E	; 30
     5fe:	71 e0       	ldi	r23, 0x01	; 1
     600:	02 c0       	rjmp	.+4      	; 0x606 <_Z11printhhmmssR4Zeit+0x9e>
     602:	61 e2       	ldi	r22, 0x21	; 33
     604:	71 e0       	ldi	r23, 0x01	; 1
     606:	82 ea       	ldi	r24, 0xA2	; 162
     608:	93 e0       	ldi	r25, 0x03	; 3
     60a:	0e 94 98 13 	call	0x2730	; 0x2730 <_ZN5Print5printEPKc>
     60e:	f8 01       	movw	r30, r16
     610:	64 81       	ldd	r22, Z+4	; 0x04
     612:	75 81       	ldd	r23, Z+5	; 0x05
     614:	4a e0       	ldi	r20, 0x0A	; 10
     616:	50 e0       	ldi	r21, 0x00	; 0
     618:	82 ea       	ldi	r24, 0xA2	; 162
     61a:	93 e0       	ldi	r25, 0x03	; 3
     61c:	0e 94 45 14 	call	0x288a	; 0x288a <_ZN5Print5printEii>
     620:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <ampm>
     624:	88 23       	and	r24, r24
     626:	91 f0       	breq	.+36     	; 0x64c <_Z11printhhmmssR4Zeit+0xe4>
     628:	f8 01       	movw	r30, r16
     62a:	80 81       	ld	r24, Z
     62c:	91 81       	ldd	r25, Z+1	; 0x01
     62e:	0d 97       	sbiw	r24, 0x0d	; 13
     630:	1c f0       	brlt	.+6      	; 0x638 <_Z11printhhmmssR4Zeit+0xd0>
     632:	63 e2       	ldi	r22, 0x23	; 35
     634:	71 e0       	ldi	r23, 0x01	; 1
     636:	02 c0       	rjmp	.+4      	; 0x63c <_Z11printhhmmssR4Zeit+0xd4>
     638:	67 e2       	ldi	r22, 0x27	; 39
     63a:	71 e0       	ldi	r23, 0x01	; 1
     63c:	82 ea       	ldi	r24, 0xA2	; 162
     63e:	93 e0       	ldi	r25, 0x03	; 3
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	0c 94 98 13 	jmp	0x2730	; 0x2730 <_ZN5Print5printEPKc>
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	1f 91       	pop	r17
     652:	0f 91       	pop	r16
     654:	08 95       	ret

00000656 <_Z13printddmmyyyyR5Datum>:
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	ec 01       	movw	r28, r24
     65c:	8c 81       	ldd	r24, Y+4	; 0x04
     65e:	9d 81       	ldd	r25, Y+5	; 0x05
     660:	0a 97       	sbiw	r24, 0x0a	; 10
     662:	34 f4       	brge	.+12     	; 0x670 <_Z13printddmmyyyyR5Datum+0x1a>
     664:	61 e4       	ldi	r22, 0x41	; 65
     666:	71 e0       	ldi	r23, 0x01	; 1
     668:	82 ea       	ldi	r24, 0xA2	; 162
     66a:	93 e0       	ldi	r25, 0x03	; 3
     66c:	0e 94 98 13 	call	0x2730	; 0x2730 <_ZN5Print5printEPKc>
     670:	6c 81       	ldd	r22, Y+4	; 0x04
     672:	7d 81       	ldd	r23, Y+5	; 0x05
     674:	4a e0       	ldi	r20, 0x0A	; 10
     676:	50 e0       	ldi	r21, 0x00	; 0
     678:	82 ea       	ldi	r24, 0xA2	; 162
     67a:	93 e0       	ldi	r25, 0x03	; 3
     67c:	0e 94 45 14 	call	0x288a	; 0x288a <_ZN5Print5printEii>
     680:	8a 81       	ldd	r24, Y+2	; 0x02
     682:	9b 81       	ldd	r25, Y+3	; 0x03
     684:	0a 97       	sbiw	r24, 0x0a	; 10
     686:	1c f4       	brge	.+6      	; 0x68e <_Z13printddmmyyyyR5Datum+0x38>
     688:	6b e2       	ldi	r22, 0x2B	; 43
     68a:	71 e0       	ldi	r23, 0x01	; 1
     68c:	02 c0       	rjmp	.+4      	; 0x692 <_Z13printddmmyyyyR5Datum+0x3c>
     68e:	6e e2       	ldi	r22, 0x2E	; 46
     690:	71 e0       	ldi	r23, 0x01	; 1
     692:	82 ea       	ldi	r24, 0xA2	; 162
     694:	93 e0       	ldi	r25, 0x03	; 3
     696:	0e 94 98 13 	call	0x2730	; 0x2730 <_ZN5Print5printEPKc>
     69a:	6a 81       	ldd	r22, Y+2	; 0x02
     69c:	7b 81       	ldd	r23, Y+3	; 0x03
     69e:	4a e0       	ldi	r20, 0x0A	; 10
     6a0:	50 e0       	ldi	r21, 0x00	; 0
     6a2:	82 ea       	ldi	r24, 0xA2	; 162
     6a4:	93 e0       	ldi	r25, 0x03	; 3
     6a6:	0e 94 45 14 	call	0x288a	; 0x288a <_ZN5Print5printEii>
     6aa:	6e e2       	ldi	r22, 0x2E	; 46
     6ac:	71 e0       	ldi	r23, 0x01	; 1
     6ae:	82 ea       	ldi	r24, 0xA2	; 162
     6b0:	93 e0       	ldi	r25, 0x03	; 3
     6b2:	0e 94 98 13 	call	0x2730	; 0x2730 <_ZN5Print5printEPKc>
     6b6:	68 81       	ld	r22, Y
     6b8:	79 81       	ldd	r23, Y+1	; 0x01
     6ba:	4a e0       	ldi	r20, 0x0A	; 10
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	82 ea       	ldi	r24, 0xA2	; 162
     6c0:	93 e0       	ldi	r25, 0x03	; 3
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	0c 94 45 14 	jmp	0x288a	; 0x288a <_ZN5Print5printEii>

000006ca <_Z15dateAlarmScreeni>:
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	ec 01       	movw	r28, r24
     6d0:	40 e0       	ldi	r20, 0x00	; 0
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	82 ea       	ldi	r24, 0xA2	; 162
     6d6:	93 e0       	ldi	r25, 0x03	; 3
     6d8:	0e 94 ed 0c 	call	0x19da	; 0x19da <_ZN7hd447809setCursorEhh>
     6dc:	8c ea       	ldi	r24, 0xAC	; 172
     6de:	92 e0       	ldi	r25, 0x02	; 2
     6e0:	0e 94 2b 03 	call	0x656	; 0x656 <_Z13printddmmyyyyR5Datum>
     6e4:	ce 01       	movw	r24, r28
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	08 95       	ret

000006ec <_Z17printHumidityTempv>:
     6ec:	cf 92       	push	r12
     6ee:	df 92       	push	r13
     6f0:	ef 92       	push	r14
     6f2:	ff 92       	push	r15
     6f4:	41 e0       	ldi	r20, 0x01	; 1
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	82 ea       	ldi	r24, 0xA2	; 162
     6fa:	93 e0       	ldi	r25, 0x03	; 3
     6fc:	0e 94 ed 0c 	call	0x19da	; 0x19da <_ZN7hd447809setCursorEhh>
     700:	c0 90 f0 02 	lds	r12, 0x02F0	; 0x8002f0 <temp>
     704:	d0 90 f1 02 	lds	r13, 0x02F1	; 0x8002f1 <temp+0x1>
     708:	e0 90 f2 02 	lds	r14, 0x02F2	; 0x8002f2 <temp+0x2>
     70c:	f0 90 f3 02 	lds	r15, 0x02F3	; 0x8002f3 <temp+0x3>
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	a9 01       	movw	r20, r18
     716:	c7 01       	movw	r24, r14
     718:	b6 01       	movw	r22, r12
     71a:	0e 94 11 12 	call	0x2422	; 0x2422 <__cmpsf2>
     71e:	81 11       	cpse	r24, r1
     720:	03 c0       	rjmp	.+6      	; 0x728 <_Z17printHumidityTempv+0x3c>
     722:	60 e3       	ldi	r22, 0x30	; 48
     724:	71 e0       	ldi	r23, 0x01	; 1
     726:	23 c0       	rjmp	.+70     	; 0x76e <_Z17printHumidityTempv+0x82>
     728:	22 e0       	ldi	r18, 0x02	; 2
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	b7 01       	movw	r22, r14
     72e:	a6 01       	movw	r20, r12
     730:	82 ea       	ldi	r24, 0xA2	; 162
     732:	93 e0       	ldi	r25, 0x03	; 3
     734:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <_ZN5Print5printEdi>
     738:	6f ed       	ldi	r22, 0xDF	; 223
     73a:	82 ea       	ldi	r24, 0xA2	; 162
     73c:	93 e0       	ldi	r25, 0x03	; 3
     73e:	0e 94 9a 13 	call	0x2734	; 0x2734 <_ZN5Print5printEc>
     742:	6e e3       	ldi	r22, 0x3E	; 62
     744:	71 e0       	ldi	r23, 0x01	; 1
     746:	82 ea       	ldi	r24, 0xA2	; 162
     748:	93 e0       	ldi	r25, 0x03	; 3
     74a:	0e 94 98 13 	call	0x2730	; 0x2730 <_ZN5Print5printEPKc>
     74e:	40 91 ec 02 	lds	r20, 0x02EC	; 0x8002ec <hum>
     752:	50 91 ed 02 	lds	r21, 0x02ED	; 0x8002ed <hum+0x1>
     756:	60 91 ee 02 	lds	r22, 0x02EE	; 0x8002ee <hum+0x2>
     75a:	70 91 ef 02 	lds	r23, 0x02EF	; 0x8002ef <hum+0x3>
     75e:	22 e0       	ldi	r18, 0x02	; 2
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	82 ea       	ldi	r24, 0xA2	; 162
     764:	93 e0       	ldi	r25, 0x03	; 3
     766:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <_ZN5Print5printEdi>
     76a:	63 e4       	ldi	r22, 0x43	; 67
     76c:	71 e0       	ldi	r23, 0x01	; 1
     76e:	82 ea       	ldi	r24, 0xA2	; 162
     770:	93 e0       	ldi	r25, 0x03	; 3
     772:	ff 90       	pop	r15
     774:	ef 90       	pop	r14
     776:	df 90       	pop	r13
     778:	cf 90       	pop	r12
     77a:	0c 94 98 13 	jmp	0x2730	; 0x2730 <_ZN5Print5printEPKc>

0000077e <_Z10homeScreeni>:
     77e:	0f 93       	push	r16
     780:	1f 93       	push	r17
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	ec 01       	movw	r28, r24
     788:	0e 94 ac 19 	call	0x3358	; 0x3358 <millis>
     78c:	00 91 f4 02 	lds	r16, 0x02F4	; 0x8002f4 <readSensor>
     790:	10 91 f5 02 	lds	r17, 0x02F5	; 0x8002f5 <readSensor+0x1>
     794:	20 91 f6 02 	lds	r18, 0x02F6	; 0x8002f6 <readSensor+0x2>
     798:	30 91 f7 02 	lds	r19, 0x02F7	; 0x8002f7 <readSensor+0x3>
     79c:	06 17       	cp	r16, r22
     79e:	17 07       	cpc	r17, r23
     7a0:	28 07       	cpc	r18, r24
     7a2:	39 07       	cpc	r19, r25
     7a4:	b8 f5       	brcc	.+110    	; 0x814 <_Z10homeScreeni+0x96>
     7a6:	66 e1       	ldi	r22, 0x16	; 22
     7a8:	8c ed       	ldi	r24, 0xDC	; 220
     7aa:	92 e0       	ldi	r25, 0x02	; 2
     7ac:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN3dht4readEh>
     7b0:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <DHT+0x4>
     7b4:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <DHT+0x5>
     7b8:	a0 91 e2 02 	lds	r26, 0x02E2	; 0x8002e2 <DHT+0x6>
     7bc:	b0 91 e3 02 	lds	r27, 0x02E3	; 0x8002e3 <DHT+0x7>
     7c0:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <temp>
     7c4:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <temp+0x1>
     7c8:	a0 93 f2 02 	sts	0x02F2, r26	; 0x8002f2 <temp+0x2>
     7cc:	b0 93 f3 02 	sts	0x02F3, r27	; 0x8002f3 <temp+0x3>
     7d0:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <DHT>
     7d4:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <DHT+0x1>
     7d8:	a0 91 de 02 	lds	r26, 0x02DE	; 0x8002de <DHT+0x2>
     7dc:	b0 91 df 02 	lds	r27, 0x02DF	; 0x8002df <DHT+0x3>
     7e0:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <hum>
     7e4:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <hum+0x1>
     7e8:	a0 93 ee 02 	sts	0x02EE, r26	; 0x8002ee <hum+0x2>
     7ec:	b0 93 ef 02 	sts	0x02EF, r27	; 0x8002ef <hum+0x3>
     7f0:	0e 94 76 03 	call	0x6ec	; 0x6ec <_Z17printHumidityTempv>
     7f4:	0e 94 ac 19 	call	0x3358	; 0x3358 <millis>
     7f8:	dc 01       	movw	r26, r24
     7fa:	cb 01       	movw	r24, r22
     7fc:	88 57       	subi	r24, 0x78	; 120
     7fe:	9c 4e       	sbci	r25, 0xEC	; 236
     800:	af 4f       	sbci	r26, 0xFF	; 255
     802:	bf 4f       	sbci	r27, 0xFF	; 255
     804:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <readSensor>
     808:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <readSensor+0x1>
     80c:	a0 93 f6 02 	sts	0x02F6, r26	; 0x8002f6 <readSensor+0x2>
     810:	b0 93 f7 02 	sts	0x02F7, r27	; 0x8002f7 <readSensor+0x3>
     814:	0e 94 76 03 	call	0x6ec	; 0x6ec <_Z17printHumidityTempv>
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	60 e0       	ldi	r22, 0x00	; 0
     81c:	82 ea       	ldi	r24, 0xA2	; 162
     81e:	93 e0       	ldi	r25, 0x03	; 3
     820:	0e 94 ed 0c 	call	0x19da	; 0x19da <_ZN7hd447809setCursorEhh>
     824:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <timeZoneChoosen>
     828:	88 23       	and	r24, r24
     82a:	d9 f0       	breq	.+54     	; 0x862 <_Z10homeScreeni+0xe4>
     82c:	8c ec       	ldi	r24, 0xCC	; 204
     82e:	92 e0       	ldi	r25, 0x02	; 2
     830:	0e 94 b4 02 	call	0x568	; 0x568 <_Z11printhhmmssR4Zeit>
     834:	40 e0       	ldi	r20, 0x00	; 0
     836:	6d e0       	ldi	r22, 0x0D	; 13
     838:	82 ea       	ldi	r24, 0xA2	; 162
     83a:	93 e0       	ldi	r25, 0x03	; 3
     83c:	0e 94 ed 0c 	call	0x19da	; 0x19da <_ZN7hd447809setCursorEhh>
     840:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <tz>
     844:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <tz+0x1>
     848:	2e e0       	ldi	r18, 0x0E	; 14
     84a:	28 9f       	mul	r18, r24
     84c:	b0 01       	movw	r22, r0
     84e:	29 9f       	mul	r18, r25
     850:	70 0d       	add	r23, r0
     852:	11 24       	eor	r1, r1
     854:	6e 5f       	subi	r22, 0xFE	; 254
     856:	7c 4f       	sbci	r23, 0xFC	; 252
     858:	82 ea       	ldi	r24, 0xA2	; 162
     85a:	93 e0       	ldi	r25, 0x03	; 3
     85c:	0e 94 8a 13 	call	0x2714	; 0x2714 <_ZN5Print5printERK6String>
     860:	04 c0       	rjmp	.+8      	; 0x86a <_Z10homeScreeni+0xec>
     862:	84 ec       	ldi	r24, 0xC4	; 196
     864:	92 e0       	ldi	r25, 0x02	; 2
     866:	0e 94 b4 02 	call	0x568	; 0x568 <_Z11printhhmmssR4Zeit>
     86a:	ce 01       	movw	r24, r28
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	08 95       	ret

00000876 <_Z13calculateTimev>:
     876:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <tz>
     87a:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <tz+0x1>
     87e:	2e e0       	ldi	r18, 0x0E	; 14
     880:	28 9f       	mul	r18, r24
     882:	f0 01       	movw	r30, r0
     884:	29 9f       	mul	r18, r25
     886:	f0 0d       	add	r31, r0
     888:	11 24       	eor	r1, r1
     88a:	e6 50       	subi	r30, 0x06	; 6
     88c:	fd 4f       	sbci	r31, 0xFD	; 253
     88e:	26 81       	ldd	r18, Z+6	; 0x06
     890:	37 81       	ldd	r19, Z+7	; 0x07
     892:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <zeitGMT>
     896:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <zeitGMT+0x1>
     89a:	82 0f       	add	r24, r18
     89c:	93 1f       	adc	r25, r19
     89e:	88 31       	cpi	r24, 0x18	; 24
     8a0:	91 05       	cpc	r25, r1
     8a2:	0c f0       	brlt	.+2      	; 0x8a6 <_Z13calculateTimev+0x30>
     8a4:	48 97       	sbiw	r24, 0x18	; 24
     8a6:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <zeitTimeZone+0x1>
     8aa:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <zeitTimeZone>
     8ae:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <zeitTimeZone>
     8b2:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <zeitTimeZone+0x1>
     8b6:	97 ff       	sbrs	r25, 7
     8b8:	05 c0       	rjmp	.+10     	; 0x8c4 <_Z13calculateTimev+0x4e>
     8ba:	48 96       	adiw	r24, 0x18	; 24
     8bc:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <zeitTimeZone+0x1>
     8c0:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <zeitTimeZone>
     8c4:	08 95       	ret

000008c6 <_Z14changeTimeZonei>:
     8c6:	83 30       	cpi	r24, 0x03	; 3
     8c8:	91 05       	cpc	r25, r1
     8ca:	39 f0       	breq	.+14     	; 0x8da <_Z14changeTimeZonei+0x14>
     8cc:	8a 30       	cpi	r24, 0x0A	; 10
     8ce:	91 05       	cpc	r25, r1
     8d0:	21 f0       	breq	.+8      	; 0x8da <_Z14changeTimeZonei+0x14>
     8d2:	81 30       	cpi	r24, 0x01	; 1
     8d4:	91 05       	cpc	r25, r1
     8d6:	51 f5       	brne	.+84     	; 0x92c <_Z14changeTimeZonei+0x66>
     8d8:	17 c0       	rjmp	.+46     	; 0x908 <_Z14changeTimeZonei+0x42>
     8da:	82 ea       	ldi	r24, 0xA2	; 162
     8dc:	93 e0       	ldi	r25, 0x03	; 3
     8de:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <_ZN7hd447805clearEv>
     8e2:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <tz>
     8e6:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <tz+0x1>
     8ea:	00 97       	sbiw	r24, 0x00	; 0
     8ec:	19 f4       	brne	.+6      	; 0x8f4 <_Z14changeTimeZonei+0x2e>
     8ee:	8b e0       	ldi	r24, 0x0B	; 11
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	01 c0       	rjmp	.+2      	; 0x8f6 <_Z14changeTimeZonei+0x30>
     8f4:	01 97       	sbiw	r24, 0x01	; 1
     8f6:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <tz+0x1>
     8fa:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <tz>
     8fe:	0e 94 3b 04 	call	0x876	; 0x876 <_Z13calculateTimev>
     902:	8a e0       	ldi	r24, 0x0A	; 10
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	08 95       	ret
     908:	82 ea       	ldi	r24, 0xA2	; 162
     90a:	93 e0       	ldi	r25, 0x03	; 3
     90c:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <_ZN7hd447805clearEv>
     910:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <tz>
     914:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <tz+0x1>
     918:	8b 30       	cpi	r24, 0x0B	; 11
     91a:	91 05       	cpc	r25, r1
     91c:	29 f4       	brne	.+10     	; 0x928 <_Z14changeTimeZonei+0x62>
     91e:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <tz+0x1>
     922:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <tz>
     926:	eb cf       	rjmp	.-42     	; 0x8fe <_Z14changeTimeZonei+0x38>
     928:	01 96       	adiw	r24, 0x01	; 1
     92a:	e5 cf       	rjmp	.-54     	; 0x8f6 <_Z14changeTimeZonei+0x30>
     92c:	08 95       	ret

0000092e <_Z11setTimeZonei>:
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	0e 94 63 04 	call	0x8c6	; 0x8c6 <_Z14changeTimeZonei>
     936:	ec 01       	movw	r28, r24
     938:	40 e0       	ldi	r20, 0x00	; 0
     93a:	60 e0       	ldi	r22, 0x00	; 0
     93c:	82 ea       	ldi	r24, 0xA2	; 162
     93e:	93 e0       	ldi	r25, 0x03	; 3
     940:	0e 94 ed 0c 	call	0x19da	; 0x19da <_ZN7hd447809setCursorEhh>
     944:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <tz>
     948:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <tz+0x1>
     94c:	2e e0       	ldi	r18, 0x0E	; 14
     94e:	28 9f       	mul	r18, r24
     950:	b0 01       	movw	r22, r0
     952:	29 9f       	mul	r18, r25
     954:	70 0d       	add	r23, r0
     956:	11 24       	eor	r1, r1
     958:	66 50       	subi	r22, 0x06	; 6
     95a:	7d 4f       	sbci	r23, 0xFD	; 253
     95c:	82 ea       	ldi	r24, 0xA2	; 162
     95e:	93 e0       	ldi	r25, 0x03	; 3
     960:	0e 94 8a 13 	call	0x2714	; 0x2714 <_ZN5Print5printERK6String>
     964:	41 e0       	ldi	r20, 0x01	; 1
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	82 ea       	ldi	r24, 0xA2	; 162
     96a:	93 e0       	ldi	r25, 0x03	; 3
     96c:	0e 94 ed 0c 	call	0x19da	; 0x19da <_ZN7hd447809setCursorEhh>
     970:	8c ec       	ldi	r24, 0xCC	; 204
     972:	92 e0       	ldi	r25, 0x02	; 2
     974:	0e 94 b4 02 	call	0x568	; 0x568 <_Z11printhhmmssR4Zeit>
     978:	ce 01       	movw	r24, r28
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	08 95       	ret

00000980 <setup>:
 * \return void
 */
void setup()
{
	//LCD konfigurieren
	lcd.begin(16, 2);
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	42 e0       	ldi	r20, 0x02	; 2
     984:	60 e1       	ldi	r22, 0x10	; 16
     986:	82 ea       	ldi	r24, 0xA2	; 162
     988:	93 e0       	ldi	r25, 0x03	; 3
     98a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <_ZN7hd447805beginEhhh>
	lcd.noBacklight();
     98e:	82 ea       	ldi	r24, 0xA2	; 162
     990:	93 e0       	ldi	r25, 0x03	; 3
     992:	0e 94 a8 0c 	call	0x1950	; 0x1950 <_ZN7hd4478011noBacklightEv>
	lcd.noCursor();
     996:	82 ea       	ldi	r24, 0xA2	; 162
     998:	93 e0       	ldi	r25, 0x03	; 3
     99a:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <_ZN7hd447808noCursorEv>
	lcd.home();
     99e:	82 ea       	ldi	r24, 0xA2	; 162
     9a0:	93 e0       	ldi	r25, 0x03	; 3
     9a2:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <_ZN7hd447804homeEv>
	lcd.print("Romeo V2.2 Watch");
     9a6:	68 e5       	ldi	r22, 0x58	; 88
     9a8:	71 e0       	ldi	r23, 0x01	; 1
     9aa:	82 ea       	ldi	r24, 0xA2	; 162
     9ac:	93 e0       	ldi	r25, 0x03	; 3
     9ae:	0e 94 98 13 	call	0x2730	; 0x2730 <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
     9b2:	41 e0       	ldi	r20, 0x01	; 1
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	82 ea       	ldi	r24, 0xA2	; 162
     9b8:	93 e0       	ldi	r25, 0x03	; 3
     9ba:	0e 94 ed 0c 	call	0x19da	; 0x19da <_ZN7hd447809setCursorEhh>
	lcd.print("Coray / Bruno");
     9be:	69 e6       	ldi	r22, 0x69	; 105
     9c0:	71 e0       	ldi	r23, 0x01	; 1
     9c2:	82 ea       	ldi	r24, 0xA2	; 162
     9c4:	93 e0       	ldi	r25, 0x03	; 3
     9c6:	0e 94 98 13 	call	0x2730	; 0x2730 <_ZN5Print5printEPKc>
	while(millis()<3000);
     9ca:	0e 94 ac 19 	call	0x3358	; 0x3358 <millis>
     9ce:	68 3b       	cpi	r22, 0xB8	; 184
     9d0:	7b 40       	sbci	r23, 0x0B	; 11
     9d2:	81 05       	cpc	r24, r1
     9d4:	91 05       	cpc	r25, r1
     9d6:	c8 f3       	brcs	.-14     	; 0x9ca <setup+0x4a>
	lcd.clear();
     9d8:	82 ea       	ldi	r24, 0xA2	; 162
     9da:	93 e0       	ldi	r25, 0x03	; 3
     9dc:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <_ZN7hd447805clearEv>
	
	zeitTimeZone = zeitGMT;
     9e0:	88 e0       	ldi	r24, 0x08	; 8
     9e2:	e4 ed       	ldi	r30, 0xD4	; 212
     9e4:	f2 e0       	ldi	r31, 0x02	; 2
     9e6:	ac ec       	ldi	r26, 0xCC	; 204
     9e8:	b2 e0       	ldi	r27, 0x02	; 2
     9ea:	01 90       	ld	r0, Z+
     9ec:	0d 92       	st	X+, r0
     9ee:	8a 95       	dec	r24
     9f0:	e1 f7       	brne	.-8      	; 0x9ea <setup+0x6a>
	
	//Button uns Sensor Pin als input definiert
	pinMode(btnPin, INPUT);
     9f2:	60 e0       	ldi	r22, 0x00	; 0
     9f4:	87 e0       	ldi	r24, 0x07	; 7
     9f6:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <pinMode>
	pinMode(tempSensor,INPUT);
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	86 e1       	ldi	r24, 0x16	; 22
     9fe:	0c 94 e8 1a 	jmp	0x35d0	; 0x35d0 <pinMode>

00000a02 <loop>:
		callibratePointer();
	}
	else
	{
	*/
	Watch();
     a02:	0e 94 72 02 	call	0x4e4	; 0x4e4 <_Z5Watchv>
	input = getkey();
     a06:	0e 94 17 01 	call	0x22e	; 0x22e <_Z6getkeyv>
     a0a:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <_ZL5input+0x1>
     a0e:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <_ZL5input>
	if (watchmenu[menu].active) 
     a12:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <_ZL4menu>
     a16:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     a1a:	74 e0       	ldi	r23, 0x04	; 4
     a1c:	ee 0f       	add	r30, r30
     a1e:	ff 1f       	adc	r31, r31
     a20:	7a 95       	dec	r23
     a22:	e1 f7       	brne	.-8      	; 0xa1c <loop+0x1a>
     a24:	e0 5e       	subi	r30, 0xE0	; 224
     a26:	fd 4f       	sbci	r31, 0xFD	; 253
     a28:	02 84       	ldd	r0, Z+10	; 0x0a
     a2a:	f3 85       	ldd	r31, Z+11	; 0x0b
     a2c:	e0 2d       	mov	r30, r0
     a2e:	30 97       	sbiw	r30, 0x00	; 0
     a30:	29 f0       	breq	.+10     	; 0xa3c <loop+0x3a>
		input = watchmenu[menu].active(input);
     a32:	09 95       	icall
     a34:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <_ZL5input+0x1>
     a38:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <_ZL5input>
		//! cyclic call to active function as long as menu n is active
	switch(input) {
     a3c:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <_ZL5input>
     a40:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <_ZL5input+0x1>
     a44:	83 30       	cpi	r24, 0x03	; 3
     a46:	91 05       	cpc	r25, r1
     a48:	d9 f1       	breq	.+118    	; 0xac0 <loop+0xbe>
     a4a:	34 f4       	brge	.+12     	; 0xa58 <loop+0x56>
     a4c:	81 30       	cpi	r24, 0x01	; 1
     a4e:	91 05       	cpc	r25, r1
     a50:	79 f0       	breq	.+30     	; 0xa70 <loop+0x6e>
     a52:	02 97       	sbiw	r24, 0x02	; 2
     a54:	19 f1       	breq	.+70     	; 0xa9c <loop+0x9a>
     a56:	09 c0       	rjmp	.+18     	; 0xa6a <loop+0x68>
     a58:	85 30       	cpi	r24, 0x05	; 5
     a5a:	91 05       	cpc	r25, r1
     a5c:	09 f4       	brne	.+2      	; 0xa60 <loop+0x5e>
     a5e:	65 c0       	rjmp	.+202    	; 0xb2a <__stack+0x2b>
     a60:	0c f4       	brge	.+2      	; 0xa64 <loop+0x62>
     a62:	40 c0       	rjmp	.+128    	; 0xae4 <loop+0xe2>
     a64:	06 97       	sbiw	r24, 0x06	; 6
     a66:	09 f4       	brne	.+2      	; 0xa6a <loop+0x68>
     a68:	83 c0       	rjmp	.+262    	; 0xb70 <__stack+0x71>
		default:
		case X_KEY:
		case NO_KEY:
		newmenu = -1; // no changes made
     a6a:	8f ef       	ldi	r24, 0xFF	; 255
     a6c:	9f ef       	ldi	r25, 0xFF	; 255
     a6e:	11 c0       	rjmp	.+34     	; 0xa92 <loop+0x90>
		break;
		case UP_KEY:
		lcd.clear();
     a70:	82 ea       	ldi	r24, 0xA2	; 162
     a72:	93 e0       	ldi	r25, 0x03	; 3
     a74:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].up;
     a78:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <_ZL4menu>
     a7c:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     a80:	64 e0       	ldi	r22, 0x04	; 4
     a82:	ee 0f       	add	r30, r30
     a84:	ff 1f       	adc	r31, r31
     a86:	6a 95       	dec	r22
     a88:	e1 f7       	brne	.-8      	; 0xa82 <loop+0x80>
     a8a:	e0 5e       	subi	r30, 0xE0	; 224
     a8c:	fd 4f       	sbci	r31, 0xFD	; 253
     a8e:	80 81       	ld	r24, Z
     a90:	91 81       	ldd	r25, Z+1	; 0x01
     a92:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <_ZL7newmenu+0x1>
     a96:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <_ZL7newmenu>
		break;
     a9a:	7a c0       	rjmp	.+244    	; 0xb90 <__stack+0x91>
		case LEFT_KEY:
		lcd.clear();
     a9c:	82 ea       	ldi	r24, 0xA2	; 162
     a9e:	93 e0       	ldi	r25, 0x03	; 3
     aa0:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].left;
     aa4:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <_ZL4menu>
     aa8:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     aac:	54 e0       	ldi	r21, 0x04	; 4
     aae:	ee 0f       	add	r30, r30
     ab0:	ff 1f       	adc	r31, r31
     ab2:	5a 95       	dec	r21
     ab4:	e1 f7       	brne	.-8      	; 0xaae <loop+0xac>
     ab6:	e0 5e       	subi	r30, 0xE0	; 224
     ab8:	fd 4f       	sbci	r31, 0xFD	; 253
     aba:	82 81       	ldd	r24, Z+2	; 0x02
     abc:	93 81       	ldd	r25, Z+3	; 0x03
     abe:	e9 cf       	rjmp	.-46     	; 0xa92 <loop+0x90>
		break;
		case DOWN_KEY:
		lcd.clear();
     ac0:	82 ea       	ldi	r24, 0xA2	; 162
     ac2:	93 e0       	ldi	r25, 0x03	; 3
     ac4:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].down;
     ac8:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <_ZL4menu>
     acc:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     ad0:	44 e0       	ldi	r20, 0x04	; 4
     ad2:	ee 0f       	add	r30, r30
     ad4:	ff 1f       	adc	r31, r31
     ad6:	4a 95       	dec	r20
     ad8:	e1 f7       	brne	.-8      	; 0xad2 <loop+0xd0>
     ada:	e0 5e       	subi	r30, 0xE0	; 224
     adc:	fd 4f       	sbci	r31, 0xFD	; 253
     ade:	84 81       	ldd	r24, Z+4	; 0x04
     ae0:	95 81       	ldd	r25, Z+5	; 0x05
     ae2:	d7 cf       	rjmp	.-82     	; 0xa92 <loop+0x90>
		break;
		case RIGHT_KEY:
		lcd.clear();
     ae4:	82 ea       	ldi	r24, 0xA2	; 162
     ae6:	93 e0       	ldi	r25, 0x03	; 3
     ae8:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <_ZN7hd447805clearEv>
		if(watchmenu[menu].goright != NULL) {
     aec:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <_ZL4menu>
     af0:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     af4:	34 e0       	ldi	r19, 0x04	; 4
     af6:	ee 0f       	add	r30, r30
     af8:	ff 1f       	adc	r31, r31
     afa:	3a 95       	dec	r19
     afc:	e1 f7       	brne	.-8      	; 0xaf6 <loop+0xf4>
     afe:	e0 5e       	subi	r30, 0xE0	; 224
     b00:	fd 4f       	sbci	r31, 0xFD	; 253
     b02:	04 84       	ldd	r0, Z+12	; 0x0c
     b04:	f5 85       	ldd	r31, Z+13	; 0x0d
     b06:	e0 2d       	mov	r30, r0
     b08:	30 97       	sbiw	r30, 0x00	; 0
     b0a:	09 f0       	breq	.+2      	; 0xb0e <__stack+0xf>
			//! call go right function with new value
			watchmenu[menu].goright();
     b0c:	09 95       	icall
		}
		newmenu = watchmenu[menu].right;
     b0e:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <_ZL4menu>
     b12:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     b16:	24 e0       	ldi	r18, 0x04	; 4
     b18:	ee 0f       	add	r30, r30
     b1a:	ff 1f       	adc	r31, r31
     b1c:	2a 95       	dec	r18
     b1e:	e1 f7       	brne	.-8      	; 0xb18 <__stack+0x19>
     b20:	e0 5e       	subi	r30, 0xE0	; 224
     b22:	fd 4f       	sbci	r31, 0xFD	; 253
     b24:	86 81       	ldd	r24, Z+6	; 0x06
     b26:	97 81       	ldd	r25, Z+7	; 0x07
     b28:	b4 cf       	rjmp	.-152    	; 0xa92 <loop+0x90>
		break;
		case OK_KEY:
		lcd.clear();
     b2a:	82 ea       	ldi	r24, 0xA2	; 162
     b2c:	93 e0       	ldi	r25, 0x03	; 3
     b2e:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <_ZN7hd447805clearEv>
		if(watchmenu[menu].positive != NULL) {
     b32:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <_ZL4menu>
     b36:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     b3a:	94 e0       	ldi	r25, 0x04	; 4
     b3c:	ee 0f       	add	r30, r30
     b3e:	ff 1f       	adc	r31, r31
     b40:	9a 95       	dec	r25
     b42:	e1 f7       	brne	.-8      	; 0xb3c <__stack+0x3d>
     b44:	e0 5e       	subi	r30, 0xE0	; 224
     b46:	fd 4f       	sbci	r31, 0xFD	; 253
     b48:	06 84       	ldd	r0, Z+14	; 0x0e
     b4a:	f7 85       	ldd	r31, Z+15	; 0x0f
     b4c:	e0 2d       	mov	r30, r0
     b4e:	30 97       	sbiw	r30, 0x00	; 0
     b50:	09 f0       	breq	.+2      	; 0xb54 <__stack+0x55>
			//! call positive answer function with new value
			watchmenu[menu].positive();
     b52:	09 95       	icall
		}
		newmenu = watchmenu[menu].ok;
     b54:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <_ZL4menu>
     b58:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     b5c:	84 e0       	ldi	r24, 0x04	; 4
     b5e:	ee 0f       	add	r30, r30
     b60:	ff 1f       	adc	r31, r31
     b62:	8a 95       	dec	r24
     b64:	e1 f7       	brne	.-8      	; 0xb5e <__stack+0x5f>
     b66:	e0 5e       	subi	r30, 0xE0	; 224
     b68:	fd 4f       	sbci	r31, 0xFD	; 253
     b6a:	80 85       	ldd	r24, Z+8	; 0x08
     b6c:	91 85       	ldd	r25, Z+9	; 0x09
     b6e:	91 cf       	rjmp	.-222    	; 0xa92 <loop+0x90>
		break;
		case BK_KEY:
		lcd.clear();
     b70:	82 ea       	ldi	r24, 0xA2	; 162
     b72:	93 e0       	ldi	r25, 0x03	; 3
     b74:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <_ZN7hd447805clearEv>
		lcd.noCursor();
     b78:	82 ea       	ldi	r24, 0xA2	; 162
     b7a:	93 e0       	ldi	r25, 0x03	; 3
     b7c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <_ZN7hd447808noCursorEv>
		lcd.noBlink();
     b80:	82 ea       	ldi	r24, 0xA2	; 162
     b82:	93 e0       	ldi	r25, 0x03	; 3
     b84:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <_ZN7hd447807noBlinkEv>
		newmenu = 0;
     b88:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <_ZL7newmenu+0x1>
     b8c:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <_ZL7newmenu>
		break;
	}
	if(newmenu >= 0) menu = newmenu;
     b90:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <_ZL7newmenu>
     b94:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <_ZL7newmenu+0x1>
     b98:	97 fd       	sbrc	r25, 7
     b9a:	04 c0       	rjmp	.+8      	; 0xba4 <__stack+0xa5>
     b9c:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <_ZL4menu+0x1>
     ba0:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <_ZL4menu>
     ba4:	08 95       	ret

00000ba6 <_GLOBAL__sub_I_lcd>:

	//} //else Klammer
}
     ba6:	af 92       	push	r10
     ba8:	bf 92       	push	r11
     baa:	cf 92       	push	r12
     bac:	df 92       	push	r13
     bae:	ef 92       	push	r14
     bb0:	ff 92       	push	r15
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
// ====================

//	-- Automagic / auto-detect constructors --

// Auto find next instance and auto config pin mapping
hd44780_I2Cexp(){ _addr = 0; _expType = I2Cexp_UNKNOWN;}
     bba:	82 ea       	ldi	r24, 0xA2	; 162
     bbc:	93 e0       	ldi	r25, 0x03	; 3
     bbe:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <_ZN7hd44780C1Ev>
     bc2:	e2 ea       	ldi	r30, 0xA2	; 162
     bc4:	f3 e0       	ldi	r31, 0x03	; 3
     bc6:	8e e0       	ldi	r24, 0x0E	; 14
     bc8:	92 e0       	ldi	r25, 0x02	; 2
     bca:	91 83       	std	Z+1, r25	; 0x01
     bcc:	80 83       	st	Z, r24
     bce:	10 a2       	std	Z+32, r1	; 0x20
     bd0:	11 a2       	std	Z+33, r1	; 0x21

const struct CITY_TIME_DIF CITIES [] {
	{"London", 0, "LON"},{"New-York", -5, "NEY"},{"Paris", 1, "PAR"},{ "Tokyo", 9, "TOK"},
	{"Hongkong", 8, "HNK"},{"Los Angeles", -8, "LAN"},{"Chicago", -6, "CHI"},{"Seoul", 9, "SEO"},
	{ "Bruessel",  1, "BRU"},{"Washington",  -5, "WAS"},{"Singapur", 8, "SIN"},{"Sydney", 11, "SYD"}
	};
     bd2:	67 e7       	ldi	r22, 0x77	; 119
     bd4:	71 e0       	ldi	r23, 0x01	; 1
     bd6:	8a ef       	ldi	r24, 0xFA	; 250
     bd8:	92 e0       	ldi	r25, 0x02	; 2
     bda:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN6StringC1EPKc>
     bde:	ca ef       	ldi	r28, 0xFA	; 250
     be0:	d2 e0       	ldi	r29, 0x02	; 2
     be2:	1f 82       	std	Y+7, r1	; 0x07
     be4:	1e 82       	std	Y+6, r1	; 0x06
     be6:	6e e7       	ldi	r22, 0x7E	; 126
     be8:	71 e0       	ldi	r23, 0x01	; 1
     bea:	82 e0       	ldi	r24, 0x02	; 2
     bec:	93 e0       	ldi	r25, 0x03	; 3
     bee:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN6StringC1EPKc>
     bf2:	62 e8       	ldi	r22, 0x82	; 130
     bf4:	71 e0       	ldi	r23, 0x01	; 1
     bf6:	88 e0       	ldi	r24, 0x08	; 8
     bf8:	93 e0       	ldi	r25, 0x03	; 3
     bfa:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN6StringC1EPKc>
     bfe:	8b ef       	ldi	r24, 0xFB	; 251
     c00:	a8 2e       	mov	r10, r24
     c02:	bb 24       	eor	r11, r11
     c04:	ba 94       	dec	r11
     c06:	bd 8a       	std	Y+21, r11	; 0x15
     c08:	ac 8a       	std	Y+20, r10	; 0x14
     c0a:	6b e8       	ldi	r22, 0x8B	; 139
     c0c:	71 e0       	ldi	r23, 0x01	; 1
     c0e:	80 e1       	ldi	r24, 0x10	; 16
     c10:	93 e0       	ldi	r25, 0x03	; 3
     c12:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN6StringC1EPKc>
     c16:	6f e8       	ldi	r22, 0x8F	; 143
     c18:	71 e0       	ldi	r23, 0x01	; 1
     c1a:	86 e1       	ldi	r24, 0x16	; 22
     c1c:	93 e0       	ldi	r25, 0x03	; 3
     c1e:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN6StringC1EPKc>
     c22:	ee 24       	eor	r14, r14
     c24:	e3 94       	inc	r14
     c26:	f1 2c       	mov	r15, r1
     c28:	fb a2       	std	Y+35, r15	; 0x23
     c2a:	ea a2       	std	Y+34, r14	; 0x22
     c2c:	65 e9       	ldi	r22, 0x95	; 149
     c2e:	71 e0       	ldi	r23, 0x01	; 1
     c30:	8e e1       	ldi	r24, 0x1E	; 30
     c32:	93 e0       	ldi	r25, 0x03	; 3
     c34:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN6StringC1EPKc>
     c38:	69 e9       	ldi	r22, 0x99	; 153
     c3a:	71 e0       	ldi	r23, 0x01	; 1
     c3c:	84 e2       	ldi	r24, 0x24	; 36
     c3e:	93 e0       	ldi	r25, 0x03	; 3
     c40:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN6StringC1EPKc>
     c44:	09 e0       	ldi	r16, 0x09	; 9
     c46:	10 e0       	ldi	r17, 0x00	; 0
     c48:	19 ab       	std	Y+49, r17	; 0x31
     c4a:	08 ab       	std	Y+48, r16	; 0x30
     c4c:	6f e9       	ldi	r22, 0x9F	; 159
     c4e:	71 e0       	ldi	r23, 0x01	; 1
     c50:	8c e2       	ldi	r24, 0x2C	; 44
     c52:	93 e0       	ldi	r25, 0x03	; 3
     c54:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN6StringC1EPKc>
     c58:	63 ea       	ldi	r22, 0xA3	; 163
     c5a:	71 e0       	ldi	r23, 0x01	; 1
     c5c:	82 e3       	ldi	r24, 0x32	; 50
     c5e:	93 e0       	ldi	r25, 0x03	; 3
     c60:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN6StringC1EPKc>
     c64:	28 e0       	ldi	r18, 0x08	; 8
     c66:	c2 2e       	mov	r12, r18
     c68:	d1 2c       	mov	r13, r1
     c6a:	df ae       	std	Y+63, r13	; 0x3f
     c6c:	ce ae       	std	Y+62, r12	; 0x3e
     c6e:	6c ea       	ldi	r22, 0xAC	; 172
     c70:	71 e0       	ldi	r23, 0x01	; 1
     c72:	8a e3       	ldi	r24, 0x3A	; 58
     c74:	93 e0       	ldi	r25, 0x03	; 3
     c76:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN6StringC1EPKc>
     c7a:	60 eb       	ldi	r22, 0xB0	; 176
     c7c:	71 e0       	ldi	r23, 0x01	; 1
     c7e:	80 e4       	ldi	r24, 0x40	; 64
     c80:	93 e0       	ldi	r25, 0x03	; 3
     c82:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN6StringC1EPKc>
     c86:	88 ef       	ldi	r24, 0xF8	; 248
     c88:	9f ef       	ldi	r25, 0xFF	; 255
     c8a:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <_ZL6CITIES+0x4d>
     c8e:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <_ZL6CITIES+0x4c>
     c92:	6c eb       	ldi	r22, 0xBC	; 188
     c94:	71 e0       	ldi	r23, 0x01	; 1
     c96:	88 e4       	ldi	r24, 0x48	; 72
     c98:	93 e0       	ldi	r25, 0x03	; 3
     c9a:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN6StringC1EPKc>
     c9e:	60 ec       	ldi	r22, 0xC0	; 192
     ca0:	71 e0       	ldi	r23, 0x01	; 1
     ca2:	8e e4       	ldi	r24, 0x4E	; 78
     ca4:	93 e0       	ldi	r25, 0x03	; 3
     ca6:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN6StringC1EPKc>
     caa:	8a ef       	ldi	r24, 0xFA	; 250
     cac:	9f ef       	ldi	r25, 0xFF	; 255
     cae:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <_ZL6CITIES+0x5b>
     cb2:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <_ZL6CITIES+0x5a>
     cb6:	68 ec       	ldi	r22, 0xC8	; 200
     cb8:	71 e0       	ldi	r23, 0x01	; 1
     cba:	86 e5       	ldi	r24, 0x56	; 86
     cbc:	93 e0       	ldi	r25, 0x03	; 3
     cbe:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN6StringC1EPKc>
     cc2:	6c ec       	ldi	r22, 0xCC	; 204
     cc4:	71 e0       	ldi	r23, 0x01	; 1
     cc6:	8c e5       	ldi	r24, 0x5C	; 92
     cc8:	93 e0       	ldi	r25, 0x03	; 3
     cca:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN6StringC1EPKc>
     cce:	10 93 63 03 	sts	0x0363, r17	; 0x800363 <_ZL6CITIES+0x69>
     cd2:	00 93 62 03 	sts	0x0362, r16	; 0x800362 <_ZL6CITIES+0x68>
     cd6:	62 ed       	ldi	r22, 0xD2	; 210
     cd8:	71 e0       	ldi	r23, 0x01	; 1
     cda:	84 e6       	ldi	r24, 0x64	; 100
     cdc:	93 e0       	ldi	r25, 0x03	; 3
     cde:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN6StringC1EPKc>
     ce2:	66 ed       	ldi	r22, 0xD6	; 214
     ce4:	71 e0       	ldi	r23, 0x01	; 1
     ce6:	8a e6       	ldi	r24, 0x6A	; 106
     ce8:	93 e0       	ldi	r25, 0x03	; 3
     cea:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN6StringC1EPKc>
     cee:	f0 92 71 03 	sts	0x0371, r15	; 0x800371 <_ZL6CITIES+0x77>
     cf2:	e0 92 70 03 	sts	0x0370, r14	; 0x800370 <_ZL6CITIES+0x76>
     cf6:	6f ed       	ldi	r22, 0xDF	; 223
     cf8:	71 e0       	ldi	r23, 0x01	; 1
     cfa:	82 e7       	ldi	r24, 0x72	; 114
     cfc:	93 e0       	ldi	r25, 0x03	; 3
     cfe:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN6StringC1EPKc>
     d02:	63 ee       	ldi	r22, 0xE3	; 227
     d04:	71 e0       	ldi	r23, 0x01	; 1
     d06:	88 e7       	ldi	r24, 0x78	; 120
     d08:	93 e0       	ldi	r25, 0x03	; 3
     d0a:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN6StringC1EPKc>
     d0e:	b0 92 7f 03 	sts	0x037F, r11	; 0x80037f <_ZL6CITIES+0x85>
     d12:	a0 92 7e 03 	sts	0x037E, r10	; 0x80037e <_ZL6CITIES+0x84>
     d16:	6e ee       	ldi	r22, 0xEE	; 238
     d18:	71 e0       	ldi	r23, 0x01	; 1
     d1a:	80 e8       	ldi	r24, 0x80	; 128
     d1c:	93 e0       	ldi	r25, 0x03	; 3
     d1e:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN6StringC1EPKc>
     d22:	62 ef       	ldi	r22, 0xF2	; 242
     d24:	71 e0       	ldi	r23, 0x01	; 1
     d26:	86 e8       	ldi	r24, 0x86	; 134
     d28:	93 e0       	ldi	r25, 0x03	; 3
     d2a:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN6StringC1EPKc>
     d2e:	d0 92 8d 03 	sts	0x038D, r13	; 0x80038d <_ZL6CITIES+0x93>
     d32:	c0 92 8c 03 	sts	0x038C, r12	; 0x80038c <_ZL6CITIES+0x92>
     d36:	6b ef       	ldi	r22, 0xFB	; 251
     d38:	71 e0       	ldi	r23, 0x01	; 1
     d3a:	8e e8       	ldi	r24, 0x8E	; 142
     d3c:	93 e0       	ldi	r25, 0x03	; 3
     d3e:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN6StringC1EPKc>
     d42:	6f ef       	ldi	r22, 0xFF	; 255
     d44:	71 e0       	ldi	r23, 0x01	; 1
     d46:	84 e9       	ldi	r24, 0x94	; 148
     d48:	93 e0       	ldi	r25, 0x03	; 3
     d4a:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN6StringC1EPKc>
     d4e:	8b e0       	ldi	r24, 0x0B	; 11
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <_ZL6CITIES+0xa1>
     d56:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <_ZL6CITIES+0xa0>
     d5a:	66 e0       	ldi	r22, 0x06	; 6
     d5c:	72 e0       	ldi	r23, 0x02	; 2
     d5e:	8c e9       	ldi	r24, 0x9C	; 156
     d60:	93 e0       	ldi	r25, 0x03	; 3
     d62:	0e 94 c1 1b 	call	0x3782	; 0x3782 <_ZN6StringC1EPKc>
#endif

class dht
{
public:
    dht() { _disableIRQ = false; };
     d66:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <DHT+0xd>
	int hh_;
	int mm_;
	int ss_;
	int set_;
public:
	Zeit(int h, int m, int s){ hh_=h; mm_=m; ss_=s; set_ =0;};
     d6a:	e4 ed       	ldi	r30, 0xD4	; 212
     d6c:	f2 e0       	ldi	r31, 0x02	; 2
     d6e:	47 e1       	ldi	r20, 0x17	; 23
     d70:	50 e0       	ldi	r21, 0x00	; 0
     d72:	51 83       	std	Z+1, r21	; 0x01
     d74:	40 83       	st	Z, r20
     d76:	8f e1       	ldi	r24, 0x1F	; 31
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	93 83       	std	Z+3, r25	; 0x03
     d7c:	82 83       	std	Z+2, r24	; 0x02
     d7e:	15 82       	std	Z+5, r1	; 0x05
     d80:	14 82       	std	Z+4, r1	; 0x04
     d82:	17 82       	std	Z+7, r1	; 0x07
     d84:	16 82       	std	Z+6, r1	; 0x06
     d86:	ec ec       	ldi	r30, 0xCC	; 204
     d88:	f2 e0       	ldi	r31, 0x02	; 2
     d8a:	2c e0       	ldi	r18, 0x0C	; 12
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	31 83       	std	Z+1, r19	; 0x01
     d90:	20 83       	st	Z, r18
     d92:	13 82       	std	Z+3, r1	; 0x03
     d94:	12 82       	std	Z+2, r1	; 0x02
     d96:	15 82       	std	Z+5, r1	; 0x05
     d98:	14 82       	std	Z+4, r1	; 0x04
     d9a:	17 82       	std	Z+7, r1	; 0x07
     d9c:	16 82       	std	Z+6, r1	; 0x06
     d9e:	e4 ec       	ldi	r30, 0xC4	; 196
     da0:	f2 e0       	ldi	r31, 0x02	; 2
     da2:	51 83       	std	Z+1, r21	; 0x01
     da4:	40 83       	st	Z, r20
     da6:	93 83       	std	Z+3, r25	; 0x03
     da8:	82 83       	std	Z+2, r24	; 0x02
     daa:	15 82       	std	Z+5, r1	; 0x05
     dac:	14 82       	std	Z+4, r1	; 0x04
     dae:	17 82       	std	Z+7, r1	; 0x07
     db0:	16 82       	std	Z+6, r1	; 0x06
	int YYYY_;
	int MM_;
	int DD_;
	int set_;
public:
	Datum(int d, int m, int y){DD_=d; MM_=m;YYYY_=y; set_ = 0;};
     db2:	ec eb       	ldi	r30, 0xBC	; 188
     db4:	f2 e0       	ldi	r31, 0x02	; 2
     db6:	8a e0       	ldi	r24, 0x0A	; 10
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	95 83       	std	Z+5, r25	; 0x05
     dbc:	84 83       	std	Z+4, r24	; 0x04
     dbe:	33 83       	std	Z+3, r19	; 0x03
     dc0:	22 83       	std	Z+2, r18	; 0x02
     dc2:	23 ee       	ldi	r18, 0xE3	; 227
     dc4:	37 e0       	ldi	r19, 0x07	; 7
     dc6:	31 83       	std	Z+1, r19	; 0x01
     dc8:	20 83       	st	Z, r18
     dca:	17 82       	std	Z+7, r1	; 0x07
     dcc:	16 82       	std	Z+6, r1	; 0x06
     dce:	e4 eb       	ldi	r30, 0xB4	; 180
     dd0:	f2 e0       	ldi	r31, 0x02	; 2
     dd2:	f5 82       	std	Z+5, r15	; 0x05
     dd4:	e4 82       	std	Z+4, r14	; 0x04
     dd6:	13 83       	std	Z+3, r17	; 0x03
     dd8:	02 83       	std	Z+2, r16	; 0x02
     dda:	20 ed       	ldi	r18, 0xD0	; 208
     ddc:	37 e0       	ldi	r19, 0x07	; 7
     dde:	31 83       	std	Z+1, r19	; 0x01
     de0:	20 83       	st	Z, r18
     de2:	17 82       	std	Z+7, r1	; 0x07
     de4:	16 82       	std	Z+6, r1	; 0x06
     de6:	ec ea       	ldi	r30, 0xAC	; 172
     de8:	f2 e0       	ldi	r31, 0x02	; 2
     dea:	2f e0       	ldi	r18, 0x0F	; 15
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	35 83       	std	Z+5, r19	; 0x05
     df0:	24 83       	std	Z+4, r18	; 0x04
     df2:	93 83       	std	Z+3, r25	; 0x03
     df4:	82 83       	std	Z+2, r24	; 0x02
     df6:	8b ec       	ldi	r24, 0xCB	; 203
     df8:	97 e0       	ldi	r25, 0x07	; 7
     dfa:	91 83       	std	Z+1, r25	; 0x01
     dfc:	80 83       	st	Z, r24
     dfe:	17 82       	std	Z+7, r1	; 0x07
     e00:	16 82       	std	Z+6, r1	; 0x06
		break;
	}
	if(newmenu >= 0) menu = newmenu;

	//} //else Klammer
}
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	1f 91       	pop	r17
     e08:	0f 91       	pop	r16
     e0a:	ff 90       	pop	r15
     e0c:	ef 90       	pop	r14
     e0e:	df 90       	pop	r13
     e10:	cf 90       	pop	r12
     e12:	bf 90       	pop	r11
     e14:	af 90       	pop	r10
     e16:	08 95       	ret

00000e18 <_GLOBAL__sub_D_lcd>:
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	c2 ea       	ldi	r28, 0xA2	; 162
     e1e:	d3 e0       	ldi	r29, 0x03	; 3
	String name;
	int timediff;
	String initials;
};

const struct CITY_TIME_DIF CITIES [] {
     e20:	2e 97       	sbiw	r28, 0x0e	; 14


hd44780_I2Cexp lcd;

//Strukt um Städte und deren Zweitverschiebung zu GMT (London)
struct CITY_TIME_DIF {
     e22:	ce 01       	movw	r24, r28
     e24:	08 96       	adiw	r24, 0x08	; 8
     e26:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <_ZN6StringD1Ev>
     e2a:	ce 01       	movw	r24, r28
     e2c:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <_ZN6StringD1Ev>
	String name;
	int timediff;
	String initials;
};

const struct CITY_TIME_DIF CITIES [] {
     e30:	82 e0       	ldi	r24, 0x02	; 2
     e32:	ca 3f       	cpi	r28, 0xFA	; 250
     e34:	d8 07       	cpc	r29, r24
     e36:	a1 f7       	brne	.-24     	; 0xe20 <_GLOBAL__sub_D_lcd+0x8>
		break;
	}
	if(newmenu >= 0) menu = newmenu;

	//} //else Klammer
}
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	08 95       	ret

00000e3e <_ZN14hd44780_I2Cexp14iosetBacklightEh>:
}

// iosetBacklight()  - set backlight brightness
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	fc 01       	movw	r30, r24
{
	if(!_bl) // backlight control?
     e44:	81 a5       	ldd	r24, Z+41	; 0x29
     e46:	88 23       	and	r24, r24
     e48:	71 f1       	breq	.+92     	; 0xea6 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x68>
     e4a:	92 a5       	ldd	r25, Z+42	; 0x2a
		return(hd44780::RV_ENOTSUP); // not backlight control support

	// dimvalue 0 is backlight off any other dimvalue is backlight on
	// configure backlight state mask according to active level
	if(((dimvalue) && (_blLevel == HIGH)) || 
     e4c:	66 23       	and	r22, r22
     e4e:	19 f0       	breq	.+6      	; 0xe56 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x18>
     e50:	91 30       	cpi	r25, 0x01	; 1
     e52:	29 f4       	brne	.+10     	; 0xe5e <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x1c>
			((dimvalue == 0) && (_blLevel == LOW)))
     e56:	91 11       	cpse	r25, r1
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
	{
		_blCurState = _bl;
     e5a:	83 a7       	std	Z+43, r24	; 0x2b
     e5c:	01 c0       	rjmp	.+2      	; 0xe60 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x22>
	}
	else 
	{
		_blCurState = 0;
     e5e:	13 a6       	std	Z+43, r1	; 0x2b
     e60:	ef 01       	movw	r28, r30
	}
	Wire.beginTransmission(_addr);
     e62:	60 a1       	ldd	r22, Z+32	; 0x20
     e64:	8d e3       	ldi	r24, 0x3D	; 61
     e66:	94 e0       	ldi	r25, 0x04	; 4
     e68:	0e 94 19 11 	call	0x2232	; 0x2232 <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
     e6c:	89 a1       	ldd	r24, Y+33	; 0x21
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	31 f4       	brne	.+12     	; 0xe7e <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x40>
	{
		Wire.write(9); // point to GPIO
     e72:	69 e0       	ldi	r22, 0x09	; 9
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	8d e3       	ldi	r24, 0x3D	; 61
     e78:	94 e0       	ldi	r25, 0x04	; 4
     e7a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
	}
	Wire.write( _blCurState );
     e7e:	6b a5       	ldd	r22, Y+43	; 0x2b
     e80:	8d e3       	ldi	r24, 0x3D	; 61
     e82:	94 e0       	ldi	r25, 0x04	; 4
     e84:	0e 94 c8 10 	call	0x2190	; 0x2190 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     e88:	8d e3       	ldi	r24, 0x3D	; 61
     e8a:	94 e0       	ldi	r25, 0x04	; 4
     e8c:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN7TwoWire15endTransmissionEv>
     e90:	21 e0       	ldi	r18, 0x01	; 1
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	81 11       	cpse	r24, r1
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x5e>
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	88 27       	eor	r24, r24
     e9e:	99 27       	eor	r25, r25
     ea0:	82 1b       	sub	r24, r18
     ea2:	93 0b       	sbc	r25, r19
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x6c>
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
{
	if(!_bl) // backlight control?
		return(hd44780::RV_ENOTSUP); // not backlight control support
     ea6:	8d ef       	ldi	r24, 0xFD	; 253
     ea8:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write( _blCurState );
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR); // all is good
}
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	08 95       	ret

00000eb0 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>:
	return(0);
}


// write4bits - send a nibble to the LCD through i/o expander port
void write4bits(uint8_t value, hd44780::iotype type ) 
     eb0:	cf 93       	push	r28
     eb2:	fc 01       	movw	r30, r24
{
uint8_t gpioValue =  _blCurState;
     eb4:	c3 a5       	ldd	r28, Z+43	; 0x2b
   
	// convert the value to an i/o expander port value
	// based on pin mappings
	if(value & (1 << 0))
     eb6:	60 ff       	sbrs	r22, 0
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0xe>
		gpioValue |= _d4;
     eba:	85 a1       	ldd	r24, Z+37	; 0x25
     ebc:	c8 2b       	or	r28, r24

	if(value & (1 << 1))
     ebe:	61 ff       	sbrs	r22, 1
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x16>
		gpioValue |= _d5;
     ec2:	86 a1       	ldd	r24, Z+38	; 0x26
     ec4:	c8 2b       	or	r28, r24

	if(value & (1 << 2))
     ec6:	62 ff       	sbrs	r22, 2
     ec8:	02 c0       	rjmp	.+4      	; 0xece <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x1e>
		gpioValue |= _d6;
     eca:	87 a1       	ldd	r24, Z+39	; 0x27
     ecc:	c8 2b       	or	r28, r24

	if(value & (1 << 3))
     ece:	63 ff       	sbrs	r22, 3
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x26>
		gpioValue |= _d7;
     ed2:	80 a5       	ldd	r24, Z+40	; 0x28
     ed4:	c8 2b       	or	r28, r24


	if(type == hd44780::HD44780_IOdata) 
     ed6:	41 30       	cpi	r20, 0x01	; 1
     ed8:	11 f4       	brne	.+4      	; 0xede <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x2e>
	{
		gpioValue |= _rs; // set RS high to send to data reg
     eda:	82 a1       	ldd	r24, Z+34	; 0x22
     edc:	c8 2b       	or	r28, r24
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
     ede:	64 a1       	ldd	r22, Z+36	; 0x24
     ee0:	6c 2b       	or	r22, r28
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	8d e3       	ldi	r24, 0x3D	; 61
     ee6:	94 e0       	ldi	r25, 0x04	; 4
     ee8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
	Wire.write(gpioValue);		// with E LOW
     eec:	6c 2f       	mov	r22, r28
     eee:	8d e3       	ldi	r24, 0x3D	; 61
     ef0:	94 e0       	ldi	r25, 0x04	; 4
}
     ef2:	cf 91       	pop	r28
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
	Wire.write(gpioValue);		// with E LOW
     ef4:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <_ZN7TwoWire5writeEh>

00000ef8 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh>:
	return(rval);
}

// iowrite(type, value) - send either command or data byte to lcd
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
     ef8:	8f 92       	push	r8
     efa:	9f 92       	push	r9
     efc:	af 92       	push	r10
     efe:	bf 92       	push	r11
     f00:	cf 92       	push	r12
     f02:	df 92       	push	r13
     f04:	ef 92       	push	r14
     f06:	ff 92       	push	r15
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	ec 01       	movw	r28, r24
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
     f12:	88 a1       	ldd	r24, Y+32	; 0x20
     f14:	88 23       	and	r24, r24
     f16:	09 f4       	brne	.+2      	; 0xf1a <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x22>
     f18:	50 c0       	rjmp	.+160    	; 0xfba <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
     f1a:	89 a1       	ldd	r24, Y+33	; 0x21
     f1c:	88 23       	and	r24, r24
     f1e:	09 f4       	brne	.+2      	; 0xf22 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x2a>
     f20:	4c c0       	rjmp	.+152    	; 0xfba <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
     f22:	14 2f       	mov	r17, r20
     f24:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
     f26:	8c 8c       	ldd	r8, Y+28	; 0x1c
     f28:	9d 8c       	ldd	r9, Y+29	; 0x1d
     f2a:	ae 8c       	ldd	r10, Y+30	; 0x1e
     f2c:	bf 8c       	ldd	r11, Y+31	; 0x1f
     f2e:	c8 8c       	ldd	r12, Y+24	; 0x18
     f30:	d9 8c       	ldd	r13, Y+25	; 0x19
     f32:	ea 8c       	ldd	r14, Y+26	; 0x1a
     f34:	fb 8c       	ldd	r15, Y+27	; 0x1b
     f36:	8d e2       	ldi	r24, 0x2D	; 45
     f38:	c8 1a       	sub	r12, r24
     f3a:	d1 08       	sbc	r13, r1
     f3c:	e1 08       	sbc	r14, r1
     f3e:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
     f40:	0e 94 b8 19 	call	0x3370	; 0x3370 <micros>
     f44:	dc 01       	movw	r26, r24
     f46:	cb 01       	movw	r24, r22
     f48:	8c 19       	sub	r24, r12
     f4a:	9d 09       	sbc	r25, r13
     f4c:	ae 09       	sbc	r26, r14
     f4e:	bf 09       	sbc	r27, r15
     f50:	88 15       	cp	r24, r8
     f52:	99 05       	cpc	r25, r9
     f54:	aa 05       	cpc	r26, r10
     f56:	bb 05       	cpc	r27, r11
     f58:	98 f3       	brcs	.-26     	; 0xf40 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x48>
	 */

	waitReady(-45);
   
	// grab i2c bus
	Wire.beginTransmission(_addr);
     f5a:	68 a1       	ldd	r22, Y+32	; 0x20
     f5c:	8d e3       	ldi	r24, 0x3D	; 61
     f5e:	94 e0       	ldi	r25, 0x04	; 4
     f60:	0e 94 19 11 	call	0x2232	; 0x2232 <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
     f64:	89 a1       	ldd	r24, Y+33	; 0x21
     f66:	82 30       	cpi	r24, 0x02	; 2
     f68:	31 f4       	brne	.+12     	; 0xf76 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x7e>
	{
		Wire.write(9); // point to GPIO
     f6a:	69 e0       	ldi	r22, 0x09	; 9
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	8d e3       	ldi	r24, 0x3D	; 61
     f70:	94 e0       	ldi	r25, 0x04	; 4
     f72:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
	}
	// send both nibbles in same i2c connection
	write4bits( (value >> 4), type );  // send upper nibble
     f76:	61 2f       	mov	r22, r17
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	84 e0       	ldi	r24, 0x04	; 4
     f7c:	75 95       	asr	r23
     f7e:	67 95       	ror	r22
     f80:	8a 95       	dec	r24
     f82:	e1 f7       	brne	.-8      	; 0xf7c <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x84>
     f84:	40 2f       	mov	r20, r16
     f86:	ce 01       	movw	r24, r28
     f88:	0e 94 58 07 	call	0xeb0	; 0xeb0 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	 * are used to reliably get the LCD and host in nibble sync
	 * with each other and to get the LCD into 4 bit mode.
	 * When sending a "4 bit command" only the upper nibble of
	 * of the 8 bit byte will presented on LCD signals D4-D7.
	 */
	if(type != hd44780::HD44780_IOcmd4bit)
     f8c:	02 30       	cpi	r16, 0x02	; 2
     f8e:	31 f0       	breq	.+12     	; 0xf9c <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xa4>
	{
		write4bits( (value & 0x0F), type); // lower nibble, if not 4bit cmd
     f90:	61 2f       	mov	r22, r17
     f92:	6f 70       	andi	r22, 0x0F	; 15
     f94:	40 2f       	mov	r20, r16
     f96:	ce 01       	movw	r24, r28
     f98:	0e 94 58 07 	call	0xeb0	; 0xeb0 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	}
	if(Wire.endTransmission())
     f9c:	8d e3       	ldi	r24, 0x3D	; 61
     f9e:	94 e0       	ldi	r25, 0x04	; 4
     fa0:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN7TwoWire15endTransmissionEv>
     fa4:	21 e0       	ldi	r18, 0x01	; 1
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 11       	cpse	r24, r1
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xb8>
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	88 27       	eor	r24, r24
     fb2:	99 27       	eor	r25, r25
     fb4:	82 1b       	sub	r24, r18
     fb6:	93 0b       	sbc	r25, r19
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc6>
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
     fba:	8c ef       	ldi	r24, 0xFC	; 252
     fbc:	9f ef       	ldi	r25, 0xFF	; 255
	}
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR);
}
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	ff 90       	pop	r15
     fc8:	ef 90       	pop	r14
     fca:	df 90       	pop	r13
     fcc:	cf 90       	pop	r12
     fce:	bf 90       	pop	r11
     fd0:	af 90       	pop	r10
     fd2:	9f 90       	pop	r9
     fd4:	8f 90       	pop	r8
     fd6:	08 95       	ret

00000fd8 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE>:
// ioread(type) - read a byte from LCD DDRAM
//
// returns:
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
     fd8:	8f 92       	push	r8
     fda:	9f 92       	push	r9
     fdc:	af 92       	push	r10
     fde:	bf 92       	push	r11
     fe0:	cf 92       	push	r12
     fe2:	df 92       	push	r13
     fe4:	ef 92       	push	r14
     fe6:	ff 92       	push	r15
     fe8:	0f 93       	push	r16
     fea:	1f 93       	push	r17
     fec:	cf 93       	push	r28
     fee:	df 93       	push	r29
     ff0:	ec 01       	movw	r28, r24
{
uint8_t gpioValue =  _blCurState;
     ff2:	1b a5       	ldd	r17, Y+43	; 0x2b
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
     ff4:	88 a1       	ldd	r24, Y+32	; 0x20
     ff6:	88 23       	and	r24, r24
     ff8:	09 f4       	brne	.+2      	; 0xffc <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x24>
     ffa:	f6 c0       	rjmp	.+492    	; 0x11e8 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
     ffc:	89 a1       	ldd	r24, Y+33	; 0x21
     ffe:	88 23       	and	r24, r24
    1000:	09 f4       	brne	.+2      	; 0x1004 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x2c>
    1002:	f2 c0       	rjmp	.+484    	; 0x11e8 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
		return(hd44780::RV_ENXIO);

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
    1004:	82 30       	cpi	r24, 0x02	; 2
    1006:	09 f4       	brne	.+2      	; 0x100a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x32>
    1008:	f1 c0       	rjmp	.+482    	; 0x11ec <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
	{
		return(hd44780::RV_ENOTSUP);
	}

	// check if reads supported
	if(!_rw)
    100a:	8b a1       	ldd	r24, Y+35	; 0x23
    100c:	88 23       	and	r24, r24
    100e:	09 f4       	brne	.+2      	; 0x1012 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x3a>
    1010:	ed c0       	rjmp	.+474    	; 0x11ec <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
    1012:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
    1014:	8c 8c       	ldd	r8, Y+28	; 0x1c
    1016:	9d 8c       	ldd	r9, Y+29	; 0x1d
    1018:	ae 8c       	ldd	r10, Y+30	; 0x1e
    101a:	bf 8c       	ldd	r11, Y+31	; 0x1f
    101c:	c8 8c       	ldd	r12, Y+24	; 0x18
    101e:	d9 8c       	ldd	r13, Y+25	; 0x19
    1020:	ea 8c       	ldd	r14, Y+26	; 0x1a
    1022:	fb 8c       	ldd	r15, Y+27	; 0x1b
    1024:	8d e2       	ldi	r24, 0x2D	; 45
    1026:	c8 1a       	sub	r12, r24
    1028:	d1 08       	sbc	r13, r1
    102a:	e1 08       	sbc	r14, r1
    102c:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
    102e:	0e 94 b8 19 	call	0x3370	; 0x3370 <micros>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	8c 19       	sub	r24, r12
    1038:	9d 09       	sbc	r25, r13
    103a:	ae 09       	sbc	r26, r14
    103c:	bf 09       	sbc	r27, r15
    103e:	88 15       	cp	r24, r8
    1040:	99 05       	cpc	r25, r9
    1042:	aa 05       	cpc	r26, r10
    1044:	bb 05       	cpc	r27, r11
    1046:	98 f3       	brcs	.-26     	; 0x102e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x56>
    1048:	8d a1       	ldd	r24, Y+37	; 0x25
    104a:	18 2b       	or	r17, r24
    104c:	8e a1       	ldd	r24, Y+38	; 0x26
    104e:	18 2b       	or	r17, r24
    1050:	8f a1       	ldd	r24, Y+39	; 0x27
    1052:	18 2b       	or	r17, r24
   
	// put all the expander LCD data pins into input mode.
	// PCF8574 psuedo inputs use pullups so setting them to 1
	// makes them suitible for inputs.

	gpioValue |= _d4|_d5|_d6|_d7;
    1054:	88 a5       	ldd	r24, Y+40	; 0x28
    1056:	18 2b       	or	r17, r24

	// set RS based on type of read (data or status/cmd)
	if(type == hd44780::HD44780_IOdata) 
    1058:	01 30       	cpi	r16, 0x01	; 1
    105a:	11 f4       	brne	.+4      	; 0x1060 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x88>
	{
		gpioValue |= _rs; // RS high to read data reg
    105c:	8a a1       	ldd	r24, Y+34	; 0x22
    105e:	18 2b       	or	r17, r24
	}

	gpioValue |= _rw; // r/w high for reading
    1060:	8b a1       	ldd	r24, Y+35	; 0x23
    1062:	18 2b       	or	r17, r24

	// write all the bits to the expander port
	
	Wire.beginTransmission(_addr);
    1064:	68 a1       	ldd	r22, Y+32	; 0x20
    1066:	8d e3       	ldi	r24, 0x3D	; 61
    1068:	94 e0       	ldi	r25, 0x04	; 4
    106a:	0e 94 19 11 	call	0x2232	; 0x2232 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue);		// d4-d7 are inputs, RS, r/w high, E LOW
    106e:	61 2f       	mov	r22, r17
    1070:	8d e3       	ldi	r24, 0x3D	; 61
    1072:	94 e0       	ldi	r25, 0x04	; 4
    1074:	0e 94 c8 10 	call	0x2190	; 0x2190 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    1078:	8d e3       	ldi	r24, 0x3D	; 61
    107a:	94 e0       	ldi	r25, 0x04	; 4
    107c:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN7TwoWire15endTransmissionEv>
    1080:	88 23       	and	r24, r24
    1082:	19 f0       	breq	.+6      	; 0x108a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xb2>
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;
    1084:	0f ef       	ldi	r16, 0xFF	; 255
    1086:	1f ef       	ldi	r17, 0xFF	; 255
    1088:	9d c0       	rjmp	.+314    	; 0x11c4 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ec>
	if(Wire.endTransmission())
		goto returnStatus;


	// raise E to read the data.
	Wire.beginTransmission(_addr);
    108a:	68 a1       	ldd	r22, Y+32	; 0x20
    108c:	8d e3       	ldi	r24, 0x3D	; 61
    108e:	94 e0       	ldi	r25, 0x04	; 4
    1090:	0e 94 19 11 	call	0x2232	; 0x2232 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raises E 
    1094:	6c a1       	ldd	r22, Y+36	; 0x24
    1096:	61 2b       	or	r22, r17
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	8d e3       	ldi	r24, 0x3D	; 61
    109c:	94 e0       	ldi	r25, 0x04	; 4
    109e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
    10a2:	8d e3       	ldi	r24, 0x3D	; 61
    10a4:	94 e0       	ldi	r25, 0x04	; 4
    10a6:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN7TwoWire15endTransmissionEv>
    10aa:	81 11       	cpse	r24, r1
    10ac:	eb cf       	rjmp	.-42     	; 0x1084 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// read the expander port to get the upper nibble of the byte
	Wire.requestFrom((int)_addr, 1);
    10ae:	68 a1       	ldd	r22, Y+32	; 0x20
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	41 e0       	ldi	r20, 0x01	; 1
    10b4:	50 e0       	ldi	r21, 0x00	; 0
    10b6:	8d e3       	ldi	r24, 0x3D	; 61
    10b8:	94 e0       	ldi	r25, 0x04	; 4
    10ba:	0e 94 9a 11 	call	0x2334	; 0x2334 <_ZN7TwoWire11requestFromEii>
	iodata = Wire.read();
    10be:	8d e3       	ldi	r24, 0x3D	; 61
    10c0:	94 e0       	ldi	r25, 0x04	; 4
    10c2:	0e 94 41 10 	call	0x2082	; 0x2082 <_ZN7TwoWire4readEv>
    10c6:	7c 01       	movw	r14, r24
	if(iodata < 0) // did we not receive a byte?
    10c8:	97 fd       	sbrc	r25, 7
    10ca:	dc cf       	rjmp	.-72     	; 0x1084 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
    10cc:	68 a1       	ldd	r22, Y+32	; 0x20
    10ce:	8d e3       	ldi	r24, 0x3D	; 61
    10d0:	94 e0       	ldi	r25, 0x04	; 4
    10d2:	0e 94 19 11 	call	0x2232	; 0x2232 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
    10d6:	61 2f       	mov	r22, r17
    10d8:	8d e3       	ldi	r24, 0x3D	; 61
    10da:	94 e0       	ldi	r25, 0x04	; 4
    10dc:	0e 94 c8 10 	call	0x2190	; 0x2190 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    10e0:	8d e3       	ldi	r24, 0x3D	; 61
    10e2:	94 e0       	ldi	r25, 0x04	; 4
    10e4:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN7TwoWire15endTransmissionEv>
    10e8:	81 11       	cpse	r24, r1
    10ea:	cc cf       	rjmp	.-104    	; 0x1084 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
    10ec:	8d a1       	ldd	r24, Y+37	; 0x25
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	8e 21       	and	r24, r14
    10f2:	9f 21       	and	r25, r15
    10f4:	89 2b       	or	r24, r25
    10f6:	11 f4       	brne	.+4      	; 0x10fc <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x124>
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
    10f8:	00 e0       	ldi	r16, 0x00	; 0
    10fa:	01 c0       	rjmp	.+2      	; 0x10fe <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x126>
	if(Wire.endTransmission())
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
		data |= (1 << 4);
    10fc:	00 e1       	ldi	r16, 0x10	; 16

	if(iodata & _d5)
    10fe:	8e a1       	ldd	r24, Y+38	; 0x26
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	8e 21       	and	r24, r14
    1104:	9f 21       	and	r25, r15
    1106:	89 2b       	or	r24, r25
    1108:	09 f0       	breq	.+2      	; 0x110c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x134>
		data |= (1 << 5);
    110a:	00 62       	ori	r16, 0x20	; 32

	if(iodata & _d6)
    110c:	8f a1       	ldd	r24, Y+39	; 0x27
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	8e 21       	and	r24, r14
    1112:	9f 21       	and	r25, r15
    1114:	89 2b       	or	r24, r25
    1116:	09 f0       	breq	.+2      	; 0x111a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x142>
		data |= (1 << 6);
    1118:	00 64       	ori	r16, 0x40	; 64

	if(iodata & _d7)
    111a:	88 a5       	ldd	r24, Y+40	; 0x28
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	e8 22       	and	r14, r24
    1120:	f9 22       	and	r15, r25
    1122:	ef 28       	or	r14, r15
    1124:	09 f0       	breq	.+2      	; 0x1128 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x150>
		data |= (1 << 7);
    1126:	00 68       	ori	r16, 0x80	; 128
	
	Wire.beginTransmission(_addr);
    1128:	68 a1       	ldd	r22, Y+32	; 0x20
    112a:	8d e3       	ldi	r24, 0x3D	; 61
    112c:	94 e0       	ldi	r25, 0x04	; 4
    112e:	0e 94 19 11 	call	0x2232	; 0x2232 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raise E to read next nibble
    1132:	6c a1       	ldd	r22, Y+36	; 0x24
    1134:	61 2b       	or	r22, r17
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	8d e3       	ldi	r24, 0x3D	; 61
    113a:	94 e0       	ldi	r25, 0x04	; 4
    113c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
    1140:	8d e3       	ldi	r24, 0x3D	; 61
    1142:	94 e0       	ldi	r25, 0x04	; 4
    1144:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN7TwoWire15endTransmissionEv>
    1148:	81 11       	cpse	r24, r1
    114a:	9c cf       	rjmp	.-200    	; 0x1084 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>

	// read the expander port to get the lower nibble of the byte
	// We can't look at the return value from requestFrom() on the TineyWireM
	// library as it doesn't work like it is supposed to.
	// So we look at the return status from read() instead.
	Wire.requestFrom((int)_addr, 1);
    114c:	68 a1       	ldd	r22, Y+32	; 0x20
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	41 e0       	ldi	r20, 0x01	; 1
    1152:	50 e0       	ldi	r21, 0x00	; 0
    1154:	8d e3       	ldi	r24, 0x3D	; 61
    1156:	94 e0       	ldi	r25, 0x04	; 4
    1158:	0e 94 9a 11 	call	0x2334	; 0x2334 <_ZN7TwoWire11requestFromEii>

	iodata = Wire.read();
    115c:	8d e3       	ldi	r24, 0x3D	; 61
    115e:	94 e0       	ldi	r25, 0x04	; 4
    1160:	0e 94 41 10 	call	0x2082	; 0x2082 <_ZN7TwoWire4readEv>
    1164:	7c 01       	movw	r14, r24

	if(iodata < 0) // did we not receive a byte?
    1166:	97 fd       	sbrc	r25, 7
    1168:	8d cf       	rjmp	.-230    	; 0x1084 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
    116a:	68 a1       	ldd	r22, Y+32	; 0x20
    116c:	8d e3       	ldi	r24, 0x3D	; 61
    116e:	94 e0       	ldi	r25, 0x04	; 4
    1170:	0e 94 19 11 	call	0x2232	; 0x2232 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
    1174:	61 2f       	mov	r22, r17
    1176:	8d e3       	ldi	r24, 0x3D	; 61
    1178:	94 e0       	ldi	r25, 0x04	; 4
    117a:	0e 94 c8 10 	call	0x2190	; 0x2190 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    117e:	8d e3       	ldi	r24, 0x3D	; 61
    1180:	94 e0       	ldi	r25, 0x04	; 4
    1182:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN7TwoWire15endTransmissionEv>
    1186:	81 11       	cpse	r24, r1
    1188:	7d cf       	rjmp	.-262    	; 0x1084 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into lower nibble of byte
	if(iodata & _d4)
    118a:	8d a1       	ldd	r24, Y+37	; 0x25
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	8e 21       	and	r24, r14
    1190:	9f 21       	and	r25, r15
    1192:	89 2b       	or	r24, r25
    1194:	09 f0       	breq	.+2      	; 0x1198 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1c0>
		data |= (1 << 0);
    1196:	01 60       	ori	r16, 0x01	; 1

	if(iodata & _d5)
    1198:	8e a1       	ldd	r24, Y+38	; 0x26
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	8e 21       	and	r24, r14
    119e:	9f 21       	and	r25, r15
    11a0:	89 2b       	or	r24, r25
    11a2:	09 f0       	breq	.+2      	; 0x11a6 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ce>
		data |= (1 << 1);
    11a4:	02 60       	ori	r16, 0x02	; 2

	if(iodata & _d6)
    11a6:	8f a1       	ldd	r24, Y+39	; 0x27
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	8e 21       	and	r24, r14
    11ac:	9f 21       	and	r25, r15
    11ae:	89 2b       	or	r24, r25
    11b0:	09 f0       	breq	.+2      	; 0x11b4 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1dc>
		data |= (1 << 2);
    11b2:	04 60       	ori	r16, 0x04	; 4

	if(iodata & _d7)
    11b4:	88 a5       	ldd	r24, Y+40	; 0x28
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	e8 22       	and	r14, r24
    11ba:	f9 22       	and	r15, r25
    11bc:	ef 28       	or	r14, r15
    11be:	09 f0       	breq	.+2      	; 0x11c2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ea>
		data |= (1 << 3);
    11c0:	08 60       	ori	r16, 0x08	; 8

	rval = data;
    11c2:	10 e0       	ldi	r17, 0x00	; 0

returnStatus:

	// try to put gpio port back to all outputs state with WR signal low for writes
	Wire.beginTransmission(_addr);
    11c4:	68 a1       	ldd	r22, Y+32	; 0x20
    11c6:	8d e3       	ldi	r24, 0x3D	; 61
    11c8:	94 e0       	ldi	r25, 0x04	; 4
    11ca:	0e 94 19 11 	call	0x2232	; 0x2232 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(_blCurState);		// with E LOW
    11ce:	6b a5       	ldd	r22, Y+43	; 0x2b
    11d0:	8d e3       	ldi	r24, 0x3D	; 61
    11d2:	94 e0       	ldi	r25, 0x04	; 4
    11d4:	0e 94 c8 10 	call	0x2190	; 0x2190 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    11d8:	8d e3       	ldi	r24, 0x3D	; 61
    11da:	94 e0       	ldi	r25, 0x04	; 4
    11dc:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN7TwoWire15endTransmissionEv>
    11e0:	88 23       	and	r24, r24
    11e2:	39 f0       	breq	.+14     	; 0x11f2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21a>
		rval = hd44780::RV_EIO;
    11e4:	8f ef       	ldi	r24, 0xFF	; 255
    11e6:	03 c0       	rjmp	.+6      	; 0x11ee <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
    11e8:	8c ef       	ldi	r24, 0xFC	; 252
    11ea:	01 c0       	rjmp	.+2      	; 0x11ee <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
	{
		return(hd44780::RV_ENOTSUP);
    11ec:	8d ef       	ldi	r24, 0xFD	; 253
    11ee:	9f ef       	ldi	r25, 0xFF	; 255
    11f0:	01 c0       	rjmp	.+2      	; 0x11f4 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21c>
    11f2:	c8 01       	movw	r24, r16
	Wire.write(_blCurState);		// with E LOW
	if(Wire.endTransmission())
		rval = hd44780::RV_EIO;

	return(rval);
}
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	ff 90       	pop	r15
    11fe:	ef 90       	pop	r14
    1200:	df 90       	pop	r13
    1202:	cf 90       	pop	r12
    1204:	bf 90       	pop	r11
    1206:	af 90       	pop	r10
    1208:	9f 90       	pop	r9
    120a:	8f 90       	pop	r8
    120c:	08 95       	ret

0000120e <_ZN14hd44780_I2Cexp11autocfg8574Ev>:
 * a new resistor to  connect to the base of the transistor.
 * 
 * As a result the SYDZ backpack cannot use autoconfiguration.
 */

int autocfg8574()
    120e:	0f 93       	push	r16
    1210:	1f 93       	push	r17
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
    1216:	ec 01       	movw	r28, r24
uint8_t data, data2;
uint8_t rs, rw, en, d4, d5, d6, d7, bl, blLevel;

	// First put a 0xff in the output port

	Wire.beginTransmission(_addr);
    1218:	68 a1       	ldd	r22, Y+32	; 0x20
    121a:	8d e3       	ldi	r24, 0x3D	; 61
    121c:	94 e0       	ldi	r25, 0x04	; 4
    121e:	0e 94 19 11 	call	0x2232	; 0x2232 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0xff);
    1222:	6f ef       	ldi	r22, 0xFF	; 255
    1224:	8d e3       	ldi	r24, 0x3D	; 61
    1226:	94 e0       	ldi	r25, 0x04	; 4
    1228:	0e 94 c8 10 	call	0x2190	; 0x2190 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    122c:	8d e3       	ldi	r24, 0x3D	; 61
    122e:	94 e0       	ldi	r25, 0x04	; 4
    1230:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN7TwoWire15endTransmissionEv>

	// now read back from the port

	Wire.requestFrom((int)_addr, 1);
    1234:	68 a1       	ldd	r22, Y+32	; 0x20
    1236:	70 e0       	ldi	r23, 0x00	; 0
    1238:	41 e0       	ldi	r20, 0x01	; 1
    123a:	50 e0       	ldi	r21, 0x00	; 0
    123c:	8d e3       	ldi	r24, 0x3D	; 61
    123e:	94 e0       	ldi	r25, 0x04	; 4
    1240:	0e 94 9a 11 	call	0x2334	; 0x2334 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    1244:	8d e3       	ldi	r24, 0x3D	; 61
    1246:	94 e0       	ldi	r25, 0x04	; 4
    1248:	0e 94 41 10 	call	0x2082	; 0x2082 <_ZN7TwoWire4readEv>
    124c:	8c 01       	movw	r16, r24

	// Turn off bit2 to attempt to see if en is bit 2,
	// if it is, it should change all lcd data bits to 1s
	
	Wire.beginTransmission(_addr);
    124e:	68 a1       	ldd	r22, Y+32	; 0x20
    1250:	8d e3       	ldi	r24, 0x3D	; 61
    1252:	94 e0       	ldi	r25, 0x04	; 4
    1254:	0e 94 19 11 	call	0x2232	; 0x2232 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) (~(1 << 2)) );
    1258:	6b ef       	ldi	r22, 0xFB	; 251
    125a:	8d e3       	ldi	r24, 0x3D	; 61
    125c:	94 e0       	ldi	r25, 0x04	; 4
    125e:	0e 94 c8 10 	call	0x2190	; 0x2190 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    1262:	8d e3       	ldi	r24, 0x3D	; 61
    1264:	94 e0       	ldi	r25, 0x04	; 4
    1266:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN7TwoWire15endTransmissionEv>

	// read back data
	Wire.requestFrom((int)_addr, 1);
    126a:	68 a1       	ldd	r22, Y+32	; 0x20
    126c:	70 e0       	ldi	r23, 0x00	; 0
    126e:	41 e0       	ldi	r20, 0x01	; 1
    1270:	50 e0       	ldi	r21, 0x00	; 0
    1272:	8d e3       	ldi	r24, 0x3D	; 61
    1274:	94 e0       	ldi	r25, 0x04	; 4
    1276:	0e 94 9a 11 	call	0x2334	; 0x2334 <_ZN7TwoWire11requestFromEii>
	data2 = Wire.read();
    127a:	8d e3       	ldi	r24, 0x3D	; 61
    127c:	94 e0       	ldi	r25, 0x04	; 4
    127e:	0e 94 41 10 	call	0x2082	; 0x2082 <_ZN7TwoWire4readEv>

	// If lower 3 bits are high and all 4 upper bits are high after clearing bit 2
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
    1282:	98 01       	movw	r18, r16
    1284:	27 70       	andi	r18, 0x07	; 7
    1286:	33 27       	eor	r19, r19
    1288:	27 30       	cpi	r18, 0x07	; 7
    128a:	31 05       	cpc	r19, r1
    128c:	b1 f4       	brne	.+44     	; 0x12ba <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
    128e:	80 7f       	andi	r24, 0xF0	; 240
    1290:	99 27       	eor	r25, r25
    1292:	80 3f       	cpi	r24, 0xF0	; 240
    1294:	91 05       	cpc	r25, r1
    1296:	89 f4       	brne	.+34     	; 0x12ba <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
    1298:	83 e0       	ldi	r24, 0x03	; 3
    129a:	16 95       	lsr	r17
    129c:	07 95       	ror	r16
    129e:	8a 95       	dec	r24
    12a0:	e1 f7       	brne	.-8      	; 0x129a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x8c>
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	08 27       	eor	r16, r24
    12a6:	01 70       	andi	r16, 0x01	; 1
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
	{
		rs = 0; rw = 1; en = 2; d4 = 4; d5 = 5; d6 = 6; d7 = 7; bl = 3;
    12a8:	43 e0       	ldi	r20, 0x03	; 3
    12aa:	57 e0       	ldi	r21, 0x07	; 7
    12ac:	66 e0       	ldi	r22, 0x06	; 6
    12ae:	75 e0       	ldi	r23, 0x05	; 5
    12b0:	e4 e0       	ldi	r30, 0x04	; 4
    12b2:	22 e0       	ldi	r18, 0x02	; 2
    12b4:	f1 e0       	ldi	r31, 0x01	; 1
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	34 c0       	rjmp	.+104    	; 0x1322 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x114>
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
		}
	}
	else if((data & 0x70) == 0x70)
    12ba:	c8 01       	movw	r24, r16
    12bc:	80 77       	andi	r24, 0x70	; 112
    12be:	99 27       	eor	r25, r25
    12c0:	80 37       	cpi	r24, 0x70	; 112
    12c2:	91 05       	cpc	r25, r1
    12c4:	09 f0       	breq	.+2      	; 0x12c8 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xba>
    12c6:	68 c0       	rjmp	.+208    	; 0x1398 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18a>
		// both use bit 7 for backlight control

		// Turn off the en bit which should change the data bits
		// bit 4 on the mjkdz is en so we try that bit
	
		Wire.beginTransmission(_addr);
    12c8:	68 a1       	ldd	r22, Y+32	; 0x20
    12ca:	8d e3       	ldi	r24, 0x3D	; 61
    12cc:	94 e0       	ldi	r25, 0x04	; 4
    12ce:	0e 94 19 11 	call	0x2232	; 0x2232 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t) (~(1 << 4)) );
    12d2:	6f ee       	ldi	r22, 0xEF	; 239
    12d4:	8d e3       	ldi	r24, 0x3D	; 61
    12d6:	94 e0       	ldi	r25, 0x04	; 4
    12d8:	0e 94 c8 10 	call	0x2190	; 0x2190 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    12dc:	8d e3       	ldi	r24, 0x3D	; 61
    12de:	94 e0       	ldi	r25, 0x04	; 4
    12e0:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN7TwoWire15endTransmissionEv>

		// read back data
		Wire.requestFrom((int)_addr, 1);
    12e4:	68 a1       	ldd	r22, Y+32	; 0x20
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	41 e0       	ldi	r20, 0x01	; 1
    12ea:	50 e0       	ldi	r21, 0x00	; 0
    12ec:	8d e3       	ldi	r24, 0x3D	; 61
    12ee:	94 e0       	ldi	r25, 0x04	; 4
    12f0:	0e 94 9a 11 	call	0x2334	; 0x2334 <_ZN7TwoWire11requestFromEii>
		data2 = Wire.read();
    12f4:	8d e3       	ldi	r24, 0x3D	; 61
    12f6:	94 e0       	ldi	r25, 0x04	; 4
    12f8:	0e 94 41 10 	call	0x2082	; 0x2082 <_ZN7TwoWire4readEv>
		// look at data bits and see if they changed
		// if they changed to 0xf, then en was bit 4 and it is mjdkz
		// this will happen since when E is low the LCD is not
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
    12fc:	8f 70       	andi	r24, 0x0F	; 15
    12fe:	99 27       	eor	r25, r25
    1300:	0f 97       	sbiw	r24, 0x0f	; 15
    1302:	19 f0       	breq	.+6      	; 0x130a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xfc>
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
		}
		else
		{
			// electrofun LCDXIO
			rs = 4; rw = 5; en = 6; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
    1304:	26 e0       	ldi	r18, 0x06	; 6
    1306:	34 e0       	ldi	r19, 0x04	; 4
    1308:	02 c0       	rjmp	.+4      	; 0x130e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x100>
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
		{
			// mjkdz
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
    130a:	24 e0       	ldi	r18, 0x04	; 4
    130c:	36 e0       	ldi	r19, 0x06	; 6
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
    130e:	00 95       	com	r16
    1310:	00 1f       	adc	r16, r16
    1312:	00 27       	eor	r16, r16
    1314:	00 1f       	adc	r16, r16
    1316:	47 e0       	ldi	r20, 0x07	; 7
    1318:	53 e0       	ldi	r21, 0x03	; 3
    131a:	62 e0       	ldi	r22, 0x02	; 2
    131c:	71 e0       	ldi	r23, 0x01	; 1
    131e:	e0 e0       	ldi	r30, 0x00	; 0
    1320:	f5 e0       	ldi	r31, 0x05	; 5
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	dc 01       	movw	r26, r24
    1328:	01 c0       	rjmp	.+2      	; 0x132c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11e>
    132a:	aa 0f       	add	r26, r26
    132c:	3a 95       	dec	r19
    132e:	ea f7       	brpl	.-6      	; 0x132a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11c>
    1330:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
    1332:	dc 01       	movw	r26, r24
    1334:	01 c0       	rjmp	.+2      	; 0x1338 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x12a>
    1336:	aa 0f       	add	r26, r26
    1338:	fa 95       	dec	r31
    133a:	ea f7       	brpl	.-6      	; 0x1336 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x128>
    133c:	ab a3       	std	Y+35, r26	; 0x23
	else
		_rw = 0; // no r/w control

	_en = ( 1 << en );
    133e:	dc 01       	movw	r26, r24
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x138>
    1342:	aa 0f       	add	r26, r26
    1344:	bb 1f       	adc	r27, r27
    1346:	2a 95       	dec	r18
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x134>
    134a:	ac a3       	std	Y+36, r26	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
    134c:	9c 01       	movw	r18, r24
    134e:	01 c0       	rjmp	.+2      	; 0x1352 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x144>
    1350:	22 0f       	add	r18, r18
    1352:	ea 95       	dec	r30
    1354:	ea f7       	brpl	.-6      	; 0x1350 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x142>
    1356:	2d a3       	std	Y+37, r18	; 0x25
	_d5 = ( 1 << d5 );
    1358:	9c 01       	movw	r18, r24
    135a:	01 c0       	rjmp	.+2      	; 0x135e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x150>
    135c:	22 0f       	add	r18, r18
    135e:	7a 95       	dec	r23
    1360:	ea f7       	brpl	.-6      	; 0x135c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x14e>
    1362:	2e a3       	std	Y+38, r18	; 0x26
	_d6 = ( 1 << d6 );
    1364:	9c 01       	movw	r18, r24
    1366:	01 c0       	rjmp	.+2      	; 0x136a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15c>
    1368:	22 0f       	add	r18, r18
    136a:	6a 95       	dec	r22
    136c:	ea f7       	brpl	.-6      	; 0x1368 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15a>
    136e:	2f a3       	std	Y+39, r18	; 0x27
	_d7 = ( 1 << d7 );   
    1370:	9c 01       	movw	r18, r24
    1372:	01 c0       	rjmp	.+2      	; 0x1376 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x168>
    1374:	22 0f       	add	r18, r18
    1376:	5a 95       	dec	r21
    1378:	ea f7       	brpl	.-6      	; 0x1374 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x166>
    137a:	28 a7       	std	Y+40, r18	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
    137c:	01 c0       	rjmp	.+2      	; 0x1380 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x172>
    137e:	88 0f       	add	r24, r24
    1380:	4a 95       	dec	r20
    1382:	ea f7       	brpl	.-6      	; 0x137e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x170>
    1384:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
    1386:	0a a7       	std	Y+42, r16	; 0x2a
	// set default bl state to backlight on
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
    1388:	01 30       	cpi	r16, 0x01	; 1
    138a:	11 f4       	brne	.+4      	; 0x1390 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x182>
		_blCurState = _bl;
    138c:	8b a7       	std	Y+43, r24	; 0x2b
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x184>
	else
		_blCurState = 0;
    1390:	1b a6       	std	Y+43, r1	; 0x2b
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	02 c0       	rjmp	.+4      	; 0x139c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18e>
		}
	}
	else
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
    1398:	8d ef       	ldi	r24, 0xFD	; 253
    139a:	9f ef       	ldi	r25, 0xFF	; 255
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
    139c:	df 91       	pop	r29
    139e:	cf 91       	pop	r28
    13a0:	1f 91       	pop	r17
    13a2:	0f 91       	pop	r16
    13a4:	08 95       	ret

000013a6 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>:
 * if GP1 is low then the board is the BOARD_XXX board
 * The BOARD_XXX may not work as GP1 is used for D5 on WIDEHK and LCDPLUG
 *
 *
 */
int autocfgMCP23008()
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	ec 01       	movw	r28, r24

	/*
	 * Now set up output port
	 * Make no assumptions as to the state of IOCON BYTE mode
	 */
	Wire.beginTransmission(_addr);
    13ac:	68 a1       	ldd	r22, Y+32	; 0x20
    13ae:	8d e3       	ldi	r24, 0x3D	; 61
    13b0:	94 e0       	ldi	r25, 0x04	; 4
    13b2:	0e 94 19 11 	call	0x2232	; 0x2232 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t)0); // point to IODIR
    13b6:	60 e0       	ldi	r22, 0x00	; 0
    13b8:	8d e3       	ldi	r24, 0x3D	; 61
    13ba:	94 e0       	ldi	r25, 0x04	; 4
    13bc:	0e 94 c8 10 	call	0x2190	; 0x2190 <_ZN7TwoWire5writeEh>
	Wire.write(0xff); // all pins inputs
    13c0:	6f ef       	ldi	r22, 0xFF	; 255
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	8d e3       	ldi	r24, 0x3D	; 61
    13c6:	94 e0       	ldi	r25, 0x04	; 4
    13c8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    13cc:	8d e3       	ldi	r24, 0x3D	; 61
    13ce:	94 e0       	ldi	r25, 0x04	; 4
    13d0:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN7TwoWire15endTransmissionEv>

	Wire.beginTransmission(_addr);
    13d4:	68 a1       	ldd	r22, Y+32	; 0x20
    13d6:	8d e3       	ldi	r24, 0x3D	; 61
    13d8:	94 e0       	ldi	r25, 0x04	; 4
    13da:	0e 94 19 11 	call	0x2232	; 0x2232 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(6); // point to GPPU
    13de:	66 e0       	ldi	r22, 0x06	; 6
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	8d e3       	ldi	r24, 0x3D	; 61
    13e4:	94 e0       	ldi	r25, 0x04	; 4
    13e6:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
	Wire.write(0xff); // turn on pullups
    13ea:	6f ef       	ldi	r22, 0xFF	; 255
    13ec:	70 e0       	ldi	r23, 0x00	; 0
    13ee:	8d e3       	ldi	r24, 0x3D	; 61
    13f0:	94 e0       	ldi	r25, 0x04	; 4
    13f2:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    13f6:	8d e3       	ldi	r24, 0x3D	; 61
    13f8:	94 e0       	ldi	r25, 0x04	; 4
    13fa:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN7TwoWire15endTransmissionEv>

	/*
	 * read from the GPIO port
	 */

	Wire.beginTransmission(_addr);
    13fe:	68 a1       	ldd	r22, Y+32	; 0x20
    1400:	8d e3       	ldi	r24, 0x3D	; 61
    1402:	94 e0       	ldi	r25, 0x04	; 4
    1404:	0e 94 19 11 	call	0x2232	; 0x2232 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(9); // point to GPIO
    1408:	69 e0       	ldi	r22, 0x09	; 9
    140a:	70 e0       	ldi	r23, 0x00	; 0
    140c:	8d e3       	ldi	r24, 0x3D	; 61
    140e:	94 e0       	ldi	r25, 0x04	; 4
    1410:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    1414:	8d e3       	ldi	r24, 0x3D	; 61
    1416:	94 e0       	ldi	r25, 0x04	; 4
    1418:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom((int)_addr, 1);
    141c:	68 a1       	ldd	r22, Y+32	; 0x20
    141e:	70 e0       	ldi	r23, 0x00	; 0
    1420:	41 e0       	ldi	r20, 0x01	; 1
    1422:	50 e0       	ldi	r21, 0x00	; 0
    1424:	8d e3       	ldi	r24, 0x3D	; 61
    1426:	94 e0       	ldi	r25, 0x04	; 4
    1428:	0e 94 9a 11 	call	0x2334	; 0x2334 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    142c:	8d e3       	ldi	r24, 0x3D	; 61
    142e:	94 e0       	ldi	r25, 0x04	; 4
    1430:	0e 94 41 10 	call	0x2082	; 0x2082 <_ZN7TwoWire4readEv>

	blLevel = HIGH; // known boards are active HIGH bl

	if(data == 0x7f) // bit 7 low, and other control and data lines high
    1434:	8f 37       	cpi	r24, 0x7F	; 127
    1436:	61 f0       	breq	.+24     	; 0x1450 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xaa>
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
    1438:	86 ff       	sbrs	r24, 6
    143a:	12 c0       	rjmp	.+36     	; 0x1460 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xba>
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
    143c:	81 fd       	sbrc	r24, 1
    143e:	4c c0       	rjmp	.+152    	; 0x14d8 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x132>
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
		bl = 1;
    1440:	21 e0       	ldi	r18, 0x01	; 1
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
    1442:	32 e0       	ldi	r19, 0x02	; 2
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
    1444:	43 e0       	ldi	r20, 0x03	; 3
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
    1446:	54 e0       	ldi	r21, 0x04	; 4
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
    1448:	65 e0       	ldi	r22, 0x05	; 5
	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
    144a:	76 e0       	ldi	r23, 0x06	; 6
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
    144c:	e7 e0       	ldi	r30, 0x07	; 7
    144e:	0f c0       	rjmp	.+30     	; 0x146e <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;
    1450:	27 e0       	ldi	r18, 0x07	; 7
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
    1452:	36 e0       	ldi	r19, 0x06	; 6
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
    1454:	45 e0       	ldi	r20, 0x05	; 5
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
    1456:	54 e0       	ldi	r21, 0x04	; 4
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
    1458:	63 e0       	ldi	r22, 0x03	; 3
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
    145a:	72 e0       	ldi	r23, 0x02	; 2

	if(data == 0x7f) // bit 7 low, and other control and data lines high
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
    145c:	e1 e0       	ldi	r30, 0x01	; 1
    145e:	07 c0       	rjmp	.+14     	; 0x146e <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;
    1460:	26 e0       	ldi	r18, 0x06	; 6
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
    1462:	33 e0       	ldi	r19, 0x03	; 3
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
    1464:	42 e0       	ldi	r20, 0x02	; 2
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
    1466:	51 e0       	ldi	r21, 0x01	; 1
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
    1468:	60 e0       	ldi	r22, 0x00	; 0
	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
    146a:	77 e0       	ldi	r23, 0x07	; 7
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
    146c:	e4 e0       	ldi	r30, 0x04	; 4
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	dc 01       	movw	r26, r24
    1474:	02 c0       	rjmp	.+4      	; 0x147a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd4>
    1476:	aa 0f       	add	r26, r26
    1478:	bb 1f       	adc	r27, r27
    147a:	ea 95       	dec	r30
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd0>
    147e:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
	else
		_rw = 0; // no r/w control
    1480:	1b a2       	std	Y+35, r1	; 0x23

	_en = ( 1 << en );
    1482:	fc 01       	movw	r30, r24
    1484:	01 c0       	rjmp	.+2      	; 0x1488 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe2>
    1486:	ee 0f       	add	r30, r30
    1488:	7a 95       	dec	r23
    148a:	ea f7       	brpl	.-6      	; 0x1486 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe0>
    148c:	ec a3       	std	Y+36, r30	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
    148e:	fc 01       	movw	r30, r24
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xf0>
    1492:	ee 0f       	add	r30, r30
    1494:	ff 1f       	adc	r31, r31
    1496:	6a 95       	dec	r22
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xec>
    149a:	ed a3       	std	Y+37, r30	; 0x25
	_d5 = ( 1 << d5 );
    149c:	bc 01       	movw	r22, r24
    149e:	01 c0       	rjmp	.+2      	; 0x14a2 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfc>
    14a0:	66 0f       	add	r22, r22
    14a2:	5a 95       	dec	r21
    14a4:	ea f7       	brpl	.-6      	; 0x14a0 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfa>
    14a6:	6e a3       	std	Y+38, r22	; 0x26
	_d6 = ( 1 << d6 );
    14a8:	bc 01       	movw	r22, r24
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x10a>
    14ac:	66 0f       	add	r22, r22
    14ae:	77 1f       	adc	r23, r23
    14b0:	4a 95       	dec	r20
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x106>
    14b4:	6f a3       	std	Y+39, r22	; 0x27
	_d7 = ( 1 << d7 );   
    14b6:	ac 01       	movw	r20, r24
    14b8:	01 c0       	rjmp	.+2      	; 0x14bc <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x116>
    14ba:	44 0f       	add	r20, r20
    14bc:	3a 95       	dec	r19
    14be:	ea f7       	brpl	.-6      	; 0x14ba <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x114>
    14c0:	48 a7       	std	Y+40, r20	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
    14c2:	01 c0       	rjmp	.+2      	; 0x14c6 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x120>
    14c4:	88 0f       	add	r24, r24
    14c6:	2a 95       	dec	r18
    14c8:	ea f7       	brpl	.-6      	; 0x14c4 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x11e>
    14ca:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
    14cc:	91 e0       	ldi	r25, 0x01	; 1
    14ce:	9a a7       	std	Y+42, r25	; 0x2a
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
		_blCurState = _bl;
    14d0:	8b a7       	std	Y+43, r24	; 0x2b
		// could not identify board
		return(hd44780::RV_ENOTSUP);
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x136>

	}
	else
	{
		// could not identify board
		return(hd44780::RV_ENOTSUP);
    14d8:	8d ef       	ldi	r24, 0xFD	; 253
    14da:	9f ef       	ldi	r25, 0xFF	; 255
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
    14dc:	df 91       	pop	r29
    14de:	cf 91       	pop	r28
    14e0:	08 95       	ret

000014e2 <_ZN14hd44780_I2Cexp6ioinitEv>:
// Returns non zero if initialization failed.
//
// can't be used from constructors because not everything is initalized yet.
// (maybe interrupts or other library constructors)
// if Wire library is used in constructor, it will hang.
int ioinit()
    14e2:	1f 93       	push	r17
    14e4:	cf 93       	push	r28
    14e6:	df 93       	push	r29
    14e8:	ec 01       	movw	r28, r24
	 * I believe that it is unreasonable to require the the user
	 * sketch code to do it, because all that should change between
	 * hd44780 i/o interfaces should be the constructor
	 * So we go ahead and call it here.
	 */
	Wire.begin();
    14ea:	8d e3       	ldi	r24, 0x3D	; 61
    14ec:	94 e0       	ldi	r25, 0x04	; 4
    14ee:	0e 94 07 11 	call	0x220e	; 0x220e <_ZN7TwoWire5beginEv>

	// auto locate i2c expander and magically detect pin mappings

	if(!_addr) // locate next instance
    14f2:	68 a1       	ldd	r22, Y+32	; 0x20
    14f4:	61 11       	cpse	r22, r1
    14f6:	0a c0       	rjmp	.+20     	; 0x150c <_ZN14hd44780_I2Cexp6ioinitEv+0x2a>
	{
		_addr = LocateDevice(AutoInst++);
    14f8:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    14fc:	91 e0       	ldi	r25, 0x01	; 1
    14fe:	98 0f       	add	r25, r24
    1500:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    1504:	0e 94 b0 01 	call	0x360	; 0x360 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
    1508:	88 a3       	std	Y+32, r24	; 0x20
    150a:	0d c0       	rjmp	.+26     	; 0x1526 <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
	}
	else
	{
		// check to see if device at specified address is really there
		Wire.beginTransmission(_addr);
    150c:	8d e3       	ldi	r24, 0x3D	; 61
    150e:	94 e0       	ldi	r25, 0x04	; 4
    1510:	0e 94 19 11 	call	0x2232	; 0x2232 <_ZN7TwoWire17beginTransmissionEh>
		if(Wire.endTransmission())
    1514:	8d e3       	ldi	r24, 0x3D	; 61
    1516:	94 e0       	ldi	r25, 0x04	; 4
    1518:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN7TwoWire15endTransmissionEv>
    151c:	88 23       	and	r24, r24
    151e:	19 f0       	breq	.+6      	; 0x1526 <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
			return(hd44780::RV_ENXIO);
    1520:	8c ef       	ldi	r24, 0xFC	; 252
    1522:	9f ef       	ldi	r25, 0xFF	; 255
    1524:	a7 c0       	rjmp	.+334    	; 0x1674 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	}

	if(!_addr) // locate next instance
    1526:	88 a1       	ldd	r24, Y+32	; 0x20
    1528:	81 11       	cpse	r24, r1
    152a:	09 c0       	rjmp	.+18     	; 0x153e <_ZN14hd44780_I2Cexp6ioinitEv+0x5c>
		_addr = LocateDevice(AutoInst++);
    152c:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    1530:	91 e0       	ldi	r25, 0x01	; 1
    1532:	98 0f       	add	r25, r24
    1534:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    1538:	0e 94 b0 01 	call	0x360	; 0x360 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
    153c:	88 a3       	std	Y+32, r24	; 0x20

	if(!_addr) // if we couldn't locate it, return error
    153e:	18 a1       	ldd	r17, Y+32	; 0x20
    1540:	11 23       	and	r17, r17
    1542:	71 f3       	breq	.-36     	; 0x1520 <_ZN14hd44780_I2Cexp6ioinitEv+0x3e>
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
    1544:	89 a1       	ldd	r24, Y+33	; 0x21
    1546:	88 23       	and	r24, r24
    1548:	c1 f1       	breq	.+112    	; 0x15ba <_ZN14hd44780_I2Cexp6ioinitEv+0xd8>
			return(status);
	}

	// initialize IO expander chip

	Wire.beginTransmission(_addr);
    154a:	68 a1       	ldd	r22, Y+32	; 0x20
    154c:	8d e3       	ldi	r24, 0x3D	; 61
    154e:	94 e0       	ldi	r25, 0x04	; 4
    1550:	0e 94 19 11 	call	0x2232	; 0x2232 <_ZN7TwoWire17beginTransmissionEh>

	if(_expType == I2Cexp_MCP23008)
    1554:	89 a1       	ldd	r24, Y+33	; 0x21
    1556:	82 30       	cpi	r24, 0x02	; 2
    1558:	09 f0       	breq	.+2      	; 0x155c <_ZN14hd44780_I2Cexp6ioinitEv+0x7a>
    155a:	76 c0       	rjmp	.+236    	; 0x1648 <_ZN14hd44780_I2Cexp6ioinitEv+0x166>
		 * within the same i2c connection by simply sending more bytes.
		 * This is necessary as the code uses back to back writes to perform
		 * the nibble updates as well as the toggling the enable signal.
		 * This methodology offers significant performance gains.
		 */
		Wire.write(5);	// point to IOCON
    155c:	65 e0       	ldi	r22, 0x05	; 5
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	8d e3       	ldi	r24, 0x3D	; 61
    1562:	94 e0       	ldi	r25, 0x04	; 4
    1564:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
		Wire.write(0x20);// disable sequential mode (enables BYTE mode)
    1568:	60 e2       	ldi	r22, 0x20	; 32
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	8d e3       	ldi	r24, 0x3D	; 61
    156e:	94 e0       	ldi	r25, 0x04	; 4
    1570:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    1574:	8d e3       	ldi	r24, 0x3D	; 61
    1576:	94 e0       	ldi	r25, 0x04	; 4
    1578:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN7TwoWire15endTransmissionEv>

		/*
		 * Now set up output port
		 */
		Wire.beginTransmission(_addr);
    157c:	68 a1       	ldd	r22, Y+32	; 0x20
    157e:	8d e3       	ldi	r24, 0x3D	; 61
    1580:	94 e0       	ldi	r25, 0x04	; 4
    1582:	0e 94 19 11 	call	0x2232	; 0x2232 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t)0); // point to IODIR
    1586:	60 e0       	ldi	r22, 0x00	; 0
    1588:	8d e3       	ldi	r24, 0x3D	; 61
    158a:	94 e0       	ldi	r25, 0x04	; 4
    158c:	0e 94 c8 10 	call	0x2190	; 0x2190 <_ZN7TwoWire5writeEh>
		Wire.write((uint8_t)0); // all pins output
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	8d e3       	ldi	r24, 0x3D	; 61
    1594:	94 e0       	ldi	r25, 0x04	; 4
    1596:	0e 94 c8 10 	call	0x2190	; 0x2190 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    159a:	8d e3       	ldi	r24, 0x3D	; 61
    159c:	94 e0       	ldi	r25, 0x04	; 4
    159e:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN7TwoWire15endTransmissionEv>
	
		/*
		 * point chip to GPIO
		 */
		Wire.beginTransmission(_addr);
    15a2:	68 a1       	ldd	r22, Y+32	; 0x20
    15a4:	8d e3       	ldi	r24, 0x3D	; 61
    15a6:	94 e0       	ldi	r25, 0x04	; 4
    15a8:	0e 94 19 11 	call	0x2232	; 0x2232 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write(9); // point to GPIO
    15ac:	69 e0       	ldi	r22, 0x09	; 9
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	8d e3       	ldi	r24, 0x3D	; 61
    15b2:	94 e0       	ldi	r25, 0x04	; 4
    15b4:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
    15b8:	47 c0       	rjmp	.+142    	; 0x1648 <_ZN14hd44780_I2Cexp6ioinitEv+0x166>

	/*
	 * First try to write 0xff to MCP23008 IODIR
	 * On a PCF8574 this will end up writing 0 and then ff to output port
	 */
	Wire.beginTransmission(address);
    15ba:	61 2f       	mov	r22, r17
    15bc:	8d e3       	ldi	r24, 0x3D	; 61
    15be:	94 e0       	ldi	r25, 0x04	; 4
    15c0:	0e 94 19 11 	call	0x2232	; 0x2232 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	8d e3       	ldi	r24, 0x3D	; 61
    15c8:	94 e0       	ldi	r25, 0x04	; 4
    15ca:	0e 94 c8 10 	call	0x2190	; 0x2190 <_ZN7TwoWire5writeEh>
	Wire.write((uint8_t) 0xff);	// try to write to MCP23008 IODR
    15ce:	6f ef       	ldi	r22, 0xFF	; 255
    15d0:	8d e3       	ldi	r24, 0x3D	; 61
    15d2:	94 e0       	ldi	r25, 0x04	; 4
    15d4:	0e 94 c8 10 	call	0x2190	; 0x2190 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    15d8:	8d e3       	ldi	r24, 0x3D	; 61
    15da:	94 e0       	ldi	r25, 0x04	; 4
    15dc:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now try to point MCP23008 to IODIR for read
	 * On a PCF8574 this will end up writing a 0 to the output port
	 */

	Wire.beginTransmission(address);
    15e0:	61 2f       	mov	r22, r17
    15e2:	8d e3       	ldi	r24, 0x3D	; 61
    15e4:	94 e0       	ldi	r25, 0x04	; 4
    15e6:	0e 94 19 11 	call	0x2232	; 0x2232 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
    15ea:	60 e0       	ldi	r22, 0x00	; 0
    15ec:	8d e3       	ldi	r24, 0x3D	; 61
    15ee:	94 e0       	ldi	r25, 0x04	; 4
    15f0:	0e 94 c8 10 	call	0x2190	; 0x2190 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    15f4:	8d e3       	ldi	r24, 0x3D	; 61
    15f6:	94 e0       	ldi	r25, 0x04	; 4
    15f8:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now read a byte
	 * On a MCP23008 we should read the 0xff we wrote to IODIR
	 * On a PCF8574 we should read 0 since the output port was set to 0
	 */
	Wire.requestFrom((int)address, 1);
    15fc:	61 2f       	mov	r22, r17
    15fe:	70 e0       	ldi	r23, 0x00	; 0
    1600:	41 e0       	ldi	r20, 0x01	; 1
    1602:	50 e0       	ldi	r21, 0x00	; 0
    1604:	8d e3       	ldi	r24, 0x3D	; 61
    1606:	94 e0       	ldi	r25, 0x04	; 4
    1608:	0e 94 9a 11 	call	0x2334	; 0x2334 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    160c:	8d e3       	ldi	r24, 0x3D	; 61
    160e:	94 e0       	ldi	r25, 0x04	; 4
    1610:	0e 94 41 10 	call	0x2082	; 0x2082 <_ZN7TwoWire4readEv>
    1614:	9c 01       	movw	r18, r24

	if(data == 0xff)
    1616:	8f 3f       	cpi	r24, 0xFF	; 255
    1618:	91 05       	cpc	r25, r1
    161a:	29 f0       	breq	.+10     	; 0x1626 <_ZN14hd44780_I2Cexp6ioinitEv+0x144>
	{
		chiptype = I2Cexp_MCP23008;
    161c:	91 e0       	ldi	r25, 0x01	; 1
    161e:	23 2b       	or	r18, r19
    1620:	19 f0       	breq	.+6      	; 0x1628 <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	01 c0       	rjmp	.+2      	; 0x1628 <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    1626:	92 e0       	ldi	r25, 0x02	; 2
	if(!_addr) // if we couldn't locate it, return error
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);
    1628:	99 a3       	std	Y+33, r25	; 0x21

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
    162a:	99 23       	and	r25, r25
    162c:	09 f1       	breq	.+66     	; 0x1670 <_ZN14hd44780_I2Cexp6ioinitEv+0x18e>
			return(hd44780::RV_EIO);

		if(_expType == I2Cexp_PCF8574)
    162e:	91 30       	cpi	r25, 0x01	; 1
    1630:	21 f4       	brne	.+8      	; 0x163a <_ZN14hd44780_I2Cexp6ioinitEv+0x158>
			status = autocfg8574();		// go auto configure the pin mappings
    1632:	ce 01       	movw	r24, r28
    1634:	0e 94 07 09 	call	0x120e	; 0x120e <_ZN14hd44780_I2Cexp11autocfg8574Ev>
    1638:	03 c0       	rjmp	.+6      	; 0x1640 <_ZN14hd44780_I2Cexp6ioinitEv+0x15e>
		else
			status = autocfgMCP23008();	// go auto configure the pin mappings
    163a:	ce 01       	movw	r24, r28
    163c:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>
		if(status)
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	09 f4       	brne	.+2      	; 0x1646 <_ZN14hd44780_I2Cexp6ioinitEv+0x164>
    1644:	82 cf       	rjmp	.-252    	; 0x154a <_ZN14hd44780_I2Cexp6ioinitEv+0x68>
    1646:	16 c0       	rjmp	.+44     	; 0x1674 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
		 */
		Wire.beginTransmission(_addr);
		Wire.write(9); // point to GPIO
		
	}
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	8d e3       	ldi	r24, 0x3D	; 61
    164c:	94 e0       	ldi	r25, 0x04	; 4
    164e:	0e 94 c8 10 	call	0x2190	; 0x2190 <_ZN7TwoWire5writeEh>
	if( (status = Wire.endTransmission()) ) // assignment
    1652:	8d e3       	ldi	r24, 0x3D	; 61
    1654:	94 e0       	ldi	r25, 0x04	; 4
    1656:	0e 94 9d 11 	call	0x233a	; 0x233a <_ZN7TwoWire15endTransmissionEv>
    165a:	21 e0       	ldi	r18, 0x01	; 1
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	81 11       	cpse	r24, r1
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <_ZN14hd44780_I2Cexp6ioinitEv+0x184>
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	88 27       	eor	r24, r24
    1668:	99 27       	eor	r25, r25
    166a:	82 1b       	sub	r24, r18
    166c:	93 0b       	sbc	r25, r19
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
			return(hd44780::RV_EIO);
    1670:	8f ef       	ldi	r24, 0xFF	; 255
    1672:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
	if( (status = Wire.endTransmission()) ) // assignment
		status = hd44780::RV_EIO;

	return ( status );
}
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	1f 91       	pop	r17
    167a:	08 95       	ret

0000167c <_ZN3dht11_readSensorEhhh>:
    if (bits[4] != sum)
    {
        return DHTLIB_ERROR_CHECKSUM;
    }
    return result;
}
    167c:	2f 92       	push	r2
    167e:	3f 92       	push	r3
    1680:	4f 92       	push	r4
    1682:	5f 92       	push	r5
    1684:	6f 92       	push	r6
    1686:	7f 92       	push	r7
    1688:	8f 92       	push	r8
    168a:	9f 92       	push	r9
    168c:	af 92       	push	r10
    168e:	bf 92       	push	r11
    1690:	cf 92       	push	r12
    1692:	df 92       	push	r13
    1694:	ef 92       	push	r14
    1696:	ff 92       	push	r15
    1698:	0f 93       	push	r16
    169a:	1f 93       	push	r17
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	ec 01       	movw	r28, r24
    16a2:	f6 2e       	mov	r15, r22
    16a4:	04 2f       	mov	r16, r20
    16a6:	e2 2e       	mov	r14, r18
    16a8:	86 2f       	mov	r24, r22
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	fc 01       	movw	r30, r24
    16ae:	e8 5d       	subi	r30, 0xD8	; 216
    16b0:	fe 4f       	sbci	r31, 0xFE	; 254
    16b2:	14 91       	lpm	r17, Z
    16b4:	fc 01       	movw	r30, r24
    16b6:	e9 5b       	subi	r30, 0xB9	; 185
    16b8:	fe 4f       	sbci	r31, 0xFE	; 254
    16ba:	e4 91       	lpm	r30, Z
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	ee 0f       	add	r30, r30
    16c0:	ff 1f       	adc	r31, r31
    16c2:	ea 59       	subi	r30, 0x9A	; 154
    16c4:	fe 4f       	sbci	r31, 0xFE	; 254
    16c6:	c5 90       	lpm	r12, Z+
    16c8:	d4 90       	lpm	r13, Z
    16ca:	61 e0       	ldi	r22, 0x01	; 1
    16cc:	8f 2d       	mov	r24, r15
    16ce:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <pinMode>
    16d2:	60 e0       	ldi	r22, 0x00	; 0
    16d4:	8f 2d       	mov	r24, r15
    16d6:	0e 94 24 1b 	call	0x3648	; 0x3648 <digitalWrite>
    16da:	09 30       	cpi	r16, 0x09	; 9
    16dc:	38 f0       	brcs	.+14     	; 0x16ec <_ZN3dht11_readSensorEhhh+0x70>
    16de:	60 2f       	mov	r22, r16
    16e0:	70 e0       	ldi	r23, 0x00	; 0
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	0e 94 dd 19 	call	0x33ba	; 0x33ba <delay>
    16ea:	0a c0       	rjmp	.+20     	; 0x1700 <_ZN3dht11_readSensorEhhh+0x84>
    16ec:	88 ee       	ldi	r24, 0xE8	; 232
    16ee:	93 e0       	ldi	r25, 0x03	; 3
    16f0:	9c 01       	movw	r18, r24
    16f2:	02 9f       	mul	r16, r18
    16f4:	c0 01       	movw	r24, r0
    16f6:	03 9f       	mul	r16, r19
    16f8:	90 0d       	add	r25, r0
    16fa:	11 24       	eor	r1, r1
    16fc:	0e 94 19 1a 	call	0x3432	; 0x3432 <delayMicroseconds>
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	8f 2d       	mov	r24, r15
    1704:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <pinMode>
    1708:	80 e2       	ldi	r24, 0x20	; 32
    170a:	93 e0       	ldi	r25, 0x03	; 3
    170c:	d6 01       	movw	r26, r12
    170e:	2c 91       	ld	r18, X
    1710:	21 23       	and	r18, r17
    1712:	21 f0       	breq	.+8      	; 0x171c <_ZN3dht11_readSensorEhhh+0xa0>
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	d1 f7       	brne	.-12     	; 0x170c <_ZN3dht11_readSensorEhhh+0x90>
    1718:	8d ef       	ldi	r24, 0xFD	; 253
    171a:	5f c0       	rjmp	.+190    	; 0x17da <_ZN3dht11_readSensorEhhh+0x15e>
    171c:	80 e9       	ldi	r24, 0x90	; 144
    171e:	91 e0       	ldi	r25, 0x01	; 1
    1720:	f6 01       	movw	r30, r12
    1722:	20 81       	ld	r18, Z
    1724:	21 23       	and	r18, r17
    1726:	21 f4       	brne	.+8      	; 0x1730 <_ZN3dht11_readSensorEhhh+0xb4>
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	d1 f7       	brne	.-12     	; 0x1720 <_ZN3dht11_readSensorEhhh+0xa4>
    172c:	8c ef       	ldi	r24, 0xFC	; 252
    172e:	55 c0       	rjmp	.+170    	; 0x17da <_ZN3dht11_readSensorEhhh+0x15e>
    1730:	80 e9       	ldi	r24, 0x90	; 144
    1732:	91 e0       	ldi	r25, 0x01	; 1
    1734:	d6 01       	movw	r26, r12
    1736:	2c 91       	ld	r18, X
    1738:	21 23       	and	r18, r17
    173a:	21 f0       	breq	.+8      	; 0x1744 <_ZN3dht11_readSensorEhhh+0xc8>
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	d1 f7       	brne	.-12     	; 0x1734 <_ZN3dht11_readSensorEhhh+0xb8>
    1740:	8b ef       	ldi	r24, 0xFB	; 251
    1742:	4b c0       	rjmp	.+150    	; 0x17da <_ZN3dht11_readSensorEhhh+0x15e>
    1744:	58 e2       	ldi	r21, 0x28	; 40
    1746:	80 e9       	ldi	r24, 0x90	; 144
    1748:	91 e0       	ldi	r25, 0x01	; 1
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	e0 e9       	ldi	r30, 0x90	; 144
    1750:	f1 e0       	ldi	r31, 0x01	; 1
    1752:	00 e0       	ldi	r16, 0x00	; 0
    1754:	60 e0       	ldi	r22, 0x00	; 0
    1756:	31 2c       	mov	r3, r1
    1758:	40 e8       	ldi	r20, 0x80	; 128
    175a:	25 2e       	mov	r2, r21
    175c:	2e 18       	sub	r2, r14
    175e:	70 e9       	ldi	r23, 0x90	; 144
    1760:	87 2e       	mov	r8, r23
    1762:	99 24       	eor	r9, r9
    1764:	93 94       	inc	r9
    1766:	a1 2c       	mov	r10, r1
    1768:	b1 2c       	mov	r11, r1
    176a:	d6 01       	movw	r26, r12
    176c:	7c 91       	ld	r23, X
    176e:	71 23       	and	r23, r17
    1770:	61 f5       	brne	.+88     	; 0x17ca <_ZN3dht11_readSensorEhhh+0x14e>
    1772:	00 23       	and	r16, r16
    1774:	51 f1       	breq	.+84     	; 0x17ca <_ZN3dht11_readSensorEhhh+0x14e>
    1776:	25 16       	cp	r2, r21
    1778:	98 f4       	brcc	.+38     	; 0x17a0 <_ZN3dht11_readSensorEhhh+0x124>
    177a:	8e 17       	cp	r24, r30
    177c:	9f 07       	cpc	r25, r31
    177e:	08 f4       	brcc	.+2      	; 0x1782 <_ZN3dht11_readSensorEhhh+0x106>
    1780:	fc 01       	movw	r30, r24
    1782:	24 01       	movw	r4, r8
    1784:	35 01       	movw	r6, r10
    1786:	4e 1a       	sub	r4, r30
    1788:	5f 0a       	sbc	r5, r31
    178a:	61 08       	sbc	r6, r1
    178c:	71 08       	sbc	r7, r1
    178e:	82 e0       	ldi	r24, 0x02	; 2
    1790:	75 94       	asr	r7
    1792:	67 94       	ror	r6
    1794:	57 94       	ror	r5
    1796:	47 94       	ror	r4
    1798:	8a 95       	dec	r24
    179a:	d1 f7       	brne	.-12     	; 0x1790 <_ZN3dht11_readSensorEhhh+0x114>
    179c:	92 01       	movw	r18, r4
    179e:	07 c0       	rjmp	.+14     	; 0x17ae <_ZN3dht11_readSensorEhhh+0x132>
    17a0:	7f 01       	movw	r14, r30
    17a2:	e2 1a       	sub	r14, r18
    17a4:	f3 0a       	sbc	r15, r19
    17a6:	e8 16       	cp	r14, r24
    17a8:	f9 06       	cpc	r15, r25
    17aa:	08 f0       	brcs	.+2      	; 0x17ae <_ZN3dht11_readSensorEhhh+0x132>
    17ac:	64 2b       	or	r22, r20
    17ae:	46 95       	lsr	r20
    17b0:	49 f4       	brne	.+18     	; 0x17c4 <_ZN3dht11_readSensorEhhh+0x148>
    17b2:	ce 01       	movw	r24, r28
    17b4:	83 0d       	add	r24, r3
    17b6:	91 1d       	adc	r25, r1
    17b8:	dc 01       	movw	r26, r24
    17ba:	18 96       	adiw	r26, 0x08	; 8
    17bc:	6c 93       	st	X, r22
    17be:	33 94       	inc	r3
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	40 e8       	ldi	r20, 0x80	; 128
    17c4:	51 50       	subi	r21, 0x01	; 1
    17c6:	80 e9       	ldi	r24, 0x90	; 144
    17c8:	91 e0       	ldi	r25, 0x01	; 1
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	29 f0       	breq	.+10     	; 0x17d8 <_ZN3dht11_readSensorEhhh+0x15c>
    17ce:	07 2f       	mov	r16, r23
    17d0:	51 11       	cpse	r21, r1
    17d2:	cb cf       	rjmp	.-106    	; 0x176a <_ZN3dht11_readSensorEhhh+0xee>
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	01 c0       	rjmp	.+2      	; 0x17da <_ZN3dht11_readSensorEhhh+0x15e>
    17d8:	8e ef       	ldi	r24, 0xFE	; 254
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	1f 91       	pop	r17
    17e0:	0f 91       	pop	r16
    17e2:	ff 90       	pop	r15
    17e4:	ef 90       	pop	r14
    17e6:	df 90       	pop	r13
    17e8:	cf 90       	pop	r12
    17ea:	bf 90       	pop	r11
    17ec:	af 90       	pop	r10
    17ee:	9f 90       	pop	r9
    17f0:	8f 90       	pop	r8
    17f2:	7f 90       	pop	r7
    17f4:	6f 90       	pop	r6
    17f6:	5f 90       	pop	r5
    17f8:	4f 90       	pop	r4
    17fa:	3f 90       	pop	r3
    17fc:	2f 90       	pop	r2
    17fe:	08 95       	ret

00001800 <_ZN3dht4readEh>:

int8_t dht::read(uint8_t pin)
{
    1800:	cf 92       	push	r12
    1802:	df 92       	push	r13
    1804:	ef 92       	push	r14
    1806:	ff 92       	push	r15
    1808:	0f 93       	push	r16
    180a:	1f 93       	push	r17
    180c:	cf 93       	push	r28
    180e:	df 93       	push	r29
    1810:	ec 01       	movw	r28, r24
    // READ VALUES
    if (_disableIRQ) noInterrupts();
    1812:	8d 85       	ldd	r24, Y+13	; 0x0d
    1814:	88 23       	and	r24, r24
    1816:	09 f0       	breq	.+2      	; 0x181a <_ZN3dht4readEh+0x1a>
    1818:	f8 94       	cli
    int8_t result = _readSensor(pin, DHTLIB_DHT_WAKEUP, DHTLIB_DHT_LEADING_ZEROS);
    181a:	26 e0       	ldi	r18, 0x06	; 6
    181c:	41 e0       	ldi	r20, 0x01	; 1
    181e:	ce 01       	movw	r24, r28
    1820:	0e 94 3e 0b 	call	0x167c	; 0x167c <_ZN3dht11_readSensorEhhh>
    1824:	e8 2e       	mov	r14, r24
    if (_disableIRQ) interrupts();
    1826:	8d 85       	ldd	r24, Y+13	; 0x0d
    1828:	88 23       	and	r24, r24
    182a:	09 f0       	breq	.+2      	; 0x182e <_ZN3dht4readEh+0x2e>
    182c:	78 94       	sei

    // these bits are always zero, masking them reduces errors.
    bits[0] &= 0x03;
    182e:	08 85       	ldd	r16, Y+8	; 0x08
    1830:	03 70       	andi	r16, 0x03	; 3
    1832:	08 87       	std	Y+8, r16	; 0x08
    bits[2] &= 0x83;
    1834:	1a 85       	ldd	r17, Y+10	; 0x0a
    1836:	81 2f       	mov	r24, r17
    1838:	83 78       	andi	r24, 0x83	; 131
    183a:	f8 2e       	mov	r15, r24
    183c:	8a 87       	std	Y+10, r24	; 0x0a

    // CONVERT AND STORE
    humidity = (bits[0]*256 + bits[1]) * 0.1;
    183e:	c9 84       	ldd	r12, Y+9	; 0x09
    1840:	60 2f       	mov	r22, r16
    1842:	70 e0       	ldi	r23, 0x00	; 0
    1844:	76 2f       	mov	r23, r22
    1846:	66 27       	eor	r22, r22
    1848:	6c 0d       	add	r22, r12
    184a:	71 1d       	adc	r23, r1
    184c:	07 2e       	mov	r0, r23
    184e:	00 0c       	add	r0, r0
    1850:	88 0b       	sbc	r24, r24
    1852:	99 0b       	sbc	r25, r25
    1854:	0e 94 18 12 	call	0x2430	; 0x2430 <__floatsisf>
    1858:	2d ec       	ldi	r18, 0xCD	; 205
    185a:	3c ec       	ldi	r19, 0xCC	; 204
    185c:	4c ec       	ldi	r20, 0xCC	; 204
    185e:	5d e3       	ldi	r21, 0x3D	; 61
    1860:	0e 94 c8 12 	call	0x2590	; 0x2590 <__mulsf3>
    1864:	68 83       	st	Y, r22
    1866:	79 83       	std	Y+1, r23	; 0x01
    1868:	8a 83       	std	Y+2, r24	; 0x02
    186a:	9b 83       	std	Y+3, r25	; 0x03
    temperature = ((bits[2] & 0x7F)*256 + bits[3]) * 0.1;
    186c:	db 84       	ldd	r13, Y+11	; 0x0b
    186e:	13 70       	andi	r17, 0x03	; 3
    1870:	61 2f       	mov	r22, r17
    1872:	70 e0       	ldi	r23, 0x00	; 0
    1874:	76 2f       	mov	r23, r22
    1876:	66 27       	eor	r22, r22
    1878:	6d 0d       	add	r22, r13
    187a:	71 1d       	adc	r23, r1
    187c:	07 2e       	mov	r0, r23
    187e:	00 0c       	add	r0, r0
    1880:	88 0b       	sbc	r24, r24
    1882:	99 0b       	sbc	r25, r25
    1884:	0e 94 18 12 	call	0x2430	; 0x2430 <__floatsisf>
    1888:	2d ec       	ldi	r18, 0xCD	; 205
    188a:	3c ec       	ldi	r19, 0xCC	; 204
    188c:	4c ec       	ldi	r20, 0xCC	; 204
    188e:	5d e3       	ldi	r21, 0x3D	; 61
    1890:	0e 94 c8 12 	call	0x2590	; 0x2590 <__mulsf3>
    if (bits[2] & 0x80)  // negative temperature
    1894:	f7 fc       	sbrc	r15, 7
    1896:	05 c0       	rjmp	.+10     	; 0x18a2 <_ZN3dht4readEh+0xa2>
    bits[0] &= 0x03;
    bits[2] &= 0x83;

    // CONVERT AND STORE
    humidity = (bits[0]*256 + bits[1]) * 0.1;
    temperature = ((bits[2] & 0x7F)*256 + bits[3]) * 0.1;
    1898:	6c 83       	std	Y+4, r22	; 0x04
    189a:	7d 83       	std	Y+5, r23	; 0x05
    189c:	8e 83       	std	Y+6, r24	; 0x06
    189e:	9f 83       	std	Y+7, r25	; 0x07
    18a0:	07 c0       	rjmp	.+14     	; 0x18b0 <_ZN3dht4readEh+0xb0>
    if (bits[2] & 0x80)  // negative temperature
    {
        temperature = -temperature;
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	b0 58       	subi	r27, 0x80	; 128
    18a8:	8c 83       	std	Y+4, r24	; 0x04
    18aa:	9d 83       	std	Y+5, r25	; 0x05
    18ac:	ae 83       	std	Y+6, r26	; 0x06
    18ae:	bf 83       	std	Y+7, r27	; 0x07
    }

    // TEST CHECKSUM
    uint8_t sum = bits[0] + bits[1] + bits[2] + bits[3];
    if (bits[4] != sum)
    18b0:	dc 0c       	add	r13, r12
    18b2:	0d 0d       	add	r16, r13
    18b4:	f0 0e       	add	r15, r16
    18b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    18b8:	f8 12       	cpse	r15, r24
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <_ZN3dht4readEh+0xc0>
    {
        return DHTLIB_ERROR_CHECKSUM;
    }
    return result;
    18bc:	8e 2d       	mov	r24, r14
    18be:	01 c0       	rjmp	.+2      	; 0x18c2 <_ZN3dht4readEh+0xc2>

    // TEST CHECKSUM
    uint8_t sum = bits[0] + bits[1] + bits[2] + bits[3];
    if (bits[4] != sum)
    {
        return DHTLIB_ERROR_CHECKSUM;
    18c0:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return result;
}
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	1f 91       	pop	r17
    18c8:	0f 91       	pop	r16
    18ca:	ff 90       	pop	r15
    18cc:	ef 90       	pop	r14
    18ce:	df 90       	pop	r13
    18d0:	cf 90       	pop	r12
    18d2:	08 95       	ret

000018d4 <_ZN7hd447806ioinitEv>:
	{
		buf[i] = pgm_read_byte(charmap++);
	}
	// call the RAM based function to actually send it to the LCD
	return(createChar(location, buf));
}
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	08 95       	ret

000018da <_ZN7hd447806ioreadENS_6iotypeE>:
    18da:	8d ef       	ldi	r24, 0xFD	; 253
    18dc:	9f ef       	ldi	r25, 0xFF	; 255
    18de:	08 95       	ret

000018e0 <_ZN7hd4478014iosetBacklightEh>:
    18e0:	8d ef       	ldi	r24, 0xFD	; 253
    18e2:	9f ef       	ldi	r25, 0xFF	; 255
    18e4:	08 95       	ret

000018e6 <_ZN7hd44780C1Ev>:
    18e6:	cf 93       	push	r28
    18e8:	df 93       	push	r29
    18ea:	ec 01       	movw	r28, r24
    18ec:	1b 82       	std	Y+3, r1	; 0x03
    18ee:	1a 82       	std	Y+2, r1	; 0x02
    18f0:	84 e5       	ldi	r24, 0x54	; 84
    18f2:	92 e0       	ldi	r25, 0x02	; 2
    18f4:	99 83       	std	Y+1, r25	; 0x01
    18f6:	88 83       	st	Y, r24
    18f8:	1f 82       	std	Y+7, r1	; 0x07
    18fa:	18 86       	std	Y+8, r1	; 0x08
    18fc:	80 ed       	ldi	r24, 0xD0	; 208
    18fe:	97 e0       	ldi	r25, 0x07	; 7
    1900:	a0 e0       	ldi	r26, 0x00	; 0
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	88 8b       	std	Y+16, r24	; 0x10
    1906:	99 8b       	std	Y+17, r25	; 0x11
    1908:	aa 8b       	std	Y+18, r26	; 0x12
    190a:	bb 8b       	std	Y+19, r27	; 0x13
    190c:	86 e2       	ldi	r24, 0x26	; 38
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	a0 e0       	ldi	r26, 0x00	; 0
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	8c 8b       	std	Y+20, r24	; 0x14
    1916:	9d 8b       	std	Y+21, r25	; 0x15
    1918:	ae 8b       	std	Y+22, r26	; 0x16
    191a:	bf 8b       	std	Y+23, r27	; 0x17
    191c:	1c 86       	std	Y+12, r1	; 0x0c
    191e:	1d 86       	std	Y+13, r1	; 0x0d
    1920:	1e 86       	std	Y+14, r1	; 0x0e
    1922:	1f 86       	std	Y+15, r1	; 0x0f
    1924:	1b 86       	std	Y+11, r1	; 0x0b
    1926:	0e 94 b8 19 	call	0x3370	; 0x3370 <micros>
    192a:	68 8f       	std	Y+24, r22	; 0x18
    192c:	79 8f       	std	Y+25, r23	; 0x19
    192e:	8a 8f       	std	Y+26, r24	; 0x1a
    1930:	9b 8f       	std	Y+27, r25	; 0x1b
    1932:	1c 8e       	std	Y+28, r1	; 0x1c
    1934:	1d 8e       	std	Y+29, r1	; 0x1d
    1936:	1e 8e       	std	Y+30, r1	; 0x1e
    1938:	1f 8e       	std	Y+31, r1	; 0x1f
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	08 95       	ret

00001940 <_ZN7hd447809backlightEv>:
    1940:	dc 01       	movw	r26, r24
    1942:	ed 91       	ld	r30, X+
    1944:	fc 91       	ld	r31, X
    1946:	06 84       	ldd	r0, Z+14	; 0x0e
    1948:	f7 85       	ldd	r31, Z+15	; 0x0f
    194a:	e0 2d       	mov	r30, r0
    194c:	6f ef       	ldi	r22, 0xFF	; 255
    194e:	09 94       	ijmp

00001950 <_ZN7hd4478011noBacklightEv>:
    1950:	dc 01       	movw	r26, r24
    1952:	ed 91       	ld	r30, X+
    1954:	fc 91       	ld	r31, X
    1956:	06 84       	ldd	r0, Z+14	; 0x0e
    1958:	f7 85       	ldd	r31, Z+15	; 0x0f
    195a:	e0 2d       	mov	r30, r0
    195c:	60 e0       	ldi	r22, 0x00	; 0
    195e:	09 94       	ijmp

00001960 <_ZN7hd447807commandEh>:
    1960:	8f 92       	push	r8
    1962:	9f 92       	push	r9
    1964:	af 92       	push	r10
    1966:	bf 92       	push	r11
    1968:	ef 92       	push	r14
    196a:	ff 92       	push	r15
    196c:	1f 93       	push	r17
    196e:	cf 93       	push	r28
    1970:	df 93       	push	r29
    1972:	ec 01       	movw	r28, r24
    1974:	16 2f       	mov	r17, r22
    1976:	e8 81       	ld	r30, Y
    1978:	f9 81       	ldd	r31, Y+1	; 0x01
    197a:	04 84       	ldd	r0, Z+12	; 0x0c
    197c:	f5 85       	ldd	r31, Z+13	; 0x0d
    197e:	e0 2d       	mov	r30, r0
    1980:	46 2f       	mov	r20, r22
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	09 95       	icall
    1986:	7c 01       	movw	r14, r24
    1988:	11 50       	subi	r17, 0x01	; 1
    198a:	12 30       	cpi	r17, 0x02	; 2
    198c:	38 f4       	brcc	.+14     	; 0x199c <_ZN7hd447807commandEh+0x3c>
    198e:	19 86       	std	Y+9, r1	; 0x09
    1990:	1a 86       	std	Y+10, r1	; 0x0a
    1992:	88 88       	ldd	r8, Y+16	; 0x10
    1994:	99 88       	ldd	r9, Y+17	; 0x11
    1996:	aa 88       	ldd	r10, Y+18	; 0x12
    1998:	bb 88       	ldd	r11, Y+19	; 0x13
    199a:	04 c0       	rjmp	.+8      	; 0x19a4 <_ZN7hd447807commandEh+0x44>
    199c:	8c 88       	ldd	r8, Y+20	; 0x14
    199e:	9d 88       	ldd	r9, Y+21	; 0x15
    19a0:	ae 88       	ldd	r10, Y+22	; 0x16
    19a2:	bf 88       	ldd	r11, Y+23	; 0x17
    19a4:	0e 94 b8 19 	call	0x3370	; 0x3370 <micros>
    19a8:	68 8f       	std	Y+24, r22	; 0x18
    19aa:	79 8f       	std	Y+25, r23	; 0x19
    19ac:	8a 8f       	std	Y+26, r24	; 0x1a
    19ae:	9b 8f       	std	Y+27, r25	; 0x1b
    19b0:	8c 8e       	std	Y+28, r8	; 0x1c
    19b2:	9d 8e       	std	Y+29, r9	; 0x1d
    19b4:	ae 8e       	std	Y+30, r10	; 0x1e
    19b6:	bf 8e       	std	Y+31, r11	; 0x1f
    19b8:	c7 01       	movw	r24, r14
    19ba:	df 91       	pop	r29
    19bc:	cf 91       	pop	r28
    19be:	1f 91       	pop	r17
    19c0:	ff 90       	pop	r15
    19c2:	ef 90       	pop	r14
    19c4:	bf 90       	pop	r11
    19c6:	af 90       	pop	r10
    19c8:	9f 90       	pop	r9
    19ca:	8f 90       	pop	r8
    19cc:	08 95       	ret

000019ce <_ZN7hd447805clearEv>:
    19ce:	61 e0       	ldi	r22, 0x01	; 1
    19d0:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <_ZN7hd447807commandEh>

000019d4 <_ZN7hd447804homeEv>:
    19d4:	62 e0       	ldi	r22, 0x02	; 2
    19d6:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <_ZN7hd447807commandEh>

000019da <_ZN7hd447809setCursorEhh>:
    19da:	fc 01       	movw	r30, r24
    19dc:	80 85       	ldd	r24, Z+8	; 0x08
    19de:	48 17       	cp	r20, r24
    19e0:	10 f0       	brcs	.+4      	; 0x19e6 <_ZN7hd447809setCursorEhh+0xc>
    19e2:	4f ef       	ldi	r20, 0xFF	; 255
    19e4:	48 0f       	add	r20, r24
    19e6:	93 85       	ldd	r25, Z+11	; 0x0b
    19e8:	99 23       	and	r25, r25
    19ea:	59 f0       	breq	.+22     	; 0x1a02 <_ZN7hd447809setCursorEhh+0x28>
    19ec:	97 81       	ldd	r25, Z+7	; 0x07
    19ee:	69 17       	cp	r22, r25
    19f0:	30 f0       	brcs	.+12     	; 0x19fe <_ZN7hd447809setCursorEhh+0x24>
    19f2:	69 1b       	sub	r22, r25
    19f4:	4f 5f       	subi	r20, 0xFF	; 255
    19f6:	48 17       	cp	r20, r24
    19f8:	d0 f3       	brcs	.-12     	; 0x19ee <_ZN7hd447809setCursorEhh+0x14>
    19fa:	40 e0       	ldi	r20, 0x00	; 0
    19fc:	f8 cf       	rjmp	.-16     	; 0x19ee <_ZN7hd447809setCursorEhh+0x14>
    19fe:	61 87       	std	Z+9, r22	; 0x09
    1a00:	42 87       	std	Z+10, r20	; 0x0a
    1a02:	df 01       	movw	r26, r30
    1a04:	a4 0f       	add	r26, r20
    1a06:	b1 1d       	adc	r27, r1
    1a08:	1c 96       	adiw	r26, 0x0c	; 12
    1a0a:	8c 91       	ld	r24, X
    1a0c:	68 0f       	add	r22, r24
    1a0e:	60 68       	ori	r22, 0x80	; 128
    1a10:	cf 01       	movw	r24, r30
    1a12:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <_ZN7hd447807commandEh>

00001a16 <_ZN7hd447807displayEv>:
    1a16:	fc 01       	movw	r30, r24
    1a18:	65 81       	ldd	r22, Z+5	; 0x05
    1a1a:	26 2f       	mov	r18, r22
    1a1c:	24 60       	ori	r18, 0x04	; 4
    1a1e:	25 83       	std	Z+5, r18	; 0x05
    1a20:	6c 60       	ori	r22, 0x0C	; 12
    1a22:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <_ZN7hd447807commandEh>

00001a26 <_ZN7hd447805beginEhhh>:
    1a26:	0f 93       	push	r16
    1a28:	1f 93       	push	r17
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	ec 01       	movw	r28, r24
    1a30:	02 2f       	mov	r16, r18
    1a32:	14 2f       	mov	r17, r20
    1a34:	45 30       	cpi	r20, 0x05	; 5
    1a36:	08 f0       	brcs	.+2      	; 0x1a3a <_ZN7hd447805beginEhhh+0x14>
    1a38:	14 e0       	ldi	r17, 0x04	; 4
    1a3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a3c:	81 11       	cpse	r24, r1
    1a3e:	09 c0       	rjmp	.+18     	; 0x1a52 <_ZN7hd447805beginEhhh+0x2c>
    1a40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a42:	81 11       	cpse	r24, r1
    1a44:	06 c0       	rjmp	.+12     	; 0x1a52 <_ZN7hd447805beginEhhh+0x2c>
    1a46:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a48:	81 11       	cpse	r24, r1
    1a4a:	03 c0       	rjmp	.+6      	; 0x1a52 <_ZN7hd447805beginEhhh+0x2c>
    1a4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a4e:	88 23       	and	r24, r24
    1a50:	29 f0       	breq	.+10     	; 0x1a5c <_ZN7hd447805beginEhhh+0x36>
    1a52:	8f 81       	ldd	r24, Y+7	; 0x07
    1a54:	88 23       	and	r24, r24
    1a56:	59 f0       	breq	.+22     	; 0x1a6e <_ZN7hd447805beginEhhh+0x48>
    1a58:	86 17       	cp	r24, r22
    1a5a:	49 f0       	breq	.+18     	; 0x1a6e <_ZN7hd447805beginEhhh+0x48>
    1a5c:	1c 86       	std	Y+12, r1	; 0x0c
    1a5e:	80 e4       	ldi	r24, 0x40	; 64
    1a60:	8d 87       	std	Y+13, r24	; 0x0d
    1a62:	6e 87       	std	Y+14, r22	; 0x0e
    1a64:	86 2f       	mov	r24, r22
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	80 5c       	subi	r24, 0xC0	; 192
    1a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6c:	8f 87       	std	Y+15, r24	; 0x0f
    1a6e:	18 87       	std	Y+8, r17	; 0x08
    1a70:	6f 83       	std	Y+7, r22	; 0x07
    1a72:	64 e6       	ldi	r22, 0x64	; 100
    1a74:	70 e0       	ldi	r23, 0x00	; 0
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	0e 94 dd 19 	call	0x33ba	; 0x33ba <delay>
    1a7e:	1c 82       	std	Y+4, r1	; 0x04
    1a80:	e8 81       	ld	r30, Y
    1a82:	f9 81       	ldd	r31, Y+1	; 0x01
    1a84:	00 84       	ldd	r0, Z+8	; 0x08
    1a86:	f1 85       	ldd	r31, Z+9	; 0x09
    1a88:	e0 2d       	mov	r30, r0
    1a8a:	ce 01       	movw	r24, r28
    1a8c:	09 95       	icall
    1a8e:	00 97       	sbiw	r24, 0x00	; 0
    1a90:	09 f0       	breq	.+2      	; 0x1a94 <_ZN7hd447805beginEhhh+0x6e>
    1a92:	5e c0       	rjmp	.+188    	; 0x1b50 <_ZN7hd447805beginEhhh+0x12a>
    1a94:	88 85       	ldd	r24, Y+8	; 0x08
    1a96:	82 30       	cpi	r24, 0x02	; 2
    1a98:	18 f0       	brcs	.+6      	; 0x1aa0 <_ZN7hd447805beginEhhh+0x7a>
    1a9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9c:	88 60       	ori	r24, 0x08	; 8
    1a9e:	8c 83       	std	Y+4, r24	; 0x04
    1aa0:	00 23       	and	r16, r16
    1aa2:	29 f0       	breq	.+10     	; 0x1aae <_ZN7hd447805beginEhhh+0x88>
    1aa4:	11 30       	cpi	r17, 0x01	; 1
    1aa6:	19 f4       	brne	.+6      	; 0x1aae <_ZN7hd447805beginEhhh+0x88>
    1aa8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aaa:	84 60       	ori	r24, 0x04	; 4
    1aac:	8c 83       	std	Y+4, r24	; 0x04
    1aae:	e8 81       	ld	r30, Y
    1ab0:	f9 81       	ldd	r31, Y+1	; 0x01
    1ab2:	04 84       	ldd	r0, Z+12	; 0x0c
    1ab4:	f5 85       	ldd	r31, Z+13	; 0x0d
    1ab6:	e0 2d       	mov	r30, r0
    1ab8:	40 e3       	ldi	r20, 0x30	; 48
    1aba:	62 e0       	ldi	r22, 0x02	; 2
    1abc:	ce 01       	movw	r24, r28
    1abe:	09 95       	icall
    1ac0:	65 e0       	ldi	r22, 0x05	; 5
    1ac2:	70 e0       	ldi	r23, 0x00	; 0
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	0e 94 dd 19 	call	0x33ba	; 0x33ba <delay>
    1acc:	e8 81       	ld	r30, Y
    1ace:	f9 81       	ldd	r31, Y+1	; 0x01
    1ad0:	04 84       	ldd	r0, Z+12	; 0x0c
    1ad2:	f5 85       	ldd	r31, Z+13	; 0x0d
    1ad4:	e0 2d       	mov	r30, r0
    1ad6:	40 e3       	ldi	r20, 0x30	; 48
    1ad8:	62 e0       	ldi	r22, 0x02	; 2
    1ada:	ce 01       	movw	r24, r28
    1adc:	09 95       	icall
    1ade:	61 e0       	ldi	r22, 0x01	; 1
    1ae0:	70 e0       	ldi	r23, 0x00	; 0
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	0e 94 dd 19 	call	0x33ba	; 0x33ba <delay>
    1aea:	e8 81       	ld	r30, Y
    1aec:	f9 81       	ldd	r31, Y+1	; 0x01
    1aee:	04 84       	ldd	r0, Z+12	; 0x0c
    1af0:	f5 85       	ldd	r31, Z+13	; 0x0d
    1af2:	e0 2d       	mov	r30, r0
    1af4:	40 e3       	ldi	r20, 0x30	; 48
    1af6:	62 e0       	ldi	r22, 0x02	; 2
    1af8:	ce 01       	movw	r24, r28
    1afa:	09 95       	icall
    1afc:	61 e0       	ldi	r22, 0x01	; 1
    1afe:	70 e0       	ldi	r23, 0x00	; 0
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	0e 94 dd 19 	call	0x33ba	; 0x33ba <delay>
    1b08:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0a:	84 fd       	sbrc	r24, 4
    1b0c:	09 c0       	rjmp	.+18     	; 0x1b20 <_ZN7hd447805beginEhhh+0xfa>
    1b0e:	e8 81       	ld	r30, Y
    1b10:	f9 81       	ldd	r31, Y+1	; 0x01
    1b12:	04 84       	ldd	r0, Z+12	; 0x0c
    1b14:	f5 85       	ldd	r31, Z+13	; 0x0d
    1b16:	e0 2d       	mov	r30, r0
    1b18:	40 e2       	ldi	r20, 0x20	; 32
    1b1a:	62 e0       	ldi	r22, 0x02	; 2
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	09 95       	icall
    1b20:	6c 81       	ldd	r22, Y+4	; 0x04
    1b22:	60 62       	ori	r22, 0x20	; 32
    1b24:	ce 01       	movw	r24, r28
    1b26:	0e 94 b0 0c 	call	0x1960	; 0x1960 <_ZN7hd447807commandEh>
    1b2a:	84 e0       	ldi	r24, 0x04	; 4
    1b2c:	8d 83       	std	Y+5, r24	; 0x05
    1b2e:	ce 01       	movw	r24, r28
    1b30:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <_ZN7hd447807displayEv>
    1b34:	ce 01       	movw	r24, r28
    1b36:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <_ZN7hd447805clearEv>
    1b3a:	82 e0       	ldi	r24, 0x02	; 2
    1b3c:	8e 83       	std	Y+6, r24	; 0x06
    1b3e:	66 e0       	ldi	r22, 0x06	; 6
    1b40:	ce 01       	movw	r24, r28
    1b42:	0e 94 b0 0c 	call	0x1960	; 0x1960 <_ZN7hd447807commandEh>
    1b46:	8c 01       	movw	r16, r24
    1b48:	ce 01       	movw	r24, r28
    1b4a:	0e 94 a0 0c 	call	0x1940	; 0x1940 <_ZN7hd447809backlightEv>
    1b4e:	c8 01       	movw	r24, r16
    1b50:	df 91       	pop	r29
    1b52:	cf 91       	pop	r28
    1b54:	1f 91       	pop	r17
    1b56:	0f 91       	pop	r16
    1b58:	08 95       	ret

00001b5a <_ZN7hd447808noCursorEv>:
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	65 81       	ldd	r22, Z+5	; 0x05
    1b5e:	6d 7f       	andi	r22, 0xFD	; 253
    1b60:	65 83       	std	Z+5, r22	; 0x05
    1b62:	68 60       	ori	r22, 0x08	; 8
    1b64:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <_ZN7hd447807commandEh>

00001b68 <_ZN7hd447807noBlinkEv>:
    1b68:	fc 01       	movw	r30, r24
    1b6a:	65 81       	ldd	r22, Z+5	; 0x05
    1b6c:	6e 7f       	andi	r22, 0xFE	; 254
    1b6e:	65 83       	std	Z+5, r22	; 0x05
    1b70:	68 60       	ori	r22, 0x08	; 8
    1b72:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <_ZN7hd447807commandEh>

00001b76 <_ZN7hd447806_writeEh>:
    1b76:	cf 92       	push	r12
    1b78:	df 92       	push	r13
    1b7a:	ef 92       	push	r14
    1b7c:	ff 92       	push	r15
    1b7e:	0f 93       	push	r16
    1b80:	1f 93       	push	r17
    1b82:	cf 93       	push	r28
    1b84:	df 93       	push	r29
    1b86:	ec 01       	movw	r28, r24
    1b88:	46 2f       	mov	r20, r22
    1b8a:	e8 81       	ld	r30, Y
    1b8c:	f9 81       	ldd	r31, Y+1	; 0x01
    1b8e:	04 84       	ldd	r0, Z+12	; 0x0c
    1b90:	f5 85       	ldd	r31, Z+13	; 0x0d
    1b92:	e0 2d       	mov	r30, r0
    1b94:	61 e0       	ldi	r22, 0x01	; 1
    1b96:	09 95       	icall
    1b98:	8c 01       	movw	r16, r24
    1b9a:	cc 88       	ldd	r12, Y+20	; 0x14
    1b9c:	dd 88       	ldd	r13, Y+21	; 0x15
    1b9e:	ee 88       	ldd	r14, Y+22	; 0x16
    1ba0:	ff 88       	ldd	r15, Y+23	; 0x17
    1ba2:	0e 94 b8 19 	call	0x3370	; 0x3370 <micros>
    1ba6:	68 8f       	std	Y+24, r22	; 0x18
    1ba8:	79 8f       	std	Y+25, r23	; 0x19
    1baa:	8a 8f       	std	Y+26, r24	; 0x1a
    1bac:	9b 8f       	std	Y+27, r25	; 0x1b
    1bae:	cc 8e       	std	Y+28, r12	; 0x1c
    1bb0:	dd 8e       	std	Y+29, r13	; 0x1d
    1bb2:	ee 8e       	std	Y+30, r14	; 0x1e
    1bb4:	ff 8e       	std	Y+31, r15	; 0x1f
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	01 2b       	or	r16, r17
    1bbc:	11 f0       	breq	.+4      	; 0x1bc2 <_ZN7hd447806_writeEh+0x4c>
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	1f 91       	pop	r17
    1bc8:	0f 91       	pop	r16
    1bca:	ff 90       	pop	r15
    1bcc:	ef 90       	pop	r14
    1bce:	df 90       	pop	r13
    1bd0:	cf 90       	pop	r12
    1bd2:	08 95       	ret

00001bd4 <_ZN7hd447805writeEh>:

// write() - process data character byte to lcd
// returns number of bytes successfully written to device
// i.e. 1 if success or 0 if no character was processed (error)
size_t hd44780::write(uint8_t value)
{
    1bd4:	0f 93       	push	r16
    1bd6:	1f 93       	push	r17
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	ec 01       	movw	r28, r24
size_t rval;

	rval = _write(value);
    1bde:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <_ZN7hd447806_writeEh>
    1be2:	8c 01       	movw	r16, r24
	if(_wraplines)
    1be4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1be6:	88 23       	and	r24, r24
    1be8:	99 f0       	breq	.+38     	; 0x1c10 <_ZN7hd447805writeEh+0x3c>
	{
		// currently only works for left to right mode
		if(++_curcol >= _cols)
    1bea:	89 85       	ldd	r24, Y+9	; 0x09
    1bec:	8f 5f       	subi	r24, 0xFF	; 255
    1bee:	89 87       	std	Y+9, r24	; 0x09
    1bf0:	9f 81       	ldd	r25, Y+7	; 0x07
    1bf2:	89 17       	cp	r24, r25
    1bf4:	68 f0       	brcs	.+26     	; 0x1c10 <_ZN7hd447805writeEh+0x3c>
		{
			_curcol = 0;
    1bf6:	19 86       	std	Y+9, r1	; 0x09
			_currow++;
    1bf8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bfa:	8f 5f       	subi	r24, 0xFF	; 255
    1bfc:	8a 87       	std	Y+10, r24	; 0x0a
			if(_currow >= _rows)
    1bfe:	98 85       	ldd	r25, Y+8	; 0x08
    1c00:	89 17       	cp	r24, r25
    1c02:	08 f0       	brcs	.+2      	; 0x1c06 <_ZN7hd447805writeEh+0x32>
				_currow = 0;
    1c04:	1a 86       	std	Y+10, r1	; 0x0a
			setCursor(_curcol, _currow);
    1c06:	4a 85       	ldd	r20, Y+10	; 0x0a
    1c08:	60 e0       	ldi	r22, 0x00	; 0
    1c0a:	ce 01       	movw	r24, r28
    1c0c:	0e 94 ed 0c 	call	0x19da	; 0x19da <_ZN7hd447809setCursorEhh>
		}
	}
	return (rval);
}
    1c10:	c8 01       	movw	r24, r16
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	1f 91       	pop	r17
    1c18:	0f 91       	pop	r16
    1c1a:	08 95       	ret

00001c1c <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1c1c:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <twi_state>
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <twi_sendStop>
    1c26:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <twi_inRepStart>
    1c2a:	61 e0       	ldi	r22, 0x01	; 1
    1c2c:	82 e0       	ldi	r24, 0x02	; 2
    1c2e:	0e 94 24 1b 	call	0x3648	; 0x3648 <digitalWrite>
    1c32:	61 e0       	ldi	r22, 0x01	; 1
    1c34:	83 e0       	ldi	r24, 0x03	; 3
    1c36:	0e 94 24 1b 	call	0x3648	; 0x3648 <digitalWrite>
    1c3a:	e9 eb       	ldi	r30, 0xB9	; 185
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	8e 7f       	andi	r24, 0xFE	; 254
    1c42:	80 83       	st	Z, r24
    1c44:	80 81       	ld	r24, Z
    1c46:	8d 7f       	andi	r24, 0xFD	; 253
    1c48:	80 83       	st	Z, r24
    1c4a:	88 e4       	ldi	r24, 0x48	; 72
    1c4c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1c50:	85 e4       	ldi	r24, 0x45	; 69
    1c52:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1c56:	08 95       	ret

00001c58 <twi_readFrom>:
    1c58:	41 32       	cpi	r20, 0x21	; 33
    1c5a:	08 f0       	brcs	.+2      	; 0x1c5e <twi_readFrom+0x6>
    1c5c:	43 c0       	rjmp	.+134    	; 0x1ce4 <twi_readFrom+0x8c>
    1c5e:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <twi_state>
    1c62:	91 11       	cpse	r25, r1
    1c64:	fc cf       	rjmp	.-8      	; 0x1c5e <twi_readFrom+0x6>
    1c66:	91 e0       	ldi	r25, 0x01	; 1
    1c68:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <twi_state>
    1c6c:	20 93 3a 04 	sts	0x043A, r18	; 0x80043a <twi_sendStop>
    1c70:	2f ef       	ldi	r18, 0xFF	; 255
    1c72:	20 93 cf 03 	sts	0x03CF, r18	; 0x8003cf <twi_error>
    1c76:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <twi_masterBufferIndex>
    1c7a:	24 0f       	add	r18, r20
    1c7c:	20 93 13 04 	sts	0x0413, r18	; 0x800413 <twi_masterBufferLength>
    1c80:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <twi_slarw>
    1c84:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <twi_slarw>
    1c88:	88 0f       	add	r24, r24
    1c8a:	89 2b       	or	r24, r25
    1c8c:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <twi_slarw>
    1c90:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <twi_inRepStart>
    1c94:	81 30       	cpi	r24, 0x01	; 1
    1c96:	61 f4       	brne	.+24     	; 0x1cb0 <twi_readFrom+0x58>
    1c98:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <twi_inRepStart>
    1c9c:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <twi_slarw>
    1ca0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1ca4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1ca8:	83 fd       	sbrc	r24, 3
    1caa:	f8 cf       	rjmp	.-16     	; 0x1c9c <twi_readFrom+0x44>
    1cac:	85 ec       	ldi	r24, 0xC5	; 197
    1cae:	01 c0       	rjmp	.+2      	; 0x1cb2 <twi_readFrom+0x5a>
    1cb0:	85 ee       	ldi	r24, 0xE5	; 229
    1cb2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1cb6:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <twi_state>
    1cba:	81 30       	cpi	r24, 0x01	; 1
    1cbc:	e1 f3       	breq	.-8      	; 0x1cb6 <twi_readFrom+0x5e>
    1cbe:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <twi_masterBufferIndex>
    1cc2:	84 17       	cp	r24, r20
    1cc4:	10 f4       	brcc	.+4      	; 0x1cca <twi_readFrom+0x72>
    1cc6:	40 91 14 04 	lds	r20, 0x0414	; 0x800414 <twi_masterBufferIndex>
    1cca:	a5 e1       	ldi	r26, 0x15	; 21
    1ccc:	b4 e0       	ldi	r27, 0x04	; 4
    1cce:	96 2f       	mov	r25, r22
    1cd0:	fb 01       	movw	r30, r22
    1cd2:	8e 2f       	mov	r24, r30
    1cd4:	89 1b       	sub	r24, r25
    1cd6:	84 17       	cp	r24, r20
    1cd8:	18 f4       	brcc	.+6      	; 0x1ce0 <twi_readFrom+0x88>
    1cda:	8d 91       	ld	r24, X+
    1cdc:	81 93       	st	Z+, r24
    1cde:	f9 cf       	rjmp	.-14     	; 0x1cd2 <twi_readFrom+0x7a>
    1ce0:	84 2f       	mov	r24, r20
    1ce2:	08 95       	ret
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	08 95       	ret

00001ce8 <twi_writeTo>:
    1ce8:	0f 93       	push	r16
    1cea:	41 32       	cpi	r20, 0x21	; 33
    1cec:	08 f0       	brcs	.+2      	; 0x1cf0 <twi_writeTo+0x8>
    1cee:	4a c0       	rjmp	.+148    	; 0x1d84 <twi_writeTo+0x9c>
    1cf0:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <twi_state>
    1cf4:	91 11       	cpse	r25, r1
    1cf6:	fc cf       	rjmp	.-8      	; 0x1cf0 <twi_writeTo+0x8>
    1cf8:	32 e0       	ldi	r19, 0x02	; 2
    1cfa:	30 93 3c 04 	sts	0x043C, r19	; 0x80043c <twi_state>
    1cfe:	00 93 3a 04 	sts	0x043A, r16	; 0x80043a <twi_sendStop>
    1d02:	3f ef       	ldi	r19, 0xFF	; 255
    1d04:	30 93 cf 03 	sts	0x03CF, r19	; 0x8003cf <twi_error>
    1d08:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <twi_masterBufferIndex>
    1d0c:	40 93 13 04 	sts	0x0413, r20	; 0x800413 <twi_masterBufferLength>
    1d10:	56 2f       	mov	r21, r22
    1d12:	a5 e1       	ldi	r26, 0x15	; 21
    1d14:	b4 e0       	ldi	r27, 0x04	; 4
    1d16:	fb 01       	movw	r30, r22
    1d18:	3e 2f       	mov	r19, r30
    1d1a:	35 1b       	sub	r19, r21
    1d1c:	34 17       	cp	r19, r20
    1d1e:	18 f4       	brcc	.+6      	; 0x1d26 <twi_writeTo+0x3e>
    1d20:	31 91       	ld	r19, Z+
    1d22:	3d 93       	st	X+, r19
    1d24:	f9 cf       	rjmp	.-14     	; 0x1d18 <twi_writeTo+0x30>
    1d26:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <twi_slarw>
    1d2a:	30 91 3b 04 	lds	r19, 0x043B	; 0x80043b <twi_slarw>
    1d2e:	88 0f       	add	r24, r24
    1d30:	83 2b       	or	r24, r19
    1d32:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <twi_slarw>
    1d36:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <twi_inRepStart>
    1d3a:	81 30       	cpi	r24, 0x01	; 1
    1d3c:	61 f4       	brne	.+24     	; 0x1d56 <twi_writeTo+0x6e>
    1d3e:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <twi_inRepStart>
    1d42:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <twi_slarw>
    1d46:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1d4a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1d4e:	83 fd       	sbrc	r24, 3
    1d50:	f8 cf       	rjmp	.-16     	; 0x1d42 <twi_writeTo+0x5a>
    1d52:	85 ec       	ldi	r24, 0xC5	; 197
    1d54:	01 c0       	rjmp	.+2      	; 0x1d58 <twi_writeTo+0x70>
    1d56:	85 ee       	ldi	r24, 0xE5	; 229
    1d58:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1d5c:	22 23       	and	r18, r18
    1d5e:	21 f0       	breq	.+8      	; 0x1d68 <twi_writeTo+0x80>
    1d60:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <twi_state>
    1d64:	82 30       	cpi	r24, 0x02	; 2
    1d66:	d1 f3       	breq	.-12     	; 0x1d5c <twi_writeTo+0x74>
    1d68:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <twi_error>
    1d6c:	8f 3f       	cpi	r24, 0xFF	; 255
    1d6e:	79 f0       	breq	.+30     	; 0x1d8e <twi_writeTo+0xa6>
    1d70:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <twi_error>
    1d74:	80 32       	cpi	r24, 0x20	; 32
    1d76:	41 f0       	breq	.+16     	; 0x1d88 <twi_writeTo+0xa0>
    1d78:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <twi_error>
    1d7c:	80 33       	cpi	r24, 0x30	; 48
    1d7e:	31 f0       	breq	.+12     	; 0x1d8c <twi_writeTo+0xa4>
    1d80:	94 e0       	ldi	r25, 0x04	; 4
    1d82:	05 c0       	rjmp	.+10     	; 0x1d8e <twi_writeTo+0xa6>
    1d84:	91 e0       	ldi	r25, 0x01	; 1
    1d86:	03 c0       	rjmp	.+6      	; 0x1d8e <twi_writeTo+0xa6>
    1d88:	92 e0       	ldi	r25, 0x02	; 2
    1d8a:	01 c0       	rjmp	.+2      	; 0x1d8e <twi_writeTo+0xa6>
    1d8c:	93 e0       	ldi	r25, 0x03	; 3
    1d8e:	89 2f       	mov	r24, r25
    1d90:	0f 91       	pop	r16
    1d92:	08 95       	ret

00001d94 <twi_transmit>:
    1d94:	40 91 f1 03 	lds	r20, 0x03F1	; 0x8003f1 <twi_txBufferLength>
    1d98:	26 2f       	mov	r18, r22
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	24 0f       	add	r18, r20
    1d9e:	31 1d       	adc	r19, r1
    1da0:	21 32       	cpi	r18, 0x21	; 33
    1da2:	31 05       	cpc	r19, r1
    1da4:	dc f4       	brge	.+54     	; 0x1ddc <twi_transmit+0x48>
    1da6:	20 91 3c 04 	lds	r18, 0x043C	; 0x80043c <twi_state>
    1daa:	24 30       	cpi	r18, 0x04	; 4
    1dac:	c9 f4       	brne	.+50     	; 0x1de0 <twi_transmit+0x4c>
    1dae:	fc 01       	movw	r30, r24
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	86 17       	cp	r24, r22
    1db6:	58 f4       	brcc	.+22     	; 0x1dce <twi_transmit+0x3a>
    1db8:	30 91 f1 03 	lds	r19, 0x03F1	; 0x8003f1 <twi_txBufferLength>
    1dbc:	21 91       	ld	r18, Z+
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	ad 50       	subi	r26, 0x0D	; 13
    1dc2:	bc 4f       	sbci	r27, 0xFC	; 252
    1dc4:	a3 0f       	add	r26, r19
    1dc6:	b1 1d       	adc	r27, r1
    1dc8:	2c 93       	st	X, r18
    1dca:	01 96       	adiw	r24, 0x01	; 1
    1dcc:	f3 cf       	rjmp	.-26     	; 0x1db4 <twi_transmit+0x20>
    1dce:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <twi_txBufferLength>
    1dd2:	68 0f       	add	r22, r24
    1dd4:	60 93 f1 03 	sts	0x03F1, r22	; 0x8003f1 <twi_txBufferLength>
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	08 95       	ret
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	08 95       	ret
    1de0:	82 e0       	ldi	r24, 0x02	; 2
    1de2:	08 95       	ret

00001de4 <twi_attachSlaveRxEvent>:
    1de4:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <twi_onSlaveReceive+0x1>
    1de8:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <twi_onSlaveReceive>
    1dec:	08 95       	ret

00001dee <twi_attachSlaveTxEvent>:
    1dee:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <twi_onSlaveTransmit+0x1>
    1df2:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <twi_onSlaveTransmit>
    1df6:	08 95       	ret

00001df8 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1df8:	85 ed       	ldi	r24, 0xD5	; 213
    1dfa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1dfe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1e02:	84 fd       	sbrc	r24, 4
    1e04:	fc cf       	rjmp	.-8      	; 0x1dfe <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1e06:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <twi_state>
    1e0a:	08 95       	ret

00001e0c <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1e0c:	85 ec       	ldi	r24, 0xC5	; 197
    1e0e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    1e12:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <twi_state>
    1e16:	08 95       	ret

00001e18 <__vector_36>:
}

ISR(TWI_vect)
{
    1e18:	1f 92       	push	r1
    1e1a:	0f 92       	push	r0
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	0f 92       	push	r0
    1e20:	11 24       	eor	r1, r1
    1e22:	2f 93       	push	r18
    1e24:	3f 93       	push	r19
    1e26:	4f 93       	push	r20
    1e28:	5f 93       	push	r21
    1e2a:	6f 93       	push	r22
    1e2c:	7f 93       	push	r23
    1e2e:	8f 93       	push	r24
    1e30:	9f 93       	push	r25
    1e32:	af 93       	push	r26
    1e34:	bf 93       	push	r27
    1e36:	ef 93       	push	r30
    1e38:	ff 93       	push	r31
  switch(TW_STATUS){
    1e3a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1e3e:	88 7f       	andi	r24, 0xF8	; 248
    1e40:	80 36       	cpi	r24, 0x60	; 96
    1e42:	09 f4       	brne	.+2      	; 0x1e46 <__vector_36+0x2e>
    1e44:	9e c0       	rjmp	.+316    	; 0x1f82 <__vector_36+0x16a>
    1e46:	78 f5       	brcc	.+94     	; 0x1ea6 <__vector_36+0x8e>
    1e48:	88 32       	cpi	r24, 0x28	; 40
    1e4a:	09 f4       	brne	.+2      	; 0x1e4e <__vector_36+0x36>
    1e4c:	5d c0       	rjmp	.+186    	; 0x1f08 <__vector_36+0xf0>
    1e4e:	90 f4       	brcc	.+36     	; 0x1e74 <__vector_36+0x5c>
    1e50:	80 31       	cpi	r24, 0x10	; 16
    1e52:	09 f4       	brne	.+2      	; 0x1e56 <__vector_36+0x3e>
    1e54:	56 c0       	rjmp	.+172    	; 0x1f02 <__vector_36+0xea>
    1e56:	38 f4       	brcc	.+14     	; 0x1e66 <__vector_36+0x4e>
    1e58:	88 23       	and	r24, r24
    1e5a:	09 f4       	brne	.+2      	; 0x1e5e <__vector_36+0x46>
    1e5c:	f5 c0       	rjmp	.+490    	; 0x2048 <__vector_36+0x230>
    1e5e:	88 30       	cpi	r24, 0x08	; 8
    1e60:	09 f4       	brne	.+2      	; 0x1e64 <__vector_36+0x4c>
    1e62:	4f c0       	rjmp	.+158    	; 0x1f02 <__vector_36+0xea>
    1e64:	f5 c0       	rjmp	.+490    	; 0x2050 <__vector_36+0x238>
    1e66:	88 31       	cpi	r24, 0x18	; 24
    1e68:	09 f4       	brne	.+2      	; 0x1e6c <__vector_36+0x54>
    1e6a:	4e c0       	rjmp	.+156    	; 0x1f08 <__vector_36+0xf0>
    1e6c:	80 32       	cpi	r24, 0x20	; 32
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <__vector_36+0x5a>
    1e70:	5f c0       	rjmp	.+190    	; 0x1f30 <__vector_36+0x118>
    1e72:	ee c0       	rjmp	.+476    	; 0x2050 <__vector_36+0x238>
    1e74:	80 34       	cpi	r24, 0x40	; 64
    1e76:	09 f4       	brne	.+2      	; 0x1e7a <__vector_36+0x62>
    1e78:	6a c0       	rjmp	.+212    	; 0x1f4e <__vector_36+0x136>
    1e7a:	58 f4       	brcc	.+22     	; 0x1e92 <__vector_36+0x7a>
    1e7c:	80 33       	cpi	r24, 0x30	; 48
    1e7e:	09 f4       	brne	.+2      	; 0x1e82 <__vector_36+0x6a>
    1e80:	57 c0       	rjmp	.+174    	; 0x1f30 <__vector_36+0x118>
    1e82:	88 33       	cpi	r24, 0x38	; 56
    1e84:	09 f0       	breq	.+2      	; 0x1e88 <__vector_36+0x70>
    1e86:	e4 c0       	rjmp	.+456    	; 0x2050 <__vector_36+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1e88:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <twi_error>
      twi_releaseBus();
    1e8c:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <twi_releaseBus>
      break;
    1e90:	df c0       	rjmp	.+446    	; 0x2050 <__vector_36+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1e92:	80 35       	cpi	r24, 0x50	; 80
    1e94:	09 f4       	brne	.+2      	; 0x1e98 <__vector_36+0x80>
    1e96:	4f c0       	rjmp	.+158    	; 0x1f36 <__vector_36+0x11e>
    1e98:	88 35       	cpi	r24, 0x58	; 88
    1e9a:	09 f4       	brne	.+2      	; 0x1e9e <__vector_36+0x86>
    1e9c:	5d c0       	rjmp	.+186    	; 0x1f58 <__vector_36+0x140>
    1e9e:	88 34       	cpi	r24, 0x48	; 72
    1ea0:	09 f0       	breq	.+2      	; 0x1ea4 <__vector_36+0x8c>
    1ea2:	d6 c0       	rjmp	.+428    	; 0x2050 <__vector_36+0x238>
    1ea4:	d3 c0       	rjmp	.+422    	; 0x204c <__vector_36+0x234>
    1ea6:	88 39       	cpi	r24, 0x98	; 152
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <__vector_36+0x94>
    1eaa:	c4 c0       	rjmp	.+392    	; 0x2034 <__vector_36+0x21c>
    1eac:	a8 f4       	brcc	.+42     	; 0x1ed8 <__vector_36+0xc0>
    1eae:	88 37       	cpi	r24, 0x78	; 120
    1eb0:	09 f4       	brne	.+2      	; 0x1eb4 <__vector_36+0x9c>
    1eb2:	67 c0       	rjmp	.+206    	; 0x1f82 <__vector_36+0x16a>
    1eb4:	38 f4       	brcc	.+14     	; 0x1ec4 <__vector_36+0xac>
    1eb6:	88 36       	cpi	r24, 0x68	; 104
    1eb8:	09 f4       	brne	.+2      	; 0x1ebc <__vector_36+0xa4>
    1eba:	63 c0       	rjmp	.+198    	; 0x1f82 <__vector_36+0x16a>
    1ebc:	80 37       	cpi	r24, 0x70	; 112
    1ebe:	09 f4       	brne	.+2      	; 0x1ec2 <__vector_36+0xaa>
    1ec0:	60 c0       	rjmp	.+192    	; 0x1f82 <__vector_36+0x16a>
    1ec2:	c6 c0       	rjmp	.+396    	; 0x2050 <__vector_36+0x238>
    1ec4:	88 38       	cpi	r24, 0x88	; 136
    1ec6:	09 f4       	brne	.+2      	; 0x1eca <__vector_36+0xb2>
    1ec8:	b5 c0       	rjmp	.+362    	; 0x2034 <__vector_36+0x21c>
    1eca:	80 39       	cpi	r24, 0x90	; 144
    1ecc:	09 f4       	brne	.+2      	; 0x1ed0 <__vector_36+0xb8>
    1ece:	5f c0       	rjmp	.+190    	; 0x1f8e <__vector_36+0x176>
    1ed0:	80 38       	cpi	r24, 0x80	; 128
    1ed2:	09 f0       	breq	.+2      	; 0x1ed6 <__vector_36+0xbe>
    1ed4:	bd c0       	rjmp	.+378    	; 0x2050 <__vector_36+0x238>
    1ed6:	5b c0       	rjmp	.+182    	; 0x1f8e <__vector_36+0x176>
    1ed8:	80 3b       	cpi	r24, 0xB0	; 176
    1eda:	09 f4       	brne	.+2      	; 0x1ede <__vector_36+0xc6>
    1edc:	83 c0       	rjmp	.+262    	; 0x1fe4 <__vector_36+0x1cc>
    1ede:	38 f4       	brcc	.+14     	; 0x1eee <__vector_36+0xd6>
    1ee0:	80 3a       	cpi	r24, 0xA0	; 160
    1ee2:	09 f4       	brne	.+2      	; 0x1ee6 <__vector_36+0xce>
    1ee4:	66 c0       	rjmp	.+204    	; 0x1fb2 <__vector_36+0x19a>
    1ee6:	88 3a       	cpi	r24, 0xA8	; 168
    1ee8:	09 f4       	brne	.+2      	; 0x1eec <__vector_36+0xd4>
    1eea:	7c c0       	rjmp	.+248    	; 0x1fe4 <__vector_36+0x1cc>
    1eec:	b1 c0       	rjmp	.+354    	; 0x2050 <__vector_36+0x238>
    1eee:	80 3c       	cpi	r24, 0xC0	; 192
    1ef0:	09 f4       	brne	.+2      	; 0x1ef4 <__vector_36+0xdc>
    1ef2:	a4 c0       	rjmp	.+328    	; 0x203c <__vector_36+0x224>
    1ef4:	88 3c       	cpi	r24, 0xC8	; 200
    1ef6:	09 f4       	brne	.+2      	; 0x1efa <__vector_36+0xe2>
    1ef8:	a1 c0       	rjmp	.+322    	; 0x203c <__vector_36+0x224>
    1efa:	88 3b       	cpi	r24, 0xB8	; 184
    1efc:	09 f4       	brne	.+2      	; 0x1f00 <__vector_36+0xe8>
    1efe:	87 c0       	rjmp	.+270    	; 0x200e <__vector_36+0x1f6>
    1f00:	a7 c0       	rjmp	.+334    	; 0x2050 <__vector_36+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1f02:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <twi_slarw>
    1f06:	10 c0       	rjmp	.+32     	; 0x1f28 <__vector_36+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1f08:	90 91 14 04 	lds	r25, 0x0414	; 0x800414 <twi_masterBufferIndex>
    1f0c:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <twi_masterBufferLength>
    1f10:	98 17       	cp	r25, r24
    1f12:	70 f5       	brcc	.+92     	; 0x1f70 <__vector_36+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1f14:	e0 91 14 04 	lds	r30, 0x0414	; 0x800414 <twi_masterBufferIndex>
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	8e 0f       	add	r24, r30
    1f1c:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <twi_masterBufferIndex>
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	eb 5e       	subi	r30, 0xEB	; 235
    1f24:	fb 4f       	sbci	r31, 0xFB	; 251
    1f26:	80 81       	ld	r24, Z
    1f28:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1f2c:	85 ec       	ldi	r24, 0xC5	; 197
    1f2e:	83 c0       	rjmp	.+262    	; 0x2036 <__vector_36+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1f30:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <twi_error>
    1f34:	8b c0       	rjmp	.+278    	; 0x204c <__vector_36+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1f36:	e0 91 14 04 	lds	r30, 0x0414	; 0x800414 <twi_masterBufferIndex>
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	8e 0f       	add	r24, r30
    1f3e:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <twi_masterBufferIndex>
    1f42:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	eb 5e       	subi	r30, 0xEB	; 235
    1f4a:	fb 4f       	sbci	r31, 0xFB	; 251
    1f4c:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1f4e:	90 91 14 04 	lds	r25, 0x0414	; 0x800414 <twi_masterBufferIndex>
    1f52:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <twi_masterBufferLength>
    1f56:	6b c0       	rjmp	.+214    	; 0x202e <__vector_36+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1f58:	e0 91 14 04 	lds	r30, 0x0414	; 0x800414 <twi_masterBufferIndex>
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	8e 0f       	add	r24, r30
    1f60:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <twi_masterBufferIndex>
    1f64:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	eb 5e       	subi	r30, 0xEB	; 235
    1f6c:	fb 4f       	sbci	r31, 0xFB	; 251
    1f6e:	80 83       	st	Z, r24
	if (twi_sendStop)
    1f70:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <twi_sendStop>
    1f74:	81 11       	cpse	r24, r1
    1f76:	6a c0       	rjmp	.+212    	; 0x204c <__vector_36+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1f7e:	84 ea       	ldi	r24, 0xA4	; 164
    1f80:	5e c0       	rjmp	.+188    	; 0x203e <__vector_36+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1f82:	83 e0       	ldi	r24, 0x03	; 3
    1f84:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1f88:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <twi_rxBufferIndex>
    1f8c:	cf cf       	rjmp	.-98     	; 0x1f2c <__vector_36+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1f8e:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <twi_rxBufferIndex>
    1f92:	80 32       	cpi	r24, 0x20	; 32
    1f94:	08 f0       	brcs	.+2      	; 0x1f98 <__vector_36+0x180>
    1f96:	4e c0       	rjmp	.+156    	; 0x2034 <__vector_36+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1f98:	e0 91 d0 03 	lds	r30, 0x03D0	; 0x8003d0 <twi_rxBufferIndex>
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	8e 0f       	add	r24, r30
    1fa0:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <twi_rxBufferIndex>
    1fa4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	ef 52       	subi	r30, 0x2F	; 47
    1fac:	fc 4f       	sbci	r31, 0xFC	; 252
    1fae:	80 83       	st	Z, r24
    1fb0:	bd cf       	rjmp	.-134    	; 0x1f2c <__vector_36+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1fb2:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1fb6:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <twi_rxBufferIndex>
    1fba:	80 32       	cpi	r24, 0x20	; 32
    1fbc:	30 f4       	brcc	.+12     	; 0x1fca <__vector_36+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1fbe:	e0 91 d0 03 	lds	r30, 0x03D0	; 0x8003d0 <twi_rxBufferIndex>
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	ef 52       	subi	r30, 0x2F	; 47
    1fc6:	fc 4f       	sbci	r31, 0xFC	; 252
    1fc8:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1fca:	60 91 d0 03 	lds	r22, 0x03D0	; 0x8003d0 <twi_rxBufferIndex>
    1fce:	70 e0       	ldi	r23, 0x00	; 0
    1fd0:	e0 91 35 04 	lds	r30, 0x0435	; 0x800435 <twi_onSlaveReceive>
    1fd4:	f0 91 36 04 	lds	r31, 0x0436	; 0x800436 <twi_onSlaveReceive+0x1>
    1fd8:	81 ed       	ldi	r24, 0xD1	; 209
    1fda:	93 e0       	ldi	r25, 0x03	; 3
    1fdc:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1fde:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <twi_rxBufferIndex>
      break;
    1fe2:	36 c0       	rjmp	.+108    	; 0x2050 <__vector_36+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1fe4:	84 e0       	ldi	r24, 0x04	; 4
    1fe6:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1fea:	10 92 f2 03 	sts	0x03F2, r1	; 0x8003f2 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1fee:	10 92 f1 03 	sts	0x03F1, r1	; 0x8003f1 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1ff2:	e0 91 37 04 	lds	r30, 0x0437	; 0x800437 <twi_onSlaveTransmit>
    1ff6:	f0 91 38 04 	lds	r31, 0x0438	; 0x800438 <twi_onSlaveTransmit+0x1>
    1ffa:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1ffc:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <twi_txBufferLength>
    2000:	81 11       	cpse	r24, r1
    2002:	05 c0       	rjmp	.+10     	; 0x200e <__vector_36+0x1f6>
        twi_txBufferLength = 1;
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    200a:	10 92 f3 03 	sts	0x03F3, r1	; 0x8003f3 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    200e:	e0 91 f2 03 	lds	r30, 0x03F2	; 0x8003f2 <twi_txBufferIndex>
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	8e 0f       	add	r24, r30
    2016:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <twi_txBufferIndex>
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	ed 50       	subi	r30, 0x0D	; 13
    201e:	fc 4f       	sbci	r31, 0xFC	; 252
    2020:	80 81       	ld	r24, Z
    2022:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2026:	90 91 f2 03 	lds	r25, 0x03F2	; 0x8003f2 <twi_txBufferIndex>
    202a:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <twi_txBufferLength>
    202e:	98 17       	cp	r25, r24
    2030:	08 f4       	brcc	.+2      	; 0x2034 <__vector_36+0x21c>
    2032:	7c cf       	rjmp	.-264    	; 0x1f2c <__vector_36+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2034:	85 e8       	ldi	r24, 0x85	; 133
    2036:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    203a:	0a c0       	rjmp	.+20     	; 0x2050 <__vector_36+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    203c:	85 ec       	ldi	r24, 0xC5	; 197
    203e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2042:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <twi_state>
      break;
    2046:	04 c0       	rjmp	.+8      	; 0x2050 <__vector_36+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2048:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <twi_error>
      twi_stop();
    204c:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <twi_stop>
      break;
  }
}
    2050:	ff 91       	pop	r31
    2052:	ef 91       	pop	r30
    2054:	bf 91       	pop	r27
    2056:	af 91       	pop	r26
    2058:	9f 91       	pop	r25
    205a:	8f 91       	pop	r24
    205c:	7f 91       	pop	r23
    205e:	6f 91       	pop	r22
    2060:	5f 91       	pop	r21
    2062:	4f 91       	pop	r20
    2064:	3f 91       	pop	r19
    2066:	2f 91       	pop	r18
    2068:	0f 90       	pop	r0
    206a:	0f be       	out	0x3f, r0	; 63
    206c:	0f 90       	pop	r0
    206e:	1f 90       	pop	r1
    2070:	18 95       	reti

00002072 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2072:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <_ZN7TwoWire14rxBufferLengthE>
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	20 91 72 04 	lds	r18, 0x0472	; 0x800472 <_ZN7TwoWire13rxBufferIndexE>
    207c:	82 1b       	sub	r24, r18
    207e:	91 09       	sbc	r25, r1
    2080:	08 95       	ret

00002082 <_ZN7TwoWire4readEv>:
    2082:	90 91 72 04 	lds	r25, 0x0472	; 0x800472 <_ZN7TwoWire13rxBufferIndexE>
    2086:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <_ZN7TwoWire14rxBufferLengthE>
    208a:	98 17       	cp	r25, r24
    208c:	50 f4       	brcc	.+20     	; 0x20a2 <_ZN7TwoWire4readEv+0x20>
    208e:	e9 2f       	mov	r30, r25
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	ed 58       	subi	r30, 0x8D	; 141
    2094:	fb 4f       	sbci	r31, 0xFB	; 251
    2096:	20 81       	ld	r18, Z
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	9f 5f       	subi	r25, 0xFF	; 255
    209c:	90 93 72 04 	sts	0x0472, r25	; 0x800472 <_ZN7TwoWire13rxBufferIndexE>
    20a0:	02 c0       	rjmp	.+4      	; 0x20a6 <_ZN7TwoWire4readEv+0x24>
    20a2:	2f ef       	ldi	r18, 0xFF	; 255
    20a4:	3f ef       	ldi	r19, 0xFF	; 255
    20a6:	c9 01       	movw	r24, r18
    20a8:	08 95       	ret

000020aa <_ZN7TwoWire4peekEv>:
    20aa:	e0 91 72 04 	lds	r30, 0x0472	; 0x800472 <_ZN7TwoWire13rxBufferIndexE>
    20ae:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <_ZN7TwoWire14rxBufferLengthE>
    20b2:	e8 17       	cp	r30, r24
    20b4:	30 f4       	brcc	.+12     	; 0x20c2 <_ZN7TwoWire4peekEv+0x18>
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	ed 58       	subi	r30, 0x8D	; 141
    20ba:	fb 4f       	sbci	r31, 0xFB	; 251
    20bc:	80 81       	ld	r24, Z
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	08 95       	ret
    20c2:	8f ef       	ldi	r24, 0xFF	; 255
    20c4:	9f ef       	ldi	r25, 0xFF	; 255
    20c6:	08 95       	ret

000020c8 <_ZN7TwoWire5flushEv>:
    20c8:	08 95       	ret

000020ca <_ZN7TwoWire16onReceiveServiceEPhi>:
    20ca:	cf 93       	push	r28
    20cc:	df 93       	push	r29
    20ce:	ec 01       	movw	r28, r24
    20d0:	e0 91 49 04 	lds	r30, 0x0449	; 0x800449 <_ZN7TwoWire14user_onReceiveE>
    20d4:	f0 91 4a 04 	lds	r31, 0x044A	; 0x80044a <_ZN7TwoWire14user_onReceiveE+0x1>
    20d8:	30 97       	sbiw	r30, 0x00	; 0
    20da:	f1 f0       	breq	.+60     	; 0x2118 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    20dc:	90 91 72 04 	lds	r25, 0x0472	; 0x800472 <_ZN7TwoWire13rxBufferIndexE>
    20e0:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <_ZN7TwoWire14rxBufferLengthE>
    20e4:	98 17       	cp	r25, r24
    20e6:	c0 f0       	brcs	.+48     	; 0x2118 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	29 2f       	mov	r18, r25
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	26 17       	cp	r18, r22
    20f0:	37 07       	cpc	r19, r23
    20f2:	54 f4       	brge	.+20     	; 0x2108 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    20f4:	de 01       	movw	r26, r28
    20f6:	a2 0f       	add	r26, r18
    20f8:	b3 1f       	adc	r27, r19
    20fa:	4c 91       	ld	r20, X
    20fc:	d9 01       	movw	r26, r18
    20fe:	ad 58       	subi	r26, 0x8D	; 141
    2100:	bb 4f       	sbci	r27, 0xFB	; 251
    2102:	4c 93       	st	X, r20
    2104:	9f 5f       	subi	r25, 0xFF	; 255
    2106:	f1 cf       	rjmp	.-30     	; 0x20ea <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2108:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <_ZN7TwoWire13rxBufferIndexE>
    210c:	60 93 71 04 	sts	0x0471, r22	; 0x800471 <_ZN7TwoWire14rxBufferLengthE>
    2110:	cb 01       	movw	r24, r22
    2112:	df 91       	pop	r29
    2114:	cf 91       	pop	r28
    2116:	09 94       	ijmp
    2118:	df 91       	pop	r29
    211a:	cf 91       	pop	r28
    211c:	08 95       	ret

0000211e <_ZN7TwoWire16onRequestServiceEv>:
    211e:	e0 91 4b 04 	lds	r30, 0x044B	; 0x80044b <_ZN7TwoWire14user_onRequestE>
    2122:	f0 91 4c 04 	lds	r31, 0x044C	; 0x80044c <_ZN7TwoWire14user_onRequestE+0x1>
    2126:	30 97       	sbiw	r30, 0x00	; 0
    2128:	29 f0       	breq	.+10     	; 0x2134 <_ZN7TwoWire16onRequestServiceEv+0x16>
    212a:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <_ZN7TwoWire13txBufferIndexE>
    212e:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <_ZN7TwoWire14txBufferLengthE>
    2132:	09 94       	ijmp
    2134:	08 95       	ret

00002136 <_ZN7TwoWire5writeEPKhj>:
    2136:	cf 92       	push	r12
    2138:	df 92       	push	r13
    213a:	ef 92       	push	r14
    213c:	ff 92       	push	r15
    213e:	0f 93       	push	r16
    2140:	1f 93       	push	r17
    2142:	cf 93       	push	r28
    2144:	df 93       	push	r29
    2146:	7c 01       	movw	r14, r24
    2148:	cb 01       	movw	r24, r22
    214a:	8a 01       	movw	r16, r20
    214c:	20 91 4d 04 	lds	r18, 0x044D	; 0x80044d <_ZN7TwoWire12transmittingE>
    2150:	22 23       	and	r18, r18
    2152:	89 f0       	breq	.+34     	; 0x2176 <_ZN7TwoWire5writeEPKhj+0x40>
    2154:	eb 01       	movw	r28, r22
    2156:	6b 01       	movw	r12, r22
    2158:	c4 0e       	add	r12, r20
    215a:	d5 1e       	adc	r13, r21
    215c:	cc 15       	cp	r28, r12
    215e:	dd 05       	cpc	r29, r13
    2160:	69 f0       	breq	.+26     	; 0x217c <_ZN7TwoWire5writeEPKhj+0x46>
    2162:	69 91       	ld	r22, Y+
    2164:	d7 01       	movw	r26, r14
    2166:	ed 91       	ld	r30, X+
    2168:	fc 91       	ld	r31, X
    216a:	01 90       	ld	r0, Z+
    216c:	f0 81       	ld	r31, Z
    216e:	e0 2d       	mov	r30, r0
    2170:	c7 01       	movw	r24, r14
    2172:	09 95       	icall
    2174:	f3 cf       	rjmp	.-26     	; 0x215c <_ZN7TwoWire5writeEPKhj+0x26>
    2176:	64 2f       	mov	r22, r20
    2178:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <twi_transmit>
    217c:	c8 01       	movw	r24, r16
    217e:	df 91       	pop	r29
    2180:	cf 91       	pop	r28
    2182:	1f 91       	pop	r17
    2184:	0f 91       	pop	r16
    2186:	ff 90       	pop	r15
    2188:	ef 90       	pop	r14
    218a:	df 90       	pop	r13
    218c:	cf 90       	pop	r12
    218e:	08 95       	ret

00002190 <_ZN7TwoWire5writeEh>:
    2190:	cf 93       	push	r28
    2192:	df 93       	push	r29
    2194:	1f 92       	push	r1
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
    219a:	69 83       	std	Y+1, r22	; 0x01
    219c:	20 91 4d 04 	lds	r18, 0x044D	; 0x80044d <_ZN7TwoWire12transmittingE>
    21a0:	22 23       	and	r18, r18
    21a2:	d1 f0       	breq	.+52     	; 0x21d8 <_ZN7TwoWire5writeEh+0x48>
    21a4:	20 91 4e 04 	lds	r18, 0x044E	; 0x80044e <_ZN7TwoWire14txBufferLengthE>
    21a8:	20 32       	cpi	r18, 0x20	; 32
    21aa:	40 f0       	brcs	.+16     	; 0x21bc <_ZN7TwoWire5writeEh+0x2c>
    21ac:	21 e0       	ldi	r18, 0x01	; 1
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	fc 01       	movw	r30, r24
    21b2:	33 83       	std	Z+3, r19	; 0x03
    21b4:	22 83       	std	Z+2, r18	; 0x02
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	15 c0       	rjmp	.+42     	; 0x21e6 <_ZN7TwoWire5writeEh+0x56>
    21bc:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <_ZN7TwoWire13txBufferIndexE>
    21c0:	e8 2f       	mov	r30, r24
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	e0 5b       	subi	r30, 0xB0	; 176
    21c6:	fb 4f       	sbci	r31, 0xFB	; 251
    21c8:	99 81       	ldd	r25, Y+1	; 0x01
    21ca:	90 83       	st	Z, r25
    21cc:	8f 5f       	subi	r24, 0xFF	; 255
    21ce:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <_ZN7TwoWire13txBufferIndexE>
    21d2:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <_ZN7TwoWire14txBufferLengthE>
    21d6:	05 c0       	rjmp	.+10     	; 0x21e2 <_ZN7TwoWire5writeEh+0x52>
    21d8:	61 e0       	ldi	r22, 0x01	; 1
    21da:	ce 01       	movw	r24, r28
    21dc:	01 96       	adiw	r24, 0x01	; 1
    21de:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <twi_transmit>
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	0f 90       	pop	r0
    21e8:	df 91       	pop	r29
    21ea:	cf 91       	pop	r28
    21ec:	08 95       	ret

000021ee <_ZN7TwoWireC1Ev>:
    21ee:	fc 01       	movw	r30, r24
    21f0:	13 82       	std	Z+3, r1	; 0x03
    21f2:	12 82       	std	Z+2, r1	; 0x02
    21f4:	88 ee       	ldi	r24, 0xE8	; 232
    21f6:	93 e0       	ldi	r25, 0x03	; 3
    21f8:	a0 e0       	ldi	r26, 0x00	; 0
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	84 83       	std	Z+4, r24	; 0x04
    21fe:	95 83       	std	Z+5, r25	; 0x05
    2200:	a6 83       	std	Z+6, r26	; 0x06
    2202:	b7 83       	std	Z+7, r27	; 0x07
    2204:	8a e6       	ldi	r24, 0x6A	; 106
    2206:	92 e0       	ldi	r25, 0x02	; 2
    2208:	91 83       	std	Z+1, r25	; 0x01
    220a:	80 83       	st	Z, r24
    220c:	08 95       	ret

0000220e <_ZN7TwoWire5beginEv>:
    220e:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <_ZN7TwoWire13rxBufferIndexE>
    2212:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <_ZN7TwoWire14rxBufferLengthE>
    2216:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <_ZN7TwoWire13txBufferIndexE>
    221a:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <_ZN7TwoWire14txBufferLengthE>
    221e:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <twi_init>
    2222:	8f e8       	ldi	r24, 0x8F	; 143
    2224:	90 e1       	ldi	r25, 0x10	; 16
    2226:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <twi_attachSlaveTxEvent>
    222a:	85 e6       	ldi	r24, 0x65	; 101
    222c:	90 e1       	ldi	r25, 0x10	; 16
    222e:	0c 94 f2 0e 	jmp	0x1de4	; 0x1de4 <twi_attachSlaveRxEvent>

00002232 <_ZN7TwoWire17beginTransmissionEh>:
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <_ZN7TwoWire12transmittingE>
    2238:	60 93 70 04 	sts	0x0470, r22	; 0x800470 <_ZN7TwoWire9txAddressE>
    223c:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <_ZN7TwoWire13txBufferIndexE>
    2240:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <_ZN7TwoWire14txBufferLengthE>
    2244:	08 95       	ret

00002246 <_ZN7TwoWire15endTransmissionEh>:
    2246:	0f 93       	push	r16
    2248:	06 2f       	mov	r16, r22
    224a:	21 e0       	ldi	r18, 0x01	; 1
    224c:	40 91 4e 04 	lds	r20, 0x044E	; 0x80044e <_ZN7TwoWire14txBufferLengthE>
    2250:	60 e5       	ldi	r22, 0x50	; 80
    2252:	74 e0       	ldi	r23, 0x04	; 4
    2254:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <_ZN7TwoWire9txAddressE>
    2258:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <twi_writeTo>
    225c:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <_ZN7TwoWire13txBufferIndexE>
    2260:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <_ZN7TwoWire14txBufferLengthE>
    2264:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <_ZN7TwoWire12transmittingE>
    2268:	0f 91       	pop	r16
    226a:	08 95       	ret

0000226c <_ZN7TwoWire11requestFromEhhmhh>:
    226c:	4f 92       	push	r4
    226e:	5f 92       	push	r5
    2270:	6f 92       	push	r6
    2272:	7f 92       	push	r7
    2274:	af 92       	push	r10
    2276:	bf 92       	push	r11
    2278:	cf 92       	push	r12
    227a:	ef 92       	push	r14
    227c:	ff 92       	push	r15
    227e:	0f 93       	push	r16
    2280:	1f 93       	push	r17
    2282:	cf 93       	push	r28
    2284:	df 93       	push	r29
    2286:	5c 01       	movw	r10, r24
    2288:	f6 2e       	mov	r15, r22
    228a:	d4 2f       	mov	r29, r20
    228c:	28 01       	movw	r4, r16
    228e:	39 01       	movw	r6, r18
    2290:	ee 20       	and	r14, r14
    2292:	21 f1       	breq	.+72     	; 0x22dc <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2294:	0e 94 19 11 	call	0x2232	; 0x2232 <_ZN7TwoWire17beginTransmissionEh>
    2298:	ce 2d       	mov	r28, r14
    229a:	c4 30       	cpi	r28, 0x04	; 4
    229c:	08 f0       	brcs	.+2      	; 0x22a0 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    229e:	c3 e0       	ldi	r28, 0x03	; 3
    22a0:	c1 50       	subi	r28, 0x01	; 1
    22a2:	c0 f0       	brcs	.+48     	; 0x22d4 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    22a4:	28 e0       	ldi	r18, 0x08	; 8
    22a6:	c2 9f       	mul	r28, r18
    22a8:	c0 01       	movw	r24, r0
    22aa:	11 24       	eor	r1, r1
    22ac:	a3 01       	movw	r20, r6
    22ae:	92 01       	movw	r18, r4
    22b0:	04 c0       	rjmp	.+8      	; 0x22ba <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    22b2:	56 95       	lsr	r21
    22b4:	47 95       	ror	r20
    22b6:	37 95       	ror	r19
    22b8:	27 95       	ror	r18
    22ba:	8a 95       	dec	r24
    22bc:	d2 f7       	brpl	.-12     	; 0x22b2 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    22be:	ca 01       	movw	r24, r20
    22c0:	b9 01       	movw	r22, r18
    22c2:	d5 01       	movw	r26, r10
    22c4:	ed 91       	ld	r30, X+
    22c6:	fc 91       	ld	r31, X
    22c8:	01 90       	ld	r0, Z+
    22ca:	f0 81       	ld	r31, Z
    22cc:	e0 2d       	mov	r30, r0
    22ce:	c5 01       	movw	r24, r10
    22d0:	09 95       	icall
    22d2:	e6 cf       	rjmp	.-52     	; 0x22a0 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    22d4:	60 e0       	ldi	r22, 0x00	; 0
    22d6:	c5 01       	movw	r24, r10
    22d8:	0e 94 23 11 	call	0x2246	; 0x2246 <_ZN7TwoWire15endTransmissionEh>
    22dc:	4d 2f       	mov	r20, r29
    22de:	d1 32       	cpi	r29, 0x21	; 33
    22e0:	08 f0       	brcs	.+2      	; 0x22e4 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    22e2:	40 e2       	ldi	r20, 0x20	; 32
    22e4:	2c 2d       	mov	r18, r12
    22e6:	63 e7       	ldi	r22, 0x73	; 115
    22e8:	74 e0       	ldi	r23, 0x04	; 4
    22ea:	8f 2d       	mov	r24, r15
    22ec:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <twi_readFrom>
    22f0:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <_ZN7TwoWire13rxBufferIndexE>
    22f4:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <_ZN7TwoWire14rxBufferLengthE>
    22f8:	df 91       	pop	r29
    22fa:	cf 91       	pop	r28
    22fc:	1f 91       	pop	r17
    22fe:	0f 91       	pop	r16
    2300:	ff 90       	pop	r15
    2302:	ef 90       	pop	r14
    2304:	cf 90       	pop	r12
    2306:	bf 90       	pop	r11
    2308:	af 90       	pop	r10
    230a:	7f 90       	pop	r7
    230c:	6f 90       	pop	r6
    230e:	5f 90       	pop	r5
    2310:	4f 90       	pop	r4
    2312:	08 95       	ret

00002314 <_ZN7TwoWire11requestFromEhhh>:
    2314:	cf 92       	push	r12
    2316:	ef 92       	push	r14
    2318:	0f 93       	push	r16
    231a:	1f 93       	push	r17
    231c:	c2 2e       	mov	r12, r18
    231e:	e1 2c       	mov	r14, r1
    2320:	00 e0       	ldi	r16, 0x00	; 0
    2322:	10 e0       	ldi	r17, 0x00	; 0
    2324:	98 01       	movw	r18, r16
    2326:	0e 94 36 11 	call	0x226c	; 0x226c <_ZN7TwoWire11requestFromEhhmhh>
    232a:	1f 91       	pop	r17
    232c:	0f 91       	pop	r16
    232e:	ef 90       	pop	r14
    2330:	cf 90       	pop	r12
    2332:	08 95       	ret

00002334 <_ZN7TwoWire11requestFromEii>:
    2334:	21 e0       	ldi	r18, 0x01	; 1
    2336:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <_ZN7TwoWire11requestFromEhhh>

0000233a <_ZN7TwoWire15endTransmissionEv>:
    233a:	61 e0       	ldi	r22, 0x01	; 1
    233c:	0c 94 23 11 	jmp	0x2246	; 0x2246 <_ZN7TwoWire15endTransmissionEh>

00002340 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2340:	8d e3       	ldi	r24, 0x3D	; 61
    2342:	94 e0       	ldi	r25, 0x04	; 4
    2344:	0c 94 f7 10 	jmp	0x21ee	; 0x21ee <_ZN7TwoWireC1Ev>

00002348 <__subsf3>:
    2348:	50 58       	subi	r21, 0x80	; 128

0000234a <__addsf3>:
    234a:	bb 27       	eor	r27, r27
    234c:	aa 27       	eor	r26, r26
    234e:	0e 94 bc 11 	call	0x2378	; 0x2378 <__addsf3x>
    2352:	0c 94 8e 12 	jmp	0x251c	; 0x251c <__fp_round>
    2356:	0e 94 80 12 	call	0x2500	; 0x2500 <__fp_pscA>
    235a:	38 f0       	brcs	.+14     	; 0x236a <__addsf3+0x20>
    235c:	0e 94 87 12 	call	0x250e	; 0x250e <__fp_pscB>
    2360:	20 f0       	brcs	.+8      	; 0x236a <__addsf3+0x20>
    2362:	39 f4       	brne	.+14     	; 0x2372 <__addsf3+0x28>
    2364:	9f 3f       	cpi	r25, 0xFF	; 255
    2366:	19 f4       	brne	.+6      	; 0x236e <__addsf3+0x24>
    2368:	26 f4       	brtc	.+8      	; 0x2372 <__addsf3+0x28>
    236a:	0c 94 7d 12 	jmp	0x24fa	; 0x24fa <__fp_nan>
    236e:	0e f4       	brtc	.+2      	; 0x2372 <__addsf3+0x28>
    2370:	e0 95       	com	r30
    2372:	e7 fb       	bst	r30, 7
    2374:	0c 94 77 12 	jmp	0x24ee	; 0x24ee <__fp_inf>

00002378 <__addsf3x>:
    2378:	e9 2f       	mov	r30, r25
    237a:	0e 94 9f 12 	call	0x253e	; 0x253e <__fp_split3>
    237e:	58 f3       	brcs	.-42     	; 0x2356 <__addsf3+0xc>
    2380:	ba 17       	cp	r27, r26
    2382:	62 07       	cpc	r22, r18
    2384:	73 07       	cpc	r23, r19
    2386:	84 07       	cpc	r24, r20
    2388:	95 07       	cpc	r25, r21
    238a:	20 f0       	brcs	.+8      	; 0x2394 <__addsf3x+0x1c>
    238c:	79 f4       	brne	.+30     	; 0x23ac <__addsf3x+0x34>
    238e:	a6 f5       	brtc	.+104    	; 0x23f8 <__addsf3x+0x80>
    2390:	0c 94 c1 12 	jmp	0x2582	; 0x2582 <__fp_zero>
    2394:	0e f4       	brtc	.+2      	; 0x2398 <__addsf3x+0x20>
    2396:	e0 95       	com	r30
    2398:	0b 2e       	mov	r0, r27
    239a:	ba 2f       	mov	r27, r26
    239c:	a0 2d       	mov	r26, r0
    239e:	0b 01       	movw	r0, r22
    23a0:	b9 01       	movw	r22, r18
    23a2:	90 01       	movw	r18, r0
    23a4:	0c 01       	movw	r0, r24
    23a6:	ca 01       	movw	r24, r20
    23a8:	a0 01       	movw	r20, r0
    23aa:	11 24       	eor	r1, r1
    23ac:	ff 27       	eor	r31, r31
    23ae:	59 1b       	sub	r21, r25
    23b0:	99 f0       	breq	.+38     	; 0x23d8 <__addsf3x+0x60>
    23b2:	59 3f       	cpi	r21, 0xF9	; 249
    23b4:	50 f4       	brcc	.+20     	; 0x23ca <__addsf3x+0x52>
    23b6:	50 3e       	cpi	r21, 0xE0	; 224
    23b8:	68 f1       	brcs	.+90     	; 0x2414 <__addsf3x+0x9c>
    23ba:	1a 16       	cp	r1, r26
    23bc:	f0 40       	sbci	r31, 0x00	; 0
    23be:	a2 2f       	mov	r26, r18
    23c0:	23 2f       	mov	r18, r19
    23c2:	34 2f       	mov	r19, r20
    23c4:	44 27       	eor	r20, r20
    23c6:	58 5f       	subi	r21, 0xF8	; 248
    23c8:	f3 cf       	rjmp	.-26     	; 0x23b0 <__addsf3x+0x38>
    23ca:	46 95       	lsr	r20
    23cc:	37 95       	ror	r19
    23ce:	27 95       	ror	r18
    23d0:	a7 95       	ror	r26
    23d2:	f0 40       	sbci	r31, 0x00	; 0
    23d4:	53 95       	inc	r21
    23d6:	c9 f7       	brne	.-14     	; 0x23ca <__addsf3x+0x52>
    23d8:	7e f4       	brtc	.+30     	; 0x23f8 <__addsf3x+0x80>
    23da:	1f 16       	cp	r1, r31
    23dc:	ba 0b       	sbc	r27, r26
    23de:	62 0b       	sbc	r22, r18
    23e0:	73 0b       	sbc	r23, r19
    23e2:	84 0b       	sbc	r24, r20
    23e4:	ba f0       	brmi	.+46     	; 0x2414 <__addsf3x+0x9c>
    23e6:	91 50       	subi	r25, 0x01	; 1
    23e8:	a1 f0       	breq	.+40     	; 0x2412 <__addsf3x+0x9a>
    23ea:	ff 0f       	add	r31, r31
    23ec:	bb 1f       	adc	r27, r27
    23ee:	66 1f       	adc	r22, r22
    23f0:	77 1f       	adc	r23, r23
    23f2:	88 1f       	adc	r24, r24
    23f4:	c2 f7       	brpl	.-16     	; 0x23e6 <__addsf3x+0x6e>
    23f6:	0e c0       	rjmp	.+28     	; 0x2414 <__addsf3x+0x9c>
    23f8:	ba 0f       	add	r27, r26
    23fa:	62 1f       	adc	r22, r18
    23fc:	73 1f       	adc	r23, r19
    23fe:	84 1f       	adc	r24, r20
    2400:	48 f4       	brcc	.+18     	; 0x2414 <__addsf3x+0x9c>
    2402:	87 95       	ror	r24
    2404:	77 95       	ror	r23
    2406:	67 95       	ror	r22
    2408:	b7 95       	ror	r27
    240a:	f7 95       	ror	r31
    240c:	9e 3f       	cpi	r25, 0xFE	; 254
    240e:	08 f0       	brcs	.+2      	; 0x2412 <__addsf3x+0x9a>
    2410:	b0 cf       	rjmp	.-160    	; 0x2372 <__addsf3+0x28>
    2412:	93 95       	inc	r25
    2414:	88 0f       	add	r24, r24
    2416:	08 f0       	brcs	.+2      	; 0x241a <__addsf3x+0xa2>
    2418:	99 27       	eor	r25, r25
    241a:	ee 0f       	add	r30, r30
    241c:	97 95       	ror	r25
    241e:	87 95       	ror	r24
    2420:	08 95       	ret

00002422 <__cmpsf2>:
    2422:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__fp_cmp>
    2426:	08 f4       	brcc	.+2      	; 0x242a <__cmpsf2+0x8>
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	08 95       	ret

0000242c <__floatunsisf>:
    242c:	e8 94       	clt
    242e:	09 c0       	rjmp	.+18     	; 0x2442 <__floatsisf+0x12>

00002430 <__floatsisf>:
    2430:	97 fb       	bst	r25, 7
    2432:	3e f4       	brtc	.+14     	; 0x2442 <__floatsisf+0x12>
    2434:	90 95       	com	r25
    2436:	80 95       	com	r24
    2438:	70 95       	com	r23
    243a:	61 95       	neg	r22
    243c:	7f 4f       	sbci	r23, 0xFF	; 255
    243e:	8f 4f       	sbci	r24, 0xFF	; 255
    2440:	9f 4f       	sbci	r25, 0xFF	; 255
    2442:	99 23       	and	r25, r25
    2444:	a9 f0       	breq	.+42     	; 0x2470 <__floatsisf+0x40>
    2446:	f9 2f       	mov	r31, r25
    2448:	96 e9       	ldi	r25, 0x96	; 150
    244a:	bb 27       	eor	r27, r27
    244c:	93 95       	inc	r25
    244e:	f6 95       	lsr	r31
    2450:	87 95       	ror	r24
    2452:	77 95       	ror	r23
    2454:	67 95       	ror	r22
    2456:	b7 95       	ror	r27
    2458:	f1 11       	cpse	r31, r1
    245a:	f8 cf       	rjmp	.-16     	; 0x244c <__floatsisf+0x1c>
    245c:	fa f4       	brpl	.+62     	; 0x249c <__floatsisf+0x6c>
    245e:	bb 0f       	add	r27, r27
    2460:	11 f4       	brne	.+4      	; 0x2466 <__floatsisf+0x36>
    2462:	60 ff       	sbrs	r22, 0
    2464:	1b c0       	rjmp	.+54     	; 0x249c <__floatsisf+0x6c>
    2466:	6f 5f       	subi	r22, 0xFF	; 255
    2468:	7f 4f       	sbci	r23, 0xFF	; 255
    246a:	8f 4f       	sbci	r24, 0xFF	; 255
    246c:	9f 4f       	sbci	r25, 0xFF	; 255
    246e:	16 c0       	rjmp	.+44     	; 0x249c <__floatsisf+0x6c>
    2470:	88 23       	and	r24, r24
    2472:	11 f0       	breq	.+4      	; 0x2478 <__floatsisf+0x48>
    2474:	96 e9       	ldi	r25, 0x96	; 150
    2476:	11 c0       	rjmp	.+34     	; 0x249a <__floatsisf+0x6a>
    2478:	77 23       	and	r23, r23
    247a:	21 f0       	breq	.+8      	; 0x2484 <__floatsisf+0x54>
    247c:	9e e8       	ldi	r25, 0x8E	; 142
    247e:	87 2f       	mov	r24, r23
    2480:	76 2f       	mov	r23, r22
    2482:	05 c0       	rjmp	.+10     	; 0x248e <__floatsisf+0x5e>
    2484:	66 23       	and	r22, r22
    2486:	71 f0       	breq	.+28     	; 0x24a4 <__floatsisf+0x74>
    2488:	96 e8       	ldi	r25, 0x86	; 134
    248a:	86 2f       	mov	r24, r22
    248c:	70 e0       	ldi	r23, 0x00	; 0
    248e:	60 e0       	ldi	r22, 0x00	; 0
    2490:	2a f0       	brmi	.+10     	; 0x249c <__floatsisf+0x6c>
    2492:	9a 95       	dec	r25
    2494:	66 0f       	add	r22, r22
    2496:	77 1f       	adc	r23, r23
    2498:	88 1f       	adc	r24, r24
    249a:	da f7       	brpl	.-10     	; 0x2492 <__floatsisf+0x62>
    249c:	88 0f       	add	r24, r24
    249e:	96 95       	lsr	r25
    24a0:	87 95       	ror	r24
    24a2:	97 f9       	bld	r25, 7
    24a4:	08 95       	ret

000024a6 <__fp_cmp>:
    24a6:	99 0f       	add	r25, r25
    24a8:	00 08       	sbc	r0, r0
    24aa:	55 0f       	add	r21, r21
    24ac:	aa 0b       	sbc	r26, r26
    24ae:	e0 e8       	ldi	r30, 0x80	; 128
    24b0:	fe ef       	ldi	r31, 0xFE	; 254
    24b2:	16 16       	cp	r1, r22
    24b4:	17 06       	cpc	r1, r23
    24b6:	e8 07       	cpc	r30, r24
    24b8:	f9 07       	cpc	r31, r25
    24ba:	c0 f0       	brcs	.+48     	; 0x24ec <__fp_cmp+0x46>
    24bc:	12 16       	cp	r1, r18
    24be:	13 06       	cpc	r1, r19
    24c0:	e4 07       	cpc	r30, r20
    24c2:	f5 07       	cpc	r31, r21
    24c4:	98 f0       	brcs	.+38     	; 0x24ec <__fp_cmp+0x46>
    24c6:	62 1b       	sub	r22, r18
    24c8:	73 0b       	sbc	r23, r19
    24ca:	84 0b       	sbc	r24, r20
    24cc:	95 0b       	sbc	r25, r21
    24ce:	39 f4       	brne	.+14     	; 0x24de <__fp_cmp+0x38>
    24d0:	0a 26       	eor	r0, r26
    24d2:	61 f0       	breq	.+24     	; 0x24ec <__fp_cmp+0x46>
    24d4:	23 2b       	or	r18, r19
    24d6:	24 2b       	or	r18, r20
    24d8:	25 2b       	or	r18, r21
    24da:	21 f4       	brne	.+8      	; 0x24e4 <__fp_cmp+0x3e>
    24dc:	08 95       	ret
    24de:	0a 26       	eor	r0, r26
    24e0:	09 f4       	brne	.+2      	; 0x24e4 <__fp_cmp+0x3e>
    24e2:	a1 40       	sbci	r26, 0x01	; 1
    24e4:	a6 95       	lsr	r26
    24e6:	8f ef       	ldi	r24, 0xFF	; 255
    24e8:	81 1d       	adc	r24, r1
    24ea:	81 1d       	adc	r24, r1
    24ec:	08 95       	ret

000024ee <__fp_inf>:
    24ee:	97 f9       	bld	r25, 7
    24f0:	9f 67       	ori	r25, 0x7F	; 127
    24f2:	80 e8       	ldi	r24, 0x80	; 128
    24f4:	70 e0       	ldi	r23, 0x00	; 0
    24f6:	60 e0       	ldi	r22, 0x00	; 0
    24f8:	08 95       	ret

000024fa <__fp_nan>:
    24fa:	9f ef       	ldi	r25, 0xFF	; 255
    24fc:	80 ec       	ldi	r24, 0xC0	; 192
    24fe:	08 95       	ret

00002500 <__fp_pscA>:
    2500:	00 24       	eor	r0, r0
    2502:	0a 94       	dec	r0
    2504:	16 16       	cp	r1, r22
    2506:	17 06       	cpc	r1, r23
    2508:	18 06       	cpc	r1, r24
    250a:	09 06       	cpc	r0, r25
    250c:	08 95       	ret

0000250e <__fp_pscB>:
    250e:	00 24       	eor	r0, r0
    2510:	0a 94       	dec	r0
    2512:	12 16       	cp	r1, r18
    2514:	13 06       	cpc	r1, r19
    2516:	14 06       	cpc	r1, r20
    2518:	05 06       	cpc	r0, r21
    251a:	08 95       	ret

0000251c <__fp_round>:
    251c:	09 2e       	mov	r0, r25
    251e:	03 94       	inc	r0
    2520:	00 0c       	add	r0, r0
    2522:	11 f4       	brne	.+4      	; 0x2528 <__fp_round+0xc>
    2524:	88 23       	and	r24, r24
    2526:	52 f0       	brmi	.+20     	; 0x253c <__fp_round+0x20>
    2528:	bb 0f       	add	r27, r27
    252a:	40 f4       	brcc	.+16     	; 0x253c <__fp_round+0x20>
    252c:	bf 2b       	or	r27, r31
    252e:	11 f4       	brne	.+4      	; 0x2534 <__fp_round+0x18>
    2530:	60 ff       	sbrs	r22, 0
    2532:	04 c0       	rjmp	.+8      	; 0x253c <__fp_round+0x20>
    2534:	6f 5f       	subi	r22, 0xFF	; 255
    2536:	7f 4f       	sbci	r23, 0xFF	; 255
    2538:	8f 4f       	sbci	r24, 0xFF	; 255
    253a:	9f 4f       	sbci	r25, 0xFF	; 255
    253c:	08 95       	ret

0000253e <__fp_split3>:
    253e:	57 fd       	sbrc	r21, 7
    2540:	90 58       	subi	r25, 0x80	; 128
    2542:	44 0f       	add	r20, r20
    2544:	55 1f       	adc	r21, r21
    2546:	59 f0       	breq	.+22     	; 0x255e <__fp_splitA+0x10>
    2548:	5f 3f       	cpi	r21, 0xFF	; 255
    254a:	71 f0       	breq	.+28     	; 0x2568 <__fp_splitA+0x1a>
    254c:	47 95       	ror	r20

0000254e <__fp_splitA>:
    254e:	88 0f       	add	r24, r24
    2550:	97 fb       	bst	r25, 7
    2552:	99 1f       	adc	r25, r25
    2554:	61 f0       	breq	.+24     	; 0x256e <__fp_splitA+0x20>
    2556:	9f 3f       	cpi	r25, 0xFF	; 255
    2558:	79 f0       	breq	.+30     	; 0x2578 <__fp_splitA+0x2a>
    255a:	87 95       	ror	r24
    255c:	08 95       	ret
    255e:	12 16       	cp	r1, r18
    2560:	13 06       	cpc	r1, r19
    2562:	14 06       	cpc	r1, r20
    2564:	55 1f       	adc	r21, r21
    2566:	f2 cf       	rjmp	.-28     	; 0x254c <__fp_split3+0xe>
    2568:	46 95       	lsr	r20
    256a:	f1 df       	rcall	.-30     	; 0x254e <__fp_splitA>
    256c:	08 c0       	rjmp	.+16     	; 0x257e <__fp_splitA+0x30>
    256e:	16 16       	cp	r1, r22
    2570:	17 06       	cpc	r1, r23
    2572:	18 06       	cpc	r1, r24
    2574:	99 1f       	adc	r25, r25
    2576:	f1 cf       	rjmp	.-30     	; 0x255a <__fp_splitA+0xc>
    2578:	86 95       	lsr	r24
    257a:	71 05       	cpc	r23, r1
    257c:	61 05       	cpc	r22, r1
    257e:	08 94       	sec
    2580:	08 95       	ret

00002582 <__fp_zero>:
    2582:	e8 94       	clt

00002584 <__fp_szero>:
    2584:	bb 27       	eor	r27, r27
    2586:	66 27       	eor	r22, r22
    2588:	77 27       	eor	r23, r23
    258a:	cb 01       	movw	r24, r22
    258c:	97 f9       	bld	r25, 7
    258e:	08 95       	ret

00002590 <__mulsf3>:
    2590:	0e 94 db 12 	call	0x25b6	; 0x25b6 <__mulsf3x>
    2594:	0c 94 8e 12 	jmp	0x251c	; 0x251c <__fp_round>
    2598:	0e 94 80 12 	call	0x2500	; 0x2500 <__fp_pscA>
    259c:	38 f0       	brcs	.+14     	; 0x25ac <__mulsf3+0x1c>
    259e:	0e 94 87 12 	call	0x250e	; 0x250e <__fp_pscB>
    25a2:	20 f0       	brcs	.+8      	; 0x25ac <__mulsf3+0x1c>
    25a4:	95 23       	and	r25, r21
    25a6:	11 f0       	breq	.+4      	; 0x25ac <__mulsf3+0x1c>
    25a8:	0c 94 77 12 	jmp	0x24ee	; 0x24ee <__fp_inf>
    25ac:	0c 94 7d 12 	jmp	0x24fa	; 0x24fa <__fp_nan>
    25b0:	11 24       	eor	r1, r1
    25b2:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__fp_szero>

000025b6 <__mulsf3x>:
    25b6:	0e 94 9f 12 	call	0x253e	; 0x253e <__fp_split3>
    25ba:	70 f3       	brcs	.-36     	; 0x2598 <__mulsf3+0x8>

000025bc <__mulsf3_pse>:
    25bc:	95 9f       	mul	r25, r21
    25be:	c1 f3       	breq	.-16     	; 0x25b0 <__mulsf3+0x20>
    25c0:	95 0f       	add	r25, r21
    25c2:	50 e0       	ldi	r21, 0x00	; 0
    25c4:	55 1f       	adc	r21, r21
    25c6:	62 9f       	mul	r22, r18
    25c8:	f0 01       	movw	r30, r0
    25ca:	72 9f       	mul	r23, r18
    25cc:	bb 27       	eor	r27, r27
    25ce:	f0 0d       	add	r31, r0
    25d0:	b1 1d       	adc	r27, r1
    25d2:	63 9f       	mul	r22, r19
    25d4:	aa 27       	eor	r26, r26
    25d6:	f0 0d       	add	r31, r0
    25d8:	b1 1d       	adc	r27, r1
    25da:	aa 1f       	adc	r26, r26
    25dc:	64 9f       	mul	r22, r20
    25de:	66 27       	eor	r22, r22
    25e0:	b0 0d       	add	r27, r0
    25e2:	a1 1d       	adc	r26, r1
    25e4:	66 1f       	adc	r22, r22
    25e6:	82 9f       	mul	r24, r18
    25e8:	22 27       	eor	r18, r18
    25ea:	b0 0d       	add	r27, r0
    25ec:	a1 1d       	adc	r26, r1
    25ee:	62 1f       	adc	r22, r18
    25f0:	73 9f       	mul	r23, r19
    25f2:	b0 0d       	add	r27, r0
    25f4:	a1 1d       	adc	r26, r1
    25f6:	62 1f       	adc	r22, r18
    25f8:	83 9f       	mul	r24, r19
    25fa:	a0 0d       	add	r26, r0
    25fc:	61 1d       	adc	r22, r1
    25fe:	22 1f       	adc	r18, r18
    2600:	74 9f       	mul	r23, r20
    2602:	33 27       	eor	r19, r19
    2604:	a0 0d       	add	r26, r0
    2606:	61 1d       	adc	r22, r1
    2608:	23 1f       	adc	r18, r19
    260a:	84 9f       	mul	r24, r20
    260c:	60 0d       	add	r22, r0
    260e:	21 1d       	adc	r18, r1
    2610:	82 2f       	mov	r24, r18
    2612:	76 2f       	mov	r23, r22
    2614:	6a 2f       	mov	r22, r26
    2616:	11 24       	eor	r1, r1
    2618:	9f 57       	subi	r25, 0x7F	; 127
    261a:	50 40       	sbci	r21, 0x00	; 0
    261c:	9a f0       	brmi	.+38     	; 0x2644 <__mulsf3_pse+0x88>
    261e:	f1 f0       	breq	.+60     	; 0x265c <__mulsf3_pse+0xa0>
    2620:	88 23       	and	r24, r24
    2622:	4a f0       	brmi	.+18     	; 0x2636 <__mulsf3_pse+0x7a>
    2624:	ee 0f       	add	r30, r30
    2626:	ff 1f       	adc	r31, r31
    2628:	bb 1f       	adc	r27, r27
    262a:	66 1f       	adc	r22, r22
    262c:	77 1f       	adc	r23, r23
    262e:	88 1f       	adc	r24, r24
    2630:	91 50       	subi	r25, 0x01	; 1
    2632:	50 40       	sbci	r21, 0x00	; 0
    2634:	a9 f7       	brne	.-22     	; 0x2620 <__mulsf3_pse+0x64>
    2636:	9e 3f       	cpi	r25, 0xFE	; 254
    2638:	51 05       	cpc	r21, r1
    263a:	80 f0       	brcs	.+32     	; 0x265c <__mulsf3_pse+0xa0>
    263c:	0c 94 77 12 	jmp	0x24ee	; 0x24ee <__fp_inf>
    2640:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__fp_szero>
    2644:	5f 3f       	cpi	r21, 0xFF	; 255
    2646:	e4 f3       	brlt	.-8      	; 0x2640 <__mulsf3_pse+0x84>
    2648:	98 3e       	cpi	r25, 0xE8	; 232
    264a:	d4 f3       	brlt	.-12     	; 0x2640 <__mulsf3_pse+0x84>
    264c:	86 95       	lsr	r24
    264e:	77 95       	ror	r23
    2650:	67 95       	ror	r22
    2652:	b7 95       	ror	r27
    2654:	f7 95       	ror	r31
    2656:	e7 95       	ror	r30
    2658:	9f 5f       	subi	r25, 0xFF	; 255
    265a:	c1 f7       	brne	.-16     	; 0x264c <__mulsf3_pse+0x90>
    265c:	fe 2b       	or	r31, r30
    265e:	88 0f       	add	r24, r24
    2660:	91 1d       	adc	r25, r1
    2662:	96 95       	lsr	r25
    2664:	87 95       	ror	r24
    2666:	97 f9       	bld	r25, 7
    2668:	08 95       	ret

0000266a <__cxa_pure_virtual>:
    266a:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <abort>

0000266e <initVariant>:
    266e:	08 95       	ret

00002670 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2670:	0e 94 24 1a 	call	0x3448	; 0x3448 <init>

	initVariant();
    2674:	0e 94 37 13 	call	0x266e	; 0x266e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
    2678:	83 e9       	ldi	r24, 0x93	; 147
    267a:	94 e0       	ldi	r25, 0x04	; 4
    267c:	0e 94 4f 19 	call	0x329e	; 0x329e <_ZN10USBDevice_6attachEv>
#endif
	
	setup();
    2680:	0e 94 c0 04 	call	0x980	; 0x980 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2684:	c0 e0       	ldi	r28, 0x00	; 0
    2686:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    2688:	0e 94 01 05 	call	0xa02	; 0xa02 <loop>
		if (serialEventRun) serialEventRun();
    268c:	20 97       	sbiw	r28, 0x00	; 0
    268e:	e1 f3       	breq	.-8      	; 0x2688 <main+0x18>
    2690:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2694:	f9 cf       	rjmp	.-14     	; 0x2688 <main+0x18>

00002696 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2696:	cf 92       	push	r12
    2698:	df 92       	push	r13
    269a:	ef 92       	push	r14
    269c:	ff 92       	push	r15
    269e:	0f 93       	push	r16
    26a0:	1f 93       	push	r17
    26a2:	cf 93       	push	r28
    26a4:	df 93       	push	r29
    26a6:	6c 01       	movw	r12, r24
    26a8:	7a 01       	movw	r14, r20
    26aa:	8b 01       	movw	r16, r22
    26ac:	c0 e0       	ldi	r28, 0x00	; 0
    26ae:	d0 e0       	ldi	r29, 0x00	; 0
    26b0:	ce 15       	cp	r28, r14
    26b2:	df 05       	cpc	r29, r15
    26b4:	81 f0       	breq	.+32     	; 0x26d6 <_ZN5Print5writeEPKhj+0x40>
    26b6:	d8 01       	movw	r26, r16
    26b8:	6d 91       	ld	r22, X+
    26ba:	8d 01       	movw	r16, r26
    26bc:	d6 01       	movw	r26, r12
    26be:	ed 91       	ld	r30, X+
    26c0:	fc 91       	ld	r31, X
    26c2:	01 90       	ld	r0, Z+
    26c4:	f0 81       	ld	r31, Z
    26c6:	e0 2d       	mov	r30, r0
    26c8:	c6 01       	movw	r24, r12
    26ca:	09 95       	icall
    26cc:	89 2b       	or	r24, r25
    26ce:	11 f0       	breq	.+4      	; 0x26d4 <_ZN5Print5writeEPKhj+0x3e>
    26d0:	21 96       	adiw	r28, 0x01	; 1
    26d2:	ee cf       	rjmp	.-36     	; 0x26b0 <_ZN5Print5writeEPKhj+0x1a>
    26d4:	7e 01       	movw	r14, r28
    26d6:	c7 01       	movw	r24, r14
    26d8:	df 91       	pop	r29
    26da:	cf 91       	pop	r28
    26dc:	1f 91       	pop	r17
    26de:	0f 91       	pop	r16
    26e0:	ff 90       	pop	r15
    26e2:	ef 90       	pop	r14
    26e4:	df 90       	pop	r13
    26e6:	cf 90       	pop	r12
    26e8:	08 95       	ret

000026ea <_ZN5Print5writeEPKc>:
    26ea:	61 15       	cp	r22, r1
    26ec:	71 05       	cpc	r23, r1
    26ee:	79 f0       	breq	.+30     	; 0x270e <_ZN5Print5writeEPKc+0x24>
    26f0:	fb 01       	movw	r30, r22
    26f2:	01 90       	ld	r0, Z+
    26f4:	00 20       	and	r0, r0
    26f6:	e9 f7       	brne	.-6      	; 0x26f2 <_ZN5Print5writeEPKc+0x8>
    26f8:	31 97       	sbiw	r30, 0x01	; 1
    26fa:	af 01       	movw	r20, r30
    26fc:	46 1b       	sub	r20, r22
    26fe:	57 0b       	sbc	r21, r23
    2700:	dc 01       	movw	r26, r24
    2702:	ed 91       	ld	r30, X+
    2704:	fc 91       	ld	r31, X
    2706:	02 80       	ldd	r0, Z+2	; 0x02
    2708:	f3 81       	ldd	r31, Z+3	; 0x03
    270a:	e0 2d       	mov	r30, r0
    270c:	09 94       	ijmp
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	08 95       	ret

00002714 <_ZN5Print5printERK6String>:
    2714:	db 01       	movw	r26, r22
    2716:	14 96       	adiw	r26, 0x04	; 4
    2718:	4d 91       	ld	r20, X+
    271a:	5c 91       	ld	r21, X
    271c:	15 97       	sbiw	r26, 0x05	; 5
    271e:	6d 91       	ld	r22, X+
    2720:	7c 91       	ld	r23, X
    2722:	dc 01       	movw	r26, r24
    2724:	ed 91       	ld	r30, X+
    2726:	fc 91       	ld	r31, X
    2728:	02 80       	ldd	r0, Z+2	; 0x02
    272a:	f3 81       	ldd	r31, Z+3	; 0x03
    272c:	e0 2d       	mov	r30, r0
    272e:	09 94       	ijmp

00002730 <_ZN5Print5printEPKc>:
    2730:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <_ZN5Print5writeEPKc>

00002734 <_ZN5Print5printEc>:
    2734:	dc 01       	movw	r26, r24
    2736:	ed 91       	ld	r30, X+
    2738:	fc 91       	ld	r31, X
    273a:	01 90       	ld	r0, Z+
    273c:	f0 81       	ld	r31, Z
    273e:	e0 2d       	mov	r30, r0
    2740:	09 94       	ijmp

00002742 <_ZN5Print11printNumberEmh>:
    2742:	8f 92       	push	r8
    2744:	9f 92       	push	r9
    2746:	af 92       	push	r10
    2748:	bf 92       	push	r11
    274a:	ef 92       	push	r14
    274c:	ff 92       	push	r15
    274e:	0f 93       	push	r16
    2750:	1f 93       	push	r17
    2752:	cf 93       	push	r28
    2754:	df 93       	push	r29
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	a1 97       	sbiw	r28, 0x21	; 33
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	f8 94       	cli
    2760:	de bf       	out	0x3e, r29	; 62
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	cd bf       	out	0x3d, r28	; 61
    2766:	7c 01       	movw	r14, r24
    2768:	fa 01       	movw	r30, r20
    276a:	cb 01       	movw	r24, r22
    276c:	19 a2       	std	Y+33, r1	; 0x21
    276e:	22 30       	cpi	r18, 0x02	; 2
    2770:	08 f4       	brcc	.+2      	; 0x2774 <_ZN5Print11printNumberEmh+0x32>
    2772:	2a e0       	ldi	r18, 0x0A	; 10
    2774:	8e 01       	movw	r16, r28
    2776:	0f 5d       	subi	r16, 0xDF	; 223
    2778:	1f 4f       	sbci	r17, 0xFF	; 255
    277a:	82 2e       	mov	r8, r18
    277c:	91 2c       	mov	r9, r1
    277e:	a1 2c       	mov	r10, r1
    2780:	b1 2c       	mov	r11, r1
    2782:	bf 01       	movw	r22, r30
    2784:	a5 01       	movw	r20, r10
    2786:	94 01       	movw	r18, r8
    2788:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <__udivmodsi4>
    278c:	f9 01       	movw	r30, r18
    278e:	ca 01       	movw	r24, r20
    2790:	01 50       	subi	r16, 0x01	; 1
    2792:	11 09       	sbc	r17, r1
    2794:	6a 30       	cpi	r22, 0x0A	; 10
    2796:	10 f4       	brcc	.+4      	; 0x279c <_ZN5Print11printNumberEmh+0x5a>
    2798:	60 5d       	subi	r22, 0xD0	; 208
    279a:	01 c0       	rjmp	.+2      	; 0x279e <_ZN5Print11printNumberEmh+0x5c>
    279c:	69 5c       	subi	r22, 0xC9	; 201
    279e:	d8 01       	movw	r26, r16
    27a0:	6c 93       	st	X, r22
    27a2:	23 2b       	or	r18, r19
    27a4:	24 2b       	or	r18, r20
    27a6:	25 2b       	or	r18, r21
    27a8:	61 f7       	brne	.-40     	; 0x2782 <_ZN5Print11printNumberEmh+0x40>
    27aa:	b8 01       	movw	r22, r16
    27ac:	c7 01       	movw	r24, r14
    27ae:	0e 94 75 13 	call	0x26ea	; 0x26ea <_ZN5Print5writeEPKc>
    27b2:	a1 96       	adiw	r28, 0x21	; 33
    27b4:	0f b6       	in	r0, 0x3f	; 63
    27b6:	f8 94       	cli
    27b8:	de bf       	out	0x3e, r29	; 62
    27ba:	0f be       	out	0x3f, r0	; 63
    27bc:	cd bf       	out	0x3d, r28	; 61
    27be:	df 91       	pop	r29
    27c0:	cf 91       	pop	r28
    27c2:	1f 91       	pop	r17
    27c4:	0f 91       	pop	r16
    27c6:	ff 90       	pop	r15
    27c8:	ef 90       	pop	r14
    27ca:	bf 90       	pop	r11
    27cc:	af 90       	pop	r10
    27ce:	9f 90       	pop	r9
    27d0:	8f 90       	pop	r8
    27d2:	08 95       	ret

000027d4 <_ZN5Print5printEmi>:
    27d4:	21 15       	cp	r18, r1
    27d6:	31 05       	cpc	r19, r1
    27d8:	41 f4       	brne	.+16     	; 0x27ea <_ZN5Print5printEmi+0x16>
    27da:	dc 01       	movw	r26, r24
    27dc:	ed 91       	ld	r30, X+
    27de:	fc 91       	ld	r31, X
    27e0:	01 90       	ld	r0, Z+
    27e2:	f0 81       	ld	r31, Z
    27e4:	e0 2d       	mov	r30, r0
    27e6:	64 2f       	mov	r22, r20
    27e8:	09 94       	ijmp
    27ea:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <_ZN5Print11printNumberEmh>

000027ee <_ZN5Print5printEji>:
    27ee:	9a 01       	movw	r18, r20
    27f0:	ab 01       	movw	r20, r22
    27f2:	60 e0       	ldi	r22, 0x00	; 0
    27f4:	70 e0       	ldi	r23, 0x00	; 0
    27f6:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <_ZN5Print5printEmi>

000027fa <_ZN5Print5printEli>:
    27fa:	cf 92       	push	r12
    27fc:	df 92       	push	r13
    27fe:	ef 92       	push	r14
    2800:	ff 92       	push	r15
    2802:	0f 93       	push	r16
    2804:	1f 93       	push	r17
    2806:	cf 93       	push	r28
    2808:	df 93       	push	r29
    280a:	21 15       	cp	r18, r1
    280c:	31 05       	cpc	r19, r1
    280e:	81 f4       	brne	.+32     	; 0x2830 <_ZN5Print5printEli+0x36>
    2810:	dc 01       	movw	r26, r24
    2812:	ed 91       	ld	r30, X+
    2814:	fc 91       	ld	r31, X
    2816:	01 90       	ld	r0, Z+
    2818:	f0 81       	ld	r31, Z
    281a:	e0 2d       	mov	r30, r0
    281c:	64 2f       	mov	r22, r20
    281e:	df 91       	pop	r29
    2820:	cf 91       	pop	r28
    2822:	1f 91       	pop	r17
    2824:	0f 91       	pop	r16
    2826:	ff 90       	pop	r15
    2828:	ef 90       	pop	r14
    282a:	df 90       	pop	r13
    282c:	cf 90       	pop	r12
    282e:	09 94       	ijmp
    2830:	2a 30       	cpi	r18, 0x0A	; 10
    2832:	31 05       	cpc	r19, r1
    2834:	01 f5       	brne	.+64     	; 0x2876 <_ZN5Print5printEli+0x7c>
    2836:	77 ff       	sbrs	r23, 7
    2838:	1d c0       	rjmp	.+58     	; 0x2874 <_ZN5Print5printEli+0x7a>
    283a:	6a 01       	movw	r12, r20
    283c:	7b 01       	movw	r14, r22
    283e:	ec 01       	movw	r28, r24
    2840:	6d e2       	ldi	r22, 0x2D	; 45
    2842:	0e 94 9a 13 	call	0x2734	; 0x2734 <_ZN5Print5printEc>
    2846:	8c 01       	movw	r16, r24
    2848:	44 27       	eor	r20, r20
    284a:	55 27       	eor	r21, r21
    284c:	ba 01       	movw	r22, r20
    284e:	4c 19       	sub	r20, r12
    2850:	5d 09       	sbc	r21, r13
    2852:	6e 09       	sbc	r22, r14
    2854:	7f 09       	sbc	r23, r15
    2856:	2a e0       	ldi	r18, 0x0A	; 10
    2858:	ce 01       	movw	r24, r28
    285a:	0e 94 a1 13 	call	0x2742	; 0x2742 <_ZN5Print11printNumberEmh>
    285e:	80 0f       	add	r24, r16
    2860:	91 1f       	adc	r25, r17
    2862:	df 91       	pop	r29
    2864:	cf 91       	pop	r28
    2866:	1f 91       	pop	r17
    2868:	0f 91       	pop	r16
    286a:	ff 90       	pop	r15
    286c:	ef 90       	pop	r14
    286e:	df 90       	pop	r13
    2870:	cf 90       	pop	r12
    2872:	08 95       	ret
    2874:	2a e0       	ldi	r18, 0x0A	; 10
    2876:	df 91       	pop	r29
    2878:	cf 91       	pop	r28
    287a:	1f 91       	pop	r17
    287c:	0f 91       	pop	r16
    287e:	ff 90       	pop	r15
    2880:	ef 90       	pop	r14
    2882:	df 90       	pop	r13
    2884:	cf 90       	pop	r12
    2886:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <_ZN5Print11printNumberEmh>

0000288a <_ZN5Print5printEii>:
    288a:	9a 01       	movw	r18, r20
    288c:	ab 01       	movw	r20, r22
    288e:	77 0f       	add	r23, r23
    2890:	66 0b       	sbc	r22, r22
    2892:	77 0b       	sbc	r23, r23
    2894:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <_ZN5Print5printEli>

00002898 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    2898:	7f 92       	push	r7
    289a:	8f 92       	push	r8
    289c:	9f 92       	push	r9
    289e:	af 92       	push	r10
    28a0:	bf 92       	push	r11
    28a2:	cf 92       	push	r12
    28a4:	df 92       	push	r13
    28a6:	ef 92       	push	r14
    28a8:	ff 92       	push	r15
    28aa:	0f 93       	push	r16
    28ac:	1f 93       	push	r17
    28ae:	cf 93       	push	r28
    28b0:	df 93       	push	r29
    28b2:	8c 01       	movw	r16, r24
    28b4:	6a 01       	movw	r12, r20
    28b6:	7b 01       	movw	r14, r22
    28b8:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    28ba:	9a 01       	movw	r18, r20
    28bc:	ab 01       	movw	r20, r22
    28be:	c7 01       	movw	r24, r14
    28c0:	b6 01       	movw	r22, r12
    28c2:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__unordsf2>
    28c6:	88 23       	and	r24, r24
    28c8:	19 f0       	breq	.+6      	; 0x28d0 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    28ca:	6b e7       	ldi	r22, 0x7B	; 123
    28cc:	72 e0       	ldi	r23, 0x02	; 2
    28ce:	27 c0       	rjmp	.+78     	; 0x291e <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    28d0:	46 01       	movw	r8, r12
    28d2:	57 01       	movw	r10, r14
    28d4:	e8 94       	clt
    28d6:	b7 f8       	bld	r11, 7
    28d8:	2f ef       	ldi	r18, 0xFF	; 255
    28da:	3f ef       	ldi	r19, 0xFF	; 255
    28dc:	4f e7       	ldi	r20, 0x7F	; 127
    28de:	5f e7       	ldi	r21, 0x7F	; 127
    28e0:	c5 01       	movw	r24, r10
    28e2:	b4 01       	movw	r22, r8
    28e4:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__unordsf2>
    28e8:	81 11       	cpse	r24, r1
    28ea:	0d c0       	rjmp	.+26     	; 0x2906 <_ZN5Print10printFloatEdh+0x6e>
    28ec:	2f ef       	ldi	r18, 0xFF	; 255
    28ee:	3f ef       	ldi	r19, 0xFF	; 255
    28f0:	4f e7       	ldi	r20, 0x7F	; 127
    28f2:	5f e7       	ldi	r21, 0x7F	; 127
    28f4:	c5 01       	movw	r24, r10
    28f6:	b4 01       	movw	r22, r8
    28f8:	0e 94 11 12 	call	0x2422	; 0x2422 <__cmpsf2>
    28fc:	18 16       	cp	r1, r24
    28fe:	1c f4       	brge	.+6      	; 0x2906 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2900:	6f e7       	ldi	r22, 0x7F	; 127
    2902:	72 e0       	ldi	r23, 0x02	; 2
    2904:	0c c0       	rjmp	.+24     	; 0x291e <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    2906:	2f ef       	ldi	r18, 0xFF	; 255
    2908:	3f ef       	ldi	r19, 0xFF	; 255
    290a:	4f e7       	ldi	r20, 0x7F	; 127
    290c:	5f e4       	ldi	r21, 0x4F	; 79
    290e:	c7 01       	movw	r24, r14
    2910:	b6 01       	movw	r22, r12
    2912:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <__gesf2>
    2916:	18 16       	cp	r1, r24
    2918:	94 f4       	brge	.+36     	; 0x293e <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    291a:	63 e8       	ldi	r22, 0x83	; 131
    291c:	72 e0       	ldi	r23, 0x02	; 2
    291e:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2920:	df 91       	pop	r29
    2922:	cf 91       	pop	r28
    2924:	1f 91       	pop	r17
    2926:	0f 91       	pop	r16
    2928:	ff 90       	pop	r15
    292a:	ef 90       	pop	r14
    292c:	df 90       	pop	r13
    292e:	cf 90       	pop	r12
    2930:	bf 90       	pop	r11
    2932:	af 90       	pop	r10
    2934:	9f 90       	pop	r9
    2936:	8f 90       	pop	r8
    2938:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    293a:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    293e:	2f ef       	ldi	r18, 0xFF	; 255
    2940:	3f ef       	ldi	r19, 0xFF	; 255
    2942:	4f e7       	ldi	r20, 0x7F	; 127
    2944:	5f ec       	ldi	r21, 0xCF	; 207
    2946:	c7 01       	movw	r24, r14
    2948:	b6 01       	movw	r22, r12
    294a:	0e 94 11 12 	call	0x2422	; 0x2422 <__cmpsf2>
    294e:	87 fd       	sbrc	r24, 7
    2950:	e4 cf       	rjmp	.-56     	; 0x291a <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	a9 01       	movw	r20, r18
    2958:	c7 01       	movw	r24, r14
    295a:	b6 01       	movw	r22, r12
    295c:	0e 94 11 12 	call	0x2422	; 0x2422 <__cmpsf2>
    2960:	87 ff       	sbrs	r24, 7
    2962:	0a c0       	rjmp	.+20     	; 0x2978 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    2964:	6d e2       	ldi	r22, 0x2D	; 45
    2966:	c8 01       	movw	r24, r16
    2968:	0e 94 9a 13 	call	0x2734	; 0x2734 <_ZN5Print5printEc>
    296c:	ec 01       	movw	r28, r24
     number = -number;
    296e:	f7 fa       	bst	r15, 7
    2970:	f0 94       	com	r15
    2972:	f7 f8       	bld	r15, 7
    2974:	f0 94       	com	r15
    2976:	02 c0       	rjmp	.+4      	; 0x297c <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    2978:	c0 e0       	ldi	r28, 0x00	; 0
    297a:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    297c:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    297e:	60 e0       	ldi	r22, 0x00	; 0
    2980:	70 e0       	ldi	r23, 0x00	; 0
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    2986:	7b 14       	cp	r7, r11
    2988:	41 f0       	breq	.+16     	; 0x299a <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	40 e2       	ldi	r20, 0x20	; 32
    2990:	51 e4       	ldi	r21, 0x41	; 65
    2992:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2996:	b3 94       	inc	r11
    2998:	f6 cf       	rjmp	.-20     	; 0x2986 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    299a:	a7 01       	movw	r20, r14
    299c:	96 01       	movw	r18, r12
    299e:	0e 94 a5 11 	call	0x234a	; 0x234a <__addsf3>
    29a2:	6b 01       	movw	r12, r22
    29a4:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    29a6:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__fixunssfsi>
    29aa:	4b 01       	movw	r8, r22
    29ac:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    29ae:	2a e0       	ldi	r18, 0x0A	; 10
    29b0:	ab 01       	movw	r20, r22
    29b2:	bc 01       	movw	r22, r24
    29b4:	c8 01       	movw	r24, r16
    29b6:	0e 94 a1 13 	call	0x2742	; 0x2742 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    29ba:	c8 0f       	add	r28, r24
    29bc:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    29be:	77 20       	and	r7, r7
    29c0:	b9 f1       	breq	.+110    	; 0x2a30 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    29c2:	c5 01       	movw	r24, r10
    29c4:	b4 01       	movw	r22, r8
    29c6:	0e 94 16 12 	call	0x242c	; 0x242c <__floatunsisf>
    29ca:	9b 01       	movw	r18, r22
    29cc:	ac 01       	movw	r20, r24
    29ce:	c7 01       	movw	r24, r14
    29d0:	b6 01       	movw	r22, r12
    29d2:	0e 94 a4 11 	call	0x2348	; 0x2348 <__subsf3>
    29d6:	6b 01       	movw	r12, r22
    29d8:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    29da:	6e e2       	ldi	r22, 0x2E	; 46
    29dc:	c8 01       	movw	r24, r16
    29de:	0e 94 9a 13 	call	0x2734	; 0x2734 <_ZN5Print5printEc>
    29e2:	c8 0f       	add	r28, r24
    29e4:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	40 e2       	ldi	r20, 0x20	; 32
    29ec:	51 e4       	ldi	r21, 0x41	; 65
    29ee:	c7 01       	movw	r24, r14
    29f0:	b6 01       	movw	r22, r12
    29f2:	0e 94 c8 12 	call	0x2590	; 0x2590 <__mulsf3>
    29f6:	4b 01       	movw	r8, r22
    29f8:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    29fa:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__fixunssfsi>
    29fe:	6b 01       	movw	r12, r22
    2a00:	7c 01       	movw	r14, r24
    n += print(toPrint);
    2a02:	4a e0       	ldi	r20, 0x0A	; 10
    2a04:	50 e0       	ldi	r21, 0x00	; 0
    2a06:	c8 01       	movw	r24, r16
    2a08:	0e 94 f7 13 	call	0x27ee	; 0x27ee <_ZN5Print5printEji>
    2a0c:	c8 0f       	add	r28, r24
    2a0e:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    2a10:	b6 01       	movw	r22, r12
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	0e 94 16 12 	call	0x242c	; 0x242c <__floatunsisf>
    2a1a:	9b 01       	movw	r18, r22
    2a1c:	ac 01       	movw	r20, r24
    2a1e:	c5 01       	movw	r24, r10
    2a20:	b4 01       	movw	r22, r8
    2a22:	0e 94 a4 11 	call	0x2348	; 0x2348 <__subsf3>
    2a26:	6b 01       	movw	r12, r22
    2a28:	7c 01       	movw	r14, r24
    2a2a:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2a2c:	71 10       	cpse	r7, r1
    2a2e:	db cf       	rjmp	.-74     	; 0x29e6 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2a30:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2a32:	df 91       	pop	r29
    2a34:	cf 91       	pop	r28
    2a36:	1f 91       	pop	r17
    2a38:	0f 91       	pop	r16
    2a3a:	ff 90       	pop	r15
    2a3c:	ef 90       	pop	r14
    2a3e:	df 90       	pop	r13
    2a40:	cf 90       	pop	r12
    2a42:	bf 90       	pop	r11
    2a44:	af 90       	pop	r10
    2a46:	9f 90       	pop	r9
    2a48:	8f 90       	pop	r8
    2a4a:	7f 90       	pop	r7
    2a4c:	08 95       	ret

00002a4e <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2a4e:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <_ZN5Print10printFloatEdh>

00002a52 <_ZL4RecvPVhh>:
//=======================================================================
//=======================================================================

USBDevice_ USBDevice;

USBDevice_::USBDevice_()
    2a52:	61 50       	subi	r22, 0x01	; 1
    2a54:	30 f0       	brcs	.+12     	; 0x2a62 <_ZL4RecvPVhh+0x10>
    2a56:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2a5a:	fc 01       	movw	r30, r24
    2a5c:	20 83       	st	Z, r18
    2a5e:	01 96       	adiw	r24, 0x01	; 1
    2a60:	f8 cf       	rjmp	.-16     	; 0x2a52 <_ZL4RecvPVhh>
    2a62:	28 98       	cbi	0x05, 0	; 5
    2a64:	84 e6       	ldi	r24, 0x64	; 100
    2a66:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <RxLEDPulse>
    2a6a:	08 95       	ret

00002a6c <_ZL11SendControlh>:
    2a6c:	40 91 96 04 	lds	r20, 0x0496	; 0x800496 <_ZL6_cmark>
    2a70:	50 91 97 04 	lds	r21, 0x0497	; 0x800497 <_ZL6_cmark+0x1>
    2a74:	20 91 94 04 	lds	r18, 0x0494	; 0x800494 <_ZL5_cend>
    2a78:	30 91 95 04 	lds	r19, 0x0495	; 0x800495 <_ZL5_cend+0x1>
    2a7c:	42 17       	cp	r20, r18
    2a7e:	53 07       	cpc	r21, r19
    2a80:	b4 f4       	brge	.+44     	; 0x2aae <_ZL11SendControlh+0x42>
    2a82:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a86:	95 70       	andi	r25, 0x05	; 5
    2a88:	e1 f3       	breq	.-8      	; 0x2a82 <_ZL11SendControlh+0x16>
    2a8a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a8e:	92 fd       	sbrc	r25, 2
    2a90:	19 c0       	rjmp	.+50     	; 0x2ac4 <_ZL11SendControlh+0x58>
    2a92:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2a96:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <_ZL6_cmark>
    2a9a:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <_ZL6_cmark+0x1>
    2a9e:	01 96       	adiw	r24, 0x01	; 1
    2aa0:	8f 73       	andi	r24, 0x3F	; 63
    2aa2:	99 27       	eor	r25, r25
    2aa4:	89 2b       	or	r24, r25
    2aa6:	19 f4       	brne	.+6      	; 0x2aae <_ZL11SendControlh+0x42>
    2aa8:	8e ef       	ldi	r24, 0xFE	; 254
    2aaa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2aae:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <_ZL6_cmark>
    2ab2:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <_ZL6_cmark+0x1>
    2ab6:	01 96       	adiw	r24, 0x01	; 1
    2ab8:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <_ZL6_cmark+0x1>
    2abc:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <_ZL6_cmark>
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	08 95       	ret
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	08 95       	ret

00002ac8 <_ZL24USB_SendStringDescriptorPKhhh>:
    2ac8:	df 92       	push	r13
    2aca:	ef 92       	push	r14
    2acc:	ff 92       	push	r15
    2ace:	0f 93       	push	r16
    2ad0:	1f 93       	push	r17
    2ad2:	cf 93       	push	r28
    2ad4:	df 93       	push	r29
    2ad6:	d8 2e       	mov	r13, r24
    2ad8:	f9 2e       	mov	r15, r25
    2ada:	e4 2e       	mov	r14, r20
    2adc:	06 2f       	mov	r16, r22
    2ade:	10 e0       	ldi	r17, 0x00	; 0
    2ae0:	c8 01       	movw	r24, r16
    2ae2:	01 96       	adiw	r24, 0x01	; 1
    2ae4:	88 0f       	add	r24, r24
    2ae6:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <_ZL11SendControlh>
    2aea:	83 e0       	ldi	r24, 0x03	; 3
    2aec:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <_ZL11SendControlh>
    2af0:	cd 2d       	mov	r28, r13
    2af2:	df 2d       	mov	r29, r15
    2af4:	0c 0f       	add	r16, r28
    2af6:	1d 1f       	adc	r17, r29
    2af8:	c0 17       	cp	r28, r16
    2afa:	d1 07       	cpc	r29, r17
    2afc:	89 f0       	breq	.+34     	; 0x2b20 <_ZL24USB_SendStringDescriptorPKhhh+0x58>
    2afe:	e7 fe       	sbrs	r14, 7
    2b00:	03 c0       	rjmp	.+6      	; 0x2b08 <_ZL24USB_SendStringDescriptorPKhhh+0x40>
    2b02:	fe 01       	movw	r30, r28
    2b04:	84 91       	lpm	r24, Z
    2b06:	01 c0       	rjmp	.+2      	; 0x2b0a <_ZL24USB_SendStringDescriptorPKhhh+0x42>
    2b08:	88 81       	ld	r24, Y
    2b0a:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <_ZL11SendControlh>
    2b0e:	f8 2e       	mov	r15, r24
    2b10:	80 e0       	ldi	r24, 0x00	; 0
    2b12:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <_ZL11SendControlh>
    2b16:	8f 21       	and	r24, r15
    2b18:	21 96       	adiw	r28, 0x01	; 1
    2b1a:	81 11       	cpse	r24, r1
    2b1c:	ed cf       	rjmp	.-38     	; 0x2af8 <_ZL24USB_SendStringDescriptorPKhhh+0x30>
    2b1e:	01 c0       	rjmp	.+2      	; 0x2b22 <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	df 91       	pop	r29
    2b24:	cf 91       	pop	r28
    2b26:	1f 91       	pop	r17
    2b28:	0f 91       	pop	r16
    2b2a:	ff 90       	pop	r15
    2b2c:	ef 90       	pop	r14
    2b2e:	df 90       	pop	r13
    2b30:	08 95       	ret

00002b32 <_ZL15USB_ClockEnablev>:
    2b32:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    2b36:	81 60       	ori	r24, 0x01	; 1
    2b38:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    2b3c:	80 ea       	ldi	r24, 0xA0	; 160
    2b3e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2b42:	89 b5       	in	r24, 0x29	; 41
    2b44:	80 61       	ori	r24, 0x10	; 16
    2b46:	89 bd       	out	0x29, r24	; 41
    2b48:	89 b5       	in	r24, 0x29	; 41
    2b4a:	82 60       	ori	r24, 0x02	; 2
    2b4c:	89 bd       	out	0x29, r24	; 41
    2b4e:	09 b4       	in	r0, 0x29	; 41
    2b50:	00 fe       	sbrs	r0, 0
    2b52:	fd cf       	rjmp	.-6      	; 0x2b4e <_ZL15USB_ClockEnablev+0x1c>
    2b54:	61 e0       	ldi	r22, 0x01	; 1
    2b56:	70 e0       	ldi	r23, 0x00	; 0
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	0e 94 dd 19 	call	0x33ba	; 0x33ba <delay>
    2b60:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2b64:	8f 7c       	andi	r24, 0xCF	; 207
    2b66:	80 61       	ori	r24, 0x10	; 16
    2b68:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2b6c:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2b70:	80 7f       	andi	r24, 0xF0	; 240
    2b72:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2b76:	08 95       	ret

00002b78 <_ZL14SendInterfacesv>:
    2b78:	cf 93       	push	r28
    2b7a:	df 93       	push	r29
    2b7c:	1f 92       	push	r1
    2b7e:	cd b7       	in	r28, 0x3d	; 61
    2b80:	de b7       	in	r29, 0x3e	; 62
    2b82:	19 82       	std	Y+1, r1	; 0x01
    2b84:	ce 01       	movw	r24, r28
    2b86:	01 96       	adiw	r24, 0x01	; 1
    2b88:	0e 94 42 1c 	call	0x3884	; 0x3884 <_Z16CDC_GetInterfacePh>
    2b8c:	0e 94 76 1d 	call	0x3aec	; 0x3aec <_Z12PluggableUSBv>
    2b90:	be 01       	movw	r22, r28
    2b92:	6f 5f       	subi	r22, 0xFF	; 255
    2b94:	7f 4f       	sbci	r23, 0xFF	; 255
    2b96:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <_ZN13PluggableUSB_12getInterfaceEPh>
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	0f 90       	pop	r0
    2b9e:	df 91       	pop	r29
    2ba0:	cf 91       	pop	r28
    2ba2:	08 95       	ret

00002ba4 <_ZN6LockEPC1Eh>:
    2ba4:	2f b7       	in	r18, 0x3f	; 63
    2ba6:	fc 01       	movw	r30, r24
    2ba8:	20 83       	st	Z, r18
    2baa:	f8 94       	cli
    2bac:	67 70       	andi	r22, 0x07	; 7
    2bae:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2bb2:	08 95       	ret

00002bb4 <_Z13USB_Availableh>:
    2bb4:	cf 93       	push	r28
    2bb6:	df 93       	push	r29
    2bb8:	1f 92       	push	r1
    2bba:	cd b7       	in	r28, 0x3d	; 61
    2bbc:	de b7       	in	r29, 0x3e	; 62
    2bbe:	68 2f       	mov	r22, r24
    2bc0:	ce 01       	movw	r24, r28
    2bc2:	01 96       	adiw	r24, 0x01	; 1
    2bc4:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <_ZN6LockEPC1Eh>
    2bc8:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2bcc:	99 81       	ldd	r25, Y+1	; 0x01
    2bce:	9f bf       	out	0x3f, r25	; 63
    2bd0:	0f 90       	pop	r0
    2bd2:	df 91       	pop	r29
    2bd4:	cf 91       	pop	r28
    2bd6:	08 95       	ret

00002bd8 <_Z8USB_RecvhPvi>:
    2bd8:	ef 92       	push	r14
    2bda:	ff 92       	push	r15
    2bdc:	0f 93       	push	r16
    2bde:	1f 93       	push	r17
    2be0:	cf 93       	push	r28
    2be2:	df 93       	push	r29
    2be4:	1f 92       	push	r1
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
    2bea:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <_usbConfiguration>
    2bee:	99 23       	and	r25, r25
    2bf0:	11 f0       	breq	.+4      	; 0x2bf6 <_Z8USB_RecvhPvi+0x1e>
    2bf2:	57 ff       	sbrs	r21, 7
    2bf4:	03 c0       	rjmp	.+6      	; 0x2bfc <_Z8USB_RecvhPvi+0x24>
    2bf6:	8f ef       	ldi	r24, 0xFF	; 255
    2bf8:	9f ef       	ldi	r25, 0xFF	; 255
    2bfa:	29 c0       	rjmp	.+82     	; 0x2c4e <_Z8USB_RecvhPvi+0x76>
    2bfc:	8a 01       	movw	r16, r20
    2bfe:	7b 01       	movw	r14, r22
    2c00:	68 2f       	mov	r22, r24
    2c02:	ce 01       	movw	r24, r28
    2c04:	01 96       	adiw	r24, 0x01	; 1
    2c06:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <_ZN6LockEPC1Eh>
    2c0a:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	02 17       	cp	r16, r18
    2c12:	13 07       	cpc	r17, r19
    2c14:	0c f4       	brge	.+2      	; 0x2c18 <_Z8USB_RecvhPvi+0x40>
    2c16:	98 01       	movw	r18, r16
    2c18:	82 2f       	mov	r24, r18
    2c1a:	f7 01       	movw	r30, r14
    2c1c:	94 e6       	ldi	r25, 0x64	; 100
    2c1e:	81 50       	subi	r24, 0x01	; 1
    2c20:	38 f0       	brcs	.+14     	; 0x2c30 <_Z8USB_RecvhPvi+0x58>
    2c22:	28 98       	cbi	0x05, 0	; 5
    2c24:	90 93 9b 04 	sts	0x049B, r25	; 0x80049b <RxLEDPulse>
    2c28:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2c2c:	41 93       	st	Z+, r20
    2c2e:	f7 cf       	rjmp	.-18     	; 0x2c1e <_Z8USB_RecvhPvi+0x46>
    2c30:	21 15       	cp	r18, r1
    2c32:	31 05       	cpc	r19, r1
    2c34:	21 f0       	breq	.+8      	; 0x2c3e <_Z8USB_RecvhPvi+0x66>
    2c36:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2c3a:	88 23       	and	r24, r24
    2c3c:	21 f0       	breq	.+8      	; 0x2c46 <_Z8USB_RecvhPvi+0x6e>
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
    2c40:	8f bf       	out	0x3f, r24	; 63
    2c42:	c9 01       	movw	r24, r18
    2c44:	04 c0       	rjmp	.+8      	; 0x2c4e <_Z8USB_RecvhPvi+0x76>
    2c46:	8b e6       	ldi	r24, 0x6B	; 107
    2c48:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2c4c:	f8 cf       	rjmp	.-16     	; 0x2c3e <_Z8USB_RecvhPvi+0x66>
    2c4e:	0f 90       	pop	r0
    2c50:	df 91       	pop	r29
    2c52:	cf 91       	pop	r28
    2c54:	1f 91       	pop	r17
    2c56:	0f 91       	pop	r16
    2c58:	ff 90       	pop	r15
    2c5a:	ef 90       	pop	r14
    2c5c:	08 95       	ret

00002c5e <_Z8USB_Recvh>:
    2c5e:	cf 93       	push	r28
    2c60:	df 93       	push	r29
    2c62:	1f 92       	push	r1
    2c64:	cd b7       	in	r28, 0x3d	; 61
    2c66:	de b7       	in	r29, 0x3e	; 62
    2c68:	41 e0       	ldi	r20, 0x01	; 1
    2c6a:	50 e0       	ldi	r21, 0x00	; 0
    2c6c:	be 01       	movw	r22, r28
    2c6e:	6f 5f       	subi	r22, 0xFF	; 255
    2c70:	7f 4f       	sbci	r23, 0xFF	; 255
    2c72:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <_Z8USB_RecvhPvi>
    2c76:	01 97       	sbiw	r24, 0x01	; 1
    2c78:	19 f4       	brne	.+6      	; 0x2c80 <_Z8USB_Recvh+0x22>
    2c7a:	89 81       	ldd	r24, Y+1	; 0x01
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	02 c0       	rjmp	.+4      	; 0x2c84 <_Z8USB_Recvh+0x26>
    2c80:	8f ef       	ldi	r24, 0xFF	; 255
    2c82:	9f ef       	ldi	r25, 0xFF	; 255
    2c84:	0f 90       	pop	r0
    2c86:	df 91       	pop	r29
    2c88:	cf 91       	pop	r28
    2c8a:	08 95       	ret

00002c8c <_Z13USB_SendSpaceh>:
    2c8c:	cf 93       	push	r28
    2c8e:	df 93       	push	r29
    2c90:	1f 92       	push	r1
    2c92:	cd b7       	in	r28, 0x3d	; 61
    2c94:	de b7       	in	r29, 0x3e	; 62
    2c96:	68 2f       	mov	r22, r24
    2c98:	ce 01       	movw	r24, r28
    2c9a:	01 96       	adiw	r24, 0x01	; 1
    2c9c:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <_ZN6LockEPC1Eh>
    2ca0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2ca4:	89 2f       	mov	r24, r25
    2ca6:	80 72       	andi	r24, 0x20	; 32
    2ca8:	95 ff       	sbrs	r25, 5
    2caa:	04 c0       	rjmp	.+8      	; 0x2cb4 <_Z13USB_SendSpaceh+0x28>
    2cac:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2cb0:	80 e4       	ldi	r24, 0x40	; 64
    2cb2:	89 1b       	sub	r24, r25
    2cb4:	99 81       	ldd	r25, Y+1	; 0x01
    2cb6:	9f bf       	out	0x3f, r25	; 63
    2cb8:	0f 90       	pop	r0
    2cba:	df 91       	pop	r29
    2cbc:	cf 91       	pop	r28
    2cbe:	08 95       	ret

00002cc0 <_Z8USB_SendhPKvi>:
    2cc0:	5f 92       	push	r5
    2cc2:	6f 92       	push	r6
    2cc4:	7f 92       	push	r7
    2cc6:	8f 92       	push	r8
    2cc8:	9f 92       	push	r9
    2cca:	af 92       	push	r10
    2ccc:	bf 92       	push	r11
    2cce:	cf 92       	push	r12
    2cd0:	df 92       	push	r13
    2cd2:	ef 92       	push	r14
    2cd4:	ff 92       	push	r15
    2cd6:	0f 93       	push	r16
    2cd8:	1f 93       	push	r17
    2cda:	cf 93       	push	r28
    2cdc:	df 93       	push	r29
    2cde:	1f 92       	push	r1
    2ce0:	cd b7       	in	r28, 0x3d	; 61
    2ce2:	de b7       	in	r29, 0x3e	; 62
    2ce4:	98 2e       	mov	r9, r24
    2ce6:	6b 01       	movw	r12, r22
    2ce8:	b4 2e       	mov	r11, r20
    2cea:	05 2f       	mov	r16, r21
    2cec:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <_usbConfiguration>
    2cf0:	81 11       	cpse	r24, r1
    2cf2:	03 c0       	rjmp	.+6      	; 0x2cfa <_Z8USB_SendhPKvi+0x3a>
    2cf4:	8f ef       	ldi	r24, 0xFF	; 255
    2cf6:	9f ef       	ldi	r25, 0xFF	; 255
    2cf8:	77 c0       	rjmp	.+238    	; 0x2de8 <_Z8USB_SendhPKvi+0x128>
    2cfa:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <_usbSuspendState>
    2cfe:	80 ff       	sbrs	r24, 0
    2d00:	05 c0       	rjmp	.+10     	; 0x2d0c <_Z8USB_SendhPKvi+0x4c>
    2d02:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2d06:	82 60       	ori	r24, 0x02	; 2
    2d08:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2d0c:	eb 2c       	mov	r14, r11
    2d0e:	f0 2e       	mov	r15, r16
    2d10:	a1 2c       	mov	r10, r1
    2d12:	8a ef       	ldi	r24, 0xFA	; 250
    2d14:	88 2e       	mov	r8, r24
    2d16:	89 2d       	mov	r24, r9
    2d18:	80 72       	andi	r24, 0x20	; 32
    2d1a:	68 2e       	mov	r6, r24
    2d1c:	89 2d       	mov	r24, r9
    2d1e:	80 74       	andi	r24, 0x40	; 64
    2d20:	58 2e       	mov	r5, r24
    2d22:	9a e3       	ldi	r25, 0x3A	; 58
    2d24:	79 2e       	mov	r7, r25
    2d26:	e1 14       	cp	r14, r1
    2d28:	f1 04       	cpc	r15, r1
    2d2a:	19 f4       	brne	.+6      	; 0x2d32 <_Z8USB_SendhPKvi+0x72>
    2d2c:	aa 20       	and	r10, r10
    2d2e:	09 f4       	brne	.+2      	; 0x2d32 <_Z8USB_SendhPKvi+0x72>
    2d30:	55 c0       	rjmp	.+170    	; 0x2ddc <_Z8USB_SendhPKvi+0x11c>
    2d32:	89 2d       	mov	r24, r9
    2d34:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <_Z13USB_SendSpaceh>
    2d38:	18 2f       	mov	r17, r24
    2d3a:	81 11       	cpse	r24, r1
    2d3c:	0a c0       	rjmp	.+20     	; 0x2d52 <_Z8USB_SendhPKvi+0x92>
    2d3e:	8a 94       	dec	r8
    2d40:	88 20       	and	r8, r8
    2d42:	c1 f2       	breq	.-80     	; 0x2cf4 <_Z8USB_SendhPKvi+0x34>
    2d44:	61 e0       	ldi	r22, 0x01	; 1
    2d46:	70 e0       	ldi	r23, 0x00	; 0
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	0e 94 dd 19 	call	0x33ba	; 0x33ba <delay>
    2d50:	ea cf       	rjmp	.-44     	; 0x2d26 <_Z8USB_SendhPKvi+0x66>
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	e8 16       	cp	r14, r24
    2d56:	f9 06       	cpc	r15, r25
    2d58:	0c f4       	brge	.+2      	; 0x2d5c <_Z8USB_SendhPKvi+0x9c>
    2d5a:	1e 2d       	mov	r17, r14
    2d5c:	69 2d       	mov	r22, r9
    2d5e:	ce 01       	movw	r24, r28
    2d60:	01 96       	adiw	r24, 0x01	; 1
    2d62:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <_ZN6LockEPC1Eh>
    2d66:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2d6a:	85 ff       	sbrs	r24, 5
    2d6c:	34 c0       	rjmp	.+104    	; 0x2dd6 <_Z8USB_SendhPKvi+0x116>
    2d6e:	81 2f       	mov	r24, r17
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	e8 1a       	sub	r14, r24
    2d74:	f9 0a       	sbc	r15, r25
    2d76:	66 20       	and	r6, r6
    2d78:	29 f0       	breq	.+10     	; 0x2d84 <_Z8USB_SendhPKvi+0xc4>
    2d7a:	11 50       	subi	r17, 0x01	; 1
    2d7c:	a0 f0       	brcs	.+40     	; 0x2da6 <_Z8USB_SendhPKvi+0xe6>
    2d7e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2d82:	fb cf       	rjmp	.-10     	; 0x2d7a <_Z8USB_SendhPKvi+0xba>
    2d84:	f6 01       	movw	r30, r12
    2d86:	97 fe       	sbrs	r9, 7
    2d88:	0a c0       	rjmp	.+20     	; 0x2d9e <_Z8USB_SendhPKvi+0xde>
    2d8a:	11 50       	subi	r17, 0x01	; 1
    2d8c:	50 f0       	brcs	.+20     	; 0x2da2 <_Z8USB_SendhPKvi+0xe2>
    2d8e:	24 91       	lpm	r18, Z
    2d90:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2d94:	31 96       	adiw	r30, 0x01	; 1
    2d96:	f9 cf       	rjmp	.-14     	; 0x2d8a <_Z8USB_SendhPKvi+0xca>
    2d98:	21 91       	ld	r18, Z+
    2d9a:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2d9e:	11 50       	subi	r17, 0x01	; 1
    2da0:	d8 f7       	brcc	.-10     	; 0x2d98 <_Z8USB_SendhPKvi+0xd8>
    2da2:	c8 0e       	add	r12, r24
    2da4:	d9 1e       	adc	r13, r25
    2da6:	aa 20       	and	r10, r10
    2da8:	19 f0       	breq	.+6      	; 0x2db0 <_Z8USB_SendhPKvi+0xf0>
    2daa:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2dae:	0b c0       	rjmp	.+22     	; 0x2dc6 <_Z8USB_SendhPKvi+0x106>
    2db0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2db4:	85 fd       	sbrc	r24, 5
    2db6:	09 c0       	rjmp	.+18     	; 0x2dca <_Z8USB_SendhPKvi+0x10a>
    2db8:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2dbc:	aa 24       	eor	r10, r10
    2dbe:	a3 94       	inc	r10
    2dc0:	e1 14       	cp	r14, r1
    2dc2:	f1 04       	cpc	r15, r1
    2dc4:	41 f0       	breq	.+16     	; 0x2dd6 <_Z8USB_SendhPKvi+0x116>
    2dc6:	a1 2c       	mov	r10, r1
    2dc8:	06 c0       	rjmp	.+12     	; 0x2dd6 <_Z8USB_SendhPKvi+0x116>
    2dca:	e1 14       	cp	r14, r1
    2dcc:	f1 04       	cpc	r15, r1
    2dce:	19 f4       	brne	.+6      	; 0x2dd6 <_Z8USB_SendhPKvi+0x116>
    2dd0:	51 10       	cpse	r5, r1
    2dd2:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2dd6:	89 81       	ldd	r24, Y+1	; 0x01
    2dd8:	8f bf       	out	0x3f, r24	; 63
    2dda:	a5 cf       	rjmp	.-182    	; 0x2d26 <_Z8USB_SendhPKvi+0x66>
    2ddc:	5d 98       	cbi	0x0b, 5	; 11
    2dde:	84 e6       	ldi	r24, 0x64	; 100
    2de0:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <TxLEDPulse>
    2de4:	8b 2d       	mov	r24, r11
    2de6:	90 2f       	mov	r25, r16
    2de8:	0f 90       	pop	r0
    2dea:	df 91       	pop	r29
    2dec:	cf 91       	pop	r28
    2dee:	1f 91       	pop	r17
    2df0:	0f 91       	pop	r16
    2df2:	ff 90       	pop	r15
    2df4:	ef 90       	pop	r14
    2df6:	df 90       	pop	r13
    2df8:	cf 90       	pop	r12
    2dfa:	bf 90       	pop	r11
    2dfc:	af 90       	pop	r10
    2dfe:	9f 90       	pop	r9
    2e00:	8f 90       	pop	r8
    2e02:	7f 90       	pop	r7
    2e04:	6f 90       	pop	r6
    2e06:	5f 90       	pop	r5
    2e08:	08 95       	ret

00002e0a <_Z11InitControli>:
    2e0a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2e0e:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <_ZL6_cmark+0x1>
    2e12:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <_ZL6_cmark>
    2e16:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <_ZL5_cend+0x1>
    2e1a:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <_ZL5_cend>
    2e1e:	08 95       	ret

00002e20 <_Z15USB_SendControlhPKvi>:
    2e20:	df 92       	push	r13
    2e22:	ef 92       	push	r14
    2e24:	ff 92       	push	r15
    2e26:	0f 93       	push	r16
    2e28:	1f 93       	push	r17
    2e2a:	cf 93       	push	r28
    2e2c:	df 93       	push	r29
    2e2e:	d8 2e       	mov	r13, r24
    2e30:	8a 01       	movw	r16, r20
    2e32:	7b 01       	movw	r14, r22
    2e34:	e4 0e       	add	r14, r20
    2e36:	f5 1e       	adc	r15, r21
    2e38:	eb 01       	movw	r28, r22
    2e3a:	ce 15       	cp	r28, r14
    2e3c:	df 05       	cpc	r29, r15
    2e3e:	71 f0       	breq	.+28     	; 0x2e5c <_Z15USB_SendControlhPKvi+0x3c>
    2e40:	d7 fe       	sbrs	r13, 7
    2e42:	03 c0       	rjmp	.+6      	; 0x2e4a <_Z15USB_SendControlhPKvi+0x2a>
    2e44:	fe 01       	movw	r30, r28
    2e46:	84 91       	lpm	r24, Z
    2e48:	01 c0       	rjmp	.+2      	; 0x2e4c <_Z15USB_SendControlhPKvi+0x2c>
    2e4a:	88 81       	ld	r24, Y
    2e4c:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <_ZL11SendControlh>
    2e50:	21 96       	adiw	r28, 0x01	; 1
    2e52:	81 11       	cpse	r24, r1
    2e54:	f2 cf       	rjmp	.-28     	; 0x2e3a <_Z15USB_SendControlhPKvi+0x1a>
    2e56:	8f ef       	ldi	r24, 0xFF	; 255
    2e58:	9f ef       	ldi	r25, 0xFF	; 255
    2e5a:	01 c0       	rjmp	.+2      	; 0x2e5e <_Z15USB_SendControlhPKvi+0x3e>
    2e5c:	c8 01       	movw	r24, r16
    2e5e:	df 91       	pop	r29
    2e60:	cf 91       	pop	r28
    2e62:	1f 91       	pop	r17
    2e64:	0f 91       	pop	r16
    2e66:	ff 90       	pop	r15
    2e68:	ef 90       	pop	r14
    2e6a:	df 90       	pop	r13
    2e6c:	08 95       	ret

00002e6e <_Z15USB_RecvControlPvi>:
    2e6e:	af 92       	push	r10
    2e70:	bf 92       	push	r11
    2e72:	df 92       	push	r13
    2e74:	ef 92       	push	r14
    2e76:	ff 92       	push	r15
    2e78:	0f 93       	push	r16
    2e7a:	1f 93       	push	r17
    2e7c:	cf 93       	push	r28
    2e7e:	df 93       	push	r29
    2e80:	5c 01       	movw	r10, r24
    2e82:	8b 01       	movw	r16, r22
    2e84:	eb 01       	movw	r28, r22
    2e86:	9b ef       	ldi	r25, 0xFB	; 251
    2e88:	d9 2e       	mov	r13, r25
    2e8a:	20 97       	sbiw	r28, 0x00	; 0
    2e8c:	c1 f0       	breq	.+48     	; 0x2ebe <_Z15USB_RecvControlPvi+0x50>
    2e8e:	7e 01       	movw	r14, r28
    2e90:	c1 34       	cpi	r28, 0x41	; 65
    2e92:	d1 05       	cpc	r29, r1
    2e94:	1c f0       	brlt	.+6      	; 0x2e9c <_Z15USB_RecvControlPvi+0x2e>
    2e96:	80 e4       	ldi	r24, 0x40	; 64
    2e98:	e8 2e       	mov	r14, r24
    2e9a:	f1 2c       	mov	r15, r1
    2e9c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2ea0:	82 ff       	sbrs	r24, 2
    2ea2:	fc cf       	rjmp	.-8      	; 0x2e9c <_Z15USB_RecvControlPvi+0x2e>
    2ea4:	c8 01       	movw	r24, r16
    2ea6:	8c 1b       	sub	r24, r28
    2ea8:	9d 0b       	sbc	r25, r29
    2eaa:	6e 2d       	mov	r22, r14
    2eac:	8a 0d       	add	r24, r10
    2eae:	9b 1d       	adc	r25, r11
    2eb0:	0e 94 29 15 	call	0x2a52	; 0x2a52 <_ZL4RecvPVhh>
    2eb4:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2eb8:	ce 19       	sub	r28, r14
    2eba:	df 09       	sbc	r29, r15
    2ebc:	e6 cf       	rjmp	.-52     	; 0x2e8a <_Z15USB_RecvControlPvi+0x1c>
    2ebe:	c8 01       	movw	r24, r16
    2ec0:	df 91       	pop	r29
    2ec2:	cf 91       	pop	r28
    2ec4:	1f 91       	pop	r17
    2ec6:	0f 91       	pop	r16
    2ec8:	ff 90       	pop	r15
    2eca:	ef 90       	pop	r14
    2ecc:	df 90       	pop	r13
    2ece:	bf 90       	pop	r11
    2ed0:	af 90       	pop	r10
    2ed2:	08 95       	ret

00002ed4 <__vector_11>:
    2ed4:	1f 92       	push	r1
    2ed6:	0f 92       	push	r0
    2ed8:	0f b6       	in	r0, 0x3f	; 63
    2eda:	0f 92       	push	r0
    2edc:	11 24       	eor	r1, r1
    2ede:	cf 92       	push	r12
    2ee0:	df 92       	push	r13
    2ee2:	ef 92       	push	r14
    2ee4:	ff 92       	push	r15
    2ee6:	0f 93       	push	r16
    2ee8:	1f 93       	push	r17
    2eea:	2f 93       	push	r18
    2eec:	3f 93       	push	r19
    2eee:	4f 93       	push	r20
    2ef0:	5f 93       	push	r21
    2ef2:	6f 93       	push	r22
    2ef4:	7f 93       	push	r23
    2ef6:	8f 93       	push	r24
    2ef8:	9f 93       	push	r25
    2efa:	af 93       	push	r26
    2efc:	bf 93       	push	r27
    2efe:	ef 93       	push	r30
    2f00:	ff 93       	push	r31
    2f02:	cf 93       	push	r28
    2f04:	df 93       	push	r29
    2f06:	cd b7       	in	r28, 0x3d	; 61
    2f08:	de b7       	in	r29, 0x3e	; 62
    2f0a:	6c 97       	sbiw	r28, 0x1c	; 28
    2f0c:	de bf       	out	0x3e, r29	; 62
    2f0e:	cd bf       	out	0x3d, r28	; 61
    2f10:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2f14:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2f18:	83 ff       	sbrs	r24, 3
    2f1a:	17 c1       	rjmp	.+558    	; 0x314a <__vector_11+0x276>
    2f1c:	68 e0       	ldi	r22, 0x08	; 8
    2f1e:	ce 01       	movw	r24, r28
    2f20:	45 96       	adiw	r24, 0x15	; 21
    2f22:	0e 94 29 15 	call	0x2a52	; 0x2a52 <_ZL4RecvPVhh>
    2f26:	82 ef       	ldi	r24, 0xF2	; 242
    2f28:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2f2c:	8d 89       	ldd	r24, Y+21	; 0x15
    2f2e:	87 ff       	sbrs	r24, 7
    2f30:	05 c0       	rjmp	.+10     	; 0x2f3c <__vector_11+0x68>
    2f32:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2f36:	90 ff       	sbrs	r25, 0
    2f38:	fc cf       	rjmp	.-8      	; 0x2f32 <__vector_11+0x5e>
    2f3a:	03 c0       	rjmp	.+6      	; 0x2f42 <__vector_11+0x6e>
    2f3c:	9e ef       	ldi	r25, 0xFE	; 254
    2f3e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2f42:	98 2f       	mov	r25, r24
    2f44:	90 76       	andi	r25, 0x60	; 96
    2f46:	09 f0       	breq	.+2      	; 0x2f4a <__vector_11+0x76>
    2f48:	d8 c0       	rjmp	.+432    	; 0x30fa <__vector_11+0x226>
    2f4a:	9e 89       	ldd	r25, Y+22	; 0x16
    2f4c:	4f 89       	ldd	r20, Y+23	; 0x17
    2f4e:	58 8d       	ldd	r21, Y+24	; 0x18
    2f50:	2f 89       	ldd	r18, Y+23	; 0x17
    2f52:	18 8d       	ldd	r17, Y+24	; 0x18
    2f54:	91 11       	cpse	r25, r1
    2f56:	0c c0       	rjmp	.+24     	; 0x2f70 <__vector_11+0x9c>
    2f58:	80 38       	cpi	r24, 0x80	; 128
    2f5a:	29 f4       	brne	.+10     	; 0x2f66 <__vector_11+0x92>
    2f5c:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <_usbCurrentStatus>
    2f60:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2f64:	02 c0       	rjmp	.+4      	; 0x2f6a <__vector_11+0x96>
    2f66:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2f6a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2f6e:	e6 c0       	rjmp	.+460    	; 0x313c <__vector_11+0x268>
    2f70:	91 30       	cpi	r25, 0x01	; 1
    2f72:	51 f4       	brne	.+20     	; 0x2f88 <__vector_11+0xb4>
    2f74:	81 11       	cpse	r24, r1
    2f76:	e2 c0       	rjmp	.+452    	; 0x313c <__vector_11+0x268>
    2f78:	41 30       	cpi	r20, 0x01	; 1
    2f7a:	51 05       	cpc	r21, r1
    2f7c:	09 f0       	breq	.+2      	; 0x2f80 <__vector_11+0xac>
    2f7e:	de c0       	rjmp	.+444    	; 0x313c <__vector_11+0x268>
    2f80:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <_usbCurrentStatus>
    2f84:	8d 7f       	andi	r24, 0xFD	; 253
    2f86:	0b c0       	rjmp	.+22     	; 0x2f9e <__vector_11+0xca>
    2f88:	93 30       	cpi	r25, 0x03	; 3
    2f8a:	61 f4       	brne	.+24     	; 0x2fa4 <__vector_11+0xd0>
    2f8c:	81 11       	cpse	r24, r1
    2f8e:	d6 c0       	rjmp	.+428    	; 0x313c <__vector_11+0x268>
    2f90:	41 30       	cpi	r20, 0x01	; 1
    2f92:	51 05       	cpc	r21, r1
    2f94:	09 f0       	breq	.+2      	; 0x2f98 <__vector_11+0xc4>
    2f96:	d2 c0       	rjmp	.+420    	; 0x313c <__vector_11+0x268>
    2f98:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <_usbCurrentStatus>
    2f9c:	82 60       	ori	r24, 0x02	; 2
    2f9e:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <_usbCurrentStatus>
    2fa2:	cc c0       	rjmp	.+408    	; 0x313c <__vector_11+0x268>
    2fa4:	95 30       	cpi	r25, 0x05	; 5
    2fa6:	49 f4       	brne	.+18     	; 0x2fba <__vector_11+0xe6>
    2fa8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2fac:	80 ff       	sbrs	r24, 0
    2fae:	fc cf       	rjmp	.-8      	; 0x2fa8 <__vector_11+0xd4>
    2fb0:	82 2f       	mov	r24, r18
    2fb2:	80 68       	ori	r24, 0x80	; 128
    2fb4:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    2fb8:	c1 c0       	rjmp	.+386    	; 0x313c <__vector_11+0x268>
    2fba:	96 30       	cpi	r25, 0x06	; 6
    2fbc:	09 f0       	breq	.+2      	; 0x2fc0 <__vector_11+0xec>
    2fbe:	70 c0       	rjmp	.+224    	; 0x30a0 <__vector_11+0x1cc>
    2fc0:	eb 8c       	ldd	r14, Y+27	; 0x1b
    2fc2:	fc 8c       	ldd	r15, Y+28	; 0x1c
    2fc4:	12 30       	cpi	r17, 0x02	; 2
    2fc6:	69 f5       	brne	.+90     	; 0x3022 <__vector_11+0x14e>
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <_Z11InitControli>
    2fd0:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_ZL14SendInterfacesv>
    2fd4:	99 e0       	ldi	r25, 0x09	; 9
    2fd6:	9e 01       	movw	r18, r28
    2fd8:	2f 5f       	subi	r18, 0xFF	; 255
    2fda:	3f 4f       	sbci	r19, 0xFF	; 255
    2fdc:	69 01       	movw	r12, r18
    2fde:	f9 01       	movw	r30, r18
    2fe0:	29 2f       	mov	r18, r25
    2fe2:	11 92       	st	Z+, r1
    2fe4:	2a 95       	dec	r18
    2fe6:	e9 f7       	brne	.-6      	; 0x2fe2 <__vector_11+0x10e>
    2fe8:	99 83       	std	Y+1, r25	; 0x01
    2fea:	1a 83       	std	Y+2, r17	; 0x02
    2fec:	91 e0       	ldi	r25, 0x01	; 1
    2fee:	9e 83       	std	Y+6, r25	; 0x06
    2ff0:	90 ea       	ldi	r25, 0xA0	; 160
    2ff2:	98 87       	std	Y+8, r25	; 0x08
    2ff4:	9a ef       	ldi	r25, 0xFA	; 250
    2ff6:	99 87       	std	Y+9, r25	; 0x09
    2ff8:	20 91 96 04 	lds	r18, 0x0496	; 0x800496 <_ZL6_cmark>
    2ffc:	30 91 97 04 	lds	r19, 0x0497	; 0x800497 <_ZL6_cmark+0x1>
    3000:	27 5f       	subi	r18, 0xF7	; 247
    3002:	3f 4f       	sbci	r19, 0xFF	; 255
    3004:	3c 83       	std	Y+4, r19	; 0x04
    3006:	2b 83       	std	Y+3, r18	; 0x03
    3008:	8d 83       	std	Y+5, r24	; 0x05
    300a:	c7 01       	movw	r24, r14
    300c:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <_Z11InitControli>
    3010:	49 e0       	ldi	r20, 0x09	; 9
    3012:	50 e0       	ldi	r21, 0x00	; 0
    3014:	b6 01       	movw	r22, r12
    3016:	80 e0       	ldi	r24, 0x00	; 0
    3018:	0e 94 10 17 	call	0x2e20	; 0x2e20 <_Z15USB_SendControlhPKvi>
    301c:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_ZL14SendInterfacesv>
    3020:	8d c0       	rjmp	.+282    	; 0x313c <__vector_11+0x268>
    3022:	c7 01       	movw	r24, r14
    3024:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <_Z11InitControli>
    3028:	0e 94 76 1d 	call	0x3aec	; 0x3aec <_Z12PluggableUSBv>
    302c:	be 01       	movw	r22, r28
    302e:	6b 5e       	subi	r22, 0xEB	; 235
    3030:	7f 4f       	sbci	r23, 0xFF	; 255
    3032:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    3036:	00 97       	sbiw	r24, 0x00	; 0
    3038:	19 f0       	breq	.+6      	; 0x3040 <__vector_11+0x16c>
    303a:	0c f0       	brlt	.+2      	; 0x303e <__vector_11+0x16a>
    303c:	7f c0       	rjmp	.+254    	; 0x313c <__vector_11+0x268>
    303e:	82 c0       	rjmp	.+260    	; 0x3144 <__vector_11+0x270>
    3040:	11 30       	cpi	r17, 0x01	; 1
    3042:	09 f4       	brne	.+2      	; 0x3046 <__vector_11+0x172>
    3044:	70 c0       	rjmp	.+224    	; 0x3126 <__vector_11+0x252>
    3046:	13 30       	cpi	r17, 0x03	; 3
    3048:	09 f0       	breq	.+2      	; 0x304c <__vector_11+0x178>
    304a:	7c c0       	rjmp	.+248    	; 0x3144 <__vector_11+0x270>
    304c:	8f 89       	ldd	r24, Y+23	; 0x17
    304e:	88 23       	and	r24, r24
    3050:	09 f4       	brne	.+2      	; 0x3054 <__vector_11+0x180>
    3052:	6c c0       	rjmp	.+216    	; 0x312c <__vector_11+0x258>
    3054:	82 30       	cpi	r24, 0x02	; 2
    3056:	29 f4       	brne	.+10     	; 0x3062 <__vector_11+0x18e>
    3058:	40 e8       	ldi	r20, 0x80	; 128
    305a:	60 e1       	ldi	r22, 0x10	; 16
    305c:	88 ee       	ldi	r24, 0xE8	; 232
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	06 c0       	rjmp	.+12     	; 0x306e <__vector_11+0x19a>
    3062:	81 30       	cpi	r24, 0x01	; 1
    3064:	39 f4       	brne	.+14     	; 0x3074 <__vector_11+0x1a0>
    3066:	40 e8       	ldi	r20, 0x80	; 128
    3068:	6b e0       	ldi	r22, 0x0B	; 11
    306a:	8c ed       	ldi	r24, 0xDC	; 220
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <_ZL24USB_SendStringDescriptorPKhhh>
    3072:	56 c0       	rjmp	.+172    	; 0x3120 <__vector_11+0x24c>
    3074:	83 30       	cpi	r24, 0x03	; 3
    3076:	09 f0       	breq	.+2      	; 0x307a <__vector_11+0x1a6>
    3078:	65 c0       	rjmp	.+202    	; 0x3144 <__vector_11+0x270>
    307a:	0e 94 76 1d 	call	0x3aec	; 0x3aec <_Z12PluggableUSBv>
    307e:	8e 01       	movw	r16, r28
    3080:	0f 5f       	subi	r16, 0xFF	; 255
    3082:	1f 4f       	sbci	r17, 0xFF	; 255
    3084:	b8 01       	movw	r22, r16
    3086:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <_ZN13PluggableUSB_12getShortNameEPc>
    308a:	f8 01       	movw	r30, r16
    308c:	01 90       	ld	r0, Z+
    308e:	00 20       	and	r0, r0
    3090:	e9 f7       	brne	.-6      	; 0x308c <__vector_11+0x1b8>
    3092:	31 97       	sbiw	r30, 0x01	; 1
    3094:	bf 01       	movw	r22, r30
    3096:	60 1b       	sub	r22, r16
    3098:	71 0b       	sbc	r23, r17
    309a:	40 e0       	ldi	r20, 0x00	; 0
    309c:	c8 01       	movw	r24, r16
    309e:	e7 cf       	rjmp	.-50     	; 0x306e <__vector_11+0x19a>
    30a0:	97 30       	cpi	r25, 0x07	; 7
    30a2:	09 f4       	brne	.+2      	; 0x30a6 <__vector_11+0x1d2>
    30a4:	4f c0       	rjmp	.+158    	; 0x3144 <__vector_11+0x270>
    30a6:	98 30       	cpi	r25, 0x08	; 8
    30a8:	21 f4       	brne	.+8      	; 0x30b2 <__vector_11+0x1de>
    30aa:	81 e0       	ldi	r24, 0x01	; 1
    30ac:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    30b0:	45 c0       	rjmp	.+138    	; 0x313c <__vector_11+0x268>
    30b2:	99 30       	cpi	r25, 0x09	; 9
    30b4:	09 f0       	breq	.+2      	; 0x30b8 <__vector_11+0x1e4>
    30b6:	42 c0       	rjmp	.+132    	; 0x313c <__vector_11+0x268>
    30b8:	83 70       	andi	r24, 0x03	; 3
    30ba:	09 f0       	breq	.+2      	; 0x30be <__vector_11+0x1ea>
    30bc:	43 c0       	rjmp	.+134    	; 0x3144 <__vector_11+0x270>
    30be:	eb e0       	ldi	r30, 0x0B	; 11
    30c0:	f1 e0       	ldi	r31, 0x01	; 1
    30c2:	81 e0       	ldi	r24, 0x01	; 1
    30c4:	31 e0       	ldi	r19, 0x01	; 1
    30c6:	96 e3       	ldi	r25, 0x36	; 54
    30c8:	20 81       	ld	r18, Z
    30ca:	21 11       	cpse	r18, r1
    30cc:	09 c0       	rjmp	.+18     	; 0x30e0 <__vector_11+0x20c>
    30ce:	8e e7       	ldi	r24, 0x7E	; 126
    30d0:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    30d4:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    30d8:	8f 89       	ldd	r24, Y+23	; 0x17
    30da:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <_usbConfiguration>
    30de:	2e c0       	rjmp	.+92     	; 0x313c <__vector_11+0x268>
    30e0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    30e4:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    30e8:	21 91       	ld	r18, Z+
    30ea:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    30ee:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    30f2:	8f 5f       	subi	r24, 0xFF	; 255
    30f4:	87 30       	cpi	r24, 0x07	; 7
    30f6:	41 f7       	brne	.-48     	; 0x30c8 <__vector_11+0x1f4>
    30f8:	ea cf       	rjmp	.-44     	; 0x30ce <__vector_11+0x1fa>
    30fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30fe:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <_Z11InitControli>
    3102:	89 8d       	ldd	r24, Y+25	; 0x19
    3104:	81 11       	cpse	r24, r1
    3106:	05 c0       	rjmp	.+10     	; 0x3112 <__vector_11+0x23e>
    3108:	ce 01       	movw	r24, r28
    310a:	45 96       	adiw	r24, 0x15	; 21
    310c:	0e 94 4d 1c 	call	0x389a	; 0x389a <_Z9CDC_SetupR8USBSetup>
    3110:	07 c0       	rjmp	.+14     	; 0x3120 <__vector_11+0x24c>
    3112:	0e 94 76 1d 	call	0x3aec	; 0x3aec <_Z12PluggableUSBv>
    3116:	be 01       	movw	r22, r28
    3118:	6b 5e       	subi	r22, 0xEB	; 235
    311a:	7f 4f       	sbci	r23, 0xFF	; 255
    311c:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <_ZN13PluggableUSB_5setupER8USBSetup>
    3120:	88 23       	and	r24, r24
    3122:	81 f0       	breq	.+32     	; 0x3144 <__vector_11+0x270>
    3124:	0b c0       	rjmp	.+22     	; 0x313c <__vector_11+0x268>
    3126:	6a ec       	ldi	r22, 0xCA	; 202
    3128:	70 e0       	ldi	r23, 0x00	; 0
    312a:	02 c0       	rjmp	.+4      	; 0x3130 <__vector_11+0x25c>
    312c:	69 ef       	ldi	r22, 0xF9	; 249
    312e:	70 e0       	ldi	r23, 0x00	; 0
    3130:	fb 01       	movw	r30, r22
    3132:	44 91       	lpm	r20, Z
    3134:	50 e0       	ldi	r21, 0x00	; 0
    3136:	80 e8       	ldi	r24, 0x80	; 128
    3138:	0e 94 10 17 	call	0x2e20	; 0x2e20 <_Z15USB_SendControlhPKvi>
    313c:	8e ef       	ldi	r24, 0xFE	; 254
    313e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3142:	03 c0       	rjmp	.+6      	; 0x314a <__vector_11+0x276>
    3144:	81 e2       	ldi	r24, 0x21	; 33
    3146:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    314a:	6c 96       	adiw	r28, 0x1c	; 28
    314c:	0f b6       	in	r0, 0x3f	; 63
    314e:	f8 94       	cli
    3150:	de bf       	out	0x3e, r29	; 62
    3152:	0f be       	out	0x3f, r0	; 63
    3154:	cd bf       	out	0x3d, r28	; 61
    3156:	df 91       	pop	r29
    3158:	cf 91       	pop	r28
    315a:	ff 91       	pop	r31
    315c:	ef 91       	pop	r30
    315e:	bf 91       	pop	r27
    3160:	af 91       	pop	r26
    3162:	9f 91       	pop	r25
    3164:	8f 91       	pop	r24
    3166:	7f 91       	pop	r23
    3168:	6f 91       	pop	r22
    316a:	5f 91       	pop	r21
    316c:	4f 91       	pop	r20
    316e:	3f 91       	pop	r19
    3170:	2f 91       	pop	r18
    3172:	1f 91       	pop	r17
    3174:	0f 91       	pop	r16
    3176:	ff 90       	pop	r15
    3178:	ef 90       	pop	r14
    317a:	df 90       	pop	r13
    317c:	cf 90       	pop	r12
    317e:	0f 90       	pop	r0
    3180:	0f be       	out	0x3f, r0	; 63
    3182:	0f 90       	pop	r0
    3184:	1f 90       	pop	r1
    3186:	18 95       	reti

00003188 <_Z9USB_Flushh>:
    3188:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    318c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    3190:	88 23       	and	r24, r24
    3192:	19 f0       	breq	.+6      	; 0x319a <_Z9USB_Flushh+0x12>
    3194:	8a e3       	ldi	r24, 0x3A	; 58
    3196:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    319a:	08 95       	ret

0000319c <__vector_10>:
    319c:	1f 92       	push	r1
    319e:	0f 92       	push	r0
    31a0:	0f b6       	in	r0, 0x3f	; 63
    31a2:	0f 92       	push	r0
    31a4:	11 24       	eor	r1, r1
    31a6:	2f 93       	push	r18
    31a8:	3f 93       	push	r19
    31aa:	4f 93       	push	r20
    31ac:	5f 93       	push	r21
    31ae:	6f 93       	push	r22
    31b0:	7f 93       	push	r23
    31b2:	8f 93       	push	r24
    31b4:	9f 93       	push	r25
    31b6:	af 93       	push	r26
    31b8:	bf 93       	push	r27
    31ba:	cf 93       	push	r28
    31bc:	ef 93       	push	r30
    31be:	ff 93       	push	r31
    31c0:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    31c4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    31c8:	83 7f       	andi	r24, 0xF3	; 243
    31ca:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    31ce:	c3 ff       	sbrs	r28, 3
    31d0:	0f c0       	rjmp	.+30     	; 0x31f0 <__vector_10+0x54>
    31d2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    31dc:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    31e0:	82 e3       	ldi	r24, 0x32	; 50
    31e2:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    31e6:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <_usbConfiguration>
    31ea:	88 e0       	ldi	r24, 0x08	; 8
    31ec:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    31f0:	c2 ff       	sbrs	r28, 2
    31f2:	19 c0       	rjmp	.+50     	; 0x3226 <__vector_10+0x8a>
    31f4:	83 e0       	ldi	r24, 0x03	; 3
    31f6:	0e 94 c4 18 	call	0x3188	; 0x3188 <_Z9USB_Flushh>
    31fa:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <TxLEDPulse>
    31fe:	88 23       	and	r24, r24
    3200:	39 f0       	breq	.+14     	; 0x3210 <__vector_10+0x74>
    3202:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <TxLEDPulse>
    3206:	81 50       	subi	r24, 0x01	; 1
    3208:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <TxLEDPulse>
    320c:	88 23       	and	r24, r24
    320e:	89 f1       	breq	.+98     	; 0x3272 <__vector_10+0xd6>
    3210:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <RxLEDPulse>
    3214:	88 23       	and	r24, r24
    3216:	39 f0       	breq	.+14     	; 0x3226 <__vector_10+0x8a>
    3218:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <RxLEDPulse>
    321c:	81 50       	subi	r24, 0x01	; 1
    321e:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <RxLEDPulse>
    3222:	88 23       	and	r24, r24
    3224:	41 f1       	breq	.+80     	; 0x3276 <__vector_10+0xda>
    3226:	c4 ff       	sbrs	r28, 4
    3228:	10 c0       	rjmp	.+32     	; 0x324a <__vector_10+0xae>
    322a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    322e:	8e 7e       	andi	r24, 0xEE	; 238
    3230:	81 60       	ori	r24, 0x01	; 1
    3232:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3236:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    323a:	8f 7e       	andi	r24, 0xEF	; 239
    323c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    3240:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <_usbSuspendState>
    3244:	8e 7e       	andi	r24, 0xEE	; 238
    3246:	80 61       	ori	r24, 0x10	; 16
    3248:	11 c0       	rjmp	.+34     	; 0x326c <__vector_10+0xd0>
    324a:	c0 ff       	sbrs	r28, 0
    324c:	16 c0       	rjmp	.+44     	; 0x327a <__vector_10+0xde>
    324e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3252:	8e 7e       	andi	r24, 0xEE	; 238
    3254:	80 61       	ori	r24, 0x10	; 16
    3256:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    325a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    325e:	8e 7e       	andi	r24, 0xEE	; 238
    3260:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    3264:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <_usbSuspendState>
    3268:	8e 7e       	andi	r24, 0xEE	; 238
    326a:	81 60       	ori	r24, 0x01	; 1
    326c:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <_usbSuspendState>
    3270:	04 c0       	rjmp	.+8      	; 0x327a <__vector_10+0xde>
    3272:	5d 9a       	sbi	0x0b, 5	; 11
    3274:	cd cf       	rjmp	.-102    	; 0x3210 <__vector_10+0x74>
    3276:	28 9a       	sbi	0x05, 0	; 5
    3278:	d6 cf       	rjmp	.-84     	; 0x3226 <__vector_10+0x8a>
    327a:	ff 91       	pop	r31
    327c:	ef 91       	pop	r30
    327e:	cf 91       	pop	r28
    3280:	bf 91       	pop	r27
    3282:	af 91       	pop	r26
    3284:	9f 91       	pop	r25
    3286:	8f 91       	pop	r24
    3288:	7f 91       	pop	r23
    328a:	6f 91       	pop	r22
    328c:	5f 91       	pop	r21
    328e:	4f 91       	pop	r20
    3290:	3f 91       	pop	r19
    3292:	2f 91       	pop	r18
    3294:	0f 90       	pop	r0
    3296:	0f be       	out	0x3f, r0	; 63
    3298:	0f 90       	pop	r0
    329a:	1f 90       	pop	r1
    329c:	18 95       	reti

0000329e <_ZN10USBDevice_6attachEv>:
{
}

void USBDevice_::attach()
{
	_usbConfiguration = 0;
    329e:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <_usbConfiguration>
	_usbCurrentStatus = 0;
    32a2:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <_usbCurrentStatus>
	_usbSuspendState = 0;
    32a6:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <_usbSuspendState>
	USB_ClockEnable();
    32aa:	0e 94 99 15 	call	0x2b32	; 0x2b32 <_ZL15USB_ClockEnablev>

	UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear already pending WAKEUP / SUSPEND requests
    32ae:	e1 ee       	ldi	r30, 0xE1	; 225
    32b0:	f0 e0       	ldi	r31, 0x00	; 0
    32b2:	80 81       	ld	r24, Z
    32b4:	8e 7e       	andi	r24, 0xEE	; 238
    32b6:	80 83       	st	Z, r24
	UDIEN = (1<<EORSTE) | (1<<SOFE) | (1<<SUSPE);	// Enable interrupts for EOR (End of Reset), SOF (start of frame) and SUSPEND
    32b8:	8d e0       	ldi	r24, 0x0D	; 13
    32ba:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	
	TX_RX_LED_INIT;
    32be:	55 9a       	sbi	0x0a, 5	; 10
    32c0:	20 9a       	sbi	0x04, 0	; 4
    32c2:	08 95       	ret

000032c4 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    32c4:	1f 92       	push	r1
    32c6:	0f 92       	push	r0
    32c8:	0f b6       	in	r0, 0x3f	; 63
    32ca:	0f 92       	push	r0
    32cc:	11 24       	eor	r1, r1
    32ce:	2f 93       	push	r18
    32d0:	3f 93       	push	r19
    32d2:	8f 93       	push	r24
    32d4:	9f 93       	push	r25
    32d6:	af 93       	push	r26
    32d8:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    32da:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <timer0_millis>
    32de:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <timer0_millis+0x1>
    32e2:	a0 91 a0 04 	lds	r26, 0x04A0	; 0x8004a0 <timer0_millis+0x2>
    32e6:	b0 91 a1 04 	lds	r27, 0x04A1	; 0x8004a1 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    32ea:	30 91 9d 04 	lds	r19, 0x049D	; 0x80049d <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    32ee:	23 e0       	ldi	r18, 0x03	; 3
    32f0:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    32f2:	2d 37       	cpi	r18, 0x7D	; 125
    32f4:	20 f4       	brcc	.+8      	; 0x32fe <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    32f6:	01 96       	adiw	r24, 0x01	; 1
    32f8:	a1 1d       	adc	r26, r1
    32fa:	b1 1d       	adc	r27, r1
    32fc:	05 c0       	rjmp	.+10     	; 0x3308 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    32fe:	26 e8       	ldi	r18, 0x86	; 134
    3300:	23 0f       	add	r18, r19
		m += 1;
    3302:	02 96       	adiw	r24, 0x02	; 2
    3304:	a1 1d       	adc	r26, r1
    3306:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    3308:	20 93 9d 04 	sts	0x049D, r18	; 0x80049d <timer0_fract>
	timer0_millis = m;
    330c:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <timer0_millis>
    3310:	90 93 9f 04 	sts	0x049F, r25	; 0x80049f <timer0_millis+0x1>
    3314:	a0 93 a0 04 	sts	0x04A0, r26	; 0x8004a0 <timer0_millis+0x2>
    3318:	b0 93 a1 04 	sts	0x04A1, r27	; 0x8004a1 <timer0_millis+0x3>
	timer0_overflow_count++;
    331c:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <timer0_overflow_count>
    3320:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <timer0_overflow_count+0x1>
    3324:	a0 91 a4 04 	lds	r26, 0x04A4	; 0x8004a4 <timer0_overflow_count+0x2>
    3328:	b0 91 a5 04 	lds	r27, 0x04A5	; 0x8004a5 <timer0_overflow_count+0x3>
    332c:	01 96       	adiw	r24, 0x01	; 1
    332e:	a1 1d       	adc	r26, r1
    3330:	b1 1d       	adc	r27, r1
    3332:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <timer0_overflow_count>
    3336:	90 93 a3 04 	sts	0x04A3, r25	; 0x8004a3 <timer0_overflow_count+0x1>
    333a:	a0 93 a4 04 	sts	0x04A4, r26	; 0x8004a4 <timer0_overflow_count+0x2>
    333e:	b0 93 a5 04 	sts	0x04A5, r27	; 0x8004a5 <timer0_overflow_count+0x3>
}
    3342:	bf 91       	pop	r27
    3344:	af 91       	pop	r26
    3346:	9f 91       	pop	r25
    3348:	8f 91       	pop	r24
    334a:	3f 91       	pop	r19
    334c:	2f 91       	pop	r18
    334e:	0f 90       	pop	r0
    3350:	0f be       	out	0x3f, r0	; 63
    3352:	0f 90       	pop	r0
    3354:	1f 90       	pop	r1
    3356:	18 95       	reti

00003358 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    3358:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    335a:	f8 94       	cli
	m = timer0_millis;
    335c:	60 91 9e 04 	lds	r22, 0x049E	; 0x80049e <timer0_millis>
    3360:	70 91 9f 04 	lds	r23, 0x049F	; 0x80049f <timer0_millis+0x1>
    3364:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <timer0_millis+0x2>
    3368:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <timer0_millis+0x3>
	SREG = oldSREG;
    336c:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    336e:	08 95       	ret

00003370 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    3370:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    3372:	f8 94       	cli
	m = timer0_overflow_count;
    3374:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <timer0_overflow_count>
    3378:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <timer0_overflow_count+0x1>
    337c:	a0 91 a4 04 	lds	r26, 0x04A4	; 0x8004a4 <timer0_overflow_count+0x2>
    3380:	b0 91 a5 04 	lds	r27, 0x04A5	; 0x8004a5 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    3384:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    3386:	a8 9b       	sbis	0x15, 0	; 21
    3388:	05 c0       	rjmp	.+10     	; 0x3394 <micros+0x24>
    338a:	2f 3f       	cpi	r18, 0xFF	; 255
    338c:	19 f0       	breq	.+6      	; 0x3394 <micros+0x24>
		m++;
    338e:	01 96       	adiw	r24, 0x01	; 1
    3390:	a1 1d       	adc	r26, r1
    3392:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    3394:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    3396:	ba 2f       	mov	r27, r26
    3398:	a9 2f       	mov	r26, r25
    339a:	98 2f       	mov	r25, r24
    339c:	88 27       	eor	r24, r24
    339e:	82 0f       	add	r24, r18
    33a0:	91 1d       	adc	r25, r1
    33a2:	a1 1d       	adc	r26, r1
    33a4:	b1 1d       	adc	r27, r1
    33a6:	bc 01       	movw	r22, r24
    33a8:	cd 01       	movw	r24, r26
    33aa:	42 e0       	ldi	r20, 0x02	; 2
    33ac:	66 0f       	add	r22, r22
    33ae:	77 1f       	adc	r23, r23
    33b0:	88 1f       	adc	r24, r24
    33b2:	99 1f       	adc	r25, r25
    33b4:	4a 95       	dec	r20
    33b6:	d1 f7       	brne	.-12     	; 0x33ac <micros+0x3c>
}
    33b8:	08 95       	ret

000033ba <delay>:

void delay(unsigned long ms)
{
    33ba:	8f 92       	push	r8
    33bc:	9f 92       	push	r9
    33be:	af 92       	push	r10
    33c0:	bf 92       	push	r11
    33c2:	cf 92       	push	r12
    33c4:	df 92       	push	r13
    33c6:	ef 92       	push	r14
    33c8:	ff 92       	push	r15
    33ca:	6b 01       	movw	r12, r22
    33cc:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    33ce:	0e 94 b8 19 	call	0x3370	; 0x3370 <micros>
    33d2:	4b 01       	movw	r8, r22
    33d4:	5c 01       	movw	r10, r24

	while (ms > 0) {
    33d6:	c1 14       	cp	r12, r1
    33d8:	d1 04       	cpc	r13, r1
    33da:	e1 04       	cpc	r14, r1
    33dc:	f1 04       	cpc	r15, r1
    33de:	01 f1       	breq	.+64     	; 0x3420 <delay+0x66>
		yield();
    33e0:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    33e4:	0e 94 b8 19 	call	0x3370	; 0x3370 <micros>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	88 19       	sub	r24, r8
    33ee:	99 09       	sbc	r25, r9
    33f0:	aa 09       	sbc	r26, r10
    33f2:	bb 09       	sbc	r27, r11
    33f4:	88 3e       	cpi	r24, 0xE8	; 232
    33f6:	93 40       	sbci	r25, 0x03	; 3
    33f8:	a1 05       	cpc	r26, r1
    33fa:	b1 05       	cpc	r27, r1
    33fc:	60 f3       	brcs	.-40     	; 0x33d6 <delay+0x1c>
			ms--;
    33fe:	21 e0       	ldi	r18, 0x01	; 1
    3400:	c2 1a       	sub	r12, r18
    3402:	d1 08       	sbc	r13, r1
    3404:	e1 08       	sbc	r14, r1
    3406:	f1 08       	sbc	r15, r1
			start += 1000;
    3408:	88 ee       	ldi	r24, 0xE8	; 232
    340a:	88 0e       	add	r8, r24
    340c:	83 e0       	ldi	r24, 0x03	; 3
    340e:	98 1e       	adc	r9, r24
    3410:	a1 1c       	adc	r10, r1
    3412:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    3414:	c1 14       	cp	r12, r1
    3416:	d1 04       	cpc	r13, r1
    3418:	e1 04       	cpc	r14, r1
    341a:	f1 04       	cpc	r15, r1
    341c:	19 f7       	brne	.-58     	; 0x33e4 <delay+0x2a>
    341e:	db cf       	rjmp	.-74     	; 0x33d6 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    3420:	ff 90       	pop	r15
    3422:	ef 90       	pop	r14
    3424:	df 90       	pop	r13
    3426:	cf 90       	pop	r12
    3428:	bf 90       	pop	r11
    342a:	af 90       	pop	r10
    342c:	9f 90       	pop	r9
    342e:	8f 90       	pop	r8
    3430:	08 95       	ret

00003432 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    3432:	82 30       	cpi	r24, 0x02	; 2
    3434:	91 05       	cpc	r25, r1
    3436:	38 f0       	brcs	.+14     	; 0x3446 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    3438:	88 0f       	add	r24, r24
    343a:	99 1f       	adc	r25, r25
    343c:	88 0f       	add	r24, r24
    343e:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    3440:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    3442:	01 97       	sbiw	r24, 0x01	; 1
    3444:	f1 f7       	brne	.-4      	; 0x3442 <delayMicroseconds+0x10>
    3446:	08 95       	ret

00003448 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3448:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    344a:	84 b5       	in	r24, 0x24	; 36
    344c:	82 60       	ori	r24, 0x02	; 2
    344e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3450:	84 b5       	in	r24, 0x24	; 36
    3452:	81 60       	ori	r24, 0x01	; 1
    3454:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3456:	85 b5       	in	r24, 0x25	; 37
    3458:	82 60       	ori	r24, 0x02	; 2
    345a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    345c:	85 b5       	in	r24, 0x25	; 37
    345e:	81 60       	ori	r24, 0x01	; 1
    3460:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3462:	ee e6       	ldi	r30, 0x6E	; 110
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	80 81       	ld	r24, Z
    3468:	81 60       	ori	r24, 0x01	; 1
    346a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    346c:	e1 e8       	ldi	r30, 0x81	; 129
    346e:	f0 e0       	ldi	r31, 0x00	; 0
    3470:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3472:	80 81       	ld	r24, Z
    3474:	82 60       	ori	r24, 0x02	; 2
    3476:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3478:	80 81       	ld	r24, Z
    347a:	81 60       	ori	r24, 0x01	; 1
    347c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    347e:	e0 e8       	ldi	r30, 0x80	; 128
    3480:	f0 e0       	ldi	r31, 0x00	; 0
    3482:	80 81       	ld	r24, Z
    3484:	81 60       	ori	r24, 0x01	; 1
    3486:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    3488:	e1 e9       	ldi	r30, 0x91	; 145
    348a:	f0 e0       	ldi	r31, 0x00	; 0
    348c:	80 81       	ld	r24, Z
    348e:	82 60       	ori	r24, 0x02	; 2
    3490:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    3492:	80 81       	ld	r24, Z
    3494:	81 60       	ori	r24, 0x01	; 1
    3496:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    3498:	e0 e9       	ldi	r30, 0x90	; 144
    349a:	f0 e0       	ldi	r31, 0x00	; 0
    349c:	80 81       	ld	r24, Z
    349e:	81 60       	ori	r24, 0x01	; 1
    34a0:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
    34a2:	e1 ec       	ldi	r30, 0xC1	; 193
    34a4:	f0 e0       	ldi	r31, 0x00	; 0
    34a6:	80 81       	ld	r24, Z
    34a8:	84 60       	ori	r24, 0x04	; 4
    34aa:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
    34ac:	80 81       	ld	r24, Z
    34ae:	82 60       	ori	r24, 0x02	; 2
    34b0:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    34b2:	80 81       	ld	r24, Z
    34b4:	81 60       	ori	r24, 0x01	; 1
    34b6:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
    34b8:	e3 ec       	ldi	r30, 0xC3	; 195
    34ba:	f0 e0       	ldi	r31, 0x00	; 0
    34bc:	80 81       	ld	r24, Z
    34be:	81 60       	ori	r24, 0x01	; 1
    34c0:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
    34c2:	e0 ec       	ldi	r30, 0xC0	; 192
    34c4:	f0 e0       	ldi	r31, 0x00	; 0
    34c6:	80 81       	ld	r24, Z
    34c8:	82 60       	ori	r24, 0x02	; 2
    34ca:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
    34cc:	e2 ec       	ldi	r30, 0xC2	; 194
    34ce:	f0 e0       	ldi	r31, 0x00	; 0
    34d0:	80 81       	ld	r24, Z
    34d2:	81 60       	ori	r24, 0x01	; 1
    34d4:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    34d6:	ea e7       	ldi	r30, 0x7A	; 122
    34d8:	f0 e0       	ldi	r31, 0x00	; 0
    34da:	80 81       	ld	r24, Z
    34dc:	84 60       	ori	r24, 0x04	; 4
    34de:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    34e0:	80 81       	ld	r24, Z
    34e2:	82 60       	ori	r24, 0x02	; 2
    34e4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    34e6:	80 81       	ld	r24, Z
    34e8:	81 60       	ori	r24, 0x01	; 1
    34ea:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    34ec:	80 81       	ld	r24, Z
    34ee:	80 68       	ori	r24, 0x80	; 128
    34f0:	80 83       	st	Z, r24
    34f2:	08 95       	ret

000034f4 <analogRead>:
{
	uint8_t low, high;

#if defined(analogPinToChannel)
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
    34f4:	82 31       	cpi	r24, 0x12	; 18
    34f6:	08 f0       	brcs	.+2      	; 0x34fa <analogRead+0x6>
    34f8:	82 51       	subi	r24, 0x12	; 18
#endif
	pin = analogPinToChannel(pin);
    34fa:	e8 2f       	mov	r30, r24
    34fc:	f0 e0       	ldi	r31, 0x00	; 0
    34fe:	e3 50       	subi	r30, 0x03	; 3
    3500:	ff 4f       	sbci	r31, 0xFF	; 255
    3502:	e4 91       	lpm	r30, Z
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    3504:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    3508:	e3 fb       	bst	r30, 3
    350a:	22 27       	eor	r18, r18
    350c:	20 f9       	bld	r18, 0
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	95 e0       	ldi	r25, 0x05	; 5
    3512:	22 0f       	add	r18, r18
    3514:	33 1f       	adc	r19, r19
    3516:	9a 95       	dec	r25
    3518:	e1 f7       	brne	.-8      	; 0x3512 <analogRead+0x1e>
    351a:	8f 7d       	andi	r24, 0xDF	; 223
    351c:	28 2b       	or	r18, r24
    351e:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    3522:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <analog_reference>
    3526:	20 e4       	ldi	r18, 0x40	; 64
    3528:	82 9f       	mul	r24, r18
    352a:	c0 01       	movw	r24, r0
    352c:	11 24       	eor	r1, r1
    352e:	e7 70       	andi	r30, 0x07	; 7
    3530:	e8 2b       	or	r30, r24
    3532:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    3536:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    353a:	80 64       	ori	r24, 0x40	; 64
    353c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    3540:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3544:	86 fd       	sbrc	r24, 6
    3546:	fc cf       	rjmp	.-8      	; 0x3540 <analogRead+0x4c>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    3548:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    354c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    3550:	90 e0       	ldi	r25, 0x00	; 0
}
    3552:	92 2b       	or	r25, r18
    3554:	08 95       	ret

00003556 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	fc 01       	movw	r30, r24
    355a:	31 97       	sbiw	r30, 0x01	; 1
    355c:	ef 30       	cpi	r30, 0x0F	; 15
    355e:	f1 05       	cpc	r31, r1
    3560:	b0 f5       	brcc	.+108    	; 0x35ce <turnOffPWM+0x78>
    3562:	ea 5a       	subi	r30, 0xAA	; 170
    3564:	ff 4f       	sbci	r31, 0xFF	; 255
    3566:	0c 94 6b 1e 	jmp	0x3cd6	; 0x3cd6 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    356a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    356e:	8f 77       	andi	r24, 0x7F	; 127
    3570:	03 c0       	rjmp	.+6      	; 0x3578 <turnOffPWM+0x22>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3572:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3576:	8f 7d       	andi	r24, 0xDF	; 223
    3578:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    357c:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    357e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3582:	87 7f       	andi	r24, 0xF7	; 247
    3584:	f9 cf       	rjmp	.-14     	; 0x3578 <turnOffPWM+0x22>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3586:	84 b5       	in	r24, 0x24	; 36
    3588:	8f 77       	andi	r24, 0x7F	; 127
    358a:	02 c0       	rjmp	.+4      	; 0x3590 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    358c:	84 b5       	in	r24, 0x24	; 36
    358e:	8f 7d       	andi	r24, 0xDF	; 223
    3590:	84 bd       	out	0x24, r24	; 36
    3592:	08 95       	ret
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    3594:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    3598:	8f 77       	andi	r24, 0x7F	; 127
    359a:	07 c0       	rjmp	.+14     	; 0x35aa <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    359c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    35a0:	8f 7d       	andi	r24, 0xDF	; 223
    35a2:	03 c0       	rjmp	.+6      	; 0x35aa <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    35a4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    35a8:	87 7f       	andi	r24, 0xF7	; 247
    35aa:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    35ae:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    35b0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    35b4:	8f 77       	andi	r24, 0x7F	; 127
    35b6:	03 c0       	rjmp	.+6      	; 0x35be <turnOffPWM+0x68>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    35b8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    35bc:	8f 7d       	andi	r24, 0xDF	; 223
    35be:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    35c2:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
		#endif			
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
    35c4:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    35c8:	87 7f       	andi	r24, 0xF7	; 247
    35ca:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    35ce:	08 95       	ret

000035d0 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    35d0:	cf 93       	push	r28
    35d2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	fc 01       	movw	r30, r24
    35d8:	e8 5d       	subi	r30, 0xD8	; 216
    35da:	fe 4f       	sbci	r31, 0xFE	; 254
    35dc:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    35de:	fc 01       	movw	r30, r24
    35e0:	e9 5b       	subi	r30, 0xB9	; 185
    35e2:	fe 4f       	sbci	r31, 0xFE	; 254
    35e4:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    35e6:	88 23       	and	r24, r24
    35e8:	61 f1       	breq	.+88     	; 0x3642 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	88 0f       	add	r24, r24
    35ee:	99 1f       	adc	r25, r25
    35f0:	fc 01       	movw	r30, r24
    35f2:	ee 57       	subi	r30, 0x7E	; 126
    35f4:	fe 4f       	sbci	r31, 0xFE	; 254
    35f6:	c5 91       	lpm	r28, Z+
    35f8:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    35fa:	fc 01       	movw	r30, r24
    35fc:	ec 58       	subi	r30, 0x8C	; 140
    35fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3600:	a5 91       	lpm	r26, Z+
    3602:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3604:	61 11       	cpse	r22, r1
    3606:	09 c0       	rjmp	.+18     	; 0x361a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3608:	9f b7       	in	r25, 0x3f	; 63
                cli();
    360a:	f8 94       	cli
		*reg &= ~bit;
    360c:	88 81       	ld	r24, Y
    360e:	20 95       	com	r18
    3610:	82 23       	and	r24, r18
    3612:	88 83       	st	Y, r24
		*out &= ~bit;
    3614:	ec 91       	ld	r30, X
    3616:	2e 23       	and	r18, r30
    3618:	0b c0       	rjmp	.+22     	; 0x3630 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    361a:	62 30       	cpi	r22, 0x02	; 2
    361c:	61 f4       	brne	.+24     	; 0x3636 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    361e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3620:	f8 94       	cli
		*reg &= ~bit;
    3622:	88 81       	ld	r24, Y
    3624:	32 2f       	mov	r19, r18
    3626:	30 95       	com	r19
    3628:	83 23       	and	r24, r19
    362a:	88 83       	st	Y, r24
		*out |= bit;
    362c:	ec 91       	ld	r30, X
    362e:	2e 2b       	or	r18, r30
    3630:	2c 93       	st	X, r18
		SREG = oldSREG;
    3632:	9f bf       	out	0x3f, r25	; 63
    3634:	06 c0       	rjmp	.+12     	; 0x3642 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3636:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3638:	f8 94       	cli
		*reg |= bit;
    363a:	e8 81       	ld	r30, Y
    363c:	2e 2b       	or	r18, r30
    363e:	28 83       	st	Y, r18
		SREG = oldSREG;
    3640:	8f bf       	out	0x3f, r24	; 63
	}
}
    3642:	df 91       	pop	r29
    3644:	cf 91       	pop	r28
    3646:	08 95       	ret

00003648 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3648:	1f 93       	push	r17
    364a:	cf 93       	push	r28
    364c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    364e:	28 2f       	mov	r18, r24
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	f9 01       	movw	r30, r18
    3654:	e7 5f       	subi	r30, 0xF7	; 247
    3656:	fe 4f       	sbci	r31, 0xFE	; 254
    3658:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    365a:	f9 01       	movw	r30, r18
    365c:	e8 5d       	subi	r30, 0xD8	; 216
    365e:	fe 4f       	sbci	r31, 0xFE	; 254
    3660:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3662:	f9 01       	movw	r30, r18
    3664:	e9 5b       	subi	r30, 0xB9	; 185
    3666:	fe 4f       	sbci	r31, 0xFE	; 254
    3668:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    366a:	cc 23       	and	r28, r28
    366c:	c1 f0       	breq	.+48     	; 0x369e <digitalWrite+0x56>
    366e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3670:	81 11       	cpse	r24, r1
    3672:	0e 94 ab 1a 	call	0x3556	; 0x3556 <turnOffPWM>

	out = portOutputRegister(port);
    3676:	ec 2f       	mov	r30, r28
    3678:	f0 e0       	ldi	r31, 0x00	; 0
    367a:	ee 0f       	add	r30, r30
    367c:	ff 1f       	adc	r31, r31
    367e:	ec 58       	subi	r30, 0x8C	; 140
    3680:	fe 4f       	sbci	r31, 0xFE	; 254
    3682:	a5 91       	lpm	r26, Z+
    3684:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3686:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3688:	f8 94       	cli

	if (val == LOW) {
    368a:	11 11       	cpse	r17, r1
    368c:	04 c0       	rjmp	.+8      	; 0x3696 <digitalWrite+0x4e>
		*out &= ~bit;
    368e:	8c 91       	ld	r24, X
    3690:	d0 95       	com	r29
    3692:	d8 23       	and	r29, r24
    3694:	02 c0       	rjmp	.+4      	; 0x369a <digitalWrite+0x52>
	} else {
		*out |= bit;
    3696:	ec 91       	ld	r30, X
    3698:	de 2b       	or	r29, r30
    369a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    369c:	9f bf       	out	0x3f, r25	; 63
}
    369e:	df 91       	pop	r29
    36a0:	cf 91       	pop	r28
    36a2:	1f 91       	pop	r17
    36a4:	08 95       	ret

000036a6 <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    36a6:	fc 01       	movw	r30, r24
    36a8:	80 81       	ld	r24, Z
    36aa:	91 81       	ldd	r25, Z+1	; 0x01
    36ac:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <free>

000036b0 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    36b0:	cf 93       	push	r28
    36b2:	df 93       	push	r29
    36b4:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    36b6:	88 81       	ld	r24, Y
    36b8:	99 81       	ldd	r25, Y+1	; 0x01
    36ba:	00 97       	sbiw	r24, 0x00	; 0
    36bc:	11 f0       	breq	.+4      	; 0x36c2 <_ZN6String10invalidateEv+0x12>
    36be:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <free>
	buffer = NULL;
    36c2:	19 82       	std	Y+1, r1	; 0x01
    36c4:	18 82       	st	Y, r1
	capacity = len = 0;
    36c6:	1d 82       	std	Y+5, r1	; 0x05
    36c8:	1c 82       	std	Y+4, r1	; 0x04
    36ca:	1b 82       	std	Y+3, r1	; 0x03
    36cc:	1a 82       	std	Y+2, r1	; 0x02
}
    36ce:	df 91       	pop	r29
    36d0:	cf 91       	pop	r28
    36d2:	08 95       	ret

000036d4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    36d4:	0f 93       	push	r16
    36d6:	1f 93       	push	r17
    36d8:	cf 93       	push	r28
    36da:	df 93       	push	r29
    36dc:	ec 01       	movw	r28, r24
    36de:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    36e0:	6f 5f       	subi	r22, 0xFF	; 255
    36e2:	7f 4f       	sbci	r23, 0xFF	; 255
    36e4:	88 81       	ld	r24, Y
    36e6:	99 81       	ldd	r25, Y+1	; 0x01
    36e8:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <realloc>
	if (newbuffer) {
    36ec:	00 97       	sbiw	r24, 0x00	; 0
    36ee:	31 f0       	breq	.+12     	; 0x36fc <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    36f0:	99 83       	std	Y+1, r25	; 0x01
    36f2:	88 83       	st	Y, r24
		capacity = maxStrLen;
    36f4:	1b 83       	std	Y+3, r17	; 0x03
    36f6:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	01 c0       	rjmp	.+2      	; 0x36fe <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    36fc:	80 e0       	ldi	r24, 0x00	; 0
}
    36fe:	df 91       	pop	r29
    3700:	cf 91       	pop	r28
    3702:	1f 91       	pop	r17
    3704:	0f 91       	pop	r16
    3706:	08 95       	ret

00003708 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    3708:	cf 93       	push	r28
    370a:	df 93       	push	r29
    370c:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    370e:	88 81       	ld	r24, Y
    3710:	99 81       	ldd	r25, Y+1	; 0x01
    3712:	89 2b       	or	r24, r25
    3714:	29 f0       	breq	.+10     	; 0x3720 <_ZN6String7reserveEj+0x18>
    3716:	8a 81       	ldd	r24, Y+2	; 0x02
    3718:	9b 81       	ldd	r25, Y+3	; 0x03
    371a:	86 17       	cp	r24, r22
    371c:	97 07       	cpc	r25, r23
    371e:	60 f4       	brcc	.+24     	; 0x3738 <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    3720:	ce 01       	movw	r24, r28
    3722:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <_ZN6String12changeBufferEj>
    3726:	88 23       	and	r24, r24
    3728:	41 f0       	breq	.+16     	; 0x373a <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    372a:	8c 81       	ldd	r24, Y+4	; 0x04
    372c:	9d 81       	ldd	r25, Y+5	; 0x05
    372e:	89 2b       	or	r24, r25
    3730:	19 f4       	brne	.+6      	; 0x3738 <_ZN6String7reserveEj+0x30>
    3732:	e8 81       	ld	r30, Y
    3734:	f9 81       	ldd	r31, Y+1	; 0x01
    3736:	10 82       	st	Z, r1
    3738:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    373a:	df 91       	pop	r29
    373c:	cf 91       	pop	r28
    373e:	08 95       	ret

00003740 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    3740:	ef 92       	push	r14
    3742:	ff 92       	push	r15
    3744:	0f 93       	push	r16
    3746:	1f 93       	push	r17
    3748:	cf 93       	push	r28
    374a:	df 93       	push	r29
    374c:	ec 01       	movw	r28, r24
    374e:	7b 01       	movw	r14, r22
    3750:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    3752:	ba 01       	movw	r22, r20
    3754:	0e 94 84 1b 	call	0x3708	; 0x3708 <_ZN6String7reserveEj>
    3758:	81 11       	cpse	r24, r1
    375a:	04 c0       	rjmp	.+8      	; 0x3764 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    375c:	ce 01       	movw	r24, r28
    375e:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN6String10invalidateEv>
		return *this;
    3762:	07 c0       	rjmp	.+14     	; 0x3772 <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    3764:	1d 83       	std	Y+5, r17	; 0x05
    3766:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    3768:	b7 01       	movw	r22, r14
    376a:	88 81       	ld	r24, Y
    376c:	99 81       	ldd	r25, Y+1	; 0x01
    376e:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <strcpy>
	return *this;
}
    3772:	ce 01       	movw	r24, r28
    3774:	df 91       	pop	r29
    3776:	cf 91       	pop	r28
    3778:	1f 91       	pop	r17
    377a:	0f 91       	pop	r16
    377c:	ff 90       	pop	r15
    377e:	ef 90       	pop	r14
    3780:	08 95       	ret

00003782 <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3782:	fc 01       	movw	r30, r24
    3784:	11 82       	std	Z+1, r1	; 0x01
    3786:	10 82       	st	Z, r1
	capacity = 0;
    3788:	13 82       	std	Z+3, r1	; 0x03
    378a:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    378c:	15 82       	std	Z+5, r1	; 0x05
    378e:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    3790:	61 15       	cp	r22, r1
    3792:	71 05       	cpc	r23, r1
    3794:	51 f0       	breq	.+20     	; 0x37aa <_ZN6StringC1EPKc+0x28>
    3796:	fb 01       	movw	r30, r22
    3798:	01 90       	ld	r0, Z+
    379a:	00 20       	and	r0, r0
    379c:	e9 f7       	brne	.-6      	; 0x3798 <_ZN6StringC1EPKc+0x16>
    379e:	31 97       	sbiw	r30, 0x01	; 1
    37a0:	af 01       	movw	r20, r30
    37a2:	46 1b       	sub	r20, r22
    37a4:	57 0b       	sbc	r21, r23
    37a6:	0c 94 a0 1b 	jmp	0x3740	; 0x3740 <_ZN6String4copyEPKcj>
    37aa:	08 95       	ret

000037ac <_ZN7Serial_5writeEh>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		ret = breakValue;
		breakValue = -1;
	}
	return ret;
}
    37ac:	cf 93       	push	r28
    37ae:	df 93       	push	r29
    37b0:	1f 92       	push	r1
    37b2:	cd b7       	in	r28, 0x3d	; 61
    37b4:	de b7       	in	r29, 0x3e	; 62
    37b6:	69 83       	std	Y+1, r22	; 0x01
    37b8:	dc 01       	movw	r26, r24
    37ba:	ed 91       	ld	r30, X+
    37bc:	fc 91       	ld	r31, X
    37be:	02 80       	ldd	r0, Z+2	; 0x02
    37c0:	f3 81       	ldd	r31, Z+3	; 0x03
    37c2:	e0 2d       	mov	r30, r0
    37c4:	41 e0       	ldi	r20, 0x01	; 1
    37c6:	50 e0       	ldi	r21, 0x00	; 0
    37c8:	be 01       	movw	r22, r28
    37ca:	6f 5f       	subi	r22, 0xFF	; 255
    37cc:	7f 4f       	sbci	r23, 0xFF	; 255
    37ce:	09 95       	icall
    37d0:	0f 90       	pop	r0
    37d2:	df 91       	pop	r29
    37d4:	cf 91       	pop	r28
    37d6:	08 95       	ret

000037d8 <_ZN7Serial_4peekEv>:
    37d8:	cf 93       	push	r28
    37da:	df 93       	push	r29
    37dc:	ec 01       	movw	r28, r24
    37de:	8c 85       	ldd	r24, Y+12	; 0x0c
    37e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    37e2:	97 ff       	sbrs	r25, 7
    37e4:	05 c0       	rjmp	.+10     	; 0x37f0 <_ZN7Serial_4peekEv+0x18>
    37e6:	82 e0       	ldi	r24, 0x02	; 2
    37e8:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <_Z8USB_Recvh>
    37ec:	9d 87       	std	Y+13, r25	; 0x0d
    37ee:	8c 87       	std	Y+12, r24	; 0x0c
    37f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    37f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    37f4:	df 91       	pop	r29
    37f6:	cf 91       	pop	r28
    37f8:	08 95       	ret

000037fa <_ZN7Serial_17availableForWriteEv>:
    37fa:	83 e0       	ldi	r24, 0x03	; 3
    37fc:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <_Z13USB_SendSpaceh>
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	08 95       	ret

00003804 <_ZN7Serial_5flushEv>:
    3804:	83 e0       	ldi	r24, 0x03	; 3
    3806:	0c 94 c4 18 	jmp	0x3188	; 0x3188 <_Z9USB_Flushh>

0000380a <_ZN7Serial_9availableEv>:
    380a:	fc 01       	movw	r30, r24
    380c:	84 85       	ldd	r24, Z+12	; 0x0c
    380e:	95 85       	ldd	r25, Z+13	; 0x0d
    3810:	97 fd       	sbrc	r25, 7
    3812:	06 c0       	rjmp	.+12     	; 0x3820 <_ZN7Serial_9availableEv+0x16>
    3814:	82 e0       	ldi	r24, 0x02	; 2
    3816:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <_Z13USB_Availableh>
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	01 96       	adiw	r24, 0x01	; 1
    381e:	08 95       	ret
    3820:	82 e0       	ldi	r24, 0x02	; 2
    3822:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <_Z13USB_Availableh>
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	08 95       	ret

0000382a <_ZN7Serial_4readEv>:
    382a:	fc 01       	movw	r30, r24
    382c:	84 85       	ldd	r24, Z+12	; 0x0c
    382e:	95 85       	ldd	r25, Z+13	; 0x0d
    3830:	97 fd       	sbrc	r25, 7
    3832:	05 c0       	rjmp	.+10     	; 0x383e <_ZN7Serial_4readEv+0x14>
    3834:	2f ef       	ldi	r18, 0xFF	; 255
    3836:	3f ef       	ldi	r19, 0xFF	; 255
    3838:	35 87       	std	Z+13, r19	; 0x0d
    383a:	24 87       	std	Z+12, r18	; 0x0c
    383c:	08 95       	ret
    383e:	82 e0       	ldi	r24, 0x02	; 2
    3840:	0c 94 2f 16 	jmp	0x2c5e	; 0x2c5e <_Z8USB_Recvh>

00003844 <_ZN7Serial_5writeEPKhj>:
    3844:	cf 93       	push	r28
    3846:	df 93       	push	r29
    3848:	ec 01       	movw	r28, r24
    384a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL12_usbLineInfo+0x7>
    384e:	88 23       	and	r24, r24
    3850:	31 f0       	breq	.+12     	; 0x385e <_ZN7Serial_5writeEPKhj+0x1a>
    3852:	83 e0       	ldi	r24, 0x03	; 3
    3854:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <_Z8USB_SendhPKvi>
    3858:	18 16       	cp	r1, r24
    385a:	19 06       	cpc	r1, r25
    385c:	34 f0       	brlt	.+12     	; 0x386a <_ZN7Serial_5writeEPKhj+0x26>
    385e:	81 e0       	ldi	r24, 0x01	; 1
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	9b 83       	std	Y+3, r25	; 0x03
    3864:	8a 83       	std	Y+2, r24	; 0x02
    3866:	80 e0       	ldi	r24, 0x00	; 0
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	df 91       	pop	r29
    386c:	cf 91       	pop	r28
    386e:	08 95       	ret

00003870 <_Z16isLUFAbootloaderv>:
    3870:	ee ef       	ldi	r30, 0xFE	; 254
    3872:	ff e7       	ldi	r31, 0x7F	; 127
    3874:	25 91       	lpm	r18, Z+
    3876:	34 91       	lpm	r19, Z
    3878:	81 e0       	ldi	r24, 0x01	; 1
    387a:	2b 3f       	cpi	r18, 0xFB	; 251
    387c:	3c 4d       	sbci	r19, 0xDC	; 220
    387e:	09 f0       	breq	.+2      	; 0x3882 <_Z16isLUFAbootloaderv+0x12>
    3880:	80 e0       	ldi	r24, 0x00	; 0
    3882:	08 95       	ret

00003884 <_Z16CDC_GetInterfacePh>:
    3884:	fc 01       	movw	r30, r24
    3886:	90 81       	ld	r25, Z
    3888:	9e 5f       	subi	r25, 0xFE	; 254
    388a:	90 83       	st	Z, r25
    388c:	42 e4       	ldi	r20, 0x42	; 66
    388e:	50 e0       	ldi	r21, 0x00	; 0
    3890:	60 e9       	ldi	r22, 0x90	; 144
    3892:	71 e0       	ldi	r23, 0x01	; 1
    3894:	80 e8       	ldi	r24, 0x80	; 128
    3896:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <_Z15USB_SendControlhPKvi>

0000389a <_Z9CDC_SetupR8USBSetup>:
    389a:	fc 01       	movw	r30, r24
    389c:	81 81       	ldd	r24, Z+1	; 0x01
    389e:	90 81       	ld	r25, Z
    38a0:	91 3a       	cpi	r25, 0xA1	; 161
    38a2:	59 f4       	brne	.+22     	; 0x38ba <_Z9CDC_SetupR8USBSetup+0x20>
    38a4:	81 32       	cpi	r24, 0x21	; 33
    38a6:	09 f0       	breq	.+2      	; 0x38aa <_Z9CDC_SetupR8USBSetup+0x10>
    38a8:	65 c0       	rjmp	.+202    	; 0x3974 <_Z9CDC_SetupR8USBSetup+0xda>
    38aa:	47 e0       	ldi	r20, 0x07	; 7
    38ac:	50 e0       	ldi	r21, 0x00	; 0
    38ae:	66 e1       	ldi	r22, 0x16	; 22
    38b0:	71 e0       	ldi	r23, 0x01	; 1
    38b2:	80 e0       	ldi	r24, 0x00	; 0
    38b4:	0e 94 10 17 	call	0x2e20	; 0x2e20 <_Z15USB_SendControlhPKvi>
    38b8:	5b c0       	rjmp	.+182    	; 0x3970 <_Z9CDC_SetupR8USBSetup+0xd6>
    38ba:	91 32       	cpi	r25, 0x21	; 33
    38bc:	09 f0       	breq	.+2      	; 0x38c0 <_Z9CDC_SetupR8USBSetup+0x26>
    38be:	5a c0       	rjmp	.+180    	; 0x3974 <_Z9CDC_SetupR8USBSetup+0xda>
    38c0:	83 32       	cpi	r24, 0x23	; 35
    38c2:	69 f4       	brne	.+26     	; 0x38de <_Z9CDC_SetupR8USBSetup+0x44>
    38c4:	82 81       	ldd	r24, Z+2	; 0x02
    38c6:	93 81       	ldd	r25, Z+3	; 0x03
    38c8:	a0 e0       	ldi	r26, 0x00	; 0
    38ca:	b0 e0       	ldi	r27, 0x00	; 0
    38cc:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_ZL10breakValue>
    38d0:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_ZL10breakValue+0x1>
    38d4:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <_ZL10breakValue+0x2>
    38d8:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <_ZL10breakValue+0x3>
    38dc:	49 c0       	rjmp	.+146    	; 0x3970 <_Z9CDC_SetupR8USBSetup+0xd6>
    38de:	80 32       	cpi	r24, 0x20	; 32
    38e0:	39 f4       	brne	.+14     	; 0x38f0 <_Z9CDC_SetupR8USBSetup+0x56>
    38e2:	67 e0       	ldi	r22, 0x07	; 7
    38e4:	70 e0       	ldi	r23, 0x00	; 0
    38e6:	86 e1       	ldi	r24, 0x16	; 22
    38e8:	91 e0       	ldi	r25, 0x01	; 1
    38ea:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <_Z15USB_RecvControlPvi>
    38ee:	40 c0       	rjmp	.+128    	; 0x3970 <_Z9CDC_SetupR8USBSetup+0xd6>
    38f0:	82 32       	cpi	r24, 0x22	; 34
    38f2:	09 f0       	breq	.+2      	; 0x38f6 <_Z9CDC_SetupR8USBSetup+0x5c>
    38f4:	3d c0       	rjmp	.+122    	; 0x3970 <_Z9CDC_SetupR8USBSetup+0xd6>
    38f6:	82 81       	ldd	r24, Z+2	; 0x02
    38f8:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZL12_usbLineInfo+0x7>
    38fc:	0e 94 38 1c 	call	0x3870	; 0x3870 <_Z16isLUFAbootloaderv>
    3900:	88 23       	and	r24, r24
    3902:	19 f0       	breq	.+6      	; 0x390a <_Z9CDC_SetupR8USBSetup+0x70>
    3904:	ee ef       	ldi	r30, 0xFE	; 254
    3906:	fa e0       	ldi	r31, 0x0A	; 10
    3908:	02 c0       	rjmp	.+4      	; 0x390e <_Z9CDC_SetupR8USBSetup+0x74>
    390a:	e0 e0       	ldi	r30, 0x00	; 0
    390c:	f8 e0       	ldi	r31, 0x08	; 8
    390e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_ZL12_usbLineInfo>
    3912:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <_ZL12_usbLineInfo+0x1>
    3916:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <_ZL12_usbLineInfo+0x2>
    391a:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <_ZL12_usbLineInfo+0x3>
    391e:	80 3b       	cpi	r24, 0xB0	; 176
    3920:	94 40       	sbci	r25, 0x04	; 4
    3922:	a1 05       	cpc	r26, r1
    3924:	b1 05       	cpc	r27, r1
    3926:	41 f5       	brne	.+80     	; 0x3978 <_Z9CDC_SetupR8USBSetup+0xde>
    3928:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL12_usbLineInfo+0x7>
    392c:	80 fd       	sbrc	r24, 0
    392e:	24 c0       	rjmp	.+72     	; 0x3978 <_Z9CDC_SetupR8USBSetup+0xde>
    3930:	ee 3f       	cpi	r30, 0xFE	; 254
    3932:	8a e0       	ldi	r24, 0x0A	; 10
    3934:	f8 07       	cpc	r31, r24
    3936:	51 f0       	breq	.+20     	; 0x394c <_Z9CDC_SetupR8USBSetup+0xb2>
    3938:	80 81       	ld	r24, Z
    393a:	91 81       	ldd	r25, Z+1	; 0x01
    393c:	87 37       	cpi	r24, 0x77	; 119
    393e:	27 e7       	ldi	r18, 0x77	; 119
    3940:	92 07       	cpc	r25, r18
    3942:	21 f0       	breq	.+8      	; 0x394c <_Z9CDC_SetupR8USBSetup+0xb2>
    3944:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x5f8>
    3948:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x5f7>
    394c:	87 e7       	ldi	r24, 0x77	; 119
    394e:	97 e7       	ldi	r25, 0x77	; 119
    3950:	91 83       	std	Z+1, r25	; 0x01
    3952:	80 83       	st	Z, r24
    3954:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3958:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <_ZL11wdtcsr_save>
    395c:	9b e0       	ldi	r25, 0x0B	; 11
    395e:	88 e1       	ldi	r24, 0x18	; 24
    3960:	0f b6       	in	r0, 0x3f	; 63
    3962:	f8 94       	cli
    3964:	a8 95       	wdr
    3966:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    396a:	0f be       	out	0x3f, r0	; 63
    396c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3970:	81 e0       	ldi	r24, 0x01	; 1
    3972:	08 95       	ret
    3974:	80 e0       	ldi	r24, 0x00	; 0
    3976:	08 95       	ret
    3978:	80 81       	ld	r24, Z
    397a:	91 81       	ldd	r25, Z+1	; 0x01
    397c:	87 37       	cpi	r24, 0x77	; 119
    397e:	97 47       	sbci	r25, 0x77	; 119
    3980:	b9 f7       	brne	.-18     	; 0x3970 <_Z9CDC_SetupR8USBSetup+0xd6>
    3982:	a8 95       	wdr
    3984:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3988:	88 61       	ori	r24, 0x18	; 24
    398a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    398e:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <_ZL11wdtcsr_save>
    3992:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3996:	ee 3f       	cpi	r30, 0xFE	; 254
    3998:	8a e0       	ldi	r24, 0x0A	; 10
    399a:	f8 07       	cpc	r31, r24
    399c:	39 f0       	breq	.+14     	; 0x39ac <_Z9CDC_SetupR8USBSetup+0x112>
    399e:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x5f7>
    39a2:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x5f8>
    39a6:	91 83       	std	Z+1, r25	; 0x01
    39a8:	80 83       	st	Z, r24
    39aa:	e2 cf       	rjmp	.-60     	; 0x3970 <_Z9CDC_SetupR8USBSetup+0xd6>
    39ac:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x5f8>
    39b0:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x5f7>
    39b4:	dd cf       	rjmp	.-70     	; 0x3970 <_Z9CDC_SetupR8USBSetup+0xd6>

000039b6 <_GLOBAL__sub_I__cdcInterface>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    39b6:	e6 ea       	ldi	r30, 0xA6	; 166
    39b8:	f4 e0       	ldi	r31, 0x04	; 4
    39ba:	13 82       	std	Z+3, r1	; 0x03
    39bc:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    39be:	88 ee       	ldi	r24, 0xE8	; 232
    39c0:	93 e0       	ldi	r25, 0x03	; 3
    39c2:	a0 e0       	ldi	r26, 0x00	; 0
    39c4:	b0 e0       	ldi	r27, 0x00	; 0
    39c6:	84 83       	std	Z+4, r24	; 0x04
    39c8:	95 83       	std	Z+5, r25	; 0x05
    39ca:	a6 83       	std	Z+6, r26	; 0x06
    39cc:	b7 83       	std	Z+7, r27	; 0x07
class Serial_ : public Stream
{
private:
	int peek_buffer;
public:
	Serial_() { peek_buffer = -1; };
    39ce:	8b e8       	ldi	r24, 0x8B	; 139
    39d0:	92 e0       	ldi	r25, 0x02	; 2
    39d2:	91 83       	std	Z+1, r25	; 0x01
    39d4:	80 83       	st	Z, r24
    39d6:	8f ef       	ldi	r24, 0xFF	; 255
    39d8:	9f ef       	ldi	r25, 0xFF	; 255
    39da:	95 87       	std	Z+13, r25	; 0x0d
    39dc:	84 87       	std	Z+12, r24	; 0x0c
    39de:	08 95       	ret

000039e0 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    39e0:	08 95       	ret

000039e2 <_ZN13PluggableUSB_12getInterfaceEPh>:
		_initEndpoints[lastEp] = node->endpointType[i];
		lastEp++;
	}
	return true;
	// restart USB layer???
}
    39e2:	ef 92       	push	r14
    39e4:	ff 92       	push	r15
    39e6:	0f 93       	push	r16
    39e8:	1f 93       	push	r17
    39ea:	cf 93       	push	r28
    39ec:	df 93       	push	r29
    39ee:	7b 01       	movw	r14, r22
    39f0:	fc 01       	movw	r30, r24
    39f2:	c2 81       	ldd	r28, Z+2	; 0x02
    39f4:	d3 81       	ldd	r29, Z+3	; 0x03
    39f6:	00 e0       	ldi	r16, 0x00	; 0
    39f8:	10 e0       	ldi	r17, 0x00	; 0
    39fa:	20 97       	sbiw	r28, 0x00	; 0
    39fc:	81 f0       	breq	.+32     	; 0x3a1e <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
    39fe:	e8 81       	ld	r30, Y
    3a00:	f9 81       	ldd	r31, Y+1	; 0x01
    3a02:	02 80       	ldd	r0, Z+2	; 0x02
    3a04:	f3 81       	ldd	r31, Z+3	; 0x03
    3a06:	e0 2d       	mov	r30, r0
    3a08:	b7 01       	movw	r22, r14
    3a0a:	ce 01       	movw	r24, r28
    3a0c:	09 95       	icall
    3a0e:	97 fd       	sbrc	r25, 7
    3a10:	08 c0       	rjmp	.+16     	; 0x3a22 <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
    3a12:	08 0f       	add	r16, r24
    3a14:	19 1f       	adc	r17, r25
    3a16:	08 84       	ldd	r0, Y+8	; 0x08
    3a18:	d9 85       	ldd	r29, Y+9	; 0x09
    3a1a:	c0 2d       	mov	r28, r0
    3a1c:	ee cf       	rjmp	.-36     	; 0x39fa <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    3a1e:	c8 01       	movw	r24, r16
    3a20:	02 c0       	rjmp	.+4      	; 0x3a26 <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
    3a22:	8f ef       	ldi	r24, 0xFF	; 255
    3a24:	9f ef       	ldi	r25, 0xFF	; 255
    3a26:	df 91       	pop	r29
    3a28:	cf 91       	pop	r28
    3a2a:	1f 91       	pop	r17
    3a2c:	0f 91       	pop	r16
    3a2e:	ff 90       	pop	r15
    3a30:	ef 90       	pop	r14
    3a32:	08 95       	ret

00003a34 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    3a34:	0f 93       	push	r16
    3a36:	1f 93       	push	r17
    3a38:	cf 93       	push	r28
    3a3a:	df 93       	push	r29
    3a3c:	8b 01       	movw	r16, r22
    3a3e:	fc 01       	movw	r30, r24
    3a40:	c2 81       	ldd	r28, Z+2	; 0x02
    3a42:	d3 81       	ldd	r29, Z+3	; 0x03
    3a44:	20 97       	sbiw	r28, 0x00	; 0
    3a46:	71 f0       	breq	.+28     	; 0x3a64 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
    3a48:	e8 81       	ld	r30, Y
    3a4a:	f9 81       	ldd	r31, Y+1	; 0x01
    3a4c:	04 80       	ldd	r0, Z+4	; 0x04
    3a4e:	f5 81       	ldd	r31, Z+5	; 0x05
    3a50:	e0 2d       	mov	r30, r0
    3a52:	b8 01       	movw	r22, r16
    3a54:	ce 01       	movw	r24, r28
    3a56:	09 95       	icall
    3a58:	00 97       	sbiw	r24, 0x00	; 0
    3a5a:	31 f4       	brne	.+12     	; 0x3a68 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
    3a5c:	08 84       	ldd	r0, Y+8	; 0x08
    3a5e:	d9 85       	ldd	r29, Y+9	; 0x09
    3a60:	c0 2d       	mov	r28, r0
    3a62:	f0 cf       	rjmp	.-32     	; 0x3a44 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
    3a64:	80 e0       	ldi	r24, 0x00	; 0
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	df 91       	pop	r29
    3a6a:	cf 91       	pop	r28
    3a6c:	1f 91       	pop	r17
    3a6e:	0f 91       	pop	r16
    3a70:	08 95       	ret

00003a72 <_ZN13PluggableUSB_12getShortNameEPc>:
    3a72:	0f 93       	push	r16
    3a74:	1f 93       	push	r17
    3a76:	cf 93       	push	r28
    3a78:	df 93       	push	r29
    3a7a:	8b 01       	movw	r16, r22
    3a7c:	fc 01       	movw	r30, r24
    3a7e:	c2 81       	ldd	r28, Z+2	; 0x02
    3a80:	d3 81       	ldd	r29, Z+3	; 0x03
    3a82:	20 97       	sbiw	r28, 0x00	; 0
    3a84:	71 f0       	breq	.+28     	; 0x3aa2 <_ZN13PluggableUSB_12getShortNameEPc+0x30>
    3a86:	e8 81       	ld	r30, Y
    3a88:	f9 81       	ldd	r31, Y+1	; 0x01
    3a8a:	06 80       	ldd	r0, Z+6	; 0x06
    3a8c:	f7 81       	ldd	r31, Z+7	; 0x07
    3a8e:	e0 2d       	mov	r30, r0
    3a90:	b8 01       	movw	r22, r16
    3a92:	ce 01       	movw	r24, r28
    3a94:	09 95       	icall
    3a96:	08 0f       	add	r16, r24
    3a98:	11 1d       	adc	r17, r1
    3a9a:	08 84       	ldd	r0, Y+8	; 0x08
    3a9c:	d9 85       	ldd	r29, Y+9	; 0x09
    3a9e:	c0 2d       	mov	r28, r0
    3aa0:	f0 cf       	rjmp	.-32     	; 0x3a82 <_ZN13PluggableUSB_12getShortNameEPc+0x10>
    3aa2:	f8 01       	movw	r30, r16
    3aa4:	10 82       	st	Z, r1
    3aa6:	df 91       	pop	r29
    3aa8:	cf 91       	pop	r28
    3aaa:	1f 91       	pop	r17
    3aac:	0f 91       	pop	r16
    3aae:	08 95       	ret

00003ab0 <_ZN13PluggableUSB_5setupER8USBSetup>:
    3ab0:	0f 93       	push	r16
    3ab2:	1f 93       	push	r17
    3ab4:	cf 93       	push	r28
    3ab6:	df 93       	push	r29
    3ab8:	8b 01       	movw	r16, r22
    3aba:	fc 01       	movw	r30, r24
    3abc:	c2 81       	ldd	r28, Z+2	; 0x02
    3abe:	d3 81       	ldd	r29, Z+3	; 0x03
    3ac0:	20 97       	sbiw	r28, 0x00	; 0
    3ac2:	71 f0       	breq	.+28     	; 0x3ae0 <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
    3ac4:	e8 81       	ld	r30, Y
    3ac6:	f9 81       	ldd	r31, Y+1	; 0x01
    3ac8:	01 90       	ld	r0, Z+
    3aca:	f0 81       	ld	r31, Z
    3acc:	e0 2d       	mov	r30, r0
    3ace:	b8 01       	movw	r22, r16
    3ad0:	ce 01       	movw	r24, r28
    3ad2:	09 95       	icall
    3ad4:	81 11       	cpse	r24, r1
    3ad6:	05 c0       	rjmp	.+10     	; 0x3ae2 <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
    3ad8:	08 84       	ldd	r0, Y+8	; 0x08
    3ada:	d9 85       	ldd	r29, Y+9	; 0x09
    3adc:	c0 2d       	mov	r28, r0
    3ade:	f0 cf       	rjmp	.-32     	; 0x3ac0 <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
    3ae0:	80 e0       	ldi	r24, 0x00	; 0
    3ae2:	df 91       	pop	r29
    3ae4:	cf 91       	pop	r28
    3ae6:	1f 91       	pop	r17
    3ae8:	0f 91       	pop	r16
    3aea:	08 95       	ret

00003aec <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    3aec:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <_ZGVZ12PluggableUSBvE3obj>
    3af0:	81 11       	cpse	r24, r1
    3af2:	0d c0       	rjmp	.+26     	; 0x3b0e <_Z12PluggableUSBv+0x22>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    3af4:	82 e0       	ldi	r24, 0x02	; 2
    3af6:	80 93 f7 04 	sts	0x04F7, r24	; 0x8004f7 <_ZZ12PluggableUSBvE3obj>
    3afa:	84 e0       	ldi	r24, 0x04	; 4
    3afc:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <_ZZ12PluggableUSBvE3obj+0x1>
    3b00:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <_ZZ12PluggableUSBvE3obj+0x3>
    3b04:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <_ZZ12PluggableUSBvE3obj+0x2>
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    3b08:	81 e0       	ldi	r24, 0x01	; 1
    3b0a:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <_ZGVZ12PluggableUSBvE3obj>
	return obj;
}
    3b0e:	87 ef       	ldi	r24, 0xF7	; 247
    3b10:	94 e0       	ldi	r25, 0x04	; 4
    3b12:	08 95       	ret

00003b14 <__divsf3>:
    3b14:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__divsf3x>
    3b18:	0c 94 8e 12 	jmp	0x251c	; 0x251c <__fp_round>
    3b1c:	0e 94 87 12 	call	0x250e	; 0x250e <__fp_pscB>
    3b20:	58 f0       	brcs	.+22     	; 0x3b38 <__divsf3+0x24>
    3b22:	0e 94 80 12 	call	0x2500	; 0x2500 <__fp_pscA>
    3b26:	40 f0       	brcs	.+16     	; 0x3b38 <__divsf3+0x24>
    3b28:	29 f4       	brne	.+10     	; 0x3b34 <__divsf3+0x20>
    3b2a:	5f 3f       	cpi	r21, 0xFF	; 255
    3b2c:	29 f0       	breq	.+10     	; 0x3b38 <__divsf3+0x24>
    3b2e:	0c 94 77 12 	jmp	0x24ee	; 0x24ee <__fp_inf>
    3b32:	51 11       	cpse	r21, r1
    3b34:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__fp_szero>
    3b38:	0c 94 7d 12 	jmp	0x24fa	; 0x24fa <__fp_nan>

00003b3c <__divsf3x>:
    3b3c:	0e 94 9f 12 	call	0x253e	; 0x253e <__fp_split3>
    3b40:	68 f3       	brcs	.-38     	; 0x3b1c <__divsf3+0x8>

00003b42 <__divsf3_pse>:
    3b42:	99 23       	and	r25, r25
    3b44:	b1 f3       	breq	.-20     	; 0x3b32 <__divsf3+0x1e>
    3b46:	55 23       	and	r21, r21
    3b48:	91 f3       	breq	.-28     	; 0x3b2e <__divsf3+0x1a>
    3b4a:	95 1b       	sub	r25, r21
    3b4c:	55 0b       	sbc	r21, r21
    3b4e:	bb 27       	eor	r27, r27
    3b50:	aa 27       	eor	r26, r26
    3b52:	62 17       	cp	r22, r18
    3b54:	73 07       	cpc	r23, r19
    3b56:	84 07       	cpc	r24, r20
    3b58:	38 f0       	brcs	.+14     	; 0x3b68 <__divsf3_pse+0x26>
    3b5a:	9f 5f       	subi	r25, 0xFF	; 255
    3b5c:	5f 4f       	sbci	r21, 0xFF	; 255
    3b5e:	22 0f       	add	r18, r18
    3b60:	33 1f       	adc	r19, r19
    3b62:	44 1f       	adc	r20, r20
    3b64:	aa 1f       	adc	r26, r26
    3b66:	a9 f3       	breq	.-22     	; 0x3b52 <__divsf3_pse+0x10>
    3b68:	35 d0       	rcall	.+106    	; 0x3bd4 <__divsf3_pse+0x92>
    3b6a:	0e 2e       	mov	r0, r30
    3b6c:	3a f0       	brmi	.+14     	; 0x3b7c <__divsf3_pse+0x3a>
    3b6e:	e0 e8       	ldi	r30, 0x80	; 128
    3b70:	32 d0       	rcall	.+100    	; 0x3bd6 <__divsf3_pse+0x94>
    3b72:	91 50       	subi	r25, 0x01	; 1
    3b74:	50 40       	sbci	r21, 0x00	; 0
    3b76:	e6 95       	lsr	r30
    3b78:	00 1c       	adc	r0, r0
    3b7a:	ca f7       	brpl	.-14     	; 0x3b6e <__divsf3_pse+0x2c>
    3b7c:	2b d0       	rcall	.+86     	; 0x3bd4 <__divsf3_pse+0x92>
    3b7e:	fe 2f       	mov	r31, r30
    3b80:	29 d0       	rcall	.+82     	; 0x3bd4 <__divsf3_pse+0x92>
    3b82:	66 0f       	add	r22, r22
    3b84:	77 1f       	adc	r23, r23
    3b86:	88 1f       	adc	r24, r24
    3b88:	bb 1f       	adc	r27, r27
    3b8a:	26 17       	cp	r18, r22
    3b8c:	37 07       	cpc	r19, r23
    3b8e:	48 07       	cpc	r20, r24
    3b90:	ab 07       	cpc	r26, r27
    3b92:	b0 e8       	ldi	r27, 0x80	; 128
    3b94:	09 f0       	breq	.+2      	; 0x3b98 <__divsf3_pse+0x56>
    3b96:	bb 0b       	sbc	r27, r27
    3b98:	80 2d       	mov	r24, r0
    3b9a:	bf 01       	movw	r22, r30
    3b9c:	ff 27       	eor	r31, r31
    3b9e:	93 58       	subi	r25, 0x83	; 131
    3ba0:	5f 4f       	sbci	r21, 0xFF	; 255
    3ba2:	3a f0       	brmi	.+14     	; 0x3bb2 <__divsf3_pse+0x70>
    3ba4:	9e 3f       	cpi	r25, 0xFE	; 254
    3ba6:	51 05       	cpc	r21, r1
    3ba8:	78 f0       	brcs	.+30     	; 0x3bc8 <__divsf3_pse+0x86>
    3baa:	0c 94 77 12 	jmp	0x24ee	; 0x24ee <__fp_inf>
    3bae:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__fp_szero>
    3bb2:	5f 3f       	cpi	r21, 0xFF	; 255
    3bb4:	e4 f3       	brlt	.-8      	; 0x3bae <__divsf3_pse+0x6c>
    3bb6:	98 3e       	cpi	r25, 0xE8	; 232
    3bb8:	d4 f3       	brlt	.-12     	; 0x3bae <__divsf3_pse+0x6c>
    3bba:	86 95       	lsr	r24
    3bbc:	77 95       	ror	r23
    3bbe:	67 95       	ror	r22
    3bc0:	b7 95       	ror	r27
    3bc2:	f7 95       	ror	r31
    3bc4:	9f 5f       	subi	r25, 0xFF	; 255
    3bc6:	c9 f7       	brne	.-14     	; 0x3bba <__divsf3_pse+0x78>
    3bc8:	88 0f       	add	r24, r24
    3bca:	91 1d       	adc	r25, r1
    3bcc:	96 95       	lsr	r25
    3bce:	87 95       	ror	r24
    3bd0:	97 f9       	bld	r25, 7
    3bd2:	08 95       	ret
    3bd4:	e1 e0       	ldi	r30, 0x01	; 1
    3bd6:	66 0f       	add	r22, r22
    3bd8:	77 1f       	adc	r23, r23
    3bda:	88 1f       	adc	r24, r24
    3bdc:	bb 1f       	adc	r27, r27
    3bde:	62 17       	cp	r22, r18
    3be0:	73 07       	cpc	r23, r19
    3be2:	84 07       	cpc	r24, r20
    3be4:	ba 07       	cpc	r27, r26
    3be6:	20 f0       	brcs	.+8      	; 0x3bf0 <__divsf3_pse+0xae>
    3be8:	62 1b       	sub	r22, r18
    3bea:	73 0b       	sbc	r23, r19
    3bec:	84 0b       	sbc	r24, r20
    3bee:	ba 0b       	sbc	r27, r26
    3bf0:	ee 1f       	adc	r30, r30
    3bf2:	88 f7       	brcc	.-30     	; 0x3bd6 <__divsf3_pse+0x94>
    3bf4:	e0 95       	com	r30
    3bf6:	08 95       	ret

00003bf8 <__fixunssfsi>:
    3bf8:	0e 94 a7 12 	call	0x254e	; 0x254e <__fp_splitA>
    3bfc:	88 f0       	brcs	.+34     	; 0x3c20 <__fixunssfsi+0x28>
    3bfe:	9f 57       	subi	r25, 0x7F	; 127
    3c00:	98 f0       	brcs	.+38     	; 0x3c28 <__fixunssfsi+0x30>
    3c02:	b9 2f       	mov	r27, r25
    3c04:	99 27       	eor	r25, r25
    3c06:	b7 51       	subi	r27, 0x17	; 23
    3c08:	b0 f0       	brcs	.+44     	; 0x3c36 <__fixunssfsi+0x3e>
    3c0a:	e1 f0       	breq	.+56     	; 0x3c44 <__fixunssfsi+0x4c>
    3c0c:	66 0f       	add	r22, r22
    3c0e:	77 1f       	adc	r23, r23
    3c10:	88 1f       	adc	r24, r24
    3c12:	99 1f       	adc	r25, r25
    3c14:	1a f0       	brmi	.+6      	; 0x3c1c <__fixunssfsi+0x24>
    3c16:	ba 95       	dec	r27
    3c18:	c9 f7       	brne	.-14     	; 0x3c0c <__fixunssfsi+0x14>
    3c1a:	14 c0       	rjmp	.+40     	; 0x3c44 <__fixunssfsi+0x4c>
    3c1c:	b1 30       	cpi	r27, 0x01	; 1
    3c1e:	91 f0       	breq	.+36     	; 0x3c44 <__fixunssfsi+0x4c>
    3c20:	0e 94 c1 12 	call	0x2582	; 0x2582 <__fp_zero>
    3c24:	b1 e0       	ldi	r27, 0x01	; 1
    3c26:	08 95       	ret
    3c28:	0c 94 c1 12 	jmp	0x2582	; 0x2582 <__fp_zero>
    3c2c:	67 2f       	mov	r22, r23
    3c2e:	78 2f       	mov	r23, r24
    3c30:	88 27       	eor	r24, r24
    3c32:	b8 5f       	subi	r27, 0xF8	; 248
    3c34:	39 f0       	breq	.+14     	; 0x3c44 <__fixunssfsi+0x4c>
    3c36:	b9 3f       	cpi	r27, 0xF9	; 249
    3c38:	cc f3       	brlt	.-14     	; 0x3c2c <__fixunssfsi+0x34>
    3c3a:	86 95       	lsr	r24
    3c3c:	77 95       	ror	r23
    3c3e:	67 95       	ror	r22
    3c40:	b3 95       	inc	r27
    3c42:	d9 f7       	brne	.-10     	; 0x3c3a <__fixunssfsi+0x42>
    3c44:	3e f4       	brtc	.+14     	; 0x3c54 <__fixunssfsi+0x5c>
    3c46:	90 95       	com	r25
    3c48:	80 95       	com	r24
    3c4a:	70 95       	com	r23
    3c4c:	61 95       	neg	r22
    3c4e:	7f 4f       	sbci	r23, 0xFF	; 255
    3c50:	8f 4f       	sbci	r24, 0xFF	; 255
    3c52:	9f 4f       	sbci	r25, 0xFF	; 255
    3c54:	08 95       	ret

00003c56 <__gesf2>:
    3c56:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__fp_cmp>
    3c5a:	08 f4       	brcc	.+2      	; 0x3c5e <__gesf2+0x8>
    3c5c:	8f ef       	ldi	r24, 0xFF	; 255
    3c5e:	08 95       	ret

00003c60 <__unordsf2>:
    3c60:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__fp_cmp>
    3c64:	88 0b       	sbc	r24, r24
    3c66:	99 0b       	sbc	r25, r25
    3c68:	08 95       	ret

00003c6a <__divmodhi4>:
    3c6a:	97 fb       	bst	r25, 7
    3c6c:	07 2e       	mov	r0, r23
    3c6e:	16 f4       	brtc	.+4      	; 0x3c74 <__divmodhi4+0xa>
    3c70:	00 94       	com	r0
    3c72:	07 d0       	rcall	.+14     	; 0x3c82 <__divmodhi4_neg1>
    3c74:	77 fd       	sbrc	r23, 7
    3c76:	09 d0       	rcall	.+18     	; 0x3c8a <__divmodhi4_neg2>
    3c78:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <__udivmodhi4>
    3c7c:	07 fc       	sbrc	r0, 7
    3c7e:	05 d0       	rcall	.+10     	; 0x3c8a <__divmodhi4_neg2>
    3c80:	3e f4       	brtc	.+14     	; 0x3c90 <__divmodhi4_exit>

00003c82 <__divmodhi4_neg1>:
    3c82:	90 95       	com	r25
    3c84:	81 95       	neg	r24
    3c86:	9f 4f       	sbci	r25, 0xFF	; 255
    3c88:	08 95       	ret

00003c8a <__divmodhi4_neg2>:
    3c8a:	70 95       	com	r23
    3c8c:	61 95       	neg	r22
    3c8e:	7f 4f       	sbci	r23, 0xFF	; 255

00003c90 <__divmodhi4_exit>:
    3c90:	08 95       	ret

00003c92 <__udivmodsi4>:
    3c92:	a1 e2       	ldi	r26, 0x21	; 33
    3c94:	1a 2e       	mov	r1, r26
    3c96:	aa 1b       	sub	r26, r26
    3c98:	bb 1b       	sub	r27, r27
    3c9a:	fd 01       	movw	r30, r26
    3c9c:	0d c0       	rjmp	.+26     	; 0x3cb8 <__udivmodsi4_ep>

00003c9e <__udivmodsi4_loop>:
    3c9e:	aa 1f       	adc	r26, r26
    3ca0:	bb 1f       	adc	r27, r27
    3ca2:	ee 1f       	adc	r30, r30
    3ca4:	ff 1f       	adc	r31, r31
    3ca6:	a2 17       	cp	r26, r18
    3ca8:	b3 07       	cpc	r27, r19
    3caa:	e4 07       	cpc	r30, r20
    3cac:	f5 07       	cpc	r31, r21
    3cae:	20 f0       	brcs	.+8      	; 0x3cb8 <__udivmodsi4_ep>
    3cb0:	a2 1b       	sub	r26, r18
    3cb2:	b3 0b       	sbc	r27, r19
    3cb4:	e4 0b       	sbc	r30, r20
    3cb6:	f5 0b       	sbc	r31, r21

00003cb8 <__udivmodsi4_ep>:
    3cb8:	66 1f       	adc	r22, r22
    3cba:	77 1f       	adc	r23, r23
    3cbc:	88 1f       	adc	r24, r24
    3cbe:	99 1f       	adc	r25, r25
    3cc0:	1a 94       	dec	r1
    3cc2:	69 f7       	brne	.-38     	; 0x3c9e <__udivmodsi4_loop>
    3cc4:	60 95       	com	r22
    3cc6:	70 95       	com	r23
    3cc8:	80 95       	com	r24
    3cca:	90 95       	com	r25
    3ccc:	9b 01       	movw	r18, r22
    3cce:	ac 01       	movw	r20, r24
    3cd0:	bd 01       	movw	r22, r26
    3cd2:	cf 01       	movw	r24, r30
    3cd4:	08 95       	ret

00003cd6 <__tablejump2__>:
    3cd6:	ee 0f       	add	r30, r30
    3cd8:	ff 1f       	adc	r31, r31
    3cda:	05 90       	lpm	r0, Z+
    3cdc:	f4 91       	lpm	r31, Z
    3cde:	e0 2d       	mov	r30, r0
    3ce0:	09 94       	ijmp

00003ce2 <__udivmodhi4>:
    3ce2:	aa 1b       	sub	r26, r26
    3ce4:	bb 1b       	sub	r27, r27
    3ce6:	51 e1       	ldi	r21, 0x11	; 17
    3ce8:	07 c0       	rjmp	.+14     	; 0x3cf8 <__udivmodhi4_ep>

00003cea <__udivmodhi4_loop>:
    3cea:	aa 1f       	adc	r26, r26
    3cec:	bb 1f       	adc	r27, r27
    3cee:	a6 17       	cp	r26, r22
    3cf0:	b7 07       	cpc	r27, r23
    3cf2:	10 f0       	brcs	.+4      	; 0x3cf8 <__udivmodhi4_ep>
    3cf4:	a6 1b       	sub	r26, r22
    3cf6:	b7 0b       	sbc	r27, r23

00003cf8 <__udivmodhi4_ep>:
    3cf8:	88 1f       	adc	r24, r24
    3cfa:	99 1f       	adc	r25, r25
    3cfc:	5a 95       	dec	r21
    3cfe:	a9 f7       	brne	.-22     	; 0x3cea <__udivmodhi4_loop>
    3d00:	80 95       	com	r24
    3d02:	90 95       	com	r25
    3d04:	bc 01       	movw	r22, r24
    3d06:	cd 01       	movw	r24, r26
    3d08:	08 95       	ret

00003d0a <malloc>:
    3d0a:	0f 93       	push	r16
    3d0c:	1f 93       	push	r17
    3d0e:	cf 93       	push	r28
    3d10:	df 93       	push	r29
    3d12:	82 30       	cpi	r24, 0x02	; 2
    3d14:	91 05       	cpc	r25, r1
    3d16:	10 f4       	brcc	.+4      	; 0x3d1c <malloc+0x12>
    3d18:	82 e0       	ldi	r24, 0x02	; 2
    3d1a:	90 e0       	ldi	r25, 0x00	; 0
    3d1c:	e0 91 05 05 	lds	r30, 0x0505	; 0x800505 <__flp>
    3d20:	f0 91 06 05 	lds	r31, 0x0506	; 0x800506 <__flp+0x1>
    3d24:	20 e0       	ldi	r18, 0x00	; 0
    3d26:	30 e0       	ldi	r19, 0x00	; 0
    3d28:	a0 e0       	ldi	r26, 0x00	; 0
    3d2a:	b0 e0       	ldi	r27, 0x00	; 0
    3d2c:	30 97       	sbiw	r30, 0x00	; 0
    3d2e:	19 f1       	breq	.+70     	; 0x3d76 <malloc+0x6c>
    3d30:	40 81       	ld	r20, Z
    3d32:	51 81       	ldd	r21, Z+1	; 0x01
    3d34:	02 81       	ldd	r16, Z+2	; 0x02
    3d36:	13 81       	ldd	r17, Z+3	; 0x03
    3d38:	48 17       	cp	r20, r24
    3d3a:	59 07       	cpc	r21, r25
    3d3c:	c8 f0       	brcs	.+50     	; 0x3d70 <malloc+0x66>
    3d3e:	84 17       	cp	r24, r20
    3d40:	95 07       	cpc	r25, r21
    3d42:	69 f4       	brne	.+26     	; 0x3d5e <malloc+0x54>
    3d44:	10 97       	sbiw	r26, 0x00	; 0
    3d46:	31 f0       	breq	.+12     	; 0x3d54 <malloc+0x4a>
    3d48:	12 96       	adiw	r26, 0x02	; 2
    3d4a:	0c 93       	st	X, r16
    3d4c:	12 97       	sbiw	r26, 0x02	; 2
    3d4e:	13 96       	adiw	r26, 0x03	; 3
    3d50:	1c 93       	st	X, r17
    3d52:	27 c0       	rjmp	.+78     	; 0x3da2 <malloc+0x98>
    3d54:	00 93 05 05 	sts	0x0505, r16	; 0x800505 <__flp>
    3d58:	10 93 06 05 	sts	0x0506, r17	; 0x800506 <__flp+0x1>
    3d5c:	22 c0       	rjmp	.+68     	; 0x3da2 <malloc+0x98>
    3d5e:	21 15       	cp	r18, r1
    3d60:	31 05       	cpc	r19, r1
    3d62:	19 f0       	breq	.+6      	; 0x3d6a <malloc+0x60>
    3d64:	42 17       	cp	r20, r18
    3d66:	53 07       	cpc	r21, r19
    3d68:	18 f4       	brcc	.+6      	; 0x3d70 <malloc+0x66>
    3d6a:	9a 01       	movw	r18, r20
    3d6c:	bd 01       	movw	r22, r26
    3d6e:	ef 01       	movw	r28, r30
    3d70:	df 01       	movw	r26, r30
    3d72:	f8 01       	movw	r30, r16
    3d74:	db cf       	rjmp	.-74     	; 0x3d2c <malloc+0x22>
    3d76:	21 15       	cp	r18, r1
    3d78:	31 05       	cpc	r19, r1
    3d7a:	f9 f0       	breq	.+62     	; 0x3dba <malloc+0xb0>
    3d7c:	28 1b       	sub	r18, r24
    3d7e:	39 0b       	sbc	r19, r25
    3d80:	24 30       	cpi	r18, 0x04	; 4
    3d82:	31 05       	cpc	r19, r1
    3d84:	80 f4       	brcc	.+32     	; 0x3da6 <malloc+0x9c>
    3d86:	8a 81       	ldd	r24, Y+2	; 0x02
    3d88:	9b 81       	ldd	r25, Y+3	; 0x03
    3d8a:	61 15       	cp	r22, r1
    3d8c:	71 05       	cpc	r23, r1
    3d8e:	21 f0       	breq	.+8      	; 0x3d98 <malloc+0x8e>
    3d90:	fb 01       	movw	r30, r22
    3d92:	93 83       	std	Z+3, r25	; 0x03
    3d94:	82 83       	std	Z+2, r24	; 0x02
    3d96:	04 c0       	rjmp	.+8      	; 0x3da0 <malloc+0x96>
    3d98:	90 93 06 05 	sts	0x0506, r25	; 0x800506 <__flp+0x1>
    3d9c:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <__flp>
    3da0:	fe 01       	movw	r30, r28
    3da2:	32 96       	adiw	r30, 0x02	; 2
    3da4:	44 c0       	rjmp	.+136    	; 0x3e2e <malloc+0x124>
    3da6:	fe 01       	movw	r30, r28
    3da8:	e2 0f       	add	r30, r18
    3daa:	f3 1f       	adc	r31, r19
    3dac:	81 93       	st	Z+, r24
    3dae:	91 93       	st	Z+, r25
    3db0:	22 50       	subi	r18, 0x02	; 2
    3db2:	31 09       	sbc	r19, r1
    3db4:	39 83       	std	Y+1, r19	; 0x01
    3db6:	28 83       	st	Y, r18
    3db8:	3a c0       	rjmp	.+116    	; 0x3e2e <malloc+0x124>
    3dba:	20 91 03 05 	lds	r18, 0x0503	; 0x800503 <__brkval>
    3dbe:	30 91 04 05 	lds	r19, 0x0504	; 0x800504 <__brkval+0x1>
    3dc2:	23 2b       	or	r18, r19
    3dc4:	41 f4       	brne	.+16     	; 0x3dd6 <malloc+0xcc>
    3dc6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3dca:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3dce:	30 93 04 05 	sts	0x0504, r19	; 0x800504 <__brkval+0x1>
    3dd2:	20 93 03 05 	sts	0x0503, r18	; 0x800503 <__brkval>
    3dd6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3dda:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3dde:	21 15       	cp	r18, r1
    3de0:	31 05       	cpc	r19, r1
    3de2:	41 f4       	brne	.+16     	; 0x3df4 <malloc+0xea>
    3de4:	2d b7       	in	r18, 0x3d	; 61
    3de6:	3e b7       	in	r19, 0x3e	; 62
    3de8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3dec:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3df0:	24 1b       	sub	r18, r20
    3df2:	35 0b       	sbc	r19, r21
    3df4:	e0 91 03 05 	lds	r30, 0x0503	; 0x800503 <__brkval>
    3df8:	f0 91 04 05 	lds	r31, 0x0504	; 0x800504 <__brkval+0x1>
    3dfc:	e2 17       	cp	r30, r18
    3dfe:	f3 07       	cpc	r31, r19
    3e00:	a0 f4       	brcc	.+40     	; 0x3e2a <malloc+0x120>
    3e02:	2e 1b       	sub	r18, r30
    3e04:	3f 0b       	sbc	r19, r31
    3e06:	28 17       	cp	r18, r24
    3e08:	39 07       	cpc	r19, r25
    3e0a:	78 f0       	brcs	.+30     	; 0x3e2a <malloc+0x120>
    3e0c:	ac 01       	movw	r20, r24
    3e0e:	4e 5f       	subi	r20, 0xFE	; 254
    3e10:	5f 4f       	sbci	r21, 0xFF	; 255
    3e12:	24 17       	cp	r18, r20
    3e14:	35 07       	cpc	r19, r21
    3e16:	48 f0       	brcs	.+18     	; 0x3e2a <malloc+0x120>
    3e18:	4e 0f       	add	r20, r30
    3e1a:	5f 1f       	adc	r21, r31
    3e1c:	50 93 04 05 	sts	0x0504, r21	; 0x800504 <__brkval+0x1>
    3e20:	40 93 03 05 	sts	0x0503, r20	; 0x800503 <__brkval>
    3e24:	81 93       	st	Z+, r24
    3e26:	91 93       	st	Z+, r25
    3e28:	02 c0       	rjmp	.+4      	; 0x3e2e <malloc+0x124>
    3e2a:	e0 e0       	ldi	r30, 0x00	; 0
    3e2c:	f0 e0       	ldi	r31, 0x00	; 0
    3e2e:	cf 01       	movw	r24, r30
    3e30:	df 91       	pop	r29
    3e32:	cf 91       	pop	r28
    3e34:	1f 91       	pop	r17
    3e36:	0f 91       	pop	r16
    3e38:	08 95       	ret

00003e3a <free>:
    3e3a:	cf 93       	push	r28
    3e3c:	df 93       	push	r29
    3e3e:	00 97       	sbiw	r24, 0x00	; 0
    3e40:	09 f4       	brne	.+2      	; 0x3e44 <free+0xa>
    3e42:	81 c0       	rjmp	.+258    	; 0x3f46 <free+0x10c>
    3e44:	fc 01       	movw	r30, r24
    3e46:	32 97       	sbiw	r30, 0x02	; 2
    3e48:	13 82       	std	Z+3, r1	; 0x03
    3e4a:	12 82       	std	Z+2, r1	; 0x02
    3e4c:	a0 91 05 05 	lds	r26, 0x0505	; 0x800505 <__flp>
    3e50:	b0 91 06 05 	lds	r27, 0x0506	; 0x800506 <__flp+0x1>
    3e54:	10 97       	sbiw	r26, 0x00	; 0
    3e56:	81 f4       	brne	.+32     	; 0x3e78 <free+0x3e>
    3e58:	20 81       	ld	r18, Z
    3e5a:	31 81       	ldd	r19, Z+1	; 0x01
    3e5c:	82 0f       	add	r24, r18
    3e5e:	93 1f       	adc	r25, r19
    3e60:	20 91 03 05 	lds	r18, 0x0503	; 0x800503 <__brkval>
    3e64:	30 91 04 05 	lds	r19, 0x0504	; 0x800504 <__brkval+0x1>
    3e68:	28 17       	cp	r18, r24
    3e6a:	39 07       	cpc	r19, r25
    3e6c:	51 f5       	brne	.+84     	; 0x3ec2 <free+0x88>
    3e6e:	f0 93 04 05 	sts	0x0504, r31	; 0x800504 <__brkval+0x1>
    3e72:	e0 93 03 05 	sts	0x0503, r30	; 0x800503 <__brkval>
    3e76:	67 c0       	rjmp	.+206    	; 0x3f46 <free+0x10c>
    3e78:	ed 01       	movw	r28, r26
    3e7a:	20 e0       	ldi	r18, 0x00	; 0
    3e7c:	30 e0       	ldi	r19, 0x00	; 0
    3e7e:	ce 17       	cp	r28, r30
    3e80:	df 07       	cpc	r29, r31
    3e82:	40 f4       	brcc	.+16     	; 0x3e94 <free+0x5a>
    3e84:	4a 81       	ldd	r20, Y+2	; 0x02
    3e86:	5b 81       	ldd	r21, Y+3	; 0x03
    3e88:	9e 01       	movw	r18, r28
    3e8a:	41 15       	cp	r20, r1
    3e8c:	51 05       	cpc	r21, r1
    3e8e:	f1 f0       	breq	.+60     	; 0x3ecc <free+0x92>
    3e90:	ea 01       	movw	r28, r20
    3e92:	f5 cf       	rjmp	.-22     	; 0x3e7e <free+0x44>
    3e94:	d3 83       	std	Z+3, r29	; 0x03
    3e96:	c2 83       	std	Z+2, r28	; 0x02
    3e98:	40 81       	ld	r20, Z
    3e9a:	51 81       	ldd	r21, Z+1	; 0x01
    3e9c:	84 0f       	add	r24, r20
    3e9e:	95 1f       	adc	r25, r21
    3ea0:	c8 17       	cp	r28, r24
    3ea2:	d9 07       	cpc	r29, r25
    3ea4:	59 f4       	brne	.+22     	; 0x3ebc <free+0x82>
    3ea6:	88 81       	ld	r24, Y
    3ea8:	99 81       	ldd	r25, Y+1	; 0x01
    3eaa:	84 0f       	add	r24, r20
    3eac:	95 1f       	adc	r25, r21
    3eae:	02 96       	adiw	r24, 0x02	; 2
    3eb0:	91 83       	std	Z+1, r25	; 0x01
    3eb2:	80 83       	st	Z, r24
    3eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb6:	9b 81       	ldd	r25, Y+3	; 0x03
    3eb8:	93 83       	std	Z+3, r25	; 0x03
    3eba:	82 83       	std	Z+2, r24	; 0x02
    3ebc:	21 15       	cp	r18, r1
    3ebe:	31 05       	cpc	r19, r1
    3ec0:	29 f4       	brne	.+10     	; 0x3ecc <free+0x92>
    3ec2:	f0 93 06 05 	sts	0x0506, r31	; 0x800506 <__flp+0x1>
    3ec6:	e0 93 05 05 	sts	0x0505, r30	; 0x800505 <__flp>
    3eca:	3d c0       	rjmp	.+122    	; 0x3f46 <free+0x10c>
    3ecc:	e9 01       	movw	r28, r18
    3ece:	fb 83       	std	Y+3, r31	; 0x03
    3ed0:	ea 83       	std	Y+2, r30	; 0x02
    3ed2:	49 91       	ld	r20, Y+
    3ed4:	59 91       	ld	r21, Y+
    3ed6:	c4 0f       	add	r28, r20
    3ed8:	d5 1f       	adc	r29, r21
    3eda:	ec 17       	cp	r30, r28
    3edc:	fd 07       	cpc	r31, r29
    3ede:	61 f4       	brne	.+24     	; 0x3ef8 <free+0xbe>
    3ee0:	80 81       	ld	r24, Z
    3ee2:	91 81       	ldd	r25, Z+1	; 0x01
    3ee4:	84 0f       	add	r24, r20
    3ee6:	95 1f       	adc	r25, r21
    3ee8:	02 96       	adiw	r24, 0x02	; 2
    3eea:	e9 01       	movw	r28, r18
    3eec:	99 83       	std	Y+1, r25	; 0x01
    3eee:	88 83       	st	Y, r24
    3ef0:	82 81       	ldd	r24, Z+2	; 0x02
    3ef2:	93 81       	ldd	r25, Z+3	; 0x03
    3ef4:	9b 83       	std	Y+3, r25	; 0x03
    3ef6:	8a 83       	std	Y+2, r24	; 0x02
    3ef8:	e0 e0       	ldi	r30, 0x00	; 0
    3efa:	f0 e0       	ldi	r31, 0x00	; 0
    3efc:	12 96       	adiw	r26, 0x02	; 2
    3efe:	8d 91       	ld	r24, X+
    3f00:	9c 91       	ld	r25, X
    3f02:	13 97       	sbiw	r26, 0x03	; 3
    3f04:	00 97       	sbiw	r24, 0x00	; 0
    3f06:	19 f0       	breq	.+6      	; 0x3f0e <free+0xd4>
    3f08:	fd 01       	movw	r30, r26
    3f0a:	dc 01       	movw	r26, r24
    3f0c:	f7 cf       	rjmp	.-18     	; 0x3efc <free+0xc2>
    3f0e:	8d 91       	ld	r24, X+
    3f10:	9c 91       	ld	r25, X
    3f12:	11 97       	sbiw	r26, 0x01	; 1
    3f14:	9d 01       	movw	r18, r26
    3f16:	2e 5f       	subi	r18, 0xFE	; 254
    3f18:	3f 4f       	sbci	r19, 0xFF	; 255
    3f1a:	82 0f       	add	r24, r18
    3f1c:	93 1f       	adc	r25, r19
    3f1e:	20 91 03 05 	lds	r18, 0x0503	; 0x800503 <__brkval>
    3f22:	30 91 04 05 	lds	r19, 0x0504	; 0x800504 <__brkval+0x1>
    3f26:	28 17       	cp	r18, r24
    3f28:	39 07       	cpc	r19, r25
    3f2a:	69 f4       	brne	.+26     	; 0x3f46 <free+0x10c>
    3f2c:	30 97       	sbiw	r30, 0x00	; 0
    3f2e:	29 f4       	brne	.+10     	; 0x3f3a <free+0x100>
    3f30:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <__flp+0x1>
    3f34:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <__flp>
    3f38:	02 c0       	rjmp	.+4      	; 0x3f3e <free+0x104>
    3f3a:	13 82       	std	Z+3, r1	; 0x03
    3f3c:	12 82       	std	Z+2, r1	; 0x02
    3f3e:	b0 93 04 05 	sts	0x0504, r27	; 0x800504 <__brkval+0x1>
    3f42:	a0 93 03 05 	sts	0x0503, r26	; 0x800503 <__brkval>
    3f46:	df 91       	pop	r29
    3f48:	cf 91       	pop	r28
    3f4a:	08 95       	ret

00003f4c <realloc>:
    3f4c:	a0 e0       	ldi	r26, 0x00	; 0
    3f4e:	b0 e0       	ldi	r27, 0x00	; 0
    3f50:	ec ea       	ldi	r30, 0xAC	; 172
    3f52:	ff e1       	ldi	r31, 0x1F	; 31
    3f54:	0c 94 85 20 	jmp	0x410a	; 0x410a <__prologue_saves__+0x8>
    3f58:	ec 01       	movw	r28, r24
    3f5a:	00 97       	sbiw	r24, 0x00	; 0
    3f5c:	21 f4       	brne	.+8      	; 0x3f66 <realloc+0x1a>
    3f5e:	cb 01       	movw	r24, r22
    3f60:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <malloc>
    3f64:	b4 c0       	rjmp	.+360    	; 0x40ce <realloc+0x182>
    3f66:	fc 01       	movw	r30, r24
    3f68:	e6 0f       	add	r30, r22
    3f6a:	f7 1f       	adc	r31, r23
    3f6c:	9c 01       	movw	r18, r24
    3f6e:	22 50       	subi	r18, 0x02	; 2
    3f70:	31 09       	sbc	r19, r1
    3f72:	e2 17       	cp	r30, r18
    3f74:	f3 07       	cpc	r31, r19
    3f76:	08 f4       	brcc	.+2      	; 0x3f7a <realloc+0x2e>
    3f78:	a8 c0       	rjmp	.+336    	; 0x40ca <realloc+0x17e>
    3f7a:	d9 01       	movw	r26, r18
    3f7c:	0d 91       	ld	r16, X+
    3f7e:	1c 91       	ld	r17, X
    3f80:	11 97       	sbiw	r26, 0x01	; 1
    3f82:	06 17       	cp	r16, r22
    3f84:	17 07       	cpc	r17, r23
    3f86:	b0 f0       	brcs	.+44     	; 0x3fb4 <realloc+0x68>
    3f88:	05 30       	cpi	r16, 0x05	; 5
    3f8a:	11 05       	cpc	r17, r1
    3f8c:	08 f4       	brcc	.+2      	; 0x3f90 <realloc+0x44>
    3f8e:	9b c0       	rjmp	.+310    	; 0x40c6 <realloc+0x17a>
    3f90:	c8 01       	movw	r24, r16
    3f92:	04 97       	sbiw	r24, 0x04	; 4
    3f94:	86 17       	cp	r24, r22
    3f96:	97 07       	cpc	r25, r23
    3f98:	08 f4       	brcc	.+2      	; 0x3f9c <realloc+0x50>
    3f9a:	95 c0       	rjmp	.+298    	; 0x40c6 <realloc+0x17a>
    3f9c:	02 50       	subi	r16, 0x02	; 2
    3f9e:	11 09       	sbc	r17, r1
    3fa0:	06 1b       	sub	r16, r22
    3fa2:	17 0b       	sbc	r17, r23
    3fa4:	01 93       	st	Z+, r16
    3fa6:	11 93       	st	Z+, r17
    3fa8:	6d 93       	st	X+, r22
    3faa:	7c 93       	st	X, r23
    3fac:	cf 01       	movw	r24, r30
    3fae:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <free>
    3fb2:	89 c0       	rjmp	.+274    	; 0x40c6 <realloc+0x17a>
    3fb4:	5b 01       	movw	r10, r22
    3fb6:	a0 1a       	sub	r10, r16
    3fb8:	b1 0a       	sbc	r11, r17
    3fba:	4c 01       	movw	r8, r24
    3fbc:	80 0e       	add	r8, r16
    3fbe:	91 1e       	adc	r9, r17
    3fc0:	a0 91 05 05 	lds	r26, 0x0505	; 0x800505 <__flp>
    3fc4:	b0 91 06 05 	lds	r27, 0x0506	; 0x800506 <__flp+0x1>
    3fc8:	61 2c       	mov	r6, r1
    3fca:	71 2c       	mov	r7, r1
    3fcc:	e1 2c       	mov	r14, r1
    3fce:	f1 2c       	mov	r15, r1
    3fd0:	10 97       	sbiw	r26, 0x00	; 0
    3fd2:	09 f4       	brne	.+2      	; 0x3fd6 <realloc+0x8a>
    3fd4:	46 c0       	rjmp	.+140    	; 0x4062 <realloc+0x116>
    3fd6:	8d 91       	ld	r24, X+
    3fd8:	9c 91       	ld	r25, X
    3fda:	11 97       	sbiw	r26, 0x01	; 1
    3fdc:	a8 15       	cp	r26, r8
    3fde:	b9 05       	cpc	r27, r9
    3fe0:	b1 f5       	brne	.+108    	; 0x404e <realloc+0x102>
    3fe2:	6c 01       	movw	r12, r24
    3fe4:	42 e0       	ldi	r20, 0x02	; 2
    3fe6:	c4 0e       	add	r12, r20
    3fe8:	d1 1c       	adc	r13, r1
    3fea:	ca 14       	cp	r12, r10
    3fec:	db 04       	cpc	r13, r11
    3fee:	78 f1       	brcs	.+94     	; 0x404e <realloc+0x102>
    3ff0:	4c 01       	movw	r8, r24
    3ff2:	8a 18       	sub	r8, r10
    3ff4:	9b 08       	sbc	r9, r11
    3ff6:	64 01       	movw	r12, r8
    3ff8:	42 e0       	ldi	r20, 0x02	; 2
    3ffa:	c4 0e       	add	r12, r20
    3ffc:	d1 1c       	adc	r13, r1
    3ffe:	12 96       	adiw	r26, 0x02	; 2
    4000:	bc 90       	ld	r11, X
    4002:	12 97       	sbiw	r26, 0x02	; 2
    4004:	13 96       	adiw	r26, 0x03	; 3
    4006:	ac 91       	ld	r26, X
    4008:	b5 e0       	ldi	r27, 0x05	; 5
    400a:	cb 16       	cp	r12, r27
    400c:	d1 04       	cpc	r13, r1
    400e:	40 f0       	brcs	.+16     	; 0x4020 <realloc+0xd4>
    4010:	b2 82       	std	Z+2, r11	; 0x02
    4012:	a3 83       	std	Z+3, r26	; 0x03
    4014:	91 82       	std	Z+1, r9	; 0x01
    4016:	80 82       	st	Z, r8
    4018:	d9 01       	movw	r26, r18
    401a:	6d 93       	st	X+, r22
    401c:	7c 93       	st	X, r23
    401e:	09 c0       	rjmp	.+18     	; 0x4032 <realloc+0xe6>
    4020:	0e 5f       	subi	r16, 0xFE	; 254
    4022:	1f 4f       	sbci	r17, 0xFF	; 255
    4024:	80 0f       	add	r24, r16
    4026:	91 1f       	adc	r25, r17
    4028:	f9 01       	movw	r30, r18
    402a:	91 83       	std	Z+1, r25	; 0x01
    402c:	80 83       	st	Z, r24
    402e:	eb 2d       	mov	r30, r11
    4030:	fa 2f       	mov	r31, r26
    4032:	e1 14       	cp	r14, r1
    4034:	f1 04       	cpc	r15, r1
    4036:	31 f0       	breq	.+12     	; 0x4044 <realloc+0xf8>
    4038:	d7 01       	movw	r26, r14
    403a:	13 96       	adiw	r26, 0x03	; 3
    403c:	fc 93       	st	X, r31
    403e:	ee 93       	st	-X, r30
    4040:	12 97       	sbiw	r26, 0x02	; 2
    4042:	41 c0       	rjmp	.+130    	; 0x40c6 <realloc+0x17a>
    4044:	f0 93 06 05 	sts	0x0506, r31	; 0x800506 <__flp+0x1>
    4048:	e0 93 05 05 	sts	0x0505, r30	; 0x800505 <__flp>
    404c:	3c c0       	rjmp	.+120    	; 0x40c6 <realloc+0x17a>
    404e:	68 16       	cp	r6, r24
    4050:	79 06       	cpc	r7, r25
    4052:	08 f4       	brcc	.+2      	; 0x4056 <realloc+0x10a>
    4054:	3c 01       	movw	r6, r24
    4056:	7d 01       	movw	r14, r26
    4058:	12 96       	adiw	r26, 0x02	; 2
    405a:	0d 90       	ld	r0, X+
    405c:	bc 91       	ld	r27, X
    405e:	a0 2d       	mov	r26, r0
    4060:	b7 cf       	rjmp	.-146    	; 0x3fd0 <realloc+0x84>
    4062:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <__brkval>
    4066:	90 91 04 05 	lds	r25, 0x0504	; 0x800504 <__brkval+0x1>
    406a:	88 16       	cp	r8, r24
    406c:	99 06       	cpc	r9, r25
    406e:	e1 f4       	brne	.+56     	; 0x40a8 <realloc+0x15c>
    4070:	66 16       	cp	r6, r22
    4072:	77 06       	cpc	r7, r23
    4074:	c8 f4       	brcc	.+50     	; 0x40a8 <realloc+0x15c>
    4076:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    407a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    407e:	00 97       	sbiw	r24, 0x00	; 0
    4080:	41 f4       	brne	.+16     	; 0x4092 <realloc+0x146>
    4082:	8d b7       	in	r24, 0x3d	; 61
    4084:	9e b7       	in	r25, 0x3e	; 62
    4086:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    408a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    408e:	84 1b       	sub	r24, r20
    4090:	95 0b       	sbc	r25, r21
    4092:	e8 17       	cp	r30, r24
    4094:	f9 07       	cpc	r31, r25
    4096:	c8 f4       	brcc	.+50     	; 0x40ca <realloc+0x17e>
    4098:	f0 93 04 05 	sts	0x0504, r31	; 0x800504 <__brkval+0x1>
    409c:	e0 93 03 05 	sts	0x0503, r30	; 0x800503 <__brkval>
    40a0:	f9 01       	movw	r30, r18
    40a2:	71 83       	std	Z+1, r23	; 0x01
    40a4:	60 83       	st	Z, r22
    40a6:	0f c0       	rjmp	.+30     	; 0x40c6 <realloc+0x17a>
    40a8:	cb 01       	movw	r24, r22
    40aa:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <malloc>
    40ae:	7c 01       	movw	r14, r24
    40b0:	00 97       	sbiw	r24, 0x00	; 0
    40b2:	59 f0       	breq	.+22     	; 0x40ca <realloc+0x17e>
    40b4:	a8 01       	movw	r20, r16
    40b6:	be 01       	movw	r22, r28
    40b8:	0e 94 71 20 	call	0x40e2	; 0x40e2 <memcpy>
    40bc:	ce 01       	movw	r24, r28
    40be:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <free>
    40c2:	c7 01       	movw	r24, r14
    40c4:	04 c0       	rjmp	.+8      	; 0x40ce <realloc+0x182>
    40c6:	ce 01       	movw	r24, r28
    40c8:	02 c0       	rjmp	.+4      	; 0x40ce <realloc+0x182>
    40ca:	80 e0       	ldi	r24, 0x00	; 0
    40cc:	90 e0       	ldi	r25, 0x00	; 0
    40ce:	cd b7       	in	r28, 0x3d	; 61
    40d0:	de b7       	in	r29, 0x3e	; 62
    40d2:	ee e0       	ldi	r30, 0x0E	; 14
    40d4:	0c 94 a1 20 	jmp	0x4142	; 0x4142 <__epilogue_restores__+0x8>

000040d8 <abort>:
    40d8:	81 e0       	ldi	r24, 0x01	; 1
    40da:	90 e0       	ldi	r25, 0x00	; 0
    40dc:	f8 94       	cli
    40de:	0c 94 b8 20 	jmp	0x4170	; 0x4170 <__do_global_dtors>

000040e2 <memcpy>:
    40e2:	fb 01       	movw	r30, r22
    40e4:	dc 01       	movw	r26, r24
    40e6:	02 c0       	rjmp	.+4      	; 0x40ec <memcpy+0xa>
    40e8:	01 90       	ld	r0, Z+
    40ea:	0d 92       	st	X+, r0
    40ec:	41 50       	subi	r20, 0x01	; 1
    40ee:	50 40       	sbci	r21, 0x00	; 0
    40f0:	d8 f7       	brcc	.-10     	; 0x40e8 <memcpy+0x6>
    40f2:	08 95       	ret

000040f4 <strcpy>:
    40f4:	fb 01       	movw	r30, r22
    40f6:	dc 01       	movw	r26, r24
    40f8:	01 90       	ld	r0, Z+
    40fa:	0d 92       	st	X+, r0
    40fc:	00 20       	and	r0, r0
    40fe:	e1 f7       	brne	.-8      	; 0x40f8 <strcpy+0x4>
    4100:	08 95       	ret

00004102 <__prologue_saves__>:
    4102:	2f 92       	push	r2
    4104:	3f 92       	push	r3
    4106:	4f 92       	push	r4
    4108:	5f 92       	push	r5
    410a:	6f 92       	push	r6
    410c:	7f 92       	push	r7
    410e:	8f 92       	push	r8
    4110:	9f 92       	push	r9
    4112:	af 92       	push	r10
    4114:	bf 92       	push	r11
    4116:	cf 92       	push	r12
    4118:	df 92       	push	r13
    411a:	ef 92       	push	r14
    411c:	ff 92       	push	r15
    411e:	0f 93       	push	r16
    4120:	1f 93       	push	r17
    4122:	cf 93       	push	r28
    4124:	df 93       	push	r29
    4126:	cd b7       	in	r28, 0x3d	; 61
    4128:	de b7       	in	r29, 0x3e	; 62
    412a:	ca 1b       	sub	r28, r26
    412c:	db 0b       	sbc	r29, r27
    412e:	0f b6       	in	r0, 0x3f	; 63
    4130:	f8 94       	cli
    4132:	de bf       	out	0x3e, r29	; 62
    4134:	0f be       	out	0x3f, r0	; 63
    4136:	cd bf       	out	0x3d, r28	; 61
    4138:	09 94       	ijmp

0000413a <__epilogue_restores__>:
    413a:	2a 88       	ldd	r2, Y+18	; 0x12
    413c:	39 88       	ldd	r3, Y+17	; 0x11
    413e:	48 88       	ldd	r4, Y+16	; 0x10
    4140:	5f 84       	ldd	r5, Y+15	; 0x0f
    4142:	6e 84       	ldd	r6, Y+14	; 0x0e
    4144:	7d 84       	ldd	r7, Y+13	; 0x0d
    4146:	8c 84       	ldd	r8, Y+12	; 0x0c
    4148:	9b 84       	ldd	r9, Y+11	; 0x0b
    414a:	aa 84       	ldd	r10, Y+10	; 0x0a
    414c:	b9 84       	ldd	r11, Y+9	; 0x09
    414e:	c8 84       	ldd	r12, Y+8	; 0x08
    4150:	df 80       	ldd	r13, Y+7	; 0x07
    4152:	ee 80       	ldd	r14, Y+6	; 0x06
    4154:	fd 80       	ldd	r15, Y+5	; 0x05
    4156:	0c 81       	ldd	r16, Y+4	; 0x04
    4158:	1b 81       	ldd	r17, Y+3	; 0x03
    415a:	aa 81       	ldd	r26, Y+2	; 0x02
    415c:	b9 81       	ldd	r27, Y+1	; 0x01
    415e:	ce 0f       	add	r28, r30
    4160:	d1 1d       	adc	r29, r1
    4162:	0f b6       	in	r0, 0x3f	; 63
    4164:	f8 94       	cli
    4166:	de bf       	out	0x3e, r29	; 62
    4168:	0f be       	out	0x3f, r0	; 63
    416a:	cd bf       	out	0x3d, r28	; 61
    416c:	ed 01       	movw	r28, r26
    416e:	08 95       	ret

00004170 <__do_global_dtors>:
    4170:	10 e0       	ldi	r17, 0x00	; 0
    4172:	cc ee       	ldi	r28, 0xEC	; 236
    4174:	d0 e0       	ldi	r29, 0x00	; 0
    4176:	04 c0       	rjmp	.+8      	; 0x4180 <__do_global_dtors+0x10>
    4178:	fe 01       	movw	r30, r28
    417a:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <__tablejump2__>
    417e:	21 96       	adiw	r28, 0x01	; 1
    4180:	cd 3e       	cpi	r28, 0xED	; 237
    4182:	d1 07       	cpc	r29, r17
    4184:	c9 f7       	brne	.-14     	; 0x4178 <__do_global_dtors+0x8>
    4186:	f8 94       	cli

00004188 <__stop_program>:
    4188:	ff cf       	rjmp	.-2      	; 0x4188 <__stop_program>
