
Projektarbeit_COC_BRA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014e  00800100  00003c68  00003cfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000205  0080024e  0080024e  00003e4a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003e4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003e7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ad8  00000000  00000000  00003ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000172c2  00000000  00000000  00004994  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e51  00000000  00000000  0001bc56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005dbb  00000000  00000000  0001faa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000021d8  00000000  00000000  00025864  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004b62  00000000  00000000  00027a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bed3  00000000  00000000  0002c59e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b90  00000000  00000000  00038471  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__dtors_end>
       4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      28:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__vector_10>
      2c:	0c 94 b9 14 	jmp	0x2972	; 0x2972 <__vector_11>
      30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      5c:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__vector_23>
      60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      90:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__vector_36>
      94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      ac:	07 18       	sub	r0, r7
      ae:	0a 18       	sub	r0, r10
      b0:	f9 17       	cp	r31, r25
      b2:	fd 17       	cp	r31, r29
      b4:	03 18       	sub	r0, r3
      b6:	2b 18       	sub	r2, r11
      b8:	2b 18       	sub	r2, r11
      ba:	2b 18       	sub	r2, r11
      bc:	0e 18       	sub	r0, r14
      be:	12 18       	sub	r1, r2
      c0:	16 18       	sub	r1, r6
      c2:	1c 18       	sub	r1, r12
      c4:	20 18       	sub	r2, r0
      c6:	2b 18       	sub	r2, r11
      c8:	26 18       	sub	r2, r6

000000ca <__trampolines_end>:
	...

000000cb <USB_DeviceDescriptorIAD>:
      cb:	12 01 00 02 ef 02 01 40 41 23 36 80 00 01 01 02     .......@A#6.....
      db:	03 01                                               ..

000000dd <STRING_MANUFACTURER>:
      dd:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

000000e9 <STRING_PRODUCT>:
      e9:	41 72 64 75 69 6e 6f 20 4c 65 6f 6e 61 72 64 6f     Arduino Leonardo
	...

000000fa <STRING_LANGUAGE>:
      fa:	04 03 09 04                                         ....

000000fe <analog_pin_to_channel_PGM>:
      fe:	07 06 05 04 01 00 08 0a 0b 0c 0d 09                 ............

0000010a <digital_pin_to_timer_PGM>:
     10a:	00 00 00 02 00 09 0f 00 00 03 04 01 00 0c 00 00     ................
	...

00000129 <digital_pin_to_bit_mask_PGM>:
     129:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     139:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

00000148 <digital_pin_to_port_PGM>:
     148:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     158:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

00000167 <port_to_input_PGM>:
     167:	00 00 00 00 23 00 26 00 29 00 2c 00 2f 00           ....#.&.).,./.

00000175 <port_to_output_PGM>:
     175:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

00000183 <port_to_mode_PGM>:
     183:	00 00 00 00 24 00 27 00 2a 00 2d 00 30 00           ....$.'.*.-.0.

00000191 <_cdcInterface>:
     191:	08 0b 00 02 02 02 01 00 09 04 00 00 01 02 02 00     ................
     1a1:	00 05 24 00 10 01 05 24 01 01 01 04 24 02 06 05     ..$....$....$...
     1b1:	24 06 00 01 07 05 81 03 10 00 40 09 04 01 00 02     $.........@.....
     1c1:	0a 00 00 00 07 05 02 02 40 00 00 07 05 83 02 40     ........@......@
     1d1:	00 00 00                                            ...

000001d4 <__ctors_start>:
     1d4:	c3 04       	cpc	r12, r3
     1d6:	ea 0e       	add	r14, r26
     1d8:	48 1a       	sub	r4, r24

000001da <__ctors_end>:
     1da:	86 05       	cpc	r24, r6

000001dc <__dtors_end>:
     1dc:	11 24       	eor	r1, r1
     1de:	1f be       	out	0x3f, r1	; 63
     1e0:	cf ef       	ldi	r28, 0xFF	; 255
     1e2:	da e0       	ldi	r29, 0x0A	; 10
     1e4:	de bf       	out	0x3e, r29	; 62
     1e6:	cd bf       	out	0x3d, r28	; 61

000001e8 <__do_copy_data>:
     1e8:	12 e0       	ldi	r17, 0x02	; 2
     1ea:	a0 e0       	ldi	r26, 0x00	; 0
     1ec:	b1 e0       	ldi	r27, 0x01	; 1
     1ee:	e8 e6       	ldi	r30, 0x68	; 104
     1f0:	fc e3       	ldi	r31, 0x3C	; 60
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__do_copy_data+0x10>
     1f4:	05 90       	lpm	r0, Z+
     1f6:	0d 92       	st	X+, r0
     1f8:	ae 34       	cpi	r26, 0x4E	; 78
     1fa:	b1 07       	cpc	r27, r17
     1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__do_copy_data+0xc>

000001fe <__do_clear_bss>:
     1fe:	24 e0       	ldi	r18, 0x04	; 4
     200:	ae e4       	ldi	r26, 0x4E	; 78
     202:	b2 e0       	ldi	r27, 0x02	; 2
     204:	01 c0       	rjmp	.+2      	; 0x208 <.do_clear_bss_start>

00000206 <.do_clear_bss_loop>:
     206:	1d 92       	st	X+, r1

00000208 <.do_clear_bss_start>:
     208:	a3 35       	cpi	r26, 0x53	; 83
     20a:	b2 07       	cpc	r27, r18
     20c:	e1 f7       	brne	.-8      	; 0x206 <.do_clear_bss_loop>

0000020e <__do_global_ctors>:
     20e:	10 e0       	ldi	r17, 0x00	; 0
     210:	cd ee       	ldi	r28, 0xED	; 237
     212:	d0 e0       	ldi	r29, 0x00	; 0
     214:	04 c0       	rjmp	.+8      	; 0x21e <__do_global_ctors+0x10>
     216:	21 97       	sbiw	r28, 0x01	; 1
     218:	fe 01       	movw	r30, r28
     21a:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <__tablejump2__>
     21e:	ca 3e       	cpi	r28, 0xEA	; 234
     220:	d1 07       	cpc	r29, r17
     222:	c9 f7       	brne	.-14     	; 0x216 <__do_global_ctors+0x8>
     224:	0e 94 87 10 	call	0x210e	; 0x210e <main>
     228:	0c 94 27 1e 	jmp	0x3c4e	; 0x3c4e <__do_global_dtors>

0000022c <__bad_interrupt>:
     22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <_Z6getkeyv>:
 */
int getkey(void)
{
	static int keys[NUMKEYS+1];
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <analogRead>

	if (val > 1020) { // no key pressed
     236:	8d 3f       	cpi	r24, 0xFD	; 253
     238:	23 e0       	ldi	r18, 0x03	; 3
     23a:	92 07       	cpc	r25, r18
     23c:	20 f1       	brcs	.+72     	; 0x286 <_Z6getkeyv+0x56>
		if (++keys[0] > NOPRESS) {
     23e:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <__data_end>
     242:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <__data_end+0x1>
     246:	01 96       	adiw	r24, 0x01	; 1
     248:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <__data_end+0x1>
     24c:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <__data_end>
     250:	03 97       	sbiw	r24, 0x03	; 3
     252:	0c f4       	brge	.+2      	; 0x256 <_Z6getkeyv+0x26>
     254:	6a c0       	rjmp	.+212    	; 0x32a <_Z6getkeyv+0xfa>
     256:	ee e4       	ldi	r30, 0x4E	; 78
     258:	f2 e0       	ldi	r31, 0x02	; 2
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	90 e0       	ldi	r25, 0x00	; 0
			for(uint8_t i = 0; i <= NUMKEYS; i++){
				if(keys[i] > KEYPRESS){
     262:	40 81       	ld	r20, Z
     264:	51 81       	ldd	r21, Z+1	; 0x01
     266:	44 30       	cpi	r20, 0x04	; 4
     268:	51 05       	cpc	r21, r1
     26a:	2c f0       	brlt	.+10     	; 0x276 <_Z6getkeyv+0x46>
     26c:	c9 01       	movw	r24, r18
					data = i;
					if(keys[i] > LONGPRESS) data += 5;
     26e:	49 3c       	cpi	r20, 0xC9	; 201
     270:	51 05       	cpc	r21, r1
     272:	0c f0       	brlt	.+2      	; 0x276 <_Z6getkeyv+0x46>
     274:	05 96       	adiw	r24, 0x05	; 5
				}
				keys[i] = 0;
     276:	11 92       	st	Z+, r1
     278:	11 92       	st	Z+, r1
     27a:	2f 5f       	subi	r18, 0xFF	; 255
     27c:	3f 4f       	sbci	r19, 0xFF	; 255
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);

	if (val > 1020) { // no key pressed
		if (++keys[0] > NOPRESS) {
			for(uint8_t i = 0; i <= NUMKEYS; i++){
     27e:	26 30       	cpi	r18, 0x06	; 6
     280:	31 05       	cpc	r19, r1
     282:	79 f7       	brne	.-34     	; 0x262 <_Z6getkeyv+0x32>
     284:	08 95       	ret
			}
		}
		else data = 0;
	}
	else {
		if (val < S1_LIMIT && keys[1] < 32000) ++keys[1]; // key1 pressed
     286:	89 34       	cpi	r24, 0x49	; 73
     288:	91 05       	cpc	r25, r1
     28a:	70 f4       	brcc	.+28     	; 0x2a8 <_Z6getkeyv+0x78>
     28c:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <__data_end+0x2>
     290:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <__data_end+0x3>
     294:	81 15       	cp	r24, r1
     296:	2d e7       	ldi	r18, 0x7D	; 125
     298:	92 07       	cpc	r25, r18
     29a:	4c f4       	brge	.+18     	; 0x2ae <_Z6getkeyv+0x7e>
     29c:	01 96       	adiw	r24, 0x01	; 1
     29e:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <__data_end+0x3>
     2a2:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <__data_end+0x2>
     2a6:	41 c0       	rjmp	.+130    	; 0x32a <_Z6getkeyv+0xfa>
		else if (val < S2_LIMIT && keys[2] < 32000) ++keys[2]; //key2 pressed
     2a8:	8e 3e       	cpi	r24, 0xEE	; 238
     2aa:	91 05       	cpc	r25, r1
     2ac:	70 f4       	brcc	.+28     	; 0x2ca <_Z6getkeyv+0x9a>
     2ae:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <__data_end+0x4>
     2b2:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <__data_end+0x5>
     2b6:	81 15       	cp	r24, r1
     2b8:	2d e7       	ldi	r18, 0x7D	; 125
     2ba:	92 07       	cpc	r25, r18
     2bc:	54 f4       	brge	.+20     	; 0x2d2 <_Z6getkeyv+0xa2>
     2be:	01 96       	adiw	r24, 0x01	; 1
     2c0:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <__data_end+0x5>
     2c4:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <__data_end+0x4>
     2c8:	30 c0       	rjmp	.+96     	; 0x32a <_Z6getkeyv+0xfa>
		else if (val < S3_LIMIT && keys[3] < 32000) ++keys[3]; //key3 pressed
     2ca:	82 3a       	cpi	r24, 0xA2	; 162
     2cc:	21 e0       	ldi	r18, 0x01	; 1
     2ce:	92 07       	cpc	r25, r18
     2d0:	70 f4       	brcc	.+28     	; 0x2ee <_Z6getkeyv+0xbe>
     2d2:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <__data_end+0x6>
     2d6:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <__data_end+0x7>
     2da:	81 15       	cp	r24, r1
     2dc:	2d e7       	ldi	r18, 0x7D	; 125
     2de:	92 07       	cpc	r25, r18
     2e0:	4c f4       	brge	.+18     	; 0x2f4 <_Z6getkeyv+0xc4>
     2e2:	01 96       	adiw	r24, 0x01	; 1
     2e4:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <__data_end+0x7>
     2e8:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <__data_end+0x6>
     2ec:	1e c0       	rjmp	.+60     	; 0x32a <_Z6getkeyv+0xfa>
		else if (val < S4_LIMIT && keys[4] < 32000) ++keys[4]; //key4 pressed
     2ee:	80 37       	cpi	r24, 0x70	; 112
     2f0:	92 40       	sbci	r25, 0x02	; 2
     2f2:	70 f4       	brcc	.+28     	; 0x310 <_Z6getkeyv+0xe0>
     2f4:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <__data_end+0x8>
     2f8:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <__data_end+0x9>
     2fc:	81 15       	cp	r24, r1
     2fe:	2d e7       	ldi	r18, 0x7D	; 125
     300:	92 07       	cpc	r25, r18
     302:	34 f4       	brge	.+12     	; 0x310 <_Z6getkeyv+0xe0>
     304:	01 96       	adiw	r24, 0x01	; 1
     306:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <__data_end+0x9>
     30a:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <__data_end+0x8>
     30e:	0d c0       	rjmp	.+26     	; 0x32a <_Z6getkeyv+0xfa>
		else if ( keys[5] < 32000) ++keys[5]; // key5 pressed
     310:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <__data_end+0xa>
     314:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <__data_end+0xb>
     318:	81 15       	cp	r24, r1
     31a:	2d e7       	ldi	r18, 0x7D	; 125
     31c:	92 07       	cpc	r25, r18
     31e:	2c f4       	brge	.+10     	; 0x32a <_Z6getkeyv+0xfa>
     320:	01 96       	adiw	r24, 0x01	; 1
     322:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <__data_end+0xb>
     326:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end+0xa>
		data = 0;
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	90 e0       	ldi	r25, 0x00	; 0
	}
	return data;
}
     32e:	08 95       	ret

00000330 <_ZN5Print17availableForWriteEv>:
	return ret;
}

int Zeit::GetHours(){return hh_;};
int Zeit::GetMinutes(){return mm_;};
int Zeit::GetSeconds(){return ss_;};
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	08 95       	ret

00000336 <_ZN5Print5flushEv>:
     336:	08 95       	ret

00000338 <_ZN7hd4478013iosetContrastEh>:
     338:	8d ef       	ldi	r24, 0xFD	; 253
     33a:	9f ef       	ldi	r25, 0xFF	; 255
     33c:	08 95       	ret

0000033e <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>:
     33e:	0f 93       	push	r16
     340:	1f 93       	push	r17
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	18 2f       	mov	r17, r24
     348:	d0 e0       	ldi	r29, 0x00	; 0
     34a:	c0 e2       	ldi	r28, 0x20	; 32
     34c:	6c 2f       	mov	r22, r28
     34e:	89 e8       	ldi	r24, 0x89	; 137
     350:	93 e0       	ldi	r25, 0x03	; 3
     352:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN7TwoWire17beginTransmissionEh>
     356:	89 e8       	ldi	r24, 0x89	; 137
     358:	93 e0       	ldi	r25, 0x03	; 3
     35a:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN7TwoWire15endTransmissionEv>
     35e:	08 2f       	mov	r16, r24
     360:	61 e0       	ldi	r22, 0x01	; 1
     362:	70 e0       	ldi	r23, 0x00	; 0
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <delay>
     36c:	01 11       	cpse	r16, r1
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x38>
     370:	1d 17       	cp	r17, r29
     372:	f9 f0       	breq	.+62     	; 0x3b2 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x74>
     374:	df 5f       	subi	r29, 0xFF	; 255
     376:	cf 5f       	subi	r28, 0xFF	; 255
     378:	c8 32       	cpi	r28, 0x28	; 40
     37a:	41 f7       	brne	.-48     	; 0x34c <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0xe>
     37c:	c8 e3       	ldi	r28, 0x38	; 56
     37e:	6c 2f       	mov	r22, r28
     380:	89 e8       	ldi	r24, 0x89	; 137
     382:	93 e0       	ldi	r25, 0x03	; 3
     384:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN7TwoWire17beginTransmissionEh>
     388:	89 e8       	ldi	r24, 0x89	; 137
     38a:	93 e0       	ldi	r25, 0x03	; 3
     38c:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN7TwoWire15endTransmissionEv>
     390:	08 2f       	mov	r16, r24
     392:	61 e0       	ldi	r22, 0x01	; 1
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <delay>
     39e:	01 11       	cpse	r16, r1
     3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x6a>
     3a2:	1d 17       	cp	r17, r29
     3a4:	31 f0       	breq	.+12     	; 0x3b2 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x74>
     3a6:	df 5f       	subi	r29, 0xFF	; 255
     3a8:	cf 5f       	subi	r28, 0xFF	; 255
     3aa:	c0 34       	cpi	r28, 0x40	; 64
     3ac:	41 f7       	brne	.-48     	; 0x37e <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x40>
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x76>
     3b2:	8c 2f       	mov	r24, r28
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	1f 91       	pop	r17
     3ba:	0f 91       	pop	r16
     3bc:	08 95       	ret

000003be <_ZN7TwoWire5writeEi>:
     3be:	dc 01       	movw	r26, r24
     3c0:	ed 91       	ld	r30, X+
     3c2:	fc 91       	ld	r31, X
     3c4:	01 90       	ld	r0, Z+
     3c6:	f0 81       	ld	r31, Z
     3c8:	e0 2d       	mov	r30, r0
     3ca:	09 94       	ijmp

000003cc <_ZN4Zeit4TickEv>:
     3cc:	fc 01       	movw	r30, r24
     3ce:	84 81       	ldd	r24, Z+4	; 0x04
     3d0:	95 81       	ldd	r25, Z+5	; 0x05
     3d2:	01 96       	adiw	r24, 0x01	; 1
     3d4:	2c e3       	ldi	r18, 0x3C	; 60
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	b9 01       	movw	r22, r18
     3da:	0e 94 9d 1b 	call	0x373a	; 0x373a <__divmodhi4>
     3de:	95 83       	std	Z+5, r25	; 0x05
     3e0:	84 83       	std	Z+4, r24	; 0x04
     3e2:	89 2b       	or	r24, r25
     3e4:	19 f0       	breq	.+6      	; 0x3ec <_ZN4Zeit4TickEv+0x20>
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	08 95       	ret
     3ec:	82 81       	ldd	r24, Z+2	; 0x02
     3ee:	93 81       	ldd	r25, Z+3	; 0x03
     3f0:	01 96       	adiw	r24, 0x01	; 1
     3f2:	b9 01       	movw	r22, r18
     3f4:	0e 94 9d 1b 	call	0x373a	; 0x373a <__divmodhi4>
     3f8:	93 83       	std	Z+3, r25	; 0x03
     3fa:	82 83       	std	Z+2, r24	; 0x02
     3fc:	89 2b       	or	r24, r25
     3fe:	99 f7       	brne	.-26     	; 0x3e6 <_ZN4Zeit4TickEv+0x1a>
     400:	80 81       	ld	r24, Z
     402:	91 81       	ldd	r25, Z+1	; 0x01
     404:	01 96       	adiw	r24, 0x01	; 1
     406:	68 e1       	ldi	r22, 0x18	; 24
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	0e 94 9d 1b 	call	0x373a	; 0x373a <__divmodhi4>
     40e:	ac 01       	movw	r20, r24
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	80 83       	st	Z, r24
     414:	21 e0       	ldi	r18, 0x01	; 1
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	45 2b       	or	r20, r21
     41a:	09 f0       	breq	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	82 2f       	mov	r24, r18
     420:	08 95       	ret

00000422 <_Z5Watchv>:
 * frequent calls will result in counting the time. days-of-month and leap years are taken into account
 *
 * @return void
 */
void Watch()
{
     422:	0f 93       	push	r16
     424:	1f 93       	push	r17
#define INTERVAL 1000L
	static long target = INTERVAL;
	if (millis() > target)	{
     426:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <millis>
     42a:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZZ5WatchvE6target>
     42e:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZZ5WatchvE6target+0x1>
     432:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <_ZZ5WatchvE6target+0x2>
     436:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <_ZZ5WatchvE6target+0x3>
     43a:	06 17       	cp	r16, r22
     43c:	17 07       	cpc	r17, r23
     43e:	28 07       	cpc	r18, r24
     440:	39 07       	cpc	r19, r25
     442:	e0 f4       	brcc	.+56     	; 0x47c <_Z5Watchv+0x5a>
		target += INTERVAL;
     444:	d9 01       	movw	r26, r18
     446:	c8 01       	movw	r24, r16
     448:	88 51       	subi	r24, 0x18	; 24
     44a:	9c 4f       	sbci	r25, 0xFC	; 252
     44c:	af 4f       	sbci	r26, 0xFF	; 255
     44e:	bf 4f       	sbci	r27, 0xFF	; 255
     450:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZZ5WatchvE6target>
     454:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZZ5WatchvE6target+0x1>
     458:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_ZZ5WatchvE6target+0x2>
     45c:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_ZZ5WatchvE6target+0x3>
		zeitGMT.Tick();
     460:	84 e8       	ldi	r24, 0x84	; 132
     462:	92 e0       	ldi	r25, 0x02	; 2
     464:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_ZN4Zeit4TickEv>
		zeitTimeZone.Tick();
     468:	8c e7       	ldi	r24, 0x7C	; 124
     46a:	92 e0       	ldi	r25, 0x02	; 2
     46c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_ZN4Zeit4TickEv>
		zeitLocal.Tick();
     470:	84 e7       	ldi	r24, 0x74	; 116
     472:	92 e0       	ldi	r25, 0x02	; 2
		//if(zeit1.Tick()) datum1.Tick(); //Wenn die Zeit bei 24.00 ankommt wird ret = 1 gesetzt und das Datum eins weitergestellt
	}
#undef INTERVAL
}
     474:	1f 91       	pop	r17
     476:	0f 91       	pop	r16
	static long target = INTERVAL;
	if (millis() > target)	{
		target += INTERVAL;
		zeitGMT.Tick();
		zeitTimeZone.Tick();
		zeitLocal.Tick();
     478:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <_ZN4Zeit4TickEv>
		//if(zeit1.Tick()) datum1.Tick(); //Wenn die Zeit bei 24.00 ankommt wird ret = 1 gesetzt und das Datum eins weitergestellt
	}
#undef INTERVAL
}
     47c:	1f 91       	pop	r17
     47e:	0f 91       	pop	r16
     480:	08 95       	ret

00000482 <_Z11printhhmmssR4Zeit>:
 * @param[in] zeit: struct 
 * 
 * @return void
 */
void printhhmmss(class Zeit &z)
{
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	ec 01       	movw	r28, r24
	if(z.GetHours()<=9)lcd.print("0");
     488:	88 81       	ld	r24, Y
     48a:	99 81       	ldd	r25, Y+1	; 0x01
     48c:	0a 97       	sbiw	r24, 0x0a	; 10
     48e:	34 f4       	brge	.+12     	; 0x49c <_Z11printhhmmssR4Zeit+0x1a>
     490:	6f e1       	ldi	r22, 0x1F	; 31
     492:	71 e0       	ldi	r23, 0x01	; 1
     494:	8e ee       	ldi	r24, 0xEE	; 238
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	0e 94 e7 10 	call	0x21ce	; 0x21ce <_ZN5Print5printEPKc>
	lcd.print(z.GetHours());
     49c:	68 81       	ld	r22, Y
     49e:	79 81       	ldd	r23, Y+1	; 0x01
     4a0:	4a e0       	ldi	r20, 0x0A	; 10
     4a2:	50 e0       	ldi	r21, 0x00	; 0
     4a4:	8e ee       	ldi	r24, 0xEE	; 238
     4a6:	92 e0       	ldi	r25, 0x02	; 2
     4a8:	0e 94 94 11 	call	0x2328	; 0x2328 <_ZN5Print5printEii>
	if(z.GetMinutes()<=9)lcd.print(":0"); else lcd.print(":");
     4ac:	8a 81       	ldd	r24, Y+2	; 0x02
     4ae:	9b 81       	ldd	r25, Y+3	; 0x03
     4b0:	0a 97       	sbiw	r24, 0x0a	; 10
     4b2:	1c f4       	brge	.+6      	; 0x4ba <_Z11printhhmmssR4Zeit+0x38>
     4b4:	6e e1       	ldi	r22, 0x1E	; 30
     4b6:	71 e0       	ldi	r23, 0x01	; 1
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <_Z11printhhmmssR4Zeit+0x3c>
     4ba:	61 e2       	ldi	r22, 0x21	; 33
     4bc:	71 e0       	ldi	r23, 0x01	; 1
     4be:	8e ee       	ldi	r24, 0xEE	; 238
     4c0:	92 e0       	ldi	r25, 0x02	; 2
     4c2:	0e 94 e7 10 	call	0x21ce	; 0x21ce <_ZN5Print5printEPKc>
	lcd.print(z.GetMinutes());
     4c6:	6a 81       	ldd	r22, Y+2	; 0x02
     4c8:	7b 81       	ldd	r23, Y+3	; 0x03
     4ca:	4a e0       	ldi	r20, 0x0A	; 10
     4cc:	50 e0       	ldi	r21, 0x00	; 0
     4ce:	8e ee       	ldi	r24, 0xEE	; 238
     4d0:	92 e0       	ldi	r25, 0x02	; 2
     4d2:	0e 94 94 11 	call	0x2328	; 0x2328 <_ZN5Print5printEii>
	if(z.GetSeconds()<=9)lcd.print(":0"); else lcd.print(":");
     4d6:	8c 81       	ldd	r24, Y+4	; 0x04
     4d8:	9d 81       	ldd	r25, Y+5	; 0x05
     4da:	0a 97       	sbiw	r24, 0x0a	; 10
     4dc:	1c f4       	brge	.+6      	; 0x4e4 <_Z11printhhmmssR4Zeit+0x62>
     4de:	6e e1       	ldi	r22, 0x1E	; 30
     4e0:	71 e0       	ldi	r23, 0x01	; 1
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <_Z11printhhmmssR4Zeit+0x66>
     4e4:	61 e2       	ldi	r22, 0x21	; 33
     4e6:	71 e0       	ldi	r23, 0x01	; 1
     4e8:	8e ee       	ldi	r24, 0xEE	; 238
     4ea:	92 e0       	ldi	r25, 0x02	; 2
     4ec:	0e 94 e7 10 	call	0x21ce	; 0x21ce <_ZN5Print5printEPKc>
	lcd.print(z.GetSeconds());
     4f0:	6c 81       	ldd	r22, Y+4	; 0x04
     4f2:	7d 81       	ldd	r23, Y+5	; 0x05
     4f4:	4a e0       	ldi	r20, 0x0A	; 10
     4f6:	50 e0       	ldi	r21, 0x00	; 0
     4f8:	8e ee       	ldi	r24, 0xEE	; 238
     4fa:	92 e0       	ldi	r25, 0x02	; 2
}
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
	if(z.GetHours()<=9)lcd.print("0");
	lcd.print(z.GetHours());
	if(z.GetMinutes()<=9)lcd.print(":0"); else lcd.print(":");
	lcd.print(z.GetMinutes());
	if(z.GetSeconds()<=9)lcd.print(":0"); else lcd.print(":");
	lcd.print(z.GetSeconds());
     500:	0c 94 94 11 	jmp	0x2328	; 0x2328 <_ZN5Print5printEii>

00000504 <_Z17printHumidityTempv>:
 * und schreibt den Wert auf das LCD
 *
 * @return void
 */
void printHumidityTemp (void)
{
     504:	cf 92       	push	r12
     506:	df 92       	push	r13
     508:	ef 92       	push	r14
     50a:	ff 92       	push	r15
	float temp;
	temp=analogRead(tempSensor);
     50c:	86 e1       	ldi	r24, 0x16	; 22
     50e:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <analogRead>
	temp=(temp*500)/1023;
     512:	bc 01       	movw	r22, r24
     514:	99 0f       	add	r25, r25
     516:	88 0b       	sbc	r24, r24
     518:	99 0b       	sbc	r25, r25
     51a:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__floatsisf>
     51e:	20 e0       	ldi	r18, 0x00	; 0
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	4a ef       	ldi	r20, 0xFA	; 250
     524:	53 e4       	ldi	r21, 0x43	; 67
     526:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__mulsf3>
     52a:	20 e0       	ldi	r18, 0x00	; 0
     52c:	30 ec       	ldi	r19, 0xC0	; 192
     52e:	4f e7       	ldi	r20, 0x7F	; 127
     530:	54 e4       	ldi	r21, 0x44	; 68
     532:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__divsf3>
     536:	6b 01       	movw	r12, r22
     538:	7c 01       	movw	r14, r24
	
	lcd.setCursor(0,1);
     53a:	41 e0       	ldi	r20, 0x01	; 1
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	8e ee       	ldi	r24, 0xEE	; 238
     540:	92 e0       	ldi	r25, 0x02	; 2
     542:	0e 94 37 0a 	call	0x146e	; 0x146e <_ZN7hd447809setCursorEhh>
	if (temp > 100) lcd.print("Sensor defekt");
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	48 ec       	ldi	r20, 0xC8	; 200
     54c:	52 e4       	ldi	r21, 0x42	; 66
     54e:	c7 01       	movw	r24, r14
     550:	b6 01       	movw	r22, r12
     552:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__gesf2>
     556:	18 16       	cp	r1, r24
     558:	1c f4       	brge	.+6      	; 0x560 <_Z17printHumidityTempv+0x5c>
     55a:	63 e2       	ldi	r22, 0x23	; 35
     55c:	71 e0       	ldi	r23, 0x01	; 1
     55e:	15 c0       	rjmp	.+42     	; 0x58a <_Z17printHumidityTempv+0x86>
	else {
		lcd.print(temp);
     560:	22 e0       	ldi	r18, 0x02	; 2
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	b7 01       	movw	r22, r14
     566:	a6 01       	movw	r20, r12
     568:	8e ee       	ldi	r24, 0xEE	; 238
     56a:	92 e0       	ldi	r25, 0x02	; 2
     56c:	0e 94 76 12 	call	0x24ec	; 0x24ec <_ZN5Print5printEdi>
		lcd.print(" ");
     570:	61 e3       	ldi	r22, 0x31	; 49
     572:	71 e0       	ldi	r23, 0x01	; 1
     574:	8e ee       	ldi	r24, 0xEE	; 238
     576:	92 e0       	ldi	r25, 0x02	; 2
     578:	0e 94 e7 10 	call	0x21ce	; 0x21ce <_ZN5Print5printEPKc>
		lcd.print((char)223);
     57c:	6f ed       	ldi	r22, 0xDF	; 223
     57e:	8e ee       	ldi	r24, 0xEE	; 238
     580:	92 e0       	ldi	r25, 0x02	; 2
     582:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <_ZN5Print5printEc>
		lcd.print("C");
     586:	63 e3       	ldi	r22, 0x33	; 51
     588:	71 e0       	ldi	r23, 0x01	; 1
     58a:	8e ee       	ldi	r24, 0xEE	; 238
     58c:	92 e0       	ldi	r25, 0x02	; 2
	}
}
     58e:	ff 90       	pop	r15
     590:	ef 90       	pop	r14
     592:	df 90       	pop	r13
     594:	cf 90       	pop	r12
	if (temp > 100) lcd.print("Sensor defekt");
	else {
		lcd.print(temp);
		lcd.print(" ");
		lcd.print((char)223);
		lcd.print("C");
     596:	0c 94 e7 10 	jmp	0x21ce	; 0x21ce <_ZN5Print5printEPKc>

0000059a <_Z10homeScreeni>:
 * @param[in] key : int, user input
 *
 * @return key
 */
int homeScreen(int key)
{
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
     59e:	ec 01       	movw	r28, r24
	if (zeitLocal.ss_ % 5 == 0)
     5a0:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <zeitLocal+0x4>
     5a4:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <zeitLocal+0x5>
     5a8:	65 e0       	ldi	r22, 0x05	; 5
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	0e 94 9d 1b 	call	0x373a	; 0x373a <__divmodhi4>
     5b0:	89 2b       	or	r24, r25
     5b2:	11 f4       	brne	.+4      	; 0x5b8 <_Z10homeScreeni+0x1e>
	{	
		printHumidityTemp();
     5b4:	0e 94 82 02 	call	0x504	; 0x504 <_Z17printHumidityTempv>
	}
	lcd.setCursor(0,0);
     5b8:	40 e0       	ldi	r20, 0x00	; 0
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	8e ee       	ldi	r24, 0xEE	; 238
     5be:	92 e0       	ldi	r25, 0x02	; 2
     5c0:	0e 94 37 0a 	call	0x146e	; 0x146e <_ZN7hd447809setCursorEhh>
	printhhmmss(zeitLocal);
     5c4:	84 e7       	ldi	r24, 0x74	; 116
     5c6:	92 e0       	ldi	r25, 0x02	; 2
     5c8:	0e 94 41 02 	call	0x482	; 0x482 <_Z11printhhmmssR4Zeit>

	return key;
}
     5cc:	ce 01       	movw	r24, r28
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	08 95       	ret

000005d4 <_Z13calculateTimev>:
 * 
 * Stellt sicher, dass die Zeiten richtig sind. 
 * Zwischen 0 und kleiner als 24.
 */
void calculateTime() {
	zeitTimeZone.hh_= zeitGMT.hh_ + CITIES[tz].timediff;
     5d4:	e0 91 8c 02 	lds	r30, 0x028C	; 0x80028c <_ZL2tz>
     5d8:	f0 91 8d 02 	lds	r31, 0x028D	; 0x80028d <_ZL2tz+0x1>
     5dc:	83 e0       	ldi	r24, 0x03	; 3
     5de:	ee 0f       	add	r30, r30
     5e0:	ff 1f       	adc	r31, r31
     5e2:	8a 95       	dec	r24
     5e4:	e1 f7       	brne	.-8      	; 0x5de <_Z13calculateTimev+0xa>
     5e6:	e2 57       	subi	r30, 0x72	; 114
     5e8:	fd 4f       	sbci	r31, 0xFD	; 253
     5ea:	26 81       	ldd	r18, Z+6	; 0x06
     5ec:	37 81       	ldd	r19, Z+7	; 0x07
     5ee:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <zeitGMT>
     5f2:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <zeitGMT+0x1>
     5f6:	82 0f       	add	r24, r18
     5f8:	93 1f       	adc	r25, r19
	if (zeitTimeZone.hh_ > 23)
     5fa:	88 31       	cpi	r24, 0x18	; 24
     5fc:	91 05       	cpc	r25, r1
     5fe:	0c f0       	brlt	.+2      	; 0x602 <_Z13calculateTimev+0x2e>
	{
		zeitTimeZone.hh_ -= 24; 
     600:	48 97       	sbiw	r24, 0x18	; 24
     602:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <zeitTimeZone+0x1>
     606:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <zeitTimeZone>
	}
	if (zeitTimeZone.hh_ < 0)
     60a:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <zeitTimeZone>
     60e:	30 91 7d 02 	lds	r19, 0x027D	; 0x80027d <zeitTimeZone+0x1>
     612:	37 ff       	sbrs	r19, 7
     614:	08 c0       	rjmp	.+16     	; 0x626 <_Z13calculateTimev+0x52>
	{
		zeitTimeZone.hh_ = 24 - zeitTimeZone.hh_;
     616:	88 e1       	ldi	r24, 0x18	; 24
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	82 1b       	sub	r24, r18
     61c:	93 0b       	sbc	r25, r19
     61e:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <zeitTimeZone+0x1>
     622:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <zeitTimeZone>
     626:	08 95       	ret

00000628 <_Z14changeTimeZonei>:
 * 
 * @return key
 */
int changeTimeZone (int key)
{
	switch (key)
     628:	83 30       	cpi	r24, 0x03	; 3
     62a:	91 05       	cpc	r25, r1
     62c:	39 f0       	breq	.+14     	; 0x63c <_Z14changeTimeZonei+0x14>
     62e:	8a 30       	cpi	r24, 0x0A	; 10
     630:	91 05       	cpc	r25, r1
     632:	21 f0       	breq	.+8      	; 0x63c <_Z14changeTimeZonei+0x14>
     634:	81 30       	cpi	r24, 0x01	; 1
     636:	91 05       	cpc	r25, r1
     638:	51 f5       	brne	.+84     	; 0x68e <_Z14changeTimeZonei+0x66>
     63a:	17 c0       	rjmp	.+46     	; 0x66a <_Z14changeTimeZonei+0x42>
	{
		case X_KEY:
		//zeit2 = zeitLocal;
		case DOWN_KEY:
		lcd.clear();
     63c:	8e ee       	ldi	r24, 0xEE	; 238
     63e:	92 e0       	ldi	r25, 0x02	; 2
     640:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN7hd447805clearEv>
		if (tz == 0)
     644:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <_ZL2tz>
     648:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <_ZL2tz+0x1>
     64c:	00 97       	sbiw	r24, 0x00	; 0
     64e:	19 f4       	brne	.+6      	; 0x656 <_Z14changeTimeZonei+0x2e>
		{
			tz = 11;
     650:	8b e0       	ldi	r24, 0x0B	; 11
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	01 c0       	rjmp	.+2      	; 0x658 <_Z14changeTimeZonei+0x30>
		}
		else tz -= 1;
     656:	01 97       	sbiw	r24, 0x01	; 1
     658:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <_ZL2tz+0x1>
     65c:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <_ZL2tz>
		calculateTime();	
     660:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_Z13calculateTimev>
		key = X_KEY;
     664:	8a e0       	ldi	r24, 0x0A	; 10
     666:	90 e0       	ldi	r25, 0x00	; 0
		break;
     668:	08 95       	ret
		case UP_KEY:
		lcd.clear();
     66a:	8e ee       	ldi	r24, 0xEE	; 238
     66c:	92 e0       	ldi	r25, 0x02	; 2
     66e:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN7hd447805clearEv>
		if (tz == 11)
     672:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <_ZL2tz>
     676:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <_ZL2tz+0x1>
     67a:	8b 30       	cpi	r24, 0x0B	; 11
     67c:	91 05       	cpc	r25, r1
     67e:	29 f4       	brne	.+10     	; 0x68a <_Z14changeTimeZonei+0x62>
		{
			tz = 0;
     680:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <_ZL2tz+0x1>
     684:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <_ZL2tz>
     688:	eb cf       	rjmp	.-42     	; 0x660 <_Z14changeTimeZonei+0x38>
		}
		else tz += 1;
     68a:	01 96       	adiw	r24, 0x01	; 1
     68c:	e5 cf       	rjmp	.-54     	; 0x658 <_Z14changeTimeZonei+0x30>
		break;
		case RIGHT_KEY:
		break;
	}
	return key;
}
     68e:	08 95       	ret

00000690 <_Z11setTimeZonei>:

int setTimeZone(int key)
{
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
	int input = changeTimeZone(key);
     694:	0e 94 14 03 	call	0x628	; 0x628 <_Z14changeTimeZonei>
     698:	ec 01       	movw	r28, r24
	lcd.setCursor(0,0);
     69a:	40 e0       	ldi	r20, 0x00	; 0
     69c:	60 e0       	ldi	r22, 0x00	; 0
     69e:	8e ee       	ldi	r24, 0xEE	; 238
     6a0:	92 e0       	ldi	r25, 0x02	; 2
     6a2:	0e 94 37 0a 	call	0x146e	; 0x146e <_ZN7hd447809setCursorEhh>
	lcd.print(CITIES[tz].name);
     6a6:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <_ZL2tz>
     6aa:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <_ZL2tz+0x1>
     6ae:	83 e0       	ldi	r24, 0x03	; 3
     6b0:	66 0f       	add	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	8a 95       	dec	r24
     6b6:	e1 f7       	brne	.-8      	; 0x6b0 <_Z11setTimeZonei+0x20>
     6b8:	62 57       	subi	r22, 0x72	; 114
     6ba:	7d 4f       	sbci	r23, 0xFD	; 253
     6bc:	8e ee       	ldi	r24, 0xEE	; 238
     6be:	92 e0       	ldi	r25, 0x02	; 2
     6c0:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <_ZN5Print5printERK6String>
	lcd.setCursor(0,1);
     6c4:	41 e0       	ldi	r20, 0x01	; 1
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	8e ee       	ldi	r24, 0xEE	; 238
     6ca:	92 e0       	ldi	r25, 0x02	; 2
     6cc:	0e 94 37 0a 	call	0x146e	; 0x146e <_ZN7hd447809setCursorEhh>
	printhhmmss(zeitTimeZone);
     6d0:	8c e7       	ldi	r24, 0x7C	; 124
     6d2:	92 e0       	ldi	r25, 0x02	; 2
     6d4:	0e 94 41 02 	call	0x482	; 0x482 <_Z11printhhmmssR4Zeit>
	return input;
}
     6d8:	ce 01       	movw	r24, r28
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	08 95       	ret

000006e0 <_Z17callibratePointerv>:
 * @brief set zero position of the three pointer
 *
 */
void callibratePointer() 
{
	lcd.clear();
     6e0:	8e ee       	ldi	r24, 0xEE	; 238
     6e2:	92 e0       	ldi	r25, 0x02	; 2
     6e4:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN7hd447805clearEv>
	lcd.print("Zeiger kalibrieren");
     6e8:	65 e3       	ldi	r22, 0x35	; 53
     6ea:	71 e0       	ldi	r23, 0x01	; 1
     6ec:	8e ee       	ldi	r24, 0xEE	; 238
     6ee:	92 e0       	ldi	r25, 0x02	; 2
     6f0:	0e 94 e7 10 	call	0x21ce	; 0x21ce <_ZN5Print5printEPKc>
	delay(1000);
     6f4:	68 ee       	ldi	r22, 0xE8	; 232
     6f6:	73 e0       	ldi	r23, 0x03	; 3
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <delay>
	lcd.clear();
     700:	8e ee       	ldi	r24, 0xEE	; 238
     702:	92 e0       	ldi	r25, 0x02	; 2
     704:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <_ZN7hd447805clearEv>

00000708 <setup>:
 * \return void
 */
void setup()
{
	//LCD konfigurieren
	lcd.begin(16, 2);
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	42 e0       	ldi	r20, 0x02	; 2
     70c:	60 e1       	ldi	r22, 0x10	; 16
     70e:	8e ee       	ldi	r24, 0xEE	; 238
     710:	92 e0       	ldi	r25, 0x02	; 2
     712:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_ZN7hd447805beginEhhh>
	lcd.noBacklight();
     716:	8e ee       	ldi	r24, 0xEE	; 238
     718:	92 e0       	ldi	r25, 0x02	; 2
     71a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <_ZN7hd4478011noBacklightEv>
	lcd.noCursor();
     71e:	8e ee       	ldi	r24, 0xEE	; 238
     720:	92 e0       	ldi	r25, 0x02	; 2
     722:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <_ZN7hd447808noCursorEv>
	lcd.home();
     726:	8e ee       	ldi	r24, 0xEE	; 238
     728:	92 e0       	ldi	r25, 0x02	; 2
     72a:	0e 94 34 0a 	call	0x1468	; 0x1468 <_ZN7hd447804homeEv>
	lcd.print("Romeo V2.2 Watch");
     72e:	68 e4       	ldi	r22, 0x48	; 72
     730:	71 e0       	ldi	r23, 0x01	; 1
     732:	8e ee       	ldi	r24, 0xEE	; 238
     734:	92 e0       	ldi	r25, 0x02	; 2
     736:	0e 94 e7 10 	call	0x21ce	; 0x21ce <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
     73a:	41 e0       	ldi	r20, 0x01	; 1
     73c:	60 e0       	ldi	r22, 0x00	; 0
     73e:	8e ee       	ldi	r24, 0xEE	; 238
     740:	92 e0       	ldi	r25, 0x02	; 2
     742:	0e 94 37 0a 	call	0x146e	; 0x146e <_ZN7hd447809setCursorEhh>
	lcd.print("Coray / Bruno");
     746:	69 e5       	ldi	r22, 0x59	; 89
     748:	71 e0       	ldi	r23, 0x01	; 1
     74a:	8e ee       	ldi	r24, 0xEE	; 238
     74c:	92 e0       	ldi	r25, 0x02	; 2
     74e:	0e 94 e7 10 	call	0x21ce	; 0x21ce <_ZN5Print5printEPKc>
	while(millis()<3000);
     752:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <millis>
     756:	68 3b       	cpi	r22, 0xB8	; 184
     758:	7b 40       	sbci	r23, 0x0B	; 11
     75a:	81 05       	cpc	r24, r1
     75c:	91 05       	cpc	r25, r1
     75e:	c8 f3       	brcs	.-14     	; 0x752 <setup+0x4a>
	lcd.clear();
     760:	8e ee       	ldi	r24, 0xEE	; 238
     762:	92 e0       	ldi	r25, 0x02	; 2
     764:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN7hd447805clearEv>
	
	zeitTimeZone = zeitGMT;
     768:	88 e0       	ldi	r24, 0x08	; 8
     76a:	e4 e8       	ldi	r30, 0x84	; 132
     76c:	f2 e0       	ldi	r31, 0x02	; 2
     76e:	ac e7       	ldi	r26, 0x7C	; 124
     770:	b2 e0       	ldi	r27, 0x02	; 2
     772:	01 90       	ld	r0, Z+
     774:	0d 92       	st	X+, r0
     776:	8a 95       	dec	r24
     778:	e1 f7       	brne	.-8      	; 0x772 <setup+0x6a>
	
	//Button uns Sensor Pin als input definiert
	pinMode(btnPin, INPUT);
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	0e 94 2c 18 	call	0x3058	; 0x3058 <pinMode>
	pinMode(tempSensor,INPUT);
     782:	60 e0       	ldi	r22, 0x00	; 0
     784:	86 e1       	ldi	r24, 0x16	; 22
     786:	0c 94 2c 18 	jmp	0x3058	; 0x3058 <pinMode>

0000078a <loop>:
 * \return void
 */
void loop()
{
	//Button-Pin auslesen
	if (digitalRead(btnPin) == HIGH)
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	0e 94 97 18 	call	0x312e	; 0x312e <digitalRead>
     790:	01 97       	sbiw	r24, 0x01	; 1
     792:	11 f4       	brne	.+4      	; 0x798 <loop+0xe>
	{
		callibratePointer();
     794:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <_Z17callibratePointerv>
	}
	else
	{
	Watch();
     798:	0e 94 11 02 	call	0x422	; 0x422 <_Z5Watchv>
	input = getkey();
     79c:	0e 94 18 01 	call	0x230	; 0x230 <_Z6getkeyv>
     7a0:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <_ZL5input+0x1>
     7a4:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <_ZL5input>
	if (watchmenu[menu].active) 
     7a8:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <_ZL4menu>
     7ac:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <_ZL4menu+0x1>
     7b0:	42 e1       	ldi	r20, 0x12	; 18
     7b2:	42 9f       	mul	r20, r18
     7b4:	f0 01       	movw	r30, r0
     7b6:	43 9f       	mul	r20, r19
     7b8:	f0 0d       	add	r31, r0
     7ba:	11 24       	eor	r1, r1
     7bc:	e0 52       	subi	r30, 0x20	; 32
     7be:	fe 4f       	sbci	r31, 0xFE	; 254
     7c0:	04 84       	ldd	r0, Z+12	; 0x0c
     7c2:	f5 85       	ldd	r31, Z+13	; 0x0d
     7c4:	e0 2d       	mov	r30, r0
     7c6:	30 97       	sbiw	r30, 0x00	; 0
     7c8:	29 f0       	breq	.+10     	; 0x7d4 <loop+0x4a>
		input = watchmenu[menu].active(input);
     7ca:	09 95       	icall
     7cc:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <_ZL5input+0x1>
     7d0:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <_ZL5input>
		//! cyclic call to active function as long as menu n is active
	switch(input) {
     7d4:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <_ZL5input>
     7d8:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <_ZL5input+0x1>
     7dc:	83 30       	cpi	r24, 0x03	; 3
     7de:	91 05       	cpc	r25, r1
     7e0:	e9 f1       	breq	.+122    	; 0x85c <loop+0xd2>
     7e2:	34 f4       	brge	.+12     	; 0x7f0 <loop+0x66>
     7e4:	81 30       	cpi	r24, 0x01	; 1
     7e6:	91 05       	cpc	r25, r1
     7e8:	79 f0       	breq	.+30     	; 0x808 <loop+0x7e>
     7ea:	02 97       	sbiw	r24, 0x02	; 2
     7ec:	21 f1       	breq	.+72     	; 0x836 <loop+0xac>
     7ee:	09 c0       	rjmp	.+18     	; 0x802 <loop+0x78>
     7f0:	85 30       	cpi	r24, 0x05	; 5
     7f2:	91 05       	cpc	r25, r1
     7f4:	09 f4       	brne	.+2      	; 0x7f8 <loop+0x6e>
     7f6:	6a c0       	rjmp	.+212    	; 0x8cc <loop+0x142>
     7f8:	0c f4       	brge	.+2      	; 0x7fc <loop+0x72>
     7fa:	43 c0       	rjmp	.+134    	; 0x882 <loop+0xf8>
     7fc:	06 97       	sbiw	r24, 0x06	; 6
     7fe:	09 f4       	brne	.+2      	; 0x802 <loop+0x78>
     800:	8a c0       	rjmp	.+276    	; 0x916 <loop+0x18c>
		default:
		case X_KEY:
		case NO_KEY:
		newmenu = -1; // no changes made
     802:	8f ef       	ldi	r24, 0xFF	; 255
     804:	9f ef       	ldi	r25, 0xFF	; 255
     806:	12 c0       	rjmp	.+36     	; 0x82c <loop+0xa2>
		break;
		case UP_KEY:
		lcd.clear();
     808:	8e ee       	ldi	r24, 0xEE	; 238
     80a:	92 e0       	ldi	r25, 0x02	; 2
     80c:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].up;
     810:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <_ZL4menu>
     814:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <_ZL4menu+0x1>
     818:	22 e1       	ldi	r18, 0x12	; 18
     81a:	28 9f       	mul	r18, r24
     81c:	f0 01       	movw	r30, r0
     81e:	29 9f       	mul	r18, r25
     820:	f0 0d       	add	r31, r0
     822:	11 24       	eor	r1, r1
     824:	e0 52       	subi	r30, 0x20	; 32
     826:	fe 4f       	sbci	r31, 0xFE	; 254
     828:	82 81       	ldd	r24, Z+2	; 0x02
     82a:	93 81       	ldd	r25, Z+3	; 0x03
     82c:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <_ZL7newmenu+0x1>
     830:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <_ZL7newmenu>
		break;
     834:	80 c0       	rjmp	.+256    	; 0x936 <loop+0x1ac>
		case LEFT_KEY:
		lcd.clear();
     836:	8e ee       	ldi	r24, 0xEE	; 238
     838:	92 e0       	ldi	r25, 0x02	; 2
     83a:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].left;
     83e:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <_ZL4menu>
     842:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <_ZL4menu+0x1>
     846:	22 e1       	ldi	r18, 0x12	; 18
     848:	28 9f       	mul	r18, r24
     84a:	f0 01       	movw	r30, r0
     84c:	29 9f       	mul	r18, r25
     84e:	f0 0d       	add	r31, r0
     850:	11 24       	eor	r1, r1
     852:	e0 52       	subi	r30, 0x20	; 32
     854:	fe 4f       	sbci	r31, 0xFE	; 254
     856:	84 81       	ldd	r24, Z+4	; 0x04
     858:	95 81       	ldd	r25, Z+5	; 0x05
     85a:	e8 cf       	rjmp	.-48     	; 0x82c <loop+0xa2>
		break;
		case DOWN_KEY:
		lcd.clear();
     85c:	8e ee       	ldi	r24, 0xEE	; 238
     85e:	92 e0       	ldi	r25, 0x02	; 2
     860:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].down;
     864:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <_ZL4menu>
     868:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <_ZL4menu+0x1>
     86c:	22 e1       	ldi	r18, 0x12	; 18
     86e:	28 9f       	mul	r18, r24
     870:	f0 01       	movw	r30, r0
     872:	29 9f       	mul	r18, r25
     874:	f0 0d       	add	r31, r0
     876:	11 24       	eor	r1, r1
     878:	e0 52       	subi	r30, 0x20	; 32
     87a:	fe 4f       	sbci	r31, 0xFE	; 254
     87c:	86 81       	ldd	r24, Z+6	; 0x06
     87e:	97 81       	ldd	r25, Z+7	; 0x07
     880:	d5 cf       	rjmp	.-86     	; 0x82c <loop+0xa2>
		break;
		case RIGHT_KEY:
		lcd.clear();
     882:	8e ee       	ldi	r24, 0xEE	; 238
     884:	92 e0       	ldi	r25, 0x02	; 2
     886:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN7hd447805clearEv>
		if(watchmenu[menu].goright != NULL) {
     88a:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <_ZL4menu>
     88e:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <_ZL4menu+0x1>
     892:	22 e1       	ldi	r18, 0x12	; 18
     894:	28 9f       	mul	r18, r24
     896:	f0 01       	movw	r30, r0
     898:	29 9f       	mul	r18, r25
     89a:	f0 0d       	add	r31, r0
     89c:	11 24       	eor	r1, r1
     89e:	e0 52       	subi	r30, 0x20	; 32
     8a0:	fe 4f       	sbci	r31, 0xFE	; 254
     8a2:	06 84       	ldd	r0, Z+14	; 0x0e
     8a4:	f7 85       	ldd	r31, Z+15	; 0x0f
     8a6:	e0 2d       	mov	r30, r0
     8a8:	30 97       	sbiw	r30, 0x00	; 0
     8aa:	09 f0       	breq	.+2      	; 0x8ae <loop+0x124>
			//! call go right function with new value
			watchmenu[menu].goright();
     8ac:	09 95       	icall
		}
		newmenu = watchmenu[menu].right;
     8ae:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <_ZL4menu>
     8b2:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <_ZL4menu+0x1>
     8b6:	22 e1       	ldi	r18, 0x12	; 18
     8b8:	28 9f       	mul	r18, r24
     8ba:	f0 01       	movw	r30, r0
     8bc:	29 9f       	mul	r18, r25
     8be:	f0 0d       	add	r31, r0
     8c0:	11 24       	eor	r1, r1
     8c2:	e0 52       	subi	r30, 0x20	; 32
     8c4:	fe 4f       	sbci	r31, 0xFE	; 254
     8c6:	80 85       	ldd	r24, Z+8	; 0x08
     8c8:	91 85       	ldd	r25, Z+9	; 0x09
     8ca:	b0 cf       	rjmp	.-160    	; 0x82c <loop+0xa2>
		break;
		case OK_KEY:
		lcd.clear();
     8cc:	8e ee       	ldi	r24, 0xEE	; 238
     8ce:	92 e0       	ldi	r25, 0x02	; 2
     8d0:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN7hd447805clearEv>
		if(watchmenu[menu].positive != NULL) {
     8d4:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <_ZL4menu>
     8d8:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <_ZL4menu+0x1>
     8dc:	22 e1       	ldi	r18, 0x12	; 18
     8de:	28 9f       	mul	r18, r24
     8e0:	f0 01       	movw	r30, r0
     8e2:	29 9f       	mul	r18, r25
     8e4:	f0 0d       	add	r31, r0
     8e6:	11 24       	eor	r1, r1
     8e8:	e0 52       	subi	r30, 0x20	; 32
     8ea:	fe 4f       	sbci	r31, 0xFE	; 254
     8ec:	00 88       	ldd	r0, Z+16	; 0x10
     8ee:	f1 89       	ldd	r31, Z+17	; 0x11
     8f0:	e0 2d       	mov	r30, r0
     8f2:	30 97       	sbiw	r30, 0x00	; 0
     8f4:	09 f0       	breq	.+2      	; 0x8f8 <loop+0x16e>
			//! call positive answer function with new value
			watchmenu[menu].positive();
     8f6:	09 95       	icall
		}
		newmenu = watchmenu[menu].ok;
     8f8:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <_ZL4menu>
     8fc:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <_ZL4menu+0x1>
     900:	22 e1       	ldi	r18, 0x12	; 18
     902:	28 9f       	mul	r18, r24
     904:	f0 01       	movw	r30, r0
     906:	29 9f       	mul	r18, r25
     908:	f0 0d       	add	r31, r0
     90a:	11 24       	eor	r1, r1
     90c:	e0 52       	subi	r30, 0x20	; 32
     90e:	fe 4f       	sbci	r31, 0xFE	; 254
     910:	82 85       	ldd	r24, Z+10	; 0x0a
     912:	93 85       	ldd	r25, Z+11	; 0x0b
     914:	8b cf       	rjmp	.-234    	; 0x82c <loop+0xa2>
		break;
		case BK_KEY:
		lcd.clear();
     916:	8e ee       	ldi	r24, 0xEE	; 238
     918:	92 e0       	ldi	r25, 0x02	; 2
     91a:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN7hd447805clearEv>
		lcd.noCursor();
     91e:	8e ee       	ldi	r24, 0xEE	; 238
     920:	92 e0       	ldi	r25, 0x02	; 2
     922:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <_ZN7hd447808noCursorEv>
		lcd.noBlink();
     926:	8e ee       	ldi	r24, 0xEE	; 238
     928:	92 e0       	ldi	r25, 0x02	; 2
     92a:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_ZN7hd447807noBlinkEv>
		newmenu = 0;
     92e:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <_ZL7newmenu+0x1>
     932:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <_ZL7newmenu>
		break;
	}
	if(newmenu >= 0){
     936:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <_ZL7newmenu>
     93a:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <_ZL7newmenu+0x1>
     93e:	97 fd       	sbrc	r25, 7
     940:	21 c0       	rjmp	.+66     	; 0x984 <loop+0x1fa>
		menu = newmenu;
     942:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <_ZL4menu+0x1>
     946:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <_ZL4menu>
		lcd.setCursor(0, 0);
     94a:	40 e0       	ldi	r20, 0x00	; 0
     94c:	60 e0       	ldi	r22, 0x00	; 0
     94e:	8e ee       	ldi	r24, 0xEE	; 238
     950:	92 e0       	ldi	r25, 0x02	; 2
     952:	0e 94 37 0a 	call	0x146e	; 0x146e <_ZN7hd447809setCursorEhh>
		lcd.print(ROM(watchmenu[menu].text1));
     956:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <_ZL4menu>
     95a:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <_ZL4menu+0x1>
     95e:	22 e1       	ldi	r18, 0x12	; 18
     960:	28 9f       	mul	r18, r24
     962:	f0 01       	movw	r30, r0
     964:	29 9f       	mul	r18, r25
     966:	f0 0d       	add	r31, r0
     968:	11 24       	eor	r1, r1
     96a:	e0 52       	subi	r30, 0x20	; 32
     96c:	fe 4f       	sbci	r31, 0xFE	; 254
     96e:	60 81       	ld	r22, Z
     970:	71 81       	ldd	r23, Z+1	; 0x01
     972:	8a e5       	ldi	r24, 0x5A	; 90
     974:	92 e0       	ldi	r25, 0x02	; 2
     976:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <strcpy_P>
     97a:	bc 01       	movw	r22, r24
     97c:	8e ee       	ldi	r24, 0xEE	; 238
     97e:	92 e0       	ldi	r25, 0x02	; 2
     980:	0c 94 e7 10 	jmp	0x21ce	; 0x21ce <_ZN5Print5printEPKc>
     984:	08 95       	ret

00000986 <_GLOBAL__sub_I_lcd>:
	}
		} //else Klammer
}
     986:	af 92       	push	r10
     988:	bf 92       	push	r11
     98a:	cf 92       	push	r12
     98c:	df 92       	push	r13
     98e:	ef 92       	push	r14
     990:	ff 92       	push	r15
     992:	0f 93       	push	r16
     994:	1f 93       	push	r17
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
// ====================

//	-- Automagic / auto-detect constructors --

// Auto find next instance and auto config pin mapping
hd44780_I2Cexp(){ _addr = 0; _expType = I2Cexp_UNKNOWN;}
     99a:	8e ee       	ldi	r24, 0xEE	; 238
     99c:	92 e0       	ldi	r25, 0x02	; 2
     99e:	0e 94 bd 09 	call	0x137a	; 0x137a <_ZN7hd44780C1Ev>
     9a2:	ee ee       	ldi	r30, 0xEE	; 238
     9a4:	f2 e0       	ldi	r31, 0x02	; 2
     9a6:	8e ec       	ldi	r24, 0xCE	; 206
     9a8:	91 e0       	ldi	r25, 0x01	; 1
     9aa:	91 83       	std	Z+1, r25	; 0x01
     9ac:	80 83       	st	Z, r24
     9ae:	10 a2       	std	Z+32, r1	; 0x20
     9b0:	11 a2       	std	Z+33, r1	; 0x21

const struct CITY_TIME_DIF CITIES [] {
	{"London", 0},{"New-York", -5},{"Paris", 1},{ "Tokyo", 9},
	{"Hongkong", 8},{"Los Angeles", -8},{"Chicago", -6},{"Seoul", 9},
	{ "Brüssel",  1},{"Washington",  -5},{"Singapur", 8},{"Sydney", 11}
	};
     9b2:	67 e6       	ldi	r22, 0x67	; 103
     9b4:	71 e0       	ldi	r23, 0x01	; 1
     9b6:	8e e8       	ldi	r24, 0x8E	; 142
     9b8:	92 e0       	ldi	r25, 0x02	; 2
     9ba:	0e 94 2e 19 	call	0x325c	; 0x325c <_ZN6StringC1EPKc>
     9be:	ce e8       	ldi	r28, 0x8E	; 142
     9c0:	d2 e0       	ldi	r29, 0x02	; 2
     9c2:	1f 82       	std	Y+7, r1	; 0x07
     9c4:	1e 82       	std	Y+6, r1	; 0x06
     9c6:	6e e6       	ldi	r22, 0x6E	; 110
     9c8:	71 e0       	ldi	r23, 0x01	; 1
     9ca:	86 e9       	ldi	r24, 0x96	; 150
     9cc:	92 e0       	ldi	r25, 0x02	; 2
     9ce:	0e 94 2e 19 	call	0x325c	; 0x325c <_ZN6StringC1EPKc>
     9d2:	8b ef       	ldi	r24, 0xFB	; 251
     9d4:	e8 2e       	mov	r14, r24
     9d6:	ff 24       	eor	r15, r15
     9d8:	fa 94       	dec	r15
     9da:	ff 86       	std	Y+15, r15	; 0x0f
     9dc:	ee 86       	std	Y+14, r14	; 0x0e
     9de:	67 e7       	ldi	r22, 0x77	; 119
     9e0:	71 e0       	ldi	r23, 0x01	; 1
     9e2:	8e e9       	ldi	r24, 0x9E	; 158
     9e4:	92 e0       	ldi	r25, 0x02	; 2
     9e6:	0e 94 2e 19 	call	0x325c	; 0x325c <_ZN6StringC1EPKc>
     9ea:	cc 24       	eor	r12, r12
     9ec:	c3 94       	inc	r12
     9ee:	d1 2c       	mov	r13, r1
     9f0:	df 8a       	std	Y+23, r13	; 0x17
     9f2:	ce 8a       	std	Y+22, r12	; 0x16
     9f4:	6d e7       	ldi	r22, 0x7D	; 125
     9f6:	71 e0       	ldi	r23, 0x01	; 1
     9f8:	86 ea       	ldi	r24, 0xA6	; 166
     9fa:	92 e0       	ldi	r25, 0x02	; 2
     9fc:	0e 94 2e 19 	call	0x325c	; 0x325c <_ZN6StringC1EPKc>
     a00:	29 e0       	ldi	r18, 0x09	; 9
     a02:	a2 2e       	mov	r10, r18
     a04:	b1 2c       	mov	r11, r1
     a06:	bf 8e       	std	Y+31, r11	; 0x1f
     a08:	ae 8e       	std	Y+30, r10	; 0x1e
     a0a:	63 e8       	ldi	r22, 0x83	; 131
     a0c:	71 e0       	ldi	r23, 0x01	; 1
     a0e:	8e ea       	ldi	r24, 0xAE	; 174
     a10:	92 e0       	ldi	r25, 0x02	; 2
     a12:	0e 94 2e 19 	call	0x325c	; 0x325c <_ZN6StringC1EPKc>
     a16:	08 e0       	ldi	r16, 0x08	; 8
     a18:	10 e0       	ldi	r17, 0x00	; 0
     a1a:	1f a3       	std	Y+39, r17	; 0x27
     a1c:	0e a3       	std	Y+38, r16	; 0x26
     a1e:	6c e8       	ldi	r22, 0x8C	; 140
     a20:	71 e0       	ldi	r23, 0x01	; 1
     a22:	86 eb       	ldi	r24, 0xB6	; 182
     a24:	92 e0       	ldi	r25, 0x02	; 2
     a26:	0e 94 2e 19 	call	0x325c	; 0x325c <_ZN6StringC1EPKc>
     a2a:	88 ef       	ldi	r24, 0xF8	; 248
     a2c:	9f ef       	ldi	r25, 0xFF	; 255
     a2e:	9f a7       	std	Y+47, r25	; 0x2f
     a30:	8e a7       	std	Y+46, r24	; 0x2e
     a32:	68 e9       	ldi	r22, 0x98	; 152
     a34:	71 e0       	ldi	r23, 0x01	; 1
     a36:	8e eb       	ldi	r24, 0xBE	; 190
     a38:	92 e0       	ldi	r25, 0x02	; 2
     a3a:	0e 94 2e 19 	call	0x325c	; 0x325c <_ZN6StringC1EPKc>
     a3e:	8a ef       	ldi	r24, 0xFA	; 250
     a40:	9f ef       	ldi	r25, 0xFF	; 255
     a42:	9f ab       	std	Y+55, r25	; 0x37
     a44:	8e ab       	std	Y+54, r24	; 0x36
     a46:	60 ea       	ldi	r22, 0xA0	; 160
     a48:	71 e0       	ldi	r23, 0x01	; 1
     a4a:	86 ec       	ldi	r24, 0xC6	; 198
     a4c:	92 e0       	ldi	r25, 0x02	; 2
     a4e:	0e 94 2e 19 	call	0x325c	; 0x325c <_ZN6StringC1EPKc>
     a52:	bf ae       	std	Y+63, r11	; 0x3f
     a54:	ae ae       	std	Y+62, r10	; 0x3e
     a56:	66 ea       	ldi	r22, 0xA6	; 166
     a58:	71 e0       	ldi	r23, 0x01	; 1
     a5a:	8e ec       	ldi	r24, 0xCE	; 206
     a5c:	92 e0       	ldi	r25, 0x02	; 2
     a5e:	0e 94 2e 19 	call	0x325c	; 0x325c <_ZN6StringC1EPKc>
     a62:	d0 92 d5 02 	sts	0x02D5, r13	; 0x8002d5 <_ZL6CITIES+0x47>
     a66:	c0 92 d4 02 	sts	0x02D4, r12	; 0x8002d4 <_ZL6CITIES+0x46>
     a6a:	6f ea       	ldi	r22, 0xAF	; 175
     a6c:	71 e0       	ldi	r23, 0x01	; 1
     a6e:	86 ed       	ldi	r24, 0xD6	; 214
     a70:	92 e0       	ldi	r25, 0x02	; 2
     a72:	0e 94 2e 19 	call	0x325c	; 0x325c <_ZN6StringC1EPKc>
     a76:	f0 92 dd 02 	sts	0x02DD, r15	; 0x8002dd <_ZL6CITIES+0x4f>
     a7a:	e0 92 dc 02 	sts	0x02DC, r14	; 0x8002dc <_ZL6CITIES+0x4e>
     a7e:	6a eb       	ldi	r22, 0xBA	; 186
     a80:	71 e0       	ldi	r23, 0x01	; 1
     a82:	8e ed       	ldi	r24, 0xDE	; 222
     a84:	92 e0       	ldi	r25, 0x02	; 2
     a86:	0e 94 2e 19 	call	0x325c	; 0x325c <_ZN6StringC1EPKc>
     a8a:	10 93 e5 02 	sts	0x02E5, r17	; 0x8002e5 <_ZL6CITIES+0x57>
     a8e:	00 93 e4 02 	sts	0x02E4, r16	; 0x8002e4 <_ZL6CITIES+0x56>
     a92:	63 ec       	ldi	r22, 0xC3	; 195
     a94:	71 e0       	ldi	r23, 0x01	; 1
     a96:	86 ee       	ldi	r24, 0xE6	; 230
     a98:	92 e0       	ldi	r25, 0x02	; 2
     a9a:	0e 94 2e 19 	call	0x325c	; 0x325c <_ZN6StringC1EPKc>
     a9e:	8b e0       	ldi	r24, 0x0B	; 11
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <_ZL6CITIES+0x5f>
     aa6:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <_ZL6CITIES+0x5e>
	int hh_;
	int mm_;
	int ss_;
	int set_;
public:
	Zeit(int h, int m, int s){ hh_=h; mm_=m; ss_=s; set_ =0;};
     aaa:	e4 e8       	ldi	r30, 0x84	; 132
     aac:	f2 e0       	ldi	r31, 0x02	; 2
     aae:	85 e1       	ldi	r24, 0x15	; 21
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	91 83       	std	Z+1, r25	; 0x01
     ab4:	80 83       	st	Z, r24
     ab6:	8f e1       	ldi	r24, 0x1F	; 31
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	93 83       	std	Z+3, r25	; 0x03
     abc:	82 83       	std	Z+2, r24	; 0x02
     abe:	15 82       	std	Z+5, r1	; 0x05
     ac0:	14 82       	std	Z+4, r1	; 0x04
     ac2:	17 82       	std	Z+7, r1	; 0x07
     ac4:	16 82       	std	Z+6, r1	; 0x06
     ac6:	ec e7       	ldi	r30, 0x7C	; 124
     ac8:	f2 e0       	ldi	r31, 0x02	; 2
     aca:	2c e0       	ldi	r18, 0x0C	; 12
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	31 83       	std	Z+1, r19	; 0x01
     ad0:	20 83       	st	Z, r18
     ad2:	13 82       	std	Z+3, r1	; 0x03
     ad4:	12 82       	std	Z+2, r1	; 0x02
     ad6:	15 82       	std	Z+5, r1	; 0x05
     ad8:	14 82       	std	Z+4, r1	; 0x04
     ada:	17 82       	std	Z+7, r1	; 0x07
     adc:	16 82       	std	Z+6, r1	; 0x06
     ade:	e4 e7       	ldi	r30, 0x74	; 116
     ae0:	f2 e0       	ldi	r31, 0x02	; 2
     ae2:	26 e1       	ldi	r18, 0x16	; 22
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	31 83       	std	Z+1, r19	; 0x01
     ae8:	20 83       	st	Z, r18
     aea:	93 83       	std	Z+3, r25	; 0x03
     aec:	82 83       	std	Z+2, r24	; 0x02
     aee:	15 82       	std	Z+5, r1	; 0x05
     af0:	14 82       	std	Z+4, r1	; 0x04
     af2:	17 82       	std	Z+7, r1	; 0x07
     af4:	16 82       	std	Z+6, r1	; 0x06
		menu = newmenu;
		lcd.setCursor(0, 0);
		lcd.print(ROM(watchmenu[menu].text1));
	}
		} //else Klammer
}
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	1f 91       	pop	r17
     afc:	0f 91       	pop	r16
     afe:	ff 90       	pop	r15
     b00:	ef 90       	pop	r14
     b02:	df 90       	pop	r13
     b04:	cf 90       	pop	r12
     b06:	bf 90       	pop	r11
     b08:	af 90       	pop	r10
     b0a:	08 95       	ret

00000b0c <_GLOBAL__sub_D_lcd>:
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	ce ee       	ldi	r28, 0xEE	; 238
     b12:	d2 e0       	ldi	r29, 0x02	; 2
struct CITY_TIME_DIF {
	String name;
	int timediff;
};

const struct CITY_TIME_DIF CITIES [] {
     b14:	28 97       	sbiw	r28, 0x08	; 8
#include "Romeo_keys.h"

hd44780_I2Cexp lcd;

//Strukt um Städte und deren Zweitverschiebung zu GMT (London)
struct CITY_TIME_DIF {
     b16:	ce 01       	movw	r24, r28
     b18:	0e 94 c0 18 	call	0x3180	; 0x3180 <_ZN6StringD1Ev>
	String name;
	int timediff;
};

const struct CITY_TIME_DIF CITIES [] {
     b1c:	82 e0       	ldi	r24, 0x02	; 2
     b1e:	ce 38       	cpi	r28, 0x8E	; 142
     b20:	d8 07       	cpc	r29, r24
     b22:	c1 f7       	brne	.-16     	; 0xb14 <_GLOBAL__sub_D_lcd+0x8>
		menu = newmenu;
		lcd.setCursor(0, 0);
		lcd.print(ROM(watchmenu[menu].text1));
	}
		} //else Klammer
}
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	08 95       	ret

00000b2a <_ZN14hd44780_I2Cexp14iosetBacklightEh>:
}

// iosetBacklight()  - set backlight brightness
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	fc 01       	movw	r30, r24
{
	if(!_bl) // backlight control?
     b30:	81 a5       	ldd	r24, Z+41	; 0x29
     b32:	88 23       	and	r24, r24
     b34:	71 f1       	breq	.+92     	; 0xb92 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x68>
     b36:	92 a5       	ldd	r25, Z+42	; 0x2a
		return(hd44780::RV_ENOTSUP); // not backlight control support

	// dimvalue 0 is backlight off any other dimvalue is backlight on
	// configure backlight state mask according to active level
	if(((dimvalue) && (_blLevel == HIGH)) || 
     b38:	66 23       	and	r22, r22
     b3a:	19 f0       	breq	.+6      	; 0xb42 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x18>
     b3c:	91 30       	cpi	r25, 0x01	; 1
     b3e:	29 f4       	brne	.+10     	; 0xb4a <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
     b40:	02 c0       	rjmp	.+4      	; 0xb46 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x1c>
			((dimvalue == 0) && (_blLevel == LOW)))
     b42:	91 11       	cpse	r25, r1
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
	{
		_blCurState = _bl;
     b46:	83 a7       	std	Z+43, r24	; 0x2b
     b48:	01 c0       	rjmp	.+2      	; 0xb4c <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x22>
	}
	else 
	{
		_blCurState = 0;
     b4a:	13 a6       	std	Z+43, r1	; 0x2b
     b4c:	ef 01       	movw	r28, r30
	}
	Wire.beginTransmission(_addr);
     b4e:	60 a1       	ldd	r22, Z+32	; 0x20
     b50:	89 e8       	ldi	r24, 0x89	; 137
     b52:	93 e0       	ldi	r25, 0x03	; 3
     b54:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
     b58:	89 a1       	ldd	r24, Y+33	; 0x21
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	31 f4       	brne	.+12     	; 0xb6a <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x40>
	{
		Wire.write(9); // point to GPIO
     b5e:	69 e0       	ldi	r22, 0x09	; 9
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	89 e8       	ldi	r24, 0x89	; 137
     b64:	93 e0       	ldi	r25, 0x03	; 3
     b66:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7TwoWire5writeEi>
	}
	Wire.write( _blCurState );
     b6a:	6b a5       	ldd	r22, Y+43	; 0x2b
     b6c:	89 e8       	ldi	r24, 0x89	; 137
     b6e:	93 e0       	ldi	r25, 0x03	; 3
     b70:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     b74:	89 e8       	ldi	r24, 0x89	; 137
     b76:	93 e0       	ldi	r25, 0x03	; 3
     b78:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN7TwoWire15endTransmissionEv>
     b7c:	21 e0       	ldi	r18, 0x01	; 1
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	81 11       	cpse	r24, r1
     b82:	02 c0       	rjmp	.+4      	; 0xb88 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x5e>
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	88 27       	eor	r24, r24
     b8a:	99 27       	eor	r25, r25
     b8c:	82 1b       	sub	r24, r18
     b8e:	93 0b       	sbc	r25, r19
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x6c>
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
{
	if(!_bl) // backlight control?
		return(hd44780::RV_ENOTSUP); // not backlight control support
     b92:	8d ef       	ldi	r24, 0xFD	; 253
     b94:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write( _blCurState );
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR); // all is good
}
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	08 95       	ret

00000b9c <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>:
	return(0);
}


// write4bits - send a nibble to the LCD through i/o expander port
void write4bits(uint8_t value, hd44780::iotype type ) 
     b9c:	cf 93       	push	r28
     b9e:	fc 01       	movw	r30, r24
{
uint8_t gpioValue =  _blCurState;
     ba0:	c3 a5       	ldd	r28, Z+43	; 0x2b
   
	// convert the value to an i/o expander port value
	// based on pin mappings
	if(value & (1 << 0))
     ba2:	60 ff       	sbrs	r22, 0
     ba4:	02 c0       	rjmp	.+4      	; 0xbaa <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0xe>
		gpioValue |= _d4;
     ba6:	85 a1       	ldd	r24, Z+37	; 0x25
     ba8:	c8 2b       	or	r28, r24

	if(value & (1 << 1))
     baa:	61 ff       	sbrs	r22, 1
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x16>
		gpioValue |= _d5;
     bae:	86 a1       	ldd	r24, Z+38	; 0x26
     bb0:	c8 2b       	or	r28, r24

	if(value & (1 << 2))
     bb2:	62 ff       	sbrs	r22, 2
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x1e>
		gpioValue |= _d6;
     bb6:	87 a1       	ldd	r24, Z+39	; 0x27
     bb8:	c8 2b       	or	r28, r24

	if(value & (1 << 3))
     bba:	63 ff       	sbrs	r22, 3
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x26>
		gpioValue |= _d7;
     bbe:	80 a5       	ldd	r24, Z+40	; 0x28
     bc0:	c8 2b       	or	r28, r24


	if(type == hd44780::HD44780_IOdata) 
     bc2:	41 30       	cpi	r20, 0x01	; 1
     bc4:	11 f4       	brne	.+4      	; 0xbca <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x2e>
	{
		gpioValue |= _rs; // set RS high to send to data reg
     bc6:	82 a1       	ldd	r24, Z+34	; 0x22
     bc8:	c8 2b       	or	r28, r24
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
     bca:	64 a1       	ldd	r22, Z+36	; 0x24
     bcc:	6c 2b       	or	r22, r28
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	89 e8       	ldi	r24, 0x89	; 137
     bd2:	93 e0       	ldi	r25, 0x03	; 3
     bd4:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7TwoWire5writeEi>
	Wire.write(gpioValue);		// with E LOW
     bd8:	6c 2f       	mov	r22, r28
     bda:	89 e8       	ldi	r24, 0x89	; 137
     bdc:	93 e0       	ldi	r25, 0x03	; 3
}
     bde:	cf 91       	pop	r28
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
	Wire.write(gpioValue);		// with E LOW
     be0:	0c 94 12 0e 	jmp	0x1c24	; 0x1c24 <_ZN7TwoWire5writeEh>

00000be4 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh>:
	return(rval);
}

// iowrite(type, value) - send either command or data byte to lcd
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
     be4:	8f 92       	push	r8
     be6:	9f 92       	push	r9
     be8:	af 92       	push	r10
     bea:	bf 92       	push	r11
     bec:	cf 92       	push	r12
     bee:	df 92       	push	r13
     bf0:	ef 92       	push	r14
     bf2:	ff 92       	push	r15
     bf4:	0f 93       	push	r16
     bf6:	1f 93       	push	r17
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	ec 01       	movw	r28, r24
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
     bfe:	88 a1       	ldd	r24, Y+32	; 0x20
     c00:	88 23       	and	r24, r24
     c02:	09 f4       	brne	.+2      	; 0xc06 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x22>
     c04:	50 c0       	rjmp	.+160    	; 0xca6 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
     c06:	89 a1       	ldd	r24, Y+33	; 0x21
     c08:	88 23       	and	r24, r24
     c0a:	09 f4       	brne	.+2      	; 0xc0e <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x2a>
     c0c:	4c c0       	rjmp	.+152    	; 0xca6 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
     c0e:	14 2f       	mov	r17, r20
     c10:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
     c12:	8c 8c       	ldd	r8, Y+28	; 0x1c
     c14:	9d 8c       	ldd	r9, Y+29	; 0x1d
     c16:	ae 8c       	ldd	r10, Y+30	; 0x1e
     c18:	bf 8c       	ldd	r11, Y+31	; 0x1f
     c1a:	c8 8c       	ldd	r12, Y+24	; 0x18
     c1c:	d9 8c       	ldd	r13, Y+25	; 0x19
     c1e:	ea 8c       	ldd	r14, Y+26	; 0x1a
     c20:	fb 8c       	ldd	r15, Y+27	; 0x1b
     c22:	8d e2       	ldi	r24, 0x2D	; 45
     c24:	c8 1a       	sub	r12, r24
     c26:	d1 08       	sbc	r13, r1
     c28:	e1 08       	sbc	r14, r1
     c2a:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
     c2c:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <micros>
     c30:	dc 01       	movw	r26, r24
     c32:	cb 01       	movw	r24, r22
     c34:	8c 19       	sub	r24, r12
     c36:	9d 09       	sbc	r25, r13
     c38:	ae 09       	sbc	r26, r14
     c3a:	bf 09       	sbc	r27, r15
     c3c:	88 15       	cp	r24, r8
     c3e:	99 05       	cpc	r25, r9
     c40:	aa 05       	cpc	r26, r10
     c42:	bb 05       	cpc	r27, r11
     c44:	98 f3       	brcs	.-26     	; 0xc2c <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x48>
	 */

	waitReady(-45);
   
	// grab i2c bus
	Wire.beginTransmission(_addr);
     c46:	68 a1       	ldd	r22, Y+32	; 0x20
     c48:	89 e8       	ldi	r24, 0x89	; 137
     c4a:	93 e0       	ldi	r25, 0x03	; 3
     c4c:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
     c50:	89 a1       	ldd	r24, Y+33	; 0x21
     c52:	82 30       	cpi	r24, 0x02	; 2
     c54:	31 f4       	brne	.+12     	; 0xc62 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x7e>
	{
		Wire.write(9); // point to GPIO
     c56:	69 e0       	ldi	r22, 0x09	; 9
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	89 e8       	ldi	r24, 0x89	; 137
     c5c:	93 e0       	ldi	r25, 0x03	; 3
     c5e:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7TwoWire5writeEi>
	}
	// send both nibbles in same i2c connection
	write4bits( (value >> 4), type );  // send upper nibble
     c62:	61 2f       	mov	r22, r17
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	84 e0       	ldi	r24, 0x04	; 4
     c68:	75 95       	asr	r23
     c6a:	67 95       	ror	r22
     c6c:	8a 95       	dec	r24
     c6e:	e1 f7       	brne	.-8      	; 0xc68 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x84>
     c70:	40 2f       	mov	r20, r16
     c72:	ce 01       	movw	r24, r28
     c74:	0e 94 ce 05 	call	0xb9c	; 0xb9c <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	 * are used to reliably get the LCD and host in nibble sync
	 * with each other and to get the LCD into 4 bit mode.
	 * When sending a "4 bit command" only the upper nibble of
	 * of the 8 bit byte will presented on LCD signals D4-D7.
	 */
	if(type != hd44780::HD44780_IOcmd4bit)
     c78:	02 30       	cpi	r16, 0x02	; 2
     c7a:	31 f0       	breq	.+12     	; 0xc88 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xa4>
	{
		write4bits( (value & 0x0F), type); // lower nibble, if not 4bit cmd
     c7c:	61 2f       	mov	r22, r17
     c7e:	6f 70       	andi	r22, 0x0F	; 15
     c80:	40 2f       	mov	r20, r16
     c82:	ce 01       	movw	r24, r28
     c84:	0e 94 ce 05 	call	0xb9c	; 0xb9c <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	}
	if(Wire.endTransmission())
     c88:	89 e8       	ldi	r24, 0x89	; 137
     c8a:	93 e0       	ldi	r25, 0x03	; 3
     c8c:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN7TwoWire15endTransmissionEv>
     c90:	21 e0       	ldi	r18, 0x01	; 1
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	81 11       	cpse	r24, r1
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xb8>
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	88 27       	eor	r24, r24
     c9e:	99 27       	eor	r25, r25
     ca0:	82 1b       	sub	r24, r18
     ca2:	93 0b       	sbc	r25, r19
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc6>
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
     ca6:	8c ef       	ldi	r24, 0xFC	; 252
     ca8:	9f ef       	ldi	r25, 0xFF	; 255
	}
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR);
}
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	1f 91       	pop	r17
     cb0:	0f 91       	pop	r16
     cb2:	ff 90       	pop	r15
     cb4:	ef 90       	pop	r14
     cb6:	df 90       	pop	r13
     cb8:	cf 90       	pop	r12
     cba:	bf 90       	pop	r11
     cbc:	af 90       	pop	r10
     cbe:	9f 90       	pop	r9
     cc0:	8f 90       	pop	r8
     cc2:	08 95       	ret

00000cc4 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE>:
// ioread(type) - read a byte from LCD DDRAM
//
// returns:
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
     cc4:	8f 92       	push	r8
     cc6:	9f 92       	push	r9
     cc8:	af 92       	push	r10
     cca:	bf 92       	push	r11
     ccc:	cf 92       	push	r12
     cce:	df 92       	push	r13
     cd0:	ef 92       	push	r14
     cd2:	ff 92       	push	r15
     cd4:	0f 93       	push	r16
     cd6:	1f 93       	push	r17
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	ec 01       	movw	r28, r24
{
uint8_t gpioValue =  _blCurState;
     cde:	1b a5       	ldd	r17, Y+43	; 0x2b
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
     ce0:	88 a1       	ldd	r24, Y+32	; 0x20
     ce2:	88 23       	and	r24, r24
     ce4:	09 f4       	brne	.+2      	; 0xce8 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x24>
     ce6:	f6 c0       	rjmp	.+492    	; 0xed4 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
     ce8:	89 a1       	ldd	r24, Y+33	; 0x21
     cea:	88 23       	and	r24, r24
     cec:	09 f4       	brne	.+2      	; 0xcf0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x2c>
     cee:	f2 c0       	rjmp	.+484    	; 0xed4 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
		return(hd44780::RV_ENXIO);

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
     cf0:	82 30       	cpi	r24, 0x02	; 2
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x32>
     cf4:	f1 c0       	rjmp	.+482    	; 0xed8 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
	{
		return(hd44780::RV_ENOTSUP);
	}

	// check if reads supported
	if(!_rw)
     cf6:	8b a1       	ldd	r24, Y+35	; 0x23
     cf8:	88 23       	and	r24, r24
     cfa:	09 f4       	brne	.+2      	; 0xcfe <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x3a>
     cfc:	ed c0       	rjmp	.+474    	; 0xed8 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
     cfe:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
     d00:	8c 8c       	ldd	r8, Y+28	; 0x1c
     d02:	9d 8c       	ldd	r9, Y+29	; 0x1d
     d04:	ae 8c       	ldd	r10, Y+30	; 0x1e
     d06:	bf 8c       	ldd	r11, Y+31	; 0x1f
     d08:	c8 8c       	ldd	r12, Y+24	; 0x18
     d0a:	d9 8c       	ldd	r13, Y+25	; 0x19
     d0c:	ea 8c       	ldd	r14, Y+26	; 0x1a
     d0e:	fb 8c       	ldd	r15, Y+27	; 0x1b
     d10:	8d e2       	ldi	r24, 0x2D	; 45
     d12:	c8 1a       	sub	r12, r24
     d14:	d1 08       	sbc	r13, r1
     d16:	e1 08       	sbc	r14, r1
     d18:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
     d1a:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <micros>
     d1e:	dc 01       	movw	r26, r24
     d20:	cb 01       	movw	r24, r22
     d22:	8c 19       	sub	r24, r12
     d24:	9d 09       	sbc	r25, r13
     d26:	ae 09       	sbc	r26, r14
     d28:	bf 09       	sbc	r27, r15
     d2a:	88 15       	cp	r24, r8
     d2c:	99 05       	cpc	r25, r9
     d2e:	aa 05       	cpc	r26, r10
     d30:	bb 05       	cpc	r27, r11
     d32:	98 f3       	brcs	.-26     	; 0xd1a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x56>
     d34:	8d a1       	ldd	r24, Y+37	; 0x25
     d36:	18 2b       	or	r17, r24
     d38:	8e a1       	ldd	r24, Y+38	; 0x26
     d3a:	18 2b       	or	r17, r24
     d3c:	8f a1       	ldd	r24, Y+39	; 0x27
     d3e:	18 2b       	or	r17, r24
   
	// put all the expander LCD data pins into input mode.
	// PCF8574 psuedo inputs use pullups so setting them to 1
	// makes them suitible for inputs.

	gpioValue |= _d4|_d5|_d6|_d7;
     d40:	88 a5       	ldd	r24, Y+40	; 0x28
     d42:	18 2b       	or	r17, r24

	// set RS based on type of read (data or status/cmd)
	if(type == hd44780::HD44780_IOdata) 
     d44:	01 30       	cpi	r16, 0x01	; 1
     d46:	11 f4       	brne	.+4      	; 0xd4c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x88>
	{
		gpioValue |= _rs; // RS high to read data reg
     d48:	8a a1       	ldd	r24, Y+34	; 0x22
     d4a:	18 2b       	or	r17, r24
	}

	gpioValue |= _rw; // r/w high for reading
     d4c:	8b a1       	ldd	r24, Y+35	; 0x23
     d4e:	18 2b       	or	r17, r24

	// write all the bits to the expander port
	
	Wire.beginTransmission(_addr);
     d50:	68 a1       	ldd	r22, Y+32	; 0x20
     d52:	89 e8       	ldi	r24, 0x89	; 137
     d54:	93 e0       	ldi	r25, 0x03	; 3
     d56:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue);		// d4-d7 are inputs, RS, r/w high, E LOW
     d5a:	61 2f       	mov	r22, r17
     d5c:	89 e8       	ldi	r24, 0x89	; 137
     d5e:	93 e0       	ldi	r25, 0x03	; 3
     d60:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     d64:	89 e8       	ldi	r24, 0x89	; 137
     d66:	93 e0       	ldi	r25, 0x03	; 3
     d68:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN7TwoWire15endTransmissionEv>
     d6c:	88 23       	and	r24, r24
     d6e:	19 f0       	breq	.+6      	; 0xd76 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xb2>
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;
     d70:	0f ef       	ldi	r16, 0xFF	; 255
     d72:	1f ef       	ldi	r17, 0xFF	; 255
     d74:	9d c0       	rjmp	.+314    	; 0xeb0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ec>
	if(Wire.endTransmission())
		goto returnStatus;


	// raise E to read the data.
	Wire.beginTransmission(_addr);
     d76:	68 a1       	ldd	r22, Y+32	; 0x20
     d78:	89 e8       	ldi	r24, 0x89	; 137
     d7a:	93 e0       	ldi	r25, 0x03	; 3
     d7c:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raises E 
     d80:	6c a1       	ldd	r22, Y+36	; 0x24
     d82:	61 2b       	or	r22, r17
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	89 e8       	ldi	r24, 0x89	; 137
     d88:	93 e0       	ldi	r25, 0x03	; 3
     d8a:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
     d8e:	89 e8       	ldi	r24, 0x89	; 137
     d90:	93 e0       	ldi	r25, 0x03	; 3
     d92:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN7TwoWire15endTransmissionEv>
     d96:	81 11       	cpse	r24, r1
     d98:	eb cf       	rjmp	.-42     	; 0xd70 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// read the expander port to get the upper nibble of the byte
	Wire.requestFrom((int)_addr, 1);
     d9a:	68 a1       	ldd	r22, Y+32	; 0x20
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	41 e0       	ldi	r20, 0x01	; 1
     da0:	50 e0       	ldi	r21, 0x00	; 0
     da2:	89 e8       	ldi	r24, 0x89	; 137
     da4:	93 e0       	ldi	r25, 0x03	; 3
     da6:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN7TwoWire11requestFromEii>
	iodata = Wire.read();
     daa:	89 e8       	ldi	r24, 0x89	; 137
     dac:	93 e0       	ldi	r25, 0x03	; 3
     dae:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN7TwoWire4readEv>
     db2:	7c 01       	movw	r14, r24
	if(iodata < 0) // did we not receive a byte?
     db4:	97 fd       	sbrc	r25, 7
     db6:	dc cf       	rjmp	.-72     	; 0xd70 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
     db8:	68 a1       	ldd	r22, Y+32	; 0x20
     dba:	89 e8       	ldi	r24, 0x89	; 137
     dbc:	93 e0       	ldi	r25, 0x03	; 3
     dbe:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
     dc2:	61 2f       	mov	r22, r17
     dc4:	89 e8       	ldi	r24, 0x89	; 137
     dc6:	93 e0       	ldi	r25, 0x03	; 3
     dc8:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     dcc:	89 e8       	ldi	r24, 0x89	; 137
     dce:	93 e0       	ldi	r25, 0x03	; 3
     dd0:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN7TwoWire15endTransmissionEv>
     dd4:	81 11       	cpse	r24, r1
     dd6:	cc cf       	rjmp	.-104    	; 0xd70 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
     dd8:	8d a1       	ldd	r24, Y+37	; 0x25
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	8e 21       	and	r24, r14
     dde:	9f 21       	and	r25, r15
     de0:	89 2b       	or	r24, r25
     de2:	11 f4       	brne	.+4      	; 0xde8 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x124>
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
     de4:	00 e0       	ldi	r16, 0x00	; 0
     de6:	01 c0       	rjmp	.+2      	; 0xdea <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x126>
	if(Wire.endTransmission())
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
		data |= (1 << 4);
     de8:	00 e1       	ldi	r16, 0x10	; 16

	if(iodata & _d5)
     dea:	8e a1       	ldd	r24, Y+38	; 0x26
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	8e 21       	and	r24, r14
     df0:	9f 21       	and	r25, r15
     df2:	89 2b       	or	r24, r25
     df4:	09 f0       	breq	.+2      	; 0xdf8 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x134>
		data |= (1 << 5);
     df6:	00 62       	ori	r16, 0x20	; 32

	if(iodata & _d6)
     df8:	8f a1       	ldd	r24, Y+39	; 0x27
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	8e 21       	and	r24, r14
     dfe:	9f 21       	and	r25, r15
     e00:	89 2b       	or	r24, r25
     e02:	09 f0       	breq	.+2      	; 0xe06 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x142>
		data |= (1 << 6);
     e04:	00 64       	ori	r16, 0x40	; 64

	if(iodata & _d7)
     e06:	88 a5       	ldd	r24, Y+40	; 0x28
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	e8 22       	and	r14, r24
     e0c:	f9 22       	and	r15, r25
     e0e:	ef 28       	or	r14, r15
     e10:	09 f0       	breq	.+2      	; 0xe14 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x150>
		data |= (1 << 7);
     e12:	00 68       	ori	r16, 0x80	; 128
	
	Wire.beginTransmission(_addr);
     e14:	68 a1       	ldd	r22, Y+32	; 0x20
     e16:	89 e8       	ldi	r24, 0x89	; 137
     e18:	93 e0       	ldi	r25, 0x03	; 3
     e1a:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raise E to read next nibble
     e1e:	6c a1       	ldd	r22, Y+36	; 0x24
     e20:	61 2b       	or	r22, r17
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	89 e8       	ldi	r24, 0x89	; 137
     e26:	93 e0       	ldi	r25, 0x03	; 3
     e28:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
     e2c:	89 e8       	ldi	r24, 0x89	; 137
     e2e:	93 e0       	ldi	r25, 0x03	; 3
     e30:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN7TwoWire15endTransmissionEv>
     e34:	81 11       	cpse	r24, r1
     e36:	9c cf       	rjmp	.-200    	; 0xd70 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>

	// read the expander port to get the lower nibble of the byte
	// We can't look at the return value from requestFrom() on the TineyWireM
	// library as it doesn't work like it is supposed to.
	// So we look at the return status from read() instead.
	Wire.requestFrom((int)_addr, 1);
     e38:	68 a1       	ldd	r22, Y+32	; 0x20
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	41 e0       	ldi	r20, 0x01	; 1
     e3e:	50 e0       	ldi	r21, 0x00	; 0
     e40:	89 e8       	ldi	r24, 0x89	; 137
     e42:	93 e0       	ldi	r25, 0x03	; 3
     e44:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN7TwoWire11requestFromEii>

	iodata = Wire.read();
     e48:	89 e8       	ldi	r24, 0x89	; 137
     e4a:	93 e0       	ldi	r25, 0x03	; 3
     e4c:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN7TwoWire4readEv>
     e50:	7c 01       	movw	r14, r24

	if(iodata < 0) // did we not receive a byte?
     e52:	97 fd       	sbrc	r25, 7
     e54:	8d cf       	rjmp	.-230    	; 0xd70 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
     e56:	68 a1       	ldd	r22, Y+32	; 0x20
     e58:	89 e8       	ldi	r24, 0x89	; 137
     e5a:	93 e0       	ldi	r25, 0x03	; 3
     e5c:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
     e60:	61 2f       	mov	r22, r17
     e62:	89 e8       	ldi	r24, 0x89	; 137
     e64:	93 e0       	ldi	r25, 0x03	; 3
     e66:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     e6a:	89 e8       	ldi	r24, 0x89	; 137
     e6c:	93 e0       	ldi	r25, 0x03	; 3
     e6e:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN7TwoWire15endTransmissionEv>
     e72:	81 11       	cpse	r24, r1
     e74:	7d cf       	rjmp	.-262    	; 0xd70 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into lower nibble of byte
	if(iodata & _d4)
     e76:	8d a1       	ldd	r24, Y+37	; 0x25
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	8e 21       	and	r24, r14
     e7c:	9f 21       	and	r25, r15
     e7e:	89 2b       	or	r24, r25
     e80:	09 f0       	breq	.+2      	; 0xe84 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1c0>
		data |= (1 << 0);
     e82:	01 60       	ori	r16, 0x01	; 1

	if(iodata & _d5)
     e84:	8e a1       	ldd	r24, Y+38	; 0x26
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	8e 21       	and	r24, r14
     e8a:	9f 21       	and	r25, r15
     e8c:	89 2b       	or	r24, r25
     e8e:	09 f0       	breq	.+2      	; 0xe92 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ce>
		data |= (1 << 1);
     e90:	02 60       	ori	r16, 0x02	; 2

	if(iodata & _d6)
     e92:	8f a1       	ldd	r24, Y+39	; 0x27
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	8e 21       	and	r24, r14
     e98:	9f 21       	and	r25, r15
     e9a:	89 2b       	or	r24, r25
     e9c:	09 f0       	breq	.+2      	; 0xea0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1dc>
		data |= (1 << 2);
     e9e:	04 60       	ori	r16, 0x04	; 4

	if(iodata & _d7)
     ea0:	88 a5       	ldd	r24, Y+40	; 0x28
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	e8 22       	and	r14, r24
     ea6:	f9 22       	and	r15, r25
     ea8:	ef 28       	or	r14, r15
     eaa:	09 f0       	breq	.+2      	; 0xeae <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ea>
		data |= (1 << 3);
     eac:	08 60       	ori	r16, 0x08	; 8

	rval = data;
     eae:	10 e0       	ldi	r17, 0x00	; 0

returnStatus:

	// try to put gpio port back to all outputs state with WR signal low for writes
	Wire.beginTransmission(_addr);
     eb0:	68 a1       	ldd	r22, Y+32	; 0x20
     eb2:	89 e8       	ldi	r24, 0x89	; 137
     eb4:	93 e0       	ldi	r25, 0x03	; 3
     eb6:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(_blCurState);		// with E LOW
     eba:	6b a5       	ldd	r22, Y+43	; 0x2b
     ebc:	89 e8       	ldi	r24, 0x89	; 137
     ebe:	93 e0       	ldi	r25, 0x03	; 3
     ec0:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     ec4:	89 e8       	ldi	r24, 0x89	; 137
     ec6:	93 e0       	ldi	r25, 0x03	; 3
     ec8:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN7TwoWire15endTransmissionEv>
     ecc:	88 23       	and	r24, r24
     ece:	39 f0       	breq	.+14     	; 0xede <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21a>
		rval = hd44780::RV_EIO;
     ed0:	8f ef       	ldi	r24, 0xFF	; 255
     ed2:	03 c0       	rjmp	.+6      	; 0xeda <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
     ed4:	8c ef       	ldi	r24, 0xFC	; 252
     ed6:	01 c0       	rjmp	.+2      	; 0xeda <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
	{
		return(hd44780::RV_ENOTSUP);
     ed8:	8d ef       	ldi	r24, 0xFD	; 253
     eda:	9f ef       	ldi	r25, 0xFF	; 255
     edc:	01 c0       	rjmp	.+2      	; 0xee0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21c>
     ede:	c8 01       	movw	r24, r16
	Wire.write(_blCurState);		// with E LOW
	if(Wire.endTransmission())
		rval = hd44780::RV_EIO;

	return(rval);
}
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	ff 90       	pop	r15
     eea:	ef 90       	pop	r14
     eec:	df 90       	pop	r13
     eee:	cf 90       	pop	r12
     ef0:	bf 90       	pop	r11
     ef2:	af 90       	pop	r10
     ef4:	9f 90       	pop	r9
     ef6:	8f 90       	pop	r8
     ef8:	08 95       	ret

00000efa <_ZN14hd44780_I2Cexp11autocfg8574Ev>:
 * a new resistor to  connect to the base of the transistor.
 * 
 * As a result the SYDZ backpack cannot use autoconfiguration.
 */

int autocfg8574()
     efa:	0f 93       	push	r16
     efc:	1f 93       	push	r17
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	ec 01       	movw	r28, r24
uint8_t data, data2;
uint8_t rs, rw, en, d4, d5, d6, d7, bl, blLevel;

	// First put a 0xff in the output port

	Wire.beginTransmission(_addr);
     f04:	68 a1       	ldd	r22, Y+32	; 0x20
     f06:	89 e8       	ldi	r24, 0x89	; 137
     f08:	93 e0       	ldi	r25, 0x03	; 3
     f0a:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0xff);
     f0e:	6f ef       	ldi	r22, 0xFF	; 255
     f10:	89 e8       	ldi	r24, 0x89	; 137
     f12:	93 e0       	ldi	r25, 0x03	; 3
     f14:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
     f18:	89 e8       	ldi	r24, 0x89	; 137
     f1a:	93 e0       	ldi	r25, 0x03	; 3
     f1c:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN7TwoWire15endTransmissionEv>

	// now read back from the port

	Wire.requestFrom((int)_addr, 1);
     f20:	68 a1       	ldd	r22, Y+32	; 0x20
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	41 e0       	ldi	r20, 0x01	; 1
     f26:	50 e0       	ldi	r21, 0x00	; 0
     f28:	89 e8       	ldi	r24, 0x89	; 137
     f2a:	93 e0       	ldi	r25, 0x03	; 3
     f2c:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
     f30:	89 e8       	ldi	r24, 0x89	; 137
     f32:	93 e0       	ldi	r25, 0x03	; 3
     f34:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN7TwoWire4readEv>
     f38:	8c 01       	movw	r16, r24

	// Turn off bit2 to attempt to see if en is bit 2,
	// if it is, it should change all lcd data bits to 1s
	
	Wire.beginTransmission(_addr);
     f3a:	68 a1       	ldd	r22, Y+32	; 0x20
     f3c:	89 e8       	ldi	r24, 0x89	; 137
     f3e:	93 e0       	ldi	r25, 0x03	; 3
     f40:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) (~(1 << 2)) );
     f44:	6b ef       	ldi	r22, 0xFB	; 251
     f46:	89 e8       	ldi	r24, 0x89	; 137
     f48:	93 e0       	ldi	r25, 0x03	; 3
     f4a:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
     f4e:	89 e8       	ldi	r24, 0x89	; 137
     f50:	93 e0       	ldi	r25, 0x03	; 3
     f52:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN7TwoWire15endTransmissionEv>

	// read back data
	Wire.requestFrom((int)_addr, 1);
     f56:	68 a1       	ldd	r22, Y+32	; 0x20
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	41 e0       	ldi	r20, 0x01	; 1
     f5c:	50 e0       	ldi	r21, 0x00	; 0
     f5e:	89 e8       	ldi	r24, 0x89	; 137
     f60:	93 e0       	ldi	r25, 0x03	; 3
     f62:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN7TwoWire11requestFromEii>
	data2 = Wire.read();
     f66:	89 e8       	ldi	r24, 0x89	; 137
     f68:	93 e0       	ldi	r25, 0x03	; 3
     f6a:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN7TwoWire4readEv>

	// If lower 3 bits are high and all 4 upper bits are high after clearing bit 2
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
     f6e:	98 01       	movw	r18, r16
     f70:	27 70       	andi	r18, 0x07	; 7
     f72:	33 27       	eor	r19, r19
     f74:	27 30       	cpi	r18, 0x07	; 7
     f76:	31 05       	cpc	r19, r1
     f78:	b1 f4       	brne	.+44     	; 0xfa6 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
     f7a:	80 7f       	andi	r24, 0xF0	; 240
     f7c:	99 27       	eor	r25, r25
     f7e:	80 3f       	cpi	r24, 0xF0	; 240
     f80:	91 05       	cpc	r25, r1
     f82:	89 f4       	brne	.+34     	; 0xfa6 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
     f84:	83 e0       	ldi	r24, 0x03	; 3
     f86:	16 95       	lsr	r17
     f88:	07 95       	ror	r16
     f8a:	8a 95       	dec	r24
     f8c:	e1 f7       	brne	.-8      	; 0xf86 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x8c>
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	08 27       	eor	r16, r24
     f92:	01 70       	andi	r16, 0x01	; 1
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
	{
		rs = 0; rw = 1; en = 2; d4 = 4; d5 = 5; d6 = 6; d7 = 7; bl = 3;
     f94:	43 e0       	ldi	r20, 0x03	; 3
     f96:	57 e0       	ldi	r21, 0x07	; 7
     f98:	66 e0       	ldi	r22, 0x06	; 6
     f9a:	75 e0       	ldi	r23, 0x05	; 5
     f9c:	e4 e0       	ldi	r30, 0x04	; 4
     f9e:	22 e0       	ldi	r18, 0x02	; 2
     fa0:	f1 e0       	ldi	r31, 0x01	; 1
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	34 c0       	rjmp	.+104    	; 0x100e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x114>
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
		}
	}
	else if((data & 0x70) == 0x70)
     fa6:	c8 01       	movw	r24, r16
     fa8:	80 77       	andi	r24, 0x70	; 112
     faa:	99 27       	eor	r25, r25
     fac:	80 37       	cpi	r24, 0x70	; 112
     fae:	91 05       	cpc	r25, r1
     fb0:	09 f0       	breq	.+2      	; 0xfb4 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xba>
     fb2:	68 c0       	rjmp	.+208    	; 0x1084 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18a>
		// both use bit 7 for backlight control

		// Turn off the en bit which should change the data bits
		// bit 4 on the mjkdz is en so we try that bit
	
		Wire.beginTransmission(_addr);
     fb4:	68 a1       	ldd	r22, Y+32	; 0x20
     fb6:	89 e8       	ldi	r24, 0x89	; 137
     fb8:	93 e0       	ldi	r25, 0x03	; 3
     fba:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t) (~(1 << 4)) );
     fbe:	6f ee       	ldi	r22, 0xEF	; 239
     fc0:	89 e8       	ldi	r24, 0x89	; 137
     fc2:	93 e0       	ldi	r25, 0x03	; 3
     fc4:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
     fc8:	89 e8       	ldi	r24, 0x89	; 137
     fca:	93 e0       	ldi	r25, 0x03	; 3
     fcc:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN7TwoWire15endTransmissionEv>

		// read back data
		Wire.requestFrom((int)_addr, 1);
     fd0:	68 a1       	ldd	r22, Y+32	; 0x20
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	41 e0       	ldi	r20, 0x01	; 1
     fd6:	50 e0       	ldi	r21, 0x00	; 0
     fd8:	89 e8       	ldi	r24, 0x89	; 137
     fda:	93 e0       	ldi	r25, 0x03	; 3
     fdc:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN7TwoWire11requestFromEii>
		data2 = Wire.read();
     fe0:	89 e8       	ldi	r24, 0x89	; 137
     fe2:	93 e0       	ldi	r25, 0x03	; 3
     fe4:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN7TwoWire4readEv>
		// look at data bits and see if they changed
		// if they changed to 0xf, then en was bit 4 and it is mjdkz
		// this will happen since when E is low the LCD is not
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
     fe8:	8f 70       	andi	r24, 0x0F	; 15
     fea:	99 27       	eor	r25, r25
     fec:	0f 97       	sbiw	r24, 0x0f	; 15
     fee:	19 f0       	breq	.+6      	; 0xff6 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xfc>
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
		}
		else
		{
			// electrofun LCDXIO
			rs = 4; rw = 5; en = 6; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
     ff0:	26 e0       	ldi	r18, 0x06	; 6
     ff2:	34 e0       	ldi	r19, 0x04	; 4
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x100>
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
		{
			// mjkdz
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
     ff6:	24 e0       	ldi	r18, 0x04	; 4
     ff8:	36 e0       	ldi	r19, 0x06	; 6
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
     ffa:	00 95       	com	r16
     ffc:	00 1f       	adc	r16, r16
     ffe:	00 27       	eor	r16, r16
    1000:	00 1f       	adc	r16, r16
    1002:	47 e0       	ldi	r20, 0x07	; 7
    1004:	53 e0       	ldi	r21, 0x03	; 3
    1006:	62 e0       	ldi	r22, 0x02	; 2
    1008:	71 e0       	ldi	r23, 0x01	; 1
    100a:	e0 e0       	ldi	r30, 0x00	; 0
    100c:	f5 e0       	ldi	r31, 0x05	; 5
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	dc 01       	movw	r26, r24
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11e>
    1016:	aa 0f       	add	r26, r26
    1018:	3a 95       	dec	r19
    101a:	ea f7       	brpl	.-6      	; 0x1016 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11c>
    101c:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
    101e:	dc 01       	movw	r26, r24
    1020:	01 c0       	rjmp	.+2      	; 0x1024 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x12a>
    1022:	aa 0f       	add	r26, r26
    1024:	fa 95       	dec	r31
    1026:	ea f7       	brpl	.-6      	; 0x1022 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x128>
    1028:	ab a3       	std	Y+35, r26	; 0x23
	else
		_rw = 0; // no r/w control

	_en = ( 1 << en );
    102a:	dc 01       	movw	r26, r24
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x138>
    102e:	aa 0f       	add	r26, r26
    1030:	bb 1f       	adc	r27, r27
    1032:	2a 95       	dec	r18
    1034:	e2 f7       	brpl	.-8      	; 0x102e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x134>
    1036:	ac a3       	std	Y+36, r26	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
    1038:	9c 01       	movw	r18, r24
    103a:	01 c0       	rjmp	.+2      	; 0x103e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x144>
    103c:	22 0f       	add	r18, r18
    103e:	ea 95       	dec	r30
    1040:	ea f7       	brpl	.-6      	; 0x103c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x142>
    1042:	2d a3       	std	Y+37, r18	; 0x25
	_d5 = ( 1 << d5 );
    1044:	9c 01       	movw	r18, r24
    1046:	01 c0       	rjmp	.+2      	; 0x104a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x150>
    1048:	22 0f       	add	r18, r18
    104a:	7a 95       	dec	r23
    104c:	ea f7       	brpl	.-6      	; 0x1048 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x14e>
    104e:	2e a3       	std	Y+38, r18	; 0x26
	_d6 = ( 1 << d6 );
    1050:	9c 01       	movw	r18, r24
    1052:	01 c0       	rjmp	.+2      	; 0x1056 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15c>
    1054:	22 0f       	add	r18, r18
    1056:	6a 95       	dec	r22
    1058:	ea f7       	brpl	.-6      	; 0x1054 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15a>
    105a:	2f a3       	std	Y+39, r18	; 0x27
	_d7 = ( 1 << d7 );   
    105c:	9c 01       	movw	r18, r24
    105e:	01 c0       	rjmp	.+2      	; 0x1062 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x168>
    1060:	22 0f       	add	r18, r18
    1062:	5a 95       	dec	r21
    1064:	ea f7       	brpl	.-6      	; 0x1060 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x166>
    1066:	28 a7       	std	Y+40, r18	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
    1068:	01 c0       	rjmp	.+2      	; 0x106c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x172>
    106a:	88 0f       	add	r24, r24
    106c:	4a 95       	dec	r20
    106e:	ea f7       	brpl	.-6      	; 0x106a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x170>
    1070:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
    1072:	0a a7       	std	Y+42, r16	; 0x2a
	// set default bl state to backlight on
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
    1074:	01 30       	cpi	r16, 0x01	; 1
    1076:	11 f4       	brne	.+4      	; 0x107c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x182>
		_blCurState = _bl;
    1078:	8b a7       	std	Y+43, r24	; 0x2b
    107a:	01 c0       	rjmp	.+2      	; 0x107e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x184>
	else
		_blCurState = 0;
    107c:	1b a6       	std	Y+43, r1	; 0x2b
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18e>
		}
	}
	else
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
    1084:	8d ef       	ldi	r24, 0xFD	; 253
    1086:	9f ef       	ldi	r25, 0xFF	; 255
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	08 95       	ret

00001092 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>:
 * if GP1 is low then the board is the BOARD_XXX board
 * The BOARD_XXX may not work as GP1 is used for D5 on WIDEHK and LCDPLUG
 *
 *
 */
int autocfgMCP23008()
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	ec 01       	movw	r28, r24

	/*
	 * Now set up output port
	 * Make no assumptions as to the state of IOCON BYTE mode
	 */
	Wire.beginTransmission(_addr);
    1098:	68 a1       	ldd	r22, Y+32	; 0x20
    109a:	89 e8       	ldi	r24, 0x89	; 137
    109c:	93 e0       	ldi	r25, 0x03	; 3
    109e:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t)0); // point to IODIR
    10a2:	60 e0       	ldi	r22, 0x00	; 0
    10a4:	89 e8       	ldi	r24, 0x89	; 137
    10a6:	93 e0       	ldi	r25, 0x03	; 3
    10a8:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <_ZN7TwoWire5writeEh>
	Wire.write(0xff); // all pins inputs
    10ac:	6f ef       	ldi	r22, 0xFF	; 255
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	89 e8       	ldi	r24, 0x89	; 137
    10b2:	93 e0       	ldi	r25, 0x03	; 3
    10b4:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    10b8:	89 e8       	ldi	r24, 0x89	; 137
    10ba:	93 e0       	ldi	r25, 0x03	; 3
    10bc:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN7TwoWire15endTransmissionEv>

	Wire.beginTransmission(_addr);
    10c0:	68 a1       	ldd	r22, Y+32	; 0x20
    10c2:	89 e8       	ldi	r24, 0x89	; 137
    10c4:	93 e0       	ldi	r25, 0x03	; 3
    10c6:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(6); // point to GPPU
    10ca:	66 e0       	ldi	r22, 0x06	; 6
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	89 e8       	ldi	r24, 0x89	; 137
    10d0:	93 e0       	ldi	r25, 0x03	; 3
    10d2:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7TwoWire5writeEi>
	Wire.write(0xff); // turn on pullups
    10d6:	6f ef       	ldi	r22, 0xFF	; 255
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	89 e8       	ldi	r24, 0x89	; 137
    10dc:	93 e0       	ldi	r25, 0x03	; 3
    10de:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    10e2:	89 e8       	ldi	r24, 0x89	; 137
    10e4:	93 e0       	ldi	r25, 0x03	; 3
    10e6:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN7TwoWire15endTransmissionEv>

	/*
	 * read from the GPIO port
	 */

	Wire.beginTransmission(_addr);
    10ea:	68 a1       	ldd	r22, Y+32	; 0x20
    10ec:	89 e8       	ldi	r24, 0x89	; 137
    10ee:	93 e0       	ldi	r25, 0x03	; 3
    10f0:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(9); // point to GPIO
    10f4:	69 e0       	ldi	r22, 0x09	; 9
    10f6:	70 e0       	ldi	r23, 0x00	; 0
    10f8:	89 e8       	ldi	r24, 0x89	; 137
    10fa:	93 e0       	ldi	r25, 0x03	; 3
    10fc:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    1100:	89 e8       	ldi	r24, 0x89	; 137
    1102:	93 e0       	ldi	r25, 0x03	; 3
    1104:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom((int)_addr, 1);
    1108:	68 a1       	ldd	r22, Y+32	; 0x20
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	41 e0       	ldi	r20, 0x01	; 1
    110e:	50 e0       	ldi	r21, 0x00	; 0
    1110:	89 e8       	ldi	r24, 0x89	; 137
    1112:	93 e0       	ldi	r25, 0x03	; 3
    1114:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    1118:	89 e8       	ldi	r24, 0x89	; 137
    111a:	93 e0       	ldi	r25, 0x03	; 3
    111c:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN7TwoWire4readEv>

	blLevel = HIGH; // known boards are active HIGH bl

	if(data == 0x7f) // bit 7 low, and other control and data lines high
    1120:	8f 37       	cpi	r24, 0x7F	; 127
    1122:	61 f0       	breq	.+24     	; 0x113c <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xaa>
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
    1124:	86 ff       	sbrs	r24, 6
    1126:	12 c0       	rjmp	.+36     	; 0x114c <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xba>
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
    1128:	81 fd       	sbrc	r24, 1
    112a:	4c c0       	rjmp	.+152    	; 0x11c4 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x132>
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
		bl = 1;
    112c:	21 e0       	ldi	r18, 0x01	; 1
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
    112e:	32 e0       	ldi	r19, 0x02	; 2
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
    1130:	43 e0       	ldi	r20, 0x03	; 3
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
    1132:	54 e0       	ldi	r21, 0x04	; 4
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
    1134:	65 e0       	ldi	r22, 0x05	; 5
	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
    1136:	76 e0       	ldi	r23, 0x06	; 6
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
    1138:	e7 e0       	ldi	r30, 0x07	; 7
    113a:	0f c0       	rjmp	.+30     	; 0x115a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;
    113c:	27 e0       	ldi	r18, 0x07	; 7
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
    113e:	36 e0       	ldi	r19, 0x06	; 6
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
    1140:	45 e0       	ldi	r20, 0x05	; 5
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
    1142:	54 e0       	ldi	r21, 0x04	; 4
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
    1144:	63 e0       	ldi	r22, 0x03	; 3
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
    1146:	72 e0       	ldi	r23, 0x02	; 2

	if(data == 0x7f) // bit 7 low, and other control and data lines high
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
    1148:	e1 e0       	ldi	r30, 0x01	; 1
    114a:	07 c0       	rjmp	.+14     	; 0x115a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;
    114c:	26 e0       	ldi	r18, 0x06	; 6
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
    114e:	33 e0       	ldi	r19, 0x03	; 3
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
    1150:	42 e0       	ldi	r20, 0x02	; 2
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
    1152:	51 e0       	ldi	r21, 0x01	; 1
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
    1154:	60 e0       	ldi	r22, 0x00	; 0
	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
    1156:	77 e0       	ldi	r23, 0x07	; 7
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
    1158:	e4 e0       	ldi	r30, 0x04	; 4
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	dc 01       	movw	r26, r24
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd4>
    1162:	aa 0f       	add	r26, r26
    1164:	bb 1f       	adc	r27, r27
    1166:	ea 95       	dec	r30
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd0>
    116a:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
	else
		_rw = 0; // no r/w control
    116c:	1b a2       	std	Y+35, r1	; 0x23

	_en = ( 1 << en );
    116e:	fc 01       	movw	r30, r24
    1170:	01 c0       	rjmp	.+2      	; 0x1174 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe2>
    1172:	ee 0f       	add	r30, r30
    1174:	7a 95       	dec	r23
    1176:	ea f7       	brpl	.-6      	; 0x1172 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe0>
    1178:	ec a3       	std	Y+36, r30	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
    117a:	fc 01       	movw	r30, r24
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xf0>
    117e:	ee 0f       	add	r30, r30
    1180:	ff 1f       	adc	r31, r31
    1182:	6a 95       	dec	r22
    1184:	e2 f7       	brpl	.-8      	; 0x117e <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xec>
    1186:	ed a3       	std	Y+37, r30	; 0x25
	_d5 = ( 1 << d5 );
    1188:	bc 01       	movw	r22, r24
    118a:	01 c0       	rjmp	.+2      	; 0x118e <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfc>
    118c:	66 0f       	add	r22, r22
    118e:	5a 95       	dec	r21
    1190:	ea f7       	brpl	.-6      	; 0x118c <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfa>
    1192:	6e a3       	std	Y+38, r22	; 0x26
	_d6 = ( 1 << d6 );
    1194:	bc 01       	movw	r22, r24
    1196:	02 c0       	rjmp	.+4      	; 0x119c <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x10a>
    1198:	66 0f       	add	r22, r22
    119a:	77 1f       	adc	r23, r23
    119c:	4a 95       	dec	r20
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x106>
    11a0:	6f a3       	std	Y+39, r22	; 0x27
	_d7 = ( 1 << d7 );   
    11a2:	ac 01       	movw	r20, r24
    11a4:	01 c0       	rjmp	.+2      	; 0x11a8 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x116>
    11a6:	44 0f       	add	r20, r20
    11a8:	3a 95       	dec	r19
    11aa:	ea f7       	brpl	.-6      	; 0x11a6 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x114>
    11ac:	48 a7       	std	Y+40, r20	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
    11ae:	01 c0       	rjmp	.+2      	; 0x11b2 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x120>
    11b0:	88 0f       	add	r24, r24
    11b2:	2a 95       	dec	r18
    11b4:	ea f7       	brpl	.-6      	; 0x11b0 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x11e>
    11b6:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
    11b8:	91 e0       	ldi	r25, 0x01	; 1
    11ba:	9a a7       	std	Y+42, r25	; 0x2a
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
		_blCurState = _bl;
    11bc:	8b a7       	std	Y+43, r24	; 0x2b
		// could not identify board
		return(hd44780::RV_ENOTSUP);
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x136>

	}
	else
	{
		// could not identify board
		return(hd44780::RV_ENOTSUP);
    11c4:	8d ef       	ldi	r24, 0xFD	; 253
    11c6:	9f ef       	ldi	r25, 0xFF	; 255
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	08 95       	ret

000011ce <_ZN14hd44780_I2Cexp6ioinitEv>:
// Returns non zero if initialization failed.
//
// can't be used from constructors because not everything is initalized yet.
// (maybe interrupts or other library constructors)
// if Wire library is used in constructor, it will hang.
int ioinit()
    11ce:	1f 93       	push	r17
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	ec 01       	movw	r28, r24
	 * I believe that it is unreasonable to require the the user
	 * sketch code to do it, because all that should change between
	 * hd44780 i/o interfaces should be the constructor
	 * So we go ahead and call it here.
	 */
	Wire.begin();
    11d6:	89 e8       	ldi	r24, 0x89	; 137
    11d8:	93 e0       	ldi	r25, 0x03	; 3
    11da:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <_ZN7TwoWire5beginEv>

	// auto locate i2c expander and magically detect pin mappings

	if(!_addr) // locate next instance
    11de:	68 a1       	ldd	r22, Y+32	; 0x20
    11e0:	61 11       	cpse	r22, r1
    11e2:	0a c0       	rjmp	.+20     	; 0x11f8 <_ZN14hd44780_I2Cexp6ioinitEv+0x2a>
	{
		_addr = LocateDevice(AutoInst++);
    11e4:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    11e8:	91 e0       	ldi	r25, 0x01	; 1
    11ea:	98 0f       	add	r25, r24
    11ec:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    11f0:	0e 94 9f 01 	call	0x33e	; 0x33e <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
    11f4:	88 a3       	std	Y+32, r24	; 0x20
    11f6:	0d c0       	rjmp	.+26     	; 0x1212 <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
	}
	else
	{
		// check to see if device at specified address is really there
		Wire.beginTransmission(_addr);
    11f8:	89 e8       	ldi	r24, 0x89	; 137
    11fa:	93 e0       	ldi	r25, 0x03	; 3
    11fc:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN7TwoWire17beginTransmissionEh>
		if(Wire.endTransmission())
    1200:	89 e8       	ldi	r24, 0x89	; 137
    1202:	93 e0       	ldi	r25, 0x03	; 3
    1204:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN7TwoWire15endTransmissionEv>
    1208:	88 23       	and	r24, r24
    120a:	19 f0       	breq	.+6      	; 0x1212 <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
			return(hd44780::RV_ENXIO);
    120c:	8c ef       	ldi	r24, 0xFC	; 252
    120e:	9f ef       	ldi	r25, 0xFF	; 255
    1210:	a7 c0       	rjmp	.+334    	; 0x1360 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	}

	if(!_addr) // locate next instance
    1212:	88 a1       	ldd	r24, Y+32	; 0x20
    1214:	81 11       	cpse	r24, r1
    1216:	09 c0       	rjmp	.+18     	; 0x122a <_ZN14hd44780_I2Cexp6ioinitEv+0x5c>
		_addr = LocateDevice(AutoInst++);
    1218:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    121c:	91 e0       	ldi	r25, 0x01	; 1
    121e:	98 0f       	add	r25, r24
    1220:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    1224:	0e 94 9f 01 	call	0x33e	; 0x33e <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
    1228:	88 a3       	std	Y+32, r24	; 0x20

	if(!_addr) // if we couldn't locate it, return error
    122a:	18 a1       	ldd	r17, Y+32	; 0x20
    122c:	11 23       	and	r17, r17
    122e:	71 f3       	breq	.-36     	; 0x120c <_ZN14hd44780_I2Cexp6ioinitEv+0x3e>
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
    1230:	89 a1       	ldd	r24, Y+33	; 0x21
    1232:	88 23       	and	r24, r24
    1234:	c1 f1       	breq	.+112    	; 0x12a6 <_ZN14hd44780_I2Cexp6ioinitEv+0xd8>
			return(status);
	}

	// initialize IO expander chip

	Wire.beginTransmission(_addr);
    1236:	68 a1       	ldd	r22, Y+32	; 0x20
    1238:	89 e8       	ldi	r24, 0x89	; 137
    123a:	93 e0       	ldi	r25, 0x03	; 3
    123c:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN7TwoWire17beginTransmissionEh>

	if(_expType == I2Cexp_MCP23008)
    1240:	89 a1       	ldd	r24, Y+33	; 0x21
    1242:	82 30       	cpi	r24, 0x02	; 2
    1244:	09 f0       	breq	.+2      	; 0x1248 <_ZN14hd44780_I2Cexp6ioinitEv+0x7a>
    1246:	76 c0       	rjmp	.+236    	; 0x1334 <_ZN14hd44780_I2Cexp6ioinitEv+0x166>
		 * within the same i2c connection by simply sending more bytes.
		 * This is necessary as the code uses back to back writes to perform
		 * the nibble updates as well as the toggling the enable signal.
		 * This methodology offers significant performance gains.
		 */
		Wire.write(5);	// point to IOCON
    1248:	65 e0       	ldi	r22, 0x05	; 5
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	89 e8       	ldi	r24, 0x89	; 137
    124e:	93 e0       	ldi	r25, 0x03	; 3
    1250:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7TwoWire5writeEi>
		Wire.write(0x20);// disable sequential mode (enables BYTE mode)
    1254:	60 e2       	ldi	r22, 0x20	; 32
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	89 e8       	ldi	r24, 0x89	; 137
    125a:	93 e0       	ldi	r25, 0x03	; 3
    125c:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    1260:	89 e8       	ldi	r24, 0x89	; 137
    1262:	93 e0       	ldi	r25, 0x03	; 3
    1264:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN7TwoWire15endTransmissionEv>

		/*
		 * Now set up output port
		 */
		Wire.beginTransmission(_addr);
    1268:	68 a1       	ldd	r22, Y+32	; 0x20
    126a:	89 e8       	ldi	r24, 0x89	; 137
    126c:	93 e0       	ldi	r25, 0x03	; 3
    126e:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t)0); // point to IODIR
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	89 e8       	ldi	r24, 0x89	; 137
    1276:	93 e0       	ldi	r25, 0x03	; 3
    1278:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <_ZN7TwoWire5writeEh>
		Wire.write((uint8_t)0); // all pins output
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	89 e8       	ldi	r24, 0x89	; 137
    1280:	93 e0       	ldi	r25, 0x03	; 3
    1282:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    1286:	89 e8       	ldi	r24, 0x89	; 137
    1288:	93 e0       	ldi	r25, 0x03	; 3
    128a:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN7TwoWire15endTransmissionEv>
	
		/*
		 * point chip to GPIO
		 */
		Wire.beginTransmission(_addr);
    128e:	68 a1       	ldd	r22, Y+32	; 0x20
    1290:	89 e8       	ldi	r24, 0x89	; 137
    1292:	93 e0       	ldi	r25, 0x03	; 3
    1294:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write(9); // point to GPIO
    1298:	69 e0       	ldi	r22, 0x09	; 9
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	89 e8       	ldi	r24, 0x89	; 137
    129e:	93 e0       	ldi	r25, 0x03	; 3
    12a0:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7TwoWire5writeEi>
    12a4:	47 c0       	rjmp	.+142    	; 0x1334 <_ZN14hd44780_I2Cexp6ioinitEv+0x166>

	/*
	 * First try to write 0xff to MCP23008 IODIR
	 * On a PCF8574 this will end up writing 0 and then ff to output port
	 */
	Wire.beginTransmission(address);
    12a6:	61 2f       	mov	r22, r17
    12a8:	89 e8       	ldi	r24, 0x89	; 137
    12aa:	93 e0       	ldi	r25, 0x03	; 3
    12ac:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
    12b0:	60 e0       	ldi	r22, 0x00	; 0
    12b2:	89 e8       	ldi	r24, 0x89	; 137
    12b4:	93 e0       	ldi	r25, 0x03	; 3
    12b6:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <_ZN7TwoWire5writeEh>
	Wire.write((uint8_t) 0xff);	// try to write to MCP23008 IODR
    12ba:	6f ef       	ldi	r22, 0xFF	; 255
    12bc:	89 e8       	ldi	r24, 0x89	; 137
    12be:	93 e0       	ldi	r25, 0x03	; 3
    12c0:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    12c4:	89 e8       	ldi	r24, 0x89	; 137
    12c6:	93 e0       	ldi	r25, 0x03	; 3
    12c8:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now try to point MCP23008 to IODIR for read
	 * On a PCF8574 this will end up writing a 0 to the output port
	 */

	Wire.beginTransmission(address);
    12cc:	61 2f       	mov	r22, r17
    12ce:	89 e8       	ldi	r24, 0x89	; 137
    12d0:	93 e0       	ldi	r25, 0x03	; 3
    12d2:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
    12d6:	60 e0       	ldi	r22, 0x00	; 0
    12d8:	89 e8       	ldi	r24, 0x89	; 137
    12da:	93 e0       	ldi	r25, 0x03	; 3
    12dc:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    12e0:	89 e8       	ldi	r24, 0x89	; 137
    12e2:	93 e0       	ldi	r25, 0x03	; 3
    12e4:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now read a byte
	 * On a MCP23008 we should read the 0xff we wrote to IODIR
	 * On a PCF8574 we should read 0 since the output port was set to 0
	 */
	Wire.requestFrom((int)address, 1);
    12e8:	61 2f       	mov	r22, r17
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	41 e0       	ldi	r20, 0x01	; 1
    12ee:	50 e0       	ldi	r21, 0x00	; 0
    12f0:	89 e8       	ldi	r24, 0x89	; 137
    12f2:	93 e0       	ldi	r25, 0x03	; 3
    12f4:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    12f8:	89 e8       	ldi	r24, 0x89	; 137
    12fa:	93 e0       	ldi	r25, 0x03	; 3
    12fc:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN7TwoWire4readEv>
    1300:	9c 01       	movw	r18, r24

	if(data == 0xff)
    1302:	8f 3f       	cpi	r24, 0xFF	; 255
    1304:	91 05       	cpc	r25, r1
    1306:	29 f0       	breq	.+10     	; 0x1312 <_ZN14hd44780_I2Cexp6ioinitEv+0x144>
	{
		chiptype = I2Cexp_MCP23008;
    1308:	91 e0       	ldi	r25, 0x01	; 1
    130a:	23 2b       	or	r18, r19
    130c:	19 f0       	breq	.+6      	; 0x1314 <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	01 c0       	rjmp	.+2      	; 0x1314 <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    1312:	92 e0       	ldi	r25, 0x02	; 2
	if(!_addr) // if we couldn't locate it, return error
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);
    1314:	99 a3       	std	Y+33, r25	; 0x21

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
    1316:	99 23       	and	r25, r25
    1318:	09 f1       	breq	.+66     	; 0x135c <_ZN14hd44780_I2Cexp6ioinitEv+0x18e>
			return(hd44780::RV_EIO);

		if(_expType == I2Cexp_PCF8574)
    131a:	91 30       	cpi	r25, 0x01	; 1
    131c:	21 f4       	brne	.+8      	; 0x1326 <_ZN14hd44780_I2Cexp6ioinitEv+0x158>
			status = autocfg8574();		// go auto configure the pin mappings
    131e:	ce 01       	movw	r24, r28
    1320:	0e 94 7d 07 	call	0xefa	; 0xefa <_ZN14hd44780_I2Cexp11autocfg8574Ev>
    1324:	03 c0       	rjmp	.+6      	; 0x132c <_ZN14hd44780_I2Cexp6ioinitEv+0x15e>
		else
			status = autocfgMCP23008();	// go auto configure the pin mappings
    1326:	ce 01       	movw	r24, r28
    1328:	0e 94 49 08 	call	0x1092	; 0x1092 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>
		if(status)
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	09 f4       	brne	.+2      	; 0x1332 <_ZN14hd44780_I2Cexp6ioinitEv+0x164>
    1330:	82 cf       	rjmp	.-252    	; 0x1236 <_ZN14hd44780_I2Cexp6ioinitEv+0x68>
    1332:	16 c0       	rjmp	.+44     	; 0x1360 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
		 */
		Wire.beginTransmission(_addr);
		Wire.write(9); // point to GPIO
		
	}
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
    1334:	60 e0       	ldi	r22, 0x00	; 0
    1336:	89 e8       	ldi	r24, 0x89	; 137
    1338:	93 e0       	ldi	r25, 0x03	; 3
    133a:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <_ZN7TwoWire5writeEh>
	if( (status = Wire.endTransmission()) ) // assignment
    133e:	89 e8       	ldi	r24, 0x89	; 137
    1340:	93 e0       	ldi	r25, 0x03	; 3
    1342:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN7TwoWire15endTransmissionEv>
    1346:	21 e0       	ldi	r18, 0x01	; 1
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 11       	cpse	r24, r1
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <_ZN14hd44780_I2Cexp6ioinitEv+0x184>
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	88 27       	eor	r24, r24
    1354:	99 27       	eor	r25, r25
    1356:	82 1b       	sub	r24, r18
    1358:	93 0b       	sbc	r25, r19
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
			return(hd44780::RV_EIO);
    135c:	8f ef       	ldi	r24, 0xFF	; 255
    135e:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
	if( (status = Wire.endTransmission()) ) // assignment
		status = hd44780::RV_EIO;

	return ( status );
}
    1360:	df 91       	pop	r29
    1362:	cf 91       	pop	r28
    1364:	1f 91       	pop	r17
    1366:	08 95       	ret

00001368 <_ZN7hd447806ioinitEv>:
	{
		buf[i] = pgm_read_byte(charmap++);
	}
	// call the RAM based function to actually send it to the LCD
	return(createChar(location, buf));
}
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	08 95       	ret

0000136e <_ZN7hd447806ioreadENS_6iotypeE>:
    136e:	8d ef       	ldi	r24, 0xFD	; 253
    1370:	9f ef       	ldi	r25, 0xFF	; 255
    1372:	08 95       	ret

00001374 <_ZN7hd4478014iosetBacklightEh>:
    1374:	8d ef       	ldi	r24, 0xFD	; 253
    1376:	9f ef       	ldi	r25, 0xFF	; 255
    1378:	08 95       	ret

0000137a <_ZN7hd44780C1Ev>:
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	ec 01       	movw	r28, r24
    1380:	1b 82       	std	Y+3, r1	; 0x03
    1382:	1a 82       	std	Y+2, r1	; 0x02
    1384:	88 e0       	ldi	r24, 0x08	; 8
    1386:	92 e0       	ldi	r25, 0x02	; 2
    1388:	99 83       	std	Y+1, r25	; 0x01
    138a:	88 83       	st	Y, r24
    138c:	1f 82       	std	Y+7, r1	; 0x07
    138e:	18 86       	std	Y+8, r1	; 0x08
    1390:	80 ed       	ldi	r24, 0xD0	; 208
    1392:	97 e0       	ldi	r25, 0x07	; 7
    1394:	a0 e0       	ldi	r26, 0x00	; 0
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	88 8b       	std	Y+16, r24	; 0x10
    139a:	99 8b       	std	Y+17, r25	; 0x11
    139c:	aa 8b       	std	Y+18, r26	; 0x12
    139e:	bb 8b       	std	Y+19, r27	; 0x13
    13a0:	86 e2       	ldi	r24, 0x26	; 38
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	a0 e0       	ldi	r26, 0x00	; 0
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	8c 8b       	std	Y+20, r24	; 0x14
    13aa:	9d 8b       	std	Y+21, r25	; 0x15
    13ac:	ae 8b       	std	Y+22, r26	; 0x16
    13ae:	bf 8b       	std	Y+23, r27	; 0x17
    13b0:	1c 86       	std	Y+12, r1	; 0x0c
    13b2:	1d 86       	std	Y+13, r1	; 0x0d
    13b4:	1e 86       	std	Y+14, r1	; 0x0e
    13b6:	1f 86       	std	Y+15, r1	; 0x0f
    13b8:	1b 86       	std	Y+11, r1	; 0x0b
    13ba:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <micros>
    13be:	68 8f       	std	Y+24, r22	; 0x18
    13c0:	79 8f       	std	Y+25, r23	; 0x19
    13c2:	8a 8f       	std	Y+26, r24	; 0x1a
    13c4:	9b 8f       	std	Y+27, r25	; 0x1b
    13c6:	1c 8e       	std	Y+28, r1	; 0x1c
    13c8:	1d 8e       	std	Y+29, r1	; 0x1d
    13ca:	1e 8e       	std	Y+30, r1	; 0x1e
    13cc:	1f 8e       	std	Y+31, r1	; 0x1f
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	08 95       	ret

000013d4 <_ZN7hd447809backlightEv>:
    13d4:	dc 01       	movw	r26, r24
    13d6:	ed 91       	ld	r30, X+
    13d8:	fc 91       	ld	r31, X
    13da:	06 84       	ldd	r0, Z+14	; 0x0e
    13dc:	f7 85       	ldd	r31, Z+15	; 0x0f
    13de:	e0 2d       	mov	r30, r0
    13e0:	6f ef       	ldi	r22, 0xFF	; 255
    13e2:	09 94       	ijmp

000013e4 <_ZN7hd4478011noBacklightEv>:
    13e4:	dc 01       	movw	r26, r24
    13e6:	ed 91       	ld	r30, X+
    13e8:	fc 91       	ld	r31, X
    13ea:	06 84       	ldd	r0, Z+14	; 0x0e
    13ec:	f7 85       	ldd	r31, Z+15	; 0x0f
    13ee:	e0 2d       	mov	r30, r0
    13f0:	60 e0       	ldi	r22, 0x00	; 0
    13f2:	09 94       	ijmp

000013f4 <_ZN7hd447807commandEh>:
    13f4:	8f 92       	push	r8
    13f6:	9f 92       	push	r9
    13f8:	af 92       	push	r10
    13fa:	bf 92       	push	r11
    13fc:	ef 92       	push	r14
    13fe:	ff 92       	push	r15
    1400:	1f 93       	push	r17
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	ec 01       	movw	r28, r24
    1408:	16 2f       	mov	r17, r22
    140a:	e8 81       	ld	r30, Y
    140c:	f9 81       	ldd	r31, Y+1	; 0x01
    140e:	04 84       	ldd	r0, Z+12	; 0x0c
    1410:	f5 85       	ldd	r31, Z+13	; 0x0d
    1412:	e0 2d       	mov	r30, r0
    1414:	46 2f       	mov	r20, r22
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	09 95       	icall
    141a:	7c 01       	movw	r14, r24
    141c:	11 50       	subi	r17, 0x01	; 1
    141e:	12 30       	cpi	r17, 0x02	; 2
    1420:	38 f4       	brcc	.+14     	; 0x1430 <_ZN7hd447807commandEh+0x3c>
    1422:	19 86       	std	Y+9, r1	; 0x09
    1424:	1a 86       	std	Y+10, r1	; 0x0a
    1426:	88 88       	ldd	r8, Y+16	; 0x10
    1428:	99 88       	ldd	r9, Y+17	; 0x11
    142a:	aa 88       	ldd	r10, Y+18	; 0x12
    142c:	bb 88       	ldd	r11, Y+19	; 0x13
    142e:	04 c0       	rjmp	.+8      	; 0x1438 <_ZN7hd447807commandEh+0x44>
    1430:	8c 88       	ldd	r8, Y+20	; 0x14
    1432:	9d 88       	ldd	r9, Y+21	; 0x15
    1434:	ae 88       	ldd	r10, Y+22	; 0x16
    1436:	bf 88       	ldd	r11, Y+23	; 0x17
    1438:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <micros>
    143c:	68 8f       	std	Y+24, r22	; 0x18
    143e:	79 8f       	std	Y+25, r23	; 0x19
    1440:	8a 8f       	std	Y+26, r24	; 0x1a
    1442:	9b 8f       	std	Y+27, r25	; 0x1b
    1444:	8c 8e       	std	Y+28, r8	; 0x1c
    1446:	9d 8e       	std	Y+29, r9	; 0x1d
    1448:	ae 8e       	std	Y+30, r10	; 0x1e
    144a:	bf 8e       	std	Y+31, r11	; 0x1f
    144c:	c7 01       	movw	r24, r14
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	1f 91       	pop	r17
    1454:	ff 90       	pop	r15
    1456:	ef 90       	pop	r14
    1458:	bf 90       	pop	r11
    145a:	af 90       	pop	r10
    145c:	9f 90       	pop	r9
    145e:	8f 90       	pop	r8
    1460:	08 95       	ret

00001462 <_ZN7hd447805clearEv>:
    1462:	61 e0       	ldi	r22, 0x01	; 1
    1464:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <_ZN7hd447807commandEh>

00001468 <_ZN7hd447804homeEv>:
    1468:	62 e0       	ldi	r22, 0x02	; 2
    146a:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <_ZN7hd447807commandEh>

0000146e <_ZN7hd447809setCursorEhh>:
    146e:	fc 01       	movw	r30, r24
    1470:	80 85       	ldd	r24, Z+8	; 0x08
    1472:	48 17       	cp	r20, r24
    1474:	10 f0       	brcs	.+4      	; 0x147a <_ZN7hd447809setCursorEhh+0xc>
    1476:	4f ef       	ldi	r20, 0xFF	; 255
    1478:	48 0f       	add	r20, r24
    147a:	93 85       	ldd	r25, Z+11	; 0x0b
    147c:	99 23       	and	r25, r25
    147e:	59 f0       	breq	.+22     	; 0x1496 <_ZN7hd447809setCursorEhh+0x28>
    1480:	97 81       	ldd	r25, Z+7	; 0x07
    1482:	69 17       	cp	r22, r25
    1484:	30 f0       	brcs	.+12     	; 0x1492 <_ZN7hd447809setCursorEhh+0x24>
    1486:	69 1b       	sub	r22, r25
    1488:	4f 5f       	subi	r20, 0xFF	; 255
    148a:	48 17       	cp	r20, r24
    148c:	d0 f3       	brcs	.-12     	; 0x1482 <_ZN7hd447809setCursorEhh+0x14>
    148e:	40 e0       	ldi	r20, 0x00	; 0
    1490:	f8 cf       	rjmp	.-16     	; 0x1482 <_ZN7hd447809setCursorEhh+0x14>
    1492:	61 87       	std	Z+9, r22	; 0x09
    1494:	42 87       	std	Z+10, r20	; 0x0a
    1496:	df 01       	movw	r26, r30
    1498:	a4 0f       	add	r26, r20
    149a:	b1 1d       	adc	r27, r1
    149c:	1c 96       	adiw	r26, 0x0c	; 12
    149e:	8c 91       	ld	r24, X
    14a0:	68 0f       	add	r22, r24
    14a2:	60 68       	ori	r22, 0x80	; 128
    14a4:	cf 01       	movw	r24, r30
    14a6:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <_ZN7hd447807commandEh>

000014aa <_ZN7hd447807displayEv>:
    14aa:	fc 01       	movw	r30, r24
    14ac:	65 81       	ldd	r22, Z+5	; 0x05
    14ae:	26 2f       	mov	r18, r22
    14b0:	24 60       	ori	r18, 0x04	; 4
    14b2:	25 83       	std	Z+5, r18	; 0x05
    14b4:	6c 60       	ori	r22, 0x0C	; 12
    14b6:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <_ZN7hd447807commandEh>

000014ba <_ZN7hd447805beginEhhh>:
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	ec 01       	movw	r28, r24
    14c4:	02 2f       	mov	r16, r18
    14c6:	14 2f       	mov	r17, r20
    14c8:	45 30       	cpi	r20, 0x05	; 5
    14ca:	08 f0       	brcs	.+2      	; 0x14ce <_ZN7hd447805beginEhhh+0x14>
    14cc:	14 e0       	ldi	r17, 0x04	; 4
    14ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    14d0:	81 11       	cpse	r24, r1
    14d2:	09 c0       	rjmp	.+18     	; 0x14e6 <_ZN7hd447805beginEhhh+0x2c>
    14d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d6:	81 11       	cpse	r24, r1
    14d8:	06 c0       	rjmp	.+12     	; 0x14e6 <_ZN7hd447805beginEhhh+0x2c>
    14da:	8e 85       	ldd	r24, Y+14	; 0x0e
    14dc:	81 11       	cpse	r24, r1
    14de:	03 c0       	rjmp	.+6      	; 0x14e6 <_ZN7hd447805beginEhhh+0x2c>
    14e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    14e2:	88 23       	and	r24, r24
    14e4:	29 f0       	breq	.+10     	; 0x14f0 <_ZN7hd447805beginEhhh+0x36>
    14e6:	8f 81       	ldd	r24, Y+7	; 0x07
    14e8:	88 23       	and	r24, r24
    14ea:	59 f0       	breq	.+22     	; 0x1502 <_ZN7hd447805beginEhhh+0x48>
    14ec:	86 17       	cp	r24, r22
    14ee:	49 f0       	breq	.+18     	; 0x1502 <_ZN7hd447805beginEhhh+0x48>
    14f0:	1c 86       	std	Y+12, r1	; 0x0c
    14f2:	80 e4       	ldi	r24, 0x40	; 64
    14f4:	8d 87       	std	Y+13, r24	; 0x0d
    14f6:	6e 87       	std	Y+14, r22	; 0x0e
    14f8:	86 2f       	mov	r24, r22
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	80 5c       	subi	r24, 0xC0	; 192
    14fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1500:	8f 87       	std	Y+15, r24	; 0x0f
    1502:	18 87       	std	Y+8, r17	; 0x08
    1504:	6f 83       	std	Y+7, r22	; 0x07
    1506:	64 e6       	ldi	r22, 0x64	; 100
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <delay>
    1512:	1c 82       	std	Y+4, r1	; 0x04
    1514:	e8 81       	ld	r30, Y
    1516:	f9 81       	ldd	r31, Y+1	; 0x01
    1518:	00 84       	ldd	r0, Z+8	; 0x08
    151a:	f1 85       	ldd	r31, Z+9	; 0x09
    151c:	e0 2d       	mov	r30, r0
    151e:	ce 01       	movw	r24, r28
    1520:	09 95       	icall
    1522:	00 97       	sbiw	r24, 0x00	; 0
    1524:	09 f0       	breq	.+2      	; 0x1528 <_ZN7hd447805beginEhhh+0x6e>
    1526:	5e c0       	rjmp	.+188    	; 0x15e4 <_ZN7hd447805beginEhhh+0x12a>
    1528:	88 85       	ldd	r24, Y+8	; 0x08
    152a:	82 30       	cpi	r24, 0x02	; 2
    152c:	18 f0       	brcs	.+6      	; 0x1534 <_ZN7hd447805beginEhhh+0x7a>
    152e:	8c 81       	ldd	r24, Y+4	; 0x04
    1530:	88 60       	ori	r24, 0x08	; 8
    1532:	8c 83       	std	Y+4, r24	; 0x04
    1534:	00 23       	and	r16, r16
    1536:	29 f0       	breq	.+10     	; 0x1542 <_ZN7hd447805beginEhhh+0x88>
    1538:	11 30       	cpi	r17, 0x01	; 1
    153a:	19 f4       	brne	.+6      	; 0x1542 <_ZN7hd447805beginEhhh+0x88>
    153c:	8c 81       	ldd	r24, Y+4	; 0x04
    153e:	84 60       	ori	r24, 0x04	; 4
    1540:	8c 83       	std	Y+4, r24	; 0x04
    1542:	e8 81       	ld	r30, Y
    1544:	f9 81       	ldd	r31, Y+1	; 0x01
    1546:	04 84       	ldd	r0, Z+12	; 0x0c
    1548:	f5 85       	ldd	r31, Z+13	; 0x0d
    154a:	e0 2d       	mov	r30, r0
    154c:	40 e3       	ldi	r20, 0x30	; 48
    154e:	62 e0       	ldi	r22, 0x02	; 2
    1550:	ce 01       	movw	r24, r28
    1552:	09 95       	icall
    1554:	65 e0       	ldi	r22, 0x05	; 5
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <delay>
    1560:	e8 81       	ld	r30, Y
    1562:	f9 81       	ldd	r31, Y+1	; 0x01
    1564:	04 84       	ldd	r0, Z+12	; 0x0c
    1566:	f5 85       	ldd	r31, Z+13	; 0x0d
    1568:	e0 2d       	mov	r30, r0
    156a:	40 e3       	ldi	r20, 0x30	; 48
    156c:	62 e0       	ldi	r22, 0x02	; 2
    156e:	ce 01       	movw	r24, r28
    1570:	09 95       	icall
    1572:	61 e0       	ldi	r22, 0x01	; 1
    1574:	70 e0       	ldi	r23, 0x00	; 0
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <delay>
    157e:	e8 81       	ld	r30, Y
    1580:	f9 81       	ldd	r31, Y+1	; 0x01
    1582:	04 84       	ldd	r0, Z+12	; 0x0c
    1584:	f5 85       	ldd	r31, Z+13	; 0x0d
    1586:	e0 2d       	mov	r30, r0
    1588:	40 e3       	ldi	r20, 0x30	; 48
    158a:	62 e0       	ldi	r22, 0x02	; 2
    158c:	ce 01       	movw	r24, r28
    158e:	09 95       	icall
    1590:	61 e0       	ldi	r22, 0x01	; 1
    1592:	70 e0       	ldi	r23, 0x00	; 0
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <delay>
    159c:	8c 81       	ldd	r24, Y+4	; 0x04
    159e:	84 fd       	sbrc	r24, 4
    15a0:	09 c0       	rjmp	.+18     	; 0x15b4 <_ZN7hd447805beginEhhh+0xfa>
    15a2:	e8 81       	ld	r30, Y
    15a4:	f9 81       	ldd	r31, Y+1	; 0x01
    15a6:	04 84       	ldd	r0, Z+12	; 0x0c
    15a8:	f5 85       	ldd	r31, Z+13	; 0x0d
    15aa:	e0 2d       	mov	r30, r0
    15ac:	40 e2       	ldi	r20, 0x20	; 32
    15ae:	62 e0       	ldi	r22, 0x02	; 2
    15b0:	ce 01       	movw	r24, r28
    15b2:	09 95       	icall
    15b4:	6c 81       	ldd	r22, Y+4	; 0x04
    15b6:	60 62       	ori	r22, 0x20	; 32
    15b8:	ce 01       	movw	r24, r28
    15ba:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <_ZN7hd447807commandEh>
    15be:	84 e0       	ldi	r24, 0x04	; 4
    15c0:	8d 83       	std	Y+5, r24	; 0x05
    15c2:	ce 01       	movw	r24, r28
    15c4:	0e 94 55 0a 	call	0x14aa	; 0x14aa <_ZN7hd447807displayEv>
    15c8:	ce 01       	movw	r24, r28
    15ca:	0e 94 31 0a 	call	0x1462	; 0x1462 <_ZN7hd447805clearEv>
    15ce:	82 e0       	ldi	r24, 0x02	; 2
    15d0:	8e 83       	std	Y+6, r24	; 0x06
    15d2:	66 e0       	ldi	r22, 0x06	; 6
    15d4:	ce 01       	movw	r24, r28
    15d6:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <_ZN7hd447807commandEh>
    15da:	8c 01       	movw	r16, r24
    15dc:	ce 01       	movw	r24, r28
    15de:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <_ZN7hd447809backlightEv>
    15e2:	c8 01       	movw	r24, r16
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	1f 91       	pop	r17
    15ea:	0f 91       	pop	r16
    15ec:	08 95       	ret

000015ee <_ZN7hd447808noCursorEv>:
    15ee:	fc 01       	movw	r30, r24
    15f0:	65 81       	ldd	r22, Z+5	; 0x05
    15f2:	6d 7f       	andi	r22, 0xFD	; 253
    15f4:	65 83       	std	Z+5, r22	; 0x05
    15f6:	68 60       	ori	r22, 0x08	; 8
    15f8:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <_ZN7hd447807commandEh>

000015fc <_ZN7hd447807noBlinkEv>:
    15fc:	fc 01       	movw	r30, r24
    15fe:	65 81       	ldd	r22, Z+5	; 0x05
    1600:	6e 7f       	andi	r22, 0xFE	; 254
    1602:	65 83       	std	Z+5, r22	; 0x05
    1604:	68 60       	ori	r22, 0x08	; 8
    1606:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <_ZN7hd447807commandEh>

0000160a <_ZN7hd447806_writeEh>:
    160a:	cf 92       	push	r12
    160c:	df 92       	push	r13
    160e:	ef 92       	push	r14
    1610:	ff 92       	push	r15
    1612:	0f 93       	push	r16
    1614:	1f 93       	push	r17
    1616:	cf 93       	push	r28
    1618:	df 93       	push	r29
    161a:	ec 01       	movw	r28, r24
    161c:	46 2f       	mov	r20, r22
    161e:	e8 81       	ld	r30, Y
    1620:	f9 81       	ldd	r31, Y+1	; 0x01
    1622:	04 84       	ldd	r0, Z+12	; 0x0c
    1624:	f5 85       	ldd	r31, Z+13	; 0x0d
    1626:	e0 2d       	mov	r30, r0
    1628:	61 e0       	ldi	r22, 0x01	; 1
    162a:	09 95       	icall
    162c:	8c 01       	movw	r16, r24
    162e:	cc 88       	ldd	r12, Y+20	; 0x14
    1630:	dd 88       	ldd	r13, Y+21	; 0x15
    1632:	ee 88       	ldd	r14, Y+22	; 0x16
    1634:	ff 88       	ldd	r15, Y+23	; 0x17
    1636:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <micros>
    163a:	68 8f       	std	Y+24, r22	; 0x18
    163c:	79 8f       	std	Y+25, r23	; 0x19
    163e:	8a 8f       	std	Y+26, r24	; 0x1a
    1640:	9b 8f       	std	Y+27, r25	; 0x1b
    1642:	cc 8e       	std	Y+28, r12	; 0x1c
    1644:	dd 8e       	std	Y+29, r13	; 0x1d
    1646:	ee 8e       	std	Y+30, r14	; 0x1e
    1648:	ff 8e       	std	Y+31, r15	; 0x1f
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	01 2b       	or	r16, r17
    1650:	11 f0       	breq	.+4      	; 0x1656 <_ZN7hd447806_writeEh+0x4c>
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	df 91       	pop	r29
    1658:	cf 91       	pop	r28
    165a:	1f 91       	pop	r17
    165c:	0f 91       	pop	r16
    165e:	ff 90       	pop	r15
    1660:	ef 90       	pop	r14
    1662:	df 90       	pop	r13
    1664:	cf 90       	pop	r12
    1666:	08 95       	ret

00001668 <_ZN7hd447805writeEh>:

// write() - process data character byte to lcd
// returns number of bytes successfully written to device
// i.e. 1 if success or 0 if no character was processed (error)
size_t hd44780::write(uint8_t value)
{
    1668:	0f 93       	push	r16
    166a:	1f 93       	push	r17
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
    1670:	ec 01       	movw	r28, r24
size_t rval;

	rval = _write(value);
    1672:	0e 94 05 0b 	call	0x160a	; 0x160a <_ZN7hd447806_writeEh>
    1676:	8c 01       	movw	r16, r24
	if(_wraplines)
    1678:	8b 85       	ldd	r24, Y+11	; 0x0b
    167a:	88 23       	and	r24, r24
    167c:	99 f0       	breq	.+38     	; 0x16a4 <_ZN7hd447805writeEh+0x3c>
	{
		// currently only works for left to right mode
		if(++_curcol >= _cols)
    167e:	89 85       	ldd	r24, Y+9	; 0x09
    1680:	8f 5f       	subi	r24, 0xFF	; 255
    1682:	89 87       	std	Y+9, r24	; 0x09
    1684:	9f 81       	ldd	r25, Y+7	; 0x07
    1686:	89 17       	cp	r24, r25
    1688:	68 f0       	brcs	.+26     	; 0x16a4 <_ZN7hd447805writeEh+0x3c>
		{
			_curcol = 0;
    168a:	19 86       	std	Y+9, r1	; 0x09
			_currow++;
    168c:	8a 85       	ldd	r24, Y+10	; 0x0a
    168e:	8f 5f       	subi	r24, 0xFF	; 255
    1690:	8a 87       	std	Y+10, r24	; 0x0a
			if(_currow >= _rows)
    1692:	98 85       	ldd	r25, Y+8	; 0x08
    1694:	89 17       	cp	r24, r25
    1696:	08 f0       	brcs	.+2      	; 0x169a <_ZN7hd447805writeEh+0x32>
				_currow = 0;
    1698:	1a 86       	std	Y+10, r1	; 0x0a
			setCursor(_curcol, _currow);
    169a:	4a 85       	ldd	r20, Y+10	; 0x0a
    169c:	60 e0       	ldi	r22, 0x00	; 0
    169e:	ce 01       	movw	r24, r28
    16a0:	0e 94 37 0a 	call	0x146e	; 0x146e <_ZN7hd447809setCursorEhh>
		}
	}
	return (rval);
}
    16a4:	c8 01       	movw	r24, r16
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	1f 91       	pop	r17
    16ac:	0f 91       	pop	r16
    16ae:	08 95       	ret

000016b0 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    16b0:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <twi_state>
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <twi_sendStop>
    16ba:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <twi_inRepStart>
    16be:	61 e0       	ldi	r22, 0x01	; 1
    16c0:	82 e0       	ldi	r24, 0x02	; 2
    16c2:	0e 94 68 18 	call	0x30d0	; 0x30d0 <digitalWrite>
    16c6:	61 e0       	ldi	r22, 0x01	; 1
    16c8:	83 e0       	ldi	r24, 0x03	; 3
    16ca:	0e 94 68 18 	call	0x30d0	; 0x30d0 <digitalWrite>
    16ce:	e9 eb       	ldi	r30, 0xB9	; 185
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	8e 7f       	andi	r24, 0xFE	; 254
    16d6:	80 83       	st	Z, r24
    16d8:	80 81       	ld	r24, Z
    16da:	8d 7f       	andi	r24, 0xFD	; 253
    16dc:	80 83       	st	Z, r24
    16de:	88 e4       	ldi	r24, 0x48	; 72
    16e0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    16e4:	85 e4       	ldi	r24, 0x45	; 69
    16e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    16ea:	08 95       	ret

000016ec <twi_readFrom>:
    16ec:	41 32       	cpi	r20, 0x21	; 33
    16ee:	08 f0       	brcs	.+2      	; 0x16f2 <twi_readFrom+0x6>
    16f0:	43 c0       	rjmp	.+134    	; 0x1778 <twi_readFrom+0x8c>
    16f2:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <twi_state>
    16f6:	91 11       	cpse	r25, r1
    16f8:	fc cf       	rjmp	.-8      	; 0x16f2 <twi_readFrom+0x6>
    16fa:	91 e0       	ldi	r25, 0x01	; 1
    16fc:	90 93 88 03 	sts	0x0388, r25	; 0x800388 <twi_state>
    1700:	20 93 86 03 	sts	0x0386, r18	; 0x800386 <twi_sendStop>
    1704:	2f ef       	ldi	r18, 0xFF	; 255
    1706:	20 93 1b 03 	sts	0x031B, r18	; 0x80031b <twi_error>
    170a:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <twi_masterBufferIndex>
    170e:	24 0f       	add	r18, r20
    1710:	20 93 5f 03 	sts	0x035F, r18	; 0x80035f <twi_masterBufferLength>
    1714:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <twi_slarw>
    1718:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <twi_slarw>
    171c:	88 0f       	add	r24, r24
    171e:	89 2b       	or	r24, r25
    1720:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <twi_slarw>
    1724:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <twi_inRepStart>
    1728:	81 30       	cpi	r24, 0x01	; 1
    172a:	61 f4       	brne	.+24     	; 0x1744 <twi_readFrom+0x58>
    172c:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <twi_inRepStart>
    1730:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <twi_slarw>
    1734:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1738:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    173c:	83 fd       	sbrc	r24, 3
    173e:	f8 cf       	rjmp	.-16     	; 0x1730 <twi_readFrom+0x44>
    1740:	85 ec       	ldi	r24, 0xC5	; 197
    1742:	01 c0       	rjmp	.+2      	; 0x1746 <twi_readFrom+0x5a>
    1744:	85 ee       	ldi	r24, 0xE5	; 229
    1746:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    174a:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <twi_state>
    174e:	81 30       	cpi	r24, 0x01	; 1
    1750:	e1 f3       	breq	.-8      	; 0x174a <twi_readFrom+0x5e>
    1752:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <twi_masterBufferIndex>
    1756:	84 17       	cp	r24, r20
    1758:	10 f4       	brcc	.+4      	; 0x175e <twi_readFrom+0x72>
    175a:	40 91 60 03 	lds	r20, 0x0360	; 0x800360 <twi_masterBufferIndex>
    175e:	a1 e6       	ldi	r26, 0x61	; 97
    1760:	b3 e0       	ldi	r27, 0x03	; 3
    1762:	96 2f       	mov	r25, r22
    1764:	fb 01       	movw	r30, r22
    1766:	8e 2f       	mov	r24, r30
    1768:	89 1b       	sub	r24, r25
    176a:	84 17       	cp	r24, r20
    176c:	18 f4       	brcc	.+6      	; 0x1774 <twi_readFrom+0x88>
    176e:	8d 91       	ld	r24, X+
    1770:	81 93       	st	Z+, r24
    1772:	f9 cf       	rjmp	.-14     	; 0x1766 <twi_readFrom+0x7a>
    1774:	84 2f       	mov	r24, r20
    1776:	08 95       	ret
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	08 95       	ret

0000177c <twi_writeTo>:
    177c:	0f 93       	push	r16
    177e:	41 32       	cpi	r20, 0x21	; 33
    1780:	08 f0       	brcs	.+2      	; 0x1784 <twi_writeTo+0x8>
    1782:	4a c0       	rjmp	.+148    	; 0x1818 <twi_writeTo+0x9c>
    1784:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <twi_state>
    1788:	91 11       	cpse	r25, r1
    178a:	fc cf       	rjmp	.-8      	; 0x1784 <twi_writeTo+0x8>
    178c:	32 e0       	ldi	r19, 0x02	; 2
    178e:	30 93 88 03 	sts	0x0388, r19	; 0x800388 <twi_state>
    1792:	00 93 86 03 	sts	0x0386, r16	; 0x800386 <twi_sendStop>
    1796:	3f ef       	ldi	r19, 0xFF	; 255
    1798:	30 93 1b 03 	sts	0x031B, r19	; 0x80031b <twi_error>
    179c:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <twi_masterBufferIndex>
    17a0:	40 93 5f 03 	sts	0x035F, r20	; 0x80035f <twi_masterBufferLength>
    17a4:	56 2f       	mov	r21, r22
    17a6:	a1 e6       	ldi	r26, 0x61	; 97
    17a8:	b3 e0       	ldi	r27, 0x03	; 3
    17aa:	fb 01       	movw	r30, r22
    17ac:	3e 2f       	mov	r19, r30
    17ae:	35 1b       	sub	r19, r21
    17b0:	34 17       	cp	r19, r20
    17b2:	18 f4       	brcc	.+6      	; 0x17ba <twi_writeTo+0x3e>
    17b4:	31 91       	ld	r19, Z+
    17b6:	3d 93       	st	X+, r19
    17b8:	f9 cf       	rjmp	.-14     	; 0x17ac <twi_writeTo+0x30>
    17ba:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <twi_slarw>
    17be:	30 91 87 03 	lds	r19, 0x0387	; 0x800387 <twi_slarw>
    17c2:	88 0f       	add	r24, r24
    17c4:	83 2b       	or	r24, r19
    17c6:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <twi_slarw>
    17ca:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <twi_inRepStart>
    17ce:	81 30       	cpi	r24, 0x01	; 1
    17d0:	61 f4       	brne	.+24     	; 0x17ea <twi_writeTo+0x6e>
    17d2:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <twi_inRepStart>
    17d6:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <twi_slarw>
    17da:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    17de:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    17e2:	83 fd       	sbrc	r24, 3
    17e4:	f8 cf       	rjmp	.-16     	; 0x17d6 <twi_writeTo+0x5a>
    17e6:	85 ec       	ldi	r24, 0xC5	; 197
    17e8:	01 c0       	rjmp	.+2      	; 0x17ec <twi_writeTo+0x70>
    17ea:	85 ee       	ldi	r24, 0xE5	; 229
    17ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    17f0:	22 23       	and	r18, r18
    17f2:	21 f0       	breq	.+8      	; 0x17fc <twi_writeTo+0x80>
    17f4:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <twi_state>
    17f8:	82 30       	cpi	r24, 0x02	; 2
    17fa:	d1 f3       	breq	.-12     	; 0x17f0 <twi_writeTo+0x74>
    17fc:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <twi_error>
    1800:	8f 3f       	cpi	r24, 0xFF	; 255
    1802:	79 f0       	breq	.+30     	; 0x1822 <twi_writeTo+0xa6>
    1804:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <twi_error>
    1808:	80 32       	cpi	r24, 0x20	; 32
    180a:	41 f0       	breq	.+16     	; 0x181c <twi_writeTo+0xa0>
    180c:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <twi_error>
    1810:	80 33       	cpi	r24, 0x30	; 48
    1812:	31 f0       	breq	.+12     	; 0x1820 <twi_writeTo+0xa4>
    1814:	94 e0       	ldi	r25, 0x04	; 4
    1816:	05 c0       	rjmp	.+10     	; 0x1822 <twi_writeTo+0xa6>
    1818:	91 e0       	ldi	r25, 0x01	; 1
    181a:	03 c0       	rjmp	.+6      	; 0x1822 <twi_writeTo+0xa6>
    181c:	92 e0       	ldi	r25, 0x02	; 2
    181e:	01 c0       	rjmp	.+2      	; 0x1822 <twi_writeTo+0xa6>
    1820:	93 e0       	ldi	r25, 0x03	; 3
    1822:	89 2f       	mov	r24, r25
    1824:	0f 91       	pop	r16
    1826:	08 95       	ret

00001828 <twi_transmit>:
    1828:	40 91 3d 03 	lds	r20, 0x033D	; 0x80033d <twi_txBufferLength>
    182c:	26 2f       	mov	r18, r22
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	24 0f       	add	r18, r20
    1832:	31 1d       	adc	r19, r1
    1834:	21 32       	cpi	r18, 0x21	; 33
    1836:	31 05       	cpc	r19, r1
    1838:	dc f4       	brge	.+54     	; 0x1870 <twi_transmit+0x48>
    183a:	20 91 88 03 	lds	r18, 0x0388	; 0x800388 <twi_state>
    183e:	24 30       	cpi	r18, 0x04	; 4
    1840:	c9 f4       	brne	.+50     	; 0x1874 <twi_transmit+0x4c>
    1842:	fc 01       	movw	r30, r24
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	86 17       	cp	r24, r22
    184a:	58 f4       	brcc	.+22     	; 0x1862 <twi_transmit+0x3a>
    184c:	30 91 3d 03 	lds	r19, 0x033D	; 0x80033d <twi_txBufferLength>
    1850:	21 91       	ld	r18, Z+
    1852:	dc 01       	movw	r26, r24
    1854:	a1 5c       	subi	r26, 0xC1	; 193
    1856:	bc 4f       	sbci	r27, 0xFC	; 252
    1858:	a3 0f       	add	r26, r19
    185a:	b1 1d       	adc	r27, r1
    185c:	2c 93       	st	X, r18
    185e:	01 96       	adiw	r24, 0x01	; 1
    1860:	f3 cf       	rjmp	.-26     	; 0x1848 <twi_transmit+0x20>
    1862:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <twi_txBufferLength>
    1866:	68 0f       	add	r22, r24
    1868:	60 93 3d 03 	sts	0x033D, r22	; 0x80033d <twi_txBufferLength>
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	08 95       	ret
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	08 95       	ret
    1874:	82 e0       	ldi	r24, 0x02	; 2
    1876:	08 95       	ret

00001878 <twi_attachSlaveRxEvent>:
    1878:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <twi_onSlaveReceive+0x1>
    187c:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <twi_onSlaveReceive>
    1880:	08 95       	ret

00001882 <twi_attachSlaveTxEvent>:
    1882:	90 93 84 03 	sts	0x0384, r25	; 0x800384 <twi_onSlaveTransmit+0x1>
    1886:	80 93 83 03 	sts	0x0383, r24	; 0x800383 <twi_onSlaveTransmit>
    188a:	08 95       	ret

0000188c <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    188c:	85 ed       	ldi	r24, 0xD5	; 213
    188e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1892:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1896:	84 fd       	sbrc	r24, 4
    1898:	fc cf       	rjmp	.-8      	; 0x1892 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    189a:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <twi_state>
    189e:	08 95       	ret

000018a0 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    18a0:	85 ec       	ldi	r24, 0xC5	; 197
    18a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    18a6:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <twi_state>
    18aa:	08 95       	ret

000018ac <__vector_36>:
}

ISR(TWI_vect)
{
    18ac:	1f 92       	push	r1
    18ae:	0f 92       	push	r0
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	0f 92       	push	r0
    18b4:	11 24       	eor	r1, r1
    18b6:	2f 93       	push	r18
    18b8:	3f 93       	push	r19
    18ba:	4f 93       	push	r20
    18bc:	5f 93       	push	r21
    18be:	6f 93       	push	r22
    18c0:	7f 93       	push	r23
    18c2:	8f 93       	push	r24
    18c4:	9f 93       	push	r25
    18c6:	af 93       	push	r26
    18c8:	bf 93       	push	r27
    18ca:	ef 93       	push	r30
    18cc:	ff 93       	push	r31
  switch(TW_STATUS){
    18ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    18d2:	88 7f       	andi	r24, 0xF8	; 248
    18d4:	80 36       	cpi	r24, 0x60	; 96
    18d6:	09 f4       	brne	.+2      	; 0x18da <__vector_36+0x2e>
    18d8:	9e c0       	rjmp	.+316    	; 0x1a16 <__vector_36+0x16a>
    18da:	78 f5       	brcc	.+94     	; 0x193a <__vector_36+0x8e>
    18dc:	88 32       	cpi	r24, 0x28	; 40
    18de:	09 f4       	brne	.+2      	; 0x18e2 <__vector_36+0x36>
    18e0:	5d c0       	rjmp	.+186    	; 0x199c <__vector_36+0xf0>
    18e2:	90 f4       	brcc	.+36     	; 0x1908 <__vector_36+0x5c>
    18e4:	80 31       	cpi	r24, 0x10	; 16
    18e6:	09 f4       	brne	.+2      	; 0x18ea <__vector_36+0x3e>
    18e8:	56 c0       	rjmp	.+172    	; 0x1996 <__vector_36+0xea>
    18ea:	38 f4       	brcc	.+14     	; 0x18fa <__vector_36+0x4e>
    18ec:	88 23       	and	r24, r24
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <__vector_36+0x46>
    18f0:	f5 c0       	rjmp	.+490    	; 0x1adc <__vector_36+0x230>
    18f2:	88 30       	cpi	r24, 0x08	; 8
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <__vector_36+0x4c>
    18f6:	4f c0       	rjmp	.+158    	; 0x1996 <__vector_36+0xea>
    18f8:	f5 c0       	rjmp	.+490    	; 0x1ae4 <__vector_36+0x238>
    18fa:	88 31       	cpi	r24, 0x18	; 24
    18fc:	09 f4       	brne	.+2      	; 0x1900 <__vector_36+0x54>
    18fe:	4e c0       	rjmp	.+156    	; 0x199c <__vector_36+0xf0>
    1900:	80 32       	cpi	r24, 0x20	; 32
    1902:	09 f4       	brne	.+2      	; 0x1906 <__vector_36+0x5a>
    1904:	5f c0       	rjmp	.+190    	; 0x19c4 <__vector_36+0x118>
    1906:	ee c0       	rjmp	.+476    	; 0x1ae4 <__vector_36+0x238>
    1908:	80 34       	cpi	r24, 0x40	; 64
    190a:	09 f4       	brne	.+2      	; 0x190e <__vector_36+0x62>
    190c:	6a c0       	rjmp	.+212    	; 0x19e2 <__vector_36+0x136>
    190e:	58 f4       	brcc	.+22     	; 0x1926 <__vector_36+0x7a>
    1910:	80 33       	cpi	r24, 0x30	; 48
    1912:	09 f4       	brne	.+2      	; 0x1916 <__vector_36+0x6a>
    1914:	57 c0       	rjmp	.+174    	; 0x19c4 <__vector_36+0x118>
    1916:	88 33       	cpi	r24, 0x38	; 56
    1918:	09 f0       	breq	.+2      	; 0x191c <__vector_36+0x70>
    191a:	e4 c0       	rjmp	.+456    	; 0x1ae4 <__vector_36+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    191c:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <twi_error>
      twi_releaseBus();
    1920:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <twi_releaseBus>
      break;
    1924:	df c0       	rjmp	.+446    	; 0x1ae4 <__vector_36+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1926:	80 35       	cpi	r24, 0x50	; 80
    1928:	09 f4       	brne	.+2      	; 0x192c <__vector_36+0x80>
    192a:	4f c0       	rjmp	.+158    	; 0x19ca <__vector_36+0x11e>
    192c:	88 35       	cpi	r24, 0x58	; 88
    192e:	09 f4       	brne	.+2      	; 0x1932 <__vector_36+0x86>
    1930:	5d c0       	rjmp	.+186    	; 0x19ec <__vector_36+0x140>
    1932:	88 34       	cpi	r24, 0x48	; 72
    1934:	09 f0       	breq	.+2      	; 0x1938 <__vector_36+0x8c>
    1936:	d6 c0       	rjmp	.+428    	; 0x1ae4 <__vector_36+0x238>
    1938:	d3 c0       	rjmp	.+422    	; 0x1ae0 <__vector_36+0x234>
    193a:	88 39       	cpi	r24, 0x98	; 152
    193c:	09 f4       	brne	.+2      	; 0x1940 <__vector_36+0x94>
    193e:	c4 c0       	rjmp	.+392    	; 0x1ac8 <__vector_36+0x21c>
    1940:	a8 f4       	brcc	.+42     	; 0x196c <__vector_36+0xc0>
    1942:	88 37       	cpi	r24, 0x78	; 120
    1944:	09 f4       	brne	.+2      	; 0x1948 <__vector_36+0x9c>
    1946:	67 c0       	rjmp	.+206    	; 0x1a16 <__vector_36+0x16a>
    1948:	38 f4       	brcc	.+14     	; 0x1958 <__vector_36+0xac>
    194a:	88 36       	cpi	r24, 0x68	; 104
    194c:	09 f4       	brne	.+2      	; 0x1950 <__vector_36+0xa4>
    194e:	63 c0       	rjmp	.+198    	; 0x1a16 <__vector_36+0x16a>
    1950:	80 37       	cpi	r24, 0x70	; 112
    1952:	09 f4       	brne	.+2      	; 0x1956 <__vector_36+0xaa>
    1954:	60 c0       	rjmp	.+192    	; 0x1a16 <__vector_36+0x16a>
    1956:	c6 c0       	rjmp	.+396    	; 0x1ae4 <__vector_36+0x238>
    1958:	88 38       	cpi	r24, 0x88	; 136
    195a:	09 f4       	brne	.+2      	; 0x195e <__vector_36+0xb2>
    195c:	b5 c0       	rjmp	.+362    	; 0x1ac8 <__vector_36+0x21c>
    195e:	80 39       	cpi	r24, 0x90	; 144
    1960:	09 f4       	brne	.+2      	; 0x1964 <__vector_36+0xb8>
    1962:	5f c0       	rjmp	.+190    	; 0x1a22 <__vector_36+0x176>
    1964:	80 38       	cpi	r24, 0x80	; 128
    1966:	09 f0       	breq	.+2      	; 0x196a <__vector_36+0xbe>
    1968:	bd c0       	rjmp	.+378    	; 0x1ae4 <__vector_36+0x238>
    196a:	5b c0       	rjmp	.+182    	; 0x1a22 <__vector_36+0x176>
    196c:	80 3b       	cpi	r24, 0xB0	; 176
    196e:	09 f4       	brne	.+2      	; 0x1972 <__vector_36+0xc6>
    1970:	83 c0       	rjmp	.+262    	; 0x1a78 <__vector_36+0x1cc>
    1972:	38 f4       	brcc	.+14     	; 0x1982 <__vector_36+0xd6>
    1974:	80 3a       	cpi	r24, 0xA0	; 160
    1976:	09 f4       	brne	.+2      	; 0x197a <__vector_36+0xce>
    1978:	66 c0       	rjmp	.+204    	; 0x1a46 <__vector_36+0x19a>
    197a:	88 3a       	cpi	r24, 0xA8	; 168
    197c:	09 f4       	brne	.+2      	; 0x1980 <__vector_36+0xd4>
    197e:	7c c0       	rjmp	.+248    	; 0x1a78 <__vector_36+0x1cc>
    1980:	b1 c0       	rjmp	.+354    	; 0x1ae4 <__vector_36+0x238>
    1982:	80 3c       	cpi	r24, 0xC0	; 192
    1984:	09 f4       	brne	.+2      	; 0x1988 <__vector_36+0xdc>
    1986:	a4 c0       	rjmp	.+328    	; 0x1ad0 <__vector_36+0x224>
    1988:	88 3c       	cpi	r24, 0xC8	; 200
    198a:	09 f4       	brne	.+2      	; 0x198e <__vector_36+0xe2>
    198c:	a1 c0       	rjmp	.+322    	; 0x1ad0 <__vector_36+0x224>
    198e:	88 3b       	cpi	r24, 0xB8	; 184
    1990:	09 f4       	brne	.+2      	; 0x1994 <__vector_36+0xe8>
    1992:	87 c0       	rjmp	.+270    	; 0x1aa2 <__vector_36+0x1f6>
    1994:	a7 c0       	rjmp	.+334    	; 0x1ae4 <__vector_36+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1996:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <twi_slarw>
    199a:	10 c0       	rjmp	.+32     	; 0x19bc <__vector_36+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    199c:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <twi_masterBufferIndex>
    19a0:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <twi_masterBufferLength>
    19a4:	98 17       	cp	r25, r24
    19a6:	70 f5       	brcc	.+92     	; 0x1a04 <__vector_36+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    19a8:	e0 91 60 03 	lds	r30, 0x0360	; 0x800360 <twi_masterBufferIndex>
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	8e 0f       	add	r24, r30
    19b0:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <twi_masterBufferIndex>
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	ef 59       	subi	r30, 0x9F	; 159
    19b8:	fc 4f       	sbci	r31, 0xFC	; 252
    19ba:	80 81       	ld	r24, Z
    19bc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    19c0:	85 ec       	ldi	r24, 0xC5	; 197
    19c2:	83 c0       	rjmp	.+262    	; 0x1aca <__vector_36+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    19c4:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <twi_error>
    19c8:	8b c0       	rjmp	.+278    	; 0x1ae0 <__vector_36+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    19ca:	e0 91 60 03 	lds	r30, 0x0360	; 0x800360 <twi_masterBufferIndex>
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	8e 0f       	add	r24, r30
    19d2:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <twi_masterBufferIndex>
    19d6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	ef 59       	subi	r30, 0x9F	; 159
    19de:	fc 4f       	sbci	r31, 0xFC	; 252
    19e0:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    19e2:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <twi_masterBufferIndex>
    19e6:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <twi_masterBufferLength>
    19ea:	6b c0       	rjmp	.+214    	; 0x1ac2 <__vector_36+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    19ec:	e0 91 60 03 	lds	r30, 0x0360	; 0x800360 <twi_masterBufferIndex>
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	8e 0f       	add	r24, r30
    19f4:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <twi_masterBufferIndex>
    19f8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	ef 59       	subi	r30, 0x9F	; 159
    1a00:	fc 4f       	sbci	r31, 0xFC	; 252
    1a02:	80 83       	st	Z, r24
	if (twi_sendStop)
    1a04:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <twi_sendStop>
    1a08:	81 11       	cpse	r24, r1
    1a0a:	6a c0       	rjmp	.+212    	; 0x1ae0 <__vector_36+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1a12:	84 ea       	ldi	r24, 0xA4	; 164
    1a14:	5e c0       	rjmp	.+188    	; 0x1ad2 <__vector_36+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1a16:	83 e0       	ldi	r24, 0x03	; 3
    1a18:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1a1c:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <twi_rxBufferIndex>
    1a20:	cf cf       	rjmp	.-98     	; 0x19c0 <__vector_36+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1a22:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <twi_rxBufferIndex>
    1a26:	80 32       	cpi	r24, 0x20	; 32
    1a28:	08 f0       	brcs	.+2      	; 0x1a2c <__vector_36+0x180>
    1a2a:	4e c0       	rjmp	.+156    	; 0x1ac8 <__vector_36+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1a2c:	e0 91 1c 03 	lds	r30, 0x031C	; 0x80031c <twi_rxBufferIndex>
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	8e 0f       	add	r24, r30
    1a34:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <twi_rxBufferIndex>
    1a38:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	e3 5e       	subi	r30, 0xE3	; 227
    1a40:	fc 4f       	sbci	r31, 0xFC	; 252
    1a42:	80 83       	st	Z, r24
    1a44:	bd cf       	rjmp	.-134    	; 0x19c0 <__vector_36+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1a46:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1a4a:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <twi_rxBufferIndex>
    1a4e:	80 32       	cpi	r24, 0x20	; 32
    1a50:	30 f4       	brcc	.+12     	; 0x1a5e <__vector_36+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1a52:	e0 91 1c 03 	lds	r30, 0x031C	; 0x80031c <twi_rxBufferIndex>
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	e3 5e       	subi	r30, 0xE3	; 227
    1a5a:	fc 4f       	sbci	r31, 0xFC	; 252
    1a5c:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1a5e:	60 91 1c 03 	lds	r22, 0x031C	; 0x80031c <twi_rxBufferIndex>
    1a62:	70 e0       	ldi	r23, 0x00	; 0
    1a64:	e0 91 81 03 	lds	r30, 0x0381	; 0x800381 <twi_onSlaveReceive>
    1a68:	f0 91 82 03 	lds	r31, 0x0382	; 0x800382 <twi_onSlaveReceive+0x1>
    1a6c:	8d e1       	ldi	r24, 0x1D	; 29
    1a6e:	93 e0       	ldi	r25, 0x03	; 3
    1a70:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1a72:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <twi_rxBufferIndex>
      break;
    1a76:	36 c0       	rjmp	.+108    	; 0x1ae4 <__vector_36+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1a78:	84 e0       	ldi	r24, 0x04	; 4
    1a7a:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1a7e:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1a82:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1a86:	e0 91 83 03 	lds	r30, 0x0383	; 0x800383 <twi_onSlaveTransmit>
    1a8a:	f0 91 84 03 	lds	r31, 0x0384	; 0x800384 <twi_onSlaveTransmit+0x1>
    1a8e:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1a90:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <twi_txBufferLength>
    1a94:	81 11       	cpse	r24, r1
    1a96:	05 c0       	rjmp	.+10     	; 0x1aa2 <__vector_36+0x1f6>
        twi_txBufferLength = 1;
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1a9e:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1aa2:	e0 91 3e 03 	lds	r30, 0x033E	; 0x80033e <twi_txBufferIndex>
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	8e 0f       	add	r24, r30
    1aaa:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <twi_txBufferIndex>
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	e1 5c       	subi	r30, 0xC1	; 193
    1ab2:	fc 4f       	sbci	r31, 0xFC	; 252
    1ab4:	80 81       	ld	r24, Z
    1ab6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1aba:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <twi_txBufferIndex>
    1abe:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <twi_txBufferLength>
    1ac2:	98 17       	cp	r25, r24
    1ac4:	08 f4       	brcc	.+2      	; 0x1ac8 <__vector_36+0x21c>
    1ac6:	7c cf       	rjmp	.-264    	; 0x19c0 <__vector_36+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1ac8:	85 e8       	ldi	r24, 0x85	; 133
    1aca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1ace:	0a c0       	rjmp	.+20     	; 0x1ae4 <__vector_36+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1ad0:	85 ec       	ldi	r24, 0xC5	; 197
    1ad2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1ad6:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <twi_state>
      break;
    1ada:	04 c0       	rjmp	.+8      	; 0x1ae4 <__vector_36+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1adc:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <twi_error>
      twi_stop();
    1ae0:	0e 94 46 0c 	call	0x188c	; 0x188c <twi_stop>
      break;
  }
}
    1ae4:	ff 91       	pop	r31
    1ae6:	ef 91       	pop	r30
    1ae8:	bf 91       	pop	r27
    1aea:	af 91       	pop	r26
    1aec:	9f 91       	pop	r25
    1aee:	8f 91       	pop	r24
    1af0:	7f 91       	pop	r23
    1af2:	6f 91       	pop	r22
    1af4:	5f 91       	pop	r21
    1af6:	4f 91       	pop	r20
    1af8:	3f 91       	pop	r19
    1afa:	2f 91       	pop	r18
    1afc:	0f 90       	pop	r0
    1afe:	0f be       	out	0x3f, r0	; 63
    1b00:	0f 90       	pop	r0
    1b02:	1f 90       	pop	r1
    1b04:	18 95       	reti

00001b06 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1b06:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <_ZN7TwoWire14rxBufferLengthE>
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	20 91 be 03 	lds	r18, 0x03BE	; 0x8003be <_ZN7TwoWire13rxBufferIndexE>
    1b10:	82 1b       	sub	r24, r18
    1b12:	91 09       	sbc	r25, r1
    1b14:	08 95       	ret

00001b16 <_ZN7TwoWire4readEv>:
    1b16:	90 91 be 03 	lds	r25, 0x03BE	; 0x8003be <_ZN7TwoWire13rxBufferIndexE>
    1b1a:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <_ZN7TwoWire14rxBufferLengthE>
    1b1e:	98 17       	cp	r25, r24
    1b20:	50 f4       	brcc	.+20     	; 0x1b36 <_ZN7TwoWire4readEv+0x20>
    1b22:	e9 2f       	mov	r30, r25
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	e1 54       	subi	r30, 0x41	; 65
    1b28:	fc 4f       	sbci	r31, 0xFC	; 252
    1b2a:	20 81       	ld	r18, Z
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	9f 5f       	subi	r25, 0xFF	; 255
    1b30:	90 93 be 03 	sts	0x03BE, r25	; 0x8003be <_ZN7TwoWire13rxBufferIndexE>
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <_ZN7TwoWire4readEv+0x24>
    1b36:	2f ef       	ldi	r18, 0xFF	; 255
    1b38:	3f ef       	ldi	r19, 0xFF	; 255
    1b3a:	c9 01       	movw	r24, r18
    1b3c:	08 95       	ret

00001b3e <_ZN7TwoWire4peekEv>:
    1b3e:	e0 91 be 03 	lds	r30, 0x03BE	; 0x8003be <_ZN7TwoWire13rxBufferIndexE>
    1b42:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <_ZN7TwoWire14rxBufferLengthE>
    1b46:	e8 17       	cp	r30, r24
    1b48:	30 f4       	brcc	.+12     	; 0x1b56 <_ZN7TwoWire4peekEv+0x18>
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	e1 54       	subi	r30, 0x41	; 65
    1b4e:	fc 4f       	sbci	r31, 0xFC	; 252
    1b50:	80 81       	ld	r24, Z
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	08 95       	ret
    1b56:	8f ef       	ldi	r24, 0xFF	; 255
    1b58:	9f ef       	ldi	r25, 0xFF	; 255
    1b5a:	08 95       	ret

00001b5c <_ZN7TwoWire5flushEv>:
    1b5c:	08 95       	ret

00001b5e <_ZN7TwoWire16onReceiveServiceEPhi>:
    1b5e:	cf 93       	push	r28
    1b60:	df 93       	push	r29
    1b62:	ec 01       	movw	r28, r24
    1b64:	e0 91 95 03 	lds	r30, 0x0395	; 0x800395 <_ZN7TwoWire14user_onReceiveE>
    1b68:	f0 91 96 03 	lds	r31, 0x0396	; 0x800396 <_ZN7TwoWire14user_onReceiveE+0x1>
    1b6c:	30 97       	sbiw	r30, 0x00	; 0
    1b6e:	f1 f0       	breq	.+60     	; 0x1bac <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1b70:	90 91 be 03 	lds	r25, 0x03BE	; 0x8003be <_ZN7TwoWire13rxBufferIndexE>
    1b74:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <_ZN7TwoWire14rxBufferLengthE>
    1b78:	98 17       	cp	r25, r24
    1b7a:	c0 f0       	brcs	.+48     	; 0x1bac <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	29 2f       	mov	r18, r25
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	26 17       	cp	r18, r22
    1b84:	37 07       	cpc	r19, r23
    1b86:	54 f4       	brge	.+20     	; 0x1b9c <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1b88:	de 01       	movw	r26, r28
    1b8a:	a2 0f       	add	r26, r18
    1b8c:	b3 1f       	adc	r27, r19
    1b8e:	4c 91       	ld	r20, X
    1b90:	d9 01       	movw	r26, r18
    1b92:	a1 54       	subi	r26, 0x41	; 65
    1b94:	bc 4f       	sbci	r27, 0xFC	; 252
    1b96:	4c 93       	st	X, r20
    1b98:	9f 5f       	subi	r25, 0xFF	; 255
    1b9a:	f1 cf       	rjmp	.-30     	; 0x1b7e <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1b9c:	10 92 be 03 	sts	0x03BE, r1	; 0x8003be <_ZN7TwoWire13rxBufferIndexE>
    1ba0:	60 93 bd 03 	sts	0x03BD, r22	; 0x8003bd <_ZN7TwoWire14rxBufferLengthE>
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	df 91       	pop	r29
    1ba8:	cf 91       	pop	r28
    1baa:	09 94       	ijmp
    1bac:	df 91       	pop	r29
    1bae:	cf 91       	pop	r28
    1bb0:	08 95       	ret

00001bb2 <_ZN7TwoWire16onRequestServiceEv>:
    1bb2:	e0 91 97 03 	lds	r30, 0x0397	; 0x800397 <_ZN7TwoWire14user_onRequestE>
    1bb6:	f0 91 98 03 	lds	r31, 0x0398	; 0x800398 <_ZN7TwoWire14user_onRequestE+0x1>
    1bba:	30 97       	sbiw	r30, 0x00	; 0
    1bbc:	29 f0       	breq	.+10     	; 0x1bc8 <_ZN7TwoWire16onRequestServiceEv+0x16>
    1bbe:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <_ZN7TwoWire13txBufferIndexE>
    1bc2:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <_ZN7TwoWire14txBufferLengthE>
    1bc6:	09 94       	ijmp
    1bc8:	08 95       	ret

00001bca <_ZN7TwoWire5writeEPKhj>:
    1bca:	cf 92       	push	r12
    1bcc:	df 92       	push	r13
    1bce:	ef 92       	push	r14
    1bd0:	ff 92       	push	r15
    1bd2:	0f 93       	push	r16
    1bd4:	1f 93       	push	r17
    1bd6:	cf 93       	push	r28
    1bd8:	df 93       	push	r29
    1bda:	7c 01       	movw	r14, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	8a 01       	movw	r16, r20
    1be0:	20 91 99 03 	lds	r18, 0x0399	; 0x800399 <_ZN7TwoWire12transmittingE>
    1be4:	22 23       	and	r18, r18
    1be6:	89 f0       	breq	.+34     	; 0x1c0a <_ZN7TwoWire5writeEPKhj+0x40>
    1be8:	eb 01       	movw	r28, r22
    1bea:	6b 01       	movw	r12, r22
    1bec:	c4 0e       	add	r12, r20
    1bee:	d5 1e       	adc	r13, r21
    1bf0:	cc 15       	cp	r28, r12
    1bf2:	dd 05       	cpc	r29, r13
    1bf4:	69 f0       	breq	.+26     	; 0x1c10 <_ZN7TwoWire5writeEPKhj+0x46>
    1bf6:	69 91       	ld	r22, Y+
    1bf8:	d7 01       	movw	r26, r14
    1bfa:	ed 91       	ld	r30, X+
    1bfc:	fc 91       	ld	r31, X
    1bfe:	01 90       	ld	r0, Z+
    1c00:	f0 81       	ld	r31, Z
    1c02:	e0 2d       	mov	r30, r0
    1c04:	c7 01       	movw	r24, r14
    1c06:	09 95       	icall
    1c08:	f3 cf       	rjmp	.-26     	; 0x1bf0 <_ZN7TwoWire5writeEPKhj+0x26>
    1c0a:	64 2f       	mov	r22, r20
    1c0c:	0e 94 14 0c 	call	0x1828	; 0x1828 <twi_transmit>
    1c10:	c8 01       	movw	r24, r16
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	1f 91       	pop	r17
    1c18:	0f 91       	pop	r16
    1c1a:	ff 90       	pop	r15
    1c1c:	ef 90       	pop	r14
    1c1e:	df 90       	pop	r13
    1c20:	cf 90       	pop	r12
    1c22:	08 95       	ret

00001c24 <_ZN7TwoWire5writeEh>:
    1c24:	cf 93       	push	r28
    1c26:	df 93       	push	r29
    1c28:	1f 92       	push	r1
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	69 83       	std	Y+1, r22	; 0x01
    1c30:	20 91 99 03 	lds	r18, 0x0399	; 0x800399 <_ZN7TwoWire12transmittingE>
    1c34:	22 23       	and	r18, r18
    1c36:	d1 f0       	breq	.+52     	; 0x1c6c <_ZN7TwoWire5writeEh+0x48>
    1c38:	20 91 9a 03 	lds	r18, 0x039A	; 0x80039a <_ZN7TwoWire14txBufferLengthE>
    1c3c:	20 32       	cpi	r18, 0x20	; 32
    1c3e:	40 f0       	brcs	.+16     	; 0x1c50 <_ZN7TwoWire5writeEh+0x2c>
    1c40:	21 e0       	ldi	r18, 0x01	; 1
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	fc 01       	movw	r30, r24
    1c46:	33 83       	std	Z+3, r19	; 0x03
    1c48:	22 83       	std	Z+2, r18	; 0x02
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	15 c0       	rjmp	.+42     	; 0x1c7a <_ZN7TwoWire5writeEh+0x56>
    1c50:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <_ZN7TwoWire13txBufferIndexE>
    1c54:	e8 2f       	mov	r30, r24
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	e4 56       	subi	r30, 0x64	; 100
    1c5a:	fc 4f       	sbci	r31, 0xFC	; 252
    1c5c:	99 81       	ldd	r25, Y+1	; 0x01
    1c5e:	90 83       	st	Z, r25
    1c60:	8f 5f       	subi	r24, 0xFF	; 255
    1c62:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <_ZN7TwoWire13txBufferIndexE>
    1c66:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <_ZN7TwoWire14txBufferLengthE>
    1c6a:	05 c0       	rjmp	.+10     	; 0x1c76 <_ZN7TwoWire5writeEh+0x52>
    1c6c:	61 e0       	ldi	r22, 0x01	; 1
    1c6e:	ce 01       	movw	r24, r28
    1c70:	01 96       	adiw	r24, 0x01	; 1
    1c72:	0e 94 14 0c 	call	0x1828	; 0x1828 <twi_transmit>
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	0f 90       	pop	r0
    1c7c:	df 91       	pop	r29
    1c7e:	cf 91       	pop	r28
    1c80:	08 95       	ret

00001c82 <_ZN7TwoWireC1Ev>:
    1c82:	fc 01       	movw	r30, r24
    1c84:	13 82       	std	Z+3, r1	; 0x03
    1c86:	12 82       	std	Z+2, r1	; 0x02
    1c88:	88 ee       	ldi	r24, 0xE8	; 232
    1c8a:	93 e0       	ldi	r25, 0x03	; 3
    1c8c:	a0 e0       	ldi	r26, 0x00	; 0
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	84 83       	std	Z+4, r24	; 0x04
    1c92:	95 83       	std	Z+5, r25	; 0x05
    1c94:	a6 83       	std	Z+6, r26	; 0x06
    1c96:	b7 83       	std	Z+7, r27	; 0x07
    1c98:	8e e1       	ldi	r24, 0x1E	; 30
    1c9a:	92 e0       	ldi	r25, 0x02	; 2
    1c9c:	91 83       	std	Z+1, r25	; 0x01
    1c9e:	80 83       	st	Z, r24
    1ca0:	08 95       	ret

00001ca2 <_ZN7TwoWire5beginEv>:
    1ca2:	10 92 be 03 	sts	0x03BE, r1	; 0x8003be <_ZN7TwoWire13rxBufferIndexE>
    1ca6:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <_ZN7TwoWire14rxBufferLengthE>
    1caa:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <_ZN7TwoWire13txBufferIndexE>
    1cae:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <_ZN7TwoWire14txBufferLengthE>
    1cb2:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <twi_init>
    1cb6:	89 ed       	ldi	r24, 0xD9	; 217
    1cb8:	9d e0       	ldi	r25, 0x0D	; 13
    1cba:	0e 94 41 0c 	call	0x1882	; 0x1882 <twi_attachSlaveTxEvent>
    1cbe:	8f ea       	ldi	r24, 0xAF	; 175
    1cc0:	9d e0       	ldi	r25, 0x0D	; 13
    1cc2:	0c 94 3c 0c 	jmp	0x1878	; 0x1878 <twi_attachSlaveRxEvent>

00001cc6 <_ZN7TwoWire17beginTransmissionEh>:
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <_ZN7TwoWire12transmittingE>
    1ccc:	60 93 bc 03 	sts	0x03BC, r22	; 0x8003bc <_ZN7TwoWire9txAddressE>
    1cd0:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <_ZN7TwoWire13txBufferIndexE>
    1cd4:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <_ZN7TwoWire14txBufferLengthE>
    1cd8:	08 95       	ret

00001cda <_ZN7TwoWire15endTransmissionEh>:
    1cda:	0f 93       	push	r16
    1cdc:	06 2f       	mov	r16, r22
    1cde:	21 e0       	ldi	r18, 0x01	; 1
    1ce0:	40 91 9a 03 	lds	r20, 0x039A	; 0x80039a <_ZN7TwoWire14txBufferLengthE>
    1ce4:	6c e9       	ldi	r22, 0x9C	; 156
    1ce6:	73 e0       	ldi	r23, 0x03	; 3
    1ce8:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <_ZN7TwoWire9txAddressE>
    1cec:	0e 94 be 0b 	call	0x177c	; 0x177c <twi_writeTo>
    1cf0:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <_ZN7TwoWire13txBufferIndexE>
    1cf4:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <_ZN7TwoWire14txBufferLengthE>
    1cf8:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <_ZN7TwoWire12transmittingE>
    1cfc:	0f 91       	pop	r16
    1cfe:	08 95       	ret

00001d00 <_ZN7TwoWire11requestFromEhhmhh>:
    1d00:	4f 92       	push	r4
    1d02:	5f 92       	push	r5
    1d04:	6f 92       	push	r6
    1d06:	7f 92       	push	r7
    1d08:	af 92       	push	r10
    1d0a:	bf 92       	push	r11
    1d0c:	cf 92       	push	r12
    1d0e:	ef 92       	push	r14
    1d10:	ff 92       	push	r15
    1d12:	0f 93       	push	r16
    1d14:	1f 93       	push	r17
    1d16:	cf 93       	push	r28
    1d18:	df 93       	push	r29
    1d1a:	5c 01       	movw	r10, r24
    1d1c:	f6 2e       	mov	r15, r22
    1d1e:	d4 2f       	mov	r29, r20
    1d20:	28 01       	movw	r4, r16
    1d22:	39 01       	movw	r6, r18
    1d24:	ee 20       	and	r14, r14
    1d26:	21 f1       	breq	.+72     	; 0x1d70 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    1d28:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN7TwoWire17beginTransmissionEh>
    1d2c:	ce 2d       	mov	r28, r14
    1d2e:	c4 30       	cpi	r28, 0x04	; 4
    1d30:	08 f0       	brcs	.+2      	; 0x1d34 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1d32:	c3 e0       	ldi	r28, 0x03	; 3
    1d34:	c1 50       	subi	r28, 0x01	; 1
    1d36:	c0 f0       	brcs	.+48     	; 0x1d68 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    1d38:	28 e0       	ldi	r18, 0x08	; 8
    1d3a:	c2 9f       	mul	r28, r18
    1d3c:	c0 01       	movw	r24, r0
    1d3e:	11 24       	eor	r1, r1
    1d40:	a3 01       	movw	r20, r6
    1d42:	92 01       	movw	r18, r4
    1d44:	04 c0       	rjmp	.+8      	; 0x1d4e <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    1d46:	56 95       	lsr	r21
    1d48:	47 95       	ror	r20
    1d4a:	37 95       	ror	r19
    1d4c:	27 95       	ror	r18
    1d4e:	8a 95       	dec	r24
    1d50:	d2 f7       	brpl	.-12     	; 0x1d46 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    1d52:	ca 01       	movw	r24, r20
    1d54:	b9 01       	movw	r22, r18
    1d56:	d5 01       	movw	r26, r10
    1d58:	ed 91       	ld	r30, X+
    1d5a:	fc 91       	ld	r31, X
    1d5c:	01 90       	ld	r0, Z+
    1d5e:	f0 81       	ld	r31, Z
    1d60:	e0 2d       	mov	r30, r0
    1d62:	c5 01       	movw	r24, r10
    1d64:	09 95       	icall
    1d66:	e6 cf       	rjmp	.-52     	; 0x1d34 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1d68:	60 e0       	ldi	r22, 0x00	; 0
    1d6a:	c5 01       	movw	r24, r10
    1d6c:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <_ZN7TwoWire15endTransmissionEh>
    1d70:	4d 2f       	mov	r20, r29
    1d72:	d1 32       	cpi	r29, 0x21	; 33
    1d74:	08 f0       	brcs	.+2      	; 0x1d78 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    1d76:	40 e2       	ldi	r20, 0x20	; 32
    1d78:	2c 2d       	mov	r18, r12
    1d7a:	6f eb       	ldi	r22, 0xBF	; 191
    1d7c:	73 e0       	ldi	r23, 0x03	; 3
    1d7e:	8f 2d       	mov	r24, r15
    1d80:	0e 94 76 0b 	call	0x16ec	; 0x16ec <twi_readFrom>
    1d84:	10 92 be 03 	sts	0x03BE, r1	; 0x8003be <_ZN7TwoWire13rxBufferIndexE>
    1d88:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <_ZN7TwoWire14rxBufferLengthE>
    1d8c:	df 91       	pop	r29
    1d8e:	cf 91       	pop	r28
    1d90:	1f 91       	pop	r17
    1d92:	0f 91       	pop	r16
    1d94:	ff 90       	pop	r15
    1d96:	ef 90       	pop	r14
    1d98:	cf 90       	pop	r12
    1d9a:	bf 90       	pop	r11
    1d9c:	af 90       	pop	r10
    1d9e:	7f 90       	pop	r7
    1da0:	6f 90       	pop	r6
    1da2:	5f 90       	pop	r5
    1da4:	4f 90       	pop	r4
    1da6:	08 95       	ret

00001da8 <_ZN7TwoWire11requestFromEhhh>:
    1da8:	cf 92       	push	r12
    1daa:	ef 92       	push	r14
    1dac:	0f 93       	push	r16
    1dae:	1f 93       	push	r17
    1db0:	c2 2e       	mov	r12, r18
    1db2:	e1 2c       	mov	r14, r1
    1db4:	00 e0       	ldi	r16, 0x00	; 0
    1db6:	10 e0       	ldi	r17, 0x00	; 0
    1db8:	98 01       	movw	r18, r16
    1dba:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <_ZN7TwoWire11requestFromEhhmhh>
    1dbe:	1f 91       	pop	r17
    1dc0:	0f 91       	pop	r16
    1dc2:	ef 90       	pop	r14
    1dc4:	cf 90       	pop	r12
    1dc6:	08 95       	ret

00001dc8 <_ZN7TwoWire11requestFromEii>:
    1dc8:	21 e0       	ldi	r18, 0x01	; 1
    1dca:	0c 94 d4 0e 	jmp	0x1da8	; 0x1da8 <_ZN7TwoWire11requestFromEhhh>

00001dce <_ZN7TwoWire15endTransmissionEv>:
    1dce:	61 e0       	ldi	r22, 0x01	; 1
    1dd0:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <_ZN7TwoWire15endTransmissionEh>

00001dd4 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1dd4:	89 e8       	ldi	r24, 0x89	; 137
    1dd6:	93 e0       	ldi	r25, 0x03	; 3
    1dd8:	0c 94 41 0e 	jmp	0x1c82	; 0x1c82 <_ZN7TwoWireC1Ev>

00001ddc <__divsf3>:
    1ddc:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__divsf3x>
    1de0:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <__fp_round>
    1de4:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__fp_pscB>
    1de8:	58 f0       	brcs	.+22     	; 0x1e00 <__divsf3+0x24>
    1dea:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__fp_pscA>
    1dee:	40 f0       	brcs	.+16     	; 0x1e00 <__divsf3+0x24>
    1df0:	29 f4       	brne	.+10     	; 0x1dfc <__divsf3+0x20>
    1df2:	5f 3f       	cpi	r21, 0xFF	; 255
    1df4:	29 f0       	breq	.+10     	; 0x1e00 <__divsf3+0x24>
    1df6:	0c 94 9d 0f 	jmp	0x1f3a	; 0x1f3a <__fp_inf>
    1dfa:	51 11       	cpse	r21, r1
    1dfc:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__fp_szero>
    1e00:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <__fp_nan>

00001e04 <__divsf3x>:
    1e04:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fp_split3>
    1e08:	68 f3       	brcs	.-38     	; 0x1de4 <__divsf3+0x8>

00001e0a <__divsf3_pse>:
    1e0a:	99 23       	and	r25, r25
    1e0c:	b1 f3       	breq	.-20     	; 0x1dfa <__divsf3+0x1e>
    1e0e:	55 23       	and	r21, r21
    1e10:	91 f3       	breq	.-28     	; 0x1df6 <__divsf3+0x1a>
    1e12:	95 1b       	sub	r25, r21
    1e14:	55 0b       	sbc	r21, r21
    1e16:	bb 27       	eor	r27, r27
    1e18:	aa 27       	eor	r26, r26
    1e1a:	62 17       	cp	r22, r18
    1e1c:	73 07       	cpc	r23, r19
    1e1e:	84 07       	cpc	r24, r20
    1e20:	38 f0       	brcs	.+14     	; 0x1e30 <__divsf3_pse+0x26>
    1e22:	9f 5f       	subi	r25, 0xFF	; 255
    1e24:	5f 4f       	sbci	r21, 0xFF	; 255
    1e26:	22 0f       	add	r18, r18
    1e28:	33 1f       	adc	r19, r19
    1e2a:	44 1f       	adc	r20, r20
    1e2c:	aa 1f       	adc	r26, r26
    1e2e:	a9 f3       	breq	.-22     	; 0x1e1a <__divsf3_pse+0x10>
    1e30:	35 d0       	rcall	.+106    	; 0x1e9c <__divsf3_pse+0x92>
    1e32:	0e 2e       	mov	r0, r30
    1e34:	3a f0       	brmi	.+14     	; 0x1e44 <__divsf3_pse+0x3a>
    1e36:	e0 e8       	ldi	r30, 0x80	; 128
    1e38:	32 d0       	rcall	.+100    	; 0x1e9e <__divsf3_pse+0x94>
    1e3a:	91 50       	subi	r25, 0x01	; 1
    1e3c:	50 40       	sbci	r21, 0x00	; 0
    1e3e:	e6 95       	lsr	r30
    1e40:	00 1c       	adc	r0, r0
    1e42:	ca f7       	brpl	.-14     	; 0x1e36 <__divsf3_pse+0x2c>
    1e44:	2b d0       	rcall	.+86     	; 0x1e9c <__divsf3_pse+0x92>
    1e46:	fe 2f       	mov	r31, r30
    1e48:	29 d0       	rcall	.+82     	; 0x1e9c <__divsf3_pse+0x92>
    1e4a:	66 0f       	add	r22, r22
    1e4c:	77 1f       	adc	r23, r23
    1e4e:	88 1f       	adc	r24, r24
    1e50:	bb 1f       	adc	r27, r27
    1e52:	26 17       	cp	r18, r22
    1e54:	37 07       	cpc	r19, r23
    1e56:	48 07       	cpc	r20, r24
    1e58:	ab 07       	cpc	r26, r27
    1e5a:	b0 e8       	ldi	r27, 0x80	; 128
    1e5c:	09 f0       	breq	.+2      	; 0x1e60 <__divsf3_pse+0x56>
    1e5e:	bb 0b       	sbc	r27, r27
    1e60:	80 2d       	mov	r24, r0
    1e62:	bf 01       	movw	r22, r30
    1e64:	ff 27       	eor	r31, r31
    1e66:	93 58       	subi	r25, 0x83	; 131
    1e68:	5f 4f       	sbci	r21, 0xFF	; 255
    1e6a:	3a f0       	brmi	.+14     	; 0x1e7a <__divsf3_pse+0x70>
    1e6c:	9e 3f       	cpi	r25, 0xFE	; 254
    1e6e:	51 05       	cpc	r21, r1
    1e70:	78 f0       	brcs	.+30     	; 0x1e90 <__divsf3_pse+0x86>
    1e72:	0c 94 9d 0f 	jmp	0x1f3a	; 0x1f3a <__fp_inf>
    1e76:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__fp_szero>
    1e7a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e7c:	e4 f3       	brlt	.-8      	; 0x1e76 <__divsf3_pse+0x6c>
    1e7e:	98 3e       	cpi	r25, 0xE8	; 232
    1e80:	d4 f3       	brlt	.-12     	; 0x1e76 <__divsf3_pse+0x6c>
    1e82:	86 95       	lsr	r24
    1e84:	77 95       	ror	r23
    1e86:	67 95       	ror	r22
    1e88:	b7 95       	ror	r27
    1e8a:	f7 95       	ror	r31
    1e8c:	9f 5f       	subi	r25, 0xFF	; 255
    1e8e:	c9 f7       	brne	.-14     	; 0x1e82 <__divsf3_pse+0x78>
    1e90:	88 0f       	add	r24, r24
    1e92:	91 1d       	adc	r25, r1
    1e94:	96 95       	lsr	r25
    1e96:	87 95       	ror	r24
    1e98:	97 f9       	bld	r25, 7
    1e9a:	08 95       	ret
    1e9c:	e1 e0       	ldi	r30, 0x01	; 1
    1e9e:	66 0f       	add	r22, r22
    1ea0:	77 1f       	adc	r23, r23
    1ea2:	88 1f       	adc	r24, r24
    1ea4:	bb 1f       	adc	r27, r27
    1ea6:	62 17       	cp	r22, r18
    1ea8:	73 07       	cpc	r23, r19
    1eaa:	84 07       	cpc	r24, r20
    1eac:	ba 07       	cpc	r27, r26
    1eae:	20 f0       	brcs	.+8      	; 0x1eb8 <__divsf3_pse+0xae>
    1eb0:	62 1b       	sub	r22, r18
    1eb2:	73 0b       	sbc	r23, r19
    1eb4:	84 0b       	sbc	r24, r20
    1eb6:	ba 0b       	sbc	r27, r26
    1eb8:	ee 1f       	adc	r30, r30
    1eba:	88 f7       	brcc	.-30     	; 0x1e9e <__divsf3_pse+0x94>
    1ebc:	e0 95       	com	r30
    1ebe:	08 95       	ret

00001ec0 <__floatunsisf>:
    1ec0:	e8 94       	clt
    1ec2:	09 c0       	rjmp	.+18     	; 0x1ed6 <__floatsisf+0x12>

00001ec4 <__floatsisf>:
    1ec4:	97 fb       	bst	r25, 7
    1ec6:	3e f4       	brtc	.+14     	; 0x1ed6 <__floatsisf+0x12>
    1ec8:	90 95       	com	r25
    1eca:	80 95       	com	r24
    1ecc:	70 95       	com	r23
    1ece:	61 95       	neg	r22
    1ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ed4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed6:	99 23       	and	r25, r25
    1ed8:	a9 f0       	breq	.+42     	; 0x1f04 <__floatsisf+0x40>
    1eda:	f9 2f       	mov	r31, r25
    1edc:	96 e9       	ldi	r25, 0x96	; 150
    1ede:	bb 27       	eor	r27, r27
    1ee0:	93 95       	inc	r25
    1ee2:	f6 95       	lsr	r31
    1ee4:	87 95       	ror	r24
    1ee6:	77 95       	ror	r23
    1ee8:	67 95       	ror	r22
    1eea:	b7 95       	ror	r27
    1eec:	f1 11       	cpse	r31, r1
    1eee:	f8 cf       	rjmp	.-16     	; 0x1ee0 <__floatsisf+0x1c>
    1ef0:	fa f4       	brpl	.+62     	; 0x1f30 <__floatsisf+0x6c>
    1ef2:	bb 0f       	add	r27, r27
    1ef4:	11 f4       	brne	.+4      	; 0x1efa <__floatsisf+0x36>
    1ef6:	60 ff       	sbrs	r22, 0
    1ef8:	1b c0       	rjmp	.+54     	; 0x1f30 <__floatsisf+0x6c>
    1efa:	6f 5f       	subi	r22, 0xFF	; 255
    1efc:	7f 4f       	sbci	r23, 0xFF	; 255
    1efe:	8f 4f       	sbci	r24, 0xFF	; 255
    1f00:	9f 4f       	sbci	r25, 0xFF	; 255
    1f02:	16 c0       	rjmp	.+44     	; 0x1f30 <__floatsisf+0x6c>
    1f04:	88 23       	and	r24, r24
    1f06:	11 f0       	breq	.+4      	; 0x1f0c <__floatsisf+0x48>
    1f08:	96 e9       	ldi	r25, 0x96	; 150
    1f0a:	11 c0       	rjmp	.+34     	; 0x1f2e <__floatsisf+0x6a>
    1f0c:	77 23       	and	r23, r23
    1f0e:	21 f0       	breq	.+8      	; 0x1f18 <__floatsisf+0x54>
    1f10:	9e e8       	ldi	r25, 0x8E	; 142
    1f12:	87 2f       	mov	r24, r23
    1f14:	76 2f       	mov	r23, r22
    1f16:	05 c0       	rjmp	.+10     	; 0x1f22 <__floatsisf+0x5e>
    1f18:	66 23       	and	r22, r22
    1f1a:	71 f0       	breq	.+28     	; 0x1f38 <__floatsisf+0x74>
    1f1c:	96 e8       	ldi	r25, 0x86	; 134
    1f1e:	86 2f       	mov	r24, r22
    1f20:	70 e0       	ldi	r23, 0x00	; 0
    1f22:	60 e0       	ldi	r22, 0x00	; 0
    1f24:	2a f0       	brmi	.+10     	; 0x1f30 <__floatsisf+0x6c>
    1f26:	9a 95       	dec	r25
    1f28:	66 0f       	add	r22, r22
    1f2a:	77 1f       	adc	r23, r23
    1f2c:	88 1f       	adc	r24, r24
    1f2e:	da f7       	brpl	.-10     	; 0x1f26 <__floatsisf+0x62>
    1f30:	88 0f       	add	r24, r24
    1f32:	96 95       	lsr	r25
    1f34:	87 95       	ror	r24
    1f36:	97 f9       	bld	r25, 7
    1f38:	08 95       	ret

00001f3a <__fp_inf>:
    1f3a:	97 f9       	bld	r25, 7
    1f3c:	9f 67       	ori	r25, 0x7F	; 127
    1f3e:	80 e8       	ldi	r24, 0x80	; 128
    1f40:	70 e0       	ldi	r23, 0x00	; 0
    1f42:	60 e0       	ldi	r22, 0x00	; 0
    1f44:	08 95       	ret

00001f46 <__fp_nan>:
    1f46:	9f ef       	ldi	r25, 0xFF	; 255
    1f48:	80 ec       	ldi	r24, 0xC0	; 192
    1f4a:	08 95       	ret

00001f4c <__fp_pscA>:
    1f4c:	00 24       	eor	r0, r0
    1f4e:	0a 94       	dec	r0
    1f50:	16 16       	cp	r1, r22
    1f52:	17 06       	cpc	r1, r23
    1f54:	18 06       	cpc	r1, r24
    1f56:	09 06       	cpc	r0, r25
    1f58:	08 95       	ret

00001f5a <__fp_pscB>:
    1f5a:	00 24       	eor	r0, r0
    1f5c:	0a 94       	dec	r0
    1f5e:	12 16       	cp	r1, r18
    1f60:	13 06       	cpc	r1, r19
    1f62:	14 06       	cpc	r1, r20
    1f64:	05 06       	cpc	r0, r21
    1f66:	08 95       	ret

00001f68 <__fp_round>:
    1f68:	09 2e       	mov	r0, r25
    1f6a:	03 94       	inc	r0
    1f6c:	00 0c       	add	r0, r0
    1f6e:	11 f4       	brne	.+4      	; 0x1f74 <__fp_round+0xc>
    1f70:	88 23       	and	r24, r24
    1f72:	52 f0       	brmi	.+20     	; 0x1f88 <__fp_round+0x20>
    1f74:	bb 0f       	add	r27, r27
    1f76:	40 f4       	brcc	.+16     	; 0x1f88 <__fp_round+0x20>
    1f78:	bf 2b       	or	r27, r31
    1f7a:	11 f4       	brne	.+4      	; 0x1f80 <__fp_round+0x18>
    1f7c:	60 ff       	sbrs	r22, 0
    1f7e:	04 c0       	rjmp	.+8      	; 0x1f88 <__fp_round+0x20>
    1f80:	6f 5f       	subi	r22, 0xFF	; 255
    1f82:	7f 4f       	sbci	r23, 0xFF	; 255
    1f84:	8f 4f       	sbci	r24, 0xFF	; 255
    1f86:	9f 4f       	sbci	r25, 0xFF	; 255
    1f88:	08 95       	ret

00001f8a <__fp_split3>:
    1f8a:	57 fd       	sbrc	r21, 7
    1f8c:	90 58       	subi	r25, 0x80	; 128
    1f8e:	44 0f       	add	r20, r20
    1f90:	55 1f       	adc	r21, r21
    1f92:	59 f0       	breq	.+22     	; 0x1faa <__fp_splitA+0x10>
    1f94:	5f 3f       	cpi	r21, 0xFF	; 255
    1f96:	71 f0       	breq	.+28     	; 0x1fb4 <__fp_splitA+0x1a>
    1f98:	47 95       	ror	r20

00001f9a <__fp_splitA>:
    1f9a:	88 0f       	add	r24, r24
    1f9c:	97 fb       	bst	r25, 7
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	61 f0       	breq	.+24     	; 0x1fba <__fp_splitA+0x20>
    1fa2:	9f 3f       	cpi	r25, 0xFF	; 255
    1fa4:	79 f0       	breq	.+30     	; 0x1fc4 <__fp_splitA+0x2a>
    1fa6:	87 95       	ror	r24
    1fa8:	08 95       	ret
    1faa:	12 16       	cp	r1, r18
    1fac:	13 06       	cpc	r1, r19
    1fae:	14 06       	cpc	r1, r20
    1fb0:	55 1f       	adc	r21, r21
    1fb2:	f2 cf       	rjmp	.-28     	; 0x1f98 <__fp_split3+0xe>
    1fb4:	46 95       	lsr	r20
    1fb6:	f1 df       	rcall	.-30     	; 0x1f9a <__fp_splitA>
    1fb8:	08 c0       	rjmp	.+16     	; 0x1fca <__fp_splitA+0x30>
    1fba:	16 16       	cp	r1, r22
    1fbc:	17 06       	cpc	r1, r23
    1fbe:	18 06       	cpc	r1, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	f1 cf       	rjmp	.-30     	; 0x1fa6 <__fp_splitA+0xc>
    1fc4:	86 95       	lsr	r24
    1fc6:	71 05       	cpc	r23, r1
    1fc8:	61 05       	cpc	r22, r1
    1fca:	08 94       	sec
    1fcc:	08 95       	ret

00001fce <__fp_zero>:
    1fce:	e8 94       	clt

00001fd0 <__fp_szero>:
    1fd0:	bb 27       	eor	r27, r27
    1fd2:	66 27       	eor	r22, r22
    1fd4:	77 27       	eor	r23, r23
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	97 f9       	bld	r25, 7
    1fda:	08 95       	ret

00001fdc <__gesf2>:
    1fdc:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__fp_cmp>
    1fe0:	08 f4       	brcc	.+2      	; 0x1fe4 <__gesf2+0x8>
    1fe2:	8f ef       	ldi	r24, 0xFF	; 255
    1fe4:	08 95       	ret

00001fe6 <__mulsf3>:
    1fe6:	0e 94 06 10 	call	0x200c	; 0x200c <__mulsf3x>
    1fea:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <__fp_round>
    1fee:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__fp_pscA>
    1ff2:	38 f0       	brcs	.+14     	; 0x2002 <__mulsf3+0x1c>
    1ff4:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__fp_pscB>
    1ff8:	20 f0       	brcs	.+8      	; 0x2002 <__mulsf3+0x1c>
    1ffa:	95 23       	and	r25, r21
    1ffc:	11 f0       	breq	.+4      	; 0x2002 <__mulsf3+0x1c>
    1ffe:	0c 94 9d 0f 	jmp	0x1f3a	; 0x1f3a <__fp_inf>
    2002:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <__fp_nan>
    2006:	11 24       	eor	r1, r1
    2008:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__fp_szero>

0000200c <__mulsf3x>:
    200c:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fp_split3>
    2010:	70 f3       	brcs	.-36     	; 0x1fee <__mulsf3+0x8>

00002012 <__mulsf3_pse>:
    2012:	95 9f       	mul	r25, r21
    2014:	c1 f3       	breq	.-16     	; 0x2006 <__mulsf3+0x20>
    2016:	95 0f       	add	r25, r21
    2018:	50 e0       	ldi	r21, 0x00	; 0
    201a:	55 1f       	adc	r21, r21
    201c:	62 9f       	mul	r22, r18
    201e:	f0 01       	movw	r30, r0
    2020:	72 9f       	mul	r23, r18
    2022:	bb 27       	eor	r27, r27
    2024:	f0 0d       	add	r31, r0
    2026:	b1 1d       	adc	r27, r1
    2028:	63 9f       	mul	r22, r19
    202a:	aa 27       	eor	r26, r26
    202c:	f0 0d       	add	r31, r0
    202e:	b1 1d       	adc	r27, r1
    2030:	aa 1f       	adc	r26, r26
    2032:	64 9f       	mul	r22, r20
    2034:	66 27       	eor	r22, r22
    2036:	b0 0d       	add	r27, r0
    2038:	a1 1d       	adc	r26, r1
    203a:	66 1f       	adc	r22, r22
    203c:	82 9f       	mul	r24, r18
    203e:	22 27       	eor	r18, r18
    2040:	b0 0d       	add	r27, r0
    2042:	a1 1d       	adc	r26, r1
    2044:	62 1f       	adc	r22, r18
    2046:	73 9f       	mul	r23, r19
    2048:	b0 0d       	add	r27, r0
    204a:	a1 1d       	adc	r26, r1
    204c:	62 1f       	adc	r22, r18
    204e:	83 9f       	mul	r24, r19
    2050:	a0 0d       	add	r26, r0
    2052:	61 1d       	adc	r22, r1
    2054:	22 1f       	adc	r18, r18
    2056:	74 9f       	mul	r23, r20
    2058:	33 27       	eor	r19, r19
    205a:	a0 0d       	add	r26, r0
    205c:	61 1d       	adc	r22, r1
    205e:	23 1f       	adc	r18, r19
    2060:	84 9f       	mul	r24, r20
    2062:	60 0d       	add	r22, r0
    2064:	21 1d       	adc	r18, r1
    2066:	82 2f       	mov	r24, r18
    2068:	76 2f       	mov	r23, r22
    206a:	6a 2f       	mov	r22, r26
    206c:	11 24       	eor	r1, r1
    206e:	9f 57       	subi	r25, 0x7F	; 127
    2070:	50 40       	sbci	r21, 0x00	; 0
    2072:	9a f0       	brmi	.+38     	; 0x209a <__mulsf3_pse+0x88>
    2074:	f1 f0       	breq	.+60     	; 0x20b2 <__mulsf3_pse+0xa0>
    2076:	88 23       	and	r24, r24
    2078:	4a f0       	brmi	.+18     	; 0x208c <__mulsf3_pse+0x7a>
    207a:	ee 0f       	add	r30, r30
    207c:	ff 1f       	adc	r31, r31
    207e:	bb 1f       	adc	r27, r27
    2080:	66 1f       	adc	r22, r22
    2082:	77 1f       	adc	r23, r23
    2084:	88 1f       	adc	r24, r24
    2086:	91 50       	subi	r25, 0x01	; 1
    2088:	50 40       	sbci	r21, 0x00	; 0
    208a:	a9 f7       	brne	.-22     	; 0x2076 <__mulsf3_pse+0x64>
    208c:	9e 3f       	cpi	r25, 0xFE	; 254
    208e:	51 05       	cpc	r21, r1
    2090:	80 f0       	brcs	.+32     	; 0x20b2 <__mulsf3_pse+0xa0>
    2092:	0c 94 9d 0f 	jmp	0x1f3a	; 0x1f3a <__fp_inf>
    2096:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__fp_szero>
    209a:	5f 3f       	cpi	r21, 0xFF	; 255
    209c:	e4 f3       	brlt	.-8      	; 0x2096 <__mulsf3_pse+0x84>
    209e:	98 3e       	cpi	r25, 0xE8	; 232
    20a0:	d4 f3       	brlt	.-12     	; 0x2096 <__mulsf3_pse+0x84>
    20a2:	86 95       	lsr	r24
    20a4:	77 95       	ror	r23
    20a6:	67 95       	ror	r22
    20a8:	b7 95       	ror	r27
    20aa:	f7 95       	ror	r31
    20ac:	e7 95       	ror	r30
    20ae:	9f 5f       	subi	r25, 0xFF	; 255
    20b0:	c1 f7       	brne	.-16     	; 0x20a2 <__mulsf3_pse+0x90>
    20b2:	fe 2b       	or	r31, r30
    20b4:	88 0f       	add	r24, r24
    20b6:	91 1d       	adc	r25, r1
    20b8:	96 95       	lsr	r25
    20ba:	87 95       	ror	r24
    20bc:	97 f9       	bld	r25, 7
    20be:	08 95       	ret

000020c0 <__fp_cmp>:
    20c0:	99 0f       	add	r25, r25
    20c2:	00 08       	sbc	r0, r0
    20c4:	55 0f       	add	r21, r21
    20c6:	aa 0b       	sbc	r26, r26
    20c8:	e0 e8       	ldi	r30, 0x80	; 128
    20ca:	fe ef       	ldi	r31, 0xFE	; 254
    20cc:	16 16       	cp	r1, r22
    20ce:	17 06       	cpc	r1, r23
    20d0:	e8 07       	cpc	r30, r24
    20d2:	f9 07       	cpc	r31, r25
    20d4:	c0 f0       	brcs	.+48     	; 0x2106 <__fp_cmp+0x46>
    20d6:	12 16       	cp	r1, r18
    20d8:	13 06       	cpc	r1, r19
    20da:	e4 07       	cpc	r30, r20
    20dc:	f5 07       	cpc	r31, r21
    20de:	98 f0       	brcs	.+38     	; 0x2106 <__fp_cmp+0x46>
    20e0:	62 1b       	sub	r22, r18
    20e2:	73 0b       	sbc	r23, r19
    20e4:	84 0b       	sbc	r24, r20
    20e6:	95 0b       	sbc	r25, r21
    20e8:	39 f4       	brne	.+14     	; 0x20f8 <__fp_cmp+0x38>
    20ea:	0a 26       	eor	r0, r26
    20ec:	61 f0       	breq	.+24     	; 0x2106 <__fp_cmp+0x46>
    20ee:	23 2b       	or	r18, r19
    20f0:	24 2b       	or	r18, r20
    20f2:	25 2b       	or	r18, r21
    20f4:	21 f4       	brne	.+8      	; 0x20fe <__fp_cmp+0x3e>
    20f6:	08 95       	ret
    20f8:	0a 26       	eor	r0, r26
    20fa:	09 f4       	brne	.+2      	; 0x20fe <__fp_cmp+0x3e>
    20fc:	a1 40       	sbci	r26, 0x01	; 1
    20fe:	a6 95       	lsr	r26
    2100:	8f ef       	ldi	r24, 0xFF	; 255
    2102:	81 1d       	adc	r24, r1
    2104:	81 1d       	adc	r24, r1
    2106:	08 95       	ret

00002108 <__cxa_pure_virtual>:
    2108:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <abort>

0000210c <initVariant>:
    210c:	08 95       	ret

0000210e <main>:
    210e:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <init>
    2112:	0e 94 86 10 	call	0x210c	; 0x210c <initVariant>
    2116:	8f ed       	ldi	r24, 0xDF	; 223
    2118:	93 e0       	ldi	r25, 0x03	; 3
    211a:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <_ZN10USBDevice_6attachEv>
    211e:	0e 94 84 03 	call	0x708	; 0x708 <setup>
    2122:	c0 e0       	ldi	r28, 0x00	; 0
    2124:	d0 e0       	ldi	r29, 0x00	; 0
    2126:	0e 94 c5 03 	call	0x78a	; 0x78a <loop>
    212a:	20 97       	sbiw	r28, 0x00	; 0
    212c:	e1 f3       	breq	.-8      	; 0x2126 <main+0x18>
    212e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2132:	f9 cf       	rjmp	.-14     	; 0x2126 <main+0x18>

00002134 <_ZN5Print5writeEPKhj>:
    2134:	cf 92       	push	r12
    2136:	df 92       	push	r13
    2138:	ef 92       	push	r14
    213a:	ff 92       	push	r15
    213c:	0f 93       	push	r16
    213e:	1f 93       	push	r17
    2140:	cf 93       	push	r28
    2142:	df 93       	push	r29
    2144:	6c 01       	movw	r12, r24
    2146:	7a 01       	movw	r14, r20
    2148:	8b 01       	movw	r16, r22
    214a:	c0 e0       	ldi	r28, 0x00	; 0
    214c:	d0 e0       	ldi	r29, 0x00	; 0
    214e:	ce 15       	cp	r28, r14
    2150:	df 05       	cpc	r29, r15
    2152:	81 f0       	breq	.+32     	; 0x2174 <_ZN5Print5writeEPKhj+0x40>
    2154:	d8 01       	movw	r26, r16
    2156:	6d 91       	ld	r22, X+
    2158:	8d 01       	movw	r16, r26
    215a:	d6 01       	movw	r26, r12
    215c:	ed 91       	ld	r30, X+
    215e:	fc 91       	ld	r31, X
    2160:	01 90       	ld	r0, Z+
    2162:	f0 81       	ld	r31, Z
    2164:	e0 2d       	mov	r30, r0
    2166:	c6 01       	movw	r24, r12
    2168:	09 95       	icall
    216a:	89 2b       	or	r24, r25
    216c:	11 f0       	breq	.+4      	; 0x2172 <_ZN5Print5writeEPKhj+0x3e>
    216e:	21 96       	adiw	r28, 0x01	; 1
    2170:	ee cf       	rjmp	.-36     	; 0x214e <_ZN5Print5writeEPKhj+0x1a>
    2172:	7e 01       	movw	r14, r28
    2174:	c7 01       	movw	r24, r14
    2176:	df 91       	pop	r29
    2178:	cf 91       	pop	r28
    217a:	1f 91       	pop	r17
    217c:	0f 91       	pop	r16
    217e:	ff 90       	pop	r15
    2180:	ef 90       	pop	r14
    2182:	df 90       	pop	r13
    2184:	cf 90       	pop	r12
    2186:	08 95       	ret

00002188 <_ZN5Print5writeEPKc>:
    2188:	61 15       	cp	r22, r1
    218a:	71 05       	cpc	r23, r1
    218c:	79 f0       	breq	.+30     	; 0x21ac <_ZN5Print5writeEPKc+0x24>
    218e:	fb 01       	movw	r30, r22
    2190:	01 90       	ld	r0, Z+
    2192:	00 20       	and	r0, r0
    2194:	e9 f7       	brne	.-6      	; 0x2190 <_ZN5Print5writeEPKc+0x8>
    2196:	31 97       	sbiw	r30, 0x01	; 1
    2198:	af 01       	movw	r20, r30
    219a:	46 1b       	sub	r20, r22
    219c:	57 0b       	sbc	r21, r23
    219e:	dc 01       	movw	r26, r24
    21a0:	ed 91       	ld	r30, X+
    21a2:	fc 91       	ld	r31, X
    21a4:	02 80       	ldd	r0, Z+2	; 0x02
    21a6:	f3 81       	ldd	r31, Z+3	; 0x03
    21a8:	e0 2d       	mov	r30, r0
    21aa:	09 94       	ijmp
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	08 95       	ret

000021b2 <_ZN5Print5printERK6String>:
    21b2:	db 01       	movw	r26, r22
    21b4:	14 96       	adiw	r26, 0x04	; 4
    21b6:	4d 91       	ld	r20, X+
    21b8:	5c 91       	ld	r21, X
    21ba:	15 97       	sbiw	r26, 0x05	; 5
    21bc:	6d 91       	ld	r22, X+
    21be:	7c 91       	ld	r23, X
    21c0:	dc 01       	movw	r26, r24
    21c2:	ed 91       	ld	r30, X+
    21c4:	fc 91       	ld	r31, X
    21c6:	02 80       	ldd	r0, Z+2	; 0x02
    21c8:	f3 81       	ldd	r31, Z+3	; 0x03
    21ca:	e0 2d       	mov	r30, r0
    21cc:	09 94       	ijmp

000021ce <_ZN5Print5printEPKc>:
    21ce:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <_ZN5Print5writeEPKc>

000021d2 <_ZN5Print5printEc>:
    21d2:	dc 01       	movw	r26, r24
    21d4:	ed 91       	ld	r30, X+
    21d6:	fc 91       	ld	r31, X
    21d8:	01 90       	ld	r0, Z+
    21da:	f0 81       	ld	r31, Z
    21dc:	e0 2d       	mov	r30, r0
    21de:	09 94       	ijmp

000021e0 <_ZN5Print11printNumberEmh>:
    21e0:	8f 92       	push	r8
    21e2:	9f 92       	push	r9
    21e4:	af 92       	push	r10
    21e6:	bf 92       	push	r11
    21e8:	ef 92       	push	r14
    21ea:	ff 92       	push	r15
    21ec:	0f 93       	push	r16
    21ee:	1f 93       	push	r17
    21f0:	cf 93       	push	r28
    21f2:	df 93       	push	r29
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    21f8:	a1 97       	sbiw	r28, 0x21	; 33
    21fa:	0f b6       	in	r0, 0x3f	; 63
    21fc:	f8 94       	cli
    21fe:	de bf       	out	0x3e, r29	; 62
    2200:	0f be       	out	0x3f, r0	; 63
    2202:	cd bf       	out	0x3d, r28	; 61
    2204:	7c 01       	movw	r14, r24
    2206:	fa 01       	movw	r30, r20
    2208:	cb 01       	movw	r24, r22
    220a:	19 a2       	std	Y+33, r1	; 0x21
    220c:	22 30       	cpi	r18, 0x02	; 2
    220e:	08 f4       	brcc	.+2      	; 0x2212 <_ZN5Print11printNumberEmh+0x32>
    2210:	2a e0       	ldi	r18, 0x0A	; 10
    2212:	8e 01       	movw	r16, r28
    2214:	0f 5d       	subi	r16, 0xDF	; 223
    2216:	1f 4f       	sbci	r17, 0xFF	; 255
    2218:	82 2e       	mov	r8, r18
    221a:	91 2c       	mov	r9, r1
    221c:	a1 2c       	mov	r10, r1
    221e:	b1 2c       	mov	r11, r1
    2220:	bf 01       	movw	r22, r30
    2222:	a5 01       	movw	r20, r10
    2224:	94 01       	movw	r18, r8
    2226:	0e 94 b1 1b 	call	0x3762	; 0x3762 <__udivmodsi4>
    222a:	f9 01       	movw	r30, r18
    222c:	ca 01       	movw	r24, r20
    222e:	01 50       	subi	r16, 0x01	; 1
    2230:	11 09       	sbc	r17, r1
    2232:	6a 30       	cpi	r22, 0x0A	; 10
    2234:	10 f4       	brcc	.+4      	; 0x223a <_ZN5Print11printNumberEmh+0x5a>
    2236:	60 5d       	subi	r22, 0xD0	; 208
    2238:	01 c0       	rjmp	.+2      	; 0x223c <_ZN5Print11printNumberEmh+0x5c>
    223a:	69 5c       	subi	r22, 0xC9	; 201
    223c:	d8 01       	movw	r26, r16
    223e:	6c 93       	st	X, r22
    2240:	23 2b       	or	r18, r19
    2242:	24 2b       	or	r18, r20
    2244:	25 2b       	or	r18, r21
    2246:	61 f7       	brne	.-40     	; 0x2220 <_ZN5Print11printNumberEmh+0x40>
    2248:	b8 01       	movw	r22, r16
    224a:	c7 01       	movw	r24, r14
    224c:	0e 94 c4 10 	call	0x2188	; 0x2188 <_ZN5Print5writeEPKc>
    2250:	a1 96       	adiw	r28, 0x21	; 33
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	de bf       	out	0x3e, r29	; 62
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	cd bf       	out	0x3d, r28	; 61
    225c:	df 91       	pop	r29
    225e:	cf 91       	pop	r28
    2260:	1f 91       	pop	r17
    2262:	0f 91       	pop	r16
    2264:	ff 90       	pop	r15
    2266:	ef 90       	pop	r14
    2268:	bf 90       	pop	r11
    226a:	af 90       	pop	r10
    226c:	9f 90       	pop	r9
    226e:	8f 90       	pop	r8
    2270:	08 95       	ret

00002272 <_ZN5Print5printEmi>:
    2272:	21 15       	cp	r18, r1
    2274:	31 05       	cpc	r19, r1
    2276:	41 f4       	brne	.+16     	; 0x2288 <_ZN5Print5printEmi+0x16>
    2278:	dc 01       	movw	r26, r24
    227a:	ed 91       	ld	r30, X+
    227c:	fc 91       	ld	r31, X
    227e:	01 90       	ld	r0, Z+
    2280:	f0 81       	ld	r31, Z
    2282:	e0 2d       	mov	r30, r0
    2284:	64 2f       	mov	r22, r20
    2286:	09 94       	ijmp
    2288:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <_ZN5Print11printNumberEmh>

0000228c <_ZN5Print5printEji>:
    228c:	9a 01       	movw	r18, r20
    228e:	ab 01       	movw	r20, r22
    2290:	60 e0       	ldi	r22, 0x00	; 0
    2292:	70 e0       	ldi	r23, 0x00	; 0
    2294:	0c 94 39 11 	jmp	0x2272	; 0x2272 <_ZN5Print5printEmi>

00002298 <_ZN5Print5printEli>:
    2298:	cf 92       	push	r12
    229a:	df 92       	push	r13
    229c:	ef 92       	push	r14
    229e:	ff 92       	push	r15
    22a0:	0f 93       	push	r16
    22a2:	1f 93       	push	r17
    22a4:	cf 93       	push	r28
    22a6:	df 93       	push	r29
    22a8:	21 15       	cp	r18, r1
    22aa:	31 05       	cpc	r19, r1
    22ac:	81 f4       	brne	.+32     	; 0x22ce <_ZN5Print5printEli+0x36>
    22ae:	dc 01       	movw	r26, r24
    22b0:	ed 91       	ld	r30, X+
    22b2:	fc 91       	ld	r31, X
    22b4:	01 90       	ld	r0, Z+
    22b6:	f0 81       	ld	r31, Z
    22b8:	e0 2d       	mov	r30, r0
    22ba:	64 2f       	mov	r22, r20
    22bc:	df 91       	pop	r29
    22be:	cf 91       	pop	r28
    22c0:	1f 91       	pop	r17
    22c2:	0f 91       	pop	r16
    22c4:	ff 90       	pop	r15
    22c6:	ef 90       	pop	r14
    22c8:	df 90       	pop	r13
    22ca:	cf 90       	pop	r12
    22cc:	09 94       	ijmp
    22ce:	2a 30       	cpi	r18, 0x0A	; 10
    22d0:	31 05       	cpc	r19, r1
    22d2:	01 f5       	brne	.+64     	; 0x2314 <_ZN5Print5printEli+0x7c>
    22d4:	77 ff       	sbrs	r23, 7
    22d6:	1d c0       	rjmp	.+58     	; 0x2312 <_ZN5Print5printEli+0x7a>
    22d8:	6a 01       	movw	r12, r20
    22da:	7b 01       	movw	r14, r22
    22dc:	ec 01       	movw	r28, r24
    22de:	6d e2       	ldi	r22, 0x2D	; 45
    22e0:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <_ZN5Print5printEc>
    22e4:	8c 01       	movw	r16, r24
    22e6:	44 27       	eor	r20, r20
    22e8:	55 27       	eor	r21, r21
    22ea:	ba 01       	movw	r22, r20
    22ec:	4c 19       	sub	r20, r12
    22ee:	5d 09       	sbc	r21, r13
    22f0:	6e 09       	sbc	r22, r14
    22f2:	7f 09       	sbc	r23, r15
    22f4:	2a e0       	ldi	r18, 0x0A	; 10
    22f6:	ce 01       	movw	r24, r28
    22f8:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <_ZN5Print11printNumberEmh>
    22fc:	80 0f       	add	r24, r16
    22fe:	91 1f       	adc	r25, r17
    2300:	df 91       	pop	r29
    2302:	cf 91       	pop	r28
    2304:	1f 91       	pop	r17
    2306:	0f 91       	pop	r16
    2308:	ff 90       	pop	r15
    230a:	ef 90       	pop	r14
    230c:	df 90       	pop	r13
    230e:	cf 90       	pop	r12
    2310:	08 95       	ret
    2312:	2a e0       	ldi	r18, 0x0A	; 10
    2314:	df 91       	pop	r29
    2316:	cf 91       	pop	r28
    2318:	1f 91       	pop	r17
    231a:	0f 91       	pop	r16
    231c:	ff 90       	pop	r15
    231e:	ef 90       	pop	r14
    2320:	df 90       	pop	r13
    2322:	cf 90       	pop	r12
    2324:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <_ZN5Print11printNumberEmh>

00002328 <_ZN5Print5printEii>:
    2328:	9a 01       	movw	r18, r20
    232a:	ab 01       	movw	r20, r22
    232c:	77 0f       	add	r23, r23
    232e:	66 0b       	sbc	r22, r22
    2330:	77 0b       	sbc	r23, r23
    2332:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <_ZN5Print5printEli>

00002336 <_ZN5Print10printFloatEdh>:
    2336:	7f 92       	push	r7
    2338:	8f 92       	push	r8
    233a:	9f 92       	push	r9
    233c:	af 92       	push	r10
    233e:	bf 92       	push	r11
    2340:	cf 92       	push	r12
    2342:	df 92       	push	r13
    2344:	ef 92       	push	r14
    2346:	ff 92       	push	r15
    2348:	0f 93       	push	r16
    234a:	1f 93       	push	r17
    234c:	cf 93       	push	r28
    234e:	df 93       	push	r29
    2350:	8c 01       	movw	r16, r24
    2352:	6a 01       	movw	r12, r20
    2354:	7b 01       	movw	r14, r22
    2356:	72 2e       	mov	r7, r18
    2358:	9a 01       	movw	r18, r20
    235a:	ab 01       	movw	r20, r22
    235c:	c7 01       	movw	r24, r14
    235e:	b6 01       	movw	r22, r12
    2360:	0e 94 98 1b 	call	0x3730	; 0x3730 <__unordsf2>
    2364:	88 23       	and	r24, r24
    2366:	19 f0       	breq	.+6      	; 0x236e <_ZN5Print10printFloatEdh+0x38>
    2368:	6f e2       	ldi	r22, 0x2F	; 47
    236a:	72 e0       	ldi	r23, 0x02	; 2
    236c:	27 c0       	rjmp	.+78     	; 0x23bc <_ZN5Print10printFloatEdh+0x86>
    236e:	46 01       	movw	r8, r12
    2370:	57 01       	movw	r10, r14
    2372:	e8 94       	clt
    2374:	b7 f8       	bld	r11, 7
    2376:	2f ef       	ldi	r18, 0xFF	; 255
    2378:	3f ef       	ldi	r19, 0xFF	; 255
    237a:	4f e7       	ldi	r20, 0x7F	; 127
    237c:	5f e7       	ldi	r21, 0x7F	; 127
    237e:	c5 01       	movw	r24, r10
    2380:	b4 01       	movw	r22, r8
    2382:	0e 94 98 1b 	call	0x3730	; 0x3730 <__unordsf2>
    2386:	81 11       	cpse	r24, r1
    2388:	0d c0       	rjmp	.+26     	; 0x23a4 <_ZN5Print10printFloatEdh+0x6e>
    238a:	2f ef       	ldi	r18, 0xFF	; 255
    238c:	3f ef       	ldi	r19, 0xFF	; 255
    238e:	4f e7       	ldi	r20, 0x7F	; 127
    2390:	5f e7       	ldi	r21, 0x7F	; 127
    2392:	c5 01       	movw	r24, r10
    2394:	b4 01       	movw	r22, r8
    2396:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__cmpsf2>
    239a:	18 16       	cp	r1, r24
    239c:	1c f4       	brge	.+6      	; 0x23a4 <_ZN5Print10printFloatEdh+0x6e>
    239e:	63 e3       	ldi	r22, 0x33	; 51
    23a0:	72 e0       	ldi	r23, 0x02	; 2
    23a2:	0c c0       	rjmp	.+24     	; 0x23bc <_ZN5Print10printFloatEdh+0x86>
    23a4:	2f ef       	ldi	r18, 0xFF	; 255
    23a6:	3f ef       	ldi	r19, 0xFF	; 255
    23a8:	4f e7       	ldi	r20, 0x7F	; 127
    23aa:	5f e4       	ldi	r21, 0x4F	; 79
    23ac:	c7 01       	movw	r24, r14
    23ae:	b6 01       	movw	r22, r12
    23b0:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__gesf2>
    23b4:	18 16       	cp	r1, r24
    23b6:	94 f4       	brge	.+36     	; 0x23dc <_ZN5Print10printFloatEdh+0xa6>
    23b8:	67 e3       	ldi	r22, 0x37	; 55
    23ba:	72 e0       	ldi	r23, 0x02	; 2
    23bc:	c8 01       	movw	r24, r16
    23be:	df 91       	pop	r29
    23c0:	cf 91       	pop	r28
    23c2:	1f 91       	pop	r17
    23c4:	0f 91       	pop	r16
    23c6:	ff 90       	pop	r15
    23c8:	ef 90       	pop	r14
    23ca:	df 90       	pop	r13
    23cc:	cf 90       	pop	r12
    23ce:	bf 90       	pop	r11
    23d0:	af 90       	pop	r10
    23d2:	9f 90       	pop	r9
    23d4:	8f 90       	pop	r8
    23d6:	7f 90       	pop	r7
    23d8:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <_ZN5Print5writeEPKc>
    23dc:	2f ef       	ldi	r18, 0xFF	; 255
    23de:	3f ef       	ldi	r19, 0xFF	; 255
    23e0:	4f e7       	ldi	r20, 0x7F	; 127
    23e2:	5f ec       	ldi	r21, 0xCF	; 207
    23e4:	c7 01       	movw	r24, r14
    23e6:	b6 01       	movw	r22, r12
    23e8:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__cmpsf2>
    23ec:	87 fd       	sbrc	r24, 7
    23ee:	e4 cf       	rjmp	.-56     	; 0x23b8 <_ZN5Print10printFloatEdh+0x82>
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	a9 01       	movw	r20, r18
    23f6:	c7 01       	movw	r24, r14
    23f8:	b6 01       	movw	r22, r12
    23fa:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__cmpsf2>
    23fe:	87 ff       	sbrs	r24, 7
    2400:	0a c0       	rjmp	.+20     	; 0x2416 <_ZN5Print10printFloatEdh+0xe0>
    2402:	6d e2       	ldi	r22, 0x2D	; 45
    2404:	c8 01       	movw	r24, r16
    2406:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <_ZN5Print5printEc>
    240a:	ec 01       	movw	r28, r24
    240c:	f7 fa       	bst	r15, 7
    240e:	f0 94       	com	r15
    2410:	f7 f8       	bld	r15, 7
    2412:	f0 94       	com	r15
    2414:	02 c0       	rjmp	.+4      	; 0x241a <_ZN5Print10printFloatEdh+0xe4>
    2416:	c0 e0       	ldi	r28, 0x00	; 0
    2418:	d0 e0       	ldi	r29, 0x00	; 0
    241a:	b1 2c       	mov	r11, r1
    241c:	60 e0       	ldi	r22, 0x00	; 0
    241e:	70 e0       	ldi	r23, 0x00	; 0
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	9f e3       	ldi	r25, 0x3F	; 63
    2424:	7b 14       	cp	r7, r11
    2426:	41 f0       	breq	.+16     	; 0x2438 <_ZN5Print10printFloatEdh+0x102>
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	40 e2       	ldi	r20, 0x20	; 32
    242e:	51 e4       	ldi	r21, 0x41	; 65
    2430:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__divsf3>
    2434:	b3 94       	inc	r11
    2436:	f6 cf       	rjmp	.-20     	; 0x2424 <_ZN5Print10printFloatEdh+0xee>
    2438:	a7 01       	movw	r20, r14
    243a:	96 01       	movw	r18, r12
    243c:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <__addsf3>
    2440:	6b 01       	movw	r12, r22
    2442:	7c 01       	movw	r14, r24
    2444:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <__fixunssfsi>
    2448:	4b 01       	movw	r8, r22
    244a:	5c 01       	movw	r10, r24
    244c:	2a e0       	ldi	r18, 0x0A	; 10
    244e:	ab 01       	movw	r20, r22
    2450:	bc 01       	movw	r22, r24
    2452:	c8 01       	movw	r24, r16
    2454:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <_ZN5Print11printNumberEmh>
    2458:	c8 0f       	add	r28, r24
    245a:	d9 1f       	adc	r29, r25
    245c:	77 20       	and	r7, r7
    245e:	b9 f1       	breq	.+110    	; 0x24ce <_ZN5Print10printFloatEdh+0x198>
    2460:	c5 01       	movw	r24, r10
    2462:	b4 01       	movw	r22, r8
    2464:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__floatunsisf>
    2468:	9b 01       	movw	r18, r22
    246a:	ac 01       	movw	r20, r24
    246c:	c7 01       	movw	r24, r14
    246e:	b6 01       	movw	r22, r12
    2470:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <__subsf3>
    2474:	6b 01       	movw	r12, r22
    2476:	7c 01       	movw	r14, r24
    2478:	6e e2       	ldi	r22, 0x2E	; 46
    247a:	c8 01       	movw	r24, r16
    247c:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <_ZN5Print5printEc>
    2480:	c8 0f       	add	r28, r24
    2482:	d9 1f       	adc	r29, r25
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e2       	ldi	r20, 0x20	; 32
    248a:	51 e4       	ldi	r21, 0x41	; 65
    248c:	c7 01       	movw	r24, r14
    248e:	b6 01       	movw	r22, r12
    2490:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__mulsf3>
    2494:	4b 01       	movw	r8, r22
    2496:	5c 01       	movw	r10, r24
    2498:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <__fixunssfsi>
    249c:	6b 01       	movw	r12, r22
    249e:	7c 01       	movw	r14, r24
    24a0:	4a e0       	ldi	r20, 0x0A	; 10
    24a2:	50 e0       	ldi	r21, 0x00	; 0
    24a4:	c8 01       	movw	r24, r16
    24a6:	0e 94 46 11 	call	0x228c	; 0x228c <_ZN5Print5printEji>
    24aa:	c8 0f       	add	r28, r24
    24ac:	d9 1f       	adc	r29, r25
    24ae:	b6 01       	movw	r22, r12
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__floatunsisf>
    24b8:	9b 01       	movw	r18, r22
    24ba:	ac 01       	movw	r20, r24
    24bc:	c5 01       	movw	r24, r10
    24be:	b4 01       	movw	r22, r8
    24c0:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <__subsf3>
    24c4:	6b 01       	movw	r12, r22
    24c6:	7c 01       	movw	r14, r24
    24c8:	7a 94       	dec	r7
    24ca:	71 10       	cpse	r7, r1
    24cc:	db cf       	rjmp	.-74     	; 0x2484 <_ZN5Print10printFloatEdh+0x14e>
    24ce:	ce 01       	movw	r24, r28
    24d0:	df 91       	pop	r29
    24d2:	cf 91       	pop	r28
    24d4:	1f 91       	pop	r17
    24d6:	0f 91       	pop	r16
    24d8:	ff 90       	pop	r15
    24da:	ef 90       	pop	r14
    24dc:	df 90       	pop	r13
    24de:	cf 90       	pop	r12
    24e0:	bf 90       	pop	r11
    24e2:	af 90       	pop	r10
    24e4:	9f 90       	pop	r9
    24e6:	8f 90       	pop	r8
    24e8:	7f 90       	pop	r7
    24ea:	08 95       	ret

000024ec <_ZN5Print5printEdi>:
    24ec:	0c 94 9b 11 	jmp	0x2336	; 0x2336 <_ZN5Print10printFloatEdh>

000024f0 <_ZL4RecvPVhh>:
    24f0:	61 50       	subi	r22, 0x01	; 1
    24f2:	30 f0       	brcs	.+12     	; 0x2500 <_ZL4RecvPVhh+0x10>
    24f4:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    24f8:	fc 01       	movw	r30, r24
    24fa:	20 83       	st	Z, r18
    24fc:	01 96       	adiw	r24, 0x01	; 1
    24fe:	f8 cf       	rjmp	.-16     	; 0x24f0 <_ZL4RecvPVhh>
    2500:	28 98       	cbi	0x05, 0	; 5
    2502:	84 e6       	ldi	r24, 0x64	; 100
    2504:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <RxLEDPulse>
    2508:	08 95       	ret

0000250a <_ZL11SendControlh>:
    250a:	40 91 e2 03 	lds	r20, 0x03E2	; 0x8003e2 <_ZL6_cmark>
    250e:	50 91 e3 03 	lds	r21, 0x03E3	; 0x8003e3 <_ZL6_cmark+0x1>
    2512:	20 91 e0 03 	lds	r18, 0x03E0	; 0x8003e0 <_ZL5_cend>
    2516:	30 91 e1 03 	lds	r19, 0x03E1	; 0x8003e1 <_ZL5_cend+0x1>
    251a:	42 17       	cp	r20, r18
    251c:	53 07       	cpc	r21, r19
    251e:	b4 f4       	brge	.+44     	; 0x254c <_ZL11SendControlh+0x42>
    2520:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2524:	95 70       	andi	r25, 0x05	; 5
    2526:	e1 f3       	breq	.-8      	; 0x2520 <_ZL11SendControlh+0x16>
    2528:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    252c:	92 fd       	sbrc	r25, 2
    252e:	19 c0       	rjmp	.+50     	; 0x2562 <_ZL11SendControlh+0x58>
    2530:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2534:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <_ZL6_cmark>
    2538:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <_ZL6_cmark+0x1>
    253c:	01 96       	adiw	r24, 0x01	; 1
    253e:	8f 73       	andi	r24, 0x3F	; 63
    2540:	99 27       	eor	r25, r25
    2542:	89 2b       	or	r24, r25
    2544:	19 f4       	brne	.+6      	; 0x254c <_ZL11SendControlh+0x42>
    2546:	8e ef       	ldi	r24, 0xFE	; 254
    2548:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    254c:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <_ZL6_cmark>
    2550:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <_ZL6_cmark+0x1>
    2554:	01 96       	adiw	r24, 0x01	; 1
    2556:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <_ZL6_cmark+0x1>
    255a:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <_ZL6_cmark>
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	08 95       	ret
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	08 95       	ret

00002566 <_ZL24USB_SendStringDescriptorPKhhh>:
    2566:	df 92       	push	r13
    2568:	ef 92       	push	r14
    256a:	ff 92       	push	r15
    256c:	0f 93       	push	r16
    256e:	1f 93       	push	r17
    2570:	cf 93       	push	r28
    2572:	df 93       	push	r29
    2574:	d8 2e       	mov	r13, r24
    2576:	f9 2e       	mov	r15, r25
    2578:	e4 2e       	mov	r14, r20
    257a:	06 2f       	mov	r16, r22
    257c:	10 e0       	ldi	r17, 0x00	; 0
    257e:	c8 01       	movw	r24, r16
    2580:	01 96       	adiw	r24, 0x01	; 1
    2582:	88 0f       	add	r24, r24
    2584:	0e 94 85 12 	call	0x250a	; 0x250a <_ZL11SendControlh>
    2588:	83 e0       	ldi	r24, 0x03	; 3
    258a:	0e 94 85 12 	call	0x250a	; 0x250a <_ZL11SendControlh>
    258e:	cd 2d       	mov	r28, r13
    2590:	df 2d       	mov	r29, r15
    2592:	0c 0f       	add	r16, r28
    2594:	1d 1f       	adc	r17, r29
    2596:	c0 17       	cp	r28, r16
    2598:	d1 07       	cpc	r29, r17
    259a:	89 f0       	breq	.+34     	; 0x25be <_ZL24USB_SendStringDescriptorPKhhh+0x58>
    259c:	e7 fe       	sbrs	r14, 7
    259e:	03 c0       	rjmp	.+6      	; 0x25a6 <_ZL24USB_SendStringDescriptorPKhhh+0x40>
    25a0:	fe 01       	movw	r30, r28
    25a2:	84 91       	lpm	r24, Z
    25a4:	01 c0       	rjmp	.+2      	; 0x25a8 <_ZL24USB_SendStringDescriptorPKhhh+0x42>
    25a6:	88 81       	ld	r24, Y
    25a8:	0e 94 85 12 	call	0x250a	; 0x250a <_ZL11SendControlh>
    25ac:	f8 2e       	mov	r15, r24
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	0e 94 85 12 	call	0x250a	; 0x250a <_ZL11SendControlh>
    25b4:	8f 21       	and	r24, r15
    25b6:	21 96       	adiw	r28, 0x01	; 1
    25b8:	81 11       	cpse	r24, r1
    25ba:	ed cf       	rjmp	.-38     	; 0x2596 <_ZL24USB_SendStringDescriptorPKhhh+0x30>
    25bc:	01 c0       	rjmp	.+2      	; 0x25c0 <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	df 91       	pop	r29
    25c2:	cf 91       	pop	r28
    25c4:	1f 91       	pop	r17
    25c6:	0f 91       	pop	r16
    25c8:	ff 90       	pop	r15
    25ca:	ef 90       	pop	r14
    25cc:	df 90       	pop	r13
    25ce:	08 95       	ret

000025d0 <_ZL15USB_ClockEnablev>:
    25d0:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    25d4:	81 60       	ori	r24, 0x01	; 1
    25d6:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    25da:	80 ea       	ldi	r24, 0xA0	; 160
    25dc:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    25e0:	89 b5       	in	r24, 0x29	; 41
    25e2:	80 61       	ori	r24, 0x10	; 16
    25e4:	89 bd       	out	0x29, r24	; 41
    25e6:	89 b5       	in	r24, 0x29	; 41
    25e8:	82 60       	ori	r24, 0x02	; 2
    25ea:	89 bd       	out	0x29, r24	; 41
    25ec:	09 b4       	in	r0, 0x29	; 41
    25ee:	00 fe       	sbrs	r0, 0
    25f0:	fd cf       	rjmp	.-6      	; 0x25ec <_ZL15USB_ClockEnablev+0x1c>
    25f2:	61 e0       	ldi	r22, 0x01	; 1
    25f4:	70 e0       	ldi	r23, 0x00	; 0
    25f6:	80 e0       	ldi	r24, 0x00	; 0
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <delay>
    25fe:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2602:	8f 7c       	andi	r24, 0xCF	; 207
    2604:	80 61       	ori	r24, 0x10	; 16
    2606:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    260a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    260e:	80 7f       	andi	r24, 0xF0	; 240
    2610:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2614:	08 95       	ret

00002616 <_ZL14SendInterfacesv>:
    2616:	cf 93       	push	r28
    2618:	df 93       	push	r29
    261a:	1f 92       	push	r1
    261c:	cd b7       	in	r28, 0x3d	; 61
    261e:	de b7       	in	r29, 0x3e	; 62
    2620:	19 82       	std	Y+1, r1	; 0x01
    2622:	ce 01       	movw	r24, r28
    2624:	01 96       	adiw	r24, 0x01	; 1
    2626:	0e 94 af 19 	call	0x335e	; 0x335e <_Z16CDC_GetInterfacePh>
    262a:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_Z12PluggableUSBv>
    262e:	be 01       	movw	r22, r28
    2630:	6f 5f       	subi	r22, 0xFF	; 255
    2632:	7f 4f       	sbci	r23, 0xFF	; 255
    2634:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <_ZN13PluggableUSB_12getInterfaceEPh>
    2638:	89 81       	ldd	r24, Y+1	; 0x01
    263a:	0f 90       	pop	r0
    263c:	df 91       	pop	r29
    263e:	cf 91       	pop	r28
    2640:	08 95       	ret

00002642 <_ZN6LockEPC1Eh>:
    2642:	2f b7       	in	r18, 0x3f	; 63
    2644:	fc 01       	movw	r30, r24
    2646:	20 83       	st	Z, r18
    2648:	f8 94       	cli
    264a:	67 70       	andi	r22, 0x07	; 7
    264c:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2650:	08 95       	ret

00002652 <_Z13USB_Availableh>:
    2652:	cf 93       	push	r28
    2654:	df 93       	push	r29
    2656:	1f 92       	push	r1
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
    265c:	68 2f       	mov	r22, r24
    265e:	ce 01       	movw	r24, r28
    2660:	01 96       	adiw	r24, 0x01	; 1
    2662:	0e 94 21 13 	call	0x2642	; 0x2642 <_ZN6LockEPC1Eh>
    2666:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    266a:	99 81       	ldd	r25, Y+1	; 0x01
    266c:	9f bf       	out	0x3f, r25	; 63
    266e:	0f 90       	pop	r0
    2670:	df 91       	pop	r29
    2672:	cf 91       	pop	r28
    2674:	08 95       	ret

00002676 <_Z8USB_RecvhPvi>:
    2676:	ef 92       	push	r14
    2678:	ff 92       	push	r15
    267a:	0f 93       	push	r16
    267c:	1f 93       	push	r17
    267e:	cf 93       	push	r28
    2680:	df 93       	push	r29
    2682:	1f 92       	push	r1
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
    2688:	90 91 e6 03 	lds	r25, 0x03E6	; 0x8003e6 <_usbConfiguration>
    268c:	99 23       	and	r25, r25
    268e:	11 f0       	breq	.+4      	; 0x2694 <_Z8USB_RecvhPvi+0x1e>
    2690:	57 ff       	sbrs	r21, 7
    2692:	03 c0       	rjmp	.+6      	; 0x269a <_Z8USB_RecvhPvi+0x24>
    2694:	8f ef       	ldi	r24, 0xFF	; 255
    2696:	9f ef       	ldi	r25, 0xFF	; 255
    2698:	29 c0       	rjmp	.+82     	; 0x26ec <_Z8USB_RecvhPvi+0x76>
    269a:	8a 01       	movw	r16, r20
    269c:	7b 01       	movw	r14, r22
    269e:	68 2f       	mov	r22, r24
    26a0:	ce 01       	movw	r24, r28
    26a2:	01 96       	adiw	r24, 0x01	; 1
    26a4:	0e 94 21 13 	call	0x2642	; 0x2642 <_ZN6LockEPC1Eh>
    26a8:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	02 17       	cp	r16, r18
    26b0:	13 07       	cpc	r17, r19
    26b2:	0c f4       	brge	.+2      	; 0x26b6 <_Z8USB_RecvhPvi+0x40>
    26b4:	98 01       	movw	r18, r16
    26b6:	82 2f       	mov	r24, r18
    26b8:	f7 01       	movw	r30, r14
    26ba:	94 e6       	ldi	r25, 0x64	; 100
    26bc:	81 50       	subi	r24, 0x01	; 1
    26be:	38 f0       	brcs	.+14     	; 0x26ce <_Z8USB_RecvhPvi+0x58>
    26c0:	28 98       	cbi	0x05, 0	; 5
    26c2:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <RxLEDPulse>
    26c6:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    26ca:	41 93       	st	Z+, r20
    26cc:	f7 cf       	rjmp	.-18     	; 0x26bc <_Z8USB_RecvhPvi+0x46>
    26ce:	21 15       	cp	r18, r1
    26d0:	31 05       	cpc	r19, r1
    26d2:	21 f0       	breq	.+8      	; 0x26dc <_Z8USB_RecvhPvi+0x66>
    26d4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    26d8:	88 23       	and	r24, r24
    26da:	21 f0       	breq	.+8      	; 0x26e4 <_Z8USB_RecvhPvi+0x6e>
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
    26de:	8f bf       	out	0x3f, r24	; 63
    26e0:	c9 01       	movw	r24, r18
    26e2:	04 c0       	rjmp	.+8      	; 0x26ec <_Z8USB_RecvhPvi+0x76>
    26e4:	8b e6       	ldi	r24, 0x6B	; 107
    26e6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    26ea:	f8 cf       	rjmp	.-16     	; 0x26dc <_Z8USB_RecvhPvi+0x66>
    26ec:	0f 90       	pop	r0
    26ee:	df 91       	pop	r29
    26f0:	cf 91       	pop	r28
    26f2:	1f 91       	pop	r17
    26f4:	0f 91       	pop	r16
    26f6:	ff 90       	pop	r15
    26f8:	ef 90       	pop	r14
    26fa:	08 95       	ret

000026fc <_Z8USB_Recvh>:
    26fc:	cf 93       	push	r28
    26fe:	df 93       	push	r29
    2700:	1f 92       	push	r1
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62
    2706:	41 e0       	ldi	r20, 0x01	; 1
    2708:	50 e0       	ldi	r21, 0x00	; 0
    270a:	be 01       	movw	r22, r28
    270c:	6f 5f       	subi	r22, 0xFF	; 255
    270e:	7f 4f       	sbci	r23, 0xFF	; 255
    2710:	0e 94 3b 13 	call	0x2676	; 0x2676 <_Z8USB_RecvhPvi>
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	19 f4       	brne	.+6      	; 0x271e <_Z8USB_Recvh+0x22>
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	02 c0       	rjmp	.+4      	; 0x2722 <_Z8USB_Recvh+0x26>
    271e:	8f ef       	ldi	r24, 0xFF	; 255
    2720:	9f ef       	ldi	r25, 0xFF	; 255
    2722:	0f 90       	pop	r0
    2724:	df 91       	pop	r29
    2726:	cf 91       	pop	r28
    2728:	08 95       	ret

0000272a <_Z13USB_SendSpaceh>:
    272a:	cf 93       	push	r28
    272c:	df 93       	push	r29
    272e:	1f 92       	push	r1
    2730:	cd b7       	in	r28, 0x3d	; 61
    2732:	de b7       	in	r29, 0x3e	; 62
    2734:	68 2f       	mov	r22, r24
    2736:	ce 01       	movw	r24, r28
    2738:	01 96       	adiw	r24, 0x01	; 1
    273a:	0e 94 21 13 	call	0x2642	; 0x2642 <_ZN6LockEPC1Eh>
    273e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2742:	89 2f       	mov	r24, r25
    2744:	80 72       	andi	r24, 0x20	; 32
    2746:	95 ff       	sbrs	r25, 5
    2748:	04 c0       	rjmp	.+8      	; 0x2752 <_Z13USB_SendSpaceh+0x28>
    274a:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    274e:	80 e4       	ldi	r24, 0x40	; 64
    2750:	89 1b       	sub	r24, r25
    2752:	99 81       	ldd	r25, Y+1	; 0x01
    2754:	9f bf       	out	0x3f, r25	; 63
    2756:	0f 90       	pop	r0
    2758:	df 91       	pop	r29
    275a:	cf 91       	pop	r28
    275c:	08 95       	ret

0000275e <_Z8USB_SendhPKvi>:
    275e:	5f 92       	push	r5
    2760:	6f 92       	push	r6
    2762:	7f 92       	push	r7
    2764:	8f 92       	push	r8
    2766:	9f 92       	push	r9
    2768:	af 92       	push	r10
    276a:	bf 92       	push	r11
    276c:	cf 92       	push	r12
    276e:	df 92       	push	r13
    2770:	ef 92       	push	r14
    2772:	ff 92       	push	r15
    2774:	0f 93       	push	r16
    2776:	1f 93       	push	r17
    2778:	cf 93       	push	r28
    277a:	df 93       	push	r29
    277c:	1f 92       	push	r1
    277e:	cd b7       	in	r28, 0x3d	; 61
    2780:	de b7       	in	r29, 0x3e	; 62
    2782:	98 2e       	mov	r9, r24
    2784:	6b 01       	movw	r12, r22
    2786:	b4 2e       	mov	r11, r20
    2788:	05 2f       	mov	r16, r21
    278a:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <_usbConfiguration>
    278e:	81 11       	cpse	r24, r1
    2790:	03 c0       	rjmp	.+6      	; 0x2798 <_Z8USB_SendhPKvi+0x3a>
    2792:	8f ef       	ldi	r24, 0xFF	; 255
    2794:	9f ef       	ldi	r25, 0xFF	; 255
    2796:	77 c0       	rjmp	.+238    	; 0x2886 <_Z8USB_SendhPKvi+0x128>
    2798:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <_usbSuspendState>
    279c:	80 ff       	sbrs	r24, 0
    279e:	05 c0       	rjmp	.+10     	; 0x27aa <_Z8USB_SendhPKvi+0x4c>
    27a0:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    27a4:	82 60       	ori	r24, 0x02	; 2
    27a6:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    27aa:	eb 2c       	mov	r14, r11
    27ac:	f0 2e       	mov	r15, r16
    27ae:	a1 2c       	mov	r10, r1
    27b0:	8a ef       	ldi	r24, 0xFA	; 250
    27b2:	88 2e       	mov	r8, r24
    27b4:	89 2d       	mov	r24, r9
    27b6:	80 72       	andi	r24, 0x20	; 32
    27b8:	68 2e       	mov	r6, r24
    27ba:	89 2d       	mov	r24, r9
    27bc:	80 74       	andi	r24, 0x40	; 64
    27be:	58 2e       	mov	r5, r24
    27c0:	9a e3       	ldi	r25, 0x3A	; 58
    27c2:	79 2e       	mov	r7, r25
    27c4:	e1 14       	cp	r14, r1
    27c6:	f1 04       	cpc	r15, r1
    27c8:	19 f4       	brne	.+6      	; 0x27d0 <_Z8USB_SendhPKvi+0x72>
    27ca:	aa 20       	and	r10, r10
    27cc:	09 f4       	brne	.+2      	; 0x27d0 <_Z8USB_SendhPKvi+0x72>
    27ce:	55 c0       	rjmp	.+170    	; 0x287a <_Z8USB_SendhPKvi+0x11c>
    27d0:	89 2d       	mov	r24, r9
    27d2:	0e 94 95 13 	call	0x272a	; 0x272a <_Z13USB_SendSpaceh>
    27d6:	18 2f       	mov	r17, r24
    27d8:	81 11       	cpse	r24, r1
    27da:	0a c0       	rjmp	.+20     	; 0x27f0 <_Z8USB_SendhPKvi+0x92>
    27dc:	8a 94       	dec	r8
    27de:	88 20       	and	r8, r8
    27e0:	c1 f2       	breq	.-80     	; 0x2792 <_Z8USB_SendhPKvi+0x34>
    27e2:	61 e0       	ldi	r22, 0x01	; 1
    27e4:	70 e0       	ldi	r23, 0x00	; 0
    27e6:	80 e0       	ldi	r24, 0x00	; 0
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <delay>
    27ee:	ea cf       	rjmp	.-44     	; 0x27c4 <_Z8USB_SendhPKvi+0x66>
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	e8 16       	cp	r14, r24
    27f4:	f9 06       	cpc	r15, r25
    27f6:	0c f4       	brge	.+2      	; 0x27fa <_Z8USB_SendhPKvi+0x9c>
    27f8:	1e 2d       	mov	r17, r14
    27fa:	69 2d       	mov	r22, r9
    27fc:	ce 01       	movw	r24, r28
    27fe:	01 96       	adiw	r24, 0x01	; 1
    2800:	0e 94 21 13 	call	0x2642	; 0x2642 <_ZN6LockEPC1Eh>
    2804:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2808:	85 ff       	sbrs	r24, 5
    280a:	34 c0       	rjmp	.+104    	; 0x2874 <_Z8USB_SendhPKvi+0x116>
    280c:	81 2f       	mov	r24, r17
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	e8 1a       	sub	r14, r24
    2812:	f9 0a       	sbc	r15, r25
    2814:	66 20       	and	r6, r6
    2816:	29 f0       	breq	.+10     	; 0x2822 <_Z8USB_SendhPKvi+0xc4>
    2818:	11 50       	subi	r17, 0x01	; 1
    281a:	a0 f0       	brcs	.+40     	; 0x2844 <_Z8USB_SendhPKvi+0xe6>
    281c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2820:	fb cf       	rjmp	.-10     	; 0x2818 <_Z8USB_SendhPKvi+0xba>
    2822:	f6 01       	movw	r30, r12
    2824:	97 fe       	sbrs	r9, 7
    2826:	0a c0       	rjmp	.+20     	; 0x283c <_Z8USB_SendhPKvi+0xde>
    2828:	11 50       	subi	r17, 0x01	; 1
    282a:	50 f0       	brcs	.+20     	; 0x2840 <_Z8USB_SendhPKvi+0xe2>
    282c:	24 91       	lpm	r18, Z
    282e:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2832:	31 96       	adiw	r30, 0x01	; 1
    2834:	f9 cf       	rjmp	.-14     	; 0x2828 <_Z8USB_SendhPKvi+0xca>
    2836:	21 91       	ld	r18, Z+
    2838:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    283c:	11 50       	subi	r17, 0x01	; 1
    283e:	d8 f7       	brcc	.-10     	; 0x2836 <_Z8USB_SendhPKvi+0xd8>
    2840:	c8 0e       	add	r12, r24
    2842:	d9 1e       	adc	r13, r25
    2844:	aa 20       	and	r10, r10
    2846:	19 f0       	breq	.+6      	; 0x284e <_Z8USB_SendhPKvi+0xf0>
    2848:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    284c:	0b c0       	rjmp	.+22     	; 0x2864 <_Z8USB_SendhPKvi+0x106>
    284e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2852:	85 fd       	sbrc	r24, 5
    2854:	09 c0       	rjmp	.+18     	; 0x2868 <_Z8USB_SendhPKvi+0x10a>
    2856:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    285a:	aa 24       	eor	r10, r10
    285c:	a3 94       	inc	r10
    285e:	e1 14       	cp	r14, r1
    2860:	f1 04       	cpc	r15, r1
    2862:	41 f0       	breq	.+16     	; 0x2874 <_Z8USB_SendhPKvi+0x116>
    2864:	a1 2c       	mov	r10, r1
    2866:	06 c0       	rjmp	.+12     	; 0x2874 <_Z8USB_SendhPKvi+0x116>
    2868:	e1 14       	cp	r14, r1
    286a:	f1 04       	cpc	r15, r1
    286c:	19 f4       	brne	.+6      	; 0x2874 <_Z8USB_SendhPKvi+0x116>
    286e:	51 10       	cpse	r5, r1
    2870:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2874:	89 81       	ldd	r24, Y+1	; 0x01
    2876:	8f bf       	out	0x3f, r24	; 63
    2878:	a5 cf       	rjmp	.-182    	; 0x27c4 <_Z8USB_SendhPKvi+0x66>
    287a:	5d 98       	cbi	0x0b, 5	; 11
    287c:	84 e6       	ldi	r24, 0x64	; 100
    287e:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <TxLEDPulse>
    2882:	8b 2d       	mov	r24, r11
    2884:	90 2f       	mov	r25, r16
    2886:	0f 90       	pop	r0
    2888:	df 91       	pop	r29
    288a:	cf 91       	pop	r28
    288c:	1f 91       	pop	r17
    288e:	0f 91       	pop	r16
    2890:	ff 90       	pop	r15
    2892:	ef 90       	pop	r14
    2894:	df 90       	pop	r13
    2896:	cf 90       	pop	r12
    2898:	bf 90       	pop	r11
    289a:	af 90       	pop	r10
    289c:	9f 90       	pop	r9
    289e:	8f 90       	pop	r8
    28a0:	7f 90       	pop	r7
    28a2:	6f 90       	pop	r6
    28a4:	5f 90       	pop	r5
    28a6:	08 95       	ret

000028a8 <_Z11InitControli>:
    28a8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    28ac:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <_ZL6_cmark+0x1>
    28b0:	10 92 e2 03 	sts	0x03E2, r1	; 0x8003e2 <_ZL6_cmark>
    28b4:	90 93 e1 03 	sts	0x03E1, r25	; 0x8003e1 <_ZL5_cend+0x1>
    28b8:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <_ZL5_cend>
    28bc:	08 95       	ret

000028be <_Z15USB_SendControlhPKvi>:
    28be:	df 92       	push	r13
    28c0:	ef 92       	push	r14
    28c2:	ff 92       	push	r15
    28c4:	0f 93       	push	r16
    28c6:	1f 93       	push	r17
    28c8:	cf 93       	push	r28
    28ca:	df 93       	push	r29
    28cc:	d8 2e       	mov	r13, r24
    28ce:	8a 01       	movw	r16, r20
    28d0:	7b 01       	movw	r14, r22
    28d2:	e4 0e       	add	r14, r20
    28d4:	f5 1e       	adc	r15, r21
    28d6:	eb 01       	movw	r28, r22
    28d8:	ce 15       	cp	r28, r14
    28da:	df 05       	cpc	r29, r15
    28dc:	71 f0       	breq	.+28     	; 0x28fa <_Z15USB_SendControlhPKvi+0x3c>
    28de:	d7 fe       	sbrs	r13, 7
    28e0:	03 c0       	rjmp	.+6      	; 0x28e8 <_Z15USB_SendControlhPKvi+0x2a>
    28e2:	fe 01       	movw	r30, r28
    28e4:	84 91       	lpm	r24, Z
    28e6:	01 c0       	rjmp	.+2      	; 0x28ea <_Z15USB_SendControlhPKvi+0x2c>
    28e8:	88 81       	ld	r24, Y
    28ea:	0e 94 85 12 	call	0x250a	; 0x250a <_ZL11SendControlh>
    28ee:	21 96       	adiw	r28, 0x01	; 1
    28f0:	81 11       	cpse	r24, r1
    28f2:	f2 cf       	rjmp	.-28     	; 0x28d8 <_Z15USB_SendControlhPKvi+0x1a>
    28f4:	8f ef       	ldi	r24, 0xFF	; 255
    28f6:	9f ef       	ldi	r25, 0xFF	; 255
    28f8:	01 c0       	rjmp	.+2      	; 0x28fc <_Z15USB_SendControlhPKvi+0x3e>
    28fa:	c8 01       	movw	r24, r16
    28fc:	df 91       	pop	r29
    28fe:	cf 91       	pop	r28
    2900:	1f 91       	pop	r17
    2902:	0f 91       	pop	r16
    2904:	ff 90       	pop	r15
    2906:	ef 90       	pop	r14
    2908:	df 90       	pop	r13
    290a:	08 95       	ret

0000290c <_Z15USB_RecvControlPvi>:
    290c:	af 92       	push	r10
    290e:	bf 92       	push	r11
    2910:	df 92       	push	r13
    2912:	ef 92       	push	r14
    2914:	ff 92       	push	r15
    2916:	0f 93       	push	r16
    2918:	1f 93       	push	r17
    291a:	cf 93       	push	r28
    291c:	df 93       	push	r29
    291e:	5c 01       	movw	r10, r24
    2920:	8b 01       	movw	r16, r22
    2922:	eb 01       	movw	r28, r22
    2924:	9b ef       	ldi	r25, 0xFB	; 251
    2926:	d9 2e       	mov	r13, r25
    2928:	20 97       	sbiw	r28, 0x00	; 0
    292a:	c1 f0       	breq	.+48     	; 0x295c <_Z15USB_RecvControlPvi+0x50>
    292c:	7e 01       	movw	r14, r28
    292e:	c1 34       	cpi	r28, 0x41	; 65
    2930:	d1 05       	cpc	r29, r1
    2932:	1c f0       	brlt	.+6      	; 0x293a <_Z15USB_RecvControlPvi+0x2e>
    2934:	80 e4       	ldi	r24, 0x40	; 64
    2936:	e8 2e       	mov	r14, r24
    2938:	f1 2c       	mov	r15, r1
    293a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    293e:	82 ff       	sbrs	r24, 2
    2940:	fc cf       	rjmp	.-8      	; 0x293a <_Z15USB_RecvControlPvi+0x2e>
    2942:	c8 01       	movw	r24, r16
    2944:	8c 1b       	sub	r24, r28
    2946:	9d 0b       	sbc	r25, r29
    2948:	6e 2d       	mov	r22, r14
    294a:	8a 0d       	add	r24, r10
    294c:	9b 1d       	adc	r25, r11
    294e:	0e 94 78 12 	call	0x24f0	; 0x24f0 <_ZL4RecvPVhh>
    2952:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2956:	ce 19       	sub	r28, r14
    2958:	df 09       	sbc	r29, r15
    295a:	e6 cf       	rjmp	.-52     	; 0x2928 <_Z15USB_RecvControlPvi+0x1c>
    295c:	c8 01       	movw	r24, r16
    295e:	df 91       	pop	r29
    2960:	cf 91       	pop	r28
    2962:	1f 91       	pop	r17
    2964:	0f 91       	pop	r16
    2966:	ff 90       	pop	r15
    2968:	ef 90       	pop	r14
    296a:	df 90       	pop	r13
    296c:	bf 90       	pop	r11
    296e:	af 90       	pop	r10
    2970:	08 95       	ret

00002972 <__vector_11>:
    2972:	1f 92       	push	r1
    2974:	0f 92       	push	r0
    2976:	0f b6       	in	r0, 0x3f	; 63
    2978:	0f 92       	push	r0
    297a:	11 24       	eor	r1, r1
    297c:	cf 92       	push	r12
    297e:	df 92       	push	r13
    2980:	ef 92       	push	r14
    2982:	ff 92       	push	r15
    2984:	0f 93       	push	r16
    2986:	1f 93       	push	r17
    2988:	2f 93       	push	r18
    298a:	3f 93       	push	r19
    298c:	4f 93       	push	r20
    298e:	5f 93       	push	r21
    2990:	6f 93       	push	r22
    2992:	7f 93       	push	r23
    2994:	8f 93       	push	r24
    2996:	9f 93       	push	r25
    2998:	af 93       	push	r26
    299a:	bf 93       	push	r27
    299c:	ef 93       	push	r30
    299e:	ff 93       	push	r31
    29a0:	cf 93       	push	r28
    29a2:	df 93       	push	r29
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	6c 97       	sbiw	r28, 0x1c	; 28
    29aa:	de bf       	out	0x3e, r29	; 62
    29ac:	cd bf       	out	0x3d, r28	; 61
    29ae:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    29b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    29b6:	83 ff       	sbrs	r24, 3
    29b8:	17 c1       	rjmp	.+558    	; 0x2be8 <__vector_11+0x276>
    29ba:	68 e0       	ldi	r22, 0x08	; 8
    29bc:	ce 01       	movw	r24, r28
    29be:	45 96       	adiw	r24, 0x15	; 21
    29c0:	0e 94 78 12 	call	0x24f0	; 0x24f0 <_ZL4RecvPVhh>
    29c4:	82 ef       	ldi	r24, 0xF2	; 242
    29c6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    29ca:	8d 89       	ldd	r24, Y+21	; 0x15
    29cc:	87 ff       	sbrs	r24, 7
    29ce:	05 c0       	rjmp	.+10     	; 0x29da <__vector_11+0x68>
    29d0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    29d4:	90 ff       	sbrs	r25, 0
    29d6:	fc cf       	rjmp	.-8      	; 0x29d0 <__vector_11+0x5e>
    29d8:	03 c0       	rjmp	.+6      	; 0x29e0 <__vector_11+0x6e>
    29da:	9e ef       	ldi	r25, 0xFE	; 254
    29dc:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    29e0:	98 2f       	mov	r25, r24
    29e2:	90 76       	andi	r25, 0x60	; 96
    29e4:	09 f0       	breq	.+2      	; 0x29e8 <__vector_11+0x76>
    29e6:	d8 c0       	rjmp	.+432    	; 0x2b98 <__vector_11+0x226>
    29e8:	9e 89       	ldd	r25, Y+22	; 0x16
    29ea:	4f 89       	ldd	r20, Y+23	; 0x17
    29ec:	58 8d       	ldd	r21, Y+24	; 0x18
    29ee:	2f 89       	ldd	r18, Y+23	; 0x17
    29f0:	18 8d       	ldd	r17, Y+24	; 0x18
    29f2:	91 11       	cpse	r25, r1
    29f4:	0c c0       	rjmp	.+24     	; 0x2a0e <__vector_11+0x9c>
    29f6:	80 38       	cpi	r24, 0x80	; 128
    29f8:	29 f4       	brne	.+10     	; 0x2a04 <__vector_11+0x92>
    29fa:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <_usbCurrentStatus>
    29fe:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2a02:	02 c0       	rjmp	.+4      	; 0x2a08 <__vector_11+0x96>
    2a04:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2a08:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2a0c:	e6 c0       	rjmp	.+460    	; 0x2bda <__vector_11+0x268>
    2a0e:	91 30       	cpi	r25, 0x01	; 1
    2a10:	51 f4       	brne	.+20     	; 0x2a26 <__vector_11+0xb4>
    2a12:	81 11       	cpse	r24, r1
    2a14:	e2 c0       	rjmp	.+452    	; 0x2bda <__vector_11+0x268>
    2a16:	41 30       	cpi	r20, 0x01	; 1
    2a18:	51 05       	cpc	r21, r1
    2a1a:	09 f0       	breq	.+2      	; 0x2a1e <__vector_11+0xac>
    2a1c:	de c0       	rjmp	.+444    	; 0x2bda <__vector_11+0x268>
    2a1e:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <_usbCurrentStatus>
    2a22:	8d 7f       	andi	r24, 0xFD	; 253
    2a24:	0b c0       	rjmp	.+22     	; 0x2a3c <__vector_11+0xca>
    2a26:	93 30       	cpi	r25, 0x03	; 3
    2a28:	61 f4       	brne	.+24     	; 0x2a42 <__vector_11+0xd0>
    2a2a:	81 11       	cpse	r24, r1
    2a2c:	d6 c0       	rjmp	.+428    	; 0x2bda <__vector_11+0x268>
    2a2e:	41 30       	cpi	r20, 0x01	; 1
    2a30:	51 05       	cpc	r21, r1
    2a32:	09 f0       	breq	.+2      	; 0x2a36 <__vector_11+0xc4>
    2a34:	d2 c0       	rjmp	.+420    	; 0x2bda <__vector_11+0x268>
    2a36:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <_usbCurrentStatus>
    2a3a:	82 60       	ori	r24, 0x02	; 2
    2a3c:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <_usbCurrentStatus>
    2a40:	cc c0       	rjmp	.+408    	; 0x2bda <__vector_11+0x268>
    2a42:	95 30       	cpi	r25, 0x05	; 5
    2a44:	49 f4       	brne	.+18     	; 0x2a58 <__vector_11+0xe6>
    2a46:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a4a:	80 ff       	sbrs	r24, 0
    2a4c:	fc cf       	rjmp	.-8      	; 0x2a46 <__vector_11+0xd4>
    2a4e:	82 2f       	mov	r24, r18
    2a50:	80 68       	ori	r24, 0x80	; 128
    2a52:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    2a56:	c1 c0       	rjmp	.+386    	; 0x2bda <__vector_11+0x268>
    2a58:	96 30       	cpi	r25, 0x06	; 6
    2a5a:	09 f0       	breq	.+2      	; 0x2a5e <__vector_11+0xec>
    2a5c:	70 c0       	rjmp	.+224    	; 0x2b3e <__vector_11+0x1cc>
    2a5e:	eb 8c       	ldd	r14, Y+27	; 0x1b
    2a60:	fc 8c       	ldd	r15, Y+28	; 0x1c
    2a62:	12 30       	cpi	r17, 0x02	; 2
    2a64:	69 f5       	brne	.+90     	; 0x2ac0 <__vector_11+0x14e>
    2a66:	80 e0       	ldi	r24, 0x00	; 0
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	0e 94 54 14 	call	0x28a8	; 0x28a8 <_Z11InitControli>
    2a6e:	0e 94 0b 13 	call	0x2616	; 0x2616 <_ZL14SendInterfacesv>
    2a72:	99 e0       	ldi	r25, 0x09	; 9
    2a74:	9e 01       	movw	r18, r28
    2a76:	2f 5f       	subi	r18, 0xFF	; 255
    2a78:	3f 4f       	sbci	r19, 0xFF	; 255
    2a7a:	69 01       	movw	r12, r18
    2a7c:	f9 01       	movw	r30, r18
    2a7e:	29 2f       	mov	r18, r25
    2a80:	11 92       	st	Z+, r1
    2a82:	2a 95       	dec	r18
    2a84:	e9 f7       	brne	.-6      	; 0x2a80 <__vector_11+0x10e>
    2a86:	99 83       	std	Y+1, r25	; 0x01
    2a88:	1a 83       	std	Y+2, r17	; 0x02
    2a8a:	91 e0       	ldi	r25, 0x01	; 1
    2a8c:	9e 83       	std	Y+6, r25	; 0x06
    2a8e:	90 ea       	ldi	r25, 0xA0	; 160
    2a90:	98 87       	std	Y+8, r25	; 0x08
    2a92:	9a ef       	ldi	r25, 0xFA	; 250
    2a94:	99 87       	std	Y+9, r25	; 0x09
    2a96:	20 91 e2 03 	lds	r18, 0x03E2	; 0x8003e2 <_ZL6_cmark>
    2a9a:	30 91 e3 03 	lds	r19, 0x03E3	; 0x8003e3 <_ZL6_cmark+0x1>
    2a9e:	27 5f       	subi	r18, 0xF7	; 247
    2aa0:	3f 4f       	sbci	r19, 0xFF	; 255
    2aa2:	3c 83       	std	Y+4, r19	; 0x04
    2aa4:	2b 83       	std	Y+3, r18	; 0x03
    2aa6:	8d 83       	std	Y+5, r24	; 0x05
    2aa8:	c7 01       	movw	r24, r14
    2aaa:	0e 94 54 14 	call	0x28a8	; 0x28a8 <_Z11InitControli>
    2aae:	49 e0       	ldi	r20, 0x09	; 9
    2ab0:	50 e0       	ldi	r21, 0x00	; 0
    2ab2:	b6 01       	movw	r22, r12
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	0e 94 5f 14 	call	0x28be	; 0x28be <_Z15USB_SendControlhPKvi>
    2aba:	0e 94 0b 13 	call	0x2616	; 0x2616 <_ZL14SendInterfacesv>
    2abe:	8d c0       	rjmp	.+282    	; 0x2bda <__vector_11+0x268>
    2ac0:	c7 01       	movw	r24, r14
    2ac2:	0e 94 54 14 	call	0x28a8	; 0x28a8 <_Z11InitControli>
    2ac6:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_Z12PluggableUSBv>
    2aca:	be 01       	movw	r22, r28
    2acc:	6b 5e       	subi	r22, 0xEB	; 235
    2ace:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad0:	0e 94 87 1a 	call	0x350e	; 0x350e <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    2ad4:	00 97       	sbiw	r24, 0x00	; 0
    2ad6:	19 f0       	breq	.+6      	; 0x2ade <__vector_11+0x16c>
    2ad8:	0c f0       	brlt	.+2      	; 0x2adc <__vector_11+0x16a>
    2ada:	7f c0       	rjmp	.+254    	; 0x2bda <__vector_11+0x268>
    2adc:	82 c0       	rjmp	.+260    	; 0x2be2 <__vector_11+0x270>
    2ade:	11 30       	cpi	r17, 0x01	; 1
    2ae0:	09 f4       	brne	.+2      	; 0x2ae4 <__vector_11+0x172>
    2ae2:	70 c0       	rjmp	.+224    	; 0x2bc4 <__vector_11+0x252>
    2ae4:	13 30       	cpi	r17, 0x03	; 3
    2ae6:	09 f0       	breq	.+2      	; 0x2aea <__vector_11+0x178>
    2ae8:	7c c0       	rjmp	.+248    	; 0x2be2 <__vector_11+0x270>
    2aea:	8f 89       	ldd	r24, Y+23	; 0x17
    2aec:	88 23       	and	r24, r24
    2aee:	09 f4       	brne	.+2      	; 0x2af2 <__vector_11+0x180>
    2af0:	6c c0       	rjmp	.+216    	; 0x2bca <__vector_11+0x258>
    2af2:	82 30       	cpi	r24, 0x02	; 2
    2af4:	29 f4       	brne	.+10     	; 0x2b00 <__vector_11+0x18e>
    2af6:	40 e8       	ldi	r20, 0x80	; 128
    2af8:	60 e1       	ldi	r22, 0x10	; 16
    2afa:	89 ee       	ldi	r24, 0xE9	; 233
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	06 c0       	rjmp	.+12     	; 0x2b0c <__vector_11+0x19a>
    2b00:	81 30       	cpi	r24, 0x01	; 1
    2b02:	39 f4       	brne	.+14     	; 0x2b12 <__vector_11+0x1a0>
    2b04:	40 e8       	ldi	r20, 0x80	; 128
    2b06:	6b e0       	ldi	r22, 0x0B	; 11
    2b08:	8d ed       	ldi	r24, 0xDD	; 221
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	0e 94 b3 12 	call	0x2566	; 0x2566 <_ZL24USB_SendStringDescriptorPKhhh>
    2b10:	56 c0       	rjmp	.+172    	; 0x2bbe <__vector_11+0x24c>
    2b12:	83 30       	cpi	r24, 0x03	; 3
    2b14:	09 f0       	breq	.+2      	; 0x2b18 <__vector_11+0x1a6>
    2b16:	65 c0       	rjmp	.+202    	; 0x2be2 <__vector_11+0x270>
    2b18:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_Z12PluggableUSBv>
    2b1c:	8e 01       	movw	r16, r28
    2b1e:	0f 5f       	subi	r16, 0xFF	; 255
    2b20:	1f 4f       	sbci	r17, 0xFF	; 255
    2b22:	b8 01       	movw	r22, r16
    2b24:	0e 94 a6 1a 	call	0x354c	; 0x354c <_ZN13PluggableUSB_12getShortNameEPc>
    2b28:	f8 01       	movw	r30, r16
    2b2a:	01 90       	ld	r0, Z+
    2b2c:	00 20       	and	r0, r0
    2b2e:	e9 f7       	brne	.-6      	; 0x2b2a <__vector_11+0x1b8>
    2b30:	31 97       	sbiw	r30, 0x01	; 1
    2b32:	bf 01       	movw	r22, r30
    2b34:	60 1b       	sub	r22, r16
    2b36:	71 0b       	sbc	r23, r17
    2b38:	40 e0       	ldi	r20, 0x00	; 0
    2b3a:	c8 01       	movw	r24, r16
    2b3c:	e7 cf       	rjmp	.-50     	; 0x2b0c <__vector_11+0x19a>
    2b3e:	97 30       	cpi	r25, 0x07	; 7
    2b40:	09 f4       	brne	.+2      	; 0x2b44 <__vector_11+0x1d2>
    2b42:	4f c0       	rjmp	.+158    	; 0x2be2 <__vector_11+0x270>
    2b44:	98 30       	cpi	r25, 0x08	; 8
    2b46:	21 f4       	brne	.+8      	; 0x2b50 <__vector_11+0x1de>
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2b4e:	45 c0       	rjmp	.+138    	; 0x2bda <__vector_11+0x268>
    2b50:	99 30       	cpi	r25, 0x09	; 9
    2b52:	09 f0       	breq	.+2      	; 0x2b56 <__vector_11+0x1e4>
    2b54:	42 c0       	rjmp	.+132    	; 0x2bda <__vector_11+0x268>
    2b56:	83 70       	andi	r24, 0x03	; 3
    2b58:	09 f0       	breq	.+2      	; 0x2b5c <__vector_11+0x1ea>
    2b5a:	43 c0       	rjmp	.+134    	; 0x2be2 <__vector_11+0x270>
    2b5c:	eb e0       	ldi	r30, 0x0B	; 11
    2b5e:	f1 e0       	ldi	r31, 0x01	; 1
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	31 e0       	ldi	r19, 0x01	; 1
    2b64:	96 e3       	ldi	r25, 0x36	; 54
    2b66:	20 81       	ld	r18, Z
    2b68:	21 11       	cpse	r18, r1
    2b6a:	09 c0       	rjmp	.+18     	; 0x2b7e <__vector_11+0x20c>
    2b6c:	8e e7       	ldi	r24, 0x7E	; 126
    2b6e:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    2b72:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    2b76:	8f 89       	ldd	r24, Y+23	; 0x17
    2b78:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <_usbConfiguration>
    2b7c:	2e c0       	rjmp	.+92     	; 0x2bda <__vector_11+0x268>
    2b7e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2b82:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2b86:	21 91       	ld	r18, Z+
    2b88:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2b8c:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    2b90:	8f 5f       	subi	r24, 0xFF	; 255
    2b92:	87 30       	cpi	r24, 0x07	; 7
    2b94:	41 f7       	brne	.-48     	; 0x2b66 <__vector_11+0x1f4>
    2b96:	ea cf       	rjmp	.-44     	; 0x2b6c <__vector_11+0x1fa>
    2b98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b9c:	0e 94 54 14 	call	0x28a8	; 0x28a8 <_Z11InitControli>
    2ba0:	89 8d       	ldd	r24, Y+25	; 0x19
    2ba2:	81 11       	cpse	r24, r1
    2ba4:	05 c0       	rjmp	.+10     	; 0x2bb0 <__vector_11+0x23e>
    2ba6:	ce 01       	movw	r24, r28
    2ba8:	45 96       	adiw	r24, 0x15	; 21
    2baa:	0e 94 ba 19 	call	0x3374	; 0x3374 <_Z9CDC_SetupR8USBSetup>
    2bae:	07 c0       	rjmp	.+14     	; 0x2bbe <__vector_11+0x24c>
    2bb0:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <_Z12PluggableUSBv>
    2bb4:	be 01       	movw	r22, r28
    2bb6:	6b 5e       	subi	r22, 0xEB	; 235
    2bb8:	7f 4f       	sbci	r23, 0xFF	; 255
    2bba:	0e 94 c5 1a 	call	0x358a	; 0x358a <_ZN13PluggableUSB_5setupER8USBSetup>
    2bbe:	88 23       	and	r24, r24
    2bc0:	81 f0       	breq	.+32     	; 0x2be2 <__vector_11+0x270>
    2bc2:	0b c0       	rjmp	.+22     	; 0x2bda <__vector_11+0x268>
    2bc4:	6b ec       	ldi	r22, 0xCB	; 203
    2bc6:	70 e0       	ldi	r23, 0x00	; 0
    2bc8:	02 c0       	rjmp	.+4      	; 0x2bce <__vector_11+0x25c>
    2bca:	6a ef       	ldi	r22, 0xFA	; 250
    2bcc:	70 e0       	ldi	r23, 0x00	; 0
    2bce:	fb 01       	movw	r30, r22
    2bd0:	44 91       	lpm	r20, Z
    2bd2:	50 e0       	ldi	r21, 0x00	; 0
    2bd4:	80 e8       	ldi	r24, 0x80	; 128
    2bd6:	0e 94 5f 14 	call	0x28be	; 0x28be <_Z15USB_SendControlhPKvi>
    2bda:	8e ef       	ldi	r24, 0xFE	; 254
    2bdc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2be0:	03 c0       	rjmp	.+6      	; 0x2be8 <__vector_11+0x276>
    2be2:	81 e2       	ldi	r24, 0x21	; 33
    2be4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2be8:	6c 96       	adiw	r28, 0x1c	; 28
    2bea:	0f b6       	in	r0, 0x3f	; 63
    2bec:	f8 94       	cli
    2bee:	de bf       	out	0x3e, r29	; 62
    2bf0:	0f be       	out	0x3f, r0	; 63
    2bf2:	cd bf       	out	0x3d, r28	; 61
    2bf4:	df 91       	pop	r29
    2bf6:	cf 91       	pop	r28
    2bf8:	ff 91       	pop	r31
    2bfa:	ef 91       	pop	r30
    2bfc:	bf 91       	pop	r27
    2bfe:	af 91       	pop	r26
    2c00:	9f 91       	pop	r25
    2c02:	8f 91       	pop	r24
    2c04:	7f 91       	pop	r23
    2c06:	6f 91       	pop	r22
    2c08:	5f 91       	pop	r21
    2c0a:	4f 91       	pop	r20
    2c0c:	3f 91       	pop	r19
    2c0e:	2f 91       	pop	r18
    2c10:	1f 91       	pop	r17
    2c12:	0f 91       	pop	r16
    2c14:	ff 90       	pop	r15
    2c16:	ef 90       	pop	r14
    2c18:	df 90       	pop	r13
    2c1a:	cf 90       	pop	r12
    2c1c:	0f 90       	pop	r0
    2c1e:	0f be       	out	0x3f, r0	; 63
    2c20:	0f 90       	pop	r0
    2c22:	1f 90       	pop	r1
    2c24:	18 95       	reti

00002c26 <_Z9USB_Flushh>:
    2c26:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2c2a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2c2e:	88 23       	and	r24, r24
    2c30:	19 f0       	breq	.+6      	; 0x2c38 <_Z9USB_Flushh+0x12>
    2c32:	8a e3       	ldi	r24, 0x3A	; 58
    2c34:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2c38:	08 95       	ret

00002c3a <__vector_10>:
    2c3a:	1f 92       	push	r1
    2c3c:	0f 92       	push	r0
    2c3e:	0f b6       	in	r0, 0x3f	; 63
    2c40:	0f 92       	push	r0
    2c42:	11 24       	eor	r1, r1
    2c44:	2f 93       	push	r18
    2c46:	3f 93       	push	r19
    2c48:	4f 93       	push	r20
    2c4a:	5f 93       	push	r21
    2c4c:	6f 93       	push	r22
    2c4e:	7f 93       	push	r23
    2c50:	8f 93       	push	r24
    2c52:	9f 93       	push	r25
    2c54:	af 93       	push	r26
    2c56:	bf 93       	push	r27
    2c58:	cf 93       	push	r28
    2c5a:	ef 93       	push	r30
    2c5c:	ff 93       	push	r31
    2c5e:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2c62:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2c66:	83 7f       	andi	r24, 0xF3	; 243
    2c68:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2c6c:	c3 ff       	sbrs	r28, 3
    2c6e:	0f c0       	rjmp	.+30     	; 0x2c8e <__vector_10+0x54>
    2c70:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2c7a:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2c7e:	82 e3       	ldi	r24, 0x32	; 50
    2c80:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    2c84:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <_usbConfiguration>
    2c88:	88 e0       	ldi	r24, 0x08	; 8
    2c8a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    2c8e:	c2 ff       	sbrs	r28, 2
    2c90:	19 c0       	rjmp	.+50     	; 0x2cc4 <__vector_10+0x8a>
    2c92:	83 e0       	ldi	r24, 0x03	; 3
    2c94:	0e 94 13 16 	call	0x2c26	; 0x2c26 <_Z9USB_Flushh>
    2c98:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <TxLEDPulse>
    2c9c:	88 23       	and	r24, r24
    2c9e:	39 f0       	breq	.+14     	; 0x2cae <__vector_10+0x74>
    2ca0:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <TxLEDPulse>
    2ca4:	81 50       	subi	r24, 0x01	; 1
    2ca6:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <TxLEDPulse>
    2caa:	88 23       	and	r24, r24
    2cac:	89 f1       	breq	.+98     	; 0x2d10 <__vector_10+0xd6>
    2cae:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <RxLEDPulse>
    2cb2:	88 23       	and	r24, r24
    2cb4:	39 f0       	breq	.+14     	; 0x2cc4 <__vector_10+0x8a>
    2cb6:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <RxLEDPulse>
    2cba:	81 50       	subi	r24, 0x01	; 1
    2cbc:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <RxLEDPulse>
    2cc0:	88 23       	and	r24, r24
    2cc2:	41 f1       	breq	.+80     	; 0x2d14 <__vector_10+0xda>
    2cc4:	c4 ff       	sbrs	r28, 4
    2cc6:	10 c0       	rjmp	.+32     	; 0x2ce8 <__vector_10+0xae>
    2cc8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2ccc:	8e 7e       	andi	r24, 0xEE	; 238
    2cce:	81 60       	ori	r24, 0x01	; 1
    2cd0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2cd4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2cd8:	8f 7e       	andi	r24, 0xEF	; 239
    2cda:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2cde:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <_usbSuspendState>
    2ce2:	8e 7e       	andi	r24, 0xEE	; 238
    2ce4:	80 61       	ori	r24, 0x10	; 16
    2ce6:	11 c0       	rjmp	.+34     	; 0x2d0a <__vector_10+0xd0>
    2ce8:	c0 ff       	sbrs	r28, 0
    2cea:	16 c0       	rjmp	.+44     	; 0x2d18 <__vector_10+0xde>
    2cec:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2cf0:	8e 7e       	andi	r24, 0xEE	; 238
    2cf2:	80 61       	ori	r24, 0x10	; 16
    2cf4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2cf8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2cfc:	8e 7e       	andi	r24, 0xEE	; 238
    2cfe:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2d02:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <_usbSuspendState>
    2d06:	8e 7e       	andi	r24, 0xEE	; 238
    2d08:	81 60       	ori	r24, 0x01	; 1
    2d0a:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <_usbSuspendState>
    2d0e:	04 c0       	rjmp	.+8      	; 0x2d18 <__vector_10+0xde>
    2d10:	5d 9a       	sbi	0x0b, 5	; 11
    2d12:	cd cf       	rjmp	.-102    	; 0x2cae <__vector_10+0x74>
    2d14:	28 9a       	sbi	0x05, 0	; 5
    2d16:	d6 cf       	rjmp	.-84     	; 0x2cc4 <__vector_10+0x8a>
    2d18:	ff 91       	pop	r31
    2d1a:	ef 91       	pop	r30
    2d1c:	cf 91       	pop	r28
    2d1e:	bf 91       	pop	r27
    2d20:	af 91       	pop	r26
    2d22:	9f 91       	pop	r25
    2d24:	8f 91       	pop	r24
    2d26:	7f 91       	pop	r23
    2d28:	6f 91       	pop	r22
    2d2a:	5f 91       	pop	r21
    2d2c:	4f 91       	pop	r20
    2d2e:	3f 91       	pop	r19
    2d30:	2f 91       	pop	r18
    2d32:	0f 90       	pop	r0
    2d34:	0f be       	out	0x3f, r0	; 63
    2d36:	0f 90       	pop	r0
    2d38:	1f 90       	pop	r1
    2d3a:	18 95       	reti

00002d3c <_ZN10USBDevice_6attachEv>:
    2d3c:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <_usbConfiguration>
    2d40:	10 92 e5 03 	sts	0x03E5, r1	; 0x8003e5 <_usbCurrentStatus>
    2d44:	10 92 e4 03 	sts	0x03E4, r1	; 0x8003e4 <_usbSuspendState>
    2d48:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <_ZL15USB_ClockEnablev>
    2d4c:	e1 ee       	ldi	r30, 0xE1	; 225
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	80 81       	ld	r24, Z
    2d52:	8e 7e       	andi	r24, 0xEE	; 238
    2d54:	80 83       	st	Z, r24
    2d56:	8d e0       	ldi	r24, 0x0D	; 13
    2d58:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2d5c:	55 9a       	sbi	0x0a, 5	; 10
    2d5e:	20 9a       	sbi	0x04, 0	; 4
    2d60:	08 95       	ret

00002d62 <__vector_23>:
    2d62:	1f 92       	push	r1
    2d64:	0f 92       	push	r0
    2d66:	0f b6       	in	r0, 0x3f	; 63
    2d68:	0f 92       	push	r0
    2d6a:	11 24       	eor	r1, r1
    2d6c:	2f 93       	push	r18
    2d6e:	3f 93       	push	r19
    2d70:	8f 93       	push	r24
    2d72:	9f 93       	push	r25
    2d74:	af 93       	push	r26
    2d76:	bf 93       	push	r27
    2d78:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <timer0_millis>
    2d7c:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <timer0_millis+0x1>
    2d80:	a0 91 ec 03 	lds	r26, 0x03EC	; 0x8003ec <timer0_millis+0x2>
    2d84:	b0 91 ed 03 	lds	r27, 0x03ED	; 0x8003ed <timer0_millis+0x3>
    2d88:	30 91 e9 03 	lds	r19, 0x03E9	; 0x8003e9 <timer0_fract>
    2d8c:	23 e0       	ldi	r18, 0x03	; 3
    2d8e:	23 0f       	add	r18, r19
    2d90:	2d 37       	cpi	r18, 0x7D	; 125
    2d92:	20 f4       	brcc	.+8      	; 0x2d9c <__vector_23+0x3a>
    2d94:	01 96       	adiw	r24, 0x01	; 1
    2d96:	a1 1d       	adc	r26, r1
    2d98:	b1 1d       	adc	r27, r1
    2d9a:	05 c0       	rjmp	.+10     	; 0x2da6 <__vector_23+0x44>
    2d9c:	26 e8       	ldi	r18, 0x86	; 134
    2d9e:	23 0f       	add	r18, r19
    2da0:	02 96       	adiw	r24, 0x02	; 2
    2da2:	a1 1d       	adc	r26, r1
    2da4:	b1 1d       	adc	r27, r1
    2da6:	20 93 e9 03 	sts	0x03E9, r18	; 0x8003e9 <timer0_fract>
    2daa:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <timer0_millis>
    2dae:	90 93 eb 03 	sts	0x03EB, r25	; 0x8003eb <timer0_millis+0x1>
    2db2:	a0 93 ec 03 	sts	0x03EC, r26	; 0x8003ec <timer0_millis+0x2>
    2db6:	b0 93 ed 03 	sts	0x03ED, r27	; 0x8003ed <timer0_millis+0x3>
    2dba:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <timer0_overflow_count>
    2dbe:	90 91 ef 03 	lds	r25, 0x03EF	; 0x8003ef <timer0_overflow_count+0x1>
    2dc2:	a0 91 f0 03 	lds	r26, 0x03F0	; 0x8003f0 <timer0_overflow_count+0x2>
    2dc6:	b0 91 f1 03 	lds	r27, 0x03F1	; 0x8003f1 <timer0_overflow_count+0x3>
    2dca:	01 96       	adiw	r24, 0x01	; 1
    2dcc:	a1 1d       	adc	r26, r1
    2dce:	b1 1d       	adc	r27, r1
    2dd0:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <timer0_overflow_count>
    2dd4:	90 93 ef 03 	sts	0x03EF, r25	; 0x8003ef <timer0_overflow_count+0x1>
    2dd8:	a0 93 f0 03 	sts	0x03F0, r26	; 0x8003f0 <timer0_overflow_count+0x2>
    2ddc:	b0 93 f1 03 	sts	0x03F1, r27	; 0x8003f1 <timer0_overflow_count+0x3>
    2de0:	bf 91       	pop	r27
    2de2:	af 91       	pop	r26
    2de4:	9f 91       	pop	r25
    2de6:	8f 91       	pop	r24
    2de8:	3f 91       	pop	r19
    2dea:	2f 91       	pop	r18
    2dec:	0f 90       	pop	r0
    2dee:	0f be       	out	0x3f, r0	; 63
    2df0:	0f 90       	pop	r0
    2df2:	1f 90       	pop	r1
    2df4:	18 95       	reti

00002df6 <millis>:
    2df6:	2f b7       	in	r18, 0x3f	; 63
    2df8:	f8 94       	cli
    2dfa:	60 91 ea 03 	lds	r22, 0x03EA	; 0x8003ea <timer0_millis>
    2dfe:	70 91 eb 03 	lds	r23, 0x03EB	; 0x8003eb <timer0_millis+0x1>
    2e02:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <timer0_millis+0x2>
    2e06:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <timer0_millis+0x3>
    2e0a:	2f bf       	out	0x3f, r18	; 63
    2e0c:	08 95       	ret

00002e0e <micros>:
    2e0e:	3f b7       	in	r19, 0x3f	; 63
    2e10:	f8 94       	cli
    2e12:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <timer0_overflow_count>
    2e16:	90 91 ef 03 	lds	r25, 0x03EF	; 0x8003ef <timer0_overflow_count+0x1>
    2e1a:	a0 91 f0 03 	lds	r26, 0x03F0	; 0x8003f0 <timer0_overflow_count+0x2>
    2e1e:	b0 91 f1 03 	lds	r27, 0x03F1	; 0x8003f1 <timer0_overflow_count+0x3>
    2e22:	26 b5       	in	r18, 0x26	; 38
    2e24:	a8 9b       	sbis	0x15, 0	; 21
    2e26:	05 c0       	rjmp	.+10     	; 0x2e32 <micros+0x24>
    2e28:	2f 3f       	cpi	r18, 0xFF	; 255
    2e2a:	19 f0       	breq	.+6      	; 0x2e32 <micros+0x24>
    2e2c:	01 96       	adiw	r24, 0x01	; 1
    2e2e:	a1 1d       	adc	r26, r1
    2e30:	b1 1d       	adc	r27, r1
    2e32:	3f bf       	out	0x3f, r19	; 63
    2e34:	ba 2f       	mov	r27, r26
    2e36:	a9 2f       	mov	r26, r25
    2e38:	98 2f       	mov	r25, r24
    2e3a:	88 27       	eor	r24, r24
    2e3c:	82 0f       	add	r24, r18
    2e3e:	91 1d       	adc	r25, r1
    2e40:	a1 1d       	adc	r26, r1
    2e42:	b1 1d       	adc	r27, r1
    2e44:	bc 01       	movw	r22, r24
    2e46:	cd 01       	movw	r24, r26
    2e48:	42 e0       	ldi	r20, 0x02	; 2
    2e4a:	66 0f       	add	r22, r22
    2e4c:	77 1f       	adc	r23, r23
    2e4e:	88 1f       	adc	r24, r24
    2e50:	99 1f       	adc	r25, r25
    2e52:	4a 95       	dec	r20
    2e54:	d1 f7       	brne	.-12     	; 0x2e4a <micros+0x3c>
    2e56:	08 95       	ret

00002e58 <delay>:
    2e58:	8f 92       	push	r8
    2e5a:	9f 92       	push	r9
    2e5c:	af 92       	push	r10
    2e5e:	bf 92       	push	r11
    2e60:	cf 92       	push	r12
    2e62:	df 92       	push	r13
    2e64:	ef 92       	push	r14
    2e66:	ff 92       	push	r15
    2e68:	6b 01       	movw	r12, r22
    2e6a:	7c 01       	movw	r14, r24
    2e6c:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <micros>
    2e70:	4b 01       	movw	r8, r22
    2e72:	5c 01       	movw	r10, r24
    2e74:	c1 14       	cp	r12, r1
    2e76:	d1 04       	cpc	r13, r1
    2e78:	e1 04       	cpc	r14, r1
    2e7a:	f1 04       	cpc	r15, r1
    2e7c:	01 f1       	breq	.+64     	; 0x2ebe <delay+0x66>
    2e7e:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <yield>
    2e82:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <micros>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	88 19       	sub	r24, r8
    2e8c:	99 09       	sbc	r25, r9
    2e8e:	aa 09       	sbc	r26, r10
    2e90:	bb 09       	sbc	r27, r11
    2e92:	88 3e       	cpi	r24, 0xE8	; 232
    2e94:	93 40       	sbci	r25, 0x03	; 3
    2e96:	a1 05       	cpc	r26, r1
    2e98:	b1 05       	cpc	r27, r1
    2e9a:	60 f3       	brcs	.-40     	; 0x2e74 <delay+0x1c>
    2e9c:	21 e0       	ldi	r18, 0x01	; 1
    2e9e:	c2 1a       	sub	r12, r18
    2ea0:	d1 08       	sbc	r13, r1
    2ea2:	e1 08       	sbc	r14, r1
    2ea4:	f1 08       	sbc	r15, r1
    2ea6:	88 ee       	ldi	r24, 0xE8	; 232
    2ea8:	88 0e       	add	r8, r24
    2eaa:	83 e0       	ldi	r24, 0x03	; 3
    2eac:	98 1e       	adc	r9, r24
    2eae:	a1 1c       	adc	r10, r1
    2eb0:	b1 1c       	adc	r11, r1
    2eb2:	c1 14       	cp	r12, r1
    2eb4:	d1 04       	cpc	r13, r1
    2eb6:	e1 04       	cpc	r14, r1
    2eb8:	f1 04       	cpc	r15, r1
    2eba:	19 f7       	brne	.-58     	; 0x2e82 <delay+0x2a>
    2ebc:	db cf       	rjmp	.-74     	; 0x2e74 <delay+0x1c>
    2ebe:	ff 90       	pop	r15
    2ec0:	ef 90       	pop	r14
    2ec2:	df 90       	pop	r13
    2ec4:	cf 90       	pop	r12
    2ec6:	bf 90       	pop	r11
    2ec8:	af 90       	pop	r10
    2eca:	9f 90       	pop	r9
    2ecc:	8f 90       	pop	r8
    2ece:	08 95       	ret

00002ed0 <init>:
    2ed0:	78 94       	sei
    2ed2:	84 b5       	in	r24, 0x24	; 36
    2ed4:	82 60       	ori	r24, 0x02	; 2
    2ed6:	84 bd       	out	0x24, r24	; 36
    2ed8:	84 b5       	in	r24, 0x24	; 36
    2eda:	81 60       	ori	r24, 0x01	; 1
    2edc:	84 bd       	out	0x24, r24	; 36
    2ede:	85 b5       	in	r24, 0x25	; 37
    2ee0:	82 60       	ori	r24, 0x02	; 2
    2ee2:	85 bd       	out	0x25, r24	; 37
    2ee4:	85 b5       	in	r24, 0x25	; 37
    2ee6:	81 60       	ori	r24, 0x01	; 1
    2ee8:	85 bd       	out	0x25, r24	; 37
    2eea:	ee e6       	ldi	r30, 0x6E	; 110
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	80 81       	ld	r24, Z
    2ef0:	81 60       	ori	r24, 0x01	; 1
    2ef2:	80 83       	st	Z, r24
    2ef4:	e1 e8       	ldi	r30, 0x81	; 129
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	10 82       	st	Z, r1
    2efa:	80 81       	ld	r24, Z
    2efc:	82 60       	ori	r24, 0x02	; 2
    2efe:	80 83       	st	Z, r24
    2f00:	80 81       	ld	r24, Z
    2f02:	81 60       	ori	r24, 0x01	; 1
    2f04:	80 83       	st	Z, r24
    2f06:	e0 e8       	ldi	r30, 0x80	; 128
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	80 81       	ld	r24, Z
    2f0c:	81 60       	ori	r24, 0x01	; 1
    2f0e:	80 83       	st	Z, r24
    2f10:	e1 e9       	ldi	r30, 0x91	; 145
    2f12:	f0 e0       	ldi	r31, 0x00	; 0
    2f14:	80 81       	ld	r24, Z
    2f16:	82 60       	ori	r24, 0x02	; 2
    2f18:	80 83       	st	Z, r24
    2f1a:	80 81       	ld	r24, Z
    2f1c:	81 60       	ori	r24, 0x01	; 1
    2f1e:	80 83       	st	Z, r24
    2f20:	e0 e9       	ldi	r30, 0x90	; 144
    2f22:	f0 e0       	ldi	r31, 0x00	; 0
    2f24:	80 81       	ld	r24, Z
    2f26:	81 60       	ori	r24, 0x01	; 1
    2f28:	80 83       	st	Z, r24
    2f2a:	e1 ec       	ldi	r30, 0xC1	; 193
    2f2c:	f0 e0       	ldi	r31, 0x00	; 0
    2f2e:	80 81       	ld	r24, Z
    2f30:	84 60       	ori	r24, 0x04	; 4
    2f32:	80 83       	st	Z, r24
    2f34:	80 81       	ld	r24, Z
    2f36:	82 60       	ori	r24, 0x02	; 2
    2f38:	80 83       	st	Z, r24
    2f3a:	80 81       	ld	r24, Z
    2f3c:	81 60       	ori	r24, 0x01	; 1
    2f3e:	80 83       	st	Z, r24
    2f40:	e3 ec       	ldi	r30, 0xC3	; 195
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	80 81       	ld	r24, Z
    2f46:	81 60       	ori	r24, 0x01	; 1
    2f48:	80 83       	st	Z, r24
    2f4a:	e0 ec       	ldi	r30, 0xC0	; 192
    2f4c:	f0 e0       	ldi	r31, 0x00	; 0
    2f4e:	80 81       	ld	r24, Z
    2f50:	82 60       	ori	r24, 0x02	; 2
    2f52:	80 83       	st	Z, r24
    2f54:	e2 ec       	ldi	r30, 0xC2	; 194
    2f56:	f0 e0       	ldi	r31, 0x00	; 0
    2f58:	80 81       	ld	r24, Z
    2f5a:	81 60       	ori	r24, 0x01	; 1
    2f5c:	80 83       	st	Z, r24
    2f5e:	ea e7       	ldi	r30, 0x7A	; 122
    2f60:	f0 e0       	ldi	r31, 0x00	; 0
    2f62:	80 81       	ld	r24, Z
    2f64:	84 60       	ori	r24, 0x04	; 4
    2f66:	80 83       	st	Z, r24
    2f68:	80 81       	ld	r24, Z
    2f6a:	82 60       	ori	r24, 0x02	; 2
    2f6c:	80 83       	st	Z, r24
    2f6e:	80 81       	ld	r24, Z
    2f70:	81 60       	ori	r24, 0x01	; 1
    2f72:	80 83       	st	Z, r24
    2f74:	80 81       	ld	r24, Z
    2f76:	80 68       	ori	r24, 0x80	; 128
    2f78:	80 83       	st	Z, r24
    2f7a:	08 95       	ret

00002f7c <analogRead>:
    2f7c:	82 31       	cpi	r24, 0x12	; 18
    2f7e:	08 f0       	brcs	.+2      	; 0x2f82 <analogRead+0x6>
    2f80:	82 51       	subi	r24, 0x12	; 18
    2f82:	e8 2f       	mov	r30, r24
    2f84:	f0 e0       	ldi	r31, 0x00	; 0
    2f86:	e2 50       	subi	r30, 0x02	; 2
    2f88:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8a:	e4 91       	lpm	r30, Z
    2f8c:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    2f90:	e3 fb       	bst	r30, 3
    2f92:	22 27       	eor	r18, r18
    2f94:	20 f9       	bld	r18, 0
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	95 e0       	ldi	r25, 0x05	; 5
    2f9a:	22 0f       	add	r18, r18
    2f9c:	33 1f       	adc	r19, r19
    2f9e:	9a 95       	dec	r25
    2fa0:	e1 f7       	brne	.-8      	; 0x2f9a <analogRead+0x1e>
    2fa2:	8f 7d       	andi	r24, 0xDF	; 223
    2fa4:	28 2b       	or	r18, r24
    2fa6:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    2faa:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <analog_reference>
    2fae:	20 e4       	ldi	r18, 0x40	; 64
    2fb0:	82 9f       	mul	r24, r18
    2fb2:	c0 01       	movw	r24, r0
    2fb4:	11 24       	eor	r1, r1
    2fb6:	e7 70       	andi	r30, 0x07	; 7
    2fb8:	e8 2b       	or	r30, r24
    2fba:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2fbe:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2fc2:	80 64       	ori	r24, 0x40	; 64
    2fc4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2fc8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2fcc:	86 fd       	sbrc	r24, 6
    2fce:	fc cf       	rjmp	.-8      	; 0x2fc8 <analogRead+0x4c>
    2fd0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    2fd4:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	92 2b       	or	r25, r18
    2fdc:	08 95       	ret

00002fde <turnOffPWM>:
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	fc 01       	movw	r30, r24
    2fe2:	31 97       	sbiw	r30, 0x01	; 1
    2fe4:	ef 30       	cpi	r30, 0x0F	; 15
    2fe6:	f1 05       	cpc	r31, r1
    2fe8:	b0 f5       	brcc	.+108    	; 0x3056 <turnOffPWM+0x78>
    2fea:	ea 5a       	subi	r30, 0xAA	; 170
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__tablejump2__>
    2ff2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2ff6:	8f 77       	andi	r24, 0x7F	; 127
    2ff8:	03 c0       	rjmp	.+6      	; 0x3000 <turnOffPWM+0x22>
    2ffa:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2ffe:	8f 7d       	andi	r24, 0xDF	; 223
    3000:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3004:	08 95       	ret
    3006:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    300a:	87 7f       	andi	r24, 0xF7	; 247
    300c:	f9 cf       	rjmp	.-14     	; 0x3000 <turnOffPWM+0x22>
    300e:	84 b5       	in	r24, 0x24	; 36
    3010:	8f 77       	andi	r24, 0x7F	; 127
    3012:	02 c0       	rjmp	.+4      	; 0x3018 <turnOffPWM+0x3a>
    3014:	84 b5       	in	r24, 0x24	; 36
    3016:	8f 7d       	andi	r24, 0xDF	; 223
    3018:	84 bd       	out	0x24, r24	; 36
    301a:	08 95       	ret
    301c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    3020:	8f 77       	andi	r24, 0x7F	; 127
    3022:	07 c0       	rjmp	.+14     	; 0x3032 <turnOffPWM+0x54>
    3024:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    3028:	8f 7d       	andi	r24, 0xDF	; 223
    302a:	03 c0       	rjmp	.+6      	; 0x3032 <turnOffPWM+0x54>
    302c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    3030:	87 7f       	andi	r24, 0xF7	; 247
    3032:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    3036:	08 95       	ret
    3038:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    303c:	8f 77       	andi	r24, 0x7F	; 127
    303e:	03 c0       	rjmp	.+6      	; 0x3046 <turnOffPWM+0x68>
    3040:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3044:	8f 7d       	andi	r24, 0xDF	; 223
    3046:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    304a:	08 95       	ret
    304c:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    3050:	87 7f       	andi	r24, 0xF7	; 247
    3052:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    3056:	08 95       	ret

00003058 <pinMode>:
    3058:	cf 93       	push	r28
    305a:	df 93       	push	r29
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	fc 01       	movw	r30, r24
    3060:	e7 5d       	subi	r30, 0xD7	; 215
    3062:	fe 4f       	sbci	r31, 0xFE	; 254
    3064:	24 91       	lpm	r18, Z
    3066:	fc 01       	movw	r30, r24
    3068:	e8 5b       	subi	r30, 0xB8	; 184
    306a:	fe 4f       	sbci	r31, 0xFE	; 254
    306c:	84 91       	lpm	r24, Z
    306e:	88 23       	and	r24, r24
    3070:	61 f1       	breq	.+88     	; 0x30ca <pinMode+0x72>
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	88 0f       	add	r24, r24
    3076:	99 1f       	adc	r25, r25
    3078:	fc 01       	movw	r30, r24
    307a:	ed 57       	subi	r30, 0x7D	; 125
    307c:	fe 4f       	sbci	r31, 0xFE	; 254
    307e:	c5 91       	lpm	r28, Z+
    3080:	d4 91       	lpm	r29, Z
    3082:	fc 01       	movw	r30, r24
    3084:	eb 58       	subi	r30, 0x8B	; 139
    3086:	fe 4f       	sbci	r31, 0xFE	; 254
    3088:	a5 91       	lpm	r26, Z+
    308a:	b4 91       	lpm	r27, Z
    308c:	61 11       	cpse	r22, r1
    308e:	09 c0       	rjmp	.+18     	; 0x30a2 <pinMode+0x4a>
    3090:	9f b7       	in	r25, 0x3f	; 63
    3092:	f8 94       	cli
    3094:	88 81       	ld	r24, Y
    3096:	20 95       	com	r18
    3098:	82 23       	and	r24, r18
    309a:	88 83       	st	Y, r24
    309c:	ec 91       	ld	r30, X
    309e:	2e 23       	and	r18, r30
    30a0:	0b c0       	rjmp	.+22     	; 0x30b8 <pinMode+0x60>
    30a2:	62 30       	cpi	r22, 0x02	; 2
    30a4:	61 f4       	brne	.+24     	; 0x30be <pinMode+0x66>
    30a6:	9f b7       	in	r25, 0x3f	; 63
    30a8:	f8 94       	cli
    30aa:	88 81       	ld	r24, Y
    30ac:	32 2f       	mov	r19, r18
    30ae:	30 95       	com	r19
    30b0:	83 23       	and	r24, r19
    30b2:	88 83       	st	Y, r24
    30b4:	ec 91       	ld	r30, X
    30b6:	2e 2b       	or	r18, r30
    30b8:	2c 93       	st	X, r18
    30ba:	9f bf       	out	0x3f, r25	; 63
    30bc:	06 c0       	rjmp	.+12     	; 0x30ca <pinMode+0x72>
    30be:	8f b7       	in	r24, 0x3f	; 63
    30c0:	f8 94       	cli
    30c2:	e8 81       	ld	r30, Y
    30c4:	2e 2b       	or	r18, r30
    30c6:	28 83       	st	Y, r18
    30c8:	8f bf       	out	0x3f, r24	; 63
    30ca:	df 91       	pop	r29
    30cc:	cf 91       	pop	r28
    30ce:	08 95       	ret

000030d0 <digitalWrite>:
    30d0:	1f 93       	push	r17
    30d2:	cf 93       	push	r28
    30d4:	df 93       	push	r29
    30d6:	28 2f       	mov	r18, r24
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	f9 01       	movw	r30, r18
    30dc:	e6 5f       	subi	r30, 0xF6	; 246
    30de:	fe 4f       	sbci	r31, 0xFE	; 254
    30e0:	84 91       	lpm	r24, Z
    30e2:	f9 01       	movw	r30, r18
    30e4:	e7 5d       	subi	r30, 0xD7	; 215
    30e6:	fe 4f       	sbci	r31, 0xFE	; 254
    30e8:	d4 91       	lpm	r29, Z
    30ea:	f9 01       	movw	r30, r18
    30ec:	e8 5b       	subi	r30, 0xB8	; 184
    30ee:	fe 4f       	sbci	r31, 0xFE	; 254
    30f0:	c4 91       	lpm	r28, Z
    30f2:	cc 23       	and	r28, r28
    30f4:	c1 f0       	breq	.+48     	; 0x3126 <digitalWrite+0x56>
    30f6:	16 2f       	mov	r17, r22
    30f8:	81 11       	cpse	r24, r1
    30fa:	0e 94 ef 17 	call	0x2fde	; 0x2fde <turnOffPWM>
    30fe:	ec 2f       	mov	r30, r28
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	ee 0f       	add	r30, r30
    3104:	ff 1f       	adc	r31, r31
    3106:	eb 58       	subi	r30, 0x8B	; 139
    3108:	fe 4f       	sbci	r31, 0xFE	; 254
    310a:	a5 91       	lpm	r26, Z+
    310c:	b4 91       	lpm	r27, Z
    310e:	9f b7       	in	r25, 0x3f	; 63
    3110:	f8 94       	cli
    3112:	11 11       	cpse	r17, r1
    3114:	04 c0       	rjmp	.+8      	; 0x311e <digitalWrite+0x4e>
    3116:	8c 91       	ld	r24, X
    3118:	d0 95       	com	r29
    311a:	d8 23       	and	r29, r24
    311c:	02 c0       	rjmp	.+4      	; 0x3122 <digitalWrite+0x52>
    311e:	ec 91       	ld	r30, X
    3120:	de 2b       	or	r29, r30
    3122:	dc 93       	st	X, r29
    3124:	9f bf       	out	0x3f, r25	; 63
    3126:	df 91       	pop	r29
    3128:	cf 91       	pop	r28
    312a:	1f 91       	pop	r17
    312c:	08 95       	ret

0000312e <digitalRead>:
    312e:	cf 93       	push	r28
    3130:	df 93       	push	r29
    3132:	28 2f       	mov	r18, r24
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	f9 01       	movw	r30, r18
    3138:	e6 5f       	subi	r30, 0xF6	; 246
    313a:	fe 4f       	sbci	r31, 0xFE	; 254
    313c:	84 91       	lpm	r24, Z
    313e:	f9 01       	movw	r30, r18
    3140:	e7 5d       	subi	r30, 0xD7	; 215
    3142:	fe 4f       	sbci	r31, 0xFE	; 254
    3144:	d4 91       	lpm	r29, Z
    3146:	f9 01       	movw	r30, r18
    3148:	e8 5b       	subi	r30, 0xB8	; 184
    314a:	fe 4f       	sbci	r31, 0xFE	; 254
    314c:	c4 91       	lpm	r28, Z
    314e:	cc 23       	and	r28, r28
    3150:	91 f0       	breq	.+36     	; 0x3176 <digitalRead+0x48>
    3152:	81 11       	cpse	r24, r1
    3154:	0e 94 ef 17 	call	0x2fde	; 0x2fde <turnOffPWM>
    3158:	ec 2f       	mov	r30, r28
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	ee 0f       	add	r30, r30
    315e:	ff 1f       	adc	r31, r31
    3160:	e9 59       	subi	r30, 0x99	; 153
    3162:	fe 4f       	sbci	r31, 0xFE	; 254
    3164:	a5 91       	lpm	r26, Z+
    3166:	b4 91       	lpm	r27, Z
    3168:	ec 91       	ld	r30, X
    316a:	ed 23       	and	r30, r29
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	21 f4       	brne	.+8      	; 0x317a <digitalRead+0x4c>
    3172:	80 e0       	ldi	r24, 0x00	; 0
    3174:	02 c0       	rjmp	.+4      	; 0x317a <digitalRead+0x4c>
    3176:	80 e0       	ldi	r24, 0x00	; 0
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	df 91       	pop	r29
    317c:	cf 91       	pop	r28
    317e:	08 95       	ret

00003180 <_ZN6StringD1Ev>:
    3180:	fc 01       	movw	r30, r24
    3182:	80 81       	ld	r24, Z
    3184:	91 81       	ldd	r25, Z+1	; 0x01
    3186:	0c 94 85 1c 	jmp	0x390a	; 0x390a <free>

0000318a <_ZN6String10invalidateEv>:
    318a:	cf 93       	push	r28
    318c:	df 93       	push	r29
    318e:	ec 01       	movw	r28, r24
    3190:	88 81       	ld	r24, Y
    3192:	99 81       	ldd	r25, Y+1	; 0x01
    3194:	00 97       	sbiw	r24, 0x00	; 0
    3196:	11 f0       	breq	.+4      	; 0x319c <_ZN6String10invalidateEv+0x12>
    3198:	0e 94 85 1c 	call	0x390a	; 0x390a <free>
    319c:	19 82       	std	Y+1, r1	; 0x01
    319e:	18 82       	st	Y, r1
    31a0:	1d 82       	std	Y+5, r1	; 0x05
    31a2:	1c 82       	std	Y+4, r1	; 0x04
    31a4:	1b 82       	std	Y+3, r1	; 0x03
    31a6:	1a 82       	std	Y+2, r1	; 0x02
    31a8:	df 91       	pop	r29
    31aa:	cf 91       	pop	r28
    31ac:	08 95       	ret

000031ae <_ZN6String12changeBufferEj>:
    31ae:	0f 93       	push	r16
    31b0:	1f 93       	push	r17
    31b2:	cf 93       	push	r28
    31b4:	df 93       	push	r29
    31b6:	ec 01       	movw	r28, r24
    31b8:	8b 01       	movw	r16, r22
    31ba:	6f 5f       	subi	r22, 0xFF	; 255
    31bc:	7f 4f       	sbci	r23, 0xFF	; 255
    31be:	88 81       	ld	r24, Y
    31c0:	99 81       	ldd	r25, Y+1	; 0x01
    31c2:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <realloc>
    31c6:	00 97       	sbiw	r24, 0x00	; 0
    31c8:	31 f0       	breq	.+12     	; 0x31d6 <_ZN6String12changeBufferEj+0x28>
    31ca:	99 83       	std	Y+1, r25	; 0x01
    31cc:	88 83       	st	Y, r24
    31ce:	1b 83       	std	Y+3, r17	; 0x03
    31d0:	0a 83       	std	Y+2, r16	; 0x02
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	01 c0       	rjmp	.+2      	; 0x31d8 <_ZN6String12changeBufferEj+0x2a>
    31d6:	80 e0       	ldi	r24, 0x00	; 0
    31d8:	df 91       	pop	r29
    31da:	cf 91       	pop	r28
    31dc:	1f 91       	pop	r17
    31de:	0f 91       	pop	r16
    31e0:	08 95       	ret

000031e2 <_ZN6String7reserveEj>:
    31e2:	cf 93       	push	r28
    31e4:	df 93       	push	r29
    31e6:	ec 01       	movw	r28, r24
    31e8:	88 81       	ld	r24, Y
    31ea:	99 81       	ldd	r25, Y+1	; 0x01
    31ec:	89 2b       	or	r24, r25
    31ee:	29 f0       	breq	.+10     	; 0x31fa <_ZN6String7reserveEj+0x18>
    31f0:	8a 81       	ldd	r24, Y+2	; 0x02
    31f2:	9b 81       	ldd	r25, Y+3	; 0x03
    31f4:	86 17       	cp	r24, r22
    31f6:	97 07       	cpc	r25, r23
    31f8:	60 f4       	brcc	.+24     	; 0x3212 <_ZN6String7reserveEj+0x30>
    31fa:	ce 01       	movw	r24, r28
    31fc:	0e 94 d7 18 	call	0x31ae	; 0x31ae <_ZN6String12changeBufferEj>
    3200:	88 23       	and	r24, r24
    3202:	41 f0       	breq	.+16     	; 0x3214 <_ZN6String7reserveEj+0x32>
    3204:	8c 81       	ldd	r24, Y+4	; 0x04
    3206:	9d 81       	ldd	r25, Y+5	; 0x05
    3208:	89 2b       	or	r24, r25
    320a:	19 f4       	brne	.+6      	; 0x3212 <_ZN6String7reserveEj+0x30>
    320c:	e8 81       	ld	r30, Y
    320e:	f9 81       	ldd	r31, Y+1	; 0x01
    3210:	10 82       	st	Z, r1
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	df 91       	pop	r29
    3216:	cf 91       	pop	r28
    3218:	08 95       	ret

0000321a <_ZN6String4copyEPKcj>:
    321a:	ef 92       	push	r14
    321c:	ff 92       	push	r15
    321e:	0f 93       	push	r16
    3220:	1f 93       	push	r17
    3222:	cf 93       	push	r28
    3224:	df 93       	push	r29
    3226:	ec 01       	movw	r28, r24
    3228:	7b 01       	movw	r14, r22
    322a:	8a 01       	movw	r16, r20
    322c:	ba 01       	movw	r22, r20
    322e:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <_ZN6String7reserveEj>
    3232:	81 11       	cpse	r24, r1
    3234:	04 c0       	rjmp	.+8      	; 0x323e <_ZN6String4copyEPKcj+0x24>
    3236:	ce 01       	movw	r24, r28
    3238:	0e 94 c5 18 	call	0x318a	; 0x318a <_ZN6String10invalidateEv>
    323c:	07 c0       	rjmp	.+14     	; 0x324c <_ZN6String4copyEPKcj+0x32>
    323e:	1d 83       	std	Y+5, r17	; 0x05
    3240:	0c 83       	std	Y+4, r16	; 0x04
    3242:	b7 01       	movw	r22, r14
    3244:	88 81       	ld	r24, Y
    3246:	99 81       	ldd	r25, Y+1	; 0x01
    3248:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <strcpy>
    324c:	ce 01       	movw	r24, r28
    324e:	df 91       	pop	r29
    3250:	cf 91       	pop	r28
    3252:	1f 91       	pop	r17
    3254:	0f 91       	pop	r16
    3256:	ff 90       	pop	r15
    3258:	ef 90       	pop	r14
    325a:	08 95       	ret

0000325c <_ZN6StringC1EPKc>:
    325c:	fc 01       	movw	r30, r24
    325e:	11 82       	std	Z+1, r1	; 0x01
    3260:	10 82       	st	Z, r1
    3262:	13 82       	std	Z+3, r1	; 0x03
    3264:	12 82       	std	Z+2, r1	; 0x02
    3266:	15 82       	std	Z+5, r1	; 0x05
    3268:	14 82       	std	Z+4, r1	; 0x04
    326a:	61 15       	cp	r22, r1
    326c:	71 05       	cpc	r23, r1
    326e:	51 f0       	breq	.+20     	; 0x3284 <_ZN6StringC1EPKc+0x28>
    3270:	fb 01       	movw	r30, r22
    3272:	01 90       	ld	r0, Z+
    3274:	00 20       	and	r0, r0
    3276:	e9 f7       	brne	.-6      	; 0x3272 <_ZN6StringC1EPKc+0x16>
    3278:	31 97       	sbiw	r30, 0x01	; 1
    327a:	af 01       	movw	r20, r30
    327c:	46 1b       	sub	r20, r22
    327e:	57 0b       	sbc	r21, r23
    3280:	0c 94 0d 19 	jmp	0x321a	; 0x321a <_ZN6String4copyEPKcj>
    3284:	08 95       	ret

00003286 <_ZN7Serial_5writeEh>:
    3286:	cf 93       	push	r28
    3288:	df 93       	push	r29
    328a:	1f 92       	push	r1
    328c:	cd b7       	in	r28, 0x3d	; 61
    328e:	de b7       	in	r29, 0x3e	; 62
    3290:	69 83       	std	Y+1, r22	; 0x01
    3292:	dc 01       	movw	r26, r24
    3294:	ed 91       	ld	r30, X+
    3296:	fc 91       	ld	r31, X
    3298:	02 80       	ldd	r0, Z+2	; 0x02
    329a:	f3 81       	ldd	r31, Z+3	; 0x03
    329c:	e0 2d       	mov	r30, r0
    329e:	41 e0       	ldi	r20, 0x01	; 1
    32a0:	50 e0       	ldi	r21, 0x00	; 0
    32a2:	be 01       	movw	r22, r28
    32a4:	6f 5f       	subi	r22, 0xFF	; 255
    32a6:	7f 4f       	sbci	r23, 0xFF	; 255
    32a8:	09 95       	icall
    32aa:	0f 90       	pop	r0
    32ac:	df 91       	pop	r29
    32ae:	cf 91       	pop	r28
    32b0:	08 95       	ret

000032b2 <_ZN7Serial_4peekEv>:
    32b2:	cf 93       	push	r28
    32b4:	df 93       	push	r29
    32b6:	ec 01       	movw	r28, r24
    32b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    32ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    32bc:	97 ff       	sbrs	r25, 7
    32be:	05 c0       	rjmp	.+10     	; 0x32ca <_ZN7Serial_4peekEv+0x18>
    32c0:	82 e0       	ldi	r24, 0x02	; 2
    32c2:	0e 94 7e 13 	call	0x26fc	; 0x26fc <_Z8USB_Recvh>
    32c6:	9d 87       	std	Y+13, r25	; 0x0d
    32c8:	8c 87       	std	Y+12, r24	; 0x0c
    32ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    32cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    32ce:	df 91       	pop	r29
    32d0:	cf 91       	pop	r28
    32d2:	08 95       	ret

000032d4 <_ZN7Serial_17availableForWriteEv>:
    32d4:	83 e0       	ldi	r24, 0x03	; 3
    32d6:	0e 94 95 13 	call	0x272a	; 0x272a <_Z13USB_SendSpaceh>
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	08 95       	ret

000032de <_ZN7Serial_5flushEv>:
    32de:	83 e0       	ldi	r24, 0x03	; 3
    32e0:	0c 94 13 16 	jmp	0x2c26	; 0x2c26 <_Z9USB_Flushh>

000032e4 <_ZN7Serial_9availableEv>:
    32e4:	fc 01       	movw	r30, r24
    32e6:	84 85       	ldd	r24, Z+12	; 0x0c
    32e8:	95 85       	ldd	r25, Z+13	; 0x0d
    32ea:	97 fd       	sbrc	r25, 7
    32ec:	06 c0       	rjmp	.+12     	; 0x32fa <_ZN7Serial_9availableEv+0x16>
    32ee:	82 e0       	ldi	r24, 0x02	; 2
    32f0:	0e 94 29 13 	call	0x2652	; 0x2652 <_Z13USB_Availableh>
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	01 96       	adiw	r24, 0x01	; 1
    32f8:	08 95       	ret
    32fa:	82 e0       	ldi	r24, 0x02	; 2
    32fc:	0e 94 29 13 	call	0x2652	; 0x2652 <_Z13USB_Availableh>
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	08 95       	ret

00003304 <_ZN7Serial_4readEv>:
    3304:	fc 01       	movw	r30, r24
    3306:	84 85       	ldd	r24, Z+12	; 0x0c
    3308:	95 85       	ldd	r25, Z+13	; 0x0d
    330a:	97 fd       	sbrc	r25, 7
    330c:	05 c0       	rjmp	.+10     	; 0x3318 <_ZN7Serial_4readEv+0x14>
    330e:	2f ef       	ldi	r18, 0xFF	; 255
    3310:	3f ef       	ldi	r19, 0xFF	; 255
    3312:	35 87       	std	Z+13, r19	; 0x0d
    3314:	24 87       	std	Z+12, r18	; 0x0c
    3316:	08 95       	ret
    3318:	82 e0       	ldi	r24, 0x02	; 2
    331a:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <_Z8USB_Recvh>

0000331e <_ZN7Serial_5writeEPKhj>:
    331e:	cf 93       	push	r28
    3320:	df 93       	push	r29
    3322:	ec 01       	movw	r28, r24
    3324:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL12_usbLineInfo+0x7>
    3328:	88 23       	and	r24, r24
    332a:	31 f0       	breq	.+12     	; 0x3338 <_ZN7Serial_5writeEPKhj+0x1a>
    332c:	83 e0       	ldi	r24, 0x03	; 3
    332e:	0e 94 af 13 	call	0x275e	; 0x275e <_Z8USB_SendhPKvi>
    3332:	18 16       	cp	r1, r24
    3334:	19 06       	cpc	r1, r25
    3336:	34 f0       	brlt	.+12     	; 0x3344 <_ZN7Serial_5writeEPKhj+0x26>
    3338:	81 e0       	ldi	r24, 0x01	; 1
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	9b 83       	std	Y+3, r25	; 0x03
    333e:	8a 83       	std	Y+2, r24	; 0x02
    3340:	80 e0       	ldi	r24, 0x00	; 0
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	df 91       	pop	r29
    3346:	cf 91       	pop	r28
    3348:	08 95       	ret

0000334a <_Z16isLUFAbootloaderv>:
    334a:	ee ef       	ldi	r30, 0xFE	; 254
    334c:	ff e7       	ldi	r31, 0x7F	; 127
    334e:	25 91       	lpm	r18, Z+
    3350:	34 91       	lpm	r19, Z
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	2b 3f       	cpi	r18, 0xFB	; 251
    3356:	3c 4d       	sbci	r19, 0xDC	; 220
    3358:	09 f0       	breq	.+2      	; 0x335c <_Z16isLUFAbootloaderv+0x12>
    335a:	80 e0       	ldi	r24, 0x00	; 0
    335c:	08 95       	ret

0000335e <_Z16CDC_GetInterfacePh>:
    335e:	fc 01       	movw	r30, r24
    3360:	90 81       	ld	r25, Z
    3362:	9e 5f       	subi	r25, 0xFE	; 254
    3364:	90 83       	st	Z, r25
    3366:	42 e4       	ldi	r20, 0x42	; 66
    3368:	50 e0       	ldi	r21, 0x00	; 0
    336a:	61 e9       	ldi	r22, 0x91	; 145
    336c:	71 e0       	ldi	r23, 0x01	; 1
    336e:	80 e8       	ldi	r24, 0x80	; 128
    3370:	0c 94 5f 14 	jmp	0x28be	; 0x28be <_Z15USB_SendControlhPKvi>

00003374 <_Z9CDC_SetupR8USBSetup>:
    3374:	fc 01       	movw	r30, r24
    3376:	81 81       	ldd	r24, Z+1	; 0x01
    3378:	90 81       	ld	r25, Z
    337a:	91 3a       	cpi	r25, 0xA1	; 161
    337c:	59 f4       	brne	.+22     	; 0x3394 <_Z9CDC_SetupR8USBSetup+0x20>
    337e:	81 32       	cpi	r24, 0x21	; 33
    3380:	09 f0       	breq	.+2      	; 0x3384 <_Z9CDC_SetupR8USBSetup+0x10>
    3382:	65 c0       	rjmp	.+202    	; 0x344e <_Z9CDC_SetupR8USBSetup+0xda>
    3384:	47 e0       	ldi	r20, 0x07	; 7
    3386:	50 e0       	ldi	r21, 0x00	; 0
    3388:	66 e1       	ldi	r22, 0x16	; 22
    338a:	71 e0       	ldi	r23, 0x01	; 1
    338c:	80 e0       	ldi	r24, 0x00	; 0
    338e:	0e 94 5f 14 	call	0x28be	; 0x28be <_Z15USB_SendControlhPKvi>
    3392:	5b c0       	rjmp	.+182    	; 0x344a <_Z9CDC_SetupR8USBSetup+0xd6>
    3394:	91 32       	cpi	r25, 0x21	; 33
    3396:	09 f0       	breq	.+2      	; 0x339a <_Z9CDC_SetupR8USBSetup+0x26>
    3398:	5a c0       	rjmp	.+180    	; 0x344e <_Z9CDC_SetupR8USBSetup+0xda>
    339a:	83 32       	cpi	r24, 0x23	; 35
    339c:	69 f4       	brne	.+26     	; 0x33b8 <_Z9CDC_SetupR8USBSetup+0x44>
    339e:	82 81       	ldd	r24, Z+2	; 0x02
    33a0:	93 81       	ldd	r25, Z+3	; 0x03
    33a2:	a0 e0       	ldi	r26, 0x00	; 0
    33a4:	b0 e0       	ldi	r27, 0x00	; 0
    33a6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_ZL10breakValue>
    33aa:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_ZL10breakValue+0x1>
    33ae:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <_ZL10breakValue+0x2>
    33b2:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <_ZL10breakValue+0x3>
    33b6:	49 c0       	rjmp	.+146    	; 0x344a <_Z9CDC_SetupR8USBSetup+0xd6>
    33b8:	80 32       	cpi	r24, 0x20	; 32
    33ba:	39 f4       	brne	.+14     	; 0x33ca <_Z9CDC_SetupR8USBSetup+0x56>
    33bc:	67 e0       	ldi	r22, 0x07	; 7
    33be:	70 e0       	ldi	r23, 0x00	; 0
    33c0:	86 e1       	ldi	r24, 0x16	; 22
    33c2:	91 e0       	ldi	r25, 0x01	; 1
    33c4:	0e 94 86 14 	call	0x290c	; 0x290c <_Z15USB_RecvControlPvi>
    33c8:	40 c0       	rjmp	.+128    	; 0x344a <_Z9CDC_SetupR8USBSetup+0xd6>
    33ca:	82 32       	cpi	r24, 0x22	; 34
    33cc:	09 f0       	breq	.+2      	; 0x33d0 <_Z9CDC_SetupR8USBSetup+0x5c>
    33ce:	3d c0       	rjmp	.+122    	; 0x344a <_Z9CDC_SetupR8USBSetup+0xd6>
    33d0:	82 81       	ldd	r24, Z+2	; 0x02
    33d2:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZL12_usbLineInfo+0x7>
    33d6:	0e 94 a5 19 	call	0x334a	; 0x334a <_Z16isLUFAbootloaderv>
    33da:	88 23       	and	r24, r24
    33dc:	19 f0       	breq	.+6      	; 0x33e4 <_Z9CDC_SetupR8USBSetup+0x70>
    33de:	ee ef       	ldi	r30, 0xFE	; 254
    33e0:	fa e0       	ldi	r31, 0x0A	; 10
    33e2:	02 c0       	rjmp	.+4      	; 0x33e8 <_Z9CDC_SetupR8USBSetup+0x74>
    33e4:	e0 e0       	ldi	r30, 0x00	; 0
    33e6:	f8 e0       	ldi	r31, 0x08	; 8
    33e8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_ZL12_usbLineInfo>
    33ec:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <_ZL12_usbLineInfo+0x1>
    33f0:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <_ZL12_usbLineInfo+0x2>
    33f4:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <_ZL12_usbLineInfo+0x3>
    33f8:	80 3b       	cpi	r24, 0xB0	; 176
    33fa:	94 40       	sbci	r25, 0x04	; 4
    33fc:	a1 05       	cpc	r26, r1
    33fe:	b1 05       	cpc	r27, r1
    3400:	41 f5       	brne	.+80     	; 0x3452 <_Z9CDC_SetupR8USBSetup+0xde>
    3402:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL12_usbLineInfo+0x7>
    3406:	80 fd       	sbrc	r24, 0
    3408:	24 c0       	rjmp	.+72     	; 0x3452 <_Z9CDC_SetupR8USBSetup+0xde>
    340a:	ee 3f       	cpi	r30, 0xFE	; 254
    340c:	8a e0       	ldi	r24, 0x0A	; 10
    340e:	f8 07       	cpc	r31, r24
    3410:	51 f0       	breq	.+20     	; 0x3426 <_Z9CDC_SetupR8USBSetup+0xb2>
    3412:	80 81       	ld	r24, Z
    3414:	91 81       	ldd	r25, Z+1	; 0x01
    3416:	87 37       	cpi	r24, 0x77	; 119
    3418:	27 e7       	ldi	r18, 0x77	; 119
    341a:	92 07       	cpc	r25, r18
    341c:	21 f0       	breq	.+8      	; 0x3426 <_Z9CDC_SetupR8USBSetup+0xb2>
    341e:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x6ac>
    3422:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x6ab>
    3426:	87 e7       	ldi	r24, 0x77	; 119
    3428:	97 e7       	ldi	r25, 0x77	; 119
    342a:	91 83       	std	Z+1, r25	; 0x01
    342c:	80 83       	st	Z, r24
    342e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3432:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <_ZL11wdtcsr_save>
    3436:	9b e0       	ldi	r25, 0x0B	; 11
    3438:	88 e1       	ldi	r24, 0x18	; 24
    343a:	0f b6       	in	r0, 0x3f	; 63
    343c:	f8 94       	cli
    343e:	a8 95       	wdr
    3440:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3444:	0f be       	out	0x3f, r0	; 63
    3446:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    344a:	81 e0       	ldi	r24, 0x01	; 1
    344c:	08 95       	ret
    344e:	80 e0       	ldi	r24, 0x00	; 0
    3450:	08 95       	ret
    3452:	80 81       	ld	r24, Z
    3454:	91 81       	ldd	r25, Z+1	; 0x01
    3456:	87 37       	cpi	r24, 0x77	; 119
    3458:	97 47       	sbci	r25, 0x77	; 119
    345a:	b9 f7       	brne	.-18     	; 0x344a <_Z9CDC_SetupR8USBSetup+0xd6>
    345c:	a8 95       	wdr
    345e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3462:	88 61       	ori	r24, 0x18	; 24
    3464:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3468:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <_ZL11wdtcsr_save>
    346c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3470:	ee 3f       	cpi	r30, 0xFE	; 254
    3472:	8a e0       	ldi	r24, 0x0A	; 10
    3474:	f8 07       	cpc	r31, r24
    3476:	39 f0       	breq	.+14     	; 0x3486 <_Z9CDC_SetupR8USBSetup+0x112>
    3478:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x6ab>
    347c:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x6ac>
    3480:	91 83       	std	Z+1, r25	; 0x01
    3482:	80 83       	st	Z, r24
    3484:	e2 cf       	rjmp	.-60     	; 0x344a <_Z9CDC_SetupR8USBSetup+0xd6>
    3486:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x6ac>
    348a:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x6ab>
    348e:	dd cf       	rjmp	.-70     	; 0x344a <_Z9CDC_SetupR8USBSetup+0xd6>

00003490 <_GLOBAL__sub_I__cdcInterface>:
    3490:	e2 ef       	ldi	r30, 0xF2	; 242
    3492:	f3 e0       	ldi	r31, 0x03	; 3
    3494:	13 82       	std	Z+3, r1	; 0x03
    3496:	12 82       	std	Z+2, r1	; 0x02
    3498:	88 ee       	ldi	r24, 0xE8	; 232
    349a:	93 e0       	ldi	r25, 0x03	; 3
    349c:	a0 e0       	ldi	r26, 0x00	; 0
    349e:	b0 e0       	ldi	r27, 0x00	; 0
    34a0:	84 83       	std	Z+4, r24	; 0x04
    34a2:	95 83       	std	Z+5, r25	; 0x05
    34a4:	a6 83       	std	Z+6, r26	; 0x06
    34a6:	b7 83       	std	Z+7, r27	; 0x07
    34a8:	8f e3       	ldi	r24, 0x3F	; 63
    34aa:	92 e0       	ldi	r25, 0x02	; 2
    34ac:	91 83       	std	Z+1, r25	; 0x01
    34ae:	80 83       	st	Z, r24
    34b0:	8f ef       	ldi	r24, 0xFF	; 255
    34b2:	9f ef       	ldi	r25, 0xFF	; 255
    34b4:	95 87       	std	Z+13, r25	; 0x0d
    34b6:	84 87       	std	Z+12, r24	; 0x0c
    34b8:	08 95       	ret

000034ba <yield>:
    34ba:	08 95       	ret

000034bc <_ZN13PluggableUSB_12getInterfaceEPh>:
    34bc:	ef 92       	push	r14
    34be:	ff 92       	push	r15
    34c0:	0f 93       	push	r16
    34c2:	1f 93       	push	r17
    34c4:	cf 93       	push	r28
    34c6:	df 93       	push	r29
    34c8:	7b 01       	movw	r14, r22
    34ca:	fc 01       	movw	r30, r24
    34cc:	c2 81       	ldd	r28, Z+2	; 0x02
    34ce:	d3 81       	ldd	r29, Z+3	; 0x03
    34d0:	00 e0       	ldi	r16, 0x00	; 0
    34d2:	10 e0       	ldi	r17, 0x00	; 0
    34d4:	20 97       	sbiw	r28, 0x00	; 0
    34d6:	81 f0       	breq	.+32     	; 0x34f8 <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
    34d8:	e8 81       	ld	r30, Y
    34da:	f9 81       	ldd	r31, Y+1	; 0x01
    34dc:	02 80       	ldd	r0, Z+2	; 0x02
    34de:	f3 81       	ldd	r31, Z+3	; 0x03
    34e0:	e0 2d       	mov	r30, r0
    34e2:	b7 01       	movw	r22, r14
    34e4:	ce 01       	movw	r24, r28
    34e6:	09 95       	icall
    34e8:	97 fd       	sbrc	r25, 7
    34ea:	08 c0       	rjmp	.+16     	; 0x34fc <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
    34ec:	08 0f       	add	r16, r24
    34ee:	19 1f       	adc	r17, r25
    34f0:	08 84       	ldd	r0, Y+8	; 0x08
    34f2:	d9 85       	ldd	r29, Y+9	; 0x09
    34f4:	c0 2d       	mov	r28, r0
    34f6:	ee cf       	rjmp	.-36     	; 0x34d4 <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    34f8:	c8 01       	movw	r24, r16
    34fa:	02 c0       	rjmp	.+4      	; 0x3500 <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
    34fc:	8f ef       	ldi	r24, 0xFF	; 255
    34fe:	9f ef       	ldi	r25, 0xFF	; 255
    3500:	df 91       	pop	r29
    3502:	cf 91       	pop	r28
    3504:	1f 91       	pop	r17
    3506:	0f 91       	pop	r16
    3508:	ff 90       	pop	r15
    350a:	ef 90       	pop	r14
    350c:	08 95       	ret

0000350e <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    350e:	0f 93       	push	r16
    3510:	1f 93       	push	r17
    3512:	cf 93       	push	r28
    3514:	df 93       	push	r29
    3516:	8b 01       	movw	r16, r22
    3518:	fc 01       	movw	r30, r24
    351a:	c2 81       	ldd	r28, Z+2	; 0x02
    351c:	d3 81       	ldd	r29, Z+3	; 0x03
    351e:	20 97       	sbiw	r28, 0x00	; 0
    3520:	71 f0       	breq	.+28     	; 0x353e <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
    3522:	e8 81       	ld	r30, Y
    3524:	f9 81       	ldd	r31, Y+1	; 0x01
    3526:	04 80       	ldd	r0, Z+4	; 0x04
    3528:	f5 81       	ldd	r31, Z+5	; 0x05
    352a:	e0 2d       	mov	r30, r0
    352c:	b8 01       	movw	r22, r16
    352e:	ce 01       	movw	r24, r28
    3530:	09 95       	icall
    3532:	00 97       	sbiw	r24, 0x00	; 0
    3534:	31 f4       	brne	.+12     	; 0x3542 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
    3536:	08 84       	ldd	r0, Y+8	; 0x08
    3538:	d9 85       	ldd	r29, Y+9	; 0x09
    353a:	c0 2d       	mov	r28, r0
    353c:	f0 cf       	rjmp	.-32     	; 0x351e <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
    353e:	80 e0       	ldi	r24, 0x00	; 0
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	df 91       	pop	r29
    3544:	cf 91       	pop	r28
    3546:	1f 91       	pop	r17
    3548:	0f 91       	pop	r16
    354a:	08 95       	ret

0000354c <_ZN13PluggableUSB_12getShortNameEPc>:
    354c:	0f 93       	push	r16
    354e:	1f 93       	push	r17
    3550:	cf 93       	push	r28
    3552:	df 93       	push	r29
    3554:	8b 01       	movw	r16, r22
    3556:	fc 01       	movw	r30, r24
    3558:	c2 81       	ldd	r28, Z+2	; 0x02
    355a:	d3 81       	ldd	r29, Z+3	; 0x03
    355c:	20 97       	sbiw	r28, 0x00	; 0
    355e:	71 f0       	breq	.+28     	; 0x357c <_ZN13PluggableUSB_12getShortNameEPc+0x30>
    3560:	e8 81       	ld	r30, Y
    3562:	f9 81       	ldd	r31, Y+1	; 0x01
    3564:	06 80       	ldd	r0, Z+6	; 0x06
    3566:	f7 81       	ldd	r31, Z+7	; 0x07
    3568:	e0 2d       	mov	r30, r0
    356a:	b8 01       	movw	r22, r16
    356c:	ce 01       	movw	r24, r28
    356e:	09 95       	icall
    3570:	08 0f       	add	r16, r24
    3572:	11 1d       	adc	r17, r1
    3574:	08 84       	ldd	r0, Y+8	; 0x08
    3576:	d9 85       	ldd	r29, Y+9	; 0x09
    3578:	c0 2d       	mov	r28, r0
    357a:	f0 cf       	rjmp	.-32     	; 0x355c <_ZN13PluggableUSB_12getShortNameEPc+0x10>
    357c:	f8 01       	movw	r30, r16
    357e:	10 82       	st	Z, r1
    3580:	df 91       	pop	r29
    3582:	cf 91       	pop	r28
    3584:	1f 91       	pop	r17
    3586:	0f 91       	pop	r16
    3588:	08 95       	ret

0000358a <_ZN13PluggableUSB_5setupER8USBSetup>:
    358a:	0f 93       	push	r16
    358c:	1f 93       	push	r17
    358e:	cf 93       	push	r28
    3590:	df 93       	push	r29
    3592:	8b 01       	movw	r16, r22
    3594:	fc 01       	movw	r30, r24
    3596:	c2 81       	ldd	r28, Z+2	; 0x02
    3598:	d3 81       	ldd	r29, Z+3	; 0x03
    359a:	20 97       	sbiw	r28, 0x00	; 0
    359c:	71 f0       	breq	.+28     	; 0x35ba <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
    359e:	e8 81       	ld	r30, Y
    35a0:	f9 81       	ldd	r31, Y+1	; 0x01
    35a2:	01 90       	ld	r0, Z+
    35a4:	f0 81       	ld	r31, Z
    35a6:	e0 2d       	mov	r30, r0
    35a8:	b8 01       	movw	r22, r16
    35aa:	ce 01       	movw	r24, r28
    35ac:	09 95       	icall
    35ae:	81 11       	cpse	r24, r1
    35b0:	05 c0       	rjmp	.+10     	; 0x35bc <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
    35b2:	08 84       	ldd	r0, Y+8	; 0x08
    35b4:	d9 85       	ldd	r29, Y+9	; 0x09
    35b6:	c0 2d       	mov	r28, r0
    35b8:	f0 cf       	rjmp	.-32     	; 0x359a <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
    35ba:	80 e0       	ldi	r24, 0x00	; 0
    35bc:	df 91       	pop	r29
    35be:	cf 91       	pop	r28
    35c0:	1f 91       	pop	r17
    35c2:	0f 91       	pop	r16
    35c4:	08 95       	ret

000035c6 <_Z12PluggableUSBv>:
    35c6:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <_ZGVZ12PluggableUSBvE3obj>
    35ca:	81 11       	cpse	r24, r1
    35cc:	0d c0       	rjmp	.+26     	; 0x35e8 <_Z12PluggableUSBv+0x22>
    35ce:	82 e0       	ldi	r24, 0x02	; 2
    35d0:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <_ZZ12PluggableUSBvE3obj>
    35d4:	84 e0       	ldi	r24, 0x04	; 4
    35d6:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <_ZZ12PluggableUSBvE3obj+0x1>
    35da:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <_ZZ12PluggableUSBvE3obj+0x3>
    35de:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <_ZZ12PluggableUSBvE3obj+0x2>
    35e2:	81 e0       	ldi	r24, 0x01	; 1
    35e4:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <_ZGVZ12PluggableUSBvE3obj>
    35e8:	83 e4       	ldi	r24, 0x43	; 67
    35ea:	94 e0       	ldi	r25, 0x04	; 4
    35ec:	08 95       	ret

000035ee <__subsf3>:
    35ee:	50 58       	subi	r21, 0x80	; 128

000035f0 <__addsf3>:
    35f0:	bb 27       	eor	r27, r27
    35f2:	aa 27       	eor	r26, r26
    35f4:	0e 94 0f 1b 	call	0x361e	; 0x361e <__addsf3x>
    35f8:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <__fp_round>
    35fc:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__fp_pscA>
    3600:	38 f0       	brcs	.+14     	; 0x3610 <__addsf3+0x20>
    3602:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <__fp_pscB>
    3606:	20 f0       	brcs	.+8      	; 0x3610 <__addsf3+0x20>
    3608:	39 f4       	brne	.+14     	; 0x3618 <__addsf3+0x28>
    360a:	9f 3f       	cpi	r25, 0xFF	; 255
    360c:	19 f4       	brne	.+6      	; 0x3614 <__addsf3+0x24>
    360e:	26 f4       	brtc	.+8      	; 0x3618 <__addsf3+0x28>
    3610:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <__fp_nan>
    3614:	0e f4       	brtc	.+2      	; 0x3618 <__addsf3+0x28>
    3616:	e0 95       	com	r30
    3618:	e7 fb       	bst	r30, 7
    361a:	0c 94 9d 0f 	jmp	0x1f3a	; 0x1f3a <__fp_inf>

0000361e <__addsf3x>:
    361e:	e9 2f       	mov	r30, r25
    3620:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fp_split3>
    3624:	58 f3       	brcs	.-42     	; 0x35fc <__addsf3+0xc>
    3626:	ba 17       	cp	r27, r26
    3628:	62 07       	cpc	r22, r18
    362a:	73 07       	cpc	r23, r19
    362c:	84 07       	cpc	r24, r20
    362e:	95 07       	cpc	r25, r21
    3630:	20 f0       	brcs	.+8      	; 0x363a <__addsf3x+0x1c>
    3632:	79 f4       	brne	.+30     	; 0x3652 <__addsf3x+0x34>
    3634:	a6 f5       	brtc	.+104    	; 0x369e <__addsf3x+0x80>
    3636:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__fp_zero>
    363a:	0e f4       	brtc	.+2      	; 0x363e <__addsf3x+0x20>
    363c:	e0 95       	com	r30
    363e:	0b 2e       	mov	r0, r27
    3640:	ba 2f       	mov	r27, r26
    3642:	a0 2d       	mov	r26, r0
    3644:	0b 01       	movw	r0, r22
    3646:	b9 01       	movw	r22, r18
    3648:	90 01       	movw	r18, r0
    364a:	0c 01       	movw	r0, r24
    364c:	ca 01       	movw	r24, r20
    364e:	a0 01       	movw	r20, r0
    3650:	11 24       	eor	r1, r1
    3652:	ff 27       	eor	r31, r31
    3654:	59 1b       	sub	r21, r25
    3656:	99 f0       	breq	.+38     	; 0x367e <__addsf3x+0x60>
    3658:	59 3f       	cpi	r21, 0xF9	; 249
    365a:	50 f4       	brcc	.+20     	; 0x3670 <__addsf3x+0x52>
    365c:	50 3e       	cpi	r21, 0xE0	; 224
    365e:	68 f1       	brcs	.+90     	; 0x36ba <__addsf3x+0x9c>
    3660:	1a 16       	cp	r1, r26
    3662:	f0 40       	sbci	r31, 0x00	; 0
    3664:	a2 2f       	mov	r26, r18
    3666:	23 2f       	mov	r18, r19
    3668:	34 2f       	mov	r19, r20
    366a:	44 27       	eor	r20, r20
    366c:	58 5f       	subi	r21, 0xF8	; 248
    366e:	f3 cf       	rjmp	.-26     	; 0x3656 <__addsf3x+0x38>
    3670:	46 95       	lsr	r20
    3672:	37 95       	ror	r19
    3674:	27 95       	ror	r18
    3676:	a7 95       	ror	r26
    3678:	f0 40       	sbci	r31, 0x00	; 0
    367a:	53 95       	inc	r21
    367c:	c9 f7       	brne	.-14     	; 0x3670 <__addsf3x+0x52>
    367e:	7e f4       	brtc	.+30     	; 0x369e <__addsf3x+0x80>
    3680:	1f 16       	cp	r1, r31
    3682:	ba 0b       	sbc	r27, r26
    3684:	62 0b       	sbc	r22, r18
    3686:	73 0b       	sbc	r23, r19
    3688:	84 0b       	sbc	r24, r20
    368a:	ba f0       	brmi	.+46     	; 0x36ba <__addsf3x+0x9c>
    368c:	91 50       	subi	r25, 0x01	; 1
    368e:	a1 f0       	breq	.+40     	; 0x36b8 <__addsf3x+0x9a>
    3690:	ff 0f       	add	r31, r31
    3692:	bb 1f       	adc	r27, r27
    3694:	66 1f       	adc	r22, r22
    3696:	77 1f       	adc	r23, r23
    3698:	88 1f       	adc	r24, r24
    369a:	c2 f7       	brpl	.-16     	; 0x368c <__addsf3x+0x6e>
    369c:	0e c0       	rjmp	.+28     	; 0x36ba <__addsf3x+0x9c>
    369e:	ba 0f       	add	r27, r26
    36a0:	62 1f       	adc	r22, r18
    36a2:	73 1f       	adc	r23, r19
    36a4:	84 1f       	adc	r24, r20
    36a6:	48 f4       	brcc	.+18     	; 0x36ba <__addsf3x+0x9c>
    36a8:	87 95       	ror	r24
    36aa:	77 95       	ror	r23
    36ac:	67 95       	ror	r22
    36ae:	b7 95       	ror	r27
    36b0:	f7 95       	ror	r31
    36b2:	9e 3f       	cpi	r25, 0xFE	; 254
    36b4:	08 f0       	brcs	.+2      	; 0x36b8 <__addsf3x+0x9a>
    36b6:	b0 cf       	rjmp	.-160    	; 0x3618 <__addsf3+0x28>
    36b8:	93 95       	inc	r25
    36ba:	88 0f       	add	r24, r24
    36bc:	08 f0       	brcs	.+2      	; 0x36c0 <__addsf3x+0xa2>
    36be:	99 27       	eor	r25, r25
    36c0:	ee 0f       	add	r30, r30
    36c2:	97 95       	ror	r25
    36c4:	87 95       	ror	r24
    36c6:	08 95       	ret

000036c8 <__cmpsf2>:
    36c8:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__fp_cmp>
    36cc:	08 f4       	brcc	.+2      	; 0x36d0 <__cmpsf2+0x8>
    36ce:	81 e0       	ldi	r24, 0x01	; 1
    36d0:	08 95       	ret

000036d2 <__fixunssfsi>:
    36d2:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__fp_splitA>
    36d6:	88 f0       	brcs	.+34     	; 0x36fa <__fixunssfsi+0x28>
    36d8:	9f 57       	subi	r25, 0x7F	; 127
    36da:	98 f0       	brcs	.+38     	; 0x3702 <__fixunssfsi+0x30>
    36dc:	b9 2f       	mov	r27, r25
    36de:	99 27       	eor	r25, r25
    36e0:	b7 51       	subi	r27, 0x17	; 23
    36e2:	b0 f0       	brcs	.+44     	; 0x3710 <__fixunssfsi+0x3e>
    36e4:	e1 f0       	breq	.+56     	; 0x371e <__fixunssfsi+0x4c>
    36e6:	66 0f       	add	r22, r22
    36e8:	77 1f       	adc	r23, r23
    36ea:	88 1f       	adc	r24, r24
    36ec:	99 1f       	adc	r25, r25
    36ee:	1a f0       	brmi	.+6      	; 0x36f6 <__fixunssfsi+0x24>
    36f0:	ba 95       	dec	r27
    36f2:	c9 f7       	brne	.-14     	; 0x36e6 <__fixunssfsi+0x14>
    36f4:	14 c0       	rjmp	.+40     	; 0x371e <__fixunssfsi+0x4c>
    36f6:	b1 30       	cpi	r27, 0x01	; 1
    36f8:	91 f0       	breq	.+36     	; 0x371e <__fixunssfsi+0x4c>
    36fa:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__fp_zero>
    36fe:	b1 e0       	ldi	r27, 0x01	; 1
    3700:	08 95       	ret
    3702:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__fp_zero>
    3706:	67 2f       	mov	r22, r23
    3708:	78 2f       	mov	r23, r24
    370a:	88 27       	eor	r24, r24
    370c:	b8 5f       	subi	r27, 0xF8	; 248
    370e:	39 f0       	breq	.+14     	; 0x371e <__fixunssfsi+0x4c>
    3710:	b9 3f       	cpi	r27, 0xF9	; 249
    3712:	cc f3       	brlt	.-14     	; 0x3706 <__fixunssfsi+0x34>
    3714:	86 95       	lsr	r24
    3716:	77 95       	ror	r23
    3718:	67 95       	ror	r22
    371a:	b3 95       	inc	r27
    371c:	d9 f7       	brne	.-10     	; 0x3714 <__fixunssfsi+0x42>
    371e:	3e f4       	brtc	.+14     	; 0x372e <__fixunssfsi+0x5c>
    3720:	90 95       	com	r25
    3722:	80 95       	com	r24
    3724:	70 95       	com	r23
    3726:	61 95       	neg	r22
    3728:	7f 4f       	sbci	r23, 0xFF	; 255
    372a:	8f 4f       	sbci	r24, 0xFF	; 255
    372c:	9f 4f       	sbci	r25, 0xFF	; 255
    372e:	08 95       	ret

00003730 <__unordsf2>:
    3730:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__fp_cmp>
    3734:	88 0b       	sbc	r24, r24
    3736:	99 0b       	sbc	r25, r25
    3738:	08 95       	ret

0000373a <__divmodhi4>:
    373a:	97 fb       	bst	r25, 7
    373c:	07 2e       	mov	r0, r23
    373e:	16 f4       	brtc	.+4      	; 0x3744 <__divmodhi4+0xa>
    3740:	00 94       	com	r0
    3742:	07 d0       	rcall	.+14     	; 0x3752 <__divmodhi4_neg1>
    3744:	77 fd       	sbrc	r23, 7
    3746:	09 d0       	rcall	.+18     	; 0x375a <__divmodhi4_neg2>
    3748:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__udivmodhi4>
    374c:	07 fc       	sbrc	r0, 7
    374e:	05 d0       	rcall	.+10     	; 0x375a <__divmodhi4_neg2>
    3750:	3e f4       	brtc	.+14     	; 0x3760 <__divmodhi4_exit>

00003752 <__divmodhi4_neg1>:
    3752:	90 95       	com	r25
    3754:	81 95       	neg	r24
    3756:	9f 4f       	sbci	r25, 0xFF	; 255
    3758:	08 95       	ret

0000375a <__divmodhi4_neg2>:
    375a:	70 95       	com	r23
    375c:	61 95       	neg	r22
    375e:	7f 4f       	sbci	r23, 0xFF	; 255

00003760 <__divmodhi4_exit>:
    3760:	08 95       	ret

00003762 <__udivmodsi4>:
    3762:	a1 e2       	ldi	r26, 0x21	; 33
    3764:	1a 2e       	mov	r1, r26
    3766:	aa 1b       	sub	r26, r26
    3768:	bb 1b       	sub	r27, r27
    376a:	fd 01       	movw	r30, r26
    376c:	0d c0       	rjmp	.+26     	; 0x3788 <__udivmodsi4_ep>

0000376e <__udivmodsi4_loop>:
    376e:	aa 1f       	adc	r26, r26
    3770:	bb 1f       	adc	r27, r27
    3772:	ee 1f       	adc	r30, r30
    3774:	ff 1f       	adc	r31, r31
    3776:	a2 17       	cp	r26, r18
    3778:	b3 07       	cpc	r27, r19
    377a:	e4 07       	cpc	r30, r20
    377c:	f5 07       	cpc	r31, r21
    377e:	20 f0       	brcs	.+8      	; 0x3788 <__udivmodsi4_ep>
    3780:	a2 1b       	sub	r26, r18
    3782:	b3 0b       	sbc	r27, r19
    3784:	e4 0b       	sbc	r30, r20
    3786:	f5 0b       	sbc	r31, r21

00003788 <__udivmodsi4_ep>:
    3788:	66 1f       	adc	r22, r22
    378a:	77 1f       	adc	r23, r23
    378c:	88 1f       	adc	r24, r24
    378e:	99 1f       	adc	r25, r25
    3790:	1a 94       	dec	r1
    3792:	69 f7       	brne	.-38     	; 0x376e <__udivmodsi4_loop>
    3794:	60 95       	com	r22
    3796:	70 95       	com	r23
    3798:	80 95       	com	r24
    379a:	90 95       	com	r25
    379c:	9b 01       	movw	r18, r22
    379e:	ac 01       	movw	r20, r24
    37a0:	bd 01       	movw	r22, r26
    37a2:	cf 01       	movw	r24, r30
    37a4:	08 95       	ret

000037a6 <__tablejump2__>:
    37a6:	ee 0f       	add	r30, r30
    37a8:	ff 1f       	adc	r31, r31
    37aa:	05 90       	lpm	r0, Z+
    37ac:	f4 91       	lpm	r31, Z
    37ae:	e0 2d       	mov	r30, r0
    37b0:	09 94       	ijmp

000037b2 <__udivmodhi4>:
    37b2:	aa 1b       	sub	r26, r26
    37b4:	bb 1b       	sub	r27, r27
    37b6:	51 e1       	ldi	r21, 0x11	; 17
    37b8:	07 c0       	rjmp	.+14     	; 0x37c8 <__udivmodhi4_ep>

000037ba <__udivmodhi4_loop>:
    37ba:	aa 1f       	adc	r26, r26
    37bc:	bb 1f       	adc	r27, r27
    37be:	a6 17       	cp	r26, r22
    37c0:	b7 07       	cpc	r27, r23
    37c2:	10 f0       	brcs	.+4      	; 0x37c8 <__udivmodhi4_ep>
    37c4:	a6 1b       	sub	r26, r22
    37c6:	b7 0b       	sbc	r27, r23

000037c8 <__udivmodhi4_ep>:
    37c8:	88 1f       	adc	r24, r24
    37ca:	99 1f       	adc	r25, r25
    37cc:	5a 95       	dec	r21
    37ce:	a9 f7       	brne	.-22     	; 0x37ba <__udivmodhi4_loop>
    37d0:	80 95       	com	r24
    37d2:	90 95       	com	r25
    37d4:	bc 01       	movw	r22, r24
    37d6:	cd 01       	movw	r24, r26
    37d8:	08 95       	ret

000037da <malloc>:
    37da:	0f 93       	push	r16
    37dc:	1f 93       	push	r17
    37de:	cf 93       	push	r28
    37e0:	df 93       	push	r29
    37e2:	82 30       	cpi	r24, 0x02	; 2
    37e4:	91 05       	cpc	r25, r1
    37e6:	10 f4       	brcc	.+4      	; 0x37ec <malloc+0x12>
    37e8:	82 e0       	ldi	r24, 0x02	; 2
    37ea:	90 e0       	ldi	r25, 0x00	; 0
    37ec:	e0 91 51 04 	lds	r30, 0x0451	; 0x800451 <__flp>
    37f0:	f0 91 52 04 	lds	r31, 0x0452	; 0x800452 <__flp+0x1>
    37f4:	20 e0       	ldi	r18, 0x00	; 0
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	a0 e0       	ldi	r26, 0x00	; 0
    37fa:	b0 e0       	ldi	r27, 0x00	; 0
    37fc:	30 97       	sbiw	r30, 0x00	; 0
    37fe:	19 f1       	breq	.+70     	; 0x3846 <malloc+0x6c>
    3800:	40 81       	ld	r20, Z
    3802:	51 81       	ldd	r21, Z+1	; 0x01
    3804:	02 81       	ldd	r16, Z+2	; 0x02
    3806:	13 81       	ldd	r17, Z+3	; 0x03
    3808:	48 17       	cp	r20, r24
    380a:	59 07       	cpc	r21, r25
    380c:	c8 f0       	brcs	.+50     	; 0x3840 <malloc+0x66>
    380e:	84 17       	cp	r24, r20
    3810:	95 07       	cpc	r25, r21
    3812:	69 f4       	brne	.+26     	; 0x382e <malloc+0x54>
    3814:	10 97       	sbiw	r26, 0x00	; 0
    3816:	31 f0       	breq	.+12     	; 0x3824 <malloc+0x4a>
    3818:	12 96       	adiw	r26, 0x02	; 2
    381a:	0c 93       	st	X, r16
    381c:	12 97       	sbiw	r26, 0x02	; 2
    381e:	13 96       	adiw	r26, 0x03	; 3
    3820:	1c 93       	st	X, r17
    3822:	27 c0       	rjmp	.+78     	; 0x3872 <malloc+0x98>
    3824:	00 93 51 04 	sts	0x0451, r16	; 0x800451 <__flp>
    3828:	10 93 52 04 	sts	0x0452, r17	; 0x800452 <__flp+0x1>
    382c:	22 c0       	rjmp	.+68     	; 0x3872 <malloc+0x98>
    382e:	21 15       	cp	r18, r1
    3830:	31 05       	cpc	r19, r1
    3832:	19 f0       	breq	.+6      	; 0x383a <malloc+0x60>
    3834:	42 17       	cp	r20, r18
    3836:	53 07       	cpc	r21, r19
    3838:	18 f4       	brcc	.+6      	; 0x3840 <malloc+0x66>
    383a:	9a 01       	movw	r18, r20
    383c:	bd 01       	movw	r22, r26
    383e:	ef 01       	movw	r28, r30
    3840:	df 01       	movw	r26, r30
    3842:	f8 01       	movw	r30, r16
    3844:	db cf       	rjmp	.-74     	; 0x37fc <malloc+0x22>
    3846:	21 15       	cp	r18, r1
    3848:	31 05       	cpc	r19, r1
    384a:	f9 f0       	breq	.+62     	; 0x388a <malloc+0xb0>
    384c:	28 1b       	sub	r18, r24
    384e:	39 0b       	sbc	r19, r25
    3850:	24 30       	cpi	r18, 0x04	; 4
    3852:	31 05       	cpc	r19, r1
    3854:	80 f4       	brcc	.+32     	; 0x3876 <malloc+0x9c>
    3856:	8a 81       	ldd	r24, Y+2	; 0x02
    3858:	9b 81       	ldd	r25, Y+3	; 0x03
    385a:	61 15       	cp	r22, r1
    385c:	71 05       	cpc	r23, r1
    385e:	21 f0       	breq	.+8      	; 0x3868 <malloc+0x8e>
    3860:	fb 01       	movw	r30, r22
    3862:	93 83       	std	Z+3, r25	; 0x03
    3864:	82 83       	std	Z+2, r24	; 0x02
    3866:	04 c0       	rjmp	.+8      	; 0x3870 <malloc+0x96>
    3868:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <__flp+0x1>
    386c:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <__flp>
    3870:	fe 01       	movw	r30, r28
    3872:	32 96       	adiw	r30, 0x02	; 2
    3874:	44 c0       	rjmp	.+136    	; 0x38fe <malloc+0x124>
    3876:	fe 01       	movw	r30, r28
    3878:	e2 0f       	add	r30, r18
    387a:	f3 1f       	adc	r31, r19
    387c:	81 93       	st	Z+, r24
    387e:	91 93       	st	Z+, r25
    3880:	22 50       	subi	r18, 0x02	; 2
    3882:	31 09       	sbc	r19, r1
    3884:	39 83       	std	Y+1, r19	; 0x01
    3886:	28 83       	st	Y, r18
    3888:	3a c0       	rjmp	.+116    	; 0x38fe <malloc+0x124>
    388a:	20 91 4f 04 	lds	r18, 0x044F	; 0x80044f <__brkval>
    388e:	30 91 50 04 	lds	r19, 0x0450	; 0x800450 <__brkval+0x1>
    3892:	23 2b       	or	r18, r19
    3894:	41 f4       	brne	.+16     	; 0x38a6 <malloc+0xcc>
    3896:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    389a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    389e:	30 93 50 04 	sts	0x0450, r19	; 0x800450 <__brkval+0x1>
    38a2:	20 93 4f 04 	sts	0x044F, r18	; 0x80044f <__brkval>
    38a6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    38aa:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    38ae:	21 15       	cp	r18, r1
    38b0:	31 05       	cpc	r19, r1
    38b2:	41 f4       	brne	.+16     	; 0x38c4 <malloc+0xea>
    38b4:	2d b7       	in	r18, 0x3d	; 61
    38b6:	3e b7       	in	r19, 0x3e	; 62
    38b8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    38bc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    38c0:	24 1b       	sub	r18, r20
    38c2:	35 0b       	sbc	r19, r21
    38c4:	e0 91 4f 04 	lds	r30, 0x044F	; 0x80044f <__brkval>
    38c8:	f0 91 50 04 	lds	r31, 0x0450	; 0x800450 <__brkval+0x1>
    38cc:	e2 17       	cp	r30, r18
    38ce:	f3 07       	cpc	r31, r19
    38d0:	a0 f4       	brcc	.+40     	; 0x38fa <malloc+0x120>
    38d2:	2e 1b       	sub	r18, r30
    38d4:	3f 0b       	sbc	r19, r31
    38d6:	28 17       	cp	r18, r24
    38d8:	39 07       	cpc	r19, r25
    38da:	78 f0       	brcs	.+30     	; 0x38fa <malloc+0x120>
    38dc:	ac 01       	movw	r20, r24
    38de:	4e 5f       	subi	r20, 0xFE	; 254
    38e0:	5f 4f       	sbci	r21, 0xFF	; 255
    38e2:	24 17       	cp	r18, r20
    38e4:	35 07       	cpc	r19, r21
    38e6:	48 f0       	brcs	.+18     	; 0x38fa <malloc+0x120>
    38e8:	4e 0f       	add	r20, r30
    38ea:	5f 1f       	adc	r21, r31
    38ec:	50 93 50 04 	sts	0x0450, r21	; 0x800450 <__brkval+0x1>
    38f0:	40 93 4f 04 	sts	0x044F, r20	; 0x80044f <__brkval>
    38f4:	81 93       	st	Z+, r24
    38f6:	91 93       	st	Z+, r25
    38f8:	02 c0       	rjmp	.+4      	; 0x38fe <malloc+0x124>
    38fa:	e0 e0       	ldi	r30, 0x00	; 0
    38fc:	f0 e0       	ldi	r31, 0x00	; 0
    38fe:	cf 01       	movw	r24, r30
    3900:	df 91       	pop	r29
    3902:	cf 91       	pop	r28
    3904:	1f 91       	pop	r17
    3906:	0f 91       	pop	r16
    3908:	08 95       	ret

0000390a <free>:
    390a:	cf 93       	push	r28
    390c:	df 93       	push	r29
    390e:	00 97       	sbiw	r24, 0x00	; 0
    3910:	09 f4       	brne	.+2      	; 0x3914 <free+0xa>
    3912:	81 c0       	rjmp	.+258    	; 0x3a16 <free+0x10c>
    3914:	fc 01       	movw	r30, r24
    3916:	32 97       	sbiw	r30, 0x02	; 2
    3918:	13 82       	std	Z+3, r1	; 0x03
    391a:	12 82       	std	Z+2, r1	; 0x02
    391c:	a0 91 51 04 	lds	r26, 0x0451	; 0x800451 <__flp>
    3920:	b0 91 52 04 	lds	r27, 0x0452	; 0x800452 <__flp+0x1>
    3924:	10 97       	sbiw	r26, 0x00	; 0
    3926:	81 f4       	brne	.+32     	; 0x3948 <free+0x3e>
    3928:	20 81       	ld	r18, Z
    392a:	31 81       	ldd	r19, Z+1	; 0x01
    392c:	82 0f       	add	r24, r18
    392e:	93 1f       	adc	r25, r19
    3930:	20 91 4f 04 	lds	r18, 0x044F	; 0x80044f <__brkval>
    3934:	30 91 50 04 	lds	r19, 0x0450	; 0x800450 <__brkval+0x1>
    3938:	28 17       	cp	r18, r24
    393a:	39 07       	cpc	r19, r25
    393c:	51 f5       	brne	.+84     	; 0x3992 <free+0x88>
    393e:	f0 93 50 04 	sts	0x0450, r31	; 0x800450 <__brkval+0x1>
    3942:	e0 93 4f 04 	sts	0x044F, r30	; 0x80044f <__brkval>
    3946:	67 c0       	rjmp	.+206    	; 0x3a16 <free+0x10c>
    3948:	ed 01       	movw	r28, r26
    394a:	20 e0       	ldi	r18, 0x00	; 0
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	ce 17       	cp	r28, r30
    3950:	df 07       	cpc	r29, r31
    3952:	40 f4       	brcc	.+16     	; 0x3964 <free+0x5a>
    3954:	4a 81       	ldd	r20, Y+2	; 0x02
    3956:	5b 81       	ldd	r21, Y+3	; 0x03
    3958:	9e 01       	movw	r18, r28
    395a:	41 15       	cp	r20, r1
    395c:	51 05       	cpc	r21, r1
    395e:	f1 f0       	breq	.+60     	; 0x399c <free+0x92>
    3960:	ea 01       	movw	r28, r20
    3962:	f5 cf       	rjmp	.-22     	; 0x394e <free+0x44>
    3964:	d3 83       	std	Z+3, r29	; 0x03
    3966:	c2 83       	std	Z+2, r28	; 0x02
    3968:	40 81       	ld	r20, Z
    396a:	51 81       	ldd	r21, Z+1	; 0x01
    396c:	84 0f       	add	r24, r20
    396e:	95 1f       	adc	r25, r21
    3970:	c8 17       	cp	r28, r24
    3972:	d9 07       	cpc	r29, r25
    3974:	59 f4       	brne	.+22     	; 0x398c <free+0x82>
    3976:	88 81       	ld	r24, Y
    3978:	99 81       	ldd	r25, Y+1	; 0x01
    397a:	84 0f       	add	r24, r20
    397c:	95 1f       	adc	r25, r21
    397e:	02 96       	adiw	r24, 0x02	; 2
    3980:	91 83       	std	Z+1, r25	; 0x01
    3982:	80 83       	st	Z, r24
    3984:	8a 81       	ldd	r24, Y+2	; 0x02
    3986:	9b 81       	ldd	r25, Y+3	; 0x03
    3988:	93 83       	std	Z+3, r25	; 0x03
    398a:	82 83       	std	Z+2, r24	; 0x02
    398c:	21 15       	cp	r18, r1
    398e:	31 05       	cpc	r19, r1
    3990:	29 f4       	brne	.+10     	; 0x399c <free+0x92>
    3992:	f0 93 52 04 	sts	0x0452, r31	; 0x800452 <__flp+0x1>
    3996:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <__flp>
    399a:	3d c0       	rjmp	.+122    	; 0x3a16 <free+0x10c>
    399c:	e9 01       	movw	r28, r18
    399e:	fb 83       	std	Y+3, r31	; 0x03
    39a0:	ea 83       	std	Y+2, r30	; 0x02
    39a2:	49 91       	ld	r20, Y+
    39a4:	59 91       	ld	r21, Y+
    39a6:	c4 0f       	add	r28, r20
    39a8:	d5 1f       	adc	r29, r21
    39aa:	ec 17       	cp	r30, r28
    39ac:	fd 07       	cpc	r31, r29
    39ae:	61 f4       	brne	.+24     	; 0x39c8 <free+0xbe>
    39b0:	80 81       	ld	r24, Z
    39b2:	91 81       	ldd	r25, Z+1	; 0x01
    39b4:	84 0f       	add	r24, r20
    39b6:	95 1f       	adc	r25, r21
    39b8:	02 96       	adiw	r24, 0x02	; 2
    39ba:	e9 01       	movw	r28, r18
    39bc:	99 83       	std	Y+1, r25	; 0x01
    39be:	88 83       	st	Y, r24
    39c0:	82 81       	ldd	r24, Z+2	; 0x02
    39c2:	93 81       	ldd	r25, Z+3	; 0x03
    39c4:	9b 83       	std	Y+3, r25	; 0x03
    39c6:	8a 83       	std	Y+2, r24	; 0x02
    39c8:	e0 e0       	ldi	r30, 0x00	; 0
    39ca:	f0 e0       	ldi	r31, 0x00	; 0
    39cc:	12 96       	adiw	r26, 0x02	; 2
    39ce:	8d 91       	ld	r24, X+
    39d0:	9c 91       	ld	r25, X
    39d2:	13 97       	sbiw	r26, 0x03	; 3
    39d4:	00 97       	sbiw	r24, 0x00	; 0
    39d6:	19 f0       	breq	.+6      	; 0x39de <free+0xd4>
    39d8:	fd 01       	movw	r30, r26
    39da:	dc 01       	movw	r26, r24
    39dc:	f7 cf       	rjmp	.-18     	; 0x39cc <free+0xc2>
    39de:	8d 91       	ld	r24, X+
    39e0:	9c 91       	ld	r25, X
    39e2:	11 97       	sbiw	r26, 0x01	; 1
    39e4:	9d 01       	movw	r18, r26
    39e6:	2e 5f       	subi	r18, 0xFE	; 254
    39e8:	3f 4f       	sbci	r19, 0xFF	; 255
    39ea:	82 0f       	add	r24, r18
    39ec:	93 1f       	adc	r25, r19
    39ee:	20 91 4f 04 	lds	r18, 0x044F	; 0x80044f <__brkval>
    39f2:	30 91 50 04 	lds	r19, 0x0450	; 0x800450 <__brkval+0x1>
    39f6:	28 17       	cp	r18, r24
    39f8:	39 07       	cpc	r19, r25
    39fa:	69 f4       	brne	.+26     	; 0x3a16 <free+0x10c>
    39fc:	30 97       	sbiw	r30, 0x00	; 0
    39fe:	29 f4       	brne	.+10     	; 0x3a0a <free+0x100>
    3a00:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <__flp+0x1>
    3a04:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <__flp>
    3a08:	02 c0       	rjmp	.+4      	; 0x3a0e <free+0x104>
    3a0a:	13 82       	std	Z+3, r1	; 0x03
    3a0c:	12 82       	std	Z+2, r1	; 0x02
    3a0e:	b0 93 50 04 	sts	0x0450, r27	; 0x800450 <__brkval+0x1>
    3a12:	a0 93 4f 04 	sts	0x044F, r26	; 0x80044f <__brkval>
    3a16:	df 91       	pop	r29
    3a18:	cf 91       	pop	r28
    3a1a:	08 95       	ret

00003a1c <realloc>:
    3a1c:	a0 e0       	ldi	r26, 0x00	; 0
    3a1e:	b0 e0       	ldi	r27, 0x00	; 0
    3a20:	e4 e1       	ldi	r30, 0x14	; 20
    3a22:	fd e1       	ldi	r31, 0x1D	; 29
    3a24:	0c 94 f4 1d 	jmp	0x3be8	; 0x3be8 <__prologue_saves__+0x8>
    3a28:	ec 01       	movw	r28, r24
    3a2a:	00 97       	sbiw	r24, 0x00	; 0
    3a2c:	21 f4       	brne	.+8      	; 0x3a36 <realloc+0x1a>
    3a2e:	cb 01       	movw	r24, r22
    3a30:	0e 94 ed 1b 	call	0x37da	; 0x37da <malloc>
    3a34:	b4 c0       	rjmp	.+360    	; 0x3b9e <realloc+0x182>
    3a36:	fc 01       	movw	r30, r24
    3a38:	e6 0f       	add	r30, r22
    3a3a:	f7 1f       	adc	r31, r23
    3a3c:	9c 01       	movw	r18, r24
    3a3e:	22 50       	subi	r18, 0x02	; 2
    3a40:	31 09       	sbc	r19, r1
    3a42:	e2 17       	cp	r30, r18
    3a44:	f3 07       	cpc	r31, r19
    3a46:	08 f4       	brcc	.+2      	; 0x3a4a <realloc+0x2e>
    3a48:	a8 c0       	rjmp	.+336    	; 0x3b9a <realloc+0x17e>
    3a4a:	d9 01       	movw	r26, r18
    3a4c:	0d 91       	ld	r16, X+
    3a4e:	1c 91       	ld	r17, X
    3a50:	11 97       	sbiw	r26, 0x01	; 1
    3a52:	06 17       	cp	r16, r22
    3a54:	17 07       	cpc	r17, r23
    3a56:	b0 f0       	brcs	.+44     	; 0x3a84 <realloc+0x68>
    3a58:	05 30       	cpi	r16, 0x05	; 5
    3a5a:	11 05       	cpc	r17, r1
    3a5c:	08 f4       	brcc	.+2      	; 0x3a60 <realloc+0x44>
    3a5e:	9b c0       	rjmp	.+310    	; 0x3b96 <realloc+0x17a>
    3a60:	c8 01       	movw	r24, r16
    3a62:	04 97       	sbiw	r24, 0x04	; 4
    3a64:	86 17       	cp	r24, r22
    3a66:	97 07       	cpc	r25, r23
    3a68:	08 f4       	brcc	.+2      	; 0x3a6c <realloc+0x50>
    3a6a:	95 c0       	rjmp	.+298    	; 0x3b96 <realloc+0x17a>
    3a6c:	02 50       	subi	r16, 0x02	; 2
    3a6e:	11 09       	sbc	r17, r1
    3a70:	06 1b       	sub	r16, r22
    3a72:	17 0b       	sbc	r17, r23
    3a74:	01 93       	st	Z+, r16
    3a76:	11 93       	st	Z+, r17
    3a78:	6d 93       	st	X+, r22
    3a7a:	7c 93       	st	X, r23
    3a7c:	cf 01       	movw	r24, r30
    3a7e:	0e 94 85 1c 	call	0x390a	; 0x390a <free>
    3a82:	89 c0       	rjmp	.+274    	; 0x3b96 <realloc+0x17a>
    3a84:	5b 01       	movw	r10, r22
    3a86:	a0 1a       	sub	r10, r16
    3a88:	b1 0a       	sbc	r11, r17
    3a8a:	4c 01       	movw	r8, r24
    3a8c:	80 0e       	add	r8, r16
    3a8e:	91 1e       	adc	r9, r17
    3a90:	a0 91 51 04 	lds	r26, 0x0451	; 0x800451 <__flp>
    3a94:	b0 91 52 04 	lds	r27, 0x0452	; 0x800452 <__flp+0x1>
    3a98:	61 2c       	mov	r6, r1
    3a9a:	71 2c       	mov	r7, r1
    3a9c:	e1 2c       	mov	r14, r1
    3a9e:	f1 2c       	mov	r15, r1
    3aa0:	10 97       	sbiw	r26, 0x00	; 0
    3aa2:	09 f4       	brne	.+2      	; 0x3aa6 <realloc+0x8a>
    3aa4:	46 c0       	rjmp	.+140    	; 0x3b32 <realloc+0x116>
    3aa6:	8d 91       	ld	r24, X+
    3aa8:	9c 91       	ld	r25, X
    3aaa:	11 97       	sbiw	r26, 0x01	; 1
    3aac:	a8 15       	cp	r26, r8
    3aae:	b9 05       	cpc	r27, r9
    3ab0:	b1 f5       	brne	.+108    	; 0x3b1e <realloc+0x102>
    3ab2:	6c 01       	movw	r12, r24
    3ab4:	42 e0       	ldi	r20, 0x02	; 2
    3ab6:	c4 0e       	add	r12, r20
    3ab8:	d1 1c       	adc	r13, r1
    3aba:	ca 14       	cp	r12, r10
    3abc:	db 04       	cpc	r13, r11
    3abe:	78 f1       	brcs	.+94     	; 0x3b1e <realloc+0x102>
    3ac0:	4c 01       	movw	r8, r24
    3ac2:	8a 18       	sub	r8, r10
    3ac4:	9b 08       	sbc	r9, r11
    3ac6:	64 01       	movw	r12, r8
    3ac8:	42 e0       	ldi	r20, 0x02	; 2
    3aca:	c4 0e       	add	r12, r20
    3acc:	d1 1c       	adc	r13, r1
    3ace:	12 96       	adiw	r26, 0x02	; 2
    3ad0:	bc 90       	ld	r11, X
    3ad2:	12 97       	sbiw	r26, 0x02	; 2
    3ad4:	13 96       	adiw	r26, 0x03	; 3
    3ad6:	ac 91       	ld	r26, X
    3ad8:	b5 e0       	ldi	r27, 0x05	; 5
    3ada:	cb 16       	cp	r12, r27
    3adc:	d1 04       	cpc	r13, r1
    3ade:	40 f0       	brcs	.+16     	; 0x3af0 <realloc+0xd4>
    3ae0:	b2 82       	std	Z+2, r11	; 0x02
    3ae2:	a3 83       	std	Z+3, r26	; 0x03
    3ae4:	91 82       	std	Z+1, r9	; 0x01
    3ae6:	80 82       	st	Z, r8
    3ae8:	d9 01       	movw	r26, r18
    3aea:	6d 93       	st	X+, r22
    3aec:	7c 93       	st	X, r23
    3aee:	09 c0       	rjmp	.+18     	; 0x3b02 <realloc+0xe6>
    3af0:	0e 5f       	subi	r16, 0xFE	; 254
    3af2:	1f 4f       	sbci	r17, 0xFF	; 255
    3af4:	80 0f       	add	r24, r16
    3af6:	91 1f       	adc	r25, r17
    3af8:	f9 01       	movw	r30, r18
    3afa:	91 83       	std	Z+1, r25	; 0x01
    3afc:	80 83       	st	Z, r24
    3afe:	eb 2d       	mov	r30, r11
    3b00:	fa 2f       	mov	r31, r26
    3b02:	e1 14       	cp	r14, r1
    3b04:	f1 04       	cpc	r15, r1
    3b06:	31 f0       	breq	.+12     	; 0x3b14 <realloc+0xf8>
    3b08:	d7 01       	movw	r26, r14
    3b0a:	13 96       	adiw	r26, 0x03	; 3
    3b0c:	fc 93       	st	X, r31
    3b0e:	ee 93       	st	-X, r30
    3b10:	12 97       	sbiw	r26, 0x02	; 2
    3b12:	41 c0       	rjmp	.+130    	; 0x3b96 <realloc+0x17a>
    3b14:	f0 93 52 04 	sts	0x0452, r31	; 0x800452 <__flp+0x1>
    3b18:	e0 93 51 04 	sts	0x0451, r30	; 0x800451 <__flp>
    3b1c:	3c c0       	rjmp	.+120    	; 0x3b96 <realloc+0x17a>
    3b1e:	68 16       	cp	r6, r24
    3b20:	79 06       	cpc	r7, r25
    3b22:	08 f4       	brcc	.+2      	; 0x3b26 <realloc+0x10a>
    3b24:	3c 01       	movw	r6, r24
    3b26:	7d 01       	movw	r14, r26
    3b28:	12 96       	adiw	r26, 0x02	; 2
    3b2a:	0d 90       	ld	r0, X+
    3b2c:	bc 91       	ld	r27, X
    3b2e:	a0 2d       	mov	r26, r0
    3b30:	b7 cf       	rjmp	.-146    	; 0x3aa0 <realloc+0x84>
    3b32:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <__brkval>
    3b36:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <__brkval+0x1>
    3b3a:	88 16       	cp	r8, r24
    3b3c:	99 06       	cpc	r9, r25
    3b3e:	e1 f4       	brne	.+56     	; 0x3b78 <realloc+0x15c>
    3b40:	66 16       	cp	r6, r22
    3b42:	77 06       	cpc	r7, r23
    3b44:	c8 f4       	brcc	.+50     	; 0x3b78 <realloc+0x15c>
    3b46:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3b4a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    3b4e:	00 97       	sbiw	r24, 0x00	; 0
    3b50:	41 f4       	brne	.+16     	; 0x3b62 <realloc+0x146>
    3b52:	8d b7       	in	r24, 0x3d	; 61
    3b54:	9e b7       	in	r25, 0x3e	; 62
    3b56:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3b5a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3b5e:	84 1b       	sub	r24, r20
    3b60:	95 0b       	sbc	r25, r21
    3b62:	e8 17       	cp	r30, r24
    3b64:	f9 07       	cpc	r31, r25
    3b66:	c8 f4       	brcc	.+50     	; 0x3b9a <realloc+0x17e>
    3b68:	f0 93 50 04 	sts	0x0450, r31	; 0x800450 <__brkval+0x1>
    3b6c:	e0 93 4f 04 	sts	0x044F, r30	; 0x80044f <__brkval>
    3b70:	f9 01       	movw	r30, r18
    3b72:	71 83       	std	Z+1, r23	; 0x01
    3b74:	60 83       	st	Z, r22
    3b76:	0f c0       	rjmp	.+30     	; 0x3b96 <realloc+0x17a>
    3b78:	cb 01       	movw	r24, r22
    3b7a:	0e 94 ed 1b 	call	0x37da	; 0x37da <malloc>
    3b7e:	7c 01       	movw	r14, r24
    3b80:	00 97       	sbiw	r24, 0x00	; 0
    3b82:	59 f0       	breq	.+22     	; 0x3b9a <realloc+0x17e>
    3b84:	a8 01       	movw	r20, r16
    3b86:	be 01       	movw	r22, r28
    3b88:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <memcpy>
    3b8c:	ce 01       	movw	r24, r28
    3b8e:	0e 94 85 1c 	call	0x390a	; 0x390a <free>
    3b92:	c7 01       	movw	r24, r14
    3b94:	04 c0       	rjmp	.+8      	; 0x3b9e <realloc+0x182>
    3b96:	ce 01       	movw	r24, r28
    3b98:	02 c0       	rjmp	.+4      	; 0x3b9e <realloc+0x182>
    3b9a:	80 e0       	ldi	r24, 0x00	; 0
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	cd b7       	in	r28, 0x3d	; 61
    3ba0:	de b7       	in	r29, 0x3e	; 62
    3ba2:	ee e0       	ldi	r30, 0x0E	; 14
    3ba4:	0c 94 10 1e 	jmp	0x3c20	; 0x3c20 <__epilogue_restores__+0x8>

00003ba8 <abort>:
    3ba8:	81 e0       	ldi	r24, 0x01	; 1
    3baa:	90 e0       	ldi	r25, 0x00	; 0
    3bac:	f8 94       	cli
    3bae:	0c 94 27 1e 	jmp	0x3c4e	; 0x3c4e <__do_global_dtors>

00003bb2 <strcpy_P>:
    3bb2:	fb 01       	movw	r30, r22
    3bb4:	dc 01       	movw	r26, r24
    3bb6:	05 90       	lpm	r0, Z+
    3bb8:	0d 92       	st	X+, r0
    3bba:	00 20       	and	r0, r0
    3bbc:	e1 f7       	brne	.-8      	; 0x3bb6 <strcpy_P+0x4>
    3bbe:	08 95       	ret

00003bc0 <memcpy>:
    3bc0:	fb 01       	movw	r30, r22
    3bc2:	dc 01       	movw	r26, r24
    3bc4:	02 c0       	rjmp	.+4      	; 0x3bca <memcpy+0xa>
    3bc6:	01 90       	ld	r0, Z+
    3bc8:	0d 92       	st	X+, r0
    3bca:	41 50       	subi	r20, 0x01	; 1
    3bcc:	50 40       	sbci	r21, 0x00	; 0
    3bce:	d8 f7       	brcc	.-10     	; 0x3bc6 <memcpy+0x6>
    3bd0:	08 95       	ret

00003bd2 <strcpy>:
    3bd2:	fb 01       	movw	r30, r22
    3bd4:	dc 01       	movw	r26, r24
    3bd6:	01 90       	ld	r0, Z+
    3bd8:	0d 92       	st	X+, r0
    3bda:	00 20       	and	r0, r0
    3bdc:	e1 f7       	brne	.-8      	; 0x3bd6 <strcpy+0x4>
    3bde:	08 95       	ret

00003be0 <__prologue_saves__>:
    3be0:	2f 92       	push	r2
    3be2:	3f 92       	push	r3
    3be4:	4f 92       	push	r4
    3be6:	5f 92       	push	r5
    3be8:	6f 92       	push	r6
    3bea:	7f 92       	push	r7
    3bec:	8f 92       	push	r8
    3bee:	9f 92       	push	r9
    3bf0:	af 92       	push	r10
    3bf2:	bf 92       	push	r11
    3bf4:	cf 92       	push	r12
    3bf6:	df 92       	push	r13
    3bf8:	ef 92       	push	r14
    3bfa:	ff 92       	push	r15
    3bfc:	0f 93       	push	r16
    3bfe:	1f 93       	push	r17
    3c00:	cf 93       	push	r28
    3c02:	df 93       	push	r29
    3c04:	cd b7       	in	r28, 0x3d	; 61
    3c06:	de b7       	in	r29, 0x3e	; 62
    3c08:	ca 1b       	sub	r28, r26
    3c0a:	db 0b       	sbc	r29, r27
    3c0c:	0f b6       	in	r0, 0x3f	; 63
    3c0e:	f8 94       	cli
    3c10:	de bf       	out	0x3e, r29	; 62
    3c12:	0f be       	out	0x3f, r0	; 63
    3c14:	cd bf       	out	0x3d, r28	; 61
    3c16:	09 94       	ijmp

00003c18 <__epilogue_restores__>:
    3c18:	2a 88       	ldd	r2, Y+18	; 0x12
    3c1a:	39 88       	ldd	r3, Y+17	; 0x11
    3c1c:	48 88       	ldd	r4, Y+16	; 0x10
    3c1e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c20:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c22:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c24:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c26:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c28:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c2a:	b9 84       	ldd	r11, Y+9	; 0x09
    3c2c:	c8 84       	ldd	r12, Y+8	; 0x08
    3c2e:	df 80       	ldd	r13, Y+7	; 0x07
    3c30:	ee 80       	ldd	r14, Y+6	; 0x06
    3c32:	fd 80       	ldd	r15, Y+5	; 0x05
    3c34:	0c 81       	ldd	r16, Y+4	; 0x04
    3c36:	1b 81       	ldd	r17, Y+3	; 0x03
    3c38:	aa 81       	ldd	r26, Y+2	; 0x02
    3c3a:	b9 81       	ldd	r27, Y+1	; 0x01
    3c3c:	ce 0f       	add	r28, r30
    3c3e:	d1 1d       	adc	r29, r1
    3c40:	0f b6       	in	r0, 0x3f	; 63
    3c42:	f8 94       	cli
    3c44:	de bf       	out	0x3e, r29	; 62
    3c46:	0f be       	out	0x3f, r0	; 63
    3c48:	cd bf       	out	0x3d, r28	; 61
    3c4a:	ed 01       	movw	r28, r26
    3c4c:	08 95       	ret

00003c4e <__do_global_dtors>:
    3c4e:	10 e0       	ldi	r17, 0x00	; 0
    3c50:	cd ee       	ldi	r28, 0xED	; 237
    3c52:	d0 e0       	ldi	r29, 0x00	; 0
    3c54:	04 c0       	rjmp	.+8      	; 0x3c5e <__do_global_dtors+0x10>
    3c56:	fe 01       	movw	r30, r28
    3c58:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <__tablejump2__>
    3c5c:	21 96       	adiw	r28, 0x01	; 1
    3c5e:	ce 3e       	cpi	r28, 0xEE	; 238
    3c60:	d1 07       	cpc	r29, r17
    3c62:	c9 f7       	brne	.-14     	; 0x3c56 <__do_global_dtors+0x8>
    3c64:	f8 94       	cli

00003c66 <__stop_program>:
    3c66:	ff cf       	rjmp	.-2      	; 0x3c66 <__stop_program>
