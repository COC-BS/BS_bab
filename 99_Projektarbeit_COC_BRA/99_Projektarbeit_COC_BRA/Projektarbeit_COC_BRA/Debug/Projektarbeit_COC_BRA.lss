
Projektarbeit_COC_BRA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000186  00800100  00003e30  00003ec4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003e30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000257  00800286  00800286  0000404a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000404a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000407c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ae8  00000000  00000000  000040bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00017615  00000000  00000000  00004ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e69  00000000  00000000  0001c1b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005e5d  00000000  00000000  00020022  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002208  00000000  00000000  00025e80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004bdb  00000000  00000000  00028088  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bf1e  00000000  00000000  0002cc63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ba0  00000000  00000000  00038b81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__dtors_end>
       4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      28:	0c 94 01 17 	jmp	0x2e02	; 0x2e02 <__vector_10>
      2c:	0c 94 9d 15 	jmp	0x2b3a	; 0x2b3a <__vector_11>
      30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      5c:	0c 94 95 17 	jmp	0x2f2a	; 0x2f2a <__vector_23>
      60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      90:	0c 94 3a 0d 	jmp	0x1a74	; 0x1a74 <__vector_36>
      94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      ac:	eb 18       	sub	r14, r11
      ae:	ee 18       	sub	r14, r14
      b0:	dd 18       	sub	r13, r13
      b2:	e1 18       	sub	r14, r1
      b4:	e7 18       	sub	r14, r7
      b6:	0f 19       	sub	r16, r15
      b8:	0f 19       	sub	r16, r15
      ba:	0f 19       	sub	r16, r15
      bc:	f2 18       	sub	r15, r2
      be:	f6 18       	sub	r15, r6
      c0:	fa 18       	sub	r15, r10
      c2:	00 19       	sub	r16, r0
      c4:	04 19       	sub	r16, r4
      c6:	0f 19       	sub	r16, r15
      c8:	0a 19       	sub	r16, r10

000000ca <__trampolines_end>:
	...

000000cb <USB_DeviceDescriptorIAD>:
      cb:	12 01 00 02 ef 02 01 40 41 23 36 80 00 01 01 02     .......@A#6.....
      db:	03 01                                               ..

000000dd <STRING_MANUFACTURER>:
      dd:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

000000e9 <STRING_PRODUCT>:
      e9:	41 72 64 75 69 6e 6f 20 4c 65 6f 6e 61 72 64 6f     Arduino Leonardo
	...

000000fa <STRING_LANGUAGE>:
      fa:	04 03 09 04                                         ....

000000fe <analog_pin_to_channel_PGM>:
      fe:	07 06 05 04 01 00 08 0a 0b 0c 0d 09                 ............

0000010a <digital_pin_to_timer_PGM>:
     10a:	00 00 00 02 00 09 0f 00 00 03 04 01 00 0c 00 00     ................
	...

00000129 <digital_pin_to_bit_mask_PGM>:
     129:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     139:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

00000148 <digital_pin_to_port_PGM>:
     148:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     158:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

00000167 <port_to_input_PGM>:
     167:	00 00 00 00 23 00 26 00 29 00 2c 00 2f 00           ....#.&.).,./.

00000175 <port_to_output_PGM>:
     175:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

00000183 <port_to_mode_PGM>:
     183:	00 00 00 00 24 00 27 00 2a 00 2d 00 30 00           ....$.'.*.-.0.

00000191 <_cdcInterface>:
     191:	08 0b 00 02 02 02 01 00 09 04 00 00 01 02 02 00     ................
     1a1:	00 05 24 00 10 01 05 24 01 01 01 04 24 02 06 05     ..$....$....$...
     1b1:	24 06 00 01 07 05 81 03 10 00 40 09 04 01 00 02     $.........@.....
     1c1:	0a 00 00 00 07 05 02 02 40 00 00 07 05 83 02 40     ........@......@
     1d1:	00 00 00                                            ...

000001d4 <__ctors_start>:
     1d4:	55 05       	cpc	r21, r5
     1d6:	ce 0f       	add	r28, r30
     1d8:	2c 1b       	sub	r18, r28

000001da <__ctors_end>:
     1da:	66 06       	cpc	r6, r22

000001dc <__dtors_end>:
     1dc:	11 24       	eor	r1, r1
     1de:	1f be       	out	0x3f, r1	; 63
     1e0:	cf ef       	ldi	r28, 0xFF	; 255
     1e2:	da e0       	ldi	r29, 0x0A	; 10
     1e4:	de bf       	out	0x3e, r29	; 62
     1e6:	cd bf       	out	0x3d, r28	; 61

000001e8 <__do_copy_data>:
     1e8:	12 e0       	ldi	r17, 0x02	; 2
     1ea:	a0 e0       	ldi	r26, 0x00	; 0
     1ec:	b1 e0       	ldi	r27, 0x01	; 1
     1ee:	e0 e3       	ldi	r30, 0x30	; 48
     1f0:	fe e3       	ldi	r31, 0x3E	; 62
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__do_copy_data+0x10>
     1f4:	05 90       	lpm	r0, Z+
     1f6:	0d 92       	st	X+, r0
     1f8:	a6 38       	cpi	r26, 0x86	; 134
     1fa:	b1 07       	cpc	r27, r17
     1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__do_copy_data+0xc>

000001fe <__do_clear_bss>:
     1fe:	24 e0       	ldi	r18, 0x04	; 4
     200:	a6 e8       	ldi	r26, 0x86	; 134
     202:	b2 e0       	ldi	r27, 0x02	; 2
     204:	01 c0       	rjmp	.+2      	; 0x208 <.do_clear_bss_start>

00000206 <.do_clear_bss_loop>:
     206:	1d 92       	st	X+, r1

00000208 <.do_clear_bss_start>:
     208:	ad 3d       	cpi	r26, 0xDD	; 221
     20a:	b2 07       	cpc	r27, r18
     20c:	e1 f7       	brne	.-8      	; 0x206 <.do_clear_bss_loop>

0000020e <__do_global_ctors>:
     20e:	10 e0       	ldi	r17, 0x00	; 0
     210:	cd ee       	ldi	r28, 0xED	; 237
     212:	d0 e0       	ldi	r29, 0x00	; 0
     214:	04 c0       	rjmp	.+8      	; 0x21e <__do_global_ctors+0x10>
     216:	21 97       	sbiw	r28, 0x01	; 1
     218:	fe 01       	movw	r30, r28
     21a:	0e 94 b7 1c 	call	0x396e	; 0x396e <__tablejump2__>
     21e:	ca 3e       	cpi	r28, 0xEA	; 234
     220:	d1 07       	cpc	r29, r17
     222:	c9 f7       	brne	.-14     	; 0x216 <__do_global_ctors+0x8>
     224:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <main>
     228:	0c 94 0b 1f 	jmp	0x3e16	; 0x3e16 <__do_global_dtors>

0000022c <__bad_interrupt>:
     22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <_Z6getkeyv>:
 */
int getkey(void)
{
	static int keys[NUMKEYS+1];
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	0e 94 a2 18 	call	0x3144	; 0x3144 <analogRead>

	if (val > 1020) { // no key pressed
     236:	8d 3f       	cpi	r24, 0xFD	; 253
     238:	23 e0       	ldi	r18, 0x03	; 3
     23a:	92 07       	cpc	r25, r18
     23c:	20 f1       	brcs	.+72     	; 0x286 <_Z6getkeyv+0x56>
		if (++keys[0] > NOPRESS) {
     23e:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <__data_end>
     242:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <__data_end+0x1>
     246:	01 96       	adiw	r24, 0x01	; 1
     248:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <__data_end+0x1>
     24c:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <__data_end>
     250:	03 97       	sbiw	r24, 0x03	; 3
     252:	0c f4       	brge	.+2      	; 0x256 <_Z6getkeyv+0x26>
     254:	6a c0       	rjmp	.+212    	; 0x32a <_Z6getkeyv+0xfa>
     256:	e6 e8       	ldi	r30, 0x86	; 134
     258:	f2 e0       	ldi	r31, 0x02	; 2
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	90 e0       	ldi	r25, 0x00	; 0
			for(uint8_t i = 0; i <= NUMKEYS; i++){
				if(keys[i] > KEYPRESS){
     262:	40 81       	ld	r20, Z
     264:	51 81       	ldd	r21, Z+1	; 0x01
     266:	44 30       	cpi	r20, 0x04	; 4
     268:	51 05       	cpc	r21, r1
     26a:	2c f0       	brlt	.+10     	; 0x276 <_Z6getkeyv+0x46>
     26c:	c9 01       	movw	r24, r18
					data = i;
					if(keys[i] > LONGPRESS) data += 5;
     26e:	49 3c       	cpi	r20, 0xC9	; 201
     270:	51 05       	cpc	r21, r1
     272:	0c f0       	brlt	.+2      	; 0x276 <_Z6getkeyv+0x46>
     274:	05 96       	adiw	r24, 0x05	; 5
				}
				keys[i] = 0;
     276:	11 92       	st	Z+, r1
     278:	11 92       	st	Z+, r1
     27a:	2f 5f       	subi	r18, 0xFF	; 255
     27c:	3f 4f       	sbci	r19, 0xFF	; 255
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);

	if (val > 1020) { // no key pressed
		if (++keys[0] > NOPRESS) {
			for(uint8_t i = 0; i <= NUMKEYS; i++){
     27e:	26 30       	cpi	r18, 0x06	; 6
     280:	31 05       	cpc	r19, r1
     282:	79 f7       	brne	.-34     	; 0x262 <_Z6getkeyv+0x32>
     284:	08 95       	ret
			}
		}
		else data = 0;
	}
	else {
		if (val < S1_LIMIT && keys[1] < 32000) ++keys[1]; // key1 pressed
     286:	89 34       	cpi	r24, 0x49	; 73
     288:	91 05       	cpc	r25, r1
     28a:	70 f4       	brcc	.+28     	; 0x2a8 <_Z6getkeyv+0x78>
     28c:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <__data_end+0x2>
     290:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <__data_end+0x3>
     294:	81 15       	cp	r24, r1
     296:	2d e7       	ldi	r18, 0x7D	; 125
     298:	92 07       	cpc	r25, r18
     29a:	4c f4       	brge	.+18     	; 0x2ae <_Z6getkeyv+0x7e>
     29c:	01 96       	adiw	r24, 0x01	; 1
     29e:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <__data_end+0x3>
     2a2:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <__data_end+0x2>
     2a6:	41 c0       	rjmp	.+130    	; 0x32a <_Z6getkeyv+0xfa>
		else if (val < S2_LIMIT && keys[2] < 32000) ++keys[2]; //key2 pressed
     2a8:	8e 3e       	cpi	r24, 0xEE	; 238
     2aa:	91 05       	cpc	r25, r1
     2ac:	70 f4       	brcc	.+28     	; 0x2ca <_Z6getkeyv+0x9a>
     2ae:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <__data_end+0x4>
     2b2:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <__data_end+0x5>
     2b6:	81 15       	cp	r24, r1
     2b8:	2d e7       	ldi	r18, 0x7D	; 125
     2ba:	92 07       	cpc	r25, r18
     2bc:	54 f4       	brge	.+20     	; 0x2d2 <_Z6getkeyv+0xa2>
     2be:	01 96       	adiw	r24, 0x01	; 1
     2c0:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <__data_end+0x5>
     2c4:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <__data_end+0x4>
     2c8:	30 c0       	rjmp	.+96     	; 0x32a <_Z6getkeyv+0xfa>
		else if (val < S3_LIMIT && keys[3] < 32000) ++keys[3]; //key3 pressed
     2ca:	82 3a       	cpi	r24, 0xA2	; 162
     2cc:	21 e0       	ldi	r18, 0x01	; 1
     2ce:	92 07       	cpc	r25, r18
     2d0:	70 f4       	brcc	.+28     	; 0x2ee <_Z6getkeyv+0xbe>
     2d2:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <__data_end+0x6>
     2d6:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <__data_end+0x7>
     2da:	81 15       	cp	r24, r1
     2dc:	2d e7       	ldi	r18, 0x7D	; 125
     2de:	92 07       	cpc	r25, r18
     2e0:	4c f4       	brge	.+18     	; 0x2f4 <_Z6getkeyv+0xc4>
     2e2:	01 96       	adiw	r24, 0x01	; 1
     2e4:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <__data_end+0x7>
     2e8:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <__data_end+0x6>
     2ec:	1e c0       	rjmp	.+60     	; 0x32a <_Z6getkeyv+0xfa>
		else if (val < S4_LIMIT && keys[4] < 32000) ++keys[4]; //key4 pressed
     2ee:	80 37       	cpi	r24, 0x70	; 112
     2f0:	92 40       	sbci	r25, 0x02	; 2
     2f2:	70 f4       	brcc	.+28     	; 0x310 <_Z6getkeyv+0xe0>
     2f4:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <__data_end+0x8>
     2f8:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <__data_end+0x9>
     2fc:	81 15       	cp	r24, r1
     2fe:	2d e7       	ldi	r18, 0x7D	; 125
     300:	92 07       	cpc	r25, r18
     302:	34 f4       	brge	.+12     	; 0x310 <_Z6getkeyv+0xe0>
     304:	01 96       	adiw	r24, 0x01	; 1
     306:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <__data_end+0x9>
     30a:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <__data_end+0x8>
     30e:	0d c0       	rjmp	.+26     	; 0x32a <_Z6getkeyv+0xfa>
		else if ( keys[5] < 32000) ++keys[5]; // key5 pressed
     310:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <__data_end+0xa>
     314:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <__data_end+0xb>
     318:	81 15       	cp	r24, r1
     31a:	2d e7       	ldi	r18, 0x7D	; 125
     31c:	92 07       	cpc	r25, r18
     31e:	2c f4       	brge	.+10     	; 0x32a <_Z6getkeyv+0xfa>
     320:	01 96       	adiw	r24, 0x01	; 1
     322:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <__data_end+0xb>
     326:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <__data_end+0xa>
		data = 0;
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	90 e0       	ldi	r25, 0x00	; 0
	}
	return data;
}
     32e:	08 95       	ret

00000330 <_ZN5Print17availableForWriteEv>:
	return ret;
}

int Zeit::GetHours(){return hh_;};
int Zeit::GetMinutes(){return mm_;};
int Zeit::GetSeconds(){return ss_;};
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	08 95       	ret

00000336 <_ZN5Print5flushEv>:
     336:	08 95       	ret

00000338 <_ZN7hd4478013iosetContrastEh>:
     338:	8d ef       	ldi	r24, 0xFD	; 253
     33a:	9f ef       	ldi	r25, 0xFF	; 255
     33c:	08 95       	ret

0000033e <_Z14chooseTimeZonev>:
     33e:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <timeZoneChoosen>
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	89 27       	eor	r24, r25
     346:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <timeZoneChoosen>
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	08 95       	ret

00000350 <_Z10changeAMPMv>:
     350:	90 91 c4 02 	lds	r25, 0x02C4	; 0x8002c4 <ampm>
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	89 27       	eor	r24, r25
     358:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <ampm>
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	08 95       	ret

00000362 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>:
     362:	0f 93       	push	r16
     364:	1f 93       	push	r17
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	18 2f       	mov	r17, r24
     36c:	d0 e0       	ldi	r29, 0x00	; 0
     36e:	c0 e2       	ldi	r28, 0x20	; 32
     370:	6c 2f       	mov	r22, r28
     372:	83 e1       	ldi	r24, 0x13	; 19
     374:	94 e0       	ldi	r25, 0x04	; 4
     376:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZN7TwoWire17beginTransmissionEh>
     37a:	83 e1       	ldi	r24, 0x13	; 19
     37c:	94 e0       	ldi	r25, 0x04	; 4
     37e:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_ZN7TwoWire15endTransmissionEv>
     382:	08 2f       	mov	r16, r24
     384:	61 e0       	ldi	r22, 0x01	; 1
     386:	70 e0       	ldi	r23, 0x00	; 0
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 10 18 	call	0x3020	; 0x3020 <delay>
     390:	01 11       	cpse	r16, r1
     392:	03 c0       	rjmp	.+6      	; 0x39a <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x38>
     394:	1d 17       	cp	r17, r29
     396:	f9 f0       	breq	.+62     	; 0x3d6 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x74>
     398:	df 5f       	subi	r29, 0xFF	; 255
     39a:	cf 5f       	subi	r28, 0xFF	; 255
     39c:	c8 32       	cpi	r28, 0x28	; 40
     39e:	41 f7       	brne	.-48     	; 0x370 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0xe>
     3a0:	c8 e3       	ldi	r28, 0x38	; 56
     3a2:	6c 2f       	mov	r22, r28
     3a4:	83 e1       	ldi	r24, 0x13	; 19
     3a6:	94 e0       	ldi	r25, 0x04	; 4
     3a8:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZN7TwoWire17beginTransmissionEh>
     3ac:	83 e1       	ldi	r24, 0x13	; 19
     3ae:	94 e0       	ldi	r25, 0x04	; 4
     3b0:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_ZN7TwoWire15endTransmissionEv>
     3b4:	08 2f       	mov	r16, r24
     3b6:	61 e0       	ldi	r22, 0x01	; 1
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 10 18 	call	0x3020	; 0x3020 <delay>
     3c2:	01 11       	cpse	r16, r1
     3c4:	03 c0       	rjmp	.+6      	; 0x3cc <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x6a>
     3c6:	1d 17       	cp	r17, r29
     3c8:	31 f0       	breq	.+12     	; 0x3d6 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x74>
     3ca:	df 5f       	subi	r29, 0xFF	; 255
     3cc:	cf 5f       	subi	r28, 0xFF	; 255
     3ce:	c0 34       	cpi	r28, 0x40	; 64
     3d0:	41 f7       	brne	.-48     	; 0x3a2 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x40>
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x76>
     3d6:	8c 2f       	mov	r24, r28
     3d8:	df 91       	pop	r29
     3da:	cf 91       	pop	r28
     3dc:	1f 91       	pop	r17
     3de:	0f 91       	pop	r16
     3e0:	08 95       	ret

000003e2 <_ZN7TwoWire5writeEi>:
     3e2:	dc 01       	movw	r26, r24
     3e4:	ed 91       	ld	r30, X+
     3e6:	fc 91       	ld	r31, X
     3e8:	01 90       	ld	r0, Z+
     3ea:	f0 81       	ld	r31, Z
     3ec:	e0 2d       	mov	r30, r0
     3ee:	09 94       	ijmp

000003f0 <_ZN4Zeit4TickEv>:
     3f0:	fc 01       	movw	r30, r24
     3f2:	84 81       	ldd	r24, Z+4	; 0x04
     3f4:	95 81       	ldd	r25, Z+5	; 0x05
     3f6:	01 96       	adiw	r24, 0x01	; 1
     3f8:	2c e3       	ldi	r18, 0x3C	; 60
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	b9 01       	movw	r22, r18
     3fe:	0e 94 81 1c 	call	0x3902	; 0x3902 <__divmodhi4>
     402:	95 83       	std	Z+5, r25	; 0x05
     404:	84 83       	std	Z+4, r24	; 0x04
     406:	89 2b       	or	r24, r25
     408:	19 f0       	breq	.+6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	08 95       	ret
     410:	82 81       	ldd	r24, Z+2	; 0x02
     412:	93 81       	ldd	r25, Z+3	; 0x03
     414:	01 96       	adiw	r24, 0x01	; 1
     416:	b9 01       	movw	r22, r18
     418:	0e 94 81 1c 	call	0x3902	; 0x3902 <__divmodhi4>
     41c:	93 83       	std	Z+3, r25	; 0x03
     41e:	82 83       	std	Z+2, r24	; 0x02
     420:	89 2b       	or	r24, r25
     422:	99 f7       	brne	.-26     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     424:	80 81       	ld	r24, Z
     426:	91 81       	ldd	r25, Z+1	; 0x01
     428:	01 96       	adiw	r24, 0x01	; 1
     42a:	68 e1       	ldi	r22, 0x18	; 24
     42c:	70 e0       	ldi	r23, 0x00	; 0
     42e:	0e 94 81 1c 	call	0x3902	; 0x3902 <__divmodhi4>
     432:	ac 01       	movw	r20, r24
     434:	91 83       	std	Z+1, r25	; 0x01
     436:	80 83       	st	Z, r24
     438:	21 e0       	ldi	r18, 0x01	; 1
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	45 2b       	or	r20, r21
     43e:	09 f0       	breq	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     440:	20 e0       	ldi	r18, 0x00	; 0
     442:	82 2f       	mov	r24, r18
     444:	08 95       	ret

00000446 <_Z5Watchv>:
 * frequent calls will result in counting the time. days-of-month and leap years are taken into account
 *
 * @return void
 */
void Watch()
{
     446:	0f 93       	push	r16
     448:	1f 93       	push	r17
#define INTERVAL 1000L
	static long target = INTERVAL;
	if (millis() > target)	{
     44a:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <millis>
     44e:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZZ5WatchvE6target>
     452:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZZ5WatchvE6target+0x1>
     456:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <_ZZ5WatchvE6target+0x2>
     45a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <_ZZ5WatchvE6target+0x3>
     45e:	06 17       	cp	r16, r22
     460:	17 07       	cpc	r17, r23
     462:	28 07       	cpc	r18, r24
     464:	39 07       	cpc	r19, r25
     466:	e0 f4       	brcc	.+56     	; 0x4a0 <_Z5Watchv+0x5a>
		target += INTERVAL;
     468:	d9 01       	movw	r26, r18
     46a:	c8 01       	movw	r24, r16
     46c:	88 51       	subi	r24, 0x18	; 24
     46e:	9c 4f       	sbci	r25, 0xFC	; 252
     470:	af 4f       	sbci	r26, 0xFF	; 255
     472:	bf 4f       	sbci	r27, 0xFF	; 255
     474:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZZ5WatchvE6target>
     478:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZZ5WatchvE6target+0x1>
     47c:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_ZZ5WatchvE6target+0x2>
     480:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_ZZ5WatchvE6target+0x3>
		zeitGMT.Tick();
     484:	8c eb       	ldi	r24, 0xBC	; 188
     486:	92 e0       	ldi	r25, 0x02	; 2
     488:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_ZN4Zeit4TickEv>
		zeitTimeZone.Tick();
     48c:	84 eb       	ldi	r24, 0xB4	; 180
     48e:	92 e0       	ldi	r25, 0x02	; 2
     490:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_ZN4Zeit4TickEv>
		zeitLocal.Tick();
     494:	8c ea       	ldi	r24, 0xAC	; 172
     496:	92 e0       	ldi	r25, 0x02	; 2
		//if(zeit1.Tick()) datum1.Tick(); //Wenn die Zeit bei 24.00 ankommt wird ret = 1 gesetzt und das Datum eins weitergestellt
	}
#undef INTERVAL
}
     498:	1f 91       	pop	r17
     49a:	0f 91       	pop	r16
	static long target = INTERVAL;
	if (millis() > target)	{
		target += INTERVAL;
		zeitGMT.Tick();
		zeitTimeZone.Tick();
		zeitLocal.Tick();
     49c:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <_ZN4Zeit4TickEv>
		//if(zeit1.Tick()) datum1.Tick(); //Wenn die Zeit bei 24.00 ankommt wird ret = 1 gesetzt und das Datum eins weitergestellt
	}
#undef INTERVAL
}
     4a0:	1f 91       	pop	r17
     4a2:	0f 91       	pop	r16
     4a4:	08 95       	ret

000004a6 <_Z11printhhmmssR4Zeit>:
 * @param[in] zeit: struct 
 * 
 * @return void
 */
void printhhmmss(class Zeit &z)
{
     4a6:	0f 93       	push	r16
     4a8:	1f 93       	push	r17
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	8c 01       	movw	r16, r24
	if (ampm)
     4b0:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <ampm>
     4b4:	f8 01       	movw	r30, r16
     4b6:	c0 81       	ld	r28, Z
     4b8:	d1 81       	ldd	r29, Z+1	; 0x01
     4ba:	88 23       	and	r24, r24
     4bc:	89 f0       	breq	.+34     	; 0x4e0 <_Z11printhhmmssR4Zeit+0x3a>
	{
		int ampmhours = z.GetHours(); 
		if (ampmhours > 12)
     4be:	cd 30       	cpi	r28, 0x0D	; 13
     4c0:	d1 05       	cpc	r29, r1
     4c2:	0c f0       	brlt	.+2      	; 0x4c6 <_Z11printhhmmssR4Zeit+0x20>
		{
			 ampmhours -= 12;
     4c4:	2c 97       	sbiw	r28, 0x0c	; 12
			 if(ampmhours<=9)lcd.print("0");
			 lcd.print(ampmhours);
		}	
		else
		{
			if(ampmhours<=9)lcd.print("0");
     4c6:	ca 30       	cpi	r28, 0x0A	; 10
     4c8:	d1 05       	cpc	r29, r1
     4ca:	34 f4       	brge	.+12     	; 0x4d8 <_Z11printhhmmssR4Zeit+0x32>
     4cc:	6f e1       	ldi	r22, 0x1F	; 31
     4ce:	71 e0       	ldi	r23, 0x01	; 1
     4d0:	88 e7       	ldi	r24, 0x78	; 120
     4d2:	93 e0       	ldi	r25, 0x03	; 3
     4d4:	0e 94 cb 11 	call	0x2396	; 0x2396 <_ZN5Print5printEPKc>
			 lcd.print(ampmhours);
     4d8:	4a e0       	ldi	r20, 0x0A	; 10
     4da:	50 e0       	ldi	r21, 0x00	; 0
     4dc:	be 01       	movw	r22, r28
     4de:	0d c0       	rjmp	.+26     	; 0x4fa <_Z11printhhmmssR4Zeit+0x54>
		}	 
	}
	
	else
	{
		if(z.GetHours()<=9)lcd.print("0");
     4e0:	2a 97       	sbiw	r28, 0x0a	; 10
     4e2:	34 f4       	brge	.+12     	; 0x4f0 <_Z11printhhmmssR4Zeit+0x4a>
     4e4:	6f e1       	ldi	r22, 0x1F	; 31
     4e6:	71 e0       	ldi	r23, 0x01	; 1
     4e8:	88 e7       	ldi	r24, 0x78	; 120
     4ea:	93 e0       	ldi	r25, 0x03	; 3
     4ec:	0e 94 cb 11 	call	0x2396	; 0x2396 <_ZN5Print5printEPKc>
		lcd.print(z.GetHours());
     4f0:	f8 01       	movw	r30, r16
     4f2:	60 81       	ld	r22, Z
     4f4:	71 81       	ldd	r23, Z+1	; 0x01
     4f6:	4a e0       	ldi	r20, 0x0A	; 10
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	88 e7       	ldi	r24, 0x78	; 120
     4fc:	93 e0       	ldi	r25, 0x03	; 3
     4fe:	0e 94 78 12 	call	0x24f0	; 0x24f0 <_ZN5Print5printEii>
	}
	if(z.GetMinutes()<=9)lcd.print(":0"); else lcd.print(":");
     502:	f8 01       	movw	r30, r16
     504:	82 81       	ldd	r24, Z+2	; 0x02
     506:	93 81       	ldd	r25, Z+3	; 0x03
     508:	0a 97       	sbiw	r24, 0x0a	; 10
     50a:	1c f4       	brge	.+6      	; 0x512 <_Z11printhhmmssR4Zeit+0x6c>
     50c:	6e e1       	ldi	r22, 0x1E	; 30
     50e:	71 e0       	ldi	r23, 0x01	; 1
     510:	02 c0       	rjmp	.+4      	; 0x516 <_Z11printhhmmssR4Zeit+0x70>
     512:	61 e2       	ldi	r22, 0x21	; 33
     514:	71 e0       	ldi	r23, 0x01	; 1
     516:	88 e7       	ldi	r24, 0x78	; 120
     518:	93 e0       	ldi	r25, 0x03	; 3
     51a:	0e 94 cb 11 	call	0x2396	; 0x2396 <_ZN5Print5printEPKc>
	lcd.print(z.GetMinutes());
     51e:	f8 01       	movw	r30, r16
     520:	62 81       	ldd	r22, Z+2	; 0x02
     522:	73 81       	ldd	r23, Z+3	; 0x03
     524:	4a e0       	ldi	r20, 0x0A	; 10
     526:	50 e0       	ldi	r21, 0x00	; 0
     528:	88 e7       	ldi	r24, 0x78	; 120
     52a:	93 e0       	ldi	r25, 0x03	; 3
     52c:	0e 94 78 12 	call	0x24f0	; 0x24f0 <_ZN5Print5printEii>
	if(z.GetSeconds()<=9)lcd.print(":0"); else lcd.print(":");
     530:	f8 01       	movw	r30, r16
     532:	84 81       	ldd	r24, Z+4	; 0x04
     534:	95 81       	ldd	r25, Z+5	; 0x05
     536:	0a 97       	sbiw	r24, 0x0a	; 10
     538:	1c f4       	brge	.+6      	; 0x540 <_Z11printhhmmssR4Zeit+0x9a>
     53a:	6e e1       	ldi	r22, 0x1E	; 30
     53c:	71 e0       	ldi	r23, 0x01	; 1
     53e:	02 c0       	rjmp	.+4      	; 0x544 <_Z11printhhmmssR4Zeit+0x9e>
     540:	61 e2       	ldi	r22, 0x21	; 33
     542:	71 e0       	ldi	r23, 0x01	; 1
     544:	88 e7       	ldi	r24, 0x78	; 120
     546:	93 e0       	ldi	r25, 0x03	; 3
     548:	0e 94 cb 11 	call	0x2396	; 0x2396 <_ZN5Print5printEPKc>
	lcd.print(z.GetSeconds());
     54c:	f8 01       	movw	r30, r16
     54e:	64 81       	ldd	r22, Z+4	; 0x04
     550:	75 81       	ldd	r23, Z+5	; 0x05
     552:	4a e0       	ldi	r20, 0x0A	; 10
     554:	50 e0       	ldi	r21, 0x00	; 0
     556:	88 e7       	ldi	r24, 0x78	; 120
     558:	93 e0       	ldi	r25, 0x03	; 3
     55a:	0e 94 78 12 	call	0x24f0	; 0x24f0 <_ZN5Print5printEii>
	if (ampm && z.GetHours() > 12) lcd.print(" PM");
     55e:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <ampm>
     562:	88 23       	and	r24, r24
     564:	91 f0       	breq	.+36     	; 0x58a <_Z11printhhmmssR4Zeit+0xe4>
     566:	f8 01       	movw	r30, r16
     568:	80 81       	ld	r24, Z
     56a:	91 81       	ldd	r25, Z+1	; 0x01
     56c:	0d 97       	sbiw	r24, 0x0d	; 13
     56e:	1c f0       	brlt	.+6      	; 0x576 <_Z11printhhmmssR4Zeit+0xd0>
     570:	63 e2       	ldi	r22, 0x23	; 35
     572:	71 e0       	ldi	r23, 0x01	; 1
     574:	02 c0       	rjmp	.+4      	; 0x57a <_Z11printhhmmssR4Zeit+0xd4>
	else if (ampm && z.GetHours() <= 12) lcd.print(" AM");
     576:	67 e2       	ldi	r22, 0x27	; 39
     578:	71 e0       	ldi	r23, 0x01	; 1
     57a:	88 e7       	ldi	r24, 0x78	; 120
     57c:	93 e0       	ldi	r25, 0x03	; 3
}
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	1f 91       	pop	r17
     584:	0f 91       	pop	r16
	if(z.GetMinutes()<=9)lcd.print(":0"); else lcd.print(":");
	lcd.print(z.GetMinutes());
	if(z.GetSeconds()<=9)lcd.print(":0"); else lcd.print(":");
	lcd.print(z.GetSeconds());
	if (ampm && z.GetHours() > 12) lcd.print(" PM");
	else if (ampm && z.GetHours() <= 12) lcd.print(" AM");
     586:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <_ZN5Print5printEPKc>
}
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	1f 91       	pop	r17
     590:	0f 91       	pop	r16
     592:	08 95       	ret

00000594 <_Z17printHumidityTempv>:
 * und schreibt den Wert auf das LCD
 *
 * @return void
 */
void printHumidityTemp (void)
{
     594:	cf 92       	push	r12
     596:	df 92       	push	r13
     598:	ef 92       	push	r14
     59a:	ff 92       	push	r15
	lcd.setCursor(0,1);
     59c:	41 e0       	ldi	r20, 0x01	; 1
     59e:	60 e0       	ldi	r22, 0x00	; 0
     5a0:	88 e7       	ldi	r24, 0x78	; 120
     5a2:	93 e0       	ldi	r25, 0x03	; 3
     5a4:	0e 94 1b 0b 	call	0x1636	; 0x1636 <_ZN7hd447809setCursorEhh>
	if (temp > 100) lcd.print("Sensor defekt");
     5a8:	c0 90 c6 02 	lds	r12, 0x02C6	; 0x8002c6 <temp>
     5ac:	d0 90 c7 02 	lds	r13, 0x02C7	; 0x8002c7 <temp+0x1>
     5b0:	e0 90 c8 02 	lds	r14, 0x02C8	; 0x8002c8 <temp+0x2>
     5b4:	f0 90 c9 02 	lds	r15, 0x02C9	; 0x8002c9 <temp+0x3>
     5b8:	20 e0       	ldi	r18, 0x00	; 0
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	48 ec       	ldi	r20, 0xC8	; 200
     5be:	52 e4       	ldi	r21, 0x42	; 66
     5c0:	c7 01       	movw	r24, r14
     5c2:	b6 01       	movw	r22, r12
     5c4:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <__gesf2>
     5c8:	18 16       	cp	r1, r24
     5ca:	1c f4       	brge	.+6      	; 0x5d2 <_Z17printHumidityTempv+0x3e>
     5cc:	6b e2       	ldi	r22, 0x2B	; 43
     5ce:	71 e0       	ldi	r23, 0x01	; 1
     5d0:	15 c0       	rjmp	.+42     	; 0x5fc <_Z17printHumidityTempv+0x68>
	else {
		lcd.print(temp);
     5d2:	22 e0       	ldi	r18, 0x02	; 2
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	b7 01       	movw	r22, r14
     5d8:	a6 01       	movw	r20, r12
     5da:	88 e7       	ldi	r24, 0x78	; 120
     5dc:	93 e0       	ldi	r25, 0x03	; 3
     5de:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <_ZN5Print5printEdi>
		lcd.print(" ");
     5e2:	69 e3       	ldi	r22, 0x39	; 57
     5e4:	71 e0       	ldi	r23, 0x01	; 1
     5e6:	88 e7       	ldi	r24, 0x78	; 120
     5e8:	93 e0       	ldi	r25, 0x03	; 3
     5ea:	0e 94 cb 11 	call	0x2396	; 0x2396 <_ZN5Print5printEPKc>
		lcd.print((char)223);
     5ee:	6f ed       	ldi	r22, 0xDF	; 223
     5f0:	88 e7       	ldi	r24, 0x78	; 120
     5f2:	93 e0       	ldi	r25, 0x03	; 3
     5f4:	0e 94 cd 11 	call	0x239a	; 0x239a <_ZN5Print5printEc>
		lcd.print("C");
     5f8:	6b e3       	ldi	r22, 0x3B	; 59
     5fa:	71 e0       	ldi	r23, 0x01	; 1
     5fc:	88 e7       	ldi	r24, 0x78	; 120
     5fe:	93 e0       	ldi	r25, 0x03	; 3
	}
}
     600:	ff 90       	pop	r15
     602:	ef 90       	pop	r14
     604:	df 90       	pop	r13
     606:	cf 90       	pop	r12
	if (temp > 100) lcd.print("Sensor defekt");
	else {
		lcd.print(temp);
		lcd.print(" ");
		lcd.print((char)223);
		lcd.print("C");
     608:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <_ZN5Print5printEPKc>

0000060c <_Z10homeScreeni>:
 * @param[in] key : int, user input
 *
 * @return key
 */
int homeScreen(int key)
{
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	ec 01       	movw	r28, r24
	if (readSensor < millis())
     616:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <millis>
     61a:	00 91 ca 02 	lds	r16, 0x02CA	; 0x8002ca <readSensor>
     61e:	10 91 cb 02 	lds	r17, 0x02CB	; 0x8002cb <readSensor+0x1>
     622:	20 91 cc 02 	lds	r18, 0x02CC	; 0x8002cc <readSensor+0x2>
     626:	30 91 cd 02 	lds	r19, 0x02CD	; 0x8002cd <readSensor+0x3>
     62a:	06 17       	cp	r16, r22
     62c:	17 07       	cpc	r17, r23
     62e:	28 07       	cpc	r18, r24
     630:	39 07       	cpc	r19, r25
     632:	78 f5       	brcc	.+94     	; 0x692 <_Z10homeScreeni+0x86>
	{	
		temp=analogRead(tempSensor);
     634:	86 e1       	ldi	r24, 0x16	; 22
     636:	0e 94 a2 18 	call	0x3144	; 0x3144 <analogRead>
		temp=(temp*500)/1023;
     63a:	bc 01       	movw	r22, r24
     63c:	99 0f       	add	r25, r25
     63e:	88 0b       	sbc	r24, r24
     640:	99 0b       	sbc	r25, r25
     642:	0e 94 46 10 	call	0x208c	; 0x208c <__floatsisf>
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	4a ef       	ldi	r20, 0xFA	; 250
     64c:	53 e4       	ldi	r21, 0x43	; 67
     64e:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__mulsf3>
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	30 ec       	ldi	r19, 0xC0	; 192
     656:	4f e7       	ldi	r20, 0x7F	; 127
     658:	54 e4       	ldi	r21, 0x44	; 68
     65a:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__divsf3>
     65e:	60 93 c6 02 	sts	0x02C6, r22	; 0x8002c6 <temp>
     662:	70 93 c7 02 	sts	0x02C7, r23	; 0x8002c7 <temp+0x1>
     666:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <temp+0x2>
     66a:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <temp+0x3>
		printHumidityTemp();
     66e:	0e 94 ca 02 	call	0x594	; 0x594 <_Z17printHumidityTempv>
		readSensor = millis() + 5000;
     672:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <millis>
     676:	dc 01       	movw	r26, r24
     678:	cb 01       	movw	r24, r22
     67a:	88 57       	subi	r24, 0x78	; 120
     67c:	9c 4e       	sbci	r25, 0xEC	; 236
     67e:	af 4f       	sbci	r26, 0xFF	; 255
     680:	bf 4f       	sbci	r27, 0xFF	; 255
     682:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <readSensor>
     686:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <readSensor+0x1>
     68a:	a0 93 cc 02 	sts	0x02CC, r26	; 0x8002cc <readSensor+0x2>
     68e:	b0 93 cd 02 	sts	0x02CD, r27	; 0x8002cd <readSensor+0x3>
	}
	printHumidityTemp();
     692:	0e 94 ca 02 	call	0x594	; 0x594 <_Z17printHumidityTempv>
	lcd.setCursor(0,0);
     696:	40 e0       	ldi	r20, 0x00	; 0
     698:	60 e0       	ldi	r22, 0x00	; 0
     69a:	88 e7       	ldi	r24, 0x78	; 120
     69c:	93 e0       	ldi	r25, 0x03	; 3
     69e:	0e 94 1b 0b 	call	0x1636	; 0x1636 <_ZN7hd447809setCursorEhh>
	if (timeZoneChoosen)
     6a2:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <timeZoneChoosen>
     6a6:	88 23       	and	r24, r24
     6a8:	d9 f0       	breq	.+54     	; 0x6e0 <_Z10homeScreeni+0xd4>
	{
		printhhmmss(zeitTimeZone);
     6aa:	84 eb       	ldi	r24, 0xB4	; 180
     6ac:	92 e0       	ldi	r25, 0x02	; 2
     6ae:	0e 94 53 02 	call	0x4a6	; 0x4a6 <_Z11printhhmmssR4Zeit>
		lcd.setCursor(13,0);
     6b2:	40 e0       	ldi	r20, 0x00	; 0
     6b4:	6d e0       	ldi	r22, 0x0D	; 13
     6b6:	88 e7       	ldi	r24, 0x78	; 120
     6b8:	93 e0       	ldi	r25, 0x03	; 3
     6ba:	0e 94 1b 0b 	call	0x1636	; 0x1636 <_ZN7hd447809setCursorEhh>
		lcd.print(CITIES[tz].initials);
     6be:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tz>
     6c2:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <tz+0x1>
     6c6:	2e e0       	ldi	r18, 0x0E	; 14
     6c8:	28 9f       	mul	r18, r24
     6ca:	b0 01       	movw	r22, r0
     6cc:	29 9f       	mul	r18, r25
     6ce:	70 0d       	add	r23, r0
     6d0:	11 24       	eor	r1, r1
     6d2:	68 52       	subi	r22, 0x28	; 40
     6d4:	7d 4f       	sbci	r23, 0xFD	; 253
     6d6:	88 e7       	ldi	r24, 0x78	; 120
     6d8:	93 e0       	ldi	r25, 0x03	; 3
     6da:	0e 94 bd 11 	call	0x237a	; 0x237a <_ZN5Print5printERK6String>
     6de:	04 c0       	rjmp	.+8      	; 0x6e8 <_Z10homeScreeni+0xdc>
	}
	else
	{
		printhhmmss(zeitLocal);	
     6e0:	8c ea       	ldi	r24, 0xAC	; 172
     6e2:	92 e0       	ldi	r25, 0x02	; 2
     6e4:	0e 94 53 02 	call	0x4a6	; 0x4a6 <_Z11printhhmmssR4Zeit>
	}
	return key;
}
     6e8:	ce 01       	movw	r24, r28
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	08 95       	ret

000006f4 <_Z13calculateTimev>:
 * 
 * Stellt sicher, dass die Zeiten richtig sind. 
 * Zwischen 0 und kleiner als 24.
 */
void calculateTime() {
	zeitTimeZone.hh_= zeitGMT.hh_ + CITIES[tz].timediff;
     6f4:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tz>
     6f8:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <tz+0x1>
     6fc:	2e e0       	ldi	r18, 0x0E	; 14
     6fe:	28 9f       	mul	r18, r24
     700:	f0 01       	movw	r30, r0
     702:	29 9f       	mul	r18, r25
     704:	f0 0d       	add	r31, r0
     706:	11 24       	eor	r1, r1
     708:	e0 53       	subi	r30, 0x30	; 48
     70a:	fd 4f       	sbci	r31, 0xFD	; 253
     70c:	26 81       	ldd	r18, Z+6	; 0x06
     70e:	37 81       	ldd	r19, Z+7	; 0x07
     710:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <zeitGMT>
     714:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <zeitGMT+0x1>
     718:	82 0f       	add	r24, r18
     71a:	93 1f       	adc	r25, r19
	if (zeitTimeZone.hh_ > 23)
     71c:	88 31       	cpi	r24, 0x18	; 24
     71e:	91 05       	cpc	r25, r1
     720:	0c f0       	brlt	.+2      	; 0x724 <_Z13calculateTimev+0x30>
	{
		zeitTimeZone.hh_ -= 24; 
     722:	48 97       	sbiw	r24, 0x18	; 24
     724:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <zeitTimeZone+0x1>
     728:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <zeitTimeZone>
	}
	if (zeitTimeZone.hh_ < 0)
     72c:	20 91 b4 02 	lds	r18, 0x02B4	; 0x8002b4 <zeitTimeZone>
     730:	30 91 b5 02 	lds	r19, 0x02B5	; 0x8002b5 <zeitTimeZone+0x1>
     734:	37 ff       	sbrs	r19, 7
     736:	08 c0       	rjmp	.+16     	; 0x748 <_Z13calculateTimev+0x54>
	{
		zeitTimeZone.hh_ = 24 - zeitTimeZone.hh_;
     738:	88 e1       	ldi	r24, 0x18	; 24
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	82 1b       	sub	r24, r18
     73e:	93 0b       	sbc	r25, r19
     740:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <zeitTimeZone+0x1>
     744:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <zeitTimeZone>
     748:	08 95       	ret

0000074a <_Z14changeTimeZonei>:
 * 
 * @return key
 */
int changeTimeZone (int key)
{
	switch (key)
     74a:	83 30       	cpi	r24, 0x03	; 3
     74c:	91 05       	cpc	r25, r1
     74e:	39 f0       	breq	.+14     	; 0x75e <_Z14changeTimeZonei+0x14>
     750:	8a 30       	cpi	r24, 0x0A	; 10
     752:	91 05       	cpc	r25, r1
     754:	21 f0       	breq	.+8      	; 0x75e <_Z14changeTimeZonei+0x14>
     756:	81 30       	cpi	r24, 0x01	; 1
     758:	91 05       	cpc	r25, r1
     75a:	51 f5       	brne	.+84     	; 0x7b0 <_Z14changeTimeZonei+0x66>
     75c:	17 c0       	rjmp	.+46     	; 0x78c <_Z14changeTimeZonei+0x42>
	{
		case X_KEY:
		//zeit2 = zeitLocal;
		case DOWN_KEY:
		lcd.clear();
     75e:	88 e7       	ldi	r24, 0x78	; 120
     760:	93 e0       	ldi	r25, 0x03	; 3
     762:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN7hd447805clearEv>
		if (tz == 0)
     766:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tz>
     76a:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <tz+0x1>
     76e:	00 97       	sbiw	r24, 0x00	; 0
     770:	19 f4       	brne	.+6      	; 0x778 <_Z14changeTimeZonei+0x2e>
		{
			tz = 11;
     772:	8b e0       	ldi	r24, 0x0B	; 11
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	01 c0       	rjmp	.+2      	; 0x77a <_Z14changeTimeZonei+0x30>
		}
		else tz -= 1;
     778:	01 97       	sbiw	r24, 0x01	; 1
     77a:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <tz+0x1>
     77e:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <tz>
		calculateTime();	
     782:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_Z13calculateTimev>
		key = X_KEY;
     786:	8a e0       	ldi	r24, 0x0A	; 10
     788:	90 e0       	ldi	r25, 0x00	; 0
		break;
     78a:	08 95       	ret
		case UP_KEY:
		lcd.clear();
     78c:	88 e7       	ldi	r24, 0x78	; 120
     78e:	93 e0       	ldi	r25, 0x03	; 3
     790:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN7hd447805clearEv>
		if (tz == 11)
     794:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tz>
     798:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <tz+0x1>
     79c:	8b 30       	cpi	r24, 0x0B	; 11
     79e:	91 05       	cpc	r25, r1
     7a0:	29 f4       	brne	.+10     	; 0x7ac <_Z14changeTimeZonei+0x62>
		{
			tz = 0;
     7a2:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <tz+0x1>
     7a6:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <tz>
     7aa:	eb cf       	rjmp	.-42     	; 0x782 <_Z14changeTimeZonei+0x38>
		}
		else tz += 1;
     7ac:	01 96       	adiw	r24, 0x01	; 1
     7ae:	e5 cf       	rjmp	.-54     	; 0x77a <_Z14changeTimeZonei+0x30>
		break;
		case RIGHT_KEY:
		break;
	}
	return key;
}
     7b0:	08 95       	ret

000007b2 <_Z11setTimeZonei>:
 * @param[in] key : int, user input
 *
 * @return key
 */
int setTimeZone(int key)
{
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
	int input = changeTimeZone(key);
     7b6:	0e 94 a5 03 	call	0x74a	; 0x74a <_Z14changeTimeZonei>
     7ba:	ec 01       	movw	r28, r24
	lcd.setCursor(0,0);
     7bc:	40 e0       	ldi	r20, 0x00	; 0
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	88 e7       	ldi	r24, 0x78	; 120
     7c2:	93 e0       	ldi	r25, 0x03	; 3
     7c4:	0e 94 1b 0b 	call	0x1636	; 0x1636 <_ZN7hd447809setCursorEhh>
	lcd.print(CITIES[tz].name);
     7c8:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tz>
     7cc:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <tz+0x1>
     7d0:	2e e0       	ldi	r18, 0x0E	; 14
     7d2:	28 9f       	mul	r18, r24
     7d4:	b0 01       	movw	r22, r0
     7d6:	29 9f       	mul	r18, r25
     7d8:	70 0d       	add	r23, r0
     7da:	11 24       	eor	r1, r1
     7dc:	60 53       	subi	r22, 0x30	; 48
     7de:	7d 4f       	sbci	r23, 0xFD	; 253
     7e0:	88 e7       	ldi	r24, 0x78	; 120
     7e2:	93 e0       	ldi	r25, 0x03	; 3
     7e4:	0e 94 bd 11 	call	0x237a	; 0x237a <_ZN5Print5printERK6String>
	lcd.setCursor(0,1);
     7e8:	41 e0       	ldi	r20, 0x01	; 1
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	88 e7       	ldi	r24, 0x78	; 120
     7ee:	93 e0       	ldi	r25, 0x03	; 3
     7f0:	0e 94 1b 0b 	call	0x1636	; 0x1636 <_ZN7hd447809setCursorEhh>
	printhhmmss(zeitTimeZone);
     7f4:	84 eb       	ldi	r24, 0xB4	; 180
     7f6:	92 e0       	ldi	r25, 0x02	; 2
     7f8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <_Z11printhhmmssR4Zeit>
	return input;
}
     7fc:	ce 01       	movw	r24, r28
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	08 95       	ret

00000804 <_Z17callibratePointerv>:
 * @brief set zero position of the three pointer
 *
 */
void callibratePointer() 
{
	lcd.clear();
     804:	88 e7       	ldi	r24, 0x78	; 120
     806:	93 e0       	ldi	r25, 0x03	; 3
     808:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN7hd447805clearEv>
	lcd.print("Zeiger kalibrieren");
     80c:	6d e3       	ldi	r22, 0x3D	; 61
     80e:	71 e0       	ldi	r23, 0x01	; 1
     810:	88 e7       	ldi	r24, 0x78	; 120
     812:	93 e0       	ldi	r25, 0x03	; 3
     814:	0e 94 cb 11 	call	0x2396	; 0x2396 <_ZN5Print5printEPKc>
	delay(2000);
     818:	60 ed       	ldi	r22, 0xD0	; 208
     81a:	77 e0       	ldi	r23, 0x07	; 7
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	0e 94 10 18 	call	0x3020	; 0x3020 <delay>
	lcd.clear();
     824:	88 e7       	ldi	r24, 0x78	; 120
     826:	93 e0       	ldi	r25, 0x03	; 3
     828:	0c 94 15 0b 	jmp	0x162a	; 0x162a <_ZN7hd447805clearEv>

0000082c <setup>:
 * \return void
 */
void setup()
{
	//LCD konfigurieren
	lcd.begin(16, 2);
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	42 e0       	ldi	r20, 0x02	; 2
     830:	60 e1       	ldi	r22, 0x10	; 16
     832:	88 e7       	ldi	r24, 0x78	; 120
     834:	93 e0       	ldi	r25, 0x03	; 3
     836:	0e 94 41 0b 	call	0x1682	; 0x1682 <_ZN7hd447805beginEhhh>
	lcd.noBacklight();
     83a:	88 e7       	ldi	r24, 0x78	; 120
     83c:	93 e0       	ldi	r25, 0x03	; 3
     83e:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <_ZN7hd4478011noBacklightEv>
	lcd.noCursor();
     842:	88 e7       	ldi	r24, 0x78	; 120
     844:	93 e0       	ldi	r25, 0x03	; 3
     846:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <_ZN7hd447808noCursorEv>
	lcd.home();
     84a:	88 e7       	ldi	r24, 0x78	; 120
     84c:	93 e0       	ldi	r25, 0x03	; 3
     84e:	0e 94 18 0b 	call	0x1630	; 0x1630 <_ZN7hd447804homeEv>
	lcd.print("Romeo V2.2 Watch");
     852:	60 e5       	ldi	r22, 0x50	; 80
     854:	71 e0       	ldi	r23, 0x01	; 1
     856:	88 e7       	ldi	r24, 0x78	; 120
     858:	93 e0       	ldi	r25, 0x03	; 3
     85a:	0e 94 cb 11 	call	0x2396	; 0x2396 <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
     85e:	41 e0       	ldi	r20, 0x01	; 1
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	88 e7       	ldi	r24, 0x78	; 120
     864:	93 e0       	ldi	r25, 0x03	; 3
     866:	0e 94 1b 0b 	call	0x1636	; 0x1636 <_ZN7hd447809setCursorEhh>
	lcd.print("Coray / Bruno");
     86a:	61 e6       	ldi	r22, 0x61	; 97
     86c:	71 e0       	ldi	r23, 0x01	; 1
     86e:	88 e7       	ldi	r24, 0x78	; 120
     870:	93 e0       	ldi	r25, 0x03	; 3
     872:	0e 94 cb 11 	call	0x2396	; 0x2396 <_ZN5Print5printEPKc>
	while(millis()<3000);
     876:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <millis>
     87a:	68 3b       	cpi	r22, 0xB8	; 184
     87c:	7b 40       	sbci	r23, 0x0B	; 11
     87e:	81 05       	cpc	r24, r1
     880:	91 05       	cpc	r25, r1
     882:	c8 f3       	brcs	.-14     	; 0x876 <setup+0x4a>
	lcd.clear();
     884:	88 e7       	ldi	r24, 0x78	; 120
     886:	93 e0       	ldi	r25, 0x03	; 3
     888:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN7hd447805clearEv>
	
	zeitTimeZone = zeitGMT;
     88c:	88 e0       	ldi	r24, 0x08	; 8
     88e:	ec eb       	ldi	r30, 0xBC	; 188
     890:	f2 e0       	ldi	r31, 0x02	; 2
     892:	a4 eb       	ldi	r26, 0xB4	; 180
     894:	b2 e0       	ldi	r27, 0x02	; 2
     896:	01 90       	ld	r0, Z+
     898:	0d 92       	st	X+, r0
     89a:	8a 95       	dec	r24
     89c:	e1 f7       	brne	.-8      	; 0x896 <setup+0x6a>
	
	//Button uns Sensor Pin als input definiert
	pinMode(btnPin, INPUT);
     89e:	60 e0       	ldi	r22, 0x00	; 0
     8a0:	87 e0       	ldi	r24, 0x07	; 7
     8a2:	0e 94 10 19 	call	0x3220	; 0x3220 <pinMode>
	pinMode(tempSensor,INPUT);
     8a6:	60 e0       	ldi	r22, 0x00	; 0
     8a8:	86 e1       	ldi	r24, 0x16	; 22
     8aa:	0c 94 10 19 	jmp	0x3220	; 0x3220 <pinMode>

000008ae <loop>:
 * \return void
 */
void loop()
{
	//Button-Pin auslesen
	if (digitalRead(btnPin) == HIGH)
     8ae:	87 e0       	ldi	r24, 0x07	; 7
     8b0:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <digitalRead>
     8b4:	01 97       	sbiw	r24, 0x01	; 1
     8b6:	11 f4       	brne	.+4      	; 0x8bc <loop+0xe>
	{
		callibratePointer();
     8b8:	0c 94 02 04 	jmp	0x804	; 0x804 <_Z17callibratePointerv>
	}
	else
	{
	Watch();
     8bc:	0e 94 23 02 	call	0x446	; 0x446 <_Z5Watchv>
	input = getkey();
     8c0:	0e 94 18 01 	call	0x230	; 0x230 <_Z6getkeyv>
     8c4:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <_ZL5input+0x1>
     8c8:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <_ZL5input>
	if (watchmenu[menu].active) 
     8cc:	20 91 aa 02 	lds	r18, 0x02AA	; 0x8002aa <_ZL4menu>
     8d0:	30 91 ab 02 	lds	r19, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     8d4:	42 e1       	ldi	r20, 0x12	; 18
     8d6:	42 9f       	mul	r20, r18
     8d8:	f0 01       	movw	r30, r0
     8da:	43 9f       	mul	r20, r19
     8dc:	f0 0d       	add	r31, r0
     8de:	11 24       	eor	r1, r1
     8e0:	e8 5e       	subi	r30, 0xE8	; 232
     8e2:	fd 4f       	sbci	r31, 0xFD	; 253
     8e4:	04 84       	ldd	r0, Z+12	; 0x0c
     8e6:	f5 85       	ldd	r31, Z+13	; 0x0d
     8e8:	e0 2d       	mov	r30, r0
     8ea:	30 97       	sbiw	r30, 0x00	; 0
     8ec:	29 f0       	breq	.+10     	; 0x8f8 <loop+0x4a>
		input = watchmenu[menu].active(input);
     8ee:	09 95       	icall
     8f0:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <_ZL5input+0x1>
     8f4:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <_ZL5input>
		//! cyclic call to active function as long as menu n is active
	switch(input) {
     8f8:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <_ZL5input>
     8fc:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <_ZL5input+0x1>
     900:	83 30       	cpi	r24, 0x03	; 3
     902:	91 05       	cpc	r25, r1
     904:	e9 f1       	breq	.+122    	; 0x980 <loop+0xd2>
     906:	34 f4       	brge	.+12     	; 0x914 <loop+0x66>
     908:	81 30       	cpi	r24, 0x01	; 1
     90a:	91 05       	cpc	r25, r1
     90c:	79 f0       	breq	.+30     	; 0x92c <loop+0x7e>
     90e:	02 97       	sbiw	r24, 0x02	; 2
     910:	21 f1       	breq	.+72     	; 0x95a <loop+0xac>
     912:	09 c0       	rjmp	.+18     	; 0x926 <loop+0x78>
     914:	85 30       	cpi	r24, 0x05	; 5
     916:	91 05       	cpc	r25, r1
     918:	09 f4       	brne	.+2      	; 0x91c <loop+0x6e>
     91a:	6a c0       	rjmp	.+212    	; 0x9f0 <loop+0x142>
     91c:	0c f4       	brge	.+2      	; 0x920 <loop+0x72>
     91e:	43 c0       	rjmp	.+134    	; 0x9a6 <loop+0xf8>
     920:	06 97       	sbiw	r24, 0x06	; 6
     922:	09 f4       	brne	.+2      	; 0x926 <loop+0x78>
     924:	8a c0       	rjmp	.+276    	; 0xa3a <loop+0x18c>
		default:
		case X_KEY:
		case NO_KEY:
		newmenu = -1; // no changes made
     926:	8f ef       	ldi	r24, 0xFF	; 255
     928:	9f ef       	ldi	r25, 0xFF	; 255
     92a:	12 c0       	rjmp	.+36     	; 0x950 <loop+0xa2>
		break;
		case UP_KEY:
		lcd.clear();
     92c:	88 e7       	ldi	r24, 0x78	; 120
     92e:	93 e0       	ldi	r25, 0x03	; 3
     930:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].up;
     934:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <_ZL4menu>
     938:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     93c:	22 e1       	ldi	r18, 0x12	; 18
     93e:	28 9f       	mul	r18, r24
     940:	f0 01       	movw	r30, r0
     942:	29 9f       	mul	r18, r25
     944:	f0 0d       	add	r31, r0
     946:	11 24       	eor	r1, r1
     948:	e8 5e       	subi	r30, 0xE8	; 232
     94a:	fd 4f       	sbci	r31, 0xFD	; 253
     94c:	82 81       	ldd	r24, Z+2	; 0x02
     94e:	93 81       	ldd	r25, Z+3	; 0x03
     950:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <_ZL7newmenu+0x1>
     954:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <_ZL7newmenu>
		break;
     958:	80 c0       	rjmp	.+256    	; 0xa5a <loop+0x1ac>
		case LEFT_KEY:
		lcd.clear();
     95a:	88 e7       	ldi	r24, 0x78	; 120
     95c:	93 e0       	ldi	r25, 0x03	; 3
     95e:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].left;
     962:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <_ZL4menu>
     966:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     96a:	22 e1       	ldi	r18, 0x12	; 18
     96c:	28 9f       	mul	r18, r24
     96e:	f0 01       	movw	r30, r0
     970:	29 9f       	mul	r18, r25
     972:	f0 0d       	add	r31, r0
     974:	11 24       	eor	r1, r1
     976:	e8 5e       	subi	r30, 0xE8	; 232
     978:	fd 4f       	sbci	r31, 0xFD	; 253
     97a:	84 81       	ldd	r24, Z+4	; 0x04
     97c:	95 81       	ldd	r25, Z+5	; 0x05
     97e:	e8 cf       	rjmp	.-48     	; 0x950 <loop+0xa2>
		break;
		case DOWN_KEY:
		lcd.clear();
     980:	88 e7       	ldi	r24, 0x78	; 120
     982:	93 e0       	ldi	r25, 0x03	; 3
     984:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].down;
     988:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <_ZL4menu>
     98c:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     990:	22 e1       	ldi	r18, 0x12	; 18
     992:	28 9f       	mul	r18, r24
     994:	f0 01       	movw	r30, r0
     996:	29 9f       	mul	r18, r25
     998:	f0 0d       	add	r31, r0
     99a:	11 24       	eor	r1, r1
     99c:	e8 5e       	subi	r30, 0xE8	; 232
     99e:	fd 4f       	sbci	r31, 0xFD	; 253
     9a0:	86 81       	ldd	r24, Z+6	; 0x06
     9a2:	97 81       	ldd	r25, Z+7	; 0x07
     9a4:	d5 cf       	rjmp	.-86     	; 0x950 <loop+0xa2>
		break;
		case RIGHT_KEY:
		lcd.clear();
     9a6:	88 e7       	ldi	r24, 0x78	; 120
     9a8:	93 e0       	ldi	r25, 0x03	; 3
     9aa:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN7hd447805clearEv>
		if(watchmenu[menu].goright != NULL) {
     9ae:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <_ZL4menu>
     9b2:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     9b6:	22 e1       	ldi	r18, 0x12	; 18
     9b8:	28 9f       	mul	r18, r24
     9ba:	f0 01       	movw	r30, r0
     9bc:	29 9f       	mul	r18, r25
     9be:	f0 0d       	add	r31, r0
     9c0:	11 24       	eor	r1, r1
     9c2:	e8 5e       	subi	r30, 0xE8	; 232
     9c4:	fd 4f       	sbci	r31, 0xFD	; 253
     9c6:	06 84       	ldd	r0, Z+14	; 0x0e
     9c8:	f7 85       	ldd	r31, Z+15	; 0x0f
     9ca:	e0 2d       	mov	r30, r0
     9cc:	30 97       	sbiw	r30, 0x00	; 0
     9ce:	09 f0       	breq	.+2      	; 0x9d2 <loop+0x124>
			//! call go right function with new value
			watchmenu[menu].goright();
     9d0:	09 95       	icall
		}
		newmenu = watchmenu[menu].right;
     9d2:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <_ZL4menu>
     9d6:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     9da:	22 e1       	ldi	r18, 0x12	; 18
     9dc:	28 9f       	mul	r18, r24
     9de:	f0 01       	movw	r30, r0
     9e0:	29 9f       	mul	r18, r25
     9e2:	f0 0d       	add	r31, r0
     9e4:	11 24       	eor	r1, r1
     9e6:	e8 5e       	subi	r30, 0xE8	; 232
     9e8:	fd 4f       	sbci	r31, 0xFD	; 253
     9ea:	80 85       	ldd	r24, Z+8	; 0x08
     9ec:	91 85       	ldd	r25, Z+9	; 0x09
     9ee:	b0 cf       	rjmp	.-160    	; 0x950 <loop+0xa2>
		break;
		case OK_KEY:
		lcd.clear();
     9f0:	88 e7       	ldi	r24, 0x78	; 120
     9f2:	93 e0       	ldi	r25, 0x03	; 3
     9f4:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN7hd447805clearEv>
		if(watchmenu[menu].positive != NULL) {
     9f8:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <_ZL4menu>
     9fc:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     a00:	22 e1       	ldi	r18, 0x12	; 18
     a02:	28 9f       	mul	r18, r24
     a04:	f0 01       	movw	r30, r0
     a06:	29 9f       	mul	r18, r25
     a08:	f0 0d       	add	r31, r0
     a0a:	11 24       	eor	r1, r1
     a0c:	e8 5e       	subi	r30, 0xE8	; 232
     a0e:	fd 4f       	sbci	r31, 0xFD	; 253
     a10:	00 88       	ldd	r0, Z+16	; 0x10
     a12:	f1 89       	ldd	r31, Z+17	; 0x11
     a14:	e0 2d       	mov	r30, r0
     a16:	30 97       	sbiw	r30, 0x00	; 0
     a18:	09 f0       	breq	.+2      	; 0xa1c <loop+0x16e>
			//! call positive answer function with new value
			watchmenu[menu].positive();
     a1a:	09 95       	icall
		}
		newmenu = watchmenu[menu].ok;
     a1c:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <_ZL4menu>
     a20:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     a24:	22 e1       	ldi	r18, 0x12	; 18
     a26:	28 9f       	mul	r18, r24
     a28:	f0 01       	movw	r30, r0
     a2a:	29 9f       	mul	r18, r25
     a2c:	f0 0d       	add	r31, r0
     a2e:	11 24       	eor	r1, r1
     a30:	e8 5e       	subi	r30, 0xE8	; 232
     a32:	fd 4f       	sbci	r31, 0xFD	; 253
     a34:	82 85       	ldd	r24, Z+10	; 0x0a
     a36:	93 85       	ldd	r25, Z+11	; 0x0b
     a38:	8b cf       	rjmp	.-234    	; 0x950 <loop+0xa2>
		break;
		case BK_KEY:
		lcd.clear();
     a3a:	88 e7       	ldi	r24, 0x78	; 120
     a3c:	93 e0       	ldi	r25, 0x03	; 3
     a3e:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN7hd447805clearEv>
		lcd.noCursor();
     a42:	88 e7       	ldi	r24, 0x78	; 120
     a44:	93 e0       	ldi	r25, 0x03	; 3
     a46:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <_ZN7hd447808noCursorEv>
		lcd.noBlink();
     a4a:	88 e7       	ldi	r24, 0x78	; 120
     a4c:	93 e0       	ldi	r25, 0x03	; 3
     a4e:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <_ZN7hd447807noBlinkEv>
		newmenu = 0;
     a52:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <_ZL7newmenu+0x1>
     a56:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <_ZL7newmenu>
		break;
	}
	if(newmenu >= 0){
     a5a:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <_ZL7newmenu>
     a5e:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <_ZL7newmenu+0x1>
     a62:	97 fd       	sbrc	r25, 7
     a64:	21 c0       	rjmp	.+66     	; 0xaa8 <loop+0x1fa>
		menu = newmenu;
     a66:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <_ZL4menu+0x1>
     a6a:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <_ZL4menu>
		lcd.setCursor(0, 0);
     a6e:	40 e0       	ldi	r20, 0x00	; 0
     a70:	60 e0       	ldi	r22, 0x00	; 0
     a72:	88 e7       	ldi	r24, 0x78	; 120
     a74:	93 e0       	ldi	r25, 0x03	; 3
     a76:	0e 94 1b 0b 	call	0x1636	; 0x1636 <_ZN7hd447809setCursorEhh>
		lcd.print(ROM(watchmenu[menu].text1));
     a7a:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <_ZL4menu>
     a7e:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     a82:	22 e1       	ldi	r18, 0x12	; 18
     a84:	28 9f       	mul	r18, r24
     a86:	f0 01       	movw	r30, r0
     a88:	29 9f       	mul	r18, r25
     a8a:	f0 0d       	add	r31, r0
     a8c:	11 24       	eor	r1, r1
     a8e:	e8 5e       	subi	r30, 0xE8	; 232
     a90:	fd 4f       	sbci	r31, 0xFD	; 253
     a92:	60 81       	ld	r22, Z
     a94:	71 81       	ldd	r23, Z+1	; 0x01
     a96:	82 e9       	ldi	r24, 0x92	; 146
     a98:	92 e0       	ldi	r25, 0x02	; 2
     a9a:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <strcpy_P>
     a9e:	bc 01       	movw	r22, r24
     aa0:	88 e7       	ldi	r24, 0x78	; 120
     aa2:	93 e0       	ldi	r25, 0x03	; 3
     aa4:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <_ZN5Print5printEPKc>
     aa8:	08 95       	ret

00000aaa <_GLOBAL__sub_I_lcd>:
	}
	} //else Klammer
}
     aaa:	af 92       	push	r10
     aac:	bf 92       	push	r11
     aae:	cf 92       	push	r12
     ab0:	df 92       	push	r13
     ab2:	ef 92       	push	r14
     ab4:	ff 92       	push	r15
     ab6:	0f 93       	push	r16
     ab8:	1f 93       	push	r17
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
// ====================

//	-- Automagic / auto-detect constructors --

// Auto find next instance and auto config pin mapping
hd44780_I2Cexp(){ _addr = 0; _expType = I2Cexp_UNKNOWN;}
     abe:	88 e7       	ldi	r24, 0x78	; 120
     ac0:	93 e0       	ldi	r25, 0x03	; 3
     ac2:	0e 94 a1 0a 	call	0x1542	; 0x1542 <_ZN7hd44780C1Ev>
     ac6:	e8 e7       	ldi	r30, 0x78	; 120
     ac8:	f3 e0       	ldi	r31, 0x03	; 3
     aca:	86 e0       	ldi	r24, 0x06	; 6
     acc:	92 e0       	ldi	r25, 0x02	; 2
     ace:	91 83       	std	Z+1, r25	; 0x01
     ad0:	80 83       	st	Z, r24
     ad2:	10 a2       	std	Z+32, r1	; 0x20
     ad4:	11 a2       	std	Z+33, r1	; 0x21

const struct CITY_TIME_DIF CITIES [] {
	{"London", 0, "LON"},{"New-York", -5, "NEY"},{"Paris", 1, "PAR"},{ "Tokyo", 9, "TOK"},
	{"Hongkong", 8, "HNK"},{"Los Angeles", -8, "LAN"},{"Chicago", -6, "CHI"},{"Seoul", 9, "SEO"},
	{ "Bruessel",  1, "BRU"},{"Washington",  -5, "WAS"},{"Singapur", 8, "SIN"},{"Sydney", 11, "SYD"}
	};
     ad6:	6f e6       	ldi	r22, 0x6F	; 111
     ad8:	71 e0       	ldi	r23, 0x01	; 1
     ada:	80 ed       	ldi	r24, 0xD0	; 208
     adc:	92 e0       	ldi	r25, 0x02	; 2
     ade:	0e 94 12 1a 	call	0x3424	; 0x3424 <_ZN6StringC1EPKc>
     ae2:	c0 ed       	ldi	r28, 0xD0	; 208
     ae4:	d2 e0       	ldi	r29, 0x02	; 2
     ae6:	1f 82       	std	Y+7, r1	; 0x07
     ae8:	1e 82       	std	Y+6, r1	; 0x06
     aea:	66 e7       	ldi	r22, 0x76	; 118
     aec:	71 e0       	ldi	r23, 0x01	; 1
     aee:	88 ed       	ldi	r24, 0xD8	; 216
     af0:	92 e0       	ldi	r25, 0x02	; 2
     af2:	0e 94 12 1a 	call	0x3424	; 0x3424 <_ZN6StringC1EPKc>
     af6:	6a e7       	ldi	r22, 0x7A	; 122
     af8:	71 e0       	ldi	r23, 0x01	; 1
     afa:	8e ed       	ldi	r24, 0xDE	; 222
     afc:	92 e0       	ldi	r25, 0x02	; 2
     afe:	0e 94 12 1a 	call	0x3424	; 0x3424 <_ZN6StringC1EPKc>
     b02:	8b ef       	ldi	r24, 0xFB	; 251
     b04:	e8 2e       	mov	r14, r24
     b06:	ff 24       	eor	r15, r15
     b08:	fa 94       	dec	r15
     b0a:	fd 8a       	std	Y+21, r15	; 0x15
     b0c:	ec 8a       	std	Y+20, r14	; 0x14
     b0e:	63 e8       	ldi	r22, 0x83	; 131
     b10:	71 e0       	ldi	r23, 0x01	; 1
     b12:	86 ee       	ldi	r24, 0xE6	; 230
     b14:	92 e0       	ldi	r25, 0x02	; 2
     b16:	0e 94 12 1a 	call	0x3424	; 0x3424 <_ZN6StringC1EPKc>
     b1a:	67 e8       	ldi	r22, 0x87	; 135
     b1c:	71 e0       	ldi	r23, 0x01	; 1
     b1e:	8c ee       	ldi	r24, 0xEC	; 236
     b20:	92 e0       	ldi	r25, 0x02	; 2
     b22:	0e 94 12 1a 	call	0x3424	; 0x3424 <_ZN6StringC1EPKc>
     b26:	cc 24       	eor	r12, r12
     b28:	c3 94       	inc	r12
     b2a:	d1 2c       	mov	r13, r1
     b2c:	db a2       	std	Y+35, r13	; 0x23
     b2e:	ca a2       	std	Y+34, r12	; 0x22
     b30:	6d e8       	ldi	r22, 0x8D	; 141
     b32:	71 e0       	ldi	r23, 0x01	; 1
     b34:	84 ef       	ldi	r24, 0xF4	; 244
     b36:	92 e0       	ldi	r25, 0x02	; 2
     b38:	0e 94 12 1a 	call	0x3424	; 0x3424 <_ZN6StringC1EPKc>
     b3c:	61 e9       	ldi	r22, 0x91	; 145
     b3e:	71 e0       	ldi	r23, 0x01	; 1
     b40:	8a ef       	ldi	r24, 0xFA	; 250
     b42:	92 e0       	ldi	r25, 0x02	; 2
     b44:	0e 94 12 1a 	call	0x3424	; 0x3424 <_ZN6StringC1EPKc>
     b48:	29 e0       	ldi	r18, 0x09	; 9
     b4a:	a2 2e       	mov	r10, r18
     b4c:	b1 2c       	mov	r11, r1
     b4e:	b9 aa       	std	Y+49, r11	; 0x31
     b50:	a8 aa       	std	Y+48, r10	; 0x30
     b52:	67 e9       	ldi	r22, 0x97	; 151
     b54:	71 e0       	ldi	r23, 0x01	; 1
     b56:	82 e0       	ldi	r24, 0x02	; 2
     b58:	93 e0       	ldi	r25, 0x03	; 3
     b5a:	0e 94 12 1a 	call	0x3424	; 0x3424 <_ZN6StringC1EPKc>
     b5e:	6b e9       	ldi	r22, 0x9B	; 155
     b60:	71 e0       	ldi	r23, 0x01	; 1
     b62:	88 e0       	ldi	r24, 0x08	; 8
     b64:	93 e0       	ldi	r25, 0x03	; 3
     b66:	0e 94 12 1a 	call	0x3424	; 0x3424 <_ZN6StringC1EPKc>
     b6a:	08 e0       	ldi	r16, 0x08	; 8
     b6c:	10 e0       	ldi	r17, 0x00	; 0
     b6e:	1f af       	std	Y+63, r17	; 0x3f
     b70:	0e af       	std	Y+62, r16	; 0x3e
     b72:	64 ea       	ldi	r22, 0xA4	; 164
     b74:	71 e0       	ldi	r23, 0x01	; 1
     b76:	80 e1       	ldi	r24, 0x10	; 16
     b78:	93 e0       	ldi	r25, 0x03	; 3
     b7a:	0e 94 12 1a 	call	0x3424	; 0x3424 <_ZN6StringC1EPKc>
     b7e:	68 ea       	ldi	r22, 0xA8	; 168
     b80:	71 e0       	ldi	r23, 0x01	; 1
     b82:	86 e1       	ldi	r24, 0x16	; 22
     b84:	93 e0       	ldi	r25, 0x03	; 3
     b86:	0e 94 12 1a 	call	0x3424	; 0x3424 <_ZN6StringC1EPKc>
     b8a:	88 ef       	ldi	r24, 0xF8	; 248
     b8c:	9f ef       	ldi	r25, 0xFF	; 255
     b8e:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <_ZL6CITIES+0x4d>
     b92:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <_ZL6CITIES+0x4c>
     b96:	64 eb       	ldi	r22, 0xB4	; 180
     b98:	71 e0       	ldi	r23, 0x01	; 1
     b9a:	8e e1       	ldi	r24, 0x1E	; 30
     b9c:	93 e0       	ldi	r25, 0x03	; 3
     b9e:	0e 94 12 1a 	call	0x3424	; 0x3424 <_ZN6StringC1EPKc>
     ba2:	68 eb       	ldi	r22, 0xB8	; 184
     ba4:	71 e0       	ldi	r23, 0x01	; 1
     ba6:	84 e2       	ldi	r24, 0x24	; 36
     ba8:	93 e0       	ldi	r25, 0x03	; 3
     baa:	0e 94 12 1a 	call	0x3424	; 0x3424 <_ZN6StringC1EPKc>
     bae:	8a ef       	ldi	r24, 0xFA	; 250
     bb0:	9f ef       	ldi	r25, 0xFF	; 255
     bb2:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <_ZL6CITIES+0x5b>
     bb6:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <_ZL6CITIES+0x5a>
     bba:	60 ec       	ldi	r22, 0xC0	; 192
     bbc:	71 e0       	ldi	r23, 0x01	; 1
     bbe:	8c e2       	ldi	r24, 0x2C	; 44
     bc0:	93 e0       	ldi	r25, 0x03	; 3
     bc2:	0e 94 12 1a 	call	0x3424	; 0x3424 <_ZN6StringC1EPKc>
     bc6:	64 ec       	ldi	r22, 0xC4	; 196
     bc8:	71 e0       	ldi	r23, 0x01	; 1
     bca:	82 e3       	ldi	r24, 0x32	; 50
     bcc:	93 e0       	ldi	r25, 0x03	; 3
     bce:	0e 94 12 1a 	call	0x3424	; 0x3424 <_ZN6StringC1EPKc>
     bd2:	b0 92 39 03 	sts	0x0339, r11	; 0x800339 <_ZL6CITIES+0x69>
     bd6:	a0 92 38 03 	sts	0x0338, r10	; 0x800338 <_ZL6CITIES+0x68>
     bda:	6a ec       	ldi	r22, 0xCA	; 202
     bdc:	71 e0       	ldi	r23, 0x01	; 1
     bde:	8a e3       	ldi	r24, 0x3A	; 58
     be0:	93 e0       	ldi	r25, 0x03	; 3
     be2:	0e 94 12 1a 	call	0x3424	; 0x3424 <_ZN6StringC1EPKc>
     be6:	6e ec       	ldi	r22, 0xCE	; 206
     be8:	71 e0       	ldi	r23, 0x01	; 1
     bea:	80 e4       	ldi	r24, 0x40	; 64
     bec:	93 e0       	ldi	r25, 0x03	; 3
     bee:	0e 94 12 1a 	call	0x3424	; 0x3424 <_ZN6StringC1EPKc>
     bf2:	d0 92 47 03 	sts	0x0347, r13	; 0x800347 <_ZL6CITIES+0x77>
     bf6:	c0 92 46 03 	sts	0x0346, r12	; 0x800346 <_ZL6CITIES+0x76>
     bfa:	67 ed       	ldi	r22, 0xD7	; 215
     bfc:	71 e0       	ldi	r23, 0x01	; 1
     bfe:	88 e4       	ldi	r24, 0x48	; 72
     c00:	93 e0       	ldi	r25, 0x03	; 3
     c02:	0e 94 12 1a 	call	0x3424	; 0x3424 <_ZN6StringC1EPKc>
     c06:	6b ed       	ldi	r22, 0xDB	; 219
     c08:	71 e0       	ldi	r23, 0x01	; 1
     c0a:	8e e4       	ldi	r24, 0x4E	; 78
     c0c:	93 e0       	ldi	r25, 0x03	; 3
     c0e:	0e 94 12 1a 	call	0x3424	; 0x3424 <_ZN6StringC1EPKc>
     c12:	f0 92 55 03 	sts	0x0355, r15	; 0x800355 <_ZL6CITIES+0x85>
     c16:	e0 92 54 03 	sts	0x0354, r14	; 0x800354 <_ZL6CITIES+0x84>
     c1a:	66 ee       	ldi	r22, 0xE6	; 230
     c1c:	71 e0       	ldi	r23, 0x01	; 1
     c1e:	86 e5       	ldi	r24, 0x56	; 86
     c20:	93 e0       	ldi	r25, 0x03	; 3
     c22:	0e 94 12 1a 	call	0x3424	; 0x3424 <_ZN6StringC1EPKc>
     c26:	6a ee       	ldi	r22, 0xEA	; 234
     c28:	71 e0       	ldi	r23, 0x01	; 1
     c2a:	8c e5       	ldi	r24, 0x5C	; 92
     c2c:	93 e0       	ldi	r25, 0x03	; 3
     c2e:	0e 94 12 1a 	call	0x3424	; 0x3424 <_ZN6StringC1EPKc>
     c32:	10 93 63 03 	sts	0x0363, r17	; 0x800363 <_ZL6CITIES+0x93>
     c36:	00 93 62 03 	sts	0x0362, r16	; 0x800362 <_ZL6CITIES+0x92>
     c3a:	63 ef       	ldi	r22, 0xF3	; 243
     c3c:	71 e0       	ldi	r23, 0x01	; 1
     c3e:	84 e6       	ldi	r24, 0x64	; 100
     c40:	93 e0       	ldi	r25, 0x03	; 3
     c42:	0e 94 12 1a 	call	0x3424	; 0x3424 <_ZN6StringC1EPKc>
     c46:	67 ef       	ldi	r22, 0xF7	; 247
     c48:	71 e0       	ldi	r23, 0x01	; 1
     c4a:	8a e6       	ldi	r24, 0x6A	; 106
     c4c:	93 e0       	ldi	r25, 0x03	; 3
     c4e:	0e 94 12 1a 	call	0x3424	; 0x3424 <_ZN6StringC1EPKc>
     c52:	8b e0       	ldi	r24, 0x0B	; 11
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <_ZL6CITIES+0xa1>
     c5a:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <_ZL6CITIES+0xa0>
     c5e:	6e ef       	ldi	r22, 0xFE	; 254
     c60:	71 e0       	ldi	r23, 0x01	; 1
     c62:	82 e7       	ldi	r24, 0x72	; 114
     c64:	93 e0       	ldi	r25, 0x03	; 3
     c66:	0e 94 12 1a 	call	0x3424	; 0x3424 <_ZN6StringC1EPKc>
	int hh_;
	int mm_;
	int ss_;
	int set_;
public:
	Zeit(int h, int m, int s){ hh_=h; mm_=m; ss_=s; set_ =0;};
     c6a:	ec eb       	ldi	r30, 0xBC	; 188
     c6c:	f2 e0       	ldi	r31, 0x02	; 2
     c6e:	85 e1       	ldi	r24, 0x15	; 21
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	91 83       	std	Z+1, r25	; 0x01
     c74:	80 83       	st	Z, r24
     c76:	8f e1       	ldi	r24, 0x1F	; 31
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	93 83       	std	Z+3, r25	; 0x03
     c7c:	82 83       	std	Z+2, r24	; 0x02
     c7e:	15 82       	std	Z+5, r1	; 0x05
     c80:	14 82       	std	Z+4, r1	; 0x04
     c82:	17 82       	std	Z+7, r1	; 0x07
     c84:	16 82       	std	Z+6, r1	; 0x06
     c86:	e4 eb       	ldi	r30, 0xB4	; 180
     c88:	f2 e0       	ldi	r31, 0x02	; 2
     c8a:	2c e0       	ldi	r18, 0x0C	; 12
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	31 83       	std	Z+1, r19	; 0x01
     c90:	20 83       	st	Z, r18
     c92:	13 82       	std	Z+3, r1	; 0x03
     c94:	12 82       	std	Z+2, r1	; 0x02
     c96:	15 82       	std	Z+5, r1	; 0x05
     c98:	14 82       	std	Z+4, r1	; 0x04
     c9a:	17 82       	std	Z+7, r1	; 0x07
     c9c:	16 82       	std	Z+6, r1	; 0x06
     c9e:	ec ea       	ldi	r30, 0xAC	; 172
     ca0:	f2 e0       	ldi	r31, 0x02	; 2
     ca2:	26 e1       	ldi	r18, 0x16	; 22
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	31 83       	std	Z+1, r19	; 0x01
     ca8:	20 83       	st	Z, r18
     caa:	93 83       	std	Z+3, r25	; 0x03
     cac:	82 83       	std	Z+2, r24	; 0x02
     cae:	15 82       	std	Z+5, r1	; 0x05
     cb0:	14 82       	std	Z+4, r1	; 0x04
     cb2:	17 82       	std	Z+7, r1	; 0x07
     cb4:	16 82       	std	Z+6, r1	; 0x06
		menu = newmenu;
		lcd.setCursor(0, 0);
		lcd.print(ROM(watchmenu[menu].text1));
	}
	} //else Klammer
}
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ff 90       	pop	r15
     cc0:	ef 90       	pop	r14
     cc2:	df 90       	pop	r13
     cc4:	cf 90       	pop	r12
     cc6:	bf 90       	pop	r11
     cc8:	af 90       	pop	r10
     cca:	08 95       	ret

00000ccc <_GLOBAL__sub_D_lcd>:
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	c8 e7       	ldi	r28, 0x78	; 120
     cd2:	d3 e0       	ldi	r29, 0x03	; 3
	String name;
	int timediff;
	String initials;
};

const struct CITY_TIME_DIF CITIES [] {
     cd4:	2e 97       	sbiw	r28, 0x0e	; 14
#include "Romeo_keys.h"

hd44780_I2Cexp lcd;

//Strukt um Städte und deren Zweitverschiebung zu GMT (London)
struct CITY_TIME_DIF {
     cd6:	ce 01       	movw	r24, r28
     cd8:	08 96       	adiw	r24, 0x08	; 8
     cda:	0e 94 a4 19 	call	0x3348	; 0x3348 <_ZN6StringD1Ev>
     cde:	ce 01       	movw	r24, r28
     ce0:	0e 94 a4 19 	call	0x3348	; 0x3348 <_ZN6StringD1Ev>
	String name;
	int timediff;
	String initials;
};

const struct CITY_TIME_DIF CITIES [] {
     ce4:	82 e0       	ldi	r24, 0x02	; 2
     ce6:	c0 3d       	cpi	r28, 0xD0	; 208
     ce8:	d8 07       	cpc	r29, r24
     cea:	a1 f7       	brne	.-24     	; 0xcd4 <_GLOBAL__sub_D_lcd+0x8>
		menu = newmenu;
		lcd.setCursor(0, 0);
		lcd.print(ROM(watchmenu[menu].text1));
	}
	} //else Klammer
}
     cec:	df 91       	pop	r29
     cee:	cf 91       	pop	r28
     cf0:	08 95       	ret

00000cf2 <_ZN14hd44780_I2Cexp14iosetBacklightEh>:
}

// iosetBacklight()  - set backlight brightness
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	fc 01       	movw	r30, r24
{
	if(!_bl) // backlight control?
     cf8:	81 a5       	ldd	r24, Z+41	; 0x29
     cfa:	88 23       	and	r24, r24
     cfc:	71 f1       	breq	.+92     	; 0xd5a <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x68>
     cfe:	92 a5       	ldd	r25, Z+42	; 0x2a
		return(hd44780::RV_ENOTSUP); // not backlight control support

	// dimvalue 0 is backlight off any other dimvalue is backlight on
	// configure backlight state mask according to active level
	if(((dimvalue) && (_blLevel == HIGH)) || 
     d00:	66 23       	and	r22, r22
     d02:	19 f0       	breq	.+6      	; 0xd0a <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x18>
     d04:	91 30       	cpi	r25, 0x01	; 1
     d06:	29 f4       	brne	.+10     	; 0xd12 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x1c>
			((dimvalue == 0) && (_blLevel == LOW)))
     d0a:	91 11       	cpse	r25, r1
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
	{
		_blCurState = _bl;
     d0e:	83 a7       	std	Z+43, r24	; 0x2b
     d10:	01 c0       	rjmp	.+2      	; 0xd14 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x22>
	}
	else 
	{
		_blCurState = 0;
     d12:	13 a6       	std	Z+43, r1	; 0x2b
     d14:	ef 01       	movw	r28, r30
	}
	Wire.beginTransmission(_addr);
     d16:	60 a1       	ldd	r22, Z+32	; 0x20
     d18:	83 e1       	ldi	r24, 0x13	; 19
     d1a:	94 e0       	ldi	r25, 0x04	; 4
     d1c:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
     d20:	89 a1       	ldd	r24, Y+33	; 0x21
     d22:	82 30       	cpi	r24, 0x02	; 2
     d24:	31 f4       	brne	.+12     	; 0xd32 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x40>
	{
		Wire.write(9); // point to GPIO
     d26:	69 e0       	ldi	r22, 0x09	; 9
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	83 e1       	ldi	r24, 0x13	; 19
     d2c:	94 e0       	ldi	r25, 0x04	; 4
     d2e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN7TwoWire5writeEi>
	}
	Wire.write( _blCurState );
     d32:	6b a5       	ldd	r22, Y+43	; 0x2b
     d34:	83 e1       	ldi	r24, 0x13	; 19
     d36:	94 e0       	ldi	r25, 0x04	; 4
     d38:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     d3c:	83 e1       	ldi	r24, 0x13	; 19
     d3e:	94 e0       	ldi	r25, 0x04	; 4
     d40:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_ZN7TwoWire15endTransmissionEv>
     d44:	21 e0       	ldi	r18, 0x01	; 1
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	81 11       	cpse	r24, r1
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x5e>
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	88 27       	eor	r24, r24
     d52:	99 27       	eor	r25, r25
     d54:	82 1b       	sub	r24, r18
     d56:	93 0b       	sbc	r25, r19
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x6c>
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
{
	if(!_bl) // backlight control?
		return(hd44780::RV_ENOTSUP); // not backlight control support
     d5a:	8d ef       	ldi	r24, 0xFD	; 253
     d5c:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write( _blCurState );
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR); // all is good
}
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	08 95       	ret

00000d64 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>:
	return(0);
}


// write4bits - send a nibble to the LCD through i/o expander port
void write4bits(uint8_t value, hd44780::iotype type ) 
     d64:	cf 93       	push	r28
     d66:	fc 01       	movw	r30, r24
{
uint8_t gpioValue =  _blCurState;
     d68:	c3 a5       	ldd	r28, Z+43	; 0x2b
   
	// convert the value to an i/o expander port value
	// based on pin mappings
	if(value & (1 << 0))
     d6a:	60 ff       	sbrs	r22, 0
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0xe>
		gpioValue |= _d4;
     d6e:	85 a1       	ldd	r24, Z+37	; 0x25
     d70:	c8 2b       	or	r28, r24

	if(value & (1 << 1))
     d72:	61 ff       	sbrs	r22, 1
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x16>
		gpioValue |= _d5;
     d76:	86 a1       	ldd	r24, Z+38	; 0x26
     d78:	c8 2b       	or	r28, r24

	if(value & (1 << 2))
     d7a:	62 ff       	sbrs	r22, 2
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x1e>
		gpioValue |= _d6;
     d7e:	87 a1       	ldd	r24, Z+39	; 0x27
     d80:	c8 2b       	or	r28, r24

	if(value & (1 << 3))
     d82:	63 ff       	sbrs	r22, 3
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x26>
		gpioValue |= _d7;
     d86:	80 a5       	ldd	r24, Z+40	; 0x28
     d88:	c8 2b       	or	r28, r24


	if(type == hd44780::HD44780_IOdata) 
     d8a:	41 30       	cpi	r20, 0x01	; 1
     d8c:	11 f4       	brne	.+4      	; 0xd92 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x2e>
	{
		gpioValue |= _rs; // set RS high to send to data reg
     d8e:	82 a1       	ldd	r24, Z+34	; 0x22
     d90:	c8 2b       	or	r28, r24
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
     d92:	64 a1       	ldd	r22, Z+36	; 0x24
     d94:	6c 2b       	or	r22, r28
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	83 e1       	ldi	r24, 0x13	; 19
     d9a:	94 e0       	ldi	r25, 0x04	; 4
     d9c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN7TwoWire5writeEi>
	Wire.write(gpioValue);		// with E LOW
     da0:	6c 2f       	mov	r22, r28
     da2:	83 e1       	ldi	r24, 0x13	; 19
     da4:	94 e0       	ldi	r25, 0x04	; 4
}
     da6:	cf 91       	pop	r28
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
	Wire.write(gpioValue);		// with E LOW
     da8:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <_ZN7TwoWire5writeEh>

00000dac <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh>:
	return(rval);
}

// iowrite(type, value) - send either command or data byte to lcd
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
     dac:	8f 92       	push	r8
     dae:	9f 92       	push	r9
     db0:	af 92       	push	r10
     db2:	bf 92       	push	r11
     db4:	cf 92       	push	r12
     db6:	df 92       	push	r13
     db8:	ef 92       	push	r14
     dba:	ff 92       	push	r15
     dbc:	0f 93       	push	r16
     dbe:	1f 93       	push	r17
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	ec 01       	movw	r28, r24
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
     dc6:	88 a1       	ldd	r24, Y+32	; 0x20
     dc8:	88 23       	and	r24, r24
     dca:	09 f4       	brne	.+2      	; 0xdce <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x22>
     dcc:	50 c0       	rjmp	.+160    	; 0xe6e <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
     dce:	89 a1       	ldd	r24, Y+33	; 0x21
     dd0:	88 23       	and	r24, r24
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x2a>
     dd4:	4c c0       	rjmp	.+152    	; 0xe6e <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
     dd6:	14 2f       	mov	r17, r20
     dd8:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
     dda:	8c 8c       	ldd	r8, Y+28	; 0x1c
     ddc:	9d 8c       	ldd	r9, Y+29	; 0x1d
     dde:	ae 8c       	ldd	r10, Y+30	; 0x1e
     de0:	bf 8c       	ldd	r11, Y+31	; 0x1f
     de2:	c8 8c       	ldd	r12, Y+24	; 0x18
     de4:	d9 8c       	ldd	r13, Y+25	; 0x19
     de6:	ea 8c       	ldd	r14, Y+26	; 0x1a
     de8:	fb 8c       	ldd	r15, Y+27	; 0x1b
     dea:	8d e2       	ldi	r24, 0x2D	; 45
     dec:	c8 1a       	sub	r12, r24
     dee:	d1 08       	sbc	r13, r1
     df0:	e1 08       	sbc	r14, r1
     df2:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
     df4:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <micros>
     df8:	dc 01       	movw	r26, r24
     dfa:	cb 01       	movw	r24, r22
     dfc:	8c 19       	sub	r24, r12
     dfe:	9d 09       	sbc	r25, r13
     e00:	ae 09       	sbc	r26, r14
     e02:	bf 09       	sbc	r27, r15
     e04:	88 15       	cp	r24, r8
     e06:	99 05       	cpc	r25, r9
     e08:	aa 05       	cpc	r26, r10
     e0a:	bb 05       	cpc	r27, r11
     e0c:	98 f3       	brcs	.-26     	; 0xdf4 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x48>
	 */

	waitReady(-45);
   
	// grab i2c bus
	Wire.beginTransmission(_addr);
     e0e:	68 a1       	ldd	r22, Y+32	; 0x20
     e10:	83 e1       	ldi	r24, 0x13	; 19
     e12:	94 e0       	ldi	r25, 0x04	; 4
     e14:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
     e18:	89 a1       	ldd	r24, Y+33	; 0x21
     e1a:	82 30       	cpi	r24, 0x02	; 2
     e1c:	31 f4       	brne	.+12     	; 0xe2a <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x7e>
	{
		Wire.write(9); // point to GPIO
     e1e:	69 e0       	ldi	r22, 0x09	; 9
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	83 e1       	ldi	r24, 0x13	; 19
     e24:	94 e0       	ldi	r25, 0x04	; 4
     e26:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN7TwoWire5writeEi>
	}
	// send both nibbles in same i2c connection
	write4bits( (value >> 4), type );  // send upper nibble
     e2a:	61 2f       	mov	r22, r17
     e2c:	70 e0       	ldi	r23, 0x00	; 0
     e2e:	84 e0       	ldi	r24, 0x04	; 4
     e30:	75 95       	asr	r23
     e32:	67 95       	ror	r22
     e34:	8a 95       	dec	r24
     e36:	e1 f7       	brne	.-8      	; 0xe30 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x84>
     e38:	40 2f       	mov	r20, r16
     e3a:	ce 01       	movw	r24, r28
     e3c:	0e 94 b2 06 	call	0xd64	; 0xd64 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	 * are used to reliably get the LCD and host in nibble sync
	 * with each other and to get the LCD into 4 bit mode.
	 * When sending a "4 bit command" only the upper nibble of
	 * of the 8 bit byte will presented on LCD signals D4-D7.
	 */
	if(type != hd44780::HD44780_IOcmd4bit)
     e40:	02 30       	cpi	r16, 0x02	; 2
     e42:	31 f0       	breq	.+12     	; 0xe50 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xa4>
	{
		write4bits( (value & 0x0F), type); // lower nibble, if not 4bit cmd
     e44:	61 2f       	mov	r22, r17
     e46:	6f 70       	andi	r22, 0x0F	; 15
     e48:	40 2f       	mov	r20, r16
     e4a:	ce 01       	movw	r24, r28
     e4c:	0e 94 b2 06 	call	0xd64	; 0xd64 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	}
	if(Wire.endTransmission())
     e50:	83 e1       	ldi	r24, 0x13	; 19
     e52:	94 e0       	ldi	r25, 0x04	; 4
     e54:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_ZN7TwoWire15endTransmissionEv>
     e58:	21 e0       	ldi	r18, 0x01	; 1
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 11       	cpse	r24, r1
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xb8>
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	88 27       	eor	r24, r24
     e66:	99 27       	eor	r25, r25
     e68:	82 1b       	sub	r24, r18
     e6a:	93 0b       	sbc	r25, r19
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc6>
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
     e6e:	8c ef       	ldi	r24, 0xFC	; 252
     e70:	9f ef       	ldi	r25, 0xFF	; 255
	}
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR);
}
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	1f 91       	pop	r17
     e78:	0f 91       	pop	r16
     e7a:	ff 90       	pop	r15
     e7c:	ef 90       	pop	r14
     e7e:	df 90       	pop	r13
     e80:	cf 90       	pop	r12
     e82:	bf 90       	pop	r11
     e84:	af 90       	pop	r10
     e86:	9f 90       	pop	r9
     e88:	8f 90       	pop	r8
     e8a:	08 95       	ret

00000e8c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE>:
// ioread(type) - read a byte from LCD DDRAM
//
// returns:
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
     e8c:	8f 92       	push	r8
     e8e:	9f 92       	push	r9
     e90:	af 92       	push	r10
     e92:	bf 92       	push	r11
     e94:	cf 92       	push	r12
     e96:	df 92       	push	r13
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	ec 01       	movw	r28, r24
{
uint8_t gpioValue =  _blCurState;
     ea6:	1b a5       	ldd	r17, Y+43	; 0x2b
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
     ea8:	88 a1       	ldd	r24, Y+32	; 0x20
     eaa:	88 23       	and	r24, r24
     eac:	09 f4       	brne	.+2      	; 0xeb0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x24>
     eae:	f6 c0       	rjmp	.+492    	; 0x109c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
     eb0:	89 a1       	ldd	r24, Y+33	; 0x21
     eb2:	88 23       	and	r24, r24
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x2c>
     eb6:	f2 c0       	rjmp	.+484    	; 0x109c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
		return(hd44780::RV_ENXIO);

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
     eb8:	82 30       	cpi	r24, 0x02	; 2
     eba:	09 f4       	brne	.+2      	; 0xebe <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x32>
     ebc:	f1 c0       	rjmp	.+482    	; 0x10a0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
	{
		return(hd44780::RV_ENOTSUP);
	}

	// check if reads supported
	if(!_rw)
     ebe:	8b a1       	ldd	r24, Y+35	; 0x23
     ec0:	88 23       	and	r24, r24
     ec2:	09 f4       	brne	.+2      	; 0xec6 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x3a>
     ec4:	ed c0       	rjmp	.+474    	; 0x10a0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
     ec6:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
     ec8:	8c 8c       	ldd	r8, Y+28	; 0x1c
     eca:	9d 8c       	ldd	r9, Y+29	; 0x1d
     ecc:	ae 8c       	ldd	r10, Y+30	; 0x1e
     ece:	bf 8c       	ldd	r11, Y+31	; 0x1f
     ed0:	c8 8c       	ldd	r12, Y+24	; 0x18
     ed2:	d9 8c       	ldd	r13, Y+25	; 0x19
     ed4:	ea 8c       	ldd	r14, Y+26	; 0x1a
     ed6:	fb 8c       	ldd	r15, Y+27	; 0x1b
     ed8:	8d e2       	ldi	r24, 0x2D	; 45
     eda:	c8 1a       	sub	r12, r24
     edc:	d1 08       	sbc	r13, r1
     ede:	e1 08       	sbc	r14, r1
     ee0:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
     ee2:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <micros>
     ee6:	dc 01       	movw	r26, r24
     ee8:	cb 01       	movw	r24, r22
     eea:	8c 19       	sub	r24, r12
     eec:	9d 09       	sbc	r25, r13
     eee:	ae 09       	sbc	r26, r14
     ef0:	bf 09       	sbc	r27, r15
     ef2:	88 15       	cp	r24, r8
     ef4:	99 05       	cpc	r25, r9
     ef6:	aa 05       	cpc	r26, r10
     ef8:	bb 05       	cpc	r27, r11
     efa:	98 f3       	brcs	.-26     	; 0xee2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x56>
     efc:	8d a1       	ldd	r24, Y+37	; 0x25
     efe:	18 2b       	or	r17, r24
     f00:	8e a1       	ldd	r24, Y+38	; 0x26
     f02:	18 2b       	or	r17, r24
     f04:	8f a1       	ldd	r24, Y+39	; 0x27
     f06:	18 2b       	or	r17, r24
   
	// put all the expander LCD data pins into input mode.
	// PCF8574 psuedo inputs use pullups so setting them to 1
	// makes them suitible for inputs.

	gpioValue |= _d4|_d5|_d6|_d7;
     f08:	88 a5       	ldd	r24, Y+40	; 0x28
     f0a:	18 2b       	or	r17, r24

	// set RS based on type of read (data or status/cmd)
	if(type == hd44780::HD44780_IOdata) 
     f0c:	01 30       	cpi	r16, 0x01	; 1
     f0e:	11 f4       	brne	.+4      	; 0xf14 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x88>
	{
		gpioValue |= _rs; // RS high to read data reg
     f10:	8a a1       	ldd	r24, Y+34	; 0x22
     f12:	18 2b       	or	r17, r24
	}

	gpioValue |= _rw; // r/w high for reading
     f14:	8b a1       	ldd	r24, Y+35	; 0x23
     f16:	18 2b       	or	r17, r24

	// write all the bits to the expander port
	
	Wire.beginTransmission(_addr);
     f18:	68 a1       	ldd	r22, Y+32	; 0x20
     f1a:	83 e1       	ldi	r24, 0x13	; 19
     f1c:	94 e0       	ldi	r25, 0x04	; 4
     f1e:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue);		// d4-d7 are inputs, RS, r/w high, E LOW
     f22:	61 2f       	mov	r22, r17
     f24:	83 e1       	ldi	r24, 0x13	; 19
     f26:	94 e0       	ldi	r25, 0x04	; 4
     f28:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     f2c:	83 e1       	ldi	r24, 0x13	; 19
     f2e:	94 e0       	ldi	r25, 0x04	; 4
     f30:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_ZN7TwoWire15endTransmissionEv>
     f34:	88 23       	and	r24, r24
     f36:	19 f0       	breq	.+6      	; 0xf3e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xb2>
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;
     f38:	0f ef       	ldi	r16, 0xFF	; 255
     f3a:	1f ef       	ldi	r17, 0xFF	; 255
     f3c:	9d c0       	rjmp	.+314    	; 0x1078 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ec>
	if(Wire.endTransmission())
		goto returnStatus;


	// raise E to read the data.
	Wire.beginTransmission(_addr);
     f3e:	68 a1       	ldd	r22, Y+32	; 0x20
     f40:	83 e1       	ldi	r24, 0x13	; 19
     f42:	94 e0       	ldi	r25, 0x04	; 4
     f44:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raises E 
     f48:	6c a1       	ldd	r22, Y+36	; 0x24
     f4a:	61 2b       	or	r22, r17
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	83 e1       	ldi	r24, 0x13	; 19
     f50:	94 e0       	ldi	r25, 0x04	; 4
     f52:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
     f56:	83 e1       	ldi	r24, 0x13	; 19
     f58:	94 e0       	ldi	r25, 0x04	; 4
     f5a:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_ZN7TwoWire15endTransmissionEv>
     f5e:	81 11       	cpse	r24, r1
     f60:	eb cf       	rjmp	.-42     	; 0xf38 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// read the expander port to get the upper nibble of the byte
	Wire.requestFrom((int)_addr, 1);
     f62:	68 a1       	ldd	r22, Y+32	; 0x20
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	41 e0       	ldi	r20, 0x01	; 1
     f68:	50 e0       	ldi	r21, 0x00	; 0
     f6a:	83 e1       	ldi	r24, 0x13	; 19
     f6c:	94 e0       	ldi	r25, 0x04	; 4
     f6e:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <_ZN7TwoWire11requestFromEii>
	iodata = Wire.read();
     f72:	83 e1       	ldi	r24, 0x13	; 19
     f74:	94 e0       	ldi	r25, 0x04	; 4
     f76:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <_ZN7TwoWire4readEv>
     f7a:	7c 01       	movw	r14, r24
	if(iodata < 0) // did we not receive a byte?
     f7c:	97 fd       	sbrc	r25, 7
     f7e:	dc cf       	rjmp	.-72     	; 0xf38 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
     f80:	68 a1       	ldd	r22, Y+32	; 0x20
     f82:	83 e1       	ldi	r24, 0x13	; 19
     f84:	94 e0       	ldi	r25, 0x04	; 4
     f86:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
     f8a:	61 2f       	mov	r22, r17
     f8c:	83 e1       	ldi	r24, 0x13	; 19
     f8e:	94 e0       	ldi	r25, 0x04	; 4
     f90:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     f94:	83 e1       	ldi	r24, 0x13	; 19
     f96:	94 e0       	ldi	r25, 0x04	; 4
     f98:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_ZN7TwoWire15endTransmissionEv>
     f9c:	81 11       	cpse	r24, r1
     f9e:	cc cf       	rjmp	.-104    	; 0xf38 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
     fa0:	8d a1       	ldd	r24, Y+37	; 0x25
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	8e 21       	and	r24, r14
     fa6:	9f 21       	and	r25, r15
     fa8:	89 2b       	or	r24, r25
     faa:	11 f4       	brne	.+4      	; 0xfb0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x124>
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
     fac:	00 e0       	ldi	r16, 0x00	; 0
     fae:	01 c0       	rjmp	.+2      	; 0xfb2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x126>
	if(Wire.endTransmission())
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
		data |= (1 << 4);
     fb0:	00 e1       	ldi	r16, 0x10	; 16

	if(iodata & _d5)
     fb2:	8e a1       	ldd	r24, Y+38	; 0x26
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	8e 21       	and	r24, r14
     fb8:	9f 21       	and	r25, r15
     fba:	89 2b       	or	r24, r25
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x134>
		data |= (1 << 5);
     fbe:	00 62       	ori	r16, 0x20	; 32

	if(iodata & _d6)
     fc0:	8f a1       	ldd	r24, Y+39	; 0x27
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	8e 21       	and	r24, r14
     fc6:	9f 21       	and	r25, r15
     fc8:	89 2b       	or	r24, r25
     fca:	09 f0       	breq	.+2      	; 0xfce <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x142>
		data |= (1 << 6);
     fcc:	00 64       	ori	r16, 0x40	; 64

	if(iodata & _d7)
     fce:	88 a5       	ldd	r24, Y+40	; 0x28
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	e8 22       	and	r14, r24
     fd4:	f9 22       	and	r15, r25
     fd6:	ef 28       	or	r14, r15
     fd8:	09 f0       	breq	.+2      	; 0xfdc <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x150>
		data |= (1 << 7);
     fda:	00 68       	ori	r16, 0x80	; 128
	
	Wire.beginTransmission(_addr);
     fdc:	68 a1       	ldd	r22, Y+32	; 0x20
     fde:	83 e1       	ldi	r24, 0x13	; 19
     fe0:	94 e0       	ldi	r25, 0x04	; 4
     fe2:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raise E to read next nibble
     fe6:	6c a1       	ldd	r22, Y+36	; 0x24
     fe8:	61 2b       	or	r22, r17
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	83 e1       	ldi	r24, 0x13	; 19
     fee:	94 e0       	ldi	r25, 0x04	; 4
     ff0:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
     ff4:	83 e1       	ldi	r24, 0x13	; 19
     ff6:	94 e0       	ldi	r25, 0x04	; 4
     ff8:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_ZN7TwoWire15endTransmissionEv>
     ffc:	81 11       	cpse	r24, r1
     ffe:	9c cf       	rjmp	.-200    	; 0xf38 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>

	// read the expander port to get the lower nibble of the byte
	// We can't look at the return value from requestFrom() on the TineyWireM
	// library as it doesn't work like it is supposed to.
	// So we look at the return status from read() instead.
	Wire.requestFrom((int)_addr, 1);
    1000:	68 a1       	ldd	r22, Y+32	; 0x20
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	41 e0       	ldi	r20, 0x01	; 1
    1006:	50 e0       	ldi	r21, 0x00	; 0
    1008:	83 e1       	ldi	r24, 0x13	; 19
    100a:	94 e0       	ldi	r25, 0x04	; 4
    100c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <_ZN7TwoWire11requestFromEii>

	iodata = Wire.read();
    1010:	83 e1       	ldi	r24, 0x13	; 19
    1012:	94 e0       	ldi	r25, 0x04	; 4
    1014:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <_ZN7TwoWire4readEv>
    1018:	7c 01       	movw	r14, r24

	if(iodata < 0) // did we not receive a byte?
    101a:	97 fd       	sbrc	r25, 7
    101c:	8d cf       	rjmp	.-230    	; 0xf38 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
    101e:	68 a1       	ldd	r22, Y+32	; 0x20
    1020:	83 e1       	ldi	r24, 0x13	; 19
    1022:	94 e0       	ldi	r25, 0x04	; 4
    1024:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
    1028:	61 2f       	mov	r22, r17
    102a:	83 e1       	ldi	r24, 0x13	; 19
    102c:	94 e0       	ldi	r25, 0x04	; 4
    102e:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    1032:	83 e1       	ldi	r24, 0x13	; 19
    1034:	94 e0       	ldi	r25, 0x04	; 4
    1036:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_ZN7TwoWire15endTransmissionEv>
    103a:	81 11       	cpse	r24, r1
    103c:	7d cf       	rjmp	.-262    	; 0xf38 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into lower nibble of byte
	if(iodata & _d4)
    103e:	8d a1       	ldd	r24, Y+37	; 0x25
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	8e 21       	and	r24, r14
    1044:	9f 21       	and	r25, r15
    1046:	89 2b       	or	r24, r25
    1048:	09 f0       	breq	.+2      	; 0x104c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1c0>
		data |= (1 << 0);
    104a:	01 60       	ori	r16, 0x01	; 1

	if(iodata & _d5)
    104c:	8e a1       	ldd	r24, Y+38	; 0x26
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	8e 21       	and	r24, r14
    1052:	9f 21       	and	r25, r15
    1054:	89 2b       	or	r24, r25
    1056:	09 f0       	breq	.+2      	; 0x105a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ce>
		data |= (1 << 1);
    1058:	02 60       	ori	r16, 0x02	; 2

	if(iodata & _d6)
    105a:	8f a1       	ldd	r24, Y+39	; 0x27
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	8e 21       	and	r24, r14
    1060:	9f 21       	and	r25, r15
    1062:	89 2b       	or	r24, r25
    1064:	09 f0       	breq	.+2      	; 0x1068 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1dc>
		data |= (1 << 2);
    1066:	04 60       	ori	r16, 0x04	; 4

	if(iodata & _d7)
    1068:	88 a5       	ldd	r24, Y+40	; 0x28
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	e8 22       	and	r14, r24
    106e:	f9 22       	and	r15, r25
    1070:	ef 28       	or	r14, r15
    1072:	09 f0       	breq	.+2      	; 0x1076 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ea>
		data |= (1 << 3);
    1074:	08 60       	ori	r16, 0x08	; 8

	rval = data;
    1076:	10 e0       	ldi	r17, 0x00	; 0

returnStatus:

	// try to put gpio port back to all outputs state with WR signal low for writes
	Wire.beginTransmission(_addr);
    1078:	68 a1       	ldd	r22, Y+32	; 0x20
    107a:	83 e1       	ldi	r24, 0x13	; 19
    107c:	94 e0       	ldi	r25, 0x04	; 4
    107e:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(_blCurState);		// with E LOW
    1082:	6b a5       	ldd	r22, Y+43	; 0x2b
    1084:	83 e1       	ldi	r24, 0x13	; 19
    1086:	94 e0       	ldi	r25, 0x04	; 4
    1088:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    108c:	83 e1       	ldi	r24, 0x13	; 19
    108e:	94 e0       	ldi	r25, 0x04	; 4
    1090:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_ZN7TwoWire15endTransmissionEv>
    1094:	88 23       	and	r24, r24
    1096:	39 f0       	breq	.+14     	; 0x10a6 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21a>
		rval = hd44780::RV_EIO;
    1098:	8f ef       	ldi	r24, 0xFF	; 255
    109a:	03 c0       	rjmp	.+6      	; 0x10a2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
    109c:	8c ef       	ldi	r24, 0xFC	; 252
    109e:	01 c0       	rjmp	.+2      	; 0x10a2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
	{
		return(hd44780::RV_ENOTSUP);
    10a0:	8d ef       	ldi	r24, 0xFD	; 253
    10a2:	9f ef       	ldi	r25, 0xFF	; 255
    10a4:	01 c0       	rjmp	.+2      	; 0x10a8 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21c>
    10a6:	c8 01       	movw	r24, r16
	Wire.write(_blCurState);		// with E LOW
	if(Wire.endTransmission())
		rval = hd44780::RV_EIO;

	return(rval);
}
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	1f 91       	pop	r17
    10ae:	0f 91       	pop	r16
    10b0:	ff 90       	pop	r15
    10b2:	ef 90       	pop	r14
    10b4:	df 90       	pop	r13
    10b6:	cf 90       	pop	r12
    10b8:	bf 90       	pop	r11
    10ba:	af 90       	pop	r10
    10bc:	9f 90       	pop	r9
    10be:	8f 90       	pop	r8
    10c0:	08 95       	ret

000010c2 <_ZN14hd44780_I2Cexp11autocfg8574Ev>:
 * a new resistor to  connect to the base of the transistor.
 * 
 * As a result the SYDZ backpack cannot use autoconfiguration.
 */

int autocfg8574()
    10c2:	0f 93       	push	r16
    10c4:	1f 93       	push	r17
    10c6:	cf 93       	push	r28
    10c8:	df 93       	push	r29
    10ca:	ec 01       	movw	r28, r24
uint8_t data, data2;
uint8_t rs, rw, en, d4, d5, d6, d7, bl, blLevel;

	// First put a 0xff in the output port

	Wire.beginTransmission(_addr);
    10cc:	68 a1       	ldd	r22, Y+32	; 0x20
    10ce:	83 e1       	ldi	r24, 0x13	; 19
    10d0:	94 e0       	ldi	r25, 0x04	; 4
    10d2:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0xff);
    10d6:	6f ef       	ldi	r22, 0xFF	; 255
    10d8:	83 e1       	ldi	r24, 0x13	; 19
    10da:	94 e0       	ldi	r25, 0x04	; 4
    10dc:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    10e0:	83 e1       	ldi	r24, 0x13	; 19
    10e2:	94 e0       	ldi	r25, 0x04	; 4
    10e4:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_ZN7TwoWire15endTransmissionEv>

	// now read back from the port

	Wire.requestFrom((int)_addr, 1);
    10e8:	68 a1       	ldd	r22, Y+32	; 0x20
    10ea:	70 e0       	ldi	r23, 0x00	; 0
    10ec:	41 e0       	ldi	r20, 0x01	; 1
    10ee:	50 e0       	ldi	r21, 0x00	; 0
    10f0:	83 e1       	ldi	r24, 0x13	; 19
    10f2:	94 e0       	ldi	r25, 0x04	; 4
    10f4:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    10f8:	83 e1       	ldi	r24, 0x13	; 19
    10fa:	94 e0       	ldi	r25, 0x04	; 4
    10fc:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <_ZN7TwoWire4readEv>
    1100:	8c 01       	movw	r16, r24

	// Turn off bit2 to attempt to see if en is bit 2,
	// if it is, it should change all lcd data bits to 1s
	
	Wire.beginTransmission(_addr);
    1102:	68 a1       	ldd	r22, Y+32	; 0x20
    1104:	83 e1       	ldi	r24, 0x13	; 19
    1106:	94 e0       	ldi	r25, 0x04	; 4
    1108:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) (~(1 << 2)) );
    110c:	6b ef       	ldi	r22, 0xFB	; 251
    110e:	83 e1       	ldi	r24, 0x13	; 19
    1110:	94 e0       	ldi	r25, 0x04	; 4
    1112:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    1116:	83 e1       	ldi	r24, 0x13	; 19
    1118:	94 e0       	ldi	r25, 0x04	; 4
    111a:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_ZN7TwoWire15endTransmissionEv>

	// read back data
	Wire.requestFrom((int)_addr, 1);
    111e:	68 a1       	ldd	r22, Y+32	; 0x20
    1120:	70 e0       	ldi	r23, 0x00	; 0
    1122:	41 e0       	ldi	r20, 0x01	; 1
    1124:	50 e0       	ldi	r21, 0x00	; 0
    1126:	83 e1       	ldi	r24, 0x13	; 19
    1128:	94 e0       	ldi	r25, 0x04	; 4
    112a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <_ZN7TwoWire11requestFromEii>
	data2 = Wire.read();
    112e:	83 e1       	ldi	r24, 0x13	; 19
    1130:	94 e0       	ldi	r25, 0x04	; 4
    1132:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <_ZN7TwoWire4readEv>

	// If lower 3 bits are high and all 4 upper bits are high after clearing bit 2
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
    1136:	98 01       	movw	r18, r16
    1138:	27 70       	andi	r18, 0x07	; 7
    113a:	33 27       	eor	r19, r19
    113c:	27 30       	cpi	r18, 0x07	; 7
    113e:	31 05       	cpc	r19, r1
    1140:	b1 f4       	brne	.+44     	; 0x116e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
    1142:	80 7f       	andi	r24, 0xF0	; 240
    1144:	99 27       	eor	r25, r25
    1146:	80 3f       	cpi	r24, 0xF0	; 240
    1148:	91 05       	cpc	r25, r1
    114a:	89 f4       	brne	.+34     	; 0x116e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
    114c:	83 e0       	ldi	r24, 0x03	; 3
    114e:	16 95       	lsr	r17
    1150:	07 95       	ror	r16
    1152:	8a 95       	dec	r24
    1154:	e1 f7       	brne	.-8      	; 0x114e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x8c>
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	08 27       	eor	r16, r24
    115a:	01 70       	andi	r16, 0x01	; 1
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
	{
		rs = 0; rw = 1; en = 2; d4 = 4; d5 = 5; d6 = 6; d7 = 7; bl = 3;
    115c:	43 e0       	ldi	r20, 0x03	; 3
    115e:	57 e0       	ldi	r21, 0x07	; 7
    1160:	66 e0       	ldi	r22, 0x06	; 6
    1162:	75 e0       	ldi	r23, 0x05	; 5
    1164:	e4 e0       	ldi	r30, 0x04	; 4
    1166:	22 e0       	ldi	r18, 0x02	; 2
    1168:	f1 e0       	ldi	r31, 0x01	; 1
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	34 c0       	rjmp	.+104    	; 0x11d6 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x114>
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
		}
	}
	else if((data & 0x70) == 0x70)
    116e:	c8 01       	movw	r24, r16
    1170:	80 77       	andi	r24, 0x70	; 112
    1172:	99 27       	eor	r25, r25
    1174:	80 37       	cpi	r24, 0x70	; 112
    1176:	91 05       	cpc	r25, r1
    1178:	09 f0       	breq	.+2      	; 0x117c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xba>
    117a:	68 c0       	rjmp	.+208    	; 0x124c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18a>
		// both use bit 7 for backlight control

		// Turn off the en bit which should change the data bits
		// bit 4 on the mjkdz is en so we try that bit
	
		Wire.beginTransmission(_addr);
    117c:	68 a1       	ldd	r22, Y+32	; 0x20
    117e:	83 e1       	ldi	r24, 0x13	; 19
    1180:	94 e0       	ldi	r25, 0x04	; 4
    1182:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t) (~(1 << 4)) );
    1186:	6f ee       	ldi	r22, 0xEF	; 239
    1188:	83 e1       	ldi	r24, 0x13	; 19
    118a:	94 e0       	ldi	r25, 0x04	; 4
    118c:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    1190:	83 e1       	ldi	r24, 0x13	; 19
    1192:	94 e0       	ldi	r25, 0x04	; 4
    1194:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_ZN7TwoWire15endTransmissionEv>

		// read back data
		Wire.requestFrom((int)_addr, 1);
    1198:	68 a1       	ldd	r22, Y+32	; 0x20
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	41 e0       	ldi	r20, 0x01	; 1
    119e:	50 e0       	ldi	r21, 0x00	; 0
    11a0:	83 e1       	ldi	r24, 0x13	; 19
    11a2:	94 e0       	ldi	r25, 0x04	; 4
    11a4:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <_ZN7TwoWire11requestFromEii>
		data2 = Wire.read();
    11a8:	83 e1       	ldi	r24, 0x13	; 19
    11aa:	94 e0       	ldi	r25, 0x04	; 4
    11ac:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <_ZN7TwoWire4readEv>
		// look at data bits and see if they changed
		// if they changed to 0xf, then en was bit 4 and it is mjdkz
		// this will happen since when E is low the LCD is not
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
    11b0:	8f 70       	andi	r24, 0x0F	; 15
    11b2:	99 27       	eor	r25, r25
    11b4:	0f 97       	sbiw	r24, 0x0f	; 15
    11b6:	19 f0       	breq	.+6      	; 0x11be <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xfc>
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
		}
		else
		{
			// electrofun LCDXIO
			rs = 4; rw = 5; en = 6; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
    11b8:	26 e0       	ldi	r18, 0x06	; 6
    11ba:	34 e0       	ldi	r19, 0x04	; 4
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x100>
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
		{
			// mjkdz
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
    11be:	24 e0       	ldi	r18, 0x04	; 4
    11c0:	36 e0       	ldi	r19, 0x06	; 6
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
    11c2:	00 95       	com	r16
    11c4:	00 1f       	adc	r16, r16
    11c6:	00 27       	eor	r16, r16
    11c8:	00 1f       	adc	r16, r16
    11ca:	47 e0       	ldi	r20, 0x07	; 7
    11cc:	53 e0       	ldi	r21, 0x03	; 3
    11ce:	62 e0       	ldi	r22, 0x02	; 2
    11d0:	71 e0       	ldi	r23, 0x01	; 1
    11d2:	e0 e0       	ldi	r30, 0x00	; 0
    11d4:	f5 e0       	ldi	r31, 0x05	; 5
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	dc 01       	movw	r26, r24
    11dc:	01 c0       	rjmp	.+2      	; 0x11e0 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11e>
    11de:	aa 0f       	add	r26, r26
    11e0:	3a 95       	dec	r19
    11e2:	ea f7       	brpl	.-6      	; 0x11de <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11c>
    11e4:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
    11e6:	dc 01       	movw	r26, r24
    11e8:	01 c0       	rjmp	.+2      	; 0x11ec <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x12a>
    11ea:	aa 0f       	add	r26, r26
    11ec:	fa 95       	dec	r31
    11ee:	ea f7       	brpl	.-6      	; 0x11ea <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x128>
    11f0:	ab a3       	std	Y+35, r26	; 0x23
	else
		_rw = 0; // no r/w control

	_en = ( 1 << en );
    11f2:	dc 01       	movw	r26, r24
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x138>
    11f6:	aa 0f       	add	r26, r26
    11f8:	bb 1f       	adc	r27, r27
    11fa:	2a 95       	dec	r18
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x134>
    11fe:	ac a3       	std	Y+36, r26	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
    1200:	9c 01       	movw	r18, r24
    1202:	01 c0       	rjmp	.+2      	; 0x1206 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x144>
    1204:	22 0f       	add	r18, r18
    1206:	ea 95       	dec	r30
    1208:	ea f7       	brpl	.-6      	; 0x1204 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x142>
    120a:	2d a3       	std	Y+37, r18	; 0x25
	_d5 = ( 1 << d5 );
    120c:	9c 01       	movw	r18, r24
    120e:	01 c0       	rjmp	.+2      	; 0x1212 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x150>
    1210:	22 0f       	add	r18, r18
    1212:	7a 95       	dec	r23
    1214:	ea f7       	brpl	.-6      	; 0x1210 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x14e>
    1216:	2e a3       	std	Y+38, r18	; 0x26
	_d6 = ( 1 << d6 );
    1218:	9c 01       	movw	r18, r24
    121a:	01 c0       	rjmp	.+2      	; 0x121e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15c>
    121c:	22 0f       	add	r18, r18
    121e:	6a 95       	dec	r22
    1220:	ea f7       	brpl	.-6      	; 0x121c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15a>
    1222:	2f a3       	std	Y+39, r18	; 0x27
	_d7 = ( 1 << d7 );   
    1224:	9c 01       	movw	r18, r24
    1226:	01 c0       	rjmp	.+2      	; 0x122a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x168>
    1228:	22 0f       	add	r18, r18
    122a:	5a 95       	dec	r21
    122c:	ea f7       	brpl	.-6      	; 0x1228 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x166>
    122e:	28 a7       	std	Y+40, r18	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
    1230:	01 c0       	rjmp	.+2      	; 0x1234 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x172>
    1232:	88 0f       	add	r24, r24
    1234:	4a 95       	dec	r20
    1236:	ea f7       	brpl	.-6      	; 0x1232 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x170>
    1238:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
    123a:	0a a7       	std	Y+42, r16	; 0x2a
	// set default bl state to backlight on
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
    123c:	01 30       	cpi	r16, 0x01	; 1
    123e:	11 f4       	brne	.+4      	; 0x1244 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x182>
		_blCurState = _bl;
    1240:	8b a7       	std	Y+43, r24	; 0x2b
    1242:	01 c0       	rjmp	.+2      	; 0x1246 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x184>
	else
		_blCurState = 0;
    1244:	1b a6       	std	Y+43, r1	; 0x2b
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18e>
		}
	}
	else
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
    124c:	8d ef       	ldi	r24, 0xFD	; 253
    124e:	9f ef       	ldi	r25, 0xFF	; 255
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	1f 91       	pop	r17
    1256:	0f 91       	pop	r16
    1258:	08 95       	ret

0000125a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>:
 * if GP1 is low then the board is the BOARD_XXX board
 * The BOARD_XXX may not work as GP1 is used for D5 on WIDEHK and LCDPLUG
 *
 *
 */
int autocfgMCP23008()
    125a:	cf 93       	push	r28
    125c:	df 93       	push	r29
    125e:	ec 01       	movw	r28, r24

	/*
	 * Now set up output port
	 * Make no assumptions as to the state of IOCON BYTE mode
	 */
	Wire.beginTransmission(_addr);
    1260:	68 a1       	ldd	r22, Y+32	; 0x20
    1262:	83 e1       	ldi	r24, 0x13	; 19
    1264:	94 e0       	ldi	r25, 0x04	; 4
    1266:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t)0); // point to IODIR
    126a:	60 e0       	ldi	r22, 0x00	; 0
    126c:	83 e1       	ldi	r24, 0x13	; 19
    126e:	94 e0       	ldi	r25, 0x04	; 4
    1270:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <_ZN7TwoWire5writeEh>
	Wire.write(0xff); // all pins inputs
    1274:	6f ef       	ldi	r22, 0xFF	; 255
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	83 e1       	ldi	r24, 0x13	; 19
    127a:	94 e0       	ldi	r25, 0x04	; 4
    127c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    1280:	83 e1       	ldi	r24, 0x13	; 19
    1282:	94 e0       	ldi	r25, 0x04	; 4
    1284:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_ZN7TwoWire15endTransmissionEv>

	Wire.beginTransmission(_addr);
    1288:	68 a1       	ldd	r22, Y+32	; 0x20
    128a:	83 e1       	ldi	r24, 0x13	; 19
    128c:	94 e0       	ldi	r25, 0x04	; 4
    128e:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(6); // point to GPPU
    1292:	66 e0       	ldi	r22, 0x06	; 6
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	83 e1       	ldi	r24, 0x13	; 19
    1298:	94 e0       	ldi	r25, 0x04	; 4
    129a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN7TwoWire5writeEi>
	Wire.write(0xff); // turn on pullups
    129e:	6f ef       	ldi	r22, 0xFF	; 255
    12a0:	70 e0       	ldi	r23, 0x00	; 0
    12a2:	83 e1       	ldi	r24, 0x13	; 19
    12a4:	94 e0       	ldi	r25, 0x04	; 4
    12a6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    12aa:	83 e1       	ldi	r24, 0x13	; 19
    12ac:	94 e0       	ldi	r25, 0x04	; 4
    12ae:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_ZN7TwoWire15endTransmissionEv>

	/*
	 * read from the GPIO port
	 */

	Wire.beginTransmission(_addr);
    12b2:	68 a1       	ldd	r22, Y+32	; 0x20
    12b4:	83 e1       	ldi	r24, 0x13	; 19
    12b6:	94 e0       	ldi	r25, 0x04	; 4
    12b8:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(9); // point to GPIO
    12bc:	69 e0       	ldi	r22, 0x09	; 9
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	83 e1       	ldi	r24, 0x13	; 19
    12c2:	94 e0       	ldi	r25, 0x04	; 4
    12c4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    12c8:	83 e1       	ldi	r24, 0x13	; 19
    12ca:	94 e0       	ldi	r25, 0x04	; 4
    12cc:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom((int)_addr, 1);
    12d0:	68 a1       	ldd	r22, Y+32	; 0x20
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	41 e0       	ldi	r20, 0x01	; 1
    12d6:	50 e0       	ldi	r21, 0x00	; 0
    12d8:	83 e1       	ldi	r24, 0x13	; 19
    12da:	94 e0       	ldi	r25, 0x04	; 4
    12dc:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    12e0:	83 e1       	ldi	r24, 0x13	; 19
    12e2:	94 e0       	ldi	r25, 0x04	; 4
    12e4:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <_ZN7TwoWire4readEv>

	blLevel = HIGH; // known boards are active HIGH bl

	if(data == 0x7f) // bit 7 low, and other control and data lines high
    12e8:	8f 37       	cpi	r24, 0x7F	; 127
    12ea:	61 f0       	breq	.+24     	; 0x1304 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xaa>
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
    12ec:	86 ff       	sbrs	r24, 6
    12ee:	12 c0       	rjmp	.+36     	; 0x1314 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xba>
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
    12f0:	81 fd       	sbrc	r24, 1
    12f2:	4c c0       	rjmp	.+152    	; 0x138c <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x132>
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
		bl = 1;
    12f4:	21 e0       	ldi	r18, 0x01	; 1
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
    12f6:	32 e0       	ldi	r19, 0x02	; 2
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
    12f8:	43 e0       	ldi	r20, 0x03	; 3
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
    12fa:	54 e0       	ldi	r21, 0x04	; 4
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
    12fc:	65 e0       	ldi	r22, 0x05	; 5
	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
    12fe:	76 e0       	ldi	r23, 0x06	; 6
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
    1300:	e7 e0       	ldi	r30, 0x07	; 7
    1302:	0f c0       	rjmp	.+30     	; 0x1322 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;
    1304:	27 e0       	ldi	r18, 0x07	; 7
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
    1306:	36 e0       	ldi	r19, 0x06	; 6
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
    1308:	45 e0       	ldi	r20, 0x05	; 5
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
    130a:	54 e0       	ldi	r21, 0x04	; 4
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
    130c:	63 e0       	ldi	r22, 0x03	; 3
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
    130e:	72 e0       	ldi	r23, 0x02	; 2

	if(data == 0x7f) // bit 7 low, and other control and data lines high
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
    1310:	e1 e0       	ldi	r30, 0x01	; 1
    1312:	07 c0       	rjmp	.+14     	; 0x1322 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;
    1314:	26 e0       	ldi	r18, 0x06	; 6
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
    1316:	33 e0       	ldi	r19, 0x03	; 3
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
    1318:	42 e0       	ldi	r20, 0x02	; 2
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
    131a:	51 e0       	ldi	r21, 0x01	; 1
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
    131c:	60 e0       	ldi	r22, 0x00	; 0
	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
    131e:	77 e0       	ldi	r23, 0x07	; 7
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
    1320:	e4 e0       	ldi	r30, 0x04	; 4
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	dc 01       	movw	r26, r24
    1328:	02 c0       	rjmp	.+4      	; 0x132e <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd4>
    132a:	aa 0f       	add	r26, r26
    132c:	bb 1f       	adc	r27, r27
    132e:	ea 95       	dec	r30
    1330:	e2 f7       	brpl	.-8      	; 0x132a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd0>
    1332:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
	else
		_rw = 0; // no r/w control
    1334:	1b a2       	std	Y+35, r1	; 0x23

	_en = ( 1 << en );
    1336:	fc 01       	movw	r30, r24
    1338:	01 c0       	rjmp	.+2      	; 0x133c <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe2>
    133a:	ee 0f       	add	r30, r30
    133c:	7a 95       	dec	r23
    133e:	ea f7       	brpl	.-6      	; 0x133a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe0>
    1340:	ec a3       	std	Y+36, r30	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
    1342:	fc 01       	movw	r30, r24
    1344:	02 c0       	rjmp	.+4      	; 0x134a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xf0>
    1346:	ee 0f       	add	r30, r30
    1348:	ff 1f       	adc	r31, r31
    134a:	6a 95       	dec	r22
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xec>
    134e:	ed a3       	std	Y+37, r30	; 0x25
	_d5 = ( 1 << d5 );
    1350:	bc 01       	movw	r22, r24
    1352:	01 c0       	rjmp	.+2      	; 0x1356 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfc>
    1354:	66 0f       	add	r22, r22
    1356:	5a 95       	dec	r21
    1358:	ea f7       	brpl	.-6      	; 0x1354 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfa>
    135a:	6e a3       	std	Y+38, r22	; 0x26
	_d6 = ( 1 << d6 );
    135c:	bc 01       	movw	r22, r24
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x10a>
    1360:	66 0f       	add	r22, r22
    1362:	77 1f       	adc	r23, r23
    1364:	4a 95       	dec	r20
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x106>
    1368:	6f a3       	std	Y+39, r22	; 0x27
	_d7 = ( 1 << d7 );   
    136a:	ac 01       	movw	r20, r24
    136c:	01 c0       	rjmp	.+2      	; 0x1370 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x116>
    136e:	44 0f       	add	r20, r20
    1370:	3a 95       	dec	r19
    1372:	ea f7       	brpl	.-6      	; 0x136e <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x114>
    1374:	48 a7       	std	Y+40, r20	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
    1376:	01 c0       	rjmp	.+2      	; 0x137a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x120>
    1378:	88 0f       	add	r24, r24
    137a:	2a 95       	dec	r18
    137c:	ea f7       	brpl	.-6      	; 0x1378 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x11e>
    137e:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
    1380:	91 e0       	ldi	r25, 0x01	; 1
    1382:	9a a7       	std	Y+42, r25	; 0x2a
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
		_blCurState = _bl;
    1384:	8b a7       	std	Y+43, r24	; 0x2b
		// could not identify board
		return(hd44780::RV_ENOTSUP);
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x136>

	}
	else
	{
		// could not identify board
		return(hd44780::RV_ENOTSUP);
    138c:	8d ef       	ldi	r24, 0xFD	; 253
    138e:	9f ef       	ldi	r25, 0xFF	; 255
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
    1390:	df 91       	pop	r29
    1392:	cf 91       	pop	r28
    1394:	08 95       	ret

00001396 <_ZN14hd44780_I2Cexp6ioinitEv>:
// Returns non zero if initialization failed.
//
// can't be used from constructors because not everything is initalized yet.
// (maybe interrupts or other library constructors)
// if Wire library is used in constructor, it will hang.
int ioinit()
    1396:	1f 93       	push	r17
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
    139c:	ec 01       	movw	r28, r24
	 * I believe that it is unreasonable to require the the user
	 * sketch code to do it, because all that should change between
	 * hd44780 i/o interfaces should be the constructor
	 * So we go ahead and call it here.
	 */
	Wire.begin();
    139e:	83 e1       	ldi	r24, 0x13	; 19
    13a0:	94 e0       	ldi	r25, 0x04	; 4
    13a2:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZN7TwoWire5beginEv>

	// auto locate i2c expander and magically detect pin mappings

	if(!_addr) // locate next instance
    13a6:	68 a1       	ldd	r22, Y+32	; 0x20
    13a8:	61 11       	cpse	r22, r1
    13aa:	0a c0       	rjmp	.+20     	; 0x13c0 <_ZN14hd44780_I2Cexp6ioinitEv+0x2a>
	{
		_addr = LocateDevice(AutoInst++);
    13ac:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    13b0:	91 e0       	ldi	r25, 0x01	; 1
    13b2:	98 0f       	add	r25, r24
    13b4:	90 93 a4 03 	sts	0x03A4, r25	; 0x8003a4 <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    13b8:	0e 94 b1 01 	call	0x362	; 0x362 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
    13bc:	88 a3       	std	Y+32, r24	; 0x20
    13be:	0d c0       	rjmp	.+26     	; 0x13da <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
	}
	else
	{
		// check to see if device at specified address is really there
		Wire.beginTransmission(_addr);
    13c0:	83 e1       	ldi	r24, 0x13	; 19
    13c2:	94 e0       	ldi	r25, 0x04	; 4
    13c4:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZN7TwoWire17beginTransmissionEh>
		if(Wire.endTransmission())
    13c8:	83 e1       	ldi	r24, 0x13	; 19
    13ca:	94 e0       	ldi	r25, 0x04	; 4
    13cc:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_ZN7TwoWire15endTransmissionEv>
    13d0:	88 23       	and	r24, r24
    13d2:	19 f0       	breq	.+6      	; 0x13da <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
			return(hd44780::RV_ENXIO);
    13d4:	8c ef       	ldi	r24, 0xFC	; 252
    13d6:	9f ef       	ldi	r25, 0xFF	; 255
    13d8:	a7 c0       	rjmp	.+334    	; 0x1528 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	}

	if(!_addr) // locate next instance
    13da:	88 a1       	ldd	r24, Y+32	; 0x20
    13dc:	81 11       	cpse	r24, r1
    13de:	09 c0       	rjmp	.+18     	; 0x13f2 <_ZN14hd44780_I2Cexp6ioinitEv+0x5c>
		_addr = LocateDevice(AutoInst++);
    13e0:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    13e4:	91 e0       	ldi	r25, 0x01	; 1
    13e6:	98 0f       	add	r25, r24
    13e8:	90 93 a4 03 	sts	0x03A4, r25	; 0x8003a4 <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    13ec:	0e 94 b1 01 	call	0x362	; 0x362 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
    13f0:	88 a3       	std	Y+32, r24	; 0x20

	if(!_addr) // if we couldn't locate it, return error
    13f2:	18 a1       	ldd	r17, Y+32	; 0x20
    13f4:	11 23       	and	r17, r17
    13f6:	71 f3       	breq	.-36     	; 0x13d4 <_ZN14hd44780_I2Cexp6ioinitEv+0x3e>
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
    13f8:	89 a1       	ldd	r24, Y+33	; 0x21
    13fa:	88 23       	and	r24, r24
    13fc:	c1 f1       	breq	.+112    	; 0x146e <_ZN14hd44780_I2Cexp6ioinitEv+0xd8>
			return(status);
	}

	// initialize IO expander chip

	Wire.beginTransmission(_addr);
    13fe:	68 a1       	ldd	r22, Y+32	; 0x20
    1400:	83 e1       	ldi	r24, 0x13	; 19
    1402:	94 e0       	ldi	r25, 0x04	; 4
    1404:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZN7TwoWire17beginTransmissionEh>

	if(_expType == I2Cexp_MCP23008)
    1408:	89 a1       	ldd	r24, Y+33	; 0x21
    140a:	82 30       	cpi	r24, 0x02	; 2
    140c:	09 f0       	breq	.+2      	; 0x1410 <_ZN14hd44780_I2Cexp6ioinitEv+0x7a>
    140e:	76 c0       	rjmp	.+236    	; 0x14fc <_ZN14hd44780_I2Cexp6ioinitEv+0x166>
		 * within the same i2c connection by simply sending more bytes.
		 * This is necessary as the code uses back to back writes to perform
		 * the nibble updates as well as the toggling the enable signal.
		 * This methodology offers significant performance gains.
		 */
		Wire.write(5);	// point to IOCON
    1410:	65 e0       	ldi	r22, 0x05	; 5
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	83 e1       	ldi	r24, 0x13	; 19
    1416:	94 e0       	ldi	r25, 0x04	; 4
    1418:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN7TwoWire5writeEi>
		Wire.write(0x20);// disable sequential mode (enables BYTE mode)
    141c:	60 e2       	ldi	r22, 0x20	; 32
    141e:	70 e0       	ldi	r23, 0x00	; 0
    1420:	83 e1       	ldi	r24, 0x13	; 19
    1422:	94 e0       	ldi	r25, 0x04	; 4
    1424:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    1428:	83 e1       	ldi	r24, 0x13	; 19
    142a:	94 e0       	ldi	r25, 0x04	; 4
    142c:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_ZN7TwoWire15endTransmissionEv>

		/*
		 * Now set up output port
		 */
		Wire.beginTransmission(_addr);
    1430:	68 a1       	ldd	r22, Y+32	; 0x20
    1432:	83 e1       	ldi	r24, 0x13	; 19
    1434:	94 e0       	ldi	r25, 0x04	; 4
    1436:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t)0); // point to IODIR
    143a:	60 e0       	ldi	r22, 0x00	; 0
    143c:	83 e1       	ldi	r24, 0x13	; 19
    143e:	94 e0       	ldi	r25, 0x04	; 4
    1440:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <_ZN7TwoWire5writeEh>
		Wire.write((uint8_t)0); // all pins output
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	83 e1       	ldi	r24, 0x13	; 19
    1448:	94 e0       	ldi	r25, 0x04	; 4
    144a:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    144e:	83 e1       	ldi	r24, 0x13	; 19
    1450:	94 e0       	ldi	r25, 0x04	; 4
    1452:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_ZN7TwoWire15endTransmissionEv>
	
		/*
		 * point chip to GPIO
		 */
		Wire.beginTransmission(_addr);
    1456:	68 a1       	ldd	r22, Y+32	; 0x20
    1458:	83 e1       	ldi	r24, 0x13	; 19
    145a:	94 e0       	ldi	r25, 0x04	; 4
    145c:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZN7TwoWire17beginTransmissionEh>
		Wire.write(9); // point to GPIO
    1460:	69 e0       	ldi	r22, 0x09	; 9
    1462:	70 e0       	ldi	r23, 0x00	; 0
    1464:	83 e1       	ldi	r24, 0x13	; 19
    1466:	94 e0       	ldi	r25, 0x04	; 4
    1468:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN7TwoWire5writeEi>
    146c:	47 c0       	rjmp	.+142    	; 0x14fc <_ZN14hd44780_I2Cexp6ioinitEv+0x166>

	/*
	 * First try to write 0xff to MCP23008 IODIR
	 * On a PCF8574 this will end up writing 0 and then ff to output port
	 */
	Wire.beginTransmission(address);
    146e:	61 2f       	mov	r22, r17
    1470:	83 e1       	ldi	r24, 0x13	; 19
    1472:	94 e0       	ldi	r25, 0x04	; 4
    1474:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
    1478:	60 e0       	ldi	r22, 0x00	; 0
    147a:	83 e1       	ldi	r24, 0x13	; 19
    147c:	94 e0       	ldi	r25, 0x04	; 4
    147e:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <_ZN7TwoWire5writeEh>
	Wire.write((uint8_t) 0xff);	// try to write to MCP23008 IODR
    1482:	6f ef       	ldi	r22, 0xFF	; 255
    1484:	83 e1       	ldi	r24, 0x13	; 19
    1486:	94 e0       	ldi	r25, 0x04	; 4
    1488:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    148c:	83 e1       	ldi	r24, 0x13	; 19
    148e:	94 e0       	ldi	r25, 0x04	; 4
    1490:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now try to point MCP23008 to IODIR for read
	 * On a PCF8574 this will end up writing a 0 to the output port
	 */

	Wire.beginTransmission(address);
    1494:	61 2f       	mov	r22, r17
    1496:	83 e1       	ldi	r24, 0x13	; 19
    1498:	94 e0       	ldi	r25, 0x04	; 4
    149a:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	83 e1       	ldi	r24, 0x13	; 19
    14a2:	94 e0       	ldi	r25, 0x04	; 4
    14a4:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    14a8:	83 e1       	ldi	r24, 0x13	; 19
    14aa:	94 e0       	ldi	r25, 0x04	; 4
    14ac:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now read a byte
	 * On a MCP23008 we should read the 0xff we wrote to IODIR
	 * On a PCF8574 we should read 0 since the output port was set to 0
	 */
	Wire.requestFrom((int)address, 1);
    14b0:	61 2f       	mov	r22, r17
    14b2:	70 e0       	ldi	r23, 0x00	; 0
    14b4:	41 e0       	ldi	r20, 0x01	; 1
    14b6:	50 e0       	ldi	r21, 0x00	; 0
    14b8:	83 e1       	ldi	r24, 0x13	; 19
    14ba:	94 e0       	ldi	r25, 0x04	; 4
    14bc:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    14c0:	83 e1       	ldi	r24, 0x13	; 19
    14c2:	94 e0       	ldi	r25, 0x04	; 4
    14c4:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <_ZN7TwoWire4readEv>
    14c8:	9c 01       	movw	r18, r24

	if(data == 0xff)
    14ca:	8f 3f       	cpi	r24, 0xFF	; 255
    14cc:	91 05       	cpc	r25, r1
    14ce:	29 f0       	breq	.+10     	; 0x14da <_ZN14hd44780_I2Cexp6ioinitEv+0x144>
	{
		chiptype = I2Cexp_MCP23008;
    14d0:	91 e0       	ldi	r25, 0x01	; 1
    14d2:	23 2b       	or	r18, r19
    14d4:	19 f0       	breq	.+6      	; 0x14dc <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	01 c0       	rjmp	.+2      	; 0x14dc <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    14da:	92 e0       	ldi	r25, 0x02	; 2
	if(!_addr) // if we couldn't locate it, return error
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);
    14dc:	99 a3       	std	Y+33, r25	; 0x21

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
    14de:	99 23       	and	r25, r25
    14e0:	09 f1       	breq	.+66     	; 0x1524 <_ZN14hd44780_I2Cexp6ioinitEv+0x18e>
			return(hd44780::RV_EIO);

		if(_expType == I2Cexp_PCF8574)
    14e2:	91 30       	cpi	r25, 0x01	; 1
    14e4:	21 f4       	brne	.+8      	; 0x14ee <_ZN14hd44780_I2Cexp6ioinitEv+0x158>
			status = autocfg8574();		// go auto configure the pin mappings
    14e6:	ce 01       	movw	r24, r28
    14e8:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN14hd44780_I2Cexp11autocfg8574Ev>
    14ec:	03 c0       	rjmp	.+6      	; 0x14f4 <_ZN14hd44780_I2Cexp6ioinitEv+0x15e>
		else
			status = autocfgMCP23008();	// go auto configure the pin mappings
    14ee:	ce 01       	movw	r24, r28
    14f0:	0e 94 2d 09 	call	0x125a	; 0x125a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>
		if(status)
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	09 f4       	brne	.+2      	; 0x14fa <_ZN14hd44780_I2Cexp6ioinitEv+0x164>
    14f8:	82 cf       	rjmp	.-252    	; 0x13fe <_ZN14hd44780_I2Cexp6ioinitEv+0x68>
    14fa:	16 c0       	rjmp	.+44     	; 0x1528 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
		 */
		Wire.beginTransmission(_addr);
		Wire.write(9); // point to GPIO
		
	}
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
    14fc:	60 e0       	ldi	r22, 0x00	; 0
    14fe:	83 e1       	ldi	r24, 0x13	; 19
    1500:	94 e0       	ldi	r25, 0x04	; 4
    1502:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <_ZN7TwoWire5writeEh>
	if( (status = Wire.endTransmission()) ) // assignment
    1506:	83 e1       	ldi	r24, 0x13	; 19
    1508:	94 e0       	ldi	r25, 0x04	; 4
    150a:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_ZN7TwoWire15endTransmissionEv>
    150e:	21 e0       	ldi	r18, 0x01	; 1
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	81 11       	cpse	r24, r1
    1514:	02 c0       	rjmp	.+4      	; 0x151a <_ZN14hd44780_I2Cexp6ioinitEv+0x184>
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	88 27       	eor	r24, r24
    151c:	99 27       	eor	r25, r25
    151e:	82 1b       	sub	r24, r18
    1520:	93 0b       	sbc	r25, r19
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
			return(hd44780::RV_EIO);
    1524:	8f ef       	ldi	r24, 0xFF	; 255
    1526:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
	if( (status = Wire.endTransmission()) ) // assignment
		status = hd44780::RV_EIO;

	return ( status );
}
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	1f 91       	pop	r17
    152e:	08 95       	ret

00001530 <_ZN7hd447806ioinitEv>:
	{
		buf[i] = pgm_read_byte(charmap++);
	}
	// call the RAM based function to actually send it to the LCD
	return(createChar(location, buf));
}
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	08 95       	ret

00001536 <_ZN7hd447806ioreadENS_6iotypeE>:
    1536:	8d ef       	ldi	r24, 0xFD	; 253
    1538:	9f ef       	ldi	r25, 0xFF	; 255
    153a:	08 95       	ret

0000153c <_ZN7hd4478014iosetBacklightEh>:
    153c:	8d ef       	ldi	r24, 0xFD	; 253
    153e:	9f ef       	ldi	r25, 0xFF	; 255
    1540:	08 95       	ret

00001542 <_ZN7hd44780C1Ev>:
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	ec 01       	movw	r28, r24
    1548:	1b 82       	std	Y+3, r1	; 0x03
    154a:	1a 82       	std	Y+2, r1	; 0x02
    154c:	80 e4       	ldi	r24, 0x40	; 64
    154e:	92 e0       	ldi	r25, 0x02	; 2
    1550:	99 83       	std	Y+1, r25	; 0x01
    1552:	88 83       	st	Y, r24
    1554:	1f 82       	std	Y+7, r1	; 0x07
    1556:	18 86       	std	Y+8, r1	; 0x08
    1558:	80 ed       	ldi	r24, 0xD0	; 208
    155a:	97 e0       	ldi	r25, 0x07	; 7
    155c:	a0 e0       	ldi	r26, 0x00	; 0
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	88 8b       	std	Y+16, r24	; 0x10
    1562:	99 8b       	std	Y+17, r25	; 0x11
    1564:	aa 8b       	std	Y+18, r26	; 0x12
    1566:	bb 8b       	std	Y+19, r27	; 0x13
    1568:	86 e2       	ldi	r24, 0x26	; 38
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	a0 e0       	ldi	r26, 0x00	; 0
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	8c 8b       	std	Y+20, r24	; 0x14
    1572:	9d 8b       	std	Y+21, r25	; 0x15
    1574:	ae 8b       	std	Y+22, r26	; 0x16
    1576:	bf 8b       	std	Y+23, r27	; 0x17
    1578:	1c 86       	std	Y+12, r1	; 0x0c
    157a:	1d 86       	std	Y+13, r1	; 0x0d
    157c:	1e 86       	std	Y+14, r1	; 0x0e
    157e:	1f 86       	std	Y+15, r1	; 0x0f
    1580:	1b 86       	std	Y+11, r1	; 0x0b
    1582:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <micros>
    1586:	68 8f       	std	Y+24, r22	; 0x18
    1588:	79 8f       	std	Y+25, r23	; 0x19
    158a:	8a 8f       	std	Y+26, r24	; 0x1a
    158c:	9b 8f       	std	Y+27, r25	; 0x1b
    158e:	1c 8e       	std	Y+28, r1	; 0x1c
    1590:	1d 8e       	std	Y+29, r1	; 0x1d
    1592:	1e 8e       	std	Y+30, r1	; 0x1e
    1594:	1f 8e       	std	Y+31, r1	; 0x1f
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	08 95       	ret

0000159c <_ZN7hd447809backlightEv>:
    159c:	dc 01       	movw	r26, r24
    159e:	ed 91       	ld	r30, X+
    15a0:	fc 91       	ld	r31, X
    15a2:	06 84       	ldd	r0, Z+14	; 0x0e
    15a4:	f7 85       	ldd	r31, Z+15	; 0x0f
    15a6:	e0 2d       	mov	r30, r0
    15a8:	6f ef       	ldi	r22, 0xFF	; 255
    15aa:	09 94       	ijmp

000015ac <_ZN7hd4478011noBacklightEv>:
    15ac:	dc 01       	movw	r26, r24
    15ae:	ed 91       	ld	r30, X+
    15b0:	fc 91       	ld	r31, X
    15b2:	06 84       	ldd	r0, Z+14	; 0x0e
    15b4:	f7 85       	ldd	r31, Z+15	; 0x0f
    15b6:	e0 2d       	mov	r30, r0
    15b8:	60 e0       	ldi	r22, 0x00	; 0
    15ba:	09 94       	ijmp

000015bc <_ZN7hd447807commandEh>:
    15bc:	8f 92       	push	r8
    15be:	9f 92       	push	r9
    15c0:	af 92       	push	r10
    15c2:	bf 92       	push	r11
    15c4:	ef 92       	push	r14
    15c6:	ff 92       	push	r15
    15c8:	1f 93       	push	r17
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
    15ce:	ec 01       	movw	r28, r24
    15d0:	16 2f       	mov	r17, r22
    15d2:	e8 81       	ld	r30, Y
    15d4:	f9 81       	ldd	r31, Y+1	; 0x01
    15d6:	04 84       	ldd	r0, Z+12	; 0x0c
    15d8:	f5 85       	ldd	r31, Z+13	; 0x0d
    15da:	e0 2d       	mov	r30, r0
    15dc:	46 2f       	mov	r20, r22
    15de:	60 e0       	ldi	r22, 0x00	; 0
    15e0:	09 95       	icall
    15e2:	7c 01       	movw	r14, r24
    15e4:	11 50       	subi	r17, 0x01	; 1
    15e6:	12 30       	cpi	r17, 0x02	; 2
    15e8:	38 f4       	brcc	.+14     	; 0x15f8 <_ZN7hd447807commandEh+0x3c>
    15ea:	19 86       	std	Y+9, r1	; 0x09
    15ec:	1a 86       	std	Y+10, r1	; 0x0a
    15ee:	88 88       	ldd	r8, Y+16	; 0x10
    15f0:	99 88       	ldd	r9, Y+17	; 0x11
    15f2:	aa 88       	ldd	r10, Y+18	; 0x12
    15f4:	bb 88       	ldd	r11, Y+19	; 0x13
    15f6:	04 c0       	rjmp	.+8      	; 0x1600 <_ZN7hd447807commandEh+0x44>
    15f8:	8c 88       	ldd	r8, Y+20	; 0x14
    15fa:	9d 88       	ldd	r9, Y+21	; 0x15
    15fc:	ae 88       	ldd	r10, Y+22	; 0x16
    15fe:	bf 88       	ldd	r11, Y+23	; 0x17
    1600:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <micros>
    1604:	68 8f       	std	Y+24, r22	; 0x18
    1606:	79 8f       	std	Y+25, r23	; 0x19
    1608:	8a 8f       	std	Y+26, r24	; 0x1a
    160a:	9b 8f       	std	Y+27, r25	; 0x1b
    160c:	8c 8e       	std	Y+28, r8	; 0x1c
    160e:	9d 8e       	std	Y+29, r9	; 0x1d
    1610:	ae 8e       	std	Y+30, r10	; 0x1e
    1612:	bf 8e       	std	Y+31, r11	; 0x1f
    1614:	c7 01       	movw	r24, r14
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	1f 91       	pop	r17
    161c:	ff 90       	pop	r15
    161e:	ef 90       	pop	r14
    1620:	bf 90       	pop	r11
    1622:	af 90       	pop	r10
    1624:	9f 90       	pop	r9
    1626:	8f 90       	pop	r8
    1628:	08 95       	ret

0000162a <_ZN7hd447805clearEv>:
    162a:	61 e0       	ldi	r22, 0x01	; 1
    162c:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <_ZN7hd447807commandEh>

00001630 <_ZN7hd447804homeEv>:
    1630:	62 e0       	ldi	r22, 0x02	; 2
    1632:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <_ZN7hd447807commandEh>

00001636 <_ZN7hd447809setCursorEhh>:
    1636:	fc 01       	movw	r30, r24
    1638:	80 85       	ldd	r24, Z+8	; 0x08
    163a:	48 17       	cp	r20, r24
    163c:	10 f0       	brcs	.+4      	; 0x1642 <_ZN7hd447809setCursorEhh+0xc>
    163e:	4f ef       	ldi	r20, 0xFF	; 255
    1640:	48 0f       	add	r20, r24
    1642:	93 85       	ldd	r25, Z+11	; 0x0b
    1644:	99 23       	and	r25, r25
    1646:	59 f0       	breq	.+22     	; 0x165e <_ZN7hd447809setCursorEhh+0x28>
    1648:	97 81       	ldd	r25, Z+7	; 0x07
    164a:	69 17       	cp	r22, r25
    164c:	30 f0       	brcs	.+12     	; 0x165a <_ZN7hd447809setCursorEhh+0x24>
    164e:	69 1b       	sub	r22, r25
    1650:	4f 5f       	subi	r20, 0xFF	; 255
    1652:	48 17       	cp	r20, r24
    1654:	d0 f3       	brcs	.-12     	; 0x164a <_ZN7hd447809setCursorEhh+0x14>
    1656:	40 e0       	ldi	r20, 0x00	; 0
    1658:	f8 cf       	rjmp	.-16     	; 0x164a <_ZN7hd447809setCursorEhh+0x14>
    165a:	61 87       	std	Z+9, r22	; 0x09
    165c:	42 87       	std	Z+10, r20	; 0x0a
    165e:	df 01       	movw	r26, r30
    1660:	a4 0f       	add	r26, r20
    1662:	b1 1d       	adc	r27, r1
    1664:	1c 96       	adiw	r26, 0x0c	; 12
    1666:	8c 91       	ld	r24, X
    1668:	68 0f       	add	r22, r24
    166a:	60 68       	ori	r22, 0x80	; 128
    166c:	cf 01       	movw	r24, r30
    166e:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <_ZN7hd447807commandEh>

00001672 <_ZN7hd447807displayEv>:
    1672:	fc 01       	movw	r30, r24
    1674:	65 81       	ldd	r22, Z+5	; 0x05
    1676:	26 2f       	mov	r18, r22
    1678:	24 60       	ori	r18, 0x04	; 4
    167a:	25 83       	std	Z+5, r18	; 0x05
    167c:	6c 60       	ori	r22, 0x0C	; 12
    167e:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <_ZN7hd447807commandEh>

00001682 <_ZN7hd447805beginEhhh>:
    1682:	0f 93       	push	r16
    1684:	1f 93       	push	r17
    1686:	cf 93       	push	r28
    1688:	df 93       	push	r29
    168a:	ec 01       	movw	r28, r24
    168c:	02 2f       	mov	r16, r18
    168e:	14 2f       	mov	r17, r20
    1690:	45 30       	cpi	r20, 0x05	; 5
    1692:	08 f0       	brcs	.+2      	; 0x1696 <_ZN7hd447805beginEhhh+0x14>
    1694:	14 e0       	ldi	r17, 0x04	; 4
    1696:	8c 85       	ldd	r24, Y+12	; 0x0c
    1698:	81 11       	cpse	r24, r1
    169a:	09 c0       	rjmp	.+18     	; 0x16ae <_ZN7hd447805beginEhhh+0x2c>
    169c:	8d 85       	ldd	r24, Y+13	; 0x0d
    169e:	81 11       	cpse	r24, r1
    16a0:	06 c0       	rjmp	.+12     	; 0x16ae <_ZN7hd447805beginEhhh+0x2c>
    16a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    16a4:	81 11       	cpse	r24, r1
    16a6:	03 c0       	rjmp	.+6      	; 0x16ae <_ZN7hd447805beginEhhh+0x2c>
    16a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    16aa:	88 23       	and	r24, r24
    16ac:	29 f0       	breq	.+10     	; 0x16b8 <_ZN7hd447805beginEhhh+0x36>
    16ae:	8f 81       	ldd	r24, Y+7	; 0x07
    16b0:	88 23       	and	r24, r24
    16b2:	59 f0       	breq	.+22     	; 0x16ca <_ZN7hd447805beginEhhh+0x48>
    16b4:	86 17       	cp	r24, r22
    16b6:	49 f0       	breq	.+18     	; 0x16ca <_ZN7hd447805beginEhhh+0x48>
    16b8:	1c 86       	std	Y+12, r1	; 0x0c
    16ba:	80 e4       	ldi	r24, 0x40	; 64
    16bc:	8d 87       	std	Y+13, r24	; 0x0d
    16be:	6e 87       	std	Y+14, r22	; 0x0e
    16c0:	86 2f       	mov	r24, r22
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	80 5c       	subi	r24, 0xC0	; 192
    16c6:	9f 4f       	sbci	r25, 0xFF	; 255
    16c8:	8f 87       	std	Y+15, r24	; 0x0f
    16ca:	18 87       	std	Y+8, r17	; 0x08
    16cc:	6f 83       	std	Y+7, r22	; 0x07
    16ce:	64 e6       	ldi	r22, 0x64	; 100
    16d0:	70 e0       	ldi	r23, 0x00	; 0
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	0e 94 10 18 	call	0x3020	; 0x3020 <delay>
    16da:	1c 82       	std	Y+4, r1	; 0x04
    16dc:	e8 81       	ld	r30, Y
    16de:	f9 81       	ldd	r31, Y+1	; 0x01
    16e0:	00 84       	ldd	r0, Z+8	; 0x08
    16e2:	f1 85       	ldd	r31, Z+9	; 0x09
    16e4:	e0 2d       	mov	r30, r0
    16e6:	ce 01       	movw	r24, r28
    16e8:	09 95       	icall
    16ea:	00 97       	sbiw	r24, 0x00	; 0
    16ec:	09 f0       	breq	.+2      	; 0x16f0 <_ZN7hd447805beginEhhh+0x6e>
    16ee:	5e c0       	rjmp	.+188    	; 0x17ac <_ZN7hd447805beginEhhh+0x12a>
    16f0:	88 85       	ldd	r24, Y+8	; 0x08
    16f2:	82 30       	cpi	r24, 0x02	; 2
    16f4:	18 f0       	brcs	.+6      	; 0x16fc <_ZN7hd447805beginEhhh+0x7a>
    16f6:	8c 81       	ldd	r24, Y+4	; 0x04
    16f8:	88 60       	ori	r24, 0x08	; 8
    16fa:	8c 83       	std	Y+4, r24	; 0x04
    16fc:	00 23       	and	r16, r16
    16fe:	29 f0       	breq	.+10     	; 0x170a <_ZN7hd447805beginEhhh+0x88>
    1700:	11 30       	cpi	r17, 0x01	; 1
    1702:	19 f4       	brne	.+6      	; 0x170a <_ZN7hd447805beginEhhh+0x88>
    1704:	8c 81       	ldd	r24, Y+4	; 0x04
    1706:	84 60       	ori	r24, 0x04	; 4
    1708:	8c 83       	std	Y+4, r24	; 0x04
    170a:	e8 81       	ld	r30, Y
    170c:	f9 81       	ldd	r31, Y+1	; 0x01
    170e:	04 84       	ldd	r0, Z+12	; 0x0c
    1710:	f5 85       	ldd	r31, Z+13	; 0x0d
    1712:	e0 2d       	mov	r30, r0
    1714:	40 e3       	ldi	r20, 0x30	; 48
    1716:	62 e0       	ldi	r22, 0x02	; 2
    1718:	ce 01       	movw	r24, r28
    171a:	09 95       	icall
    171c:	65 e0       	ldi	r22, 0x05	; 5
    171e:	70 e0       	ldi	r23, 0x00	; 0
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	0e 94 10 18 	call	0x3020	; 0x3020 <delay>
    1728:	e8 81       	ld	r30, Y
    172a:	f9 81       	ldd	r31, Y+1	; 0x01
    172c:	04 84       	ldd	r0, Z+12	; 0x0c
    172e:	f5 85       	ldd	r31, Z+13	; 0x0d
    1730:	e0 2d       	mov	r30, r0
    1732:	40 e3       	ldi	r20, 0x30	; 48
    1734:	62 e0       	ldi	r22, 0x02	; 2
    1736:	ce 01       	movw	r24, r28
    1738:	09 95       	icall
    173a:	61 e0       	ldi	r22, 0x01	; 1
    173c:	70 e0       	ldi	r23, 0x00	; 0
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	0e 94 10 18 	call	0x3020	; 0x3020 <delay>
    1746:	e8 81       	ld	r30, Y
    1748:	f9 81       	ldd	r31, Y+1	; 0x01
    174a:	04 84       	ldd	r0, Z+12	; 0x0c
    174c:	f5 85       	ldd	r31, Z+13	; 0x0d
    174e:	e0 2d       	mov	r30, r0
    1750:	40 e3       	ldi	r20, 0x30	; 48
    1752:	62 e0       	ldi	r22, 0x02	; 2
    1754:	ce 01       	movw	r24, r28
    1756:	09 95       	icall
    1758:	61 e0       	ldi	r22, 0x01	; 1
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	0e 94 10 18 	call	0x3020	; 0x3020 <delay>
    1764:	8c 81       	ldd	r24, Y+4	; 0x04
    1766:	84 fd       	sbrc	r24, 4
    1768:	09 c0       	rjmp	.+18     	; 0x177c <_ZN7hd447805beginEhhh+0xfa>
    176a:	e8 81       	ld	r30, Y
    176c:	f9 81       	ldd	r31, Y+1	; 0x01
    176e:	04 84       	ldd	r0, Z+12	; 0x0c
    1770:	f5 85       	ldd	r31, Z+13	; 0x0d
    1772:	e0 2d       	mov	r30, r0
    1774:	40 e2       	ldi	r20, 0x20	; 32
    1776:	62 e0       	ldi	r22, 0x02	; 2
    1778:	ce 01       	movw	r24, r28
    177a:	09 95       	icall
    177c:	6c 81       	ldd	r22, Y+4	; 0x04
    177e:	60 62       	ori	r22, 0x20	; 32
    1780:	ce 01       	movw	r24, r28
    1782:	0e 94 de 0a 	call	0x15bc	; 0x15bc <_ZN7hd447807commandEh>
    1786:	84 e0       	ldi	r24, 0x04	; 4
    1788:	8d 83       	std	Y+5, r24	; 0x05
    178a:	ce 01       	movw	r24, r28
    178c:	0e 94 39 0b 	call	0x1672	; 0x1672 <_ZN7hd447807displayEv>
    1790:	ce 01       	movw	r24, r28
    1792:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN7hd447805clearEv>
    1796:	82 e0       	ldi	r24, 0x02	; 2
    1798:	8e 83       	std	Y+6, r24	; 0x06
    179a:	66 e0       	ldi	r22, 0x06	; 6
    179c:	ce 01       	movw	r24, r28
    179e:	0e 94 de 0a 	call	0x15bc	; 0x15bc <_ZN7hd447807commandEh>
    17a2:	8c 01       	movw	r16, r24
    17a4:	ce 01       	movw	r24, r28
    17a6:	0e 94 ce 0a 	call	0x159c	; 0x159c <_ZN7hd447809backlightEv>
    17aa:	c8 01       	movw	r24, r16
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	1f 91       	pop	r17
    17b2:	0f 91       	pop	r16
    17b4:	08 95       	ret

000017b6 <_ZN7hd447808noCursorEv>:
    17b6:	fc 01       	movw	r30, r24
    17b8:	65 81       	ldd	r22, Z+5	; 0x05
    17ba:	6d 7f       	andi	r22, 0xFD	; 253
    17bc:	65 83       	std	Z+5, r22	; 0x05
    17be:	68 60       	ori	r22, 0x08	; 8
    17c0:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <_ZN7hd447807commandEh>

000017c4 <_ZN7hd447807noBlinkEv>:
    17c4:	fc 01       	movw	r30, r24
    17c6:	65 81       	ldd	r22, Z+5	; 0x05
    17c8:	6e 7f       	andi	r22, 0xFE	; 254
    17ca:	65 83       	std	Z+5, r22	; 0x05
    17cc:	68 60       	ori	r22, 0x08	; 8
    17ce:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <_ZN7hd447807commandEh>

000017d2 <_ZN7hd447806_writeEh>:
    17d2:	cf 92       	push	r12
    17d4:	df 92       	push	r13
    17d6:	ef 92       	push	r14
    17d8:	ff 92       	push	r15
    17da:	0f 93       	push	r16
    17dc:	1f 93       	push	r17
    17de:	cf 93       	push	r28
    17e0:	df 93       	push	r29
    17e2:	ec 01       	movw	r28, r24
    17e4:	46 2f       	mov	r20, r22
    17e6:	e8 81       	ld	r30, Y
    17e8:	f9 81       	ldd	r31, Y+1	; 0x01
    17ea:	04 84       	ldd	r0, Z+12	; 0x0c
    17ec:	f5 85       	ldd	r31, Z+13	; 0x0d
    17ee:	e0 2d       	mov	r30, r0
    17f0:	61 e0       	ldi	r22, 0x01	; 1
    17f2:	09 95       	icall
    17f4:	8c 01       	movw	r16, r24
    17f6:	cc 88       	ldd	r12, Y+20	; 0x14
    17f8:	dd 88       	ldd	r13, Y+21	; 0x15
    17fa:	ee 88       	ldd	r14, Y+22	; 0x16
    17fc:	ff 88       	ldd	r15, Y+23	; 0x17
    17fe:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <micros>
    1802:	68 8f       	std	Y+24, r22	; 0x18
    1804:	79 8f       	std	Y+25, r23	; 0x19
    1806:	8a 8f       	std	Y+26, r24	; 0x1a
    1808:	9b 8f       	std	Y+27, r25	; 0x1b
    180a:	cc 8e       	std	Y+28, r12	; 0x1c
    180c:	dd 8e       	std	Y+29, r13	; 0x1d
    180e:	ee 8e       	std	Y+30, r14	; 0x1e
    1810:	ff 8e       	std	Y+31, r15	; 0x1f
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	01 2b       	or	r16, r17
    1818:	11 f0       	breq	.+4      	; 0x181e <_ZN7hd447806_writeEh+0x4c>
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	1f 91       	pop	r17
    1824:	0f 91       	pop	r16
    1826:	ff 90       	pop	r15
    1828:	ef 90       	pop	r14
    182a:	df 90       	pop	r13
    182c:	cf 90       	pop	r12
    182e:	08 95       	ret

00001830 <_ZN7hd447805writeEh>:

// write() - process data character byte to lcd
// returns number of bytes successfully written to device
// i.e. 1 if success or 0 if no character was processed (error)
size_t hd44780::write(uint8_t value)
{
    1830:	0f 93       	push	r16
    1832:	1f 93       	push	r17
    1834:	cf 93       	push	r28
    1836:	df 93       	push	r29
    1838:	ec 01       	movw	r28, r24
size_t rval;

	rval = _write(value);
    183a:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_ZN7hd447806_writeEh>
    183e:	8c 01       	movw	r16, r24
	if(_wraplines)
    1840:	8b 85       	ldd	r24, Y+11	; 0x0b
    1842:	88 23       	and	r24, r24
    1844:	99 f0       	breq	.+38     	; 0x186c <_ZN7hd447805writeEh+0x3c>
	{
		// currently only works for left to right mode
		if(++_curcol >= _cols)
    1846:	89 85       	ldd	r24, Y+9	; 0x09
    1848:	8f 5f       	subi	r24, 0xFF	; 255
    184a:	89 87       	std	Y+9, r24	; 0x09
    184c:	9f 81       	ldd	r25, Y+7	; 0x07
    184e:	89 17       	cp	r24, r25
    1850:	68 f0       	brcs	.+26     	; 0x186c <_ZN7hd447805writeEh+0x3c>
		{
			_curcol = 0;
    1852:	19 86       	std	Y+9, r1	; 0x09
			_currow++;
    1854:	8a 85       	ldd	r24, Y+10	; 0x0a
    1856:	8f 5f       	subi	r24, 0xFF	; 255
    1858:	8a 87       	std	Y+10, r24	; 0x0a
			if(_currow >= _rows)
    185a:	98 85       	ldd	r25, Y+8	; 0x08
    185c:	89 17       	cp	r24, r25
    185e:	08 f0       	brcs	.+2      	; 0x1862 <_ZN7hd447805writeEh+0x32>
				_currow = 0;
    1860:	1a 86       	std	Y+10, r1	; 0x0a
			setCursor(_curcol, _currow);
    1862:	4a 85       	ldd	r20, Y+10	; 0x0a
    1864:	60 e0       	ldi	r22, 0x00	; 0
    1866:	ce 01       	movw	r24, r28
    1868:	0e 94 1b 0b 	call	0x1636	; 0x1636 <_ZN7hd447809setCursorEhh>
		}
	}
	return (rval);
}
    186c:	c8 01       	movw	r24, r16
    186e:	df 91       	pop	r29
    1870:	cf 91       	pop	r28
    1872:	1f 91       	pop	r17
    1874:	0f 91       	pop	r16
    1876:	08 95       	ret

00001878 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1878:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <twi_state>
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <twi_sendStop>
    1882:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <twi_inRepStart>
    1886:	61 e0       	ldi	r22, 0x01	; 1
    1888:	82 e0       	ldi	r24, 0x02	; 2
    188a:	0e 94 4c 19 	call	0x3298	; 0x3298 <digitalWrite>
    188e:	61 e0       	ldi	r22, 0x01	; 1
    1890:	83 e0       	ldi	r24, 0x03	; 3
    1892:	0e 94 4c 19 	call	0x3298	; 0x3298 <digitalWrite>
    1896:	e9 eb       	ldi	r30, 0xB9	; 185
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	8e 7f       	andi	r24, 0xFE	; 254
    189e:	80 83       	st	Z, r24
    18a0:	80 81       	ld	r24, Z
    18a2:	8d 7f       	andi	r24, 0xFD	; 253
    18a4:	80 83       	st	Z, r24
    18a6:	88 e4       	ldi	r24, 0x48	; 72
    18a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    18ac:	85 e4       	ldi	r24, 0x45	; 69
    18ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    18b2:	08 95       	ret

000018b4 <twi_readFrom>:
    18b4:	41 32       	cpi	r20, 0x21	; 33
    18b6:	08 f0       	brcs	.+2      	; 0x18ba <twi_readFrom+0x6>
    18b8:	43 c0       	rjmp	.+134    	; 0x1940 <twi_readFrom+0x8c>
    18ba:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <twi_state>
    18be:	91 11       	cpse	r25, r1
    18c0:	fc cf       	rjmp	.-8      	; 0x18ba <twi_readFrom+0x6>
    18c2:	91 e0       	ldi	r25, 0x01	; 1
    18c4:	90 93 12 04 	sts	0x0412, r25	; 0x800412 <twi_state>
    18c8:	20 93 10 04 	sts	0x0410, r18	; 0x800410 <twi_sendStop>
    18cc:	2f ef       	ldi	r18, 0xFF	; 255
    18ce:	20 93 a5 03 	sts	0x03A5, r18	; 0x8003a5 <twi_error>
    18d2:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <twi_masterBufferIndex>
    18d6:	24 0f       	add	r18, r20
    18d8:	20 93 e9 03 	sts	0x03E9, r18	; 0x8003e9 <twi_masterBufferLength>
    18dc:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <twi_slarw>
    18e0:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <twi_slarw>
    18e4:	88 0f       	add	r24, r24
    18e6:	89 2b       	or	r24, r25
    18e8:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <twi_slarw>
    18ec:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <twi_inRepStart>
    18f0:	81 30       	cpi	r24, 0x01	; 1
    18f2:	61 f4       	brne	.+24     	; 0x190c <twi_readFrom+0x58>
    18f4:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <twi_inRepStart>
    18f8:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <twi_slarw>
    18fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1900:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1904:	83 fd       	sbrc	r24, 3
    1906:	f8 cf       	rjmp	.-16     	; 0x18f8 <twi_readFrom+0x44>
    1908:	85 ec       	ldi	r24, 0xC5	; 197
    190a:	01 c0       	rjmp	.+2      	; 0x190e <twi_readFrom+0x5a>
    190c:	85 ee       	ldi	r24, 0xE5	; 229
    190e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1912:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <twi_state>
    1916:	81 30       	cpi	r24, 0x01	; 1
    1918:	e1 f3       	breq	.-8      	; 0x1912 <twi_readFrom+0x5e>
    191a:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <twi_masterBufferIndex>
    191e:	84 17       	cp	r24, r20
    1920:	10 f4       	brcc	.+4      	; 0x1926 <twi_readFrom+0x72>
    1922:	40 91 ea 03 	lds	r20, 0x03EA	; 0x8003ea <twi_masterBufferIndex>
    1926:	ab ee       	ldi	r26, 0xEB	; 235
    1928:	b3 e0       	ldi	r27, 0x03	; 3
    192a:	96 2f       	mov	r25, r22
    192c:	fb 01       	movw	r30, r22
    192e:	8e 2f       	mov	r24, r30
    1930:	89 1b       	sub	r24, r25
    1932:	84 17       	cp	r24, r20
    1934:	18 f4       	brcc	.+6      	; 0x193c <twi_readFrom+0x88>
    1936:	8d 91       	ld	r24, X+
    1938:	81 93       	st	Z+, r24
    193a:	f9 cf       	rjmp	.-14     	; 0x192e <twi_readFrom+0x7a>
    193c:	84 2f       	mov	r24, r20
    193e:	08 95       	ret
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	08 95       	ret

00001944 <twi_writeTo>:
    1944:	0f 93       	push	r16
    1946:	41 32       	cpi	r20, 0x21	; 33
    1948:	08 f0       	brcs	.+2      	; 0x194c <twi_writeTo+0x8>
    194a:	4a c0       	rjmp	.+148    	; 0x19e0 <twi_writeTo+0x9c>
    194c:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <twi_state>
    1950:	91 11       	cpse	r25, r1
    1952:	fc cf       	rjmp	.-8      	; 0x194c <twi_writeTo+0x8>
    1954:	32 e0       	ldi	r19, 0x02	; 2
    1956:	30 93 12 04 	sts	0x0412, r19	; 0x800412 <twi_state>
    195a:	00 93 10 04 	sts	0x0410, r16	; 0x800410 <twi_sendStop>
    195e:	3f ef       	ldi	r19, 0xFF	; 255
    1960:	30 93 a5 03 	sts	0x03A5, r19	; 0x8003a5 <twi_error>
    1964:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <twi_masterBufferIndex>
    1968:	40 93 e9 03 	sts	0x03E9, r20	; 0x8003e9 <twi_masterBufferLength>
    196c:	56 2f       	mov	r21, r22
    196e:	ab ee       	ldi	r26, 0xEB	; 235
    1970:	b3 e0       	ldi	r27, 0x03	; 3
    1972:	fb 01       	movw	r30, r22
    1974:	3e 2f       	mov	r19, r30
    1976:	35 1b       	sub	r19, r21
    1978:	34 17       	cp	r19, r20
    197a:	18 f4       	brcc	.+6      	; 0x1982 <twi_writeTo+0x3e>
    197c:	31 91       	ld	r19, Z+
    197e:	3d 93       	st	X+, r19
    1980:	f9 cf       	rjmp	.-14     	; 0x1974 <twi_writeTo+0x30>
    1982:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <twi_slarw>
    1986:	30 91 11 04 	lds	r19, 0x0411	; 0x800411 <twi_slarw>
    198a:	88 0f       	add	r24, r24
    198c:	83 2b       	or	r24, r19
    198e:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <twi_slarw>
    1992:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <twi_inRepStart>
    1996:	81 30       	cpi	r24, 0x01	; 1
    1998:	61 f4       	brne	.+24     	; 0x19b2 <twi_writeTo+0x6e>
    199a:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <twi_inRepStart>
    199e:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <twi_slarw>
    19a2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    19a6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    19aa:	83 fd       	sbrc	r24, 3
    19ac:	f8 cf       	rjmp	.-16     	; 0x199e <twi_writeTo+0x5a>
    19ae:	85 ec       	ldi	r24, 0xC5	; 197
    19b0:	01 c0       	rjmp	.+2      	; 0x19b4 <twi_writeTo+0x70>
    19b2:	85 ee       	ldi	r24, 0xE5	; 229
    19b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    19b8:	22 23       	and	r18, r18
    19ba:	21 f0       	breq	.+8      	; 0x19c4 <twi_writeTo+0x80>
    19bc:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <twi_state>
    19c0:	82 30       	cpi	r24, 0x02	; 2
    19c2:	d1 f3       	breq	.-12     	; 0x19b8 <twi_writeTo+0x74>
    19c4:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <twi_error>
    19c8:	8f 3f       	cpi	r24, 0xFF	; 255
    19ca:	79 f0       	breq	.+30     	; 0x19ea <twi_writeTo+0xa6>
    19cc:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <twi_error>
    19d0:	80 32       	cpi	r24, 0x20	; 32
    19d2:	41 f0       	breq	.+16     	; 0x19e4 <twi_writeTo+0xa0>
    19d4:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <twi_error>
    19d8:	80 33       	cpi	r24, 0x30	; 48
    19da:	31 f0       	breq	.+12     	; 0x19e8 <twi_writeTo+0xa4>
    19dc:	94 e0       	ldi	r25, 0x04	; 4
    19de:	05 c0       	rjmp	.+10     	; 0x19ea <twi_writeTo+0xa6>
    19e0:	91 e0       	ldi	r25, 0x01	; 1
    19e2:	03 c0       	rjmp	.+6      	; 0x19ea <twi_writeTo+0xa6>
    19e4:	92 e0       	ldi	r25, 0x02	; 2
    19e6:	01 c0       	rjmp	.+2      	; 0x19ea <twi_writeTo+0xa6>
    19e8:	93 e0       	ldi	r25, 0x03	; 3
    19ea:	89 2f       	mov	r24, r25
    19ec:	0f 91       	pop	r16
    19ee:	08 95       	ret

000019f0 <twi_transmit>:
    19f0:	40 91 c7 03 	lds	r20, 0x03C7	; 0x8003c7 <twi_txBufferLength>
    19f4:	26 2f       	mov	r18, r22
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	24 0f       	add	r18, r20
    19fa:	31 1d       	adc	r19, r1
    19fc:	21 32       	cpi	r18, 0x21	; 33
    19fe:	31 05       	cpc	r19, r1
    1a00:	dc f4       	brge	.+54     	; 0x1a38 <twi_transmit+0x48>
    1a02:	20 91 12 04 	lds	r18, 0x0412	; 0x800412 <twi_state>
    1a06:	24 30       	cpi	r18, 0x04	; 4
    1a08:	c9 f4       	brne	.+50     	; 0x1a3c <twi_transmit+0x4c>
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	86 17       	cp	r24, r22
    1a12:	58 f4       	brcc	.+22     	; 0x1a2a <twi_transmit+0x3a>
    1a14:	30 91 c7 03 	lds	r19, 0x03C7	; 0x8003c7 <twi_txBufferLength>
    1a18:	21 91       	ld	r18, Z+
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	a7 53       	subi	r26, 0x37	; 55
    1a1e:	bc 4f       	sbci	r27, 0xFC	; 252
    1a20:	a3 0f       	add	r26, r19
    1a22:	b1 1d       	adc	r27, r1
    1a24:	2c 93       	st	X, r18
    1a26:	01 96       	adiw	r24, 0x01	; 1
    1a28:	f3 cf       	rjmp	.-26     	; 0x1a10 <twi_transmit+0x20>
    1a2a:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <twi_txBufferLength>
    1a2e:	68 0f       	add	r22, r24
    1a30:	60 93 c7 03 	sts	0x03C7, r22	; 0x8003c7 <twi_txBufferLength>
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	08 95       	ret
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	08 95       	ret
    1a3c:	82 e0       	ldi	r24, 0x02	; 2
    1a3e:	08 95       	ret

00001a40 <twi_attachSlaveRxEvent>:
    1a40:	90 93 0c 04 	sts	0x040C, r25	; 0x80040c <twi_onSlaveReceive+0x1>
    1a44:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <twi_onSlaveReceive>
    1a48:	08 95       	ret

00001a4a <twi_attachSlaveTxEvent>:
    1a4a:	90 93 0e 04 	sts	0x040E, r25	; 0x80040e <twi_onSlaveTransmit+0x1>
    1a4e:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <twi_onSlaveTransmit>
    1a52:	08 95       	ret

00001a54 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1a54:	85 ed       	ldi	r24, 0xD5	; 213
    1a56:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1a5a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1a5e:	84 fd       	sbrc	r24, 4
    1a60:	fc cf       	rjmp	.-8      	; 0x1a5a <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1a62:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <twi_state>
    1a66:	08 95       	ret

00001a68 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1a68:	85 ec       	ldi	r24, 0xC5	; 197
    1a6a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    1a6e:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <twi_state>
    1a72:	08 95       	ret

00001a74 <__vector_36>:
}

ISR(TWI_vect)
{
    1a74:	1f 92       	push	r1
    1a76:	0f 92       	push	r0
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	0f 92       	push	r0
    1a7c:	11 24       	eor	r1, r1
    1a7e:	2f 93       	push	r18
    1a80:	3f 93       	push	r19
    1a82:	4f 93       	push	r20
    1a84:	5f 93       	push	r21
    1a86:	6f 93       	push	r22
    1a88:	7f 93       	push	r23
    1a8a:	8f 93       	push	r24
    1a8c:	9f 93       	push	r25
    1a8e:	af 93       	push	r26
    1a90:	bf 93       	push	r27
    1a92:	ef 93       	push	r30
    1a94:	ff 93       	push	r31
  switch(TW_STATUS){
    1a96:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1a9a:	88 7f       	andi	r24, 0xF8	; 248
    1a9c:	80 36       	cpi	r24, 0x60	; 96
    1a9e:	09 f4       	brne	.+2      	; 0x1aa2 <__vector_36+0x2e>
    1aa0:	9e c0       	rjmp	.+316    	; 0x1bde <__vector_36+0x16a>
    1aa2:	78 f5       	brcc	.+94     	; 0x1b02 <__vector_36+0x8e>
    1aa4:	88 32       	cpi	r24, 0x28	; 40
    1aa6:	09 f4       	brne	.+2      	; 0x1aaa <__vector_36+0x36>
    1aa8:	5d c0       	rjmp	.+186    	; 0x1b64 <__vector_36+0xf0>
    1aaa:	90 f4       	brcc	.+36     	; 0x1ad0 <__vector_36+0x5c>
    1aac:	80 31       	cpi	r24, 0x10	; 16
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <__vector_36+0x3e>
    1ab0:	56 c0       	rjmp	.+172    	; 0x1b5e <__vector_36+0xea>
    1ab2:	38 f4       	brcc	.+14     	; 0x1ac2 <__vector_36+0x4e>
    1ab4:	88 23       	and	r24, r24
    1ab6:	09 f4       	brne	.+2      	; 0x1aba <__vector_36+0x46>
    1ab8:	f5 c0       	rjmp	.+490    	; 0x1ca4 <__vector_36+0x230>
    1aba:	88 30       	cpi	r24, 0x08	; 8
    1abc:	09 f4       	brne	.+2      	; 0x1ac0 <__vector_36+0x4c>
    1abe:	4f c0       	rjmp	.+158    	; 0x1b5e <__vector_36+0xea>
    1ac0:	f5 c0       	rjmp	.+490    	; 0x1cac <__vector_36+0x238>
    1ac2:	88 31       	cpi	r24, 0x18	; 24
    1ac4:	09 f4       	brne	.+2      	; 0x1ac8 <__vector_36+0x54>
    1ac6:	4e c0       	rjmp	.+156    	; 0x1b64 <__vector_36+0xf0>
    1ac8:	80 32       	cpi	r24, 0x20	; 32
    1aca:	09 f4       	brne	.+2      	; 0x1ace <__vector_36+0x5a>
    1acc:	5f c0       	rjmp	.+190    	; 0x1b8c <__vector_36+0x118>
    1ace:	ee c0       	rjmp	.+476    	; 0x1cac <__vector_36+0x238>
    1ad0:	80 34       	cpi	r24, 0x40	; 64
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <__vector_36+0x62>
    1ad4:	6a c0       	rjmp	.+212    	; 0x1baa <__vector_36+0x136>
    1ad6:	58 f4       	brcc	.+22     	; 0x1aee <__vector_36+0x7a>
    1ad8:	80 33       	cpi	r24, 0x30	; 48
    1ada:	09 f4       	brne	.+2      	; 0x1ade <__vector_36+0x6a>
    1adc:	57 c0       	rjmp	.+174    	; 0x1b8c <__vector_36+0x118>
    1ade:	88 33       	cpi	r24, 0x38	; 56
    1ae0:	09 f0       	breq	.+2      	; 0x1ae4 <__vector_36+0x70>
    1ae2:	e4 c0       	rjmp	.+456    	; 0x1cac <__vector_36+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1ae4:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <twi_error>
      twi_releaseBus();
    1ae8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <twi_releaseBus>
      break;
    1aec:	df c0       	rjmp	.+446    	; 0x1cac <__vector_36+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1aee:	80 35       	cpi	r24, 0x50	; 80
    1af0:	09 f4       	brne	.+2      	; 0x1af4 <__vector_36+0x80>
    1af2:	4f c0       	rjmp	.+158    	; 0x1b92 <__vector_36+0x11e>
    1af4:	88 35       	cpi	r24, 0x58	; 88
    1af6:	09 f4       	brne	.+2      	; 0x1afa <__vector_36+0x86>
    1af8:	5d c0       	rjmp	.+186    	; 0x1bb4 <__vector_36+0x140>
    1afa:	88 34       	cpi	r24, 0x48	; 72
    1afc:	09 f0       	breq	.+2      	; 0x1b00 <__vector_36+0x8c>
    1afe:	d6 c0       	rjmp	.+428    	; 0x1cac <__vector_36+0x238>
    1b00:	d3 c0       	rjmp	.+422    	; 0x1ca8 <__vector_36+0x234>
    1b02:	88 39       	cpi	r24, 0x98	; 152
    1b04:	09 f4       	brne	.+2      	; 0x1b08 <__vector_36+0x94>
    1b06:	c4 c0       	rjmp	.+392    	; 0x1c90 <__vector_36+0x21c>
    1b08:	a8 f4       	brcc	.+42     	; 0x1b34 <__vector_36+0xc0>
    1b0a:	88 37       	cpi	r24, 0x78	; 120
    1b0c:	09 f4       	brne	.+2      	; 0x1b10 <__vector_36+0x9c>
    1b0e:	67 c0       	rjmp	.+206    	; 0x1bde <__vector_36+0x16a>
    1b10:	38 f4       	brcc	.+14     	; 0x1b20 <__vector_36+0xac>
    1b12:	88 36       	cpi	r24, 0x68	; 104
    1b14:	09 f4       	brne	.+2      	; 0x1b18 <__vector_36+0xa4>
    1b16:	63 c0       	rjmp	.+198    	; 0x1bde <__vector_36+0x16a>
    1b18:	80 37       	cpi	r24, 0x70	; 112
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <__vector_36+0xaa>
    1b1c:	60 c0       	rjmp	.+192    	; 0x1bde <__vector_36+0x16a>
    1b1e:	c6 c0       	rjmp	.+396    	; 0x1cac <__vector_36+0x238>
    1b20:	88 38       	cpi	r24, 0x88	; 136
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <__vector_36+0xb2>
    1b24:	b5 c0       	rjmp	.+362    	; 0x1c90 <__vector_36+0x21c>
    1b26:	80 39       	cpi	r24, 0x90	; 144
    1b28:	09 f4       	brne	.+2      	; 0x1b2c <__vector_36+0xb8>
    1b2a:	5f c0       	rjmp	.+190    	; 0x1bea <__vector_36+0x176>
    1b2c:	80 38       	cpi	r24, 0x80	; 128
    1b2e:	09 f0       	breq	.+2      	; 0x1b32 <__vector_36+0xbe>
    1b30:	bd c0       	rjmp	.+378    	; 0x1cac <__vector_36+0x238>
    1b32:	5b c0       	rjmp	.+182    	; 0x1bea <__vector_36+0x176>
    1b34:	80 3b       	cpi	r24, 0xB0	; 176
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <__vector_36+0xc6>
    1b38:	83 c0       	rjmp	.+262    	; 0x1c40 <__vector_36+0x1cc>
    1b3a:	38 f4       	brcc	.+14     	; 0x1b4a <__vector_36+0xd6>
    1b3c:	80 3a       	cpi	r24, 0xA0	; 160
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <__vector_36+0xce>
    1b40:	66 c0       	rjmp	.+204    	; 0x1c0e <__vector_36+0x19a>
    1b42:	88 3a       	cpi	r24, 0xA8	; 168
    1b44:	09 f4       	brne	.+2      	; 0x1b48 <__vector_36+0xd4>
    1b46:	7c c0       	rjmp	.+248    	; 0x1c40 <__vector_36+0x1cc>
    1b48:	b1 c0       	rjmp	.+354    	; 0x1cac <__vector_36+0x238>
    1b4a:	80 3c       	cpi	r24, 0xC0	; 192
    1b4c:	09 f4       	brne	.+2      	; 0x1b50 <__vector_36+0xdc>
    1b4e:	a4 c0       	rjmp	.+328    	; 0x1c98 <__vector_36+0x224>
    1b50:	88 3c       	cpi	r24, 0xC8	; 200
    1b52:	09 f4       	brne	.+2      	; 0x1b56 <__vector_36+0xe2>
    1b54:	a1 c0       	rjmp	.+322    	; 0x1c98 <__vector_36+0x224>
    1b56:	88 3b       	cpi	r24, 0xB8	; 184
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <__vector_36+0xe8>
    1b5a:	87 c0       	rjmp	.+270    	; 0x1c6a <__vector_36+0x1f6>
    1b5c:	a7 c0       	rjmp	.+334    	; 0x1cac <__vector_36+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1b5e:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <twi_slarw>
    1b62:	10 c0       	rjmp	.+32     	; 0x1b84 <__vector_36+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1b64:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <twi_masterBufferIndex>
    1b68:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <twi_masterBufferLength>
    1b6c:	98 17       	cp	r25, r24
    1b6e:	70 f5       	brcc	.+92     	; 0x1bcc <__vector_36+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1b70:	e0 91 ea 03 	lds	r30, 0x03EA	; 0x8003ea <twi_masterBufferIndex>
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	8e 0f       	add	r24, r30
    1b78:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <twi_masterBufferIndex>
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	e5 51       	subi	r30, 0x15	; 21
    1b80:	fc 4f       	sbci	r31, 0xFC	; 252
    1b82:	80 81       	ld	r24, Z
    1b84:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1b88:	85 ec       	ldi	r24, 0xC5	; 197
    1b8a:	83 c0       	rjmp	.+262    	; 0x1c92 <__vector_36+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1b8c:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <twi_error>
    1b90:	8b c0       	rjmp	.+278    	; 0x1ca8 <__vector_36+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1b92:	e0 91 ea 03 	lds	r30, 0x03EA	; 0x8003ea <twi_masterBufferIndex>
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	8e 0f       	add	r24, r30
    1b9a:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <twi_masterBufferIndex>
    1b9e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	e5 51       	subi	r30, 0x15	; 21
    1ba6:	fc 4f       	sbci	r31, 0xFC	; 252
    1ba8:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1baa:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <twi_masterBufferIndex>
    1bae:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <twi_masterBufferLength>
    1bb2:	6b c0       	rjmp	.+214    	; 0x1c8a <__vector_36+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1bb4:	e0 91 ea 03 	lds	r30, 0x03EA	; 0x8003ea <twi_masterBufferIndex>
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	8e 0f       	add	r24, r30
    1bbc:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <twi_masterBufferIndex>
    1bc0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	e5 51       	subi	r30, 0x15	; 21
    1bc8:	fc 4f       	sbci	r31, 0xFC	; 252
    1bca:	80 83       	st	Z, r24
	if (twi_sendStop)
    1bcc:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <twi_sendStop>
    1bd0:	81 11       	cpse	r24, r1
    1bd2:	6a c0       	rjmp	.+212    	; 0x1ca8 <__vector_36+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1bda:	84 ea       	ldi	r24, 0xA4	; 164
    1bdc:	5e c0       	rjmp	.+188    	; 0x1c9a <__vector_36+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1bde:	83 e0       	ldi	r24, 0x03	; 3
    1be0:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1be4:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <twi_rxBufferIndex>
    1be8:	cf cf       	rjmp	.-98     	; 0x1b88 <__vector_36+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1bea:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <twi_rxBufferIndex>
    1bee:	80 32       	cpi	r24, 0x20	; 32
    1bf0:	08 f0       	brcs	.+2      	; 0x1bf4 <__vector_36+0x180>
    1bf2:	4e c0       	rjmp	.+156    	; 0x1c90 <__vector_36+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1bf4:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <twi_rxBufferIndex>
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	8e 0f       	add	r24, r30
    1bfc:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <twi_rxBufferIndex>
    1c00:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	e9 55       	subi	r30, 0x59	; 89
    1c08:	fc 4f       	sbci	r31, 0xFC	; 252
    1c0a:	80 83       	st	Z, r24
    1c0c:	bd cf       	rjmp	.-134    	; 0x1b88 <__vector_36+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1c0e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1c12:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <twi_rxBufferIndex>
    1c16:	80 32       	cpi	r24, 0x20	; 32
    1c18:	30 f4       	brcc	.+12     	; 0x1c26 <__vector_36+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1c1a:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <twi_rxBufferIndex>
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	e9 55       	subi	r30, 0x59	; 89
    1c22:	fc 4f       	sbci	r31, 0xFC	; 252
    1c24:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1c26:	60 91 a6 03 	lds	r22, 0x03A6	; 0x8003a6 <twi_rxBufferIndex>
    1c2a:	70 e0       	ldi	r23, 0x00	; 0
    1c2c:	e0 91 0b 04 	lds	r30, 0x040B	; 0x80040b <twi_onSlaveReceive>
    1c30:	f0 91 0c 04 	lds	r31, 0x040C	; 0x80040c <twi_onSlaveReceive+0x1>
    1c34:	87 ea       	ldi	r24, 0xA7	; 167
    1c36:	93 e0       	ldi	r25, 0x03	; 3
    1c38:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1c3a:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <twi_rxBufferIndex>
      break;
    1c3e:	36 c0       	rjmp	.+108    	; 0x1cac <__vector_36+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1c40:	84 e0       	ldi	r24, 0x04	; 4
    1c42:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1c46:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1c4a:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1c4e:	e0 91 0d 04 	lds	r30, 0x040D	; 0x80040d <twi_onSlaveTransmit>
    1c52:	f0 91 0e 04 	lds	r31, 0x040E	; 0x80040e <twi_onSlaveTransmit+0x1>
    1c56:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1c58:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <twi_txBufferLength>
    1c5c:	81 11       	cpse	r24, r1
    1c5e:	05 c0       	rjmp	.+10     	; 0x1c6a <__vector_36+0x1f6>
        twi_txBufferLength = 1;
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1c66:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1c6a:	e0 91 c8 03 	lds	r30, 0x03C8	; 0x8003c8 <twi_txBufferIndex>
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	8e 0f       	add	r24, r30
    1c72:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <twi_txBufferIndex>
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	e7 53       	subi	r30, 0x37	; 55
    1c7a:	fc 4f       	sbci	r31, 0xFC	; 252
    1c7c:	80 81       	ld	r24, Z
    1c7e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1c82:	90 91 c8 03 	lds	r25, 0x03C8	; 0x8003c8 <twi_txBufferIndex>
    1c86:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <twi_txBufferLength>
    1c8a:	98 17       	cp	r25, r24
    1c8c:	08 f4       	brcc	.+2      	; 0x1c90 <__vector_36+0x21c>
    1c8e:	7c cf       	rjmp	.-264    	; 0x1b88 <__vector_36+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1c90:	85 e8       	ldi	r24, 0x85	; 133
    1c92:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1c96:	0a c0       	rjmp	.+20     	; 0x1cac <__vector_36+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1c98:	85 ec       	ldi	r24, 0xC5	; 197
    1c9a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1c9e:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <twi_state>
      break;
    1ca2:	04 c0       	rjmp	.+8      	; 0x1cac <__vector_36+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1ca4:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <twi_error>
      twi_stop();
    1ca8:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <twi_stop>
      break;
  }
}
    1cac:	ff 91       	pop	r31
    1cae:	ef 91       	pop	r30
    1cb0:	bf 91       	pop	r27
    1cb2:	af 91       	pop	r26
    1cb4:	9f 91       	pop	r25
    1cb6:	8f 91       	pop	r24
    1cb8:	7f 91       	pop	r23
    1cba:	6f 91       	pop	r22
    1cbc:	5f 91       	pop	r21
    1cbe:	4f 91       	pop	r20
    1cc0:	3f 91       	pop	r19
    1cc2:	2f 91       	pop	r18
    1cc4:	0f 90       	pop	r0
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	0f 90       	pop	r0
    1cca:	1f 90       	pop	r1
    1ccc:	18 95       	reti

00001cce <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1cce:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <_ZN7TwoWire14rxBufferLengthE>
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	20 91 48 04 	lds	r18, 0x0448	; 0x800448 <_ZN7TwoWire13rxBufferIndexE>
    1cd8:	82 1b       	sub	r24, r18
    1cda:	91 09       	sbc	r25, r1
    1cdc:	08 95       	ret

00001cde <_ZN7TwoWire4readEv>:
    1cde:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <_ZN7TwoWire13rxBufferIndexE>
    1ce2:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <_ZN7TwoWire14rxBufferLengthE>
    1ce6:	98 17       	cp	r25, r24
    1ce8:	50 f4       	brcc	.+20     	; 0x1cfe <_ZN7TwoWire4readEv+0x20>
    1cea:	e9 2f       	mov	r30, r25
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	e7 5b       	subi	r30, 0xB7	; 183
    1cf0:	fb 4f       	sbci	r31, 0xFB	; 251
    1cf2:	20 81       	ld	r18, Z
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	9f 5f       	subi	r25, 0xFF	; 255
    1cf8:	90 93 48 04 	sts	0x0448, r25	; 0x800448 <_ZN7TwoWire13rxBufferIndexE>
    1cfc:	02 c0       	rjmp	.+4      	; 0x1d02 <_ZN7TwoWire4readEv+0x24>
    1cfe:	2f ef       	ldi	r18, 0xFF	; 255
    1d00:	3f ef       	ldi	r19, 0xFF	; 255
    1d02:	c9 01       	movw	r24, r18
    1d04:	08 95       	ret

00001d06 <_ZN7TwoWire4peekEv>:
    1d06:	e0 91 48 04 	lds	r30, 0x0448	; 0x800448 <_ZN7TwoWire13rxBufferIndexE>
    1d0a:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <_ZN7TwoWire14rxBufferLengthE>
    1d0e:	e8 17       	cp	r30, r24
    1d10:	30 f4       	brcc	.+12     	; 0x1d1e <_ZN7TwoWire4peekEv+0x18>
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	e7 5b       	subi	r30, 0xB7	; 183
    1d16:	fb 4f       	sbci	r31, 0xFB	; 251
    1d18:	80 81       	ld	r24, Z
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	08 95       	ret
    1d1e:	8f ef       	ldi	r24, 0xFF	; 255
    1d20:	9f ef       	ldi	r25, 0xFF	; 255
    1d22:	08 95       	ret

00001d24 <_ZN7TwoWire5flushEv>:
    1d24:	08 95       	ret

00001d26 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1d26:	cf 93       	push	r28
    1d28:	df 93       	push	r29
    1d2a:	ec 01       	movw	r28, r24
    1d2c:	e0 91 1f 04 	lds	r30, 0x041F	; 0x80041f <_ZN7TwoWire14user_onReceiveE>
    1d30:	f0 91 20 04 	lds	r31, 0x0420	; 0x800420 <_ZN7TwoWire14user_onReceiveE+0x1>
    1d34:	30 97       	sbiw	r30, 0x00	; 0
    1d36:	f1 f0       	breq	.+60     	; 0x1d74 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1d38:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <_ZN7TwoWire13rxBufferIndexE>
    1d3c:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <_ZN7TwoWire14rxBufferLengthE>
    1d40:	98 17       	cp	r25, r24
    1d42:	c0 f0       	brcs	.+48     	; 0x1d74 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	29 2f       	mov	r18, r25
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	26 17       	cp	r18, r22
    1d4c:	37 07       	cpc	r19, r23
    1d4e:	54 f4       	brge	.+20     	; 0x1d64 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1d50:	de 01       	movw	r26, r28
    1d52:	a2 0f       	add	r26, r18
    1d54:	b3 1f       	adc	r27, r19
    1d56:	4c 91       	ld	r20, X
    1d58:	d9 01       	movw	r26, r18
    1d5a:	a7 5b       	subi	r26, 0xB7	; 183
    1d5c:	bb 4f       	sbci	r27, 0xFB	; 251
    1d5e:	4c 93       	st	X, r20
    1d60:	9f 5f       	subi	r25, 0xFF	; 255
    1d62:	f1 cf       	rjmp	.-30     	; 0x1d46 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1d64:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <_ZN7TwoWire13rxBufferIndexE>
    1d68:	60 93 47 04 	sts	0x0447, r22	; 0x800447 <_ZN7TwoWire14rxBufferLengthE>
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	df 91       	pop	r29
    1d70:	cf 91       	pop	r28
    1d72:	09 94       	ijmp
    1d74:	df 91       	pop	r29
    1d76:	cf 91       	pop	r28
    1d78:	08 95       	ret

00001d7a <_ZN7TwoWire16onRequestServiceEv>:
    1d7a:	e0 91 21 04 	lds	r30, 0x0421	; 0x800421 <_ZN7TwoWire14user_onRequestE>
    1d7e:	f0 91 22 04 	lds	r31, 0x0422	; 0x800422 <_ZN7TwoWire14user_onRequestE+0x1>
    1d82:	30 97       	sbiw	r30, 0x00	; 0
    1d84:	29 f0       	breq	.+10     	; 0x1d90 <_ZN7TwoWire16onRequestServiceEv+0x16>
    1d86:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <_ZN7TwoWire13txBufferIndexE>
    1d8a:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <_ZN7TwoWire14txBufferLengthE>
    1d8e:	09 94       	ijmp
    1d90:	08 95       	ret

00001d92 <_ZN7TwoWire5writeEPKhj>:
    1d92:	cf 92       	push	r12
    1d94:	df 92       	push	r13
    1d96:	ef 92       	push	r14
    1d98:	ff 92       	push	r15
    1d9a:	0f 93       	push	r16
    1d9c:	1f 93       	push	r17
    1d9e:	cf 93       	push	r28
    1da0:	df 93       	push	r29
    1da2:	7c 01       	movw	r14, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	8a 01       	movw	r16, r20
    1da8:	20 91 23 04 	lds	r18, 0x0423	; 0x800423 <_ZN7TwoWire12transmittingE>
    1dac:	22 23       	and	r18, r18
    1dae:	89 f0       	breq	.+34     	; 0x1dd2 <_ZN7TwoWire5writeEPKhj+0x40>
    1db0:	eb 01       	movw	r28, r22
    1db2:	6b 01       	movw	r12, r22
    1db4:	c4 0e       	add	r12, r20
    1db6:	d5 1e       	adc	r13, r21
    1db8:	cc 15       	cp	r28, r12
    1dba:	dd 05       	cpc	r29, r13
    1dbc:	69 f0       	breq	.+26     	; 0x1dd8 <_ZN7TwoWire5writeEPKhj+0x46>
    1dbe:	69 91       	ld	r22, Y+
    1dc0:	d7 01       	movw	r26, r14
    1dc2:	ed 91       	ld	r30, X+
    1dc4:	fc 91       	ld	r31, X
    1dc6:	01 90       	ld	r0, Z+
    1dc8:	f0 81       	ld	r31, Z
    1dca:	e0 2d       	mov	r30, r0
    1dcc:	c7 01       	movw	r24, r14
    1dce:	09 95       	icall
    1dd0:	f3 cf       	rjmp	.-26     	; 0x1db8 <_ZN7TwoWire5writeEPKhj+0x26>
    1dd2:	64 2f       	mov	r22, r20
    1dd4:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <twi_transmit>
    1dd8:	c8 01       	movw	r24, r16
    1dda:	df 91       	pop	r29
    1ddc:	cf 91       	pop	r28
    1dde:	1f 91       	pop	r17
    1de0:	0f 91       	pop	r16
    1de2:	ff 90       	pop	r15
    1de4:	ef 90       	pop	r14
    1de6:	df 90       	pop	r13
    1de8:	cf 90       	pop	r12
    1dea:	08 95       	ret

00001dec <_ZN7TwoWire5writeEh>:
    1dec:	cf 93       	push	r28
    1dee:	df 93       	push	r29
    1df0:	1f 92       	push	r1
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    1df6:	69 83       	std	Y+1, r22	; 0x01
    1df8:	20 91 23 04 	lds	r18, 0x0423	; 0x800423 <_ZN7TwoWire12transmittingE>
    1dfc:	22 23       	and	r18, r18
    1dfe:	d1 f0       	breq	.+52     	; 0x1e34 <_ZN7TwoWire5writeEh+0x48>
    1e00:	20 91 24 04 	lds	r18, 0x0424	; 0x800424 <_ZN7TwoWire14txBufferLengthE>
    1e04:	20 32       	cpi	r18, 0x20	; 32
    1e06:	40 f0       	brcs	.+16     	; 0x1e18 <_ZN7TwoWire5writeEh+0x2c>
    1e08:	21 e0       	ldi	r18, 0x01	; 1
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	33 83       	std	Z+3, r19	; 0x03
    1e10:	22 83       	std	Z+2, r18	; 0x02
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	15 c0       	rjmp	.+42     	; 0x1e42 <_ZN7TwoWire5writeEh+0x56>
    1e18:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <_ZN7TwoWire13txBufferIndexE>
    1e1c:	e8 2f       	mov	r30, r24
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	ea 5d       	subi	r30, 0xDA	; 218
    1e22:	fb 4f       	sbci	r31, 0xFB	; 251
    1e24:	99 81       	ldd	r25, Y+1	; 0x01
    1e26:	90 83       	st	Z, r25
    1e28:	8f 5f       	subi	r24, 0xFF	; 255
    1e2a:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <_ZN7TwoWire13txBufferIndexE>
    1e2e:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <_ZN7TwoWire14txBufferLengthE>
    1e32:	05 c0       	rjmp	.+10     	; 0x1e3e <_ZN7TwoWire5writeEh+0x52>
    1e34:	61 e0       	ldi	r22, 0x01	; 1
    1e36:	ce 01       	movw	r24, r28
    1e38:	01 96       	adiw	r24, 0x01	; 1
    1e3a:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <twi_transmit>
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	0f 90       	pop	r0
    1e44:	df 91       	pop	r29
    1e46:	cf 91       	pop	r28
    1e48:	08 95       	ret

00001e4a <_ZN7TwoWireC1Ev>:
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	13 82       	std	Z+3, r1	; 0x03
    1e4e:	12 82       	std	Z+2, r1	; 0x02
    1e50:	88 ee       	ldi	r24, 0xE8	; 232
    1e52:	93 e0       	ldi	r25, 0x03	; 3
    1e54:	a0 e0       	ldi	r26, 0x00	; 0
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	84 83       	std	Z+4, r24	; 0x04
    1e5a:	95 83       	std	Z+5, r25	; 0x05
    1e5c:	a6 83       	std	Z+6, r26	; 0x06
    1e5e:	b7 83       	std	Z+7, r27	; 0x07
    1e60:	86 e5       	ldi	r24, 0x56	; 86
    1e62:	92 e0       	ldi	r25, 0x02	; 2
    1e64:	91 83       	std	Z+1, r25	; 0x01
    1e66:	80 83       	st	Z, r24
    1e68:	08 95       	ret

00001e6a <_ZN7TwoWire5beginEv>:
    1e6a:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <_ZN7TwoWire13rxBufferIndexE>
    1e6e:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <_ZN7TwoWire14rxBufferLengthE>
    1e72:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <_ZN7TwoWire13txBufferIndexE>
    1e76:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <_ZN7TwoWire14txBufferLengthE>
    1e7a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <twi_init>
    1e7e:	8d eb       	ldi	r24, 0xBD	; 189
    1e80:	9e e0       	ldi	r25, 0x0E	; 14
    1e82:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <twi_attachSlaveTxEvent>
    1e86:	83 e9       	ldi	r24, 0x93	; 147
    1e88:	9e e0       	ldi	r25, 0x0E	; 14
    1e8a:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <twi_attachSlaveRxEvent>

00001e8e <_ZN7TwoWire17beginTransmissionEh>:
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <_ZN7TwoWire12transmittingE>
    1e94:	60 93 46 04 	sts	0x0446, r22	; 0x800446 <_ZN7TwoWire9txAddressE>
    1e98:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <_ZN7TwoWire13txBufferIndexE>
    1e9c:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <_ZN7TwoWire14txBufferLengthE>
    1ea0:	08 95       	ret

00001ea2 <_ZN7TwoWire15endTransmissionEh>:
    1ea2:	0f 93       	push	r16
    1ea4:	06 2f       	mov	r16, r22
    1ea6:	21 e0       	ldi	r18, 0x01	; 1
    1ea8:	40 91 24 04 	lds	r20, 0x0424	; 0x800424 <_ZN7TwoWire14txBufferLengthE>
    1eac:	66 e2       	ldi	r22, 0x26	; 38
    1eae:	74 e0       	ldi	r23, 0x04	; 4
    1eb0:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <_ZN7TwoWire9txAddressE>
    1eb4:	0e 94 a2 0c 	call	0x1944	; 0x1944 <twi_writeTo>
    1eb8:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <_ZN7TwoWire13txBufferIndexE>
    1ebc:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <_ZN7TwoWire14txBufferLengthE>
    1ec0:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <_ZN7TwoWire12transmittingE>
    1ec4:	0f 91       	pop	r16
    1ec6:	08 95       	ret

00001ec8 <_ZN7TwoWire11requestFromEhhmhh>:
    1ec8:	4f 92       	push	r4
    1eca:	5f 92       	push	r5
    1ecc:	6f 92       	push	r6
    1ece:	7f 92       	push	r7
    1ed0:	af 92       	push	r10
    1ed2:	bf 92       	push	r11
    1ed4:	cf 92       	push	r12
    1ed6:	ef 92       	push	r14
    1ed8:	ff 92       	push	r15
    1eda:	0f 93       	push	r16
    1edc:	1f 93       	push	r17
    1ede:	cf 93       	push	r28
    1ee0:	df 93       	push	r29
    1ee2:	5c 01       	movw	r10, r24
    1ee4:	f6 2e       	mov	r15, r22
    1ee6:	d4 2f       	mov	r29, r20
    1ee8:	28 01       	movw	r4, r16
    1eea:	39 01       	movw	r6, r18
    1eec:	ee 20       	and	r14, r14
    1eee:	21 f1       	breq	.+72     	; 0x1f38 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    1ef0:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZN7TwoWire17beginTransmissionEh>
    1ef4:	ce 2d       	mov	r28, r14
    1ef6:	c4 30       	cpi	r28, 0x04	; 4
    1ef8:	08 f0       	brcs	.+2      	; 0x1efc <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1efa:	c3 e0       	ldi	r28, 0x03	; 3
    1efc:	c1 50       	subi	r28, 0x01	; 1
    1efe:	c0 f0       	brcs	.+48     	; 0x1f30 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    1f00:	28 e0       	ldi	r18, 0x08	; 8
    1f02:	c2 9f       	mul	r28, r18
    1f04:	c0 01       	movw	r24, r0
    1f06:	11 24       	eor	r1, r1
    1f08:	a3 01       	movw	r20, r6
    1f0a:	92 01       	movw	r18, r4
    1f0c:	04 c0       	rjmp	.+8      	; 0x1f16 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    1f0e:	56 95       	lsr	r21
    1f10:	47 95       	ror	r20
    1f12:	37 95       	ror	r19
    1f14:	27 95       	ror	r18
    1f16:	8a 95       	dec	r24
    1f18:	d2 f7       	brpl	.-12     	; 0x1f0e <_ZN7TwoWire11requestFromEhhmhh+0x46>
    1f1a:	ca 01       	movw	r24, r20
    1f1c:	b9 01       	movw	r22, r18
    1f1e:	d5 01       	movw	r26, r10
    1f20:	ed 91       	ld	r30, X+
    1f22:	fc 91       	ld	r31, X
    1f24:	01 90       	ld	r0, Z+
    1f26:	f0 81       	ld	r31, Z
    1f28:	e0 2d       	mov	r30, r0
    1f2a:	c5 01       	movw	r24, r10
    1f2c:	09 95       	icall
    1f2e:	e6 cf       	rjmp	.-52     	; 0x1efc <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1f30:	60 e0       	ldi	r22, 0x00	; 0
    1f32:	c5 01       	movw	r24, r10
    1f34:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <_ZN7TwoWire15endTransmissionEh>
    1f38:	4d 2f       	mov	r20, r29
    1f3a:	d1 32       	cpi	r29, 0x21	; 33
    1f3c:	08 f0       	brcs	.+2      	; 0x1f40 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    1f3e:	40 e2       	ldi	r20, 0x20	; 32
    1f40:	2c 2d       	mov	r18, r12
    1f42:	69 e4       	ldi	r22, 0x49	; 73
    1f44:	74 e0       	ldi	r23, 0x04	; 4
    1f46:	8f 2d       	mov	r24, r15
    1f48:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <twi_readFrom>
    1f4c:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <_ZN7TwoWire13rxBufferIndexE>
    1f50:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <_ZN7TwoWire14rxBufferLengthE>
    1f54:	df 91       	pop	r29
    1f56:	cf 91       	pop	r28
    1f58:	1f 91       	pop	r17
    1f5a:	0f 91       	pop	r16
    1f5c:	ff 90       	pop	r15
    1f5e:	ef 90       	pop	r14
    1f60:	cf 90       	pop	r12
    1f62:	bf 90       	pop	r11
    1f64:	af 90       	pop	r10
    1f66:	7f 90       	pop	r7
    1f68:	6f 90       	pop	r6
    1f6a:	5f 90       	pop	r5
    1f6c:	4f 90       	pop	r4
    1f6e:	08 95       	ret

00001f70 <_ZN7TwoWire11requestFromEhhh>:
    1f70:	cf 92       	push	r12
    1f72:	ef 92       	push	r14
    1f74:	0f 93       	push	r16
    1f76:	1f 93       	push	r17
    1f78:	c2 2e       	mov	r12, r18
    1f7a:	e1 2c       	mov	r14, r1
    1f7c:	00 e0       	ldi	r16, 0x00	; 0
    1f7e:	10 e0       	ldi	r17, 0x00	; 0
    1f80:	98 01       	movw	r18, r16
    1f82:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN7TwoWire11requestFromEhhmhh>
    1f86:	1f 91       	pop	r17
    1f88:	0f 91       	pop	r16
    1f8a:	ef 90       	pop	r14
    1f8c:	cf 90       	pop	r12
    1f8e:	08 95       	ret

00001f90 <_ZN7TwoWire11requestFromEii>:
    1f90:	21 e0       	ldi	r18, 0x01	; 1
    1f92:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <_ZN7TwoWire11requestFromEhhh>

00001f96 <_ZN7TwoWire15endTransmissionEv>:
    1f96:	61 e0       	ldi	r22, 0x01	; 1
    1f98:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <_ZN7TwoWire15endTransmissionEh>

00001f9c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1f9c:	83 e1       	ldi	r24, 0x13	; 19
    1f9e:	94 e0       	ldi	r25, 0x04	; 4
    1fa0:	0c 94 25 0f 	jmp	0x1e4a	; 0x1e4a <_ZN7TwoWireC1Ev>

00001fa4 <__divsf3>:
    1fa4:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__divsf3x>
    1fa8:	0c 94 98 10 	jmp	0x2130	; 0x2130 <__fp_round>
    1fac:	0e 94 91 10 	call	0x2122	; 0x2122 <__fp_pscB>
    1fb0:	58 f0       	brcs	.+22     	; 0x1fc8 <__divsf3+0x24>
    1fb2:	0e 94 8a 10 	call	0x2114	; 0x2114 <__fp_pscA>
    1fb6:	40 f0       	brcs	.+16     	; 0x1fc8 <__divsf3+0x24>
    1fb8:	29 f4       	brne	.+10     	; 0x1fc4 <__divsf3+0x20>
    1fba:	5f 3f       	cpi	r21, 0xFF	; 255
    1fbc:	29 f0       	breq	.+10     	; 0x1fc8 <__divsf3+0x24>
    1fbe:	0c 94 81 10 	jmp	0x2102	; 0x2102 <__fp_inf>
    1fc2:	51 11       	cpse	r21, r1
    1fc4:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <__fp_szero>
    1fc8:	0c 94 87 10 	jmp	0x210e	; 0x210e <__fp_nan>

00001fcc <__divsf3x>:
    1fcc:	0e 94 a9 10 	call	0x2152	; 0x2152 <__fp_split3>
    1fd0:	68 f3       	brcs	.-38     	; 0x1fac <__divsf3+0x8>

00001fd2 <__divsf3_pse>:
    1fd2:	99 23       	and	r25, r25
    1fd4:	b1 f3       	breq	.-20     	; 0x1fc2 <__divsf3+0x1e>
    1fd6:	55 23       	and	r21, r21
    1fd8:	91 f3       	breq	.-28     	; 0x1fbe <__divsf3+0x1a>
    1fda:	95 1b       	sub	r25, r21
    1fdc:	55 0b       	sbc	r21, r21
    1fde:	bb 27       	eor	r27, r27
    1fe0:	aa 27       	eor	r26, r26
    1fe2:	62 17       	cp	r22, r18
    1fe4:	73 07       	cpc	r23, r19
    1fe6:	84 07       	cpc	r24, r20
    1fe8:	38 f0       	brcs	.+14     	; 0x1ff8 <__divsf3_pse+0x26>
    1fea:	9f 5f       	subi	r25, 0xFF	; 255
    1fec:	5f 4f       	sbci	r21, 0xFF	; 255
    1fee:	22 0f       	add	r18, r18
    1ff0:	33 1f       	adc	r19, r19
    1ff2:	44 1f       	adc	r20, r20
    1ff4:	aa 1f       	adc	r26, r26
    1ff6:	a9 f3       	breq	.-22     	; 0x1fe2 <__divsf3_pse+0x10>
    1ff8:	35 d0       	rcall	.+106    	; 0x2064 <__divsf3_pse+0x92>
    1ffa:	0e 2e       	mov	r0, r30
    1ffc:	3a f0       	brmi	.+14     	; 0x200c <__divsf3_pse+0x3a>
    1ffe:	e0 e8       	ldi	r30, 0x80	; 128
    2000:	32 d0       	rcall	.+100    	; 0x2066 <__divsf3_pse+0x94>
    2002:	91 50       	subi	r25, 0x01	; 1
    2004:	50 40       	sbci	r21, 0x00	; 0
    2006:	e6 95       	lsr	r30
    2008:	00 1c       	adc	r0, r0
    200a:	ca f7       	brpl	.-14     	; 0x1ffe <__divsf3_pse+0x2c>
    200c:	2b d0       	rcall	.+86     	; 0x2064 <__divsf3_pse+0x92>
    200e:	fe 2f       	mov	r31, r30
    2010:	29 d0       	rcall	.+82     	; 0x2064 <__divsf3_pse+0x92>
    2012:	66 0f       	add	r22, r22
    2014:	77 1f       	adc	r23, r23
    2016:	88 1f       	adc	r24, r24
    2018:	bb 1f       	adc	r27, r27
    201a:	26 17       	cp	r18, r22
    201c:	37 07       	cpc	r19, r23
    201e:	48 07       	cpc	r20, r24
    2020:	ab 07       	cpc	r26, r27
    2022:	b0 e8       	ldi	r27, 0x80	; 128
    2024:	09 f0       	breq	.+2      	; 0x2028 <__divsf3_pse+0x56>
    2026:	bb 0b       	sbc	r27, r27
    2028:	80 2d       	mov	r24, r0
    202a:	bf 01       	movw	r22, r30
    202c:	ff 27       	eor	r31, r31
    202e:	93 58       	subi	r25, 0x83	; 131
    2030:	5f 4f       	sbci	r21, 0xFF	; 255
    2032:	3a f0       	brmi	.+14     	; 0x2042 <__divsf3_pse+0x70>
    2034:	9e 3f       	cpi	r25, 0xFE	; 254
    2036:	51 05       	cpc	r21, r1
    2038:	78 f0       	brcs	.+30     	; 0x2058 <__divsf3_pse+0x86>
    203a:	0c 94 81 10 	jmp	0x2102	; 0x2102 <__fp_inf>
    203e:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <__fp_szero>
    2042:	5f 3f       	cpi	r21, 0xFF	; 255
    2044:	e4 f3       	brlt	.-8      	; 0x203e <__divsf3_pse+0x6c>
    2046:	98 3e       	cpi	r25, 0xE8	; 232
    2048:	d4 f3       	brlt	.-12     	; 0x203e <__divsf3_pse+0x6c>
    204a:	86 95       	lsr	r24
    204c:	77 95       	ror	r23
    204e:	67 95       	ror	r22
    2050:	b7 95       	ror	r27
    2052:	f7 95       	ror	r31
    2054:	9f 5f       	subi	r25, 0xFF	; 255
    2056:	c9 f7       	brne	.-14     	; 0x204a <__divsf3_pse+0x78>
    2058:	88 0f       	add	r24, r24
    205a:	91 1d       	adc	r25, r1
    205c:	96 95       	lsr	r25
    205e:	87 95       	ror	r24
    2060:	97 f9       	bld	r25, 7
    2062:	08 95       	ret
    2064:	e1 e0       	ldi	r30, 0x01	; 1
    2066:	66 0f       	add	r22, r22
    2068:	77 1f       	adc	r23, r23
    206a:	88 1f       	adc	r24, r24
    206c:	bb 1f       	adc	r27, r27
    206e:	62 17       	cp	r22, r18
    2070:	73 07       	cpc	r23, r19
    2072:	84 07       	cpc	r24, r20
    2074:	ba 07       	cpc	r27, r26
    2076:	20 f0       	brcs	.+8      	; 0x2080 <__divsf3_pse+0xae>
    2078:	62 1b       	sub	r22, r18
    207a:	73 0b       	sbc	r23, r19
    207c:	84 0b       	sbc	r24, r20
    207e:	ba 0b       	sbc	r27, r26
    2080:	ee 1f       	adc	r30, r30
    2082:	88 f7       	brcc	.-30     	; 0x2066 <__divsf3_pse+0x94>
    2084:	e0 95       	com	r30
    2086:	08 95       	ret

00002088 <__floatunsisf>:
    2088:	e8 94       	clt
    208a:	09 c0       	rjmp	.+18     	; 0x209e <__floatsisf+0x12>

0000208c <__floatsisf>:
    208c:	97 fb       	bst	r25, 7
    208e:	3e f4       	brtc	.+14     	; 0x209e <__floatsisf+0x12>
    2090:	90 95       	com	r25
    2092:	80 95       	com	r24
    2094:	70 95       	com	r23
    2096:	61 95       	neg	r22
    2098:	7f 4f       	sbci	r23, 0xFF	; 255
    209a:	8f 4f       	sbci	r24, 0xFF	; 255
    209c:	9f 4f       	sbci	r25, 0xFF	; 255
    209e:	99 23       	and	r25, r25
    20a0:	a9 f0       	breq	.+42     	; 0x20cc <__floatsisf+0x40>
    20a2:	f9 2f       	mov	r31, r25
    20a4:	96 e9       	ldi	r25, 0x96	; 150
    20a6:	bb 27       	eor	r27, r27
    20a8:	93 95       	inc	r25
    20aa:	f6 95       	lsr	r31
    20ac:	87 95       	ror	r24
    20ae:	77 95       	ror	r23
    20b0:	67 95       	ror	r22
    20b2:	b7 95       	ror	r27
    20b4:	f1 11       	cpse	r31, r1
    20b6:	f8 cf       	rjmp	.-16     	; 0x20a8 <__floatsisf+0x1c>
    20b8:	fa f4       	brpl	.+62     	; 0x20f8 <__floatsisf+0x6c>
    20ba:	bb 0f       	add	r27, r27
    20bc:	11 f4       	brne	.+4      	; 0x20c2 <__floatsisf+0x36>
    20be:	60 ff       	sbrs	r22, 0
    20c0:	1b c0       	rjmp	.+54     	; 0x20f8 <__floatsisf+0x6c>
    20c2:	6f 5f       	subi	r22, 0xFF	; 255
    20c4:	7f 4f       	sbci	r23, 0xFF	; 255
    20c6:	8f 4f       	sbci	r24, 0xFF	; 255
    20c8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ca:	16 c0       	rjmp	.+44     	; 0x20f8 <__floatsisf+0x6c>
    20cc:	88 23       	and	r24, r24
    20ce:	11 f0       	breq	.+4      	; 0x20d4 <__floatsisf+0x48>
    20d0:	96 e9       	ldi	r25, 0x96	; 150
    20d2:	11 c0       	rjmp	.+34     	; 0x20f6 <__floatsisf+0x6a>
    20d4:	77 23       	and	r23, r23
    20d6:	21 f0       	breq	.+8      	; 0x20e0 <__floatsisf+0x54>
    20d8:	9e e8       	ldi	r25, 0x8E	; 142
    20da:	87 2f       	mov	r24, r23
    20dc:	76 2f       	mov	r23, r22
    20de:	05 c0       	rjmp	.+10     	; 0x20ea <__floatsisf+0x5e>
    20e0:	66 23       	and	r22, r22
    20e2:	71 f0       	breq	.+28     	; 0x2100 <__floatsisf+0x74>
    20e4:	96 e8       	ldi	r25, 0x86	; 134
    20e6:	86 2f       	mov	r24, r22
    20e8:	70 e0       	ldi	r23, 0x00	; 0
    20ea:	60 e0       	ldi	r22, 0x00	; 0
    20ec:	2a f0       	brmi	.+10     	; 0x20f8 <__floatsisf+0x6c>
    20ee:	9a 95       	dec	r25
    20f0:	66 0f       	add	r22, r22
    20f2:	77 1f       	adc	r23, r23
    20f4:	88 1f       	adc	r24, r24
    20f6:	da f7       	brpl	.-10     	; 0x20ee <__floatsisf+0x62>
    20f8:	88 0f       	add	r24, r24
    20fa:	96 95       	lsr	r25
    20fc:	87 95       	ror	r24
    20fe:	97 f9       	bld	r25, 7
    2100:	08 95       	ret

00002102 <__fp_inf>:
    2102:	97 f9       	bld	r25, 7
    2104:	9f 67       	ori	r25, 0x7F	; 127
    2106:	80 e8       	ldi	r24, 0x80	; 128
    2108:	70 e0       	ldi	r23, 0x00	; 0
    210a:	60 e0       	ldi	r22, 0x00	; 0
    210c:	08 95       	ret

0000210e <__fp_nan>:
    210e:	9f ef       	ldi	r25, 0xFF	; 255
    2110:	80 ec       	ldi	r24, 0xC0	; 192
    2112:	08 95       	ret

00002114 <__fp_pscA>:
    2114:	00 24       	eor	r0, r0
    2116:	0a 94       	dec	r0
    2118:	16 16       	cp	r1, r22
    211a:	17 06       	cpc	r1, r23
    211c:	18 06       	cpc	r1, r24
    211e:	09 06       	cpc	r0, r25
    2120:	08 95       	ret

00002122 <__fp_pscB>:
    2122:	00 24       	eor	r0, r0
    2124:	0a 94       	dec	r0
    2126:	12 16       	cp	r1, r18
    2128:	13 06       	cpc	r1, r19
    212a:	14 06       	cpc	r1, r20
    212c:	05 06       	cpc	r0, r21
    212e:	08 95       	ret

00002130 <__fp_round>:
    2130:	09 2e       	mov	r0, r25
    2132:	03 94       	inc	r0
    2134:	00 0c       	add	r0, r0
    2136:	11 f4       	brne	.+4      	; 0x213c <__fp_round+0xc>
    2138:	88 23       	and	r24, r24
    213a:	52 f0       	brmi	.+20     	; 0x2150 <__fp_round+0x20>
    213c:	bb 0f       	add	r27, r27
    213e:	40 f4       	brcc	.+16     	; 0x2150 <__fp_round+0x20>
    2140:	bf 2b       	or	r27, r31
    2142:	11 f4       	brne	.+4      	; 0x2148 <__fp_round+0x18>
    2144:	60 ff       	sbrs	r22, 0
    2146:	04 c0       	rjmp	.+8      	; 0x2150 <__fp_round+0x20>
    2148:	6f 5f       	subi	r22, 0xFF	; 255
    214a:	7f 4f       	sbci	r23, 0xFF	; 255
    214c:	8f 4f       	sbci	r24, 0xFF	; 255
    214e:	9f 4f       	sbci	r25, 0xFF	; 255
    2150:	08 95       	ret

00002152 <__fp_split3>:
    2152:	57 fd       	sbrc	r21, 7
    2154:	90 58       	subi	r25, 0x80	; 128
    2156:	44 0f       	add	r20, r20
    2158:	55 1f       	adc	r21, r21
    215a:	59 f0       	breq	.+22     	; 0x2172 <__fp_splitA+0x10>
    215c:	5f 3f       	cpi	r21, 0xFF	; 255
    215e:	71 f0       	breq	.+28     	; 0x217c <__fp_splitA+0x1a>
    2160:	47 95       	ror	r20

00002162 <__fp_splitA>:
    2162:	88 0f       	add	r24, r24
    2164:	97 fb       	bst	r25, 7
    2166:	99 1f       	adc	r25, r25
    2168:	61 f0       	breq	.+24     	; 0x2182 <__fp_splitA+0x20>
    216a:	9f 3f       	cpi	r25, 0xFF	; 255
    216c:	79 f0       	breq	.+30     	; 0x218c <__fp_splitA+0x2a>
    216e:	87 95       	ror	r24
    2170:	08 95       	ret
    2172:	12 16       	cp	r1, r18
    2174:	13 06       	cpc	r1, r19
    2176:	14 06       	cpc	r1, r20
    2178:	55 1f       	adc	r21, r21
    217a:	f2 cf       	rjmp	.-28     	; 0x2160 <__fp_split3+0xe>
    217c:	46 95       	lsr	r20
    217e:	f1 df       	rcall	.-30     	; 0x2162 <__fp_splitA>
    2180:	08 c0       	rjmp	.+16     	; 0x2192 <__fp_splitA+0x30>
    2182:	16 16       	cp	r1, r22
    2184:	17 06       	cpc	r1, r23
    2186:	18 06       	cpc	r1, r24
    2188:	99 1f       	adc	r25, r25
    218a:	f1 cf       	rjmp	.-30     	; 0x216e <__fp_splitA+0xc>
    218c:	86 95       	lsr	r24
    218e:	71 05       	cpc	r23, r1
    2190:	61 05       	cpc	r22, r1
    2192:	08 94       	sec
    2194:	08 95       	ret

00002196 <__fp_zero>:
    2196:	e8 94       	clt

00002198 <__fp_szero>:
    2198:	bb 27       	eor	r27, r27
    219a:	66 27       	eor	r22, r22
    219c:	77 27       	eor	r23, r23
    219e:	cb 01       	movw	r24, r22
    21a0:	97 f9       	bld	r25, 7
    21a2:	08 95       	ret

000021a4 <__gesf2>:
    21a4:	0e 94 44 11 	call	0x2288	; 0x2288 <__fp_cmp>
    21a8:	08 f4       	brcc	.+2      	; 0x21ac <__gesf2+0x8>
    21aa:	8f ef       	ldi	r24, 0xFF	; 255
    21ac:	08 95       	ret

000021ae <__mulsf3>:
    21ae:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__mulsf3x>
    21b2:	0c 94 98 10 	jmp	0x2130	; 0x2130 <__fp_round>
    21b6:	0e 94 8a 10 	call	0x2114	; 0x2114 <__fp_pscA>
    21ba:	38 f0       	brcs	.+14     	; 0x21ca <__mulsf3+0x1c>
    21bc:	0e 94 91 10 	call	0x2122	; 0x2122 <__fp_pscB>
    21c0:	20 f0       	brcs	.+8      	; 0x21ca <__mulsf3+0x1c>
    21c2:	95 23       	and	r25, r21
    21c4:	11 f0       	breq	.+4      	; 0x21ca <__mulsf3+0x1c>
    21c6:	0c 94 81 10 	jmp	0x2102	; 0x2102 <__fp_inf>
    21ca:	0c 94 87 10 	jmp	0x210e	; 0x210e <__fp_nan>
    21ce:	11 24       	eor	r1, r1
    21d0:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <__fp_szero>

000021d4 <__mulsf3x>:
    21d4:	0e 94 a9 10 	call	0x2152	; 0x2152 <__fp_split3>
    21d8:	70 f3       	brcs	.-36     	; 0x21b6 <__mulsf3+0x8>

000021da <__mulsf3_pse>:
    21da:	95 9f       	mul	r25, r21
    21dc:	c1 f3       	breq	.-16     	; 0x21ce <__mulsf3+0x20>
    21de:	95 0f       	add	r25, r21
    21e0:	50 e0       	ldi	r21, 0x00	; 0
    21e2:	55 1f       	adc	r21, r21
    21e4:	62 9f       	mul	r22, r18
    21e6:	f0 01       	movw	r30, r0
    21e8:	72 9f       	mul	r23, r18
    21ea:	bb 27       	eor	r27, r27
    21ec:	f0 0d       	add	r31, r0
    21ee:	b1 1d       	adc	r27, r1
    21f0:	63 9f       	mul	r22, r19
    21f2:	aa 27       	eor	r26, r26
    21f4:	f0 0d       	add	r31, r0
    21f6:	b1 1d       	adc	r27, r1
    21f8:	aa 1f       	adc	r26, r26
    21fa:	64 9f       	mul	r22, r20
    21fc:	66 27       	eor	r22, r22
    21fe:	b0 0d       	add	r27, r0
    2200:	a1 1d       	adc	r26, r1
    2202:	66 1f       	adc	r22, r22
    2204:	82 9f       	mul	r24, r18
    2206:	22 27       	eor	r18, r18
    2208:	b0 0d       	add	r27, r0
    220a:	a1 1d       	adc	r26, r1
    220c:	62 1f       	adc	r22, r18
    220e:	73 9f       	mul	r23, r19
    2210:	b0 0d       	add	r27, r0
    2212:	a1 1d       	adc	r26, r1
    2214:	62 1f       	adc	r22, r18
    2216:	83 9f       	mul	r24, r19
    2218:	a0 0d       	add	r26, r0
    221a:	61 1d       	adc	r22, r1
    221c:	22 1f       	adc	r18, r18
    221e:	74 9f       	mul	r23, r20
    2220:	33 27       	eor	r19, r19
    2222:	a0 0d       	add	r26, r0
    2224:	61 1d       	adc	r22, r1
    2226:	23 1f       	adc	r18, r19
    2228:	84 9f       	mul	r24, r20
    222a:	60 0d       	add	r22, r0
    222c:	21 1d       	adc	r18, r1
    222e:	82 2f       	mov	r24, r18
    2230:	76 2f       	mov	r23, r22
    2232:	6a 2f       	mov	r22, r26
    2234:	11 24       	eor	r1, r1
    2236:	9f 57       	subi	r25, 0x7F	; 127
    2238:	50 40       	sbci	r21, 0x00	; 0
    223a:	9a f0       	brmi	.+38     	; 0x2262 <__mulsf3_pse+0x88>
    223c:	f1 f0       	breq	.+60     	; 0x227a <__mulsf3_pse+0xa0>
    223e:	88 23       	and	r24, r24
    2240:	4a f0       	brmi	.+18     	; 0x2254 <__mulsf3_pse+0x7a>
    2242:	ee 0f       	add	r30, r30
    2244:	ff 1f       	adc	r31, r31
    2246:	bb 1f       	adc	r27, r27
    2248:	66 1f       	adc	r22, r22
    224a:	77 1f       	adc	r23, r23
    224c:	88 1f       	adc	r24, r24
    224e:	91 50       	subi	r25, 0x01	; 1
    2250:	50 40       	sbci	r21, 0x00	; 0
    2252:	a9 f7       	brne	.-22     	; 0x223e <__mulsf3_pse+0x64>
    2254:	9e 3f       	cpi	r25, 0xFE	; 254
    2256:	51 05       	cpc	r21, r1
    2258:	80 f0       	brcs	.+32     	; 0x227a <__mulsf3_pse+0xa0>
    225a:	0c 94 81 10 	jmp	0x2102	; 0x2102 <__fp_inf>
    225e:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <__fp_szero>
    2262:	5f 3f       	cpi	r21, 0xFF	; 255
    2264:	e4 f3       	brlt	.-8      	; 0x225e <__mulsf3_pse+0x84>
    2266:	98 3e       	cpi	r25, 0xE8	; 232
    2268:	d4 f3       	brlt	.-12     	; 0x225e <__mulsf3_pse+0x84>
    226a:	86 95       	lsr	r24
    226c:	77 95       	ror	r23
    226e:	67 95       	ror	r22
    2270:	b7 95       	ror	r27
    2272:	f7 95       	ror	r31
    2274:	e7 95       	ror	r30
    2276:	9f 5f       	subi	r25, 0xFF	; 255
    2278:	c1 f7       	brne	.-16     	; 0x226a <__mulsf3_pse+0x90>
    227a:	fe 2b       	or	r31, r30
    227c:	88 0f       	add	r24, r24
    227e:	91 1d       	adc	r25, r1
    2280:	96 95       	lsr	r25
    2282:	87 95       	ror	r24
    2284:	97 f9       	bld	r25, 7
    2286:	08 95       	ret

00002288 <__fp_cmp>:
    2288:	99 0f       	add	r25, r25
    228a:	00 08       	sbc	r0, r0
    228c:	55 0f       	add	r21, r21
    228e:	aa 0b       	sbc	r26, r26
    2290:	e0 e8       	ldi	r30, 0x80	; 128
    2292:	fe ef       	ldi	r31, 0xFE	; 254
    2294:	16 16       	cp	r1, r22
    2296:	17 06       	cpc	r1, r23
    2298:	e8 07       	cpc	r30, r24
    229a:	f9 07       	cpc	r31, r25
    229c:	c0 f0       	brcs	.+48     	; 0x22ce <__fp_cmp+0x46>
    229e:	12 16       	cp	r1, r18
    22a0:	13 06       	cpc	r1, r19
    22a2:	e4 07       	cpc	r30, r20
    22a4:	f5 07       	cpc	r31, r21
    22a6:	98 f0       	brcs	.+38     	; 0x22ce <__fp_cmp+0x46>
    22a8:	62 1b       	sub	r22, r18
    22aa:	73 0b       	sbc	r23, r19
    22ac:	84 0b       	sbc	r24, r20
    22ae:	95 0b       	sbc	r25, r21
    22b0:	39 f4       	brne	.+14     	; 0x22c0 <__fp_cmp+0x38>
    22b2:	0a 26       	eor	r0, r26
    22b4:	61 f0       	breq	.+24     	; 0x22ce <__fp_cmp+0x46>
    22b6:	23 2b       	or	r18, r19
    22b8:	24 2b       	or	r18, r20
    22ba:	25 2b       	or	r18, r21
    22bc:	21 f4       	brne	.+8      	; 0x22c6 <__fp_cmp+0x3e>
    22be:	08 95       	ret
    22c0:	0a 26       	eor	r0, r26
    22c2:	09 f4       	brne	.+2      	; 0x22c6 <__fp_cmp+0x3e>
    22c4:	a1 40       	sbci	r26, 0x01	; 1
    22c6:	a6 95       	lsr	r26
    22c8:	8f ef       	ldi	r24, 0xFF	; 255
    22ca:	81 1d       	adc	r24, r1
    22cc:	81 1d       	adc	r24, r1
    22ce:	08 95       	ret

000022d0 <__cxa_pure_virtual>:
    22d0:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <abort>

000022d4 <initVariant>:
    22d4:	08 95       	ret

000022d6 <main>:
    22d6:	0e 94 4c 18 	call	0x3098	; 0x3098 <init>
    22da:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <initVariant>
    22de:	89 e6       	ldi	r24, 0x69	; 105
    22e0:	94 e0       	ldi	r25, 0x04	; 4
    22e2:	0e 94 82 17 	call	0x2f04	; 0x2f04 <_ZN10USBDevice_6attachEv>
    22e6:	0e 94 16 04 	call	0x82c	; 0x82c <setup>
    22ea:	c0 e0       	ldi	r28, 0x00	; 0
    22ec:	d0 e0       	ldi	r29, 0x00	; 0
    22ee:	0e 94 57 04 	call	0x8ae	; 0x8ae <loop>
    22f2:	20 97       	sbiw	r28, 0x00	; 0
    22f4:	e1 f3       	breq	.-8      	; 0x22ee <main+0x18>
    22f6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    22fa:	f9 cf       	rjmp	.-14     	; 0x22ee <main+0x18>

000022fc <_ZN5Print5writeEPKhj>:
    22fc:	cf 92       	push	r12
    22fe:	df 92       	push	r13
    2300:	ef 92       	push	r14
    2302:	ff 92       	push	r15
    2304:	0f 93       	push	r16
    2306:	1f 93       	push	r17
    2308:	cf 93       	push	r28
    230a:	df 93       	push	r29
    230c:	6c 01       	movw	r12, r24
    230e:	7a 01       	movw	r14, r20
    2310:	8b 01       	movw	r16, r22
    2312:	c0 e0       	ldi	r28, 0x00	; 0
    2314:	d0 e0       	ldi	r29, 0x00	; 0
    2316:	ce 15       	cp	r28, r14
    2318:	df 05       	cpc	r29, r15
    231a:	81 f0       	breq	.+32     	; 0x233c <_ZN5Print5writeEPKhj+0x40>
    231c:	d8 01       	movw	r26, r16
    231e:	6d 91       	ld	r22, X+
    2320:	8d 01       	movw	r16, r26
    2322:	d6 01       	movw	r26, r12
    2324:	ed 91       	ld	r30, X+
    2326:	fc 91       	ld	r31, X
    2328:	01 90       	ld	r0, Z+
    232a:	f0 81       	ld	r31, Z
    232c:	e0 2d       	mov	r30, r0
    232e:	c6 01       	movw	r24, r12
    2330:	09 95       	icall
    2332:	89 2b       	or	r24, r25
    2334:	11 f0       	breq	.+4      	; 0x233a <_ZN5Print5writeEPKhj+0x3e>
    2336:	21 96       	adiw	r28, 0x01	; 1
    2338:	ee cf       	rjmp	.-36     	; 0x2316 <_ZN5Print5writeEPKhj+0x1a>
    233a:	7e 01       	movw	r14, r28
    233c:	c7 01       	movw	r24, r14
    233e:	df 91       	pop	r29
    2340:	cf 91       	pop	r28
    2342:	1f 91       	pop	r17
    2344:	0f 91       	pop	r16
    2346:	ff 90       	pop	r15
    2348:	ef 90       	pop	r14
    234a:	df 90       	pop	r13
    234c:	cf 90       	pop	r12
    234e:	08 95       	ret

00002350 <_ZN5Print5writeEPKc>:
    2350:	61 15       	cp	r22, r1
    2352:	71 05       	cpc	r23, r1
    2354:	79 f0       	breq	.+30     	; 0x2374 <_ZN5Print5writeEPKc+0x24>
    2356:	fb 01       	movw	r30, r22
    2358:	01 90       	ld	r0, Z+
    235a:	00 20       	and	r0, r0
    235c:	e9 f7       	brne	.-6      	; 0x2358 <_ZN5Print5writeEPKc+0x8>
    235e:	31 97       	sbiw	r30, 0x01	; 1
    2360:	af 01       	movw	r20, r30
    2362:	46 1b       	sub	r20, r22
    2364:	57 0b       	sbc	r21, r23
    2366:	dc 01       	movw	r26, r24
    2368:	ed 91       	ld	r30, X+
    236a:	fc 91       	ld	r31, X
    236c:	02 80       	ldd	r0, Z+2	; 0x02
    236e:	f3 81       	ldd	r31, Z+3	; 0x03
    2370:	e0 2d       	mov	r30, r0
    2372:	09 94       	ijmp
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	08 95       	ret

0000237a <_ZN5Print5printERK6String>:
    237a:	db 01       	movw	r26, r22
    237c:	14 96       	adiw	r26, 0x04	; 4
    237e:	4d 91       	ld	r20, X+
    2380:	5c 91       	ld	r21, X
    2382:	15 97       	sbiw	r26, 0x05	; 5
    2384:	6d 91       	ld	r22, X+
    2386:	7c 91       	ld	r23, X
    2388:	dc 01       	movw	r26, r24
    238a:	ed 91       	ld	r30, X+
    238c:	fc 91       	ld	r31, X
    238e:	02 80       	ldd	r0, Z+2	; 0x02
    2390:	f3 81       	ldd	r31, Z+3	; 0x03
    2392:	e0 2d       	mov	r30, r0
    2394:	09 94       	ijmp

00002396 <_ZN5Print5printEPKc>:
    2396:	0c 94 a8 11 	jmp	0x2350	; 0x2350 <_ZN5Print5writeEPKc>

0000239a <_ZN5Print5printEc>:
    239a:	dc 01       	movw	r26, r24
    239c:	ed 91       	ld	r30, X+
    239e:	fc 91       	ld	r31, X
    23a0:	01 90       	ld	r0, Z+
    23a2:	f0 81       	ld	r31, Z
    23a4:	e0 2d       	mov	r30, r0
    23a6:	09 94       	ijmp

000023a8 <_ZN5Print11printNumberEmh>:
    23a8:	8f 92       	push	r8
    23aa:	9f 92       	push	r9
    23ac:	af 92       	push	r10
    23ae:	bf 92       	push	r11
    23b0:	ef 92       	push	r14
    23b2:	ff 92       	push	r15
    23b4:	0f 93       	push	r16
    23b6:	1f 93       	push	r17
    23b8:	cf 93       	push	r28
    23ba:	df 93       	push	r29
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    23c0:	a1 97       	sbiw	r28, 0x21	; 33
    23c2:	0f b6       	in	r0, 0x3f	; 63
    23c4:	f8 94       	cli
    23c6:	de bf       	out	0x3e, r29	; 62
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	cd bf       	out	0x3d, r28	; 61
    23cc:	7c 01       	movw	r14, r24
    23ce:	fa 01       	movw	r30, r20
    23d0:	cb 01       	movw	r24, r22
    23d2:	19 a2       	std	Y+33, r1	; 0x21
    23d4:	22 30       	cpi	r18, 0x02	; 2
    23d6:	08 f4       	brcc	.+2      	; 0x23da <_ZN5Print11printNumberEmh+0x32>
    23d8:	2a e0       	ldi	r18, 0x0A	; 10
    23da:	8e 01       	movw	r16, r28
    23dc:	0f 5d       	subi	r16, 0xDF	; 223
    23de:	1f 4f       	sbci	r17, 0xFF	; 255
    23e0:	82 2e       	mov	r8, r18
    23e2:	91 2c       	mov	r9, r1
    23e4:	a1 2c       	mov	r10, r1
    23e6:	b1 2c       	mov	r11, r1
    23e8:	bf 01       	movw	r22, r30
    23ea:	a5 01       	movw	r20, r10
    23ec:	94 01       	movw	r18, r8
    23ee:	0e 94 95 1c 	call	0x392a	; 0x392a <__udivmodsi4>
    23f2:	f9 01       	movw	r30, r18
    23f4:	ca 01       	movw	r24, r20
    23f6:	01 50       	subi	r16, 0x01	; 1
    23f8:	11 09       	sbc	r17, r1
    23fa:	6a 30       	cpi	r22, 0x0A	; 10
    23fc:	10 f4       	brcc	.+4      	; 0x2402 <_ZN5Print11printNumberEmh+0x5a>
    23fe:	60 5d       	subi	r22, 0xD0	; 208
    2400:	01 c0       	rjmp	.+2      	; 0x2404 <_ZN5Print11printNumberEmh+0x5c>
    2402:	69 5c       	subi	r22, 0xC9	; 201
    2404:	d8 01       	movw	r26, r16
    2406:	6c 93       	st	X, r22
    2408:	23 2b       	or	r18, r19
    240a:	24 2b       	or	r18, r20
    240c:	25 2b       	or	r18, r21
    240e:	61 f7       	brne	.-40     	; 0x23e8 <_ZN5Print11printNumberEmh+0x40>
    2410:	b8 01       	movw	r22, r16
    2412:	c7 01       	movw	r24, r14
    2414:	0e 94 a8 11 	call	0x2350	; 0x2350 <_ZN5Print5writeEPKc>
    2418:	a1 96       	adiw	r28, 0x21	; 33
    241a:	0f b6       	in	r0, 0x3f	; 63
    241c:	f8 94       	cli
    241e:	de bf       	out	0x3e, r29	; 62
    2420:	0f be       	out	0x3f, r0	; 63
    2422:	cd bf       	out	0x3d, r28	; 61
    2424:	df 91       	pop	r29
    2426:	cf 91       	pop	r28
    2428:	1f 91       	pop	r17
    242a:	0f 91       	pop	r16
    242c:	ff 90       	pop	r15
    242e:	ef 90       	pop	r14
    2430:	bf 90       	pop	r11
    2432:	af 90       	pop	r10
    2434:	9f 90       	pop	r9
    2436:	8f 90       	pop	r8
    2438:	08 95       	ret

0000243a <_ZN5Print5printEmi>:
    243a:	21 15       	cp	r18, r1
    243c:	31 05       	cpc	r19, r1
    243e:	41 f4       	brne	.+16     	; 0x2450 <_ZN5Print5printEmi+0x16>
    2440:	dc 01       	movw	r26, r24
    2442:	ed 91       	ld	r30, X+
    2444:	fc 91       	ld	r31, X
    2446:	01 90       	ld	r0, Z+
    2448:	f0 81       	ld	r31, Z
    244a:	e0 2d       	mov	r30, r0
    244c:	64 2f       	mov	r22, r20
    244e:	09 94       	ijmp
    2450:	0c 94 d4 11 	jmp	0x23a8	; 0x23a8 <_ZN5Print11printNumberEmh>

00002454 <_ZN5Print5printEji>:
    2454:	9a 01       	movw	r18, r20
    2456:	ab 01       	movw	r20, r22
    2458:	60 e0       	ldi	r22, 0x00	; 0
    245a:	70 e0       	ldi	r23, 0x00	; 0
    245c:	0c 94 1d 12 	jmp	0x243a	; 0x243a <_ZN5Print5printEmi>

00002460 <_ZN5Print5printEli>:
    2460:	cf 92       	push	r12
    2462:	df 92       	push	r13
    2464:	ef 92       	push	r14
    2466:	ff 92       	push	r15
    2468:	0f 93       	push	r16
    246a:	1f 93       	push	r17
    246c:	cf 93       	push	r28
    246e:	df 93       	push	r29
    2470:	21 15       	cp	r18, r1
    2472:	31 05       	cpc	r19, r1
    2474:	81 f4       	brne	.+32     	; 0x2496 <_ZN5Print5printEli+0x36>
    2476:	dc 01       	movw	r26, r24
    2478:	ed 91       	ld	r30, X+
    247a:	fc 91       	ld	r31, X
    247c:	01 90       	ld	r0, Z+
    247e:	f0 81       	ld	r31, Z
    2480:	e0 2d       	mov	r30, r0
    2482:	64 2f       	mov	r22, r20
    2484:	df 91       	pop	r29
    2486:	cf 91       	pop	r28
    2488:	1f 91       	pop	r17
    248a:	0f 91       	pop	r16
    248c:	ff 90       	pop	r15
    248e:	ef 90       	pop	r14
    2490:	df 90       	pop	r13
    2492:	cf 90       	pop	r12
    2494:	09 94       	ijmp
    2496:	2a 30       	cpi	r18, 0x0A	; 10
    2498:	31 05       	cpc	r19, r1
    249a:	01 f5       	brne	.+64     	; 0x24dc <_ZN5Print5printEli+0x7c>
    249c:	77 ff       	sbrs	r23, 7
    249e:	1d c0       	rjmp	.+58     	; 0x24da <_ZN5Print5printEli+0x7a>
    24a0:	6a 01       	movw	r12, r20
    24a2:	7b 01       	movw	r14, r22
    24a4:	ec 01       	movw	r28, r24
    24a6:	6d e2       	ldi	r22, 0x2D	; 45
    24a8:	0e 94 cd 11 	call	0x239a	; 0x239a <_ZN5Print5printEc>
    24ac:	8c 01       	movw	r16, r24
    24ae:	44 27       	eor	r20, r20
    24b0:	55 27       	eor	r21, r21
    24b2:	ba 01       	movw	r22, r20
    24b4:	4c 19       	sub	r20, r12
    24b6:	5d 09       	sbc	r21, r13
    24b8:	6e 09       	sbc	r22, r14
    24ba:	7f 09       	sbc	r23, r15
    24bc:	2a e0       	ldi	r18, 0x0A	; 10
    24be:	ce 01       	movw	r24, r28
    24c0:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <_ZN5Print11printNumberEmh>
    24c4:	80 0f       	add	r24, r16
    24c6:	91 1f       	adc	r25, r17
    24c8:	df 91       	pop	r29
    24ca:	cf 91       	pop	r28
    24cc:	1f 91       	pop	r17
    24ce:	0f 91       	pop	r16
    24d0:	ff 90       	pop	r15
    24d2:	ef 90       	pop	r14
    24d4:	df 90       	pop	r13
    24d6:	cf 90       	pop	r12
    24d8:	08 95       	ret
    24da:	2a e0       	ldi	r18, 0x0A	; 10
    24dc:	df 91       	pop	r29
    24de:	cf 91       	pop	r28
    24e0:	1f 91       	pop	r17
    24e2:	0f 91       	pop	r16
    24e4:	ff 90       	pop	r15
    24e6:	ef 90       	pop	r14
    24e8:	df 90       	pop	r13
    24ea:	cf 90       	pop	r12
    24ec:	0c 94 d4 11 	jmp	0x23a8	; 0x23a8 <_ZN5Print11printNumberEmh>

000024f0 <_ZN5Print5printEii>:
    24f0:	9a 01       	movw	r18, r20
    24f2:	ab 01       	movw	r20, r22
    24f4:	77 0f       	add	r23, r23
    24f6:	66 0b       	sbc	r22, r22
    24f8:	77 0b       	sbc	r23, r23
    24fa:	0c 94 30 12 	jmp	0x2460	; 0x2460 <_ZN5Print5printEli>

000024fe <_ZN5Print10printFloatEdh>:
    24fe:	7f 92       	push	r7
    2500:	8f 92       	push	r8
    2502:	9f 92       	push	r9
    2504:	af 92       	push	r10
    2506:	bf 92       	push	r11
    2508:	cf 92       	push	r12
    250a:	df 92       	push	r13
    250c:	ef 92       	push	r14
    250e:	ff 92       	push	r15
    2510:	0f 93       	push	r16
    2512:	1f 93       	push	r17
    2514:	cf 93       	push	r28
    2516:	df 93       	push	r29
    2518:	8c 01       	movw	r16, r24
    251a:	6a 01       	movw	r12, r20
    251c:	7b 01       	movw	r14, r22
    251e:	72 2e       	mov	r7, r18
    2520:	9a 01       	movw	r18, r20
    2522:	ab 01       	movw	r20, r22
    2524:	c7 01       	movw	r24, r14
    2526:	b6 01       	movw	r22, r12
    2528:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <__unordsf2>
    252c:	88 23       	and	r24, r24
    252e:	19 f0       	breq	.+6      	; 0x2536 <_ZN5Print10printFloatEdh+0x38>
    2530:	67 e6       	ldi	r22, 0x67	; 103
    2532:	72 e0       	ldi	r23, 0x02	; 2
    2534:	27 c0       	rjmp	.+78     	; 0x2584 <_ZN5Print10printFloatEdh+0x86>
    2536:	46 01       	movw	r8, r12
    2538:	57 01       	movw	r10, r14
    253a:	e8 94       	clt
    253c:	b7 f8       	bld	r11, 7
    253e:	2f ef       	ldi	r18, 0xFF	; 255
    2540:	3f ef       	ldi	r19, 0xFF	; 255
    2542:	4f e7       	ldi	r20, 0x7F	; 127
    2544:	5f e7       	ldi	r21, 0x7F	; 127
    2546:	c5 01       	movw	r24, r10
    2548:	b4 01       	movw	r22, r8
    254a:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <__unordsf2>
    254e:	81 11       	cpse	r24, r1
    2550:	0d c0       	rjmp	.+26     	; 0x256c <_ZN5Print10printFloatEdh+0x6e>
    2552:	2f ef       	ldi	r18, 0xFF	; 255
    2554:	3f ef       	ldi	r19, 0xFF	; 255
    2556:	4f e7       	ldi	r20, 0x7F	; 127
    2558:	5f e7       	ldi	r21, 0x7F	; 127
    255a:	c5 01       	movw	r24, r10
    255c:	b4 01       	movw	r22, r8
    255e:	0e 94 48 1c 	call	0x3890	; 0x3890 <__cmpsf2>
    2562:	18 16       	cp	r1, r24
    2564:	1c f4       	brge	.+6      	; 0x256c <_ZN5Print10printFloatEdh+0x6e>
    2566:	6b e6       	ldi	r22, 0x6B	; 107
    2568:	72 e0       	ldi	r23, 0x02	; 2
    256a:	0c c0       	rjmp	.+24     	; 0x2584 <_ZN5Print10printFloatEdh+0x86>
    256c:	2f ef       	ldi	r18, 0xFF	; 255
    256e:	3f ef       	ldi	r19, 0xFF	; 255
    2570:	4f e7       	ldi	r20, 0x7F	; 127
    2572:	5f e4       	ldi	r21, 0x4F	; 79
    2574:	c7 01       	movw	r24, r14
    2576:	b6 01       	movw	r22, r12
    2578:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <__gesf2>
    257c:	18 16       	cp	r1, r24
    257e:	94 f4       	brge	.+36     	; 0x25a4 <_ZN5Print10printFloatEdh+0xa6>
    2580:	6f e6       	ldi	r22, 0x6F	; 111
    2582:	72 e0       	ldi	r23, 0x02	; 2
    2584:	c8 01       	movw	r24, r16
    2586:	df 91       	pop	r29
    2588:	cf 91       	pop	r28
    258a:	1f 91       	pop	r17
    258c:	0f 91       	pop	r16
    258e:	ff 90       	pop	r15
    2590:	ef 90       	pop	r14
    2592:	df 90       	pop	r13
    2594:	cf 90       	pop	r12
    2596:	bf 90       	pop	r11
    2598:	af 90       	pop	r10
    259a:	9f 90       	pop	r9
    259c:	8f 90       	pop	r8
    259e:	7f 90       	pop	r7
    25a0:	0c 94 a8 11 	jmp	0x2350	; 0x2350 <_ZN5Print5writeEPKc>
    25a4:	2f ef       	ldi	r18, 0xFF	; 255
    25a6:	3f ef       	ldi	r19, 0xFF	; 255
    25a8:	4f e7       	ldi	r20, 0x7F	; 127
    25aa:	5f ec       	ldi	r21, 0xCF	; 207
    25ac:	c7 01       	movw	r24, r14
    25ae:	b6 01       	movw	r22, r12
    25b0:	0e 94 48 1c 	call	0x3890	; 0x3890 <__cmpsf2>
    25b4:	87 fd       	sbrc	r24, 7
    25b6:	e4 cf       	rjmp	.-56     	; 0x2580 <_ZN5Print10printFloatEdh+0x82>
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	a9 01       	movw	r20, r18
    25be:	c7 01       	movw	r24, r14
    25c0:	b6 01       	movw	r22, r12
    25c2:	0e 94 48 1c 	call	0x3890	; 0x3890 <__cmpsf2>
    25c6:	87 ff       	sbrs	r24, 7
    25c8:	0a c0       	rjmp	.+20     	; 0x25de <_ZN5Print10printFloatEdh+0xe0>
    25ca:	6d e2       	ldi	r22, 0x2D	; 45
    25cc:	c8 01       	movw	r24, r16
    25ce:	0e 94 cd 11 	call	0x239a	; 0x239a <_ZN5Print5printEc>
    25d2:	ec 01       	movw	r28, r24
    25d4:	f7 fa       	bst	r15, 7
    25d6:	f0 94       	com	r15
    25d8:	f7 f8       	bld	r15, 7
    25da:	f0 94       	com	r15
    25dc:	02 c0       	rjmp	.+4      	; 0x25e2 <_ZN5Print10printFloatEdh+0xe4>
    25de:	c0 e0       	ldi	r28, 0x00	; 0
    25e0:	d0 e0       	ldi	r29, 0x00	; 0
    25e2:	b1 2c       	mov	r11, r1
    25e4:	60 e0       	ldi	r22, 0x00	; 0
    25e6:	70 e0       	ldi	r23, 0x00	; 0
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	9f e3       	ldi	r25, 0x3F	; 63
    25ec:	7b 14       	cp	r7, r11
    25ee:	41 f0       	breq	.+16     	; 0x2600 <_ZN5Print10printFloatEdh+0x102>
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	40 e2       	ldi	r20, 0x20	; 32
    25f6:	51 e4       	ldi	r21, 0x41	; 65
    25f8:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__divsf3>
    25fc:	b3 94       	inc	r11
    25fe:	f6 cf       	rjmp	.-20     	; 0x25ec <_ZN5Print10printFloatEdh+0xee>
    2600:	a7 01       	movw	r20, r14
    2602:	96 01       	movw	r18, r12
    2604:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <__addsf3>
    2608:	6b 01       	movw	r12, r22
    260a:	7c 01       	movw	r14, r24
    260c:	0e 94 4d 1c 	call	0x389a	; 0x389a <__fixunssfsi>
    2610:	4b 01       	movw	r8, r22
    2612:	5c 01       	movw	r10, r24
    2614:	2a e0       	ldi	r18, 0x0A	; 10
    2616:	ab 01       	movw	r20, r22
    2618:	bc 01       	movw	r22, r24
    261a:	c8 01       	movw	r24, r16
    261c:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <_ZN5Print11printNumberEmh>
    2620:	c8 0f       	add	r28, r24
    2622:	d9 1f       	adc	r29, r25
    2624:	77 20       	and	r7, r7
    2626:	b9 f1       	breq	.+110    	; 0x2696 <_ZN5Print10printFloatEdh+0x198>
    2628:	c5 01       	movw	r24, r10
    262a:	b4 01       	movw	r22, r8
    262c:	0e 94 44 10 	call	0x2088	; 0x2088 <__floatunsisf>
    2630:	9b 01       	movw	r18, r22
    2632:	ac 01       	movw	r20, r24
    2634:	c7 01       	movw	r24, r14
    2636:	b6 01       	movw	r22, r12
    2638:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <__subsf3>
    263c:	6b 01       	movw	r12, r22
    263e:	7c 01       	movw	r14, r24
    2640:	6e e2       	ldi	r22, 0x2E	; 46
    2642:	c8 01       	movw	r24, r16
    2644:	0e 94 cd 11 	call	0x239a	; 0x239a <_ZN5Print5printEc>
    2648:	c8 0f       	add	r28, r24
    264a:	d9 1f       	adc	r29, r25
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	40 e2       	ldi	r20, 0x20	; 32
    2652:	51 e4       	ldi	r21, 0x41	; 65
    2654:	c7 01       	movw	r24, r14
    2656:	b6 01       	movw	r22, r12
    2658:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__mulsf3>
    265c:	4b 01       	movw	r8, r22
    265e:	5c 01       	movw	r10, r24
    2660:	0e 94 4d 1c 	call	0x389a	; 0x389a <__fixunssfsi>
    2664:	6b 01       	movw	r12, r22
    2666:	7c 01       	movw	r14, r24
    2668:	4a e0       	ldi	r20, 0x0A	; 10
    266a:	50 e0       	ldi	r21, 0x00	; 0
    266c:	c8 01       	movw	r24, r16
    266e:	0e 94 2a 12 	call	0x2454	; 0x2454 <_ZN5Print5printEji>
    2672:	c8 0f       	add	r28, r24
    2674:	d9 1f       	adc	r29, r25
    2676:	b6 01       	movw	r22, r12
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	0e 94 44 10 	call	0x2088	; 0x2088 <__floatunsisf>
    2680:	9b 01       	movw	r18, r22
    2682:	ac 01       	movw	r20, r24
    2684:	c5 01       	movw	r24, r10
    2686:	b4 01       	movw	r22, r8
    2688:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <__subsf3>
    268c:	6b 01       	movw	r12, r22
    268e:	7c 01       	movw	r14, r24
    2690:	7a 94       	dec	r7
    2692:	71 10       	cpse	r7, r1
    2694:	db cf       	rjmp	.-74     	; 0x264c <_ZN5Print10printFloatEdh+0x14e>
    2696:	ce 01       	movw	r24, r28
    2698:	df 91       	pop	r29
    269a:	cf 91       	pop	r28
    269c:	1f 91       	pop	r17
    269e:	0f 91       	pop	r16
    26a0:	ff 90       	pop	r15
    26a2:	ef 90       	pop	r14
    26a4:	df 90       	pop	r13
    26a6:	cf 90       	pop	r12
    26a8:	bf 90       	pop	r11
    26aa:	af 90       	pop	r10
    26ac:	9f 90       	pop	r9
    26ae:	8f 90       	pop	r8
    26b0:	7f 90       	pop	r7
    26b2:	08 95       	ret

000026b4 <_ZN5Print5printEdi>:
    26b4:	0c 94 7f 12 	jmp	0x24fe	; 0x24fe <_ZN5Print10printFloatEdh>

000026b8 <_ZL4RecvPVhh>:
    26b8:	61 50       	subi	r22, 0x01	; 1
    26ba:	30 f0       	brcs	.+12     	; 0x26c8 <_ZL4RecvPVhh+0x10>
    26bc:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    26c0:	fc 01       	movw	r30, r24
    26c2:	20 83       	st	Z, r18
    26c4:	01 96       	adiw	r24, 0x01	; 1
    26c6:	f8 cf       	rjmp	.-16     	; 0x26b8 <_ZL4RecvPVhh>
    26c8:	28 98       	cbi	0x05, 0	; 5
    26ca:	84 e6       	ldi	r24, 0x64	; 100
    26cc:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <RxLEDPulse>
    26d0:	08 95       	ret

000026d2 <_ZL11SendControlh>:
    26d2:	40 91 6c 04 	lds	r20, 0x046C	; 0x80046c <_ZL6_cmark>
    26d6:	50 91 6d 04 	lds	r21, 0x046D	; 0x80046d <_ZL6_cmark+0x1>
    26da:	20 91 6a 04 	lds	r18, 0x046A	; 0x80046a <_ZL5_cend>
    26de:	30 91 6b 04 	lds	r19, 0x046B	; 0x80046b <_ZL5_cend+0x1>
    26e2:	42 17       	cp	r20, r18
    26e4:	53 07       	cpc	r21, r19
    26e6:	b4 f4       	brge	.+44     	; 0x2714 <_ZL11SendControlh+0x42>
    26e8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    26ec:	95 70       	andi	r25, 0x05	; 5
    26ee:	e1 f3       	breq	.-8      	; 0x26e8 <_ZL11SendControlh+0x16>
    26f0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    26f4:	92 fd       	sbrc	r25, 2
    26f6:	19 c0       	rjmp	.+50     	; 0x272a <_ZL11SendControlh+0x58>
    26f8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    26fc:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <_ZL6_cmark>
    2700:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <_ZL6_cmark+0x1>
    2704:	01 96       	adiw	r24, 0x01	; 1
    2706:	8f 73       	andi	r24, 0x3F	; 63
    2708:	99 27       	eor	r25, r25
    270a:	89 2b       	or	r24, r25
    270c:	19 f4       	brne	.+6      	; 0x2714 <_ZL11SendControlh+0x42>
    270e:	8e ef       	ldi	r24, 0xFE	; 254
    2710:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2714:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <_ZL6_cmark>
    2718:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <_ZL6_cmark+0x1>
    271c:	01 96       	adiw	r24, 0x01	; 1
    271e:	90 93 6d 04 	sts	0x046D, r25	; 0x80046d <_ZL6_cmark+0x1>
    2722:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <_ZL6_cmark>
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	08 95       	ret
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	08 95       	ret

0000272e <_ZL24USB_SendStringDescriptorPKhhh>:
    272e:	df 92       	push	r13
    2730:	ef 92       	push	r14
    2732:	ff 92       	push	r15
    2734:	0f 93       	push	r16
    2736:	1f 93       	push	r17
    2738:	cf 93       	push	r28
    273a:	df 93       	push	r29
    273c:	d8 2e       	mov	r13, r24
    273e:	f9 2e       	mov	r15, r25
    2740:	e4 2e       	mov	r14, r20
    2742:	06 2f       	mov	r16, r22
    2744:	10 e0       	ldi	r17, 0x00	; 0
    2746:	c8 01       	movw	r24, r16
    2748:	01 96       	adiw	r24, 0x01	; 1
    274a:	88 0f       	add	r24, r24
    274c:	0e 94 69 13 	call	0x26d2	; 0x26d2 <_ZL11SendControlh>
    2750:	83 e0       	ldi	r24, 0x03	; 3
    2752:	0e 94 69 13 	call	0x26d2	; 0x26d2 <_ZL11SendControlh>
    2756:	cd 2d       	mov	r28, r13
    2758:	df 2d       	mov	r29, r15
    275a:	0c 0f       	add	r16, r28
    275c:	1d 1f       	adc	r17, r29
    275e:	c0 17       	cp	r28, r16
    2760:	d1 07       	cpc	r29, r17
    2762:	89 f0       	breq	.+34     	; 0x2786 <_ZL24USB_SendStringDescriptorPKhhh+0x58>
    2764:	e7 fe       	sbrs	r14, 7
    2766:	03 c0       	rjmp	.+6      	; 0x276e <_ZL24USB_SendStringDescriptorPKhhh+0x40>
    2768:	fe 01       	movw	r30, r28
    276a:	84 91       	lpm	r24, Z
    276c:	01 c0       	rjmp	.+2      	; 0x2770 <_ZL24USB_SendStringDescriptorPKhhh+0x42>
    276e:	88 81       	ld	r24, Y
    2770:	0e 94 69 13 	call	0x26d2	; 0x26d2 <_ZL11SendControlh>
    2774:	f8 2e       	mov	r15, r24
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	0e 94 69 13 	call	0x26d2	; 0x26d2 <_ZL11SendControlh>
    277c:	8f 21       	and	r24, r15
    277e:	21 96       	adiw	r28, 0x01	; 1
    2780:	81 11       	cpse	r24, r1
    2782:	ed cf       	rjmp	.-38     	; 0x275e <_ZL24USB_SendStringDescriptorPKhhh+0x30>
    2784:	01 c0       	rjmp	.+2      	; 0x2788 <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	df 91       	pop	r29
    278a:	cf 91       	pop	r28
    278c:	1f 91       	pop	r17
    278e:	0f 91       	pop	r16
    2790:	ff 90       	pop	r15
    2792:	ef 90       	pop	r14
    2794:	df 90       	pop	r13
    2796:	08 95       	ret

00002798 <_ZL15USB_ClockEnablev>:
    2798:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    279c:	81 60       	ori	r24, 0x01	; 1
    279e:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    27a2:	80 ea       	ldi	r24, 0xA0	; 160
    27a4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    27a8:	89 b5       	in	r24, 0x29	; 41
    27aa:	80 61       	ori	r24, 0x10	; 16
    27ac:	89 bd       	out	0x29, r24	; 41
    27ae:	89 b5       	in	r24, 0x29	; 41
    27b0:	82 60       	ori	r24, 0x02	; 2
    27b2:	89 bd       	out	0x29, r24	; 41
    27b4:	09 b4       	in	r0, 0x29	; 41
    27b6:	00 fe       	sbrs	r0, 0
    27b8:	fd cf       	rjmp	.-6      	; 0x27b4 <_ZL15USB_ClockEnablev+0x1c>
    27ba:	61 e0       	ldi	r22, 0x01	; 1
    27bc:	70 e0       	ldi	r23, 0x00	; 0
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	0e 94 10 18 	call	0x3020	; 0x3020 <delay>
    27c6:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    27ca:	8f 7c       	andi	r24, 0xCF	; 207
    27cc:	80 61       	ori	r24, 0x10	; 16
    27ce:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    27d2:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    27d6:	80 7f       	andi	r24, 0xF0	; 240
    27d8:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    27dc:	08 95       	ret

000027de <_ZL14SendInterfacesv>:
    27de:	cf 93       	push	r28
    27e0:	df 93       	push	r29
    27e2:	1f 92       	push	r1
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
    27e8:	19 82       	std	Y+1, r1	; 0x01
    27ea:	ce 01       	movw	r24, r28
    27ec:	01 96       	adiw	r24, 0x01	; 1
    27ee:	0e 94 93 1a 	call	0x3526	; 0x3526 <_Z16CDC_GetInterfacePh>
    27f2:	0e 94 c7 1b 	call	0x378e	; 0x378e <_Z12PluggableUSBv>
    27f6:	be 01       	movw	r22, r28
    27f8:	6f 5f       	subi	r22, 0xFF	; 255
    27fa:	7f 4f       	sbci	r23, 0xFF	; 255
    27fc:	0e 94 42 1b 	call	0x3684	; 0x3684 <_ZN13PluggableUSB_12getInterfaceEPh>
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	0f 90       	pop	r0
    2804:	df 91       	pop	r29
    2806:	cf 91       	pop	r28
    2808:	08 95       	ret

0000280a <_ZN6LockEPC1Eh>:
    280a:	2f b7       	in	r18, 0x3f	; 63
    280c:	fc 01       	movw	r30, r24
    280e:	20 83       	st	Z, r18
    2810:	f8 94       	cli
    2812:	67 70       	andi	r22, 0x07	; 7
    2814:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2818:	08 95       	ret

0000281a <_Z13USB_Availableh>:
    281a:	cf 93       	push	r28
    281c:	df 93       	push	r29
    281e:	1f 92       	push	r1
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
    2824:	68 2f       	mov	r22, r24
    2826:	ce 01       	movw	r24, r28
    2828:	01 96       	adiw	r24, 0x01	; 1
    282a:	0e 94 05 14 	call	0x280a	; 0x280a <_ZN6LockEPC1Eh>
    282e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2832:	99 81       	ldd	r25, Y+1	; 0x01
    2834:	9f bf       	out	0x3f, r25	; 63
    2836:	0f 90       	pop	r0
    2838:	df 91       	pop	r29
    283a:	cf 91       	pop	r28
    283c:	08 95       	ret

0000283e <_Z8USB_RecvhPvi>:
    283e:	ef 92       	push	r14
    2840:	ff 92       	push	r15
    2842:	0f 93       	push	r16
    2844:	1f 93       	push	r17
    2846:	cf 93       	push	r28
    2848:	df 93       	push	r29
    284a:	1f 92       	push	r1
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
    2850:	90 91 70 04 	lds	r25, 0x0470	; 0x800470 <_usbConfiguration>
    2854:	99 23       	and	r25, r25
    2856:	11 f0       	breq	.+4      	; 0x285c <_Z8USB_RecvhPvi+0x1e>
    2858:	57 ff       	sbrs	r21, 7
    285a:	03 c0       	rjmp	.+6      	; 0x2862 <_Z8USB_RecvhPvi+0x24>
    285c:	8f ef       	ldi	r24, 0xFF	; 255
    285e:	9f ef       	ldi	r25, 0xFF	; 255
    2860:	29 c0       	rjmp	.+82     	; 0x28b4 <_Z8USB_RecvhPvi+0x76>
    2862:	8a 01       	movw	r16, r20
    2864:	7b 01       	movw	r14, r22
    2866:	68 2f       	mov	r22, r24
    2868:	ce 01       	movw	r24, r28
    286a:	01 96       	adiw	r24, 0x01	; 1
    286c:	0e 94 05 14 	call	0x280a	; 0x280a <_ZN6LockEPC1Eh>
    2870:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	02 17       	cp	r16, r18
    2878:	13 07       	cpc	r17, r19
    287a:	0c f4       	brge	.+2      	; 0x287e <_Z8USB_RecvhPvi+0x40>
    287c:	98 01       	movw	r18, r16
    287e:	82 2f       	mov	r24, r18
    2880:	f7 01       	movw	r30, r14
    2882:	94 e6       	ldi	r25, 0x64	; 100
    2884:	81 50       	subi	r24, 0x01	; 1
    2886:	38 f0       	brcs	.+14     	; 0x2896 <_Z8USB_RecvhPvi+0x58>
    2888:	28 98       	cbi	0x05, 0	; 5
    288a:	90 93 71 04 	sts	0x0471, r25	; 0x800471 <RxLEDPulse>
    288e:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2892:	41 93       	st	Z+, r20
    2894:	f7 cf       	rjmp	.-18     	; 0x2884 <_Z8USB_RecvhPvi+0x46>
    2896:	21 15       	cp	r18, r1
    2898:	31 05       	cpc	r19, r1
    289a:	21 f0       	breq	.+8      	; 0x28a4 <_Z8USB_RecvhPvi+0x66>
    289c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    28a0:	88 23       	and	r24, r24
    28a2:	21 f0       	breq	.+8      	; 0x28ac <_Z8USB_RecvhPvi+0x6e>
    28a4:	89 81       	ldd	r24, Y+1	; 0x01
    28a6:	8f bf       	out	0x3f, r24	; 63
    28a8:	c9 01       	movw	r24, r18
    28aa:	04 c0       	rjmp	.+8      	; 0x28b4 <_Z8USB_RecvhPvi+0x76>
    28ac:	8b e6       	ldi	r24, 0x6B	; 107
    28ae:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    28b2:	f8 cf       	rjmp	.-16     	; 0x28a4 <_Z8USB_RecvhPvi+0x66>
    28b4:	0f 90       	pop	r0
    28b6:	df 91       	pop	r29
    28b8:	cf 91       	pop	r28
    28ba:	1f 91       	pop	r17
    28bc:	0f 91       	pop	r16
    28be:	ff 90       	pop	r15
    28c0:	ef 90       	pop	r14
    28c2:	08 95       	ret

000028c4 <_Z8USB_Recvh>:
    28c4:	cf 93       	push	r28
    28c6:	df 93       	push	r29
    28c8:	1f 92       	push	r1
    28ca:	cd b7       	in	r28, 0x3d	; 61
    28cc:	de b7       	in	r29, 0x3e	; 62
    28ce:	41 e0       	ldi	r20, 0x01	; 1
    28d0:	50 e0       	ldi	r21, 0x00	; 0
    28d2:	be 01       	movw	r22, r28
    28d4:	6f 5f       	subi	r22, 0xFF	; 255
    28d6:	7f 4f       	sbci	r23, 0xFF	; 255
    28d8:	0e 94 1f 14 	call	0x283e	; 0x283e <_Z8USB_RecvhPvi>
    28dc:	01 97       	sbiw	r24, 0x01	; 1
    28de:	19 f4       	brne	.+6      	; 0x28e6 <_Z8USB_Recvh+0x22>
    28e0:	89 81       	ldd	r24, Y+1	; 0x01
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	02 c0       	rjmp	.+4      	; 0x28ea <_Z8USB_Recvh+0x26>
    28e6:	8f ef       	ldi	r24, 0xFF	; 255
    28e8:	9f ef       	ldi	r25, 0xFF	; 255
    28ea:	0f 90       	pop	r0
    28ec:	df 91       	pop	r29
    28ee:	cf 91       	pop	r28
    28f0:	08 95       	ret

000028f2 <_Z13USB_SendSpaceh>:
    28f2:	cf 93       	push	r28
    28f4:	df 93       	push	r29
    28f6:	1f 92       	push	r1
    28f8:	cd b7       	in	r28, 0x3d	; 61
    28fa:	de b7       	in	r29, 0x3e	; 62
    28fc:	68 2f       	mov	r22, r24
    28fe:	ce 01       	movw	r24, r28
    2900:	01 96       	adiw	r24, 0x01	; 1
    2902:	0e 94 05 14 	call	0x280a	; 0x280a <_ZN6LockEPC1Eh>
    2906:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    290a:	89 2f       	mov	r24, r25
    290c:	80 72       	andi	r24, 0x20	; 32
    290e:	95 ff       	sbrs	r25, 5
    2910:	04 c0       	rjmp	.+8      	; 0x291a <_Z13USB_SendSpaceh+0x28>
    2912:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2916:	80 e4       	ldi	r24, 0x40	; 64
    2918:	89 1b       	sub	r24, r25
    291a:	99 81       	ldd	r25, Y+1	; 0x01
    291c:	9f bf       	out	0x3f, r25	; 63
    291e:	0f 90       	pop	r0
    2920:	df 91       	pop	r29
    2922:	cf 91       	pop	r28
    2924:	08 95       	ret

00002926 <_Z8USB_SendhPKvi>:
    2926:	5f 92       	push	r5
    2928:	6f 92       	push	r6
    292a:	7f 92       	push	r7
    292c:	8f 92       	push	r8
    292e:	9f 92       	push	r9
    2930:	af 92       	push	r10
    2932:	bf 92       	push	r11
    2934:	cf 92       	push	r12
    2936:	df 92       	push	r13
    2938:	ef 92       	push	r14
    293a:	ff 92       	push	r15
    293c:	0f 93       	push	r16
    293e:	1f 93       	push	r17
    2940:	cf 93       	push	r28
    2942:	df 93       	push	r29
    2944:	1f 92       	push	r1
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
    294a:	98 2e       	mov	r9, r24
    294c:	6b 01       	movw	r12, r22
    294e:	b4 2e       	mov	r11, r20
    2950:	05 2f       	mov	r16, r21
    2952:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <_usbConfiguration>
    2956:	81 11       	cpse	r24, r1
    2958:	03 c0       	rjmp	.+6      	; 0x2960 <_Z8USB_SendhPKvi+0x3a>
    295a:	8f ef       	ldi	r24, 0xFF	; 255
    295c:	9f ef       	ldi	r25, 0xFF	; 255
    295e:	77 c0       	rjmp	.+238    	; 0x2a4e <_Z8USB_SendhPKvi+0x128>
    2960:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <_usbSuspendState>
    2964:	80 ff       	sbrs	r24, 0
    2966:	05 c0       	rjmp	.+10     	; 0x2972 <_Z8USB_SendhPKvi+0x4c>
    2968:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    296c:	82 60       	ori	r24, 0x02	; 2
    296e:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2972:	eb 2c       	mov	r14, r11
    2974:	f0 2e       	mov	r15, r16
    2976:	a1 2c       	mov	r10, r1
    2978:	8a ef       	ldi	r24, 0xFA	; 250
    297a:	88 2e       	mov	r8, r24
    297c:	89 2d       	mov	r24, r9
    297e:	80 72       	andi	r24, 0x20	; 32
    2980:	68 2e       	mov	r6, r24
    2982:	89 2d       	mov	r24, r9
    2984:	80 74       	andi	r24, 0x40	; 64
    2986:	58 2e       	mov	r5, r24
    2988:	9a e3       	ldi	r25, 0x3A	; 58
    298a:	79 2e       	mov	r7, r25
    298c:	e1 14       	cp	r14, r1
    298e:	f1 04       	cpc	r15, r1
    2990:	19 f4       	brne	.+6      	; 0x2998 <_Z8USB_SendhPKvi+0x72>
    2992:	aa 20       	and	r10, r10
    2994:	09 f4       	brne	.+2      	; 0x2998 <_Z8USB_SendhPKvi+0x72>
    2996:	55 c0       	rjmp	.+170    	; 0x2a42 <_Z8USB_SendhPKvi+0x11c>
    2998:	89 2d       	mov	r24, r9
    299a:	0e 94 79 14 	call	0x28f2	; 0x28f2 <_Z13USB_SendSpaceh>
    299e:	18 2f       	mov	r17, r24
    29a0:	81 11       	cpse	r24, r1
    29a2:	0a c0       	rjmp	.+20     	; 0x29b8 <_Z8USB_SendhPKvi+0x92>
    29a4:	8a 94       	dec	r8
    29a6:	88 20       	and	r8, r8
    29a8:	c1 f2       	breq	.-80     	; 0x295a <_Z8USB_SendhPKvi+0x34>
    29aa:	61 e0       	ldi	r22, 0x01	; 1
    29ac:	70 e0       	ldi	r23, 0x00	; 0
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	0e 94 10 18 	call	0x3020	; 0x3020 <delay>
    29b6:	ea cf       	rjmp	.-44     	; 0x298c <_Z8USB_SendhPKvi+0x66>
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	e8 16       	cp	r14, r24
    29bc:	f9 06       	cpc	r15, r25
    29be:	0c f4       	brge	.+2      	; 0x29c2 <_Z8USB_SendhPKvi+0x9c>
    29c0:	1e 2d       	mov	r17, r14
    29c2:	69 2d       	mov	r22, r9
    29c4:	ce 01       	movw	r24, r28
    29c6:	01 96       	adiw	r24, 0x01	; 1
    29c8:	0e 94 05 14 	call	0x280a	; 0x280a <_ZN6LockEPC1Eh>
    29cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    29d0:	85 ff       	sbrs	r24, 5
    29d2:	34 c0       	rjmp	.+104    	; 0x2a3c <_Z8USB_SendhPKvi+0x116>
    29d4:	81 2f       	mov	r24, r17
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	e8 1a       	sub	r14, r24
    29da:	f9 0a       	sbc	r15, r25
    29dc:	66 20       	and	r6, r6
    29de:	29 f0       	breq	.+10     	; 0x29ea <_Z8USB_SendhPKvi+0xc4>
    29e0:	11 50       	subi	r17, 0x01	; 1
    29e2:	a0 f0       	brcs	.+40     	; 0x2a0c <_Z8USB_SendhPKvi+0xe6>
    29e4:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    29e8:	fb cf       	rjmp	.-10     	; 0x29e0 <_Z8USB_SendhPKvi+0xba>
    29ea:	f6 01       	movw	r30, r12
    29ec:	97 fe       	sbrs	r9, 7
    29ee:	0a c0       	rjmp	.+20     	; 0x2a04 <_Z8USB_SendhPKvi+0xde>
    29f0:	11 50       	subi	r17, 0x01	; 1
    29f2:	50 f0       	brcs	.+20     	; 0x2a08 <_Z8USB_SendhPKvi+0xe2>
    29f4:	24 91       	lpm	r18, Z
    29f6:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    29fa:	31 96       	adiw	r30, 0x01	; 1
    29fc:	f9 cf       	rjmp	.-14     	; 0x29f0 <_Z8USB_SendhPKvi+0xca>
    29fe:	21 91       	ld	r18, Z+
    2a00:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2a04:	11 50       	subi	r17, 0x01	; 1
    2a06:	d8 f7       	brcc	.-10     	; 0x29fe <_Z8USB_SendhPKvi+0xd8>
    2a08:	c8 0e       	add	r12, r24
    2a0a:	d9 1e       	adc	r13, r25
    2a0c:	aa 20       	and	r10, r10
    2a0e:	19 f0       	breq	.+6      	; 0x2a16 <_Z8USB_SendhPKvi+0xf0>
    2a10:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a14:	0b c0       	rjmp	.+22     	; 0x2a2c <_Z8USB_SendhPKvi+0x106>
    2a16:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a1a:	85 fd       	sbrc	r24, 5
    2a1c:	09 c0       	rjmp	.+18     	; 0x2a30 <_Z8USB_SendhPKvi+0x10a>
    2a1e:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a22:	aa 24       	eor	r10, r10
    2a24:	a3 94       	inc	r10
    2a26:	e1 14       	cp	r14, r1
    2a28:	f1 04       	cpc	r15, r1
    2a2a:	41 f0       	breq	.+16     	; 0x2a3c <_Z8USB_SendhPKvi+0x116>
    2a2c:	a1 2c       	mov	r10, r1
    2a2e:	06 c0       	rjmp	.+12     	; 0x2a3c <_Z8USB_SendhPKvi+0x116>
    2a30:	e1 14       	cp	r14, r1
    2a32:	f1 04       	cpc	r15, r1
    2a34:	19 f4       	brne	.+6      	; 0x2a3c <_Z8USB_SendhPKvi+0x116>
    2a36:	51 10       	cpse	r5, r1
    2a38:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	8f bf       	out	0x3f, r24	; 63
    2a40:	a5 cf       	rjmp	.-182    	; 0x298c <_Z8USB_SendhPKvi+0x66>
    2a42:	5d 98       	cbi	0x0b, 5	; 11
    2a44:	84 e6       	ldi	r24, 0x64	; 100
    2a46:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <TxLEDPulse>
    2a4a:	8b 2d       	mov	r24, r11
    2a4c:	90 2f       	mov	r25, r16
    2a4e:	0f 90       	pop	r0
    2a50:	df 91       	pop	r29
    2a52:	cf 91       	pop	r28
    2a54:	1f 91       	pop	r17
    2a56:	0f 91       	pop	r16
    2a58:	ff 90       	pop	r15
    2a5a:	ef 90       	pop	r14
    2a5c:	df 90       	pop	r13
    2a5e:	cf 90       	pop	r12
    2a60:	bf 90       	pop	r11
    2a62:	af 90       	pop	r10
    2a64:	9f 90       	pop	r9
    2a66:	8f 90       	pop	r8
    2a68:	7f 90       	pop	r7
    2a6a:	6f 90       	pop	r6
    2a6c:	5f 90       	pop	r5
    2a6e:	08 95       	ret

00002a70 <_Z11InitControli>:
    2a70:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2a74:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <_ZL6_cmark+0x1>
    2a78:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <_ZL6_cmark>
    2a7c:	90 93 6b 04 	sts	0x046B, r25	; 0x80046b <_ZL5_cend+0x1>
    2a80:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <_ZL5_cend>
    2a84:	08 95       	ret

00002a86 <_Z15USB_SendControlhPKvi>:
    2a86:	df 92       	push	r13
    2a88:	ef 92       	push	r14
    2a8a:	ff 92       	push	r15
    2a8c:	0f 93       	push	r16
    2a8e:	1f 93       	push	r17
    2a90:	cf 93       	push	r28
    2a92:	df 93       	push	r29
    2a94:	d8 2e       	mov	r13, r24
    2a96:	8a 01       	movw	r16, r20
    2a98:	7b 01       	movw	r14, r22
    2a9a:	e4 0e       	add	r14, r20
    2a9c:	f5 1e       	adc	r15, r21
    2a9e:	eb 01       	movw	r28, r22
    2aa0:	ce 15       	cp	r28, r14
    2aa2:	df 05       	cpc	r29, r15
    2aa4:	71 f0       	breq	.+28     	; 0x2ac2 <_Z15USB_SendControlhPKvi+0x3c>
    2aa6:	d7 fe       	sbrs	r13, 7
    2aa8:	03 c0       	rjmp	.+6      	; 0x2ab0 <_Z15USB_SendControlhPKvi+0x2a>
    2aaa:	fe 01       	movw	r30, r28
    2aac:	84 91       	lpm	r24, Z
    2aae:	01 c0       	rjmp	.+2      	; 0x2ab2 <_Z15USB_SendControlhPKvi+0x2c>
    2ab0:	88 81       	ld	r24, Y
    2ab2:	0e 94 69 13 	call	0x26d2	; 0x26d2 <_ZL11SendControlh>
    2ab6:	21 96       	adiw	r28, 0x01	; 1
    2ab8:	81 11       	cpse	r24, r1
    2aba:	f2 cf       	rjmp	.-28     	; 0x2aa0 <_Z15USB_SendControlhPKvi+0x1a>
    2abc:	8f ef       	ldi	r24, 0xFF	; 255
    2abe:	9f ef       	ldi	r25, 0xFF	; 255
    2ac0:	01 c0       	rjmp	.+2      	; 0x2ac4 <_Z15USB_SendControlhPKvi+0x3e>
    2ac2:	c8 01       	movw	r24, r16
    2ac4:	df 91       	pop	r29
    2ac6:	cf 91       	pop	r28
    2ac8:	1f 91       	pop	r17
    2aca:	0f 91       	pop	r16
    2acc:	ff 90       	pop	r15
    2ace:	ef 90       	pop	r14
    2ad0:	df 90       	pop	r13
    2ad2:	08 95       	ret

00002ad4 <_Z15USB_RecvControlPvi>:
    2ad4:	af 92       	push	r10
    2ad6:	bf 92       	push	r11
    2ad8:	df 92       	push	r13
    2ada:	ef 92       	push	r14
    2adc:	ff 92       	push	r15
    2ade:	0f 93       	push	r16
    2ae0:	1f 93       	push	r17
    2ae2:	cf 93       	push	r28
    2ae4:	df 93       	push	r29
    2ae6:	5c 01       	movw	r10, r24
    2ae8:	8b 01       	movw	r16, r22
    2aea:	eb 01       	movw	r28, r22
    2aec:	9b ef       	ldi	r25, 0xFB	; 251
    2aee:	d9 2e       	mov	r13, r25
    2af0:	20 97       	sbiw	r28, 0x00	; 0
    2af2:	c1 f0       	breq	.+48     	; 0x2b24 <_Z15USB_RecvControlPvi+0x50>
    2af4:	7e 01       	movw	r14, r28
    2af6:	c1 34       	cpi	r28, 0x41	; 65
    2af8:	d1 05       	cpc	r29, r1
    2afa:	1c f0       	brlt	.+6      	; 0x2b02 <_Z15USB_RecvControlPvi+0x2e>
    2afc:	80 e4       	ldi	r24, 0x40	; 64
    2afe:	e8 2e       	mov	r14, r24
    2b00:	f1 2c       	mov	r15, r1
    2b02:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2b06:	82 ff       	sbrs	r24, 2
    2b08:	fc cf       	rjmp	.-8      	; 0x2b02 <_Z15USB_RecvControlPvi+0x2e>
    2b0a:	c8 01       	movw	r24, r16
    2b0c:	8c 1b       	sub	r24, r28
    2b0e:	9d 0b       	sbc	r25, r29
    2b10:	6e 2d       	mov	r22, r14
    2b12:	8a 0d       	add	r24, r10
    2b14:	9b 1d       	adc	r25, r11
    2b16:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_ZL4RecvPVhh>
    2b1a:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2b1e:	ce 19       	sub	r28, r14
    2b20:	df 09       	sbc	r29, r15
    2b22:	e6 cf       	rjmp	.-52     	; 0x2af0 <_Z15USB_RecvControlPvi+0x1c>
    2b24:	c8 01       	movw	r24, r16
    2b26:	df 91       	pop	r29
    2b28:	cf 91       	pop	r28
    2b2a:	1f 91       	pop	r17
    2b2c:	0f 91       	pop	r16
    2b2e:	ff 90       	pop	r15
    2b30:	ef 90       	pop	r14
    2b32:	df 90       	pop	r13
    2b34:	bf 90       	pop	r11
    2b36:	af 90       	pop	r10
    2b38:	08 95       	ret

00002b3a <__vector_11>:
    2b3a:	1f 92       	push	r1
    2b3c:	0f 92       	push	r0
    2b3e:	0f b6       	in	r0, 0x3f	; 63
    2b40:	0f 92       	push	r0
    2b42:	11 24       	eor	r1, r1
    2b44:	cf 92       	push	r12
    2b46:	df 92       	push	r13
    2b48:	ef 92       	push	r14
    2b4a:	ff 92       	push	r15
    2b4c:	0f 93       	push	r16
    2b4e:	1f 93       	push	r17
    2b50:	2f 93       	push	r18
    2b52:	3f 93       	push	r19
    2b54:	4f 93       	push	r20
    2b56:	5f 93       	push	r21
    2b58:	6f 93       	push	r22
    2b5a:	7f 93       	push	r23
    2b5c:	8f 93       	push	r24
    2b5e:	9f 93       	push	r25
    2b60:	af 93       	push	r26
    2b62:	bf 93       	push	r27
    2b64:	ef 93       	push	r30
    2b66:	ff 93       	push	r31
    2b68:	cf 93       	push	r28
    2b6a:	df 93       	push	r29
    2b6c:	cd b7       	in	r28, 0x3d	; 61
    2b6e:	de b7       	in	r29, 0x3e	; 62
    2b70:	6c 97       	sbiw	r28, 0x1c	; 28
    2b72:	de bf       	out	0x3e, r29	; 62
    2b74:	cd bf       	out	0x3d, r28	; 61
    2b76:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2b7a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2b7e:	83 ff       	sbrs	r24, 3
    2b80:	17 c1       	rjmp	.+558    	; 0x2db0 <__vector_11+0x276>
    2b82:	68 e0       	ldi	r22, 0x08	; 8
    2b84:	ce 01       	movw	r24, r28
    2b86:	45 96       	adiw	r24, 0x15	; 21
    2b88:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_ZL4RecvPVhh>
    2b8c:	82 ef       	ldi	r24, 0xF2	; 242
    2b8e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2b92:	8d 89       	ldd	r24, Y+21	; 0x15
    2b94:	87 ff       	sbrs	r24, 7
    2b96:	05 c0       	rjmp	.+10     	; 0x2ba2 <__vector_11+0x68>
    2b98:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2b9c:	90 ff       	sbrs	r25, 0
    2b9e:	fc cf       	rjmp	.-8      	; 0x2b98 <__vector_11+0x5e>
    2ba0:	03 c0       	rjmp	.+6      	; 0x2ba8 <__vector_11+0x6e>
    2ba2:	9e ef       	ldi	r25, 0xFE	; 254
    2ba4:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2ba8:	98 2f       	mov	r25, r24
    2baa:	90 76       	andi	r25, 0x60	; 96
    2bac:	09 f0       	breq	.+2      	; 0x2bb0 <__vector_11+0x76>
    2bae:	d8 c0       	rjmp	.+432    	; 0x2d60 <__vector_11+0x226>
    2bb0:	9e 89       	ldd	r25, Y+22	; 0x16
    2bb2:	4f 89       	ldd	r20, Y+23	; 0x17
    2bb4:	58 8d       	ldd	r21, Y+24	; 0x18
    2bb6:	2f 89       	ldd	r18, Y+23	; 0x17
    2bb8:	18 8d       	ldd	r17, Y+24	; 0x18
    2bba:	91 11       	cpse	r25, r1
    2bbc:	0c c0       	rjmp	.+24     	; 0x2bd6 <__vector_11+0x9c>
    2bbe:	80 38       	cpi	r24, 0x80	; 128
    2bc0:	29 f4       	brne	.+10     	; 0x2bcc <__vector_11+0x92>
    2bc2:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <_usbCurrentStatus>
    2bc6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2bca:	02 c0       	rjmp	.+4      	; 0x2bd0 <__vector_11+0x96>
    2bcc:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2bd0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2bd4:	e6 c0       	rjmp	.+460    	; 0x2da2 <__vector_11+0x268>
    2bd6:	91 30       	cpi	r25, 0x01	; 1
    2bd8:	51 f4       	brne	.+20     	; 0x2bee <__vector_11+0xb4>
    2bda:	81 11       	cpse	r24, r1
    2bdc:	e2 c0       	rjmp	.+452    	; 0x2da2 <__vector_11+0x268>
    2bde:	41 30       	cpi	r20, 0x01	; 1
    2be0:	51 05       	cpc	r21, r1
    2be2:	09 f0       	breq	.+2      	; 0x2be6 <__vector_11+0xac>
    2be4:	de c0       	rjmp	.+444    	; 0x2da2 <__vector_11+0x268>
    2be6:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <_usbCurrentStatus>
    2bea:	8d 7f       	andi	r24, 0xFD	; 253
    2bec:	0b c0       	rjmp	.+22     	; 0x2c04 <__vector_11+0xca>
    2bee:	93 30       	cpi	r25, 0x03	; 3
    2bf0:	61 f4       	brne	.+24     	; 0x2c0a <__vector_11+0xd0>
    2bf2:	81 11       	cpse	r24, r1
    2bf4:	d6 c0       	rjmp	.+428    	; 0x2da2 <__vector_11+0x268>
    2bf6:	41 30       	cpi	r20, 0x01	; 1
    2bf8:	51 05       	cpc	r21, r1
    2bfa:	09 f0       	breq	.+2      	; 0x2bfe <__vector_11+0xc4>
    2bfc:	d2 c0       	rjmp	.+420    	; 0x2da2 <__vector_11+0x268>
    2bfe:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <_usbCurrentStatus>
    2c02:	82 60       	ori	r24, 0x02	; 2
    2c04:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <_usbCurrentStatus>
    2c08:	cc c0       	rjmp	.+408    	; 0x2da2 <__vector_11+0x268>
    2c0a:	95 30       	cpi	r25, 0x05	; 5
    2c0c:	49 f4       	brne	.+18     	; 0x2c20 <__vector_11+0xe6>
    2c0e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2c12:	80 ff       	sbrs	r24, 0
    2c14:	fc cf       	rjmp	.-8      	; 0x2c0e <__vector_11+0xd4>
    2c16:	82 2f       	mov	r24, r18
    2c18:	80 68       	ori	r24, 0x80	; 128
    2c1a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    2c1e:	c1 c0       	rjmp	.+386    	; 0x2da2 <__vector_11+0x268>
    2c20:	96 30       	cpi	r25, 0x06	; 6
    2c22:	09 f0       	breq	.+2      	; 0x2c26 <__vector_11+0xec>
    2c24:	70 c0       	rjmp	.+224    	; 0x2d06 <__vector_11+0x1cc>
    2c26:	eb 8c       	ldd	r14, Y+27	; 0x1b
    2c28:	fc 8c       	ldd	r15, Y+28	; 0x1c
    2c2a:	12 30       	cpi	r17, 0x02	; 2
    2c2c:	69 f5       	brne	.+90     	; 0x2c88 <__vector_11+0x14e>
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	0e 94 38 15 	call	0x2a70	; 0x2a70 <_Z11InitControli>
    2c36:	0e 94 ef 13 	call	0x27de	; 0x27de <_ZL14SendInterfacesv>
    2c3a:	99 e0       	ldi	r25, 0x09	; 9
    2c3c:	9e 01       	movw	r18, r28
    2c3e:	2f 5f       	subi	r18, 0xFF	; 255
    2c40:	3f 4f       	sbci	r19, 0xFF	; 255
    2c42:	69 01       	movw	r12, r18
    2c44:	f9 01       	movw	r30, r18
    2c46:	29 2f       	mov	r18, r25
    2c48:	11 92       	st	Z+, r1
    2c4a:	2a 95       	dec	r18
    2c4c:	e9 f7       	brne	.-6      	; 0x2c48 <__vector_11+0x10e>
    2c4e:	99 83       	std	Y+1, r25	; 0x01
    2c50:	1a 83       	std	Y+2, r17	; 0x02
    2c52:	91 e0       	ldi	r25, 0x01	; 1
    2c54:	9e 83       	std	Y+6, r25	; 0x06
    2c56:	90 ea       	ldi	r25, 0xA0	; 160
    2c58:	98 87       	std	Y+8, r25	; 0x08
    2c5a:	9a ef       	ldi	r25, 0xFA	; 250
    2c5c:	99 87       	std	Y+9, r25	; 0x09
    2c5e:	20 91 6c 04 	lds	r18, 0x046C	; 0x80046c <_ZL6_cmark>
    2c62:	30 91 6d 04 	lds	r19, 0x046D	; 0x80046d <_ZL6_cmark+0x1>
    2c66:	27 5f       	subi	r18, 0xF7	; 247
    2c68:	3f 4f       	sbci	r19, 0xFF	; 255
    2c6a:	3c 83       	std	Y+4, r19	; 0x04
    2c6c:	2b 83       	std	Y+3, r18	; 0x03
    2c6e:	8d 83       	std	Y+5, r24	; 0x05
    2c70:	c7 01       	movw	r24, r14
    2c72:	0e 94 38 15 	call	0x2a70	; 0x2a70 <_Z11InitControli>
    2c76:	49 e0       	ldi	r20, 0x09	; 9
    2c78:	50 e0       	ldi	r21, 0x00	; 0
    2c7a:	b6 01       	movw	r22, r12
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	0e 94 43 15 	call	0x2a86	; 0x2a86 <_Z15USB_SendControlhPKvi>
    2c82:	0e 94 ef 13 	call	0x27de	; 0x27de <_ZL14SendInterfacesv>
    2c86:	8d c0       	rjmp	.+282    	; 0x2da2 <__vector_11+0x268>
    2c88:	c7 01       	movw	r24, r14
    2c8a:	0e 94 38 15 	call	0x2a70	; 0x2a70 <_Z11InitControli>
    2c8e:	0e 94 c7 1b 	call	0x378e	; 0x378e <_Z12PluggableUSBv>
    2c92:	be 01       	movw	r22, r28
    2c94:	6b 5e       	subi	r22, 0xEB	; 235
    2c96:	7f 4f       	sbci	r23, 0xFF	; 255
    2c98:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    2c9c:	00 97       	sbiw	r24, 0x00	; 0
    2c9e:	19 f0       	breq	.+6      	; 0x2ca6 <__vector_11+0x16c>
    2ca0:	0c f0       	brlt	.+2      	; 0x2ca4 <__vector_11+0x16a>
    2ca2:	7f c0       	rjmp	.+254    	; 0x2da2 <__vector_11+0x268>
    2ca4:	82 c0       	rjmp	.+260    	; 0x2daa <__vector_11+0x270>
    2ca6:	11 30       	cpi	r17, 0x01	; 1
    2ca8:	09 f4       	brne	.+2      	; 0x2cac <__vector_11+0x172>
    2caa:	70 c0       	rjmp	.+224    	; 0x2d8c <__vector_11+0x252>
    2cac:	13 30       	cpi	r17, 0x03	; 3
    2cae:	09 f0       	breq	.+2      	; 0x2cb2 <__vector_11+0x178>
    2cb0:	7c c0       	rjmp	.+248    	; 0x2daa <__vector_11+0x270>
    2cb2:	8f 89       	ldd	r24, Y+23	; 0x17
    2cb4:	88 23       	and	r24, r24
    2cb6:	09 f4       	brne	.+2      	; 0x2cba <__vector_11+0x180>
    2cb8:	6c c0       	rjmp	.+216    	; 0x2d92 <__vector_11+0x258>
    2cba:	82 30       	cpi	r24, 0x02	; 2
    2cbc:	29 f4       	brne	.+10     	; 0x2cc8 <__vector_11+0x18e>
    2cbe:	40 e8       	ldi	r20, 0x80	; 128
    2cc0:	60 e1       	ldi	r22, 0x10	; 16
    2cc2:	89 ee       	ldi	r24, 0xE9	; 233
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	06 c0       	rjmp	.+12     	; 0x2cd4 <__vector_11+0x19a>
    2cc8:	81 30       	cpi	r24, 0x01	; 1
    2cca:	39 f4       	brne	.+14     	; 0x2cda <__vector_11+0x1a0>
    2ccc:	40 e8       	ldi	r20, 0x80	; 128
    2cce:	6b e0       	ldi	r22, 0x0B	; 11
    2cd0:	8d ed       	ldi	r24, 0xDD	; 221
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	0e 94 97 13 	call	0x272e	; 0x272e <_ZL24USB_SendStringDescriptorPKhhh>
    2cd8:	56 c0       	rjmp	.+172    	; 0x2d86 <__vector_11+0x24c>
    2cda:	83 30       	cpi	r24, 0x03	; 3
    2cdc:	09 f0       	breq	.+2      	; 0x2ce0 <__vector_11+0x1a6>
    2cde:	65 c0       	rjmp	.+202    	; 0x2daa <__vector_11+0x270>
    2ce0:	0e 94 c7 1b 	call	0x378e	; 0x378e <_Z12PluggableUSBv>
    2ce4:	8e 01       	movw	r16, r28
    2ce6:	0f 5f       	subi	r16, 0xFF	; 255
    2ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cea:	b8 01       	movw	r22, r16
    2cec:	0e 94 8a 1b 	call	0x3714	; 0x3714 <_ZN13PluggableUSB_12getShortNameEPc>
    2cf0:	f8 01       	movw	r30, r16
    2cf2:	01 90       	ld	r0, Z+
    2cf4:	00 20       	and	r0, r0
    2cf6:	e9 f7       	brne	.-6      	; 0x2cf2 <__vector_11+0x1b8>
    2cf8:	31 97       	sbiw	r30, 0x01	; 1
    2cfa:	bf 01       	movw	r22, r30
    2cfc:	60 1b       	sub	r22, r16
    2cfe:	71 0b       	sbc	r23, r17
    2d00:	40 e0       	ldi	r20, 0x00	; 0
    2d02:	c8 01       	movw	r24, r16
    2d04:	e7 cf       	rjmp	.-50     	; 0x2cd4 <__vector_11+0x19a>
    2d06:	97 30       	cpi	r25, 0x07	; 7
    2d08:	09 f4       	brne	.+2      	; 0x2d0c <__vector_11+0x1d2>
    2d0a:	4f c0       	rjmp	.+158    	; 0x2daa <__vector_11+0x270>
    2d0c:	98 30       	cpi	r25, 0x08	; 8
    2d0e:	21 f4       	brne	.+8      	; 0x2d18 <__vector_11+0x1de>
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2d16:	45 c0       	rjmp	.+138    	; 0x2da2 <__vector_11+0x268>
    2d18:	99 30       	cpi	r25, 0x09	; 9
    2d1a:	09 f0       	breq	.+2      	; 0x2d1e <__vector_11+0x1e4>
    2d1c:	42 c0       	rjmp	.+132    	; 0x2da2 <__vector_11+0x268>
    2d1e:	83 70       	andi	r24, 0x03	; 3
    2d20:	09 f0       	breq	.+2      	; 0x2d24 <__vector_11+0x1ea>
    2d22:	43 c0       	rjmp	.+134    	; 0x2daa <__vector_11+0x270>
    2d24:	eb e0       	ldi	r30, 0x0B	; 11
    2d26:	f1 e0       	ldi	r31, 0x01	; 1
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	31 e0       	ldi	r19, 0x01	; 1
    2d2c:	96 e3       	ldi	r25, 0x36	; 54
    2d2e:	20 81       	ld	r18, Z
    2d30:	21 11       	cpse	r18, r1
    2d32:	09 c0       	rjmp	.+18     	; 0x2d46 <__vector_11+0x20c>
    2d34:	8e e7       	ldi	r24, 0x7E	; 126
    2d36:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    2d3a:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    2d3e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d40:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <_usbConfiguration>
    2d44:	2e c0       	rjmp	.+92     	; 0x2da2 <__vector_11+0x268>
    2d46:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2d4a:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2d4e:	21 91       	ld	r18, Z+
    2d50:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2d54:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    2d58:	8f 5f       	subi	r24, 0xFF	; 255
    2d5a:	87 30       	cpi	r24, 0x07	; 7
    2d5c:	41 f7       	brne	.-48     	; 0x2d2e <__vector_11+0x1f4>
    2d5e:	ea cf       	rjmp	.-44     	; 0x2d34 <__vector_11+0x1fa>
    2d60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d64:	0e 94 38 15 	call	0x2a70	; 0x2a70 <_Z11InitControli>
    2d68:	89 8d       	ldd	r24, Y+25	; 0x19
    2d6a:	81 11       	cpse	r24, r1
    2d6c:	05 c0       	rjmp	.+10     	; 0x2d78 <__vector_11+0x23e>
    2d6e:	ce 01       	movw	r24, r28
    2d70:	45 96       	adiw	r24, 0x15	; 21
    2d72:	0e 94 9e 1a 	call	0x353c	; 0x353c <_Z9CDC_SetupR8USBSetup>
    2d76:	07 c0       	rjmp	.+14     	; 0x2d86 <__vector_11+0x24c>
    2d78:	0e 94 c7 1b 	call	0x378e	; 0x378e <_Z12PluggableUSBv>
    2d7c:	be 01       	movw	r22, r28
    2d7e:	6b 5e       	subi	r22, 0xEB	; 235
    2d80:	7f 4f       	sbci	r23, 0xFF	; 255
    2d82:	0e 94 a9 1b 	call	0x3752	; 0x3752 <_ZN13PluggableUSB_5setupER8USBSetup>
    2d86:	88 23       	and	r24, r24
    2d88:	81 f0       	breq	.+32     	; 0x2daa <__vector_11+0x270>
    2d8a:	0b c0       	rjmp	.+22     	; 0x2da2 <__vector_11+0x268>
    2d8c:	6b ec       	ldi	r22, 0xCB	; 203
    2d8e:	70 e0       	ldi	r23, 0x00	; 0
    2d90:	02 c0       	rjmp	.+4      	; 0x2d96 <__vector_11+0x25c>
    2d92:	6a ef       	ldi	r22, 0xFA	; 250
    2d94:	70 e0       	ldi	r23, 0x00	; 0
    2d96:	fb 01       	movw	r30, r22
    2d98:	44 91       	lpm	r20, Z
    2d9a:	50 e0       	ldi	r21, 0x00	; 0
    2d9c:	80 e8       	ldi	r24, 0x80	; 128
    2d9e:	0e 94 43 15 	call	0x2a86	; 0x2a86 <_Z15USB_SendControlhPKvi>
    2da2:	8e ef       	ldi	r24, 0xFE	; 254
    2da4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2da8:	03 c0       	rjmp	.+6      	; 0x2db0 <__vector_11+0x276>
    2daa:	81 e2       	ldi	r24, 0x21	; 33
    2dac:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2db0:	6c 96       	adiw	r28, 0x1c	; 28
    2db2:	0f b6       	in	r0, 0x3f	; 63
    2db4:	f8 94       	cli
    2db6:	de bf       	out	0x3e, r29	; 62
    2db8:	0f be       	out	0x3f, r0	; 63
    2dba:	cd bf       	out	0x3d, r28	; 61
    2dbc:	df 91       	pop	r29
    2dbe:	cf 91       	pop	r28
    2dc0:	ff 91       	pop	r31
    2dc2:	ef 91       	pop	r30
    2dc4:	bf 91       	pop	r27
    2dc6:	af 91       	pop	r26
    2dc8:	9f 91       	pop	r25
    2dca:	8f 91       	pop	r24
    2dcc:	7f 91       	pop	r23
    2dce:	6f 91       	pop	r22
    2dd0:	5f 91       	pop	r21
    2dd2:	4f 91       	pop	r20
    2dd4:	3f 91       	pop	r19
    2dd6:	2f 91       	pop	r18
    2dd8:	1f 91       	pop	r17
    2dda:	0f 91       	pop	r16
    2ddc:	ff 90       	pop	r15
    2dde:	ef 90       	pop	r14
    2de0:	df 90       	pop	r13
    2de2:	cf 90       	pop	r12
    2de4:	0f 90       	pop	r0
    2de6:	0f be       	out	0x3f, r0	; 63
    2de8:	0f 90       	pop	r0
    2dea:	1f 90       	pop	r1
    2dec:	18 95       	reti

00002dee <_Z9USB_Flushh>:
    2dee:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2df2:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2df6:	88 23       	and	r24, r24
    2df8:	19 f0       	breq	.+6      	; 0x2e00 <_Z9USB_Flushh+0x12>
    2dfa:	8a e3       	ldi	r24, 0x3A	; 58
    2dfc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2e00:	08 95       	ret

00002e02 <__vector_10>:
    2e02:	1f 92       	push	r1
    2e04:	0f 92       	push	r0
    2e06:	0f b6       	in	r0, 0x3f	; 63
    2e08:	0f 92       	push	r0
    2e0a:	11 24       	eor	r1, r1
    2e0c:	2f 93       	push	r18
    2e0e:	3f 93       	push	r19
    2e10:	4f 93       	push	r20
    2e12:	5f 93       	push	r21
    2e14:	6f 93       	push	r22
    2e16:	7f 93       	push	r23
    2e18:	8f 93       	push	r24
    2e1a:	9f 93       	push	r25
    2e1c:	af 93       	push	r26
    2e1e:	bf 93       	push	r27
    2e20:	cf 93       	push	r28
    2e22:	ef 93       	push	r30
    2e24:	ff 93       	push	r31
    2e26:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2e2a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2e2e:	83 7f       	andi	r24, 0xF3	; 243
    2e30:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2e34:	c3 ff       	sbrs	r28, 3
    2e36:	0f c0       	rjmp	.+30     	; 0x2e56 <__vector_10+0x54>
    2e38:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2e3c:	81 e0       	ldi	r24, 0x01	; 1
    2e3e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2e42:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2e46:	82 e3       	ldi	r24, 0x32	; 50
    2e48:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    2e4c:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <_usbConfiguration>
    2e50:	88 e0       	ldi	r24, 0x08	; 8
    2e52:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    2e56:	c2 ff       	sbrs	r28, 2
    2e58:	19 c0       	rjmp	.+50     	; 0x2e8c <__vector_10+0x8a>
    2e5a:	83 e0       	ldi	r24, 0x03	; 3
    2e5c:	0e 94 f7 16 	call	0x2dee	; 0x2dee <_Z9USB_Flushh>
    2e60:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <TxLEDPulse>
    2e64:	88 23       	and	r24, r24
    2e66:	39 f0       	breq	.+14     	; 0x2e76 <__vector_10+0x74>
    2e68:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <TxLEDPulse>
    2e6c:	81 50       	subi	r24, 0x01	; 1
    2e6e:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <TxLEDPulse>
    2e72:	88 23       	and	r24, r24
    2e74:	89 f1       	breq	.+98     	; 0x2ed8 <__vector_10+0xd6>
    2e76:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <RxLEDPulse>
    2e7a:	88 23       	and	r24, r24
    2e7c:	39 f0       	breq	.+14     	; 0x2e8c <__vector_10+0x8a>
    2e7e:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <RxLEDPulse>
    2e82:	81 50       	subi	r24, 0x01	; 1
    2e84:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <RxLEDPulse>
    2e88:	88 23       	and	r24, r24
    2e8a:	41 f1       	breq	.+80     	; 0x2edc <__vector_10+0xda>
    2e8c:	c4 ff       	sbrs	r28, 4
    2e8e:	10 c0       	rjmp	.+32     	; 0x2eb0 <__vector_10+0xae>
    2e90:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2e94:	8e 7e       	andi	r24, 0xEE	; 238
    2e96:	81 60       	ori	r24, 0x01	; 1
    2e98:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2e9c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2ea0:	8f 7e       	andi	r24, 0xEF	; 239
    2ea2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2ea6:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <_usbSuspendState>
    2eaa:	8e 7e       	andi	r24, 0xEE	; 238
    2eac:	80 61       	ori	r24, 0x10	; 16
    2eae:	11 c0       	rjmp	.+34     	; 0x2ed2 <__vector_10+0xd0>
    2eb0:	c0 ff       	sbrs	r28, 0
    2eb2:	16 c0       	rjmp	.+44     	; 0x2ee0 <__vector_10+0xde>
    2eb4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2eb8:	8e 7e       	andi	r24, 0xEE	; 238
    2eba:	80 61       	ori	r24, 0x10	; 16
    2ebc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2ec0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2ec4:	8e 7e       	andi	r24, 0xEE	; 238
    2ec6:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2eca:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <_usbSuspendState>
    2ece:	8e 7e       	andi	r24, 0xEE	; 238
    2ed0:	81 60       	ori	r24, 0x01	; 1
    2ed2:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <_usbSuspendState>
    2ed6:	04 c0       	rjmp	.+8      	; 0x2ee0 <__vector_10+0xde>
    2ed8:	5d 9a       	sbi	0x0b, 5	; 11
    2eda:	cd cf       	rjmp	.-102    	; 0x2e76 <__vector_10+0x74>
    2edc:	28 9a       	sbi	0x05, 0	; 5
    2ede:	d6 cf       	rjmp	.-84     	; 0x2e8c <__vector_10+0x8a>
    2ee0:	ff 91       	pop	r31
    2ee2:	ef 91       	pop	r30
    2ee4:	cf 91       	pop	r28
    2ee6:	bf 91       	pop	r27
    2ee8:	af 91       	pop	r26
    2eea:	9f 91       	pop	r25
    2eec:	8f 91       	pop	r24
    2eee:	7f 91       	pop	r23
    2ef0:	6f 91       	pop	r22
    2ef2:	5f 91       	pop	r21
    2ef4:	4f 91       	pop	r20
    2ef6:	3f 91       	pop	r19
    2ef8:	2f 91       	pop	r18
    2efa:	0f 90       	pop	r0
    2efc:	0f be       	out	0x3f, r0	; 63
    2efe:	0f 90       	pop	r0
    2f00:	1f 90       	pop	r1
    2f02:	18 95       	reti

00002f04 <_ZN10USBDevice_6attachEv>:
    2f04:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <_usbConfiguration>
    2f08:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <_usbCurrentStatus>
    2f0c:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <_usbSuspendState>
    2f10:	0e 94 cc 13 	call	0x2798	; 0x2798 <_ZL15USB_ClockEnablev>
    2f14:	e1 ee       	ldi	r30, 0xE1	; 225
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	80 81       	ld	r24, Z
    2f1a:	8e 7e       	andi	r24, 0xEE	; 238
    2f1c:	80 83       	st	Z, r24
    2f1e:	8d e0       	ldi	r24, 0x0D	; 13
    2f20:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2f24:	55 9a       	sbi	0x0a, 5	; 10
    2f26:	20 9a       	sbi	0x04, 0	; 4
    2f28:	08 95       	ret

00002f2a <__vector_23>:
    2f2a:	1f 92       	push	r1
    2f2c:	0f 92       	push	r0
    2f2e:	0f b6       	in	r0, 0x3f	; 63
    2f30:	0f 92       	push	r0
    2f32:	11 24       	eor	r1, r1
    2f34:	2f 93       	push	r18
    2f36:	3f 93       	push	r19
    2f38:	8f 93       	push	r24
    2f3a:	9f 93       	push	r25
    2f3c:	af 93       	push	r26
    2f3e:	bf 93       	push	r27
    2f40:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <timer0_millis>
    2f44:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <timer0_millis+0x1>
    2f48:	a0 91 76 04 	lds	r26, 0x0476	; 0x800476 <timer0_millis+0x2>
    2f4c:	b0 91 77 04 	lds	r27, 0x0477	; 0x800477 <timer0_millis+0x3>
    2f50:	30 91 73 04 	lds	r19, 0x0473	; 0x800473 <timer0_fract>
    2f54:	23 e0       	ldi	r18, 0x03	; 3
    2f56:	23 0f       	add	r18, r19
    2f58:	2d 37       	cpi	r18, 0x7D	; 125
    2f5a:	20 f4       	brcc	.+8      	; 0x2f64 <__vector_23+0x3a>
    2f5c:	01 96       	adiw	r24, 0x01	; 1
    2f5e:	a1 1d       	adc	r26, r1
    2f60:	b1 1d       	adc	r27, r1
    2f62:	05 c0       	rjmp	.+10     	; 0x2f6e <__vector_23+0x44>
    2f64:	26 e8       	ldi	r18, 0x86	; 134
    2f66:	23 0f       	add	r18, r19
    2f68:	02 96       	adiw	r24, 0x02	; 2
    2f6a:	a1 1d       	adc	r26, r1
    2f6c:	b1 1d       	adc	r27, r1
    2f6e:	20 93 73 04 	sts	0x0473, r18	; 0x800473 <timer0_fract>
    2f72:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <timer0_millis>
    2f76:	90 93 75 04 	sts	0x0475, r25	; 0x800475 <timer0_millis+0x1>
    2f7a:	a0 93 76 04 	sts	0x0476, r26	; 0x800476 <timer0_millis+0x2>
    2f7e:	b0 93 77 04 	sts	0x0477, r27	; 0x800477 <timer0_millis+0x3>
    2f82:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <timer0_overflow_count>
    2f86:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <timer0_overflow_count+0x1>
    2f8a:	a0 91 7a 04 	lds	r26, 0x047A	; 0x80047a <timer0_overflow_count+0x2>
    2f8e:	b0 91 7b 04 	lds	r27, 0x047B	; 0x80047b <timer0_overflow_count+0x3>
    2f92:	01 96       	adiw	r24, 0x01	; 1
    2f94:	a1 1d       	adc	r26, r1
    2f96:	b1 1d       	adc	r27, r1
    2f98:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <timer0_overflow_count>
    2f9c:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <timer0_overflow_count+0x1>
    2fa0:	a0 93 7a 04 	sts	0x047A, r26	; 0x80047a <timer0_overflow_count+0x2>
    2fa4:	b0 93 7b 04 	sts	0x047B, r27	; 0x80047b <timer0_overflow_count+0x3>
    2fa8:	bf 91       	pop	r27
    2faa:	af 91       	pop	r26
    2fac:	9f 91       	pop	r25
    2fae:	8f 91       	pop	r24
    2fb0:	3f 91       	pop	r19
    2fb2:	2f 91       	pop	r18
    2fb4:	0f 90       	pop	r0
    2fb6:	0f be       	out	0x3f, r0	; 63
    2fb8:	0f 90       	pop	r0
    2fba:	1f 90       	pop	r1
    2fbc:	18 95       	reti

00002fbe <millis>:
    2fbe:	2f b7       	in	r18, 0x3f	; 63
    2fc0:	f8 94       	cli
    2fc2:	60 91 74 04 	lds	r22, 0x0474	; 0x800474 <timer0_millis>
    2fc6:	70 91 75 04 	lds	r23, 0x0475	; 0x800475 <timer0_millis+0x1>
    2fca:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <timer0_millis+0x2>
    2fce:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <timer0_millis+0x3>
    2fd2:	2f bf       	out	0x3f, r18	; 63
    2fd4:	08 95       	ret

00002fd6 <micros>:
    2fd6:	3f b7       	in	r19, 0x3f	; 63
    2fd8:	f8 94       	cli
    2fda:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <timer0_overflow_count>
    2fde:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <timer0_overflow_count+0x1>
    2fe2:	a0 91 7a 04 	lds	r26, 0x047A	; 0x80047a <timer0_overflow_count+0x2>
    2fe6:	b0 91 7b 04 	lds	r27, 0x047B	; 0x80047b <timer0_overflow_count+0x3>
    2fea:	26 b5       	in	r18, 0x26	; 38
    2fec:	a8 9b       	sbis	0x15, 0	; 21
    2fee:	05 c0       	rjmp	.+10     	; 0x2ffa <micros+0x24>
    2ff0:	2f 3f       	cpi	r18, 0xFF	; 255
    2ff2:	19 f0       	breq	.+6      	; 0x2ffa <micros+0x24>
    2ff4:	01 96       	adiw	r24, 0x01	; 1
    2ff6:	a1 1d       	adc	r26, r1
    2ff8:	b1 1d       	adc	r27, r1
    2ffa:	3f bf       	out	0x3f, r19	; 63
    2ffc:	ba 2f       	mov	r27, r26
    2ffe:	a9 2f       	mov	r26, r25
    3000:	98 2f       	mov	r25, r24
    3002:	88 27       	eor	r24, r24
    3004:	82 0f       	add	r24, r18
    3006:	91 1d       	adc	r25, r1
    3008:	a1 1d       	adc	r26, r1
    300a:	b1 1d       	adc	r27, r1
    300c:	bc 01       	movw	r22, r24
    300e:	cd 01       	movw	r24, r26
    3010:	42 e0       	ldi	r20, 0x02	; 2
    3012:	66 0f       	add	r22, r22
    3014:	77 1f       	adc	r23, r23
    3016:	88 1f       	adc	r24, r24
    3018:	99 1f       	adc	r25, r25
    301a:	4a 95       	dec	r20
    301c:	d1 f7       	brne	.-12     	; 0x3012 <micros+0x3c>
    301e:	08 95       	ret

00003020 <delay>:
    3020:	8f 92       	push	r8
    3022:	9f 92       	push	r9
    3024:	af 92       	push	r10
    3026:	bf 92       	push	r11
    3028:	cf 92       	push	r12
    302a:	df 92       	push	r13
    302c:	ef 92       	push	r14
    302e:	ff 92       	push	r15
    3030:	6b 01       	movw	r12, r22
    3032:	7c 01       	movw	r14, r24
    3034:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <micros>
    3038:	4b 01       	movw	r8, r22
    303a:	5c 01       	movw	r10, r24
    303c:	c1 14       	cp	r12, r1
    303e:	d1 04       	cpc	r13, r1
    3040:	e1 04       	cpc	r14, r1
    3042:	f1 04       	cpc	r15, r1
    3044:	01 f1       	breq	.+64     	; 0x3086 <delay+0x66>
    3046:	0e 94 41 1b 	call	0x3682	; 0x3682 <yield>
    304a:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <micros>
    304e:	dc 01       	movw	r26, r24
    3050:	cb 01       	movw	r24, r22
    3052:	88 19       	sub	r24, r8
    3054:	99 09       	sbc	r25, r9
    3056:	aa 09       	sbc	r26, r10
    3058:	bb 09       	sbc	r27, r11
    305a:	88 3e       	cpi	r24, 0xE8	; 232
    305c:	93 40       	sbci	r25, 0x03	; 3
    305e:	a1 05       	cpc	r26, r1
    3060:	b1 05       	cpc	r27, r1
    3062:	60 f3       	brcs	.-40     	; 0x303c <delay+0x1c>
    3064:	21 e0       	ldi	r18, 0x01	; 1
    3066:	c2 1a       	sub	r12, r18
    3068:	d1 08       	sbc	r13, r1
    306a:	e1 08       	sbc	r14, r1
    306c:	f1 08       	sbc	r15, r1
    306e:	88 ee       	ldi	r24, 0xE8	; 232
    3070:	88 0e       	add	r8, r24
    3072:	83 e0       	ldi	r24, 0x03	; 3
    3074:	98 1e       	adc	r9, r24
    3076:	a1 1c       	adc	r10, r1
    3078:	b1 1c       	adc	r11, r1
    307a:	c1 14       	cp	r12, r1
    307c:	d1 04       	cpc	r13, r1
    307e:	e1 04       	cpc	r14, r1
    3080:	f1 04       	cpc	r15, r1
    3082:	19 f7       	brne	.-58     	; 0x304a <delay+0x2a>
    3084:	db cf       	rjmp	.-74     	; 0x303c <delay+0x1c>
    3086:	ff 90       	pop	r15
    3088:	ef 90       	pop	r14
    308a:	df 90       	pop	r13
    308c:	cf 90       	pop	r12
    308e:	bf 90       	pop	r11
    3090:	af 90       	pop	r10
    3092:	9f 90       	pop	r9
    3094:	8f 90       	pop	r8
    3096:	08 95       	ret

00003098 <init>:
    3098:	78 94       	sei
    309a:	84 b5       	in	r24, 0x24	; 36
    309c:	82 60       	ori	r24, 0x02	; 2
    309e:	84 bd       	out	0x24, r24	; 36
    30a0:	84 b5       	in	r24, 0x24	; 36
    30a2:	81 60       	ori	r24, 0x01	; 1
    30a4:	84 bd       	out	0x24, r24	; 36
    30a6:	85 b5       	in	r24, 0x25	; 37
    30a8:	82 60       	ori	r24, 0x02	; 2
    30aa:	85 bd       	out	0x25, r24	; 37
    30ac:	85 b5       	in	r24, 0x25	; 37
    30ae:	81 60       	ori	r24, 0x01	; 1
    30b0:	85 bd       	out	0x25, r24	; 37
    30b2:	ee e6       	ldi	r30, 0x6E	; 110
    30b4:	f0 e0       	ldi	r31, 0x00	; 0
    30b6:	80 81       	ld	r24, Z
    30b8:	81 60       	ori	r24, 0x01	; 1
    30ba:	80 83       	st	Z, r24
    30bc:	e1 e8       	ldi	r30, 0x81	; 129
    30be:	f0 e0       	ldi	r31, 0x00	; 0
    30c0:	10 82       	st	Z, r1
    30c2:	80 81       	ld	r24, Z
    30c4:	82 60       	ori	r24, 0x02	; 2
    30c6:	80 83       	st	Z, r24
    30c8:	80 81       	ld	r24, Z
    30ca:	81 60       	ori	r24, 0x01	; 1
    30cc:	80 83       	st	Z, r24
    30ce:	e0 e8       	ldi	r30, 0x80	; 128
    30d0:	f0 e0       	ldi	r31, 0x00	; 0
    30d2:	80 81       	ld	r24, Z
    30d4:	81 60       	ori	r24, 0x01	; 1
    30d6:	80 83       	st	Z, r24
    30d8:	e1 e9       	ldi	r30, 0x91	; 145
    30da:	f0 e0       	ldi	r31, 0x00	; 0
    30dc:	80 81       	ld	r24, Z
    30de:	82 60       	ori	r24, 0x02	; 2
    30e0:	80 83       	st	Z, r24
    30e2:	80 81       	ld	r24, Z
    30e4:	81 60       	ori	r24, 0x01	; 1
    30e6:	80 83       	st	Z, r24
    30e8:	e0 e9       	ldi	r30, 0x90	; 144
    30ea:	f0 e0       	ldi	r31, 0x00	; 0
    30ec:	80 81       	ld	r24, Z
    30ee:	81 60       	ori	r24, 0x01	; 1
    30f0:	80 83       	st	Z, r24
    30f2:	e1 ec       	ldi	r30, 0xC1	; 193
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	80 81       	ld	r24, Z
    30f8:	84 60       	ori	r24, 0x04	; 4
    30fa:	80 83       	st	Z, r24
    30fc:	80 81       	ld	r24, Z
    30fe:	82 60       	ori	r24, 0x02	; 2
    3100:	80 83       	st	Z, r24
    3102:	80 81       	ld	r24, Z
    3104:	81 60       	ori	r24, 0x01	; 1
    3106:	80 83       	st	Z, r24
    3108:	e3 ec       	ldi	r30, 0xC3	; 195
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	80 81       	ld	r24, Z
    310e:	81 60       	ori	r24, 0x01	; 1
    3110:	80 83       	st	Z, r24
    3112:	e0 ec       	ldi	r30, 0xC0	; 192
    3114:	f0 e0       	ldi	r31, 0x00	; 0
    3116:	80 81       	ld	r24, Z
    3118:	82 60       	ori	r24, 0x02	; 2
    311a:	80 83       	st	Z, r24
    311c:	e2 ec       	ldi	r30, 0xC2	; 194
    311e:	f0 e0       	ldi	r31, 0x00	; 0
    3120:	80 81       	ld	r24, Z
    3122:	81 60       	ori	r24, 0x01	; 1
    3124:	80 83       	st	Z, r24
    3126:	ea e7       	ldi	r30, 0x7A	; 122
    3128:	f0 e0       	ldi	r31, 0x00	; 0
    312a:	80 81       	ld	r24, Z
    312c:	84 60       	ori	r24, 0x04	; 4
    312e:	80 83       	st	Z, r24
    3130:	80 81       	ld	r24, Z
    3132:	82 60       	ori	r24, 0x02	; 2
    3134:	80 83       	st	Z, r24
    3136:	80 81       	ld	r24, Z
    3138:	81 60       	ori	r24, 0x01	; 1
    313a:	80 83       	st	Z, r24
    313c:	80 81       	ld	r24, Z
    313e:	80 68       	ori	r24, 0x80	; 128
    3140:	80 83       	st	Z, r24
    3142:	08 95       	ret

00003144 <analogRead>:
    3144:	82 31       	cpi	r24, 0x12	; 18
    3146:	08 f0       	brcs	.+2      	; 0x314a <analogRead+0x6>
    3148:	82 51       	subi	r24, 0x12	; 18
    314a:	e8 2f       	mov	r30, r24
    314c:	f0 e0       	ldi	r31, 0x00	; 0
    314e:	e2 50       	subi	r30, 0x02	; 2
    3150:	ff 4f       	sbci	r31, 0xFF	; 255
    3152:	e4 91       	lpm	r30, Z
    3154:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    3158:	e3 fb       	bst	r30, 3
    315a:	22 27       	eor	r18, r18
    315c:	20 f9       	bld	r18, 0
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	95 e0       	ldi	r25, 0x05	; 5
    3162:	22 0f       	add	r18, r18
    3164:	33 1f       	adc	r19, r19
    3166:	9a 95       	dec	r25
    3168:	e1 f7       	brne	.-8      	; 0x3162 <analogRead+0x1e>
    316a:	8f 7d       	andi	r24, 0xDF	; 223
    316c:	28 2b       	or	r18, r24
    316e:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    3172:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <analog_reference>
    3176:	20 e4       	ldi	r18, 0x40	; 64
    3178:	82 9f       	mul	r24, r18
    317a:	c0 01       	movw	r24, r0
    317c:	11 24       	eor	r1, r1
    317e:	e7 70       	andi	r30, 0x07	; 7
    3180:	e8 2b       	or	r30, r24
    3182:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    3186:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    318a:	80 64       	ori	r24, 0x40	; 64
    318c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3190:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3194:	86 fd       	sbrc	r24, 6
    3196:	fc cf       	rjmp	.-8      	; 0x3190 <analogRead+0x4c>
    3198:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    319c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	92 2b       	or	r25, r18
    31a4:	08 95       	ret

000031a6 <turnOffPWM>:
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	fc 01       	movw	r30, r24
    31aa:	31 97       	sbiw	r30, 0x01	; 1
    31ac:	ef 30       	cpi	r30, 0x0F	; 15
    31ae:	f1 05       	cpc	r31, r1
    31b0:	b0 f5       	brcc	.+108    	; 0x321e <turnOffPWM+0x78>
    31b2:	ea 5a       	subi	r30, 0xAA	; 170
    31b4:	ff 4f       	sbci	r31, 0xFF	; 255
    31b6:	0c 94 b7 1c 	jmp	0x396e	; 0x396e <__tablejump2__>
    31ba:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    31be:	8f 77       	andi	r24, 0x7F	; 127
    31c0:	03 c0       	rjmp	.+6      	; 0x31c8 <turnOffPWM+0x22>
    31c2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    31c6:	8f 7d       	andi	r24, 0xDF	; 223
    31c8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    31cc:	08 95       	ret
    31ce:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    31d2:	87 7f       	andi	r24, 0xF7	; 247
    31d4:	f9 cf       	rjmp	.-14     	; 0x31c8 <turnOffPWM+0x22>
    31d6:	84 b5       	in	r24, 0x24	; 36
    31d8:	8f 77       	andi	r24, 0x7F	; 127
    31da:	02 c0       	rjmp	.+4      	; 0x31e0 <turnOffPWM+0x3a>
    31dc:	84 b5       	in	r24, 0x24	; 36
    31de:	8f 7d       	andi	r24, 0xDF	; 223
    31e0:	84 bd       	out	0x24, r24	; 36
    31e2:	08 95       	ret
    31e4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    31e8:	8f 77       	andi	r24, 0x7F	; 127
    31ea:	07 c0       	rjmp	.+14     	; 0x31fa <turnOffPWM+0x54>
    31ec:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    31f0:	8f 7d       	andi	r24, 0xDF	; 223
    31f2:	03 c0       	rjmp	.+6      	; 0x31fa <turnOffPWM+0x54>
    31f4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    31f8:	87 7f       	andi	r24, 0xF7	; 247
    31fa:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    31fe:	08 95       	ret
    3200:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3204:	8f 77       	andi	r24, 0x7F	; 127
    3206:	03 c0       	rjmp	.+6      	; 0x320e <turnOffPWM+0x68>
    3208:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    320c:	8f 7d       	andi	r24, 0xDF	; 223
    320e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3212:	08 95       	ret
    3214:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    3218:	87 7f       	andi	r24, 0xF7	; 247
    321a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    321e:	08 95       	ret

00003220 <pinMode>:
    3220:	cf 93       	push	r28
    3222:	df 93       	push	r29
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	fc 01       	movw	r30, r24
    3228:	e7 5d       	subi	r30, 0xD7	; 215
    322a:	fe 4f       	sbci	r31, 0xFE	; 254
    322c:	24 91       	lpm	r18, Z
    322e:	fc 01       	movw	r30, r24
    3230:	e8 5b       	subi	r30, 0xB8	; 184
    3232:	fe 4f       	sbci	r31, 0xFE	; 254
    3234:	84 91       	lpm	r24, Z
    3236:	88 23       	and	r24, r24
    3238:	61 f1       	breq	.+88     	; 0x3292 <pinMode+0x72>
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	88 0f       	add	r24, r24
    323e:	99 1f       	adc	r25, r25
    3240:	fc 01       	movw	r30, r24
    3242:	ed 57       	subi	r30, 0x7D	; 125
    3244:	fe 4f       	sbci	r31, 0xFE	; 254
    3246:	c5 91       	lpm	r28, Z+
    3248:	d4 91       	lpm	r29, Z
    324a:	fc 01       	movw	r30, r24
    324c:	eb 58       	subi	r30, 0x8B	; 139
    324e:	fe 4f       	sbci	r31, 0xFE	; 254
    3250:	a5 91       	lpm	r26, Z+
    3252:	b4 91       	lpm	r27, Z
    3254:	61 11       	cpse	r22, r1
    3256:	09 c0       	rjmp	.+18     	; 0x326a <pinMode+0x4a>
    3258:	9f b7       	in	r25, 0x3f	; 63
    325a:	f8 94       	cli
    325c:	88 81       	ld	r24, Y
    325e:	20 95       	com	r18
    3260:	82 23       	and	r24, r18
    3262:	88 83       	st	Y, r24
    3264:	ec 91       	ld	r30, X
    3266:	2e 23       	and	r18, r30
    3268:	0b c0       	rjmp	.+22     	; 0x3280 <pinMode+0x60>
    326a:	62 30       	cpi	r22, 0x02	; 2
    326c:	61 f4       	brne	.+24     	; 0x3286 <pinMode+0x66>
    326e:	9f b7       	in	r25, 0x3f	; 63
    3270:	f8 94       	cli
    3272:	88 81       	ld	r24, Y
    3274:	32 2f       	mov	r19, r18
    3276:	30 95       	com	r19
    3278:	83 23       	and	r24, r19
    327a:	88 83       	st	Y, r24
    327c:	ec 91       	ld	r30, X
    327e:	2e 2b       	or	r18, r30
    3280:	2c 93       	st	X, r18
    3282:	9f bf       	out	0x3f, r25	; 63
    3284:	06 c0       	rjmp	.+12     	; 0x3292 <pinMode+0x72>
    3286:	8f b7       	in	r24, 0x3f	; 63
    3288:	f8 94       	cli
    328a:	e8 81       	ld	r30, Y
    328c:	2e 2b       	or	r18, r30
    328e:	28 83       	st	Y, r18
    3290:	8f bf       	out	0x3f, r24	; 63
    3292:	df 91       	pop	r29
    3294:	cf 91       	pop	r28
    3296:	08 95       	ret

00003298 <digitalWrite>:
    3298:	1f 93       	push	r17
    329a:	cf 93       	push	r28
    329c:	df 93       	push	r29
    329e:	28 2f       	mov	r18, r24
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	f9 01       	movw	r30, r18
    32a4:	e6 5f       	subi	r30, 0xF6	; 246
    32a6:	fe 4f       	sbci	r31, 0xFE	; 254
    32a8:	84 91       	lpm	r24, Z
    32aa:	f9 01       	movw	r30, r18
    32ac:	e7 5d       	subi	r30, 0xD7	; 215
    32ae:	fe 4f       	sbci	r31, 0xFE	; 254
    32b0:	d4 91       	lpm	r29, Z
    32b2:	f9 01       	movw	r30, r18
    32b4:	e8 5b       	subi	r30, 0xB8	; 184
    32b6:	fe 4f       	sbci	r31, 0xFE	; 254
    32b8:	c4 91       	lpm	r28, Z
    32ba:	cc 23       	and	r28, r28
    32bc:	c1 f0       	breq	.+48     	; 0x32ee <digitalWrite+0x56>
    32be:	16 2f       	mov	r17, r22
    32c0:	81 11       	cpse	r24, r1
    32c2:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <turnOffPWM>
    32c6:	ec 2f       	mov	r30, r28
    32c8:	f0 e0       	ldi	r31, 0x00	; 0
    32ca:	ee 0f       	add	r30, r30
    32cc:	ff 1f       	adc	r31, r31
    32ce:	eb 58       	subi	r30, 0x8B	; 139
    32d0:	fe 4f       	sbci	r31, 0xFE	; 254
    32d2:	a5 91       	lpm	r26, Z+
    32d4:	b4 91       	lpm	r27, Z
    32d6:	9f b7       	in	r25, 0x3f	; 63
    32d8:	f8 94       	cli
    32da:	11 11       	cpse	r17, r1
    32dc:	04 c0       	rjmp	.+8      	; 0x32e6 <digitalWrite+0x4e>
    32de:	8c 91       	ld	r24, X
    32e0:	d0 95       	com	r29
    32e2:	d8 23       	and	r29, r24
    32e4:	02 c0       	rjmp	.+4      	; 0x32ea <digitalWrite+0x52>
    32e6:	ec 91       	ld	r30, X
    32e8:	de 2b       	or	r29, r30
    32ea:	dc 93       	st	X, r29
    32ec:	9f bf       	out	0x3f, r25	; 63
    32ee:	df 91       	pop	r29
    32f0:	cf 91       	pop	r28
    32f2:	1f 91       	pop	r17
    32f4:	08 95       	ret

000032f6 <digitalRead>:
    32f6:	cf 93       	push	r28
    32f8:	df 93       	push	r29
    32fa:	28 2f       	mov	r18, r24
    32fc:	30 e0       	ldi	r19, 0x00	; 0
    32fe:	f9 01       	movw	r30, r18
    3300:	e6 5f       	subi	r30, 0xF6	; 246
    3302:	fe 4f       	sbci	r31, 0xFE	; 254
    3304:	84 91       	lpm	r24, Z
    3306:	f9 01       	movw	r30, r18
    3308:	e7 5d       	subi	r30, 0xD7	; 215
    330a:	fe 4f       	sbci	r31, 0xFE	; 254
    330c:	d4 91       	lpm	r29, Z
    330e:	f9 01       	movw	r30, r18
    3310:	e8 5b       	subi	r30, 0xB8	; 184
    3312:	fe 4f       	sbci	r31, 0xFE	; 254
    3314:	c4 91       	lpm	r28, Z
    3316:	cc 23       	and	r28, r28
    3318:	91 f0       	breq	.+36     	; 0x333e <digitalRead+0x48>
    331a:	81 11       	cpse	r24, r1
    331c:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <turnOffPWM>
    3320:	ec 2f       	mov	r30, r28
    3322:	f0 e0       	ldi	r31, 0x00	; 0
    3324:	ee 0f       	add	r30, r30
    3326:	ff 1f       	adc	r31, r31
    3328:	e9 59       	subi	r30, 0x99	; 153
    332a:	fe 4f       	sbci	r31, 0xFE	; 254
    332c:	a5 91       	lpm	r26, Z+
    332e:	b4 91       	lpm	r27, Z
    3330:	ec 91       	ld	r30, X
    3332:	ed 23       	and	r30, r29
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	21 f4       	brne	.+8      	; 0x3342 <digitalRead+0x4c>
    333a:	80 e0       	ldi	r24, 0x00	; 0
    333c:	02 c0       	rjmp	.+4      	; 0x3342 <digitalRead+0x4c>
    333e:	80 e0       	ldi	r24, 0x00	; 0
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	df 91       	pop	r29
    3344:	cf 91       	pop	r28
    3346:	08 95       	ret

00003348 <_ZN6StringD1Ev>:
    3348:	fc 01       	movw	r30, r24
    334a:	80 81       	ld	r24, Z
    334c:	91 81       	ldd	r25, Z+1	; 0x01
    334e:	0c 94 69 1d 	jmp	0x3ad2	; 0x3ad2 <free>

00003352 <_ZN6String10invalidateEv>:
    3352:	cf 93       	push	r28
    3354:	df 93       	push	r29
    3356:	ec 01       	movw	r28, r24
    3358:	88 81       	ld	r24, Y
    335a:	99 81       	ldd	r25, Y+1	; 0x01
    335c:	00 97       	sbiw	r24, 0x00	; 0
    335e:	11 f0       	breq	.+4      	; 0x3364 <_ZN6String10invalidateEv+0x12>
    3360:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <free>
    3364:	19 82       	std	Y+1, r1	; 0x01
    3366:	18 82       	st	Y, r1
    3368:	1d 82       	std	Y+5, r1	; 0x05
    336a:	1c 82       	std	Y+4, r1	; 0x04
    336c:	1b 82       	std	Y+3, r1	; 0x03
    336e:	1a 82       	std	Y+2, r1	; 0x02
    3370:	df 91       	pop	r29
    3372:	cf 91       	pop	r28
    3374:	08 95       	ret

00003376 <_ZN6String12changeBufferEj>:
    3376:	0f 93       	push	r16
    3378:	1f 93       	push	r17
    337a:	cf 93       	push	r28
    337c:	df 93       	push	r29
    337e:	ec 01       	movw	r28, r24
    3380:	8b 01       	movw	r16, r22
    3382:	6f 5f       	subi	r22, 0xFF	; 255
    3384:	7f 4f       	sbci	r23, 0xFF	; 255
    3386:	88 81       	ld	r24, Y
    3388:	99 81       	ldd	r25, Y+1	; 0x01
    338a:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <realloc>
    338e:	00 97       	sbiw	r24, 0x00	; 0
    3390:	31 f0       	breq	.+12     	; 0x339e <_ZN6String12changeBufferEj+0x28>
    3392:	99 83       	std	Y+1, r25	; 0x01
    3394:	88 83       	st	Y, r24
    3396:	1b 83       	std	Y+3, r17	; 0x03
    3398:	0a 83       	std	Y+2, r16	; 0x02
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	01 c0       	rjmp	.+2      	; 0x33a0 <_ZN6String12changeBufferEj+0x2a>
    339e:	80 e0       	ldi	r24, 0x00	; 0
    33a0:	df 91       	pop	r29
    33a2:	cf 91       	pop	r28
    33a4:	1f 91       	pop	r17
    33a6:	0f 91       	pop	r16
    33a8:	08 95       	ret

000033aa <_ZN6String7reserveEj>:
    33aa:	cf 93       	push	r28
    33ac:	df 93       	push	r29
    33ae:	ec 01       	movw	r28, r24
    33b0:	88 81       	ld	r24, Y
    33b2:	99 81       	ldd	r25, Y+1	; 0x01
    33b4:	89 2b       	or	r24, r25
    33b6:	29 f0       	breq	.+10     	; 0x33c2 <_ZN6String7reserveEj+0x18>
    33b8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ba:	9b 81       	ldd	r25, Y+3	; 0x03
    33bc:	86 17       	cp	r24, r22
    33be:	97 07       	cpc	r25, r23
    33c0:	60 f4       	brcc	.+24     	; 0x33da <_ZN6String7reserveEj+0x30>
    33c2:	ce 01       	movw	r24, r28
    33c4:	0e 94 bb 19 	call	0x3376	; 0x3376 <_ZN6String12changeBufferEj>
    33c8:	88 23       	and	r24, r24
    33ca:	41 f0       	breq	.+16     	; 0x33dc <_ZN6String7reserveEj+0x32>
    33cc:	8c 81       	ldd	r24, Y+4	; 0x04
    33ce:	9d 81       	ldd	r25, Y+5	; 0x05
    33d0:	89 2b       	or	r24, r25
    33d2:	19 f4       	brne	.+6      	; 0x33da <_ZN6String7reserveEj+0x30>
    33d4:	e8 81       	ld	r30, Y
    33d6:	f9 81       	ldd	r31, Y+1	; 0x01
    33d8:	10 82       	st	Z, r1
    33da:	81 e0       	ldi	r24, 0x01	; 1
    33dc:	df 91       	pop	r29
    33de:	cf 91       	pop	r28
    33e0:	08 95       	ret

000033e2 <_ZN6String4copyEPKcj>:
    33e2:	ef 92       	push	r14
    33e4:	ff 92       	push	r15
    33e6:	0f 93       	push	r16
    33e8:	1f 93       	push	r17
    33ea:	cf 93       	push	r28
    33ec:	df 93       	push	r29
    33ee:	ec 01       	movw	r28, r24
    33f0:	7b 01       	movw	r14, r22
    33f2:	8a 01       	movw	r16, r20
    33f4:	ba 01       	movw	r22, r20
    33f6:	0e 94 d5 19 	call	0x33aa	; 0x33aa <_ZN6String7reserveEj>
    33fa:	81 11       	cpse	r24, r1
    33fc:	04 c0       	rjmp	.+8      	; 0x3406 <_ZN6String4copyEPKcj+0x24>
    33fe:	ce 01       	movw	r24, r28
    3400:	0e 94 a9 19 	call	0x3352	; 0x3352 <_ZN6String10invalidateEv>
    3404:	07 c0       	rjmp	.+14     	; 0x3414 <_ZN6String4copyEPKcj+0x32>
    3406:	1d 83       	std	Y+5, r17	; 0x05
    3408:	0c 83       	std	Y+4, r16	; 0x04
    340a:	b7 01       	movw	r22, r14
    340c:	88 81       	ld	r24, Y
    340e:	99 81       	ldd	r25, Y+1	; 0x01
    3410:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <strcpy>
    3414:	ce 01       	movw	r24, r28
    3416:	df 91       	pop	r29
    3418:	cf 91       	pop	r28
    341a:	1f 91       	pop	r17
    341c:	0f 91       	pop	r16
    341e:	ff 90       	pop	r15
    3420:	ef 90       	pop	r14
    3422:	08 95       	ret

00003424 <_ZN6StringC1EPKc>:
    3424:	fc 01       	movw	r30, r24
    3426:	11 82       	std	Z+1, r1	; 0x01
    3428:	10 82       	st	Z, r1
    342a:	13 82       	std	Z+3, r1	; 0x03
    342c:	12 82       	std	Z+2, r1	; 0x02
    342e:	15 82       	std	Z+5, r1	; 0x05
    3430:	14 82       	std	Z+4, r1	; 0x04
    3432:	61 15       	cp	r22, r1
    3434:	71 05       	cpc	r23, r1
    3436:	51 f0       	breq	.+20     	; 0x344c <_ZN6StringC1EPKc+0x28>
    3438:	fb 01       	movw	r30, r22
    343a:	01 90       	ld	r0, Z+
    343c:	00 20       	and	r0, r0
    343e:	e9 f7       	brne	.-6      	; 0x343a <_ZN6StringC1EPKc+0x16>
    3440:	31 97       	sbiw	r30, 0x01	; 1
    3442:	af 01       	movw	r20, r30
    3444:	46 1b       	sub	r20, r22
    3446:	57 0b       	sbc	r21, r23
    3448:	0c 94 f1 19 	jmp	0x33e2	; 0x33e2 <_ZN6String4copyEPKcj>
    344c:	08 95       	ret

0000344e <_ZN7Serial_5writeEh>:
    344e:	cf 93       	push	r28
    3450:	df 93       	push	r29
    3452:	1f 92       	push	r1
    3454:	cd b7       	in	r28, 0x3d	; 61
    3456:	de b7       	in	r29, 0x3e	; 62
    3458:	69 83       	std	Y+1, r22	; 0x01
    345a:	dc 01       	movw	r26, r24
    345c:	ed 91       	ld	r30, X+
    345e:	fc 91       	ld	r31, X
    3460:	02 80       	ldd	r0, Z+2	; 0x02
    3462:	f3 81       	ldd	r31, Z+3	; 0x03
    3464:	e0 2d       	mov	r30, r0
    3466:	41 e0       	ldi	r20, 0x01	; 1
    3468:	50 e0       	ldi	r21, 0x00	; 0
    346a:	be 01       	movw	r22, r28
    346c:	6f 5f       	subi	r22, 0xFF	; 255
    346e:	7f 4f       	sbci	r23, 0xFF	; 255
    3470:	09 95       	icall
    3472:	0f 90       	pop	r0
    3474:	df 91       	pop	r29
    3476:	cf 91       	pop	r28
    3478:	08 95       	ret

0000347a <_ZN7Serial_4peekEv>:
    347a:	cf 93       	push	r28
    347c:	df 93       	push	r29
    347e:	ec 01       	movw	r28, r24
    3480:	8c 85       	ldd	r24, Y+12	; 0x0c
    3482:	9d 85       	ldd	r25, Y+13	; 0x0d
    3484:	97 ff       	sbrs	r25, 7
    3486:	05 c0       	rjmp	.+10     	; 0x3492 <_ZN7Serial_4peekEv+0x18>
    3488:	82 e0       	ldi	r24, 0x02	; 2
    348a:	0e 94 62 14 	call	0x28c4	; 0x28c4 <_Z8USB_Recvh>
    348e:	9d 87       	std	Y+13, r25	; 0x0d
    3490:	8c 87       	std	Y+12, r24	; 0x0c
    3492:	8c 85       	ldd	r24, Y+12	; 0x0c
    3494:	9d 85       	ldd	r25, Y+13	; 0x0d
    3496:	df 91       	pop	r29
    3498:	cf 91       	pop	r28
    349a:	08 95       	ret

0000349c <_ZN7Serial_17availableForWriteEv>:
    349c:	83 e0       	ldi	r24, 0x03	; 3
    349e:	0e 94 79 14 	call	0x28f2	; 0x28f2 <_Z13USB_SendSpaceh>
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	08 95       	ret

000034a6 <_ZN7Serial_5flushEv>:
    34a6:	83 e0       	ldi	r24, 0x03	; 3
    34a8:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <_Z9USB_Flushh>

000034ac <_ZN7Serial_9availableEv>:
    34ac:	fc 01       	movw	r30, r24
    34ae:	84 85       	ldd	r24, Z+12	; 0x0c
    34b0:	95 85       	ldd	r25, Z+13	; 0x0d
    34b2:	97 fd       	sbrc	r25, 7
    34b4:	06 c0       	rjmp	.+12     	; 0x34c2 <_ZN7Serial_9availableEv+0x16>
    34b6:	82 e0       	ldi	r24, 0x02	; 2
    34b8:	0e 94 0d 14 	call	0x281a	; 0x281a <_Z13USB_Availableh>
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	01 96       	adiw	r24, 0x01	; 1
    34c0:	08 95       	ret
    34c2:	82 e0       	ldi	r24, 0x02	; 2
    34c4:	0e 94 0d 14 	call	0x281a	; 0x281a <_Z13USB_Availableh>
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	08 95       	ret

000034cc <_ZN7Serial_4readEv>:
    34cc:	fc 01       	movw	r30, r24
    34ce:	84 85       	ldd	r24, Z+12	; 0x0c
    34d0:	95 85       	ldd	r25, Z+13	; 0x0d
    34d2:	97 fd       	sbrc	r25, 7
    34d4:	05 c0       	rjmp	.+10     	; 0x34e0 <_ZN7Serial_4readEv+0x14>
    34d6:	2f ef       	ldi	r18, 0xFF	; 255
    34d8:	3f ef       	ldi	r19, 0xFF	; 255
    34da:	35 87       	std	Z+13, r19	; 0x0d
    34dc:	24 87       	std	Z+12, r18	; 0x0c
    34de:	08 95       	ret
    34e0:	82 e0       	ldi	r24, 0x02	; 2
    34e2:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <_Z8USB_Recvh>

000034e6 <_ZN7Serial_5writeEPKhj>:
    34e6:	cf 93       	push	r28
    34e8:	df 93       	push	r29
    34ea:	ec 01       	movw	r28, r24
    34ec:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL12_usbLineInfo+0x7>
    34f0:	88 23       	and	r24, r24
    34f2:	31 f0       	breq	.+12     	; 0x3500 <_ZN7Serial_5writeEPKhj+0x1a>
    34f4:	83 e0       	ldi	r24, 0x03	; 3
    34f6:	0e 94 93 14 	call	0x2926	; 0x2926 <_Z8USB_SendhPKvi>
    34fa:	18 16       	cp	r1, r24
    34fc:	19 06       	cpc	r1, r25
    34fe:	34 f0       	brlt	.+12     	; 0x350c <_ZN7Serial_5writeEPKhj+0x26>
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	9b 83       	std	Y+3, r25	; 0x03
    3506:	8a 83       	std	Y+2, r24	; 0x02
    3508:	80 e0       	ldi	r24, 0x00	; 0
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	df 91       	pop	r29
    350e:	cf 91       	pop	r28
    3510:	08 95       	ret

00003512 <_Z16isLUFAbootloaderv>:
    3512:	ee ef       	ldi	r30, 0xFE	; 254
    3514:	ff e7       	ldi	r31, 0x7F	; 127
    3516:	25 91       	lpm	r18, Z+
    3518:	34 91       	lpm	r19, Z
    351a:	81 e0       	ldi	r24, 0x01	; 1
    351c:	2b 3f       	cpi	r18, 0xFB	; 251
    351e:	3c 4d       	sbci	r19, 0xDC	; 220
    3520:	09 f0       	breq	.+2      	; 0x3524 <_Z16isLUFAbootloaderv+0x12>
    3522:	80 e0       	ldi	r24, 0x00	; 0
    3524:	08 95       	ret

00003526 <_Z16CDC_GetInterfacePh>:
    3526:	fc 01       	movw	r30, r24
    3528:	90 81       	ld	r25, Z
    352a:	9e 5f       	subi	r25, 0xFE	; 254
    352c:	90 83       	st	Z, r25
    352e:	42 e4       	ldi	r20, 0x42	; 66
    3530:	50 e0       	ldi	r21, 0x00	; 0
    3532:	61 e9       	ldi	r22, 0x91	; 145
    3534:	71 e0       	ldi	r23, 0x01	; 1
    3536:	80 e8       	ldi	r24, 0x80	; 128
    3538:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <_Z15USB_SendControlhPKvi>

0000353c <_Z9CDC_SetupR8USBSetup>:
    353c:	fc 01       	movw	r30, r24
    353e:	81 81       	ldd	r24, Z+1	; 0x01
    3540:	90 81       	ld	r25, Z
    3542:	91 3a       	cpi	r25, 0xA1	; 161
    3544:	59 f4       	brne	.+22     	; 0x355c <_Z9CDC_SetupR8USBSetup+0x20>
    3546:	81 32       	cpi	r24, 0x21	; 33
    3548:	09 f0       	breq	.+2      	; 0x354c <_Z9CDC_SetupR8USBSetup+0x10>
    354a:	65 c0       	rjmp	.+202    	; 0x3616 <_Z9CDC_SetupR8USBSetup+0xda>
    354c:	47 e0       	ldi	r20, 0x07	; 7
    354e:	50 e0       	ldi	r21, 0x00	; 0
    3550:	66 e1       	ldi	r22, 0x16	; 22
    3552:	71 e0       	ldi	r23, 0x01	; 1
    3554:	80 e0       	ldi	r24, 0x00	; 0
    3556:	0e 94 43 15 	call	0x2a86	; 0x2a86 <_Z15USB_SendControlhPKvi>
    355a:	5b c0       	rjmp	.+182    	; 0x3612 <_Z9CDC_SetupR8USBSetup+0xd6>
    355c:	91 32       	cpi	r25, 0x21	; 33
    355e:	09 f0       	breq	.+2      	; 0x3562 <_Z9CDC_SetupR8USBSetup+0x26>
    3560:	5a c0       	rjmp	.+180    	; 0x3616 <_Z9CDC_SetupR8USBSetup+0xda>
    3562:	83 32       	cpi	r24, 0x23	; 35
    3564:	69 f4       	brne	.+26     	; 0x3580 <_Z9CDC_SetupR8USBSetup+0x44>
    3566:	82 81       	ldd	r24, Z+2	; 0x02
    3568:	93 81       	ldd	r25, Z+3	; 0x03
    356a:	a0 e0       	ldi	r26, 0x00	; 0
    356c:	b0 e0       	ldi	r27, 0x00	; 0
    356e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_ZL10breakValue>
    3572:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_ZL10breakValue+0x1>
    3576:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <_ZL10breakValue+0x2>
    357a:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <_ZL10breakValue+0x3>
    357e:	49 c0       	rjmp	.+146    	; 0x3612 <_Z9CDC_SetupR8USBSetup+0xd6>
    3580:	80 32       	cpi	r24, 0x20	; 32
    3582:	39 f4       	brne	.+14     	; 0x3592 <_Z9CDC_SetupR8USBSetup+0x56>
    3584:	67 e0       	ldi	r22, 0x07	; 7
    3586:	70 e0       	ldi	r23, 0x00	; 0
    3588:	86 e1       	ldi	r24, 0x16	; 22
    358a:	91 e0       	ldi	r25, 0x01	; 1
    358c:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <_Z15USB_RecvControlPvi>
    3590:	40 c0       	rjmp	.+128    	; 0x3612 <_Z9CDC_SetupR8USBSetup+0xd6>
    3592:	82 32       	cpi	r24, 0x22	; 34
    3594:	09 f0       	breq	.+2      	; 0x3598 <_Z9CDC_SetupR8USBSetup+0x5c>
    3596:	3d c0       	rjmp	.+122    	; 0x3612 <_Z9CDC_SetupR8USBSetup+0xd6>
    3598:	82 81       	ldd	r24, Z+2	; 0x02
    359a:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZL12_usbLineInfo+0x7>
    359e:	0e 94 89 1a 	call	0x3512	; 0x3512 <_Z16isLUFAbootloaderv>
    35a2:	88 23       	and	r24, r24
    35a4:	19 f0       	breq	.+6      	; 0x35ac <_Z9CDC_SetupR8USBSetup+0x70>
    35a6:	ee ef       	ldi	r30, 0xFE	; 254
    35a8:	fa e0       	ldi	r31, 0x0A	; 10
    35aa:	02 c0       	rjmp	.+4      	; 0x35b0 <_Z9CDC_SetupR8USBSetup+0x74>
    35ac:	e0 e0       	ldi	r30, 0x00	; 0
    35ae:	f8 e0       	ldi	r31, 0x08	; 8
    35b0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_ZL12_usbLineInfo>
    35b4:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <_ZL12_usbLineInfo+0x1>
    35b8:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <_ZL12_usbLineInfo+0x2>
    35bc:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <_ZL12_usbLineInfo+0x3>
    35c0:	80 3b       	cpi	r24, 0xB0	; 176
    35c2:	94 40       	sbci	r25, 0x04	; 4
    35c4:	a1 05       	cpc	r26, r1
    35c6:	b1 05       	cpc	r27, r1
    35c8:	41 f5       	brne	.+80     	; 0x361a <_Z9CDC_SetupR8USBSetup+0xde>
    35ca:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL12_usbLineInfo+0x7>
    35ce:	80 fd       	sbrc	r24, 0
    35d0:	24 c0       	rjmp	.+72     	; 0x361a <_Z9CDC_SetupR8USBSetup+0xde>
    35d2:	ee 3f       	cpi	r30, 0xFE	; 254
    35d4:	8a e0       	ldi	r24, 0x0A	; 10
    35d6:	f8 07       	cpc	r31, r24
    35d8:	51 f0       	breq	.+20     	; 0x35ee <_Z9CDC_SetupR8USBSetup+0xb2>
    35da:	80 81       	ld	r24, Z
    35dc:	91 81       	ldd	r25, Z+1	; 0x01
    35de:	87 37       	cpi	r24, 0x77	; 119
    35e0:	27 e7       	ldi	r18, 0x77	; 119
    35e2:	92 07       	cpc	r25, r18
    35e4:	21 f0       	breq	.+8      	; 0x35ee <_Z9CDC_SetupR8USBSetup+0xb2>
    35e6:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x622>
    35ea:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x621>
    35ee:	87 e7       	ldi	r24, 0x77	; 119
    35f0:	97 e7       	ldi	r25, 0x77	; 119
    35f2:	91 83       	std	Z+1, r25	; 0x01
    35f4:	80 83       	st	Z, r24
    35f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    35fa:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <_ZL11wdtcsr_save>
    35fe:	9b e0       	ldi	r25, 0x0B	; 11
    3600:	88 e1       	ldi	r24, 0x18	; 24
    3602:	0f b6       	in	r0, 0x3f	; 63
    3604:	f8 94       	cli
    3606:	a8 95       	wdr
    3608:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    360c:	0f be       	out	0x3f, r0	; 63
    360e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	08 95       	ret
    3616:	80 e0       	ldi	r24, 0x00	; 0
    3618:	08 95       	ret
    361a:	80 81       	ld	r24, Z
    361c:	91 81       	ldd	r25, Z+1	; 0x01
    361e:	87 37       	cpi	r24, 0x77	; 119
    3620:	97 47       	sbci	r25, 0x77	; 119
    3622:	b9 f7       	brne	.-18     	; 0x3612 <_Z9CDC_SetupR8USBSetup+0xd6>
    3624:	a8 95       	wdr
    3626:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    362a:	88 61       	ori	r24, 0x18	; 24
    362c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3630:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <_ZL11wdtcsr_save>
    3634:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3638:	ee 3f       	cpi	r30, 0xFE	; 254
    363a:	8a e0       	ldi	r24, 0x0A	; 10
    363c:	f8 07       	cpc	r31, r24
    363e:	39 f0       	breq	.+14     	; 0x364e <_Z9CDC_SetupR8USBSetup+0x112>
    3640:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x621>
    3644:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x622>
    3648:	91 83       	std	Z+1, r25	; 0x01
    364a:	80 83       	st	Z, r24
    364c:	e2 cf       	rjmp	.-60     	; 0x3612 <_Z9CDC_SetupR8USBSetup+0xd6>
    364e:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x622>
    3652:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x621>
    3656:	dd cf       	rjmp	.-70     	; 0x3612 <_Z9CDC_SetupR8USBSetup+0xd6>

00003658 <_GLOBAL__sub_I__cdcInterface>:
    3658:	ec e7       	ldi	r30, 0x7C	; 124
    365a:	f4 e0       	ldi	r31, 0x04	; 4
    365c:	13 82       	std	Z+3, r1	; 0x03
    365e:	12 82       	std	Z+2, r1	; 0x02
    3660:	88 ee       	ldi	r24, 0xE8	; 232
    3662:	93 e0       	ldi	r25, 0x03	; 3
    3664:	a0 e0       	ldi	r26, 0x00	; 0
    3666:	b0 e0       	ldi	r27, 0x00	; 0
    3668:	84 83       	std	Z+4, r24	; 0x04
    366a:	95 83       	std	Z+5, r25	; 0x05
    366c:	a6 83       	std	Z+6, r26	; 0x06
    366e:	b7 83       	std	Z+7, r27	; 0x07
    3670:	87 e7       	ldi	r24, 0x77	; 119
    3672:	92 e0       	ldi	r25, 0x02	; 2
    3674:	91 83       	std	Z+1, r25	; 0x01
    3676:	80 83       	st	Z, r24
    3678:	8f ef       	ldi	r24, 0xFF	; 255
    367a:	9f ef       	ldi	r25, 0xFF	; 255
    367c:	95 87       	std	Z+13, r25	; 0x0d
    367e:	84 87       	std	Z+12, r24	; 0x0c
    3680:	08 95       	ret

00003682 <yield>:
    3682:	08 95       	ret

00003684 <_ZN13PluggableUSB_12getInterfaceEPh>:
    3684:	ef 92       	push	r14
    3686:	ff 92       	push	r15
    3688:	0f 93       	push	r16
    368a:	1f 93       	push	r17
    368c:	cf 93       	push	r28
    368e:	df 93       	push	r29
    3690:	7b 01       	movw	r14, r22
    3692:	fc 01       	movw	r30, r24
    3694:	c2 81       	ldd	r28, Z+2	; 0x02
    3696:	d3 81       	ldd	r29, Z+3	; 0x03
    3698:	00 e0       	ldi	r16, 0x00	; 0
    369a:	10 e0       	ldi	r17, 0x00	; 0
    369c:	20 97       	sbiw	r28, 0x00	; 0
    369e:	81 f0       	breq	.+32     	; 0x36c0 <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
    36a0:	e8 81       	ld	r30, Y
    36a2:	f9 81       	ldd	r31, Y+1	; 0x01
    36a4:	02 80       	ldd	r0, Z+2	; 0x02
    36a6:	f3 81       	ldd	r31, Z+3	; 0x03
    36a8:	e0 2d       	mov	r30, r0
    36aa:	b7 01       	movw	r22, r14
    36ac:	ce 01       	movw	r24, r28
    36ae:	09 95       	icall
    36b0:	97 fd       	sbrc	r25, 7
    36b2:	08 c0       	rjmp	.+16     	; 0x36c4 <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
    36b4:	08 0f       	add	r16, r24
    36b6:	19 1f       	adc	r17, r25
    36b8:	08 84       	ldd	r0, Y+8	; 0x08
    36ba:	d9 85       	ldd	r29, Y+9	; 0x09
    36bc:	c0 2d       	mov	r28, r0
    36be:	ee cf       	rjmp	.-36     	; 0x369c <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    36c0:	c8 01       	movw	r24, r16
    36c2:	02 c0       	rjmp	.+4      	; 0x36c8 <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
    36c4:	8f ef       	ldi	r24, 0xFF	; 255
    36c6:	9f ef       	ldi	r25, 0xFF	; 255
    36c8:	df 91       	pop	r29
    36ca:	cf 91       	pop	r28
    36cc:	1f 91       	pop	r17
    36ce:	0f 91       	pop	r16
    36d0:	ff 90       	pop	r15
    36d2:	ef 90       	pop	r14
    36d4:	08 95       	ret

000036d6 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    36d6:	0f 93       	push	r16
    36d8:	1f 93       	push	r17
    36da:	cf 93       	push	r28
    36dc:	df 93       	push	r29
    36de:	8b 01       	movw	r16, r22
    36e0:	fc 01       	movw	r30, r24
    36e2:	c2 81       	ldd	r28, Z+2	; 0x02
    36e4:	d3 81       	ldd	r29, Z+3	; 0x03
    36e6:	20 97       	sbiw	r28, 0x00	; 0
    36e8:	71 f0       	breq	.+28     	; 0x3706 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
    36ea:	e8 81       	ld	r30, Y
    36ec:	f9 81       	ldd	r31, Y+1	; 0x01
    36ee:	04 80       	ldd	r0, Z+4	; 0x04
    36f0:	f5 81       	ldd	r31, Z+5	; 0x05
    36f2:	e0 2d       	mov	r30, r0
    36f4:	b8 01       	movw	r22, r16
    36f6:	ce 01       	movw	r24, r28
    36f8:	09 95       	icall
    36fa:	00 97       	sbiw	r24, 0x00	; 0
    36fc:	31 f4       	brne	.+12     	; 0x370a <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
    36fe:	08 84       	ldd	r0, Y+8	; 0x08
    3700:	d9 85       	ldd	r29, Y+9	; 0x09
    3702:	c0 2d       	mov	r28, r0
    3704:	f0 cf       	rjmp	.-32     	; 0x36e6 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
    3706:	80 e0       	ldi	r24, 0x00	; 0
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	df 91       	pop	r29
    370c:	cf 91       	pop	r28
    370e:	1f 91       	pop	r17
    3710:	0f 91       	pop	r16
    3712:	08 95       	ret

00003714 <_ZN13PluggableUSB_12getShortNameEPc>:
    3714:	0f 93       	push	r16
    3716:	1f 93       	push	r17
    3718:	cf 93       	push	r28
    371a:	df 93       	push	r29
    371c:	8b 01       	movw	r16, r22
    371e:	fc 01       	movw	r30, r24
    3720:	c2 81       	ldd	r28, Z+2	; 0x02
    3722:	d3 81       	ldd	r29, Z+3	; 0x03
    3724:	20 97       	sbiw	r28, 0x00	; 0
    3726:	71 f0       	breq	.+28     	; 0x3744 <_ZN13PluggableUSB_12getShortNameEPc+0x30>
    3728:	e8 81       	ld	r30, Y
    372a:	f9 81       	ldd	r31, Y+1	; 0x01
    372c:	06 80       	ldd	r0, Z+6	; 0x06
    372e:	f7 81       	ldd	r31, Z+7	; 0x07
    3730:	e0 2d       	mov	r30, r0
    3732:	b8 01       	movw	r22, r16
    3734:	ce 01       	movw	r24, r28
    3736:	09 95       	icall
    3738:	08 0f       	add	r16, r24
    373a:	11 1d       	adc	r17, r1
    373c:	08 84       	ldd	r0, Y+8	; 0x08
    373e:	d9 85       	ldd	r29, Y+9	; 0x09
    3740:	c0 2d       	mov	r28, r0
    3742:	f0 cf       	rjmp	.-32     	; 0x3724 <_ZN13PluggableUSB_12getShortNameEPc+0x10>
    3744:	f8 01       	movw	r30, r16
    3746:	10 82       	st	Z, r1
    3748:	df 91       	pop	r29
    374a:	cf 91       	pop	r28
    374c:	1f 91       	pop	r17
    374e:	0f 91       	pop	r16
    3750:	08 95       	ret

00003752 <_ZN13PluggableUSB_5setupER8USBSetup>:
    3752:	0f 93       	push	r16
    3754:	1f 93       	push	r17
    3756:	cf 93       	push	r28
    3758:	df 93       	push	r29
    375a:	8b 01       	movw	r16, r22
    375c:	fc 01       	movw	r30, r24
    375e:	c2 81       	ldd	r28, Z+2	; 0x02
    3760:	d3 81       	ldd	r29, Z+3	; 0x03
    3762:	20 97       	sbiw	r28, 0x00	; 0
    3764:	71 f0       	breq	.+28     	; 0x3782 <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
    3766:	e8 81       	ld	r30, Y
    3768:	f9 81       	ldd	r31, Y+1	; 0x01
    376a:	01 90       	ld	r0, Z+
    376c:	f0 81       	ld	r31, Z
    376e:	e0 2d       	mov	r30, r0
    3770:	b8 01       	movw	r22, r16
    3772:	ce 01       	movw	r24, r28
    3774:	09 95       	icall
    3776:	81 11       	cpse	r24, r1
    3778:	05 c0       	rjmp	.+10     	; 0x3784 <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
    377a:	08 84       	ldd	r0, Y+8	; 0x08
    377c:	d9 85       	ldd	r29, Y+9	; 0x09
    377e:	c0 2d       	mov	r28, r0
    3780:	f0 cf       	rjmp	.-32     	; 0x3762 <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
    3782:	80 e0       	ldi	r24, 0x00	; 0
    3784:	df 91       	pop	r29
    3786:	cf 91       	pop	r28
    3788:	1f 91       	pop	r17
    378a:	0f 91       	pop	r16
    378c:	08 95       	ret

0000378e <_Z12PluggableUSBv>:
    378e:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <_ZGVZ12PluggableUSBvE3obj>
    3792:	81 11       	cpse	r24, r1
    3794:	0d c0       	rjmp	.+26     	; 0x37b0 <_Z12PluggableUSBv+0x22>
    3796:	82 e0       	ldi	r24, 0x02	; 2
    3798:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <_ZZ12PluggableUSBvE3obj>
    379c:	84 e0       	ldi	r24, 0x04	; 4
    379e:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <_ZZ12PluggableUSBvE3obj+0x1>
    37a2:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <_ZZ12PluggableUSBvE3obj+0x3>
    37a6:	10 92 cf 04 	sts	0x04CF, r1	; 0x8004cf <_ZZ12PluggableUSBvE3obj+0x2>
    37aa:	81 e0       	ldi	r24, 0x01	; 1
    37ac:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <_ZGVZ12PluggableUSBvE3obj>
    37b0:	8d ec       	ldi	r24, 0xCD	; 205
    37b2:	94 e0       	ldi	r25, 0x04	; 4
    37b4:	08 95       	ret

000037b6 <__subsf3>:
    37b6:	50 58       	subi	r21, 0x80	; 128

000037b8 <__addsf3>:
    37b8:	bb 27       	eor	r27, r27
    37ba:	aa 27       	eor	r26, r26
    37bc:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__addsf3x>
    37c0:	0c 94 98 10 	jmp	0x2130	; 0x2130 <__fp_round>
    37c4:	0e 94 8a 10 	call	0x2114	; 0x2114 <__fp_pscA>
    37c8:	38 f0       	brcs	.+14     	; 0x37d8 <__addsf3+0x20>
    37ca:	0e 94 91 10 	call	0x2122	; 0x2122 <__fp_pscB>
    37ce:	20 f0       	brcs	.+8      	; 0x37d8 <__addsf3+0x20>
    37d0:	39 f4       	brne	.+14     	; 0x37e0 <__addsf3+0x28>
    37d2:	9f 3f       	cpi	r25, 0xFF	; 255
    37d4:	19 f4       	brne	.+6      	; 0x37dc <__addsf3+0x24>
    37d6:	26 f4       	brtc	.+8      	; 0x37e0 <__addsf3+0x28>
    37d8:	0c 94 87 10 	jmp	0x210e	; 0x210e <__fp_nan>
    37dc:	0e f4       	brtc	.+2      	; 0x37e0 <__addsf3+0x28>
    37de:	e0 95       	com	r30
    37e0:	e7 fb       	bst	r30, 7
    37e2:	0c 94 81 10 	jmp	0x2102	; 0x2102 <__fp_inf>

000037e6 <__addsf3x>:
    37e6:	e9 2f       	mov	r30, r25
    37e8:	0e 94 a9 10 	call	0x2152	; 0x2152 <__fp_split3>
    37ec:	58 f3       	brcs	.-42     	; 0x37c4 <__addsf3+0xc>
    37ee:	ba 17       	cp	r27, r26
    37f0:	62 07       	cpc	r22, r18
    37f2:	73 07       	cpc	r23, r19
    37f4:	84 07       	cpc	r24, r20
    37f6:	95 07       	cpc	r25, r21
    37f8:	20 f0       	brcs	.+8      	; 0x3802 <__addsf3x+0x1c>
    37fa:	79 f4       	brne	.+30     	; 0x381a <__addsf3x+0x34>
    37fc:	a6 f5       	brtc	.+104    	; 0x3866 <__addsf3x+0x80>
    37fe:	0c 94 cb 10 	jmp	0x2196	; 0x2196 <__fp_zero>
    3802:	0e f4       	brtc	.+2      	; 0x3806 <__addsf3x+0x20>
    3804:	e0 95       	com	r30
    3806:	0b 2e       	mov	r0, r27
    3808:	ba 2f       	mov	r27, r26
    380a:	a0 2d       	mov	r26, r0
    380c:	0b 01       	movw	r0, r22
    380e:	b9 01       	movw	r22, r18
    3810:	90 01       	movw	r18, r0
    3812:	0c 01       	movw	r0, r24
    3814:	ca 01       	movw	r24, r20
    3816:	a0 01       	movw	r20, r0
    3818:	11 24       	eor	r1, r1
    381a:	ff 27       	eor	r31, r31
    381c:	59 1b       	sub	r21, r25
    381e:	99 f0       	breq	.+38     	; 0x3846 <__addsf3x+0x60>
    3820:	59 3f       	cpi	r21, 0xF9	; 249
    3822:	50 f4       	brcc	.+20     	; 0x3838 <__addsf3x+0x52>
    3824:	50 3e       	cpi	r21, 0xE0	; 224
    3826:	68 f1       	brcs	.+90     	; 0x3882 <__addsf3x+0x9c>
    3828:	1a 16       	cp	r1, r26
    382a:	f0 40       	sbci	r31, 0x00	; 0
    382c:	a2 2f       	mov	r26, r18
    382e:	23 2f       	mov	r18, r19
    3830:	34 2f       	mov	r19, r20
    3832:	44 27       	eor	r20, r20
    3834:	58 5f       	subi	r21, 0xF8	; 248
    3836:	f3 cf       	rjmp	.-26     	; 0x381e <__addsf3x+0x38>
    3838:	46 95       	lsr	r20
    383a:	37 95       	ror	r19
    383c:	27 95       	ror	r18
    383e:	a7 95       	ror	r26
    3840:	f0 40       	sbci	r31, 0x00	; 0
    3842:	53 95       	inc	r21
    3844:	c9 f7       	brne	.-14     	; 0x3838 <__addsf3x+0x52>
    3846:	7e f4       	brtc	.+30     	; 0x3866 <__addsf3x+0x80>
    3848:	1f 16       	cp	r1, r31
    384a:	ba 0b       	sbc	r27, r26
    384c:	62 0b       	sbc	r22, r18
    384e:	73 0b       	sbc	r23, r19
    3850:	84 0b       	sbc	r24, r20
    3852:	ba f0       	brmi	.+46     	; 0x3882 <__addsf3x+0x9c>
    3854:	91 50       	subi	r25, 0x01	; 1
    3856:	a1 f0       	breq	.+40     	; 0x3880 <__addsf3x+0x9a>
    3858:	ff 0f       	add	r31, r31
    385a:	bb 1f       	adc	r27, r27
    385c:	66 1f       	adc	r22, r22
    385e:	77 1f       	adc	r23, r23
    3860:	88 1f       	adc	r24, r24
    3862:	c2 f7       	brpl	.-16     	; 0x3854 <__addsf3x+0x6e>
    3864:	0e c0       	rjmp	.+28     	; 0x3882 <__addsf3x+0x9c>
    3866:	ba 0f       	add	r27, r26
    3868:	62 1f       	adc	r22, r18
    386a:	73 1f       	adc	r23, r19
    386c:	84 1f       	adc	r24, r20
    386e:	48 f4       	brcc	.+18     	; 0x3882 <__addsf3x+0x9c>
    3870:	87 95       	ror	r24
    3872:	77 95       	ror	r23
    3874:	67 95       	ror	r22
    3876:	b7 95       	ror	r27
    3878:	f7 95       	ror	r31
    387a:	9e 3f       	cpi	r25, 0xFE	; 254
    387c:	08 f0       	brcs	.+2      	; 0x3880 <__addsf3x+0x9a>
    387e:	b0 cf       	rjmp	.-160    	; 0x37e0 <__addsf3+0x28>
    3880:	93 95       	inc	r25
    3882:	88 0f       	add	r24, r24
    3884:	08 f0       	brcs	.+2      	; 0x3888 <__addsf3x+0xa2>
    3886:	99 27       	eor	r25, r25
    3888:	ee 0f       	add	r30, r30
    388a:	97 95       	ror	r25
    388c:	87 95       	ror	r24
    388e:	08 95       	ret

00003890 <__cmpsf2>:
    3890:	0e 94 44 11 	call	0x2288	; 0x2288 <__fp_cmp>
    3894:	08 f4       	brcc	.+2      	; 0x3898 <__cmpsf2+0x8>
    3896:	81 e0       	ldi	r24, 0x01	; 1
    3898:	08 95       	ret

0000389a <__fixunssfsi>:
    389a:	0e 94 b1 10 	call	0x2162	; 0x2162 <__fp_splitA>
    389e:	88 f0       	brcs	.+34     	; 0x38c2 <__fixunssfsi+0x28>
    38a0:	9f 57       	subi	r25, 0x7F	; 127
    38a2:	98 f0       	brcs	.+38     	; 0x38ca <__fixunssfsi+0x30>
    38a4:	b9 2f       	mov	r27, r25
    38a6:	99 27       	eor	r25, r25
    38a8:	b7 51       	subi	r27, 0x17	; 23
    38aa:	b0 f0       	brcs	.+44     	; 0x38d8 <__fixunssfsi+0x3e>
    38ac:	e1 f0       	breq	.+56     	; 0x38e6 <__fixunssfsi+0x4c>
    38ae:	66 0f       	add	r22, r22
    38b0:	77 1f       	adc	r23, r23
    38b2:	88 1f       	adc	r24, r24
    38b4:	99 1f       	adc	r25, r25
    38b6:	1a f0       	brmi	.+6      	; 0x38be <__fixunssfsi+0x24>
    38b8:	ba 95       	dec	r27
    38ba:	c9 f7       	brne	.-14     	; 0x38ae <__fixunssfsi+0x14>
    38bc:	14 c0       	rjmp	.+40     	; 0x38e6 <__fixunssfsi+0x4c>
    38be:	b1 30       	cpi	r27, 0x01	; 1
    38c0:	91 f0       	breq	.+36     	; 0x38e6 <__fixunssfsi+0x4c>
    38c2:	0e 94 cb 10 	call	0x2196	; 0x2196 <__fp_zero>
    38c6:	b1 e0       	ldi	r27, 0x01	; 1
    38c8:	08 95       	ret
    38ca:	0c 94 cb 10 	jmp	0x2196	; 0x2196 <__fp_zero>
    38ce:	67 2f       	mov	r22, r23
    38d0:	78 2f       	mov	r23, r24
    38d2:	88 27       	eor	r24, r24
    38d4:	b8 5f       	subi	r27, 0xF8	; 248
    38d6:	39 f0       	breq	.+14     	; 0x38e6 <__fixunssfsi+0x4c>
    38d8:	b9 3f       	cpi	r27, 0xF9	; 249
    38da:	cc f3       	brlt	.-14     	; 0x38ce <__fixunssfsi+0x34>
    38dc:	86 95       	lsr	r24
    38de:	77 95       	ror	r23
    38e0:	67 95       	ror	r22
    38e2:	b3 95       	inc	r27
    38e4:	d9 f7       	brne	.-10     	; 0x38dc <__fixunssfsi+0x42>
    38e6:	3e f4       	brtc	.+14     	; 0x38f6 <__fixunssfsi+0x5c>
    38e8:	90 95       	com	r25
    38ea:	80 95       	com	r24
    38ec:	70 95       	com	r23
    38ee:	61 95       	neg	r22
    38f0:	7f 4f       	sbci	r23, 0xFF	; 255
    38f2:	8f 4f       	sbci	r24, 0xFF	; 255
    38f4:	9f 4f       	sbci	r25, 0xFF	; 255
    38f6:	08 95       	ret

000038f8 <__unordsf2>:
    38f8:	0e 94 44 11 	call	0x2288	; 0x2288 <__fp_cmp>
    38fc:	88 0b       	sbc	r24, r24
    38fe:	99 0b       	sbc	r25, r25
    3900:	08 95       	ret

00003902 <__divmodhi4>:
    3902:	97 fb       	bst	r25, 7
    3904:	07 2e       	mov	r0, r23
    3906:	16 f4       	brtc	.+4      	; 0x390c <__divmodhi4+0xa>
    3908:	00 94       	com	r0
    390a:	07 d0       	rcall	.+14     	; 0x391a <__divmodhi4_neg1>
    390c:	77 fd       	sbrc	r23, 7
    390e:	09 d0       	rcall	.+18     	; 0x3922 <__divmodhi4_neg2>
    3910:	0e 94 bd 1c 	call	0x397a	; 0x397a <__udivmodhi4>
    3914:	07 fc       	sbrc	r0, 7
    3916:	05 d0       	rcall	.+10     	; 0x3922 <__divmodhi4_neg2>
    3918:	3e f4       	brtc	.+14     	; 0x3928 <__divmodhi4_exit>

0000391a <__divmodhi4_neg1>:
    391a:	90 95       	com	r25
    391c:	81 95       	neg	r24
    391e:	9f 4f       	sbci	r25, 0xFF	; 255
    3920:	08 95       	ret

00003922 <__divmodhi4_neg2>:
    3922:	70 95       	com	r23
    3924:	61 95       	neg	r22
    3926:	7f 4f       	sbci	r23, 0xFF	; 255

00003928 <__divmodhi4_exit>:
    3928:	08 95       	ret

0000392a <__udivmodsi4>:
    392a:	a1 e2       	ldi	r26, 0x21	; 33
    392c:	1a 2e       	mov	r1, r26
    392e:	aa 1b       	sub	r26, r26
    3930:	bb 1b       	sub	r27, r27
    3932:	fd 01       	movw	r30, r26
    3934:	0d c0       	rjmp	.+26     	; 0x3950 <__udivmodsi4_ep>

00003936 <__udivmodsi4_loop>:
    3936:	aa 1f       	adc	r26, r26
    3938:	bb 1f       	adc	r27, r27
    393a:	ee 1f       	adc	r30, r30
    393c:	ff 1f       	adc	r31, r31
    393e:	a2 17       	cp	r26, r18
    3940:	b3 07       	cpc	r27, r19
    3942:	e4 07       	cpc	r30, r20
    3944:	f5 07       	cpc	r31, r21
    3946:	20 f0       	brcs	.+8      	; 0x3950 <__udivmodsi4_ep>
    3948:	a2 1b       	sub	r26, r18
    394a:	b3 0b       	sbc	r27, r19
    394c:	e4 0b       	sbc	r30, r20
    394e:	f5 0b       	sbc	r31, r21

00003950 <__udivmodsi4_ep>:
    3950:	66 1f       	adc	r22, r22
    3952:	77 1f       	adc	r23, r23
    3954:	88 1f       	adc	r24, r24
    3956:	99 1f       	adc	r25, r25
    3958:	1a 94       	dec	r1
    395a:	69 f7       	brne	.-38     	; 0x3936 <__udivmodsi4_loop>
    395c:	60 95       	com	r22
    395e:	70 95       	com	r23
    3960:	80 95       	com	r24
    3962:	90 95       	com	r25
    3964:	9b 01       	movw	r18, r22
    3966:	ac 01       	movw	r20, r24
    3968:	bd 01       	movw	r22, r26
    396a:	cf 01       	movw	r24, r30
    396c:	08 95       	ret

0000396e <__tablejump2__>:
    396e:	ee 0f       	add	r30, r30
    3970:	ff 1f       	adc	r31, r31
    3972:	05 90       	lpm	r0, Z+
    3974:	f4 91       	lpm	r31, Z
    3976:	e0 2d       	mov	r30, r0
    3978:	09 94       	ijmp

0000397a <__udivmodhi4>:
    397a:	aa 1b       	sub	r26, r26
    397c:	bb 1b       	sub	r27, r27
    397e:	51 e1       	ldi	r21, 0x11	; 17
    3980:	07 c0       	rjmp	.+14     	; 0x3990 <__udivmodhi4_ep>

00003982 <__udivmodhi4_loop>:
    3982:	aa 1f       	adc	r26, r26
    3984:	bb 1f       	adc	r27, r27
    3986:	a6 17       	cp	r26, r22
    3988:	b7 07       	cpc	r27, r23
    398a:	10 f0       	brcs	.+4      	; 0x3990 <__udivmodhi4_ep>
    398c:	a6 1b       	sub	r26, r22
    398e:	b7 0b       	sbc	r27, r23

00003990 <__udivmodhi4_ep>:
    3990:	88 1f       	adc	r24, r24
    3992:	99 1f       	adc	r25, r25
    3994:	5a 95       	dec	r21
    3996:	a9 f7       	brne	.-22     	; 0x3982 <__udivmodhi4_loop>
    3998:	80 95       	com	r24
    399a:	90 95       	com	r25
    399c:	bc 01       	movw	r22, r24
    399e:	cd 01       	movw	r24, r26
    39a0:	08 95       	ret

000039a2 <malloc>:
    39a2:	0f 93       	push	r16
    39a4:	1f 93       	push	r17
    39a6:	cf 93       	push	r28
    39a8:	df 93       	push	r29
    39aa:	82 30       	cpi	r24, 0x02	; 2
    39ac:	91 05       	cpc	r25, r1
    39ae:	10 f4       	brcc	.+4      	; 0x39b4 <malloc+0x12>
    39b0:	82 e0       	ldi	r24, 0x02	; 2
    39b2:	90 e0       	ldi	r25, 0x00	; 0
    39b4:	e0 91 db 04 	lds	r30, 0x04DB	; 0x8004db <__flp>
    39b8:	f0 91 dc 04 	lds	r31, 0x04DC	; 0x8004dc <__flp+0x1>
    39bc:	20 e0       	ldi	r18, 0x00	; 0
    39be:	30 e0       	ldi	r19, 0x00	; 0
    39c0:	a0 e0       	ldi	r26, 0x00	; 0
    39c2:	b0 e0       	ldi	r27, 0x00	; 0
    39c4:	30 97       	sbiw	r30, 0x00	; 0
    39c6:	19 f1       	breq	.+70     	; 0x3a0e <malloc+0x6c>
    39c8:	40 81       	ld	r20, Z
    39ca:	51 81       	ldd	r21, Z+1	; 0x01
    39cc:	02 81       	ldd	r16, Z+2	; 0x02
    39ce:	13 81       	ldd	r17, Z+3	; 0x03
    39d0:	48 17       	cp	r20, r24
    39d2:	59 07       	cpc	r21, r25
    39d4:	c8 f0       	brcs	.+50     	; 0x3a08 <malloc+0x66>
    39d6:	84 17       	cp	r24, r20
    39d8:	95 07       	cpc	r25, r21
    39da:	69 f4       	brne	.+26     	; 0x39f6 <malloc+0x54>
    39dc:	10 97       	sbiw	r26, 0x00	; 0
    39de:	31 f0       	breq	.+12     	; 0x39ec <malloc+0x4a>
    39e0:	12 96       	adiw	r26, 0x02	; 2
    39e2:	0c 93       	st	X, r16
    39e4:	12 97       	sbiw	r26, 0x02	; 2
    39e6:	13 96       	adiw	r26, 0x03	; 3
    39e8:	1c 93       	st	X, r17
    39ea:	27 c0       	rjmp	.+78     	; 0x3a3a <malloc+0x98>
    39ec:	00 93 db 04 	sts	0x04DB, r16	; 0x8004db <__flp>
    39f0:	10 93 dc 04 	sts	0x04DC, r17	; 0x8004dc <__flp+0x1>
    39f4:	22 c0       	rjmp	.+68     	; 0x3a3a <malloc+0x98>
    39f6:	21 15       	cp	r18, r1
    39f8:	31 05       	cpc	r19, r1
    39fa:	19 f0       	breq	.+6      	; 0x3a02 <malloc+0x60>
    39fc:	42 17       	cp	r20, r18
    39fe:	53 07       	cpc	r21, r19
    3a00:	18 f4       	brcc	.+6      	; 0x3a08 <malloc+0x66>
    3a02:	9a 01       	movw	r18, r20
    3a04:	bd 01       	movw	r22, r26
    3a06:	ef 01       	movw	r28, r30
    3a08:	df 01       	movw	r26, r30
    3a0a:	f8 01       	movw	r30, r16
    3a0c:	db cf       	rjmp	.-74     	; 0x39c4 <malloc+0x22>
    3a0e:	21 15       	cp	r18, r1
    3a10:	31 05       	cpc	r19, r1
    3a12:	f9 f0       	breq	.+62     	; 0x3a52 <malloc+0xb0>
    3a14:	28 1b       	sub	r18, r24
    3a16:	39 0b       	sbc	r19, r25
    3a18:	24 30       	cpi	r18, 0x04	; 4
    3a1a:	31 05       	cpc	r19, r1
    3a1c:	80 f4       	brcc	.+32     	; 0x3a3e <malloc+0x9c>
    3a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a20:	9b 81       	ldd	r25, Y+3	; 0x03
    3a22:	61 15       	cp	r22, r1
    3a24:	71 05       	cpc	r23, r1
    3a26:	21 f0       	breq	.+8      	; 0x3a30 <malloc+0x8e>
    3a28:	fb 01       	movw	r30, r22
    3a2a:	93 83       	std	Z+3, r25	; 0x03
    3a2c:	82 83       	std	Z+2, r24	; 0x02
    3a2e:	04 c0       	rjmp	.+8      	; 0x3a38 <malloc+0x96>
    3a30:	90 93 dc 04 	sts	0x04DC, r25	; 0x8004dc <__flp+0x1>
    3a34:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <__flp>
    3a38:	fe 01       	movw	r30, r28
    3a3a:	32 96       	adiw	r30, 0x02	; 2
    3a3c:	44 c0       	rjmp	.+136    	; 0x3ac6 <malloc+0x124>
    3a3e:	fe 01       	movw	r30, r28
    3a40:	e2 0f       	add	r30, r18
    3a42:	f3 1f       	adc	r31, r19
    3a44:	81 93       	st	Z+, r24
    3a46:	91 93       	st	Z+, r25
    3a48:	22 50       	subi	r18, 0x02	; 2
    3a4a:	31 09       	sbc	r19, r1
    3a4c:	39 83       	std	Y+1, r19	; 0x01
    3a4e:	28 83       	st	Y, r18
    3a50:	3a c0       	rjmp	.+116    	; 0x3ac6 <malloc+0x124>
    3a52:	20 91 d9 04 	lds	r18, 0x04D9	; 0x8004d9 <__brkval>
    3a56:	30 91 da 04 	lds	r19, 0x04DA	; 0x8004da <__brkval+0x1>
    3a5a:	23 2b       	or	r18, r19
    3a5c:	41 f4       	brne	.+16     	; 0x3a6e <malloc+0xcc>
    3a5e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3a62:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3a66:	30 93 da 04 	sts	0x04DA, r19	; 0x8004da <__brkval+0x1>
    3a6a:	20 93 d9 04 	sts	0x04D9, r18	; 0x8004d9 <__brkval>
    3a6e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3a72:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3a76:	21 15       	cp	r18, r1
    3a78:	31 05       	cpc	r19, r1
    3a7a:	41 f4       	brne	.+16     	; 0x3a8c <malloc+0xea>
    3a7c:	2d b7       	in	r18, 0x3d	; 61
    3a7e:	3e b7       	in	r19, 0x3e	; 62
    3a80:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3a84:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3a88:	24 1b       	sub	r18, r20
    3a8a:	35 0b       	sbc	r19, r21
    3a8c:	e0 91 d9 04 	lds	r30, 0x04D9	; 0x8004d9 <__brkval>
    3a90:	f0 91 da 04 	lds	r31, 0x04DA	; 0x8004da <__brkval+0x1>
    3a94:	e2 17       	cp	r30, r18
    3a96:	f3 07       	cpc	r31, r19
    3a98:	a0 f4       	brcc	.+40     	; 0x3ac2 <malloc+0x120>
    3a9a:	2e 1b       	sub	r18, r30
    3a9c:	3f 0b       	sbc	r19, r31
    3a9e:	28 17       	cp	r18, r24
    3aa0:	39 07       	cpc	r19, r25
    3aa2:	78 f0       	brcs	.+30     	; 0x3ac2 <malloc+0x120>
    3aa4:	ac 01       	movw	r20, r24
    3aa6:	4e 5f       	subi	r20, 0xFE	; 254
    3aa8:	5f 4f       	sbci	r21, 0xFF	; 255
    3aaa:	24 17       	cp	r18, r20
    3aac:	35 07       	cpc	r19, r21
    3aae:	48 f0       	brcs	.+18     	; 0x3ac2 <malloc+0x120>
    3ab0:	4e 0f       	add	r20, r30
    3ab2:	5f 1f       	adc	r21, r31
    3ab4:	50 93 da 04 	sts	0x04DA, r21	; 0x8004da <__brkval+0x1>
    3ab8:	40 93 d9 04 	sts	0x04D9, r20	; 0x8004d9 <__brkval>
    3abc:	81 93       	st	Z+, r24
    3abe:	91 93       	st	Z+, r25
    3ac0:	02 c0       	rjmp	.+4      	; 0x3ac6 <malloc+0x124>
    3ac2:	e0 e0       	ldi	r30, 0x00	; 0
    3ac4:	f0 e0       	ldi	r31, 0x00	; 0
    3ac6:	cf 01       	movw	r24, r30
    3ac8:	df 91       	pop	r29
    3aca:	cf 91       	pop	r28
    3acc:	1f 91       	pop	r17
    3ace:	0f 91       	pop	r16
    3ad0:	08 95       	ret

00003ad2 <free>:
    3ad2:	cf 93       	push	r28
    3ad4:	df 93       	push	r29
    3ad6:	00 97       	sbiw	r24, 0x00	; 0
    3ad8:	09 f4       	brne	.+2      	; 0x3adc <free+0xa>
    3ada:	81 c0       	rjmp	.+258    	; 0x3bde <free+0x10c>
    3adc:	fc 01       	movw	r30, r24
    3ade:	32 97       	sbiw	r30, 0x02	; 2
    3ae0:	13 82       	std	Z+3, r1	; 0x03
    3ae2:	12 82       	std	Z+2, r1	; 0x02
    3ae4:	a0 91 db 04 	lds	r26, 0x04DB	; 0x8004db <__flp>
    3ae8:	b0 91 dc 04 	lds	r27, 0x04DC	; 0x8004dc <__flp+0x1>
    3aec:	10 97       	sbiw	r26, 0x00	; 0
    3aee:	81 f4       	brne	.+32     	; 0x3b10 <free+0x3e>
    3af0:	20 81       	ld	r18, Z
    3af2:	31 81       	ldd	r19, Z+1	; 0x01
    3af4:	82 0f       	add	r24, r18
    3af6:	93 1f       	adc	r25, r19
    3af8:	20 91 d9 04 	lds	r18, 0x04D9	; 0x8004d9 <__brkval>
    3afc:	30 91 da 04 	lds	r19, 0x04DA	; 0x8004da <__brkval+0x1>
    3b00:	28 17       	cp	r18, r24
    3b02:	39 07       	cpc	r19, r25
    3b04:	51 f5       	brne	.+84     	; 0x3b5a <free+0x88>
    3b06:	f0 93 da 04 	sts	0x04DA, r31	; 0x8004da <__brkval+0x1>
    3b0a:	e0 93 d9 04 	sts	0x04D9, r30	; 0x8004d9 <__brkval>
    3b0e:	67 c0       	rjmp	.+206    	; 0x3bde <free+0x10c>
    3b10:	ed 01       	movw	r28, r26
    3b12:	20 e0       	ldi	r18, 0x00	; 0
    3b14:	30 e0       	ldi	r19, 0x00	; 0
    3b16:	ce 17       	cp	r28, r30
    3b18:	df 07       	cpc	r29, r31
    3b1a:	40 f4       	brcc	.+16     	; 0x3b2c <free+0x5a>
    3b1c:	4a 81       	ldd	r20, Y+2	; 0x02
    3b1e:	5b 81       	ldd	r21, Y+3	; 0x03
    3b20:	9e 01       	movw	r18, r28
    3b22:	41 15       	cp	r20, r1
    3b24:	51 05       	cpc	r21, r1
    3b26:	f1 f0       	breq	.+60     	; 0x3b64 <free+0x92>
    3b28:	ea 01       	movw	r28, r20
    3b2a:	f5 cf       	rjmp	.-22     	; 0x3b16 <free+0x44>
    3b2c:	d3 83       	std	Z+3, r29	; 0x03
    3b2e:	c2 83       	std	Z+2, r28	; 0x02
    3b30:	40 81       	ld	r20, Z
    3b32:	51 81       	ldd	r21, Z+1	; 0x01
    3b34:	84 0f       	add	r24, r20
    3b36:	95 1f       	adc	r25, r21
    3b38:	c8 17       	cp	r28, r24
    3b3a:	d9 07       	cpc	r29, r25
    3b3c:	59 f4       	brne	.+22     	; 0x3b54 <free+0x82>
    3b3e:	88 81       	ld	r24, Y
    3b40:	99 81       	ldd	r25, Y+1	; 0x01
    3b42:	84 0f       	add	r24, r20
    3b44:	95 1f       	adc	r25, r21
    3b46:	02 96       	adiw	r24, 0x02	; 2
    3b48:	91 83       	std	Z+1, r25	; 0x01
    3b4a:	80 83       	st	Z, r24
    3b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b4e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b50:	93 83       	std	Z+3, r25	; 0x03
    3b52:	82 83       	std	Z+2, r24	; 0x02
    3b54:	21 15       	cp	r18, r1
    3b56:	31 05       	cpc	r19, r1
    3b58:	29 f4       	brne	.+10     	; 0x3b64 <free+0x92>
    3b5a:	f0 93 dc 04 	sts	0x04DC, r31	; 0x8004dc <__flp+0x1>
    3b5e:	e0 93 db 04 	sts	0x04DB, r30	; 0x8004db <__flp>
    3b62:	3d c0       	rjmp	.+122    	; 0x3bde <free+0x10c>
    3b64:	e9 01       	movw	r28, r18
    3b66:	fb 83       	std	Y+3, r31	; 0x03
    3b68:	ea 83       	std	Y+2, r30	; 0x02
    3b6a:	49 91       	ld	r20, Y+
    3b6c:	59 91       	ld	r21, Y+
    3b6e:	c4 0f       	add	r28, r20
    3b70:	d5 1f       	adc	r29, r21
    3b72:	ec 17       	cp	r30, r28
    3b74:	fd 07       	cpc	r31, r29
    3b76:	61 f4       	brne	.+24     	; 0x3b90 <free+0xbe>
    3b78:	80 81       	ld	r24, Z
    3b7a:	91 81       	ldd	r25, Z+1	; 0x01
    3b7c:	84 0f       	add	r24, r20
    3b7e:	95 1f       	adc	r25, r21
    3b80:	02 96       	adiw	r24, 0x02	; 2
    3b82:	e9 01       	movw	r28, r18
    3b84:	99 83       	std	Y+1, r25	; 0x01
    3b86:	88 83       	st	Y, r24
    3b88:	82 81       	ldd	r24, Z+2	; 0x02
    3b8a:	93 81       	ldd	r25, Z+3	; 0x03
    3b8c:	9b 83       	std	Y+3, r25	; 0x03
    3b8e:	8a 83       	std	Y+2, r24	; 0x02
    3b90:	e0 e0       	ldi	r30, 0x00	; 0
    3b92:	f0 e0       	ldi	r31, 0x00	; 0
    3b94:	12 96       	adiw	r26, 0x02	; 2
    3b96:	8d 91       	ld	r24, X+
    3b98:	9c 91       	ld	r25, X
    3b9a:	13 97       	sbiw	r26, 0x03	; 3
    3b9c:	00 97       	sbiw	r24, 0x00	; 0
    3b9e:	19 f0       	breq	.+6      	; 0x3ba6 <free+0xd4>
    3ba0:	fd 01       	movw	r30, r26
    3ba2:	dc 01       	movw	r26, r24
    3ba4:	f7 cf       	rjmp	.-18     	; 0x3b94 <free+0xc2>
    3ba6:	8d 91       	ld	r24, X+
    3ba8:	9c 91       	ld	r25, X
    3baa:	11 97       	sbiw	r26, 0x01	; 1
    3bac:	9d 01       	movw	r18, r26
    3bae:	2e 5f       	subi	r18, 0xFE	; 254
    3bb0:	3f 4f       	sbci	r19, 0xFF	; 255
    3bb2:	82 0f       	add	r24, r18
    3bb4:	93 1f       	adc	r25, r19
    3bb6:	20 91 d9 04 	lds	r18, 0x04D9	; 0x8004d9 <__brkval>
    3bba:	30 91 da 04 	lds	r19, 0x04DA	; 0x8004da <__brkval+0x1>
    3bbe:	28 17       	cp	r18, r24
    3bc0:	39 07       	cpc	r19, r25
    3bc2:	69 f4       	brne	.+26     	; 0x3bde <free+0x10c>
    3bc4:	30 97       	sbiw	r30, 0x00	; 0
    3bc6:	29 f4       	brne	.+10     	; 0x3bd2 <free+0x100>
    3bc8:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <__flp+0x1>
    3bcc:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <__flp>
    3bd0:	02 c0       	rjmp	.+4      	; 0x3bd6 <free+0x104>
    3bd2:	13 82       	std	Z+3, r1	; 0x03
    3bd4:	12 82       	std	Z+2, r1	; 0x02
    3bd6:	b0 93 da 04 	sts	0x04DA, r27	; 0x8004da <__brkval+0x1>
    3bda:	a0 93 d9 04 	sts	0x04D9, r26	; 0x8004d9 <__brkval>
    3bde:	df 91       	pop	r29
    3be0:	cf 91       	pop	r28
    3be2:	08 95       	ret

00003be4 <realloc>:
    3be4:	a0 e0       	ldi	r26, 0x00	; 0
    3be6:	b0 e0       	ldi	r27, 0x00	; 0
    3be8:	e8 ef       	ldi	r30, 0xF8	; 248
    3bea:	fd e1       	ldi	r31, 0x1D	; 29
    3bec:	0c 94 d8 1e 	jmp	0x3db0	; 0x3db0 <__prologue_saves__+0x8>
    3bf0:	ec 01       	movw	r28, r24
    3bf2:	00 97       	sbiw	r24, 0x00	; 0
    3bf4:	21 f4       	brne	.+8      	; 0x3bfe <realloc+0x1a>
    3bf6:	cb 01       	movw	r24, r22
    3bf8:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <malloc>
    3bfc:	b4 c0       	rjmp	.+360    	; 0x3d66 <realloc+0x182>
    3bfe:	fc 01       	movw	r30, r24
    3c00:	e6 0f       	add	r30, r22
    3c02:	f7 1f       	adc	r31, r23
    3c04:	9c 01       	movw	r18, r24
    3c06:	22 50       	subi	r18, 0x02	; 2
    3c08:	31 09       	sbc	r19, r1
    3c0a:	e2 17       	cp	r30, r18
    3c0c:	f3 07       	cpc	r31, r19
    3c0e:	08 f4       	brcc	.+2      	; 0x3c12 <realloc+0x2e>
    3c10:	a8 c0       	rjmp	.+336    	; 0x3d62 <realloc+0x17e>
    3c12:	d9 01       	movw	r26, r18
    3c14:	0d 91       	ld	r16, X+
    3c16:	1c 91       	ld	r17, X
    3c18:	11 97       	sbiw	r26, 0x01	; 1
    3c1a:	06 17       	cp	r16, r22
    3c1c:	17 07       	cpc	r17, r23
    3c1e:	b0 f0       	brcs	.+44     	; 0x3c4c <realloc+0x68>
    3c20:	05 30       	cpi	r16, 0x05	; 5
    3c22:	11 05       	cpc	r17, r1
    3c24:	08 f4       	brcc	.+2      	; 0x3c28 <realloc+0x44>
    3c26:	9b c0       	rjmp	.+310    	; 0x3d5e <realloc+0x17a>
    3c28:	c8 01       	movw	r24, r16
    3c2a:	04 97       	sbiw	r24, 0x04	; 4
    3c2c:	86 17       	cp	r24, r22
    3c2e:	97 07       	cpc	r25, r23
    3c30:	08 f4       	brcc	.+2      	; 0x3c34 <realloc+0x50>
    3c32:	95 c0       	rjmp	.+298    	; 0x3d5e <realloc+0x17a>
    3c34:	02 50       	subi	r16, 0x02	; 2
    3c36:	11 09       	sbc	r17, r1
    3c38:	06 1b       	sub	r16, r22
    3c3a:	17 0b       	sbc	r17, r23
    3c3c:	01 93       	st	Z+, r16
    3c3e:	11 93       	st	Z+, r17
    3c40:	6d 93       	st	X+, r22
    3c42:	7c 93       	st	X, r23
    3c44:	cf 01       	movw	r24, r30
    3c46:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <free>
    3c4a:	89 c0       	rjmp	.+274    	; 0x3d5e <realloc+0x17a>
    3c4c:	5b 01       	movw	r10, r22
    3c4e:	a0 1a       	sub	r10, r16
    3c50:	b1 0a       	sbc	r11, r17
    3c52:	4c 01       	movw	r8, r24
    3c54:	80 0e       	add	r8, r16
    3c56:	91 1e       	adc	r9, r17
    3c58:	a0 91 db 04 	lds	r26, 0x04DB	; 0x8004db <__flp>
    3c5c:	b0 91 dc 04 	lds	r27, 0x04DC	; 0x8004dc <__flp+0x1>
    3c60:	61 2c       	mov	r6, r1
    3c62:	71 2c       	mov	r7, r1
    3c64:	e1 2c       	mov	r14, r1
    3c66:	f1 2c       	mov	r15, r1
    3c68:	10 97       	sbiw	r26, 0x00	; 0
    3c6a:	09 f4       	brne	.+2      	; 0x3c6e <realloc+0x8a>
    3c6c:	46 c0       	rjmp	.+140    	; 0x3cfa <realloc+0x116>
    3c6e:	8d 91       	ld	r24, X+
    3c70:	9c 91       	ld	r25, X
    3c72:	11 97       	sbiw	r26, 0x01	; 1
    3c74:	a8 15       	cp	r26, r8
    3c76:	b9 05       	cpc	r27, r9
    3c78:	b1 f5       	brne	.+108    	; 0x3ce6 <realloc+0x102>
    3c7a:	6c 01       	movw	r12, r24
    3c7c:	42 e0       	ldi	r20, 0x02	; 2
    3c7e:	c4 0e       	add	r12, r20
    3c80:	d1 1c       	adc	r13, r1
    3c82:	ca 14       	cp	r12, r10
    3c84:	db 04       	cpc	r13, r11
    3c86:	78 f1       	brcs	.+94     	; 0x3ce6 <realloc+0x102>
    3c88:	4c 01       	movw	r8, r24
    3c8a:	8a 18       	sub	r8, r10
    3c8c:	9b 08       	sbc	r9, r11
    3c8e:	64 01       	movw	r12, r8
    3c90:	42 e0       	ldi	r20, 0x02	; 2
    3c92:	c4 0e       	add	r12, r20
    3c94:	d1 1c       	adc	r13, r1
    3c96:	12 96       	adiw	r26, 0x02	; 2
    3c98:	bc 90       	ld	r11, X
    3c9a:	12 97       	sbiw	r26, 0x02	; 2
    3c9c:	13 96       	adiw	r26, 0x03	; 3
    3c9e:	ac 91       	ld	r26, X
    3ca0:	b5 e0       	ldi	r27, 0x05	; 5
    3ca2:	cb 16       	cp	r12, r27
    3ca4:	d1 04       	cpc	r13, r1
    3ca6:	40 f0       	brcs	.+16     	; 0x3cb8 <realloc+0xd4>
    3ca8:	b2 82       	std	Z+2, r11	; 0x02
    3caa:	a3 83       	std	Z+3, r26	; 0x03
    3cac:	91 82       	std	Z+1, r9	; 0x01
    3cae:	80 82       	st	Z, r8
    3cb0:	d9 01       	movw	r26, r18
    3cb2:	6d 93       	st	X+, r22
    3cb4:	7c 93       	st	X, r23
    3cb6:	09 c0       	rjmp	.+18     	; 0x3cca <realloc+0xe6>
    3cb8:	0e 5f       	subi	r16, 0xFE	; 254
    3cba:	1f 4f       	sbci	r17, 0xFF	; 255
    3cbc:	80 0f       	add	r24, r16
    3cbe:	91 1f       	adc	r25, r17
    3cc0:	f9 01       	movw	r30, r18
    3cc2:	91 83       	std	Z+1, r25	; 0x01
    3cc4:	80 83       	st	Z, r24
    3cc6:	eb 2d       	mov	r30, r11
    3cc8:	fa 2f       	mov	r31, r26
    3cca:	e1 14       	cp	r14, r1
    3ccc:	f1 04       	cpc	r15, r1
    3cce:	31 f0       	breq	.+12     	; 0x3cdc <realloc+0xf8>
    3cd0:	d7 01       	movw	r26, r14
    3cd2:	13 96       	adiw	r26, 0x03	; 3
    3cd4:	fc 93       	st	X, r31
    3cd6:	ee 93       	st	-X, r30
    3cd8:	12 97       	sbiw	r26, 0x02	; 2
    3cda:	41 c0       	rjmp	.+130    	; 0x3d5e <realloc+0x17a>
    3cdc:	f0 93 dc 04 	sts	0x04DC, r31	; 0x8004dc <__flp+0x1>
    3ce0:	e0 93 db 04 	sts	0x04DB, r30	; 0x8004db <__flp>
    3ce4:	3c c0       	rjmp	.+120    	; 0x3d5e <realloc+0x17a>
    3ce6:	68 16       	cp	r6, r24
    3ce8:	79 06       	cpc	r7, r25
    3cea:	08 f4       	brcc	.+2      	; 0x3cee <realloc+0x10a>
    3cec:	3c 01       	movw	r6, r24
    3cee:	7d 01       	movw	r14, r26
    3cf0:	12 96       	adiw	r26, 0x02	; 2
    3cf2:	0d 90       	ld	r0, X+
    3cf4:	bc 91       	ld	r27, X
    3cf6:	a0 2d       	mov	r26, r0
    3cf8:	b7 cf       	rjmp	.-146    	; 0x3c68 <realloc+0x84>
    3cfa:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <__brkval>
    3cfe:	90 91 da 04 	lds	r25, 0x04DA	; 0x8004da <__brkval+0x1>
    3d02:	88 16       	cp	r8, r24
    3d04:	99 06       	cpc	r9, r25
    3d06:	e1 f4       	brne	.+56     	; 0x3d40 <realloc+0x15c>
    3d08:	66 16       	cp	r6, r22
    3d0a:	77 06       	cpc	r7, r23
    3d0c:	c8 f4       	brcc	.+50     	; 0x3d40 <realloc+0x15c>
    3d0e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3d12:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    3d16:	00 97       	sbiw	r24, 0x00	; 0
    3d18:	41 f4       	brne	.+16     	; 0x3d2a <realloc+0x146>
    3d1a:	8d b7       	in	r24, 0x3d	; 61
    3d1c:	9e b7       	in	r25, 0x3e	; 62
    3d1e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3d22:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3d26:	84 1b       	sub	r24, r20
    3d28:	95 0b       	sbc	r25, r21
    3d2a:	e8 17       	cp	r30, r24
    3d2c:	f9 07       	cpc	r31, r25
    3d2e:	c8 f4       	brcc	.+50     	; 0x3d62 <realloc+0x17e>
    3d30:	f0 93 da 04 	sts	0x04DA, r31	; 0x8004da <__brkval+0x1>
    3d34:	e0 93 d9 04 	sts	0x04D9, r30	; 0x8004d9 <__brkval>
    3d38:	f9 01       	movw	r30, r18
    3d3a:	71 83       	std	Z+1, r23	; 0x01
    3d3c:	60 83       	st	Z, r22
    3d3e:	0f c0       	rjmp	.+30     	; 0x3d5e <realloc+0x17a>
    3d40:	cb 01       	movw	r24, r22
    3d42:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <malloc>
    3d46:	7c 01       	movw	r14, r24
    3d48:	00 97       	sbiw	r24, 0x00	; 0
    3d4a:	59 f0       	breq	.+22     	; 0x3d62 <realloc+0x17e>
    3d4c:	a8 01       	movw	r20, r16
    3d4e:	be 01       	movw	r22, r28
    3d50:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <memcpy>
    3d54:	ce 01       	movw	r24, r28
    3d56:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <free>
    3d5a:	c7 01       	movw	r24, r14
    3d5c:	04 c0       	rjmp	.+8      	; 0x3d66 <realloc+0x182>
    3d5e:	ce 01       	movw	r24, r28
    3d60:	02 c0       	rjmp	.+4      	; 0x3d66 <realloc+0x182>
    3d62:	80 e0       	ldi	r24, 0x00	; 0
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	cd b7       	in	r28, 0x3d	; 61
    3d68:	de b7       	in	r29, 0x3e	; 62
    3d6a:	ee e0       	ldi	r30, 0x0E	; 14
    3d6c:	0c 94 f4 1e 	jmp	0x3de8	; 0x3de8 <__epilogue_restores__+0x8>

00003d70 <abort>:
    3d70:	81 e0       	ldi	r24, 0x01	; 1
    3d72:	90 e0       	ldi	r25, 0x00	; 0
    3d74:	f8 94       	cli
    3d76:	0c 94 0b 1f 	jmp	0x3e16	; 0x3e16 <__do_global_dtors>

00003d7a <strcpy_P>:
    3d7a:	fb 01       	movw	r30, r22
    3d7c:	dc 01       	movw	r26, r24
    3d7e:	05 90       	lpm	r0, Z+
    3d80:	0d 92       	st	X+, r0
    3d82:	00 20       	and	r0, r0
    3d84:	e1 f7       	brne	.-8      	; 0x3d7e <strcpy_P+0x4>
    3d86:	08 95       	ret

00003d88 <memcpy>:
    3d88:	fb 01       	movw	r30, r22
    3d8a:	dc 01       	movw	r26, r24
    3d8c:	02 c0       	rjmp	.+4      	; 0x3d92 <memcpy+0xa>
    3d8e:	01 90       	ld	r0, Z+
    3d90:	0d 92       	st	X+, r0
    3d92:	41 50       	subi	r20, 0x01	; 1
    3d94:	50 40       	sbci	r21, 0x00	; 0
    3d96:	d8 f7       	brcc	.-10     	; 0x3d8e <memcpy+0x6>
    3d98:	08 95       	ret

00003d9a <strcpy>:
    3d9a:	fb 01       	movw	r30, r22
    3d9c:	dc 01       	movw	r26, r24
    3d9e:	01 90       	ld	r0, Z+
    3da0:	0d 92       	st	X+, r0
    3da2:	00 20       	and	r0, r0
    3da4:	e1 f7       	brne	.-8      	; 0x3d9e <strcpy+0x4>
    3da6:	08 95       	ret

00003da8 <__prologue_saves__>:
    3da8:	2f 92       	push	r2
    3daa:	3f 92       	push	r3
    3dac:	4f 92       	push	r4
    3dae:	5f 92       	push	r5
    3db0:	6f 92       	push	r6
    3db2:	7f 92       	push	r7
    3db4:	8f 92       	push	r8
    3db6:	9f 92       	push	r9
    3db8:	af 92       	push	r10
    3dba:	bf 92       	push	r11
    3dbc:	cf 92       	push	r12
    3dbe:	df 92       	push	r13
    3dc0:	ef 92       	push	r14
    3dc2:	ff 92       	push	r15
    3dc4:	0f 93       	push	r16
    3dc6:	1f 93       	push	r17
    3dc8:	cf 93       	push	r28
    3dca:	df 93       	push	r29
    3dcc:	cd b7       	in	r28, 0x3d	; 61
    3dce:	de b7       	in	r29, 0x3e	; 62
    3dd0:	ca 1b       	sub	r28, r26
    3dd2:	db 0b       	sbc	r29, r27
    3dd4:	0f b6       	in	r0, 0x3f	; 63
    3dd6:	f8 94       	cli
    3dd8:	de bf       	out	0x3e, r29	; 62
    3dda:	0f be       	out	0x3f, r0	; 63
    3ddc:	cd bf       	out	0x3d, r28	; 61
    3dde:	09 94       	ijmp

00003de0 <__epilogue_restores__>:
    3de0:	2a 88       	ldd	r2, Y+18	; 0x12
    3de2:	39 88       	ldd	r3, Y+17	; 0x11
    3de4:	48 88       	ldd	r4, Y+16	; 0x10
    3de6:	5f 84       	ldd	r5, Y+15	; 0x0f
    3de8:	6e 84       	ldd	r6, Y+14	; 0x0e
    3dea:	7d 84       	ldd	r7, Y+13	; 0x0d
    3dec:	8c 84       	ldd	r8, Y+12	; 0x0c
    3dee:	9b 84       	ldd	r9, Y+11	; 0x0b
    3df0:	aa 84       	ldd	r10, Y+10	; 0x0a
    3df2:	b9 84       	ldd	r11, Y+9	; 0x09
    3df4:	c8 84       	ldd	r12, Y+8	; 0x08
    3df6:	df 80       	ldd	r13, Y+7	; 0x07
    3df8:	ee 80       	ldd	r14, Y+6	; 0x06
    3dfa:	fd 80       	ldd	r15, Y+5	; 0x05
    3dfc:	0c 81       	ldd	r16, Y+4	; 0x04
    3dfe:	1b 81       	ldd	r17, Y+3	; 0x03
    3e00:	aa 81       	ldd	r26, Y+2	; 0x02
    3e02:	b9 81       	ldd	r27, Y+1	; 0x01
    3e04:	ce 0f       	add	r28, r30
    3e06:	d1 1d       	adc	r29, r1
    3e08:	0f b6       	in	r0, 0x3f	; 63
    3e0a:	f8 94       	cli
    3e0c:	de bf       	out	0x3e, r29	; 62
    3e0e:	0f be       	out	0x3f, r0	; 63
    3e10:	cd bf       	out	0x3d, r28	; 61
    3e12:	ed 01       	movw	r28, r26
    3e14:	08 95       	ret

00003e16 <__do_global_dtors>:
    3e16:	10 e0       	ldi	r17, 0x00	; 0
    3e18:	cd ee       	ldi	r28, 0xED	; 237
    3e1a:	d0 e0       	ldi	r29, 0x00	; 0
    3e1c:	04 c0       	rjmp	.+8      	; 0x3e26 <__do_global_dtors+0x10>
    3e1e:	fe 01       	movw	r30, r28
    3e20:	0e 94 b7 1c 	call	0x396e	; 0x396e <__tablejump2__>
    3e24:	21 96       	adiw	r28, 0x01	; 1
    3e26:	ce 3e       	cpi	r28, 0xEE	; 238
    3e28:	d1 07       	cpc	r29, r17
    3e2a:	c9 f7       	brne	.-14     	; 0x3e1e <__do_global_dtors+0x8>
    3e2c:	f8 94       	cli

00003e2e <__stop_program>:
    3e2e:	ff cf       	rjmp	.-2      	; 0x3e2e <__stop_program>
