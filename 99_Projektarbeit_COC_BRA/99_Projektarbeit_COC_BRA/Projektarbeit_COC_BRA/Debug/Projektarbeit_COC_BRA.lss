
Projektarbeit_COC_BRA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016a  00800100  00003ea2  00003f36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003ea2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000269  0080026a  0080026a  000040a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000040a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000040d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b58  00000000  00000000  00004110  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000185e3  00000000  00000000  00004c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004113  00000000  00000000  0001d24b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000062e9  00000000  00000000  0002135e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000023d0  00000000  00000000  00027648  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004f08  00000000  00000000  00029a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ca44  00000000  00000000  0002e920  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c48  00000000  00000000  0003b364  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__dtors_end>
       4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      10:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      14:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      18:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      1c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      20:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      24:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      28:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__vector_10>
      2c:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__vector_11>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      34:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      38:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      3c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      40:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      44:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      48:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      4c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      50:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      54:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      58:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      5c:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <__vector_23>
      60:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      64:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      68:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      6c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      70:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      74:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      78:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      7c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      80:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      84:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      88:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      8c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      90:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__vector_36>
      94:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      98:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      9c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ac:	4f 19       	sub	r20, r15
      ae:	52 19       	sub	r21, r2
      b0:	41 19       	sub	r20, r1
      b2:	45 19       	sub	r20, r5
      b4:	4b 19       	sub	r20, r11
      b6:	73 19       	sub	r23, r3
      b8:	73 19       	sub	r23, r3
      ba:	73 19       	sub	r23, r3
      bc:	56 19       	sub	r21, r6
      be:	5a 19       	sub	r21, r10
      c0:	5e 19       	sub	r21, r14
      c2:	64 19       	sub	r22, r4
      c4:	68 19       	sub	r22, r8
      c6:	73 19       	sub	r23, r3
      c8:	6e 19       	sub	r22, r14

000000ca <USB_DeviceDescriptorIAD>:
      ca:	12 01 00 02 ef 02 01 40 41 23 36 80 00 01 01 02     .......@A#6.....
      da:	03 01                                               ..

000000dc <STRING_MANUFACTURER>:
      dc:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

000000e8 <STRING_PRODUCT>:
      e8:	41 72 64 75 69 6e 6f 20 4c 65 6f 6e 61 72 64 6f     Arduino Leonardo
	...

000000f9 <STRING_LANGUAGE>:
      f9:	04 03 09 04                                         ....

000000fd <analog_pin_to_channel_PGM>:
      fd:	07 06 05 04 01 00 08 0a 0b 0c 0d 09                 ............

00000109 <digital_pin_to_timer_PGM>:
     109:	00 00 00 02 00 09 0f 00 00 03 04 01 00 0c 00 00     ................
	...

00000128 <digital_pin_to_bit_mask_PGM>:
     128:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     138:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

00000147 <digital_pin_to_port_PGM>:
     147:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     157:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

00000166 <port_to_input_PGM>:
     166:	00 00 00 00 23 00 26 00 29 00 2c 00 2f 00           ....#.&.).,./.

00000174 <port_to_output_PGM>:
     174:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

00000182 <port_to_mode_PGM>:
     182:	00 00 00 00 24 00 27 00 2a 00 2d 00 30 00           ....$.'.*.-.0.

00000190 <_cdcInterface>:
     190:	08 0b 00 02 02 02 01 00 09 04 00 00 01 02 02 00     ................
     1a0:	00 05 24 00 10 01 05 24 01 01 01 04 24 02 06 05     ..$....$....$...
     1b0:	24 06 00 01 07 05 81 03 10 00 40 09 04 01 00 02     $.........@.....
     1c0:	0a 00 00 00 07 05 02 02 40 00 00 07 05 83 02 40     ........@......@
	...

000001d2 <__ctors_start>:
     1d2:	5d 04       	cpc	r5, r13
     1d4:	2c 10       	cpse	r2, r12
     1d6:	67 1b       	sub	r22, r23

000001d8 <__ctors_end>:
     1d8:	98 05       	cpc	r25, r8

000001da <__dtors_end>:
     1da:	11 24       	eor	r1, r1
     1dc:	1f be       	out	0x3f, r1	; 63
     1de:	cf ef       	ldi	r28, 0xFF	; 255
     1e0:	da e0       	ldi	r29, 0x0A	; 10
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	cd bf       	out	0x3d, r28	; 61

000001e6 <__do_copy_data>:
     1e6:	12 e0       	ldi	r17, 0x02	; 2
     1e8:	a0 e0       	ldi	r26, 0x00	; 0
     1ea:	b1 e0       	ldi	r27, 0x01	; 1
     1ec:	e2 ea       	ldi	r30, 0xA2	; 162
     1ee:	fe e3       	ldi	r31, 0x3E	; 62
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <__do_copy_data+0x10>
     1f2:	05 90       	lpm	r0, Z+
     1f4:	0d 92       	st	X+, r0
     1f6:	aa 36       	cpi	r26, 0x6A	; 106
     1f8:	b1 07       	cpc	r27, r17
     1fa:	d9 f7       	brne	.-10     	; 0x1f2 <__do_copy_data+0xc>

000001fc <__do_clear_bss>:
     1fc:	24 e0       	ldi	r18, 0x04	; 4
     1fe:	aa e6       	ldi	r26, 0x6A	; 106
     200:	b2 e0       	ldi	r27, 0x02	; 2
     202:	01 c0       	rjmp	.+2      	; 0x206 <.do_clear_bss_start>

00000204 <.do_clear_bss_loop>:
     204:	1d 92       	st	X+, r1

00000206 <.do_clear_bss_start>:
     206:	a3 3d       	cpi	r26, 0xD3	; 211
     208:	b2 07       	cpc	r27, r18
     20a:	e1 f7       	brne	.-8      	; 0x204 <.do_clear_bss_loop>

0000020c <__do_global_ctors>:
     20c:	10 e0       	ldi	r17, 0x00	; 0
     20e:	cc ee       	ldi	r28, 0xEC	; 236
     210:	d0 e0       	ldi	r29, 0x00	; 0
     212:	04 c0       	rjmp	.+8      	; 0x21c <__do_global_ctors+0x10>
     214:	21 97       	sbiw	r28, 0x01	; 1
     216:	fe 01       	movw	r30, r28
     218:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <__tablejump2__>
     21c:	c9 3e       	cpi	r28, 0xE9	; 233
     21e:	d1 07       	cpc	r29, r17
     220:	c9 f7       	brne	.-14     	; 0x214 <__do_global_ctors+0x8>
     222:	0e 94 c4 11 	call	0x2388	; 0x2388 <main>
     226:	0c 94 44 1f 	jmp	0x3e88	; 0x3e88 <__do_global_dtors>

0000022a <__bad_interrupt>:
     22a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022e <_Z6getkeyv>:
 */
int getkey(void)
{
	static int keys[NUMKEYS+1];
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	0e 94 06 19 	call	0x320c	; 0x320c <analogRead>

	if (val > 1020) { // no key pressed
     234:	8d 3f       	cpi	r24, 0xFD	; 253
     236:	23 e0       	ldi	r18, 0x03	; 3
     238:	92 07       	cpc	r25, r18
     23a:	20 f1       	brcs	.+72     	; 0x284 <_Z6getkeyv+0x56>
		if (++keys[0] > NOPRESS) {
     23c:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <__data_end>
     240:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <__data_end+0x1>
     244:	01 96       	adiw	r24, 0x01	; 1
     246:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <__data_end+0x1>
     24a:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <__data_end>
     24e:	03 97       	sbiw	r24, 0x03	; 3
     250:	0c f4       	brge	.+2      	; 0x254 <_Z6getkeyv+0x26>
     252:	6a c0       	rjmp	.+212    	; 0x328 <_Z6getkeyv+0xfa>
     254:	ea e6       	ldi	r30, 0x6A	; 106
     256:	f2 e0       	ldi	r31, 0x02	; 2
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	90 e0       	ldi	r25, 0x00	; 0
			for(uint8_t i = 0; i <= NUMKEYS; i++){
				if(keys[i] > KEYPRESS){
     260:	40 81       	ld	r20, Z
     262:	51 81       	ldd	r21, Z+1	; 0x01
     264:	44 30       	cpi	r20, 0x04	; 4
     266:	51 05       	cpc	r21, r1
     268:	2c f0       	brlt	.+10     	; 0x274 <_Z6getkeyv+0x46>
     26a:	c9 01       	movw	r24, r18
					data = i;
					if(keys[i] > LONGPRESS) data += 5;
     26c:	49 3c       	cpi	r20, 0xC9	; 201
     26e:	51 05       	cpc	r21, r1
     270:	0c f0       	brlt	.+2      	; 0x274 <_Z6getkeyv+0x46>
     272:	05 96       	adiw	r24, 0x05	; 5
				}
				keys[i] = 0;
     274:	11 92       	st	Z+, r1
     276:	11 92       	st	Z+, r1
     278:	2f 5f       	subi	r18, 0xFF	; 255
     27a:	3f 4f       	sbci	r19, 0xFF	; 255
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);

	if (val > 1020) { // no key pressed
		if (++keys[0] > NOPRESS) {
			for(uint8_t i = 0; i <= NUMKEYS; i++){
     27c:	26 30       	cpi	r18, 0x06	; 6
     27e:	31 05       	cpc	r19, r1
     280:	79 f7       	brne	.-34     	; 0x260 <_Z6getkeyv+0x32>
     282:	08 95       	ret
			}
		}
		else data = 0;
	}
	else {
		if (val < S1_LIMIT && keys[1] < 32000) ++keys[1]; // key1 pressed
     284:	89 34       	cpi	r24, 0x49	; 73
     286:	91 05       	cpc	r25, r1
     288:	70 f4       	brcc	.+28     	; 0x2a6 <_Z6getkeyv+0x78>
     28a:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <__data_end+0x2>
     28e:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <__data_end+0x3>
     292:	81 15       	cp	r24, r1
     294:	2d e7       	ldi	r18, 0x7D	; 125
     296:	92 07       	cpc	r25, r18
     298:	4c f4       	brge	.+18     	; 0x2ac <_Z6getkeyv+0x7e>
     29a:	01 96       	adiw	r24, 0x01	; 1
     29c:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <__data_end+0x3>
     2a0:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <__data_end+0x2>
     2a4:	41 c0       	rjmp	.+130    	; 0x328 <_Z6getkeyv+0xfa>
		else if (val < S2_LIMIT && keys[2] < 32000) ++keys[2]; //key2 pressed
     2a6:	8e 3e       	cpi	r24, 0xEE	; 238
     2a8:	91 05       	cpc	r25, r1
     2aa:	70 f4       	brcc	.+28     	; 0x2c8 <_Z6getkeyv+0x9a>
     2ac:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <__data_end+0x4>
     2b0:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <__data_end+0x5>
     2b4:	81 15       	cp	r24, r1
     2b6:	2d e7       	ldi	r18, 0x7D	; 125
     2b8:	92 07       	cpc	r25, r18
     2ba:	54 f4       	brge	.+20     	; 0x2d0 <_Z6getkeyv+0xa2>
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <__data_end+0x5>
     2c2:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <__data_end+0x4>
     2c6:	30 c0       	rjmp	.+96     	; 0x328 <_Z6getkeyv+0xfa>
		else if (val < S3_LIMIT && keys[3] < 32000) ++keys[3]; //key3 pressed
     2c8:	82 3a       	cpi	r24, 0xA2	; 162
     2ca:	21 e0       	ldi	r18, 0x01	; 1
     2cc:	92 07       	cpc	r25, r18
     2ce:	70 f4       	brcc	.+28     	; 0x2ec <_Z6getkeyv+0xbe>
     2d0:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <__data_end+0x6>
     2d4:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <__data_end+0x7>
     2d8:	81 15       	cp	r24, r1
     2da:	2d e7       	ldi	r18, 0x7D	; 125
     2dc:	92 07       	cpc	r25, r18
     2de:	4c f4       	brge	.+18     	; 0x2f2 <_Z6getkeyv+0xc4>
     2e0:	01 96       	adiw	r24, 0x01	; 1
     2e2:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <__data_end+0x7>
     2e6:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <__data_end+0x6>
     2ea:	1e c0       	rjmp	.+60     	; 0x328 <_Z6getkeyv+0xfa>
		else if (val < S4_LIMIT && keys[4] < 32000) ++keys[4]; //key4 pressed
     2ec:	80 37       	cpi	r24, 0x70	; 112
     2ee:	92 40       	sbci	r25, 0x02	; 2
     2f0:	70 f4       	brcc	.+28     	; 0x30e <_Z6getkeyv+0xe0>
     2f2:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <__data_end+0x8>
     2f6:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <__data_end+0x9>
     2fa:	81 15       	cp	r24, r1
     2fc:	2d e7       	ldi	r18, 0x7D	; 125
     2fe:	92 07       	cpc	r25, r18
     300:	34 f4       	brge	.+12     	; 0x30e <_Z6getkeyv+0xe0>
     302:	01 96       	adiw	r24, 0x01	; 1
     304:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <__data_end+0x9>
     308:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <__data_end+0x8>
     30c:	0d c0       	rjmp	.+26     	; 0x328 <_Z6getkeyv+0xfa>
		else if ( keys[5] < 32000) ++keys[5]; // key5 pressed
     30e:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <__data_end+0xa>
     312:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <__data_end+0xb>
     316:	81 15       	cp	r24, r1
     318:	2d e7       	ldi	r18, 0x7D	; 125
     31a:	92 07       	cpc	r25, r18
     31c:	2c f4       	brge	.+10     	; 0x328 <_Z6getkeyv+0xfa>
     31e:	01 96       	adiw	r24, 0x01	; 1
     320:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <__data_end+0xb>
     324:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <__data_end+0xa>
		data = 0;
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
	}
	return data;
}
     32c:	08 95       	ret

0000032e <_ZN5Print17availableForWriteEv>:
void callibratePointer() 
{
	lcd.clear();
	lcd.print("Zeiger kalibrieren");
	delay(2000);
	lcd.clear();
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	08 95       	ret

00000334 <_ZN5Print5flushEv>:
     334:	08 95       	ret

00000336 <_ZN7hd4478013iosetContrastEh>:
     336:	8d ef       	ldi	r24, 0xFD	; 253
     338:	9f ef       	ldi	r25, 0xFF	; 255
     33a:	08 95       	ret

0000033c <_Z10changeAMPMv>:
     33c:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <ampm>
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	89 27       	eor	r24, r25
     344:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <ampm>
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	08 95       	ret

0000034e <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>:
     34e:	0f 93       	push	r16
     350:	1f 93       	push	r17
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	18 2f       	mov	r17, r24
     358:	d0 e0       	ldi	r29, 0x00	; 0
     35a:	c0 e2       	ldi	r28, 0x20	; 32
     35c:	6c 2f       	mov	r22, r28
     35e:	89 e0       	ldi	r24, 0x09	; 9
     360:	94 e0       	ldi	r25, 0x04	; 4
     362:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN7TwoWire17beginTransmissionEh>
     366:	89 e0       	ldi	r24, 0x09	; 9
     368:	94 e0       	ldi	r25, 0x04	; 4
     36a:	0e 94 29 10 	call	0x2052	; 0x2052 <_ZN7TwoWire15endTransmissionEv>
     36e:	08 2f       	mov	r16, r24
     370:	61 e0       	ldi	r22, 0x01	; 1
     372:	70 e0       	ldi	r23, 0x00	; 0
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0e 94 69 18 	call	0x30d2	; 0x30d2 <delay>
     37c:	01 11       	cpse	r16, r1
     37e:	03 c0       	rjmp	.+6      	; 0x386 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x38>
     380:	1d 17       	cp	r17, r29
     382:	f9 f0       	breq	.+62     	; 0x3c2 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x74>
     384:	df 5f       	subi	r29, 0xFF	; 255
     386:	cf 5f       	subi	r28, 0xFF	; 255
     388:	c8 32       	cpi	r28, 0x28	; 40
     38a:	41 f7       	brne	.-48     	; 0x35c <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0xe>
     38c:	c8 e3       	ldi	r28, 0x38	; 56
     38e:	6c 2f       	mov	r22, r28
     390:	89 e0       	ldi	r24, 0x09	; 9
     392:	94 e0       	ldi	r25, 0x04	; 4
     394:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN7TwoWire17beginTransmissionEh>
     398:	89 e0       	ldi	r24, 0x09	; 9
     39a:	94 e0       	ldi	r25, 0x04	; 4
     39c:	0e 94 29 10 	call	0x2052	; 0x2052 <_ZN7TwoWire15endTransmissionEv>
     3a0:	08 2f       	mov	r16, r24
     3a2:	61 e0       	ldi	r22, 0x01	; 1
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	0e 94 69 18 	call	0x30d2	; 0x30d2 <delay>
     3ae:	01 11       	cpse	r16, r1
     3b0:	03 c0       	rjmp	.+6      	; 0x3b8 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x6a>
     3b2:	1d 17       	cp	r17, r29
     3b4:	31 f0       	breq	.+12     	; 0x3c2 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x74>
     3b6:	df 5f       	subi	r29, 0xFF	; 255
     3b8:	cf 5f       	subi	r28, 0xFF	; 255
     3ba:	c0 34       	cpi	r28, 0x40	; 64
     3bc:	41 f7       	brne	.-48     	; 0x38e <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x40>
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x76>
     3c2:	8c 2f       	mov	r24, r28
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	08 95       	ret

000003ce <_ZN7TwoWire5writeEi>:
     3ce:	dc 01       	movw	r26, r24
     3d0:	ed 91       	ld	r30, X+
     3d2:	fc 91       	ld	r31, X
     3d4:	01 90       	ld	r0, Z+
     3d6:	f0 81       	ld	r31, Z
     3d8:	e0 2d       	mov	r30, r0
     3da:	09 94       	ijmp

000003dc <_ZN4Zeit4TickEv>:
     3dc:	fc 01       	movw	r30, r24
     3de:	84 81       	ldd	r24, Z+4	; 0x04
     3e0:	95 81       	ldd	r25, Z+5	; 0x05
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	2c e3       	ldi	r18, 0x3C	; 60
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	b9 01       	movw	r22, r18
     3ea:	0e 94 c1 1c 	call	0x3982	; 0x3982 <__divmodhi4>
     3ee:	95 83       	std	Z+5, r25	; 0x05
     3f0:	84 83       	std	Z+4, r24	; 0x04
     3f2:	89 2b       	or	r24, r25
     3f4:	19 f0       	breq	.+6      	; 0x3fc <_ZN4Zeit4TickEv+0x20>
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	08 95       	ret
     3fc:	82 81       	ldd	r24, Z+2	; 0x02
     3fe:	93 81       	ldd	r25, Z+3	; 0x03
     400:	01 96       	adiw	r24, 0x01	; 1
     402:	b9 01       	movw	r22, r18
     404:	0e 94 c1 1c 	call	0x3982	; 0x3982 <__divmodhi4>
     408:	93 83       	std	Z+3, r25	; 0x03
     40a:	82 83       	std	Z+2, r24	; 0x02
     40c:	89 2b       	or	r24, r25
     40e:	99 f7       	brne	.-26     	; 0x3f6 <_ZN4Zeit4TickEv+0x1a>
     410:	80 81       	ld	r24, Z
     412:	91 81       	ldd	r25, Z+1	; 0x01
     414:	01 96       	adiw	r24, 0x01	; 1
     416:	68 e1       	ldi	r22, 0x18	; 24
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	0e 94 c1 1c 	call	0x3982	; 0x3982 <__divmodhi4>
     41e:	ac 01       	movw	r20, r24
     420:	91 83       	std	Z+1, r25	; 0x01
     422:	80 83       	st	Z, r24
     424:	21 e0       	ldi	r18, 0x01	; 1
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	45 2b       	or	r20, r21
     42a:	09 f0       	breq	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     42c:	20 e0       	ldi	r18, 0x00	; 0
     42e:	82 2f       	mov	r24, r18
     430:	08 95       	ret

00000432 <_ZN5Datum11DaysOfMonthEv>:
     432:	fc 01       	movw	r30, r24
     434:	22 81       	ldd	r18, Z+2	; 0x02
     436:	33 81       	ldd	r19, Z+3	; 0x03
     438:	26 30       	cpi	r18, 0x06	; 6
     43a:	31 05       	cpc	r19, r1
     43c:	d9 f0       	breq	.+54     	; 0x474 <_ZN5Datum11DaysOfMonthEv+0x42>
     43e:	3c f4       	brge	.+14     	; 0x44e <_ZN5Datum11DaysOfMonthEv+0x1c>
     440:	22 30       	cpi	r18, 0x02	; 2
     442:	31 05       	cpc	r19, r1
     444:	69 f0       	breq	.+26     	; 0x460 <_ZN5Datum11DaysOfMonthEv+0x2e>
     446:	24 30       	cpi	r18, 0x04	; 4
     448:	31 05       	cpc	r19, r1
     44a:	39 f4       	brne	.+14     	; 0x45a <_ZN5Datum11DaysOfMonthEv+0x28>
     44c:	13 c0       	rjmp	.+38     	; 0x474 <_ZN5Datum11DaysOfMonthEv+0x42>
     44e:	29 30       	cpi	r18, 0x09	; 9
     450:	31 05       	cpc	r19, r1
     452:	81 f0       	breq	.+32     	; 0x474 <_ZN5Datum11DaysOfMonthEv+0x42>
     454:	2b 30       	cpi	r18, 0x0B	; 11
     456:	31 05       	cpc	r19, r1
     458:	69 f0       	breq	.+26     	; 0x474 <_ZN5Datum11DaysOfMonthEv+0x42>
     45a:	8f e1       	ldi	r24, 0x1F	; 31
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	08 95       	ret
     460:	fc 01       	movw	r30, r24
     462:	80 81       	ld	r24, Z
     464:	91 81       	ldd	r25, Z+1	; 0x01
     466:	83 70       	andi	r24, 0x03	; 3
     468:	99 27       	eor	r25, r25
     46a:	89 2b       	or	r24, r25
     46c:	31 f4       	brne	.+12     	; 0x47a <_ZN5Datum11DaysOfMonthEv+0x48>
     46e:	8d e1       	ldi	r24, 0x1D	; 29
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	08 95       	ret
     474:	8e e1       	ldi	r24, 0x1E	; 30
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	08 95       	ret
     47a:	8c e1       	ldi	r24, 0x1C	; 28
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	08 95       	ret

00000480 <_ZN5Datum4TickEv>:
     480:	0f 93       	push	r16
     482:	1f 93       	push	r17
     484:	cf 93       	push	r28
     486:	df 93       	push	r29
     488:	ec 01       	movw	r28, r24
     48a:	0c 81       	ldd	r16, Y+4	; 0x04
     48c:	1d 81       	ldd	r17, Y+5	; 0x05
     48e:	0f 5f       	subi	r16, 0xFF	; 255
     490:	1f 4f       	sbci	r17, 0xFF	; 255
     492:	1d 83       	std	Y+5, r17	; 0x05
     494:	0c 83       	std	Y+4, r16	; 0x04
     496:	0e 94 19 02 	call	0x432	; 0x432 <_ZN5Datum11DaysOfMonthEv>
     49a:	80 17       	cp	r24, r16
     49c:	91 07       	cpc	r25, r17
     49e:	a4 f4       	brge	.+40     	; 0x4c8 <_ZN5Datum4TickEv+0x48>
     4a0:	21 e0       	ldi	r18, 0x01	; 1
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	3d 83       	std	Y+5, r19	; 0x05
     4a6:	2c 83       	std	Y+4, r18	; 0x04
     4a8:	8a 81       	ldd	r24, Y+2	; 0x02
     4aa:	9b 81       	ldd	r25, Y+3	; 0x03
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	8d 30       	cpi	r24, 0x0D	; 13
     4b0:	91 05       	cpc	r25, r1
     4b2:	1c f4       	brge	.+6      	; 0x4ba <_ZN5Datum4TickEv+0x3a>
     4b4:	9b 83       	std	Y+3, r25	; 0x03
     4b6:	8a 83       	std	Y+2, r24	; 0x02
     4b8:	07 c0       	rjmp	.+14     	; 0x4c8 <_ZN5Datum4TickEv+0x48>
     4ba:	3b 83       	std	Y+3, r19	; 0x03
     4bc:	2a 83       	std	Y+2, r18	; 0x02
     4be:	88 81       	ld	r24, Y
     4c0:	99 81       	ldd	r25, Y+1	; 0x01
     4c2:	01 96       	adiw	r24, 0x01	; 1
     4c4:	99 83       	std	Y+1, r25	; 0x01
     4c6:	88 83       	st	Y, r24
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	1f 91       	pop	r17
     4ce:	0f 91       	pop	r16
     4d0:	08 95       	ret

000004d2 <_Z5Watchv>:
     4d2:	0f 93       	push	r16
     4d4:	1f 93       	push	r17
     4d6:	0e 94 38 18 	call	0x3070	; 0x3070 <millis>
     4da:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZZ5WatchvE6target>
     4de:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZZ5WatchvE6target+0x1>
     4e2:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <_ZZ5WatchvE6target+0x2>
     4e6:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <_ZZ5WatchvE6target+0x3>
     4ea:	06 17       	cp	r16, r22
     4ec:	17 07       	cpc	r17, r23
     4ee:	28 07       	cpc	r18, r24
     4f0:	39 07       	cpc	r19, r25
     4f2:	70 f5       	brcc	.+92     	; 0x550 <_Z5Watchv+0x7e>
     4f4:	d9 01       	movw	r26, r18
     4f6:	c8 01       	movw	r24, r16
     4f8:	88 51       	subi	r24, 0x18	; 24
     4fa:	9c 4f       	sbci	r25, 0xFC	; 252
     4fc:	af 4f       	sbci	r26, 0xFF	; 255
     4fe:	bf 4f       	sbci	r27, 0xFF	; 255
     500:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZZ5WatchvE6target>
     504:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZZ5WatchvE6target+0x1>
     508:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_ZZ5WatchvE6target+0x2>
     50c:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_ZZ5WatchvE6target+0x3>
     510:	80 ea       	ldi	r24, 0xA0	; 160
     512:	92 e0       	ldi	r25, 0x02	; 2
     514:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_ZN4Zeit4TickEv>
     518:	89 2b       	or	r24, r25
     51a:	21 f0       	breq	.+8      	; 0x524 <_Z5Watchv+0x52>
     51c:	88 e8       	ldi	r24, 0x88	; 136
     51e:	92 e0       	ldi	r25, 0x02	; 2
     520:	0e 94 40 02 	call	0x480	; 0x480 <_ZN5Datum4TickEv>
     524:	88 e9       	ldi	r24, 0x98	; 152
     526:	92 e0       	ldi	r25, 0x02	; 2
     528:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_ZN4Zeit4TickEv>
     52c:	89 2b       	or	r24, r25
     52e:	21 f0       	breq	.+8      	; 0x538 <_Z5Watchv+0x66>
     530:	80 e8       	ldi	r24, 0x80	; 128
     532:	92 e0       	ldi	r25, 0x02	; 2
     534:	0e 94 40 02 	call	0x480	; 0x480 <_ZN5Datum4TickEv>
     538:	80 e9       	ldi	r24, 0x90	; 144
     53a:	92 e0       	ldi	r25, 0x02	; 2
     53c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <_ZN4Zeit4TickEv>
     540:	89 2b       	or	r24, r25
     542:	31 f0       	breq	.+12     	; 0x550 <_Z5Watchv+0x7e>
     544:	88 e7       	ldi	r24, 0x78	; 120
     546:	92 e0       	ldi	r25, 0x02	; 2
     548:	1f 91       	pop	r17
     54a:	0f 91       	pop	r16
     54c:	0c 94 40 02 	jmp	0x480	; 0x480 <_ZN5Datum4TickEv>
     550:	1f 91       	pop	r17
     552:	0f 91       	pop	r16
     554:	08 95       	ret

00000556 <_Z11printhhmmssR4Zeit>:
     556:	0f 93       	push	r16
     558:	1f 93       	push	r17
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	8c 01       	movw	r16, r24
     560:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <ampm>
     564:	f8 01       	movw	r30, r16
     566:	c0 81       	ld	r28, Z
     568:	d1 81       	ldd	r29, Z+1	; 0x01
     56a:	88 23       	and	r24, r24
     56c:	89 f0       	breq	.+34     	; 0x590 <_Z11printhhmmssR4Zeit+0x3a>
     56e:	cd 30       	cpi	r28, 0x0D	; 13
     570:	d1 05       	cpc	r29, r1
     572:	0c f0       	brlt	.+2      	; 0x576 <_Z11printhhmmssR4Zeit+0x20>
     574:	2c 97       	sbiw	r28, 0x0c	; 12
     576:	ca 30       	cpi	r28, 0x0A	; 10
     578:	d1 05       	cpc	r29, r1
     57a:	34 f4       	brge	.+12     	; 0x588 <_Z11printhhmmssR4Zeit+0x32>
     57c:	6f e1       	ldi	r22, 0x1F	; 31
     57e:	71 e0       	ldi	r23, 0x01	; 1
     580:	8e e6       	ldi	r24, 0x6E	; 110
     582:	93 e0       	ldi	r25, 0x03	; 3
     584:	0e 94 24 12 	call	0x2448	; 0x2448 <_ZN5Print5printEPKc>
     588:	4a e0       	ldi	r20, 0x0A	; 10
     58a:	50 e0       	ldi	r21, 0x00	; 0
     58c:	be 01       	movw	r22, r28
     58e:	0d c0       	rjmp	.+26     	; 0x5aa <_Z11printhhmmssR4Zeit+0x54>
     590:	2a 97       	sbiw	r28, 0x0a	; 10
     592:	34 f4       	brge	.+12     	; 0x5a0 <_Z11printhhmmssR4Zeit+0x4a>
     594:	6f e1       	ldi	r22, 0x1F	; 31
     596:	71 e0       	ldi	r23, 0x01	; 1
     598:	8e e6       	ldi	r24, 0x6E	; 110
     59a:	93 e0       	ldi	r25, 0x03	; 3
     59c:	0e 94 24 12 	call	0x2448	; 0x2448 <_ZN5Print5printEPKc>
     5a0:	f8 01       	movw	r30, r16
     5a2:	60 81       	ld	r22, Z
     5a4:	71 81       	ldd	r23, Z+1	; 0x01
     5a6:	4a e0       	ldi	r20, 0x0A	; 10
     5a8:	50 e0       	ldi	r21, 0x00	; 0
     5aa:	8e e6       	ldi	r24, 0x6E	; 110
     5ac:	93 e0       	ldi	r25, 0x03	; 3
     5ae:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <_ZN5Print5printEii>
     5b2:	f8 01       	movw	r30, r16
     5b4:	82 81       	ldd	r24, Z+2	; 0x02
     5b6:	93 81       	ldd	r25, Z+3	; 0x03
     5b8:	0a 97       	sbiw	r24, 0x0a	; 10
     5ba:	1c f4       	brge	.+6      	; 0x5c2 <_Z11printhhmmssR4Zeit+0x6c>
     5bc:	6e e1       	ldi	r22, 0x1E	; 30
     5be:	71 e0       	ldi	r23, 0x01	; 1
     5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <_Z11printhhmmssR4Zeit+0x70>
     5c2:	61 e2       	ldi	r22, 0x21	; 33
     5c4:	71 e0       	ldi	r23, 0x01	; 1
     5c6:	8e e6       	ldi	r24, 0x6E	; 110
     5c8:	93 e0       	ldi	r25, 0x03	; 3
     5ca:	0e 94 24 12 	call	0x2448	; 0x2448 <_ZN5Print5printEPKc>
     5ce:	f8 01       	movw	r30, r16
     5d0:	62 81       	ldd	r22, Z+2	; 0x02
     5d2:	73 81       	ldd	r23, Z+3	; 0x03
     5d4:	4a e0       	ldi	r20, 0x0A	; 10
     5d6:	50 e0       	ldi	r21, 0x00	; 0
     5d8:	8e e6       	ldi	r24, 0x6E	; 110
     5da:	93 e0       	ldi	r25, 0x03	; 3
     5dc:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <_ZN5Print5printEii>
     5e0:	f8 01       	movw	r30, r16
     5e2:	84 81       	ldd	r24, Z+4	; 0x04
     5e4:	95 81       	ldd	r25, Z+5	; 0x05
     5e6:	0a 97       	sbiw	r24, 0x0a	; 10
     5e8:	1c f4       	brge	.+6      	; 0x5f0 <_Z11printhhmmssR4Zeit+0x9a>
     5ea:	6e e1       	ldi	r22, 0x1E	; 30
     5ec:	71 e0       	ldi	r23, 0x01	; 1
     5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <_Z11printhhmmssR4Zeit+0x9e>
     5f0:	61 e2       	ldi	r22, 0x21	; 33
     5f2:	71 e0       	ldi	r23, 0x01	; 1
     5f4:	8e e6       	ldi	r24, 0x6E	; 110
     5f6:	93 e0       	ldi	r25, 0x03	; 3
     5f8:	0e 94 24 12 	call	0x2448	; 0x2448 <_ZN5Print5printEPKc>
     5fc:	f8 01       	movw	r30, r16
     5fe:	64 81       	ldd	r22, Z+4	; 0x04
     600:	75 81       	ldd	r23, Z+5	; 0x05
     602:	4a e0       	ldi	r20, 0x0A	; 10
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	8e e6       	ldi	r24, 0x6E	; 110
     608:	93 e0       	ldi	r25, 0x03	; 3
     60a:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <_ZN5Print5printEii>
     60e:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <ampm>
     612:	88 23       	and	r24, r24
     614:	91 f0       	breq	.+36     	; 0x63a <_Z11printhhmmssR4Zeit+0xe4>
     616:	f8 01       	movw	r30, r16
     618:	80 81       	ld	r24, Z
     61a:	91 81       	ldd	r25, Z+1	; 0x01
     61c:	0d 97       	sbiw	r24, 0x0d	; 13
     61e:	1c f0       	brlt	.+6      	; 0x626 <_Z11printhhmmssR4Zeit+0xd0>
     620:	63 e2       	ldi	r22, 0x23	; 35
     622:	71 e0       	ldi	r23, 0x01	; 1
     624:	02 c0       	rjmp	.+4      	; 0x62a <_Z11printhhmmssR4Zeit+0xd4>
     626:	67 e2       	ldi	r22, 0x27	; 39
     628:	71 e0       	ldi	r23, 0x01	; 1
     62a:	8e e6       	ldi	r24, 0x6E	; 110
     62c:	93 e0       	ldi	r25, 0x03	; 3
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	1f 91       	pop	r17
     634:	0f 91       	pop	r16
     636:	0c 94 24 12 	jmp	0x2448	; 0x2448 <_ZN5Print5printEPKc>
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	1f 91       	pop	r17
     640:	0f 91       	pop	r16
     642:	08 95       	ret

00000644 <_Z17printHumidityTempv>:
     644:	cf 92       	push	r12
     646:	df 92       	push	r13
     648:	ef 92       	push	r14
     64a:	ff 92       	push	r15
     64c:	41 e0       	ldi	r20, 0x01	; 1
     64e:	60 e0       	ldi	r22, 0x00	; 0
     650:	8e e6       	ldi	r24, 0x6E	; 110
     652:	93 e0       	ldi	r25, 0x03	; 3
     654:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN7hd447809setCursorEhh>
     658:	c0 90 bc 02 	lds	r12, 0x02BC	; 0x8002bc <temp>
     65c:	d0 90 bd 02 	lds	r13, 0x02BD	; 0x8002bd <temp+0x1>
     660:	e0 90 be 02 	lds	r14, 0x02BE	; 0x8002be <temp+0x2>
     664:	f0 90 bf 02 	lds	r15, 0x02BF	; 0x8002bf <temp+0x3>
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	a9 01       	movw	r20, r18
     66e:	c7 01       	movw	r24, r14
     670:	b6 01       	movw	r22, r12
     672:	0e 94 9d 10 	call	0x213a	; 0x213a <__cmpsf2>
     676:	81 11       	cpse	r24, r1
     678:	03 c0       	rjmp	.+6      	; 0x680 <_Z17printHumidityTempv+0x3c>
     67a:	60 e3       	ldi	r22, 0x30	; 48
     67c:	71 e0       	ldi	r23, 0x01	; 1
     67e:	23 c0       	rjmp	.+70     	; 0x6c6 <_Z17printHumidityTempv+0x82>
     680:	22 e0       	ldi	r18, 0x02	; 2
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	b7 01       	movw	r22, r14
     686:	a6 01       	movw	r20, r12
     688:	8e e6       	ldi	r24, 0x6E	; 110
     68a:	93 e0       	ldi	r25, 0x03	; 3
     68c:	0e 94 b3 13 	call	0x2766	; 0x2766 <_ZN5Print5printEdi>
     690:	6f ed       	ldi	r22, 0xDF	; 223
     692:	8e e6       	ldi	r24, 0x6E	; 110
     694:	93 e0       	ldi	r25, 0x03	; 3
     696:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN5Print5printEc>
     69a:	6e e3       	ldi	r22, 0x3E	; 62
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	8e e6       	ldi	r24, 0x6E	; 110
     6a0:	93 e0       	ldi	r25, 0x03	; 3
     6a2:	0e 94 24 12 	call	0x2448	; 0x2448 <_ZN5Print5printEPKc>
     6a6:	40 91 b8 02 	lds	r20, 0x02B8	; 0x8002b8 <hum>
     6aa:	50 91 b9 02 	lds	r21, 0x02B9	; 0x8002b9 <hum+0x1>
     6ae:	60 91 ba 02 	lds	r22, 0x02BA	; 0x8002ba <hum+0x2>
     6b2:	70 91 bb 02 	lds	r23, 0x02BB	; 0x8002bb <hum+0x3>
     6b6:	22 e0       	ldi	r18, 0x02	; 2
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	8e e6       	ldi	r24, 0x6E	; 110
     6bc:	93 e0       	ldi	r25, 0x03	; 3
     6be:	0e 94 b3 13 	call	0x2766	; 0x2766 <_ZN5Print5printEdi>
     6c2:	63 e4       	ldi	r22, 0x43	; 67
     6c4:	71 e0       	ldi	r23, 0x01	; 1
     6c6:	8e e6       	ldi	r24, 0x6E	; 110
     6c8:	93 e0       	ldi	r25, 0x03	; 3
     6ca:	ff 90       	pop	r15
     6cc:	ef 90       	pop	r14
     6ce:	df 90       	pop	r13
     6d0:	cf 90       	pop	r12
     6d2:	0c 94 24 12 	jmp	0x2448	; 0x2448 <_ZN5Print5printEPKc>

000006d6 <_Z10homeScreeni>:
     6d6:	0f 93       	push	r16
     6d8:	1f 93       	push	r17
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	ec 01       	movw	r28, r24
     6e0:	0e 94 38 18 	call	0x3070	; 0x3070 <millis>
     6e4:	00 91 c0 02 	lds	r16, 0x02C0	; 0x8002c0 <readSensor>
     6e8:	10 91 c1 02 	lds	r17, 0x02C1	; 0x8002c1 <readSensor+0x1>
     6ec:	20 91 c2 02 	lds	r18, 0x02C2	; 0x8002c2 <readSensor+0x2>
     6f0:	30 91 c3 02 	lds	r19, 0x02C3	; 0x8002c3 <readSensor+0x3>
     6f4:	06 17       	cp	r16, r22
     6f6:	17 07       	cpc	r17, r23
     6f8:	28 07       	cpc	r18, r24
     6fa:	39 07       	cpc	r19, r25
     6fc:	b8 f5       	brcc	.+110    	; 0x76c <_Z10homeScreeni+0x96>
     6fe:	66 e1       	ldi	r22, 0x16	; 22
     700:	88 ea       	ldi	r24, 0xA8	; 168
     702:	92 e0       	ldi	r25, 0x02	; 2
     704:	0e 94 8c 0a 	call	0x1518	; 0x1518 <_ZN3dht4readEh>
     708:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <DHT+0x4>
     70c:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <DHT+0x5>
     710:	a0 91 ae 02 	lds	r26, 0x02AE	; 0x8002ae <DHT+0x6>
     714:	b0 91 af 02 	lds	r27, 0x02AF	; 0x8002af <DHT+0x7>
     718:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <temp>
     71c:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <temp+0x1>
     720:	a0 93 be 02 	sts	0x02BE, r26	; 0x8002be <temp+0x2>
     724:	b0 93 bf 02 	sts	0x02BF, r27	; 0x8002bf <temp+0x3>
     728:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <DHT>
     72c:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <DHT+0x1>
     730:	a0 91 aa 02 	lds	r26, 0x02AA	; 0x8002aa <DHT+0x2>
     734:	b0 91 ab 02 	lds	r27, 0x02AB	; 0x8002ab <DHT+0x3>
     738:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <hum>
     73c:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <hum+0x1>
     740:	a0 93 ba 02 	sts	0x02BA, r26	; 0x8002ba <hum+0x2>
     744:	b0 93 bb 02 	sts	0x02BB, r27	; 0x8002bb <hum+0x3>
     748:	0e 94 22 03 	call	0x644	; 0x644 <_Z17printHumidityTempv>
     74c:	0e 94 38 18 	call	0x3070	; 0x3070 <millis>
     750:	dc 01       	movw	r26, r24
     752:	cb 01       	movw	r24, r22
     754:	88 57       	subi	r24, 0x78	; 120
     756:	9c 4e       	sbci	r25, 0xEC	; 236
     758:	af 4f       	sbci	r26, 0xFF	; 255
     75a:	bf 4f       	sbci	r27, 0xFF	; 255
     75c:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <readSensor>
     760:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <readSensor+0x1>
     764:	a0 93 c2 02 	sts	0x02C2, r26	; 0x8002c2 <readSensor+0x2>
     768:	b0 93 c3 02 	sts	0x02C3, r27	; 0x8002c3 <readSensor+0x3>
     76c:	0e 94 22 03 	call	0x644	; 0x644 <_Z17printHumidityTempv>
     770:	40 e0       	ldi	r20, 0x00	; 0
     772:	60 e0       	ldi	r22, 0x00	; 0
     774:	8e e6       	ldi	r24, 0x6E	; 110
     776:	93 e0       	ldi	r25, 0x03	; 3
     778:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN7hd447809setCursorEhh>
     77c:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <timeZoneChoosen>
     780:	88 23       	and	r24, r24
     782:	d9 f0       	breq	.+54     	; 0x7ba <_Z10homeScreeni+0xe4>
     784:	88 e9       	ldi	r24, 0x98	; 152
     786:	92 e0       	ldi	r25, 0x02	; 2
     788:	0e 94 ab 02 	call	0x556	; 0x556 <_Z11printhhmmssR4Zeit>
     78c:	40 e0       	ldi	r20, 0x00	; 0
     78e:	6d e0       	ldi	r22, 0x0D	; 13
     790:	8e e6       	ldi	r24, 0x6E	; 110
     792:	93 e0       	ldi	r25, 0x03	; 3
     794:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN7hd447809setCursorEhh>
     798:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <tz>
     79c:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <tz+0x1>
     7a0:	2e e0       	ldi	r18, 0x0E	; 14
     7a2:	28 9f       	mul	r18, r24
     7a4:	b0 01       	movw	r22, r0
     7a6:	29 9f       	mul	r18, r25
     7a8:	70 0d       	add	r23, r0
     7aa:	11 24       	eor	r1, r1
     7ac:	62 53       	subi	r22, 0x32	; 50
     7ae:	7d 4f       	sbci	r23, 0xFD	; 253
     7b0:	8e e6       	ldi	r24, 0x6E	; 110
     7b2:	93 e0       	ldi	r25, 0x03	; 3
     7b4:	0e 94 16 12 	call	0x242c	; 0x242c <_ZN5Print5printERK6String>
     7b8:	04 c0       	rjmp	.+8      	; 0x7c2 <_Z10homeScreeni+0xec>
     7ba:	80 e9       	ldi	r24, 0x90	; 144
     7bc:	92 e0       	ldi	r25, 0x02	; 2
     7be:	0e 94 ab 02 	call	0x556	; 0x556 <_Z11printhhmmssR4Zeit>
     7c2:	ce 01       	movw	r24, r28
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	1f 91       	pop	r17
     7ca:	0f 91       	pop	r16
     7cc:	08 95       	ret

000007ce <setup>:
 * \return void
 */
void setup()
{
	//LCD konfigurieren
	lcd.begin(16, 2);
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	42 e0       	ldi	r20, 0x02	; 2
     7d2:	60 e1       	ldi	r22, 0x10	; 16
     7d4:	8e e6       	ldi	r24, 0x6E	; 110
     7d6:	93 e0       	ldi	r25, 0x03	; 3
     7d8:	0e 94 9f 0b 	call	0x173e	; 0x173e <_ZN7hd447805beginEhhh>
	lcd.noBacklight();
     7dc:	8e e6       	ldi	r24, 0x6E	; 110
     7de:	93 e0       	ldi	r25, 0x03	; 3
     7e0:	0e 94 34 0b 	call	0x1668	; 0x1668 <_ZN7hd4478011noBacklightEv>
	lcd.noCursor();
     7e4:	8e e6       	ldi	r24, 0x6E	; 110
     7e6:	93 e0       	ldi	r25, 0x03	; 3
     7e8:	0e 94 39 0c 	call	0x1872	; 0x1872 <_ZN7hd447808noCursorEv>
	lcd.home();
     7ec:	8e e6       	ldi	r24, 0x6E	; 110
     7ee:	93 e0       	ldi	r25, 0x03	; 3
     7f0:	0e 94 76 0b 	call	0x16ec	; 0x16ec <_ZN7hd447804homeEv>
	lcd.print("Romeo V2.2 Watch");
     7f4:	68 e5       	ldi	r22, 0x58	; 88
     7f6:	71 e0       	ldi	r23, 0x01	; 1
     7f8:	8e e6       	ldi	r24, 0x6E	; 110
     7fa:	93 e0       	ldi	r25, 0x03	; 3
     7fc:	0e 94 24 12 	call	0x2448	; 0x2448 <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
     800:	41 e0       	ldi	r20, 0x01	; 1
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	8e e6       	ldi	r24, 0x6E	; 110
     806:	93 e0       	ldi	r25, 0x03	; 3
     808:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN7hd447809setCursorEhh>
	lcd.print("Coray / Bruno");
     80c:	69 e6       	ldi	r22, 0x69	; 105
     80e:	71 e0       	ldi	r23, 0x01	; 1
     810:	8e e6       	ldi	r24, 0x6E	; 110
     812:	93 e0       	ldi	r25, 0x03	; 3
     814:	0e 94 24 12 	call	0x2448	; 0x2448 <_ZN5Print5printEPKc>
	while(millis()<3000);
     818:	0e 94 38 18 	call	0x3070	; 0x3070 <millis>
     81c:	68 3b       	cpi	r22, 0xB8	; 184
     81e:	7b 40       	sbci	r23, 0x0B	; 11
     820:	81 05       	cpc	r24, r1
     822:	91 05       	cpc	r25, r1
     824:	c8 f3       	brcs	.-14     	; 0x818 <setup+0x4a>
	lcd.clear();
     826:	8e e6       	ldi	r24, 0x6E	; 110
     828:	93 e0       	ldi	r25, 0x03	; 3
     82a:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <_ZN7hd447805clearEv>
	
	zeitTimeZone = zeitGMT;
     82e:	88 e0       	ldi	r24, 0x08	; 8
     830:	e0 ea       	ldi	r30, 0xA0	; 160
     832:	f2 e0       	ldi	r31, 0x02	; 2
     834:	a8 e9       	ldi	r26, 0x98	; 152
     836:	b2 e0       	ldi	r27, 0x02	; 2
     838:	01 90       	ld	r0, Z+
     83a:	0d 92       	st	X+, r0
     83c:	8a 95       	dec	r24
     83e:	e1 f7       	brne	.-8      	; 0x838 <setup+0x6a>
	
	//Button uns Sensor Pin als input definiert
	pinMode(btnPin, INPUT);
     840:	60 e0       	ldi	r22, 0x00	; 0
     842:	87 e0       	ldi	r24, 0x07	; 7
     844:	0e 94 74 19 	call	0x32e8	; 0x32e8 <pinMode>
	pinMode(tempSensor,INPUT);
     848:	60 e0       	ldi	r22, 0x00	; 0
     84a:	86 e1       	ldi	r24, 0x16	; 22
     84c:	0c 94 74 19 	jmp	0x32e8	; 0x32e8 <pinMode>

00000850 <loop>:
		callibratePointer();
	}
	else
	{
	*/
	Watch();
     850:	0e 94 69 02 	call	0x4d2	; 0x4d2 <_Z5Watchv>
	input = getkey();
     854:	0e 94 17 01 	call	0x22e	; 0x22e <_Z6getkeyv>
     858:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <_ZL5input+0x1>
     85c:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <_ZL5input>
	if (watchmenu[menu].active) 
		input = watchmenu[menu].active(input);
     860:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_Z10homeScreeni>
     864:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <_ZL5input+0x1>
     868:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <_ZL5input>
		//! cyclic call to active function as long as menu n is active
	switch(input) {
     86c:	83 30       	cpi	r24, 0x03	; 3
     86e:	91 05       	cpc	r25, r1
     870:	71 f0       	breq	.+28     	; 0x88e <loop+0x3e>
     872:	34 f4       	brge	.+12     	; 0x880 <loop+0x30>
     874:	81 30       	cpi	r24, 0x01	; 1
     876:	91 05       	cpc	r25, r1
     878:	51 f0       	breq	.+20     	; 0x88e <loop+0x3e>
     87a:	02 97       	sbiw	r24, 0x02	; 2
     87c:	41 f0       	breq	.+16     	; 0x88e <loop+0x3e>
     87e:	08 95       	ret
     880:	85 30       	cpi	r24, 0x05	; 5
     882:	91 05       	cpc	r25, r1
     884:	41 f0       	breq	.+16     	; 0x896 <loop+0x46>
     886:	1c f0       	brlt	.+6      	; 0x88e <loop+0x3e>
     888:	06 97       	sbiw	r24, 0x06	; 6
     88a:	59 f0       	breq	.+22     	; 0x8a2 <loop+0x52>
     88c:	08 95       	ret
		case DOWN_KEY:
		lcd.clear();
		newmenu = watchmenu[menu].down;
		break;
		case RIGHT_KEY:
		lcd.clear();
     88e:	8e e6       	ldi	r24, 0x6E	; 110
     890:	93 e0       	ldi	r25, 0x03	; 3
     892:	0c 94 73 0b 	jmp	0x16e6	; 0x16e6 <_ZN7hd447805clearEv>
			watchmenu[menu].goright();
		}
		newmenu = watchmenu[menu].right;
		break;
		case OK_KEY:
		lcd.clear();
     896:	8e e6       	ldi	r24, 0x6E	; 110
     898:	93 e0       	ldi	r25, 0x03	; 3
     89a:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <_ZN7hd447805clearEv>
		if(watchmenu[menu].positive != NULL) {
			//! call positive answer function with new value
			watchmenu[menu].positive();
     89e:	0c 94 9e 01 	jmp	0x33c	; 0x33c <_Z10changeAMPMv>
		}
		newmenu = watchmenu[menu].ok;
		break;
		case BK_KEY:
		lcd.clear();
     8a2:	8e e6       	ldi	r24, 0x6E	; 110
     8a4:	93 e0       	ldi	r25, 0x03	; 3
     8a6:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <_ZN7hd447805clearEv>
		lcd.noCursor();
     8aa:	8e e6       	ldi	r24, 0x6E	; 110
     8ac:	93 e0       	ldi	r25, 0x03	; 3
     8ae:	0e 94 39 0c 	call	0x1872	; 0x1872 <_ZN7hd447808noCursorEv>
		lcd.noBlink();
     8b2:	8e e6       	ldi	r24, 0x6E	; 110
     8b4:	93 e0       	ldi	r25, 0x03	; 3
     8b6:	0c 94 40 0c 	jmp	0x1880	; 0x1880 <_ZN7hd447807noBlinkEv>

000008ba <_GLOBAL__sub_I_lcd>:
		newmenu = 0;
		break;
	}

	//} //else Klammer
}
     8ba:	af 92       	push	r10
     8bc:	bf 92       	push	r11
     8be:	cf 92       	push	r12
     8c0:	df 92       	push	r13
     8c2:	ef 92       	push	r14
     8c4:	ff 92       	push	r15
     8c6:	0f 93       	push	r16
     8c8:	1f 93       	push	r17
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
// ====================

//	-- Automagic / auto-detect constructors --

// Auto find next instance and auto config pin mapping
hd44780_I2Cexp(){ _addr = 0; _expType = I2Cexp_UNKNOWN;}
     8ce:	8e e6       	ldi	r24, 0x6E	; 110
     8d0:	93 e0       	ldi	r25, 0x03	; 3
     8d2:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN7hd44780C1Ev>
     8d6:	ee e6       	ldi	r30, 0x6E	; 110
     8d8:	f3 e0       	ldi	r31, 0x03	; 3
     8da:	8e e0       	ldi	r24, 0x0E	; 14
     8dc:	92 e0       	ldi	r25, 0x02	; 2
     8de:	91 83       	std	Z+1, r25	; 0x01
     8e0:	80 83       	st	Z, r24
     8e2:	10 a2       	std	Z+32, r1	; 0x20
     8e4:	11 a2       	std	Z+33, r1	; 0x21

const struct CITY_TIME_DIF CITIES [] {
	{"London", 0, "LON"},{"New-York", -5, "NEY"},{"Paris", 1, "PAR"},{ "Tokyo", 9, "TOK"},
	{"Hongkong", 8, "HNK"},{"Los Angeles", -8, "LAN"},{"Chicago", -6, "CHI"},{"Seoul", 9, "SEO"},
	{ "Bruessel",  1, "BRU"},{"Washington",  -5, "WAS"},{"Singapur", 8, "SIN"},{"Sydney", 11, "SYD"}
	};
     8e6:	67 e7       	ldi	r22, 0x77	; 119
     8e8:	71 e0       	ldi	r23, 0x01	; 1
     8ea:	86 ec       	ldi	r24, 0xC6	; 198
     8ec:	92 e0       	ldi	r25, 0x02	; 2
     8ee:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN6StringC1EPKc>
     8f2:	c6 ec       	ldi	r28, 0xC6	; 198
     8f4:	d2 e0       	ldi	r29, 0x02	; 2
     8f6:	1f 82       	std	Y+7, r1	; 0x07
     8f8:	1e 82       	std	Y+6, r1	; 0x06
     8fa:	6e e7       	ldi	r22, 0x7E	; 126
     8fc:	71 e0       	ldi	r23, 0x01	; 1
     8fe:	8e ec       	ldi	r24, 0xCE	; 206
     900:	92 e0       	ldi	r25, 0x02	; 2
     902:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN6StringC1EPKc>
     906:	62 e8       	ldi	r22, 0x82	; 130
     908:	71 e0       	ldi	r23, 0x01	; 1
     90a:	84 ed       	ldi	r24, 0xD4	; 212
     90c:	92 e0       	ldi	r25, 0x02	; 2
     90e:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN6StringC1EPKc>
     912:	8b ef       	ldi	r24, 0xFB	; 251
     914:	a8 2e       	mov	r10, r24
     916:	bb 24       	eor	r11, r11
     918:	ba 94       	dec	r11
     91a:	bd 8a       	std	Y+21, r11	; 0x15
     91c:	ac 8a       	std	Y+20, r10	; 0x14
     91e:	6b e8       	ldi	r22, 0x8B	; 139
     920:	71 e0       	ldi	r23, 0x01	; 1
     922:	8c ed       	ldi	r24, 0xDC	; 220
     924:	92 e0       	ldi	r25, 0x02	; 2
     926:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN6StringC1EPKc>
     92a:	6f e8       	ldi	r22, 0x8F	; 143
     92c:	71 e0       	ldi	r23, 0x01	; 1
     92e:	82 ee       	ldi	r24, 0xE2	; 226
     930:	92 e0       	ldi	r25, 0x02	; 2
     932:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN6StringC1EPKc>
     936:	ee 24       	eor	r14, r14
     938:	e3 94       	inc	r14
     93a:	f1 2c       	mov	r15, r1
     93c:	fb a2       	std	Y+35, r15	; 0x23
     93e:	ea a2       	std	Y+34, r14	; 0x22
     940:	65 e9       	ldi	r22, 0x95	; 149
     942:	71 e0       	ldi	r23, 0x01	; 1
     944:	8a ee       	ldi	r24, 0xEA	; 234
     946:	92 e0       	ldi	r25, 0x02	; 2
     948:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN6StringC1EPKc>
     94c:	69 e9       	ldi	r22, 0x99	; 153
     94e:	71 e0       	ldi	r23, 0x01	; 1
     950:	80 ef       	ldi	r24, 0xF0	; 240
     952:	92 e0       	ldi	r25, 0x02	; 2
     954:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN6StringC1EPKc>
     958:	09 e0       	ldi	r16, 0x09	; 9
     95a:	10 e0       	ldi	r17, 0x00	; 0
     95c:	19 ab       	std	Y+49, r17	; 0x31
     95e:	08 ab       	std	Y+48, r16	; 0x30
     960:	6f e9       	ldi	r22, 0x9F	; 159
     962:	71 e0       	ldi	r23, 0x01	; 1
     964:	88 ef       	ldi	r24, 0xF8	; 248
     966:	92 e0       	ldi	r25, 0x02	; 2
     968:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN6StringC1EPKc>
     96c:	63 ea       	ldi	r22, 0xA3	; 163
     96e:	71 e0       	ldi	r23, 0x01	; 1
     970:	8e ef       	ldi	r24, 0xFE	; 254
     972:	92 e0       	ldi	r25, 0x02	; 2
     974:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN6StringC1EPKc>
     978:	28 e0       	ldi	r18, 0x08	; 8
     97a:	c2 2e       	mov	r12, r18
     97c:	d1 2c       	mov	r13, r1
     97e:	df ae       	std	Y+63, r13	; 0x3f
     980:	ce ae       	std	Y+62, r12	; 0x3e
     982:	6c ea       	ldi	r22, 0xAC	; 172
     984:	71 e0       	ldi	r23, 0x01	; 1
     986:	86 e0       	ldi	r24, 0x06	; 6
     988:	93 e0       	ldi	r25, 0x03	; 3
     98a:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN6StringC1EPKc>
     98e:	60 eb       	ldi	r22, 0xB0	; 176
     990:	71 e0       	ldi	r23, 0x01	; 1
     992:	8c e0       	ldi	r24, 0x0C	; 12
     994:	93 e0       	ldi	r25, 0x03	; 3
     996:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN6StringC1EPKc>
     99a:	88 ef       	ldi	r24, 0xF8	; 248
     99c:	9f ef       	ldi	r25, 0xFF	; 255
     99e:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <_ZL6CITIES+0x4d>
     9a2:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <_ZL6CITIES+0x4c>
     9a6:	6c eb       	ldi	r22, 0xBC	; 188
     9a8:	71 e0       	ldi	r23, 0x01	; 1
     9aa:	84 e1       	ldi	r24, 0x14	; 20
     9ac:	93 e0       	ldi	r25, 0x03	; 3
     9ae:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN6StringC1EPKc>
     9b2:	60 ec       	ldi	r22, 0xC0	; 192
     9b4:	71 e0       	ldi	r23, 0x01	; 1
     9b6:	8a e1       	ldi	r24, 0x1A	; 26
     9b8:	93 e0       	ldi	r25, 0x03	; 3
     9ba:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN6StringC1EPKc>
     9be:	8a ef       	ldi	r24, 0xFA	; 250
     9c0:	9f ef       	ldi	r25, 0xFF	; 255
     9c2:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <_ZL6CITIES+0x5b>
     9c6:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <_ZL6CITIES+0x5a>
     9ca:	68 ec       	ldi	r22, 0xC8	; 200
     9cc:	71 e0       	ldi	r23, 0x01	; 1
     9ce:	82 e2       	ldi	r24, 0x22	; 34
     9d0:	93 e0       	ldi	r25, 0x03	; 3
     9d2:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN6StringC1EPKc>
     9d6:	6c ec       	ldi	r22, 0xCC	; 204
     9d8:	71 e0       	ldi	r23, 0x01	; 1
     9da:	88 e2       	ldi	r24, 0x28	; 40
     9dc:	93 e0       	ldi	r25, 0x03	; 3
     9de:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN6StringC1EPKc>
     9e2:	10 93 2f 03 	sts	0x032F, r17	; 0x80032f <_ZL6CITIES+0x69>
     9e6:	00 93 2e 03 	sts	0x032E, r16	; 0x80032e <_ZL6CITIES+0x68>
     9ea:	62 ed       	ldi	r22, 0xD2	; 210
     9ec:	71 e0       	ldi	r23, 0x01	; 1
     9ee:	80 e3       	ldi	r24, 0x30	; 48
     9f0:	93 e0       	ldi	r25, 0x03	; 3
     9f2:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN6StringC1EPKc>
     9f6:	66 ed       	ldi	r22, 0xD6	; 214
     9f8:	71 e0       	ldi	r23, 0x01	; 1
     9fa:	86 e3       	ldi	r24, 0x36	; 54
     9fc:	93 e0       	ldi	r25, 0x03	; 3
     9fe:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN6StringC1EPKc>
     a02:	f0 92 3d 03 	sts	0x033D, r15	; 0x80033d <_ZL6CITIES+0x77>
     a06:	e0 92 3c 03 	sts	0x033C, r14	; 0x80033c <_ZL6CITIES+0x76>
     a0a:	6f ed       	ldi	r22, 0xDF	; 223
     a0c:	71 e0       	ldi	r23, 0x01	; 1
     a0e:	8e e3       	ldi	r24, 0x3E	; 62
     a10:	93 e0       	ldi	r25, 0x03	; 3
     a12:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN6StringC1EPKc>
     a16:	63 ee       	ldi	r22, 0xE3	; 227
     a18:	71 e0       	ldi	r23, 0x01	; 1
     a1a:	84 e4       	ldi	r24, 0x44	; 68
     a1c:	93 e0       	ldi	r25, 0x03	; 3
     a1e:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN6StringC1EPKc>
     a22:	b0 92 4b 03 	sts	0x034B, r11	; 0x80034b <_ZL6CITIES+0x85>
     a26:	a0 92 4a 03 	sts	0x034A, r10	; 0x80034a <_ZL6CITIES+0x84>
     a2a:	6e ee       	ldi	r22, 0xEE	; 238
     a2c:	71 e0       	ldi	r23, 0x01	; 1
     a2e:	8c e4       	ldi	r24, 0x4C	; 76
     a30:	93 e0       	ldi	r25, 0x03	; 3
     a32:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN6StringC1EPKc>
     a36:	62 ef       	ldi	r22, 0xF2	; 242
     a38:	71 e0       	ldi	r23, 0x01	; 1
     a3a:	82 e5       	ldi	r24, 0x52	; 82
     a3c:	93 e0       	ldi	r25, 0x03	; 3
     a3e:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN6StringC1EPKc>
     a42:	d0 92 59 03 	sts	0x0359, r13	; 0x800359 <_ZL6CITIES+0x93>
     a46:	c0 92 58 03 	sts	0x0358, r12	; 0x800358 <_ZL6CITIES+0x92>
     a4a:	6b ef       	ldi	r22, 0xFB	; 251
     a4c:	71 e0       	ldi	r23, 0x01	; 1
     a4e:	8a e5       	ldi	r24, 0x5A	; 90
     a50:	93 e0       	ldi	r25, 0x03	; 3
     a52:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN6StringC1EPKc>
     a56:	6f ef       	ldi	r22, 0xFF	; 255
     a58:	71 e0       	ldi	r23, 0x01	; 1
     a5a:	80 e6       	ldi	r24, 0x60	; 96
     a5c:	93 e0       	ldi	r25, 0x03	; 3
     a5e:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN6StringC1EPKc>
     a62:	8b e0       	ldi	r24, 0x0B	; 11
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	90 93 67 03 	sts	0x0367, r25	; 0x800367 <_ZL6CITIES+0xa1>
     a6a:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <_ZL6CITIES+0xa0>
     a6e:	66 e0       	ldi	r22, 0x06	; 6
     a70:	72 e0       	ldi	r23, 0x02	; 2
     a72:	88 e6       	ldi	r24, 0x68	; 104
     a74:	93 e0       	ldi	r25, 0x03	; 3
     a76:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN6StringC1EPKc>
#endif

class dht
{
public:
    dht() { _disableIRQ = false; };
     a7a:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <DHT+0xd>
	int hh_;
	int mm_;
	int ss_;
	int set_;
public:
	Zeit(int h, int m, int s){ hh_=h; mm_=m; ss_=s; set_ =0;};
     a7e:	e0 ea       	ldi	r30, 0xA0	; 160
     a80:	f2 e0       	ldi	r31, 0x02	; 2
     a82:	85 e1       	ldi	r24, 0x15	; 21
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	91 83       	std	Z+1, r25	; 0x01
     a88:	80 83       	st	Z, r24
     a8a:	8f e1       	ldi	r24, 0x1F	; 31
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	93 83       	std	Z+3, r25	; 0x03
     a90:	82 83       	std	Z+2, r24	; 0x02
     a92:	15 82       	std	Z+5, r1	; 0x05
     a94:	14 82       	std	Z+4, r1	; 0x04
     a96:	17 82       	std	Z+7, r1	; 0x07
     a98:	16 82       	std	Z+6, r1	; 0x06
     a9a:	e8 e9       	ldi	r30, 0x98	; 152
     a9c:	f2 e0       	ldi	r31, 0x02	; 2
     a9e:	2c e0       	ldi	r18, 0x0C	; 12
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	31 83       	std	Z+1, r19	; 0x01
     aa4:	20 83       	st	Z, r18
     aa6:	13 82       	std	Z+3, r1	; 0x03
     aa8:	12 82       	std	Z+2, r1	; 0x02
     aaa:	15 82       	std	Z+5, r1	; 0x05
     aac:	14 82       	std	Z+4, r1	; 0x04
     aae:	17 82       	std	Z+7, r1	; 0x07
     ab0:	16 82       	std	Z+6, r1	; 0x06
     ab2:	e0 e9       	ldi	r30, 0x90	; 144
     ab4:	f2 e0       	ldi	r31, 0x02	; 2
     ab6:	46 e1       	ldi	r20, 0x16	; 22
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	51 83       	std	Z+1, r21	; 0x01
     abc:	40 83       	st	Z, r20
     abe:	93 83       	std	Z+3, r25	; 0x03
     ac0:	82 83       	std	Z+2, r24	; 0x02
     ac2:	15 82       	std	Z+5, r1	; 0x05
     ac4:	14 82       	std	Z+4, r1	; 0x04
     ac6:	17 82       	std	Z+7, r1	; 0x07
     ac8:	16 82       	std	Z+6, r1	; 0x06
	int YYYY_;
	int MM_;
	int DD_;
	int set_;
public:
	Datum(int d, int m, int y){DD_=d; MM_=m;YYYY_=y; set_ = 0;};
     aca:	e8 e8       	ldi	r30, 0x88	; 136
     acc:	f2 e0       	ldi	r31, 0x02	; 2
     ace:	8a e0       	ldi	r24, 0x0A	; 10
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	95 83       	std	Z+5, r25	; 0x05
     ad4:	84 83       	std	Z+4, r24	; 0x04
     ad6:	33 83       	std	Z+3, r19	; 0x03
     ad8:	22 83       	std	Z+2, r18	; 0x02
     ada:	23 ee       	ldi	r18, 0xE3	; 227
     adc:	37 e0       	ldi	r19, 0x07	; 7
     ade:	31 83       	std	Z+1, r19	; 0x01
     ae0:	20 83       	st	Z, r18
     ae2:	17 82       	std	Z+7, r1	; 0x07
     ae4:	16 82       	std	Z+6, r1	; 0x06
     ae6:	e0 e8       	ldi	r30, 0x80	; 128
     ae8:	f2 e0       	ldi	r31, 0x02	; 2
     aea:	f5 82       	std	Z+5, r15	; 0x05
     aec:	e4 82       	std	Z+4, r14	; 0x04
     aee:	13 83       	std	Z+3, r17	; 0x03
     af0:	02 83       	std	Z+2, r16	; 0x02
     af2:	20 ed       	ldi	r18, 0xD0	; 208
     af4:	37 e0       	ldi	r19, 0x07	; 7
     af6:	31 83       	std	Z+1, r19	; 0x01
     af8:	20 83       	st	Z, r18
     afa:	17 82       	std	Z+7, r1	; 0x07
     afc:	16 82       	std	Z+6, r1	; 0x06
     afe:	e8 e7       	ldi	r30, 0x78	; 120
     b00:	f2 e0       	ldi	r31, 0x02	; 2
     b02:	2f e0       	ldi	r18, 0x0F	; 15
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	35 83       	std	Z+5, r19	; 0x05
     b08:	24 83       	std	Z+4, r18	; 0x04
     b0a:	93 83       	std	Z+3, r25	; 0x03
     b0c:	82 83       	std	Z+2, r24	; 0x02
     b0e:	8b ec       	ldi	r24, 0xCB	; 203
     b10:	97 e0       	ldi	r25, 0x07	; 7
     b12:	91 83       	std	Z+1, r25	; 0x01
     b14:	80 83       	st	Z, r24
     b16:	17 82       	std	Z+7, r1	; 0x07
     b18:	16 82       	std	Z+6, r1	; 0x06
		newmenu = 0;
		break;
	}

	//} //else Klammer
}
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	1f 91       	pop	r17
     b20:	0f 91       	pop	r16
     b22:	ff 90       	pop	r15
     b24:	ef 90       	pop	r14
     b26:	df 90       	pop	r13
     b28:	cf 90       	pop	r12
     b2a:	bf 90       	pop	r11
     b2c:	af 90       	pop	r10
     b2e:	08 95       	ret

00000b30 <_GLOBAL__sub_D_lcd>:
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	ce e6       	ldi	r28, 0x6E	; 110
     b36:	d3 e0       	ldi	r29, 0x03	; 3
	String name;
	int timediff;
	String initials;
};

const struct CITY_TIME_DIF CITIES [] {
     b38:	2e 97       	sbiw	r28, 0x0e	; 14


hd44780_I2Cexp lcd;

//Strukt um Städte und deren Zweitverschiebung zu GMT (London)
struct CITY_TIME_DIF {
     b3a:	ce 01       	movw	r24, r28
     b3c:	08 96       	adiw	r24, 0x08	; 8
     b3e:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN6StringD1Ev>
     b42:	ce 01       	movw	r24, r28
     b44:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN6StringD1Ev>
	String name;
	int timediff;
	String initials;
};

const struct CITY_TIME_DIF CITIES [] {
     b48:	82 e0       	ldi	r24, 0x02	; 2
     b4a:	c6 3c       	cpi	r28, 0xC6	; 198
     b4c:	d8 07       	cpc	r29, r24
     b4e:	a1 f7       	brne	.-24     	; 0xb38 <_GLOBAL__sub_D_lcd+0x8>
		newmenu = 0;
		break;
	}

	//} //else Klammer
}
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	08 95       	ret

00000b56 <_ZN14hd44780_I2Cexp14iosetBacklightEh>:
}

// iosetBacklight()  - set backlight brightness
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	fc 01       	movw	r30, r24
{
	if(!_bl) // backlight control?
     b5c:	81 a5       	ldd	r24, Z+41	; 0x29
     b5e:	88 23       	and	r24, r24
     b60:	71 f1       	breq	.+92     	; 0xbbe <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x68>
     b62:	92 a5       	ldd	r25, Z+42	; 0x2a
		return(hd44780::RV_ENOTSUP); // not backlight control support

	// dimvalue 0 is backlight off any other dimvalue is backlight on
	// configure backlight state mask according to active level
	if(((dimvalue) && (_blLevel == HIGH)) || 
     b64:	66 23       	and	r22, r22
     b66:	19 f0       	breq	.+6      	; 0xb6e <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x18>
     b68:	91 30       	cpi	r25, 0x01	; 1
     b6a:	29 f4       	brne	.+10     	; 0xb76 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
     b6c:	02 c0       	rjmp	.+4      	; 0xb72 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x1c>
			((dimvalue == 0) && (_blLevel == LOW)))
     b6e:	91 11       	cpse	r25, r1
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
	{
		_blCurState = _bl;
     b72:	83 a7       	std	Z+43, r24	; 0x2b
     b74:	01 c0       	rjmp	.+2      	; 0xb78 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x22>
	}
	else 
	{
		_blCurState = 0;
     b76:	13 a6       	std	Z+43, r1	; 0x2b
     b78:	ef 01       	movw	r28, r30
	}
	Wire.beginTransmission(_addr);
     b7a:	60 a1       	ldd	r22, Z+32	; 0x20
     b7c:	89 e0       	ldi	r24, 0x09	; 9
     b7e:	94 e0       	ldi	r25, 0x04	; 4
     b80:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
     b84:	89 a1       	ldd	r24, Y+33	; 0x21
     b86:	82 30       	cpi	r24, 0x02	; 2
     b88:	31 f4       	brne	.+12     	; 0xb96 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x40>
	{
		Wire.write(9); // point to GPIO
     b8a:	69 e0       	ldi	r22, 0x09	; 9
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	89 e0       	ldi	r24, 0x09	; 9
     b90:	94 e0       	ldi	r25, 0x04	; 4
     b92:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN7TwoWire5writeEi>
	}
	Wire.write( _blCurState );
     b96:	6b a5       	ldd	r22, Y+43	; 0x2b
     b98:	89 e0       	ldi	r24, 0x09	; 9
     b9a:	94 e0       	ldi	r25, 0x04	; 4
     b9c:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     ba0:	89 e0       	ldi	r24, 0x09	; 9
     ba2:	94 e0       	ldi	r25, 0x04	; 4
     ba4:	0e 94 29 10 	call	0x2052	; 0x2052 <_ZN7TwoWire15endTransmissionEv>
     ba8:	21 e0       	ldi	r18, 0x01	; 1
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	81 11       	cpse	r24, r1
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x5e>
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	88 27       	eor	r24, r24
     bb6:	99 27       	eor	r25, r25
     bb8:	82 1b       	sub	r24, r18
     bba:	93 0b       	sbc	r25, r19
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x6c>
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
{
	if(!_bl) // backlight control?
		return(hd44780::RV_ENOTSUP); // not backlight control support
     bbe:	8d ef       	ldi	r24, 0xFD	; 253
     bc0:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write( _blCurState );
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR); // all is good
}
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	08 95       	ret

00000bc8 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>:
	return(0);
}


// write4bits - send a nibble to the LCD through i/o expander port
void write4bits(uint8_t value, hd44780::iotype type ) 
     bc8:	cf 93       	push	r28
     bca:	fc 01       	movw	r30, r24
{
uint8_t gpioValue =  _blCurState;
     bcc:	c3 a5       	ldd	r28, Z+43	; 0x2b
   
	// convert the value to an i/o expander port value
	// based on pin mappings
	if(value & (1 << 0))
     bce:	60 ff       	sbrs	r22, 0
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0xe>
		gpioValue |= _d4;
     bd2:	85 a1       	ldd	r24, Z+37	; 0x25
     bd4:	c8 2b       	or	r28, r24

	if(value & (1 << 1))
     bd6:	61 ff       	sbrs	r22, 1
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x16>
		gpioValue |= _d5;
     bda:	86 a1       	ldd	r24, Z+38	; 0x26
     bdc:	c8 2b       	or	r28, r24

	if(value & (1 << 2))
     bde:	62 ff       	sbrs	r22, 2
     be0:	02 c0       	rjmp	.+4      	; 0xbe6 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x1e>
		gpioValue |= _d6;
     be2:	87 a1       	ldd	r24, Z+39	; 0x27
     be4:	c8 2b       	or	r28, r24

	if(value & (1 << 3))
     be6:	63 ff       	sbrs	r22, 3
     be8:	02 c0       	rjmp	.+4      	; 0xbee <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x26>
		gpioValue |= _d7;
     bea:	80 a5       	ldd	r24, Z+40	; 0x28
     bec:	c8 2b       	or	r28, r24


	if(type == hd44780::HD44780_IOdata) 
     bee:	41 30       	cpi	r20, 0x01	; 1
     bf0:	11 f4       	brne	.+4      	; 0xbf6 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x2e>
	{
		gpioValue |= _rs; // set RS high to send to data reg
     bf2:	82 a1       	ldd	r24, Z+34	; 0x22
     bf4:	c8 2b       	or	r28, r24
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
     bf6:	64 a1       	ldd	r22, Z+36	; 0x24
     bf8:	6c 2b       	or	r22, r28
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	89 e0       	ldi	r24, 0x09	; 9
     bfe:	94 e0       	ldi	r25, 0x04	; 4
     c00:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN7TwoWire5writeEi>
	Wire.write(gpioValue);		// with E LOW
     c04:	6c 2f       	mov	r22, r28
     c06:	89 e0       	ldi	r24, 0x09	; 9
     c08:	94 e0       	ldi	r25, 0x04	; 4
}
     c0a:	cf 91       	pop	r28
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
	Wire.write(gpioValue);		// with E LOW
     c0c:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <_ZN7TwoWire5writeEh>

00000c10 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh>:
	return(rval);
}

// iowrite(type, value) - send either command or data byte to lcd
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
     c10:	8f 92       	push	r8
     c12:	9f 92       	push	r9
     c14:	af 92       	push	r10
     c16:	bf 92       	push	r11
     c18:	cf 92       	push	r12
     c1a:	df 92       	push	r13
     c1c:	ef 92       	push	r14
     c1e:	ff 92       	push	r15
     c20:	0f 93       	push	r16
     c22:	1f 93       	push	r17
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
     c28:	ec 01       	movw	r28, r24
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
     c2a:	88 a1       	ldd	r24, Y+32	; 0x20
     c2c:	88 23       	and	r24, r24
     c2e:	09 f4       	brne	.+2      	; 0xc32 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x22>
     c30:	50 c0       	rjmp	.+160    	; 0xcd2 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
     c32:	89 a1       	ldd	r24, Y+33	; 0x21
     c34:	88 23       	and	r24, r24
     c36:	09 f4       	brne	.+2      	; 0xc3a <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x2a>
     c38:	4c c0       	rjmp	.+152    	; 0xcd2 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
     c3a:	14 2f       	mov	r17, r20
     c3c:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
     c3e:	8c 8c       	ldd	r8, Y+28	; 0x1c
     c40:	9d 8c       	ldd	r9, Y+29	; 0x1d
     c42:	ae 8c       	ldd	r10, Y+30	; 0x1e
     c44:	bf 8c       	ldd	r11, Y+31	; 0x1f
     c46:	c8 8c       	ldd	r12, Y+24	; 0x18
     c48:	d9 8c       	ldd	r13, Y+25	; 0x19
     c4a:	ea 8c       	ldd	r14, Y+26	; 0x1a
     c4c:	fb 8c       	ldd	r15, Y+27	; 0x1b
     c4e:	8d e2       	ldi	r24, 0x2D	; 45
     c50:	c8 1a       	sub	r12, r24
     c52:	d1 08       	sbc	r13, r1
     c54:	e1 08       	sbc	r14, r1
     c56:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
     c58:	0e 94 44 18 	call	0x3088	; 0x3088 <micros>
     c5c:	dc 01       	movw	r26, r24
     c5e:	cb 01       	movw	r24, r22
     c60:	8c 19       	sub	r24, r12
     c62:	9d 09       	sbc	r25, r13
     c64:	ae 09       	sbc	r26, r14
     c66:	bf 09       	sbc	r27, r15
     c68:	88 15       	cp	r24, r8
     c6a:	99 05       	cpc	r25, r9
     c6c:	aa 05       	cpc	r26, r10
     c6e:	bb 05       	cpc	r27, r11
     c70:	98 f3       	brcs	.-26     	; 0xc58 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x48>
	 */

	waitReady(-45);
   
	// grab i2c bus
	Wire.beginTransmission(_addr);
     c72:	68 a1       	ldd	r22, Y+32	; 0x20
     c74:	89 e0       	ldi	r24, 0x09	; 9
     c76:	94 e0       	ldi	r25, 0x04	; 4
     c78:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
     c7c:	89 a1       	ldd	r24, Y+33	; 0x21
     c7e:	82 30       	cpi	r24, 0x02	; 2
     c80:	31 f4       	brne	.+12     	; 0xc8e <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x7e>
	{
		Wire.write(9); // point to GPIO
     c82:	69 e0       	ldi	r22, 0x09	; 9
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	89 e0       	ldi	r24, 0x09	; 9
     c88:	94 e0       	ldi	r25, 0x04	; 4
     c8a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN7TwoWire5writeEi>
	}
	// send both nibbles in same i2c connection
	write4bits( (value >> 4), type );  // send upper nibble
     c8e:	61 2f       	mov	r22, r17
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	84 e0       	ldi	r24, 0x04	; 4
     c94:	75 95       	asr	r23
     c96:	67 95       	ror	r22
     c98:	8a 95       	dec	r24
     c9a:	e1 f7       	brne	.-8      	; 0xc94 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x84>
     c9c:	40 2f       	mov	r20, r16
     c9e:	ce 01       	movw	r24, r28
     ca0:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	 * are used to reliably get the LCD and host in nibble sync
	 * with each other and to get the LCD into 4 bit mode.
	 * When sending a "4 bit command" only the upper nibble of
	 * of the 8 bit byte will presented on LCD signals D4-D7.
	 */
	if(type != hd44780::HD44780_IOcmd4bit)
     ca4:	02 30       	cpi	r16, 0x02	; 2
     ca6:	31 f0       	breq	.+12     	; 0xcb4 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xa4>
	{
		write4bits( (value & 0x0F), type); // lower nibble, if not 4bit cmd
     ca8:	61 2f       	mov	r22, r17
     caa:	6f 70       	andi	r22, 0x0F	; 15
     cac:	40 2f       	mov	r20, r16
     cae:	ce 01       	movw	r24, r28
     cb0:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	}
	if(Wire.endTransmission())
     cb4:	89 e0       	ldi	r24, 0x09	; 9
     cb6:	94 e0       	ldi	r25, 0x04	; 4
     cb8:	0e 94 29 10 	call	0x2052	; 0x2052 <_ZN7TwoWire15endTransmissionEv>
     cbc:	21 e0       	ldi	r18, 0x01	; 1
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	81 11       	cpse	r24, r1
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xb8>
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	88 27       	eor	r24, r24
     cca:	99 27       	eor	r25, r25
     ccc:	82 1b       	sub	r24, r18
     cce:	93 0b       	sbc	r25, r19
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc6>
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
     cd2:	8c ef       	ldi	r24, 0xFC	; 252
     cd4:	9f ef       	ldi	r25, 0xFF	; 255
	}
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR);
}
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	1f 91       	pop	r17
     cdc:	0f 91       	pop	r16
     cde:	ff 90       	pop	r15
     ce0:	ef 90       	pop	r14
     ce2:	df 90       	pop	r13
     ce4:	cf 90       	pop	r12
     ce6:	bf 90       	pop	r11
     ce8:	af 90       	pop	r10
     cea:	9f 90       	pop	r9
     cec:	8f 90       	pop	r8
     cee:	08 95       	ret

00000cf0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE>:
// ioread(type) - read a byte from LCD DDRAM
//
// returns:
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
     cf0:	8f 92       	push	r8
     cf2:	9f 92       	push	r9
     cf4:	af 92       	push	r10
     cf6:	bf 92       	push	r11
     cf8:	cf 92       	push	r12
     cfa:	df 92       	push	r13
     cfc:	ef 92       	push	r14
     cfe:	ff 92       	push	r15
     d00:	0f 93       	push	r16
     d02:	1f 93       	push	r17
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
     d08:	ec 01       	movw	r28, r24
{
uint8_t gpioValue =  _blCurState;
     d0a:	1b a5       	ldd	r17, Y+43	; 0x2b
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
     d0c:	88 a1       	ldd	r24, Y+32	; 0x20
     d0e:	88 23       	and	r24, r24
     d10:	09 f4       	brne	.+2      	; 0xd14 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x24>
     d12:	f6 c0       	rjmp	.+492    	; 0xf00 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
     d14:	89 a1       	ldd	r24, Y+33	; 0x21
     d16:	88 23       	and	r24, r24
     d18:	09 f4       	brne	.+2      	; 0xd1c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x2c>
     d1a:	f2 c0       	rjmp	.+484    	; 0xf00 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
		return(hd44780::RV_ENXIO);

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
     d1c:	82 30       	cpi	r24, 0x02	; 2
     d1e:	09 f4       	brne	.+2      	; 0xd22 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x32>
     d20:	f1 c0       	rjmp	.+482    	; 0xf04 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
	{
		return(hd44780::RV_ENOTSUP);
	}

	// check if reads supported
	if(!_rw)
     d22:	8b a1       	ldd	r24, Y+35	; 0x23
     d24:	88 23       	and	r24, r24
     d26:	09 f4       	brne	.+2      	; 0xd2a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x3a>
     d28:	ed c0       	rjmp	.+474    	; 0xf04 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
     d2a:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
     d2c:	8c 8c       	ldd	r8, Y+28	; 0x1c
     d2e:	9d 8c       	ldd	r9, Y+29	; 0x1d
     d30:	ae 8c       	ldd	r10, Y+30	; 0x1e
     d32:	bf 8c       	ldd	r11, Y+31	; 0x1f
     d34:	c8 8c       	ldd	r12, Y+24	; 0x18
     d36:	d9 8c       	ldd	r13, Y+25	; 0x19
     d38:	ea 8c       	ldd	r14, Y+26	; 0x1a
     d3a:	fb 8c       	ldd	r15, Y+27	; 0x1b
     d3c:	8d e2       	ldi	r24, 0x2D	; 45
     d3e:	c8 1a       	sub	r12, r24
     d40:	d1 08       	sbc	r13, r1
     d42:	e1 08       	sbc	r14, r1
     d44:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
     d46:	0e 94 44 18 	call	0x3088	; 0x3088 <micros>
     d4a:	dc 01       	movw	r26, r24
     d4c:	cb 01       	movw	r24, r22
     d4e:	8c 19       	sub	r24, r12
     d50:	9d 09       	sbc	r25, r13
     d52:	ae 09       	sbc	r26, r14
     d54:	bf 09       	sbc	r27, r15
     d56:	88 15       	cp	r24, r8
     d58:	99 05       	cpc	r25, r9
     d5a:	aa 05       	cpc	r26, r10
     d5c:	bb 05       	cpc	r27, r11
     d5e:	98 f3       	brcs	.-26     	; 0xd46 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x56>
     d60:	8d a1       	ldd	r24, Y+37	; 0x25
     d62:	18 2b       	or	r17, r24
     d64:	8e a1       	ldd	r24, Y+38	; 0x26
     d66:	18 2b       	or	r17, r24
     d68:	8f a1       	ldd	r24, Y+39	; 0x27
     d6a:	18 2b       	or	r17, r24
   
	// put all the expander LCD data pins into input mode.
	// PCF8574 psuedo inputs use pullups so setting them to 1
	// makes them suitible for inputs.

	gpioValue |= _d4|_d5|_d6|_d7;
     d6c:	88 a5       	ldd	r24, Y+40	; 0x28
     d6e:	18 2b       	or	r17, r24

	// set RS based on type of read (data or status/cmd)
	if(type == hd44780::HD44780_IOdata) 
     d70:	01 30       	cpi	r16, 0x01	; 1
     d72:	11 f4       	brne	.+4      	; 0xd78 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x88>
	{
		gpioValue |= _rs; // RS high to read data reg
     d74:	8a a1       	ldd	r24, Y+34	; 0x22
     d76:	18 2b       	or	r17, r24
	}

	gpioValue |= _rw; // r/w high for reading
     d78:	8b a1       	ldd	r24, Y+35	; 0x23
     d7a:	18 2b       	or	r17, r24

	// write all the bits to the expander port
	
	Wire.beginTransmission(_addr);
     d7c:	68 a1       	ldd	r22, Y+32	; 0x20
     d7e:	89 e0       	ldi	r24, 0x09	; 9
     d80:	94 e0       	ldi	r25, 0x04	; 4
     d82:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue);		// d4-d7 are inputs, RS, r/w high, E LOW
     d86:	61 2f       	mov	r22, r17
     d88:	89 e0       	ldi	r24, 0x09	; 9
     d8a:	94 e0       	ldi	r25, 0x04	; 4
     d8c:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     d90:	89 e0       	ldi	r24, 0x09	; 9
     d92:	94 e0       	ldi	r25, 0x04	; 4
     d94:	0e 94 29 10 	call	0x2052	; 0x2052 <_ZN7TwoWire15endTransmissionEv>
     d98:	88 23       	and	r24, r24
     d9a:	19 f0       	breq	.+6      	; 0xda2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xb2>
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;
     d9c:	0f ef       	ldi	r16, 0xFF	; 255
     d9e:	1f ef       	ldi	r17, 0xFF	; 255
     da0:	9d c0       	rjmp	.+314    	; 0xedc <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ec>
	if(Wire.endTransmission())
		goto returnStatus;


	// raise E to read the data.
	Wire.beginTransmission(_addr);
     da2:	68 a1       	ldd	r22, Y+32	; 0x20
     da4:	89 e0       	ldi	r24, 0x09	; 9
     da6:	94 e0       	ldi	r25, 0x04	; 4
     da8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raises E 
     dac:	6c a1       	ldd	r22, Y+36	; 0x24
     dae:	61 2b       	or	r22, r17
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	89 e0       	ldi	r24, 0x09	; 9
     db4:	94 e0       	ldi	r25, 0x04	; 4
     db6:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
     dba:	89 e0       	ldi	r24, 0x09	; 9
     dbc:	94 e0       	ldi	r25, 0x04	; 4
     dbe:	0e 94 29 10 	call	0x2052	; 0x2052 <_ZN7TwoWire15endTransmissionEv>
     dc2:	81 11       	cpse	r24, r1
     dc4:	eb cf       	rjmp	.-42     	; 0xd9c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// read the expander port to get the upper nibble of the byte
	Wire.requestFrom((int)_addr, 1);
     dc6:	68 a1       	ldd	r22, Y+32	; 0x20
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	41 e0       	ldi	r20, 0x01	; 1
     dcc:	50 e0       	ldi	r21, 0x00	; 0
     dce:	89 e0       	ldi	r24, 0x09	; 9
     dd0:	94 e0       	ldi	r25, 0x04	; 4
     dd2:	0e 94 26 10 	call	0x204c	; 0x204c <_ZN7TwoWire11requestFromEii>
	iodata = Wire.read();
     dd6:	89 e0       	ldi	r24, 0x09	; 9
     dd8:	94 e0       	ldi	r25, 0x04	; 4
     dda:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZN7TwoWire4readEv>
     dde:	7c 01       	movw	r14, r24
	if(iodata < 0) // did we not receive a byte?
     de0:	97 fd       	sbrc	r25, 7
     de2:	dc cf       	rjmp	.-72     	; 0xd9c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
     de4:	68 a1       	ldd	r22, Y+32	; 0x20
     de6:	89 e0       	ldi	r24, 0x09	; 9
     de8:	94 e0       	ldi	r25, 0x04	; 4
     dea:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
     dee:	61 2f       	mov	r22, r17
     df0:	89 e0       	ldi	r24, 0x09	; 9
     df2:	94 e0       	ldi	r25, 0x04	; 4
     df4:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     df8:	89 e0       	ldi	r24, 0x09	; 9
     dfa:	94 e0       	ldi	r25, 0x04	; 4
     dfc:	0e 94 29 10 	call	0x2052	; 0x2052 <_ZN7TwoWire15endTransmissionEv>
     e00:	81 11       	cpse	r24, r1
     e02:	cc cf       	rjmp	.-104    	; 0xd9c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
     e04:	8d a1       	ldd	r24, Y+37	; 0x25
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	8e 21       	and	r24, r14
     e0a:	9f 21       	and	r25, r15
     e0c:	89 2b       	or	r24, r25
     e0e:	11 f4       	brne	.+4      	; 0xe14 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x124>
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
     e10:	00 e0       	ldi	r16, 0x00	; 0
     e12:	01 c0       	rjmp	.+2      	; 0xe16 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x126>
	if(Wire.endTransmission())
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
		data |= (1 << 4);
     e14:	00 e1       	ldi	r16, 0x10	; 16

	if(iodata & _d5)
     e16:	8e a1       	ldd	r24, Y+38	; 0x26
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	8e 21       	and	r24, r14
     e1c:	9f 21       	and	r25, r15
     e1e:	89 2b       	or	r24, r25
     e20:	09 f0       	breq	.+2      	; 0xe24 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x134>
		data |= (1 << 5);
     e22:	00 62       	ori	r16, 0x20	; 32

	if(iodata & _d6)
     e24:	8f a1       	ldd	r24, Y+39	; 0x27
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	8e 21       	and	r24, r14
     e2a:	9f 21       	and	r25, r15
     e2c:	89 2b       	or	r24, r25
     e2e:	09 f0       	breq	.+2      	; 0xe32 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x142>
		data |= (1 << 6);
     e30:	00 64       	ori	r16, 0x40	; 64

	if(iodata & _d7)
     e32:	88 a5       	ldd	r24, Y+40	; 0x28
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	e8 22       	and	r14, r24
     e38:	f9 22       	and	r15, r25
     e3a:	ef 28       	or	r14, r15
     e3c:	09 f0       	breq	.+2      	; 0xe40 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x150>
		data |= (1 << 7);
     e3e:	00 68       	ori	r16, 0x80	; 128
	
	Wire.beginTransmission(_addr);
     e40:	68 a1       	ldd	r22, Y+32	; 0x20
     e42:	89 e0       	ldi	r24, 0x09	; 9
     e44:	94 e0       	ldi	r25, 0x04	; 4
     e46:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raise E to read next nibble
     e4a:	6c a1       	ldd	r22, Y+36	; 0x24
     e4c:	61 2b       	or	r22, r17
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	89 e0       	ldi	r24, 0x09	; 9
     e52:	94 e0       	ldi	r25, 0x04	; 4
     e54:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
     e58:	89 e0       	ldi	r24, 0x09	; 9
     e5a:	94 e0       	ldi	r25, 0x04	; 4
     e5c:	0e 94 29 10 	call	0x2052	; 0x2052 <_ZN7TwoWire15endTransmissionEv>
     e60:	81 11       	cpse	r24, r1
     e62:	9c cf       	rjmp	.-200    	; 0xd9c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>

	// read the expander port to get the lower nibble of the byte
	// We can't look at the return value from requestFrom() on the TineyWireM
	// library as it doesn't work like it is supposed to.
	// So we look at the return status from read() instead.
	Wire.requestFrom((int)_addr, 1);
     e64:	68 a1       	ldd	r22, Y+32	; 0x20
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	41 e0       	ldi	r20, 0x01	; 1
     e6a:	50 e0       	ldi	r21, 0x00	; 0
     e6c:	89 e0       	ldi	r24, 0x09	; 9
     e6e:	94 e0       	ldi	r25, 0x04	; 4
     e70:	0e 94 26 10 	call	0x204c	; 0x204c <_ZN7TwoWire11requestFromEii>

	iodata = Wire.read();
     e74:	89 e0       	ldi	r24, 0x09	; 9
     e76:	94 e0       	ldi	r25, 0x04	; 4
     e78:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZN7TwoWire4readEv>
     e7c:	7c 01       	movw	r14, r24

	if(iodata < 0) // did we not receive a byte?
     e7e:	97 fd       	sbrc	r25, 7
     e80:	8d cf       	rjmp	.-230    	; 0xd9c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
     e82:	68 a1       	ldd	r22, Y+32	; 0x20
     e84:	89 e0       	ldi	r24, 0x09	; 9
     e86:	94 e0       	ldi	r25, 0x04	; 4
     e88:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
     e8c:	61 2f       	mov	r22, r17
     e8e:	89 e0       	ldi	r24, 0x09	; 9
     e90:	94 e0       	ldi	r25, 0x04	; 4
     e92:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     e96:	89 e0       	ldi	r24, 0x09	; 9
     e98:	94 e0       	ldi	r25, 0x04	; 4
     e9a:	0e 94 29 10 	call	0x2052	; 0x2052 <_ZN7TwoWire15endTransmissionEv>
     e9e:	81 11       	cpse	r24, r1
     ea0:	7d cf       	rjmp	.-262    	; 0xd9c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into lower nibble of byte
	if(iodata & _d4)
     ea2:	8d a1       	ldd	r24, Y+37	; 0x25
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	8e 21       	and	r24, r14
     ea8:	9f 21       	and	r25, r15
     eaa:	89 2b       	or	r24, r25
     eac:	09 f0       	breq	.+2      	; 0xeb0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1c0>
		data |= (1 << 0);
     eae:	01 60       	ori	r16, 0x01	; 1

	if(iodata & _d5)
     eb0:	8e a1       	ldd	r24, Y+38	; 0x26
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	8e 21       	and	r24, r14
     eb6:	9f 21       	and	r25, r15
     eb8:	89 2b       	or	r24, r25
     eba:	09 f0       	breq	.+2      	; 0xebe <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ce>
		data |= (1 << 1);
     ebc:	02 60       	ori	r16, 0x02	; 2

	if(iodata & _d6)
     ebe:	8f a1       	ldd	r24, Y+39	; 0x27
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	8e 21       	and	r24, r14
     ec4:	9f 21       	and	r25, r15
     ec6:	89 2b       	or	r24, r25
     ec8:	09 f0       	breq	.+2      	; 0xecc <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1dc>
		data |= (1 << 2);
     eca:	04 60       	ori	r16, 0x04	; 4

	if(iodata & _d7)
     ecc:	88 a5       	ldd	r24, Y+40	; 0x28
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	e8 22       	and	r14, r24
     ed2:	f9 22       	and	r15, r25
     ed4:	ef 28       	or	r14, r15
     ed6:	09 f0       	breq	.+2      	; 0xeda <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ea>
		data |= (1 << 3);
     ed8:	08 60       	ori	r16, 0x08	; 8

	rval = data;
     eda:	10 e0       	ldi	r17, 0x00	; 0

returnStatus:

	// try to put gpio port back to all outputs state with WR signal low for writes
	Wire.beginTransmission(_addr);
     edc:	68 a1       	ldd	r22, Y+32	; 0x20
     ede:	89 e0       	ldi	r24, 0x09	; 9
     ee0:	94 e0       	ldi	r25, 0x04	; 4
     ee2:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(_blCurState);		// with E LOW
     ee6:	6b a5       	ldd	r22, Y+43	; 0x2b
     ee8:	89 e0       	ldi	r24, 0x09	; 9
     eea:	94 e0       	ldi	r25, 0x04	; 4
     eec:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     ef0:	89 e0       	ldi	r24, 0x09	; 9
     ef2:	94 e0       	ldi	r25, 0x04	; 4
     ef4:	0e 94 29 10 	call	0x2052	; 0x2052 <_ZN7TwoWire15endTransmissionEv>
     ef8:	88 23       	and	r24, r24
     efa:	39 f0       	breq	.+14     	; 0xf0a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21a>
		rval = hd44780::RV_EIO;
     efc:	8f ef       	ldi	r24, 0xFF	; 255
     efe:	03 c0       	rjmp	.+6      	; 0xf06 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
     f00:	8c ef       	ldi	r24, 0xFC	; 252
     f02:	01 c0       	rjmp	.+2      	; 0xf06 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
	{
		return(hd44780::RV_ENOTSUP);
     f04:	8d ef       	ldi	r24, 0xFD	; 253
     f06:	9f ef       	ldi	r25, 0xFF	; 255
     f08:	01 c0       	rjmp	.+2      	; 0xf0c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21c>
     f0a:	c8 01       	movw	r24, r16
	Wire.write(_blCurState);		// with E LOW
	if(Wire.endTransmission())
		rval = hd44780::RV_EIO;

	return(rval);
}
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	ff 90       	pop	r15
     f16:	ef 90       	pop	r14
     f18:	df 90       	pop	r13
     f1a:	cf 90       	pop	r12
     f1c:	bf 90       	pop	r11
     f1e:	af 90       	pop	r10
     f20:	9f 90       	pop	r9
     f22:	8f 90       	pop	r8
     f24:	08 95       	ret

00000f26 <_ZN14hd44780_I2Cexp11autocfg8574Ev>:
 * a new resistor to  connect to the base of the transistor.
 * 
 * As a result the SYDZ backpack cannot use autoconfiguration.
 */

int autocfg8574()
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	ec 01       	movw	r28, r24
uint8_t data, data2;
uint8_t rs, rw, en, d4, d5, d6, d7, bl, blLevel;

	// First put a 0xff in the output port

	Wire.beginTransmission(_addr);
     f30:	68 a1       	ldd	r22, Y+32	; 0x20
     f32:	89 e0       	ldi	r24, 0x09	; 9
     f34:	94 e0       	ldi	r25, 0x04	; 4
     f36:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0xff);
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	89 e0       	ldi	r24, 0x09	; 9
     f3e:	94 e0       	ldi	r25, 0x04	; 4
     f40:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
     f44:	89 e0       	ldi	r24, 0x09	; 9
     f46:	94 e0       	ldi	r25, 0x04	; 4
     f48:	0e 94 29 10 	call	0x2052	; 0x2052 <_ZN7TwoWire15endTransmissionEv>

	// now read back from the port

	Wire.requestFrom((int)_addr, 1);
     f4c:	68 a1       	ldd	r22, Y+32	; 0x20
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	41 e0       	ldi	r20, 0x01	; 1
     f52:	50 e0       	ldi	r21, 0x00	; 0
     f54:	89 e0       	ldi	r24, 0x09	; 9
     f56:	94 e0       	ldi	r25, 0x04	; 4
     f58:	0e 94 26 10 	call	0x204c	; 0x204c <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
     f5c:	89 e0       	ldi	r24, 0x09	; 9
     f5e:	94 e0       	ldi	r25, 0x04	; 4
     f60:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZN7TwoWire4readEv>
     f64:	8c 01       	movw	r16, r24

	// Turn off bit2 to attempt to see if en is bit 2,
	// if it is, it should change all lcd data bits to 1s
	
	Wire.beginTransmission(_addr);
     f66:	68 a1       	ldd	r22, Y+32	; 0x20
     f68:	89 e0       	ldi	r24, 0x09	; 9
     f6a:	94 e0       	ldi	r25, 0x04	; 4
     f6c:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) (~(1 << 2)) );
     f70:	6b ef       	ldi	r22, 0xFB	; 251
     f72:	89 e0       	ldi	r24, 0x09	; 9
     f74:	94 e0       	ldi	r25, 0x04	; 4
     f76:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
     f7a:	89 e0       	ldi	r24, 0x09	; 9
     f7c:	94 e0       	ldi	r25, 0x04	; 4
     f7e:	0e 94 29 10 	call	0x2052	; 0x2052 <_ZN7TwoWire15endTransmissionEv>

	// read back data
	Wire.requestFrom((int)_addr, 1);
     f82:	68 a1       	ldd	r22, Y+32	; 0x20
     f84:	70 e0       	ldi	r23, 0x00	; 0
     f86:	41 e0       	ldi	r20, 0x01	; 1
     f88:	50 e0       	ldi	r21, 0x00	; 0
     f8a:	89 e0       	ldi	r24, 0x09	; 9
     f8c:	94 e0       	ldi	r25, 0x04	; 4
     f8e:	0e 94 26 10 	call	0x204c	; 0x204c <_ZN7TwoWire11requestFromEii>
	data2 = Wire.read();
     f92:	89 e0       	ldi	r24, 0x09	; 9
     f94:	94 e0       	ldi	r25, 0x04	; 4
     f96:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZN7TwoWire4readEv>

	// If lower 3 bits are high and all 4 upper bits are high after clearing bit 2
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
     f9a:	98 01       	movw	r18, r16
     f9c:	27 70       	andi	r18, 0x07	; 7
     f9e:	33 27       	eor	r19, r19
     fa0:	27 30       	cpi	r18, 0x07	; 7
     fa2:	31 05       	cpc	r19, r1
     fa4:	b1 f4       	brne	.+44     	; 0xfd2 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
     fa6:	80 7f       	andi	r24, 0xF0	; 240
     fa8:	99 27       	eor	r25, r25
     faa:	80 3f       	cpi	r24, 0xF0	; 240
     fac:	91 05       	cpc	r25, r1
     fae:	89 f4       	brne	.+34     	; 0xfd2 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
     fb0:	83 e0       	ldi	r24, 0x03	; 3
     fb2:	16 95       	lsr	r17
     fb4:	07 95       	ror	r16
     fb6:	8a 95       	dec	r24
     fb8:	e1 f7       	brne	.-8      	; 0xfb2 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x8c>
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	08 27       	eor	r16, r24
     fbe:	01 70       	andi	r16, 0x01	; 1
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
	{
		rs = 0; rw = 1; en = 2; d4 = 4; d5 = 5; d6 = 6; d7 = 7; bl = 3;
     fc0:	43 e0       	ldi	r20, 0x03	; 3
     fc2:	57 e0       	ldi	r21, 0x07	; 7
     fc4:	66 e0       	ldi	r22, 0x06	; 6
     fc6:	75 e0       	ldi	r23, 0x05	; 5
     fc8:	e4 e0       	ldi	r30, 0x04	; 4
     fca:	22 e0       	ldi	r18, 0x02	; 2
     fcc:	f1 e0       	ldi	r31, 0x01	; 1
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	34 c0       	rjmp	.+104    	; 0x103a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x114>
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
		}
	}
	else if((data & 0x70) == 0x70)
     fd2:	c8 01       	movw	r24, r16
     fd4:	80 77       	andi	r24, 0x70	; 112
     fd6:	99 27       	eor	r25, r25
     fd8:	80 37       	cpi	r24, 0x70	; 112
     fda:	91 05       	cpc	r25, r1
     fdc:	09 f0       	breq	.+2      	; 0xfe0 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xba>
     fde:	68 c0       	rjmp	.+208    	; 0x10b0 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18a>
		// both use bit 7 for backlight control

		// Turn off the en bit which should change the data bits
		// bit 4 on the mjkdz is en so we try that bit
	
		Wire.beginTransmission(_addr);
     fe0:	68 a1       	ldd	r22, Y+32	; 0x20
     fe2:	89 e0       	ldi	r24, 0x09	; 9
     fe4:	94 e0       	ldi	r25, 0x04	; 4
     fe6:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t) (~(1 << 4)) );
     fea:	6f ee       	ldi	r22, 0xEF	; 239
     fec:	89 e0       	ldi	r24, 0x09	; 9
     fee:	94 e0       	ldi	r25, 0x04	; 4
     ff0:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
     ff4:	89 e0       	ldi	r24, 0x09	; 9
     ff6:	94 e0       	ldi	r25, 0x04	; 4
     ff8:	0e 94 29 10 	call	0x2052	; 0x2052 <_ZN7TwoWire15endTransmissionEv>

		// read back data
		Wire.requestFrom((int)_addr, 1);
     ffc:	68 a1       	ldd	r22, Y+32	; 0x20
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	41 e0       	ldi	r20, 0x01	; 1
    1002:	50 e0       	ldi	r21, 0x00	; 0
    1004:	89 e0       	ldi	r24, 0x09	; 9
    1006:	94 e0       	ldi	r25, 0x04	; 4
    1008:	0e 94 26 10 	call	0x204c	; 0x204c <_ZN7TwoWire11requestFromEii>
		data2 = Wire.read();
    100c:	89 e0       	ldi	r24, 0x09	; 9
    100e:	94 e0       	ldi	r25, 0x04	; 4
    1010:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZN7TwoWire4readEv>
		// look at data bits and see if they changed
		// if they changed to 0xf, then en was bit 4 and it is mjdkz
		// this will happen since when E is low the LCD is not
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
    1014:	8f 70       	andi	r24, 0x0F	; 15
    1016:	99 27       	eor	r25, r25
    1018:	0f 97       	sbiw	r24, 0x0f	; 15
    101a:	19 f0       	breq	.+6      	; 0x1022 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xfc>
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
		}
		else
		{
			// electrofun LCDXIO
			rs = 4; rw = 5; en = 6; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
    101c:	26 e0       	ldi	r18, 0x06	; 6
    101e:	34 e0       	ldi	r19, 0x04	; 4
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x100>
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
		{
			// mjkdz
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
    1022:	24 e0       	ldi	r18, 0x04	; 4
    1024:	36 e0       	ldi	r19, 0x06	; 6
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
    1026:	00 95       	com	r16
    1028:	00 1f       	adc	r16, r16
    102a:	00 27       	eor	r16, r16
    102c:	00 1f       	adc	r16, r16
    102e:	47 e0       	ldi	r20, 0x07	; 7
    1030:	53 e0       	ldi	r21, 0x03	; 3
    1032:	62 e0       	ldi	r22, 0x02	; 2
    1034:	71 e0       	ldi	r23, 0x01	; 1
    1036:	e0 e0       	ldi	r30, 0x00	; 0
    1038:	f5 e0       	ldi	r31, 0x05	; 5
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	dc 01       	movw	r26, r24
    1040:	01 c0       	rjmp	.+2      	; 0x1044 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11e>
    1042:	aa 0f       	add	r26, r26
    1044:	3a 95       	dec	r19
    1046:	ea f7       	brpl	.-6      	; 0x1042 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11c>
    1048:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
    104a:	dc 01       	movw	r26, r24
    104c:	01 c0       	rjmp	.+2      	; 0x1050 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x12a>
    104e:	aa 0f       	add	r26, r26
    1050:	fa 95       	dec	r31
    1052:	ea f7       	brpl	.-6      	; 0x104e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x128>
    1054:	ab a3       	std	Y+35, r26	; 0x23
	else
		_rw = 0; // no r/w control

	_en = ( 1 << en );
    1056:	dc 01       	movw	r26, r24
    1058:	02 c0       	rjmp	.+4      	; 0x105e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x138>
    105a:	aa 0f       	add	r26, r26
    105c:	bb 1f       	adc	r27, r27
    105e:	2a 95       	dec	r18
    1060:	e2 f7       	brpl	.-8      	; 0x105a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x134>
    1062:	ac a3       	std	Y+36, r26	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
    1064:	9c 01       	movw	r18, r24
    1066:	01 c0       	rjmp	.+2      	; 0x106a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x144>
    1068:	22 0f       	add	r18, r18
    106a:	ea 95       	dec	r30
    106c:	ea f7       	brpl	.-6      	; 0x1068 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x142>
    106e:	2d a3       	std	Y+37, r18	; 0x25
	_d5 = ( 1 << d5 );
    1070:	9c 01       	movw	r18, r24
    1072:	01 c0       	rjmp	.+2      	; 0x1076 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x150>
    1074:	22 0f       	add	r18, r18
    1076:	7a 95       	dec	r23
    1078:	ea f7       	brpl	.-6      	; 0x1074 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x14e>
    107a:	2e a3       	std	Y+38, r18	; 0x26
	_d6 = ( 1 << d6 );
    107c:	9c 01       	movw	r18, r24
    107e:	01 c0       	rjmp	.+2      	; 0x1082 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15c>
    1080:	22 0f       	add	r18, r18
    1082:	6a 95       	dec	r22
    1084:	ea f7       	brpl	.-6      	; 0x1080 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15a>
    1086:	2f a3       	std	Y+39, r18	; 0x27
	_d7 = ( 1 << d7 );   
    1088:	9c 01       	movw	r18, r24
    108a:	01 c0       	rjmp	.+2      	; 0x108e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x168>
    108c:	22 0f       	add	r18, r18
    108e:	5a 95       	dec	r21
    1090:	ea f7       	brpl	.-6      	; 0x108c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x166>
    1092:	28 a7       	std	Y+40, r18	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
    1094:	01 c0       	rjmp	.+2      	; 0x1098 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x172>
    1096:	88 0f       	add	r24, r24
    1098:	4a 95       	dec	r20
    109a:	ea f7       	brpl	.-6      	; 0x1096 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x170>
    109c:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
    109e:	0a a7       	std	Y+42, r16	; 0x2a
	// set default bl state to backlight on
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
    10a0:	01 30       	cpi	r16, 0x01	; 1
    10a2:	11 f4       	brne	.+4      	; 0x10a8 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x182>
		_blCurState = _bl;
    10a4:	8b a7       	std	Y+43, r24	; 0x2b
    10a6:	01 c0       	rjmp	.+2      	; 0x10aa <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x184>
	else
		_blCurState = 0;
    10a8:	1b a6       	std	Y+43, r1	; 0x2b
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18e>
		}
	}
	else
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
    10b0:	8d ef       	ldi	r24, 0xFD	; 253
    10b2:	9f ef       	ldi	r25, 0xFF	; 255
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	1f 91       	pop	r17
    10ba:	0f 91       	pop	r16
    10bc:	08 95       	ret

000010be <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>:
 * if GP1 is low then the board is the BOARD_XXX board
 * The BOARD_XXX may not work as GP1 is used for D5 on WIDEHK and LCDPLUG
 *
 *
 */
int autocfgMCP23008()
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	ec 01       	movw	r28, r24

	/*
	 * Now set up output port
	 * Make no assumptions as to the state of IOCON BYTE mode
	 */
	Wire.beginTransmission(_addr);
    10c4:	68 a1       	ldd	r22, Y+32	; 0x20
    10c6:	89 e0       	ldi	r24, 0x09	; 9
    10c8:	94 e0       	ldi	r25, 0x04	; 4
    10ca:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t)0); // point to IODIR
    10ce:	60 e0       	ldi	r22, 0x00	; 0
    10d0:	89 e0       	ldi	r24, 0x09	; 9
    10d2:	94 e0       	ldi	r25, 0x04	; 4
    10d4:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <_ZN7TwoWire5writeEh>
	Wire.write(0xff); // all pins inputs
    10d8:	6f ef       	ldi	r22, 0xFF	; 255
    10da:	70 e0       	ldi	r23, 0x00	; 0
    10dc:	89 e0       	ldi	r24, 0x09	; 9
    10de:	94 e0       	ldi	r25, 0x04	; 4
    10e0:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    10e4:	89 e0       	ldi	r24, 0x09	; 9
    10e6:	94 e0       	ldi	r25, 0x04	; 4
    10e8:	0e 94 29 10 	call	0x2052	; 0x2052 <_ZN7TwoWire15endTransmissionEv>

	Wire.beginTransmission(_addr);
    10ec:	68 a1       	ldd	r22, Y+32	; 0x20
    10ee:	89 e0       	ldi	r24, 0x09	; 9
    10f0:	94 e0       	ldi	r25, 0x04	; 4
    10f2:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(6); // point to GPPU
    10f6:	66 e0       	ldi	r22, 0x06	; 6
    10f8:	70 e0       	ldi	r23, 0x00	; 0
    10fa:	89 e0       	ldi	r24, 0x09	; 9
    10fc:	94 e0       	ldi	r25, 0x04	; 4
    10fe:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN7TwoWire5writeEi>
	Wire.write(0xff); // turn on pullups
    1102:	6f ef       	ldi	r22, 0xFF	; 255
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	89 e0       	ldi	r24, 0x09	; 9
    1108:	94 e0       	ldi	r25, 0x04	; 4
    110a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    110e:	89 e0       	ldi	r24, 0x09	; 9
    1110:	94 e0       	ldi	r25, 0x04	; 4
    1112:	0e 94 29 10 	call	0x2052	; 0x2052 <_ZN7TwoWire15endTransmissionEv>

	/*
	 * read from the GPIO port
	 */

	Wire.beginTransmission(_addr);
    1116:	68 a1       	ldd	r22, Y+32	; 0x20
    1118:	89 e0       	ldi	r24, 0x09	; 9
    111a:	94 e0       	ldi	r25, 0x04	; 4
    111c:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(9); // point to GPIO
    1120:	69 e0       	ldi	r22, 0x09	; 9
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	89 e0       	ldi	r24, 0x09	; 9
    1126:	94 e0       	ldi	r25, 0x04	; 4
    1128:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    112c:	89 e0       	ldi	r24, 0x09	; 9
    112e:	94 e0       	ldi	r25, 0x04	; 4
    1130:	0e 94 29 10 	call	0x2052	; 0x2052 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom((int)_addr, 1);
    1134:	68 a1       	ldd	r22, Y+32	; 0x20
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	41 e0       	ldi	r20, 0x01	; 1
    113a:	50 e0       	ldi	r21, 0x00	; 0
    113c:	89 e0       	ldi	r24, 0x09	; 9
    113e:	94 e0       	ldi	r25, 0x04	; 4
    1140:	0e 94 26 10 	call	0x204c	; 0x204c <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    1144:	89 e0       	ldi	r24, 0x09	; 9
    1146:	94 e0       	ldi	r25, 0x04	; 4
    1148:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZN7TwoWire4readEv>

	blLevel = HIGH; // known boards are active HIGH bl

	if(data == 0x7f) // bit 7 low, and other control and data lines high
    114c:	8f 37       	cpi	r24, 0x7F	; 127
    114e:	61 f0       	breq	.+24     	; 0x1168 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xaa>
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
    1150:	86 ff       	sbrs	r24, 6
    1152:	12 c0       	rjmp	.+36     	; 0x1178 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xba>
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
    1154:	81 fd       	sbrc	r24, 1
    1156:	4c c0       	rjmp	.+152    	; 0x11f0 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x132>
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
		bl = 1;
    1158:	21 e0       	ldi	r18, 0x01	; 1
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
    115a:	32 e0       	ldi	r19, 0x02	; 2
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
    115c:	43 e0       	ldi	r20, 0x03	; 3
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
    115e:	54 e0       	ldi	r21, 0x04	; 4
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
    1160:	65 e0       	ldi	r22, 0x05	; 5
	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
    1162:	76 e0       	ldi	r23, 0x06	; 6
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
    1164:	e7 e0       	ldi	r30, 0x07	; 7
    1166:	0f c0       	rjmp	.+30     	; 0x1186 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;
    1168:	27 e0       	ldi	r18, 0x07	; 7
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
    116a:	36 e0       	ldi	r19, 0x06	; 6
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
    116c:	45 e0       	ldi	r20, 0x05	; 5
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
    116e:	54 e0       	ldi	r21, 0x04	; 4
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
    1170:	63 e0       	ldi	r22, 0x03	; 3
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
    1172:	72 e0       	ldi	r23, 0x02	; 2

	if(data == 0x7f) // bit 7 low, and other control and data lines high
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
    1174:	e1 e0       	ldi	r30, 0x01	; 1
    1176:	07 c0       	rjmp	.+14     	; 0x1186 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;
    1178:	26 e0       	ldi	r18, 0x06	; 6
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
    117a:	33 e0       	ldi	r19, 0x03	; 3
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
    117c:	42 e0       	ldi	r20, 0x02	; 2
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
    117e:	51 e0       	ldi	r21, 0x01	; 1
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
    1180:	60 e0       	ldi	r22, 0x00	; 0
	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
    1182:	77 e0       	ldi	r23, 0x07	; 7
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
    1184:	e4 e0       	ldi	r30, 0x04	; 4
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	dc 01       	movw	r26, r24
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd4>
    118e:	aa 0f       	add	r26, r26
    1190:	bb 1f       	adc	r27, r27
    1192:	ea 95       	dec	r30
    1194:	e2 f7       	brpl	.-8      	; 0x118e <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd0>
    1196:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
	else
		_rw = 0; // no r/w control
    1198:	1b a2       	std	Y+35, r1	; 0x23

	_en = ( 1 << en );
    119a:	fc 01       	movw	r30, r24
    119c:	01 c0       	rjmp	.+2      	; 0x11a0 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe2>
    119e:	ee 0f       	add	r30, r30
    11a0:	7a 95       	dec	r23
    11a2:	ea f7       	brpl	.-6      	; 0x119e <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe0>
    11a4:	ec a3       	std	Y+36, r30	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
    11a6:	fc 01       	movw	r30, r24
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xf0>
    11aa:	ee 0f       	add	r30, r30
    11ac:	ff 1f       	adc	r31, r31
    11ae:	6a 95       	dec	r22
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xec>
    11b2:	ed a3       	std	Y+37, r30	; 0x25
	_d5 = ( 1 << d5 );
    11b4:	bc 01       	movw	r22, r24
    11b6:	01 c0       	rjmp	.+2      	; 0x11ba <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfc>
    11b8:	66 0f       	add	r22, r22
    11ba:	5a 95       	dec	r21
    11bc:	ea f7       	brpl	.-6      	; 0x11b8 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfa>
    11be:	6e a3       	std	Y+38, r22	; 0x26
	_d6 = ( 1 << d6 );
    11c0:	bc 01       	movw	r22, r24
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x10a>
    11c4:	66 0f       	add	r22, r22
    11c6:	77 1f       	adc	r23, r23
    11c8:	4a 95       	dec	r20
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x106>
    11cc:	6f a3       	std	Y+39, r22	; 0x27
	_d7 = ( 1 << d7 );   
    11ce:	ac 01       	movw	r20, r24
    11d0:	01 c0       	rjmp	.+2      	; 0x11d4 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x116>
    11d2:	44 0f       	add	r20, r20
    11d4:	3a 95       	dec	r19
    11d6:	ea f7       	brpl	.-6      	; 0x11d2 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x114>
    11d8:	48 a7       	std	Y+40, r20	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
    11da:	01 c0       	rjmp	.+2      	; 0x11de <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x120>
    11dc:	88 0f       	add	r24, r24
    11de:	2a 95       	dec	r18
    11e0:	ea f7       	brpl	.-6      	; 0x11dc <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x11e>
    11e2:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
    11e4:	91 e0       	ldi	r25, 0x01	; 1
    11e6:	9a a7       	std	Y+42, r25	; 0x2a
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
		_blCurState = _bl;
    11e8:	8b a7       	std	Y+43, r24	; 0x2b
		// could not identify board
		return(hd44780::RV_ENOTSUP);
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x136>

	}
	else
	{
		// could not identify board
		return(hd44780::RV_ENOTSUP);
    11f0:	8d ef       	ldi	r24, 0xFD	; 253
    11f2:	9f ef       	ldi	r25, 0xFF	; 255
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	08 95       	ret

000011fa <_ZN14hd44780_I2Cexp6ioinitEv>:
// Returns non zero if initialization failed.
//
// can't be used from constructors because not everything is initalized yet.
// (maybe interrupts or other library constructors)
// if Wire library is used in constructor, it will hang.
int ioinit()
    11fa:	1f 93       	push	r17
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	ec 01       	movw	r28, r24
	 * I believe that it is unreasonable to require the the user
	 * sketch code to do it, because all that should change between
	 * hd44780 i/o interfaces should be the constructor
	 * So we go ahead and call it here.
	 */
	Wire.begin();
    1202:	89 e0       	ldi	r24, 0x09	; 9
    1204:	94 e0       	ldi	r25, 0x04	; 4
    1206:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <_ZN7TwoWire5beginEv>

	// auto locate i2c expander and magically detect pin mappings

	if(!_addr) // locate next instance
    120a:	68 a1       	ldd	r22, Y+32	; 0x20
    120c:	61 11       	cpse	r22, r1
    120e:	0a c0       	rjmp	.+20     	; 0x1224 <_ZN14hd44780_I2Cexp6ioinitEv+0x2a>
	{
		_addr = LocateDevice(AutoInst++);
    1210:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    1214:	91 e0       	ldi	r25, 0x01	; 1
    1216:	98 0f       	add	r25, r24
    1218:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    121c:	0e 94 a7 01 	call	0x34e	; 0x34e <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
    1220:	88 a3       	std	Y+32, r24	; 0x20
    1222:	0d c0       	rjmp	.+26     	; 0x123e <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
	}
	else
	{
		// check to see if device at specified address is really there
		Wire.beginTransmission(_addr);
    1224:	89 e0       	ldi	r24, 0x09	; 9
    1226:	94 e0       	ldi	r25, 0x04	; 4
    1228:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN7TwoWire17beginTransmissionEh>
		if(Wire.endTransmission())
    122c:	89 e0       	ldi	r24, 0x09	; 9
    122e:	94 e0       	ldi	r25, 0x04	; 4
    1230:	0e 94 29 10 	call	0x2052	; 0x2052 <_ZN7TwoWire15endTransmissionEv>
    1234:	88 23       	and	r24, r24
    1236:	19 f0       	breq	.+6      	; 0x123e <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
			return(hd44780::RV_ENXIO);
    1238:	8c ef       	ldi	r24, 0xFC	; 252
    123a:	9f ef       	ldi	r25, 0xFF	; 255
    123c:	a7 c0       	rjmp	.+334    	; 0x138c <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	}

	if(!_addr) // locate next instance
    123e:	88 a1       	ldd	r24, Y+32	; 0x20
    1240:	81 11       	cpse	r24, r1
    1242:	09 c0       	rjmp	.+18     	; 0x1256 <_ZN14hd44780_I2Cexp6ioinitEv+0x5c>
		_addr = LocateDevice(AutoInst++);
    1244:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    1248:	91 e0       	ldi	r25, 0x01	; 1
    124a:	98 0f       	add	r25, r24
    124c:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    1250:	0e 94 a7 01 	call	0x34e	; 0x34e <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
    1254:	88 a3       	std	Y+32, r24	; 0x20

	if(!_addr) // if we couldn't locate it, return error
    1256:	18 a1       	ldd	r17, Y+32	; 0x20
    1258:	11 23       	and	r17, r17
    125a:	71 f3       	breq	.-36     	; 0x1238 <_ZN14hd44780_I2Cexp6ioinitEv+0x3e>
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
    125c:	89 a1       	ldd	r24, Y+33	; 0x21
    125e:	88 23       	and	r24, r24
    1260:	c1 f1       	breq	.+112    	; 0x12d2 <_ZN14hd44780_I2Cexp6ioinitEv+0xd8>
			return(status);
	}

	// initialize IO expander chip

	Wire.beginTransmission(_addr);
    1262:	68 a1       	ldd	r22, Y+32	; 0x20
    1264:	89 e0       	ldi	r24, 0x09	; 9
    1266:	94 e0       	ldi	r25, 0x04	; 4
    1268:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN7TwoWire17beginTransmissionEh>

	if(_expType == I2Cexp_MCP23008)
    126c:	89 a1       	ldd	r24, Y+33	; 0x21
    126e:	82 30       	cpi	r24, 0x02	; 2
    1270:	09 f0       	breq	.+2      	; 0x1274 <_ZN14hd44780_I2Cexp6ioinitEv+0x7a>
    1272:	76 c0       	rjmp	.+236    	; 0x1360 <_ZN14hd44780_I2Cexp6ioinitEv+0x166>
		 * within the same i2c connection by simply sending more bytes.
		 * This is necessary as the code uses back to back writes to perform
		 * the nibble updates as well as the toggling the enable signal.
		 * This methodology offers significant performance gains.
		 */
		Wire.write(5);	// point to IOCON
    1274:	65 e0       	ldi	r22, 0x05	; 5
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	89 e0       	ldi	r24, 0x09	; 9
    127a:	94 e0       	ldi	r25, 0x04	; 4
    127c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN7TwoWire5writeEi>
		Wire.write(0x20);// disable sequential mode (enables BYTE mode)
    1280:	60 e2       	ldi	r22, 0x20	; 32
    1282:	70 e0       	ldi	r23, 0x00	; 0
    1284:	89 e0       	ldi	r24, 0x09	; 9
    1286:	94 e0       	ldi	r25, 0x04	; 4
    1288:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    128c:	89 e0       	ldi	r24, 0x09	; 9
    128e:	94 e0       	ldi	r25, 0x04	; 4
    1290:	0e 94 29 10 	call	0x2052	; 0x2052 <_ZN7TwoWire15endTransmissionEv>

		/*
		 * Now set up output port
		 */
		Wire.beginTransmission(_addr);
    1294:	68 a1       	ldd	r22, Y+32	; 0x20
    1296:	89 e0       	ldi	r24, 0x09	; 9
    1298:	94 e0       	ldi	r25, 0x04	; 4
    129a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t)0); // point to IODIR
    129e:	60 e0       	ldi	r22, 0x00	; 0
    12a0:	89 e0       	ldi	r24, 0x09	; 9
    12a2:	94 e0       	ldi	r25, 0x04	; 4
    12a4:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <_ZN7TwoWire5writeEh>
		Wire.write((uint8_t)0); // all pins output
    12a8:	60 e0       	ldi	r22, 0x00	; 0
    12aa:	89 e0       	ldi	r24, 0x09	; 9
    12ac:	94 e0       	ldi	r25, 0x04	; 4
    12ae:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    12b2:	89 e0       	ldi	r24, 0x09	; 9
    12b4:	94 e0       	ldi	r25, 0x04	; 4
    12b6:	0e 94 29 10 	call	0x2052	; 0x2052 <_ZN7TwoWire15endTransmissionEv>
	
		/*
		 * point chip to GPIO
		 */
		Wire.beginTransmission(_addr);
    12ba:	68 a1       	ldd	r22, Y+32	; 0x20
    12bc:	89 e0       	ldi	r24, 0x09	; 9
    12be:	94 e0       	ldi	r25, 0x04	; 4
    12c0:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN7TwoWire17beginTransmissionEh>
		Wire.write(9); // point to GPIO
    12c4:	69 e0       	ldi	r22, 0x09	; 9
    12c6:	70 e0       	ldi	r23, 0x00	; 0
    12c8:	89 e0       	ldi	r24, 0x09	; 9
    12ca:	94 e0       	ldi	r25, 0x04	; 4
    12cc:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN7TwoWire5writeEi>
    12d0:	47 c0       	rjmp	.+142    	; 0x1360 <_ZN14hd44780_I2Cexp6ioinitEv+0x166>

	/*
	 * First try to write 0xff to MCP23008 IODIR
	 * On a PCF8574 this will end up writing 0 and then ff to output port
	 */
	Wire.beginTransmission(address);
    12d2:	61 2f       	mov	r22, r17
    12d4:	89 e0       	ldi	r24, 0x09	; 9
    12d6:	94 e0       	ldi	r25, 0x04	; 4
    12d8:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	89 e0       	ldi	r24, 0x09	; 9
    12e0:	94 e0       	ldi	r25, 0x04	; 4
    12e2:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <_ZN7TwoWire5writeEh>
	Wire.write((uint8_t) 0xff);	// try to write to MCP23008 IODR
    12e6:	6f ef       	ldi	r22, 0xFF	; 255
    12e8:	89 e0       	ldi	r24, 0x09	; 9
    12ea:	94 e0       	ldi	r25, 0x04	; 4
    12ec:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    12f0:	89 e0       	ldi	r24, 0x09	; 9
    12f2:	94 e0       	ldi	r25, 0x04	; 4
    12f4:	0e 94 29 10 	call	0x2052	; 0x2052 <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now try to point MCP23008 to IODIR for read
	 * On a PCF8574 this will end up writing a 0 to the output port
	 */

	Wire.beginTransmission(address);
    12f8:	61 2f       	mov	r22, r17
    12fa:	89 e0       	ldi	r24, 0x09	; 9
    12fc:	94 e0       	ldi	r25, 0x04	; 4
    12fe:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
    1302:	60 e0       	ldi	r22, 0x00	; 0
    1304:	89 e0       	ldi	r24, 0x09	; 9
    1306:	94 e0       	ldi	r25, 0x04	; 4
    1308:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    130c:	89 e0       	ldi	r24, 0x09	; 9
    130e:	94 e0       	ldi	r25, 0x04	; 4
    1310:	0e 94 29 10 	call	0x2052	; 0x2052 <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now read a byte
	 * On a MCP23008 we should read the 0xff we wrote to IODIR
	 * On a PCF8574 we should read 0 since the output port was set to 0
	 */
	Wire.requestFrom((int)address, 1);
    1314:	61 2f       	mov	r22, r17
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	41 e0       	ldi	r20, 0x01	; 1
    131a:	50 e0       	ldi	r21, 0x00	; 0
    131c:	89 e0       	ldi	r24, 0x09	; 9
    131e:	94 e0       	ldi	r25, 0x04	; 4
    1320:	0e 94 26 10 	call	0x204c	; 0x204c <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    1324:	89 e0       	ldi	r24, 0x09	; 9
    1326:	94 e0       	ldi	r25, 0x04	; 4
    1328:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZN7TwoWire4readEv>
    132c:	9c 01       	movw	r18, r24

	if(data == 0xff)
    132e:	8f 3f       	cpi	r24, 0xFF	; 255
    1330:	91 05       	cpc	r25, r1
    1332:	29 f0       	breq	.+10     	; 0x133e <_ZN14hd44780_I2Cexp6ioinitEv+0x144>
	{
		chiptype = I2Cexp_MCP23008;
    1334:	91 e0       	ldi	r25, 0x01	; 1
    1336:	23 2b       	or	r18, r19
    1338:	19 f0       	breq	.+6      	; 0x1340 <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	01 c0       	rjmp	.+2      	; 0x1340 <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    133e:	92 e0       	ldi	r25, 0x02	; 2
	if(!_addr) // if we couldn't locate it, return error
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);
    1340:	99 a3       	std	Y+33, r25	; 0x21

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
    1342:	99 23       	and	r25, r25
    1344:	09 f1       	breq	.+66     	; 0x1388 <_ZN14hd44780_I2Cexp6ioinitEv+0x18e>
			return(hd44780::RV_EIO);

		if(_expType == I2Cexp_PCF8574)
    1346:	91 30       	cpi	r25, 0x01	; 1
    1348:	21 f4       	brne	.+8      	; 0x1352 <_ZN14hd44780_I2Cexp6ioinitEv+0x158>
			status = autocfg8574();		// go auto configure the pin mappings
    134a:	ce 01       	movw	r24, r28
    134c:	0e 94 93 07 	call	0xf26	; 0xf26 <_ZN14hd44780_I2Cexp11autocfg8574Ev>
    1350:	03 c0       	rjmp	.+6      	; 0x1358 <_ZN14hd44780_I2Cexp6ioinitEv+0x15e>
		else
			status = autocfgMCP23008();	// go auto configure the pin mappings
    1352:	ce 01       	movw	r24, r28
    1354:	0e 94 5f 08 	call	0x10be	; 0x10be <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>
		if(status)
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	09 f4       	brne	.+2      	; 0x135e <_ZN14hd44780_I2Cexp6ioinitEv+0x164>
    135c:	82 cf       	rjmp	.-252    	; 0x1262 <_ZN14hd44780_I2Cexp6ioinitEv+0x68>
    135e:	16 c0       	rjmp	.+44     	; 0x138c <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
		 */
		Wire.beginTransmission(_addr);
		Wire.write(9); // point to GPIO
		
	}
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
    1360:	60 e0       	ldi	r22, 0x00	; 0
    1362:	89 e0       	ldi	r24, 0x09	; 9
    1364:	94 e0       	ldi	r25, 0x04	; 4
    1366:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <_ZN7TwoWire5writeEh>
	if( (status = Wire.endTransmission()) ) // assignment
    136a:	89 e0       	ldi	r24, 0x09	; 9
    136c:	94 e0       	ldi	r25, 0x04	; 4
    136e:	0e 94 29 10 	call	0x2052	; 0x2052 <_ZN7TwoWire15endTransmissionEv>
    1372:	21 e0       	ldi	r18, 0x01	; 1
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	81 11       	cpse	r24, r1
    1378:	02 c0       	rjmp	.+4      	; 0x137e <_ZN14hd44780_I2Cexp6ioinitEv+0x184>
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	88 27       	eor	r24, r24
    1380:	99 27       	eor	r25, r25
    1382:	82 1b       	sub	r24, r18
    1384:	93 0b       	sbc	r25, r19
    1386:	02 c0       	rjmp	.+4      	; 0x138c <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
			return(hd44780::RV_EIO);
    1388:	8f ef       	ldi	r24, 0xFF	; 255
    138a:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
	if( (status = Wire.endTransmission()) ) // assignment
		status = hd44780::RV_EIO;

	return ( status );
}
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	1f 91       	pop	r17
    1392:	08 95       	ret

00001394 <_ZN3dht11_readSensorEhhh>:
    if (bits[4] != sum)
    {
        return DHTLIB_ERROR_CHECKSUM;
    }
    return result;
}
    1394:	2f 92       	push	r2
    1396:	3f 92       	push	r3
    1398:	4f 92       	push	r4
    139a:	5f 92       	push	r5
    139c:	6f 92       	push	r6
    139e:	7f 92       	push	r7
    13a0:	8f 92       	push	r8
    13a2:	9f 92       	push	r9
    13a4:	af 92       	push	r10
    13a6:	bf 92       	push	r11
    13a8:	cf 92       	push	r12
    13aa:	df 92       	push	r13
    13ac:	ef 92       	push	r14
    13ae:	ff 92       	push	r15
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	ec 01       	movw	r28, r24
    13ba:	f6 2e       	mov	r15, r22
    13bc:	04 2f       	mov	r16, r20
    13be:	e2 2e       	mov	r14, r18
    13c0:	86 2f       	mov	r24, r22
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	fc 01       	movw	r30, r24
    13c6:	e8 5d       	subi	r30, 0xD8	; 216
    13c8:	fe 4f       	sbci	r31, 0xFE	; 254
    13ca:	14 91       	lpm	r17, Z
    13cc:	fc 01       	movw	r30, r24
    13ce:	e9 5b       	subi	r30, 0xB9	; 185
    13d0:	fe 4f       	sbci	r31, 0xFE	; 254
    13d2:	e4 91       	lpm	r30, Z
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	ee 0f       	add	r30, r30
    13d8:	ff 1f       	adc	r31, r31
    13da:	ea 59       	subi	r30, 0x9A	; 154
    13dc:	fe 4f       	sbci	r31, 0xFE	; 254
    13de:	c5 90       	lpm	r12, Z+
    13e0:	d4 90       	lpm	r13, Z
    13e2:	61 e0       	ldi	r22, 0x01	; 1
    13e4:	8f 2d       	mov	r24, r15
    13e6:	0e 94 74 19 	call	0x32e8	; 0x32e8 <pinMode>
    13ea:	60 e0       	ldi	r22, 0x00	; 0
    13ec:	8f 2d       	mov	r24, r15
    13ee:	0e 94 b0 19 	call	0x3360	; 0x3360 <digitalWrite>
    13f2:	09 30       	cpi	r16, 0x09	; 9
    13f4:	38 f0       	brcs	.+14     	; 0x1404 <_ZN3dht11_readSensorEhhh+0x70>
    13f6:	60 2f       	mov	r22, r16
    13f8:	70 e0       	ldi	r23, 0x00	; 0
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	0e 94 69 18 	call	0x30d2	; 0x30d2 <delay>
    1402:	0a c0       	rjmp	.+20     	; 0x1418 <_ZN3dht11_readSensorEhhh+0x84>
    1404:	88 ee       	ldi	r24, 0xE8	; 232
    1406:	93 e0       	ldi	r25, 0x03	; 3
    1408:	9c 01       	movw	r18, r24
    140a:	02 9f       	mul	r16, r18
    140c:	c0 01       	movw	r24, r0
    140e:	03 9f       	mul	r16, r19
    1410:	90 0d       	add	r25, r0
    1412:	11 24       	eor	r1, r1
    1414:	0e 94 a5 18 	call	0x314a	; 0x314a <delayMicroseconds>
    1418:	60 e0       	ldi	r22, 0x00	; 0
    141a:	8f 2d       	mov	r24, r15
    141c:	0e 94 74 19 	call	0x32e8	; 0x32e8 <pinMode>
    1420:	80 e2       	ldi	r24, 0x20	; 32
    1422:	93 e0       	ldi	r25, 0x03	; 3
    1424:	d6 01       	movw	r26, r12
    1426:	2c 91       	ld	r18, X
    1428:	21 23       	and	r18, r17
    142a:	21 f0       	breq	.+8      	; 0x1434 <_ZN3dht11_readSensorEhhh+0xa0>
    142c:	01 97       	sbiw	r24, 0x01	; 1
    142e:	d1 f7       	brne	.-12     	; 0x1424 <_ZN3dht11_readSensorEhhh+0x90>
    1430:	8d ef       	ldi	r24, 0xFD	; 253
    1432:	5f c0       	rjmp	.+190    	; 0x14f2 <_ZN3dht11_readSensorEhhh+0x15e>
    1434:	80 e9       	ldi	r24, 0x90	; 144
    1436:	91 e0       	ldi	r25, 0x01	; 1
    1438:	f6 01       	movw	r30, r12
    143a:	20 81       	ld	r18, Z
    143c:	21 23       	and	r18, r17
    143e:	21 f4       	brne	.+8      	; 0x1448 <_ZN3dht11_readSensorEhhh+0xb4>
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	d1 f7       	brne	.-12     	; 0x1438 <_ZN3dht11_readSensorEhhh+0xa4>
    1444:	8c ef       	ldi	r24, 0xFC	; 252
    1446:	55 c0       	rjmp	.+170    	; 0x14f2 <_ZN3dht11_readSensorEhhh+0x15e>
    1448:	80 e9       	ldi	r24, 0x90	; 144
    144a:	91 e0       	ldi	r25, 0x01	; 1
    144c:	d6 01       	movw	r26, r12
    144e:	2c 91       	ld	r18, X
    1450:	21 23       	and	r18, r17
    1452:	21 f0       	breq	.+8      	; 0x145c <_ZN3dht11_readSensorEhhh+0xc8>
    1454:	01 97       	sbiw	r24, 0x01	; 1
    1456:	d1 f7       	brne	.-12     	; 0x144c <_ZN3dht11_readSensorEhhh+0xb8>
    1458:	8b ef       	ldi	r24, 0xFB	; 251
    145a:	4b c0       	rjmp	.+150    	; 0x14f2 <_ZN3dht11_readSensorEhhh+0x15e>
    145c:	58 e2       	ldi	r21, 0x28	; 40
    145e:	80 e9       	ldi	r24, 0x90	; 144
    1460:	91 e0       	ldi	r25, 0x01	; 1
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	e0 e9       	ldi	r30, 0x90	; 144
    1468:	f1 e0       	ldi	r31, 0x01	; 1
    146a:	00 e0       	ldi	r16, 0x00	; 0
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	31 2c       	mov	r3, r1
    1470:	40 e8       	ldi	r20, 0x80	; 128
    1472:	25 2e       	mov	r2, r21
    1474:	2e 18       	sub	r2, r14
    1476:	70 e9       	ldi	r23, 0x90	; 144
    1478:	87 2e       	mov	r8, r23
    147a:	99 24       	eor	r9, r9
    147c:	93 94       	inc	r9
    147e:	a1 2c       	mov	r10, r1
    1480:	b1 2c       	mov	r11, r1
    1482:	d6 01       	movw	r26, r12
    1484:	7c 91       	ld	r23, X
    1486:	71 23       	and	r23, r17
    1488:	61 f5       	brne	.+88     	; 0x14e2 <_ZN3dht11_readSensorEhhh+0x14e>
    148a:	00 23       	and	r16, r16
    148c:	51 f1       	breq	.+84     	; 0x14e2 <_ZN3dht11_readSensorEhhh+0x14e>
    148e:	25 16       	cp	r2, r21
    1490:	98 f4       	brcc	.+38     	; 0x14b8 <_ZN3dht11_readSensorEhhh+0x124>
    1492:	8e 17       	cp	r24, r30
    1494:	9f 07       	cpc	r25, r31
    1496:	08 f4       	brcc	.+2      	; 0x149a <_ZN3dht11_readSensorEhhh+0x106>
    1498:	fc 01       	movw	r30, r24
    149a:	24 01       	movw	r4, r8
    149c:	35 01       	movw	r6, r10
    149e:	4e 1a       	sub	r4, r30
    14a0:	5f 0a       	sbc	r5, r31
    14a2:	61 08       	sbc	r6, r1
    14a4:	71 08       	sbc	r7, r1
    14a6:	82 e0       	ldi	r24, 0x02	; 2
    14a8:	75 94       	asr	r7
    14aa:	67 94       	ror	r6
    14ac:	57 94       	ror	r5
    14ae:	47 94       	ror	r4
    14b0:	8a 95       	dec	r24
    14b2:	d1 f7       	brne	.-12     	; 0x14a8 <_ZN3dht11_readSensorEhhh+0x114>
    14b4:	92 01       	movw	r18, r4
    14b6:	07 c0       	rjmp	.+14     	; 0x14c6 <_ZN3dht11_readSensorEhhh+0x132>
    14b8:	7f 01       	movw	r14, r30
    14ba:	e2 1a       	sub	r14, r18
    14bc:	f3 0a       	sbc	r15, r19
    14be:	e8 16       	cp	r14, r24
    14c0:	f9 06       	cpc	r15, r25
    14c2:	08 f0       	brcs	.+2      	; 0x14c6 <_ZN3dht11_readSensorEhhh+0x132>
    14c4:	64 2b       	or	r22, r20
    14c6:	46 95       	lsr	r20
    14c8:	49 f4       	brne	.+18     	; 0x14dc <_ZN3dht11_readSensorEhhh+0x148>
    14ca:	ce 01       	movw	r24, r28
    14cc:	83 0d       	add	r24, r3
    14ce:	91 1d       	adc	r25, r1
    14d0:	dc 01       	movw	r26, r24
    14d2:	18 96       	adiw	r26, 0x08	; 8
    14d4:	6c 93       	st	X, r22
    14d6:	33 94       	inc	r3
    14d8:	60 e0       	ldi	r22, 0x00	; 0
    14da:	40 e8       	ldi	r20, 0x80	; 128
    14dc:	51 50       	subi	r21, 0x01	; 1
    14de:	80 e9       	ldi	r24, 0x90	; 144
    14e0:	91 e0       	ldi	r25, 0x01	; 1
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	29 f0       	breq	.+10     	; 0x14f0 <_ZN3dht11_readSensorEhhh+0x15c>
    14e6:	07 2f       	mov	r16, r23
    14e8:	51 11       	cpse	r21, r1
    14ea:	cb cf       	rjmp	.-106    	; 0x1482 <_ZN3dht11_readSensorEhhh+0xee>
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	01 c0       	rjmp	.+2      	; 0x14f2 <_ZN3dht11_readSensorEhhh+0x15e>
    14f0:	8e ef       	ldi	r24, 0xFE	; 254
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	1f 91       	pop	r17
    14f8:	0f 91       	pop	r16
    14fa:	ff 90       	pop	r15
    14fc:	ef 90       	pop	r14
    14fe:	df 90       	pop	r13
    1500:	cf 90       	pop	r12
    1502:	bf 90       	pop	r11
    1504:	af 90       	pop	r10
    1506:	9f 90       	pop	r9
    1508:	8f 90       	pop	r8
    150a:	7f 90       	pop	r7
    150c:	6f 90       	pop	r6
    150e:	5f 90       	pop	r5
    1510:	4f 90       	pop	r4
    1512:	3f 90       	pop	r3
    1514:	2f 90       	pop	r2
    1516:	08 95       	ret

00001518 <_ZN3dht4readEh>:

int8_t dht::read(uint8_t pin)
{
    1518:	cf 92       	push	r12
    151a:	df 92       	push	r13
    151c:	ef 92       	push	r14
    151e:	ff 92       	push	r15
    1520:	0f 93       	push	r16
    1522:	1f 93       	push	r17
    1524:	cf 93       	push	r28
    1526:	df 93       	push	r29
    1528:	ec 01       	movw	r28, r24
    // READ VALUES
    if (_disableIRQ) noInterrupts();
    152a:	8d 85       	ldd	r24, Y+13	; 0x0d
    152c:	88 23       	and	r24, r24
    152e:	09 f0       	breq	.+2      	; 0x1532 <_ZN3dht4readEh+0x1a>
    1530:	f8 94       	cli
    int8_t result = _readSensor(pin, DHTLIB_DHT_WAKEUP, DHTLIB_DHT_LEADING_ZEROS);
    1532:	26 e0       	ldi	r18, 0x06	; 6
    1534:	41 e0       	ldi	r20, 0x01	; 1
    1536:	ce 01       	movw	r24, r28
    1538:	0e 94 ca 09 	call	0x1394	; 0x1394 <_ZN3dht11_readSensorEhhh>
    153c:	e8 2e       	mov	r14, r24
    if (_disableIRQ) interrupts();
    153e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1540:	88 23       	and	r24, r24
    1542:	09 f0       	breq	.+2      	; 0x1546 <_ZN3dht4readEh+0x2e>
    1544:	78 94       	sei

    // these bits are always zero, masking them reduces errors.
    bits[0] &= 0x03;
    1546:	08 85       	ldd	r16, Y+8	; 0x08
    1548:	03 70       	andi	r16, 0x03	; 3
    154a:	08 87       	std	Y+8, r16	; 0x08
    bits[2] &= 0x83;
    154c:	1a 85       	ldd	r17, Y+10	; 0x0a
    154e:	81 2f       	mov	r24, r17
    1550:	83 78       	andi	r24, 0x83	; 131
    1552:	f8 2e       	mov	r15, r24
    1554:	8a 87       	std	Y+10, r24	; 0x0a

    // CONVERT AND STORE
    humidity = (bits[0]*256 + bits[1]) * 0.1;
    1556:	c9 84       	ldd	r12, Y+9	; 0x09
    1558:	60 2f       	mov	r22, r16
    155a:	70 e0       	ldi	r23, 0x00	; 0
    155c:	76 2f       	mov	r23, r22
    155e:	66 27       	eor	r22, r22
    1560:	6c 0d       	add	r22, r12
    1562:	71 1d       	adc	r23, r1
    1564:	07 2e       	mov	r0, r23
    1566:	00 0c       	add	r0, r0
    1568:	88 0b       	sbc	r24, r24
    156a:	99 0b       	sbc	r25, r25
    156c:	0e 94 a4 10 	call	0x2148	; 0x2148 <__floatsisf>
    1570:	2d ec       	ldi	r18, 0xCD	; 205
    1572:	3c ec       	ldi	r19, 0xCC	; 204
    1574:	4c ec       	ldi	r20, 0xCC	; 204
    1576:	5d e3       	ldi	r21, 0x3D	; 61
    1578:	0e 94 54 11 	call	0x22a8	; 0x22a8 <__mulsf3>
    157c:	68 83       	st	Y, r22
    157e:	79 83       	std	Y+1, r23	; 0x01
    1580:	8a 83       	std	Y+2, r24	; 0x02
    1582:	9b 83       	std	Y+3, r25	; 0x03
    temperature = ((bits[2] & 0x7F)*256 + bits[3]) * 0.1;
    1584:	db 84       	ldd	r13, Y+11	; 0x0b
    1586:	13 70       	andi	r17, 0x03	; 3
    1588:	61 2f       	mov	r22, r17
    158a:	70 e0       	ldi	r23, 0x00	; 0
    158c:	76 2f       	mov	r23, r22
    158e:	66 27       	eor	r22, r22
    1590:	6d 0d       	add	r22, r13
    1592:	71 1d       	adc	r23, r1
    1594:	07 2e       	mov	r0, r23
    1596:	00 0c       	add	r0, r0
    1598:	88 0b       	sbc	r24, r24
    159a:	99 0b       	sbc	r25, r25
    159c:	0e 94 a4 10 	call	0x2148	; 0x2148 <__floatsisf>
    15a0:	2d ec       	ldi	r18, 0xCD	; 205
    15a2:	3c ec       	ldi	r19, 0xCC	; 204
    15a4:	4c ec       	ldi	r20, 0xCC	; 204
    15a6:	5d e3       	ldi	r21, 0x3D	; 61
    15a8:	0e 94 54 11 	call	0x22a8	; 0x22a8 <__mulsf3>
    if (bits[2] & 0x80)  // negative temperature
    15ac:	f7 fc       	sbrc	r15, 7
    15ae:	05 c0       	rjmp	.+10     	; 0x15ba <_ZN3dht4readEh+0xa2>
    bits[0] &= 0x03;
    bits[2] &= 0x83;

    // CONVERT AND STORE
    humidity = (bits[0]*256 + bits[1]) * 0.1;
    temperature = ((bits[2] & 0x7F)*256 + bits[3]) * 0.1;
    15b0:	6c 83       	std	Y+4, r22	; 0x04
    15b2:	7d 83       	std	Y+5, r23	; 0x05
    15b4:	8e 83       	std	Y+6, r24	; 0x06
    15b6:	9f 83       	std	Y+7, r25	; 0x07
    15b8:	07 c0       	rjmp	.+14     	; 0x15c8 <_ZN3dht4readEh+0xb0>
    if (bits[2] & 0x80)  // negative temperature
    {
        temperature = -temperature;
    15ba:	dc 01       	movw	r26, r24
    15bc:	cb 01       	movw	r24, r22
    15be:	b0 58       	subi	r27, 0x80	; 128
    15c0:	8c 83       	std	Y+4, r24	; 0x04
    15c2:	9d 83       	std	Y+5, r25	; 0x05
    15c4:	ae 83       	std	Y+6, r26	; 0x06
    15c6:	bf 83       	std	Y+7, r27	; 0x07
    }

    // TEST CHECKSUM
    uint8_t sum = bits[0] + bits[1] + bits[2] + bits[3];
    if (bits[4] != sum)
    15c8:	dc 0c       	add	r13, r12
    15ca:	0d 0d       	add	r16, r13
    15cc:	f0 0e       	add	r15, r16
    15ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    15d0:	f8 12       	cpse	r15, r24
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <_ZN3dht4readEh+0xc0>
    {
        return DHTLIB_ERROR_CHECKSUM;
    }
    return result;
    15d4:	8e 2d       	mov	r24, r14
    15d6:	01 c0       	rjmp	.+2      	; 0x15da <_ZN3dht4readEh+0xc2>

    // TEST CHECKSUM
    uint8_t sum = bits[0] + bits[1] + bits[2] + bits[3];
    if (bits[4] != sum)
    {
        return DHTLIB_ERROR_CHECKSUM;
    15d8:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return result;
}
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	1f 91       	pop	r17
    15e0:	0f 91       	pop	r16
    15e2:	ff 90       	pop	r15
    15e4:	ef 90       	pop	r14
    15e6:	df 90       	pop	r13
    15e8:	cf 90       	pop	r12
    15ea:	08 95       	ret

000015ec <_ZN7hd447806ioinitEv>:
	{
		buf[i] = pgm_read_byte(charmap++);
	}
	// call the RAM based function to actually send it to the LCD
	return(createChar(location, buf));
}
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	08 95       	ret

000015f2 <_ZN7hd447806ioreadENS_6iotypeE>:
    15f2:	8d ef       	ldi	r24, 0xFD	; 253
    15f4:	9f ef       	ldi	r25, 0xFF	; 255
    15f6:	08 95       	ret

000015f8 <_ZN7hd4478014iosetBacklightEh>:
    15f8:	8d ef       	ldi	r24, 0xFD	; 253
    15fa:	9f ef       	ldi	r25, 0xFF	; 255
    15fc:	08 95       	ret

000015fe <_ZN7hd44780C1Ev>:
    15fe:	cf 93       	push	r28
    1600:	df 93       	push	r29
    1602:	ec 01       	movw	r28, r24
    1604:	1b 82       	std	Y+3, r1	; 0x03
    1606:	1a 82       	std	Y+2, r1	; 0x02
    1608:	84 e2       	ldi	r24, 0x24	; 36
    160a:	92 e0       	ldi	r25, 0x02	; 2
    160c:	99 83       	std	Y+1, r25	; 0x01
    160e:	88 83       	st	Y, r24
    1610:	1f 82       	std	Y+7, r1	; 0x07
    1612:	18 86       	std	Y+8, r1	; 0x08
    1614:	80 ed       	ldi	r24, 0xD0	; 208
    1616:	97 e0       	ldi	r25, 0x07	; 7
    1618:	a0 e0       	ldi	r26, 0x00	; 0
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	88 8b       	std	Y+16, r24	; 0x10
    161e:	99 8b       	std	Y+17, r25	; 0x11
    1620:	aa 8b       	std	Y+18, r26	; 0x12
    1622:	bb 8b       	std	Y+19, r27	; 0x13
    1624:	86 e2       	ldi	r24, 0x26	; 38
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	a0 e0       	ldi	r26, 0x00	; 0
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	8c 8b       	std	Y+20, r24	; 0x14
    162e:	9d 8b       	std	Y+21, r25	; 0x15
    1630:	ae 8b       	std	Y+22, r26	; 0x16
    1632:	bf 8b       	std	Y+23, r27	; 0x17
    1634:	1c 86       	std	Y+12, r1	; 0x0c
    1636:	1d 86       	std	Y+13, r1	; 0x0d
    1638:	1e 86       	std	Y+14, r1	; 0x0e
    163a:	1f 86       	std	Y+15, r1	; 0x0f
    163c:	1b 86       	std	Y+11, r1	; 0x0b
    163e:	0e 94 44 18 	call	0x3088	; 0x3088 <micros>
    1642:	68 8f       	std	Y+24, r22	; 0x18
    1644:	79 8f       	std	Y+25, r23	; 0x19
    1646:	8a 8f       	std	Y+26, r24	; 0x1a
    1648:	9b 8f       	std	Y+27, r25	; 0x1b
    164a:	1c 8e       	std	Y+28, r1	; 0x1c
    164c:	1d 8e       	std	Y+29, r1	; 0x1d
    164e:	1e 8e       	std	Y+30, r1	; 0x1e
    1650:	1f 8e       	std	Y+31, r1	; 0x1f
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	08 95       	ret

00001658 <_ZN7hd447809backlightEv>:
    1658:	dc 01       	movw	r26, r24
    165a:	ed 91       	ld	r30, X+
    165c:	fc 91       	ld	r31, X
    165e:	06 84       	ldd	r0, Z+14	; 0x0e
    1660:	f7 85       	ldd	r31, Z+15	; 0x0f
    1662:	e0 2d       	mov	r30, r0
    1664:	6f ef       	ldi	r22, 0xFF	; 255
    1666:	09 94       	ijmp

00001668 <_ZN7hd4478011noBacklightEv>:
    1668:	dc 01       	movw	r26, r24
    166a:	ed 91       	ld	r30, X+
    166c:	fc 91       	ld	r31, X
    166e:	06 84       	ldd	r0, Z+14	; 0x0e
    1670:	f7 85       	ldd	r31, Z+15	; 0x0f
    1672:	e0 2d       	mov	r30, r0
    1674:	60 e0       	ldi	r22, 0x00	; 0
    1676:	09 94       	ijmp

00001678 <_ZN7hd447807commandEh>:
    1678:	8f 92       	push	r8
    167a:	9f 92       	push	r9
    167c:	af 92       	push	r10
    167e:	bf 92       	push	r11
    1680:	ef 92       	push	r14
    1682:	ff 92       	push	r15
    1684:	1f 93       	push	r17
    1686:	cf 93       	push	r28
    1688:	df 93       	push	r29
    168a:	ec 01       	movw	r28, r24
    168c:	16 2f       	mov	r17, r22
    168e:	e8 81       	ld	r30, Y
    1690:	f9 81       	ldd	r31, Y+1	; 0x01
    1692:	04 84       	ldd	r0, Z+12	; 0x0c
    1694:	f5 85       	ldd	r31, Z+13	; 0x0d
    1696:	e0 2d       	mov	r30, r0
    1698:	46 2f       	mov	r20, r22
    169a:	60 e0       	ldi	r22, 0x00	; 0
    169c:	09 95       	icall
    169e:	7c 01       	movw	r14, r24
    16a0:	11 50       	subi	r17, 0x01	; 1
    16a2:	12 30       	cpi	r17, 0x02	; 2
    16a4:	38 f4       	brcc	.+14     	; 0x16b4 <_ZN7hd447807commandEh+0x3c>
    16a6:	19 86       	std	Y+9, r1	; 0x09
    16a8:	1a 86       	std	Y+10, r1	; 0x0a
    16aa:	88 88       	ldd	r8, Y+16	; 0x10
    16ac:	99 88       	ldd	r9, Y+17	; 0x11
    16ae:	aa 88       	ldd	r10, Y+18	; 0x12
    16b0:	bb 88       	ldd	r11, Y+19	; 0x13
    16b2:	04 c0       	rjmp	.+8      	; 0x16bc <_ZN7hd447807commandEh+0x44>
    16b4:	8c 88       	ldd	r8, Y+20	; 0x14
    16b6:	9d 88       	ldd	r9, Y+21	; 0x15
    16b8:	ae 88       	ldd	r10, Y+22	; 0x16
    16ba:	bf 88       	ldd	r11, Y+23	; 0x17
    16bc:	0e 94 44 18 	call	0x3088	; 0x3088 <micros>
    16c0:	68 8f       	std	Y+24, r22	; 0x18
    16c2:	79 8f       	std	Y+25, r23	; 0x19
    16c4:	8a 8f       	std	Y+26, r24	; 0x1a
    16c6:	9b 8f       	std	Y+27, r25	; 0x1b
    16c8:	8c 8e       	std	Y+28, r8	; 0x1c
    16ca:	9d 8e       	std	Y+29, r9	; 0x1d
    16cc:	ae 8e       	std	Y+30, r10	; 0x1e
    16ce:	bf 8e       	std	Y+31, r11	; 0x1f
    16d0:	c7 01       	movw	r24, r14
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	1f 91       	pop	r17
    16d8:	ff 90       	pop	r15
    16da:	ef 90       	pop	r14
    16dc:	bf 90       	pop	r11
    16de:	af 90       	pop	r10
    16e0:	9f 90       	pop	r9
    16e2:	8f 90       	pop	r8
    16e4:	08 95       	ret

000016e6 <_ZN7hd447805clearEv>:
    16e6:	61 e0       	ldi	r22, 0x01	; 1
    16e8:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <_ZN7hd447807commandEh>

000016ec <_ZN7hd447804homeEv>:
    16ec:	62 e0       	ldi	r22, 0x02	; 2
    16ee:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <_ZN7hd447807commandEh>

000016f2 <_ZN7hd447809setCursorEhh>:
    16f2:	fc 01       	movw	r30, r24
    16f4:	80 85       	ldd	r24, Z+8	; 0x08
    16f6:	48 17       	cp	r20, r24
    16f8:	10 f0       	brcs	.+4      	; 0x16fe <_ZN7hd447809setCursorEhh+0xc>
    16fa:	4f ef       	ldi	r20, 0xFF	; 255
    16fc:	48 0f       	add	r20, r24
    16fe:	93 85       	ldd	r25, Z+11	; 0x0b
    1700:	99 23       	and	r25, r25
    1702:	59 f0       	breq	.+22     	; 0x171a <_ZN7hd447809setCursorEhh+0x28>
    1704:	97 81       	ldd	r25, Z+7	; 0x07
    1706:	69 17       	cp	r22, r25
    1708:	30 f0       	brcs	.+12     	; 0x1716 <_ZN7hd447809setCursorEhh+0x24>
    170a:	69 1b       	sub	r22, r25
    170c:	4f 5f       	subi	r20, 0xFF	; 255
    170e:	48 17       	cp	r20, r24
    1710:	d0 f3       	brcs	.-12     	; 0x1706 <_ZN7hd447809setCursorEhh+0x14>
    1712:	40 e0       	ldi	r20, 0x00	; 0
    1714:	f8 cf       	rjmp	.-16     	; 0x1706 <_ZN7hd447809setCursorEhh+0x14>
    1716:	61 87       	std	Z+9, r22	; 0x09
    1718:	42 87       	std	Z+10, r20	; 0x0a
    171a:	df 01       	movw	r26, r30
    171c:	a4 0f       	add	r26, r20
    171e:	b1 1d       	adc	r27, r1
    1720:	1c 96       	adiw	r26, 0x0c	; 12
    1722:	8c 91       	ld	r24, X
    1724:	68 0f       	add	r22, r24
    1726:	60 68       	ori	r22, 0x80	; 128
    1728:	cf 01       	movw	r24, r30
    172a:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <_ZN7hd447807commandEh>

0000172e <_ZN7hd447807displayEv>:
    172e:	fc 01       	movw	r30, r24
    1730:	65 81       	ldd	r22, Z+5	; 0x05
    1732:	26 2f       	mov	r18, r22
    1734:	24 60       	ori	r18, 0x04	; 4
    1736:	25 83       	std	Z+5, r18	; 0x05
    1738:	6c 60       	ori	r22, 0x0C	; 12
    173a:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <_ZN7hd447807commandEh>

0000173e <_ZN7hd447805beginEhhh>:
    173e:	0f 93       	push	r16
    1740:	1f 93       	push	r17
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
    1746:	ec 01       	movw	r28, r24
    1748:	02 2f       	mov	r16, r18
    174a:	14 2f       	mov	r17, r20
    174c:	45 30       	cpi	r20, 0x05	; 5
    174e:	08 f0       	brcs	.+2      	; 0x1752 <_ZN7hd447805beginEhhh+0x14>
    1750:	14 e0       	ldi	r17, 0x04	; 4
    1752:	8c 85       	ldd	r24, Y+12	; 0x0c
    1754:	81 11       	cpse	r24, r1
    1756:	09 c0       	rjmp	.+18     	; 0x176a <_ZN7hd447805beginEhhh+0x2c>
    1758:	8d 85       	ldd	r24, Y+13	; 0x0d
    175a:	81 11       	cpse	r24, r1
    175c:	06 c0       	rjmp	.+12     	; 0x176a <_ZN7hd447805beginEhhh+0x2c>
    175e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1760:	81 11       	cpse	r24, r1
    1762:	03 c0       	rjmp	.+6      	; 0x176a <_ZN7hd447805beginEhhh+0x2c>
    1764:	8f 85       	ldd	r24, Y+15	; 0x0f
    1766:	88 23       	and	r24, r24
    1768:	29 f0       	breq	.+10     	; 0x1774 <_ZN7hd447805beginEhhh+0x36>
    176a:	8f 81       	ldd	r24, Y+7	; 0x07
    176c:	88 23       	and	r24, r24
    176e:	59 f0       	breq	.+22     	; 0x1786 <_ZN7hd447805beginEhhh+0x48>
    1770:	86 17       	cp	r24, r22
    1772:	49 f0       	breq	.+18     	; 0x1786 <_ZN7hd447805beginEhhh+0x48>
    1774:	1c 86       	std	Y+12, r1	; 0x0c
    1776:	80 e4       	ldi	r24, 0x40	; 64
    1778:	8d 87       	std	Y+13, r24	; 0x0d
    177a:	6e 87       	std	Y+14, r22	; 0x0e
    177c:	86 2f       	mov	r24, r22
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	80 5c       	subi	r24, 0xC0	; 192
    1782:	9f 4f       	sbci	r25, 0xFF	; 255
    1784:	8f 87       	std	Y+15, r24	; 0x0f
    1786:	18 87       	std	Y+8, r17	; 0x08
    1788:	6f 83       	std	Y+7, r22	; 0x07
    178a:	64 e6       	ldi	r22, 0x64	; 100
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	0e 94 69 18 	call	0x30d2	; 0x30d2 <delay>
    1796:	1c 82       	std	Y+4, r1	; 0x04
    1798:	e8 81       	ld	r30, Y
    179a:	f9 81       	ldd	r31, Y+1	; 0x01
    179c:	00 84       	ldd	r0, Z+8	; 0x08
    179e:	f1 85       	ldd	r31, Z+9	; 0x09
    17a0:	e0 2d       	mov	r30, r0
    17a2:	ce 01       	movw	r24, r28
    17a4:	09 95       	icall
    17a6:	00 97       	sbiw	r24, 0x00	; 0
    17a8:	09 f0       	breq	.+2      	; 0x17ac <_ZN7hd447805beginEhhh+0x6e>
    17aa:	5e c0       	rjmp	.+188    	; 0x1868 <_ZN7hd447805beginEhhh+0x12a>
    17ac:	88 85       	ldd	r24, Y+8	; 0x08
    17ae:	82 30       	cpi	r24, 0x02	; 2
    17b0:	18 f0       	brcs	.+6      	; 0x17b8 <_ZN7hd447805beginEhhh+0x7a>
    17b2:	8c 81       	ldd	r24, Y+4	; 0x04
    17b4:	88 60       	ori	r24, 0x08	; 8
    17b6:	8c 83       	std	Y+4, r24	; 0x04
    17b8:	00 23       	and	r16, r16
    17ba:	29 f0       	breq	.+10     	; 0x17c6 <_ZN7hd447805beginEhhh+0x88>
    17bc:	11 30       	cpi	r17, 0x01	; 1
    17be:	19 f4       	brne	.+6      	; 0x17c6 <_ZN7hd447805beginEhhh+0x88>
    17c0:	8c 81       	ldd	r24, Y+4	; 0x04
    17c2:	84 60       	ori	r24, 0x04	; 4
    17c4:	8c 83       	std	Y+4, r24	; 0x04
    17c6:	e8 81       	ld	r30, Y
    17c8:	f9 81       	ldd	r31, Y+1	; 0x01
    17ca:	04 84       	ldd	r0, Z+12	; 0x0c
    17cc:	f5 85       	ldd	r31, Z+13	; 0x0d
    17ce:	e0 2d       	mov	r30, r0
    17d0:	40 e3       	ldi	r20, 0x30	; 48
    17d2:	62 e0       	ldi	r22, 0x02	; 2
    17d4:	ce 01       	movw	r24, r28
    17d6:	09 95       	icall
    17d8:	65 e0       	ldi	r22, 0x05	; 5
    17da:	70 e0       	ldi	r23, 0x00	; 0
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	0e 94 69 18 	call	0x30d2	; 0x30d2 <delay>
    17e4:	e8 81       	ld	r30, Y
    17e6:	f9 81       	ldd	r31, Y+1	; 0x01
    17e8:	04 84       	ldd	r0, Z+12	; 0x0c
    17ea:	f5 85       	ldd	r31, Z+13	; 0x0d
    17ec:	e0 2d       	mov	r30, r0
    17ee:	40 e3       	ldi	r20, 0x30	; 48
    17f0:	62 e0       	ldi	r22, 0x02	; 2
    17f2:	ce 01       	movw	r24, r28
    17f4:	09 95       	icall
    17f6:	61 e0       	ldi	r22, 0x01	; 1
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	0e 94 69 18 	call	0x30d2	; 0x30d2 <delay>
    1802:	e8 81       	ld	r30, Y
    1804:	f9 81       	ldd	r31, Y+1	; 0x01
    1806:	04 84       	ldd	r0, Z+12	; 0x0c
    1808:	f5 85       	ldd	r31, Z+13	; 0x0d
    180a:	e0 2d       	mov	r30, r0
    180c:	40 e3       	ldi	r20, 0x30	; 48
    180e:	62 e0       	ldi	r22, 0x02	; 2
    1810:	ce 01       	movw	r24, r28
    1812:	09 95       	icall
    1814:	61 e0       	ldi	r22, 0x01	; 1
    1816:	70 e0       	ldi	r23, 0x00	; 0
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	0e 94 69 18 	call	0x30d2	; 0x30d2 <delay>
    1820:	8c 81       	ldd	r24, Y+4	; 0x04
    1822:	84 fd       	sbrc	r24, 4
    1824:	09 c0       	rjmp	.+18     	; 0x1838 <_ZN7hd447805beginEhhh+0xfa>
    1826:	e8 81       	ld	r30, Y
    1828:	f9 81       	ldd	r31, Y+1	; 0x01
    182a:	04 84       	ldd	r0, Z+12	; 0x0c
    182c:	f5 85       	ldd	r31, Z+13	; 0x0d
    182e:	e0 2d       	mov	r30, r0
    1830:	40 e2       	ldi	r20, 0x20	; 32
    1832:	62 e0       	ldi	r22, 0x02	; 2
    1834:	ce 01       	movw	r24, r28
    1836:	09 95       	icall
    1838:	6c 81       	ldd	r22, Y+4	; 0x04
    183a:	60 62       	ori	r22, 0x20	; 32
    183c:	ce 01       	movw	r24, r28
    183e:	0e 94 3c 0b 	call	0x1678	; 0x1678 <_ZN7hd447807commandEh>
    1842:	84 e0       	ldi	r24, 0x04	; 4
    1844:	8d 83       	std	Y+5, r24	; 0x05
    1846:	ce 01       	movw	r24, r28
    1848:	0e 94 97 0b 	call	0x172e	; 0x172e <_ZN7hd447807displayEv>
    184c:	ce 01       	movw	r24, r28
    184e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <_ZN7hd447805clearEv>
    1852:	82 e0       	ldi	r24, 0x02	; 2
    1854:	8e 83       	std	Y+6, r24	; 0x06
    1856:	66 e0       	ldi	r22, 0x06	; 6
    1858:	ce 01       	movw	r24, r28
    185a:	0e 94 3c 0b 	call	0x1678	; 0x1678 <_ZN7hd447807commandEh>
    185e:	8c 01       	movw	r16, r24
    1860:	ce 01       	movw	r24, r28
    1862:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_ZN7hd447809backlightEv>
    1866:	c8 01       	movw	r24, r16
    1868:	df 91       	pop	r29
    186a:	cf 91       	pop	r28
    186c:	1f 91       	pop	r17
    186e:	0f 91       	pop	r16
    1870:	08 95       	ret

00001872 <_ZN7hd447808noCursorEv>:
    1872:	fc 01       	movw	r30, r24
    1874:	65 81       	ldd	r22, Z+5	; 0x05
    1876:	6d 7f       	andi	r22, 0xFD	; 253
    1878:	65 83       	std	Z+5, r22	; 0x05
    187a:	68 60       	ori	r22, 0x08	; 8
    187c:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <_ZN7hd447807commandEh>

00001880 <_ZN7hd447807noBlinkEv>:
    1880:	fc 01       	movw	r30, r24
    1882:	65 81       	ldd	r22, Z+5	; 0x05
    1884:	6e 7f       	andi	r22, 0xFE	; 254
    1886:	65 83       	std	Z+5, r22	; 0x05
    1888:	68 60       	ori	r22, 0x08	; 8
    188a:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <_ZN7hd447807commandEh>

0000188e <_ZN7hd447806_writeEh>:
    188e:	cf 92       	push	r12
    1890:	df 92       	push	r13
    1892:	ef 92       	push	r14
    1894:	ff 92       	push	r15
    1896:	0f 93       	push	r16
    1898:	1f 93       	push	r17
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	ec 01       	movw	r28, r24
    18a0:	46 2f       	mov	r20, r22
    18a2:	e8 81       	ld	r30, Y
    18a4:	f9 81       	ldd	r31, Y+1	; 0x01
    18a6:	04 84       	ldd	r0, Z+12	; 0x0c
    18a8:	f5 85       	ldd	r31, Z+13	; 0x0d
    18aa:	e0 2d       	mov	r30, r0
    18ac:	61 e0       	ldi	r22, 0x01	; 1
    18ae:	09 95       	icall
    18b0:	8c 01       	movw	r16, r24
    18b2:	cc 88       	ldd	r12, Y+20	; 0x14
    18b4:	dd 88       	ldd	r13, Y+21	; 0x15
    18b6:	ee 88       	ldd	r14, Y+22	; 0x16
    18b8:	ff 88       	ldd	r15, Y+23	; 0x17
    18ba:	0e 94 44 18 	call	0x3088	; 0x3088 <micros>
    18be:	68 8f       	std	Y+24, r22	; 0x18
    18c0:	79 8f       	std	Y+25, r23	; 0x19
    18c2:	8a 8f       	std	Y+26, r24	; 0x1a
    18c4:	9b 8f       	std	Y+27, r25	; 0x1b
    18c6:	cc 8e       	std	Y+28, r12	; 0x1c
    18c8:	dd 8e       	std	Y+29, r13	; 0x1d
    18ca:	ee 8e       	std	Y+30, r14	; 0x1e
    18cc:	ff 8e       	std	Y+31, r15	; 0x1f
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	01 2b       	or	r16, r17
    18d4:	11 f0       	breq	.+4      	; 0x18da <_ZN7hd447806_writeEh+0x4c>
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	df 91       	pop	r29
    18dc:	cf 91       	pop	r28
    18de:	1f 91       	pop	r17
    18e0:	0f 91       	pop	r16
    18e2:	ff 90       	pop	r15
    18e4:	ef 90       	pop	r14
    18e6:	df 90       	pop	r13
    18e8:	cf 90       	pop	r12
    18ea:	08 95       	ret

000018ec <_ZN7hd447805writeEh>:

// write() - process data character byte to lcd
// returns number of bytes successfully written to device
// i.e. 1 if success or 0 if no character was processed (error)
size_t hd44780::write(uint8_t value)
{
    18ec:	0f 93       	push	r16
    18ee:	1f 93       	push	r17
    18f0:	cf 93       	push	r28
    18f2:	df 93       	push	r29
    18f4:	ec 01       	movw	r28, r24
size_t rval;

	rval = _write(value);
    18f6:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7hd447806_writeEh>
    18fa:	8c 01       	movw	r16, r24
	if(_wraplines)
    18fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    18fe:	88 23       	and	r24, r24
    1900:	99 f0       	breq	.+38     	; 0x1928 <_ZN7hd447805writeEh+0x3c>
	{
		// currently only works for left to right mode
		if(++_curcol >= _cols)
    1902:	89 85       	ldd	r24, Y+9	; 0x09
    1904:	8f 5f       	subi	r24, 0xFF	; 255
    1906:	89 87       	std	Y+9, r24	; 0x09
    1908:	9f 81       	ldd	r25, Y+7	; 0x07
    190a:	89 17       	cp	r24, r25
    190c:	68 f0       	brcs	.+26     	; 0x1928 <_ZN7hd447805writeEh+0x3c>
		{
			_curcol = 0;
    190e:	19 86       	std	Y+9, r1	; 0x09
			_currow++;
    1910:	8a 85       	ldd	r24, Y+10	; 0x0a
    1912:	8f 5f       	subi	r24, 0xFF	; 255
    1914:	8a 87       	std	Y+10, r24	; 0x0a
			if(_currow >= _rows)
    1916:	98 85       	ldd	r25, Y+8	; 0x08
    1918:	89 17       	cp	r24, r25
    191a:	08 f0       	brcs	.+2      	; 0x191e <_ZN7hd447805writeEh+0x32>
				_currow = 0;
    191c:	1a 86       	std	Y+10, r1	; 0x0a
			setCursor(_curcol, _currow);
    191e:	4a 85       	ldd	r20, Y+10	; 0x0a
    1920:	60 e0       	ldi	r22, 0x00	; 0
    1922:	ce 01       	movw	r24, r28
    1924:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN7hd447809setCursorEhh>
		}
	}
	return (rval);
}
    1928:	c8 01       	movw	r24, r16
    192a:	df 91       	pop	r29
    192c:	cf 91       	pop	r28
    192e:	1f 91       	pop	r17
    1930:	0f 91       	pop	r16
    1932:	08 95       	ret

00001934 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1934:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <twi_state>
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <twi_sendStop>
    193e:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <twi_inRepStart>
    1942:	61 e0       	ldi	r22, 0x01	; 1
    1944:	82 e0       	ldi	r24, 0x02	; 2
    1946:	0e 94 b0 19 	call	0x3360	; 0x3360 <digitalWrite>
    194a:	61 e0       	ldi	r22, 0x01	; 1
    194c:	83 e0       	ldi	r24, 0x03	; 3
    194e:	0e 94 b0 19 	call	0x3360	; 0x3360 <digitalWrite>
    1952:	e9 eb       	ldi	r30, 0xB9	; 185
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	8e 7f       	andi	r24, 0xFE	; 254
    195a:	80 83       	st	Z, r24
    195c:	80 81       	ld	r24, Z
    195e:	8d 7f       	andi	r24, 0xFD	; 253
    1960:	80 83       	st	Z, r24
    1962:	88 e4       	ldi	r24, 0x48	; 72
    1964:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1968:	85 e4       	ldi	r24, 0x45	; 69
    196a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    196e:	08 95       	ret

00001970 <twi_readFrom>:
    1970:	41 32       	cpi	r20, 0x21	; 33
    1972:	08 f0       	brcs	.+2      	; 0x1976 <twi_readFrom+0x6>
    1974:	43 c0       	rjmp	.+134    	; 0x19fc <twi_readFrom+0x8c>
    1976:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <twi_state>
    197a:	91 11       	cpse	r25, r1
    197c:	fc cf       	rjmp	.-8      	; 0x1976 <twi_readFrom+0x6>
    197e:	91 e0       	ldi	r25, 0x01	; 1
    1980:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <twi_state>
    1984:	20 93 06 04 	sts	0x0406, r18	; 0x800406 <twi_sendStop>
    1988:	2f ef       	ldi	r18, 0xFF	; 255
    198a:	20 93 9b 03 	sts	0x039B, r18	; 0x80039b <twi_error>
    198e:	10 92 e0 03 	sts	0x03E0, r1	; 0x8003e0 <twi_masterBufferIndex>
    1992:	24 0f       	add	r18, r20
    1994:	20 93 df 03 	sts	0x03DF, r18	; 0x8003df <twi_masterBufferLength>
    1998:	90 93 07 04 	sts	0x0407, r25	; 0x800407 <twi_slarw>
    199c:	90 91 07 04 	lds	r25, 0x0407	; 0x800407 <twi_slarw>
    19a0:	88 0f       	add	r24, r24
    19a2:	89 2b       	or	r24, r25
    19a4:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <twi_slarw>
    19a8:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <twi_inRepStart>
    19ac:	81 30       	cpi	r24, 0x01	; 1
    19ae:	61 f4       	brne	.+24     	; 0x19c8 <twi_readFrom+0x58>
    19b0:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <twi_inRepStart>
    19b4:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <twi_slarw>
    19b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    19bc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    19c0:	83 fd       	sbrc	r24, 3
    19c2:	f8 cf       	rjmp	.-16     	; 0x19b4 <twi_readFrom+0x44>
    19c4:	85 ec       	ldi	r24, 0xC5	; 197
    19c6:	01 c0       	rjmp	.+2      	; 0x19ca <twi_readFrom+0x5a>
    19c8:	85 ee       	ldi	r24, 0xE5	; 229
    19ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    19ce:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <twi_state>
    19d2:	81 30       	cpi	r24, 0x01	; 1
    19d4:	e1 f3       	breq	.-8      	; 0x19ce <twi_readFrom+0x5e>
    19d6:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <twi_masterBufferIndex>
    19da:	84 17       	cp	r24, r20
    19dc:	10 f4       	brcc	.+4      	; 0x19e2 <twi_readFrom+0x72>
    19de:	40 91 e0 03 	lds	r20, 0x03E0	; 0x8003e0 <twi_masterBufferIndex>
    19e2:	a1 ee       	ldi	r26, 0xE1	; 225
    19e4:	b3 e0       	ldi	r27, 0x03	; 3
    19e6:	96 2f       	mov	r25, r22
    19e8:	fb 01       	movw	r30, r22
    19ea:	8e 2f       	mov	r24, r30
    19ec:	89 1b       	sub	r24, r25
    19ee:	84 17       	cp	r24, r20
    19f0:	18 f4       	brcc	.+6      	; 0x19f8 <twi_readFrom+0x88>
    19f2:	8d 91       	ld	r24, X+
    19f4:	81 93       	st	Z+, r24
    19f6:	f9 cf       	rjmp	.-14     	; 0x19ea <twi_readFrom+0x7a>
    19f8:	84 2f       	mov	r24, r20
    19fa:	08 95       	ret
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	08 95       	ret

00001a00 <twi_writeTo>:
    1a00:	0f 93       	push	r16
    1a02:	41 32       	cpi	r20, 0x21	; 33
    1a04:	08 f0       	brcs	.+2      	; 0x1a08 <twi_writeTo+0x8>
    1a06:	4a c0       	rjmp	.+148    	; 0x1a9c <twi_writeTo+0x9c>
    1a08:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <twi_state>
    1a0c:	91 11       	cpse	r25, r1
    1a0e:	fc cf       	rjmp	.-8      	; 0x1a08 <twi_writeTo+0x8>
    1a10:	32 e0       	ldi	r19, 0x02	; 2
    1a12:	30 93 08 04 	sts	0x0408, r19	; 0x800408 <twi_state>
    1a16:	00 93 06 04 	sts	0x0406, r16	; 0x800406 <twi_sendStop>
    1a1a:	3f ef       	ldi	r19, 0xFF	; 255
    1a1c:	30 93 9b 03 	sts	0x039B, r19	; 0x80039b <twi_error>
    1a20:	10 92 e0 03 	sts	0x03E0, r1	; 0x8003e0 <twi_masterBufferIndex>
    1a24:	40 93 df 03 	sts	0x03DF, r20	; 0x8003df <twi_masterBufferLength>
    1a28:	56 2f       	mov	r21, r22
    1a2a:	a1 ee       	ldi	r26, 0xE1	; 225
    1a2c:	b3 e0       	ldi	r27, 0x03	; 3
    1a2e:	fb 01       	movw	r30, r22
    1a30:	3e 2f       	mov	r19, r30
    1a32:	35 1b       	sub	r19, r21
    1a34:	34 17       	cp	r19, r20
    1a36:	18 f4       	brcc	.+6      	; 0x1a3e <twi_writeTo+0x3e>
    1a38:	31 91       	ld	r19, Z+
    1a3a:	3d 93       	st	X+, r19
    1a3c:	f9 cf       	rjmp	.-14     	; 0x1a30 <twi_writeTo+0x30>
    1a3e:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <twi_slarw>
    1a42:	30 91 07 04 	lds	r19, 0x0407	; 0x800407 <twi_slarw>
    1a46:	88 0f       	add	r24, r24
    1a48:	83 2b       	or	r24, r19
    1a4a:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <twi_slarw>
    1a4e:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <twi_inRepStart>
    1a52:	81 30       	cpi	r24, 0x01	; 1
    1a54:	61 f4       	brne	.+24     	; 0x1a6e <twi_writeTo+0x6e>
    1a56:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <twi_inRepStart>
    1a5a:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <twi_slarw>
    1a5e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1a62:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1a66:	83 fd       	sbrc	r24, 3
    1a68:	f8 cf       	rjmp	.-16     	; 0x1a5a <twi_writeTo+0x5a>
    1a6a:	85 ec       	ldi	r24, 0xC5	; 197
    1a6c:	01 c0       	rjmp	.+2      	; 0x1a70 <twi_writeTo+0x70>
    1a6e:	85 ee       	ldi	r24, 0xE5	; 229
    1a70:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1a74:	22 23       	and	r18, r18
    1a76:	21 f0       	breq	.+8      	; 0x1a80 <twi_writeTo+0x80>
    1a78:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <twi_state>
    1a7c:	82 30       	cpi	r24, 0x02	; 2
    1a7e:	d1 f3       	breq	.-12     	; 0x1a74 <twi_writeTo+0x74>
    1a80:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <twi_error>
    1a84:	8f 3f       	cpi	r24, 0xFF	; 255
    1a86:	79 f0       	breq	.+30     	; 0x1aa6 <twi_writeTo+0xa6>
    1a88:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <twi_error>
    1a8c:	80 32       	cpi	r24, 0x20	; 32
    1a8e:	41 f0       	breq	.+16     	; 0x1aa0 <twi_writeTo+0xa0>
    1a90:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <twi_error>
    1a94:	80 33       	cpi	r24, 0x30	; 48
    1a96:	31 f0       	breq	.+12     	; 0x1aa4 <twi_writeTo+0xa4>
    1a98:	94 e0       	ldi	r25, 0x04	; 4
    1a9a:	05 c0       	rjmp	.+10     	; 0x1aa6 <twi_writeTo+0xa6>
    1a9c:	91 e0       	ldi	r25, 0x01	; 1
    1a9e:	03 c0       	rjmp	.+6      	; 0x1aa6 <twi_writeTo+0xa6>
    1aa0:	92 e0       	ldi	r25, 0x02	; 2
    1aa2:	01 c0       	rjmp	.+2      	; 0x1aa6 <twi_writeTo+0xa6>
    1aa4:	93 e0       	ldi	r25, 0x03	; 3
    1aa6:	89 2f       	mov	r24, r25
    1aa8:	0f 91       	pop	r16
    1aaa:	08 95       	ret

00001aac <twi_transmit>:
    1aac:	40 91 bd 03 	lds	r20, 0x03BD	; 0x8003bd <twi_txBufferLength>
    1ab0:	26 2f       	mov	r18, r22
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	24 0f       	add	r18, r20
    1ab6:	31 1d       	adc	r19, r1
    1ab8:	21 32       	cpi	r18, 0x21	; 33
    1aba:	31 05       	cpc	r19, r1
    1abc:	dc f4       	brge	.+54     	; 0x1af4 <twi_transmit+0x48>
    1abe:	20 91 08 04 	lds	r18, 0x0408	; 0x800408 <twi_state>
    1ac2:	24 30       	cpi	r18, 0x04	; 4
    1ac4:	c9 f4       	brne	.+50     	; 0x1af8 <twi_transmit+0x4c>
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	86 17       	cp	r24, r22
    1ace:	58 f4       	brcc	.+22     	; 0x1ae6 <twi_transmit+0x3a>
    1ad0:	30 91 bd 03 	lds	r19, 0x03BD	; 0x8003bd <twi_txBufferLength>
    1ad4:	21 91       	ld	r18, Z+
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	a1 54       	subi	r26, 0x41	; 65
    1ada:	bc 4f       	sbci	r27, 0xFC	; 252
    1adc:	a3 0f       	add	r26, r19
    1ade:	b1 1d       	adc	r27, r1
    1ae0:	2c 93       	st	X, r18
    1ae2:	01 96       	adiw	r24, 0x01	; 1
    1ae4:	f3 cf       	rjmp	.-26     	; 0x1acc <twi_transmit+0x20>
    1ae6:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <twi_txBufferLength>
    1aea:	68 0f       	add	r22, r24
    1aec:	60 93 bd 03 	sts	0x03BD, r22	; 0x8003bd <twi_txBufferLength>
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	08 95       	ret
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	08 95       	ret
    1af8:	82 e0       	ldi	r24, 0x02	; 2
    1afa:	08 95       	ret

00001afc <twi_attachSlaveRxEvent>:
    1afc:	90 93 02 04 	sts	0x0402, r25	; 0x800402 <twi_onSlaveReceive+0x1>
    1b00:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <twi_onSlaveReceive>
    1b04:	08 95       	ret

00001b06 <twi_attachSlaveTxEvent>:
    1b06:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <twi_onSlaveTransmit+0x1>
    1b0a:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <twi_onSlaveTransmit>
    1b0e:	08 95       	ret

00001b10 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1b10:	85 ed       	ldi	r24, 0xD5	; 213
    1b12:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1b16:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1b1a:	84 fd       	sbrc	r24, 4
    1b1c:	fc cf       	rjmp	.-8      	; 0x1b16 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1b1e:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <twi_state>
    1b22:	08 95       	ret

00001b24 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1b24:	85 ec       	ldi	r24, 0xC5	; 197
    1b26:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    1b2a:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <twi_state>
    1b2e:	08 95       	ret

00001b30 <__vector_36>:
}

ISR(TWI_vect)
{
    1b30:	1f 92       	push	r1
    1b32:	0f 92       	push	r0
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	0f 92       	push	r0
    1b38:	11 24       	eor	r1, r1
    1b3a:	2f 93       	push	r18
    1b3c:	3f 93       	push	r19
    1b3e:	4f 93       	push	r20
    1b40:	5f 93       	push	r21
    1b42:	6f 93       	push	r22
    1b44:	7f 93       	push	r23
    1b46:	8f 93       	push	r24
    1b48:	9f 93       	push	r25
    1b4a:	af 93       	push	r26
    1b4c:	bf 93       	push	r27
    1b4e:	ef 93       	push	r30
    1b50:	ff 93       	push	r31
  switch(TW_STATUS){
    1b52:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1b56:	88 7f       	andi	r24, 0xF8	; 248
    1b58:	80 36       	cpi	r24, 0x60	; 96
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <__vector_36+0x2e>
    1b5c:	9e c0       	rjmp	.+316    	; 0x1c9a <__vector_36+0x16a>
    1b5e:	78 f5       	brcc	.+94     	; 0x1bbe <__vector_36+0x8e>
    1b60:	88 32       	cpi	r24, 0x28	; 40
    1b62:	09 f4       	brne	.+2      	; 0x1b66 <__vector_36+0x36>
    1b64:	5d c0       	rjmp	.+186    	; 0x1c20 <__vector_36+0xf0>
    1b66:	90 f4       	brcc	.+36     	; 0x1b8c <__vector_36+0x5c>
    1b68:	80 31       	cpi	r24, 0x10	; 16
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <__vector_36+0x3e>
    1b6c:	56 c0       	rjmp	.+172    	; 0x1c1a <__vector_36+0xea>
    1b6e:	38 f4       	brcc	.+14     	; 0x1b7e <__vector_36+0x4e>
    1b70:	88 23       	and	r24, r24
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <__vector_36+0x46>
    1b74:	f5 c0       	rjmp	.+490    	; 0x1d60 <__vector_36+0x230>
    1b76:	88 30       	cpi	r24, 0x08	; 8
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <__vector_36+0x4c>
    1b7a:	4f c0       	rjmp	.+158    	; 0x1c1a <__vector_36+0xea>
    1b7c:	f5 c0       	rjmp	.+490    	; 0x1d68 <__vector_36+0x238>
    1b7e:	88 31       	cpi	r24, 0x18	; 24
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <__vector_36+0x54>
    1b82:	4e c0       	rjmp	.+156    	; 0x1c20 <__vector_36+0xf0>
    1b84:	80 32       	cpi	r24, 0x20	; 32
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <__vector_36+0x5a>
    1b88:	5f c0       	rjmp	.+190    	; 0x1c48 <__vector_36+0x118>
    1b8a:	ee c0       	rjmp	.+476    	; 0x1d68 <__vector_36+0x238>
    1b8c:	80 34       	cpi	r24, 0x40	; 64
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <__vector_36+0x62>
    1b90:	6a c0       	rjmp	.+212    	; 0x1c66 <__vector_36+0x136>
    1b92:	58 f4       	brcc	.+22     	; 0x1baa <__vector_36+0x7a>
    1b94:	80 33       	cpi	r24, 0x30	; 48
    1b96:	09 f4       	brne	.+2      	; 0x1b9a <__vector_36+0x6a>
    1b98:	57 c0       	rjmp	.+174    	; 0x1c48 <__vector_36+0x118>
    1b9a:	88 33       	cpi	r24, 0x38	; 56
    1b9c:	09 f0       	breq	.+2      	; 0x1ba0 <__vector_36+0x70>
    1b9e:	e4 c0       	rjmp	.+456    	; 0x1d68 <__vector_36+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1ba0:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <twi_error>
      twi_releaseBus();
    1ba4:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <twi_releaseBus>
      break;
    1ba8:	df c0       	rjmp	.+446    	; 0x1d68 <__vector_36+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1baa:	80 35       	cpi	r24, 0x50	; 80
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <__vector_36+0x80>
    1bae:	4f c0       	rjmp	.+158    	; 0x1c4e <__vector_36+0x11e>
    1bb0:	88 35       	cpi	r24, 0x58	; 88
    1bb2:	09 f4       	brne	.+2      	; 0x1bb6 <__vector_36+0x86>
    1bb4:	5d c0       	rjmp	.+186    	; 0x1c70 <__vector_36+0x140>
    1bb6:	88 34       	cpi	r24, 0x48	; 72
    1bb8:	09 f0       	breq	.+2      	; 0x1bbc <__vector_36+0x8c>
    1bba:	d6 c0       	rjmp	.+428    	; 0x1d68 <__vector_36+0x238>
    1bbc:	d3 c0       	rjmp	.+422    	; 0x1d64 <__vector_36+0x234>
    1bbe:	88 39       	cpi	r24, 0x98	; 152
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <__vector_36+0x94>
    1bc2:	c4 c0       	rjmp	.+392    	; 0x1d4c <__vector_36+0x21c>
    1bc4:	a8 f4       	brcc	.+42     	; 0x1bf0 <__vector_36+0xc0>
    1bc6:	88 37       	cpi	r24, 0x78	; 120
    1bc8:	09 f4       	brne	.+2      	; 0x1bcc <__vector_36+0x9c>
    1bca:	67 c0       	rjmp	.+206    	; 0x1c9a <__vector_36+0x16a>
    1bcc:	38 f4       	brcc	.+14     	; 0x1bdc <__vector_36+0xac>
    1bce:	88 36       	cpi	r24, 0x68	; 104
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <__vector_36+0xa4>
    1bd2:	63 c0       	rjmp	.+198    	; 0x1c9a <__vector_36+0x16a>
    1bd4:	80 37       	cpi	r24, 0x70	; 112
    1bd6:	09 f4       	brne	.+2      	; 0x1bda <__vector_36+0xaa>
    1bd8:	60 c0       	rjmp	.+192    	; 0x1c9a <__vector_36+0x16a>
    1bda:	c6 c0       	rjmp	.+396    	; 0x1d68 <__vector_36+0x238>
    1bdc:	88 38       	cpi	r24, 0x88	; 136
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <__vector_36+0xb2>
    1be0:	b5 c0       	rjmp	.+362    	; 0x1d4c <__vector_36+0x21c>
    1be2:	80 39       	cpi	r24, 0x90	; 144
    1be4:	09 f4       	brne	.+2      	; 0x1be8 <__vector_36+0xb8>
    1be6:	5f c0       	rjmp	.+190    	; 0x1ca6 <__vector_36+0x176>
    1be8:	80 38       	cpi	r24, 0x80	; 128
    1bea:	09 f0       	breq	.+2      	; 0x1bee <__vector_36+0xbe>
    1bec:	bd c0       	rjmp	.+378    	; 0x1d68 <__vector_36+0x238>
    1bee:	5b c0       	rjmp	.+182    	; 0x1ca6 <__vector_36+0x176>
    1bf0:	80 3b       	cpi	r24, 0xB0	; 176
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <__vector_36+0xc6>
    1bf4:	83 c0       	rjmp	.+262    	; 0x1cfc <__vector_36+0x1cc>
    1bf6:	38 f4       	brcc	.+14     	; 0x1c06 <__vector_36+0xd6>
    1bf8:	80 3a       	cpi	r24, 0xA0	; 160
    1bfa:	09 f4       	brne	.+2      	; 0x1bfe <__vector_36+0xce>
    1bfc:	66 c0       	rjmp	.+204    	; 0x1cca <__vector_36+0x19a>
    1bfe:	88 3a       	cpi	r24, 0xA8	; 168
    1c00:	09 f4       	brne	.+2      	; 0x1c04 <__vector_36+0xd4>
    1c02:	7c c0       	rjmp	.+248    	; 0x1cfc <__vector_36+0x1cc>
    1c04:	b1 c0       	rjmp	.+354    	; 0x1d68 <__vector_36+0x238>
    1c06:	80 3c       	cpi	r24, 0xC0	; 192
    1c08:	09 f4       	brne	.+2      	; 0x1c0c <__vector_36+0xdc>
    1c0a:	a4 c0       	rjmp	.+328    	; 0x1d54 <__vector_36+0x224>
    1c0c:	88 3c       	cpi	r24, 0xC8	; 200
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <__vector_36+0xe2>
    1c10:	a1 c0       	rjmp	.+322    	; 0x1d54 <__vector_36+0x224>
    1c12:	88 3b       	cpi	r24, 0xB8	; 184
    1c14:	09 f4       	brne	.+2      	; 0x1c18 <__vector_36+0xe8>
    1c16:	87 c0       	rjmp	.+270    	; 0x1d26 <__vector_36+0x1f6>
    1c18:	a7 c0       	rjmp	.+334    	; 0x1d68 <__vector_36+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1c1a:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <twi_slarw>
    1c1e:	10 c0       	rjmp	.+32     	; 0x1c40 <__vector_36+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1c20:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <twi_masterBufferIndex>
    1c24:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <twi_masterBufferLength>
    1c28:	98 17       	cp	r25, r24
    1c2a:	70 f5       	brcc	.+92     	; 0x1c88 <__vector_36+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1c2c:	e0 91 e0 03 	lds	r30, 0x03E0	; 0x8003e0 <twi_masterBufferIndex>
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	8e 0f       	add	r24, r30
    1c34:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <twi_masterBufferIndex>
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	ef 51       	subi	r30, 0x1F	; 31
    1c3c:	fc 4f       	sbci	r31, 0xFC	; 252
    1c3e:	80 81       	ld	r24, Z
    1c40:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1c44:	85 ec       	ldi	r24, 0xC5	; 197
    1c46:	83 c0       	rjmp	.+262    	; 0x1d4e <__vector_36+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1c48:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <twi_error>
    1c4c:	8b c0       	rjmp	.+278    	; 0x1d64 <__vector_36+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1c4e:	e0 91 e0 03 	lds	r30, 0x03E0	; 0x8003e0 <twi_masterBufferIndex>
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	8e 0f       	add	r24, r30
    1c56:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <twi_masterBufferIndex>
    1c5a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	ef 51       	subi	r30, 0x1F	; 31
    1c62:	fc 4f       	sbci	r31, 0xFC	; 252
    1c64:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1c66:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <twi_masterBufferIndex>
    1c6a:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <twi_masterBufferLength>
    1c6e:	6b c0       	rjmp	.+214    	; 0x1d46 <__vector_36+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1c70:	e0 91 e0 03 	lds	r30, 0x03E0	; 0x8003e0 <twi_masterBufferIndex>
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	8e 0f       	add	r24, r30
    1c78:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <twi_masterBufferIndex>
    1c7c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	ef 51       	subi	r30, 0x1F	; 31
    1c84:	fc 4f       	sbci	r31, 0xFC	; 252
    1c86:	80 83       	st	Z, r24
	if (twi_sendStop)
    1c88:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <twi_sendStop>
    1c8c:	81 11       	cpse	r24, r1
    1c8e:	6a c0       	rjmp	.+212    	; 0x1d64 <__vector_36+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1c96:	84 ea       	ldi	r24, 0xA4	; 164
    1c98:	5e c0       	rjmp	.+188    	; 0x1d56 <__vector_36+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1c9a:	83 e0       	ldi	r24, 0x03	; 3
    1c9c:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1ca0:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <twi_rxBufferIndex>
    1ca4:	cf cf       	rjmp	.-98     	; 0x1c44 <__vector_36+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1ca6:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <twi_rxBufferIndex>
    1caa:	80 32       	cpi	r24, 0x20	; 32
    1cac:	08 f0       	brcs	.+2      	; 0x1cb0 <__vector_36+0x180>
    1cae:	4e c0       	rjmp	.+156    	; 0x1d4c <__vector_36+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1cb0:	e0 91 9c 03 	lds	r30, 0x039C	; 0x80039c <twi_rxBufferIndex>
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	8e 0f       	add	r24, r30
    1cb8:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <twi_rxBufferIndex>
    1cbc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	e3 56       	subi	r30, 0x63	; 99
    1cc4:	fc 4f       	sbci	r31, 0xFC	; 252
    1cc6:	80 83       	st	Z, r24
    1cc8:	bd cf       	rjmp	.-134    	; 0x1c44 <__vector_36+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1cca:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1cce:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <twi_rxBufferIndex>
    1cd2:	80 32       	cpi	r24, 0x20	; 32
    1cd4:	30 f4       	brcc	.+12     	; 0x1ce2 <__vector_36+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1cd6:	e0 91 9c 03 	lds	r30, 0x039C	; 0x80039c <twi_rxBufferIndex>
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	e3 56       	subi	r30, 0x63	; 99
    1cde:	fc 4f       	sbci	r31, 0xFC	; 252
    1ce0:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1ce2:	60 91 9c 03 	lds	r22, 0x039C	; 0x80039c <twi_rxBufferIndex>
    1ce6:	70 e0       	ldi	r23, 0x00	; 0
    1ce8:	e0 91 01 04 	lds	r30, 0x0401	; 0x800401 <twi_onSlaveReceive>
    1cec:	f0 91 02 04 	lds	r31, 0x0402	; 0x800402 <twi_onSlaveReceive+0x1>
    1cf0:	8d e9       	ldi	r24, 0x9D	; 157
    1cf2:	93 e0       	ldi	r25, 0x03	; 3
    1cf4:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1cf6:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <twi_rxBufferIndex>
      break;
    1cfa:	36 c0       	rjmp	.+108    	; 0x1d68 <__vector_36+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1cfc:	84 e0       	ldi	r24, 0x04	; 4
    1cfe:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1d02:	10 92 be 03 	sts	0x03BE, r1	; 0x8003be <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1d06:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1d0a:	e0 91 03 04 	lds	r30, 0x0403	; 0x800403 <twi_onSlaveTransmit>
    1d0e:	f0 91 04 04 	lds	r31, 0x0404	; 0x800404 <twi_onSlaveTransmit+0x1>
    1d12:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1d14:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <twi_txBufferLength>
    1d18:	81 11       	cpse	r24, r1
    1d1a:	05 c0       	rjmp	.+10     	; 0x1d26 <__vector_36+0x1f6>
        twi_txBufferLength = 1;
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1d22:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1d26:	e0 91 be 03 	lds	r30, 0x03BE	; 0x8003be <twi_txBufferIndex>
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	8e 0f       	add	r24, r30
    1d2e:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <twi_txBufferIndex>
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	e1 54       	subi	r30, 0x41	; 65
    1d36:	fc 4f       	sbci	r31, 0xFC	; 252
    1d38:	80 81       	ld	r24, Z
    1d3a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1d3e:	90 91 be 03 	lds	r25, 0x03BE	; 0x8003be <twi_txBufferIndex>
    1d42:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <twi_txBufferLength>
    1d46:	98 17       	cp	r25, r24
    1d48:	08 f4       	brcc	.+2      	; 0x1d4c <__vector_36+0x21c>
    1d4a:	7c cf       	rjmp	.-264    	; 0x1c44 <__vector_36+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1d4c:	85 e8       	ldi	r24, 0x85	; 133
    1d4e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1d52:	0a c0       	rjmp	.+20     	; 0x1d68 <__vector_36+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1d54:	85 ec       	ldi	r24, 0xC5	; 197
    1d56:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1d5a:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <twi_state>
      break;
    1d5e:	04 c0       	rjmp	.+8      	; 0x1d68 <__vector_36+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1d60:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <twi_error>
      twi_stop();
    1d64:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <twi_stop>
      break;
  }
}
    1d68:	ff 91       	pop	r31
    1d6a:	ef 91       	pop	r30
    1d6c:	bf 91       	pop	r27
    1d6e:	af 91       	pop	r26
    1d70:	9f 91       	pop	r25
    1d72:	8f 91       	pop	r24
    1d74:	7f 91       	pop	r23
    1d76:	6f 91       	pop	r22
    1d78:	5f 91       	pop	r21
    1d7a:	4f 91       	pop	r20
    1d7c:	3f 91       	pop	r19
    1d7e:	2f 91       	pop	r18
    1d80:	0f 90       	pop	r0
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	0f 90       	pop	r0
    1d86:	1f 90       	pop	r1
    1d88:	18 95       	reti

00001d8a <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1d8a:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <_ZN7TwoWire14rxBufferLengthE>
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	20 91 3e 04 	lds	r18, 0x043E	; 0x80043e <_ZN7TwoWire13rxBufferIndexE>
    1d94:	82 1b       	sub	r24, r18
    1d96:	91 09       	sbc	r25, r1
    1d98:	08 95       	ret

00001d9a <_ZN7TwoWire4readEv>:
    1d9a:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <_ZN7TwoWire13rxBufferIndexE>
    1d9e:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <_ZN7TwoWire14rxBufferLengthE>
    1da2:	98 17       	cp	r25, r24
    1da4:	50 f4       	brcc	.+20     	; 0x1dba <_ZN7TwoWire4readEv+0x20>
    1da6:	e9 2f       	mov	r30, r25
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	e1 5c       	subi	r30, 0xC1	; 193
    1dac:	fb 4f       	sbci	r31, 0xFB	; 251
    1dae:	20 81       	ld	r18, Z
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	9f 5f       	subi	r25, 0xFF	; 255
    1db4:	90 93 3e 04 	sts	0x043E, r25	; 0x80043e <_ZN7TwoWire13rxBufferIndexE>
    1db8:	02 c0       	rjmp	.+4      	; 0x1dbe <_ZN7TwoWire4readEv+0x24>
    1dba:	2f ef       	ldi	r18, 0xFF	; 255
    1dbc:	3f ef       	ldi	r19, 0xFF	; 255
    1dbe:	c9 01       	movw	r24, r18
    1dc0:	08 95       	ret

00001dc2 <_ZN7TwoWire4peekEv>:
    1dc2:	e0 91 3e 04 	lds	r30, 0x043E	; 0x80043e <_ZN7TwoWire13rxBufferIndexE>
    1dc6:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <_ZN7TwoWire14rxBufferLengthE>
    1dca:	e8 17       	cp	r30, r24
    1dcc:	30 f4       	brcc	.+12     	; 0x1dda <_ZN7TwoWire4peekEv+0x18>
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	e1 5c       	subi	r30, 0xC1	; 193
    1dd2:	fb 4f       	sbci	r31, 0xFB	; 251
    1dd4:	80 81       	ld	r24, Z
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	08 95       	ret
    1dda:	8f ef       	ldi	r24, 0xFF	; 255
    1ddc:	9f ef       	ldi	r25, 0xFF	; 255
    1dde:	08 95       	ret

00001de0 <_ZN7TwoWire5flushEv>:
    1de0:	08 95       	ret

00001de2 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1de2:	cf 93       	push	r28
    1de4:	df 93       	push	r29
    1de6:	ec 01       	movw	r28, r24
    1de8:	e0 91 15 04 	lds	r30, 0x0415	; 0x800415 <_ZN7TwoWire14user_onReceiveE>
    1dec:	f0 91 16 04 	lds	r31, 0x0416	; 0x800416 <_ZN7TwoWire14user_onReceiveE+0x1>
    1df0:	30 97       	sbiw	r30, 0x00	; 0
    1df2:	f1 f0       	breq	.+60     	; 0x1e30 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1df4:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <_ZN7TwoWire13rxBufferIndexE>
    1df8:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <_ZN7TwoWire14rxBufferLengthE>
    1dfc:	98 17       	cp	r25, r24
    1dfe:	c0 f0       	brcs	.+48     	; 0x1e30 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	29 2f       	mov	r18, r25
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	26 17       	cp	r18, r22
    1e08:	37 07       	cpc	r19, r23
    1e0a:	54 f4       	brge	.+20     	; 0x1e20 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1e0c:	de 01       	movw	r26, r28
    1e0e:	a2 0f       	add	r26, r18
    1e10:	b3 1f       	adc	r27, r19
    1e12:	4c 91       	ld	r20, X
    1e14:	d9 01       	movw	r26, r18
    1e16:	a1 5c       	subi	r26, 0xC1	; 193
    1e18:	bb 4f       	sbci	r27, 0xFB	; 251
    1e1a:	4c 93       	st	X, r20
    1e1c:	9f 5f       	subi	r25, 0xFF	; 255
    1e1e:	f1 cf       	rjmp	.-30     	; 0x1e02 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1e20:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <_ZN7TwoWire13rxBufferIndexE>
    1e24:	60 93 3d 04 	sts	0x043D, r22	; 0x80043d <_ZN7TwoWire14rxBufferLengthE>
    1e28:	cb 01       	movw	r24, r22
    1e2a:	df 91       	pop	r29
    1e2c:	cf 91       	pop	r28
    1e2e:	09 94       	ijmp
    1e30:	df 91       	pop	r29
    1e32:	cf 91       	pop	r28
    1e34:	08 95       	ret

00001e36 <_ZN7TwoWire16onRequestServiceEv>:
    1e36:	e0 91 17 04 	lds	r30, 0x0417	; 0x800417 <_ZN7TwoWire14user_onRequestE>
    1e3a:	f0 91 18 04 	lds	r31, 0x0418	; 0x800418 <_ZN7TwoWire14user_onRequestE+0x1>
    1e3e:	30 97       	sbiw	r30, 0x00	; 0
    1e40:	29 f0       	breq	.+10     	; 0x1e4c <_ZN7TwoWire16onRequestServiceEv+0x16>
    1e42:	10 92 1b 04 	sts	0x041B, r1	; 0x80041b <_ZN7TwoWire13txBufferIndexE>
    1e46:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <_ZN7TwoWire14txBufferLengthE>
    1e4a:	09 94       	ijmp
    1e4c:	08 95       	ret

00001e4e <_ZN7TwoWire5writeEPKhj>:
    1e4e:	cf 92       	push	r12
    1e50:	df 92       	push	r13
    1e52:	ef 92       	push	r14
    1e54:	ff 92       	push	r15
    1e56:	0f 93       	push	r16
    1e58:	1f 93       	push	r17
    1e5a:	cf 93       	push	r28
    1e5c:	df 93       	push	r29
    1e5e:	7c 01       	movw	r14, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	8a 01       	movw	r16, r20
    1e64:	20 91 19 04 	lds	r18, 0x0419	; 0x800419 <_ZN7TwoWire12transmittingE>
    1e68:	22 23       	and	r18, r18
    1e6a:	89 f0       	breq	.+34     	; 0x1e8e <_ZN7TwoWire5writeEPKhj+0x40>
    1e6c:	eb 01       	movw	r28, r22
    1e6e:	6b 01       	movw	r12, r22
    1e70:	c4 0e       	add	r12, r20
    1e72:	d5 1e       	adc	r13, r21
    1e74:	cc 15       	cp	r28, r12
    1e76:	dd 05       	cpc	r29, r13
    1e78:	69 f0       	breq	.+26     	; 0x1e94 <_ZN7TwoWire5writeEPKhj+0x46>
    1e7a:	69 91       	ld	r22, Y+
    1e7c:	d7 01       	movw	r26, r14
    1e7e:	ed 91       	ld	r30, X+
    1e80:	fc 91       	ld	r31, X
    1e82:	01 90       	ld	r0, Z+
    1e84:	f0 81       	ld	r31, Z
    1e86:	e0 2d       	mov	r30, r0
    1e88:	c7 01       	movw	r24, r14
    1e8a:	09 95       	icall
    1e8c:	f3 cf       	rjmp	.-26     	; 0x1e74 <_ZN7TwoWire5writeEPKhj+0x26>
    1e8e:	64 2f       	mov	r22, r20
    1e90:	0e 94 56 0d 	call	0x1aac	; 0x1aac <twi_transmit>
    1e94:	c8 01       	movw	r24, r16
    1e96:	df 91       	pop	r29
    1e98:	cf 91       	pop	r28
    1e9a:	1f 91       	pop	r17
    1e9c:	0f 91       	pop	r16
    1e9e:	ff 90       	pop	r15
    1ea0:	ef 90       	pop	r14
    1ea2:	df 90       	pop	r13
    1ea4:	cf 90       	pop	r12
    1ea6:	08 95       	ret

00001ea8 <_ZN7TwoWire5writeEh>:
    1ea8:	cf 93       	push	r28
    1eaa:	df 93       	push	r29
    1eac:	1f 92       	push	r1
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	69 83       	std	Y+1, r22	; 0x01
    1eb4:	20 91 19 04 	lds	r18, 0x0419	; 0x800419 <_ZN7TwoWire12transmittingE>
    1eb8:	22 23       	and	r18, r18
    1eba:	d1 f0       	breq	.+52     	; 0x1ef0 <_ZN7TwoWire5writeEh+0x48>
    1ebc:	20 91 1a 04 	lds	r18, 0x041A	; 0x80041a <_ZN7TwoWire14txBufferLengthE>
    1ec0:	20 32       	cpi	r18, 0x20	; 32
    1ec2:	40 f0       	brcs	.+16     	; 0x1ed4 <_ZN7TwoWire5writeEh+0x2c>
    1ec4:	21 e0       	ldi	r18, 0x01	; 1
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	fc 01       	movw	r30, r24
    1eca:	33 83       	std	Z+3, r19	; 0x03
    1ecc:	22 83       	std	Z+2, r18	; 0x02
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	15 c0       	rjmp	.+42     	; 0x1efe <_ZN7TwoWire5writeEh+0x56>
    1ed4:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <_ZN7TwoWire13txBufferIndexE>
    1ed8:	e8 2f       	mov	r30, r24
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	e4 5e       	subi	r30, 0xE4	; 228
    1ede:	fb 4f       	sbci	r31, 0xFB	; 251
    1ee0:	99 81       	ldd	r25, Y+1	; 0x01
    1ee2:	90 83       	st	Z, r25
    1ee4:	8f 5f       	subi	r24, 0xFF	; 255
    1ee6:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <_ZN7TwoWire13txBufferIndexE>
    1eea:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <_ZN7TwoWire14txBufferLengthE>
    1eee:	05 c0       	rjmp	.+10     	; 0x1efa <_ZN7TwoWire5writeEh+0x52>
    1ef0:	61 e0       	ldi	r22, 0x01	; 1
    1ef2:	ce 01       	movw	r24, r28
    1ef4:	01 96       	adiw	r24, 0x01	; 1
    1ef6:	0e 94 56 0d 	call	0x1aac	; 0x1aac <twi_transmit>
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	0f 90       	pop	r0
    1f00:	df 91       	pop	r29
    1f02:	cf 91       	pop	r28
    1f04:	08 95       	ret

00001f06 <_ZN7TwoWireC1Ev>:
    1f06:	fc 01       	movw	r30, r24
    1f08:	13 82       	std	Z+3, r1	; 0x03
    1f0a:	12 82       	std	Z+2, r1	; 0x02
    1f0c:	88 ee       	ldi	r24, 0xE8	; 232
    1f0e:	93 e0       	ldi	r25, 0x03	; 3
    1f10:	a0 e0       	ldi	r26, 0x00	; 0
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	84 83       	std	Z+4, r24	; 0x04
    1f16:	95 83       	std	Z+5, r25	; 0x05
    1f18:	a6 83       	std	Z+6, r26	; 0x06
    1f1a:	b7 83       	std	Z+7, r27	; 0x07
    1f1c:	8a e3       	ldi	r24, 0x3A	; 58
    1f1e:	92 e0       	ldi	r25, 0x02	; 2
    1f20:	91 83       	std	Z+1, r25	; 0x01
    1f22:	80 83       	st	Z, r24
    1f24:	08 95       	ret

00001f26 <_ZN7TwoWire5beginEv>:
    1f26:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <_ZN7TwoWire13rxBufferIndexE>
    1f2a:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <_ZN7TwoWire14rxBufferLengthE>
    1f2e:	10 92 1b 04 	sts	0x041B, r1	; 0x80041b <_ZN7TwoWire13txBufferIndexE>
    1f32:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <_ZN7TwoWire14txBufferLengthE>
    1f36:	0e 94 9a 0c 	call	0x1934	; 0x1934 <twi_init>
    1f3a:	8b e1       	ldi	r24, 0x1B	; 27
    1f3c:	9f e0       	ldi	r25, 0x0F	; 15
    1f3e:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <twi_attachSlaveTxEvent>
    1f42:	81 ef       	ldi	r24, 0xF1	; 241
    1f44:	9e e0       	ldi	r25, 0x0E	; 14
    1f46:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <twi_attachSlaveRxEvent>

00001f4a <_ZN7TwoWire17beginTransmissionEh>:
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <_ZN7TwoWire12transmittingE>
    1f50:	60 93 3c 04 	sts	0x043C, r22	; 0x80043c <_ZN7TwoWire9txAddressE>
    1f54:	10 92 1b 04 	sts	0x041B, r1	; 0x80041b <_ZN7TwoWire13txBufferIndexE>
    1f58:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <_ZN7TwoWire14txBufferLengthE>
    1f5c:	08 95       	ret

00001f5e <_ZN7TwoWire15endTransmissionEh>:
    1f5e:	0f 93       	push	r16
    1f60:	06 2f       	mov	r16, r22
    1f62:	21 e0       	ldi	r18, 0x01	; 1
    1f64:	40 91 1a 04 	lds	r20, 0x041A	; 0x80041a <_ZN7TwoWire14txBufferLengthE>
    1f68:	6c e1       	ldi	r22, 0x1C	; 28
    1f6a:	74 e0       	ldi	r23, 0x04	; 4
    1f6c:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <_ZN7TwoWire9txAddressE>
    1f70:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <twi_writeTo>
    1f74:	10 92 1b 04 	sts	0x041B, r1	; 0x80041b <_ZN7TwoWire13txBufferIndexE>
    1f78:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <_ZN7TwoWire14txBufferLengthE>
    1f7c:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <_ZN7TwoWire12transmittingE>
    1f80:	0f 91       	pop	r16
    1f82:	08 95       	ret

00001f84 <_ZN7TwoWire11requestFromEhhmhh>:
    1f84:	4f 92       	push	r4
    1f86:	5f 92       	push	r5
    1f88:	6f 92       	push	r6
    1f8a:	7f 92       	push	r7
    1f8c:	af 92       	push	r10
    1f8e:	bf 92       	push	r11
    1f90:	cf 92       	push	r12
    1f92:	ef 92       	push	r14
    1f94:	ff 92       	push	r15
    1f96:	0f 93       	push	r16
    1f98:	1f 93       	push	r17
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
    1f9e:	5c 01       	movw	r10, r24
    1fa0:	f6 2e       	mov	r15, r22
    1fa2:	d4 2f       	mov	r29, r20
    1fa4:	28 01       	movw	r4, r16
    1fa6:	39 01       	movw	r6, r18
    1fa8:	ee 20       	and	r14, r14
    1faa:	21 f1       	breq	.+72     	; 0x1ff4 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    1fac:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN7TwoWire17beginTransmissionEh>
    1fb0:	ce 2d       	mov	r28, r14
    1fb2:	c4 30       	cpi	r28, 0x04	; 4
    1fb4:	08 f0       	brcs	.+2      	; 0x1fb8 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1fb6:	c3 e0       	ldi	r28, 0x03	; 3
    1fb8:	c1 50       	subi	r28, 0x01	; 1
    1fba:	c0 f0       	brcs	.+48     	; 0x1fec <_ZN7TwoWire11requestFromEhhmhh+0x68>
    1fbc:	28 e0       	ldi	r18, 0x08	; 8
    1fbe:	c2 9f       	mul	r28, r18
    1fc0:	c0 01       	movw	r24, r0
    1fc2:	11 24       	eor	r1, r1
    1fc4:	a3 01       	movw	r20, r6
    1fc6:	92 01       	movw	r18, r4
    1fc8:	04 c0       	rjmp	.+8      	; 0x1fd2 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    1fca:	56 95       	lsr	r21
    1fcc:	47 95       	ror	r20
    1fce:	37 95       	ror	r19
    1fd0:	27 95       	ror	r18
    1fd2:	8a 95       	dec	r24
    1fd4:	d2 f7       	brpl	.-12     	; 0x1fca <_ZN7TwoWire11requestFromEhhmhh+0x46>
    1fd6:	ca 01       	movw	r24, r20
    1fd8:	b9 01       	movw	r22, r18
    1fda:	d5 01       	movw	r26, r10
    1fdc:	ed 91       	ld	r30, X+
    1fde:	fc 91       	ld	r31, X
    1fe0:	01 90       	ld	r0, Z+
    1fe2:	f0 81       	ld	r31, Z
    1fe4:	e0 2d       	mov	r30, r0
    1fe6:	c5 01       	movw	r24, r10
    1fe8:	09 95       	icall
    1fea:	e6 cf       	rjmp	.-52     	; 0x1fb8 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1fec:	60 e0       	ldi	r22, 0x00	; 0
    1fee:	c5 01       	movw	r24, r10
    1ff0:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <_ZN7TwoWire15endTransmissionEh>
    1ff4:	4d 2f       	mov	r20, r29
    1ff6:	d1 32       	cpi	r29, 0x21	; 33
    1ff8:	08 f0       	brcs	.+2      	; 0x1ffc <_ZN7TwoWire11requestFromEhhmhh+0x78>
    1ffa:	40 e2       	ldi	r20, 0x20	; 32
    1ffc:	2c 2d       	mov	r18, r12
    1ffe:	6f e3       	ldi	r22, 0x3F	; 63
    2000:	74 e0       	ldi	r23, 0x04	; 4
    2002:	8f 2d       	mov	r24, r15
    2004:	0e 94 b8 0c 	call	0x1970	; 0x1970 <twi_readFrom>
    2008:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <_ZN7TwoWire13rxBufferIndexE>
    200c:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <_ZN7TwoWire14rxBufferLengthE>
    2010:	df 91       	pop	r29
    2012:	cf 91       	pop	r28
    2014:	1f 91       	pop	r17
    2016:	0f 91       	pop	r16
    2018:	ff 90       	pop	r15
    201a:	ef 90       	pop	r14
    201c:	cf 90       	pop	r12
    201e:	bf 90       	pop	r11
    2020:	af 90       	pop	r10
    2022:	7f 90       	pop	r7
    2024:	6f 90       	pop	r6
    2026:	5f 90       	pop	r5
    2028:	4f 90       	pop	r4
    202a:	08 95       	ret

0000202c <_ZN7TwoWire11requestFromEhhh>:
    202c:	cf 92       	push	r12
    202e:	ef 92       	push	r14
    2030:	0f 93       	push	r16
    2032:	1f 93       	push	r17
    2034:	c2 2e       	mov	r12, r18
    2036:	e1 2c       	mov	r14, r1
    2038:	00 e0       	ldi	r16, 0x00	; 0
    203a:	10 e0       	ldi	r17, 0x00	; 0
    203c:	98 01       	movw	r18, r16
    203e:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <_ZN7TwoWire11requestFromEhhmhh>
    2042:	1f 91       	pop	r17
    2044:	0f 91       	pop	r16
    2046:	ef 90       	pop	r14
    2048:	cf 90       	pop	r12
    204a:	08 95       	ret

0000204c <_ZN7TwoWire11requestFromEii>:
    204c:	21 e0       	ldi	r18, 0x01	; 1
    204e:	0c 94 16 10 	jmp	0x202c	; 0x202c <_ZN7TwoWire11requestFromEhhh>

00002052 <_ZN7TwoWire15endTransmissionEv>:
    2052:	61 e0       	ldi	r22, 0x01	; 1
    2054:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <_ZN7TwoWire15endTransmissionEh>

00002058 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2058:	89 e0       	ldi	r24, 0x09	; 9
    205a:	94 e0       	ldi	r25, 0x04	; 4
    205c:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <_ZN7TwoWireC1Ev>

00002060 <__subsf3>:
    2060:	50 58       	subi	r21, 0x80	; 128

00002062 <__addsf3>:
    2062:	bb 27       	eor	r27, r27
    2064:	aa 27       	eor	r26, r26
    2066:	0e 94 48 10 	call	0x2090	; 0x2090 <__addsf3x>
    206a:	0c 94 1a 11 	jmp	0x2234	; 0x2234 <__fp_round>
    206e:	0e 94 0c 11 	call	0x2218	; 0x2218 <__fp_pscA>
    2072:	38 f0       	brcs	.+14     	; 0x2082 <__addsf3+0x20>
    2074:	0e 94 13 11 	call	0x2226	; 0x2226 <__fp_pscB>
    2078:	20 f0       	brcs	.+8      	; 0x2082 <__addsf3+0x20>
    207a:	39 f4       	brne	.+14     	; 0x208a <__addsf3+0x28>
    207c:	9f 3f       	cpi	r25, 0xFF	; 255
    207e:	19 f4       	brne	.+6      	; 0x2086 <__addsf3+0x24>
    2080:	26 f4       	brtc	.+8      	; 0x208a <__addsf3+0x28>
    2082:	0c 94 09 11 	jmp	0x2212	; 0x2212 <__fp_nan>
    2086:	0e f4       	brtc	.+2      	; 0x208a <__addsf3+0x28>
    2088:	e0 95       	com	r30
    208a:	e7 fb       	bst	r30, 7
    208c:	0c 94 03 11 	jmp	0x2206	; 0x2206 <__fp_inf>

00002090 <__addsf3x>:
    2090:	e9 2f       	mov	r30, r25
    2092:	0e 94 2b 11 	call	0x2256	; 0x2256 <__fp_split3>
    2096:	58 f3       	brcs	.-42     	; 0x206e <__addsf3+0xc>
    2098:	ba 17       	cp	r27, r26
    209a:	62 07       	cpc	r22, r18
    209c:	73 07       	cpc	r23, r19
    209e:	84 07       	cpc	r24, r20
    20a0:	95 07       	cpc	r25, r21
    20a2:	20 f0       	brcs	.+8      	; 0x20ac <__addsf3x+0x1c>
    20a4:	79 f4       	brne	.+30     	; 0x20c4 <__addsf3x+0x34>
    20a6:	a6 f5       	brtc	.+104    	; 0x2110 <__addsf3x+0x80>
    20a8:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__fp_zero>
    20ac:	0e f4       	brtc	.+2      	; 0x20b0 <__addsf3x+0x20>
    20ae:	e0 95       	com	r30
    20b0:	0b 2e       	mov	r0, r27
    20b2:	ba 2f       	mov	r27, r26
    20b4:	a0 2d       	mov	r26, r0
    20b6:	0b 01       	movw	r0, r22
    20b8:	b9 01       	movw	r22, r18
    20ba:	90 01       	movw	r18, r0
    20bc:	0c 01       	movw	r0, r24
    20be:	ca 01       	movw	r24, r20
    20c0:	a0 01       	movw	r20, r0
    20c2:	11 24       	eor	r1, r1
    20c4:	ff 27       	eor	r31, r31
    20c6:	59 1b       	sub	r21, r25
    20c8:	99 f0       	breq	.+38     	; 0x20f0 <__addsf3x+0x60>
    20ca:	59 3f       	cpi	r21, 0xF9	; 249
    20cc:	50 f4       	brcc	.+20     	; 0x20e2 <__addsf3x+0x52>
    20ce:	50 3e       	cpi	r21, 0xE0	; 224
    20d0:	68 f1       	brcs	.+90     	; 0x212c <__addsf3x+0x9c>
    20d2:	1a 16       	cp	r1, r26
    20d4:	f0 40       	sbci	r31, 0x00	; 0
    20d6:	a2 2f       	mov	r26, r18
    20d8:	23 2f       	mov	r18, r19
    20da:	34 2f       	mov	r19, r20
    20dc:	44 27       	eor	r20, r20
    20de:	58 5f       	subi	r21, 0xF8	; 248
    20e0:	f3 cf       	rjmp	.-26     	; 0x20c8 <__addsf3x+0x38>
    20e2:	46 95       	lsr	r20
    20e4:	37 95       	ror	r19
    20e6:	27 95       	ror	r18
    20e8:	a7 95       	ror	r26
    20ea:	f0 40       	sbci	r31, 0x00	; 0
    20ec:	53 95       	inc	r21
    20ee:	c9 f7       	brne	.-14     	; 0x20e2 <__addsf3x+0x52>
    20f0:	7e f4       	brtc	.+30     	; 0x2110 <__addsf3x+0x80>
    20f2:	1f 16       	cp	r1, r31
    20f4:	ba 0b       	sbc	r27, r26
    20f6:	62 0b       	sbc	r22, r18
    20f8:	73 0b       	sbc	r23, r19
    20fa:	84 0b       	sbc	r24, r20
    20fc:	ba f0       	brmi	.+46     	; 0x212c <__addsf3x+0x9c>
    20fe:	91 50       	subi	r25, 0x01	; 1
    2100:	a1 f0       	breq	.+40     	; 0x212a <__addsf3x+0x9a>
    2102:	ff 0f       	add	r31, r31
    2104:	bb 1f       	adc	r27, r27
    2106:	66 1f       	adc	r22, r22
    2108:	77 1f       	adc	r23, r23
    210a:	88 1f       	adc	r24, r24
    210c:	c2 f7       	brpl	.-16     	; 0x20fe <__addsf3x+0x6e>
    210e:	0e c0       	rjmp	.+28     	; 0x212c <__addsf3x+0x9c>
    2110:	ba 0f       	add	r27, r26
    2112:	62 1f       	adc	r22, r18
    2114:	73 1f       	adc	r23, r19
    2116:	84 1f       	adc	r24, r20
    2118:	48 f4       	brcc	.+18     	; 0x212c <__addsf3x+0x9c>
    211a:	87 95       	ror	r24
    211c:	77 95       	ror	r23
    211e:	67 95       	ror	r22
    2120:	b7 95       	ror	r27
    2122:	f7 95       	ror	r31
    2124:	9e 3f       	cpi	r25, 0xFE	; 254
    2126:	08 f0       	brcs	.+2      	; 0x212a <__addsf3x+0x9a>
    2128:	b0 cf       	rjmp	.-160    	; 0x208a <__addsf3+0x28>
    212a:	93 95       	inc	r25
    212c:	88 0f       	add	r24, r24
    212e:	08 f0       	brcs	.+2      	; 0x2132 <__addsf3x+0xa2>
    2130:	99 27       	eor	r25, r25
    2132:	ee 0f       	add	r30, r30
    2134:	97 95       	ror	r25
    2136:	87 95       	ror	r24
    2138:	08 95       	ret

0000213a <__cmpsf2>:
    213a:	0e 94 df 10 	call	0x21be	; 0x21be <__fp_cmp>
    213e:	08 f4       	brcc	.+2      	; 0x2142 <__cmpsf2+0x8>
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	08 95       	ret

00002144 <__floatunsisf>:
    2144:	e8 94       	clt
    2146:	09 c0       	rjmp	.+18     	; 0x215a <__floatsisf+0x12>

00002148 <__floatsisf>:
    2148:	97 fb       	bst	r25, 7
    214a:	3e f4       	brtc	.+14     	; 0x215a <__floatsisf+0x12>
    214c:	90 95       	com	r25
    214e:	80 95       	com	r24
    2150:	70 95       	com	r23
    2152:	61 95       	neg	r22
    2154:	7f 4f       	sbci	r23, 0xFF	; 255
    2156:	8f 4f       	sbci	r24, 0xFF	; 255
    2158:	9f 4f       	sbci	r25, 0xFF	; 255
    215a:	99 23       	and	r25, r25
    215c:	a9 f0       	breq	.+42     	; 0x2188 <__floatsisf+0x40>
    215e:	f9 2f       	mov	r31, r25
    2160:	96 e9       	ldi	r25, 0x96	; 150
    2162:	bb 27       	eor	r27, r27
    2164:	93 95       	inc	r25
    2166:	f6 95       	lsr	r31
    2168:	87 95       	ror	r24
    216a:	77 95       	ror	r23
    216c:	67 95       	ror	r22
    216e:	b7 95       	ror	r27
    2170:	f1 11       	cpse	r31, r1
    2172:	f8 cf       	rjmp	.-16     	; 0x2164 <__floatsisf+0x1c>
    2174:	fa f4       	brpl	.+62     	; 0x21b4 <__floatsisf+0x6c>
    2176:	bb 0f       	add	r27, r27
    2178:	11 f4       	brne	.+4      	; 0x217e <__floatsisf+0x36>
    217a:	60 ff       	sbrs	r22, 0
    217c:	1b c0       	rjmp	.+54     	; 0x21b4 <__floatsisf+0x6c>
    217e:	6f 5f       	subi	r22, 0xFF	; 255
    2180:	7f 4f       	sbci	r23, 0xFF	; 255
    2182:	8f 4f       	sbci	r24, 0xFF	; 255
    2184:	9f 4f       	sbci	r25, 0xFF	; 255
    2186:	16 c0       	rjmp	.+44     	; 0x21b4 <__floatsisf+0x6c>
    2188:	88 23       	and	r24, r24
    218a:	11 f0       	breq	.+4      	; 0x2190 <__floatsisf+0x48>
    218c:	96 e9       	ldi	r25, 0x96	; 150
    218e:	11 c0       	rjmp	.+34     	; 0x21b2 <__floatsisf+0x6a>
    2190:	77 23       	and	r23, r23
    2192:	21 f0       	breq	.+8      	; 0x219c <__floatsisf+0x54>
    2194:	9e e8       	ldi	r25, 0x8E	; 142
    2196:	87 2f       	mov	r24, r23
    2198:	76 2f       	mov	r23, r22
    219a:	05 c0       	rjmp	.+10     	; 0x21a6 <__floatsisf+0x5e>
    219c:	66 23       	and	r22, r22
    219e:	71 f0       	breq	.+28     	; 0x21bc <__floatsisf+0x74>
    21a0:	96 e8       	ldi	r25, 0x86	; 134
    21a2:	86 2f       	mov	r24, r22
    21a4:	70 e0       	ldi	r23, 0x00	; 0
    21a6:	60 e0       	ldi	r22, 0x00	; 0
    21a8:	2a f0       	brmi	.+10     	; 0x21b4 <__floatsisf+0x6c>
    21aa:	9a 95       	dec	r25
    21ac:	66 0f       	add	r22, r22
    21ae:	77 1f       	adc	r23, r23
    21b0:	88 1f       	adc	r24, r24
    21b2:	da f7       	brpl	.-10     	; 0x21aa <__floatsisf+0x62>
    21b4:	88 0f       	add	r24, r24
    21b6:	96 95       	lsr	r25
    21b8:	87 95       	ror	r24
    21ba:	97 f9       	bld	r25, 7
    21bc:	08 95       	ret

000021be <__fp_cmp>:
    21be:	99 0f       	add	r25, r25
    21c0:	00 08       	sbc	r0, r0
    21c2:	55 0f       	add	r21, r21
    21c4:	aa 0b       	sbc	r26, r26
    21c6:	e0 e8       	ldi	r30, 0x80	; 128
    21c8:	fe ef       	ldi	r31, 0xFE	; 254
    21ca:	16 16       	cp	r1, r22
    21cc:	17 06       	cpc	r1, r23
    21ce:	e8 07       	cpc	r30, r24
    21d0:	f9 07       	cpc	r31, r25
    21d2:	c0 f0       	brcs	.+48     	; 0x2204 <__fp_cmp+0x46>
    21d4:	12 16       	cp	r1, r18
    21d6:	13 06       	cpc	r1, r19
    21d8:	e4 07       	cpc	r30, r20
    21da:	f5 07       	cpc	r31, r21
    21dc:	98 f0       	brcs	.+38     	; 0x2204 <__fp_cmp+0x46>
    21de:	62 1b       	sub	r22, r18
    21e0:	73 0b       	sbc	r23, r19
    21e2:	84 0b       	sbc	r24, r20
    21e4:	95 0b       	sbc	r25, r21
    21e6:	39 f4       	brne	.+14     	; 0x21f6 <__fp_cmp+0x38>
    21e8:	0a 26       	eor	r0, r26
    21ea:	61 f0       	breq	.+24     	; 0x2204 <__fp_cmp+0x46>
    21ec:	23 2b       	or	r18, r19
    21ee:	24 2b       	or	r18, r20
    21f0:	25 2b       	or	r18, r21
    21f2:	21 f4       	brne	.+8      	; 0x21fc <__fp_cmp+0x3e>
    21f4:	08 95       	ret
    21f6:	0a 26       	eor	r0, r26
    21f8:	09 f4       	brne	.+2      	; 0x21fc <__fp_cmp+0x3e>
    21fa:	a1 40       	sbci	r26, 0x01	; 1
    21fc:	a6 95       	lsr	r26
    21fe:	8f ef       	ldi	r24, 0xFF	; 255
    2200:	81 1d       	adc	r24, r1
    2202:	81 1d       	adc	r24, r1
    2204:	08 95       	ret

00002206 <__fp_inf>:
    2206:	97 f9       	bld	r25, 7
    2208:	9f 67       	ori	r25, 0x7F	; 127
    220a:	80 e8       	ldi	r24, 0x80	; 128
    220c:	70 e0       	ldi	r23, 0x00	; 0
    220e:	60 e0       	ldi	r22, 0x00	; 0
    2210:	08 95       	ret

00002212 <__fp_nan>:
    2212:	9f ef       	ldi	r25, 0xFF	; 255
    2214:	80 ec       	ldi	r24, 0xC0	; 192
    2216:	08 95       	ret

00002218 <__fp_pscA>:
    2218:	00 24       	eor	r0, r0
    221a:	0a 94       	dec	r0
    221c:	16 16       	cp	r1, r22
    221e:	17 06       	cpc	r1, r23
    2220:	18 06       	cpc	r1, r24
    2222:	09 06       	cpc	r0, r25
    2224:	08 95       	ret

00002226 <__fp_pscB>:
    2226:	00 24       	eor	r0, r0
    2228:	0a 94       	dec	r0
    222a:	12 16       	cp	r1, r18
    222c:	13 06       	cpc	r1, r19
    222e:	14 06       	cpc	r1, r20
    2230:	05 06       	cpc	r0, r21
    2232:	08 95       	ret

00002234 <__fp_round>:
    2234:	09 2e       	mov	r0, r25
    2236:	03 94       	inc	r0
    2238:	00 0c       	add	r0, r0
    223a:	11 f4       	brne	.+4      	; 0x2240 <__fp_round+0xc>
    223c:	88 23       	and	r24, r24
    223e:	52 f0       	brmi	.+20     	; 0x2254 <__fp_round+0x20>
    2240:	bb 0f       	add	r27, r27
    2242:	40 f4       	brcc	.+16     	; 0x2254 <__fp_round+0x20>
    2244:	bf 2b       	or	r27, r31
    2246:	11 f4       	brne	.+4      	; 0x224c <__fp_round+0x18>
    2248:	60 ff       	sbrs	r22, 0
    224a:	04 c0       	rjmp	.+8      	; 0x2254 <__fp_round+0x20>
    224c:	6f 5f       	subi	r22, 0xFF	; 255
    224e:	7f 4f       	sbci	r23, 0xFF	; 255
    2250:	8f 4f       	sbci	r24, 0xFF	; 255
    2252:	9f 4f       	sbci	r25, 0xFF	; 255
    2254:	08 95       	ret

00002256 <__fp_split3>:
    2256:	57 fd       	sbrc	r21, 7
    2258:	90 58       	subi	r25, 0x80	; 128
    225a:	44 0f       	add	r20, r20
    225c:	55 1f       	adc	r21, r21
    225e:	59 f0       	breq	.+22     	; 0x2276 <__fp_splitA+0x10>
    2260:	5f 3f       	cpi	r21, 0xFF	; 255
    2262:	71 f0       	breq	.+28     	; 0x2280 <__fp_splitA+0x1a>
    2264:	47 95       	ror	r20

00002266 <__fp_splitA>:
    2266:	88 0f       	add	r24, r24
    2268:	97 fb       	bst	r25, 7
    226a:	99 1f       	adc	r25, r25
    226c:	61 f0       	breq	.+24     	; 0x2286 <__fp_splitA+0x20>
    226e:	9f 3f       	cpi	r25, 0xFF	; 255
    2270:	79 f0       	breq	.+30     	; 0x2290 <__fp_splitA+0x2a>
    2272:	87 95       	ror	r24
    2274:	08 95       	ret
    2276:	12 16       	cp	r1, r18
    2278:	13 06       	cpc	r1, r19
    227a:	14 06       	cpc	r1, r20
    227c:	55 1f       	adc	r21, r21
    227e:	f2 cf       	rjmp	.-28     	; 0x2264 <__fp_split3+0xe>
    2280:	46 95       	lsr	r20
    2282:	f1 df       	rcall	.-30     	; 0x2266 <__fp_splitA>
    2284:	08 c0       	rjmp	.+16     	; 0x2296 <__fp_splitA+0x30>
    2286:	16 16       	cp	r1, r22
    2288:	17 06       	cpc	r1, r23
    228a:	18 06       	cpc	r1, r24
    228c:	99 1f       	adc	r25, r25
    228e:	f1 cf       	rjmp	.-30     	; 0x2272 <__fp_splitA+0xc>
    2290:	86 95       	lsr	r24
    2292:	71 05       	cpc	r23, r1
    2294:	61 05       	cpc	r22, r1
    2296:	08 94       	sec
    2298:	08 95       	ret

0000229a <__fp_zero>:
    229a:	e8 94       	clt

0000229c <__fp_szero>:
    229c:	bb 27       	eor	r27, r27
    229e:	66 27       	eor	r22, r22
    22a0:	77 27       	eor	r23, r23
    22a2:	cb 01       	movw	r24, r22
    22a4:	97 f9       	bld	r25, 7
    22a6:	08 95       	ret

000022a8 <__mulsf3>:
    22a8:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3x>
    22ac:	0c 94 1a 11 	jmp	0x2234	; 0x2234 <__fp_round>
    22b0:	0e 94 0c 11 	call	0x2218	; 0x2218 <__fp_pscA>
    22b4:	38 f0       	brcs	.+14     	; 0x22c4 <__mulsf3+0x1c>
    22b6:	0e 94 13 11 	call	0x2226	; 0x2226 <__fp_pscB>
    22ba:	20 f0       	brcs	.+8      	; 0x22c4 <__mulsf3+0x1c>
    22bc:	95 23       	and	r25, r21
    22be:	11 f0       	breq	.+4      	; 0x22c4 <__mulsf3+0x1c>
    22c0:	0c 94 03 11 	jmp	0x2206	; 0x2206 <__fp_inf>
    22c4:	0c 94 09 11 	jmp	0x2212	; 0x2212 <__fp_nan>
    22c8:	11 24       	eor	r1, r1
    22ca:	0c 94 4e 11 	jmp	0x229c	; 0x229c <__fp_szero>

000022ce <__mulsf3x>:
    22ce:	0e 94 2b 11 	call	0x2256	; 0x2256 <__fp_split3>
    22d2:	70 f3       	brcs	.-36     	; 0x22b0 <__mulsf3+0x8>

000022d4 <__mulsf3_pse>:
    22d4:	95 9f       	mul	r25, r21
    22d6:	c1 f3       	breq	.-16     	; 0x22c8 <__mulsf3+0x20>
    22d8:	95 0f       	add	r25, r21
    22da:	50 e0       	ldi	r21, 0x00	; 0
    22dc:	55 1f       	adc	r21, r21
    22de:	62 9f       	mul	r22, r18
    22e0:	f0 01       	movw	r30, r0
    22e2:	72 9f       	mul	r23, r18
    22e4:	bb 27       	eor	r27, r27
    22e6:	f0 0d       	add	r31, r0
    22e8:	b1 1d       	adc	r27, r1
    22ea:	63 9f       	mul	r22, r19
    22ec:	aa 27       	eor	r26, r26
    22ee:	f0 0d       	add	r31, r0
    22f0:	b1 1d       	adc	r27, r1
    22f2:	aa 1f       	adc	r26, r26
    22f4:	64 9f       	mul	r22, r20
    22f6:	66 27       	eor	r22, r22
    22f8:	b0 0d       	add	r27, r0
    22fa:	a1 1d       	adc	r26, r1
    22fc:	66 1f       	adc	r22, r22
    22fe:	82 9f       	mul	r24, r18
    2300:	22 27       	eor	r18, r18
    2302:	b0 0d       	add	r27, r0
    2304:	a1 1d       	adc	r26, r1
    2306:	62 1f       	adc	r22, r18
    2308:	73 9f       	mul	r23, r19
    230a:	b0 0d       	add	r27, r0
    230c:	a1 1d       	adc	r26, r1
    230e:	62 1f       	adc	r22, r18
    2310:	83 9f       	mul	r24, r19
    2312:	a0 0d       	add	r26, r0
    2314:	61 1d       	adc	r22, r1
    2316:	22 1f       	adc	r18, r18
    2318:	74 9f       	mul	r23, r20
    231a:	33 27       	eor	r19, r19
    231c:	a0 0d       	add	r26, r0
    231e:	61 1d       	adc	r22, r1
    2320:	23 1f       	adc	r18, r19
    2322:	84 9f       	mul	r24, r20
    2324:	60 0d       	add	r22, r0
    2326:	21 1d       	adc	r18, r1
    2328:	82 2f       	mov	r24, r18
    232a:	76 2f       	mov	r23, r22
    232c:	6a 2f       	mov	r22, r26
    232e:	11 24       	eor	r1, r1
    2330:	9f 57       	subi	r25, 0x7F	; 127
    2332:	50 40       	sbci	r21, 0x00	; 0
    2334:	9a f0       	brmi	.+38     	; 0x235c <__mulsf3_pse+0x88>
    2336:	f1 f0       	breq	.+60     	; 0x2374 <__mulsf3_pse+0xa0>
    2338:	88 23       	and	r24, r24
    233a:	4a f0       	brmi	.+18     	; 0x234e <__mulsf3_pse+0x7a>
    233c:	ee 0f       	add	r30, r30
    233e:	ff 1f       	adc	r31, r31
    2340:	bb 1f       	adc	r27, r27
    2342:	66 1f       	adc	r22, r22
    2344:	77 1f       	adc	r23, r23
    2346:	88 1f       	adc	r24, r24
    2348:	91 50       	subi	r25, 0x01	; 1
    234a:	50 40       	sbci	r21, 0x00	; 0
    234c:	a9 f7       	brne	.-22     	; 0x2338 <__mulsf3_pse+0x64>
    234e:	9e 3f       	cpi	r25, 0xFE	; 254
    2350:	51 05       	cpc	r21, r1
    2352:	80 f0       	brcs	.+32     	; 0x2374 <__mulsf3_pse+0xa0>
    2354:	0c 94 03 11 	jmp	0x2206	; 0x2206 <__fp_inf>
    2358:	0c 94 4e 11 	jmp	0x229c	; 0x229c <__fp_szero>
    235c:	5f 3f       	cpi	r21, 0xFF	; 255
    235e:	e4 f3       	brlt	.-8      	; 0x2358 <__mulsf3_pse+0x84>
    2360:	98 3e       	cpi	r25, 0xE8	; 232
    2362:	d4 f3       	brlt	.-12     	; 0x2358 <__mulsf3_pse+0x84>
    2364:	86 95       	lsr	r24
    2366:	77 95       	ror	r23
    2368:	67 95       	ror	r22
    236a:	b7 95       	ror	r27
    236c:	f7 95       	ror	r31
    236e:	e7 95       	ror	r30
    2370:	9f 5f       	subi	r25, 0xFF	; 255
    2372:	c1 f7       	brne	.-16     	; 0x2364 <__mulsf3_pse+0x90>
    2374:	fe 2b       	or	r31, r30
    2376:	88 0f       	add	r24, r24
    2378:	91 1d       	adc	r25, r1
    237a:	96 95       	lsr	r25
    237c:	87 95       	ror	r24
    237e:	97 f9       	bld	r25, 7
    2380:	08 95       	ret

00002382 <__cxa_pure_virtual>:
    2382:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <abort>

00002386 <initVariant>:
    2386:	08 95       	ret

00002388 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2388:	0e 94 b0 18 	call	0x3160	; 0x3160 <init>

	initVariant();
    238c:	0e 94 c3 11 	call	0x2386	; 0x2386 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
    2390:	8f e5       	ldi	r24, 0x5F	; 95
    2392:	94 e0       	ldi	r25, 0x04	; 4
    2394:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN10USBDevice_6attachEv>
#endif
	
	setup();
    2398:	0e 94 e7 03 	call	0x7ce	; 0x7ce <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    239c:	c0 e0       	ldi	r28, 0x00	; 0
    239e:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    23a0:	0e 94 28 04 	call	0x850	; 0x850 <loop>
		if (serialEventRun) serialEventRun();
    23a4:	20 97       	sbiw	r28, 0x00	; 0
    23a6:	e1 f3       	breq	.-8      	; 0x23a0 <main+0x18>
    23a8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    23ac:	f9 cf       	rjmp	.-14     	; 0x23a0 <main+0x18>

000023ae <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    23ae:	cf 92       	push	r12
    23b0:	df 92       	push	r13
    23b2:	ef 92       	push	r14
    23b4:	ff 92       	push	r15
    23b6:	0f 93       	push	r16
    23b8:	1f 93       	push	r17
    23ba:	cf 93       	push	r28
    23bc:	df 93       	push	r29
    23be:	6c 01       	movw	r12, r24
    23c0:	7a 01       	movw	r14, r20
    23c2:	8b 01       	movw	r16, r22
    23c4:	c0 e0       	ldi	r28, 0x00	; 0
    23c6:	d0 e0       	ldi	r29, 0x00	; 0
    23c8:	ce 15       	cp	r28, r14
    23ca:	df 05       	cpc	r29, r15
    23cc:	81 f0       	breq	.+32     	; 0x23ee <_ZN5Print5writeEPKhj+0x40>
    23ce:	d8 01       	movw	r26, r16
    23d0:	6d 91       	ld	r22, X+
    23d2:	8d 01       	movw	r16, r26
    23d4:	d6 01       	movw	r26, r12
    23d6:	ed 91       	ld	r30, X+
    23d8:	fc 91       	ld	r31, X
    23da:	01 90       	ld	r0, Z+
    23dc:	f0 81       	ld	r31, Z
    23de:	e0 2d       	mov	r30, r0
    23e0:	c6 01       	movw	r24, r12
    23e2:	09 95       	icall
    23e4:	89 2b       	or	r24, r25
    23e6:	11 f0       	breq	.+4      	; 0x23ec <_ZN5Print5writeEPKhj+0x3e>
    23e8:	21 96       	adiw	r28, 0x01	; 1
    23ea:	ee cf       	rjmp	.-36     	; 0x23c8 <_ZN5Print5writeEPKhj+0x1a>
    23ec:	7e 01       	movw	r14, r28
    23ee:	c7 01       	movw	r24, r14
    23f0:	df 91       	pop	r29
    23f2:	cf 91       	pop	r28
    23f4:	1f 91       	pop	r17
    23f6:	0f 91       	pop	r16
    23f8:	ff 90       	pop	r15
    23fa:	ef 90       	pop	r14
    23fc:	df 90       	pop	r13
    23fe:	cf 90       	pop	r12
    2400:	08 95       	ret

00002402 <_ZN5Print5writeEPKc>:
    2402:	61 15       	cp	r22, r1
    2404:	71 05       	cpc	r23, r1
    2406:	79 f0       	breq	.+30     	; 0x2426 <_ZN5Print5writeEPKc+0x24>
    2408:	fb 01       	movw	r30, r22
    240a:	01 90       	ld	r0, Z+
    240c:	00 20       	and	r0, r0
    240e:	e9 f7       	brne	.-6      	; 0x240a <_ZN5Print5writeEPKc+0x8>
    2410:	31 97       	sbiw	r30, 0x01	; 1
    2412:	af 01       	movw	r20, r30
    2414:	46 1b       	sub	r20, r22
    2416:	57 0b       	sbc	r21, r23
    2418:	dc 01       	movw	r26, r24
    241a:	ed 91       	ld	r30, X+
    241c:	fc 91       	ld	r31, X
    241e:	02 80       	ldd	r0, Z+2	; 0x02
    2420:	f3 81       	ldd	r31, Z+3	; 0x03
    2422:	e0 2d       	mov	r30, r0
    2424:	09 94       	ijmp
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	08 95       	ret

0000242c <_ZN5Print5printERK6String>:
    242c:	db 01       	movw	r26, r22
    242e:	14 96       	adiw	r26, 0x04	; 4
    2430:	4d 91       	ld	r20, X+
    2432:	5c 91       	ld	r21, X
    2434:	15 97       	sbiw	r26, 0x05	; 5
    2436:	6d 91       	ld	r22, X+
    2438:	7c 91       	ld	r23, X
    243a:	dc 01       	movw	r26, r24
    243c:	ed 91       	ld	r30, X+
    243e:	fc 91       	ld	r31, X
    2440:	02 80       	ldd	r0, Z+2	; 0x02
    2442:	f3 81       	ldd	r31, Z+3	; 0x03
    2444:	e0 2d       	mov	r30, r0
    2446:	09 94       	ijmp

00002448 <_ZN5Print5printEPKc>:
    2448:	0c 94 01 12 	jmp	0x2402	; 0x2402 <_ZN5Print5writeEPKc>

0000244c <_ZN5Print5printEc>:
    244c:	dc 01       	movw	r26, r24
    244e:	ed 91       	ld	r30, X+
    2450:	fc 91       	ld	r31, X
    2452:	01 90       	ld	r0, Z+
    2454:	f0 81       	ld	r31, Z
    2456:	e0 2d       	mov	r30, r0
    2458:	09 94       	ijmp

0000245a <_ZN5Print11printNumberEmh>:
    245a:	8f 92       	push	r8
    245c:	9f 92       	push	r9
    245e:	af 92       	push	r10
    2460:	bf 92       	push	r11
    2462:	ef 92       	push	r14
    2464:	ff 92       	push	r15
    2466:	0f 93       	push	r16
    2468:	1f 93       	push	r17
    246a:	cf 93       	push	r28
    246c:	df 93       	push	r29
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62
    2472:	a1 97       	sbiw	r28, 0x21	; 33
    2474:	0f b6       	in	r0, 0x3f	; 63
    2476:	f8 94       	cli
    2478:	de bf       	out	0x3e, r29	; 62
    247a:	0f be       	out	0x3f, r0	; 63
    247c:	cd bf       	out	0x3d, r28	; 61
    247e:	7c 01       	movw	r14, r24
    2480:	fa 01       	movw	r30, r20
    2482:	cb 01       	movw	r24, r22
    2484:	19 a2       	std	Y+33, r1	; 0x21
    2486:	22 30       	cpi	r18, 0x02	; 2
    2488:	08 f4       	brcc	.+2      	; 0x248c <_ZN5Print11printNumberEmh+0x32>
    248a:	2a e0       	ldi	r18, 0x0A	; 10
    248c:	8e 01       	movw	r16, r28
    248e:	0f 5d       	subi	r16, 0xDF	; 223
    2490:	1f 4f       	sbci	r17, 0xFF	; 255
    2492:	82 2e       	mov	r8, r18
    2494:	91 2c       	mov	r9, r1
    2496:	a1 2c       	mov	r10, r1
    2498:	b1 2c       	mov	r11, r1
    249a:	bf 01       	movw	r22, r30
    249c:	a5 01       	movw	r20, r10
    249e:	94 01       	movw	r18, r8
    24a0:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <__udivmodsi4>
    24a4:	f9 01       	movw	r30, r18
    24a6:	ca 01       	movw	r24, r20
    24a8:	01 50       	subi	r16, 0x01	; 1
    24aa:	11 09       	sbc	r17, r1
    24ac:	6a 30       	cpi	r22, 0x0A	; 10
    24ae:	10 f4       	brcc	.+4      	; 0x24b4 <_ZN5Print11printNumberEmh+0x5a>
    24b0:	60 5d       	subi	r22, 0xD0	; 208
    24b2:	01 c0       	rjmp	.+2      	; 0x24b6 <_ZN5Print11printNumberEmh+0x5c>
    24b4:	69 5c       	subi	r22, 0xC9	; 201
    24b6:	d8 01       	movw	r26, r16
    24b8:	6c 93       	st	X, r22
    24ba:	23 2b       	or	r18, r19
    24bc:	24 2b       	or	r18, r20
    24be:	25 2b       	or	r18, r21
    24c0:	61 f7       	brne	.-40     	; 0x249a <_ZN5Print11printNumberEmh+0x40>
    24c2:	b8 01       	movw	r22, r16
    24c4:	c7 01       	movw	r24, r14
    24c6:	0e 94 01 12 	call	0x2402	; 0x2402 <_ZN5Print5writeEPKc>
    24ca:	a1 96       	adiw	r28, 0x21	; 33
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	f8 94       	cli
    24d0:	de bf       	out	0x3e, r29	; 62
    24d2:	0f be       	out	0x3f, r0	; 63
    24d4:	cd bf       	out	0x3d, r28	; 61
    24d6:	df 91       	pop	r29
    24d8:	cf 91       	pop	r28
    24da:	1f 91       	pop	r17
    24dc:	0f 91       	pop	r16
    24de:	ff 90       	pop	r15
    24e0:	ef 90       	pop	r14
    24e2:	bf 90       	pop	r11
    24e4:	af 90       	pop	r10
    24e6:	9f 90       	pop	r9
    24e8:	8f 90       	pop	r8
    24ea:	08 95       	ret

000024ec <_ZN5Print5printEmi>:
    24ec:	21 15       	cp	r18, r1
    24ee:	31 05       	cpc	r19, r1
    24f0:	41 f4       	brne	.+16     	; 0x2502 <_ZN5Print5printEmi+0x16>
    24f2:	dc 01       	movw	r26, r24
    24f4:	ed 91       	ld	r30, X+
    24f6:	fc 91       	ld	r31, X
    24f8:	01 90       	ld	r0, Z+
    24fa:	f0 81       	ld	r31, Z
    24fc:	e0 2d       	mov	r30, r0
    24fe:	64 2f       	mov	r22, r20
    2500:	09 94       	ijmp
    2502:	0c 94 2d 12 	jmp	0x245a	; 0x245a <_ZN5Print11printNumberEmh>

00002506 <_ZN5Print5printEji>:
    2506:	9a 01       	movw	r18, r20
    2508:	ab 01       	movw	r20, r22
    250a:	60 e0       	ldi	r22, 0x00	; 0
    250c:	70 e0       	ldi	r23, 0x00	; 0
    250e:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <_ZN5Print5printEmi>

00002512 <_ZN5Print5printEli>:
    2512:	cf 92       	push	r12
    2514:	df 92       	push	r13
    2516:	ef 92       	push	r14
    2518:	ff 92       	push	r15
    251a:	0f 93       	push	r16
    251c:	1f 93       	push	r17
    251e:	cf 93       	push	r28
    2520:	df 93       	push	r29
    2522:	21 15       	cp	r18, r1
    2524:	31 05       	cpc	r19, r1
    2526:	81 f4       	brne	.+32     	; 0x2548 <_ZN5Print5printEli+0x36>
    2528:	dc 01       	movw	r26, r24
    252a:	ed 91       	ld	r30, X+
    252c:	fc 91       	ld	r31, X
    252e:	01 90       	ld	r0, Z+
    2530:	f0 81       	ld	r31, Z
    2532:	e0 2d       	mov	r30, r0
    2534:	64 2f       	mov	r22, r20
    2536:	df 91       	pop	r29
    2538:	cf 91       	pop	r28
    253a:	1f 91       	pop	r17
    253c:	0f 91       	pop	r16
    253e:	ff 90       	pop	r15
    2540:	ef 90       	pop	r14
    2542:	df 90       	pop	r13
    2544:	cf 90       	pop	r12
    2546:	09 94       	ijmp
    2548:	2a 30       	cpi	r18, 0x0A	; 10
    254a:	31 05       	cpc	r19, r1
    254c:	01 f5       	brne	.+64     	; 0x258e <_ZN5Print5printEli+0x7c>
    254e:	77 ff       	sbrs	r23, 7
    2550:	1d c0       	rjmp	.+58     	; 0x258c <_ZN5Print5printEli+0x7a>
    2552:	6a 01       	movw	r12, r20
    2554:	7b 01       	movw	r14, r22
    2556:	ec 01       	movw	r28, r24
    2558:	6d e2       	ldi	r22, 0x2D	; 45
    255a:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN5Print5printEc>
    255e:	8c 01       	movw	r16, r24
    2560:	44 27       	eor	r20, r20
    2562:	55 27       	eor	r21, r21
    2564:	ba 01       	movw	r22, r20
    2566:	4c 19       	sub	r20, r12
    2568:	5d 09       	sbc	r21, r13
    256a:	6e 09       	sbc	r22, r14
    256c:	7f 09       	sbc	r23, r15
    256e:	2a e0       	ldi	r18, 0x0A	; 10
    2570:	ce 01       	movw	r24, r28
    2572:	0e 94 2d 12 	call	0x245a	; 0x245a <_ZN5Print11printNumberEmh>
    2576:	80 0f       	add	r24, r16
    2578:	91 1f       	adc	r25, r17
    257a:	df 91       	pop	r29
    257c:	cf 91       	pop	r28
    257e:	1f 91       	pop	r17
    2580:	0f 91       	pop	r16
    2582:	ff 90       	pop	r15
    2584:	ef 90       	pop	r14
    2586:	df 90       	pop	r13
    2588:	cf 90       	pop	r12
    258a:	08 95       	ret
    258c:	2a e0       	ldi	r18, 0x0A	; 10
    258e:	df 91       	pop	r29
    2590:	cf 91       	pop	r28
    2592:	1f 91       	pop	r17
    2594:	0f 91       	pop	r16
    2596:	ff 90       	pop	r15
    2598:	ef 90       	pop	r14
    259a:	df 90       	pop	r13
    259c:	cf 90       	pop	r12
    259e:	0c 94 2d 12 	jmp	0x245a	; 0x245a <_ZN5Print11printNumberEmh>

000025a2 <_ZN5Print5printEii>:
    25a2:	9a 01       	movw	r18, r20
    25a4:	ab 01       	movw	r20, r22
    25a6:	77 0f       	add	r23, r23
    25a8:	66 0b       	sbc	r22, r22
    25aa:	77 0b       	sbc	r23, r23
    25ac:	0c 94 89 12 	jmp	0x2512	; 0x2512 <_ZN5Print5printEli>

000025b0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    25b0:	7f 92       	push	r7
    25b2:	8f 92       	push	r8
    25b4:	9f 92       	push	r9
    25b6:	af 92       	push	r10
    25b8:	bf 92       	push	r11
    25ba:	cf 92       	push	r12
    25bc:	df 92       	push	r13
    25be:	ef 92       	push	r14
    25c0:	ff 92       	push	r15
    25c2:	0f 93       	push	r16
    25c4:	1f 93       	push	r17
    25c6:	cf 93       	push	r28
    25c8:	df 93       	push	r29
    25ca:	8c 01       	movw	r16, r24
    25cc:	6a 01       	movw	r12, r20
    25ce:	7b 01       	movw	r14, r22
    25d0:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    25d2:	9a 01       	movw	r18, r20
    25d4:	ab 01       	movw	r20, r22
    25d6:	c7 01       	movw	r24, r14
    25d8:	b6 01       	movw	r22, r12
    25da:	0e 94 bc 1c 	call	0x3978	; 0x3978 <__unordsf2>
    25de:	88 23       	and	r24, r24
    25e0:	19 f0       	breq	.+6      	; 0x25e8 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    25e2:	6b e4       	ldi	r22, 0x4B	; 75
    25e4:	72 e0       	ldi	r23, 0x02	; 2
    25e6:	27 c0       	rjmp	.+78     	; 0x2636 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    25e8:	46 01       	movw	r8, r12
    25ea:	57 01       	movw	r10, r14
    25ec:	e8 94       	clt
    25ee:	b7 f8       	bld	r11, 7
    25f0:	2f ef       	ldi	r18, 0xFF	; 255
    25f2:	3f ef       	ldi	r19, 0xFF	; 255
    25f4:	4f e7       	ldi	r20, 0x7F	; 127
    25f6:	5f e7       	ldi	r21, 0x7F	; 127
    25f8:	c5 01       	movw	r24, r10
    25fa:	b4 01       	movw	r22, r8
    25fc:	0e 94 bc 1c 	call	0x3978	; 0x3978 <__unordsf2>
    2600:	81 11       	cpse	r24, r1
    2602:	0d c0       	rjmp	.+26     	; 0x261e <_ZN5Print10printFloatEdh+0x6e>
    2604:	2f ef       	ldi	r18, 0xFF	; 255
    2606:	3f ef       	ldi	r19, 0xFF	; 255
    2608:	4f e7       	ldi	r20, 0x7F	; 127
    260a:	5f e7       	ldi	r21, 0x7F	; 127
    260c:	c5 01       	movw	r24, r10
    260e:	b4 01       	movw	r22, r8
    2610:	0e 94 9d 10 	call	0x213a	; 0x213a <__cmpsf2>
    2614:	18 16       	cp	r1, r24
    2616:	1c f4       	brge	.+6      	; 0x261e <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2618:	6f e4       	ldi	r22, 0x4F	; 79
    261a:	72 e0       	ldi	r23, 0x02	; 2
    261c:	0c c0       	rjmp	.+24     	; 0x2636 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    261e:	2f ef       	ldi	r18, 0xFF	; 255
    2620:	3f ef       	ldi	r19, 0xFF	; 255
    2622:	4f e7       	ldi	r20, 0x7F	; 127
    2624:	5f e4       	ldi	r21, 0x4F	; 79
    2626:	c7 01       	movw	r24, r14
    2628:	b6 01       	movw	r22, r12
    262a:	0e 94 b7 1c 	call	0x396e	; 0x396e <__gesf2>
    262e:	18 16       	cp	r1, r24
    2630:	94 f4       	brge	.+36     	; 0x2656 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2632:	63 e5       	ldi	r22, 0x53	; 83
    2634:	72 e0       	ldi	r23, 0x02	; 2
    2636:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2638:	df 91       	pop	r29
    263a:	cf 91       	pop	r28
    263c:	1f 91       	pop	r17
    263e:	0f 91       	pop	r16
    2640:	ff 90       	pop	r15
    2642:	ef 90       	pop	r14
    2644:	df 90       	pop	r13
    2646:	cf 90       	pop	r12
    2648:	bf 90       	pop	r11
    264a:	af 90       	pop	r10
    264c:	9f 90       	pop	r9
    264e:	8f 90       	pop	r8
    2650:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2652:	0c 94 01 12 	jmp	0x2402	; 0x2402 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    2656:	2f ef       	ldi	r18, 0xFF	; 255
    2658:	3f ef       	ldi	r19, 0xFF	; 255
    265a:	4f e7       	ldi	r20, 0x7F	; 127
    265c:	5f ec       	ldi	r21, 0xCF	; 207
    265e:	c7 01       	movw	r24, r14
    2660:	b6 01       	movw	r22, r12
    2662:	0e 94 9d 10 	call	0x213a	; 0x213a <__cmpsf2>
    2666:	87 fd       	sbrc	r24, 7
    2668:	e4 cf       	rjmp	.-56     	; 0x2632 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	a9 01       	movw	r20, r18
    2670:	c7 01       	movw	r24, r14
    2672:	b6 01       	movw	r22, r12
    2674:	0e 94 9d 10 	call	0x213a	; 0x213a <__cmpsf2>
    2678:	87 ff       	sbrs	r24, 7
    267a:	0a c0       	rjmp	.+20     	; 0x2690 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    267c:	6d e2       	ldi	r22, 0x2D	; 45
    267e:	c8 01       	movw	r24, r16
    2680:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN5Print5printEc>
    2684:	ec 01       	movw	r28, r24
     number = -number;
    2686:	f7 fa       	bst	r15, 7
    2688:	f0 94       	com	r15
    268a:	f7 f8       	bld	r15, 7
    268c:	f0 94       	com	r15
    268e:	02 c0       	rjmp	.+4      	; 0x2694 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    2690:	c0 e0       	ldi	r28, 0x00	; 0
    2692:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2694:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    2696:	60 e0       	ldi	r22, 0x00	; 0
    2698:	70 e0       	ldi	r23, 0x00	; 0
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    269e:	7b 14       	cp	r7, r11
    26a0:	41 f0       	breq	.+16     	; 0x26b2 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	40 e2       	ldi	r20, 0x20	; 32
    26a8:	51 e4       	ldi	r21, 0x41	; 65
    26aa:	0e 94 16 1c 	call	0x382c	; 0x382c <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    26ae:	b3 94       	inc	r11
    26b0:	f6 cf       	rjmp	.-20     	; 0x269e <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    26b2:	a7 01       	movw	r20, r14
    26b4:	96 01       	movw	r18, r12
    26b6:	0e 94 31 10 	call	0x2062	; 0x2062 <__addsf3>
    26ba:	6b 01       	movw	r12, r22
    26bc:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    26be:	0e 94 88 1c 	call	0x3910	; 0x3910 <__fixunssfsi>
    26c2:	4b 01       	movw	r8, r22
    26c4:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    26c6:	2a e0       	ldi	r18, 0x0A	; 10
    26c8:	ab 01       	movw	r20, r22
    26ca:	bc 01       	movw	r22, r24
    26cc:	c8 01       	movw	r24, r16
    26ce:	0e 94 2d 12 	call	0x245a	; 0x245a <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    26d2:	c8 0f       	add	r28, r24
    26d4:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    26d6:	77 20       	and	r7, r7
    26d8:	b9 f1       	breq	.+110    	; 0x2748 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    26da:	c5 01       	movw	r24, r10
    26dc:	b4 01       	movw	r22, r8
    26de:	0e 94 a2 10 	call	0x2144	; 0x2144 <__floatunsisf>
    26e2:	9b 01       	movw	r18, r22
    26e4:	ac 01       	movw	r20, r24
    26e6:	c7 01       	movw	r24, r14
    26e8:	b6 01       	movw	r22, r12
    26ea:	0e 94 30 10 	call	0x2060	; 0x2060 <__subsf3>
    26ee:	6b 01       	movw	r12, r22
    26f0:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    26f2:	6e e2       	ldi	r22, 0x2E	; 46
    26f4:	c8 01       	movw	r24, r16
    26f6:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN5Print5printEc>
    26fa:	c8 0f       	add	r28, r24
    26fc:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e2       	ldi	r20, 0x20	; 32
    2704:	51 e4       	ldi	r21, 0x41	; 65
    2706:	c7 01       	movw	r24, r14
    2708:	b6 01       	movw	r22, r12
    270a:	0e 94 54 11 	call	0x22a8	; 0x22a8 <__mulsf3>
    270e:	4b 01       	movw	r8, r22
    2710:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    2712:	0e 94 88 1c 	call	0x3910	; 0x3910 <__fixunssfsi>
    2716:	6b 01       	movw	r12, r22
    2718:	7c 01       	movw	r14, r24
    n += print(toPrint);
    271a:	4a e0       	ldi	r20, 0x0A	; 10
    271c:	50 e0       	ldi	r21, 0x00	; 0
    271e:	c8 01       	movw	r24, r16
    2720:	0e 94 83 12 	call	0x2506	; 0x2506 <_ZN5Print5printEji>
    2724:	c8 0f       	add	r28, r24
    2726:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    2728:	b6 01       	movw	r22, r12
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	0e 94 a2 10 	call	0x2144	; 0x2144 <__floatunsisf>
    2732:	9b 01       	movw	r18, r22
    2734:	ac 01       	movw	r20, r24
    2736:	c5 01       	movw	r24, r10
    2738:	b4 01       	movw	r22, r8
    273a:	0e 94 30 10 	call	0x2060	; 0x2060 <__subsf3>
    273e:	6b 01       	movw	r12, r22
    2740:	7c 01       	movw	r14, r24
    2742:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2744:	71 10       	cpse	r7, r1
    2746:	db cf       	rjmp	.-74     	; 0x26fe <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2748:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    274a:	df 91       	pop	r29
    274c:	cf 91       	pop	r28
    274e:	1f 91       	pop	r17
    2750:	0f 91       	pop	r16
    2752:	ff 90       	pop	r15
    2754:	ef 90       	pop	r14
    2756:	df 90       	pop	r13
    2758:	cf 90       	pop	r12
    275a:	bf 90       	pop	r11
    275c:	af 90       	pop	r10
    275e:	9f 90       	pop	r9
    2760:	8f 90       	pop	r8
    2762:	7f 90       	pop	r7
    2764:	08 95       	ret

00002766 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2766:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <_ZN5Print10printFloatEdh>

0000276a <_ZL4RecvPVhh>:
//=======================================================================
//=======================================================================

USBDevice_ USBDevice;

USBDevice_::USBDevice_()
    276a:	61 50       	subi	r22, 0x01	; 1
    276c:	30 f0       	brcs	.+12     	; 0x277a <_ZL4RecvPVhh+0x10>
    276e:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2772:	fc 01       	movw	r30, r24
    2774:	20 83       	st	Z, r18
    2776:	01 96       	adiw	r24, 0x01	; 1
    2778:	f8 cf       	rjmp	.-16     	; 0x276a <_ZL4RecvPVhh>
    277a:	28 98       	cbi	0x05, 0	; 5
    277c:	84 e6       	ldi	r24, 0x64	; 100
    277e:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <RxLEDPulse>
    2782:	08 95       	ret

00002784 <_ZL11SendControlh>:
    2784:	40 91 62 04 	lds	r20, 0x0462	; 0x800462 <_ZL6_cmark>
    2788:	50 91 63 04 	lds	r21, 0x0463	; 0x800463 <_ZL6_cmark+0x1>
    278c:	20 91 60 04 	lds	r18, 0x0460	; 0x800460 <_ZL5_cend>
    2790:	30 91 61 04 	lds	r19, 0x0461	; 0x800461 <_ZL5_cend+0x1>
    2794:	42 17       	cp	r20, r18
    2796:	53 07       	cpc	r21, r19
    2798:	b4 f4       	brge	.+44     	; 0x27c6 <_ZL11SendControlh+0x42>
    279a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    279e:	95 70       	andi	r25, 0x05	; 5
    27a0:	e1 f3       	breq	.-8      	; 0x279a <_ZL11SendControlh+0x16>
    27a2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    27a6:	92 fd       	sbrc	r25, 2
    27a8:	19 c0       	rjmp	.+50     	; 0x27dc <_ZL11SendControlh+0x58>
    27aa:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    27ae:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <_ZL6_cmark>
    27b2:	90 91 63 04 	lds	r25, 0x0463	; 0x800463 <_ZL6_cmark+0x1>
    27b6:	01 96       	adiw	r24, 0x01	; 1
    27b8:	8f 73       	andi	r24, 0x3F	; 63
    27ba:	99 27       	eor	r25, r25
    27bc:	89 2b       	or	r24, r25
    27be:	19 f4       	brne	.+6      	; 0x27c6 <_ZL11SendControlh+0x42>
    27c0:	8e ef       	ldi	r24, 0xFE	; 254
    27c2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    27c6:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <_ZL6_cmark>
    27ca:	90 91 63 04 	lds	r25, 0x0463	; 0x800463 <_ZL6_cmark+0x1>
    27ce:	01 96       	adiw	r24, 0x01	; 1
    27d0:	90 93 63 04 	sts	0x0463, r25	; 0x800463 <_ZL6_cmark+0x1>
    27d4:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <_ZL6_cmark>
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	08 95       	ret
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	08 95       	ret

000027e0 <_ZL24USB_SendStringDescriptorPKhhh>:
    27e0:	df 92       	push	r13
    27e2:	ef 92       	push	r14
    27e4:	ff 92       	push	r15
    27e6:	0f 93       	push	r16
    27e8:	1f 93       	push	r17
    27ea:	cf 93       	push	r28
    27ec:	df 93       	push	r29
    27ee:	d8 2e       	mov	r13, r24
    27f0:	f9 2e       	mov	r15, r25
    27f2:	e4 2e       	mov	r14, r20
    27f4:	06 2f       	mov	r16, r22
    27f6:	10 e0       	ldi	r17, 0x00	; 0
    27f8:	c8 01       	movw	r24, r16
    27fa:	01 96       	adiw	r24, 0x01	; 1
    27fc:	88 0f       	add	r24, r24
    27fe:	0e 94 c2 13 	call	0x2784	; 0x2784 <_ZL11SendControlh>
    2802:	83 e0       	ldi	r24, 0x03	; 3
    2804:	0e 94 c2 13 	call	0x2784	; 0x2784 <_ZL11SendControlh>
    2808:	cd 2d       	mov	r28, r13
    280a:	df 2d       	mov	r29, r15
    280c:	0c 0f       	add	r16, r28
    280e:	1d 1f       	adc	r17, r29
    2810:	c0 17       	cp	r28, r16
    2812:	d1 07       	cpc	r29, r17
    2814:	89 f0       	breq	.+34     	; 0x2838 <_ZL24USB_SendStringDescriptorPKhhh+0x58>
    2816:	e7 fe       	sbrs	r14, 7
    2818:	03 c0       	rjmp	.+6      	; 0x2820 <_ZL24USB_SendStringDescriptorPKhhh+0x40>
    281a:	fe 01       	movw	r30, r28
    281c:	84 91       	lpm	r24, Z
    281e:	01 c0       	rjmp	.+2      	; 0x2822 <_ZL24USB_SendStringDescriptorPKhhh+0x42>
    2820:	88 81       	ld	r24, Y
    2822:	0e 94 c2 13 	call	0x2784	; 0x2784 <_ZL11SendControlh>
    2826:	f8 2e       	mov	r15, r24
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	0e 94 c2 13 	call	0x2784	; 0x2784 <_ZL11SendControlh>
    282e:	8f 21       	and	r24, r15
    2830:	21 96       	adiw	r28, 0x01	; 1
    2832:	81 11       	cpse	r24, r1
    2834:	ed cf       	rjmp	.-38     	; 0x2810 <_ZL24USB_SendStringDescriptorPKhhh+0x30>
    2836:	01 c0       	rjmp	.+2      	; 0x283a <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	df 91       	pop	r29
    283c:	cf 91       	pop	r28
    283e:	1f 91       	pop	r17
    2840:	0f 91       	pop	r16
    2842:	ff 90       	pop	r15
    2844:	ef 90       	pop	r14
    2846:	df 90       	pop	r13
    2848:	08 95       	ret

0000284a <_ZL15USB_ClockEnablev>:
    284a:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    284e:	81 60       	ori	r24, 0x01	; 1
    2850:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    2854:	80 ea       	ldi	r24, 0xA0	; 160
    2856:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    285a:	89 b5       	in	r24, 0x29	; 41
    285c:	80 61       	ori	r24, 0x10	; 16
    285e:	89 bd       	out	0x29, r24	; 41
    2860:	89 b5       	in	r24, 0x29	; 41
    2862:	82 60       	ori	r24, 0x02	; 2
    2864:	89 bd       	out	0x29, r24	; 41
    2866:	09 b4       	in	r0, 0x29	; 41
    2868:	00 fe       	sbrs	r0, 0
    286a:	fd cf       	rjmp	.-6      	; 0x2866 <_ZL15USB_ClockEnablev+0x1c>
    286c:	61 e0       	ldi	r22, 0x01	; 1
    286e:	70 e0       	ldi	r23, 0x00	; 0
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	0e 94 69 18 	call	0x30d2	; 0x30d2 <delay>
    2878:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    287c:	8f 7c       	andi	r24, 0xCF	; 207
    287e:	80 61       	ori	r24, 0x10	; 16
    2880:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2884:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2888:	80 7f       	andi	r24, 0xF0	; 240
    288a:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    288e:	08 95       	ret

00002890 <_ZL14SendInterfacesv>:
    2890:	cf 93       	push	r28
    2892:	df 93       	push	r29
    2894:	1f 92       	push	r1
    2896:	cd b7       	in	r28, 0x3d	; 61
    2898:	de b7       	in	r29, 0x3e	; 62
    289a:	19 82       	std	Y+1, r1	; 0x01
    289c:	ce 01       	movw	r24, r28
    289e:	01 96       	adiw	r24, 0x01	; 1
    28a0:	0e 94 ce 1a 	call	0x359c	; 0x359c <_Z16CDC_GetInterfacePh>
    28a4:	0e 94 02 1c 	call	0x3804	; 0x3804 <_Z12PluggableUSBv>
    28a8:	be 01       	movw	r22, r28
    28aa:	6f 5f       	subi	r22, 0xFF	; 255
    28ac:	7f 4f       	sbci	r23, 0xFF	; 255
    28ae:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <_ZN13PluggableUSB_12getInterfaceEPh>
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	0f 90       	pop	r0
    28b6:	df 91       	pop	r29
    28b8:	cf 91       	pop	r28
    28ba:	08 95       	ret

000028bc <_ZN6LockEPC1Eh>:
    28bc:	2f b7       	in	r18, 0x3f	; 63
    28be:	fc 01       	movw	r30, r24
    28c0:	20 83       	st	Z, r18
    28c2:	f8 94       	cli
    28c4:	67 70       	andi	r22, 0x07	; 7
    28c6:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    28ca:	08 95       	ret

000028cc <_Z13USB_Availableh>:
    28cc:	cf 93       	push	r28
    28ce:	df 93       	push	r29
    28d0:	1f 92       	push	r1
    28d2:	cd b7       	in	r28, 0x3d	; 61
    28d4:	de b7       	in	r29, 0x3e	; 62
    28d6:	68 2f       	mov	r22, r24
    28d8:	ce 01       	movw	r24, r28
    28da:	01 96       	adiw	r24, 0x01	; 1
    28dc:	0e 94 5e 14 	call	0x28bc	; 0x28bc <_ZN6LockEPC1Eh>
    28e0:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    28e4:	99 81       	ldd	r25, Y+1	; 0x01
    28e6:	9f bf       	out	0x3f, r25	; 63
    28e8:	0f 90       	pop	r0
    28ea:	df 91       	pop	r29
    28ec:	cf 91       	pop	r28
    28ee:	08 95       	ret

000028f0 <_Z8USB_RecvhPvi>:
    28f0:	ef 92       	push	r14
    28f2:	ff 92       	push	r15
    28f4:	0f 93       	push	r16
    28f6:	1f 93       	push	r17
    28f8:	cf 93       	push	r28
    28fa:	df 93       	push	r29
    28fc:	1f 92       	push	r1
    28fe:	cd b7       	in	r28, 0x3d	; 61
    2900:	de b7       	in	r29, 0x3e	; 62
    2902:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <_usbConfiguration>
    2906:	99 23       	and	r25, r25
    2908:	11 f0       	breq	.+4      	; 0x290e <_Z8USB_RecvhPvi+0x1e>
    290a:	57 ff       	sbrs	r21, 7
    290c:	03 c0       	rjmp	.+6      	; 0x2914 <_Z8USB_RecvhPvi+0x24>
    290e:	8f ef       	ldi	r24, 0xFF	; 255
    2910:	9f ef       	ldi	r25, 0xFF	; 255
    2912:	29 c0       	rjmp	.+82     	; 0x2966 <_Z8USB_RecvhPvi+0x76>
    2914:	8a 01       	movw	r16, r20
    2916:	7b 01       	movw	r14, r22
    2918:	68 2f       	mov	r22, r24
    291a:	ce 01       	movw	r24, r28
    291c:	01 96       	adiw	r24, 0x01	; 1
    291e:	0e 94 5e 14 	call	0x28bc	; 0x28bc <_ZN6LockEPC1Eh>
    2922:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	02 17       	cp	r16, r18
    292a:	13 07       	cpc	r17, r19
    292c:	0c f4       	brge	.+2      	; 0x2930 <_Z8USB_RecvhPvi+0x40>
    292e:	98 01       	movw	r18, r16
    2930:	82 2f       	mov	r24, r18
    2932:	f7 01       	movw	r30, r14
    2934:	94 e6       	ldi	r25, 0x64	; 100
    2936:	81 50       	subi	r24, 0x01	; 1
    2938:	38 f0       	brcs	.+14     	; 0x2948 <_Z8USB_RecvhPvi+0x58>
    293a:	28 98       	cbi	0x05, 0	; 5
    293c:	90 93 67 04 	sts	0x0467, r25	; 0x800467 <RxLEDPulse>
    2940:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2944:	41 93       	st	Z+, r20
    2946:	f7 cf       	rjmp	.-18     	; 0x2936 <_Z8USB_RecvhPvi+0x46>
    2948:	21 15       	cp	r18, r1
    294a:	31 05       	cpc	r19, r1
    294c:	21 f0       	breq	.+8      	; 0x2956 <_Z8USB_RecvhPvi+0x66>
    294e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2952:	88 23       	and	r24, r24
    2954:	21 f0       	breq	.+8      	; 0x295e <_Z8USB_RecvhPvi+0x6e>
    2956:	89 81       	ldd	r24, Y+1	; 0x01
    2958:	8f bf       	out	0x3f, r24	; 63
    295a:	c9 01       	movw	r24, r18
    295c:	04 c0       	rjmp	.+8      	; 0x2966 <_Z8USB_RecvhPvi+0x76>
    295e:	8b e6       	ldi	r24, 0x6B	; 107
    2960:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2964:	f8 cf       	rjmp	.-16     	; 0x2956 <_Z8USB_RecvhPvi+0x66>
    2966:	0f 90       	pop	r0
    2968:	df 91       	pop	r29
    296a:	cf 91       	pop	r28
    296c:	1f 91       	pop	r17
    296e:	0f 91       	pop	r16
    2970:	ff 90       	pop	r15
    2972:	ef 90       	pop	r14
    2974:	08 95       	ret

00002976 <_Z8USB_Recvh>:
    2976:	cf 93       	push	r28
    2978:	df 93       	push	r29
    297a:	1f 92       	push	r1
    297c:	cd b7       	in	r28, 0x3d	; 61
    297e:	de b7       	in	r29, 0x3e	; 62
    2980:	41 e0       	ldi	r20, 0x01	; 1
    2982:	50 e0       	ldi	r21, 0x00	; 0
    2984:	be 01       	movw	r22, r28
    2986:	6f 5f       	subi	r22, 0xFF	; 255
    2988:	7f 4f       	sbci	r23, 0xFF	; 255
    298a:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_Z8USB_RecvhPvi>
    298e:	01 97       	sbiw	r24, 0x01	; 1
    2990:	19 f4       	brne	.+6      	; 0x2998 <_Z8USB_Recvh+0x22>
    2992:	89 81       	ldd	r24, Y+1	; 0x01
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	02 c0       	rjmp	.+4      	; 0x299c <_Z8USB_Recvh+0x26>
    2998:	8f ef       	ldi	r24, 0xFF	; 255
    299a:	9f ef       	ldi	r25, 0xFF	; 255
    299c:	0f 90       	pop	r0
    299e:	df 91       	pop	r29
    29a0:	cf 91       	pop	r28
    29a2:	08 95       	ret

000029a4 <_Z13USB_SendSpaceh>:
    29a4:	cf 93       	push	r28
    29a6:	df 93       	push	r29
    29a8:	1f 92       	push	r1
    29aa:	cd b7       	in	r28, 0x3d	; 61
    29ac:	de b7       	in	r29, 0x3e	; 62
    29ae:	68 2f       	mov	r22, r24
    29b0:	ce 01       	movw	r24, r28
    29b2:	01 96       	adiw	r24, 0x01	; 1
    29b4:	0e 94 5e 14 	call	0x28bc	; 0x28bc <_ZN6LockEPC1Eh>
    29b8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    29bc:	89 2f       	mov	r24, r25
    29be:	80 72       	andi	r24, 0x20	; 32
    29c0:	95 ff       	sbrs	r25, 5
    29c2:	04 c0       	rjmp	.+8      	; 0x29cc <_Z13USB_SendSpaceh+0x28>
    29c4:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    29c8:	80 e4       	ldi	r24, 0x40	; 64
    29ca:	89 1b       	sub	r24, r25
    29cc:	99 81       	ldd	r25, Y+1	; 0x01
    29ce:	9f bf       	out	0x3f, r25	; 63
    29d0:	0f 90       	pop	r0
    29d2:	df 91       	pop	r29
    29d4:	cf 91       	pop	r28
    29d6:	08 95       	ret

000029d8 <_Z8USB_SendhPKvi>:
    29d8:	5f 92       	push	r5
    29da:	6f 92       	push	r6
    29dc:	7f 92       	push	r7
    29de:	8f 92       	push	r8
    29e0:	9f 92       	push	r9
    29e2:	af 92       	push	r10
    29e4:	bf 92       	push	r11
    29e6:	cf 92       	push	r12
    29e8:	df 92       	push	r13
    29ea:	ef 92       	push	r14
    29ec:	ff 92       	push	r15
    29ee:	0f 93       	push	r16
    29f0:	1f 93       	push	r17
    29f2:	cf 93       	push	r28
    29f4:	df 93       	push	r29
    29f6:	1f 92       	push	r1
    29f8:	cd b7       	in	r28, 0x3d	; 61
    29fa:	de b7       	in	r29, 0x3e	; 62
    29fc:	98 2e       	mov	r9, r24
    29fe:	6b 01       	movw	r12, r22
    2a00:	b4 2e       	mov	r11, r20
    2a02:	05 2f       	mov	r16, r21
    2a04:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <_usbConfiguration>
    2a08:	81 11       	cpse	r24, r1
    2a0a:	03 c0       	rjmp	.+6      	; 0x2a12 <_Z8USB_SendhPKvi+0x3a>
    2a0c:	8f ef       	ldi	r24, 0xFF	; 255
    2a0e:	9f ef       	ldi	r25, 0xFF	; 255
    2a10:	77 c0       	rjmp	.+238    	; 0x2b00 <_Z8USB_SendhPKvi+0x128>
    2a12:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <_usbSuspendState>
    2a16:	80 ff       	sbrs	r24, 0
    2a18:	05 c0       	rjmp	.+10     	; 0x2a24 <_Z8USB_SendhPKvi+0x4c>
    2a1a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2a1e:	82 60       	ori	r24, 0x02	; 2
    2a20:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2a24:	eb 2c       	mov	r14, r11
    2a26:	f0 2e       	mov	r15, r16
    2a28:	a1 2c       	mov	r10, r1
    2a2a:	8a ef       	ldi	r24, 0xFA	; 250
    2a2c:	88 2e       	mov	r8, r24
    2a2e:	89 2d       	mov	r24, r9
    2a30:	80 72       	andi	r24, 0x20	; 32
    2a32:	68 2e       	mov	r6, r24
    2a34:	89 2d       	mov	r24, r9
    2a36:	80 74       	andi	r24, 0x40	; 64
    2a38:	58 2e       	mov	r5, r24
    2a3a:	9a e3       	ldi	r25, 0x3A	; 58
    2a3c:	79 2e       	mov	r7, r25
    2a3e:	e1 14       	cp	r14, r1
    2a40:	f1 04       	cpc	r15, r1
    2a42:	19 f4       	brne	.+6      	; 0x2a4a <_Z8USB_SendhPKvi+0x72>
    2a44:	aa 20       	and	r10, r10
    2a46:	09 f4       	brne	.+2      	; 0x2a4a <_Z8USB_SendhPKvi+0x72>
    2a48:	55 c0       	rjmp	.+170    	; 0x2af4 <_Z8USB_SendhPKvi+0x11c>
    2a4a:	89 2d       	mov	r24, r9
    2a4c:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <_Z13USB_SendSpaceh>
    2a50:	18 2f       	mov	r17, r24
    2a52:	81 11       	cpse	r24, r1
    2a54:	0a c0       	rjmp	.+20     	; 0x2a6a <_Z8USB_SendhPKvi+0x92>
    2a56:	8a 94       	dec	r8
    2a58:	88 20       	and	r8, r8
    2a5a:	c1 f2       	breq	.-80     	; 0x2a0c <_Z8USB_SendhPKvi+0x34>
    2a5c:	61 e0       	ldi	r22, 0x01	; 1
    2a5e:	70 e0       	ldi	r23, 0x00	; 0
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	0e 94 69 18 	call	0x30d2	; 0x30d2 <delay>
    2a68:	ea cf       	rjmp	.-44     	; 0x2a3e <_Z8USB_SendhPKvi+0x66>
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	e8 16       	cp	r14, r24
    2a6e:	f9 06       	cpc	r15, r25
    2a70:	0c f4       	brge	.+2      	; 0x2a74 <_Z8USB_SendhPKvi+0x9c>
    2a72:	1e 2d       	mov	r17, r14
    2a74:	69 2d       	mov	r22, r9
    2a76:	ce 01       	movw	r24, r28
    2a78:	01 96       	adiw	r24, 0x01	; 1
    2a7a:	0e 94 5e 14 	call	0x28bc	; 0x28bc <_ZN6LockEPC1Eh>
    2a7e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a82:	85 ff       	sbrs	r24, 5
    2a84:	34 c0       	rjmp	.+104    	; 0x2aee <_Z8USB_SendhPKvi+0x116>
    2a86:	81 2f       	mov	r24, r17
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	e8 1a       	sub	r14, r24
    2a8c:	f9 0a       	sbc	r15, r25
    2a8e:	66 20       	and	r6, r6
    2a90:	29 f0       	breq	.+10     	; 0x2a9c <_Z8USB_SendhPKvi+0xc4>
    2a92:	11 50       	subi	r17, 0x01	; 1
    2a94:	a0 f0       	brcs	.+40     	; 0x2abe <_Z8USB_SendhPKvi+0xe6>
    2a96:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2a9a:	fb cf       	rjmp	.-10     	; 0x2a92 <_Z8USB_SendhPKvi+0xba>
    2a9c:	f6 01       	movw	r30, r12
    2a9e:	97 fe       	sbrs	r9, 7
    2aa0:	0a c0       	rjmp	.+20     	; 0x2ab6 <_Z8USB_SendhPKvi+0xde>
    2aa2:	11 50       	subi	r17, 0x01	; 1
    2aa4:	50 f0       	brcs	.+20     	; 0x2aba <_Z8USB_SendhPKvi+0xe2>
    2aa6:	24 91       	lpm	r18, Z
    2aa8:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2aac:	31 96       	adiw	r30, 0x01	; 1
    2aae:	f9 cf       	rjmp	.-14     	; 0x2aa2 <_Z8USB_SendhPKvi+0xca>
    2ab0:	21 91       	ld	r18, Z+
    2ab2:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2ab6:	11 50       	subi	r17, 0x01	; 1
    2ab8:	d8 f7       	brcc	.-10     	; 0x2ab0 <_Z8USB_SendhPKvi+0xd8>
    2aba:	c8 0e       	add	r12, r24
    2abc:	d9 1e       	adc	r13, r25
    2abe:	aa 20       	and	r10, r10
    2ac0:	19 f0       	breq	.+6      	; 0x2ac8 <_Z8USB_SendhPKvi+0xf0>
    2ac2:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2ac6:	0b c0       	rjmp	.+22     	; 0x2ade <_Z8USB_SendhPKvi+0x106>
    2ac8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2acc:	85 fd       	sbrc	r24, 5
    2ace:	09 c0       	rjmp	.+18     	; 0x2ae2 <_Z8USB_SendhPKvi+0x10a>
    2ad0:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2ad4:	aa 24       	eor	r10, r10
    2ad6:	a3 94       	inc	r10
    2ad8:	e1 14       	cp	r14, r1
    2ada:	f1 04       	cpc	r15, r1
    2adc:	41 f0       	breq	.+16     	; 0x2aee <_Z8USB_SendhPKvi+0x116>
    2ade:	a1 2c       	mov	r10, r1
    2ae0:	06 c0       	rjmp	.+12     	; 0x2aee <_Z8USB_SendhPKvi+0x116>
    2ae2:	e1 14       	cp	r14, r1
    2ae4:	f1 04       	cpc	r15, r1
    2ae6:	19 f4       	brne	.+6      	; 0x2aee <_Z8USB_SendhPKvi+0x116>
    2ae8:	51 10       	cpse	r5, r1
    2aea:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2aee:	89 81       	ldd	r24, Y+1	; 0x01
    2af0:	8f bf       	out	0x3f, r24	; 63
    2af2:	a5 cf       	rjmp	.-182    	; 0x2a3e <_Z8USB_SendhPKvi+0x66>
    2af4:	5d 98       	cbi	0x0b, 5	; 11
    2af6:	84 e6       	ldi	r24, 0x64	; 100
    2af8:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <TxLEDPulse>
    2afc:	8b 2d       	mov	r24, r11
    2afe:	90 2f       	mov	r25, r16
    2b00:	0f 90       	pop	r0
    2b02:	df 91       	pop	r29
    2b04:	cf 91       	pop	r28
    2b06:	1f 91       	pop	r17
    2b08:	0f 91       	pop	r16
    2b0a:	ff 90       	pop	r15
    2b0c:	ef 90       	pop	r14
    2b0e:	df 90       	pop	r13
    2b10:	cf 90       	pop	r12
    2b12:	bf 90       	pop	r11
    2b14:	af 90       	pop	r10
    2b16:	9f 90       	pop	r9
    2b18:	8f 90       	pop	r8
    2b1a:	7f 90       	pop	r7
    2b1c:	6f 90       	pop	r6
    2b1e:	5f 90       	pop	r5
    2b20:	08 95       	ret

00002b22 <_Z11InitControli>:
    2b22:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2b26:	10 92 63 04 	sts	0x0463, r1	; 0x800463 <_ZL6_cmark+0x1>
    2b2a:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <_ZL6_cmark>
    2b2e:	90 93 61 04 	sts	0x0461, r25	; 0x800461 <_ZL5_cend+0x1>
    2b32:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <_ZL5_cend>
    2b36:	08 95       	ret

00002b38 <_Z15USB_SendControlhPKvi>:
    2b38:	df 92       	push	r13
    2b3a:	ef 92       	push	r14
    2b3c:	ff 92       	push	r15
    2b3e:	0f 93       	push	r16
    2b40:	1f 93       	push	r17
    2b42:	cf 93       	push	r28
    2b44:	df 93       	push	r29
    2b46:	d8 2e       	mov	r13, r24
    2b48:	8a 01       	movw	r16, r20
    2b4a:	7b 01       	movw	r14, r22
    2b4c:	e4 0e       	add	r14, r20
    2b4e:	f5 1e       	adc	r15, r21
    2b50:	eb 01       	movw	r28, r22
    2b52:	ce 15       	cp	r28, r14
    2b54:	df 05       	cpc	r29, r15
    2b56:	71 f0       	breq	.+28     	; 0x2b74 <_Z15USB_SendControlhPKvi+0x3c>
    2b58:	d7 fe       	sbrs	r13, 7
    2b5a:	03 c0       	rjmp	.+6      	; 0x2b62 <_Z15USB_SendControlhPKvi+0x2a>
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	84 91       	lpm	r24, Z
    2b60:	01 c0       	rjmp	.+2      	; 0x2b64 <_Z15USB_SendControlhPKvi+0x2c>
    2b62:	88 81       	ld	r24, Y
    2b64:	0e 94 c2 13 	call	0x2784	; 0x2784 <_ZL11SendControlh>
    2b68:	21 96       	adiw	r28, 0x01	; 1
    2b6a:	81 11       	cpse	r24, r1
    2b6c:	f2 cf       	rjmp	.-28     	; 0x2b52 <_Z15USB_SendControlhPKvi+0x1a>
    2b6e:	8f ef       	ldi	r24, 0xFF	; 255
    2b70:	9f ef       	ldi	r25, 0xFF	; 255
    2b72:	01 c0       	rjmp	.+2      	; 0x2b76 <_Z15USB_SendControlhPKvi+0x3e>
    2b74:	c8 01       	movw	r24, r16
    2b76:	df 91       	pop	r29
    2b78:	cf 91       	pop	r28
    2b7a:	1f 91       	pop	r17
    2b7c:	0f 91       	pop	r16
    2b7e:	ff 90       	pop	r15
    2b80:	ef 90       	pop	r14
    2b82:	df 90       	pop	r13
    2b84:	08 95       	ret

00002b86 <_Z15USB_RecvControlPvi>:
    2b86:	af 92       	push	r10
    2b88:	bf 92       	push	r11
    2b8a:	df 92       	push	r13
    2b8c:	ef 92       	push	r14
    2b8e:	ff 92       	push	r15
    2b90:	0f 93       	push	r16
    2b92:	1f 93       	push	r17
    2b94:	cf 93       	push	r28
    2b96:	df 93       	push	r29
    2b98:	5c 01       	movw	r10, r24
    2b9a:	8b 01       	movw	r16, r22
    2b9c:	eb 01       	movw	r28, r22
    2b9e:	9b ef       	ldi	r25, 0xFB	; 251
    2ba0:	d9 2e       	mov	r13, r25
    2ba2:	20 97       	sbiw	r28, 0x00	; 0
    2ba4:	c1 f0       	breq	.+48     	; 0x2bd6 <_Z15USB_RecvControlPvi+0x50>
    2ba6:	7e 01       	movw	r14, r28
    2ba8:	c1 34       	cpi	r28, 0x41	; 65
    2baa:	d1 05       	cpc	r29, r1
    2bac:	1c f0       	brlt	.+6      	; 0x2bb4 <_Z15USB_RecvControlPvi+0x2e>
    2bae:	80 e4       	ldi	r24, 0x40	; 64
    2bb0:	e8 2e       	mov	r14, r24
    2bb2:	f1 2c       	mov	r15, r1
    2bb4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2bb8:	82 ff       	sbrs	r24, 2
    2bba:	fc cf       	rjmp	.-8      	; 0x2bb4 <_Z15USB_RecvControlPvi+0x2e>
    2bbc:	c8 01       	movw	r24, r16
    2bbe:	8c 1b       	sub	r24, r28
    2bc0:	9d 0b       	sbc	r25, r29
    2bc2:	6e 2d       	mov	r22, r14
    2bc4:	8a 0d       	add	r24, r10
    2bc6:	9b 1d       	adc	r25, r11
    2bc8:	0e 94 b5 13 	call	0x276a	; 0x276a <_ZL4RecvPVhh>
    2bcc:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2bd0:	ce 19       	sub	r28, r14
    2bd2:	df 09       	sbc	r29, r15
    2bd4:	e6 cf       	rjmp	.-52     	; 0x2ba2 <_Z15USB_RecvControlPvi+0x1c>
    2bd6:	c8 01       	movw	r24, r16
    2bd8:	df 91       	pop	r29
    2bda:	cf 91       	pop	r28
    2bdc:	1f 91       	pop	r17
    2bde:	0f 91       	pop	r16
    2be0:	ff 90       	pop	r15
    2be2:	ef 90       	pop	r14
    2be4:	df 90       	pop	r13
    2be6:	bf 90       	pop	r11
    2be8:	af 90       	pop	r10
    2bea:	08 95       	ret

00002bec <__vector_11>:
    2bec:	1f 92       	push	r1
    2bee:	0f 92       	push	r0
    2bf0:	0f b6       	in	r0, 0x3f	; 63
    2bf2:	0f 92       	push	r0
    2bf4:	11 24       	eor	r1, r1
    2bf6:	cf 92       	push	r12
    2bf8:	df 92       	push	r13
    2bfa:	ef 92       	push	r14
    2bfc:	ff 92       	push	r15
    2bfe:	0f 93       	push	r16
    2c00:	1f 93       	push	r17
    2c02:	2f 93       	push	r18
    2c04:	3f 93       	push	r19
    2c06:	4f 93       	push	r20
    2c08:	5f 93       	push	r21
    2c0a:	6f 93       	push	r22
    2c0c:	7f 93       	push	r23
    2c0e:	8f 93       	push	r24
    2c10:	9f 93       	push	r25
    2c12:	af 93       	push	r26
    2c14:	bf 93       	push	r27
    2c16:	ef 93       	push	r30
    2c18:	ff 93       	push	r31
    2c1a:	cf 93       	push	r28
    2c1c:	df 93       	push	r29
    2c1e:	cd b7       	in	r28, 0x3d	; 61
    2c20:	de b7       	in	r29, 0x3e	; 62
    2c22:	6c 97       	sbiw	r28, 0x1c	; 28
    2c24:	de bf       	out	0x3e, r29	; 62
    2c26:	cd bf       	out	0x3d, r28	; 61
    2c28:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2c2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2c30:	83 ff       	sbrs	r24, 3
    2c32:	17 c1       	rjmp	.+558    	; 0x2e62 <__vector_11+0x276>
    2c34:	68 e0       	ldi	r22, 0x08	; 8
    2c36:	ce 01       	movw	r24, r28
    2c38:	45 96       	adiw	r24, 0x15	; 21
    2c3a:	0e 94 b5 13 	call	0x276a	; 0x276a <_ZL4RecvPVhh>
    2c3e:	82 ef       	ldi	r24, 0xF2	; 242
    2c40:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2c44:	8d 89       	ldd	r24, Y+21	; 0x15
    2c46:	87 ff       	sbrs	r24, 7
    2c48:	05 c0       	rjmp	.+10     	; 0x2c54 <__vector_11+0x68>
    2c4a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2c4e:	90 ff       	sbrs	r25, 0
    2c50:	fc cf       	rjmp	.-8      	; 0x2c4a <__vector_11+0x5e>
    2c52:	03 c0       	rjmp	.+6      	; 0x2c5a <__vector_11+0x6e>
    2c54:	9e ef       	ldi	r25, 0xFE	; 254
    2c56:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2c5a:	98 2f       	mov	r25, r24
    2c5c:	90 76       	andi	r25, 0x60	; 96
    2c5e:	09 f0       	breq	.+2      	; 0x2c62 <__vector_11+0x76>
    2c60:	d8 c0       	rjmp	.+432    	; 0x2e12 <__vector_11+0x226>
    2c62:	9e 89       	ldd	r25, Y+22	; 0x16
    2c64:	4f 89       	ldd	r20, Y+23	; 0x17
    2c66:	58 8d       	ldd	r21, Y+24	; 0x18
    2c68:	2f 89       	ldd	r18, Y+23	; 0x17
    2c6a:	18 8d       	ldd	r17, Y+24	; 0x18
    2c6c:	91 11       	cpse	r25, r1
    2c6e:	0c c0       	rjmp	.+24     	; 0x2c88 <__vector_11+0x9c>
    2c70:	80 38       	cpi	r24, 0x80	; 128
    2c72:	29 f4       	brne	.+10     	; 0x2c7e <__vector_11+0x92>
    2c74:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <_usbCurrentStatus>
    2c78:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2c7c:	02 c0       	rjmp	.+4      	; 0x2c82 <__vector_11+0x96>
    2c7e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2c82:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2c86:	e6 c0       	rjmp	.+460    	; 0x2e54 <__vector_11+0x268>
    2c88:	91 30       	cpi	r25, 0x01	; 1
    2c8a:	51 f4       	brne	.+20     	; 0x2ca0 <__vector_11+0xb4>
    2c8c:	81 11       	cpse	r24, r1
    2c8e:	e2 c0       	rjmp	.+452    	; 0x2e54 <__vector_11+0x268>
    2c90:	41 30       	cpi	r20, 0x01	; 1
    2c92:	51 05       	cpc	r21, r1
    2c94:	09 f0       	breq	.+2      	; 0x2c98 <__vector_11+0xac>
    2c96:	de c0       	rjmp	.+444    	; 0x2e54 <__vector_11+0x268>
    2c98:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <_usbCurrentStatus>
    2c9c:	8d 7f       	andi	r24, 0xFD	; 253
    2c9e:	0b c0       	rjmp	.+22     	; 0x2cb6 <__vector_11+0xca>
    2ca0:	93 30       	cpi	r25, 0x03	; 3
    2ca2:	61 f4       	brne	.+24     	; 0x2cbc <__vector_11+0xd0>
    2ca4:	81 11       	cpse	r24, r1
    2ca6:	d6 c0       	rjmp	.+428    	; 0x2e54 <__vector_11+0x268>
    2ca8:	41 30       	cpi	r20, 0x01	; 1
    2caa:	51 05       	cpc	r21, r1
    2cac:	09 f0       	breq	.+2      	; 0x2cb0 <__vector_11+0xc4>
    2cae:	d2 c0       	rjmp	.+420    	; 0x2e54 <__vector_11+0x268>
    2cb0:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <_usbCurrentStatus>
    2cb4:	82 60       	ori	r24, 0x02	; 2
    2cb6:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <_usbCurrentStatus>
    2cba:	cc c0       	rjmp	.+408    	; 0x2e54 <__vector_11+0x268>
    2cbc:	95 30       	cpi	r25, 0x05	; 5
    2cbe:	49 f4       	brne	.+18     	; 0x2cd2 <__vector_11+0xe6>
    2cc0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2cc4:	80 ff       	sbrs	r24, 0
    2cc6:	fc cf       	rjmp	.-8      	; 0x2cc0 <__vector_11+0xd4>
    2cc8:	82 2f       	mov	r24, r18
    2cca:	80 68       	ori	r24, 0x80	; 128
    2ccc:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    2cd0:	c1 c0       	rjmp	.+386    	; 0x2e54 <__vector_11+0x268>
    2cd2:	96 30       	cpi	r25, 0x06	; 6
    2cd4:	09 f0       	breq	.+2      	; 0x2cd8 <__vector_11+0xec>
    2cd6:	70 c0       	rjmp	.+224    	; 0x2db8 <__vector_11+0x1cc>
    2cd8:	eb 8c       	ldd	r14, Y+27	; 0x1b
    2cda:	fc 8c       	ldd	r15, Y+28	; 0x1c
    2cdc:	12 30       	cpi	r17, 0x02	; 2
    2cde:	69 f5       	brne	.+90     	; 0x2d3a <__vector_11+0x14e>
    2ce0:	80 e0       	ldi	r24, 0x00	; 0
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	0e 94 91 15 	call	0x2b22	; 0x2b22 <_Z11InitControli>
    2ce8:	0e 94 48 14 	call	0x2890	; 0x2890 <_ZL14SendInterfacesv>
    2cec:	99 e0       	ldi	r25, 0x09	; 9
    2cee:	9e 01       	movw	r18, r28
    2cf0:	2f 5f       	subi	r18, 0xFF	; 255
    2cf2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf4:	69 01       	movw	r12, r18
    2cf6:	f9 01       	movw	r30, r18
    2cf8:	29 2f       	mov	r18, r25
    2cfa:	11 92       	st	Z+, r1
    2cfc:	2a 95       	dec	r18
    2cfe:	e9 f7       	brne	.-6      	; 0x2cfa <__vector_11+0x10e>
    2d00:	99 83       	std	Y+1, r25	; 0x01
    2d02:	1a 83       	std	Y+2, r17	; 0x02
    2d04:	91 e0       	ldi	r25, 0x01	; 1
    2d06:	9e 83       	std	Y+6, r25	; 0x06
    2d08:	90 ea       	ldi	r25, 0xA0	; 160
    2d0a:	98 87       	std	Y+8, r25	; 0x08
    2d0c:	9a ef       	ldi	r25, 0xFA	; 250
    2d0e:	99 87       	std	Y+9, r25	; 0x09
    2d10:	20 91 62 04 	lds	r18, 0x0462	; 0x800462 <_ZL6_cmark>
    2d14:	30 91 63 04 	lds	r19, 0x0463	; 0x800463 <_ZL6_cmark+0x1>
    2d18:	27 5f       	subi	r18, 0xF7	; 247
    2d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d1c:	3c 83       	std	Y+4, r19	; 0x04
    2d1e:	2b 83       	std	Y+3, r18	; 0x03
    2d20:	8d 83       	std	Y+5, r24	; 0x05
    2d22:	c7 01       	movw	r24, r14
    2d24:	0e 94 91 15 	call	0x2b22	; 0x2b22 <_Z11InitControli>
    2d28:	49 e0       	ldi	r20, 0x09	; 9
    2d2a:	50 e0       	ldi	r21, 0x00	; 0
    2d2c:	b6 01       	movw	r22, r12
    2d2e:	80 e0       	ldi	r24, 0x00	; 0
    2d30:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <_Z15USB_SendControlhPKvi>
    2d34:	0e 94 48 14 	call	0x2890	; 0x2890 <_ZL14SendInterfacesv>
    2d38:	8d c0       	rjmp	.+282    	; 0x2e54 <__vector_11+0x268>
    2d3a:	c7 01       	movw	r24, r14
    2d3c:	0e 94 91 15 	call	0x2b22	; 0x2b22 <_Z11InitControli>
    2d40:	0e 94 02 1c 	call	0x3804	; 0x3804 <_Z12PluggableUSBv>
    2d44:	be 01       	movw	r22, r28
    2d46:	6b 5e       	subi	r22, 0xEB	; 235
    2d48:	7f 4f       	sbci	r23, 0xFF	; 255
    2d4a:	0e 94 a6 1b 	call	0x374c	; 0x374c <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    2d4e:	00 97       	sbiw	r24, 0x00	; 0
    2d50:	19 f0       	breq	.+6      	; 0x2d58 <__vector_11+0x16c>
    2d52:	0c f0       	brlt	.+2      	; 0x2d56 <__vector_11+0x16a>
    2d54:	7f c0       	rjmp	.+254    	; 0x2e54 <__vector_11+0x268>
    2d56:	82 c0       	rjmp	.+260    	; 0x2e5c <__vector_11+0x270>
    2d58:	11 30       	cpi	r17, 0x01	; 1
    2d5a:	09 f4       	brne	.+2      	; 0x2d5e <__vector_11+0x172>
    2d5c:	70 c0       	rjmp	.+224    	; 0x2e3e <__vector_11+0x252>
    2d5e:	13 30       	cpi	r17, 0x03	; 3
    2d60:	09 f0       	breq	.+2      	; 0x2d64 <__vector_11+0x178>
    2d62:	7c c0       	rjmp	.+248    	; 0x2e5c <__vector_11+0x270>
    2d64:	8f 89       	ldd	r24, Y+23	; 0x17
    2d66:	88 23       	and	r24, r24
    2d68:	09 f4       	brne	.+2      	; 0x2d6c <__vector_11+0x180>
    2d6a:	6c c0       	rjmp	.+216    	; 0x2e44 <__vector_11+0x258>
    2d6c:	82 30       	cpi	r24, 0x02	; 2
    2d6e:	29 f4       	brne	.+10     	; 0x2d7a <__vector_11+0x18e>
    2d70:	40 e8       	ldi	r20, 0x80	; 128
    2d72:	60 e1       	ldi	r22, 0x10	; 16
    2d74:	88 ee       	ldi	r24, 0xE8	; 232
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	06 c0       	rjmp	.+12     	; 0x2d86 <__vector_11+0x19a>
    2d7a:	81 30       	cpi	r24, 0x01	; 1
    2d7c:	39 f4       	brne	.+14     	; 0x2d8c <__vector_11+0x1a0>
    2d7e:	40 e8       	ldi	r20, 0x80	; 128
    2d80:	6b e0       	ldi	r22, 0x0B	; 11
    2d82:	8c ed       	ldi	r24, 0xDC	; 220
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZL24USB_SendStringDescriptorPKhhh>
    2d8a:	56 c0       	rjmp	.+172    	; 0x2e38 <__vector_11+0x24c>
    2d8c:	83 30       	cpi	r24, 0x03	; 3
    2d8e:	09 f0       	breq	.+2      	; 0x2d92 <__vector_11+0x1a6>
    2d90:	65 c0       	rjmp	.+202    	; 0x2e5c <__vector_11+0x270>
    2d92:	0e 94 02 1c 	call	0x3804	; 0x3804 <_Z12PluggableUSBv>
    2d96:	8e 01       	movw	r16, r28
    2d98:	0f 5f       	subi	r16, 0xFF	; 255
    2d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d9c:	b8 01       	movw	r22, r16
    2d9e:	0e 94 c5 1b 	call	0x378a	; 0x378a <_ZN13PluggableUSB_12getShortNameEPc>
    2da2:	f8 01       	movw	r30, r16
    2da4:	01 90       	ld	r0, Z+
    2da6:	00 20       	and	r0, r0
    2da8:	e9 f7       	brne	.-6      	; 0x2da4 <__vector_11+0x1b8>
    2daa:	31 97       	sbiw	r30, 0x01	; 1
    2dac:	bf 01       	movw	r22, r30
    2dae:	60 1b       	sub	r22, r16
    2db0:	71 0b       	sbc	r23, r17
    2db2:	40 e0       	ldi	r20, 0x00	; 0
    2db4:	c8 01       	movw	r24, r16
    2db6:	e7 cf       	rjmp	.-50     	; 0x2d86 <__vector_11+0x19a>
    2db8:	97 30       	cpi	r25, 0x07	; 7
    2dba:	09 f4       	brne	.+2      	; 0x2dbe <__vector_11+0x1d2>
    2dbc:	4f c0       	rjmp	.+158    	; 0x2e5c <__vector_11+0x270>
    2dbe:	98 30       	cpi	r25, 0x08	; 8
    2dc0:	21 f4       	brne	.+8      	; 0x2dca <__vector_11+0x1de>
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2dc8:	45 c0       	rjmp	.+138    	; 0x2e54 <__vector_11+0x268>
    2dca:	99 30       	cpi	r25, 0x09	; 9
    2dcc:	09 f0       	breq	.+2      	; 0x2dd0 <__vector_11+0x1e4>
    2dce:	42 c0       	rjmp	.+132    	; 0x2e54 <__vector_11+0x268>
    2dd0:	83 70       	andi	r24, 0x03	; 3
    2dd2:	09 f0       	breq	.+2      	; 0x2dd6 <__vector_11+0x1ea>
    2dd4:	43 c0       	rjmp	.+134    	; 0x2e5c <__vector_11+0x270>
    2dd6:	eb e0       	ldi	r30, 0x0B	; 11
    2dd8:	f1 e0       	ldi	r31, 0x01	; 1
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	31 e0       	ldi	r19, 0x01	; 1
    2dde:	96 e3       	ldi	r25, 0x36	; 54
    2de0:	20 81       	ld	r18, Z
    2de2:	21 11       	cpse	r18, r1
    2de4:	09 c0       	rjmp	.+18     	; 0x2df8 <__vector_11+0x20c>
    2de6:	8e e7       	ldi	r24, 0x7E	; 126
    2de8:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    2dec:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    2df0:	8f 89       	ldd	r24, Y+23	; 0x17
    2df2:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <_usbConfiguration>
    2df6:	2e c0       	rjmp	.+92     	; 0x2e54 <__vector_11+0x268>
    2df8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2dfc:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2e00:	21 91       	ld	r18, Z+
    2e02:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2e06:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    2e0a:	8f 5f       	subi	r24, 0xFF	; 255
    2e0c:	87 30       	cpi	r24, 0x07	; 7
    2e0e:	41 f7       	brne	.-48     	; 0x2de0 <__vector_11+0x1f4>
    2e10:	ea cf       	rjmp	.-44     	; 0x2de6 <__vector_11+0x1fa>
    2e12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e16:	0e 94 91 15 	call	0x2b22	; 0x2b22 <_Z11InitControli>
    2e1a:	89 8d       	ldd	r24, Y+25	; 0x19
    2e1c:	81 11       	cpse	r24, r1
    2e1e:	05 c0       	rjmp	.+10     	; 0x2e2a <__vector_11+0x23e>
    2e20:	ce 01       	movw	r24, r28
    2e22:	45 96       	adiw	r24, 0x15	; 21
    2e24:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <_Z9CDC_SetupR8USBSetup>
    2e28:	07 c0       	rjmp	.+14     	; 0x2e38 <__vector_11+0x24c>
    2e2a:	0e 94 02 1c 	call	0x3804	; 0x3804 <_Z12PluggableUSBv>
    2e2e:	be 01       	movw	r22, r28
    2e30:	6b 5e       	subi	r22, 0xEB	; 235
    2e32:	7f 4f       	sbci	r23, 0xFF	; 255
    2e34:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <_ZN13PluggableUSB_5setupER8USBSetup>
    2e38:	88 23       	and	r24, r24
    2e3a:	81 f0       	breq	.+32     	; 0x2e5c <__vector_11+0x270>
    2e3c:	0b c0       	rjmp	.+22     	; 0x2e54 <__vector_11+0x268>
    2e3e:	6a ec       	ldi	r22, 0xCA	; 202
    2e40:	70 e0       	ldi	r23, 0x00	; 0
    2e42:	02 c0       	rjmp	.+4      	; 0x2e48 <__vector_11+0x25c>
    2e44:	69 ef       	ldi	r22, 0xF9	; 249
    2e46:	70 e0       	ldi	r23, 0x00	; 0
    2e48:	fb 01       	movw	r30, r22
    2e4a:	44 91       	lpm	r20, Z
    2e4c:	50 e0       	ldi	r21, 0x00	; 0
    2e4e:	80 e8       	ldi	r24, 0x80	; 128
    2e50:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <_Z15USB_SendControlhPKvi>
    2e54:	8e ef       	ldi	r24, 0xFE	; 254
    2e56:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2e5a:	03 c0       	rjmp	.+6      	; 0x2e62 <__vector_11+0x276>
    2e5c:	81 e2       	ldi	r24, 0x21	; 33
    2e5e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2e62:	6c 96       	adiw	r28, 0x1c	; 28
    2e64:	0f b6       	in	r0, 0x3f	; 63
    2e66:	f8 94       	cli
    2e68:	de bf       	out	0x3e, r29	; 62
    2e6a:	0f be       	out	0x3f, r0	; 63
    2e6c:	cd bf       	out	0x3d, r28	; 61
    2e6e:	df 91       	pop	r29
    2e70:	cf 91       	pop	r28
    2e72:	ff 91       	pop	r31
    2e74:	ef 91       	pop	r30
    2e76:	bf 91       	pop	r27
    2e78:	af 91       	pop	r26
    2e7a:	9f 91       	pop	r25
    2e7c:	8f 91       	pop	r24
    2e7e:	7f 91       	pop	r23
    2e80:	6f 91       	pop	r22
    2e82:	5f 91       	pop	r21
    2e84:	4f 91       	pop	r20
    2e86:	3f 91       	pop	r19
    2e88:	2f 91       	pop	r18
    2e8a:	1f 91       	pop	r17
    2e8c:	0f 91       	pop	r16
    2e8e:	ff 90       	pop	r15
    2e90:	ef 90       	pop	r14
    2e92:	df 90       	pop	r13
    2e94:	cf 90       	pop	r12
    2e96:	0f 90       	pop	r0
    2e98:	0f be       	out	0x3f, r0	; 63
    2e9a:	0f 90       	pop	r0
    2e9c:	1f 90       	pop	r1
    2e9e:	18 95       	reti

00002ea0 <_Z9USB_Flushh>:
    2ea0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2ea4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2ea8:	88 23       	and	r24, r24
    2eaa:	19 f0       	breq	.+6      	; 0x2eb2 <_Z9USB_Flushh+0x12>
    2eac:	8a e3       	ldi	r24, 0x3A	; 58
    2eae:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2eb2:	08 95       	ret

00002eb4 <__vector_10>:
    2eb4:	1f 92       	push	r1
    2eb6:	0f 92       	push	r0
    2eb8:	0f b6       	in	r0, 0x3f	; 63
    2eba:	0f 92       	push	r0
    2ebc:	11 24       	eor	r1, r1
    2ebe:	2f 93       	push	r18
    2ec0:	3f 93       	push	r19
    2ec2:	4f 93       	push	r20
    2ec4:	5f 93       	push	r21
    2ec6:	6f 93       	push	r22
    2ec8:	7f 93       	push	r23
    2eca:	8f 93       	push	r24
    2ecc:	9f 93       	push	r25
    2ece:	af 93       	push	r26
    2ed0:	bf 93       	push	r27
    2ed2:	cf 93       	push	r28
    2ed4:	ef 93       	push	r30
    2ed6:	ff 93       	push	r31
    2ed8:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2edc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2ee0:	83 7f       	andi	r24, 0xF3	; 243
    2ee2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2ee6:	c3 ff       	sbrs	r28, 3
    2ee8:	0f c0       	rjmp	.+30     	; 0x2f08 <__vector_10+0x54>
    2eea:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2eee:	81 e0       	ldi	r24, 0x01	; 1
    2ef0:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2ef4:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2ef8:	82 e3       	ldi	r24, 0x32	; 50
    2efa:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    2efe:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <_usbConfiguration>
    2f02:	88 e0       	ldi	r24, 0x08	; 8
    2f04:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    2f08:	c2 ff       	sbrs	r28, 2
    2f0a:	19 c0       	rjmp	.+50     	; 0x2f3e <__vector_10+0x8a>
    2f0c:	83 e0       	ldi	r24, 0x03	; 3
    2f0e:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <_Z9USB_Flushh>
    2f12:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <TxLEDPulse>
    2f16:	88 23       	and	r24, r24
    2f18:	39 f0       	breq	.+14     	; 0x2f28 <__vector_10+0x74>
    2f1a:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <TxLEDPulse>
    2f1e:	81 50       	subi	r24, 0x01	; 1
    2f20:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <TxLEDPulse>
    2f24:	88 23       	and	r24, r24
    2f26:	89 f1       	breq	.+98     	; 0x2f8a <__vector_10+0xd6>
    2f28:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <RxLEDPulse>
    2f2c:	88 23       	and	r24, r24
    2f2e:	39 f0       	breq	.+14     	; 0x2f3e <__vector_10+0x8a>
    2f30:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <RxLEDPulse>
    2f34:	81 50       	subi	r24, 0x01	; 1
    2f36:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <RxLEDPulse>
    2f3a:	88 23       	and	r24, r24
    2f3c:	41 f1       	breq	.+80     	; 0x2f8e <__vector_10+0xda>
    2f3e:	c4 ff       	sbrs	r28, 4
    2f40:	10 c0       	rjmp	.+32     	; 0x2f62 <__vector_10+0xae>
    2f42:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2f46:	8e 7e       	andi	r24, 0xEE	; 238
    2f48:	81 60       	ori	r24, 0x01	; 1
    2f4a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2f4e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2f52:	8f 7e       	andi	r24, 0xEF	; 239
    2f54:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2f58:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <_usbSuspendState>
    2f5c:	8e 7e       	andi	r24, 0xEE	; 238
    2f5e:	80 61       	ori	r24, 0x10	; 16
    2f60:	11 c0       	rjmp	.+34     	; 0x2f84 <__vector_10+0xd0>
    2f62:	c0 ff       	sbrs	r28, 0
    2f64:	16 c0       	rjmp	.+44     	; 0x2f92 <__vector_10+0xde>
    2f66:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2f6a:	8e 7e       	andi	r24, 0xEE	; 238
    2f6c:	80 61       	ori	r24, 0x10	; 16
    2f6e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2f72:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2f76:	8e 7e       	andi	r24, 0xEE	; 238
    2f78:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2f7c:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <_usbSuspendState>
    2f80:	8e 7e       	andi	r24, 0xEE	; 238
    2f82:	81 60       	ori	r24, 0x01	; 1
    2f84:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <_usbSuspendState>
    2f88:	04 c0       	rjmp	.+8      	; 0x2f92 <__vector_10+0xde>
    2f8a:	5d 9a       	sbi	0x0b, 5	; 11
    2f8c:	cd cf       	rjmp	.-102    	; 0x2f28 <__vector_10+0x74>
    2f8e:	28 9a       	sbi	0x05, 0	; 5
    2f90:	d6 cf       	rjmp	.-84     	; 0x2f3e <__vector_10+0x8a>
    2f92:	ff 91       	pop	r31
    2f94:	ef 91       	pop	r30
    2f96:	cf 91       	pop	r28
    2f98:	bf 91       	pop	r27
    2f9a:	af 91       	pop	r26
    2f9c:	9f 91       	pop	r25
    2f9e:	8f 91       	pop	r24
    2fa0:	7f 91       	pop	r23
    2fa2:	6f 91       	pop	r22
    2fa4:	5f 91       	pop	r21
    2fa6:	4f 91       	pop	r20
    2fa8:	3f 91       	pop	r19
    2faa:	2f 91       	pop	r18
    2fac:	0f 90       	pop	r0
    2fae:	0f be       	out	0x3f, r0	; 63
    2fb0:	0f 90       	pop	r0
    2fb2:	1f 90       	pop	r1
    2fb4:	18 95       	reti

00002fb6 <_ZN10USBDevice_6attachEv>:
{
}

void USBDevice_::attach()
{
	_usbConfiguration = 0;
    2fb6:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <_usbConfiguration>
	_usbCurrentStatus = 0;
    2fba:	10 92 65 04 	sts	0x0465, r1	; 0x800465 <_usbCurrentStatus>
	_usbSuspendState = 0;
    2fbe:	10 92 64 04 	sts	0x0464, r1	; 0x800464 <_usbSuspendState>
	USB_ClockEnable();
    2fc2:	0e 94 25 14 	call	0x284a	; 0x284a <_ZL15USB_ClockEnablev>

	UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear already pending WAKEUP / SUSPEND requests
    2fc6:	e1 ee       	ldi	r30, 0xE1	; 225
    2fc8:	f0 e0       	ldi	r31, 0x00	; 0
    2fca:	80 81       	ld	r24, Z
    2fcc:	8e 7e       	andi	r24, 0xEE	; 238
    2fce:	80 83       	st	Z, r24
	UDIEN = (1<<EORSTE) | (1<<SOFE) | (1<<SUSPE);	// Enable interrupts for EOR (End of Reset), SOF (start of frame) and SUSPEND
    2fd0:	8d e0       	ldi	r24, 0x0D	; 13
    2fd2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	
	TX_RX_LED_INIT;
    2fd6:	55 9a       	sbi	0x0a, 5	; 10
    2fd8:	20 9a       	sbi	0x04, 0	; 4
    2fda:	08 95       	ret

00002fdc <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2fdc:	1f 92       	push	r1
    2fde:	0f 92       	push	r0
    2fe0:	0f b6       	in	r0, 0x3f	; 63
    2fe2:	0f 92       	push	r0
    2fe4:	11 24       	eor	r1, r1
    2fe6:	2f 93       	push	r18
    2fe8:	3f 93       	push	r19
    2fea:	8f 93       	push	r24
    2fec:	9f 93       	push	r25
    2fee:	af 93       	push	r26
    2ff0:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2ff2:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <timer0_millis>
    2ff6:	90 91 6b 04 	lds	r25, 0x046B	; 0x80046b <timer0_millis+0x1>
    2ffa:	a0 91 6c 04 	lds	r26, 0x046C	; 0x80046c <timer0_millis+0x2>
    2ffe:	b0 91 6d 04 	lds	r27, 0x046D	; 0x80046d <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    3002:	30 91 69 04 	lds	r19, 0x0469	; 0x800469 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    3006:	23 e0       	ldi	r18, 0x03	; 3
    3008:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    300a:	2d 37       	cpi	r18, 0x7D	; 125
    300c:	20 f4       	brcc	.+8      	; 0x3016 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    300e:	01 96       	adiw	r24, 0x01	; 1
    3010:	a1 1d       	adc	r26, r1
    3012:	b1 1d       	adc	r27, r1
    3014:	05 c0       	rjmp	.+10     	; 0x3020 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    3016:	26 e8       	ldi	r18, 0x86	; 134
    3018:	23 0f       	add	r18, r19
		m += 1;
    301a:	02 96       	adiw	r24, 0x02	; 2
    301c:	a1 1d       	adc	r26, r1
    301e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    3020:	20 93 69 04 	sts	0x0469, r18	; 0x800469 <timer0_fract>
	timer0_millis = m;
    3024:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <timer0_millis>
    3028:	90 93 6b 04 	sts	0x046B, r25	; 0x80046b <timer0_millis+0x1>
    302c:	a0 93 6c 04 	sts	0x046C, r26	; 0x80046c <timer0_millis+0x2>
    3030:	b0 93 6d 04 	sts	0x046D, r27	; 0x80046d <timer0_millis+0x3>
	timer0_overflow_count++;
    3034:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <timer0_overflow_count>
    3038:	90 91 6f 04 	lds	r25, 0x046F	; 0x80046f <timer0_overflow_count+0x1>
    303c:	a0 91 70 04 	lds	r26, 0x0470	; 0x800470 <timer0_overflow_count+0x2>
    3040:	b0 91 71 04 	lds	r27, 0x0471	; 0x800471 <timer0_overflow_count+0x3>
    3044:	01 96       	adiw	r24, 0x01	; 1
    3046:	a1 1d       	adc	r26, r1
    3048:	b1 1d       	adc	r27, r1
    304a:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <timer0_overflow_count>
    304e:	90 93 6f 04 	sts	0x046F, r25	; 0x80046f <timer0_overflow_count+0x1>
    3052:	a0 93 70 04 	sts	0x0470, r26	; 0x800470 <timer0_overflow_count+0x2>
    3056:	b0 93 71 04 	sts	0x0471, r27	; 0x800471 <timer0_overflow_count+0x3>
}
    305a:	bf 91       	pop	r27
    305c:	af 91       	pop	r26
    305e:	9f 91       	pop	r25
    3060:	8f 91       	pop	r24
    3062:	3f 91       	pop	r19
    3064:	2f 91       	pop	r18
    3066:	0f 90       	pop	r0
    3068:	0f be       	out	0x3f, r0	; 63
    306a:	0f 90       	pop	r0
    306c:	1f 90       	pop	r1
    306e:	18 95       	reti

00003070 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    3070:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    3072:	f8 94       	cli
	m = timer0_millis;
    3074:	60 91 6a 04 	lds	r22, 0x046A	; 0x80046a <timer0_millis>
    3078:	70 91 6b 04 	lds	r23, 0x046B	; 0x80046b <timer0_millis+0x1>
    307c:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <timer0_millis+0x2>
    3080:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <timer0_millis+0x3>
	SREG = oldSREG;
    3084:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    3086:	08 95       	ret

00003088 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    3088:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    308a:	f8 94       	cli
	m = timer0_overflow_count;
    308c:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <timer0_overflow_count>
    3090:	90 91 6f 04 	lds	r25, 0x046F	; 0x80046f <timer0_overflow_count+0x1>
    3094:	a0 91 70 04 	lds	r26, 0x0470	; 0x800470 <timer0_overflow_count+0x2>
    3098:	b0 91 71 04 	lds	r27, 0x0471	; 0x800471 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    309c:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    309e:	a8 9b       	sbis	0x15, 0	; 21
    30a0:	05 c0       	rjmp	.+10     	; 0x30ac <micros+0x24>
    30a2:	2f 3f       	cpi	r18, 0xFF	; 255
    30a4:	19 f0       	breq	.+6      	; 0x30ac <micros+0x24>
		m++;
    30a6:	01 96       	adiw	r24, 0x01	; 1
    30a8:	a1 1d       	adc	r26, r1
    30aa:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    30ac:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    30ae:	ba 2f       	mov	r27, r26
    30b0:	a9 2f       	mov	r26, r25
    30b2:	98 2f       	mov	r25, r24
    30b4:	88 27       	eor	r24, r24
    30b6:	82 0f       	add	r24, r18
    30b8:	91 1d       	adc	r25, r1
    30ba:	a1 1d       	adc	r26, r1
    30bc:	b1 1d       	adc	r27, r1
    30be:	bc 01       	movw	r22, r24
    30c0:	cd 01       	movw	r24, r26
    30c2:	42 e0       	ldi	r20, 0x02	; 2
    30c4:	66 0f       	add	r22, r22
    30c6:	77 1f       	adc	r23, r23
    30c8:	88 1f       	adc	r24, r24
    30ca:	99 1f       	adc	r25, r25
    30cc:	4a 95       	dec	r20
    30ce:	d1 f7       	brne	.-12     	; 0x30c4 <micros+0x3c>
}
    30d0:	08 95       	ret

000030d2 <delay>:

void delay(unsigned long ms)
{
    30d2:	8f 92       	push	r8
    30d4:	9f 92       	push	r9
    30d6:	af 92       	push	r10
    30d8:	bf 92       	push	r11
    30da:	cf 92       	push	r12
    30dc:	df 92       	push	r13
    30de:	ef 92       	push	r14
    30e0:	ff 92       	push	r15
    30e2:	6b 01       	movw	r12, r22
    30e4:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    30e6:	0e 94 44 18 	call	0x3088	; 0x3088 <micros>
    30ea:	4b 01       	movw	r8, r22
    30ec:	5c 01       	movw	r10, r24

	while (ms > 0) {
    30ee:	c1 14       	cp	r12, r1
    30f0:	d1 04       	cpc	r13, r1
    30f2:	e1 04       	cpc	r14, r1
    30f4:	f1 04       	cpc	r15, r1
    30f6:	01 f1       	breq	.+64     	; 0x3138 <delay+0x66>
		yield();
    30f8:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    30fc:	0e 94 44 18 	call	0x3088	; 0x3088 <micros>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	88 19       	sub	r24, r8
    3106:	99 09       	sbc	r25, r9
    3108:	aa 09       	sbc	r26, r10
    310a:	bb 09       	sbc	r27, r11
    310c:	88 3e       	cpi	r24, 0xE8	; 232
    310e:	93 40       	sbci	r25, 0x03	; 3
    3110:	a1 05       	cpc	r26, r1
    3112:	b1 05       	cpc	r27, r1
    3114:	60 f3       	brcs	.-40     	; 0x30ee <delay+0x1c>
			ms--;
    3116:	21 e0       	ldi	r18, 0x01	; 1
    3118:	c2 1a       	sub	r12, r18
    311a:	d1 08       	sbc	r13, r1
    311c:	e1 08       	sbc	r14, r1
    311e:	f1 08       	sbc	r15, r1
			start += 1000;
    3120:	88 ee       	ldi	r24, 0xE8	; 232
    3122:	88 0e       	add	r8, r24
    3124:	83 e0       	ldi	r24, 0x03	; 3
    3126:	98 1e       	adc	r9, r24
    3128:	a1 1c       	adc	r10, r1
    312a:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    312c:	c1 14       	cp	r12, r1
    312e:	d1 04       	cpc	r13, r1
    3130:	e1 04       	cpc	r14, r1
    3132:	f1 04       	cpc	r15, r1
    3134:	19 f7       	brne	.-58     	; 0x30fc <delay+0x2a>
    3136:	db cf       	rjmp	.-74     	; 0x30ee <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    3138:	ff 90       	pop	r15
    313a:	ef 90       	pop	r14
    313c:	df 90       	pop	r13
    313e:	cf 90       	pop	r12
    3140:	bf 90       	pop	r11
    3142:	af 90       	pop	r10
    3144:	9f 90       	pop	r9
    3146:	8f 90       	pop	r8
    3148:	08 95       	ret

0000314a <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    314a:	82 30       	cpi	r24, 0x02	; 2
    314c:	91 05       	cpc	r25, r1
    314e:	38 f0       	brcs	.+14     	; 0x315e <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    3150:	88 0f       	add	r24, r24
    3152:	99 1f       	adc	r25, r25
    3154:	88 0f       	add	r24, r24
    3156:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    3158:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    315a:	01 97       	sbiw	r24, 0x01	; 1
    315c:	f1 f7       	brne	.-4      	; 0x315a <delayMicroseconds+0x10>
    315e:	08 95       	ret

00003160 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3160:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3162:	84 b5       	in	r24, 0x24	; 36
    3164:	82 60       	ori	r24, 0x02	; 2
    3166:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3168:	84 b5       	in	r24, 0x24	; 36
    316a:	81 60       	ori	r24, 0x01	; 1
    316c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    316e:	85 b5       	in	r24, 0x25	; 37
    3170:	82 60       	ori	r24, 0x02	; 2
    3172:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3174:	85 b5       	in	r24, 0x25	; 37
    3176:	81 60       	ori	r24, 0x01	; 1
    3178:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    317a:	ee e6       	ldi	r30, 0x6E	; 110
    317c:	f0 e0       	ldi	r31, 0x00	; 0
    317e:	80 81       	ld	r24, Z
    3180:	81 60       	ori	r24, 0x01	; 1
    3182:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3184:	e1 e8       	ldi	r30, 0x81	; 129
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    318a:	80 81       	ld	r24, Z
    318c:	82 60       	ori	r24, 0x02	; 2
    318e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3190:	80 81       	ld	r24, Z
    3192:	81 60       	ori	r24, 0x01	; 1
    3194:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3196:	e0 e8       	ldi	r30, 0x80	; 128
    3198:	f0 e0       	ldi	r31, 0x00	; 0
    319a:	80 81       	ld	r24, Z
    319c:	81 60       	ori	r24, 0x01	; 1
    319e:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    31a0:	e1 e9       	ldi	r30, 0x91	; 145
    31a2:	f0 e0       	ldi	r31, 0x00	; 0
    31a4:	80 81       	ld	r24, Z
    31a6:	82 60       	ori	r24, 0x02	; 2
    31a8:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    31aa:	80 81       	ld	r24, Z
    31ac:	81 60       	ori	r24, 0x01	; 1
    31ae:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    31b0:	e0 e9       	ldi	r30, 0x90	; 144
    31b2:	f0 e0       	ldi	r31, 0x00	; 0
    31b4:	80 81       	ld	r24, Z
    31b6:	81 60       	ori	r24, 0x01	; 1
    31b8:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
    31ba:	e1 ec       	ldi	r30, 0xC1	; 193
    31bc:	f0 e0       	ldi	r31, 0x00	; 0
    31be:	80 81       	ld	r24, Z
    31c0:	84 60       	ori	r24, 0x04	; 4
    31c2:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
    31c4:	80 81       	ld	r24, Z
    31c6:	82 60       	ori	r24, 0x02	; 2
    31c8:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    31ca:	80 81       	ld	r24, Z
    31cc:	81 60       	ori	r24, 0x01	; 1
    31ce:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
    31d0:	e3 ec       	ldi	r30, 0xC3	; 195
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	80 81       	ld	r24, Z
    31d6:	81 60       	ori	r24, 0x01	; 1
    31d8:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
    31da:	e0 ec       	ldi	r30, 0xC0	; 192
    31dc:	f0 e0       	ldi	r31, 0x00	; 0
    31de:	80 81       	ld	r24, Z
    31e0:	82 60       	ori	r24, 0x02	; 2
    31e2:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
    31e4:	e2 ec       	ldi	r30, 0xC2	; 194
    31e6:	f0 e0       	ldi	r31, 0x00	; 0
    31e8:	80 81       	ld	r24, Z
    31ea:	81 60       	ori	r24, 0x01	; 1
    31ec:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    31ee:	ea e7       	ldi	r30, 0x7A	; 122
    31f0:	f0 e0       	ldi	r31, 0x00	; 0
    31f2:	80 81       	ld	r24, Z
    31f4:	84 60       	ori	r24, 0x04	; 4
    31f6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    31f8:	80 81       	ld	r24, Z
    31fa:	82 60       	ori	r24, 0x02	; 2
    31fc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    31fe:	80 81       	ld	r24, Z
    3200:	81 60       	ori	r24, 0x01	; 1
    3202:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3204:	80 81       	ld	r24, Z
    3206:	80 68       	ori	r24, 0x80	; 128
    3208:	80 83       	st	Z, r24
    320a:	08 95       	ret

0000320c <analogRead>:
{
	uint8_t low, high;

#if defined(analogPinToChannel)
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
    320c:	82 31       	cpi	r24, 0x12	; 18
    320e:	08 f0       	brcs	.+2      	; 0x3212 <analogRead+0x6>
    3210:	82 51       	subi	r24, 0x12	; 18
#endif
	pin = analogPinToChannel(pin);
    3212:	e8 2f       	mov	r30, r24
    3214:	f0 e0       	ldi	r31, 0x00	; 0
    3216:	e3 50       	subi	r30, 0x03	; 3
    3218:	ff 4f       	sbci	r31, 0xFF	; 255
    321a:	e4 91       	lpm	r30, Z
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    321c:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    3220:	e3 fb       	bst	r30, 3
    3222:	22 27       	eor	r18, r18
    3224:	20 f9       	bld	r18, 0
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	95 e0       	ldi	r25, 0x05	; 5
    322a:	22 0f       	add	r18, r18
    322c:	33 1f       	adc	r19, r19
    322e:	9a 95       	dec	r25
    3230:	e1 f7       	brne	.-8      	; 0x322a <analogRead+0x1e>
    3232:	8f 7d       	andi	r24, 0xDF	; 223
    3234:	28 2b       	or	r18, r24
    3236:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    323a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <analog_reference>
    323e:	20 e4       	ldi	r18, 0x40	; 64
    3240:	82 9f       	mul	r24, r18
    3242:	c0 01       	movw	r24, r0
    3244:	11 24       	eor	r1, r1
    3246:	e7 70       	andi	r30, 0x07	; 7
    3248:	e8 2b       	or	r30, r24
    324a:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    324e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3252:	80 64       	ori	r24, 0x40	; 64
    3254:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    3258:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    325c:	86 fd       	sbrc	r24, 6
    325e:	fc cf       	rjmp	.-8      	; 0x3258 <analogRead+0x4c>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    3260:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    3264:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    3268:	90 e0       	ldi	r25, 0x00	; 0
}
    326a:	92 2b       	or	r25, r18
    326c:	08 95       	ret

0000326e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	fc 01       	movw	r30, r24
    3272:	31 97       	sbiw	r30, 0x01	; 1
    3274:	ef 30       	cpi	r30, 0x0F	; 15
    3276:	f1 05       	cpc	r31, r1
    3278:	b0 f5       	brcc	.+108    	; 0x32e6 <turnOffPWM+0x78>
    327a:	ea 5a       	subi	r30, 0xAA	; 170
    327c:	ff 4f       	sbci	r31, 0xFF	; 255
    327e:	0c 94 f7 1c 	jmp	0x39ee	; 0x39ee <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3282:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3286:	8f 77       	andi	r24, 0x7F	; 127
    3288:	03 c0       	rjmp	.+6      	; 0x3290 <turnOffPWM+0x22>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    328a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    328e:	8f 7d       	andi	r24, 0xDF	; 223
    3290:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3294:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    3296:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    329a:	87 7f       	andi	r24, 0xF7	; 247
    329c:	f9 cf       	rjmp	.-14     	; 0x3290 <turnOffPWM+0x22>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    329e:	84 b5       	in	r24, 0x24	; 36
    32a0:	8f 77       	andi	r24, 0x7F	; 127
    32a2:	02 c0       	rjmp	.+4      	; 0x32a8 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    32a4:	84 b5       	in	r24, 0x24	; 36
    32a6:	8f 7d       	andi	r24, 0xDF	; 223
    32a8:	84 bd       	out	0x24, r24	; 36
    32aa:	08 95       	ret
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    32ac:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    32b0:	8f 77       	andi	r24, 0x7F	; 127
    32b2:	07 c0       	rjmp	.+14     	; 0x32c2 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    32b4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    32b8:	8f 7d       	andi	r24, 0xDF	; 223
    32ba:	03 c0       	rjmp	.+6      	; 0x32c2 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    32bc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    32c0:	87 7f       	andi	r24, 0xF7	; 247
    32c2:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    32c6:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    32c8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    32cc:	8f 77       	andi	r24, 0x7F	; 127
    32ce:	03 c0       	rjmp	.+6      	; 0x32d6 <turnOffPWM+0x68>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    32d0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    32d4:	8f 7d       	andi	r24, 0xDF	; 223
    32d6:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    32da:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
		#endif			
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
    32dc:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    32e0:	87 7f       	andi	r24, 0xF7	; 247
    32e2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    32e6:	08 95       	ret

000032e8 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    32e8:	cf 93       	push	r28
    32ea:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	fc 01       	movw	r30, r24
    32f0:	e8 5d       	subi	r30, 0xD8	; 216
    32f2:	fe 4f       	sbci	r31, 0xFE	; 254
    32f4:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    32f6:	fc 01       	movw	r30, r24
    32f8:	e9 5b       	subi	r30, 0xB9	; 185
    32fa:	fe 4f       	sbci	r31, 0xFE	; 254
    32fc:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    32fe:	88 23       	and	r24, r24
    3300:	61 f1       	breq	.+88     	; 0x335a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	88 0f       	add	r24, r24
    3306:	99 1f       	adc	r25, r25
    3308:	fc 01       	movw	r30, r24
    330a:	ee 57       	subi	r30, 0x7E	; 126
    330c:	fe 4f       	sbci	r31, 0xFE	; 254
    330e:	c5 91       	lpm	r28, Z+
    3310:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3312:	fc 01       	movw	r30, r24
    3314:	ec 58       	subi	r30, 0x8C	; 140
    3316:	fe 4f       	sbci	r31, 0xFE	; 254
    3318:	a5 91       	lpm	r26, Z+
    331a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    331c:	61 11       	cpse	r22, r1
    331e:	09 c0       	rjmp	.+18     	; 0x3332 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3320:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3322:	f8 94       	cli
		*reg &= ~bit;
    3324:	88 81       	ld	r24, Y
    3326:	20 95       	com	r18
    3328:	82 23       	and	r24, r18
    332a:	88 83       	st	Y, r24
		*out &= ~bit;
    332c:	ec 91       	ld	r30, X
    332e:	2e 23       	and	r18, r30
    3330:	0b c0       	rjmp	.+22     	; 0x3348 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3332:	62 30       	cpi	r22, 0x02	; 2
    3334:	61 f4       	brne	.+24     	; 0x334e <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3336:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3338:	f8 94       	cli
		*reg &= ~bit;
    333a:	88 81       	ld	r24, Y
    333c:	32 2f       	mov	r19, r18
    333e:	30 95       	com	r19
    3340:	83 23       	and	r24, r19
    3342:	88 83       	st	Y, r24
		*out |= bit;
    3344:	ec 91       	ld	r30, X
    3346:	2e 2b       	or	r18, r30
    3348:	2c 93       	st	X, r18
		SREG = oldSREG;
    334a:	9f bf       	out	0x3f, r25	; 63
    334c:	06 c0       	rjmp	.+12     	; 0x335a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    334e:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3350:	f8 94       	cli
		*reg |= bit;
    3352:	e8 81       	ld	r30, Y
    3354:	2e 2b       	or	r18, r30
    3356:	28 83       	st	Y, r18
		SREG = oldSREG;
    3358:	8f bf       	out	0x3f, r24	; 63
	}
}
    335a:	df 91       	pop	r29
    335c:	cf 91       	pop	r28
    335e:	08 95       	ret

00003360 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3360:	1f 93       	push	r17
    3362:	cf 93       	push	r28
    3364:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3366:	28 2f       	mov	r18, r24
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	f9 01       	movw	r30, r18
    336c:	e7 5f       	subi	r30, 0xF7	; 247
    336e:	fe 4f       	sbci	r31, 0xFE	; 254
    3370:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3372:	f9 01       	movw	r30, r18
    3374:	e8 5d       	subi	r30, 0xD8	; 216
    3376:	fe 4f       	sbci	r31, 0xFE	; 254
    3378:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    337a:	f9 01       	movw	r30, r18
    337c:	e9 5b       	subi	r30, 0xB9	; 185
    337e:	fe 4f       	sbci	r31, 0xFE	; 254
    3380:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3382:	cc 23       	and	r28, r28
    3384:	c1 f0       	breq	.+48     	; 0x33b6 <digitalWrite+0x56>
    3386:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3388:	81 11       	cpse	r24, r1
    338a:	0e 94 37 19 	call	0x326e	; 0x326e <turnOffPWM>

	out = portOutputRegister(port);
    338e:	ec 2f       	mov	r30, r28
    3390:	f0 e0       	ldi	r31, 0x00	; 0
    3392:	ee 0f       	add	r30, r30
    3394:	ff 1f       	adc	r31, r31
    3396:	ec 58       	subi	r30, 0x8C	; 140
    3398:	fe 4f       	sbci	r31, 0xFE	; 254
    339a:	a5 91       	lpm	r26, Z+
    339c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    339e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    33a0:	f8 94       	cli

	if (val == LOW) {
    33a2:	11 11       	cpse	r17, r1
    33a4:	04 c0       	rjmp	.+8      	; 0x33ae <digitalWrite+0x4e>
		*out &= ~bit;
    33a6:	8c 91       	ld	r24, X
    33a8:	d0 95       	com	r29
    33aa:	d8 23       	and	r29, r24
    33ac:	02 c0       	rjmp	.+4      	; 0x33b2 <digitalWrite+0x52>
	} else {
		*out |= bit;
    33ae:	ec 91       	ld	r30, X
    33b0:	de 2b       	or	r29, r30
    33b2:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    33b4:	9f bf       	out	0x3f, r25	; 63
}
    33b6:	df 91       	pop	r29
    33b8:	cf 91       	pop	r28
    33ba:	1f 91       	pop	r17
    33bc:	08 95       	ret

000033be <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    33be:	fc 01       	movw	r30, r24
    33c0:	80 81       	ld	r24, Z
    33c2:	91 81       	ldd	r25, Z+1	; 0x01
    33c4:	0c 94 a9 1d 	jmp	0x3b52	; 0x3b52 <free>

000033c8 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    33c8:	cf 93       	push	r28
    33ca:	df 93       	push	r29
    33cc:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    33ce:	88 81       	ld	r24, Y
    33d0:	99 81       	ldd	r25, Y+1	; 0x01
    33d2:	00 97       	sbiw	r24, 0x00	; 0
    33d4:	11 f0       	breq	.+4      	; 0x33da <_ZN6String10invalidateEv+0x12>
    33d6:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <free>
	buffer = NULL;
    33da:	19 82       	std	Y+1, r1	; 0x01
    33dc:	18 82       	st	Y, r1
	capacity = len = 0;
    33de:	1d 82       	std	Y+5, r1	; 0x05
    33e0:	1c 82       	std	Y+4, r1	; 0x04
    33e2:	1b 82       	std	Y+3, r1	; 0x03
    33e4:	1a 82       	std	Y+2, r1	; 0x02
}
    33e6:	df 91       	pop	r29
    33e8:	cf 91       	pop	r28
    33ea:	08 95       	ret

000033ec <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    33ec:	0f 93       	push	r16
    33ee:	1f 93       	push	r17
    33f0:	cf 93       	push	r28
    33f2:	df 93       	push	r29
    33f4:	ec 01       	movw	r28, r24
    33f6:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    33f8:	6f 5f       	subi	r22, 0xFF	; 255
    33fa:	7f 4f       	sbci	r23, 0xFF	; 255
    33fc:	88 81       	ld	r24, Y
    33fe:	99 81       	ldd	r25, Y+1	; 0x01
    3400:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <realloc>
	if (newbuffer) {
    3404:	00 97       	sbiw	r24, 0x00	; 0
    3406:	31 f0       	breq	.+12     	; 0x3414 <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    3408:	99 83       	std	Y+1, r25	; 0x01
    340a:	88 83       	st	Y, r24
		capacity = maxStrLen;
    340c:	1b 83       	std	Y+3, r17	; 0x03
    340e:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    3410:	81 e0       	ldi	r24, 0x01	; 1
    3412:	01 c0       	rjmp	.+2      	; 0x3416 <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    3414:	80 e0       	ldi	r24, 0x00	; 0
}
    3416:	df 91       	pop	r29
    3418:	cf 91       	pop	r28
    341a:	1f 91       	pop	r17
    341c:	0f 91       	pop	r16
    341e:	08 95       	ret

00003420 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    3420:	cf 93       	push	r28
    3422:	df 93       	push	r29
    3424:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    3426:	88 81       	ld	r24, Y
    3428:	99 81       	ldd	r25, Y+1	; 0x01
    342a:	89 2b       	or	r24, r25
    342c:	29 f0       	breq	.+10     	; 0x3438 <_ZN6String7reserveEj+0x18>
    342e:	8a 81       	ldd	r24, Y+2	; 0x02
    3430:	9b 81       	ldd	r25, Y+3	; 0x03
    3432:	86 17       	cp	r24, r22
    3434:	97 07       	cpc	r25, r23
    3436:	60 f4       	brcc	.+24     	; 0x3450 <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    3438:	ce 01       	movw	r24, r28
    343a:	0e 94 f6 19 	call	0x33ec	; 0x33ec <_ZN6String12changeBufferEj>
    343e:	88 23       	and	r24, r24
    3440:	41 f0       	breq	.+16     	; 0x3452 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    3442:	8c 81       	ldd	r24, Y+4	; 0x04
    3444:	9d 81       	ldd	r25, Y+5	; 0x05
    3446:	89 2b       	or	r24, r25
    3448:	19 f4       	brne	.+6      	; 0x3450 <_ZN6String7reserveEj+0x30>
    344a:	e8 81       	ld	r30, Y
    344c:	f9 81       	ldd	r31, Y+1	; 0x01
    344e:	10 82       	st	Z, r1
    3450:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    3452:	df 91       	pop	r29
    3454:	cf 91       	pop	r28
    3456:	08 95       	ret

00003458 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    3458:	ef 92       	push	r14
    345a:	ff 92       	push	r15
    345c:	0f 93       	push	r16
    345e:	1f 93       	push	r17
    3460:	cf 93       	push	r28
    3462:	df 93       	push	r29
    3464:	ec 01       	movw	r28, r24
    3466:	7b 01       	movw	r14, r22
    3468:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    346a:	ba 01       	movw	r22, r20
    346c:	0e 94 10 1a 	call	0x3420	; 0x3420 <_ZN6String7reserveEj>
    3470:	81 11       	cpse	r24, r1
    3472:	04 c0       	rjmp	.+8      	; 0x347c <_ZN6String4copyEPKcj+0x24>
		invalidate();
    3474:	ce 01       	movw	r24, r28
    3476:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <_ZN6String10invalidateEv>
		return *this;
    347a:	07 c0       	rjmp	.+14     	; 0x348a <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    347c:	1d 83       	std	Y+5, r17	; 0x05
    347e:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    3480:	b7 01       	movw	r22, r14
    3482:	88 81       	ld	r24, Y
    3484:	99 81       	ldd	r25, Y+1	; 0x01
    3486:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <strcpy>
	return *this;
}
    348a:	ce 01       	movw	r24, r28
    348c:	df 91       	pop	r29
    348e:	cf 91       	pop	r28
    3490:	1f 91       	pop	r17
    3492:	0f 91       	pop	r16
    3494:	ff 90       	pop	r15
    3496:	ef 90       	pop	r14
    3498:	08 95       	ret

0000349a <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    349a:	fc 01       	movw	r30, r24
    349c:	11 82       	std	Z+1, r1	; 0x01
    349e:	10 82       	st	Z, r1
	capacity = 0;
    34a0:	13 82       	std	Z+3, r1	; 0x03
    34a2:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    34a4:	15 82       	std	Z+5, r1	; 0x05
    34a6:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    34a8:	61 15       	cp	r22, r1
    34aa:	71 05       	cpc	r23, r1
    34ac:	51 f0       	breq	.+20     	; 0x34c2 <_ZN6StringC1EPKc+0x28>
    34ae:	fb 01       	movw	r30, r22
    34b0:	01 90       	ld	r0, Z+
    34b2:	00 20       	and	r0, r0
    34b4:	e9 f7       	brne	.-6      	; 0x34b0 <_ZN6StringC1EPKc+0x16>
    34b6:	31 97       	sbiw	r30, 0x01	; 1
    34b8:	af 01       	movw	r20, r30
    34ba:	46 1b       	sub	r20, r22
    34bc:	57 0b       	sbc	r21, r23
    34be:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <_ZN6String4copyEPKcj>
    34c2:	08 95       	ret

000034c4 <_ZN7Serial_5writeEh>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		ret = breakValue;
		breakValue = -1;
	}
	return ret;
}
    34c4:	cf 93       	push	r28
    34c6:	df 93       	push	r29
    34c8:	1f 92       	push	r1
    34ca:	cd b7       	in	r28, 0x3d	; 61
    34cc:	de b7       	in	r29, 0x3e	; 62
    34ce:	69 83       	std	Y+1, r22	; 0x01
    34d0:	dc 01       	movw	r26, r24
    34d2:	ed 91       	ld	r30, X+
    34d4:	fc 91       	ld	r31, X
    34d6:	02 80       	ldd	r0, Z+2	; 0x02
    34d8:	f3 81       	ldd	r31, Z+3	; 0x03
    34da:	e0 2d       	mov	r30, r0
    34dc:	41 e0       	ldi	r20, 0x01	; 1
    34de:	50 e0       	ldi	r21, 0x00	; 0
    34e0:	be 01       	movw	r22, r28
    34e2:	6f 5f       	subi	r22, 0xFF	; 255
    34e4:	7f 4f       	sbci	r23, 0xFF	; 255
    34e6:	09 95       	icall
    34e8:	0f 90       	pop	r0
    34ea:	df 91       	pop	r29
    34ec:	cf 91       	pop	r28
    34ee:	08 95       	ret

000034f0 <_ZN7Serial_4peekEv>:
    34f0:	cf 93       	push	r28
    34f2:	df 93       	push	r29
    34f4:	ec 01       	movw	r28, r24
    34f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    34f8:	9d 85       	ldd	r25, Y+13	; 0x0d
    34fa:	97 ff       	sbrs	r25, 7
    34fc:	05 c0       	rjmp	.+10     	; 0x3508 <_ZN7Serial_4peekEv+0x18>
    34fe:	82 e0       	ldi	r24, 0x02	; 2
    3500:	0e 94 bb 14 	call	0x2976	; 0x2976 <_Z8USB_Recvh>
    3504:	9d 87       	std	Y+13, r25	; 0x0d
    3506:	8c 87       	std	Y+12, r24	; 0x0c
    3508:	8c 85       	ldd	r24, Y+12	; 0x0c
    350a:	9d 85       	ldd	r25, Y+13	; 0x0d
    350c:	df 91       	pop	r29
    350e:	cf 91       	pop	r28
    3510:	08 95       	ret

00003512 <_ZN7Serial_17availableForWriteEv>:
    3512:	83 e0       	ldi	r24, 0x03	; 3
    3514:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <_Z13USB_SendSpaceh>
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	08 95       	ret

0000351c <_ZN7Serial_5flushEv>:
    351c:	83 e0       	ldi	r24, 0x03	; 3
    351e:	0c 94 50 17 	jmp	0x2ea0	; 0x2ea0 <_Z9USB_Flushh>

00003522 <_ZN7Serial_9availableEv>:
    3522:	fc 01       	movw	r30, r24
    3524:	84 85       	ldd	r24, Z+12	; 0x0c
    3526:	95 85       	ldd	r25, Z+13	; 0x0d
    3528:	97 fd       	sbrc	r25, 7
    352a:	06 c0       	rjmp	.+12     	; 0x3538 <_ZN7Serial_9availableEv+0x16>
    352c:	82 e0       	ldi	r24, 0x02	; 2
    352e:	0e 94 66 14 	call	0x28cc	; 0x28cc <_Z13USB_Availableh>
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	01 96       	adiw	r24, 0x01	; 1
    3536:	08 95       	ret
    3538:	82 e0       	ldi	r24, 0x02	; 2
    353a:	0e 94 66 14 	call	0x28cc	; 0x28cc <_Z13USB_Availableh>
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	08 95       	ret

00003542 <_ZN7Serial_4readEv>:
    3542:	fc 01       	movw	r30, r24
    3544:	84 85       	ldd	r24, Z+12	; 0x0c
    3546:	95 85       	ldd	r25, Z+13	; 0x0d
    3548:	97 fd       	sbrc	r25, 7
    354a:	05 c0       	rjmp	.+10     	; 0x3556 <_ZN7Serial_4readEv+0x14>
    354c:	2f ef       	ldi	r18, 0xFF	; 255
    354e:	3f ef       	ldi	r19, 0xFF	; 255
    3550:	35 87       	std	Z+13, r19	; 0x0d
    3552:	24 87       	std	Z+12, r18	; 0x0c
    3554:	08 95       	ret
    3556:	82 e0       	ldi	r24, 0x02	; 2
    3558:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <_Z8USB_Recvh>

0000355c <_ZN7Serial_5writeEPKhj>:
    355c:	cf 93       	push	r28
    355e:	df 93       	push	r29
    3560:	ec 01       	movw	r28, r24
    3562:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL12_usbLineInfo+0x7>
    3566:	88 23       	and	r24, r24
    3568:	31 f0       	breq	.+12     	; 0x3576 <_ZN7Serial_5writeEPKhj+0x1a>
    356a:	83 e0       	ldi	r24, 0x03	; 3
    356c:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <_Z8USB_SendhPKvi>
    3570:	18 16       	cp	r1, r24
    3572:	19 06       	cpc	r1, r25
    3574:	34 f0       	brlt	.+12     	; 0x3582 <_ZN7Serial_5writeEPKhj+0x26>
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	9b 83       	std	Y+3, r25	; 0x03
    357c:	8a 83       	std	Y+2, r24	; 0x02
    357e:	80 e0       	ldi	r24, 0x00	; 0
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	df 91       	pop	r29
    3584:	cf 91       	pop	r28
    3586:	08 95       	ret

00003588 <_Z16isLUFAbootloaderv>:
    3588:	ee ef       	ldi	r30, 0xFE	; 254
    358a:	ff e7       	ldi	r31, 0x7F	; 127
    358c:	25 91       	lpm	r18, Z+
    358e:	34 91       	lpm	r19, Z
    3590:	81 e0       	ldi	r24, 0x01	; 1
    3592:	2b 3f       	cpi	r18, 0xFB	; 251
    3594:	3c 4d       	sbci	r19, 0xDC	; 220
    3596:	09 f0       	breq	.+2      	; 0x359a <_Z16isLUFAbootloaderv+0x12>
    3598:	80 e0       	ldi	r24, 0x00	; 0
    359a:	08 95       	ret

0000359c <_Z16CDC_GetInterfacePh>:
    359c:	fc 01       	movw	r30, r24
    359e:	90 81       	ld	r25, Z
    35a0:	9e 5f       	subi	r25, 0xFE	; 254
    35a2:	90 83       	st	Z, r25
    35a4:	42 e4       	ldi	r20, 0x42	; 66
    35a6:	50 e0       	ldi	r21, 0x00	; 0
    35a8:	60 e9       	ldi	r22, 0x90	; 144
    35aa:	71 e0       	ldi	r23, 0x01	; 1
    35ac:	80 e8       	ldi	r24, 0x80	; 128
    35ae:	0c 94 9c 15 	jmp	0x2b38	; 0x2b38 <_Z15USB_SendControlhPKvi>

000035b2 <_Z9CDC_SetupR8USBSetup>:
    35b2:	fc 01       	movw	r30, r24
    35b4:	81 81       	ldd	r24, Z+1	; 0x01
    35b6:	90 81       	ld	r25, Z
    35b8:	91 3a       	cpi	r25, 0xA1	; 161
    35ba:	59 f4       	brne	.+22     	; 0x35d2 <_Z9CDC_SetupR8USBSetup+0x20>
    35bc:	81 32       	cpi	r24, 0x21	; 33
    35be:	09 f0       	breq	.+2      	; 0x35c2 <_Z9CDC_SetupR8USBSetup+0x10>
    35c0:	65 c0       	rjmp	.+202    	; 0x368c <_Z9CDC_SetupR8USBSetup+0xda>
    35c2:	47 e0       	ldi	r20, 0x07	; 7
    35c4:	50 e0       	ldi	r21, 0x00	; 0
    35c6:	66 e1       	ldi	r22, 0x16	; 22
    35c8:	71 e0       	ldi	r23, 0x01	; 1
    35ca:	80 e0       	ldi	r24, 0x00	; 0
    35cc:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <_Z15USB_SendControlhPKvi>
    35d0:	5b c0       	rjmp	.+182    	; 0x3688 <_Z9CDC_SetupR8USBSetup+0xd6>
    35d2:	91 32       	cpi	r25, 0x21	; 33
    35d4:	09 f0       	breq	.+2      	; 0x35d8 <_Z9CDC_SetupR8USBSetup+0x26>
    35d6:	5a c0       	rjmp	.+180    	; 0x368c <_Z9CDC_SetupR8USBSetup+0xda>
    35d8:	83 32       	cpi	r24, 0x23	; 35
    35da:	69 f4       	brne	.+26     	; 0x35f6 <_Z9CDC_SetupR8USBSetup+0x44>
    35dc:	82 81       	ldd	r24, Z+2	; 0x02
    35de:	93 81       	ldd	r25, Z+3	; 0x03
    35e0:	a0 e0       	ldi	r26, 0x00	; 0
    35e2:	b0 e0       	ldi	r27, 0x00	; 0
    35e4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_ZL10breakValue>
    35e8:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_ZL10breakValue+0x1>
    35ec:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <_ZL10breakValue+0x2>
    35f0:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <_ZL10breakValue+0x3>
    35f4:	49 c0       	rjmp	.+146    	; 0x3688 <_Z9CDC_SetupR8USBSetup+0xd6>
    35f6:	80 32       	cpi	r24, 0x20	; 32
    35f8:	39 f4       	brne	.+14     	; 0x3608 <_Z9CDC_SetupR8USBSetup+0x56>
    35fa:	67 e0       	ldi	r22, 0x07	; 7
    35fc:	70 e0       	ldi	r23, 0x00	; 0
    35fe:	86 e1       	ldi	r24, 0x16	; 22
    3600:	91 e0       	ldi	r25, 0x01	; 1
    3602:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <_Z15USB_RecvControlPvi>
    3606:	40 c0       	rjmp	.+128    	; 0x3688 <_Z9CDC_SetupR8USBSetup+0xd6>
    3608:	82 32       	cpi	r24, 0x22	; 34
    360a:	09 f0       	breq	.+2      	; 0x360e <_Z9CDC_SetupR8USBSetup+0x5c>
    360c:	3d c0       	rjmp	.+122    	; 0x3688 <_Z9CDC_SetupR8USBSetup+0xd6>
    360e:	82 81       	ldd	r24, Z+2	; 0x02
    3610:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZL12_usbLineInfo+0x7>
    3614:	0e 94 c4 1a 	call	0x3588	; 0x3588 <_Z16isLUFAbootloaderv>
    3618:	88 23       	and	r24, r24
    361a:	19 f0       	breq	.+6      	; 0x3622 <_Z9CDC_SetupR8USBSetup+0x70>
    361c:	ee ef       	ldi	r30, 0xFE	; 254
    361e:	fa e0       	ldi	r31, 0x0A	; 10
    3620:	02 c0       	rjmp	.+4      	; 0x3626 <_Z9CDC_SetupR8USBSetup+0x74>
    3622:	e0 e0       	ldi	r30, 0x00	; 0
    3624:	f8 e0       	ldi	r31, 0x08	; 8
    3626:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_ZL12_usbLineInfo>
    362a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <_ZL12_usbLineInfo+0x1>
    362e:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <_ZL12_usbLineInfo+0x2>
    3632:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <_ZL12_usbLineInfo+0x3>
    3636:	80 3b       	cpi	r24, 0xB0	; 176
    3638:	94 40       	sbci	r25, 0x04	; 4
    363a:	a1 05       	cpc	r26, r1
    363c:	b1 05       	cpc	r27, r1
    363e:	41 f5       	brne	.+80     	; 0x3690 <_Z9CDC_SetupR8USBSetup+0xde>
    3640:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL12_usbLineInfo+0x7>
    3644:	80 fd       	sbrc	r24, 0
    3646:	24 c0       	rjmp	.+72     	; 0x3690 <_Z9CDC_SetupR8USBSetup+0xde>
    3648:	ee 3f       	cpi	r30, 0xFE	; 254
    364a:	8a e0       	ldi	r24, 0x0A	; 10
    364c:	f8 07       	cpc	r31, r24
    364e:	51 f0       	breq	.+20     	; 0x3664 <_Z9CDC_SetupR8USBSetup+0xb2>
    3650:	80 81       	ld	r24, Z
    3652:	91 81       	ldd	r25, Z+1	; 0x01
    3654:	87 37       	cpi	r24, 0x77	; 119
    3656:	27 e7       	ldi	r18, 0x77	; 119
    3658:	92 07       	cpc	r25, r18
    365a:	21 f0       	breq	.+8      	; 0x3664 <_Z9CDC_SetupR8USBSetup+0xb2>
    365c:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x62c>
    3660:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x62b>
    3664:	87 e7       	ldi	r24, 0x77	; 119
    3666:	97 e7       	ldi	r25, 0x77	; 119
    3668:	91 83       	std	Z+1, r25	; 0x01
    366a:	80 83       	st	Z, r24
    366c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3670:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <_ZL11wdtcsr_save>
    3674:	9b e0       	ldi	r25, 0x0B	; 11
    3676:	88 e1       	ldi	r24, 0x18	; 24
    3678:	0f b6       	in	r0, 0x3f	; 63
    367a:	f8 94       	cli
    367c:	a8 95       	wdr
    367e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3682:	0f be       	out	0x3f, r0	; 63
    3684:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3688:	81 e0       	ldi	r24, 0x01	; 1
    368a:	08 95       	ret
    368c:	80 e0       	ldi	r24, 0x00	; 0
    368e:	08 95       	ret
    3690:	80 81       	ld	r24, Z
    3692:	91 81       	ldd	r25, Z+1	; 0x01
    3694:	87 37       	cpi	r24, 0x77	; 119
    3696:	97 47       	sbci	r25, 0x77	; 119
    3698:	b9 f7       	brne	.-18     	; 0x3688 <_Z9CDC_SetupR8USBSetup+0xd6>
    369a:	a8 95       	wdr
    369c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    36a0:	88 61       	ori	r24, 0x18	; 24
    36a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    36a6:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <_ZL11wdtcsr_save>
    36aa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    36ae:	ee 3f       	cpi	r30, 0xFE	; 254
    36b0:	8a e0       	ldi	r24, 0x0A	; 10
    36b2:	f8 07       	cpc	r31, r24
    36b4:	39 f0       	breq	.+14     	; 0x36c4 <_Z9CDC_SetupR8USBSetup+0x112>
    36b6:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x62b>
    36ba:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x62c>
    36be:	91 83       	std	Z+1, r25	; 0x01
    36c0:	80 83       	st	Z, r24
    36c2:	e2 cf       	rjmp	.-60     	; 0x3688 <_Z9CDC_SetupR8USBSetup+0xd6>
    36c4:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x62c>
    36c8:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x62b>
    36cc:	dd cf       	rjmp	.-70     	; 0x3688 <_Z9CDC_SetupR8USBSetup+0xd6>

000036ce <_GLOBAL__sub_I__cdcInterface>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    36ce:	e2 e7       	ldi	r30, 0x72	; 114
    36d0:	f4 e0       	ldi	r31, 0x04	; 4
    36d2:	13 82       	std	Z+3, r1	; 0x03
    36d4:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    36d6:	88 ee       	ldi	r24, 0xE8	; 232
    36d8:	93 e0       	ldi	r25, 0x03	; 3
    36da:	a0 e0       	ldi	r26, 0x00	; 0
    36dc:	b0 e0       	ldi	r27, 0x00	; 0
    36de:	84 83       	std	Z+4, r24	; 0x04
    36e0:	95 83       	std	Z+5, r25	; 0x05
    36e2:	a6 83       	std	Z+6, r26	; 0x06
    36e4:	b7 83       	std	Z+7, r27	; 0x07
class Serial_ : public Stream
{
private:
	int peek_buffer;
public:
	Serial_() { peek_buffer = -1; };
    36e6:	8b e5       	ldi	r24, 0x5B	; 91
    36e8:	92 e0       	ldi	r25, 0x02	; 2
    36ea:	91 83       	std	Z+1, r25	; 0x01
    36ec:	80 83       	st	Z, r24
    36ee:	8f ef       	ldi	r24, 0xFF	; 255
    36f0:	9f ef       	ldi	r25, 0xFF	; 255
    36f2:	95 87       	std	Z+13, r25	; 0x0d
    36f4:	84 87       	std	Z+12, r24	; 0x0c
    36f6:	08 95       	ret

000036f8 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    36f8:	08 95       	ret

000036fa <_ZN13PluggableUSB_12getInterfaceEPh>:
		_initEndpoints[lastEp] = node->endpointType[i];
		lastEp++;
	}
	return true;
	// restart USB layer???
}
    36fa:	ef 92       	push	r14
    36fc:	ff 92       	push	r15
    36fe:	0f 93       	push	r16
    3700:	1f 93       	push	r17
    3702:	cf 93       	push	r28
    3704:	df 93       	push	r29
    3706:	7b 01       	movw	r14, r22
    3708:	fc 01       	movw	r30, r24
    370a:	c2 81       	ldd	r28, Z+2	; 0x02
    370c:	d3 81       	ldd	r29, Z+3	; 0x03
    370e:	00 e0       	ldi	r16, 0x00	; 0
    3710:	10 e0       	ldi	r17, 0x00	; 0
    3712:	20 97       	sbiw	r28, 0x00	; 0
    3714:	81 f0       	breq	.+32     	; 0x3736 <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
    3716:	e8 81       	ld	r30, Y
    3718:	f9 81       	ldd	r31, Y+1	; 0x01
    371a:	02 80       	ldd	r0, Z+2	; 0x02
    371c:	f3 81       	ldd	r31, Z+3	; 0x03
    371e:	e0 2d       	mov	r30, r0
    3720:	b7 01       	movw	r22, r14
    3722:	ce 01       	movw	r24, r28
    3724:	09 95       	icall
    3726:	97 fd       	sbrc	r25, 7
    3728:	08 c0       	rjmp	.+16     	; 0x373a <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
    372a:	08 0f       	add	r16, r24
    372c:	19 1f       	adc	r17, r25
    372e:	08 84       	ldd	r0, Y+8	; 0x08
    3730:	d9 85       	ldd	r29, Y+9	; 0x09
    3732:	c0 2d       	mov	r28, r0
    3734:	ee cf       	rjmp	.-36     	; 0x3712 <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    3736:	c8 01       	movw	r24, r16
    3738:	02 c0       	rjmp	.+4      	; 0x373e <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
    373a:	8f ef       	ldi	r24, 0xFF	; 255
    373c:	9f ef       	ldi	r25, 0xFF	; 255
    373e:	df 91       	pop	r29
    3740:	cf 91       	pop	r28
    3742:	1f 91       	pop	r17
    3744:	0f 91       	pop	r16
    3746:	ff 90       	pop	r15
    3748:	ef 90       	pop	r14
    374a:	08 95       	ret

0000374c <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    374c:	0f 93       	push	r16
    374e:	1f 93       	push	r17
    3750:	cf 93       	push	r28
    3752:	df 93       	push	r29
    3754:	8b 01       	movw	r16, r22
    3756:	fc 01       	movw	r30, r24
    3758:	c2 81       	ldd	r28, Z+2	; 0x02
    375a:	d3 81       	ldd	r29, Z+3	; 0x03
    375c:	20 97       	sbiw	r28, 0x00	; 0
    375e:	71 f0       	breq	.+28     	; 0x377c <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
    3760:	e8 81       	ld	r30, Y
    3762:	f9 81       	ldd	r31, Y+1	; 0x01
    3764:	04 80       	ldd	r0, Z+4	; 0x04
    3766:	f5 81       	ldd	r31, Z+5	; 0x05
    3768:	e0 2d       	mov	r30, r0
    376a:	b8 01       	movw	r22, r16
    376c:	ce 01       	movw	r24, r28
    376e:	09 95       	icall
    3770:	00 97       	sbiw	r24, 0x00	; 0
    3772:	31 f4       	brne	.+12     	; 0x3780 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
    3774:	08 84       	ldd	r0, Y+8	; 0x08
    3776:	d9 85       	ldd	r29, Y+9	; 0x09
    3778:	c0 2d       	mov	r28, r0
    377a:	f0 cf       	rjmp	.-32     	; 0x375c <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
    377c:	80 e0       	ldi	r24, 0x00	; 0
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	df 91       	pop	r29
    3782:	cf 91       	pop	r28
    3784:	1f 91       	pop	r17
    3786:	0f 91       	pop	r16
    3788:	08 95       	ret

0000378a <_ZN13PluggableUSB_12getShortNameEPc>:
    378a:	0f 93       	push	r16
    378c:	1f 93       	push	r17
    378e:	cf 93       	push	r28
    3790:	df 93       	push	r29
    3792:	8b 01       	movw	r16, r22
    3794:	fc 01       	movw	r30, r24
    3796:	c2 81       	ldd	r28, Z+2	; 0x02
    3798:	d3 81       	ldd	r29, Z+3	; 0x03
    379a:	20 97       	sbiw	r28, 0x00	; 0
    379c:	71 f0       	breq	.+28     	; 0x37ba <_ZN13PluggableUSB_12getShortNameEPc+0x30>
    379e:	e8 81       	ld	r30, Y
    37a0:	f9 81       	ldd	r31, Y+1	; 0x01
    37a2:	06 80       	ldd	r0, Z+6	; 0x06
    37a4:	f7 81       	ldd	r31, Z+7	; 0x07
    37a6:	e0 2d       	mov	r30, r0
    37a8:	b8 01       	movw	r22, r16
    37aa:	ce 01       	movw	r24, r28
    37ac:	09 95       	icall
    37ae:	08 0f       	add	r16, r24
    37b0:	11 1d       	adc	r17, r1
    37b2:	08 84       	ldd	r0, Y+8	; 0x08
    37b4:	d9 85       	ldd	r29, Y+9	; 0x09
    37b6:	c0 2d       	mov	r28, r0
    37b8:	f0 cf       	rjmp	.-32     	; 0x379a <_ZN13PluggableUSB_12getShortNameEPc+0x10>
    37ba:	f8 01       	movw	r30, r16
    37bc:	10 82       	st	Z, r1
    37be:	df 91       	pop	r29
    37c0:	cf 91       	pop	r28
    37c2:	1f 91       	pop	r17
    37c4:	0f 91       	pop	r16
    37c6:	08 95       	ret

000037c8 <_ZN13PluggableUSB_5setupER8USBSetup>:
    37c8:	0f 93       	push	r16
    37ca:	1f 93       	push	r17
    37cc:	cf 93       	push	r28
    37ce:	df 93       	push	r29
    37d0:	8b 01       	movw	r16, r22
    37d2:	fc 01       	movw	r30, r24
    37d4:	c2 81       	ldd	r28, Z+2	; 0x02
    37d6:	d3 81       	ldd	r29, Z+3	; 0x03
    37d8:	20 97       	sbiw	r28, 0x00	; 0
    37da:	71 f0       	breq	.+28     	; 0x37f8 <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
    37dc:	e8 81       	ld	r30, Y
    37de:	f9 81       	ldd	r31, Y+1	; 0x01
    37e0:	01 90       	ld	r0, Z+
    37e2:	f0 81       	ld	r31, Z
    37e4:	e0 2d       	mov	r30, r0
    37e6:	b8 01       	movw	r22, r16
    37e8:	ce 01       	movw	r24, r28
    37ea:	09 95       	icall
    37ec:	81 11       	cpse	r24, r1
    37ee:	05 c0       	rjmp	.+10     	; 0x37fa <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
    37f0:	08 84       	ldd	r0, Y+8	; 0x08
    37f2:	d9 85       	ldd	r29, Y+9	; 0x09
    37f4:	c0 2d       	mov	r28, r0
    37f6:	f0 cf       	rjmp	.-32     	; 0x37d8 <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
    37f8:	80 e0       	ldi	r24, 0x00	; 0
    37fa:	df 91       	pop	r29
    37fc:	cf 91       	pop	r28
    37fe:	1f 91       	pop	r17
    3800:	0f 91       	pop	r16
    3802:	08 95       	ret

00003804 <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    3804:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <_ZGVZ12PluggableUSBvE3obj>
    3808:	81 11       	cpse	r24, r1
    380a:	0d c0       	rjmp	.+26     	; 0x3826 <_Z12PluggableUSBv+0x22>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    380c:	82 e0       	ldi	r24, 0x02	; 2
    380e:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <_ZZ12PluggableUSBvE3obj>
    3812:	84 e0       	ldi	r24, 0x04	; 4
    3814:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <_ZZ12PluggableUSBvE3obj+0x1>
    3818:	10 92 c6 04 	sts	0x04C6, r1	; 0x8004c6 <_ZZ12PluggableUSBvE3obj+0x3>
    381c:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <_ZZ12PluggableUSBvE3obj+0x2>
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    3820:	81 e0       	ldi	r24, 0x01	; 1
    3822:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <_ZGVZ12PluggableUSBvE3obj>
	return obj;
}
    3826:	83 ec       	ldi	r24, 0xC3	; 195
    3828:	94 e0       	ldi	r25, 0x04	; 4
    382a:	08 95       	ret

0000382c <__divsf3>:
    382c:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__divsf3x>
    3830:	0c 94 1a 11 	jmp	0x2234	; 0x2234 <__fp_round>
    3834:	0e 94 13 11 	call	0x2226	; 0x2226 <__fp_pscB>
    3838:	58 f0       	brcs	.+22     	; 0x3850 <__divsf3+0x24>
    383a:	0e 94 0c 11 	call	0x2218	; 0x2218 <__fp_pscA>
    383e:	40 f0       	brcs	.+16     	; 0x3850 <__divsf3+0x24>
    3840:	29 f4       	brne	.+10     	; 0x384c <__divsf3+0x20>
    3842:	5f 3f       	cpi	r21, 0xFF	; 255
    3844:	29 f0       	breq	.+10     	; 0x3850 <__divsf3+0x24>
    3846:	0c 94 03 11 	jmp	0x2206	; 0x2206 <__fp_inf>
    384a:	51 11       	cpse	r21, r1
    384c:	0c 94 4e 11 	jmp	0x229c	; 0x229c <__fp_szero>
    3850:	0c 94 09 11 	jmp	0x2212	; 0x2212 <__fp_nan>

00003854 <__divsf3x>:
    3854:	0e 94 2b 11 	call	0x2256	; 0x2256 <__fp_split3>
    3858:	68 f3       	brcs	.-38     	; 0x3834 <__divsf3+0x8>

0000385a <__divsf3_pse>:
    385a:	99 23       	and	r25, r25
    385c:	b1 f3       	breq	.-20     	; 0x384a <__divsf3+0x1e>
    385e:	55 23       	and	r21, r21
    3860:	91 f3       	breq	.-28     	; 0x3846 <__divsf3+0x1a>
    3862:	95 1b       	sub	r25, r21
    3864:	55 0b       	sbc	r21, r21
    3866:	bb 27       	eor	r27, r27
    3868:	aa 27       	eor	r26, r26
    386a:	62 17       	cp	r22, r18
    386c:	73 07       	cpc	r23, r19
    386e:	84 07       	cpc	r24, r20
    3870:	38 f0       	brcs	.+14     	; 0x3880 <__divsf3_pse+0x26>
    3872:	9f 5f       	subi	r25, 0xFF	; 255
    3874:	5f 4f       	sbci	r21, 0xFF	; 255
    3876:	22 0f       	add	r18, r18
    3878:	33 1f       	adc	r19, r19
    387a:	44 1f       	adc	r20, r20
    387c:	aa 1f       	adc	r26, r26
    387e:	a9 f3       	breq	.-22     	; 0x386a <__divsf3_pse+0x10>
    3880:	35 d0       	rcall	.+106    	; 0x38ec <__divsf3_pse+0x92>
    3882:	0e 2e       	mov	r0, r30
    3884:	3a f0       	brmi	.+14     	; 0x3894 <__divsf3_pse+0x3a>
    3886:	e0 e8       	ldi	r30, 0x80	; 128
    3888:	32 d0       	rcall	.+100    	; 0x38ee <__divsf3_pse+0x94>
    388a:	91 50       	subi	r25, 0x01	; 1
    388c:	50 40       	sbci	r21, 0x00	; 0
    388e:	e6 95       	lsr	r30
    3890:	00 1c       	adc	r0, r0
    3892:	ca f7       	brpl	.-14     	; 0x3886 <__divsf3_pse+0x2c>
    3894:	2b d0       	rcall	.+86     	; 0x38ec <__divsf3_pse+0x92>
    3896:	fe 2f       	mov	r31, r30
    3898:	29 d0       	rcall	.+82     	; 0x38ec <__divsf3_pse+0x92>
    389a:	66 0f       	add	r22, r22
    389c:	77 1f       	adc	r23, r23
    389e:	88 1f       	adc	r24, r24
    38a0:	bb 1f       	adc	r27, r27
    38a2:	26 17       	cp	r18, r22
    38a4:	37 07       	cpc	r19, r23
    38a6:	48 07       	cpc	r20, r24
    38a8:	ab 07       	cpc	r26, r27
    38aa:	b0 e8       	ldi	r27, 0x80	; 128
    38ac:	09 f0       	breq	.+2      	; 0x38b0 <__divsf3_pse+0x56>
    38ae:	bb 0b       	sbc	r27, r27
    38b0:	80 2d       	mov	r24, r0
    38b2:	bf 01       	movw	r22, r30
    38b4:	ff 27       	eor	r31, r31
    38b6:	93 58       	subi	r25, 0x83	; 131
    38b8:	5f 4f       	sbci	r21, 0xFF	; 255
    38ba:	3a f0       	brmi	.+14     	; 0x38ca <__divsf3_pse+0x70>
    38bc:	9e 3f       	cpi	r25, 0xFE	; 254
    38be:	51 05       	cpc	r21, r1
    38c0:	78 f0       	brcs	.+30     	; 0x38e0 <__divsf3_pse+0x86>
    38c2:	0c 94 03 11 	jmp	0x2206	; 0x2206 <__fp_inf>
    38c6:	0c 94 4e 11 	jmp	0x229c	; 0x229c <__fp_szero>
    38ca:	5f 3f       	cpi	r21, 0xFF	; 255
    38cc:	e4 f3       	brlt	.-8      	; 0x38c6 <__divsf3_pse+0x6c>
    38ce:	98 3e       	cpi	r25, 0xE8	; 232
    38d0:	d4 f3       	brlt	.-12     	; 0x38c6 <__divsf3_pse+0x6c>
    38d2:	86 95       	lsr	r24
    38d4:	77 95       	ror	r23
    38d6:	67 95       	ror	r22
    38d8:	b7 95       	ror	r27
    38da:	f7 95       	ror	r31
    38dc:	9f 5f       	subi	r25, 0xFF	; 255
    38de:	c9 f7       	brne	.-14     	; 0x38d2 <__divsf3_pse+0x78>
    38e0:	88 0f       	add	r24, r24
    38e2:	91 1d       	adc	r25, r1
    38e4:	96 95       	lsr	r25
    38e6:	87 95       	ror	r24
    38e8:	97 f9       	bld	r25, 7
    38ea:	08 95       	ret
    38ec:	e1 e0       	ldi	r30, 0x01	; 1
    38ee:	66 0f       	add	r22, r22
    38f0:	77 1f       	adc	r23, r23
    38f2:	88 1f       	adc	r24, r24
    38f4:	bb 1f       	adc	r27, r27
    38f6:	62 17       	cp	r22, r18
    38f8:	73 07       	cpc	r23, r19
    38fa:	84 07       	cpc	r24, r20
    38fc:	ba 07       	cpc	r27, r26
    38fe:	20 f0       	brcs	.+8      	; 0x3908 <__divsf3_pse+0xae>
    3900:	62 1b       	sub	r22, r18
    3902:	73 0b       	sbc	r23, r19
    3904:	84 0b       	sbc	r24, r20
    3906:	ba 0b       	sbc	r27, r26
    3908:	ee 1f       	adc	r30, r30
    390a:	88 f7       	brcc	.-30     	; 0x38ee <__divsf3_pse+0x94>
    390c:	e0 95       	com	r30
    390e:	08 95       	ret

00003910 <__fixunssfsi>:
    3910:	0e 94 33 11 	call	0x2266	; 0x2266 <__fp_splitA>
    3914:	88 f0       	brcs	.+34     	; 0x3938 <__fixunssfsi+0x28>
    3916:	9f 57       	subi	r25, 0x7F	; 127
    3918:	98 f0       	brcs	.+38     	; 0x3940 <__fixunssfsi+0x30>
    391a:	b9 2f       	mov	r27, r25
    391c:	99 27       	eor	r25, r25
    391e:	b7 51       	subi	r27, 0x17	; 23
    3920:	b0 f0       	brcs	.+44     	; 0x394e <__fixunssfsi+0x3e>
    3922:	e1 f0       	breq	.+56     	; 0x395c <__fixunssfsi+0x4c>
    3924:	66 0f       	add	r22, r22
    3926:	77 1f       	adc	r23, r23
    3928:	88 1f       	adc	r24, r24
    392a:	99 1f       	adc	r25, r25
    392c:	1a f0       	brmi	.+6      	; 0x3934 <__fixunssfsi+0x24>
    392e:	ba 95       	dec	r27
    3930:	c9 f7       	brne	.-14     	; 0x3924 <__fixunssfsi+0x14>
    3932:	14 c0       	rjmp	.+40     	; 0x395c <__fixunssfsi+0x4c>
    3934:	b1 30       	cpi	r27, 0x01	; 1
    3936:	91 f0       	breq	.+36     	; 0x395c <__fixunssfsi+0x4c>
    3938:	0e 94 4d 11 	call	0x229a	; 0x229a <__fp_zero>
    393c:	b1 e0       	ldi	r27, 0x01	; 1
    393e:	08 95       	ret
    3940:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__fp_zero>
    3944:	67 2f       	mov	r22, r23
    3946:	78 2f       	mov	r23, r24
    3948:	88 27       	eor	r24, r24
    394a:	b8 5f       	subi	r27, 0xF8	; 248
    394c:	39 f0       	breq	.+14     	; 0x395c <__fixunssfsi+0x4c>
    394e:	b9 3f       	cpi	r27, 0xF9	; 249
    3950:	cc f3       	brlt	.-14     	; 0x3944 <__fixunssfsi+0x34>
    3952:	86 95       	lsr	r24
    3954:	77 95       	ror	r23
    3956:	67 95       	ror	r22
    3958:	b3 95       	inc	r27
    395a:	d9 f7       	brne	.-10     	; 0x3952 <__fixunssfsi+0x42>
    395c:	3e f4       	brtc	.+14     	; 0x396c <__fixunssfsi+0x5c>
    395e:	90 95       	com	r25
    3960:	80 95       	com	r24
    3962:	70 95       	com	r23
    3964:	61 95       	neg	r22
    3966:	7f 4f       	sbci	r23, 0xFF	; 255
    3968:	8f 4f       	sbci	r24, 0xFF	; 255
    396a:	9f 4f       	sbci	r25, 0xFF	; 255
    396c:	08 95       	ret

0000396e <__gesf2>:
    396e:	0e 94 df 10 	call	0x21be	; 0x21be <__fp_cmp>
    3972:	08 f4       	brcc	.+2      	; 0x3976 <__gesf2+0x8>
    3974:	8f ef       	ldi	r24, 0xFF	; 255
    3976:	08 95       	ret

00003978 <__unordsf2>:
    3978:	0e 94 df 10 	call	0x21be	; 0x21be <__fp_cmp>
    397c:	88 0b       	sbc	r24, r24
    397e:	99 0b       	sbc	r25, r25
    3980:	08 95       	ret

00003982 <__divmodhi4>:
    3982:	97 fb       	bst	r25, 7
    3984:	07 2e       	mov	r0, r23
    3986:	16 f4       	brtc	.+4      	; 0x398c <__divmodhi4+0xa>
    3988:	00 94       	com	r0
    398a:	07 d0       	rcall	.+14     	; 0x399a <__divmodhi4_neg1>
    398c:	77 fd       	sbrc	r23, 7
    398e:	09 d0       	rcall	.+18     	; 0x39a2 <__divmodhi4_neg2>
    3990:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <__udivmodhi4>
    3994:	07 fc       	sbrc	r0, 7
    3996:	05 d0       	rcall	.+10     	; 0x39a2 <__divmodhi4_neg2>
    3998:	3e f4       	brtc	.+14     	; 0x39a8 <__divmodhi4_exit>

0000399a <__divmodhi4_neg1>:
    399a:	90 95       	com	r25
    399c:	81 95       	neg	r24
    399e:	9f 4f       	sbci	r25, 0xFF	; 255
    39a0:	08 95       	ret

000039a2 <__divmodhi4_neg2>:
    39a2:	70 95       	com	r23
    39a4:	61 95       	neg	r22
    39a6:	7f 4f       	sbci	r23, 0xFF	; 255

000039a8 <__divmodhi4_exit>:
    39a8:	08 95       	ret

000039aa <__udivmodsi4>:
    39aa:	a1 e2       	ldi	r26, 0x21	; 33
    39ac:	1a 2e       	mov	r1, r26
    39ae:	aa 1b       	sub	r26, r26
    39b0:	bb 1b       	sub	r27, r27
    39b2:	fd 01       	movw	r30, r26
    39b4:	0d c0       	rjmp	.+26     	; 0x39d0 <__udivmodsi4_ep>

000039b6 <__udivmodsi4_loop>:
    39b6:	aa 1f       	adc	r26, r26
    39b8:	bb 1f       	adc	r27, r27
    39ba:	ee 1f       	adc	r30, r30
    39bc:	ff 1f       	adc	r31, r31
    39be:	a2 17       	cp	r26, r18
    39c0:	b3 07       	cpc	r27, r19
    39c2:	e4 07       	cpc	r30, r20
    39c4:	f5 07       	cpc	r31, r21
    39c6:	20 f0       	brcs	.+8      	; 0x39d0 <__udivmodsi4_ep>
    39c8:	a2 1b       	sub	r26, r18
    39ca:	b3 0b       	sbc	r27, r19
    39cc:	e4 0b       	sbc	r30, r20
    39ce:	f5 0b       	sbc	r31, r21

000039d0 <__udivmodsi4_ep>:
    39d0:	66 1f       	adc	r22, r22
    39d2:	77 1f       	adc	r23, r23
    39d4:	88 1f       	adc	r24, r24
    39d6:	99 1f       	adc	r25, r25
    39d8:	1a 94       	dec	r1
    39da:	69 f7       	brne	.-38     	; 0x39b6 <__udivmodsi4_loop>
    39dc:	60 95       	com	r22
    39de:	70 95       	com	r23
    39e0:	80 95       	com	r24
    39e2:	90 95       	com	r25
    39e4:	9b 01       	movw	r18, r22
    39e6:	ac 01       	movw	r20, r24
    39e8:	bd 01       	movw	r22, r26
    39ea:	cf 01       	movw	r24, r30
    39ec:	08 95       	ret

000039ee <__tablejump2__>:
    39ee:	ee 0f       	add	r30, r30
    39f0:	ff 1f       	adc	r31, r31
    39f2:	05 90       	lpm	r0, Z+
    39f4:	f4 91       	lpm	r31, Z
    39f6:	e0 2d       	mov	r30, r0
    39f8:	09 94       	ijmp

000039fa <__udivmodhi4>:
    39fa:	aa 1b       	sub	r26, r26
    39fc:	bb 1b       	sub	r27, r27
    39fe:	51 e1       	ldi	r21, 0x11	; 17
    3a00:	07 c0       	rjmp	.+14     	; 0x3a10 <__udivmodhi4_ep>

00003a02 <__udivmodhi4_loop>:
    3a02:	aa 1f       	adc	r26, r26
    3a04:	bb 1f       	adc	r27, r27
    3a06:	a6 17       	cp	r26, r22
    3a08:	b7 07       	cpc	r27, r23
    3a0a:	10 f0       	brcs	.+4      	; 0x3a10 <__udivmodhi4_ep>
    3a0c:	a6 1b       	sub	r26, r22
    3a0e:	b7 0b       	sbc	r27, r23

00003a10 <__udivmodhi4_ep>:
    3a10:	88 1f       	adc	r24, r24
    3a12:	99 1f       	adc	r25, r25
    3a14:	5a 95       	dec	r21
    3a16:	a9 f7       	brne	.-22     	; 0x3a02 <__udivmodhi4_loop>
    3a18:	80 95       	com	r24
    3a1a:	90 95       	com	r25
    3a1c:	bc 01       	movw	r22, r24
    3a1e:	cd 01       	movw	r24, r26
    3a20:	08 95       	ret

00003a22 <malloc>:
    3a22:	0f 93       	push	r16
    3a24:	1f 93       	push	r17
    3a26:	cf 93       	push	r28
    3a28:	df 93       	push	r29
    3a2a:	82 30       	cpi	r24, 0x02	; 2
    3a2c:	91 05       	cpc	r25, r1
    3a2e:	10 f4       	brcc	.+4      	; 0x3a34 <malloc+0x12>
    3a30:	82 e0       	ldi	r24, 0x02	; 2
    3a32:	90 e0       	ldi	r25, 0x00	; 0
    3a34:	e0 91 d1 04 	lds	r30, 0x04D1	; 0x8004d1 <__flp>
    3a38:	f0 91 d2 04 	lds	r31, 0x04D2	; 0x8004d2 <__flp+0x1>
    3a3c:	20 e0       	ldi	r18, 0x00	; 0
    3a3e:	30 e0       	ldi	r19, 0x00	; 0
    3a40:	a0 e0       	ldi	r26, 0x00	; 0
    3a42:	b0 e0       	ldi	r27, 0x00	; 0
    3a44:	30 97       	sbiw	r30, 0x00	; 0
    3a46:	19 f1       	breq	.+70     	; 0x3a8e <malloc+0x6c>
    3a48:	40 81       	ld	r20, Z
    3a4a:	51 81       	ldd	r21, Z+1	; 0x01
    3a4c:	02 81       	ldd	r16, Z+2	; 0x02
    3a4e:	13 81       	ldd	r17, Z+3	; 0x03
    3a50:	48 17       	cp	r20, r24
    3a52:	59 07       	cpc	r21, r25
    3a54:	c8 f0       	brcs	.+50     	; 0x3a88 <malloc+0x66>
    3a56:	84 17       	cp	r24, r20
    3a58:	95 07       	cpc	r25, r21
    3a5a:	69 f4       	brne	.+26     	; 0x3a76 <malloc+0x54>
    3a5c:	10 97       	sbiw	r26, 0x00	; 0
    3a5e:	31 f0       	breq	.+12     	; 0x3a6c <malloc+0x4a>
    3a60:	12 96       	adiw	r26, 0x02	; 2
    3a62:	0c 93       	st	X, r16
    3a64:	12 97       	sbiw	r26, 0x02	; 2
    3a66:	13 96       	adiw	r26, 0x03	; 3
    3a68:	1c 93       	st	X, r17
    3a6a:	27 c0       	rjmp	.+78     	; 0x3aba <malloc+0x98>
    3a6c:	00 93 d1 04 	sts	0x04D1, r16	; 0x8004d1 <__flp>
    3a70:	10 93 d2 04 	sts	0x04D2, r17	; 0x8004d2 <__flp+0x1>
    3a74:	22 c0       	rjmp	.+68     	; 0x3aba <malloc+0x98>
    3a76:	21 15       	cp	r18, r1
    3a78:	31 05       	cpc	r19, r1
    3a7a:	19 f0       	breq	.+6      	; 0x3a82 <malloc+0x60>
    3a7c:	42 17       	cp	r20, r18
    3a7e:	53 07       	cpc	r21, r19
    3a80:	18 f4       	brcc	.+6      	; 0x3a88 <malloc+0x66>
    3a82:	9a 01       	movw	r18, r20
    3a84:	bd 01       	movw	r22, r26
    3a86:	ef 01       	movw	r28, r30
    3a88:	df 01       	movw	r26, r30
    3a8a:	f8 01       	movw	r30, r16
    3a8c:	db cf       	rjmp	.-74     	; 0x3a44 <malloc+0x22>
    3a8e:	21 15       	cp	r18, r1
    3a90:	31 05       	cpc	r19, r1
    3a92:	f9 f0       	breq	.+62     	; 0x3ad2 <malloc+0xb0>
    3a94:	28 1b       	sub	r18, r24
    3a96:	39 0b       	sbc	r19, r25
    3a98:	24 30       	cpi	r18, 0x04	; 4
    3a9a:	31 05       	cpc	r19, r1
    3a9c:	80 f4       	brcc	.+32     	; 0x3abe <malloc+0x9c>
    3a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa0:	9b 81       	ldd	r25, Y+3	; 0x03
    3aa2:	61 15       	cp	r22, r1
    3aa4:	71 05       	cpc	r23, r1
    3aa6:	21 f0       	breq	.+8      	; 0x3ab0 <malloc+0x8e>
    3aa8:	fb 01       	movw	r30, r22
    3aaa:	93 83       	std	Z+3, r25	; 0x03
    3aac:	82 83       	std	Z+2, r24	; 0x02
    3aae:	04 c0       	rjmp	.+8      	; 0x3ab8 <malloc+0x96>
    3ab0:	90 93 d2 04 	sts	0x04D2, r25	; 0x8004d2 <__flp+0x1>
    3ab4:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <__flp>
    3ab8:	fe 01       	movw	r30, r28
    3aba:	32 96       	adiw	r30, 0x02	; 2
    3abc:	44 c0       	rjmp	.+136    	; 0x3b46 <malloc+0x124>
    3abe:	fe 01       	movw	r30, r28
    3ac0:	e2 0f       	add	r30, r18
    3ac2:	f3 1f       	adc	r31, r19
    3ac4:	81 93       	st	Z+, r24
    3ac6:	91 93       	st	Z+, r25
    3ac8:	22 50       	subi	r18, 0x02	; 2
    3aca:	31 09       	sbc	r19, r1
    3acc:	39 83       	std	Y+1, r19	; 0x01
    3ace:	28 83       	st	Y, r18
    3ad0:	3a c0       	rjmp	.+116    	; 0x3b46 <malloc+0x124>
    3ad2:	20 91 cf 04 	lds	r18, 0x04CF	; 0x8004cf <__brkval>
    3ad6:	30 91 d0 04 	lds	r19, 0x04D0	; 0x8004d0 <__brkval+0x1>
    3ada:	23 2b       	or	r18, r19
    3adc:	41 f4       	brne	.+16     	; 0x3aee <malloc+0xcc>
    3ade:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3ae2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3ae6:	30 93 d0 04 	sts	0x04D0, r19	; 0x8004d0 <__brkval+0x1>
    3aea:	20 93 cf 04 	sts	0x04CF, r18	; 0x8004cf <__brkval>
    3aee:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3af2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3af6:	21 15       	cp	r18, r1
    3af8:	31 05       	cpc	r19, r1
    3afa:	41 f4       	brne	.+16     	; 0x3b0c <malloc+0xea>
    3afc:	2d b7       	in	r18, 0x3d	; 61
    3afe:	3e b7       	in	r19, 0x3e	; 62
    3b00:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3b04:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3b08:	24 1b       	sub	r18, r20
    3b0a:	35 0b       	sbc	r19, r21
    3b0c:	e0 91 cf 04 	lds	r30, 0x04CF	; 0x8004cf <__brkval>
    3b10:	f0 91 d0 04 	lds	r31, 0x04D0	; 0x8004d0 <__brkval+0x1>
    3b14:	e2 17       	cp	r30, r18
    3b16:	f3 07       	cpc	r31, r19
    3b18:	a0 f4       	brcc	.+40     	; 0x3b42 <malloc+0x120>
    3b1a:	2e 1b       	sub	r18, r30
    3b1c:	3f 0b       	sbc	r19, r31
    3b1e:	28 17       	cp	r18, r24
    3b20:	39 07       	cpc	r19, r25
    3b22:	78 f0       	brcs	.+30     	; 0x3b42 <malloc+0x120>
    3b24:	ac 01       	movw	r20, r24
    3b26:	4e 5f       	subi	r20, 0xFE	; 254
    3b28:	5f 4f       	sbci	r21, 0xFF	; 255
    3b2a:	24 17       	cp	r18, r20
    3b2c:	35 07       	cpc	r19, r21
    3b2e:	48 f0       	brcs	.+18     	; 0x3b42 <malloc+0x120>
    3b30:	4e 0f       	add	r20, r30
    3b32:	5f 1f       	adc	r21, r31
    3b34:	50 93 d0 04 	sts	0x04D0, r21	; 0x8004d0 <__brkval+0x1>
    3b38:	40 93 cf 04 	sts	0x04CF, r20	; 0x8004cf <__brkval>
    3b3c:	81 93       	st	Z+, r24
    3b3e:	91 93       	st	Z+, r25
    3b40:	02 c0       	rjmp	.+4      	; 0x3b46 <malloc+0x124>
    3b42:	e0 e0       	ldi	r30, 0x00	; 0
    3b44:	f0 e0       	ldi	r31, 0x00	; 0
    3b46:	cf 01       	movw	r24, r30
    3b48:	df 91       	pop	r29
    3b4a:	cf 91       	pop	r28
    3b4c:	1f 91       	pop	r17
    3b4e:	0f 91       	pop	r16
    3b50:	08 95       	ret

00003b52 <free>:
    3b52:	cf 93       	push	r28
    3b54:	df 93       	push	r29
    3b56:	00 97       	sbiw	r24, 0x00	; 0
    3b58:	09 f4       	brne	.+2      	; 0x3b5c <free+0xa>
    3b5a:	81 c0       	rjmp	.+258    	; 0x3c5e <free+0x10c>
    3b5c:	fc 01       	movw	r30, r24
    3b5e:	32 97       	sbiw	r30, 0x02	; 2
    3b60:	13 82       	std	Z+3, r1	; 0x03
    3b62:	12 82       	std	Z+2, r1	; 0x02
    3b64:	a0 91 d1 04 	lds	r26, 0x04D1	; 0x8004d1 <__flp>
    3b68:	b0 91 d2 04 	lds	r27, 0x04D2	; 0x8004d2 <__flp+0x1>
    3b6c:	10 97       	sbiw	r26, 0x00	; 0
    3b6e:	81 f4       	brne	.+32     	; 0x3b90 <free+0x3e>
    3b70:	20 81       	ld	r18, Z
    3b72:	31 81       	ldd	r19, Z+1	; 0x01
    3b74:	82 0f       	add	r24, r18
    3b76:	93 1f       	adc	r25, r19
    3b78:	20 91 cf 04 	lds	r18, 0x04CF	; 0x8004cf <__brkval>
    3b7c:	30 91 d0 04 	lds	r19, 0x04D0	; 0x8004d0 <__brkval+0x1>
    3b80:	28 17       	cp	r18, r24
    3b82:	39 07       	cpc	r19, r25
    3b84:	51 f5       	brne	.+84     	; 0x3bda <free+0x88>
    3b86:	f0 93 d0 04 	sts	0x04D0, r31	; 0x8004d0 <__brkval+0x1>
    3b8a:	e0 93 cf 04 	sts	0x04CF, r30	; 0x8004cf <__brkval>
    3b8e:	67 c0       	rjmp	.+206    	; 0x3c5e <free+0x10c>
    3b90:	ed 01       	movw	r28, r26
    3b92:	20 e0       	ldi	r18, 0x00	; 0
    3b94:	30 e0       	ldi	r19, 0x00	; 0
    3b96:	ce 17       	cp	r28, r30
    3b98:	df 07       	cpc	r29, r31
    3b9a:	40 f4       	brcc	.+16     	; 0x3bac <free+0x5a>
    3b9c:	4a 81       	ldd	r20, Y+2	; 0x02
    3b9e:	5b 81       	ldd	r21, Y+3	; 0x03
    3ba0:	9e 01       	movw	r18, r28
    3ba2:	41 15       	cp	r20, r1
    3ba4:	51 05       	cpc	r21, r1
    3ba6:	f1 f0       	breq	.+60     	; 0x3be4 <free+0x92>
    3ba8:	ea 01       	movw	r28, r20
    3baa:	f5 cf       	rjmp	.-22     	; 0x3b96 <free+0x44>
    3bac:	d3 83       	std	Z+3, r29	; 0x03
    3bae:	c2 83       	std	Z+2, r28	; 0x02
    3bb0:	40 81       	ld	r20, Z
    3bb2:	51 81       	ldd	r21, Z+1	; 0x01
    3bb4:	84 0f       	add	r24, r20
    3bb6:	95 1f       	adc	r25, r21
    3bb8:	c8 17       	cp	r28, r24
    3bba:	d9 07       	cpc	r29, r25
    3bbc:	59 f4       	brne	.+22     	; 0x3bd4 <free+0x82>
    3bbe:	88 81       	ld	r24, Y
    3bc0:	99 81       	ldd	r25, Y+1	; 0x01
    3bc2:	84 0f       	add	r24, r20
    3bc4:	95 1f       	adc	r25, r21
    3bc6:	02 96       	adiw	r24, 0x02	; 2
    3bc8:	91 83       	std	Z+1, r25	; 0x01
    3bca:	80 83       	st	Z, r24
    3bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bce:	9b 81       	ldd	r25, Y+3	; 0x03
    3bd0:	93 83       	std	Z+3, r25	; 0x03
    3bd2:	82 83       	std	Z+2, r24	; 0x02
    3bd4:	21 15       	cp	r18, r1
    3bd6:	31 05       	cpc	r19, r1
    3bd8:	29 f4       	brne	.+10     	; 0x3be4 <free+0x92>
    3bda:	f0 93 d2 04 	sts	0x04D2, r31	; 0x8004d2 <__flp+0x1>
    3bde:	e0 93 d1 04 	sts	0x04D1, r30	; 0x8004d1 <__flp>
    3be2:	3d c0       	rjmp	.+122    	; 0x3c5e <free+0x10c>
    3be4:	e9 01       	movw	r28, r18
    3be6:	fb 83       	std	Y+3, r31	; 0x03
    3be8:	ea 83       	std	Y+2, r30	; 0x02
    3bea:	49 91       	ld	r20, Y+
    3bec:	59 91       	ld	r21, Y+
    3bee:	c4 0f       	add	r28, r20
    3bf0:	d5 1f       	adc	r29, r21
    3bf2:	ec 17       	cp	r30, r28
    3bf4:	fd 07       	cpc	r31, r29
    3bf6:	61 f4       	brne	.+24     	; 0x3c10 <free+0xbe>
    3bf8:	80 81       	ld	r24, Z
    3bfa:	91 81       	ldd	r25, Z+1	; 0x01
    3bfc:	84 0f       	add	r24, r20
    3bfe:	95 1f       	adc	r25, r21
    3c00:	02 96       	adiw	r24, 0x02	; 2
    3c02:	e9 01       	movw	r28, r18
    3c04:	99 83       	std	Y+1, r25	; 0x01
    3c06:	88 83       	st	Y, r24
    3c08:	82 81       	ldd	r24, Z+2	; 0x02
    3c0a:	93 81       	ldd	r25, Z+3	; 0x03
    3c0c:	9b 83       	std	Y+3, r25	; 0x03
    3c0e:	8a 83       	std	Y+2, r24	; 0x02
    3c10:	e0 e0       	ldi	r30, 0x00	; 0
    3c12:	f0 e0       	ldi	r31, 0x00	; 0
    3c14:	12 96       	adiw	r26, 0x02	; 2
    3c16:	8d 91       	ld	r24, X+
    3c18:	9c 91       	ld	r25, X
    3c1a:	13 97       	sbiw	r26, 0x03	; 3
    3c1c:	00 97       	sbiw	r24, 0x00	; 0
    3c1e:	19 f0       	breq	.+6      	; 0x3c26 <free+0xd4>
    3c20:	fd 01       	movw	r30, r26
    3c22:	dc 01       	movw	r26, r24
    3c24:	f7 cf       	rjmp	.-18     	; 0x3c14 <free+0xc2>
    3c26:	8d 91       	ld	r24, X+
    3c28:	9c 91       	ld	r25, X
    3c2a:	11 97       	sbiw	r26, 0x01	; 1
    3c2c:	9d 01       	movw	r18, r26
    3c2e:	2e 5f       	subi	r18, 0xFE	; 254
    3c30:	3f 4f       	sbci	r19, 0xFF	; 255
    3c32:	82 0f       	add	r24, r18
    3c34:	93 1f       	adc	r25, r19
    3c36:	20 91 cf 04 	lds	r18, 0x04CF	; 0x8004cf <__brkval>
    3c3a:	30 91 d0 04 	lds	r19, 0x04D0	; 0x8004d0 <__brkval+0x1>
    3c3e:	28 17       	cp	r18, r24
    3c40:	39 07       	cpc	r19, r25
    3c42:	69 f4       	brne	.+26     	; 0x3c5e <free+0x10c>
    3c44:	30 97       	sbiw	r30, 0x00	; 0
    3c46:	29 f4       	brne	.+10     	; 0x3c52 <free+0x100>
    3c48:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <__flp+0x1>
    3c4c:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <__flp>
    3c50:	02 c0       	rjmp	.+4      	; 0x3c56 <free+0x104>
    3c52:	13 82       	std	Z+3, r1	; 0x03
    3c54:	12 82       	std	Z+2, r1	; 0x02
    3c56:	b0 93 d0 04 	sts	0x04D0, r27	; 0x8004d0 <__brkval+0x1>
    3c5a:	a0 93 cf 04 	sts	0x04CF, r26	; 0x8004cf <__brkval>
    3c5e:	df 91       	pop	r29
    3c60:	cf 91       	pop	r28
    3c62:	08 95       	ret

00003c64 <realloc>:
    3c64:	a0 e0       	ldi	r26, 0x00	; 0
    3c66:	b0 e0       	ldi	r27, 0x00	; 0
    3c68:	e8 e3       	ldi	r30, 0x38	; 56
    3c6a:	fe e1       	ldi	r31, 0x1E	; 30
    3c6c:	0c 94 11 1f 	jmp	0x3e22	; 0x3e22 <__prologue_saves__+0x8>
    3c70:	ec 01       	movw	r28, r24
    3c72:	00 97       	sbiw	r24, 0x00	; 0
    3c74:	21 f4       	brne	.+8      	; 0x3c7e <realloc+0x1a>
    3c76:	cb 01       	movw	r24, r22
    3c78:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <malloc>
    3c7c:	b4 c0       	rjmp	.+360    	; 0x3de6 <realloc+0x182>
    3c7e:	fc 01       	movw	r30, r24
    3c80:	e6 0f       	add	r30, r22
    3c82:	f7 1f       	adc	r31, r23
    3c84:	9c 01       	movw	r18, r24
    3c86:	22 50       	subi	r18, 0x02	; 2
    3c88:	31 09       	sbc	r19, r1
    3c8a:	e2 17       	cp	r30, r18
    3c8c:	f3 07       	cpc	r31, r19
    3c8e:	08 f4       	brcc	.+2      	; 0x3c92 <realloc+0x2e>
    3c90:	a8 c0       	rjmp	.+336    	; 0x3de2 <realloc+0x17e>
    3c92:	d9 01       	movw	r26, r18
    3c94:	0d 91       	ld	r16, X+
    3c96:	1c 91       	ld	r17, X
    3c98:	11 97       	sbiw	r26, 0x01	; 1
    3c9a:	06 17       	cp	r16, r22
    3c9c:	17 07       	cpc	r17, r23
    3c9e:	b0 f0       	brcs	.+44     	; 0x3ccc <realloc+0x68>
    3ca0:	05 30       	cpi	r16, 0x05	; 5
    3ca2:	11 05       	cpc	r17, r1
    3ca4:	08 f4       	brcc	.+2      	; 0x3ca8 <realloc+0x44>
    3ca6:	9b c0       	rjmp	.+310    	; 0x3dde <realloc+0x17a>
    3ca8:	c8 01       	movw	r24, r16
    3caa:	04 97       	sbiw	r24, 0x04	; 4
    3cac:	86 17       	cp	r24, r22
    3cae:	97 07       	cpc	r25, r23
    3cb0:	08 f4       	brcc	.+2      	; 0x3cb4 <realloc+0x50>
    3cb2:	95 c0       	rjmp	.+298    	; 0x3dde <realloc+0x17a>
    3cb4:	02 50       	subi	r16, 0x02	; 2
    3cb6:	11 09       	sbc	r17, r1
    3cb8:	06 1b       	sub	r16, r22
    3cba:	17 0b       	sbc	r17, r23
    3cbc:	01 93       	st	Z+, r16
    3cbe:	11 93       	st	Z+, r17
    3cc0:	6d 93       	st	X+, r22
    3cc2:	7c 93       	st	X, r23
    3cc4:	cf 01       	movw	r24, r30
    3cc6:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <free>
    3cca:	89 c0       	rjmp	.+274    	; 0x3dde <realloc+0x17a>
    3ccc:	5b 01       	movw	r10, r22
    3cce:	a0 1a       	sub	r10, r16
    3cd0:	b1 0a       	sbc	r11, r17
    3cd2:	4c 01       	movw	r8, r24
    3cd4:	80 0e       	add	r8, r16
    3cd6:	91 1e       	adc	r9, r17
    3cd8:	a0 91 d1 04 	lds	r26, 0x04D1	; 0x8004d1 <__flp>
    3cdc:	b0 91 d2 04 	lds	r27, 0x04D2	; 0x8004d2 <__flp+0x1>
    3ce0:	61 2c       	mov	r6, r1
    3ce2:	71 2c       	mov	r7, r1
    3ce4:	e1 2c       	mov	r14, r1
    3ce6:	f1 2c       	mov	r15, r1
    3ce8:	10 97       	sbiw	r26, 0x00	; 0
    3cea:	09 f4       	brne	.+2      	; 0x3cee <realloc+0x8a>
    3cec:	46 c0       	rjmp	.+140    	; 0x3d7a <realloc+0x116>
    3cee:	8d 91       	ld	r24, X+
    3cf0:	9c 91       	ld	r25, X
    3cf2:	11 97       	sbiw	r26, 0x01	; 1
    3cf4:	a8 15       	cp	r26, r8
    3cf6:	b9 05       	cpc	r27, r9
    3cf8:	b1 f5       	brne	.+108    	; 0x3d66 <realloc+0x102>
    3cfa:	6c 01       	movw	r12, r24
    3cfc:	42 e0       	ldi	r20, 0x02	; 2
    3cfe:	c4 0e       	add	r12, r20
    3d00:	d1 1c       	adc	r13, r1
    3d02:	ca 14       	cp	r12, r10
    3d04:	db 04       	cpc	r13, r11
    3d06:	78 f1       	brcs	.+94     	; 0x3d66 <realloc+0x102>
    3d08:	4c 01       	movw	r8, r24
    3d0a:	8a 18       	sub	r8, r10
    3d0c:	9b 08       	sbc	r9, r11
    3d0e:	64 01       	movw	r12, r8
    3d10:	42 e0       	ldi	r20, 0x02	; 2
    3d12:	c4 0e       	add	r12, r20
    3d14:	d1 1c       	adc	r13, r1
    3d16:	12 96       	adiw	r26, 0x02	; 2
    3d18:	bc 90       	ld	r11, X
    3d1a:	12 97       	sbiw	r26, 0x02	; 2
    3d1c:	13 96       	adiw	r26, 0x03	; 3
    3d1e:	ac 91       	ld	r26, X
    3d20:	b5 e0       	ldi	r27, 0x05	; 5
    3d22:	cb 16       	cp	r12, r27
    3d24:	d1 04       	cpc	r13, r1
    3d26:	40 f0       	brcs	.+16     	; 0x3d38 <realloc+0xd4>
    3d28:	b2 82       	std	Z+2, r11	; 0x02
    3d2a:	a3 83       	std	Z+3, r26	; 0x03
    3d2c:	91 82       	std	Z+1, r9	; 0x01
    3d2e:	80 82       	st	Z, r8
    3d30:	d9 01       	movw	r26, r18
    3d32:	6d 93       	st	X+, r22
    3d34:	7c 93       	st	X, r23
    3d36:	09 c0       	rjmp	.+18     	; 0x3d4a <realloc+0xe6>
    3d38:	0e 5f       	subi	r16, 0xFE	; 254
    3d3a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d3c:	80 0f       	add	r24, r16
    3d3e:	91 1f       	adc	r25, r17
    3d40:	f9 01       	movw	r30, r18
    3d42:	91 83       	std	Z+1, r25	; 0x01
    3d44:	80 83       	st	Z, r24
    3d46:	eb 2d       	mov	r30, r11
    3d48:	fa 2f       	mov	r31, r26
    3d4a:	e1 14       	cp	r14, r1
    3d4c:	f1 04       	cpc	r15, r1
    3d4e:	31 f0       	breq	.+12     	; 0x3d5c <realloc+0xf8>
    3d50:	d7 01       	movw	r26, r14
    3d52:	13 96       	adiw	r26, 0x03	; 3
    3d54:	fc 93       	st	X, r31
    3d56:	ee 93       	st	-X, r30
    3d58:	12 97       	sbiw	r26, 0x02	; 2
    3d5a:	41 c0       	rjmp	.+130    	; 0x3dde <realloc+0x17a>
    3d5c:	f0 93 d2 04 	sts	0x04D2, r31	; 0x8004d2 <__flp+0x1>
    3d60:	e0 93 d1 04 	sts	0x04D1, r30	; 0x8004d1 <__flp>
    3d64:	3c c0       	rjmp	.+120    	; 0x3dde <realloc+0x17a>
    3d66:	68 16       	cp	r6, r24
    3d68:	79 06       	cpc	r7, r25
    3d6a:	08 f4       	brcc	.+2      	; 0x3d6e <realloc+0x10a>
    3d6c:	3c 01       	movw	r6, r24
    3d6e:	7d 01       	movw	r14, r26
    3d70:	12 96       	adiw	r26, 0x02	; 2
    3d72:	0d 90       	ld	r0, X+
    3d74:	bc 91       	ld	r27, X
    3d76:	a0 2d       	mov	r26, r0
    3d78:	b7 cf       	rjmp	.-146    	; 0x3ce8 <realloc+0x84>
    3d7a:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <__brkval>
    3d7e:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <__brkval+0x1>
    3d82:	88 16       	cp	r8, r24
    3d84:	99 06       	cpc	r9, r25
    3d86:	e1 f4       	brne	.+56     	; 0x3dc0 <realloc+0x15c>
    3d88:	66 16       	cp	r6, r22
    3d8a:	77 06       	cpc	r7, r23
    3d8c:	c8 f4       	brcc	.+50     	; 0x3dc0 <realloc+0x15c>
    3d8e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3d92:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    3d96:	00 97       	sbiw	r24, 0x00	; 0
    3d98:	41 f4       	brne	.+16     	; 0x3daa <realloc+0x146>
    3d9a:	8d b7       	in	r24, 0x3d	; 61
    3d9c:	9e b7       	in	r25, 0x3e	; 62
    3d9e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3da2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3da6:	84 1b       	sub	r24, r20
    3da8:	95 0b       	sbc	r25, r21
    3daa:	e8 17       	cp	r30, r24
    3dac:	f9 07       	cpc	r31, r25
    3dae:	c8 f4       	brcc	.+50     	; 0x3de2 <realloc+0x17e>
    3db0:	f0 93 d0 04 	sts	0x04D0, r31	; 0x8004d0 <__brkval+0x1>
    3db4:	e0 93 cf 04 	sts	0x04CF, r30	; 0x8004cf <__brkval>
    3db8:	f9 01       	movw	r30, r18
    3dba:	71 83       	std	Z+1, r23	; 0x01
    3dbc:	60 83       	st	Z, r22
    3dbe:	0f c0       	rjmp	.+30     	; 0x3dde <realloc+0x17a>
    3dc0:	cb 01       	movw	r24, r22
    3dc2:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <malloc>
    3dc6:	7c 01       	movw	r14, r24
    3dc8:	00 97       	sbiw	r24, 0x00	; 0
    3dca:	59 f0       	breq	.+22     	; 0x3de2 <realloc+0x17e>
    3dcc:	a8 01       	movw	r20, r16
    3dce:	be 01       	movw	r22, r28
    3dd0:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <memcpy>
    3dd4:	ce 01       	movw	r24, r28
    3dd6:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <free>
    3dda:	c7 01       	movw	r24, r14
    3ddc:	04 c0       	rjmp	.+8      	; 0x3de6 <realloc+0x182>
    3dde:	ce 01       	movw	r24, r28
    3de0:	02 c0       	rjmp	.+4      	; 0x3de6 <realloc+0x182>
    3de2:	80 e0       	ldi	r24, 0x00	; 0
    3de4:	90 e0       	ldi	r25, 0x00	; 0
    3de6:	cd b7       	in	r28, 0x3d	; 61
    3de8:	de b7       	in	r29, 0x3e	; 62
    3dea:	ee e0       	ldi	r30, 0x0E	; 14
    3dec:	0c 94 2d 1f 	jmp	0x3e5a	; 0x3e5a <__epilogue_restores__+0x8>

00003df0 <abort>:
    3df0:	81 e0       	ldi	r24, 0x01	; 1
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	f8 94       	cli
    3df6:	0c 94 44 1f 	jmp	0x3e88	; 0x3e88 <__do_global_dtors>

00003dfa <memcpy>:
    3dfa:	fb 01       	movw	r30, r22
    3dfc:	dc 01       	movw	r26, r24
    3dfe:	02 c0       	rjmp	.+4      	; 0x3e04 <memcpy+0xa>
    3e00:	01 90       	ld	r0, Z+
    3e02:	0d 92       	st	X+, r0
    3e04:	41 50       	subi	r20, 0x01	; 1
    3e06:	50 40       	sbci	r21, 0x00	; 0
    3e08:	d8 f7       	brcc	.-10     	; 0x3e00 <memcpy+0x6>
    3e0a:	08 95       	ret

00003e0c <strcpy>:
    3e0c:	fb 01       	movw	r30, r22
    3e0e:	dc 01       	movw	r26, r24
    3e10:	01 90       	ld	r0, Z+
    3e12:	0d 92       	st	X+, r0
    3e14:	00 20       	and	r0, r0
    3e16:	e1 f7       	brne	.-8      	; 0x3e10 <strcpy+0x4>
    3e18:	08 95       	ret

00003e1a <__prologue_saves__>:
    3e1a:	2f 92       	push	r2
    3e1c:	3f 92       	push	r3
    3e1e:	4f 92       	push	r4
    3e20:	5f 92       	push	r5
    3e22:	6f 92       	push	r6
    3e24:	7f 92       	push	r7
    3e26:	8f 92       	push	r8
    3e28:	9f 92       	push	r9
    3e2a:	af 92       	push	r10
    3e2c:	bf 92       	push	r11
    3e2e:	cf 92       	push	r12
    3e30:	df 92       	push	r13
    3e32:	ef 92       	push	r14
    3e34:	ff 92       	push	r15
    3e36:	0f 93       	push	r16
    3e38:	1f 93       	push	r17
    3e3a:	cf 93       	push	r28
    3e3c:	df 93       	push	r29
    3e3e:	cd b7       	in	r28, 0x3d	; 61
    3e40:	de b7       	in	r29, 0x3e	; 62
    3e42:	ca 1b       	sub	r28, r26
    3e44:	db 0b       	sbc	r29, r27
    3e46:	0f b6       	in	r0, 0x3f	; 63
    3e48:	f8 94       	cli
    3e4a:	de bf       	out	0x3e, r29	; 62
    3e4c:	0f be       	out	0x3f, r0	; 63
    3e4e:	cd bf       	out	0x3d, r28	; 61
    3e50:	09 94       	ijmp

00003e52 <__epilogue_restores__>:
    3e52:	2a 88       	ldd	r2, Y+18	; 0x12
    3e54:	39 88       	ldd	r3, Y+17	; 0x11
    3e56:	48 88       	ldd	r4, Y+16	; 0x10
    3e58:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e5a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e5c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e5e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e60:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e62:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e64:	b9 84       	ldd	r11, Y+9	; 0x09
    3e66:	c8 84       	ldd	r12, Y+8	; 0x08
    3e68:	df 80       	ldd	r13, Y+7	; 0x07
    3e6a:	ee 80       	ldd	r14, Y+6	; 0x06
    3e6c:	fd 80       	ldd	r15, Y+5	; 0x05
    3e6e:	0c 81       	ldd	r16, Y+4	; 0x04
    3e70:	1b 81       	ldd	r17, Y+3	; 0x03
    3e72:	aa 81       	ldd	r26, Y+2	; 0x02
    3e74:	b9 81       	ldd	r27, Y+1	; 0x01
    3e76:	ce 0f       	add	r28, r30
    3e78:	d1 1d       	adc	r29, r1
    3e7a:	0f b6       	in	r0, 0x3f	; 63
    3e7c:	f8 94       	cli
    3e7e:	de bf       	out	0x3e, r29	; 62
    3e80:	0f be       	out	0x3f, r0	; 63
    3e82:	cd bf       	out	0x3d, r28	; 61
    3e84:	ed 01       	movw	r28, r26
    3e86:	08 95       	ret

00003e88 <__do_global_dtors>:
    3e88:	10 e0       	ldi	r17, 0x00	; 0
    3e8a:	cc ee       	ldi	r28, 0xEC	; 236
    3e8c:	d0 e0       	ldi	r29, 0x00	; 0
    3e8e:	04 c0       	rjmp	.+8      	; 0x3e98 <__do_global_dtors+0x10>
    3e90:	fe 01       	movw	r30, r28
    3e92:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <__tablejump2__>
    3e96:	21 96       	adiw	r28, 0x01	; 1
    3e98:	cd 3e       	cpi	r28, 0xED	; 237
    3e9a:	d1 07       	cpc	r29, r17
    3e9c:	c9 f7       	brne	.-14     	; 0x3e90 <__do_global_dtors+0x8>
    3e9e:	f8 94       	cli

00003ea0 <__stop_program>:
    3ea0:	ff cf       	rjmp	.-2      	; 0x3ea0 <__stop_program>
