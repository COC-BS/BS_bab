
Projektarbeit_COC_BRA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014e  00800100  00003c9a  00003d2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000209  0080024e  0080024e  00003e7c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003e7c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003eac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ad8  00000000  00000000  00003eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000172eb  00000000  00000000  000049c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e4f  00000000  00000000  0001bcaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005dc1  00000000  00000000  0001fafe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000021e0  00000000  00000000  000258c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004b6d  00000000  00000000  00027aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000beed  00000000  00000000  0002c60d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b90  00000000  00000000  000384fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__dtors_end>
       4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      28:	0c 94 36 16 	jmp	0x2c6c	; 0x2c6c <__vector_10>
      2c:	0c 94 d2 14 	jmp	0x29a4	; 0x29a4 <__vector_11>
      30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      5c:	0c 94 ca 16 	jmp	0x2d94	; 0x2d94 <__vector_23>
      60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      90:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <__vector_36>
      94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      ac:	20 18       	sub	r2, r0
      ae:	23 18       	sub	r2, r3
      b0:	12 18       	sub	r1, r2
      b2:	16 18       	sub	r1, r6
      b4:	1c 18       	sub	r1, r12
      b6:	44 18       	sub	r4, r4
      b8:	44 18       	sub	r4, r4
      ba:	44 18       	sub	r4, r4
      bc:	27 18       	sub	r2, r7
      be:	2b 18       	sub	r2, r11
      c0:	2f 18       	sub	r2, r15
      c2:	35 18       	sub	r3, r5
      c4:	39 18       	sub	r3, r9
      c6:	44 18       	sub	r4, r4
      c8:	3f 18       	sub	r3, r15

000000ca <__trampolines_end>:
	...

000000cb <USB_DeviceDescriptorIAD>:
      cb:	12 01 00 02 ef 02 01 40 41 23 36 80 00 01 01 02     .......@A#6.....
      db:	03 01                                               ..

000000dd <STRING_MANUFACTURER>:
      dd:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

000000e9 <STRING_PRODUCT>:
      e9:	41 72 64 75 69 6e 6f 20 4c 65 6f 6e 61 72 64 6f     Arduino Leonardo
	...

000000fa <STRING_LANGUAGE>:
      fa:	04 03 09 04                                         ....

000000fe <analog_pin_to_channel_PGM>:
      fe:	07 06 05 04 01 00 08 0a 0b 0c 0d 09                 ............

0000010a <digital_pin_to_timer_PGM>:
     10a:	00 00 00 02 00 09 0f 00 00 03 04 01 00 0c 00 00     ................
	...

00000129 <digital_pin_to_bit_mask_PGM>:
     129:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     139:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

00000148 <digital_pin_to_port_PGM>:
     148:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     158:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

00000167 <port_to_input_PGM>:
     167:	00 00 00 00 23 00 26 00 29 00 2c 00 2f 00           ....#.&.).,./.

00000175 <port_to_output_PGM>:
     175:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

00000183 <port_to_mode_PGM>:
     183:	00 00 00 00 24 00 27 00 2a 00 2d 00 30 00           ....$.'.*.-.0.

00000191 <_cdcInterface>:
     191:	08 0b 00 02 02 02 01 00 09 04 00 00 01 02 02 00     ................
     1a1:	00 05 24 00 10 01 05 24 01 01 01 04 24 02 06 05     ..$....$....$...
     1b1:	24 06 00 01 07 05 81 03 10 00 40 09 04 01 00 02     $.........@.....
     1c1:	0a 00 00 00 07 05 02 02 40 00 00 07 05 83 02 40     ........@......@
     1d1:	00 00 00                                            ...

000001d4 <__ctors_start>:
     1d4:	dc 04       	cpc	r13, r12
     1d6:	03 0f       	add	r16, r19
     1d8:	61 1a       	sub	r6, r17

000001da <__ctors_end>:
     1da:	9f 05       	cpc	r25, r15

000001dc <__dtors_end>:
     1dc:	11 24       	eor	r1, r1
     1de:	1f be       	out	0x3f, r1	; 63
     1e0:	cf ef       	ldi	r28, 0xFF	; 255
     1e2:	da e0       	ldi	r29, 0x0A	; 10
     1e4:	de bf       	out	0x3e, r29	; 62
     1e6:	cd bf       	out	0x3d, r28	; 61

000001e8 <__do_copy_data>:
     1e8:	12 e0       	ldi	r17, 0x02	; 2
     1ea:	a0 e0       	ldi	r26, 0x00	; 0
     1ec:	b1 e0       	ldi	r27, 0x01	; 1
     1ee:	ea e9       	ldi	r30, 0x9A	; 154
     1f0:	fc e3       	ldi	r31, 0x3C	; 60
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__do_copy_data+0x10>
     1f4:	05 90       	lpm	r0, Z+
     1f6:	0d 92       	st	X+, r0
     1f8:	ae 34       	cpi	r26, 0x4E	; 78
     1fa:	b1 07       	cpc	r27, r17
     1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__do_copy_data+0xc>

000001fe <__do_clear_bss>:
     1fe:	24 e0       	ldi	r18, 0x04	; 4
     200:	ae e4       	ldi	r26, 0x4E	; 78
     202:	b2 e0       	ldi	r27, 0x02	; 2
     204:	01 c0       	rjmp	.+2      	; 0x208 <.do_clear_bss_start>

00000206 <.do_clear_bss_loop>:
     206:	1d 92       	st	X+, r1

00000208 <.do_clear_bss_start>:
     208:	a7 35       	cpi	r26, 0x57	; 87
     20a:	b2 07       	cpc	r27, r18
     20c:	e1 f7       	brne	.-8      	; 0x206 <.do_clear_bss_loop>

0000020e <__do_global_ctors>:
     20e:	10 e0       	ldi	r17, 0x00	; 0
     210:	cd ee       	ldi	r28, 0xED	; 237
     212:	d0 e0       	ldi	r29, 0x00	; 0
     214:	04 c0       	rjmp	.+8      	; 0x21e <__do_global_ctors+0x10>
     216:	21 97       	sbiw	r28, 0x01	; 1
     218:	fe 01       	movw	r30, r28
     21a:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <__tablejump2__>
     21e:	ca 3e       	cpi	r28, 0xEA	; 234
     220:	d1 07       	cpc	r29, r17
     222:	c9 f7       	brne	.-14     	; 0x216 <__do_global_ctors+0x8>
     224:	0e 94 a0 10 	call	0x2140	; 0x2140 <main>
     228:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <__do_global_dtors>

0000022c <__bad_interrupt>:
     22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <_Z6getkeyv>:
 */
int getkey(void)
{
	static int keys[NUMKEYS+1];
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	0e 94 d7 17 	call	0x2fae	; 0x2fae <analogRead>

	if (val > 1020) { // no key pressed
     236:	8d 3f       	cpi	r24, 0xFD	; 253
     238:	23 e0       	ldi	r18, 0x03	; 3
     23a:	92 07       	cpc	r25, r18
     23c:	20 f1       	brcs	.+72     	; 0x286 <_Z6getkeyv+0x56>
		if (++keys[0] > NOPRESS) {
     23e:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <__data_end>
     242:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <__data_end+0x1>
     246:	01 96       	adiw	r24, 0x01	; 1
     248:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <__data_end+0x1>
     24c:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <__data_end>
     250:	03 97       	sbiw	r24, 0x03	; 3
     252:	0c f4       	brge	.+2      	; 0x256 <_Z6getkeyv+0x26>
     254:	6a c0       	rjmp	.+212    	; 0x32a <_Z6getkeyv+0xfa>
     256:	ee e4       	ldi	r30, 0x4E	; 78
     258:	f2 e0       	ldi	r31, 0x02	; 2
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	90 e0       	ldi	r25, 0x00	; 0
			for(uint8_t i = 0; i <= NUMKEYS; i++){
				if(keys[i] > KEYPRESS){
     262:	40 81       	ld	r20, Z
     264:	51 81       	ldd	r21, Z+1	; 0x01
     266:	44 30       	cpi	r20, 0x04	; 4
     268:	51 05       	cpc	r21, r1
     26a:	2c f0       	brlt	.+10     	; 0x276 <_Z6getkeyv+0x46>
     26c:	c9 01       	movw	r24, r18
					data = i;
					if(keys[i] > LONGPRESS) data += 5;
     26e:	49 3c       	cpi	r20, 0xC9	; 201
     270:	51 05       	cpc	r21, r1
     272:	0c f0       	brlt	.+2      	; 0x276 <_Z6getkeyv+0x46>
     274:	05 96       	adiw	r24, 0x05	; 5
				}
				keys[i] = 0;
     276:	11 92       	st	Z+, r1
     278:	11 92       	st	Z+, r1
     27a:	2f 5f       	subi	r18, 0xFF	; 255
     27c:	3f 4f       	sbci	r19, 0xFF	; 255
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);

	if (val > 1020) { // no key pressed
		if (++keys[0] > NOPRESS) {
			for(uint8_t i = 0; i <= NUMKEYS; i++){
     27e:	26 30       	cpi	r18, 0x06	; 6
     280:	31 05       	cpc	r19, r1
     282:	79 f7       	brne	.-34     	; 0x262 <_Z6getkeyv+0x32>
     284:	08 95       	ret
			}
		}
		else data = 0;
	}
	else {
		if (val < S1_LIMIT && keys[1] < 32000) ++keys[1]; // key1 pressed
     286:	89 34       	cpi	r24, 0x49	; 73
     288:	91 05       	cpc	r25, r1
     28a:	70 f4       	brcc	.+28     	; 0x2a8 <_Z6getkeyv+0x78>
     28c:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <__data_end+0x2>
     290:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <__data_end+0x3>
     294:	81 15       	cp	r24, r1
     296:	2d e7       	ldi	r18, 0x7D	; 125
     298:	92 07       	cpc	r25, r18
     29a:	4c f4       	brge	.+18     	; 0x2ae <_Z6getkeyv+0x7e>
     29c:	01 96       	adiw	r24, 0x01	; 1
     29e:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <__data_end+0x3>
     2a2:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <__data_end+0x2>
     2a6:	41 c0       	rjmp	.+130    	; 0x32a <_Z6getkeyv+0xfa>
		else if (val < S2_LIMIT && keys[2] < 32000) ++keys[2]; //key2 pressed
     2a8:	8e 3e       	cpi	r24, 0xEE	; 238
     2aa:	91 05       	cpc	r25, r1
     2ac:	70 f4       	brcc	.+28     	; 0x2ca <_Z6getkeyv+0x9a>
     2ae:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <__data_end+0x4>
     2b2:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <__data_end+0x5>
     2b6:	81 15       	cp	r24, r1
     2b8:	2d e7       	ldi	r18, 0x7D	; 125
     2ba:	92 07       	cpc	r25, r18
     2bc:	54 f4       	brge	.+20     	; 0x2d2 <_Z6getkeyv+0xa2>
     2be:	01 96       	adiw	r24, 0x01	; 1
     2c0:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <__data_end+0x5>
     2c4:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <__data_end+0x4>
     2c8:	30 c0       	rjmp	.+96     	; 0x32a <_Z6getkeyv+0xfa>
		else if (val < S3_LIMIT && keys[3] < 32000) ++keys[3]; //key3 pressed
     2ca:	82 3a       	cpi	r24, 0xA2	; 162
     2cc:	21 e0       	ldi	r18, 0x01	; 1
     2ce:	92 07       	cpc	r25, r18
     2d0:	70 f4       	brcc	.+28     	; 0x2ee <_Z6getkeyv+0xbe>
     2d2:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <__data_end+0x6>
     2d6:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <__data_end+0x7>
     2da:	81 15       	cp	r24, r1
     2dc:	2d e7       	ldi	r18, 0x7D	; 125
     2de:	92 07       	cpc	r25, r18
     2e0:	4c f4       	brge	.+18     	; 0x2f4 <_Z6getkeyv+0xc4>
     2e2:	01 96       	adiw	r24, 0x01	; 1
     2e4:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <__data_end+0x7>
     2e8:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <__data_end+0x6>
     2ec:	1e c0       	rjmp	.+60     	; 0x32a <_Z6getkeyv+0xfa>
		else if (val < S4_LIMIT && keys[4] < 32000) ++keys[4]; //key4 pressed
     2ee:	80 37       	cpi	r24, 0x70	; 112
     2f0:	92 40       	sbci	r25, 0x02	; 2
     2f2:	70 f4       	brcc	.+28     	; 0x310 <_Z6getkeyv+0xe0>
     2f4:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <__data_end+0x8>
     2f8:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <__data_end+0x9>
     2fc:	81 15       	cp	r24, r1
     2fe:	2d e7       	ldi	r18, 0x7D	; 125
     300:	92 07       	cpc	r25, r18
     302:	34 f4       	brge	.+12     	; 0x310 <_Z6getkeyv+0xe0>
     304:	01 96       	adiw	r24, 0x01	; 1
     306:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <__data_end+0x9>
     30a:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <__data_end+0x8>
     30e:	0d c0       	rjmp	.+26     	; 0x32a <_Z6getkeyv+0xfa>
		else if ( keys[5] < 32000) ++keys[5]; // key5 pressed
     310:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <__data_end+0xa>
     314:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <__data_end+0xb>
     318:	81 15       	cp	r24, r1
     31a:	2d e7       	ldi	r18, 0x7D	; 125
     31c:	92 07       	cpc	r25, r18
     31e:	2c f4       	brge	.+10     	; 0x32a <_Z6getkeyv+0xfa>
     320:	01 96       	adiw	r24, 0x01	; 1
     322:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <__data_end+0xb>
     326:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end+0xa>
		data = 0;
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	90 e0       	ldi	r25, 0x00	; 0
	}
	return data;
}
     32e:	08 95       	ret

00000330 <_ZN5Print17availableForWriteEv>:
	return ret;
}

int Zeit::GetHours(){return hh_;};
int Zeit::GetMinutes(){return mm_;};
int Zeit::GetSeconds(){return ss_;};
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	08 95       	ret

00000336 <_ZN5Print5flushEv>:
     336:	08 95       	ret

00000338 <_ZN7hd4478013iosetContrastEh>:
     338:	8d ef       	ldi	r24, 0xFD	; 253
     33a:	9f ef       	ldi	r25, 0xFF	; 255
     33c:	08 95       	ret

0000033e <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>:
     33e:	0f 93       	push	r16
     340:	1f 93       	push	r17
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	18 2f       	mov	r17, r24
     348:	d0 e0       	ldi	r29, 0x00	; 0
     34a:	c0 e2       	ldi	r28, 0x20	; 32
     34c:	6c 2f       	mov	r22, r28
     34e:	8d e8       	ldi	r24, 0x8D	; 141
     350:	93 e0       	ldi	r25, 0x03	; 3
     352:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN7TwoWire17beginTransmissionEh>
     356:	8d e8       	ldi	r24, 0x8D	; 141
     358:	93 e0       	ldi	r25, 0x03	; 3
     35a:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN7TwoWire15endTransmissionEv>
     35e:	08 2f       	mov	r16, r24
     360:	61 e0       	ldi	r22, 0x01	; 1
     362:	70 e0       	ldi	r23, 0x00	; 0
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <delay>
     36c:	01 11       	cpse	r16, r1
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x38>
     370:	1d 17       	cp	r17, r29
     372:	f9 f0       	breq	.+62     	; 0x3b2 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x74>
     374:	df 5f       	subi	r29, 0xFF	; 255
     376:	cf 5f       	subi	r28, 0xFF	; 255
     378:	c8 32       	cpi	r28, 0x28	; 40
     37a:	41 f7       	brne	.-48     	; 0x34c <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0xe>
     37c:	c8 e3       	ldi	r28, 0x38	; 56
     37e:	6c 2f       	mov	r22, r28
     380:	8d e8       	ldi	r24, 0x8D	; 141
     382:	93 e0       	ldi	r25, 0x03	; 3
     384:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN7TwoWire17beginTransmissionEh>
     388:	8d e8       	ldi	r24, 0x8D	; 141
     38a:	93 e0       	ldi	r25, 0x03	; 3
     38c:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN7TwoWire15endTransmissionEv>
     390:	08 2f       	mov	r16, r24
     392:	61 e0       	ldi	r22, 0x01	; 1
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <delay>
     39e:	01 11       	cpse	r16, r1
     3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x6a>
     3a2:	1d 17       	cp	r17, r29
     3a4:	31 f0       	breq	.+12     	; 0x3b2 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x74>
     3a6:	df 5f       	subi	r29, 0xFF	; 255
     3a8:	cf 5f       	subi	r28, 0xFF	; 255
     3aa:	c0 34       	cpi	r28, 0x40	; 64
     3ac:	41 f7       	brne	.-48     	; 0x37e <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x40>
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x76>
     3b2:	8c 2f       	mov	r24, r28
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	1f 91       	pop	r17
     3ba:	0f 91       	pop	r16
     3bc:	08 95       	ret

000003be <_ZN7TwoWire5writeEi>:
     3be:	dc 01       	movw	r26, r24
     3c0:	ed 91       	ld	r30, X+
     3c2:	fc 91       	ld	r31, X
     3c4:	01 90       	ld	r0, Z+
     3c6:	f0 81       	ld	r31, Z
     3c8:	e0 2d       	mov	r30, r0
     3ca:	09 94       	ijmp

000003cc <_ZN4Zeit4TickEv>:
     3cc:	fc 01       	movw	r30, r24
     3ce:	84 81       	ldd	r24, Z+4	; 0x04
     3d0:	95 81       	ldd	r25, Z+5	; 0x05
     3d2:	01 96       	adiw	r24, 0x01	; 1
     3d4:	2c e3       	ldi	r18, 0x3C	; 60
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	b9 01       	movw	r22, r18
     3da:	0e 94 b6 1b 	call	0x376c	; 0x376c <__divmodhi4>
     3de:	95 83       	std	Z+5, r25	; 0x05
     3e0:	84 83       	std	Z+4, r24	; 0x04
     3e2:	89 2b       	or	r24, r25
     3e4:	19 f0       	breq	.+6      	; 0x3ec <_ZN4Zeit4TickEv+0x20>
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	08 95       	ret
     3ec:	82 81       	ldd	r24, Z+2	; 0x02
     3ee:	93 81       	ldd	r25, Z+3	; 0x03
     3f0:	01 96       	adiw	r24, 0x01	; 1
     3f2:	b9 01       	movw	r22, r18
     3f4:	0e 94 b6 1b 	call	0x376c	; 0x376c <__divmodhi4>
     3f8:	93 83       	std	Z+3, r25	; 0x03
     3fa:	82 83       	std	Z+2, r24	; 0x02
     3fc:	89 2b       	or	r24, r25
     3fe:	99 f7       	brne	.-26     	; 0x3e6 <_ZN4Zeit4TickEv+0x1a>
     400:	80 81       	ld	r24, Z
     402:	91 81       	ldd	r25, Z+1	; 0x01
     404:	01 96       	adiw	r24, 0x01	; 1
     406:	68 e1       	ldi	r22, 0x18	; 24
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	0e 94 b6 1b 	call	0x376c	; 0x376c <__divmodhi4>
     40e:	ac 01       	movw	r20, r24
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	80 83       	st	Z, r24
     414:	21 e0       	ldi	r18, 0x01	; 1
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	45 2b       	or	r20, r21
     41a:	09 f0       	breq	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	82 2f       	mov	r24, r18
     420:	08 95       	ret

00000422 <_Z5Watchv>:
 * frequent calls will result in counting the time. days-of-month and leap years are taken into account
 *
 * @return void
 */
void Watch()
{
     422:	0f 93       	push	r16
     424:	1f 93       	push	r17
#define INTERVAL 1000L
	static long target = INTERVAL;
	if (millis() > target)	{
     426:	0e 94 14 17 	call	0x2e28	; 0x2e28 <millis>
     42a:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZZ5WatchvE6target>
     42e:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZZ5WatchvE6target+0x1>
     432:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <_ZZ5WatchvE6target+0x2>
     436:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <_ZZ5WatchvE6target+0x3>
     43a:	06 17       	cp	r16, r22
     43c:	17 07       	cpc	r17, r23
     43e:	28 07       	cpc	r18, r24
     440:	39 07       	cpc	r19, r25
     442:	e0 f4       	brcc	.+56     	; 0x47c <_Z5Watchv+0x5a>
		target += INTERVAL;
     444:	d9 01       	movw	r26, r18
     446:	c8 01       	movw	r24, r16
     448:	88 51       	subi	r24, 0x18	; 24
     44a:	9c 4f       	sbci	r25, 0xFC	; 252
     44c:	af 4f       	sbci	r26, 0xFF	; 255
     44e:	bf 4f       	sbci	r27, 0xFF	; 255
     450:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZZ5WatchvE6target>
     454:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZZ5WatchvE6target+0x1>
     458:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_ZZ5WatchvE6target+0x2>
     45c:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_ZZ5WatchvE6target+0x3>
		zeitGMT.Tick();
     460:	84 e8       	ldi	r24, 0x84	; 132
     462:	92 e0       	ldi	r25, 0x02	; 2
     464:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_ZN4Zeit4TickEv>
		zeitTimeZone.Tick();
     468:	8c e7       	ldi	r24, 0x7C	; 124
     46a:	92 e0       	ldi	r25, 0x02	; 2
     46c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_ZN4Zeit4TickEv>
		zeitLocal.Tick();
     470:	84 e7       	ldi	r24, 0x74	; 116
     472:	92 e0       	ldi	r25, 0x02	; 2
		//if(zeit1.Tick()) datum1.Tick(); //Wenn die Zeit bei 24.00 ankommt wird ret = 1 gesetzt und das Datum eins weitergestellt
	}
#undef INTERVAL
}
     474:	1f 91       	pop	r17
     476:	0f 91       	pop	r16
	static long target = INTERVAL;
	if (millis() > target)	{
		target += INTERVAL;
		zeitGMT.Tick();
		zeitTimeZone.Tick();
		zeitLocal.Tick();
     478:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <_ZN4Zeit4TickEv>
		//if(zeit1.Tick()) datum1.Tick(); //Wenn die Zeit bei 24.00 ankommt wird ret = 1 gesetzt und das Datum eins weitergestellt
	}
#undef INTERVAL
}
     47c:	1f 91       	pop	r17
     47e:	0f 91       	pop	r16
     480:	08 95       	ret

00000482 <_Z11printhhmmssR4Zeit>:
 * @param[in] zeit: struct 
 * 
 * @return void
 */
void printhhmmss(class Zeit &z)
{
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	ec 01       	movw	r28, r24
	if(z.GetHours()<=9)lcd.print("0");
     488:	88 81       	ld	r24, Y
     48a:	99 81       	ldd	r25, Y+1	; 0x01
     48c:	0a 97       	sbiw	r24, 0x0a	; 10
     48e:	34 f4       	brge	.+12     	; 0x49c <_Z11printhhmmssR4Zeit+0x1a>
     490:	6f e1       	ldi	r22, 0x1F	; 31
     492:	71 e0       	ldi	r23, 0x01	; 1
     494:	82 ef       	ldi	r24, 0xF2	; 242
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	0e 94 00 11 	call	0x2200	; 0x2200 <_ZN5Print5printEPKc>
	lcd.print(z.GetHours());
     49c:	68 81       	ld	r22, Y
     49e:	79 81       	ldd	r23, Y+1	; 0x01
     4a0:	4a e0       	ldi	r20, 0x0A	; 10
     4a2:	50 e0       	ldi	r21, 0x00	; 0
     4a4:	82 ef       	ldi	r24, 0xF2	; 242
     4a6:	92 e0       	ldi	r25, 0x02	; 2
     4a8:	0e 94 ad 11 	call	0x235a	; 0x235a <_ZN5Print5printEii>
	if(z.GetMinutes()<=9)lcd.print(":0"); else lcd.print(":");
     4ac:	8a 81       	ldd	r24, Y+2	; 0x02
     4ae:	9b 81       	ldd	r25, Y+3	; 0x03
     4b0:	0a 97       	sbiw	r24, 0x0a	; 10
     4b2:	1c f4       	brge	.+6      	; 0x4ba <_Z11printhhmmssR4Zeit+0x38>
     4b4:	6e e1       	ldi	r22, 0x1E	; 30
     4b6:	71 e0       	ldi	r23, 0x01	; 1
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <_Z11printhhmmssR4Zeit+0x3c>
     4ba:	61 e2       	ldi	r22, 0x21	; 33
     4bc:	71 e0       	ldi	r23, 0x01	; 1
     4be:	82 ef       	ldi	r24, 0xF2	; 242
     4c0:	92 e0       	ldi	r25, 0x02	; 2
     4c2:	0e 94 00 11 	call	0x2200	; 0x2200 <_ZN5Print5printEPKc>
	lcd.print(z.GetMinutes());
     4c6:	6a 81       	ldd	r22, Y+2	; 0x02
     4c8:	7b 81       	ldd	r23, Y+3	; 0x03
     4ca:	4a e0       	ldi	r20, 0x0A	; 10
     4cc:	50 e0       	ldi	r21, 0x00	; 0
     4ce:	82 ef       	ldi	r24, 0xF2	; 242
     4d0:	92 e0       	ldi	r25, 0x02	; 2
     4d2:	0e 94 ad 11 	call	0x235a	; 0x235a <_ZN5Print5printEii>
	if(z.GetSeconds()<=9)lcd.print(":0"); else lcd.print(":");
     4d6:	8c 81       	ldd	r24, Y+4	; 0x04
     4d8:	9d 81       	ldd	r25, Y+5	; 0x05
     4da:	0a 97       	sbiw	r24, 0x0a	; 10
     4dc:	1c f4       	brge	.+6      	; 0x4e4 <_Z11printhhmmssR4Zeit+0x62>
     4de:	6e e1       	ldi	r22, 0x1E	; 30
     4e0:	71 e0       	ldi	r23, 0x01	; 1
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <_Z11printhhmmssR4Zeit+0x66>
     4e4:	61 e2       	ldi	r22, 0x21	; 33
     4e6:	71 e0       	ldi	r23, 0x01	; 1
     4e8:	82 ef       	ldi	r24, 0xF2	; 242
     4ea:	92 e0       	ldi	r25, 0x02	; 2
     4ec:	0e 94 00 11 	call	0x2200	; 0x2200 <_ZN5Print5printEPKc>
	lcd.print(z.GetSeconds());
     4f0:	6c 81       	ldd	r22, Y+4	; 0x04
     4f2:	7d 81       	ldd	r23, Y+5	; 0x05
     4f4:	4a e0       	ldi	r20, 0x0A	; 10
     4f6:	50 e0       	ldi	r21, 0x00	; 0
     4f8:	82 ef       	ldi	r24, 0xF2	; 242
     4fa:	92 e0       	ldi	r25, 0x02	; 2
}
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
	if(z.GetHours()<=9)lcd.print("0");
	lcd.print(z.GetHours());
	if(z.GetMinutes()<=9)lcd.print(":0"); else lcd.print(":");
	lcd.print(z.GetMinutes());
	if(z.GetSeconds()<=9)lcd.print(":0"); else lcd.print(":");
	lcd.print(z.GetSeconds());
     500:	0c 94 ad 11 	jmp	0x235a	; 0x235a <_ZN5Print5printEii>

00000504 <_Z17printHumidityTempv>:
 * und schreibt den Wert auf das LCD
 *
 * @return void
 */
void printHumidityTemp (void)
{
     504:	cf 92       	push	r12
     506:	df 92       	push	r13
     508:	ef 92       	push	r14
     50a:	ff 92       	push	r15
	float temp;
	temp=analogRead(tempSensor);
     50c:	86 e1       	ldi	r24, 0x16	; 22
     50e:	0e 94 d7 17 	call	0x2fae	; 0x2fae <analogRead>
	temp=(temp*500)/1023;
     512:	bc 01       	movw	r22, r24
     514:	99 0f       	add	r25, r25
     516:	88 0b       	sbc	r24, r24
     518:	99 0b       	sbc	r25, r25
     51a:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__floatsisf>
     51e:	20 e0       	ldi	r18, 0x00	; 0
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	4a ef       	ldi	r20, 0xFA	; 250
     524:	53 e4       	ldi	r21, 0x43	; 67
     526:	0e 94 0c 10 	call	0x2018	; 0x2018 <__mulsf3>
     52a:	20 e0       	ldi	r18, 0x00	; 0
     52c:	30 ec       	ldi	r19, 0xC0	; 192
     52e:	4f e7       	ldi	r20, 0x7F	; 127
     530:	54 e4       	ldi	r21, 0x44	; 68
     532:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__divsf3>
     536:	6b 01       	movw	r12, r22
     538:	7c 01       	movw	r14, r24
	
	lcd.setCursor(0,1);
     53a:	41 e0       	ldi	r20, 0x01	; 1
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	82 ef       	ldi	r24, 0xF2	; 242
     540:	92 e0       	ldi	r25, 0x02	; 2
     542:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <_ZN7hd447809setCursorEhh>
	if (temp > 100) lcd.print("Sensor defekt");
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	48 ec       	ldi	r20, 0xC8	; 200
     54c:	52 e4       	ldi	r21, 0x42	; 66
     54e:	c7 01       	movw	r24, r14
     550:	b6 01       	movw	r22, r12
     552:	0e 94 07 10 	call	0x200e	; 0x200e <__gesf2>
     556:	18 16       	cp	r1, r24
     558:	1c f4       	brge	.+6      	; 0x560 <_Z17printHumidityTempv+0x5c>
     55a:	63 e2       	ldi	r22, 0x23	; 35
     55c:	71 e0       	ldi	r23, 0x01	; 1
     55e:	15 c0       	rjmp	.+42     	; 0x58a <_Z17printHumidityTempv+0x86>
	else {
		lcd.print(temp);
     560:	22 e0       	ldi	r18, 0x02	; 2
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	b7 01       	movw	r22, r14
     566:	a6 01       	movw	r20, r12
     568:	82 ef       	ldi	r24, 0xF2	; 242
     56a:	92 e0       	ldi	r25, 0x02	; 2
     56c:	0e 94 8f 12 	call	0x251e	; 0x251e <_ZN5Print5printEdi>
		lcd.print(" ");
     570:	61 e3       	ldi	r22, 0x31	; 49
     572:	71 e0       	ldi	r23, 0x01	; 1
     574:	82 ef       	ldi	r24, 0xF2	; 242
     576:	92 e0       	ldi	r25, 0x02	; 2
     578:	0e 94 00 11 	call	0x2200	; 0x2200 <_ZN5Print5printEPKc>
		lcd.print((char)223);
     57c:	6f ed       	ldi	r22, 0xDF	; 223
     57e:	82 ef       	ldi	r24, 0xF2	; 242
     580:	92 e0       	ldi	r25, 0x02	; 2
     582:	0e 94 02 11 	call	0x2204	; 0x2204 <_ZN5Print5printEc>
		lcd.print("C");
     586:	63 e3       	ldi	r22, 0x33	; 51
     588:	71 e0       	ldi	r23, 0x01	; 1
     58a:	82 ef       	ldi	r24, 0xF2	; 242
     58c:	92 e0       	ldi	r25, 0x02	; 2
	}
}
     58e:	ff 90       	pop	r15
     590:	ef 90       	pop	r14
     592:	df 90       	pop	r13
     594:	cf 90       	pop	r12
	if (temp > 100) lcd.print("Sensor defekt");
	else {
		lcd.print(temp);
		lcd.print(" ");
		lcd.print((char)223);
		lcd.print("C");
     596:	0c 94 00 11 	jmp	0x2200	; 0x2200 <_ZN5Print5printEPKc>

0000059a <_Z10homeScreeni>:
 * @param[in] key : int, user input
 *
 * @return key
 */
int homeScreen(int key)
{
     59a:	0f 93       	push	r16
     59c:	1f 93       	push	r17
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	ec 01       	movw	r28, r24
	if (readSensor < millis())
     5a4:	0e 94 14 17 	call	0x2e28	; 0x2e28 <millis>
     5a8:	00 91 8c 02 	lds	r16, 0x028C	; 0x80028c <readSensor>
     5ac:	10 91 8d 02 	lds	r17, 0x028D	; 0x80028d <readSensor+0x1>
     5b0:	20 91 8e 02 	lds	r18, 0x028E	; 0x80028e <readSensor+0x2>
     5b4:	30 91 8f 02 	lds	r19, 0x028F	; 0x80028f <readSensor+0x3>
     5b8:	06 17       	cp	r16, r22
     5ba:	17 07       	cpc	r17, r23
     5bc:	28 07       	cpc	r18, r24
     5be:	39 07       	cpc	r19, r25
     5c0:	90 f4       	brcc	.+36     	; 0x5e6 <_Z10homeScreeni+0x4c>
	{	
		printHumidityTemp();
     5c2:	0e 94 82 02 	call	0x504	; 0x504 <_Z17printHumidityTempv>
		readSensor = millis() + 5000;
     5c6:	0e 94 14 17 	call	0x2e28	; 0x2e28 <millis>
     5ca:	dc 01       	movw	r26, r24
     5cc:	cb 01       	movw	r24, r22
     5ce:	88 57       	subi	r24, 0x78	; 120
     5d0:	9c 4e       	sbci	r25, 0xEC	; 236
     5d2:	af 4f       	sbci	r26, 0xFF	; 255
     5d4:	bf 4f       	sbci	r27, 0xFF	; 255
     5d6:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <readSensor>
     5da:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <readSensor+0x1>
     5de:	a0 93 8e 02 	sts	0x028E, r26	; 0x80028e <readSensor+0x2>
     5e2:	b0 93 8f 02 	sts	0x028F, r27	; 0x80028f <readSensor+0x3>
	}
	lcd.setCursor(0,0);
     5e6:	40 e0       	ldi	r20, 0x00	; 0
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	82 ef       	ldi	r24, 0xF2	; 242
     5ec:	92 e0       	ldi	r25, 0x02	; 2
     5ee:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <_ZN7hd447809setCursorEhh>
	printhhmmss(zeitLocal);
     5f2:	84 e7       	ldi	r24, 0x74	; 116
     5f4:	92 e0       	ldi	r25, 0x02	; 2
     5f6:	0e 94 41 02 	call	0x482	; 0x482 <_Z11printhhmmssR4Zeit>

	return key;
}
     5fa:	ce 01       	movw	r24, r28
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	1f 91       	pop	r17
     602:	0f 91       	pop	r16
     604:	08 95       	ret

00000606 <_Z13calculateTimev>:
 * 
 * Stellt sicher, dass die Zeiten richtig sind. 
 * Zwischen 0 und kleiner als 24.
 */
void calculateTime() {
	zeitTimeZone.hh_= zeitGMT.hh_ + CITIES[tz].timediff;
     606:	e0 91 90 02 	lds	r30, 0x0290	; 0x800290 <tz>
     60a:	f0 91 91 02 	lds	r31, 0x0291	; 0x800291 <tz+0x1>
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	ee 0f       	add	r30, r30
     612:	ff 1f       	adc	r31, r31
     614:	8a 95       	dec	r24
     616:	e1 f7       	brne	.-8      	; 0x610 <_Z13calculateTimev+0xa>
     618:	ee 56       	subi	r30, 0x6E	; 110
     61a:	fd 4f       	sbci	r31, 0xFD	; 253
     61c:	26 81       	ldd	r18, Z+6	; 0x06
     61e:	37 81       	ldd	r19, Z+7	; 0x07
     620:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <zeitGMT>
     624:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <zeitGMT+0x1>
     628:	82 0f       	add	r24, r18
     62a:	93 1f       	adc	r25, r19
	if (zeitTimeZone.hh_ > 23)
     62c:	88 31       	cpi	r24, 0x18	; 24
     62e:	91 05       	cpc	r25, r1
     630:	0c f0       	brlt	.+2      	; 0x634 <_Z13calculateTimev+0x2e>
	{
		zeitTimeZone.hh_ -= 24; 
     632:	48 97       	sbiw	r24, 0x18	; 24
     634:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <zeitTimeZone+0x1>
     638:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <zeitTimeZone>
	}
	if (zeitTimeZone.hh_ < 0)
     63c:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <zeitTimeZone>
     640:	30 91 7d 02 	lds	r19, 0x027D	; 0x80027d <zeitTimeZone+0x1>
     644:	37 ff       	sbrs	r19, 7
     646:	08 c0       	rjmp	.+16     	; 0x658 <_Z13calculateTimev+0x52>
	{
		zeitTimeZone.hh_ = 24 - zeitTimeZone.hh_;
     648:	88 e1       	ldi	r24, 0x18	; 24
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	82 1b       	sub	r24, r18
     64e:	93 0b       	sbc	r25, r19
     650:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <zeitTimeZone+0x1>
     654:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <zeitTimeZone>
     658:	08 95       	ret

0000065a <_Z14changeTimeZonei>:
 * 
 * @return key
 */
int changeTimeZone (int key)
{
	switch (key)
     65a:	83 30       	cpi	r24, 0x03	; 3
     65c:	91 05       	cpc	r25, r1
     65e:	39 f0       	breq	.+14     	; 0x66e <_Z14changeTimeZonei+0x14>
     660:	8a 30       	cpi	r24, 0x0A	; 10
     662:	91 05       	cpc	r25, r1
     664:	21 f0       	breq	.+8      	; 0x66e <_Z14changeTimeZonei+0x14>
     666:	81 30       	cpi	r24, 0x01	; 1
     668:	91 05       	cpc	r25, r1
     66a:	51 f5       	brne	.+84     	; 0x6c0 <_Z14changeTimeZonei+0x66>
     66c:	17 c0       	rjmp	.+46     	; 0x69c <_Z14changeTimeZonei+0x42>
	{
		case X_KEY:
		//zeit2 = zeitLocal;
		case DOWN_KEY:
		lcd.clear();
     66e:	82 ef       	ldi	r24, 0xF2	; 242
     670:	92 e0       	ldi	r25, 0x02	; 2
     672:	0e 94 4a 0a 	call	0x1494	; 0x1494 <_ZN7hd447805clearEv>
		if (tz == 0)
     676:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <tz>
     67a:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <tz+0x1>
     67e:	00 97       	sbiw	r24, 0x00	; 0
     680:	19 f4       	brne	.+6      	; 0x688 <_Z14changeTimeZonei+0x2e>
		{
			tz = 11;
     682:	8b e0       	ldi	r24, 0x0B	; 11
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	01 c0       	rjmp	.+2      	; 0x68a <_Z14changeTimeZonei+0x30>
		}
		else tz -= 1;
     688:	01 97       	sbiw	r24, 0x01	; 1
     68a:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <tz+0x1>
     68e:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <tz>
		calculateTime();	
     692:	0e 94 03 03 	call	0x606	; 0x606 <_Z13calculateTimev>
		key = X_KEY;
     696:	8a e0       	ldi	r24, 0x0A	; 10
     698:	90 e0       	ldi	r25, 0x00	; 0
		break;
     69a:	08 95       	ret
		case UP_KEY:
		lcd.clear();
     69c:	82 ef       	ldi	r24, 0xF2	; 242
     69e:	92 e0       	ldi	r25, 0x02	; 2
     6a0:	0e 94 4a 0a 	call	0x1494	; 0x1494 <_ZN7hd447805clearEv>
		if (tz == 11)
     6a4:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <tz>
     6a8:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <tz+0x1>
     6ac:	8b 30       	cpi	r24, 0x0B	; 11
     6ae:	91 05       	cpc	r25, r1
     6b0:	29 f4       	brne	.+10     	; 0x6bc <_Z14changeTimeZonei+0x62>
		{
			tz = 0;
     6b2:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <tz+0x1>
     6b6:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <tz>
     6ba:	eb cf       	rjmp	.-42     	; 0x692 <_Z14changeTimeZonei+0x38>
		}
		else tz += 1;
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	e5 cf       	rjmp	.-54     	; 0x68a <_Z14changeTimeZonei+0x30>
		break;
		case RIGHT_KEY:
		break;
	}
	return key;
}
     6c0:	08 95       	ret

000006c2 <_Z11setTimeZonei>:
 * @param[in] key : int, user input
 *
 * @return key
 */
int setTimeZone(int key)
{
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
	int input = changeTimeZone(key);
     6c6:	0e 94 2d 03 	call	0x65a	; 0x65a <_Z14changeTimeZonei>
     6ca:	ec 01       	movw	r28, r24
	lcd.setCursor(0,0);
     6cc:	40 e0       	ldi	r20, 0x00	; 0
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	82 ef       	ldi	r24, 0xF2	; 242
     6d2:	92 e0       	ldi	r25, 0x02	; 2
     6d4:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <_ZN7hd447809setCursorEhh>
	lcd.print(CITIES[tz].name);
     6d8:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <tz>
     6dc:	70 91 91 02 	lds	r23, 0x0291	; 0x800291 <tz+0x1>
     6e0:	83 e0       	ldi	r24, 0x03	; 3
     6e2:	66 0f       	add	r22, r22
     6e4:	77 1f       	adc	r23, r23
     6e6:	8a 95       	dec	r24
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <_Z11setTimeZonei+0x20>
     6ea:	6e 56       	subi	r22, 0x6E	; 110
     6ec:	7d 4f       	sbci	r23, 0xFD	; 253
     6ee:	82 ef       	ldi	r24, 0xF2	; 242
     6f0:	92 e0       	ldi	r25, 0x02	; 2
     6f2:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <_ZN5Print5printERK6String>
	lcd.setCursor(0,1);
     6f6:	41 e0       	ldi	r20, 0x01	; 1
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	82 ef       	ldi	r24, 0xF2	; 242
     6fc:	92 e0       	ldi	r25, 0x02	; 2
     6fe:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <_ZN7hd447809setCursorEhh>
	printhhmmss(zeitTimeZone);
     702:	8c e7       	ldi	r24, 0x7C	; 124
     704:	92 e0       	ldi	r25, 0x02	; 2
     706:	0e 94 41 02 	call	0x482	; 0x482 <_Z11printhhmmssR4Zeit>
	return input;
}
     70a:	ce 01       	movw	r24, r28
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	08 95       	ret

00000712 <_Z17callibratePointerv>:
 * @brief set zero position of the three pointer
 *
 */
void callibratePointer() 
{
	lcd.clear();
     712:	82 ef       	ldi	r24, 0xF2	; 242
     714:	92 e0       	ldi	r25, 0x02	; 2
     716:	0e 94 4a 0a 	call	0x1494	; 0x1494 <_ZN7hd447805clearEv>
	lcd.print("Zeiger kalibrieren");
     71a:	65 e3       	ldi	r22, 0x35	; 53
     71c:	71 e0       	ldi	r23, 0x01	; 1
     71e:	82 ef       	ldi	r24, 0xF2	; 242
     720:	92 e0       	ldi	r25, 0x02	; 2
     722:	0e 94 00 11 	call	0x2200	; 0x2200 <_ZN5Print5printEPKc>
	delay(2000);
     726:	60 ed       	ldi	r22, 0xD0	; 208
     728:	77 e0       	ldi	r23, 0x07	; 7
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <delay>
	lcd.clear();
     732:	82 ef       	ldi	r24, 0xF2	; 242
     734:	92 e0       	ldi	r25, 0x02	; 2
     736:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <_ZN7hd447805clearEv>

0000073a <setup>:
 * \return void
 */
void setup()
{
	//LCD konfigurieren
	lcd.begin(16, 2);
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	42 e0       	ldi	r20, 0x02	; 2
     73e:	60 e1       	ldi	r22, 0x10	; 16
     740:	82 ef       	ldi	r24, 0xF2	; 242
     742:	92 e0       	ldi	r25, 0x02	; 2
     744:	0e 94 76 0a 	call	0x14ec	; 0x14ec <_ZN7hd447805beginEhhh>
	lcd.noBacklight();
     748:	82 ef       	ldi	r24, 0xF2	; 242
     74a:	92 e0       	ldi	r25, 0x02	; 2
     74c:	0e 94 0b 0a 	call	0x1416	; 0x1416 <_ZN7hd4478011noBacklightEv>
	lcd.noCursor();
     750:	82 ef       	ldi	r24, 0xF2	; 242
     752:	92 e0       	ldi	r25, 0x02	; 2
     754:	0e 94 10 0b 	call	0x1620	; 0x1620 <_ZN7hd447808noCursorEv>
	lcd.home();
     758:	82 ef       	ldi	r24, 0xF2	; 242
     75a:	92 e0       	ldi	r25, 0x02	; 2
     75c:	0e 94 4d 0a 	call	0x149a	; 0x149a <_ZN7hd447804homeEv>
	lcd.print("Romeo V2.2 Watch");
     760:	68 e4       	ldi	r22, 0x48	; 72
     762:	71 e0       	ldi	r23, 0x01	; 1
     764:	82 ef       	ldi	r24, 0xF2	; 242
     766:	92 e0       	ldi	r25, 0x02	; 2
     768:	0e 94 00 11 	call	0x2200	; 0x2200 <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
     76c:	41 e0       	ldi	r20, 0x01	; 1
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	82 ef       	ldi	r24, 0xF2	; 242
     772:	92 e0       	ldi	r25, 0x02	; 2
     774:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <_ZN7hd447809setCursorEhh>
	lcd.print("Coray / Bruno");
     778:	69 e5       	ldi	r22, 0x59	; 89
     77a:	71 e0       	ldi	r23, 0x01	; 1
     77c:	82 ef       	ldi	r24, 0xF2	; 242
     77e:	92 e0       	ldi	r25, 0x02	; 2
     780:	0e 94 00 11 	call	0x2200	; 0x2200 <_ZN5Print5printEPKc>
	while(millis()<3000);
     784:	0e 94 14 17 	call	0x2e28	; 0x2e28 <millis>
     788:	68 3b       	cpi	r22, 0xB8	; 184
     78a:	7b 40       	sbci	r23, 0x0B	; 11
     78c:	81 05       	cpc	r24, r1
     78e:	91 05       	cpc	r25, r1
     790:	c8 f3       	brcs	.-14     	; 0x784 <setup+0x4a>
	lcd.clear();
     792:	82 ef       	ldi	r24, 0xF2	; 242
     794:	92 e0       	ldi	r25, 0x02	; 2
     796:	0e 94 4a 0a 	call	0x1494	; 0x1494 <_ZN7hd447805clearEv>
	
	zeitTimeZone = zeitGMT;
     79a:	88 e0       	ldi	r24, 0x08	; 8
     79c:	e4 e8       	ldi	r30, 0x84	; 132
     79e:	f2 e0       	ldi	r31, 0x02	; 2
     7a0:	ac e7       	ldi	r26, 0x7C	; 124
     7a2:	b2 e0       	ldi	r27, 0x02	; 2
     7a4:	01 90       	ld	r0, Z+
     7a6:	0d 92       	st	X+, r0
     7a8:	8a 95       	dec	r24
     7aa:	e1 f7       	brne	.-8      	; 0x7a4 <setup+0x6a>
	
	//Button uns Sensor Pin als input definiert
	pinMode(btnPin, INPUT);
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	87 e0       	ldi	r24, 0x07	; 7
     7b0:	0e 94 45 18 	call	0x308a	; 0x308a <pinMode>
	pinMode(tempSensor,INPUT);
     7b4:	60 e0       	ldi	r22, 0x00	; 0
     7b6:	86 e1       	ldi	r24, 0x16	; 22
     7b8:	0c 94 45 18 	jmp	0x308a	; 0x308a <pinMode>

000007bc <loop>:
 * \return void
 */
void loop()
{
	//Button-Pin auslesen
	if (digitalRead(btnPin) == HIGH)
     7bc:	87 e0       	ldi	r24, 0x07	; 7
     7be:	0e 94 b0 18 	call	0x3160	; 0x3160 <digitalRead>
     7c2:	01 97       	sbiw	r24, 0x01	; 1
     7c4:	11 f4       	brne	.+4      	; 0x7ca <loop+0xe>
	{
		callibratePointer();
     7c6:	0c 94 89 03 	jmp	0x712	; 0x712 <_Z17callibratePointerv>
	}
	else
	{
	Watch();
     7ca:	0e 94 11 02 	call	0x422	; 0x422 <_Z5Watchv>
	input = getkey();
     7ce:	0e 94 18 01 	call	0x230	; 0x230 <_Z6getkeyv>
     7d2:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <_ZL5input+0x1>
     7d6:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <_ZL5input>
	if (watchmenu[menu].active) 
     7da:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <_ZL4menu>
     7de:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <_ZL4menu+0x1>
     7e2:	42 e1       	ldi	r20, 0x12	; 18
     7e4:	42 9f       	mul	r20, r18
     7e6:	f0 01       	movw	r30, r0
     7e8:	43 9f       	mul	r20, r19
     7ea:	f0 0d       	add	r31, r0
     7ec:	11 24       	eor	r1, r1
     7ee:	e0 52       	subi	r30, 0x20	; 32
     7f0:	fe 4f       	sbci	r31, 0xFE	; 254
     7f2:	04 84       	ldd	r0, Z+12	; 0x0c
     7f4:	f5 85       	ldd	r31, Z+13	; 0x0d
     7f6:	e0 2d       	mov	r30, r0
     7f8:	30 97       	sbiw	r30, 0x00	; 0
     7fa:	29 f0       	breq	.+10     	; 0x806 <loop+0x4a>
		input = watchmenu[menu].active(input);
     7fc:	09 95       	icall
     7fe:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <_ZL5input+0x1>
     802:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <_ZL5input>
		//! cyclic call to active function as long as menu n is active
	switch(input) {
     806:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <_ZL5input>
     80a:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <_ZL5input+0x1>
     80e:	83 30       	cpi	r24, 0x03	; 3
     810:	91 05       	cpc	r25, r1
     812:	e9 f1       	breq	.+122    	; 0x88e <loop+0xd2>
     814:	34 f4       	brge	.+12     	; 0x822 <loop+0x66>
     816:	81 30       	cpi	r24, 0x01	; 1
     818:	91 05       	cpc	r25, r1
     81a:	79 f0       	breq	.+30     	; 0x83a <loop+0x7e>
     81c:	02 97       	sbiw	r24, 0x02	; 2
     81e:	21 f1       	breq	.+72     	; 0x868 <loop+0xac>
     820:	09 c0       	rjmp	.+18     	; 0x834 <loop+0x78>
     822:	85 30       	cpi	r24, 0x05	; 5
     824:	91 05       	cpc	r25, r1
     826:	09 f4       	brne	.+2      	; 0x82a <loop+0x6e>
     828:	6a c0       	rjmp	.+212    	; 0x8fe <loop+0x142>
     82a:	0c f4       	brge	.+2      	; 0x82e <loop+0x72>
     82c:	43 c0       	rjmp	.+134    	; 0x8b4 <loop+0xf8>
     82e:	06 97       	sbiw	r24, 0x06	; 6
     830:	09 f4       	brne	.+2      	; 0x834 <loop+0x78>
     832:	8a c0       	rjmp	.+276    	; 0x948 <loop+0x18c>
		default:
		case X_KEY:
		case NO_KEY:
		newmenu = -1; // no changes made
     834:	8f ef       	ldi	r24, 0xFF	; 255
     836:	9f ef       	ldi	r25, 0xFF	; 255
     838:	12 c0       	rjmp	.+36     	; 0x85e <loop+0xa2>
		break;
		case UP_KEY:
		lcd.clear();
     83a:	82 ef       	ldi	r24, 0xF2	; 242
     83c:	92 e0       	ldi	r25, 0x02	; 2
     83e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].up;
     842:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <_ZL4menu>
     846:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <_ZL4menu+0x1>
     84a:	22 e1       	ldi	r18, 0x12	; 18
     84c:	28 9f       	mul	r18, r24
     84e:	f0 01       	movw	r30, r0
     850:	29 9f       	mul	r18, r25
     852:	f0 0d       	add	r31, r0
     854:	11 24       	eor	r1, r1
     856:	e0 52       	subi	r30, 0x20	; 32
     858:	fe 4f       	sbci	r31, 0xFE	; 254
     85a:	82 81       	ldd	r24, Z+2	; 0x02
     85c:	93 81       	ldd	r25, Z+3	; 0x03
     85e:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <_ZL7newmenu+0x1>
     862:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <_ZL7newmenu>
		break;
     866:	80 c0       	rjmp	.+256    	; 0x968 <loop+0x1ac>
		case LEFT_KEY:
		lcd.clear();
     868:	82 ef       	ldi	r24, 0xF2	; 242
     86a:	92 e0       	ldi	r25, 0x02	; 2
     86c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].left;
     870:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <_ZL4menu>
     874:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <_ZL4menu+0x1>
     878:	22 e1       	ldi	r18, 0x12	; 18
     87a:	28 9f       	mul	r18, r24
     87c:	f0 01       	movw	r30, r0
     87e:	29 9f       	mul	r18, r25
     880:	f0 0d       	add	r31, r0
     882:	11 24       	eor	r1, r1
     884:	e0 52       	subi	r30, 0x20	; 32
     886:	fe 4f       	sbci	r31, 0xFE	; 254
     888:	84 81       	ldd	r24, Z+4	; 0x04
     88a:	95 81       	ldd	r25, Z+5	; 0x05
     88c:	e8 cf       	rjmp	.-48     	; 0x85e <loop+0xa2>
		break;
		case DOWN_KEY:
		lcd.clear();
     88e:	82 ef       	ldi	r24, 0xF2	; 242
     890:	92 e0       	ldi	r25, 0x02	; 2
     892:	0e 94 4a 0a 	call	0x1494	; 0x1494 <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].down;
     896:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <_ZL4menu>
     89a:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <_ZL4menu+0x1>
     89e:	22 e1       	ldi	r18, 0x12	; 18
     8a0:	28 9f       	mul	r18, r24
     8a2:	f0 01       	movw	r30, r0
     8a4:	29 9f       	mul	r18, r25
     8a6:	f0 0d       	add	r31, r0
     8a8:	11 24       	eor	r1, r1
     8aa:	e0 52       	subi	r30, 0x20	; 32
     8ac:	fe 4f       	sbci	r31, 0xFE	; 254
     8ae:	86 81       	ldd	r24, Z+6	; 0x06
     8b0:	97 81       	ldd	r25, Z+7	; 0x07
     8b2:	d5 cf       	rjmp	.-86     	; 0x85e <loop+0xa2>
		break;
		case RIGHT_KEY:
		lcd.clear();
     8b4:	82 ef       	ldi	r24, 0xF2	; 242
     8b6:	92 e0       	ldi	r25, 0x02	; 2
     8b8:	0e 94 4a 0a 	call	0x1494	; 0x1494 <_ZN7hd447805clearEv>
		if(watchmenu[menu].goright != NULL) {
     8bc:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <_ZL4menu>
     8c0:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <_ZL4menu+0x1>
     8c4:	22 e1       	ldi	r18, 0x12	; 18
     8c6:	28 9f       	mul	r18, r24
     8c8:	f0 01       	movw	r30, r0
     8ca:	29 9f       	mul	r18, r25
     8cc:	f0 0d       	add	r31, r0
     8ce:	11 24       	eor	r1, r1
     8d0:	e0 52       	subi	r30, 0x20	; 32
     8d2:	fe 4f       	sbci	r31, 0xFE	; 254
     8d4:	06 84       	ldd	r0, Z+14	; 0x0e
     8d6:	f7 85       	ldd	r31, Z+15	; 0x0f
     8d8:	e0 2d       	mov	r30, r0
     8da:	30 97       	sbiw	r30, 0x00	; 0
     8dc:	09 f0       	breq	.+2      	; 0x8e0 <loop+0x124>
			//! call go right function with new value
			watchmenu[menu].goright();
     8de:	09 95       	icall
		}
		newmenu = watchmenu[menu].right;
     8e0:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <_ZL4menu>
     8e4:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <_ZL4menu+0x1>
     8e8:	22 e1       	ldi	r18, 0x12	; 18
     8ea:	28 9f       	mul	r18, r24
     8ec:	f0 01       	movw	r30, r0
     8ee:	29 9f       	mul	r18, r25
     8f0:	f0 0d       	add	r31, r0
     8f2:	11 24       	eor	r1, r1
     8f4:	e0 52       	subi	r30, 0x20	; 32
     8f6:	fe 4f       	sbci	r31, 0xFE	; 254
     8f8:	80 85       	ldd	r24, Z+8	; 0x08
     8fa:	91 85       	ldd	r25, Z+9	; 0x09
     8fc:	b0 cf       	rjmp	.-160    	; 0x85e <loop+0xa2>
		break;
		case OK_KEY:
		lcd.clear();
     8fe:	82 ef       	ldi	r24, 0xF2	; 242
     900:	92 e0       	ldi	r25, 0x02	; 2
     902:	0e 94 4a 0a 	call	0x1494	; 0x1494 <_ZN7hd447805clearEv>
		if(watchmenu[menu].positive != NULL) {
     906:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <_ZL4menu>
     90a:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <_ZL4menu+0x1>
     90e:	22 e1       	ldi	r18, 0x12	; 18
     910:	28 9f       	mul	r18, r24
     912:	f0 01       	movw	r30, r0
     914:	29 9f       	mul	r18, r25
     916:	f0 0d       	add	r31, r0
     918:	11 24       	eor	r1, r1
     91a:	e0 52       	subi	r30, 0x20	; 32
     91c:	fe 4f       	sbci	r31, 0xFE	; 254
     91e:	00 88       	ldd	r0, Z+16	; 0x10
     920:	f1 89       	ldd	r31, Z+17	; 0x11
     922:	e0 2d       	mov	r30, r0
     924:	30 97       	sbiw	r30, 0x00	; 0
     926:	09 f0       	breq	.+2      	; 0x92a <loop+0x16e>
			//! call positive answer function with new value
			watchmenu[menu].positive();
     928:	09 95       	icall
		}
		newmenu = watchmenu[menu].ok;
     92a:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <_ZL4menu>
     92e:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <_ZL4menu+0x1>
     932:	22 e1       	ldi	r18, 0x12	; 18
     934:	28 9f       	mul	r18, r24
     936:	f0 01       	movw	r30, r0
     938:	29 9f       	mul	r18, r25
     93a:	f0 0d       	add	r31, r0
     93c:	11 24       	eor	r1, r1
     93e:	e0 52       	subi	r30, 0x20	; 32
     940:	fe 4f       	sbci	r31, 0xFE	; 254
     942:	82 85       	ldd	r24, Z+10	; 0x0a
     944:	93 85       	ldd	r25, Z+11	; 0x0b
     946:	8b cf       	rjmp	.-234    	; 0x85e <loop+0xa2>
		break;
		case BK_KEY:
		lcd.clear();
     948:	82 ef       	ldi	r24, 0xF2	; 242
     94a:	92 e0       	ldi	r25, 0x02	; 2
     94c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <_ZN7hd447805clearEv>
		lcd.noCursor();
     950:	82 ef       	ldi	r24, 0xF2	; 242
     952:	92 e0       	ldi	r25, 0x02	; 2
     954:	0e 94 10 0b 	call	0x1620	; 0x1620 <_ZN7hd447808noCursorEv>
		lcd.noBlink();
     958:	82 ef       	ldi	r24, 0xF2	; 242
     95a:	92 e0       	ldi	r25, 0x02	; 2
     95c:	0e 94 17 0b 	call	0x162e	; 0x162e <_ZN7hd447807noBlinkEv>
		newmenu = 0;
     960:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <_ZL7newmenu+0x1>
     964:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <_ZL7newmenu>
		break;
	}
	if(newmenu >= 0){
     968:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <_ZL7newmenu>
     96c:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <_ZL7newmenu+0x1>
     970:	97 fd       	sbrc	r25, 7
     972:	21 c0       	rjmp	.+66     	; 0x9b6 <loop+0x1fa>
		menu = newmenu;
     974:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <_ZL4menu+0x1>
     978:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <_ZL4menu>
		lcd.setCursor(0, 0);
     97c:	40 e0       	ldi	r20, 0x00	; 0
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	82 ef       	ldi	r24, 0xF2	; 242
     982:	92 e0       	ldi	r25, 0x02	; 2
     984:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <_ZN7hd447809setCursorEhh>
		lcd.print(ROM(watchmenu[menu].text1));
     988:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <_ZL4menu>
     98c:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <_ZL4menu+0x1>
     990:	22 e1       	ldi	r18, 0x12	; 18
     992:	28 9f       	mul	r18, r24
     994:	f0 01       	movw	r30, r0
     996:	29 9f       	mul	r18, r25
     998:	f0 0d       	add	r31, r0
     99a:	11 24       	eor	r1, r1
     99c:	e0 52       	subi	r30, 0x20	; 32
     99e:	fe 4f       	sbci	r31, 0xFE	; 254
     9a0:	60 81       	ld	r22, Z
     9a2:	71 81       	ldd	r23, Z+1	; 0x01
     9a4:	8a e5       	ldi	r24, 0x5A	; 90
     9a6:	92 e0       	ldi	r25, 0x02	; 2
     9a8:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <strcpy_P>
     9ac:	bc 01       	movw	r22, r24
     9ae:	82 ef       	ldi	r24, 0xF2	; 242
     9b0:	92 e0       	ldi	r25, 0x02	; 2
     9b2:	0c 94 00 11 	jmp	0x2200	; 0x2200 <_ZN5Print5printEPKc>
     9b6:	08 95       	ret

000009b8 <_GLOBAL__sub_I_lcd>:
	}
	} //else Klammer
}
     9b8:	af 92       	push	r10
     9ba:	bf 92       	push	r11
     9bc:	cf 92       	push	r12
     9be:	df 92       	push	r13
     9c0:	ef 92       	push	r14
     9c2:	ff 92       	push	r15
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
// ====================

//	-- Automagic / auto-detect constructors --

// Auto find next instance and auto config pin mapping
hd44780_I2Cexp(){ _addr = 0; _expType = I2Cexp_UNKNOWN;}
     9cc:	82 ef       	ldi	r24, 0xF2	; 242
     9ce:	92 e0       	ldi	r25, 0x02	; 2
     9d0:	0e 94 d6 09 	call	0x13ac	; 0x13ac <_ZN7hd44780C1Ev>
     9d4:	e2 ef       	ldi	r30, 0xF2	; 242
     9d6:	f2 e0       	ldi	r31, 0x02	; 2
     9d8:	8e ec       	ldi	r24, 0xCE	; 206
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	91 83       	std	Z+1, r25	; 0x01
     9de:	80 83       	st	Z, r24
     9e0:	10 a2       	std	Z+32, r1	; 0x20
     9e2:	11 a2       	std	Z+33, r1	; 0x21

const struct CITY_TIME_DIF CITIES [] {
	{"London", 0},{"New-York", -5},{"Paris", 1},{ "Tokyo", 9},
	{"Hongkong", 8},{"Los Angeles", -8},{"Chicago", -6},{"Seoul", 9},
	{ "Brüssel",  1},{"Washington",  -5},{"Singapur", 8},{"Sydney", 11}
	};
     9e4:	67 e6       	ldi	r22, 0x67	; 103
     9e6:	71 e0       	ldi	r23, 0x01	; 1
     9e8:	82 e9       	ldi	r24, 0x92	; 146
     9ea:	92 e0       	ldi	r25, 0x02	; 2
     9ec:	0e 94 47 19 	call	0x328e	; 0x328e <_ZN6StringC1EPKc>
     9f0:	c2 e9       	ldi	r28, 0x92	; 146
     9f2:	d2 e0       	ldi	r29, 0x02	; 2
     9f4:	1f 82       	std	Y+7, r1	; 0x07
     9f6:	1e 82       	std	Y+6, r1	; 0x06
     9f8:	6e e6       	ldi	r22, 0x6E	; 110
     9fa:	71 e0       	ldi	r23, 0x01	; 1
     9fc:	8a e9       	ldi	r24, 0x9A	; 154
     9fe:	92 e0       	ldi	r25, 0x02	; 2
     a00:	0e 94 47 19 	call	0x328e	; 0x328e <_ZN6StringC1EPKc>
     a04:	8b ef       	ldi	r24, 0xFB	; 251
     a06:	e8 2e       	mov	r14, r24
     a08:	ff 24       	eor	r15, r15
     a0a:	fa 94       	dec	r15
     a0c:	ff 86       	std	Y+15, r15	; 0x0f
     a0e:	ee 86       	std	Y+14, r14	; 0x0e
     a10:	67 e7       	ldi	r22, 0x77	; 119
     a12:	71 e0       	ldi	r23, 0x01	; 1
     a14:	82 ea       	ldi	r24, 0xA2	; 162
     a16:	92 e0       	ldi	r25, 0x02	; 2
     a18:	0e 94 47 19 	call	0x328e	; 0x328e <_ZN6StringC1EPKc>
     a1c:	cc 24       	eor	r12, r12
     a1e:	c3 94       	inc	r12
     a20:	d1 2c       	mov	r13, r1
     a22:	df 8a       	std	Y+23, r13	; 0x17
     a24:	ce 8a       	std	Y+22, r12	; 0x16
     a26:	6d e7       	ldi	r22, 0x7D	; 125
     a28:	71 e0       	ldi	r23, 0x01	; 1
     a2a:	8a ea       	ldi	r24, 0xAA	; 170
     a2c:	92 e0       	ldi	r25, 0x02	; 2
     a2e:	0e 94 47 19 	call	0x328e	; 0x328e <_ZN6StringC1EPKc>
     a32:	29 e0       	ldi	r18, 0x09	; 9
     a34:	a2 2e       	mov	r10, r18
     a36:	b1 2c       	mov	r11, r1
     a38:	bf 8e       	std	Y+31, r11	; 0x1f
     a3a:	ae 8e       	std	Y+30, r10	; 0x1e
     a3c:	63 e8       	ldi	r22, 0x83	; 131
     a3e:	71 e0       	ldi	r23, 0x01	; 1
     a40:	82 eb       	ldi	r24, 0xB2	; 178
     a42:	92 e0       	ldi	r25, 0x02	; 2
     a44:	0e 94 47 19 	call	0x328e	; 0x328e <_ZN6StringC1EPKc>
     a48:	08 e0       	ldi	r16, 0x08	; 8
     a4a:	10 e0       	ldi	r17, 0x00	; 0
     a4c:	1f a3       	std	Y+39, r17	; 0x27
     a4e:	0e a3       	std	Y+38, r16	; 0x26
     a50:	6c e8       	ldi	r22, 0x8C	; 140
     a52:	71 e0       	ldi	r23, 0x01	; 1
     a54:	8a eb       	ldi	r24, 0xBA	; 186
     a56:	92 e0       	ldi	r25, 0x02	; 2
     a58:	0e 94 47 19 	call	0x328e	; 0x328e <_ZN6StringC1EPKc>
     a5c:	88 ef       	ldi	r24, 0xF8	; 248
     a5e:	9f ef       	ldi	r25, 0xFF	; 255
     a60:	9f a7       	std	Y+47, r25	; 0x2f
     a62:	8e a7       	std	Y+46, r24	; 0x2e
     a64:	68 e9       	ldi	r22, 0x98	; 152
     a66:	71 e0       	ldi	r23, 0x01	; 1
     a68:	82 ec       	ldi	r24, 0xC2	; 194
     a6a:	92 e0       	ldi	r25, 0x02	; 2
     a6c:	0e 94 47 19 	call	0x328e	; 0x328e <_ZN6StringC1EPKc>
     a70:	8a ef       	ldi	r24, 0xFA	; 250
     a72:	9f ef       	ldi	r25, 0xFF	; 255
     a74:	9f ab       	std	Y+55, r25	; 0x37
     a76:	8e ab       	std	Y+54, r24	; 0x36
     a78:	60 ea       	ldi	r22, 0xA0	; 160
     a7a:	71 e0       	ldi	r23, 0x01	; 1
     a7c:	8a ec       	ldi	r24, 0xCA	; 202
     a7e:	92 e0       	ldi	r25, 0x02	; 2
     a80:	0e 94 47 19 	call	0x328e	; 0x328e <_ZN6StringC1EPKc>
     a84:	bf ae       	std	Y+63, r11	; 0x3f
     a86:	ae ae       	std	Y+62, r10	; 0x3e
     a88:	66 ea       	ldi	r22, 0xA6	; 166
     a8a:	71 e0       	ldi	r23, 0x01	; 1
     a8c:	82 ed       	ldi	r24, 0xD2	; 210
     a8e:	92 e0       	ldi	r25, 0x02	; 2
     a90:	0e 94 47 19 	call	0x328e	; 0x328e <_ZN6StringC1EPKc>
     a94:	d0 92 d9 02 	sts	0x02D9, r13	; 0x8002d9 <_ZL6CITIES+0x47>
     a98:	c0 92 d8 02 	sts	0x02D8, r12	; 0x8002d8 <_ZL6CITIES+0x46>
     a9c:	6f ea       	ldi	r22, 0xAF	; 175
     a9e:	71 e0       	ldi	r23, 0x01	; 1
     aa0:	8a ed       	ldi	r24, 0xDA	; 218
     aa2:	92 e0       	ldi	r25, 0x02	; 2
     aa4:	0e 94 47 19 	call	0x328e	; 0x328e <_ZN6StringC1EPKc>
     aa8:	f0 92 e1 02 	sts	0x02E1, r15	; 0x8002e1 <_ZL6CITIES+0x4f>
     aac:	e0 92 e0 02 	sts	0x02E0, r14	; 0x8002e0 <_ZL6CITIES+0x4e>
     ab0:	6a eb       	ldi	r22, 0xBA	; 186
     ab2:	71 e0       	ldi	r23, 0x01	; 1
     ab4:	82 ee       	ldi	r24, 0xE2	; 226
     ab6:	92 e0       	ldi	r25, 0x02	; 2
     ab8:	0e 94 47 19 	call	0x328e	; 0x328e <_ZN6StringC1EPKc>
     abc:	10 93 e9 02 	sts	0x02E9, r17	; 0x8002e9 <_ZL6CITIES+0x57>
     ac0:	00 93 e8 02 	sts	0x02E8, r16	; 0x8002e8 <_ZL6CITIES+0x56>
     ac4:	63 ec       	ldi	r22, 0xC3	; 195
     ac6:	71 e0       	ldi	r23, 0x01	; 1
     ac8:	8a ee       	ldi	r24, 0xEA	; 234
     aca:	92 e0       	ldi	r25, 0x02	; 2
     acc:	0e 94 47 19 	call	0x328e	; 0x328e <_ZN6StringC1EPKc>
     ad0:	8b e0       	ldi	r24, 0x0B	; 11
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <_ZL6CITIES+0x5f>
     ad8:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <_ZL6CITIES+0x5e>
	int hh_;
	int mm_;
	int ss_;
	int set_;
public:
	Zeit(int h, int m, int s){ hh_=h; mm_=m; ss_=s; set_ =0;};
     adc:	e4 e8       	ldi	r30, 0x84	; 132
     ade:	f2 e0       	ldi	r31, 0x02	; 2
     ae0:	85 e1       	ldi	r24, 0x15	; 21
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	91 83       	std	Z+1, r25	; 0x01
     ae6:	80 83       	st	Z, r24
     ae8:	8f e1       	ldi	r24, 0x1F	; 31
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	93 83       	std	Z+3, r25	; 0x03
     aee:	82 83       	std	Z+2, r24	; 0x02
     af0:	15 82       	std	Z+5, r1	; 0x05
     af2:	14 82       	std	Z+4, r1	; 0x04
     af4:	17 82       	std	Z+7, r1	; 0x07
     af6:	16 82       	std	Z+6, r1	; 0x06
     af8:	ec e7       	ldi	r30, 0x7C	; 124
     afa:	f2 e0       	ldi	r31, 0x02	; 2
     afc:	2c e0       	ldi	r18, 0x0C	; 12
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	31 83       	std	Z+1, r19	; 0x01
     b02:	20 83       	st	Z, r18
     b04:	13 82       	std	Z+3, r1	; 0x03
     b06:	12 82       	std	Z+2, r1	; 0x02
     b08:	15 82       	std	Z+5, r1	; 0x05
     b0a:	14 82       	std	Z+4, r1	; 0x04
     b0c:	17 82       	std	Z+7, r1	; 0x07
     b0e:	16 82       	std	Z+6, r1	; 0x06
     b10:	e4 e7       	ldi	r30, 0x74	; 116
     b12:	f2 e0       	ldi	r31, 0x02	; 2
     b14:	26 e1       	ldi	r18, 0x16	; 22
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	31 83       	std	Z+1, r19	; 0x01
     b1a:	20 83       	st	Z, r18
     b1c:	93 83       	std	Z+3, r25	; 0x03
     b1e:	82 83       	std	Z+2, r24	; 0x02
     b20:	15 82       	std	Z+5, r1	; 0x05
     b22:	14 82       	std	Z+4, r1	; 0x04
     b24:	17 82       	std	Z+7, r1	; 0x07
     b26:	16 82       	std	Z+6, r1	; 0x06
		menu = newmenu;
		lcd.setCursor(0, 0);
		lcd.print(ROM(watchmenu[menu].text1));
	}
	} //else Klammer
}
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	1f 91       	pop	r17
     b2e:	0f 91       	pop	r16
     b30:	ff 90       	pop	r15
     b32:	ef 90       	pop	r14
     b34:	df 90       	pop	r13
     b36:	cf 90       	pop	r12
     b38:	bf 90       	pop	r11
     b3a:	af 90       	pop	r10
     b3c:	08 95       	ret

00000b3e <_GLOBAL__sub_D_lcd>:
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	c2 ef       	ldi	r28, 0xF2	; 242
     b44:	d2 e0       	ldi	r29, 0x02	; 2
struct CITY_TIME_DIF {
	String name;
	int timediff;
};

const struct CITY_TIME_DIF CITIES [] {
     b46:	28 97       	sbiw	r28, 0x08	; 8
#include "Romeo_keys.h"

hd44780_I2Cexp lcd;

//Strukt um Städte und deren Zweitverschiebung zu GMT (London)
struct CITY_TIME_DIF {
     b48:	ce 01       	movw	r24, r28
     b4a:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <_ZN6StringD1Ev>
	String name;
	int timediff;
};

const struct CITY_TIME_DIF CITIES [] {
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	c2 39       	cpi	r28, 0x92	; 146
     b52:	d8 07       	cpc	r29, r24
     b54:	c1 f7       	brne	.-16     	; 0xb46 <_GLOBAL__sub_D_lcd+0x8>
		menu = newmenu;
		lcd.setCursor(0, 0);
		lcd.print(ROM(watchmenu[menu].text1));
	}
	} //else Klammer
}
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	08 95       	ret

00000b5c <_ZN14hd44780_I2Cexp14iosetBacklightEh>:
}

// iosetBacklight()  - set backlight brightness
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	fc 01       	movw	r30, r24
{
	if(!_bl) // backlight control?
     b62:	81 a5       	ldd	r24, Z+41	; 0x29
     b64:	88 23       	and	r24, r24
     b66:	71 f1       	breq	.+92     	; 0xbc4 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x68>
     b68:	92 a5       	ldd	r25, Z+42	; 0x2a
		return(hd44780::RV_ENOTSUP); // not backlight control support

	// dimvalue 0 is backlight off any other dimvalue is backlight on
	// configure backlight state mask according to active level
	if(((dimvalue) && (_blLevel == HIGH)) || 
     b6a:	66 23       	and	r22, r22
     b6c:	19 f0       	breq	.+6      	; 0xb74 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x18>
     b6e:	91 30       	cpi	r25, 0x01	; 1
     b70:	29 f4       	brne	.+10     	; 0xb7c <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
     b72:	02 c0       	rjmp	.+4      	; 0xb78 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x1c>
			((dimvalue == 0) && (_blLevel == LOW)))
     b74:	91 11       	cpse	r25, r1
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
	{
		_blCurState = _bl;
     b78:	83 a7       	std	Z+43, r24	; 0x2b
     b7a:	01 c0       	rjmp	.+2      	; 0xb7e <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x22>
	}
	else 
	{
		_blCurState = 0;
     b7c:	13 a6       	std	Z+43, r1	; 0x2b
     b7e:	ef 01       	movw	r28, r30
	}
	Wire.beginTransmission(_addr);
     b80:	60 a1       	ldd	r22, Z+32	; 0x20
     b82:	8d e8       	ldi	r24, 0x8D	; 141
     b84:	93 e0       	ldi	r25, 0x03	; 3
     b86:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
     b8a:	89 a1       	ldd	r24, Y+33	; 0x21
     b8c:	82 30       	cpi	r24, 0x02	; 2
     b8e:	31 f4       	brne	.+12     	; 0xb9c <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x40>
	{
		Wire.write(9); // point to GPIO
     b90:	69 e0       	ldi	r22, 0x09	; 9
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	8d e8       	ldi	r24, 0x8D	; 141
     b96:	93 e0       	ldi	r25, 0x03	; 3
     b98:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7TwoWire5writeEi>
	}
	Wire.write( _blCurState );
     b9c:	6b a5       	ldd	r22, Y+43	; 0x2b
     b9e:	8d e8       	ldi	r24, 0x8D	; 141
     ba0:	93 e0       	ldi	r25, 0x03	; 3
     ba2:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     ba6:	8d e8       	ldi	r24, 0x8D	; 141
     ba8:	93 e0       	ldi	r25, 0x03	; 3
     baa:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN7TwoWire15endTransmissionEv>
     bae:	21 e0       	ldi	r18, 0x01	; 1
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	81 11       	cpse	r24, r1
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x5e>
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	88 27       	eor	r24, r24
     bbc:	99 27       	eor	r25, r25
     bbe:	82 1b       	sub	r24, r18
     bc0:	93 0b       	sbc	r25, r19
     bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x6c>
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
{
	if(!_bl) // backlight control?
		return(hd44780::RV_ENOTSUP); // not backlight control support
     bc4:	8d ef       	ldi	r24, 0xFD	; 253
     bc6:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write( _blCurState );
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR); // all is good
}
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	08 95       	ret

00000bce <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>:
	return(0);
}


// write4bits - send a nibble to the LCD through i/o expander port
void write4bits(uint8_t value, hd44780::iotype type ) 
     bce:	cf 93       	push	r28
     bd0:	fc 01       	movw	r30, r24
{
uint8_t gpioValue =  _blCurState;
     bd2:	c3 a5       	ldd	r28, Z+43	; 0x2b
   
	// convert the value to an i/o expander port value
	// based on pin mappings
	if(value & (1 << 0))
     bd4:	60 ff       	sbrs	r22, 0
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0xe>
		gpioValue |= _d4;
     bd8:	85 a1       	ldd	r24, Z+37	; 0x25
     bda:	c8 2b       	or	r28, r24

	if(value & (1 << 1))
     bdc:	61 ff       	sbrs	r22, 1
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x16>
		gpioValue |= _d5;
     be0:	86 a1       	ldd	r24, Z+38	; 0x26
     be2:	c8 2b       	or	r28, r24

	if(value & (1 << 2))
     be4:	62 ff       	sbrs	r22, 2
     be6:	02 c0       	rjmp	.+4      	; 0xbec <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x1e>
		gpioValue |= _d6;
     be8:	87 a1       	ldd	r24, Z+39	; 0x27
     bea:	c8 2b       	or	r28, r24

	if(value & (1 << 3))
     bec:	63 ff       	sbrs	r22, 3
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x26>
		gpioValue |= _d7;
     bf0:	80 a5       	ldd	r24, Z+40	; 0x28
     bf2:	c8 2b       	or	r28, r24


	if(type == hd44780::HD44780_IOdata) 
     bf4:	41 30       	cpi	r20, 0x01	; 1
     bf6:	11 f4       	brne	.+4      	; 0xbfc <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x2e>
	{
		gpioValue |= _rs; // set RS high to send to data reg
     bf8:	82 a1       	ldd	r24, Z+34	; 0x22
     bfa:	c8 2b       	or	r28, r24
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
     bfc:	64 a1       	ldd	r22, Z+36	; 0x24
     bfe:	6c 2b       	or	r22, r28
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	8d e8       	ldi	r24, 0x8D	; 141
     c04:	93 e0       	ldi	r25, 0x03	; 3
     c06:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7TwoWire5writeEi>
	Wire.write(gpioValue);		// with E LOW
     c0a:	6c 2f       	mov	r22, r28
     c0c:	8d e8       	ldi	r24, 0x8D	; 141
     c0e:	93 e0       	ldi	r25, 0x03	; 3
}
     c10:	cf 91       	pop	r28
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
	Wire.write(gpioValue);		// with E LOW
     c12:	0c 94 2b 0e 	jmp	0x1c56	; 0x1c56 <_ZN7TwoWire5writeEh>

00000c16 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh>:
	return(rval);
}

// iowrite(type, value) - send either command or data byte to lcd
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
     c16:	8f 92       	push	r8
     c18:	9f 92       	push	r9
     c1a:	af 92       	push	r10
     c1c:	bf 92       	push	r11
     c1e:	cf 92       	push	r12
     c20:	df 92       	push	r13
     c22:	ef 92       	push	r14
     c24:	ff 92       	push	r15
     c26:	0f 93       	push	r16
     c28:	1f 93       	push	r17
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	ec 01       	movw	r28, r24
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
     c30:	88 a1       	ldd	r24, Y+32	; 0x20
     c32:	88 23       	and	r24, r24
     c34:	09 f4       	brne	.+2      	; 0xc38 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x22>
     c36:	50 c0       	rjmp	.+160    	; 0xcd8 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
     c38:	89 a1       	ldd	r24, Y+33	; 0x21
     c3a:	88 23       	and	r24, r24
     c3c:	09 f4       	brne	.+2      	; 0xc40 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x2a>
     c3e:	4c c0       	rjmp	.+152    	; 0xcd8 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
     c40:	14 2f       	mov	r17, r20
     c42:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
     c44:	8c 8c       	ldd	r8, Y+28	; 0x1c
     c46:	9d 8c       	ldd	r9, Y+29	; 0x1d
     c48:	ae 8c       	ldd	r10, Y+30	; 0x1e
     c4a:	bf 8c       	ldd	r11, Y+31	; 0x1f
     c4c:	c8 8c       	ldd	r12, Y+24	; 0x18
     c4e:	d9 8c       	ldd	r13, Y+25	; 0x19
     c50:	ea 8c       	ldd	r14, Y+26	; 0x1a
     c52:	fb 8c       	ldd	r15, Y+27	; 0x1b
     c54:	8d e2       	ldi	r24, 0x2D	; 45
     c56:	c8 1a       	sub	r12, r24
     c58:	d1 08       	sbc	r13, r1
     c5a:	e1 08       	sbc	r14, r1
     c5c:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
     c5e:	0e 94 20 17 	call	0x2e40	; 0x2e40 <micros>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	8c 19       	sub	r24, r12
     c68:	9d 09       	sbc	r25, r13
     c6a:	ae 09       	sbc	r26, r14
     c6c:	bf 09       	sbc	r27, r15
     c6e:	88 15       	cp	r24, r8
     c70:	99 05       	cpc	r25, r9
     c72:	aa 05       	cpc	r26, r10
     c74:	bb 05       	cpc	r27, r11
     c76:	98 f3       	brcs	.-26     	; 0xc5e <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x48>
	 */

	waitReady(-45);
   
	// grab i2c bus
	Wire.beginTransmission(_addr);
     c78:	68 a1       	ldd	r22, Y+32	; 0x20
     c7a:	8d e8       	ldi	r24, 0x8D	; 141
     c7c:	93 e0       	ldi	r25, 0x03	; 3
     c7e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
     c82:	89 a1       	ldd	r24, Y+33	; 0x21
     c84:	82 30       	cpi	r24, 0x02	; 2
     c86:	31 f4       	brne	.+12     	; 0xc94 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x7e>
	{
		Wire.write(9); // point to GPIO
     c88:	69 e0       	ldi	r22, 0x09	; 9
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	8d e8       	ldi	r24, 0x8D	; 141
     c8e:	93 e0       	ldi	r25, 0x03	; 3
     c90:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7TwoWire5writeEi>
	}
	// send both nibbles in same i2c connection
	write4bits( (value >> 4), type );  // send upper nibble
     c94:	61 2f       	mov	r22, r17
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	84 e0       	ldi	r24, 0x04	; 4
     c9a:	75 95       	asr	r23
     c9c:	67 95       	ror	r22
     c9e:	8a 95       	dec	r24
     ca0:	e1 f7       	brne	.-8      	; 0xc9a <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x84>
     ca2:	40 2f       	mov	r20, r16
     ca4:	ce 01       	movw	r24, r28
     ca6:	0e 94 e7 05 	call	0xbce	; 0xbce <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	 * are used to reliably get the LCD and host in nibble sync
	 * with each other and to get the LCD into 4 bit mode.
	 * When sending a "4 bit command" only the upper nibble of
	 * of the 8 bit byte will presented on LCD signals D4-D7.
	 */
	if(type != hd44780::HD44780_IOcmd4bit)
     caa:	02 30       	cpi	r16, 0x02	; 2
     cac:	31 f0       	breq	.+12     	; 0xcba <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xa4>
	{
		write4bits( (value & 0x0F), type); // lower nibble, if not 4bit cmd
     cae:	61 2f       	mov	r22, r17
     cb0:	6f 70       	andi	r22, 0x0F	; 15
     cb2:	40 2f       	mov	r20, r16
     cb4:	ce 01       	movw	r24, r28
     cb6:	0e 94 e7 05 	call	0xbce	; 0xbce <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	}
	if(Wire.endTransmission())
     cba:	8d e8       	ldi	r24, 0x8D	; 141
     cbc:	93 e0       	ldi	r25, 0x03	; 3
     cbe:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN7TwoWire15endTransmissionEv>
     cc2:	21 e0       	ldi	r18, 0x01	; 1
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	81 11       	cpse	r24, r1
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xb8>
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	88 27       	eor	r24, r24
     cd0:	99 27       	eor	r25, r25
     cd2:	82 1b       	sub	r24, r18
     cd4:	93 0b       	sbc	r25, r19
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc6>
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
     cd8:	8c ef       	ldi	r24, 0xFC	; 252
     cda:	9f ef       	ldi	r25, 0xFF	; 255
	}
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR);
}
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	cf 90       	pop	r12
     cec:	bf 90       	pop	r11
     cee:	af 90       	pop	r10
     cf0:	9f 90       	pop	r9
     cf2:	8f 90       	pop	r8
     cf4:	08 95       	ret

00000cf6 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE>:
// ioread(type) - read a byte from LCD DDRAM
//
// returns:
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
     cf6:	8f 92       	push	r8
     cf8:	9f 92       	push	r9
     cfa:	af 92       	push	r10
     cfc:	bf 92       	push	r11
     cfe:	cf 92       	push	r12
     d00:	df 92       	push	r13
     d02:	ef 92       	push	r14
     d04:	ff 92       	push	r15
     d06:	0f 93       	push	r16
     d08:	1f 93       	push	r17
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	ec 01       	movw	r28, r24
{
uint8_t gpioValue =  _blCurState;
     d10:	1b a5       	ldd	r17, Y+43	; 0x2b
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
     d12:	88 a1       	ldd	r24, Y+32	; 0x20
     d14:	88 23       	and	r24, r24
     d16:	09 f4       	brne	.+2      	; 0xd1a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x24>
     d18:	f6 c0       	rjmp	.+492    	; 0xf06 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
     d1a:	89 a1       	ldd	r24, Y+33	; 0x21
     d1c:	88 23       	and	r24, r24
     d1e:	09 f4       	brne	.+2      	; 0xd22 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x2c>
     d20:	f2 c0       	rjmp	.+484    	; 0xf06 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
		return(hd44780::RV_ENXIO);

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
     d22:	82 30       	cpi	r24, 0x02	; 2
     d24:	09 f4       	brne	.+2      	; 0xd28 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x32>
     d26:	f1 c0       	rjmp	.+482    	; 0xf0a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
	{
		return(hd44780::RV_ENOTSUP);
	}

	// check if reads supported
	if(!_rw)
     d28:	8b a1       	ldd	r24, Y+35	; 0x23
     d2a:	88 23       	and	r24, r24
     d2c:	09 f4       	brne	.+2      	; 0xd30 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x3a>
     d2e:	ed c0       	rjmp	.+474    	; 0xf0a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
     d30:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
     d32:	8c 8c       	ldd	r8, Y+28	; 0x1c
     d34:	9d 8c       	ldd	r9, Y+29	; 0x1d
     d36:	ae 8c       	ldd	r10, Y+30	; 0x1e
     d38:	bf 8c       	ldd	r11, Y+31	; 0x1f
     d3a:	c8 8c       	ldd	r12, Y+24	; 0x18
     d3c:	d9 8c       	ldd	r13, Y+25	; 0x19
     d3e:	ea 8c       	ldd	r14, Y+26	; 0x1a
     d40:	fb 8c       	ldd	r15, Y+27	; 0x1b
     d42:	8d e2       	ldi	r24, 0x2D	; 45
     d44:	c8 1a       	sub	r12, r24
     d46:	d1 08       	sbc	r13, r1
     d48:	e1 08       	sbc	r14, r1
     d4a:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
     d4c:	0e 94 20 17 	call	0x2e40	; 0x2e40 <micros>
     d50:	dc 01       	movw	r26, r24
     d52:	cb 01       	movw	r24, r22
     d54:	8c 19       	sub	r24, r12
     d56:	9d 09       	sbc	r25, r13
     d58:	ae 09       	sbc	r26, r14
     d5a:	bf 09       	sbc	r27, r15
     d5c:	88 15       	cp	r24, r8
     d5e:	99 05       	cpc	r25, r9
     d60:	aa 05       	cpc	r26, r10
     d62:	bb 05       	cpc	r27, r11
     d64:	98 f3       	brcs	.-26     	; 0xd4c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x56>
     d66:	8d a1       	ldd	r24, Y+37	; 0x25
     d68:	18 2b       	or	r17, r24
     d6a:	8e a1       	ldd	r24, Y+38	; 0x26
     d6c:	18 2b       	or	r17, r24
     d6e:	8f a1       	ldd	r24, Y+39	; 0x27
     d70:	18 2b       	or	r17, r24
   
	// put all the expander LCD data pins into input mode.
	// PCF8574 psuedo inputs use pullups so setting them to 1
	// makes them suitible for inputs.

	gpioValue |= _d4|_d5|_d6|_d7;
     d72:	88 a5       	ldd	r24, Y+40	; 0x28
     d74:	18 2b       	or	r17, r24

	// set RS based on type of read (data or status/cmd)
	if(type == hd44780::HD44780_IOdata) 
     d76:	01 30       	cpi	r16, 0x01	; 1
     d78:	11 f4       	brne	.+4      	; 0xd7e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x88>
	{
		gpioValue |= _rs; // RS high to read data reg
     d7a:	8a a1       	ldd	r24, Y+34	; 0x22
     d7c:	18 2b       	or	r17, r24
	}

	gpioValue |= _rw; // r/w high for reading
     d7e:	8b a1       	ldd	r24, Y+35	; 0x23
     d80:	18 2b       	or	r17, r24

	// write all the bits to the expander port
	
	Wire.beginTransmission(_addr);
     d82:	68 a1       	ldd	r22, Y+32	; 0x20
     d84:	8d e8       	ldi	r24, 0x8D	; 141
     d86:	93 e0       	ldi	r25, 0x03	; 3
     d88:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue);		// d4-d7 are inputs, RS, r/w high, E LOW
     d8c:	61 2f       	mov	r22, r17
     d8e:	8d e8       	ldi	r24, 0x8D	; 141
     d90:	93 e0       	ldi	r25, 0x03	; 3
     d92:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     d96:	8d e8       	ldi	r24, 0x8D	; 141
     d98:	93 e0       	ldi	r25, 0x03	; 3
     d9a:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN7TwoWire15endTransmissionEv>
     d9e:	88 23       	and	r24, r24
     da0:	19 f0       	breq	.+6      	; 0xda8 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xb2>
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;
     da2:	0f ef       	ldi	r16, 0xFF	; 255
     da4:	1f ef       	ldi	r17, 0xFF	; 255
     da6:	9d c0       	rjmp	.+314    	; 0xee2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ec>
	if(Wire.endTransmission())
		goto returnStatus;


	// raise E to read the data.
	Wire.beginTransmission(_addr);
     da8:	68 a1       	ldd	r22, Y+32	; 0x20
     daa:	8d e8       	ldi	r24, 0x8D	; 141
     dac:	93 e0       	ldi	r25, 0x03	; 3
     dae:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raises E 
     db2:	6c a1       	ldd	r22, Y+36	; 0x24
     db4:	61 2b       	or	r22, r17
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	8d e8       	ldi	r24, 0x8D	; 141
     dba:	93 e0       	ldi	r25, 0x03	; 3
     dbc:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
     dc0:	8d e8       	ldi	r24, 0x8D	; 141
     dc2:	93 e0       	ldi	r25, 0x03	; 3
     dc4:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN7TwoWire15endTransmissionEv>
     dc8:	81 11       	cpse	r24, r1
     dca:	eb cf       	rjmp	.-42     	; 0xda2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// read the expander port to get the upper nibble of the byte
	Wire.requestFrom((int)_addr, 1);
     dcc:	68 a1       	ldd	r22, Y+32	; 0x20
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	41 e0       	ldi	r20, 0x01	; 1
     dd2:	50 e0       	ldi	r21, 0x00	; 0
     dd4:	8d e8       	ldi	r24, 0x8D	; 141
     dd6:	93 e0       	ldi	r25, 0x03	; 3
     dd8:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <_ZN7TwoWire11requestFromEii>
	iodata = Wire.read();
     ddc:	8d e8       	ldi	r24, 0x8D	; 141
     dde:	93 e0       	ldi	r25, 0x03	; 3
     de0:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <_ZN7TwoWire4readEv>
     de4:	7c 01       	movw	r14, r24
	if(iodata < 0) // did we not receive a byte?
     de6:	97 fd       	sbrc	r25, 7
     de8:	dc cf       	rjmp	.-72     	; 0xda2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
     dea:	68 a1       	ldd	r22, Y+32	; 0x20
     dec:	8d e8       	ldi	r24, 0x8D	; 141
     dee:	93 e0       	ldi	r25, 0x03	; 3
     df0:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
     df4:	61 2f       	mov	r22, r17
     df6:	8d e8       	ldi	r24, 0x8D	; 141
     df8:	93 e0       	ldi	r25, 0x03	; 3
     dfa:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     dfe:	8d e8       	ldi	r24, 0x8D	; 141
     e00:	93 e0       	ldi	r25, 0x03	; 3
     e02:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN7TwoWire15endTransmissionEv>
     e06:	81 11       	cpse	r24, r1
     e08:	cc cf       	rjmp	.-104    	; 0xda2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
     e0a:	8d a1       	ldd	r24, Y+37	; 0x25
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	8e 21       	and	r24, r14
     e10:	9f 21       	and	r25, r15
     e12:	89 2b       	or	r24, r25
     e14:	11 f4       	brne	.+4      	; 0xe1a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x124>
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
     e16:	00 e0       	ldi	r16, 0x00	; 0
     e18:	01 c0       	rjmp	.+2      	; 0xe1c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x126>
	if(Wire.endTransmission())
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
		data |= (1 << 4);
     e1a:	00 e1       	ldi	r16, 0x10	; 16

	if(iodata & _d5)
     e1c:	8e a1       	ldd	r24, Y+38	; 0x26
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	8e 21       	and	r24, r14
     e22:	9f 21       	and	r25, r15
     e24:	89 2b       	or	r24, r25
     e26:	09 f0       	breq	.+2      	; 0xe2a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x134>
		data |= (1 << 5);
     e28:	00 62       	ori	r16, 0x20	; 32

	if(iodata & _d6)
     e2a:	8f a1       	ldd	r24, Y+39	; 0x27
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	8e 21       	and	r24, r14
     e30:	9f 21       	and	r25, r15
     e32:	89 2b       	or	r24, r25
     e34:	09 f0       	breq	.+2      	; 0xe38 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x142>
		data |= (1 << 6);
     e36:	00 64       	ori	r16, 0x40	; 64

	if(iodata & _d7)
     e38:	88 a5       	ldd	r24, Y+40	; 0x28
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	e8 22       	and	r14, r24
     e3e:	f9 22       	and	r15, r25
     e40:	ef 28       	or	r14, r15
     e42:	09 f0       	breq	.+2      	; 0xe46 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x150>
		data |= (1 << 7);
     e44:	00 68       	ori	r16, 0x80	; 128
	
	Wire.beginTransmission(_addr);
     e46:	68 a1       	ldd	r22, Y+32	; 0x20
     e48:	8d e8       	ldi	r24, 0x8D	; 141
     e4a:	93 e0       	ldi	r25, 0x03	; 3
     e4c:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raise E to read next nibble
     e50:	6c a1       	ldd	r22, Y+36	; 0x24
     e52:	61 2b       	or	r22, r17
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	8d e8       	ldi	r24, 0x8D	; 141
     e58:	93 e0       	ldi	r25, 0x03	; 3
     e5a:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
     e5e:	8d e8       	ldi	r24, 0x8D	; 141
     e60:	93 e0       	ldi	r25, 0x03	; 3
     e62:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN7TwoWire15endTransmissionEv>
     e66:	81 11       	cpse	r24, r1
     e68:	9c cf       	rjmp	.-200    	; 0xda2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>

	// read the expander port to get the lower nibble of the byte
	// We can't look at the return value from requestFrom() on the TineyWireM
	// library as it doesn't work like it is supposed to.
	// So we look at the return status from read() instead.
	Wire.requestFrom((int)_addr, 1);
     e6a:	68 a1       	ldd	r22, Y+32	; 0x20
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	41 e0       	ldi	r20, 0x01	; 1
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	8d e8       	ldi	r24, 0x8D	; 141
     e74:	93 e0       	ldi	r25, 0x03	; 3
     e76:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <_ZN7TwoWire11requestFromEii>

	iodata = Wire.read();
     e7a:	8d e8       	ldi	r24, 0x8D	; 141
     e7c:	93 e0       	ldi	r25, 0x03	; 3
     e7e:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <_ZN7TwoWire4readEv>
     e82:	7c 01       	movw	r14, r24

	if(iodata < 0) // did we not receive a byte?
     e84:	97 fd       	sbrc	r25, 7
     e86:	8d cf       	rjmp	.-230    	; 0xda2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
     e88:	68 a1       	ldd	r22, Y+32	; 0x20
     e8a:	8d e8       	ldi	r24, 0x8D	; 141
     e8c:	93 e0       	ldi	r25, 0x03	; 3
     e8e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
     e92:	61 2f       	mov	r22, r17
     e94:	8d e8       	ldi	r24, 0x8D	; 141
     e96:	93 e0       	ldi	r25, 0x03	; 3
     e98:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     e9c:	8d e8       	ldi	r24, 0x8D	; 141
     e9e:	93 e0       	ldi	r25, 0x03	; 3
     ea0:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN7TwoWire15endTransmissionEv>
     ea4:	81 11       	cpse	r24, r1
     ea6:	7d cf       	rjmp	.-262    	; 0xda2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into lower nibble of byte
	if(iodata & _d4)
     ea8:	8d a1       	ldd	r24, Y+37	; 0x25
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	8e 21       	and	r24, r14
     eae:	9f 21       	and	r25, r15
     eb0:	89 2b       	or	r24, r25
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1c0>
		data |= (1 << 0);
     eb4:	01 60       	ori	r16, 0x01	; 1

	if(iodata & _d5)
     eb6:	8e a1       	ldd	r24, Y+38	; 0x26
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	8e 21       	and	r24, r14
     ebc:	9f 21       	and	r25, r15
     ebe:	89 2b       	or	r24, r25
     ec0:	09 f0       	breq	.+2      	; 0xec4 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ce>
		data |= (1 << 1);
     ec2:	02 60       	ori	r16, 0x02	; 2

	if(iodata & _d6)
     ec4:	8f a1       	ldd	r24, Y+39	; 0x27
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	8e 21       	and	r24, r14
     eca:	9f 21       	and	r25, r15
     ecc:	89 2b       	or	r24, r25
     ece:	09 f0       	breq	.+2      	; 0xed2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1dc>
		data |= (1 << 2);
     ed0:	04 60       	ori	r16, 0x04	; 4

	if(iodata & _d7)
     ed2:	88 a5       	ldd	r24, Y+40	; 0x28
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	e8 22       	and	r14, r24
     ed8:	f9 22       	and	r15, r25
     eda:	ef 28       	or	r14, r15
     edc:	09 f0       	breq	.+2      	; 0xee0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ea>
		data |= (1 << 3);
     ede:	08 60       	ori	r16, 0x08	; 8

	rval = data;
     ee0:	10 e0       	ldi	r17, 0x00	; 0

returnStatus:

	// try to put gpio port back to all outputs state with WR signal low for writes
	Wire.beginTransmission(_addr);
     ee2:	68 a1       	ldd	r22, Y+32	; 0x20
     ee4:	8d e8       	ldi	r24, 0x8D	; 141
     ee6:	93 e0       	ldi	r25, 0x03	; 3
     ee8:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(_blCurState);		// with E LOW
     eec:	6b a5       	ldd	r22, Y+43	; 0x2b
     eee:	8d e8       	ldi	r24, 0x8D	; 141
     ef0:	93 e0       	ldi	r25, 0x03	; 3
     ef2:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     ef6:	8d e8       	ldi	r24, 0x8D	; 141
     ef8:	93 e0       	ldi	r25, 0x03	; 3
     efa:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN7TwoWire15endTransmissionEv>
     efe:	88 23       	and	r24, r24
     f00:	39 f0       	breq	.+14     	; 0xf10 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21a>
		rval = hd44780::RV_EIO;
     f02:	8f ef       	ldi	r24, 0xFF	; 255
     f04:	03 c0       	rjmp	.+6      	; 0xf0c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
     f06:	8c ef       	ldi	r24, 0xFC	; 252
     f08:	01 c0       	rjmp	.+2      	; 0xf0c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
	{
		return(hd44780::RV_ENOTSUP);
     f0a:	8d ef       	ldi	r24, 0xFD	; 253
     f0c:	9f ef       	ldi	r25, 0xFF	; 255
     f0e:	01 c0       	rjmp	.+2      	; 0xf12 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21c>
     f10:	c8 01       	movw	r24, r16
	Wire.write(_blCurState);		// with E LOW
	if(Wire.endTransmission())
		rval = hd44780::RV_EIO;

	return(rval);
}
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	1f 91       	pop	r17
     f18:	0f 91       	pop	r16
     f1a:	ff 90       	pop	r15
     f1c:	ef 90       	pop	r14
     f1e:	df 90       	pop	r13
     f20:	cf 90       	pop	r12
     f22:	bf 90       	pop	r11
     f24:	af 90       	pop	r10
     f26:	9f 90       	pop	r9
     f28:	8f 90       	pop	r8
     f2a:	08 95       	ret

00000f2c <_ZN14hd44780_I2Cexp11autocfg8574Ev>:
 * a new resistor to  connect to the base of the transistor.
 * 
 * As a result the SYDZ backpack cannot use autoconfiguration.
 */

int autocfg8574()
     f2c:	0f 93       	push	r16
     f2e:	1f 93       	push	r17
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	ec 01       	movw	r28, r24
uint8_t data, data2;
uint8_t rs, rw, en, d4, d5, d6, d7, bl, blLevel;

	// First put a 0xff in the output port

	Wire.beginTransmission(_addr);
     f36:	68 a1       	ldd	r22, Y+32	; 0x20
     f38:	8d e8       	ldi	r24, 0x8D	; 141
     f3a:	93 e0       	ldi	r25, 0x03	; 3
     f3c:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0xff);
     f40:	6f ef       	ldi	r22, 0xFF	; 255
     f42:	8d e8       	ldi	r24, 0x8D	; 141
     f44:	93 e0       	ldi	r25, 0x03	; 3
     f46:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
     f4a:	8d e8       	ldi	r24, 0x8D	; 141
     f4c:	93 e0       	ldi	r25, 0x03	; 3
     f4e:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN7TwoWire15endTransmissionEv>

	// now read back from the port

	Wire.requestFrom((int)_addr, 1);
     f52:	68 a1       	ldd	r22, Y+32	; 0x20
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	41 e0       	ldi	r20, 0x01	; 1
     f58:	50 e0       	ldi	r21, 0x00	; 0
     f5a:	8d e8       	ldi	r24, 0x8D	; 141
     f5c:	93 e0       	ldi	r25, 0x03	; 3
     f5e:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
     f62:	8d e8       	ldi	r24, 0x8D	; 141
     f64:	93 e0       	ldi	r25, 0x03	; 3
     f66:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <_ZN7TwoWire4readEv>
     f6a:	8c 01       	movw	r16, r24

	// Turn off bit2 to attempt to see if en is bit 2,
	// if it is, it should change all lcd data bits to 1s
	
	Wire.beginTransmission(_addr);
     f6c:	68 a1       	ldd	r22, Y+32	; 0x20
     f6e:	8d e8       	ldi	r24, 0x8D	; 141
     f70:	93 e0       	ldi	r25, 0x03	; 3
     f72:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) (~(1 << 2)) );
     f76:	6b ef       	ldi	r22, 0xFB	; 251
     f78:	8d e8       	ldi	r24, 0x8D	; 141
     f7a:	93 e0       	ldi	r25, 0x03	; 3
     f7c:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
     f80:	8d e8       	ldi	r24, 0x8D	; 141
     f82:	93 e0       	ldi	r25, 0x03	; 3
     f84:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN7TwoWire15endTransmissionEv>

	// read back data
	Wire.requestFrom((int)_addr, 1);
     f88:	68 a1       	ldd	r22, Y+32	; 0x20
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	41 e0       	ldi	r20, 0x01	; 1
     f8e:	50 e0       	ldi	r21, 0x00	; 0
     f90:	8d e8       	ldi	r24, 0x8D	; 141
     f92:	93 e0       	ldi	r25, 0x03	; 3
     f94:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <_ZN7TwoWire11requestFromEii>
	data2 = Wire.read();
     f98:	8d e8       	ldi	r24, 0x8D	; 141
     f9a:	93 e0       	ldi	r25, 0x03	; 3
     f9c:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <_ZN7TwoWire4readEv>

	// If lower 3 bits are high and all 4 upper bits are high after clearing bit 2
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
     fa0:	98 01       	movw	r18, r16
     fa2:	27 70       	andi	r18, 0x07	; 7
     fa4:	33 27       	eor	r19, r19
     fa6:	27 30       	cpi	r18, 0x07	; 7
     fa8:	31 05       	cpc	r19, r1
     faa:	b1 f4       	brne	.+44     	; 0xfd8 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
     fac:	80 7f       	andi	r24, 0xF0	; 240
     fae:	99 27       	eor	r25, r25
     fb0:	80 3f       	cpi	r24, 0xF0	; 240
     fb2:	91 05       	cpc	r25, r1
     fb4:	89 f4       	brne	.+34     	; 0xfd8 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
     fb6:	83 e0       	ldi	r24, 0x03	; 3
     fb8:	16 95       	lsr	r17
     fba:	07 95       	ror	r16
     fbc:	8a 95       	dec	r24
     fbe:	e1 f7       	brne	.-8      	; 0xfb8 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x8c>
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	08 27       	eor	r16, r24
     fc4:	01 70       	andi	r16, 0x01	; 1
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
	{
		rs = 0; rw = 1; en = 2; d4 = 4; d5 = 5; d6 = 6; d7 = 7; bl = 3;
     fc6:	43 e0       	ldi	r20, 0x03	; 3
     fc8:	57 e0       	ldi	r21, 0x07	; 7
     fca:	66 e0       	ldi	r22, 0x06	; 6
     fcc:	75 e0       	ldi	r23, 0x05	; 5
     fce:	e4 e0       	ldi	r30, 0x04	; 4
     fd0:	22 e0       	ldi	r18, 0x02	; 2
     fd2:	f1 e0       	ldi	r31, 0x01	; 1
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	34 c0       	rjmp	.+104    	; 0x1040 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x114>
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
		}
	}
	else if((data & 0x70) == 0x70)
     fd8:	c8 01       	movw	r24, r16
     fda:	80 77       	andi	r24, 0x70	; 112
     fdc:	99 27       	eor	r25, r25
     fde:	80 37       	cpi	r24, 0x70	; 112
     fe0:	91 05       	cpc	r25, r1
     fe2:	09 f0       	breq	.+2      	; 0xfe6 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xba>
     fe4:	68 c0       	rjmp	.+208    	; 0x10b6 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18a>
		// both use bit 7 for backlight control

		// Turn off the en bit which should change the data bits
		// bit 4 on the mjkdz is en so we try that bit
	
		Wire.beginTransmission(_addr);
     fe6:	68 a1       	ldd	r22, Y+32	; 0x20
     fe8:	8d e8       	ldi	r24, 0x8D	; 141
     fea:	93 e0       	ldi	r25, 0x03	; 3
     fec:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t) (~(1 << 4)) );
     ff0:	6f ee       	ldi	r22, 0xEF	; 239
     ff2:	8d e8       	ldi	r24, 0x8D	; 141
     ff4:	93 e0       	ldi	r25, 0x03	; 3
     ff6:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
     ffa:	8d e8       	ldi	r24, 0x8D	; 141
     ffc:	93 e0       	ldi	r25, 0x03	; 3
     ffe:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN7TwoWire15endTransmissionEv>

		// read back data
		Wire.requestFrom((int)_addr, 1);
    1002:	68 a1       	ldd	r22, Y+32	; 0x20
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	41 e0       	ldi	r20, 0x01	; 1
    1008:	50 e0       	ldi	r21, 0x00	; 0
    100a:	8d e8       	ldi	r24, 0x8D	; 141
    100c:	93 e0       	ldi	r25, 0x03	; 3
    100e:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <_ZN7TwoWire11requestFromEii>
		data2 = Wire.read();
    1012:	8d e8       	ldi	r24, 0x8D	; 141
    1014:	93 e0       	ldi	r25, 0x03	; 3
    1016:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <_ZN7TwoWire4readEv>
		// look at data bits and see if they changed
		// if they changed to 0xf, then en was bit 4 and it is mjdkz
		// this will happen since when E is low the LCD is not
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
    101a:	8f 70       	andi	r24, 0x0F	; 15
    101c:	99 27       	eor	r25, r25
    101e:	0f 97       	sbiw	r24, 0x0f	; 15
    1020:	19 f0       	breq	.+6      	; 0x1028 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xfc>
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
		}
		else
		{
			// electrofun LCDXIO
			rs = 4; rw = 5; en = 6; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
    1022:	26 e0       	ldi	r18, 0x06	; 6
    1024:	34 e0       	ldi	r19, 0x04	; 4
    1026:	02 c0       	rjmp	.+4      	; 0x102c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x100>
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
		{
			// mjkdz
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
    1028:	24 e0       	ldi	r18, 0x04	; 4
    102a:	36 e0       	ldi	r19, 0x06	; 6
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
    102c:	00 95       	com	r16
    102e:	00 1f       	adc	r16, r16
    1030:	00 27       	eor	r16, r16
    1032:	00 1f       	adc	r16, r16
    1034:	47 e0       	ldi	r20, 0x07	; 7
    1036:	53 e0       	ldi	r21, 0x03	; 3
    1038:	62 e0       	ldi	r22, 0x02	; 2
    103a:	71 e0       	ldi	r23, 0x01	; 1
    103c:	e0 e0       	ldi	r30, 0x00	; 0
    103e:	f5 e0       	ldi	r31, 0x05	; 5
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	dc 01       	movw	r26, r24
    1046:	01 c0       	rjmp	.+2      	; 0x104a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11e>
    1048:	aa 0f       	add	r26, r26
    104a:	3a 95       	dec	r19
    104c:	ea f7       	brpl	.-6      	; 0x1048 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11c>
    104e:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
    1050:	dc 01       	movw	r26, r24
    1052:	01 c0       	rjmp	.+2      	; 0x1056 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x12a>
    1054:	aa 0f       	add	r26, r26
    1056:	fa 95       	dec	r31
    1058:	ea f7       	brpl	.-6      	; 0x1054 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x128>
    105a:	ab a3       	std	Y+35, r26	; 0x23
	else
		_rw = 0; // no r/w control

	_en = ( 1 << en );
    105c:	dc 01       	movw	r26, r24
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x138>
    1060:	aa 0f       	add	r26, r26
    1062:	bb 1f       	adc	r27, r27
    1064:	2a 95       	dec	r18
    1066:	e2 f7       	brpl	.-8      	; 0x1060 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x134>
    1068:	ac a3       	std	Y+36, r26	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
    106a:	9c 01       	movw	r18, r24
    106c:	01 c0       	rjmp	.+2      	; 0x1070 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x144>
    106e:	22 0f       	add	r18, r18
    1070:	ea 95       	dec	r30
    1072:	ea f7       	brpl	.-6      	; 0x106e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x142>
    1074:	2d a3       	std	Y+37, r18	; 0x25
	_d5 = ( 1 << d5 );
    1076:	9c 01       	movw	r18, r24
    1078:	01 c0       	rjmp	.+2      	; 0x107c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x150>
    107a:	22 0f       	add	r18, r18
    107c:	7a 95       	dec	r23
    107e:	ea f7       	brpl	.-6      	; 0x107a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x14e>
    1080:	2e a3       	std	Y+38, r18	; 0x26
	_d6 = ( 1 << d6 );
    1082:	9c 01       	movw	r18, r24
    1084:	01 c0       	rjmp	.+2      	; 0x1088 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15c>
    1086:	22 0f       	add	r18, r18
    1088:	6a 95       	dec	r22
    108a:	ea f7       	brpl	.-6      	; 0x1086 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15a>
    108c:	2f a3       	std	Y+39, r18	; 0x27
	_d7 = ( 1 << d7 );   
    108e:	9c 01       	movw	r18, r24
    1090:	01 c0       	rjmp	.+2      	; 0x1094 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x168>
    1092:	22 0f       	add	r18, r18
    1094:	5a 95       	dec	r21
    1096:	ea f7       	brpl	.-6      	; 0x1092 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x166>
    1098:	28 a7       	std	Y+40, r18	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
    109a:	01 c0       	rjmp	.+2      	; 0x109e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x172>
    109c:	88 0f       	add	r24, r24
    109e:	4a 95       	dec	r20
    10a0:	ea f7       	brpl	.-6      	; 0x109c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x170>
    10a2:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
    10a4:	0a a7       	std	Y+42, r16	; 0x2a
	// set default bl state to backlight on
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
    10a6:	01 30       	cpi	r16, 0x01	; 1
    10a8:	11 f4       	brne	.+4      	; 0x10ae <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x182>
		_blCurState = _bl;
    10aa:	8b a7       	std	Y+43, r24	; 0x2b
    10ac:	01 c0       	rjmp	.+2      	; 0x10b0 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x184>
	else
		_blCurState = 0;
    10ae:	1b a6       	std	Y+43, r1	; 0x2b
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18e>
		}
	}
	else
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
    10b6:	8d ef       	ldi	r24, 0xFD	; 253
    10b8:	9f ef       	ldi	r25, 0xFF	; 255
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	1f 91       	pop	r17
    10c0:	0f 91       	pop	r16
    10c2:	08 95       	ret

000010c4 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>:
 * if GP1 is low then the board is the BOARD_XXX board
 * The BOARD_XXX may not work as GP1 is used for D5 on WIDEHK and LCDPLUG
 *
 *
 */
int autocfgMCP23008()
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	ec 01       	movw	r28, r24

	/*
	 * Now set up output port
	 * Make no assumptions as to the state of IOCON BYTE mode
	 */
	Wire.beginTransmission(_addr);
    10ca:	68 a1       	ldd	r22, Y+32	; 0x20
    10cc:	8d e8       	ldi	r24, 0x8D	; 141
    10ce:	93 e0       	ldi	r25, 0x03	; 3
    10d0:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t)0); // point to IODIR
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	8d e8       	ldi	r24, 0x8D	; 141
    10d8:	93 e0       	ldi	r25, 0x03	; 3
    10da:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <_ZN7TwoWire5writeEh>
	Wire.write(0xff); // all pins inputs
    10de:	6f ef       	ldi	r22, 0xFF	; 255
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	8d e8       	ldi	r24, 0x8D	; 141
    10e4:	93 e0       	ldi	r25, 0x03	; 3
    10e6:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    10ea:	8d e8       	ldi	r24, 0x8D	; 141
    10ec:	93 e0       	ldi	r25, 0x03	; 3
    10ee:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN7TwoWire15endTransmissionEv>

	Wire.beginTransmission(_addr);
    10f2:	68 a1       	ldd	r22, Y+32	; 0x20
    10f4:	8d e8       	ldi	r24, 0x8D	; 141
    10f6:	93 e0       	ldi	r25, 0x03	; 3
    10f8:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(6); // point to GPPU
    10fc:	66 e0       	ldi	r22, 0x06	; 6
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	8d e8       	ldi	r24, 0x8D	; 141
    1102:	93 e0       	ldi	r25, 0x03	; 3
    1104:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7TwoWire5writeEi>
	Wire.write(0xff); // turn on pullups
    1108:	6f ef       	ldi	r22, 0xFF	; 255
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	8d e8       	ldi	r24, 0x8D	; 141
    110e:	93 e0       	ldi	r25, 0x03	; 3
    1110:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    1114:	8d e8       	ldi	r24, 0x8D	; 141
    1116:	93 e0       	ldi	r25, 0x03	; 3
    1118:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN7TwoWire15endTransmissionEv>

	/*
	 * read from the GPIO port
	 */

	Wire.beginTransmission(_addr);
    111c:	68 a1       	ldd	r22, Y+32	; 0x20
    111e:	8d e8       	ldi	r24, 0x8D	; 141
    1120:	93 e0       	ldi	r25, 0x03	; 3
    1122:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(9); // point to GPIO
    1126:	69 e0       	ldi	r22, 0x09	; 9
    1128:	70 e0       	ldi	r23, 0x00	; 0
    112a:	8d e8       	ldi	r24, 0x8D	; 141
    112c:	93 e0       	ldi	r25, 0x03	; 3
    112e:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    1132:	8d e8       	ldi	r24, 0x8D	; 141
    1134:	93 e0       	ldi	r25, 0x03	; 3
    1136:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom((int)_addr, 1);
    113a:	68 a1       	ldd	r22, Y+32	; 0x20
    113c:	70 e0       	ldi	r23, 0x00	; 0
    113e:	41 e0       	ldi	r20, 0x01	; 1
    1140:	50 e0       	ldi	r21, 0x00	; 0
    1142:	8d e8       	ldi	r24, 0x8D	; 141
    1144:	93 e0       	ldi	r25, 0x03	; 3
    1146:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    114a:	8d e8       	ldi	r24, 0x8D	; 141
    114c:	93 e0       	ldi	r25, 0x03	; 3
    114e:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <_ZN7TwoWire4readEv>

	blLevel = HIGH; // known boards are active HIGH bl

	if(data == 0x7f) // bit 7 low, and other control and data lines high
    1152:	8f 37       	cpi	r24, 0x7F	; 127
    1154:	61 f0       	breq	.+24     	; 0x116e <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xaa>
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
    1156:	86 ff       	sbrs	r24, 6
    1158:	12 c0       	rjmp	.+36     	; 0x117e <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xba>
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
    115a:	81 fd       	sbrc	r24, 1
    115c:	4c c0       	rjmp	.+152    	; 0x11f6 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x132>
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
		bl = 1;
    115e:	21 e0       	ldi	r18, 0x01	; 1
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
    1160:	32 e0       	ldi	r19, 0x02	; 2
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
    1162:	43 e0       	ldi	r20, 0x03	; 3
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
    1164:	54 e0       	ldi	r21, 0x04	; 4
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
    1166:	65 e0       	ldi	r22, 0x05	; 5
	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
    1168:	76 e0       	ldi	r23, 0x06	; 6
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
    116a:	e7 e0       	ldi	r30, 0x07	; 7
    116c:	0f c0       	rjmp	.+30     	; 0x118c <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;
    116e:	27 e0       	ldi	r18, 0x07	; 7
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
    1170:	36 e0       	ldi	r19, 0x06	; 6
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
    1172:	45 e0       	ldi	r20, 0x05	; 5
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
    1174:	54 e0       	ldi	r21, 0x04	; 4
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
    1176:	63 e0       	ldi	r22, 0x03	; 3
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
    1178:	72 e0       	ldi	r23, 0x02	; 2

	if(data == 0x7f) // bit 7 low, and other control and data lines high
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
    117a:	e1 e0       	ldi	r30, 0x01	; 1
    117c:	07 c0       	rjmp	.+14     	; 0x118c <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;
    117e:	26 e0       	ldi	r18, 0x06	; 6
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
    1180:	33 e0       	ldi	r19, 0x03	; 3
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
    1182:	42 e0       	ldi	r20, 0x02	; 2
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
    1184:	51 e0       	ldi	r21, 0x01	; 1
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
    1186:	60 e0       	ldi	r22, 0x00	; 0
	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
    1188:	77 e0       	ldi	r23, 0x07	; 7
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
    118a:	e4 e0       	ldi	r30, 0x04	; 4
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	dc 01       	movw	r26, r24
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd4>
    1194:	aa 0f       	add	r26, r26
    1196:	bb 1f       	adc	r27, r27
    1198:	ea 95       	dec	r30
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd0>
    119c:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
	else
		_rw = 0; // no r/w control
    119e:	1b a2       	std	Y+35, r1	; 0x23

	_en = ( 1 << en );
    11a0:	fc 01       	movw	r30, r24
    11a2:	01 c0       	rjmp	.+2      	; 0x11a6 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe2>
    11a4:	ee 0f       	add	r30, r30
    11a6:	7a 95       	dec	r23
    11a8:	ea f7       	brpl	.-6      	; 0x11a4 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe0>
    11aa:	ec a3       	std	Y+36, r30	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
    11ac:	fc 01       	movw	r30, r24
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xf0>
    11b0:	ee 0f       	add	r30, r30
    11b2:	ff 1f       	adc	r31, r31
    11b4:	6a 95       	dec	r22
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xec>
    11b8:	ed a3       	std	Y+37, r30	; 0x25
	_d5 = ( 1 << d5 );
    11ba:	bc 01       	movw	r22, r24
    11bc:	01 c0       	rjmp	.+2      	; 0x11c0 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfc>
    11be:	66 0f       	add	r22, r22
    11c0:	5a 95       	dec	r21
    11c2:	ea f7       	brpl	.-6      	; 0x11be <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfa>
    11c4:	6e a3       	std	Y+38, r22	; 0x26
	_d6 = ( 1 << d6 );
    11c6:	bc 01       	movw	r22, r24
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x10a>
    11ca:	66 0f       	add	r22, r22
    11cc:	77 1f       	adc	r23, r23
    11ce:	4a 95       	dec	r20
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x106>
    11d2:	6f a3       	std	Y+39, r22	; 0x27
	_d7 = ( 1 << d7 );   
    11d4:	ac 01       	movw	r20, r24
    11d6:	01 c0       	rjmp	.+2      	; 0x11da <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x116>
    11d8:	44 0f       	add	r20, r20
    11da:	3a 95       	dec	r19
    11dc:	ea f7       	brpl	.-6      	; 0x11d8 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x114>
    11de:	48 a7       	std	Y+40, r20	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
    11e0:	01 c0       	rjmp	.+2      	; 0x11e4 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x120>
    11e2:	88 0f       	add	r24, r24
    11e4:	2a 95       	dec	r18
    11e6:	ea f7       	brpl	.-6      	; 0x11e2 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x11e>
    11e8:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
    11ea:	91 e0       	ldi	r25, 0x01	; 1
    11ec:	9a a7       	std	Y+42, r25	; 0x2a
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
		_blCurState = _bl;
    11ee:	8b a7       	std	Y+43, r24	; 0x2b
		// could not identify board
		return(hd44780::RV_ENOTSUP);
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x136>

	}
	else
	{
		// could not identify board
		return(hd44780::RV_ENOTSUP);
    11f6:	8d ef       	ldi	r24, 0xFD	; 253
    11f8:	9f ef       	ldi	r25, 0xFF	; 255
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	08 95       	ret

00001200 <_ZN14hd44780_I2Cexp6ioinitEv>:
// Returns non zero if initialization failed.
//
// can't be used from constructors because not everything is initalized yet.
// (maybe interrupts or other library constructors)
// if Wire library is used in constructor, it will hang.
int ioinit()
    1200:	1f 93       	push	r17
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	ec 01       	movw	r28, r24
	 * I believe that it is unreasonable to require the the user
	 * sketch code to do it, because all that should change between
	 * hd44780 i/o interfaces should be the constructor
	 * So we go ahead and call it here.
	 */
	Wire.begin();
    1208:	8d e8       	ldi	r24, 0x8D	; 141
    120a:	93 e0       	ldi	r25, 0x03	; 3
    120c:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <_ZN7TwoWire5beginEv>

	// auto locate i2c expander and magically detect pin mappings

	if(!_addr) // locate next instance
    1210:	68 a1       	ldd	r22, Y+32	; 0x20
    1212:	61 11       	cpse	r22, r1
    1214:	0a c0       	rjmp	.+20     	; 0x122a <_ZN14hd44780_I2Cexp6ioinitEv+0x2a>
	{
		_addr = LocateDevice(AutoInst++);
    1216:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    121a:	91 e0       	ldi	r25, 0x01	; 1
    121c:	98 0f       	add	r25, r24
    121e:	90 93 1e 03 	sts	0x031E, r25	; 0x80031e <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    1222:	0e 94 9f 01 	call	0x33e	; 0x33e <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
    1226:	88 a3       	std	Y+32, r24	; 0x20
    1228:	0d c0       	rjmp	.+26     	; 0x1244 <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
	}
	else
	{
		// check to see if device at specified address is really there
		Wire.beginTransmission(_addr);
    122a:	8d e8       	ldi	r24, 0x8D	; 141
    122c:	93 e0       	ldi	r25, 0x03	; 3
    122e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN7TwoWire17beginTransmissionEh>
		if(Wire.endTransmission())
    1232:	8d e8       	ldi	r24, 0x8D	; 141
    1234:	93 e0       	ldi	r25, 0x03	; 3
    1236:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN7TwoWire15endTransmissionEv>
    123a:	88 23       	and	r24, r24
    123c:	19 f0       	breq	.+6      	; 0x1244 <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
			return(hd44780::RV_ENXIO);
    123e:	8c ef       	ldi	r24, 0xFC	; 252
    1240:	9f ef       	ldi	r25, 0xFF	; 255
    1242:	a7 c0       	rjmp	.+334    	; 0x1392 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	}

	if(!_addr) // locate next instance
    1244:	88 a1       	ldd	r24, Y+32	; 0x20
    1246:	81 11       	cpse	r24, r1
    1248:	09 c0       	rjmp	.+18     	; 0x125c <_ZN14hd44780_I2Cexp6ioinitEv+0x5c>
		_addr = LocateDevice(AutoInst++);
    124a:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    124e:	91 e0       	ldi	r25, 0x01	; 1
    1250:	98 0f       	add	r25, r24
    1252:	90 93 1e 03 	sts	0x031E, r25	; 0x80031e <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    1256:	0e 94 9f 01 	call	0x33e	; 0x33e <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
    125a:	88 a3       	std	Y+32, r24	; 0x20

	if(!_addr) // if we couldn't locate it, return error
    125c:	18 a1       	ldd	r17, Y+32	; 0x20
    125e:	11 23       	and	r17, r17
    1260:	71 f3       	breq	.-36     	; 0x123e <_ZN14hd44780_I2Cexp6ioinitEv+0x3e>
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
    1262:	89 a1       	ldd	r24, Y+33	; 0x21
    1264:	88 23       	and	r24, r24
    1266:	c1 f1       	breq	.+112    	; 0x12d8 <_ZN14hd44780_I2Cexp6ioinitEv+0xd8>
			return(status);
	}

	// initialize IO expander chip

	Wire.beginTransmission(_addr);
    1268:	68 a1       	ldd	r22, Y+32	; 0x20
    126a:	8d e8       	ldi	r24, 0x8D	; 141
    126c:	93 e0       	ldi	r25, 0x03	; 3
    126e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN7TwoWire17beginTransmissionEh>

	if(_expType == I2Cexp_MCP23008)
    1272:	89 a1       	ldd	r24, Y+33	; 0x21
    1274:	82 30       	cpi	r24, 0x02	; 2
    1276:	09 f0       	breq	.+2      	; 0x127a <_ZN14hd44780_I2Cexp6ioinitEv+0x7a>
    1278:	76 c0       	rjmp	.+236    	; 0x1366 <_ZN14hd44780_I2Cexp6ioinitEv+0x166>
		 * within the same i2c connection by simply sending more bytes.
		 * This is necessary as the code uses back to back writes to perform
		 * the nibble updates as well as the toggling the enable signal.
		 * This methodology offers significant performance gains.
		 */
		Wire.write(5);	// point to IOCON
    127a:	65 e0       	ldi	r22, 0x05	; 5
    127c:	70 e0       	ldi	r23, 0x00	; 0
    127e:	8d e8       	ldi	r24, 0x8D	; 141
    1280:	93 e0       	ldi	r25, 0x03	; 3
    1282:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7TwoWire5writeEi>
		Wire.write(0x20);// disable sequential mode (enables BYTE mode)
    1286:	60 e2       	ldi	r22, 0x20	; 32
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	8d e8       	ldi	r24, 0x8D	; 141
    128c:	93 e0       	ldi	r25, 0x03	; 3
    128e:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    1292:	8d e8       	ldi	r24, 0x8D	; 141
    1294:	93 e0       	ldi	r25, 0x03	; 3
    1296:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN7TwoWire15endTransmissionEv>

		/*
		 * Now set up output port
		 */
		Wire.beginTransmission(_addr);
    129a:	68 a1       	ldd	r22, Y+32	; 0x20
    129c:	8d e8       	ldi	r24, 0x8D	; 141
    129e:	93 e0       	ldi	r25, 0x03	; 3
    12a0:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t)0); // point to IODIR
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	8d e8       	ldi	r24, 0x8D	; 141
    12a8:	93 e0       	ldi	r25, 0x03	; 3
    12aa:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <_ZN7TwoWire5writeEh>
		Wire.write((uint8_t)0); // all pins output
    12ae:	60 e0       	ldi	r22, 0x00	; 0
    12b0:	8d e8       	ldi	r24, 0x8D	; 141
    12b2:	93 e0       	ldi	r25, 0x03	; 3
    12b4:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    12b8:	8d e8       	ldi	r24, 0x8D	; 141
    12ba:	93 e0       	ldi	r25, 0x03	; 3
    12bc:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN7TwoWire15endTransmissionEv>
	
		/*
		 * point chip to GPIO
		 */
		Wire.beginTransmission(_addr);
    12c0:	68 a1       	ldd	r22, Y+32	; 0x20
    12c2:	8d e8       	ldi	r24, 0x8D	; 141
    12c4:	93 e0       	ldi	r25, 0x03	; 3
    12c6:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write(9); // point to GPIO
    12ca:	69 e0       	ldi	r22, 0x09	; 9
    12cc:	70 e0       	ldi	r23, 0x00	; 0
    12ce:	8d e8       	ldi	r24, 0x8D	; 141
    12d0:	93 e0       	ldi	r25, 0x03	; 3
    12d2:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN7TwoWire5writeEi>
    12d6:	47 c0       	rjmp	.+142    	; 0x1366 <_ZN14hd44780_I2Cexp6ioinitEv+0x166>

	/*
	 * First try to write 0xff to MCP23008 IODIR
	 * On a PCF8574 this will end up writing 0 and then ff to output port
	 */
	Wire.beginTransmission(address);
    12d8:	61 2f       	mov	r22, r17
    12da:	8d e8       	ldi	r24, 0x8D	; 141
    12dc:	93 e0       	ldi	r25, 0x03	; 3
    12de:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	8d e8       	ldi	r24, 0x8D	; 141
    12e6:	93 e0       	ldi	r25, 0x03	; 3
    12e8:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <_ZN7TwoWire5writeEh>
	Wire.write((uint8_t) 0xff);	// try to write to MCP23008 IODR
    12ec:	6f ef       	ldi	r22, 0xFF	; 255
    12ee:	8d e8       	ldi	r24, 0x8D	; 141
    12f0:	93 e0       	ldi	r25, 0x03	; 3
    12f2:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    12f6:	8d e8       	ldi	r24, 0x8D	; 141
    12f8:	93 e0       	ldi	r25, 0x03	; 3
    12fa:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now try to point MCP23008 to IODIR for read
	 * On a PCF8574 this will end up writing a 0 to the output port
	 */

	Wire.beginTransmission(address);
    12fe:	61 2f       	mov	r22, r17
    1300:	8d e8       	ldi	r24, 0x8D	; 141
    1302:	93 e0       	ldi	r25, 0x03	; 3
    1304:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
    1308:	60 e0       	ldi	r22, 0x00	; 0
    130a:	8d e8       	ldi	r24, 0x8D	; 141
    130c:	93 e0       	ldi	r25, 0x03	; 3
    130e:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    1312:	8d e8       	ldi	r24, 0x8D	; 141
    1314:	93 e0       	ldi	r25, 0x03	; 3
    1316:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now read a byte
	 * On a MCP23008 we should read the 0xff we wrote to IODIR
	 * On a PCF8574 we should read 0 since the output port was set to 0
	 */
	Wire.requestFrom((int)address, 1);
    131a:	61 2f       	mov	r22, r17
    131c:	70 e0       	ldi	r23, 0x00	; 0
    131e:	41 e0       	ldi	r20, 0x01	; 1
    1320:	50 e0       	ldi	r21, 0x00	; 0
    1322:	8d e8       	ldi	r24, 0x8D	; 141
    1324:	93 e0       	ldi	r25, 0x03	; 3
    1326:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    132a:	8d e8       	ldi	r24, 0x8D	; 141
    132c:	93 e0       	ldi	r25, 0x03	; 3
    132e:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <_ZN7TwoWire4readEv>
    1332:	9c 01       	movw	r18, r24

	if(data == 0xff)
    1334:	8f 3f       	cpi	r24, 0xFF	; 255
    1336:	91 05       	cpc	r25, r1
    1338:	29 f0       	breq	.+10     	; 0x1344 <_ZN14hd44780_I2Cexp6ioinitEv+0x144>
	{
		chiptype = I2Cexp_MCP23008;
    133a:	91 e0       	ldi	r25, 0x01	; 1
    133c:	23 2b       	or	r18, r19
    133e:	19 f0       	breq	.+6      	; 0x1346 <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	01 c0       	rjmp	.+2      	; 0x1346 <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    1344:	92 e0       	ldi	r25, 0x02	; 2
	if(!_addr) // if we couldn't locate it, return error
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);
    1346:	99 a3       	std	Y+33, r25	; 0x21

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
    1348:	99 23       	and	r25, r25
    134a:	09 f1       	breq	.+66     	; 0x138e <_ZN14hd44780_I2Cexp6ioinitEv+0x18e>
			return(hd44780::RV_EIO);

		if(_expType == I2Cexp_PCF8574)
    134c:	91 30       	cpi	r25, 0x01	; 1
    134e:	21 f4       	brne	.+8      	; 0x1358 <_ZN14hd44780_I2Cexp6ioinitEv+0x158>
			status = autocfg8574();		// go auto configure the pin mappings
    1350:	ce 01       	movw	r24, r28
    1352:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN14hd44780_I2Cexp11autocfg8574Ev>
    1356:	03 c0       	rjmp	.+6      	; 0x135e <_ZN14hd44780_I2Cexp6ioinitEv+0x15e>
		else
			status = autocfgMCP23008();	// go auto configure the pin mappings
    1358:	ce 01       	movw	r24, r28
    135a:	0e 94 62 08 	call	0x10c4	; 0x10c4 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>
		if(status)
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	09 f4       	brne	.+2      	; 0x1364 <_ZN14hd44780_I2Cexp6ioinitEv+0x164>
    1362:	82 cf       	rjmp	.-252    	; 0x1268 <_ZN14hd44780_I2Cexp6ioinitEv+0x68>
    1364:	16 c0       	rjmp	.+44     	; 0x1392 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
		 */
		Wire.beginTransmission(_addr);
		Wire.write(9); // point to GPIO
		
	}
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
    1366:	60 e0       	ldi	r22, 0x00	; 0
    1368:	8d e8       	ldi	r24, 0x8D	; 141
    136a:	93 e0       	ldi	r25, 0x03	; 3
    136c:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <_ZN7TwoWire5writeEh>
	if( (status = Wire.endTransmission()) ) // assignment
    1370:	8d e8       	ldi	r24, 0x8D	; 141
    1372:	93 e0       	ldi	r25, 0x03	; 3
    1374:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_ZN7TwoWire15endTransmissionEv>
    1378:	21 e0       	ldi	r18, 0x01	; 1
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	81 11       	cpse	r24, r1
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <_ZN14hd44780_I2Cexp6ioinitEv+0x184>
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	88 27       	eor	r24, r24
    1386:	99 27       	eor	r25, r25
    1388:	82 1b       	sub	r24, r18
    138a:	93 0b       	sbc	r25, r19
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
			return(hd44780::RV_EIO);
    138e:	8f ef       	ldi	r24, 0xFF	; 255
    1390:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
	if( (status = Wire.endTransmission()) ) // assignment
		status = hd44780::RV_EIO;

	return ( status );
}
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	1f 91       	pop	r17
    1398:	08 95       	ret

0000139a <_ZN7hd447806ioinitEv>:
	{
		buf[i] = pgm_read_byte(charmap++);
	}
	// call the RAM based function to actually send it to the LCD
	return(createChar(location, buf));
}
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	08 95       	ret

000013a0 <_ZN7hd447806ioreadENS_6iotypeE>:
    13a0:	8d ef       	ldi	r24, 0xFD	; 253
    13a2:	9f ef       	ldi	r25, 0xFF	; 255
    13a4:	08 95       	ret

000013a6 <_ZN7hd4478014iosetBacklightEh>:
    13a6:	8d ef       	ldi	r24, 0xFD	; 253
    13a8:	9f ef       	ldi	r25, 0xFF	; 255
    13aa:	08 95       	ret

000013ac <_ZN7hd44780C1Ev>:
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	ec 01       	movw	r28, r24
    13b2:	1b 82       	std	Y+3, r1	; 0x03
    13b4:	1a 82       	std	Y+2, r1	; 0x02
    13b6:	88 e0       	ldi	r24, 0x08	; 8
    13b8:	92 e0       	ldi	r25, 0x02	; 2
    13ba:	99 83       	std	Y+1, r25	; 0x01
    13bc:	88 83       	st	Y, r24
    13be:	1f 82       	std	Y+7, r1	; 0x07
    13c0:	18 86       	std	Y+8, r1	; 0x08
    13c2:	80 ed       	ldi	r24, 0xD0	; 208
    13c4:	97 e0       	ldi	r25, 0x07	; 7
    13c6:	a0 e0       	ldi	r26, 0x00	; 0
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	88 8b       	std	Y+16, r24	; 0x10
    13cc:	99 8b       	std	Y+17, r25	; 0x11
    13ce:	aa 8b       	std	Y+18, r26	; 0x12
    13d0:	bb 8b       	std	Y+19, r27	; 0x13
    13d2:	86 e2       	ldi	r24, 0x26	; 38
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	a0 e0       	ldi	r26, 0x00	; 0
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	8c 8b       	std	Y+20, r24	; 0x14
    13dc:	9d 8b       	std	Y+21, r25	; 0x15
    13de:	ae 8b       	std	Y+22, r26	; 0x16
    13e0:	bf 8b       	std	Y+23, r27	; 0x17
    13e2:	1c 86       	std	Y+12, r1	; 0x0c
    13e4:	1d 86       	std	Y+13, r1	; 0x0d
    13e6:	1e 86       	std	Y+14, r1	; 0x0e
    13e8:	1f 86       	std	Y+15, r1	; 0x0f
    13ea:	1b 86       	std	Y+11, r1	; 0x0b
    13ec:	0e 94 20 17 	call	0x2e40	; 0x2e40 <micros>
    13f0:	68 8f       	std	Y+24, r22	; 0x18
    13f2:	79 8f       	std	Y+25, r23	; 0x19
    13f4:	8a 8f       	std	Y+26, r24	; 0x1a
    13f6:	9b 8f       	std	Y+27, r25	; 0x1b
    13f8:	1c 8e       	std	Y+28, r1	; 0x1c
    13fa:	1d 8e       	std	Y+29, r1	; 0x1d
    13fc:	1e 8e       	std	Y+30, r1	; 0x1e
    13fe:	1f 8e       	std	Y+31, r1	; 0x1f
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	08 95       	ret

00001406 <_ZN7hd447809backlightEv>:
    1406:	dc 01       	movw	r26, r24
    1408:	ed 91       	ld	r30, X+
    140a:	fc 91       	ld	r31, X
    140c:	06 84       	ldd	r0, Z+14	; 0x0e
    140e:	f7 85       	ldd	r31, Z+15	; 0x0f
    1410:	e0 2d       	mov	r30, r0
    1412:	6f ef       	ldi	r22, 0xFF	; 255
    1414:	09 94       	ijmp

00001416 <_ZN7hd4478011noBacklightEv>:
    1416:	dc 01       	movw	r26, r24
    1418:	ed 91       	ld	r30, X+
    141a:	fc 91       	ld	r31, X
    141c:	06 84       	ldd	r0, Z+14	; 0x0e
    141e:	f7 85       	ldd	r31, Z+15	; 0x0f
    1420:	e0 2d       	mov	r30, r0
    1422:	60 e0       	ldi	r22, 0x00	; 0
    1424:	09 94       	ijmp

00001426 <_ZN7hd447807commandEh>:
    1426:	8f 92       	push	r8
    1428:	9f 92       	push	r9
    142a:	af 92       	push	r10
    142c:	bf 92       	push	r11
    142e:	ef 92       	push	r14
    1430:	ff 92       	push	r15
    1432:	1f 93       	push	r17
    1434:	cf 93       	push	r28
    1436:	df 93       	push	r29
    1438:	ec 01       	movw	r28, r24
    143a:	16 2f       	mov	r17, r22
    143c:	e8 81       	ld	r30, Y
    143e:	f9 81       	ldd	r31, Y+1	; 0x01
    1440:	04 84       	ldd	r0, Z+12	; 0x0c
    1442:	f5 85       	ldd	r31, Z+13	; 0x0d
    1444:	e0 2d       	mov	r30, r0
    1446:	46 2f       	mov	r20, r22
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	09 95       	icall
    144c:	7c 01       	movw	r14, r24
    144e:	11 50       	subi	r17, 0x01	; 1
    1450:	12 30       	cpi	r17, 0x02	; 2
    1452:	38 f4       	brcc	.+14     	; 0x1462 <_ZN7hd447807commandEh+0x3c>
    1454:	19 86       	std	Y+9, r1	; 0x09
    1456:	1a 86       	std	Y+10, r1	; 0x0a
    1458:	88 88       	ldd	r8, Y+16	; 0x10
    145a:	99 88       	ldd	r9, Y+17	; 0x11
    145c:	aa 88       	ldd	r10, Y+18	; 0x12
    145e:	bb 88       	ldd	r11, Y+19	; 0x13
    1460:	04 c0       	rjmp	.+8      	; 0x146a <_ZN7hd447807commandEh+0x44>
    1462:	8c 88       	ldd	r8, Y+20	; 0x14
    1464:	9d 88       	ldd	r9, Y+21	; 0x15
    1466:	ae 88       	ldd	r10, Y+22	; 0x16
    1468:	bf 88       	ldd	r11, Y+23	; 0x17
    146a:	0e 94 20 17 	call	0x2e40	; 0x2e40 <micros>
    146e:	68 8f       	std	Y+24, r22	; 0x18
    1470:	79 8f       	std	Y+25, r23	; 0x19
    1472:	8a 8f       	std	Y+26, r24	; 0x1a
    1474:	9b 8f       	std	Y+27, r25	; 0x1b
    1476:	8c 8e       	std	Y+28, r8	; 0x1c
    1478:	9d 8e       	std	Y+29, r9	; 0x1d
    147a:	ae 8e       	std	Y+30, r10	; 0x1e
    147c:	bf 8e       	std	Y+31, r11	; 0x1f
    147e:	c7 01       	movw	r24, r14
    1480:	df 91       	pop	r29
    1482:	cf 91       	pop	r28
    1484:	1f 91       	pop	r17
    1486:	ff 90       	pop	r15
    1488:	ef 90       	pop	r14
    148a:	bf 90       	pop	r11
    148c:	af 90       	pop	r10
    148e:	9f 90       	pop	r9
    1490:	8f 90       	pop	r8
    1492:	08 95       	ret

00001494 <_ZN7hd447805clearEv>:
    1494:	61 e0       	ldi	r22, 0x01	; 1
    1496:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <_ZN7hd447807commandEh>

0000149a <_ZN7hd447804homeEv>:
    149a:	62 e0       	ldi	r22, 0x02	; 2
    149c:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <_ZN7hd447807commandEh>

000014a0 <_ZN7hd447809setCursorEhh>:
    14a0:	fc 01       	movw	r30, r24
    14a2:	80 85       	ldd	r24, Z+8	; 0x08
    14a4:	48 17       	cp	r20, r24
    14a6:	10 f0       	brcs	.+4      	; 0x14ac <_ZN7hd447809setCursorEhh+0xc>
    14a8:	4f ef       	ldi	r20, 0xFF	; 255
    14aa:	48 0f       	add	r20, r24
    14ac:	93 85       	ldd	r25, Z+11	; 0x0b
    14ae:	99 23       	and	r25, r25
    14b0:	59 f0       	breq	.+22     	; 0x14c8 <_ZN7hd447809setCursorEhh+0x28>
    14b2:	97 81       	ldd	r25, Z+7	; 0x07
    14b4:	69 17       	cp	r22, r25
    14b6:	30 f0       	brcs	.+12     	; 0x14c4 <_ZN7hd447809setCursorEhh+0x24>
    14b8:	69 1b       	sub	r22, r25
    14ba:	4f 5f       	subi	r20, 0xFF	; 255
    14bc:	48 17       	cp	r20, r24
    14be:	d0 f3       	brcs	.-12     	; 0x14b4 <_ZN7hd447809setCursorEhh+0x14>
    14c0:	40 e0       	ldi	r20, 0x00	; 0
    14c2:	f8 cf       	rjmp	.-16     	; 0x14b4 <_ZN7hd447809setCursorEhh+0x14>
    14c4:	61 87       	std	Z+9, r22	; 0x09
    14c6:	42 87       	std	Z+10, r20	; 0x0a
    14c8:	df 01       	movw	r26, r30
    14ca:	a4 0f       	add	r26, r20
    14cc:	b1 1d       	adc	r27, r1
    14ce:	1c 96       	adiw	r26, 0x0c	; 12
    14d0:	8c 91       	ld	r24, X
    14d2:	68 0f       	add	r22, r24
    14d4:	60 68       	ori	r22, 0x80	; 128
    14d6:	cf 01       	movw	r24, r30
    14d8:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <_ZN7hd447807commandEh>

000014dc <_ZN7hd447807displayEv>:
    14dc:	fc 01       	movw	r30, r24
    14de:	65 81       	ldd	r22, Z+5	; 0x05
    14e0:	26 2f       	mov	r18, r22
    14e2:	24 60       	ori	r18, 0x04	; 4
    14e4:	25 83       	std	Z+5, r18	; 0x05
    14e6:	6c 60       	ori	r22, 0x0C	; 12
    14e8:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <_ZN7hd447807commandEh>

000014ec <_ZN7hd447805beginEhhh>:
    14ec:	0f 93       	push	r16
    14ee:	1f 93       	push	r17
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
    14f4:	ec 01       	movw	r28, r24
    14f6:	02 2f       	mov	r16, r18
    14f8:	14 2f       	mov	r17, r20
    14fa:	45 30       	cpi	r20, 0x05	; 5
    14fc:	08 f0       	brcs	.+2      	; 0x1500 <_ZN7hd447805beginEhhh+0x14>
    14fe:	14 e0       	ldi	r17, 0x04	; 4
    1500:	8c 85       	ldd	r24, Y+12	; 0x0c
    1502:	81 11       	cpse	r24, r1
    1504:	09 c0       	rjmp	.+18     	; 0x1518 <_ZN7hd447805beginEhhh+0x2c>
    1506:	8d 85       	ldd	r24, Y+13	; 0x0d
    1508:	81 11       	cpse	r24, r1
    150a:	06 c0       	rjmp	.+12     	; 0x1518 <_ZN7hd447805beginEhhh+0x2c>
    150c:	8e 85       	ldd	r24, Y+14	; 0x0e
    150e:	81 11       	cpse	r24, r1
    1510:	03 c0       	rjmp	.+6      	; 0x1518 <_ZN7hd447805beginEhhh+0x2c>
    1512:	8f 85       	ldd	r24, Y+15	; 0x0f
    1514:	88 23       	and	r24, r24
    1516:	29 f0       	breq	.+10     	; 0x1522 <_ZN7hd447805beginEhhh+0x36>
    1518:	8f 81       	ldd	r24, Y+7	; 0x07
    151a:	88 23       	and	r24, r24
    151c:	59 f0       	breq	.+22     	; 0x1534 <_ZN7hd447805beginEhhh+0x48>
    151e:	86 17       	cp	r24, r22
    1520:	49 f0       	breq	.+18     	; 0x1534 <_ZN7hd447805beginEhhh+0x48>
    1522:	1c 86       	std	Y+12, r1	; 0x0c
    1524:	80 e4       	ldi	r24, 0x40	; 64
    1526:	8d 87       	std	Y+13, r24	; 0x0d
    1528:	6e 87       	std	Y+14, r22	; 0x0e
    152a:	86 2f       	mov	r24, r22
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	80 5c       	subi	r24, 0xC0	; 192
    1530:	9f 4f       	sbci	r25, 0xFF	; 255
    1532:	8f 87       	std	Y+15, r24	; 0x0f
    1534:	18 87       	std	Y+8, r17	; 0x08
    1536:	6f 83       	std	Y+7, r22	; 0x07
    1538:	64 e6       	ldi	r22, 0x64	; 100
    153a:	70 e0       	ldi	r23, 0x00	; 0
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <delay>
    1544:	1c 82       	std	Y+4, r1	; 0x04
    1546:	e8 81       	ld	r30, Y
    1548:	f9 81       	ldd	r31, Y+1	; 0x01
    154a:	00 84       	ldd	r0, Z+8	; 0x08
    154c:	f1 85       	ldd	r31, Z+9	; 0x09
    154e:	e0 2d       	mov	r30, r0
    1550:	ce 01       	movw	r24, r28
    1552:	09 95       	icall
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	09 f0       	breq	.+2      	; 0x155a <_ZN7hd447805beginEhhh+0x6e>
    1558:	5e c0       	rjmp	.+188    	; 0x1616 <_ZN7hd447805beginEhhh+0x12a>
    155a:	88 85       	ldd	r24, Y+8	; 0x08
    155c:	82 30       	cpi	r24, 0x02	; 2
    155e:	18 f0       	brcs	.+6      	; 0x1566 <_ZN7hd447805beginEhhh+0x7a>
    1560:	8c 81       	ldd	r24, Y+4	; 0x04
    1562:	88 60       	ori	r24, 0x08	; 8
    1564:	8c 83       	std	Y+4, r24	; 0x04
    1566:	00 23       	and	r16, r16
    1568:	29 f0       	breq	.+10     	; 0x1574 <_ZN7hd447805beginEhhh+0x88>
    156a:	11 30       	cpi	r17, 0x01	; 1
    156c:	19 f4       	brne	.+6      	; 0x1574 <_ZN7hd447805beginEhhh+0x88>
    156e:	8c 81       	ldd	r24, Y+4	; 0x04
    1570:	84 60       	ori	r24, 0x04	; 4
    1572:	8c 83       	std	Y+4, r24	; 0x04
    1574:	e8 81       	ld	r30, Y
    1576:	f9 81       	ldd	r31, Y+1	; 0x01
    1578:	04 84       	ldd	r0, Z+12	; 0x0c
    157a:	f5 85       	ldd	r31, Z+13	; 0x0d
    157c:	e0 2d       	mov	r30, r0
    157e:	40 e3       	ldi	r20, 0x30	; 48
    1580:	62 e0       	ldi	r22, 0x02	; 2
    1582:	ce 01       	movw	r24, r28
    1584:	09 95       	icall
    1586:	65 e0       	ldi	r22, 0x05	; 5
    1588:	70 e0       	ldi	r23, 0x00	; 0
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <delay>
    1592:	e8 81       	ld	r30, Y
    1594:	f9 81       	ldd	r31, Y+1	; 0x01
    1596:	04 84       	ldd	r0, Z+12	; 0x0c
    1598:	f5 85       	ldd	r31, Z+13	; 0x0d
    159a:	e0 2d       	mov	r30, r0
    159c:	40 e3       	ldi	r20, 0x30	; 48
    159e:	62 e0       	ldi	r22, 0x02	; 2
    15a0:	ce 01       	movw	r24, r28
    15a2:	09 95       	icall
    15a4:	61 e0       	ldi	r22, 0x01	; 1
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <delay>
    15b0:	e8 81       	ld	r30, Y
    15b2:	f9 81       	ldd	r31, Y+1	; 0x01
    15b4:	04 84       	ldd	r0, Z+12	; 0x0c
    15b6:	f5 85       	ldd	r31, Z+13	; 0x0d
    15b8:	e0 2d       	mov	r30, r0
    15ba:	40 e3       	ldi	r20, 0x30	; 48
    15bc:	62 e0       	ldi	r22, 0x02	; 2
    15be:	ce 01       	movw	r24, r28
    15c0:	09 95       	icall
    15c2:	61 e0       	ldi	r22, 0x01	; 1
    15c4:	70 e0       	ldi	r23, 0x00	; 0
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <delay>
    15ce:	8c 81       	ldd	r24, Y+4	; 0x04
    15d0:	84 fd       	sbrc	r24, 4
    15d2:	09 c0       	rjmp	.+18     	; 0x15e6 <_ZN7hd447805beginEhhh+0xfa>
    15d4:	e8 81       	ld	r30, Y
    15d6:	f9 81       	ldd	r31, Y+1	; 0x01
    15d8:	04 84       	ldd	r0, Z+12	; 0x0c
    15da:	f5 85       	ldd	r31, Z+13	; 0x0d
    15dc:	e0 2d       	mov	r30, r0
    15de:	40 e2       	ldi	r20, 0x20	; 32
    15e0:	62 e0       	ldi	r22, 0x02	; 2
    15e2:	ce 01       	movw	r24, r28
    15e4:	09 95       	icall
    15e6:	6c 81       	ldd	r22, Y+4	; 0x04
    15e8:	60 62       	ori	r22, 0x20	; 32
    15ea:	ce 01       	movw	r24, r28
    15ec:	0e 94 13 0a 	call	0x1426	; 0x1426 <_ZN7hd447807commandEh>
    15f0:	84 e0       	ldi	r24, 0x04	; 4
    15f2:	8d 83       	std	Y+5, r24	; 0x05
    15f4:	ce 01       	movw	r24, r28
    15f6:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <_ZN7hd447807displayEv>
    15fa:	ce 01       	movw	r24, r28
    15fc:	0e 94 4a 0a 	call	0x1494	; 0x1494 <_ZN7hd447805clearEv>
    1600:	82 e0       	ldi	r24, 0x02	; 2
    1602:	8e 83       	std	Y+6, r24	; 0x06
    1604:	66 e0       	ldi	r22, 0x06	; 6
    1606:	ce 01       	movw	r24, r28
    1608:	0e 94 13 0a 	call	0x1426	; 0x1426 <_ZN7hd447807commandEh>
    160c:	8c 01       	movw	r16, r24
    160e:	ce 01       	movw	r24, r28
    1610:	0e 94 03 0a 	call	0x1406	; 0x1406 <_ZN7hd447809backlightEv>
    1614:	c8 01       	movw	r24, r16
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	1f 91       	pop	r17
    161c:	0f 91       	pop	r16
    161e:	08 95       	ret

00001620 <_ZN7hd447808noCursorEv>:
    1620:	fc 01       	movw	r30, r24
    1622:	65 81       	ldd	r22, Z+5	; 0x05
    1624:	6d 7f       	andi	r22, 0xFD	; 253
    1626:	65 83       	std	Z+5, r22	; 0x05
    1628:	68 60       	ori	r22, 0x08	; 8
    162a:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <_ZN7hd447807commandEh>

0000162e <_ZN7hd447807noBlinkEv>:
    162e:	fc 01       	movw	r30, r24
    1630:	65 81       	ldd	r22, Z+5	; 0x05
    1632:	6e 7f       	andi	r22, 0xFE	; 254
    1634:	65 83       	std	Z+5, r22	; 0x05
    1636:	68 60       	ori	r22, 0x08	; 8
    1638:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <_ZN7hd447807commandEh>

0000163c <_ZN7hd447806_writeEh>:
    163c:	cf 92       	push	r12
    163e:	df 92       	push	r13
    1640:	ef 92       	push	r14
    1642:	ff 92       	push	r15
    1644:	0f 93       	push	r16
    1646:	1f 93       	push	r17
    1648:	cf 93       	push	r28
    164a:	df 93       	push	r29
    164c:	ec 01       	movw	r28, r24
    164e:	46 2f       	mov	r20, r22
    1650:	e8 81       	ld	r30, Y
    1652:	f9 81       	ldd	r31, Y+1	; 0x01
    1654:	04 84       	ldd	r0, Z+12	; 0x0c
    1656:	f5 85       	ldd	r31, Z+13	; 0x0d
    1658:	e0 2d       	mov	r30, r0
    165a:	61 e0       	ldi	r22, 0x01	; 1
    165c:	09 95       	icall
    165e:	8c 01       	movw	r16, r24
    1660:	cc 88       	ldd	r12, Y+20	; 0x14
    1662:	dd 88       	ldd	r13, Y+21	; 0x15
    1664:	ee 88       	ldd	r14, Y+22	; 0x16
    1666:	ff 88       	ldd	r15, Y+23	; 0x17
    1668:	0e 94 20 17 	call	0x2e40	; 0x2e40 <micros>
    166c:	68 8f       	std	Y+24, r22	; 0x18
    166e:	79 8f       	std	Y+25, r23	; 0x19
    1670:	8a 8f       	std	Y+26, r24	; 0x1a
    1672:	9b 8f       	std	Y+27, r25	; 0x1b
    1674:	cc 8e       	std	Y+28, r12	; 0x1c
    1676:	dd 8e       	std	Y+29, r13	; 0x1d
    1678:	ee 8e       	std	Y+30, r14	; 0x1e
    167a:	ff 8e       	std	Y+31, r15	; 0x1f
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	01 2b       	or	r16, r17
    1682:	11 f0       	breq	.+4      	; 0x1688 <_ZN7hd447806_writeEh+0x4c>
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	df 91       	pop	r29
    168a:	cf 91       	pop	r28
    168c:	1f 91       	pop	r17
    168e:	0f 91       	pop	r16
    1690:	ff 90       	pop	r15
    1692:	ef 90       	pop	r14
    1694:	df 90       	pop	r13
    1696:	cf 90       	pop	r12
    1698:	08 95       	ret

0000169a <_ZN7hd447805writeEh>:

// write() - process data character byte to lcd
// returns number of bytes successfully written to device
// i.e. 1 if success or 0 if no character was processed (error)
size_t hd44780::write(uint8_t value)
{
    169a:	0f 93       	push	r16
    169c:	1f 93       	push	r17
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
    16a2:	ec 01       	movw	r28, r24
size_t rval;

	rval = _write(value);
    16a4:	0e 94 1e 0b 	call	0x163c	; 0x163c <_ZN7hd447806_writeEh>
    16a8:	8c 01       	movw	r16, r24
	if(_wraplines)
    16aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    16ac:	88 23       	and	r24, r24
    16ae:	99 f0       	breq	.+38     	; 0x16d6 <_ZN7hd447805writeEh+0x3c>
	{
		// currently only works for left to right mode
		if(++_curcol >= _cols)
    16b0:	89 85       	ldd	r24, Y+9	; 0x09
    16b2:	8f 5f       	subi	r24, 0xFF	; 255
    16b4:	89 87       	std	Y+9, r24	; 0x09
    16b6:	9f 81       	ldd	r25, Y+7	; 0x07
    16b8:	89 17       	cp	r24, r25
    16ba:	68 f0       	brcs	.+26     	; 0x16d6 <_ZN7hd447805writeEh+0x3c>
		{
			_curcol = 0;
    16bc:	19 86       	std	Y+9, r1	; 0x09
			_currow++;
    16be:	8a 85       	ldd	r24, Y+10	; 0x0a
    16c0:	8f 5f       	subi	r24, 0xFF	; 255
    16c2:	8a 87       	std	Y+10, r24	; 0x0a
			if(_currow >= _rows)
    16c4:	98 85       	ldd	r25, Y+8	; 0x08
    16c6:	89 17       	cp	r24, r25
    16c8:	08 f0       	brcs	.+2      	; 0x16cc <_ZN7hd447805writeEh+0x32>
				_currow = 0;
    16ca:	1a 86       	std	Y+10, r1	; 0x0a
			setCursor(_curcol, _currow);
    16cc:	4a 85       	ldd	r20, Y+10	; 0x0a
    16ce:	60 e0       	ldi	r22, 0x00	; 0
    16d0:	ce 01       	movw	r24, r28
    16d2:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <_ZN7hd447809setCursorEhh>
		}
	}
	return (rval);
}
    16d6:	c8 01       	movw	r24, r16
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	1f 91       	pop	r17
    16de:	0f 91       	pop	r16
    16e0:	08 95       	ret

000016e2 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    16e2:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <twi_state>
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <twi_sendStop>
    16ec:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <twi_inRepStart>
    16f0:	61 e0       	ldi	r22, 0x01	; 1
    16f2:	82 e0       	ldi	r24, 0x02	; 2
    16f4:	0e 94 81 18 	call	0x3102	; 0x3102 <digitalWrite>
    16f8:	61 e0       	ldi	r22, 0x01	; 1
    16fa:	83 e0       	ldi	r24, 0x03	; 3
    16fc:	0e 94 81 18 	call	0x3102	; 0x3102 <digitalWrite>
    1700:	e9 eb       	ldi	r30, 0xB9	; 185
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	8e 7f       	andi	r24, 0xFE	; 254
    1708:	80 83       	st	Z, r24
    170a:	80 81       	ld	r24, Z
    170c:	8d 7f       	andi	r24, 0xFD	; 253
    170e:	80 83       	st	Z, r24
    1710:	88 e4       	ldi	r24, 0x48	; 72
    1712:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1716:	85 e4       	ldi	r24, 0x45	; 69
    1718:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    171c:	08 95       	ret

0000171e <twi_readFrom>:
    171e:	41 32       	cpi	r20, 0x21	; 33
    1720:	08 f0       	brcs	.+2      	; 0x1724 <twi_readFrom+0x6>
    1722:	43 c0       	rjmp	.+134    	; 0x17aa <twi_readFrom+0x8c>
    1724:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <twi_state>
    1728:	91 11       	cpse	r25, r1
    172a:	fc cf       	rjmp	.-8      	; 0x1724 <twi_readFrom+0x6>
    172c:	91 e0       	ldi	r25, 0x01	; 1
    172e:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <twi_state>
    1732:	20 93 8a 03 	sts	0x038A, r18	; 0x80038a <twi_sendStop>
    1736:	2f ef       	ldi	r18, 0xFF	; 255
    1738:	20 93 1f 03 	sts	0x031F, r18	; 0x80031f <twi_error>
    173c:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <twi_masterBufferIndex>
    1740:	24 0f       	add	r18, r20
    1742:	20 93 63 03 	sts	0x0363, r18	; 0x800363 <twi_masterBufferLength>
    1746:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <twi_slarw>
    174a:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <twi_slarw>
    174e:	88 0f       	add	r24, r24
    1750:	89 2b       	or	r24, r25
    1752:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <twi_slarw>
    1756:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <twi_inRepStart>
    175a:	81 30       	cpi	r24, 0x01	; 1
    175c:	61 f4       	brne	.+24     	; 0x1776 <twi_readFrom+0x58>
    175e:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <twi_inRepStart>
    1762:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <twi_slarw>
    1766:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    176a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    176e:	83 fd       	sbrc	r24, 3
    1770:	f8 cf       	rjmp	.-16     	; 0x1762 <twi_readFrom+0x44>
    1772:	85 ec       	ldi	r24, 0xC5	; 197
    1774:	01 c0       	rjmp	.+2      	; 0x1778 <twi_readFrom+0x5a>
    1776:	85 ee       	ldi	r24, 0xE5	; 229
    1778:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    177c:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <twi_state>
    1780:	81 30       	cpi	r24, 0x01	; 1
    1782:	e1 f3       	breq	.-8      	; 0x177c <twi_readFrom+0x5e>
    1784:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <twi_masterBufferIndex>
    1788:	84 17       	cp	r24, r20
    178a:	10 f4       	brcc	.+4      	; 0x1790 <twi_readFrom+0x72>
    178c:	40 91 64 03 	lds	r20, 0x0364	; 0x800364 <twi_masterBufferIndex>
    1790:	a5 e6       	ldi	r26, 0x65	; 101
    1792:	b3 e0       	ldi	r27, 0x03	; 3
    1794:	96 2f       	mov	r25, r22
    1796:	fb 01       	movw	r30, r22
    1798:	8e 2f       	mov	r24, r30
    179a:	89 1b       	sub	r24, r25
    179c:	84 17       	cp	r24, r20
    179e:	18 f4       	brcc	.+6      	; 0x17a6 <twi_readFrom+0x88>
    17a0:	8d 91       	ld	r24, X+
    17a2:	81 93       	st	Z+, r24
    17a4:	f9 cf       	rjmp	.-14     	; 0x1798 <twi_readFrom+0x7a>
    17a6:	84 2f       	mov	r24, r20
    17a8:	08 95       	ret
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	08 95       	ret

000017ae <twi_writeTo>:
    17ae:	0f 93       	push	r16
    17b0:	41 32       	cpi	r20, 0x21	; 33
    17b2:	08 f0       	brcs	.+2      	; 0x17b6 <twi_writeTo+0x8>
    17b4:	4a c0       	rjmp	.+148    	; 0x184a <twi_writeTo+0x9c>
    17b6:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <twi_state>
    17ba:	91 11       	cpse	r25, r1
    17bc:	fc cf       	rjmp	.-8      	; 0x17b6 <twi_writeTo+0x8>
    17be:	32 e0       	ldi	r19, 0x02	; 2
    17c0:	30 93 8c 03 	sts	0x038C, r19	; 0x80038c <twi_state>
    17c4:	00 93 8a 03 	sts	0x038A, r16	; 0x80038a <twi_sendStop>
    17c8:	3f ef       	ldi	r19, 0xFF	; 255
    17ca:	30 93 1f 03 	sts	0x031F, r19	; 0x80031f <twi_error>
    17ce:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <twi_masterBufferIndex>
    17d2:	40 93 63 03 	sts	0x0363, r20	; 0x800363 <twi_masterBufferLength>
    17d6:	56 2f       	mov	r21, r22
    17d8:	a5 e6       	ldi	r26, 0x65	; 101
    17da:	b3 e0       	ldi	r27, 0x03	; 3
    17dc:	fb 01       	movw	r30, r22
    17de:	3e 2f       	mov	r19, r30
    17e0:	35 1b       	sub	r19, r21
    17e2:	34 17       	cp	r19, r20
    17e4:	18 f4       	brcc	.+6      	; 0x17ec <twi_writeTo+0x3e>
    17e6:	31 91       	ld	r19, Z+
    17e8:	3d 93       	st	X+, r19
    17ea:	f9 cf       	rjmp	.-14     	; 0x17de <twi_writeTo+0x30>
    17ec:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <twi_slarw>
    17f0:	30 91 8b 03 	lds	r19, 0x038B	; 0x80038b <twi_slarw>
    17f4:	88 0f       	add	r24, r24
    17f6:	83 2b       	or	r24, r19
    17f8:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <twi_slarw>
    17fc:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <twi_inRepStart>
    1800:	81 30       	cpi	r24, 0x01	; 1
    1802:	61 f4       	brne	.+24     	; 0x181c <twi_writeTo+0x6e>
    1804:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <twi_inRepStart>
    1808:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <twi_slarw>
    180c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1810:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1814:	83 fd       	sbrc	r24, 3
    1816:	f8 cf       	rjmp	.-16     	; 0x1808 <twi_writeTo+0x5a>
    1818:	85 ec       	ldi	r24, 0xC5	; 197
    181a:	01 c0       	rjmp	.+2      	; 0x181e <twi_writeTo+0x70>
    181c:	85 ee       	ldi	r24, 0xE5	; 229
    181e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1822:	22 23       	and	r18, r18
    1824:	21 f0       	breq	.+8      	; 0x182e <twi_writeTo+0x80>
    1826:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <twi_state>
    182a:	82 30       	cpi	r24, 0x02	; 2
    182c:	d1 f3       	breq	.-12     	; 0x1822 <twi_writeTo+0x74>
    182e:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <twi_error>
    1832:	8f 3f       	cpi	r24, 0xFF	; 255
    1834:	79 f0       	breq	.+30     	; 0x1854 <twi_writeTo+0xa6>
    1836:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <twi_error>
    183a:	80 32       	cpi	r24, 0x20	; 32
    183c:	41 f0       	breq	.+16     	; 0x184e <twi_writeTo+0xa0>
    183e:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <twi_error>
    1842:	80 33       	cpi	r24, 0x30	; 48
    1844:	31 f0       	breq	.+12     	; 0x1852 <twi_writeTo+0xa4>
    1846:	94 e0       	ldi	r25, 0x04	; 4
    1848:	05 c0       	rjmp	.+10     	; 0x1854 <twi_writeTo+0xa6>
    184a:	91 e0       	ldi	r25, 0x01	; 1
    184c:	03 c0       	rjmp	.+6      	; 0x1854 <twi_writeTo+0xa6>
    184e:	92 e0       	ldi	r25, 0x02	; 2
    1850:	01 c0       	rjmp	.+2      	; 0x1854 <twi_writeTo+0xa6>
    1852:	93 e0       	ldi	r25, 0x03	; 3
    1854:	89 2f       	mov	r24, r25
    1856:	0f 91       	pop	r16
    1858:	08 95       	ret

0000185a <twi_transmit>:
    185a:	40 91 41 03 	lds	r20, 0x0341	; 0x800341 <twi_txBufferLength>
    185e:	26 2f       	mov	r18, r22
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	24 0f       	add	r18, r20
    1864:	31 1d       	adc	r19, r1
    1866:	21 32       	cpi	r18, 0x21	; 33
    1868:	31 05       	cpc	r19, r1
    186a:	dc f4       	brge	.+54     	; 0x18a2 <twi_transmit+0x48>
    186c:	20 91 8c 03 	lds	r18, 0x038C	; 0x80038c <twi_state>
    1870:	24 30       	cpi	r18, 0x04	; 4
    1872:	c9 f4       	brne	.+50     	; 0x18a6 <twi_transmit+0x4c>
    1874:	fc 01       	movw	r30, r24
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	86 17       	cp	r24, r22
    187c:	58 f4       	brcc	.+22     	; 0x1894 <twi_transmit+0x3a>
    187e:	30 91 41 03 	lds	r19, 0x0341	; 0x800341 <twi_txBufferLength>
    1882:	21 91       	ld	r18, Z+
    1884:	dc 01       	movw	r26, r24
    1886:	ad 5b       	subi	r26, 0xBD	; 189
    1888:	bc 4f       	sbci	r27, 0xFC	; 252
    188a:	a3 0f       	add	r26, r19
    188c:	b1 1d       	adc	r27, r1
    188e:	2c 93       	st	X, r18
    1890:	01 96       	adiw	r24, 0x01	; 1
    1892:	f3 cf       	rjmp	.-26     	; 0x187a <twi_transmit+0x20>
    1894:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <twi_txBufferLength>
    1898:	68 0f       	add	r22, r24
    189a:	60 93 41 03 	sts	0x0341, r22	; 0x800341 <twi_txBufferLength>
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	08 95       	ret
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	08 95       	ret
    18a6:	82 e0       	ldi	r24, 0x02	; 2
    18a8:	08 95       	ret

000018aa <twi_attachSlaveRxEvent>:
    18aa:	90 93 86 03 	sts	0x0386, r25	; 0x800386 <twi_onSlaveReceive+0x1>
    18ae:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <twi_onSlaveReceive>
    18b2:	08 95       	ret

000018b4 <twi_attachSlaveTxEvent>:
    18b4:	90 93 88 03 	sts	0x0388, r25	; 0x800388 <twi_onSlaveTransmit+0x1>
    18b8:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <twi_onSlaveTransmit>
    18bc:	08 95       	ret

000018be <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    18be:	85 ed       	ldi	r24, 0xD5	; 213
    18c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    18c4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    18c8:	84 fd       	sbrc	r24, 4
    18ca:	fc cf       	rjmp	.-8      	; 0x18c4 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    18cc:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <twi_state>
    18d0:	08 95       	ret

000018d2 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    18d2:	85 ec       	ldi	r24, 0xC5	; 197
    18d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    18d8:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <twi_state>
    18dc:	08 95       	ret

000018de <__vector_36>:
}

ISR(TWI_vect)
{
    18de:	1f 92       	push	r1
    18e0:	0f 92       	push	r0
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	0f 92       	push	r0
    18e6:	11 24       	eor	r1, r1
    18e8:	2f 93       	push	r18
    18ea:	3f 93       	push	r19
    18ec:	4f 93       	push	r20
    18ee:	5f 93       	push	r21
    18f0:	6f 93       	push	r22
    18f2:	7f 93       	push	r23
    18f4:	8f 93       	push	r24
    18f6:	9f 93       	push	r25
    18f8:	af 93       	push	r26
    18fa:	bf 93       	push	r27
    18fc:	ef 93       	push	r30
    18fe:	ff 93       	push	r31
  switch(TW_STATUS){
    1900:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1904:	88 7f       	andi	r24, 0xF8	; 248
    1906:	80 36       	cpi	r24, 0x60	; 96
    1908:	09 f4       	brne	.+2      	; 0x190c <__vector_36+0x2e>
    190a:	9e c0       	rjmp	.+316    	; 0x1a48 <__vector_36+0x16a>
    190c:	78 f5       	brcc	.+94     	; 0x196c <__vector_36+0x8e>
    190e:	88 32       	cpi	r24, 0x28	; 40
    1910:	09 f4       	brne	.+2      	; 0x1914 <__vector_36+0x36>
    1912:	5d c0       	rjmp	.+186    	; 0x19ce <__vector_36+0xf0>
    1914:	90 f4       	brcc	.+36     	; 0x193a <__vector_36+0x5c>
    1916:	80 31       	cpi	r24, 0x10	; 16
    1918:	09 f4       	brne	.+2      	; 0x191c <__vector_36+0x3e>
    191a:	56 c0       	rjmp	.+172    	; 0x19c8 <__vector_36+0xea>
    191c:	38 f4       	brcc	.+14     	; 0x192c <__vector_36+0x4e>
    191e:	88 23       	and	r24, r24
    1920:	09 f4       	brne	.+2      	; 0x1924 <__vector_36+0x46>
    1922:	f5 c0       	rjmp	.+490    	; 0x1b0e <__vector_36+0x230>
    1924:	88 30       	cpi	r24, 0x08	; 8
    1926:	09 f4       	brne	.+2      	; 0x192a <__vector_36+0x4c>
    1928:	4f c0       	rjmp	.+158    	; 0x19c8 <__vector_36+0xea>
    192a:	f5 c0       	rjmp	.+490    	; 0x1b16 <__vector_36+0x238>
    192c:	88 31       	cpi	r24, 0x18	; 24
    192e:	09 f4       	brne	.+2      	; 0x1932 <__vector_36+0x54>
    1930:	4e c0       	rjmp	.+156    	; 0x19ce <__vector_36+0xf0>
    1932:	80 32       	cpi	r24, 0x20	; 32
    1934:	09 f4       	brne	.+2      	; 0x1938 <__vector_36+0x5a>
    1936:	5f c0       	rjmp	.+190    	; 0x19f6 <__vector_36+0x118>
    1938:	ee c0       	rjmp	.+476    	; 0x1b16 <__vector_36+0x238>
    193a:	80 34       	cpi	r24, 0x40	; 64
    193c:	09 f4       	brne	.+2      	; 0x1940 <__vector_36+0x62>
    193e:	6a c0       	rjmp	.+212    	; 0x1a14 <__vector_36+0x136>
    1940:	58 f4       	brcc	.+22     	; 0x1958 <__vector_36+0x7a>
    1942:	80 33       	cpi	r24, 0x30	; 48
    1944:	09 f4       	brne	.+2      	; 0x1948 <__vector_36+0x6a>
    1946:	57 c0       	rjmp	.+174    	; 0x19f6 <__vector_36+0x118>
    1948:	88 33       	cpi	r24, 0x38	; 56
    194a:	09 f0       	breq	.+2      	; 0x194e <__vector_36+0x70>
    194c:	e4 c0       	rjmp	.+456    	; 0x1b16 <__vector_36+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    194e:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <twi_error>
      twi_releaseBus();
    1952:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <twi_releaseBus>
      break;
    1956:	df c0       	rjmp	.+446    	; 0x1b16 <__vector_36+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1958:	80 35       	cpi	r24, 0x50	; 80
    195a:	09 f4       	brne	.+2      	; 0x195e <__vector_36+0x80>
    195c:	4f c0       	rjmp	.+158    	; 0x19fc <__vector_36+0x11e>
    195e:	88 35       	cpi	r24, 0x58	; 88
    1960:	09 f4       	brne	.+2      	; 0x1964 <__vector_36+0x86>
    1962:	5d c0       	rjmp	.+186    	; 0x1a1e <__vector_36+0x140>
    1964:	88 34       	cpi	r24, 0x48	; 72
    1966:	09 f0       	breq	.+2      	; 0x196a <__vector_36+0x8c>
    1968:	d6 c0       	rjmp	.+428    	; 0x1b16 <__vector_36+0x238>
    196a:	d3 c0       	rjmp	.+422    	; 0x1b12 <__vector_36+0x234>
    196c:	88 39       	cpi	r24, 0x98	; 152
    196e:	09 f4       	brne	.+2      	; 0x1972 <__vector_36+0x94>
    1970:	c4 c0       	rjmp	.+392    	; 0x1afa <__vector_36+0x21c>
    1972:	a8 f4       	brcc	.+42     	; 0x199e <__vector_36+0xc0>
    1974:	88 37       	cpi	r24, 0x78	; 120
    1976:	09 f4       	brne	.+2      	; 0x197a <__vector_36+0x9c>
    1978:	67 c0       	rjmp	.+206    	; 0x1a48 <__vector_36+0x16a>
    197a:	38 f4       	brcc	.+14     	; 0x198a <__vector_36+0xac>
    197c:	88 36       	cpi	r24, 0x68	; 104
    197e:	09 f4       	brne	.+2      	; 0x1982 <__vector_36+0xa4>
    1980:	63 c0       	rjmp	.+198    	; 0x1a48 <__vector_36+0x16a>
    1982:	80 37       	cpi	r24, 0x70	; 112
    1984:	09 f4       	brne	.+2      	; 0x1988 <__vector_36+0xaa>
    1986:	60 c0       	rjmp	.+192    	; 0x1a48 <__vector_36+0x16a>
    1988:	c6 c0       	rjmp	.+396    	; 0x1b16 <__vector_36+0x238>
    198a:	88 38       	cpi	r24, 0x88	; 136
    198c:	09 f4       	brne	.+2      	; 0x1990 <__vector_36+0xb2>
    198e:	b5 c0       	rjmp	.+362    	; 0x1afa <__vector_36+0x21c>
    1990:	80 39       	cpi	r24, 0x90	; 144
    1992:	09 f4       	brne	.+2      	; 0x1996 <__vector_36+0xb8>
    1994:	5f c0       	rjmp	.+190    	; 0x1a54 <__vector_36+0x176>
    1996:	80 38       	cpi	r24, 0x80	; 128
    1998:	09 f0       	breq	.+2      	; 0x199c <__vector_36+0xbe>
    199a:	bd c0       	rjmp	.+378    	; 0x1b16 <__vector_36+0x238>
    199c:	5b c0       	rjmp	.+182    	; 0x1a54 <__vector_36+0x176>
    199e:	80 3b       	cpi	r24, 0xB0	; 176
    19a0:	09 f4       	brne	.+2      	; 0x19a4 <__vector_36+0xc6>
    19a2:	83 c0       	rjmp	.+262    	; 0x1aaa <__vector_36+0x1cc>
    19a4:	38 f4       	brcc	.+14     	; 0x19b4 <__vector_36+0xd6>
    19a6:	80 3a       	cpi	r24, 0xA0	; 160
    19a8:	09 f4       	brne	.+2      	; 0x19ac <__vector_36+0xce>
    19aa:	66 c0       	rjmp	.+204    	; 0x1a78 <__vector_36+0x19a>
    19ac:	88 3a       	cpi	r24, 0xA8	; 168
    19ae:	09 f4       	brne	.+2      	; 0x19b2 <__vector_36+0xd4>
    19b0:	7c c0       	rjmp	.+248    	; 0x1aaa <__vector_36+0x1cc>
    19b2:	b1 c0       	rjmp	.+354    	; 0x1b16 <__vector_36+0x238>
    19b4:	80 3c       	cpi	r24, 0xC0	; 192
    19b6:	09 f4       	brne	.+2      	; 0x19ba <__vector_36+0xdc>
    19b8:	a4 c0       	rjmp	.+328    	; 0x1b02 <__vector_36+0x224>
    19ba:	88 3c       	cpi	r24, 0xC8	; 200
    19bc:	09 f4       	brne	.+2      	; 0x19c0 <__vector_36+0xe2>
    19be:	a1 c0       	rjmp	.+322    	; 0x1b02 <__vector_36+0x224>
    19c0:	88 3b       	cpi	r24, 0xB8	; 184
    19c2:	09 f4       	brne	.+2      	; 0x19c6 <__vector_36+0xe8>
    19c4:	87 c0       	rjmp	.+270    	; 0x1ad4 <__vector_36+0x1f6>
    19c6:	a7 c0       	rjmp	.+334    	; 0x1b16 <__vector_36+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    19c8:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <twi_slarw>
    19cc:	10 c0       	rjmp	.+32     	; 0x19ee <__vector_36+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    19ce:	90 91 64 03 	lds	r25, 0x0364	; 0x800364 <twi_masterBufferIndex>
    19d2:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <twi_masterBufferLength>
    19d6:	98 17       	cp	r25, r24
    19d8:	70 f5       	brcc	.+92     	; 0x1a36 <__vector_36+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    19da:	e0 91 64 03 	lds	r30, 0x0364	; 0x800364 <twi_masterBufferIndex>
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	8e 0f       	add	r24, r30
    19e2:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <twi_masterBufferIndex>
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	eb 59       	subi	r30, 0x9B	; 155
    19ea:	fc 4f       	sbci	r31, 0xFC	; 252
    19ec:	80 81       	ld	r24, Z
    19ee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    19f2:	85 ec       	ldi	r24, 0xC5	; 197
    19f4:	83 c0       	rjmp	.+262    	; 0x1afc <__vector_36+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    19f6:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <twi_error>
    19fa:	8b c0       	rjmp	.+278    	; 0x1b12 <__vector_36+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    19fc:	e0 91 64 03 	lds	r30, 0x0364	; 0x800364 <twi_masterBufferIndex>
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	8e 0f       	add	r24, r30
    1a04:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <twi_masterBufferIndex>
    1a08:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	eb 59       	subi	r30, 0x9B	; 155
    1a10:	fc 4f       	sbci	r31, 0xFC	; 252
    1a12:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1a14:	90 91 64 03 	lds	r25, 0x0364	; 0x800364 <twi_masterBufferIndex>
    1a18:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <twi_masterBufferLength>
    1a1c:	6b c0       	rjmp	.+214    	; 0x1af4 <__vector_36+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1a1e:	e0 91 64 03 	lds	r30, 0x0364	; 0x800364 <twi_masterBufferIndex>
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	8e 0f       	add	r24, r30
    1a26:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <twi_masterBufferIndex>
    1a2a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	eb 59       	subi	r30, 0x9B	; 155
    1a32:	fc 4f       	sbci	r31, 0xFC	; 252
    1a34:	80 83       	st	Z, r24
	if (twi_sendStop)
    1a36:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <twi_sendStop>
    1a3a:	81 11       	cpse	r24, r1
    1a3c:	6a c0       	rjmp	.+212    	; 0x1b12 <__vector_36+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1a44:	84 ea       	ldi	r24, 0xA4	; 164
    1a46:	5e c0       	rjmp	.+188    	; 0x1b04 <__vector_36+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1a48:	83 e0       	ldi	r24, 0x03	; 3
    1a4a:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1a4e:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <twi_rxBufferIndex>
    1a52:	cf cf       	rjmp	.-98     	; 0x19f2 <__vector_36+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1a54:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <twi_rxBufferIndex>
    1a58:	80 32       	cpi	r24, 0x20	; 32
    1a5a:	08 f0       	brcs	.+2      	; 0x1a5e <__vector_36+0x180>
    1a5c:	4e c0       	rjmp	.+156    	; 0x1afa <__vector_36+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1a5e:	e0 91 20 03 	lds	r30, 0x0320	; 0x800320 <twi_rxBufferIndex>
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	8e 0f       	add	r24, r30
    1a66:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <twi_rxBufferIndex>
    1a6a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	ef 5d       	subi	r30, 0xDF	; 223
    1a72:	fc 4f       	sbci	r31, 0xFC	; 252
    1a74:	80 83       	st	Z, r24
    1a76:	bd cf       	rjmp	.-134    	; 0x19f2 <__vector_36+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1a78:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1a7c:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <twi_rxBufferIndex>
    1a80:	80 32       	cpi	r24, 0x20	; 32
    1a82:	30 f4       	brcc	.+12     	; 0x1a90 <__vector_36+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1a84:	e0 91 20 03 	lds	r30, 0x0320	; 0x800320 <twi_rxBufferIndex>
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	ef 5d       	subi	r30, 0xDF	; 223
    1a8c:	fc 4f       	sbci	r31, 0xFC	; 252
    1a8e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1a90:	60 91 20 03 	lds	r22, 0x0320	; 0x800320 <twi_rxBufferIndex>
    1a94:	70 e0       	ldi	r23, 0x00	; 0
    1a96:	e0 91 85 03 	lds	r30, 0x0385	; 0x800385 <twi_onSlaveReceive>
    1a9a:	f0 91 86 03 	lds	r31, 0x0386	; 0x800386 <twi_onSlaveReceive+0x1>
    1a9e:	81 e2       	ldi	r24, 0x21	; 33
    1aa0:	93 e0       	ldi	r25, 0x03	; 3
    1aa2:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1aa4:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <twi_rxBufferIndex>
      break;
    1aa8:	36 c0       	rjmp	.+108    	; 0x1b16 <__vector_36+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1aaa:	84 e0       	ldi	r24, 0x04	; 4
    1aac:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1ab0:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1ab4:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1ab8:	e0 91 87 03 	lds	r30, 0x0387	; 0x800387 <twi_onSlaveTransmit>
    1abc:	f0 91 88 03 	lds	r31, 0x0388	; 0x800388 <twi_onSlaveTransmit+0x1>
    1ac0:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1ac2:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <twi_txBufferLength>
    1ac6:	81 11       	cpse	r24, r1
    1ac8:	05 c0       	rjmp	.+10     	; 0x1ad4 <__vector_36+0x1f6>
        twi_txBufferLength = 1;
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1ad0:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1ad4:	e0 91 42 03 	lds	r30, 0x0342	; 0x800342 <twi_txBufferIndex>
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	8e 0f       	add	r24, r30
    1adc:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <twi_txBufferIndex>
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	ed 5b       	subi	r30, 0xBD	; 189
    1ae4:	fc 4f       	sbci	r31, 0xFC	; 252
    1ae6:	80 81       	ld	r24, Z
    1ae8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1aec:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <twi_txBufferIndex>
    1af0:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <twi_txBufferLength>
    1af4:	98 17       	cp	r25, r24
    1af6:	08 f4       	brcc	.+2      	; 0x1afa <__vector_36+0x21c>
    1af8:	7c cf       	rjmp	.-264    	; 0x19f2 <__vector_36+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1afa:	85 e8       	ldi	r24, 0x85	; 133
    1afc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1b00:	0a c0       	rjmp	.+20     	; 0x1b16 <__vector_36+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1b02:	85 ec       	ldi	r24, 0xC5	; 197
    1b04:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1b08:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <twi_state>
      break;
    1b0c:	04 c0       	rjmp	.+8      	; 0x1b16 <__vector_36+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1b0e:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <twi_error>
      twi_stop();
    1b12:	0e 94 5f 0c 	call	0x18be	; 0x18be <twi_stop>
      break;
  }
}
    1b16:	ff 91       	pop	r31
    1b18:	ef 91       	pop	r30
    1b1a:	bf 91       	pop	r27
    1b1c:	af 91       	pop	r26
    1b1e:	9f 91       	pop	r25
    1b20:	8f 91       	pop	r24
    1b22:	7f 91       	pop	r23
    1b24:	6f 91       	pop	r22
    1b26:	5f 91       	pop	r21
    1b28:	4f 91       	pop	r20
    1b2a:	3f 91       	pop	r19
    1b2c:	2f 91       	pop	r18
    1b2e:	0f 90       	pop	r0
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	0f 90       	pop	r0
    1b34:	1f 90       	pop	r1
    1b36:	18 95       	reti

00001b38 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1b38:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <_ZN7TwoWire14rxBufferLengthE>
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	20 91 c2 03 	lds	r18, 0x03C2	; 0x8003c2 <_ZN7TwoWire13rxBufferIndexE>
    1b42:	82 1b       	sub	r24, r18
    1b44:	91 09       	sbc	r25, r1
    1b46:	08 95       	ret

00001b48 <_ZN7TwoWire4readEv>:
    1b48:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <_ZN7TwoWire13rxBufferIndexE>
    1b4c:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <_ZN7TwoWire14rxBufferLengthE>
    1b50:	98 17       	cp	r25, r24
    1b52:	50 f4       	brcc	.+20     	; 0x1b68 <_ZN7TwoWire4readEv+0x20>
    1b54:	e9 2f       	mov	r30, r25
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	ed 53       	subi	r30, 0x3D	; 61
    1b5a:	fc 4f       	sbci	r31, 0xFC	; 252
    1b5c:	20 81       	ld	r18, Z
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	9f 5f       	subi	r25, 0xFF	; 255
    1b62:	90 93 c2 03 	sts	0x03C2, r25	; 0x8003c2 <_ZN7TwoWire13rxBufferIndexE>
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <_ZN7TwoWire4readEv+0x24>
    1b68:	2f ef       	ldi	r18, 0xFF	; 255
    1b6a:	3f ef       	ldi	r19, 0xFF	; 255
    1b6c:	c9 01       	movw	r24, r18
    1b6e:	08 95       	ret

00001b70 <_ZN7TwoWire4peekEv>:
    1b70:	e0 91 c2 03 	lds	r30, 0x03C2	; 0x8003c2 <_ZN7TwoWire13rxBufferIndexE>
    1b74:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <_ZN7TwoWire14rxBufferLengthE>
    1b78:	e8 17       	cp	r30, r24
    1b7a:	30 f4       	brcc	.+12     	; 0x1b88 <_ZN7TwoWire4peekEv+0x18>
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	ed 53       	subi	r30, 0x3D	; 61
    1b80:	fc 4f       	sbci	r31, 0xFC	; 252
    1b82:	80 81       	ld	r24, Z
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	08 95       	ret
    1b88:	8f ef       	ldi	r24, 0xFF	; 255
    1b8a:	9f ef       	ldi	r25, 0xFF	; 255
    1b8c:	08 95       	ret

00001b8e <_ZN7TwoWire5flushEv>:
    1b8e:	08 95       	ret

00001b90 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1b90:	cf 93       	push	r28
    1b92:	df 93       	push	r29
    1b94:	ec 01       	movw	r28, r24
    1b96:	e0 91 99 03 	lds	r30, 0x0399	; 0x800399 <_ZN7TwoWire14user_onReceiveE>
    1b9a:	f0 91 9a 03 	lds	r31, 0x039A	; 0x80039a <_ZN7TwoWire14user_onReceiveE+0x1>
    1b9e:	30 97       	sbiw	r30, 0x00	; 0
    1ba0:	f1 f0       	breq	.+60     	; 0x1bde <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1ba2:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <_ZN7TwoWire13rxBufferIndexE>
    1ba6:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <_ZN7TwoWire14rxBufferLengthE>
    1baa:	98 17       	cp	r25, r24
    1bac:	c0 f0       	brcs	.+48     	; 0x1bde <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	29 2f       	mov	r18, r25
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	26 17       	cp	r18, r22
    1bb6:	37 07       	cpc	r19, r23
    1bb8:	54 f4       	brge	.+20     	; 0x1bce <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1bba:	de 01       	movw	r26, r28
    1bbc:	a2 0f       	add	r26, r18
    1bbe:	b3 1f       	adc	r27, r19
    1bc0:	4c 91       	ld	r20, X
    1bc2:	d9 01       	movw	r26, r18
    1bc4:	ad 53       	subi	r26, 0x3D	; 61
    1bc6:	bc 4f       	sbci	r27, 0xFC	; 252
    1bc8:	4c 93       	st	X, r20
    1bca:	9f 5f       	subi	r25, 0xFF	; 255
    1bcc:	f1 cf       	rjmp	.-30     	; 0x1bb0 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1bce:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <_ZN7TwoWire13rxBufferIndexE>
    1bd2:	60 93 c1 03 	sts	0x03C1, r22	; 0x8003c1 <_ZN7TwoWire14rxBufferLengthE>
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	df 91       	pop	r29
    1bda:	cf 91       	pop	r28
    1bdc:	09 94       	ijmp
    1bde:	df 91       	pop	r29
    1be0:	cf 91       	pop	r28
    1be2:	08 95       	ret

00001be4 <_ZN7TwoWire16onRequestServiceEv>:
    1be4:	e0 91 9b 03 	lds	r30, 0x039B	; 0x80039b <_ZN7TwoWire14user_onRequestE>
    1be8:	f0 91 9c 03 	lds	r31, 0x039C	; 0x80039c <_ZN7TwoWire14user_onRequestE+0x1>
    1bec:	30 97       	sbiw	r30, 0x00	; 0
    1bee:	29 f0       	breq	.+10     	; 0x1bfa <_ZN7TwoWire16onRequestServiceEv+0x16>
    1bf0:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <_ZN7TwoWire13txBufferIndexE>
    1bf4:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <_ZN7TwoWire14txBufferLengthE>
    1bf8:	09 94       	ijmp
    1bfa:	08 95       	ret

00001bfc <_ZN7TwoWire5writeEPKhj>:
    1bfc:	cf 92       	push	r12
    1bfe:	df 92       	push	r13
    1c00:	ef 92       	push	r14
    1c02:	ff 92       	push	r15
    1c04:	0f 93       	push	r16
    1c06:	1f 93       	push	r17
    1c08:	cf 93       	push	r28
    1c0a:	df 93       	push	r29
    1c0c:	7c 01       	movw	r14, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	8a 01       	movw	r16, r20
    1c12:	20 91 9d 03 	lds	r18, 0x039D	; 0x80039d <_ZN7TwoWire12transmittingE>
    1c16:	22 23       	and	r18, r18
    1c18:	89 f0       	breq	.+34     	; 0x1c3c <_ZN7TwoWire5writeEPKhj+0x40>
    1c1a:	eb 01       	movw	r28, r22
    1c1c:	6b 01       	movw	r12, r22
    1c1e:	c4 0e       	add	r12, r20
    1c20:	d5 1e       	adc	r13, r21
    1c22:	cc 15       	cp	r28, r12
    1c24:	dd 05       	cpc	r29, r13
    1c26:	69 f0       	breq	.+26     	; 0x1c42 <_ZN7TwoWire5writeEPKhj+0x46>
    1c28:	69 91       	ld	r22, Y+
    1c2a:	d7 01       	movw	r26, r14
    1c2c:	ed 91       	ld	r30, X+
    1c2e:	fc 91       	ld	r31, X
    1c30:	01 90       	ld	r0, Z+
    1c32:	f0 81       	ld	r31, Z
    1c34:	e0 2d       	mov	r30, r0
    1c36:	c7 01       	movw	r24, r14
    1c38:	09 95       	icall
    1c3a:	f3 cf       	rjmp	.-26     	; 0x1c22 <_ZN7TwoWire5writeEPKhj+0x26>
    1c3c:	64 2f       	mov	r22, r20
    1c3e:	0e 94 2d 0c 	call	0x185a	; 0x185a <twi_transmit>
    1c42:	c8 01       	movw	r24, r16
    1c44:	df 91       	pop	r29
    1c46:	cf 91       	pop	r28
    1c48:	1f 91       	pop	r17
    1c4a:	0f 91       	pop	r16
    1c4c:	ff 90       	pop	r15
    1c4e:	ef 90       	pop	r14
    1c50:	df 90       	pop	r13
    1c52:	cf 90       	pop	r12
    1c54:	08 95       	ret

00001c56 <_ZN7TwoWire5writeEh>:
    1c56:	cf 93       	push	r28
    1c58:	df 93       	push	r29
    1c5a:	1f 92       	push	r1
    1c5c:	cd b7       	in	r28, 0x3d	; 61
    1c5e:	de b7       	in	r29, 0x3e	; 62
    1c60:	69 83       	std	Y+1, r22	; 0x01
    1c62:	20 91 9d 03 	lds	r18, 0x039D	; 0x80039d <_ZN7TwoWire12transmittingE>
    1c66:	22 23       	and	r18, r18
    1c68:	d1 f0       	breq	.+52     	; 0x1c9e <_ZN7TwoWire5writeEh+0x48>
    1c6a:	20 91 9e 03 	lds	r18, 0x039E	; 0x80039e <_ZN7TwoWire14txBufferLengthE>
    1c6e:	20 32       	cpi	r18, 0x20	; 32
    1c70:	40 f0       	brcs	.+16     	; 0x1c82 <_ZN7TwoWire5writeEh+0x2c>
    1c72:	21 e0       	ldi	r18, 0x01	; 1
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	fc 01       	movw	r30, r24
    1c78:	33 83       	std	Z+3, r19	; 0x03
    1c7a:	22 83       	std	Z+2, r18	; 0x02
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	15 c0       	rjmp	.+42     	; 0x1cac <_ZN7TwoWire5writeEh+0x56>
    1c82:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <_ZN7TwoWire13txBufferIndexE>
    1c86:	e8 2f       	mov	r30, r24
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	e0 56       	subi	r30, 0x60	; 96
    1c8c:	fc 4f       	sbci	r31, 0xFC	; 252
    1c8e:	99 81       	ldd	r25, Y+1	; 0x01
    1c90:	90 83       	st	Z, r25
    1c92:	8f 5f       	subi	r24, 0xFF	; 255
    1c94:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <_ZN7TwoWire13txBufferIndexE>
    1c98:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <_ZN7TwoWire14txBufferLengthE>
    1c9c:	05 c0       	rjmp	.+10     	; 0x1ca8 <_ZN7TwoWire5writeEh+0x52>
    1c9e:	61 e0       	ldi	r22, 0x01	; 1
    1ca0:	ce 01       	movw	r24, r28
    1ca2:	01 96       	adiw	r24, 0x01	; 1
    1ca4:	0e 94 2d 0c 	call	0x185a	; 0x185a <twi_transmit>
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	0f 90       	pop	r0
    1cae:	df 91       	pop	r29
    1cb0:	cf 91       	pop	r28
    1cb2:	08 95       	ret

00001cb4 <_ZN7TwoWireC1Ev>:
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	13 82       	std	Z+3, r1	; 0x03
    1cb8:	12 82       	std	Z+2, r1	; 0x02
    1cba:	88 ee       	ldi	r24, 0xE8	; 232
    1cbc:	93 e0       	ldi	r25, 0x03	; 3
    1cbe:	a0 e0       	ldi	r26, 0x00	; 0
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	84 83       	std	Z+4, r24	; 0x04
    1cc4:	95 83       	std	Z+5, r25	; 0x05
    1cc6:	a6 83       	std	Z+6, r26	; 0x06
    1cc8:	b7 83       	std	Z+7, r27	; 0x07
    1cca:	8e e1       	ldi	r24, 0x1E	; 30
    1ccc:	92 e0       	ldi	r25, 0x02	; 2
    1cce:	91 83       	std	Z+1, r25	; 0x01
    1cd0:	80 83       	st	Z, r24
    1cd2:	08 95       	ret

00001cd4 <_ZN7TwoWire5beginEv>:
    1cd4:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <_ZN7TwoWire13rxBufferIndexE>
    1cd8:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <_ZN7TwoWire14rxBufferLengthE>
    1cdc:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <_ZN7TwoWire13txBufferIndexE>
    1ce0:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <_ZN7TwoWire14txBufferLengthE>
    1ce4:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <twi_init>
    1ce8:	82 ef       	ldi	r24, 0xF2	; 242
    1cea:	9d e0       	ldi	r25, 0x0D	; 13
    1cec:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <twi_attachSlaveTxEvent>
    1cf0:	88 ec       	ldi	r24, 0xC8	; 200
    1cf2:	9d e0       	ldi	r25, 0x0D	; 13
    1cf4:	0c 94 55 0c 	jmp	0x18aa	; 0x18aa <twi_attachSlaveRxEvent>

00001cf8 <_ZN7TwoWire17beginTransmissionEh>:
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <_ZN7TwoWire12transmittingE>
    1cfe:	60 93 c0 03 	sts	0x03C0, r22	; 0x8003c0 <_ZN7TwoWire9txAddressE>
    1d02:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <_ZN7TwoWire13txBufferIndexE>
    1d06:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <_ZN7TwoWire14txBufferLengthE>
    1d0a:	08 95       	ret

00001d0c <_ZN7TwoWire15endTransmissionEh>:
    1d0c:	0f 93       	push	r16
    1d0e:	06 2f       	mov	r16, r22
    1d10:	21 e0       	ldi	r18, 0x01	; 1
    1d12:	40 91 9e 03 	lds	r20, 0x039E	; 0x80039e <_ZN7TwoWire14txBufferLengthE>
    1d16:	60 ea       	ldi	r22, 0xA0	; 160
    1d18:	73 e0       	ldi	r23, 0x03	; 3
    1d1a:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <_ZN7TwoWire9txAddressE>
    1d1e:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <twi_writeTo>
    1d22:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <_ZN7TwoWire13txBufferIndexE>
    1d26:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <_ZN7TwoWire14txBufferLengthE>
    1d2a:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <_ZN7TwoWire12transmittingE>
    1d2e:	0f 91       	pop	r16
    1d30:	08 95       	ret

00001d32 <_ZN7TwoWire11requestFromEhhmhh>:
    1d32:	4f 92       	push	r4
    1d34:	5f 92       	push	r5
    1d36:	6f 92       	push	r6
    1d38:	7f 92       	push	r7
    1d3a:	af 92       	push	r10
    1d3c:	bf 92       	push	r11
    1d3e:	cf 92       	push	r12
    1d40:	ef 92       	push	r14
    1d42:	ff 92       	push	r15
    1d44:	0f 93       	push	r16
    1d46:	1f 93       	push	r17
    1d48:	cf 93       	push	r28
    1d4a:	df 93       	push	r29
    1d4c:	5c 01       	movw	r10, r24
    1d4e:	f6 2e       	mov	r15, r22
    1d50:	d4 2f       	mov	r29, r20
    1d52:	28 01       	movw	r4, r16
    1d54:	39 01       	movw	r6, r18
    1d56:	ee 20       	and	r14, r14
    1d58:	21 f1       	breq	.+72     	; 0x1da2 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    1d5a:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_ZN7TwoWire17beginTransmissionEh>
    1d5e:	ce 2d       	mov	r28, r14
    1d60:	c4 30       	cpi	r28, 0x04	; 4
    1d62:	08 f0       	brcs	.+2      	; 0x1d66 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1d64:	c3 e0       	ldi	r28, 0x03	; 3
    1d66:	c1 50       	subi	r28, 0x01	; 1
    1d68:	c0 f0       	brcs	.+48     	; 0x1d9a <_ZN7TwoWire11requestFromEhhmhh+0x68>
    1d6a:	28 e0       	ldi	r18, 0x08	; 8
    1d6c:	c2 9f       	mul	r28, r18
    1d6e:	c0 01       	movw	r24, r0
    1d70:	11 24       	eor	r1, r1
    1d72:	a3 01       	movw	r20, r6
    1d74:	92 01       	movw	r18, r4
    1d76:	04 c0       	rjmp	.+8      	; 0x1d80 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    1d78:	56 95       	lsr	r21
    1d7a:	47 95       	ror	r20
    1d7c:	37 95       	ror	r19
    1d7e:	27 95       	ror	r18
    1d80:	8a 95       	dec	r24
    1d82:	d2 f7       	brpl	.-12     	; 0x1d78 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    1d84:	ca 01       	movw	r24, r20
    1d86:	b9 01       	movw	r22, r18
    1d88:	d5 01       	movw	r26, r10
    1d8a:	ed 91       	ld	r30, X+
    1d8c:	fc 91       	ld	r31, X
    1d8e:	01 90       	ld	r0, Z+
    1d90:	f0 81       	ld	r31, Z
    1d92:	e0 2d       	mov	r30, r0
    1d94:	c5 01       	movw	r24, r10
    1d96:	09 95       	icall
    1d98:	e6 cf       	rjmp	.-52     	; 0x1d66 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1d9a:	60 e0       	ldi	r22, 0x00	; 0
    1d9c:	c5 01       	movw	r24, r10
    1d9e:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <_ZN7TwoWire15endTransmissionEh>
    1da2:	4d 2f       	mov	r20, r29
    1da4:	d1 32       	cpi	r29, 0x21	; 33
    1da6:	08 f0       	brcs	.+2      	; 0x1daa <_ZN7TwoWire11requestFromEhhmhh+0x78>
    1da8:	40 e2       	ldi	r20, 0x20	; 32
    1daa:	2c 2d       	mov	r18, r12
    1dac:	63 ec       	ldi	r22, 0xC3	; 195
    1dae:	73 e0       	ldi	r23, 0x03	; 3
    1db0:	8f 2d       	mov	r24, r15
    1db2:	0e 94 8f 0b 	call	0x171e	; 0x171e <twi_readFrom>
    1db6:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <_ZN7TwoWire13rxBufferIndexE>
    1dba:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <_ZN7TwoWire14rxBufferLengthE>
    1dbe:	df 91       	pop	r29
    1dc0:	cf 91       	pop	r28
    1dc2:	1f 91       	pop	r17
    1dc4:	0f 91       	pop	r16
    1dc6:	ff 90       	pop	r15
    1dc8:	ef 90       	pop	r14
    1dca:	cf 90       	pop	r12
    1dcc:	bf 90       	pop	r11
    1dce:	af 90       	pop	r10
    1dd0:	7f 90       	pop	r7
    1dd2:	6f 90       	pop	r6
    1dd4:	5f 90       	pop	r5
    1dd6:	4f 90       	pop	r4
    1dd8:	08 95       	ret

00001dda <_ZN7TwoWire11requestFromEhhh>:
    1dda:	cf 92       	push	r12
    1ddc:	ef 92       	push	r14
    1dde:	0f 93       	push	r16
    1de0:	1f 93       	push	r17
    1de2:	c2 2e       	mov	r12, r18
    1de4:	e1 2c       	mov	r14, r1
    1de6:	00 e0       	ldi	r16, 0x00	; 0
    1de8:	10 e0       	ldi	r17, 0x00	; 0
    1dea:	98 01       	movw	r18, r16
    1dec:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <_ZN7TwoWire11requestFromEhhmhh>
    1df0:	1f 91       	pop	r17
    1df2:	0f 91       	pop	r16
    1df4:	ef 90       	pop	r14
    1df6:	cf 90       	pop	r12
    1df8:	08 95       	ret

00001dfa <_ZN7TwoWire11requestFromEii>:
    1dfa:	21 e0       	ldi	r18, 0x01	; 1
    1dfc:	0c 94 ed 0e 	jmp	0x1dda	; 0x1dda <_ZN7TwoWire11requestFromEhhh>

00001e00 <_ZN7TwoWire15endTransmissionEv>:
    1e00:	61 e0       	ldi	r22, 0x01	; 1
    1e02:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <_ZN7TwoWire15endTransmissionEh>

00001e06 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1e06:	8d e8       	ldi	r24, 0x8D	; 141
    1e08:	93 e0       	ldi	r25, 0x03	; 3
    1e0a:	0c 94 5a 0e 	jmp	0x1cb4	; 0x1cb4 <_ZN7TwoWireC1Ev>

00001e0e <__divsf3>:
    1e0e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__divsf3x>
    1e12:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__fp_round>
    1e16:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__fp_pscB>
    1e1a:	58 f0       	brcs	.+22     	; 0x1e32 <__divsf3+0x24>
    1e1c:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__fp_pscA>
    1e20:	40 f0       	brcs	.+16     	; 0x1e32 <__divsf3+0x24>
    1e22:	29 f4       	brne	.+10     	; 0x1e2e <__divsf3+0x20>
    1e24:	5f 3f       	cpi	r21, 0xFF	; 255
    1e26:	29 f0       	breq	.+10     	; 0x1e32 <__divsf3+0x24>
    1e28:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__fp_inf>
    1e2c:	51 11       	cpse	r21, r1
    1e2e:	0c 94 01 10 	jmp	0x2002	; 0x2002 <__fp_szero>
    1e32:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__fp_nan>

00001e36 <__divsf3x>:
    1e36:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__fp_split3>
    1e3a:	68 f3       	brcs	.-38     	; 0x1e16 <__divsf3+0x8>

00001e3c <__divsf3_pse>:
    1e3c:	99 23       	and	r25, r25
    1e3e:	b1 f3       	breq	.-20     	; 0x1e2c <__divsf3+0x1e>
    1e40:	55 23       	and	r21, r21
    1e42:	91 f3       	breq	.-28     	; 0x1e28 <__divsf3+0x1a>
    1e44:	95 1b       	sub	r25, r21
    1e46:	55 0b       	sbc	r21, r21
    1e48:	bb 27       	eor	r27, r27
    1e4a:	aa 27       	eor	r26, r26
    1e4c:	62 17       	cp	r22, r18
    1e4e:	73 07       	cpc	r23, r19
    1e50:	84 07       	cpc	r24, r20
    1e52:	38 f0       	brcs	.+14     	; 0x1e62 <__divsf3_pse+0x26>
    1e54:	9f 5f       	subi	r25, 0xFF	; 255
    1e56:	5f 4f       	sbci	r21, 0xFF	; 255
    1e58:	22 0f       	add	r18, r18
    1e5a:	33 1f       	adc	r19, r19
    1e5c:	44 1f       	adc	r20, r20
    1e5e:	aa 1f       	adc	r26, r26
    1e60:	a9 f3       	breq	.-22     	; 0x1e4c <__divsf3_pse+0x10>
    1e62:	35 d0       	rcall	.+106    	; 0x1ece <__divsf3_pse+0x92>
    1e64:	0e 2e       	mov	r0, r30
    1e66:	3a f0       	brmi	.+14     	; 0x1e76 <__divsf3_pse+0x3a>
    1e68:	e0 e8       	ldi	r30, 0x80	; 128
    1e6a:	32 d0       	rcall	.+100    	; 0x1ed0 <__divsf3_pse+0x94>
    1e6c:	91 50       	subi	r25, 0x01	; 1
    1e6e:	50 40       	sbci	r21, 0x00	; 0
    1e70:	e6 95       	lsr	r30
    1e72:	00 1c       	adc	r0, r0
    1e74:	ca f7       	brpl	.-14     	; 0x1e68 <__divsf3_pse+0x2c>
    1e76:	2b d0       	rcall	.+86     	; 0x1ece <__divsf3_pse+0x92>
    1e78:	fe 2f       	mov	r31, r30
    1e7a:	29 d0       	rcall	.+82     	; 0x1ece <__divsf3_pse+0x92>
    1e7c:	66 0f       	add	r22, r22
    1e7e:	77 1f       	adc	r23, r23
    1e80:	88 1f       	adc	r24, r24
    1e82:	bb 1f       	adc	r27, r27
    1e84:	26 17       	cp	r18, r22
    1e86:	37 07       	cpc	r19, r23
    1e88:	48 07       	cpc	r20, r24
    1e8a:	ab 07       	cpc	r26, r27
    1e8c:	b0 e8       	ldi	r27, 0x80	; 128
    1e8e:	09 f0       	breq	.+2      	; 0x1e92 <__divsf3_pse+0x56>
    1e90:	bb 0b       	sbc	r27, r27
    1e92:	80 2d       	mov	r24, r0
    1e94:	bf 01       	movw	r22, r30
    1e96:	ff 27       	eor	r31, r31
    1e98:	93 58       	subi	r25, 0x83	; 131
    1e9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e9c:	3a f0       	brmi	.+14     	; 0x1eac <__divsf3_pse+0x70>
    1e9e:	9e 3f       	cpi	r25, 0xFE	; 254
    1ea0:	51 05       	cpc	r21, r1
    1ea2:	78 f0       	brcs	.+30     	; 0x1ec2 <__divsf3_pse+0x86>
    1ea4:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__fp_inf>
    1ea8:	0c 94 01 10 	jmp	0x2002	; 0x2002 <__fp_szero>
    1eac:	5f 3f       	cpi	r21, 0xFF	; 255
    1eae:	e4 f3       	brlt	.-8      	; 0x1ea8 <__divsf3_pse+0x6c>
    1eb0:	98 3e       	cpi	r25, 0xE8	; 232
    1eb2:	d4 f3       	brlt	.-12     	; 0x1ea8 <__divsf3_pse+0x6c>
    1eb4:	86 95       	lsr	r24
    1eb6:	77 95       	ror	r23
    1eb8:	67 95       	ror	r22
    1eba:	b7 95       	ror	r27
    1ebc:	f7 95       	ror	r31
    1ebe:	9f 5f       	subi	r25, 0xFF	; 255
    1ec0:	c9 f7       	brne	.-14     	; 0x1eb4 <__divsf3_pse+0x78>
    1ec2:	88 0f       	add	r24, r24
    1ec4:	91 1d       	adc	r25, r1
    1ec6:	96 95       	lsr	r25
    1ec8:	87 95       	ror	r24
    1eca:	97 f9       	bld	r25, 7
    1ecc:	08 95       	ret
    1ece:	e1 e0       	ldi	r30, 0x01	; 1
    1ed0:	66 0f       	add	r22, r22
    1ed2:	77 1f       	adc	r23, r23
    1ed4:	88 1f       	adc	r24, r24
    1ed6:	bb 1f       	adc	r27, r27
    1ed8:	62 17       	cp	r22, r18
    1eda:	73 07       	cpc	r23, r19
    1edc:	84 07       	cpc	r24, r20
    1ede:	ba 07       	cpc	r27, r26
    1ee0:	20 f0       	brcs	.+8      	; 0x1eea <__divsf3_pse+0xae>
    1ee2:	62 1b       	sub	r22, r18
    1ee4:	73 0b       	sbc	r23, r19
    1ee6:	84 0b       	sbc	r24, r20
    1ee8:	ba 0b       	sbc	r27, r26
    1eea:	ee 1f       	adc	r30, r30
    1eec:	88 f7       	brcc	.-30     	; 0x1ed0 <__divsf3_pse+0x94>
    1eee:	e0 95       	com	r30
    1ef0:	08 95       	ret

00001ef2 <__floatunsisf>:
    1ef2:	e8 94       	clt
    1ef4:	09 c0       	rjmp	.+18     	; 0x1f08 <__floatsisf+0x12>

00001ef6 <__floatsisf>:
    1ef6:	97 fb       	bst	r25, 7
    1ef8:	3e f4       	brtc	.+14     	; 0x1f08 <__floatsisf+0x12>
    1efa:	90 95       	com	r25
    1efc:	80 95       	com	r24
    1efe:	70 95       	com	r23
    1f00:	61 95       	neg	r22
    1f02:	7f 4f       	sbci	r23, 0xFF	; 255
    1f04:	8f 4f       	sbci	r24, 0xFF	; 255
    1f06:	9f 4f       	sbci	r25, 0xFF	; 255
    1f08:	99 23       	and	r25, r25
    1f0a:	a9 f0       	breq	.+42     	; 0x1f36 <__floatsisf+0x40>
    1f0c:	f9 2f       	mov	r31, r25
    1f0e:	96 e9       	ldi	r25, 0x96	; 150
    1f10:	bb 27       	eor	r27, r27
    1f12:	93 95       	inc	r25
    1f14:	f6 95       	lsr	r31
    1f16:	87 95       	ror	r24
    1f18:	77 95       	ror	r23
    1f1a:	67 95       	ror	r22
    1f1c:	b7 95       	ror	r27
    1f1e:	f1 11       	cpse	r31, r1
    1f20:	f8 cf       	rjmp	.-16     	; 0x1f12 <__floatsisf+0x1c>
    1f22:	fa f4       	brpl	.+62     	; 0x1f62 <__floatsisf+0x6c>
    1f24:	bb 0f       	add	r27, r27
    1f26:	11 f4       	brne	.+4      	; 0x1f2c <__floatsisf+0x36>
    1f28:	60 ff       	sbrs	r22, 0
    1f2a:	1b c0       	rjmp	.+54     	; 0x1f62 <__floatsisf+0x6c>
    1f2c:	6f 5f       	subi	r22, 0xFF	; 255
    1f2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f30:	8f 4f       	sbci	r24, 0xFF	; 255
    1f32:	9f 4f       	sbci	r25, 0xFF	; 255
    1f34:	16 c0       	rjmp	.+44     	; 0x1f62 <__floatsisf+0x6c>
    1f36:	88 23       	and	r24, r24
    1f38:	11 f0       	breq	.+4      	; 0x1f3e <__floatsisf+0x48>
    1f3a:	96 e9       	ldi	r25, 0x96	; 150
    1f3c:	11 c0       	rjmp	.+34     	; 0x1f60 <__floatsisf+0x6a>
    1f3e:	77 23       	and	r23, r23
    1f40:	21 f0       	breq	.+8      	; 0x1f4a <__floatsisf+0x54>
    1f42:	9e e8       	ldi	r25, 0x8E	; 142
    1f44:	87 2f       	mov	r24, r23
    1f46:	76 2f       	mov	r23, r22
    1f48:	05 c0       	rjmp	.+10     	; 0x1f54 <__floatsisf+0x5e>
    1f4a:	66 23       	and	r22, r22
    1f4c:	71 f0       	breq	.+28     	; 0x1f6a <__floatsisf+0x74>
    1f4e:	96 e8       	ldi	r25, 0x86	; 134
    1f50:	86 2f       	mov	r24, r22
    1f52:	70 e0       	ldi	r23, 0x00	; 0
    1f54:	60 e0       	ldi	r22, 0x00	; 0
    1f56:	2a f0       	brmi	.+10     	; 0x1f62 <__floatsisf+0x6c>
    1f58:	9a 95       	dec	r25
    1f5a:	66 0f       	add	r22, r22
    1f5c:	77 1f       	adc	r23, r23
    1f5e:	88 1f       	adc	r24, r24
    1f60:	da f7       	brpl	.-10     	; 0x1f58 <__floatsisf+0x62>
    1f62:	88 0f       	add	r24, r24
    1f64:	96 95       	lsr	r25
    1f66:	87 95       	ror	r24
    1f68:	97 f9       	bld	r25, 7
    1f6a:	08 95       	ret

00001f6c <__fp_inf>:
    1f6c:	97 f9       	bld	r25, 7
    1f6e:	9f 67       	ori	r25, 0x7F	; 127
    1f70:	80 e8       	ldi	r24, 0x80	; 128
    1f72:	70 e0       	ldi	r23, 0x00	; 0
    1f74:	60 e0       	ldi	r22, 0x00	; 0
    1f76:	08 95       	ret

00001f78 <__fp_nan>:
    1f78:	9f ef       	ldi	r25, 0xFF	; 255
    1f7a:	80 ec       	ldi	r24, 0xC0	; 192
    1f7c:	08 95       	ret

00001f7e <__fp_pscA>:
    1f7e:	00 24       	eor	r0, r0
    1f80:	0a 94       	dec	r0
    1f82:	16 16       	cp	r1, r22
    1f84:	17 06       	cpc	r1, r23
    1f86:	18 06       	cpc	r1, r24
    1f88:	09 06       	cpc	r0, r25
    1f8a:	08 95       	ret

00001f8c <__fp_pscB>:
    1f8c:	00 24       	eor	r0, r0
    1f8e:	0a 94       	dec	r0
    1f90:	12 16       	cp	r1, r18
    1f92:	13 06       	cpc	r1, r19
    1f94:	14 06       	cpc	r1, r20
    1f96:	05 06       	cpc	r0, r21
    1f98:	08 95       	ret

00001f9a <__fp_round>:
    1f9a:	09 2e       	mov	r0, r25
    1f9c:	03 94       	inc	r0
    1f9e:	00 0c       	add	r0, r0
    1fa0:	11 f4       	brne	.+4      	; 0x1fa6 <__fp_round+0xc>
    1fa2:	88 23       	and	r24, r24
    1fa4:	52 f0       	brmi	.+20     	; 0x1fba <__fp_round+0x20>
    1fa6:	bb 0f       	add	r27, r27
    1fa8:	40 f4       	brcc	.+16     	; 0x1fba <__fp_round+0x20>
    1faa:	bf 2b       	or	r27, r31
    1fac:	11 f4       	brne	.+4      	; 0x1fb2 <__fp_round+0x18>
    1fae:	60 ff       	sbrs	r22, 0
    1fb0:	04 c0       	rjmp	.+8      	; 0x1fba <__fp_round+0x20>
    1fb2:	6f 5f       	subi	r22, 0xFF	; 255
    1fb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb6:	8f 4f       	sbci	r24, 0xFF	; 255
    1fb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1fba:	08 95       	ret

00001fbc <__fp_split3>:
    1fbc:	57 fd       	sbrc	r21, 7
    1fbe:	90 58       	subi	r25, 0x80	; 128
    1fc0:	44 0f       	add	r20, r20
    1fc2:	55 1f       	adc	r21, r21
    1fc4:	59 f0       	breq	.+22     	; 0x1fdc <__fp_splitA+0x10>
    1fc6:	5f 3f       	cpi	r21, 0xFF	; 255
    1fc8:	71 f0       	breq	.+28     	; 0x1fe6 <__fp_splitA+0x1a>
    1fca:	47 95       	ror	r20

00001fcc <__fp_splitA>:
    1fcc:	88 0f       	add	r24, r24
    1fce:	97 fb       	bst	r25, 7
    1fd0:	99 1f       	adc	r25, r25
    1fd2:	61 f0       	breq	.+24     	; 0x1fec <__fp_splitA+0x20>
    1fd4:	9f 3f       	cpi	r25, 0xFF	; 255
    1fd6:	79 f0       	breq	.+30     	; 0x1ff6 <__fp_splitA+0x2a>
    1fd8:	87 95       	ror	r24
    1fda:	08 95       	ret
    1fdc:	12 16       	cp	r1, r18
    1fde:	13 06       	cpc	r1, r19
    1fe0:	14 06       	cpc	r1, r20
    1fe2:	55 1f       	adc	r21, r21
    1fe4:	f2 cf       	rjmp	.-28     	; 0x1fca <__fp_split3+0xe>
    1fe6:	46 95       	lsr	r20
    1fe8:	f1 df       	rcall	.-30     	; 0x1fcc <__fp_splitA>
    1fea:	08 c0       	rjmp	.+16     	; 0x1ffc <__fp_splitA+0x30>
    1fec:	16 16       	cp	r1, r22
    1fee:	17 06       	cpc	r1, r23
    1ff0:	18 06       	cpc	r1, r24
    1ff2:	99 1f       	adc	r25, r25
    1ff4:	f1 cf       	rjmp	.-30     	; 0x1fd8 <__fp_splitA+0xc>
    1ff6:	86 95       	lsr	r24
    1ff8:	71 05       	cpc	r23, r1
    1ffa:	61 05       	cpc	r22, r1
    1ffc:	08 94       	sec
    1ffe:	08 95       	ret

00002000 <__fp_zero>:
    2000:	e8 94       	clt

00002002 <__fp_szero>:
    2002:	bb 27       	eor	r27, r27
    2004:	66 27       	eor	r22, r22
    2006:	77 27       	eor	r23, r23
    2008:	cb 01       	movw	r24, r22
    200a:	97 f9       	bld	r25, 7
    200c:	08 95       	ret

0000200e <__gesf2>:
    200e:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__fp_cmp>
    2012:	08 f4       	brcc	.+2      	; 0x2016 <__gesf2+0x8>
    2014:	8f ef       	ldi	r24, 0xFF	; 255
    2016:	08 95       	ret

00002018 <__mulsf3>:
    2018:	0e 94 1f 10 	call	0x203e	; 0x203e <__mulsf3x>
    201c:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__fp_round>
    2020:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__fp_pscA>
    2024:	38 f0       	brcs	.+14     	; 0x2034 <__mulsf3+0x1c>
    2026:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__fp_pscB>
    202a:	20 f0       	brcs	.+8      	; 0x2034 <__mulsf3+0x1c>
    202c:	95 23       	and	r25, r21
    202e:	11 f0       	breq	.+4      	; 0x2034 <__mulsf3+0x1c>
    2030:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__fp_inf>
    2034:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__fp_nan>
    2038:	11 24       	eor	r1, r1
    203a:	0c 94 01 10 	jmp	0x2002	; 0x2002 <__fp_szero>

0000203e <__mulsf3x>:
    203e:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__fp_split3>
    2042:	70 f3       	brcs	.-36     	; 0x2020 <__mulsf3+0x8>

00002044 <__mulsf3_pse>:
    2044:	95 9f       	mul	r25, r21
    2046:	c1 f3       	breq	.-16     	; 0x2038 <__mulsf3+0x20>
    2048:	95 0f       	add	r25, r21
    204a:	50 e0       	ldi	r21, 0x00	; 0
    204c:	55 1f       	adc	r21, r21
    204e:	62 9f       	mul	r22, r18
    2050:	f0 01       	movw	r30, r0
    2052:	72 9f       	mul	r23, r18
    2054:	bb 27       	eor	r27, r27
    2056:	f0 0d       	add	r31, r0
    2058:	b1 1d       	adc	r27, r1
    205a:	63 9f       	mul	r22, r19
    205c:	aa 27       	eor	r26, r26
    205e:	f0 0d       	add	r31, r0
    2060:	b1 1d       	adc	r27, r1
    2062:	aa 1f       	adc	r26, r26
    2064:	64 9f       	mul	r22, r20
    2066:	66 27       	eor	r22, r22
    2068:	b0 0d       	add	r27, r0
    206a:	a1 1d       	adc	r26, r1
    206c:	66 1f       	adc	r22, r22
    206e:	82 9f       	mul	r24, r18
    2070:	22 27       	eor	r18, r18
    2072:	b0 0d       	add	r27, r0
    2074:	a1 1d       	adc	r26, r1
    2076:	62 1f       	adc	r22, r18
    2078:	73 9f       	mul	r23, r19
    207a:	b0 0d       	add	r27, r0
    207c:	a1 1d       	adc	r26, r1
    207e:	62 1f       	adc	r22, r18
    2080:	83 9f       	mul	r24, r19
    2082:	a0 0d       	add	r26, r0
    2084:	61 1d       	adc	r22, r1
    2086:	22 1f       	adc	r18, r18
    2088:	74 9f       	mul	r23, r20
    208a:	33 27       	eor	r19, r19
    208c:	a0 0d       	add	r26, r0
    208e:	61 1d       	adc	r22, r1
    2090:	23 1f       	adc	r18, r19
    2092:	84 9f       	mul	r24, r20
    2094:	60 0d       	add	r22, r0
    2096:	21 1d       	adc	r18, r1
    2098:	82 2f       	mov	r24, r18
    209a:	76 2f       	mov	r23, r22
    209c:	6a 2f       	mov	r22, r26
    209e:	11 24       	eor	r1, r1
    20a0:	9f 57       	subi	r25, 0x7F	; 127
    20a2:	50 40       	sbci	r21, 0x00	; 0
    20a4:	9a f0       	brmi	.+38     	; 0x20cc <__mulsf3_pse+0x88>
    20a6:	f1 f0       	breq	.+60     	; 0x20e4 <__mulsf3_pse+0xa0>
    20a8:	88 23       	and	r24, r24
    20aa:	4a f0       	brmi	.+18     	; 0x20be <__mulsf3_pse+0x7a>
    20ac:	ee 0f       	add	r30, r30
    20ae:	ff 1f       	adc	r31, r31
    20b0:	bb 1f       	adc	r27, r27
    20b2:	66 1f       	adc	r22, r22
    20b4:	77 1f       	adc	r23, r23
    20b6:	88 1f       	adc	r24, r24
    20b8:	91 50       	subi	r25, 0x01	; 1
    20ba:	50 40       	sbci	r21, 0x00	; 0
    20bc:	a9 f7       	brne	.-22     	; 0x20a8 <__mulsf3_pse+0x64>
    20be:	9e 3f       	cpi	r25, 0xFE	; 254
    20c0:	51 05       	cpc	r21, r1
    20c2:	80 f0       	brcs	.+32     	; 0x20e4 <__mulsf3_pse+0xa0>
    20c4:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__fp_inf>
    20c8:	0c 94 01 10 	jmp	0x2002	; 0x2002 <__fp_szero>
    20cc:	5f 3f       	cpi	r21, 0xFF	; 255
    20ce:	e4 f3       	brlt	.-8      	; 0x20c8 <__mulsf3_pse+0x84>
    20d0:	98 3e       	cpi	r25, 0xE8	; 232
    20d2:	d4 f3       	brlt	.-12     	; 0x20c8 <__mulsf3_pse+0x84>
    20d4:	86 95       	lsr	r24
    20d6:	77 95       	ror	r23
    20d8:	67 95       	ror	r22
    20da:	b7 95       	ror	r27
    20dc:	f7 95       	ror	r31
    20de:	e7 95       	ror	r30
    20e0:	9f 5f       	subi	r25, 0xFF	; 255
    20e2:	c1 f7       	brne	.-16     	; 0x20d4 <__mulsf3_pse+0x90>
    20e4:	fe 2b       	or	r31, r30
    20e6:	88 0f       	add	r24, r24
    20e8:	91 1d       	adc	r25, r1
    20ea:	96 95       	lsr	r25
    20ec:	87 95       	ror	r24
    20ee:	97 f9       	bld	r25, 7
    20f0:	08 95       	ret

000020f2 <__fp_cmp>:
    20f2:	99 0f       	add	r25, r25
    20f4:	00 08       	sbc	r0, r0
    20f6:	55 0f       	add	r21, r21
    20f8:	aa 0b       	sbc	r26, r26
    20fa:	e0 e8       	ldi	r30, 0x80	; 128
    20fc:	fe ef       	ldi	r31, 0xFE	; 254
    20fe:	16 16       	cp	r1, r22
    2100:	17 06       	cpc	r1, r23
    2102:	e8 07       	cpc	r30, r24
    2104:	f9 07       	cpc	r31, r25
    2106:	c0 f0       	brcs	.+48     	; 0x2138 <__fp_cmp+0x46>
    2108:	12 16       	cp	r1, r18
    210a:	13 06       	cpc	r1, r19
    210c:	e4 07       	cpc	r30, r20
    210e:	f5 07       	cpc	r31, r21
    2110:	98 f0       	brcs	.+38     	; 0x2138 <__fp_cmp+0x46>
    2112:	62 1b       	sub	r22, r18
    2114:	73 0b       	sbc	r23, r19
    2116:	84 0b       	sbc	r24, r20
    2118:	95 0b       	sbc	r25, r21
    211a:	39 f4       	brne	.+14     	; 0x212a <__fp_cmp+0x38>
    211c:	0a 26       	eor	r0, r26
    211e:	61 f0       	breq	.+24     	; 0x2138 <__fp_cmp+0x46>
    2120:	23 2b       	or	r18, r19
    2122:	24 2b       	or	r18, r20
    2124:	25 2b       	or	r18, r21
    2126:	21 f4       	brne	.+8      	; 0x2130 <__fp_cmp+0x3e>
    2128:	08 95       	ret
    212a:	0a 26       	eor	r0, r26
    212c:	09 f4       	brne	.+2      	; 0x2130 <__fp_cmp+0x3e>
    212e:	a1 40       	sbci	r26, 0x01	; 1
    2130:	a6 95       	lsr	r26
    2132:	8f ef       	ldi	r24, 0xFF	; 255
    2134:	81 1d       	adc	r24, r1
    2136:	81 1d       	adc	r24, r1
    2138:	08 95       	ret

0000213a <__cxa_pure_virtual>:
    213a:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <abort>

0000213e <initVariant>:
    213e:	08 95       	ret

00002140 <main>:
    2140:	0e 94 81 17 	call	0x2f02	; 0x2f02 <init>
    2144:	0e 94 9f 10 	call	0x213e	; 0x213e <initVariant>
    2148:	83 ee       	ldi	r24, 0xE3	; 227
    214a:	93 e0       	ldi	r25, 0x03	; 3
    214c:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <_ZN10USBDevice_6attachEv>
    2150:	0e 94 9d 03 	call	0x73a	; 0x73a <setup>
    2154:	c0 e0       	ldi	r28, 0x00	; 0
    2156:	d0 e0       	ldi	r29, 0x00	; 0
    2158:	0e 94 de 03 	call	0x7bc	; 0x7bc <loop>
    215c:	20 97       	sbiw	r28, 0x00	; 0
    215e:	e1 f3       	breq	.-8      	; 0x2158 <main+0x18>
    2160:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2164:	f9 cf       	rjmp	.-14     	; 0x2158 <main+0x18>

00002166 <_ZN5Print5writeEPKhj>:
    2166:	cf 92       	push	r12
    2168:	df 92       	push	r13
    216a:	ef 92       	push	r14
    216c:	ff 92       	push	r15
    216e:	0f 93       	push	r16
    2170:	1f 93       	push	r17
    2172:	cf 93       	push	r28
    2174:	df 93       	push	r29
    2176:	6c 01       	movw	r12, r24
    2178:	7a 01       	movw	r14, r20
    217a:	8b 01       	movw	r16, r22
    217c:	c0 e0       	ldi	r28, 0x00	; 0
    217e:	d0 e0       	ldi	r29, 0x00	; 0
    2180:	ce 15       	cp	r28, r14
    2182:	df 05       	cpc	r29, r15
    2184:	81 f0       	breq	.+32     	; 0x21a6 <_ZN5Print5writeEPKhj+0x40>
    2186:	d8 01       	movw	r26, r16
    2188:	6d 91       	ld	r22, X+
    218a:	8d 01       	movw	r16, r26
    218c:	d6 01       	movw	r26, r12
    218e:	ed 91       	ld	r30, X+
    2190:	fc 91       	ld	r31, X
    2192:	01 90       	ld	r0, Z+
    2194:	f0 81       	ld	r31, Z
    2196:	e0 2d       	mov	r30, r0
    2198:	c6 01       	movw	r24, r12
    219a:	09 95       	icall
    219c:	89 2b       	or	r24, r25
    219e:	11 f0       	breq	.+4      	; 0x21a4 <_ZN5Print5writeEPKhj+0x3e>
    21a0:	21 96       	adiw	r28, 0x01	; 1
    21a2:	ee cf       	rjmp	.-36     	; 0x2180 <_ZN5Print5writeEPKhj+0x1a>
    21a4:	7e 01       	movw	r14, r28
    21a6:	c7 01       	movw	r24, r14
    21a8:	df 91       	pop	r29
    21aa:	cf 91       	pop	r28
    21ac:	1f 91       	pop	r17
    21ae:	0f 91       	pop	r16
    21b0:	ff 90       	pop	r15
    21b2:	ef 90       	pop	r14
    21b4:	df 90       	pop	r13
    21b6:	cf 90       	pop	r12
    21b8:	08 95       	ret

000021ba <_ZN5Print5writeEPKc>:
    21ba:	61 15       	cp	r22, r1
    21bc:	71 05       	cpc	r23, r1
    21be:	79 f0       	breq	.+30     	; 0x21de <_ZN5Print5writeEPKc+0x24>
    21c0:	fb 01       	movw	r30, r22
    21c2:	01 90       	ld	r0, Z+
    21c4:	00 20       	and	r0, r0
    21c6:	e9 f7       	brne	.-6      	; 0x21c2 <_ZN5Print5writeEPKc+0x8>
    21c8:	31 97       	sbiw	r30, 0x01	; 1
    21ca:	af 01       	movw	r20, r30
    21cc:	46 1b       	sub	r20, r22
    21ce:	57 0b       	sbc	r21, r23
    21d0:	dc 01       	movw	r26, r24
    21d2:	ed 91       	ld	r30, X+
    21d4:	fc 91       	ld	r31, X
    21d6:	02 80       	ldd	r0, Z+2	; 0x02
    21d8:	f3 81       	ldd	r31, Z+3	; 0x03
    21da:	e0 2d       	mov	r30, r0
    21dc:	09 94       	ijmp
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	08 95       	ret

000021e4 <_ZN5Print5printERK6String>:
    21e4:	db 01       	movw	r26, r22
    21e6:	14 96       	adiw	r26, 0x04	; 4
    21e8:	4d 91       	ld	r20, X+
    21ea:	5c 91       	ld	r21, X
    21ec:	15 97       	sbiw	r26, 0x05	; 5
    21ee:	6d 91       	ld	r22, X+
    21f0:	7c 91       	ld	r23, X
    21f2:	dc 01       	movw	r26, r24
    21f4:	ed 91       	ld	r30, X+
    21f6:	fc 91       	ld	r31, X
    21f8:	02 80       	ldd	r0, Z+2	; 0x02
    21fa:	f3 81       	ldd	r31, Z+3	; 0x03
    21fc:	e0 2d       	mov	r30, r0
    21fe:	09 94       	ijmp

00002200 <_ZN5Print5printEPKc>:
    2200:	0c 94 dd 10 	jmp	0x21ba	; 0x21ba <_ZN5Print5writeEPKc>

00002204 <_ZN5Print5printEc>:
    2204:	dc 01       	movw	r26, r24
    2206:	ed 91       	ld	r30, X+
    2208:	fc 91       	ld	r31, X
    220a:	01 90       	ld	r0, Z+
    220c:	f0 81       	ld	r31, Z
    220e:	e0 2d       	mov	r30, r0
    2210:	09 94       	ijmp

00002212 <_ZN5Print11printNumberEmh>:
    2212:	8f 92       	push	r8
    2214:	9f 92       	push	r9
    2216:	af 92       	push	r10
    2218:	bf 92       	push	r11
    221a:	ef 92       	push	r14
    221c:	ff 92       	push	r15
    221e:	0f 93       	push	r16
    2220:	1f 93       	push	r17
    2222:	cf 93       	push	r28
    2224:	df 93       	push	r29
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	a1 97       	sbiw	r28, 0x21	; 33
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	de bf       	out	0x3e, r29	; 62
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	cd bf       	out	0x3d, r28	; 61
    2236:	7c 01       	movw	r14, r24
    2238:	fa 01       	movw	r30, r20
    223a:	cb 01       	movw	r24, r22
    223c:	19 a2       	std	Y+33, r1	; 0x21
    223e:	22 30       	cpi	r18, 0x02	; 2
    2240:	08 f4       	brcc	.+2      	; 0x2244 <_ZN5Print11printNumberEmh+0x32>
    2242:	2a e0       	ldi	r18, 0x0A	; 10
    2244:	8e 01       	movw	r16, r28
    2246:	0f 5d       	subi	r16, 0xDF	; 223
    2248:	1f 4f       	sbci	r17, 0xFF	; 255
    224a:	82 2e       	mov	r8, r18
    224c:	91 2c       	mov	r9, r1
    224e:	a1 2c       	mov	r10, r1
    2250:	b1 2c       	mov	r11, r1
    2252:	bf 01       	movw	r22, r30
    2254:	a5 01       	movw	r20, r10
    2256:	94 01       	movw	r18, r8
    2258:	0e 94 ca 1b 	call	0x3794	; 0x3794 <__udivmodsi4>
    225c:	f9 01       	movw	r30, r18
    225e:	ca 01       	movw	r24, r20
    2260:	01 50       	subi	r16, 0x01	; 1
    2262:	11 09       	sbc	r17, r1
    2264:	6a 30       	cpi	r22, 0x0A	; 10
    2266:	10 f4       	brcc	.+4      	; 0x226c <_ZN5Print11printNumberEmh+0x5a>
    2268:	60 5d       	subi	r22, 0xD0	; 208
    226a:	01 c0       	rjmp	.+2      	; 0x226e <_ZN5Print11printNumberEmh+0x5c>
    226c:	69 5c       	subi	r22, 0xC9	; 201
    226e:	d8 01       	movw	r26, r16
    2270:	6c 93       	st	X, r22
    2272:	23 2b       	or	r18, r19
    2274:	24 2b       	or	r18, r20
    2276:	25 2b       	or	r18, r21
    2278:	61 f7       	brne	.-40     	; 0x2252 <_ZN5Print11printNumberEmh+0x40>
    227a:	b8 01       	movw	r22, r16
    227c:	c7 01       	movw	r24, r14
    227e:	0e 94 dd 10 	call	0x21ba	; 0x21ba <_ZN5Print5writeEPKc>
    2282:	a1 96       	adiw	r28, 0x21	; 33
    2284:	0f b6       	in	r0, 0x3f	; 63
    2286:	f8 94       	cli
    2288:	de bf       	out	0x3e, r29	; 62
    228a:	0f be       	out	0x3f, r0	; 63
    228c:	cd bf       	out	0x3d, r28	; 61
    228e:	df 91       	pop	r29
    2290:	cf 91       	pop	r28
    2292:	1f 91       	pop	r17
    2294:	0f 91       	pop	r16
    2296:	ff 90       	pop	r15
    2298:	ef 90       	pop	r14
    229a:	bf 90       	pop	r11
    229c:	af 90       	pop	r10
    229e:	9f 90       	pop	r9
    22a0:	8f 90       	pop	r8
    22a2:	08 95       	ret

000022a4 <_ZN5Print5printEmi>:
    22a4:	21 15       	cp	r18, r1
    22a6:	31 05       	cpc	r19, r1
    22a8:	41 f4       	brne	.+16     	; 0x22ba <_ZN5Print5printEmi+0x16>
    22aa:	dc 01       	movw	r26, r24
    22ac:	ed 91       	ld	r30, X+
    22ae:	fc 91       	ld	r31, X
    22b0:	01 90       	ld	r0, Z+
    22b2:	f0 81       	ld	r31, Z
    22b4:	e0 2d       	mov	r30, r0
    22b6:	64 2f       	mov	r22, r20
    22b8:	09 94       	ijmp
    22ba:	0c 94 09 11 	jmp	0x2212	; 0x2212 <_ZN5Print11printNumberEmh>

000022be <_ZN5Print5printEji>:
    22be:	9a 01       	movw	r18, r20
    22c0:	ab 01       	movw	r20, r22
    22c2:	60 e0       	ldi	r22, 0x00	; 0
    22c4:	70 e0       	ldi	r23, 0x00	; 0
    22c6:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <_ZN5Print5printEmi>

000022ca <_ZN5Print5printEli>:
    22ca:	cf 92       	push	r12
    22cc:	df 92       	push	r13
    22ce:	ef 92       	push	r14
    22d0:	ff 92       	push	r15
    22d2:	0f 93       	push	r16
    22d4:	1f 93       	push	r17
    22d6:	cf 93       	push	r28
    22d8:	df 93       	push	r29
    22da:	21 15       	cp	r18, r1
    22dc:	31 05       	cpc	r19, r1
    22de:	81 f4       	brne	.+32     	; 0x2300 <_ZN5Print5printEli+0x36>
    22e0:	dc 01       	movw	r26, r24
    22e2:	ed 91       	ld	r30, X+
    22e4:	fc 91       	ld	r31, X
    22e6:	01 90       	ld	r0, Z+
    22e8:	f0 81       	ld	r31, Z
    22ea:	e0 2d       	mov	r30, r0
    22ec:	64 2f       	mov	r22, r20
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	1f 91       	pop	r17
    22f4:	0f 91       	pop	r16
    22f6:	ff 90       	pop	r15
    22f8:	ef 90       	pop	r14
    22fa:	df 90       	pop	r13
    22fc:	cf 90       	pop	r12
    22fe:	09 94       	ijmp
    2300:	2a 30       	cpi	r18, 0x0A	; 10
    2302:	31 05       	cpc	r19, r1
    2304:	01 f5       	brne	.+64     	; 0x2346 <_ZN5Print5printEli+0x7c>
    2306:	77 ff       	sbrs	r23, 7
    2308:	1d c0       	rjmp	.+58     	; 0x2344 <_ZN5Print5printEli+0x7a>
    230a:	6a 01       	movw	r12, r20
    230c:	7b 01       	movw	r14, r22
    230e:	ec 01       	movw	r28, r24
    2310:	6d e2       	ldi	r22, 0x2D	; 45
    2312:	0e 94 02 11 	call	0x2204	; 0x2204 <_ZN5Print5printEc>
    2316:	8c 01       	movw	r16, r24
    2318:	44 27       	eor	r20, r20
    231a:	55 27       	eor	r21, r21
    231c:	ba 01       	movw	r22, r20
    231e:	4c 19       	sub	r20, r12
    2320:	5d 09       	sbc	r21, r13
    2322:	6e 09       	sbc	r22, r14
    2324:	7f 09       	sbc	r23, r15
    2326:	2a e0       	ldi	r18, 0x0A	; 10
    2328:	ce 01       	movw	r24, r28
    232a:	0e 94 09 11 	call	0x2212	; 0x2212 <_ZN5Print11printNumberEmh>
    232e:	80 0f       	add	r24, r16
    2330:	91 1f       	adc	r25, r17
    2332:	df 91       	pop	r29
    2334:	cf 91       	pop	r28
    2336:	1f 91       	pop	r17
    2338:	0f 91       	pop	r16
    233a:	ff 90       	pop	r15
    233c:	ef 90       	pop	r14
    233e:	df 90       	pop	r13
    2340:	cf 90       	pop	r12
    2342:	08 95       	ret
    2344:	2a e0       	ldi	r18, 0x0A	; 10
    2346:	df 91       	pop	r29
    2348:	cf 91       	pop	r28
    234a:	1f 91       	pop	r17
    234c:	0f 91       	pop	r16
    234e:	ff 90       	pop	r15
    2350:	ef 90       	pop	r14
    2352:	df 90       	pop	r13
    2354:	cf 90       	pop	r12
    2356:	0c 94 09 11 	jmp	0x2212	; 0x2212 <_ZN5Print11printNumberEmh>

0000235a <_ZN5Print5printEii>:
    235a:	9a 01       	movw	r18, r20
    235c:	ab 01       	movw	r20, r22
    235e:	77 0f       	add	r23, r23
    2360:	66 0b       	sbc	r22, r22
    2362:	77 0b       	sbc	r23, r23
    2364:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <_ZN5Print5printEli>

00002368 <_ZN5Print10printFloatEdh>:
    2368:	7f 92       	push	r7
    236a:	8f 92       	push	r8
    236c:	9f 92       	push	r9
    236e:	af 92       	push	r10
    2370:	bf 92       	push	r11
    2372:	cf 92       	push	r12
    2374:	df 92       	push	r13
    2376:	ef 92       	push	r14
    2378:	ff 92       	push	r15
    237a:	0f 93       	push	r16
    237c:	1f 93       	push	r17
    237e:	cf 93       	push	r28
    2380:	df 93       	push	r29
    2382:	8c 01       	movw	r16, r24
    2384:	6a 01       	movw	r12, r20
    2386:	7b 01       	movw	r14, r22
    2388:	72 2e       	mov	r7, r18
    238a:	9a 01       	movw	r18, r20
    238c:	ab 01       	movw	r20, r22
    238e:	c7 01       	movw	r24, r14
    2390:	b6 01       	movw	r22, r12
    2392:	0e 94 b1 1b 	call	0x3762	; 0x3762 <__unordsf2>
    2396:	88 23       	and	r24, r24
    2398:	19 f0       	breq	.+6      	; 0x23a0 <_ZN5Print10printFloatEdh+0x38>
    239a:	6f e2       	ldi	r22, 0x2F	; 47
    239c:	72 e0       	ldi	r23, 0x02	; 2
    239e:	27 c0       	rjmp	.+78     	; 0x23ee <_ZN5Print10printFloatEdh+0x86>
    23a0:	46 01       	movw	r8, r12
    23a2:	57 01       	movw	r10, r14
    23a4:	e8 94       	clt
    23a6:	b7 f8       	bld	r11, 7
    23a8:	2f ef       	ldi	r18, 0xFF	; 255
    23aa:	3f ef       	ldi	r19, 0xFF	; 255
    23ac:	4f e7       	ldi	r20, 0x7F	; 127
    23ae:	5f e7       	ldi	r21, 0x7F	; 127
    23b0:	c5 01       	movw	r24, r10
    23b2:	b4 01       	movw	r22, r8
    23b4:	0e 94 b1 1b 	call	0x3762	; 0x3762 <__unordsf2>
    23b8:	81 11       	cpse	r24, r1
    23ba:	0d c0       	rjmp	.+26     	; 0x23d6 <_ZN5Print10printFloatEdh+0x6e>
    23bc:	2f ef       	ldi	r18, 0xFF	; 255
    23be:	3f ef       	ldi	r19, 0xFF	; 255
    23c0:	4f e7       	ldi	r20, 0x7F	; 127
    23c2:	5f e7       	ldi	r21, 0x7F	; 127
    23c4:	c5 01       	movw	r24, r10
    23c6:	b4 01       	movw	r22, r8
    23c8:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <__cmpsf2>
    23cc:	18 16       	cp	r1, r24
    23ce:	1c f4       	brge	.+6      	; 0x23d6 <_ZN5Print10printFloatEdh+0x6e>
    23d0:	63 e3       	ldi	r22, 0x33	; 51
    23d2:	72 e0       	ldi	r23, 0x02	; 2
    23d4:	0c c0       	rjmp	.+24     	; 0x23ee <_ZN5Print10printFloatEdh+0x86>
    23d6:	2f ef       	ldi	r18, 0xFF	; 255
    23d8:	3f ef       	ldi	r19, 0xFF	; 255
    23da:	4f e7       	ldi	r20, 0x7F	; 127
    23dc:	5f e4       	ldi	r21, 0x4F	; 79
    23de:	c7 01       	movw	r24, r14
    23e0:	b6 01       	movw	r22, r12
    23e2:	0e 94 07 10 	call	0x200e	; 0x200e <__gesf2>
    23e6:	18 16       	cp	r1, r24
    23e8:	94 f4       	brge	.+36     	; 0x240e <_ZN5Print10printFloatEdh+0xa6>
    23ea:	67 e3       	ldi	r22, 0x37	; 55
    23ec:	72 e0       	ldi	r23, 0x02	; 2
    23ee:	c8 01       	movw	r24, r16
    23f0:	df 91       	pop	r29
    23f2:	cf 91       	pop	r28
    23f4:	1f 91       	pop	r17
    23f6:	0f 91       	pop	r16
    23f8:	ff 90       	pop	r15
    23fa:	ef 90       	pop	r14
    23fc:	df 90       	pop	r13
    23fe:	cf 90       	pop	r12
    2400:	bf 90       	pop	r11
    2402:	af 90       	pop	r10
    2404:	9f 90       	pop	r9
    2406:	8f 90       	pop	r8
    2408:	7f 90       	pop	r7
    240a:	0c 94 dd 10 	jmp	0x21ba	; 0x21ba <_ZN5Print5writeEPKc>
    240e:	2f ef       	ldi	r18, 0xFF	; 255
    2410:	3f ef       	ldi	r19, 0xFF	; 255
    2412:	4f e7       	ldi	r20, 0x7F	; 127
    2414:	5f ec       	ldi	r21, 0xCF	; 207
    2416:	c7 01       	movw	r24, r14
    2418:	b6 01       	movw	r22, r12
    241a:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <__cmpsf2>
    241e:	87 fd       	sbrc	r24, 7
    2420:	e4 cf       	rjmp	.-56     	; 0x23ea <_ZN5Print10printFloatEdh+0x82>
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	a9 01       	movw	r20, r18
    2428:	c7 01       	movw	r24, r14
    242a:	b6 01       	movw	r22, r12
    242c:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <__cmpsf2>
    2430:	87 ff       	sbrs	r24, 7
    2432:	0a c0       	rjmp	.+20     	; 0x2448 <_ZN5Print10printFloatEdh+0xe0>
    2434:	6d e2       	ldi	r22, 0x2D	; 45
    2436:	c8 01       	movw	r24, r16
    2438:	0e 94 02 11 	call	0x2204	; 0x2204 <_ZN5Print5printEc>
    243c:	ec 01       	movw	r28, r24
    243e:	f7 fa       	bst	r15, 7
    2440:	f0 94       	com	r15
    2442:	f7 f8       	bld	r15, 7
    2444:	f0 94       	com	r15
    2446:	02 c0       	rjmp	.+4      	; 0x244c <_ZN5Print10printFloatEdh+0xe4>
    2448:	c0 e0       	ldi	r28, 0x00	; 0
    244a:	d0 e0       	ldi	r29, 0x00	; 0
    244c:	b1 2c       	mov	r11, r1
    244e:	60 e0       	ldi	r22, 0x00	; 0
    2450:	70 e0       	ldi	r23, 0x00	; 0
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	9f e3       	ldi	r25, 0x3F	; 63
    2456:	7b 14       	cp	r7, r11
    2458:	41 f0       	breq	.+16     	; 0x246a <_ZN5Print10printFloatEdh+0x102>
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	40 e2       	ldi	r20, 0x20	; 32
    2460:	51 e4       	ldi	r21, 0x41	; 65
    2462:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__divsf3>
    2466:	b3 94       	inc	r11
    2468:	f6 cf       	rjmp	.-20     	; 0x2456 <_ZN5Print10printFloatEdh+0xee>
    246a:	a7 01       	movw	r20, r14
    246c:	96 01       	movw	r18, r12
    246e:	0e 94 11 1b 	call	0x3622	; 0x3622 <__addsf3>
    2472:	6b 01       	movw	r12, r22
    2474:	7c 01       	movw	r14, r24
    2476:	0e 94 82 1b 	call	0x3704	; 0x3704 <__fixunssfsi>
    247a:	4b 01       	movw	r8, r22
    247c:	5c 01       	movw	r10, r24
    247e:	2a e0       	ldi	r18, 0x0A	; 10
    2480:	ab 01       	movw	r20, r22
    2482:	bc 01       	movw	r22, r24
    2484:	c8 01       	movw	r24, r16
    2486:	0e 94 09 11 	call	0x2212	; 0x2212 <_ZN5Print11printNumberEmh>
    248a:	c8 0f       	add	r28, r24
    248c:	d9 1f       	adc	r29, r25
    248e:	77 20       	and	r7, r7
    2490:	b9 f1       	breq	.+110    	; 0x2500 <_ZN5Print10printFloatEdh+0x198>
    2492:	c5 01       	movw	r24, r10
    2494:	b4 01       	movw	r22, r8
    2496:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__floatunsisf>
    249a:	9b 01       	movw	r18, r22
    249c:	ac 01       	movw	r20, r24
    249e:	c7 01       	movw	r24, r14
    24a0:	b6 01       	movw	r22, r12
    24a2:	0e 94 10 1b 	call	0x3620	; 0x3620 <__subsf3>
    24a6:	6b 01       	movw	r12, r22
    24a8:	7c 01       	movw	r14, r24
    24aa:	6e e2       	ldi	r22, 0x2E	; 46
    24ac:	c8 01       	movw	r24, r16
    24ae:	0e 94 02 11 	call	0x2204	; 0x2204 <_ZN5Print5printEc>
    24b2:	c8 0f       	add	r28, r24
    24b4:	d9 1f       	adc	r29, r25
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	40 e2       	ldi	r20, 0x20	; 32
    24bc:	51 e4       	ldi	r21, 0x41	; 65
    24be:	c7 01       	movw	r24, r14
    24c0:	b6 01       	movw	r22, r12
    24c2:	0e 94 0c 10 	call	0x2018	; 0x2018 <__mulsf3>
    24c6:	4b 01       	movw	r8, r22
    24c8:	5c 01       	movw	r10, r24
    24ca:	0e 94 82 1b 	call	0x3704	; 0x3704 <__fixunssfsi>
    24ce:	6b 01       	movw	r12, r22
    24d0:	7c 01       	movw	r14, r24
    24d2:	4a e0       	ldi	r20, 0x0A	; 10
    24d4:	50 e0       	ldi	r21, 0x00	; 0
    24d6:	c8 01       	movw	r24, r16
    24d8:	0e 94 5f 11 	call	0x22be	; 0x22be <_ZN5Print5printEji>
    24dc:	c8 0f       	add	r28, r24
    24de:	d9 1f       	adc	r29, r25
    24e0:	b6 01       	movw	r22, r12
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__floatunsisf>
    24ea:	9b 01       	movw	r18, r22
    24ec:	ac 01       	movw	r20, r24
    24ee:	c5 01       	movw	r24, r10
    24f0:	b4 01       	movw	r22, r8
    24f2:	0e 94 10 1b 	call	0x3620	; 0x3620 <__subsf3>
    24f6:	6b 01       	movw	r12, r22
    24f8:	7c 01       	movw	r14, r24
    24fa:	7a 94       	dec	r7
    24fc:	71 10       	cpse	r7, r1
    24fe:	db cf       	rjmp	.-74     	; 0x24b6 <_ZN5Print10printFloatEdh+0x14e>
    2500:	ce 01       	movw	r24, r28
    2502:	df 91       	pop	r29
    2504:	cf 91       	pop	r28
    2506:	1f 91       	pop	r17
    2508:	0f 91       	pop	r16
    250a:	ff 90       	pop	r15
    250c:	ef 90       	pop	r14
    250e:	df 90       	pop	r13
    2510:	cf 90       	pop	r12
    2512:	bf 90       	pop	r11
    2514:	af 90       	pop	r10
    2516:	9f 90       	pop	r9
    2518:	8f 90       	pop	r8
    251a:	7f 90       	pop	r7
    251c:	08 95       	ret

0000251e <_ZN5Print5printEdi>:
    251e:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <_ZN5Print10printFloatEdh>

00002522 <_ZL4RecvPVhh>:
    2522:	61 50       	subi	r22, 0x01	; 1
    2524:	30 f0       	brcs	.+12     	; 0x2532 <_ZL4RecvPVhh+0x10>
    2526:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    252a:	fc 01       	movw	r30, r24
    252c:	20 83       	st	Z, r18
    252e:	01 96       	adiw	r24, 0x01	; 1
    2530:	f8 cf       	rjmp	.-16     	; 0x2522 <_ZL4RecvPVhh>
    2532:	28 98       	cbi	0x05, 0	; 5
    2534:	84 e6       	ldi	r24, 0x64	; 100
    2536:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <RxLEDPulse>
    253a:	08 95       	ret

0000253c <_ZL11SendControlh>:
    253c:	40 91 e6 03 	lds	r20, 0x03E6	; 0x8003e6 <_ZL6_cmark>
    2540:	50 91 e7 03 	lds	r21, 0x03E7	; 0x8003e7 <_ZL6_cmark+0x1>
    2544:	20 91 e4 03 	lds	r18, 0x03E4	; 0x8003e4 <_ZL5_cend>
    2548:	30 91 e5 03 	lds	r19, 0x03E5	; 0x8003e5 <_ZL5_cend+0x1>
    254c:	42 17       	cp	r20, r18
    254e:	53 07       	cpc	r21, r19
    2550:	b4 f4       	brge	.+44     	; 0x257e <_ZL11SendControlh+0x42>
    2552:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2556:	95 70       	andi	r25, 0x05	; 5
    2558:	e1 f3       	breq	.-8      	; 0x2552 <_ZL11SendControlh+0x16>
    255a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    255e:	92 fd       	sbrc	r25, 2
    2560:	19 c0       	rjmp	.+50     	; 0x2594 <_ZL11SendControlh+0x58>
    2562:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2566:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <_ZL6_cmark>
    256a:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <_ZL6_cmark+0x1>
    256e:	01 96       	adiw	r24, 0x01	; 1
    2570:	8f 73       	andi	r24, 0x3F	; 63
    2572:	99 27       	eor	r25, r25
    2574:	89 2b       	or	r24, r25
    2576:	19 f4       	brne	.+6      	; 0x257e <_ZL11SendControlh+0x42>
    2578:	8e ef       	ldi	r24, 0xFE	; 254
    257a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    257e:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <_ZL6_cmark>
    2582:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <_ZL6_cmark+0x1>
    2586:	01 96       	adiw	r24, 0x01	; 1
    2588:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <_ZL6_cmark+0x1>
    258c:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <_ZL6_cmark>
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	08 95       	ret
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	08 95       	ret

00002598 <_ZL24USB_SendStringDescriptorPKhhh>:
    2598:	df 92       	push	r13
    259a:	ef 92       	push	r14
    259c:	ff 92       	push	r15
    259e:	0f 93       	push	r16
    25a0:	1f 93       	push	r17
    25a2:	cf 93       	push	r28
    25a4:	df 93       	push	r29
    25a6:	d8 2e       	mov	r13, r24
    25a8:	f9 2e       	mov	r15, r25
    25aa:	e4 2e       	mov	r14, r20
    25ac:	06 2f       	mov	r16, r22
    25ae:	10 e0       	ldi	r17, 0x00	; 0
    25b0:	c8 01       	movw	r24, r16
    25b2:	01 96       	adiw	r24, 0x01	; 1
    25b4:	88 0f       	add	r24, r24
    25b6:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZL11SendControlh>
    25ba:	83 e0       	ldi	r24, 0x03	; 3
    25bc:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZL11SendControlh>
    25c0:	cd 2d       	mov	r28, r13
    25c2:	df 2d       	mov	r29, r15
    25c4:	0c 0f       	add	r16, r28
    25c6:	1d 1f       	adc	r17, r29
    25c8:	c0 17       	cp	r28, r16
    25ca:	d1 07       	cpc	r29, r17
    25cc:	89 f0       	breq	.+34     	; 0x25f0 <_ZL24USB_SendStringDescriptorPKhhh+0x58>
    25ce:	e7 fe       	sbrs	r14, 7
    25d0:	03 c0       	rjmp	.+6      	; 0x25d8 <_ZL24USB_SendStringDescriptorPKhhh+0x40>
    25d2:	fe 01       	movw	r30, r28
    25d4:	84 91       	lpm	r24, Z
    25d6:	01 c0       	rjmp	.+2      	; 0x25da <_ZL24USB_SendStringDescriptorPKhhh+0x42>
    25d8:	88 81       	ld	r24, Y
    25da:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZL11SendControlh>
    25de:	f8 2e       	mov	r15, r24
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZL11SendControlh>
    25e6:	8f 21       	and	r24, r15
    25e8:	21 96       	adiw	r28, 0x01	; 1
    25ea:	81 11       	cpse	r24, r1
    25ec:	ed cf       	rjmp	.-38     	; 0x25c8 <_ZL24USB_SendStringDescriptorPKhhh+0x30>
    25ee:	01 c0       	rjmp	.+2      	; 0x25f2 <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	df 91       	pop	r29
    25f4:	cf 91       	pop	r28
    25f6:	1f 91       	pop	r17
    25f8:	0f 91       	pop	r16
    25fa:	ff 90       	pop	r15
    25fc:	ef 90       	pop	r14
    25fe:	df 90       	pop	r13
    2600:	08 95       	ret

00002602 <_ZL15USB_ClockEnablev>:
    2602:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    2606:	81 60       	ori	r24, 0x01	; 1
    2608:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    260c:	80 ea       	ldi	r24, 0xA0	; 160
    260e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2612:	89 b5       	in	r24, 0x29	; 41
    2614:	80 61       	ori	r24, 0x10	; 16
    2616:	89 bd       	out	0x29, r24	; 41
    2618:	89 b5       	in	r24, 0x29	; 41
    261a:	82 60       	ori	r24, 0x02	; 2
    261c:	89 bd       	out	0x29, r24	; 41
    261e:	09 b4       	in	r0, 0x29	; 41
    2620:	00 fe       	sbrs	r0, 0
    2622:	fd cf       	rjmp	.-6      	; 0x261e <_ZL15USB_ClockEnablev+0x1c>
    2624:	61 e0       	ldi	r22, 0x01	; 1
    2626:	70 e0       	ldi	r23, 0x00	; 0
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <delay>
    2630:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2634:	8f 7c       	andi	r24, 0xCF	; 207
    2636:	80 61       	ori	r24, 0x10	; 16
    2638:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    263c:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2640:	80 7f       	andi	r24, 0xF0	; 240
    2642:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2646:	08 95       	ret

00002648 <_ZL14SendInterfacesv>:
    2648:	cf 93       	push	r28
    264a:	df 93       	push	r29
    264c:	1f 92       	push	r1
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	19 82       	std	Y+1, r1	; 0x01
    2654:	ce 01       	movw	r24, r28
    2656:	01 96       	adiw	r24, 0x01	; 1
    2658:	0e 94 c8 19 	call	0x3390	; 0x3390 <_Z16CDC_GetInterfacePh>
    265c:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <_Z12PluggableUSBv>
    2660:	be 01       	movw	r22, r28
    2662:	6f 5f       	subi	r22, 0xFF	; 255
    2664:	7f 4f       	sbci	r23, 0xFF	; 255
    2666:	0e 94 77 1a 	call	0x34ee	; 0x34ee <_ZN13PluggableUSB_12getInterfaceEPh>
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	0f 90       	pop	r0
    266e:	df 91       	pop	r29
    2670:	cf 91       	pop	r28
    2672:	08 95       	ret

00002674 <_ZN6LockEPC1Eh>:
    2674:	2f b7       	in	r18, 0x3f	; 63
    2676:	fc 01       	movw	r30, r24
    2678:	20 83       	st	Z, r18
    267a:	f8 94       	cli
    267c:	67 70       	andi	r22, 0x07	; 7
    267e:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2682:	08 95       	ret

00002684 <_Z13USB_Availableh>:
    2684:	cf 93       	push	r28
    2686:	df 93       	push	r29
    2688:	1f 92       	push	r1
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
    268e:	68 2f       	mov	r22, r24
    2690:	ce 01       	movw	r24, r28
    2692:	01 96       	adiw	r24, 0x01	; 1
    2694:	0e 94 3a 13 	call	0x2674	; 0x2674 <_ZN6LockEPC1Eh>
    2698:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    269c:	99 81       	ldd	r25, Y+1	; 0x01
    269e:	9f bf       	out	0x3f, r25	; 63
    26a0:	0f 90       	pop	r0
    26a2:	df 91       	pop	r29
    26a4:	cf 91       	pop	r28
    26a6:	08 95       	ret

000026a8 <_Z8USB_RecvhPvi>:
    26a8:	ef 92       	push	r14
    26aa:	ff 92       	push	r15
    26ac:	0f 93       	push	r16
    26ae:	1f 93       	push	r17
    26b0:	cf 93       	push	r28
    26b2:	df 93       	push	r29
    26b4:	1f 92       	push	r1
    26b6:	cd b7       	in	r28, 0x3d	; 61
    26b8:	de b7       	in	r29, 0x3e	; 62
    26ba:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <_usbConfiguration>
    26be:	99 23       	and	r25, r25
    26c0:	11 f0       	breq	.+4      	; 0x26c6 <_Z8USB_RecvhPvi+0x1e>
    26c2:	57 ff       	sbrs	r21, 7
    26c4:	03 c0       	rjmp	.+6      	; 0x26cc <_Z8USB_RecvhPvi+0x24>
    26c6:	8f ef       	ldi	r24, 0xFF	; 255
    26c8:	9f ef       	ldi	r25, 0xFF	; 255
    26ca:	29 c0       	rjmp	.+82     	; 0x271e <_Z8USB_RecvhPvi+0x76>
    26cc:	8a 01       	movw	r16, r20
    26ce:	7b 01       	movw	r14, r22
    26d0:	68 2f       	mov	r22, r24
    26d2:	ce 01       	movw	r24, r28
    26d4:	01 96       	adiw	r24, 0x01	; 1
    26d6:	0e 94 3a 13 	call	0x2674	; 0x2674 <_ZN6LockEPC1Eh>
    26da:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	02 17       	cp	r16, r18
    26e2:	13 07       	cpc	r17, r19
    26e4:	0c f4       	brge	.+2      	; 0x26e8 <_Z8USB_RecvhPvi+0x40>
    26e6:	98 01       	movw	r18, r16
    26e8:	82 2f       	mov	r24, r18
    26ea:	f7 01       	movw	r30, r14
    26ec:	94 e6       	ldi	r25, 0x64	; 100
    26ee:	81 50       	subi	r24, 0x01	; 1
    26f0:	38 f0       	brcs	.+14     	; 0x2700 <_Z8USB_RecvhPvi+0x58>
    26f2:	28 98       	cbi	0x05, 0	; 5
    26f4:	90 93 eb 03 	sts	0x03EB, r25	; 0x8003eb <RxLEDPulse>
    26f8:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    26fc:	41 93       	st	Z+, r20
    26fe:	f7 cf       	rjmp	.-18     	; 0x26ee <_Z8USB_RecvhPvi+0x46>
    2700:	21 15       	cp	r18, r1
    2702:	31 05       	cpc	r19, r1
    2704:	21 f0       	breq	.+8      	; 0x270e <_Z8USB_RecvhPvi+0x66>
    2706:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    270a:	88 23       	and	r24, r24
    270c:	21 f0       	breq	.+8      	; 0x2716 <_Z8USB_RecvhPvi+0x6e>
    270e:	89 81       	ldd	r24, Y+1	; 0x01
    2710:	8f bf       	out	0x3f, r24	; 63
    2712:	c9 01       	movw	r24, r18
    2714:	04 c0       	rjmp	.+8      	; 0x271e <_Z8USB_RecvhPvi+0x76>
    2716:	8b e6       	ldi	r24, 0x6B	; 107
    2718:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    271c:	f8 cf       	rjmp	.-16     	; 0x270e <_Z8USB_RecvhPvi+0x66>
    271e:	0f 90       	pop	r0
    2720:	df 91       	pop	r29
    2722:	cf 91       	pop	r28
    2724:	1f 91       	pop	r17
    2726:	0f 91       	pop	r16
    2728:	ff 90       	pop	r15
    272a:	ef 90       	pop	r14
    272c:	08 95       	ret

0000272e <_Z8USB_Recvh>:
    272e:	cf 93       	push	r28
    2730:	df 93       	push	r29
    2732:	1f 92       	push	r1
    2734:	cd b7       	in	r28, 0x3d	; 61
    2736:	de b7       	in	r29, 0x3e	; 62
    2738:	41 e0       	ldi	r20, 0x01	; 1
    273a:	50 e0       	ldi	r21, 0x00	; 0
    273c:	be 01       	movw	r22, r28
    273e:	6f 5f       	subi	r22, 0xFF	; 255
    2740:	7f 4f       	sbci	r23, 0xFF	; 255
    2742:	0e 94 54 13 	call	0x26a8	; 0x26a8 <_Z8USB_RecvhPvi>
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	19 f4       	brne	.+6      	; 0x2750 <_Z8USB_Recvh+0x22>
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	02 c0       	rjmp	.+4      	; 0x2754 <_Z8USB_Recvh+0x26>
    2750:	8f ef       	ldi	r24, 0xFF	; 255
    2752:	9f ef       	ldi	r25, 0xFF	; 255
    2754:	0f 90       	pop	r0
    2756:	df 91       	pop	r29
    2758:	cf 91       	pop	r28
    275a:	08 95       	ret

0000275c <_Z13USB_SendSpaceh>:
    275c:	cf 93       	push	r28
    275e:	df 93       	push	r29
    2760:	1f 92       	push	r1
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
    2766:	68 2f       	mov	r22, r24
    2768:	ce 01       	movw	r24, r28
    276a:	01 96       	adiw	r24, 0x01	; 1
    276c:	0e 94 3a 13 	call	0x2674	; 0x2674 <_ZN6LockEPC1Eh>
    2770:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2774:	89 2f       	mov	r24, r25
    2776:	80 72       	andi	r24, 0x20	; 32
    2778:	95 ff       	sbrs	r25, 5
    277a:	04 c0       	rjmp	.+8      	; 0x2784 <_Z13USB_SendSpaceh+0x28>
    277c:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2780:	80 e4       	ldi	r24, 0x40	; 64
    2782:	89 1b       	sub	r24, r25
    2784:	99 81       	ldd	r25, Y+1	; 0x01
    2786:	9f bf       	out	0x3f, r25	; 63
    2788:	0f 90       	pop	r0
    278a:	df 91       	pop	r29
    278c:	cf 91       	pop	r28
    278e:	08 95       	ret

00002790 <_Z8USB_SendhPKvi>:
    2790:	5f 92       	push	r5
    2792:	6f 92       	push	r6
    2794:	7f 92       	push	r7
    2796:	8f 92       	push	r8
    2798:	9f 92       	push	r9
    279a:	af 92       	push	r10
    279c:	bf 92       	push	r11
    279e:	cf 92       	push	r12
    27a0:	df 92       	push	r13
    27a2:	ef 92       	push	r14
    27a4:	ff 92       	push	r15
    27a6:	0f 93       	push	r16
    27a8:	1f 93       	push	r17
    27aa:	cf 93       	push	r28
    27ac:	df 93       	push	r29
    27ae:	1f 92       	push	r1
    27b0:	cd b7       	in	r28, 0x3d	; 61
    27b2:	de b7       	in	r29, 0x3e	; 62
    27b4:	98 2e       	mov	r9, r24
    27b6:	6b 01       	movw	r12, r22
    27b8:	b4 2e       	mov	r11, r20
    27ba:	05 2f       	mov	r16, r21
    27bc:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <_usbConfiguration>
    27c0:	81 11       	cpse	r24, r1
    27c2:	03 c0       	rjmp	.+6      	; 0x27ca <_Z8USB_SendhPKvi+0x3a>
    27c4:	8f ef       	ldi	r24, 0xFF	; 255
    27c6:	9f ef       	ldi	r25, 0xFF	; 255
    27c8:	77 c0       	rjmp	.+238    	; 0x28b8 <_Z8USB_SendhPKvi+0x128>
    27ca:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <_usbSuspendState>
    27ce:	80 ff       	sbrs	r24, 0
    27d0:	05 c0       	rjmp	.+10     	; 0x27dc <_Z8USB_SendhPKvi+0x4c>
    27d2:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    27d6:	82 60       	ori	r24, 0x02	; 2
    27d8:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    27dc:	eb 2c       	mov	r14, r11
    27de:	f0 2e       	mov	r15, r16
    27e0:	a1 2c       	mov	r10, r1
    27e2:	8a ef       	ldi	r24, 0xFA	; 250
    27e4:	88 2e       	mov	r8, r24
    27e6:	89 2d       	mov	r24, r9
    27e8:	80 72       	andi	r24, 0x20	; 32
    27ea:	68 2e       	mov	r6, r24
    27ec:	89 2d       	mov	r24, r9
    27ee:	80 74       	andi	r24, 0x40	; 64
    27f0:	58 2e       	mov	r5, r24
    27f2:	9a e3       	ldi	r25, 0x3A	; 58
    27f4:	79 2e       	mov	r7, r25
    27f6:	e1 14       	cp	r14, r1
    27f8:	f1 04       	cpc	r15, r1
    27fa:	19 f4       	brne	.+6      	; 0x2802 <_Z8USB_SendhPKvi+0x72>
    27fc:	aa 20       	and	r10, r10
    27fe:	09 f4       	brne	.+2      	; 0x2802 <_Z8USB_SendhPKvi+0x72>
    2800:	55 c0       	rjmp	.+170    	; 0x28ac <_Z8USB_SendhPKvi+0x11c>
    2802:	89 2d       	mov	r24, r9
    2804:	0e 94 ae 13 	call	0x275c	; 0x275c <_Z13USB_SendSpaceh>
    2808:	18 2f       	mov	r17, r24
    280a:	81 11       	cpse	r24, r1
    280c:	0a c0       	rjmp	.+20     	; 0x2822 <_Z8USB_SendhPKvi+0x92>
    280e:	8a 94       	dec	r8
    2810:	88 20       	and	r8, r8
    2812:	c1 f2       	breq	.-80     	; 0x27c4 <_Z8USB_SendhPKvi+0x34>
    2814:	61 e0       	ldi	r22, 0x01	; 1
    2816:	70 e0       	ldi	r23, 0x00	; 0
    2818:	80 e0       	ldi	r24, 0x00	; 0
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <delay>
    2820:	ea cf       	rjmp	.-44     	; 0x27f6 <_Z8USB_SendhPKvi+0x66>
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	e8 16       	cp	r14, r24
    2826:	f9 06       	cpc	r15, r25
    2828:	0c f4       	brge	.+2      	; 0x282c <_Z8USB_SendhPKvi+0x9c>
    282a:	1e 2d       	mov	r17, r14
    282c:	69 2d       	mov	r22, r9
    282e:	ce 01       	movw	r24, r28
    2830:	01 96       	adiw	r24, 0x01	; 1
    2832:	0e 94 3a 13 	call	0x2674	; 0x2674 <_ZN6LockEPC1Eh>
    2836:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    283a:	85 ff       	sbrs	r24, 5
    283c:	34 c0       	rjmp	.+104    	; 0x28a6 <_Z8USB_SendhPKvi+0x116>
    283e:	81 2f       	mov	r24, r17
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	e8 1a       	sub	r14, r24
    2844:	f9 0a       	sbc	r15, r25
    2846:	66 20       	and	r6, r6
    2848:	29 f0       	breq	.+10     	; 0x2854 <_Z8USB_SendhPKvi+0xc4>
    284a:	11 50       	subi	r17, 0x01	; 1
    284c:	a0 f0       	brcs	.+40     	; 0x2876 <_Z8USB_SendhPKvi+0xe6>
    284e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2852:	fb cf       	rjmp	.-10     	; 0x284a <_Z8USB_SendhPKvi+0xba>
    2854:	f6 01       	movw	r30, r12
    2856:	97 fe       	sbrs	r9, 7
    2858:	0a c0       	rjmp	.+20     	; 0x286e <_Z8USB_SendhPKvi+0xde>
    285a:	11 50       	subi	r17, 0x01	; 1
    285c:	50 f0       	brcs	.+20     	; 0x2872 <_Z8USB_SendhPKvi+0xe2>
    285e:	24 91       	lpm	r18, Z
    2860:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2864:	31 96       	adiw	r30, 0x01	; 1
    2866:	f9 cf       	rjmp	.-14     	; 0x285a <_Z8USB_SendhPKvi+0xca>
    2868:	21 91       	ld	r18, Z+
    286a:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    286e:	11 50       	subi	r17, 0x01	; 1
    2870:	d8 f7       	brcc	.-10     	; 0x2868 <_Z8USB_SendhPKvi+0xd8>
    2872:	c8 0e       	add	r12, r24
    2874:	d9 1e       	adc	r13, r25
    2876:	aa 20       	and	r10, r10
    2878:	19 f0       	breq	.+6      	; 0x2880 <_Z8USB_SendhPKvi+0xf0>
    287a:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    287e:	0b c0       	rjmp	.+22     	; 0x2896 <_Z8USB_SendhPKvi+0x106>
    2880:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2884:	85 fd       	sbrc	r24, 5
    2886:	09 c0       	rjmp	.+18     	; 0x289a <_Z8USB_SendhPKvi+0x10a>
    2888:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    288c:	aa 24       	eor	r10, r10
    288e:	a3 94       	inc	r10
    2890:	e1 14       	cp	r14, r1
    2892:	f1 04       	cpc	r15, r1
    2894:	41 f0       	breq	.+16     	; 0x28a6 <_Z8USB_SendhPKvi+0x116>
    2896:	a1 2c       	mov	r10, r1
    2898:	06 c0       	rjmp	.+12     	; 0x28a6 <_Z8USB_SendhPKvi+0x116>
    289a:	e1 14       	cp	r14, r1
    289c:	f1 04       	cpc	r15, r1
    289e:	19 f4       	brne	.+6      	; 0x28a6 <_Z8USB_SendhPKvi+0x116>
    28a0:	51 10       	cpse	r5, r1
    28a2:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    28a6:	89 81       	ldd	r24, Y+1	; 0x01
    28a8:	8f bf       	out	0x3f, r24	; 63
    28aa:	a5 cf       	rjmp	.-182    	; 0x27f6 <_Z8USB_SendhPKvi+0x66>
    28ac:	5d 98       	cbi	0x0b, 5	; 11
    28ae:	84 e6       	ldi	r24, 0x64	; 100
    28b0:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <TxLEDPulse>
    28b4:	8b 2d       	mov	r24, r11
    28b6:	90 2f       	mov	r25, r16
    28b8:	0f 90       	pop	r0
    28ba:	df 91       	pop	r29
    28bc:	cf 91       	pop	r28
    28be:	1f 91       	pop	r17
    28c0:	0f 91       	pop	r16
    28c2:	ff 90       	pop	r15
    28c4:	ef 90       	pop	r14
    28c6:	df 90       	pop	r13
    28c8:	cf 90       	pop	r12
    28ca:	bf 90       	pop	r11
    28cc:	af 90       	pop	r10
    28ce:	9f 90       	pop	r9
    28d0:	8f 90       	pop	r8
    28d2:	7f 90       	pop	r7
    28d4:	6f 90       	pop	r6
    28d6:	5f 90       	pop	r5
    28d8:	08 95       	ret

000028da <_Z11InitControli>:
    28da:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    28de:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <_ZL6_cmark+0x1>
    28e2:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <_ZL6_cmark>
    28e6:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <_ZL5_cend+0x1>
    28ea:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <_ZL5_cend>
    28ee:	08 95       	ret

000028f0 <_Z15USB_SendControlhPKvi>:
    28f0:	df 92       	push	r13
    28f2:	ef 92       	push	r14
    28f4:	ff 92       	push	r15
    28f6:	0f 93       	push	r16
    28f8:	1f 93       	push	r17
    28fa:	cf 93       	push	r28
    28fc:	df 93       	push	r29
    28fe:	d8 2e       	mov	r13, r24
    2900:	8a 01       	movw	r16, r20
    2902:	7b 01       	movw	r14, r22
    2904:	e4 0e       	add	r14, r20
    2906:	f5 1e       	adc	r15, r21
    2908:	eb 01       	movw	r28, r22
    290a:	ce 15       	cp	r28, r14
    290c:	df 05       	cpc	r29, r15
    290e:	71 f0       	breq	.+28     	; 0x292c <_Z15USB_SendControlhPKvi+0x3c>
    2910:	d7 fe       	sbrs	r13, 7
    2912:	03 c0       	rjmp	.+6      	; 0x291a <_Z15USB_SendControlhPKvi+0x2a>
    2914:	fe 01       	movw	r30, r28
    2916:	84 91       	lpm	r24, Z
    2918:	01 c0       	rjmp	.+2      	; 0x291c <_Z15USB_SendControlhPKvi+0x2c>
    291a:	88 81       	ld	r24, Y
    291c:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZL11SendControlh>
    2920:	21 96       	adiw	r28, 0x01	; 1
    2922:	81 11       	cpse	r24, r1
    2924:	f2 cf       	rjmp	.-28     	; 0x290a <_Z15USB_SendControlhPKvi+0x1a>
    2926:	8f ef       	ldi	r24, 0xFF	; 255
    2928:	9f ef       	ldi	r25, 0xFF	; 255
    292a:	01 c0       	rjmp	.+2      	; 0x292e <_Z15USB_SendControlhPKvi+0x3e>
    292c:	c8 01       	movw	r24, r16
    292e:	df 91       	pop	r29
    2930:	cf 91       	pop	r28
    2932:	1f 91       	pop	r17
    2934:	0f 91       	pop	r16
    2936:	ff 90       	pop	r15
    2938:	ef 90       	pop	r14
    293a:	df 90       	pop	r13
    293c:	08 95       	ret

0000293e <_Z15USB_RecvControlPvi>:
    293e:	af 92       	push	r10
    2940:	bf 92       	push	r11
    2942:	df 92       	push	r13
    2944:	ef 92       	push	r14
    2946:	ff 92       	push	r15
    2948:	0f 93       	push	r16
    294a:	1f 93       	push	r17
    294c:	cf 93       	push	r28
    294e:	df 93       	push	r29
    2950:	5c 01       	movw	r10, r24
    2952:	8b 01       	movw	r16, r22
    2954:	eb 01       	movw	r28, r22
    2956:	9b ef       	ldi	r25, 0xFB	; 251
    2958:	d9 2e       	mov	r13, r25
    295a:	20 97       	sbiw	r28, 0x00	; 0
    295c:	c1 f0       	breq	.+48     	; 0x298e <_Z15USB_RecvControlPvi+0x50>
    295e:	7e 01       	movw	r14, r28
    2960:	c1 34       	cpi	r28, 0x41	; 65
    2962:	d1 05       	cpc	r29, r1
    2964:	1c f0       	brlt	.+6      	; 0x296c <_Z15USB_RecvControlPvi+0x2e>
    2966:	80 e4       	ldi	r24, 0x40	; 64
    2968:	e8 2e       	mov	r14, r24
    296a:	f1 2c       	mov	r15, r1
    296c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2970:	82 ff       	sbrs	r24, 2
    2972:	fc cf       	rjmp	.-8      	; 0x296c <_Z15USB_RecvControlPvi+0x2e>
    2974:	c8 01       	movw	r24, r16
    2976:	8c 1b       	sub	r24, r28
    2978:	9d 0b       	sbc	r25, r29
    297a:	6e 2d       	mov	r22, r14
    297c:	8a 0d       	add	r24, r10
    297e:	9b 1d       	adc	r25, r11
    2980:	0e 94 91 12 	call	0x2522	; 0x2522 <_ZL4RecvPVhh>
    2984:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2988:	ce 19       	sub	r28, r14
    298a:	df 09       	sbc	r29, r15
    298c:	e6 cf       	rjmp	.-52     	; 0x295a <_Z15USB_RecvControlPvi+0x1c>
    298e:	c8 01       	movw	r24, r16
    2990:	df 91       	pop	r29
    2992:	cf 91       	pop	r28
    2994:	1f 91       	pop	r17
    2996:	0f 91       	pop	r16
    2998:	ff 90       	pop	r15
    299a:	ef 90       	pop	r14
    299c:	df 90       	pop	r13
    299e:	bf 90       	pop	r11
    29a0:	af 90       	pop	r10
    29a2:	08 95       	ret

000029a4 <__vector_11>:
    29a4:	1f 92       	push	r1
    29a6:	0f 92       	push	r0
    29a8:	0f b6       	in	r0, 0x3f	; 63
    29aa:	0f 92       	push	r0
    29ac:	11 24       	eor	r1, r1
    29ae:	cf 92       	push	r12
    29b0:	df 92       	push	r13
    29b2:	ef 92       	push	r14
    29b4:	ff 92       	push	r15
    29b6:	0f 93       	push	r16
    29b8:	1f 93       	push	r17
    29ba:	2f 93       	push	r18
    29bc:	3f 93       	push	r19
    29be:	4f 93       	push	r20
    29c0:	5f 93       	push	r21
    29c2:	6f 93       	push	r22
    29c4:	7f 93       	push	r23
    29c6:	8f 93       	push	r24
    29c8:	9f 93       	push	r25
    29ca:	af 93       	push	r26
    29cc:	bf 93       	push	r27
    29ce:	ef 93       	push	r30
    29d0:	ff 93       	push	r31
    29d2:	cf 93       	push	r28
    29d4:	df 93       	push	r29
    29d6:	cd b7       	in	r28, 0x3d	; 61
    29d8:	de b7       	in	r29, 0x3e	; 62
    29da:	6c 97       	sbiw	r28, 0x1c	; 28
    29dc:	de bf       	out	0x3e, r29	; 62
    29de:	cd bf       	out	0x3d, r28	; 61
    29e0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    29e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    29e8:	83 ff       	sbrs	r24, 3
    29ea:	17 c1       	rjmp	.+558    	; 0x2c1a <__vector_11+0x276>
    29ec:	68 e0       	ldi	r22, 0x08	; 8
    29ee:	ce 01       	movw	r24, r28
    29f0:	45 96       	adiw	r24, 0x15	; 21
    29f2:	0e 94 91 12 	call	0x2522	; 0x2522 <_ZL4RecvPVhh>
    29f6:	82 ef       	ldi	r24, 0xF2	; 242
    29f8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    29fc:	8d 89       	ldd	r24, Y+21	; 0x15
    29fe:	87 ff       	sbrs	r24, 7
    2a00:	05 c0       	rjmp	.+10     	; 0x2a0c <__vector_11+0x68>
    2a02:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a06:	90 ff       	sbrs	r25, 0
    2a08:	fc cf       	rjmp	.-8      	; 0x2a02 <__vector_11+0x5e>
    2a0a:	03 c0       	rjmp	.+6      	; 0x2a12 <__vector_11+0x6e>
    2a0c:	9e ef       	ldi	r25, 0xFE	; 254
    2a0e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a12:	98 2f       	mov	r25, r24
    2a14:	90 76       	andi	r25, 0x60	; 96
    2a16:	09 f0       	breq	.+2      	; 0x2a1a <__vector_11+0x76>
    2a18:	d8 c0       	rjmp	.+432    	; 0x2bca <__vector_11+0x226>
    2a1a:	9e 89       	ldd	r25, Y+22	; 0x16
    2a1c:	4f 89       	ldd	r20, Y+23	; 0x17
    2a1e:	58 8d       	ldd	r21, Y+24	; 0x18
    2a20:	2f 89       	ldd	r18, Y+23	; 0x17
    2a22:	18 8d       	ldd	r17, Y+24	; 0x18
    2a24:	91 11       	cpse	r25, r1
    2a26:	0c c0       	rjmp	.+24     	; 0x2a40 <__vector_11+0x9c>
    2a28:	80 38       	cpi	r24, 0x80	; 128
    2a2a:	29 f4       	brne	.+10     	; 0x2a36 <__vector_11+0x92>
    2a2c:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <_usbCurrentStatus>
    2a30:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2a34:	02 c0       	rjmp	.+4      	; 0x2a3a <__vector_11+0x96>
    2a36:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2a3a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2a3e:	e6 c0       	rjmp	.+460    	; 0x2c0c <__vector_11+0x268>
    2a40:	91 30       	cpi	r25, 0x01	; 1
    2a42:	51 f4       	brne	.+20     	; 0x2a58 <__vector_11+0xb4>
    2a44:	81 11       	cpse	r24, r1
    2a46:	e2 c0       	rjmp	.+452    	; 0x2c0c <__vector_11+0x268>
    2a48:	41 30       	cpi	r20, 0x01	; 1
    2a4a:	51 05       	cpc	r21, r1
    2a4c:	09 f0       	breq	.+2      	; 0x2a50 <__vector_11+0xac>
    2a4e:	de c0       	rjmp	.+444    	; 0x2c0c <__vector_11+0x268>
    2a50:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <_usbCurrentStatus>
    2a54:	8d 7f       	andi	r24, 0xFD	; 253
    2a56:	0b c0       	rjmp	.+22     	; 0x2a6e <__vector_11+0xca>
    2a58:	93 30       	cpi	r25, 0x03	; 3
    2a5a:	61 f4       	brne	.+24     	; 0x2a74 <__vector_11+0xd0>
    2a5c:	81 11       	cpse	r24, r1
    2a5e:	d6 c0       	rjmp	.+428    	; 0x2c0c <__vector_11+0x268>
    2a60:	41 30       	cpi	r20, 0x01	; 1
    2a62:	51 05       	cpc	r21, r1
    2a64:	09 f0       	breq	.+2      	; 0x2a68 <__vector_11+0xc4>
    2a66:	d2 c0       	rjmp	.+420    	; 0x2c0c <__vector_11+0x268>
    2a68:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <_usbCurrentStatus>
    2a6c:	82 60       	ori	r24, 0x02	; 2
    2a6e:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <_usbCurrentStatus>
    2a72:	cc c0       	rjmp	.+408    	; 0x2c0c <__vector_11+0x268>
    2a74:	95 30       	cpi	r25, 0x05	; 5
    2a76:	49 f4       	brne	.+18     	; 0x2a8a <__vector_11+0xe6>
    2a78:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a7c:	80 ff       	sbrs	r24, 0
    2a7e:	fc cf       	rjmp	.-8      	; 0x2a78 <__vector_11+0xd4>
    2a80:	82 2f       	mov	r24, r18
    2a82:	80 68       	ori	r24, 0x80	; 128
    2a84:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    2a88:	c1 c0       	rjmp	.+386    	; 0x2c0c <__vector_11+0x268>
    2a8a:	96 30       	cpi	r25, 0x06	; 6
    2a8c:	09 f0       	breq	.+2      	; 0x2a90 <__vector_11+0xec>
    2a8e:	70 c0       	rjmp	.+224    	; 0x2b70 <__vector_11+0x1cc>
    2a90:	eb 8c       	ldd	r14, Y+27	; 0x1b
    2a92:	fc 8c       	ldd	r15, Y+28	; 0x1c
    2a94:	12 30       	cpi	r17, 0x02	; 2
    2a96:	69 f5       	brne	.+90     	; 0x2af2 <__vector_11+0x14e>
    2a98:	80 e0       	ldi	r24, 0x00	; 0
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	0e 94 6d 14 	call	0x28da	; 0x28da <_Z11InitControli>
    2aa0:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZL14SendInterfacesv>
    2aa4:	99 e0       	ldi	r25, 0x09	; 9
    2aa6:	9e 01       	movw	r18, r28
    2aa8:	2f 5f       	subi	r18, 0xFF	; 255
    2aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    2aac:	69 01       	movw	r12, r18
    2aae:	f9 01       	movw	r30, r18
    2ab0:	29 2f       	mov	r18, r25
    2ab2:	11 92       	st	Z+, r1
    2ab4:	2a 95       	dec	r18
    2ab6:	e9 f7       	brne	.-6      	; 0x2ab2 <__vector_11+0x10e>
    2ab8:	99 83       	std	Y+1, r25	; 0x01
    2aba:	1a 83       	std	Y+2, r17	; 0x02
    2abc:	91 e0       	ldi	r25, 0x01	; 1
    2abe:	9e 83       	std	Y+6, r25	; 0x06
    2ac0:	90 ea       	ldi	r25, 0xA0	; 160
    2ac2:	98 87       	std	Y+8, r25	; 0x08
    2ac4:	9a ef       	ldi	r25, 0xFA	; 250
    2ac6:	99 87       	std	Y+9, r25	; 0x09
    2ac8:	20 91 e6 03 	lds	r18, 0x03E6	; 0x8003e6 <_ZL6_cmark>
    2acc:	30 91 e7 03 	lds	r19, 0x03E7	; 0x8003e7 <_ZL6_cmark+0x1>
    2ad0:	27 5f       	subi	r18, 0xF7	; 247
    2ad2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad4:	3c 83       	std	Y+4, r19	; 0x04
    2ad6:	2b 83       	std	Y+3, r18	; 0x03
    2ad8:	8d 83       	std	Y+5, r24	; 0x05
    2ada:	c7 01       	movw	r24, r14
    2adc:	0e 94 6d 14 	call	0x28da	; 0x28da <_Z11InitControli>
    2ae0:	49 e0       	ldi	r20, 0x09	; 9
    2ae2:	50 e0       	ldi	r21, 0x00	; 0
    2ae4:	b6 01       	movw	r22, r12
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_Z15USB_SendControlhPKvi>
    2aec:	0e 94 24 13 	call	0x2648	; 0x2648 <_ZL14SendInterfacesv>
    2af0:	8d c0       	rjmp	.+282    	; 0x2c0c <__vector_11+0x268>
    2af2:	c7 01       	movw	r24, r14
    2af4:	0e 94 6d 14 	call	0x28da	; 0x28da <_Z11InitControli>
    2af8:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <_Z12PluggableUSBv>
    2afc:	be 01       	movw	r22, r28
    2afe:	6b 5e       	subi	r22, 0xEB	; 235
    2b00:	7f 4f       	sbci	r23, 0xFF	; 255
    2b02:	0e 94 a0 1a 	call	0x3540	; 0x3540 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    2b06:	00 97       	sbiw	r24, 0x00	; 0
    2b08:	19 f0       	breq	.+6      	; 0x2b10 <__vector_11+0x16c>
    2b0a:	0c f0       	brlt	.+2      	; 0x2b0e <__vector_11+0x16a>
    2b0c:	7f c0       	rjmp	.+254    	; 0x2c0c <__vector_11+0x268>
    2b0e:	82 c0       	rjmp	.+260    	; 0x2c14 <__vector_11+0x270>
    2b10:	11 30       	cpi	r17, 0x01	; 1
    2b12:	09 f4       	brne	.+2      	; 0x2b16 <__vector_11+0x172>
    2b14:	70 c0       	rjmp	.+224    	; 0x2bf6 <__vector_11+0x252>
    2b16:	13 30       	cpi	r17, 0x03	; 3
    2b18:	09 f0       	breq	.+2      	; 0x2b1c <__vector_11+0x178>
    2b1a:	7c c0       	rjmp	.+248    	; 0x2c14 <__vector_11+0x270>
    2b1c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b1e:	88 23       	and	r24, r24
    2b20:	09 f4       	brne	.+2      	; 0x2b24 <__vector_11+0x180>
    2b22:	6c c0       	rjmp	.+216    	; 0x2bfc <__vector_11+0x258>
    2b24:	82 30       	cpi	r24, 0x02	; 2
    2b26:	29 f4       	brne	.+10     	; 0x2b32 <__vector_11+0x18e>
    2b28:	40 e8       	ldi	r20, 0x80	; 128
    2b2a:	60 e1       	ldi	r22, 0x10	; 16
    2b2c:	89 ee       	ldi	r24, 0xE9	; 233
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	06 c0       	rjmp	.+12     	; 0x2b3e <__vector_11+0x19a>
    2b32:	81 30       	cpi	r24, 0x01	; 1
    2b34:	39 f4       	brne	.+14     	; 0x2b44 <__vector_11+0x1a0>
    2b36:	40 e8       	ldi	r20, 0x80	; 128
    2b38:	6b e0       	ldi	r22, 0x0B	; 11
    2b3a:	8d ed       	ldi	r24, 0xDD	; 221
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	0e 94 cc 12 	call	0x2598	; 0x2598 <_ZL24USB_SendStringDescriptorPKhhh>
    2b42:	56 c0       	rjmp	.+172    	; 0x2bf0 <__vector_11+0x24c>
    2b44:	83 30       	cpi	r24, 0x03	; 3
    2b46:	09 f0       	breq	.+2      	; 0x2b4a <__vector_11+0x1a6>
    2b48:	65 c0       	rjmp	.+202    	; 0x2c14 <__vector_11+0x270>
    2b4a:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <_Z12PluggableUSBv>
    2b4e:	8e 01       	movw	r16, r28
    2b50:	0f 5f       	subi	r16, 0xFF	; 255
    2b52:	1f 4f       	sbci	r17, 0xFF	; 255
    2b54:	b8 01       	movw	r22, r16
    2b56:	0e 94 bf 1a 	call	0x357e	; 0x357e <_ZN13PluggableUSB_12getShortNameEPc>
    2b5a:	f8 01       	movw	r30, r16
    2b5c:	01 90       	ld	r0, Z+
    2b5e:	00 20       	and	r0, r0
    2b60:	e9 f7       	brne	.-6      	; 0x2b5c <__vector_11+0x1b8>
    2b62:	31 97       	sbiw	r30, 0x01	; 1
    2b64:	bf 01       	movw	r22, r30
    2b66:	60 1b       	sub	r22, r16
    2b68:	71 0b       	sbc	r23, r17
    2b6a:	40 e0       	ldi	r20, 0x00	; 0
    2b6c:	c8 01       	movw	r24, r16
    2b6e:	e7 cf       	rjmp	.-50     	; 0x2b3e <__vector_11+0x19a>
    2b70:	97 30       	cpi	r25, 0x07	; 7
    2b72:	09 f4       	brne	.+2      	; 0x2b76 <__vector_11+0x1d2>
    2b74:	4f c0       	rjmp	.+158    	; 0x2c14 <__vector_11+0x270>
    2b76:	98 30       	cpi	r25, 0x08	; 8
    2b78:	21 f4       	brne	.+8      	; 0x2b82 <__vector_11+0x1de>
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2b80:	45 c0       	rjmp	.+138    	; 0x2c0c <__vector_11+0x268>
    2b82:	99 30       	cpi	r25, 0x09	; 9
    2b84:	09 f0       	breq	.+2      	; 0x2b88 <__vector_11+0x1e4>
    2b86:	42 c0       	rjmp	.+132    	; 0x2c0c <__vector_11+0x268>
    2b88:	83 70       	andi	r24, 0x03	; 3
    2b8a:	09 f0       	breq	.+2      	; 0x2b8e <__vector_11+0x1ea>
    2b8c:	43 c0       	rjmp	.+134    	; 0x2c14 <__vector_11+0x270>
    2b8e:	eb e0       	ldi	r30, 0x0B	; 11
    2b90:	f1 e0       	ldi	r31, 0x01	; 1
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	31 e0       	ldi	r19, 0x01	; 1
    2b96:	96 e3       	ldi	r25, 0x36	; 54
    2b98:	20 81       	ld	r18, Z
    2b9a:	21 11       	cpse	r18, r1
    2b9c:	09 c0       	rjmp	.+18     	; 0x2bb0 <__vector_11+0x20c>
    2b9e:	8e e7       	ldi	r24, 0x7E	; 126
    2ba0:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    2ba4:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    2ba8:	8f 89       	ldd	r24, Y+23	; 0x17
    2baa:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <_usbConfiguration>
    2bae:	2e c0       	rjmp	.+92     	; 0x2c0c <__vector_11+0x268>
    2bb0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2bb4:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2bb8:	21 91       	ld	r18, Z+
    2bba:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2bbe:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    2bc2:	8f 5f       	subi	r24, 0xFF	; 255
    2bc4:	87 30       	cpi	r24, 0x07	; 7
    2bc6:	41 f7       	brne	.-48     	; 0x2b98 <__vector_11+0x1f4>
    2bc8:	ea cf       	rjmp	.-44     	; 0x2b9e <__vector_11+0x1fa>
    2bca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bce:	0e 94 6d 14 	call	0x28da	; 0x28da <_Z11InitControli>
    2bd2:	89 8d       	ldd	r24, Y+25	; 0x19
    2bd4:	81 11       	cpse	r24, r1
    2bd6:	05 c0       	rjmp	.+10     	; 0x2be2 <__vector_11+0x23e>
    2bd8:	ce 01       	movw	r24, r28
    2bda:	45 96       	adiw	r24, 0x15	; 21
    2bdc:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <_Z9CDC_SetupR8USBSetup>
    2be0:	07 c0       	rjmp	.+14     	; 0x2bf0 <__vector_11+0x24c>
    2be2:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <_Z12PluggableUSBv>
    2be6:	be 01       	movw	r22, r28
    2be8:	6b 5e       	subi	r22, 0xEB	; 235
    2bea:	7f 4f       	sbci	r23, 0xFF	; 255
    2bec:	0e 94 de 1a 	call	0x35bc	; 0x35bc <_ZN13PluggableUSB_5setupER8USBSetup>
    2bf0:	88 23       	and	r24, r24
    2bf2:	81 f0       	breq	.+32     	; 0x2c14 <__vector_11+0x270>
    2bf4:	0b c0       	rjmp	.+22     	; 0x2c0c <__vector_11+0x268>
    2bf6:	6b ec       	ldi	r22, 0xCB	; 203
    2bf8:	70 e0       	ldi	r23, 0x00	; 0
    2bfa:	02 c0       	rjmp	.+4      	; 0x2c00 <__vector_11+0x25c>
    2bfc:	6a ef       	ldi	r22, 0xFA	; 250
    2bfe:	70 e0       	ldi	r23, 0x00	; 0
    2c00:	fb 01       	movw	r30, r22
    2c02:	44 91       	lpm	r20, Z
    2c04:	50 e0       	ldi	r21, 0x00	; 0
    2c06:	80 e8       	ldi	r24, 0x80	; 128
    2c08:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_Z15USB_SendControlhPKvi>
    2c0c:	8e ef       	ldi	r24, 0xFE	; 254
    2c0e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2c12:	03 c0       	rjmp	.+6      	; 0x2c1a <__vector_11+0x276>
    2c14:	81 e2       	ldi	r24, 0x21	; 33
    2c16:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2c1a:	6c 96       	adiw	r28, 0x1c	; 28
    2c1c:	0f b6       	in	r0, 0x3f	; 63
    2c1e:	f8 94       	cli
    2c20:	de bf       	out	0x3e, r29	; 62
    2c22:	0f be       	out	0x3f, r0	; 63
    2c24:	cd bf       	out	0x3d, r28	; 61
    2c26:	df 91       	pop	r29
    2c28:	cf 91       	pop	r28
    2c2a:	ff 91       	pop	r31
    2c2c:	ef 91       	pop	r30
    2c2e:	bf 91       	pop	r27
    2c30:	af 91       	pop	r26
    2c32:	9f 91       	pop	r25
    2c34:	8f 91       	pop	r24
    2c36:	7f 91       	pop	r23
    2c38:	6f 91       	pop	r22
    2c3a:	5f 91       	pop	r21
    2c3c:	4f 91       	pop	r20
    2c3e:	3f 91       	pop	r19
    2c40:	2f 91       	pop	r18
    2c42:	1f 91       	pop	r17
    2c44:	0f 91       	pop	r16
    2c46:	ff 90       	pop	r15
    2c48:	ef 90       	pop	r14
    2c4a:	df 90       	pop	r13
    2c4c:	cf 90       	pop	r12
    2c4e:	0f 90       	pop	r0
    2c50:	0f be       	out	0x3f, r0	; 63
    2c52:	0f 90       	pop	r0
    2c54:	1f 90       	pop	r1
    2c56:	18 95       	reti

00002c58 <_Z9USB_Flushh>:
    2c58:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2c5c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2c60:	88 23       	and	r24, r24
    2c62:	19 f0       	breq	.+6      	; 0x2c6a <_Z9USB_Flushh+0x12>
    2c64:	8a e3       	ldi	r24, 0x3A	; 58
    2c66:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2c6a:	08 95       	ret

00002c6c <__vector_10>:
    2c6c:	1f 92       	push	r1
    2c6e:	0f 92       	push	r0
    2c70:	0f b6       	in	r0, 0x3f	; 63
    2c72:	0f 92       	push	r0
    2c74:	11 24       	eor	r1, r1
    2c76:	2f 93       	push	r18
    2c78:	3f 93       	push	r19
    2c7a:	4f 93       	push	r20
    2c7c:	5f 93       	push	r21
    2c7e:	6f 93       	push	r22
    2c80:	7f 93       	push	r23
    2c82:	8f 93       	push	r24
    2c84:	9f 93       	push	r25
    2c86:	af 93       	push	r26
    2c88:	bf 93       	push	r27
    2c8a:	cf 93       	push	r28
    2c8c:	ef 93       	push	r30
    2c8e:	ff 93       	push	r31
    2c90:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2c94:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2c98:	83 7f       	andi	r24, 0xF3	; 243
    2c9a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2c9e:	c3 ff       	sbrs	r28, 3
    2ca0:	0f c0       	rjmp	.+30     	; 0x2cc0 <__vector_10+0x54>
    2ca2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2cac:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2cb0:	82 e3       	ldi	r24, 0x32	; 50
    2cb2:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    2cb6:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <_usbConfiguration>
    2cba:	88 e0       	ldi	r24, 0x08	; 8
    2cbc:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    2cc0:	c2 ff       	sbrs	r28, 2
    2cc2:	19 c0       	rjmp	.+50     	; 0x2cf6 <__vector_10+0x8a>
    2cc4:	83 e0       	ldi	r24, 0x03	; 3
    2cc6:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <_Z9USB_Flushh>
    2cca:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <TxLEDPulse>
    2cce:	88 23       	and	r24, r24
    2cd0:	39 f0       	breq	.+14     	; 0x2ce0 <__vector_10+0x74>
    2cd2:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <TxLEDPulse>
    2cd6:	81 50       	subi	r24, 0x01	; 1
    2cd8:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <TxLEDPulse>
    2cdc:	88 23       	and	r24, r24
    2cde:	89 f1       	breq	.+98     	; 0x2d42 <__vector_10+0xd6>
    2ce0:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <RxLEDPulse>
    2ce4:	88 23       	and	r24, r24
    2ce6:	39 f0       	breq	.+14     	; 0x2cf6 <__vector_10+0x8a>
    2ce8:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <RxLEDPulse>
    2cec:	81 50       	subi	r24, 0x01	; 1
    2cee:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <RxLEDPulse>
    2cf2:	88 23       	and	r24, r24
    2cf4:	41 f1       	breq	.+80     	; 0x2d46 <__vector_10+0xda>
    2cf6:	c4 ff       	sbrs	r28, 4
    2cf8:	10 c0       	rjmp	.+32     	; 0x2d1a <__vector_10+0xae>
    2cfa:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2cfe:	8e 7e       	andi	r24, 0xEE	; 238
    2d00:	81 60       	ori	r24, 0x01	; 1
    2d02:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2d06:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2d0a:	8f 7e       	andi	r24, 0xEF	; 239
    2d0c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2d10:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <_usbSuspendState>
    2d14:	8e 7e       	andi	r24, 0xEE	; 238
    2d16:	80 61       	ori	r24, 0x10	; 16
    2d18:	11 c0       	rjmp	.+34     	; 0x2d3c <__vector_10+0xd0>
    2d1a:	c0 ff       	sbrs	r28, 0
    2d1c:	16 c0       	rjmp	.+44     	; 0x2d4a <__vector_10+0xde>
    2d1e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2d22:	8e 7e       	andi	r24, 0xEE	; 238
    2d24:	80 61       	ori	r24, 0x10	; 16
    2d26:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2d2a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2d2e:	8e 7e       	andi	r24, 0xEE	; 238
    2d30:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2d34:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <_usbSuspendState>
    2d38:	8e 7e       	andi	r24, 0xEE	; 238
    2d3a:	81 60       	ori	r24, 0x01	; 1
    2d3c:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <_usbSuspendState>
    2d40:	04 c0       	rjmp	.+8      	; 0x2d4a <__vector_10+0xde>
    2d42:	5d 9a       	sbi	0x0b, 5	; 11
    2d44:	cd cf       	rjmp	.-102    	; 0x2ce0 <__vector_10+0x74>
    2d46:	28 9a       	sbi	0x05, 0	; 5
    2d48:	d6 cf       	rjmp	.-84     	; 0x2cf6 <__vector_10+0x8a>
    2d4a:	ff 91       	pop	r31
    2d4c:	ef 91       	pop	r30
    2d4e:	cf 91       	pop	r28
    2d50:	bf 91       	pop	r27
    2d52:	af 91       	pop	r26
    2d54:	9f 91       	pop	r25
    2d56:	8f 91       	pop	r24
    2d58:	7f 91       	pop	r23
    2d5a:	6f 91       	pop	r22
    2d5c:	5f 91       	pop	r21
    2d5e:	4f 91       	pop	r20
    2d60:	3f 91       	pop	r19
    2d62:	2f 91       	pop	r18
    2d64:	0f 90       	pop	r0
    2d66:	0f be       	out	0x3f, r0	; 63
    2d68:	0f 90       	pop	r0
    2d6a:	1f 90       	pop	r1
    2d6c:	18 95       	reti

00002d6e <_ZN10USBDevice_6attachEv>:
    2d6e:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <_usbConfiguration>
    2d72:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <_usbCurrentStatus>
    2d76:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <_usbSuspendState>
    2d7a:	0e 94 01 13 	call	0x2602	; 0x2602 <_ZL15USB_ClockEnablev>
    2d7e:	e1 ee       	ldi	r30, 0xE1	; 225
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
    2d82:	80 81       	ld	r24, Z
    2d84:	8e 7e       	andi	r24, 0xEE	; 238
    2d86:	80 83       	st	Z, r24
    2d88:	8d e0       	ldi	r24, 0x0D	; 13
    2d8a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2d8e:	55 9a       	sbi	0x0a, 5	; 10
    2d90:	20 9a       	sbi	0x04, 0	; 4
    2d92:	08 95       	ret

00002d94 <__vector_23>:
    2d94:	1f 92       	push	r1
    2d96:	0f 92       	push	r0
    2d98:	0f b6       	in	r0, 0x3f	; 63
    2d9a:	0f 92       	push	r0
    2d9c:	11 24       	eor	r1, r1
    2d9e:	2f 93       	push	r18
    2da0:	3f 93       	push	r19
    2da2:	8f 93       	push	r24
    2da4:	9f 93       	push	r25
    2da6:	af 93       	push	r26
    2da8:	bf 93       	push	r27
    2daa:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <timer0_millis>
    2dae:	90 91 ef 03 	lds	r25, 0x03EF	; 0x8003ef <timer0_millis+0x1>
    2db2:	a0 91 f0 03 	lds	r26, 0x03F0	; 0x8003f0 <timer0_millis+0x2>
    2db6:	b0 91 f1 03 	lds	r27, 0x03F1	; 0x8003f1 <timer0_millis+0x3>
    2dba:	30 91 ed 03 	lds	r19, 0x03ED	; 0x8003ed <timer0_fract>
    2dbe:	23 e0       	ldi	r18, 0x03	; 3
    2dc0:	23 0f       	add	r18, r19
    2dc2:	2d 37       	cpi	r18, 0x7D	; 125
    2dc4:	20 f4       	brcc	.+8      	; 0x2dce <__vector_23+0x3a>
    2dc6:	01 96       	adiw	r24, 0x01	; 1
    2dc8:	a1 1d       	adc	r26, r1
    2dca:	b1 1d       	adc	r27, r1
    2dcc:	05 c0       	rjmp	.+10     	; 0x2dd8 <__vector_23+0x44>
    2dce:	26 e8       	ldi	r18, 0x86	; 134
    2dd0:	23 0f       	add	r18, r19
    2dd2:	02 96       	adiw	r24, 0x02	; 2
    2dd4:	a1 1d       	adc	r26, r1
    2dd6:	b1 1d       	adc	r27, r1
    2dd8:	20 93 ed 03 	sts	0x03ED, r18	; 0x8003ed <timer0_fract>
    2ddc:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <timer0_millis>
    2de0:	90 93 ef 03 	sts	0x03EF, r25	; 0x8003ef <timer0_millis+0x1>
    2de4:	a0 93 f0 03 	sts	0x03F0, r26	; 0x8003f0 <timer0_millis+0x2>
    2de8:	b0 93 f1 03 	sts	0x03F1, r27	; 0x8003f1 <timer0_millis+0x3>
    2dec:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <timer0_overflow_count>
    2df0:	90 91 f3 03 	lds	r25, 0x03F3	; 0x8003f3 <timer0_overflow_count+0x1>
    2df4:	a0 91 f4 03 	lds	r26, 0x03F4	; 0x8003f4 <timer0_overflow_count+0x2>
    2df8:	b0 91 f5 03 	lds	r27, 0x03F5	; 0x8003f5 <timer0_overflow_count+0x3>
    2dfc:	01 96       	adiw	r24, 0x01	; 1
    2dfe:	a1 1d       	adc	r26, r1
    2e00:	b1 1d       	adc	r27, r1
    2e02:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <timer0_overflow_count>
    2e06:	90 93 f3 03 	sts	0x03F3, r25	; 0x8003f3 <timer0_overflow_count+0x1>
    2e0a:	a0 93 f4 03 	sts	0x03F4, r26	; 0x8003f4 <timer0_overflow_count+0x2>
    2e0e:	b0 93 f5 03 	sts	0x03F5, r27	; 0x8003f5 <timer0_overflow_count+0x3>
    2e12:	bf 91       	pop	r27
    2e14:	af 91       	pop	r26
    2e16:	9f 91       	pop	r25
    2e18:	8f 91       	pop	r24
    2e1a:	3f 91       	pop	r19
    2e1c:	2f 91       	pop	r18
    2e1e:	0f 90       	pop	r0
    2e20:	0f be       	out	0x3f, r0	; 63
    2e22:	0f 90       	pop	r0
    2e24:	1f 90       	pop	r1
    2e26:	18 95       	reti

00002e28 <millis>:
    2e28:	2f b7       	in	r18, 0x3f	; 63
    2e2a:	f8 94       	cli
    2e2c:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <timer0_millis>
    2e30:	70 91 ef 03 	lds	r23, 0x03EF	; 0x8003ef <timer0_millis+0x1>
    2e34:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <timer0_millis+0x2>
    2e38:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <timer0_millis+0x3>
    2e3c:	2f bf       	out	0x3f, r18	; 63
    2e3e:	08 95       	ret

00002e40 <micros>:
    2e40:	3f b7       	in	r19, 0x3f	; 63
    2e42:	f8 94       	cli
    2e44:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <timer0_overflow_count>
    2e48:	90 91 f3 03 	lds	r25, 0x03F3	; 0x8003f3 <timer0_overflow_count+0x1>
    2e4c:	a0 91 f4 03 	lds	r26, 0x03F4	; 0x8003f4 <timer0_overflow_count+0x2>
    2e50:	b0 91 f5 03 	lds	r27, 0x03F5	; 0x8003f5 <timer0_overflow_count+0x3>
    2e54:	26 b5       	in	r18, 0x26	; 38
    2e56:	a8 9b       	sbis	0x15, 0	; 21
    2e58:	05 c0       	rjmp	.+10     	; 0x2e64 <micros+0x24>
    2e5a:	2f 3f       	cpi	r18, 0xFF	; 255
    2e5c:	19 f0       	breq	.+6      	; 0x2e64 <micros+0x24>
    2e5e:	01 96       	adiw	r24, 0x01	; 1
    2e60:	a1 1d       	adc	r26, r1
    2e62:	b1 1d       	adc	r27, r1
    2e64:	3f bf       	out	0x3f, r19	; 63
    2e66:	ba 2f       	mov	r27, r26
    2e68:	a9 2f       	mov	r26, r25
    2e6a:	98 2f       	mov	r25, r24
    2e6c:	88 27       	eor	r24, r24
    2e6e:	82 0f       	add	r24, r18
    2e70:	91 1d       	adc	r25, r1
    2e72:	a1 1d       	adc	r26, r1
    2e74:	b1 1d       	adc	r27, r1
    2e76:	bc 01       	movw	r22, r24
    2e78:	cd 01       	movw	r24, r26
    2e7a:	42 e0       	ldi	r20, 0x02	; 2
    2e7c:	66 0f       	add	r22, r22
    2e7e:	77 1f       	adc	r23, r23
    2e80:	88 1f       	adc	r24, r24
    2e82:	99 1f       	adc	r25, r25
    2e84:	4a 95       	dec	r20
    2e86:	d1 f7       	brne	.-12     	; 0x2e7c <micros+0x3c>
    2e88:	08 95       	ret

00002e8a <delay>:
    2e8a:	8f 92       	push	r8
    2e8c:	9f 92       	push	r9
    2e8e:	af 92       	push	r10
    2e90:	bf 92       	push	r11
    2e92:	cf 92       	push	r12
    2e94:	df 92       	push	r13
    2e96:	ef 92       	push	r14
    2e98:	ff 92       	push	r15
    2e9a:	6b 01       	movw	r12, r22
    2e9c:	7c 01       	movw	r14, r24
    2e9e:	0e 94 20 17 	call	0x2e40	; 0x2e40 <micros>
    2ea2:	4b 01       	movw	r8, r22
    2ea4:	5c 01       	movw	r10, r24
    2ea6:	c1 14       	cp	r12, r1
    2ea8:	d1 04       	cpc	r13, r1
    2eaa:	e1 04       	cpc	r14, r1
    2eac:	f1 04       	cpc	r15, r1
    2eae:	01 f1       	breq	.+64     	; 0x2ef0 <delay+0x66>
    2eb0:	0e 94 76 1a 	call	0x34ec	; 0x34ec <yield>
    2eb4:	0e 94 20 17 	call	0x2e40	; 0x2e40 <micros>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	88 19       	sub	r24, r8
    2ebe:	99 09       	sbc	r25, r9
    2ec0:	aa 09       	sbc	r26, r10
    2ec2:	bb 09       	sbc	r27, r11
    2ec4:	88 3e       	cpi	r24, 0xE8	; 232
    2ec6:	93 40       	sbci	r25, 0x03	; 3
    2ec8:	a1 05       	cpc	r26, r1
    2eca:	b1 05       	cpc	r27, r1
    2ecc:	60 f3       	brcs	.-40     	; 0x2ea6 <delay+0x1c>
    2ece:	21 e0       	ldi	r18, 0x01	; 1
    2ed0:	c2 1a       	sub	r12, r18
    2ed2:	d1 08       	sbc	r13, r1
    2ed4:	e1 08       	sbc	r14, r1
    2ed6:	f1 08       	sbc	r15, r1
    2ed8:	88 ee       	ldi	r24, 0xE8	; 232
    2eda:	88 0e       	add	r8, r24
    2edc:	83 e0       	ldi	r24, 0x03	; 3
    2ede:	98 1e       	adc	r9, r24
    2ee0:	a1 1c       	adc	r10, r1
    2ee2:	b1 1c       	adc	r11, r1
    2ee4:	c1 14       	cp	r12, r1
    2ee6:	d1 04       	cpc	r13, r1
    2ee8:	e1 04       	cpc	r14, r1
    2eea:	f1 04       	cpc	r15, r1
    2eec:	19 f7       	brne	.-58     	; 0x2eb4 <delay+0x2a>
    2eee:	db cf       	rjmp	.-74     	; 0x2ea6 <delay+0x1c>
    2ef0:	ff 90       	pop	r15
    2ef2:	ef 90       	pop	r14
    2ef4:	df 90       	pop	r13
    2ef6:	cf 90       	pop	r12
    2ef8:	bf 90       	pop	r11
    2efa:	af 90       	pop	r10
    2efc:	9f 90       	pop	r9
    2efe:	8f 90       	pop	r8
    2f00:	08 95       	ret

00002f02 <init>:
    2f02:	78 94       	sei
    2f04:	84 b5       	in	r24, 0x24	; 36
    2f06:	82 60       	ori	r24, 0x02	; 2
    2f08:	84 bd       	out	0x24, r24	; 36
    2f0a:	84 b5       	in	r24, 0x24	; 36
    2f0c:	81 60       	ori	r24, 0x01	; 1
    2f0e:	84 bd       	out	0x24, r24	; 36
    2f10:	85 b5       	in	r24, 0x25	; 37
    2f12:	82 60       	ori	r24, 0x02	; 2
    2f14:	85 bd       	out	0x25, r24	; 37
    2f16:	85 b5       	in	r24, 0x25	; 37
    2f18:	81 60       	ori	r24, 0x01	; 1
    2f1a:	85 bd       	out	0x25, r24	; 37
    2f1c:	ee e6       	ldi	r30, 0x6E	; 110
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	80 81       	ld	r24, Z
    2f22:	81 60       	ori	r24, 0x01	; 1
    2f24:	80 83       	st	Z, r24
    2f26:	e1 e8       	ldi	r30, 0x81	; 129
    2f28:	f0 e0       	ldi	r31, 0x00	; 0
    2f2a:	10 82       	st	Z, r1
    2f2c:	80 81       	ld	r24, Z
    2f2e:	82 60       	ori	r24, 0x02	; 2
    2f30:	80 83       	st	Z, r24
    2f32:	80 81       	ld	r24, Z
    2f34:	81 60       	ori	r24, 0x01	; 1
    2f36:	80 83       	st	Z, r24
    2f38:	e0 e8       	ldi	r30, 0x80	; 128
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	80 81       	ld	r24, Z
    2f3e:	81 60       	ori	r24, 0x01	; 1
    2f40:	80 83       	st	Z, r24
    2f42:	e1 e9       	ldi	r30, 0x91	; 145
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	80 81       	ld	r24, Z
    2f48:	82 60       	ori	r24, 0x02	; 2
    2f4a:	80 83       	st	Z, r24
    2f4c:	80 81       	ld	r24, Z
    2f4e:	81 60       	ori	r24, 0x01	; 1
    2f50:	80 83       	st	Z, r24
    2f52:	e0 e9       	ldi	r30, 0x90	; 144
    2f54:	f0 e0       	ldi	r31, 0x00	; 0
    2f56:	80 81       	ld	r24, Z
    2f58:	81 60       	ori	r24, 0x01	; 1
    2f5a:	80 83       	st	Z, r24
    2f5c:	e1 ec       	ldi	r30, 0xC1	; 193
    2f5e:	f0 e0       	ldi	r31, 0x00	; 0
    2f60:	80 81       	ld	r24, Z
    2f62:	84 60       	ori	r24, 0x04	; 4
    2f64:	80 83       	st	Z, r24
    2f66:	80 81       	ld	r24, Z
    2f68:	82 60       	ori	r24, 0x02	; 2
    2f6a:	80 83       	st	Z, r24
    2f6c:	80 81       	ld	r24, Z
    2f6e:	81 60       	ori	r24, 0x01	; 1
    2f70:	80 83       	st	Z, r24
    2f72:	e3 ec       	ldi	r30, 0xC3	; 195
    2f74:	f0 e0       	ldi	r31, 0x00	; 0
    2f76:	80 81       	ld	r24, Z
    2f78:	81 60       	ori	r24, 0x01	; 1
    2f7a:	80 83       	st	Z, r24
    2f7c:	e0 ec       	ldi	r30, 0xC0	; 192
    2f7e:	f0 e0       	ldi	r31, 0x00	; 0
    2f80:	80 81       	ld	r24, Z
    2f82:	82 60       	ori	r24, 0x02	; 2
    2f84:	80 83       	st	Z, r24
    2f86:	e2 ec       	ldi	r30, 0xC2	; 194
    2f88:	f0 e0       	ldi	r31, 0x00	; 0
    2f8a:	80 81       	ld	r24, Z
    2f8c:	81 60       	ori	r24, 0x01	; 1
    2f8e:	80 83       	st	Z, r24
    2f90:	ea e7       	ldi	r30, 0x7A	; 122
    2f92:	f0 e0       	ldi	r31, 0x00	; 0
    2f94:	80 81       	ld	r24, Z
    2f96:	84 60       	ori	r24, 0x04	; 4
    2f98:	80 83       	st	Z, r24
    2f9a:	80 81       	ld	r24, Z
    2f9c:	82 60       	ori	r24, 0x02	; 2
    2f9e:	80 83       	st	Z, r24
    2fa0:	80 81       	ld	r24, Z
    2fa2:	81 60       	ori	r24, 0x01	; 1
    2fa4:	80 83       	st	Z, r24
    2fa6:	80 81       	ld	r24, Z
    2fa8:	80 68       	ori	r24, 0x80	; 128
    2faa:	80 83       	st	Z, r24
    2fac:	08 95       	ret

00002fae <analogRead>:
    2fae:	82 31       	cpi	r24, 0x12	; 18
    2fb0:	08 f0       	brcs	.+2      	; 0x2fb4 <analogRead+0x6>
    2fb2:	82 51       	subi	r24, 0x12	; 18
    2fb4:	e8 2f       	mov	r30, r24
    2fb6:	f0 e0       	ldi	r31, 0x00	; 0
    2fb8:	e2 50       	subi	r30, 0x02	; 2
    2fba:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbc:	e4 91       	lpm	r30, Z
    2fbe:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    2fc2:	e3 fb       	bst	r30, 3
    2fc4:	22 27       	eor	r18, r18
    2fc6:	20 f9       	bld	r18, 0
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	95 e0       	ldi	r25, 0x05	; 5
    2fcc:	22 0f       	add	r18, r18
    2fce:	33 1f       	adc	r19, r19
    2fd0:	9a 95       	dec	r25
    2fd2:	e1 f7       	brne	.-8      	; 0x2fcc <analogRead+0x1e>
    2fd4:	8f 7d       	andi	r24, 0xDF	; 223
    2fd6:	28 2b       	or	r18, r24
    2fd8:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    2fdc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <analog_reference>
    2fe0:	20 e4       	ldi	r18, 0x40	; 64
    2fe2:	82 9f       	mul	r24, r18
    2fe4:	c0 01       	movw	r24, r0
    2fe6:	11 24       	eor	r1, r1
    2fe8:	e7 70       	andi	r30, 0x07	; 7
    2fea:	e8 2b       	or	r30, r24
    2fec:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2ff0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2ff4:	80 64       	ori	r24, 0x40	; 64
    2ff6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2ffa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2ffe:	86 fd       	sbrc	r24, 6
    3000:	fc cf       	rjmp	.-8      	; 0x2ffa <analogRead+0x4c>
    3002:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    3006:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	92 2b       	or	r25, r18
    300e:	08 95       	ret

00003010 <turnOffPWM>:
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	fc 01       	movw	r30, r24
    3014:	31 97       	sbiw	r30, 0x01	; 1
    3016:	ef 30       	cpi	r30, 0x0F	; 15
    3018:	f1 05       	cpc	r31, r1
    301a:	b0 f5       	brcc	.+108    	; 0x3088 <turnOffPWM+0x78>
    301c:	ea 5a       	subi	r30, 0xAA	; 170
    301e:	ff 4f       	sbci	r31, 0xFF	; 255
    3020:	0c 94 ec 1b 	jmp	0x37d8	; 0x37d8 <__tablejump2__>
    3024:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3028:	8f 77       	andi	r24, 0x7F	; 127
    302a:	03 c0       	rjmp	.+6      	; 0x3032 <turnOffPWM+0x22>
    302c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3030:	8f 7d       	andi	r24, 0xDF	; 223
    3032:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3036:	08 95       	ret
    3038:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    303c:	87 7f       	andi	r24, 0xF7	; 247
    303e:	f9 cf       	rjmp	.-14     	; 0x3032 <turnOffPWM+0x22>
    3040:	84 b5       	in	r24, 0x24	; 36
    3042:	8f 77       	andi	r24, 0x7F	; 127
    3044:	02 c0       	rjmp	.+4      	; 0x304a <turnOffPWM+0x3a>
    3046:	84 b5       	in	r24, 0x24	; 36
    3048:	8f 7d       	andi	r24, 0xDF	; 223
    304a:	84 bd       	out	0x24, r24	; 36
    304c:	08 95       	ret
    304e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    3052:	8f 77       	andi	r24, 0x7F	; 127
    3054:	07 c0       	rjmp	.+14     	; 0x3064 <turnOffPWM+0x54>
    3056:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    305a:	8f 7d       	andi	r24, 0xDF	; 223
    305c:	03 c0       	rjmp	.+6      	; 0x3064 <turnOffPWM+0x54>
    305e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    3062:	87 7f       	andi	r24, 0xF7	; 247
    3064:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    3068:	08 95       	ret
    306a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    306e:	8f 77       	andi	r24, 0x7F	; 127
    3070:	03 c0       	rjmp	.+6      	; 0x3078 <turnOffPWM+0x68>
    3072:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3076:	8f 7d       	andi	r24, 0xDF	; 223
    3078:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    307c:	08 95       	ret
    307e:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    3082:	87 7f       	andi	r24, 0xF7	; 247
    3084:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    3088:	08 95       	ret

0000308a <pinMode>:
    308a:	cf 93       	push	r28
    308c:	df 93       	push	r29
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	fc 01       	movw	r30, r24
    3092:	e7 5d       	subi	r30, 0xD7	; 215
    3094:	fe 4f       	sbci	r31, 0xFE	; 254
    3096:	24 91       	lpm	r18, Z
    3098:	fc 01       	movw	r30, r24
    309a:	e8 5b       	subi	r30, 0xB8	; 184
    309c:	fe 4f       	sbci	r31, 0xFE	; 254
    309e:	84 91       	lpm	r24, Z
    30a0:	88 23       	and	r24, r24
    30a2:	61 f1       	breq	.+88     	; 0x30fc <pinMode+0x72>
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	88 0f       	add	r24, r24
    30a8:	99 1f       	adc	r25, r25
    30aa:	fc 01       	movw	r30, r24
    30ac:	ed 57       	subi	r30, 0x7D	; 125
    30ae:	fe 4f       	sbci	r31, 0xFE	; 254
    30b0:	c5 91       	lpm	r28, Z+
    30b2:	d4 91       	lpm	r29, Z
    30b4:	fc 01       	movw	r30, r24
    30b6:	eb 58       	subi	r30, 0x8B	; 139
    30b8:	fe 4f       	sbci	r31, 0xFE	; 254
    30ba:	a5 91       	lpm	r26, Z+
    30bc:	b4 91       	lpm	r27, Z
    30be:	61 11       	cpse	r22, r1
    30c0:	09 c0       	rjmp	.+18     	; 0x30d4 <pinMode+0x4a>
    30c2:	9f b7       	in	r25, 0x3f	; 63
    30c4:	f8 94       	cli
    30c6:	88 81       	ld	r24, Y
    30c8:	20 95       	com	r18
    30ca:	82 23       	and	r24, r18
    30cc:	88 83       	st	Y, r24
    30ce:	ec 91       	ld	r30, X
    30d0:	2e 23       	and	r18, r30
    30d2:	0b c0       	rjmp	.+22     	; 0x30ea <pinMode+0x60>
    30d4:	62 30       	cpi	r22, 0x02	; 2
    30d6:	61 f4       	brne	.+24     	; 0x30f0 <pinMode+0x66>
    30d8:	9f b7       	in	r25, 0x3f	; 63
    30da:	f8 94       	cli
    30dc:	88 81       	ld	r24, Y
    30de:	32 2f       	mov	r19, r18
    30e0:	30 95       	com	r19
    30e2:	83 23       	and	r24, r19
    30e4:	88 83       	st	Y, r24
    30e6:	ec 91       	ld	r30, X
    30e8:	2e 2b       	or	r18, r30
    30ea:	2c 93       	st	X, r18
    30ec:	9f bf       	out	0x3f, r25	; 63
    30ee:	06 c0       	rjmp	.+12     	; 0x30fc <pinMode+0x72>
    30f0:	8f b7       	in	r24, 0x3f	; 63
    30f2:	f8 94       	cli
    30f4:	e8 81       	ld	r30, Y
    30f6:	2e 2b       	or	r18, r30
    30f8:	28 83       	st	Y, r18
    30fa:	8f bf       	out	0x3f, r24	; 63
    30fc:	df 91       	pop	r29
    30fe:	cf 91       	pop	r28
    3100:	08 95       	ret

00003102 <digitalWrite>:
    3102:	1f 93       	push	r17
    3104:	cf 93       	push	r28
    3106:	df 93       	push	r29
    3108:	28 2f       	mov	r18, r24
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	f9 01       	movw	r30, r18
    310e:	e6 5f       	subi	r30, 0xF6	; 246
    3110:	fe 4f       	sbci	r31, 0xFE	; 254
    3112:	84 91       	lpm	r24, Z
    3114:	f9 01       	movw	r30, r18
    3116:	e7 5d       	subi	r30, 0xD7	; 215
    3118:	fe 4f       	sbci	r31, 0xFE	; 254
    311a:	d4 91       	lpm	r29, Z
    311c:	f9 01       	movw	r30, r18
    311e:	e8 5b       	subi	r30, 0xB8	; 184
    3120:	fe 4f       	sbci	r31, 0xFE	; 254
    3122:	c4 91       	lpm	r28, Z
    3124:	cc 23       	and	r28, r28
    3126:	c1 f0       	breq	.+48     	; 0x3158 <digitalWrite+0x56>
    3128:	16 2f       	mov	r17, r22
    312a:	81 11       	cpse	r24, r1
    312c:	0e 94 08 18 	call	0x3010	; 0x3010 <turnOffPWM>
    3130:	ec 2f       	mov	r30, r28
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	ee 0f       	add	r30, r30
    3136:	ff 1f       	adc	r31, r31
    3138:	eb 58       	subi	r30, 0x8B	; 139
    313a:	fe 4f       	sbci	r31, 0xFE	; 254
    313c:	a5 91       	lpm	r26, Z+
    313e:	b4 91       	lpm	r27, Z
    3140:	9f b7       	in	r25, 0x3f	; 63
    3142:	f8 94       	cli
    3144:	11 11       	cpse	r17, r1
    3146:	04 c0       	rjmp	.+8      	; 0x3150 <digitalWrite+0x4e>
    3148:	8c 91       	ld	r24, X
    314a:	d0 95       	com	r29
    314c:	d8 23       	and	r29, r24
    314e:	02 c0       	rjmp	.+4      	; 0x3154 <digitalWrite+0x52>
    3150:	ec 91       	ld	r30, X
    3152:	de 2b       	or	r29, r30
    3154:	dc 93       	st	X, r29
    3156:	9f bf       	out	0x3f, r25	; 63
    3158:	df 91       	pop	r29
    315a:	cf 91       	pop	r28
    315c:	1f 91       	pop	r17
    315e:	08 95       	ret

00003160 <digitalRead>:
    3160:	cf 93       	push	r28
    3162:	df 93       	push	r29
    3164:	28 2f       	mov	r18, r24
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	f9 01       	movw	r30, r18
    316a:	e6 5f       	subi	r30, 0xF6	; 246
    316c:	fe 4f       	sbci	r31, 0xFE	; 254
    316e:	84 91       	lpm	r24, Z
    3170:	f9 01       	movw	r30, r18
    3172:	e7 5d       	subi	r30, 0xD7	; 215
    3174:	fe 4f       	sbci	r31, 0xFE	; 254
    3176:	d4 91       	lpm	r29, Z
    3178:	f9 01       	movw	r30, r18
    317a:	e8 5b       	subi	r30, 0xB8	; 184
    317c:	fe 4f       	sbci	r31, 0xFE	; 254
    317e:	c4 91       	lpm	r28, Z
    3180:	cc 23       	and	r28, r28
    3182:	91 f0       	breq	.+36     	; 0x31a8 <digitalRead+0x48>
    3184:	81 11       	cpse	r24, r1
    3186:	0e 94 08 18 	call	0x3010	; 0x3010 <turnOffPWM>
    318a:	ec 2f       	mov	r30, r28
    318c:	f0 e0       	ldi	r31, 0x00	; 0
    318e:	ee 0f       	add	r30, r30
    3190:	ff 1f       	adc	r31, r31
    3192:	e9 59       	subi	r30, 0x99	; 153
    3194:	fe 4f       	sbci	r31, 0xFE	; 254
    3196:	a5 91       	lpm	r26, Z+
    3198:	b4 91       	lpm	r27, Z
    319a:	ec 91       	ld	r30, X
    319c:	ed 23       	and	r30, r29
    319e:	81 e0       	ldi	r24, 0x01	; 1
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	21 f4       	brne	.+8      	; 0x31ac <digitalRead+0x4c>
    31a4:	80 e0       	ldi	r24, 0x00	; 0
    31a6:	02 c0       	rjmp	.+4      	; 0x31ac <digitalRead+0x4c>
    31a8:	80 e0       	ldi	r24, 0x00	; 0
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	df 91       	pop	r29
    31ae:	cf 91       	pop	r28
    31b0:	08 95       	ret

000031b2 <_ZN6StringD1Ev>:
    31b2:	fc 01       	movw	r30, r24
    31b4:	80 81       	ld	r24, Z
    31b6:	91 81       	ldd	r25, Z+1	; 0x01
    31b8:	0c 94 9e 1c 	jmp	0x393c	; 0x393c <free>

000031bc <_ZN6String10invalidateEv>:
    31bc:	cf 93       	push	r28
    31be:	df 93       	push	r29
    31c0:	ec 01       	movw	r28, r24
    31c2:	88 81       	ld	r24, Y
    31c4:	99 81       	ldd	r25, Y+1	; 0x01
    31c6:	00 97       	sbiw	r24, 0x00	; 0
    31c8:	11 f0       	breq	.+4      	; 0x31ce <_ZN6String10invalidateEv+0x12>
    31ca:	0e 94 9e 1c 	call	0x393c	; 0x393c <free>
    31ce:	19 82       	std	Y+1, r1	; 0x01
    31d0:	18 82       	st	Y, r1
    31d2:	1d 82       	std	Y+5, r1	; 0x05
    31d4:	1c 82       	std	Y+4, r1	; 0x04
    31d6:	1b 82       	std	Y+3, r1	; 0x03
    31d8:	1a 82       	std	Y+2, r1	; 0x02
    31da:	df 91       	pop	r29
    31dc:	cf 91       	pop	r28
    31de:	08 95       	ret

000031e0 <_ZN6String12changeBufferEj>:
    31e0:	0f 93       	push	r16
    31e2:	1f 93       	push	r17
    31e4:	cf 93       	push	r28
    31e6:	df 93       	push	r29
    31e8:	ec 01       	movw	r28, r24
    31ea:	8b 01       	movw	r16, r22
    31ec:	6f 5f       	subi	r22, 0xFF	; 255
    31ee:	7f 4f       	sbci	r23, 0xFF	; 255
    31f0:	88 81       	ld	r24, Y
    31f2:	99 81       	ldd	r25, Y+1	; 0x01
    31f4:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <realloc>
    31f8:	00 97       	sbiw	r24, 0x00	; 0
    31fa:	31 f0       	breq	.+12     	; 0x3208 <_ZN6String12changeBufferEj+0x28>
    31fc:	99 83       	std	Y+1, r25	; 0x01
    31fe:	88 83       	st	Y, r24
    3200:	1b 83       	std	Y+3, r17	; 0x03
    3202:	0a 83       	std	Y+2, r16	; 0x02
    3204:	81 e0       	ldi	r24, 0x01	; 1
    3206:	01 c0       	rjmp	.+2      	; 0x320a <_ZN6String12changeBufferEj+0x2a>
    3208:	80 e0       	ldi	r24, 0x00	; 0
    320a:	df 91       	pop	r29
    320c:	cf 91       	pop	r28
    320e:	1f 91       	pop	r17
    3210:	0f 91       	pop	r16
    3212:	08 95       	ret

00003214 <_ZN6String7reserveEj>:
    3214:	cf 93       	push	r28
    3216:	df 93       	push	r29
    3218:	ec 01       	movw	r28, r24
    321a:	88 81       	ld	r24, Y
    321c:	99 81       	ldd	r25, Y+1	; 0x01
    321e:	89 2b       	or	r24, r25
    3220:	29 f0       	breq	.+10     	; 0x322c <_ZN6String7reserveEj+0x18>
    3222:	8a 81       	ldd	r24, Y+2	; 0x02
    3224:	9b 81       	ldd	r25, Y+3	; 0x03
    3226:	86 17       	cp	r24, r22
    3228:	97 07       	cpc	r25, r23
    322a:	60 f4       	brcc	.+24     	; 0x3244 <_ZN6String7reserveEj+0x30>
    322c:	ce 01       	movw	r24, r28
    322e:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <_ZN6String12changeBufferEj>
    3232:	88 23       	and	r24, r24
    3234:	41 f0       	breq	.+16     	; 0x3246 <_ZN6String7reserveEj+0x32>
    3236:	8c 81       	ldd	r24, Y+4	; 0x04
    3238:	9d 81       	ldd	r25, Y+5	; 0x05
    323a:	89 2b       	or	r24, r25
    323c:	19 f4       	brne	.+6      	; 0x3244 <_ZN6String7reserveEj+0x30>
    323e:	e8 81       	ld	r30, Y
    3240:	f9 81       	ldd	r31, Y+1	; 0x01
    3242:	10 82       	st	Z, r1
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	df 91       	pop	r29
    3248:	cf 91       	pop	r28
    324a:	08 95       	ret

0000324c <_ZN6String4copyEPKcj>:
    324c:	ef 92       	push	r14
    324e:	ff 92       	push	r15
    3250:	0f 93       	push	r16
    3252:	1f 93       	push	r17
    3254:	cf 93       	push	r28
    3256:	df 93       	push	r29
    3258:	ec 01       	movw	r28, r24
    325a:	7b 01       	movw	r14, r22
    325c:	8a 01       	movw	r16, r20
    325e:	ba 01       	movw	r22, r20
    3260:	0e 94 0a 19 	call	0x3214	; 0x3214 <_ZN6String7reserveEj>
    3264:	81 11       	cpse	r24, r1
    3266:	04 c0       	rjmp	.+8      	; 0x3270 <_ZN6String4copyEPKcj+0x24>
    3268:	ce 01       	movw	r24, r28
    326a:	0e 94 de 18 	call	0x31bc	; 0x31bc <_ZN6String10invalidateEv>
    326e:	07 c0       	rjmp	.+14     	; 0x327e <_ZN6String4copyEPKcj+0x32>
    3270:	1d 83       	std	Y+5, r17	; 0x05
    3272:	0c 83       	std	Y+4, r16	; 0x04
    3274:	b7 01       	movw	r22, r14
    3276:	88 81       	ld	r24, Y
    3278:	99 81       	ldd	r25, Y+1	; 0x01
    327a:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <strcpy>
    327e:	ce 01       	movw	r24, r28
    3280:	df 91       	pop	r29
    3282:	cf 91       	pop	r28
    3284:	1f 91       	pop	r17
    3286:	0f 91       	pop	r16
    3288:	ff 90       	pop	r15
    328a:	ef 90       	pop	r14
    328c:	08 95       	ret

0000328e <_ZN6StringC1EPKc>:
    328e:	fc 01       	movw	r30, r24
    3290:	11 82       	std	Z+1, r1	; 0x01
    3292:	10 82       	st	Z, r1
    3294:	13 82       	std	Z+3, r1	; 0x03
    3296:	12 82       	std	Z+2, r1	; 0x02
    3298:	15 82       	std	Z+5, r1	; 0x05
    329a:	14 82       	std	Z+4, r1	; 0x04
    329c:	61 15       	cp	r22, r1
    329e:	71 05       	cpc	r23, r1
    32a0:	51 f0       	breq	.+20     	; 0x32b6 <_ZN6StringC1EPKc+0x28>
    32a2:	fb 01       	movw	r30, r22
    32a4:	01 90       	ld	r0, Z+
    32a6:	00 20       	and	r0, r0
    32a8:	e9 f7       	brne	.-6      	; 0x32a4 <_ZN6StringC1EPKc+0x16>
    32aa:	31 97       	sbiw	r30, 0x01	; 1
    32ac:	af 01       	movw	r20, r30
    32ae:	46 1b       	sub	r20, r22
    32b0:	57 0b       	sbc	r21, r23
    32b2:	0c 94 26 19 	jmp	0x324c	; 0x324c <_ZN6String4copyEPKcj>
    32b6:	08 95       	ret

000032b8 <_ZN7Serial_5writeEh>:
    32b8:	cf 93       	push	r28
    32ba:	df 93       	push	r29
    32bc:	1f 92       	push	r1
    32be:	cd b7       	in	r28, 0x3d	; 61
    32c0:	de b7       	in	r29, 0x3e	; 62
    32c2:	69 83       	std	Y+1, r22	; 0x01
    32c4:	dc 01       	movw	r26, r24
    32c6:	ed 91       	ld	r30, X+
    32c8:	fc 91       	ld	r31, X
    32ca:	02 80       	ldd	r0, Z+2	; 0x02
    32cc:	f3 81       	ldd	r31, Z+3	; 0x03
    32ce:	e0 2d       	mov	r30, r0
    32d0:	41 e0       	ldi	r20, 0x01	; 1
    32d2:	50 e0       	ldi	r21, 0x00	; 0
    32d4:	be 01       	movw	r22, r28
    32d6:	6f 5f       	subi	r22, 0xFF	; 255
    32d8:	7f 4f       	sbci	r23, 0xFF	; 255
    32da:	09 95       	icall
    32dc:	0f 90       	pop	r0
    32de:	df 91       	pop	r29
    32e0:	cf 91       	pop	r28
    32e2:	08 95       	ret

000032e4 <_ZN7Serial_4peekEv>:
    32e4:	cf 93       	push	r28
    32e6:	df 93       	push	r29
    32e8:	ec 01       	movw	r28, r24
    32ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    32ec:	9d 85       	ldd	r25, Y+13	; 0x0d
    32ee:	97 ff       	sbrs	r25, 7
    32f0:	05 c0       	rjmp	.+10     	; 0x32fc <_ZN7Serial_4peekEv+0x18>
    32f2:	82 e0       	ldi	r24, 0x02	; 2
    32f4:	0e 94 97 13 	call	0x272e	; 0x272e <_Z8USB_Recvh>
    32f8:	9d 87       	std	Y+13, r25	; 0x0d
    32fa:	8c 87       	std	Y+12, r24	; 0x0c
    32fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    32fe:	9d 85       	ldd	r25, Y+13	; 0x0d
    3300:	df 91       	pop	r29
    3302:	cf 91       	pop	r28
    3304:	08 95       	ret

00003306 <_ZN7Serial_17availableForWriteEv>:
    3306:	83 e0       	ldi	r24, 0x03	; 3
    3308:	0e 94 ae 13 	call	0x275c	; 0x275c <_Z13USB_SendSpaceh>
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	08 95       	ret

00003310 <_ZN7Serial_5flushEv>:
    3310:	83 e0       	ldi	r24, 0x03	; 3
    3312:	0c 94 2c 16 	jmp	0x2c58	; 0x2c58 <_Z9USB_Flushh>

00003316 <_ZN7Serial_9availableEv>:
    3316:	fc 01       	movw	r30, r24
    3318:	84 85       	ldd	r24, Z+12	; 0x0c
    331a:	95 85       	ldd	r25, Z+13	; 0x0d
    331c:	97 fd       	sbrc	r25, 7
    331e:	06 c0       	rjmp	.+12     	; 0x332c <_ZN7Serial_9availableEv+0x16>
    3320:	82 e0       	ldi	r24, 0x02	; 2
    3322:	0e 94 42 13 	call	0x2684	; 0x2684 <_Z13USB_Availableh>
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	01 96       	adiw	r24, 0x01	; 1
    332a:	08 95       	ret
    332c:	82 e0       	ldi	r24, 0x02	; 2
    332e:	0e 94 42 13 	call	0x2684	; 0x2684 <_Z13USB_Availableh>
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	08 95       	ret

00003336 <_ZN7Serial_4readEv>:
    3336:	fc 01       	movw	r30, r24
    3338:	84 85       	ldd	r24, Z+12	; 0x0c
    333a:	95 85       	ldd	r25, Z+13	; 0x0d
    333c:	97 fd       	sbrc	r25, 7
    333e:	05 c0       	rjmp	.+10     	; 0x334a <_ZN7Serial_4readEv+0x14>
    3340:	2f ef       	ldi	r18, 0xFF	; 255
    3342:	3f ef       	ldi	r19, 0xFF	; 255
    3344:	35 87       	std	Z+13, r19	; 0x0d
    3346:	24 87       	std	Z+12, r18	; 0x0c
    3348:	08 95       	ret
    334a:	82 e0       	ldi	r24, 0x02	; 2
    334c:	0c 94 97 13 	jmp	0x272e	; 0x272e <_Z8USB_Recvh>

00003350 <_ZN7Serial_5writeEPKhj>:
    3350:	cf 93       	push	r28
    3352:	df 93       	push	r29
    3354:	ec 01       	movw	r28, r24
    3356:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL12_usbLineInfo+0x7>
    335a:	88 23       	and	r24, r24
    335c:	31 f0       	breq	.+12     	; 0x336a <_ZN7Serial_5writeEPKhj+0x1a>
    335e:	83 e0       	ldi	r24, 0x03	; 3
    3360:	0e 94 c8 13 	call	0x2790	; 0x2790 <_Z8USB_SendhPKvi>
    3364:	18 16       	cp	r1, r24
    3366:	19 06       	cpc	r1, r25
    3368:	34 f0       	brlt	.+12     	; 0x3376 <_ZN7Serial_5writeEPKhj+0x26>
    336a:	81 e0       	ldi	r24, 0x01	; 1
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	9b 83       	std	Y+3, r25	; 0x03
    3370:	8a 83       	std	Y+2, r24	; 0x02
    3372:	80 e0       	ldi	r24, 0x00	; 0
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	df 91       	pop	r29
    3378:	cf 91       	pop	r28
    337a:	08 95       	ret

0000337c <_Z16isLUFAbootloaderv>:
    337c:	ee ef       	ldi	r30, 0xFE	; 254
    337e:	ff e7       	ldi	r31, 0x7F	; 127
    3380:	25 91       	lpm	r18, Z+
    3382:	34 91       	lpm	r19, Z
    3384:	81 e0       	ldi	r24, 0x01	; 1
    3386:	2b 3f       	cpi	r18, 0xFB	; 251
    3388:	3c 4d       	sbci	r19, 0xDC	; 220
    338a:	09 f0       	breq	.+2      	; 0x338e <_Z16isLUFAbootloaderv+0x12>
    338c:	80 e0       	ldi	r24, 0x00	; 0
    338e:	08 95       	ret

00003390 <_Z16CDC_GetInterfacePh>:
    3390:	fc 01       	movw	r30, r24
    3392:	90 81       	ld	r25, Z
    3394:	9e 5f       	subi	r25, 0xFE	; 254
    3396:	90 83       	st	Z, r25
    3398:	42 e4       	ldi	r20, 0x42	; 66
    339a:	50 e0       	ldi	r21, 0x00	; 0
    339c:	61 e9       	ldi	r22, 0x91	; 145
    339e:	71 e0       	ldi	r23, 0x01	; 1
    33a0:	80 e8       	ldi	r24, 0x80	; 128
    33a2:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <_Z15USB_SendControlhPKvi>

000033a6 <_Z9CDC_SetupR8USBSetup>:
    33a6:	fc 01       	movw	r30, r24
    33a8:	81 81       	ldd	r24, Z+1	; 0x01
    33aa:	90 81       	ld	r25, Z
    33ac:	91 3a       	cpi	r25, 0xA1	; 161
    33ae:	59 f4       	brne	.+22     	; 0x33c6 <_Z9CDC_SetupR8USBSetup+0x20>
    33b0:	81 32       	cpi	r24, 0x21	; 33
    33b2:	09 f0       	breq	.+2      	; 0x33b6 <_Z9CDC_SetupR8USBSetup+0x10>
    33b4:	65 c0       	rjmp	.+202    	; 0x3480 <_Z9CDC_SetupR8USBSetup+0xda>
    33b6:	47 e0       	ldi	r20, 0x07	; 7
    33b8:	50 e0       	ldi	r21, 0x00	; 0
    33ba:	66 e1       	ldi	r22, 0x16	; 22
    33bc:	71 e0       	ldi	r23, 0x01	; 1
    33be:	80 e0       	ldi	r24, 0x00	; 0
    33c0:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_Z15USB_SendControlhPKvi>
    33c4:	5b c0       	rjmp	.+182    	; 0x347c <_Z9CDC_SetupR8USBSetup+0xd6>
    33c6:	91 32       	cpi	r25, 0x21	; 33
    33c8:	09 f0       	breq	.+2      	; 0x33cc <_Z9CDC_SetupR8USBSetup+0x26>
    33ca:	5a c0       	rjmp	.+180    	; 0x3480 <_Z9CDC_SetupR8USBSetup+0xda>
    33cc:	83 32       	cpi	r24, 0x23	; 35
    33ce:	69 f4       	brne	.+26     	; 0x33ea <_Z9CDC_SetupR8USBSetup+0x44>
    33d0:	82 81       	ldd	r24, Z+2	; 0x02
    33d2:	93 81       	ldd	r25, Z+3	; 0x03
    33d4:	a0 e0       	ldi	r26, 0x00	; 0
    33d6:	b0 e0       	ldi	r27, 0x00	; 0
    33d8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_ZL10breakValue>
    33dc:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_ZL10breakValue+0x1>
    33e0:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <_ZL10breakValue+0x2>
    33e4:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <_ZL10breakValue+0x3>
    33e8:	49 c0       	rjmp	.+146    	; 0x347c <_Z9CDC_SetupR8USBSetup+0xd6>
    33ea:	80 32       	cpi	r24, 0x20	; 32
    33ec:	39 f4       	brne	.+14     	; 0x33fc <_Z9CDC_SetupR8USBSetup+0x56>
    33ee:	67 e0       	ldi	r22, 0x07	; 7
    33f0:	70 e0       	ldi	r23, 0x00	; 0
    33f2:	86 e1       	ldi	r24, 0x16	; 22
    33f4:	91 e0       	ldi	r25, 0x01	; 1
    33f6:	0e 94 9f 14 	call	0x293e	; 0x293e <_Z15USB_RecvControlPvi>
    33fa:	40 c0       	rjmp	.+128    	; 0x347c <_Z9CDC_SetupR8USBSetup+0xd6>
    33fc:	82 32       	cpi	r24, 0x22	; 34
    33fe:	09 f0       	breq	.+2      	; 0x3402 <_Z9CDC_SetupR8USBSetup+0x5c>
    3400:	3d c0       	rjmp	.+122    	; 0x347c <_Z9CDC_SetupR8USBSetup+0xd6>
    3402:	82 81       	ldd	r24, Z+2	; 0x02
    3404:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZL12_usbLineInfo+0x7>
    3408:	0e 94 be 19 	call	0x337c	; 0x337c <_Z16isLUFAbootloaderv>
    340c:	88 23       	and	r24, r24
    340e:	19 f0       	breq	.+6      	; 0x3416 <_Z9CDC_SetupR8USBSetup+0x70>
    3410:	ee ef       	ldi	r30, 0xFE	; 254
    3412:	fa e0       	ldi	r31, 0x0A	; 10
    3414:	02 c0       	rjmp	.+4      	; 0x341a <_Z9CDC_SetupR8USBSetup+0x74>
    3416:	e0 e0       	ldi	r30, 0x00	; 0
    3418:	f8 e0       	ldi	r31, 0x08	; 8
    341a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_ZL12_usbLineInfo>
    341e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <_ZL12_usbLineInfo+0x1>
    3422:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <_ZL12_usbLineInfo+0x2>
    3426:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <_ZL12_usbLineInfo+0x3>
    342a:	80 3b       	cpi	r24, 0xB0	; 176
    342c:	94 40       	sbci	r25, 0x04	; 4
    342e:	a1 05       	cpc	r26, r1
    3430:	b1 05       	cpc	r27, r1
    3432:	41 f5       	brne	.+80     	; 0x3484 <_Z9CDC_SetupR8USBSetup+0xde>
    3434:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL12_usbLineInfo+0x7>
    3438:	80 fd       	sbrc	r24, 0
    343a:	24 c0       	rjmp	.+72     	; 0x3484 <_Z9CDC_SetupR8USBSetup+0xde>
    343c:	ee 3f       	cpi	r30, 0xFE	; 254
    343e:	8a e0       	ldi	r24, 0x0A	; 10
    3440:	f8 07       	cpc	r31, r24
    3442:	51 f0       	breq	.+20     	; 0x3458 <_Z9CDC_SetupR8USBSetup+0xb2>
    3444:	80 81       	ld	r24, Z
    3446:	91 81       	ldd	r25, Z+1	; 0x01
    3448:	87 37       	cpi	r24, 0x77	; 119
    344a:	27 e7       	ldi	r18, 0x77	; 119
    344c:	92 07       	cpc	r25, r18
    344e:	21 f0       	breq	.+8      	; 0x3458 <_Z9CDC_SetupR8USBSetup+0xb2>
    3450:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x6a8>
    3454:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x6a7>
    3458:	87 e7       	ldi	r24, 0x77	; 119
    345a:	97 e7       	ldi	r25, 0x77	; 119
    345c:	91 83       	std	Z+1, r25	; 0x01
    345e:	80 83       	st	Z, r24
    3460:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3464:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <_ZL11wdtcsr_save>
    3468:	9b e0       	ldi	r25, 0x0B	; 11
    346a:	88 e1       	ldi	r24, 0x18	; 24
    346c:	0f b6       	in	r0, 0x3f	; 63
    346e:	f8 94       	cli
    3470:	a8 95       	wdr
    3472:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3476:	0f be       	out	0x3f, r0	; 63
    3478:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    347c:	81 e0       	ldi	r24, 0x01	; 1
    347e:	08 95       	ret
    3480:	80 e0       	ldi	r24, 0x00	; 0
    3482:	08 95       	ret
    3484:	80 81       	ld	r24, Z
    3486:	91 81       	ldd	r25, Z+1	; 0x01
    3488:	87 37       	cpi	r24, 0x77	; 119
    348a:	97 47       	sbci	r25, 0x77	; 119
    348c:	b9 f7       	brne	.-18     	; 0x347c <_Z9CDC_SetupR8USBSetup+0xd6>
    348e:	a8 95       	wdr
    3490:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3494:	88 61       	ori	r24, 0x18	; 24
    3496:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    349a:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <_ZL11wdtcsr_save>
    349e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    34a2:	ee 3f       	cpi	r30, 0xFE	; 254
    34a4:	8a e0       	ldi	r24, 0x0A	; 10
    34a6:	f8 07       	cpc	r31, r24
    34a8:	39 f0       	breq	.+14     	; 0x34b8 <_Z9CDC_SetupR8USBSetup+0x112>
    34aa:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x6a7>
    34ae:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x6a8>
    34b2:	91 83       	std	Z+1, r25	; 0x01
    34b4:	80 83       	st	Z, r24
    34b6:	e2 cf       	rjmp	.-60     	; 0x347c <_Z9CDC_SetupR8USBSetup+0xd6>
    34b8:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x6a8>
    34bc:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x6a7>
    34c0:	dd cf       	rjmp	.-70     	; 0x347c <_Z9CDC_SetupR8USBSetup+0xd6>

000034c2 <_GLOBAL__sub_I__cdcInterface>:
    34c2:	e6 ef       	ldi	r30, 0xF6	; 246
    34c4:	f3 e0       	ldi	r31, 0x03	; 3
    34c6:	13 82       	std	Z+3, r1	; 0x03
    34c8:	12 82       	std	Z+2, r1	; 0x02
    34ca:	88 ee       	ldi	r24, 0xE8	; 232
    34cc:	93 e0       	ldi	r25, 0x03	; 3
    34ce:	a0 e0       	ldi	r26, 0x00	; 0
    34d0:	b0 e0       	ldi	r27, 0x00	; 0
    34d2:	84 83       	std	Z+4, r24	; 0x04
    34d4:	95 83       	std	Z+5, r25	; 0x05
    34d6:	a6 83       	std	Z+6, r26	; 0x06
    34d8:	b7 83       	std	Z+7, r27	; 0x07
    34da:	8f e3       	ldi	r24, 0x3F	; 63
    34dc:	92 e0       	ldi	r25, 0x02	; 2
    34de:	91 83       	std	Z+1, r25	; 0x01
    34e0:	80 83       	st	Z, r24
    34e2:	8f ef       	ldi	r24, 0xFF	; 255
    34e4:	9f ef       	ldi	r25, 0xFF	; 255
    34e6:	95 87       	std	Z+13, r25	; 0x0d
    34e8:	84 87       	std	Z+12, r24	; 0x0c
    34ea:	08 95       	ret

000034ec <yield>:
    34ec:	08 95       	ret

000034ee <_ZN13PluggableUSB_12getInterfaceEPh>:
    34ee:	ef 92       	push	r14
    34f0:	ff 92       	push	r15
    34f2:	0f 93       	push	r16
    34f4:	1f 93       	push	r17
    34f6:	cf 93       	push	r28
    34f8:	df 93       	push	r29
    34fa:	7b 01       	movw	r14, r22
    34fc:	fc 01       	movw	r30, r24
    34fe:	c2 81       	ldd	r28, Z+2	; 0x02
    3500:	d3 81       	ldd	r29, Z+3	; 0x03
    3502:	00 e0       	ldi	r16, 0x00	; 0
    3504:	10 e0       	ldi	r17, 0x00	; 0
    3506:	20 97       	sbiw	r28, 0x00	; 0
    3508:	81 f0       	breq	.+32     	; 0x352a <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
    350a:	e8 81       	ld	r30, Y
    350c:	f9 81       	ldd	r31, Y+1	; 0x01
    350e:	02 80       	ldd	r0, Z+2	; 0x02
    3510:	f3 81       	ldd	r31, Z+3	; 0x03
    3512:	e0 2d       	mov	r30, r0
    3514:	b7 01       	movw	r22, r14
    3516:	ce 01       	movw	r24, r28
    3518:	09 95       	icall
    351a:	97 fd       	sbrc	r25, 7
    351c:	08 c0       	rjmp	.+16     	; 0x352e <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
    351e:	08 0f       	add	r16, r24
    3520:	19 1f       	adc	r17, r25
    3522:	08 84       	ldd	r0, Y+8	; 0x08
    3524:	d9 85       	ldd	r29, Y+9	; 0x09
    3526:	c0 2d       	mov	r28, r0
    3528:	ee cf       	rjmp	.-36     	; 0x3506 <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    352a:	c8 01       	movw	r24, r16
    352c:	02 c0       	rjmp	.+4      	; 0x3532 <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
    352e:	8f ef       	ldi	r24, 0xFF	; 255
    3530:	9f ef       	ldi	r25, 0xFF	; 255
    3532:	df 91       	pop	r29
    3534:	cf 91       	pop	r28
    3536:	1f 91       	pop	r17
    3538:	0f 91       	pop	r16
    353a:	ff 90       	pop	r15
    353c:	ef 90       	pop	r14
    353e:	08 95       	ret

00003540 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    3540:	0f 93       	push	r16
    3542:	1f 93       	push	r17
    3544:	cf 93       	push	r28
    3546:	df 93       	push	r29
    3548:	8b 01       	movw	r16, r22
    354a:	fc 01       	movw	r30, r24
    354c:	c2 81       	ldd	r28, Z+2	; 0x02
    354e:	d3 81       	ldd	r29, Z+3	; 0x03
    3550:	20 97       	sbiw	r28, 0x00	; 0
    3552:	71 f0       	breq	.+28     	; 0x3570 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
    3554:	e8 81       	ld	r30, Y
    3556:	f9 81       	ldd	r31, Y+1	; 0x01
    3558:	04 80       	ldd	r0, Z+4	; 0x04
    355a:	f5 81       	ldd	r31, Z+5	; 0x05
    355c:	e0 2d       	mov	r30, r0
    355e:	b8 01       	movw	r22, r16
    3560:	ce 01       	movw	r24, r28
    3562:	09 95       	icall
    3564:	00 97       	sbiw	r24, 0x00	; 0
    3566:	31 f4       	brne	.+12     	; 0x3574 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
    3568:	08 84       	ldd	r0, Y+8	; 0x08
    356a:	d9 85       	ldd	r29, Y+9	; 0x09
    356c:	c0 2d       	mov	r28, r0
    356e:	f0 cf       	rjmp	.-32     	; 0x3550 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
    3570:	80 e0       	ldi	r24, 0x00	; 0
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	df 91       	pop	r29
    3576:	cf 91       	pop	r28
    3578:	1f 91       	pop	r17
    357a:	0f 91       	pop	r16
    357c:	08 95       	ret

0000357e <_ZN13PluggableUSB_12getShortNameEPc>:
    357e:	0f 93       	push	r16
    3580:	1f 93       	push	r17
    3582:	cf 93       	push	r28
    3584:	df 93       	push	r29
    3586:	8b 01       	movw	r16, r22
    3588:	fc 01       	movw	r30, r24
    358a:	c2 81       	ldd	r28, Z+2	; 0x02
    358c:	d3 81       	ldd	r29, Z+3	; 0x03
    358e:	20 97       	sbiw	r28, 0x00	; 0
    3590:	71 f0       	breq	.+28     	; 0x35ae <_ZN13PluggableUSB_12getShortNameEPc+0x30>
    3592:	e8 81       	ld	r30, Y
    3594:	f9 81       	ldd	r31, Y+1	; 0x01
    3596:	06 80       	ldd	r0, Z+6	; 0x06
    3598:	f7 81       	ldd	r31, Z+7	; 0x07
    359a:	e0 2d       	mov	r30, r0
    359c:	b8 01       	movw	r22, r16
    359e:	ce 01       	movw	r24, r28
    35a0:	09 95       	icall
    35a2:	08 0f       	add	r16, r24
    35a4:	11 1d       	adc	r17, r1
    35a6:	08 84       	ldd	r0, Y+8	; 0x08
    35a8:	d9 85       	ldd	r29, Y+9	; 0x09
    35aa:	c0 2d       	mov	r28, r0
    35ac:	f0 cf       	rjmp	.-32     	; 0x358e <_ZN13PluggableUSB_12getShortNameEPc+0x10>
    35ae:	f8 01       	movw	r30, r16
    35b0:	10 82       	st	Z, r1
    35b2:	df 91       	pop	r29
    35b4:	cf 91       	pop	r28
    35b6:	1f 91       	pop	r17
    35b8:	0f 91       	pop	r16
    35ba:	08 95       	ret

000035bc <_ZN13PluggableUSB_5setupER8USBSetup>:
    35bc:	0f 93       	push	r16
    35be:	1f 93       	push	r17
    35c0:	cf 93       	push	r28
    35c2:	df 93       	push	r29
    35c4:	8b 01       	movw	r16, r22
    35c6:	fc 01       	movw	r30, r24
    35c8:	c2 81       	ldd	r28, Z+2	; 0x02
    35ca:	d3 81       	ldd	r29, Z+3	; 0x03
    35cc:	20 97       	sbiw	r28, 0x00	; 0
    35ce:	71 f0       	breq	.+28     	; 0x35ec <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
    35d0:	e8 81       	ld	r30, Y
    35d2:	f9 81       	ldd	r31, Y+1	; 0x01
    35d4:	01 90       	ld	r0, Z+
    35d6:	f0 81       	ld	r31, Z
    35d8:	e0 2d       	mov	r30, r0
    35da:	b8 01       	movw	r22, r16
    35dc:	ce 01       	movw	r24, r28
    35de:	09 95       	icall
    35e0:	81 11       	cpse	r24, r1
    35e2:	05 c0       	rjmp	.+10     	; 0x35ee <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
    35e4:	08 84       	ldd	r0, Y+8	; 0x08
    35e6:	d9 85       	ldd	r29, Y+9	; 0x09
    35e8:	c0 2d       	mov	r28, r0
    35ea:	f0 cf       	rjmp	.-32     	; 0x35cc <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
    35ec:	80 e0       	ldi	r24, 0x00	; 0
    35ee:	df 91       	pop	r29
    35f0:	cf 91       	pop	r28
    35f2:	1f 91       	pop	r17
    35f4:	0f 91       	pop	r16
    35f6:	08 95       	ret

000035f8 <_Z12PluggableUSBv>:
    35f8:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <_ZGVZ12PluggableUSBvE3obj>
    35fc:	81 11       	cpse	r24, r1
    35fe:	0d c0       	rjmp	.+26     	; 0x361a <_Z12PluggableUSBv+0x22>
    3600:	82 e0       	ldi	r24, 0x02	; 2
    3602:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <_ZZ12PluggableUSBvE3obj>
    3606:	84 e0       	ldi	r24, 0x04	; 4
    3608:	80 93 48 04 	sts	0x0448, r24	; 0x800448 <_ZZ12PluggableUSBvE3obj+0x1>
    360c:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <_ZZ12PluggableUSBvE3obj+0x3>
    3610:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <_ZZ12PluggableUSBvE3obj+0x2>
    3614:	81 e0       	ldi	r24, 0x01	; 1
    3616:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <_ZGVZ12PluggableUSBvE3obj>
    361a:	87 e4       	ldi	r24, 0x47	; 71
    361c:	94 e0       	ldi	r25, 0x04	; 4
    361e:	08 95       	ret

00003620 <__subsf3>:
    3620:	50 58       	subi	r21, 0x80	; 128

00003622 <__addsf3>:
    3622:	bb 27       	eor	r27, r27
    3624:	aa 27       	eor	r26, r26
    3626:	0e 94 28 1b 	call	0x3650	; 0x3650 <__addsf3x>
    362a:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__fp_round>
    362e:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__fp_pscA>
    3632:	38 f0       	brcs	.+14     	; 0x3642 <__addsf3+0x20>
    3634:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__fp_pscB>
    3638:	20 f0       	brcs	.+8      	; 0x3642 <__addsf3+0x20>
    363a:	39 f4       	brne	.+14     	; 0x364a <__addsf3+0x28>
    363c:	9f 3f       	cpi	r25, 0xFF	; 255
    363e:	19 f4       	brne	.+6      	; 0x3646 <__addsf3+0x24>
    3640:	26 f4       	brtc	.+8      	; 0x364a <__addsf3+0x28>
    3642:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__fp_nan>
    3646:	0e f4       	brtc	.+2      	; 0x364a <__addsf3+0x28>
    3648:	e0 95       	com	r30
    364a:	e7 fb       	bst	r30, 7
    364c:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__fp_inf>

00003650 <__addsf3x>:
    3650:	e9 2f       	mov	r30, r25
    3652:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__fp_split3>
    3656:	58 f3       	brcs	.-42     	; 0x362e <__addsf3+0xc>
    3658:	ba 17       	cp	r27, r26
    365a:	62 07       	cpc	r22, r18
    365c:	73 07       	cpc	r23, r19
    365e:	84 07       	cpc	r24, r20
    3660:	95 07       	cpc	r25, r21
    3662:	20 f0       	brcs	.+8      	; 0x366c <__addsf3x+0x1c>
    3664:	79 f4       	brne	.+30     	; 0x3684 <__addsf3x+0x34>
    3666:	a6 f5       	brtc	.+104    	; 0x36d0 <__addsf3x+0x80>
    3668:	0c 94 00 10 	jmp	0x2000	; 0x2000 <__fp_zero>
    366c:	0e f4       	brtc	.+2      	; 0x3670 <__addsf3x+0x20>
    366e:	e0 95       	com	r30
    3670:	0b 2e       	mov	r0, r27
    3672:	ba 2f       	mov	r27, r26
    3674:	a0 2d       	mov	r26, r0
    3676:	0b 01       	movw	r0, r22
    3678:	b9 01       	movw	r22, r18
    367a:	90 01       	movw	r18, r0
    367c:	0c 01       	movw	r0, r24
    367e:	ca 01       	movw	r24, r20
    3680:	a0 01       	movw	r20, r0
    3682:	11 24       	eor	r1, r1
    3684:	ff 27       	eor	r31, r31
    3686:	59 1b       	sub	r21, r25
    3688:	99 f0       	breq	.+38     	; 0x36b0 <__addsf3x+0x60>
    368a:	59 3f       	cpi	r21, 0xF9	; 249
    368c:	50 f4       	brcc	.+20     	; 0x36a2 <__addsf3x+0x52>
    368e:	50 3e       	cpi	r21, 0xE0	; 224
    3690:	68 f1       	brcs	.+90     	; 0x36ec <__addsf3x+0x9c>
    3692:	1a 16       	cp	r1, r26
    3694:	f0 40       	sbci	r31, 0x00	; 0
    3696:	a2 2f       	mov	r26, r18
    3698:	23 2f       	mov	r18, r19
    369a:	34 2f       	mov	r19, r20
    369c:	44 27       	eor	r20, r20
    369e:	58 5f       	subi	r21, 0xF8	; 248
    36a0:	f3 cf       	rjmp	.-26     	; 0x3688 <__addsf3x+0x38>
    36a2:	46 95       	lsr	r20
    36a4:	37 95       	ror	r19
    36a6:	27 95       	ror	r18
    36a8:	a7 95       	ror	r26
    36aa:	f0 40       	sbci	r31, 0x00	; 0
    36ac:	53 95       	inc	r21
    36ae:	c9 f7       	brne	.-14     	; 0x36a2 <__addsf3x+0x52>
    36b0:	7e f4       	brtc	.+30     	; 0x36d0 <__addsf3x+0x80>
    36b2:	1f 16       	cp	r1, r31
    36b4:	ba 0b       	sbc	r27, r26
    36b6:	62 0b       	sbc	r22, r18
    36b8:	73 0b       	sbc	r23, r19
    36ba:	84 0b       	sbc	r24, r20
    36bc:	ba f0       	brmi	.+46     	; 0x36ec <__addsf3x+0x9c>
    36be:	91 50       	subi	r25, 0x01	; 1
    36c0:	a1 f0       	breq	.+40     	; 0x36ea <__addsf3x+0x9a>
    36c2:	ff 0f       	add	r31, r31
    36c4:	bb 1f       	adc	r27, r27
    36c6:	66 1f       	adc	r22, r22
    36c8:	77 1f       	adc	r23, r23
    36ca:	88 1f       	adc	r24, r24
    36cc:	c2 f7       	brpl	.-16     	; 0x36be <__addsf3x+0x6e>
    36ce:	0e c0       	rjmp	.+28     	; 0x36ec <__addsf3x+0x9c>
    36d0:	ba 0f       	add	r27, r26
    36d2:	62 1f       	adc	r22, r18
    36d4:	73 1f       	adc	r23, r19
    36d6:	84 1f       	adc	r24, r20
    36d8:	48 f4       	brcc	.+18     	; 0x36ec <__addsf3x+0x9c>
    36da:	87 95       	ror	r24
    36dc:	77 95       	ror	r23
    36de:	67 95       	ror	r22
    36e0:	b7 95       	ror	r27
    36e2:	f7 95       	ror	r31
    36e4:	9e 3f       	cpi	r25, 0xFE	; 254
    36e6:	08 f0       	brcs	.+2      	; 0x36ea <__addsf3x+0x9a>
    36e8:	b0 cf       	rjmp	.-160    	; 0x364a <__addsf3+0x28>
    36ea:	93 95       	inc	r25
    36ec:	88 0f       	add	r24, r24
    36ee:	08 f0       	brcs	.+2      	; 0x36f2 <__addsf3x+0xa2>
    36f0:	99 27       	eor	r25, r25
    36f2:	ee 0f       	add	r30, r30
    36f4:	97 95       	ror	r25
    36f6:	87 95       	ror	r24
    36f8:	08 95       	ret

000036fa <__cmpsf2>:
    36fa:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__fp_cmp>
    36fe:	08 f4       	brcc	.+2      	; 0x3702 <__cmpsf2+0x8>
    3700:	81 e0       	ldi	r24, 0x01	; 1
    3702:	08 95       	ret

00003704 <__fixunssfsi>:
    3704:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__fp_splitA>
    3708:	88 f0       	brcs	.+34     	; 0x372c <__fixunssfsi+0x28>
    370a:	9f 57       	subi	r25, 0x7F	; 127
    370c:	98 f0       	brcs	.+38     	; 0x3734 <__fixunssfsi+0x30>
    370e:	b9 2f       	mov	r27, r25
    3710:	99 27       	eor	r25, r25
    3712:	b7 51       	subi	r27, 0x17	; 23
    3714:	b0 f0       	brcs	.+44     	; 0x3742 <__fixunssfsi+0x3e>
    3716:	e1 f0       	breq	.+56     	; 0x3750 <__fixunssfsi+0x4c>
    3718:	66 0f       	add	r22, r22
    371a:	77 1f       	adc	r23, r23
    371c:	88 1f       	adc	r24, r24
    371e:	99 1f       	adc	r25, r25
    3720:	1a f0       	brmi	.+6      	; 0x3728 <__fixunssfsi+0x24>
    3722:	ba 95       	dec	r27
    3724:	c9 f7       	brne	.-14     	; 0x3718 <__fixunssfsi+0x14>
    3726:	14 c0       	rjmp	.+40     	; 0x3750 <__fixunssfsi+0x4c>
    3728:	b1 30       	cpi	r27, 0x01	; 1
    372a:	91 f0       	breq	.+36     	; 0x3750 <__fixunssfsi+0x4c>
    372c:	0e 94 00 10 	call	0x2000	; 0x2000 <__fp_zero>
    3730:	b1 e0       	ldi	r27, 0x01	; 1
    3732:	08 95       	ret
    3734:	0c 94 00 10 	jmp	0x2000	; 0x2000 <__fp_zero>
    3738:	67 2f       	mov	r22, r23
    373a:	78 2f       	mov	r23, r24
    373c:	88 27       	eor	r24, r24
    373e:	b8 5f       	subi	r27, 0xF8	; 248
    3740:	39 f0       	breq	.+14     	; 0x3750 <__fixunssfsi+0x4c>
    3742:	b9 3f       	cpi	r27, 0xF9	; 249
    3744:	cc f3       	brlt	.-14     	; 0x3738 <__fixunssfsi+0x34>
    3746:	86 95       	lsr	r24
    3748:	77 95       	ror	r23
    374a:	67 95       	ror	r22
    374c:	b3 95       	inc	r27
    374e:	d9 f7       	brne	.-10     	; 0x3746 <__fixunssfsi+0x42>
    3750:	3e f4       	brtc	.+14     	; 0x3760 <__fixunssfsi+0x5c>
    3752:	90 95       	com	r25
    3754:	80 95       	com	r24
    3756:	70 95       	com	r23
    3758:	61 95       	neg	r22
    375a:	7f 4f       	sbci	r23, 0xFF	; 255
    375c:	8f 4f       	sbci	r24, 0xFF	; 255
    375e:	9f 4f       	sbci	r25, 0xFF	; 255
    3760:	08 95       	ret

00003762 <__unordsf2>:
    3762:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__fp_cmp>
    3766:	88 0b       	sbc	r24, r24
    3768:	99 0b       	sbc	r25, r25
    376a:	08 95       	ret

0000376c <__divmodhi4>:
    376c:	97 fb       	bst	r25, 7
    376e:	07 2e       	mov	r0, r23
    3770:	16 f4       	brtc	.+4      	; 0x3776 <__divmodhi4+0xa>
    3772:	00 94       	com	r0
    3774:	07 d0       	rcall	.+14     	; 0x3784 <__divmodhi4_neg1>
    3776:	77 fd       	sbrc	r23, 7
    3778:	09 d0       	rcall	.+18     	; 0x378c <__divmodhi4_neg2>
    377a:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <__udivmodhi4>
    377e:	07 fc       	sbrc	r0, 7
    3780:	05 d0       	rcall	.+10     	; 0x378c <__divmodhi4_neg2>
    3782:	3e f4       	brtc	.+14     	; 0x3792 <__divmodhi4_exit>

00003784 <__divmodhi4_neg1>:
    3784:	90 95       	com	r25
    3786:	81 95       	neg	r24
    3788:	9f 4f       	sbci	r25, 0xFF	; 255
    378a:	08 95       	ret

0000378c <__divmodhi4_neg2>:
    378c:	70 95       	com	r23
    378e:	61 95       	neg	r22
    3790:	7f 4f       	sbci	r23, 0xFF	; 255

00003792 <__divmodhi4_exit>:
    3792:	08 95       	ret

00003794 <__udivmodsi4>:
    3794:	a1 e2       	ldi	r26, 0x21	; 33
    3796:	1a 2e       	mov	r1, r26
    3798:	aa 1b       	sub	r26, r26
    379a:	bb 1b       	sub	r27, r27
    379c:	fd 01       	movw	r30, r26
    379e:	0d c0       	rjmp	.+26     	; 0x37ba <__udivmodsi4_ep>

000037a0 <__udivmodsi4_loop>:
    37a0:	aa 1f       	adc	r26, r26
    37a2:	bb 1f       	adc	r27, r27
    37a4:	ee 1f       	adc	r30, r30
    37a6:	ff 1f       	adc	r31, r31
    37a8:	a2 17       	cp	r26, r18
    37aa:	b3 07       	cpc	r27, r19
    37ac:	e4 07       	cpc	r30, r20
    37ae:	f5 07       	cpc	r31, r21
    37b0:	20 f0       	brcs	.+8      	; 0x37ba <__udivmodsi4_ep>
    37b2:	a2 1b       	sub	r26, r18
    37b4:	b3 0b       	sbc	r27, r19
    37b6:	e4 0b       	sbc	r30, r20
    37b8:	f5 0b       	sbc	r31, r21

000037ba <__udivmodsi4_ep>:
    37ba:	66 1f       	adc	r22, r22
    37bc:	77 1f       	adc	r23, r23
    37be:	88 1f       	adc	r24, r24
    37c0:	99 1f       	adc	r25, r25
    37c2:	1a 94       	dec	r1
    37c4:	69 f7       	brne	.-38     	; 0x37a0 <__udivmodsi4_loop>
    37c6:	60 95       	com	r22
    37c8:	70 95       	com	r23
    37ca:	80 95       	com	r24
    37cc:	90 95       	com	r25
    37ce:	9b 01       	movw	r18, r22
    37d0:	ac 01       	movw	r20, r24
    37d2:	bd 01       	movw	r22, r26
    37d4:	cf 01       	movw	r24, r30
    37d6:	08 95       	ret

000037d8 <__tablejump2__>:
    37d8:	ee 0f       	add	r30, r30
    37da:	ff 1f       	adc	r31, r31
    37dc:	05 90       	lpm	r0, Z+
    37de:	f4 91       	lpm	r31, Z
    37e0:	e0 2d       	mov	r30, r0
    37e2:	09 94       	ijmp

000037e4 <__udivmodhi4>:
    37e4:	aa 1b       	sub	r26, r26
    37e6:	bb 1b       	sub	r27, r27
    37e8:	51 e1       	ldi	r21, 0x11	; 17
    37ea:	07 c0       	rjmp	.+14     	; 0x37fa <__udivmodhi4_ep>

000037ec <__udivmodhi4_loop>:
    37ec:	aa 1f       	adc	r26, r26
    37ee:	bb 1f       	adc	r27, r27
    37f0:	a6 17       	cp	r26, r22
    37f2:	b7 07       	cpc	r27, r23
    37f4:	10 f0       	brcs	.+4      	; 0x37fa <__udivmodhi4_ep>
    37f6:	a6 1b       	sub	r26, r22
    37f8:	b7 0b       	sbc	r27, r23

000037fa <__udivmodhi4_ep>:
    37fa:	88 1f       	adc	r24, r24
    37fc:	99 1f       	adc	r25, r25
    37fe:	5a 95       	dec	r21
    3800:	a9 f7       	brne	.-22     	; 0x37ec <__udivmodhi4_loop>
    3802:	80 95       	com	r24
    3804:	90 95       	com	r25
    3806:	bc 01       	movw	r22, r24
    3808:	cd 01       	movw	r24, r26
    380a:	08 95       	ret

0000380c <malloc>:
    380c:	0f 93       	push	r16
    380e:	1f 93       	push	r17
    3810:	cf 93       	push	r28
    3812:	df 93       	push	r29
    3814:	82 30       	cpi	r24, 0x02	; 2
    3816:	91 05       	cpc	r25, r1
    3818:	10 f4       	brcc	.+4      	; 0x381e <malloc+0x12>
    381a:	82 e0       	ldi	r24, 0x02	; 2
    381c:	90 e0       	ldi	r25, 0x00	; 0
    381e:	e0 91 55 04 	lds	r30, 0x0455	; 0x800455 <__flp>
    3822:	f0 91 56 04 	lds	r31, 0x0456	; 0x800456 <__flp+0x1>
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	30 e0       	ldi	r19, 0x00	; 0
    382a:	a0 e0       	ldi	r26, 0x00	; 0
    382c:	b0 e0       	ldi	r27, 0x00	; 0
    382e:	30 97       	sbiw	r30, 0x00	; 0
    3830:	19 f1       	breq	.+70     	; 0x3878 <malloc+0x6c>
    3832:	40 81       	ld	r20, Z
    3834:	51 81       	ldd	r21, Z+1	; 0x01
    3836:	02 81       	ldd	r16, Z+2	; 0x02
    3838:	13 81       	ldd	r17, Z+3	; 0x03
    383a:	48 17       	cp	r20, r24
    383c:	59 07       	cpc	r21, r25
    383e:	c8 f0       	brcs	.+50     	; 0x3872 <malloc+0x66>
    3840:	84 17       	cp	r24, r20
    3842:	95 07       	cpc	r25, r21
    3844:	69 f4       	brne	.+26     	; 0x3860 <malloc+0x54>
    3846:	10 97       	sbiw	r26, 0x00	; 0
    3848:	31 f0       	breq	.+12     	; 0x3856 <malloc+0x4a>
    384a:	12 96       	adiw	r26, 0x02	; 2
    384c:	0c 93       	st	X, r16
    384e:	12 97       	sbiw	r26, 0x02	; 2
    3850:	13 96       	adiw	r26, 0x03	; 3
    3852:	1c 93       	st	X, r17
    3854:	27 c0       	rjmp	.+78     	; 0x38a4 <malloc+0x98>
    3856:	00 93 55 04 	sts	0x0455, r16	; 0x800455 <__flp>
    385a:	10 93 56 04 	sts	0x0456, r17	; 0x800456 <__flp+0x1>
    385e:	22 c0       	rjmp	.+68     	; 0x38a4 <malloc+0x98>
    3860:	21 15       	cp	r18, r1
    3862:	31 05       	cpc	r19, r1
    3864:	19 f0       	breq	.+6      	; 0x386c <malloc+0x60>
    3866:	42 17       	cp	r20, r18
    3868:	53 07       	cpc	r21, r19
    386a:	18 f4       	brcc	.+6      	; 0x3872 <malloc+0x66>
    386c:	9a 01       	movw	r18, r20
    386e:	bd 01       	movw	r22, r26
    3870:	ef 01       	movw	r28, r30
    3872:	df 01       	movw	r26, r30
    3874:	f8 01       	movw	r30, r16
    3876:	db cf       	rjmp	.-74     	; 0x382e <malloc+0x22>
    3878:	21 15       	cp	r18, r1
    387a:	31 05       	cpc	r19, r1
    387c:	f9 f0       	breq	.+62     	; 0x38bc <malloc+0xb0>
    387e:	28 1b       	sub	r18, r24
    3880:	39 0b       	sbc	r19, r25
    3882:	24 30       	cpi	r18, 0x04	; 4
    3884:	31 05       	cpc	r19, r1
    3886:	80 f4       	brcc	.+32     	; 0x38a8 <malloc+0x9c>
    3888:	8a 81       	ldd	r24, Y+2	; 0x02
    388a:	9b 81       	ldd	r25, Y+3	; 0x03
    388c:	61 15       	cp	r22, r1
    388e:	71 05       	cpc	r23, r1
    3890:	21 f0       	breq	.+8      	; 0x389a <malloc+0x8e>
    3892:	fb 01       	movw	r30, r22
    3894:	93 83       	std	Z+3, r25	; 0x03
    3896:	82 83       	std	Z+2, r24	; 0x02
    3898:	04 c0       	rjmp	.+8      	; 0x38a2 <malloc+0x96>
    389a:	90 93 56 04 	sts	0x0456, r25	; 0x800456 <__flp+0x1>
    389e:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <__flp>
    38a2:	fe 01       	movw	r30, r28
    38a4:	32 96       	adiw	r30, 0x02	; 2
    38a6:	44 c0       	rjmp	.+136    	; 0x3930 <malloc+0x124>
    38a8:	fe 01       	movw	r30, r28
    38aa:	e2 0f       	add	r30, r18
    38ac:	f3 1f       	adc	r31, r19
    38ae:	81 93       	st	Z+, r24
    38b0:	91 93       	st	Z+, r25
    38b2:	22 50       	subi	r18, 0x02	; 2
    38b4:	31 09       	sbc	r19, r1
    38b6:	39 83       	std	Y+1, r19	; 0x01
    38b8:	28 83       	st	Y, r18
    38ba:	3a c0       	rjmp	.+116    	; 0x3930 <malloc+0x124>
    38bc:	20 91 53 04 	lds	r18, 0x0453	; 0x800453 <__brkval>
    38c0:	30 91 54 04 	lds	r19, 0x0454	; 0x800454 <__brkval+0x1>
    38c4:	23 2b       	or	r18, r19
    38c6:	41 f4       	brne	.+16     	; 0x38d8 <malloc+0xcc>
    38c8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    38cc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    38d0:	30 93 54 04 	sts	0x0454, r19	; 0x800454 <__brkval+0x1>
    38d4:	20 93 53 04 	sts	0x0453, r18	; 0x800453 <__brkval>
    38d8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    38dc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    38e0:	21 15       	cp	r18, r1
    38e2:	31 05       	cpc	r19, r1
    38e4:	41 f4       	brne	.+16     	; 0x38f6 <malloc+0xea>
    38e6:	2d b7       	in	r18, 0x3d	; 61
    38e8:	3e b7       	in	r19, 0x3e	; 62
    38ea:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    38ee:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    38f2:	24 1b       	sub	r18, r20
    38f4:	35 0b       	sbc	r19, r21
    38f6:	e0 91 53 04 	lds	r30, 0x0453	; 0x800453 <__brkval>
    38fa:	f0 91 54 04 	lds	r31, 0x0454	; 0x800454 <__brkval+0x1>
    38fe:	e2 17       	cp	r30, r18
    3900:	f3 07       	cpc	r31, r19
    3902:	a0 f4       	brcc	.+40     	; 0x392c <malloc+0x120>
    3904:	2e 1b       	sub	r18, r30
    3906:	3f 0b       	sbc	r19, r31
    3908:	28 17       	cp	r18, r24
    390a:	39 07       	cpc	r19, r25
    390c:	78 f0       	brcs	.+30     	; 0x392c <malloc+0x120>
    390e:	ac 01       	movw	r20, r24
    3910:	4e 5f       	subi	r20, 0xFE	; 254
    3912:	5f 4f       	sbci	r21, 0xFF	; 255
    3914:	24 17       	cp	r18, r20
    3916:	35 07       	cpc	r19, r21
    3918:	48 f0       	brcs	.+18     	; 0x392c <malloc+0x120>
    391a:	4e 0f       	add	r20, r30
    391c:	5f 1f       	adc	r21, r31
    391e:	50 93 54 04 	sts	0x0454, r21	; 0x800454 <__brkval+0x1>
    3922:	40 93 53 04 	sts	0x0453, r20	; 0x800453 <__brkval>
    3926:	81 93       	st	Z+, r24
    3928:	91 93       	st	Z+, r25
    392a:	02 c0       	rjmp	.+4      	; 0x3930 <malloc+0x124>
    392c:	e0 e0       	ldi	r30, 0x00	; 0
    392e:	f0 e0       	ldi	r31, 0x00	; 0
    3930:	cf 01       	movw	r24, r30
    3932:	df 91       	pop	r29
    3934:	cf 91       	pop	r28
    3936:	1f 91       	pop	r17
    3938:	0f 91       	pop	r16
    393a:	08 95       	ret

0000393c <free>:
    393c:	cf 93       	push	r28
    393e:	df 93       	push	r29
    3940:	00 97       	sbiw	r24, 0x00	; 0
    3942:	09 f4       	brne	.+2      	; 0x3946 <free+0xa>
    3944:	81 c0       	rjmp	.+258    	; 0x3a48 <free+0x10c>
    3946:	fc 01       	movw	r30, r24
    3948:	32 97       	sbiw	r30, 0x02	; 2
    394a:	13 82       	std	Z+3, r1	; 0x03
    394c:	12 82       	std	Z+2, r1	; 0x02
    394e:	a0 91 55 04 	lds	r26, 0x0455	; 0x800455 <__flp>
    3952:	b0 91 56 04 	lds	r27, 0x0456	; 0x800456 <__flp+0x1>
    3956:	10 97       	sbiw	r26, 0x00	; 0
    3958:	81 f4       	brne	.+32     	; 0x397a <free+0x3e>
    395a:	20 81       	ld	r18, Z
    395c:	31 81       	ldd	r19, Z+1	; 0x01
    395e:	82 0f       	add	r24, r18
    3960:	93 1f       	adc	r25, r19
    3962:	20 91 53 04 	lds	r18, 0x0453	; 0x800453 <__brkval>
    3966:	30 91 54 04 	lds	r19, 0x0454	; 0x800454 <__brkval+0x1>
    396a:	28 17       	cp	r18, r24
    396c:	39 07       	cpc	r19, r25
    396e:	51 f5       	brne	.+84     	; 0x39c4 <free+0x88>
    3970:	f0 93 54 04 	sts	0x0454, r31	; 0x800454 <__brkval+0x1>
    3974:	e0 93 53 04 	sts	0x0453, r30	; 0x800453 <__brkval>
    3978:	67 c0       	rjmp	.+206    	; 0x3a48 <free+0x10c>
    397a:	ed 01       	movw	r28, r26
    397c:	20 e0       	ldi	r18, 0x00	; 0
    397e:	30 e0       	ldi	r19, 0x00	; 0
    3980:	ce 17       	cp	r28, r30
    3982:	df 07       	cpc	r29, r31
    3984:	40 f4       	brcc	.+16     	; 0x3996 <free+0x5a>
    3986:	4a 81       	ldd	r20, Y+2	; 0x02
    3988:	5b 81       	ldd	r21, Y+3	; 0x03
    398a:	9e 01       	movw	r18, r28
    398c:	41 15       	cp	r20, r1
    398e:	51 05       	cpc	r21, r1
    3990:	f1 f0       	breq	.+60     	; 0x39ce <free+0x92>
    3992:	ea 01       	movw	r28, r20
    3994:	f5 cf       	rjmp	.-22     	; 0x3980 <free+0x44>
    3996:	d3 83       	std	Z+3, r29	; 0x03
    3998:	c2 83       	std	Z+2, r28	; 0x02
    399a:	40 81       	ld	r20, Z
    399c:	51 81       	ldd	r21, Z+1	; 0x01
    399e:	84 0f       	add	r24, r20
    39a0:	95 1f       	adc	r25, r21
    39a2:	c8 17       	cp	r28, r24
    39a4:	d9 07       	cpc	r29, r25
    39a6:	59 f4       	brne	.+22     	; 0x39be <free+0x82>
    39a8:	88 81       	ld	r24, Y
    39aa:	99 81       	ldd	r25, Y+1	; 0x01
    39ac:	84 0f       	add	r24, r20
    39ae:	95 1f       	adc	r25, r21
    39b0:	02 96       	adiw	r24, 0x02	; 2
    39b2:	91 83       	std	Z+1, r25	; 0x01
    39b4:	80 83       	st	Z, r24
    39b6:	8a 81       	ldd	r24, Y+2	; 0x02
    39b8:	9b 81       	ldd	r25, Y+3	; 0x03
    39ba:	93 83       	std	Z+3, r25	; 0x03
    39bc:	82 83       	std	Z+2, r24	; 0x02
    39be:	21 15       	cp	r18, r1
    39c0:	31 05       	cpc	r19, r1
    39c2:	29 f4       	brne	.+10     	; 0x39ce <free+0x92>
    39c4:	f0 93 56 04 	sts	0x0456, r31	; 0x800456 <__flp+0x1>
    39c8:	e0 93 55 04 	sts	0x0455, r30	; 0x800455 <__flp>
    39cc:	3d c0       	rjmp	.+122    	; 0x3a48 <free+0x10c>
    39ce:	e9 01       	movw	r28, r18
    39d0:	fb 83       	std	Y+3, r31	; 0x03
    39d2:	ea 83       	std	Y+2, r30	; 0x02
    39d4:	49 91       	ld	r20, Y+
    39d6:	59 91       	ld	r21, Y+
    39d8:	c4 0f       	add	r28, r20
    39da:	d5 1f       	adc	r29, r21
    39dc:	ec 17       	cp	r30, r28
    39de:	fd 07       	cpc	r31, r29
    39e0:	61 f4       	brne	.+24     	; 0x39fa <free+0xbe>
    39e2:	80 81       	ld	r24, Z
    39e4:	91 81       	ldd	r25, Z+1	; 0x01
    39e6:	84 0f       	add	r24, r20
    39e8:	95 1f       	adc	r25, r21
    39ea:	02 96       	adiw	r24, 0x02	; 2
    39ec:	e9 01       	movw	r28, r18
    39ee:	99 83       	std	Y+1, r25	; 0x01
    39f0:	88 83       	st	Y, r24
    39f2:	82 81       	ldd	r24, Z+2	; 0x02
    39f4:	93 81       	ldd	r25, Z+3	; 0x03
    39f6:	9b 83       	std	Y+3, r25	; 0x03
    39f8:	8a 83       	std	Y+2, r24	; 0x02
    39fa:	e0 e0       	ldi	r30, 0x00	; 0
    39fc:	f0 e0       	ldi	r31, 0x00	; 0
    39fe:	12 96       	adiw	r26, 0x02	; 2
    3a00:	8d 91       	ld	r24, X+
    3a02:	9c 91       	ld	r25, X
    3a04:	13 97       	sbiw	r26, 0x03	; 3
    3a06:	00 97       	sbiw	r24, 0x00	; 0
    3a08:	19 f0       	breq	.+6      	; 0x3a10 <free+0xd4>
    3a0a:	fd 01       	movw	r30, r26
    3a0c:	dc 01       	movw	r26, r24
    3a0e:	f7 cf       	rjmp	.-18     	; 0x39fe <free+0xc2>
    3a10:	8d 91       	ld	r24, X+
    3a12:	9c 91       	ld	r25, X
    3a14:	11 97       	sbiw	r26, 0x01	; 1
    3a16:	9d 01       	movw	r18, r26
    3a18:	2e 5f       	subi	r18, 0xFE	; 254
    3a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a1c:	82 0f       	add	r24, r18
    3a1e:	93 1f       	adc	r25, r19
    3a20:	20 91 53 04 	lds	r18, 0x0453	; 0x800453 <__brkval>
    3a24:	30 91 54 04 	lds	r19, 0x0454	; 0x800454 <__brkval+0x1>
    3a28:	28 17       	cp	r18, r24
    3a2a:	39 07       	cpc	r19, r25
    3a2c:	69 f4       	brne	.+26     	; 0x3a48 <free+0x10c>
    3a2e:	30 97       	sbiw	r30, 0x00	; 0
    3a30:	29 f4       	brne	.+10     	; 0x3a3c <free+0x100>
    3a32:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <__flp+0x1>
    3a36:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <__flp>
    3a3a:	02 c0       	rjmp	.+4      	; 0x3a40 <free+0x104>
    3a3c:	13 82       	std	Z+3, r1	; 0x03
    3a3e:	12 82       	std	Z+2, r1	; 0x02
    3a40:	b0 93 54 04 	sts	0x0454, r27	; 0x800454 <__brkval+0x1>
    3a44:	a0 93 53 04 	sts	0x0453, r26	; 0x800453 <__brkval>
    3a48:	df 91       	pop	r29
    3a4a:	cf 91       	pop	r28
    3a4c:	08 95       	ret

00003a4e <realloc>:
    3a4e:	a0 e0       	ldi	r26, 0x00	; 0
    3a50:	b0 e0       	ldi	r27, 0x00	; 0
    3a52:	ed e2       	ldi	r30, 0x2D	; 45
    3a54:	fd e1       	ldi	r31, 0x1D	; 29
    3a56:	0c 94 0d 1e 	jmp	0x3c1a	; 0x3c1a <__prologue_saves__+0x8>
    3a5a:	ec 01       	movw	r28, r24
    3a5c:	00 97       	sbiw	r24, 0x00	; 0
    3a5e:	21 f4       	brne	.+8      	; 0x3a68 <realloc+0x1a>
    3a60:	cb 01       	movw	r24, r22
    3a62:	0e 94 06 1c 	call	0x380c	; 0x380c <malloc>
    3a66:	b4 c0       	rjmp	.+360    	; 0x3bd0 <realloc+0x182>
    3a68:	fc 01       	movw	r30, r24
    3a6a:	e6 0f       	add	r30, r22
    3a6c:	f7 1f       	adc	r31, r23
    3a6e:	9c 01       	movw	r18, r24
    3a70:	22 50       	subi	r18, 0x02	; 2
    3a72:	31 09       	sbc	r19, r1
    3a74:	e2 17       	cp	r30, r18
    3a76:	f3 07       	cpc	r31, r19
    3a78:	08 f4       	brcc	.+2      	; 0x3a7c <realloc+0x2e>
    3a7a:	a8 c0       	rjmp	.+336    	; 0x3bcc <realloc+0x17e>
    3a7c:	d9 01       	movw	r26, r18
    3a7e:	0d 91       	ld	r16, X+
    3a80:	1c 91       	ld	r17, X
    3a82:	11 97       	sbiw	r26, 0x01	; 1
    3a84:	06 17       	cp	r16, r22
    3a86:	17 07       	cpc	r17, r23
    3a88:	b0 f0       	brcs	.+44     	; 0x3ab6 <realloc+0x68>
    3a8a:	05 30       	cpi	r16, 0x05	; 5
    3a8c:	11 05       	cpc	r17, r1
    3a8e:	08 f4       	brcc	.+2      	; 0x3a92 <realloc+0x44>
    3a90:	9b c0       	rjmp	.+310    	; 0x3bc8 <realloc+0x17a>
    3a92:	c8 01       	movw	r24, r16
    3a94:	04 97       	sbiw	r24, 0x04	; 4
    3a96:	86 17       	cp	r24, r22
    3a98:	97 07       	cpc	r25, r23
    3a9a:	08 f4       	brcc	.+2      	; 0x3a9e <realloc+0x50>
    3a9c:	95 c0       	rjmp	.+298    	; 0x3bc8 <realloc+0x17a>
    3a9e:	02 50       	subi	r16, 0x02	; 2
    3aa0:	11 09       	sbc	r17, r1
    3aa2:	06 1b       	sub	r16, r22
    3aa4:	17 0b       	sbc	r17, r23
    3aa6:	01 93       	st	Z+, r16
    3aa8:	11 93       	st	Z+, r17
    3aaa:	6d 93       	st	X+, r22
    3aac:	7c 93       	st	X, r23
    3aae:	cf 01       	movw	r24, r30
    3ab0:	0e 94 9e 1c 	call	0x393c	; 0x393c <free>
    3ab4:	89 c0       	rjmp	.+274    	; 0x3bc8 <realloc+0x17a>
    3ab6:	5b 01       	movw	r10, r22
    3ab8:	a0 1a       	sub	r10, r16
    3aba:	b1 0a       	sbc	r11, r17
    3abc:	4c 01       	movw	r8, r24
    3abe:	80 0e       	add	r8, r16
    3ac0:	91 1e       	adc	r9, r17
    3ac2:	a0 91 55 04 	lds	r26, 0x0455	; 0x800455 <__flp>
    3ac6:	b0 91 56 04 	lds	r27, 0x0456	; 0x800456 <__flp+0x1>
    3aca:	61 2c       	mov	r6, r1
    3acc:	71 2c       	mov	r7, r1
    3ace:	e1 2c       	mov	r14, r1
    3ad0:	f1 2c       	mov	r15, r1
    3ad2:	10 97       	sbiw	r26, 0x00	; 0
    3ad4:	09 f4       	brne	.+2      	; 0x3ad8 <realloc+0x8a>
    3ad6:	46 c0       	rjmp	.+140    	; 0x3b64 <realloc+0x116>
    3ad8:	8d 91       	ld	r24, X+
    3ada:	9c 91       	ld	r25, X
    3adc:	11 97       	sbiw	r26, 0x01	; 1
    3ade:	a8 15       	cp	r26, r8
    3ae0:	b9 05       	cpc	r27, r9
    3ae2:	b1 f5       	brne	.+108    	; 0x3b50 <realloc+0x102>
    3ae4:	6c 01       	movw	r12, r24
    3ae6:	42 e0       	ldi	r20, 0x02	; 2
    3ae8:	c4 0e       	add	r12, r20
    3aea:	d1 1c       	adc	r13, r1
    3aec:	ca 14       	cp	r12, r10
    3aee:	db 04       	cpc	r13, r11
    3af0:	78 f1       	brcs	.+94     	; 0x3b50 <realloc+0x102>
    3af2:	4c 01       	movw	r8, r24
    3af4:	8a 18       	sub	r8, r10
    3af6:	9b 08       	sbc	r9, r11
    3af8:	64 01       	movw	r12, r8
    3afa:	42 e0       	ldi	r20, 0x02	; 2
    3afc:	c4 0e       	add	r12, r20
    3afe:	d1 1c       	adc	r13, r1
    3b00:	12 96       	adiw	r26, 0x02	; 2
    3b02:	bc 90       	ld	r11, X
    3b04:	12 97       	sbiw	r26, 0x02	; 2
    3b06:	13 96       	adiw	r26, 0x03	; 3
    3b08:	ac 91       	ld	r26, X
    3b0a:	b5 e0       	ldi	r27, 0x05	; 5
    3b0c:	cb 16       	cp	r12, r27
    3b0e:	d1 04       	cpc	r13, r1
    3b10:	40 f0       	brcs	.+16     	; 0x3b22 <realloc+0xd4>
    3b12:	b2 82       	std	Z+2, r11	; 0x02
    3b14:	a3 83       	std	Z+3, r26	; 0x03
    3b16:	91 82       	std	Z+1, r9	; 0x01
    3b18:	80 82       	st	Z, r8
    3b1a:	d9 01       	movw	r26, r18
    3b1c:	6d 93       	st	X+, r22
    3b1e:	7c 93       	st	X, r23
    3b20:	09 c0       	rjmp	.+18     	; 0x3b34 <realloc+0xe6>
    3b22:	0e 5f       	subi	r16, 0xFE	; 254
    3b24:	1f 4f       	sbci	r17, 0xFF	; 255
    3b26:	80 0f       	add	r24, r16
    3b28:	91 1f       	adc	r25, r17
    3b2a:	f9 01       	movw	r30, r18
    3b2c:	91 83       	std	Z+1, r25	; 0x01
    3b2e:	80 83       	st	Z, r24
    3b30:	eb 2d       	mov	r30, r11
    3b32:	fa 2f       	mov	r31, r26
    3b34:	e1 14       	cp	r14, r1
    3b36:	f1 04       	cpc	r15, r1
    3b38:	31 f0       	breq	.+12     	; 0x3b46 <realloc+0xf8>
    3b3a:	d7 01       	movw	r26, r14
    3b3c:	13 96       	adiw	r26, 0x03	; 3
    3b3e:	fc 93       	st	X, r31
    3b40:	ee 93       	st	-X, r30
    3b42:	12 97       	sbiw	r26, 0x02	; 2
    3b44:	41 c0       	rjmp	.+130    	; 0x3bc8 <realloc+0x17a>
    3b46:	f0 93 56 04 	sts	0x0456, r31	; 0x800456 <__flp+0x1>
    3b4a:	e0 93 55 04 	sts	0x0455, r30	; 0x800455 <__flp>
    3b4e:	3c c0       	rjmp	.+120    	; 0x3bc8 <realloc+0x17a>
    3b50:	68 16       	cp	r6, r24
    3b52:	79 06       	cpc	r7, r25
    3b54:	08 f4       	brcc	.+2      	; 0x3b58 <realloc+0x10a>
    3b56:	3c 01       	movw	r6, r24
    3b58:	7d 01       	movw	r14, r26
    3b5a:	12 96       	adiw	r26, 0x02	; 2
    3b5c:	0d 90       	ld	r0, X+
    3b5e:	bc 91       	ld	r27, X
    3b60:	a0 2d       	mov	r26, r0
    3b62:	b7 cf       	rjmp	.-146    	; 0x3ad2 <realloc+0x84>
    3b64:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <__brkval>
    3b68:	90 91 54 04 	lds	r25, 0x0454	; 0x800454 <__brkval+0x1>
    3b6c:	88 16       	cp	r8, r24
    3b6e:	99 06       	cpc	r9, r25
    3b70:	e1 f4       	brne	.+56     	; 0x3baa <realloc+0x15c>
    3b72:	66 16       	cp	r6, r22
    3b74:	77 06       	cpc	r7, r23
    3b76:	c8 f4       	brcc	.+50     	; 0x3baa <realloc+0x15c>
    3b78:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3b7c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    3b80:	00 97       	sbiw	r24, 0x00	; 0
    3b82:	41 f4       	brne	.+16     	; 0x3b94 <realloc+0x146>
    3b84:	8d b7       	in	r24, 0x3d	; 61
    3b86:	9e b7       	in	r25, 0x3e	; 62
    3b88:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3b8c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3b90:	84 1b       	sub	r24, r20
    3b92:	95 0b       	sbc	r25, r21
    3b94:	e8 17       	cp	r30, r24
    3b96:	f9 07       	cpc	r31, r25
    3b98:	c8 f4       	brcc	.+50     	; 0x3bcc <realloc+0x17e>
    3b9a:	f0 93 54 04 	sts	0x0454, r31	; 0x800454 <__brkval+0x1>
    3b9e:	e0 93 53 04 	sts	0x0453, r30	; 0x800453 <__brkval>
    3ba2:	f9 01       	movw	r30, r18
    3ba4:	71 83       	std	Z+1, r23	; 0x01
    3ba6:	60 83       	st	Z, r22
    3ba8:	0f c0       	rjmp	.+30     	; 0x3bc8 <realloc+0x17a>
    3baa:	cb 01       	movw	r24, r22
    3bac:	0e 94 06 1c 	call	0x380c	; 0x380c <malloc>
    3bb0:	7c 01       	movw	r14, r24
    3bb2:	00 97       	sbiw	r24, 0x00	; 0
    3bb4:	59 f0       	breq	.+22     	; 0x3bcc <realloc+0x17e>
    3bb6:	a8 01       	movw	r20, r16
    3bb8:	be 01       	movw	r22, r28
    3bba:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <memcpy>
    3bbe:	ce 01       	movw	r24, r28
    3bc0:	0e 94 9e 1c 	call	0x393c	; 0x393c <free>
    3bc4:	c7 01       	movw	r24, r14
    3bc6:	04 c0       	rjmp	.+8      	; 0x3bd0 <realloc+0x182>
    3bc8:	ce 01       	movw	r24, r28
    3bca:	02 c0       	rjmp	.+4      	; 0x3bd0 <realloc+0x182>
    3bcc:	80 e0       	ldi	r24, 0x00	; 0
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	cd b7       	in	r28, 0x3d	; 61
    3bd2:	de b7       	in	r29, 0x3e	; 62
    3bd4:	ee e0       	ldi	r30, 0x0E	; 14
    3bd6:	0c 94 29 1e 	jmp	0x3c52	; 0x3c52 <__epilogue_restores__+0x8>

00003bda <abort>:
    3bda:	81 e0       	ldi	r24, 0x01	; 1
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	f8 94       	cli
    3be0:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <__do_global_dtors>

00003be4 <strcpy_P>:
    3be4:	fb 01       	movw	r30, r22
    3be6:	dc 01       	movw	r26, r24
    3be8:	05 90       	lpm	r0, Z+
    3bea:	0d 92       	st	X+, r0
    3bec:	00 20       	and	r0, r0
    3bee:	e1 f7       	brne	.-8      	; 0x3be8 <strcpy_P+0x4>
    3bf0:	08 95       	ret

00003bf2 <memcpy>:
    3bf2:	fb 01       	movw	r30, r22
    3bf4:	dc 01       	movw	r26, r24
    3bf6:	02 c0       	rjmp	.+4      	; 0x3bfc <memcpy+0xa>
    3bf8:	01 90       	ld	r0, Z+
    3bfa:	0d 92       	st	X+, r0
    3bfc:	41 50       	subi	r20, 0x01	; 1
    3bfe:	50 40       	sbci	r21, 0x00	; 0
    3c00:	d8 f7       	brcc	.-10     	; 0x3bf8 <memcpy+0x6>
    3c02:	08 95       	ret

00003c04 <strcpy>:
    3c04:	fb 01       	movw	r30, r22
    3c06:	dc 01       	movw	r26, r24
    3c08:	01 90       	ld	r0, Z+
    3c0a:	0d 92       	st	X+, r0
    3c0c:	00 20       	and	r0, r0
    3c0e:	e1 f7       	brne	.-8      	; 0x3c08 <strcpy+0x4>
    3c10:	08 95       	ret

00003c12 <__prologue_saves__>:
    3c12:	2f 92       	push	r2
    3c14:	3f 92       	push	r3
    3c16:	4f 92       	push	r4
    3c18:	5f 92       	push	r5
    3c1a:	6f 92       	push	r6
    3c1c:	7f 92       	push	r7
    3c1e:	8f 92       	push	r8
    3c20:	9f 92       	push	r9
    3c22:	af 92       	push	r10
    3c24:	bf 92       	push	r11
    3c26:	cf 92       	push	r12
    3c28:	df 92       	push	r13
    3c2a:	ef 92       	push	r14
    3c2c:	ff 92       	push	r15
    3c2e:	0f 93       	push	r16
    3c30:	1f 93       	push	r17
    3c32:	cf 93       	push	r28
    3c34:	df 93       	push	r29
    3c36:	cd b7       	in	r28, 0x3d	; 61
    3c38:	de b7       	in	r29, 0x3e	; 62
    3c3a:	ca 1b       	sub	r28, r26
    3c3c:	db 0b       	sbc	r29, r27
    3c3e:	0f b6       	in	r0, 0x3f	; 63
    3c40:	f8 94       	cli
    3c42:	de bf       	out	0x3e, r29	; 62
    3c44:	0f be       	out	0x3f, r0	; 63
    3c46:	cd bf       	out	0x3d, r28	; 61
    3c48:	09 94       	ijmp

00003c4a <__epilogue_restores__>:
    3c4a:	2a 88       	ldd	r2, Y+18	; 0x12
    3c4c:	39 88       	ldd	r3, Y+17	; 0x11
    3c4e:	48 88       	ldd	r4, Y+16	; 0x10
    3c50:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c52:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c54:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c56:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c58:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c5a:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c5c:	b9 84       	ldd	r11, Y+9	; 0x09
    3c5e:	c8 84       	ldd	r12, Y+8	; 0x08
    3c60:	df 80       	ldd	r13, Y+7	; 0x07
    3c62:	ee 80       	ldd	r14, Y+6	; 0x06
    3c64:	fd 80       	ldd	r15, Y+5	; 0x05
    3c66:	0c 81       	ldd	r16, Y+4	; 0x04
    3c68:	1b 81       	ldd	r17, Y+3	; 0x03
    3c6a:	aa 81       	ldd	r26, Y+2	; 0x02
    3c6c:	b9 81       	ldd	r27, Y+1	; 0x01
    3c6e:	ce 0f       	add	r28, r30
    3c70:	d1 1d       	adc	r29, r1
    3c72:	0f b6       	in	r0, 0x3f	; 63
    3c74:	f8 94       	cli
    3c76:	de bf       	out	0x3e, r29	; 62
    3c78:	0f be       	out	0x3f, r0	; 63
    3c7a:	cd bf       	out	0x3d, r28	; 61
    3c7c:	ed 01       	movw	r28, r26
    3c7e:	08 95       	ret

00003c80 <__do_global_dtors>:
    3c80:	10 e0       	ldi	r17, 0x00	; 0
    3c82:	cd ee       	ldi	r28, 0xED	; 237
    3c84:	d0 e0       	ldi	r29, 0x00	; 0
    3c86:	04 c0       	rjmp	.+8      	; 0x3c90 <__do_global_dtors+0x10>
    3c88:	fe 01       	movw	r30, r28
    3c8a:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <__tablejump2__>
    3c8e:	21 96       	adiw	r28, 0x01	; 1
    3c90:	ce 3e       	cpi	r28, 0xEE	; 238
    3c92:	d1 07       	cpc	r29, r17
    3c94:	c9 f7       	brne	.-14     	; 0x3c88 <__do_global_dtors+0x8>
    3c96:	f8 94       	cli

00003c98 <__stop_program>:
    3c98:	ff cf       	rjmp	.-2      	; 0x3c98 <__stop_program>
