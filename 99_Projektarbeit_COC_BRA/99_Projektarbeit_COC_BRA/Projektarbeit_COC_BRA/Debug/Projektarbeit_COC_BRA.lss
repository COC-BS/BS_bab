
Projektarbeit_COC_BRA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000019a  00800100  00004194  00004228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004194  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000026d  0080029a  0080029a  000043c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000043c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000043f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b58  00000000  00000000  00004434  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00018630  00000000  00000000  00004f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000411b  00000000  00000000  0001d5bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006354  00000000  00000000  000216d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000023d0  00000000  00000000  00027a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004f08  00000000  00000000  00029dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ca44  00000000  00000000  0002ed04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c48  00000000  00000000  0003b748  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__dtors_end>
       4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      10:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      14:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      18:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      1c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      20:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      24:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      28:	0c 94 d3 18 	jmp	0x31a6	; 0x31a6 <__vector_10>
      2c:	0c 94 6f 17 	jmp	0x2ede	; 0x2ede <__vector_11>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      34:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      38:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      3c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      40:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      44:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      48:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      4c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      50:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      54:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      58:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      5c:	0c 94 67 19 	jmp	0x32ce	; 0x32ce <__vector_23>
      60:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      64:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      68:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      6c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      70:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      74:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      78:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      7c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      80:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      84:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      88:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      8c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      90:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <__vector_36>
      94:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      98:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      9c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ac:	c8 1a       	sub	r12, r24
      ae:	cb 1a       	sub	r12, r27
      b0:	ba 1a       	sub	r11, r26
      b2:	be 1a       	sub	r11, r30
      b4:	c4 1a       	sub	r12, r20
      b6:	ec 1a       	sub	r14, r28
      b8:	ec 1a       	sub	r14, r28
      ba:	ec 1a       	sub	r14, r28
      bc:	cf 1a       	sub	r12, r31
      be:	d3 1a       	sub	r13, r19
      c0:	d7 1a       	sub	r13, r23
      c2:	dd 1a       	sub	r13, r29
      c4:	e1 1a       	sub	r14, r17
      c6:	ec 1a       	sub	r14, r28
      c8:	e7 1a       	sub	r14, r23

000000ca <USB_DeviceDescriptorIAD>:
      ca:	12 01 00 02 ef 02 01 40 41 23 36 80 00 01 01 02     .......@A#6.....
      da:	03 01                                               ..

000000dc <STRING_MANUFACTURER>:
      dc:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

000000e8 <STRING_PRODUCT>:
      e8:	41 72 64 75 69 6e 6f 20 4c 65 6f 6e 61 72 64 6f     Arduino Leonardo
	...

000000f9 <STRING_LANGUAGE>:
      f9:	04 03 09 04                                         ....

000000fd <analog_pin_to_channel_PGM>:
      fd:	07 06 05 04 01 00 08 0a 0b 0c 0d 09                 ............

00000109 <digital_pin_to_timer_PGM>:
     109:	00 00 00 02 00 09 0f 00 00 03 04 01 00 0c 00 00     ................
	...

00000128 <digital_pin_to_bit_mask_PGM>:
     128:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     138:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

00000147 <digital_pin_to_port_PGM>:
     147:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     157:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

00000166 <port_to_input_PGM>:
     166:	00 00 00 00 23 00 26 00 29 00 2c 00 2f 00           ....#.&.).,./.

00000174 <port_to_output_PGM>:
     174:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

00000182 <port_to_mode_PGM>:
     182:	00 00 00 00 24 00 27 00 2a 00 2d 00 30 00           ....$.'.*.-.0.

00000190 <_cdcInterface>:
     190:	08 0b 00 02 02 02 01 00 09 04 00 00 01 02 02 00     ................
     1a0:	00 05 24 00 10 01 05 24 01 01 01 04 24 02 06 05     ..$....$....$...
     1b0:	24 06 00 01 07 05 81 03 10 00 40 09 04 01 00 02     $.........@.....
     1c0:	0a 00 00 00 07 05 02 02 40 00 00 07 05 83 02 40     ........@......@
	...

000001d2 <__ctors_start>:
     1d2:	d6 05       	cpc	r29, r6
     1d4:	a5 11       	cpse	r26, r5
     1d6:	e0 1c       	adc	r14, r0

000001d8 <__ctors_end>:
     1d8:	11 07       	cpc	r17, r17

000001da <__dtors_end>:
     1da:	11 24       	eor	r1, r1
     1dc:	1f be       	out	0x3f, r1	; 63
     1de:	cf ef       	ldi	r28, 0xFF	; 255
     1e0:	da e0       	ldi	r29, 0x0A	; 10
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	cd bf       	out	0x3d, r28	; 61

000001e6 <__do_copy_data>:
     1e6:	12 e0       	ldi	r17, 0x02	; 2
     1e8:	a0 e0       	ldi	r26, 0x00	; 0
     1ea:	b1 e0       	ldi	r27, 0x01	; 1
     1ec:	e4 e9       	ldi	r30, 0x94	; 148
     1ee:	f1 e4       	ldi	r31, 0x41	; 65
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <__do_copy_data+0x10>
     1f2:	05 90       	lpm	r0, Z+
     1f4:	0d 92       	st	X+, r0
     1f6:	aa 39       	cpi	r26, 0x9A	; 154
     1f8:	b1 07       	cpc	r27, r17
     1fa:	d9 f7       	brne	.-10     	; 0x1f2 <__do_copy_data+0xc>

000001fc <__do_clear_bss>:
     1fc:	25 e0       	ldi	r18, 0x05	; 5
     1fe:	aa e9       	ldi	r26, 0x9A	; 154
     200:	b2 e0       	ldi	r27, 0x02	; 2
     202:	01 c0       	rjmp	.+2      	; 0x206 <.do_clear_bss_start>

00000204 <.do_clear_bss_loop>:
     204:	1d 92       	st	X+, r1

00000206 <.do_clear_bss_start>:
     206:	a7 30       	cpi	r26, 0x07	; 7
     208:	b2 07       	cpc	r27, r18
     20a:	e1 f7       	brne	.-8      	; 0x204 <.do_clear_bss_loop>

0000020c <__do_global_ctors>:
     20c:	10 e0       	ldi	r17, 0x00	; 0
     20e:	cc ee       	ldi	r28, 0xEC	; 236
     210:	d0 e0       	ldi	r29, 0x00	; 0
     212:	04 c0       	rjmp	.+8      	; 0x21c <__do_global_ctors+0x10>
     214:	21 97       	sbiw	r28, 0x01	; 1
     216:	fe 01       	movw	r30, r28
     218:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <__tablejump2__>
     21c:	c9 3e       	cpi	r28, 0xE9	; 233
     21e:	d1 07       	cpc	r29, r17
     220:	c9 f7       	brne	.-14     	; 0x214 <__do_global_ctors+0x8>
     222:	0e 94 3d 13 	call	0x267a	; 0x267a <main>
     226:	0c 94 bd 20 	jmp	0x417a	; 0x417a <__do_global_dtors>

0000022a <__bad_interrupt>:
     22a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022e <_Z6getkeyv>:
 */
int getkey(void)
{
	static int keys[NUMKEYS+1];
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <analogRead>

	if (val > 1020) { // no key pressed
     234:	8d 3f       	cpi	r24, 0xFD	; 253
     236:	23 e0       	ldi	r18, 0x03	; 3
     238:	92 07       	cpc	r25, r18
     23a:	20 f1       	brcs	.+72     	; 0x284 <_Z6getkeyv+0x56>
		if (++keys[0] > NOPRESS) {
     23c:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <__data_end>
     240:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <__data_end+0x1>
     244:	01 96       	adiw	r24, 0x01	; 1
     246:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <__data_end+0x1>
     24a:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <__data_end>
     24e:	03 97       	sbiw	r24, 0x03	; 3
     250:	0c f4       	brge	.+2      	; 0x254 <_Z6getkeyv+0x26>
     252:	6a c0       	rjmp	.+212    	; 0x328 <_Z6getkeyv+0xfa>
     254:	ea e9       	ldi	r30, 0x9A	; 154
     256:	f2 e0       	ldi	r31, 0x02	; 2
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	90 e0       	ldi	r25, 0x00	; 0
			for(uint8_t i = 0; i <= NUMKEYS; i++){
				if(keys[i] > KEYPRESS){
     260:	40 81       	ld	r20, Z
     262:	51 81       	ldd	r21, Z+1	; 0x01
     264:	44 30       	cpi	r20, 0x04	; 4
     266:	51 05       	cpc	r21, r1
     268:	2c f0       	brlt	.+10     	; 0x274 <_Z6getkeyv+0x46>
     26a:	c9 01       	movw	r24, r18
					data = i;
					if(keys[i] > LONGPRESS) data += 5;
     26c:	49 3c       	cpi	r20, 0xC9	; 201
     26e:	51 05       	cpc	r21, r1
     270:	0c f0       	brlt	.+2      	; 0x274 <_Z6getkeyv+0x46>
     272:	05 96       	adiw	r24, 0x05	; 5
				}
				keys[i] = 0;
     274:	11 92       	st	Z+, r1
     276:	11 92       	st	Z+, r1
     278:	2f 5f       	subi	r18, 0xFF	; 255
     27a:	3f 4f       	sbci	r19, 0xFF	; 255
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);

	if (val > 1020) { // no key pressed
		if (++keys[0] > NOPRESS) {
			for(uint8_t i = 0; i <= NUMKEYS; i++){
     27c:	26 30       	cpi	r18, 0x06	; 6
     27e:	31 05       	cpc	r19, r1
     280:	79 f7       	brne	.-34     	; 0x260 <_Z6getkeyv+0x32>
     282:	08 95       	ret
			}
		}
		else data = 0;
	}
	else {
		if (val < S1_LIMIT && keys[1] < 32000) ++keys[1]; // key1 pressed
     284:	89 34       	cpi	r24, 0x49	; 73
     286:	91 05       	cpc	r25, r1
     288:	70 f4       	brcc	.+28     	; 0x2a6 <_Z6getkeyv+0x78>
     28a:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <__data_end+0x2>
     28e:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <__data_end+0x3>
     292:	81 15       	cp	r24, r1
     294:	2d e7       	ldi	r18, 0x7D	; 125
     296:	92 07       	cpc	r25, r18
     298:	4c f4       	brge	.+18     	; 0x2ac <_Z6getkeyv+0x7e>
     29a:	01 96       	adiw	r24, 0x01	; 1
     29c:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <__data_end+0x3>
     2a0:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <__data_end+0x2>
     2a4:	41 c0       	rjmp	.+130    	; 0x328 <_Z6getkeyv+0xfa>
		else if (val < S2_LIMIT && keys[2] < 32000) ++keys[2]; //key2 pressed
     2a6:	8e 3e       	cpi	r24, 0xEE	; 238
     2a8:	91 05       	cpc	r25, r1
     2aa:	70 f4       	brcc	.+28     	; 0x2c8 <_Z6getkeyv+0x9a>
     2ac:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <__data_end+0x4>
     2b0:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <__data_end+0x5>
     2b4:	81 15       	cp	r24, r1
     2b6:	2d e7       	ldi	r18, 0x7D	; 125
     2b8:	92 07       	cpc	r25, r18
     2ba:	54 f4       	brge	.+20     	; 0x2d0 <_Z6getkeyv+0xa2>
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <__data_end+0x5>
     2c2:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <__data_end+0x4>
     2c6:	30 c0       	rjmp	.+96     	; 0x328 <_Z6getkeyv+0xfa>
		else if (val < S3_LIMIT && keys[3] < 32000) ++keys[3]; //key3 pressed
     2c8:	82 3a       	cpi	r24, 0xA2	; 162
     2ca:	21 e0       	ldi	r18, 0x01	; 1
     2cc:	92 07       	cpc	r25, r18
     2ce:	70 f4       	brcc	.+28     	; 0x2ec <_Z6getkeyv+0xbe>
     2d0:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <__data_end+0x6>
     2d4:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <__data_end+0x7>
     2d8:	81 15       	cp	r24, r1
     2da:	2d e7       	ldi	r18, 0x7D	; 125
     2dc:	92 07       	cpc	r25, r18
     2de:	4c f4       	brge	.+18     	; 0x2f2 <_Z6getkeyv+0xc4>
     2e0:	01 96       	adiw	r24, 0x01	; 1
     2e2:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <__data_end+0x7>
     2e6:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <__data_end+0x6>
     2ea:	1e c0       	rjmp	.+60     	; 0x328 <_Z6getkeyv+0xfa>
		else if (val < S4_LIMIT && keys[4] < 32000) ++keys[4]; //key4 pressed
     2ec:	80 37       	cpi	r24, 0x70	; 112
     2ee:	92 40       	sbci	r25, 0x02	; 2
     2f0:	70 f4       	brcc	.+28     	; 0x30e <_Z6getkeyv+0xe0>
     2f2:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <__data_end+0x8>
     2f6:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <__data_end+0x9>
     2fa:	81 15       	cp	r24, r1
     2fc:	2d e7       	ldi	r18, 0x7D	; 125
     2fe:	92 07       	cpc	r25, r18
     300:	34 f4       	brge	.+12     	; 0x30e <_Z6getkeyv+0xe0>
     302:	01 96       	adiw	r24, 0x01	; 1
     304:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <__data_end+0x9>
     308:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <__data_end+0x8>
     30c:	0d c0       	rjmp	.+26     	; 0x328 <_Z6getkeyv+0xfa>
		else if ( keys[5] < 32000) ++keys[5]; // key5 pressed
     30e:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <__data_end+0xa>
     312:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <__data_end+0xb>
     316:	81 15       	cp	r24, r1
     318:	2d e7       	ldi	r18, 0x7D	; 125
     31a:	92 07       	cpc	r25, r18
     31c:	2c f4       	brge	.+10     	; 0x328 <_Z6getkeyv+0xfa>
     31e:	01 96       	adiw	r24, 0x01	; 1
     320:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <__data_end+0xb>
     324:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <__data_end+0xa>
		data = 0;
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
	}
	return data;
}
     32c:	08 95       	ret

0000032e <_ZN5Print17availableForWriteEv>:
void callibratePointer() 
{
	lcd.clear();
	lcd.print("Zeiger kalibrieren");
	delay(2000);
	lcd.clear();
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	08 95       	ret

00000334 <_ZN5Print5flushEv>:
     334:	08 95       	ret

00000336 <_ZN7hd4478013iosetContrastEh>:
     336:	8d ef       	ldi	r24, 0xFD	; 253
     338:	9f ef       	ldi	r25, 0xFF	; 255
     33a:	08 95       	ret

0000033c <_Z14chooseTimeZonev>:
     33c:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <timeZoneChoosen>
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	89 27       	eor	r24, r25
     344:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <timeZoneChoosen>
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	08 95       	ret

0000034e <_Z10changeAMPMv>:
     34e:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <ampm>
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	89 27       	eor	r24, r25
     356:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <ampm>
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	08 95       	ret

00000360 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>:
     360:	0f 93       	push	r16
     362:	1f 93       	push	r17
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
     368:	18 2f       	mov	r17, r24
     36a:	d0 e0       	ldi	r29, 0x00	; 0
     36c:	c0 e2       	ldi	r28, 0x20	; 32
     36e:	6c 2f       	mov	r22, r28
     370:	8d e3       	ldi	r24, 0x3D	; 61
     372:	94 e0       	ldi	r25, 0x04	; 4
     374:	0e 94 1e 11 	call	0x223c	; 0x223c <_ZN7TwoWire17beginTransmissionEh>
     378:	8d e3       	ldi	r24, 0x3D	; 61
     37a:	94 e0       	ldi	r25, 0x04	; 4
     37c:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7TwoWire15endTransmissionEv>
     380:	08 2f       	mov	r16, r24
     382:	61 e0       	ldi	r22, 0x01	; 1
     384:	70 e0       	ldi	r23, 0x00	; 0
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <delay>
     38e:	01 11       	cpse	r16, r1
     390:	03 c0       	rjmp	.+6      	; 0x398 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x38>
     392:	1d 17       	cp	r17, r29
     394:	f9 f0       	breq	.+62     	; 0x3d4 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x74>
     396:	df 5f       	subi	r29, 0xFF	; 255
     398:	cf 5f       	subi	r28, 0xFF	; 255
     39a:	c8 32       	cpi	r28, 0x28	; 40
     39c:	41 f7       	brne	.-48     	; 0x36e <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0xe>
     39e:	c8 e3       	ldi	r28, 0x38	; 56
     3a0:	6c 2f       	mov	r22, r28
     3a2:	8d e3       	ldi	r24, 0x3D	; 61
     3a4:	94 e0       	ldi	r25, 0x04	; 4
     3a6:	0e 94 1e 11 	call	0x223c	; 0x223c <_ZN7TwoWire17beginTransmissionEh>
     3aa:	8d e3       	ldi	r24, 0x3D	; 61
     3ac:	94 e0       	ldi	r25, 0x04	; 4
     3ae:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7TwoWire15endTransmissionEv>
     3b2:	08 2f       	mov	r16, r24
     3b4:	61 e0       	ldi	r22, 0x01	; 1
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <delay>
     3c0:	01 11       	cpse	r16, r1
     3c2:	03 c0       	rjmp	.+6      	; 0x3ca <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x6a>
     3c4:	1d 17       	cp	r17, r29
     3c6:	31 f0       	breq	.+12     	; 0x3d4 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x74>
     3c8:	df 5f       	subi	r29, 0xFF	; 255
     3ca:	cf 5f       	subi	r28, 0xFF	; 255
     3cc:	c0 34       	cpi	r28, 0x40	; 64
     3ce:	41 f7       	brne	.-48     	; 0x3a0 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x40>
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x76>
     3d4:	8c 2f       	mov	r24, r28
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	08 95       	ret

000003e0 <_ZN7TwoWire5writeEi>:
     3e0:	dc 01       	movw	r26, r24
     3e2:	ed 91       	ld	r30, X+
     3e4:	fc 91       	ld	r31, X
     3e6:	01 90       	ld	r0, Z+
     3e8:	f0 81       	ld	r31, Z
     3ea:	e0 2d       	mov	r30, r0
     3ec:	09 94       	ijmp

000003ee <_ZN4Zeit4TickEv>:
     3ee:	fc 01       	movw	r30, r24
     3f0:	84 81       	ldd	r24, Z+4	; 0x04
     3f2:	95 81       	ldd	r25, Z+5	; 0x05
     3f4:	01 96       	adiw	r24, 0x01	; 1
     3f6:	2c e3       	ldi	r18, 0x3C	; 60
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	b9 01       	movw	r22, r18
     3fc:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <__divmodhi4>
     400:	95 83       	std	Z+5, r25	; 0x05
     402:	84 83       	std	Z+4, r24	; 0x04
     404:	89 2b       	or	r24, r25
     406:	19 f0       	breq	.+6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	08 95       	ret
     40e:	82 81       	ldd	r24, Z+2	; 0x02
     410:	93 81       	ldd	r25, Z+3	; 0x03
     412:	01 96       	adiw	r24, 0x01	; 1
     414:	b9 01       	movw	r22, r18
     416:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <__divmodhi4>
     41a:	93 83       	std	Z+3, r25	; 0x03
     41c:	82 83       	std	Z+2, r24	; 0x02
     41e:	89 2b       	or	r24, r25
     420:	99 f7       	brne	.-26     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	01 96       	adiw	r24, 0x01	; 1
     428:	68 e1       	ldi	r22, 0x18	; 24
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <__divmodhi4>
     430:	ac 01       	movw	r20, r24
     432:	91 83       	std	Z+1, r25	; 0x01
     434:	80 83       	st	Z, r24
     436:	21 e0       	ldi	r18, 0x01	; 1
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	45 2b       	or	r20, r21
     43c:	09 f0       	breq	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	82 2f       	mov	r24, r18
     442:	08 95       	ret

00000444 <_ZN5Datum11DaysOfMonthEv>:
     444:	fc 01       	movw	r30, r24
     446:	22 81       	ldd	r18, Z+2	; 0x02
     448:	33 81       	ldd	r19, Z+3	; 0x03
     44a:	26 30       	cpi	r18, 0x06	; 6
     44c:	31 05       	cpc	r19, r1
     44e:	d9 f0       	breq	.+54     	; 0x486 <_ZN5Datum11DaysOfMonthEv+0x42>
     450:	3c f4       	brge	.+14     	; 0x460 <_ZN5Datum11DaysOfMonthEv+0x1c>
     452:	22 30       	cpi	r18, 0x02	; 2
     454:	31 05       	cpc	r19, r1
     456:	69 f0       	breq	.+26     	; 0x472 <_ZN5Datum11DaysOfMonthEv+0x2e>
     458:	24 30       	cpi	r18, 0x04	; 4
     45a:	31 05       	cpc	r19, r1
     45c:	39 f4       	brne	.+14     	; 0x46c <_ZN5Datum11DaysOfMonthEv+0x28>
     45e:	13 c0       	rjmp	.+38     	; 0x486 <_ZN5Datum11DaysOfMonthEv+0x42>
     460:	29 30       	cpi	r18, 0x09	; 9
     462:	31 05       	cpc	r19, r1
     464:	81 f0       	breq	.+32     	; 0x486 <_ZN5Datum11DaysOfMonthEv+0x42>
     466:	2b 30       	cpi	r18, 0x0B	; 11
     468:	31 05       	cpc	r19, r1
     46a:	69 f0       	breq	.+26     	; 0x486 <_ZN5Datum11DaysOfMonthEv+0x42>
     46c:	8f e1       	ldi	r24, 0x1F	; 31
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	08 95       	ret
     472:	fc 01       	movw	r30, r24
     474:	80 81       	ld	r24, Z
     476:	91 81       	ldd	r25, Z+1	; 0x01
     478:	83 70       	andi	r24, 0x03	; 3
     47a:	99 27       	eor	r25, r25
     47c:	89 2b       	or	r24, r25
     47e:	31 f4       	brne	.+12     	; 0x48c <_ZN5Datum11DaysOfMonthEv+0x48>
     480:	8d e1       	ldi	r24, 0x1D	; 29
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	08 95       	ret
     486:	8e e1       	ldi	r24, 0x1E	; 30
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	08 95       	ret
     48c:	8c e1       	ldi	r24, 0x1C	; 28
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	08 95       	ret

00000492 <_ZN5Datum4TickEv>:
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	ec 01       	movw	r28, r24
     49c:	0c 81       	ldd	r16, Y+4	; 0x04
     49e:	1d 81       	ldd	r17, Y+5	; 0x05
     4a0:	0f 5f       	subi	r16, 0xFF	; 255
     4a2:	1f 4f       	sbci	r17, 0xFF	; 255
     4a4:	1d 83       	std	Y+5, r17	; 0x05
     4a6:	0c 83       	std	Y+4, r16	; 0x04
     4a8:	0e 94 22 02 	call	0x444	; 0x444 <_ZN5Datum11DaysOfMonthEv>
     4ac:	80 17       	cp	r24, r16
     4ae:	91 07       	cpc	r25, r17
     4b0:	a4 f4       	brge	.+40     	; 0x4da <_ZN5Datum4TickEv+0x48>
     4b2:	21 e0       	ldi	r18, 0x01	; 1
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	3d 83       	std	Y+5, r19	; 0x05
     4b8:	2c 83       	std	Y+4, r18	; 0x04
     4ba:	8a 81       	ldd	r24, Y+2	; 0x02
     4bc:	9b 81       	ldd	r25, Y+3	; 0x03
     4be:	01 96       	adiw	r24, 0x01	; 1
     4c0:	8d 30       	cpi	r24, 0x0D	; 13
     4c2:	91 05       	cpc	r25, r1
     4c4:	1c f4       	brge	.+6      	; 0x4cc <_ZN5Datum4TickEv+0x3a>
     4c6:	9b 83       	std	Y+3, r25	; 0x03
     4c8:	8a 83       	std	Y+2, r24	; 0x02
     4ca:	07 c0       	rjmp	.+14     	; 0x4da <_ZN5Datum4TickEv+0x48>
     4cc:	3b 83       	std	Y+3, r19	; 0x03
     4ce:	2a 83       	std	Y+2, r18	; 0x02
     4d0:	88 81       	ld	r24, Y
     4d2:	99 81       	ldd	r25, Y+1	; 0x01
     4d4:	01 96       	adiw	r24, 0x01	; 1
     4d6:	99 83       	std	Y+1, r25	; 0x01
     4d8:	88 83       	st	Y, r24
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	1f 91       	pop	r17
     4e0:	0f 91       	pop	r16
     4e2:	08 95       	ret

000004e4 <_Z5Watchv>:
     4e4:	0f 93       	push	r16
     4e6:	1f 93       	push	r17
     4e8:	0e 94 b1 19 	call	0x3362	; 0x3362 <millis>
     4ec:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZZ5WatchvE6target>
     4f0:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZZ5WatchvE6target+0x1>
     4f4:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <_ZZ5WatchvE6target+0x2>
     4f8:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <_ZZ5WatchvE6target+0x3>
     4fc:	06 17       	cp	r16, r22
     4fe:	17 07       	cpc	r17, r23
     500:	28 07       	cpc	r18, r24
     502:	39 07       	cpc	r19, r25
     504:	70 f5       	brcc	.+92     	; 0x562 <_Z5Watchv+0x7e>
     506:	d9 01       	movw	r26, r18
     508:	c8 01       	movw	r24, r16
     50a:	88 51       	subi	r24, 0x18	; 24
     50c:	9c 4f       	sbci	r25, 0xFC	; 252
     50e:	af 4f       	sbci	r26, 0xFF	; 255
     510:	bf 4f       	sbci	r27, 0xFF	; 255
     512:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZZ5WatchvE6target>
     516:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZZ5WatchvE6target+0x1>
     51a:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_ZZ5WatchvE6target+0x2>
     51e:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_ZZ5WatchvE6target+0x3>
     522:	84 ed       	ldi	r24, 0xD4	; 212
     524:	92 e0       	ldi	r25, 0x02	; 2
     526:	0e 94 f7 01 	call	0x3ee	; 0x3ee <_ZN4Zeit4TickEv>
     52a:	89 2b       	or	r24, r25
     52c:	21 f0       	breq	.+8      	; 0x536 <_Z5Watchv+0x52>
     52e:	8c eb       	ldi	r24, 0xBC	; 188
     530:	92 e0       	ldi	r25, 0x02	; 2
     532:	0e 94 49 02 	call	0x492	; 0x492 <_ZN5Datum4TickEv>
     536:	8c ec       	ldi	r24, 0xCC	; 204
     538:	92 e0       	ldi	r25, 0x02	; 2
     53a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <_ZN4Zeit4TickEv>
     53e:	89 2b       	or	r24, r25
     540:	21 f0       	breq	.+8      	; 0x54a <_Z5Watchv+0x66>
     542:	84 eb       	ldi	r24, 0xB4	; 180
     544:	92 e0       	ldi	r25, 0x02	; 2
     546:	0e 94 49 02 	call	0x492	; 0x492 <_ZN5Datum4TickEv>
     54a:	84 ec       	ldi	r24, 0xC4	; 196
     54c:	92 e0       	ldi	r25, 0x02	; 2
     54e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <_ZN4Zeit4TickEv>
     552:	89 2b       	or	r24, r25
     554:	31 f0       	breq	.+12     	; 0x562 <_Z5Watchv+0x7e>
     556:	8c ea       	ldi	r24, 0xAC	; 172
     558:	92 e0       	ldi	r25, 0x02	; 2
     55a:	1f 91       	pop	r17
     55c:	0f 91       	pop	r16
     55e:	0c 94 49 02 	jmp	0x492	; 0x492 <_ZN5Datum4TickEv>
     562:	1f 91       	pop	r17
     564:	0f 91       	pop	r16
     566:	08 95       	ret

00000568 <_Z11printhhmmssR4Zeit>:
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	8c 01       	movw	r16, r24
     572:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <ampm>
     576:	f8 01       	movw	r30, r16
     578:	c0 81       	ld	r28, Z
     57a:	d1 81       	ldd	r29, Z+1	; 0x01
     57c:	88 23       	and	r24, r24
     57e:	89 f0       	breq	.+34     	; 0x5a2 <_Z11printhhmmssR4Zeit+0x3a>
     580:	cd 30       	cpi	r28, 0x0D	; 13
     582:	d1 05       	cpc	r29, r1
     584:	0c f0       	brlt	.+2      	; 0x588 <_Z11printhhmmssR4Zeit+0x20>
     586:	2c 97       	sbiw	r28, 0x0c	; 12
     588:	ca 30       	cpi	r28, 0x0A	; 10
     58a:	d1 05       	cpc	r29, r1
     58c:	34 f4       	brge	.+12     	; 0x59a <_Z11printhhmmssR4Zeit+0x32>
     58e:	6f e1       	ldi	r22, 0x1F	; 31
     590:	71 e0       	ldi	r23, 0x01	; 1
     592:	82 ea       	ldi	r24, 0xA2	; 162
     594:	93 e0       	ldi	r25, 0x03	; 3
     596:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN5Print5printEPKc>
     59a:	4a e0       	ldi	r20, 0x0A	; 10
     59c:	50 e0       	ldi	r21, 0x00	; 0
     59e:	be 01       	movw	r22, r28
     5a0:	0d c0       	rjmp	.+26     	; 0x5bc <_Z11printhhmmssR4Zeit+0x54>
     5a2:	2a 97       	sbiw	r28, 0x0a	; 10
     5a4:	34 f4       	brge	.+12     	; 0x5b2 <_Z11printhhmmssR4Zeit+0x4a>
     5a6:	6f e1       	ldi	r22, 0x1F	; 31
     5a8:	71 e0       	ldi	r23, 0x01	; 1
     5aa:	82 ea       	ldi	r24, 0xA2	; 162
     5ac:	93 e0       	ldi	r25, 0x03	; 3
     5ae:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN5Print5printEPKc>
     5b2:	f8 01       	movw	r30, r16
     5b4:	60 81       	ld	r22, Z
     5b6:	71 81       	ldd	r23, Z+1	; 0x01
     5b8:	4a e0       	ldi	r20, 0x0A	; 10
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	82 ea       	ldi	r24, 0xA2	; 162
     5be:	93 e0       	ldi	r25, 0x03	; 3
     5c0:	0e 94 4a 14 	call	0x2894	; 0x2894 <_ZN5Print5printEii>
     5c4:	f8 01       	movw	r30, r16
     5c6:	82 81       	ldd	r24, Z+2	; 0x02
     5c8:	93 81       	ldd	r25, Z+3	; 0x03
     5ca:	0a 97       	sbiw	r24, 0x0a	; 10
     5cc:	1c f4       	brge	.+6      	; 0x5d4 <_Z11printhhmmssR4Zeit+0x6c>
     5ce:	6e e1       	ldi	r22, 0x1E	; 30
     5d0:	71 e0       	ldi	r23, 0x01	; 1
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <_Z11printhhmmssR4Zeit+0x70>
     5d4:	61 e2       	ldi	r22, 0x21	; 33
     5d6:	71 e0       	ldi	r23, 0x01	; 1
     5d8:	82 ea       	ldi	r24, 0xA2	; 162
     5da:	93 e0       	ldi	r25, 0x03	; 3
     5dc:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN5Print5printEPKc>
     5e0:	f8 01       	movw	r30, r16
     5e2:	62 81       	ldd	r22, Z+2	; 0x02
     5e4:	73 81       	ldd	r23, Z+3	; 0x03
     5e6:	4a e0       	ldi	r20, 0x0A	; 10
     5e8:	50 e0       	ldi	r21, 0x00	; 0
     5ea:	82 ea       	ldi	r24, 0xA2	; 162
     5ec:	93 e0       	ldi	r25, 0x03	; 3
     5ee:	0e 94 4a 14 	call	0x2894	; 0x2894 <_ZN5Print5printEii>
     5f2:	f8 01       	movw	r30, r16
     5f4:	84 81       	ldd	r24, Z+4	; 0x04
     5f6:	95 81       	ldd	r25, Z+5	; 0x05
     5f8:	0a 97       	sbiw	r24, 0x0a	; 10
     5fa:	1c f4       	brge	.+6      	; 0x602 <_Z11printhhmmssR4Zeit+0x9a>
     5fc:	6e e1       	ldi	r22, 0x1E	; 30
     5fe:	71 e0       	ldi	r23, 0x01	; 1
     600:	02 c0       	rjmp	.+4      	; 0x606 <_Z11printhhmmssR4Zeit+0x9e>
     602:	61 e2       	ldi	r22, 0x21	; 33
     604:	71 e0       	ldi	r23, 0x01	; 1
     606:	82 ea       	ldi	r24, 0xA2	; 162
     608:	93 e0       	ldi	r25, 0x03	; 3
     60a:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN5Print5printEPKc>
     60e:	f8 01       	movw	r30, r16
     610:	64 81       	ldd	r22, Z+4	; 0x04
     612:	75 81       	ldd	r23, Z+5	; 0x05
     614:	4a e0       	ldi	r20, 0x0A	; 10
     616:	50 e0       	ldi	r21, 0x00	; 0
     618:	82 ea       	ldi	r24, 0xA2	; 162
     61a:	93 e0       	ldi	r25, 0x03	; 3
     61c:	0e 94 4a 14 	call	0x2894	; 0x2894 <_ZN5Print5printEii>
     620:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <ampm>
     624:	88 23       	and	r24, r24
     626:	91 f0       	breq	.+36     	; 0x64c <_Z11printhhmmssR4Zeit+0xe4>
     628:	f8 01       	movw	r30, r16
     62a:	80 81       	ld	r24, Z
     62c:	91 81       	ldd	r25, Z+1	; 0x01
     62e:	0d 97       	sbiw	r24, 0x0d	; 13
     630:	1c f0       	brlt	.+6      	; 0x638 <_Z11printhhmmssR4Zeit+0xd0>
     632:	63 e2       	ldi	r22, 0x23	; 35
     634:	71 e0       	ldi	r23, 0x01	; 1
     636:	02 c0       	rjmp	.+4      	; 0x63c <_Z11printhhmmssR4Zeit+0xd4>
     638:	67 e2       	ldi	r22, 0x27	; 39
     63a:	71 e0       	ldi	r23, 0x01	; 1
     63c:	82 ea       	ldi	r24, 0xA2	; 162
     63e:	93 e0       	ldi	r25, 0x03	; 3
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	0c 94 9d 13 	jmp	0x273a	; 0x273a <_ZN5Print5printEPKc>
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	1f 91       	pop	r17
     652:	0f 91       	pop	r16
     654:	08 95       	ret

00000656 <_Z13printddmmyyyyR5Datum>:
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	ec 01       	movw	r28, r24
     65c:	8c 81       	ldd	r24, Y+4	; 0x04
     65e:	9d 81       	ldd	r25, Y+5	; 0x05
     660:	0a 97       	sbiw	r24, 0x0a	; 10
     662:	34 f4       	brge	.+12     	; 0x670 <_Z13printddmmyyyyR5Datum+0x1a>
     664:	61 e4       	ldi	r22, 0x41	; 65
     666:	71 e0       	ldi	r23, 0x01	; 1
     668:	82 ea       	ldi	r24, 0xA2	; 162
     66a:	93 e0       	ldi	r25, 0x03	; 3
     66c:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN5Print5printEPKc>
     670:	6c 81       	ldd	r22, Y+4	; 0x04
     672:	7d 81       	ldd	r23, Y+5	; 0x05
     674:	4a e0       	ldi	r20, 0x0A	; 10
     676:	50 e0       	ldi	r21, 0x00	; 0
     678:	82 ea       	ldi	r24, 0xA2	; 162
     67a:	93 e0       	ldi	r25, 0x03	; 3
     67c:	0e 94 4a 14 	call	0x2894	; 0x2894 <_ZN5Print5printEii>
     680:	8a 81       	ldd	r24, Y+2	; 0x02
     682:	9b 81       	ldd	r25, Y+3	; 0x03
     684:	0a 97       	sbiw	r24, 0x0a	; 10
     686:	1c f4       	brge	.+6      	; 0x68e <_Z13printddmmyyyyR5Datum+0x38>
     688:	6b e2       	ldi	r22, 0x2B	; 43
     68a:	71 e0       	ldi	r23, 0x01	; 1
     68c:	02 c0       	rjmp	.+4      	; 0x692 <_Z13printddmmyyyyR5Datum+0x3c>
     68e:	6e e2       	ldi	r22, 0x2E	; 46
     690:	71 e0       	ldi	r23, 0x01	; 1
     692:	82 ea       	ldi	r24, 0xA2	; 162
     694:	93 e0       	ldi	r25, 0x03	; 3
     696:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN5Print5printEPKc>
     69a:	6a 81       	ldd	r22, Y+2	; 0x02
     69c:	7b 81       	ldd	r23, Y+3	; 0x03
     69e:	4a e0       	ldi	r20, 0x0A	; 10
     6a0:	50 e0       	ldi	r21, 0x00	; 0
     6a2:	82 ea       	ldi	r24, 0xA2	; 162
     6a4:	93 e0       	ldi	r25, 0x03	; 3
     6a6:	0e 94 4a 14 	call	0x2894	; 0x2894 <_ZN5Print5printEii>
     6aa:	6e e2       	ldi	r22, 0x2E	; 46
     6ac:	71 e0       	ldi	r23, 0x01	; 1
     6ae:	82 ea       	ldi	r24, 0xA2	; 162
     6b0:	93 e0       	ldi	r25, 0x03	; 3
     6b2:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN5Print5printEPKc>
     6b6:	68 81       	ld	r22, Y
     6b8:	79 81       	ldd	r23, Y+1	; 0x01
     6ba:	4a e0       	ldi	r20, 0x0A	; 10
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	82 ea       	ldi	r24, 0xA2	; 162
     6c0:	93 e0       	ldi	r25, 0x03	; 3
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <_ZN5Print5printEii>

000006ca <_Z15dateAlarmScreeni>:
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	ec 01       	movw	r28, r24
     6d0:	40 e0       	ldi	r20, 0x00	; 0
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	82 ea       	ldi	r24, 0xA2	; 162
     6d6:	93 e0       	ldi	r25, 0x03	; 3
     6d8:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <_ZN7hd447809setCursorEhh>
     6dc:	8c ea       	ldi	r24, 0xAC	; 172
     6de:	92 e0       	ldi	r25, 0x02	; 2
     6e0:	0e 94 2b 03 	call	0x656	; 0x656 <_Z13printddmmyyyyR5Datum>
     6e4:	ce 01       	movw	r24, r28
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	08 95       	ret

000006ec <_Z17printHumidityTempv>:
     6ec:	cf 92       	push	r12
     6ee:	df 92       	push	r13
     6f0:	ef 92       	push	r14
     6f2:	ff 92       	push	r15
     6f4:	41 e0       	ldi	r20, 0x01	; 1
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	82 ea       	ldi	r24, 0xA2	; 162
     6fa:	93 e0       	ldi	r25, 0x03	; 3
     6fc:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <_ZN7hd447809setCursorEhh>
     700:	c0 90 f0 02 	lds	r12, 0x02F0	; 0x8002f0 <temp>
     704:	d0 90 f1 02 	lds	r13, 0x02F1	; 0x8002f1 <temp+0x1>
     708:	e0 90 f2 02 	lds	r14, 0x02F2	; 0x8002f2 <temp+0x2>
     70c:	f0 90 f3 02 	lds	r15, 0x02F3	; 0x8002f3 <temp+0x3>
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	a9 01       	movw	r20, r18
     716:	c7 01       	movw	r24, r14
     718:	b6 01       	movw	r22, r12
     71a:	0e 94 16 12 	call	0x242c	; 0x242c <__cmpsf2>
     71e:	81 11       	cpse	r24, r1
     720:	03 c0       	rjmp	.+6      	; 0x728 <_Z17printHumidityTempv+0x3c>
     722:	60 e3       	ldi	r22, 0x30	; 48
     724:	71 e0       	ldi	r23, 0x01	; 1
     726:	23 c0       	rjmp	.+70     	; 0x76e <_Z17printHumidityTempv+0x82>
     728:	22 e0       	ldi	r18, 0x02	; 2
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	b7 01       	movw	r22, r14
     72e:	a6 01       	movw	r20, r12
     730:	82 ea       	ldi	r24, 0xA2	; 162
     732:	93 e0       	ldi	r25, 0x03	; 3
     734:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <_ZN5Print5printEdi>
     738:	6f ed       	ldi	r22, 0xDF	; 223
     73a:	82 ea       	ldi	r24, 0xA2	; 162
     73c:	93 e0       	ldi	r25, 0x03	; 3
     73e:	0e 94 9f 13 	call	0x273e	; 0x273e <_ZN5Print5printEc>
     742:	6e e3       	ldi	r22, 0x3E	; 62
     744:	71 e0       	ldi	r23, 0x01	; 1
     746:	82 ea       	ldi	r24, 0xA2	; 162
     748:	93 e0       	ldi	r25, 0x03	; 3
     74a:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN5Print5printEPKc>
     74e:	40 91 ec 02 	lds	r20, 0x02EC	; 0x8002ec <hum>
     752:	50 91 ed 02 	lds	r21, 0x02ED	; 0x8002ed <hum+0x1>
     756:	60 91 ee 02 	lds	r22, 0x02EE	; 0x8002ee <hum+0x2>
     75a:	70 91 ef 02 	lds	r23, 0x02EF	; 0x8002ef <hum+0x3>
     75e:	22 e0       	ldi	r18, 0x02	; 2
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	82 ea       	ldi	r24, 0xA2	; 162
     764:	93 e0       	ldi	r25, 0x03	; 3
     766:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <_ZN5Print5printEdi>
     76a:	63 e4       	ldi	r22, 0x43	; 67
     76c:	71 e0       	ldi	r23, 0x01	; 1
     76e:	82 ea       	ldi	r24, 0xA2	; 162
     770:	93 e0       	ldi	r25, 0x03	; 3
     772:	ff 90       	pop	r15
     774:	ef 90       	pop	r14
     776:	df 90       	pop	r13
     778:	cf 90       	pop	r12
     77a:	0c 94 9d 13 	jmp	0x273a	; 0x273a <_ZN5Print5printEPKc>

0000077e <_Z10homeScreeni>:
     77e:	0f 93       	push	r16
     780:	1f 93       	push	r17
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	ec 01       	movw	r28, r24
     788:	0e 94 b1 19 	call	0x3362	; 0x3362 <millis>
     78c:	00 91 f4 02 	lds	r16, 0x02F4	; 0x8002f4 <readSensor>
     790:	10 91 f5 02 	lds	r17, 0x02F5	; 0x8002f5 <readSensor+0x1>
     794:	20 91 f6 02 	lds	r18, 0x02F6	; 0x8002f6 <readSensor+0x2>
     798:	30 91 f7 02 	lds	r19, 0x02F7	; 0x8002f7 <readSensor+0x3>
     79c:	06 17       	cp	r16, r22
     79e:	17 07       	cpc	r17, r23
     7a0:	28 07       	cpc	r18, r24
     7a2:	39 07       	cpc	r19, r25
     7a4:	b8 f5       	brcc	.+110    	; 0x814 <_Z10homeScreeni+0x96>
     7a6:	66 e1       	ldi	r22, 0x16	; 22
     7a8:	8c ed       	ldi	r24, 0xDC	; 220
     7aa:	92 e0       	ldi	r25, 0x02	; 2
     7ac:	0e 94 05 0c 	call	0x180a	; 0x180a <_ZN3dht4readEh>
     7b0:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <DHT+0x4>
     7b4:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <DHT+0x5>
     7b8:	a0 91 e2 02 	lds	r26, 0x02E2	; 0x8002e2 <DHT+0x6>
     7bc:	b0 91 e3 02 	lds	r27, 0x02E3	; 0x8002e3 <DHT+0x7>
     7c0:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <temp>
     7c4:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <temp+0x1>
     7c8:	a0 93 f2 02 	sts	0x02F2, r26	; 0x8002f2 <temp+0x2>
     7cc:	b0 93 f3 02 	sts	0x02F3, r27	; 0x8002f3 <temp+0x3>
     7d0:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <DHT>
     7d4:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <DHT+0x1>
     7d8:	a0 91 de 02 	lds	r26, 0x02DE	; 0x8002de <DHT+0x2>
     7dc:	b0 91 df 02 	lds	r27, 0x02DF	; 0x8002df <DHT+0x3>
     7e0:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <hum>
     7e4:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <hum+0x1>
     7e8:	a0 93 ee 02 	sts	0x02EE, r26	; 0x8002ee <hum+0x2>
     7ec:	b0 93 ef 02 	sts	0x02EF, r27	; 0x8002ef <hum+0x3>
     7f0:	0e 94 76 03 	call	0x6ec	; 0x6ec <_Z17printHumidityTempv>
     7f4:	0e 94 b1 19 	call	0x3362	; 0x3362 <millis>
     7f8:	dc 01       	movw	r26, r24
     7fa:	cb 01       	movw	r24, r22
     7fc:	88 57       	subi	r24, 0x78	; 120
     7fe:	9c 4e       	sbci	r25, 0xEC	; 236
     800:	af 4f       	sbci	r26, 0xFF	; 255
     802:	bf 4f       	sbci	r27, 0xFF	; 255
     804:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <readSensor>
     808:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <readSensor+0x1>
     80c:	a0 93 f6 02 	sts	0x02F6, r26	; 0x8002f6 <readSensor+0x2>
     810:	b0 93 f7 02 	sts	0x02F7, r27	; 0x8002f7 <readSensor+0x3>
     814:	0e 94 76 03 	call	0x6ec	; 0x6ec <_Z17printHumidityTempv>
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	60 e0       	ldi	r22, 0x00	; 0
     81c:	82 ea       	ldi	r24, 0xA2	; 162
     81e:	93 e0       	ldi	r25, 0x03	; 3
     820:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <_ZN7hd447809setCursorEhh>
     824:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <timeZoneChoosen>
     828:	88 23       	and	r24, r24
     82a:	d9 f0       	breq	.+54     	; 0x862 <_Z10homeScreeni+0xe4>
     82c:	8c ec       	ldi	r24, 0xCC	; 204
     82e:	92 e0       	ldi	r25, 0x02	; 2
     830:	0e 94 b4 02 	call	0x568	; 0x568 <_Z11printhhmmssR4Zeit>
     834:	40 e0       	ldi	r20, 0x00	; 0
     836:	6d e0       	ldi	r22, 0x0D	; 13
     838:	82 ea       	ldi	r24, 0xA2	; 162
     83a:	93 e0       	ldi	r25, 0x03	; 3
     83c:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <_ZN7hd447809setCursorEhh>
     840:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <tz>
     844:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <tz+0x1>
     848:	2e e0       	ldi	r18, 0x0E	; 14
     84a:	28 9f       	mul	r18, r24
     84c:	b0 01       	movw	r22, r0
     84e:	29 9f       	mul	r18, r25
     850:	70 0d       	add	r23, r0
     852:	11 24       	eor	r1, r1
     854:	6e 5f       	subi	r22, 0xFE	; 254
     856:	7c 4f       	sbci	r23, 0xFC	; 252
     858:	82 ea       	ldi	r24, 0xA2	; 162
     85a:	93 e0       	ldi	r25, 0x03	; 3
     85c:	0e 94 8f 13 	call	0x271e	; 0x271e <_ZN5Print5printERK6String>
     860:	04 c0       	rjmp	.+8      	; 0x86a <_Z10homeScreeni+0xec>
     862:	84 ec       	ldi	r24, 0xC4	; 196
     864:	92 e0       	ldi	r25, 0x02	; 2
     866:	0e 94 b4 02 	call	0x568	; 0x568 <_Z11printhhmmssR4Zeit>
     86a:	ce 01       	movw	r24, r28
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	08 95       	ret

00000876 <_Z13calculateTimev>:
     876:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <tz>
     87a:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <tz+0x1>
     87e:	2e e0       	ldi	r18, 0x0E	; 14
     880:	28 9f       	mul	r18, r24
     882:	f0 01       	movw	r30, r0
     884:	29 9f       	mul	r18, r25
     886:	f0 0d       	add	r31, r0
     888:	11 24       	eor	r1, r1
     88a:	e6 50       	subi	r30, 0x06	; 6
     88c:	fd 4f       	sbci	r31, 0xFD	; 253
     88e:	26 81       	ldd	r18, Z+6	; 0x06
     890:	37 81       	ldd	r19, Z+7	; 0x07
     892:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <zeitGMT>
     896:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <zeitGMT+0x1>
     89a:	82 0f       	add	r24, r18
     89c:	93 1f       	adc	r25, r19
     89e:	88 31       	cpi	r24, 0x18	; 24
     8a0:	91 05       	cpc	r25, r1
     8a2:	0c f0       	brlt	.+2      	; 0x8a6 <_Z13calculateTimev+0x30>
     8a4:	48 97       	sbiw	r24, 0x18	; 24
     8a6:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <zeitTimeZone+0x1>
     8aa:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <zeitTimeZone>
     8ae:	20 91 cc 02 	lds	r18, 0x02CC	; 0x8002cc <zeitTimeZone>
     8b2:	30 91 cd 02 	lds	r19, 0x02CD	; 0x8002cd <zeitTimeZone+0x1>
     8b6:	37 ff       	sbrs	r19, 7
     8b8:	08 c0       	rjmp	.+16     	; 0x8ca <_Z13calculateTimev+0x54>
     8ba:	88 e1       	ldi	r24, 0x18	; 24
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	82 1b       	sub	r24, r18
     8c0:	93 0b       	sbc	r25, r19
     8c2:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <zeitTimeZone+0x1>
     8c6:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <zeitTimeZone>
     8ca:	08 95       	ret

000008cc <_Z14changeTimeZonei>:
     8cc:	83 30       	cpi	r24, 0x03	; 3
     8ce:	91 05       	cpc	r25, r1
     8d0:	39 f0       	breq	.+14     	; 0x8e0 <_Z14changeTimeZonei+0x14>
     8d2:	8a 30       	cpi	r24, 0x0A	; 10
     8d4:	91 05       	cpc	r25, r1
     8d6:	21 f0       	breq	.+8      	; 0x8e0 <_Z14changeTimeZonei+0x14>
     8d8:	81 30       	cpi	r24, 0x01	; 1
     8da:	91 05       	cpc	r25, r1
     8dc:	51 f5       	brne	.+84     	; 0x932 <_Z14changeTimeZonei+0x66>
     8de:	17 c0       	rjmp	.+46     	; 0x90e <_Z14changeTimeZonei+0x42>
     8e0:	82 ea       	ldi	r24, 0xA2	; 162
     8e2:	93 e0       	ldi	r25, 0x03	; 3
     8e4:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <_ZN7hd447805clearEv>
     8e8:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <tz>
     8ec:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <tz+0x1>
     8f0:	00 97       	sbiw	r24, 0x00	; 0
     8f2:	19 f4       	brne	.+6      	; 0x8fa <_Z14changeTimeZonei+0x2e>
     8f4:	8b e0       	ldi	r24, 0x0B	; 11
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	01 c0       	rjmp	.+2      	; 0x8fc <_Z14changeTimeZonei+0x30>
     8fa:	01 97       	sbiw	r24, 0x01	; 1
     8fc:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <tz+0x1>
     900:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <tz>
     904:	0e 94 3b 04 	call	0x876	; 0x876 <_Z13calculateTimev>
     908:	8a e0       	ldi	r24, 0x0A	; 10
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	08 95       	ret
     90e:	82 ea       	ldi	r24, 0xA2	; 162
     910:	93 e0       	ldi	r25, 0x03	; 3
     912:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <_ZN7hd447805clearEv>
     916:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <tz>
     91a:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <tz+0x1>
     91e:	8b 30       	cpi	r24, 0x0B	; 11
     920:	91 05       	cpc	r25, r1
     922:	29 f4       	brne	.+10     	; 0x92e <_Z14changeTimeZonei+0x62>
     924:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <tz+0x1>
     928:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <tz>
     92c:	eb cf       	rjmp	.-42     	; 0x904 <_Z14changeTimeZonei+0x38>
     92e:	01 96       	adiw	r24, 0x01	; 1
     930:	e5 cf       	rjmp	.-54     	; 0x8fc <_Z14changeTimeZonei+0x30>
     932:	08 95       	ret

00000934 <_Z11setTimeZonei>:
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	0e 94 66 04 	call	0x8cc	; 0x8cc <_Z14changeTimeZonei>
     93c:	ec 01       	movw	r28, r24
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	82 ea       	ldi	r24, 0xA2	; 162
     944:	93 e0       	ldi	r25, 0x03	; 3
     946:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <_ZN7hd447809setCursorEhh>
     94a:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <tz>
     94e:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <tz+0x1>
     952:	2e e0       	ldi	r18, 0x0E	; 14
     954:	28 9f       	mul	r18, r24
     956:	b0 01       	movw	r22, r0
     958:	29 9f       	mul	r18, r25
     95a:	70 0d       	add	r23, r0
     95c:	11 24       	eor	r1, r1
     95e:	66 50       	subi	r22, 0x06	; 6
     960:	7d 4f       	sbci	r23, 0xFD	; 253
     962:	82 ea       	ldi	r24, 0xA2	; 162
     964:	93 e0       	ldi	r25, 0x03	; 3
     966:	0e 94 8f 13 	call	0x271e	; 0x271e <_ZN5Print5printERK6String>
     96a:	41 e0       	ldi	r20, 0x01	; 1
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	82 ea       	ldi	r24, 0xA2	; 162
     970:	93 e0       	ldi	r25, 0x03	; 3
     972:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <_ZN7hd447809setCursorEhh>
     976:	8c ec       	ldi	r24, 0xCC	; 204
     978:	92 e0       	ldi	r25, 0x02	; 2
     97a:	0e 94 b4 02 	call	0x568	; 0x568 <_Z11printhhmmssR4Zeit>
     97e:	ce 01       	movw	r24, r28
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	08 95       	ret

00000986 <setup>:
 * \return void
 */
void setup()
{
	//LCD konfigurieren
	lcd.begin(16, 2);
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	42 e0       	ldi	r20, 0x02	; 2
     98a:	60 e1       	ldi	r22, 0x10	; 16
     98c:	82 ea       	ldi	r24, 0xA2	; 162
     98e:	93 e0       	ldi	r25, 0x03	; 3
     990:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <_ZN7hd447805beginEhhh>
	lcd.noBacklight();
     994:	82 ea       	ldi	r24, 0xA2	; 162
     996:	93 e0       	ldi	r25, 0x03	; 3
     998:	0e 94 ad 0c 	call	0x195a	; 0x195a <_ZN7hd4478011noBacklightEv>
	lcd.noCursor();
     99c:	82 ea       	ldi	r24, 0xA2	; 162
     99e:	93 e0       	ldi	r25, 0x03	; 3
     9a0:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN7hd447808noCursorEv>
	lcd.home();
     9a4:	82 ea       	ldi	r24, 0xA2	; 162
     9a6:	93 e0       	ldi	r25, 0x03	; 3
     9a8:	0e 94 ef 0c 	call	0x19de	; 0x19de <_ZN7hd447804homeEv>
	lcd.print("Romeo V2.2 Watch");
     9ac:	68 e5       	ldi	r22, 0x58	; 88
     9ae:	71 e0       	ldi	r23, 0x01	; 1
     9b0:	82 ea       	ldi	r24, 0xA2	; 162
     9b2:	93 e0       	ldi	r25, 0x03	; 3
     9b4:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
     9b8:	41 e0       	ldi	r20, 0x01	; 1
     9ba:	60 e0       	ldi	r22, 0x00	; 0
     9bc:	82 ea       	ldi	r24, 0xA2	; 162
     9be:	93 e0       	ldi	r25, 0x03	; 3
     9c0:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <_ZN7hd447809setCursorEhh>
	lcd.print("Coray / Bruno");
     9c4:	69 e6       	ldi	r22, 0x69	; 105
     9c6:	71 e0       	ldi	r23, 0x01	; 1
     9c8:	82 ea       	ldi	r24, 0xA2	; 162
     9ca:	93 e0       	ldi	r25, 0x03	; 3
     9cc:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZN5Print5printEPKc>
	while(millis()<3000);
     9d0:	0e 94 b1 19 	call	0x3362	; 0x3362 <millis>
     9d4:	68 3b       	cpi	r22, 0xB8	; 184
     9d6:	7b 40       	sbci	r23, 0x0B	; 11
     9d8:	81 05       	cpc	r24, r1
     9da:	91 05       	cpc	r25, r1
     9dc:	c8 f3       	brcs	.-14     	; 0x9d0 <setup+0x4a>
	lcd.clear();
     9de:	82 ea       	ldi	r24, 0xA2	; 162
     9e0:	93 e0       	ldi	r25, 0x03	; 3
     9e2:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <_ZN7hd447805clearEv>
	
	zeitTimeZone = zeitGMT;
     9e6:	88 e0       	ldi	r24, 0x08	; 8
     9e8:	e4 ed       	ldi	r30, 0xD4	; 212
     9ea:	f2 e0       	ldi	r31, 0x02	; 2
     9ec:	ac ec       	ldi	r26, 0xCC	; 204
     9ee:	b2 e0       	ldi	r27, 0x02	; 2
     9f0:	01 90       	ld	r0, Z+
     9f2:	0d 92       	st	X+, r0
     9f4:	8a 95       	dec	r24
     9f6:	e1 f7       	brne	.-8      	; 0x9f0 <setup+0x6a>
	
	//Button uns Sensor Pin als input definiert
	pinMode(btnPin, INPUT);
     9f8:	60 e0       	ldi	r22, 0x00	; 0
     9fa:	87 e0       	ldi	r24, 0x07	; 7
     9fc:	0e 94 ed 1a 	call	0x35da	; 0x35da <pinMode>
	pinMode(tempSensor,INPUT);
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	86 e1       	ldi	r24, 0x16	; 22
     a04:	0c 94 ed 1a 	jmp	0x35da	; 0x35da <pinMode>

00000a08 <loop>:
		callibratePointer();
	}
	else
	{
	*/
	Watch();
     a08:	0e 94 72 02 	call	0x4e4	; 0x4e4 <_Z5Watchv>
	input = getkey();
     a0c:	0e 94 17 01 	call	0x22e	; 0x22e <_Z6getkeyv>
     a10:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <_ZL5input+0x1>
     a14:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <_ZL5input>
	if (watchmenu[menu].active) 
     a18:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <_ZL4menu>
     a1c:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     a20:	74 e0       	ldi	r23, 0x04	; 4
     a22:	ee 0f       	add	r30, r30
     a24:	ff 1f       	adc	r31, r31
     a26:	7a 95       	dec	r23
     a28:	e1 f7       	brne	.-8      	; 0xa22 <loop+0x1a>
     a2a:	e0 5e       	subi	r30, 0xE0	; 224
     a2c:	fd 4f       	sbci	r31, 0xFD	; 253
     a2e:	02 84       	ldd	r0, Z+10	; 0x0a
     a30:	f3 85       	ldd	r31, Z+11	; 0x0b
     a32:	e0 2d       	mov	r30, r0
     a34:	30 97       	sbiw	r30, 0x00	; 0
     a36:	29 f0       	breq	.+10     	; 0xa42 <loop+0x3a>
		input = watchmenu[menu].active(input);
     a38:	09 95       	icall
     a3a:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <_ZL5input+0x1>
     a3e:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <_ZL5input>
		//! cyclic call to active function as long as menu n is active
	switch(input) {
     a42:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <_ZL5input>
     a46:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <_ZL5input+0x1>
     a4a:	83 30       	cpi	r24, 0x03	; 3
     a4c:	91 05       	cpc	r25, r1
     a4e:	d9 f1       	breq	.+118    	; 0xac6 <loop+0xbe>
     a50:	34 f4       	brge	.+12     	; 0xa5e <loop+0x56>
     a52:	81 30       	cpi	r24, 0x01	; 1
     a54:	91 05       	cpc	r25, r1
     a56:	79 f0       	breq	.+30     	; 0xa76 <loop+0x6e>
     a58:	02 97       	sbiw	r24, 0x02	; 2
     a5a:	19 f1       	breq	.+70     	; 0xaa2 <loop+0x9a>
     a5c:	09 c0       	rjmp	.+18     	; 0xa70 <loop+0x68>
     a5e:	85 30       	cpi	r24, 0x05	; 5
     a60:	91 05       	cpc	r25, r1
     a62:	09 f4       	brne	.+2      	; 0xa66 <loop+0x5e>
     a64:	65 c0       	rjmp	.+202    	; 0xb30 <__stack+0x31>
     a66:	0c f4       	brge	.+2      	; 0xa6a <loop+0x62>
     a68:	40 c0       	rjmp	.+128    	; 0xaea <loop+0xe2>
     a6a:	06 97       	sbiw	r24, 0x06	; 6
     a6c:	09 f4       	brne	.+2      	; 0xa70 <loop+0x68>
     a6e:	83 c0       	rjmp	.+262    	; 0xb76 <__stack+0x77>
		default:
		case X_KEY:
		case NO_KEY:
		newmenu = -1; // no changes made
     a70:	8f ef       	ldi	r24, 0xFF	; 255
     a72:	9f ef       	ldi	r25, 0xFF	; 255
     a74:	11 c0       	rjmp	.+34     	; 0xa98 <loop+0x90>
		break;
		case UP_KEY:
		lcd.clear();
     a76:	82 ea       	ldi	r24, 0xA2	; 162
     a78:	93 e0       	ldi	r25, 0x03	; 3
     a7a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].up;
     a7e:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <_ZL4menu>
     a82:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     a86:	64 e0       	ldi	r22, 0x04	; 4
     a88:	ee 0f       	add	r30, r30
     a8a:	ff 1f       	adc	r31, r31
     a8c:	6a 95       	dec	r22
     a8e:	e1 f7       	brne	.-8      	; 0xa88 <loop+0x80>
     a90:	e0 5e       	subi	r30, 0xE0	; 224
     a92:	fd 4f       	sbci	r31, 0xFD	; 253
     a94:	80 81       	ld	r24, Z
     a96:	91 81       	ldd	r25, Z+1	; 0x01
     a98:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <_ZL7newmenu+0x1>
     a9c:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <_ZL7newmenu>
		break;
     aa0:	7a c0       	rjmp	.+244    	; 0xb96 <__stack+0x97>
		case LEFT_KEY:
		lcd.clear();
     aa2:	82 ea       	ldi	r24, 0xA2	; 162
     aa4:	93 e0       	ldi	r25, 0x03	; 3
     aa6:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].left;
     aaa:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <_ZL4menu>
     aae:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     ab2:	54 e0       	ldi	r21, 0x04	; 4
     ab4:	ee 0f       	add	r30, r30
     ab6:	ff 1f       	adc	r31, r31
     ab8:	5a 95       	dec	r21
     aba:	e1 f7       	brne	.-8      	; 0xab4 <loop+0xac>
     abc:	e0 5e       	subi	r30, 0xE0	; 224
     abe:	fd 4f       	sbci	r31, 0xFD	; 253
     ac0:	82 81       	ldd	r24, Z+2	; 0x02
     ac2:	93 81       	ldd	r25, Z+3	; 0x03
     ac4:	e9 cf       	rjmp	.-46     	; 0xa98 <loop+0x90>
		break;
		case DOWN_KEY:
		lcd.clear();
     ac6:	82 ea       	ldi	r24, 0xA2	; 162
     ac8:	93 e0       	ldi	r25, 0x03	; 3
     aca:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].down;
     ace:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <_ZL4menu>
     ad2:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     ad6:	44 e0       	ldi	r20, 0x04	; 4
     ad8:	ee 0f       	add	r30, r30
     ada:	ff 1f       	adc	r31, r31
     adc:	4a 95       	dec	r20
     ade:	e1 f7       	brne	.-8      	; 0xad8 <loop+0xd0>
     ae0:	e0 5e       	subi	r30, 0xE0	; 224
     ae2:	fd 4f       	sbci	r31, 0xFD	; 253
     ae4:	84 81       	ldd	r24, Z+4	; 0x04
     ae6:	95 81       	ldd	r25, Z+5	; 0x05
     ae8:	d7 cf       	rjmp	.-82     	; 0xa98 <loop+0x90>
		break;
		case RIGHT_KEY:
		lcd.clear();
     aea:	82 ea       	ldi	r24, 0xA2	; 162
     aec:	93 e0       	ldi	r25, 0x03	; 3
     aee:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <_ZN7hd447805clearEv>
		if(watchmenu[menu].goright != NULL) {
     af2:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <_ZL4menu>
     af6:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     afa:	34 e0       	ldi	r19, 0x04	; 4
     afc:	ee 0f       	add	r30, r30
     afe:	ff 1f       	adc	r31, r31
     b00:	3a 95       	dec	r19
     b02:	e1 f7       	brne	.-8      	; 0xafc <loop+0xf4>
     b04:	e0 5e       	subi	r30, 0xE0	; 224
     b06:	fd 4f       	sbci	r31, 0xFD	; 253
     b08:	04 84       	ldd	r0, Z+12	; 0x0c
     b0a:	f5 85       	ldd	r31, Z+13	; 0x0d
     b0c:	e0 2d       	mov	r30, r0
     b0e:	30 97       	sbiw	r30, 0x00	; 0
     b10:	09 f0       	breq	.+2      	; 0xb14 <__stack+0x15>
			//! call go right function with new value
			watchmenu[menu].goright();
     b12:	09 95       	icall
		}
		newmenu = watchmenu[menu].right;
     b14:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <_ZL4menu>
     b18:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     b1c:	24 e0       	ldi	r18, 0x04	; 4
     b1e:	ee 0f       	add	r30, r30
     b20:	ff 1f       	adc	r31, r31
     b22:	2a 95       	dec	r18
     b24:	e1 f7       	brne	.-8      	; 0xb1e <__stack+0x1f>
     b26:	e0 5e       	subi	r30, 0xE0	; 224
     b28:	fd 4f       	sbci	r31, 0xFD	; 253
     b2a:	86 81       	ldd	r24, Z+6	; 0x06
     b2c:	97 81       	ldd	r25, Z+7	; 0x07
     b2e:	b4 cf       	rjmp	.-152    	; 0xa98 <loop+0x90>
		break;
		case OK_KEY:
		lcd.clear();
     b30:	82 ea       	ldi	r24, 0xA2	; 162
     b32:	93 e0       	ldi	r25, 0x03	; 3
     b34:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <_ZN7hd447805clearEv>
		if(watchmenu[menu].positive != NULL) {
     b38:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <_ZL4menu>
     b3c:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     b40:	94 e0       	ldi	r25, 0x04	; 4
     b42:	ee 0f       	add	r30, r30
     b44:	ff 1f       	adc	r31, r31
     b46:	9a 95       	dec	r25
     b48:	e1 f7       	brne	.-8      	; 0xb42 <__stack+0x43>
     b4a:	e0 5e       	subi	r30, 0xE0	; 224
     b4c:	fd 4f       	sbci	r31, 0xFD	; 253
     b4e:	06 84       	ldd	r0, Z+14	; 0x0e
     b50:	f7 85       	ldd	r31, Z+15	; 0x0f
     b52:	e0 2d       	mov	r30, r0
     b54:	30 97       	sbiw	r30, 0x00	; 0
     b56:	09 f0       	breq	.+2      	; 0xb5a <__stack+0x5b>
			//! call positive answer function with new value
			watchmenu[menu].positive();
     b58:	09 95       	icall
		}
		newmenu = watchmenu[menu].ok;
     b5a:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <_ZL4menu>
     b5e:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <_ZL4menu+0x1>
     b62:	84 e0       	ldi	r24, 0x04	; 4
     b64:	ee 0f       	add	r30, r30
     b66:	ff 1f       	adc	r31, r31
     b68:	8a 95       	dec	r24
     b6a:	e1 f7       	brne	.-8      	; 0xb64 <__stack+0x65>
     b6c:	e0 5e       	subi	r30, 0xE0	; 224
     b6e:	fd 4f       	sbci	r31, 0xFD	; 253
     b70:	80 85       	ldd	r24, Z+8	; 0x08
     b72:	91 85       	ldd	r25, Z+9	; 0x09
     b74:	91 cf       	rjmp	.-222    	; 0xa98 <loop+0x90>
		break;
		case BK_KEY:
		lcd.clear();
     b76:	82 ea       	ldi	r24, 0xA2	; 162
     b78:	93 e0       	ldi	r25, 0x03	; 3
     b7a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <_ZN7hd447805clearEv>
		lcd.noCursor();
     b7e:	82 ea       	ldi	r24, 0xA2	; 162
     b80:	93 e0       	ldi	r25, 0x03	; 3
     b82:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <_ZN7hd447808noCursorEv>
		lcd.noBlink();
     b86:	82 ea       	ldi	r24, 0xA2	; 162
     b88:	93 e0       	ldi	r25, 0x03	; 3
     b8a:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <_ZN7hd447807noBlinkEv>
		newmenu = 0;
     b8e:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <_ZL7newmenu+0x1>
     b92:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <_ZL7newmenu>
		break;
	}
	if(newmenu >= 0) menu = newmenu;
     b96:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <_ZL7newmenu>
     b9a:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <_ZL7newmenu+0x1>
     b9e:	97 fd       	sbrc	r25, 7
     ba0:	04 c0       	rjmp	.+8      	; 0xbaa <__stack+0xab>
     ba2:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <_ZL4menu+0x1>
     ba6:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <_ZL4menu>
     baa:	08 95       	ret

00000bac <_GLOBAL__sub_I_lcd>:

	//} //else Klammer
}
     bac:	af 92       	push	r10
     bae:	bf 92       	push	r11
     bb0:	cf 92       	push	r12
     bb2:	df 92       	push	r13
     bb4:	ef 92       	push	r14
     bb6:	ff 92       	push	r15
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
// ====================

//	-- Automagic / auto-detect constructors --

// Auto find next instance and auto config pin mapping
hd44780_I2Cexp(){ _addr = 0; _expType = I2Cexp_UNKNOWN;}
     bc0:	82 ea       	ldi	r24, 0xA2	; 162
     bc2:	93 e0       	ldi	r25, 0x03	; 3
     bc4:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_ZN7hd44780C1Ev>
     bc8:	e2 ea       	ldi	r30, 0xA2	; 162
     bca:	f3 e0       	ldi	r31, 0x03	; 3
     bcc:	8e e0       	ldi	r24, 0x0E	; 14
     bce:	92 e0       	ldi	r25, 0x02	; 2
     bd0:	91 83       	std	Z+1, r25	; 0x01
     bd2:	80 83       	st	Z, r24
     bd4:	10 a2       	std	Z+32, r1	; 0x20
     bd6:	11 a2       	std	Z+33, r1	; 0x21

const struct CITY_TIME_DIF CITIES [] {
	{"London", 0, "LON"},{"New-York", -5, "NEY"},{"Paris", 1, "PAR"},{ "Tokyo", 9, "TOK"},
	{"Hongkong", 8, "HNK"},{"Los Angeles", -8, "LAN"},{"Chicago", -6, "CHI"},{"Seoul", 9, "SEO"},
	{ "Bruessel",  1, "BRU"},{"Washington",  -5, "WAS"},{"Singapur", 8, "SIN"},{"Sydney", 11, "SYD"}
	};
     bd8:	67 e7       	ldi	r22, 0x77	; 119
     bda:	71 e0       	ldi	r23, 0x01	; 1
     bdc:	8a ef       	ldi	r24, 0xFA	; 250
     bde:	92 e0       	ldi	r25, 0x02	; 2
     be0:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN6StringC1EPKc>
     be4:	ca ef       	ldi	r28, 0xFA	; 250
     be6:	d2 e0       	ldi	r29, 0x02	; 2
     be8:	1f 82       	std	Y+7, r1	; 0x07
     bea:	1e 82       	std	Y+6, r1	; 0x06
     bec:	6e e7       	ldi	r22, 0x7E	; 126
     bee:	71 e0       	ldi	r23, 0x01	; 1
     bf0:	82 e0       	ldi	r24, 0x02	; 2
     bf2:	93 e0       	ldi	r25, 0x03	; 3
     bf4:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN6StringC1EPKc>
     bf8:	62 e8       	ldi	r22, 0x82	; 130
     bfa:	71 e0       	ldi	r23, 0x01	; 1
     bfc:	88 e0       	ldi	r24, 0x08	; 8
     bfe:	93 e0       	ldi	r25, 0x03	; 3
     c00:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN6StringC1EPKc>
     c04:	8b ef       	ldi	r24, 0xFB	; 251
     c06:	a8 2e       	mov	r10, r24
     c08:	bb 24       	eor	r11, r11
     c0a:	ba 94       	dec	r11
     c0c:	bd 8a       	std	Y+21, r11	; 0x15
     c0e:	ac 8a       	std	Y+20, r10	; 0x14
     c10:	6b e8       	ldi	r22, 0x8B	; 139
     c12:	71 e0       	ldi	r23, 0x01	; 1
     c14:	80 e1       	ldi	r24, 0x10	; 16
     c16:	93 e0       	ldi	r25, 0x03	; 3
     c18:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN6StringC1EPKc>
     c1c:	6f e8       	ldi	r22, 0x8F	; 143
     c1e:	71 e0       	ldi	r23, 0x01	; 1
     c20:	86 e1       	ldi	r24, 0x16	; 22
     c22:	93 e0       	ldi	r25, 0x03	; 3
     c24:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN6StringC1EPKc>
     c28:	ee 24       	eor	r14, r14
     c2a:	e3 94       	inc	r14
     c2c:	f1 2c       	mov	r15, r1
     c2e:	fb a2       	std	Y+35, r15	; 0x23
     c30:	ea a2       	std	Y+34, r14	; 0x22
     c32:	65 e9       	ldi	r22, 0x95	; 149
     c34:	71 e0       	ldi	r23, 0x01	; 1
     c36:	8e e1       	ldi	r24, 0x1E	; 30
     c38:	93 e0       	ldi	r25, 0x03	; 3
     c3a:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN6StringC1EPKc>
     c3e:	69 e9       	ldi	r22, 0x99	; 153
     c40:	71 e0       	ldi	r23, 0x01	; 1
     c42:	84 e2       	ldi	r24, 0x24	; 36
     c44:	93 e0       	ldi	r25, 0x03	; 3
     c46:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN6StringC1EPKc>
     c4a:	09 e0       	ldi	r16, 0x09	; 9
     c4c:	10 e0       	ldi	r17, 0x00	; 0
     c4e:	19 ab       	std	Y+49, r17	; 0x31
     c50:	08 ab       	std	Y+48, r16	; 0x30
     c52:	6f e9       	ldi	r22, 0x9F	; 159
     c54:	71 e0       	ldi	r23, 0x01	; 1
     c56:	8c e2       	ldi	r24, 0x2C	; 44
     c58:	93 e0       	ldi	r25, 0x03	; 3
     c5a:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN6StringC1EPKc>
     c5e:	63 ea       	ldi	r22, 0xA3	; 163
     c60:	71 e0       	ldi	r23, 0x01	; 1
     c62:	82 e3       	ldi	r24, 0x32	; 50
     c64:	93 e0       	ldi	r25, 0x03	; 3
     c66:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN6StringC1EPKc>
     c6a:	28 e0       	ldi	r18, 0x08	; 8
     c6c:	c2 2e       	mov	r12, r18
     c6e:	d1 2c       	mov	r13, r1
     c70:	df ae       	std	Y+63, r13	; 0x3f
     c72:	ce ae       	std	Y+62, r12	; 0x3e
     c74:	6c ea       	ldi	r22, 0xAC	; 172
     c76:	71 e0       	ldi	r23, 0x01	; 1
     c78:	8a e3       	ldi	r24, 0x3A	; 58
     c7a:	93 e0       	ldi	r25, 0x03	; 3
     c7c:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN6StringC1EPKc>
     c80:	60 eb       	ldi	r22, 0xB0	; 176
     c82:	71 e0       	ldi	r23, 0x01	; 1
     c84:	80 e4       	ldi	r24, 0x40	; 64
     c86:	93 e0       	ldi	r25, 0x03	; 3
     c88:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN6StringC1EPKc>
     c8c:	88 ef       	ldi	r24, 0xF8	; 248
     c8e:	9f ef       	ldi	r25, 0xFF	; 255
     c90:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <_ZL6CITIES+0x4d>
     c94:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <_ZL6CITIES+0x4c>
     c98:	6c eb       	ldi	r22, 0xBC	; 188
     c9a:	71 e0       	ldi	r23, 0x01	; 1
     c9c:	88 e4       	ldi	r24, 0x48	; 72
     c9e:	93 e0       	ldi	r25, 0x03	; 3
     ca0:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN6StringC1EPKc>
     ca4:	60 ec       	ldi	r22, 0xC0	; 192
     ca6:	71 e0       	ldi	r23, 0x01	; 1
     ca8:	8e e4       	ldi	r24, 0x4E	; 78
     caa:	93 e0       	ldi	r25, 0x03	; 3
     cac:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN6StringC1EPKc>
     cb0:	8a ef       	ldi	r24, 0xFA	; 250
     cb2:	9f ef       	ldi	r25, 0xFF	; 255
     cb4:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <_ZL6CITIES+0x5b>
     cb8:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <_ZL6CITIES+0x5a>
     cbc:	68 ec       	ldi	r22, 0xC8	; 200
     cbe:	71 e0       	ldi	r23, 0x01	; 1
     cc0:	86 e5       	ldi	r24, 0x56	; 86
     cc2:	93 e0       	ldi	r25, 0x03	; 3
     cc4:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN6StringC1EPKc>
     cc8:	6c ec       	ldi	r22, 0xCC	; 204
     cca:	71 e0       	ldi	r23, 0x01	; 1
     ccc:	8c e5       	ldi	r24, 0x5C	; 92
     cce:	93 e0       	ldi	r25, 0x03	; 3
     cd0:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN6StringC1EPKc>
     cd4:	10 93 63 03 	sts	0x0363, r17	; 0x800363 <_ZL6CITIES+0x69>
     cd8:	00 93 62 03 	sts	0x0362, r16	; 0x800362 <_ZL6CITIES+0x68>
     cdc:	62 ed       	ldi	r22, 0xD2	; 210
     cde:	71 e0       	ldi	r23, 0x01	; 1
     ce0:	84 e6       	ldi	r24, 0x64	; 100
     ce2:	93 e0       	ldi	r25, 0x03	; 3
     ce4:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN6StringC1EPKc>
     ce8:	66 ed       	ldi	r22, 0xD6	; 214
     cea:	71 e0       	ldi	r23, 0x01	; 1
     cec:	8a e6       	ldi	r24, 0x6A	; 106
     cee:	93 e0       	ldi	r25, 0x03	; 3
     cf0:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN6StringC1EPKc>
     cf4:	f0 92 71 03 	sts	0x0371, r15	; 0x800371 <_ZL6CITIES+0x77>
     cf8:	e0 92 70 03 	sts	0x0370, r14	; 0x800370 <_ZL6CITIES+0x76>
     cfc:	6f ed       	ldi	r22, 0xDF	; 223
     cfe:	71 e0       	ldi	r23, 0x01	; 1
     d00:	82 e7       	ldi	r24, 0x72	; 114
     d02:	93 e0       	ldi	r25, 0x03	; 3
     d04:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN6StringC1EPKc>
     d08:	63 ee       	ldi	r22, 0xE3	; 227
     d0a:	71 e0       	ldi	r23, 0x01	; 1
     d0c:	88 e7       	ldi	r24, 0x78	; 120
     d0e:	93 e0       	ldi	r25, 0x03	; 3
     d10:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN6StringC1EPKc>
     d14:	b0 92 7f 03 	sts	0x037F, r11	; 0x80037f <_ZL6CITIES+0x85>
     d18:	a0 92 7e 03 	sts	0x037E, r10	; 0x80037e <_ZL6CITIES+0x84>
     d1c:	6e ee       	ldi	r22, 0xEE	; 238
     d1e:	71 e0       	ldi	r23, 0x01	; 1
     d20:	80 e8       	ldi	r24, 0x80	; 128
     d22:	93 e0       	ldi	r25, 0x03	; 3
     d24:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN6StringC1EPKc>
     d28:	62 ef       	ldi	r22, 0xF2	; 242
     d2a:	71 e0       	ldi	r23, 0x01	; 1
     d2c:	86 e8       	ldi	r24, 0x86	; 134
     d2e:	93 e0       	ldi	r25, 0x03	; 3
     d30:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN6StringC1EPKc>
     d34:	d0 92 8d 03 	sts	0x038D, r13	; 0x80038d <_ZL6CITIES+0x93>
     d38:	c0 92 8c 03 	sts	0x038C, r12	; 0x80038c <_ZL6CITIES+0x92>
     d3c:	6b ef       	ldi	r22, 0xFB	; 251
     d3e:	71 e0       	ldi	r23, 0x01	; 1
     d40:	8e e8       	ldi	r24, 0x8E	; 142
     d42:	93 e0       	ldi	r25, 0x03	; 3
     d44:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN6StringC1EPKc>
     d48:	6f ef       	ldi	r22, 0xFF	; 255
     d4a:	71 e0       	ldi	r23, 0x01	; 1
     d4c:	84 e9       	ldi	r24, 0x94	; 148
     d4e:	93 e0       	ldi	r25, 0x03	; 3
     d50:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN6StringC1EPKc>
     d54:	8b e0       	ldi	r24, 0x0B	; 11
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <_ZL6CITIES+0xa1>
     d5c:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <_ZL6CITIES+0xa0>
     d60:	66 e0       	ldi	r22, 0x06	; 6
     d62:	72 e0       	ldi	r23, 0x02	; 2
     d64:	8c e9       	ldi	r24, 0x9C	; 156
     d66:	93 e0       	ldi	r25, 0x03	; 3
     d68:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN6StringC1EPKc>
#endif

class dht
{
public:
    dht() { _disableIRQ = false; };
     d6c:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <DHT+0xd>
	int hh_;
	int mm_;
	int ss_;
	int set_;
public:
	Zeit(int h, int m, int s){ hh_=h; mm_=m; ss_=s; set_ =0;};
     d70:	e4 ed       	ldi	r30, 0xD4	; 212
     d72:	f2 e0       	ldi	r31, 0x02	; 2
     d74:	85 e1       	ldi	r24, 0x15	; 21
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	91 83       	std	Z+1, r25	; 0x01
     d7a:	80 83       	st	Z, r24
     d7c:	8f e1       	ldi	r24, 0x1F	; 31
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	93 83       	std	Z+3, r25	; 0x03
     d82:	82 83       	std	Z+2, r24	; 0x02
     d84:	15 82       	std	Z+5, r1	; 0x05
     d86:	14 82       	std	Z+4, r1	; 0x04
     d88:	17 82       	std	Z+7, r1	; 0x07
     d8a:	16 82       	std	Z+6, r1	; 0x06
     d8c:	ec ec       	ldi	r30, 0xCC	; 204
     d8e:	f2 e0       	ldi	r31, 0x02	; 2
     d90:	2c e0       	ldi	r18, 0x0C	; 12
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	31 83       	std	Z+1, r19	; 0x01
     d96:	20 83       	st	Z, r18
     d98:	13 82       	std	Z+3, r1	; 0x03
     d9a:	12 82       	std	Z+2, r1	; 0x02
     d9c:	15 82       	std	Z+5, r1	; 0x05
     d9e:	14 82       	std	Z+4, r1	; 0x04
     da0:	17 82       	std	Z+7, r1	; 0x07
     da2:	16 82       	std	Z+6, r1	; 0x06
     da4:	e4 ec       	ldi	r30, 0xC4	; 196
     da6:	f2 e0       	ldi	r31, 0x02	; 2
     da8:	46 e1       	ldi	r20, 0x16	; 22
     daa:	50 e0       	ldi	r21, 0x00	; 0
     dac:	51 83       	std	Z+1, r21	; 0x01
     dae:	40 83       	st	Z, r20
     db0:	93 83       	std	Z+3, r25	; 0x03
     db2:	82 83       	std	Z+2, r24	; 0x02
     db4:	15 82       	std	Z+5, r1	; 0x05
     db6:	14 82       	std	Z+4, r1	; 0x04
     db8:	17 82       	std	Z+7, r1	; 0x07
     dba:	16 82       	std	Z+6, r1	; 0x06
	int YYYY_;
	int MM_;
	int DD_;
	int set_;
public:
	Datum(int d, int m, int y){DD_=d; MM_=m;YYYY_=y; set_ = 0;};
     dbc:	ec eb       	ldi	r30, 0xBC	; 188
     dbe:	f2 e0       	ldi	r31, 0x02	; 2
     dc0:	8a e0       	ldi	r24, 0x0A	; 10
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	95 83       	std	Z+5, r25	; 0x05
     dc6:	84 83       	std	Z+4, r24	; 0x04
     dc8:	33 83       	std	Z+3, r19	; 0x03
     dca:	22 83       	std	Z+2, r18	; 0x02
     dcc:	23 ee       	ldi	r18, 0xE3	; 227
     dce:	37 e0       	ldi	r19, 0x07	; 7
     dd0:	31 83       	std	Z+1, r19	; 0x01
     dd2:	20 83       	st	Z, r18
     dd4:	17 82       	std	Z+7, r1	; 0x07
     dd6:	16 82       	std	Z+6, r1	; 0x06
     dd8:	e4 eb       	ldi	r30, 0xB4	; 180
     dda:	f2 e0       	ldi	r31, 0x02	; 2
     ddc:	f5 82       	std	Z+5, r15	; 0x05
     dde:	e4 82       	std	Z+4, r14	; 0x04
     de0:	13 83       	std	Z+3, r17	; 0x03
     de2:	02 83       	std	Z+2, r16	; 0x02
     de4:	20 ed       	ldi	r18, 0xD0	; 208
     de6:	37 e0       	ldi	r19, 0x07	; 7
     de8:	31 83       	std	Z+1, r19	; 0x01
     dea:	20 83       	st	Z, r18
     dec:	17 82       	std	Z+7, r1	; 0x07
     dee:	16 82       	std	Z+6, r1	; 0x06
     df0:	ec ea       	ldi	r30, 0xAC	; 172
     df2:	f2 e0       	ldi	r31, 0x02	; 2
     df4:	2f e0       	ldi	r18, 0x0F	; 15
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	35 83       	std	Z+5, r19	; 0x05
     dfa:	24 83       	std	Z+4, r18	; 0x04
     dfc:	93 83       	std	Z+3, r25	; 0x03
     dfe:	82 83       	std	Z+2, r24	; 0x02
     e00:	8b ec       	ldi	r24, 0xCB	; 203
     e02:	97 e0       	ldi	r25, 0x07	; 7
     e04:	91 83       	std	Z+1, r25	; 0x01
     e06:	80 83       	st	Z, r24
     e08:	17 82       	std	Z+7, r1	; 0x07
     e0a:	16 82       	std	Z+6, r1	; 0x06
		break;
	}
	if(newmenu >= 0) menu = newmenu;

	//} //else Klammer
}
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	ff 90       	pop	r15
     e16:	ef 90       	pop	r14
     e18:	df 90       	pop	r13
     e1a:	cf 90       	pop	r12
     e1c:	bf 90       	pop	r11
     e1e:	af 90       	pop	r10
     e20:	08 95       	ret

00000e22 <_GLOBAL__sub_D_lcd>:
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	c2 ea       	ldi	r28, 0xA2	; 162
     e28:	d3 e0       	ldi	r29, 0x03	; 3
	String name;
	int timediff;
	String initials;
};

const struct CITY_TIME_DIF CITIES [] {
     e2a:	2e 97       	sbiw	r28, 0x0e	; 14


hd44780_I2Cexp lcd;

//Strukt um Städte und deren Zweitverschiebung zu GMT (London)
struct CITY_TIME_DIF {
     e2c:	ce 01       	movw	r24, r28
     e2e:	08 96       	adiw	r24, 0x08	; 8
     e30:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN6StringD1Ev>
     e34:	ce 01       	movw	r24, r28
     e36:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN6StringD1Ev>
	String name;
	int timediff;
	String initials;
};

const struct CITY_TIME_DIF CITIES [] {
     e3a:	82 e0       	ldi	r24, 0x02	; 2
     e3c:	ca 3f       	cpi	r28, 0xFA	; 250
     e3e:	d8 07       	cpc	r29, r24
     e40:	a1 f7       	brne	.-24     	; 0xe2a <_GLOBAL__sub_D_lcd+0x8>
		break;
	}
	if(newmenu >= 0) menu = newmenu;

	//} //else Klammer
}
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	08 95       	ret

00000e48 <_ZN14hd44780_I2Cexp14iosetBacklightEh>:
}

// iosetBacklight()  - set backlight brightness
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	fc 01       	movw	r30, r24
{
	if(!_bl) // backlight control?
     e4e:	81 a5       	ldd	r24, Z+41	; 0x29
     e50:	88 23       	and	r24, r24
     e52:	71 f1       	breq	.+92     	; 0xeb0 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x68>
     e54:	92 a5       	ldd	r25, Z+42	; 0x2a
		return(hd44780::RV_ENOTSUP); // not backlight control support

	// dimvalue 0 is backlight off any other dimvalue is backlight on
	// configure backlight state mask according to active level
	if(((dimvalue) && (_blLevel == HIGH)) || 
     e56:	66 23       	and	r22, r22
     e58:	19 f0       	breq	.+6      	; 0xe60 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x18>
     e5a:	91 30       	cpi	r25, 0x01	; 1
     e5c:	29 f4       	brne	.+10     	; 0xe68 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x1c>
			((dimvalue == 0) && (_blLevel == LOW)))
     e60:	91 11       	cpse	r25, r1
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
	{
		_blCurState = _bl;
     e64:	83 a7       	std	Z+43, r24	; 0x2b
     e66:	01 c0       	rjmp	.+2      	; 0xe6a <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x22>
	}
	else 
	{
		_blCurState = 0;
     e68:	13 a6       	std	Z+43, r1	; 0x2b
     e6a:	ef 01       	movw	r28, r30
	}
	Wire.beginTransmission(_addr);
     e6c:	60 a1       	ldd	r22, Z+32	; 0x20
     e6e:	8d e3       	ldi	r24, 0x3D	; 61
     e70:	94 e0       	ldi	r25, 0x04	; 4
     e72:	0e 94 1e 11 	call	0x223c	; 0x223c <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
     e76:	89 a1       	ldd	r24, Y+33	; 0x21
     e78:	82 30       	cpi	r24, 0x02	; 2
     e7a:	31 f4       	brne	.+12     	; 0xe88 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x40>
	{
		Wire.write(9); // point to GPIO
     e7c:	69 e0       	ldi	r22, 0x09	; 9
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	8d e3       	ldi	r24, 0x3D	; 61
     e82:	94 e0       	ldi	r25, 0x04	; 4
     e84:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
	}
	Wire.write( _blCurState );
     e88:	6b a5       	ldd	r22, Y+43	; 0x2b
     e8a:	8d e3       	ldi	r24, 0x3D	; 61
     e8c:	94 e0       	ldi	r25, 0x04	; 4
     e8e:	0e 94 cd 10 	call	0x219a	; 0x219a <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     e92:	8d e3       	ldi	r24, 0x3D	; 61
     e94:	94 e0       	ldi	r25, 0x04	; 4
     e96:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7TwoWire15endTransmissionEv>
     e9a:	21 e0       	ldi	r18, 0x01	; 1
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 11       	cpse	r24, r1
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x5e>
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	88 27       	eor	r24, r24
     ea8:	99 27       	eor	r25, r25
     eaa:	82 1b       	sub	r24, r18
     eac:	93 0b       	sbc	r25, r19
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x6c>
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
{
	if(!_bl) // backlight control?
		return(hd44780::RV_ENOTSUP); // not backlight control support
     eb0:	8d ef       	ldi	r24, 0xFD	; 253
     eb2:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write( _blCurState );
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR); // all is good
}
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	08 95       	ret

00000eba <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>:
	return(0);
}


// write4bits - send a nibble to the LCD through i/o expander port
void write4bits(uint8_t value, hd44780::iotype type ) 
     eba:	cf 93       	push	r28
     ebc:	fc 01       	movw	r30, r24
{
uint8_t gpioValue =  _blCurState;
     ebe:	c3 a5       	ldd	r28, Z+43	; 0x2b
   
	// convert the value to an i/o expander port value
	// based on pin mappings
	if(value & (1 << 0))
     ec0:	60 ff       	sbrs	r22, 0
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0xe>
		gpioValue |= _d4;
     ec4:	85 a1       	ldd	r24, Z+37	; 0x25
     ec6:	c8 2b       	or	r28, r24

	if(value & (1 << 1))
     ec8:	61 ff       	sbrs	r22, 1
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x16>
		gpioValue |= _d5;
     ecc:	86 a1       	ldd	r24, Z+38	; 0x26
     ece:	c8 2b       	or	r28, r24

	if(value & (1 << 2))
     ed0:	62 ff       	sbrs	r22, 2
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x1e>
		gpioValue |= _d6;
     ed4:	87 a1       	ldd	r24, Z+39	; 0x27
     ed6:	c8 2b       	or	r28, r24

	if(value & (1 << 3))
     ed8:	63 ff       	sbrs	r22, 3
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x26>
		gpioValue |= _d7;
     edc:	80 a5       	ldd	r24, Z+40	; 0x28
     ede:	c8 2b       	or	r28, r24


	if(type == hd44780::HD44780_IOdata) 
     ee0:	41 30       	cpi	r20, 0x01	; 1
     ee2:	11 f4       	brne	.+4      	; 0xee8 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x2e>
	{
		gpioValue |= _rs; // set RS high to send to data reg
     ee4:	82 a1       	ldd	r24, Z+34	; 0x22
     ee6:	c8 2b       	or	r28, r24
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
     ee8:	64 a1       	ldd	r22, Z+36	; 0x24
     eea:	6c 2b       	or	r22, r28
     eec:	70 e0       	ldi	r23, 0x00	; 0
     eee:	8d e3       	ldi	r24, 0x3D	; 61
     ef0:	94 e0       	ldi	r25, 0x04	; 4
     ef2:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
	Wire.write(gpioValue);		// with E LOW
     ef6:	6c 2f       	mov	r22, r28
     ef8:	8d e3       	ldi	r24, 0x3D	; 61
     efa:	94 e0       	ldi	r25, 0x04	; 4
}
     efc:	cf 91       	pop	r28
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
	Wire.write(gpioValue);		// with E LOW
     efe:	0c 94 cd 10 	jmp	0x219a	; 0x219a <_ZN7TwoWire5writeEh>

00000f02 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh>:
	return(rval);
}

// iowrite(type, value) - send either command or data byte to lcd
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
     f02:	8f 92       	push	r8
     f04:	9f 92       	push	r9
     f06:	af 92       	push	r10
     f08:	bf 92       	push	r11
     f0a:	cf 92       	push	r12
     f0c:	df 92       	push	r13
     f0e:	ef 92       	push	r14
     f10:	ff 92       	push	r15
     f12:	0f 93       	push	r16
     f14:	1f 93       	push	r17
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	ec 01       	movw	r28, r24
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
     f1c:	88 a1       	ldd	r24, Y+32	; 0x20
     f1e:	88 23       	and	r24, r24
     f20:	09 f4       	brne	.+2      	; 0xf24 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x22>
     f22:	50 c0       	rjmp	.+160    	; 0xfc4 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
     f24:	89 a1       	ldd	r24, Y+33	; 0x21
     f26:	88 23       	and	r24, r24
     f28:	09 f4       	brne	.+2      	; 0xf2c <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x2a>
     f2a:	4c c0       	rjmp	.+152    	; 0xfc4 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
     f2c:	14 2f       	mov	r17, r20
     f2e:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
     f30:	8c 8c       	ldd	r8, Y+28	; 0x1c
     f32:	9d 8c       	ldd	r9, Y+29	; 0x1d
     f34:	ae 8c       	ldd	r10, Y+30	; 0x1e
     f36:	bf 8c       	ldd	r11, Y+31	; 0x1f
     f38:	c8 8c       	ldd	r12, Y+24	; 0x18
     f3a:	d9 8c       	ldd	r13, Y+25	; 0x19
     f3c:	ea 8c       	ldd	r14, Y+26	; 0x1a
     f3e:	fb 8c       	ldd	r15, Y+27	; 0x1b
     f40:	8d e2       	ldi	r24, 0x2D	; 45
     f42:	c8 1a       	sub	r12, r24
     f44:	d1 08       	sbc	r13, r1
     f46:	e1 08       	sbc	r14, r1
     f48:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
     f4a:	0e 94 bd 19 	call	0x337a	; 0x337a <micros>
     f4e:	dc 01       	movw	r26, r24
     f50:	cb 01       	movw	r24, r22
     f52:	8c 19       	sub	r24, r12
     f54:	9d 09       	sbc	r25, r13
     f56:	ae 09       	sbc	r26, r14
     f58:	bf 09       	sbc	r27, r15
     f5a:	88 15       	cp	r24, r8
     f5c:	99 05       	cpc	r25, r9
     f5e:	aa 05       	cpc	r26, r10
     f60:	bb 05       	cpc	r27, r11
     f62:	98 f3       	brcs	.-26     	; 0xf4a <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x48>
	 */

	waitReady(-45);
   
	// grab i2c bus
	Wire.beginTransmission(_addr);
     f64:	68 a1       	ldd	r22, Y+32	; 0x20
     f66:	8d e3       	ldi	r24, 0x3D	; 61
     f68:	94 e0       	ldi	r25, 0x04	; 4
     f6a:	0e 94 1e 11 	call	0x223c	; 0x223c <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
     f6e:	89 a1       	ldd	r24, Y+33	; 0x21
     f70:	82 30       	cpi	r24, 0x02	; 2
     f72:	31 f4       	brne	.+12     	; 0xf80 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x7e>
	{
		Wire.write(9); // point to GPIO
     f74:	69 e0       	ldi	r22, 0x09	; 9
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	8d e3       	ldi	r24, 0x3D	; 61
     f7a:	94 e0       	ldi	r25, 0x04	; 4
     f7c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
	}
	// send both nibbles in same i2c connection
	write4bits( (value >> 4), type );  // send upper nibble
     f80:	61 2f       	mov	r22, r17
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	84 e0       	ldi	r24, 0x04	; 4
     f86:	75 95       	asr	r23
     f88:	67 95       	ror	r22
     f8a:	8a 95       	dec	r24
     f8c:	e1 f7       	brne	.-8      	; 0xf86 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x84>
     f8e:	40 2f       	mov	r20, r16
     f90:	ce 01       	movw	r24, r28
     f92:	0e 94 5d 07 	call	0xeba	; 0xeba <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	 * are used to reliably get the LCD and host in nibble sync
	 * with each other and to get the LCD into 4 bit mode.
	 * When sending a "4 bit command" only the upper nibble of
	 * of the 8 bit byte will presented on LCD signals D4-D7.
	 */
	if(type != hd44780::HD44780_IOcmd4bit)
     f96:	02 30       	cpi	r16, 0x02	; 2
     f98:	31 f0       	breq	.+12     	; 0xfa6 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xa4>
	{
		write4bits( (value & 0x0F), type); // lower nibble, if not 4bit cmd
     f9a:	61 2f       	mov	r22, r17
     f9c:	6f 70       	andi	r22, 0x0F	; 15
     f9e:	40 2f       	mov	r20, r16
     fa0:	ce 01       	movw	r24, r28
     fa2:	0e 94 5d 07 	call	0xeba	; 0xeba <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	}
	if(Wire.endTransmission())
     fa6:	8d e3       	ldi	r24, 0x3D	; 61
     fa8:	94 e0       	ldi	r25, 0x04	; 4
     faa:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7TwoWire15endTransmissionEv>
     fae:	21 e0       	ldi	r18, 0x01	; 1
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 11       	cpse	r24, r1
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xb8>
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	88 27       	eor	r24, r24
     fbc:	99 27       	eor	r25, r25
     fbe:	82 1b       	sub	r24, r18
     fc0:	93 0b       	sbc	r25, r19
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc6>
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
     fc4:	8c ef       	ldi	r24, 0xFC	; 252
     fc6:	9f ef       	ldi	r25, 0xFF	; 255
	}
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR);
}
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	1f 91       	pop	r17
     fce:	0f 91       	pop	r16
     fd0:	ff 90       	pop	r15
     fd2:	ef 90       	pop	r14
     fd4:	df 90       	pop	r13
     fd6:	cf 90       	pop	r12
     fd8:	bf 90       	pop	r11
     fda:	af 90       	pop	r10
     fdc:	9f 90       	pop	r9
     fde:	8f 90       	pop	r8
     fe0:	08 95       	ret

00000fe2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE>:
// ioread(type) - read a byte from LCD DDRAM
//
// returns:
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
     fe2:	8f 92       	push	r8
     fe4:	9f 92       	push	r9
     fe6:	af 92       	push	r10
     fe8:	bf 92       	push	r11
     fea:	cf 92       	push	r12
     fec:	df 92       	push	r13
     fee:	ef 92       	push	r14
     ff0:	ff 92       	push	r15
     ff2:	0f 93       	push	r16
     ff4:	1f 93       	push	r17
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	ec 01       	movw	r28, r24
{
uint8_t gpioValue =  _blCurState;
     ffc:	1b a5       	ldd	r17, Y+43	; 0x2b
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
     ffe:	88 a1       	ldd	r24, Y+32	; 0x20
    1000:	88 23       	and	r24, r24
    1002:	09 f4       	brne	.+2      	; 0x1006 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x24>
    1004:	f6 c0       	rjmp	.+492    	; 0x11f2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
    1006:	89 a1       	ldd	r24, Y+33	; 0x21
    1008:	88 23       	and	r24, r24
    100a:	09 f4       	brne	.+2      	; 0x100e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x2c>
    100c:	f2 c0       	rjmp	.+484    	; 0x11f2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
		return(hd44780::RV_ENXIO);

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
    100e:	82 30       	cpi	r24, 0x02	; 2
    1010:	09 f4       	brne	.+2      	; 0x1014 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x32>
    1012:	f1 c0       	rjmp	.+482    	; 0x11f6 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
	{
		return(hd44780::RV_ENOTSUP);
	}

	// check if reads supported
	if(!_rw)
    1014:	8b a1       	ldd	r24, Y+35	; 0x23
    1016:	88 23       	and	r24, r24
    1018:	09 f4       	brne	.+2      	; 0x101c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x3a>
    101a:	ed c0       	rjmp	.+474    	; 0x11f6 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
    101c:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
    101e:	8c 8c       	ldd	r8, Y+28	; 0x1c
    1020:	9d 8c       	ldd	r9, Y+29	; 0x1d
    1022:	ae 8c       	ldd	r10, Y+30	; 0x1e
    1024:	bf 8c       	ldd	r11, Y+31	; 0x1f
    1026:	c8 8c       	ldd	r12, Y+24	; 0x18
    1028:	d9 8c       	ldd	r13, Y+25	; 0x19
    102a:	ea 8c       	ldd	r14, Y+26	; 0x1a
    102c:	fb 8c       	ldd	r15, Y+27	; 0x1b
    102e:	8d e2       	ldi	r24, 0x2D	; 45
    1030:	c8 1a       	sub	r12, r24
    1032:	d1 08       	sbc	r13, r1
    1034:	e1 08       	sbc	r14, r1
    1036:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
    1038:	0e 94 bd 19 	call	0x337a	; 0x337a <micros>
    103c:	dc 01       	movw	r26, r24
    103e:	cb 01       	movw	r24, r22
    1040:	8c 19       	sub	r24, r12
    1042:	9d 09       	sbc	r25, r13
    1044:	ae 09       	sbc	r26, r14
    1046:	bf 09       	sbc	r27, r15
    1048:	88 15       	cp	r24, r8
    104a:	99 05       	cpc	r25, r9
    104c:	aa 05       	cpc	r26, r10
    104e:	bb 05       	cpc	r27, r11
    1050:	98 f3       	brcs	.-26     	; 0x1038 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x56>
    1052:	8d a1       	ldd	r24, Y+37	; 0x25
    1054:	18 2b       	or	r17, r24
    1056:	8e a1       	ldd	r24, Y+38	; 0x26
    1058:	18 2b       	or	r17, r24
    105a:	8f a1       	ldd	r24, Y+39	; 0x27
    105c:	18 2b       	or	r17, r24
   
	// put all the expander LCD data pins into input mode.
	// PCF8574 psuedo inputs use pullups so setting them to 1
	// makes them suitible for inputs.

	gpioValue |= _d4|_d5|_d6|_d7;
    105e:	88 a5       	ldd	r24, Y+40	; 0x28
    1060:	18 2b       	or	r17, r24

	// set RS based on type of read (data or status/cmd)
	if(type == hd44780::HD44780_IOdata) 
    1062:	01 30       	cpi	r16, 0x01	; 1
    1064:	11 f4       	brne	.+4      	; 0x106a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x88>
	{
		gpioValue |= _rs; // RS high to read data reg
    1066:	8a a1       	ldd	r24, Y+34	; 0x22
    1068:	18 2b       	or	r17, r24
	}

	gpioValue |= _rw; // r/w high for reading
    106a:	8b a1       	ldd	r24, Y+35	; 0x23
    106c:	18 2b       	or	r17, r24

	// write all the bits to the expander port
	
	Wire.beginTransmission(_addr);
    106e:	68 a1       	ldd	r22, Y+32	; 0x20
    1070:	8d e3       	ldi	r24, 0x3D	; 61
    1072:	94 e0       	ldi	r25, 0x04	; 4
    1074:	0e 94 1e 11 	call	0x223c	; 0x223c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue);		// d4-d7 are inputs, RS, r/w high, E LOW
    1078:	61 2f       	mov	r22, r17
    107a:	8d e3       	ldi	r24, 0x3D	; 61
    107c:	94 e0       	ldi	r25, 0x04	; 4
    107e:	0e 94 cd 10 	call	0x219a	; 0x219a <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    1082:	8d e3       	ldi	r24, 0x3D	; 61
    1084:	94 e0       	ldi	r25, 0x04	; 4
    1086:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7TwoWire15endTransmissionEv>
    108a:	88 23       	and	r24, r24
    108c:	19 f0       	breq	.+6      	; 0x1094 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xb2>
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;
    108e:	0f ef       	ldi	r16, 0xFF	; 255
    1090:	1f ef       	ldi	r17, 0xFF	; 255
    1092:	9d c0       	rjmp	.+314    	; 0x11ce <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ec>
	if(Wire.endTransmission())
		goto returnStatus;


	// raise E to read the data.
	Wire.beginTransmission(_addr);
    1094:	68 a1       	ldd	r22, Y+32	; 0x20
    1096:	8d e3       	ldi	r24, 0x3D	; 61
    1098:	94 e0       	ldi	r25, 0x04	; 4
    109a:	0e 94 1e 11 	call	0x223c	; 0x223c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raises E 
    109e:	6c a1       	ldd	r22, Y+36	; 0x24
    10a0:	61 2b       	or	r22, r17
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	8d e3       	ldi	r24, 0x3D	; 61
    10a6:	94 e0       	ldi	r25, 0x04	; 4
    10a8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
    10ac:	8d e3       	ldi	r24, 0x3D	; 61
    10ae:	94 e0       	ldi	r25, 0x04	; 4
    10b0:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7TwoWire15endTransmissionEv>
    10b4:	81 11       	cpse	r24, r1
    10b6:	eb cf       	rjmp	.-42     	; 0x108e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// read the expander port to get the upper nibble of the byte
	Wire.requestFrom((int)_addr, 1);
    10b8:	68 a1       	ldd	r22, Y+32	; 0x20
    10ba:	70 e0       	ldi	r23, 0x00	; 0
    10bc:	41 e0       	ldi	r20, 0x01	; 1
    10be:	50 e0       	ldi	r21, 0x00	; 0
    10c0:	8d e3       	ldi	r24, 0x3D	; 61
    10c2:	94 e0       	ldi	r25, 0x04	; 4
    10c4:	0e 94 9f 11 	call	0x233e	; 0x233e <_ZN7TwoWire11requestFromEii>
	iodata = Wire.read();
    10c8:	8d e3       	ldi	r24, 0x3D	; 61
    10ca:	94 e0       	ldi	r25, 0x04	; 4
    10cc:	0e 94 46 10 	call	0x208c	; 0x208c <_ZN7TwoWire4readEv>
    10d0:	7c 01       	movw	r14, r24
	if(iodata < 0) // did we not receive a byte?
    10d2:	97 fd       	sbrc	r25, 7
    10d4:	dc cf       	rjmp	.-72     	; 0x108e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
    10d6:	68 a1       	ldd	r22, Y+32	; 0x20
    10d8:	8d e3       	ldi	r24, 0x3D	; 61
    10da:	94 e0       	ldi	r25, 0x04	; 4
    10dc:	0e 94 1e 11 	call	0x223c	; 0x223c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
    10e0:	61 2f       	mov	r22, r17
    10e2:	8d e3       	ldi	r24, 0x3D	; 61
    10e4:	94 e0       	ldi	r25, 0x04	; 4
    10e6:	0e 94 cd 10 	call	0x219a	; 0x219a <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    10ea:	8d e3       	ldi	r24, 0x3D	; 61
    10ec:	94 e0       	ldi	r25, 0x04	; 4
    10ee:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7TwoWire15endTransmissionEv>
    10f2:	81 11       	cpse	r24, r1
    10f4:	cc cf       	rjmp	.-104    	; 0x108e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
    10f6:	8d a1       	ldd	r24, Y+37	; 0x25
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	8e 21       	and	r24, r14
    10fc:	9f 21       	and	r25, r15
    10fe:	89 2b       	or	r24, r25
    1100:	11 f4       	brne	.+4      	; 0x1106 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x124>
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
    1102:	00 e0       	ldi	r16, 0x00	; 0
    1104:	01 c0       	rjmp	.+2      	; 0x1108 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x126>
	if(Wire.endTransmission())
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
		data |= (1 << 4);
    1106:	00 e1       	ldi	r16, 0x10	; 16

	if(iodata & _d5)
    1108:	8e a1       	ldd	r24, Y+38	; 0x26
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	8e 21       	and	r24, r14
    110e:	9f 21       	and	r25, r15
    1110:	89 2b       	or	r24, r25
    1112:	09 f0       	breq	.+2      	; 0x1116 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x134>
		data |= (1 << 5);
    1114:	00 62       	ori	r16, 0x20	; 32

	if(iodata & _d6)
    1116:	8f a1       	ldd	r24, Y+39	; 0x27
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	8e 21       	and	r24, r14
    111c:	9f 21       	and	r25, r15
    111e:	89 2b       	or	r24, r25
    1120:	09 f0       	breq	.+2      	; 0x1124 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x142>
		data |= (1 << 6);
    1122:	00 64       	ori	r16, 0x40	; 64

	if(iodata & _d7)
    1124:	88 a5       	ldd	r24, Y+40	; 0x28
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	e8 22       	and	r14, r24
    112a:	f9 22       	and	r15, r25
    112c:	ef 28       	or	r14, r15
    112e:	09 f0       	breq	.+2      	; 0x1132 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x150>
		data |= (1 << 7);
    1130:	00 68       	ori	r16, 0x80	; 128
	
	Wire.beginTransmission(_addr);
    1132:	68 a1       	ldd	r22, Y+32	; 0x20
    1134:	8d e3       	ldi	r24, 0x3D	; 61
    1136:	94 e0       	ldi	r25, 0x04	; 4
    1138:	0e 94 1e 11 	call	0x223c	; 0x223c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raise E to read next nibble
    113c:	6c a1       	ldd	r22, Y+36	; 0x24
    113e:	61 2b       	or	r22, r17
    1140:	70 e0       	ldi	r23, 0x00	; 0
    1142:	8d e3       	ldi	r24, 0x3D	; 61
    1144:	94 e0       	ldi	r25, 0x04	; 4
    1146:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
    114a:	8d e3       	ldi	r24, 0x3D	; 61
    114c:	94 e0       	ldi	r25, 0x04	; 4
    114e:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7TwoWire15endTransmissionEv>
    1152:	81 11       	cpse	r24, r1
    1154:	9c cf       	rjmp	.-200    	; 0x108e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>

	// read the expander port to get the lower nibble of the byte
	// We can't look at the return value from requestFrom() on the TineyWireM
	// library as it doesn't work like it is supposed to.
	// So we look at the return status from read() instead.
	Wire.requestFrom((int)_addr, 1);
    1156:	68 a1       	ldd	r22, Y+32	; 0x20
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	41 e0       	ldi	r20, 0x01	; 1
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	8d e3       	ldi	r24, 0x3D	; 61
    1160:	94 e0       	ldi	r25, 0x04	; 4
    1162:	0e 94 9f 11 	call	0x233e	; 0x233e <_ZN7TwoWire11requestFromEii>

	iodata = Wire.read();
    1166:	8d e3       	ldi	r24, 0x3D	; 61
    1168:	94 e0       	ldi	r25, 0x04	; 4
    116a:	0e 94 46 10 	call	0x208c	; 0x208c <_ZN7TwoWire4readEv>
    116e:	7c 01       	movw	r14, r24

	if(iodata < 0) // did we not receive a byte?
    1170:	97 fd       	sbrc	r25, 7
    1172:	8d cf       	rjmp	.-230    	; 0x108e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
    1174:	68 a1       	ldd	r22, Y+32	; 0x20
    1176:	8d e3       	ldi	r24, 0x3D	; 61
    1178:	94 e0       	ldi	r25, 0x04	; 4
    117a:	0e 94 1e 11 	call	0x223c	; 0x223c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
    117e:	61 2f       	mov	r22, r17
    1180:	8d e3       	ldi	r24, 0x3D	; 61
    1182:	94 e0       	ldi	r25, 0x04	; 4
    1184:	0e 94 cd 10 	call	0x219a	; 0x219a <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    1188:	8d e3       	ldi	r24, 0x3D	; 61
    118a:	94 e0       	ldi	r25, 0x04	; 4
    118c:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7TwoWire15endTransmissionEv>
    1190:	81 11       	cpse	r24, r1
    1192:	7d cf       	rjmp	.-262    	; 0x108e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into lower nibble of byte
	if(iodata & _d4)
    1194:	8d a1       	ldd	r24, Y+37	; 0x25
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	8e 21       	and	r24, r14
    119a:	9f 21       	and	r25, r15
    119c:	89 2b       	or	r24, r25
    119e:	09 f0       	breq	.+2      	; 0x11a2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1c0>
		data |= (1 << 0);
    11a0:	01 60       	ori	r16, 0x01	; 1

	if(iodata & _d5)
    11a2:	8e a1       	ldd	r24, Y+38	; 0x26
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	8e 21       	and	r24, r14
    11a8:	9f 21       	and	r25, r15
    11aa:	89 2b       	or	r24, r25
    11ac:	09 f0       	breq	.+2      	; 0x11b0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ce>
		data |= (1 << 1);
    11ae:	02 60       	ori	r16, 0x02	; 2

	if(iodata & _d6)
    11b0:	8f a1       	ldd	r24, Y+39	; 0x27
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	8e 21       	and	r24, r14
    11b6:	9f 21       	and	r25, r15
    11b8:	89 2b       	or	r24, r25
    11ba:	09 f0       	breq	.+2      	; 0x11be <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1dc>
		data |= (1 << 2);
    11bc:	04 60       	ori	r16, 0x04	; 4

	if(iodata & _d7)
    11be:	88 a5       	ldd	r24, Y+40	; 0x28
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	e8 22       	and	r14, r24
    11c4:	f9 22       	and	r15, r25
    11c6:	ef 28       	or	r14, r15
    11c8:	09 f0       	breq	.+2      	; 0x11cc <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ea>
		data |= (1 << 3);
    11ca:	08 60       	ori	r16, 0x08	; 8

	rval = data;
    11cc:	10 e0       	ldi	r17, 0x00	; 0

returnStatus:

	// try to put gpio port back to all outputs state with WR signal low for writes
	Wire.beginTransmission(_addr);
    11ce:	68 a1       	ldd	r22, Y+32	; 0x20
    11d0:	8d e3       	ldi	r24, 0x3D	; 61
    11d2:	94 e0       	ldi	r25, 0x04	; 4
    11d4:	0e 94 1e 11 	call	0x223c	; 0x223c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(_blCurState);		// with E LOW
    11d8:	6b a5       	ldd	r22, Y+43	; 0x2b
    11da:	8d e3       	ldi	r24, 0x3D	; 61
    11dc:	94 e0       	ldi	r25, 0x04	; 4
    11de:	0e 94 cd 10 	call	0x219a	; 0x219a <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    11e2:	8d e3       	ldi	r24, 0x3D	; 61
    11e4:	94 e0       	ldi	r25, 0x04	; 4
    11e6:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7TwoWire15endTransmissionEv>
    11ea:	88 23       	and	r24, r24
    11ec:	39 f0       	breq	.+14     	; 0x11fc <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21a>
		rval = hd44780::RV_EIO;
    11ee:	8f ef       	ldi	r24, 0xFF	; 255
    11f0:	03 c0       	rjmp	.+6      	; 0x11f8 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
    11f2:	8c ef       	ldi	r24, 0xFC	; 252
    11f4:	01 c0       	rjmp	.+2      	; 0x11f8 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
	{
		return(hd44780::RV_ENOTSUP);
    11f6:	8d ef       	ldi	r24, 0xFD	; 253
    11f8:	9f ef       	ldi	r25, 0xFF	; 255
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21c>
    11fc:	c8 01       	movw	r24, r16
	Wire.write(_blCurState);		// with E LOW
	if(Wire.endTransmission())
		rval = hd44780::RV_EIO;

	return(rval);
}
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	1f 91       	pop	r17
    1204:	0f 91       	pop	r16
    1206:	ff 90       	pop	r15
    1208:	ef 90       	pop	r14
    120a:	df 90       	pop	r13
    120c:	cf 90       	pop	r12
    120e:	bf 90       	pop	r11
    1210:	af 90       	pop	r10
    1212:	9f 90       	pop	r9
    1214:	8f 90       	pop	r8
    1216:	08 95       	ret

00001218 <_ZN14hd44780_I2Cexp11autocfg8574Ev>:
 * a new resistor to  connect to the base of the transistor.
 * 
 * As a result the SYDZ backpack cannot use autoconfiguration.
 */

int autocfg8574()
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	ec 01       	movw	r28, r24
uint8_t data, data2;
uint8_t rs, rw, en, d4, d5, d6, d7, bl, blLevel;

	// First put a 0xff in the output port

	Wire.beginTransmission(_addr);
    1222:	68 a1       	ldd	r22, Y+32	; 0x20
    1224:	8d e3       	ldi	r24, 0x3D	; 61
    1226:	94 e0       	ldi	r25, 0x04	; 4
    1228:	0e 94 1e 11 	call	0x223c	; 0x223c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0xff);
    122c:	6f ef       	ldi	r22, 0xFF	; 255
    122e:	8d e3       	ldi	r24, 0x3D	; 61
    1230:	94 e0       	ldi	r25, 0x04	; 4
    1232:	0e 94 cd 10 	call	0x219a	; 0x219a <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    1236:	8d e3       	ldi	r24, 0x3D	; 61
    1238:	94 e0       	ldi	r25, 0x04	; 4
    123a:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7TwoWire15endTransmissionEv>

	// now read back from the port

	Wire.requestFrom((int)_addr, 1);
    123e:	68 a1       	ldd	r22, Y+32	; 0x20
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	41 e0       	ldi	r20, 0x01	; 1
    1244:	50 e0       	ldi	r21, 0x00	; 0
    1246:	8d e3       	ldi	r24, 0x3D	; 61
    1248:	94 e0       	ldi	r25, 0x04	; 4
    124a:	0e 94 9f 11 	call	0x233e	; 0x233e <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    124e:	8d e3       	ldi	r24, 0x3D	; 61
    1250:	94 e0       	ldi	r25, 0x04	; 4
    1252:	0e 94 46 10 	call	0x208c	; 0x208c <_ZN7TwoWire4readEv>
    1256:	8c 01       	movw	r16, r24

	// Turn off bit2 to attempt to see if en is bit 2,
	// if it is, it should change all lcd data bits to 1s
	
	Wire.beginTransmission(_addr);
    1258:	68 a1       	ldd	r22, Y+32	; 0x20
    125a:	8d e3       	ldi	r24, 0x3D	; 61
    125c:	94 e0       	ldi	r25, 0x04	; 4
    125e:	0e 94 1e 11 	call	0x223c	; 0x223c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) (~(1 << 2)) );
    1262:	6b ef       	ldi	r22, 0xFB	; 251
    1264:	8d e3       	ldi	r24, 0x3D	; 61
    1266:	94 e0       	ldi	r25, 0x04	; 4
    1268:	0e 94 cd 10 	call	0x219a	; 0x219a <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    126c:	8d e3       	ldi	r24, 0x3D	; 61
    126e:	94 e0       	ldi	r25, 0x04	; 4
    1270:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7TwoWire15endTransmissionEv>

	// read back data
	Wire.requestFrom((int)_addr, 1);
    1274:	68 a1       	ldd	r22, Y+32	; 0x20
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	41 e0       	ldi	r20, 0x01	; 1
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	8d e3       	ldi	r24, 0x3D	; 61
    127e:	94 e0       	ldi	r25, 0x04	; 4
    1280:	0e 94 9f 11 	call	0x233e	; 0x233e <_ZN7TwoWire11requestFromEii>
	data2 = Wire.read();
    1284:	8d e3       	ldi	r24, 0x3D	; 61
    1286:	94 e0       	ldi	r25, 0x04	; 4
    1288:	0e 94 46 10 	call	0x208c	; 0x208c <_ZN7TwoWire4readEv>

	// If lower 3 bits are high and all 4 upper bits are high after clearing bit 2
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
    128c:	98 01       	movw	r18, r16
    128e:	27 70       	andi	r18, 0x07	; 7
    1290:	33 27       	eor	r19, r19
    1292:	27 30       	cpi	r18, 0x07	; 7
    1294:	31 05       	cpc	r19, r1
    1296:	b1 f4       	brne	.+44     	; 0x12c4 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
    1298:	80 7f       	andi	r24, 0xF0	; 240
    129a:	99 27       	eor	r25, r25
    129c:	80 3f       	cpi	r24, 0xF0	; 240
    129e:	91 05       	cpc	r25, r1
    12a0:	89 f4       	brne	.+34     	; 0x12c4 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
    12a2:	83 e0       	ldi	r24, 0x03	; 3
    12a4:	16 95       	lsr	r17
    12a6:	07 95       	ror	r16
    12a8:	8a 95       	dec	r24
    12aa:	e1 f7       	brne	.-8      	; 0x12a4 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x8c>
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	08 27       	eor	r16, r24
    12b0:	01 70       	andi	r16, 0x01	; 1
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
	{
		rs = 0; rw = 1; en = 2; d4 = 4; d5 = 5; d6 = 6; d7 = 7; bl = 3;
    12b2:	43 e0       	ldi	r20, 0x03	; 3
    12b4:	57 e0       	ldi	r21, 0x07	; 7
    12b6:	66 e0       	ldi	r22, 0x06	; 6
    12b8:	75 e0       	ldi	r23, 0x05	; 5
    12ba:	e4 e0       	ldi	r30, 0x04	; 4
    12bc:	22 e0       	ldi	r18, 0x02	; 2
    12be:	f1 e0       	ldi	r31, 0x01	; 1
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	34 c0       	rjmp	.+104    	; 0x132c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x114>
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
		}
	}
	else if((data & 0x70) == 0x70)
    12c4:	c8 01       	movw	r24, r16
    12c6:	80 77       	andi	r24, 0x70	; 112
    12c8:	99 27       	eor	r25, r25
    12ca:	80 37       	cpi	r24, 0x70	; 112
    12cc:	91 05       	cpc	r25, r1
    12ce:	09 f0       	breq	.+2      	; 0x12d2 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xba>
    12d0:	68 c0       	rjmp	.+208    	; 0x13a2 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18a>
		// both use bit 7 for backlight control

		// Turn off the en bit which should change the data bits
		// bit 4 on the mjkdz is en so we try that bit
	
		Wire.beginTransmission(_addr);
    12d2:	68 a1       	ldd	r22, Y+32	; 0x20
    12d4:	8d e3       	ldi	r24, 0x3D	; 61
    12d6:	94 e0       	ldi	r25, 0x04	; 4
    12d8:	0e 94 1e 11 	call	0x223c	; 0x223c <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t) (~(1 << 4)) );
    12dc:	6f ee       	ldi	r22, 0xEF	; 239
    12de:	8d e3       	ldi	r24, 0x3D	; 61
    12e0:	94 e0       	ldi	r25, 0x04	; 4
    12e2:	0e 94 cd 10 	call	0x219a	; 0x219a <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    12e6:	8d e3       	ldi	r24, 0x3D	; 61
    12e8:	94 e0       	ldi	r25, 0x04	; 4
    12ea:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7TwoWire15endTransmissionEv>

		// read back data
		Wire.requestFrom((int)_addr, 1);
    12ee:	68 a1       	ldd	r22, Y+32	; 0x20
    12f0:	70 e0       	ldi	r23, 0x00	; 0
    12f2:	41 e0       	ldi	r20, 0x01	; 1
    12f4:	50 e0       	ldi	r21, 0x00	; 0
    12f6:	8d e3       	ldi	r24, 0x3D	; 61
    12f8:	94 e0       	ldi	r25, 0x04	; 4
    12fa:	0e 94 9f 11 	call	0x233e	; 0x233e <_ZN7TwoWire11requestFromEii>
		data2 = Wire.read();
    12fe:	8d e3       	ldi	r24, 0x3D	; 61
    1300:	94 e0       	ldi	r25, 0x04	; 4
    1302:	0e 94 46 10 	call	0x208c	; 0x208c <_ZN7TwoWire4readEv>
		// look at data bits and see if they changed
		// if they changed to 0xf, then en was bit 4 and it is mjdkz
		// this will happen since when E is low the LCD is not
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
    1306:	8f 70       	andi	r24, 0x0F	; 15
    1308:	99 27       	eor	r25, r25
    130a:	0f 97       	sbiw	r24, 0x0f	; 15
    130c:	19 f0       	breq	.+6      	; 0x1314 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xfc>
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
		}
		else
		{
			// electrofun LCDXIO
			rs = 4; rw = 5; en = 6; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
    130e:	26 e0       	ldi	r18, 0x06	; 6
    1310:	34 e0       	ldi	r19, 0x04	; 4
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x100>
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
		{
			// mjkdz
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
    1314:	24 e0       	ldi	r18, 0x04	; 4
    1316:	36 e0       	ldi	r19, 0x06	; 6
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
    1318:	00 95       	com	r16
    131a:	00 1f       	adc	r16, r16
    131c:	00 27       	eor	r16, r16
    131e:	00 1f       	adc	r16, r16
    1320:	47 e0       	ldi	r20, 0x07	; 7
    1322:	53 e0       	ldi	r21, 0x03	; 3
    1324:	62 e0       	ldi	r22, 0x02	; 2
    1326:	71 e0       	ldi	r23, 0x01	; 1
    1328:	e0 e0       	ldi	r30, 0x00	; 0
    132a:	f5 e0       	ldi	r31, 0x05	; 5
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	dc 01       	movw	r26, r24
    1332:	01 c0       	rjmp	.+2      	; 0x1336 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11e>
    1334:	aa 0f       	add	r26, r26
    1336:	3a 95       	dec	r19
    1338:	ea f7       	brpl	.-6      	; 0x1334 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11c>
    133a:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
    133c:	dc 01       	movw	r26, r24
    133e:	01 c0       	rjmp	.+2      	; 0x1342 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x12a>
    1340:	aa 0f       	add	r26, r26
    1342:	fa 95       	dec	r31
    1344:	ea f7       	brpl	.-6      	; 0x1340 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x128>
    1346:	ab a3       	std	Y+35, r26	; 0x23
	else
		_rw = 0; // no r/w control

	_en = ( 1 << en );
    1348:	dc 01       	movw	r26, r24
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x138>
    134c:	aa 0f       	add	r26, r26
    134e:	bb 1f       	adc	r27, r27
    1350:	2a 95       	dec	r18
    1352:	e2 f7       	brpl	.-8      	; 0x134c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x134>
    1354:	ac a3       	std	Y+36, r26	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
    1356:	9c 01       	movw	r18, r24
    1358:	01 c0       	rjmp	.+2      	; 0x135c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x144>
    135a:	22 0f       	add	r18, r18
    135c:	ea 95       	dec	r30
    135e:	ea f7       	brpl	.-6      	; 0x135a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x142>
    1360:	2d a3       	std	Y+37, r18	; 0x25
	_d5 = ( 1 << d5 );
    1362:	9c 01       	movw	r18, r24
    1364:	01 c0       	rjmp	.+2      	; 0x1368 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x150>
    1366:	22 0f       	add	r18, r18
    1368:	7a 95       	dec	r23
    136a:	ea f7       	brpl	.-6      	; 0x1366 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x14e>
    136c:	2e a3       	std	Y+38, r18	; 0x26
	_d6 = ( 1 << d6 );
    136e:	9c 01       	movw	r18, r24
    1370:	01 c0       	rjmp	.+2      	; 0x1374 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15c>
    1372:	22 0f       	add	r18, r18
    1374:	6a 95       	dec	r22
    1376:	ea f7       	brpl	.-6      	; 0x1372 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15a>
    1378:	2f a3       	std	Y+39, r18	; 0x27
	_d7 = ( 1 << d7 );   
    137a:	9c 01       	movw	r18, r24
    137c:	01 c0       	rjmp	.+2      	; 0x1380 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x168>
    137e:	22 0f       	add	r18, r18
    1380:	5a 95       	dec	r21
    1382:	ea f7       	brpl	.-6      	; 0x137e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x166>
    1384:	28 a7       	std	Y+40, r18	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
    1386:	01 c0       	rjmp	.+2      	; 0x138a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x172>
    1388:	88 0f       	add	r24, r24
    138a:	4a 95       	dec	r20
    138c:	ea f7       	brpl	.-6      	; 0x1388 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x170>
    138e:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
    1390:	0a a7       	std	Y+42, r16	; 0x2a
	// set default bl state to backlight on
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
    1392:	01 30       	cpi	r16, 0x01	; 1
    1394:	11 f4       	brne	.+4      	; 0x139a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x182>
		_blCurState = _bl;
    1396:	8b a7       	std	Y+43, r24	; 0x2b
    1398:	01 c0       	rjmp	.+2      	; 0x139c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x184>
	else
		_blCurState = 0;
    139a:	1b a6       	std	Y+43, r1	; 0x2b
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18e>
		}
	}
	else
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
    13a2:	8d ef       	ldi	r24, 0xFD	; 253
    13a4:	9f ef       	ldi	r25, 0xFF	; 255
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	1f 91       	pop	r17
    13ac:	0f 91       	pop	r16
    13ae:	08 95       	ret

000013b0 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>:
 * if GP1 is low then the board is the BOARD_XXX board
 * The BOARD_XXX may not work as GP1 is used for D5 on WIDEHK and LCDPLUG
 *
 *
 */
int autocfgMCP23008()
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	ec 01       	movw	r28, r24

	/*
	 * Now set up output port
	 * Make no assumptions as to the state of IOCON BYTE mode
	 */
	Wire.beginTransmission(_addr);
    13b6:	68 a1       	ldd	r22, Y+32	; 0x20
    13b8:	8d e3       	ldi	r24, 0x3D	; 61
    13ba:	94 e0       	ldi	r25, 0x04	; 4
    13bc:	0e 94 1e 11 	call	0x223c	; 0x223c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t)0); // point to IODIR
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	8d e3       	ldi	r24, 0x3D	; 61
    13c4:	94 e0       	ldi	r25, 0x04	; 4
    13c6:	0e 94 cd 10 	call	0x219a	; 0x219a <_ZN7TwoWire5writeEh>
	Wire.write(0xff); // all pins inputs
    13ca:	6f ef       	ldi	r22, 0xFF	; 255
    13cc:	70 e0       	ldi	r23, 0x00	; 0
    13ce:	8d e3       	ldi	r24, 0x3D	; 61
    13d0:	94 e0       	ldi	r25, 0x04	; 4
    13d2:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    13d6:	8d e3       	ldi	r24, 0x3D	; 61
    13d8:	94 e0       	ldi	r25, 0x04	; 4
    13da:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7TwoWire15endTransmissionEv>

	Wire.beginTransmission(_addr);
    13de:	68 a1       	ldd	r22, Y+32	; 0x20
    13e0:	8d e3       	ldi	r24, 0x3D	; 61
    13e2:	94 e0       	ldi	r25, 0x04	; 4
    13e4:	0e 94 1e 11 	call	0x223c	; 0x223c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(6); // point to GPPU
    13e8:	66 e0       	ldi	r22, 0x06	; 6
    13ea:	70 e0       	ldi	r23, 0x00	; 0
    13ec:	8d e3       	ldi	r24, 0x3D	; 61
    13ee:	94 e0       	ldi	r25, 0x04	; 4
    13f0:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
	Wire.write(0xff); // turn on pullups
    13f4:	6f ef       	ldi	r22, 0xFF	; 255
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	8d e3       	ldi	r24, 0x3D	; 61
    13fa:	94 e0       	ldi	r25, 0x04	; 4
    13fc:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    1400:	8d e3       	ldi	r24, 0x3D	; 61
    1402:	94 e0       	ldi	r25, 0x04	; 4
    1404:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7TwoWire15endTransmissionEv>

	/*
	 * read from the GPIO port
	 */

	Wire.beginTransmission(_addr);
    1408:	68 a1       	ldd	r22, Y+32	; 0x20
    140a:	8d e3       	ldi	r24, 0x3D	; 61
    140c:	94 e0       	ldi	r25, 0x04	; 4
    140e:	0e 94 1e 11 	call	0x223c	; 0x223c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(9); // point to GPIO
    1412:	69 e0       	ldi	r22, 0x09	; 9
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	8d e3       	ldi	r24, 0x3D	; 61
    1418:	94 e0       	ldi	r25, 0x04	; 4
    141a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    141e:	8d e3       	ldi	r24, 0x3D	; 61
    1420:	94 e0       	ldi	r25, 0x04	; 4
    1422:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom((int)_addr, 1);
    1426:	68 a1       	ldd	r22, Y+32	; 0x20
    1428:	70 e0       	ldi	r23, 0x00	; 0
    142a:	41 e0       	ldi	r20, 0x01	; 1
    142c:	50 e0       	ldi	r21, 0x00	; 0
    142e:	8d e3       	ldi	r24, 0x3D	; 61
    1430:	94 e0       	ldi	r25, 0x04	; 4
    1432:	0e 94 9f 11 	call	0x233e	; 0x233e <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    1436:	8d e3       	ldi	r24, 0x3D	; 61
    1438:	94 e0       	ldi	r25, 0x04	; 4
    143a:	0e 94 46 10 	call	0x208c	; 0x208c <_ZN7TwoWire4readEv>

	blLevel = HIGH; // known boards are active HIGH bl

	if(data == 0x7f) // bit 7 low, and other control and data lines high
    143e:	8f 37       	cpi	r24, 0x7F	; 127
    1440:	61 f0       	breq	.+24     	; 0x145a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xaa>
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
    1442:	86 ff       	sbrs	r24, 6
    1444:	12 c0       	rjmp	.+36     	; 0x146a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xba>
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
    1446:	81 fd       	sbrc	r24, 1
    1448:	4c c0       	rjmp	.+152    	; 0x14e2 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x132>
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
		bl = 1;
    144a:	21 e0       	ldi	r18, 0x01	; 1
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
    144c:	32 e0       	ldi	r19, 0x02	; 2
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
    144e:	43 e0       	ldi	r20, 0x03	; 3
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
    1450:	54 e0       	ldi	r21, 0x04	; 4
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
    1452:	65 e0       	ldi	r22, 0x05	; 5
	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
    1454:	76 e0       	ldi	r23, 0x06	; 6
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
    1456:	e7 e0       	ldi	r30, 0x07	; 7
    1458:	0f c0       	rjmp	.+30     	; 0x1478 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;
    145a:	27 e0       	ldi	r18, 0x07	; 7
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
    145c:	36 e0       	ldi	r19, 0x06	; 6
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
    145e:	45 e0       	ldi	r20, 0x05	; 5
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
    1460:	54 e0       	ldi	r21, 0x04	; 4
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
    1462:	63 e0       	ldi	r22, 0x03	; 3
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
    1464:	72 e0       	ldi	r23, 0x02	; 2

	if(data == 0x7f) // bit 7 low, and other control and data lines high
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
    1466:	e1 e0       	ldi	r30, 0x01	; 1
    1468:	07 c0       	rjmp	.+14     	; 0x1478 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;
    146a:	26 e0       	ldi	r18, 0x06	; 6
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
    146c:	33 e0       	ldi	r19, 0x03	; 3
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
    146e:	42 e0       	ldi	r20, 0x02	; 2
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
    1470:	51 e0       	ldi	r21, 0x01	; 1
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
    1472:	60 e0       	ldi	r22, 0x00	; 0
	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
    1474:	77 e0       	ldi	r23, 0x07	; 7
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
    1476:	e4 e0       	ldi	r30, 0x04	; 4
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	dc 01       	movw	r26, r24
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd4>
    1480:	aa 0f       	add	r26, r26
    1482:	bb 1f       	adc	r27, r27
    1484:	ea 95       	dec	r30
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd0>
    1488:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
	else
		_rw = 0; // no r/w control
    148a:	1b a2       	std	Y+35, r1	; 0x23

	_en = ( 1 << en );
    148c:	fc 01       	movw	r30, r24
    148e:	01 c0       	rjmp	.+2      	; 0x1492 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe2>
    1490:	ee 0f       	add	r30, r30
    1492:	7a 95       	dec	r23
    1494:	ea f7       	brpl	.-6      	; 0x1490 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe0>
    1496:	ec a3       	std	Y+36, r30	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
    1498:	fc 01       	movw	r30, r24
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xf0>
    149c:	ee 0f       	add	r30, r30
    149e:	ff 1f       	adc	r31, r31
    14a0:	6a 95       	dec	r22
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xec>
    14a4:	ed a3       	std	Y+37, r30	; 0x25
	_d5 = ( 1 << d5 );
    14a6:	bc 01       	movw	r22, r24
    14a8:	01 c0       	rjmp	.+2      	; 0x14ac <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfc>
    14aa:	66 0f       	add	r22, r22
    14ac:	5a 95       	dec	r21
    14ae:	ea f7       	brpl	.-6      	; 0x14aa <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfa>
    14b0:	6e a3       	std	Y+38, r22	; 0x26
	_d6 = ( 1 << d6 );
    14b2:	bc 01       	movw	r22, r24
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x10a>
    14b6:	66 0f       	add	r22, r22
    14b8:	77 1f       	adc	r23, r23
    14ba:	4a 95       	dec	r20
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x106>
    14be:	6f a3       	std	Y+39, r22	; 0x27
	_d7 = ( 1 << d7 );   
    14c0:	ac 01       	movw	r20, r24
    14c2:	01 c0       	rjmp	.+2      	; 0x14c6 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x116>
    14c4:	44 0f       	add	r20, r20
    14c6:	3a 95       	dec	r19
    14c8:	ea f7       	brpl	.-6      	; 0x14c4 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x114>
    14ca:	48 a7       	std	Y+40, r20	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
    14cc:	01 c0       	rjmp	.+2      	; 0x14d0 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x120>
    14ce:	88 0f       	add	r24, r24
    14d0:	2a 95       	dec	r18
    14d2:	ea f7       	brpl	.-6      	; 0x14ce <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x11e>
    14d4:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
    14d6:	91 e0       	ldi	r25, 0x01	; 1
    14d8:	9a a7       	std	Y+42, r25	; 0x2a
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
		_blCurState = _bl;
    14da:	8b a7       	std	Y+43, r24	; 0x2b
		// could not identify board
		return(hd44780::RV_ENOTSUP);
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x136>

	}
	else
	{
		// could not identify board
		return(hd44780::RV_ENOTSUP);
    14e2:	8d ef       	ldi	r24, 0xFD	; 253
    14e4:	9f ef       	ldi	r25, 0xFF	; 255
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	08 95       	ret

000014ec <_ZN14hd44780_I2Cexp6ioinitEv>:
// Returns non zero if initialization failed.
//
// can't be used from constructors because not everything is initalized yet.
// (maybe interrupts or other library constructors)
// if Wire library is used in constructor, it will hang.
int ioinit()
    14ec:	1f 93       	push	r17
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
    14f2:	ec 01       	movw	r28, r24
	 * I believe that it is unreasonable to require the the user
	 * sketch code to do it, because all that should change between
	 * hd44780 i/o interfaces should be the constructor
	 * So we go ahead and call it here.
	 */
	Wire.begin();
    14f4:	8d e3       	ldi	r24, 0x3D	; 61
    14f6:	94 e0       	ldi	r25, 0x04	; 4
    14f8:	0e 94 0c 11 	call	0x2218	; 0x2218 <_ZN7TwoWire5beginEv>

	// auto locate i2c expander and magically detect pin mappings

	if(!_addr) // locate next instance
    14fc:	68 a1       	ldd	r22, Y+32	; 0x20
    14fe:	61 11       	cpse	r22, r1
    1500:	0a c0       	rjmp	.+20     	; 0x1516 <_ZN14hd44780_I2Cexp6ioinitEv+0x2a>
	{
		_addr = LocateDevice(AutoInst++);
    1502:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    1506:	91 e0       	ldi	r25, 0x01	; 1
    1508:	98 0f       	add	r25, r24
    150a:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    150e:	0e 94 b0 01 	call	0x360	; 0x360 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
    1512:	88 a3       	std	Y+32, r24	; 0x20
    1514:	0d c0       	rjmp	.+26     	; 0x1530 <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
	}
	else
	{
		// check to see if device at specified address is really there
		Wire.beginTransmission(_addr);
    1516:	8d e3       	ldi	r24, 0x3D	; 61
    1518:	94 e0       	ldi	r25, 0x04	; 4
    151a:	0e 94 1e 11 	call	0x223c	; 0x223c <_ZN7TwoWire17beginTransmissionEh>
		if(Wire.endTransmission())
    151e:	8d e3       	ldi	r24, 0x3D	; 61
    1520:	94 e0       	ldi	r25, 0x04	; 4
    1522:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7TwoWire15endTransmissionEv>
    1526:	88 23       	and	r24, r24
    1528:	19 f0       	breq	.+6      	; 0x1530 <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
			return(hd44780::RV_ENXIO);
    152a:	8c ef       	ldi	r24, 0xFC	; 252
    152c:	9f ef       	ldi	r25, 0xFF	; 255
    152e:	a7 c0       	rjmp	.+334    	; 0x167e <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	}

	if(!_addr) // locate next instance
    1530:	88 a1       	ldd	r24, Y+32	; 0x20
    1532:	81 11       	cpse	r24, r1
    1534:	09 c0       	rjmp	.+18     	; 0x1548 <_ZN14hd44780_I2Cexp6ioinitEv+0x5c>
		_addr = LocateDevice(AutoInst++);
    1536:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    153a:	91 e0       	ldi	r25, 0x01	; 1
    153c:	98 0f       	add	r25, r24
    153e:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    1542:	0e 94 b0 01 	call	0x360	; 0x360 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
    1546:	88 a3       	std	Y+32, r24	; 0x20

	if(!_addr) // if we couldn't locate it, return error
    1548:	18 a1       	ldd	r17, Y+32	; 0x20
    154a:	11 23       	and	r17, r17
    154c:	71 f3       	breq	.-36     	; 0x152a <_ZN14hd44780_I2Cexp6ioinitEv+0x3e>
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
    154e:	89 a1       	ldd	r24, Y+33	; 0x21
    1550:	88 23       	and	r24, r24
    1552:	c1 f1       	breq	.+112    	; 0x15c4 <_ZN14hd44780_I2Cexp6ioinitEv+0xd8>
			return(status);
	}

	// initialize IO expander chip

	Wire.beginTransmission(_addr);
    1554:	68 a1       	ldd	r22, Y+32	; 0x20
    1556:	8d e3       	ldi	r24, 0x3D	; 61
    1558:	94 e0       	ldi	r25, 0x04	; 4
    155a:	0e 94 1e 11 	call	0x223c	; 0x223c <_ZN7TwoWire17beginTransmissionEh>

	if(_expType == I2Cexp_MCP23008)
    155e:	89 a1       	ldd	r24, Y+33	; 0x21
    1560:	82 30       	cpi	r24, 0x02	; 2
    1562:	09 f0       	breq	.+2      	; 0x1566 <_ZN14hd44780_I2Cexp6ioinitEv+0x7a>
    1564:	76 c0       	rjmp	.+236    	; 0x1652 <_ZN14hd44780_I2Cexp6ioinitEv+0x166>
		 * within the same i2c connection by simply sending more bytes.
		 * This is necessary as the code uses back to back writes to perform
		 * the nibble updates as well as the toggling the enable signal.
		 * This methodology offers significant performance gains.
		 */
		Wire.write(5);	// point to IOCON
    1566:	65 e0       	ldi	r22, 0x05	; 5
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	8d e3       	ldi	r24, 0x3D	; 61
    156c:	94 e0       	ldi	r25, 0x04	; 4
    156e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
		Wire.write(0x20);// disable sequential mode (enables BYTE mode)
    1572:	60 e2       	ldi	r22, 0x20	; 32
    1574:	70 e0       	ldi	r23, 0x00	; 0
    1576:	8d e3       	ldi	r24, 0x3D	; 61
    1578:	94 e0       	ldi	r25, 0x04	; 4
    157a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    157e:	8d e3       	ldi	r24, 0x3D	; 61
    1580:	94 e0       	ldi	r25, 0x04	; 4
    1582:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7TwoWire15endTransmissionEv>

		/*
		 * Now set up output port
		 */
		Wire.beginTransmission(_addr);
    1586:	68 a1       	ldd	r22, Y+32	; 0x20
    1588:	8d e3       	ldi	r24, 0x3D	; 61
    158a:	94 e0       	ldi	r25, 0x04	; 4
    158c:	0e 94 1e 11 	call	0x223c	; 0x223c <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t)0); // point to IODIR
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	8d e3       	ldi	r24, 0x3D	; 61
    1594:	94 e0       	ldi	r25, 0x04	; 4
    1596:	0e 94 cd 10 	call	0x219a	; 0x219a <_ZN7TwoWire5writeEh>
		Wire.write((uint8_t)0); // all pins output
    159a:	60 e0       	ldi	r22, 0x00	; 0
    159c:	8d e3       	ldi	r24, 0x3D	; 61
    159e:	94 e0       	ldi	r25, 0x04	; 4
    15a0:	0e 94 cd 10 	call	0x219a	; 0x219a <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    15a4:	8d e3       	ldi	r24, 0x3D	; 61
    15a6:	94 e0       	ldi	r25, 0x04	; 4
    15a8:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7TwoWire15endTransmissionEv>
	
		/*
		 * point chip to GPIO
		 */
		Wire.beginTransmission(_addr);
    15ac:	68 a1       	ldd	r22, Y+32	; 0x20
    15ae:	8d e3       	ldi	r24, 0x3D	; 61
    15b0:	94 e0       	ldi	r25, 0x04	; 4
    15b2:	0e 94 1e 11 	call	0x223c	; 0x223c <_ZN7TwoWire17beginTransmissionEh>
		Wire.write(9); // point to GPIO
    15b6:	69 e0       	ldi	r22, 0x09	; 9
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	8d e3       	ldi	r24, 0x3D	; 61
    15bc:	94 e0       	ldi	r25, 0x04	; 4
    15be:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN7TwoWire5writeEi>
    15c2:	47 c0       	rjmp	.+142    	; 0x1652 <_ZN14hd44780_I2Cexp6ioinitEv+0x166>

	/*
	 * First try to write 0xff to MCP23008 IODIR
	 * On a PCF8574 this will end up writing 0 and then ff to output port
	 */
	Wire.beginTransmission(address);
    15c4:	61 2f       	mov	r22, r17
    15c6:	8d e3       	ldi	r24, 0x3D	; 61
    15c8:	94 e0       	ldi	r25, 0x04	; 4
    15ca:	0e 94 1e 11 	call	0x223c	; 0x223c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
    15ce:	60 e0       	ldi	r22, 0x00	; 0
    15d0:	8d e3       	ldi	r24, 0x3D	; 61
    15d2:	94 e0       	ldi	r25, 0x04	; 4
    15d4:	0e 94 cd 10 	call	0x219a	; 0x219a <_ZN7TwoWire5writeEh>
	Wire.write((uint8_t) 0xff);	// try to write to MCP23008 IODR
    15d8:	6f ef       	ldi	r22, 0xFF	; 255
    15da:	8d e3       	ldi	r24, 0x3D	; 61
    15dc:	94 e0       	ldi	r25, 0x04	; 4
    15de:	0e 94 cd 10 	call	0x219a	; 0x219a <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    15e2:	8d e3       	ldi	r24, 0x3D	; 61
    15e4:	94 e0       	ldi	r25, 0x04	; 4
    15e6:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now try to point MCP23008 to IODIR for read
	 * On a PCF8574 this will end up writing a 0 to the output port
	 */

	Wire.beginTransmission(address);
    15ea:	61 2f       	mov	r22, r17
    15ec:	8d e3       	ldi	r24, 0x3D	; 61
    15ee:	94 e0       	ldi	r25, 0x04	; 4
    15f0:	0e 94 1e 11 	call	0x223c	; 0x223c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
    15f4:	60 e0       	ldi	r22, 0x00	; 0
    15f6:	8d e3       	ldi	r24, 0x3D	; 61
    15f8:	94 e0       	ldi	r25, 0x04	; 4
    15fa:	0e 94 cd 10 	call	0x219a	; 0x219a <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    15fe:	8d e3       	ldi	r24, 0x3D	; 61
    1600:	94 e0       	ldi	r25, 0x04	; 4
    1602:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now read a byte
	 * On a MCP23008 we should read the 0xff we wrote to IODIR
	 * On a PCF8574 we should read 0 since the output port was set to 0
	 */
	Wire.requestFrom((int)address, 1);
    1606:	61 2f       	mov	r22, r17
    1608:	70 e0       	ldi	r23, 0x00	; 0
    160a:	41 e0       	ldi	r20, 0x01	; 1
    160c:	50 e0       	ldi	r21, 0x00	; 0
    160e:	8d e3       	ldi	r24, 0x3D	; 61
    1610:	94 e0       	ldi	r25, 0x04	; 4
    1612:	0e 94 9f 11 	call	0x233e	; 0x233e <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    1616:	8d e3       	ldi	r24, 0x3D	; 61
    1618:	94 e0       	ldi	r25, 0x04	; 4
    161a:	0e 94 46 10 	call	0x208c	; 0x208c <_ZN7TwoWire4readEv>
    161e:	9c 01       	movw	r18, r24

	if(data == 0xff)
    1620:	8f 3f       	cpi	r24, 0xFF	; 255
    1622:	91 05       	cpc	r25, r1
    1624:	29 f0       	breq	.+10     	; 0x1630 <_ZN14hd44780_I2Cexp6ioinitEv+0x144>
	{
		chiptype = I2Cexp_MCP23008;
    1626:	91 e0       	ldi	r25, 0x01	; 1
    1628:	23 2b       	or	r18, r19
    162a:	19 f0       	breq	.+6      	; 0x1632 <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	01 c0       	rjmp	.+2      	; 0x1632 <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    1630:	92 e0       	ldi	r25, 0x02	; 2
	if(!_addr) // if we couldn't locate it, return error
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);
    1632:	99 a3       	std	Y+33, r25	; 0x21

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
    1634:	99 23       	and	r25, r25
    1636:	09 f1       	breq	.+66     	; 0x167a <_ZN14hd44780_I2Cexp6ioinitEv+0x18e>
			return(hd44780::RV_EIO);

		if(_expType == I2Cexp_PCF8574)
    1638:	91 30       	cpi	r25, 0x01	; 1
    163a:	21 f4       	brne	.+8      	; 0x1644 <_ZN14hd44780_I2Cexp6ioinitEv+0x158>
			status = autocfg8574();		// go auto configure the pin mappings
    163c:	ce 01       	movw	r24, r28
    163e:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZN14hd44780_I2Cexp11autocfg8574Ev>
    1642:	03 c0       	rjmp	.+6      	; 0x164a <_ZN14hd44780_I2Cexp6ioinitEv+0x15e>
		else
			status = autocfgMCP23008();	// go auto configure the pin mappings
    1644:	ce 01       	movw	r24, r28
    1646:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>
		if(status)
    164a:	00 97       	sbiw	r24, 0x00	; 0
    164c:	09 f4       	brne	.+2      	; 0x1650 <_ZN14hd44780_I2Cexp6ioinitEv+0x164>
    164e:	82 cf       	rjmp	.-252    	; 0x1554 <_ZN14hd44780_I2Cexp6ioinitEv+0x68>
    1650:	16 c0       	rjmp	.+44     	; 0x167e <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
		 */
		Wire.beginTransmission(_addr);
		Wire.write(9); // point to GPIO
		
	}
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	8d e3       	ldi	r24, 0x3D	; 61
    1656:	94 e0       	ldi	r25, 0x04	; 4
    1658:	0e 94 cd 10 	call	0x219a	; 0x219a <_ZN7TwoWire5writeEh>
	if( (status = Wire.endTransmission()) ) // assignment
    165c:	8d e3       	ldi	r24, 0x3D	; 61
    165e:	94 e0       	ldi	r25, 0x04	; 4
    1660:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7TwoWire15endTransmissionEv>
    1664:	21 e0       	ldi	r18, 0x01	; 1
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	81 11       	cpse	r24, r1
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <_ZN14hd44780_I2Cexp6ioinitEv+0x184>
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	88 27       	eor	r24, r24
    1672:	99 27       	eor	r25, r25
    1674:	82 1b       	sub	r24, r18
    1676:	93 0b       	sbc	r25, r19
    1678:	02 c0       	rjmp	.+4      	; 0x167e <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
			return(hd44780::RV_EIO);
    167a:	8f ef       	ldi	r24, 0xFF	; 255
    167c:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
	if( (status = Wire.endTransmission()) ) // assignment
		status = hd44780::RV_EIO;

	return ( status );
}
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	1f 91       	pop	r17
    1684:	08 95       	ret

00001686 <_ZN3dht11_readSensorEhhh>:
    if (bits[4] != sum)
    {
        return DHTLIB_ERROR_CHECKSUM;
    }
    return result;
}
    1686:	2f 92       	push	r2
    1688:	3f 92       	push	r3
    168a:	4f 92       	push	r4
    168c:	5f 92       	push	r5
    168e:	6f 92       	push	r6
    1690:	7f 92       	push	r7
    1692:	8f 92       	push	r8
    1694:	9f 92       	push	r9
    1696:	af 92       	push	r10
    1698:	bf 92       	push	r11
    169a:	cf 92       	push	r12
    169c:	df 92       	push	r13
    169e:	ef 92       	push	r14
    16a0:	ff 92       	push	r15
    16a2:	0f 93       	push	r16
    16a4:	1f 93       	push	r17
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
    16aa:	ec 01       	movw	r28, r24
    16ac:	f6 2e       	mov	r15, r22
    16ae:	04 2f       	mov	r16, r20
    16b0:	e2 2e       	mov	r14, r18
    16b2:	86 2f       	mov	r24, r22
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	fc 01       	movw	r30, r24
    16b8:	e8 5d       	subi	r30, 0xD8	; 216
    16ba:	fe 4f       	sbci	r31, 0xFE	; 254
    16bc:	14 91       	lpm	r17, Z
    16be:	fc 01       	movw	r30, r24
    16c0:	e9 5b       	subi	r30, 0xB9	; 185
    16c2:	fe 4f       	sbci	r31, 0xFE	; 254
    16c4:	e4 91       	lpm	r30, Z
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	ee 0f       	add	r30, r30
    16ca:	ff 1f       	adc	r31, r31
    16cc:	ea 59       	subi	r30, 0x9A	; 154
    16ce:	fe 4f       	sbci	r31, 0xFE	; 254
    16d0:	c5 90       	lpm	r12, Z+
    16d2:	d4 90       	lpm	r13, Z
    16d4:	61 e0       	ldi	r22, 0x01	; 1
    16d6:	8f 2d       	mov	r24, r15
    16d8:	0e 94 ed 1a 	call	0x35da	; 0x35da <pinMode>
    16dc:	60 e0       	ldi	r22, 0x00	; 0
    16de:	8f 2d       	mov	r24, r15
    16e0:	0e 94 29 1b 	call	0x3652	; 0x3652 <digitalWrite>
    16e4:	09 30       	cpi	r16, 0x09	; 9
    16e6:	38 f0       	brcs	.+14     	; 0x16f6 <_ZN3dht11_readSensorEhhh+0x70>
    16e8:	60 2f       	mov	r22, r16
    16ea:	70 e0       	ldi	r23, 0x00	; 0
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <delay>
    16f4:	0a c0       	rjmp	.+20     	; 0x170a <_ZN3dht11_readSensorEhhh+0x84>
    16f6:	88 ee       	ldi	r24, 0xE8	; 232
    16f8:	93 e0       	ldi	r25, 0x03	; 3
    16fa:	9c 01       	movw	r18, r24
    16fc:	02 9f       	mul	r16, r18
    16fe:	c0 01       	movw	r24, r0
    1700:	03 9f       	mul	r16, r19
    1702:	90 0d       	add	r25, r0
    1704:	11 24       	eor	r1, r1
    1706:	0e 94 1e 1a 	call	0x343c	; 0x343c <delayMicroseconds>
    170a:	60 e0       	ldi	r22, 0x00	; 0
    170c:	8f 2d       	mov	r24, r15
    170e:	0e 94 ed 1a 	call	0x35da	; 0x35da <pinMode>
    1712:	80 e2       	ldi	r24, 0x20	; 32
    1714:	93 e0       	ldi	r25, 0x03	; 3
    1716:	d6 01       	movw	r26, r12
    1718:	2c 91       	ld	r18, X
    171a:	21 23       	and	r18, r17
    171c:	21 f0       	breq	.+8      	; 0x1726 <_ZN3dht11_readSensorEhhh+0xa0>
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	d1 f7       	brne	.-12     	; 0x1716 <_ZN3dht11_readSensorEhhh+0x90>
    1722:	8d ef       	ldi	r24, 0xFD	; 253
    1724:	5f c0       	rjmp	.+190    	; 0x17e4 <_ZN3dht11_readSensorEhhh+0x15e>
    1726:	80 e9       	ldi	r24, 0x90	; 144
    1728:	91 e0       	ldi	r25, 0x01	; 1
    172a:	f6 01       	movw	r30, r12
    172c:	20 81       	ld	r18, Z
    172e:	21 23       	and	r18, r17
    1730:	21 f4       	brne	.+8      	; 0x173a <_ZN3dht11_readSensorEhhh+0xb4>
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	d1 f7       	brne	.-12     	; 0x172a <_ZN3dht11_readSensorEhhh+0xa4>
    1736:	8c ef       	ldi	r24, 0xFC	; 252
    1738:	55 c0       	rjmp	.+170    	; 0x17e4 <_ZN3dht11_readSensorEhhh+0x15e>
    173a:	80 e9       	ldi	r24, 0x90	; 144
    173c:	91 e0       	ldi	r25, 0x01	; 1
    173e:	d6 01       	movw	r26, r12
    1740:	2c 91       	ld	r18, X
    1742:	21 23       	and	r18, r17
    1744:	21 f0       	breq	.+8      	; 0x174e <_ZN3dht11_readSensorEhhh+0xc8>
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	d1 f7       	brne	.-12     	; 0x173e <_ZN3dht11_readSensorEhhh+0xb8>
    174a:	8b ef       	ldi	r24, 0xFB	; 251
    174c:	4b c0       	rjmp	.+150    	; 0x17e4 <_ZN3dht11_readSensorEhhh+0x15e>
    174e:	58 e2       	ldi	r21, 0x28	; 40
    1750:	80 e9       	ldi	r24, 0x90	; 144
    1752:	91 e0       	ldi	r25, 0x01	; 1
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	e0 e9       	ldi	r30, 0x90	; 144
    175a:	f1 e0       	ldi	r31, 0x01	; 1
    175c:	00 e0       	ldi	r16, 0x00	; 0
    175e:	60 e0       	ldi	r22, 0x00	; 0
    1760:	31 2c       	mov	r3, r1
    1762:	40 e8       	ldi	r20, 0x80	; 128
    1764:	25 2e       	mov	r2, r21
    1766:	2e 18       	sub	r2, r14
    1768:	70 e9       	ldi	r23, 0x90	; 144
    176a:	87 2e       	mov	r8, r23
    176c:	99 24       	eor	r9, r9
    176e:	93 94       	inc	r9
    1770:	a1 2c       	mov	r10, r1
    1772:	b1 2c       	mov	r11, r1
    1774:	d6 01       	movw	r26, r12
    1776:	7c 91       	ld	r23, X
    1778:	71 23       	and	r23, r17
    177a:	61 f5       	brne	.+88     	; 0x17d4 <_ZN3dht11_readSensorEhhh+0x14e>
    177c:	00 23       	and	r16, r16
    177e:	51 f1       	breq	.+84     	; 0x17d4 <_ZN3dht11_readSensorEhhh+0x14e>
    1780:	25 16       	cp	r2, r21
    1782:	98 f4       	brcc	.+38     	; 0x17aa <_ZN3dht11_readSensorEhhh+0x124>
    1784:	8e 17       	cp	r24, r30
    1786:	9f 07       	cpc	r25, r31
    1788:	08 f4       	brcc	.+2      	; 0x178c <_ZN3dht11_readSensorEhhh+0x106>
    178a:	fc 01       	movw	r30, r24
    178c:	24 01       	movw	r4, r8
    178e:	35 01       	movw	r6, r10
    1790:	4e 1a       	sub	r4, r30
    1792:	5f 0a       	sbc	r5, r31
    1794:	61 08       	sbc	r6, r1
    1796:	71 08       	sbc	r7, r1
    1798:	82 e0       	ldi	r24, 0x02	; 2
    179a:	75 94       	asr	r7
    179c:	67 94       	ror	r6
    179e:	57 94       	ror	r5
    17a0:	47 94       	ror	r4
    17a2:	8a 95       	dec	r24
    17a4:	d1 f7       	brne	.-12     	; 0x179a <_ZN3dht11_readSensorEhhh+0x114>
    17a6:	92 01       	movw	r18, r4
    17a8:	07 c0       	rjmp	.+14     	; 0x17b8 <_ZN3dht11_readSensorEhhh+0x132>
    17aa:	7f 01       	movw	r14, r30
    17ac:	e2 1a       	sub	r14, r18
    17ae:	f3 0a       	sbc	r15, r19
    17b0:	e8 16       	cp	r14, r24
    17b2:	f9 06       	cpc	r15, r25
    17b4:	08 f0       	brcs	.+2      	; 0x17b8 <_ZN3dht11_readSensorEhhh+0x132>
    17b6:	64 2b       	or	r22, r20
    17b8:	46 95       	lsr	r20
    17ba:	49 f4       	brne	.+18     	; 0x17ce <_ZN3dht11_readSensorEhhh+0x148>
    17bc:	ce 01       	movw	r24, r28
    17be:	83 0d       	add	r24, r3
    17c0:	91 1d       	adc	r25, r1
    17c2:	dc 01       	movw	r26, r24
    17c4:	18 96       	adiw	r26, 0x08	; 8
    17c6:	6c 93       	st	X, r22
    17c8:	33 94       	inc	r3
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	40 e8       	ldi	r20, 0x80	; 128
    17ce:	51 50       	subi	r21, 0x01	; 1
    17d0:	80 e9       	ldi	r24, 0x90	; 144
    17d2:	91 e0       	ldi	r25, 0x01	; 1
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	29 f0       	breq	.+10     	; 0x17e2 <_ZN3dht11_readSensorEhhh+0x15c>
    17d8:	07 2f       	mov	r16, r23
    17da:	51 11       	cpse	r21, r1
    17dc:	cb cf       	rjmp	.-106    	; 0x1774 <_ZN3dht11_readSensorEhhh+0xee>
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	01 c0       	rjmp	.+2      	; 0x17e4 <_ZN3dht11_readSensorEhhh+0x15e>
    17e2:	8e ef       	ldi	r24, 0xFE	; 254
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	ff 90       	pop	r15
    17ee:	ef 90       	pop	r14
    17f0:	df 90       	pop	r13
    17f2:	cf 90       	pop	r12
    17f4:	bf 90       	pop	r11
    17f6:	af 90       	pop	r10
    17f8:	9f 90       	pop	r9
    17fa:	8f 90       	pop	r8
    17fc:	7f 90       	pop	r7
    17fe:	6f 90       	pop	r6
    1800:	5f 90       	pop	r5
    1802:	4f 90       	pop	r4
    1804:	3f 90       	pop	r3
    1806:	2f 90       	pop	r2
    1808:	08 95       	ret

0000180a <_ZN3dht4readEh>:

int8_t dht::read(uint8_t pin)
{
    180a:	cf 92       	push	r12
    180c:	df 92       	push	r13
    180e:	ef 92       	push	r14
    1810:	ff 92       	push	r15
    1812:	0f 93       	push	r16
    1814:	1f 93       	push	r17
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	ec 01       	movw	r28, r24
    // READ VALUES
    if (_disableIRQ) noInterrupts();
    181c:	8d 85       	ldd	r24, Y+13	; 0x0d
    181e:	88 23       	and	r24, r24
    1820:	09 f0       	breq	.+2      	; 0x1824 <_ZN3dht4readEh+0x1a>
    1822:	f8 94       	cli
    int8_t result = _readSensor(pin, DHTLIB_DHT_WAKEUP, DHTLIB_DHT_LEADING_ZEROS);
    1824:	26 e0       	ldi	r18, 0x06	; 6
    1826:	41 e0       	ldi	r20, 0x01	; 1
    1828:	ce 01       	movw	r24, r28
    182a:	0e 94 43 0b 	call	0x1686	; 0x1686 <_ZN3dht11_readSensorEhhh>
    182e:	e8 2e       	mov	r14, r24
    if (_disableIRQ) interrupts();
    1830:	8d 85       	ldd	r24, Y+13	; 0x0d
    1832:	88 23       	and	r24, r24
    1834:	09 f0       	breq	.+2      	; 0x1838 <_ZN3dht4readEh+0x2e>
    1836:	78 94       	sei

    // these bits are always zero, masking them reduces errors.
    bits[0] &= 0x03;
    1838:	08 85       	ldd	r16, Y+8	; 0x08
    183a:	03 70       	andi	r16, 0x03	; 3
    183c:	08 87       	std	Y+8, r16	; 0x08
    bits[2] &= 0x83;
    183e:	1a 85       	ldd	r17, Y+10	; 0x0a
    1840:	81 2f       	mov	r24, r17
    1842:	83 78       	andi	r24, 0x83	; 131
    1844:	f8 2e       	mov	r15, r24
    1846:	8a 87       	std	Y+10, r24	; 0x0a

    // CONVERT AND STORE
    humidity = (bits[0]*256 + bits[1]) * 0.1;
    1848:	c9 84       	ldd	r12, Y+9	; 0x09
    184a:	60 2f       	mov	r22, r16
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	76 2f       	mov	r23, r22
    1850:	66 27       	eor	r22, r22
    1852:	6c 0d       	add	r22, r12
    1854:	71 1d       	adc	r23, r1
    1856:	07 2e       	mov	r0, r23
    1858:	00 0c       	add	r0, r0
    185a:	88 0b       	sbc	r24, r24
    185c:	99 0b       	sbc	r25, r25
    185e:	0e 94 1d 12 	call	0x243a	; 0x243a <__floatsisf>
    1862:	2d ec       	ldi	r18, 0xCD	; 205
    1864:	3c ec       	ldi	r19, 0xCC	; 204
    1866:	4c ec       	ldi	r20, 0xCC	; 204
    1868:	5d e3       	ldi	r21, 0x3D	; 61
    186a:	0e 94 cd 12 	call	0x259a	; 0x259a <__mulsf3>
    186e:	68 83       	st	Y, r22
    1870:	79 83       	std	Y+1, r23	; 0x01
    1872:	8a 83       	std	Y+2, r24	; 0x02
    1874:	9b 83       	std	Y+3, r25	; 0x03
    temperature = ((bits[2] & 0x7F)*256 + bits[3]) * 0.1;
    1876:	db 84       	ldd	r13, Y+11	; 0x0b
    1878:	13 70       	andi	r17, 0x03	; 3
    187a:	61 2f       	mov	r22, r17
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	76 2f       	mov	r23, r22
    1880:	66 27       	eor	r22, r22
    1882:	6d 0d       	add	r22, r13
    1884:	71 1d       	adc	r23, r1
    1886:	07 2e       	mov	r0, r23
    1888:	00 0c       	add	r0, r0
    188a:	88 0b       	sbc	r24, r24
    188c:	99 0b       	sbc	r25, r25
    188e:	0e 94 1d 12 	call	0x243a	; 0x243a <__floatsisf>
    1892:	2d ec       	ldi	r18, 0xCD	; 205
    1894:	3c ec       	ldi	r19, 0xCC	; 204
    1896:	4c ec       	ldi	r20, 0xCC	; 204
    1898:	5d e3       	ldi	r21, 0x3D	; 61
    189a:	0e 94 cd 12 	call	0x259a	; 0x259a <__mulsf3>
    if (bits[2] & 0x80)  // negative temperature
    189e:	f7 fc       	sbrc	r15, 7
    18a0:	05 c0       	rjmp	.+10     	; 0x18ac <_ZN3dht4readEh+0xa2>
    bits[0] &= 0x03;
    bits[2] &= 0x83;

    // CONVERT AND STORE
    humidity = (bits[0]*256 + bits[1]) * 0.1;
    temperature = ((bits[2] & 0x7F)*256 + bits[3]) * 0.1;
    18a2:	6c 83       	std	Y+4, r22	; 0x04
    18a4:	7d 83       	std	Y+5, r23	; 0x05
    18a6:	8e 83       	std	Y+6, r24	; 0x06
    18a8:	9f 83       	std	Y+7, r25	; 0x07
    18aa:	07 c0       	rjmp	.+14     	; 0x18ba <_ZN3dht4readEh+0xb0>
    if (bits[2] & 0x80)  // negative temperature
    {
        temperature = -temperature;
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	b0 58       	subi	r27, 0x80	; 128
    18b2:	8c 83       	std	Y+4, r24	; 0x04
    18b4:	9d 83       	std	Y+5, r25	; 0x05
    18b6:	ae 83       	std	Y+6, r26	; 0x06
    18b8:	bf 83       	std	Y+7, r27	; 0x07
    }

    // TEST CHECKSUM
    uint8_t sum = bits[0] + bits[1] + bits[2] + bits[3];
    if (bits[4] != sum)
    18ba:	dc 0c       	add	r13, r12
    18bc:	0d 0d       	add	r16, r13
    18be:	f0 0e       	add	r15, r16
    18c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    18c2:	f8 12       	cpse	r15, r24
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <_ZN3dht4readEh+0xc0>
    {
        return DHTLIB_ERROR_CHECKSUM;
    }
    return result;
    18c6:	8e 2d       	mov	r24, r14
    18c8:	01 c0       	rjmp	.+2      	; 0x18cc <_ZN3dht4readEh+0xc2>

    // TEST CHECKSUM
    uint8_t sum = bits[0] + bits[1] + bits[2] + bits[3];
    if (bits[4] != sum)
    {
        return DHTLIB_ERROR_CHECKSUM;
    18ca:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return result;
}
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	1f 91       	pop	r17
    18d2:	0f 91       	pop	r16
    18d4:	ff 90       	pop	r15
    18d6:	ef 90       	pop	r14
    18d8:	df 90       	pop	r13
    18da:	cf 90       	pop	r12
    18dc:	08 95       	ret

000018de <_ZN7hd447806ioinitEv>:
	{
		buf[i] = pgm_read_byte(charmap++);
	}
	// call the RAM based function to actually send it to the LCD
	return(createChar(location, buf));
}
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	08 95       	ret

000018e4 <_ZN7hd447806ioreadENS_6iotypeE>:
    18e4:	8d ef       	ldi	r24, 0xFD	; 253
    18e6:	9f ef       	ldi	r25, 0xFF	; 255
    18e8:	08 95       	ret

000018ea <_ZN7hd4478014iosetBacklightEh>:
    18ea:	8d ef       	ldi	r24, 0xFD	; 253
    18ec:	9f ef       	ldi	r25, 0xFF	; 255
    18ee:	08 95       	ret

000018f0 <_ZN7hd44780C1Ev>:
    18f0:	cf 93       	push	r28
    18f2:	df 93       	push	r29
    18f4:	ec 01       	movw	r28, r24
    18f6:	1b 82       	std	Y+3, r1	; 0x03
    18f8:	1a 82       	std	Y+2, r1	; 0x02
    18fa:	84 e5       	ldi	r24, 0x54	; 84
    18fc:	92 e0       	ldi	r25, 0x02	; 2
    18fe:	99 83       	std	Y+1, r25	; 0x01
    1900:	88 83       	st	Y, r24
    1902:	1f 82       	std	Y+7, r1	; 0x07
    1904:	18 86       	std	Y+8, r1	; 0x08
    1906:	80 ed       	ldi	r24, 0xD0	; 208
    1908:	97 e0       	ldi	r25, 0x07	; 7
    190a:	a0 e0       	ldi	r26, 0x00	; 0
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	88 8b       	std	Y+16, r24	; 0x10
    1910:	99 8b       	std	Y+17, r25	; 0x11
    1912:	aa 8b       	std	Y+18, r26	; 0x12
    1914:	bb 8b       	std	Y+19, r27	; 0x13
    1916:	86 e2       	ldi	r24, 0x26	; 38
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	a0 e0       	ldi	r26, 0x00	; 0
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	8c 8b       	std	Y+20, r24	; 0x14
    1920:	9d 8b       	std	Y+21, r25	; 0x15
    1922:	ae 8b       	std	Y+22, r26	; 0x16
    1924:	bf 8b       	std	Y+23, r27	; 0x17
    1926:	1c 86       	std	Y+12, r1	; 0x0c
    1928:	1d 86       	std	Y+13, r1	; 0x0d
    192a:	1e 86       	std	Y+14, r1	; 0x0e
    192c:	1f 86       	std	Y+15, r1	; 0x0f
    192e:	1b 86       	std	Y+11, r1	; 0x0b
    1930:	0e 94 bd 19 	call	0x337a	; 0x337a <micros>
    1934:	68 8f       	std	Y+24, r22	; 0x18
    1936:	79 8f       	std	Y+25, r23	; 0x19
    1938:	8a 8f       	std	Y+26, r24	; 0x1a
    193a:	9b 8f       	std	Y+27, r25	; 0x1b
    193c:	1c 8e       	std	Y+28, r1	; 0x1c
    193e:	1d 8e       	std	Y+29, r1	; 0x1d
    1940:	1e 8e       	std	Y+30, r1	; 0x1e
    1942:	1f 8e       	std	Y+31, r1	; 0x1f
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	08 95       	ret

0000194a <_ZN7hd447809backlightEv>:
    194a:	dc 01       	movw	r26, r24
    194c:	ed 91       	ld	r30, X+
    194e:	fc 91       	ld	r31, X
    1950:	06 84       	ldd	r0, Z+14	; 0x0e
    1952:	f7 85       	ldd	r31, Z+15	; 0x0f
    1954:	e0 2d       	mov	r30, r0
    1956:	6f ef       	ldi	r22, 0xFF	; 255
    1958:	09 94       	ijmp

0000195a <_ZN7hd4478011noBacklightEv>:
    195a:	dc 01       	movw	r26, r24
    195c:	ed 91       	ld	r30, X+
    195e:	fc 91       	ld	r31, X
    1960:	06 84       	ldd	r0, Z+14	; 0x0e
    1962:	f7 85       	ldd	r31, Z+15	; 0x0f
    1964:	e0 2d       	mov	r30, r0
    1966:	60 e0       	ldi	r22, 0x00	; 0
    1968:	09 94       	ijmp

0000196a <_ZN7hd447807commandEh>:
    196a:	8f 92       	push	r8
    196c:	9f 92       	push	r9
    196e:	af 92       	push	r10
    1970:	bf 92       	push	r11
    1972:	ef 92       	push	r14
    1974:	ff 92       	push	r15
    1976:	1f 93       	push	r17
    1978:	cf 93       	push	r28
    197a:	df 93       	push	r29
    197c:	ec 01       	movw	r28, r24
    197e:	16 2f       	mov	r17, r22
    1980:	e8 81       	ld	r30, Y
    1982:	f9 81       	ldd	r31, Y+1	; 0x01
    1984:	04 84       	ldd	r0, Z+12	; 0x0c
    1986:	f5 85       	ldd	r31, Z+13	; 0x0d
    1988:	e0 2d       	mov	r30, r0
    198a:	46 2f       	mov	r20, r22
    198c:	60 e0       	ldi	r22, 0x00	; 0
    198e:	09 95       	icall
    1990:	7c 01       	movw	r14, r24
    1992:	11 50       	subi	r17, 0x01	; 1
    1994:	12 30       	cpi	r17, 0x02	; 2
    1996:	38 f4       	brcc	.+14     	; 0x19a6 <_ZN7hd447807commandEh+0x3c>
    1998:	19 86       	std	Y+9, r1	; 0x09
    199a:	1a 86       	std	Y+10, r1	; 0x0a
    199c:	88 88       	ldd	r8, Y+16	; 0x10
    199e:	99 88       	ldd	r9, Y+17	; 0x11
    19a0:	aa 88       	ldd	r10, Y+18	; 0x12
    19a2:	bb 88       	ldd	r11, Y+19	; 0x13
    19a4:	04 c0       	rjmp	.+8      	; 0x19ae <_ZN7hd447807commandEh+0x44>
    19a6:	8c 88       	ldd	r8, Y+20	; 0x14
    19a8:	9d 88       	ldd	r9, Y+21	; 0x15
    19aa:	ae 88       	ldd	r10, Y+22	; 0x16
    19ac:	bf 88       	ldd	r11, Y+23	; 0x17
    19ae:	0e 94 bd 19 	call	0x337a	; 0x337a <micros>
    19b2:	68 8f       	std	Y+24, r22	; 0x18
    19b4:	79 8f       	std	Y+25, r23	; 0x19
    19b6:	8a 8f       	std	Y+26, r24	; 0x1a
    19b8:	9b 8f       	std	Y+27, r25	; 0x1b
    19ba:	8c 8e       	std	Y+28, r8	; 0x1c
    19bc:	9d 8e       	std	Y+29, r9	; 0x1d
    19be:	ae 8e       	std	Y+30, r10	; 0x1e
    19c0:	bf 8e       	std	Y+31, r11	; 0x1f
    19c2:	c7 01       	movw	r24, r14
    19c4:	df 91       	pop	r29
    19c6:	cf 91       	pop	r28
    19c8:	1f 91       	pop	r17
    19ca:	ff 90       	pop	r15
    19cc:	ef 90       	pop	r14
    19ce:	bf 90       	pop	r11
    19d0:	af 90       	pop	r10
    19d2:	9f 90       	pop	r9
    19d4:	8f 90       	pop	r8
    19d6:	08 95       	ret

000019d8 <_ZN7hd447805clearEv>:
    19d8:	61 e0       	ldi	r22, 0x01	; 1
    19da:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <_ZN7hd447807commandEh>

000019de <_ZN7hd447804homeEv>:
    19de:	62 e0       	ldi	r22, 0x02	; 2
    19e0:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <_ZN7hd447807commandEh>

000019e4 <_ZN7hd447809setCursorEhh>:
    19e4:	fc 01       	movw	r30, r24
    19e6:	80 85       	ldd	r24, Z+8	; 0x08
    19e8:	48 17       	cp	r20, r24
    19ea:	10 f0       	brcs	.+4      	; 0x19f0 <_ZN7hd447809setCursorEhh+0xc>
    19ec:	4f ef       	ldi	r20, 0xFF	; 255
    19ee:	48 0f       	add	r20, r24
    19f0:	93 85       	ldd	r25, Z+11	; 0x0b
    19f2:	99 23       	and	r25, r25
    19f4:	59 f0       	breq	.+22     	; 0x1a0c <_ZN7hd447809setCursorEhh+0x28>
    19f6:	97 81       	ldd	r25, Z+7	; 0x07
    19f8:	69 17       	cp	r22, r25
    19fa:	30 f0       	brcs	.+12     	; 0x1a08 <_ZN7hd447809setCursorEhh+0x24>
    19fc:	69 1b       	sub	r22, r25
    19fe:	4f 5f       	subi	r20, 0xFF	; 255
    1a00:	48 17       	cp	r20, r24
    1a02:	d0 f3       	brcs	.-12     	; 0x19f8 <_ZN7hd447809setCursorEhh+0x14>
    1a04:	40 e0       	ldi	r20, 0x00	; 0
    1a06:	f8 cf       	rjmp	.-16     	; 0x19f8 <_ZN7hd447809setCursorEhh+0x14>
    1a08:	61 87       	std	Z+9, r22	; 0x09
    1a0a:	42 87       	std	Z+10, r20	; 0x0a
    1a0c:	df 01       	movw	r26, r30
    1a0e:	a4 0f       	add	r26, r20
    1a10:	b1 1d       	adc	r27, r1
    1a12:	1c 96       	adiw	r26, 0x0c	; 12
    1a14:	8c 91       	ld	r24, X
    1a16:	68 0f       	add	r22, r24
    1a18:	60 68       	ori	r22, 0x80	; 128
    1a1a:	cf 01       	movw	r24, r30
    1a1c:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <_ZN7hd447807commandEh>

00001a20 <_ZN7hd447807displayEv>:
    1a20:	fc 01       	movw	r30, r24
    1a22:	65 81       	ldd	r22, Z+5	; 0x05
    1a24:	26 2f       	mov	r18, r22
    1a26:	24 60       	ori	r18, 0x04	; 4
    1a28:	25 83       	std	Z+5, r18	; 0x05
    1a2a:	6c 60       	ori	r22, 0x0C	; 12
    1a2c:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <_ZN7hd447807commandEh>

00001a30 <_ZN7hd447805beginEhhh>:
    1a30:	0f 93       	push	r16
    1a32:	1f 93       	push	r17
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	ec 01       	movw	r28, r24
    1a3a:	02 2f       	mov	r16, r18
    1a3c:	14 2f       	mov	r17, r20
    1a3e:	45 30       	cpi	r20, 0x05	; 5
    1a40:	08 f0       	brcs	.+2      	; 0x1a44 <_ZN7hd447805beginEhhh+0x14>
    1a42:	14 e0       	ldi	r17, 0x04	; 4
    1a44:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a46:	81 11       	cpse	r24, r1
    1a48:	09 c0       	rjmp	.+18     	; 0x1a5c <_ZN7hd447805beginEhhh+0x2c>
    1a4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a4c:	81 11       	cpse	r24, r1
    1a4e:	06 c0       	rjmp	.+12     	; 0x1a5c <_ZN7hd447805beginEhhh+0x2c>
    1a50:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a52:	81 11       	cpse	r24, r1
    1a54:	03 c0       	rjmp	.+6      	; 0x1a5c <_ZN7hd447805beginEhhh+0x2c>
    1a56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a58:	88 23       	and	r24, r24
    1a5a:	29 f0       	breq	.+10     	; 0x1a66 <_ZN7hd447805beginEhhh+0x36>
    1a5c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a5e:	88 23       	and	r24, r24
    1a60:	59 f0       	breq	.+22     	; 0x1a78 <_ZN7hd447805beginEhhh+0x48>
    1a62:	86 17       	cp	r24, r22
    1a64:	49 f0       	breq	.+18     	; 0x1a78 <_ZN7hd447805beginEhhh+0x48>
    1a66:	1c 86       	std	Y+12, r1	; 0x0c
    1a68:	80 e4       	ldi	r24, 0x40	; 64
    1a6a:	8d 87       	std	Y+13, r24	; 0x0d
    1a6c:	6e 87       	std	Y+14, r22	; 0x0e
    1a6e:	86 2f       	mov	r24, r22
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	80 5c       	subi	r24, 0xC0	; 192
    1a74:	9f 4f       	sbci	r25, 0xFF	; 255
    1a76:	8f 87       	std	Y+15, r24	; 0x0f
    1a78:	18 87       	std	Y+8, r17	; 0x08
    1a7a:	6f 83       	std	Y+7, r22	; 0x07
    1a7c:	64 e6       	ldi	r22, 0x64	; 100
    1a7e:	70 e0       	ldi	r23, 0x00	; 0
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <delay>
    1a88:	1c 82       	std	Y+4, r1	; 0x04
    1a8a:	e8 81       	ld	r30, Y
    1a8c:	f9 81       	ldd	r31, Y+1	; 0x01
    1a8e:	00 84       	ldd	r0, Z+8	; 0x08
    1a90:	f1 85       	ldd	r31, Z+9	; 0x09
    1a92:	e0 2d       	mov	r30, r0
    1a94:	ce 01       	movw	r24, r28
    1a96:	09 95       	icall
    1a98:	00 97       	sbiw	r24, 0x00	; 0
    1a9a:	09 f0       	breq	.+2      	; 0x1a9e <_ZN7hd447805beginEhhh+0x6e>
    1a9c:	5e c0       	rjmp	.+188    	; 0x1b5a <_ZN7hd447805beginEhhh+0x12a>
    1a9e:	88 85       	ldd	r24, Y+8	; 0x08
    1aa0:	82 30       	cpi	r24, 0x02	; 2
    1aa2:	18 f0       	brcs	.+6      	; 0x1aaa <_ZN7hd447805beginEhhh+0x7a>
    1aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa6:	88 60       	ori	r24, 0x08	; 8
    1aa8:	8c 83       	std	Y+4, r24	; 0x04
    1aaa:	00 23       	and	r16, r16
    1aac:	29 f0       	breq	.+10     	; 0x1ab8 <_ZN7hd447805beginEhhh+0x88>
    1aae:	11 30       	cpi	r17, 0x01	; 1
    1ab0:	19 f4       	brne	.+6      	; 0x1ab8 <_ZN7hd447805beginEhhh+0x88>
    1ab2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab4:	84 60       	ori	r24, 0x04	; 4
    1ab6:	8c 83       	std	Y+4, r24	; 0x04
    1ab8:	e8 81       	ld	r30, Y
    1aba:	f9 81       	ldd	r31, Y+1	; 0x01
    1abc:	04 84       	ldd	r0, Z+12	; 0x0c
    1abe:	f5 85       	ldd	r31, Z+13	; 0x0d
    1ac0:	e0 2d       	mov	r30, r0
    1ac2:	40 e3       	ldi	r20, 0x30	; 48
    1ac4:	62 e0       	ldi	r22, 0x02	; 2
    1ac6:	ce 01       	movw	r24, r28
    1ac8:	09 95       	icall
    1aca:	65 e0       	ldi	r22, 0x05	; 5
    1acc:	70 e0       	ldi	r23, 0x00	; 0
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <delay>
    1ad6:	e8 81       	ld	r30, Y
    1ad8:	f9 81       	ldd	r31, Y+1	; 0x01
    1ada:	04 84       	ldd	r0, Z+12	; 0x0c
    1adc:	f5 85       	ldd	r31, Z+13	; 0x0d
    1ade:	e0 2d       	mov	r30, r0
    1ae0:	40 e3       	ldi	r20, 0x30	; 48
    1ae2:	62 e0       	ldi	r22, 0x02	; 2
    1ae4:	ce 01       	movw	r24, r28
    1ae6:	09 95       	icall
    1ae8:	61 e0       	ldi	r22, 0x01	; 1
    1aea:	70 e0       	ldi	r23, 0x00	; 0
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <delay>
    1af4:	e8 81       	ld	r30, Y
    1af6:	f9 81       	ldd	r31, Y+1	; 0x01
    1af8:	04 84       	ldd	r0, Z+12	; 0x0c
    1afa:	f5 85       	ldd	r31, Z+13	; 0x0d
    1afc:	e0 2d       	mov	r30, r0
    1afe:	40 e3       	ldi	r20, 0x30	; 48
    1b00:	62 e0       	ldi	r22, 0x02	; 2
    1b02:	ce 01       	movw	r24, r28
    1b04:	09 95       	icall
    1b06:	61 e0       	ldi	r22, 0x01	; 1
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <delay>
    1b12:	8c 81       	ldd	r24, Y+4	; 0x04
    1b14:	84 fd       	sbrc	r24, 4
    1b16:	09 c0       	rjmp	.+18     	; 0x1b2a <_ZN7hd447805beginEhhh+0xfa>
    1b18:	e8 81       	ld	r30, Y
    1b1a:	f9 81       	ldd	r31, Y+1	; 0x01
    1b1c:	04 84       	ldd	r0, Z+12	; 0x0c
    1b1e:	f5 85       	ldd	r31, Z+13	; 0x0d
    1b20:	e0 2d       	mov	r30, r0
    1b22:	40 e2       	ldi	r20, 0x20	; 32
    1b24:	62 e0       	ldi	r22, 0x02	; 2
    1b26:	ce 01       	movw	r24, r28
    1b28:	09 95       	icall
    1b2a:	6c 81       	ldd	r22, Y+4	; 0x04
    1b2c:	60 62       	ori	r22, 0x20	; 32
    1b2e:	ce 01       	movw	r24, r28
    1b30:	0e 94 b5 0c 	call	0x196a	; 0x196a <_ZN7hd447807commandEh>
    1b34:	84 e0       	ldi	r24, 0x04	; 4
    1b36:	8d 83       	std	Y+5, r24	; 0x05
    1b38:	ce 01       	movw	r24, r28
    1b3a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <_ZN7hd447807displayEv>
    1b3e:	ce 01       	movw	r24, r28
    1b40:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <_ZN7hd447805clearEv>
    1b44:	82 e0       	ldi	r24, 0x02	; 2
    1b46:	8e 83       	std	Y+6, r24	; 0x06
    1b48:	66 e0       	ldi	r22, 0x06	; 6
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	0e 94 b5 0c 	call	0x196a	; 0x196a <_ZN7hd447807commandEh>
    1b50:	8c 01       	movw	r16, r24
    1b52:	ce 01       	movw	r24, r28
    1b54:	0e 94 a5 0c 	call	0x194a	; 0x194a <_ZN7hd447809backlightEv>
    1b58:	c8 01       	movw	r24, r16
    1b5a:	df 91       	pop	r29
    1b5c:	cf 91       	pop	r28
    1b5e:	1f 91       	pop	r17
    1b60:	0f 91       	pop	r16
    1b62:	08 95       	ret

00001b64 <_ZN7hd447808noCursorEv>:
    1b64:	fc 01       	movw	r30, r24
    1b66:	65 81       	ldd	r22, Z+5	; 0x05
    1b68:	6d 7f       	andi	r22, 0xFD	; 253
    1b6a:	65 83       	std	Z+5, r22	; 0x05
    1b6c:	68 60       	ori	r22, 0x08	; 8
    1b6e:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <_ZN7hd447807commandEh>

00001b72 <_ZN7hd447807noBlinkEv>:
    1b72:	fc 01       	movw	r30, r24
    1b74:	65 81       	ldd	r22, Z+5	; 0x05
    1b76:	6e 7f       	andi	r22, 0xFE	; 254
    1b78:	65 83       	std	Z+5, r22	; 0x05
    1b7a:	68 60       	ori	r22, 0x08	; 8
    1b7c:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <_ZN7hd447807commandEh>

00001b80 <_ZN7hd447806_writeEh>:
    1b80:	cf 92       	push	r12
    1b82:	df 92       	push	r13
    1b84:	ef 92       	push	r14
    1b86:	ff 92       	push	r15
    1b88:	0f 93       	push	r16
    1b8a:	1f 93       	push	r17
    1b8c:	cf 93       	push	r28
    1b8e:	df 93       	push	r29
    1b90:	ec 01       	movw	r28, r24
    1b92:	46 2f       	mov	r20, r22
    1b94:	e8 81       	ld	r30, Y
    1b96:	f9 81       	ldd	r31, Y+1	; 0x01
    1b98:	04 84       	ldd	r0, Z+12	; 0x0c
    1b9a:	f5 85       	ldd	r31, Z+13	; 0x0d
    1b9c:	e0 2d       	mov	r30, r0
    1b9e:	61 e0       	ldi	r22, 0x01	; 1
    1ba0:	09 95       	icall
    1ba2:	8c 01       	movw	r16, r24
    1ba4:	cc 88       	ldd	r12, Y+20	; 0x14
    1ba6:	dd 88       	ldd	r13, Y+21	; 0x15
    1ba8:	ee 88       	ldd	r14, Y+22	; 0x16
    1baa:	ff 88       	ldd	r15, Y+23	; 0x17
    1bac:	0e 94 bd 19 	call	0x337a	; 0x337a <micros>
    1bb0:	68 8f       	std	Y+24, r22	; 0x18
    1bb2:	79 8f       	std	Y+25, r23	; 0x19
    1bb4:	8a 8f       	std	Y+26, r24	; 0x1a
    1bb6:	9b 8f       	std	Y+27, r25	; 0x1b
    1bb8:	cc 8e       	std	Y+28, r12	; 0x1c
    1bba:	dd 8e       	std	Y+29, r13	; 0x1d
    1bbc:	ee 8e       	std	Y+30, r14	; 0x1e
    1bbe:	ff 8e       	std	Y+31, r15	; 0x1f
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	01 2b       	or	r16, r17
    1bc6:	11 f0       	breq	.+4      	; 0x1bcc <_ZN7hd447806_writeEh+0x4c>
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	df 91       	pop	r29
    1bce:	cf 91       	pop	r28
    1bd0:	1f 91       	pop	r17
    1bd2:	0f 91       	pop	r16
    1bd4:	ff 90       	pop	r15
    1bd6:	ef 90       	pop	r14
    1bd8:	df 90       	pop	r13
    1bda:	cf 90       	pop	r12
    1bdc:	08 95       	ret

00001bde <_ZN7hd447805writeEh>:

// write() - process data character byte to lcd
// returns number of bytes successfully written to device
// i.e. 1 if success or 0 if no character was processed (error)
size_t hd44780::write(uint8_t value)
{
    1bde:	0f 93       	push	r16
    1be0:	1f 93       	push	r17
    1be2:	cf 93       	push	r28
    1be4:	df 93       	push	r29
    1be6:	ec 01       	movw	r28, r24
size_t rval;

	rval = _write(value);
    1be8:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <_ZN7hd447806_writeEh>
    1bec:	8c 01       	movw	r16, r24
	if(_wraplines)
    1bee:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bf0:	88 23       	and	r24, r24
    1bf2:	99 f0       	breq	.+38     	; 0x1c1a <_ZN7hd447805writeEh+0x3c>
	{
		// currently only works for left to right mode
		if(++_curcol >= _cols)
    1bf4:	89 85       	ldd	r24, Y+9	; 0x09
    1bf6:	8f 5f       	subi	r24, 0xFF	; 255
    1bf8:	89 87       	std	Y+9, r24	; 0x09
    1bfa:	9f 81       	ldd	r25, Y+7	; 0x07
    1bfc:	89 17       	cp	r24, r25
    1bfe:	68 f0       	brcs	.+26     	; 0x1c1a <_ZN7hd447805writeEh+0x3c>
		{
			_curcol = 0;
    1c00:	19 86       	std	Y+9, r1	; 0x09
			_currow++;
    1c02:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c04:	8f 5f       	subi	r24, 0xFF	; 255
    1c06:	8a 87       	std	Y+10, r24	; 0x0a
			if(_currow >= _rows)
    1c08:	98 85       	ldd	r25, Y+8	; 0x08
    1c0a:	89 17       	cp	r24, r25
    1c0c:	08 f0       	brcs	.+2      	; 0x1c10 <_ZN7hd447805writeEh+0x32>
				_currow = 0;
    1c0e:	1a 86       	std	Y+10, r1	; 0x0a
			setCursor(_curcol, _currow);
    1c10:	4a 85       	ldd	r20, Y+10	; 0x0a
    1c12:	60 e0       	ldi	r22, 0x00	; 0
    1c14:	ce 01       	movw	r24, r28
    1c16:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <_ZN7hd447809setCursorEhh>
		}
	}
	return (rval);
}
    1c1a:	c8 01       	movw	r24, r16
    1c1c:	df 91       	pop	r29
    1c1e:	cf 91       	pop	r28
    1c20:	1f 91       	pop	r17
    1c22:	0f 91       	pop	r16
    1c24:	08 95       	ret

00001c26 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1c26:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <twi_state>
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <twi_sendStop>
    1c30:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <twi_inRepStart>
    1c34:	61 e0       	ldi	r22, 0x01	; 1
    1c36:	82 e0       	ldi	r24, 0x02	; 2
    1c38:	0e 94 29 1b 	call	0x3652	; 0x3652 <digitalWrite>
    1c3c:	61 e0       	ldi	r22, 0x01	; 1
    1c3e:	83 e0       	ldi	r24, 0x03	; 3
    1c40:	0e 94 29 1b 	call	0x3652	; 0x3652 <digitalWrite>
    1c44:	e9 eb       	ldi	r30, 0xB9	; 185
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	8e 7f       	andi	r24, 0xFE	; 254
    1c4c:	80 83       	st	Z, r24
    1c4e:	80 81       	ld	r24, Z
    1c50:	8d 7f       	andi	r24, 0xFD	; 253
    1c52:	80 83       	st	Z, r24
    1c54:	88 e4       	ldi	r24, 0x48	; 72
    1c56:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1c5a:	85 e4       	ldi	r24, 0x45	; 69
    1c5c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1c60:	08 95       	ret

00001c62 <twi_readFrom>:
    1c62:	41 32       	cpi	r20, 0x21	; 33
    1c64:	08 f0       	brcs	.+2      	; 0x1c68 <twi_readFrom+0x6>
    1c66:	43 c0       	rjmp	.+134    	; 0x1cee <twi_readFrom+0x8c>
    1c68:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <twi_state>
    1c6c:	91 11       	cpse	r25, r1
    1c6e:	fc cf       	rjmp	.-8      	; 0x1c68 <twi_readFrom+0x6>
    1c70:	91 e0       	ldi	r25, 0x01	; 1
    1c72:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <twi_state>
    1c76:	20 93 3a 04 	sts	0x043A, r18	; 0x80043a <twi_sendStop>
    1c7a:	2f ef       	ldi	r18, 0xFF	; 255
    1c7c:	20 93 cf 03 	sts	0x03CF, r18	; 0x8003cf <twi_error>
    1c80:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <twi_masterBufferIndex>
    1c84:	24 0f       	add	r18, r20
    1c86:	20 93 13 04 	sts	0x0413, r18	; 0x800413 <twi_masterBufferLength>
    1c8a:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <twi_slarw>
    1c8e:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <twi_slarw>
    1c92:	88 0f       	add	r24, r24
    1c94:	89 2b       	or	r24, r25
    1c96:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <twi_slarw>
    1c9a:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <twi_inRepStart>
    1c9e:	81 30       	cpi	r24, 0x01	; 1
    1ca0:	61 f4       	brne	.+24     	; 0x1cba <twi_readFrom+0x58>
    1ca2:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <twi_inRepStart>
    1ca6:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <twi_slarw>
    1caa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1cae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1cb2:	83 fd       	sbrc	r24, 3
    1cb4:	f8 cf       	rjmp	.-16     	; 0x1ca6 <twi_readFrom+0x44>
    1cb6:	85 ec       	ldi	r24, 0xC5	; 197
    1cb8:	01 c0       	rjmp	.+2      	; 0x1cbc <twi_readFrom+0x5a>
    1cba:	85 ee       	ldi	r24, 0xE5	; 229
    1cbc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1cc0:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <twi_state>
    1cc4:	81 30       	cpi	r24, 0x01	; 1
    1cc6:	e1 f3       	breq	.-8      	; 0x1cc0 <twi_readFrom+0x5e>
    1cc8:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <twi_masterBufferIndex>
    1ccc:	84 17       	cp	r24, r20
    1cce:	10 f4       	brcc	.+4      	; 0x1cd4 <twi_readFrom+0x72>
    1cd0:	40 91 14 04 	lds	r20, 0x0414	; 0x800414 <twi_masterBufferIndex>
    1cd4:	a5 e1       	ldi	r26, 0x15	; 21
    1cd6:	b4 e0       	ldi	r27, 0x04	; 4
    1cd8:	96 2f       	mov	r25, r22
    1cda:	fb 01       	movw	r30, r22
    1cdc:	8e 2f       	mov	r24, r30
    1cde:	89 1b       	sub	r24, r25
    1ce0:	84 17       	cp	r24, r20
    1ce2:	18 f4       	brcc	.+6      	; 0x1cea <twi_readFrom+0x88>
    1ce4:	8d 91       	ld	r24, X+
    1ce6:	81 93       	st	Z+, r24
    1ce8:	f9 cf       	rjmp	.-14     	; 0x1cdc <twi_readFrom+0x7a>
    1cea:	84 2f       	mov	r24, r20
    1cec:	08 95       	ret
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	08 95       	ret

00001cf2 <twi_writeTo>:
    1cf2:	0f 93       	push	r16
    1cf4:	41 32       	cpi	r20, 0x21	; 33
    1cf6:	08 f0       	brcs	.+2      	; 0x1cfa <twi_writeTo+0x8>
    1cf8:	4a c0       	rjmp	.+148    	; 0x1d8e <twi_writeTo+0x9c>
    1cfa:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <twi_state>
    1cfe:	91 11       	cpse	r25, r1
    1d00:	fc cf       	rjmp	.-8      	; 0x1cfa <twi_writeTo+0x8>
    1d02:	32 e0       	ldi	r19, 0x02	; 2
    1d04:	30 93 3c 04 	sts	0x043C, r19	; 0x80043c <twi_state>
    1d08:	00 93 3a 04 	sts	0x043A, r16	; 0x80043a <twi_sendStop>
    1d0c:	3f ef       	ldi	r19, 0xFF	; 255
    1d0e:	30 93 cf 03 	sts	0x03CF, r19	; 0x8003cf <twi_error>
    1d12:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <twi_masterBufferIndex>
    1d16:	40 93 13 04 	sts	0x0413, r20	; 0x800413 <twi_masterBufferLength>
    1d1a:	56 2f       	mov	r21, r22
    1d1c:	a5 e1       	ldi	r26, 0x15	; 21
    1d1e:	b4 e0       	ldi	r27, 0x04	; 4
    1d20:	fb 01       	movw	r30, r22
    1d22:	3e 2f       	mov	r19, r30
    1d24:	35 1b       	sub	r19, r21
    1d26:	34 17       	cp	r19, r20
    1d28:	18 f4       	brcc	.+6      	; 0x1d30 <twi_writeTo+0x3e>
    1d2a:	31 91       	ld	r19, Z+
    1d2c:	3d 93       	st	X+, r19
    1d2e:	f9 cf       	rjmp	.-14     	; 0x1d22 <twi_writeTo+0x30>
    1d30:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <twi_slarw>
    1d34:	30 91 3b 04 	lds	r19, 0x043B	; 0x80043b <twi_slarw>
    1d38:	88 0f       	add	r24, r24
    1d3a:	83 2b       	or	r24, r19
    1d3c:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <twi_slarw>
    1d40:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <twi_inRepStart>
    1d44:	81 30       	cpi	r24, 0x01	; 1
    1d46:	61 f4       	brne	.+24     	; 0x1d60 <twi_writeTo+0x6e>
    1d48:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <twi_inRepStart>
    1d4c:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <twi_slarw>
    1d50:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1d54:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1d58:	83 fd       	sbrc	r24, 3
    1d5a:	f8 cf       	rjmp	.-16     	; 0x1d4c <twi_writeTo+0x5a>
    1d5c:	85 ec       	ldi	r24, 0xC5	; 197
    1d5e:	01 c0       	rjmp	.+2      	; 0x1d62 <twi_writeTo+0x70>
    1d60:	85 ee       	ldi	r24, 0xE5	; 229
    1d62:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1d66:	22 23       	and	r18, r18
    1d68:	21 f0       	breq	.+8      	; 0x1d72 <twi_writeTo+0x80>
    1d6a:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <twi_state>
    1d6e:	82 30       	cpi	r24, 0x02	; 2
    1d70:	d1 f3       	breq	.-12     	; 0x1d66 <twi_writeTo+0x74>
    1d72:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <twi_error>
    1d76:	8f 3f       	cpi	r24, 0xFF	; 255
    1d78:	79 f0       	breq	.+30     	; 0x1d98 <twi_writeTo+0xa6>
    1d7a:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <twi_error>
    1d7e:	80 32       	cpi	r24, 0x20	; 32
    1d80:	41 f0       	breq	.+16     	; 0x1d92 <twi_writeTo+0xa0>
    1d82:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <twi_error>
    1d86:	80 33       	cpi	r24, 0x30	; 48
    1d88:	31 f0       	breq	.+12     	; 0x1d96 <twi_writeTo+0xa4>
    1d8a:	94 e0       	ldi	r25, 0x04	; 4
    1d8c:	05 c0       	rjmp	.+10     	; 0x1d98 <twi_writeTo+0xa6>
    1d8e:	91 e0       	ldi	r25, 0x01	; 1
    1d90:	03 c0       	rjmp	.+6      	; 0x1d98 <twi_writeTo+0xa6>
    1d92:	92 e0       	ldi	r25, 0x02	; 2
    1d94:	01 c0       	rjmp	.+2      	; 0x1d98 <twi_writeTo+0xa6>
    1d96:	93 e0       	ldi	r25, 0x03	; 3
    1d98:	89 2f       	mov	r24, r25
    1d9a:	0f 91       	pop	r16
    1d9c:	08 95       	ret

00001d9e <twi_transmit>:
    1d9e:	40 91 f1 03 	lds	r20, 0x03F1	; 0x8003f1 <twi_txBufferLength>
    1da2:	26 2f       	mov	r18, r22
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	24 0f       	add	r18, r20
    1da8:	31 1d       	adc	r19, r1
    1daa:	21 32       	cpi	r18, 0x21	; 33
    1dac:	31 05       	cpc	r19, r1
    1dae:	dc f4       	brge	.+54     	; 0x1de6 <twi_transmit+0x48>
    1db0:	20 91 3c 04 	lds	r18, 0x043C	; 0x80043c <twi_state>
    1db4:	24 30       	cpi	r18, 0x04	; 4
    1db6:	c9 f4       	brne	.+50     	; 0x1dea <twi_transmit+0x4c>
    1db8:	fc 01       	movw	r30, r24
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	86 17       	cp	r24, r22
    1dc0:	58 f4       	brcc	.+22     	; 0x1dd8 <twi_transmit+0x3a>
    1dc2:	30 91 f1 03 	lds	r19, 0x03F1	; 0x8003f1 <twi_txBufferLength>
    1dc6:	21 91       	ld	r18, Z+
    1dc8:	dc 01       	movw	r26, r24
    1dca:	ad 50       	subi	r26, 0x0D	; 13
    1dcc:	bc 4f       	sbci	r27, 0xFC	; 252
    1dce:	a3 0f       	add	r26, r19
    1dd0:	b1 1d       	adc	r27, r1
    1dd2:	2c 93       	st	X, r18
    1dd4:	01 96       	adiw	r24, 0x01	; 1
    1dd6:	f3 cf       	rjmp	.-26     	; 0x1dbe <twi_transmit+0x20>
    1dd8:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <twi_txBufferLength>
    1ddc:	68 0f       	add	r22, r24
    1dde:	60 93 f1 03 	sts	0x03F1, r22	; 0x8003f1 <twi_txBufferLength>
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	08 95       	ret
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	08 95       	ret
    1dea:	82 e0       	ldi	r24, 0x02	; 2
    1dec:	08 95       	ret

00001dee <twi_attachSlaveRxEvent>:
    1dee:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <twi_onSlaveReceive+0x1>
    1df2:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <twi_onSlaveReceive>
    1df6:	08 95       	ret

00001df8 <twi_attachSlaveTxEvent>:
    1df8:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <twi_onSlaveTransmit+0x1>
    1dfc:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <twi_onSlaveTransmit>
    1e00:	08 95       	ret

00001e02 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1e02:	85 ed       	ldi	r24, 0xD5	; 213
    1e04:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1e08:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1e0c:	84 fd       	sbrc	r24, 4
    1e0e:	fc cf       	rjmp	.-8      	; 0x1e08 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1e10:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <twi_state>
    1e14:	08 95       	ret

00001e16 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1e16:	85 ec       	ldi	r24, 0xC5	; 197
    1e18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    1e1c:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <twi_state>
    1e20:	08 95       	ret

00001e22 <__vector_36>:
}

ISR(TWI_vect)
{
    1e22:	1f 92       	push	r1
    1e24:	0f 92       	push	r0
    1e26:	0f b6       	in	r0, 0x3f	; 63
    1e28:	0f 92       	push	r0
    1e2a:	11 24       	eor	r1, r1
    1e2c:	2f 93       	push	r18
    1e2e:	3f 93       	push	r19
    1e30:	4f 93       	push	r20
    1e32:	5f 93       	push	r21
    1e34:	6f 93       	push	r22
    1e36:	7f 93       	push	r23
    1e38:	8f 93       	push	r24
    1e3a:	9f 93       	push	r25
    1e3c:	af 93       	push	r26
    1e3e:	bf 93       	push	r27
    1e40:	ef 93       	push	r30
    1e42:	ff 93       	push	r31
  switch(TW_STATUS){
    1e44:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1e48:	88 7f       	andi	r24, 0xF8	; 248
    1e4a:	80 36       	cpi	r24, 0x60	; 96
    1e4c:	09 f4       	brne	.+2      	; 0x1e50 <__vector_36+0x2e>
    1e4e:	9e c0       	rjmp	.+316    	; 0x1f8c <__vector_36+0x16a>
    1e50:	78 f5       	brcc	.+94     	; 0x1eb0 <__vector_36+0x8e>
    1e52:	88 32       	cpi	r24, 0x28	; 40
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <__vector_36+0x36>
    1e56:	5d c0       	rjmp	.+186    	; 0x1f12 <__vector_36+0xf0>
    1e58:	90 f4       	brcc	.+36     	; 0x1e7e <__vector_36+0x5c>
    1e5a:	80 31       	cpi	r24, 0x10	; 16
    1e5c:	09 f4       	brne	.+2      	; 0x1e60 <__vector_36+0x3e>
    1e5e:	56 c0       	rjmp	.+172    	; 0x1f0c <__vector_36+0xea>
    1e60:	38 f4       	brcc	.+14     	; 0x1e70 <__vector_36+0x4e>
    1e62:	88 23       	and	r24, r24
    1e64:	09 f4       	brne	.+2      	; 0x1e68 <__vector_36+0x46>
    1e66:	f5 c0       	rjmp	.+490    	; 0x2052 <__vector_36+0x230>
    1e68:	88 30       	cpi	r24, 0x08	; 8
    1e6a:	09 f4       	brne	.+2      	; 0x1e6e <__vector_36+0x4c>
    1e6c:	4f c0       	rjmp	.+158    	; 0x1f0c <__vector_36+0xea>
    1e6e:	f5 c0       	rjmp	.+490    	; 0x205a <__vector_36+0x238>
    1e70:	88 31       	cpi	r24, 0x18	; 24
    1e72:	09 f4       	brne	.+2      	; 0x1e76 <__vector_36+0x54>
    1e74:	4e c0       	rjmp	.+156    	; 0x1f12 <__vector_36+0xf0>
    1e76:	80 32       	cpi	r24, 0x20	; 32
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <__vector_36+0x5a>
    1e7a:	5f c0       	rjmp	.+190    	; 0x1f3a <__vector_36+0x118>
    1e7c:	ee c0       	rjmp	.+476    	; 0x205a <__vector_36+0x238>
    1e7e:	80 34       	cpi	r24, 0x40	; 64
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <__vector_36+0x62>
    1e82:	6a c0       	rjmp	.+212    	; 0x1f58 <__vector_36+0x136>
    1e84:	58 f4       	brcc	.+22     	; 0x1e9c <__vector_36+0x7a>
    1e86:	80 33       	cpi	r24, 0x30	; 48
    1e88:	09 f4       	brne	.+2      	; 0x1e8c <__vector_36+0x6a>
    1e8a:	57 c0       	rjmp	.+174    	; 0x1f3a <__vector_36+0x118>
    1e8c:	88 33       	cpi	r24, 0x38	; 56
    1e8e:	09 f0       	breq	.+2      	; 0x1e92 <__vector_36+0x70>
    1e90:	e4 c0       	rjmp	.+456    	; 0x205a <__vector_36+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1e92:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <twi_error>
      twi_releaseBus();
    1e96:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <twi_releaseBus>
      break;
    1e9a:	df c0       	rjmp	.+446    	; 0x205a <__vector_36+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1e9c:	80 35       	cpi	r24, 0x50	; 80
    1e9e:	09 f4       	brne	.+2      	; 0x1ea2 <__vector_36+0x80>
    1ea0:	4f c0       	rjmp	.+158    	; 0x1f40 <__vector_36+0x11e>
    1ea2:	88 35       	cpi	r24, 0x58	; 88
    1ea4:	09 f4       	brne	.+2      	; 0x1ea8 <__vector_36+0x86>
    1ea6:	5d c0       	rjmp	.+186    	; 0x1f62 <__vector_36+0x140>
    1ea8:	88 34       	cpi	r24, 0x48	; 72
    1eaa:	09 f0       	breq	.+2      	; 0x1eae <__vector_36+0x8c>
    1eac:	d6 c0       	rjmp	.+428    	; 0x205a <__vector_36+0x238>
    1eae:	d3 c0       	rjmp	.+422    	; 0x2056 <__vector_36+0x234>
    1eb0:	88 39       	cpi	r24, 0x98	; 152
    1eb2:	09 f4       	brne	.+2      	; 0x1eb6 <__vector_36+0x94>
    1eb4:	c4 c0       	rjmp	.+392    	; 0x203e <__vector_36+0x21c>
    1eb6:	a8 f4       	brcc	.+42     	; 0x1ee2 <__vector_36+0xc0>
    1eb8:	88 37       	cpi	r24, 0x78	; 120
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <__vector_36+0x9c>
    1ebc:	67 c0       	rjmp	.+206    	; 0x1f8c <__vector_36+0x16a>
    1ebe:	38 f4       	brcc	.+14     	; 0x1ece <__vector_36+0xac>
    1ec0:	88 36       	cpi	r24, 0x68	; 104
    1ec2:	09 f4       	brne	.+2      	; 0x1ec6 <__vector_36+0xa4>
    1ec4:	63 c0       	rjmp	.+198    	; 0x1f8c <__vector_36+0x16a>
    1ec6:	80 37       	cpi	r24, 0x70	; 112
    1ec8:	09 f4       	brne	.+2      	; 0x1ecc <__vector_36+0xaa>
    1eca:	60 c0       	rjmp	.+192    	; 0x1f8c <__vector_36+0x16a>
    1ecc:	c6 c0       	rjmp	.+396    	; 0x205a <__vector_36+0x238>
    1ece:	88 38       	cpi	r24, 0x88	; 136
    1ed0:	09 f4       	brne	.+2      	; 0x1ed4 <__vector_36+0xb2>
    1ed2:	b5 c0       	rjmp	.+362    	; 0x203e <__vector_36+0x21c>
    1ed4:	80 39       	cpi	r24, 0x90	; 144
    1ed6:	09 f4       	brne	.+2      	; 0x1eda <__vector_36+0xb8>
    1ed8:	5f c0       	rjmp	.+190    	; 0x1f98 <__vector_36+0x176>
    1eda:	80 38       	cpi	r24, 0x80	; 128
    1edc:	09 f0       	breq	.+2      	; 0x1ee0 <__vector_36+0xbe>
    1ede:	bd c0       	rjmp	.+378    	; 0x205a <__vector_36+0x238>
    1ee0:	5b c0       	rjmp	.+182    	; 0x1f98 <__vector_36+0x176>
    1ee2:	80 3b       	cpi	r24, 0xB0	; 176
    1ee4:	09 f4       	brne	.+2      	; 0x1ee8 <__vector_36+0xc6>
    1ee6:	83 c0       	rjmp	.+262    	; 0x1fee <__vector_36+0x1cc>
    1ee8:	38 f4       	brcc	.+14     	; 0x1ef8 <__vector_36+0xd6>
    1eea:	80 3a       	cpi	r24, 0xA0	; 160
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <__vector_36+0xce>
    1eee:	66 c0       	rjmp	.+204    	; 0x1fbc <__vector_36+0x19a>
    1ef0:	88 3a       	cpi	r24, 0xA8	; 168
    1ef2:	09 f4       	brne	.+2      	; 0x1ef6 <__vector_36+0xd4>
    1ef4:	7c c0       	rjmp	.+248    	; 0x1fee <__vector_36+0x1cc>
    1ef6:	b1 c0       	rjmp	.+354    	; 0x205a <__vector_36+0x238>
    1ef8:	80 3c       	cpi	r24, 0xC0	; 192
    1efa:	09 f4       	brne	.+2      	; 0x1efe <__vector_36+0xdc>
    1efc:	a4 c0       	rjmp	.+328    	; 0x2046 <__vector_36+0x224>
    1efe:	88 3c       	cpi	r24, 0xC8	; 200
    1f00:	09 f4       	brne	.+2      	; 0x1f04 <__vector_36+0xe2>
    1f02:	a1 c0       	rjmp	.+322    	; 0x2046 <__vector_36+0x224>
    1f04:	88 3b       	cpi	r24, 0xB8	; 184
    1f06:	09 f4       	brne	.+2      	; 0x1f0a <__vector_36+0xe8>
    1f08:	87 c0       	rjmp	.+270    	; 0x2018 <__vector_36+0x1f6>
    1f0a:	a7 c0       	rjmp	.+334    	; 0x205a <__vector_36+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1f0c:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <twi_slarw>
    1f10:	10 c0       	rjmp	.+32     	; 0x1f32 <__vector_36+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1f12:	90 91 14 04 	lds	r25, 0x0414	; 0x800414 <twi_masterBufferIndex>
    1f16:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <twi_masterBufferLength>
    1f1a:	98 17       	cp	r25, r24
    1f1c:	70 f5       	brcc	.+92     	; 0x1f7a <__vector_36+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1f1e:	e0 91 14 04 	lds	r30, 0x0414	; 0x800414 <twi_masterBufferIndex>
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	8e 0f       	add	r24, r30
    1f26:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <twi_masterBufferIndex>
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	eb 5e       	subi	r30, 0xEB	; 235
    1f2e:	fb 4f       	sbci	r31, 0xFB	; 251
    1f30:	80 81       	ld	r24, Z
    1f32:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1f36:	85 ec       	ldi	r24, 0xC5	; 197
    1f38:	83 c0       	rjmp	.+262    	; 0x2040 <__vector_36+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1f3a:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <twi_error>
    1f3e:	8b c0       	rjmp	.+278    	; 0x2056 <__vector_36+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1f40:	e0 91 14 04 	lds	r30, 0x0414	; 0x800414 <twi_masterBufferIndex>
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	8e 0f       	add	r24, r30
    1f48:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <twi_masterBufferIndex>
    1f4c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	eb 5e       	subi	r30, 0xEB	; 235
    1f54:	fb 4f       	sbci	r31, 0xFB	; 251
    1f56:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1f58:	90 91 14 04 	lds	r25, 0x0414	; 0x800414 <twi_masterBufferIndex>
    1f5c:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <twi_masterBufferLength>
    1f60:	6b c0       	rjmp	.+214    	; 0x2038 <__vector_36+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1f62:	e0 91 14 04 	lds	r30, 0x0414	; 0x800414 <twi_masterBufferIndex>
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	8e 0f       	add	r24, r30
    1f6a:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <twi_masterBufferIndex>
    1f6e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	eb 5e       	subi	r30, 0xEB	; 235
    1f76:	fb 4f       	sbci	r31, 0xFB	; 251
    1f78:	80 83       	st	Z, r24
	if (twi_sendStop)
    1f7a:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <twi_sendStop>
    1f7e:	81 11       	cpse	r24, r1
    1f80:	6a c0       	rjmp	.+212    	; 0x2056 <__vector_36+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1f88:	84 ea       	ldi	r24, 0xA4	; 164
    1f8a:	5e c0       	rjmp	.+188    	; 0x2048 <__vector_36+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1f8c:	83 e0       	ldi	r24, 0x03	; 3
    1f8e:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1f92:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <twi_rxBufferIndex>
    1f96:	cf cf       	rjmp	.-98     	; 0x1f36 <__vector_36+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1f98:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <twi_rxBufferIndex>
    1f9c:	80 32       	cpi	r24, 0x20	; 32
    1f9e:	08 f0       	brcs	.+2      	; 0x1fa2 <__vector_36+0x180>
    1fa0:	4e c0       	rjmp	.+156    	; 0x203e <__vector_36+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1fa2:	e0 91 d0 03 	lds	r30, 0x03D0	; 0x8003d0 <twi_rxBufferIndex>
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	8e 0f       	add	r24, r30
    1faa:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <twi_rxBufferIndex>
    1fae:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	ef 52       	subi	r30, 0x2F	; 47
    1fb6:	fc 4f       	sbci	r31, 0xFC	; 252
    1fb8:	80 83       	st	Z, r24
    1fba:	bd cf       	rjmp	.-134    	; 0x1f36 <__vector_36+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1fbc:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1fc0:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <twi_rxBufferIndex>
    1fc4:	80 32       	cpi	r24, 0x20	; 32
    1fc6:	30 f4       	brcc	.+12     	; 0x1fd4 <__vector_36+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1fc8:	e0 91 d0 03 	lds	r30, 0x03D0	; 0x8003d0 <twi_rxBufferIndex>
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	ef 52       	subi	r30, 0x2F	; 47
    1fd0:	fc 4f       	sbci	r31, 0xFC	; 252
    1fd2:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1fd4:	60 91 d0 03 	lds	r22, 0x03D0	; 0x8003d0 <twi_rxBufferIndex>
    1fd8:	70 e0       	ldi	r23, 0x00	; 0
    1fda:	e0 91 35 04 	lds	r30, 0x0435	; 0x800435 <twi_onSlaveReceive>
    1fde:	f0 91 36 04 	lds	r31, 0x0436	; 0x800436 <twi_onSlaveReceive+0x1>
    1fe2:	81 ed       	ldi	r24, 0xD1	; 209
    1fe4:	93 e0       	ldi	r25, 0x03	; 3
    1fe6:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1fe8:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <twi_rxBufferIndex>
      break;
    1fec:	36 c0       	rjmp	.+108    	; 0x205a <__vector_36+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1fee:	84 e0       	ldi	r24, 0x04	; 4
    1ff0:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1ff4:	10 92 f2 03 	sts	0x03F2, r1	; 0x8003f2 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1ff8:	10 92 f1 03 	sts	0x03F1, r1	; 0x8003f1 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1ffc:	e0 91 37 04 	lds	r30, 0x0437	; 0x800437 <twi_onSlaveTransmit>
    2000:	f0 91 38 04 	lds	r31, 0x0438	; 0x800438 <twi_onSlaveTransmit+0x1>
    2004:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2006:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <twi_txBufferLength>
    200a:	81 11       	cpse	r24, r1
    200c:	05 c0       	rjmp	.+10     	; 0x2018 <__vector_36+0x1f6>
        twi_txBufferLength = 1;
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2014:	10 92 f3 03 	sts	0x03F3, r1	; 0x8003f3 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2018:	e0 91 f2 03 	lds	r30, 0x03F2	; 0x8003f2 <twi_txBufferIndex>
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	8e 0f       	add	r24, r30
    2020:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <twi_txBufferIndex>
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	ed 50       	subi	r30, 0x0D	; 13
    2028:	fc 4f       	sbci	r31, 0xFC	; 252
    202a:	80 81       	ld	r24, Z
    202c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2030:	90 91 f2 03 	lds	r25, 0x03F2	; 0x8003f2 <twi_txBufferIndex>
    2034:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <twi_txBufferLength>
    2038:	98 17       	cp	r25, r24
    203a:	08 f4       	brcc	.+2      	; 0x203e <__vector_36+0x21c>
    203c:	7c cf       	rjmp	.-264    	; 0x1f36 <__vector_36+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    203e:	85 e8       	ldi	r24, 0x85	; 133
    2040:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2044:	0a c0       	rjmp	.+20     	; 0x205a <__vector_36+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2046:	85 ec       	ldi	r24, 0xC5	; 197
    2048:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    204c:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <twi_state>
      break;
    2050:	04 c0       	rjmp	.+8      	; 0x205a <__vector_36+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2052:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <twi_error>
      twi_stop();
    2056:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <twi_stop>
      break;
  }
}
    205a:	ff 91       	pop	r31
    205c:	ef 91       	pop	r30
    205e:	bf 91       	pop	r27
    2060:	af 91       	pop	r26
    2062:	9f 91       	pop	r25
    2064:	8f 91       	pop	r24
    2066:	7f 91       	pop	r23
    2068:	6f 91       	pop	r22
    206a:	5f 91       	pop	r21
    206c:	4f 91       	pop	r20
    206e:	3f 91       	pop	r19
    2070:	2f 91       	pop	r18
    2072:	0f 90       	pop	r0
    2074:	0f be       	out	0x3f, r0	; 63
    2076:	0f 90       	pop	r0
    2078:	1f 90       	pop	r1
    207a:	18 95       	reti

0000207c <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    207c:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <_ZN7TwoWire14rxBufferLengthE>
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	20 91 72 04 	lds	r18, 0x0472	; 0x800472 <_ZN7TwoWire13rxBufferIndexE>
    2086:	82 1b       	sub	r24, r18
    2088:	91 09       	sbc	r25, r1
    208a:	08 95       	ret

0000208c <_ZN7TwoWire4readEv>:
    208c:	90 91 72 04 	lds	r25, 0x0472	; 0x800472 <_ZN7TwoWire13rxBufferIndexE>
    2090:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <_ZN7TwoWire14rxBufferLengthE>
    2094:	98 17       	cp	r25, r24
    2096:	50 f4       	brcc	.+20     	; 0x20ac <_ZN7TwoWire4readEv+0x20>
    2098:	e9 2f       	mov	r30, r25
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	ed 58       	subi	r30, 0x8D	; 141
    209e:	fb 4f       	sbci	r31, 0xFB	; 251
    20a0:	20 81       	ld	r18, Z
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	9f 5f       	subi	r25, 0xFF	; 255
    20a6:	90 93 72 04 	sts	0x0472, r25	; 0x800472 <_ZN7TwoWire13rxBufferIndexE>
    20aa:	02 c0       	rjmp	.+4      	; 0x20b0 <_ZN7TwoWire4readEv+0x24>
    20ac:	2f ef       	ldi	r18, 0xFF	; 255
    20ae:	3f ef       	ldi	r19, 0xFF	; 255
    20b0:	c9 01       	movw	r24, r18
    20b2:	08 95       	ret

000020b4 <_ZN7TwoWire4peekEv>:
    20b4:	e0 91 72 04 	lds	r30, 0x0472	; 0x800472 <_ZN7TwoWire13rxBufferIndexE>
    20b8:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <_ZN7TwoWire14rxBufferLengthE>
    20bc:	e8 17       	cp	r30, r24
    20be:	30 f4       	brcc	.+12     	; 0x20cc <_ZN7TwoWire4peekEv+0x18>
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	ed 58       	subi	r30, 0x8D	; 141
    20c4:	fb 4f       	sbci	r31, 0xFB	; 251
    20c6:	80 81       	ld	r24, Z
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	08 95       	ret
    20cc:	8f ef       	ldi	r24, 0xFF	; 255
    20ce:	9f ef       	ldi	r25, 0xFF	; 255
    20d0:	08 95       	ret

000020d2 <_ZN7TwoWire5flushEv>:
    20d2:	08 95       	ret

000020d4 <_ZN7TwoWire16onReceiveServiceEPhi>:
    20d4:	cf 93       	push	r28
    20d6:	df 93       	push	r29
    20d8:	ec 01       	movw	r28, r24
    20da:	e0 91 49 04 	lds	r30, 0x0449	; 0x800449 <_ZN7TwoWire14user_onReceiveE>
    20de:	f0 91 4a 04 	lds	r31, 0x044A	; 0x80044a <_ZN7TwoWire14user_onReceiveE+0x1>
    20e2:	30 97       	sbiw	r30, 0x00	; 0
    20e4:	f1 f0       	breq	.+60     	; 0x2122 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    20e6:	90 91 72 04 	lds	r25, 0x0472	; 0x800472 <_ZN7TwoWire13rxBufferIndexE>
    20ea:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <_ZN7TwoWire14rxBufferLengthE>
    20ee:	98 17       	cp	r25, r24
    20f0:	c0 f0       	brcs	.+48     	; 0x2122 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	29 2f       	mov	r18, r25
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	26 17       	cp	r18, r22
    20fa:	37 07       	cpc	r19, r23
    20fc:	54 f4       	brge	.+20     	; 0x2112 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    20fe:	de 01       	movw	r26, r28
    2100:	a2 0f       	add	r26, r18
    2102:	b3 1f       	adc	r27, r19
    2104:	4c 91       	ld	r20, X
    2106:	d9 01       	movw	r26, r18
    2108:	ad 58       	subi	r26, 0x8D	; 141
    210a:	bb 4f       	sbci	r27, 0xFB	; 251
    210c:	4c 93       	st	X, r20
    210e:	9f 5f       	subi	r25, 0xFF	; 255
    2110:	f1 cf       	rjmp	.-30     	; 0x20f4 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2112:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <_ZN7TwoWire13rxBufferIndexE>
    2116:	60 93 71 04 	sts	0x0471, r22	; 0x800471 <_ZN7TwoWire14rxBufferLengthE>
    211a:	cb 01       	movw	r24, r22
    211c:	df 91       	pop	r29
    211e:	cf 91       	pop	r28
    2120:	09 94       	ijmp
    2122:	df 91       	pop	r29
    2124:	cf 91       	pop	r28
    2126:	08 95       	ret

00002128 <_ZN7TwoWire16onRequestServiceEv>:
    2128:	e0 91 4b 04 	lds	r30, 0x044B	; 0x80044b <_ZN7TwoWire14user_onRequestE>
    212c:	f0 91 4c 04 	lds	r31, 0x044C	; 0x80044c <_ZN7TwoWire14user_onRequestE+0x1>
    2130:	30 97       	sbiw	r30, 0x00	; 0
    2132:	29 f0       	breq	.+10     	; 0x213e <_ZN7TwoWire16onRequestServiceEv+0x16>
    2134:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <_ZN7TwoWire13txBufferIndexE>
    2138:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <_ZN7TwoWire14txBufferLengthE>
    213c:	09 94       	ijmp
    213e:	08 95       	ret

00002140 <_ZN7TwoWire5writeEPKhj>:
    2140:	cf 92       	push	r12
    2142:	df 92       	push	r13
    2144:	ef 92       	push	r14
    2146:	ff 92       	push	r15
    2148:	0f 93       	push	r16
    214a:	1f 93       	push	r17
    214c:	cf 93       	push	r28
    214e:	df 93       	push	r29
    2150:	7c 01       	movw	r14, r24
    2152:	cb 01       	movw	r24, r22
    2154:	8a 01       	movw	r16, r20
    2156:	20 91 4d 04 	lds	r18, 0x044D	; 0x80044d <_ZN7TwoWire12transmittingE>
    215a:	22 23       	and	r18, r18
    215c:	89 f0       	breq	.+34     	; 0x2180 <_ZN7TwoWire5writeEPKhj+0x40>
    215e:	eb 01       	movw	r28, r22
    2160:	6b 01       	movw	r12, r22
    2162:	c4 0e       	add	r12, r20
    2164:	d5 1e       	adc	r13, r21
    2166:	cc 15       	cp	r28, r12
    2168:	dd 05       	cpc	r29, r13
    216a:	69 f0       	breq	.+26     	; 0x2186 <_ZN7TwoWire5writeEPKhj+0x46>
    216c:	69 91       	ld	r22, Y+
    216e:	d7 01       	movw	r26, r14
    2170:	ed 91       	ld	r30, X+
    2172:	fc 91       	ld	r31, X
    2174:	01 90       	ld	r0, Z+
    2176:	f0 81       	ld	r31, Z
    2178:	e0 2d       	mov	r30, r0
    217a:	c7 01       	movw	r24, r14
    217c:	09 95       	icall
    217e:	f3 cf       	rjmp	.-26     	; 0x2166 <_ZN7TwoWire5writeEPKhj+0x26>
    2180:	64 2f       	mov	r22, r20
    2182:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <twi_transmit>
    2186:	c8 01       	movw	r24, r16
    2188:	df 91       	pop	r29
    218a:	cf 91       	pop	r28
    218c:	1f 91       	pop	r17
    218e:	0f 91       	pop	r16
    2190:	ff 90       	pop	r15
    2192:	ef 90       	pop	r14
    2194:	df 90       	pop	r13
    2196:	cf 90       	pop	r12
    2198:	08 95       	ret

0000219a <_ZN7TwoWire5writeEh>:
    219a:	cf 93       	push	r28
    219c:	df 93       	push	r29
    219e:	1f 92       	push	r1
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
    21a4:	69 83       	std	Y+1, r22	; 0x01
    21a6:	20 91 4d 04 	lds	r18, 0x044D	; 0x80044d <_ZN7TwoWire12transmittingE>
    21aa:	22 23       	and	r18, r18
    21ac:	d1 f0       	breq	.+52     	; 0x21e2 <_ZN7TwoWire5writeEh+0x48>
    21ae:	20 91 4e 04 	lds	r18, 0x044E	; 0x80044e <_ZN7TwoWire14txBufferLengthE>
    21b2:	20 32       	cpi	r18, 0x20	; 32
    21b4:	40 f0       	brcs	.+16     	; 0x21c6 <_ZN7TwoWire5writeEh+0x2c>
    21b6:	21 e0       	ldi	r18, 0x01	; 1
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	fc 01       	movw	r30, r24
    21bc:	33 83       	std	Z+3, r19	; 0x03
    21be:	22 83       	std	Z+2, r18	; 0x02
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	15 c0       	rjmp	.+42     	; 0x21f0 <_ZN7TwoWire5writeEh+0x56>
    21c6:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <_ZN7TwoWire13txBufferIndexE>
    21ca:	e8 2f       	mov	r30, r24
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	e0 5b       	subi	r30, 0xB0	; 176
    21d0:	fb 4f       	sbci	r31, 0xFB	; 251
    21d2:	99 81       	ldd	r25, Y+1	; 0x01
    21d4:	90 83       	st	Z, r25
    21d6:	8f 5f       	subi	r24, 0xFF	; 255
    21d8:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <_ZN7TwoWire13txBufferIndexE>
    21dc:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <_ZN7TwoWire14txBufferLengthE>
    21e0:	05 c0       	rjmp	.+10     	; 0x21ec <_ZN7TwoWire5writeEh+0x52>
    21e2:	61 e0       	ldi	r22, 0x01	; 1
    21e4:	ce 01       	movw	r24, r28
    21e6:	01 96       	adiw	r24, 0x01	; 1
    21e8:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <twi_transmit>
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	0f 90       	pop	r0
    21f2:	df 91       	pop	r29
    21f4:	cf 91       	pop	r28
    21f6:	08 95       	ret

000021f8 <_ZN7TwoWireC1Ev>:
    21f8:	fc 01       	movw	r30, r24
    21fa:	13 82       	std	Z+3, r1	; 0x03
    21fc:	12 82       	std	Z+2, r1	; 0x02
    21fe:	88 ee       	ldi	r24, 0xE8	; 232
    2200:	93 e0       	ldi	r25, 0x03	; 3
    2202:	a0 e0       	ldi	r26, 0x00	; 0
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	84 83       	std	Z+4, r24	; 0x04
    2208:	95 83       	std	Z+5, r25	; 0x05
    220a:	a6 83       	std	Z+6, r26	; 0x06
    220c:	b7 83       	std	Z+7, r27	; 0x07
    220e:	8a e6       	ldi	r24, 0x6A	; 106
    2210:	92 e0       	ldi	r25, 0x02	; 2
    2212:	91 83       	std	Z+1, r25	; 0x01
    2214:	80 83       	st	Z, r24
    2216:	08 95       	ret

00002218 <_ZN7TwoWire5beginEv>:
    2218:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <_ZN7TwoWire13rxBufferIndexE>
    221c:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <_ZN7TwoWire14rxBufferLengthE>
    2220:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <_ZN7TwoWire13txBufferIndexE>
    2224:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <_ZN7TwoWire14txBufferLengthE>
    2228:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <twi_init>
    222c:	84 e9       	ldi	r24, 0x94	; 148
    222e:	90 e1       	ldi	r25, 0x10	; 16
    2230:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <twi_attachSlaveTxEvent>
    2234:	8a e6       	ldi	r24, 0x6A	; 106
    2236:	90 e1       	ldi	r25, 0x10	; 16
    2238:	0c 94 f7 0e 	jmp	0x1dee	; 0x1dee <twi_attachSlaveRxEvent>

0000223c <_ZN7TwoWire17beginTransmissionEh>:
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <_ZN7TwoWire12transmittingE>
    2242:	60 93 70 04 	sts	0x0470, r22	; 0x800470 <_ZN7TwoWire9txAddressE>
    2246:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <_ZN7TwoWire13txBufferIndexE>
    224a:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <_ZN7TwoWire14txBufferLengthE>
    224e:	08 95       	ret

00002250 <_ZN7TwoWire15endTransmissionEh>:
    2250:	0f 93       	push	r16
    2252:	06 2f       	mov	r16, r22
    2254:	21 e0       	ldi	r18, 0x01	; 1
    2256:	40 91 4e 04 	lds	r20, 0x044E	; 0x80044e <_ZN7TwoWire14txBufferLengthE>
    225a:	60 e5       	ldi	r22, 0x50	; 80
    225c:	74 e0       	ldi	r23, 0x04	; 4
    225e:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <_ZN7TwoWire9txAddressE>
    2262:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <twi_writeTo>
    2266:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <_ZN7TwoWire13txBufferIndexE>
    226a:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <_ZN7TwoWire14txBufferLengthE>
    226e:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <_ZN7TwoWire12transmittingE>
    2272:	0f 91       	pop	r16
    2274:	08 95       	ret

00002276 <_ZN7TwoWire11requestFromEhhmhh>:
    2276:	4f 92       	push	r4
    2278:	5f 92       	push	r5
    227a:	6f 92       	push	r6
    227c:	7f 92       	push	r7
    227e:	af 92       	push	r10
    2280:	bf 92       	push	r11
    2282:	cf 92       	push	r12
    2284:	ef 92       	push	r14
    2286:	ff 92       	push	r15
    2288:	0f 93       	push	r16
    228a:	1f 93       	push	r17
    228c:	cf 93       	push	r28
    228e:	df 93       	push	r29
    2290:	5c 01       	movw	r10, r24
    2292:	f6 2e       	mov	r15, r22
    2294:	d4 2f       	mov	r29, r20
    2296:	28 01       	movw	r4, r16
    2298:	39 01       	movw	r6, r18
    229a:	ee 20       	and	r14, r14
    229c:	21 f1       	breq	.+72     	; 0x22e6 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    229e:	0e 94 1e 11 	call	0x223c	; 0x223c <_ZN7TwoWire17beginTransmissionEh>
    22a2:	ce 2d       	mov	r28, r14
    22a4:	c4 30       	cpi	r28, 0x04	; 4
    22a6:	08 f0       	brcs	.+2      	; 0x22aa <_ZN7TwoWire11requestFromEhhmhh+0x34>
    22a8:	c3 e0       	ldi	r28, 0x03	; 3
    22aa:	c1 50       	subi	r28, 0x01	; 1
    22ac:	c0 f0       	brcs	.+48     	; 0x22de <_ZN7TwoWire11requestFromEhhmhh+0x68>
    22ae:	28 e0       	ldi	r18, 0x08	; 8
    22b0:	c2 9f       	mul	r28, r18
    22b2:	c0 01       	movw	r24, r0
    22b4:	11 24       	eor	r1, r1
    22b6:	a3 01       	movw	r20, r6
    22b8:	92 01       	movw	r18, r4
    22ba:	04 c0       	rjmp	.+8      	; 0x22c4 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    22bc:	56 95       	lsr	r21
    22be:	47 95       	ror	r20
    22c0:	37 95       	ror	r19
    22c2:	27 95       	ror	r18
    22c4:	8a 95       	dec	r24
    22c6:	d2 f7       	brpl	.-12     	; 0x22bc <_ZN7TwoWire11requestFromEhhmhh+0x46>
    22c8:	ca 01       	movw	r24, r20
    22ca:	b9 01       	movw	r22, r18
    22cc:	d5 01       	movw	r26, r10
    22ce:	ed 91       	ld	r30, X+
    22d0:	fc 91       	ld	r31, X
    22d2:	01 90       	ld	r0, Z+
    22d4:	f0 81       	ld	r31, Z
    22d6:	e0 2d       	mov	r30, r0
    22d8:	c5 01       	movw	r24, r10
    22da:	09 95       	icall
    22dc:	e6 cf       	rjmp	.-52     	; 0x22aa <_ZN7TwoWire11requestFromEhhmhh+0x34>
    22de:	60 e0       	ldi	r22, 0x00	; 0
    22e0:	c5 01       	movw	r24, r10
    22e2:	0e 94 28 11 	call	0x2250	; 0x2250 <_ZN7TwoWire15endTransmissionEh>
    22e6:	4d 2f       	mov	r20, r29
    22e8:	d1 32       	cpi	r29, 0x21	; 33
    22ea:	08 f0       	brcs	.+2      	; 0x22ee <_ZN7TwoWire11requestFromEhhmhh+0x78>
    22ec:	40 e2       	ldi	r20, 0x20	; 32
    22ee:	2c 2d       	mov	r18, r12
    22f0:	63 e7       	ldi	r22, 0x73	; 115
    22f2:	74 e0       	ldi	r23, 0x04	; 4
    22f4:	8f 2d       	mov	r24, r15
    22f6:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <twi_readFrom>
    22fa:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <_ZN7TwoWire13rxBufferIndexE>
    22fe:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <_ZN7TwoWire14rxBufferLengthE>
    2302:	df 91       	pop	r29
    2304:	cf 91       	pop	r28
    2306:	1f 91       	pop	r17
    2308:	0f 91       	pop	r16
    230a:	ff 90       	pop	r15
    230c:	ef 90       	pop	r14
    230e:	cf 90       	pop	r12
    2310:	bf 90       	pop	r11
    2312:	af 90       	pop	r10
    2314:	7f 90       	pop	r7
    2316:	6f 90       	pop	r6
    2318:	5f 90       	pop	r5
    231a:	4f 90       	pop	r4
    231c:	08 95       	ret

0000231e <_ZN7TwoWire11requestFromEhhh>:
    231e:	cf 92       	push	r12
    2320:	ef 92       	push	r14
    2322:	0f 93       	push	r16
    2324:	1f 93       	push	r17
    2326:	c2 2e       	mov	r12, r18
    2328:	e1 2c       	mov	r14, r1
    232a:	00 e0       	ldi	r16, 0x00	; 0
    232c:	10 e0       	ldi	r17, 0x00	; 0
    232e:	98 01       	movw	r18, r16
    2330:	0e 94 3b 11 	call	0x2276	; 0x2276 <_ZN7TwoWire11requestFromEhhmhh>
    2334:	1f 91       	pop	r17
    2336:	0f 91       	pop	r16
    2338:	ef 90       	pop	r14
    233a:	cf 90       	pop	r12
    233c:	08 95       	ret

0000233e <_ZN7TwoWire11requestFromEii>:
    233e:	21 e0       	ldi	r18, 0x01	; 1
    2340:	0c 94 8f 11 	jmp	0x231e	; 0x231e <_ZN7TwoWire11requestFromEhhh>

00002344 <_ZN7TwoWire15endTransmissionEv>:
    2344:	61 e0       	ldi	r22, 0x01	; 1
    2346:	0c 94 28 11 	jmp	0x2250	; 0x2250 <_ZN7TwoWire15endTransmissionEh>

0000234a <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    234a:	8d e3       	ldi	r24, 0x3D	; 61
    234c:	94 e0       	ldi	r25, 0x04	; 4
    234e:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <_ZN7TwoWireC1Ev>

00002352 <__subsf3>:
    2352:	50 58       	subi	r21, 0x80	; 128

00002354 <__addsf3>:
    2354:	bb 27       	eor	r27, r27
    2356:	aa 27       	eor	r26, r26
    2358:	0e 94 c1 11 	call	0x2382	; 0x2382 <__addsf3x>
    235c:	0c 94 93 12 	jmp	0x2526	; 0x2526 <__fp_round>
    2360:	0e 94 85 12 	call	0x250a	; 0x250a <__fp_pscA>
    2364:	38 f0       	brcs	.+14     	; 0x2374 <__addsf3+0x20>
    2366:	0e 94 8c 12 	call	0x2518	; 0x2518 <__fp_pscB>
    236a:	20 f0       	brcs	.+8      	; 0x2374 <__addsf3+0x20>
    236c:	39 f4       	brne	.+14     	; 0x237c <__addsf3+0x28>
    236e:	9f 3f       	cpi	r25, 0xFF	; 255
    2370:	19 f4       	brne	.+6      	; 0x2378 <__addsf3+0x24>
    2372:	26 f4       	brtc	.+8      	; 0x237c <__addsf3+0x28>
    2374:	0c 94 82 12 	jmp	0x2504	; 0x2504 <__fp_nan>
    2378:	0e f4       	brtc	.+2      	; 0x237c <__addsf3+0x28>
    237a:	e0 95       	com	r30
    237c:	e7 fb       	bst	r30, 7
    237e:	0c 94 7c 12 	jmp	0x24f8	; 0x24f8 <__fp_inf>

00002382 <__addsf3x>:
    2382:	e9 2f       	mov	r30, r25
    2384:	0e 94 a4 12 	call	0x2548	; 0x2548 <__fp_split3>
    2388:	58 f3       	brcs	.-42     	; 0x2360 <__addsf3+0xc>
    238a:	ba 17       	cp	r27, r26
    238c:	62 07       	cpc	r22, r18
    238e:	73 07       	cpc	r23, r19
    2390:	84 07       	cpc	r24, r20
    2392:	95 07       	cpc	r25, r21
    2394:	20 f0       	brcs	.+8      	; 0x239e <__addsf3x+0x1c>
    2396:	79 f4       	brne	.+30     	; 0x23b6 <__addsf3x+0x34>
    2398:	a6 f5       	brtc	.+104    	; 0x2402 <__addsf3x+0x80>
    239a:	0c 94 c6 12 	jmp	0x258c	; 0x258c <__fp_zero>
    239e:	0e f4       	brtc	.+2      	; 0x23a2 <__addsf3x+0x20>
    23a0:	e0 95       	com	r30
    23a2:	0b 2e       	mov	r0, r27
    23a4:	ba 2f       	mov	r27, r26
    23a6:	a0 2d       	mov	r26, r0
    23a8:	0b 01       	movw	r0, r22
    23aa:	b9 01       	movw	r22, r18
    23ac:	90 01       	movw	r18, r0
    23ae:	0c 01       	movw	r0, r24
    23b0:	ca 01       	movw	r24, r20
    23b2:	a0 01       	movw	r20, r0
    23b4:	11 24       	eor	r1, r1
    23b6:	ff 27       	eor	r31, r31
    23b8:	59 1b       	sub	r21, r25
    23ba:	99 f0       	breq	.+38     	; 0x23e2 <__addsf3x+0x60>
    23bc:	59 3f       	cpi	r21, 0xF9	; 249
    23be:	50 f4       	brcc	.+20     	; 0x23d4 <__addsf3x+0x52>
    23c0:	50 3e       	cpi	r21, 0xE0	; 224
    23c2:	68 f1       	brcs	.+90     	; 0x241e <__addsf3x+0x9c>
    23c4:	1a 16       	cp	r1, r26
    23c6:	f0 40       	sbci	r31, 0x00	; 0
    23c8:	a2 2f       	mov	r26, r18
    23ca:	23 2f       	mov	r18, r19
    23cc:	34 2f       	mov	r19, r20
    23ce:	44 27       	eor	r20, r20
    23d0:	58 5f       	subi	r21, 0xF8	; 248
    23d2:	f3 cf       	rjmp	.-26     	; 0x23ba <__addsf3x+0x38>
    23d4:	46 95       	lsr	r20
    23d6:	37 95       	ror	r19
    23d8:	27 95       	ror	r18
    23da:	a7 95       	ror	r26
    23dc:	f0 40       	sbci	r31, 0x00	; 0
    23de:	53 95       	inc	r21
    23e0:	c9 f7       	brne	.-14     	; 0x23d4 <__addsf3x+0x52>
    23e2:	7e f4       	brtc	.+30     	; 0x2402 <__addsf3x+0x80>
    23e4:	1f 16       	cp	r1, r31
    23e6:	ba 0b       	sbc	r27, r26
    23e8:	62 0b       	sbc	r22, r18
    23ea:	73 0b       	sbc	r23, r19
    23ec:	84 0b       	sbc	r24, r20
    23ee:	ba f0       	brmi	.+46     	; 0x241e <__addsf3x+0x9c>
    23f0:	91 50       	subi	r25, 0x01	; 1
    23f2:	a1 f0       	breq	.+40     	; 0x241c <__addsf3x+0x9a>
    23f4:	ff 0f       	add	r31, r31
    23f6:	bb 1f       	adc	r27, r27
    23f8:	66 1f       	adc	r22, r22
    23fa:	77 1f       	adc	r23, r23
    23fc:	88 1f       	adc	r24, r24
    23fe:	c2 f7       	brpl	.-16     	; 0x23f0 <__addsf3x+0x6e>
    2400:	0e c0       	rjmp	.+28     	; 0x241e <__addsf3x+0x9c>
    2402:	ba 0f       	add	r27, r26
    2404:	62 1f       	adc	r22, r18
    2406:	73 1f       	adc	r23, r19
    2408:	84 1f       	adc	r24, r20
    240a:	48 f4       	brcc	.+18     	; 0x241e <__addsf3x+0x9c>
    240c:	87 95       	ror	r24
    240e:	77 95       	ror	r23
    2410:	67 95       	ror	r22
    2412:	b7 95       	ror	r27
    2414:	f7 95       	ror	r31
    2416:	9e 3f       	cpi	r25, 0xFE	; 254
    2418:	08 f0       	brcs	.+2      	; 0x241c <__addsf3x+0x9a>
    241a:	b0 cf       	rjmp	.-160    	; 0x237c <__addsf3+0x28>
    241c:	93 95       	inc	r25
    241e:	88 0f       	add	r24, r24
    2420:	08 f0       	brcs	.+2      	; 0x2424 <__addsf3x+0xa2>
    2422:	99 27       	eor	r25, r25
    2424:	ee 0f       	add	r30, r30
    2426:	97 95       	ror	r25
    2428:	87 95       	ror	r24
    242a:	08 95       	ret

0000242c <__cmpsf2>:
    242c:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__fp_cmp>
    2430:	08 f4       	brcc	.+2      	; 0x2434 <__cmpsf2+0x8>
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	08 95       	ret

00002436 <__floatunsisf>:
    2436:	e8 94       	clt
    2438:	09 c0       	rjmp	.+18     	; 0x244c <__floatsisf+0x12>

0000243a <__floatsisf>:
    243a:	97 fb       	bst	r25, 7
    243c:	3e f4       	brtc	.+14     	; 0x244c <__floatsisf+0x12>
    243e:	90 95       	com	r25
    2440:	80 95       	com	r24
    2442:	70 95       	com	r23
    2444:	61 95       	neg	r22
    2446:	7f 4f       	sbci	r23, 0xFF	; 255
    2448:	8f 4f       	sbci	r24, 0xFF	; 255
    244a:	9f 4f       	sbci	r25, 0xFF	; 255
    244c:	99 23       	and	r25, r25
    244e:	a9 f0       	breq	.+42     	; 0x247a <__floatsisf+0x40>
    2450:	f9 2f       	mov	r31, r25
    2452:	96 e9       	ldi	r25, 0x96	; 150
    2454:	bb 27       	eor	r27, r27
    2456:	93 95       	inc	r25
    2458:	f6 95       	lsr	r31
    245a:	87 95       	ror	r24
    245c:	77 95       	ror	r23
    245e:	67 95       	ror	r22
    2460:	b7 95       	ror	r27
    2462:	f1 11       	cpse	r31, r1
    2464:	f8 cf       	rjmp	.-16     	; 0x2456 <__floatsisf+0x1c>
    2466:	fa f4       	brpl	.+62     	; 0x24a6 <__floatsisf+0x6c>
    2468:	bb 0f       	add	r27, r27
    246a:	11 f4       	brne	.+4      	; 0x2470 <__floatsisf+0x36>
    246c:	60 ff       	sbrs	r22, 0
    246e:	1b c0       	rjmp	.+54     	; 0x24a6 <__floatsisf+0x6c>
    2470:	6f 5f       	subi	r22, 0xFF	; 255
    2472:	7f 4f       	sbci	r23, 0xFF	; 255
    2474:	8f 4f       	sbci	r24, 0xFF	; 255
    2476:	9f 4f       	sbci	r25, 0xFF	; 255
    2478:	16 c0       	rjmp	.+44     	; 0x24a6 <__floatsisf+0x6c>
    247a:	88 23       	and	r24, r24
    247c:	11 f0       	breq	.+4      	; 0x2482 <__floatsisf+0x48>
    247e:	96 e9       	ldi	r25, 0x96	; 150
    2480:	11 c0       	rjmp	.+34     	; 0x24a4 <__floatsisf+0x6a>
    2482:	77 23       	and	r23, r23
    2484:	21 f0       	breq	.+8      	; 0x248e <__floatsisf+0x54>
    2486:	9e e8       	ldi	r25, 0x8E	; 142
    2488:	87 2f       	mov	r24, r23
    248a:	76 2f       	mov	r23, r22
    248c:	05 c0       	rjmp	.+10     	; 0x2498 <__floatsisf+0x5e>
    248e:	66 23       	and	r22, r22
    2490:	71 f0       	breq	.+28     	; 0x24ae <__floatsisf+0x74>
    2492:	96 e8       	ldi	r25, 0x86	; 134
    2494:	86 2f       	mov	r24, r22
    2496:	70 e0       	ldi	r23, 0x00	; 0
    2498:	60 e0       	ldi	r22, 0x00	; 0
    249a:	2a f0       	brmi	.+10     	; 0x24a6 <__floatsisf+0x6c>
    249c:	9a 95       	dec	r25
    249e:	66 0f       	add	r22, r22
    24a0:	77 1f       	adc	r23, r23
    24a2:	88 1f       	adc	r24, r24
    24a4:	da f7       	brpl	.-10     	; 0x249c <__floatsisf+0x62>
    24a6:	88 0f       	add	r24, r24
    24a8:	96 95       	lsr	r25
    24aa:	87 95       	ror	r24
    24ac:	97 f9       	bld	r25, 7
    24ae:	08 95       	ret

000024b0 <__fp_cmp>:
    24b0:	99 0f       	add	r25, r25
    24b2:	00 08       	sbc	r0, r0
    24b4:	55 0f       	add	r21, r21
    24b6:	aa 0b       	sbc	r26, r26
    24b8:	e0 e8       	ldi	r30, 0x80	; 128
    24ba:	fe ef       	ldi	r31, 0xFE	; 254
    24bc:	16 16       	cp	r1, r22
    24be:	17 06       	cpc	r1, r23
    24c0:	e8 07       	cpc	r30, r24
    24c2:	f9 07       	cpc	r31, r25
    24c4:	c0 f0       	brcs	.+48     	; 0x24f6 <__fp_cmp+0x46>
    24c6:	12 16       	cp	r1, r18
    24c8:	13 06       	cpc	r1, r19
    24ca:	e4 07       	cpc	r30, r20
    24cc:	f5 07       	cpc	r31, r21
    24ce:	98 f0       	brcs	.+38     	; 0x24f6 <__fp_cmp+0x46>
    24d0:	62 1b       	sub	r22, r18
    24d2:	73 0b       	sbc	r23, r19
    24d4:	84 0b       	sbc	r24, r20
    24d6:	95 0b       	sbc	r25, r21
    24d8:	39 f4       	brne	.+14     	; 0x24e8 <__fp_cmp+0x38>
    24da:	0a 26       	eor	r0, r26
    24dc:	61 f0       	breq	.+24     	; 0x24f6 <__fp_cmp+0x46>
    24de:	23 2b       	or	r18, r19
    24e0:	24 2b       	or	r18, r20
    24e2:	25 2b       	or	r18, r21
    24e4:	21 f4       	brne	.+8      	; 0x24ee <__fp_cmp+0x3e>
    24e6:	08 95       	ret
    24e8:	0a 26       	eor	r0, r26
    24ea:	09 f4       	brne	.+2      	; 0x24ee <__fp_cmp+0x3e>
    24ec:	a1 40       	sbci	r26, 0x01	; 1
    24ee:	a6 95       	lsr	r26
    24f0:	8f ef       	ldi	r24, 0xFF	; 255
    24f2:	81 1d       	adc	r24, r1
    24f4:	81 1d       	adc	r24, r1
    24f6:	08 95       	ret

000024f8 <__fp_inf>:
    24f8:	97 f9       	bld	r25, 7
    24fa:	9f 67       	ori	r25, 0x7F	; 127
    24fc:	80 e8       	ldi	r24, 0x80	; 128
    24fe:	70 e0       	ldi	r23, 0x00	; 0
    2500:	60 e0       	ldi	r22, 0x00	; 0
    2502:	08 95       	ret

00002504 <__fp_nan>:
    2504:	9f ef       	ldi	r25, 0xFF	; 255
    2506:	80 ec       	ldi	r24, 0xC0	; 192
    2508:	08 95       	ret

0000250a <__fp_pscA>:
    250a:	00 24       	eor	r0, r0
    250c:	0a 94       	dec	r0
    250e:	16 16       	cp	r1, r22
    2510:	17 06       	cpc	r1, r23
    2512:	18 06       	cpc	r1, r24
    2514:	09 06       	cpc	r0, r25
    2516:	08 95       	ret

00002518 <__fp_pscB>:
    2518:	00 24       	eor	r0, r0
    251a:	0a 94       	dec	r0
    251c:	12 16       	cp	r1, r18
    251e:	13 06       	cpc	r1, r19
    2520:	14 06       	cpc	r1, r20
    2522:	05 06       	cpc	r0, r21
    2524:	08 95       	ret

00002526 <__fp_round>:
    2526:	09 2e       	mov	r0, r25
    2528:	03 94       	inc	r0
    252a:	00 0c       	add	r0, r0
    252c:	11 f4       	brne	.+4      	; 0x2532 <__fp_round+0xc>
    252e:	88 23       	and	r24, r24
    2530:	52 f0       	brmi	.+20     	; 0x2546 <__fp_round+0x20>
    2532:	bb 0f       	add	r27, r27
    2534:	40 f4       	brcc	.+16     	; 0x2546 <__fp_round+0x20>
    2536:	bf 2b       	or	r27, r31
    2538:	11 f4       	brne	.+4      	; 0x253e <__fp_round+0x18>
    253a:	60 ff       	sbrs	r22, 0
    253c:	04 c0       	rjmp	.+8      	; 0x2546 <__fp_round+0x20>
    253e:	6f 5f       	subi	r22, 0xFF	; 255
    2540:	7f 4f       	sbci	r23, 0xFF	; 255
    2542:	8f 4f       	sbci	r24, 0xFF	; 255
    2544:	9f 4f       	sbci	r25, 0xFF	; 255
    2546:	08 95       	ret

00002548 <__fp_split3>:
    2548:	57 fd       	sbrc	r21, 7
    254a:	90 58       	subi	r25, 0x80	; 128
    254c:	44 0f       	add	r20, r20
    254e:	55 1f       	adc	r21, r21
    2550:	59 f0       	breq	.+22     	; 0x2568 <__fp_splitA+0x10>
    2552:	5f 3f       	cpi	r21, 0xFF	; 255
    2554:	71 f0       	breq	.+28     	; 0x2572 <__fp_splitA+0x1a>
    2556:	47 95       	ror	r20

00002558 <__fp_splitA>:
    2558:	88 0f       	add	r24, r24
    255a:	97 fb       	bst	r25, 7
    255c:	99 1f       	adc	r25, r25
    255e:	61 f0       	breq	.+24     	; 0x2578 <__fp_splitA+0x20>
    2560:	9f 3f       	cpi	r25, 0xFF	; 255
    2562:	79 f0       	breq	.+30     	; 0x2582 <__fp_splitA+0x2a>
    2564:	87 95       	ror	r24
    2566:	08 95       	ret
    2568:	12 16       	cp	r1, r18
    256a:	13 06       	cpc	r1, r19
    256c:	14 06       	cpc	r1, r20
    256e:	55 1f       	adc	r21, r21
    2570:	f2 cf       	rjmp	.-28     	; 0x2556 <__fp_split3+0xe>
    2572:	46 95       	lsr	r20
    2574:	f1 df       	rcall	.-30     	; 0x2558 <__fp_splitA>
    2576:	08 c0       	rjmp	.+16     	; 0x2588 <__fp_splitA+0x30>
    2578:	16 16       	cp	r1, r22
    257a:	17 06       	cpc	r1, r23
    257c:	18 06       	cpc	r1, r24
    257e:	99 1f       	adc	r25, r25
    2580:	f1 cf       	rjmp	.-30     	; 0x2564 <__fp_splitA+0xc>
    2582:	86 95       	lsr	r24
    2584:	71 05       	cpc	r23, r1
    2586:	61 05       	cpc	r22, r1
    2588:	08 94       	sec
    258a:	08 95       	ret

0000258c <__fp_zero>:
    258c:	e8 94       	clt

0000258e <__fp_szero>:
    258e:	bb 27       	eor	r27, r27
    2590:	66 27       	eor	r22, r22
    2592:	77 27       	eor	r23, r23
    2594:	cb 01       	movw	r24, r22
    2596:	97 f9       	bld	r25, 7
    2598:	08 95       	ret

0000259a <__mulsf3>:
    259a:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <__mulsf3x>
    259e:	0c 94 93 12 	jmp	0x2526	; 0x2526 <__fp_round>
    25a2:	0e 94 85 12 	call	0x250a	; 0x250a <__fp_pscA>
    25a6:	38 f0       	brcs	.+14     	; 0x25b6 <__mulsf3+0x1c>
    25a8:	0e 94 8c 12 	call	0x2518	; 0x2518 <__fp_pscB>
    25ac:	20 f0       	brcs	.+8      	; 0x25b6 <__mulsf3+0x1c>
    25ae:	95 23       	and	r25, r21
    25b0:	11 f0       	breq	.+4      	; 0x25b6 <__mulsf3+0x1c>
    25b2:	0c 94 7c 12 	jmp	0x24f8	; 0x24f8 <__fp_inf>
    25b6:	0c 94 82 12 	jmp	0x2504	; 0x2504 <__fp_nan>
    25ba:	11 24       	eor	r1, r1
    25bc:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__fp_szero>

000025c0 <__mulsf3x>:
    25c0:	0e 94 a4 12 	call	0x2548	; 0x2548 <__fp_split3>
    25c4:	70 f3       	brcs	.-36     	; 0x25a2 <__mulsf3+0x8>

000025c6 <__mulsf3_pse>:
    25c6:	95 9f       	mul	r25, r21
    25c8:	c1 f3       	breq	.-16     	; 0x25ba <__mulsf3+0x20>
    25ca:	95 0f       	add	r25, r21
    25cc:	50 e0       	ldi	r21, 0x00	; 0
    25ce:	55 1f       	adc	r21, r21
    25d0:	62 9f       	mul	r22, r18
    25d2:	f0 01       	movw	r30, r0
    25d4:	72 9f       	mul	r23, r18
    25d6:	bb 27       	eor	r27, r27
    25d8:	f0 0d       	add	r31, r0
    25da:	b1 1d       	adc	r27, r1
    25dc:	63 9f       	mul	r22, r19
    25de:	aa 27       	eor	r26, r26
    25e0:	f0 0d       	add	r31, r0
    25e2:	b1 1d       	adc	r27, r1
    25e4:	aa 1f       	adc	r26, r26
    25e6:	64 9f       	mul	r22, r20
    25e8:	66 27       	eor	r22, r22
    25ea:	b0 0d       	add	r27, r0
    25ec:	a1 1d       	adc	r26, r1
    25ee:	66 1f       	adc	r22, r22
    25f0:	82 9f       	mul	r24, r18
    25f2:	22 27       	eor	r18, r18
    25f4:	b0 0d       	add	r27, r0
    25f6:	a1 1d       	adc	r26, r1
    25f8:	62 1f       	adc	r22, r18
    25fa:	73 9f       	mul	r23, r19
    25fc:	b0 0d       	add	r27, r0
    25fe:	a1 1d       	adc	r26, r1
    2600:	62 1f       	adc	r22, r18
    2602:	83 9f       	mul	r24, r19
    2604:	a0 0d       	add	r26, r0
    2606:	61 1d       	adc	r22, r1
    2608:	22 1f       	adc	r18, r18
    260a:	74 9f       	mul	r23, r20
    260c:	33 27       	eor	r19, r19
    260e:	a0 0d       	add	r26, r0
    2610:	61 1d       	adc	r22, r1
    2612:	23 1f       	adc	r18, r19
    2614:	84 9f       	mul	r24, r20
    2616:	60 0d       	add	r22, r0
    2618:	21 1d       	adc	r18, r1
    261a:	82 2f       	mov	r24, r18
    261c:	76 2f       	mov	r23, r22
    261e:	6a 2f       	mov	r22, r26
    2620:	11 24       	eor	r1, r1
    2622:	9f 57       	subi	r25, 0x7F	; 127
    2624:	50 40       	sbci	r21, 0x00	; 0
    2626:	9a f0       	brmi	.+38     	; 0x264e <__mulsf3_pse+0x88>
    2628:	f1 f0       	breq	.+60     	; 0x2666 <__mulsf3_pse+0xa0>
    262a:	88 23       	and	r24, r24
    262c:	4a f0       	brmi	.+18     	; 0x2640 <__mulsf3_pse+0x7a>
    262e:	ee 0f       	add	r30, r30
    2630:	ff 1f       	adc	r31, r31
    2632:	bb 1f       	adc	r27, r27
    2634:	66 1f       	adc	r22, r22
    2636:	77 1f       	adc	r23, r23
    2638:	88 1f       	adc	r24, r24
    263a:	91 50       	subi	r25, 0x01	; 1
    263c:	50 40       	sbci	r21, 0x00	; 0
    263e:	a9 f7       	brne	.-22     	; 0x262a <__mulsf3_pse+0x64>
    2640:	9e 3f       	cpi	r25, 0xFE	; 254
    2642:	51 05       	cpc	r21, r1
    2644:	80 f0       	brcs	.+32     	; 0x2666 <__mulsf3_pse+0xa0>
    2646:	0c 94 7c 12 	jmp	0x24f8	; 0x24f8 <__fp_inf>
    264a:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__fp_szero>
    264e:	5f 3f       	cpi	r21, 0xFF	; 255
    2650:	e4 f3       	brlt	.-8      	; 0x264a <__mulsf3_pse+0x84>
    2652:	98 3e       	cpi	r25, 0xE8	; 232
    2654:	d4 f3       	brlt	.-12     	; 0x264a <__mulsf3_pse+0x84>
    2656:	86 95       	lsr	r24
    2658:	77 95       	ror	r23
    265a:	67 95       	ror	r22
    265c:	b7 95       	ror	r27
    265e:	f7 95       	ror	r31
    2660:	e7 95       	ror	r30
    2662:	9f 5f       	subi	r25, 0xFF	; 255
    2664:	c1 f7       	brne	.-16     	; 0x2656 <__mulsf3_pse+0x90>
    2666:	fe 2b       	or	r31, r30
    2668:	88 0f       	add	r24, r24
    266a:	91 1d       	adc	r25, r1
    266c:	96 95       	lsr	r25
    266e:	87 95       	ror	r24
    2670:	97 f9       	bld	r25, 7
    2672:	08 95       	ret

00002674 <__cxa_pure_virtual>:
    2674:	0e 94 71 20 	call	0x40e2	; 0x40e2 <abort>

00002678 <initVariant>:
    2678:	08 95       	ret

0000267a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    267a:	0e 94 29 1a 	call	0x3452	; 0x3452 <init>

	initVariant();
    267e:	0e 94 3c 13 	call	0x2678	; 0x2678 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
    2682:	83 e9       	ldi	r24, 0x93	; 147
    2684:	94 e0       	ldi	r25, 0x04	; 4
    2686:	0e 94 54 19 	call	0x32a8	; 0x32a8 <_ZN10USBDevice_6attachEv>
#endif
	
	setup();
    268a:	0e 94 c3 04 	call	0x986	; 0x986 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    268e:	c0 e0       	ldi	r28, 0x00	; 0
    2690:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    2692:	0e 94 04 05 	call	0xa08	; 0xa08 <loop>
		if (serialEventRun) serialEventRun();
    2696:	20 97       	sbiw	r28, 0x00	; 0
    2698:	e1 f3       	breq	.-8      	; 0x2692 <main+0x18>
    269a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    269e:	f9 cf       	rjmp	.-14     	; 0x2692 <main+0x18>

000026a0 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    26a0:	cf 92       	push	r12
    26a2:	df 92       	push	r13
    26a4:	ef 92       	push	r14
    26a6:	ff 92       	push	r15
    26a8:	0f 93       	push	r16
    26aa:	1f 93       	push	r17
    26ac:	cf 93       	push	r28
    26ae:	df 93       	push	r29
    26b0:	6c 01       	movw	r12, r24
    26b2:	7a 01       	movw	r14, r20
    26b4:	8b 01       	movw	r16, r22
    26b6:	c0 e0       	ldi	r28, 0x00	; 0
    26b8:	d0 e0       	ldi	r29, 0x00	; 0
    26ba:	ce 15       	cp	r28, r14
    26bc:	df 05       	cpc	r29, r15
    26be:	81 f0       	breq	.+32     	; 0x26e0 <_ZN5Print5writeEPKhj+0x40>
    26c0:	d8 01       	movw	r26, r16
    26c2:	6d 91       	ld	r22, X+
    26c4:	8d 01       	movw	r16, r26
    26c6:	d6 01       	movw	r26, r12
    26c8:	ed 91       	ld	r30, X+
    26ca:	fc 91       	ld	r31, X
    26cc:	01 90       	ld	r0, Z+
    26ce:	f0 81       	ld	r31, Z
    26d0:	e0 2d       	mov	r30, r0
    26d2:	c6 01       	movw	r24, r12
    26d4:	09 95       	icall
    26d6:	89 2b       	or	r24, r25
    26d8:	11 f0       	breq	.+4      	; 0x26de <_ZN5Print5writeEPKhj+0x3e>
    26da:	21 96       	adiw	r28, 0x01	; 1
    26dc:	ee cf       	rjmp	.-36     	; 0x26ba <_ZN5Print5writeEPKhj+0x1a>
    26de:	7e 01       	movw	r14, r28
    26e0:	c7 01       	movw	r24, r14
    26e2:	df 91       	pop	r29
    26e4:	cf 91       	pop	r28
    26e6:	1f 91       	pop	r17
    26e8:	0f 91       	pop	r16
    26ea:	ff 90       	pop	r15
    26ec:	ef 90       	pop	r14
    26ee:	df 90       	pop	r13
    26f0:	cf 90       	pop	r12
    26f2:	08 95       	ret

000026f4 <_ZN5Print5writeEPKc>:
    26f4:	61 15       	cp	r22, r1
    26f6:	71 05       	cpc	r23, r1
    26f8:	79 f0       	breq	.+30     	; 0x2718 <_ZN5Print5writeEPKc+0x24>
    26fa:	fb 01       	movw	r30, r22
    26fc:	01 90       	ld	r0, Z+
    26fe:	00 20       	and	r0, r0
    2700:	e9 f7       	brne	.-6      	; 0x26fc <_ZN5Print5writeEPKc+0x8>
    2702:	31 97       	sbiw	r30, 0x01	; 1
    2704:	af 01       	movw	r20, r30
    2706:	46 1b       	sub	r20, r22
    2708:	57 0b       	sbc	r21, r23
    270a:	dc 01       	movw	r26, r24
    270c:	ed 91       	ld	r30, X+
    270e:	fc 91       	ld	r31, X
    2710:	02 80       	ldd	r0, Z+2	; 0x02
    2712:	f3 81       	ldd	r31, Z+3	; 0x03
    2714:	e0 2d       	mov	r30, r0
    2716:	09 94       	ijmp
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	08 95       	ret

0000271e <_ZN5Print5printERK6String>:
    271e:	db 01       	movw	r26, r22
    2720:	14 96       	adiw	r26, 0x04	; 4
    2722:	4d 91       	ld	r20, X+
    2724:	5c 91       	ld	r21, X
    2726:	15 97       	sbiw	r26, 0x05	; 5
    2728:	6d 91       	ld	r22, X+
    272a:	7c 91       	ld	r23, X
    272c:	dc 01       	movw	r26, r24
    272e:	ed 91       	ld	r30, X+
    2730:	fc 91       	ld	r31, X
    2732:	02 80       	ldd	r0, Z+2	; 0x02
    2734:	f3 81       	ldd	r31, Z+3	; 0x03
    2736:	e0 2d       	mov	r30, r0
    2738:	09 94       	ijmp

0000273a <_ZN5Print5printEPKc>:
    273a:	0c 94 7a 13 	jmp	0x26f4	; 0x26f4 <_ZN5Print5writeEPKc>

0000273e <_ZN5Print5printEc>:
    273e:	dc 01       	movw	r26, r24
    2740:	ed 91       	ld	r30, X+
    2742:	fc 91       	ld	r31, X
    2744:	01 90       	ld	r0, Z+
    2746:	f0 81       	ld	r31, Z
    2748:	e0 2d       	mov	r30, r0
    274a:	09 94       	ijmp

0000274c <_ZN5Print11printNumberEmh>:
    274c:	8f 92       	push	r8
    274e:	9f 92       	push	r9
    2750:	af 92       	push	r10
    2752:	bf 92       	push	r11
    2754:	ef 92       	push	r14
    2756:	ff 92       	push	r15
    2758:	0f 93       	push	r16
    275a:	1f 93       	push	r17
    275c:	cf 93       	push	r28
    275e:	df 93       	push	r29
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62
    2764:	a1 97       	sbiw	r28, 0x21	; 33
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	f8 94       	cli
    276a:	de bf       	out	0x3e, r29	; 62
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	cd bf       	out	0x3d, r28	; 61
    2770:	7c 01       	movw	r14, r24
    2772:	fa 01       	movw	r30, r20
    2774:	cb 01       	movw	r24, r22
    2776:	19 a2       	std	Y+33, r1	; 0x21
    2778:	22 30       	cpi	r18, 0x02	; 2
    277a:	08 f4       	brcc	.+2      	; 0x277e <_ZN5Print11printNumberEmh+0x32>
    277c:	2a e0       	ldi	r18, 0x0A	; 10
    277e:	8e 01       	movw	r16, r28
    2780:	0f 5d       	subi	r16, 0xDF	; 223
    2782:	1f 4f       	sbci	r17, 0xFF	; 255
    2784:	82 2e       	mov	r8, r18
    2786:	91 2c       	mov	r9, r1
    2788:	a1 2c       	mov	r10, r1
    278a:	b1 2c       	mov	r11, r1
    278c:	bf 01       	movw	r22, r30
    278e:	a5 01       	movw	r20, r10
    2790:	94 01       	movw	r18, r8
    2792:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <__udivmodsi4>
    2796:	f9 01       	movw	r30, r18
    2798:	ca 01       	movw	r24, r20
    279a:	01 50       	subi	r16, 0x01	; 1
    279c:	11 09       	sbc	r17, r1
    279e:	6a 30       	cpi	r22, 0x0A	; 10
    27a0:	10 f4       	brcc	.+4      	; 0x27a6 <_ZN5Print11printNumberEmh+0x5a>
    27a2:	60 5d       	subi	r22, 0xD0	; 208
    27a4:	01 c0       	rjmp	.+2      	; 0x27a8 <_ZN5Print11printNumberEmh+0x5c>
    27a6:	69 5c       	subi	r22, 0xC9	; 201
    27a8:	d8 01       	movw	r26, r16
    27aa:	6c 93       	st	X, r22
    27ac:	23 2b       	or	r18, r19
    27ae:	24 2b       	or	r18, r20
    27b0:	25 2b       	or	r18, r21
    27b2:	61 f7       	brne	.-40     	; 0x278c <_ZN5Print11printNumberEmh+0x40>
    27b4:	b8 01       	movw	r22, r16
    27b6:	c7 01       	movw	r24, r14
    27b8:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <_ZN5Print5writeEPKc>
    27bc:	a1 96       	adiw	r28, 0x21	; 33
    27be:	0f b6       	in	r0, 0x3f	; 63
    27c0:	f8 94       	cli
    27c2:	de bf       	out	0x3e, r29	; 62
    27c4:	0f be       	out	0x3f, r0	; 63
    27c6:	cd bf       	out	0x3d, r28	; 61
    27c8:	df 91       	pop	r29
    27ca:	cf 91       	pop	r28
    27cc:	1f 91       	pop	r17
    27ce:	0f 91       	pop	r16
    27d0:	ff 90       	pop	r15
    27d2:	ef 90       	pop	r14
    27d4:	bf 90       	pop	r11
    27d6:	af 90       	pop	r10
    27d8:	9f 90       	pop	r9
    27da:	8f 90       	pop	r8
    27dc:	08 95       	ret

000027de <_ZN5Print5printEmi>:
    27de:	21 15       	cp	r18, r1
    27e0:	31 05       	cpc	r19, r1
    27e2:	41 f4       	brne	.+16     	; 0x27f4 <_ZN5Print5printEmi+0x16>
    27e4:	dc 01       	movw	r26, r24
    27e6:	ed 91       	ld	r30, X+
    27e8:	fc 91       	ld	r31, X
    27ea:	01 90       	ld	r0, Z+
    27ec:	f0 81       	ld	r31, Z
    27ee:	e0 2d       	mov	r30, r0
    27f0:	64 2f       	mov	r22, r20
    27f2:	09 94       	ijmp
    27f4:	0c 94 a6 13 	jmp	0x274c	; 0x274c <_ZN5Print11printNumberEmh>

000027f8 <_ZN5Print5printEji>:
    27f8:	9a 01       	movw	r18, r20
    27fa:	ab 01       	movw	r20, r22
    27fc:	60 e0       	ldi	r22, 0x00	; 0
    27fe:	70 e0       	ldi	r23, 0x00	; 0
    2800:	0c 94 ef 13 	jmp	0x27de	; 0x27de <_ZN5Print5printEmi>

00002804 <_ZN5Print5printEli>:
    2804:	cf 92       	push	r12
    2806:	df 92       	push	r13
    2808:	ef 92       	push	r14
    280a:	ff 92       	push	r15
    280c:	0f 93       	push	r16
    280e:	1f 93       	push	r17
    2810:	cf 93       	push	r28
    2812:	df 93       	push	r29
    2814:	21 15       	cp	r18, r1
    2816:	31 05       	cpc	r19, r1
    2818:	81 f4       	brne	.+32     	; 0x283a <_ZN5Print5printEli+0x36>
    281a:	dc 01       	movw	r26, r24
    281c:	ed 91       	ld	r30, X+
    281e:	fc 91       	ld	r31, X
    2820:	01 90       	ld	r0, Z+
    2822:	f0 81       	ld	r31, Z
    2824:	e0 2d       	mov	r30, r0
    2826:	64 2f       	mov	r22, r20
    2828:	df 91       	pop	r29
    282a:	cf 91       	pop	r28
    282c:	1f 91       	pop	r17
    282e:	0f 91       	pop	r16
    2830:	ff 90       	pop	r15
    2832:	ef 90       	pop	r14
    2834:	df 90       	pop	r13
    2836:	cf 90       	pop	r12
    2838:	09 94       	ijmp
    283a:	2a 30       	cpi	r18, 0x0A	; 10
    283c:	31 05       	cpc	r19, r1
    283e:	01 f5       	brne	.+64     	; 0x2880 <_ZN5Print5printEli+0x7c>
    2840:	77 ff       	sbrs	r23, 7
    2842:	1d c0       	rjmp	.+58     	; 0x287e <_ZN5Print5printEli+0x7a>
    2844:	6a 01       	movw	r12, r20
    2846:	7b 01       	movw	r14, r22
    2848:	ec 01       	movw	r28, r24
    284a:	6d e2       	ldi	r22, 0x2D	; 45
    284c:	0e 94 9f 13 	call	0x273e	; 0x273e <_ZN5Print5printEc>
    2850:	8c 01       	movw	r16, r24
    2852:	44 27       	eor	r20, r20
    2854:	55 27       	eor	r21, r21
    2856:	ba 01       	movw	r22, r20
    2858:	4c 19       	sub	r20, r12
    285a:	5d 09       	sbc	r21, r13
    285c:	6e 09       	sbc	r22, r14
    285e:	7f 09       	sbc	r23, r15
    2860:	2a e0       	ldi	r18, 0x0A	; 10
    2862:	ce 01       	movw	r24, r28
    2864:	0e 94 a6 13 	call	0x274c	; 0x274c <_ZN5Print11printNumberEmh>
    2868:	80 0f       	add	r24, r16
    286a:	91 1f       	adc	r25, r17
    286c:	df 91       	pop	r29
    286e:	cf 91       	pop	r28
    2870:	1f 91       	pop	r17
    2872:	0f 91       	pop	r16
    2874:	ff 90       	pop	r15
    2876:	ef 90       	pop	r14
    2878:	df 90       	pop	r13
    287a:	cf 90       	pop	r12
    287c:	08 95       	ret
    287e:	2a e0       	ldi	r18, 0x0A	; 10
    2880:	df 91       	pop	r29
    2882:	cf 91       	pop	r28
    2884:	1f 91       	pop	r17
    2886:	0f 91       	pop	r16
    2888:	ff 90       	pop	r15
    288a:	ef 90       	pop	r14
    288c:	df 90       	pop	r13
    288e:	cf 90       	pop	r12
    2890:	0c 94 a6 13 	jmp	0x274c	; 0x274c <_ZN5Print11printNumberEmh>

00002894 <_ZN5Print5printEii>:
    2894:	9a 01       	movw	r18, r20
    2896:	ab 01       	movw	r20, r22
    2898:	77 0f       	add	r23, r23
    289a:	66 0b       	sbc	r22, r22
    289c:	77 0b       	sbc	r23, r23
    289e:	0c 94 02 14 	jmp	0x2804	; 0x2804 <_ZN5Print5printEli>

000028a2 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    28a2:	7f 92       	push	r7
    28a4:	8f 92       	push	r8
    28a6:	9f 92       	push	r9
    28a8:	af 92       	push	r10
    28aa:	bf 92       	push	r11
    28ac:	cf 92       	push	r12
    28ae:	df 92       	push	r13
    28b0:	ef 92       	push	r14
    28b2:	ff 92       	push	r15
    28b4:	0f 93       	push	r16
    28b6:	1f 93       	push	r17
    28b8:	cf 93       	push	r28
    28ba:	df 93       	push	r29
    28bc:	8c 01       	movw	r16, r24
    28be:	6a 01       	movw	r12, r20
    28c0:	7b 01       	movw	r14, r22
    28c2:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    28c4:	9a 01       	movw	r18, r20
    28c6:	ab 01       	movw	r20, r22
    28c8:	c7 01       	movw	r24, r14
    28ca:	b6 01       	movw	r22, r12
    28cc:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__unordsf2>
    28d0:	88 23       	and	r24, r24
    28d2:	19 f0       	breq	.+6      	; 0x28da <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    28d4:	6b e7       	ldi	r22, 0x7B	; 123
    28d6:	72 e0       	ldi	r23, 0x02	; 2
    28d8:	27 c0       	rjmp	.+78     	; 0x2928 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    28da:	46 01       	movw	r8, r12
    28dc:	57 01       	movw	r10, r14
    28de:	e8 94       	clt
    28e0:	b7 f8       	bld	r11, 7
    28e2:	2f ef       	ldi	r18, 0xFF	; 255
    28e4:	3f ef       	ldi	r19, 0xFF	; 255
    28e6:	4f e7       	ldi	r20, 0x7F	; 127
    28e8:	5f e7       	ldi	r21, 0x7F	; 127
    28ea:	c5 01       	movw	r24, r10
    28ec:	b4 01       	movw	r22, r8
    28ee:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__unordsf2>
    28f2:	81 11       	cpse	r24, r1
    28f4:	0d c0       	rjmp	.+26     	; 0x2910 <_ZN5Print10printFloatEdh+0x6e>
    28f6:	2f ef       	ldi	r18, 0xFF	; 255
    28f8:	3f ef       	ldi	r19, 0xFF	; 255
    28fa:	4f e7       	ldi	r20, 0x7F	; 127
    28fc:	5f e7       	ldi	r21, 0x7F	; 127
    28fe:	c5 01       	movw	r24, r10
    2900:	b4 01       	movw	r22, r8
    2902:	0e 94 16 12 	call	0x242c	; 0x242c <__cmpsf2>
    2906:	18 16       	cp	r1, r24
    2908:	1c f4       	brge	.+6      	; 0x2910 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    290a:	6f e7       	ldi	r22, 0x7F	; 127
    290c:	72 e0       	ldi	r23, 0x02	; 2
    290e:	0c c0       	rjmp	.+24     	; 0x2928 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    2910:	2f ef       	ldi	r18, 0xFF	; 255
    2912:	3f ef       	ldi	r19, 0xFF	; 255
    2914:	4f e7       	ldi	r20, 0x7F	; 127
    2916:	5f e4       	ldi	r21, 0x4F	; 79
    2918:	c7 01       	movw	r24, r14
    291a:	b6 01       	movw	r22, r12
    291c:	0e 94 30 1e 	call	0x3c60	; 0x3c60 <__gesf2>
    2920:	18 16       	cp	r1, r24
    2922:	94 f4       	brge	.+36     	; 0x2948 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2924:	63 e8       	ldi	r22, 0x83	; 131
    2926:	72 e0       	ldi	r23, 0x02	; 2
    2928:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    292a:	df 91       	pop	r29
    292c:	cf 91       	pop	r28
    292e:	1f 91       	pop	r17
    2930:	0f 91       	pop	r16
    2932:	ff 90       	pop	r15
    2934:	ef 90       	pop	r14
    2936:	df 90       	pop	r13
    2938:	cf 90       	pop	r12
    293a:	bf 90       	pop	r11
    293c:	af 90       	pop	r10
    293e:	9f 90       	pop	r9
    2940:	8f 90       	pop	r8
    2942:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2944:	0c 94 7a 13 	jmp	0x26f4	; 0x26f4 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    2948:	2f ef       	ldi	r18, 0xFF	; 255
    294a:	3f ef       	ldi	r19, 0xFF	; 255
    294c:	4f e7       	ldi	r20, 0x7F	; 127
    294e:	5f ec       	ldi	r21, 0xCF	; 207
    2950:	c7 01       	movw	r24, r14
    2952:	b6 01       	movw	r22, r12
    2954:	0e 94 16 12 	call	0x242c	; 0x242c <__cmpsf2>
    2958:	87 fd       	sbrc	r24, 7
    295a:	e4 cf       	rjmp	.-56     	; 0x2924 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	a9 01       	movw	r20, r18
    2962:	c7 01       	movw	r24, r14
    2964:	b6 01       	movw	r22, r12
    2966:	0e 94 16 12 	call	0x242c	; 0x242c <__cmpsf2>
    296a:	87 ff       	sbrs	r24, 7
    296c:	0a c0       	rjmp	.+20     	; 0x2982 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    296e:	6d e2       	ldi	r22, 0x2D	; 45
    2970:	c8 01       	movw	r24, r16
    2972:	0e 94 9f 13 	call	0x273e	; 0x273e <_ZN5Print5printEc>
    2976:	ec 01       	movw	r28, r24
     number = -number;
    2978:	f7 fa       	bst	r15, 7
    297a:	f0 94       	com	r15
    297c:	f7 f8       	bld	r15, 7
    297e:	f0 94       	com	r15
    2980:	02 c0       	rjmp	.+4      	; 0x2986 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    2982:	c0 e0       	ldi	r28, 0x00	; 0
    2984:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2986:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    2988:	60 e0       	ldi	r22, 0x00	; 0
    298a:	70 e0       	ldi	r23, 0x00	; 0
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    2990:	7b 14       	cp	r7, r11
    2992:	41 f0       	breq	.+16     	; 0x29a4 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	40 e2       	ldi	r20, 0x20	; 32
    299a:	51 e4       	ldi	r21, 0x41	; 65
    299c:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    29a0:	b3 94       	inc	r11
    29a2:	f6 cf       	rjmp	.-20     	; 0x2990 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    29a4:	a7 01       	movw	r20, r14
    29a6:	96 01       	movw	r18, r12
    29a8:	0e 94 aa 11 	call	0x2354	; 0x2354 <__addsf3>
    29ac:	6b 01       	movw	r12, r22
    29ae:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    29b0:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <__fixunssfsi>
    29b4:	4b 01       	movw	r8, r22
    29b6:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    29b8:	2a e0       	ldi	r18, 0x0A	; 10
    29ba:	ab 01       	movw	r20, r22
    29bc:	bc 01       	movw	r22, r24
    29be:	c8 01       	movw	r24, r16
    29c0:	0e 94 a6 13 	call	0x274c	; 0x274c <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    29c4:	c8 0f       	add	r28, r24
    29c6:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    29c8:	77 20       	and	r7, r7
    29ca:	b9 f1       	breq	.+110    	; 0x2a3a <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    29cc:	c5 01       	movw	r24, r10
    29ce:	b4 01       	movw	r22, r8
    29d0:	0e 94 1b 12 	call	0x2436	; 0x2436 <__floatunsisf>
    29d4:	9b 01       	movw	r18, r22
    29d6:	ac 01       	movw	r20, r24
    29d8:	c7 01       	movw	r24, r14
    29da:	b6 01       	movw	r22, r12
    29dc:	0e 94 a9 11 	call	0x2352	; 0x2352 <__subsf3>
    29e0:	6b 01       	movw	r12, r22
    29e2:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    29e4:	6e e2       	ldi	r22, 0x2E	; 46
    29e6:	c8 01       	movw	r24, r16
    29e8:	0e 94 9f 13 	call	0x273e	; 0x273e <_ZN5Print5printEc>
    29ec:	c8 0f       	add	r28, r24
    29ee:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	40 e2       	ldi	r20, 0x20	; 32
    29f6:	51 e4       	ldi	r21, 0x41	; 65
    29f8:	c7 01       	movw	r24, r14
    29fa:	b6 01       	movw	r22, r12
    29fc:	0e 94 cd 12 	call	0x259a	; 0x259a <__mulsf3>
    2a00:	4b 01       	movw	r8, r22
    2a02:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    2a04:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <__fixunssfsi>
    2a08:	6b 01       	movw	r12, r22
    2a0a:	7c 01       	movw	r14, r24
    n += print(toPrint);
    2a0c:	4a e0       	ldi	r20, 0x0A	; 10
    2a0e:	50 e0       	ldi	r21, 0x00	; 0
    2a10:	c8 01       	movw	r24, r16
    2a12:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <_ZN5Print5printEji>
    2a16:	c8 0f       	add	r28, r24
    2a18:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    2a1a:	b6 01       	movw	r22, r12
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	0e 94 1b 12 	call	0x2436	; 0x2436 <__floatunsisf>
    2a24:	9b 01       	movw	r18, r22
    2a26:	ac 01       	movw	r20, r24
    2a28:	c5 01       	movw	r24, r10
    2a2a:	b4 01       	movw	r22, r8
    2a2c:	0e 94 a9 11 	call	0x2352	; 0x2352 <__subsf3>
    2a30:	6b 01       	movw	r12, r22
    2a32:	7c 01       	movw	r14, r24
    2a34:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2a36:	71 10       	cpse	r7, r1
    2a38:	db cf       	rjmp	.-74     	; 0x29f0 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2a3a:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2a3c:	df 91       	pop	r29
    2a3e:	cf 91       	pop	r28
    2a40:	1f 91       	pop	r17
    2a42:	0f 91       	pop	r16
    2a44:	ff 90       	pop	r15
    2a46:	ef 90       	pop	r14
    2a48:	df 90       	pop	r13
    2a4a:	cf 90       	pop	r12
    2a4c:	bf 90       	pop	r11
    2a4e:	af 90       	pop	r10
    2a50:	9f 90       	pop	r9
    2a52:	8f 90       	pop	r8
    2a54:	7f 90       	pop	r7
    2a56:	08 95       	ret

00002a58 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2a58:	0c 94 51 14 	jmp	0x28a2	; 0x28a2 <_ZN5Print10printFloatEdh>

00002a5c <_ZL4RecvPVhh>:
//=======================================================================
//=======================================================================

USBDevice_ USBDevice;

USBDevice_::USBDevice_()
    2a5c:	61 50       	subi	r22, 0x01	; 1
    2a5e:	30 f0       	brcs	.+12     	; 0x2a6c <_ZL4RecvPVhh+0x10>
    2a60:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2a64:	fc 01       	movw	r30, r24
    2a66:	20 83       	st	Z, r18
    2a68:	01 96       	adiw	r24, 0x01	; 1
    2a6a:	f8 cf       	rjmp	.-16     	; 0x2a5c <_ZL4RecvPVhh>
    2a6c:	28 98       	cbi	0x05, 0	; 5
    2a6e:	84 e6       	ldi	r24, 0x64	; 100
    2a70:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <RxLEDPulse>
    2a74:	08 95       	ret

00002a76 <_ZL11SendControlh>:
    2a76:	40 91 96 04 	lds	r20, 0x0496	; 0x800496 <_ZL6_cmark>
    2a7a:	50 91 97 04 	lds	r21, 0x0497	; 0x800497 <_ZL6_cmark+0x1>
    2a7e:	20 91 94 04 	lds	r18, 0x0494	; 0x800494 <_ZL5_cend>
    2a82:	30 91 95 04 	lds	r19, 0x0495	; 0x800495 <_ZL5_cend+0x1>
    2a86:	42 17       	cp	r20, r18
    2a88:	53 07       	cpc	r21, r19
    2a8a:	b4 f4       	brge	.+44     	; 0x2ab8 <_ZL11SendControlh+0x42>
    2a8c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a90:	95 70       	andi	r25, 0x05	; 5
    2a92:	e1 f3       	breq	.-8      	; 0x2a8c <_ZL11SendControlh+0x16>
    2a94:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a98:	92 fd       	sbrc	r25, 2
    2a9a:	19 c0       	rjmp	.+50     	; 0x2ace <_ZL11SendControlh+0x58>
    2a9c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2aa0:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <_ZL6_cmark>
    2aa4:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <_ZL6_cmark+0x1>
    2aa8:	01 96       	adiw	r24, 0x01	; 1
    2aaa:	8f 73       	andi	r24, 0x3F	; 63
    2aac:	99 27       	eor	r25, r25
    2aae:	89 2b       	or	r24, r25
    2ab0:	19 f4       	brne	.+6      	; 0x2ab8 <_ZL11SendControlh+0x42>
    2ab2:	8e ef       	ldi	r24, 0xFE	; 254
    2ab4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2ab8:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <_ZL6_cmark>
    2abc:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <_ZL6_cmark+0x1>
    2ac0:	01 96       	adiw	r24, 0x01	; 1
    2ac2:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <_ZL6_cmark+0x1>
    2ac6:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <_ZL6_cmark>
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	08 95       	ret
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	08 95       	ret

00002ad2 <_ZL24USB_SendStringDescriptorPKhhh>:
    2ad2:	df 92       	push	r13
    2ad4:	ef 92       	push	r14
    2ad6:	ff 92       	push	r15
    2ad8:	0f 93       	push	r16
    2ada:	1f 93       	push	r17
    2adc:	cf 93       	push	r28
    2ade:	df 93       	push	r29
    2ae0:	d8 2e       	mov	r13, r24
    2ae2:	f9 2e       	mov	r15, r25
    2ae4:	e4 2e       	mov	r14, r20
    2ae6:	06 2f       	mov	r16, r22
    2ae8:	10 e0       	ldi	r17, 0x00	; 0
    2aea:	c8 01       	movw	r24, r16
    2aec:	01 96       	adiw	r24, 0x01	; 1
    2aee:	88 0f       	add	r24, r24
    2af0:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_ZL11SendControlh>
    2af4:	83 e0       	ldi	r24, 0x03	; 3
    2af6:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_ZL11SendControlh>
    2afa:	cd 2d       	mov	r28, r13
    2afc:	df 2d       	mov	r29, r15
    2afe:	0c 0f       	add	r16, r28
    2b00:	1d 1f       	adc	r17, r29
    2b02:	c0 17       	cp	r28, r16
    2b04:	d1 07       	cpc	r29, r17
    2b06:	89 f0       	breq	.+34     	; 0x2b2a <_ZL24USB_SendStringDescriptorPKhhh+0x58>
    2b08:	e7 fe       	sbrs	r14, 7
    2b0a:	03 c0       	rjmp	.+6      	; 0x2b12 <_ZL24USB_SendStringDescriptorPKhhh+0x40>
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	84 91       	lpm	r24, Z
    2b10:	01 c0       	rjmp	.+2      	; 0x2b14 <_ZL24USB_SendStringDescriptorPKhhh+0x42>
    2b12:	88 81       	ld	r24, Y
    2b14:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_ZL11SendControlh>
    2b18:	f8 2e       	mov	r15, r24
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_ZL11SendControlh>
    2b20:	8f 21       	and	r24, r15
    2b22:	21 96       	adiw	r28, 0x01	; 1
    2b24:	81 11       	cpse	r24, r1
    2b26:	ed cf       	rjmp	.-38     	; 0x2b02 <_ZL24USB_SendStringDescriptorPKhhh+0x30>
    2b28:	01 c0       	rjmp	.+2      	; 0x2b2c <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	df 91       	pop	r29
    2b2e:	cf 91       	pop	r28
    2b30:	1f 91       	pop	r17
    2b32:	0f 91       	pop	r16
    2b34:	ff 90       	pop	r15
    2b36:	ef 90       	pop	r14
    2b38:	df 90       	pop	r13
    2b3a:	08 95       	ret

00002b3c <_ZL15USB_ClockEnablev>:
    2b3c:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    2b40:	81 60       	ori	r24, 0x01	; 1
    2b42:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    2b46:	80 ea       	ldi	r24, 0xA0	; 160
    2b48:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2b4c:	89 b5       	in	r24, 0x29	; 41
    2b4e:	80 61       	ori	r24, 0x10	; 16
    2b50:	89 bd       	out	0x29, r24	; 41
    2b52:	89 b5       	in	r24, 0x29	; 41
    2b54:	82 60       	ori	r24, 0x02	; 2
    2b56:	89 bd       	out	0x29, r24	; 41
    2b58:	09 b4       	in	r0, 0x29	; 41
    2b5a:	00 fe       	sbrs	r0, 0
    2b5c:	fd cf       	rjmp	.-6      	; 0x2b58 <_ZL15USB_ClockEnablev+0x1c>
    2b5e:	61 e0       	ldi	r22, 0x01	; 1
    2b60:	70 e0       	ldi	r23, 0x00	; 0
    2b62:	80 e0       	ldi	r24, 0x00	; 0
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <delay>
    2b6a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2b6e:	8f 7c       	andi	r24, 0xCF	; 207
    2b70:	80 61       	ori	r24, 0x10	; 16
    2b72:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2b76:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2b7a:	80 7f       	andi	r24, 0xF0	; 240
    2b7c:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2b80:	08 95       	ret

00002b82 <_ZL14SendInterfacesv>:
    2b82:	cf 93       	push	r28
    2b84:	df 93       	push	r29
    2b86:	1f 92       	push	r1
    2b88:	cd b7       	in	r28, 0x3d	; 61
    2b8a:	de b7       	in	r29, 0x3e	; 62
    2b8c:	19 82       	std	Y+1, r1	; 0x01
    2b8e:	ce 01       	movw	r24, r28
    2b90:	01 96       	adiw	r24, 0x01	; 1
    2b92:	0e 94 47 1c 	call	0x388e	; 0x388e <_Z16CDC_GetInterfacePh>
    2b96:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_Z12PluggableUSBv>
    2b9a:	be 01       	movw	r22, r28
    2b9c:	6f 5f       	subi	r22, 0xFF	; 255
    2b9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2ba0:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <_ZN13PluggableUSB_12getInterfaceEPh>
    2ba4:	89 81       	ldd	r24, Y+1	; 0x01
    2ba6:	0f 90       	pop	r0
    2ba8:	df 91       	pop	r29
    2baa:	cf 91       	pop	r28
    2bac:	08 95       	ret

00002bae <_ZN6LockEPC1Eh>:
    2bae:	2f b7       	in	r18, 0x3f	; 63
    2bb0:	fc 01       	movw	r30, r24
    2bb2:	20 83       	st	Z, r18
    2bb4:	f8 94       	cli
    2bb6:	67 70       	andi	r22, 0x07	; 7
    2bb8:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2bbc:	08 95       	ret

00002bbe <_Z13USB_Availableh>:
    2bbe:	cf 93       	push	r28
    2bc0:	df 93       	push	r29
    2bc2:	1f 92       	push	r1
    2bc4:	cd b7       	in	r28, 0x3d	; 61
    2bc6:	de b7       	in	r29, 0x3e	; 62
    2bc8:	68 2f       	mov	r22, r24
    2bca:	ce 01       	movw	r24, r28
    2bcc:	01 96       	adiw	r24, 0x01	; 1
    2bce:	0e 94 d7 15 	call	0x2bae	; 0x2bae <_ZN6LockEPC1Eh>
    2bd2:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2bd6:	99 81       	ldd	r25, Y+1	; 0x01
    2bd8:	9f bf       	out	0x3f, r25	; 63
    2bda:	0f 90       	pop	r0
    2bdc:	df 91       	pop	r29
    2bde:	cf 91       	pop	r28
    2be0:	08 95       	ret

00002be2 <_Z8USB_RecvhPvi>:
    2be2:	ef 92       	push	r14
    2be4:	ff 92       	push	r15
    2be6:	0f 93       	push	r16
    2be8:	1f 93       	push	r17
    2bea:	cf 93       	push	r28
    2bec:	df 93       	push	r29
    2bee:	1f 92       	push	r1
    2bf0:	cd b7       	in	r28, 0x3d	; 61
    2bf2:	de b7       	in	r29, 0x3e	; 62
    2bf4:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <_usbConfiguration>
    2bf8:	99 23       	and	r25, r25
    2bfa:	11 f0       	breq	.+4      	; 0x2c00 <_Z8USB_RecvhPvi+0x1e>
    2bfc:	57 ff       	sbrs	r21, 7
    2bfe:	03 c0       	rjmp	.+6      	; 0x2c06 <_Z8USB_RecvhPvi+0x24>
    2c00:	8f ef       	ldi	r24, 0xFF	; 255
    2c02:	9f ef       	ldi	r25, 0xFF	; 255
    2c04:	29 c0       	rjmp	.+82     	; 0x2c58 <_Z8USB_RecvhPvi+0x76>
    2c06:	8a 01       	movw	r16, r20
    2c08:	7b 01       	movw	r14, r22
    2c0a:	68 2f       	mov	r22, r24
    2c0c:	ce 01       	movw	r24, r28
    2c0e:	01 96       	adiw	r24, 0x01	; 1
    2c10:	0e 94 d7 15 	call	0x2bae	; 0x2bae <_ZN6LockEPC1Eh>
    2c14:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	02 17       	cp	r16, r18
    2c1c:	13 07       	cpc	r17, r19
    2c1e:	0c f4       	brge	.+2      	; 0x2c22 <_Z8USB_RecvhPvi+0x40>
    2c20:	98 01       	movw	r18, r16
    2c22:	82 2f       	mov	r24, r18
    2c24:	f7 01       	movw	r30, r14
    2c26:	94 e6       	ldi	r25, 0x64	; 100
    2c28:	81 50       	subi	r24, 0x01	; 1
    2c2a:	38 f0       	brcs	.+14     	; 0x2c3a <_Z8USB_RecvhPvi+0x58>
    2c2c:	28 98       	cbi	0x05, 0	; 5
    2c2e:	90 93 9b 04 	sts	0x049B, r25	; 0x80049b <RxLEDPulse>
    2c32:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2c36:	41 93       	st	Z+, r20
    2c38:	f7 cf       	rjmp	.-18     	; 0x2c28 <_Z8USB_RecvhPvi+0x46>
    2c3a:	21 15       	cp	r18, r1
    2c3c:	31 05       	cpc	r19, r1
    2c3e:	21 f0       	breq	.+8      	; 0x2c48 <_Z8USB_RecvhPvi+0x66>
    2c40:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2c44:	88 23       	and	r24, r24
    2c46:	21 f0       	breq	.+8      	; 0x2c50 <_Z8USB_RecvhPvi+0x6e>
    2c48:	89 81       	ldd	r24, Y+1	; 0x01
    2c4a:	8f bf       	out	0x3f, r24	; 63
    2c4c:	c9 01       	movw	r24, r18
    2c4e:	04 c0       	rjmp	.+8      	; 0x2c58 <_Z8USB_RecvhPvi+0x76>
    2c50:	8b e6       	ldi	r24, 0x6B	; 107
    2c52:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2c56:	f8 cf       	rjmp	.-16     	; 0x2c48 <_Z8USB_RecvhPvi+0x66>
    2c58:	0f 90       	pop	r0
    2c5a:	df 91       	pop	r29
    2c5c:	cf 91       	pop	r28
    2c5e:	1f 91       	pop	r17
    2c60:	0f 91       	pop	r16
    2c62:	ff 90       	pop	r15
    2c64:	ef 90       	pop	r14
    2c66:	08 95       	ret

00002c68 <_Z8USB_Recvh>:
    2c68:	cf 93       	push	r28
    2c6a:	df 93       	push	r29
    2c6c:	1f 92       	push	r1
    2c6e:	cd b7       	in	r28, 0x3d	; 61
    2c70:	de b7       	in	r29, 0x3e	; 62
    2c72:	41 e0       	ldi	r20, 0x01	; 1
    2c74:	50 e0       	ldi	r21, 0x00	; 0
    2c76:	be 01       	movw	r22, r28
    2c78:	6f 5f       	subi	r22, 0xFF	; 255
    2c7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c7c:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <_Z8USB_RecvhPvi>
    2c80:	01 97       	sbiw	r24, 0x01	; 1
    2c82:	19 f4       	brne	.+6      	; 0x2c8a <_Z8USB_Recvh+0x22>
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	02 c0       	rjmp	.+4      	; 0x2c8e <_Z8USB_Recvh+0x26>
    2c8a:	8f ef       	ldi	r24, 0xFF	; 255
    2c8c:	9f ef       	ldi	r25, 0xFF	; 255
    2c8e:	0f 90       	pop	r0
    2c90:	df 91       	pop	r29
    2c92:	cf 91       	pop	r28
    2c94:	08 95       	ret

00002c96 <_Z13USB_SendSpaceh>:
    2c96:	cf 93       	push	r28
    2c98:	df 93       	push	r29
    2c9a:	1f 92       	push	r1
    2c9c:	cd b7       	in	r28, 0x3d	; 61
    2c9e:	de b7       	in	r29, 0x3e	; 62
    2ca0:	68 2f       	mov	r22, r24
    2ca2:	ce 01       	movw	r24, r28
    2ca4:	01 96       	adiw	r24, 0x01	; 1
    2ca6:	0e 94 d7 15 	call	0x2bae	; 0x2bae <_ZN6LockEPC1Eh>
    2caa:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2cae:	89 2f       	mov	r24, r25
    2cb0:	80 72       	andi	r24, 0x20	; 32
    2cb2:	95 ff       	sbrs	r25, 5
    2cb4:	04 c0       	rjmp	.+8      	; 0x2cbe <_Z13USB_SendSpaceh+0x28>
    2cb6:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2cba:	80 e4       	ldi	r24, 0x40	; 64
    2cbc:	89 1b       	sub	r24, r25
    2cbe:	99 81       	ldd	r25, Y+1	; 0x01
    2cc0:	9f bf       	out	0x3f, r25	; 63
    2cc2:	0f 90       	pop	r0
    2cc4:	df 91       	pop	r29
    2cc6:	cf 91       	pop	r28
    2cc8:	08 95       	ret

00002cca <_Z8USB_SendhPKvi>:
    2cca:	5f 92       	push	r5
    2ccc:	6f 92       	push	r6
    2cce:	7f 92       	push	r7
    2cd0:	8f 92       	push	r8
    2cd2:	9f 92       	push	r9
    2cd4:	af 92       	push	r10
    2cd6:	bf 92       	push	r11
    2cd8:	cf 92       	push	r12
    2cda:	df 92       	push	r13
    2cdc:	ef 92       	push	r14
    2cde:	ff 92       	push	r15
    2ce0:	0f 93       	push	r16
    2ce2:	1f 93       	push	r17
    2ce4:	cf 93       	push	r28
    2ce6:	df 93       	push	r29
    2ce8:	1f 92       	push	r1
    2cea:	cd b7       	in	r28, 0x3d	; 61
    2cec:	de b7       	in	r29, 0x3e	; 62
    2cee:	98 2e       	mov	r9, r24
    2cf0:	6b 01       	movw	r12, r22
    2cf2:	b4 2e       	mov	r11, r20
    2cf4:	05 2f       	mov	r16, r21
    2cf6:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <_usbConfiguration>
    2cfa:	81 11       	cpse	r24, r1
    2cfc:	03 c0       	rjmp	.+6      	; 0x2d04 <_Z8USB_SendhPKvi+0x3a>
    2cfe:	8f ef       	ldi	r24, 0xFF	; 255
    2d00:	9f ef       	ldi	r25, 0xFF	; 255
    2d02:	77 c0       	rjmp	.+238    	; 0x2df2 <_Z8USB_SendhPKvi+0x128>
    2d04:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <_usbSuspendState>
    2d08:	80 ff       	sbrs	r24, 0
    2d0a:	05 c0       	rjmp	.+10     	; 0x2d16 <_Z8USB_SendhPKvi+0x4c>
    2d0c:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2d10:	82 60       	ori	r24, 0x02	; 2
    2d12:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2d16:	eb 2c       	mov	r14, r11
    2d18:	f0 2e       	mov	r15, r16
    2d1a:	a1 2c       	mov	r10, r1
    2d1c:	8a ef       	ldi	r24, 0xFA	; 250
    2d1e:	88 2e       	mov	r8, r24
    2d20:	89 2d       	mov	r24, r9
    2d22:	80 72       	andi	r24, 0x20	; 32
    2d24:	68 2e       	mov	r6, r24
    2d26:	89 2d       	mov	r24, r9
    2d28:	80 74       	andi	r24, 0x40	; 64
    2d2a:	58 2e       	mov	r5, r24
    2d2c:	9a e3       	ldi	r25, 0x3A	; 58
    2d2e:	79 2e       	mov	r7, r25
    2d30:	e1 14       	cp	r14, r1
    2d32:	f1 04       	cpc	r15, r1
    2d34:	19 f4       	brne	.+6      	; 0x2d3c <_Z8USB_SendhPKvi+0x72>
    2d36:	aa 20       	and	r10, r10
    2d38:	09 f4       	brne	.+2      	; 0x2d3c <_Z8USB_SendhPKvi+0x72>
    2d3a:	55 c0       	rjmp	.+170    	; 0x2de6 <_Z8USB_SendhPKvi+0x11c>
    2d3c:	89 2d       	mov	r24, r9
    2d3e:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <_Z13USB_SendSpaceh>
    2d42:	18 2f       	mov	r17, r24
    2d44:	81 11       	cpse	r24, r1
    2d46:	0a c0       	rjmp	.+20     	; 0x2d5c <_Z8USB_SendhPKvi+0x92>
    2d48:	8a 94       	dec	r8
    2d4a:	88 20       	and	r8, r8
    2d4c:	c1 f2       	breq	.-80     	; 0x2cfe <_Z8USB_SendhPKvi+0x34>
    2d4e:	61 e0       	ldi	r22, 0x01	; 1
    2d50:	70 e0       	ldi	r23, 0x00	; 0
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <delay>
    2d5a:	ea cf       	rjmp	.-44     	; 0x2d30 <_Z8USB_SendhPKvi+0x66>
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	e8 16       	cp	r14, r24
    2d60:	f9 06       	cpc	r15, r25
    2d62:	0c f4       	brge	.+2      	; 0x2d66 <_Z8USB_SendhPKvi+0x9c>
    2d64:	1e 2d       	mov	r17, r14
    2d66:	69 2d       	mov	r22, r9
    2d68:	ce 01       	movw	r24, r28
    2d6a:	01 96       	adiw	r24, 0x01	; 1
    2d6c:	0e 94 d7 15 	call	0x2bae	; 0x2bae <_ZN6LockEPC1Eh>
    2d70:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2d74:	85 ff       	sbrs	r24, 5
    2d76:	34 c0       	rjmp	.+104    	; 0x2de0 <_Z8USB_SendhPKvi+0x116>
    2d78:	81 2f       	mov	r24, r17
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	e8 1a       	sub	r14, r24
    2d7e:	f9 0a       	sbc	r15, r25
    2d80:	66 20       	and	r6, r6
    2d82:	29 f0       	breq	.+10     	; 0x2d8e <_Z8USB_SendhPKvi+0xc4>
    2d84:	11 50       	subi	r17, 0x01	; 1
    2d86:	a0 f0       	brcs	.+40     	; 0x2db0 <_Z8USB_SendhPKvi+0xe6>
    2d88:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2d8c:	fb cf       	rjmp	.-10     	; 0x2d84 <_Z8USB_SendhPKvi+0xba>
    2d8e:	f6 01       	movw	r30, r12
    2d90:	97 fe       	sbrs	r9, 7
    2d92:	0a c0       	rjmp	.+20     	; 0x2da8 <_Z8USB_SendhPKvi+0xde>
    2d94:	11 50       	subi	r17, 0x01	; 1
    2d96:	50 f0       	brcs	.+20     	; 0x2dac <_Z8USB_SendhPKvi+0xe2>
    2d98:	24 91       	lpm	r18, Z
    2d9a:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2d9e:	31 96       	adiw	r30, 0x01	; 1
    2da0:	f9 cf       	rjmp	.-14     	; 0x2d94 <_Z8USB_SendhPKvi+0xca>
    2da2:	21 91       	ld	r18, Z+
    2da4:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2da8:	11 50       	subi	r17, 0x01	; 1
    2daa:	d8 f7       	brcc	.-10     	; 0x2da2 <_Z8USB_SendhPKvi+0xd8>
    2dac:	c8 0e       	add	r12, r24
    2dae:	d9 1e       	adc	r13, r25
    2db0:	aa 20       	and	r10, r10
    2db2:	19 f0       	breq	.+6      	; 0x2dba <_Z8USB_SendhPKvi+0xf0>
    2db4:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2db8:	0b c0       	rjmp	.+22     	; 0x2dd0 <_Z8USB_SendhPKvi+0x106>
    2dba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2dbe:	85 fd       	sbrc	r24, 5
    2dc0:	09 c0       	rjmp	.+18     	; 0x2dd4 <_Z8USB_SendhPKvi+0x10a>
    2dc2:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2dc6:	aa 24       	eor	r10, r10
    2dc8:	a3 94       	inc	r10
    2dca:	e1 14       	cp	r14, r1
    2dcc:	f1 04       	cpc	r15, r1
    2dce:	41 f0       	breq	.+16     	; 0x2de0 <_Z8USB_SendhPKvi+0x116>
    2dd0:	a1 2c       	mov	r10, r1
    2dd2:	06 c0       	rjmp	.+12     	; 0x2de0 <_Z8USB_SendhPKvi+0x116>
    2dd4:	e1 14       	cp	r14, r1
    2dd6:	f1 04       	cpc	r15, r1
    2dd8:	19 f4       	brne	.+6      	; 0x2de0 <_Z8USB_SendhPKvi+0x116>
    2dda:	51 10       	cpse	r5, r1
    2ddc:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
    2de2:	8f bf       	out	0x3f, r24	; 63
    2de4:	a5 cf       	rjmp	.-182    	; 0x2d30 <_Z8USB_SendhPKvi+0x66>
    2de6:	5d 98       	cbi	0x0b, 5	; 11
    2de8:	84 e6       	ldi	r24, 0x64	; 100
    2dea:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <TxLEDPulse>
    2dee:	8b 2d       	mov	r24, r11
    2df0:	90 2f       	mov	r25, r16
    2df2:	0f 90       	pop	r0
    2df4:	df 91       	pop	r29
    2df6:	cf 91       	pop	r28
    2df8:	1f 91       	pop	r17
    2dfa:	0f 91       	pop	r16
    2dfc:	ff 90       	pop	r15
    2dfe:	ef 90       	pop	r14
    2e00:	df 90       	pop	r13
    2e02:	cf 90       	pop	r12
    2e04:	bf 90       	pop	r11
    2e06:	af 90       	pop	r10
    2e08:	9f 90       	pop	r9
    2e0a:	8f 90       	pop	r8
    2e0c:	7f 90       	pop	r7
    2e0e:	6f 90       	pop	r6
    2e10:	5f 90       	pop	r5
    2e12:	08 95       	ret

00002e14 <_Z11InitControli>:
    2e14:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2e18:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <_ZL6_cmark+0x1>
    2e1c:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <_ZL6_cmark>
    2e20:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <_ZL5_cend+0x1>
    2e24:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <_ZL5_cend>
    2e28:	08 95       	ret

00002e2a <_Z15USB_SendControlhPKvi>:
    2e2a:	df 92       	push	r13
    2e2c:	ef 92       	push	r14
    2e2e:	ff 92       	push	r15
    2e30:	0f 93       	push	r16
    2e32:	1f 93       	push	r17
    2e34:	cf 93       	push	r28
    2e36:	df 93       	push	r29
    2e38:	d8 2e       	mov	r13, r24
    2e3a:	8a 01       	movw	r16, r20
    2e3c:	7b 01       	movw	r14, r22
    2e3e:	e4 0e       	add	r14, r20
    2e40:	f5 1e       	adc	r15, r21
    2e42:	eb 01       	movw	r28, r22
    2e44:	ce 15       	cp	r28, r14
    2e46:	df 05       	cpc	r29, r15
    2e48:	71 f0       	breq	.+28     	; 0x2e66 <_Z15USB_SendControlhPKvi+0x3c>
    2e4a:	d7 fe       	sbrs	r13, 7
    2e4c:	03 c0       	rjmp	.+6      	; 0x2e54 <_Z15USB_SendControlhPKvi+0x2a>
    2e4e:	fe 01       	movw	r30, r28
    2e50:	84 91       	lpm	r24, Z
    2e52:	01 c0       	rjmp	.+2      	; 0x2e56 <_Z15USB_SendControlhPKvi+0x2c>
    2e54:	88 81       	ld	r24, Y
    2e56:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <_ZL11SendControlh>
    2e5a:	21 96       	adiw	r28, 0x01	; 1
    2e5c:	81 11       	cpse	r24, r1
    2e5e:	f2 cf       	rjmp	.-28     	; 0x2e44 <_Z15USB_SendControlhPKvi+0x1a>
    2e60:	8f ef       	ldi	r24, 0xFF	; 255
    2e62:	9f ef       	ldi	r25, 0xFF	; 255
    2e64:	01 c0       	rjmp	.+2      	; 0x2e68 <_Z15USB_SendControlhPKvi+0x3e>
    2e66:	c8 01       	movw	r24, r16
    2e68:	df 91       	pop	r29
    2e6a:	cf 91       	pop	r28
    2e6c:	1f 91       	pop	r17
    2e6e:	0f 91       	pop	r16
    2e70:	ff 90       	pop	r15
    2e72:	ef 90       	pop	r14
    2e74:	df 90       	pop	r13
    2e76:	08 95       	ret

00002e78 <_Z15USB_RecvControlPvi>:
    2e78:	af 92       	push	r10
    2e7a:	bf 92       	push	r11
    2e7c:	df 92       	push	r13
    2e7e:	ef 92       	push	r14
    2e80:	ff 92       	push	r15
    2e82:	0f 93       	push	r16
    2e84:	1f 93       	push	r17
    2e86:	cf 93       	push	r28
    2e88:	df 93       	push	r29
    2e8a:	5c 01       	movw	r10, r24
    2e8c:	8b 01       	movw	r16, r22
    2e8e:	eb 01       	movw	r28, r22
    2e90:	9b ef       	ldi	r25, 0xFB	; 251
    2e92:	d9 2e       	mov	r13, r25
    2e94:	20 97       	sbiw	r28, 0x00	; 0
    2e96:	c1 f0       	breq	.+48     	; 0x2ec8 <_Z15USB_RecvControlPvi+0x50>
    2e98:	7e 01       	movw	r14, r28
    2e9a:	c1 34       	cpi	r28, 0x41	; 65
    2e9c:	d1 05       	cpc	r29, r1
    2e9e:	1c f0       	brlt	.+6      	; 0x2ea6 <_Z15USB_RecvControlPvi+0x2e>
    2ea0:	80 e4       	ldi	r24, 0x40	; 64
    2ea2:	e8 2e       	mov	r14, r24
    2ea4:	f1 2c       	mov	r15, r1
    2ea6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2eaa:	82 ff       	sbrs	r24, 2
    2eac:	fc cf       	rjmp	.-8      	; 0x2ea6 <_Z15USB_RecvControlPvi+0x2e>
    2eae:	c8 01       	movw	r24, r16
    2eb0:	8c 1b       	sub	r24, r28
    2eb2:	9d 0b       	sbc	r25, r29
    2eb4:	6e 2d       	mov	r22, r14
    2eb6:	8a 0d       	add	r24, r10
    2eb8:	9b 1d       	adc	r25, r11
    2eba:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZL4RecvPVhh>
    2ebe:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2ec2:	ce 19       	sub	r28, r14
    2ec4:	df 09       	sbc	r29, r15
    2ec6:	e6 cf       	rjmp	.-52     	; 0x2e94 <_Z15USB_RecvControlPvi+0x1c>
    2ec8:	c8 01       	movw	r24, r16
    2eca:	df 91       	pop	r29
    2ecc:	cf 91       	pop	r28
    2ece:	1f 91       	pop	r17
    2ed0:	0f 91       	pop	r16
    2ed2:	ff 90       	pop	r15
    2ed4:	ef 90       	pop	r14
    2ed6:	df 90       	pop	r13
    2ed8:	bf 90       	pop	r11
    2eda:	af 90       	pop	r10
    2edc:	08 95       	ret

00002ede <__vector_11>:
    2ede:	1f 92       	push	r1
    2ee0:	0f 92       	push	r0
    2ee2:	0f b6       	in	r0, 0x3f	; 63
    2ee4:	0f 92       	push	r0
    2ee6:	11 24       	eor	r1, r1
    2ee8:	cf 92       	push	r12
    2eea:	df 92       	push	r13
    2eec:	ef 92       	push	r14
    2eee:	ff 92       	push	r15
    2ef0:	0f 93       	push	r16
    2ef2:	1f 93       	push	r17
    2ef4:	2f 93       	push	r18
    2ef6:	3f 93       	push	r19
    2ef8:	4f 93       	push	r20
    2efa:	5f 93       	push	r21
    2efc:	6f 93       	push	r22
    2efe:	7f 93       	push	r23
    2f00:	8f 93       	push	r24
    2f02:	9f 93       	push	r25
    2f04:	af 93       	push	r26
    2f06:	bf 93       	push	r27
    2f08:	ef 93       	push	r30
    2f0a:	ff 93       	push	r31
    2f0c:	cf 93       	push	r28
    2f0e:	df 93       	push	r29
    2f10:	cd b7       	in	r28, 0x3d	; 61
    2f12:	de b7       	in	r29, 0x3e	; 62
    2f14:	6c 97       	sbiw	r28, 0x1c	; 28
    2f16:	de bf       	out	0x3e, r29	; 62
    2f18:	cd bf       	out	0x3d, r28	; 61
    2f1a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2f1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2f22:	83 ff       	sbrs	r24, 3
    2f24:	17 c1       	rjmp	.+558    	; 0x3154 <__vector_11+0x276>
    2f26:	68 e0       	ldi	r22, 0x08	; 8
    2f28:	ce 01       	movw	r24, r28
    2f2a:	45 96       	adiw	r24, 0x15	; 21
    2f2c:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <_ZL4RecvPVhh>
    2f30:	82 ef       	ldi	r24, 0xF2	; 242
    2f32:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2f36:	8d 89       	ldd	r24, Y+21	; 0x15
    2f38:	87 ff       	sbrs	r24, 7
    2f3a:	05 c0       	rjmp	.+10     	; 0x2f46 <__vector_11+0x68>
    2f3c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2f40:	90 ff       	sbrs	r25, 0
    2f42:	fc cf       	rjmp	.-8      	; 0x2f3c <__vector_11+0x5e>
    2f44:	03 c0       	rjmp	.+6      	; 0x2f4c <__vector_11+0x6e>
    2f46:	9e ef       	ldi	r25, 0xFE	; 254
    2f48:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2f4c:	98 2f       	mov	r25, r24
    2f4e:	90 76       	andi	r25, 0x60	; 96
    2f50:	09 f0       	breq	.+2      	; 0x2f54 <__vector_11+0x76>
    2f52:	d8 c0       	rjmp	.+432    	; 0x3104 <__vector_11+0x226>
    2f54:	9e 89       	ldd	r25, Y+22	; 0x16
    2f56:	4f 89       	ldd	r20, Y+23	; 0x17
    2f58:	58 8d       	ldd	r21, Y+24	; 0x18
    2f5a:	2f 89       	ldd	r18, Y+23	; 0x17
    2f5c:	18 8d       	ldd	r17, Y+24	; 0x18
    2f5e:	91 11       	cpse	r25, r1
    2f60:	0c c0       	rjmp	.+24     	; 0x2f7a <__vector_11+0x9c>
    2f62:	80 38       	cpi	r24, 0x80	; 128
    2f64:	29 f4       	brne	.+10     	; 0x2f70 <__vector_11+0x92>
    2f66:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <_usbCurrentStatus>
    2f6a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2f6e:	02 c0       	rjmp	.+4      	; 0x2f74 <__vector_11+0x96>
    2f70:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2f74:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2f78:	e6 c0       	rjmp	.+460    	; 0x3146 <__vector_11+0x268>
    2f7a:	91 30       	cpi	r25, 0x01	; 1
    2f7c:	51 f4       	brne	.+20     	; 0x2f92 <__vector_11+0xb4>
    2f7e:	81 11       	cpse	r24, r1
    2f80:	e2 c0       	rjmp	.+452    	; 0x3146 <__vector_11+0x268>
    2f82:	41 30       	cpi	r20, 0x01	; 1
    2f84:	51 05       	cpc	r21, r1
    2f86:	09 f0       	breq	.+2      	; 0x2f8a <__vector_11+0xac>
    2f88:	de c0       	rjmp	.+444    	; 0x3146 <__vector_11+0x268>
    2f8a:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <_usbCurrentStatus>
    2f8e:	8d 7f       	andi	r24, 0xFD	; 253
    2f90:	0b c0       	rjmp	.+22     	; 0x2fa8 <__vector_11+0xca>
    2f92:	93 30       	cpi	r25, 0x03	; 3
    2f94:	61 f4       	brne	.+24     	; 0x2fae <__vector_11+0xd0>
    2f96:	81 11       	cpse	r24, r1
    2f98:	d6 c0       	rjmp	.+428    	; 0x3146 <__vector_11+0x268>
    2f9a:	41 30       	cpi	r20, 0x01	; 1
    2f9c:	51 05       	cpc	r21, r1
    2f9e:	09 f0       	breq	.+2      	; 0x2fa2 <__vector_11+0xc4>
    2fa0:	d2 c0       	rjmp	.+420    	; 0x3146 <__vector_11+0x268>
    2fa2:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <_usbCurrentStatus>
    2fa6:	82 60       	ori	r24, 0x02	; 2
    2fa8:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <_usbCurrentStatus>
    2fac:	cc c0       	rjmp	.+408    	; 0x3146 <__vector_11+0x268>
    2fae:	95 30       	cpi	r25, 0x05	; 5
    2fb0:	49 f4       	brne	.+18     	; 0x2fc4 <__vector_11+0xe6>
    2fb2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2fb6:	80 ff       	sbrs	r24, 0
    2fb8:	fc cf       	rjmp	.-8      	; 0x2fb2 <__vector_11+0xd4>
    2fba:	82 2f       	mov	r24, r18
    2fbc:	80 68       	ori	r24, 0x80	; 128
    2fbe:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    2fc2:	c1 c0       	rjmp	.+386    	; 0x3146 <__vector_11+0x268>
    2fc4:	96 30       	cpi	r25, 0x06	; 6
    2fc6:	09 f0       	breq	.+2      	; 0x2fca <__vector_11+0xec>
    2fc8:	70 c0       	rjmp	.+224    	; 0x30aa <__vector_11+0x1cc>
    2fca:	eb 8c       	ldd	r14, Y+27	; 0x1b
    2fcc:	fc 8c       	ldd	r15, Y+28	; 0x1c
    2fce:	12 30       	cpi	r17, 0x02	; 2
    2fd0:	69 f5       	brne	.+90     	; 0x302c <__vector_11+0x14e>
    2fd2:	80 e0       	ldi	r24, 0x00	; 0
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <_Z11InitControli>
    2fda:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZL14SendInterfacesv>
    2fde:	99 e0       	ldi	r25, 0x09	; 9
    2fe0:	9e 01       	movw	r18, r28
    2fe2:	2f 5f       	subi	r18, 0xFF	; 255
    2fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe6:	69 01       	movw	r12, r18
    2fe8:	f9 01       	movw	r30, r18
    2fea:	29 2f       	mov	r18, r25
    2fec:	11 92       	st	Z+, r1
    2fee:	2a 95       	dec	r18
    2ff0:	e9 f7       	brne	.-6      	; 0x2fec <__vector_11+0x10e>
    2ff2:	99 83       	std	Y+1, r25	; 0x01
    2ff4:	1a 83       	std	Y+2, r17	; 0x02
    2ff6:	91 e0       	ldi	r25, 0x01	; 1
    2ff8:	9e 83       	std	Y+6, r25	; 0x06
    2ffa:	90 ea       	ldi	r25, 0xA0	; 160
    2ffc:	98 87       	std	Y+8, r25	; 0x08
    2ffe:	9a ef       	ldi	r25, 0xFA	; 250
    3000:	99 87       	std	Y+9, r25	; 0x09
    3002:	20 91 96 04 	lds	r18, 0x0496	; 0x800496 <_ZL6_cmark>
    3006:	30 91 97 04 	lds	r19, 0x0497	; 0x800497 <_ZL6_cmark+0x1>
    300a:	27 5f       	subi	r18, 0xF7	; 247
    300c:	3f 4f       	sbci	r19, 0xFF	; 255
    300e:	3c 83       	std	Y+4, r19	; 0x04
    3010:	2b 83       	std	Y+3, r18	; 0x03
    3012:	8d 83       	std	Y+5, r24	; 0x05
    3014:	c7 01       	movw	r24, r14
    3016:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <_Z11InitControli>
    301a:	49 e0       	ldi	r20, 0x09	; 9
    301c:	50 e0       	ldi	r21, 0x00	; 0
    301e:	b6 01       	movw	r22, r12
    3020:	80 e0       	ldi	r24, 0x00	; 0
    3022:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <_Z15USB_SendControlhPKvi>
    3026:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZL14SendInterfacesv>
    302a:	8d c0       	rjmp	.+282    	; 0x3146 <__vector_11+0x268>
    302c:	c7 01       	movw	r24, r14
    302e:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <_Z11InitControli>
    3032:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_Z12PluggableUSBv>
    3036:	be 01       	movw	r22, r28
    3038:	6b 5e       	subi	r22, 0xEB	; 235
    303a:	7f 4f       	sbci	r23, 0xFF	; 255
    303c:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    3040:	00 97       	sbiw	r24, 0x00	; 0
    3042:	19 f0       	breq	.+6      	; 0x304a <__vector_11+0x16c>
    3044:	0c f0       	brlt	.+2      	; 0x3048 <__vector_11+0x16a>
    3046:	7f c0       	rjmp	.+254    	; 0x3146 <__vector_11+0x268>
    3048:	82 c0       	rjmp	.+260    	; 0x314e <__vector_11+0x270>
    304a:	11 30       	cpi	r17, 0x01	; 1
    304c:	09 f4       	brne	.+2      	; 0x3050 <__vector_11+0x172>
    304e:	70 c0       	rjmp	.+224    	; 0x3130 <__vector_11+0x252>
    3050:	13 30       	cpi	r17, 0x03	; 3
    3052:	09 f0       	breq	.+2      	; 0x3056 <__vector_11+0x178>
    3054:	7c c0       	rjmp	.+248    	; 0x314e <__vector_11+0x270>
    3056:	8f 89       	ldd	r24, Y+23	; 0x17
    3058:	88 23       	and	r24, r24
    305a:	09 f4       	brne	.+2      	; 0x305e <__vector_11+0x180>
    305c:	6c c0       	rjmp	.+216    	; 0x3136 <__vector_11+0x258>
    305e:	82 30       	cpi	r24, 0x02	; 2
    3060:	29 f4       	brne	.+10     	; 0x306c <__vector_11+0x18e>
    3062:	40 e8       	ldi	r20, 0x80	; 128
    3064:	60 e1       	ldi	r22, 0x10	; 16
    3066:	88 ee       	ldi	r24, 0xE8	; 232
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	06 c0       	rjmp	.+12     	; 0x3078 <__vector_11+0x19a>
    306c:	81 30       	cpi	r24, 0x01	; 1
    306e:	39 f4       	brne	.+14     	; 0x307e <__vector_11+0x1a0>
    3070:	40 e8       	ldi	r20, 0x80	; 128
    3072:	6b e0       	ldi	r22, 0x0B	; 11
    3074:	8c ed       	ldi	r24, 0xDC	; 220
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <_ZL24USB_SendStringDescriptorPKhhh>
    307c:	56 c0       	rjmp	.+172    	; 0x312a <__vector_11+0x24c>
    307e:	83 30       	cpi	r24, 0x03	; 3
    3080:	09 f0       	breq	.+2      	; 0x3084 <__vector_11+0x1a6>
    3082:	65 c0       	rjmp	.+202    	; 0x314e <__vector_11+0x270>
    3084:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_Z12PluggableUSBv>
    3088:	8e 01       	movw	r16, r28
    308a:	0f 5f       	subi	r16, 0xFF	; 255
    308c:	1f 4f       	sbci	r17, 0xFF	; 255
    308e:	b8 01       	movw	r22, r16
    3090:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <_ZN13PluggableUSB_12getShortNameEPc>
    3094:	f8 01       	movw	r30, r16
    3096:	01 90       	ld	r0, Z+
    3098:	00 20       	and	r0, r0
    309a:	e9 f7       	brne	.-6      	; 0x3096 <__vector_11+0x1b8>
    309c:	31 97       	sbiw	r30, 0x01	; 1
    309e:	bf 01       	movw	r22, r30
    30a0:	60 1b       	sub	r22, r16
    30a2:	71 0b       	sbc	r23, r17
    30a4:	40 e0       	ldi	r20, 0x00	; 0
    30a6:	c8 01       	movw	r24, r16
    30a8:	e7 cf       	rjmp	.-50     	; 0x3078 <__vector_11+0x19a>
    30aa:	97 30       	cpi	r25, 0x07	; 7
    30ac:	09 f4       	brne	.+2      	; 0x30b0 <__vector_11+0x1d2>
    30ae:	4f c0       	rjmp	.+158    	; 0x314e <__vector_11+0x270>
    30b0:	98 30       	cpi	r25, 0x08	; 8
    30b2:	21 f4       	brne	.+8      	; 0x30bc <__vector_11+0x1de>
    30b4:	81 e0       	ldi	r24, 0x01	; 1
    30b6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    30ba:	45 c0       	rjmp	.+138    	; 0x3146 <__vector_11+0x268>
    30bc:	99 30       	cpi	r25, 0x09	; 9
    30be:	09 f0       	breq	.+2      	; 0x30c2 <__vector_11+0x1e4>
    30c0:	42 c0       	rjmp	.+132    	; 0x3146 <__vector_11+0x268>
    30c2:	83 70       	andi	r24, 0x03	; 3
    30c4:	09 f0       	breq	.+2      	; 0x30c8 <__vector_11+0x1ea>
    30c6:	43 c0       	rjmp	.+134    	; 0x314e <__vector_11+0x270>
    30c8:	eb e0       	ldi	r30, 0x0B	; 11
    30ca:	f1 e0       	ldi	r31, 0x01	; 1
    30cc:	81 e0       	ldi	r24, 0x01	; 1
    30ce:	31 e0       	ldi	r19, 0x01	; 1
    30d0:	96 e3       	ldi	r25, 0x36	; 54
    30d2:	20 81       	ld	r18, Z
    30d4:	21 11       	cpse	r18, r1
    30d6:	09 c0       	rjmp	.+18     	; 0x30ea <__vector_11+0x20c>
    30d8:	8e e7       	ldi	r24, 0x7E	; 126
    30da:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    30de:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    30e2:	8f 89       	ldd	r24, Y+23	; 0x17
    30e4:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <_usbConfiguration>
    30e8:	2e c0       	rjmp	.+92     	; 0x3146 <__vector_11+0x268>
    30ea:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    30ee:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    30f2:	21 91       	ld	r18, Z+
    30f4:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    30f8:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    30fc:	8f 5f       	subi	r24, 0xFF	; 255
    30fe:	87 30       	cpi	r24, 0x07	; 7
    3100:	41 f7       	brne	.-48     	; 0x30d2 <__vector_11+0x1f4>
    3102:	ea cf       	rjmp	.-44     	; 0x30d8 <__vector_11+0x1fa>
    3104:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3106:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3108:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <_Z11InitControli>
    310c:	89 8d       	ldd	r24, Y+25	; 0x19
    310e:	81 11       	cpse	r24, r1
    3110:	05 c0       	rjmp	.+10     	; 0x311c <__vector_11+0x23e>
    3112:	ce 01       	movw	r24, r28
    3114:	45 96       	adiw	r24, 0x15	; 21
    3116:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <_Z9CDC_SetupR8USBSetup>
    311a:	07 c0       	rjmp	.+14     	; 0x312a <__vector_11+0x24c>
    311c:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_Z12PluggableUSBv>
    3120:	be 01       	movw	r22, r28
    3122:	6b 5e       	subi	r22, 0xEB	; 235
    3124:	7f 4f       	sbci	r23, 0xFF	; 255
    3126:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <_ZN13PluggableUSB_5setupER8USBSetup>
    312a:	88 23       	and	r24, r24
    312c:	81 f0       	breq	.+32     	; 0x314e <__vector_11+0x270>
    312e:	0b c0       	rjmp	.+22     	; 0x3146 <__vector_11+0x268>
    3130:	6a ec       	ldi	r22, 0xCA	; 202
    3132:	70 e0       	ldi	r23, 0x00	; 0
    3134:	02 c0       	rjmp	.+4      	; 0x313a <__vector_11+0x25c>
    3136:	69 ef       	ldi	r22, 0xF9	; 249
    3138:	70 e0       	ldi	r23, 0x00	; 0
    313a:	fb 01       	movw	r30, r22
    313c:	44 91       	lpm	r20, Z
    313e:	50 e0       	ldi	r21, 0x00	; 0
    3140:	80 e8       	ldi	r24, 0x80	; 128
    3142:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <_Z15USB_SendControlhPKvi>
    3146:	8e ef       	ldi	r24, 0xFE	; 254
    3148:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    314c:	03 c0       	rjmp	.+6      	; 0x3154 <__vector_11+0x276>
    314e:	81 e2       	ldi	r24, 0x21	; 33
    3150:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    3154:	6c 96       	adiw	r28, 0x1c	; 28
    3156:	0f b6       	in	r0, 0x3f	; 63
    3158:	f8 94       	cli
    315a:	de bf       	out	0x3e, r29	; 62
    315c:	0f be       	out	0x3f, r0	; 63
    315e:	cd bf       	out	0x3d, r28	; 61
    3160:	df 91       	pop	r29
    3162:	cf 91       	pop	r28
    3164:	ff 91       	pop	r31
    3166:	ef 91       	pop	r30
    3168:	bf 91       	pop	r27
    316a:	af 91       	pop	r26
    316c:	9f 91       	pop	r25
    316e:	8f 91       	pop	r24
    3170:	7f 91       	pop	r23
    3172:	6f 91       	pop	r22
    3174:	5f 91       	pop	r21
    3176:	4f 91       	pop	r20
    3178:	3f 91       	pop	r19
    317a:	2f 91       	pop	r18
    317c:	1f 91       	pop	r17
    317e:	0f 91       	pop	r16
    3180:	ff 90       	pop	r15
    3182:	ef 90       	pop	r14
    3184:	df 90       	pop	r13
    3186:	cf 90       	pop	r12
    3188:	0f 90       	pop	r0
    318a:	0f be       	out	0x3f, r0	; 63
    318c:	0f 90       	pop	r0
    318e:	1f 90       	pop	r1
    3190:	18 95       	reti

00003192 <_Z9USB_Flushh>:
    3192:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    3196:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    319a:	88 23       	and	r24, r24
    319c:	19 f0       	breq	.+6      	; 0x31a4 <_Z9USB_Flushh+0x12>
    319e:	8a e3       	ldi	r24, 0x3A	; 58
    31a0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    31a4:	08 95       	ret

000031a6 <__vector_10>:
    31a6:	1f 92       	push	r1
    31a8:	0f 92       	push	r0
    31aa:	0f b6       	in	r0, 0x3f	; 63
    31ac:	0f 92       	push	r0
    31ae:	11 24       	eor	r1, r1
    31b0:	2f 93       	push	r18
    31b2:	3f 93       	push	r19
    31b4:	4f 93       	push	r20
    31b6:	5f 93       	push	r21
    31b8:	6f 93       	push	r22
    31ba:	7f 93       	push	r23
    31bc:	8f 93       	push	r24
    31be:	9f 93       	push	r25
    31c0:	af 93       	push	r26
    31c2:	bf 93       	push	r27
    31c4:	cf 93       	push	r28
    31c6:	ef 93       	push	r30
    31c8:	ff 93       	push	r31
    31ca:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    31ce:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    31d2:	83 7f       	andi	r24, 0xF3	; 243
    31d4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    31d8:	c3 ff       	sbrs	r28, 3
    31da:	0f c0       	rjmp	.+30     	; 0x31fa <__vector_10+0x54>
    31dc:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    31e0:	81 e0       	ldi	r24, 0x01	; 1
    31e2:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    31e6:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    31ea:	82 e3       	ldi	r24, 0x32	; 50
    31ec:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    31f0:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <_usbConfiguration>
    31f4:	88 e0       	ldi	r24, 0x08	; 8
    31f6:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    31fa:	c2 ff       	sbrs	r28, 2
    31fc:	19 c0       	rjmp	.+50     	; 0x3230 <__vector_10+0x8a>
    31fe:	83 e0       	ldi	r24, 0x03	; 3
    3200:	0e 94 c9 18 	call	0x3192	; 0x3192 <_Z9USB_Flushh>
    3204:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <TxLEDPulse>
    3208:	88 23       	and	r24, r24
    320a:	39 f0       	breq	.+14     	; 0x321a <__vector_10+0x74>
    320c:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <TxLEDPulse>
    3210:	81 50       	subi	r24, 0x01	; 1
    3212:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <TxLEDPulse>
    3216:	88 23       	and	r24, r24
    3218:	89 f1       	breq	.+98     	; 0x327c <__vector_10+0xd6>
    321a:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <RxLEDPulse>
    321e:	88 23       	and	r24, r24
    3220:	39 f0       	breq	.+14     	; 0x3230 <__vector_10+0x8a>
    3222:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <RxLEDPulse>
    3226:	81 50       	subi	r24, 0x01	; 1
    3228:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <RxLEDPulse>
    322c:	88 23       	and	r24, r24
    322e:	41 f1       	breq	.+80     	; 0x3280 <__vector_10+0xda>
    3230:	c4 ff       	sbrs	r28, 4
    3232:	10 c0       	rjmp	.+32     	; 0x3254 <__vector_10+0xae>
    3234:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3238:	8e 7e       	andi	r24, 0xEE	; 238
    323a:	81 60       	ori	r24, 0x01	; 1
    323c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3240:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    3244:	8f 7e       	andi	r24, 0xEF	; 239
    3246:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    324a:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <_usbSuspendState>
    324e:	8e 7e       	andi	r24, 0xEE	; 238
    3250:	80 61       	ori	r24, 0x10	; 16
    3252:	11 c0       	rjmp	.+34     	; 0x3276 <__vector_10+0xd0>
    3254:	c0 ff       	sbrs	r28, 0
    3256:	16 c0       	rjmp	.+44     	; 0x3284 <__vector_10+0xde>
    3258:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    325c:	8e 7e       	andi	r24, 0xEE	; 238
    325e:	80 61       	ori	r24, 0x10	; 16
    3260:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3264:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    3268:	8e 7e       	andi	r24, 0xEE	; 238
    326a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    326e:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <_usbSuspendState>
    3272:	8e 7e       	andi	r24, 0xEE	; 238
    3274:	81 60       	ori	r24, 0x01	; 1
    3276:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <_usbSuspendState>
    327a:	04 c0       	rjmp	.+8      	; 0x3284 <__vector_10+0xde>
    327c:	5d 9a       	sbi	0x0b, 5	; 11
    327e:	cd cf       	rjmp	.-102    	; 0x321a <__vector_10+0x74>
    3280:	28 9a       	sbi	0x05, 0	; 5
    3282:	d6 cf       	rjmp	.-84     	; 0x3230 <__vector_10+0x8a>
    3284:	ff 91       	pop	r31
    3286:	ef 91       	pop	r30
    3288:	cf 91       	pop	r28
    328a:	bf 91       	pop	r27
    328c:	af 91       	pop	r26
    328e:	9f 91       	pop	r25
    3290:	8f 91       	pop	r24
    3292:	7f 91       	pop	r23
    3294:	6f 91       	pop	r22
    3296:	5f 91       	pop	r21
    3298:	4f 91       	pop	r20
    329a:	3f 91       	pop	r19
    329c:	2f 91       	pop	r18
    329e:	0f 90       	pop	r0
    32a0:	0f be       	out	0x3f, r0	; 63
    32a2:	0f 90       	pop	r0
    32a4:	1f 90       	pop	r1
    32a6:	18 95       	reti

000032a8 <_ZN10USBDevice_6attachEv>:
{
}

void USBDevice_::attach()
{
	_usbConfiguration = 0;
    32a8:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <_usbConfiguration>
	_usbCurrentStatus = 0;
    32ac:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <_usbCurrentStatus>
	_usbSuspendState = 0;
    32b0:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <_usbSuspendState>
	USB_ClockEnable();
    32b4:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZL15USB_ClockEnablev>

	UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear already pending WAKEUP / SUSPEND requests
    32b8:	e1 ee       	ldi	r30, 0xE1	; 225
    32ba:	f0 e0       	ldi	r31, 0x00	; 0
    32bc:	80 81       	ld	r24, Z
    32be:	8e 7e       	andi	r24, 0xEE	; 238
    32c0:	80 83       	st	Z, r24
	UDIEN = (1<<EORSTE) | (1<<SOFE) | (1<<SUSPE);	// Enable interrupts for EOR (End of Reset), SOF (start of frame) and SUSPEND
    32c2:	8d e0       	ldi	r24, 0x0D	; 13
    32c4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	
	TX_RX_LED_INIT;
    32c8:	55 9a       	sbi	0x0a, 5	; 10
    32ca:	20 9a       	sbi	0x04, 0	; 4
    32cc:	08 95       	ret

000032ce <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    32ce:	1f 92       	push	r1
    32d0:	0f 92       	push	r0
    32d2:	0f b6       	in	r0, 0x3f	; 63
    32d4:	0f 92       	push	r0
    32d6:	11 24       	eor	r1, r1
    32d8:	2f 93       	push	r18
    32da:	3f 93       	push	r19
    32dc:	8f 93       	push	r24
    32de:	9f 93       	push	r25
    32e0:	af 93       	push	r26
    32e2:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    32e4:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <timer0_millis>
    32e8:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <timer0_millis+0x1>
    32ec:	a0 91 a0 04 	lds	r26, 0x04A0	; 0x8004a0 <timer0_millis+0x2>
    32f0:	b0 91 a1 04 	lds	r27, 0x04A1	; 0x8004a1 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    32f4:	30 91 9d 04 	lds	r19, 0x049D	; 0x80049d <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    32f8:	23 e0       	ldi	r18, 0x03	; 3
    32fa:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    32fc:	2d 37       	cpi	r18, 0x7D	; 125
    32fe:	20 f4       	brcc	.+8      	; 0x3308 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    3300:	01 96       	adiw	r24, 0x01	; 1
    3302:	a1 1d       	adc	r26, r1
    3304:	b1 1d       	adc	r27, r1
    3306:	05 c0       	rjmp	.+10     	; 0x3312 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    3308:	26 e8       	ldi	r18, 0x86	; 134
    330a:	23 0f       	add	r18, r19
		m += 1;
    330c:	02 96       	adiw	r24, 0x02	; 2
    330e:	a1 1d       	adc	r26, r1
    3310:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    3312:	20 93 9d 04 	sts	0x049D, r18	; 0x80049d <timer0_fract>
	timer0_millis = m;
    3316:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <timer0_millis>
    331a:	90 93 9f 04 	sts	0x049F, r25	; 0x80049f <timer0_millis+0x1>
    331e:	a0 93 a0 04 	sts	0x04A0, r26	; 0x8004a0 <timer0_millis+0x2>
    3322:	b0 93 a1 04 	sts	0x04A1, r27	; 0x8004a1 <timer0_millis+0x3>
	timer0_overflow_count++;
    3326:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <timer0_overflow_count>
    332a:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <timer0_overflow_count+0x1>
    332e:	a0 91 a4 04 	lds	r26, 0x04A4	; 0x8004a4 <timer0_overflow_count+0x2>
    3332:	b0 91 a5 04 	lds	r27, 0x04A5	; 0x8004a5 <timer0_overflow_count+0x3>
    3336:	01 96       	adiw	r24, 0x01	; 1
    3338:	a1 1d       	adc	r26, r1
    333a:	b1 1d       	adc	r27, r1
    333c:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <timer0_overflow_count>
    3340:	90 93 a3 04 	sts	0x04A3, r25	; 0x8004a3 <timer0_overflow_count+0x1>
    3344:	a0 93 a4 04 	sts	0x04A4, r26	; 0x8004a4 <timer0_overflow_count+0x2>
    3348:	b0 93 a5 04 	sts	0x04A5, r27	; 0x8004a5 <timer0_overflow_count+0x3>
}
    334c:	bf 91       	pop	r27
    334e:	af 91       	pop	r26
    3350:	9f 91       	pop	r25
    3352:	8f 91       	pop	r24
    3354:	3f 91       	pop	r19
    3356:	2f 91       	pop	r18
    3358:	0f 90       	pop	r0
    335a:	0f be       	out	0x3f, r0	; 63
    335c:	0f 90       	pop	r0
    335e:	1f 90       	pop	r1
    3360:	18 95       	reti

00003362 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    3362:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    3364:	f8 94       	cli
	m = timer0_millis;
    3366:	60 91 9e 04 	lds	r22, 0x049E	; 0x80049e <timer0_millis>
    336a:	70 91 9f 04 	lds	r23, 0x049F	; 0x80049f <timer0_millis+0x1>
    336e:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <timer0_millis+0x2>
    3372:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <timer0_millis+0x3>
	SREG = oldSREG;
    3376:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    3378:	08 95       	ret

0000337a <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    337a:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    337c:	f8 94       	cli
	m = timer0_overflow_count;
    337e:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <timer0_overflow_count>
    3382:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <timer0_overflow_count+0x1>
    3386:	a0 91 a4 04 	lds	r26, 0x04A4	; 0x8004a4 <timer0_overflow_count+0x2>
    338a:	b0 91 a5 04 	lds	r27, 0x04A5	; 0x8004a5 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    338e:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    3390:	a8 9b       	sbis	0x15, 0	; 21
    3392:	05 c0       	rjmp	.+10     	; 0x339e <micros+0x24>
    3394:	2f 3f       	cpi	r18, 0xFF	; 255
    3396:	19 f0       	breq	.+6      	; 0x339e <micros+0x24>
		m++;
    3398:	01 96       	adiw	r24, 0x01	; 1
    339a:	a1 1d       	adc	r26, r1
    339c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    339e:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    33a0:	ba 2f       	mov	r27, r26
    33a2:	a9 2f       	mov	r26, r25
    33a4:	98 2f       	mov	r25, r24
    33a6:	88 27       	eor	r24, r24
    33a8:	82 0f       	add	r24, r18
    33aa:	91 1d       	adc	r25, r1
    33ac:	a1 1d       	adc	r26, r1
    33ae:	b1 1d       	adc	r27, r1
    33b0:	bc 01       	movw	r22, r24
    33b2:	cd 01       	movw	r24, r26
    33b4:	42 e0       	ldi	r20, 0x02	; 2
    33b6:	66 0f       	add	r22, r22
    33b8:	77 1f       	adc	r23, r23
    33ba:	88 1f       	adc	r24, r24
    33bc:	99 1f       	adc	r25, r25
    33be:	4a 95       	dec	r20
    33c0:	d1 f7       	brne	.-12     	; 0x33b6 <micros+0x3c>
}
    33c2:	08 95       	ret

000033c4 <delay>:

void delay(unsigned long ms)
{
    33c4:	8f 92       	push	r8
    33c6:	9f 92       	push	r9
    33c8:	af 92       	push	r10
    33ca:	bf 92       	push	r11
    33cc:	cf 92       	push	r12
    33ce:	df 92       	push	r13
    33d0:	ef 92       	push	r14
    33d2:	ff 92       	push	r15
    33d4:	6b 01       	movw	r12, r22
    33d6:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    33d8:	0e 94 bd 19 	call	0x337a	; 0x337a <micros>
    33dc:	4b 01       	movw	r8, r22
    33de:	5c 01       	movw	r10, r24

	while (ms > 0) {
    33e0:	c1 14       	cp	r12, r1
    33e2:	d1 04       	cpc	r13, r1
    33e4:	e1 04       	cpc	r14, r1
    33e6:	f1 04       	cpc	r15, r1
    33e8:	01 f1       	breq	.+64     	; 0x342a <delay+0x66>
		yield();
    33ea:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    33ee:	0e 94 bd 19 	call	0x337a	; 0x337a <micros>
    33f2:	dc 01       	movw	r26, r24
    33f4:	cb 01       	movw	r24, r22
    33f6:	88 19       	sub	r24, r8
    33f8:	99 09       	sbc	r25, r9
    33fa:	aa 09       	sbc	r26, r10
    33fc:	bb 09       	sbc	r27, r11
    33fe:	88 3e       	cpi	r24, 0xE8	; 232
    3400:	93 40       	sbci	r25, 0x03	; 3
    3402:	a1 05       	cpc	r26, r1
    3404:	b1 05       	cpc	r27, r1
    3406:	60 f3       	brcs	.-40     	; 0x33e0 <delay+0x1c>
			ms--;
    3408:	21 e0       	ldi	r18, 0x01	; 1
    340a:	c2 1a       	sub	r12, r18
    340c:	d1 08       	sbc	r13, r1
    340e:	e1 08       	sbc	r14, r1
    3410:	f1 08       	sbc	r15, r1
			start += 1000;
    3412:	88 ee       	ldi	r24, 0xE8	; 232
    3414:	88 0e       	add	r8, r24
    3416:	83 e0       	ldi	r24, 0x03	; 3
    3418:	98 1e       	adc	r9, r24
    341a:	a1 1c       	adc	r10, r1
    341c:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    341e:	c1 14       	cp	r12, r1
    3420:	d1 04       	cpc	r13, r1
    3422:	e1 04       	cpc	r14, r1
    3424:	f1 04       	cpc	r15, r1
    3426:	19 f7       	brne	.-58     	; 0x33ee <delay+0x2a>
    3428:	db cf       	rjmp	.-74     	; 0x33e0 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    342a:	ff 90       	pop	r15
    342c:	ef 90       	pop	r14
    342e:	df 90       	pop	r13
    3430:	cf 90       	pop	r12
    3432:	bf 90       	pop	r11
    3434:	af 90       	pop	r10
    3436:	9f 90       	pop	r9
    3438:	8f 90       	pop	r8
    343a:	08 95       	ret

0000343c <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    343c:	82 30       	cpi	r24, 0x02	; 2
    343e:	91 05       	cpc	r25, r1
    3440:	38 f0       	brcs	.+14     	; 0x3450 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    3442:	88 0f       	add	r24, r24
    3444:	99 1f       	adc	r25, r25
    3446:	88 0f       	add	r24, r24
    3448:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    344a:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    344c:	01 97       	sbiw	r24, 0x01	; 1
    344e:	f1 f7       	brne	.-4      	; 0x344c <delayMicroseconds+0x10>
    3450:	08 95       	ret

00003452 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3452:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3454:	84 b5       	in	r24, 0x24	; 36
    3456:	82 60       	ori	r24, 0x02	; 2
    3458:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    345a:	84 b5       	in	r24, 0x24	; 36
    345c:	81 60       	ori	r24, 0x01	; 1
    345e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3460:	85 b5       	in	r24, 0x25	; 37
    3462:	82 60       	ori	r24, 0x02	; 2
    3464:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3466:	85 b5       	in	r24, 0x25	; 37
    3468:	81 60       	ori	r24, 0x01	; 1
    346a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    346c:	ee e6       	ldi	r30, 0x6E	; 110
    346e:	f0 e0       	ldi	r31, 0x00	; 0
    3470:	80 81       	ld	r24, Z
    3472:	81 60       	ori	r24, 0x01	; 1
    3474:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3476:	e1 e8       	ldi	r30, 0x81	; 129
    3478:	f0 e0       	ldi	r31, 0x00	; 0
    347a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    347c:	80 81       	ld	r24, Z
    347e:	82 60       	ori	r24, 0x02	; 2
    3480:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3482:	80 81       	ld	r24, Z
    3484:	81 60       	ori	r24, 0x01	; 1
    3486:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3488:	e0 e8       	ldi	r30, 0x80	; 128
    348a:	f0 e0       	ldi	r31, 0x00	; 0
    348c:	80 81       	ld	r24, Z
    348e:	81 60       	ori	r24, 0x01	; 1
    3490:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    3492:	e1 e9       	ldi	r30, 0x91	; 145
    3494:	f0 e0       	ldi	r31, 0x00	; 0
    3496:	80 81       	ld	r24, Z
    3498:	82 60       	ori	r24, 0x02	; 2
    349a:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    349c:	80 81       	ld	r24, Z
    349e:	81 60       	ori	r24, 0x01	; 1
    34a0:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    34a2:	e0 e9       	ldi	r30, 0x90	; 144
    34a4:	f0 e0       	ldi	r31, 0x00	; 0
    34a6:	80 81       	ld	r24, Z
    34a8:	81 60       	ori	r24, 0x01	; 1
    34aa:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
    34ac:	e1 ec       	ldi	r30, 0xC1	; 193
    34ae:	f0 e0       	ldi	r31, 0x00	; 0
    34b0:	80 81       	ld	r24, Z
    34b2:	84 60       	ori	r24, 0x04	; 4
    34b4:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
    34b6:	80 81       	ld	r24, Z
    34b8:	82 60       	ori	r24, 0x02	; 2
    34ba:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    34bc:	80 81       	ld	r24, Z
    34be:	81 60       	ori	r24, 0x01	; 1
    34c0:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
    34c2:	e3 ec       	ldi	r30, 0xC3	; 195
    34c4:	f0 e0       	ldi	r31, 0x00	; 0
    34c6:	80 81       	ld	r24, Z
    34c8:	81 60       	ori	r24, 0x01	; 1
    34ca:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
    34cc:	e0 ec       	ldi	r30, 0xC0	; 192
    34ce:	f0 e0       	ldi	r31, 0x00	; 0
    34d0:	80 81       	ld	r24, Z
    34d2:	82 60       	ori	r24, 0x02	; 2
    34d4:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
    34d6:	e2 ec       	ldi	r30, 0xC2	; 194
    34d8:	f0 e0       	ldi	r31, 0x00	; 0
    34da:	80 81       	ld	r24, Z
    34dc:	81 60       	ori	r24, 0x01	; 1
    34de:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    34e0:	ea e7       	ldi	r30, 0x7A	; 122
    34e2:	f0 e0       	ldi	r31, 0x00	; 0
    34e4:	80 81       	ld	r24, Z
    34e6:	84 60       	ori	r24, 0x04	; 4
    34e8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    34ea:	80 81       	ld	r24, Z
    34ec:	82 60       	ori	r24, 0x02	; 2
    34ee:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    34f0:	80 81       	ld	r24, Z
    34f2:	81 60       	ori	r24, 0x01	; 1
    34f4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    34f6:	80 81       	ld	r24, Z
    34f8:	80 68       	ori	r24, 0x80	; 128
    34fa:	80 83       	st	Z, r24
    34fc:	08 95       	ret

000034fe <analogRead>:
{
	uint8_t low, high;

#if defined(analogPinToChannel)
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
    34fe:	82 31       	cpi	r24, 0x12	; 18
    3500:	08 f0       	brcs	.+2      	; 0x3504 <analogRead+0x6>
    3502:	82 51       	subi	r24, 0x12	; 18
#endif
	pin = analogPinToChannel(pin);
    3504:	e8 2f       	mov	r30, r24
    3506:	f0 e0       	ldi	r31, 0x00	; 0
    3508:	e3 50       	subi	r30, 0x03	; 3
    350a:	ff 4f       	sbci	r31, 0xFF	; 255
    350c:	e4 91       	lpm	r30, Z
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    350e:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    3512:	e3 fb       	bst	r30, 3
    3514:	22 27       	eor	r18, r18
    3516:	20 f9       	bld	r18, 0
    3518:	30 e0       	ldi	r19, 0x00	; 0
    351a:	95 e0       	ldi	r25, 0x05	; 5
    351c:	22 0f       	add	r18, r18
    351e:	33 1f       	adc	r19, r19
    3520:	9a 95       	dec	r25
    3522:	e1 f7       	brne	.-8      	; 0x351c <analogRead+0x1e>
    3524:	8f 7d       	andi	r24, 0xDF	; 223
    3526:	28 2b       	or	r18, r24
    3528:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    352c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <analog_reference>
    3530:	20 e4       	ldi	r18, 0x40	; 64
    3532:	82 9f       	mul	r24, r18
    3534:	c0 01       	movw	r24, r0
    3536:	11 24       	eor	r1, r1
    3538:	e7 70       	andi	r30, 0x07	; 7
    353a:	e8 2b       	or	r30, r24
    353c:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    3540:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3544:	80 64       	ori	r24, 0x40	; 64
    3546:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    354a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    354e:	86 fd       	sbrc	r24, 6
    3550:	fc cf       	rjmp	.-8      	; 0x354a <analogRead+0x4c>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    3552:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    3556:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    355a:	90 e0       	ldi	r25, 0x00	; 0
}
    355c:	92 2b       	or	r25, r18
    355e:	08 95       	ret

00003560 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	fc 01       	movw	r30, r24
    3564:	31 97       	sbiw	r30, 0x01	; 1
    3566:	ef 30       	cpi	r30, 0x0F	; 15
    3568:	f1 05       	cpc	r31, r1
    356a:	b0 f5       	brcc	.+108    	; 0x35d8 <turnOffPWM+0x78>
    356c:	ea 5a       	subi	r30, 0xAA	; 170
    356e:	ff 4f       	sbci	r31, 0xFF	; 255
    3570:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3574:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3578:	8f 77       	andi	r24, 0x7F	; 127
    357a:	03 c0       	rjmp	.+6      	; 0x3582 <turnOffPWM+0x22>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    357c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3580:	8f 7d       	andi	r24, 0xDF	; 223
    3582:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3586:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    3588:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    358c:	87 7f       	andi	r24, 0xF7	; 247
    358e:	f9 cf       	rjmp	.-14     	; 0x3582 <turnOffPWM+0x22>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3590:	84 b5       	in	r24, 0x24	; 36
    3592:	8f 77       	andi	r24, 0x7F	; 127
    3594:	02 c0       	rjmp	.+4      	; 0x359a <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3596:	84 b5       	in	r24, 0x24	; 36
    3598:	8f 7d       	andi	r24, 0xDF	; 223
    359a:	84 bd       	out	0x24, r24	; 36
    359c:	08 95       	ret
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    359e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    35a2:	8f 77       	andi	r24, 0x7F	; 127
    35a4:	07 c0       	rjmp	.+14     	; 0x35b4 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    35a6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    35aa:	8f 7d       	andi	r24, 0xDF	; 223
    35ac:	03 c0       	rjmp	.+6      	; 0x35b4 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    35ae:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    35b2:	87 7f       	andi	r24, 0xF7	; 247
    35b4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    35b8:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    35ba:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    35be:	8f 77       	andi	r24, 0x7F	; 127
    35c0:	03 c0       	rjmp	.+6      	; 0x35c8 <turnOffPWM+0x68>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    35c2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    35c6:	8f 7d       	andi	r24, 0xDF	; 223
    35c8:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    35cc:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
		#endif			
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
    35ce:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    35d2:	87 7f       	andi	r24, 0xF7	; 247
    35d4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    35d8:	08 95       	ret

000035da <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    35da:	cf 93       	push	r28
    35dc:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	fc 01       	movw	r30, r24
    35e2:	e8 5d       	subi	r30, 0xD8	; 216
    35e4:	fe 4f       	sbci	r31, 0xFE	; 254
    35e6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    35e8:	fc 01       	movw	r30, r24
    35ea:	e9 5b       	subi	r30, 0xB9	; 185
    35ec:	fe 4f       	sbci	r31, 0xFE	; 254
    35ee:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    35f0:	88 23       	and	r24, r24
    35f2:	61 f1       	breq	.+88     	; 0x364c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	88 0f       	add	r24, r24
    35f8:	99 1f       	adc	r25, r25
    35fa:	fc 01       	movw	r30, r24
    35fc:	ee 57       	subi	r30, 0x7E	; 126
    35fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3600:	c5 91       	lpm	r28, Z+
    3602:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3604:	fc 01       	movw	r30, r24
    3606:	ec 58       	subi	r30, 0x8C	; 140
    3608:	fe 4f       	sbci	r31, 0xFE	; 254
    360a:	a5 91       	lpm	r26, Z+
    360c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    360e:	61 11       	cpse	r22, r1
    3610:	09 c0       	rjmp	.+18     	; 0x3624 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3612:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3614:	f8 94       	cli
		*reg &= ~bit;
    3616:	88 81       	ld	r24, Y
    3618:	20 95       	com	r18
    361a:	82 23       	and	r24, r18
    361c:	88 83       	st	Y, r24
		*out &= ~bit;
    361e:	ec 91       	ld	r30, X
    3620:	2e 23       	and	r18, r30
    3622:	0b c0       	rjmp	.+22     	; 0x363a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3624:	62 30       	cpi	r22, 0x02	; 2
    3626:	61 f4       	brne	.+24     	; 0x3640 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3628:	9f b7       	in	r25, 0x3f	; 63
                cli();
    362a:	f8 94       	cli
		*reg &= ~bit;
    362c:	88 81       	ld	r24, Y
    362e:	32 2f       	mov	r19, r18
    3630:	30 95       	com	r19
    3632:	83 23       	and	r24, r19
    3634:	88 83       	st	Y, r24
		*out |= bit;
    3636:	ec 91       	ld	r30, X
    3638:	2e 2b       	or	r18, r30
    363a:	2c 93       	st	X, r18
		SREG = oldSREG;
    363c:	9f bf       	out	0x3f, r25	; 63
    363e:	06 c0       	rjmp	.+12     	; 0x364c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3640:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3642:	f8 94       	cli
		*reg |= bit;
    3644:	e8 81       	ld	r30, Y
    3646:	2e 2b       	or	r18, r30
    3648:	28 83       	st	Y, r18
		SREG = oldSREG;
    364a:	8f bf       	out	0x3f, r24	; 63
	}
}
    364c:	df 91       	pop	r29
    364e:	cf 91       	pop	r28
    3650:	08 95       	ret

00003652 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3652:	1f 93       	push	r17
    3654:	cf 93       	push	r28
    3656:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3658:	28 2f       	mov	r18, r24
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	f9 01       	movw	r30, r18
    365e:	e7 5f       	subi	r30, 0xF7	; 247
    3660:	fe 4f       	sbci	r31, 0xFE	; 254
    3662:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3664:	f9 01       	movw	r30, r18
    3666:	e8 5d       	subi	r30, 0xD8	; 216
    3668:	fe 4f       	sbci	r31, 0xFE	; 254
    366a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    366c:	f9 01       	movw	r30, r18
    366e:	e9 5b       	subi	r30, 0xB9	; 185
    3670:	fe 4f       	sbci	r31, 0xFE	; 254
    3672:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3674:	cc 23       	and	r28, r28
    3676:	c1 f0       	breq	.+48     	; 0x36a8 <digitalWrite+0x56>
    3678:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    367a:	81 11       	cpse	r24, r1
    367c:	0e 94 b0 1a 	call	0x3560	; 0x3560 <turnOffPWM>

	out = portOutputRegister(port);
    3680:	ec 2f       	mov	r30, r28
    3682:	f0 e0       	ldi	r31, 0x00	; 0
    3684:	ee 0f       	add	r30, r30
    3686:	ff 1f       	adc	r31, r31
    3688:	ec 58       	subi	r30, 0x8C	; 140
    368a:	fe 4f       	sbci	r31, 0xFE	; 254
    368c:	a5 91       	lpm	r26, Z+
    368e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3690:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3692:	f8 94       	cli

	if (val == LOW) {
    3694:	11 11       	cpse	r17, r1
    3696:	04 c0       	rjmp	.+8      	; 0x36a0 <digitalWrite+0x4e>
		*out &= ~bit;
    3698:	8c 91       	ld	r24, X
    369a:	d0 95       	com	r29
    369c:	d8 23       	and	r29, r24
    369e:	02 c0       	rjmp	.+4      	; 0x36a4 <digitalWrite+0x52>
	} else {
		*out |= bit;
    36a0:	ec 91       	ld	r30, X
    36a2:	de 2b       	or	r29, r30
    36a4:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    36a6:	9f bf       	out	0x3f, r25	; 63
}
    36a8:	df 91       	pop	r29
    36aa:	cf 91       	pop	r28
    36ac:	1f 91       	pop	r17
    36ae:	08 95       	ret

000036b0 <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    36b0:	fc 01       	movw	r30, r24
    36b2:	80 81       	ld	r24, Z
    36b4:	91 81       	ldd	r25, Z+1	; 0x01
    36b6:	0c 94 22 1f 	jmp	0x3e44	; 0x3e44 <free>

000036ba <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    36ba:	cf 93       	push	r28
    36bc:	df 93       	push	r29
    36be:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    36c0:	88 81       	ld	r24, Y
    36c2:	99 81       	ldd	r25, Y+1	; 0x01
    36c4:	00 97       	sbiw	r24, 0x00	; 0
    36c6:	11 f0       	breq	.+4      	; 0x36cc <_ZN6String10invalidateEv+0x12>
    36c8:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <free>
	buffer = NULL;
    36cc:	19 82       	std	Y+1, r1	; 0x01
    36ce:	18 82       	st	Y, r1
	capacity = len = 0;
    36d0:	1d 82       	std	Y+5, r1	; 0x05
    36d2:	1c 82       	std	Y+4, r1	; 0x04
    36d4:	1b 82       	std	Y+3, r1	; 0x03
    36d6:	1a 82       	std	Y+2, r1	; 0x02
}
    36d8:	df 91       	pop	r29
    36da:	cf 91       	pop	r28
    36dc:	08 95       	ret

000036de <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    36de:	0f 93       	push	r16
    36e0:	1f 93       	push	r17
    36e2:	cf 93       	push	r28
    36e4:	df 93       	push	r29
    36e6:	ec 01       	movw	r28, r24
    36e8:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    36ea:	6f 5f       	subi	r22, 0xFF	; 255
    36ec:	7f 4f       	sbci	r23, 0xFF	; 255
    36ee:	88 81       	ld	r24, Y
    36f0:	99 81       	ldd	r25, Y+1	; 0x01
    36f2:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <realloc>
	if (newbuffer) {
    36f6:	00 97       	sbiw	r24, 0x00	; 0
    36f8:	31 f0       	breq	.+12     	; 0x3706 <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    36fa:	99 83       	std	Y+1, r25	; 0x01
    36fc:	88 83       	st	Y, r24
		capacity = maxStrLen;
    36fe:	1b 83       	std	Y+3, r17	; 0x03
    3700:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    3702:	81 e0       	ldi	r24, 0x01	; 1
    3704:	01 c0       	rjmp	.+2      	; 0x3708 <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    3706:	80 e0       	ldi	r24, 0x00	; 0
}
    3708:	df 91       	pop	r29
    370a:	cf 91       	pop	r28
    370c:	1f 91       	pop	r17
    370e:	0f 91       	pop	r16
    3710:	08 95       	ret

00003712 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    3712:	cf 93       	push	r28
    3714:	df 93       	push	r29
    3716:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    3718:	88 81       	ld	r24, Y
    371a:	99 81       	ldd	r25, Y+1	; 0x01
    371c:	89 2b       	or	r24, r25
    371e:	29 f0       	breq	.+10     	; 0x372a <_ZN6String7reserveEj+0x18>
    3720:	8a 81       	ldd	r24, Y+2	; 0x02
    3722:	9b 81       	ldd	r25, Y+3	; 0x03
    3724:	86 17       	cp	r24, r22
    3726:	97 07       	cpc	r25, r23
    3728:	60 f4       	brcc	.+24     	; 0x3742 <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    372a:	ce 01       	movw	r24, r28
    372c:	0e 94 6f 1b 	call	0x36de	; 0x36de <_ZN6String12changeBufferEj>
    3730:	88 23       	and	r24, r24
    3732:	41 f0       	breq	.+16     	; 0x3744 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    3734:	8c 81       	ldd	r24, Y+4	; 0x04
    3736:	9d 81       	ldd	r25, Y+5	; 0x05
    3738:	89 2b       	or	r24, r25
    373a:	19 f4       	brne	.+6      	; 0x3742 <_ZN6String7reserveEj+0x30>
    373c:	e8 81       	ld	r30, Y
    373e:	f9 81       	ldd	r31, Y+1	; 0x01
    3740:	10 82       	st	Z, r1
    3742:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    3744:	df 91       	pop	r29
    3746:	cf 91       	pop	r28
    3748:	08 95       	ret

0000374a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    374a:	ef 92       	push	r14
    374c:	ff 92       	push	r15
    374e:	0f 93       	push	r16
    3750:	1f 93       	push	r17
    3752:	cf 93       	push	r28
    3754:	df 93       	push	r29
    3756:	ec 01       	movw	r28, r24
    3758:	7b 01       	movw	r14, r22
    375a:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    375c:	ba 01       	movw	r22, r20
    375e:	0e 94 89 1b 	call	0x3712	; 0x3712 <_ZN6String7reserveEj>
    3762:	81 11       	cpse	r24, r1
    3764:	04 c0       	rjmp	.+8      	; 0x376e <_ZN6String4copyEPKcj+0x24>
		invalidate();
    3766:	ce 01       	movw	r24, r28
    3768:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <_ZN6String10invalidateEv>
		return *this;
    376c:	07 c0       	rjmp	.+14     	; 0x377c <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    376e:	1d 83       	std	Y+5, r17	; 0x05
    3770:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    3772:	b7 01       	movw	r22, r14
    3774:	88 81       	ld	r24, Y
    3776:	99 81       	ldd	r25, Y+1	; 0x01
    3778:	0e 94 7f 20 	call	0x40fe	; 0x40fe <strcpy>
	return *this;
}
    377c:	ce 01       	movw	r24, r28
    377e:	df 91       	pop	r29
    3780:	cf 91       	pop	r28
    3782:	1f 91       	pop	r17
    3784:	0f 91       	pop	r16
    3786:	ff 90       	pop	r15
    3788:	ef 90       	pop	r14
    378a:	08 95       	ret

0000378c <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    378c:	fc 01       	movw	r30, r24
    378e:	11 82       	std	Z+1, r1	; 0x01
    3790:	10 82       	st	Z, r1
	capacity = 0;
    3792:	13 82       	std	Z+3, r1	; 0x03
    3794:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3796:	15 82       	std	Z+5, r1	; 0x05
    3798:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    379a:	61 15       	cp	r22, r1
    379c:	71 05       	cpc	r23, r1
    379e:	51 f0       	breq	.+20     	; 0x37b4 <_ZN6StringC1EPKc+0x28>
    37a0:	fb 01       	movw	r30, r22
    37a2:	01 90       	ld	r0, Z+
    37a4:	00 20       	and	r0, r0
    37a6:	e9 f7       	brne	.-6      	; 0x37a2 <_ZN6StringC1EPKc+0x16>
    37a8:	31 97       	sbiw	r30, 0x01	; 1
    37aa:	af 01       	movw	r20, r30
    37ac:	46 1b       	sub	r20, r22
    37ae:	57 0b       	sbc	r21, r23
    37b0:	0c 94 a5 1b 	jmp	0x374a	; 0x374a <_ZN6String4copyEPKcj>
    37b4:	08 95       	ret

000037b6 <_ZN7Serial_5writeEh>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		ret = breakValue;
		breakValue = -1;
	}
	return ret;
}
    37b6:	cf 93       	push	r28
    37b8:	df 93       	push	r29
    37ba:	1f 92       	push	r1
    37bc:	cd b7       	in	r28, 0x3d	; 61
    37be:	de b7       	in	r29, 0x3e	; 62
    37c0:	69 83       	std	Y+1, r22	; 0x01
    37c2:	dc 01       	movw	r26, r24
    37c4:	ed 91       	ld	r30, X+
    37c6:	fc 91       	ld	r31, X
    37c8:	02 80       	ldd	r0, Z+2	; 0x02
    37ca:	f3 81       	ldd	r31, Z+3	; 0x03
    37cc:	e0 2d       	mov	r30, r0
    37ce:	41 e0       	ldi	r20, 0x01	; 1
    37d0:	50 e0       	ldi	r21, 0x00	; 0
    37d2:	be 01       	movw	r22, r28
    37d4:	6f 5f       	subi	r22, 0xFF	; 255
    37d6:	7f 4f       	sbci	r23, 0xFF	; 255
    37d8:	09 95       	icall
    37da:	0f 90       	pop	r0
    37dc:	df 91       	pop	r29
    37de:	cf 91       	pop	r28
    37e0:	08 95       	ret

000037e2 <_ZN7Serial_4peekEv>:
    37e2:	cf 93       	push	r28
    37e4:	df 93       	push	r29
    37e6:	ec 01       	movw	r28, r24
    37e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    37ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    37ec:	97 ff       	sbrs	r25, 7
    37ee:	05 c0       	rjmp	.+10     	; 0x37fa <_ZN7Serial_4peekEv+0x18>
    37f0:	82 e0       	ldi	r24, 0x02	; 2
    37f2:	0e 94 34 16 	call	0x2c68	; 0x2c68 <_Z8USB_Recvh>
    37f6:	9d 87       	std	Y+13, r25	; 0x0d
    37f8:	8c 87       	std	Y+12, r24	; 0x0c
    37fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    37fc:	9d 85       	ldd	r25, Y+13	; 0x0d
    37fe:	df 91       	pop	r29
    3800:	cf 91       	pop	r28
    3802:	08 95       	ret

00003804 <_ZN7Serial_17availableForWriteEv>:
    3804:	83 e0       	ldi	r24, 0x03	; 3
    3806:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <_Z13USB_SendSpaceh>
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	08 95       	ret

0000380e <_ZN7Serial_5flushEv>:
    380e:	83 e0       	ldi	r24, 0x03	; 3
    3810:	0c 94 c9 18 	jmp	0x3192	; 0x3192 <_Z9USB_Flushh>

00003814 <_ZN7Serial_9availableEv>:
    3814:	fc 01       	movw	r30, r24
    3816:	84 85       	ldd	r24, Z+12	; 0x0c
    3818:	95 85       	ldd	r25, Z+13	; 0x0d
    381a:	97 fd       	sbrc	r25, 7
    381c:	06 c0       	rjmp	.+12     	; 0x382a <_ZN7Serial_9availableEv+0x16>
    381e:	82 e0       	ldi	r24, 0x02	; 2
    3820:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_Z13USB_Availableh>
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	01 96       	adiw	r24, 0x01	; 1
    3828:	08 95       	ret
    382a:	82 e0       	ldi	r24, 0x02	; 2
    382c:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_Z13USB_Availableh>
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	08 95       	ret

00003834 <_ZN7Serial_4readEv>:
    3834:	fc 01       	movw	r30, r24
    3836:	84 85       	ldd	r24, Z+12	; 0x0c
    3838:	95 85       	ldd	r25, Z+13	; 0x0d
    383a:	97 fd       	sbrc	r25, 7
    383c:	05 c0       	rjmp	.+10     	; 0x3848 <_ZN7Serial_4readEv+0x14>
    383e:	2f ef       	ldi	r18, 0xFF	; 255
    3840:	3f ef       	ldi	r19, 0xFF	; 255
    3842:	35 87       	std	Z+13, r19	; 0x0d
    3844:	24 87       	std	Z+12, r18	; 0x0c
    3846:	08 95       	ret
    3848:	82 e0       	ldi	r24, 0x02	; 2
    384a:	0c 94 34 16 	jmp	0x2c68	; 0x2c68 <_Z8USB_Recvh>

0000384e <_ZN7Serial_5writeEPKhj>:
    384e:	cf 93       	push	r28
    3850:	df 93       	push	r29
    3852:	ec 01       	movw	r28, r24
    3854:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL12_usbLineInfo+0x7>
    3858:	88 23       	and	r24, r24
    385a:	31 f0       	breq	.+12     	; 0x3868 <_ZN7Serial_5writeEPKhj+0x1a>
    385c:	83 e0       	ldi	r24, 0x03	; 3
    385e:	0e 94 65 16 	call	0x2cca	; 0x2cca <_Z8USB_SendhPKvi>
    3862:	18 16       	cp	r1, r24
    3864:	19 06       	cpc	r1, r25
    3866:	34 f0       	brlt	.+12     	; 0x3874 <_ZN7Serial_5writeEPKhj+0x26>
    3868:	81 e0       	ldi	r24, 0x01	; 1
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	9b 83       	std	Y+3, r25	; 0x03
    386e:	8a 83       	std	Y+2, r24	; 0x02
    3870:	80 e0       	ldi	r24, 0x00	; 0
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	df 91       	pop	r29
    3876:	cf 91       	pop	r28
    3878:	08 95       	ret

0000387a <_Z16isLUFAbootloaderv>:
    387a:	ee ef       	ldi	r30, 0xFE	; 254
    387c:	ff e7       	ldi	r31, 0x7F	; 127
    387e:	25 91       	lpm	r18, Z+
    3880:	34 91       	lpm	r19, Z
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	2b 3f       	cpi	r18, 0xFB	; 251
    3886:	3c 4d       	sbci	r19, 0xDC	; 220
    3888:	09 f0       	breq	.+2      	; 0x388c <_Z16isLUFAbootloaderv+0x12>
    388a:	80 e0       	ldi	r24, 0x00	; 0
    388c:	08 95       	ret

0000388e <_Z16CDC_GetInterfacePh>:
    388e:	fc 01       	movw	r30, r24
    3890:	90 81       	ld	r25, Z
    3892:	9e 5f       	subi	r25, 0xFE	; 254
    3894:	90 83       	st	Z, r25
    3896:	42 e4       	ldi	r20, 0x42	; 66
    3898:	50 e0       	ldi	r21, 0x00	; 0
    389a:	60 e9       	ldi	r22, 0x90	; 144
    389c:	71 e0       	ldi	r23, 0x01	; 1
    389e:	80 e8       	ldi	r24, 0x80	; 128
    38a0:	0c 94 15 17 	jmp	0x2e2a	; 0x2e2a <_Z15USB_SendControlhPKvi>

000038a4 <_Z9CDC_SetupR8USBSetup>:
    38a4:	fc 01       	movw	r30, r24
    38a6:	81 81       	ldd	r24, Z+1	; 0x01
    38a8:	90 81       	ld	r25, Z
    38aa:	91 3a       	cpi	r25, 0xA1	; 161
    38ac:	59 f4       	brne	.+22     	; 0x38c4 <_Z9CDC_SetupR8USBSetup+0x20>
    38ae:	81 32       	cpi	r24, 0x21	; 33
    38b0:	09 f0       	breq	.+2      	; 0x38b4 <_Z9CDC_SetupR8USBSetup+0x10>
    38b2:	65 c0       	rjmp	.+202    	; 0x397e <_Z9CDC_SetupR8USBSetup+0xda>
    38b4:	47 e0       	ldi	r20, 0x07	; 7
    38b6:	50 e0       	ldi	r21, 0x00	; 0
    38b8:	66 e1       	ldi	r22, 0x16	; 22
    38ba:	71 e0       	ldi	r23, 0x01	; 1
    38bc:	80 e0       	ldi	r24, 0x00	; 0
    38be:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <_Z15USB_SendControlhPKvi>
    38c2:	5b c0       	rjmp	.+182    	; 0x397a <_Z9CDC_SetupR8USBSetup+0xd6>
    38c4:	91 32       	cpi	r25, 0x21	; 33
    38c6:	09 f0       	breq	.+2      	; 0x38ca <_Z9CDC_SetupR8USBSetup+0x26>
    38c8:	5a c0       	rjmp	.+180    	; 0x397e <_Z9CDC_SetupR8USBSetup+0xda>
    38ca:	83 32       	cpi	r24, 0x23	; 35
    38cc:	69 f4       	brne	.+26     	; 0x38e8 <_Z9CDC_SetupR8USBSetup+0x44>
    38ce:	82 81       	ldd	r24, Z+2	; 0x02
    38d0:	93 81       	ldd	r25, Z+3	; 0x03
    38d2:	a0 e0       	ldi	r26, 0x00	; 0
    38d4:	b0 e0       	ldi	r27, 0x00	; 0
    38d6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_ZL10breakValue>
    38da:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_ZL10breakValue+0x1>
    38de:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <_ZL10breakValue+0x2>
    38e2:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <_ZL10breakValue+0x3>
    38e6:	49 c0       	rjmp	.+146    	; 0x397a <_Z9CDC_SetupR8USBSetup+0xd6>
    38e8:	80 32       	cpi	r24, 0x20	; 32
    38ea:	39 f4       	brne	.+14     	; 0x38fa <_Z9CDC_SetupR8USBSetup+0x56>
    38ec:	67 e0       	ldi	r22, 0x07	; 7
    38ee:	70 e0       	ldi	r23, 0x00	; 0
    38f0:	86 e1       	ldi	r24, 0x16	; 22
    38f2:	91 e0       	ldi	r25, 0x01	; 1
    38f4:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <_Z15USB_RecvControlPvi>
    38f8:	40 c0       	rjmp	.+128    	; 0x397a <_Z9CDC_SetupR8USBSetup+0xd6>
    38fa:	82 32       	cpi	r24, 0x22	; 34
    38fc:	09 f0       	breq	.+2      	; 0x3900 <_Z9CDC_SetupR8USBSetup+0x5c>
    38fe:	3d c0       	rjmp	.+122    	; 0x397a <_Z9CDC_SetupR8USBSetup+0xd6>
    3900:	82 81       	ldd	r24, Z+2	; 0x02
    3902:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZL12_usbLineInfo+0x7>
    3906:	0e 94 3d 1c 	call	0x387a	; 0x387a <_Z16isLUFAbootloaderv>
    390a:	88 23       	and	r24, r24
    390c:	19 f0       	breq	.+6      	; 0x3914 <_Z9CDC_SetupR8USBSetup+0x70>
    390e:	ee ef       	ldi	r30, 0xFE	; 254
    3910:	fa e0       	ldi	r31, 0x0A	; 10
    3912:	02 c0       	rjmp	.+4      	; 0x3918 <_Z9CDC_SetupR8USBSetup+0x74>
    3914:	e0 e0       	ldi	r30, 0x00	; 0
    3916:	f8 e0       	ldi	r31, 0x08	; 8
    3918:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_ZL12_usbLineInfo>
    391c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <_ZL12_usbLineInfo+0x1>
    3920:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <_ZL12_usbLineInfo+0x2>
    3924:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <_ZL12_usbLineInfo+0x3>
    3928:	80 3b       	cpi	r24, 0xB0	; 176
    392a:	94 40       	sbci	r25, 0x04	; 4
    392c:	a1 05       	cpc	r26, r1
    392e:	b1 05       	cpc	r27, r1
    3930:	41 f5       	brne	.+80     	; 0x3982 <_Z9CDC_SetupR8USBSetup+0xde>
    3932:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL12_usbLineInfo+0x7>
    3936:	80 fd       	sbrc	r24, 0
    3938:	24 c0       	rjmp	.+72     	; 0x3982 <_Z9CDC_SetupR8USBSetup+0xde>
    393a:	ee 3f       	cpi	r30, 0xFE	; 254
    393c:	8a e0       	ldi	r24, 0x0A	; 10
    393e:	f8 07       	cpc	r31, r24
    3940:	51 f0       	breq	.+20     	; 0x3956 <_Z9CDC_SetupR8USBSetup+0xb2>
    3942:	80 81       	ld	r24, Z
    3944:	91 81       	ldd	r25, Z+1	; 0x01
    3946:	87 37       	cpi	r24, 0x77	; 119
    3948:	27 e7       	ldi	r18, 0x77	; 119
    394a:	92 07       	cpc	r25, r18
    394c:	21 f0       	breq	.+8      	; 0x3956 <_Z9CDC_SetupR8USBSetup+0xb2>
    394e:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x5f8>
    3952:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x5f7>
    3956:	87 e7       	ldi	r24, 0x77	; 119
    3958:	97 e7       	ldi	r25, 0x77	; 119
    395a:	91 83       	std	Z+1, r25	; 0x01
    395c:	80 83       	st	Z, r24
    395e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3962:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <_ZL11wdtcsr_save>
    3966:	9b e0       	ldi	r25, 0x0B	; 11
    3968:	88 e1       	ldi	r24, 0x18	; 24
    396a:	0f b6       	in	r0, 0x3f	; 63
    396c:	f8 94       	cli
    396e:	a8 95       	wdr
    3970:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3974:	0f be       	out	0x3f, r0	; 63
    3976:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    397a:	81 e0       	ldi	r24, 0x01	; 1
    397c:	08 95       	ret
    397e:	80 e0       	ldi	r24, 0x00	; 0
    3980:	08 95       	ret
    3982:	80 81       	ld	r24, Z
    3984:	91 81       	ldd	r25, Z+1	; 0x01
    3986:	87 37       	cpi	r24, 0x77	; 119
    3988:	97 47       	sbci	r25, 0x77	; 119
    398a:	b9 f7       	brne	.-18     	; 0x397a <_Z9CDC_SetupR8USBSetup+0xd6>
    398c:	a8 95       	wdr
    398e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3992:	88 61       	ori	r24, 0x18	; 24
    3994:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3998:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <_ZL11wdtcsr_save>
    399c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    39a0:	ee 3f       	cpi	r30, 0xFE	; 254
    39a2:	8a e0       	ldi	r24, 0x0A	; 10
    39a4:	f8 07       	cpc	r31, r24
    39a6:	39 f0       	breq	.+14     	; 0x39b6 <_Z9CDC_SetupR8USBSetup+0x112>
    39a8:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x5f7>
    39ac:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x5f8>
    39b0:	91 83       	std	Z+1, r25	; 0x01
    39b2:	80 83       	st	Z, r24
    39b4:	e2 cf       	rjmp	.-60     	; 0x397a <_Z9CDC_SetupR8USBSetup+0xd6>
    39b6:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x5f8>
    39ba:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x5f7>
    39be:	dd cf       	rjmp	.-70     	; 0x397a <_Z9CDC_SetupR8USBSetup+0xd6>

000039c0 <_GLOBAL__sub_I__cdcInterface>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    39c0:	e6 ea       	ldi	r30, 0xA6	; 166
    39c2:	f4 e0       	ldi	r31, 0x04	; 4
    39c4:	13 82       	std	Z+3, r1	; 0x03
    39c6:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    39c8:	88 ee       	ldi	r24, 0xE8	; 232
    39ca:	93 e0       	ldi	r25, 0x03	; 3
    39cc:	a0 e0       	ldi	r26, 0x00	; 0
    39ce:	b0 e0       	ldi	r27, 0x00	; 0
    39d0:	84 83       	std	Z+4, r24	; 0x04
    39d2:	95 83       	std	Z+5, r25	; 0x05
    39d4:	a6 83       	std	Z+6, r26	; 0x06
    39d6:	b7 83       	std	Z+7, r27	; 0x07
class Serial_ : public Stream
{
private:
	int peek_buffer;
public:
	Serial_() { peek_buffer = -1; };
    39d8:	8b e8       	ldi	r24, 0x8B	; 139
    39da:	92 e0       	ldi	r25, 0x02	; 2
    39dc:	91 83       	std	Z+1, r25	; 0x01
    39de:	80 83       	st	Z, r24
    39e0:	8f ef       	ldi	r24, 0xFF	; 255
    39e2:	9f ef       	ldi	r25, 0xFF	; 255
    39e4:	95 87       	std	Z+13, r25	; 0x0d
    39e6:	84 87       	std	Z+12, r24	; 0x0c
    39e8:	08 95       	ret

000039ea <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    39ea:	08 95       	ret

000039ec <_ZN13PluggableUSB_12getInterfaceEPh>:
		_initEndpoints[lastEp] = node->endpointType[i];
		lastEp++;
	}
	return true;
	// restart USB layer???
}
    39ec:	ef 92       	push	r14
    39ee:	ff 92       	push	r15
    39f0:	0f 93       	push	r16
    39f2:	1f 93       	push	r17
    39f4:	cf 93       	push	r28
    39f6:	df 93       	push	r29
    39f8:	7b 01       	movw	r14, r22
    39fa:	fc 01       	movw	r30, r24
    39fc:	c2 81       	ldd	r28, Z+2	; 0x02
    39fe:	d3 81       	ldd	r29, Z+3	; 0x03
    3a00:	00 e0       	ldi	r16, 0x00	; 0
    3a02:	10 e0       	ldi	r17, 0x00	; 0
    3a04:	20 97       	sbiw	r28, 0x00	; 0
    3a06:	81 f0       	breq	.+32     	; 0x3a28 <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
    3a08:	e8 81       	ld	r30, Y
    3a0a:	f9 81       	ldd	r31, Y+1	; 0x01
    3a0c:	02 80       	ldd	r0, Z+2	; 0x02
    3a0e:	f3 81       	ldd	r31, Z+3	; 0x03
    3a10:	e0 2d       	mov	r30, r0
    3a12:	b7 01       	movw	r22, r14
    3a14:	ce 01       	movw	r24, r28
    3a16:	09 95       	icall
    3a18:	97 fd       	sbrc	r25, 7
    3a1a:	08 c0       	rjmp	.+16     	; 0x3a2c <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
    3a1c:	08 0f       	add	r16, r24
    3a1e:	19 1f       	adc	r17, r25
    3a20:	08 84       	ldd	r0, Y+8	; 0x08
    3a22:	d9 85       	ldd	r29, Y+9	; 0x09
    3a24:	c0 2d       	mov	r28, r0
    3a26:	ee cf       	rjmp	.-36     	; 0x3a04 <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    3a28:	c8 01       	movw	r24, r16
    3a2a:	02 c0       	rjmp	.+4      	; 0x3a30 <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
    3a2c:	8f ef       	ldi	r24, 0xFF	; 255
    3a2e:	9f ef       	ldi	r25, 0xFF	; 255
    3a30:	df 91       	pop	r29
    3a32:	cf 91       	pop	r28
    3a34:	1f 91       	pop	r17
    3a36:	0f 91       	pop	r16
    3a38:	ff 90       	pop	r15
    3a3a:	ef 90       	pop	r14
    3a3c:	08 95       	ret

00003a3e <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    3a3e:	0f 93       	push	r16
    3a40:	1f 93       	push	r17
    3a42:	cf 93       	push	r28
    3a44:	df 93       	push	r29
    3a46:	8b 01       	movw	r16, r22
    3a48:	fc 01       	movw	r30, r24
    3a4a:	c2 81       	ldd	r28, Z+2	; 0x02
    3a4c:	d3 81       	ldd	r29, Z+3	; 0x03
    3a4e:	20 97       	sbiw	r28, 0x00	; 0
    3a50:	71 f0       	breq	.+28     	; 0x3a6e <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
    3a52:	e8 81       	ld	r30, Y
    3a54:	f9 81       	ldd	r31, Y+1	; 0x01
    3a56:	04 80       	ldd	r0, Z+4	; 0x04
    3a58:	f5 81       	ldd	r31, Z+5	; 0x05
    3a5a:	e0 2d       	mov	r30, r0
    3a5c:	b8 01       	movw	r22, r16
    3a5e:	ce 01       	movw	r24, r28
    3a60:	09 95       	icall
    3a62:	00 97       	sbiw	r24, 0x00	; 0
    3a64:	31 f4       	brne	.+12     	; 0x3a72 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
    3a66:	08 84       	ldd	r0, Y+8	; 0x08
    3a68:	d9 85       	ldd	r29, Y+9	; 0x09
    3a6a:	c0 2d       	mov	r28, r0
    3a6c:	f0 cf       	rjmp	.-32     	; 0x3a4e <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
    3a6e:	80 e0       	ldi	r24, 0x00	; 0
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	df 91       	pop	r29
    3a74:	cf 91       	pop	r28
    3a76:	1f 91       	pop	r17
    3a78:	0f 91       	pop	r16
    3a7a:	08 95       	ret

00003a7c <_ZN13PluggableUSB_12getShortNameEPc>:
    3a7c:	0f 93       	push	r16
    3a7e:	1f 93       	push	r17
    3a80:	cf 93       	push	r28
    3a82:	df 93       	push	r29
    3a84:	8b 01       	movw	r16, r22
    3a86:	fc 01       	movw	r30, r24
    3a88:	c2 81       	ldd	r28, Z+2	; 0x02
    3a8a:	d3 81       	ldd	r29, Z+3	; 0x03
    3a8c:	20 97       	sbiw	r28, 0x00	; 0
    3a8e:	71 f0       	breq	.+28     	; 0x3aac <_ZN13PluggableUSB_12getShortNameEPc+0x30>
    3a90:	e8 81       	ld	r30, Y
    3a92:	f9 81       	ldd	r31, Y+1	; 0x01
    3a94:	06 80       	ldd	r0, Z+6	; 0x06
    3a96:	f7 81       	ldd	r31, Z+7	; 0x07
    3a98:	e0 2d       	mov	r30, r0
    3a9a:	b8 01       	movw	r22, r16
    3a9c:	ce 01       	movw	r24, r28
    3a9e:	09 95       	icall
    3aa0:	08 0f       	add	r16, r24
    3aa2:	11 1d       	adc	r17, r1
    3aa4:	08 84       	ldd	r0, Y+8	; 0x08
    3aa6:	d9 85       	ldd	r29, Y+9	; 0x09
    3aa8:	c0 2d       	mov	r28, r0
    3aaa:	f0 cf       	rjmp	.-32     	; 0x3a8c <_ZN13PluggableUSB_12getShortNameEPc+0x10>
    3aac:	f8 01       	movw	r30, r16
    3aae:	10 82       	st	Z, r1
    3ab0:	df 91       	pop	r29
    3ab2:	cf 91       	pop	r28
    3ab4:	1f 91       	pop	r17
    3ab6:	0f 91       	pop	r16
    3ab8:	08 95       	ret

00003aba <_ZN13PluggableUSB_5setupER8USBSetup>:
    3aba:	0f 93       	push	r16
    3abc:	1f 93       	push	r17
    3abe:	cf 93       	push	r28
    3ac0:	df 93       	push	r29
    3ac2:	8b 01       	movw	r16, r22
    3ac4:	fc 01       	movw	r30, r24
    3ac6:	c2 81       	ldd	r28, Z+2	; 0x02
    3ac8:	d3 81       	ldd	r29, Z+3	; 0x03
    3aca:	20 97       	sbiw	r28, 0x00	; 0
    3acc:	71 f0       	breq	.+28     	; 0x3aea <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
    3ace:	e8 81       	ld	r30, Y
    3ad0:	f9 81       	ldd	r31, Y+1	; 0x01
    3ad2:	01 90       	ld	r0, Z+
    3ad4:	f0 81       	ld	r31, Z
    3ad6:	e0 2d       	mov	r30, r0
    3ad8:	b8 01       	movw	r22, r16
    3ada:	ce 01       	movw	r24, r28
    3adc:	09 95       	icall
    3ade:	81 11       	cpse	r24, r1
    3ae0:	05 c0       	rjmp	.+10     	; 0x3aec <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
    3ae2:	08 84       	ldd	r0, Y+8	; 0x08
    3ae4:	d9 85       	ldd	r29, Y+9	; 0x09
    3ae6:	c0 2d       	mov	r28, r0
    3ae8:	f0 cf       	rjmp	.-32     	; 0x3aca <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
    3aea:	80 e0       	ldi	r24, 0x00	; 0
    3aec:	df 91       	pop	r29
    3aee:	cf 91       	pop	r28
    3af0:	1f 91       	pop	r17
    3af2:	0f 91       	pop	r16
    3af4:	08 95       	ret

00003af6 <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    3af6:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <_ZGVZ12PluggableUSBvE3obj>
    3afa:	81 11       	cpse	r24, r1
    3afc:	0d c0       	rjmp	.+26     	; 0x3b18 <_Z12PluggableUSBv+0x22>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    3afe:	82 e0       	ldi	r24, 0x02	; 2
    3b00:	80 93 f7 04 	sts	0x04F7, r24	; 0x8004f7 <_ZZ12PluggableUSBvE3obj>
    3b04:	84 e0       	ldi	r24, 0x04	; 4
    3b06:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <_ZZ12PluggableUSBvE3obj+0x1>
    3b0a:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <_ZZ12PluggableUSBvE3obj+0x3>
    3b0e:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <_ZZ12PluggableUSBvE3obj+0x2>
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    3b12:	81 e0       	ldi	r24, 0x01	; 1
    3b14:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <_ZGVZ12PluggableUSBvE3obj>
	return obj;
}
    3b18:	87 ef       	ldi	r24, 0xF7	; 247
    3b1a:	94 e0       	ldi	r25, 0x04	; 4
    3b1c:	08 95       	ret

00003b1e <__divsf3>:
    3b1e:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <__divsf3x>
    3b22:	0c 94 93 12 	jmp	0x2526	; 0x2526 <__fp_round>
    3b26:	0e 94 8c 12 	call	0x2518	; 0x2518 <__fp_pscB>
    3b2a:	58 f0       	brcs	.+22     	; 0x3b42 <__divsf3+0x24>
    3b2c:	0e 94 85 12 	call	0x250a	; 0x250a <__fp_pscA>
    3b30:	40 f0       	brcs	.+16     	; 0x3b42 <__divsf3+0x24>
    3b32:	29 f4       	brne	.+10     	; 0x3b3e <__divsf3+0x20>
    3b34:	5f 3f       	cpi	r21, 0xFF	; 255
    3b36:	29 f0       	breq	.+10     	; 0x3b42 <__divsf3+0x24>
    3b38:	0c 94 7c 12 	jmp	0x24f8	; 0x24f8 <__fp_inf>
    3b3c:	51 11       	cpse	r21, r1
    3b3e:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__fp_szero>
    3b42:	0c 94 82 12 	jmp	0x2504	; 0x2504 <__fp_nan>

00003b46 <__divsf3x>:
    3b46:	0e 94 a4 12 	call	0x2548	; 0x2548 <__fp_split3>
    3b4a:	68 f3       	brcs	.-38     	; 0x3b26 <__divsf3+0x8>

00003b4c <__divsf3_pse>:
    3b4c:	99 23       	and	r25, r25
    3b4e:	b1 f3       	breq	.-20     	; 0x3b3c <__divsf3+0x1e>
    3b50:	55 23       	and	r21, r21
    3b52:	91 f3       	breq	.-28     	; 0x3b38 <__divsf3+0x1a>
    3b54:	95 1b       	sub	r25, r21
    3b56:	55 0b       	sbc	r21, r21
    3b58:	bb 27       	eor	r27, r27
    3b5a:	aa 27       	eor	r26, r26
    3b5c:	62 17       	cp	r22, r18
    3b5e:	73 07       	cpc	r23, r19
    3b60:	84 07       	cpc	r24, r20
    3b62:	38 f0       	brcs	.+14     	; 0x3b72 <__divsf3_pse+0x26>
    3b64:	9f 5f       	subi	r25, 0xFF	; 255
    3b66:	5f 4f       	sbci	r21, 0xFF	; 255
    3b68:	22 0f       	add	r18, r18
    3b6a:	33 1f       	adc	r19, r19
    3b6c:	44 1f       	adc	r20, r20
    3b6e:	aa 1f       	adc	r26, r26
    3b70:	a9 f3       	breq	.-22     	; 0x3b5c <__divsf3_pse+0x10>
    3b72:	35 d0       	rcall	.+106    	; 0x3bde <__divsf3_pse+0x92>
    3b74:	0e 2e       	mov	r0, r30
    3b76:	3a f0       	brmi	.+14     	; 0x3b86 <__divsf3_pse+0x3a>
    3b78:	e0 e8       	ldi	r30, 0x80	; 128
    3b7a:	32 d0       	rcall	.+100    	; 0x3be0 <__divsf3_pse+0x94>
    3b7c:	91 50       	subi	r25, 0x01	; 1
    3b7e:	50 40       	sbci	r21, 0x00	; 0
    3b80:	e6 95       	lsr	r30
    3b82:	00 1c       	adc	r0, r0
    3b84:	ca f7       	brpl	.-14     	; 0x3b78 <__divsf3_pse+0x2c>
    3b86:	2b d0       	rcall	.+86     	; 0x3bde <__divsf3_pse+0x92>
    3b88:	fe 2f       	mov	r31, r30
    3b8a:	29 d0       	rcall	.+82     	; 0x3bde <__divsf3_pse+0x92>
    3b8c:	66 0f       	add	r22, r22
    3b8e:	77 1f       	adc	r23, r23
    3b90:	88 1f       	adc	r24, r24
    3b92:	bb 1f       	adc	r27, r27
    3b94:	26 17       	cp	r18, r22
    3b96:	37 07       	cpc	r19, r23
    3b98:	48 07       	cpc	r20, r24
    3b9a:	ab 07       	cpc	r26, r27
    3b9c:	b0 e8       	ldi	r27, 0x80	; 128
    3b9e:	09 f0       	breq	.+2      	; 0x3ba2 <__divsf3_pse+0x56>
    3ba0:	bb 0b       	sbc	r27, r27
    3ba2:	80 2d       	mov	r24, r0
    3ba4:	bf 01       	movw	r22, r30
    3ba6:	ff 27       	eor	r31, r31
    3ba8:	93 58       	subi	r25, 0x83	; 131
    3baa:	5f 4f       	sbci	r21, 0xFF	; 255
    3bac:	3a f0       	brmi	.+14     	; 0x3bbc <__divsf3_pse+0x70>
    3bae:	9e 3f       	cpi	r25, 0xFE	; 254
    3bb0:	51 05       	cpc	r21, r1
    3bb2:	78 f0       	brcs	.+30     	; 0x3bd2 <__divsf3_pse+0x86>
    3bb4:	0c 94 7c 12 	jmp	0x24f8	; 0x24f8 <__fp_inf>
    3bb8:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__fp_szero>
    3bbc:	5f 3f       	cpi	r21, 0xFF	; 255
    3bbe:	e4 f3       	brlt	.-8      	; 0x3bb8 <__divsf3_pse+0x6c>
    3bc0:	98 3e       	cpi	r25, 0xE8	; 232
    3bc2:	d4 f3       	brlt	.-12     	; 0x3bb8 <__divsf3_pse+0x6c>
    3bc4:	86 95       	lsr	r24
    3bc6:	77 95       	ror	r23
    3bc8:	67 95       	ror	r22
    3bca:	b7 95       	ror	r27
    3bcc:	f7 95       	ror	r31
    3bce:	9f 5f       	subi	r25, 0xFF	; 255
    3bd0:	c9 f7       	brne	.-14     	; 0x3bc4 <__divsf3_pse+0x78>
    3bd2:	88 0f       	add	r24, r24
    3bd4:	91 1d       	adc	r25, r1
    3bd6:	96 95       	lsr	r25
    3bd8:	87 95       	ror	r24
    3bda:	97 f9       	bld	r25, 7
    3bdc:	08 95       	ret
    3bde:	e1 e0       	ldi	r30, 0x01	; 1
    3be0:	66 0f       	add	r22, r22
    3be2:	77 1f       	adc	r23, r23
    3be4:	88 1f       	adc	r24, r24
    3be6:	bb 1f       	adc	r27, r27
    3be8:	62 17       	cp	r22, r18
    3bea:	73 07       	cpc	r23, r19
    3bec:	84 07       	cpc	r24, r20
    3bee:	ba 07       	cpc	r27, r26
    3bf0:	20 f0       	brcs	.+8      	; 0x3bfa <__divsf3_pse+0xae>
    3bf2:	62 1b       	sub	r22, r18
    3bf4:	73 0b       	sbc	r23, r19
    3bf6:	84 0b       	sbc	r24, r20
    3bf8:	ba 0b       	sbc	r27, r26
    3bfa:	ee 1f       	adc	r30, r30
    3bfc:	88 f7       	brcc	.-30     	; 0x3be0 <__divsf3_pse+0x94>
    3bfe:	e0 95       	com	r30
    3c00:	08 95       	ret

00003c02 <__fixunssfsi>:
    3c02:	0e 94 ac 12 	call	0x2558	; 0x2558 <__fp_splitA>
    3c06:	88 f0       	brcs	.+34     	; 0x3c2a <__fixunssfsi+0x28>
    3c08:	9f 57       	subi	r25, 0x7F	; 127
    3c0a:	98 f0       	brcs	.+38     	; 0x3c32 <__fixunssfsi+0x30>
    3c0c:	b9 2f       	mov	r27, r25
    3c0e:	99 27       	eor	r25, r25
    3c10:	b7 51       	subi	r27, 0x17	; 23
    3c12:	b0 f0       	brcs	.+44     	; 0x3c40 <__fixunssfsi+0x3e>
    3c14:	e1 f0       	breq	.+56     	; 0x3c4e <__fixunssfsi+0x4c>
    3c16:	66 0f       	add	r22, r22
    3c18:	77 1f       	adc	r23, r23
    3c1a:	88 1f       	adc	r24, r24
    3c1c:	99 1f       	adc	r25, r25
    3c1e:	1a f0       	brmi	.+6      	; 0x3c26 <__fixunssfsi+0x24>
    3c20:	ba 95       	dec	r27
    3c22:	c9 f7       	brne	.-14     	; 0x3c16 <__fixunssfsi+0x14>
    3c24:	14 c0       	rjmp	.+40     	; 0x3c4e <__fixunssfsi+0x4c>
    3c26:	b1 30       	cpi	r27, 0x01	; 1
    3c28:	91 f0       	breq	.+36     	; 0x3c4e <__fixunssfsi+0x4c>
    3c2a:	0e 94 c6 12 	call	0x258c	; 0x258c <__fp_zero>
    3c2e:	b1 e0       	ldi	r27, 0x01	; 1
    3c30:	08 95       	ret
    3c32:	0c 94 c6 12 	jmp	0x258c	; 0x258c <__fp_zero>
    3c36:	67 2f       	mov	r22, r23
    3c38:	78 2f       	mov	r23, r24
    3c3a:	88 27       	eor	r24, r24
    3c3c:	b8 5f       	subi	r27, 0xF8	; 248
    3c3e:	39 f0       	breq	.+14     	; 0x3c4e <__fixunssfsi+0x4c>
    3c40:	b9 3f       	cpi	r27, 0xF9	; 249
    3c42:	cc f3       	brlt	.-14     	; 0x3c36 <__fixunssfsi+0x34>
    3c44:	86 95       	lsr	r24
    3c46:	77 95       	ror	r23
    3c48:	67 95       	ror	r22
    3c4a:	b3 95       	inc	r27
    3c4c:	d9 f7       	brne	.-10     	; 0x3c44 <__fixunssfsi+0x42>
    3c4e:	3e f4       	brtc	.+14     	; 0x3c5e <__fixunssfsi+0x5c>
    3c50:	90 95       	com	r25
    3c52:	80 95       	com	r24
    3c54:	70 95       	com	r23
    3c56:	61 95       	neg	r22
    3c58:	7f 4f       	sbci	r23, 0xFF	; 255
    3c5a:	8f 4f       	sbci	r24, 0xFF	; 255
    3c5c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c5e:	08 95       	ret

00003c60 <__gesf2>:
    3c60:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__fp_cmp>
    3c64:	08 f4       	brcc	.+2      	; 0x3c68 <__gesf2+0x8>
    3c66:	8f ef       	ldi	r24, 0xFF	; 255
    3c68:	08 95       	ret

00003c6a <__unordsf2>:
    3c6a:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__fp_cmp>
    3c6e:	88 0b       	sbc	r24, r24
    3c70:	99 0b       	sbc	r25, r25
    3c72:	08 95       	ret

00003c74 <__divmodhi4>:
    3c74:	97 fb       	bst	r25, 7
    3c76:	07 2e       	mov	r0, r23
    3c78:	16 f4       	brtc	.+4      	; 0x3c7e <__divmodhi4+0xa>
    3c7a:	00 94       	com	r0
    3c7c:	07 d0       	rcall	.+14     	; 0x3c8c <__divmodhi4_neg1>
    3c7e:	77 fd       	sbrc	r23, 7
    3c80:	09 d0       	rcall	.+18     	; 0x3c94 <__divmodhi4_neg2>
    3c82:	0e 94 76 1e 	call	0x3cec	; 0x3cec <__udivmodhi4>
    3c86:	07 fc       	sbrc	r0, 7
    3c88:	05 d0       	rcall	.+10     	; 0x3c94 <__divmodhi4_neg2>
    3c8a:	3e f4       	brtc	.+14     	; 0x3c9a <__divmodhi4_exit>

00003c8c <__divmodhi4_neg1>:
    3c8c:	90 95       	com	r25
    3c8e:	81 95       	neg	r24
    3c90:	9f 4f       	sbci	r25, 0xFF	; 255
    3c92:	08 95       	ret

00003c94 <__divmodhi4_neg2>:
    3c94:	70 95       	com	r23
    3c96:	61 95       	neg	r22
    3c98:	7f 4f       	sbci	r23, 0xFF	; 255

00003c9a <__divmodhi4_exit>:
    3c9a:	08 95       	ret

00003c9c <__udivmodsi4>:
    3c9c:	a1 e2       	ldi	r26, 0x21	; 33
    3c9e:	1a 2e       	mov	r1, r26
    3ca0:	aa 1b       	sub	r26, r26
    3ca2:	bb 1b       	sub	r27, r27
    3ca4:	fd 01       	movw	r30, r26
    3ca6:	0d c0       	rjmp	.+26     	; 0x3cc2 <__udivmodsi4_ep>

00003ca8 <__udivmodsi4_loop>:
    3ca8:	aa 1f       	adc	r26, r26
    3caa:	bb 1f       	adc	r27, r27
    3cac:	ee 1f       	adc	r30, r30
    3cae:	ff 1f       	adc	r31, r31
    3cb0:	a2 17       	cp	r26, r18
    3cb2:	b3 07       	cpc	r27, r19
    3cb4:	e4 07       	cpc	r30, r20
    3cb6:	f5 07       	cpc	r31, r21
    3cb8:	20 f0       	brcs	.+8      	; 0x3cc2 <__udivmodsi4_ep>
    3cba:	a2 1b       	sub	r26, r18
    3cbc:	b3 0b       	sbc	r27, r19
    3cbe:	e4 0b       	sbc	r30, r20
    3cc0:	f5 0b       	sbc	r31, r21

00003cc2 <__udivmodsi4_ep>:
    3cc2:	66 1f       	adc	r22, r22
    3cc4:	77 1f       	adc	r23, r23
    3cc6:	88 1f       	adc	r24, r24
    3cc8:	99 1f       	adc	r25, r25
    3cca:	1a 94       	dec	r1
    3ccc:	69 f7       	brne	.-38     	; 0x3ca8 <__udivmodsi4_loop>
    3cce:	60 95       	com	r22
    3cd0:	70 95       	com	r23
    3cd2:	80 95       	com	r24
    3cd4:	90 95       	com	r25
    3cd6:	9b 01       	movw	r18, r22
    3cd8:	ac 01       	movw	r20, r24
    3cda:	bd 01       	movw	r22, r26
    3cdc:	cf 01       	movw	r24, r30
    3cde:	08 95       	ret

00003ce0 <__tablejump2__>:
    3ce0:	ee 0f       	add	r30, r30
    3ce2:	ff 1f       	adc	r31, r31
    3ce4:	05 90       	lpm	r0, Z+
    3ce6:	f4 91       	lpm	r31, Z
    3ce8:	e0 2d       	mov	r30, r0
    3cea:	09 94       	ijmp

00003cec <__udivmodhi4>:
    3cec:	aa 1b       	sub	r26, r26
    3cee:	bb 1b       	sub	r27, r27
    3cf0:	51 e1       	ldi	r21, 0x11	; 17
    3cf2:	07 c0       	rjmp	.+14     	; 0x3d02 <__udivmodhi4_ep>

00003cf4 <__udivmodhi4_loop>:
    3cf4:	aa 1f       	adc	r26, r26
    3cf6:	bb 1f       	adc	r27, r27
    3cf8:	a6 17       	cp	r26, r22
    3cfa:	b7 07       	cpc	r27, r23
    3cfc:	10 f0       	brcs	.+4      	; 0x3d02 <__udivmodhi4_ep>
    3cfe:	a6 1b       	sub	r26, r22
    3d00:	b7 0b       	sbc	r27, r23

00003d02 <__udivmodhi4_ep>:
    3d02:	88 1f       	adc	r24, r24
    3d04:	99 1f       	adc	r25, r25
    3d06:	5a 95       	dec	r21
    3d08:	a9 f7       	brne	.-22     	; 0x3cf4 <__udivmodhi4_loop>
    3d0a:	80 95       	com	r24
    3d0c:	90 95       	com	r25
    3d0e:	bc 01       	movw	r22, r24
    3d10:	cd 01       	movw	r24, r26
    3d12:	08 95       	ret

00003d14 <malloc>:
    3d14:	0f 93       	push	r16
    3d16:	1f 93       	push	r17
    3d18:	cf 93       	push	r28
    3d1a:	df 93       	push	r29
    3d1c:	82 30       	cpi	r24, 0x02	; 2
    3d1e:	91 05       	cpc	r25, r1
    3d20:	10 f4       	brcc	.+4      	; 0x3d26 <malloc+0x12>
    3d22:	82 e0       	ldi	r24, 0x02	; 2
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	e0 91 05 05 	lds	r30, 0x0505	; 0x800505 <__flp>
    3d2a:	f0 91 06 05 	lds	r31, 0x0506	; 0x800506 <__flp+0x1>
    3d2e:	20 e0       	ldi	r18, 0x00	; 0
    3d30:	30 e0       	ldi	r19, 0x00	; 0
    3d32:	a0 e0       	ldi	r26, 0x00	; 0
    3d34:	b0 e0       	ldi	r27, 0x00	; 0
    3d36:	30 97       	sbiw	r30, 0x00	; 0
    3d38:	19 f1       	breq	.+70     	; 0x3d80 <malloc+0x6c>
    3d3a:	40 81       	ld	r20, Z
    3d3c:	51 81       	ldd	r21, Z+1	; 0x01
    3d3e:	02 81       	ldd	r16, Z+2	; 0x02
    3d40:	13 81       	ldd	r17, Z+3	; 0x03
    3d42:	48 17       	cp	r20, r24
    3d44:	59 07       	cpc	r21, r25
    3d46:	c8 f0       	brcs	.+50     	; 0x3d7a <malloc+0x66>
    3d48:	84 17       	cp	r24, r20
    3d4a:	95 07       	cpc	r25, r21
    3d4c:	69 f4       	brne	.+26     	; 0x3d68 <malloc+0x54>
    3d4e:	10 97       	sbiw	r26, 0x00	; 0
    3d50:	31 f0       	breq	.+12     	; 0x3d5e <malloc+0x4a>
    3d52:	12 96       	adiw	r26, 0x02	; 2
    3d54:	0c 93       	st	X, r16
    3d56:	12 97       	sbiw	r26, 0x02	; 2
    3d58:	13 96       	adiw	r26, 0x03	; 3
    3d5a:	1c 93       	st	X, r17
    3d5c:	27 c0       	rjmp	.+78     	; 0x3dac <malloc+0x98>
    3d5e:	00 93 05 05 	sts	0x0505, r16	; 0x800505 <__flp>
    3d62:	10 93 06 05 	sts	0x0506, r17	; 0x800506 <__flp+0x1>
    3d66:	22 c0       	rjmp	.+68     	; 0x3dac <malloc+0x98>
    3d68:	21 15       	cp	r18, r1
    3d6a:	31 05       	cpc	r19, r1
    3d6c:	19 f0       	breq	.+6      	; 0x3d74 <malloc+0x60>
    3d6e:	42 17       	cp	r20, r18
    3d70:	53 07       	cpc	r21, r19
    3d72:	18 f4       	brcc	.+6      	; 0x3d7a <malloc+0x66>
    3d74:	9a 01       	movw	r18, r20
    3d76:	bd 01       	movw	r22, r26
    3d78:	ef 01       	movw	r28, r30
    3d7a:	df 01       	movw	r26, r30
    3d7c:	f8 01       	movw	r30, r16
    3d7e:	db cf       	rjmp	.-74     	; 0x3d36 <malloc+0x22>
    3d80:	21 15       	cp	r18, r1
    3d82:	31 05       	cpc	r19, r1
    3d84:	f9 f0       	breq	.+62     	; 0x3dc4 <malloc+0xb0>
    3d86:	28 1b       	sub	r18, r24
    3d88:	39 0b       	sbc	r19, r25
    3d8a:	24 30       	cpi	r18, 0x04	; 4
    3d8c:	31 05       	cpc	r19, r1
    3d8e:	80 f4       	brcc	.+32     	; 0x3db0 <malloc+0x9c>
    3d90:	8a 81       	ldd	r24, Y+2	; 0x02
    3d92:	9b 81       	ldd	r25, Y+3	; 0x03
    3d94:	61 15       	cp	r22, r1
    3d96:	71 05       	cpc	r23, r1
    3d98:	21 f0       	breq	.+8      	; 0x3da2 <malloc+0x8e>
    3d9a:	fb 01       	movw	r30, r22
    3d9c:	93 83       	std	Z+3, r25	; 0x03
    3d9e:	82 83       	std	Z+2, r24	; 0x02
    3da0:	04 c0       	rjmp	.+8      	; 0x3daa <malloc+0x96>
    3da2:	90 93 06 05 	sts	0x0506, r25	; 0x800506 <__flp+0x1>
    3da6:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <__flp>
    3daa:	fe 01       	movw	r30, r28
    3dac:	32 96       	adiw	r30, 0x02	; 2
    3dae:	44 c0       	rjmp	.+136    	; 0x3e38 <malloc+0x124>
    3db0:	fe 01       	movw	r30, r28
    3db2:	e2 0f       	add	r30, r18
    3db4:	f3 1f       	adc	r31, r19
    3db6:	81 93       	st	Z+, r24
    3db8:	91 93       	st	Z+, r25
    3dba:	22 50       	subi	r18, 0x02	; 2
    3dbc:	31 09       	sbc	r19, r1
    3dbe:	39 83       	std	Y+1, r19	; 0x01
    3dc0:	28 83       	st	Y, r18
    3dc2:	3a c0       	rjmp	.+116    	; 0x3e38 <malloc+0x124>
    3dc4:	20 91 03 05 	lds	r18, 0x0503	; 0x800503 <__brkval>
    3dc8:	30 91 04 05 	lds	r19, 0x0504	; 0x800504 <__brkval+0x1>
    3dcc:	23 2b       	or	r18, r19
    3dce:	41 f4       	brne	.+16     	; 0x3de0 <malloc+0xcc>
    3dd0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3dd4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3dd8:	30 93 04 05 	sts	0x0504, r19	; 0x800504 <__brkval+0x1>
    3ddc:	20 93 03 05 	sts	0x0503, r18	; 0x800503 <__brkval>
    3de0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3de4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3de8:	21 15       	cp	r18, r1
    3dea:	31 05       	cpc	r19, r1
    3dec:	41 f4       	brne	.+16     	; 0x3dfe <malloc+0xea>
    3dee:	2d b7       	in	r18, 0x3d	; 61
    3df0:	3e b7       	in	r19, 0x3e	; 62
    3df2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3df6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3dfa:	24 1b       	sub	r18, r20
    3dfc:	35 0b       	sbc	r19, r21
    3dfe:	e0 91 03 05 	lds	r30, 0x0503	; 0x800503 <__brkval>
    3e02:	f0 91 04 05 	lds	r31, 0x0504	; 0x800504 <__brkval+0x1>
    3e06:	e2 17       	cp	r30, r18
    3e08:	f3 07       	cpc	r31, r19
    3e0a:	a0 f4       	brcc	.+40     	; 0x3e34 <malloc+0x120>
    3e0c:	2e 1b       	sub	r18, r30
    3e0e:	3f 0b       	sbc	r19, r31
    3e10:	28 17       	cp	r18, r24
    3e12:	39 07       	cpc	r19, r25
    3e14:	78 f0       	brcs	.+30     	; 0x3e34 <malloc+0x120>
    3e16:	ac 01       	movw	r20, r24
    3e18:	4e 5f       	subi	r20, 0xFE	; 254
    3e1a:	5f 4f       	sbci	r21, 0xFF	; 255
    3e1c:	24 17       	cp	r18, r20
    3e1e:	35 07       	cpc	r19, r21
    3e20:	48 f0       	brcs	.+18     	; 0x3e34 <malloc+0x120>
    3e22:	4e 0f       	add	r20, r30
    3e24:	5f 1f       	adc	r21, r31
    3e26:	50 93 04 05 	sts	0x0504, r21	; 0x800504 <__brkval+0x1>
    3e2a:	40 93 03 05 	sts	0x0503, r20	; 0x800503 <__brkval>
    3e2e:	81 93       	st	Z+, r24
    3e30:	91 93       	st	Z+, r25
    3e32:	02 c0       	rjmp	.+4      	; 0x3e38 <malloc+0x124>
    3e34:	e0 e0       	ldi	r30, 0x00	; 0
    3e36:	f0 e0       	ldi	r31, 0x00	; 0
    3e38:	cf 01       	movw	r24, r30
    3e3a:	df 91       	pop	r29
    3e3c:	cf 91       	pop	r28
    3e3e:	1f 91       	pop	r17
    3e40:	0f 91       	pop	r16
    3e42:	08 95       	ret

00003e44 <free>:
    3e44:	cf 93       	push	r28
    3e46:	df 93       	push	r29
    3e48:	00 97       	sbiw	r24, 0x00	; 0
    3e4a:	09 f4       	brne	.+2      	; 0x3e4e <free+0xa>
    3e4c:	81 c0       	rjmp	.+258    	; 0x3f50 <free+0x10c>
    3e4e:	fc 01       	movw	r30, r24
    3e50:	32 97       	sbiw	r30, 0x02	; 2
    3e52:	13 82       	std	Z+3, r1	; 0x03
    3e54:	12 82       	std	Z+2, r1	; 0x02
    3e56:	a0 91 05 05 	lds	r26, 0x0505	; 0x800505 <__flp>
    3e5a:	b0 91 06 05 	lds	r27, 0x0506	; 0x800506 <__flp+0x1>
    3e5e:	10 97       	sbiw	r26, 0x00	; 0
    3e60:	81 f4       	brne	.+32     	; 0x3e82 <free+0x3e>
    3e62:	20 81       	ld	r18, Z
    3e64:	31 81       	ldd	r19, Z+1	; 0x01
    3e66:	82 0f       	add	r24, r18
    3e68:	93 1f       	adc	r25, r19
    3e6a:	20 91 03 05 	lds	r18, 0x0503	; 0x800503 <__brkval>
    3e6e:	30 91 04 05 	lds	r19, 0x0504	; 0x800504 <__brkval+0x1>
    3e72:	28 17       	cp	r18, r24
    3e74:	39 07       	cpc	r19, r25
    3e76:	51 f5       	brne	.+84     	; 0x3ecc <free+0x88>
    3e78:	f0 93 04 05 	sts	0x0504, r31	; 0x800504 <__brkval+0x1>
    3e7c:	e0 93 03 05 	sts	0x0503, r30	; 0x800503 <__brkval>
    3e80:	67 c0       	rjmp	.+206    	; 0x3f50 <free+0x10c>
    3e82:	ed 01       	movw	r28, r26
    3e84:	20 e0       	ldi	r18, 0x00	; 0
    3e86:	30 e0       	ldi	r19, 0x00	; 0
    3e88:	ce 17       	cp	r28, r30
    3e8a:	df 07       	cpc	r29, r31
    3e8c:	40 f4       	brcc	.+16     	; 0x3e9e <free+0x5a>
    3e8e:	4a 81       	ldd	r20, Y+2	; 0x02
    3e90:	5b 81       	ldd	r21, Y+3	; 0x03
    3e92:	9e 01       	movw	r18, r28
    3e94:	41 15       	cp	r20, r1
    3e96:	51 05       	cpc	r21, r1
    3e98:	f1 f0       	breq	.+60     	; 0x3ed6 <free+0x92>
    3e9a:	ea 01       	movw	r28, r20
    3e9c:	f5 cf       	rjmp	.-22     	; 0x3e88 <free+0x44>
    3e9e:	d3 83       	std	Z+3, r29	; 0x03
    3ea0:	c2 83       	std	Z+2, r28	; 0x02
    3ea2:	40 81       	ld	r20, Z
    3ea4:	51 81       	ldd	r21, Z+1	; 0x01
    3ea6:	84 0f       	add	r24, r20
    3ea8:	95 1f       	adc	r25, r21
    3eaa:	c8 17       	cp	r28, r24
    3eac:	d9 07       	cpc	r29, r25
    3eae:	59 f4       	brne	.+22     	; 0x3ec6 <free+0x82>
    3eb0:	88 81       	ld	r24, Y
    3eb2:	99 81       	ldd	r25, Y+1	; 0x01
    3eb4:	84 0f       	add	r24, r20
    3eb6:	95 1f       	adc	r25, r21
    3eb8:	02 96       	adiw	r24, 0x02	; 2
    3eba:	91 83       	std	Z+1, r25	; 0x01
    3ebc:	80 83       	st	Z, r24
    3ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec0:	9b 81       	ldd	r25, Y+3	; 0x03
    3ec2:	93 83       	std	Z+3, r25	; 0x03
    3ec4:	82 83       	std	Z+2, r24	; 0x02
    3ec6:	21 15       	cp	r18, r1
    3ec8:	31 05       	cpc	r19, r1
    3eca:	29 f4       	brne	.+10     	; 0x3ed6 <free+0x92>
    3ecc:	f0 93 06 05 	sts	0x0506, r31	; 0x800506 <__flp+0x1>
    3ed0:	e0 93 05 05 	sts	0x0505, r30	; 0x800505 <__flp>
    3ed4:	3d c0       	rjmp	.+122    	; 0x3f50 <free+0x10c>
    3ed6:	e9 01       	movw	r28, r18
    3ed8:	fb 83       	std	Y+3, r31	; 0x03
    3eda:	ea 83       	std	Y+2, r30	; 0x02
    3edc:	49 91       	ld	r20, Y+
    3ede:	59 91       	ld	r21, Y+
    3ee0:	c4 0f       	add	r28, r20
    3ee2:	d5 1f       	adc	r29, r21
    3ee4:	ec 17       	cp	r30, r28
    3ee6:	fd 07       	cpc	r31, r29
    3ee8:	61 f4       	brne	.+24     	; 0x3f02 <free+0xbe>
    3eea:	80 81       	ld	r24, Z
    3eec:	91 81       	ldd	r25, Z+1	; 0x01
    3eee:	84 0f       	add	r24, r20
    3ef0:	95 1f       	adc	r25, r21
    3ef2:	02 96       	adiw	r24, 0x02	; 2
    3ef4:	e9 01       	movw	r28, r18
    3ef6:	99 83       	std	Y+1, r25	; 0x01
    3ef8:	88 83       	st	Y, r24
    3efa:	82 81       	ldd	r24, Z+2	; 0x02
    3efc:	93 81       	ldd	r25, Z+3	; 0x03
    3efe:	9b 83       	std	Y+3, r25	; 0x03
    3f00:	8a 83       	std	Y+2, r24	; 0x02
    3f02:	e0 e0       	ldi	r30, 0x00	; 0
    3f04:	f0 e0       	ldi	r31, 0x00	; 0
    3f06:	12 96       	adiw	r26, 0x02	; 2
    3f08:	8d 91       	ld	r24, X+
    3f0a:	9c 91       	ld	r25, X
    3f0c:	13 97       	sbiw	r26, 0x03	; 3
    3f0e:	00 97       	sbiw	r24, 0x00	; 0
    3f10:	19 f0       	breq	.+6      	; 0x3f18 <free+0xd4>
    3f12:	fd 01       	movw	r30, r26
    3f14:	dc 01       	movw	r26, r24
    3f16:	f7 cf       	rjmp	.-18     	; 0x3f06 <free+0xc2>
    3f18:	8d 91       	ld	r24, X+
    3f1a:	9c 91       	ld	r25, X
    3f1c:	11 97       	sbiw	r26, 0x01	; 1
    3f1e:	9d 01       	movw	r18, r26
    3f20:	2e 5f       	subi	r18, 0xFE	; 254
    3f22:	3f 4f       	sbci	r19, 0xFF	; 255
    3f24:	82 0f       	add	r24, r18
    3f26:	93 1f       	adc	r25, r19
    3f28:	20 91 03 05 	lds	r18, 0x0503	; 0x800503 <__brkval>
    3f2c:	30 91 04 05 	lds	r19, 0x0504	; 0x800504 <__brkval+0x1>
    3f30:	28 17       	cp	r18, r24
    3f32:	39 07       	cpc	r19, r25
    3f34:	69 f4       	brne	.+26     	; 0x3f50 <free+0x10c>
    3f36:	30 97       	sbiw	r30, 0x00	; 0
    3f38:	29 f4       	brne	.+10     	; 0x3f44 <free+0x100>
    3f3a:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <__flp+0x1>
    3f3e:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <__flp>
    3f42:	02 c0       	rjmp	.+4      	; 0x3f48 <free+0x104>
    3f44:	13 82       	std	Z+3, r1	; 0x03
    3f46:	12 82       	std	Z+2, r1	; 0x02
    3f48:	b0 93 04 05 	sts	0x0504, r27	; 0x800504 <__brkval+0x1>
    3f4c:	a0 93 03 05 	sts	0x0503, r26	; 0x800503 <__brkval>
    3f50:	df 91       	pop	r29
    3f52:	cf 91       	pop	r28
    3f54:	08 95       	ret

00003f56 <realloc>:
    3f56:	a0 e0       	ldi	r26, 0x00	; 0
    3f58:	b0 e0       	ldi	r27, 0x00	; 0
    3f5a:	e1 eb       	ldi	r30, 0xB1	; 177
    3f5c:	ff e1       	ldi	r31, 0x1F	; 31
    3f5e:	0c 94 8a 20 	jmp	0x4114	; 0x4114 <__prologue_saves__+0x8>
    3f62:	ec 01       	movw	r28, r24
    3f64:	00 97       	sbiw	r24, 0x00	; 0
    3f66:	21 f4       	brne	.+8      	; 0x3f70 <realloc+0x1a>
    3f68:	cb 01       	movw	r24, r22
    3f6a:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <malloc>
    3f6e:	b4 c0       	rjmp	.+360    	; 0x40d8 <realloc+0x182>
    3f70:	fc 01       	movw	r30, r24
    3f72:	e6 0f       	add	r30, r22
    3f74:	f7 1f       	adc	r31, r23
    3f76:	9c 01       	movw	r18, r24
    3f78:	22 50       	subi	r18, 0x02	; 2
    3f7a:	31 09       	sbc	r19, r1
    3f7c:	e2 17       	cp	r30, r18
    3f7e:	f3 07       	cpc	r31, r19
    3f80:	08 f4       	brcc	.+2      	; 0x3f84 <realloc+0x2e>
    3f82:	a8 c0       	rjmp	.+336    	; 0x40d4 <realloc+0x17e>
    3f84:	d9 01       	movw	r26, r18
    3f86:	0d 91       	ld	r16, X+
    3f88:	1c 91       	ld	r17, X
    3f8a:	11 97       	sbiw	r26, 0x01	; 1
    3f8c:	06 17       	cp	r16, r22
    3f8e:	17 07       	cpc	r17, r23
    3f90:	b0 f0       	brcs	.+44     	; 0x3fbe <realloc+0x68>
    3f92:	05 30       	cpi	r16, 0x05	; 5
    3f94:	11 05       	cpc	r17, r1
    3f96:	08 f4       	brcc	.+2      	; 0x3f9a <realloc+0x44>
    3f98:	9b c0       	rjmp	.+310    	; 0x40d0 <realloc+0x17a>
    3f9a:	c8 01       	movw	r24, r16
    3f9c:	04 97       	sbiw	r24, 0x04	; 4
    3f9e:	86 17       	cp	r24, r22
    3fa0:	97 07       	cpc	r25, r23
    3fa2:	08 f4       	brcc	.+2      	; 0x3fa6 <realloc+0x50>
    3fa4:	95 c0       	rjmp	.+298    	; 0x40d0 <realloc+0x17a>
    3fa6:	02 50       	subi	r16, 0x02	; 2
    3fa8:	11 09       	sbc	r17, r1
    3faa:	06 1b       	sub	r16, r22
    3fac:	17 0b       	sbc	r17, r23
    3fae:	01 93       	st	Z+, r16
    3fb0:	11 93       	st	Z+, r17
    3fb2:	6d 93       	st	X+, r22
    3fb4:	7c 93       	st	X, r23
    3fb6:	cf 01       	movw	r24, r30
    3fb8:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <free>
    3fbc:	89 c0       	rjmp	.+274    	; 0x40d0 <realloc+0x17a>
    3fbe:	5b 01       	movw	r10, r22
    3fc0:	a0 1a       	sub	r10, r16
    3fc2:	b1 0a       	sbc	r11, r17
    3fc4:	4c 01       	movw	r8, r24
    3fc6:	80 0e       	add	r8, r16
    3fc8:	91 1e       	adc	r9, r17
    3fca:	a0 91 05 05 	lds	r26, 0x0505	; 0x800505 <__flp>
    3fce:	b0 91 06 05 	lds	r27, 0x0506	; 0x800506 <__flp+0x1>
    3fd2:	61 2c       	mov	r6, r1
    3fd4:	71 2c       	mov	r7, r1
    3fd6:	e1 2c       	mov	r14, r1
    3fd8:	f1 2c       	mov	r15, r1
    3fda:	10 97       	sbiw	r26, 0x00	; 0
    3fdc:	09 f4       	brne	.+2      	; 0x3fe0 <realloc+0x8a>
    3fde:	46 c0       	rjmp	.+140    	; 0x406c <realloc+0x116>
    3fe0:	8d 91       	ld	r24, X+
    3fe2:	9c 91       	ld	r25, X
    3fe4:	11 97       	sbiw	r26, 0x01	; 1
    3fe6:	a8 15       	cp	r26, r8
    3fe8:	b9 05       	cpc	r27, r9
    3fea:	b1 f5       	brne	.+108    	; 0x4058 <realloc+0x102>
    3fec:	6c 01       	movw	r12, r24
    3fee:	42 e0       	ldi	r20, 0x02	; 2
    3ff0:	c4 0e       	add	r12, r20
    3ff2:	d1 1c       	adc	r13, r1
    3ff4:	ca 14       	cp	r12, r10
    3ff6:	db 04       	cpc	r13, r11
    3ff8:	78 f1       	brcs	.+94     	; 0x4058 <realloc+0x102>
    3ffa:	4c 01       	movw	r8, r24
    3ffc:	8a 18       	sub	r8, r10
    3ffe:	9b 08       	sbc	r9, r11
    4000:	64 01       	movw	r12, r8
    4002:	42 e0       	ldi	r20, 0x02	; 2
    4004:	c4 0e       	add	r12, r20
    4006:	d1 1c       	adc	r13, r1
    4008:	12 96       	adiw	r26, 0x02	; 2
    400a:	bc 90       	ld	r11, X
    400c:	12 97       	sbiw	r26, 0x02	; 2
    400e:	13 96       	adiw	r26, 0x03	; 3
    4010:	ac 91       	ld	r26, X
    4012:	b5 e0       	ldi	r27, 0x05	; 5
    4014:	cb 16       	cp	r12, r27
    4016:	d1 04       	cpc	r13, r1
    4018:	40 f0       	brcs	.+16     	; 0x402a <realloc+0xd4>
    401a:	b2 82       	std	Z+2, r11	; 0x02
    401c:	a3 83       	std	Z+3, r26	; 0x03
    401e:	91 82       	std	Z+1, r9	; 0x01
    4020:	80 82       	st	Z, r8
    4022:	d9 01       	movw	r26, r18
    4024:	6d 93       	st	X+, r22
    4026:	7c 93       	st	X, r23
    4028:	09 c0       	rjmp	.+18     	; 0x403c <realloc+0xe6>
    402a:	0e 5f       	subi	r16, 0xFE	; 254
    402c:	1f 4f       	sbci	r17, 0xFF	; 255
    402e:	80 0f       	add	r24, r16
    4030:	91 1f       	adc	r25, r17
    4032:	f9 01       	movw	r30, r18
    4034:	91 83       	std	Z+1, r25	; 0x01
    4036:	80 83       	st	Z, r24
    4038:	eb 2d       	mov	r30, r11
    403a:	fa 2f       	mov	r31, r26
    403c:	e1 14       	cp	r14, r1
    403e:	f1 04       	cpc	r15, r1
    4040:	31 f0       	breq	.+12     	; 0x404e <realloc+0xf8>
    4042:	d7 01       	movw	r26, r14
    4044:	13 96       	adiw	r26, 0x03	; 3
    4046:	fc 93       	st	X, r31
    4048:	ee 93       	st	-X, r30
    404a:	12 97       	sbiw	r26, 0x02	; 2
    404c:	41 c0       	rjmp	.+130    	; 0x40d0 <realloc+0x17a>
    404e:	f0 93 06 05 	sts	0x0506, r31	; 0x800506 <__flp+0x1>
    4052:	e0 93 05 05 	sts	0x0505, r30	; 0x800505 <__flp>
    4056:	3c c0       	rjmp	.+120    	; 0x40d0 <realloc+0x17a>
    4058:	68 16       	cp	r6, r24
    405a:	79 06       	cpc	r7, r25
    405c:	08 f4       	brcc	.+2      	; 0x4060 <realloc+0x10a>
    405e:	3c 01       	movw	r6, r24
    4060:	7d 01       	movw	r14, r26
    4062:	12 96       	adiw	r26, 0x02	; 2
    4064:	0d 90       	ld	r0, X+
    4066:	bc 91       	ld	r27, X
    4068:	a0 2d       	mov	r26, r0
    406a:	b7 cf       	rjmp	.-146    	; 0x3fda <realloc+0x84>
    406c:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <__brkval>
    4070:	90 91 04 05 	lds	r25, 0x0504	; 0x800504 <__brkval+0x1>
    4074:	88 16       	cp	r8, r24
    4076:	99 06       	cpc	r9, r25
    4078:	e1 f4       	brne	.+56     	; 0x40b2 <realloc+0x15c>
    407a:	66 16       	cp	r6, r22
    407c:	77 06       	cpc	r7, r23
    407e:	c8 f4       	brcc	.+50     	; 0x40b2 <realloc+0x15c>
    4080:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    4084:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    4088:	00 97       	sbiw	r24, 0x00	; 0
    408a:	41 f4       	brne	.+16     	; 0x409c <realloc+0x146>
    408c:	8d b7       	in	r24, 0x3d	; 61
    408e:	9e b7       	in	r25, 0x3e	; 62
    4090:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4094:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4098:	84 1b       	sub	r24, r20
    409a:	95 0b       	sbc	r25, r21
    409c:	e8 17       	cp	r30, r24
    409e:	f9 07       	cpc	r31, r25
    40a0:	c8 f4       	brcc	.+50     	; 0x40d4 <realloc+0x17e>
    40a2:	f0 93 04 05 	sts	0x0504, r31	; 0x800504 <__brkval+0x1>
    40a6:	e0 93 03 05 	sts	0x0503, r30	; 0x800503 <__brkval>
    40aa:	f9 01       	movw	r30, r18
    40ac:	71 83       	std	Z+1, r23	; 0x01
    40ae:	60 83       	st	Z, r22
    40b0:	0f c0       	rjmp	.+30     	; 0x40d0 <realloc+0x17a>
    40b2:	cb 01       	movw	r24, r22
    40b4:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <malloc>
    40b8:	7c 01       	movw	r14, r24
    40ba:	00 97       	sbiw	r24, 0x00	; 0
    40bc:	59 f0       	breq	.+22     	; 0x40d4 <realloc+0x17e>
    40be:	a8 01       	movw	r20, r16
    40c0:	be 01       	movw	r22, r28
    40c2:	0e 94 76 20 	call	0x40ec	; 0x40ec <memcpy>
    40c6:	ce 01       	movw	r24, r28
    40c8:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <free>
    40cc:	c7 01       	movw	r24, r14
    40ce:	04 c0       	rjmp	.+8      	; 0x40d8 <realloc+0x182>
    40d0:	ce 01       	movw	r24, r28
    40d2:	02 c0       	rjmp	.+4      	; 0x40d8 <realloc+0x182>
    40d4:	80 e0       	ldi	r24, 0x00	; 0
    40d6:	90 e0       	ldi	r25, 0x00	; 0
    40d8:	cd b7       	in	r28, 0x3d	; 61
    40da:	de b7       	in	r29, 0x3e	; 62
    40dc:	ee e0       	ldi	r30, 0x0E	; 14
    40de:	0c 94 a6 20 	jmp	0x414c	; 0x414c <__epilogue_restores__+0x8>

000040e2 <abort>:
    40e2:	81 e0       	ldi	r24, 0x01	; 1
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	f8 94       	cli
    40e8:	0c 94 bd 20 	jmp	0x417a	; 0x417a <__do_global_dtors>

000040ec <memcpy>:
    40ec:	fb 01       	movw	r30, r22
    40ee:	dc 01       	movw	r26, r24
    40f0:	02 c0       	rjmp	.+4      	; 0x40f6 <memcpy+0xa>
    40f2:	01 90       	ld	r0, Z+
    40f4:	0d 92       	st	X+, r0
    40f6:	41 50       	subi	r20, 0x01	; 1
    40f8:	50 40       	sbci	r21, 0x00	; 0
    40fa:	d8 f7       	brcc	.-10     	; 0x40f2 <memcpy+0x6>
    40fc:	08 95       	ret

000040fe <strcpy>:
    40fe:	fb 01       	movw	r30, r22
    4100:	dc 01       	movw	r26, r24
    4102:	01 90       	ld	r0, Z+
    4104:	0d 92       	st	X+, r0
    4106:	00 20       	and	r0, r0
    4108:	e1 f7       	brne	.-8      	; 0x4102 <strcpy+0x4>
    410a:	08 95       	ret

0000410c <__prologue_saves__>:
    410c:	2f 92       	push	r2
    410e:	3f 92       	push	r3
    4110:	4f 92       	push	r4
    4112:	5f 92       	push	r5
    4114:	6f 92       	push	r6
    4116:	7f 92       	push	r7
    4118:	8f 92       	push	r8
    411a:	9f 92       	push	r9
    411c:	af 92       	push	r10
    411e:	bf 92       	push	r11
    4120:	cf 92       	push	r12
    4122:	df 92       	push	r13
    4124:	ef 92       	push	r14
    4126:	ff 92       	push	r15
    4128:	0f 93       	push	r16
    412a:	1f 93       	push	r17
    412c:	cf 93       	push	r28
    412e:	df 93       	push	r29
    4130:	cd b7       	in	r28, 0x3d	; 61
    4132:	de b7       	in	r29, 0x3e	; 62
    4134:	ca 1b       	sub	r28, r26
    4136:	db 0b       	sbc	r29, r27
    4138:	0f b6       	in	r0, 0x3f	; 63
    413a:	f8 94       	cli
    413c:	de bf       	out	0x3e, r29	; 62
    413e:	0f be       	out	0x3f, r0	; 63
    4140:	cd bf       	out	0x3d, r28	; 61
    4142:	09 94       	ijmp

00004144 <__epilogue_restores__>:
    4144:	2a 88       	ldd	r2, Y+18	; 0x12
    4146:	39 88       	ldd	r3, Y+17	; 0x11
    4148:	48 88       	ldd	r4, Y+16	; 0x10
    414a:	5f 84       	ldd	r5, Y+15	; 0x0f
    414c:	6e 84       	ldd	r6, Y+14	; 0x0e
    414e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4150:	8c 84       	ldd	r8, Y+12	; 0x0c
    4152:	9b 84       	ldd	r9, Y+11	; 0x0b
    4154:	aa 84       	ldd	r10, Y+10	; 0x0a
    4156:	b9 84       	ldd	r11, Y+9	; 0x09
    4158:	c8 84       	ldd	r12, Y+8	; 0x08
    415a:	df 80       	ldd	r13, Y+7	; 0x07
    415c:	ee 80       	ldd	r14, Y+6	; 0x06
    415e:	fd 80       	ldd	r15, Y+5	; 0x05
    4160:	0c 81       	ldd	r16, Y+4	; 0x04
    4162:	1b 81       	ldd	r17, Y+3	; 0x03
    4164:	aa 81       	ldd	r26, Y+2	; 0x02
    4166:	b9 81       	ldd	r27, Y+1	; 0x01
    4168:	ce 0f       	add	r28, r30
    416a:	d1 1d       	adc	r29, r1
    416c:	0f b6       	in	r0, 0x3f	; 63
    416e:	f8 94       	cli
    4170:	de bf       	out	0x3e, r29	; 62
    4172:	0f be       	out	0x3f, r0	; 63
    4174:	cd bf       	out	0x3d, r28	; 61
    4176:	ed 01       	movw	r28, r26
    4178:	08 95       	ret

0000417a <__do_global_dtors>:
    417a:	10 e0       	ldi	r17, 0x00	; 0
    417c:	cc ee       	ldi	r28, 0xEC	; 236
    417e:	d0 e0       	ldi	r29, 0x00	; 0
    4180:	04 c0       	rjmp	.+8      	; 0x418a <__do_global_dtors+0x10>
    4182:	fe 01       	movw	r30, r28
    4184:	0e 94 70 1e 	call	0x3ce0	; 0x3ce0 <__tablejump2__>
    4188:	21 96       	adiw	r28, 0x01	; 1
    418a:	cd 3e       	cpi	r28, 0xED	; 237
    418c:	d1 07       	cpc	r29, r17
    418e:	c9 f7       	brne	.-14     	; 0x4182 <__do_global_dtors+0x8>
    4190:	f8 94       	cli

00004192 <__stop_program>:
    4192:	ff cf       	rjmp	.-2      	; 0x4192 <__stop_program>
