
Projektarbeit_COC_BRA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000220  00800100  00005914  000059a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005914  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003b6  00800320  00800320  00005bc8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005bc8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005bf8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000d30  00000000  00000000  00005c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001ded1  00000000  00000000  00006968  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004dc5  00000000  00000000  00024839  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007629  00000000  00000000  000295fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002c4c  00000000  00000000  00030c28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000576f  00000000  00000000  00033874  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000eb1f  00000000  00000000  00038fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e10  00000000  00000000  00047b02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__dtors_end>
       4:	0c 94 ee 24 	jmp	0x49dc	; 0x49dc <__vector_1>
       8:	0c 94 15 25 	jmp	0x4a2a	; 0x4a2a <__vector_2>
       c:	0c 94 3c 25 	jmp	0x4a78	; 0x4a78 <__vector_3>
      10:	0c 94 63 25 	jmp	0x4ac6	; 0x4ac6 <__vector_4>
      14:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      18:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      1c:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__vector_7>
      20:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      24:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      28:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__vector_10>
      2c:	0c 94 a5 22 	jmp	0x454a	; 0x454a <__vector_11>
      30:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      34:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      38:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      3c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      40:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      44:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      48:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      4c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      50:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      54:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      58:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      5c:	0c 94 b1 25 	jmp	0x4b62	; 0x4b62 <__vector_23>
      60:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      64:	0c 94 e3 1d 	jmp	0x3bc6	; 0x3bc6 <__vector_25>
      68:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__vector_26>
      6c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      70:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      74:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      78:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      7c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      80:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      84:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      88:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      8c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      90:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <__vector_36>
      94:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      98:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      9c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      a0:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      a4:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      a8:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      ac:	21 27       	eor	r18, r17
      ae:	26 27       	eor	r18, r22
      b0:	2b 27       	eor	r18, r27
      b2:	35 27       	eor	r19, r21
      b4:	3f 27       	eor	r19, r31
      b6:	89 27       	eor	r24, r25
      b8:	89 27       	eor	r24, r25
      ba:	89 27       	eor	r24, r25
      bc:	49 27       	eor	r20, r25
      be:	53 27       	eor	r21, r19
      c0:	5d 27       	eor	r21, r29
      c2:	67 27       	eor	r22, r23
      c4:	74 27       	eor	r23, r20
      c6:	89 27       	eor	r24, r25
      c8:	7c 27       	eor	r23, r28
      ca:	aa 27       	eor	r26, r26
      cc:	ad 27       	eor	r26, r29
      ce:	9c 27       	eor	r25, r28
      d0:	a0 27       	eor	r26, r16
      d2:	a6 27       	eor	r26, r22
      d4:	ce 27       	eor	r28, r30
      d6:	ce 27       	eor	r28, r30
      d8:	ce 27       	eor	r28, r30
      da:	b1 27       	eor	r27, r17
      dc:	b5 27       	eor	r27, r21
      de:	b9 27       	eor	r27, r25
      e0:	bf 27       	eor	r27, r31
      e2:	c3 27       	eor	r28, r19
      e4:	ce 27       	eor	r28, r30
      e6:	c9 27       	eor	r28, r25

000000e8 <__trampolines_end>:
      e8:	08 0b       	sbc	r16, r24
      ea:	00 02       	muls	r16, r16
      ec:	02 02       	muls	r16, r18
      ee:	01 00       	.word	0x0001	; ????
      f0:	09 04       	cpc	r0, r9
      f2:	00 00       	nop
      f4:	01 02       	muls	r16, r17
      f6:	02 00       	.word	0x0002	; ????
      f8:	00 05       	cpc	r16, r0
      fa:	24 00       	.word	0x0024	; ????
      fc:	10 01       	movw	r2, r0
      fe:	05 24       	eor	r0, r5
     100:	01 01       	movw	r0, r2
     102:	01 04       	cpc	r0, r1
     104:	24 02       	muls	r18, r20
     106:	06 05       	cpc	r16, r6
     108:	24 06       	cpc	r2, r20
     10a:	00 01       	movw	r0, r0
     10c:	07 05       	cpc	r16, r7
     10e:	81 03       	fmuls	r16, r17
     110:	10 00       	.word	0x0010	; ????
     112:	40 09       	sbc	r20, r0
     114:	04 01       	movw	r0, r8
     116:	00 02       	muls	r16, r16
     118:	0a 00       	.word	0x000a	; ????
     11a:	00 00       	nop
     11c:	07 05       	cpc	r16, r7
     11e:	02 02       	muls	r16, r18
     120:	40 00       	.word	0x0040	; ????
     122:	00 07       	cpc	r16, r16
     124:	05 83       	std	Z+5, r16	; 0x05
     126:	02 40       	sbci	r16, 0x02	; 2
	...

0000012a <USB_DeviceDescriptorIAD>:
     12a:	12 01 00 02 ef 02 01 40 41 23 36 80 00 01 01 02     .......@A#6.....
     13a:	03 01                                               ..

0000013c <STRING_MANUFACTURER>:
     13c:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

00000148 <STRING_PRODUCT>:
     148:	41 72 64 75 69 6e 6f 20 4c 65 6f 6e 61 72 64 6f     Arduino Leonardo
	...

00000159 <STRING_LANGUAGE>:
     159:	04 03 09 04                                         ....

0000015d <analog_pin_to_channel_PGM>:
     15d:	07 06 05 04 01 00 08 0a 0b 0c 0d 09                 ............

00000169 <digital_pin_to_timer_PGM>:
     169:	00 00 00 02 00 09 0f 00 00 03 04 01 00 0c 00 00     ................
	...

00000188 <digital_pin_to_bit_mask_PGM>:
     188:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     198:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

000001a7 <digital_pin_to_port_PGM>:
     1a7:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     1b7:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

000001c6 <port_to_input_PGM>:
     1c6:	00 00 00 00 23 00 26 00 29 00 2c 00 2f 00           ....#.&.).,./.

000001d4 <port_to_output_PGM>:
     1d4:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

000001e2 <port_to_mode_PGM>:
     1e2:	00 00 00 00 24 00 27 00 2a 00 2d 00 30 00           ....$.'.*.-.0.

000001f0 <__ctors_start>:
     1f0:	dc 06       	cpc	r13, r28
     1f2:	40 19       	sub	r20, r0
     1f4:	8f 1c       	adc	r8, r15
     1f6:	45 1e       	adc	r4, r21

000001f8 <__ctors_end>:
     1f8:	55 08       	sbc	r5, r5

000001fa <__dtors_end>:
     1fa:	11 24       	eor	r1, r1
     1fc:	1f be       	out	0x3f, r1	; 63
     1fe:	cf ef       	ldi	r28, 0xFF	; 255
     200:	da e0       	ldi	r29, 0x0A	; 10
     202:	de bf       	out	0x3e, r29	; 62
     204:	cd bf       	out	0x3d, r28	; 61

00000206 <__do_copy_data>:
     206:	13 e0       	ldi	r17, 0x03	; 3
     208:	a0 e0       	ldi	r26, 0x00	; 0
     20a:	b1 e0       	ldi	r27, 0x01	; 1
     20c:	e4 e1       	ldi	r30, 0x14	; 20
     20e:	f9 e5       	ldi	r31, 0x59	; 89
     210:	02 c0       	rjmp	.+4      	; 0x216 <__do_copy_data+0x10>
     212:	05 90       	lpm	r0, Z+
     214:	0d 92       	st	X+, r0
     216:	a0 32       	cpi	r26, 0x20	; 32
     218:	b1 07       	cpc	r27, r17
     21a:	d9 f7       	brne	.-10     	; 0x212 <__do_copy_data+0xc>

0000021c <__do_clear_bss>:
     21c:	26 e0       	ldi	r18, 0x06	; 6
     21e:	a0 e2       	ldi	r26, 0x20	; 32
     220:	b3 e0       	ldi	r27, 0x03	; 3
     222:	01 c0       	rjmp	.+2      	; 0x226 <.do_clear_bss_start>

00000224 <.do_clear_bss_loop>:
     224:	1d 92       	st	X+, r1

00000226 <.do_clear_bss_start>:
     226:	a6 3d       	cpi	r26, 0xD6	; 214
     228:	b2 07       	cpc	r27, r18
     22a:	e1 f7       	brne	.-8      	; 0x224 <.do_clear_bss_loop>

0000022c <__do_global_ctors>:
     22c:	10 e0       	ldi	r17, 0x00	; 0
     22e:	cc ef       	ldi	r28, 0xFC	; 252
     230:	d0 e0       	ldi	r29, 0x00	; 0
     232:	04 c0       	rjmp	.+8      	; 0x23c <__do_global_ctors+0x10>
     234:	21 97       	sbiw	r28, 0x01	; 1
     236:	fe 01       	movw	r30, r28
     238:	0e 94 da 29 	call	0x53b4	; 0x53b4 <__tablejump2__>
     23c:	c8 3f       	cpi	r28, 0xF8	; 248
     23e:	d1 07       	cpc	r29, r17
     240:	c9 f7       	brne	.-14     	; 0x234 <__do_global_ctors+0x8>
     242:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <main>
     246:	0c 94 7d 2c 	jmp	0x58fa	; 0x58fa <__do_global_dtors>

0000024a <__bad_interrupt>:
     24a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024e <_Z6getkeyv>:
 */
int getkey(void)
{
	static int keys[NUMKEYS+1];
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	0e 94 c9 26 	call	0x4d92	; 0x4d92 <analogRead>

	if (val > 1020) { // no key pressed
     254:	8d 3f       	cpi	r24, 0xFD	; 253
     256:	23 e0       	ldi	r18, 0x03	; 3
     258:	92 07       	cpc	r25, r18
     25a:	20 f1       	brcs	.+72     	; 0x2a4 <_Z6getkeyv+0x56>
		if (++keys[0] > NOPRESS) {
     25c:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <__data_end>
     260:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <__data_end+0x1>
     264:	01 96       	adiw	r24, 0x01	; 1
     266:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <__data_end+0x1>
     26a:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <__data_end>
     26e:	03 97       	sbiw	r24, 0x03	; 3
     270:	0c f4       	brge	.+2      	; 0x274 <_Z6getkeyv+0x26>
     272:	6a c0       	rjmp	.+212    	; 0x348 <_Z6getkeyv+0xfa>
     274:	e0 e2       	ldi	r30, 0x20	; 32
     276:	f3 e0       	ldi	r31, 0x03	; 3
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	90 e0       	ldi	r25, 0x00	; 0
			for(uint8_t i = 0; i <= NUMKEYS; i++){
				if(keys[i] > KEYPRESS){
     280:	40 81       	ld	r20, Z
     282:	51 81       	ldd	r21, Z+1	; 0x01
     284:	44 30       	cpi	r20, 0x04	; 4
     286:	51 05       	cpc	r21, r1
     288:	2c f0       	brlt	.+10     	; 0x294 <_Z6getkeyv+0x46>
     28a:	c9 01       	movw	r24, r18
					data = i;
					if(keys[i] > LONGPRESS) data += 5;
     28c:	49 3c       	cpi	r20, 0xC9	; 201
     28e:	51 05       	cpc	r21, r1
     290:	0c f0       	brlt	.+2      	; 0x294 <_Z6getkeyv+0x46>
     292:	05 96       	adiw	r24, 0x05	; 5
				}
				keys[i] = 0;
     294:	11 92       	st	Z+, r1
     296:	11 92       	st	Z+, r1
     298:	2f 5f       	subi	r18, 0xFF	; 255
     29a:	3f 4f       	sbci	r19, 0xFF	; 255
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);

	if (val > 1020) { // no key pressed
		if (++keys[0] > NOPRESS) {
			for(uint8_t i = 0; i <= NUMKEYS; i++){
     29c:	26 30       	cpi	r18, 0x06	; 6
     29e:	31 05       	cpc	r19, r1
     2a0:	79 f7       	brne	.-34     	; 0x280 <_Z6getkeyv+0x32>
     2a2:	08 95       	ret
			}
		}
		else data = 0;
	}
	else {
		if (val < S1_LIMIT && keys[1] < 32000) ++keys[1]; // key1 pressed
     2a4:	89 34       	cpi	r24, 0x49	; 73
     2a6:	91 05       	cpc	r25, r1
     2a8:	70 f4       	brcc	.+28     	; 0x2c6 <_Z6getkeyv+0x78>
     2aa:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <__data_end+0x2>
     2ae:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <__data_end+0x3>
     2b2:	81 15       	cp	r24, r1
     2b4:	2d e7       	ldi	r18, 0x7D	; 125
     2b6:	92 07       	cpc	r25, r18
     2b8:	4c f4       	brge	.+18     	; 0x2cc <_Z6getkeyv+0x7e>
     2ba:	01 96       	adiw	r24, 0x01	; 1
     2bc:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <__data_end+0x3>
     2c0:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <__data_end+0x2>
     2c4:	41 c0       	rjmp	.+130    	; 0x348 <_Z6getkeyv+0xfa>
		else if (val < S2_LIMIT && keys[2] < 32000) ++keys[2]; //key2 pressed
     2c6:	8e 3e       	cpi	r24, 0xEE	; 238
     2c8:	91 05       	cpc	r25, r1
     2ca:	70 f4       	brcc	.+28     	; 0x2e8 <_Z6getkeyv+0x9a>
     2cc:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <__data_end+0x4>
     2d0:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <__data_end+0x5>
     2d4:	81 15       	cp	r24, r1
     2d6:	2d e7       	ldi	r18, 0x7D	; 125
     2d8:	92 07       	cpc	r25, r18
     2da:	54 f4       	brge	.+20     	; 0x2f0 <_Z6getkeyv+0xa2>
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <__data_end+0x5>
     2e2:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <__data_end+0x4>
     2e6:	30 c0       	rjmp	.+96     	; 0x348 <_Z6getkeyv+0xfa>
		else if (val < S3_LIMIT && keys[3] < 32000) ++keys[3]; //key3 pressed
     2e8:	82 3a       	cpi	r24, 0xA2	; 162
     2ea:	21 e0       	ldi	r18, 0x01	; 1
     2ec:	92 07       	cpc	r25, r18
     2ee:	70 f4       	brcc	.+28     	; 0x30c <_Z6getkeyv+0xbe>
     2f0:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <__data_end+0x6>
     2f4:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <__data_end+0x7>
     2f8:	81 15       	cp	r24, r1
     2fa:	2d e7       	ldi	r18, 0x7D	; 125
     2fc:	92 07       	cpc	r25, r18
     2fe:	4c f4       	brge	.+18     	; 0x312 <_Z6getkeyv+0xc4>
     300:	01 96       	adiw	r24, 0x01	; 1
     302:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <__data_end+0x7>
     306:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <__data_end+0x6>
     30a:	1e c0       	rjmp	.+60     	; 0x348 <_Z6getkeyv+0xfa>
		else if (val < S4_LIMIT && keys[4] < 32000) ++keys[4]; //key4 pressed
     30c:	80 37       	cpi	r24, 0x70	; 112
     30e:	92 40       	sbci	r25, 0x02	; 2
     310:	70 f4       	brcc	.+28     	; 0x32e <_Z6getkeyv+0xe0>
     312:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <__data_end+0x8>
     316:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <__data_end+0x9>
     31a:	81 15       	cp	r24, r1
     31c:	2d e7       	ldi	r18, 0x7D	; 125
     31e:	92 07       	cpc	r25, r18
     320:	34 f4       	brge	.+12     	; 0x32e <_Z6getkeyv+0xe0>
     322:	01 96       	adiw	r24, 0x01	; 1
     324:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <__data_end+0x9>
     328:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <__data_end+0x8>
     32c:	0d c0       	rjmp	.+26     	; 0x348 <_Z6getkeyv+0xfa>
		else if ( keys[5] < 32000) ++keys[5]; // key5 pressed
     32e:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <__data_end+0xa>
     332:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <__data_end+0xb>
     336:	81 15       	cp	r24, r1
     338:	2d e7       	ldi	r18, 0x7D	; 125
     33a:	92 07       	cpc	r25, r18
     33c:	2c f4       	brge	.+10     	; 0x348 <_Z6getkeyv+0xfa>
     33e:	01 96       	adiw	r24, 0x01	; 1
     340:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <__data_end+0xb>
     344:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <__data_end+0xa>
		data = 0;
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
	}
	return data;
}
     34c:	08 95       	ret

0000034e <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	08 95       	ret

00000354 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     354:	08 95       	ret

00000356 <_ZN7hd4478013iosetContrastEh>:
		return 31;
	}
}
int Datum::GetYear(){return YYYY_;};
int Datum::GetMonth(){return MM_;};
int Datum::GetDay(){return DD_;};
     356:	8d ef       	ldi	r24, 0xFD	; 253
     358:	9f ef       	ldi	r25, 0xFF	; 255
     35a:	08 95       	ret

0000035c <_Z14chooseTimeZonev>:
     35c:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <timeZoneChoosen>
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	89 27       	eor	r24, r25
     364:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <timeZoneChoosen>
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	08 95       	ret

0000036e <_Z10changeAMPMv>:
     36e:	90 91 0e 04 	lds	r25, 0x040E	; 0x80040e <ampm>
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	89 27       	eor	r24, r25
     376:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <ampm>
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	08 95       	ret

00000380 <_Z8setAlarmv>:
     380:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <weckerStatus>
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	89 27       	eor	r24, r25
     388:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <weckerStatus>
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	08 95       	ret

00000392 <_Z10wheelSpeedv>:
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	40 e8       	ldi	r20, 0x80	; 128
     398:	5f e3       	ldi	r21, 0x3F	; 63
     39a:	60 91 0a 04 	lds	r22, 0x040A	; 0x80040a <duration>
     39e:	70 91 0b 04 	lds	r23, 0x040B	; 0x80040b <duration+0x1>
     3a2:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <duration+0x2>
     3a6:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <duration+0x3>
     3aa:	0e 94 45 19 	call	0x328a	; 0x328a <__addsf3>
     3ae:	60 93 0a 04 	sts	0x040A, r22	; 0x80040a <duration>
     3b2:	70 93 0b 04 	sts	0x040B, r23	; 0x80040b <duration+0x1>
     3b6:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <duration+0x2>
     3ba:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <duration+0x3>
     3be:	08 95       	ret

000003c0 <_Z9gpsScreeni>:
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	ec 01       	movw	r28, r24
     3c6:	40 e0       	ldi	r20, 0x00	; 0
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	84 ed       	ldi	r24, 0xD4	; 212
     3cc:	94 e0       	ldi	r25, 0x04	; 4
     3ce:	0e 94 8d 14 	call	0x291a	; 0x291a <_ZN7hd447809setCursorEhh>
     3d2:	66 e3       	ldi	r22, 0x36	; 54
     3d4:	71 e0       	ldi	r23, 0x01	; 1
     3d6:	84 ed       	ldi	r24, 0xD4	; 212
     3d8:	94 e0       	ldi	r25, 0x04	; 4
     3da:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_ZN5Print5printEPKc>
     3de:	ce 01       	movw	r24, r28
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	08 95       	ret

000003e6 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>:
     3e6:	0f 93       	push	r16
     3e8:	1f 93       	push	r17
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	18 2f       	mov	r17, r24
     3f0:	d0 e0       	ldi	r29, 0x00	; 0
     3f2:	c0 e2       	ldi	r28, 0x20	; 32
     3f4:	6c 2f       	mov	r22, r28
     3f6:	8f e6       	ldi	r24, 0x6F	; 111
     3f8:	95 e0       	ldi	r25, 0x05	; 5
     3fa:	0e 94 b9 18 	call	0x3172	; 0x3172 <_ZN7TwoWire17beginTransmissionEh>
     3fe:	8f e6       	ldi	r24, 0x6F	; 111
     400:	95 e0       	ldi	r25, 0x05	; 5
     402:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN7TwoWire15endTransmissionEv>
     406:	08 2f       	mov	r16, r24
     408:	61 e0       	ldi	r22, 0x01	; 1
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <delay>
     414:	01 11       	cpse	r16, r1
     416:	03 c0       	rjmp	.+6      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     418:	1d 17       	cp	r17, r29
     41a:	f9 f0       	breq	.+62     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     41c:	df 5f       	subi	r29, 0xFF	; 255
     41e:	cf 5f       	subi	r28, 0xFF	; 255
     420:	c8 32       	cpi	r28, 0x28	; 40
     422:	41 f7       	brne	.-48     	; 0x3f4 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0xe>
     424:	c8 e3       	ldi	r28, 0x38	; 56
     426:	6c 2f       	mov	r22, r28
     428:	8f e6       	ldi	r24, 0x6F	; 111
     42a:	95 e0       	ldi	r25, 0x05	; 5
     42c:	0e 94 b9 18 	call	0x3172	; 0x3172 <_ZN7TwoWire17beginTransmissionEh>
     430:	8f e6       	ldi	r24, 0x6F	; 111
     432:	95 e0       	ldi	r25, 0x05	; 5
     434:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN7TwoWire15endTransmissionEv>
     438:	08 2f       	mov	r16, r24
     43a:	61 e0       	ldi	r22, 0x01	; 1
     43c:	70 e0       	ldi	r23, 0x00	; 0
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <delay>
     446:	01 11       	cpse	r16, r1
     448:	03 c0       	rjmp	.+6      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44a:	1d 17       	cp	r17, r29
     44c:	31 f0       	breq	.+12     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     44e:	df 5f       	subi	r29, 0xFF	; 255
     450:	cf 5f       	subi	r28, 0xFF	; 255
     452:	c0 34       	cpi	r28, 0x40	; 64
     454:	41 f7       	brne	.-48     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	01 c0       	rjmp	.+2      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     45a:	8c 2f       	mov	r24, r28
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	08 95       	ret

00000466 <_ZN7TwoWire5writeEi>:
     466:	dc 01       	movw	r26, r24
     468:	ed 91       	ld	r30, X+
     46a:	fc 91       	ld	r31, X
     46c:	01 90       	ld	r0, Z+
     46e:	f0 81       	ld	r31, Z
     470:	e0 2d       	mov	r30, r0
     472:	09 94       	ijmp

00000474 <_ZN4Zeit4TickEv>:
     474:	fc 01       	movw	r30, r24
     476:	84 81       	ldd	r24, Z+4	; 0x04
     478:	95 81       	ldd	r25, Z+5	; 0x05
     47a:	01 96       	adiw	r24, 0x01	; 1
     47c:	2c e3       	ldi	r18, 0x3C	; 60
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	b9 01       	movw	r22, r18
     482:	0e 94 85 29 	call	0x530a	; 0x530a <__divmodhi4>
     486:	95 83       	std	Z+5, r25	; 0x05
     488:	84 83       	std	Z+4, r24	; 0x04
     48a:	89 2b       	or	r24, r25
     48c:	19 f0       	breq	.+6      	; 0x494 <_ZN4Zeit4TickEv+0x20>
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	08 95       	ret
     494:	82 81       	ldd	r24, Z+2	; 0x02
     496:	93 81       	ldd	r25, Z+3	; 0x03
     498:	01 96       	adiw	r24, 0x01	; 1
     49a:	b9 01       	movw	r22, r18
     49c:	0e 94 85 29 	call	0x530a	; 0x530a <__divmodhi4>
     4a0:	93 83       	std	Z+3, r25	; 0x03
     4a2:	82 83       	std	Z+2, r24	; 0x02
     4a4:	89 2b       	or	r24, r25
     4a6:	99 f7       	brne	.-26     	; 0x48e <_ZN4Zeit4TickEv+0x1a>
     4a8:	80 81       	ld	r24, Z
     4aa:	91 81       	ldd	r25, Z+1	; 0x01
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	68 e1       	ldi	r22, 0x18	; 24
     4b0:	70 e0       	ldi	r23, 0x00	; 0
     4b2:	0e 94 85 29 	call	0x530a	; 0x530a <__divmodhi4>
     4b6:	ac 01       	movw	r20, r24
     4b8:	91 83       	std	Z+1, r25	; 0x01
     4ba:	80 83       	st	Z, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	45 2b       	or	r20, r21
     4c2:	09 f0       	breq	.+2      	; 0x4c6 <_ZN4Zeit4TickEv+0x52>
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	82 2f       	mov	r24, r18
     4c8:	08 95       	ret

000004ca <_ZN5Datum11DaysOfMonthEv>:
     4ca:	fc 01       	movw	r30, r24
     4cc:	22 81       	ldd	r18, Z+2	; 0x02
     4ce:	33 81       	ldd	r19, Z+3	; 0x03
     4d0:	26 30       	cpi	r18, 0x06	; 6
     4d2:	31 05       	cpc	r19, r1
     4d4:	d9 f0       	breq	.+54     	; 0x50c <_ZN5Datum11DaysOfMonthEv+0x42>
     4d6:	3c f4       	brge	.+14     	; 0x4e6 <_ZN5Datum11DaysOfMonthEv+0x1c>
     4d8:	22 30       	cpi	r18, 0x02	; 2
     4da:	31 05       	cpc	r19, r1
     4dc:	69 f0       	breq	.+26     	; 0x4f8 <_ZN5Datum11DaysOfMonthEv+0x2e>
     4de:	24 30       	cpi	r18, 0x04	; 4
     4e0:	31 05       	cpc	r19, r1
     4e2:	39 f4       	brne	.+14     	; 0x4f2 <_ZN5Datum11DaysOfMonthEv+0x28>
     4e4:	13 c0       	rjmp	.+38     	; 0x50c <_ZN5Datum11DaysOfMonthEv+0x42>
     4e6:	29 30       	cpi	r18, 0x09	; 9
     4e8:	31 05       	cpc	r19, r1
     4ea:	81 f0       	breq	.+32     	; 0x50c <_ZN5Datum11DaysOfMonthEv+0x42>
     4ec:	2b 30       	cpi	r18, 0x0B	; 11
     4ee:	31 05       	cpc	r19, r1
     4f0:	69 f0       	breq	.+26     	; 0x50c <_ZN5Datum11DaysOfMonthEv+0x42>
     4f2:	8f e1       	ldi	r24, 0x1F	; 31
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	08 95       	ret
     4f8:	fc 01       	movw	r30, r24
     4fa:	80 81       	ld	r24, Z
     4fc:	91 81       	ldd	r25, Z+1	; 0x01
     4fe:	83 70       	andi	r24, 0x03	; 3
     500:	99 27       	eor	r25, r25
     502:	89 2b       	or	r24, r25
     504:	31 f4       	brne	.+12     	; 0x512 <_ZN5Datum11DaysOfMonthEv+0x48>
     506:	8d e1       	ldi	r24, 0x1D	; 29
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	08 95       	ret
     50c:	8e e1       	ldi	r24, 0x1E	; 30
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	08 95       	ret
     512:	8c e1       	ldi	r24, 0x1C	; 28
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	08 95       	ret

00000518 <_ZN5Datum4TickEv>:
     518:	0f 93       	push	r16
     51a:	1f 93       	push	r17
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	ec 01       	movw	r28, r24
     522:	0c 81       	ldd	r16, Y+4	; 0x04
     524:	1d 81       	ldd	r17, Y+5	; 0x05
     526:	0f 5f       	subi	r16, 0xFF	; 255
     528:	1f 4f       	sbci	r17, 0xFF	; 255
     52a:	1d 83       	std	Y+5, r17	; 0x05
     52c:	0c 83       	std	Y+4, r16	; 0x04
     52e:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN5Datum11DaysOfMonthEv>
     532:	80 17       	cp	r24, r16
     534:	91 07       	cpc	r25, r17
     536:	a4 f4       	brge	.+40     	; 0x560 <_ZN5Datum4TickEv+0x48>
     538:	21 e0       	ldi	r18, 0x01	; 1
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	3d 83       	std	Y+5, r19	; 0x05
     53e:	2c 83       	std	Y+4, r18	; 0x04
     540:	8a 81       	ldd	r24, Y+2	; 0x02
     542:	9b 81       	ldd	r25, Y+3	; 0x03
     544:	01 96       	adiw	r24, 0x01	; 1
     546:	8d 30       	cpi	r24, 0x0D	; 13
     548:	91 05       	cpc	r25, r1
     54a:	1c f4       	brge	.+6      	; 0x552 <_ZN5Datum4TickEv+0x3a>
     54c:	9b 83       	std	Y+3, r25	; 0x03
     54e:	8a 83       	std	Y+2, r24	; 0x02
     550:	07 c0       	rjmp	.+14     	; 0x560 <_ZN5Datum4TickEv+0x48>
     552:	3b 83       	std	Y+3, r19	; 0x03
     554:	2a 83       	std	Y+2, r18	; 0x02
     556:	88 81       	ld	r24, Y
     558:	99 81       	ldd	r25, Y+1	; 0x01
     55a:	01 96       	adiw	r24, 0x01	; 1
     55c:	99 83       	std	Y+1, r25	; 0x01
     55e:	88 83       	st	Y, r24
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	1f 91       	pop	r17
     566:	0f 91       	pop	r16
     568:	08 95       	ret

0000056a <_Z5Watchv>:
 * frequent calls will result in counting the time. days-of-month and leap years are taken into account
 *
 * @return void
 */
void Watch()
{
     56a:	0f 93       	push	r16
     56c:	1f 93       	push	r17
#define INTERVAL 1000L
	static long target = INTERVAL;
	if (millis() > target)	{
     56e:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <millis>
     572:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZZ5WatchvE6target>
     576:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZZ5WatchvE6target+0x1>
     57a:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <_ZZ5WatchvE6target+0x2>
     57e:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <_ZZ5WatchvE6target+0x3>
     582:	06 17       	cp	r16, r22
     584:	17 07       	cpc	r17, r23
     586:	28 07       	cpc	r18, r24
     588:	39 07       	cpc	r19, r25
     58a:	70 f5       	brcc	.+92     	; 0x5e8 <_Z5Watchv+0x7e>
		target += INTERVAL;
     58c:	d9 01       	movw	r26, r18
     58e:	c8 01       	movw	r24, r16
     590:	88 51       	subi	r24, 0x18	; 24
     592:	9c 4f       	sbci	r25, 0xFC	; 252
     594:	af 4f       	sbci	r26, 0xFF	; 255
     596:	bf 4f       	sbci	r27, 0xFF	; 255
     598:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZZ5WatchvE6target>
     59c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZZ5WatchvE6target+0x1>
     5a0:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_ZZ5WatchvE6target+0x2>
     5a4:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_ZZ5WatchvE6target+0x3>
		if(zeitGMT.Tick()) datumGMT.Tick(); //Wenn die Zeit bei 24.00 ankommt wird ret = 1 gesetzt und das Datum eins weitergestellt
     5a8:	85 e6       	ldi	r24, 0x65	; 101
     5aa:	93 e0       	ldi	r25, 0x03	; 3
     5ac:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN4Zeit4TickEv>
     5b0:	89 2b       	or	r24, r25
     5b2:	21 f0       	breq	.+8      	; 0x5bc <_Z5Watchv+0x52>
     5b4:	82 e4       	ldi	r24, 0x42	; 66
     5b6:	93 e0       	ldi	r25, 0x03	; 3
     5b8:	0e 94 8c 02 	call	0x518	; 0x518 <_ZN5Datum4TickEv>
		if(zeitTimeZone.Tick()) datumTimeZone.Tick();
     5bc:	8d e5       	ldi	r24, 0x5D	; 93
     5be:	93 e0       	ldi	r25, 0x03	; 3
     5c0:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN4Zeit4TickEv>
     5c4:	89 2b       	or	r24, r25
     5c6:	21 f0       	breq	.+8      	; 0x5d0 <_Z5Watchv+0x66>
     5c8:	8a e3       	ldi	r24, 0x3A	; 58
     5ca:	93 e0       	ldi	r25, 0x03	; 3
     5cc:	0e 94 8c 02 	call	0x518	; 0x518 <_ZN5Datum4TickEv>
		if(zeitLocal.Tick()) datumLocal.Tick(); 
     5d0:	85 e5       	ldi	r24, 0x55	; 85
     5d2:	93 e0       	ldi	r25, 0x03	; 3
     5d4:	0e 94 3a 02 	call	0x474	; 0x474 <_ZN4Zeit4TickEv>
     5d8:	89 2b       	or	r24, r25
     5da:	31 f0       	breq	.+12     	; 0x5e8 <_Z5Watchv+0x7e>
     5dc:	82 e3       	ldi	r24, 0x32	; 50
     5de:	93 e0       	ldi	r25, 0x03	; 3
	}
#undef INTERVAL
}
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
	static long target = INTERVAL;
	if (millis() > target)	{
		target += INTERVAL;
		if(zeitGMT.Tick()) datumGMT.Tick(); //Wenn die Zeit bei 24.00 ankommt wird ret = 1 gesetzt und das Datum eins weitergestellt
		if(zeitTimeZone.Tick()) datumTimeZone.Tick();
		if(zeitLocal.Tick()) datumLocal.Tick(); 
     5e4:	0c 94 8c 02 	jmp	0x518	; 0x518 <_ZN5Datum4TickEv>
	}
#undef INTERVAL
}
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	08 95       	ret

000005ee <_ZN4Zeit6ChangeEi>:
 * input UP, DOWN, RIGHT, LEFT_KEY is processed and returned as NO_KEY 
 *
 * @return int processed user input,  all except the four above mentioned is returned
 */
int Zeit::Change(int key)
{
     5ee:	fc 01       	movw	r30, r24
     5f0:	cb 01       	movw	r24, r22
	if((set_ < 1) || (set_ > 2)) set_ = 1;
     5f2:	26 81       	ldd	r18, Z+6	; 0x06
     5f4:	37 81       	ldd	r19, Z+7	; 0x07
     5f6:	21 50       	subi	r18, 0x01	; 1
     5f8:	31 09       	sbc	r19, r1
     5fa:	22 30       	cpi	r18, 0x02	; 2
     5fc:	31 05       	cpc	r19, r1
     5fe:	58 f0       	brcs	.+22     	; 0x616 <_ZN4Zeit6ChangeEi+0x28>
     600:	21 e0       	ldi	r18, 0x01	; 1
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	37 83       	std	Z+7, r19	; 0x07
     606:	26 83       	std	Z+6, r18	; 0x06
	switch(key){
     608:	62 30       	cpi	r22, 0x02	; 2
     60a:	71 05       	cpc	r23, r1
     60c:	69 f0       	breq	.+26     	; 0x628 <_ZN4Zeit6ChangeEi+0x3a>
     60e:	64 30       	cpi	r22, 0x04	; 4
     610:	71 05       	cpc	r23, r1
     612:	39 f0       	breq	.+14     	; 0x622 <_ZN4Zeit6ChangeEi+0x34>
     614:	14 c0       	rjmp	.+40     	; 0x63e <_ZN4Zeit6ChangeEi+0x50>
     616:	62 30       	cpi	r22, 0x02	; 2
     618:	71 05       	cpc	r23, r1
     61a:	31 f0       	breq	.+12     	; 0x628 <_ZN4Zeit6ChangeEi+0x3a>
     61c:	64 30       	cpi	r22, 0x04	; 4
     61e:	71 05       	cpc	r23, r1
     620:	49 f4       	brne	.+18     	; 0x634 <_ZN4Zeit6ChangeEi+0x46>
	case RIGHT_KEY:
		set_ = 2;
     622:	82 e0       	ldi	r24, 0x02	; 2
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	02 c0       	rjmp	.+4      	; 0x62c <_ZN4Zeit6ChangeEi+0x3e>
		key = X_KEY;
		break;
	case LEFT_KEY:
		set_ = 1;
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	97 83       	std	Z+7, r25	; 0x07
     62e:	86 83       	std	Z+6, r24	; 0x06
		key = X_KEY;
     630:	8a e0       	ldi	r24, 0x0A	; 10
     632:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}
	
	if(set_ == 1){
     634:	26 81       	ldd	r18, Z+6	; 0x06
     636:	37 81       	ldd	r19, Z+7	; 0x07
     638:	21 30       	cpi	r18, 0x01	; 1
     63a:	31 05       	cpc	r19, r1
     63c:	d1 f4       	brne	.+52     	; 0x672 <_ZN4Zeit6ChangeEi+0x84>
		//! change hours
		switch(key){
     63e:	81 30       	cpi	r24, 0x01	; 1
     640:	91 05       	cpc	r25, r1
     642:	21 f0       	breq	.+8      	; 0x64c <_ZN4Zeit6ChangeEi+0x5e>
     644:	83 30       	cpi	r24, 0x03	; 3
     646:	91 05       	cpc	r25, r1
     648:	49 f0       	breq	.+18     	; 0x65c <_ZN4Zeit6ChangeEi+0x6e>
     64a:	08 95       	ret
		case UP_KEY:
			hh_=(hh_+1)%24;
     64c:	80 81       	ld	r24, Z
     64e:	91 81       	ldd	r25, Z+1	; 0x01
     650:	01 96       	adiw	r24, 0x01	; 1
     652:	68 e1       	ldi	r22, 0x18	; 24
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	0e 94 85 29 	call	0x530a	; 0x530a <__divmodhi4>
     65a:	08 c0       	rjmp	.+16     	; 0x66c <_ZN4Zeit6ChangeEi+0x7e>
			ss_ = 0;
			key=X_KEY;
			break;
		case DOWN_KEY:
			if(hh_==0) hh_=23;
     65c:	80 81       	ld	r24, Z
     65e:	91 81       	ldd	r25, Z+1	; 0x01
     660:	00 97       	sbiw	r24, 0x00	; 0
     662:	19 f4       	brne	.+6      	; 0x66a <_ZN4Zeit6ChangeEi+0x7c>
     664:	87 e1       	ldi	r24, 0x17	; 23
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	01 c0       	rjmp	.+2      	; 0x66c <_ZN4Zeit6ChangeEi+0x7e>
			else --hh_;
     66a:	01 97       	sbiw	r24, 0x01	; 1
     66c:	91 83       	std	Z+1, r25	; 0x01
     66e:	80 83       	st	Z, r24
     670:	13 c0       	rjmp	.+38     	; 0x698 <_ZN4Zeit6ChangeEi+0xaa>
			ss_ = 0;
			key=X_KEY;
			break;
		}
	}
	else if(set_ == 2){
     672:	22 30       	cpi	r18, 0x02	; 2
     674:	31 05       	cpc	r19, r1
     676:	f1 f4       	brne	.+60     	; 0x6b4 <_ZN4Zeit6ChangeEi+0xc6>
		//! change minutes
		switch(key){
     678:	81 30       	cpi	r24, 0x01	; 1
     67a:	91 05       	cpc	r25, r1
     67c:	21 f0       	breq	.+8      	; 0x686 <_ZN4Zeit6ChangeEi+0x98>
     67e:	83 30       	cpi	r24, 0x03	; 3
     680:	91 05       	cpc	r25, r1
     682:	79 f0       	breq	.+30     	; 0x6a2 <_ZN4Zeit6ChangeEi+0xb4>
     684:	08 95       	ret
		case UP_KEY:
			mm_=(mm_+1)%60;
     686:	82 81       	ldd	r24, Z+2	; 0x02
     688:	93 81       	ldd	r25, Z+3	; 0x03
     68a:	01 96       	adiw	r24, 0x01	; 1
     68c:	6c e3       	ldi	r22, 0x3C	; 60
     68e:	70 e0       	ldi	r23, 0x00	; 0
     690:	0e 94 85 29 	call	0x530a	; 0x530a <__divmodhi4>
     694:	93 83       	std	Z+3, r25	; 0x03
     696:	82 83       	std	Z+2, r24	; 0x02
			ss_ = 0;
     698:	15 82       	std	Z+5, r1	; 0x05
     69a:	14 82       	std	Z+4, r1	; 0x04
			key=X_KEY;
     69c:	8a e0       	ldi	r24, 0x0A	; 10
     69e:	90 e0       	ldi	r25, 0x00	; 0
			break;
     6a0:	08 95       	ret
		case DOWN_KEY:
			if(mm_==0) mm_=59;
     6a2:	82 81       	ldd	r24, Z+2	; 0x02
     6a4:	93 81       	ldd	r25, Z+3	; 0x03
     6a6:	00 97       	sbiw	r24, 0x00	; 0
     6a8:	19 f4       	brne	.+6      	; 0x6b0 <_ZN4Zeit6ChangeEi+0xc2>
     6aa:	8b e3       	ldi	r24, 0x3B	; 59
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	f2 cf       	rjmp	.-28     	; 0x694 <_ZN4Zeit6ChangeEi+0xa6>
			else --mm_;
     6b0:	01 97       	sbiw	r24, 0x01	; 1
     6b2:	f0 cf       	rjmp	.-32     	; 0x694 <_ZN4Zeit6ChangeEi+0xa6>
			key=X_KEY;
			break;
		}
	}
	return key;
}
     6b4:	08 95       	ret

000006b6 <_Z11printhhmmssR4Zeit>:
 * @param[in] zeit: struct 
 * 
 * @return void
 */
void printhhmmss(class Zeit &z)
{
     6b6:	0f 93       	push	r16
     6b8:	1f 93       	push	r17
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	8c 01       	movw	r16, r24
	if (ampm)
     6c0:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <ampm>
     6c4:	f8 01       	movw	r30, r16
     6c6:	c0 81       	ld	r28, Z
     6c8:	d1 81       	ldd	r29, Z+1	; 0x01
     6ca:	88 23       	and	r24, r24
     6cc:	89 f0       	breq	.+34     	; 0x6f0 <_Z11printhhmmssR4Zeit+0x3a>
	{
		int ampmhours = z.GetHours(); 
		if (ampmhours > 12)
     6ce:	cd 30       	cpi	r28, 0x0D	; 13
     6d0:	d1 05       	cpc	r29, r1
     6d2:	0c f0       	brlt	.+2      	; 0x6d6 <_Z11printhhmmssR4Zeit+0x20>
		{
			 ampmhours -= 12;
     6d4:	2c 97       	sbiw	r28, 0x0c	; 12
			 if(ampmhours<=9)lcd.print("0");
			 lcd.print(ampmhours);
		}	
		else
		{
			if(ampmhours<=9)lcd.print("0");
     6d6:	ca 30       	cpi	r28, 0x0A	; 10
     6d8:	d1 05       	cpc	r29, r1
     6da:	34 f4       	brge	.+12     	; 0x6e8 <_Z11printhhmmssR4Zeit+0x32>
     6dc:	61 e4       	ldi	r22, 0x41	; 65
     6de:	71 e0       	ldi	r23, 0x01	; 1
     6e0:	84 ed       	ldi	r24, 0xD4	; 212
     6e2:	94 e0       	ldi	r25, 0x04	; 4
     6e4:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_ZN5Print5printEPKc>
			 lcd.print(ampmhours);
     6e8:	4a e0       	ldi	r20, 0x0A	; 10
     6ea:	50 e0       	ldi	r21, 0x00	; 0
     6ec:	be 01       	movw	r22, r28
     6ee:	0d c0       	rjmp	.+26     	; 0x70a <_Z11printhhmmssR4Zeit+0x54>
		}	 
	}
	
	else
	{
		if(z.GetHours()<=9)lcd.print("0");
     6f0:	2a 97       	sbiw	r28, 0x0a	; 10
     6f2:	34 f4       	brge	.+12     	; 0x700 <_Z11printhhmmssR4Zeit+0x4a>
     6f4:	61 e4       	ldi	r22, 0x41	; 65
     6f6:	71 e0       	ldi	r23, 0x01	; 1
     6f8:	84 ed       	ldi	r24, 0xD4	; 212
     6fa:	94 e0       	ldi	r25, 0x04	; 4
     6fc:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_ZN5Print5printEPKc>
		lcd.print(z.GetHours());
     700:	f8 01       	movw	r30, r16
     702:	60 81       	ld	r22, Z
     704:	71 81       	ldd	r23, Z+1	; 0x01
     706:	4a e0       	ldi	r20, 0x0A	; 10
     708:	50 e0       	ldi	r21, 0x00	; 0
     70a:	84 ed       	ldi	r24, 0xD4	; 212
     70c:	94 e0       	ldi	r25, 0x04	; 4
     70e:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <_ZN5Print5printEii>
	}
	if(z.GetMinutes()<=9)lcd.print(":0"); else lcd.print(":");
     712:	f8 01       	movw	r30, r16
     714:	82 81       	ldd	r24, Z+2	; 0x02
     716:	93 81       	ldd	r25, Z+3	; 0x03
     718:	0a 97       	sbiw	r24, 0x0a	; 10
     71a:	1c f4       	brge	.+6      	; 0x722 <_Z11printhhmmssR4Zeit+0x6c>
     71c:	60 e4       	ldi	r22, 0x40	; 64
     71e:	71 e0       	ldi	r23, 0x01	; 1
     720:	02 c0       	rjmp	.+4      	; 0x726 <_Z11printhhmmssR4Zeit+0x70>
     722:	63 e4       	ldi	r22, 0x43	; 67
     724:	71 e0       	ldi	r23, 0x01	; 1
     726:	84 ed       	ldi	r24, 0xD4	; 212
     728:	94 e0       	ldi	r25, 0x04	; 4
     72a:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_ZN5Print5printEPKc>
	lcd.print(z.GetMinutes());
     72e:	f8 01       	movw	r30, r16
     730:	62 81       	ldd	r22, Z+2	; 0x02
     732:	73 81       	ldd	r23, Z+3	; 0x03
     734:	4a e0       	ldi	r20, 0x0A	; 10
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	84 ed       	ldi	r24, 0xD4	; 212
     73a:	94 e0       	ldi	r25, 0x04	; 4
     73c:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <_ZN5Print5printEii>
	if(z.GetSeconds()<=9)lcd.print(":0"); else lcd.print(":");
     740:	f8 01       	movw	r30, r16
     742:	84 81       	ldd	r24, Z+4	; 0x04
     744:	95 81       	ldd	r25, Z+5	; 0x05
     746:	0a 97       	sbiw	r24, 0x0a	; 10
     748:	1c f4       	brge	.+6      	; 0x750 <_Z11printhhmmssR4Zeit+0x9a>
     74a:	60 e4       	ldi	r22, 0x40	; 64
     74c:	71 e0       	ldi	r23, 0x01	; 1
     74e:	02 c0       	rjmp	.+4      	; 0x754 <_Z11printhhmmssR4Zeit+0x9e>
     750:	63 e4       	ldi	r22, 0x43	; 67
     752:	71 e0       	ldi	r23, 0x01	; 1
     754:	84 ed       	ldi	r24, 0xD4	; 212
     756:	94 e0       	ldi	r25, 0x04	; 4
     758:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_ZN5Print5printEPKc>
	lcd.print(z.GetSeconds());
     75c:	f8 01       	movw	r30, r16
     75e:	64 81       	ldd	r22, Z+4	; 0x04
     760:	75 81       	ldd	r23, Z+5	; 0x05
     762:	4a e0       	ldi	r20, 0x0A	; 10
     764:	50 e0       	ldi	r21, 0x00	; 0
     766:	84 ed       	ldi	r24, 0xD4	; 212
     768:	94 e0       	ldi	r25, 0x04	; 4
     76a:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <_ZN5Print5printEii>
	if (ampm && z.GetHours() > 12) lcd.print(" PM");
     76e:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <ampm>
     772:	88 23       	and	r24, r24
     774:	91 f0       	breq	.+36     	; 0x79a <_Z11printhhmmssR4Zeit+0xe4>
     776:	f8 01       	movw	r30, r16
     778:	80 81       	ld	r24, Z
     77a:	91 81       	ldd	r25, Z+1	; 0x01
     77c:	0d 97       	sbiw	r24, 0x0d	; 13
     77e:	1c f0       	brlt	.+6      	; 0x786 <_Z11printhhmmssR4Zeit+0xd0>
     780:	65 e4       	ldi	r22, 0x45	; 69
     782:	71 e0       	ldi	r23, 0x01	; 1
     784:	02 c0       	rjmp	.+4      	; 0x78a <_Z11printhhmmssR4Zeit+0xd4>
	else if (ampm && z.GetHours() <= 12) lcd.print(" AM");
     786:	69 e4       	ldi	r22, 0x49	; 73
     788:	71 e0       	ldi	r23, 0x01	; 1
     78a:	84 ed       	ldi	r24, 0xD4	; 212
     78c:	94 e0       	ldi	r25, 0x04	; 4
}
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
	if(z.GetMinutes()<=9)lcd.print(":0"); else lcd.print(":");
	lcd.print(z.GetMinutes());
	if(z.GetSeconds()<=9)lcd.print(":0"); else lcd.print(":");
	lcd.print(z.GetSeconds());
	if (ampm && z.GetHours() > 12) lcd.print(" PM");
	else if (ampm && z.GetHours() <= 12) lcd.print(" AM");
     796:	0c 94 d3 1e 	jmp	0x3da6	; 0x3da6 <_ZN5Print5printEPKc>
}
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	08 95       	ret

000007a4 <_Z11alarmScreeni>:
 * @param[in] key : int, user input
 *
 * @return key
 */
int alarmScreen(int key)
{
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	ec 01       	movw	r28, r24
	lcd.setCursor(0,0);
     7aa:	40 e0       	ldi	r20, 0x00	; 0
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	84 ed       	ldi	r24, 0xD4	; 212
     7b0:	94 e0       	ldi	r25, 0x04	; 4
     7b2:	0e 94 8d 14 	call	0x291a	; 0x291a <_ZN7hd447809setCursorEhh>
	lcd.print("Wecker: ");
     7b6:	6d e4       	ldi	r22, 0x4D	; 77
     7b8:	71 e0       	ldi	r23, 0x01	; 1
     7ba:	84 ed       	ldi	r24, 0xD4	; 212
     7bc:	94 e0       	ldi	r25, 0x04	; 4
     7be:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_ZN5Print5printEPKc>
	if (weckerStatus)
     7c2:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <weckerStatus>
     7c6:	88 23       	and	r24, r24
     7c8:	19 f0       	breq	.+6      	; 0x7d0 <_Z11alarmScreeni+0x2c>
	{
		lcd.print("Ein");
     7ca:	66 e5       	ldi	r22, 0x56	; 86
     7cc:	71 e0       	ldi	r23, 0x01	; 1
     7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <_Z11alarmScreeni+0x30>
		
	}
	else lcd.print("Aus");
     7d0:	6a e5       	ldi	r22, 0x5A	; 90
     7d2:	71 e0       	ldi	r23, 0x01	; 1
     7d4:	84 ed       	ldi	r24, 0xD4	; 212
     7d6:	94 e0       	ldi	r25, 0x04	; 4
     7d8:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
     7dc:	41 e0       	ldi	r20, 0x01	; 1
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	84 ed       	ldi	r24, 0xD4	; 212
     7e2:	94 e0       	ldi	r25, 0x04	; 4
     7e4:	0e 94 8d 14 	call	0x291a	; 0x291a <_ZN7hd447809setCursorEhh>
	printhhmmss(weckzeit);
     7e8:	8d e4       	ldi	r24, 0x4D	; 77
     7ea:	93 e0       	ldi	r25, 0x03	; 3
     7ec:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_Z11printhhmmssR4Zeit>
	return key;
}
     7f0:	ce 01       	movw	r24, r28
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	08 95       	ret

000007f8 <_Z11changeAlarmi>:
 * @param[in] key : int, user input
 *
 * @return key
 */
int changeAlarm (int key)
{
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	ec 01       	movw	r28, r24
	lcd.setCursor(0,0);
     7fe:	40 e0       	ldi	r20, 0x00	; 0
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	84 ed       	ldi	r24, 0xD4	; 212
     804:	94 e0       	ldi	r25, 0x04	; 4
     806:	0e 94 8d 14 	call	0x291a	; 0x291a <_ZN7hd447809setCursorEhh>
	lcd.print("Weckzeit?");
     80a:	6e e5       	ldi	r22, 0x5E	; 94
     80c:	71 e0       	ldi	r23, 0x01	; 1
     80e:	84 ed       	ldi	r24, 0xD4	; 212
     810:	94 e0       	ldi	r25, 0x04	; 4
     812:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_ZN5Print5printEPKc>
	key = weckzeit.Change(key);
     816:	be 01       	movw	r22, r28
     818:	8d e4       	ldi	r24, 0x4D	; 77
     81a:	93 e0       	ldi	r25, 0x03	; 3
     81c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <_ZN4Zeit6ChangeEi>
     820:	ec 01       	movw	r28, r24
	lcd.setCursor(0,1);
     822:	41 e0       	ldi	r20, 0x01	; 1
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	84 ed       	ldi	r24, 0xD4	; 212
     828:	94 e0       	ldi	r25, 0x04	; 4
     82a:	0e 94 8d 14 	call	0x291a	; 0x291a <_ZN7hd447809setCursorEhh>
	printhhmmss(weckzeit);
     82e:	8d e4       	ldi	r24, 0x4D	; 77
     830:	93 e0       	ldi	r25, 0x03	; 3
     832:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_Z11printhhmmssR4Zeit>

		return key;
	
	return key;
}
     836:	ce 01       	movw	r24, r28
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	08 95       	ret

0000083e <_Z13printddmmyyyyR5Datum>:
 * @param[in] datum: struct 
 * 
 * @return void
 */
void printddmmyyyy(class Datum &d)
{
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	ec 01       	movw	r28, r24
	if(d.GetDay()<=9)lcd.print(" ");
     844:	8c 81       	ldd	r24, Y+4	; 0x04
     846:	9d 81       	ldd	r25, Y+5	; 0x05
     848:	0a 97       	sbiw	r24, 0x0a	; 10
     84a:	34 f4       	brge	.+12     	; 0x858 <_Z13printddmmyyyyR5Datum+0x1a>
     84c:	6e e7       	ldi	r22, 0x7E	; 126
     84e:	71 e0       	ldi	r23, 0x01	; 1
     850:	84 ed       	ldi	r24, 0xD4	; 212
     852:	94 e0       	ldi	r25, 0x04	; 4
     854:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_ZN5Print5printEPKc>
	lcd.print(d.GetDay());
     858:	6c 81       	ldd	r22, Y+4	; 0x04
     85a:	7d 81       	ldd	r23, Y+5	; 0x05
     85c:	4a e0       	ldi	r20, 0x0A	; 10
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	84 ed       	ldi	r24, 0xD4	; 212
     862:	94 e0       	ldi	r25, 0x04	; 4
     864:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <_ZN5Print5printEii>
	if(d.GetMonth()<=9)lcd.print(". "); else lcd.print(".");
     868:	8a 81       	ldd	r24, Y+2	; 0x02
     86a:	9b 81       	ldd	r25, Y+3	; 0x03
     86c:	0a 97       	sbiw	r24, 0x0a	; 10
     86e:	1c f4       	brge	.+6      	; 0x876 <_Z13printddmmyyyyR5Datum+0x38>
     870:	68 e6       	ldi	r22, 0x68	; 104
     872:	71 e0       	ldi	r23, 0x01	; 1
     874:	02 c0       	rjmp	.+4      	; 0x87a <_Z13printddmmyyyyR5Datum+0x3c>
     876:	6b e6       	ldi	r22, 0x6B	; 107
     878:	71 e0       	ldi	r23, 0x01	; 1
     87a:	84 ed       	ldi	r24, 0xD4	; 212
     87c:	94 e0       	ldi	r25, 0x04	; 4
     87e:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_ZN5Print5printEPKc>
	lcd.print(d.GetMonth());
     882:	6a 81       	ldd	r22, Y+2	; 0x02
     884:	7b 81       	ldd	r23, Y+3	; 0x03
     886:	4a e0       	ldi	r20, 0x0A	; 10
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	84 ed       	ldi	r24, 0xD4	; 212
     88c:	94 e0       	ldi	r25, 0x04	; 4
     88e:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <_ZN5Print5printEii>
	lcd.print(".");
     892:	6b e6       	ldi	r22, 0x6B	; 107
     894:	71 e0       	ldi	r23, 0x01	; 1
     896:	84 ed       	ldi	r24, 0xD4	; 212
     898:	94 e0       	ldi	r25, 0x04	; 4
     89a:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_ZN5Print5printEPKc>
	lcd.print(d.GetYear());
     89e:	68 81       	ld	r22, Y
     8a0:	79 81       	ldd	r23, Y+1	; 0x01
     8a2:	4a e0       	ldi	r20, 0x0A	; 10
     8a4:	50 e0       	ldi	r21, 0x00	; 0
     8a6:	84 ed       	ldi	r24, 0xD4	; 212
     8a8:	94 e0       	ldi	r25, 0x04	; 4
}
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
	if(d.GetDay()<=9)lcd.print(" ");
	lcd.print(d.GetDay());
	if(d.GetMonth()<=9)lcd.print(". "); else lcd.print(".");
	lcd.print(d.GetMonth());
	lcd.print(".");
	lcd.print(d.GetYear());
     8ae:	0c 94 80 1f 	jmp	0x3f00	; 0x3f00 <_ZN5Print5printEii>

000008b2 <_Z10dateScreeni>:
 * @param[in] key : int, user input
 *
 * @return key
 */
int dateScreen(int key)
{
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	ec 01       	movw	r28, r24
	lcd.setCursor(0,0);
     8b8:	40 e0       	ldi	r20, 0x00	; 0
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	84 ed       	ldi	r24, 0xD4	; 212
     8be:	94 e0       	ldi	r25, 0x04	; 4
     8c0:	0e 94 8d 14 	call	0x291a	; 0x291a <_ZN7hd447809setCursorEhh>
	if (timeZoneChoosen)
     8c4:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <timeZoneChoosen>
     8c8:	88 23       	and	r24, r24
     8ca:	19 f1       	breq	.+70     	; 0x912 <_Z10dateScreeni+0x60>
	{
		printhhmmss(zeitTimeZone);
     8cc:	8d e5       	ldi	r24, 0x5D	; 93
     8ce:	93 e0       	ldi	r25, 0x03	; 3
     8d0:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_Z11printhhmmssR4Zeit>
		lcd.setCursor(13,0);
     8d4:	40 e0       	ldi	r20, 0x00	; 0
     8d6:	6d e0       	ldi	r22, 0x0D	; 13
     8d8:	84 ed       	ldi	r24, 0xD4	; 212
     8da:	94 e0       	ldi	r25, 0x04	; 4
     8dc:	0e 94 8d 14 	call	0x291a	; 0x291a <_ZN7hd447809setCursorEhh>
		lcd.print(CITIES[tz].initials);
     8e0:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <tz>
     8e4:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <tz+0x1>
     8e8:	2e e0       	ldi	r18, 0x0E	; 14
     8ea:	28 9f       	mul	r18, r24
     8ec:	b0 01       	movw	r22, r0
     8ee:	29 9f       	mul	r18, r25
     8f0:	70 0d       	add	r23, r0
     8f2:	11 24       	eor	r1, r1
     8f4:	6c 5c       	subi	r22, 0xCC	; 204
     8f6:	7b 4f       	sbci	r23, 0xFB	; 251
     8f8:	84 ed       	ldi	r24, 0xD4	; 212
     8fa:	94 e0       	ldi	r25, 0x04	; 4
     8fc:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <_ZN5Print5printERK6String>
		lcd.setCursor(0,1);
     900:	41 e0       	ldi	r20, 0x01	; 1
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	84 ed       	ldi	r24, 0xD4	; 212
     906:	94 e0       	ldi	r25, 0x04	; 4
     908:	0e 94 8d 14 	call	0x291a	; 0x291a <_ZN7hd447809setCursorEhh>
		printddmmyyyy(datumTimeZone);
     90c:	8a e3       	ldi	r24, 0x3A	; 58
     90e:	93 e0       	ldi	r25, 0x03	; 3
     910:	0c c0       	rjmp	.+24     	; 0x92a <_Z10dateScreeni+0x78>
	}
	else
	{
		printhhmmss(zeitLocal);
     912:	85 e5       	ldi	r24, 0x55	; 85
     914:	93 e0       	ldi	r25, 0x03	; 3
     916:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_Z11printhhmmssR4Zeit>
		lcd.setCursor(0,1);
     91a:	41 e0       	ldi	r20, 0x01	; 1
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	84 ed       	ldi	r24, 0xD4	; 212
     920:	94 e0       	ldi	r25, 0x04	; 4
     922:	0e 94 8d 14 	call	0x291a	; 0x291a <_ZN7hd447809setCursorEhh>
		printddmmyyyy(datumLocal);
     926:	82 e3       	ldi	r24, 0x32	; 50
     928:	93 e0       	ldi	r25, 0x03	; 3
     92a:	0e 94 1f 04 	call	0x83e	; 0x83e <_Z13printddmmyyyyR5Datum>
	}
	return key;
}
     92e:	ce 01       	movw	r24, r28
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	08 95       	ret

00000936 <_Z17printHumidityTempv>:
 * und schreibt den Wert auf das LCD
 *
 * @return void
 */
void printHumidityTemp (void)
{
     936:	cf 92       	push	r12
     938:	df 92       	push	r13
     93a:	ef 92       	push	r14
     93c:	ff 92       	push	r15
	lcd.setCursor(0,1);
     93e:	41 e0       	ldi	r20, 0x01	; 1
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	84 ed       	ldi	r24, 0xD4	; 212
     944:	94 e0       	ldi	r25, 0x04	; 4
     946:	0e 94 8d 14 	call	0x291a	; 0x291a <_ZN7hd447809setCursorEhh>
	if (temp == 0) lcd.print("Sensor defekt");
     94a:	c0 90 14 04 	lds	r12, 0x0414	; 0x800414 <temp>
     94e:	d0 90 15 04 	lds	r13, 0x0415	; 0x800415 <temp+0x1>
     952:	e0 90 16 04 	lds	r14, 0x0416	; 0x800416 <temp+0x2>
     956:	f0 90 17 04 	lds	r15, 0x0417	; 0x800417 <temp+0x3>
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	a9 01       	movw	r20, r18
     960:	c7 01       	movw	r24, r14
     962:	b6 01       	movw	r22, r12
     964:	0e 94 b1 19 	call	0x3362	; 0x3362 <__cmpsf2>
     968:	81 11       	cpse	r24, r1
     96a:	03 c0       	rjmp	.+6      	; 0x972 <_Z17printHumidityTempv+0x3c>
     96c:	6d e6       	ldi	r22, 0x6D	; 109
     96e:	71 e0       	ldi	r23, 0x01	; 1
     970:	23 c0       	rjmp	.+70     	; 0x9b8 <_Z17printHumidityTempv+0x82>
	else {
		lcd.print(temp);
     972:	22 e0       	ldi	r18, 0x02	; 2
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	b7 01       	movw	r22, r14
     978:	a6 01       	movw	r20, r12
     97a:	84 ed       	ldi	r24, 0xD4	; 212
     97c:	94 e0       	ldi	r25, 0x04	; 4
     97e:	0e 94 62 20 	call	0x40c4	; 0x40c4 <_ZN5Print5printEdi>
		lcd.print((char)223);
     982:	6f ed       	ldi	r22, 0xDF	; 223
     984:	84 ed       	ldi	r24, 0xD4	; 212
     986:	94 e0       	ldi	r25, 0x04	; 4
     988:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <_ZN5Print5printEc>
		lcd.print("C   ");
     98c:	6b e7       	ldi	r22, 0x7B	; 123
     98e:	71 e0       	ldi	r23, 0x01	; 1
     990:	84 ed       	ldi	r24, 0xD4	; 212
     992:	94 e0       	ldi	r25, 0x04	; 4
     994:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_ZN5Print5printEPKc>
		lcd.print(hum);
     998:	40 91 10 04 	lds	r20, 0x0410	; 0x800410 <hum>
     99c:	50 91 11 04 	lds	r21, 0x0411	; 0x800411 <hum+0x1>
     9a0:	60 91 12 04 	lds	r22, 0x0412	; 0x800412 <hum+0x2>
     9a4:	70 91 13 04 	lds	r23, 0x0413	; 0x800413 <hum+0x3>
     9a8:	22 e0       	ldi	r18, 0x02	; 2
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	84 ed       	ldi	r24, 0xD4	; 212
     9ae:	94 e0       	ldi	r25, 0x04	; 4
     9b0:	0e 94 62 20 	call	0x40c4	; 0x40c4 <_ZN5Print5printEdi>
		lcd.print("%");
     9b4:	60 e8       	ldi	r22, 0x80	; 128
     9b6:	71 e0       	ldi	r23, 0x01	; 1
     9b8:	84 ed       	ldi	r24, 0xD4	; 212
     9ba:	94 e0       	ldi	r25, 0x04	; 4
	}
}
     9bc:	ff 90       	pop	r15
     9be:	ef 90       	pop	r14
     9c0:	df 90       	pop	r13
     9c2:	cf 90       	pop	r12
	else {
		lcd.print(temp);
		lcd.print((char)223);
		lcd.print("C   ");
		lcd.print(hum);
		lcd.print("%");
     9c4:	0c 94 d3 1e 	jmp	0x3da6	; 0x3da6 <_ZN5Print5printEPKc>

000009c8 <_Z10homeScreeni>:
 * @param[in] key : int, user input
 *
 * @return key
 */
int homeScreen(int key)
{
     9c8:	0f 93       	push	r16
     9ca:	1f 93       	push	r17
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	ec 01       	movw	r28, r24
	if (readSensor < millis())
     9d2:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <millis>
     9d6:	00 91 18 04 	lds	r16, 0x0418	; 0x800418 <readSensor>
     9da:	10 91 19 04 	lds	r17, 0x0419	; 0x800419 <readSensor+0x1>
     9de:	20 91 1a 04 	lds	r18, 0x041A	; 0x80041a <readSensor+0x2>
     9e2:	30 91 1b 04 	lds	r19, 0x041B	; 0x80041b <readSensor+0x3>
     9e6:	06 17       	cp	r16, r22
     9e8:	17 07       	cpc	r17, r23
     9ea:	28 07       	cpc	r18, r24
     9ec:	39 07       	cpc	r19, r25
     9ee:	b8 f5       	brcc	.+110    	; 0xa5e <_Z10homeScreeni+0x96>
    int8_t read11(uint8_t pin);
    int8_t read(uint8_t pin);
    int8_t read12(uint8_t pin);

    inline int8_t read21(uint8_t pin)   { return read(pin); };
    inline int8_t read22(uint8_t pin)   { return read(pin); };
     9f0:	66 e1       	ldi	r22, 0x16	; 22
     9f2:	8c e1       	ldi	r24, 0x1C	; 28
     9f4:	94 e0       	ldi	r25, 0x04	; 4
     9f6:	0e 94 a0 13 	call	0x2740	; 0x2740 <_ZN3dht4readEh>
	{	
		int readData = DHT.read22(tempSensor);
		temp = DHT.temperature;
     9fa:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <DHT+0x4>
     9fe:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <DHT+0x5>
     a02:	a0 91 22 04 	lds	r26, 0x0422	; 0x800422 <DHT+0x6>
     a06:	b0 91 23 04 	lds	r27, 0x0423	; 0x800423 <DHT+0x7>
     a0a:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <temp>
     a0e:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <temp+0x1>
     a12:	a0 93 16 04 	sts	0x0416, r26	; 0x800416 <temp+0x2>
     a16:	b0 93 17 04 	sts	0x0417, r27	; 0x800417 <temp+0x3>
		hum = DHT.humidity;
     a1a:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <DHT>
     a1e:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <DHT+0x1>
     a22:	a0 91 1e 04 	lds	r26, 0x041E	; 0x80041e <DHT+0x2>
     a26:	b0 91 1f 04 	lds	r27, 0x041F	; 0x80041f <DHT+0x3>
     a2a:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <hum>
     a2e:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <hum+0x1>
     a32:	a0 93 12 04 	sts	0x0412, r26	; 0x800412 <hum+0x2>
     a36:	b0 93 13 04 	sts	0x0413, r27	; 0x800413 <hum+0x3>
		printHumidityTemp();
     a3a:	0e 94 9b 04 	call	0x936	; 0x936 <_Z17printHumidityTempv>
		readSensor = millis() + 5000;
     a3e:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <millis>
     a42:	dc 01       	movw	r26, r24
     a44:	cb 01       	movw	r24, r22
     a46:	88 57       	subi	r24, 0x78	; 120
     a48:	9c 4e       	sbci	r25, 0xEC	; 236
     a4a:	af 4f       	sbci	r26, 0xFF	; 255
     a4c:	bf 4f       	sbci	r27, 0xFF	; 255
     a4e:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <readSensor>
     a52:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <readSensor+0x1>
     a56:	a0 93 1a 04 	sts	0x041A, r26	; 0x80041a <readSensor+0x2>
     a5a:	b0 93 1b 04 	sts	0x041B, r27	; 0x80041b <readSensor+0x3>
	}
	printHumidityTemp();
     a5e:	0e 94 9b 04 	call	0x936	; 0x936 <_Z17printHumidityTempv>
	lcd.setCursor(0,0);
     a62:	40 e0       	ldi	r20, 0x00	; 0
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	84 ed       	ldi	r24, 0xD4	; 212
     a68:	94 e0       	ldi	r25, 0x04	; 4
     a6a:	0e 94 8d 14 	call	0x291a	; 0x291a <_ZN7hd447809setCursorEhh>
	if (timeZoneChoosen)
     a6e:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <timeZoneChoosen>
     a72:	88 23       	and	r24, r24
     a74:	d9 f0       	breq	.+54     	; 0xaac <_Z10homeScreeni+0xe4>
	{
		printhhmmss(zeitTimeZone);
     a76:	8d e5       	ldi	r24, 0x5D	; 93
     a78:	93 e0       	ldi	r25, 0x03	; 3
     a7a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_Z11printhhmmssR4Zeit>
		lcd.setCursor(13,0);
     a7e:	40 e0       	ldi	r20, 0x00	; 0
     a80:	6d e0       	ldi	r22, 0x0D	; 13
     a82:	84 ed       	ldi	r24, 0xD4	; 212
     a84:	94 e0       	ldi	r25, 0x04	; 4
     a86:	0e 94 8d 14 	call	0x291a	; 0x291a <_ZN7hd447809setCursorEhh>
		lcd.print(CITIES[tz].initials);
     a8a:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <tz>
     a8e:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <tz+0x1>
     a92:	2e e0       	ldi	r18, 0x0E	; 14
     a94:	28 9f       	mul	r18, r24
     a96:	b0 01       	movw	r22, r0
     a98:	29 9f       	mul	r18, r25
     a9a:	70 0d       	add	r23, r0
     a9c:	11 24       	eor	r1, r1
     a9e:	6c 5c       	subi	r22, 0xCC	; 204
     aa0:	7b 4f       	sbci	r23, 0xFB	; 251
     aa2:	84 ed       	ldi	r24, 0xD4	; 212
     aa4:	94 e0       	ldi	r25, 0x04	; 4
     aa6:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <_ZN5Print5printERK6String>
     aaa:	04 c0       	rjmp	.+8      	; 0xab4 <_Z10homeScreeni+0xec>
	}
	else
	{
		printhhmmss(zeitLocal);	
     aac:	85 e5       	ldi	r24, 0x55	; 85
     aae:	93 e0       	ldi	r25, 0x03	; 3
     ab0:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_Z11printhhmmssR4Zeit>
	}
	return key;
}
     ab4:	ce 01       	movw	r24, r28
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	08 95       	ret

00000ac0 <_Z13calculateTimev>:
 * Stellt sicher, dass die Zeiten richtig sind. 
 * Zwischen 0 und kleiner als 24.
 * Ändert das Datum bei Zeitübertrag.
 */
void calculateTime() {
	zeitTimeZone.hh_= zeitGMT.hh_ + CITIES[tz].timediff;
     ac0:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <tz>
     ac4:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <tz+0x1>
     ac8:	2e e0       	ldi	r18, 0x0E	; 14
     aca:	28 9f       	mul	r18, r24
     acc:	f0 01       	movw	r30, r0
     ace:	29 9f       	mul	r18, r25
     ad0:	f0 0d       	add	r31, r0
     ad2:	11 24       	eor	r1, r1
     ad4:	e4 5d       	subi	r30, 0xD4	; 212
     ad6:	fb 4f       	sbci	r31, 0xFB	; 251
     ad8:	26 81       	ldd	r18, Z+6	; 0x06
     ada:	37 81       	ldd	r19, Z+7	; 0x07
     adc:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <zeitGMT>
     ae0:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <zeitGMT+0x1>
     ae4:	82 0f       	add	r24, r18
     ae6:	93 1f       	adc	r25, r19
     ae8:	90 93 5e 03 	sts	0x035E, r25	; 0x80035e <zeitTimeZone+0x1>
     aec:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <zeitTimeZone>
	datumTimeZone = datumGMT;
     af0:	28 e0       	ldi	r18, 0x08	; 8
     af2:	e2 e4       	ldi	r30, 0x42	; 66
     af4:	f3 e0       	ldi	r31, 0x03	; 3
     af6:	aa e3       	ldi	r26, 0x3A	; 58
     af8:	b3 e0       	ldi	r27, 0x03	; 3
     afa:	01 90       	ld	r0, Z+
     afc:	0d 92       	st	X+, r0
     afe:	2a 95       	dec	r18
     b00:	e1 f7       	brne	.-8      	; 0xafa <_Z13calculateTimev+0x3a>
	if (zeitTimeZone.hh_ > 23)
     b02:	88 31       	cpi	r24, 0x18	; 24
     b04:	91 05       	cpc	r25, r1
     b06:	4c f0       	brlt	.+18     	; 0xb1a <__stack+0x1b>
	{
		zeitTimeZone.hh_ -= 24;
     b08:	48 97       	sbiw	r24, 0x18	; 24
     b0a:	90 93 5e 03 	sts	0x035E, r25	; 0x80035e <zeitTimeZone+0x1>
     b0e:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <zeitTimeZone>
		datumTimeZone.Tick();
     b12:	8a e3       	ldi	r24, 0x3A	; 58
     b14:	93 e0       	ldi	r25, 0x03	; 3
     b16:	0e 94 8c 02 	call	0x518	; 0x518 <_ZN5Datum4TickEv>
	}
	if (zeitTimeZone.hh_ < 0)
     b1a:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <zeitTimeZone>
     b1e:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <zeitTimeZone+0x1>
     b22:	97 ff       	sbrs	r25, 7
     b24:	2f c0       	rjmp	.+94     	; 0xb84 <__stack+0x85>
	{
		zeitTimeZone.hh_ = 24 + zeitTimeZone.hh_;
     b26:	48 96       	adiw	r24, 0x18	; 24
     b28:	90 93 5e 03 	sts	0x035E, r25	; 0x80035e <zeitTimeZone+0x1>
     b2c:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <zeitTimeZone>
		datumTimeZone.DD_ -= 1;
     b30:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <datumTimeZone+0x4>
     b34:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <datumTimeZone+0x5>
     b38:	01 97       	sbiw	r24, 0x01	; 1
     b3a:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <datumTimeZone+0x5>
     b3e:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <datumTimeZone+0x4>
		if (datumTimeZone.DD_ == 0)
     b42:	89 2b       	or	r24, r25
     b44:	f9 f4       	brne	.+62     	; 0xb84 <__stack+0x85>
		{
			datumTimeZone.MM_ -= 1;
     b46:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <datumTimeZone+0x2>
     b4a:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <datumTimeZone+0x3>
     b4e:	01 97       	sbiw	r24, 0x01	; 1
     b50:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <datumTimeZone+0x3>
     b54:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <datumTimeZone+0x2>
			if (datumTimeZone.MM_ != 0)	datumTimeZone.DD_ = datumTimeZone.DaysOfMonth();	
     b58:	89 2b       	or	r24, r25
     b5a:	29 f0       	breq	.+10     	; 0xb66 <__stack+0x67>
     b5c:	8a e3       	ldi	r24, 0x3A	; 58
     b5e:	93 e0       	ldi	r25, 0x03	; 3
     b60:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN5Datum11DaysOfMonthEv>
     b64:	0b c0       	rjmp	.+22     	; 0xb7c <__stack+0x7d>
			else
			{
				datumTimeZone.YYYY_ -= 1;
     b66:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <datumTimeZone>
     b6a:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <datumTimeZone+0x1>
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <datumTimeZone+0x1>
     b74:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <datumTimeZone>
				datumTimeZone.DD_ = 31;
     b78:	8f e1       	ldi	r24, 0x1F	; 31
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <datumTimeZone+0x5>
     b80:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <datumTimeZone+0x4>
     b84:	08 95       	ret

00000b86 <_Z14changeTimeZonei>:
 * 
 * @return key
 */
int changeTimeZone (int key)
{
	switch (key)
     b86:	83 30       	cpi	r24, 0x03	; 3
     b88:	91 05       	cpc	r25, r1
     b8a:	39 f0       	breq	.+14     	; 0xb9a <_Z14changeTimeZonei+0x14>
     b8c:	8a 30       	cpi	r24, 0x0A	; 10
     b8e:	91 05       	cpc	r25, r1
     b90:	21 f0       	breq	.+8      	; 0xb9a <_Z14changeTimeZonei+0x14>
     b92:	81 30       	cpi	r24, 0x01	; 1
     b94:	91 05       	cpc	r25, r1
     b96:	51 f5       	brne	.+84     	; 0xbec <_Z14changeTimeZonei+0x66>
     b98:	17 c0       	rjmp	.+46     	; 0xbc8 <_Z14changeTimeZonei+0x42>
	{
		case X_KEY:
		//zeit2 = zeitLocal;
		case DOWN_KEY:
		lcd.clear();
     b9a:	84 ed       	ldi	r24, 0xD4	; 212
     b9c:	94 e0       	ldi	r25, 0x04	; 4
     b9e:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN7hd447805clearEv>
		if (tz == 0)
     ba2:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <tz>
     ba6:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <tz+0x1>
     baa:	00 97       	sbiw	r24, 0x00	; 0
     bac:	19 f4       	brne	.+6      	; 0xbb4 <_Z14changeTimeZonei+0x2e>
		{
			tz = 11;
     bae:	8b e0       	ldi	r24, 0x0B	; 11
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	01 c0       	rjmp	.+2      	; 0xbb6 <_Z14changeTimeZonei+0x30>
		}
		else tz -= 1;
     bb4:	01 97       	sbiw	r24, 0x01	; 1
     bb6:	90 93 2b 04 	sts	0x042B, r25	; 0x80042b <tz+0x1>
     bba:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <tz>
		calculateTime();	
     bbe:	0e 94 60 05 	call	0xac0	; 0xac0 <_Z13calculateTimev>
		key = X_KEY;
     bc2:	8a e0       	ldi	r24, 0x0A	; 10
     bc4:	90 e0       	ldi	r25, 0x00	; 0
		break;
     bc6:	08 95       	ret
		case UP_KEY:
		lcd.clear();
     bc8:	84 ed       	ldi	r24, 0xD4	; 212
     bca:	94 e0       	ldi	r25, 0x04	; 4
     bcc:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN7hd447805clearEv>
		if (tz == 11)
     bd0:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <tz>
     bd4:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <tz+0x1>
     bd8:	8b 30       	cpi	r24, 0x0B	; 11
     bda:	91 05       	cpc	r25, r1
     bdc:	29 f4       	brne	.+10     	; 0xbe8 <_Z14changeTimeZonei+0x62>
		{
			tz = 0;
     bde:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <tz+0x1>
     be2:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <tz>
     be6:	eb cf       	rjmp	.-42     	; 0xbbe <_Z14changeTimeZonei+0x38>
		}
		else tz += 1;
     be8:	01 96       	adiw	r24, 0x01	; 1
     bea:	e5 cf       	rjmp	.-54     	; 0xbb6 <_Z14changeTimeZonei+0x30>
		break;
		case RIGHT_KEY:
		break;
	}
	return key;
}
     bec:	08 95       	ret

00000bee <_Z11setTimeZonei>:
 * @param[in] key : int, user input
 *
 * @return key
 */
int setTimeZone(int key)
{
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
	int input = changeTimeZone(key);
     bf2:	0e 94 c3 05 	call	0xb86	; 0xb86 <_Z14changeTimeZonei>
     bf6:	ec 01       	movw	r28, r24
	lcd.setCursor(0,0);
     bf8:	40 e0       	ldi	r20, 0x00	; 0
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	84 ed       	ldi	r24, 0xD4	; 212
     bfe:	94 e0       	ldi	r25, 0x04	; 4
     c00:	0e 94 8d 14 	call	0x291a	; 0x291a <_ZN7hd447809setCursorEhh>
	lcd.print(CITIES[tz].name);
     c04:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <tz>
     c08:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <tz+0x1>
     c0c:	2e e0       	ldi	r18, 0x0E	; 14
     c0e:	28 9f       	mul	r18, r24
     c10:	b0 01       	movw	r22, r0
     c12:	29 9f       	mul	r18, r25
     c14:	70 0d       	add	r23, r0
     c16:	11 24       	eor	r1, r1
     c18:	64 5d       	subi	r22, 0xD4	; 212
     c1a:	7b 4f       	sbci	r23, 0xFB	; 251
     c1c:	84 ed       	ldi	r24, 0xD4	; 212
     c1e:	94 e0       	ldi	r25, 0x04	; 4
     c20:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <_ZN5Print5printERK6String>
	lcd.setCursor(0,1);
     c24:	41 e0       	ldi	r20, 0x01	; 1
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	84 ed       	ldi	r24, 0xD4	; 212
     c2a:	94 e0       	ldi	r25, 0x04	; 4
     c2c:	0e 94 8d 14 	call	0x291a	; 0x291a <_ZN7hd447809setCursorEhh>
	printhhmmss(zeitTimeZone);
     c30:	8d e5       	ldi	r24, 0x5D	; 93
     c32:	93 e0       	ldi	r25, 0x03	; 3
     c34:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_Z11printhhmmssR4Zeit>
	//lcd.setCursor(11,0);
	//printddmmyyyy(datumTimeZone);
	return input;
}
     c38:	ce 01       	movw	r24, r28
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	08 95       	ret

00000c40 <_Z17callibratePointerv>:
 * @brief set zero position of the three pointer
 *
 */
void callibratePointer() 
{	
	analogWrite(En_Motor,0);
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <En_Motor>
     c48:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <analogWrite>
	lcd.clear();
     c4c:	84 ed       	ldi	r24, 0xD4	; 212
     c4e:	94 e0       	ldi	r25, 0x04	; 4
     c50:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN7hd447805clearEv>
	lcd.print("Zeiger kalibrieren");
     c54:	62 e8       	ldi	r22, 0x82	; 130
     c56:	71 e0       	ldi	r23, 0x01	; 1
     c58:	84 ed       	ldi	r24, 0xD4	; 212
     c5a:	94 e0       	ldi	r25, 0x04	; 4
     c5c:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_ZN5Print5printEPKc>
	delay(2000);
     c60:	60 ed       	ldi	r22, 0xD0	; 208
     c62:	77 e0       	ldi	r23, 0x07	; 7
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <delay>
	lcd.clear();
     c6c:	84 ed       	ldi	r24, 0xD4	; 212
     c6e:	94 e0       	ldi	r25, 0x04	; 4
     c70:	0c 94 87 14 	jmp	0x290e	; 0x290e <_ZN7hd447805clearEv>

00000c74 <_Z7advancev>:
}

void advance()//Motor Forward
{
	digitalWrite(Dir_Motor,LOW);
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Dir_Motor>
     c7a:	0e 94 0b 28 	call	0x5016	; 0x5016 <digitalWrite>
	analogWrite(En_Motor,val_output);
     c7e:	60 91 01 04 	lds	r22, 0x0401	; 0x800401 <val_output>
     c82:	70 91 02 04 	lds	r23, 0x0402	; 0x800402 <val_output+0x1>
     c86:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <val_output+0x2>
     c8a:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <val_output+0x3>
     c8e:	0e 94 28 1a 	call	0x3450	; 0x3450 <__fixsfsi>
     c92:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <En_Motor>
     c96:	0c 94 fa 26 	jmp	0x4df4	; 0x4df4 <analogWrite>

00000c9a <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     c9a:	26 e0       	ldi	r18, 0x06	; 6
     c9c:	40 e8       	ldi	r20, 0x80	; 128
     c9e:	55 e2       	ldi	r21, 0x25	; 37
     ca0:	60 e0       	ldi	r22, 0x00	; 0
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	86 e1       	ldi	r24, 0x16	; 22
     ca6:	96 e0       	ldi	r25, 0x06	; 6
     ca8:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <_ZN14HardwareSerial5beginEmh>
 * \return void
 */
void setup()
{
	Serial1.begin(9600);
	Serial.begin(9600);
     cac:	40 e8       	ldi	r20, 0x80	; 128
     cae:	55 e2       	ldi	r21, 0x25	; 37
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	85 ec       	ldi	r24, 0xC5	; 197
     cb6:	95 e0       	ldi	r25, 0x05	; 5
     cb8:	0e 94 89 1c 	call	0x3912	; 0x3912 <_ZN7Serial_5beginEm>
	//LCD konfigurieren
	lcd.begin(16, 2);
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	42 e0       	ldi	r20, 0x02	; 2
     cc0:	60 e1       	ldi	r22, 0x10	; 16
     cc2:	84 ed       	ldi	r24, 0xD4	; 212
     cc4:	94 e0       	ldi	r25, 0x04	; 4
     cc6:	0e 94 b3 14 	call	0x2966	; 0x2966 <_ZN7hd447805beginEhhh>
	lcd.noBacklight();
     cca:	84 ed       	ldi	r24, 0xD4	; 212
     ccc:	94 e0       	ldi	r25, 0x04	; 4
     cce:	0e 94 48 14 	call	0x2890	; 0x2890 <_ZN7hd4478011noBacklightEv>
	lcd.noCursor();
     cd2:	84 ed       	ldi	r24, 0xD4	; 212
     cd4:	94 e0       	ldi	r25, 0x04	; 4
     cd6:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <_ZN7hd447808noCursorEv>
	lcd.home();
     cda:	84 ed       	ldi	r24, 0xD4	; 212
     cdc:	94 e0       	ldi	r25, 0x04	; 4
     cde:	0e 94 8a 14 	call	0x2914	; 0x2914 <_ZN7hd447804homeEv>
	lcd.print("Romeo V2.2 Watch");
     ce2:	65 e9       	ldi	r22, 0x95	; 149
     ce4:	71 e0       	ldi	r23, 0x01	; 1
     ce6:	84 ed       	ldi	r24, 0xD4	; 212
     ce8:	94 e0       	ldi	r25, 0x04	; 4
     cea:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
     cee:	41 e0       	ldi	r20, 0x01	; 1
     cf0:	60 e0       	ldi	r22, 0x00	; 0
     cf2:	84 ed       	ldi	r24, 0xD4	; 212
     cf4:	94 e0       	ldi	r25, 0x04	; 4
     cf6:	0e 94 8d 14 	call	0x291a	; 0x291a <_ZN7hd447809setCursorEhh>
	lcd.print("Coray / Bruno");
     cfa:	66 ea       	ldi	r22, 0xA6	; 166
     cfc:	71 e0       	ldi	r23, 0x01	; 1
     cfe:	84 ed       	ldi	r24, 0xD4	; 212
     d00:	94 e0       	ldi	r25, 0x04	; 4
     d02:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_ZN5Print5printEPKc>
	while(millis()<3000);
     d06:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <millis>
     d0a:	68 3b       	cpi	r22, 0xB8	; 184
     d0c:	7b 40       	sbci	r23, 0x0B	; 11
     d0e:	81 05       	cpc	r24, r1
     d10:	91 05       	cpc	r25, r1
     d12:	c8 f3       	brcs	.-14     	; 0xd06 <setup+0x6c>
	lcd.clear();
     d14:	84 ed       	ldi	r24, 0xD4	; 212
     d16:	94 e0       	ldi	r25, 0x04	; 4
     d18:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN7hd447805clearEv>
	
	zeitTimeZone = zeitGMT;
     d1c:	88 e0       	ldi	r24, 0x08	; 8
     d1e:	e5 e6       	ldi	r30, 0x65	; 101
     d20:	f3 e0       	ldi	r31, 0x03	; 3
     d22:	ad e5       	ldi	r26, 0x5D	; 93
     d24:	b3 e0       	ldi	r27, 0x03	; 3
     d26:	01 90       	ld	r0, Z+
     d28:	0d 92       	st	X+, r0
     d2a:	8a 95       	dec	r24
     d2c:	e1 f7       	brne	.-8      	; 0xd26 <setup+0x8c>
	datumTimeZone = datumGMT;
     d2e:	88 e0       	ldi	r24, 0x08	; 8
     d30:	e2 e4       	ldi	r30, 0x42	; 66
     d32:	f3 e0       	ldi	r31, 0x03	; 3
     d34:	aa e3       	ldi	r26, 0x3A	; 58
     d36:	b3 e0       	ldi	r27, 0x03	; 3
     d38:	01 90       	ld	r0, Z+
     d3a:	0d 92       	st	X+, r0
     d3c:	8a 95       	dec	r24
     d3e:	e1 f7       	brne	.-8      	; 0xd38 <setup+0x9e>
	
	//Pin definitionen
	pinMode(btnPin, INPUT);
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	88 e0       	ldi	r24, 0x08	; 8
     d44:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <pinMode>
	pinMode(tempSensor,INPUT);
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	86 e1       	ldi	r24, 0x16	; 22
     d4c:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <pinMode>
	pinMode(Dir_Motor, OUTPUT);
     d50:	61 e0       	ldi	r22, 0x01	; 1
     d52:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Dir_Motor>
     d56:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <pinMode>
	pinMode(En_Motor, OUTPUT);
     d5a:	61 e0       	ldi	r22, 0x01	; 1
     d5c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <En_Motor>
     d60:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <pinMode>
	pinMode(encoder0pinB,INPUT);
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	87 e0       	ldi	r24, 0x07	; 7
     d68:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <pinMode>
	
	//PID-Regler
	Setpoint = 0; //Setpint 15 works
     d6c:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <Setpoint>
     d70:	10 92 fe 03 	sts	0x03FE, r1	; 0x8003fe <Setpoint+0x1>
     d74:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <Setpoint+0x2>
     d78:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <Setpoint+0x3>
	myPID.SetMode(AUTOMATIC);//PID is set to automatic mode
     d7c:	61 e0       	ldi	r22, 0x01	; 1
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	8d eb       	ldi	r24, 0xBD	; 189
     d82:	93 e0       	ldi	r25, 0x03	; 3
     d84:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <_ZN3PID7SetModeEi>
	myPID.SetSampleTime(100);//Set PID sampling frequency is 100ms
     d88:	64 e6       	ldi	r22, 0x64	; 100
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	8d eb       	ldi	r24, 0xBD	; 189
     d8e:	93 e0       	ldi	r25, 0x03	; 3
     d90:	0e 94 54 11 	call	0x22a8	; 0x22a8 <_ZN3PID13SetSampleTimeEi>
	attachInterrupt(digitalPinToInterrupt(7), wheelSpeed, CHANGE); //Pin 7 -> Interrupt 4
     d94:	41 e0       	ldi	r20, 0x01	; 1
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	69 ec       	ldi	r22, 0xC9	; 201
     d9a:	71 e0       	ldi	r23, 0x01	; 1
     d9c:	84 e0       	ldi	r24, 0x04	; 4
     d9e:	0e 94 9e 24 	call	0x493c	; 0x493c <attachInterrupt>
	
	previousMillis = millis();
     da2:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <millis>
     da6:	60 93 b9 03 	sts	0x03B9, r22	; 0x8003b9 <previousMillis>
     daa:	70 93 ba 03 	sts	0x03BA, r23	; 0x8003ba <previousMillis+0x1>
     dae:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <previousMillis+0x2>
     db2:	90 93 bc 03 	sts	0x03BC, r25	; 0x8003bc <previousMillis+0x3>
     db6:	08 95       	ret

00000db8 <_GLOBAL__sub_I_lcd>:
		break;
	}
	if(newmenu >= 0) menu = newmenu;

	} //else Klammer
}
     db8:	6f 92       	push	r6
     dba:	7f 92       	push	r7
     dbc:	8f 92       	push	r8
     dbe:	9f 92       	push	r9
     dc0:	af 92       	push	r10
     dc2:	bf 92       	push	r11
     dc4:	cf 92       	push	r12
     dc6:	df 92       	push	r13
     dc8:	ef 92       	push	r14
     dca:	ff 92       	push	r15
     dcc:	0f 93       	push	r16
     dce:	1f 93       	push	r17
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
// ====================

//	-- Automagic / auto-detect constructors --

// Auto find next instance and auto config pin mapping
hd44780_I2Cexp(){ _addr = 0; _expType = I2Cexp_UNKNOWN;}
     dd4:	84 ed       	ldi	r24, 0xD4	; 212
     dd6:	94 e0       	ldi	r25, 0x04	; 4
     dd8:	0e 94 13 14 	call	0x2826	; 0x2826 <_ZN7hd44780C1Ev>
     ddc:	e4 ed       	ldi	r30, 0xD4	; 212
     dde:	f4 e0       	ldi	r31, 0x04	; 4
     de0:	82 e5       	ldi	r24, 0x52	; 82
     de2:	92 e0       	ldi	r25, 0x02	; 2
     de4:	91 83       	std	Z+1, r25	; 0x01
     de6:	80 83       	st	Z, r24
     de8:	10 a2       	std	Z+32, r1	; 0x20
     dea:	11 a2       	std	Z+33, r1	; 0x21

const struct CITY_TIME_DIF CITIES [] {
	{"London", 0, "LON"},{"New-York", -5, "NEY"},{"Paris", 1, "PAR"},{ "Tokyo", 9, "TOK"},
	{"Hongkong", 8, "HNK"},{"Los Angeles", -8, "LAN"},{"Chicago", -6, "CHI"},{"Seoul", 9, "SEO"},
	{ "Bruessel",  1, "BRU"},{"Washington",  -5, "WAS"},{"Singapur", 8, "SIN"},{"Sydney", 11, "SYD"}
	};
     dec:	64 eb       	ldi	r22, 0xB4	; 180
     dee:	71 e0       	ldi	r23, 0x01	; 1
     df0:	8c e2       	ldi	r24, 0x2C	; 44
     df2:	94 e0       	ldi	r25, 0x04	; 4
     df4:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <_ZN6StringC1EPKc>
     df8:	cc e2       	ldi	r28, 0x2C	; 44
     dfa:	d4 e0       	ldi	r29, 0x04	; 4
     dfc:	1f 82       	std	Y+7, r1	; 0x07
     dfe:	1e 82       	std	Y+6, r1	; 0x06
     e00:	6b eb       	ldi	r22, 0xBB	; 187
     e02:	71 e0       	ldi	r23, 0x01	; 1
     e04:	84 e3       	ldi	r24, 0x34	; 52
     e06:	94 e0       	ldi	r25, 0x04	; 4
     e08:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <_ZN6StringC1EPKc>
     e0c:	6f eb       	ldi	r22, 0xBF	; 191
     e0e:	71 e0       	ldi	r23, 0x01	; 1
     e10:	8a e3       	ldi	r24, 0x3A	; 58
     e12:	94 e0       	ldi	r25, 0x04	; 4
     e14:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <_ZN6StringC1EPKc>
     e18:	8b ef       	ldi	r24, 0xFB	; 251
     e1a:	e8 2e       	mov	r14, r24
     e1c:	ff 24       	eor	r15, r15
     e1e:	fa 94       	dec	r15
     e20:	fd 8a       	std	Y+21, r15	; 0x15
     e22:	ec 8a       	std	Y+20, r14	; 0x14
     e24:	68 ec       	ldi	r22, 0xC8	; 200
     e26:	71 e0       	ldi	r23, 0x01	; 1
     e28:	82 e4       	ldi	r24, 0x42	; 66
     e2a:	94 e0       	ldi	r25, 0x04	; 4
     e2c:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <_ZN6StringC1EPKc>
     e30:	6c ec       	ldi	r22, 0xCC	; 204
     e32:	71 e0       	ldi	r23, 0x01	; 1
     e34:	88 e4       	ldi	r24, 0x48	; 72
     e36:	94 e0       	ldi	r25, 0x04	; 4
     e38:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <_ZN6StringC1EPKc>
     e3c:	66 24       	eor	r6, r6
     e3e:	63 94       	inc	r6
     e40:	71 2c       	mov	r7, r1
     e42:	7b a2       	std	Y+35, r7	; 0x23
     e44:	6a a2       	std	Y+34, r6	; 0x22
     e46:	62 ed       	ldi	r22, 0xD2	; 210
     e48:	71 e0       	ldi	r23, 0x01	; 1
     e4a:	80 e5       	ldi	r24, 0x50	; 80
     e4c:	94 e0       	ldi	r25, 0x04	; 4
     e4e:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <_ZN6StringC1EPKc>
     e52:	66 ed       	ldi	r22, 0xD6	; 214
     e54:	71 e0       	ldi	r23, 0x01	; 1
     e56:	86 e5       	ldi	r24, 0x56	; 86
     e58:	94 e0       	ldi	r25, 0x04	; 4
     e5a:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <_ZN6StringC1EPKc>
     e5e:	29 e0       	ldi	r18, 0x09	; 9
     e60:	82 2e       	mov	r8, r18
     e62:	91 2c       	mov	r9, r1
     e64:	99 aa       	std	Y+49, r9	; 0x31
     e66:	88 aa       	std	Y+48, r8	; 0x30
     e68:	6c ed       	ldi	r22, 0xDC	; 220
     e6a:	71 e0       	ldi	r23, 0x01	; 1
     e6c:	8e e5       	ldi	r24, 0x5E	; 94
     e6e:	94 e0       	ldi	r25, 0x04	; 4
     e70:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <_ZN6StringC1EPKc>
     e74:	60 ee       	ldi	r22, 0xE0	; 224
     e76:	71 e0       	ldi	r23, 0x01	; 1
     e78:	84 e6       	ldi	r24, 0x64	; 100
     e7a:	94 e0       	ldi	r25, 0x04	; 4
     e7c:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <_ZN6StringC1EPKc>
     e80:	08 e0       	ldi	r16, 0x08	; 8
     e82:	10 e0       	ldi	r17, 0x00	; 0
     e84:	1f af       	std	Y+63, r17	; 0x3f
     e86:	0e af       	std	Y+62, r16	; 0x3e
     e88:	69 ee       	ldi	r22, 0xE9	; 233
     e8a:	71 e0       	ldi	r23, 0x01	; 1
     e8c:	8c e6       	ldi	r24, 0x6C	; 108
     e8e:	94 e0       	ldi	r25, 0x04	; 4
     e90:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <_ZN6StringC1EPKc>
     e94:	6d ee       	ldi	r22, 0xED	; 237
     e96:	71 e0       	ldi	r23, 0x01	; 1
     e98:	82 e7       	ldi	r24, 0x72	; 114
     e9a:	94 e0       	ldi	r25, 0x04	; 4
     e9c:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <_ZN6StringC1EPKc>
     ea0:	88 ef       	ldi	r24, 0xF8	; 248
     ea2:	9f ef       	ldi	r25, 0xFF	; 255
     ea4:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <_ZL6CITIES+0x4d>
     ea8:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <_ZL6CITIES+0x4c>
     eac:	69 ef       	ldi	r22, 0xF9	; 249
     eae:	71 e0       	ldi	r23, 0x01	; 1
     eb0:	8a e7       	ldi	r24, 0x7A	; 122
     eb2:	94 e0       	ldi	r25, 0x04	; 4
     eb4:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <_ZN6StringC1EPKc>
     eb8:	6d ef       	ldi	r22, 0xFD	; 253
     eba:	71 e0       	ldi	r23, 0x01	; 1
     ebc:	80 e8       	ldi	r24, 0x80	; 128
     ebe:	94 e0       	ldi	r25, 0x04	; 4
     ec0:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <_ZN6StringC1EPKc>
     ec4:	8a ef       	ldi	r24, 0xFA	; 250
     ec6:	9f ef       	ldi	r25, 0xFF	; 255
     ec8:	90 93 87 04 	sts	0x0487, r25	; 0x800487 <_ZL6CITIES+0x5b>
     ecc:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <_ZL6CITIES+0x5a>
     ed0:	65 e0       	ldi	r22, 0x05	; 5
     ed2:	72 e0       	ldi	r23, 0x02	; 2
     ed4:	88 e8       	ldi	r24, 0x88	; 136
     ed6:	94 e0       	ldi	r25, 0x04	; 4
     ed8:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <_ZN6StringC1EPKc>
     edc:	69 e0       	ldi	r22, 0x09	; 9
     ede:	72 e0       	ldi	r23, 0x02	; 2
     ee0:	8e e8       	ldi	r24, 0x8E	; 142
     ee2:	94 e0       	ldi	r25, 0x04	; 4
     ee4:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <_ZN6StringC1EPKc>
     ee8:	90 92 95 04 	sts	0x0495, r9	; 0x800495 <_ZL6CITIES+0x69>
     eec:	80 92 94 04 	sts	0x0494, r8	; 0x800494 <_ZL6CITIES+0x68>
     ef0:	6f e0       	ldi	r22, 0x0F	; 15
     ef2:	72 e0       	ldi	r23, 0x02	; 2
     ef4:	86 e9       	ldi	r24, 0x96	; 150
     ef6:	94 e0       	ldi	r25, 0x04	; 4
     ef8:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <_ZN6StringC1EPKc>
     efc:	63 e1       	ldi	r22, 0x13	; 19
     efe:	72 e0       	ldi	r23, 0x02	; 2
     f00:	8c e9       	ldi	r24, 0x9C	; 156
     f02:	94 e0       	ldi	r25, 0x04	; 4
     f04:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <_ZN6StringC1EPKc>
     f08:	70 92 a3 04 	sts	0x04A3, r7	; 0x8004a3 <_ZL6CITIES+0x77>
     f0c:	60 92 a2 04 	sts	0x04A2, r6	; 0x8004a2 <_ZL6CITIES+0x76>
     f10:	6c e1       	ldi	r22, 0x1C	; 28
     f12:	72 e0       	ldi	r23, 0x02	; 2
     f14:	84 ea       	ldi	r24, 0xA4	; 164
     f16:	94 e0       	ldi	r25, 0x04	; 4
     f18:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <_ZN6StringC1EPKc>
     f1c:	60 e2       	ldi	r22, 0x20	; 32
     f1e:	72 e0       	ldi	r23, 0x02	; 2
     f20:	8a ea       	ldi	r24, 0xAA	; 170
     f22:	94 e0       	ldi	r25, 0x04	; 4
     f24:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <_ZN6StringC1EPKc>
     f28:	f0 92 b1 04 	sts	0x04B1, r15	; 0x8004b1 <_ZL6CITIES+0x85>
     f2c:	e0 92 b0 04 	sts	0x04B0, r14	; 0x8004b0 <_ZL6CITIES+0x84>
     f30:	6b e2       	ldi	r22, 0x2B	; 43
     f32:	72 e0       	ldi	r23, 0x02	; 2
     f34:	82 eb       	ldi	r24, 0xB2	; 178
     f36:	94 e0       	ldi	r25, 0x04	; 4
     f38:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <_ZN6StringC1EPKc>
     f3c:	6f e2       	ldi	r22, 0x2F	; 47
     f3e:	72 e0       	ldi	r23, 0x02	; 2
     f40:	88 eb       	ldi	r24, 0xB8	; 184
     f42:	94 e0       	ldi	r25, 0x04	; 4
     f44:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <_ZN6StringC1EPKc>
     f48:	10 93 bf 04 	sts	0x04BF, r17	; 0x8004bf <_ZL6CITIES+0x93>
     f4c:	00 93 be 04 	sts	0x04BE, r16	; 0x8004be <_ZL6CITIES+0x92>
     f50:	68 e3       	ldi	r22, 0x38	; 56
     f52:	72 e0       	ldi	r23, 0x02	; 2
     f54:	80 ec       	ldi	r24, 0xC0	; 192
     f56:	94 e0       	ldi	r25, 0x04	; 4
     f58:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <_ZN6StringC1EPKc>
     f5c:	6c e3       	ldi	r22, 0x3C	; 60
     f5e:	72 e0       	ldi	r23, 0x02	; 2
     f60:	86 ec       	ldi	r24, 0xC6	; 198
     f62:	94 e0       	ldi	r25, 0x04	; 4
     f64:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <_ZN6StringC1EPKc>
     f68:	8b e0       	ldi	r24, 0x0B	; 11
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <_ZL6CITIES+0xa1>
     f70:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <_ZL6CITIES+0xa0>
     f74:	63 e4       	ldi	r22, 0x43	; 67
     f76:	72 e0       	ldi	r23, 0x02	; 2
     f78:	8e ec       	ldi	r24, 0xCE	; 206
     f7a:	94 e0       	ldi	r25, 0x04	; 4
     f7c:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <_ZN6StringC1EPKc>
#endif

class dht
{
public:
    dht() { _disableIRQ = false; };
     f80:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <DHT+0xd>
boolean motorOn = false;

double val_output;//Power supplied to the motor PWM value.
double Setpoint;
double Kp=3, Ki=5, Kd=0;
PID myPID(&abs_duration, &val_output, &Setpoint, Kp, Ki, Kd, DIRECT);
     f84:	a0 90 0c 01 	lds	r10, 0x010C	; 0x80010c <Ki>
     f88:	b0 90 0d 01 	lds	r11, 0x010D	; 0x80010d <Ki+0x1>
     f8c:	c0 90 0e 01 	lds	r12, 0x010E	; 0x80010e <Ki+0x2>
     f90:	d0 90 0f 01 	lds	r13, 0x010F	; 0x80010f <Ki+0x3>
     f94:	e0 90 10 01 	lds	r14, 0x0110	; 0x800110 <Kp>
     f98:	f0 90 11 01 	lds	r15, 0x0111	; 0x800111 <Kp+0x1>
     f9c:	00 91 12 01 	lds	r16, 0x0112	; 0x800112 <Kp+0x2>
     fa0:	10 91 13 01 	lds	r17, 0x0113	; 0x800113 <Kp+0x3>
     fa4:	1f 92       	push	r1
     fa6:	1f 92       	push	r1
     fa8:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <Kd+0x3>
     fac:	8f 93       	push	r24
     fae:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <Kd+0x2>
     fb2:	8f 93       	push	r24
     fb4:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <Kd+0x1>
     fb8:	8f 93       	push	r24
     fba:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <Kd>
     fbe:	8f 93       	push	r24
     fc0:	2d ef       	ldi	r18, 0xFD	; 253
     fc2:	33 e0       	ldi	r19, 0x03	; 3
     fc4:	41 e0       	ldi	r20, 0x01	; 1
     fc6:	54 e0       	ldi	r21, 0x04	; 4
     fc8:	66 e0       	ldi	r22, 0x06	; 6
     fca:	74 e0       	ldi	r23, 0x04	; 4
     fcc:	8d eb       	ldi	r24, 0xBD	; 189
     fce:	93 e0       	ldi	r25, 0x03	; 3
     fd0:	0e 94 ac 12 	call	0x2558	; 0x2558 <_ZN3PIDC1EPdS0_S0_dddi>
	int hh_;
	int mm_;
	int ss_;
	int set_;
public:
	Zeit(int h, int m, int s){ hh_=h; mm_=m; ss_=s; set_ =0;};
     fd4:	e5 e6       	ldi	r30, 0x65	; 101
     fd6:	f3 e0       	ldi	r31, 0x03	; 3
     fd8:	61 e1       	ldi	r22, 0x11	; 17
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	71 83       	std	Z+1, r23	; 0x01
     fde:	60 83       	st	Z, r22
     fe0:	4b e3       	ldi	r20, 0x3B	; 59
     fe2:	50 e0       	ldi	r21, 0x00	; 0
     fe4:	53 83       	std	Z+3, r21	; 0x03
     fe6:	42 83       	std	Z+2, r20	; 0x02
     fe8:	2d e2       	ldi	r18, 0x2D	; 45
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	35 83       	std	Z+5, r19	; 0x05
     fee:	24 83       	std	Z+4, r18	; 0x04
     ff0:	17 82       	std	Z+7, r1	; 0x07
     ff2:	16 82       	std	Z+6, r1	; 0x06
     ff4:	ed e5       	ldi	r30, 0x5D	; 93
     ff6:	f3 e0       	ldi	r31, 0x03	; 3
     ff8:	8c e0       	ldi	r24, 0x0C	; 12
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	91 83       	std	Z+1, r25	; 0x01
     ffe:	80 83       	st	Z, r24
    1000:	13 82       	std	Z+3, r1	; 0x03
    1002:	12 82       	std	Z+2, r1	; 0x02
    1004:	15 82       	std	Z+5, r1	; 0x05
    1006:	14 82       	std	Z+4, r1	; 0x04
    1008:	17 82       	std	Z+7, r1	; 0x07
    100a:	16 82       	std	Z+6, r1	; 0x06
    100c:	e5 e5       	ldi	r30, 0x55	; 85
    100e:	f3 e0       	ldi	r31, 0x03	; 3
    1010:	71 83       	std	Z+1, r23	; 0x01
    1012:	60 83       	st	Z, r22
    1014:	53 83       	std	Z+3, r21	; 0x03
    1016:	42 83       	std	Z+2, r20	; 0x02
    1018:	35 83       	std	Z+5, r19	; 0x05
    101a:	24 83       	std	Z+4, r18	; 0x04
    101c:	17 82       	std	Z+7, r1	; 0x07
    101e:	16 82       	std	Z+6, r1	; 0x06
    1020:	ed e4       	ldi	r30, 0x4D	; 77
    1022:	f3 e0       	ldi	r31, 0x03	; 3
    1024:	22 e1       	ldi	r18, 0x12	; 18
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	31 83       	std	Z+1, r19	; 0x01
    102a:	20 83       	st	Z, r18
    102c:	13 82       	std	Z+3, r1	; 0x03
    102e:	12 82       	std	Z+2, r1	; 0x02
    1030:	15 82       	std	Z+5, r1	; 0x05
    1032:	14 82       	std	Z+4, r1	; 0x04
    1034:	17 82       	std	Z+7, r1	; 0x07
    1036:	16 82       	std	Z+6, r1	; 0x06
	int YYYY_;
	int MM_;
	int DD_;
	int set_;
public:
	Datum(int d, int m, int y){DD_=d; MM_=m;YYYY_=y; set_ = 0;};
    1038:	e2 e4       	ldi	r30, 0x42	; 66
    103a:	f3 e0       	ldi	r31, 0x03	; 3
    103c:	4e e0       	ldi	r20, 0x0E	; 14
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	55 83       	std	Z+5, r21	; 0x05
    1042:	44 83       	std	Z+4, r20	; 0x04
    1044:	93 83       	std	Z+3, r25	; 0x03
    1046:	82 83       	std	Z+2, r24	; 0x02
    1048:	23 ee       	ldi	r18, 0xE3	; 227
    104a:	37 e0       	ldi	r19, 0x07	; 7
    104c:	31 83       	std	Z+1, r19	; 0x01
    104e:	20 83       	st	Z, r18
    1050:	17 82       	std	Z+7, r1	; 0x07
    1052:	16 82       	std	Z+6, r1	; 0x06
    1054:	ea e3       	ldi	r30, 0x3A	; 58
    1056:	f3 e0       	ldi	r31, 0x03	; 3
    1058:	75 82       	std	Z+5, r7	; 0x05
    105a:	64 82       	std	Z+4, r6	; 0x04
    105c:	93 82       	std	Z+3, r9	; 0x03
    105e:	82 82       	std	Z+2, r8	; 0x02
    1060:	60 ed       	ldi	r22, 0xD0	; 208
    1062:	77 e0       	ldi	r23, 0x07	; 7
    1064:	71 83       	std	Z+1, r23	; 0x01
    1066:	60 83       	st	Z, r22
    1068:	17 82       	std	Z+7, r1	; 0x07
    106a:	16 82       	std	Z+6, r1	; 0x06
    106c:	e2 e3       	ldi	r30, 0x32	; 50
    106e:	f3 e0       	ldi	r31, 0x03	; 3
    1070:	55 83       	std	Z+5, r21	; 0x05
    1072:	44 83       	std	Z+4, r20	; 0x04
    1074:	93 83       	std	Z+3, r25	; 0x03
    1076:	82 83       	std	Z+2, r24	; 0x02
    1078:	31 83       	std	Z+1, r19	; 0x01
    107a:	20 83       	st	Z, r18
    107c:	17 82       	std	Z+7, r1	; 0x07
    107e:	16 82       	std	Z+6, r1	; 0x06
		break;
	}
	if(newmenu >= 0) menu = newmenu;

	} //else Klammer
}
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	ff 90       	pop	r15
    1096:	ef 90       	pop	r14
    1098:	df 90       	pop	r13
    109a:	cf 90       	pop	r12
    109c:	bf 90       	pop	r11
    109e:	af 90       	pop	r10
    10a0:	9f 90       	pop	r9
    10a2:	8f 90       	pop	r8
    10a4:	7f 90       	pop	r7
    10a6:	6f 90       	pop	r6
    10a8:	08 95       	ret

000010aa <_GLOBAL__sub_D_lcd>:
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	c4 ed       	ldi	r28, 0xD4	; 212
    10b0:	d4 e0       	ldi	r29, 0x04	; 4
	String name;
	int timediff;
	String initials;
};

const struct CITY_TIME_DIF CITIES [] {
    10b2:	2e 97       	sbiw	r28, 0x0e	; 14


hd44780_I2Cexp lcd;

//Strukt um Städte und deren Zweitverschiebung zu GMT (London) abzuspeichern
struct CITY_TIME_DIF {
    10b4:	ce 01       	movw	r24, r28
    10b6:	08 96       	adiw	r24, 0x08	; 8
    10b8:	0e 94 63 28 	call	0x50c6	; 0x50c6 <_ZN6StringD1Ev>
    10bc:	ce 01       	movw	r24, r28
    10be:	0e 94 63 28 	call	0x50c6	; 0x50c6 <_ZN6StringD1Ev>
	String name;
	int timediff;
	String initials;
};

const struct CITY_TIME_DIF CITIES [] {
    10c2:	84 e0       	ldi	r24, 0x04	; 4
    10c4:	cc 32       	cpi	r28, 0x2C	; 44
    10c6:	d8 07       	cpc	r29, r24
    10c8:	a1 f7       	brne	.-24     	; 0x10b2 <_GLOBAL__sub_D_lcd+0x8>
		break;
	}
	if(newmenu >= 0) menu = newmenu;

	} //else Klammer
}
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	08 95       	ret

000010d0 <_ZN14hd44780_I2Cexp14iosetBacklightEh>:
}

// iosetBacklight()  - set backlight brightness
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	fc 01       	movw	r30, r24
{
	if(!_bl) // backlight control?
    10d6:	81 a5       	ldd	r24, Z+41	; 0x29
    10d8:	88 23       	and	r24, r24
    10da:	71 f1       	breq	.+92     	; 0x1138 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x68>
    10dc:	92 a5       	ldd	r25, Z+42	; 0x2a
		return(hd44780::RV_ENOTSUP); // not backlight control support

	// dimvalue 0 is backlight off any other dimvalue is backlight on
	// configure backlight state mask according to active level
	if(((dimvalue) && (_blLevel == HIGH)) || 
    10de:	66 23       	and	r22, r22
    10e0:	19 f0       	breq	.+6      	; 0x10e8 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x18>
    10e2:	91 30       	cpi	r25, 0x01	; 1
    10e4:	29 f4       	brne	.+10     	; 0x10f0 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x1c>
			((dimvalue == 0) && (_blLevel == LOW)))
    10e8:	91 11       	cpse	r25, r1
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
	{
		_blCurState = _bl;
    10ec:	83 a7       	std	Z+43, r24	; 0x2b
    10ee:	01 c0       	rjmp	.+2      	; 0x10f2 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x22>
	}
	else 
	{
		_blCurState = 0;
    10f0:	13 a6       	std	Z+43, r1	; 0x2b
    10f2:	ef 01       	movw	r28, r30
	}
	Wire.beginTransmission(_addr);
    10f4:	60 a1       	ldd	r22, Z+32	; 0x20
    10f6:	8f e6       	ldi	r24, 0x6F	; 111
    10f8:	95 e0       	ldi	r25, 0x05	; 5
    10fa:	0e 94 b9 18 	call	0x3172	; 0x3172 <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
    10fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1100:	82 30       	cpi	r24, 0x02	; 2
    1102:	31 f4       	brne	.+12     	; 0x1110 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x40>
	{
		Wire.write(9); // point to GPIO
    1104:	69 e0       	ldi	r22, 0x09	; 9
    1106:	70 e0       	ldi	r23, 0x00	; 0
    1108:	8f e6       	ldi	r24, 0x6F	; 111
    110a:	95 e0       	ldi	r25, 0x05	; 5
    110c:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7TwoWire5writeEi>
	}
	Wire.write( _blCurState );
    1110:	6b a5       	ldd	r22, Y+43	; 0x2b
    1112:	8f e6       	ldi	r24, 0x6F	; 111
    1114:	95 e0       	ldi	r25, 0x05	; 5
    1116:	0e 94 68 18 	call	0x30d0	; 0x30d0 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    111a:	8f e6       	ldi	r24, 0x6F	; 111
    111c:	95 e0       	ldi	r25, 0x05	; 5
    111e:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN7TwoWire15endTransmissionEv>
    1122:	21 e0       	ldi	r18, 0x01	; 1
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	81 11       	cpse	r24, r1
    1128:	02 c0       	rjmp	.+4      	; 0x112e <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x5e>
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	88 27       	eor	r24, r24
    1130:	99 27       	eor	r25, r25
    1132:	82 1b       	sub	r24, r18
    1134:	93 0b       	sbc	r25, r19
    1136:	02 c0       	rjmp	.+4      	; 0x113c <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x6c>
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
{
	if(!_bl) // backlight control?
		return(hd44780::RV_ENOTSUP); // not backlight control support
    1138:	8d ef       	ldi	r24, 0xFD	; 253
    113a:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write( _blCurState );
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR); // all is good
}
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	08 95       	ret

00001142 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>:
	return(0);
}


// write4bits - send a nibble to the LCD through i/o expander port
void write4bits(uint8_t value, hd44780::iotype type ) 
    1142:	cf 93       	push	r28
    1144:	fc 01       	movw	r30, r24
{
uint8_t gpioValue =  _blCurState;
    1146:	c3 a5       	ldd	r28, Z+43	; 0x2b
   
	// convert the value to an i/o expander port value
	// based on pin mappings
	if(value & (1 << 0))
    1148:	60 ff       	sbrs	r22, 0
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0xe>
		gpioValue |= _d4;
    114c:	85 a1       	ldd	r24, Z+37	; 0x25
    114e:	c8 2b       	or	r28, r24

	if(value & (1 << 1))
    1150:	61 ff       	sbrs	r22, 1
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x16>
		gpioValue |= _d5;
    1154:	86 a1       	ldd	r24, Z+38	; 0x26
    1156:	c8 2b       	or	r28, r24

	if(value & (1 << 2))
    1158:	62 ff       	sbrs	r22, 2
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x1e>
		gpioValue |= _d6;
    115c:	87 a1       	ldd	r24, Z+39	; 0x27
    115e:	c8 2b       	or	r28, r24

	if(value & (1 << 3))
    1160:	63 ff       	sbrs	r22, 3
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x26>
		gpioValue |= _d7;
    1164:	80 a5       	ldd	r24, Z+40	; 0x28
    1166:	c8 2b       	or	r28, r24


	if(type == hd44780::HD44780_IOdata) 
    1168:	41 30       	cpi	r20, 0x01	; 1
    116a:	11 f4       	brne	.+4      	; 0x1170 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x2e>
	{
		gpioValue |= _rs; // set RS high to send to data reg
    116c:	82 a1       	ldd	r24, Z+34	; 0x22
    116e:	c8 2b       	or	r28, r24
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
    1170:	64 a1       	ldd	r22, Z+36	; 0x24
    1172:	6c 2b       	or	r22, r28
    1174:	70 e0       	ldi	r23, 0x00	; 0
    1176:	8f e6       	ldi	r24, 0x6F	; 111
    1178:	95 e0       	ldi	r25, 0x05	; 5
    117a:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7TwoWire5writeEi>
	Wire.write(gpioValue);		// with E LOW
    117e:	6c 2f       	mov	r22, r28
    1180:	8f e6       	ldi	r24, 0x6F	; 111
    1182:	95 e0       	ldi	r25, 0x05	; 5
}
    1184:	cf 91       	pop	r28
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
	Wire.write(gpioValue);		// with E LOW
    1186:	0c 94 68 18 	jmp	0x30d0	; 0x30d0 <_ZN7TwoWire5writeEh>

0000118a <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh>:
	return(rval);
}

// iowrite(type, value) - send either command or data byte to lcd
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
    118a:	8f 92       	push	r8
    118c:	9f 92       	push	r9
    118e:	af 92       	push	r10
    1190:	bf 92       	push	r11
    1192:	cf 92       	push	r12
    1194:	df 92       	push	r13
    1196:	ef 92       	push	r14
    1198:	ff 92       	push	r15
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	ec 01       	movw	r28, r24
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
    11a4:	88 a1       	ldd	r24, Y+32	; 0x20
    11a6:	88 23       	and	r24, r24
    11a8:	09 f4       	brne	.+2      	; 0x11ac <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x22>
    11aa:	50 c0       	rjmp	.+160    	; 0x124c <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
    11ac:	89 a1       	ldd	r24, Y+33	; 0x21
    11ae:	88 23       	and	r24, r24
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x2a>
    11b2:	4c c0       	rjmp	.+152    	; 0x124c <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
    11b4:	14 2f       	mov	r17, r20
    11b6:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
    11b8:	8c 8c       	ldd	r8, Y+28	; 0x1c
    11ba:	9d 8c       	ldd	r9, Y+29	; 0x1d
    11bc:	ae 8c       	ldd	r10, Y+30	; 0x1e
    11be:	bf 8c       	ldd	r11, Y+31	; 0x1f
    11c0:	c8 8c       	ldd	r12, Y+24	; 0x18
    11c2:	d9 8c       	ldd	r13, Y+25	; 0x19
    11c4:	ea 8c       	ldd	r14, Y+26	; 0x1a
    11c6:	fb 8c       	ldd	r15, Y+27	; 0x1b
    11c8:	8d e2       	ldi	r24, 0x2D	; 45
    11ca:	c8 1a       	sub	r12, r24
    11cc:	d1 08       	sbc	r13, r1
    11ce:	e1 08       	sbc	r14, r1
    11d0:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
    11d2:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <micros>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	8c 19       	sub	r24, r12
    11dc:	9d 09       	sbc	r25, r13
    11de:	ae 09       	sbc	r26, r14
    11e0:	bf 09       	sbc	r27, r15
    11e2:	88 15       	cp	r24, r8
    11e4:	99 05       	cpc	r25, r9
    11e6:	aa 05       	cpc	r26, r10
    11e8:	bb 05       	cpc	r27, r11
    11ea:	98 f3       	brcs	.-26     	; 0x11d2 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x48>
	 */

	waitReady(-45);
   
	// grab i2c bus
	Wire.beginTransmission(_addr);
    11ec:	68 a1       	ldd	r22, Y+32	; 0x20
    11ee:	8f e6       	ldi	r24, 0x6F	; 111
    11f0:	95 e0       	ldi	r25, 0x05	; 5
    11f2:	0e 94 b9 18 	call	0x3172	; 0x3172 <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
    11f6:	89 a1       	ldd	r24, Y+33	; 0x21
    11f8:	82 30       	cpi	r24, 0x02	; 2
    11fa:	31 f4       	brne	.+12     	; 0x1208 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x7e>
	{
		Wire.write(9); // point to GPIO
    11fc:	69 e0       	ldi	r22, 0x09	; 9
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	8f e6       	ldi	r24, 0x6F	; 111
    1202:	95 e0       	ldi	r25, 0x05	; 5
    1204:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7TwoWire5writeEi>
	}
	// send both nibbles in same i2c connection
	write4bits( (value >> 4), type );  // send upper nibble
    1208:	61 2f       	mov	r22, r17
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	84 e0       	ldi	r24, 0x04	; 4
    120e:	75 95       	asr	r23
    1210:	67 95       	ror	r22
    1212:	8a 95       	dec	r24
    1214:	e1 f7       	brne	.-8      	; 0x120e <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x84>
    1216:	40 2f       	mov	r20, r16
    1218:	ce 01       	movw	r24, r28
    121a:	0e 94 a1 08 	call	0x1142	; 0x1142 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	 * are used to reliably get the LCD and host in nibble sync
	 * with each other and to get the LCD into 4 bit mode.
	 * When sending a "4 bit command" only the upper nibble of
	 * of the 8 bit byte will presented on LCD signals D4-D7.
	 */
	if(type != hd44780::HD44780_IOcmd4bit)
    121e:	02 30       	cpi	r16, 0x02	; 2
    1220:	31 f0       	breq	.+12     	; 0x122e <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xa4>
	{
		write4bits( (value & 0x0F), type); // lower nibble, if not 4bit cmd
    1222:	61 2f       	mov	r22, r17
    1224:	6f 70       	andi	r22, 0x0F	; 15
    1226:	40 2f       	mov	r20, r16
    1228:	ce 01       	movw	r24, r28
    122a:	0e 94 a1 08 	call	0x1142	; 0x1142 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	}
	if(Wire.endTransmission())
    122e:	8f e6       	ldi	r24, 0x6F	; 111
    1230:	95 e0       	ldi	r25, 0x05	; 5
    1232:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN7TwoWire15endTransmissionEv>
    1236:	21 e0       	ldi	r18, 0x01	; 1
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 11       	cpse	r24, r1
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xb8>
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	88 27       	eor	r24, r24
    1244:	99 27       	eor	r25, r25
    1246:	82 1b       	sub	r24, r18
    1248:	93 0b       	sbc	r25, r19
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc6>
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
    124c:	8c ef       	ldi	r24, 0xFC	; 252
    124e:	9f ef       	ldi	r25, 0xFF	; 255
	}
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR);
}
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	1f 91       	pop	r17
    1256:	0f 91       	pop	r16
    1258:	ff 90       	pop	r15
    125a:	ef 90       	pop	r14
    125c:	df 90       	pop	r13
    125e:	cf 90       	pop	r12
    1260:	bf 90       	pop	r11
    1262:	af 90       	pop	r10
    1264:	9f 90       	pop	r9
    1266:	8f 90       	pop	r8
    1268:	08 95       	ret

0000126a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE>:
// ioread(type) - read a byte from LCD DDRAM
//
// returns:
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
    126a:	8f 92       	push	r8
    126c:	9f 92       	push	r9
    126e:	af 92       	push	r10
    1270:	bf 92       	push	r11
    1272:	cf 92       	push	r12
    1274:	df 92       	push	r13
    1276:	ef 92       	push	r14
    1278:	ff 92       	push	r15
    127a:	0f 93       	push	r16
    127c:	1f 93       	push	r17
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	ec 01       	movw	r28, r24
{
uint8_t gpioValue =  _blCurState;
    1284:	1b a5       	ldd	r17, Y+43	; 0x2b
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
    1286:	88 a1       	ldd	r24, Y+32	; 0x20
    1288:	88 23       	and	r24, r24
    128a:	09 f4       	brne	.+2      	; 0x128e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x24>
    128c:	f6 c0       	rjmp	.+492    	; 0x147a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
    128e:	89 a1       	ldd	r24, Y+33	; 0x21
    1290:	88 23       	and	r24, r24
    1292:	09 f4       	brne	.+2      	; 0x1296 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x2c>
    1294:	f2 c0       	rjmp	.+484    	; 0x147a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
		return(hd44780::RV_ENXIO);

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
    1296:	82 30       	cpi	r24, 0x02	; 2
    1298:	09 f4       	brne	.+2      	; 0x129c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x32>
    129a:	f1 c0       	rjmp	.+482    	; 0x147e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
	{
		return(hd44780::RV_ENOTSUP);
	}

	// check if reads supported
	if(!_rw)
    129c:	8b a1       	ldd	r24, Y+35	; 0x23
    129e:	88 23       	and	r24, r24
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x3a>
    12a2:	ed c0       	rjmp	.+474    	; 0x147e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
    12a4:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
    12a6:	8c 8c       	ldd	r8, Y+28	; 0x1c
    12a8:	9d 8c       	ldd	r9, Y+29	; 0x1d
    12aa:	ae 8c       	ldd	r10, Y+30	; 0x1e
    12ac:	bf 8c       	ldd	r11, Y+31	; 0x1f
    12ae:	c8 8c       	ldd	r12, Y+24	; 0x18
    12b0:	d9 8c       	ldd	r13, Y+25	; 0x19
    12b2:	ea 8c       	ldd	r14, Y+26	; 0x1a
    12b4:	fb 8c       	ldd	r15, Y+27	; 0x1b
    12b6:	8d e2       	ldi	r24, 0x2D	; 45
    12b8:	c8 1a       	sub	r12, r24
    12ba:	d1 08       	sbc	r13, r1
    12bc:	e1 08       	sbc	r14, r1
    12be:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
    12c0:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <micros>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	8c 19       	sub	r24, r12
    12ca:	9d 09       	sbc	r25, r13
    12cc:	ae 09       	sbc	r26, r14
    12ce:	bf 09       	sbc	r27, r15
    12d0:	88 15       	cp	r24, r8
    12d2:	99 05       	cpc	r25, r9
    12d4:	aa 05       	cpc	r26, r10
    12d6:	bb 05       	cpc	r27, r11
    12d8:	98 f3       	brcs	.-26     	; 0x12c0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x56>
    12da:	8d a1       	ldd	r24, Y+37	; 0x25
    12dc:	18 2b       	or	r17, r24
    12de:	8e a1       	ldd	r24, Y+38	; 0x26
    12e0:	18 2b       	or	r17, r24
    12e2:	8f a1       	ldd	r24, Y+39	; 0x27
    12e4:	18 2b       	or	r17, r24
   
	// put all the expander LCD data pins into input mode.
	// PCF8574 psuedo inputs use pullups so setting them to 1
	// makes them suitible for inputs.

	gpioValue |= _d4|_d5|_d6|_d7;
    12e6:	88 a5       	ldd	r24, Y+40	; 0x28
    12e8:	18 2b       	or	r17, r24

	// set RS based on type of read (data or status/cmd)
	if(type == hd44780::HD44780_IOdata) 
    12ea:	01 30       	cpi	r16, 0x01	; 1
    12ec:	11 f4       	brne	.+4      	; 0x12f2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x88>
	{
		gpioValue |= _rs; // RS high to read data reg
    12ee:	8a a1       	ldd	r24, Y+34	; 0x22
    12f0:	18 2b       	or	r17, r24
	}

	gpioValue |= _rw; // r/w high for reading
    12f2:	8b a1       	ldd	r24, Y+35	; 0x23
    12f4:	18 2b       	or	r17, r24

	// write all the bits to the expander port
	
	Wire.beginTransmission(_addr);
    12f6:	68 a1       	ldd	r22, Y+32	; 0x20
    12f8:	8f e6       	ldi	r24, 0x6F	; 111
    12fa:	95 e0       	ldi	r25, 0x05	; 5
    12fc:	0e 94 b9 18 	call	0x3172	; 0x3172 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue);		// d4-d7 are inputs, RS, r/w high, E LOW
    1300:	61 2f       	mov	r22, r17
    1302:	8f e6       	ldi	r24, 0x6F	; 111
    1304:	95 e0       	ldi	r25, 0x05	; 5
    1306:	0e 94 68 18 	call	0x30d0	; 0x30d0 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    130a:	8f e6       	ldi	r24, 0x6F	; 111
    130c:	95 e0       	ldi	r25, 0x05	; 5
    130e:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN7TwoWire15endTransmissionEv>
    1312:	88 23       	and	r24, r24
    1314:	19 f0       	breq	.+6      	; 0x131c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xb2>
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;
    1316:	0f ef       	ldi	r16, 0xFF	; 255
    1318:	1f ef       	ldi	r17, 0xFF	; 255
    131a:	9d c0       	rjmp	.+314    	; 0x1456 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ec>
	if(Wire.endTransmission())
		goto returnStatus;


	// raise E to read the data.
	Wire.beginTransmission(_addr);
    131c:	68 a1       	ldd	r22, Y+32	; 0x20
    131e:	8f e6       	ldi	r24, 0x6F	; 111
    1320:	95 e0       	ldi	r25, 0x05	; 5
    1322:	0e 94 b9 18 	call	0x3172	; 0x3172 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raises E 
    1326:	6c a1       	ldd	r22, Y+36	; 0x24
    1328:	61 2b       	or	r22, r17
    132a:	70 e0       	ldi	r23, 0x00	; 0
    132c:	8f e6       	ldi	r24, 0x6F	; 111
    132e:	95 e0       	ldi	r25, 0x05	; 5
    1330:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
    1334:	8f e6       	ldi	r24, 0x6F	; 111
    1336:	95 e0       	ldi	r25, 0x05	; 5
    1338:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN7TwoWire15endTransmissionEv>
    133c:	81 11       	cpse	r24, r1
    133e:	eb cf       	rjmp	.-42     	; 0x1316 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// read the expander port to get the upper nibble of the byte
	Wire.requestFrom((int)_addr, 1);
    1340:	68 a1       	ldd	r22, Y+32	; 0x20
    1342:	70 e0       	ldi	r23, 0x00	; 0
    1344:	41 e0       	ldi	r20, 0x01	; 1
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	8f e6       	ldi	r24, 0x6F	; 111
    134a:	95 e0       	ldi	r25, 0x05	; 5
    134c:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN7TwoWire11requestFromEii>
	iodata = Wire.read();
    1350:	8f e6       	ldi	r24, 0x6F	; 111
    1352:	95 e0       	ldi	r25, 0x05	; 5
    1354:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <_ZN7TwoWire4readEv>
    1358:	7c 01       	movw	r14, r24
	if(iodata < 0) // did we not receive a byte?
    135a:	97 fd       	sbrc	r25, 7
    135c:	dc cf       	rjmp	.-72     	; 0x1316 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
    135e:	68 a1       	ldd	r22, Y+32	; 0x20
    1360:	8f e6       	ldi	r24, 0x6F	; 111
    1362:	95 e0       	ldi	r25, 0x05	; 5
    1364:	0e 94 b9 18 	call	0x3172	; 0x3172 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
    1368:	61 2f       	mov	r22, r17
    136a:	8f e6       	ldi	r24, 0x6F	; 111
    136c:	95 e0       	ldi	r25, 0x05	; 5
    136e:	0e 94 68 18 	call	0x30d0	; 0x30d0 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    1372:	8f e6       	ldi	r24, 0x6F	; 111
    1374:	95 e0       	ldi	r25, 0x05	; 5
    1376:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN7TwoWire15endTransmissionEv>
    137a:	81 11       	cpse	r24, r1
    137c:	cc cf       	rjmp	.-104    	; 0x1316 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
    137e:	8d a1       	ldd	r24, Y+37	; 0x25
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	8e 21       	and	r24, r14
    1384:	9f 21       	and	r25, r15
    1386:	89 2b       	or	r24, r25
    1388:	11 f4       	brne	.+4      	; 0x138e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x124>
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
    138a:	00 e0       	ldi	r16, 0x00	; 0
    138c:	01 c0       	rjmp	.+2      	; 0x1390 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x126>
	if(Wire.endTransmission())
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
		data |= (1 << 4);
    138e:	00 e1       	ldi	r16, 0x10	; 16

	if(iodata & _d5)
    1390:	8e a1       	ldd	r24, Y+38	; 0x26
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	8e 21       	and	r24, r14
    1396:	9f 21       	and	r25, r15
    1398:	89 2b       	or	r24, r25
    139a:	09 f0       	breq	.+2      	; 0x139e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x134>
		data |= (1 << 5);
    139c:	00 62       	ori	r16, 0x20	; 32

	if(iodata & _d6)
    139e:	8f a1       	ldd	r24, Y+39	; 0x27
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	8e 21       	and	r24, r14
    13a4:	9f 21       	and	r25, r15
    13a6:	89 2b       	or	r24, r25
    13a8:	09 f0       	breq	.+2      	; 0x13ac <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x142>
		data |= (1 << 6);
    13aa:	00 64       	ori	r16, 0x40	; 64

	if(iodata & _d7)
    13ac:	88 a5       	ldd	r24, Y+40	; 0x28
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	e8 22       	and	r14, r24
    13b2:	f9 22       	and	r15, r25
    13b4:	ef 28       	or	r14, r15
    13b6:	09 f0       	breq	.+2      	; 0x13ba <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x150>
		data |= (1 << 7);
    13b8:	00 68       	ori	r16, 0x80	; 128
	
	Wire.beginTransmission(_addr);
    13ba:	68 a1       	ldd	r22, Y+32	; 0x20
    13bc:	8f e6       	ldi	r24, 0x6F	; 111
    13be:	95 e0       	ldi	r25, 0x05	; 5
    13c0:	0e 94 b9 18 	call	0x3172	; 0x3172 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raise E to read next nibble
    13c4:	6c a1       	ldd	r22, Y+36	; 0x24
    13c6:	61 2b       	or	r22, r17
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	8f e6       	ldi	r24, 0x6F	; 111
    13cc:	95 e0       	ldi	r25, 0x05	; 5
    13ce:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
    13d2:	8f e6       	ldi	r24, 0x6F	; 111
    13d4:	95 e0       	ldi	r25, 0x05	; 5
    13d6:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN7TwoWire15endTransmissionEv>
    13da:	81 11       	cpse	r24, r1
    13dc:	9c cf       	rjmp	.-200    	; 0x1316 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>

	// read the expander port to get the lower nibble of the byte
	// We can't look at the return value from requestFrom() on the TineyWireM
	// library as it doesn't work like it is supposed to.
	// So we look at the return status from read() instead.
	Wire.requestFrom((int)_addr, 1);
    13de:	68 a1       	ldd	r22, Y+32	; 0x20
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	41 e0       	ldi	r20, 0x01	; 1
    13e4:	50 e0       	ldi	r21, 0x00	; 0
    13e6:	8f e6       	ldi	r24, 0x6F	; 111
    13e8:	95 e0       	ldi	r25, 0x05	; 5
    13ea:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN7TwoWire11requestFromEii>

	iodata = Wire.read();
    13ee:	8f e6       	ldi	r24, 0x6F	; 111
    13f0:	95 e0       	ldi	r25, 0x05	; 5
    13f2:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <_ZN7TwoWire4readEv>
    13f6:	7c 01       	movw	r14, r24

	if(iodata < 0) // did we not receive a byte?
    13f8:	97 fd       	sbrc	r25, 7
    13fa:	8d cf       	rjmp	.-230    	; 0x1316 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
    13fc:	68 a1       	ldd	r22, Y+32	; 0x20
    13fe:	8f e6       	ldi	r24, 0x6F	; 111
    1400:	95 e0       	ldi	r25, 0x05	; 5
    1402:	0e 94 b9 18 	call	0x3172	; 0x3172 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
    1406:	61 2f       	mov	r22, r17
    1408:	8f e6       	ldi	r24, 0x6F	; 111
    140a:	95 e0       	ldi	r25, 0x05	; 5
    140c:	0e 94 68 18 	call	0x30d0	; 0x30d0 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    1410:	8f e6       	ldi	r24, 0x6F	; 111
    1412:	95 e0       	ldi	r25, 0x05	; 5
    1414:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN7TwoWire15endTransmissionEv>
    1418:	81 11       	cpse	r24, r1
    141a:	7d cf       	rjmp	.-262    	; 0x1316 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into lower nibble of byte
	if(iodata & _d4)
    141c:	8d a1       	ldd	r24, Y+37	; 0x25
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	8e 21       	and	r24, r14
    1422:	9f 21       	and	r25, r15
    1424:	89 2b       	or	r24, r25
    1426:	09 f0       	breq	.+2      	; 0x142a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1c0>
		data |= (1 << 0);
    1428:	01 60       	ori	r16, 0x01	; 1

	if(iodata & _d5)
    142a:	8e a1       	ldd	r24, Y+38	; 0x26
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	8e 21       	and	r24, r14
    1430:	9f 21       	and	r25, r15
    1432:	89 2b       	or	r24, r25
    1434:	09 f0       	breq	.+2      	; 0x1438 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ce>
		data |= (1 << 1);
    1436:	02 60       	ori	r16, 0x02	; 2

	if(iodata & _d6)
    1438:	8f a1       	ldd	r24, Y+39	; 0x27
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	8e 21       	and	r24, r14
    143e:	9f 21       	and	r25, r15
    1440:	89 2b       	or	r24, r25
    1442:	09 f0       	breq	.+2      	; 0x1446 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1dc>
		data |= (1 << 2);
    1444:	04 60       	ori	r16, 0x04	; 4

	if(iodata & _d7)
    1446:	88 a5       	ldd	r24, Y+40	; 0x28
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	e8 22       	and	r14, r24
    144c:	f9 22       	and	r15, r25
    144e:	ef 28       	or	r14, r15
    1450:	09 f0       	breq	.+2      	; 0x1454 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ea>
		data |= (1 << 3);
    1452:	08 60       	ori	r16, 0x08	; 8

	rval = data;
    1454:	10 e0       	ldi	r17, 0x00	; 0

returnStatus:

	// try to put gpio port back to all outputs state with WR signal low for writes
	Wire.beginTransmission(_addr);
    1456:	68 a1       	ldd	r22, Y+32	; 0x20
    1458:	8f e6       	ldi	r24, 0x6F	; 111
    145a:	95 e0       	ldi	r25, 0x05	; 5
    145c:	0e 94 b9 18 	call	0x3172	; 0x3172 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(_blCurState);		// with E LOW
    1460:	6b a5       	ldd	r22, Y+43	; 0x2b
    1462:	8f e6       	ldi	r24, 0x6F	; 111
    1464:	95 e0       	ldi	r25, 0x05	; 5
    1466:	0e 94 68 18 	call	0x30d0	; 0x30d0 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    146a:	8f e6       	ldi	r24, 0x6F	; 111
    146c:	95 e0       	ldi	r25, 0x05	; 5
    146e:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN7TwoWire15endTransmissionEv>
    1472:	88 23       	and	r24, r24
    1474:	39 f0       	breq	.+14     	; 0x1484 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21a>
		rval = hd44780::RV_EIO;
    1476:	8f ef       	ldi	r24, 0xFF	; 255
    1478:	03 c0       	rjmp	.+6      	; 0x1480 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
    147a:	8c ef       	ldi	r24, 0xFC	; 252
    147c:	01 c0       	rjmp	.+2      	; 0x1480 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
	{
		return(hd44780::RV_ENOTSUP);
    147e:	8d ef       	ldi	r24, 0xFD	; 253
    1480:	9f ef       	ldi	r25, 0xFF	; 255
    1482:	01 c0       	rjmp	.+2      	; 0x1486 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21c>
    1484:	c8 01       	movw	r24, r16
	Wire.write(_blCurState);		// with E LOW
	if(Wire.endTransmission())
		rval = hd44780::RV_EIO;

	return(rval);
}
    1486:	df 91       	pop	r29
    1488:	cf 91       	pop	r28
    148a:	1f 91       	pop	r17
    148c:	0f 91       	pop	r16
    148e:	ff 90       	pop	r15
    1490:	ef 90       	pop	r14
    1492:	df 90       	pop	r13
    1494:	cf 90       	pop	r12
    1496:	bf 90       	pop	r11
    1498:	af 90       	pop	r10
    149a:	9f 90       	pop	r9
    149c:	8f 90       	pop	r8
    149e:	08 95       	ret

000014a0 <_ZN14hd44780_I2Cexp11autocfg8574Ev>:
 * a new resistor to  connect to the base of the transistor.
 * 
 * As a result the SYDZ backpack cannot use autoconfiguration.
 */

int autocfg8574()
    14a0:	0f 93       	push	r16
    14a2:	1f 93       	push	r17
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
    14a8:	ec 01       	movw	r28, r24
uint8_t data, data2;
uint8_t rs, rw, en, d4, d5, d6, d7, bl, blLevel;

	// First put a 0xff in the output port

	Wire.beginTransmission(_addr);
    14aa:	68 a1       	ldd	r22, Y+32	; 0x20
    14ac:	8f e6       	ldi	r24, 0x6F	; 111
    14ae:	95 e0       	ldi	r25, 0x05	; 5
    14b0:	0e 94 b9 18 	call	0x3172	; 0x3172 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0xff);
    14b4:	6f ef       	ldi	r22, 0xFF	; 255
    14b6:	8f e6       	ldi	r24, 0x6F	; 111
    14b8:	95 e0       	ldi	r25, 0x05	; 5
    14ba:	0e 94 68 18 	call	0x30d0	; 0x30d0 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    14be:	8f e6       	ldi	r24, 0x6F	; 111
    14c0:	95 e0       	ldi	r25, 0x05	; 5
    14c2:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN7TwoWire15endTransmissionEv>

	// now read back from the port

	Wire.requestFrom((int)_addr, 1);
    14c6:	68 a1       	ldd	r22, Y+32	; 0x20
    14c8:	70 e0       	ldi	r23, 0x00	; 0
    14ca:	41 e0       	ldi	r20, 0x01	; 1
    14cc:	50 e0       	ldi	r21, 0x00	; 0
    14ce:	8f e6       	ldi	r24, 0x6F	; 111
    14d0:	95 e0       	ldi	r25, 0x05	; 5
    14d2:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    14d6:	8f e6       	ldi	r24, 0x6F	; 111
    14d8:	95 e0       	ldi	r25, 0x05	; 5
    14da:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <_ZN7TwoWire4readEv>
    14de:	8c 01       	movw	r16, r24

	// Turn off bit2 to attempt to see if en is bit 2,
	// if it is, it should change all lcd data bits to 1s
	
	Wire.beginTransmission(_addr);
    14e0:	68 a1       	ldd	r22, Y+32	; 0x20
    14e2:	8f e6       	ldi	r24, 0x6F	; 111
    14e4:	95 e0       	ldi	r25, 0x05	; 5
    14e6:	0e 94 b9 18 	call	0x3172	; 0x3172 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) (~(1 << 2)) );
    14ea:	6b ef       	ldi	r22, 0xFB	; 251
    14ec:	8f e6       	ldi	r24, 0x6F	; 111
    14ee:	95 e0       	ldi	r25, 0x05	; 5
    14f0:	0e 94 68 18 	call	0x30d0	; 0x30d0 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    14f4:	8f e6       	ldi	r24, 0x6F	; 111
    14f6:	95 e0       	ldi	r25, 0x05	; 5
    14f8:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN7TwoWire15endTransmissionEv>

	// read back data
	Wire.requestFrom((int)_addr, 1);
    14fc:	68 a1       	ldd	r22, Y+32	; 0x20
    14fe:	70 e0       	ldi	r23, 0x00	; 0
    1500:	41 e0       	ldi	r20, 0x01	; 1
    1502:	50 e0       	ldi	r21, 0x00	; 0
    1504:	8f e6       	ldi	r24, 0x6F	; 111
    1506:	95 e0       	ldi	r25, 0x05	; 5
    1508:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN7TwoWire11requestFromEii>
	data2 = Wire.read();
    150c:	8f e6       	ldi	r24, 0x6F	; 111
    150e:	95 e0       	ldi	r25, 0x05	; 5
    1510:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <_ZN7TwoWire4readEv>

	// If lower 3 bits are high and all 4 upper bits are high after clearing bit 2
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
    1514:	98 01       	movw	r18, r16
    1516:	27 70       	andi	r18, 0x07	; 7
    1518:	33 27       	eor	r19, r19
    151a:	27 30       	cpi	r18, 0x07	; 7
    151c:	31 05       	cpc	r19, r1
    151e:	b1 f4       	brne	.+44     	; 0x154c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
    1520:	80 7f       	andi	r24, 0xF0	; 240
    1522:	99 27       	eor	r25, r25
    1524:	80 3f       	cpi	r24, 0xF0	; 240
    1526:	91 05       	cpc	r25, r1
    1528:	89 f4       	brne	.+34     	; 0x154c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
    152a:	83 e0       	ldi	r24, 0x03	; 3
    152c:	16 95       	lsr	r17
    152e:	07 95       	ror	r16
    1530:	8a 95       	dec	r24
    1532:	e1 f7       	brne	.-8      	; 0x152c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x8c>
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	08 27       	eor	r16, r24
    1538:	01 70       	andi	r16, 0x01	; 1
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
	{
		rs = 0; rw = 1; en = 2; d4 = 4; d5 = 5; d6 = 6; d7 = 7; bl = 3;
    153a:	43 e0       	ldi	r20, 0x03	; 3
    153c:	57 e0       	ldi	r21, 0x07	; 7
    153e:	66 e0       	ldi	r22, 0x06	; 6
    1540:	75 e0       	ldi	r23, 0x05	; 5
    1542:	e4 e0       	ldi	r30, 0x04	; 4
    1544:	22 e0       	ldi	r18, 0x02	; 2
    1546:	f1 e0       	ldi	r31, 0x01	; 1
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	34 c0       	rjmp	.+104    	; 0x15b4 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x114>
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
		}
	}
	else if((data & 0x70) == 0x70)
    154c:	c8 01       	movw	r24, r16
    154e:	80 77       	andi	r24, 0x70	; 112
    1550:	99 27       	eor	r25, r25
    1552:	80 37       	cpi	r24, 0x70	; 112
    1554:	91 05       	cpc	r25, r1
    1556:	09 f0       	breq	.+2      	; 0x155a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xba>
    1558:	68 c0       	rjmp	.+208    	; 0x162a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18a>
		// both use bit 7 for backlight control

		// Turn off the en bit which should change the data bits
		// bit 4 on the mjkdz is en so we try that bit
	
		Wire.beginTransmission(_addr);
    155a:	68 a1       	ldd	r22, Y+32	; 0x20
    155c:	8f e6       	ldi	r24, 0x6F	; 111
    155e:	95 e0       	ldi	r25, 0x05	; 5
    1560:	0e 94 b9 18 	call	0x3172	; 0x3172 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t) (~(1 << 4)) );
    1564:	6f ee       	ldi	r22, 0xEF	; 239
    1566:	8f e6       	ldi	r24, 0x6F	; 111
    1568:	95 e0       	ldi	r25, 0x05	; 5
    156a:	0e 94 68 18 	call	0x30d0	; 0x30d0 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    156e:	8f e6       	ldi	r24, 0x6F	; 111
    1570:	95 e0       	ldi	r25, 0x05	; 5
    1572:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN7TwoWire15endTransmissionEv>

		// read back data
		Wire.requestFrom((int)_addr, 1);
    1576:	68 a1       	ldd	r22, Y+32	; 0x20
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	41 e0       	ldi	r20, 0x01	; 1
    157c:	50 e0       	ldi	r21, 0x00	; 0
    157e:	8f e6       	ldi	r24, 0x6F	; 111
    1580:	95 e0       	ldi	r25, 0x05	; 5
    1582:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN7TwoWire11requestFromEii>
		data2 = Wire.read();
    1586:	8f e6       	ldi	r24, 0x6F	; 111
    1588:	95 e0       	ldi	r25, 0x05	; 5
    158a:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <_ZN7TwoWire4readEv>
		// look at data bits and see if they changed
		// if they changed to 0xf, then en was bit 4 and it is mjdkz
		// this will happen since when E is low the LCD is not
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
    158e:	8f 70       	andi	r24, 0x0F	; 15
    1590:	99 27       	eor	r25, r25
    1592:	0f 97       	sbiw	r24, 0x0f	; 15
    1594:	19 f0       	breq	.+6      	; 0x159c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xfc>
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
		}
		else
		{
			// electrofun LCDXIO
			rs = 4; rw = 5; en = 6; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
    1596:	26 e0       	ldi	r18, 0x06	; 6
    1598:	34 e0       	ldi	r19, 0x04	; 4
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x100>
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
		{
			// mjkdz
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
    159c:	24 e0       	ldi	r18, 0x04	; 4
    159e:	36 e0       	ldi	r19, 0x06	; 6
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
    15a0:	00 95       	com	r16
    15a2:	00 1f       	adc	r16, r16
    15a4:	00 27       	eor	r16, r16
    15a6:	00 1f       	adc	r16, r16
    15a8:	47 e0       	ldi	r20, 0x07	; 7
    15aa:	53 e0       	ldi	r21, 0x03	; 3
    15ac:	62 e0       	ldi	r22, 0x02	; 2
    15ae:	71 e0       	ldi	r23, 0x01	; 1
    15b0:	e0 e0       	ldi	r30, 0x00	; 0
    15b2:	f5 e0       	ldi	r31, 0x05	; 5
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	dc 01       	movw	r26, r24
    15ba:	01 c0       	rjmp	.+2      	; 0x15be <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11e>
    15bc:	aa 0f       	add	r26, r26
    15be:	3a 95       	dec	r19
    15c0:	ea f7       	brpl	.-6      	; 0x15bc <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11c>
    15c2:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
    15c4:	dc 01       	movw	r26, r24
    15c6:	01 c0       	rjmp	.+2      	; 0x15ca <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x12a>
    15c8:	aa 0f       	add	r26, r26
    15ca:	fa 95       	dec	r31
    15cc:	ea f7       	brpl	.-6      	; 0x15c8 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x128>
    15ce:	ab a3       	std	Y+35, r26	; 0x23
	else
		_rw = 0; // no r/w control

	_en = ( 1 << en );
    15d0:	dc 01       	movw	r26, r24
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x138>
    15d4:	aa 0f       	add	r26, r26
    15d6:	bb 1f       	adc	r27, r27
    15d8:	2a 95       	dec	r18
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x134>
    15dc:	ac a3       	std	Y+36, r26	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
    15de:	9c 01       	movw	r18, r24
    15e0:	01 c0       	rjmp	.+2      	; 0x15e4 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x144>
    15e2:	22 0f       	add	r18, r18
    15e4:	ea 95       	dec	r30
    15e6:	ea f7       	brpl	.-6      	; 0x15e2 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x142>
    15e8:	2d a3       	std	Y+37, r18	; 0x25
	_d5 = ( 1 << d5 );
    15ea:	9c 01       	movw	r18, r24
    15ec:	01 c0       	rjmp	.+2      	; 0x15f0 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x150>
    15ee:	22 0f       	add	r18, r18
    15f0:	7a 95       	dec	r23
    15f2:	ea f7       	brpl	.-6      	; 0x15ee <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x14e>
    15f4:	2e a3       	std	Y+38, r18	; 0x26
	_d6 = ( 1 << d6 );
    15f6:	9c 01       	movw	r18, r24
    15f8:	01 c0       	rjmp	.+2      	; 0x15fc <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15c>
    15fa:	22 0f       	add	r18, r18
    15fc:	6a 95       	dec	r22
    15fe:	ea f7       	brpl	.-6      	; 0x15fa <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15a>
    1600:	2f a3       	std	Y+39, r18	; 0x27
	_d7 = ( 1 << d7 );   
    1602:	9c 01       	movw	r18, r24
    1604:	01 c0       	rjmp	.+2      	; 0x1608 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x168>
    1606:	22 0f       	add	r18, r18
    1608:	5a 95       	dec	r21
    160a:	ea f7       	brpl	.-6      	; 0x1606 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x166>
    160c:	28 a7       	std	Y+40, r18	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
    160e:	01 c0       	rjmp	.+2      	; 0x1612 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x172>
    1610:	88 0f       	add	r24, r24
    1612:	4a 95       	dec	r20
    1614:	ea f7       	brpl	.-6      	; 0x1610 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x170>
    1616:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
    1618:	0a a7       	std	Y+42, r16	; 0x2a
	// set default bl state to backlight on
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
    161a:	01 30       	cpi	r16, 0x01	; 1
    161c:	11 f4       	brne	.+4      	; 0x1622 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x182>
		_blCurState = _bl;
    161e:	8b a7       	std	Y+43, r24	; 0x2b
    1620:	01 c0       	rjmp	.+2      	; 0x1624 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x184>
	else
		_blCurState = 0;
    1622:	1b a6       	std	Y+43, r1	; 0x2b
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	02 c0       	rjmp	.+4      	; 0x162e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18e>
		}
	}
	else
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
    162a:	8d ef       	ldi	r24, 0xFD	; 253
    162c:	9f ef       	ldi	r25, 0xFF	; 255
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	08 95       	ret

00001638 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>:
 * if GP1 is low then the board is the BOARD_XXX board
 * The BOARD_XXX may not work as GP1 is used for D5 on WIDEHK and LCDPLUG
 *
 *
 */
int autocfgMCP23008()
    1638:	cf 93       	push	r28
    163a:	df 93       	push	r29
    163c:	ec 01       	movw	r28, r24

	/*
	 * Now set up output port
	 * Make no assumptions as to the state of IOCON BYTE mode
	 */
	Wire.beginTransmission(_addr);
    163e:	68 a1       	ldd	r22, Y+32	; 0x20
    1640:	8f e6       	ldi	r24, 0x6F	; 111
    1642:	95 e0       	ldi	r25, 0x05	; 5
    1644:	0e 94 b9 18 	call	0x3172	; 0x3172 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t)0); // point to IODIR
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	8f e6       	ldi	r24, 0x6F	; 111
    164c:	95 e0       	ldi	r25, 0x05	; 5
    164e:	0e 94 68 18 	call	0x30d0	; 0x30d0 <_ZN7TwoWire5writeEh>
	Wire.write(0xff); // all pins inputs
    1652:	6f ef       	ldi	r22, 0xFF	; 255
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	8f e6       	ldi	r24, 0x6F	; 111
    1658:	95 e0       	ldi	r25, 0x05	; 5
    165a:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    165e:	8f e6       	ldi	r24, 0x6F	; 111
    1660:	95 e0       	ldi	r25, 0x05	; 5
    1662:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN7TwoWire15endTransmissionEv>

	Wire.beginTransmission(_addr);
    1666:	68 a1       	ldd	r22, Y+32	; 0x20
    1668:	8f e6       	ldi	r24, 0x6F	; 111
    166a:	95 e0       	ldi	r25, 0x05	; 5
    166c:	0e 94 b9 18 	call	0x3172	; 0x3172 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(6); // point to GPPU
    1670:	66 e0       	ldi	r22, 0x06	; 6
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	8f e6       	ldi	r24, 0x6F	; 111
    1676:	95 e0       	ldi	r25, 0x05	; 5
    1678:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7TwoWire5writeEi>
	Wire.write(0xff); // turn on pullups
    167c:	6f ef       	ldi	r22, 0xFF	; 255
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	8f e6       	ldi	r24, 0x6F	; 111
    1682:	95 e0       	ldi	r25, 0x05	; 5
    1684:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    1688:	8f e6       	ldi	r24, 0x6F	; 111
    168a:	95 e0       	ldi	r25, 0x05	; 5
    168c:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN7TwoWire15endTransmissionEv>

	/*
	 * read from the GPIO port
	 */

	Wire.beginTransmission(_addr);
    1690:	68 a1       	ldd	r22, Y+32	; 0x20
    1692:	8f e6       	ldi	r24, 0x6F	; 111
    1694:	95 e0       	ldi	r25, 0x05	; 5
    1696:	0e 94 b9 18 	call	0x3172	; 0x3172 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(9); // point to GPIO
    169a:	69 e0       	ldi	r22, 0x09	; 9
    169c:	70 e0       	ldi	r23, 0x00	; 0
    169e:	8f e6       	ldi	r24, 0x6F	; 111
    16a0:	95 e0       	ldi	r25, 0x05	; 5
    16a2:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    16a6:	8f e6       	ldi	r24, 0x6F	; 111
    16a8:	95 e0       	ldi	r25, 0x05	; 5
    16aa:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom((int)_addr, 1);
    16ae:	68 a1       	ldd	r22, Y+32	; 0x20
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	41 e0       	ldi	r20, 0x01	; 1
    16b4:	50 e0       	ldi	r21, 0x00	; 0
    16b6:	8f e6       	ldi	r24, 0x6F	; 111
    16b8:	95 e0       	ldi	r25, 0x05	; 5
    16ba:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    16be:	8f e6       	ldi	r24, 0x6F	; 111
    16c0:	95 e0       	ldi	r25, 0x05	; 5
    16c2:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <_ZN7TwoWire4readEv>

	blLevel = HIGH; // known boards are active HIGH bl

	if(data == 0x7f) // bit 7 low, and other control and data lines high
    16c6:	8f 37       	cpi	r24, 0x7F	; 127
    16c8:	61 f0       	breq	.+24     	; 0x16e2 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xaa>
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
    16ca:	86 ff       	sbrs	r24, 6
    16cc:	12 c0       	rjmp	.+36     	; 0x16f2 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xba>
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
    16ce:	81 fd       	sbrc	r24, 1
    16d0:	4c c0       	rjmp	.+152    	; 0x176a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x132>
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
		bl = 1;
    16d2:	21 e0       	ldi	r18, 0x01	; 1
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
    16d4:	32 e0       	ldi	r19, 0x02	; 2
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
    16d6:	43 e0       	ldi	r20, 0x03	; 3
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
    16d8:	54 e0       	ldi	r21, 0x04	; 4
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
    16da:	65 e0       	ldi	r22, 0x05	; 5
	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
    16dc:	76 e0       	ldi	r23, 0x06	; 6
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
    16de:	e7 e0       	ldi	r30, 0x07	; 7
    16e0:	0f c0       	rjmp	.+30     	; 0x1700 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;
    16e2:	27 e0       	ldi	r18, 0x07	; 7
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
    16e4:	36 e0       	ldi	r19, 0x06	; 6
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
    16e6:	45 e0       	ldi	r20, 0x05	; 5
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
    16e8:	54 e0       	ldi	r21, 0x04	; 4
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
    16ea:	63 e0       	ldi	r22, 0x03	; 3
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
    16ec:	72 e0       	ldi	r23, 0x02	; 2

	if(data == 0x7f) // bit 7 low, and other control and data lines high
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
    16ee:	e1 e0       	ldi	r30, 0x01	; 1
    16f0:	07 c0       	rjmp	.+14     	; 0x1700 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;
    16f2:	26 e0       	ldi	r18, 0x06	; 6
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
    16f4:	33 e0       	ldi	r19, 0x03	; 3
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
    16f6:	42 e0       	ldi	r20, 0x02	; 2
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
    16f8:	51 e0       	ldi	r21, 0x01	; 1
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
    16fa:	60 e0       	ldi	r22, 0x00	; 0
	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
    16fc:	77 e0       	ldi	r23, 0x07	; 7
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
    16fe:	e4 e0       	ldi	r30, 0x04	; 4
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	dc 01       	movw	r26, r24
    1706:	02 c0       	rjmp	.+4      	; 0x170c <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd4>
    1708:	aa 0f       	add	r26, r26
    170a:	bb 1f       	adc	r27, r27
    170c:	ea 95       	dec	r30
    170e:	e2 f7       	brpl	.-8      	; 0x1708 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd0>
    1710:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
	else
		_rw = 0; // no r/w control
    1712:	1b a2       	std	Y+35, r1	; 0x23

	_en = ( 1 << en );
    1714:	fc 01       	movw	r30, r24
    1716:	01 c0       	rjmp	.+2      	; 0x171a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe2>
    1718:	ee 0f       	add	r30, r30
    171a:	7a 95       	dec	r23
    171c:	ea f7       	brpl	.-6      	; 0x1718 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe0>
    171e:	ec a3       	std	Y+36, r30	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
    1720:	fc 01       	movw	r30, r24
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xf0>
    1724:	ee 0f       	add	r30, r30
    1726:	ff 1f       	adc	r31, r31
    1728:	6a 95       	dec	r22
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xec>
    172c:	ed a3       	std	Y+37, r30	; 0x25
	_d5 = ( 1 << d5 );
    172e:	bc 01       	movw	r22, r24
    1730:	01 c0       	rjmp	.+2      	; 0x1734 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfc>
    1732:	66 0f       	add	r22, r22
    1734:	5a 95       	dec	r21
    1736:	ea f7       	brpl	.-6      	; 0x1732 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfa>
    1738:	6e a3       	std	Y+38, r22	; 0x26
	_d6 = ( 1 << d6 );
    173a:	bc 01       	movw	r22, r24
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x10a>
    173e:	66 0f       	add	r22, r22
    1740:	77 1f       	adc	r23, r23
    1742:	4a 95       	dec	r20
    1744:	e2 f7       	brpl	.-8      	; 0x173e <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x106>
    1746:	6f a3       	std	Y+39, r22	; 0x27
	_d7 = ( 1 << d7 );   
    1748:	ac 01       	movw	r20, r24
    174a:	01 c0       	rjmp	.+2      	; 0x174e <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x116>
    174c:	44 0f       	add	r20, r20
    174e:	3a 95       	dec	r19
    1750:	ea f7       	brpl	.-6      	; 0x174c <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x114>
    1752:	48 a7       	std	Y+40, r20	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
    1754:	01 c0       	rjmp	.+2      	; 0x1758 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x120>
    1756:	88 0f       	add	r24, r24
    1758:	2a 95       	dec	r18
    175a:	ea f7       	brpl	.-6      	; 0x1756 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x11e>
    175c:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
    175e:	91 e0       	ldi	r25, 0x01	; 1
    1760:	9a a7       	std	Y+42, r25	; 0x2a
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
		_blCurState = _bl;
    1762:	8b a7       	std	Y+43, r24	; 0x2b
		// could not identify board
		return(hd44780::RV_ENOTSUP);
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	02 c0       	rjmp	.+4      	; 0x176e <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x136>

	}
	else
	{
		// could not identify board
		return(hd44780::RV_ENOTSUP);
    176a:	8d ef       	ldi	r24, 0xFD	; 253
    176c:	9f ef       	ldi	r25, 0xFF	; 255
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
    176e:	df 91       	pop	r29
    1770:	cf 91       	pop	r28
    1772:	08 95       	ret

00001774 <_ZN14hd44780_I2Cexp6ioinitEv>:
// Returns non zero if initialization failed.
//
// can't be used from constructors because not everything is initalized yet.
// (maybe interrupts or other library constructors)
// if Wire library is used in constructor, it will hang.
int ioinit()
    1774:	1f 93       	push	r17
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    177a:	ec 01       	movw	r28, r24
	 * I believe that it is unreasonable to require the the user
	 * sketch code to do it, because all that should change between
	 * hd44780 i/o interfaces should be the constructor
	 * So we go ahead and call it here.
	 */
	Wire.begin();
    177c:	8f e6       	ldi	r24, 0x6F	; 111
    177e:	95 e0       	ldi	r25, 0x05	; 5
    1780:	0e 94 a7 18 	call	0x314e	; 0x314e <_ZN7TwoWire5beginEv>

	// auto locate i2c expander and magically detect pin mappings

	if(!_addr) // locate next instance
    1784:	68 a1       	ldd	r22, Y+32	; 0x20
    1786:	61 11       	cpse	r22, r1
    1788:	0a c0       	rjmp	.+20     	; 0x179e <_ZN14hd44780_I2Cexp6ioinitEv+0x2a>
	{
		_addr = LocateDevice(AutoInst++);
    178a:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    178e:	91 e0       	ldi	r25, 0x01	; 1
    1790:	98 0f       	add	r25, r24
    1792:	90 93 00 05 	sts	0x0500, r25	; 0x800500 <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    1796:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
    179a:	88 a3       	std	Y+32, r24	; 0x20
    179c:	0d c0       	rjmp	.+26     	; 0x17b8 <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
	}
	else
	{
		// check to see if device at specified address is really there
		Wire.beginTransmission(_addr);
    179e:	8f e6       	ldi	r24, 0x6F	; 111
    17a0:	95 e0       	ldi	r25, 0x05	; 5
    17a2:	0e 94 b9 18 	call	0x3172	; 0x3172 <_ZN7TwoWire17beginTransmissionEh>
		if(Wire.endTransmission())
    17a6:	8f e6       	ldi	r24, 0x6F	; 111
    17a8:	95 e0       	ldi	r25, 0x05	; 5
    17aa:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN7TwoWire15endTransmissionEv>
    17ae:	88 23       	and	r24, r24
    17b0:	19 f0       	breq	.+6      	; 0x17b8 <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
			return(hd44780::RV_ENXIO);
    17b2:	8c ef       	ldi	r24, 0xFC	; 252
    17b4:	9f ef       	ldi	r25, 0xFF	; 255
    17b6:	a7 c0       	rjmp	.+334    	; 0x1906 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	}

	if(!_addr) // locate next instance
    17b8:	88 a1       	ldd	r24, Y+32	; 0x20
    17ba:	81 11       	cpse	r24, r1
    17bc:	09 c0       	rjmp	.+18     	; 0x17d0 <_ZN14hd44780_I2Cexp6ioinitEv+0x5c>
		_addr = LocateDevice(AutoInst++);
    17be:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    17c2:	91 e0       	ldi	r25, 0x01	; 1
    17c4:	98 0f       	add	r25, r24
    17c6:	90 93 00 05 	sts	0x0500, r25	; 0x800500 <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    17ca:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
    17ce:	88 a3       	std	Y+32, r24	; 0x20

	if(!_addr) // if we couldn't locate it, return error
    17d0:	18 a1       	ldd	r17, Y+32	; 0x20
    17d2:	11 23       	and	r17, r17
    17d4:	71 f3       	breq	.-36     	; 0x17b2 <_ZN14hd44780_I2Cexp6ioinitEv+0x3e>
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
    17d6:	89 a1       	ldd	r24, Y+33	; 0x21
    17d8:	88 23       	and	r24, r24
    17da:	c1 f1       	breq	.+112    	; 0x184c <_ZN14hd44780_I2Cexp6ioinitEv+0xd8>
			return(status);
	}

	// initialize IO expander chip

	Wire.beginTransmission(_addr);
    17dc:	68 a1       	ldd	r22, Y+32	; 0x20
    17de:	8f e6       	ldi	r24, 0x6F	; 111
    17e0:	95 e0       	ldi	r25, 0x05	; 5
    17e2:	0e 94 b9 18 	call	0x3172	; 0x3172 <_ZN7TwoWire17beginTransmissionEh>

	if(_expType == I2Cexp_MCP23008)
    17e6:	89 a1       	ldd	r24, Y+33	; 0x21
    17e8:	82 30       	cpi	r24, 0x02	; 2
    17ea:	09 f0       	breq	.+2      	; 0x17ee <_ZN14hd44780_I2Cexp6ioinitEv+0x7a>
    17ec:	76 c0       	rjmp	.+236    	; 0x18da <_ZN14hd44780_I2Cexp6ioinitEv+0x166>
		 * within the same i2c connection by simply sending more bytes.
		 * This is necessary as the code uses back to back writes to perform
		 * the nibble updates as well as the toggling the enable signal.
		 * This methodology offers significant performance gains.
		 */
		Wire.write(5);	// point to IOCON
    17ee:	65 e0       	ldi	r22, 0x05	; 5
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	8f e6       	ldi	r24, 0x6F	; 111
    17f4:	95 e0       	ldi	r25, 0x05	; 5
    17f6:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7TwoWire5writeEi>
		Wire.write(0x20);// disable sequential mode (enables BYTE mode)
    17fa:	60 e2       	ldi	r22, 0x20	; 32
    17fc:	70 e0       	ldi	r23, 0x00	; 0
    17fe:	8f e6       	ldi	r24, 0x6F	; 111
    1800:	95 e0       	ldi	r25, 0x05	; 5
    1802:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    1806:	8f e6       	ldi	r24, 0x6F	; 111
    1808:	95 e0       	ldi	r25, 0x05	; 5
    180a:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN7TwoWire15endTransmissionEv>

		/*
		 * Now set up output port
		 */
		Wire.beginTransmission(_addr);
    180e:	68 a1       	ldd	r22, Y+32	; 0x20
    1810:	8f e6       	ldi	r24, 0x6F	; 111
    1812:	95 e0       	ldi	r25, 0x05	; 5
    1814:	0e 94 b9 18 	call	0x3172	; 0x3172 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t)0); // point to IODIR
    1818:	60 e0       	ldi	r22, 0x00	; 0
    181a:	8f e6       	ldi	r24, 0x6F	; 111
    181c:	95 e0       	ldi	r25, 0x05	; 5
    181e:	0e 94 68 18 	call	0x30d0	; 0x30d0 <_ZN7TwoWire5writeEh>
		Wire.write((uint8_t)0); // all pins output
    1822:	60 e0       	ldi	r22, 0x00	; 0
    1824:	8f e6       	ldi	r24, 0x6F	; 111
    1826:	95 e0       	ldi	r25, 0x05	; 5
    1828:	0e 94 68 18 	call	0x30d0	; 0x30d0 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    182c:	8f e6       	ldi	r24, 0x6F	; 111
    182e:	95 e0       	ldi	r25, 0x05	; 5
    1830:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN7TwoWire15endTransmissionEv>
	
		/*
		 * point chip to GPIO
		 */
		Wire.beginTransmission(_addr);
    1834:	68 a1       	ldd	r22, Y+32	; 0x20
    1836:	8f e6       	ldi	r24, 0x6F	; 111
    1838:	95 e0       	ldi	r25, 0x05	; 5
    183a:	0e 94 b9 18 	call	0x3172	; 0x3172 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write(9); // point to GPIO
    183e:	69 e0       	ldi	r22, 0x09	; 9
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	8f e6       	ldi	r24, 0x6F	; 111
    1844:	95 e0       	ldi	r25, 0x05	; 5
    1846:	0e 94 33 02 	call	0x466	; 0x466 <_ZN7TwoWire5writeEi>
    184a:	47 c0       	rjmp	.+142    	; 0x18da <_ZN14hd44780_I2Cexp6ioinitEv+0x166>

	/*
	 * First try to write 0xff to MCP23008 IODIR
	 * On a PCF8574 this will end up writing 0 and then ff to output port
	 */
	Wire.beginTransmission(address);
    184c:	61 2f       	mov	r22, r17
    184e:	8f e6       	ldi	r24, 0x6F	; 111
    1850:	95 e0       	ldi	r25, 0x05	; 5
    1852:	0e 94 b9 18 	call	0x3172	; 0x3172 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
    1856:	60 e0       	ldi	r22, 0x00	; 0
    1858:	8f e6       	ldi	r24, 0x6F	; 111
    185a:	95 e0       	ldi	r25, 0x05	; 5
    185c:	0e 94 68 18 	call	0x30d0	; 0x30d0 <_ZN7TwoWire5writeEh>
	Wire.write((uint8_t) 0xff);	// try to write to MCP23008 IODR
    1860:	6f ef       	ldi	r22, 0xFF	; 255
    1862:	8f e6       	ldi	r24, 0x6F	; 111
    1864:	95 e0       	ldi	r25, 0x05	; 5
    1866:	0e 94 68 18 	call	0x30d0	; 0x30d0 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    186a:	8f e6       	ldi	r24, 0x6F	; 111
    186c:	95 e0       	ldi	r25, 0x05	; 5
    186e:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now try to point MCP23008 to IODIR for read
	 * On a PCF8574 this will end up writing a 0 to the output port
	 */

	Wire.beginTransmission(address);
    1872:	61 2f       	mov	r22, r17
    1874:	8f e6       	ldi	r24, 0x6F	; 111
    1876:	95 e0       	ldi	r25, 0x05	; 5
    1878:	0e 94 b9 18 	call	0x3172	; 0x3172 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
    187c:	60 e0       	ldi	r22, 0x00	; 0
    187e:	8f e6       	ldi	r24, 0x6F	; 111
    1880:	95 e0       	ldi	r25, 0x05	; 5
    1882:	0e 94 68 18 	call	0x30d0	; 0x30d0 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    1886:	8f e6       	ldi	r24, 0x6F	; 111
    1888:	95 e0       	ldi	r25, 0x05	; 5
    188a:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now read a byte
	 * On a MCP23008 we should read the 0xff we wrote to IODIR
	 * On a PCF8574 we should read 0 since the output port was set to 0
	 */
	Wire.requestFrom((int)address, 1);
    188e:	61 2f       	mov	r22, r17
    1890:	70 e0       	ldi	r23, 0x00	; 0
    1892:	41 e0       	ldi	r20, 0x01	; 1
    1894:	50 e0       	ldi	r21, 0x00	; 0
    1896:	8f e6       	ldi	r24, 0x6F	; 111
    1898:	95 e0       	ldi	r25, 0x05	; 5
    189a:	0e 94 3a 19 	call	0x3274	; 0x3274 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    189e:	8f e6       	ldi	r24, 0x6F	; 111
    18a0:	95 e0       	ldi	r25, 0x05	; 5
    18a2:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <_ZN7TwoWire4readEv>
    18a6:	9c 01       	movw	r18, r24

	if(data == 0xff)
    18a8:	8f 3f       	cpi	r24, 0xFF	; 255
    18aa:	91 05       	cpc	r25, r1
    18ac:	29 f0       	breq	.+10     	; 0x18b8 <_ZN14hd44780_I2Cexp6ioinitEv+0x144>
	{
		chiptype = I2Cexp_MCP23008;
    18ae:	91 e0       	ldi	r25, 0x01	; 1
    18b0:	23 2b       	or	r18, r19
    18b2:	19 f0       	breq	.+6      	; 0x18ba <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	01 c0       	rjmp	.+2      	; 0x18ba <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    18b8:	92 e0       	ldi	r25, 0x02	; 2
	if(!_addr) // if we couldn't locate it, return error
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);
    18ba:	99 a3       	std	Y+33, r25	; 0x21

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
    18bc:	99 23       	and	r25, r25
    18be:	09 f1       	breq	.+66     	; 0x1902 <_ZN14hd44780_I2Cexp6ioinitEv+0x18e>
			return(hd44780::RV_EIO);

		if(_expType == I2Cexp_PCF8574)
    18c0:	91 30       	cpi	r25, 0x01	; 1
    18c2:	21 f4       	brne	.+8      	; 0x18cc <_ZN14hd44780_I2Cexp6ioinitEv+0x158>
			status = autocfg8574();		// go auto configure the pin mappings
    18c4:	ce 01       	movw	r24, r28
    18c6:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <_ZN14hd44780_I2Cexp11autocfg8574Ev>
    18ca:	03 c0       	rjmp	.+6      	; 0x18d2 <_ZN14hd44780_I2Cexp6ioinitEv+0x15e>
		else
			status = autocfgMCP23008();	// go auto configure the pin mappings
    18cc:	ce 01       	movw	r24, r28
    18ce:	0e 94 1c 0b 	call	0x1638	; 0x1638 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>
		if(status)
    18d2:	00 97       	sbiw	r24, 0x00	; 0
    18d4:	09 f4       	brne	.+2      	; 0x18d8 <_ZN14hd44780_I2Cexp6ioinitEv+0x164>
    18d6:	82 cf       	rjmp	.-252    	; 0x17dc <_ZN14hd44780_I2Cexp6ioinitEv+0x68>
    18d8:	16 c0       	rjmp	.+44     	; 0x1906 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
		 */
		Wire.beginTransmission(_addr);
		Wire.write(9); // point to GPIO
		
	}
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
    18da:	60 e0       	ldi	r22, 0x00	; 0
    18dc:	8f e6       	ldi	r24, 0x6F	; 111
    18de:	95 e0       	ldi	r25, 0x05	; 5
    18e0:	0e 94 68 18 	call	0x30d0	; 0x30d0 <_ZN7TwoWire5writeEh>
	if( (status = Wire.endTransmission()) ) // assignment
    18e4:	8f e6       	ldi	r24, 0x6F	; 111
    18e6:	95 e0       	ldi	r25, 0x05	; 5
    18e8:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN7TwoWire15endTransmissionEv>
    18ec:	21 e0       	ldi	r18, 0x01	; 1
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	81 11       	cpse	r24, r1
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <_ZN14hd44780_I2Cexp6ioinitEv+0x184>
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	88 27       	eor	r24, r24
    18fa:	99 27       	eor	r25, r25
    18fc:	82 1b       	sub	r24, r18
    18fe:	93 0b       	sbc	r25, r19
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
			return(hd44780::RV_EIO);
    1902:	8f ef       	ldi	r24, 0xFF	; 255
    1904:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
	if( (status = Wire.endTransmission()) ) // assignment
		status = hd44780::RV_EIO;

	return ( status );
}
    1906:	df 91       	pop	r29
    1908:	cf 91       	pop	r28
    190a:	1f 91       	pop	r17
    190c:	08 95       	ret

0000190e <_Z7readGPSv>:
{
	duration++;
}

void readGPS()
{
    190e:	8f 92       	push	r8
    1910:	9f 92       	push	r9
    1912:	af 92       	push	r10
    1914:	bf 92       	push	r11
    1916:	cf 92       	push	r12
    1918:	df 92       	push	r13
    191a:	ef 92       	push	r14
    191c:	ff 92       	push	r15
    191e:	0f 93       	push	r16
    1920:	1f 93       	push	r17
    1922:	cf 93       	push	r28
    1924:	df 93       	push	r29
	while(Serial1.available()) {						// as long as data is available on NMEA device
		unsigned char c =  buffer[count] = Serial1.read();	// write data into array
		Serial.write(c);								// and write data to PC (Serial)
		if(count < BUFFERSIZE-1) count++;				// to avoid buffer overflow
		if(c == '$') {
			ptr = buffer;
    1926:	95 e7       	ldi	r25, 0x75	; 117
    1928:	e9 2e       	mov	r14, r25
    192a:	93 e0       	ldi	r25, 0x03	; 3
    192c:	f9 2e       	mov	r15, r25
			while(ptr < buffer + BUFFERSIZE)  *ptr++=0;			// fill with 0
			count = 0;								// start of frame found, reset buffer
			buffer[count++] = c;						// store start of frame
    192e:	01 e0       	ldi	r16, 0x01	; 1
    1930:	24 e2       	ldi	r18, 0x24	; 36
    1932:	d2 2e       	mov	r13, r18
	duration++;
}

void readGPS()
{
	while(Serial1.available()) {						// as long as data is available on NMEA device
    1934:	86 e1       	ldi	r24, 0x16	; 22
    1936:	96 e0       	ldi	r25, 0x06	; 6
    1938:	0e 94 a4 1c 	call	0x3948	; 0x3948 <_ZN14HardwareSerial9availableEv>
    193c:	89 2b       	or	r24, r25
    193e:	b9 f1       	breq	.+110    	; 0x19ae <_Z7readGPSv+0xa0>
		unsigned char c =  buffer[count] = Serial1.read();	// write data into array
    1940:	c0 91 74 03 	lds	r28, 0x0374	; 0x800374 <count>
    1944:	d0 e0       	ldi	r29, 0x00	; 0
    1946:	86 e1       	ldi	r24, 0x16	; 22
    1948:	96 e0       	ldi	r25, 0x06	; 6
    194a:	0e 94 be 1c 	call	0x397c	; 0x397c <_ZN14HardwareSerial4readEv>
    194e:	18 2f       	mov	r17, r24
    1950:	cb 58       	subi	r28, 0x8B	; 139
    1952:	dc 4f       	sbci	r29, 0xFC	; 252
    1954:	88 83       	st	Y, r24
		Serial.write(c);								// and write data to PC (Serial)
    1956:	68 2f       	mov	r22, r24
    1958:	85 ec       	ldi	r24, 0xC5	; 197
    195a:	95 e0       	ldi	r25, 0x05	; 5
    195c:	0e 94 84 1b 	call	0x3708	; 0x3708 <_ZN7Serial_5writeEh>
		if(count < BUFFERSIZE-1) count++;				// to avoid buffer overflow
    1960:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <count>
    1964:	8f 33       	cpi	r24, 0x3F	; 63
    1966:	18 f4       	brcc	.+6      	; 0x196e <_Z7readGPSv+0x60>
    1968:	8f 5f       	subi	r24, 0xFF	; 255
    196a:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <count>
		if(c == '$') {
    196e:	14 32       	cpi	r17, 0x24	; 36
    1970:	c9 f4       	brne	.+50     	; 0x19a4 <_Z7readGPSv+0x96>
			ptr = buffer;
    1972:	f0 92 73 03 	sts	0x0373, r15	; 0x800373 <ptr+0x1>
    1976:	e0 92 72 03 	sts	0x0372, r14	; 0x800372 <ptr>
			while(ptr < buffer + BUFFERSIZE)  *ptr++=0;			// fill with 0
    197a:	e0 91 72 03 	lds	r30, 0x0372	; 0x800372 <ptr>
    197e:	f0 91 73 03 	lds	r31, 0x0373	; 0x800373 <ptr+0x1>
    1982:	83 e0       	ldi	r24, 0x03	; 3
    1984:	e5 3b       	cpi	r30, 0xB5	; 181
    1986:	f8 07       	cpc	r31, r24
    1988:	40 f4       	brcc	.+16     	; 0x199a <_Z7readGPSv+0x8c>
    198a:	cf 01       	movw	r24, r30
    198c:	01 96       	adiw	r24, 0x01	; 1
    198e:	90 93 73 03 	sts	0x0373, r25	; 0x800373 <ptr+0x1>
    1992:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <ptr>
    1996:	10 82       	st	Z, r1
    1998:	f0 cf       	rjmp	.-32     	; 0x197a <_Z7readGPSv+0x6c>
			count = 0;								// start of frame found, reset buffer
			buffer[count++] = c;						// store start of frame
    199a:	00 93 74 03 	sts	0x0374, r16	; 0x800374 <count>
    199e:	d0 92 75 03 	sts	0x0375, r13	; 0x800375 <buffer>
    19a2:	c8 cf       	rjmp	.-112    	; 0x1934 <_Z7readGPSv+0x26>
		}
		if(c == '*') {									// end of frame found, start conversion
    19a4:	1a 32       	cpi	r17, 0x2A	; 42
    19a6:	31 f6       	brne	.-116    	; 0x1934 <_Z7readGPSv+0x26>
			frame = 1;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <frame>
			break;
		}
	}
	if(frame) {											// full frame in buffer, so parse and decode
    19ae:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <frame>
    19b2:	88 23       	and	r24, r24
    19b4:	09 f4       	brne	.+2      	; 0x19b8 <_Z7readGPSv+0xaa>
    19b6:	69 c0       	rjmp	.+210    	; 0x1a8a <_Z7readGPSv+0x17c>
		frame = 0;
    19b8:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <frame>
		ptr = strstr(buffer, NMEA_TIME);				// scan for GPRMC keyword
    19bc:	67 e4       	ldi	r22, 0x47	; 71
    19be:	72 e0       	ldi	r23, 0x02	; 2
    19c0:	85 e7       	ldi	r24, 0x75	; 117
    19c2:	93 e0       	ldi	r25, 0x03	; 3
    19c4:	0e 94 17 2c 	call	0x582e	; 0x582e <strstr>
		if(ptr != NULL) {								// GPRMC keyword found, read time
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	29 f4       	brne	.+10     	; 0x19d6 <_Z7readGPSv+0xc8>
			break;
		}
	}
	if(frame) {											// full frame in buffer, so parse and decode
		frame = 0;
		ptr = strstr(buffer, NMEA_TIME);				// scan for GPRMC keyword
    19cc:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <ptr+0x1>
    19d0:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <ptr>
    19d4:	5a c0       	rjmp	.+180    	; 0x1a8a <_Z7readGPSv+0x17c>
		if(ptr != NULL) {								// GPRMC keyword found, read time
			ptr += strlen(NMEA_TIME);
    19d6:	06 96       	adiw	r24, 0x06	; 6
    19d8:	90 93 73 03 	sts	0x0373, r25	; 0x800373 <ptr+0x1>
    19dc:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <ptr>
			t = atol(ptr);								// parse time value into hour, minute, second
    19e0:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <atol>
    19e4:	6b 01       	movw	r12, r22
    19e6:	7c 01       	movw	r14, r24
    19e8:	60 93 6d 03 	sts	0x036D, r22	; 0x80036d <t>
    19ec:	70 93 6e 03 	sts	0x036E, r23	; 0x80036e <t+0x1>
    19f0:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <t+0x2>
    19f4:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <t+0x3>
			zeitLocal.ss_ = t % 100;
    19f8:	84 e6       	ldi	r24, 0x64	; 100
    19fa:	88 2e       	mov	r8, r24
    19fc:	91 2c       	mov	r9, r1
    19fe:	a1 2c       	mov	r10, r1
    1a00:	b1 2c       	mov	r11, r1
    1a02:	c7 01       	movw	r24, r14
    1a04:	b6 01       	movw	r22, r12
    1a06:	a5 01       	movw	r20, r10
    1a08:	94 01       	movw	r18, r8
    1a0a:	0e 94 bb 29 	call	0x5376	; 0x5376 <__divmodsi4>
    1a0e:	70 93 5a 03 	sts	0x035A, r23	; 0x80035a <zeitLocal+0x5>
    1a12:	60 93 59 03 	sts	0x0359, r22	; 0x800359 <zeitLocal+0x4>
			zeitLocal.mm_ = (t / 100) % 100;
    1a16:	ca 01       	movw	r24, r20
    1a18:	b9 01       	movw	r22, r18
    1a1a:	a5 01       	movw	r20, r10
    1a1c:	94 01       	movw	r18, r8
    1a1e:	0e 94 bb 29 	call	0x5376	; 0x5376 <__divmodsi4>
    1a22:	70 93 58 03 	sts	0x0358, r23	; 0x800358 <zeitLocal+0x3>
    1a26:	60 93 57 03 	sts	0x0357, r22	; 0x800357 <zeitLocal+0x2>
			zeitLocal.hh_ = ((t / 10000) + TIMEZONE) % 24;	
    1a2a:	c7 01       	movw	r24, r14
    1a2c:	b6 01       	movw	r22, r12
    1a2e:	20 e1       	ldi	r18, 0x10	; 16
    1a30:	37 e2       	ldi	r19, 0x27	; 39
    1a32:	40 e0       	ldi	r20, 0x00	; 0
    1a34:	50 e0       	ldi	r21, 0x00	; 0
    1a36:	0e 94 bb 29 	call	0x5376	; 0x5376 <__divmodsi4>
    1a3a:	ca 01       	movw	r24, r20
    1a3c:	b9 01       	movw	r22, r18
    1a3e:	6f 5f       	subi	r22, 0xFF	; 255
    1a40:	7f 4f       	sbci	r23, 0xFF	; 255
    1a42:	8f 4f       	sbci	r24, 0xFF	; 255
    1a44:	9f 4f       	sbci	r25, 0xFF	; 255
    1a46:	28 e1       	ldi	r18, 0x18	; 24
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e0       	ldi	r20, 0x00	; 0
    1a4c:	50 e0       	ldi	r21, 0x00	; 0
    1a4e:	0e 94 bb 29 	call	0x5376	; 0x5376 <__divmodsi4>
    1a52:	70 93 56 03 	sts	0x0356, r23	; 0x800356 <zeitLocal+0x1>
    1a56:	60 93 55 03 	sts	0x0355, r22	; 0x800355 <zeitLocal>
		
								
			ptr = buffer;
    1a5a:	85 e7       	ldi	r24, 0x75	; 117
    1a5c:	93 e0       	ldi	r25, 0x03	; 3
    1a5e:	90 93 73 03 	sts	0x0373, r25	; 0x800373 <ptr+0x1>
    1a62:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <ptr>
			while(ptr < buffer + BUFFERSIZE)  *ptr++=0;			// fill with 0
    1a66:	e0 91 72 03 	lds	r30, 0x0372	; 0x800372 <ptr>
    1a6a:	f0 91 73 03 	lds	r31, 0x0373	; 0x800373 <ptr+0x1>
    1a6e:	83 e0       	ldi	r24, 0x03	; 3
    1a70:	e5 3b       	cpi	r30, 0xB5	; 181
    1a72:	f8 07       	cpc	r31, r24
    1a74:	40 f4       	brcc	.+16     	; 0x1a86 <_Z7readGPSv+0x178>
    1a76:	cf 01       	movw	r24, r30
    1a78:	01 96       	adiw	r24, 0x01	; 1
    1a7a:	90 93 73 03 	sts	0x0373, r25	; 0x800373 <ptr+0x1>
    1a7e:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <ptr>
    1a82:	10 82       	st	Z, r1
    1a84:	f0 cf       	rjmp	.-32     	; 0x1a66 <_Z7readGPSv+0x158>
			count = 0;							// clear buffer and start new
    1a86:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <count>
		}
	}
	if (Serial.available()){							// if data is available from PC
    1a8a:	85 ec       	ldi	r24, 0xC5	; 197
    1a8c:	95 e0       	ldi	r25, 0x05	; 5
    1a8e:	0e 94 b3 1b 	call	0x3766	; 0x3766 <_ZN7Serial_9availableEv>
    1a92:	89 2b       	or	r24, r25
    1a94:	a9 f0       	breq	.+42     	; 0x1ac0 <_Z7readGPSv+0x1b2>
		Serial1.write(Serial.read());					// write it to the NMEA device
    1a96:	85 ec       	ldi	r24, 0xC5	; 197
    1a98:	95 e0       	ldi	r25, 0x05	; 5
    1a9a:	0e 94 c3 1b 	call	0x3786	; 0x3786 <_ZN7Serial_4readEv>
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    1a9e:	68 2f       	mov	r22, r24
    1aa0:	86 e1       	ldi	r24, 0x16	; 22
    1aa2:	96 e0       	ldi	r25, 0x06	; 6
	}
}
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	1f 91       	pop	r17
    1aaa:	0f 91       	pop	r16
    1aac:	ff 90       	pop	r15
    1aae:	ef 90       	pop	r14
    1ab0:	df 90       	pop	r13
    1ab2:	cf 90       	pop	r12
    1ab4:	bf 90       	pop	r11
    1ab6:	af 90       	pop	r10
    1ab8:	9f 90       	pop	r9
    1aba:	8f 90       	pop	r8
    1abc:	0c 94 10 1d 	jmp	0x3a20	; 0x3a20 <_ZN14HardwareSerial5writeEh>
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	1f 91       	pop	r17
    1ac6:	0f 91       	pop	r16
    1ac8:	ff 90       	pop	r15
    1aca:	ef 90       	pop	r14
    1acc:	df 90       	pop	r13
    1ace:	cf 90       	pop	r12
    1ad0:	bf 90       	pop	r11
    1ad2:	af 90       	pop	r10
    1ad4:	9f 90       	pop	r9
    1ad6:	8f 90       	pop	r8
    1ad8:	08 95       	ret

00001ada <loop>:
 * called repeatedly in an endless loop
 * 
 * \return void
 */
void loop()
{
    1ada:	cf 92       	push	r12
    1adc:	df 92       	push	r13
    1ade:	ef 92       	push	r14
    1ae0:	ff 92       	push	r15
    1ae2:	0f 93       	push	r16
    1ae4:	1f 93       	push	r17
	readGPS();
    1ae6:	0e 94 87 0c 	call	0x190e	; 0x190e <_Z7readGPSv>
	zeitGMT = zeitLocal;
    1aea:	88 e0       	ldi	r24, 0x08	; 8
    1aec:	e5 e5       	ldi	r30, 0x55	; 85
    1aee:	f3 e0       	ldi	r31, 0x03	; 3
    1af0:	a5 e6       	ldi	r26, 0x65	; 101
    1af2:	b3 e0       	ldi	r27, 0x03	; 3
    1af4:	01 90       	ld	r0, Z+
    1af6:	0d 92       	st	X+, r0
    1af8:	8a 95       	dec	r24
    1afa:	e1 f7       	brne	.-8      	; 0x1af4 <loop+0x1a>
	zeitGMT.hh_ -= 1;
    1afc:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <zeitGMT>
    1b00:	90 91 66 03 	lds	r25, 0x0366	; 0x800366 <zeitGMT+0x1>
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	90 93 66 03 	sts	0x0366, r25	; 0x800366 <zeitGMT+0x1>
    1b0a:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <zeitGMT>
		
	//Button-Pin auslesen
	if (digitalRead(btnPin) == HIGH)
    1b0e:	88 e0       	ldi	r24, 0x08	; 8
    1b10:	0e 94 3a 28 	call	0x5074	; 0x5074 <digitalRead>
    1b14:	01 97       	sbiw	r24, 0x01	; 1
    1b16:	41 f4       	brne	.+16     	; 0x1b28 <loop+0x4e>
		break;
	}
	if(newmenu >= 0) menu = newmenu;

	} //else Klammer
}
    1b18:	1f 91       	pop	r17
    1b1a:	0f 91       	pop	r16
    1b1c:	ff 90       	pop	r15
    1b1e:	ef 90       	pop	r14
    1b20:	df 90       	pop	r13
    1b22:	cf 90       	pop	r12
	zeitGMT.hh_ -= 1;
		
	//Button-Pin auslesen
	if (digitalRead(btnPin) == HIGH)
	{
		callibratePointer();
    1b24:	0c 94 20 06 	jmp	0xc40	; 0xc40 <_Z17callibratePointerv>
	}
	else
	{
	//PID-Regelung
	advance(); //Motor forward
    1b28:	0e 94 3a 06 	call	0xc74	; 0xc74 <_Z7advancev>
	currentMillis = millis();
    1b2c:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <millis>
    1b30:	60 93 b5 03 	sts	0x03B5, r22	; 0x8003b5 <currentMillis>
    1b34:	70 93 b6 03 	sts	0x03B6, r23	; 0x8003b6 <currentMillis+0x1>
    1b38:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <currentMillis+0x2>
    1b3c:	90 93 b8 03 	sts	0x03B8, r25	; 0x8003b8 <currentMillis+0x3>
	if (currentMillis - previousMillis > interval)
    1b40:	00 91 b9 03 	lds	r16, 0x03B9	; 0x8003b9 <previousMillis>
    1b44:	10 91 ba 03 	lds	r17, 0x03BA	; 0x8003ba <previousMillis+0x1>
    1b48:	20 91 bb 03 	lds	r18, 0x03BB	; 0x8003bb <previousMillis+0x2>
    1b4c:	30 91 bc 03 	lds	r19, 0x03BC	; 0x8003bc <previousMillis+0x3>
    1b50:	6b 01       	movw	r12, r22
    1b52:	7c 01       	movw	r14, r24
    1b54:	c0 1a       	sub	r12, r16
    1b56:	d1 0a       	sbc	r13, r17
    1b58:	e2 0a       	sbc	r14, r18
    1b5a:	f3 0a       	sbc	r15, r19
    1b5c:	00 91 0a 01 	lds	r16, 0x010A	; 0x80010a <interval>
    1b60:	10 91 0b 01 	lds	r17, 0x010B	; 0x80010b <interval+0x1>
    1b64:	01 2e       	mov	r0, r17
    1b66:	00 0c       	add	r0, r0
    1b68:	22 0b       	sbc	r18, r18
    1b6a:	33 0b       	sbc	r19, r19
    1b6c:	0c 15       	cp	r16, r12
    1b6e:	1d 05       	cpc	r17, r13
    1b70:	2e 05       	cpc	r18, r14
    1b72:	3f 05       	cpc	r19, r15
    1b74:	a4 f5       	brge	.+104    	; 0x1bde <loop+0x104>
	{
		previousMillis = currentMillis;
    1b76:	60 93 b9 03 	sts	0x03B9, r22	; 0x8003b9 <previousMillis>
    1b7a:	70 93 ba 03 	sts	0x03BA, r23	; 0x8003ba <previousMillis+0x1>
    1b7e:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <previousMillis+0x2>
    1b82:	90 93 bc 03 	sts	0x03BC, r25	; 0x8003bc <previousMillis+0x3>
		
		abs_duration=duration * 60 / 1920;
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e7       	ldi	r20, 0x70	; 112
    1b8c:	52 e4       	ldi	r21, 0x42	; 66
    1b8e:	60 91 0a 04 	lds	r22, 0x040A	; 0x80040a <duration>
    1b92:	70 91 0b 04 	lds	r23, 0x040B	; 0x80040b <duration+0x1>
    1b96:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <duration+0x2>
    1b9a:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <duration+0x3>
    1b9e:	0e 94 15 1b 	call	0x362a	; 0x362a <__mulsf3>
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	40 ef       	ldi	r20, 0xF0	; 240
    1ba8:	54 e4       	ldi	r21, 0x44	; 68
    1baa:	0e 94 b6 19 	call	0x336c	; 0x336c <__divsf3>
    1bae:	60 93 06 04 	sts	0x0406, r22	; 0x800406 <abs_duration>
    1bb2:	70 93 07 04 	sts	0x0407, r23	; 0x800407 <abs_duration+0x1>
    1bb6:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <abs_duration+0x2>
    1bba:	90 93 09 04 	sts	0x0409, r25	; 0x800409 <abs_duration+0x3>
			
		result=myPID.Compute();//PID conversion is complete and returns 1
    1bbe:	8d eb       	ldi	r24, 0xBD	; 189
    1bc0:	93 e0       	ldi	r25, 0x03	; 3
    1bc2:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <_ZN3PID7ComputeEv>
    1bc6:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <result>
		if(result)
    1bca:	88 23       	and	r24, r24
    1bcc:	41 f0       	breq	.+16     	; 0x1bde <loop+0x104>
		{
			duration = 0; //Count clear, wait for the next count
    1bce:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <duration>
    1bd2:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <duration+0x1>
    1bd6:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <duration+0x2>
    1bda:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <duration+0x3>
		}
	}
	Watch();
    1bde:	0e 94 b5 02 	call	0x56a	; 0x56a <_Z5Watchv>
	if(weckerStatus&&(zeitLocal.GetHours()==weckzeit.GetHours())&&(zeitLocal.GetMinutes()==weckzeit.GetMinutes())&&(zeitLocal.GetSeconds()==weckzeit.GetSeconds())) buzzer = 1;
    1be2:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <weckerStatus>
    1be6:	88 23       	and	r24, r24
    1be8:	11 f1       	breq	.+68     	; 0x1c2e <loop+0x154>
    1bea:	20 91 55 03 	lds	r18, 0x0355	; 0x800355 <zeitLocal>
    1bee:	30 91 56 03 	lds	r19, 0x0356	; 0x800356 <zeitLocal+0x1>
    1bf2:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <weckzeit>
    1bf6:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <weckzeit+0x1>
    1bfa:	28 17       	cp	r18, r24
    1bfc:	39 07       	cpc	r19, r25
    1bfe:	b9 f4       	brne	.+46     	; 0x1c2e <loop+0x154>
    1c00:	20 91 57 03 	lds	r18, 0x0357	; 0x800357 <zeitLocal+0x2>
    1c04:	30 91 58 03 	lds	r19, 0x0358	; 0x800358 <zeitLocal+0x3>
    1c08:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <weckzeit+0x2>
    1c0c:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <weckzeit+0x3>
    1c10:	28 17       	cp	r18, r24
    1c12:	39 07       	cpc	r19, r25
    1c14:	61 f4       	brne	.+24     	; 0x1c2e <loop+0x154>
    1c16:	20 91 59 03 	lds	r18, 0x0359	; 0x800359 <zeitLocal+0x4>
    1c1a:	30 91 5a 03 	lds	r19, 0x035A	; 0x80035a <zeitLocal+0x5>
    1c1e:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <weckzeit+0x4>
    1c22:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <weckzeit+0x5>
    1c26:	28 17       	cp	r18, r24
    1c28:	39 07       	cpc	r19, r25
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <loop+0x154>
    1c2c:	f2 c0       	rjmp	.+484    	; 0x1e12 <loop+0x338>
	input = getkey();
    1c2e:	0e 94 27 01 	call	0x24e	; 0x24e <_Z6getkeyv>
    1c32:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <_ZL5input+0x1>
    1c36:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <_ZL5input>
		if(buzzer)
    1c3a:	20 91 4a 03 	lds	r18, 0x034A	; 0x80034a <buzzer>
    1c3e:	30 91 4b 03 	lds	r19, 0x034B	; 0x80034b <buzzer+0x1>
    1c42:	23 2b       	or	r18, r19
    1c44:	c1 f0       	breq	.+48     	; 0x1c76 <loop+0x19c>
		{
			if(input){
    1c46:	89 2b       	or	r24, r25
    1c48:	49 f0       	breq	.+18     	; 0x1c5c <loop+0x182>
				lcd.noBacklight();
    1c4a:	84 ed       	ldi	r24, 0xD4	; 212
    1c4c:	94 e0       	ldi	r25, 0x04	; 4
    1c4e:	0e 94 48 14 	call	0x2890	; 0x2890 <_ZN7hd4478011noBacklightEv>
				buzzer = 0;
    1c52:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <buzzer+0x1>
    1c56:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <buzzer>
    1c5a:	0d c0       	rjmp	.+26     	; 0x1c76 <loop+0x19c>
			}
			else if(zeitLocal.GetSeconds()%2) lcd.backlight(); else lcd.noBacklight();
    1c5c:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <zeitLocal+0x4>
    1c60:	80 ff       	sbrs	r24, 0
    1c62:	05 c0       	rjmp	.+10     	; 0x1c6e <loop+0x194>
    1c64:	84 ed       	ldi	r24, 0xD4	; 212
    1c66:	94 e0       	ldi	r25, 0x04	; 4
    1c68:	0e 94 40 14 	call	0x2880	; 0x2880 <_ZN7hd447809backlightEv>
    1c6c:	04 c0       	rjmp	.+8      	; 0x1c76 <loop+0x19c>
    1c6e:	84 ed       	ldi	r24, 0xD4	; 212
    1c70:	94 e0       	ldi	r25, 0x04	; 4
    1c72:	0e 94 48 14 	call	0x2890	; 0x2890 <_ZN7hd4478011noBacklightEv>
		}
	if (watchmenu[menu].active) input = watchmenu[menu].active(input);
    1c76:	e0 91 30 03 	lds	r30, 0x0330	; 0x800330 <_ZL4menu>
    1c7a:	f0 91 31 03 	lds	r31, 0x0331	; 0x800331 <_ZL4menu+0x1>
    1c7e:	74 e0       	ldi	r23, 0x04	; 4
    1c80:	ee 0f       	add	r30, r30
    1c82:	ff 1f       	adc	r31, r31
    1c84:	7a 95       	dec	r23
    1c86:	e1 f7       	brne	.-8      	; 0x1c80 <loop+0x1a6>
    1c88:	ec 59       	subi	r30, 0x9C	; 156
    1c8a:	fd 4f       	sbci	r31, 0xFD	; 253
    1c8c:	02 84       	ldd	r0, Z+10	; 0x0a
    1c8e:	f3 85       	ldd	r31, Z+11	; 0x0b
    1c90:	e0 2d       	mov	r30, r0
    1c92:	30 97       	sbiw	r30, 0x00	; 0
    1c94:	49 f0       	breq	.+18     	; 0x1ca8 <loop+0x1ce>
    1c96:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <_ZL5input>
    1c9a:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <_ZL5input+0x1>
    1c9e:	09 95       	icall
    1ca0:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <_ZL5input+0x1>
    1ca4:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <_ZL5input>
		//! cyclic call to active function as long as menu n is active
	switch(input) {
    1ca8:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <_ZL5input>
    1cac:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <_ZL5input+0x1>
    1cb0:	83 30       	cpi	r24, 0x03	; 3
    1cb2:	91 05       	cpc	r25, r1
    1cb4:	d9 f1       	breq	.+118    	; 0x1d2c <loop+0x252>
    1cb6:	34 f4       	brge	.+12     	; 0x1cc4 <loop+0x1ea>
    1cb8:	81 30       	cpi	r24, 0x01	; 1
    1cba:	91 05       	cpc	r25, r1
    1cbc:	79 f0       	breq	.+30     	; 0x1cdc <loop+0x202>
    1cbe:	02 97       	sbiw	r24, 0x02	; 2
    1cc0:	19 f1       	breq	.+70     	; 0x1d08 <loop+0x22e>
    1cc2:	09 c0       	rjmp	.+18     	; 0x1cd6 <loop+0x1fc>
    1cc4:	85 30       	cpi	r24, 0x05	; 5
    1cc6:	91 05       	cpc	r25, r1
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <loop+0x1f2>
    1cca:	65 c0       	rjmp	.+202    	; 0x1d96 <loop+0x2bc>
    1ccc:	0c f4       	brge	.+2      	; 0x1cd0 <loop+0x1f6>
    1cce:	40 c0       	rjmp	.+128    	; 0x1d50 <loop+0x276>
    1cd0:	06 97       	sbiw	r24, 0x06	; 6
    1cd2:	09 f4       	brne	.+2      	; 0x1cd6 <loop+0x1fc>
    1cd4:	83 c0       	rjmp	.+262    	; 0x1ddc <loop+0x302>
		default:
		case X_KEY:
		case NO_KEY:
		newmenu = -1; // no changes made
    1cd6:	8f ef       	ldi	r24, 0xFF	; 255
    1cd8:	9f ef       	ldi	r25, 0xFF	; 255
    1cda:	11 c0       	rjmp	.+34     	; 0x1cfe <loop+0x224>
		break;
		case UP_KEY:
		lcd.clear();
    1cdc:	84 ed       	ldi	r24, 0xD4	; 212
    1cde:	94 e0       	ldi	r25, 0x04	; 4
    1ce0:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].up;
    1ce4:	e0 91 30 03 	lds	r30, 0x0330	; 0x800330 <_ZL4menu>
    1ce8:	f0 91 31 03 	lds	r31, 0x0331	; 0x800331 <_ZL4menu+0x1>
    1cec:	64 e0       	ldi	r22, 0x04	; 4
    1cee:	ee 0f       	add	r30, r30
    1cf0:	ff 1f       	adc	r31, r31
    1cf2:	6a 95       	dec	r22
    1cf4:	e1 f7       	brne	.-8      	; 0x1cee <loop+0x214>
    1cf6:	ec 59       	subi	r30, 0x9C	; 156
    1cf8:	fd 4f       	sbci	r31, 0xFD	; 253
    1cfa:	80 81       	ld	r24, Z
    1cfc:	91 81       	ldd	r25, Z+1	; 0x01
    1cfe:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <_ZL7newmenu+0x1>
    1d02:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <_ZL7newmenu>
		break;
    1d06:	7a c0       	rjmp	.+244    	; 0x1dfc <loop+0x322>
		case LEFT_KEY:
		lcd.clear();
    1d08:	84 ed       	ldi	r24, 0xD4	; 212
    1d0a:	94 e0       	ldi	r25, 0x04	; 4
    1d0c:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].left;
    1d10:	e0 91 30 03 	lds	r30, 0x0330	; 0x800330 <_ZL4menu>
    1d14:	f0 91 31 03 	lds	r31, 0x0331	; 0x800331 <_ZL4menu+0x1>
    1d18:	54 e0       	ldi	r21, 0x04	; 4
    1d1a:	ee 0f       	add	r30, r30
    1d1c:	ff 1f       	adc	r31, r31
    1d1e:	5a 95       	dec	r21
    1d20:	e1 f7       	brne	.-8      	; 0x1d1a <loop+0x240>
    1d22:	ec 59       	subi	r30, 0x9C	; 156
    1d24:	fd 4f       	sbci	r31, 0xFD	; 253
    1d26:	82 81       	ldd	r24, Z+2	; 0x02
    1d28:	93 81       	ldd	r25, Z+3	; 0x03
    1d2a:	e9 cf       	rjmp	.-46     	; 0x1cfe <loop+0x224>
		break;
		case DOWN_KEY:
		lcd.clear();
    1d2c:	84 ed       	ldi	r24, 0xD4	; 212
    1d2e:	94 e0       	ldi	r25, 0x04	; 4
    1d30:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].down;
    1d34:	e0 91 30 03 	lds	r30, 0x0330	; 0x800330 <_ZL4menu>
    1d38:	f0 91 31 03 	lds	r31, 0x0331	; 0x800331 <_ZL4menu+0x1>
    1d3c:	44 e0       	ldi	r20, 0x04	; 4
    1d3e:	ee 0f       	add	r30, r30
    1d40:	ff 1f       	adc	r31, r31
    1d42:	4a 95       	dec	r20
    1d44:	e1 f7       	brne	.-8      	; 0x1d3e <loop+0x264>
    1d46:	ec 59       	subi	r30, 0x9C	; 156
    1d48:	fd 4f       	sbci	r31, 0xFD	; 253
    1d4a:	84 81       	ldd	r24, Z+4	; 0x04
    1d4c:	95 81       	ldd	r25, Z+5	; 0x05
    1d4e:	d7 cf       	rjmp	.-82     	; 0x1cfe <loop+0x224>
		break;
		case RIGHT_KEY:
		lcd.clear();
    1d50:	84 ed       	ldi	r24, 0xD4	; 212
    1d52:	94 e0       	ldi	r25, 0x04	; 4
    1d54:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN7hd447805clearEv>
		if(watchmenu[menu].goright != NULL) {
    1d58:	e0 91 30 03 	lds	r30, 0x0330	; 0x800330 <_ZL4menu>
    1d5c:	f0 91 31 03 	lds	r31, 0x0331	; 0x800331 <_ZL4menu+0x1>
    1d60:	34 e0       	ldi	r19, 0x04	; 4
    1d62:	ee 0f       	add	r30, r30
    1d64:	ff 1f       	adc	r31, r31
    1d66:	3a 95       	dec	r19
    1d68:	e1 f7       	brne	.-8      	; 0x1d62 <loop+0x288>
    1d6a:	ec 59       	subi	r30, 0x9C	; 156
    1d6c:	fd 4f       	sbci	r31, 0xFD	; 253
    1d6e:	04 84       	ldd	r0, Z+12	; 0x0c
    1d70:	f5 85       	ldd	r31, Z+13	; 0x0d
    1d72:	e0 2d       	mov	r30, r0
    1d74:	30 97       	sbiw	r30, 0x00	; 0
    1d76:	09 f0       	breq	.+2      	; 0x1d7a <loop+0x2a0>
			//! call go right function with new value
			watchmenu[menu].goright();
    1d78:	09 95       	icall
		}
		newmenu = watchmenu[menu].right;
    1d7a:	e0 91 30 03 	lds	r30, 0x0330	; 0x800330 <_ZL4menu>
    1d7e:	f0 91 31 03 	lds	r31, 0x0331	; 0x800331 <_ZL4menu+0x1>
    1d82:	24 e0       	ldi	r18, 0x04	; 4
    1d84:	ee 0f       	add	r30, r30
    1d86:	ff 1f       	adc	r31, r31
    1d88:	2a 95       	dec	r18
    1d8a:	e1 f7       	brne	.-8      	; 0x1d84 <loop+0x2aa>
    1d8c:	ec 59       	subi	r30, 0x9C	; 156
    1d8e:	fd 4f       	sbci	r31, 0xFD	; 253
    1d90:	86 81       	ldd	r24, Z+6	; 0x06
    1d92:	97 81       	ldd	r25, Z+7	; 0x07
    1d94:	b4 cf       	rjmp	.-152    	; 0x1cfe <loop+0x224>
		break;
		case OK_KEY:
		lcd.clear();
    1d96:	84 ed       	ldi	r24, 0xD4	; 212
    1d98:	94 e0       	ldi	r25, 0x04	; 4
    1d9a:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN7hd447805clearEv>
		if(watchmenu[menu].positive != NULL) {
    1d9e:	e0 91 30 03 	lds	r30, 0x0330	; 0x800330 <_ZL4menu>
    1da2:	f0 91 31 03 	lds	r31, 0x0331	; 0x800331 <_ZL4menu+0x1>
    1da6:	94 e0       	ldi	r25, 0x04	; 4
    1da8:	ee 0f       	add	r30, r30
    1daa:	ff 1f       	adc	r31, r31
    1dac:	9a 95       	dec	r25
    1dae:	e1 f7       	brne	.-8      	; 0x1da8 <loop+0x2ce>
    1db0:	ec 59       	subi	r30, 0x9C	; 156
    1db2:	fd 4f       	sbci	r31, 0xFD	; 253
    1db4:	06 84       	ldd	r0, Z+14	; 0x0e
    1db6:	f7 85       	ldd	r31, Z+15	; 0x0f
    1db8:	e0 2d       	mov	r30, r0
    1dba:	30 97       	sbiw	r30, 0x00	; 0
    1dbc:	09 f0       	breq	.+2      	; 0x1dc0 <loop+0x2e6>
			//! call positive answer function with new value
			watchmenu[menu].positive();
    1dbe:	09 95       	icall
		}
		newmenu = watchmenu[menu].ok;
    1dc0:	e0 91 30 03 	lds	r30, 0x0330	; 0x800330 <_ZL4menu>
    1dc4:	f0 91 31 03 	lds	r31, 0x0331	; 0x800331 <_ZL4menu+0x1>
    1dc8:	84 e0       	ldi	r24, 0x04	; 4
    1dca:	ee 0f       	add	r30, r30
    1dcc:	ff 1f       	adc	r31, r31
    1dce:	8a 95       	dec	r24
    1dd0:	e1 f7       	brne	.-8      	; 0x1dca <loop+0x2f0>
    1dd2:	ec 59       	subi	r30, 0x9C	; 156
    1dd4:	fd 4f       	sbci	r31, 0xFD	; 253
    1dd6:	80 85       	ldd	r24, Z+8	; 0x08
    1dd8:	91 85       	ldd	r25, Z+9	; 0x09
    1dda:	91 cf       	rjmp	.-222    	; 0x1cfe <loop+0x224>
		break;
		case BK_KEY:
		lcd.clear();
    1ddc:	84 ed       	ldi	r24, 0xD4	; 212
    1dde:	94 e0       	ldi	r25, 0x04	; 4
    1de0:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN7hd447805clearEv>
		lcd.noCursor();
    1de4:	84 ed       	ldi	r24, 0xD4	; 212
    1de6:	94 e0       	ldi	r25, 0x04	; 4
    1de8:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <_ZN7hd447808noCursorEv>
		lcd.noBlink();
    1dec:	84 ed       	ldi	r24, 0xD4	; 212
    1dee:	94 e0       	ldi	r25, 0x04	; 4
    1df0:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <_ZN7hd447807noBlinkEv>
		newmenu = 0;
    1df4:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <_ZL7newmenu+0x1>
    1df8:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <_ZL7newmenu>
		break;
	}
	if(newmenu >= 0) menu = newmenu;
    1dfc:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <_ZL7newmenu>
    1e00:	90 91 2f 03 	lds	r25, 0x032F	; 0x80032f <_ZL7newmenu+0x1>
    1e04:	97 fd       	sbrc	r25, 7
    1e06:	0c c0       	rjmp	.+24     	; 0x1e20 <loop+0x346>
    1e08:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <_ZL4menu+0x1>
    1e0c:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <_ZL4menu>

	} //else Klammer
}
    1e10:	07 c0       	rjmp	.+14     	; 0x1e20 <loop+0x346>
		{
			duration = 0; //Count clear, wait for the next count
		}
	}
	Watch();
	if(weckerStatus&&(zeitLocal.GetHours()==weckzeit.GetHours())&&(zeitLocal.GetMinutes()==weckzeit.GetMinutes())&&(zeitLocal.GetSeconds()==weckzeit.GetSeconds())) buzzer = 1;
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <buzzer+0x1>
    1e1a:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <buzzer>
    1e1e:	07 cf       	rjmp	.-498    	; 0x1c2e <loop+0x154>
		break;
	}
	if(newmenu >= 0) menu = newmenu;

	} //else Klammer
}
    1e20:	1f 91       	pop	r17
    1e22:	0f 91       	pop	r16
    1e24:	ff 90       	pop	r15
    1e26:	ef 90       	pop	r14
    1e28:	df 90       	pop	r13
    1e2a:	cf 90       	pop	r12
    1e2c:	08 95       	ret

00001e2e <_ZN3PID7ComputeEv>:
	   else if(*myOutput < outMin) *myOutput = outMin;

	   if(outputSum > outMax) outputSum= outMax;
	   else if(outputSum < outMin) outputSum= outMin;
   }
}
    1e2e:	2f 92       	push	r2
    1e30:	3f 92       	push	r3
    1e32:	4f 92       	push	r4
    1e34:	5f 92       	push	r5
    1e36:	6f 92       	push	r6
    1e38:	7f 92       	push	r7
    1e3a:	8f 92       	push	r8
    1e3c:	9f 92       	push	r9
    1e3e:	af 92       	push	r10
    1e40:	bf 92       	push	r11
    1e42:	cf 92       	push	r12
    1e44:	df 92       	push	r13
    1e46:	ef 92       	push	r14
    1e48:	ff 92       	push	r15
    1e4a:	0f 93       	push	r16
    1e4c:	1f 93       	push	r17
    1e4e:	cf 93       	push	r28
    1e50:	df 93       	push	r29
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	60 97       	sbiw	r28, 0x10	; 16
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	dc 01       	movw	r26, r24
    1e64:	da 96       	adiw	r26, 0x3a	; 58
    1e66:	bc 91       	ld	r27, X
    1e68:	b9 83       	std	Y+1, r27	; 0x01
    1e6a:	b1 11       	cpse	r27, r1
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <_ZN3PID7ComputeEv+0x44>
    1e6e:	19 82       	std	Y+1, r1	; 0x01
    1e70:	2b c1       	rjmp	.+598    	; 0x20c8 <_ZN3PID7ComputeEv+0x29a>
    1e72:	98 8b       	std	Y+16, r25	; 0x10
    1e74:	8f 87       	std	Y+15, r24	; 0x0f
    1e76:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <millis>
    1e7a:	6e 83       	std	Y+6, r22	; 0x06
    1e7c:	7f 83       	std	Y+7, r23	; 0x07
    1e7e:	88 87       	std	Y+8, r24	; 0x08
    1e80:	99 87       	std	Y+9, r25	; 0x09
    1e82:	ef 85       	ldd	r30, Y+15	; 0x0f
    1e84:	f8 89       	ldd	r31, Y+16	; 0x10
    1e86:	82 a1       	ldd	r24, Z+34	; 0x22
    1e88:	93 a1       	ldd	r25, Z+35	; 0x23
    1e8a:	a4 a1       	ldd	r26, Z+36	; 0x24
    1e8c:	b5 a1       	ldd	r27, Z+37	; 0x25
    1e8e:	4e 81       	ldd	r20, Y+6	; 0x06
    1e90:	5f 81       	ldd	r21, Y+7	; 0x07
    1e92:	68 85       	ldd	r22, Y+8	; 0x08
    1e94:	79 85       	ldd	r23, Y+9	; 0x09
    1e96:	48 1b       	sub	r20, r24
    1e98:	59 0b       	sbc	r21, r25
    1e9a:	6a 0b       	sbc	r22, r26
    1e9c:	7b 0b       	sbc	r23, r27
    1e9e:	86 a5       	ldd	r24, Z+46	; 0x2e
    1ea0:	97 a5       	ldd	r25, Z+47	; 0x2f
    1ea2:	a0 a9       	ldd	r26, Z+48	; 0x30
    1ea4:	b1 a9       	ldd	r27, Z+49	; 0x31
    1ea6:	48 17       	cp	r20, r24
    1ea8:	59 07       	cpc	r21, r25
    1eaa:	6a 07       	cpc	r22, r26
    1eac:	7b 07       	cpc	r23, r27
    1eae:	f8 f2       	brcs	.-66     	; 0x1e6e <_ZN3PID7ComputeEv+0x40>
    1eb0:	04 8c       	ldd	r0, Z+28	; 0x1c
    1eb2:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1eb4:	e0 2d       	mov	r30, r0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	91 81       	ldd	r25, Z+1	; 0x01
    1eba:	a2 81       	ldd	r26, Z+2	; 0x02
    1ebc:	b3 81       	ldd	r27, Z+3	; 0x03
    1ebe:	8a 83       	std	Y+2, r24	; 0x02
    1ec0:	9b 83       	std	Y+3, r25	; 0x03
    1ec2:	ac 83       	std	Y+4, r26	; 0x04
    1ec4:	bd 83       	std	Y+5, r27	; 0x05
    1ec6:	af 85       	ldd	r26, Y+15	; 0x0f
    1ec8:	b8 89       	ldd	r27, Y+16	; 0x10
    1eca:	90 96       	adiw	r26, 0x20	; 32
    1ecc:	ed 91       	ld	r30, X+
    1ece:	fc 91       	ld	r31, X
    1ed0:	91 97       	sbiw	r26, 0x21	; 33
    1ed2:	2a 81       	ldd	r18, Y+2	; 0x02
    1ed4:	3b 81       	ldd	r19, Y+3	; 0x03
    1ed6:	4c 81       	ldd	r20, Y+4	; 0x04
    1ed8:	5d 81       	ldd	r21, Y+5	; 0x05
    1eda:	60 81       	ld	r22, Z
    1edc:	71 81       	ldd	r23, Z+1	; 0x01
    1ede:	82 81       	ldd	r24, Z+2	; 0x02
    1ee0:	93 81       	ldd	r25, Z+3	; 0x03
    1ee2:	0e 94 44 19 	call	0x3288	; 0x3288 <__subsf3>
    1ee6:	4b 01       	movw	r8, r22
    1ee8:	5c 01       	movw	r10, r24
    1eea:	ef 85       	ldd	r30, Y+15	; 0x0f
    1eec:	f8 89       	ldd	r31, Y+16	; 0x10
    1eee:	22 a5       	ldd	r18, Z+42	; 0x2a
    1ef0:	33 a5       	ldd	r19, Z+43	; 0x2b
    1ef2:	44 a5       	ldd	r20, Z+44	; 0x2c
    1ef4:	55 a5       	ldd	r21, Z+45	; 0x2d
    1ef6:	6a 81       	ldd	r22, Y+2	; 0x02
    1ef8:	7b 81       	ldd	r23, Y+3	; 0x03
    1efa:	8c 81       	ldd	r24, Y+4	; 0x04
    1efc:	9d 81       	ldd	r25, Y+5	; 0x05
    1efe:	0e 94 44 19 	call	0x3288	; 0x3288 <__subsf3>
    1f02:	6b 01       	movw	r12, r22
    1f04:	7c 01       	movw	r14, r24
    1f06:	af 85       	ldd	r26, Y+15	; 0x0f
    1f08:	b8 89       	ldd	r27, Y+16	; 0x10
    1f0a:	50 96       	adiw	r26, 0x10	; 16
    1f0c:	2d 91       	ld	r18, X+
    1f0e:	3d 91       	ld	r19, X+
    1f10:	4d 91       	ld	r20, X+
    1f12:	5c 91       	ld	r21, X
    1f14:	53 97       	sbiw	r26, 0x13	; 19
    1f16:	c5 01       	movw	r24, r10
    1f18:	b4 01       	movw	r22, r8
    1f1a:	0e 94 15 1b 	call	0x362a	; 0x362a <__mulsf3>
    1f1e:	ef 85       	ldd	r30, Y+15	; 0x0f
    1f20:	f8 89       	ldd	r31, Y+16	; 0x10
    1f22:	26 a1       	ldd	r18, Z+38	; 0x26
    1f24:	37 a1       	ldd	r19, Z+39	; 0x27
    1f26:	40 a5       	ldd	r20, Z+40	; 0x28
    1f28:	51 a5       	ldd	r21, Z+41	; 0x29
    1f2a:	0e 94 45 19 	call	0x328a	; 0x328a <__addsf3>
    1f2e:	2b 01       	movw	r4, r22
    1f30:	3c 01       	movw	r6, r24
    1f32:	af 85       	ldd	r26, Y+15	; 0x0f
    1f34:	b8 89       	ldd	r27, Y+16	; 0x10
    1f36:	96 96       	adiw	r26, 0x26	; 38
    1f38:	6d 93       	st	X+, r22
    1f3a:	7d 93       	st	X+, r23
    1f3c:	8d 93       	st	X+, r24
    1f3e:	9c 93       	st	X, r25
    1f40:	99 97       	sbiw	r26, 0x29	; 41
    1f42:	db 96       	adiw	r26, 0x3b	; 59
    1f44:	bc 91       	ld	r27, X
    1f46:	ba 87       	std	Y+10, r27	; 0x0a
    1f48:	b1 11       	cpse	r27, r1
    1f4a:	18 c0       	rjmp	.+48     	; 0x1f7c <_ZN3PID7ComputeEv+0x14e>
    1f4c:	ef 85       	ldd	r30, Y+15	; 0x0f
    1f4e:	f8 89       	ldd	r31, Y+16	; 0x10
    1f50:	24 85       	ldd	r18, Z+12	; 0x0c
    1f52:	35 85       	ldd	r19, Z+13	; 0x0d
    1f54:	46 85       	ldd	r20, Z+14	; 0x0e
    1f56:	57 85       	ldd	r21, Z+15	; 0x0f
    1f58:	c7 01       	movw	r24, r14
    1f5a:	b6 01       	movw	r22, r12
    1f5c:	0e 94 15 1b 	call	0x362a	; 0x362a <__mulsf3>
    1f60:	9b 01       	movw	r18, r22
    1f62:	ac 01       	movw	r20, r24
    1f64:	c3 01       	movw	r24, r6
    1f66:	b2 01       	movw	r22, r4
    1f68:	0e 94 44 19 	call	0x3288	; 0x3288 <__subsf3>
    1f6c:	af 85       	ldd	r26, Y+15	; 0x0f
    1f6e:	b8 89       	ldd	r27, Y+16	; 0x10
    1f70:	96 96       	adiw	r26, 0x26	; 38
    1f72:	6d 93       	st	X+, r22
    1f74:	7d 93       	st	X+, r23
    1f76:	8d 93       	st	X+, r24
    1f78:	9c 93       	st	X, r25
    1f7a:	99 97       	sbiw	r26, 0x29	; 41
    1f7c:	ef 85       	ldd	r30, Y+15	; 0x0f
    1f7e:	f8 89       	ldd	r31, Y+16	; 0x10
    1f80:	46 a0       	ldd	r4, Z+38	; 0x26
    1f82:	57 a0       	ldd	r5, Z+39	; 0x27
    1f84:	60 a4       	ldd	r6, Z+40	; 0x28
    1f86:	71 a4       	ldd	r7, Z+41	; 0x29
    1f88:	16 a9       	ldd	r17, Z+54	; 0x36
    1f8a:	07 a9       	ldd	r16, Z+55	; 0x37
    1f8c:	30 ac       	ldd	r3, Z+56	; 0x38
    1f8e:	21 ac       	ldd	r2, Z+57	; 0x39
    1f90:	21 2f       	mov	r18, r17
    1f92:	30 2f       	mov	r19, r16
    1f94:	43 2d       	mov	r20, r3
    1f96:	52 2d       	mov	r21, r2
    1f98:	c3 01       	movw	r24, r6
    1f9a:	b2 01       	movw	r22, r4
    1f9c:	0e 94 10 1b 	call	0x3620	; 0x3620 <__gesf2>
    1fa0:	18 16       	cp	r1, r24
    1fa2:	2c f4       	brge	.+10     	; 0x1fae <_ZN3PID7ComputeEv+0x180>
    1fa4:	81 2f       	mov	r24, r17
    1fa6:	90 2f       	mov	r25, r16
    1fa8:	a3 2d       	mov	r26, r3
    1faa:	b2 2d       	mov	r27, r2
    1fac:	18 c0       	rjmp	.+48     	; 0x1fde <_ZN3PID7ComputeEv+0x1b0>
    1fae:	af 85       	ldd	r26, Y+15	; 0x0f
    1fb0:	b8 89       	ldd	r27, Y+16	; 0x10
    1fb2:	d2 96       	adiw	r26, 0x32	; 50
    1fb4:	8d 91       	ld	r24, X+
    1fb6:	9d 91       	ld	r25, X+
    1fb8:	0d 90       	ld	r0, X+
    1fba:	bc 91       	ld	r27, X
    1fbc:	a0 2d       	mov	r26, r0
    1fbe:	8b 87       	std	Y+11, r24	; 0x0b
    1fc0:	9c 87       	std	Y+12, r25	; 0x0c
    1fc2:	ad 87       	std	Y+13, r26	; 0x0d
    1fc4:	be 87       	std	Y+14, r27	; 0x0e
    1fc6:	9c 01       	movw	r18, r24
    1fc8:	ad 01       	movw	r20, r26
    1fca:	c3 01       	movw	r24, r6
    1fcc:	b2 01       	movw	r22, r4
    1fce:	0e 94 b1 19 	call	0x3362	; 0x3362 <__cmpsf2>
    1fd2:	87 ff       	sbrs	r24, 7
    1fd4:	0a c0       	rjmp	.+20     	; 0x1fea <_ZN3PID7ComputeEv+0x1bc>
    1fd6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fd8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fda:	ad 85       	ldd	r26, Y+13	; 0x0d
    1fdc:	be 85       	ldd	r27, Y+14	; 0x0e
    1fde:	ef 85       	ldd	r30, Y+15	; 0x0f
    1fe0:	f8 89       	ldd	r31, Y+16	; 0x10
    1fe2:	86 a3       	std	Z+38, r24	; 0x26
    1fe4:	97 a3       	std	Z+39, r25	; 0x27
    1fe6:	a0 a7       	std	Z+40, r26	; 0x28
    1fe8:	b1 a7       	std	Z+41, r27	; 0x29
    1fea:	fa 85       	ldd	r31, Y+10	; 0x0a
    1fec:	ff 23       	and	r31, r31
    1fee:	79 f0       	breq	.+30     	; 0x200e <_ZN3PID7ComputeEv+0x1e0>
    1ff0:	af 85       	ldd	r26, Y+15	; 0x0f
    1ff2:	b8 89       	ldd	r27, Y+16	; 0x10
    1ff4:	1c 96       	adiw	r26, 0x0c	; 12
    1ff6:	2d 91       	ld	r18, X+
    1ff8:	3d 91       	ld	r19, X+
    1ffa:	4d 91       	ld	r20, X+
    1ffc:	5c 91       	ld	r21, X
    1ffe:	1f 97       	sbiw	r26, 0x0f	; 15
    2000:	c5 01       	movw	r24, r10
    2002:	b4 01       	movw	r22, r8
    2004:	0e 94 15 1b 	call	0x362a	; 0x362a <__mulsf3>
    2008:	4b 01       	movw	r8, r22
    200a:	5c 01       	movw	r10, r24
    200c:	03 c0       	rjmp	.+6      	; 0x2014 <_ZN3PID7ComputeEv+0x1e6>
    200e:	81 2c       	mov	r8, r1
    2010:	91 2c       	mov	r9, r1
    2012:	54 01       	movw	r10, r8
    2014:	ef 85       	ldd	r30, Y+15	; 0x0f
    2016:	f8 89       	ldd	r31, Y+16	; 0x10
    2018:	24 89       	ldd	r18, Z+20	; 0x14
    201a:	35 89       	ldd	r19, Z+21	; 0x15
    201c:	46 89       	ldd	r20, Z+22	; 0x16
    201e:	57 89       	ldd	r21, Z+23	; 0x17
    2020:	c7 01       	movw	r24, r14
    2022:	b6 01       	movw	r22, r12
    2024:	0e 94 15 1b 	call	0x362a	; 0x362a <__mulsf3>
    2028:	9b 01       	movw	r18, r22
    202a:	ac 01       	movw	r20, r24
    202c:	af 85       	ldd	r26, Y+15	; 0x0f
    202e:	b8 89       	ldd	r27, Y+16	; 0x10
    2030:	96 96       	adiw	r26, 0x26	; 38
    2032:	6d 91       	ld	r22, X+
    2034:	7d 91       	ld	r23, X+
    2036:	8d 91       	ld	r24, X+
    2038:	9c 91       	ld	r25, X
    203a:	99 97       	sbiw	r26, 0x29	; 41
    203c:	0e 94 44 19 	call	0x3288	; 0x3288 <__subsf3>
    2040:	a5 01       	movw	r20, r10
    2042:	94 01       	movw	r18, r8
    2044:	0e 94 45 19 	call	0x328a	; 0x328a <__addsf3>
    2048:	6b 01       	movw	r12, r22
    204a:	7c 01       	movw	r14, r24
    204c:	9b 01       	movw	r18, r22
    204e:	ac 01       	movw	r20, r24
    2050:	61 2f       	mov	r22, r17
    2052:	70 2f       	mov	r23, r16
    2054:	83 2d       	mov	r24, r3
    2056:	92 2d       	mov	r25, r2
    2058:	0e 94 b1 19 	call	0x3362	; 0x3362 <__cmpsf2>
    205c:	87 fd       	sbrc	r24, 7
    205e:	14 c0       	rjmp	.+40     	; 0x2088 <_ZN3PID7ComputeEv+0x25a>
    2060:	ef 85       	ldd	r30, Y+15	; 0x0f
    2062:	f8 89       	ldd	r31, Y+16	; 0x10
    2064:	12 a9       	ldd	r17, Z+50	; 0x32
    2066:	03 a9       	ldd	r16, Z+51	; 0x33
    2068:	34 a8       	ldd	r3, Z+52	; 0x34
    206a:	25 a8       	ldd	r2, Z+53	; 0x35
    206c:	21 2f       	mov	r18, r17
    206e:	30 2f       	mov	r19, r16
    2070:	43 2d       	mov	r20, r3
    2072:	52 2d       	mov	r21, r2
    2074:	b6 01       	movw	r22, r12
    2076:	c7 01       	movw	r24, r14
    2078:	0e 94 b1 19 	call	0x3362	; 0x3362 <__cmpsf2>
    207c:	87 fd       	sbrc	r24, 7
    207e:	04 c0       	rjmp	.+8      	; 0x2088 <_ZN3PID7ComputeEv+0x25a>
    2080:	1c 2d       	mov	r17, r12
    2082:	0d 2d       	mov	r16, r13
    2084:	3e 2c       	mov	r3, r14
    2086:	2f 2c       	mov	r2, r15
    2088:	af 85       	ldd	r26, Y+15	; 0x0f
    208a:	b8 89       	ldd	r27, Y+16	; 0x10
    208c:	5e 96       	adiw	r26, 0x1e	; 30
    208e:	ed 91       	ld	r30, X+
    2090:	fc 91       	ld	r31, X
    2092:	5f 97       	sbiw	r26, 0x1f	; 31
    2094:	81 2f       	mov	r24, r17
    2096:	90 2f       	mov	r25, r16
    2098:	a3 2d       	mov	r26, r3
    209a:	b2 2d       	mov	r27, r2
    209c:	80 83       	st	Z, r24
    209e:	91 83       	std	Z+1, r25	; 0x01
    20a0:	a2 83       	std	Z+2, r26	; 0x02
    20a2:	b3 83       	std	Z+3, r27	; 0x03
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	9b 81       	ldd	r25, Y+3	; 0x03
    20a8:	ac 81       	ldd	r26, Y+4	; 0x04
    20aa:	bd 81       	ldd	r27, Y+5	; 0x05
    20ac:	ef 85       	ldd	r30, Y+15	; 0x0f
    20ae:	f8 89       	ldd	r31, Y+16	; 0x10
    20b0:	82 a7       	std	Z+42, r24	; 0x2a
    20b2:	93 a7       	std	Z+43, r25	; 0x2b
    20b4:	a4 a7       	std	Z+44, r26	; 0x2c
    20b6:	b5 a7       	std	Z+45, r27	; 0x2d
    20b8:	8e 81       	ldd	r24, Y+6	; 0x06
    20ba:	9f 81       	ldd	r25, Y+7	; 0x07
    20bc:	a8 85       	ldd	r26, Y+8	; 0x08
    20be:	b9 85       	ldd	r27, Y+9	; 0x09
    20c0:	82 a3       	std	Z+34, r24	; 0x22
    20c2:	93 a3       	std	Z+35, r25	; 0x23
    20c4:	a4 a3       	std	Z+36, r26	; 0x24
    20c6:	b5 a3       	std	Z+37, r27	; 0x25
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	60 96       	adiw	r28, 0x10	; 16
    20cc:	0f b6       	in	r0, 0x3f	; 63
    20ce:	f8 94       	cli
    20d0:	de bf       	out	0x3e, r29	; 62
    20d2:	0f be       	out	0x3f, r0	; 63
    20d4:	cd bf       	out	0x3d, r28	; 61
    20d6:	df 91       	pop	r29
    20d8:	cf 91       	pop	r28
    20da:	1f 91       	pop	r17
    20dc:	0f 91       	pop	r16
    20de:	ff 90       	pop	r15
    20e0:	ef 90       	pop	r14
    20e2:	df 90       	pop	r13
    20e4:	cf 90       	pop	r12
    20e6:	bf 90       	pop	r11
    20e8:	af 90       	pop	r10
    20ea:	9f 90       	pop	r9
    20ec:	8f 90       	pop	r8
    20ee:	7f 90       	pop	r7
    20f0:	6f 90       	pop	r6
    20f2:	5f 90       	pop	r5
    20f4:	4f 90       	pop	r4
    20f6:	3f 90       	pop	r3
    20f8:	2f 90       	pop	r2
    20fa:	08 95       	ret

000020fc <_ZN3PID10SetTuningsEdddi>:
    20fc:	4f 92       	push	r4
    20fe:	5f 92       	push	r5
    2100:	6f 92       	push	r6
    2102:	7f 92       	push	r7
    2104:	8f 92       	push	r8
    2106:	9f 92       	push	r9
    2108:	af 92       	push	r10
    210a:	bf 92       	push	r11
    210c:	cf 92       	push	r12
    210e:	df 92       	push	r13
    2110:	ef 92       	push	r14
    2112:	ff 92       	push	r15
    2114:	0f 93       	push	r16
    2116:	1f 93       	push	r17
    2118:	cf 93       	push	r28
    211a:	df 93       	push	r29
    211c:	00 d0       	rcall	.+0      	; 0x211e <_ZN3PID10SetTuningsEdddi+0x22>
    211e:	00 d0       	rcall	.+0      	; 0x2120 <_ZN3PID10SetTuningsEdddi+0x24>
    2120:	00 d0       	rcall	.+0      	; 0x2122 <_ZN3PID10SetTuningsEdddi+0x26>
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    2126:	9e 83       	std	Y+6, r25	; 0x06
    2128:	8d 83       	std	Y+5, r24	; 0x05
    212a:	49 83       	std	Y+1, r20	; 0x01
    212c:	5a 83       	std	Y+2, r21	; 0x02
    212e:	6b 83       	std	Y+3, r22	; 0x03
    2130:	7c 83       	std	Y+4, r23	; 0x04
    2132:	28 01       	movw	r4, r16
    2134:	39 01       	movw	r6, r18
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	a9 01       	movw	r20, r18
    213c:	69 81       	ldd	r22, Y+1	; 0x01
    213e:	7a 81       	ldd	r23, Y+2	; 0x02
    2140:	8b 81       	ldd	r24, Y+3	; 0x03
    2142:	9c 81       	ldd	r25, Y+4	; 0x04
    2144:	0e 94 b1 19 	call	0x3362	; 0x3362 <__cmpsf2>
    2148:	87 fd       	sbrc	r24, 7
    214a:	97 c0       	rjmp	.+302    	; 0x227a <_ZN3PID10SetTuningsEdddi+0x17e>
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	a9 01       	movw	r20, r18
    2152:	c3 01       	movw	r24, r6
    2154:	b2 01       	movw	r22, r4
    2156:	0e 94 b1 19 	call	0x3362	; 0x3362 <__cmpsf2>
    215a:	87 fd       	sbrc	r24, 7
    215c:	8e c0       	rjmp	.+284    	; 0x227a <_ZN3PID10SetTuningsEdddi+0x17e>
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	a9 01       	movw	r20, r18
    2164:	c7 01       	movw	r24, r14
    2166:	b6 01       	movw	r22, r12
    2168:	0e 94 b1 19 	call	0x3362	; 0x3362 <__cmpsf2>
    216c:	87 fd       	sbrc	r24, 7
    216e:	85 c0       	rjmp	.+266    	; 0x227a <_ZN3PID10SetTuningsEdddi+0x17e>
    2170:	ad 81       	ldd	r26, Y+5	; 0x05
    2172:	be 81       	ldd	r27, Y+6	; 0x06
    2174:	5b 96       	adiw	r26, 0x1b	; 27
    2176:	bc 92       	st	X, r11
    2178:	ae 92       	st	-X, r10
    217a:	5a 97       	sbiw	r26, 0x1a	; 26
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	aa 94       	dec	r10
    2180:	ab 28       	or	r10, r11
    2182:	09 f0       	breq	.+2      	; 0x2186 <_ZN3PID10SetTuningsEdddi+0x8a>
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	ed 81       	ldd	r30, Y+5	; 0x05
    2188:	fe 81       	ldd	r31, Y+6	; 0x06
    218a:	83 af       	std	Z+59, r24	; 0x3b
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	9a 81       	ldd	r25, Y+2	; 0x02
    2190:	ab 81       	ldd	r26, Y+3	; 0x03
    2192:	bc 81       	ldd	r27, Y+4	; 0x04
    2194:	80 83       	st	Z, r24
    2196:	91 83       	std	Z+1, r25	; 0x01
    2198:	a2 83       	std	Z+2, r26	; 0x02
    219a:	b3 83       	std	Z+3, r27	; 0x03
    219c:	44 82       	std	Z+4, r4	; 0x04
    219e:	55 82       	std	Z+5, r5	; 0x05
    21a0:	66 82       	std	Z+6, r6	; 0x06
    21a2:	77 82       	std	Z+7, r7	; 0x07
    21a4:	c0 86       	std	Z+8, r12	; 0x08
    21a6:	d1 86       	std	Z+9, r13	; 0x09
    21a8:	e2 86       	std	Z+10, r14	; 0x0a
    21aa:	f3 86       	std	Z+11, r15	; 0x0b
    21ac:	66 a5       	ldd	r22, Z+46	; 0x2e
    21ae:	77 a5       	ldd	r23, Z+47	; 0x2f
    21b0:	80 a9       	ldd	r24, Z+48	; 0x30
    21b2:	91 a9       	ldd	r25, Z+49	; 0x31
    21b4:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__floatunsisf>
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	4a e7       	ldi	r20, 0x7A	; 122
    21be:	54 e4       	ldi	r21, 0x44	; 68
    21c0:	0e 94 b6 19 	call	0x336c	; 0x336c <__divsf3>
    21c4:	4b 01       	movw	r8, r22
    21c6:	5c 01       	movw	r10, r24
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	9a 81       	ldd	r25, Y+2	; 0x02
    21cc:	ab 81       	ldd	r26, Y+3	; 0x03
    21ce:	bc 81       	ldd	r27, Y+4	; 0x04
    21d0:	ed 81       	ldd	r30, Y+5	; 0x05
    21d2:	fe 81       	ldd	r31, Y+6	; 0x06
    21d4:	84 87       	std	Z+12, r24	; 0x0c
    21d6:	95 87       	std	Z+13, r25	; 0x0d
    21d8:	a6 87       	std	Z+14, r26	; 0x0e
    21da:	b7 87       	std	Z+15, r27	; 0x0f
    21dc:	a5 01       	movw	r20, r10
    21de:	94 01       	movw	r18, r8
    21e0:	c3 01       	movw	r24, r6
    21e2:	b2 01       	movw	r22, r4
    21e4:	0e 94 15 1b 	call	0x362a	; 0x362a <__mulsf3>
    21e8:	2b 01       	movw	r4, r22
    21ea:	3c 01       	movw	r6, r24
    21ec:	ad 81       	ldd	r26, Y+5	; 0x05
    21ee:	be 81       	ldd	r27, Y+6	; 0x06
    21f0:	50 96       	adiw	r26, 0x10	; 16
    21f2:	6d 93       	st	X+, r22
    21f4:	7d 93       	st	X+, r23
    21f6:	8d 93       	st	X+, r24
    21f8:	9c 93       	st	X, r25
    21fa:	53 97       	sbiw	r26, 0x13	; 19
    21fc:	a5 01       	movw	r20, r10
    21fe:	94 01       	movw	r18, r8
    2200:	c7 01       	movw	r24, r14
    2202:	b6 01       	movw	r22, r12
    2204:	0e 94 b6 19 	call	0x336c	; 0x336c <__divsf3>
    2208:	6b 01       	movw	r12, r22
    220a:	7c 01       	movw	r14, r24
    220c:	ed 81       	ldd	r30, Y+5	; 0x05
    220e:	fe 81       	ldd	r31, Y+6	; 0x06
    2210:	64 8b       	std	Z+20, r22	; 0x14
    2212:	75 8b       	std	Z+21, r23	; 0x15
    2214:	86 8b       	std	Z+22, r24	; 0x16
    2216:	97 8b       	std	Z+23, r25	; 0x17
    2218:	80 8d       	ldd	r24, Z+24	; 0x18
    221a:	91 8d       	ldd	r25, Z+25	; 0x19
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	69 f5       	brne	.+90     	; 0x227a <_ZN3PID10SetTuningsEdddi+0x17e>
    2220:	29 81       	ldd	r18, Y+1	; 0x01
    2222:	3a 81       	ldd	r19, Y+2	; 0x02
    2224:	4b 81       	ldd	r20, Y+3	; 0x03
    2226:	5c 81       	ldd	r21, Y+4	; 0x04
    2228:	60 e0       	ldi	r22, 0x00	; 0
    222a:	70 e0       	ldi	r23, 0x00	; 0
    222c:	cb 01       	movw	r24, r22
    222e:	0e 94 44 19 	call	0x3288	; 0x3288 <__subsf3>
    2232:	ad 81       	ldd	r26, Y+5	; 0x05
    2234:	be 81       	ldd	r27, Y+6	; 0x06
    2236:	1c 96       	adiw	r26, 0x0c	; 12
    2238:	6d 93       	st	X+, r22
    223a:	7d 93       	st	X+, r23
    223c:	8d 93       	st	X+, r24
    223e:	9c 93       	st	X, r25
    2240:	1f 97       	sbiw	r26, 0x0f	; 15
    2242:	a3 01       	movw	r20, r6
    2244:	92 01       	movw	r18, r4
    2246:	60 e0       	ldi	r22, 0x00	; 0
    2248:	70 e0       	ldi	r23, 0x00	; 0
    224a:	cb 01       	movw	r24, r22
    224c:	0e 94 44 19 	call	0x3288	; 0x3288 <__subsf3>
    2250:	ed 81       	ldd	r30, Y+5	; 0x05
    2252:	fe 81       	ldd	r31, Y+6	; 0x06
    2254:	60 8b       	std	Z+16, r22	; 0x10
    2256:	71 8b       	std	Z+17, r23	; 0x11
    2258:	82 8b       	std	Z+18, r24	; 0x12
    225a:	93 8b       	std	Z+19, r25	; 0x13
    225c:	a7 01       	movw	r20, r14
    225e:	96 01       	movw	r18, r12
    2260:	60 e0       	ldi	r22, 0x00	; 0
    2262:	70 e0       	ldi	r23, 0x00	; 0
    2264:	cb 01       	movw	r24, r22
    2266:	0e 94 44 19 	call	0x3288	; 0x3288 <__subsf3>
    226a:	ad 81       	ldd	r26, Y+5	; 0x05
    226c:	be 81       	ldd	r27, Y+6	; 0x06
    226e:	54 96       	adiw	r26, 0x14	; 20
    2270:	6d 93       	st	X+, r22
    2272:	7d 93       	st	X+, r23
    2274:	8d 93       	st	X+, r24
    2276:	9c 93       	st	X, r25
    2278:	57 97       	sbiw	r26, 0x17	; 23
    227a:	26 96       	adiw	r28, 0x06	; 6
    227c:	0f b6       	in	r0, 0x3f	; 63
    227e:	f8 94       	cli
    2280:	de bf       	out	0x3e, r29	; 62
    2282:	0f be       	out	0x3f, r0	; 63
    2284:	cd bf       	out	0x3d, r28	; 61
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	1f 91       	pop	r17
    228c:	0f 91       	pop	r16
    228e:	ff 90       	pop	r15
    2290:	ef 90       	pop	r14
    2292:	df 90       	pop	r13
    2294:	cf 90       	pop	r12
    2296:	bf 90       	pop	r11
    2298:	af 90       	pop	r10
    229a:	9f 90       	pop	r9
    229c:	8f 90       	pop	r8
    229e:	7f 90       	pop	r7
    22a0:	6f 90       	pop	r6
    22a2:	5f 90       	pop	r5
    22a4:	4f 90       	pop	r4
    22a6:	08 95       	ret

000022a8 <_ZN3PID13SetSampleTimeEi>:
    22a8:	8f 92       	push	r8
    22aa:	9f 92       	push	r9
    22ac:	af 92       	push	r10
    22ae:	bf 92       	push	r11
    22b0:	cf 92       	push	r12
    22b2:	df 92       	push	r13
    22b4:	ef 92       	push	r14
    22b6:	ff 92       	push	r15
    22b8:	cf 93       	push	r28
    22ba:	df 93       	push	r29
    22bc:	16 16       	cp	r1, r22
    22be:	17 06       	cpc	r1, r23
    22c0:	b4 f5       	brge	.+108    	; 0x232e <_ZN3PID13SetSampleTimeEi+0x86>
    22c2:	6b 01       	movw	r12, r22
    22c4:	ec 01       	movw	r28, r24
    22c6:	0d 2c       	mov	r0, r13
    22c8:	00 0c       	add	r0, r0
    22ca:	ee 08       	sbc	r14, r14
    22cc:	ff 08       	sbc	r15, r15
    22ce:	c7 01       	movw	r24, r14
    22d0:	b6 01       	movw	r22, r12
    22d2:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <__floatsisf>
    22d6:	4b 01       	movw	r8, r22
    22d8:	5c 01       	movw	r10, r24
    22da:	6e a5       	ldd	r22, Y+46	; 0x2e
    22dc:	7f a5       	ldd	r23, Y+47	; 0x2f
    22de:	88 a9       	ldd	r24, Y+48	; 0x30
    22e0:	99 a9       	ldd	r25, Y+49	; 0x31
    22e2:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__floatunsisf>
    22e6:	9b 01       	movw	r18, r22
    22e8:	ac 01       	movw	r20, r24
    22ea:	c5 01       	movw	r24, r10
    22ec:	b4 01       	movw	r22, r8
    22ee:	0e 94 b6 19 	call	0x336c	; 0x336c <__divsf3>
    22f2:	4b 01       	movw	r8, r22
    22f4:	5c 01       	movw	r10, r24
    22f6:	9b 01       	movw	r18, r22
    22f8:	ac 01       	movw	r20, r24
    22fa:	68 89       	ldd	r22, Y+16	; 0x10
    22fc:	79 89       	ldd	r23, Y+17	; 0x11
    22fe:	8a 89       	ldd	r24, Y+18	; 0x12
    2300:	9b 89       	ldd	r25, Y+19	; 0x13
    2302:	0e 94 15 1b 	call	0x362a	; 0x362a <__mulsf3>
    2306:	68 8b       	std	Y+16, r22	; 0x10
    2308:	79 8b       	std	Y+17, r23	; 0x11
    230a:	8a 8b       	std	Y+18, r24	; 0x12
    230c:	9b 8b       	std	Y+19, r25	; 0x13
    230e:	a5 01       	movw	r20, r10
    2310:	94 01       	movw	r18, r8
    2312:	6c 89       	ldd	r22, Y+20	; 0x14
    2314:	7d 89       	ldd	r23, Y+21	; 0x15
    2316:	8e 89       	ldd	r24, Y+22	; 0x16
    2318:	9f 89       	ldd	r25, Y+23	; 0x17
    231a:	0e 94 b6 19 	call	0x336c	; 0x336c <__divsf3>
    231e:	6c 8b       	std	Y+20, r22	; 0x14
    2320:	7d 8b       	std	Y+21, r23	; 0x15
    2322:	8e 8b       	std	Y+22, r24	; 0x16
    2324:	9f 8b       	std	Y+23, r25	; 0x17
    2326:	ce a6       	std	Y+46, r12	; 0x2e
    2328:	df a6       	std	Y+47, r13	; 0x2f
    232a:	e8 aa       	std	Y+48, r14	; 0x30
    232c:	f9 aa       	std	Y+49, r15	; 0x31
    232e:	df 91       	pop	r29
    2330:	cf 91       	pop	r28
    2332:	ff 90       	pop	r15
    2334:	ef 90       	pop	r14
    2336:	df 90       	pop	r13
    2338:	cf 90       	pop	r12
    233a:	bf 90       	pop	r11
    233c:	af 90       	pop	r10
    233e:	9f 90       	pop	r9
    2340:	8f 90       	pop	r8
    2342:	08 95       	ret

00002344 <_ZN3PID10InitializeEv>:
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
    2344:	8f 92       	push	r8
    2346:	9f 92       	push	r9
    2348:	af 92       	push	r10
    234a:	bf 92       	push	r11
    234c:	cf 92       	push	r12
    234e:	df 92       	push	r13
    2350:	ef 92       	push	r14
    2352:	ff 92       	push	r15
    2354:	cf 93       	push	r28
    2356:	df 93       	push	r29
    2358:	ec 01       	movw	r28, r24
   outputSum = *myOutput;
    235a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    235c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    235e:	c0 80       	ld	r12, Z
    2360:	d1 80       	ldd	r13, Z+1	; 0x01
    2362:	e2 80       	ldd	r14, Z+2	; 0x02
    2364:	f3 80       	ldd	r15, Z+3	; 0x03
    2366:	ce a2       	std	Y+38, r12	; 0x26
    2368:	df a2       	std	Y+39, r13	; 0x27
    236a:	e8 a6       	std	Y+40, r14	; 0x28
    236c:	f9 a6       	std	Y+41, r15	; 0x29
   lastInput = *myInput;
    236e:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2370:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2372:	80 81       	ld	r24, Z
    2374:	91 81       	ldd	r25, Z+1	; 0x01
    2376:	a2 81       	ldd	r26, Z+2	; 0x02
    2378:	b3 81       	ldd	r27, Z+3	; 0x03
    237a:	8a a7       	std	Y+42, r24	; 0x2a
    237c:	9b a7       	std	Y+43, r25	; 0x2b
    237e:	ac a7       	std	Y+44, r26	; 0x2c
    2380:	bd a7       	std	Y+45, r27	; 0x2d
   if(outputSum > outMax) outputSum = outMax;
    2382:	8e a8       	ldd	r8, Y+54	; 0x36
    2384:	9f a8       	ldd	r9, Y+55	; 0x37
    2386:	a8 ac       	ldd	r10, Y+56	; 0x38
    2388:	b9 ac       	ldd	r11, Y+57	; 0x39
    238a:	a5 01       	movw	r20, r10
    238c:	94 01       	movw	r18, r8
    238e:	c7 01       	movw	r24, r14
    2390:	b6 01       	movw	r22, r12
    2392:	0e 94 10 1b 	call	0x3620	; 0x3620 <__gesf2>
    2396:	18 16       	cp	r1, r24
    2398:	64 f0       	brlt	.+24     	; 0x23b2 <_ZN3PID10InitializeEv+0x6e>
   else if(outputSum < outMin) outputSum = outMin;
    239a:	8a a8       	ldd	r8, Y+50	; 0x32
    239c:	9b a8       	ldd	r9, Y+51	; 0x33
    239e:	ac a8       	ldd	r10, Y+52	; 0x34
    23a0:	bd a8       	ldd	r11, Y+53	; 0x35
    23a2:	a5 01       	movw	r20, r10
    23a4:	94 01       	movw	r18, r8
    23a6:	c7 01       	movw	r24, r14
    23a8:	b6 01       	movw	r22, r12
    23aa:	0e 94 b1 19 	call	0x3362	; 0x3362 <__cmpsf2>
    23ae:	87 ff       	sbrs	r24, 7
    23b0:	04 c0       	rjmp	.+8      	; 0x23ba <_ZN3PID10InitializeEv+0x76>
    23b2:	8e a2       	std	Y+38, r8	; 0x26
    23b4:	9f a2       	std	Y+39, r9	; 0x27
    23b6:	a8 a6       	std	Y+40, r10	; 0x28
    23b8:	b9 a6       	std	Y+41, r11	; 0x29
}
    23ba:	df 91       	pop	r29
    23bc:	cf 91       	pop	r28
    23be:	ff 90       	pop	r15
    23c0:	ef 90       	pop	r14
    23c2:	df 90       	pop	r13
    23c4:	cf 90       	pop	r12
    23c6:	bf 90       	pop	r11
    23c8:	af 90       	pop	r10
    23ca:	9f 90       	pop	r9
    23cc:	8f 90       	pop	r8
    23ce:	08 95       	ret

000023d0 <_ZN3PID7SetModeEi>:
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
    23d0:	1f 93       	push	r17
    23d2:	cf 93       	push	r28
    23d4:	df 93       	push	r29
    23d6:	ec 01       	movw	r28, r24
    bool newAuto = (Mode == AUTOMATIC);
    23d8:	11 e0       	ldi	r17, 0x01	; 1
    23da:	61 30       	cpi	r22, 0x01	; 1
    23dc:	71 05       	cpc	r23, r1
    23de:	09 f0       	breq	.+2      	; 0x23e2 <_ZN3PID7SetModeEi+0x12>
    23e0:	10 e0       	ldi	r17, 0x00	; 0
    if(newAuto && !inAuto)
    23e2:	61 30       	cpi	r22, 0x01	; 1
    23e4:	71 05       	cpc	r23, r1
    23e6:	31 f4       	brne	.+12     	; 0x23f4 <_ZN3PID7SetModeEi+0x24>
    23e8:	8a ad       	ldd	r24, Y+58	; 0x3a
    23ea:	81 11       	cpse	r24, r1
    23ec:	03 c0       	rjmp	.+6      	; 0x23f4 <_ZN3PID7SetModeEi+0x24>
    {  /*we just went from manual to auto*/
        PID::Initialize();
    23ee:	ce 01       	movw	r24, r28
    23f0:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN3PID10InitializeEv>
    }
    inAuto = newAuto;
    23f4:	1a af       	std	Y+58, r17	; 0x3a
}
    23f6:	df 91       	pop	r29
    23f8:	cf 91       	pop	r28
    23fa:	1f 91       	pop	r17
    23fc:	08 95       	ret

000023fe <_ZN3PID22SetControllerDirectionEi>:
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
    23fe:	0f 93       	push	r16
    2400:	1f 93       	push	r17
    2402:	cf 93       	push	r28
    2404:	df 93       	push	r29
    2406:	ec 01       	movw	r28, r24
    2408:	8b 01       	movw	r16, r22
   if(inAuto && Direction !=controllerDirection)
    240a:	8a ad       	ldd	r24, Y+58	; 0x3a
    240c:	88 23       	and	r24, r24
    240e:	61 f1       	breq	.+88     	; 0x2468 <_ZN3PID22SetControllerDirectionEi+0x6a>
    2410:	88 8d       	ldd	r24, Y+24	; 0x18
    2412:	99 8d       	ldd	r25, Y+25	; 0x19
    2414:	86 17       	cp	r24, r22
    2416:	97 07       	cpc	r25, r23
    2418:	39 f1       	breq	.+78     	; 0x2468 <_ZN3PID22SetControllerDirectionEi+0x6a>
   {
	    kp = (0 - kp);
    241a:	2c 85       	ldd	r18, Y+12	; 0x0c
    241c:	3d 85       	ldd	r19, Y+13	; 0x0d
    241e:	4e 85       	ldd	r20, Y+14	; 0x0e
    2420:	5f 85       	ldd	r21, Y+15	; 0x0f
    2422:	60 e0       	ldi	r22, 0x00	; 0
    2424:	70 e0       	ldi	r23, 0x00	; 0
    2426:	cb 01       	movw	r24, r22
    2428:	0e 94 44 19 	call	0x3288	; 0x3288 <__subsf3>
    242c:	6c 87       	std	Y+12, r22	; 0x0c
    242e:	7d 87       	std	Y+13, r23	; 0x0d
    2430:	8e 87       	std	Y+14, r24	; 0x0e
    2432:	9f 87       	std	Y+15, r25	; 0x0f
      ki = (0 - ki);
    2434:	28 89       	ldd	r18, Y+16	; 0x10
    2436:	39 89       	ldd	r19, Y+17	; 0x11
    2438:	4a 89       	ldd	r20, Y+18	; 0x12
    243a:	5b 89       	ldd	r21, Y+19	; 0x13
    243c:	60 e0       	ldi	r22, 0x00	; 0
    243e:	70 e0       	ldi	r23, 0x00	; 0
    2440:	cb 01       	movw	r24, r22
    2442:	0e 94 44 19 	call	0x3288	; 0x3288 <__subsf3>
    2446:	68 8b       	std	Y+16, r22	; 0x10
    2448:	79 8b       	std	Y+17, r23	; 0x11
    244a:	8a 8b       	std	Y+18, r24	; 0x12
    244c:	9b 8b       	std	Y+19, r25	; 0x13
      kd = (0 - kd);
    244e:	2c 89       	ldd	r18, Y+20	; 0x14
    2450:	3d 89       	ldd	r19, Y+21	; 0x15
    2452:	4e 89       	ldd	r20, Y+22	; 0x16
    2454:	5f 89       	ldd	r21, Y+23	; 0x17
    2456:	60 e0       	ldi	r22, 0x00	; 0
    2458:	70 e0       	ldi	r23, 0x00	; 0
    245a:	cb 01       	movw	r24, r22
    245c:	0e 94 44 19 	call	0x3288	; 0x3288 <__subsf3>
    2460:	6c 8b       	std	Y+20, r22	; 0x14
    2462:	7d 8b       	std	Y+21, r23	; 0x15
    2464:	8e 8b       	std	Y+22, r24	; 0x16
    2466:	9f 8b       	std	Y+23, r25	; 0x17
   }
   controllerDirection = Direction;
    2468:	19 8f       	std	Y+25, r17	; 0x19
    246a:	08 8f       	std	Y+24, r16	; 0x18
}
    246c:	df 91       	pop	r29
    246e:	cf 91       	pop	r28
    2470:	1f 91       	pop	r17
    2472:	0f 91       	pop	r16
    2474:	08 95       	ret

00002476 <_ZN3PIDC1EPdS0_S0_dddii>:

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
    2476:	4f 92       	push	r4
    2478:	5f 92       	push	r5
    247a:	6f 92       	push	r6
    247c:	7f 92       	push	r7
    247e:	8f 92       	push	r8
    2480:	9f 92       	push	r9
    2482:	af 92       	push	r10
    2484:	bf 92       	push	r11
    2486:	cf 92       	push	r12
    2488:	df 92       	push	r13
    248a:	ef 92       	push	r14
    248c:	ff 92       	push	r15
    248e:	0f 93       	push	r16
    2490:	1f 93       	push	r17
    2492:	cf 93       	push	r28
    2494:	df 93       	push	r29
    2496:	00 d0       	rcall	.+0      	; 0x2498 <_ZN3PIDC1EPdS0_S0_dddii+0x22>
    2498:	00 d0       	rcall	.+0      	; 0x249a <_ZN3PIDC1EPdS0_S0_dddii+0x24>
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	4c 01       	movw	r8, r24
    24a0:	27 01       	movw	r4, r14
    24a2:	38 01       	movw	r6, r16
    24a4:	a9 82       	std	Y+1, r10	; 0x01
    24a6:	ba 82       	std	Y+2, r11	; 0x02
    24a8:	cb 82       	std	Y+3, r12	; 0x03
    24aa:	dc 82       	std	Y+4, r13	; 0x04
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
    24ac:	fc 01       	movw	r30, r24
    24ae:	57 8f       	std	Z+31, r21	; 0x1f
    24b0:	46 8f       	std	Z+30, r20	; 0x1e
    myInput = Input;
    24b2:	75 8f       	std	Z+29, r23	; 0x1d
    24b4:	64 8f       	std	Z+28, r22	; 0x1c
    mySetpoint = Setpoint;
    24b6:	31 a3       	std	Z+33, r19	; 0x21
    24b8:	20 a3       	std	Z+32, r18	; 0x20
    inAuto = false;
    24ba:	12 ae       	std	Z+58, r1	; 0x3a
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
    24bc:	12 aa       	std	Z+50, r1	; 0x32
    24be:	13 aa       	std	Z+51, r1	; 0x33
    24c0:	14 aa       	std	Z+52, r1	; 0x34
    24c2:	15 aa       	std	Z+53, r1	; 0x35
   outMax = Max;
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	af e7       	ldi	r26, 0x7F	; 127
    24ca:	b3 e4       	ldi	r27, 0x43	; 67
    24cc:	86 ab       	std	Z+54, r24	; 0x36
    24ce:	97 ab       	std	Z+55, r25	; 0x37
    24d0:	a0 af       	std	Z+56, r26	; 0x38
    24d2:	b1 af       	std	Z+57, r27	; 0x39
    inAuto = false;

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
    24d4:	84 e6       	ldi	r24, 0x64	; 100
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	a0 e0       	ldi	r26, 0x00	; 0
    24da:	b0 e0       	ldi	r27, 0x00	; 0
    24dc:	86 a7       	std	Z+46, r24	; 0x2e
    24de:	97 a7       	std	Z+47, r25	; 0x2f
    24e0:	a0 ab       	std	Z+48, r26	; 0x30
    24e2:	b1 ab       	std	Z+49, r27	; 0x31

    PID::SetControllerDirection(ControllerDirection);
    24e4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    24e6:	7e 8d       	ldd	r23, Y+30	; 0x1e
    24e8:	c4 01       	movw	r24, r8
    24ea:	0e 94 ff 11 	call	0x23fe	; 0x23fe <_ZN3PID22SetControllerDirectionEi>
    PID::SetTunings(Kp, Ki, Kd, POn);
    24ee:	ab 8c       	ldd	r10, Y+27	; 0x1b
    24f0:	bc 8c       	ldd	r11, Y+28	; 0x1c
    24f2:	cf 88       	ldd	r12, Y+23	; 0x17
    24f4:	d8 8c       	ldd	r13, Y+24	; 0x18
    24f6:	e9 8c       	ldd	r14, Y+25	; 0x19
    24f8:	fa 8c       	ldd	r15, Y+26	; 0x1a
    24fa:	09 81       	ldd	r16, Y+1	; 0x01
    24fc:	1a 81       	ldd	r17, Y+2	; 0x02
    24fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2500:	3c 81       	ldd	r19, Y+4	; 0x04
    2502:	b3 01       	movw	r22, r6
    2504:	a2 01       	movw	r20, r4
    2506:	c4 01       	movw	r24, r8
    2508:	0e 94 7e 10 	call	0x20fc	; 0x20fc <_ZN3PID10SetTuningsEdddi>

    lastTime = millis()-SampleTime;
    250c:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <millis>
    2510:	f4 01       	movw	r30, r8
    2512:	46 a4       	ldd	r4, Z+46	; 0x2e
    2514:	57 a4       	ldd	r5, Z+47	; 0x2f
    2516:	60 a8       	ldd	r6, Z+48	; 0x30
    2518:	71 a8       	ldd	r7, Z+49	; 0x31
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	84 19       	sub	r24, r4
    2520:	95 09       	sbc	r25, r5
    2522:	a6 09       	sbc	r26, r6
    2524:	b7 09       	sbc	r27, r7
    2526:	82 a3       	std	Z+34, r24	; 0x22
    2528:	93 a3       	std	Z+35, r25	; 0x23
    252a:	a4 a3       	std	Z+36, r26	; 0x24
    252c:	b5 a3       	std	Z+37, r27	; 0x25
}
    252e:	0f 90       	pop	r0
    2530:	0f 90       	pop	r0
    2532:	0f 90       	pop	r0
    2534:	0f 90       	pop	r0
    2536:	df 91       	pop	r29
    2538:	cf 91       	pop	r28
    253a:	1f 91       	pop	r17
    253c:	0f 91       	pop	r16
    253e:	ff 90       	pop	r15
    2540:	ef 90       	pop	r14
    2542:	df 90       	pop	r13
    2544:	cf 90       	pop	r12
    2546:	bf 90       	pop	r11
    2548:	af 90       	pop	r10
    254a:	9f 90       	pop	r9
    254c:	8f 90       	pop	r8
    254e:	7f 90       	pop	r7
    2550:	6f 90       	pop	r6
    2552:	5f 90       	pop	r5
    2554:	4f 90       	pop	r4
    2556:	08 95       	ret

00002558 <_ZN3PIDC1EPdS0_S0_dddi>:
/*Constructor (...)*********************************************************
 *    To allow backwards compatability for v1.1, or for people that just want
 *    to use Proportional on Error without explicitly saying so
 ***************************************************************************/

PID::PID(double* Input, double* Output, double* Setpoint,
    2558:	8f 92       	push	r8
    255a:	9f 92       	push	r9
    255c:	af 92       	push	r10
    255e:	bf 92       	push	r11
    2560:	cf 92       	push	r12
    2562:	df 92       	push	r13
    2564:	ef 92       	push	r14
    2566:	ff 92       	push	r15
    2568:	0f 93       	push	r16
    256a:	1f 93       	push	r17
    256c:	cf 93       	push	r28
    256e:	df 93       	push	r29
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
    2574:	ef 85       	ldd	r30, Y+15	; 0x0f
    2576:	f8 89       	ldd	r31, Y+16	; 0x10
    2578:	a9 89       	ldd	r26, Y+17	; 0x11
    257a:	ba 89       	ldd	r27, Y+18	; 0x12
    257c:	9b 88       	ldd	r9, Y+19	; 0x13
    257e:	8c 88       	ldd	r8, Y+20	; 0x14
        double Kp, double Ki, double Kd, int ControllerDirection)
    :PID::PID(Input, Output, Setpoint, Kp, Ki, Kd, P_ON_E, ControllerDirection)
    2580:	8f 92       	push	r8
    2582:	9f 92       	push	r9
    2584:	1f 92       	push	r1
    2586:	99 24       	eor	r9, r9
    2588:	93 94       	inc	r9
    258a:	9f 92       	push	r9
    258c:	bf 93       	push	r27
    258e:	af 93       	push	r26
    2590:	ff 93       	push	r31
    2592:	ef 93       	push	r30
    2594:	0e 94 3b 12 	call	0x2476	; 0x2476 <_ZN3PIDC1EPdS0_S0_dddii>
{

}
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	f8 94       	cli
    259c:	de bf       	out	0x3e, r29	; 62
    259e:	0f be       	out	0x3f, r0	; 63
    25a0:	cd bf       	out	0x3d, r28	; 61
    25a2:	df 91       	pop	r29
    25a4:	cf 91       	pop	r28
    25a6:	1f 91       	pop	r17
    25a8:	0f 91       	pop	r16
    25aa:	ff 90       	pop	r15
    25ac:	ef 90       	pop	r14
    25ae:	df 90       	pop	r13
    25b0:	cf 90       	pop	r12
    25b2:	bf 90       	pop	r11
    25b4:	af 90       	pop	r10
    25b6:	9f 90       	pop	r9
    25b8:	8f 90       	pop	r8
    25ba:	08 95       	ret

000025bc <_ZN3dht11_readSensorEhhh>:
    if (bits[4] != sum)
    {
        return DHTLIB_ERROR_CHECKSUM;
    }
    return result;
}
    25bc:	2f 92       	push	r2
    25be:	3f 92       	push	r3
    25c0:	4f 92       	push	r4
    25c2:	5f 92       	push	r5
    25c4:	6f 92       	push	r6
    25c6:	7f 92       	push	r7
    25c8:	8f 92       	push	r8
    25ca:	9f 92       	push	r9
    25cc:	af 92       	push	r10
    25ce:	bf 92       	push	r11
    25d0:	cf 92       	push	r12
    25d2:	df 92       	push	r13
    25d4:	ef 92       	push	r14
    25d6:	ff 92       	push	r15
    25d8:	0f 93       	push	r16
    25da:	1f 93       	push	r17
    25dc:	cf 93       	push	r28
    25de:	df 93       	push	r29
    25e0:	ec 01       	movw	r28, r24
    25e2:	f6 2e       	mov	r15, r22
    25e4:	04 2f       	mov	r16, r20
    25e6:	e2 2e       	mov	r14, r18
    25e8:	86 2f       	mov	r24, r22
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	fc 01       	movw	r30, r24
    25ee:	e8 57       	subi	r30, 0x78	; 120
    25f0:	fe 4f       	sbci	r31, 0xFE	; 254
    25f2:	14 91       	lpm	r17, Z
    25f4:	fc 01       	movw	r30, r24
    25f6:	e9 55       	subi	r30, 0x59	; 89
    25f8:	fe 4f       	sbci	r31, 0xFE	; 254
    25fa:	e4 91       	lpm	r30, Z
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	ee 0f       	add	r30, r30
    2600:	ff 1f       	adc	r31, r31
    2602:	ea 53       	subi	r30, 0x3A	; 58
    2604:	fe 4f       	sbci	r31, 0xFE	; 254
    2606:	c5 90       	lpm	r12, Z+
    2608:	d4 90       	lpm	r13, Z
    260a:	61 e0       	ldi	r22, 0x01	; 1
    260c:	8f 2d       	mov	r24, r15
    260e:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <pinMode>
    2612:	60 e0       	ldi	r22, 0x00	; 0
    2614:	8f 2d       	mov	r24, r15
    2616:	0e 94 0b 28 	call	0x5016	; 0x5016 <digitalWrite>
    261a:	09 30       	cpi	r16, 0x09	; 9
    261c:	38 f0       	brcs	.+14     	; 0x262c <_ZN3dht11_readSensorEhhh+0x70>
    261e:	60 2f       	mov	r22, r16
    2620:	70 e0       	ldi	r23, 0x00	; 0
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <delay>
    262a:	0a c0       	rjmp	.+20     	; 0x2640 <_ZN3dht11_readSensorEhhh+0x84>
    262c:	88 ee       	ldi	r24, 0xE8	; 232
    262e:	93 e0       	ldi	r25, 0x03	; 3
    2630:	9c 01       	movw	r18, r24
    2632:	02 9f       	mul	r16, r18
    2634:	c0 01       	movw	r24, r0
    2636:	03 9f       	mul	r16, r19
    2638:	90 0d       	add	r25, r0
    263a:	11 24       	eor	r1, r1
    263c:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <delayMicroseconds>
    2640:	60 e0       	ldi	r22, 0x00	; 0
    2642:	8f 2d       	mov	r24, r15
    2644:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <pinMode>
    2648:	80 e2       	ldi	r24, 0x20	; 32
    264a:	93 e0       	ldi	r25, 0x03	; 3
    264c:	d6 01       	movw	r26, r12
    264e:	2c 91       	ld	r18, X
    2650:	21 23       	and	r18, r17
    2652:	21 f0       	breq	.+8      	; 0x265c <_ZN3dht11_readSensorEhhh+0xa0>
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	d1 f7       	brne	.-12     	; 0x264c <_ZN3dht11_readSensorEhhh+0x90>
    2658:	8d ef       	ldi	r24, 0xFD	; 253
    265a:	5f c0       	rjmp	.+190    	; 0x271a <_ZN3dht11_readSensorEhhh+0x15e>
    265c:	80 e9       	ldi	r24, 0x90	; 144
    265e:	91 e0       	ldi	r25, 0x01	; 1
    2660:	f6 01       	movw	r30, r12
    2662:	20 81       	ld	r18, Z
    2664:	21 23       	and	r18, r17
    2666:	21 f4       	brne	.+8      	; 0x2670 <_ZN3dht11_readSensorEhhh+0xb4>
    2668:	01 97       	sbiw	r24, 0x01	; 1
    266a:	d1 f7       	brne	.-12     	; 0x2660 <_ZN3dht11_readSensorEhhh+0xa4>
    266c:	8c ef       	ldi	r24, 0xFC	; 252
    266e:	55 c0       	rjmp	.+170    	; 0x271a <_ZN3dht11_readSensorEhhh+0x15e>
    2670:	80 e9       	ldi	r24, 0x90	; 144
    2672:	91 e0       	ldi	r25, 0x01	; 1
    2674:	d6 01       	movw	r26, r12
    2676:	2c 91       	ld	r18, X
    2678:	21 23       	and	r18, r17
    267a:	21 f0       	breq	.+8      	; 0x2684 <_ZN3dht11_readSensorEhhh+0xc8>
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	d1 f7       	brne	.-12     	; 0x2674 <_ZN3dht11_readSensorEhhh+0xb8>
    2680:	8b ef       	ldi	r24, 0xFB	; 251
    2682:	4b c0       	rjmp	.+150    	; 0x271a <_ZN3dht11_readSensorEhhh+0x15e>
    2684:	58 e2       	ldi	r21, 0x28	; 40
    2686:	80 e9       	ldi	r24, 0x90	; 144
    2688:	91 e0       	ldi	r25, 0x01	; 1
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	e0 e9       	ldi	r30, 0x90	; 144
    2690:	f1 e0       	ldi	r31, 0x01	; 1
    2692:	00 e0       	ldi	r16, 0x00	; 0
    2694:	60 e0       	ldi	r22, 0x00	; 0
    2696:	31 2c       	mov	r3, r1
    2698:	40 e8       	ldi	r20, 0x80	; 128
    269a:	25 2e       	mov	r2, r21
    269c:	2e 18       	sub	r2, r14
    269e:	70 e9       	ldi	r23, 0x90	; 144
    26a0:	87 2e       	mov	r8, r23
    26a2:	99 24       	eor	r9, r9
    26a4:	93 94       	inc	r9
    26a6:	a1 2c       	mov	r10, r1
    26a8:	b1 2c       	mov	r11, r1
    26aa:	d6 01       	movw	r26, r12
    26ac:	7c 91       	ld	r23, X
    26ae:	71 23       	and	r23, r17
    26b0:	61 f5       	brne	.+88     	; 0x270a <_ZN3dht11_readSensorEhhh+0x14e>
    26b2:	00 23       	and	r16, r16
    26b4:	51 f1       	breq	.+84     	; 0x270a <_ZN3dht11_readSensorEhhh+0x14e>
    26b6:	25 16       	cp	r2, r21
    26b8:	98 f4       	brcc	.+38     	; 0x26e0 <_ZN3dht11_readSensorEhhh+0x124>
    26ba:	8e 17       	cp	r24, r30
    26bc:	9f 07       	cpc	r25, r31
    26be:	08 f4       	brcc	.+2      	; 0x26c2 <_ZN3dht11_readSensorEhhh+0x106>
    26c0:	fc 01       	movw	r30, r24
    26c2:	24 01       	movw	r4, r8
    26c4:	35 01       	movw	r6, r10
    26c6:	4e 1a       	sub	r4, r30
    26c8:	5f 0a       	sbc	r5, r31
    26ca:	61 08       	sbc	r6, r1
    26cc:	71 08       	sbc	r7, r1
    26ce:	82 e0       	ldi	r24, 0x02	; 2
    26d0:	75 94       	asr	r7
    26d2:	67 94       	ror	r6
    26d4:	57 94       	ror	r5
    26d6:	47 94       	ror	r4
    26d8:	8a 95       	dec	r24
    26da:	d1 f7       	brne	.-12     	; 0x26d0 <_ZN3dht11_readSensorEhhh+0x114>
    26dc:	92 01       	movw	r18, r4
    26de:	07 c0       	rjmp	.+14     	; 0x26ee <_ZN3dht11_readSensorEhhh+0x132>
    26e0:	7f 01       	movw	r14, r30
    26e2:	e2 1a       	sub	r14, r18
    26e4:	f3 0a       	sbc	r15, r19
    26e6:	e8 16       	cp	r14, r24
    26e8:	f9 06       	cpc	r15, r25
    26ea:	08 f0       	brcs	.+2      	; 0x26ee <_ZN3dht11_readSensorEhhh+0x132>
    26ec:	64 2b       	or	r22, r20
    26ee:	46 95       	lsr	r20
    26f0:	49 f4       	brne	.+18     	; 0x2704 <_ZN3dht11_readSensorEhhh+0x148>
    26f2:	ce 01       	movw	r24, r28
    26f4:	83 0d       	add	r24, r3
    26f6:	91 1d       	adc	r25, r1
    26f8:	dc 01       	movw	r26, r24
    26fa:	18 96       	adiw	r26, 0x08	; 8
    26fc:	6c 93       	st	X, r22
    26fe:	33 94       	inc	r3
    2700:	60 e0       	ldi	r22, 0x00	; 0
    2702:	40 e8       	ldi	r20, 0x80	; 128
    2704:	51 50       	subi	r21, 0x01	; 1
    2706:	80 e9       	ldi	r24, 0x90	; 144
    2708:	91 e0       	ldi	r25, 0x01	; 1
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	29 f0       	breq	.+10     	; 0x2718 <_ZN3dht11_readSensorEhhh+0x15c>
    270e:	07 2f       	mov	r16, r23
    2710:	51 11       	cpse	r21, r1
    2712:	cb cf       	rjmp	.-106    	; 0x26aa <_ZN3dht11_readSensorEhhh+0xee>
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	01 c0       	rjmp	.+2      	; 0x271a <_ZN3dht11_readSensorEhhh+0x15e>
    2718:	8e ef       	ldi	r24, 0xFE	; 254
    271a:	df 91       	pop	r29
    271c:	cf 91       	pop	r28
    271e:	1f 91       	pop	r17
    2720:	0f 91       	pop	r16
    2722:	ff 90       	pop	r15
    2724:	ef 90       	pop	r14
    2726:	df 90       	pop	r13
    2728:	cf 90       	pop	r12
    272a:	bf 90       	pop	r11
    272c:	af 90       	pop	r10
    272e:	9f 90       	pop	r9
    2730:	8f 90       	pop	r8
    2732:	7f 90       	pop	r7
    2734:	6f 90       	pop	r6
    2736:	5f 90       	pop	r5
    2738:	4f 90       	pop	r4
    273a:	3f 90       	pop	r3
    273c:	2f 90       	pop	r2
    273e:	08 95       	ret

00002740 <_ZN3dht4readEh>:

int8_t dht::read(uint8_t pin)
{
    2740:	cf 92       	push	r12
    2742:	df 92       	push	r13
    2744:	ef 92       	push	r14
    2746:	ff 92       	push	r15
    2748:	0f 93       	push	r16
    274a:	1f 93       	push	r17
    274c:	cf 93       	push	r28
    274e:	df 93       	push	r29
    2750:	ec 01       	movw	r28, r24
    // READ VALUES
    if (_disableIRQ) noInterrupts();
    2752:	8d 85       	ldd	r24, Y+13	; 0x0d
    2754:	88 23       	and	r24, r24
    2756:	09 f0       	breq	.+2      	; 0x275a <_ZN3dht4readEh+0x1a>
    2758:	f8 94       	cli
    int8_t result = _readSensor(pin, DHTLIB_DHT_WAKEUP, DHTLIB_DHT_LEADING_ZEROS);
    275a:	26 e0       	ldi	r18, 0x06	; 6
    275c:	41 e0       	ldi	r20, 0x01	; 1
    275e:	ce 01       	movw	r24, r28
    2760:	0e 94 de 12 	call	0x25bc	; 0x25bc <_ZN3dht11_readSensorEhhh>
    2764:	e8 2e       	mov	r14, r24
    if (_disableIRQ) interrupts();
    2766:	8d 85       	ldd	r24, Y+13	; 0x0d
    2768:	88 23       	and	r24, r24
    276a:	09 f0       	breq	.+2      	; 0x276e <_ZN3dht4readEh+0x2e>
    276c:	78 94       	sei

    // these bits are always zero, masking them reduces errors.
    bits[0] &= 0x03;
    276e:	08 85       	ldd	r16, Y+8	; 0x08
    2770:	03 70       	andi	r16, 0x03	; 3
    2772:	08 87       	std	Y+8, r16	; 0x08
    bits[2] &= 0x83;
    2774:	1a 85       	ldd	r17, Y+10	; 0x0a
    2776:	81 2f       	mov	r24, r17
    2778:	83 78       	andi	r24, 0x83	; 131
    277a:	f8 2e       	mov	r15, r24
    277c:	8a 87       	std	Y+10, r24	; 0x0a

    // CONVERT AND STORE
    humidity = (bits[0]*256 + bits[1]) * 0.1;
    277e:	c9 84       	ldd	r12, Y+9	; 0x09
    2780:	60 2f       	mov	r22, r16
    2782:	70 e0       	ldi	r23, 0x00	; 0
    2784:	76 2f       	mov	r23, r22
    2786:	66 27       	eor	r22, r22
    2788:	6c 0d       	add	r22, r12
    278a:	71 1d       	adc	r23, r1
    278c:	07 2e       	mov	r0, r23
    278e:	00 0c       	add	r0, r0
    2790:	88 0b       	sbc	r24, r24
    2792:	99 0b       	sbc	r25, r25
    2794:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <__floatsisf>
    2798:	2d ec       	ldi	r18, 0xCD	; 205
    279a:	3c ec       	ldi	r19, 0xCC	; 204
    279c:	4c ec       	ldi	r20, 0xCC	; 204
    279e:	5d e3       	ldi	r21, 0x3D	; 61
    27a0:	0e 94 15 1b 	call	0x362a	; 0x362a <__mulsf3>
    27a4:	68 83       	st	Y, r22
    27a6:	79 83       	std	Y+1, r23	; 0x01
    27a8:	8a 83       	std	Y+2, r24	; 0x02
    27aa:	9b 83       	std	Y+3, r25	; 0x03
    temperature = ((bits[2] & 0x7F)*256 + bits[3]) * 0.1;
    27ac:	db 84       	ldd	r13, Y+11	; 0x0b
    27ae:	13 70       	andi	r17, 0x03	; 3
    27b0:	61 2f       	mov	r22, r17
    27b2:	70 e0       	ldi	r23, 0x00	; 0
    27b4:	76 2f       	mov	r23, r22
    27b6:	66 27       	eor	r22, r22
    27b8:	6d 0d       	add	r22, r13
    27ba:	71 1d       	adc	r23, r1
    27bc:	07 2e       	mov	r0, r23
    27be:	00 0c       	add	r0, r0
    27c0:	88 0b       	sbc	r24, r24
    27c2:	99 0b       	sbc	r25, r25
    27c4:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <__floatsisf>
    27c8:	2d ec       	ldi	r18, 0xCD	; 205
    27ca:	3c ec       	ldi	r19, 0xCC	; 204
    27cc:	4c ec       	ldi	r20, 0xCC	; 204
    27ce:	5d e3       	ldi	r21, 0x3D	; 61
    27d0:	0e 94 15 1b 	call	0x362a	; 0x362a <__mulsf3>
    if (bits[2] & 0x80)  // negative temperature
    27d4:	f7 fc       	sbrc	r15, 7
    27d6:	05 c0       	rjmp	.+10     	; 0x27e2 <_ZN3dht4readEh+0xa2>
    bits[0] &= 0x03;
    bits[2] &= 0x83;

    // CONVERT AND STORE
    humidity = (bits[0]*256 + bits[1]) * 0.1;
    temperature = ((bits[2] & 0x7F)*256 + bits[3]) * 0.1;
    27d8:	6c 83       	std	Y+4, r22	; 0x04
    27da:	7d 83       	std	Y+5, r23	; 0x05
    27dc:	8e 83       	std	Y+6, r24	; 0x06
    27de:	9f 83       	std	Y+7, r25	; 0x07
    27e0:	07 c0       	rjmp	.+14     	; 0x27f0 <_ZN3dht4readEh+0xb0>
    if (bits[2] & 0x80)  // negative temperature
    {
        temperature = -temperature;
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	b0 58       	subi	r27, 0x80	; 128
    27e8:	8c 83       	std	Y+4, r24	; 0x04
    27ea:	9d 83       	std	Y+5, r25	; 0x05
    27ec:	ae 83       	std	Y+6, r26	; 0x06
    27ee:	bf 83       	std	Y+7, r27	; 0x07
    }

    // TEST CHECKSUM
    uint8_t sum = bits[0] + bits[1] + bits[2] + bits[3];
    if (bits[4] != sum)
    27f0:	dc 0c       	add	r13, r12
    27f2:	0d 0d       	add	r16, r13
    27f4:	f0 0e       	add	r15, r16
    27f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    27f8:	f8 12       	cpse	r15, r24
    27fa:	02 c0       	rjmp	.+4      	; 0x2800 <_ZN3dht4readEh+0xc0>
    {
        return DHTLIB_ERROR_CHECKSUM;
    }
    return result;
    27fc:	8e 2d       	mov	r24, r14
    27fe:	01 c0       	rjmp	.+2      	; 0x2802 <_ZN3dht4readEh+0xc2>

    // TEST CHECKSUM
    uint8_t sum = bits[0] + bits[1] + bits[2] + bits[3];
    if (bits[4] != sum)
    {
        return DHTLIB_ERROR_CHECKSUM;
    2800:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return result;
}
    2802:	df 91       	pop	r29
    2804:	cf 91       	pop	r28
    2806:	1f 91       	pop	r17
    2808:	0f 91       	pop	r16
    280a:	ff 90       	pop	r15
    280c:	ef 90       	pop	r14
    280e:	df 90       	pop	r13
    2810:	cf 90       	pop	r12
    2812:	08 95       	ret

00002814 <_ZN7hd447806ioinitEv>:
	{
		buf[i] = pgm_read_byte(charmap++);
	}
	// call the RAM based function to actually send it to the LCD
	return(createChar(location, buf));
}
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	08 95       	ret

0000281a <_ZN7hd447806ioreadENS_6iotypeE>:
    281a:	8d ef       	ldi	r24, 0xFD	; 253
    281c:	9f ef       	ldi	r25, 0xFF	; 255
    281e:	08 95       	ret

00002820 <_ZN7hd4478014iosetBacklightEh>:
    2820:	8d ef       	ldi	r24, 0xFD	; 253
    2822:	9f ef       	ldi	r25, 0xFF	; 255
    2824:	08 95       	ret

00002826 <_ZN7hd44780C1Ev>:
    2826:	cf 93       	push	r28
    2828:	df 93       	push	r29
    282a:	ec 01       	movw	r28, r24
    282c:	1b 82       	std	Y+3, r1	; 0x03
    282e:	1a 82       	std	Y+2, r1	; 0x02
    2830:	88 ec       	ldi	r24, 0xC8	; 200
    2832:	92 e0       	ldi	r25, 0x02	; 2
    2834:	99 83       	std	Y+1, r25	; 0x01
    2836:	88 83       	st	Y, r24
    2838:	1f 82       	std	Y+7, r1	; 0x07
    283a:	18 86       	std	Y+8, r1	; 0x08
    283c:	80 ed       	ldi	r24, 0xD0	; 208
    283e:	97 e0       	ldi	r25, 0x07	; 7
    2840:	a0 e0       	ldi	r26, 0x00	; 0
    2842:	b0 e0       	ldi	r27, 0x00	; 0
    2844:	88 8b       	std	Y+16, r24	; 0x10
    2846:	99 8b       	std	Y+17, r25	; 0x11
    2848:	aa 8b       	std	Y+18, r26	; 0x12
    284a:	bb 8b       	std	Y+19, r27	; 0x13
    284c:	86 e2       	ldi	r24, 0x26	; 38
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	a0 e0       	ldi	r26, 0x00	; 0
    2852:	b0 e0       	ldi	r27, 0x00	; 0
    2854:	8c 8b       	std	Y+20, r24	; 0x14
    2856:	9d 8b       	std	Y+21, r25	; 0x15
    2858:	ae 8b       	std	Y+22, r26	; 0x16
    285a:	bf 8b       	std	Y+23, r27	; 0x17
    285c:	1c 86       	std	Y+12, r1	; 0x0c
    285e:	1d 86       	std	Y+13, r1	; 0x0d
    2860:	1e 86       	std	Y+14, r1	; 0x0e
    2862:	1f 86       	std	Y+15, r1	; 0x0f
    2864:	1b 86       	std	Y+11, r1	; 0x0b
    2866:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <micros>
    286a:	68 8f       	std	Y+24, r22	; 0x18
    286c:	79 8f       	std	Y+25, r23	; 0x19
    286e:	8a 8f       	std	Y+26, r24	; 0x1a
    2870:	9b 8f       	std	Y+27, r25	; 0x1b
    2872:	1c 8e       	std	Y+28, r1	; 0x1c
    2874:	1d 8e       	std	Y+29, r1	; 0x1d
    2876:	1e 8e       	std	Y+30, r1	; 0x1e
    2878:	1f 8e       	std	Y+31, r1	; 0x1f
    287a:	df 91       	pop	r29
    287c:	cf 91       	pop	r28
    287e:	08 95       	ret

00002880 <_ZN7hd447809backlightEv>:
    2880:	dc 01       	movw	r26, r24
    2882:	ed 91       	ld	r30, X+
    2884:	fc 91       	ld	r31, X
    2886:	06 84       	ldd	r0, Z+14	; 0x0e
    2888:	f7 85       	ldd	r31, Z+15	; 0x0f
    288a:	e0 2d       	mov	r30, r0
    288c:	6f ef       	ldi	r22, 0xFF	; 255
    288e:	09 94       	ijmp

00002890 <_ZN7hd4478011noBacklightEv>:
    2890:	dc 01       	movw	r26, r24
    2892:	ed 91       	ld	r30, X+
    2894:	fc 91       	ld	r31, X
    2896:	06 84       	ldd	r0, Z+14	; 0x0e
    2898:	f7 85       	ldd	r31, Z+15	; 0x0f
    289a:	e0 2d       	mov	r30, r0
    289c:	60 e0       	ldi	r22, 0x00	; 0
    289e:	09 94       	ijmp

000028a0 <_ZN7hd447807commandEh>:
    28a0:	8f 92       	push	r8
    28a2:	9f 92       	push	r9
    28a4:	af 92       	push	r10
    28a6:	bf 92       	push	r11
    28a8:	ef 92       	push	r14
    28aa:	ff 92       	push	r15
    28ac:	1f 93       	push	r17
    28ae:	cf 93       	push	r28
    28b0:	df 93       	push	r29
    28b2:	ec 01       	movw	r28, r24
    28b4:	16 2f       	mov	r17, r22
    28b6:	e8 81       	ld	r30, Y
    28b8:	f9 81       	ldd	r31, Y+1	; 0x01
    28ba:	04 84       	ldd	r0, Z+12	; 0x0c
    28bc:	f5 85       	ldd	r31, Z+13	; 0x0d
    28be:	e0 2d       	mov	r30, r0
    28c0:	46 2f       	mov	r20, r22
    28c2:	60 e0       	ldi	r22, 0x00	; 0
    28c4:	09 95       	icall
    28c6:	7c 01       	movw	r14, r24
    28c8:	11 50       	subi	r17, 0x01	; 1
    28ca:	12 30       	cpi	r17, 0x02	; 2
    28cc:	38 f4       	brcc	.+14     	; 0x28dc <_ZN7hd447807commandEh+0x3c>
    28ce:	19 86       	std	Y+9, r1	; 0x09
    28d0:	1a 86       	std	Y+10, r1	; 0x0a
    28d2:	88 88       	ldd	r8, Y+16	; 0x10
    28d4:	99 88       	ldd	r9, Y+17	; 0x11
    28d6:	aa 88       	ldd	r10, Y+18	; 0x12
    28d8:	bb 88       	ldd	r11, Y+19	; 0x13
    28da:	04 c0       	rjmp	.+8      	; 0x28e4 <_ZN7hd447807commandEh+0x44>
    28dc:	8c 88       	ldd	r8, Y+20	; 0x14
    28de:	9d 88       	ldd	r9, Y+21	; 0x15
    28e0:	ae 88       	ldd	r10, Y+22	; 0x16
    28e2:	bf 88       	ldd	r11, Y+23	; 0x17
    28e4:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <micros>
    28e8:	68 8f       	std	Y+24, r22	; 0x18
    28ea:	79 8f       	std	Y+25, r23	; 0x19
    28ec:	8a 8f       	std	Y+26, r24	; 0x1a
    28ee:	9b 8f       	std	Y+27, r25	; 0x1b
    28f0:	8c 8e       	std	Y+28, r8	; 0x1c
    28f2:	9d 8e       	std	Y+29, r9	; 0x1d
    28f4:	ae 8e       	std	Y+30, r10	; 0x1e
    28f6:	bf 8e       	std	Y+31, r11	; 0x1f
    28f8:	c7 01       	movw	r24, r14
    28fa:	df 91       	pop	r29
    28fc:	cf 91       	pop	r28
    28fe:	1f 91       	pop	r17
    2900:	ff 90       	pop	r15
    2902:	ef 90       	pop	r14
    2904:	bf 90       	pop	r11
    2906:	af 90       	pop	r10
    2908:	9f 90       	pop	r9
    290a:	8f 90       	pop	r8
    290c:	08 95       	ret

0000290e <_ZN7hd447805clearEv>:
    290e:	61 e0       	ldi	r22, 0x01	; 1
    2910:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <_ZN7hd447807commandEh>

00002914 <_ZN7hd447804homeEv>:
    2914:	62 e0       	ldi	r22, 0x02	; 2
    2916:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <_ZN7hd447807commandEh>

0000291a <_ZN7hd447809setCursorEhh>:
    291a:	fc 01       	movw	r30, r24
    291c:	80 85       	ldd	r24, Z+8	; 0x08
    291e:	48 17       	cp	r20, r24
    2920:	10 f0       	brcs	.+4      	; 0x2926 <_ZN7hd447809setCursorEhh+0xc>
    2922:	4f ef       	ldi	r20, 0xFF	; 255
    2924:	48 0f       	add	r20, r24
    2926:	93 85       	ldd	r25, Z+11	; 0x0b
    2928:	99 23       	and	r25, r25
    292a:	59 f0       	breq	.+22     	; 0x2942 <_ZN7hd447809setCursorEhh+0x28>
    292c:	97 81       	ldd	r25, Z+7	; 0x07
    292e:	69 17       	cp	r22, r25
    2930:	30 f0       	brcs	.+12     	; 0x293e <_ZN7hd447809setCursorEhh+0x24>
    2932:	69 1b       	sub	r22, r25
    2934:	4f 5f       	subi	r20, 0xFF	; 255
    2936:	48 17       	cp	r20, r24
    2938:	d0 f3       	brcs	.-12     	; 0x292e <_ZN7hd447809setCursorEhh+0x14>
    293a:	40 e0       	ldi	r20, 0x00	; 0
    293c:	f8 cf       	rjmp	.-16     	; 0x292e <_ZN7hd447809setCursorEhh+0x14>
    293e:	61 87       	std	Z+9, r22	; 0x09
    2940:	42 87       	std	Z+10, r20	; 0x0a
    2942:	df 01       	movw	r26, r30
    2944:	a4 0f       	add	r26, r20
    2946:	b1 1d       	adc	r27, r1
    2948:	1c 96       	adiw	r26, 0x0c	; 12
    294a:	8c 91       	ld	r24, X
    294c:	68 0f       	add	r22, r24
    294e:	60 68       	ori	r22, 0x80	; 128
    2950:	cf 01       	movw	r24, r30
    2952:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <_ZN7hd447807commandEh>

00002956 <_ZN7hd447807displayEv>:
    2956:	fc 01       	movw	r30, r24
    2958:	65 81       	ldd	r22, Z+5	; 0x05
    295a:	26 2f       	mov	r18, r22
    295c:	24 60       	ori	r18, 0x04	; 4
    295e:	25 83       	std	Z+5, r18	; 0x05
    2960:	6c 60       	ori	r22, 0x0C	; 12
    2962:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <_ZN7hd447807commandEh>

00002966 <_ZN7hd447805beginEhhh>:
    2966:	0f 93       	push	r16
    2968:	1f 93       	push	r17
    296a:	cf 93       	push	r28
    296c:	df 93       	push	r29
    296e:	ec 01       	movw	r28, r24
    2970:	02 2f       	mov	r16, r18
    2972:	14 2f       	mov	r17, r20
    2974:	45 30       	cpi	r20, 0x05	; 5
    2976:	08 f0       	brcs	.+2      	; 0x297a <_ZN7hd447805beginEhhh+0x14>
    2978:	14 e0       	ldi	r17, 0x04	; 4
    297a:	8c 85       	ldd	r24, Y+12	; 0x0c
    297c:	81 11       	cpse	r24, r1
    297e:	09 c0       	rjmp	.+18     	; 0x2992 <_ZN7hd447805beginEhhh+0x2c>
    2980:	8d 85       	ldd	r24, Y+13	; 0x0d
    2982:	81 11       	cpse	r24, r1
    2984:	06 c0       	rjmp	.+12     	; 0x2992 <_ZN7hd447805beginEhhh+0x2c>
    2986:	8e 85       	ldd	r24, Y+14	; 0x0e
    2988:	81 11       	cpse	r24, r1
    298a:	03 c0       	rjmp	.+6      	; 0x2992 <_ZN7hd447805beginEhhh+0x2c>
    298c:	8f 85       	ldd	r24, Y+15	; 0x0f
    298e:	88 23       	and	r24, r24
    2990:	29 f0       	breq	.+10     	; 0x299c <_ZN7hd447805beginEhhh+0x36>
    2992:	8f 81       	ldd	r24, Y+7	; 0x07
    2994:	88 23       	and	r24, r24
    2996:	59 f0       	breq	.+22     	; 0x29ae <_ZN7hd447805beginEhhh+0x48>
    2998:	86 17       	cp	r24, r22
    299a:	49 f0       	breq	.+18     	; 0x29ae <_ZN7hd447805beginEhhh+0x48>
    299c:	1c 86       	std	Y+12, r1	; 0x0c
    299e:	80 e4       	ldi	r24, 0x40	; 64
    29a0:	8d 87       	std	Y+13, r24	; 0x0d
    29a2:	6e 87       	std	Y+14, r22	; 0x0e
    29a4:	86 2f       	mov	r24, r22
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	80 5c       	subi	r24, 0xC0	; 192
    29aa:	9f 4f       	sbci	r25, 0xFF	; 255
    29ac:	8f 87       	std	Y+15, r24	; 0x0f
    29ae:	18 87       	std	Y+8, r17	; 0x08
    29b0:	6f 83       	std	Y+7, r22	; 0x07
    29b2:	64 e6       	ldi	r22, 0x64	; 100
    29b4:	70 e0       	ldi	r23, 0x00	; 0
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <delay>
    29be:	1c 82       	std	Y+4, r1	; 0x04
    29c0:	e8 81       	ld	r30, Y
    29c2:	f9 81       	ldd	r31, Y+1	; 0x01
    29c4:	00 84       	ldd	r0, Z+8	; 0x08
    29c6:	f1 85       	ldd	r31, Z+9	; 0x09
    29c8:	e0 2d       	mov	r30, r0
    29ca:	ce 01       	movw	r24, r28
    29cc:	09 95       	icall
    29ce:	00 97       	sbiw	r24, 0x00	; 0
    29d0:	09 f0       	breq	.+2      	; 0x29d4 <_ZN7hd447805beginEhhh+0x6e>
    29d2:	5e c0       	rjmp	.+188    	; 0x2a90 <_ZN7hd447805beginEhhh+0x12a>
    29d4:	88 85       	ldd	r24, Y+8	; 0x08
    29d6:	82 30       	cpi	r24, 0x02	; 2
    29d8:	18 f0       	brcs	.+6      	; 0x29e0 <_ZN7hd447805beginEhhh+0x7a>
    29da:	8c 81       	ldd	r24, Y+4	; 0x04
    29dc:	88 60       	ori	r24, 0x08	; 8
    29de:	8c 83       	std	Y+4, r24	; 0x04
    29e0:	00 23       	and	r16, r16
    29e2:	29 f0       	breq	.+10     	; 0x29ee <_ZN7hd447805beginEhhh+0x88>
    29e4:	11 30       	cpi	r17, 0x01	; 1
    29e6:	19 f4       	brne	.+6      	; 0x29ee <_ZN7hd447805beginEhhh+0x88>
    29e8:	8c 81       	ldd	r24, Y+4	; 0x04
    29ea:	84 60       	ori	r24, 0x04	; 4
    29ec:	8c 83       	std	Y+4, r24	; 0x04
    29ee:	e8 81       	ld	r30, Y
    29f0:	f9 81       	ldd	r31, Y+1	; 0x01
    29f2:	04 84       	ldd	r0, Z+12	; 0x0c
    29f4:	f5 85       	ldd	r31, Z+13	; 0x0d
    29f6:	e0 2d       	mov	r30, r0
    29f8:	40 e3       	ldi	r20, 0x30	; 48
    29fa:	62 e0       	ldi	r22, 0x02	; 2
    29fc:	ce 01       	movw	r24, r28
    29fe:	09 95       	icall
    2a00:	65 e0       	ldi	r22, 0x05	; 5
    2a02:	70 e0       	ldi	r23, 0x00	; 0
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <delay>
    2a0c:	e8 81       	ld	r30, Y
    2a0e:	f9 81       	ldd	r31, Y+1	; 0x01
    2a10:	04 84       	ldd	r0, Z+12	; 0x0c
    2a12:	f5 85       	ldd	r31, Z+13	; 0x0d
    2a14:	e0 2d       	mov	r30, r0
    2a16:	40 e3       	ldi	r20, 0x30	; 48
    2a18:	62 e0       	ldi	r22, 0x02	; 2
    2a1a:	ce 01       	movw	r24, r28
    2a1c:	09 95       	icall
    2a1e:	61 e0       	ldi	r22, 0x01	; 1
    2a20:	70 e0       	ldi	r23, 0x00	; 0
    2a22:	80 e0       	ldi	r24, 0x00	; 0
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <delay>
    2a2a:	e8 81       	ld	r30, Y
    2a2c:	f9 81       	ldd	r31, Y+1	; 0x01
    2a2e:	04 84       	ldd	r0, Z+12	; 0x0c
    2a30:	f5 85       	ldd	r31, Z+13	; 0x0d
    2a32:	e0 2d       	mov	r30, r0
    2a34:	40 e3       	ldi	r20, 0x30	; 48
    2a36:	62 e0       	ldi	r22, 0x02	; 2
    2a38:	ce 01       	movw	r24, r28
    2a3a:	09 95       	icall
    2a3c:	61 e0       	ldi	r22, 0x01	; 1
    2a3e:	70 e0       	ldi	r23, 0x00	; 0
    2a40:	80 e0       	ldi	r24, 0x00	; 0
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <delay>
    2a48:	8c 81       	ldd	r24, Y+4	; 0x04
    2a4a:	84 fd       	sbrc	r24, 4
    2a4c:	09 c0       	rjmp	.+18     	; 0x2a60 <_ZN7hd447805beginEhhh+0xfa>
    2a4e:	e8 81       	ld	r30, Y
    2a50:	f9 81       	ldd	r31, Y+1	; 0x01
    2a52:	04 84       	ldd	r0, Z+12	; 0x0c
    2a54:	f5 85       	ldd	r31, Z+13	; 0x0d
    2a56:	e0 2d       	mov	r30, r0
    2a58:	40 e2       	ldi	r20, 0x20	; 32
    2a5a:	62 e0       	ldi	r22, 0x02	; 2
    2a5c:	ce 01       	movw	r24, r28
    2a5e:	09 95       	icall
    2a60:	6c 81       	ldd	r22, Y+4	; 0x04
    2a62:	60 62       	ori	r22, 0x20	; 32
    2a64:	ce 01       	movw	r24, r28
    2a66:	0e 94 50 14 	call	0x28a0	; 0x28a0 <_ZN7hd447807commandEh>
    2a6a:	84 e0       	ldi	r24, 0x04	; 4
    2a6c:	8d 83       	std	Y+5, r24	; 0x05
    2a6e:	ce 01       	movw	r24, r28
    2a70:	0e 94 ab 14 	call	0x2956	; 0x2956 <_ZN7hd447807displayEv>
    2a74:	ce 01       	movw	r24, r28
    2a76:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN7hd447805clearEv>
    2a7a:	82 e0       	ldi	r24, 0x02	; 2
    2a7c:	8e 83       	std	Y+6, r24	; 0x06
    2a7e:	66 e0       	ldi	r22, 0x06	; 6
    2a80:	ce 01       	movw	r24, r28
    2a82:	0e 94 50 14 	call	0x28a0	; 0x28a0 <_ZN7hd447807commandEh>
    2a86:	8c 01       	movw	r16, r24
    2a88:	ce 01       	movw	r24, r28
    2a8a:	0e 94 40 14 	call	0x2880	; 0x2880 <_ZN7hd447809backlightEv>
    2a8e:	c8 01       	movw	r24, r16
    2a90:	df 91       	pop	r29
    2a92:	cf 91       	pop	r28
    2a94:	1f 91       	pop	r17
    2a96:	0f 91       	pop	r16
    2a98:	08 95       	ret

00002a9a <_ZN7hd447808noCursorEv>:
    2a9a:	fc 01       	movw	r30, r24
    2a9c:	65 81       	ldd	r22, Z+5	; 0x05
    2a9e:	6d 7f       	andi	r22, 0xFD	; 253
    2aa0:	65 83       	std	Z+5, r22	; 0x05
    2aa2:	68 60       	ori	r22, 0x08	; 8
    2aa4:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <_ZN7hd447807commandEh>

00002aa8 <_ZN7hd447807noBlinkEv>:
    2aa8:	fc 01       	movw	r30, r24
    2aaa:	65 81       	ldd	r22, Z+5	; 0x05
    2aac:	6e 7f       	andi	r22, 0xFE	; 254
    2aae:	65 83       	std	Z+5, r22	; 0x05
    2ab0:	68 60       	ori	r22, 0x08	; 8
    2ab2:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <_ZN7hd447807commandEh>

00002ab6 <_ZN7hd447806_writeEh>:
    2ab6:	cf 92       	push	r12
    2ab8:	df 92       	push	r13
    2aba:	ef 92       	push	r14
    2abc:	ff 92       	push	r15
    2abe:	0f 93       	push	r16
    2ac0:	1f 93       	push	r17
    2ac2:	cf 93       	push	r28
    2ac4:	df 93       	push	r29
    2ac6:	ec 01       	movw	r28, r24
    2ac8:	46 2f       	mov	r20, r22
    2aca:	e8 81       	ld	r30, Y
    2acc:	f9 81       	ldd	r31, Y+1	; 0x01
    2ace:	04 84       	ldd	r0, Z+12	; 0x0c
    2ad0:	f5 85       	ldd	r31, Z+13	; 0x0d
    2ad2:	e0 2d       	mov	r30, r0
    2ad4:	61 e0       	ldi	r22, 0x01	; 1
    2ad6:	09 95       	icall
    2ad8:	8c 01       	movw	r16, r24
    2ada:	cc 88       	ldd	r12, Y+20	; 0x14
    2adc:	dd 88       	ldd	r13, Y+21	; 0x15
    2ade:	ee 88       	ldd	r14, Y+22	; 0x16
    2ae0:	ff 88       	ldd	r15, Y+23	; 0x17
    2ae2:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <micros>
    2ae6:	68 8f       	std	Y+24, r22	; 0x18
    2ae8:	79 8f       	std	Y+25, r23	; 0x19
    2aea:	8a 8f       	std	Y+26, r24	; 0x1a
    2aec:	9b 8f       	std	Y+27, r25	; 0x1b
    2aee:	cc 8e       	std	Y+28, r12	; 0x1c
    2af0:	dd 8e       	std	Y+29, r13	; 0x1d
    2af2:	ee 8e       	std	Y+30, r14	; 0x1e
    2af4:	ff 8e       	std	Y+31, r15	; 0x1f
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	01 2b       	or	r16, r17
    2afc:	11 f0       	breq	.+4      	; 0x2b02 <_ZN7hd447806_writeEh+0x4c>
    2afe:	80 e0       	ldi	r24, 0x00	; 0
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	df 91       	pop	r29
    2b04:	cf 91       	pop	r28
    2b06:	1f 91       	pop	r17
    2b08:	0f 91       	pop	r16
    2b0a:	ff 90       	pop	r15
    2b0c:	ef 90       	pop	r14
    2b0e:	df 90       	pop	r13
    2b10:	cf 90       	pop	r12
    2b12:	08 95       	ret

00002b14 <_ZN7hd447805writeEh>:

// write() - process data character byte to lcd
// returns number of bytes successfully written to device
// i.e. 1 if success or 0 if no character was processed (error)
size_t hd44780::write(uint8_t value)
{
    2b14:	0f 93       	push	r16
    2b16:	1f 93       	push	r17
    2b18:	cf 93       	push	r28
    2b1a:	df 93       	push	r29
    2b1c:	ec 01       	movw	r28, r24
size_t rval;

	rval = _write(value);
    2b1e:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <_ZN7hd447806_writeEh>
    2b22:	8c 01       	movw	r16, r24
	if(_wraplines)
    2b24:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b26:	88 23       	and	r24, r24
    2b28:	99 f0       	breq	.+38     	; 0x2b50 <_ZN7hd447805writeEh+0x3c>
	{
		// currently only works for left to right mode
		if(++_curcol >= _cols)
    2b2a:	89 85       	ldd	r24, Y+9	; 0x09
    2b2c:	8f 5f       	subi	r24, 0xFF	; 255
    2b2e:	89 87       	std	Y+9, r24	; 0x09
    2b30:	9f 81       	ldd	r25, Y+7	; 0x07
    2b32:	89 17       	cp	r24, r25
    2b34:	68 f0       	brcs	.+26     	; 0x2b50 <_ZN7hd447805writeEh+0x3c>
		{
			_curcol = 0;
    2b36:	19 86       	std	Y+9, r1	; 0x09
			_currow++;
    2b38:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b3a:	8f 5f       	subi	r24, 0xFF	; 255
    2b3c:	8a 87       	std	Y+10, r24	; 0x0a
			if(_currow >= _rows)
    2b3e:	98 85       	ldd	r25, Y+8	; 0x08
    2b40:	89 17       	cp	r24, r25
    2b42:	08 f0       	brcs	.+2      	; 0x2b46 <_ZN7hd447805writeEh+0x32>
				_currow = 0;
    2b44:	1a 86       	std	Y+10, r1	; 0x0a
			setCursor(_curcol, _currow);
    2b46:	4a 85       	ldd	r20, Y+10	; 0x0a
    2b48:	60 e0       	ldi	r22, 0x00	; 0
    2b4a:	ce 01       	movw	r24, r28
    2b4c:	0e 94 8d 14 	call	0x291a	; 0x291a <_ZN7hd447809setCursorEhh>
		}
	}
	return (rval);
}
    2b50:	c8 01       	movw	r24, r16
    2b52:	df 91       	pop	r29
    2b54:	cf 91       	pop	r28
    2b56:	1f 91       	pop	r17
    2b58:	0f 91       	pop	r16
    2b5a:	08 95       	ret

00002b5c <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2b5c:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <twi_state>
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <twi_sendStop>
    2b66:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <twi_inRepStart>
    2b6a:	61 e0       	ldi	r22, 0x01	; 1
    2b6c:	82 e0       	ldi	r24, 0x02	; 2
    2b6e:	0e 94 0b 28 	call	0x5016	; 0x5016 <digitalWrite>
    2b72:	61 e0       	ldi	r22, 0x01	; 1
    2b74:	83 e0       	ldi	r24, 0x03	; 3
    2b76:	0e 94 0b 28 	call	0x5016	; 0x5016 <digitalWrite>
    2b7a:	e9 eb       	ldi	r30, 0xB9	; 185
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	80 81       	ld	r24, Z
    2b80:	8e 7f       	andi	r24, 0xFE	; 254
    2b82:	80 83       	st	Z, r24
    2b84:	80 81       	ld	r24, Z
    2b86:	8d 7f       	andi	r24, 0xFD	; 253
    2b88:	80 83       	st	Z, r24
    2b8a:	88 e4       	ldi	r24, 0x48	; 72
    2b8c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    2b90:	85 e4       	ldi	r24, 0x45	; 69
    2b92:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2b96:	08 95       	ret

00002b98 <twi_readFrom>:
    2b98:	41 32       	cpi	r20, 0x21	; 33
    2b9a:	08 f0       	brcs	.+2      	; 0x2b9e <twi_readFrom+0x6>
    2b9c:	43 c0       	rjmp	.+134    	; 0x2c24 <twi_readFrom+0x8c>
    2b9e:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <twi_state>
    2ba2:	91 11       	cpse	r25, r1
    2ba4:	fc cf       	rjmp	.-8      	; 0x2b9e <twi_readFrom+0x6>
    2ba6:	91 e0       	ldi	r25, 0x01	; 1
    2ba8:	90 93 6e 05 	sts	0x056E, r25	; 0x80056e <twi_state>
    2bac:	20 93 6c 05 	sts	0x056C, r18	; 0x80056c <twi_sendStop>
    2bb0:	2f ef       	ldi	r18, 0xFF	; 255
    2bb2:	20 93 01 05 	sts	0x0501, r18	; 0x800501 <twi_error>
    2bb6:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <twi_masterBufferIndex>
    2bba:	24 0f       	add	r18, r20
    2bbc:	20 93 45 05 	sts	0x0545, r18	; 0x800545 <twi_masterBufferLength>
    2bc0:	90 93 6d 05 	sts	0x056D, r25	; 0x80056d <twi_slarw>
    2bc4:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <twi_slarw>
    2bc8:	88 0f       	add	r24, r24
    2bca:	89 2b       	or	r24, r25
    2bcc:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <twi_slarw>
    2bd0:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <twi_inRepStart>
    2bd4:	81 30       	cpi	r24, 0x01	; 1
    2bd6:	61 f4       	brne	.+24     	; 0x2bf0 <twi_readFrom+0x58>
    2bd8:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <twi_inRepStart>
    2bdc:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <twi_slarw>
    2be0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2be4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2be8:	83 fd       	sbrc	r24, 3
    2bea:	f8 cf       	rjmp	.-16     	; 0x2bdc <twi_readFrom+0x44>
    2bec:	85 ec       	ldi	r24, 0xC5	; 197
    2bee:	01 c0       	rjmp	.+2      	; 0x2bf2 <twi_readFrom+0x5a>
    2bf0:	85 ee       	ldi	r24, 0xE5	; 229
    2bf2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2bf6:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <twi_state>
    2bfa:	81 30       	cpi	r24, 0x01	; 1
    2bfc:	e1 f3       	breq	.-8      	; 0x2bf6 <twi_readFrom+0x5e>
    2bfe:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <twi_masterBufferIndex>
    2c02:	84 17       	cp	r24, r20
    2c04:	10 f4       	brcc	.+4      	; 0x2c0a <twi_readFrom+0x72>
    2c06:	40 91 46 05 	lds	r20, 0x0546	; 0x800546 <twi_masterBufferIndex>
    2c0a:	a7 e4       	ldi	r26, 0x47	; 71
    2c0c:	b5 e0       	ldi	r27, 0x05	; 5
    2c0e:	96 2f       	mov	r25, r22
    2c10:	fb 01       	movw	r30, r22
    2c12:	8e 2f       	mov	r24, r30
    2c14:	89 1b       	sub	r24, r25
    2c16:	84 17       	cp	r24, r20
    2c18:	18 f4       	brcc	.+6      	; 0x2c20 <twi_readFrom+0x88>
    2c1a:	8d 91       	ld	r24, X+
    2c1c:	81 93       	st	Z+, r24
    2c1e:	f9 cf       	rjmp	.-14     	; 0x2c12 <twi_readFrom+0x7a>
    2c20:	84 2f       	mov	r24, r20
    2c22:	08 95       	ret
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	08 95       	ret

00002c28 <twi_writeTo>:
    2c28:	0f 93       	push	r16
    2c2a:	41 32       	cpi	r20, 0x21	; 33
    2c2c:	08 f0       	brcs	.+2      	; 0x2c30 <twi_writeTo+0x8>
    2c2e:	4a c0       	rjmp	.+148    	; 0x2cc4 <twi_writeTo+0x9c>
    2c30:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <twi_state>
    2c34:	91 11       	cpse	r25, r1
    2c36:	fc cf       	rjmp	.-8      	; 0x2c30 <twi_writeTo+0x8>
    2c38:	32 e0       	ldi	r19, 0x02	; 2
    2c3a:	30 93 6e 05 	sts	0x056E, r19	; 0x80056e <twi_state>
    2c3e:	00 93 6c 05 	sts	0x056C, r16	; 0x80056c <twi_sendStop>
    2c42:	3f ef       	ldi	r19, 0xFF	; 255
    2c44:	30 93 01 05 	sts	0x0501, r19	; 0x800501 <twi_error>
    2c48:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <twi_masterBufferIndex>
    2c4c:	40 93 45 05 	sts	0x0545, r20	; 0x800545 <twi_masterBufferLength>
    2c50:	56 2f       	mov	r21, r22
    2c52:	a7 e4       	ldi	r26, 0x47	; 71
    2c54:	b5 e0       	ldi	r27, 0x05	; 5
    2c56:	fb 01       	movw	r30, r22
    2c58:	3e 2f       	mov	r19, r30
    2c5a:	35 1b       	sub	r19, r21
    2c5c:	34 17       	cp	r19, r20
    2c5e:	18 f4       	brcc	.+6      	; 0x2c66 <twi_writeTo+0x3e>
    2c60:	31 91       	ld	r19, Z+
    2c62:	3d 93       	st	X+, r19
    2c64:	f9 cf       	rjmp	.-14     	; 0x2c58 <twi_writeTo+0x30>
    2c66:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <twi_slarw>
    2c6a:	30 91 6d 05 	lds	r19, 0x056D	; 0x80056d <twi_slarw>
    2c6e:	88 0f       	add	r24, r24
    2c70:	83 2b       	or	r24, r19
    2c72:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <twi_slarw>
    2c76:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <twi_inRepStart>
    2c7a:	81 30       	cpi	r24, 0x01	; 1
    2c7c:	61 f4       	brne	.+24     	; 0x2c96 <twi_writeTo+0x6e>
    2c7e:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <twi_inRepStart>
    2c82:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <twi_slarw>
    2c86:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2c8a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2c8e:	83 fd       	sbrc	r24, 3
    2c90:	f8 cf       	rjmp	.-16     	; 0x2c82 <twi_writeTo+0x5a>
    2c92:	85 ec       	ldi	r24, 0xC5	; 197
    2c94:	01 c0       	rjmp	.+2      	; 0x2c98 <twi_writeTo+0x70>
    2c96:	85 ee       	ldi	r24, 0xE5	; 229
    2c98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2c9c:	22 23       	and	r18, r18
    2c9e:	21 f0       	breq	.+8      	; 0x2ca8 <twi_writeTo+0x80>
    2ca0:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <twi_state>
    2ca4:	82 30       	cpi	r24, 0x02	; 2
    2ca6:	d1 f3       	breq	.-12     	; 0x2c9c <twi_writeTo+0x74>
    2ca8:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <twi_error>
    2cac:	8f 3f       	cpi	r24, 0xFF	; 255
    2cae:	79 f0       	breq	.+30     	; 0x2cce <twi_writeTo+0xa6>
    2cb0:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <twi_error>
    2cb4:	80 32       	cpi	r24, 0x20	; 32
    2cb6:	41 f0       	breq	.+16     	; 0x2cc8 <twi_writeTo+0xa0>
    2cb8:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <twi_error>
    2cbc:	80 33       	cpi	r24, 0x30	; 48
    2cbe:	31 f0       	breq	.+12     	; 0x2ccc <twi_writeTo+0xa4>
    2cc0:	94 e0       	ldi	r25, 0x04	; 4
    2cc2:	05 c0       	rjmp	.+10     	; 0x2cce <twi_writeTo+0xa6>
    2cc4:	91 e0       	ldi	r25, 0x01	; 1
    2cc6:	03 c0       	rjmp	.+6      	; 0x2cce <twi_writeTo+0xa6>
    2cc8:	92 e0       	ldi	r25, 0x02	; 2
    2cca:	01 c0       	rjmp	.+2      	; 0x2cce <twi_writeTo+0xa6>
    2ccc:	93 e0       	ldi	r25, 0x03	; 3
    2cce:	89 2f       	mov	r24, r25
    2cd0:	0f 91       	pop	r16
    2cd2:	08 95       	ret

00002cd4 <twi_transmit>:
    2cd4:	40 91 23 05 	lds	r20, 0x0523	; 0x800523 <twi_txBufferLength>
    2cd8:	26 2f       	mov	r18, r22
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	24 0f       	add	r18, r20
    2cde:	31 1d       	adc	r19, r1
    2ce0:	21 32       	cpi	r18, 0x21	; 33
    2ce2:	31 05       	cpc	r19, r1
    2ce4:	dc f4       	brge	.+54     	; 0x2d1c <twi_transmit+0x48>
    2ce6:	20 91 6e 05 	lds	r18, 0x056E	; 0x80056e <twi_state>
    2cea:	24 30       	cpi	r18, 0x04	; 4
    2cec:	c9 f4       	brne	.+50     	; 0x2d20 <twi_transmit+0x4c>
    2cee:	fc 01       	movw	r30, r24
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	86 17       	cp	r24, r22
    2cf6:	58 f4       	brcc	.+22     	; 0x2d0e <twi_transmit+0x3a>
    2cf8:	30 91 23 05 	lds	r19, 0x0523	; 0x800523 <twi_txBufferLength>
    2cfc:	21 91       	ld	r18, Z+
    2cfe:	dc 01       	movw	r26, r24
    2d00:	ab 5d       	subi	r26, 0xDB	; 219
    2d02:	ba 4f       	sbci	r27, 0xFA	; 250
    2d04:	a3 0f       	add	r26, r19
    2d06:	b1 1d       	adc	r27, r1
    2d08:	2c 93       	st	X, r18
    2d0a:	01 96       	adiw	r24, 0x01	; 1
    2d0c:	f3 cf       	rjmp	.-26     	; 0x2cf4 <twi_transmit+0x20>
    2d0e:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <twi_txBufferLength>
    2d12:	68 0f       	add	r22, r24
    2d14:	60 93 23 05 	sts	0x0523, r22	; 0x800523 <twi_txBufferLength>
    2d18:	80 e0       	ldi	r24, 0x00	; 0
    2d1a:	08 95       	ret
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	08 95       	ret
    2d20:	82 e0       	ldi	r24, 0x02	; 2
    2d22:	08 95       	ret

00002d24 <twi_attachSlaveRxEvent>:
    2d24:	90 93 68 05 	sts	0x0568, r25	; 0x800568 <twi_onSlaveReceive+0x1>
    2d28:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <twi_onSlaveReceive>
    2d2c:	08 95       	ret

00002d2e <twi_attachSlaveTxEvent>:
    2d2e:	90 93 6a 05 	sts	0x056A, r25	; 0x80056a <twi_onSlaveTransmit+0x1>
    2d32:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <twi_onSlaveTransmit>
    2d36:	08 95       	ret

00002d38 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2d38:	85 ed       	ldi	r24, 0xD5	; 213
    2d3a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2d3e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2d42:	84 fd       	sbrc	r24, 4
    2d44:	fc cf       	rjmp	.-8      	; 0x2d3e <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2d46:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <twi_state>
    2d4a:	08 95       	ret

00002d4c <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2d4c:	85 ec       	ldi	r24, 0xC5	; 197
    2d4e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    2d52:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <twi_state>
    2d56:	08 95       	ret

00002d58 <__vector_36>:
}

ISR(TWI_vect)
{
    2d58:	1f 92       	push	r1
    2d5a:	0f 92       	push	r0
    2d5c:	0f b6       	in	r0, 0x3f	; 63
    2d5e:	0f 92       	push	r0
    2d60:	11 24       	eor	r1, r1
    2d62:	2f 93       	push	r18
    2d64:	3f 93       	push	r19
    2d66:	4f 93       	push	r20
    2d68:	5f 93       	push	r21
    2d6a:	6f 93       	push	r22
    2d6c:	7f 93       	push	r23
    2d6e:	8f 93       	push	r24
    2d70:	9f 93       	push	r25
    2d72:	af 93       	push	r26
    2d74:	bf 93       	push	r27
    2d76:	ef 93       	push	r30
    2d78:	ff 93       	push	r31
  switch(TW_STATUS){
    2d7a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2d7e:	88 7f       	andi	r24, 0xF8	; 248
    2d80:	80 36       	cpi	r24, 0x60	; 96
    2d82:	09 f4       	brne	.+2      	; 0x2d86 <__vector_36+0x2e>
    2d84:	9e c0       	rjmp	.+316    	; 0x2ec2 <__vector_36+0x16a>
    2d86:	78 f5       	brcc	.+94     	; 0x2de6 <__vector_36+0x8e>
    2d88:	88 32       	cpi	r24, 0x28	; 40
    2d8a:	09 f4       	brne	.+2      	; 0x2d8e <__vector_36+0x36>
    2d8c:	5d c0       	rjmp	.+186    	; 0x2e48 <__vector_36+0xf0>
    2d8e:	90 f4       	brcc	.+36     	; 0x2db4 <__vector_36+0x5c>
    2d90:	80 31       	cpi	r24, 0x10	; 16
    2d92:	09 f4       	brne	.+2      	; 0x2d96 <__vector_36+0x3e>
    2d94:	56 c0       	rjmp	.+172    	; 0x2e42 <__vector_36+0xea>
    2d96:	38 f4       	brcc	.+14     	; 0x2da6 <__vector_36+0x4e>
    2d98:	88 23       	and	r24, r24
    2d9a:	09 f4       	brne	.+2      	; 0x2d9e <__vector_36+0x46>
    2d9c:	f5 c0       	rjmp	.+490    	; 0x2f88 <__vector_36+0x230>
    2d9e:	88 30       	cpi	r24, 0x08	; 8
    2da0:	09 f4       	brne	.+2      	; 0x2da4 <__vector_36+0x4c>
    2da2:	4f c0       	rjmp	.+158    	; 0x2e42 <__vector_36+0xea>
    2da4:	f5 c0       	rjmp	.+490    	; 0x2f90 <__vector_36+0x238>
    2da6:	88 31       	cpi	r24, 0x18	; 24
    2da8:	09 f4       	brne	.+2      	; 0x2dac <__vector_36+0x54>
    2daa:	4e c0       	rjmp	.+156    	; 0x2e48 <__vector_36+0xf0>
    2dac:	80 32       	cpi	r24, 0x20	; 32
    2dae:	09 f4       	brne	.+2      	; 0x2db2 <__vector_36+0x5a>
    2db0:	5f c0       	rjmp	.+190    	; 0x2e70 <__vector_36+0x118>
    2db2:	ee c0       	rjmp	.+476    	; 0x2f90 <__vector_36+0x238>
    2db4:	80 34       	cpi	r24, 0x40	; 64
    2db6:	09 f4       	brne	.+2      	; 0x2dba <__vector_36+0x62>
    2db8:	6a c0       	rjmp	.+212    	; 0x2e8e <__vector_36+0x136>
    2dba:	58 f4       	brcc	.+22     	; 0x2dd2 <__vector_36+0x7a>
    2dbc:	80 33       	cpi	r24, 0x30	; 48
    2dbe:	09 f4       	brne	.+2      	; 0x2dc2 <__vector_36+0x6a>
    2dc0:	57 c0       	rjmp	.+174    	; 0x2e70 <__vector_36+0x118>
    2dc2:	88 33       	cpi	r24, 0x38	; 56
    2dc4:	09 f0       	breq	.+2      	; 0x2dc8 <__vector_36+0x70>
    2dc6:	e4 c0       	rjmp	.+456    	; 0x2f90 <__vector_36+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2dc8:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <twi_error>
      twi_releaseBus();
    2dcc:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <twi_releaseBus>
      break;
    2dd0:	df c0       	rjmp	.+446    	; 0x2f90 <__vector_36+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2dd2:	80 35       	cpi	r24, 0x50	; 80
    2dd4:	09 f4       	brne	.+2      	; 0x2dd8 <__vector_36+0x80>
    2dd6:	4f c0       	rjmp	.+158    	; 0x2e76 <__vector_36+0x11e>
    2dd8:	88 35       	cpi	r24, 0x58	; 88
    2dda:	09 f4       	brne	.+2      	; 0x2dde <__vector_36+0x86>
    2ddc:	5d c0       	rjmp	.+186    	; 0x2e98 <__vector_36+0x140>
    2dde:	88 34       	cpi	r24, 0x48	; 72
    2de0:	09 f0       	breq	.+2      	; 0x2de4 <__vector_36+0x8c>
    2de2:	d6 c0       	rjmp	.+428    	; 0x2f90 <__vector_36+0x238>
    2de4:	d3 c0       	rjmp	.+422    	; 0x2f8c <__vector_36+0x234>
    2de6:	88 39       	cpi	r24, 0x98	; 152
    2de8:	09 f4       	brne	.+2      	; 0x2dec <__vector_36+0x94>
    2dea:	c4 c0       	rjmp	.+392    	; 0x2f74 <__vector_36+0x21c>
    2dec:	a8 f4       	brcc	.+42     	; 0x2e18 <__vector_36+0xc0>
    2dee:	88 37       	cpi	r24, 0x78	; 120
    2df0:	09 f4       	brne	.+2      	; 0x2df4 <__vector_36+0x9c>
    2df2:	67 c0       	rjmp	.+206    	; 0x2ec2 <__vector_36+0x16a>
    2df4:	38 f4       	brcc	.+14     	; 0x2e04 <__vector_36+0xac>
    2df6:	88 36       	cpi	r24, 0x68	; 104
    2df8:	09 f4       	brne	.+2      	; 0x2dfc <__vector_36+0xa4>
    2dfa:	63 c0       	rjmp	.+198    	; 0x2ec2 <__vector_36+0x16a>
    2dfc:	80 37       	cpi	r24, 0x70	; 112
    2dfe:	09 f4       	brne	.+2      	; 0x2e02 <__vector_36+0xaa>
    2e00:	60 c0       	rjmp	.+192    	; 0x2ec2 <__vector_36+0x16a>
    2e02:	c6 c0       	rjmp	.+396    	; 0x2f90 <__vector_36+0x238>
    2e04:	88 38       	cpi	r24, 0x88	; 136
    2e06:	09 f4       	brne	.+2      	; 0x2e0a <__vector_36+0xb2>
    2e08:	b5 c0       	rjmp	.+362    	; 0x2f74 <__vector_36+0x21c>
    2e0a:	80 39       	cpi	r24, 0x90	; 144
    2e0c:	09 f4       	brne	.+2      	; 0x2e10 <__vector_36+0xb8>
    2e0e:	5f c0       	rjmp	.+190    	; 0x2ece <__vector_36+0x176>
    2e10:	80 38       	cpi	r24, 0x80	; 128
    2e12:	09 f0       	breq	.+2      	; 0x2e16 <__vector_36+0xbe>
    2e14:	bd c0       	rjmp	.+378    	; 0x2f90 <__vector_36+0x238>
    2e16:	5b c0       	rjmp	.+182    	; 0x2ece <__vector_36+0x176>
    2e18:	80 3b       	cpi	r24, 0xB0	; 176
    2e1a:	09 f4       	brne	.+2      	; 0x2e1e <__vector_36+0xc6>
    2e1c:	83 c0       	rjmp	.+262    	; 0x2f24 <__vector_36+0x1cc>
    2e1e:	38 f4       	brcc	.+14     	; 0x2e2e <__vector_36+0xd6>
    2e20:	80 3a       	cpi	r24, 0xA0	; 160
    2e22:	09 f4       	brne	.+2      	; 0x2e26 <__vector_36+0xce>
    2e24:	66 c0       	rjmp	.+204    	; 0x2ef2 <__vector_36+0x19a>
    2e26:	88 3a       	cpi	r24, 0xA8	; 168
    2e28:	09 f4       	brne	.+2      	; 0x2e2c <__vector_36+0xd4>
    2e2a:	7c c0       	rjmp	.+248    	; 0x2f24 <__vector_36+0x1cc>
    2e2c:	b1 c0       	rjmp	.+354    	; 0x2f90 <__vector_36+0x238>
    2e2e:	80 3c       	cpi	r24, 0xC0	; 192
    2e30:	09 f4       	brne	.+2      	; 0x2e34 <__vector_36+0xdc>
    2e32:	a4 c0       	rjmp	.+328    	; 0x2f7c <__vector_36+0x224>
    2e34:	88 3c       	cpi	r24, 0xC8	; 200
    2e36:	09 f4       	brne	.+2      	; 0x2e3a <__vector_36+0xe2>
    2e38:	a1 c0       	rjmp	.+322    	; 0x2f7c <__vector_36+0x224>
    2e3a:	88 3b       	cpi	r24, 0xB8	; 184
    2e3c:	09 f4       	brne	.+2      	; 0x2e40 <__vector_36+0xe8>
    2e3e:	87 c0       	rjmp	.+270    	; 0x2f4e <__vector_36+0x1f6>
    2e40:	a7 c0       	rjmp	.+334    	; 0x2f90 <__vector_36+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2e42:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <twi_slarw>
    2e46:	10 c0       	rjmp	.+32     	; 0x2e68 <__vector_36+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2e48:	90 91 46 05 	lds	r25, 0x0546	; 0x800546 <twi_masterBufferIndex>
    2e4c:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <twi_masterBufferLength>
    2e50:	98 17       	cp	r25, r24
    2e52:	70 f5       	brcc	.+92     	; 0x2eb0 <__vector_36+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2e54:	e0 91 46 05 	lds	r30, 0x0546	; 0x800546 <twi_masterBufferIndex>
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	8e 0f       	add	r24, r30
    2e5c:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <twi_masterBufferIndex>
    2e60:	f0 e0       	ldi	r31, 0x00	; 0
    2e62:	e9 5b       	subi	r30, 0xB9	; 185
    2e64:	fa 4f       	sbci	r31, 0xFA	; 250
    2e66:	80 81       	ld	r24, Z
    2e68:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2e6c:	85 ec       	ldi	r24, 0xC5	; 197
    2e6e:	83 c0       	rjmp	.+262    	; 0x2f76 <__vector_36+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2e70:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <twi_error>
    2e74:	8b c0       	rjmp	.+278    	; 0x2f8c <__vector_36+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2e76:	e0 91 46 05 	lds	r30, 0x0546	; 0x800546 <twi_masterBufferIndex>
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	8e 0f       	add	r24, r30
    2e7e:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <twi_masterBufferIndex>
    2e82:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2e86:	f0 e0       	ldi	r31, 0x00	; 0
    2e88:	e9 5b       	subi	r30, 0xB9	; 185
    2e8a:	fa 4f       	sbci	r31, 0xFA	; 250
    2e8c:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2e8e:	90 91 46 05 	lds	r25, 0x0546	; 0x800546 <twi_masterBufferIndex>
    2e92:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <twi_masterBufferLength>
    2e96:	6b c0       	rjmp	.+214    	; 0x2f6e <__vector_36+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2e98:	e0 91 46 05 	lds	r30, 0x0546	; 0x800546 <twi_masterBufferIndex>
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	8e 0f       	add	r24, r30
    2ea0:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <twi_masterBufferIndex>
    2ea4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	e9 5b       	subi	r30, 0xB9	; 185
    2eac:	fa 4f       	sbci	r31, 0xFA	; 250
    2eae:	80 83       	st	Z, r24
	if (twi_sendStop)
    2eb0:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <twi_sendStop>
    2eb4:	81 11       	cpse	r24, r1
    2eb6:	6a c0       	rjmp	.+212    	; 0x2f8c <__vector_36+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2eb8:	81 e0       	ldi	r24, 0x01	; 1
    2eba:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2ebe:	84 ea       	ldi	r24, 0xA4	; 164
    2ec0:	5e c0       	rjmp	.+188    	; 0x2f7e <__vector_36+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2ec2:	83 e0       	ldi	r24, 0x03	; 3
    2ec4:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2ec8:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <twi_rxBufferIndex>
    2ecc:	cf cf       	rjmp	.-98     	; 0x2e6c <__vector_36+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2ece:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <twi_rxBufferIndex>
    2ed2:	80 32       	cpi	r24, 0x20	; 32
    2ed4:	08 f0       	brcs	.+2      	; 0x2ed8 <__vector_36+0x180>
    2ed6:	4e c0       	rjmp	.+156    	; 0x2f74 <__vector_36+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2ed8:	e0 91 02 05 	lds	r30, 0x0502	; 0x800502 <twi_rxBufferIndex>
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	8e 0f       	add	r24, r30
    2ee0:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <twi_rxBufferIndex>
    2ee4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2ee8:	f0 e0       	ldi	r31, 0x00	; 0
    2eea:	ed 5f       	subi	r30, 0xFD	; 253
    2eec:	fa 4f       	sbci	r31, 0xFA	; 250
    2eee:	80 83       	st	Z, r24
    2ef0:	bd cf       	rjmp	.-134    	; 0x2e6c <__vector_36+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2ef2:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2ef6:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <twi_rxBufferIndex>
    2efa:	80 32       	cpi	r24, 0x20	; 32
    2efc:	30 f4       	brcc	.+12     	; 0x2f0a <__vector_36+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2efe:	e0 91 02 05 	lds	r30, 0x0502	; 0x800502 <twi_rxBufferIndex>
    2f02:	f0 e0       	ldi	r31, 0x00	; 0
    2f04:	ed 5f       	subi	r30, 0xFD	; 253
    2f06:	fa 4f       	sbci	r31, 0xFA	; 250
    2f08:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2f0a:	60 91 02 05 	lds	r22, 0x0502	; 0x800502 <twi_rxBufferIndex>
    2f0e:	70 e0       	ldi	r23, 0x00	; 0
    2f10:	e0 91 67 05 	lds	r30, 0x0567	; 0x800567 <twi_onSlaveReceive>
    2f14:	f0 91 68 05 	lds	r31, 0x0568	; 0x800568 <twi_onSlaveReceive+0x1>
    2f18:	83 e0       	ldi	r24, 0x03	; 3
    2f1a:	95 e0       	ldi	r25, 0x05	; 5
    2f1c:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2f1e:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <twi_rxBufferIndex>
      break;
    2f22:	36 c0       	rjmp	.+108    	; 0x2f90 <__vector_36+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2f24:	84 e0       	ldi	r24, 0x04	; 4
    2f26:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2f2a:	10 92 24 05 	sts	0x0524, r1	; 0x800524 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2f2e:	10 92 23 05 	sts	0x0523, r1	; 0x800523 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2f32:	e0 91 69 05 	lds	r30, 0x0569	; 0x800569 <twi_onSlaveTransmit>
    2f36:	f0 91 6a 05 	lds	r31, 0x056A	; 0x80056a <twi_onSlaveTransmit+0x1>
    2f3a:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2f3c:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <twi_txBufferLength>
    2f40:	81 11       	cpse	r24, r1
    2f42:	05 c0       	rjmp	.+10     	; 0x2f4e <__vector_36+0x1f6>
        twi_txBufferLength = 1;
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2f4a:	10 92 25 05 	sts	0x0525, r1	; 0x800525 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2f4e:	e0 91 24 05 	lds	r30, 0x0524	; 0x800524 <twi_txBufferIndex>
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	8e 0f       	add	r24, r30
    2f56:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <twi_txBufferIndex>
    2f5a:	f0 e0       	ldi	r31, 0x00	; 0
    2f5c:	eb 5d       	subi	r30, 0xDB	; 219
    2f5e:	fa 4f       	sbci	r31, 0xFA	; 250
    2f60:	80 81       	ld	r24, Z
    2f62:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2f66:	90 91 24 05 	lds	r25, 0x0524	; 0x800524 <twi_txBufferIndex>
    2f6a:	80 91 23 05 	lds	r24, 0x0523	; 0x800523 <twi_txBufferLength>
    2f6e:	98 17       	cp	r25, r24
    2f70:	08 f4       	brcc	.+2      	; 0x2f74 <__vector_36+0x21c>
    2f72:	7c cf       	rjmp	.-264    	; 0x2e6c <__vector_36+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2f74:	85 e8       	ldi	r24, 0x85	; 133
    2f76:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2f7a:	0a c0       	rjmp	.+20     	; 0x2f90 <__vector_36+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2f7c:	85 ec       	ldi	r24, 0xC5	; 197
    2f7e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2f82:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <twi_state>
      break;
    2f86:	04 c0       	rjmp	.+8      	; 0x2f90 <__vector_36+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2f88:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <twi_error>
      twi_stop();
    2f8c:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <twi_stop>
      break;
  }
}
    2f90:	ff 91       	pop	r31
    2f92:	ef 91       	pop	r30
    2f94:	bf 91       	pop	r27
    2f96:	af 91       	pop	r26
    2f98:	9f 91       	pop	r25
    2f9a:	8f 91       	pop	r24
    2f9c:	7f 91       	pop	r23
    2f9e:	6f 91       	pop	r22
    2fa0:	5f 91       	pop	r21
    2fa2:	4f 91       	pop	r20
    2fa4:	3f 91       	pop	r19
    2fa6:	2f 91       	pop	r18
    2fa8:	0f 90       	pop	r0
    2faa:	0f be       	out	0x3f, r0	; 63
    2fac:	0f 90       	pop	r0
    2fae:	1f 90       	pop	r1
    2fb0:	18 95       	reti

00002fb2 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2fb2:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <_ZN7TwoWire14rxBufferLengthE>
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	20 91 a4 05 	lds	r18, 0x05A4	; 0x8005a4 <_ZN7TwoWire13rxBufferIndexE>
    2fbc:	82 1b       	sub	r24, r18
    2fbe:	91 09       	sbc	r25, r1
    2fc0:	08 95       	ret

00002fc2 <_ZN7TwoWire4readEv>:
    2fc2:	90 91 a4 05 	lds	r25, 0x05A4	; 0x8005a4 <_ZN7TwoWire13rxBufferIndexE>
    2fc6:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <_ZN7TwoWire14rxBufferLengthE>
    2fca:	98 17       	cp	r25, r24
    2fcc:	50 f4       	brcc	.+20     	; 0x2fe2 <_ZN7TwoWire4readEv+0x20>
    2fce:	e9 2f       	mov	r30, r25
    2fd0:	f0 e0       	ldi	r31, 0x00	; 0
    2fd2:	eb 55       	subi	r30, 0x5B	; 91
    2fd4:	fa 4f       	sbci	r31, 0xFA	; 250
    2fd6:	20 81       	ld	r18, Z
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	9f 5f       	subi	r25, 0xFF	; 255
    2fdc:	90 93 a4 05 	sts	0x05A4, r25	; 0x8005a4 <_ZN7TwoWire13rxBufferIndexE>
    2fe0:	02 c0       	rjmp	.+4      	; 0x2fe6 <_ZN7TwoWire4readEv+0x24>
    2fe2:	2f ef       	ldi	r18, 0xFF	; 255
    2fe4:	3f ef       	ldi	r19, 0xFF	; 255
    2fe6:	c9 01       	movw	r24, r18
    2fe8:	08 95       	ret

00002fea <_ZN7TwoWire4peekEv>:
    2fea:	e0 91 a4 05 	lds	r30, 0x05A4	; 0x8005a4 <_ZN7TwoWire13rxBufferIndexE>
    2fee:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <_ZN7TwoWire14rxBufferLengthE>
    2ff2:	e8 17       	cp	r30, r24
    2ff4:	30 f4       	brcc	.+12     	; 0x3002 <_ZN7TwoWire4peekEv+0x18>
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	eb 55       	subi	r30, 0x5B	; 91
    2ffa:	fa 4f       	sbci	r31, 0xFA	; 250
    2ffc:	80 81       	ld	r24, Z
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	08 95       	ret
    3002:	8f ef       	ldi	r24, 0xFF	; 255
    3004:	9f ef       	ldi	r25, 0xFF	; 255
    3006:	08 95       	ret

00003008 <_ZN7TwoWire5flushEv>:
    3008:	08 95       	ret

0000300a <_ZN7TwoWire16onReceiveServiceEPhi>:
    300a:	cf 93       	push	r28
    300c:	df 93       	push	r29
    300e:	ec 01       	movw	r28, r24
    3010:	e0 91 7b 05 	lds	r30, 0x057B	; 0x80057b <_ZN7TwoWire14user_onReceiveE>
    3014:	f0 91 7c 05 	lds	r31, 0x057C	; 0x80057c <_ZN7TwoWire14user_onReceiveE+0x1>
    3018:	30 97       	sbiw	r30, 0x00	; 0
    301a:	f1 f0       	breq	.+60     	; 0x3058 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    301c:	90 91 a4 05 	lds	r25, 0x05A4	; 0x8005a4 <_ZN7TwoWire13rxBufferIndexE>
    3020:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <_ZN7TwoWire14rxBufferLengthE>
    3024:	98 17       	cp	r25, r24
    3026:	c0 f0       	brcs	.+48     	; 0x3058 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	29 2f       	mov	r18, r25
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	26 17       	cp	r18, r22
    3030:	37 07       	cpc	r19, r23
    3032:	54 f4       	brge	.+20     	; 0x3048 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    3034:	de 01       	movw	r26, r28
    3036:	a2 0f       	add	r26, r18
    3038:	b3 1f       	adc	r27, r19
    303a:	4c 91       	ld	r20, X
    303c:	d9 01       	movw	r26, r18
    303e:	ab 55       	subi	r26, 0x5B	; 91
    3040:	ba 4f       	sbci	r27, 0xFA	; 250
    3042:	4c 93       	st	X, r20
    3044:	9f 5f       	subi	r25, 0xFF	; 255
    3046:	f1 cf       	rjmp	.-30     	; 0x302a <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    3048:	10 92 a4 05 	sts	0x05A4, r1	; 0x8005a4 <_ZN7TwoWire13rxBufferIndexE>
    304c:	60 93 a3 05 	sts	0x05A3, r22	; 0x8005a3 <_ZN7TwoWire14rxBufferLengthE>
    3050:	cb 01       	movw	r24, r22
    3052:	df 91       	pop	r29
    3054:	cf 91       	pop	r28
    3056:	09 94       	ijmp
    3058:	df 91       	pop	r29
    305a:	cf 91       	pop	r28
    305c:	08 95       	ret

0000305e <_ZN7TwoWire16onRequestServiceEv>:
    305e:	e0 91 7d 05 	lds	r30, 0x057D	; 0x80057d <_ZN7TwoWire14user_onRequestE>
    3062:	f0 91 7e 05 	lds	r31, 0x057E	; 0x80057e <_ZN7TwoWire14user_onRequestE+0x1>
    3066:	30 97       	sbiw	r30, 0x00	; 0
    3068:	29 f0       	breq	.+10     	; 0x3074 <_ZN7TwoWire16onRequestServiceEv+0x16>
    306a:	10 92 81 05 	sts	0x0581, r1	; 0x800581 <_ZN7TwoWire13txBufferIndexE>
    306e:	10 92 80 05 	sts	0x0580, r1	; 0x800580 <_ZN7TwoWire14txBufferLengthE>
    3072:	09 94       	ijmp
    3074:	08 95       	ret

00003076 <_ZN7TwoWire5writeEPKhj>:
    3076:	cf 92       	push	r12
    3078:	df 92       	push	r13
    307a:	ef 92       	push	r14
    307c:	ff 92       	push	r15
    307e:	0f 93       	push	r16
    3080:	1f 93       	push	r17
    3082:	cf 93       	push	r28
    3084:	df 93       	push	r29
    3086:	7c 01       	movw	r14, r24
    3088:	cb 01       	movw	r24, r22
    308a:	8a 01       	movw	r16, r20
    308c:	20 91 7f 05 	lds	r18, 0x057F	; 0x80057f <_ZN7TwoWire12transmittingE>
    3090:	22 23       	and	r18, r18
    3092:	89 f0       	breq	.+34     	; 0x30b6 <_ZN7TwoWire5writeEPKhj+0x40>
    3094:	eb 01       	movw	r28, r22
    3096:	6b 01       	movw	r12, r22
    3098:	c4 0e       	add	r12, r20
    309a:	d5 1e       	adc	r13, r21
    309c:	cc 15       	cp	r28, r12
    309e:	dd 05       	cpc	r29, r13
    30a0:	69 f0       	breq	.+26     	; 0x30bc <_ZN7TwoWire5writeEPKhj+0x46>
    30a2:	69 91       	ld	r22, Y+
    30a4:	d7 01       	movw	r26, r14
    30a6:	ed 91       	ld	r30, X+
    30a8:	fc 91       	ld	r31, X
    30aa:	01 90       	ld	r0, Z+
    30ac:	f0 81       	ld	r31, Z
    30ae:	e0 2d       	mov	r30, r0
    30b0:	c7 01       	movw	r24, r14
    30b2:	09 95       	icall
    30b4:	f3 cf       	rjmp	.-26     	; 0x309c <_ZN7TwoWire5writeEPKhj+0x26>
    30b6:	64 2f       	mov	r22, r20
    30b8:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <twi_transmit>
    30bc:	c8 01       	movw	r24, r16
    30be:	df 91       	pop	r29
    30c0:	cf 91       	pop	r28
    30c2:	1f 91       	pop	r17
    30c4:	0f 91       	pop	r16
    30c6:	ff 90       	pop	r15
    30c8:	ef 90       	pop	r14
    30ca:	df 90       	pop	r13
    30cc:	cf 90       	pop	r12
    30ce:	08 95       	ret

000030d0 <_ZN7TwoWire5writeEh>:
    30d0:	cf 93       	push	r28
    30d2:	df 93       	push	r29
    30d4:	1f 92       	push	r1
    30d6:	cd b7       	in	r28, 0x3d	; 61
    30d8:	de b7       	in	r29, 0x3e	; 62
    30da:	69 83       	std	Y+1, r22	; 0x01
    30dc:	20 91 7f 05 	lds	r18, 0x057F	; 0x80057f <_ZN7TwoWire12transmittingE>
    30e0:	22 23       	and	r18, r18
    30e2:	d1 f0       	breq	.+52     	; 0x3118 <_ZN7TwoWire5writeEh+0x48>
    30e4:	20 91 80 05 	lds	r18, 0x0580	; 0x800580 <_ZN7TwoWire14txBufferLengthE>
    30e8:	20 32       	cpi	r18, 0x20	; 32
    30ea:	40 f0       	brcs	.+16     	; 0x30fc <_ZN7TwoWire5writeEh+0x2c>
    30ec:	21 e0       	ldi	r18, 0x01	; 1
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	fc 01       	movw	r30, r24
    30f2:	33 83       	std	Z+3, r19	; 0x03
    30f4:	22 83       	std	Z+2, r18	; 0x02
    30f6:	80 e0       	ldi	r24, 0x00	; 0
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	15 c0       	rjmp	.+42     	; 0x3126 <_ZN7TwoWire5writeEh+0x56>
    30fc:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <_ZN7TwoWire13txBufferIndexE>
    3100:	e8 2f       	mov	r30, r24
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	ee 57       	subi	r30, 0x7E	; 126
    3106:	fa 4f       	sbci	r31, 0xFA	; 250
    3108:	99 81       	ldd	r25, Y+1	; 0x01
    310a:	90 83       	st	Z, r25
    310c:	8f 5f       	subi	r24, 0xFF	; 255
    310e:	80 93 81 05 	sts	0x0581, r24	; 0x800581 <_ZN7TwoWire13txBufferIndexE>
    3112:	80 93 80 05 	sts	0x0580, r24	; 0x800580 <_ZN7TwoWire14txBufferLengthE>
    3116:	05 c0       	rjmp	.+10     	; 0x3122 <_ZN7TwoWire5writeEh+0x52>
    3118:	61 e0       	ldi	r22, 0x01	; 1
    311a:	ce 01       	movw	r24, r28
    311c:	01 96       	adiw	r24, 0x01	; 1
    311e:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <twi_transmit>
    3122:	81 e0       	ldi	r24, 0x01	; 1
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	0f 90       	pop	r0
    3128:	df 91       	pop	r29
    312a:	cf 91       	pop	r28
    312c:	08 95       	ret

0000312e <_ZN7TwoWireC1Ev>:
    312e:	fc 01       	movw	r30, r24
    3130:	13 82       	std	Z+3, r1	; 0x03
    3132:	12 82       	std	Z+2, r1	; 0x02
    3134:	88 ee       	ldi	r24, 0xE8	; 232
    3136:	93 e0       	ldi	r25, 0x03	; 3
    3138:	a0 e0       	ldi	r26, 0x00	; 0
    313a:	b0 e0       	ldi	r27, 0x00	; 0
    313c:	84 83       	std	Z+4, r24	; 0x04
    313e:	95 83       	std	Z+5, r25	; 0x05
    3140:	a6 83       	std	Z+6, r26	; 0x06
    3142:	b7 83       	std	Z+7, r27	; 0x07
    3144:	8e ed       	ldi	r24, 0xDE	; 222
    3146:	92 e0       	ldi	r25, 0x02	; 2
    3148:	91 83       	std	Z+1, r25	; 0x01
    314a:	80 83       	st	Z, r24
    314c:	08 95       	ret

0000314e <_ZN7TwoWire5beginEv>:
    314e:	10 92 a4 05 	sts	0x05A4, r1	; 0x8005a4 <_ZN7TwoWire13rxBufferIndexE>
    3152:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <_ZN7TwoWire14rxBufferLengthE>
    3156:	10 92 81 05 	sts	0x0581, r1	; 0x800581 <_ZN7TwoWire13txBufferIndexE>
    315a:	10 92 80 05 	sts	0x0580, r1	; 0x800580 <_ZN7TwoWire14txBufferLengthE>
    315e:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <twi_init>
    3162:	8f e2       	ldi	r24, 0x2F	; 47
    3164:	98 e1       	ldi	r25, 0x18	; 24
    3166:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <twi_attachSlaveTxEvent>
    316a:	85 e0       	ldi	r24, 0x05	; 5
    316c:	98 e1       	ldi	r25, 0x18	; 24
    316e:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <twi_attachSlaveRxEvent>

00003172 <_ZN7TwoWire17beginTransmissionEh>:
    3172:	81 e0       	ldi	r24, 0x01	; 1
    3174:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <_ZN7TwoWire12transmittingE>
    3178:	60 93 a2 05 	sts	0x05A2, r22	; 0x8005a2 <_ZN7TwoWire9txAddressE>
    317c:	10 92 81 05 	sts	0x0581, r1	; 0x800581 <_ZN7TwoWire13txBufferIndexE>
    3180:	10 92 80 05 	sts	0x0580, r1	; 0x800580 <_ZN7TwoWire14txBufferLengthE>
    3184:	08 95       	ret

00003186 <_ZN7TwoWire15endTransmissionEh>:
    3186:	0f 93       	push	r16
    3188:	06 2f       	mov	r16, r22
    318a:	21 e0       	ldi	r18, 0x01	; 1
    318c:	40 91 80 05 	lds	r20, 0x0580	; 0x800580 <_ZN7TwoWire14txBufferLengthE>
    3190:	62 e8       	ldi	r22, 0x82	; 130
    3192:	75 e0       	ldi	r23, 0x05	; 5
    3194:	80 91 a2 05 	lds	r24, 0x05A2	; 0x8005a2 <_ZN7TwoWire9txAddressE>
    3198:	0e 94 14 16 	call	0x2c28	; 0x2c28 <twi_writeTo>
    319c:	10 92 81 05 	sts	0x0581, r1	; 0x800581 <_ZN7TwoWire13txBufferIndexE>
    31a0:	10 92 80 05 	sts	0x0580, r1	; 0x800580 <_ZN7TwoWire14txBufferLengthE>
    31a4:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <_ZN7TwoWire12transmittingE>
    31a8:	0f 91       	pop	r16
    31aa:	08 95       	ret

000031ac <_ZN7TwoWire11requestFromEhhmhh>:
    31ac:	4f 92       	push	r4
    31ae:	5f 92       	push	r5
    31b0:	6f 92       	push	r6
    31b2:	7f 92       	push	r7
    31b4:	af 92       	push	r10
    31b6:	bf 92       	push	r11
    31b8:	cf 92       	push	r12
    31ba:	ef 92       	push	r14
    31bc:	ff 92       	push	r15
    31be:	0f 93       	push	r16
    31c0:	1f 93       	push	r17
    31c2:	cf 93       	push	r28
    31c4:	df 93       	push	r29
    31c6:	5c 01       	movw	r10, r24
    31c8:	f6 2e       	mov	r15, r22
    31ca:	d4 2f       	mov	r29, r20
    31cc:	28 01       	movw	r4, r16
    31ce:	39 01       	movw	r6, r18
    31d0:	ee 20       	and	r14, r14
    31d2:	21 f1       	breq	.+72     	; 0x321c <_ZN7TwoWire11requestFromEhhmhh+0x70>
    31d4:	0e 94 b9 18 	call	0x3172	; 0x3172 <_ZN7TwoWire17beginTransmissionEh>
    31d8:	ce 2d       	mov	r28, r14
    31da:	c4 30       	cpi	r28, 0x04	; 4
    31dc:	08 f0       	brcs	.+2      	; 0x31e0 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    31de:	c3 e0       	ldi	r28, 0x03	; 3
    31e0:	c1 50       	subi	r28, 0x01	; 1
    31e2:	c0 f0       	brcs	.+48     	; 0x3214 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    31e4:	28 e0       	ldi	r18, 0x08	; 8
    31e6:	c2 9f       	mul	r28, r18
    31e8:	c0 01       	movw	r24, r0
    31ea:	11 24       	eor	r1, r1
    31ec:	a3 01       	movw	r20, r6
    31ee:	92 01       	movw	r18, r4
    31f0:	04 c0       	rjmp	.+8      	; 0x31fa <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    31f2:	56 95       	lsr	r21
    31f4:	47 95       	ror	r20
    31f6:	37 95       	ror	r19
    31f8:	27 95       	ror	r18
    31fa:	8a 95       	dec	r24
    31fc:	d2 f7       	brpl	.-12     	; 0x31f2 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    31fe:	ca 01       	movw	r24, r20
    3200:	b9 01       	movw	r22, r18
    3202:	d5 01       	movw	r26, r10
    3204:	ed 91       	ld	r30, X+
    3206:	fc 91       	ld	r31, X
    3208:	01 90       	ld	r0, Z+
    320a:	f0 81       	ld	r31, Z
    320c:	e0 2d       	mov	r30, r0
    320e:	c5 01       	movw	r24, r10
    3210:	09 95       	icall
    3212:	e6 cf       	rjmp	.-52     	; 0x31e0 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    3214:	60 e0       	ldi	r22, 0x00	; 0
    3216:	c5 01       	movw	r24, r10
    3218:	0e 94 c3 18 	call	0x3186	; 0x3186 <_ZN7TwoWire15endTransmissionEh>
    321c:	4d 2f       	mov	r20, r29
    321e:	d1 32       	cpi	r29, 0x21	; 33
    3220:	08 f0       	brcs	.+2      	; 0x3224 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    3222:	40 e2       	ldi	r20, 0x20	; 32
    3224:	2c 2d       	mov	r18, r12
    3226:	65 ea       	ldi	r22, 0xA5	; 165
    3228:	75 e0       	ldi	r23, 0x05	; 5
    322a:	8f 2d       	mov	r24, r15
    322c:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <twi_readFrom>
    3230:	10 92 a4 05 	sts	0x05A4, r1	; 0x8005a4 <_ZN7TwoWire13rxBufferIndexE>
    3234:	80 93 a3 05 	sts	0x05A3, r24	; 0x8005a3 <_ZN7TwoWire14rxBufferLengthE>
    3238:	df 91       	pop	r29
    323a:	cf 91       	pop	r28
    323c:	1f 91       	pop	r17
    323e:	0f 91       	pop	r16
    3240:	ff 90       	pop	r15
    3242:	ef 90       	pop	r14
    3244:	cf 90       	pop	r12
    3246:	bf 90       	pop	r11
    3248:	af 90       	pop	r10
    324a:	7f 90       	pop	r7
    324c:	6f 90       	pop	r6
    324e:	5f 90       	pop	r5
    3250:	4f 90       	pop	r4
    3252:	08 95       	ret

00003254 <_ZN7TwoWire11requestFromEhhh>:
    3254:	cf 92       	push	r12
    3256:	ef 92       	push	r14
    3258:	0f 93       	push	r16
    325a:	1f 93       	push	r17
    325c:	c2 2e       	mov	r12, r18
    325e:	e1 2c       	mov	r14, r1
    3260:	00 e0       	ldi	r16, 0x00	; 0
    3262:	10 e0       	ldi	r17, 0x00	; 0
    3264:	98 01       	movw	r18, r16
    3266:	0e 94 d6 18 	call	0x31ac	; 0x31ac <_ZN7TwoWire11requestFromEhhmhh>
    326a:	1f 91       	pop	r17
    326c:	0f 91       	pop	r16
    326e:	ef 90       	pop	r14
    3270:	cf 90       	pop	r12
    3272:	08 95       	ret

00003274 <_ZN7TwoWire11requestFromEii>:
    3274:	21 e0       	ldi	r18, 0x01	; 1
    3276:	0c 94 2a 19 	jmp	0x3254	; 0x3254 <_ZN7TwoWire11requestFromEhhh>

0000327a <_ZN7TwoWire15endTransmissionEv>:
    327a:	61 e0       	ldi	r22, 0x01	; 1
    327c:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <_ZN7TwoWire15endTransmissionEh>

00003280 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3280:	8f e6       	ldi	r24, 0x6F	; 111
    3282:	95 e0       	ldi	r25, 0x05	; 5
    3284:	0c 94 97 18 	jmp	0x312e	; 0x312e <_ZN7TwoWireC1Ev>

00003288 <__subsf3>:
    3288:	50 58       	subi	r21, 0x80	; 128

0000328a <__addsf3>:
    328a:	bb 27       	eor	r27, r27
    328c:	aa 27       	eor	r26, r26
    328e:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <__addsf3x>
    3292:	0c 94 d6 1a 	jmp	0x35ac	; 0x35ac <__fp_round>
    3296:	0e 94 c8 1a 	call	0x3590	; 0x3590 <__fp_pscA>
    329a:	38 f0       	brcs	.+14     	; 0x32aa <__addsf3+0x20>
    329c:	0e 94 cf 1a 	call	0x359e	; 0x359e <__fp_pscB>
    32a0:	20 f0       	brcs	.+8      	; 0x32aa <__addsf3+0x20>
    32a2:	39 f4       	brne	.+14     	; 0x32b2 <__addsf3+0x28>
    32a4:	9f 3f       	cpi	r25, 0xFF	; 255
    32a6:	19 f4       	brne	.+6      	; 0x32ae <__addsf3+0x24>
    32a8:	26 f4       	brtc	.+8      	; 0x32b2 <__addsf3+0x28>
    32aa:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <__fp_nan>
    32ae:	0e f4       	brtc	.+2      	; 0x32b2 <__addsf3+0x28>
    32b0:	e0 95       	com	r30
    32b2:	e7 fb       	bst	r30, 7
    32b4:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__fp_inf>

000032b8 <__addsf3x>:
    32b8:	e9 2f       	mov	r30, r25
    32ba:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <__fp_split3>
    32be:	58 f3       	brcs	.-42     	; 0x3296 <__addsf3+0xc>
    32c0:	ba 17       	cp	r27, r26
    32c2:	62 07       	cpc	r22, r18
    32c4:	73 07       	cpc	r23, r19
    32c6:	84 07       	cpc	r24, r20
    32c8:	95 07       	cpc	r25, r21
    32ca:	20 f0       	brcs	.+8      	; 0x32d4 <__addsf3x+0x1c>
    32cc:	79 f4       	brne	.+30     	; 0x32ec <__addsf3x+0x34>
    32ce:	a6 f5       	brtc	.+104    	; 0x3338 <__addsf3x+0x80>
    32d0:	0c 94 09 1b 	jmp	0x3612	; 0x3612 <__fp_zero>
    32d4:	0e f4       	brtc	.+2      	; 0x32d8 <__addsf3x+0x20>
    32d6:	e0 95       	com	r30
    32d8:	0b 2e       	mov	r0, r27
    32da:	ba 2f       	mov	r27, r26
    32dc:	a0 2d       	mov	r26, r0
    32de:	0b 01       	movw	r0, r22
    32e0:	b9 01       	movw	r22, r18
    32e2:	90 01       	movw	r18, r0
    32e4:	0c 01       	movw	r0, r24
    32e6:	ca 01       	movw	r24, r20
    32e8:	a0 01       	movw	r20, r0
    32ea:	11 24       	eor	r1, r1
    32ec:	ff 27       	eor	r31, r31
    32ee:	59 1b       	sub	r21, r25
    32f0:	99 f0       	breq	.+38     	; 0x3318 <__addsf3x+0x60>
    32f2:	59 3f       	cpi	r21, 0xF9	; 249
    32f4:	50 f4       	brcc	.+20     	; 0x330a <__addsf3x+0x52>
    32f6:	50 3e       	cpi	r21, 0xE0	; 224
    32f8:	68 f1       	brcs	.+90     	; 0x3354 <__addsf3x+0x9c>
    32fa:	1a 16       	cp	r1, r26
    32fc:	f0 40       	sbci	r31, 0x00	; 0
    32fe:	a2 2f       	mov	r26, r18
    3300:	23 2f       	mov	r18, r19
    3302:	34 2f       	mov	r19, r20
    3304:	44 27       	eor	r20, r20
    3306:	58 5f       	subi	r21, 0xF8	; 248
    3308:	f3 cf       	rjmp	.-26     	; 0x32f0 <__addsf3x+0x38>
    330a:	46 95       	lsr	r20
    330c:	37 95       	ror	r19
    330e:	27 95       	ror	r18
    3310:	a7 95       	ror	r26
    3312:	f0 40       	sbci	r31, 0x00	; 0
    3314:	53 95       	inc	r21
    3316:	c9 f7       	brne	.-14     	; 0x330a <__addsf3x+0x52>
    3318:	7e f4       	brtc	.+30     	; 0x3338 <__addsf3x+0x80>
    331a:	1f 16       	cp	r1, r31
    331c:	ba 0b       	sbc	r27, r26
    331e:	62 0b       	sbc	r22, r18
    3320:	73 0b       	sbc	r23, r19
    3322:	84 0b       	sbc	r24, r20
    3324:	ba f0       	brmi	.+46     	; 0x3354 <__addsf3x+0x9c>
    3326:	91 50       	subi	r25, 0x01	; 1
    3328:	a1 f0       	breq	.+40     	; 0x3352 <__addsf3x+0x9a>
    332a:	ff 0f       	add	r31, r31
    332c:	bb 1f       	adc	r27, r27
    332e:	66 1f       	adc	r22, r22
    3330:	77 1f       	adc	r23, r23
    3332:	88 1f       	adc	r24, r24
    3334:	c2 f7       	brpl	.-16     	; 0x3326 <__addsf3x+0x6e>
    3336:	0e c0       	rjmp	.+28     	; 0x3354 <__addsf3x+0x9c>
    3338:	ba 0f       	add	r27, r26
    333a:	62 1f       	adc	r22, r18
    333c:	73 1f       	adc	r23, r19
    333e:	84 1f       	adc	r24, r20
    3340:	48 f4       	brcc	.+18     	; 0x3354 <__addsf3x+0x9c>
    3342:	87 95       	ror	r24
    3344:	77 95       	ror	r23
    3346:	67 95       	ror	r22
    3348:	b7 95       	ror	r27
    334a:	f7 95       	ror	r31
    334c:	9e 3f       	cpi	r25, 0xFE	; 254
    334e:	08 f0       	brcs	.+2      	; 0x3352 <__addsf3x+0x9a>
    3350:	b0 cf       	rjmp	.-160    	; 0x32b2 <__addsf3+0x28>
    3352:	93 95       	inc	r25
    3354:	88 0f       	add	r24, r24
    3356:	08 f0       	brcs	.+2      	; 0x335a <__addsf3x+0xa2>
    3358:	99 27       	eor	r25, r25
    335a:	ee 0f       	add	r30, r30
    335c:	97 95       	ror	r25
    335e:	87 95       	ror	r24
    3360:	08 95       	ret

00003362 <__cmpsf2>:
    3362:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__fp_cmp>
    3366:	08 f4       	brcc	.+2      	; 0x336a <__cmpsf2+0x8>
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	08 95       	ret

0000336c <__divsf3>:
    336c:	0e 94 ca 19 	call	0x3394	; 0x3394 <__divsf3x>
    3370:	0c 94 d6 1a 	jmp	0x35ac	; 0x35ac <__fp_round>
    3374:	0e 94 cf 1a 	call	0x359e	; 0x359e <__fp_pscB>
    3378:	58 f0       	brcs	.+22     	; 0x3390 <__divsf3+0x24>
    337a:	0e 94 c8 1a 	call	0x3590	; 0x3590 <__fp_pscA>
    337e:	40 f0       	brcs	.+16     	; 0x3390 <__divsf3+0x24>
    3380:	29 f4       	brne	.+10     	; 0x338c <__divsf3+0x20>
    3382:	5f 3f       	cpi	r21, 0xFF	; 255
    3384:	29 f0       	breq	.+10     	; 0x3390 <__divsf3+0x24>
    3386:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__fp_inf>
    338a:	51 11       	cpse	r21, r1
    338c:	0c 94 0a 1b 	jmp	0x3614	; 0x3614 <__fp_szero>
    3390:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <__fp_nan>

00003394 <__divsf3x>:
    3394:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <__fp_split3>
    3398:	68 f3       	brcs	.-38     	; 0x3374 <__divsf3+0x8>

0000339a <__divsf3_pse>:
    339a:	99 23       	and	r25, r25
    339c:	b1 f3       	breq	.-20     	; 0x338a <__divsf3+0x1e>
    339e:	55 23       	and	r21, r21
    33a0:	91 f3       	breq	.-28     	; 0x3386 <__divsf3+0x1a>
    33a2:	95 1b       	sub	r25, r21
    33a4:	55 0b       	sbc	r21, r21
    33a6:	bb 27       	eor	r27, r27
    33a8:	aa 27       	eor	r26, r26
    33aa:	62 17       	cp	r22, r18
    33ac:	73 07       	cpc	r23, r19
    33ae:	84 07       	cpc	r24, r20
    33b0:	38 f0       	brcs	.+14     	; 0x33c0 <__divsf3_pse+0x26>
    33b2:	9f 5f       	subi	r25, 0xFF	; 255
    33b4:	5f 4f       	sbci	r21, 0xFF	; 255
    33b6:	22 0f       	add	r18, r18
    33b8:	33 1f       	adc	r19, r19
    33ba:	44 1f       	adc	r20, r20
    33bc:	aa 1f       	adc	r26, r26
    33be:	a9 f3       	breq	.-22     	; 0x33aa <__divsf3_pse+0x10>
    33c0:	35 d0       	rcall	.+106    	; 0x342c <__divsf3_pse+0x92>
    33c2:	0e 2e       	mov	r0, r30
    33c4:	3a f0       	brmi	.+14     	; 0x33d4 <__divsf3_pse+0x3a>
    33c6:	e0 e8       	ldi	r30, 0x80	; 128
    33c8:	32 d0       	rcall	.+100    	; 0x342e <__divsf3_pse+0x94>
    33ca:	91 50       	subi	r25, 0x01	; 1
    33cc:	50 40       	sbci	r21, 0x00	; 0
    33ce:	e6 95       	lsr	r30
    33d0:	00 1c       	adc	r0, r0
    33d2:	ca f7       	brpl	.-14     	; 0x33c6 <__divsf3_pse+0x2c>
    33d4:	2b d0       	rcall	.+86     	; 0x342c <__divsf3_pse+0x92>
    33d6:	fe 2f       	mov	r31, r30
    33d8:	29 d0       	rcall	.+82     	; 0x342c <__divsf3_pse+0x92>
    33da:	66 0f       	add	r22, r22
    33dc:	77 1f       	adc	r23, r23
    33de:	88 1f       	adc	r24, r24
    33e0:	bb 1f       	adc	r27, r27
    33e2:	26 17       	cp	r18, r22
    33e4:	37 07       	cpc	r19, r23
    33e6:	48 07       	cpc	r20, r24
    33e8:	ab 07       	cpc	r26, r27
    33ea:	b0 e8       	ldi	r27, 0x80	; 128
    33ec:	09 f0       	breq	.+2      	; 0x33f0 <__divsf3_pse+0x56>
    33ee:	bb 0b       	sbc	r27, r27
    33f0:	80 2d       	mov	r24, r0
    33f2:	bf 01       	movw	r22, r30
    33f4:	ff 27       	eor	r31, r31
    33f6:	93 58       	subi	r25, 0x83	; 131
    33f8:	5f 4f       	sbci	r21, 0xFF	; 255
    33fa:	3a f0       	brmi	.+14     	; 0x340a <__divsf3_pse+0x70>
    33fc:	9e 3f       	cpi	r25, 0xFE	; 254
    33fe:	51 05       	cpc	r21, r1
    3400:	78 f0       	brcs	.+30     	; 0x3420 <__divsf3_pse+0x86>
    3402:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__fp_inf>
    3406:	0c 94 0a 1b 	jmp	0x3614	; 0x3614 <__fp_szero>
    340a:	5f 3f       	cpi	r21, 0xFF	; 255
    340c:	e4 f3       	brlt	.-8      	; 0x3406 <__divsf3_pse+0x6c>
    340e:	98 3e       	cpi	r25, 0xE8	; 232
    3410:	d4 f3       	brlt	.-12     	; 0x3406 <__divsf3_pse+0x6c>
    3412:	86 95       	lsr	r24
    3414:	77 95       	ror	r23
    3416:	67 95       	ror	r22
    3418:	b7 95       	ror	r27
    341a:	f7 95       	ror	r31
    341c:	9f 5f       	subi	r25, 0xFF	; 255
    341e:	c9 f7       	brne	.-14     	; 0x3412 <__divsf3_pse+0x78>
    3420:	88 0f       	add	r24, r24
    3422:	91 1d       	adc	r25, r1
    3424:	96 95       	lsr	r25
    3426:	87 95       	ror	r24
    3428:	97 f9       	bld	r25, 7
    342a:	08 95       	ret
    342c:	e1 e0       	ldi	r30, 0x01	; 1
    342e:	66 0f       	add	r22, r22
    3430:	77 1f       	adc	r23, r23
    3432:	88 1f       	adc	r24, r24
    3434:	bb 1f       	adc	r27, r27
    3436:	62 17       	cp	r22, r18
    3438:	73 07       	cpc	r23, r19
    343a:	84 07       	cpc	r24, r20
    343c:	ba 07       	cpc	r27, r26
    343e:	20 f0       	brcs	.+8      	; 0x3448 <__divsf3_pse+0xae>
    3440:	62 1b       	sub	r22, r18
    3442:	73 0b       	sbc	r23, r19
    3444:	84 0b       	sbc	r24, r20
    3446:	ba 0b       	sbc	r27, r26
    3448:	ee 1f       	adc	r30, r30
    344a:	88 f7       	brcc	.-30     	; 0x342e <__divsf3_pse+0x94>
    344c:	e0 95       	com	r30
    344e:	08 95       	ret

00003450 <__fixsfsi>:
    3450:	0e 94 2f 1a 	call	0x345e	; 0x345e <__fixunssfsi>
    3454:	68 94       	set
    3456:	b1 11       	cpse	r27, r1
    3458:	0c 94 0a 1b 	jmp	0x3614	; 0x3614 <__fp_szero>
    345c:	08 95       	ret

0000345e <__fixunssfsi>:
    345e:	0e 94 ef 1a 	call	0x35de	; 0x35de <__fp_splitA>
    3462:	88 f0       	brcs	.+34     	; 0x3486 <__fixunssfsi+0x28>
    3464:	9f 57       	subi	r25, 0x7F	; 127
    3466:	98 f0       	brcs	.+38     	; 0x348e <__fixunssfsi+0x30>
    3468:	b9 2f       	mov	r27, r25
    346a:	99 27       	eor	r25, r25
    346c:	b7 51       	subi	r27, 0x17	; 23
    346e:	b0 f0       	brcs	.+44     	; 0x349c <__fixunssfsi+0x3e>
    3470:	e1 f0       	breq	.+56     	; 0x34aa <__fixunssfsi+0x4c>
    3472:	66 0f       	add	r22, r22
    3474:	77 1f       	adc	r23, r23
    3476:	88 1f       	adc	r24, r24
    3478:	99 1f       	adc	r25, r25
    347a:	1a f0       	brmi	.+6      	; 0x3482 <__fixunssfsi+0x24>
    347c:	ba 95       	dec	r27
    347e:	c9 f7       	brne	.-14     	; 0x3472 <__fixunssfsi+0x14>
    3480:	14 c0       	rjmp	.+40     	; 0x34aa <__fixunssfsi+0x4c>
    3482:	b1 30       	cpi	r27, 0x01	; 1
    3484:	91 f0       	breq	.+36     	; 0x34aa <__fixunssfsi+0x4c>
    3486:	0e 94 09 1b 	call	0x3612	; 0x3612 <__fp_zero>
    348a:	b1 e0       	ldi	r27, 0x01	; 1
    348c:	08 95       	ret
    348e:	0c 94 09 1b 	jmp	0x3612	; 0x3612 <__fp_zero>
    3492:	67 2f       	mov	r22, r23
    3494:	78 2f       	mov	r23, r24
    3496:	88 27       	eor	r24, r24
    3498:	b8 5f       	subi	r27, 0xF8	; 248
    349a:	39 f0       	breq	.+14     	; 0x34aa <__fixunssfsi+0x4c>
    349c:	b9 3f       	cpi	r27, 0xF9	; 249
    349e:	cc f3       	brlt	.-14     	; 0x3492 <__fixunssfsi+0x34>
    34a0:	86 95       	lsr	r24
    34a2:	77 95       	ror	r23
    34a4:	67 95       	ror	r22
    34a6:	b3 95       	inc	r27
    34a8:	d9 f7       	brne	.-10     	; 0x34a0 <__fixunssfsi+0x42>
    34aa:	3e f4       	brtc	.+14     	; 0x34ba <__fixunssfsi+0x5c>
    34ac:	90 95       	com	r25
    34ae:	80 95       	com	r24
    34b0:	70 95       	com	r23
    34b2:	61 95       	neg	r22
    34b4:	7f 4f       	sbci	r23, 0xFF	; 255
    34b6:	8f 4f       	sbci	r24, 0xFF	; 255
    34b8:	9f 4f       	sbci	r25, 0xFF	; 255
    34ba:	08 95       	ret

000034bc <__floatunsisf>:
    34bc:	e8 94       	clt
    34be:	09 c0       	rjmp	.+18     	; 0x34d2 <__floatsisf+0x12>

000034c0 <__floatsisf>:
    34c0:	97 fb       	bst	r25, 7
    34c2:	3e f4       	brtc	.+14     	; 0x34d2 <__floatsisf+0x12>
    34c4:	90 95       	com	r25
    34c6:	80 95       	com	r24
    34c8:	70 95       	com	r23
    34ca:	61 95       	neg	r22
    34cc:	7f 4f       	sbci	r23, 0xFF	; 255
    34ce:	8f 4f       	sbci	r24, 0xFF	; 255
    34d0:	9f 4f       	sbci	r25, 0xFF	; 255
    34d2:	99 23       	and	r25, r25
    34d4:	a9 f0       	breq	.+42     	; 0x3500 <__floatsisf+0x40>
    34d6:	f9 2f       	mov	r31, r25
    34d8:	96 e9       	ldi	r25, 0x96	; 150
    34da:	bb 27       	eor	r27, r27
    34dc:	93 95       	inc	r25
    34de:	f6 95       	lsr	r31
    34e0:	87 95       	ror	r24
    34e2:	77 95       	ror	r23
    34e4:	67 95       	ror	r22
    34e6:	b7 95       	ror	r27
    34e8:	f1 11       	cpse	r31, r1
    34ea:	f8 cf       	rjmp	.-16     	; 0x34dc <__floatsisf+0x1c>
    34ec:	fa f4       	brpl	.+62     	; 0x352c <__floatsisf+0x6c>
    34ee:	bb 0f       	add	r27, r27
    34f0:	11 f4       	brne	.+4      	; 0x34f6 <__floatsisf+0x36>
    34f2:	60 ff       	sbrs	r22, 0
    34f4:	1b c0       	rjmp	.+54     	; 0x352c <__floatsisf+0x6c>
    34f6:	6f 5f       	subi	r22, 0xFF	; 255
    34f8:	7f 4f       	sbci	r23, 0xFF	; 255
    34fa:	8f 4f       	sbci	r24, 0xFF	; 255
    34fc:	9f 4f       	sbci	r25, 0xFF	; 255
    34fe:	16 c0       	rjmp	.+44     	; 0x352c <__floatsisf+0x6c>
    3500:	88 23       	and	r24, r24
    3502:	11 f0       	breq	.+4      	; 0x3508 <__floatsisf+0x48>
    3504:	96 e9       	ldi	r25, 0x96	; 150
    3506:	11 c0       	rjmp	.+34     	; 0x352a <__floatsisf+0x6a>
    3508:	77 23       	and	r23, r23
    350a:	21 f0       	breq	.+8      	; 0x3514 <__floatsisf+0x54>
    350c:	9e e8       	ldi	r25, 0x8E	; 142
    350e:	87 2f       	mov	r24, r23
    3510:	76 2f       	mov	r23, r22
    3512:	05 c0       	rjmp	.+10     	; 0x351e <__floatsisf+0x5e>
    3514:	66 23       	and	r22, r22
    3516:	71 f0       	breq	.+28     	; 0x3534 <__floatsisf+0x74>
    3518:	96 e8       	ldi	r25, 0x86	; 134
    351a:	86 2f       	mov	r24, r22
    351c:	70 e0       	ldi	r23, 0x00	; 0
    351e:	60 e0       	ldi	r22, 0x00	; 0
    3520:	2a f0       	brmi	.+10     	; 0x352c <__floatsisf+0x6c>
    3522:	9a 95       	dec	r25
    3524:	66 0f       	add	r22, r22
    3526:	77 1f       	adc	r23, r23
    3528:	88 1f       	adc	r24, r24
    352a:	da f7       	brpl	.-10     	; 0x3522 <__floatsisf+0x62>
    352c:	88 0f       	add	r24, r24
    352e:	96 95       	lsr	r25
    3530:	87 95       	ror	r24
    3532:	97 f9       	bld	r25, 7
    3534:	08 95       	ret

00003536 <__fp_cmp>:
    3536:	99 0f       	add	r25, r25
    3538:	00 08       	sbc	r0, r0
    353a:	55 0f       	add	r21, r21
    353c:	aa 0b       	sbc	r26, r26
    353e:	e0 e8       	ldi	r30, 0x80	; 128
    3540:	fe ef       	ldi	r31, 0xFE	; 254
    3542:	16 16       	cp	r1, r22
    3544:	17 06       	cpc	r1, r23
    3546:	e8 07       	cpc	r30, r24
    3548:	f9 07       	cpc	r31, r25
    354a:	c0 f0       	brcs	.+48     	; 0x357c <__fp_cmp+0x46>
    354c:	12 16       	cp	r1, r18
    354e:	13 06       	cpc	r1, r19
    3550:	e4 07       	cpc	r30, r20
    3552:	f5 07       	cpc	r31, r21
    3554:	98 f0       	brcs	.+38     	; 0x357c <__fp_cmp+0x46>
    3556:	62 1b       	sub	r22, r18
    3558:	73 0b       	sbc	r23, r19
    355a:	84 0b       	sbc	r24, r20
    355c:	95 0b       	sbc	r25, r21
    355e:	39 f4       	brne	.+14     	; 0x356e <__fp_cmp+0x38>
    3560:	0a 26       	eor	r0, r26
    3562:	61 f0       	breq	.+24     	; 0x357c <__fp_cmp+0x46>
    3564:	23 2b       	or	r18, r19
    3566:	24 2b       	or	r18, r20
    3568:	25 2b       	or	r18, r21
    356a:	21 f4       	brne	.+8      	; 0x3574 <__fp_cmp+0x3e>
    356c:	08 95       	ret
    356e:	0a 26       	eor	r0, r26
    3570:	09 f4       	brne	.+2      	; 0x3574 <__fp_cmp+0x3e>
    3572:	a1 40       	sbci	r26, 0x01	; 1
    3574:	a6 95       	lsr	r26
    3576:	8f ef       	ldi	r24, 0xFF	; 255
    3578:	81 1d       	adc	r24, r1
    357a:	81 1d       	adc	r24, r1
    357c:	08 95       	ret

0000357e <__fp_inf>:
    357e:	97 f9       	bld	r25, 7
    3580:	9f 67       	ori	r25, 0x7F	; 127
    3582:	80 e8       	ldi	r24, 0x80	; 128
    3584:	70 e0       	ldi	r23, 0x00	; 0
    3586:	60 e0       	ldi	r22, 0x00	; 0
    3588:	08 95       	ret

0000358a <__fp_nan>:
    358a:	9f ef       	ldi	r25, 0xFF	; 255
    358c:	80 ec       	ldi	r24, 0xC0	; 192
    358e:	08 95       	ret

00003590 <__fp_pscA>:
    3590:	00 24       	eor	r0, r0
    3592:	0a 94       	dec	r0
    3594:	16 16       	cp	r1, r22
    3596:	17 06       	cpc	r1, r23
    3598:	18 06       	cpc	r1, r24
    359a:	09 06       	cpc	r0, r25
    359c:	08 95       	ret

0000359e <__fp_pscB>:
    359e:	00 24       	eor	r0, r0
    35a0:	0a 94       	dec	r0
    35a2:	12 16       	cp	r1, r18
    35a4:	13 06       	cpc	r1, r19
    35a6:	14 06       	cpc	r1, r20
    35a8:	05 06       	cpc	r0, r21
    35aa:	08 95       	ret

000035ac <__fp_round>:
    35ac:	09 2e       	mov	r0, r25
    35ae:	03 94       	inc	r0
    35b0:	00 0c       	add	r0, r0
    35b2:	11 f4       	brne	.+4      	; 0x35b8 <__fp_round+0xc>
    35b4:	88 23       	and	r24, r24
    35b6:	52 f0       	brmi	.+20     	; 0x35cc <__fp_round+0x20>
    35b8:	bb 0f       	add	r27, r27
    35ba:	40 f4       	brcc	.+16     	; 0x35cc <__fp_round+0x20>
    35bc:	bf 2b       	or	r27, r31
    35be:	11 f4       	brne	.+4      	; 0x35c4 <__fp_round+0x18>
    35c0:	60 ff       	sbrs	r22, 0
    35c2:	04 c0       	rjmp	.+8      	; 0x35cc <__fp_round+0x20>
    35c4:	6f 5f       	subi	r22, 0xFF	; 255
    35c6:	7f 4f       	sbci	r23, 0xFF	; 255
    35c8:	8f 4f       	sbci	r24, 0xFF	; 255
    35ca:	9f 4f       	sbci	r25, 0xFF	; 255
    35cc:	08 95       	ret

000035ce <__fp_split3>:
    35ce:	57 fd       	sbrc	r21, 7
    35d0:	90 58       	subi	r25, 0x80	; 128
    35d2:	44 0f       	add	r20, r20
    35d4:	55 1f       	adc	r21, r21
    35d6:	59 f0       	breq	.+22     	; 0x35ee <__fp_splitA+0x10>
    35d8:	5f 3f       	cpi	r21, 0xFF	; 255
    35da:	71 f0       	breq	.+28     	; 0x35f8 <__fp_splitA+0x1a>
    35dc:	47 95       	ror	r20

000035de <__fp_splitA>:
    35de:	88 0f       	add	r24, r24
    35e0:	97 fb       	bst	r25, 7
    35e2:	99 1f       	adc	r25, r25
    35e4:	61 f0       	breq	.+24     	; 0x35fe <__fp_splitA+0x20>
    35e6:	9f 3f       	cpi	r25, 0xFF	; 255
    35e8:	79 f0       	breq	.+30     	; 0x3608 <__fp_splitA+0x2a>
    35ea:	87 95       	ror	r24
    35ec:	08 95       	ret
    35ee:	12 16       	cp	r1, r18
    35f0:	13 06       	cpc	r1, r19
    35f2:	14 06       	cpc	r1, r20
    35f4:	55 1f       	adc	r21, r21
    35f6:	f2 cf       	rjmp	.-28     	; 0x35dc <__fp_split3+0xe>
    35f8:	46 95       	lsr	r20
    35fa:	f1 df       	rcall	.-30     	; 0x35de <__fp_splitA>
    35fc:	08 c0       	rjmp	.+16     	; 0x360e <__fp_splitA+0x30>
    35fe:	16 16       	cp	r1, r22
    3600:	17 06       	cpc	r1, r23
    3602:	18 06       	cpc	r1, r24
    3604:	99 1f       	adc	r25, r25
    3606:	f1 cf       	rjmp	.-30     	; 0x35ea <__fp_splitA+0xc>
    3608:	86 95       	lsr	r24
    360a:	71 05       	cpc	r23, r1
    360c:	61 05       	cpc	r22, r1
    360e:	08 94       	sec
    3610:	08 95       	ret

00003612 <__fp_zero>:
    3612:	e8 94       	clt

00003614 <__fp_szero>:
    3614:	bb 27       	eor	r27, r27
    3616:	66 27       	eor	r22, r22
    3618:	77 27       	eor	r23, r23
    361a:	cb 01       	movw	r24, r22
    361c:	97 f9       	bld	r25, 7
    361e:	08 95       	ret

00003620 <__gesf2>:
    3620:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__fp_cmp>
    3624:	08 f4       	brcc	.+2      	; 0x3628 <__gesf2+0x8>
    3626:	8f ef       	ldi	r24, 0xFF	; 255
    3628:	08 95       	ret

0000362a <__mulsf3>:
    362a:	0e 94 28 1b 	call	0x3650	; 0x3650 <__mulsf3x>
    362e:	0c 94 d6 1a 	jmp	0x35ac	; 0x35ac <__fp_round>
    3632:	0e 94 c8 1a 	call	0x3590	; 0x3590 <__fp_pscA>
    3636:	38 f0       	brcs	.+14     	; 0x3646 <__mulsf3+0x1c>
    3638:	0e 94 cf 1a 	call	0x359e	; 0x359e <__fp_pscB>
    363c:	20 f0       	brcs	.+8      	; 0x3646 <__mulsf3+0x1c>
    363e:	95 23       	and	r25, r21
    3640:	11 f0       	breq	.+4      	; 0x3646 <__mulsf3+0x1c>
    3642:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__fp_inf>
    3646:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <__fp_nan>
    364a:	11 24       	eor	r1, r1
    364c:	0c 94 0a 1b 	jmp	0x3614	; 0x3614 <__fp_szero>

00003650 <__mulsf3x>:
    3650:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <__fp_split3>
    3654:	70 f3       	brcs	.-36     	; 0x3632 <__mulsf3+0x8>

00003656 <__mulsf3_pse>:
    3656:	95 9f       	mul	r25, r21
    3658:	c1 f3       	breq	.-16     	; 0x364a <__mulsf3+0x20>
    365a:	95 0f       	add	r25, r21
    365c:	50 e0       	ldi	r21, 0x00	; 0
    365e:	55 1f       	adc	r21, r21
    3660:	62 9f       	mul	r22, r18
    3662:	f0 01       	movw	r30, r0
    3664:	72 9f       	mul	r23, r18
    3666:	bb 27       	eor	r27, r27
    3668:	f0 0d       	add	r31, r0
    366a:	b1 1d       	adc	r27, r1
    366c:	63 9f       	mul	r22, r19
    366e:	aa 27       	eor	r26, r26
    3670:	f0 0d       	add	r31, r0
    3672:	b1 1d       	adc	r27, r1
    3674:	aa 1f       	adc	r26, r26
    3676:	64 9f       	mul	r22, r20
    3678:	66 27       	eor	r22, r22
    367a:	b0 0d       	add	r27, r0
    367c:	a1 1d       	adc	r26, r1
    367e:	66 1f       	adc	r22, r22
    3680:	82 9f       	mul	r24, r18
    3682:	22 27       	eor	r18, r18
    3684:	b0 0d       	add	r27, r0
    3686:	a1 1d       	adc	r26, r1
    3688:	62 1f       	adc	r22, r18
    368a:	73 9f       	mul	r23, r19
    368c:	b0 0d       	add	r27, r0
    368e:	a1 1d       	adc	r26, r1
    3690:	62 1f       	adc	r22, r18
    3692:	83 9f       	mul	r24, r19
    3694:	a0 0d       	add	r26, r0
    3696:	61 1d       	adc	r22, r1
    3698:	22 1f       	adc	r18, r18
    369a:	74 9f       	mul	r23, r20
    369c:	33 27       	eor	r19, r19
    369e:	a0 0d       	add	r26, r0
    36a0:	61 1d       	adc	r22, r1
    36a2:	23 1f       	adc	r18, r19
    36a4:	84 9f       	mul	r24, r20
    36a6:	60 0d       	add	r22, r0
    36a8:	21 1d       	adc	r18, r1
    36aa:	82 2f       	mov	r24, r18
    36ac:	76 2f       	mov	r23, r22
    36ae:	6a 2f       	mov	r22, r26
    36b0:	11 24       	eor	r1, r1
    36b2:	9f 57       	subi	r25, 0x7F	; 127
    36b4:	50 40       	sbci	r21, 0x00	; 0
    36b6:	9a f0       	brmi	.+38     	; 0x36de <__mulsf3_pse+0x88>
    36b8:	f1 f0       	breq	.+60     	; 0x36f6 <__mulsf3_pse+0xa0>
    36ba:	88 23       	and	r24, r24
    36bc:	4a f0       	brmi	.+18     	; 0x36d0 <__mulsf3_pse+0x7a>
    36be:	ee 0f       	add	r30, r30
    36c0:	ff 1f       	adc	r31, r31
    36c2:	bb 1f       	adc	r27, r27
    36c4:	66 1f       	adc	r22, r22
    36c6:	77 1f       	adc	r23, r23
    36c8:	88 1f       	adc	r24, r24
    36ca:	91 50       	subi	r25, 0x01	; 1
    36cc:	50 40       	sbci	r21, 0x00	; 0
    36ce:	a9 f7       	brne	.-22     	; 0x36ba <__mulsf3_pse+0x64>
    36d0:	9e 3f       	cpi	r25, 0xFE	; 254
    36d2:	51 05       	cpc	r21, r1
    36d4:	80 f0       	brcs	.+32     	; 0x36f6 <__mulsf3_pse+0xa0>
    36d6:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__fp_inf>
    36da:	0c 94 0a 1b 	jmp	0x3614	; 0x3614 <__fp_szero>
    36de:	5f 3f       	cpi	r21, 0xFF	; 255
    36e0:	e4 f3       	brlt	.-8      	; 0x36da <__mulsf3_pse+0x84>
    36e2:	98 3e       	cpi	r25, 0xE8	; 232
    36e4:	d4 f3       	brlt	.-12     	; 0x36da <__mulsf3_pse+0x84>
    36e6:	86 95       	lsr	r24
    36e8:	77 95       	ror	r23
    36ea:	67 95       	ror	r22
    36ec:	b7 95       	ror	r27
    36ee:	f7 95       	ror	r31
    36f0:	e7 95       	ror	r30
    36f2:	9f 5f       	subi	r25, 0xFF	; 255
    36f4:	c1 f7       	brne	.-16     	; 0x36e6 <__mulsf3_pse+0x90>
    36f6:	fe 2b       	or	r31, r30
    36f8:	88 0f       	add	r24, r24
    36fa:	91 1d       	adc	r25, r1
    36fc:	96 95       	lsr	r25
    36fe:	87 95       	ror	r24
    3700:	97 f9       	bld	r25, 7
    3702:	08 95       	ret

00003704 <__cxa_pure_virtual>:
    3704:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <abort>

00003708 <_ZN7Serial_5writeEh>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		ret = breakValue;
		breakValue = -1;
	}
	return ret;
}
    3708:	cf 93       	push	r28
    370a:	df 93       	push	r29
    370c:	1f 92       	push	r1
    370e:	cd b7       	in	r28, 0x3d	; 61
    3710:	de b7       	in	r29, 0x3e	; 62
    3712:	69 83       	std	Y+1, r22	; 0x01
    3714:	dc 01       	movw	r26, r24
    3716:	ed 91       	ld	r30, X+
    3718:	fc 91       	ld	r31, X
    371a:	02 80       	ldd	r0, Z+2	; 0x02
    371c:	f3 81       	ldd	r31, Z+3	; 0x03
    371e:	e0 2d       	mov	r30, r0
    3720:	41 e0       	ldi	r20, 0x01	; 1
    3722:	50 e0       	ldi	r21, 0x00	; 0
    3724:	be 01       	movw	r22, r28
    3726:	6f 5f       	subi	r22, 0xFF	; 255
    3728:	7f 4f       	sbci	r23, 0xFF	; 255
    372a:	09 95       	icall
    372c:	0f 90       	pop	r0
    372e:	df 91       	pop	r29
    3730:	cf 91       	pop	r28
    3732:	08 95       	ret

00003734 <_ZN7Serial_4peekEv>:
    3734:	cf 93       	push	r28
    3736:	df 93       	push	r29
    3738:	ec 01       	movw	r28, r24
    373a:	8c 85       	ldd	r24, Y+12	; 0x0c
    373c:	9d 85       	ldd	r25, Y+13	; 0x0d
    373e:	97 ff       	sbrs	r25, 7
    3740:	05 c0       	rjmp	.+10     	; 0x374c <_ZN7Serial_4peekEv+0x18>
    3742:	82 e0       	ldi	r24, 0x02	; 2
    3744:	0e 94 6a 21 	call	0x42d4	; 0x42d4 <_Z8USB_Recvh>
    3748:	9d 87       	std	Y+13, r25	; 0x0d
    374a:	8c 87       	std	Y+12, r24	; 0x0c
    374c:	8c 85       	ldd	r24, Y+12	; 0x0c
    374e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3750:	df 91       	pop	r29
    3752:	cf 91       	pop	r28
    3754:	08 95       	ret

00003756 <_ZN7Serial_17availableForWriteEv>:
    3756:	83 e0       	ldi	r24, 0x03	; 3
    3758:	0e 94 81 21 	call	0x4302	; 0x4302 <_Z13USB_SendSpaceh>
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	08 95       	ret

00003760 <_ZN7Serial_5flushEv>:
    3760:	83 e0       	ldi	r24, 0x03	; 3
    3762:	0c 94 ff 23 	jmp	0x47fe	; 0x47fe <_Z9USB_Flushh>

00003766 <_ZN7Serial_9availableEv>:
    3766:	fc 01       	movw	r30, r24
    3768:	84 85       	ldd	r24, Z+12	; 0x0c
    376a:	95 85       	ldd	r25, Z+13	; 0x0d
    376c:	97 fd       	sbrc	r25, 7
    376e:	06 c0       	rjmp	.+12     	; 0x377c <_ZN7Serial_9availableEv+0x16>
    3770:	82 e0       	ldi	r24, 0x02	; 2
    3772:	0e 94 15 21 	call	0x422a	; 0x422a <_Z13USB_Availableh>
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	01 96       	adiw	r24, 0x01	; 1
    377a:	08 95       	ret
    377c:	82 e0       	ldi	r24, 0x02	; 2
    377e:	0e 94 15 21 	call	0x422a	; 0x422a <_Z13USB_Availableh>
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	08 95       	ret

00003786 <_ZN7Serial_4readEv>:
    3786:	fc 01       	movw	r30, r24
    3788:	84 85       	ldd	r24, Z+12	; 0x0c
    378a:	95 85       	ldd	r25, Z+13	; 0x0d
    378c:	97 fd       	sbrc	r25, 7
    378e:	05 c0       	rjmp	.+10     	; 0x379a <_ZN7Serial_4readEv+0x14>
    3790:	2f ef       	ldi	r18, 0xFF	; 255
    3792:	3f ef       	ldi	r19, 0xFF	; 255
    3794:	35 87       	std	Z+13, r19	; 0x0d
    3796:	24 87       	std	Z+12, r18	; 0x0c
    3798:	08 95       	ret
    379a:	82 e0       	ldi	r24, 0x02	; 2
    379c:	0c 94 6a 21 	jmp	0x42d4	; 0x42d4 <_Z8USB_Recvh>

000037a0 <_ZN7Serial_5writeEPKhj>:
    37a0:	cf 93       	push	r28
    37a2:	df 93       	push	r29
    37a4:	ec 01       	movw	r28, r24
    37a6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <_ZL12_usbLineInfo+0x7>
    37aa:	88 23       	and	r24, r24
    37ac:	31 f0       	breq	.+12     	; 0x37ba <_ZN7Serial_5writeEPKhj+0x1a>
    37ae:	83 e0       	ldi	r24, 0x03	; 3
    37b0:	0e 94 9b 21 	call	0x4336	; 0x4336 <_Z8USB_SendhPKvi>
    37b4:	18 16       	cp	r1, r24
    37b6:	19 06       	cpc	r1, r25
    37b8:	34 f0       	brlt	.+12     	; 0x37c6 <_ZN7Serial_5writeEPKhj+0x26>
    37ba:	81 e0       	ldi	r24, 0x01	; 1
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	9b 83       	std	Y+3, r25	; 0x03
    37c0:	8a 83       	std	Y+2, r24	; 0x02
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	df 91       	pop	r29
    37c8:	cf 91       	pop	r28
    37ca:	08 95       	ret

000037cc <_Z16isLUFAbootloaderv>:
    37cc:	ee ef       	ldi	r30, 0xFE	; 254
    37ce:	ff e7       	ldi	r31, 0x7F	; 127
    37d0:	25 91       	lpm	r18, Z+
    37d2:	34 91       	lpm	r19, Z
    37d4:	81 e0       	ldi	r24, 0x01	; 1
    37d6:	2b 3f       	cpi	r18, 0xFB	; 251
    37d8:	3c 4d       	sbci	r19, 0xDC	; 220
    37da:	09 f0       	breq	.+2      	; 0x37de <_Z16isLUFAbootloaderv+0x12>
    37dc:	80 e0       	ldi	r24, 0x00	; 0
    37de:	08 95       	ret

000037e0 <_Z16CDC_GetInterfacePh>:
    37e0:	fc 01       	movw	r30, r24
    37e2:	90 81       	ld	r25, Z
    37e4:	9e 5f       	subi	r25, 0xFE	; 254
    37e6:	90 83       	st	Z, r25
    37e8:	42 e4       	ldi	r20, 0x42	; 66
    37ea:	50 e0       	ldi	r21, 0x00	; 0
    37ec:	68 ee       	ldi	r22, 0xE8	; 232
    37ee:	70 e0       	ldi	r23, 0x00	; 0
    37f0:	80 e8       	ldi	r24, 0x80	; 128
    37f2:	0c 94 4b 22 	jmp	0x4496	; 0x4496 <_Z15USB_SendControlhPKvi>

000037f6 <_Z9CDC_SetupR8USBSetup>:
    37f6:	fc 01       	movw	r30, r24
    37f8:	81 81       	ldd	r24, Z+1	; 0x01
    37fa:	90 81       	ld	r25, Z
    37fc:	91 3a       	cpi	r25, 0xA1	; 161
    37fe:	59 f4       	brne	.+22     	; 0x3816 <_Z9CDC_SetupR8USBSetup+0x20>
    3800:	81 32       	cpi	r24, 0x21	; 33
    3802:	09 f0       	breq	.+2      	; 0x3806 <_Z9CDC_SetupR8USBSetup+0x10>
    3804:	65 c0       	rjmp	.+202    	; 0x38d0 <_Z9CDC_SetupR8USBSetup+0xda>
    3806:	47 e0       	ldi	r20, 0x07	; 7
    3808:	50 e0       	ldi	r21, 0x00	; 0
    380a:	6c e1       	ldi	r22, 0x1C	; 28
    380c:	71 e0       	ldi	r23, 0x01	; 1
    380e:	80 e0       	ldi	r24, 0x00	; 0
    3810:	0e 94 4b 22 	call	0x4496	; 0x4496 <_Z15USB_SendControlhPKvi>
    3814:	5b c0       	rjmp	.+182    	; 0x38cc <_Z9CDC_SetupR8USBSetup+0xd6>
    3816:	91 32       	cpi	r25, 0x21	; 33
    3818:	09 f0       	breq	.+2      	; 0x381c <_Z9CDC_SetupR8USBSetup+0x26>
    381a:	5a c0       	rjmp	.+180    	; 0x38d0 <_Z9CDC_SetupR8USBSetup+0xda>
    381c:	83 32       	cpi	r24, 0x23	; 35
    381e:	69 f4       	brne	.+26     	; 0x383a <_Z9CDC_SetupR8USBSetup+0x44>
    3820:	82 81       	ldd	r24, Z+2	; 0x02
    3822:	93 81       	ldd	r25, Z+3	; 0x03
    3824:	a0 e0       	ldi	r26, 0x00	; 0
    3826:	b0 e0       	ldi	r27, 0x00	; 0
    3828:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_ZL10breakValue>
    382c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <_ZL10breakValue+0x1>
    3830:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <_ZL10breakValue+0x2>
    3834:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <_ZL10breakValue+0x3>
    3838:	49 c0       	rjmp	.+146    	; 0x38cc <_Z9CDC_SetupR8USBSetup+0xd6>
    383a:	80 32       	cpi	r24, 0x20	; 32
    383c:	39 f4       	brne	.+14     	; 0x384c <_Z9CDC_SetupR8USBSetup+0x56>
    383e:	67 e0       	ldi	r22, 0x07	; 7
    3840:	70 e0       	ldi	r23, 0x00	; 0
    3842:	8c e1       	ldi	r24, 0x1C	; 28
    3844:	91 e0       	ldi	r25, 0x01	; 1
    3846:	0e 94 72 22 	call	0x44e4	; 0x44e4 <_Z15USB_RecvControlPvi>
    384a:	40 c0       	rjmp	.+128    	; 0x38cc <_Z9CDC_SetupR8USBSetup+0xd6>
    384c:	82 32       	cpi	r24, 0x22	; 34
    384e:	09 f0       	breq	.+2      	; 0x3852 <_Z9CDC_SetupR8USBSetup+0x5c>
    3850:	3d c0       	rjmp	.+122    	; 0x38cc <_Z9CDC_SetupR8USBSetup+0xd6>
    3852:	82 81       	ldd	r24, Z+2	; 0x02
    3854:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <_ZL12_usbLineInfo+0x7>
    3858:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <_Z16isLUFAbootloaderv>
    385c:	88 23       	and	r24, r24
    385e:	19 f0       	breq	.+6      	; 0x3866 <_Z9CDC_SetupR8USBSetup+0x70>
    3860:	ee ef       	ldi	r30, 0xFE	; 254
    3862:	fa e0       	ldi	r31, 0x0A	; 10
    3864:	02 c0       	rjmp	.+4      	; 0x386a <_Z9CDC_SetupR8USBSetup+0x74>
    3866:	e0 e0       	ldi	r30, 0x00	; 0
    3868:	f8 e0       	ldi	r31, 0x08	; 8
    386a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <_ZL12_usbLineInfo>
    386e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <_ZL12_usbLineInfo+0x1>
    3872:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <_ZL12_usbLineInfo+0x2>
    3876:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <_ZL12_usbLineInfo+0x3>
    387a:	80 3b       	cpi	r24, 0xB0	; 176
    387c:	94 40       	sbci	r25, 0x04	; 4
    387e:	a1 05       	cpc	r26, r1
    3880:	b1 05       	cpc	r27, r1
    3882:	41 f5       	brne	.+80     	; 0x38d4 <_Z9CDC_SetupR8USBSetup+0xde>
    3884:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <_ZL12_usbLineInfo+0x7>
    3888:	80 fd       	sbrc	r24, 0
    388a:	24 c0       	rjmp	.+72     	; 0x38d4 <_Z9CDC_SetupR8USBSetup+0xde>
    388c:	ee 3f       	cpi	r30, 0xFE	; 254
    388e:	8a e0       	ldi	r24, 0x0A	; 10
    3890:	f8 07       	cpc	r31, r24
    3892:	51 f0       	breq	.+20     	; 0x38a8 <_Z9CDC_SetupR8USBSetup+0xb2>
    3894:	80 81       	ld	r24, Z
    3896:	91 81       	ldd	r25, Z+1	; 0x01
    3898:	87 37       	cpi	r24, 0x77	; 119
    389a:	27 e7       	ldi	r18, 0x77	; 119
    389c:	92 07       	cpc	r25, r18
    389e:	21 f0       	breq	.+8      	; 0x38a8 <_Z9CDC_SetupR8USBSetup+0xb2>
    38a0:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x429>
    38a4:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x428>
    38a8:	87 e7       	ldi	r24, 0x77	; 119
    38aa:	97 e7       	ldi	r25, 0x77	; 119
    38ac:	91 83       	std	Z+1, r25	; 0x01
    38ae:	80 83       	st	Z, r24
    38b0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    38b4:	80 93 15 06 	sts	0x0615, r24	; 0x800615 <_ZL11wdtcsr_save>
    38b8:	9b e0       	ldi	r25, 0x0B	; 11
    38ba:	88 e1       	ldi	r24, 0x18	; 24
    38bc:	0f b6       	in	r0, 0x3f	; 63
    38be:	f8 94       	cli
    38c0:	a8 95       	wdr
    38c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    38c6:	0f be       	out	0x3f, r0	; 63
    38c8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    38cc:	81 e0       	ldi	r24, 0x01	; 1
    38ce:	08 95       	ret
    38d0:	80 e0       	ldi	r24, 0x00	; 0
    38d2:	08 95       	ret
    38d4:	80 81       	ld	r24, Z
    38d6:	91 81       	ldd	r25, Z+1	; 0x01
    38d8:	87 37       	cpi	r24, 0x77	; 119
    38da:	97 47       	sbci	r25, 0x77	; 119
    38dc:	b9 f7       	brne	.-18     	; 0x38cc <_Z9CDC_SetupR8USBSetup+0xd6>
    38de:	a8 95       	wdr
    38e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    38e4:	88 61       	ori	r24, 0x18	; 24
    38e6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    38ea:	80 91 15 06 	lds	r24, 0x0615	; 0x800615 <_ZL11wdtcsr_save>
    38ee:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    38f2:	ee 3f       	cpi	r30, 0xFE	; 254
    38f4:	8a e0       	ldi	r24, 0x0A	; 10
    38f6:	f8 07       	cpc	r31, r24
    38f8:	39 f0       	breq	.+14     	; 0x3908 <_Z9CDC_SetupR8USBSetup+0x112>
    38fa:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x428>
    38fe:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x429>
    3902:	91 83       	std	Z+1, r25	; 0x01
    3904:	80 83       	st	Z, r24
    3906:	e2 cf       	rjmp	.-60     	; 0x38cc <_Z9CDC_SetupR8USBSetup+0xd6>
    3908:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x429>
    390c:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x428>
    3910:	dd cf       	rjmp	.-70     	; 0x38cc <_Z9CDC_SetupR8USBSetup+0xd6>

00003912 <_ZN7Serial_5beginEm>:
    3912:	2f ef       	ldi	r18, 0xFF	; 255
    3914:	3f ef       	ldi	r19, 0xFF	; 255
    3916:	fc 01       	movw	r30, r24
    3918:	35 87       	std	Z+13, r19	; 0x0d
    391a:	24 87       	std	Z+12, r18	; 0x0c
    391c:	08 95       	ret

0000391e <_GLOBAL__sub_I__cdcInterface>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    391e:	e5 ec       	ldi	r30, 0xC5	; 197
    3920:	f5 e0       	ldi	r31, 0x05	; 5
    3922:	13 82       	std	Z+3, r1	; 0x03
    3924:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    3926:	88 ee       	ldi	r24, 0xE8	; 232
    3928:	93 e0       	ldi	r25, 0x03	; 3
    392a:	a0 e0       	ldi	r26, 0x00	; 0
    392c:	b0 e0       	ldi	r27, 0x00	; 0
    392e:	84 83       	std	Z+4, r24	; 0x04
    3930:	95 83       	std	Z+5, r25	; 0x05
    3932:	a6 83       	std	Z+6, r26	; 0x06
    3934:	b7 83       	std	Z+7, r27	; 0x07
class Serial_ : public Stream
{
private:
	int peek_buffer;
public:
	Serial_() { peek_buffer = -1; };
    3936:	80 ef       	ldi	r24, 0xF0	; 240
    3938:	92 e0       	ldi	r25, 0x02	; 2
    393a:	91 83       	std	Z+1, r25	; 0x01
    393c:	80 83       	st	Z, r24
    393e:	8f ef       	ldi	r24, 0xFF	; 255
    3940:	9f ef       	ldi	r25, 0xFF	; 255
    3942:	95 87       	std	Z+13, r25	; 0x0d
    3944:	84 87       	std	Z+12, r24	; 0x0c
    3946:	08 95       	ret

00003948 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    3948:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    394a:	91 8d       	ldd	r25, Z+25	; 0x19
    394c:	22 8d       	ldd	r18, Z+26	; 0x1a
    394e:	89 2f       	mov	r24, r25
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	80 5c       	subi	r24, 0xC0	; 192
    3954:	9f 4f       	sbci	r25, 0xFF	; 255
    3956:	82 1b       	sub	r24, r18
    3958:	91 09       	sbc	r25, r1
}
    395a:	8f 73       	andi	r24, 0x3F	; 63
    395c:	99 27       	eor	r25, r25
    395e:	08 95       	ret

00003960 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3960:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3962:	91 8d       	ldd	r25, Z+25	; 0x19
    3964:	82 8d       	ldd	r24, Z+26	; 0x1a
    3966:	98 17       	cp	r25, r24
    3968:	31 f0       	breq	.+12     	; 0x3976 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    396a:	82 8d       	ldd	r24, Z+26	; 0x1a
    396c:	e8 0f       	add	r30, r24
    396e:	f1 1d       	adc	r31, r1
    3970:	85 8d       	ldd	r24, Z+29	; 0x1d
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3976:	8f ef       	ldi	r24, 0xFF	; 255
    3978:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    397a:	08 95       	ret

0000397c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    397c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    397e:	91 8d       	ldd	r25, Z+25	; 0x19
    3980:	82 8d       	ldd	r24, Z+26	; 0x1a
    3982:	98 17       	cp	r25, r24
    3984:	61 f0       	breq	.+24     	; 0x399e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3986:	82 8d       	ldd	r24, Z+26	; 0x1a
    3988:	df 01       	movw	r26, r30
    398a:	a8 0f       	add	r26, r24
    398c:	b1 1d       	adc	r27, r1
    398e:	5d 96       	adiw	r26, 0x1d	; 29
    3990:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3992:	92 8d       	ldd	r25, Z+26	; 0x1a
    3994:	9f 5f       	subi	r25, 0xFF	; 255
    3996:	9f 73       	andi	r25, 0x3F	; 63
    3998:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    399e:	8f ef       	ldi	r24, 0xFF	; 255
    39a0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    39a2:	08 95       	ret

000039a4 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    39a4:	fc 01       	movw	r30, r24
    39a6:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    39a8:	44 8d       	ldd	r20, Z+28	; 0x1c
    39aa:	25 2f       	mov	r18, r21
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	84 2f       	mov	r24, r20
    39b0:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    39b2:	82 1b       	sub	r24, r18
    39b4:	93 0b       	sbc	r25, r19
    39b6:	54 17       	cp	r21, r20
    39b8:	10 f0       	brcs	.+4      	; 0x39be <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    39ba:	cf 96       	adiw	r24, 0x3f	; 63
    39bc:	08 95       	ret
  return tail - head - 1;
    39be:	01 97       	sbiw	r24, 0x01	; 1
}
    39c0:	08 95       	ret

000039c2 <_Z14serialEventRunv>:
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    39c2:	8b e3       	ldi	r24, 0x3B	; 59
    39c4:	9e e1       	ldi	r25, 0x1E	; 30
    39c6:	89 2b       	or	r24, r25
    39c8:	49 f0       	breq	.+18     	; 0x39dc <_Z14serialEventRunv+0x1a>
    39ca:	80 e0       	ldi	r24, 0x00	; 0
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	89 2b       	or	r24, r25
    39d0:	29 f0       	breq	.+10     	; 0x39dc <_Z14serialEventRunv+0x1a>
    39d2:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <_Z17Serial1_availablev>
    39d6:	81 11       	cpse	r24, r1
    39d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    39dc:	08 95       	ret

000039de <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    39de:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    39e0:	84 8d       	ldd	r24, Z+28	; 0x1c
    39e2:	df 01       	movw	r26, r30
    39e4:	a8 0f       	add	r26, r24
    39e6:	b1 1d       	adc	r27, r1
    39e8:	a3 5a       	subi	r26, 0xA3	; 163
    39ea:	bf 4f       	sbci	r27, 0xFF	; 255
    39ec:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    39ee:	84 8d       	ldd	r24, Z+28	; 0x1c
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	01 96       	adiw	r24, 0x01	; 1
    39f4:	8f 73       	andi	r24, 0x3F	; 63
    39f6:	99 27       	eor	r25, r25
    39f8:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    39fa:	a6 89       	ldd	r26, Z+22	; 0x16
    39fc:	b7 89       	ldd	r27, Z+23	; 0x17
    39fe:	2c 93       	st	X, r18
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
    3a00:	a0 89       	ldd	r26, Z+16	; 0x10
    3a02:	b1 89       	ldd	r27, Z+17	; 0x11
    3a04:	8c 91       	ld	r24, X
    3a06:	82 74       	andi	r24, 0x42	; 66
    3a08:	8c 93       	st	X, r24
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    3a0a:	93 8d       	ldd	r25, Z+27	; 0x1b
    3a0c:	84 8d       	ldd	r24, Z+28	; 0x1c
    3a0e:	98 13       	cpse	r25, r24
    3a10:	06 c0       	rjmp	.+12     	; 0x3a1e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3a12:	02 88       	ldd	r0, Z+18	; 0x12
    3a14:	f3 89       	ldd	r31, Z+19	; 0x13
    3a16:	e0 2d       	mov	r30, r0
    3a18:	80 81       	ld	r24, Z
    3a1a:	8f 7d       	andi	r24, 0xDF	; 223
    3a1c:	80 83       	st	Z, r24
    3a1e:	08 95       	ret

00003a20 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    3a20:	ef 92       	push	r14
    3a22:	ff 92       	push	r15
    3a24:	0f 93       	push	r16
    3a26:	1f 93       	push	r17
    3a28:	cf 93       	push	r28
    3a2a:	df 93       	push	r29
    3a2c:	ec 01       	movw	r28, r24
  _written = true;
    3a2e:	81 e0       	ldi	r24, 0x01	; 1
    3a30:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3a32:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3a34:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3a36:	98 13       	cpse	r25, r24
    3a38:	05 c0       	rjmp	.+10     	; 0x3a44 <_ZN14HardwareSerial5writeEh+0x24>
    3a3a:	e8 89       	ldd	r30, Y+16	; 0x10
    3a3c:	f9 89       	ldd	r31, Y+17	; 0x11
    3a3e:	80 81       	ld	r24, Z
    3a40:	85 fd       	sbrc	r24, 5
    3a42:	26 c0       	rjmp	.+76     	; 0x3a90 <_ZN14HardwareSerial5writeEh+0x70>
    3a44:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3a46:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3a48:	10 e0       	ldi	r17, 0x00	; 0
    3a4a:	0f 5f       	subi	r16, 0xFF	; 255
    3a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a4e:	0f 73       	andi	r16, 0x3F	; 63
    3a50:	11 27       	eor	r17, r17
    3a52:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3a54:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3a56:	e8 12       	cpse	r14, r24
    3a58:	0c c0       	rjmp	.+24     	; 0x3a72 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    3a5a:	0f b6       	in	r0, 0x3f	; 63
    3a5c:	07 fc       	sbrc	r0, 7
    3a5e:	fa cf       	rjmp	.-12     	; 0x3a54 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3a60:	e8 89       	ldd	r30, Y+16	; 0x10
    3a62:	f9 89       	ldd	r31, Y+17	; 0x11
    3a64:	80 81       	ld	r24, Z
    3a66:	85 ff       	sbrs	r24, 5
    3a68:	f5 cf       	rjmp	.-22     	; 0x3a54 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    3a6a:	ce 01       	movw	r24, r28
    3a6c:	0e 94 ef 1c 	call	0x39de	; 0x39de <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3a70:	f1 cf       	rjmp	.-30     	; 0x3a54 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3a72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a74:	fe 01       	movw	r30, r28
    3a76:	e8 0f       	add	r30, r24
    3a78:	f1 1d       	adc	r31, r1
    3a7a:	e3 5a       	subi	r30, 0xA3	; 163
    3a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7e:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3a80:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3a82:	f8 94       	cli
    _tx_buffer_head = i;
    3a84:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    3a86:	ea 89       	ldd	r30, Y+18	; 0x12
    3a88:	fb 89       	ldd	r31, Y+19	; 0x13
    3a8a:	80 81       	ld	r24, Z
    3a8c:	80 62       	ori	r24, 0x20	; 32
    3a8e:	09 c0       	rjmp	.+18     	; 0x3aa2 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3a90:	9f b7       	in	r25, 0x3f	; 63
    3a92:	f8 94       	cli
      *_udr = c;
    3a94:	ee 89       	ldd	r30, Y+22	; 0x16
    3a96:	ff 89       	ldd	r31, Y+23	; 0x17
    3a98:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
#else
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
    3a9a:	e8 89       	ldd	r30, Y+16	; 0x10
    3a9c:	f9 89       	ldd	r31, Y+17	; 0x11
    3a9e:	80 81       	ld	r24, Z
    3aa0:	82 74       	andi	r24, 0x42	; 66
    3aa2:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3aa4:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    3aa6:	81 e0       	ldi	r24, 0x01	; 1
    3aa8:	90 e0       	ldi	r25, 0x00	; 0
    3aaa:	df 91       	pop	r29
    3aac:	cf 91       	pop	r28
    3aae:	1f 91       	pop	r17
    3ab0:	0f 91       	pop	r16
    3ab2:	ff 90       	pop	r15
    3ab4:	ef 90       	pop	r14
    3ab6:	08 95       	ret

00003ab8 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3ab8:	cf 93       	push	r28
    3aba:	df 93       	push	r29
    3abc:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3abe:	88 8d       	ldd	r24, Y+24	; 0x18
    3ac0:	88 23       	and	r24, r24
    3ac2:	c9 f0       	breq	.+50     	; 0x3af6 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3ac4:	ea 89       	ldd	r30, Y+18	; 0x12
    3ac6:	fb 89       	ldd	r31, Y+19	; 0x13
    3ac8:	80 81       	ld	r24, Z
    3aca:	85 fd       	sbrc	r24, 5
    3acc:	05 c0       	rjmp	.+10     	; 0x3ad8 <_ZN14HardwareSerial5flushEv+0x20>
    3ace:	a8 89       	ldd	r26, Y+16	; 0x10
    3ad0:	b9 89       	ldd	r27, Y+17	; 0x11
    3ad2:	8c 91       	ld	r24, X
    3ad4:	86 fd       	sbrc	r24, 6
    3ad6:	0f c0       	rjmp	.+30     	; 0x3af6 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3ad8:	0f b6       	in	r0, 0x3f	; 63
    3ada:	07 fc       	sbrc	r0, 7
    3adc:	f5 cf       	rjmp	.-22     	; 0x3ac8 <_ZN14HardwareSerial5flushEv+0x10>
    3ade:	80 81       	ld	r24, Z
    3ae0:	85 ff       	sbrs	r24, 5
    3ae2:	f2 cf       	rjmp	.-28     	; 0x3ac8 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    3ae4:	a8 89       	ldd	r26, Y+16	; 0x10
    3ae6:	b9 89       	ldd	r27, Y+17	; 0x11
    3ae8:	8c 91       	ld	r24, X
    3aea:	85 ff       	sbrs	r24, 5
    3aec:	ed cf       	rjmp	.-38     	; 0x3ac8 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3aee:	ce 01       	movw	r24, r28
    3af0:	0e 94 ef 1c 	call	0x39de	; 0x39de <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3af4:	e7 cf       	rjmp	.-50     	; 0x3ac4 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3af6:	df 91       	pop	r29
    3af8:	cf 91       	pop	r28
    3afa:	08 95       	ret

00003afc <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3afc:	cf 92       	push	r12
    3afe:	df 92       	push	r13
    3b00:	ef 92       	push	r14
    3b02:	ff 92       	push	r15
    3b04:	1f 93       	push	r17
    3b06:	cf 93       	push	r28
    3b08:	df 93       	push	r29
    3b0a:	ec 01       	movw	r28, r24
    3b0c:	6a 01       	movw	r12, r20
    3b0e:	7b 01       	movw	r14, r22
    3b10:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3b12:	e8 89       	ldd	r30, Y+16	; 0x10
    3b14:	f9 89       	ldd	r31, Y+17	; 0x11
    3b16:	82 e0       	ldi	r24, 0x02	; 2
    3b18:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3b1a:	41 15       	cp	r20, r1
    3b1c:	51 4e       	sbci	r21, 0xE1	; 225
    3b1e:	61 05       	cpc	r22, r1
    3b20:	71 05       	cpc	r23, r1
    3b22:	b1 f0       	breq	.+44     	; 0x3b50 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3b24:	60 e0       	ldi	r22, 0x00	; 0
    3b26:	79 e0       	ldi	r23, 0x09	; 9
    3b28:	8d e3       	ldi	r24, 0x3D	; 61
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	a7 01       	movw	r20, r14
    3b2e:	96 01       	movw	r18, r12
    3b30:	0e 94 99 29 	call	0x5332	; 0x5332 <__udivmodsi4>
    3b34:	da 01       	movw	r26, r20
    3b36:	c9 01       	movw	r24, r18
    3b38:	01 97       	sbiw	r24, 0x01	; 1
    3b3a:	a1 09       	sbc	r26, r1
    3b3c:	b1 09       	sbc	r27, r1
    3b3e:	b6 95       	lsr	r27
    3b40:	a7 95       	ror	r26
    3b42:	97 95       	ror	r25
    3b44:	87 95       	ror	r24
    3b46:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3b48:	21 15       	cp	r18, r1
    3b4a:	80 e1       	ldi	r24, 0x10	; 16
    3b4c:	38 07       	cpc	r19, r24
    3b4e:	a8 f0       	brcs	.+42     	; 0x3b7a <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    3b50:	e8 89       	ldd	r30, Y+16	; 0x10
    3b52:	f9 89       	ldd	r31, Y+17	; 0x11
    3b54:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3b56:	60 e8       	ldi	r22, 0x80	; 128
    3b58:	74 e8       	ldi	r23, 0x84	; 132
    3b5a:	8e e1       	ldi	r24, 0x1E	; 30
    3b5c:	90 e0       	ldi	r25, 0x00	; 0
    3b5e:	a7 01       	movw	r20, r14
    3b60:	96 01       	movw	r18, r12
    3b62:	0e 94 99 29 	call	0x5332	; 0x5332 <__udivmodsi4>
    3b66:	da 01       	movw	r26, r20
    3b68:	c9 01       	movw	r24, r18
    3b6a:	01 97       	sbiw	r24, 0x01	; 1
    3b6c:	a1 09       	sbc	r26, r1
    3b6e:	b1 09       	sbc	r27, r1
    3b70:	b6 95       	lsr	r27
    3b72:	a7 95       	ror	r26
    3b74:	97 95       	ror	r25
    3b76:	87 95       	ror	r24
    3b78:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3b7a:	ec 85       	ldd	r30, Y+12	; 0x0c
    3b7c:	fd 85       	ldd	r31, Y+13	; 0x0d
    3b7e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    3b80:	ee 85       	ldd	r30, Y+14	; 0x0e
    3b82:	ff 85       	ldd	r31, Y+15	; 0x0f
    3b84:	20 83       	st	Z, r18

  _written = false;
    3b86:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3b88:	ec 89       	ldd	r30, Y+20	; 0x14
    3b8a:	fd 89       	ldd	r31, Y+21	; 0x15
    3b8c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    3b8e:	ea 89       	ldd	r30, Y+18	; 0x12
    3b90:	fb 89       	ldd	r31, Y+19	; 0x13
    3b92:	80 81       	ld	r24, Z
    3b94:	80 61       	ori	r24, 0x10	; 16
    3b96:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    3b98:	ea 89       	ldd	r30, Y+18	; 0x12
    3b9a:	fb 89       	ldd	r31, Y+19	; 0x13
    3b9c:	80 81       	ld	r24, Z
    3b9e:	88 60       	ori	r24, 0x08	; 8
    3ba0:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    3ba2:	ea 89       	ldd	r30, Y+18	; 0x12
    3ba4:	fb 89       	ldd	r31, Y+19	; 0x13
    3ba6:	80 81       	ld	r24, Z
    3ba8:	80 68       	ori	r24, 0x80	; 128
    3baa:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    3bac:	ea 89       	ldd	r30, Y+18	; 0x12
    3bae:	fb 89       	ldd	r31, Y+19	; 0x13
    3bb0:	80 81       	ld	r24, Z
    3bb2:	8f 7d       	andi	r24, 0xDF	; 223
    3bb4:	80 83       	st	Z, r24
}
    3bb6:	df 91       	pop	r29
    3bb8:	cf 91       	pop	r28
    3bba:	1f 91       	pop	r17
    3bbc:	ff 90       	pop	r15
    3bbe:	ef 90       	pop	r14
    3bc0:	df 90       	pop	r13
    3bc2:	cf 90       	pop	r12
    3bc4:	08 95       	ret

00003bc6 <__vector_25>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    3bc6:	1f 92       	push	r1
    3bc8:	0f 92       	push	r0
    3bca:	0f b6       	in	r0, 0x3f	; 63
    3bcc:	0f 92       	push	r0
    3bce:	11 24       	eor	r1, r1
    3bd0:	2f 93       	push	r18
    3bd2:	8f 93       	push	r24
    3bd4:	9f 93       	push	r25
    3bd6:	ef 93       	push	r30
    3bd8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3bda:	e0 91 26 06 	lds	r30, 0x0626	; 0x800626 <Serial1+0x10>
    3bde:	f0 91 27 06 	lds	r31, 0x0627	; 0x800627 <Serial1+0x11>
    3be2:	80 81       	ld	r24, Z
    3be4:	e0 91 2c 06 	lds	r30, 0x062C	; 0x80062c <Serial1+0x16>
    3be8:	f0 91 2d 06 	lds	r31, 0x062D	; 0x80062d <Serial1+0x17>
    3bec:	82 fd       	sbrc	r24, 2
    3bee:	12 c0       	rjmp	.+36     	; 0x3c14 <__vector_25+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3bf0:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3bf2:	80 91 2f 06 	lds	r24, 0x062F	; 0x80062f <Serial1+0x19>
    3bf6:	8f 5f       	subi	r24, 0xFF	; 255
    3bf8:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3bfa:	20 91 30 06 	lds	r18, 0x0630	; 0x800630 <Serial1+0x1a>
    3bfe:	82 17       	cp	r24, r18
    3c00:	51 f0       	breq	.+20     	; 0x3c16 <__vector_25+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    3c02:	e0 91 2f 06 	lds	r30, 0x062F	; 0x80062f <Serial1+0x19>
    3c06:	f0 e0       	ldi	r31, 0x00	; 0
    3c08:	ea 5e       	subi	r30, 0xEA	; 234
    3c0a:	f9 4f       	sbci	r31, 0xF9	; 249
    3c0c:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3c0e:	80 93 2f 06 	sts	0x062F, r24	; 0x80062f <Serial1+0x19>
    3c12:	01 c0       	rjmp	.+2      	; 0x3c16 <__vector_25+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3c14:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    3c16:	ff 91       	pop	r31
    3c18:	ef 91       	pop	r30
    3c1a:	9f 91       	pop	r25
    3c1c:	8f 91       	pop	r24
    3c1e:	2f 91       	pop	r18
    3c20:	0f 90       	pop	r0
    3c22:	0f be       	out	0x3f, r0	; 63
    3c24:	0f 90       	pop	r0
    3c26:	1f 90       	pop	r1
    3c28:	18 95       	reti

00003c2a <__vector_26>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    3c2a:	1f 92       	push	r1
    3c2c:	0f 92       	push	r0
    3c2e:	0f b6       	in	r0, 0x3f	; 63
    3c30:	0f 92       	push	r0
    3c32:	11 24       	eor	r1, r1
    3c34:	2f 93       	push	r18
    3c36:	3f 93       	push	r19
    3c38:	4f 93       	push	r20
    3c3a:	5f 93       	push	r21
    3c3c:	6f 93       	push	r22
    3c3e:	7f 93       	push	r23
    3c40:	8f 93       	push	r24
    3c42:	9f 93       	push	r25
    3c44:	af 93       	push	r26
    3c46:	bf 93       	push	r27
    3c48:	ef 93       	push	r30
    3c4a:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    3c4c:	86 e1       	ldi	r24, 0x16	; 22
    3c4e:	96 e0       	ldi	r25, 0x06	; 6
    3c50:	0e 94 ef 1c 	call	0x39de	; 0x39de <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    3c54:	ff 91       	pop	r31
    3c56:	ef 91       	pop	r30
    3c58:	bf 91       	pop	r27
    3c5a:	af 91       	pop	r26
    3c5c:	9f 91       	pop	r25
    3c5e:	8f 91       	pop	r24
    3c60:	7f 91       	pop	r23
    3c62:	6f 91       	pop	r22
    3c64:	5f 91       	pop	r21
    3c66:	4f 91       	pop	r20
    3c68:	3f 91       	pop	r19
    3c6a:	2f 91       	pop	r18
    3c6c:	0f 90       	pop	r0
    3c6e:	0f be       	out	0x3f, r0	; 63
    3c70:	0f 90       	pop	r0
    3c72:	1f 90       	pop	r1
    3c74:	18 95       	reti

00003c76 <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    3c76:	86 e1       	ldi	r24, 0x16	; 22
    3c78:	96 e0       	ldi	r25, 0x06	; 6
    3c7a:	0e 94 a4 1c 	call	0x3948	; 0x3948 <_ZN14HardwareSerial9availableEv>
    3c7e:	21 e0       	ldi	r18, 0x01	; 1
    3c80:	89 2b       	or	r24, r25
    3c82:	09 f4       	brne	.+2      	; 0x3c86 <_Z17Serial1_availablev+0x10>
    3c84:	20 e0       	ldi	r18, 0x00	; 0
}
    3c86:	82 2f       	mov	r24, r18
    3c88:	08 95       	ret

00003c8a <_GLOBAL__sub_I___vector_25>:
    3c8a:	e6 e1       	ldi	r30, 0x16	; 22
    3c8c:	f6 e0       	ldi	r31, 0x06	; 6
    3c8e:	13 82       	std	Z+3, r1	; 0x03
    3c90:	12 82       	std	Z+2, r1	; 0x02
    3c92:	88 ee       	ldi	r24, 0xE8	; 232
    3c94:	93 e0       	ldi	r25, 0x03	; 3
    3c96:	a0 e0       	ldi	r26, 0x00	; 0
    3c98:	b0 e0       	ldi	r27, 0x00	; 0
    3c9a:	84 83       	std	Z+4, r24	; 0x04
    3c9c:	95 83       	std	Z+5, r25	; 0x05
    3c9e:	a6 83       	std	Z+6, r26	; 0x06
    3ca0:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3ca2:	82 e0       	ldi	r24, 0x02	; 2
    3ca4:	93 e0       	ldi	r25, 0x03	; 3
    3ca6:	91 83       	std	Z+1, r25	; 0x01
    3ca8:	80 83       	st	Z, r24
    3caa:	8d ec       	ldi	r24, 0xCD	; 205
    3cac:	90 e0       	ldi	r25, 0x00	; 0
    3cae:	95 87       	std	Z+13, r25	; 0x0d
    3cb0:	84 87       	std	Z+12, r24	; 0x0c
    3cb2:	8c ec       	ldi	r24, 0xCC	; 204
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	97 87       	std	Z+15, r25	; 0x0f
    3cb8:	86 87       	std	Z+14, r24	; 0x0e
    3cba:	88 ec       	ldi	r24, 0xC8	; 200
    3cbc:	90 e0       	ldi	r25, 0x00	; 0
    3cbe:	91 8b       	std	Z+17, r25	; 0x11
    3cc0:	80 8b       	std	Z+16, r24	; 0x10
    3cc2:	89 ec       	ldi	r24, 0xC9	; 201
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	93 8b       	std	Z+19, r25	; 0x13
    3cc8:	82 8b       	std	Z+18, r24	; 0x12
    3cca:	8a ec       	ldi	r24, 0xCA	; 202
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	95 8b       	std	Z+21, r25	; 0x15
    3cd0:	84 8b       	std	Z+20, r24	; 0x14
    3cd2:	8e ec       	ldi	r24, 0xCE	; 206
    3cd4:	90 e0       	ldi	r25, 0x00	; 0
    3cd6:	97 8b       	std	Z+23, r25	; 0x17
    3cd8:	86 8b       	std	Z+22, r24	; 0x16
    3cda:	11 8e       	std	Z+25, r1	; 0x19
    3cdc:	12 8e       	std	Z+26, r1	; 0x1a
    3cde:	13 8e       	std	Z+27, r1	; 0x1b
    3ce0:	14 8e       	std	Z+28, r1	; 0x1c
    3ce2:	08 95       	ret

00003ce4 <initVariant>:
    3ce4:	08 95       	ret

00003ce6 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    3ce6:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <init>

	initVariant();
    3cea:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
    3cee:	83 eb       	ldi	r24, 0xB3	; 179
    3cf0:	96 e0       	ldi	r25, 0x06	; 6
    3cf2:	0e 94 8a 24 	call	0x4914	; 0x4914 <_ZN10USBDevice_6attachEv>
#endif
	
	setup();
    3cf6:	0e 94 4d 06 	call	0xc9a	; 0xc9a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3cfa:	c1 ee       	ldi	r28, 0xE1	; 225
    3cfc:	dc e1       	ldi	r29, 0x1C	; 28
#endif
	
	setup();
    
	for (;;) {
		loop();
    3cfe:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <loop>
		if (serialEventRun) serialEventRun();
    3d02:	20 97       	sbiw	r28, 0x00	; 0
    3d04:	e1 f3       	breq	.-8      	; 0x3cfe <main+0x18>
    3d06:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <_Z14serialEventRunv>
    3d0a:	f9 cf       	rjmp	.-14     	; 0x3cfe <main+0x18>

00003d0c <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    3d0c:	cf 92       	push	r12
    3d0e:	df 92       	push	r13
    3d10:	ef 92       	push	r14
    3d12:	ff 92       	push	r15
    3d14:	0f 93       	push	r16
    3d16:	1f 93       	push	r17
    3d18:	cf 93       	push	r28
    3d1a:	df 93       	push	r29
    3d1c:	6c 01       	movw	r12, r24
    3d1e:	7a 01       	movw	r14, r20
    3d20:	8b 01       	movw	r16, r22
    3d22:	c0 e0       	ldi	r28, 0x00	; 0
    3d24:	d0 e0       	ldi	r29, 0x00	; 0
    3d26:	ce 15       	cp	r28, r14
    3d28:	df 05       	cpc	r29, r15
    3d2a:	81 f0       	breq	.+32     	; 0x3d4c <_ZN5Print5writeEPKhj+0x40>
    3d2c:	d8 01       	movw	r26, r16
    3d2e:	6d 91       	ld	r22, X+
    3d30:	8d 01       	movw	r16, r26
    3d32:	d6 01       	movw	r26, r12
    3d34:	ed 91       	ld	r30, X+
    3d36:	fc 91       	ld	r31, X
    3d38:	01 90       	ld	r0, Z+
    3d3a:	f0 81       	ld	r31, Z
    3d3c:	e0 2d       	mov	r30, r0
    3d3e:	c6 01       	movw	r24, r12
    3d40:	09 95       	icall
    3d42:	89 2b       	or	r24, r25
    3d44:	11 f0       	breq	.+4      	; 0x3d4a <_ZN5Print5writeEPKhj+0x3e>
    3d46:	21 96       	adiw	r28, 0x01	; 1
    3d48:	ee cf       	rjmp	.-36     	; 0x3d26 <_ZN5Print5writeEPKhj+0x1a>
    3d4a:	7e 01       	movw	r14, r28
    3d4c:	c7 01       	movw	r24, r14
    3d4e:	df 91       	pop	r29
    3d50:	cf 91       	pop	r28
    3d52:	1f 91       	pop	r17
    3d54:	0f 91       	pop	r16
    3d56:	ff 90       	pop	r15
    3d58:	ef 90       	pop	r14
    3d5a:	df 90       	pop	r13
    3d5c:	cf 90       	pop	r12
    3d5e:	08 95       	ret

00003d60 <_ZN5Print5writeEPKc>:
    3d60:	61 15       	cp	r22, r1
    3d62:	71 05       	cpc	r23, r1
    3d64:	79 f0       	breq	.+30     	; 0x3d84 <_ZN5Print5writeEPKc+0x24>
    3d66:	fb 01       	movw	r30, r22
    3d68:	01 90       	ld	r0, Z+
    3d6a:	00 20       	and	r0, r0
    3d6c:	e9 f7       	brne	.-6      	; 0x3d68 <_ZN5Print5writeEPKc+0x8>
    3d6e:	31 97       	sbiw	r30, 0x01	; 1
    3d70:	af 01       	movw	r20, r30
    3d72:	46 1b       	sub	r20, r22
    3d74:	57 0b       	sbc	r21, r23
    3d76:	dc 01       	movw	r26, r24
    3d78:	ed 91       	ld	r30, X+
    3d7a:	fc 91       	ld	r31, X
    3d7c:	02 80       	ldd	r0, Z+2	; 0x02
    3d7e:	f3 81       	ldd	r31, Z+3	; 0x03
    3d80:	e0 2d       	mov	r30, r0
    3d82:	09 94       	ijmp
    3d84:	80 e0       	ldi	r24, 0x00	; 0
    3d86:	90 e0       	ldi	r25, 0x00	; 0
    3d88:	08 95       	ret

00003d8a <_ZN5Print5printERK6String>:
    3d8a:	db 01       	movw	r26, r22
    3d8c:	14 96       	adiw	r26, 0x04	; 4
    3d8e:	4d 91       	ld	r20, X+
    3d90:	5c 91       	ld	r21, X
    3d92:	15 97       	sbiw	r26, 0x05	; 5
    3d94:	6d 91       	ld	r22, X+
    3d96:	7c 91       	ld	r23, X
    3d98:	dc 01       	movw	r26, r24
    3d9a:	ed 91       	ld	r30, X+
    3d9c:	fc 91       	ld	r31, X
    3d9e:	02 80       	ldd	r0, Z+2	; 0x02
    3da0:	f3 81       	ldd	r31, Z+3	; 0x03
    3da2:	e0 2d       	mov	r30, r0
    3da4:	09 94       	ijmp

00003da6 <_ZN5Print5printEPKc>:
    3da6:	0c 94 b0 1e 	jmp	0x3d60	; 0x3d60 <_ZN5Print5writeEPKc>

00003daa <_ZN5Print5printEc>:
    3daa:	dc 01       	movw	r26, r24
    3dac:	ed 91       	ld	r30, X+
    3dae:	fc 91       	ld	r31, X
    3db0:	01 90       	ld	r0, Z+
    3db2:	f0 81       	ld	r31, Z
    3db4:	e0 2d       	mov	r30, r0
    3db6:	09 94       	ijmp

00003db8 <_ZN5Print11printNumberEmh>:
    3db8:	8f 92       	push	r8
    3dba:	9f 92       	push	r9
    3dbc:	af 92       	push	r10
    3dbe:	bf 92       	push	r11
    3dc0:	ef 92       	push	r14
    3dc2:	ff 92       	push	r15
    3dc4:	0f 93       	push	r16
    3dc6:	1f 93       	push	r17
    3dc8:	cf 93       	push	r28
    3dca:	df 93       	push	r29
    3dcc:	cd b7       	in	r28, 0x3d	; 61
    3dce:	de b7       	in	r29, 0x3e	; 62
    3dd0:	a1 97       	sbiw	r28, 0x21	; 33
    3dd2:	0f b6       	in	r0, 0x3f	; 63
    3dd4:	f8 94       	cli
    3dd6:	de bf       	out	0x3e, r29	; 62
    3dd8:	0f be       	out	0x3f, r0	; 63
    3dda:	cd bf       	out	0x3d, r28	; 61
    3ddc:	7c 01       	movw	r14, r24
    3dde:	fa 01       	movw	r30, r20
    3de0:	cb 01       	movw	r24, r22
    3de2:	19 a2       	std	Y+33, r1	; 0x21
    3de4:	22 30       	cpi	r18, 0x02	; 2
    3de6:	08 f4       	brcc	.+2      	; 0x3dea <_ZN5Print11printNumberEmh+0x32>
    3de8:	2a e0       	ldi	r18, 0x0A	; 10
    3dea:	8e 01       	movw	r16, r28
    3dec:	0f 5d       	subi	r16, 0xDF	; 223
    3dee:	1f 4f       	sbci	r17, 0xFF	; 255
    3df0:	82 2e       	mov	r8, r18
    3df2:	91 2c       	mov	r9, r1
    3df4:	a1 2c       	mov	r10, r1
    3df6:	b1 2c       	mov	r11, r1
    3df8:	bf 01       	movw	r22, r30
    3dfa:	a5 01       	movw	r20, r10
    3dfc:	94 01       	movw	r18, r8
    3dfe:	0e 94 99 29 	call	0x5332	; 0x5332 <__udivmodsi4>
    3e02:	f9 01       	movw	r30, r18
    3e04:	ca 01       	movw	r24, r20
    3e06:	01 50       	subi	r16, 0x01	; 1
    3e08:	11 09       	sbc	r17, r1
    3e0a:	6a 30       	cpi	r22, 0x0A	; 10
    3e0c:	10 f4       	brcc	.+4      	; 0x3e12 <_ZN5Print11printNumberEmh+0x5a>
    3e0e:	60 5d       	subi	r22, 0xD0	; 208
    3e10:	01 c0       	rjmp	.+2      	; 0x3e14 <_ZN5Print11printNumberEmh+0x5c>
    3e12:	69 5c       	subi	r22, 0xC9	; 201
    3e14:	d8 01       	movw	r26, r16
    3e16:	6c 93       	st	X, r22
    3e18:	23 2b       	or	r18, r19
    3e1a:	24 2b       	or	r18, r20
    3e1c:	25 2b       	or	r18, r21
    3e1e:	61 f7       	brne	.-40     	; 0x3df8 <_ZN5Print11printNumberEmh+0x40>
    3e20:	b8 01       	movw	r22, r16
    3e22:	c7 01       	movw	r24, r14
    3e24:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <_ZN5Print5writeEPKc>
    3e28:	a1 96       	adiw	r28, 0x21	; 33
    3e2a:	0f b6       	in	r0, 0x3f	; 63
    3e2c:	f8 94       	cli
    3e2e:	de bf       	out	0x3e, r29	; 62
    3e30:	0f be       	out	0x3f, r0	; 63
    3e32:	cd bf       	out	0x3d, r28	; 61
    3e34:	df 91       	pop	r29
    3e36:	cf 91       	pop	r28
    3e38:	1f 91       	pop	r17
    3e3a:	0f 91       	pop	r16
    3e3c:	ff 90       	pop	r15
    3e3e:	ef 90       	pop	r14
    3e40:	bf 90       	pop	r11
    3e42:	af 90       	pop	r10
    3e44:	9f 90       	pop	r9
    3e46:	8f 90       	pop	r8
    3e48:	08 95       	ret

00003e4a <_ZN5Print5printEmi>:
    3e4a:	21 15       	cp	r18, r1
    3e4c:	31 05       	cpc	r19, r1
    3e4e:	41 f4       	brne	.+16     	; 0x3e60 <_ZN5Print5printEmi+0x16>
    3e50:	dc 01       	movw	r26, r24
    3e52:	ed 91       	ld	r30, X+
    3e54:	fc 91       	ld	r31, X
    3e56:	01 90       	ld	r0, Z+
    3e58:	f0 81       	ld	r31, Z
    3e5a:	e0 2d       	mov	r30, r0
    3e5c:	64 2f       	mov	r22, r20
    3e5e:	09 94       	ijmp
    3e60:	0c 94 dc 1e 	jmp	0x3db8	; 0x3db8 <_ZN5Print11printNumberEmh>

00003e64 <_ZN5Print5printEji>:
    3e64:	9a 01       	movw	r18, r20
    3e66:	ab 01       	movw	r20, r22
    3e68:	60 e0       	ldi	r22, 0x00	; 0
    3e6a:	70 e0       	ldi	r23, 0x00	; 0
    3e6c:	0c 94 25 1f 	jmp	0x3e4a	; 0x3e4a <_ZN5Print5printEmi>

00003e70 <_ZN5Print5printEli>:
    3e70:	cf 92       	push	r12
    3e72:	df 92       	push	r13
    3e74:	ef 92       	push	r14
    3e76:	ff 92       	push	r15
    3e78:	0f 93       	push	r16
    3e7a:	1f 93       	push	r17
    3e7c:	cf 93       	push	r28
    3e7e:	df 93       	push	r29
    3e80:	21 15       	cp	r18, r1
    3e82:	31 05       	cpc	r19, r1
    3e84:	81 f4       	brne	.+32     	; 0x3ea6 <_ZN5Print5printEli+0x36>
    3e86:	dc 01       	movw	r26, r24
    3e88:	ed 91       	ld	r30, X+
    3e8a:	fc 91       	ld	r31, X
    3e8c:	01 90       	ld	r0, Z+
    3e8e:	f0 81       	ld	r31, Z
    3e90:	e0 2d       	mov	r30, r0
    3e92:	64 2f       	mov	r22, r20
    3e94:	df 91       	pop	r29
    3e96:	cf 91       	pop	r28
    3e98:	1f 91       	pop	r17
    3e9a:	0f 91       	pop	r16
    3e9c:	ff 90       	pop	r15
    3e9e:	ef 90       	pop	r14
    3ea0:	df 90       	pop	r13
    3ea2:	cf 90       	pop	r12
    3ea4:	09 94       	ijmp
    3ea6:	2a 30       	cpi	r18, 0x0A	; 10
    3ea8:	31 05       	cpc	r19, r1
    3eaa:	01 f5       	brne	.+64     	; 0x3eec <_ZN5Print5printEli+0x7c>
    3eac:	77 ff       	sbrs	r23, 7
    3eae:	1d c0       	rjmp	.+58     	; 0x3eea <_ZN5Print5printEli+0x7a>
    3eb0:	6a 01       	movw	r12, r20
    3eb2:	7b 01       	movw	r14, r22
    3eb4:	ec 01       	movw	r28, r24
    3eb6:	6d e2       	ldi	r22, 0x2D	; 45
    3eb8:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <_ZN5Print5printEc>
    3ebc:	8c 01       	movw	r16, r24
    3ebe:	44 27       	eor	r20, r20
    3ec0:	55 27       	eor	r21, r21
    3ec2:	ba 01       	movw	r22, r20
    3ec4:	4c 19       	sub	r20, r12
    3ec6:	5d 09       	sbc	r21, r13
    3ec8:	6e 09       	sbc	r22, r14
    3eca:	7f 09       	sbc	r23, r15
    3ecc:	2a e0       	ldi	r18, 0x0A	; 10
    3ece:	ce 01       	movw	r24, r28
    3ed0:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <_ZN5Print11printNumberEmh>
    3ed4:	80 0f       	add	r24, r16
    3ed6:	91 1f       	adc	r25, r17
    3ed8:	df 91       	pop	r29
    3eda:	cf 91       	pop	r28
    3edc:	1f 91       	pop	r17
    3ede:	0f 91       	pop	r16
    3ee0:	ff 90       	pop	r15
    3ee2:	ef 90       	pop	r14
    3ee4:	df 90       	pop	r13
    3ee6:	cf 90       	pop	r12
    3ee8:	08 95       	ret
    3eea:	2a e0       	ldi	r18, 0x0A	; 10
    3eec:	df 91       	pop	r29
    3eee:	cf 91       	pop	r28
    3ef0:	1f 91       	pop	r17
    3ef2:	0f 91       	pop	r16
    3ef4:	ff 90       	pop	r15
    3ef6:	ef 90       	pop	r14
    3ef8:	df 90       	pop	r13
    3efa:	cf 90       	pop	r12
    3efc:	0c 94 dc 1e 	jmp	0x3db8	; 0x3db8 <_ZN5Print11printNumberEmh>

00003f00 <_ZN5Print5printEii>:
    3f00:	9a 01       	movw	r18, r20
    3f02:	ab 01       	movw	r20, r22
    3f04:	77 0f       	add	r23, r23
    3f06:	66 0b       	sbc	r22, r22
    3f08:	77 0b       	sbc	r23, r23
    3f0a:	0c 94 38 1f 	jmp	0x3e70	; 0x3e70 <_ZN5Print5printEli>

00003f0e <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    3f0e:	7f 92       	push	r7
    3f10:	8f 92       	push	r8
    3f12:	9f 92       	push	r9
    3f14:	af 92       	push	r10
    3f16:	bf 92       	push	r11
    3f18:	cf 92       	push	r12
    3f1a:	df 92       	push	r13
    3f1c:	ef 92       	push	r14
    3f1e:	ff 92       	push	r15
    3f20:	0f 93       	push	r16
    3f22:	1f 93       	push	r17
    3f24:	cf 93       	push	r28
    3f26:	df 93       	push	r29
    3f28:	8c 01       	movw	r16, r24
    3f2a:	6a 01       	movw	r12, r20
    3f2c:	7b 01       	movw	r14, r22
    3f2e:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    3f30:	9a 01       	movw	r18, r20
    3f32:	ab 01       	movw	r20, r22
    3f34:	c7 01       	movw	r24, r14
    3f36:	b6 01       	movw	r22, r12
    3f38:	0e 94 80 29 	call	0x5300	; 0x5300 <__unordsf2>
    3f3c:	88 23       	and	r24, r24
    3f3e:	19 f0       	breq	.+6      	; 0x3f46 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3f40:	63 e1       	ldi	r22, 0x13	; 19
    3f42:	73 e0       	ldi	r23, 0x03	; 3
    3f44:	27 c0       	rjmp	.+78     	; 0x3f94 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    3f46:	46 01       	movw	r8, r12
    3f48:	57 01       	movw	r10, r14
    3f4a:	e8 94       	clt
    3f4c:	b7 f8       	bld	r11, 7
    3f4e:	2f ef       	ldi	r18, 0xFF	; 255
    3f50:	3f ef       	ldi	r19, 0xFF	; 255
    3f52:	4f e7       	ldi	r20, 0x7F	; 127
    3f54:	5f e7       	ldi	r21, 0x7F	; 127
    3f56:	c5 01       	movw	r24, r10
    3f58:	b4 01       	movw	r22, r8
    3f5a:	0e 94 80 29 	call	0x5300	; 0x5300 <__unordsf2>
    3f5e:	81 11       	cpse	r24, r1
    3f60:	0d c0       	rjmp	.+26     	; 0x3f7c <_ZN5Print10printFloatEdh+0x6e>
    3f62:	2f ef       	ldi	r18, 0xFF	; 255
    3f64:	3f ef       	ldi	r19, 0xFF	; 255
    3f66:	4f e7       	ldi	r20, 0x7F	; 127
    3f68:	5f e7       	ldi	r21, 0x7F	; 127
    3f6a:	c5 01       	movw	r24, r10
    3f6c:	b4 01       	movw	r22, r8
    3f6e:	0e 94 b1 19 	call	0x3362	; 0x3362 <__cmpsf2>
    3f72:	18 16       	cp	r1, r24
    3f74:	1c f4       	brge	.+6      	; 0x3f7c <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3f76:	67 e1       	ldi	r22, 0x17	; 23
    3f78:	73 e0       	ldi	r23, 0x03	; 3
    3f7a:	0c c0       	rjmp	.+24     	; 0x3f94 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    3f7c:	2f ef       	ldi	r18, 0xFF	; 255
    3f7e:	3f ef       	ldi	r19, 0xFF	; 255
    3f80:	4f e7       	ldi	r20, 0x7F	; 127
    3f82:	5f e4       	ldi	r21, 0x4F	; 79
    3f84:	c7 01       	movw	r24, r14
    3f86:	b6 01       	movw	r22, r12
    3f88:	0e 94 10 1b 	call	0x3620	; 0x3620 <__gesf2>
    3f8c:	18 16       	cp	r1, r24
    3f8e:	94 f4       	brge	.+36     	; 0x3fb4 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3f90:	6b e1       	ldi	r22, 0x1B	; 27
    3f92:	73 e0       	ldi	r23, 0x03	; 3
    3f94:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    3f96:	df 91       	pop	r29
    3f98:	cf 91       	pop	r28
    3f9a:	1f 91       	pop	r17
    3f9c:	0f 91       	pop	r16
    3f9e:	ff 90       	pop	r15
    3fa0:	ef 90       	pop	r14
    3fa2:	df 90       	pop	r13
    3fa4:	cf 90       	pop	r12
    3fa6:	bf 90       	pop	r11
    3fa8:	af 90       	pop	r10
    3faa:	9f 90       	pop	r9
    3fac:	8f 90       	pop	r8
    3fae:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    3fb0:	0c 94 b0 1e 	jmp	0x3d60	; 0x3d60 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    3fb4:	2f ef       	ldi	r18, 0xFF	; 255
    3fb6:	3f ef       	ldi	r19, 0xFF	; 255
    3fb8:	4f e7       	ldi	r20, 0x7F	; 127
    3fba:	5f ec       	ldi	r21, 0xCF	; 207
    3fbc:	c7 01       	movw	r24, r14
    3fbe:	b6 01       	movw	r22, r12
    3fc0:	0e 94 b1 19 	call	0x3362	; 0x3362 <__cmpsf2>
    3fc4:	87 fd       	sbrc	r24, 7
    3fc6:	e4 cf       	rjmp	.-56     	; 0x3f90 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    3fc8:	20 e0       	ldi	r18, 0x00	; 0
    3fca:	30 e0       	ldi	r19, 0x00	; 0
    3fcc:	a9 01       	movw	r20, r18
    3fce:	c7 01       	movw	r24, r14
    3fd0:	b6 01       	movw	r22, r12
    3fd2:	0e 94 b1 19 	call	0x3362	; 0x3362 <__cmpsf2>
    3fd6:	87 ff       	sbrs	r24, 7
    3fd8:	0a c0       	rjmp	.+20     	; 0x3fee <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    3fda:	6d e2       	ldi	r22, 0x2D	; 45
    3fdc:	c8 01       	movw	r24, r16
    3fde:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <_ZN5Print5printEc>
    3fe2:	ec 01       	movw	r28, r24
     number = -number;
    3fe4:	f7 fa       	bst	r15, 7
    3fe6:	f0 94       	com	r15
    3fe8:	f7 f8       	bld	r15, 7
    3fea:	f0 94       	com	r15
    3fec:	02 c0       	rjmp	.+4      	; 0x3ff2 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    3fee:	c0 e0       	ldi	r28, 0x00	; 0
    3ff0:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3ff2:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    3ff4:	60 e0       	ldi	r22, 0x00	; 0
    3ff6:	70 e0       	ldi	r23, 0x00	; 0
    3ff8:	80 e0       	ldi	r24, 0x00	; 0
    3ffa:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    3ffc:	7b 14       	cp	r7, r11
    3ffe:	41 f0       	breq	.+16     	; 0x4010 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    4000:	20 e0       	ldi	r18, 0x00	; 0
    4002:	30 e0       	ldi	r19, 0x00	; 0
    4004:	40 e2       	ldi	r20, 0x20	; 32
    4006:	51 e4       	ldi	r21, 0x41	; 65
    4008:	0e 94 b6 19 	call	0x336c	; 0x336c <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    400c:	b3 94       	inc	r11
    400e:	f6 cf       	rjmp	.-20     	; 0x3ffc <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    4010:	a7 01       	movw	r20, r14
    4012:	96 01       	movw	r18, r12
    4014:	0e 94 45 19 	call	0x328a	; 0x328a <__addsf3>
    4018:	6b 01       	movw	r12, r22
    401a:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    401c:	0e 94 2f 1a 	call	0x345e	; 0x345e <__fixunssfsi>
    4020:	4b 01       	movw	r8, r22
    4022:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    4024:	2a e0       	ldi	r18, 0x0A	; 10
    4026:	ab 01       	movw	r20, r22
    4028:	bc 01       	movw	r22, r24
    402a:	c8 01       	movw	r24, r16
    402c:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    4030:	c8 0f       	add	r28, r24
    4032:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    4034:	77 20       	and	r7, r7
    4036:	b9 f1       	breq	.+110    	; 0x40a6 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    4038:	c5 01       	movw	r24, r10
    403a:	b4 01       	movw	r22, r8
    403c:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__floatunsisf>
    4040:	9b 01       	movw	r18, r22
    4042:	ac 01       	movw	r20, r24
    4044:	c7 01       	movw	r24, r14
    4046:	b6 01       	movw	r22, r12
    4048:	0e 94 44 19 	call	0x3288	; 0x3288 <__subsf3>
    404c:	6b 01       	movw	r12, r22
    404e:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    4050:	6e e2       	ldi	r22, 0x2E	; 46
    4052:	c8 01       	movw	r24, r16
    4054:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <_ZN5Print5printEc>
    4058:	c8 0f       	add	r28, r24
    405a:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    405c:	20 e0       	ldi	r18, 0x00	; 0
    405e:	30 e0       	ldi	r19, 0x00	; 0
    4060:	40 e2       	ldi	r20, 0x20	; 32
    4062:	51 e4       	ldi	r21, 0x41	; 65
    4064:	c7 01       	movw	r24, r14
    4066:	b6 01       	movw	r22, r12
    4068:	0e 94 15 1b 	call	0x362a	; 0x362a <__mulsf3>
    406c:	4b 01       	movw	r8, r22
    406e:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    4070:	0e 94 2f 1a 	call	0x345e	; 0x345e <__fixunssfsi>
    4074:	6b 01       	movw	r12, r22
    4076:	7c 01       	movw	r14, r24
    n += print(toPrint);
    4078:	4a e0       	ldi	r20, 0x0A	; 10
    407a:	50 e0       	ldi	r21, 0x00	; 0
    407c:	c8 01       	movw	r24, r16
    407e:	0e 94 32 1f 	call	0x3e64	; 0x3e64 <_ZN5Print5printEji>
    4082:	c8 0f       	add	r28, r24
    4084:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    4086:	b6 01       	movw	r22, r12
    4088:	80 e0       	ldi	r24, 0x00	; 0
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__floatunsisf>
    4090:	9b 01       	movw	r18, r22
    4092:	ac 01       	movw	r20, r24
    4094:	c5 01       	movw	r24, r10
    4096:	b4 01       	movw	r22, r8
    4098:	0e 94 44 19 	call	0x3288	; 0x3288 <__subsf3>
    409c:	6b 01       	movw	r12, r22
    409e:	7c 01       	movw	r14, r24
    40a0:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    40a2:	71 10       	cpse	r7, r1
    40a4:	db cf       	rjmp	.-74     	; 0x405c <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    40a6:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    40a8:	df 91       	pop	r29
    40aa:	cf 91       	pop	r28
    40ac:	1f 91       	pop	r17
    40ae:	0f 91       	pop	r16
    40b0:	ff 90       	pop	r15
    40b2:	ef 90       	pop	r14
    40b4:	df 90       	pop	r13
    40b6:	cf 90       	pop	r12
    40b8:	bf 90       	pop	r11
    40ba:	af 90       	pop	r10
    40bc:	9f 90       	pop	r9
    40be:	8f 90       	pop	r8
    40c0:	7f 90       	pop	r7
    40c2:	08 95       	ret

000040c4 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    40c4:	0c 94 87 1f 	jmp	0x3f0e	; 0x3f0e <_ZN5Print10printFloatEdh>

000040c8 <_ZL4RecvPVhh>:
//=======================================================================
//=======================================================================

USBDevice_ USBDevice;

USBDevice_::USBDevice_()
    40c8:	61 50       	subi	r22, 0x01	; 1
    40ca:	30 f0       	brcs	.+12     	; 0x40d8 <_ZL4RecvPVhh+0x10>
    40cc:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    40d0:	fc 01       	movw	r30, r24
    40d2:	20 83       	st	Z, r18
    40d4:	01 96       	adiw	r24, 0x01	; 1
    40d6:	f8 cf       	rjmp	.-16     	; 0x40c8 <_ZL4RecvPVhh>
    40d8:	28 98       	cbi	0x05, 0	; 5
    40da:	84 e6       	ldi	r24, 0x64	; 100
    40dc:	80 93 bb 06 	sts	0x06BB, r24	; 0x8006bb <RxLEDPulse>
    40e0:	08 95       	ret

000040e2 <_ZL11SendControlh>:
    40e2:	40 91 b6 06 	lds	r20, 0x06B6	; 0x8006b6 <_ZL6_cmark>
    40e6:	50 91 b7 06 	lds	r21, 0x06B7	; 0x8006b7 <_ZL6_cmark+0x1>
    40ea:	20 91 b4 06 	lds	r18, 0x06B4	; 0x8006b4 <_ZL5_cend>
    40ee:	30 91 b5 06 	lds	r19, 0x06B5	; 0x8006b5 <_ZL5_cend+0x1>
    40f2:	42 17       	cp	r20, r18
    40f4:	53 07       	cpc	r21, r19
    40f6:	b4 f4       	brge	.+44     	; 0x4124 <_ZL11SendControlh+0x42>
    40f8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    40fc:	95 70       	andi	r25, 0x05	; 5
    40fe:	e1 f3       	breq	.-8      	; 0x40f8 <_ZL11SendControlh+0x16>
    4100:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4104:	92 fd       	sbrc	r25, 2
    4106:	19 c0       	rjmp	.+50     	; 0x413a <_ZL11SendControlh+0x58>
    4108:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    410c:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <_ZL6_cmark>
    4110:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <_ZL6_cmark+0x1>
    4114:	01 96       	adiw	r24, 0x01	; 1
    4116:	8f 73       	andi	r24, 0x3F	; 63
    4118:	99 27       	eor	r25, r25
    411a:	89 2b       	or	r24, r25
    411c:	19 f4       	brne	.+6      	; 0x4124 <_ZL11SendControlh+0x42>
    411e:	8e ef       	ldi	r24, 0xFE	; 254
    4120:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4124:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <_ZL6_cmark>
    4128:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <_ZL6_cmark+0x1>
    412c:	01 96       	adiw	r24, 0x01	; 1
    412e:	90 93 b7 06 	sts	0x06B7, r25	; 0x8006b7 <_ZL6_cmark+0x1>
    4132:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <_ZL6_cmark>
    4136:	81 e0       	ldi	r24, 0x01	; 1
    4138:	08 95       	ret
    413a:	80 e0       	ldi	r24, 0x00	; 0
    413c:	08 95       	ret

0000413e <_ZL24USB_SendStringDescriptorPKhhh>:
    413e:	df 92       	push	r13
    4140:	ef 92       	push	r14
    4142:	ff 92       	push	r15
    4144:	0f 93       	push	r16
    4146:	1f 93       	push	r17
    4148:	cf 93       	push	r28
    414a:	df 93       	push	r29
    414c:	d8 2e       	mov	r13, r24
    414e:	f9 2e       	mov	r15, r25
    4150:	e4 2e       	mov	r14, r20
    4152:	06 2f       	mov	r16, r22
    4154:	10 e0       	ldi	r17, 0x00	; 0
    4156:	c8 01       	movw	r24, r16
    4158:	01 96       	adiw	r24, 0x01	; 1
    415a:	88 0f       	add	r24, r24
    415c:	0e 94 71 20 	call	0x40e2	; 0x40e2 <_ZL11SendControlh>
    4160:	83 e0       	ldi	r24, 0x03	; 3
    4162:	0e 94 71 20 	call	0x40e2	; 0x40e2 <_ZL11SendControlh>
    4166:	cd 2d       	mov	r28, r13
    4168:	df 2d       	mov	r29, r15
    416a:	0c 0f       	add	r16, r28
    416c:	1d 1f       	adc	r17, r29
    416e:	c0 17       	cp	r28, r16
    4170:	d1 07       	cpc	r29, r17
    4172:	89 f0       	breq	.+34     	; 0x4196 <_ZL24USB_SendStringDescriptorPKhhh+0x58>
    4174:	e7 fe       	sbrs	r14, 7
    4176:	03 c0       	rjmp	.+6      	; 0x417e <_ZL24USB_SendStringDescriptorPKhhh+0x40>
    4178:	fe 01       	movw	r30, r28
    417a:	84 91       	lpm	r24, Z
    417c:	01 c0       	rjmp	.+2      	; 0x4180 <_ZL24USB_SendStringDescriptorPKhhh+0x42>
    417e:	88 81       	ld	r24, Y
    4180:	0e 94 71 20 	call	0x40e2	; 0x40e2 <_ZL11SendControlh>
    4184:	f8 2e       	mov	r15, r24
    4186:	80 e0       	ldi	r24, 0x00	; 0
    4188:	0e 94 71 20 	call	0x40e2	; 0x40e2 <_ZL11SendControlh>
    418c:	8f 21       	and	r24, r15
    418e:	21 96       	adiw	r28, 0x01	; 1
    4190:	81 11       	cpse	r24, r1
    4192:	ed cf       	rjmp	.-38     	; 0x416e <_ZL24USB_SendStringDescriptorPKhhh+0x30>
    4194:	01 c0       	rjmp	.+2      	; 0x4198 <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
    4196:	81 e0       	ldi	r24, 0x01	; 1
    4198:	df 91       	pop	r29
    419a:	cf 91       	pop	r28
    419c:	1f 91       	pop	r17
    419e:	0f 91       	pop	r16
    41a0:	ff 90       	pop	r15
    41a2:	ef 90       	pop	r14
    41a4:	df 90       	pop	r13
    41a6:	08 95       	ret

000041a8 <_ZL15USB_ClockEnablev>:
    41a8:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    41ac:	81 60       	ori	r24, 0x01	; 1
    41ae:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    41b2:	80 ea       	ldi	r24, 0xA0	; 160
    41b4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    41b8:	89 b5       	in	r24, 0x29	; 41
    41ba:	80 61       	ori	r24, 0x10	; 16
    41bc:	89 bd       	out	0x29, r24	; 41
    41be:	89 b5       	in	r24, 0x29	; 41
    41c0:	82 60       	ori	r24, 0x02	; 2
    41c2:	89 bd       	out	0x29, r24	; 41
    41c4:	09 b4       	in	r0, 0x29	; 41
    41c6:	00 fe       	sbrs	r0, 0
    41c8:	fd cf       	rjmp	.-6      	; 0x41c4 <_ZL15USB_ClockEnablev+0x1c>
    41ca:	61 e0       	ldi	r22, 0x01	; 1
    41cc:	70 e0       	ldi	r23, 0x00	; 0
    41ce:	80 e0       	ldi	r24, 0x00	; 0
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <delay>
    41d6:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    41da:	8f 7c       	andi	r24, 0xCF	; 207
    41dc:	80 61       	ori	r24, 0x10	; 16
    41de:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    41e2:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    41e6:	80 7f       	andi	r24, 0xF0	; 240
    41e8:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    41ec:	08 95       	ret

000041ee <_ZL14SendInterfacesv>:
    41ee:	cf 93       	push	r28
    41f0:	df 93       	push	r29
    41f2:	1f 92       	push	r1
    41f4:	cd b7       	in	r28, 0x3d	; 61
    41f6:	de b7       	in	r29, 0x3e	; 62
    41f8:	19 82       	std	Y+1, r1	; 0x01
    41fa:	ce 01       	movw	r24, r28
    41fc:	01 96       	adiw	r24, 0x01	; 1
    41fe:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <_Z16CDC_GetInterfacePh>
    4202:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <_Z12PluggableUSBv>
    4206:	be 01       	movw	r22, r28
    4208:	6f 5f       	subi	r22, 0xFF	; 255
    420a:	7f 4f       	sbci	r23, 0xFF	; 255
    420c:	0e 94 e7 28 	call	0x51ce	; 0x51ce <_ZN13PluggableUSB_12getInterfaceEPh>
    4210:	89 81       	ldd	r24, Y+1	; 0x01
    4212:	0f 90       	pop	r0
    4214:	df 91       	pop	r29
    4216:	cf 91       	pop	r28
    4218:	08 95       	ret

0000421a <_ZN6LockEPC1Eh>:
    421a:	2f b7       	in	r18, 0x3f	; 63
    421c:	fc 01       	movw	r30, r24
    421e:	20 83       	st	Z, r18
    4220:	f8 94       	cli
    4222:	67 70       	andi	r22, 0x07	; 7
    4224:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    4228:	08 95       	ret

0000422a <_Z13USB_Availableh>:
    422a:	cf 93       	push	r28
    422c:	df 93       	push	r29
    422e:	1f 92       	push	r1
    4230:	cd b7       	in	r28, 0x3d	; 61
    4232:	de b7       	in	r29, 0x3e	; 62
    4234:	68 2f       	mov	r22, r24
    4236:	ce 01       	movw	r24, r28
    4238:	01 96       	adiw	r24, 0x01	; 1
    423a:	0e 94 0d 21 	call	0x421a	; 0x421a <_ZN6LockEPC1Eh>
    423e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    4242:	99 81       	ldd	r25, Y+1	; 0x01
    4244:	9f bf       	out	0x3f, r25	; 63
    4246:	0f 90       	pop	r0
    4248:	df 91       	pop	r29
    424a:	cf 91       	pop	r28
    424c:	08 95       	ret

0000424e <_Z8USB_RecvhPvi>:
    424e:	ef 92       	push	r14
    4250:	ff 92       	push	r15
    4252:	0f 93       	push	r16
    4254:	1f 93       	push	r17
    4256:	cf 93       	push	r28
    4258:	df 93       	push	r29
    425a:	1f 92       	push	r1
    425c:	cd b7       	in	r28, 0x3d	; 61
    425e:	de b7       	in	r29, 0x3e	; 62
    4260:	90 91 ba 06 	lds	r25, 0x06BA	; 0x8006ba <_usbConfiguration>
    4264:	99 23       	and	r25, r25
    4266:	11 f0       	breq	.+4      	; 0x426c <_Z8USB_RecvhPvi+0x1e>
    4268:	57 ff       	sbrs	r21, 7
    426a:	03 c0       	rjmp	.+6      	; 0x4272 <_Z8USB_RecvhPvi+0x24>
    426c:	8f ef       	ldi	r24, 0xFF	; 255
    426e:	9f ef       	ldi	r25, 0xFF	; 255
    4270:	29 c0       	rjmp	.+82     	; 0x42c4 <_Z8USB_RecvhPvi+0x76>
    4272:	8a 01       	movw	r16, r20
    4274:	7b 01       	movw	r14, r22
    4276:	68 2f       	mov	r22, r24
    4278:	ce 01       	movw	r24, r28
    427a:	01 96       	adiw	r24, 0x01	; 1
    427c:	0e 94 0d 21 	call	0x421a	; 0x421a <_ZN6LockEPC1Eh>
    4280:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    4284:	30 e0       	ldi	r19, 0x00	; 0
    4286:	02 17       	cp	r16, r18
    4288:	13 07       	cpc	r17, r19
    428a:	0c f4       	brge	.+2      	; 0x428e <_Z8USB_RecvhPvi+0x40>
    428c:	98 01       	movw	r18, r16
    428e:	82 2f       	mov	r24, r18
    4290:	f7 01       	movw	r30, r14
    4292:	94 e6       	ldi	r25, 0x64	; 100
    4294:	81 50       	subi	r24, 0x01	; 1
    4296:	38 f0       	brcs	.+14     	; 0x42a6 <_Z8USB_RecvhPvi+0x58>
    4298:	28 98       	cbi	0x05, 0	; 5
    429a:	90 93 bb 06 	sts	0x06BB, r25	; 0x8006bb <RxLEDPulse>
    429e:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    42a2:	41 93       	st	Z+, r20
    42a4:	f7 cf       	rjmp	.-18     	; 0x4294 <_Z8USB_RecvhPvi+0x46>
    42a6:	21 15       	cp	r18, r1
    42a8:	31 05       	cpc	r19, r1
    42aa:	21 f0       	breq	.+8      	; 0x42b4 <_Z8USB_RecvhPvi+0x66>
    42ac:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    42b0:	88 23       	and	r24, r24
    42b2:	21 f0       	breq	.+8      	; 0x42bc <_Z8USB_RecvhPvi+0x6e>
    42b4:	89 81       	ldd	r24, Y+1	; 0x01
    42b6:	8f bf       	out	0x3f, r24	; 63
    42b8:	c9 01       	movw	r24, r18
    42ba:	04 c0       	rjmp	.+8      	; 0x42c4 <_Z8USB_RecvhPvi+0x76>
    42bc:	8b e6       	ldi	r24, 0x6B	; 107
    42be:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    42c2:	f8 cf       	rjmp	.-16     	; 0x42b4 <_Z8USB_RecvhPvi+0x66>
    42c4:	0f 90       	pop	r0
    42c6:	df 91       	pop	r29
    42c8:	cf 91       	pop	r28
    42ca:	1f 91       	pop	r17
    42cc:	0f 91       	pop	r16
    42ce:	ff 90       	pop	r15
    42d0:	ef 90       	pop	r14
    42d2:	08 95       	ret

000042d4 <_Z8USB_Recvh>:
    42d4:	cf 93       	push	r28
    42d6:	df 93       	push	r29
    42d8:	1f 92       	push	r1
    42da:	cd b7       	in	r28, 0x3d	; 61
    42dc:	de b7       	in	r29, 0x3e	; 62
    42de:	41 e0       	ldi	r20, 0x01	; 1
    42e0:	50 e0       	ldi	r21, 0x00	; 0
    42e2:	be 01       	movw	r22, r28
    42e4:	6f 5f       	subi	r22, 0xFF	; 255
    42e6:	7f 4f       	sbci	r23, 0xFF	; 255
    42e8:	0e 94 27 21 	call	0x424e	; 0x424e <_Z8USB_RecvhPvi>
    42ec:	01 97       	sbiw	r24, 0x01	; 1
    42ee:	19 f4       	brne	.+6      	; 0x42f6 <_Z8USB_Recvh+0x22>
    42f0:	89 81       	ldd	r24, Y+1	; 0x01
    42f2:	90 e0       	ldi	r25, 0x00	; 0
    42f4:	02 c0       	rjmp	.+4      	; 0x42fa <_Z8USB_Recvh+0x26>
    42f6:	8f ef       	ldi	r24, 0xFF	; 255
    42f8:	9f ef       	ldi	r25, 0xFF	; 255
    42fa:	0f 90       	pop	r0
    42fc:	df 91       	pop	r29
    42fe:	cf 91       	pop	r28
    4300:	08 95       	ret

00004302 <_Z13USB_SendSpaceh>:
    4302:	cf 93       	push	r28
    4304:	df 93       	push	r29
    4306:	1f 92       	push	r1
    4308:	cd b7       	in	r28, 0x3d	; 61
    430a:	de b7       	in	r29, 0x3e	; 62
    430c:	68 2f       	mov	r22, r24
    430e:	ce 01       	movw	r24, r28
    4310:	01 96       	adiw	r24, 0x01	; 1
    4312:	0e 94 0d 21 	call	0x421a	; 0x421a <_ZN6LockEPC1Eh>
    4316:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    431a:	89 2f       	mov	r24, r25
    431c:	80 72       	andi	r24, 0x20	; 32
    431e:	95 ff       	sbrs	r25, 5
    4320:	04 c0       	rjmp	.+8      	; 0x432a <_Z13USB_SendSpaceh+0x28>
    4322:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    4326:	80 e4       	ldi	r24, 0x40	; 64
    4328:	89 1b       	sub	r24, r25
    432a:	99 81       	ldd	r25, Y+1	; 0x01
    432c:	9f bf       	out	0x3f, r25	; 63
    432e:	0f 90       	pop	r0
    4330:	df 91       	pop	r29
    4332:	cf 91       	pop	r28
    4334:	08 95       	ret

00004336 <_Z8USB_SendhPKvi>:
    4336:	5f 92       	push	r5
    4338:	6f 92       	push	r6
    433a:	7f 92       	push	r7
    433c:	8f 92       	push	r8
    433e:	9f 92       	push	r9
    4340:	af 92       	push	r10
    4342:	bf 92       	push	r11
    4344:	cf 92       	push	r12
    4346:	df 92       	push	r13
    4348:	ef 92       	push	r14
    434a:	ff 92       	push	r15
    434c:	0f 93       	push	r16
    434e:	1f 93       	push	r17
    4350:	cf 93       	push	r28
    4352:	df 93       	push	r29
    4354:	1f 92       	push	r1
    4356:	cd b7       	in	r28, 0x3d	; 61
    4358:	de b7       	in	r29, 0x3e	; 62
    435a:	98 2e       	mov	r9, r24
    435c:	6b 01       	movw	r12, r22
    435e:	b4 2e       	mov	r11, r20
    4360:	05 2f       	mov	r16, r21
    4362:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <_usbConfiguration>
    4366:	81 11       	cpse	r24, r1
    4368:	03 c0       	rjmp	.+6      	; 0x4370 <_Z8USB_SendhPKvi+0x3a>
    436a:	8f ef       	ldi	r24, 0xFF	; 255
    436c:	9f ef       	ldi	r25, 0xFF	; 255
    436e:	77 c0       	rjmp	.+238    	; 0x445e <_Z8USB_SendhPKvi+0x128>
    4370:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <_usbSuspendState>
    4374:	80 ff       	sbrs	r24, 0
    4376:	05 c0       	rjmp	.+10     	; 0x4382 <_Z8USB_SendhPKvi+0x4c>
    4378:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    437c:	82 60       	ori	r24, 0x02	; 2
    437e:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    4382:	eb 2c       	mov	r14, r11
    4384:	f0 2e       	mov	r15, r16
    4386:	a1 2c       	mov	r10, r1
    4388:	8a ef       	ldi	r24, 0xFA	; 250
    438a:	88 2e       	mov	r8, r24
    438c:	89 2d       	mov	r24, r9
    438e:	80 72       	andi	r24, 0x20	; 32
    4390:	68 2e       	mov	r6, r24
    4392:	89 2d       	mov	r24, r9
    4394:	80 74       	andi	r24, 0x40	; 64
    4396:	58 2e       	mov	r5, r24
    4398:	9a e3       	ldi	r25, 0x3A	; 58
    439a:	79 2e       	mov	r7, r25
    439c:	e1 14       	cp	r14, r1
    439e:	f1 04       	cpc	r15, r1
    43a0:	19 f4       	brne	.+6      	; 0x43a8 <_Z8USB_SendhPKvi+0x72>
    43a2:	aa 20       	and	r10, r10
    43a4:	09 f4       	brne	.+2      	; 0x43a8 <_Z8USB_SendhPKvi+0x72>
    43a6:	55 c0       	rjmp	.+170    	; 0x4452 <_Z8USB_SendhPKvi+0x11c>
    43a8:	89 2d       	mov	r24, r9
    43aa:	0e 94 81 21 	call	0x4302	; 0x4302 <_Z13USB_SendSpaceh>
    43ae:	18 2f       	mov	r17, r24
    43b0:	81 11       	cpse	r24, r1
    43b2:	0a c0       	rjmp	.+20     	; 0x43c8 <_Z8USB_SendhPKvi+0x92>
    43b4:	8a 94       	dec	r8
    43b6:	88 20       	and	r8, r8
    43b8:	c1 f2       	breq	.-80     	; 0x436a <_Z8USB_SendhPKvi+0x34>
    43ba:	61 e0       	ldi	r22, 0x01	; 1
    43bc:	70 e0       	ldi	r23, 0x00	; 0
    43be:	80 e0       	ldi	r24, 0x00	; 0
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <delay>
    43c6:	ea cf       	rjmp	.-44     	; 0x439c <_Z8USB_SendhPKvi+0x66>
    43c8:	90 e0       	ldi	r25, 0x00	; 0
    43ca:	e8 16       	cp	r14, r24
    43cc:	f9 06       	cpc	r15, r25
    43ce:	0c f4       	brge	.+2      	; 0x43d2 <_Z8USB_SendhPKvi+0x9c>
    43d0:	1e 2d       	mov	r17, r14
    43d2:	69 2d       	mov	r22, r9
    43d4:	ce 01       	movw	r24, r28
    43d6:	01 96       	adiw	r24, 0x01	; 1
    43d8:	0e 94 0d 21 	call	0x421a	; 0x421a <_ZN6LockEPC1Eh>
    43dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    43e0:	85 ff       	sbrs	r24, 5
    43e2:	34 c0       	rjmp	.+104    	; 0x444c <_Z8USB_SendhPKvi+0x116>
    43e4:	81 2f       	mov	r24, r17
    43e6:	90 e0       	ldi	r25, 0x00	; 0
    43e8:	e8 1a       	sub	r14, r24
    43ea:	f9 0a       	sbc	r15, r25
    43ec:	66 20       	and	r6, r6
    43ee:	29 f0       	breq	.+10     	; 0x43fa <_Z8USB_SendhPKvi+0xc4>
    43f0:	11 50       	subi	r17, 0x01	; 1
    43f2:	a0 f0       	brcs	.+40     	; 0x441c <_Z8USB_SendhPKvi+0xe6>
    43f4:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    43f8:	fb cf       	rjmp	.-10     	; 0x43f0 <_Z8USB_SendhPKvi+0xba>
    43fa:	f6 01       	movw	r30, r12
    43fc:	97 fe       	sbrs	r9, 7
    43fe:	0a c0       	rjmp	.+20     	; 0x4414 <_Z8USB_SendhPKvi+0xde>
    4400:	11 50       	subi	r17, 0x01	; 1
    4402:	50 f0       	brcs	.+20     	; 0x4418 <_Z8USB_SendhPKvi+0xe2>
    4404:	24 91       	lpm	r18, Z
    4406:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    440a:	31 96       	adiw	r30, 0x01	; 1
    440c:	f9 cf       	rjmp	.-14     	; 0x4400 <_Z8USB_SendhPKvi+0xca>
    440e:	21 91       	ld	r18, Z+
    4410:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    4414:	11 50       	subi	r17, 0x01	; 1
    4416:	d8 f7       	brcc	.-10     	; 0x440e <_Z8USB_SendhPKvi+0xd8>
    4418:	c8 0e       	add	r12, r24
    441a:	d9 1e       	adc	r13, r25
    441c:	aa 20       	and	r10, r10
    441e:	19 f0       	breq	.+6      	; 0x4426 <_Z8USB_SendhPKvi+0xf0>
    4420:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4424:	0b c0       	rjmp	.+22     	; 0x443c <_Z8USB_SendhPKvi+0x106>
    4426:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    442a:	85 fd       	sbrc	r24, 5
    442c:	09 c0       	rjmp	.+18     	; 0x4440 <_Z8USB_SendhPKvi+0x10a>
    442e:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4432:	aa 24       	eor	r10, r10
    4434:	a3 94       	inc	r10
    4436:	e1 14       	cp	r14, r1
    4438:	f1 04       	cpc	r15, r1
    443a:	41 f0       	breq	.+16     	; 0x444c <_Z8USB_SendhPKvi+0x116>
    443c:	a1 2c       	mov	r10, r1
    443e:	06 c0       	rjmp	.+12     	; 0x444c <_Z8USB_SendhPKvi+0x116>
    4440:	e1 14       	cp	r14, r1
    4442:	f1 04       	cpc	r15, r1
    4444:	19 f4       	brne	.+6      	; 0x444c <_Z8USB_SendhPKvi+0x116>
    4446:	51 10       	cpse	r5, r1
    4448:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    444c:	89 81       	ldd	r24, Y+1	; 0x01
    444e:	8f bf       	out	0x3f, r24	; 63
    4450:	a5 cf       	rjmp	.-182    	; 0x439c <_Z8USB_SendhPKvi+0x66>
    4452:	5d 98       	cbi	0x0b, 5	; 11
    4454:	84 e6       	ldi	r24, 0x64	; 100
    4456:	80 93 bc 06 	sts	0x06BC, r24	; 0x8006bc <TxLEDPulse>
    445a:	8b 2d       	mov	r24, r11
    445c:	90 2f       	mov	r25, r16
    445e:	0f 90       	pop	r0
    4460:	df 91       	pop	r29
    4462:	cf 91       	pop	r28
    4464:	1f 91       	pop	r17
    4466:	0f 91       	pop	r16
    4468:	ff 90       	pop	r15
    446a:	ef 90       	pop	r14
    446c:	df 90       	pop	r13
    446e:	cf 90       	pop	r12
    4470:	bf 90       	pop	r11
    4472:	af 90       	pop	r10
    4474:	9f 90       	pop	r9
    4476:	8f 90       	pop	r8
    4478:	7f 90       	pop	r7
    447a:	6f 90       	pop	r6
    447c:	5f 90       	pop	r5
    447e:	08 95       	ret

00004480 <_Z11InitControli>:
    4480:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    4484:	10 92 b7 06 	sts	0x06B7, r1	; 0x8006b7 <_ZL6_cmark+0x1>
    4488:	10 92 b6 06 	sts	0x06B6, r1	; 0x8006b6 <_ZL6_cmark>
    448c:	90 93 b5 06 	sts	0x06B5, r25	; 0x8006b5 <_ZL5_cend+0x1>
    4490:	80 93 b4 06 	sts	0x06B4, r24	; 0x8006b4 <_ZL5_cend>
    4494:	08 95       	ret

00004496 <_Z15USB_SendControlhPKvi>:
    4496:	df 92       	push	r13
    4498:	ef 92       	push	r14
    449a:	ff 92       	push	r15
    449c:	0f 93       	push	r16
    449e:	1f 93       	push	r17
    44a0:	cf 93       	push	r28
    44a2:	df 93       	push	r29
    44a4:	d8 2e       	mov	r13, r24
    44a6:	8a 01       	movw	r16, r20
    44a8:	7b 01       	movw	r14, r22
    44aa:	e4 0e       	add	r14, r20
    44ac:	f5 1e       	adc	r15, r21
    44ae:	eb 01       	movw	r28, r22
    44b0:	ce 15       	cp	r28, r14
    44b2:	df 05       	cpc	r29, r15
    44b4:	71 f0       	breq	.+28     	; 0x44d2 <_Z15USB_SendControlhPKvi+0x3c>
    44b6:	d7 fe       	sbrs	r13, 7
    44b8:	03 c0       	rjmp	.+6      	; 0x44c0 <_Z15USB_SendControlhPKvi+0x2a>
    44ba:	fe 01       	movw	r30, r28
    44bc:	84 91       	lpm	r24, Z
    44be:	01 c0       	rjmp	.+2      	; 0x44c2 <_Z15USB_SendControlhPKvi+0x2c>
    44c0:	88 81       	ld	r24, Y
    44c2:	0e 94 71 20 	call	0x40e2	; 0x40e2 <_ZL11SendControlh>
    44c6:	21 96       	adiw	r28, 0x01	; 1
    44c8:	81 11       	cpse	r24, r1
    44ca:	f2 cf       	rjmp	.-28     	; 0x44b0 <_Z15USB_SendControlhPKvi+0x1a>
    44cc:	8f ef       	ldi	r24, 0xFF	; 255
    44ce:	9f ef       	ldi	r25, 0xFF	; 255
    44d0:	01 c0       	rjmp	.+2      	; 0x44d4 <_Z15USB_SendControlhPKvi+0x3e>
    44d2:	c8 01       	movw	r24, r16
    44d4:	df 91       	pop	r29
    44d6:	cf 91       	pop	r28
    44d8:	1f 91       	pop	r17
    44da:	0f 91       	pop	r16
    44dc:	ff 90       	pop	r15
    44de:	ef 90       	pop	r14
    44e0:	df 90       	pop	r13
    44e2:	08 95       	ret

000044e4 <_Z15USB_RecvControlPvi>:
    44e4:	af 92       	push	r10
    44e6:	bf 92       	push	r11
    44e8:	df 92       	push	r13
    44ea:	ef 92       	push	r14
    44ec:	ff 92       	push	r15
    44ee:	0f 93       	push	r16
    44f0:	1f 93       	push	r17
    44f2:	cf 93       	push	r28
    44f4:	df 93       	push	r29
    44f6:	5c 01       	movw	r10, r24
    44f8:	8b 01       	movw	r16, r22
    44fa:	eb 01       	movw	r28, r22
    44fc:	9b ef       	ldi	r25, 0xFB	; 251
    44fe:	d9 2e       	mov	r13, r25
    4500:	20 97       	sbiw	r28, 0x00	; 0
    4502:	c1 f0       	breq	.+48     	; 0x4534 <_Z15USB_RecvControlPvi+0x50>
    4504:	7e 01       	movw	r14, r28
    4506:	c1 34       	cpi	r28, 0x41	; 65
    4508:	d1 05       	cpc	r29, r1
    450a:	1c f0       	brlt	.+6      	; 0x4512 <_Z15USB_RecvControlPvi+0x2e>
    450c:	80 e4       	ldi	r24, 0x40	; 64
    450e:	e8 2e       	mov	r14, r24
    4510:	f1 2c       	mov	r15, r1
    4512:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4516:	82 ff       	sbrs	r24, 2
    4518:	fc cf       	rjmp	.-8      	; 0x4512 <_Z15USB_RecvControlPvi+0x2e>
    451a:	c8 01       	movw	r24, r16
    451c:	8c 1b       	sub	r24, r28
    451e:	9d 0b       	sbc	r25, r29
    4520:	6e 2d       	mov	r22, r14
    4522:	8a 0d       	add	r24, r10
    4524:	9b 1d       	adc	r25, r11
    4526:	0e 94 64 20 	call	0x40c8	; 0x40c8 <_ZL4RecvPVhh>
    452a:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    452e:	ce 19       	sub	r28, r14
    4530:	df 09       	sbc	r29, r15
    4532:	e6 cf       	rjmp	.-52     	; 0x4500 <_Z15USB_RecvControlPvi+0x1c>
    4534:	c8 01       	movw	r24, r16
    4536:	df 91       	pop	r29
    4538:	cf 91       	pop	r28
    453a:	1f 91       	pop	r17
    453c:	0f 91       	pop	r16
    453e:	ff 90       	pop	r15
    4540:	ef 90       	pop	r14
    4542:	df 90       	pop	r13
    4544:	bf 90       	pop	r11
    4546:	af 90       	pop	r10
    4548:	08 95       	ret

0000454a <__vector_11>:
    454a:	1f 92       	push	r1
    454c:	0f 92       	push	r0
    454e:	0f b6       	in	r0, 0x3f	; 63
    4550:	0f 92       	push	r0
    4552:	11 24       	eor	r1, r1
    4554:	cf 92       	push	r12
    4556:	df 92       	push	r13
    4558:	ef 92       	push	r14
    455a:	ff 92       	push	r15
    455c:	0f 93       	push	r16
    455e:	1f 93       	push	r17
    4560:	2f 93       	push	r18
    4562:	3f 93       	push	r19
    4564:	4f 93       	push	r20
    4566:	5f 93       	push	r21
    4568:	6f 93       	push	r22
    456a:	7f 93       	push	r23
    456c:	8f 93       	push	r24
    456e:	9f 93       	push	r25
    4570:	af 93       	push	r26
    4572:	bf 93       	push	r27
    4574:	ef 93       	push	r30
    4576:	ff 93       	push	r31
    4578:	cf 93       	push	r28
    457a:	df 93       	push	r29
    457c:	cd b7       	in	r28, 0x3d	; 61
    457e:	de b7       	in	r29, 0x3e	; 62
    4580:	6c 97       	sbiw	r28, 0x1c	; 28
    4582:	de bf       	out	0x3e, r29	; 62
    4584:	cd bf       	out	0x3d, r28	; 61
    4586:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    458a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    458e:	83 ff       	sbrs	r24, 3
    4590:	17 c1       	rjmp	.+558    	; 0x47c0 <__vector_11+0x276>
    4592:	68 e0       	ldi	r22, 0x08	; 8
    4594:	ce 01       	movw	r24, r28
    4596:	45 96       	adiw	r24, 0x15	; 21
    4598:	0e 94 64 20 	call	0x40c8	; 0x40c8 <_ZL4RecvPVhh>
    459c:	82 ef       	ldi	r24, 0xF2	; 242
    459e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    45a2:	8d 89       	ldd	r24, Y+21	; 0x15
    45a4:	87 ff       	sbrs	r24, 7
    45a6:	05 c0       	rjmp	.+10     	; 0x45b2 <__vector_11+0x68>
    45a8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    45ac:	90 ff       	sbrs	r25, 0
    45ae:	fc cf       	rjmp	.-8      	; 0x45a8 <__vector_11+0x5e>
    45b0:	03 c0       	rjmp	.+6      	; 0x45b8 <__vector_11+0x6e>
    45b2:	9e ef       	ldi	r25, 0xFE	; 254
    45b4:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    45b8:	98 2f       	mov	r25, r24
    45ba:	90 76       	andi	r25, 0x60	; 96
    45bc:	09 f0       	breq	.+2      	; 0x45c0 <__vector_11+0x76>
    45be:	d8 c0       	rjmp	.+432    	; 0x4770 <__vector_11+0x226>
    45c0:	9e 89       	ldd	r25, Y+22	; 0x16
    45c2:	4f 89       	ldd	r20, Y+23	; 0x17
    45c4:	58 8d       	ldd	r21, Y+24	; 0x18
    45c6:	2f 89       	ldd	r18, Y+23	; 0x17
    45c8:	18 8d       	ldd	r17, Y+24	; 0x18
    45ca:	91 11       	cpse	r25, r1
    45cc:	0c c0       	rjmp	.+24     	; 0x45e6 <__vector_11+0x9c>
    45ce:	80 38       	cpi	r24, 0x80	; 128
    45d0:	29 f4       	brne	.+10     	; 0x45dc <__vector_11+0x92>
    45d2:	80 91 b9 06 	lds	r24, 0x06B9	; 0x8006b9 <_usbCurrentStatus>
    45d6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    45da:	02 c0       	rjmp	.+4      	; 0x45e0 <__vector_11+0x96>
    45dc:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    45e0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    45e4:	e6 c0       	rjmp	.+460    	; 0x47b2 <__vector_11+0x268>
    45e6:	91 30       	cpi	r25, 0x01	; 1
    45e8:	51 f4       	brne	.+20     	; 0x45fe <__vector_11+0xb4>
    45ea:	81 11       	cpse	r24, r1
    45ec:	e2 c0       	rjmp	.+452    	; 0x47b2 <__vector_11+0x268>
    45ee:	41 30       	cpi	r20, 0x01	; 1
    45f0:	51 05       	cpc	r21, r1
    45f2:	09 f0       	breq	.+2      	; 0x45f6 <__vector_11+0xac>
    45f4:	de c0       	rjmp	.+444    	; 0x47b2 <__vector_11+0x268>
    45f6:	80 91 b9 06 	lds	r24, 0x06B9	; 0x8006b9 <_usbCurrentStatus>
    45fa:	8d 7f       	andi	r24, 0xFD	; 253
    45fc:	0b c0       	rjmp	.+22     	; 0x4614 <__vector_11+0xca>
    45fe:	93 30       	cpi	r25, 0x03	; 3
    4600:	61 f4       	brne	.+24     	; 0x461a <__vector_11+0xd0>
    4602:	81 11       	cpse	r24, r1
    4604:	d6 c0       	rjmp	.+428    	; 0x47b2 <__vector_11+0x268>
    4606:	41 30       	cpi	r20, 0x01	; 1
    4608:	51 05       	cpc	r21, r1
    460a:	09 f0       	breq	.+2      	; 0x460e <__vector_11+0xc4>
    460c:	d2 c0       	rjmp	.+420    	; 0x47b2 <__vector_11+0x268>
    460e:	80 91 b9 06 	lds	r24, 0x06B9	; 0x8006b9 <_usbCurrentStatus>
    4612:	82 60       	ori	r24, 0x02	; 2
    4614:	80 93 b9 06 	sts	0x06B9, r24	; 0x8006b9 <_usbCurrentStatus>
    4618:	cc c0       	rjmp	.+408    	; 0x47b2 <__vector_11+0x268>
    461a:	95 30       	cpi	r25, 0x05	; 5
    461c:	49 f4       	brne	.+18     	; 0x4630 <__vector_11+0xe6>
    461e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4622:	80 ff       	sbrs	r24, 0
    4624:	fc cf       	rjmp	.-8      	; 0x461e <__vector_11+0xd4>
    4626:	82 2f       	mov	r24, r18
    4628:	80 68       	ori	r24, 0x80	; 128
    462a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    462e:	c1 c0       	rjmp	.+386    	; 0x47b2 <__vector_11+0x268>
    4630:	96 30       	cpi	r25, 0x06	; 6
    4632:	09 f0       	breq	.+2      	; 0x4636 <__vector_11+0xec>
    4634:	70 c0       	rjmp	.+224    	; 0x4716 <__vector_11+0x1cc>
    4636:	eb 8c       	ldd	r14, Y+27	; 0x1b
    4638:	fc 8c       	ldd	r15, Y+28	; 0x1c
    463a:	12 30       	cpi	r17, 0x02	; 2
    463c:	69 f5       	brne	.+90     	; 0x4698 <__vector_11+0x14e>
    463e:	80 e0       	ldi	r24, 0x00	; 0
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	0e 94 40 22 	call	0x4480	; 0x4480 <_Z11InitControli>
    4646:	0e 94 f7 20 	call	0x41ee	; 0x41ee <_ZL14SendInterfacesv>
    464a:	99 e0       	ldi	r25, 0x09	; 9
    464c:	9e 01       	movw	r18, r28
    464e:	2f 5f       	subi	r18, 0xFF	; 255
    4650:	3f 4f       	sbci	r19, 0xFF	; 255
    4652:	69 01       	movw	r12, r18
    4654:	f9 01       	movw	r30, r18
    4656:	29 2f       	mov	r18, r25
    4658:	11 92       	st	Z+, r1
    465a:	2a 95       	dec	r18
    465c:	e9 f7       	brne	.-6      	; 0x4658 <__vector_11+0x10e>
    465e:	99 83       	std	Y+1, r25	; 0x01
    4660:	1a 83       	std	Y+2, r17	; 0x02
    4662:	91 e0       	ldi	r25, 0x01	; 1
    4664:	9e 83       	std	Y+6, r25	; 0x06
    4666:	90 ea       	ldi	r25, 0xA0	; 160
    4668:	98 87       	std	Y+8, r25	; 0x08
    466a:	9a ef       	ldi	r25, 0xFA	; 250
    466c:	99 87       	std	Y+9, r25	; 0x09
    466e:	20 91 b6 06 	lds	r18, 0x06B6	; 0x8006b6 <_ZL6_cmark>
    4672:	30 91 b7 06 	lds	r19, 0x06B7	; 0x8006b7 <_ZL6_cmark+0x1>
    4676:	27 5f       	subi	r18, 0xF7	; 247
    4678:	3f 4f       	sbci	r19, 0xFF	; 255
    467a:	3c 83       	std	Y+4, r19	; 0x04
    467c:	2b 83       	std	Y+3, r18	; 0x03
    467e:	8d 83       	std	Y+5, r24	; 0x05
    4680:	c7 01       	movw	r24, r14
    4682:	0e 94 40 22 	call	0x4480	; 0x4480 <_Z11InitControli>
    4686:	49 e0       	ldi	r20, 0x09	; 9
    4688:	50 e0       	ldi	r21, 0x00	; 0
    468a:	b6 01       	movw	r22, r12
    468c:	80 e0       	ldi	r24, 0x00	; 0
    468e:	0e 94 4b 22 	call	0x4496	; 0x4496 <_Z15USB_SendControlhPKvi>
    4692:	0e 94 f7 20 	call	0x41ee	; 0x41ee <_ZL14SendInterfacesv>
    4696:	8d c0       	rjmp	.+282    	; 0x47b2 <__vector_11+0x268>
    4698:	c7 01       	movw	r24, r14
    469a:	0e 94 40 22 	call	0x4480	; 0x4480 <_Z11InitControli>
    469e:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <_Z12PluggableUSBv>
    46a2:	be 01       	movw	r22, r28
    46a4:	6b 5e       	subi	r22, 0xEB	; 235
    46a6:	7f 4f       	sbci	r23, 0xFF	; 255
    46a8:	0e 94 10 29 	call	0x5220	; 0x5220 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    46ac:	00 97       	sbiw	r24, 0x00	; 0
    46ae:	19 f0       	breq	.+6      	; 0x46b6 <__vector_11+0x16c>
    46b0:	0c f0       	brlt	.+2      	; 0x46b4 <__vector_11+0x16a>
    46b2:	7f c0       	rjmp	.+254    	; 0x47b2 <__vector_11+0x268>
    46b4:	82 c0       	rjmp	.+260    	; 0x47ba <__vector_11+0x270>
    46b6:	11 30       	cpi	r17, 0x01	; 1
    46b8:	09 f4       	brne	.+2      	; 0x46bc <__vector_11+0x172>
    46ba:	70 c0       	rjmp	.+224    	; 0x479c <__vector_11+0x252>
    46bc:	13 30       	cpi	r17, 0x03	; 3
    46be:	09 f0       	breq	.+2      	; 0x46c2 <__vector_11+0x178>
    46c0:	7c c0       	rjmp	.+248    	; 0x47ba <__vector_11+0x270>
    46c2:	8f 89       	ldd	r24, Y+23	; 0x17
    46c4:	88 23       	and	r24, r24
    46c6:	09 f4       	brne	.+2      	; 0x46ca <__vector_11+0x180>
    46c8:	6c c0       	rjmp	.+216    	; 0x47a2 <__vector_11+0x258>
    46ca:	82 30       	cpi	r24, 0x02	; 2
    46cc:	29 f4       	brne	.+10     	; 0x46d8 <__vector_11+0x18e>
    46ce:	40 e8       	ldi	r20, 0x80	; 128
    46d0:	60 e1       	ldi	r22, 0x10	; 16
    46d2:	88 e4       	ldi	r24, 0x48	; 72
    46d4:	91 e0       	ldi	r25, 0x01	; 1
    46d6:	06 c0       	rjmp	.+12     	; 0x46e4 <__vector_11+0x19a>
    46d8:	81 30       	cpi	r24, 0x01	; 1
    46da:	39 f4       	brne	.+14     	; 0x46ea <__vector_11+0x1a0>
    46dc:	40 e8       	ldi	r20, 0x80	; 128
    46de:	6b e0       	ldi	r22, 0x0B	; 11
    46e0:	8c e3       	ldi	r24, 0x3C	; 60
    46e2:	91 e0       	ldi	r25, 0x01	; 1
    46e4:	0e 94 9f 20 	call	0x413e	; 0x413e <_ZL24USB_SendStringDescriptorPKhhh>
    46e8:	56 c0       	rjmp	.+172    	; 0x4796 <__vector_11+0x24c>
    46ea:	83 30       	cpi	r24, 0x03	; 3
    46ec:	09 f0       	breq	.+2      	; 0x46f0 <__vector_11+0x1a6>
    46ee:	65 c0       	rjmp	.+202    	; 0x47ba <__vector_11+0x270>
    46f0:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <_Z12PluggableUSBv>
    46f4:	8e 01       	movw	r16, r28
    46f6:	0f 5f       	subi	r16, 0xFF	; 255
    46f8:	1f 4f       	sbci	r17, 0xFF	; 255
    46fa:	b8 01       	movw	r22, r16
    46fc:	0e 94 2f 29 	call	0x525e	; 0x525e <_ZN13PluggableUSB_12getShortNameEPc>
    4700:	f8 01       	movw	r30, r16
    4702:	01 90       	ld	r0, Z+
    4704:	00 20       	and	r0, r0
    4706:	e9 f7       	brne	.-6      	; 0x4702 <__vector_11+0x1b8>
    4708:	31 97       	sbiw	r30, 0x01	; 1
    470a:	bf 01       	movw	r22, r30
    470c:	60 1b       	sub	r22, r16
    470e:	71 0b       	sbc	r23, r17
    4710:	40 e0       	ldi	r20, 0x00	; 0
    4712:	c8 01       	movw	r24, r16
    4714:	e7 cf       	rjmp	.-50     	; 0x46e4 <__vector_11+0x19a>
    4716:	97 30       	cpi	r25, 0x07	; 7
    4718:	09 f4       	brne	.+2      	; 0x471c <__vector_11+0x1d2>
    471a:	4f c0       	rjmp	.+158    	; 0x47ba <__vector_11+0x270>
    471c:	98 30       	cpi	r25, 0x08	; 8
    471e:	21 f4       	brne	.+8      	; 0x4728 <__vector_11+0x1de>
    4720:	81 e0       	ldi	r24, 0x01	; 1
    4722:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    4726:	45 c0       	rjmp	.+138    	; 0x47b2 <__vector_11+0x268>
    4728:	99 30       	cpi	r25, 0x09	; 9
    472a:	09 f0       	breq	.+2      	; 0x472e <__vector_11+0x1e4>
    472c:	42 c0       	rjmp	.+132    	; 0x47b2 <__vector_11+0x268>
    472e:	83 70       	andi	r24, 0x03	; 3
    4730:	09 f0       	breq	.+2      	; 0x4734 <__vector_11+0x1ea>
    4732:	43 c0       	rjmp	.+134    	; 0x47ba <__vector_11+0x270>
    4734:	e5 e2       	ldi	r30, 0x25	; 37
    4736:	f1 e0       	ldi	r31, 0x01	; 1
    4738:	81 e0       	ldi	r24, 0x01	; 1
    473a:	31 e0       	ldi	r19, 0x01	; 1
    473c:	96 e3       	ldi	r25, 0x36	; 54
    473e:	20 81       	ld	r18, Z
    4740:	21 11       	cpse	r18, r1
    4742:	09 c0       	rjmp	.+18     	; 0x4756 <__vector_11+0x20c>
    4744:	8e e7       	ldi	r24, 0x7E	; 126
    4746:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    474a:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    474e:	8f 89       	ldd	r24, Y+23	; 0x17
    4750:	80 93 ba 06 	sts	0x06BA, r24	; 0x8006ba <_usbConfiguration>
    4754:	2e c0       	rjmp	.+92     	; 0x47b2 <__vector_11+0x268>
    4756:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    475a:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    475e:	21 91       	ld	r18, Z+
    4760:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    4764:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    4768:	8f 5f       	subi	r24, 0xFF	; 255
    476a:	87 30       	cpi	r24, 0x07	; 7
    476c:	41 f7       	brne	.-48     	; 0x473e <__vector_11+0x1f4>
    476e:	ea cf       	rjmp	.-44     	; 0x4744 <__vector_11+0x1fa>
    4770:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4772:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4774:	0e 94 40 22 	call	0x4480	; 0x4480 <_Z11InitControli>
    4778:	89 8d       	ldd	r24, Y+25	; 0x19
    477a:	81 11       	cpse	r24, r1
    477c:	05 c0       	rjmp	.+10     	; 0x4788 <__vector_11+0x23e>
    477e:	ce 01       	movw	r24, r28
    4780:	45 96       	adiw	r24, 0x15	; 21
    4782:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <_Z9CDC_SetupR8USBSetup>
    4786:	07 c0       	rjmp	.+14     	; 0x4796 <__vector_11+0x24c>
    4788:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <_Z12PluggableUSBv>
    478c:	be 01       	movw	r22, r28
    478e:	6b 5e       	subi	r22, 0xEB	; 235
    4790:	7f 4f       	sbci	r23, 0xFF	; 255
    4792:	0e 94 4e 29 	call	0x529c	; 0x529c <_ZN13PluggableUSB_5setupER8USBSetup>
    4796:	88 23       	and	r24, r24
    4798:	81 f0       	breq	.+32     	; 0x47ba <__vector_11+0x270>
    479a:	0b c0       	rjmp	.+22     	; 0x47b2 <__vector_11+0x268>
    479c:	6a e2       	ldi	r22, 0x2A	; 42
    479e:	71 e0       	ldi	r23, 0x01	; 1
    47a0:	02 c0       	rjmp	.+4      	; 0x47a6 <__vector_11+0x25c>
    47a2:	69 e5       	ldi	r22, 0x59	; 89
    47a4:	71 e0       	ldi	r23, 0x01	; 1
    47a6:	fb 01       	movw	r30, r22
    47a8:	44 91       	lpm	r20, Z
    47aa:	50 e0       	ldi	r21, 0x00	; 0
    47ac:	80 e8       	ldi	r24, 0x80	; 128
    47ae:	0e 94 4b 22 	call	0x4496	; 0x4496 <_Z15USB_SendControlhPKvi>
    47b2:	8e ef       	ldi	r24, 0xFE	; 254
    47b4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    47b8:	03 c0       	rjmp	.+6      	; 0x47c0 <__vector_11+0x276>
    47ba:	81 e2       	ldi	r24, 0x21	; 33
    47bc:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    47c0:	6c 96       	adiw	r28, 0x1c	; 28
    47c2:	0f b6       	in	r0, 0x3f	; 63
    47c4:	f8 94       	cli
    47c6:	de bf       	out	0x3e, r29	; 62
    47c8:	0f be       	out	0x3f, r0	; 63
    47ca:	cd bf       	out	0x3d, r28	; 61
    47cc:	df 91       	pop	r29
    47ce:	cf 91       	pop	r28
    47d0:	ff 91       	pop	r31
    47d2:	ef 91       	pop	r30
    47d4:	bf 91       	pop	r27
    47d6:	af 91       	pop	r26
    47d8:	9f 91       	pop	r25
    47da:	8f 91       	pop	r24
    47dc:	7f 91       	pop	r23
    47de:	6f 91       	pop	r22
    47e0:	5f 91       	pop	r21
    47e2:	4f 91       	pop	r20
    47e4:	3f 91       	pop	r19
    47e6:	2f 91       	pop	r18
    47e8:	1f 91       	pop	r17
    47ea:	0f 91       	pop	r16
    47ec:	ff 90       	pop	r15
    47ee:	ef 90       	pop	r14
    47f0:	df 90       	pop	r13
    47f2:	cf 90       	pop	r12
    47f4:	0f 90       	pop	r0
    47f6:	0f be       	out	0x3f, r0	; 63
    47f8:	0f 90       	pop	r0
    47fa:	1f 90       	pop	r1
    47fc:	18 95       	reti

000047fe <_Z9USB_Flushh>:
    47fe:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    4802:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    4806:	88 23       	and	r24, r24
    4808:	19 f0       	breq	.+6      	; 0x4810 <_Z9USB_Flushh+0x12>
    480a:	8a e3       	ldi	r24, 0x3A	; 58
    480c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    4810:	08 95       	ret

00004812 <__vector_10>:
    4812:	1f 92       	push	r1
    4814:	0f 92       	push	r0
    4816:	0f b6       	in	r0, 0x3f	; 63
    4818:	0f 92       	push	r0
    481a:	11 24       	eor	r1, r1
    481c:	2f 93       	push	r18
    481e:	3f 93       	push	r19
    4820:	4f 93       	push	r20
    4822:	5f 93       	push	r21
    4824:	6f 93       	push	r22
    4826:	7f 93       	push	r23
    4828:	8f 93       	push	r24
    482a:	9f 93       	push	r25
    482c:	af 93       	push	r26
    482e:	bf 93       	push	r27
    4830:	cf 93       	push	r28
    4832:	ef 93       	push	r30
    4834:	ff 93       	push	r31
    4836:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    483a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    483e:	83 7f       	andi	r24, 0xF3	; 243
    4840:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    4844:	c3 ff       	sbrs	r28, 3
    4846:	0f c0       	rjmp	.+30     	; 0x4866 <__vector_10+0x54>
    4848:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    484c:	81 e0       	ldi	r24, 0x01	; 1
    484e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    4852:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    4856:	82 e3       	ldi	r24, 0x32	; 50
    4858:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    485c:	10 92 ba 06 	sts	0x06BA, r1	; 0x8006ba <_usbConfiguration>
    4860:	88 e0       	ldi	r24, 0x08	; 8
    4862:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    4866:	c2 ff       	sbrs	r28, 2
    4868:	19 c0       	rjmp	.+50     	; 0x489c <__vector_10+0x8a>
    486a:	83 e0       	ldi	r24, 0x03	; 3
    486c:	0e 94 ff 23 	call	0x47fe	; 0x47fe <_Z9USB_Flushh>
    4870:	80 91 bc 06 	lds	r24, 0x06BC	; 0x8006bc <TxLEDPulse>
    4874:	88 23       	and	r24, r24
    4876:	39 f0       	breq	.+14     	; 0x4886 <__vector_10+0x74>
    4878:	80 91 bc 06 	lds	r24, 0x06BC	; 0x8006bc <TxLEDPulse>
    487c:	81 50       	subi	r24, 0x01	; 1
    487e:	80 93 bc 06 	sts	0x06BC, r24	; 0x8006bc <TxLEDPulse>
    4882:	88 23       	and	r24, r24
    4884:	89 f1       	breq	.+98     	; 0x48e8 <__vector_10+0xd6>
    4886:	80 91 bb 06 	lds	r24, 0x06BB	; 0x8006bb <RxLEDPulse>
    488a:	88 23       	and	r24, r24
    488c:	39 f0       	breq	.+14     	; 0x489c <__vector_10+0x8a>
    488e:	80 91 bb 06 	lds	r24, 0x06BB	; 0x8006bb <RxLEDPulse>
    4892:	81 50       	subi	r24, 0x01	; 1
    4894:	80 93 bb 06 	sts	0x06BB, r24	; 0x8006bb <RxLEDPulse>
    4898:	88 23       	and	r24, r24
    489a:	41 f1       	breq	.+80     	; 0x48ec <__vector_10+0xda>
    489c:	c4 ff       	sbrs	r28, 4
    489e:	10 c0       	rjmp	.+32     	; 0x48c0 <__vector_10+0xae>
    48a0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    48a4:	8e 7e       	andi	r24, 0xEE	; 238
    48a6:	81 60       	ori	r24, 0x01	; 1
    48a8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    48ac:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    48b0:	8f 7e       	andi	r24, 0xEF	; 239
    48b2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    48b6:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <_usbSuspendState>
    48ba:	8e 7e       	andi	r24, 0xEE	; 238
    48bc:	80 61       	ori	r24, 0x10	; 16
    48be:	11 c0       	rjmp	.+34     	; 0x48e2 <__vector_10+0xd0>
    48c0:	c0 ff       	sbrs	r28, 0
    48c2:	16 c0       	rjmp	.+44     	; 0x48f0 <__vector_10+0xde>
    48c4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    48c8:	8e 7e       	andi	r24, 0xEE	; 238
    48ca:	80 61       	ori	r24, 0x10	; 16
    48cc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    48d0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    48d4:	8e 7e       	andi	r24, 0xEE	; 238
    48d6:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    48da:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <_usbSuspendState>
    48de:	8e 7e       	andi	r24, 0xEE	; 238
    48e0:	81 60       	ori	r24, 0x01	; 1
    48e2:	80 93 b8 06 	sts	0x06B8, r24	; 0x8006b8 <_usbSuspendState>
    48e6:	04 c0       	rjmp	.+8      	; 0x48f0 <__vector_10+0xde>
    48e8:	5d 9a       	sbi	0x0b, 5	; 11
    48ea:	cd cf       	rjmp	.-102    	; 0x4886 <__vector_10+0x74>
    48ec:	28 9a       	sbi	0x05, 0	; 5
    48ee:	d6 cf       	rjmp	.-84     	; 0x489c <__vector_10+0x8a>
    48f0:	ff 91       	pop	r31
    48f2:	ef 91       	pop	r30
    48f4:	cf 91       	pop	r28
    48f6:	bf 91       	pop	r27
    48f8:	af 91       	pop	r26
    48fa:	9f 91       	pop	r25
    48fc:	8f 91       	pop	r24
    48fe:	7f 91       	pop	r23
    4900:	6f 91       	pop	r22
    4902:	5f 91       	pop	r21
    4904:	4f 91       	pop	r20
    4906:	3f 91       	pop	r19
    4908:	2f 91       	pop	r18
    490a:	0f 90       	pop	r0
    490c:	0f be       	out	0x3f, r0	; 63
    490e:	0f 90       	pop	r0
    4910:	1f 90       	pop	r1
    4912:	18 95       	reti

00004914 <_ZN10USBDevice_6attachEv>:
{
}

void USBDevice_::attach()
{
	_usbConfiguration = 0;
    4914:	10 92 ba 06 	sts	0x06BA, r1	; 0x8006ba <_usbConfiguration>
	_usbCurrentStatus = 0;
    4918:	10 92 b9 06 	sts	0x06B9, r1	; 0x8006b9 <_usbCurrentStatus>
	_usbSuspendState = 0;
    491c:	10 92 b8 06 	sts	0x06B8, r1	; 0x8006b8 <_usbSuspendState>
	USB_ClockEnable();
    4920:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <_ZL15USB_ClockEnablev>

	UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear already pending WAKEUP / SUSPEND requests
    4924:	e1 ee       	ldi	r30, 0xE1	; 225
    4926:	f0 e0       	ldi	r31, 0x00	; 0
    4928:	80 81       	ld	r24, Z
    492a:	8e 7e       	andi	r24, 0xEE	; 238
    492c:	80 83       	st	Z, r24
	UDIEN = (1<<EORSTE) | (1<<SOFE) | (1<<SUSPE);	// Enable interrupts for EOR (End of Reset), SOF (start of frame) and SUSPEND
    492e:	8d e0       	ldi	r24, 0x0D	; 13
    4930:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	
	TX_RX_LED_INIT;
    4934:	55 9a       	sbi	0x0a, 5	; 10
    4936:	20 9a       	sbi	0x04, 0	; 4
    4938:	08 95       	ret

0000493a <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    493a:	08 95       	ret

0000493c <attachInterrupt>:
    493c:	85 30       	cpi	r24, 0x05	; 5
    493e:	08 f0       	brcs	.+2      	; 0x4942 <attachInterrupt+0x6>
    4940:	4c c0       	rjmp	.+152    	; 0x49da <attachInterrupt+0x9e>
    4942:	e8 2f       	mov	r30, r24
    4944:	f0 e0       	ldi	r31, 0x00	; 0
    4946:	ee 0f       	add	r30, r30
    4948:	ff 1f       	adc	r31, r31
    494a:	e5 5d       	subi	r30, 0xD5	; 213
    494c:	fe 4f       	sbci	r31, 0xFE	; 254
    494e:	71 83       	std	Z+1, r23	; 0x01
    4950:	60 83       	st	Z, r22
    4952:	82 30       	cpi	r24, 0x02	; 2
    4954:	e1 f0       	breq	.+56     	; 0x498e <attachInterrupt+0x52>
    4956:	18 f4       	brcc	.+6      	; 0x495e <attachInterrupt+0x22>
    4958:	81 30       	cpi	r24, 0x01	; 1
    495a:	69 f0       	breq	.+26     	; 0x4976 <attachInterrupt+0x3a>
    495c:	04 c0       	rjmp	.+8      	; 0x4966 <attachInterrupt+0x2a>
    495e:	83 30       	cpi	r24, 0x03	; 3
    4960:	19 f1       	breq	.+70     	; 0x49a8 <attachInterrupt+0x6c>
    4962:	84 30       	cpi	r24, 0x04	; 4
    4964:	71 f1       	breq	.+92     	; 0x49c2 <attachInterrupt+0x86>
    4966:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    496a:	8c 7f       	andi	r24, 0xFC	; 252
    496c:	48 2b       	or	r20, r24
    496e:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    4972:	e8 9a       	sbi	0x1d, 0	; 29
    4974:	08 95       	ret
    4976:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    497a:	83 7f       	andi	r24, 0xF3	; 243
    497c:	44 0f       	add	r20, r20
    497e:	55 1f       	adc	r21, r21
    4980:	44 0f       	add	r20, r20
    4982:	55 1f       	adc	r21, r21
    4984:	48 2b       	or	r20, r24
    4986:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    498a:	e9 9a       	sbi	0x1d, 1	; 29
    498c:	08 95       	ret
    498e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    4992:	8f 7c       	andi	r24, 0xCF	; 207
    4994:	34 e0       	ldi	r19, 0x04	; 4
    4996:	44 0f       	add	r20, r20
    4998:	55 1f       	adc	r21, r21
    499a:	3a 95       	dec	r19
    499c:	e1 f7       	brne	.-8      	; 0x4996 <attachInterrupt+0x5a>
    499e:	48 2b       	or	r20, r24
    49a0:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    49a4:	ea 9a       	sbi	0x1d, 2	; 29
    49a6:	08 95       	ret
    49a8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    49ac:	8f 73       	andi	r24, 0x3F	; 63
    49ae:	26 e0       	ldi	r18, 0x06	; 6
    49b0:	44 0f       	add	r20, r20
    49b2:	55 1f       	adc	r21, r21
    49b4:	2a 95       	dec	r18
    49b6:	e1 f7       	brne	.-8      	; 0x49b0 <attachInterrupt+0x74>
    49b8:	48 2b       	or	r20, r24
    49ba:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    49be:	eb 9a       	sbi	0x1d, 3	; 29
    49c0:	08 95       	ret
    49c2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
    49c6:	8f 7c       	andi	r24, 0xCF	; 207
    49c8:	94 e0       	ldi	r25, 0x04	; 4
    49ca:	44 0f       	add	r20, r20
    49cc:	55 1f       	adc	r21, r21
    49ce:	9a 95       	dec	r25
    49d0:	e1 f7       	brne	.-8      	; 0x49ca <attachInterrupt+0x8e>
    49d2:	48 2b       	or	r20, r24
    49d4:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
    49d8:	ee 9a       	sbi	0x1d, 6	; 29
    49da:	08 95       	ret

000049dc <__vector_1>:
    intFunc[interrupt](); \
  }

#if defined(__AVR_ATmega32U4__)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    49dc:	1f 92       	push	r1
    49de:	0f 92       	push	r0
    49e0:	0f b6       	in	r0, 0x3f	; 63
    49e2:	0f 92       	push	r0
    49e4:	11 24       	eor	r1, r1
    49e6:	2f 93       	push	r18
    49e8:	3f 93       	push	r19
    49ea:	4f 93       	push	r20
    49ec:	5f 93       	push	r21
    49ee:	6f 93       	push	r22
    49f0:	7f 93       	push	r23
    49f2:	8f 93       	push	r24
    49f4:	9f 93       	push	r25
    49f6:	af 93       	push	r26
    49f8:	bf 93       	push	r27
    49fa:	ef 93       	push	r30
    49fc:	ff 93       	push	r31
    49fe:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <intFunc>
    4a02:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <intFunc+0x1>
    4a06:	09 95       	icall
    4a08:	ff 91       	pop	r31
    4a0a:	ef 91       	pop	r30
    4a0c:	bf 91       	pop	r27
    4a0e:	af 91       	pop	r26
    4a10:	9f 91       	pop	r25
    4a12:	8f 91       	pop	r24
    4a14:	7f 91       	pop	r23
    4a16:	6f 91       	pop	r22
    4a18:	5f 91       	pop	r21
    4a1a:	4f 91       	pop	r20
    4a1c:	3f 91       	pop	r19
    4a1e:	2f 91       	pop	r18
    4a20:	0f 90       	pop	r0
    4a22:	0f be       	out	0x3f, r0	; 63
    4a24:	0f 90       	pop	r0
    4a26:	1f 90       	pop	r1
    4a28:	18 95       	reti

00004a2a <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    4a2a:	1f 92       	push	r1
    4a2c:	0f 92       	push	r0
    4a2e:	0f b6       	in	r0, 0x3f	; 63
    4a30:	0f 92       	push	r0
    4a32:	11 24       	eor	r1, r1
    4a34:	2f 93       	push	r18
    4a36:	3f 93       	push	r19
    4a38:	4f 93       	push	r20
    4a3a:	5f 93       	push	r21
    4a3c:	6f 93       	push	r22
    4a3e:	7f 93       	push	r23
    4a40:	8f 93       	push	r24
    4a42:	9f 93       	push	r25
    4a44:	af 93       	push	r26
    4a46:	bf 93       	push	r27
    4a48:	ef 93       	push	r30
    4a4a:	ff 93       	push	r31
    4a4c:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <intFunc+0x2>
    4a50:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <intFunc+0x3>
    4a54:	09 95       	icall
    4a56:	ff 91       	pop	r31
    4a58:	ef 91       	pop	r30
    4a5a:	bf 91       	pop	r27
    4a5c:	af 91       	pop	r26
    4a5e:	9f 91       	pop	r25
    4a60:	8f 91       	pop	r24
    4a62:	7f 91       	pop	r23
    4a64:	6f 91       	pop	r22
    4a66:	5f 91       	pop	r21
    4a68:	4f 91       	pop	r20
    4a6a:	3f 91       	pop	r19
    4a6c:	2f 91       	pop	r18
    4a6e:	0f 90       	pop	r0
    4a70:	0f be       	out	0x3f, r0	; 63
    4a72:	0f 90       	pop	r0
    4a74:	1f 90       	pop	r1
    4a76:	18 95       	reti

00004a78 <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_2)
    4a78:	1f 92       	push	r1
    4a7a:	0f 92       	push	r0
    4a7c:	0f b6       	in	r0, 0x3f	; 63
    4a7e:	0f 92       	push	r0
    4a80:	11 24       	eor	r1, r1
    4a82:	2f 93       	push	r18
    4a84:	3f 93       	push	r19
    4a86:	4f 93       	push	r20
    4a88:	5f 93       	push	r21
    4a8a:	6f 93       	push	r22
    4a8c:	7f 93       	push	r23
    4a8e:	8f 93       	push	r24
    4a90:	9f 93       	push	r25
    4a92:	af 93       	push	r26
    4a94:	bf 93       	push	r27
    4a96:	ef 93       	push	r30
    4a98:	ff 93       	push	r31
    4a9a:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <intFunc+0x4>
    4a9e:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <intFunc+0x5>
    4aa2:	09 95       	icall
    4aa4:	ff 91       	pop	r31
    4aa6:	ef 91       	pop	r30
    4aa8:	bf 91       	pop	r27
    4aaa:	af 91       	pop	r26
    4aac:	9f 91       	pop	r25
    4aae:	8f 91       	pop	r24
    4ab0:	7f 91       	pop	r23
    4ab2:	6f 91       	pop	r22
    4ab4:	5f 91       	pop	r21
    4ab6:	4f 91       	pop	r20
    4ab8:	3f 91       	pop	r19
    4aba:	2f 91       	pop	r18
    4abc:	0f 90       	pop	r0
    4abe:	0f be       	out	0x3f, r0	; 63
    4ac0:	0f 90       	pop	r0
    4ac2:	1f 90       	pop	r1
    4ac4:	18 95       	reti

00004ac6 <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
    4ac6:	1f 92       	push	r1
    4ac8:	0f 92       	push	r0
    4aca:	0f b6       	in	r0, 0x3f	; 63
    4acc:	0f 92       	push	r0
    4ace:	11 24       	eor	r1, r1
    4ad0:	2f 93       	push	r18
    4ad2:	3f 93       	push	r19
    4ad4:	4f 93       	push	r20
    4ad6:	5f 93       	push	r21
    4ad8:	6f 93       	push	r22
    4ada:	7f 93       	push	r23
    4adc:	8f 93       	push	r24
    4ade:	9f 93       	push	r25
    4ae0:	af 93       	push	r26
    4ae2:	bf 93       	push	r27
    4ae4:	ef 93       	push	r30
    4ae6:	ff 93       	push	r31
    4ae8:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <intFunc+0x6>
    4aec:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <intFunc+0x7>
    4af0:	09 95       	icall
    4af2:	ff 91       	pop	r31
    4af4:	ef 91       	pop	r30
    4af6:	bf 91       	pop	r27
    4af8:	af 91       	pop	r26
    4afa:	9f 91       	pop	r25
    4afc:	8f 91       	pop	r24
    4afe:	7f 91       	pop	r23
    4b00:	6f 91       	pop	r22
    4b02:	5f 91       	pop	r21
    4b04:	4f 91       	pop	r20
    4b06:	3f 91       	pop	r19
    4b08:	2f 91       	pop	r18
    4b0a:	0f 90       	pop	r0
    4b0c:	0f be       	out	0x3f, r0	; 63
    4b0e:	0f 90       	pop	r0
    4b10:	1f 90       	pop	r1
    4b12:	18 95       	reti

00004b14 <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_4)
    4b14:	1f 92       	push	r1
    4b16:	0f 92       	push	r0
    4b18:	0f b6       	in	r0, 0x3f	; 63
    4b1a:	0f 92       	push	r0
    4b1c:	11 24       	eor	r1, r1
    4b1e:	2f 93       	push	r18
    4b20:	3f 93       	push	r19
    4b22:	4f 93       	push	r20
    4b24:	5f 93       	push	r21
    4b26:	6f 93       	push	r22
    4b28:	7f 93       	push	r23
    4b2a:	8f 93       	push	r24
    4b2c:	9f 93       	push	r25
    4b2e:	af 93       	push	r26
    4b30:	bf 93       	push	r27
    4b32:	ef 93       	push	r30
    4b34:	ff 93       	push	r31
    4b36:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <intFunc+0x8>
    4b3a:	f0 91 34 01 	lds	r31, 0x0134	; 0x800134 <intFunc+0x9>
    4b3e:	09 95       	icall
    4b40:	ff 91       	pop	r31
    4b42:	ef 91       	pop	r30
    4b44:	bf 91       	pop	r27
    4b46:	af 91       	pop	r26
    4b48:	9f 91       	pop	r25
    4b4a:	8f 91       	pop	r24
    4b4c:	7f 91       	pop	r23
    4b4e:	6f 91       	pop	r22
    4b50:	5f 91       	pop	r21
    4b52:	4f 91       	pop	r20
    4b54:	3f 91       	pop	r19
    4b56:	2f 91       	pop	r18
    4b58:	0f 90       	pop	r0
    4b5a:	0f be       	out	0x3f, r0	; 63
    4b5c:	0f 90       	pop	r0
    4b5e:	1f 90       	pop	r1
    4b60:	18 95       	reti

00004b62 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    4b62:	1f 92       	push	r1
    4b64:	0f 92       	push	r0
    4b66:	0f b6       	in	r0, 0x3f	; 63
    4b68:	0f 92       	push	r0
    4b6a:	11 24       	eor	r1, r1
    4b6c:	2f 93       	push	r18
    4b6e:	3f 93       	push	r19
    4b70:	8f 93       	push	r24
    4b72:	9f 93       	push	r25
    4b74:	af 93       	push	r26
    4b76:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    4b78:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <timer0_millis>
    4b7c:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <timer0_millis+0x1>
    4b80:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <timer0_millis+0x2>
    4b84:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    4b88:	30 91 bd 06 	lds	r19, 0x06BD	; 0x8006bd <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    4b8c:	23 e0       	ldi	r18, 0x03	; 3
    4b8e:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    4b90:	2d 37       	cpi	r18, 0x7D	; 125
    4b92:	20 f4       	brcc	.+8      	; 0x4b9c <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    4b94:	01 96       	adiw	r24, 0x01	; 1
    4b96:	a1 1d       	adc	r26, r1
    4b98:	b1 1d       	adc	r27, r1
    4b9a:	05 c0       	rjmp	.+10     	; 0x4ba6 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    4b9c:	26 e8       	ldi	r18, 0x86	; 134
    4b9e:	23 0f       	add	r18, r19
		m += 1;
    4ba0:	02 96       	adiw	r24, 0x02	; 2
    4ba2:	a1 1d       	adc	r26, r1
    4ba4:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    4ba6:	20 93 bd 06 	sts	0x06BD, r18	; 0x8006bd <timer0_fract>
	timer0_millis = m;
    4baa:	80 93 be 06 	sts	0x06BE, r24	; 0x8006be <timer0_millis>
    4bae:	90 93 bf 06 	sts	0x06BF, r25	; 0x8006bf <timer0_millis+0x1>
    4bb2:	a0 93 c0 06 	sts	0x06C0, r26	; 0x8006c0 <timer0_millis+0x2>
    4bb6:	b0 93 c1 06 	sts	0x06C1, r27	; 0x8006c1 <timer0_millis+0x3>
	timer0_overflow_count++;
    4bba:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <timer0_overflow_count>
    4bbe:	90 91 c3 06 	lds	r25, 0x06C3	; 0x8006c3 <timer0_overflow_count+0x1>
    4bc2:	a0 91 c4 06 	lds	r26, 0x06C4	; 0x8006c4 <timer0_overflow_count+0x2>
    4bc6:	b0 91 c5 06 	lds	r27, 0x06C5	; 0x8006c5 <timer0_overflow_count+0x3>
    4bca:	01 96       	adiw	r24, 0x01	; 1
    4bcc:	a1 1d       	adc	r26, r1
    4bce:	b1 1d       	adc	r27, r1
    4bd0:	80 93 c2 06 	sts	0x06C2, r24	; 0x8006c2 <timer0_overflow_count>
    4bd4:	90 93 c3 06 	sts	0x06C3, r25	; 0x8006c3 <timer0_overflow_count+0x1>
    4bd8:	a0 93 c4 06 	sts	0x06C4, r26	; 0x8006c4 <timer0_overflow_count+0x2>
    4bdc:	b0 93 c5 06 	sts	0x06C5, r27	; 0x8006c5 <timer0_overflow_count+0x3>
}
    4be0:	bf 91       	pop	r27
    4be2:	af 91       	pop	r26
    4be4:	9f 91       	pop	r25
    4be6:	8f 91       	pop	r24
    4be8:	3f 91       	pop	r19
    4bea:	2f 91       	pop	r18
    4bec:	0f 90       	pop	r0
    4bee:	0f be       	out	0x3f, r0	; 63
    4bf0:	0f 90       	pop	r0
    4bf2:	1f 90       	pop	r1
    4bf4:	18 95       	reti

00004bf6 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    4bf6:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    4bf8:	f8 94       	cli
	m = timer0_millis;
    4bfa:	60 91 be 06 	lds	r22, 0x06BE	; 0x8006be <timer0_millis>
    4bfe:	70 91 bf 06 	lds	r23, 0x06BF	; 0x8006bf <timer0_millis+0x1>
    4c02:	80 91 c0 06 	lds	r24, 0x06C0	; 0x8006c0 <timer0_millis+0x2>
    4c06:	90 91 c1 06 	lds	r25, 0x06C1	; 0x8006c1 <timer0_millis+0x3>
	SREG = oldSREG;
    4c0a:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    4c0c:	08 95       	ret

00004c0e <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    4c0e:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    4c10:	f8 94       	cli
	m = timer0_overflow_count;
    4c12:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <timer0_overflow_count>
    4c16:	90 91 c3 06 	lds	r25, 0x06C3	; 0x8006c3 <timer0_overflow_count+0x1>
    4c1a:	a0 91 c4 06 	lds	r26, 0x06C4	; 0x8006c4 <timer0_overflow_count+0x2>
    4c1e:	b0 91 c5 06 	lds	r27, 0x06C5	; 0x8006c5 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    4c22:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    4c24:	a8 9b       	sbis	0x15, 0	; 21
    4c26:	05 c0       	rjmp	.+10     	; 0x4c32 <micros+0x24>
    4c28:	2f 3f       	cpi	r18, 0xFF	; 255
    4c2a:	19 f0       	breq	.+6      	; 0x4c32 <micros+0x24>
		m++;
    4c2c:	01 96       	adiw	r24, 0x01	; 1
    4c2e:	a1 1d       	adc	r26, r1
    4c30:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    4c32:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    4c34:	ba 2f       	mov	r27, r26
    4c36:	a9 2f       	mov	r26, r25
    4c38:	98 2f       	mov	r25, r24
    4c3a:	88 27       	eor	r24, r24
    4c3c:	82 0f       	add	r24, r18
    4c3e:	91 1d       	adc	r25, r1
    4c40:	a1 1d       	adc	r26, r1
    4c42:	b1 1d       	adc	r27, r1
    4c44:	bc 01       	movw	r22, r24
    4c46:	cd 01       	movw	r24, r26
    4c48:	42 e0       	ldi	r20, 0x02	; 2
    4c4a:	66 0f       	add	r22, r22
    4c4c:	77 1f       	adc	r23, r23
    4c4e:	88 1f       	adc	r24, r24
    4c50:	99 1f       	adc	r25, r25
    4c52:	4a 95       	dec	r20
    4c54:	d1 f7       	brne	.-12     	; 0x4c4a <micros+0x3c>
}
    4c56:	08 95       	ret

00004c58 <delay>:

void delay(unsigned long ms)
{
    4c58:	8f 92       	push	r8
    4c5a:	9f 92       	push	r9
    4c5c:	af 92       	push	r10
    4c5e:	bf 92       	push	r11
    4c60:	cf 92       	push	r12
    4c62:	df 92       	push	r13
    4c64:	ef 92       	push	r14
    4c66:	ff 92       	push	r15
    4c68:	6b 01       	movw	r12, r22
    4c6a:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    4c6c:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <micros>
    4c70:	4b 01       	movw	r8, r22
    4c72:	5c 01       	movw	r10, r24

	while (ms > 0) {
    4c74:	c1 14       	cp	r12, r1
    4c76:	d1 04       	cpc	r13, r1
    4c78:	e1 04       	cpc	r14, r1
    4c7a:	f1 04       	cpc	r15, r1
    4c7c:	01 f1       	breq	.+64     	; 0x4cbe <delay+0x66>
		yield();
    4c7e:	0e 94 e6 28 	call	0x51cc	; 0x51cc <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    4c82:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <micros>
    4c86:	dc 01       	movw	r26, r24
    4c88:	cb 01       	movw	r24, r22
    4c8a:	88 19       	sub	r24, r8
    4c8c:	99 09       	sbc	r25, r9
    4c8e:	aa 09       	sbc	r26, r10
    4c90:	bb 09       	sbc	r27, r11
    4c92:	88 3e       	cpi	r24, 0xE8	; 232
    4c94:	93 40       	sbci	r25, 0x03	; 3
    4c96:	a1 05       	cpc	r26, r1
    4c98:	b1 05       	cpc	r27, r1
    4c9a:	60 f3       	brcs	.-40     	; 0x4c74 <delay+0x1c>
			ms--;
    4c9c:	21 e0       	ldi	r18, 0x01	; 1
    4c9e:	c2 1a       	sub	r12, r18
    4ca0:	d1 08       	sbc	r13, r1
    4ca2:	e1 08       	sbc	r14, r1
    4ca4:	f1 08       	sbc	r15, r1
			start += 1000;
    4ca6:	88 ee       	ldi	r24, 0xE8	; 232
    4ca8:	88 0e       	add	r8, r24
    4caa:	83 e0       	ldi	r24, 0x03	; 3
    4cac:	98 1e       	adc	r9, r24
    4cae:	a1 1c       	adc	r10, r1
    4cb0:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    4cb2:	c1 14       	cp	r12, r1
    4cb4:	d1 04       	cpc	r13, r1
    4cb6:	e1 04       	cpc	r14, r1
    4cb8:	f1 04       	cpc	r15, r1
    4cba:	19 f7       	brne	.-58     	; 0x4c82 <delay+0x2a>
    4cbc:	db cf       	rjmp	.-74     	; 0x4c74 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    4cbe:	ff 90       	pop	r15
    4cc0:	ef 90       	pop	r14
    4cc2:	df 90       	pop	r13
    4cc4:	cf 90       	pop	r12
    4cc6:	bf 90       	pop	r11
    4cc8:	af 90       	pop	r10
    4cca:	9f 90       	pop	r9
    4ccc:	8f 90       	pop	r8
    4cce:	08 95       	ret

00004cd0 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    4cd0:	82 30       	cpi	r24, 0x02	; 2
    4cd2:	91 05       	cpc	r25, r1
    4cd4:	38 f0       	brcs	.+14     	; 0x4ce4 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    4cd6:	88 0f       	add	r24, r24
    4cd8:	99 1f       	adc	r25, r25
    4cda:	88 0f       	add	r24, r24
    4cdc:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    4cde:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    4ce0:	01 97       	sbiw	r24, 0x01	; 1
    4ce2:	f1 f7       	brne	.-4      	; 0x4ce0 <delayMicroseconds+0x10>
    4ce4:	08 95       	ret

00004ce6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    4ce6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    4ce8:	84 b5       	in	r24, 0x24	; 36
    4cea:	82 60       	ori	r24, 0x02	; 2
    4cec:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    4cee:	84 b5       	in	r24, 0x24	; 36
    4cf0:	81 60       	ori	r24, 0x01	; 1
    4cf2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    4cf4:	85 b5       	in	r24, 0x25	; 37
    4cf6:	82 60       	ori	r24, 0x02	; 2
    4cf8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    4cfa:	85 b5       	in	r24, 0x25	; 37
    4cfc:	81 60       	ori	r24, 0x01	; 1
    4cfe:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    4d00:	ee e6       	ldi	r30, 0x6E	; 110
    4d02:	f0 e0       	ldi	r31, 0x00	; 0
    4d04:	80 81       	ld	r24, Z
    4d06:	81 60       	ori	r24, 0x01	; 1
    4d08:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    4d0a:	e1 e8       	ldi	r30, 0x81	; 129
    4d0c:	f0 e0       	ldi	r31, 0x00	; 0
    4d0e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    4d10:	80 81       	ld	r24, Z
    4d12:	82 60       	ori	r24, 0x02	; 2
    4d14:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    4d16:	80 81       	ld	r24, Z
    4d18:	81 60       	ori	r24, 0x01	; 1
    4d1a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    4d1c:	e0 e8       	ldi	r30, 0x80	; 128
    4d1e:	f0 e0       	ldi	r31, 0x00	; 0
    4d20:	80 81       	ld	r24, Z
    4d22:	81 60       	ori	r24, 0x01	; 1
    4d24:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    4d26:	e1 e9       	ldi	r30, 0x91	; 145
    4d28:	f0 e0       	ldi	r31, 0x00	; 0
    4d2a:	80 81       	ld	r24, Z
    4d2c:	82 60       	ori	r24, 0x02	; 2
    4d2e:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    4d30:	80 81       	ld	r24, Z
    4d32:	81 60       	ori	r24, 0x01	; 1
    4d34:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    4d36:	e0 e9       	ldi	r30, 0x90	; 144
    4d38:	f0 e0       	ldi	r31, 0x00	; 0
    4d3a:	80 81       	ld	r24, Z
    4d3c:	81 60       	ori	r24, 0x01	; 1
    4d3e:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
    4d40:	e1 ec       	ldi	r30, 0xC1	; 193
    4d42:	f0 e0       	ldi	r31, 0x00	; 0
    4d44:	80 81       	ld	r24, Z
    4d46:	84 60       	ori	r24, 0x04	; 4
    4d48:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
    4d4a:	80 81       	ld	r24, Z
    4d4c:	82 60       	ori	r24, 0x02	; 2
    4d4e:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    4d50:	80 81       	ld	r24, Z
    4d52:	81 60       	ori	r24, 0x01	; 1
    4d54:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
    4d56:	e3 ec       	ldi	r30, 0xC3	; 195
    4d58:	f0 e0       	ldi	r31, 0x00	; 0
    4d5a:	80 81       	ld	r24, Z
    4d5c:	81 60       	ori	r24, 0x01	; 1
    4d5e:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
    4d60:	e0 ec       	ldi	r30, 0xC0	; 192
    4d62:	f0 e0       	ldi	r31, 0x00	; 0
    4d64:	80 81       	ld	r24, Z
    4d66:	82 60       	ori	r24, 0x02	; 2
    4d68:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
    4d6a:	e2 ec       	ldi	r30, 0xC2	; 194
    4d6c:	f0 e0       	ldi	r31, 0x00	; 0
    4d6e:	80 81       	ld	r24, Z
    4d70:	81 60       	ori	r24, 0x01	; 1
    4d72:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    4d74:	ea e7       	ldi	r30, 0x7A	; 122
    4d76:	f0 e0       	ldi	r31, 0x00	; 0
    4d78:	80 81       	ld	r24, Z
    4d7a:	84 60       	ori	r24, 0x04	; 4
    4d7c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    4d7e:	80 81       	ld	r24, Z
    4d80:	82 60       	ori	r24, 0x02	; 2
    4d82:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    4d84:	80 81       	ld	r24, Z
    4d86:	81 60       	ori	r24, 0x01	; 1
    4d88:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    4d8a:	80 81       	ld	r24, Z
    4d8c:	80 68       	ori	r24, 0x80	; 128
    4d8e:	80 83       	st	Z, r24
    4d90:	08 95       	ret

00004d92 <analogRead>:
{
	uint8_t low, high;

#if defined(analogPinToChannel)
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
    4d92:	82 31       	cpi	r24, 0x12	; 18
    4d94:	08 f0       	brcs	.+2      	; 0x4d98 <analogRead+0x6>
    4d96:	82 51       	subi	r24, 0x12	; 18
#endif
	pin = analogPinToChannel(pin);
    4d98:	e8 2f       	mov	r30, r24
    4d9a:	f0 e0       	ldi	r31, 0x00	; 0
    4d9c:	e3 5a       	subi	r30, 0xA3	; 163
    4d9e:	fe 4f       	sbci	r31, 0xFE	; 254
    4da0:	e4 91       	lpm	r30, Z
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    4da2:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    4da6:	e3 fb       	bst	r30, 3
    4da8:	22 27       	eor	r18, r18
    4daa:	20 f9       	bld	r18, 0
    4dac:	30 e0       	ldi	r19, 0x00	; 0
    4dae:	95 e0       	ldi	r25, 0x05	; 5
    4db0:	22 0f       	add	r18, r18
    4db2:	33 1f       	adc	r19, r19
    4db4:	9a 95       	dec	r25
    4db6:	e1 f7       	brne	.-8      	; 0x4db0 <analogRead+0x1e>
    4db8:	8f 7d       	andi	r24, 0xDF	; 223
    4dba:	28 2b       	or	r18, r24
    4dbc:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    4dc0:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <analog_reference>
    4dc4:	20 e4       	ldi	r18, 0x40	; 64
    4dc6:	82 9f       	mul	r24, r18
    4dc8:	c0 01       	movw	r24, r0
    4dca:	11 24       	eor	r1, r1
    4dcc:	e7 70       	andi	r30, 0x07	; 7
    4dce:	e8 2b       	or	r30, r24
    4dd0:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    4dd4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    4dd8:	80 64       	ori	r24, 0x40	; 64
    4dda:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    4dde:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    4de2:	86 fd       	sbrc	r24, 6
    4de4:	fc cf       	rjmp	.-8      	; 0x4dde <analogRead+0x4c>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    4de6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    4dea:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    4dee:	90 e0       	ldi	r25, 0x00	; 0
}
    4df0:	92 2b       	or	r25, r18
    4df2:	08 95       	ret

00004df4 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    4df4:	1f 93       	push	r17
    4df6:	cf 93       	push	r28
    4df8:	df 93       	push	r29
    4dfa:	18 2f       	mov	r17, r24
    4dfc:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    4dfe:	61 e0       	ldi	r22, 0x01	; 1
    4e00:	0e 94 cf 27 	call	0x4f9e	; 0x4f9e <pinMode>
	if (val == 0)
    4e04:	20 97       	sbiw	r28, 0x00	; 0
    4e06:	11 f4       	brne	.+4      	; 0x4e0c <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    4e08:	60 e0       	ldi	r22, 0x00	; 0
    4e0a:	04 c0       	rjmp	.+8      	; 0x4e14 <analogWrite+0x20>
	}
	else if (val == 255)
    4e0c:	cf 3f       	cpi	r28, 0xFF	; 255
    4e0e:	d1 05       	cpc	r29, r1
    4e10:	39 f4       	brne	.+14     	; 0x4e20 <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    4e12:	61 e0       	ldi	r22, 0x01	; 1
    4e14:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    4e16:	df 91       	pop	r29
    4e18:	cf 91       	pop	r28
    4e1a:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    4e1c:	0c 94 0b 28 	jmp	0x5016	; 0x5016 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    4e20:	e1 2f       	mov	r30, r17
    4e22:	f0 e0       	ldi	r31, 0x00	; 0
    4e24:	e7 59       	subi	r30, 0x97	; 151
    4e26:	fe 4f       	sbci	r31, 0xFE	; 254
    4e28:	e4 91       	lpm	r30, Z
    4e2a:	8e 2f       	mov	r24, r30
    4e2c:	90 e0       	ldi	r25, 0x00	; 0
    4e2e:	fc 01       	movw	r30, r24
    4e30:	31 97       	sbiw	r30, 0x01	; 1
    4e32:	ef 30       	cpi	r30, 0x0F	; 15
    4e34:	f1 05       	cpc	r31, r1
    4e36:	08 f0       	brcs	.+2      	; 0x4e3a <analogWrite+0x46>
    4e38:	6c c0       	rjmp	.+216    	; 0x4f12 <analogWrite+0x11e>
    4e3a:	ea 5a       	subi	r30, 0xAA	; 170
    4e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e3e:	0c 94 da 29 	jmp	0x53b4	; 0x53b4 <__tablejump2__>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    4e42:	84 b5       	in	r24, 0x24	; 36
    4e44:	80 68       	ori	r24, 0x80	; 128
    4e46:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    4e48:	c7 bd       	out	0x27, r28	; 39
				break;
    4e4a:	68 c0       	rjmp	.+208    	; 0x4f1c <analogWrite+0x128>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    4e4c:	84 b5       	in	r24, 0x24	; 36
    4e4e:	80 62       	ori	r24, 0x20	; 32
    4e50:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    4e52:	c8 bd       	out	0x28, r28	; 40
				break;
    4e54:	63 c0       	rjmp	.+198    	; 0x4f1c <analogWrite+0x128>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    4e56:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4e5a:	80 68       	ori	r24, 0x80	; 128
    4e5c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1A = val; // set pwm duty
    4e60:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    4e64:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				break;
    4e68:	59 c0       	rjmp	.+178    	; 0x4f1c <analogWrite+0x128>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    4e6a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4e6e:	80 62       	ori	r24, 0x20	; 32
    4e70:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1B = val; // set pwm duty
    4e74:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    4e78:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				break;
    4e7c:	4f c0       	rjmp	.+158    	; 0x4f1c <analogWrite+0x128>
			#endif

			#if defined(TCCR1A) && defined(COM1C1)
			case TIMER1C:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1C1);
    4e7e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4e82:	88 60       	ori	r24, 0x08	; 8
    4e84:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1C = val; // set pwm duty
    4e88:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <__TEXT_REGION_LENGTH__+0x7e008d>
    4e8c:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
				break;
    4e90:	45 c0       	rjmp	.+138    	; 0x4f1c <analogWrite+0x128>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
    4e92:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    4e96:	80 68       	ori	r24, 0x80	; 128
    4e98:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
				OCR3A = val; // set pwm duty
    4e9c:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    4ea0:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
				break;
    4ea4:	3b c0       	rjmp	.+118    	; 0x4f1c <analogWrite+0x128>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
    4ea6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    4eaa:	80 62       	ori	r24, 0x20	; 32
    4eac:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
				OCR3B = val; // set pwm duty
    4eb0:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
    4eb4:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
				break;
    4eb8:	31 c0       	rjmp	.+98     	; 0x4f1c <analogWrite+0x128>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
    4eba:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    4ebe:	88 60       	ori	r24, 0x08	; 8
    4ec0:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
				OCR3C = val; // set pwm duty
    4ec4:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
    4ec8:	c0 93 9c 00 	sts	0x009C, r28	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
				break;
    4ecc:	27 c0       	rjmp	.+78     	; 0x4f1c <analogWrite+0x128>
			#endif

			#if defined(TCCR4A)
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
    4ece:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    4ed2:	80 68       	ori	r24, 0x80	; 128
    4ed4:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
				#if defined(COM4A0)		// only used on 32U4
				cbi(TCCR4A, COM4A0);
    4ed8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    4edc:	8f 7b       	andi	r24, 0xBF	; 191
    4ede:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
				#endif
				OCR4A = val;	// set pwm duty
    4ee2:	c0 93 cf 00 	sts	0x00CF, r28	; 0x8000cf <__TEXT_REGION_LENGTH__+0x7e00cf>
				break;
    4ee6:	1a c0       	rjmp	.+52     	; 0x4f1c <analogWrite+0x128>
			#endif
			
			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
    4ee8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    4eec:	80 62       	ori	r24, 0x20	; 32
    4eee:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
				OCR4B = val; // set pwm duty
    4ef2:	c0 93 d0 00 	sts	0x00D0, r28	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
				break;
    4ef6:	12 c0       	rjmp	.+36     	; 0x4f1c <analogWrite+0x128>
			#endif
				
			#if defined(TCCR4C) && defined(COM4D1)
			case TIMER4D:				
				// connect pwm to pin on timer 4, channel D
				sbi(TCCR4C, COM4D1);
    4ef8:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    4efc:	88 60       	ori	r24, 0x08	; 8
    4efe:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
				#if defined(COM4D0)		// only used on 32U4
				cbi(TCCR4C, COM4D0);
    4f02:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    4f06:	8b 7f       	andi	r24, 0xFB	; 251
    4f08:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
				#endif
				OCR4D = val;	// set pwm duty
    4f0c:	c0 93 d2 00 	sts	0x00D2, r28	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7e00d2>
				break;
    4f10:	05 c0       	rjmp	.+10     	; 0x4f1c <analogWrite+0x128>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    4f12:	c0 38       	cpi	r28, 0x80	; 128
    4f14:	d1 05       	cpc	r29, r1
    4f16:	0c f0       	brlt	.+2      	; 0x4f1a <analogWrite+0x126>
    4f18:	7c cf       	rjmp	.-264    	; 0x4e12 <analogWrite+0x1e>
    4f1a:	76 cf       	rjmp	.-276    	; 0x4e08 <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    4f1c:	df 91       	pop	r29
    4f1e:	cf 91       	pop	r28
    4f20:	1f 91       	pop	r17
    4f22:	08 95       	ret

00004f24 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    4f24:	90 e0       	ldi	r25, 0x00	; 0
    4f26:	fc 01       	movw	r30, r24
    4f28:	31 97       	sbiw	r30, 0x01	; 1
    4f2a:	ef 30       	cpi	r30, 0x0F	; 15
    4f2c:	f1 05       	cpc	r31, r1
    4f2e:	b0 f5       	brcc	.+108    	; 0x4f9c <turnOffPWM+0x78>
    4f30:	eb 59       	subi	r30, 0x9B	; 155
    4f32:	ff 4f       	sbci	r31, 0xFF	; 255
    4f34:	0c 94 da 29 	jmp	0x53b4	; 0x53b4 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    4f38:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4f3c:	8f 77       	andi	r24, 0x7F	; 127
    4f3e:	03 c0       	rjmp	.+6      	; 0x4f46 <turnOffPWM+0x22>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    4f40:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4f44:	8f 7d       	andi	r24, 0xDF	; 223
    4f46:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4f4a:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    4f4c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4f50:	87 7f       	andi	r24, 0xF7	; 247
    4f52:	f9 cf       	rjmp	.-14     	; 0x4f46 <turnOffPWM+0x22>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    4f54:	84 b5       	in	r24, 0x24	; 36
    4f56:	8f 77       	andi	r24, 0x7F	; 127
    4f58:	02 c0       	rjmp	.+4      	; 0x4f5e <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    4f5a:	84 b5       	in	r24, 0x24	; 36
    4f5c:	8f 7d       	andi	r24, 0xDF	; 223
    4f5e:	84 bd       	out	0x24, r24	; 36
    4f60:	08 95       	ret
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    4f62:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    4f66:	8f 77       	andi	r24, 0x7F	; 127
    4f68:	07 c0       	rjmp	.+14     	; 0x4f78 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    4f6a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    4f6e:	8f 7d       	andi	r24, 0xDF	; 223
    4f70:	03 c0       	rjmp	.+6      	; 0x4f78 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    4f72:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    4f76:	87 7f       	andi	r24, 0xF7	; 247
    4f78:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    4f7c:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    4f7e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    4f82:	8f 77       	andi	r24, 0x7F	; 127
    4f84:	03 c0       	rjmp	.+6      	; 0x4f8c <turnOffPWM+0x68>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    4f86:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    4f8a:	8f 7d       	andi	r24, 0xDF	; 223
    4f8c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    4f90:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
		#endif			
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
    4f92:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    4f96:	87 7f       	andi	r24, 0xF7	; 247
    4f98:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    4f9c:	08 95       	ret

00004f9e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    4f9e:	cf 93       	push	r28
    4fa0:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    4fa2:	90 e0       	ldi	r25, 0x00	; 0
    4fa4:	fc 01       	movw	r30, r24
    4fa6:	e8 57       	subi	r30, 0x78	; 120
    4fa8:	fe 4f       	sbci	r31, 0xFE	; 254
    4faa:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    4fac:	fc 01       	movw	r30, r24
    4fae:	e9 55       	subi	r30, 0x59	; 89
    4fb0:	fe 4f       	sbci	r31, 0xFE	; 254
    4fb2:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    4fb4:	88 23       	and	r24, r24
    4fb6:	61 f1       	breq	.+88     	; 0x5010 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    4fb8:	90 e0       	ldi	r25, 0x00	; 0
    4fba:	88 0f       	add	r24, r24
    4fbc:	99 1f       	adc	r25, r25
    4fbe:	fc 01       	movw	r30, r24
    4fc0:	ee 51       	subi	r30, 0x1E	; 30
    4fc2:	fe 4f       	sbci	r31, 0xFE	; 254
    4fc4:	c5 91       	lpm	r28, Z+
    4fc6:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    4fc8:	fc 01       	movw	r30, r24
    4fca:	ec 52       	subi	r30, 0x2C	; 44
    4fcc:	fe 4f       	sbci	r31, 0xFE	; 254
    4fce:	a5 91       	lpm	r26, Z+
    4fd0:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    4fd2:	61 11       	cpse	r22, r1
    4fd4:	09 c0       	rjmp	.+18     	; 0x4fe8 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    4fd6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4fd8:	f8 94       	cli
		*reg &= ~bit;
    4fda:	88 81       	ld	r24, Y
    4fdc:	20 95       	com	r18
    4fde:	82 23       	and	r24, r18
    4fe0:	88 83       	st	Y, r24
		*out &= ~bit;
    4fe2:	ec 91       	ld	r30, X
    4fe4:	2e 23       	and	r18, r30
    4fe6:	0b c0       	rjmp	.+22     	; 0x4ffe <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    4fe8:	62 30       	cpi	r22, 0x02	; 2
    4fea:	61 f4       	brne	.+24     	; 0x5004 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    4fec:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4fee:	f8 94       	cli
		*reg &= ~bit;
    4ff0:	88 81       	ld	r24, Y
    4ff2:	32 2f       	mov	r19, r18
    4ff4:	30 95       	com	r19
    4ff6:	83 23       	and	r24, r19
    4ff8:	88 83       	st	Y, r24
		*out |= bit;
    4ffa:	ec 91       	ld	r30, X
    4ffc:	2e 2b       	or	r18, r30
    4ffe:	2c 93       	st	X, r18
		SREG = oldSREG;
    5000:	9f bf       	out	0x3f, r25	; 63
    5002:	06 c0       	rjmp	.+12     	; 0x5010 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    5004:	8f b7       	in	r24, 0x3f	; 63
                cli();
    5006:	f8 94       	cli
		*reg |= bit;
    5008:	e8 81       	ld	r30, Y
    500a:	2e 2b       	or	r18, r30
    500c:	28 83       	st	Y, r18
		SREG = oldSREG;
    500e:	8f bf       	out	0x3f, r24	; 63
	}
}
    5010:	df 91       	pop	r29
    5012:	cf 91       	pop	r28
    5014:	08 95       	ret

00005016 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    5016:	1f 93       	push	r17
    5018:	cf 93       	push	r28
    501a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    501c:	28 2f       	mov	r18, r24
    501e:	30 e0       	ldi	r19, 0x00	; 0
    5020:	f9 01       	movw	r30, r18
    5022:	e7 59       	subi	r30, 0x97	; 151
    5024:	fe 4f       	sbci	r31, 0xFE	; 254
    5026:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    5028:	f9 01       	movw	r30, r18
    502a:	e8 57       	subi	r30, 0x78	; 120
    502c:	fe 4f       	sbci	r31, 0xFE	; 254
    502e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    5030:	f9 01       	movw	r30, r18
    5032:	e9 55       	subi	r30, 0x59	; 89
    5034:	fe 4f       	sbci	r31, 0xFE	; 254
    5036:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    5038:	cc 23       	and	r28, r28
    503a:	c1 f0       	breq	.+48     	; 0x506c <digitalWrite+0x56>
    503c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    503e:	81 11       	cpse	r24, r1
    5040:	0e 94 92 27 	call	0x4f24	; 0x4f24 <turnOffPWM>

	out = portOutputRegister(port);
    5044:	ec 2f       	mov	r30, r28
    5046:	f0 e0       	ldi	r31, 0x00	; 0
    5048:	ee 0f       	add	r30, r30
    504a:	ff 1f       	adc	r31, r31
    504c:	ec 52       	subi	r30, 0x2C	; 44
    504e:	fe 4f       	sbci	r31, 0xFE	; 254
    5050:	a5 91       	lpm	r26, Z+
    5052:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    5054:	9f b7       	in	r25, 0x3f	; 63
	cli();
    5056:	f8 94       	cli

	if (val == LOW) {
    5058:	11 11       	cpse	r17, r1
    505a:	04 c0       	rjmp	.+8      	; 0x5064 <digitalWrite+0x4e>
		*out &= ~bit;
    505c:	8c 91       	ld	r24, X
    505e:	d0 95       	com	r29
    5060:	d8 23       	and	r29, r24
    5062:	02 c0       	rjmp	.+4      	; 0x5068 <digitalWrite+0x52>
	} else {
		*out |= bit;
    5064:	ec 91       	ld	r30, X
    5066:	de 2b       	or	r29, r30
    5068:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    506a:	9f bf       	out	0x3f, r25	; 63
}
    506c:	df 91       	pop	r29
    506e:	cf 91       	pop	r28
    5070:	1f 91       	pop	r17
    5072:	08 95       	ret

00005074 <digitalRead>:

int digitalRead(uint8_t pin)
{
    5074:	cf 93       	push	r28
    5076:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    5078:	28 2f       	mov	r18, r24
    507a:	30 e0       	ldi	r19, 0x00	; 0
    507c:	f9 01       	movw	r30, r18
    507e:	e7 59       	subi	r30, 0x97	; 151
    5080:	fe 4f       	sbci	r31, 0xFE	; 254
    5082:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    5084:	f9 01       	movw	r30, r18
    5086:	e8 57       	subi	r30, 0x78	; 120
    5088:	fe 4f       	sbci	r31, 0xFE	; 254
    508a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    508c:	f9 01       	movw	r30, r18
    508e:	e9 55       	subi	r30, 0x59	; 89
    5090:	fe 4f       	sbci	r31, 0xFE	; 254
    5092:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    5094:	cc 23       	and	r28, r28
    5096:	91 f0       	breq	.+36     	; 0x50bc <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    5098:	81 11       	cpse	r24, r1
    509a:	0e 94 92 27 	call	0x4f24	; 0x4f24 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    509e:	ec 2f       	mov	r30, r28
    50a0:	f0 e0       	ldi	r31, 0x00	; 0
    50a2:	ee 0f       	add	r30, r30
    50a4:	ff 1f       	adc	r31, r31
    50a6:	ea 53       	subi	r30, 0x3A	; 58
    50a8:	fe 4f       	sbci	r31, 0xFE	; 254
    50aa:	a5 91       	lpm	r26, Z+
    50ac:	b4 91       	lpm	r27, Z
    50ae:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    50b0:	ed 23       	and	r30, r29
    50b2:	81 e0       	ldi	r24, 0x01	; 1
    50b4:	90 e0       	ldi	r25, 0x00	; 0
    50b6:	21 f4       	brne	.+8      	; 0x50c0 <digitalRead+0x4c>
    50b8:	80 e0       	ldi	r24, 0x00	; 0
    50ba:	02 c0       	rjmp	.+4      	; 0x50c0 <digitalRead+0x4c>
    50bc:	80 e0       	ldi	r24, 0x00	; 0
    50be:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    50c0:	df 91       	pop	r29
    50c2:	cf 91       	pop	r28
    50c4:	08 95       	ret

000050c6 <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    50c6:	fc 01       	movw	r30, r24
    50c8:	80 81       	ld	r24, Z
    50ca:	91 81       	ldd	r25, Z+1	; 0x01
    50cc:	0c 94 8c 2a 	jmp	0x5518	; 0x5518 <free>

000050d0 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    50d0:	cf 93       	push	r28
    50d2:	df 93       	push	r29
    50d4:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    50d6:	88 81       	ld	r24, Y
    50d8:	99 81       	ldd	r25, Y+1	; 0x01
    50da:	00 97       	sbiw	r24, 0x00	; 0
    50dc:	11 f0       	breq	.+4      	; 0x50e2 <_ZN6String10invalidateEv+0x12>
    50de:	0e 94 8c 2a 	call	0x5518	; 0x5518 <free>
	buffer = NULL;
    50e2:	19 82       	std	Y+1, r1	; 0x01
    50e4:	18 82       	st	Y, r1
	capacity = len = 0;
    50e6:	1d 82       	std	Y+5, r1	; 0x05
    50e8:	1c 82       	std	Y+4, r1	; 0x04
    50ea:	1b 82       	std	Y+3, r1	; 0x03
    50ec:	1a 82       	std	Y+2, r1	; 0x02
}
    50ee:	df 91       	pop	r29
    50f0:	cf 91       	pop	r28
    50f2:	08 95       	ret

000050f4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    50f4:	0f 93       	push	r16
    50f6:	1f 93       	push	r17
    50f8:	cf 93       	push	r28
    50fa:	df 93       	push	r29
    50fc:	ec 01       	movw	r28, r24
    50fe:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    5100:	6f 5f       	subi	r22, 0xFF	; 255
    5102:	7f 4f       	sbci	r23, 0xFF	; 255
    5104:	88 81       	ld	r24, Y
    5106:	99 81       	ldd	r25, Y+1	; 0x01
    5108:	0e 94 15 2b 	call	0x562a	; 0x562a <realloc>
	if (newbuffer) {
    510c:	00 97       	sbiw	r24, 0x00	; 0
    510e:	31 f0       	breq	.+12     	; 0x511c <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    5110:	99 83       	std	Y+1, r25	; 0x01
    5112:	88 83       	st	Y, r24
		capacity = maxStrLen;
    5114:	1b 83       	std	Y+3, r17	; 0x03
    5116:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    5118:	81 e0       	ldi	r24, 0x01	; 1
    511a:	01 c0       	rjmp	.+2      	; 0x511e <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    511c:	80 e0       	ldi	r24, 0x00	; 0
}
    511e:	df 91       	pop	r29
    5120:	cf 91       	pop	r28
    5122:	1f 91       	pop	r17
    5124:	0f 91       	pop	r16
    5126:	08 95       	ret

00005128 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    5128:	cf 93       	push	r28
    512a:	df 93       	push	r29
    512c:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    512e:	88 81       	ld	r24, Y
    5130:	99 81       	ldd	r25, Y+1	; 0x01
    5132:	89 2b       	or	r24, r25
    5134:	29 f0       	breq	.+10     	; 0x5140 <_ZN6String7reserveEj+0x18>
    5136:	8a 81       	ldd	r24, Y+2	; 0x02
    5138:	9b 81       	ldd	r25, Y+3	; 0x03
    513a:	86 17       	cp	r24, r22
    513c:	97 07       	cpc	r25, r23
    513e:	60 f4       	brcc	.+24     	; 0x5158 <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    5140:	ce 01       	movw	r24, r28
    5142:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <_ZN6String12changeBufferEj>
    5146:	88 23       	and	r24, r24
    5148:	41 f0       	breq	.+16     	; 0x515a <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    514a:	8c 81       	ldd	r24, Y+4	; 0x04
    514c:	9d 81       	ldd	r25, Y+5	; 0x05
    514e:	89 2b       	or	r24, r25
    5150:	19 f4       	brne	.+6      	; 0x5158 <_ZN6String7reserveEj+0x30>
    5152:	e8 81       	ld	r30, Y
    5154:	f9 81       	ldd	r31, Y+1	; 0x01
    5156:	10 82       	st	Z, r1
    5158:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    515a:	df 91       	pop	r29
    515c:	cf 91       	pop	r28
    515e:	08 95       	ret

00005160 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    5160:	ef 92       	push	r14
    5162:	ff 92       	push	r15
    5164:	0f 93       	push	r16
    5166:	1f 93       	push	r17
    5168:	cf 93       	push	r28
    516a:	df 93       	push	r29
    516c:	ec 01       	movw	r28, r24
    516e:	7b 01       	movw	r14, r22
    5170:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    5172:	ba 01       	movw	r22, r20
    5174:	0e 94 94 28 	call	0x5128	; 0x5128 <_ZN6String7reserveEj>
    5178:	81 11       	cpse	r24, r1
    517a:	04 c0       	rjmp	.+8      	; 0x5184 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    517c:	ce 01       	movw	r24, r28
    517e:	0e 94 68 28 	call	0x50d0	; 0x50d0 <_ZN6String10invalidateEv>
		return *this;
    5182:	07 c0       	rjmp	.+14     	; 0x5192 <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    5184:	1d 83       	std	Y+5, r17	; 0x05
    5186:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    5188:	b7 01       	movw	r22, r14
    518a:	88 81       	ld	r24, Y
    518c:	99 81       	ldd	r25, Y+1	; 0x01
    518e:	0e 94 10 2c 	call	0x5820	; 0x5820 <strcpy>
	return *this;
}
    5192:	ce 01       	movw	r24, r28
    5194:	df 91       	pop	r29
    5196:	cf 91       	pop	r28
    5198:	1f 91       	pop	r17
    519a:	0f 91       	pop	r16
    519c:	ff 90       	pop	r15
    519e:	ef 90       	pop	r14
    51a0:	08 95       	ret

000051a2 <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    51a2:	fc 01       	movw	r30, r24
    51a4:	11 82       	std	Z+1, r1	; 0x01
    51a6:	10 82       	st	Z, r1
	capacity = 0;
    51a8:	13 82       	std	Z+3, r1	; 0x03
    51aa:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    51ac:	15 82       	std	Z+5, r1	; 0x05
    51ae:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    51b0:	61 15       	cp	r22, r1
    51b2:	71 05       	cpc	r23, r1
    51b4:	51 f0       	breq	.+20     	; 0x51ca <_ZN6StringC1EPKc+0x28>
    51b6:	fb 01       	movw	r30, r22
    51b8:	01 90       	ld	r0, Z+
    51ba:	00 20       	and	r0, r0
    51bc:	e9 f7       	brne	.-6      	; 0x51b8 <_ZN6StringC1EPKc+0x16>
    51be:	31 97       	sbiw	r30, 0x01	; 1
    51c0:	af 01       	movw	r20, r30
    51c2:	46 1b       	sub	r20, r22
    51c4:	57 0b       	sbc	r21, r23
    51c6:	0c 94 b0 28 	jmp	0x5160	; 0x5160 <_ZN6String4copyEPKcj>
    51ca:	08 95       	ret

000051cc <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    51cc:	08 95       	ret

000051ce <_ZN13PluggableUSB_12getInterfaceEPh>:
		_initEndpoints[lastEp] = node->endpointType[i];
		lastEp++;
	}
	return true;
	// restart USB layer???
}
    51ce:	ef 92       	push	r14
    51d0:	ff 92       	push	r15
    51d2:	0f 93       	push	r16
    51d4:	1f 93       	push	r17
    51d6:	cf 93       	push	r28
    51d8:	df 93       	push	r29
    51da:	7b 01       	movw	r14, r22
    51dc:	fc 01       	movw	r30, r24
    51de:	c2 81       	ldd	r28, Z+2	; 0x02
    51e0:	d3 81       	ldd	r29, Z+3	; 0x03
    51e2:	00 e0       	ldi	r16, 0x00	; 0
    51e4:	10 e0       	ldi	r17, 0x00	; 0
    51e6:	20 97       	sbiw	r28, 0x00	; 0
    51e8:	81 f0       	breq	.+32     	; 0x520a <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
    51ea:	e8 81       	ld	r30, Y
    51ec:	f9 81       	ldd	r31, Y+1	; 0x01
    51ee:	02 80       	ldd	r0, Z+2	; 0x02
    51f0:	f3 81       	ldd	r31, Z+3	; 0x03
    51f2:	e0 2d       	mov	r30, r0
    51f4:	b7 01       	movw	r22, r14
    51f6:	ce 01       	movw	r24, r28
    51f8:	09 95       	icall
    51fa:	97 fd       	sbrc	r25, 7
    51fc:	08 c0       	rjmp	.+16     	; 0x520e <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
    51fe:	08 0f       	add	r16, r24
    5200:	19 1f       	adc	r17, r25
    5202:	08 84       	ldd	r0, Y+8	; 0x08
    5204:	d9 85       	ldd	r29, Y+9	; 0x09
    5206:	c0 2d       	mov	r28, r0
    5208:	ee cf       	rjmp	.-36     	; 0x51e6 <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    520a:	c8 01       	movw	r24, r16
    520c:	02 c0       	rjmp	.+4      	; 0x5212 <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
    520e:	8f ef       	ldi	r24, 0xFF	; 255
    5210:	9f ef       	ldi	r25, 0xFF	; 255
    5212:	df 91       	pop	r29
    5214:	cf 91       	pop	r28
    5216:	1f 91       	pop	r17
    5218:	0f 91       	pop	r16
    521a:	ff 90       	pop	r15
    521c:	ef 90       	pop	r14
    521e:	08 95       	ret

00005220 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    5220:	0f 93       	push	r16
    5222:	1f 93       	push	r17
    5224:	cf 93       	push	r28
    5226:	df 93       	push	r29
    5228:	8b 01       	movw	r16, r22
    522a:	fc 01       	movw	r30, r24
    522c:	c2 81       	ldd	r28, Z+2	; 0x02
    522e:	d3 81       	ldd	r29, Z+3	; 0x03
    5230:	20 97       	sbiw	r28, 0x00	; 0
    5232:	71 f0       	breq	.+28     	; 0x5250 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
    5234:	e8 81       	ld	r30, Y
    5236:	f9 81       	ldd	r31, Y+1	; 0x01
    5238:	04 80       	ldd	r0, Z+4	; 0x04
    523a:	f5 81       	ldd	r31, Z+5	; 0x05
    523c:	e0 2d       	mov	r30, r0
    523e:	b8 01       	movw	r22, r16
    5240:	ce 01       	movw	r24, r28
    5242:	09 95       	icall
    5244:	00 97       	sbiw	r24, 0x00	; 0
    5246:	31 f4       	brne	.+12     	; 0x5254 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
    5248:	08 84       	ldd	r0, Y+8	; 0x08
    524a:	d9 85       	ldd	r29, Y+9	; 0x09
    524c:	c0 2d       	mov	r28, r0
    524e:	f0 cf       	rjmp	.-32     	; 0x5230 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
    5250:	80 e0       	ldi	r24, 0x00	; 0
    5252:	90 e0       	ldi	r25, 0x00	; 0
    5254:	df 91       	pop	r29
    5256:	cf 91       	pop	r28
    5258:	1f 91       	pop	r17
    525a:	0f 91       	pop	r16
    525c:	08 95       	ret

0000525e <_ZN13PluggableUSB_12getShortNameEPc>:
    525e:	0f 93       	push	r16
    5260:	1f 93       	push	r17
    5262:	cf 93       	push	r28
    5264:	df 93       	push	r29
    5266:	8b 01       	movw	r16, r22
    5268:	fc 01       	movw	r30, r24
    526a:	c2 81       	ldd	r28, Z+2	; 0x02
    526c:	d3 81       	ldd	r29, Z+3	; 0x03
    526e:	20 97       	sbiw	r28, 0x00	; 0
    5270:	71 f0       	breq	.+28     	; 0x528e <_ZN13PluggableUSB_12getShortNameEPc+0x30>
    5272:	e8 81       	ld	r30, Y
    5274:	f9 81       	ldd	r31, Y+1	; 0x01
    5276:	06 80       	ldd	r0, Z+6	; 0x06
    5278:	f7 81       	ldd	r31, Z+7	; 0x07
    527a:	e0 2d       	mov	r30, r0
    527c:	b8 01       	movw	r22, r16
    527e:	ce 01       	movw	r24, r28
    5280:	09 95       	icall
    5282:	08 0f       	add	r16, r24
    5284:	11 1d       	adc	r17, r1
    5286:	08 84       	ldd	r0, Y+8	; 0x08
    5288:	d9 85       	ldd	r29, Y+9	; 0x09
    528a:	c0 2d       	mov	r28, r0
    528c:	f0 cf       	rjmp	.-32     	; 0x526e <_ZN13PluggableUSB_12getShortNameEPc+0x10>
    528e:	f8 01       	movw	r30, r16
    5290:	10 82       	st	Z, r1
    5292:	df 91       	pop	r29
    5294:	cf 91       	pop	r28
    5296:	1f 91       	pop	r17
    5298:	0f 91       	pop	r16
    529a:	08 95       	ret

0000529c <_ZN13PluggableUSB_5setupER8USBSetup>:
    529c:	0f 93       	push	r16
    529e:	1f 93       	push	r17
    52a0:	cf 93       	push	r28
    52a2:	df 93       	push	r29
    52a4:	8b 01       	movw	r16, r22
    52a6:	fc 01       	movw	r30, r24
    52a8:	c2 81       	ldd	r28, Z+2	; 0x02
    52aa:	d3 81       	ldd	r29, Z+3	; 0x03
    52ac:	20 97       	sbiw	r28, 0x00	; 0
    52ae:	71 f0       	breq	.+28     	; 0x52cc <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
    52b0:	e8 81       	ld	r30, Y
    52b2:	f9 81       	ldd	r31, Y+1	; 0x01
    52b4:	01 90       	ld	r0, Z+
    52b6:	f0 81       	ld	r31, Z
    52b8:	e0 2d       	mov	r30, r0
    52ba:	b8 01       	movw	r22, r16
    52bc:	ce 01       	movw	r24, r28
    52be:	09 95       	icall
    52c0:	81 11       	cpse	r24, r1
    52c2:	05 c0       	rjmp	.+10     	; 0x52ce <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
    52c4:	08 84       	ldd	r0, Y+8	; 0x08
    52c6:	d9 85       	ldd	r29, Y+9	; 0x09
    52c8:	c0 2d       	mov	r28, r0
    52ca:	f0 cf       	rjmp	.-32     	; 0x52ac <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
    52cc:	80 e0       	ldi	r24, 0x00	; 0
    52ce:	df 91       	pop	r29
    52d0:	cf 91       	pop	r28
    52d2:	1f 91       	pop	r17
    52d4:	0f 91       	pop	r16
    52d6:	08 95       	ret

000052d8 <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    52d8:	80 91 ca 06 	lds	r24, 0x06CA	; 0x8006ca <_ZGVZ12PluggableUSBvE3obj>
    52dc:	81 11       	cpse	r24, r1
    52de:	0d c0       	rjmp	.+26     	; 0x52fa <_Z12PluggableUSBv+0x22>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    52e0:	82 e0       	ldi	r24, 0x02	; 2
    52e2:	80 93 c6 06 	sts	0x06C6, r24	; 0x8006c6 <_ZZ12PluggableUSBvE3obj>
    52e6:	84 e0       	ldi	r24, 0x04	; 4
    52e8:	80 93 c7 06 	sts	0x06C7, r24	; 0x8006c7 <_ZZ12PluggableUSBvE3obj+0x1>
    52ec:	10 92 c9 06 	sts	0x06C9, r1	; 0x8006c9 <_ZZ12PluggableUSBvE3obj+0x3>
    52f0:	10 92 c8 06 	sts	0x06C8, r1	; 0x8006c8 <_ZZ12PluggableUSBvE3obj+0x2>
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    52f4:	81 e0       	ldi	r24, 0x01	; 1
    52f6:	80 93 ca 06 	sts	0x06CA, r24	; 0x8006ca <_ZGVZ12PluggableUSBvE3obj>
	return obj;
}
    52fa:	86 ec       	ldi	r24, 0xC6	; 198
    52fc:	96 e0       	ldi	r25, 0x06	; 6
    52fe:	08 95       	ret

00005300 <__unordsf2>:
    5300:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__fp_cmp>
    5304:	88 0b       	sbc	r24, r24
    5306:	99 0b       	sbc	r25, r25
    5308:	08 95       	ret

0000530a <__divmodhi4>:
    530a:	97 fb       	bst	r25, 7
    530c:	07 2e       	mov	r0, r23
    530e:	16 f4       	brtc	.+4      	; 0x5314 <__divmodhi4+0xa>
    5310:	00 94       	com	r0
    5312:	07 d0       	rcall	.+14     	; 0x5322 <__divmodhi4_neg1>
    5314:	77 fd       	sbrc	r23, 7
    5316:	09 d0       	rcall	.+18     	; 0x532a <__divmodhi4_neg2>
    5318:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <__udivmodhi4>
    531c:	07 fc       	sbrc	r0, 7
    531e:	05 d0       	rcall	.+10     	; 0x532a <__divmodhi4_neg2>
    5320:	3e f4       	brtc	.+14     	; 0x5330 <__divmodhi4_exit>

00005322 <__divmodhi4_neg1>:
    5322:	90 95       	com	r25
    5324:	81 95       	neg	r24
    5326:	9f 4f       	sbci	r25, 0xFF	; 255
    5328:	08 95       	ret

0000532a <__divmodhi4_neg2>:
    532a:	70 95       	com	r23
    532c:	61 95       	neg	r22
    532e:	7f 4f       	sbci	r23, 0xFF	; 255

00005330 <__divmodhi4_exit>:
    5330:	08 95       	ret

00005332 <__udivmodsi4>:
    5332:	a1 e2       	ldi	r26, 0x21	; 33
    5334:	1a 2e       	mov	r1, r26
    5336:	aa 1b       	sub	r26, r26
    5338:	bb 1b       	sub	r27, r27
    533a:	fd 01       	movw	r30, r26
    533c:	0d c0       	rjmp	.+26     	; 0x5358 <__udivmodsi4_ep>

0000533e <__udivmodsi4_loop>:
    533e:	aa 1f       	adc	r26, r26
    5340:	bb 1f       	adc	r27, r27
    5342:	ee 1f       	adc	r30, r30
    5344:	ff 1f       	adc	r31, r31
    5346:	a2 17       	cp	r26, r18
    5348:	b3 07       	cpc	r27, r19
    534a:	e4 07       	cpc	r30, r20
    534c:	f5 07       	cpc	r31, r21
    534e:	20 f0       	brcs	.+8      	; 0x5358 <__udivmodsi4_ep>
    5350:	a2 1b       	sub	r26, r18
    5352:	b3 0b       	sbc	r27, r19
    5354:	e4 0b       	sbc	r30, r20
    5356:	f5 0b       	sbc	r31, r21

00005358 <__udivmodsi4_ep>:
    5358:	66 1f       	adc	r22, r22
    535a:	77 1f       	adc	r23, r23
    535c:	88 1f       	adc	r24, r24
    535e:	99 1f       	adc	r25, r25
    5360:	1a 94       	dec	r1
    5362:	69 f7       	brne	.-38     	; 0x533e <__udivmodsi4_loop>
    5364:	60 95       	com	r22
    5366:	70 95       	com	r23
    5368:	80 95       	com	r24
    536a:	90 95       	com	r25
    536c:	9b 01       	movw	r18, r22
    536e:	ac 01       	movw	r20, r24
    5370:	bd 01       	movw	r22, r26
    5372:	cf 01       	movw	r24, r30
    5374:	08 95       	ret

00005376 <__divmodsi4>:
    5376:	05 2e       	mov	r0, r21
    5378:	97 fb       	bst	r25, 7
    537a:	1e f4       	brtc	.+6      	; 0x5382 <__divmodsi4+0xc>
    537c:	00 94       	com	r0
    537e:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <__negsi2>
    5382:	57 fd       	sbrc	r21, 7
    5384:	07 d0       	rcall	.+14     	; 0x5394 <__divmodsi4_neg2>
    5386:	0e 94 99 29 	call	0x5332	; 0x5332 <__udivmodsi4>
    538a:	07 fc       	sbrc	r0, 7
    538c:	03 d0       	rcall	.+6      	; 0x5394 <__divmodsi4_neg2>
    538e:	4e f4       	brtc	.+18     	; 0x53a2 <__divmodsi4_exit>
    5390:	0c 94 d2 29 	jmp	0x53a4	; 0x53a4 <__negsi2>

00005394 <__divmodsi4_neg2>:
    5394:	50 95       	com	r21
    5396:	40 95       	com	r20
    5398:	30 95       	com	r19
    539a:	21 95       	neg	r18
    539c:	3f 4f       	sbci	r19, 0xFF	; 255
    539e:	4f 4f       	sbci	r20, 0xFF	; 255
    53a0:	5f 4f       	sbci	r21, 0xFF	; 255

000053a2 <__divmodsi4_exit>:
    53a2:	08 95       	ret

000053a4 <__negsi2>:
    53a4:	90 95       	com	r25
    53a6:	80 95       	com	r24
    53a8:	70 95       	com	r23
    53aa:	61 95       	neg	r22
    53ac:	7f 4f       	sbci	r23, 0xFF	; 255
    53ae:	8f 4f       	sbci	r24, 0xFF	; 255
    53b0:	9f 4f       	sbci	r25, 0xFF	; 255
    53b2:	08 95       	ret

000053b4 <__tablejump2__>:
    53b4:	ee 0f       	add	r30, r30
    53b6:	ff 1f       	adc	r31, r31
    53b8:	05 90       	lpm	r0, Z+
    53ba:	f4 91       	lpm	r31, Z
    53bc:	e0 2d       	mov	r30, r0
    53be:	09 94       	ijmp

000053c0 <__udivmodhi4>:
    53c0:	aa 1b       	sub	r26, r26
    53c2:	bb 1b       	sub	r27, r27
    53c4:	51 e1       	ldi	r21, 0x11	; 17
    53c6:	07 c0       	rjmp	.+14     	; 0x53d6 <__udivmodhi4_ep>

000053c8 <__udivmodhi4_loop>:
    53c8:	aa 1f       	adc	r26, r26
    53ca:	bb 1f       	adc	r27, r27
    53cc:	a6 17       	cp	r26, r22
    53ce:	b7 07       	cpc	r27, r23
    53d0:	10 f0       	brcs	.+4      	; 0x53d6 <__udivmodhi4_ep>
    53d2:	a6 1b       	sub	r26, r22
    53d4:	b7 0b       	sbc	r27, r23

000053d6 <__udivmodhi4_ep>:
    53d6:	88 1f       	adc	r24, r24
    53d8:	99 1f       	adc	r25, r25
    53da:	5a 95       	dec	r21
    53dc:	a9 f7       	brne	.-22     	; 0x53c8 <__udivmodhi4_loop>
    53de:	80 95       	com	r24
    53e0:	90 95       	com	r25
    53e2:	bc 01       	movw	r22, r24
    53e4:	cd 01       	movw	r24, r26
    53e6:	08 95       	ret

000053e8 <malloc>:
    53e8:	0f 93       	push	r16
    53ea:	1f 93       	push	r17
    53ec:	cf 93       	push	r28
    53ee:	df 93       	push	r29
    53f0:	82 30       	cpi	r24, 0x02	; 2
    53f2:	91 05       	cpc	r25, r1
    53f4:	10 f4       	brcc	.+4      	; 0x53fa <malloc+0x12>
    53f6:	82 e0       	ldi	r24, 0x02	; 2
    53f8:	90 e0       	ldi	r25, 0x00	; 0
    53fa:	e0 91 d4 06 	lds	r30, 0x06D4	; 0x8006d4 <__flp>
    53fe:	f0 91 d5 06 	lds	r31, 0x06D5	; 0x8006d5 <__flp+0x1>
    5402:	20 e0       	ldi	r18, 0x00	; 0
    5404:	30 e0       	ldi	r19, 0x00	; 0
    5406:	a0 e0       	ldi	r26, 0x00	; 0
    5408:	b0 e0       	ldi	r27, 0x00	; 0
    540a:	30 97       	sbiw	r30, 0x00	; 0
    540c:	19 f1       	breq	.+70     	; 0x5454 <malloc+0x6c>
    540e:	40 81       	ld	r20, Z
    5410:	51 81       	ldd	r21, Z+1	; 0x01
    5412:	02 81       	ldd	r16, Z+2	; 0x02
    5414:	13 81       	ldd	r17, Z+3	; 0x03
    5416:	48 17       	cp	r20, r24
    5418:	59 07       	cpc	r21, r25
    541a:	c8 f0       	brcs	.+50     	; 0x544e <malloc+0x66>
    541c:	84 17       	cp	r24, r20
    541e:	95 07       	cpc	r25, r21
    5420:	69 f4       	brne	.+26     	; 0x543c <malloc+0x54>
    5422:	10 97       	sbiw	r26, 0x00	; 0
    5424:	31 f0       	breq	.+12     	; 0x5432 <malloc+0x4a>
    5426:	12 96       	adiw	r26, 0x02	; 2
    5428:	0c 93       	st	X, r16
    542a:	12 97       	sbiw	r26, 0x02	; 2
    542c:	13 96       	adiw	r26, 0x03	; 3
    542e:	1c 93       	st	X, r17
    5430:	27 c0       	rjmp	.+78     	; 0x5480 <malloc+0x98>
    5432:	00 93 d4 06 	sts	0x06D4, r16	; 0x8006d4 <__flp>
    5436:	10 93 d5 06 	sts	0x06D5, r17	; 0x8006d5 <__flp+0x1>
    543a:	22 c0       	rjmp	.+68     	; 0x5480 <malloc+0x98>
    543c:	21 15       	cp	r18, r1
    543e:	31 05       	cpc	r19, r1
    5440:	19 f0       	breq	.+6      	; 0x5448 <malloc+0x60>
    5442:	42 17       	cp	r20, r18
    5444:	53 07       	cpc	r21, r19
    5446:	18 f4       	brcc	.+6      	; 0x544e <malloc+0x66>
    5448:	9a 01       	movw	r18, r20
    544a:	bd 01       	movw	r22, r26
    544c:	ef 01       	movw	r28, r30
    544e:	df 01       	movw	r26, r30
    5450:	f8 01       	movw	r30, r16
    5452:	db cf       	rjmp	.-74     	; 0x540a <malloc+0x22>
    5454:	21 15       	cp	r18, r1
    5456:	31 05       	cpc	r19, r1
    5458:	f9 f0       	breq	.+62     	; 0x5498 <malloc+0xb0>
    545a:	28 1b       	sub	r18, r24
    545c:	39 0b       	sbc	r19, r25
    545e:	24 30       	cpi	r18, 0x04	; 4
    5460:	31 05       	cpc	r19, r1
    5462:	80 f4       	brcc	.+32     	; 0x5484 <malloc+0x9c>
    5464:	8a 81       	ldd	r24, Y+2	; 0x02
    5466:	9b 81       	ldd	r25, Y+3	; 0x03
    5468:	61 15       	cp	r22, r1
    546a:	71 05       	cpc	r23, r1
    546c:	21 f0       	breq	.+8      	; 0x5476 <malloc+0x8e>
    546e:	fb 01       	movw	r30, r22
    5470:	93 83       	std	Z+3, r25	; 0x03
    5472:	82 83       	std	Z+2, r24	; 0x02
    5474:	04 c0       	rjmp	.+8      	; 0x547e <malloc+0x96>
    5476:	90 93 d5 06 	sts	0x06D5, r25	; 0x8006d5 <__flp+0x1>
    547a:	80 93 d4 06 	sts	0x06D4, r24	; 0x8006d4 <__flp>
    547e:	fe 01       	movw	r30, r28
    5480:	32 96       	adiw	r30, 0x02	; 2
    5482:	44 c0       	rjmp	.+136    	; 0x550c <malloc+0x124>
    5484:	fe 01       	movw	r30, r28
    5486:	e2 0f       	add	r30, r18
    5488:	f3 1f       	adc	r31, r19
    548a:	81 93       	st	Z+, r24
    548c:	91 93       	st	Z+, r25
    548e:	22 50       	subi	r18, 0x02	; 2
    5490:	31 09       	sbc	r19, r1
    5492:	39 83       	std	Y+1, r19	; 0x01
    5494:	28 83       	st	Y, r18
    5496:	3a c0       	rjmp	.+116    	; 0x550c <malloc+0x124>
    5498:	20 91 d2 06 	lds	r18, 0x06D2	; 0x8006d2 <__brkval>
    549c:	30 91 d3 06 	lds	r19, 0x06D3	; 0x8006d3 <__brkval+0x1>
    54a0:	23 2b       	or	r18, r19
    54a2:	41 f4       	brne	.+16     	; 0x54b4 <malloc+0xcc>
    54a4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    54a8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    54ac:	30 93 d3 06 	sts	0x06D3, r19	; 0x8006d3 <__brkval+0x1>
    54b0:	20 93 d2 06 	sts	0x06D2, r18	; 0x8006d2 <__brkval>
    54b4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    54b8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    54bc:	21 15       	cp	r18, r1
    54be:	31 05       	cpc	r19, r1
    54c0:	41 f4       	brne	.+16     	; 0x54d2 <malloc+0xea>
    54c2:	2d b7       	in	r18, 0x3d	; 61
    54c4:	3e b7       	in	r19, 0x3e	; 62
    54c6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    54ca:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    54ce:	24 1b       	sub	r18, r20
    54d0:	35 0b       	sbc	r19, r21
    54d2:	e0 91 d2 06 	lds	r30, 0x06D2	; 0x8006d2 <__brkval>
    54d6:	f0 91 d3 06 	lds	r31, 0x06D3	; 0x8006d3 <__brkval+0x1>
    54da:	e2 17       	cp	r30, r18
    54dc:	f3 07       	cpc	r31, r19
    54de:	a0 f4       	brcc	.+40     	; 0x5508 <malloc+0x120>
    54e0:	2e 1b       	sub	r18, r30
    54e2:	3f 0b       	sbc	r19, r31
    54e4:	28 17       	cp	r18, r24
    54e6:	39 07       	cpc	r19, r25
    54e8:	78 f0       	brcs	.+30     	; 0x5508 <malloc+0x120>
    54ea:	ac 01       	movw	r20, r24
    54ec:	4e 5f       	subi	r20, 0xFE	; 254
    54ee:	5f 4f       	sbci	r21, 0xFF	; 255
    54f0:	24 17       	cp	r18, r20
    54f2:	35 07       	cpc	r19, r21
    54f4:	48 f0       	brcs	.+18     	; 0x5508 <malloc+0x120>
    54f6:	4e 0f       	add	r20, r30
    54f8:	5f 1f       	adc	r21, r31
    54fa:	50 93 d3 06 	sts	0x06D3, r21	; 0x8006d3 <__brkval+0x1>
    54fe:	40 93 d2 06 	sts	0x06D2, r20	; 0x8006d2 <__brkval>
    5502:	81 93       	st	Z+, r24
    5504:	91 93       	st	Z+, r25
    5506:	02 c0       	rjmp	.+4      	; 0x550c <malloc+0x124>
    5508:	e0 e0       	ldi	r30, 0x00	; 0
    550a:	f0 e0       	ldi	r31, 0x00	; 0
    550c:	cf 01       	movw	r24, r30
    550e:	df 91       	pop	r29
    5510:	cf 91       	pop	r28
    5512:	1f 91       	pop	r17
    5514:	0f 91       	pop	r16
    5516:	08 95       	ret

00005518 <free>:
    5518:	cf 93       	push	r28
    551a:	df 93       	push	r29
    551c:	00 97       	sbiw	r24, 0x00	; 0
    551e:	09 f4       	brne	.+2      	; 0x5522 <free+0xa>
    5520:	81 c0       	rjmp	.+258    	; 0x5624 <free+0x10c>
    5522:	fc 01       	movw	r30, r24
    5524:	32 97       	sbiw	r30, 0x02	; 2
    5526:	13 82       	std	Z+3, r1	; 0x03
    5528:	12 82       	std	Z+2, r1	; 0x02
    552a:	a0 91 d4 06 	lds	r26, 0x06D4	; 0x8006d4 <__flp>
    552e:	b0 91 d5 06 	lds	r27, 0x06D5	; 0x8006d5 <__flp+0x1>
    5532:	10 97       	sbiw	r26, 0x00	; 0
    5534:	81 f4       	brne	.+32     	; 0x5556 <free+0x3e>
    5536:	20 81       	ld	r18, Z
    5538:	31 81       	ldd	r19, Z+1	; 0x01
    553a:	82 0f       	add	r24, r18
    553c:	93 1f       	adc	r25, r19
    553e:	20 91 d2 06 	lds	r18, 0x06D2	; 0x8006d2 <__brkval>
    5542:	30 91 d3 06 	lds	r19, 0x06D3	; 0x8006d3 <__brkval+0x1>
    5546:	28 17       	cp	r18, r24
    5548:	39 07       	cpc	r19, r25
    554a:	51 f5       	brne	.+84     	; 0x55a0 <free+0x88>
    554c:	f0 93 d3 06 	sts	0x06D3, r31	; 0x8006d3 <__brkval+0x1>
    5550:	e0 93 d2 06 	sts	0x06D2, r30	; 0x8006d2 <__brkval>
    5554:	67 c0       	rjmp	.+206    	; 0x5624 <free+0x10c>
    5556:	ed 01       	movw	r28, r26
    5558:	20 e0       	ldi	r18, 0x00	; 0
    555a:	30 e0       	ldi	r19, 0x00	; 0
    555c:	ce 17       	cp	r28, r30
    555e:	df 07       	cpc	r29, r31
    5560:	40 f4       	brcc	.+16     	; 0x5572 <free+0x5a>
    5562:	4a 81       	ldd	r20, Y+2	; 0x02
    5564:	5b 81       	ldd	r21, Y+3	; 0x03
    5566:	9e 01       	movw	r18, r28
    5568:	41 15       	cp	r20, r1
    556a:	51 05       	cpc	r21, r1
    556c:	f1 f0       	breq	.+60     	; 0x55aa <free+0x92>
    556e:	ea 01       	movw	r28, r20
    5570:	f5 cf       	rjmp	.-22     	; 0x555c <free+0x44>
    5572:	d3 83       	std	Z+3, r29	; 0x03
    5574:	c2 83       	std	Z+2, r28	; 0x02
    5576:	40 81       	ld	r20, Z
    5578:	51 81       	ldd	r21, Z+1	; 0x01
    557a:	84 0f       	add	r24, r20
    557c:	95 1f       	adc	r25, r21
    557e:	c8 17       	cp	r28, r24
    5580:	d9 07       	cpc	r29, r25
    5582:	59 f4       	brne	.+22     	; 0x559a <free+0x82>
    5584:	88 81       	ld	r24, Y
    5586:	99 81       	ldd	r25, Y+1	; 0x01
    5588:	84 0f       	add	r24, r20
    558a:	95 1f       	adc	r25, r21
    558c:	02 96       	adiw	r24, 0x02	; 2
    558e:	91 83       	std	Z+1, r25	; 0x01
    5590:	80 83       	st	Z, r24
    5592:	8a 81       	ldd	r24, Y+2	; 0x02
    5594:	9b 81       	ldd	r25, Y+3	; 0x03
    5596:	93 83       	std	Z+3, r25	; 0x03
    5598:	82 83       	std	Z+2, r24	; 0x02
    559a:	21 15       	cp	r18, r1
    559c:	31 05       	cpc	r19, r1
    559e:	29 f4       	brne	.+10     	; 0x55aa <free+0x92>
    55a0:	f0 93 d5 06 	sts	0x06D5, r31	; 0x8006d5 <__flp+0x1>
    55a4:	e0 93 d4 06 	sts	0x06D4, r30	; 0x8006d4 <__flp>
    55a8:	3d c0       	rjmp	.+122    	; 0x5624 <free+0x10c>
    55aa:	e9 01       	movw	r28, r18
    55ac:	fb 83       	std	Y+3, r31	; 0x03
    55ae:	ea 83       	std	Y+2, r30	; 0x02
    55b0:	49 91       	ld	r20, Y+
    55b2:	59 91       	ld	r21, Y+
    55b4:	c4 0f       	add	r28, r20
    55b6:	d5 1f       	adc	r29, r21
    55b8:	ec 17       	cp	r30, r28
    55ba:	fd 07       	cpc	r31, r29
    55bc:	61 f4       	brne	.+24     	; 0x55d6 <free+0xbe>
    55be:	80 81       	ld	r24, Z
    55c0:	91 81       	ldd	r25, Z+1	; 0x01
    55c2:	84 0f       	add	r24, r20
    55c4:	95 1f       	adc	r25, r21
    55c6:	02 96       	adiw	r24, 0x02	; 2
    55c8:	e9 01       	movw	r28, r18
    55ca:	99 83       	std	Y+1, r25	; 0x01
    55cc:	88 83       	st	Y, r24
    55ce:	82 81       	ldd	r24, Z+2	; 0x02
    55d0:	93 81       	ldd	r25, Z+3	; 0x03
    55d2:	9b 83       	std	Y+3, r25	; 0x03
    55d4:	8a 83       	std	Y+2, r24	; 0x02
    55d6:	e0 e0       	ldi	r30, 0x00	; 0
    55d8:	f0 e0       	ldi	r31, 0x00	; 0
    55da:	12 96       	adiw	r26, 0x02	; 2
    55dc:	8d 91       	ld	r24, X+
    55de:	9c 91       	ld	r25, X
    55e0:	13 97       	sbiw	r26, 0x03	; 3
    55e2:	00 97       	sbiw	r24, 0x00	; 0
    55e4:	19 f0       	breq	.+6      	; 0x55ec <free+0xd4>
    55e6:	fd 01       	movw	r30, r26
    55e8:	dc 01       	movw	r26, r24
    55ea:	f7 cf       	rjmp	.-18     	; 0x55da <free+0xc2>
    55ec:	8d 91       	ld	r24, X+
    55ee:	9c 91       	ld	r25, X
    55f0:	11 97       	sbiw	r26, 0x01	; 1
    55f2:	9d 01       	movw	r18, r26
    55f4:	2e 5f       	subi	r18, 0xFE	; 254
    55f6:	3f 4f       	sbci	r19, 0xFF	; 255
    55f8:	82 0f       	add	r24, r18
    55fa:	93 1f       	adc	r25, r19
    55fc:	20 91 d2 06 	lds	r18, 0x06D2	; 0x8006d2 <__brkval>
    5600:	30 91 d3 06 	lds	r19, 0x06D3	; 0x8006d3 <__brkval+0x1>
    5604:	28 17       	cp	r18, r24
    5606:	39 07       	cpc	r19, r25
    5608:	69 f4       	brne	.+26     	; 0x5624 <free+0x10c>
    560a:	30 97       	sbiw	r30, 0x00	; 0
    560c:	29 f4       	brne	.+10     	; 0x5618 <free+0x100>
    560e:	10 92 d5 06 	sts	0x06D5, r1	; 0x8006d5 <__flp+0x1>
    5612:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <__flp>
    5616:	02 c0       	rjmp	.+4      	; 0x561c <free+0x104>
    5618:	13 82       	std	Z+3, r1	; 0x03
    561a:	12 82       	std	Z+2, r1	; 0x02
    561c:	b0 93 d3 06 	sts	0x06D3, r27	; 0x8006d3 <__brkval+0x1>
    5620:	a0 93 d2 06 	sts	0x06D2, r26	; 0x8006d2 <__brkval>
    5624:	df 91       	pop	r29
    5626:	cf 91       	pop	r28
    5628:	08 95       	ret

0000562a <realloc>:
    562a:	a0 e0       	ldi	r26, 0x00	; 0
    562c:	b0 e0       	ldi	r27, 0x00	; 0
    562e:	eb e1       	ldi	r30, 0x1B	; 27
    5630:	fb e2       	ldi	r31, 0x2B	; 43
    5632:	0c 94 4a 2c 	jmp	0x5894	; 0x5894 <__prologue_saves__+0x8>
    5636:	ec 01       	movw	r28, r24
    5638:	00 97       	sbiw	r24, 0x00	; 0
    563a:	21 f4       	brne	.+8      	; 0x5644 <realloc+0x1a>
    563c:	cb 01       	movw	r24, r22
    563e:	0e 94 f4 29 	call	0x53e8	; 0x53e8 <malloc>
    5642:	b4 c0       	rjmp	.+360    	; 0x57ac <realloc+0x182>
    5644:	fc 01       	movw	r30, r24
    5646:	e6 0f       	add	r30, r22
    5648:	f7 1f       	adc	r31, r23
    564a:	9c 01       	movw	r18, r24
    564c:	22 50       	subi	r18, 0x02	; 2
    564e:	31 09       	sbc	r19, r1
    5650:	e2 17       	cp	r30, r18
    5652:	f3 07       	cpc	r31, r19
    5654:	08 f4       	brcc	.+2      	; 0x5658 <realloc+0x2e>
    5656:	a8 c0       	rjmp	.+336    	; 0x57a8 <realloc+0x17e>
    5658:	d9 01       	movw	r26, r18
    565a:	0d 91       	ld	r16, X+
    565c:	1c 91       	ld	r17, X
    565e:	11 97       	sbiw	r26, 0x01	; 1
    5660:	06 17       	cp	r16, r22
    5662:	17 07       	cpc	r17, r23
    5664:	b0 f0       	brcs	.+44     	; 0x5692 <realloc+0x68>
    5666:	05 30       	cpi	r16, 0x05	; 5
    5668:	11 05       	cpc	r17, r1
    566a:	08 f4       	brcc	.+2      	; 0x566e <realloc+0x44>
    566c:	9b c0       	rjmp	.+310    	; 0x57a4 <realloc+0x17a>
    566e:	c8 01       	movw	r24, r16
    5670:	04 97       	sbiw	r24, 0x04	; 4
    5672:	86 17       	cp	r24, r22
    5674:	97 07       	cpc	r25, r23
    5676:	08 f4       	brcc	.+2      	; 0x567a <realloc+0x50>
    5678:	95 c0       	rjmp	.+298    	; 0x57a4 <realloc+0x17a>
    567a:	02 50       	subi	r16, 0x02	; 2
    567c:	11 09       	sbc	r17, r1
    567e:	06 1b       	sub	r16, r22
    5680:	17 0b       	sbc	r17, r23
    5682:	01 93       	st	Z+, r16
    5684:	11 93       	st	Z+, r17
    5686:	6d 93       	st	X+, r22
    5688:	7c 93       	st	X, r23
    568a:	cf 01       	movw	r24, r30
    568c:	0e 94 8c 2a 	call	0x5518	; 0x5518 <free>
    5690:	89 c0       	rjmp	.+274    	; 0x57a4 <realloc+0x17a>
    5692:	5b 01       	movw	r10, r22
    5694:	a0 1a       	sub	r10, r16
    5696:	b1 0a       	sbc	r11, r17
    5698:	4c 01       	movw	r8, r24
    569a:	80 0e       	add	r8, r16
    569c:	91 1e       	adc	r9, r17
    569e:	a0 91 d4 06 	lds	r26, 0x06D4	; 0x8006d4 <__flp>
    56a2:	b0 91 d5 06 	lds	r27, 0x06D5	; 0x8006d5 <__flp+0x1>
    56a6:	61 2c       	mov	r6, r1
    56a8:	71 2c       	mov	r7, r1
    56aa:	e1 2c       	mov	r14, r1
    56ac:	f1 2c       	mov	r15, r1
    56ae:	10 97       	sbiw	r26, 0x00	; 0
    56b0:	09 f4       	brne	.+2      	; 0x56b4 <realloc+0x8a>
    56b2:	46 c0       	rjmp	.+140    	; 0x5740 <realloc+0x116>
    56b4:	8d 91       	ld	r24, X+
    56b6:	9c 91       	ld	r25, X
    56b8:	11 97       	sbiw	r26, 0x01	; 1
    56ba:	a8 15       	cp	r26, r8
    56bc:	b9 05       	cpc	r27, r9
    56be:	b1 f5       	brne	.+108    	; 0x572c <realloc+0x102>
    56c0:	6c 01       	movw	r12, r24
    56c2:	42 e0       	ldi	r20, 0x02	; 2
    56c4:	c4 0e       	add	r12, r20
    56c6:	d1 1c       	adc	r13, r1
    56c8:	ca 14       	cp	r12, r10
    56ca:	db 04       	cpc	r13, r11
    56cc:	78 f1       	brcs	.+94     	; 0x572c <realloc+0x102>
    56ce:	4c 01       	movw	r8, r24
    56d0:	8a 18       	sub	r8, r10
    56d2:	9b 08       	sbc	r9, r11
    56d4:	64 01       	movw	r12, r8
    56d6:	42 e0       	ldi	r20, 0x02	; 2
    56d8:	c4 0e       	add	r12, r20
    56da:	d1 1c       	adc	r13, r1
    56dc:	12 96       	adiw	r26, 0x02	; 2
    56de:	bc 90       	ld	r11, X
    56e0:	12 97       	sbiw	r26, 0x02	; 2
    56e2:	13 96       	adiw	r26, 0x03	; 3
    56e4:	ac 91       	ld	r26, X
    56e6:	b5 e0       	ldi	r27, 0x05	; 5
    56e8:	cb 16       	cp	r12, r27
    56ea:	d1 04       	cpc	r13, r1
    56ec:	40 f0       	brcs	.+16     	; 0x56fe <realloc+0xd4>
    56ee:	b2 82       	std	Z+2, r11	; 0x02
    56f0:	a3 83       	std	Z+3, r26	; 0x03
    56f2:	91 82       	std	Z+1, r9	; 0x01
    56f4:	80 82       	st	Z, r8
    56f6:	d9 01       	movw	r26, r18
    56f8:	6d 93       	st	X+, r22
    56fa:	7c 93       	st	X, r23
    56fc:	09 c0       	rjmp	.+18     	; 0x5710 <realloc+0xe6>
    56fe:	0e 5f       	subi	r16, 0xFE	; 254
    5700:	1f 4f       	sbci	r17, 0xFF	; 255
    5702:	80 0f       	add	r24, r16
    5704:	91 1f       	adc	r25, r17
    5706:	f9 01       	movw	r30, r18
    5708:	91 83       	std	Z+1, r25	; 0x01
    570a:	80 83       	st	Z, r24
    570c:	eb 2d       	mov	r30, r11
    570e:	fa 2f       	mov	r31, r26
    5710:	e1 14       	cp	r14, r1
    5712:	f1 04       	cpc	r15, r1
    5714:	31 f0       	breq	.+12     	; 0x5722 <realloc+0xf8>
    5716:	d7 01       	movw	r26, r14
    5718:	13 96       	adiw	r26, 0x03	; 3
    571a:	fc 93       	st	X, r31
    571c:	ee 93       	st	-X, r30
    571e:	12 97       	sbiw	r26, 0x02	; 2
    5720:	41 c0       	rjmp	.+130    	; 0x57a4 <realloc+0x17a>
    5722:	f0 93 d5 06 	sts	0x06D5, r31	; 0x8006d5 <__flp+0x1>
    5726:	e0 93 d4 06 	sts	0x06D4, r30	; 0x8006d4 <__flp>
    572a:	3c c0       	rjmp	.+120    	; 0x57a4 <realloc+0x17a>
    572c:	68 16       	cp	r6, r24
    572e:	79 06       	cpc	r7, r25
    5730:	08 f4       	brcc	.+2      	; 0x5734 <realloc+0x10a>
    5732:	3c 01       	movw	r6, r24
    5734:	7d 01       	movw	r14, r26
    5736:	12 96       	adiw	r26, 0x02	; 2
    5738:	0d 90       	ld	r0, X+
    573a:	bc 91       	ld	r27, X
    573c:	a0 2d       	mov	r26, r0
    573e:	b7 cf       	rjmp	.-146    	; 0x56ae <realloc+0x84>
    5740:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <__brkval>
    5744:	90 91 d3 06 	lds	r25, 0x06D3	; 0x8006d3 <__brkval+0x1>
    5748:	88 16       	cp	r8, r24
    574a:	99 06       	cpc	r9, r25
    574c:	e1 f4       	brne	.+56     	; 0x5786 <realloc+0x15c>
    574e:	66 16       	cp	r6, r22
    5750:	77 06       	cpc	r7, r23
    5752:	c8 f4       	brcc	.+50     	; 0x5786 <realloc+0x15c>
    5754:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    5758:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    575c:	00 97       	sbiw	r24, 0x00	; 0
    575e:	41 f4       	brne	.+16     	; 0x5770 <realloc+0x146>
    5760:	8d b7       	in	r24, 0x3d	; 61
    5762:	9e b7       	in	r25, 0x3e	; 62
    5764:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    5768:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    576c:	84 1b       	sub	r24, r20
    576e:	95 0b       	sbc	r25, r21
    5770:	e8 17       	cp	r30, r24
    5772:	f9 07       	cpc	r31, r25
    5774:	c8 f4       	brcc	.+50     	; 0x57a8 <realloc+0x17e>
    5776:	f0 93 d3 06 	sts	0x06D3, r31	; 0x8006d3 <__brkval+0x1>
    577a:	e0 93 d2 06 	sts	0x06D2, r30	; 0x8006d2 <__brkval>
    577e:	f9 01       	movw	r30, r18
    5780:	71 83       	std	Z+1, r23	; 0x01
    5782:	60 83       	st	Z, r22
    5784:	0f c0       	rjmp	.+30     	; 0x57a4 <realloc+0x17a>
    5786:	cb 01       	movw	r24, r22
    5788:	0e 94 f4 29 	call	0x53e8	; 0x53e8 <malloc>
    578c:	7c 01       	movw	r14, r24
    578e:	00 97       	sbiw	r24, 0x00	; 0
    5790:	59 f0       	breq	.+22     	; 0x57a8 <realloc+0x17e>
    5792:	a8 01       	movw	r20, r16
    5794:	be 01       	movw	r22, r28
    5796:	0e 94 07 2c 	call	0x580e	; 0x580e <memcpy>
    579a:	ce 01       	movw	r24, r28
    579c:	0e 94 8c 2a 	call	0x5518	; 0x5518 <free>
    57a0:	c7 01       	movw	r24, r14
    57a2:	04 c0       	rjmp	.+8      	; 0x57ac <realloc+0x182>
    57a4:	ce 01       	movw	r24, r28
    57a6:	02 c0       	rjmp	.+4      	; 0x57ac <realloc+0x182>
    57a8:	80 e0       	ldi	r24, 0x00	; 0
    57aa:	90 e0       	ldi	r25, 0x00	; 0
    57ac:	cd b7       	in	r28, 0x3d	; 61
    57ae:	de b7       	in	r29, 0x3e	; 62
    57b0:	ee e0       	ldi	r30, 0x0E	; 14
    57b2:	0c 94 66 2c 	jmp	0x58cc	; 0x58cc <__epilogue_restores__+0x8>

000057b6 <abort>:
    57b6:	81 e0       	ldi	r24, 0x01	; 1
    57b8:	90 e0       	ldi	r25, 0x00	; 0
    57ba:	f8 94       	cli
    57bc:	0c 94 7d 2c 	jmp	0x58fa	; 0x58fa <__do_global_dtors>

000057c0 <atol>:
    57c0:	1f 93       	push	r17
    57c2:	fc 01       	movw	r30, r24
    57c4:	99 27       	eor	r25, r25
    57c6:	88 27       	eor	r24, r24
    57c8:	bc 01       	movw	r22, r24
    57ca:	e8 94       	clt
    57cc:	11 91       	ld	r17, Z+
    57ce:	10 32       	cpi	r17, 0x20	; 32
    57d0:	e9 f3       	breq	.-6      	; 0x57cc <atol+0xc>
    57d2:	19 30       	cpi	r17, 0x09	; 9
    57d4:	10 f0       	brcs	.+4      	; 0x57da <atol+0x1a>
    57d6:	1e 30       	cpi	r17, 0x0E	; 14
    57d8:	c8 f3       	brcs	.-14     	; 0x57cc <atol+0xc>
    57da:	1b 32       	cpi	r17, 0x2B	; 43
    57dc:	51 f0       	breq	.+20     	; 0x57f2 <atol+0x32>
    57de:	1d 32       	cpi	r17, 0x2D	; 45
    57e0:	49 f4       	brne	.+18     	; 0x57f4 <atol+0x34>
    57e2:	68 94       	set
    57e4:	06 c0       	rjmp	.+12     	; 0x57f2 <atol+0x32>
    57e6:	0e 94 31 2c 	call	0x5862	; 0x5862 <__mulsi_const_10>
    57ea:	61 0f       	add	r22, r17
    57ec:	71 1d       	adc	r23, r1
    57ee:	81 1d       	adc	r24, r1
    57f0:	91 1d       	adc	r25, r1
    57f2:	11 91       	ld	r17, Z+
    57f4:	10 53       	subi	r17, 0x30	; 48
    57f6:	1a 30       	cpi	r17, 0x0A	; 10
    57f8:	b0 f3       	brcs	.-20     	; 0x57e6 <atol+0x26>
    57fa:	3e f4       	brtc	.+14     	; 0x580a <atol+0x4a>
    57fc:	90 95       	com	r25
    57fe:	80 95       	com	r24
    5800:	70 95       	com	r23
    5802:	61 95       	neg	r22
    5804:	7f 4f       	sbci	r23, 0xFF	; 255
    5806:	8f 4f       	sbci	r24, 0xFF	; 255
    5808:	9f 4f       	sbci	r25, 0xFF	; 255
    580a:	1f 91       	pop	r17
    580c:	08 95       	ret

0000580e <memcpy>:
    580e:	fb 01       	movw	r30, r22
    5810:	dc 01       	movw	r26, r24
    5812:	02 c0       	rjmp	.+4      	; 0x5818 <memcpy+0xa>
    5814:	01 90       	ld	r0, Z+
    5816:	0d 92       	st	X+, r0
    5818:	41 50       	subi	r20, 0x01	; 1
    581a:	50 40       	sbci	r21, 0x00	; 0
    581c:	d8 f7       	brcc	.-10     	; 0x5814 <memcpy+0x6>
    581e:	08 95       	ret

00005820 <strcpy>:
    5820:	fb 01       	movw	r30, r22
    5822:	dc 01       	movw	r26, r24
    5824:	01 90       	ld	r0, Z+
    5826:	0d 92       	st	X+, r0
    5828:	00 20       	and	r0, r0
    582a:	e1 f7       	brne	.-8      	; 0x5824 <strcpy+0x4>
    582c:	08 95       	ret

0000582e <strstr>:
    582e:	fb 01       	movw	r30, r22
    5830:	51 91       	ld	r21, Z+
    5832:	55 23       	and	r21, r21
    5834:	a9 f0       	breq	.+42     	; 0x5860 <strstr+0x32>
    5836:	bf 01       	movw	r22, r30
    5838:	dc 01       	movw	r26, r24
    583a:	4d 91       	ld	r20, X+
    583c:	45 17       	cp	r20, r21
    583e:	41 11       	cpse	r20, r1
    5840:	e1 f7       	brne	.-8      	; 0x583a <strstr+0xc>
    5842:	59 f4       	brne	.+22     	; 0x585a <strstr+0x2c>
    5844:	cd 01       	movw	r24, r26
    5846:	01 90       	ld	r0, Z+
    5848:	00 20       	and	r0, r0
    584a:	49 f0       	breq	.+18     	; 0x585e <strstr+0x30>
    584c:	4d 91       	ld	r20, X+
    584e:	40 15       	cp	r20, r0
    5850:	41 11       	cpse	r20, r1
    5852:	c9 f3       	breq	.-14     	; 0x5846 <strstr+0x18>
    5854:	fb 01       	movw	r30, r22
    5856:	41 11       	cpse	r20, r1
    5858:	ef cf       	rjmp	.-34     	; 0x5838 <strstr+0xa>
    585a:	81 e0       	ldi	r24, 0x01	; 1
    585c:	90 e0       	ldi	r25, 0x00	; 0
    585e:	01 97       	sbiw	r24, 0x01	; 1
    5860:	08 95       	ret

00005862 <__mulsi_const_10>:
    5862:	59 2f       	mov	r21, r25
    5864:	48 2f       	mov	r20, r24
    5866:	37 2f       	mov	r19, r23
    5868:	26 2f       	mov	r18, r22
    586a:	66 0f       	add	r22, r22
    586c:	77 1f       	adc	r23, r23
    586e:	88 1f       	adc	r24, r24
    5870:	99 1f       	adc	r25, r25
    5872:	66 0f       	add	r22, r22
    5874:	77 1f       	adc	r23, r23
    5876:	88 1f       	adc	r24, r24
    5878:	99 1f       	adc	r25, r25
    587a:	62 0f       	add	r22, r18
    587c:	73 1f       	adc	r23, r19
    587e:	84 1f       	adc	r24, r20
    5880:	95 1f       	adc	r25, r21
    5882:	66 0f       	add	r22, r22
    5884:	77 1f       	adc	r23, r23
    5886:	88 1f       	adc	r24, r24
    5888:	99 1f       	adc	r25, r25
    588a:	08 95       	ret

0000588c <__prologue_saves__>:
    588c:	2f 92       	push	r2
    588e:	3f 92       	push	r3
    5890:	4f 92       	push	r4
    5892:	5f 92       	push	r5
    5894:	6f 92       	push	r6
    5896:	7f 92       	push	r7
    5898:	8f 92       	push	r8
    589a:	9f 92       	push	r9
    589c:	af 92       	push	r10
    589e:	bf 92       	push	r11
    58a0:	cf 92       	push	r12
    58a2:	df 92       	push	r13
    58a4:	ef 92       	push	r14
    58a6:	ff 92       	push	r15
    58a8:	0f 93       	push	r16
    58aa:	1f 93       	push	r17
    58ac:	cf 93       	push	r28
    58ae:	df 93       	push	r29
    58b0:	cd b7       	in	r28, 0x3d	; 61
    58b2:	de b7       	in	r29, 0x3e	; 62
    58b4:	ca 1b       	sub	r28, r26
    58b6:	db 0b       	sbc	r29, r27
    58b8:	0f b6       	in	r0, 0x3f	; 63
    58ba:	f8 94       	cli
    58bc:	de bf       	out	0x3e, r29	; 62
    58be:	0f be       	out	0x3f, r0	; 63
    58c0:	cd bf       	out	0x3d, r28	; 61
    58c2:	09 94       	ijmp

000058c4 <__epilogue_restores__>:
    58c4:	2a 88       	ldd	r2, Y+18	; 0x12
    58c6:	39 88       	ldd	r3, Y+17	; 0x11
    58c8:	48 88       	ldd	r4, Y+16	; 0x10
    58ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    58cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    58ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    58d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    58d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    58d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    58d6:	b9 84       	ldd	r11, Y+9	; 0x09
    58d8:	c8 84       	ldd	r12, Y+8	; 0x08
    58da:	df 80       	ldd	r13, Y+7	; 0x07
    58dc:	ee 80       	ldd	r14, Y+6	; 0x06
    58de:	fd 80       	ldd	r15, Y+5	; 0x05
    58e0:	0c 81       	ldd	r16, Y+4	; 0x04
    58e2:	1b 81       	ldd	r17, Y+3	; 0x03
    58e4:	aa 81       	ldd	r26, Y+2	; 0x02
    58e6:	b9 81       	ldd	r27, Y+1	; 0x01
    58e8:	ce 0f       	add	r28, r30
    58ea:	d1 1d       	adc	r29, r1
    58ec:	0f b6       	in	r0, 0x3f	; 63
    58ee:	f8 94       	cli
    58f0:	de bf       	out	0x3e, r29	; 62
    58f2:	0f be       	out	0x3f, r0	; 63
    58f4:	cd bf       	out	0x3d, r28	; 61
    58f6:	ed 01       	movw	r28, r26
    58f8:	08 95       	ret

000058fa <__do_global_dtors>:
    58fa:	10 e0       	ldi	r17, 0x00	; 0
    58fc:	cc ef       	ldi	r28, 0xFC	; 252
    58fe:	d0 e0       	ldi	r29, 0x00	; 0
    5900:	04 c0       	rjmp	.+8      	; 0x590a <__do_global_dtors+0x10>
    5902:	fe 01       	movw	r30, r28
    5904:	0e 94 da 29 	call	0x53b4	; 0x53b4 <__tablejump2__>
    5908:	21 96       	adiw	r28, 0x01	; 1
    590a:	cd 3f       	cpi	r28, 0xFD	; 253
    590c:	d1 07       	cpc	r29, r17
    590e:	c9 f7       	brne	.-14     	; 0x5902 <__do_global_dtors+0x8>
    5910:	f8 94       	cli

00005912 <__stop_program>:
    5912:	ff cf       	rjmp	.-2      	; 0x5912 <__stop_program>
