
Projektarbeit_COC_BRA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000be  00800100  00002cd2  00002d66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002cd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000197  008001be  008001be  00002e24  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002e24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002e54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000808  00000000  00000000  00002e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011997  00000000  00000000  0000369c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000037eb  00000000  00000000  00015033  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004927  00000000  00000000  0001881e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000016f4  00000000  00000000  0001d148  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000046dd  00000000  00000000  0001e83c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007b28  00000000  00000000  00022f19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000880  00000000  00000000  0002aa41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__ctors_end>
       4:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
       8:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
       c:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      10:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      14:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      18:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      1c:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      20:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      24:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      28:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__vector_10>
      2c:	0c 94 b5 10 	jmp	0x216a	; 0x216a <__vector_11>
      30:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      34:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      38:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      3c:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      40:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      44:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      48:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      4c:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      50:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      54:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      58:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      5c:	0c 94 ad 12 	jmp	0x255a	; 0x255a <__vector_23>
      60:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      64:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      68:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      6c:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      70:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      74:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      78:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      7c:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      80:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      84:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      88:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      8c:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      90:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <__vector_36>
      94:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      98:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      9c:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      a0:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      a4:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      a8:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
      ac:	03 14       	cp	r0, r3
      ae:	06 14       	cp	r0, r6
      b0:	f5 13       	cpse	r31, r21
      b2:	f9 13       	cpse	r31, r25
      b4:	ff 13       	cpse	r31, r31
      b6:	27 14       	cp	r2, r7
      b8:	27 14       	cp	r2, r7
      ba:	27 14       	cp	r2, r7
      bc:	0a 14       	cp	r0, r10
      be:	0e 14       	cp	r0, r14
      c0:	12 14       	cp	r1, r2
      c2:	18 14       	cp	r1, r8
      c4:	1c 14       	cp	r1, r12
      c6:	27 14       	cp	r2, r7
      c8:	22 14       	cp	r2, r2

000000ca <__trampolines_end>:
      ca:	4c 4f       	sbci	r20, 0xFC	; 252
      cc:	4b 41       	sbci	r20, 0x1B	; 27
      ce:	4c 5a       	subi	r20, 0xAC	; 172
      d0:	45 49       	sbci	r20, 0x95	; 149
      d2:	54 00       	.word	0x0054	; ????

000000d4 <_ZL4str0>:
	...

000000d5 <USB_DeviceDescriptorIAD>:
      d5:	12 01 00 02 ef 02 01 40 41 23 36 80 00 01 01 02     .......@A#6.....
      e5:	03 01                                               ..

000000e7 <STRING_MANUFACTURER>:
      e7:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

000000f3 <STRING_PRODUCT>:
      f3:	41 72 64 75 69 6e 6f 20 4c 65 6f 6e 61 72 64 6f     Arduino Leonardo
	...

00000104 <STRING_LANGUAGE>:
     104:	04 03 09 04                                         ....

00000108 <analog_pin_to_channel_PGM>:
     108:	07 06 05 04 01 00 08 0a 0b 0c 0d 09                 ............

00000114 <digital_pin_to_timer_PGM>:
     114:	00 00 00 02 00 09 0f 00 00 03 04 01 00 0c 00 00     ................
	...

00000133 <digital_pin_to_bit_mask_PGM>:
     133:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     143:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

00000152 <digital_pin_to_port_PGM>:
     152:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     162:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

00000171 <port_to_output_PGM>:
     171:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

0000017f <_cdcInterface>:
     17f:	08 0b 00 02 02 02 01 00 09 04 00 00 01 02 02 00     ................
     18f:	00 05 24 00 10 01 05 24 01 01 01 04 24 02 06 05     ..$....$....$...
     19f:	24 06 00 01 07 05 81 03 10 00 40 09 04 01 00 02     $.........@.....
     1af:	0a 00 00 00 07 05 02 02 40 00 00 07 05 83 02 40     ........@......@
     1bf:	00 00 00                                            ...

000001c2 <__ctors_start>:
     1c2:	fe 03       	fmulsu	r23, r22
     1c4:	7a 0d       	add	r23, r10
     1c6:	5c 15       	cp	r21, r12

000001c8 <__ctors_end>:
     1c8:	11 24       	eor	r1, r1
     1ca:	1f be       	out	0x3f, r1	; 63
     1cc:	cf ef       	ldi	r28, 0xFF	; 255
     1ce:	da e0       	ldi	r29, 0x0A	; 10
     1d0:	de bf       	out	0x3e, r29	; 62
     1d2:	cd bf       	out	0x3d, r28	; 61

000001d4 <__do_copy_data>:
     1d4:	11 e0       	ldi	r17, 0x01	; 1
     1d6:	a0 e0       	ldi	r26, 0x00	; 0
     1d8:	b1 e0       	ldi	r27, 0x01	; 1
     1da:	e2 ed       	ldi	r30, 0xD2	; 210
     1dc:	fc e2       	ldi	r31, 0x2C	; 44
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <__do_copy_data+0x10>
     1e0:	05 90       	lpm	r0, Z+
     1e2:	0d 92       	st	X+, r0
     1e4:	ae 3b       	cpi	r26, 0xBE	; 190
     1e6:	b1 07       	cpc	r27, r17
     1e8:	d9 f7       	brne	.-10     	; 0x1e0 <__do_copy_data+0xc>

000001ea <__do_clear_bss>:
     1ea:	23 e0       	ldi	r18, 0x03	; 3
     1ec:	ae eb       	ldi	r26, 0xBE	; 190
     1ee:	b1 e0       	ldi	r27, 0x01	; 1
     1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <.do_clear_bss_start>

000001f2 <.do_clear_bss_loop>:
     1f2:	1d 92       	st	X+, r1

000001f4 <.do_clear_bss_start>:
     1f4:	a5 35       	cpi	r26, 0x55	; 85
     1f6:	b2 07       	cpc	r27, r18
     1f8:	e1 f7       	brne	.-8      	; 0x1f2 <.do_clear_bss_loop>

000001fa <__do_global_ctors>:
     1fa:	10 e0       	ldi	r17, 0x00	; 0
     1fc:	c4 ee       	ldi	r28, 0xE4	; 228
     1fe:	d0 e0       	ldi	r29, 0x00	; 0
     200:	04 c0       	rjmp	.+8      	; 0x20a <__do_global_ctors+0x10>
     202:	21 97       	sbiw	r28, 0x01	; 1
     204:	fe 01       	movw	r30, r28
     206:	0e 94 41 16 	call	0x2c82	; 0x2c82 <__tablejump2__>
     20a:	c1 3e       	cpi	r28, 0xE1	; 225
     20c:	d1 07       	cpc	r29, r17
     20e:	c9 f7       	brne	.-14     	; 0x202 <__do_global_ctors+0x8>
     210:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <main>
     214:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <_exit>

00000218 <__bad_interrupt>:
     218:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000021c <_Z6getkeyv>:
 */
int getkey(void)
{
	static int keys[NUMKEYS+1];
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	0e 94 ba 13 	call	0x2774	; 0x2774 <analogRead>

	if (val > 1020) { // no key pressed
     222:	8d 3f       	cpi	r24, 0xFD	; 253
     224:	23 e0       	ldi	r18, 0x03	; 3
     226:	92 07       	cpc	r25, r18
     228:	20 f1       	brcs	.+72     	; 0x272 <_Z6getkeyv+0x56>
		if (++keys[0] > NOPRESS) {
     22a:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <__data_end>
     22e:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <__data_end+0x1>
     232:	01 96       	adiw	r24, 0x01	; 1
     234:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <__data_end+0x1>
     238:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <__data_end>
     23c:	03 97       	sbiw	r24, 0x03	; 3
     23e:	0c f4       	brge	.+2      	; 0x242 <_Z6getkeyv+0x26>
     240:	6a c0       	rjmp	.+212    	; 0x316 <_Z6getkeyv+0xfa>
     242:	ee eb       	ldi	r30, 0xBE	; 190
     244:	f1 e0       	ldi	r31, 0x01	; 1
     246:	20 e0       	ldi	r18, 0x00	; 0
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	90 e0       	ldi	r25, 0x00	; 0
			for(uint8_t i = 0; i <= NUMKEYS; i++){
				if(keys[i] > KEYPRESS){
     24e:	40 81       	ld	r20, Z
     250:	51 81       	ldd	r21, Z+1	; 0x01
     252:	44 30       	cpi	r20, 0x04	; 4
     254:	51 05       	cpc	r21, r1
     256:	2c f0       	brlt	.+10     	; 0x262 <_Z6getkeyv+0x46>
     258:	c9 01       	movw	r24, r18
					data = i;
					if(keys[i] > LONGPRESS) data += 5;
     25a:	49 3c       	cpi	r20, 0xC9	; 201
     25c:	51 05       	cpc	r21, r1
     25e:	0c f0       	brlt	.+2      	; 0x262 <_Z6getkeyv+0x46>
     260:	05 96       	adiw	r24, 0x05	; 5
				}
				keys[i] = 0;
     262:	11 92       	st	Z+, r1
     264:	11 92       	st	Z+, r1
     266:	2f 5f       	subi	r18, 0xFF	; 255
     268:	3f 4f       	sbci	r19, 0xFF	; 255
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);

	if (val > 1020) { // no key pressed
		if (++keys[0] > NOPRESS) {
			for(uint8_t i = 0; i <= NUMKEYS; i++){
     26a:	26 30       	cpi	r18, 0x06	; 6
     26c:	31 05       	cpc	r19, r1
     26e:	79 f7       	brne	.-34     	; 0x24e <_Z6getkeyv+0x32>
     270:	08 95       	ret
			}
		}
		else data = 0;
	}
	else {
		if (val < S1_LIMIT && keys[1] < 32000) ++keys[1]; // key1 pressed
     272:	89 34       	cpi	r24, 0x49	; 73
     274:	91 05       	cpc	r25, r1
     276:	70 f4       	brcc	.+28     	; 0x294 <_Z6getkeyv+0x78>
     278:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <__data_end+0x2>
     27c:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <__data_end+0x3>
     280:	81 15       	cp	r24, r1
     282:	2d e7       	ldi	r18, 0x7D	; 125
     284:	92 07       	cpc	r25, r18
     286:	4c f4       	brge	.+18     	; 0x29a <_Z6getkeyv+0x7e>
     288:	01 96       	adiw	r24, 0x01	; 1
     28a:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <__data_end+0x3>
     28e:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__data_end+0x2>
     292:	41 c0       	rjmp	.+130    	; 0x316 <_Z6getkeyv+0xfa>
		else if (val < S2_LIMIT && keys[2] < 32000) ++keys[2]; //key2 pressed
     294:	8e 3e       	cpi	r24, 0xEE	; 238
     296:	91 05       	cpc	r25, r1
     298:	70 f4       	brcc	.+28     	; 0x2b6 <_Z6getkeyv+0x9a>
     29a:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <__data_end+0x4>
     29e:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <__data_end+0x5>
     2a2:	81 15       	cp	r24, r1
     2a4:	2d e7       	ldi	r18, 0x7D	; 125
     2a6:	92 07       	cpc	r25, r18
     2a8:	54 f4       	brge	.+20     	; 0x2be <_Z6getkeyv+0xa2>
     2aa:	01 96       	adiw	r24, 0x01	; 1
     2ac:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <__data_end+0x5>
     2b0:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <__data_end+0x4>
     2b4:	30 c0       	rjmp	.+96     	; 0x316 <_Z6getkeyv+0xfa>
		else if (val < S3_LIMIT && keys[3] < 32000) ++keys[3]; //key3 pressed
     2b6:	82 3a       	cpi	r24, 0xA2	; 162
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	92 07       	cpc	r25, r18
     2bc:	70 f4       	brcc	.+28     	; 0x2da <_Z6getkeyv+0xbe>
     2be:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <__data_end+0x6>
     2c2:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <__data_end+0x7>
     2c6:	81 15       	cp	r24, r1
     2c8:	2d e7       	ldi	r18, 0x7D	; 125
     2ca:	92 07       	cpc	r25, r18
     2cc:	4c f4       	brge	.+18     	; 0x2e0 <_Z6getkeyv+0xc4>
     2ce:	01 96       	adiw	r24, 0x01	; 1
     2d0:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <__data_end+0x7>
     2d4:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <__data_end+0x6>
     2d8:	1e c0       	rjmp	.+60     	; 0x316 <_Z6getkeyv+0xfa>
		else if (val < S4_LIMIT && keys[4] < 32000) ++keys[4]; //key4 pressed
     2da:	80 37       	cpi	r24, 0x70	; 112
     2dc:	92 40       	sbci	r25, 0x02	; 2
     2de:	70 f4       	brcc	.+28     	; 0x2fc <_Z6getkeyv+0xe0>
     2e0:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <__data_end+0x8>
     2e4:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <__data_end+0x9>
     2e8:	81 15       	cp	r24, r1
     2ea:	2d e7       	ldi	r18, 0x7D	; 125
     2ec:	92 07       	cpc	r25, r18
     2ee:	34 f4       	brge	.+12     	; 0x2fc <_Z6getkeyv+0xe0>
     2f0:	01 96       	adiw	r24, 0x01	; 1
     2f2:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <__data_end+0x9>
     2f6:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <__data_end+0x8>
     2fa:	0d c0       	rjmp	.+26     	; 0x316 <_Z6getkeyv+0xfa>
		else if ( keys[5] < 32000) ++keys[5]; // key5 pressed
     2fc:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <__data_end+0xa>
     300:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <__data_end+0xb>
     304:	81 15       	cp	r24, r1
     306:	2d e7       	ldi	r18, 0x7D	; 125
     308:	92 07       	cpc	r25, r18
     30a:	2c f4       	brge	.+10     	; 0x316 <_Z6getkeyv+0xfa>
     30c:	01 96       	adiw	r24, 0x01	; 1
     30e:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <__data_end+0xb>
     312:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <__data_end+0xa>
		data = 0;
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	90 e0       	ldi	r25, 0x00	; 0
	}
	return data;
}
     31a:	08 95       	ret

0000031c <_ZN5Print17availableForWriteEv>:
	return ret;
}

int Zeit::GetHours(){return hh_;};
int Zeit::GetMinutes(){return mm_;};
int Zeit::GetSeconds(){return ss_;};
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	08 95       	ret

00000322 <_ZN5Print5flushEv>:
     322:	08 95       	ret

00000324 <_ZN7hd4478013iosetContrastEh>:
     324:	8d ef       	ldi	r24, 0xFD	; 253
     326:	9f ef       	ldi	r25, 0xFF	; 255
     328:	08 95       	ret

0000032a <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>:
     32a:	0f 93       	push	r16
     32c:	1f 93       	push	r17
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	18 2f       	mov	r17, r24
     334:	d0 e0       	ldi	r29, 0x00	; 0
     336:	c0 e2       	ldi	r28, 0x20	; 32
     338:	6c 2f       	mov	r22, r28
     33a:	8f e8       	ldi	r24, 0x8F	; 143
     33c:	92 e0       	ldi	r25, 0x02	; 2
     33e:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <_ZN7TwoWire17beginTransmissionEh>
     342:	8f e8       	ldi	r24, 0x8F	; 143
     344:	92 e0       	ldi	r25, 0x02	; 2
     346:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN7TwoWire15endTransmissionEv>
     34a:	08 2f       	mov	r16, r24
     34c:	61 e0       	ldi	r22, 0x01	; 1
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 28 13 	call	0x2650	; 0x2650 <delay>
     358:	01 11       	cpse	r16, r1
     35a:	03 c0       	rjmp	.+6      	; 0x362 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x38>
     35c:	1d 17       	cp	r17, r29
     35e:	f9 f0       	breq	.+62     	; 0x39e <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x74>
     360:	df 5f       	subi	r29, 0xFF	; 255
     362:	cf 5f       	subi	r28, 0xFF	; 255
     364:	c8 32       	cpi	r28, 0x28	; 40
     366:	41 f7       	brne	.-48     	; 0x338 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0xe>
     368:	c8 e3       	ldi	r28, 0x38	; 56
     36a:	6c 2f       	mov	r22, r28
     36c:	8f e8       	ldi	r24, 0x8F	; 143
     36e:	92 e0       	ldi	r25, 0x02	; 2
     370:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <_ZN7TwoWire17beginTransmissionEh>
     374:	8f e8       	ldi	r24, 0x8F	; 143
     376:	92 e0       	ldi	r25, 0x02	; 2
     378:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN7TwoWire15endTransmissionEv>
     37c:	08 2f       	mov	r16, r24
     37e:	61 e0       	ldi	r22, 0x01	; 1
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 28 13 	call	0x2650	; 0x2650 <delay>
     38a:	01 11       	cpse	r16, r1
     38c:	03 c0       	rjmp	.+6      	; 0x394 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x6a>
     38e:	1d 17       	cp	r17, r29
     390:	31 f0       	breq	.+12     	; 0x39e <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x74>
     392:	df 5f       	subi	r29, 0xFF	; 255
     394:	cf 5f       	subi	r28, 0xFF	; 255
     396:	c0 34       	cpi	r28, 0x40	; 64
     398:	41 f7       	brne	.-48     	; 0x36a <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x40>
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	01 c0       	rjmp	.+2      	; 0x3a0 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x76>
     39e:	8c 2f       	mov	r24, r28
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	1f 91       	pop	r17
     3a6:	0f 91       	pop	r16
     3a8:	08 95       	ret

000003aa <_ZN7TwoWire5writeEi>:
     3aa:	dc 01       	movw	r26, r24
     3ac:	ed 91       	ld	r30, X+
     3ae:	fc 91       	ld	r31, X
     3b0:	01 90       	ld	r0, Z+
     3b2:	f0 81       	ld	r31, Z
     3b4:	e0 2d       	mov	r30, r0
     3b6:	09 94       	ijmp

000003b8 <_ZN4Zeit4TickEv>:
     3b8:	fc 01       	movw	r30, r24
     3ba:	84 81       	ldd	r24, Z+4	; 0x04
     3bc:	95 81       	ldd	r25, Z+5	; 0x05
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	2c e3       	ldi	r18, 0x3C	; 60
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	b9 01       	movw	r22, r18
     3c6:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__divmodhi4>
     3ca:	95 83       	std	Z+5, r25	; 0x05
     3cc:	84 83       	std	Z+4, r24	; 0x04
     3ce:	89 2b       	or	r24, r25
     3d0:	19 f0       	breq	.+6      	; 0x3d8 <_ZN4Zeit4TickEv+0x20>
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	08 95       	ret
     3d8:	82 81       	ldd	r24, Z+2	; 0x02
     3da:	93 81       	ldd	r25, Z+3	; 0x03
     3dc:	01 96       	adiw	r24, 0x01	; 1
     3de:	b9 01       	movw	r22, r18
     3e0:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__divmodhi4>
     3e4:	93 83       	std	Z+3, r25	; 0x03
     3e6:	82 83       	std	Z+2, r24	; 0x02
     3e8:	89 2b       	or	r24, r25
     3ea:	99 f7       	brne	.-26     	; 0x3d2 <_ZN4Zeit4TickEv+0x1a>
     3ec:	80 81       	ld	r24, Z
     3ee:	91 81       	ldd	r25, Z+1	; 0x01
     3f0:	01 96       	adiw	r24, 0x01	; 1
     3f2:	68 e1       	ldi	r22, 0x18	; 24
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__divmodhi4>
     3fa:	ac 01       	movw	r20, r24
     3fc:	91 83       	std	Z+1, r25	; 0x01
     3fe:	80 83       	st	Z, r24
     400:	21 e0       	ldi	r18, 0x01	; 1
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	45 2b       	or	r20, r21
     406:	09 f0       	breq	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	82 2f       	mov	r24, r18
     40c:	08 95       	ret

0000040e <_Z5Watchv>:
 * frequent calls will result in counting the time. days-of-month and leap years are taken into account
 *
 * @return void
 */
void Watch()
{
     40e:	0f 93       	push	r16
     410:	1f 93       	push	r17
#define INTERVAL 1000L
	static long target = INTERVAL;
	if (millis() > target)	{
     412:	0e 94 f7 12 	call	0x25ee	; 0x25ee <millis>
     416:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__data_start>
     41a:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__data_start+0x1>
     41e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_start+0x2>
     422:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_start+0x3>
     426:	06 17       	cp	r16, r22
     428:	17 07       	cpc	r17, r23
     42a:	28 07       	cpc	r18, r24
     42c:	39 07       	cpc	r19, r25
     42e:	a0 f4       	brcc	.+40     	; 0x458 <_Z5Watchv+0x4a>
		target += INTERVAL;
     430:	d9 01       	movw	r26, r18
     432:	c8 01       	movw	r24, r16
     434:	88 51       	subi	r24, 0x18	; 24
     436:	9c 4f       	sbci	r25, 0xFC	; 252
     438:	af 4f       	sbci	r26, 0xFF	; 255
     43a:	bf 4f       	sbci	r27, 0xFF	; 255
     43c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     440:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     444:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     448:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
		zeitLocal.Tick();
     44c:	8c ee       	ldi	r24, 0xEC	; 236
     44e:	91 e0       	ldi	r25, 0x01	; 1
		//if(zeit1.Tick()) datum1.Tick(); //Wenn die Zeit bei 24.00 ankommt wird ret = 1 gesetzt und das Datum eins weitergestellt
	}
#undef INTERVAL
}
     450:	1f 91       	pop	r17
     452:	0f 91       	pop	r16
{
#define INTERVAL 1000L
	static long target = INTERVAL;
	if (millis() > target)	{
		target += INTERVAL;
		zeitLocal.Tick();
     454:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <_ZN4Zeit4TickEv>
		//if(zeit1.Tick()) datum1.Tick(); //Wenn die Zeit bei 24.00 ankommt wird ret = 1 gesetzt und das Datum eins weitergestellt
	}
#undef INTERVAL
}
     458:	1f 91       	pop	r17
     45a:	0f 91       	pop	r16
     45c:	08 95       	ret

0000045e <_Z11printhhmmssR4Zeit>:
 * @param[in] zeit: struct 
 * 
 * @return void
 */
void printhhmmss(class Zeit &z)
{
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	ec 01       	movw	r28, r24
	if(z.GetHours()<=9)lcd.print("0");
     464:	88 81       	ld	r24, Y
     466:	99 81       	ldd	r25, Y+1	; 0x01
     468:	0a 97       	sbiw	r24, 0x0a	; 10
     46a:	34 f4       	brge	.+12     	; 0x478 <_Z11printhhmmssR4Zeit+0x1a>
     46c:	69 e1       	ldi	r22, 0x19	; 25
     46e:	71 e0       	ldi	r23, 0x01	; 1
     470:	84 ef       	ldi	r24, 0xF4	; 244
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <_ZN5Print5printEPKc>
	lcd.print(z.GetHours());
     478:	68 81       	ld	r22, Y
     47a:	79 81       	ldd	r23, Y+1	; 0x01
     47c:	4a e0       	ldi	r20, 0x0A	; 10
     47e:	50 e0       	ldi	r21, 0x00	; 0
     480:	84 ef       	ldi	r24, 0xF4	; 244
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <_ZN5Print5printEii>
	if(z.GetMinutes()<=9)lcd.print(":0"); else lcd.print(":");
     488:	8a 81       	ldd	r24, Y+2	; 0x02
     48a:	9b 81       	ldd	r25, Y+3	; 0x03
     48c:	0a 97       	sbiw	r24, 0x0a	; 10
     48e:	1c f4       	brge	.+6      	; 0x496 <_Z11printhhmmssR4Zeit+0x38>
     490:	68 e1       	ldi	r22, 0x18	; 24
     492:	71 e0       	ldi	r23, 0x01	; 1
     494:	02 c0       	rjmp	.+4      	; 0x49a <_Z11printhhmmssR4Zeit+0x3c>
     496:	6b e1       	ldi	r22, 0x1B	; 27
     498:	71 e0       	ldi	r23, 0x01	; 1
     49a:	84 ef       	ldi	r24, 0xF4	; 244
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <_ZN5Print5printEPKc>
	lcd.print(z.GetMinutes());
     4a2:	6a 81       	ldd	r22, Y+2	; 0x02
     4a4:	7b 81       	ldd	r23, Y+3	; 0x03
     4a6:	4a e0       	ldi	r20, 0x0A	; 10
     4a8:	50 e0       	ldi	r21, 0x00	; 0
     4aa:	84 ef       	ldi	r24, 0xF4	; 244
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <_ZN5Print5printEii>
	if(z.GetSeconds()<=9)lcd.print(":0"); else lcd.print(":");
     4b2:	8c 81       	ldd	r24, Y+4	; 0x04
     4b4:	9d 81       	ldd	r25, Y+5	; 0x05
     4b6:	0a 97       	sbiw	r24, 0x0a	; 10
     4b8:	1c f4       	brge	.+6      	; 0x4c0 <_Z11printhhmmssR4Zeit+0x62>
     4ba:	68 e1       	ldi	r22, 0x18	; 24
     4bc:	71 e0       	ldi	r23, 0x01	; 1
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <_Z11printhhmmssR4Zeit+0x66>
     4c0:	6b e1       	ldi	r22, 0x1B	; 27
     4c2:	71 e0       	ldi	r23, 0x01	; 1
     4c4:	84 ef       	ldi	r24, 0xF4	; 244
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <_ZN5Print5printEPKc>
	lcd.print(z.GetSeconds());
     4cc:	6c 81       	ldd	r22, Y+4	; 0x04
     4ce:	7d 81       	ldd	r23, Y+5	; 0x05
     4d0:	4a e0       	ldi	r20, 0x0A	; 10
     4d2:	50 e0       	ldi	r21, 0x00	; 0
     4d4:	84 ef       	ldi	r24, 0xF4	; 244
     4d6:	91 e0       	ldi	r25, 0x01	; 1
}
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
	if(z.GetHours()<=9)lcd.print("0");
	lcd.print(z.GetHours());
	if(z.GetMinutes()<=9)lcd.print(":0"); else lcd.print(":");
	lcd.print(z.GetMinutes());
	if(z.GetSeconds()<=9)lcd.print(":0"); else lcd.print(":");
	lcd.print(z.GetSeconds());
     4dc:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <_ZN5Print5printEii>

000004e0 <_Z17printHumidityTempv>:
 * @brief print the humidity and temp on the lcd
 * @return void
 */
void printHumidityTemp (void)
{
	lcd.setCursor(0,1);
     4e0:	41 e0       	ldi	r20, 0x01	; 1
     4e2:	60 e0       	ldi	r22, 0x00	; 0
     4e4:	84 ef       	ldi	r24, 0xF4	; 244
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	0e 94 c7 08 	call	0x118e	; 0x118e <_ZN7hd447809setCursorEhh>
	lcd.print("Hum  &  Temp");
     4ec:	6d e1       	ldi	r22, 0x1D	; 29
     4ee:	71 e0       	ldi	r23, 0x01	; 1
     4f0:	84 ef       	ldi	r24, 0xF4	; 244
     4f2:	91 e0       	ldi	r25, 0x01	; 1
     4f4:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <_ZN5Print5printEPKc>

000004f8 <_Z10homeScreeni>:
 * @param[in] key : int, user input
 *
 * @return key
 */
int homeScreen(int key)
{
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	ec 01       	movw	r28, r24
	lcd.setCursor(0,0);
     4fe:	40 e0       	ldi	r20, 0x00	; 0
     500:	60 e0       	ldi	r22, 0x00	; 0
     502:	84 ef       	ldi	r24, 0xF4	; 244
     504:	91 e0       	ldi	r25, 0x01	; 1
     506:	0e 94 c7 08 	call	0x118e	; 0x118e <_ZN7hd447809setCursorEhh>
	printhhmmss(zeitLocal);
     50a:	8c ee       	ldi	r24, 0xEC	; 236
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z11printhhmmssR4Zeit>
	printHumidityTemp();
     512:	0e 94 70 02 	call	0x4e0	; 0x4e0 <_Z17printHumidityTempv>
	
	return key;
}
     516:	ce 01       	movw	r24, r28
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	08 95       	ret

0000051e <_Z14changeTimeZonei>:

int changeTimeZone (int key)
{
	switch (key)
     51e:	84 30       	cpi	r24, 0x04	; 4
     520:	91 05       	cpc	r25, r1
     522:	41 f1       	breq	.+80     	; 0x574 <_Z14changeTimeZonei+0x56>
     524:	3c f4       	brge	.+14     	; 0x534 <_Z14changeTimeZonei+0x16>
     526:	81 30       	cpi	r24, 0x01	; 1
     528:	91 05       	cpc	r25, r1
     52a:	a1 f0       	breq	.+40     	; 0x554 <_Z14changeTimeZonei+0x36>
     52c:	83 30       	cpi	r24, 0x03	; 3
     52e:	91 05       	cpc	r25, r1
     530:	39 f0       	breq	.+14     	; 0x540 <_Z14changeTimeZonei+0x22>
     532:	08 95       	ret
     534:	85 30       	cpi	r24, 0x05	; 5
     536:	91 05       	cpc	r25, r1
     538:	e9 f0       	breq	.+58     	; 0x574 <_Z14changeTimeZonei+0x56>
     53a:	8a 30       	cpi	r24, 0x0A	; 10
     53c:	91 05       	cpc	r25, r1
     53e:	19 f5       	brne	.+70     	; 0x586 <_Z14changeTimeZonei+0x68>
	{
		case X_KEY:
		//zeit2 = zeitLocal;
		case DOWN_KEY:
		lcd.clear();
     540:	84 ef       	ldi	r24, 0xF4	; 244
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	0e 94 c1 08 	call	0x1182	; 0x1182 <_ZN7hd447805clearEv>
		zeit2.hh_-=1;
     548:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <zeit2>
     54c:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <zeit2+0x1>
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	09 c0       	rjmp	.+18     	; 0x566 <_Z14changeTimeZonei+0x48>
		key = X_KEY;
		break;
		case UP_KEY:
		lcd.clear();
     554:	84 ef       	ldi	r24, 0xF4	; 244
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	0e 94 c1 08 	call	0x1182	; 0x1182 <_ZN7hd447805clearEv>
		zeit2.hh_+=1;
     55c:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <zeit2>
     560:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <zeit2+0x1>
     564:	01 96       	adiw	r24, 0x01	; 1
     566:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <zeit2+0x1>
     56a:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <zeit2>
		key = X_KEY;
     56e:	8a e0       	ldi	r24, 0x0A	; 10
     570:	90 e0       	ldi	r25, 0x00	; 0
		break;
     572:	08 95       	ret
		case OK_KEY:
		zeitLocal = zeit2;
		break;
		case RIGHT_KEY:
		zeitLocal = zeit2;
     574:	28 e0       	ldi	r18, 0x08	; 8
     576:	e4 ee       	ldi	r30, 0xE4	; 228
     578:	f1 e0       	ldi	r31, 0x01	; 1
     57a:	ac ee       	ldi	r26, 0xEC	; 236
     57c:	b1 e0       	ldi	r27, 0x01	; 1
     57e:	01 90       	ld	r0, Z+
     580:	0d 92       	st	X+, r0
     582:	2a 95       	dec	r18
     584:	e1 f7       	brne	.-8      	; 0x57e <_Z14changeTimeZonei+0x60>
		break;
	}
	return key;
}
     586:	08 95       	ret

00000588 <_Z9timeZonesi>:

int timeZones(int key)
{
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
	int input = changeTimeZone(key);
     58c:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z14changeTimeZonei>
     590:	ec 01       	movw	r28, r24
	lcd.setCursor(0,1);
     592:	41 e0       	ldi	r20, 0x01	; 1
     594:	60 e0       	ldi	r22, 0x00	; 0
     596:	84 ef       	ldi	r24, 0xF4	; 244
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	0e 94 c7 08 	call	0x118e	; 0x118e <_ZN7hd447809setCursorEhh>
	printhhmmss(zeit2);
     59e:	84 ee       	ldi	r24, 0xE4	; 228
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z11printhhmmssR4Zeit>
	return input;
}
     5a6:	ce 01       	movw	r24, r28
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	08 95       	ret

000005ae <setup>:
 * called once at program startup
 * \return void
 */
void setup()
{
	lcd.begin(16, 2);
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	42 e0       	ldi	r20, 0x02	; 2
     5b2:	60 e1       	ldi	r22, 0x10	; 16
     5b4:	84 ef       	ldi	r24, 0xF4	; 244
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	0e 94 ed 08 	call	0x11da	; 0x11da <_ZN7hd447805beginEhhh>
	lcd.noBacklight();
     5bc:	84 ef       	ldi	r24, 0xF4	; 244
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	0e 94 82 08 	call	0x1104	; 0x1104 <_ZN7hd4478011noBacklightEv>
	lcd.noCursor();
     5c4:	84 ef       	ldi	r24, 0xF4	; 244
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	0e 94 87 09 	call	0x130e	; 0x130e <_ZN7hd447808noCursorEv>
	lcd.home();
     5cc:	84 ef       	ldi	r24, 0xF4	; 244
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	0e 94 c4 08 	call	0x1188	; 0x1188 <_ZN7hd447804homeEv>
	lcd.print("Romeo V2.2 Watch");
     5d4:	6a e2       	ldi	r22, 0x2A	; 42
     5d6:	71 e0       	ldi	r23, 0x01	; 1
     5d8:	84 ef       	ldi	r24, 0xF4	; 244
     5da:	91 e0       	ldi	r25, 0x01	; 1
     5dc:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
     5e0:	41 e0       	ldi	r20, 0x01	; 1
     5e2:	60 e0       	ldi	r22, 0x00	; 0
     5e4:	84 ef       	ldi	r24, 0xF4	; 244
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	0e 94 c7 08 	call	0x118e	; 0x118e <_ZN7hd447809setCursorEhh>
	lcd.print("Coray / Bruno");
     5ec:	6b e3       	ldi	r22, 0x3B	; 59
     5ee:	71 e0       	ldi	r23, 0x01	; 1
     5f0:	84 ef       	ldi	r24, 0xF4	; 244
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <_ZN5Print5printEPKc>
	while(millis()<3000);
     5f8:	0e 94 f7 12 	call	0x25ee	; 0x25ee <millis>
     5fc:	68 3b       	cpi	r22, 0xB8	; 184
     5fe:	7b 40       	sbci	r23, 0x0B	; 11
     600:	81 05       	cpc	r24, r1
     602:	91 05       	cpc	r25, r1
     604:	c8 f3       	brcs	.-14     	; 0x5f8 <setup+0x4a>
	lcd.clear();
     606:	84 ef       	ldi	r24, 0xF4	; 244
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <_ZN7hd447805clearEv>

0000060e <loop>:
 * 
 * \return void
 */
void loop()
{
	Watch();
     60e:	0e 94 07 02 	call	0x40e	; 0x40e <_Z5Watchv>
	input = getkey();
     612:	0e 94 0e 01 	call	0x21c	; 0x21c <_Z6getkeyv>
     616:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <_ZL5input+0x1>
     61a:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <_ZL5input>
	if (watchmenu[menu].active) 
     61e:	20 91 e2 01 	lds	r18, 0x01E2	; 0x8001e2 <_ZL4menu>
     622:	30 91 e3 01 	lds	r19, 0x01E3	; 0x8001e3 <_ZL4menu+0x1>
     626:	42 e1       	ldi	r20, 0x12	; 18
     628:	42 9f       	mul	r20, r18
     62a:	f0 01       	movw	r30, r0
     62c:	43 9f       	mul	r20, r19
     62e:	f0 0d       	add	r31, r0
     630:	11 24       	eor	r1, r1
     632:	e1 5a       	subi	r30, 0xA1	; 161
     634:	fe 4f       	sbci	r31, 0xFE	; 254
     636:	04 84       	ldd	r0, Z+12	; 0x0c
     638:	f5 85       	ldd	r31, Z+13	; 0x0d
     63a:	e0 2d       	mov	r30, r0
     63c:	30 97       	sbiw	r30, 0x00	; 0
     63e:	29 f0       	breq	.+10     	; 0x64a <loop+0x3c>
		input = watchmenu[menu].active(input);
     640:	09 95       	icall
     642:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <_ZL5input+0x1>
     646:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <_ZL5input>
		//! cyclic call to active function as long as menu n is active
	switch(input) {
     64a:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <_ZL5input>
     64e:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <_ZL5input+0x1>
     652:	83 30       	cpi	r24, 0x03	; 3
     654:	91 05       	cpc	r25, r1
     656:	e9 f1       	breq	.+122    	; 0x6d2 <loop+0xc4>
     658:	34 f4       	brge	.+12     	; 0x666 <loop+0x58>
     65a:	81 30       	cpi	r24, 0x01	; 1
     65c:	91 05       	cpc	r25, r1
     65e:	79 f0       	breq	.+30     	; 0x67e <loop+0x70>
     660:	02 97       	sbiw	r24, 0x02	; 2
     662:	21 f1       	breq	.+72     	; 0x6ac <loop+0x9e>
     664:	09 c0       	rjmp	.+18     	; 0x678 <loop+0x6a>
     666:	85 30       	cpi	r24, 0x05	; 5
     668:	91 05       	cpc	r25, r1
     66a:	09 f4       	brne	.+2      	; 0x66e <loop+0x60>
     66c:	6a c0       	rjmp	.+212    	; 0x742 <loop+0x134>
     66e:	0c f4       	brge	.+2      	; 0x672 <loop+0x64>
     670:	43 c0       	rjmp	.+134    	; 0x6f8 <loop+0xea>
     672:	06 97       	sbiw	r24, 0x06	; 6
     674:	09 f4       	brne	.+2      	; 0x678 <loop+0x6a>
     676:	8a c0       	rjmp	.+276    	; 0x78c <loop+0x17e>
		default:
		case X_KEY:
		case NO_KEY:
		newmenu = -1; // no changes made
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	9f ef       	ldi	r25, 0xFF	; 255
     67c:	12 c0       	rjmp	.+36     	; 0x6a2 <loop+0x94>
		break;
		case UP_KEY:
		lcd.clear();
     67e:	84 ef       	ldi	r24, 0xF4	; 244
     680:	91 e0       	ldi	r25, 0x01	; 1
     682:	0e 94 c1 08 	call	0x1182	; 0x1182 <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].up;
     686:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <_ZL4menu>
     68a:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <_ZL4menu+0x1>
     68e:	22 e1       	ldi	r18, 0x12	; 18
     690:	28 9f       	mul	r18, r24
     692:	f0 01       	movw	r30, r0
     694:	29 9f       	mul	r18, r25
     696:	f0 0d       	add	r31, r0
     698:	11 24       	eor	r1, r1
     69a:	e1 5a       	subi	r30, 0xA1	; 161
     69c:	fe 4f       	sbci	r31, 0xFE	; 254
     69e:	82 81       	ldd	r24, Z+2	; 0x02
     6a0:	93 81       	ldd	r25, Z+3	; 0x03
     6a2:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <_ZL7newmenu+0x1>
     6a6:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <_ZL7newmenu>
		break;
     6aa:	80 c0       	rjmp	.+256    	; 0x7ac <loop+0x19e>
		case LEFT_KEY:
		lcd.clear();
     6ac:	84 ef       	ldi	r24, 0xF4	; 244
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	0e 94 c1 08 	call	0x1182	; 0x1182 <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].left;
     6b4:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <_ZL4menu>
     6b8:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <_ZL4menu+0x1>
     6bc:	22 e1       	ldi	r18, 0x12	; 18
     6be:	28 9f       	mul	r18, r24
     6c0:	f0 01       	movw	r30, r0
     6c2:	29 9f       	mul	r18, r25
     6c4:	f0 0d       	add	r31, r0
     6c6:	11 24       	eor	r1, r1
     6c8:	e1 5a       	subi	r30, 0xA1	; 161
     6ca:	fe 4f       	sbci	r31, 0xFE	; 254
     6cc:	84 81       	ldd	r24, Z+4	; 0x04
     6ce:	95 81       	ldd	r25, Z+5	; 0x05
     6d0:	e8 cf       	rjmp	.-48     	; 0x6a2 <loop+0x94>
		break;
		case DOWN_KEY:
		lcd.clear();
     6d2:	84 ef       	ldi	r24, 0xF4	; 244
     6d4:	91 e0       	ldi	r25, 0x01	; 1
     6d6:	0e 94 c1 08 	call	0x1182	; 0x1182 <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].down;
     6da:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <_ZL4menu>
     6de:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <_ZL4menu+0x1>
     6e2:	22 e1       	ldi	r18, 0x12	; 18
     6e4:	28 9f       	mul	r18, r24
     6e6:	f0 01       	movw	r30, r0
     6e8:	29 9f       	mul	r18, r25
     6ea:	f0 0d       	add	r31, r0
     6ec:	11 24       	eor	r1, r1
     6ee:	e1 5a       	subi	r30, 0xA1	; 161
     6f0:	fe 4f       	sbci	r31, 0xFE	; 254
     6f2:	86 81       	ldd	r24, Z+6	; 0x06
     6f4:	97 81       	ldd	r25, Z+7	; 0x07
     6f6:	d5 cf       	rjmp	.-86     	; 0x6a2 <loop+0x94>
		break;
		case RIGHT_KEY:
		lcd.clear();
     6f8:	84 ef       	ldi	r24, 0xF4	; 244
     6fa:	91 e0       	ldi	r25, 0x01	; 1
     6fc:	0e 94 c1 08 	call	0x1182	; 0x1182 <_ZN7hd447805clearEv>
		if(watchmenu[menu].goright != NULL) {
     700:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <_ZL4menu>
     704:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <_ZL4menu+0x1>
     708:	22 e1       	ldi	r18, 0x12	; 18
     70a:	28 9f       	mul	r18, r24
     70c:	f0 01       	movw	r30, r0
     70e:	29 9f       	mul	r18, r25
     710:	f0 0d       	add	r31, r0
     712:	11 24       	eor	r1, r1
     714:	e1 5a       	subi	r30, 0xA1	; 161
     716:	fe 4f       	sbci	r31, 0xFE	; 254
     718:	06 84       	ldd	r0, Z+14	; 0x0e
     71a:	f7 85       	ldd	r31, Z+15	; 0x0f
     71c:	e0 2d       	mov	r30, r0
     71e:	30 97       	sbiw	r30, 0x00	; 0
     720:	09 f0       	breq	.+2      	; 0x724 <loop+0x116>
			//! call go right function with new value
			watchmenu[menu].goright();
     722:	09 95       	icall
		}
		newmenu = watchmenu[menu].right;
     724:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <_ZL4menu>
     728:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <_ZL4menu+0x1>
     72c:	22 e1       	ldi	r18, 0x12	; 18
     72e:	28 9f       	mul	r18, r24
     730:	f0 01       	movw	r30, r0
     732:	29 9f       	mul	r18, r25
     734:	f0 0d       	add	r31, r0
     736:	11 24       	eor	r1, r1
     738:	e1 5a       	subi	r30, 0xA1	; 161
     73a:	fe 4f       	sbci	r31, 0xFE	; 254
     73c:	80 85       	ldd	r24, Z+8	; 0x08
     73e:	91 85       	ldd	r25, Z+9	; 0x09
     740:	b0 cf       	rjmp	.-160    	; 0x6a2 <loop+0x94>
		break;
		case OK_KEY:
		lcd.clear();
     742:	84 ef       	ldi	r24, 0xF4	; 244
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	0e 94 c1 08 	call	0x1182	; 0x1182 <_ZN7hd447805clearEv>
		if(watchmenu[menu].positive != NULL) {
     74a:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <_ZL4menu>
     74e:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <_ZL4menu+0x1>
     752:	22 e1       	ldi	r18, 0x12	; 18
     754:	28 9f       	mul	r18, r24
     756:	f0 01       	movw	r30, r0
     758:	29 9f       	mul	r18, r25
     75a:	f0 0d       	add	r31, r0
     75c:	11 24       	eor	r1, r1
     75e:	e1 5a       	subi	r30, 0xA1	; 161
     760:	fe 4f       	sbci	r31, 0xFE	; 254
     762:	00 88       	ldd	r0, Z+16	; 0x10
     764:	f1 89       	ldd	r31, Z+17	; 0x11
     766:	e0 2d       	mov	r30, r0
     768:	30 97       	sbiw	r30, 0x00	; 0
     76a:	09 f0       	breq	.+2      	; 0x76e <loop+0x160>
			//! call positive answer function with new value
			watchmenu[menu].positive();
     76c:	09 95       	icall
		}
		newmenu = watchmenu[menu].ok;
     76e:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <_ZL4menu>
     772:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <_ZL4menu+0x1>
     776:	22 e1       	ldi	r18, 0x12	; 18
     778:	28 9f       	mul	r18, r24
     77a:	f0 01       	movw	r30, r0
     77c:	29 9f       	mul	r18, r25
     77e:	f0 0d       	add	r31, r0
     780:	11 24       	eor	r1, r1
     782:	e1 5a       	subi	r30, 0xA1	; 161
     784:	fe 4f       	sbci	r31, 0xFE	; 254
     786:	82 85       	ldd	r24, Z+10	; 0x0a
     788:	93 85       	ldd	r25, Z+11	; 0x0b
     78a:	8b cf       	rjmp	.-234    	; 0x6a2 <loop+0x94>
		break;
		case BK_KEY:
		lcd.clear();
     78c:	84 ef       	ldi	r24, 0xF4	; 244
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	0e 94 c1 08 	call	0x1182	; 0x1182 <_ZN7hd447805clearEv>
		lcd.noCursor();
     794:	84 ef       	ldi	r24, 0xF4	; 244
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	0e 94 87 09 	call	0x130e	; 0x130e <_ZN7hd447808noCursorEv>
		lcd.noBlink();
     79c:	84 ef       	ldi	r24, 0xF4	; 244
     79e:	91 e0       	ldi	r25, 0x01	; 1
     7a0:	0e 94 8e 09 	call	0x131c	; 0x131c <_ZN7hd447807noBlinkEv>
		newmenu = 0;
     7a4:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <_ZL7newmenu+0x1>
     7a8:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <_ZL7newmenu>
		break;
	}
	if(newmenu >= 0){
     7ac:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <_ZL7newmenu>
     7b0:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <_ZL7newmenu+0x1>
     7b4:	97 fd       	sbrc	r25, 7
     7b6:	21 c0       	rjmp	.+66     	; 0x7fa <loop+0x1ec>
		menu = newmenu;
     7b8:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <_ZL4menu+0x1>
     7bc:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <_ZL4menu>
		lcd.setCursor(0, 0);
     7c0:	40 e0       	ldi	r20, 0x00	; 0
     7c2:	60 e0       	ldi	r22, 0x00	; 0
     7c4:	84 ef       	ldi	r24, 0xF4	; 244
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	0e 94 c7 08 	call	0x118e	; 0x118e <_ZN7hd447809setCursorEhh>
		lcd.print(ROM(watchmenu[menu].text1));
     7cc:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <_ZL4menu>
     7d0:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <_ZL4menu+0x1>
     7d4:	22 e1       	ldi	r18, 0x12	; 18
     7d6:	28 9f       	mul	r18, r24
     7d8:	f0 01       	movw	r30, r0
     7da:	29 9f       	mul	r18, r25
     7dc:	f0 0d       	add	r31, r0
     7de:	11 24       	eor	r1, r1
     7e0:	e1 5a       	subi	r30, 0xA1	; 161
     7e2:	fe 4f       	sbci	r31, 0xFE	; 254
     7e4:	60 81       	ld	r22, Z
     7e6:	71 81       	ldd	r23, Z+1	; 0x01
     7e8:	8a ec       	ldi	r24, 0xCA	; 202
     7ea:	91 e0       	ldi	r25, 0x01	; 1
     7ec:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <strcpy_P>
     7f0:	bc 01       	movw	r22, r24
     7f2:	84 ef       	ldi	r24, 0xF4	; 244
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <_ZN5Print5printEPKc>
     7fa:	08 95       	ret

000007fc <_GLOBAL__sub_I_lcd>:
// ====================

//	-- Automagic / auto-detect constructors --

// Auto find next instance and auto config pin mapping
hd44780_I2Cexp(){ _addr = 0; _expType = I2Cexp_UNKNOWN;}
     7fc:	84 ef       	ldi	r24, 0xF4	; 244
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	0e 94 4d 08 	call	0x109a	; 0x109a <_ZN7hd44780C1Ev>
     804:	e4 ef       	ldi	r30, 0xF4	; 244
     806:	f1 e0       	ldi	r31, 0x01	; 1
     808:	8d e4       	ldi	r24, 0x4D	; 77
     80a:	91 e0       	ldi	r25, 0x01	; 1
     80c:	91 83       	std	Z+1, r25	; 0x01
     80e:	80 83       	st	Z, r24
     810:	10 a2       	std	Z+32, r1	; 0x20
     812:	11 a2       	std	Z+33, r1	; 0x21
	int hh_;
	int mm_;
	int ss_;
	int set_;
public:
	Zeit(int h, int m, int s){ hh_=h; mm_=m; ss_=s; set_ =0;};
     814:	ec ee       	ldi	r30, 0xEC	; 236
     816:	f1 e0       	ldi	r31, 0x01	; 1
     818:	81 e1       	ldi	r24, 0x11	; 17
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	91 83       	std	Z+1, r25	; 0x01
     81e:	80 83       	st	Z, r24
     820:	8f e0       	ldi	r24, 0x0F	; 15
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	93 83       	std	Z+3, r25	; 0x03
     826:	82 83       	std	Z+2, r24	; 0x02
     828:	15 82       	std	Z+5, r1	; 0x05
     82a:	14 82       	std	Z+4, r1	; 0x04
     82c:	17 82       	std	Z+7, r1	; 0x07
     82e:	16 82       	std	Z+6, r1	; 0x06
     830:	e4 ee       	ldi	r30, 0xE4	; 228
     832:	f1 e0       	ldi	r31, 0x01	; 1
     834:	8c e0       	ldi	r24, 0x0C	; 12
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	91 83       	std	Z+1, r25	; 0x01
     83a:	80 83       	st	Z, r24
     83c:	13 82       	std	Z+3, r1	; 0x03
     83e:	12 82       	std	Z+2, r1	; 0x02
     840:	15 82       	std	Z+5, r1	; 0x05
     842:	14 82       	std	Z+4, r1	; 0x04
     844:	17 82       	std	Z+7, r1	; 0x07
     846:	16 82       	std	Z+6, r1	; 0x06
     848:	08 95       	ret

0000084a <_ZN14hd44780_I2Cexp14iosetBacklightEh>:
}

// iosetBacklight()  - set backlight brightness
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	fc 01       	movw	r30, r24
{
	if(!_bl) // backlight control?
     850:	81 a5       	ldd	r24, Z+41	; 0x29
     852:	88 23       	and	r24, r24
     854:	71 f1       	breq	.+92     	; 0x8b2 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x68>
     856:	92 a5       	ldd	r25, Z+42	; 0x2a
		return(hd44780::RV_ENOTSUP); // not backlight control support

	// dimvalue 0 is backlight off any other dimvalue is backlight on
	// configure backlight state mask according to active level
	if(((dimvalue) && (_blLevel == HIGH)) || 
     858:	66 23       	and	r22, r22
     85a:	19 f0       	breq	.+6      	; 0x862 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x18>
     85c:	91 30       	cpi	r25, 0x01	; 1
     85e:	29 f4       	brne	.+10     	; 0x86a <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
     860:	02 c0       	rjmp	.+4      	; 0x866 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x1c>
			((dimvalue == 0) && (_blLevel == LOW)))
     862:	91 11       	cpse	r25, r1
     864:	02 c0       	rjmp	.+4      	; 0x86a <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
	{
		_blCurState = _bl;
     866:	83 a7       	std	Z+43, r24	; 0x2b
     868:	01 c0       	rjmp	.+2      	; 0x86c <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x22>
	}
	else 
	{
		_blCurState = 0;
     86a:	13 a6       	std	Z+43, r1	; 0x2b
     86c:	ef 01       	movw	r28, r30
	}
	Wire.beginTransmission(_addr);
     86e:	60 a1       	ldd	r22, Z+32	; 0x20
     870:	8f e8       	ldi	r24, 0x8F	; 143
     872:	92 e0       	ldi	r25, 0x02	; 2
     874:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
     878:	89 a1       	ldd	r24, Y+33	; 0x21
     87a:	82 30       	cpi	r24, 0x02	; 2
     87c:	31 f4       	brne	.+12     	; 0x88a <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x40>
	{
		Wire.write(9); // point to GPIO
     87e:	69 e0       	ldi	r22, 0x09	; 9
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	8f e8       	ldi	r24, 0x8F	; 143
     884:	92 e0       	ldi	r25, 0x02	; 2
     886:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_ZN7TwoWire5writeEi>
	}
	Wire.write( _blCurState );
     88a:	6b a5       	ldd	r22, Y+43	; 0x2b
     88c:	8f e8       	ldi	r24, 0x8F	; 143
     88e:	92 e0       	ldi	r25, 0x02	; 2
     890:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     894:	8f e8       	ldi	r24, 0x8F	; 143
     896:	92 e0       	ldi	r25, 0x02	; 2
     898:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN7TwoWire15endTransmissionEv>
     89c:	21 e0       	ldi	r18, 0x01	; 1
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	81 11       	cpse	r24, r1
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x5e>
     8a4:	20 e0       	ldi	r18, 0x00	; 0
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	88 27       	eor	r24, r24
     8aa:	99 27       	eor	r25, r25
     8ac:	82 1b       	sub	r24, r18
     8ae:	93 0b       	sbc	r25, r19
     8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x6c>
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
{
	if(!_bl) // backlight control?
		return(hd44780::RV_ENOTSUP); // not backlight control support
     8b2:	8d ef       	ldi	r24, 0xFD	; 253
     8b4:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write( _blCurState );
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR); // all is good
}
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	08 95       	ret

000008bc <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>:
	return(0);
}


// write4bits - send a nibble to the LCD through i/o expander port
void write4bits(uint8_t value, hd44780::iotype type ) 
     8bc:	cf 93       	push	r28
     8be:	fc 01       	movw	r30, r24
{
uint8_t gpioValue =  _blCurState;
     8c0:	c3 a5       	ldd	r28, Z+43	; 0x2b
   
	// convert the value to an i/o expander port value
	// based on pin mappings
	if(value & (1 << 0))
     8c2:	60 ff       	sbrs	r22, 0
     8c4:	02 c0       	rjmp	.+4      	; 0x8ca <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0xe>
		gpioValue |= _d4;
     8c6:	85 a1       	ldd	r24, Z+37	; 0x25
     8c8:	c8 2b       	or	r28, r24

	if(value & (1 << 1))
     8ca:	61 ff       	sbrs	r22, 1
     8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x16>
		gpioValue |= _d5;
     8ce:	86 a1       	ldd	r24, Z+38	; 0x26
     8d0:	c8 2b       	or	r28, r24

	if(value & (1 << 2))
     8d2:	62 ff       	sbrs	r22, 2
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x1e>
		gpioValue |= _d6;
     8d6:	87 a1       	ldd	r24, Z+39	; 0x27
     8d8:	c8 2b       	or	r28, r24

	if(value & (1 << 3))
     8da:	63 ff       	sbrs	r22, 3
     8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x26>
		gpioValue |= _d7;
     8de:	80 a5       	ldd	r24, Z+40	; 0x28
     8e0:	c8 2b       	or	r28, r24


	if(type == hd44780::HD44780_IOdata) 
     8e2:	41 30       	cpi	r20, 0x01	; 1
     8e4:	11 f4       	brne	.+4      	; 0x8ea <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x2e>
	{
		gpioValue |= _rs; // set RS high to send to data reg
     8e6:	82 a1       	ldd	r24, Z+34	; 0x22
     8e8:	c8 2b       	or	r28, r24
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
     8ea:	64 a1       	ldd	r22, Z+36	; 0x24
     8ec:	6c 2b       	or	r22, r28
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	8f e8       	ldi	r24, 0x8F	; 143
     8f2:	92 e0       	ldi	r25, 0x02	; 2
     8f4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_ZN7TwoWire5writeEi>
	Wire.write(gpioValue);		// with E LOW
     8f8:	6c 2f       	mov	r22, r28
     8fa:	8f e8       	ldi	r24, 0x8F	; 143
     8fc:	92 e0       	ldi	r25, 0x02	; 2
}
     8fe:	cf 91       	pop	r28
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
	Wire.write(gpioValue);		// with E LOW
     900:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <_ZN7TwoWire5writeEh>

00000904 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh>:
	return(rval);
}

// iowrite(type, value) - send either command or data byte to lcd
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
     904:	8f 92       	push	r8
     906:	9f 92       	push	r9
     908:	af 92       	push	r10
     90a:	bf 92       	push	r11
     90c:	cf 92       	push	r12
     90e:	df 92       	push	r13
     910:	ef 92       	push	r14
     912:	ff 92       	push	r15
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	ec 01       	movw	r28, r24
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
     91e:	88 a1       	ldd	r24, Y+32	; 0x20
     920:	88 23       	and	r24, r24
     922:	09 f4       	brne	.+2      	; 0x926 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x22>
     924:	50 c0       	rjmp	.+160    	; 0x9c6 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
     926:	89 a1       	ldd	r24, Y+33	; 0x21
     928:	88 23       	and	r24, r24
     92a:	09 f4       	brne	.+2      	; 0x92e <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x2a>
     92c:	4c c0       	rjmp	.+152    	; 0x9c6 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
     92e:	14 2f       	mov	r17, r20
     930:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
     932:	8c 8c       	ldd	r8, Y+28	; 0x1c
     934:	9d 8c       	ldd	r9, Y+29	; 0x1d
     936:	ae 8c       	ldd	r10, Y+30	; 0x1e
     938:	bf 8c       	ldd	r11, Y+31	; 0x1f
     93a:	c8 8c       	ldd	r12, Y+24	; 0x18
     93c:	d9 8c       	ldd	r13, Y+25	; 0x19
     93e:	ea 8c       	ldd	r14, Y+26	; 0x1a
     940:	fb 8c       	ldd	r15, Y+27	; 0x1b
     942:	8d e2       	ldi	r24, 0x2D	; 45
     944:	c8 1a       	sub	r12, r24
     946:	d1 08       	sbc	r13, r1
     948:	e1 08       	sbc	r14, r1
     94a:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
     94c:	0e 94 03 13 	call	0x2606	; 0x2606 <micros>
     950:	dc 01       	movw	r26, r24
     952:	cb 01       	movw	r24, r22
     954:	8c 19       	sub	r24, r12
     956:	9d 09       	sbc	r25, r13
     958:	ae 09       	sbc	r26, r14
     95a:	bf 09       	sbc	r27, r15
     95c:	88 15       	cp	r24, r8
     95e:	99 05       	cpc	r25, r9
     960:	aa 05       	cpc	r26, r10
     962:	bb 05       	cpc	r27, r11
     964:	98 f3       	brcs	.-26     	; 0x94c <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x48>
	 */

	waitReady(-45);
   
	// grab i2c bus
	Wire.beginTransmission(_addr);
     966:	68 a1       	ldd	r22, Y+32	; 0x20
     968:	8f e8       	ldi	r24, 0x8F	; 143
     96a:	92 e0       	ldi	r25, 0x02	; 2
     96c:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
     970:	89 a1       	ldd	r24, Y+33	; 0x21
     972:	82 30       	cpi	r24, 0x02	; 2
     974:	31 f4       	brne	.+12     	; 0x982 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x7e>
	{
		Wire.write(9); // point to GPIO
     976:	69 e0       	ldi	r22, 0x09	; 9
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	8f e8       	ldi	r24, 0x8F	; 143
     97c:	92 e0       	ldi	r25, 0x02	; 2
     97e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_ZN7TwoWire5writeEi>
	}
	// send both nibbles in same i2c connection
	write4bits( (value >> 4), type );  // send upper nibble
     982:	61 2f       	mov	r22, r17
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	84 e0       	ldi	r24, 0x04	; 4
     988:	75 95       	asr	r23
     98a:	67 95       	ror	r22
     98c:	8a 95       	dec	r24
     98e:	e1 f7       	brne	.-8      	; 0x988 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x84>
     990:	40 2f       	mov	r20, r16
     992:	ce 01       	movw	r24, r28
     994:	0e 94 5e 04 	call	0x8bc	; 0x8bc <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	 * are used to reliably get the LCD and host in nibble sync
	 * with each other and to get the LCD into 4 bit mode.
	 * When sending a "4 bit command" only the upper nibble of
	 * of the 8 bit byte will presented on LCD signals D4-D7.
	 */
	if(type != hd44780::HD44780_IOcmd4bit)
     998:	02 30       	cpi	r16, 0x02	; 2
     99a:	31 f0       	breq	.+12     	; 0x9a8 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xa4>
	{
		write4bits( (value & 0x0F), type); // lower nibble, if not 4bit cmd
     99c:	61 2f       	mov	r22, r17
     99e:	6f 70       	andi	r22, 0x0F	; 15
     9a0:	40 2f       	mov	r20, r16
     9a2:	ce 01       	movw	r24, r28
     9a4:	0e 94 5e 04 	call	0x8bc	; 0x8bc <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	}
	if(Wire.endTransmission())
     9a8:	8f e8       	ldi	r24, 0x8F	; 143
     9aa:	92 e0       	ldi	r25, 0x02	; 2
     9ac:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN7TwoWire15endTransmissionEv>
     9b0:	21 e0       	ldi	r18, 0x01	; 1
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	81 11       	cpse	r24, r1
     9b6:	02 c0       	rjmp	.+4      	; 0x9bc <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xb8>
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	88 27       	eor	r24, r24
     9be:	99 27       	eor	r25, r25
     9c0:	82 1b       	sub	r24, r18
     9c2:	93 0b       	sbc	r25, r19
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc6>
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
     9c6:	8c ef       	ldi	r24, 0xFC	; 252
     9c8:	9f ef       	ldi	r25, 0xFF	; 255
	}
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR);
}
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	ff 90       	pop	r15
     9d4:	ef 90       	pop	r14
     9d6:	df 90       	pop	r13
     9d8:	cf 90       	pop	r12
     9da:	bf 90       	pop	r11
     9dc:	af 90       	pop	r10
     9de:	9f 90       	pop	r9
     9e0:	8f 90       	pop	r8
     9e2:	08 95       	ret

000009e4 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE>:
// ioread(type) - read a byte from LCD DDRAM
//
// returns:
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
     9e4:	8f 92       	push	r8
     9e6:	9f 92       	push	r9
     9e8:	af 92       	push	r10
     9ea:	bf 92       	push	r11
     9ec:	cf 92       	push	r12
     9ee:	df 92       	push	r13
     9f0:	ef 92       	push	r14
     9f2:	ff 92       	push	r15
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	ec 01       	movw	r28, r24
{
uint8_t gpioValue =  _blCurState;
     9fe:	1b a5       	ldd	r17, Y+43	; 0x2b
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
     a00:	88 a1       	ldd	r24, Y+32	; 0x20
     a02:	88 23       	and	r24, r24
     a04:	09 f4       	brne	.+2      	; 0xa08 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x24>
     a06:	f6 c0       	rjmp	.+492    	; 0xbf4 <__stack+0xf5>
     a08:	89 a1       	ldd	r24, Y+33	; 0x21
     a0a:	88 23       	and	r24, r24
     a0c:	09 f4       	brne	.+2      	; 0xa10 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x2c>
     a0e:	f2 c0       	rjmp	.+484    	; 0xbf4 <__stack+0xf5>
		return(hd44780::RV_ENXIO);

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
     a10:	82 30       	cpi	r24, 0x02	; 2
     a12:	09 f4       	brne	.+2      	; 0xa16 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x32>
     a14:	f1 c0       	rjmp	.+482    	; 0xbf8 <__stack+0xf9>
	{
		return(hd44780::RV_ENOTSUP);
	}

	// check if reads supported
	if(!_rw)
     a16:	8b a1       	ldd	r24, Y+35	; 0x23
     a18:	88 23       	and	r24, r24
     a1a:	09 f4       	brne	.+2      	; 0xa1e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x3a>
     a1c:	ed c0       	rjmp	.+474    	; 0xbf8 <__stack+0xf9>
     a1e:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
     a20:	8c 8c       	ldd	r8, Y+28	; 0x1c
     a22:	9d 8c       	ldd	r9, Y+29	; 0x1d
     a24:	ae 8c       	ldd	r10, Y+30	; 0x1e
     a26:	bf 8c       	ldd	r11, Y+31	; 0x1f
     a28:	c8 8c       	ldd	r12, Y+24	; 0x18
     a2a:	d9 8c       	ldd	r13, Y+25	; 0x19
     a2c:	ea 8c       	ldd	r14, Y+26	; 0x1a
     a2e:	fb 8c       	ldd	r15, Y+27	; 0x1b
     a30:	8d e2       	ldi	r24, 0x2D	; 45
     a32:	c8 1a       	sub	r12, r24
     a34:	d1 08       	sbc	r13, r1
     a36:	e1 08       	sbc	r14, r1
     a38:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
     a3a:	0e 94 03 13 	call	0x2606	; 0x2606 <micros>
     a3e:	dc 01       	movw	r26, r24
     a40:	cb 01       	movw	r24, r22
     a42:	8c 19       	sub	r24, r12
     a44:	9d 09       	sbc	r25, r13
     a46:	ae 09       	sbc	r26, r14
     a48:	bf 09       	sbc	r27, r15
     a4a:	88 15       	cp	r24, r8
     a4c:	99 05       	cpc	r25, r9
     a4e:	aa 05       	cpc	r26, r10
     a50:	bb 05       	cpc	r27, r11
     a52:	98 f3       	brcs	.-26     	; 0xa3a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x56>
     a54:	8d a1       	ldd	r24, Y+37	; 0x25
     a56:	18 2b       	or	r17, r24
     a58:	8e a1       	ldd	r24, Y+38	; 0x26
     a5a:	18 2b       	or	r17, r24
     a5c:	8f a1       	ldd	r24, Y+39	; 0x27
     a5e:	18 2b       	or	r17, r24
   
	// put all the expander LCD data pins into input mode.
	// PCF8574 psuedo inputs use pullups so setting them to 1
	// makes them suitible for inputs.

	gpioValue |= _d4|_d5|_d6|_d7;
     a60:	88 a5       	ldd	r24, Y+40	; 0x28
     a62:	18 2b       	or	r17, r24

	// set RS based on type of read (data or status/cmd)
	if(type == hd44780::HD44780_IOdata) 
     a64:	01 30       	cpi	r16, 0x01	; 1
     a66:	11 f4       	brne	.+4      	; 0xa6c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x88>
	{
		gpioValue |= _rs; // RS high to read data reg
     a68:	8a a1       	ldd	r24, Y+34	; 0x22
     a6a:	18 2b       	or	r17, r24
	}

	gpioValue |= _rw; // r/w high for reading
     a6c:	8b a1       	ldd	r24, Y+35	; 0x23
     a6e:	18 2b       	or	r17, r24

	// write all the bits to the expander port
	
	Wire.beginTransmission(_addr);
     a70:	68 a1       	ldd	r22, Y+32	; 0x20
     a72:	8f e8       	ldi	r24, 0x8F	; 143
     a74:	92 e0       	ldi	r25, 0x02	; 2
     a76:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue);		// d4-d7 are inputs, RS, r/w high, E LOW
     a7a:	61 2f       	mov	r22, r17
     a7c:	8f e8       	ldi	r24, 0x8F	; 143
     a7e:	92 e0       	ldi	r25, 0x02	; 2
     a80:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     a84:	8f e8       	ldi	r24, 0x8F	; 143
     a86:	92 e0       	ldi	r25, 0x02	; 2
     a88:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN7TwoWire15endTransmissionEv>
     a8c:	88 23       	and	r24, r24
     a8e:	19 f0       	breq	.+6      	; 0xa96 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xb2>
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;
     a90:	0f ef       	ldi	r16, 0xFF	; 255
     a92:	1f ef       	ldi	r17, 0xFF	; 255
     a94:	9d c0       	rjmp	.+314    	; 0xbd0 <__stack+0xd1>
	if(Wire.endTransmission())
		goto returnStatus;


	// raise E to read the data.
	Wire.beginTransmission(_addr);
     a96:	68 a1       	ldd	r22, Y+32	; 0x20
     a98:	8f e8       	ldi	r24, 0x8F	; 143
     a9a:	92 e0       	ldi	r25, 0x02	; 2
     a9c:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raises E 
     aa0:	6c a1       	ldd	r22, Y+36	; 0x24
     aa2:	61 2b       	or	r22, r17
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	8f e8       	ldi	r24, 0x8F	; 143
     aa8:	92 e0       	ldi	r25, 0x02	; 2
     aaa:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
     aae:	8f e8       	ldi	r24, 0x8F	; 143
     ab0:	92 e0       	ldi	r25, 0x02	; 2
     ab2:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN7TwoWire15endTransmissionEv>
     ab6:	81 11       	cpse	r24, r1
     ab8:	eb cf       	rjmp	.-42     	; 0xa90 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// read the expander port to get the upper nibble of the byte
	Wire.requestFrom((int)_addr, 1);
     aba:	68 a1       	ldd	r22, Y+32	; 0x20
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	41 e0       	ldi	r20, 0x01	; 1
     ac0:	50 e0       	ldi	r21, 0x00	; 0
     ac2:	8f e8       	ldi	r24, 0x8F	; 143
     ac4:	92 e0       	ldi	r25, 0x02	; 2
     ac6:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <_ZN7TwoWire11requestFromEii>
	iodata = Wire.read();
     aca:	8f e8       	ldi	r24, 0x8F	; 143
     acc:	92 e0       	ldi	r25, 0x02	; 2
     ace:	0e 94 1b 0c 	call	0x1836	; 0x1836 <_ZN7TwoWire4readEv>
     ad2:	7c 01       	movw	r14, r24
	if(iodata < 0) // did we not receive a byte?
     ad4:	97 fd       	sbrc	r25, 7
     ad6:	dc cf       	rjmp	.-72     	; 0xa90 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
     ad8:	68 a1       	ldd	r22, Y+32	; 0x20
     ada:	8f e8       	ldi	r24, 0x8F	; 143
     adc:	92 e0       	ldi	r25, 0x02	; 2
     ade:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
     ae2:	61 2f       	mov	r22, r17
     ae4:	8f e8       	ldi	r24, 0x8F	; 143
     ae6:	92 e0       	ldi	r25, 0x02	; 2
     ae8:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     aec:	8f e8       	ldi	r24, 0x8F	; 143
     aee:	92 e0       	ldi	r25, 0x02	; 2
     af0:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN7TwoWire15endTransmissionEv>
     af4:	81 11       	cpse	r24, r1
     af6:	cc cf       	rjmp	.-104    	; 0xa90 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
     af8:	8d a1       	ldd	r24, Y+37	; 0x25
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	8e 21       	and	r24, r14
     afe:	9f 21       	and	r25, r15
     b00:	89 2b       	or	r24, r25
     b02:	11 f4       	brne	.+4      	; 0xb08 <__stack+0x9>
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
     b04:	00 e0       	ldi	r16, 0x00	; 0
     b06:	01 c0       	rjmp	.+2      	; 0xb0a <__stack+0xb>
	if(Wire.endTransmission())
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
		data |= (1 << 4);
     b08:	00 e1       	ldi	r16, 0x10	; 16

	if(iodata & _d5)
     b0a:	8e a1       	ldd	r24, Y+38	; 0x26
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	8e 21       	and	r24, r14
     b10:	9f 21       	and	r25, r15
     b12:	89 2b       	or	r24, r25
     b14:	09 f0       	breq	.+2      	; 0xb18 <__stack+0x19>
		data |= (1 << 5);
     b16:	00 62       	ori	r16, 0x20	; 32

	if(iodata & _d6)
     b18:	8f a1       	ldd	r24, Y+39	; 0x27
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	8e 21       	and	r24, r14
     b1e:	9f 21       	and	r25, r15
     b20:	89 2b       	or	r24, r25
     b22:	09 f0       	breq	.+2      	; 0xb26 <__stack+0x27>
		data |= (1 << 6);
     b24:	00 64       	ori	r16, 0x40	; 64

	if(iodata & _d7)
     b26:	88 a5       	ldd	r24, Y+40	; 0x28
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	e8 22       	and	r14, r24
     b2c:	f9 22       	and	r15, r25
     b2e:	ef 28       	or	r14, r15
     b30:	09 f0       	breq	.+2      	; 0xb34 <__stack+0x35>
		data |= (1 << 7);
     b32:	00 68       	ori	r16, 0x80	; 128
	
	Wire.beginTransmission(_addr);
     b34:	68 a1       	ldd	r22, Y+32	; 0x20
     b36:	8f e8       	ldi	r24, 0x8F	; 143
     b38:	92 e0       	ldi	r25, 0x02	; 2
     b3a:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raise E to read next nibble
     b3e:	6c a1       	ldd	r22, Y+36	; 0x24
     b40:	61 2b       	or	r22, r17
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	8f e8       	ldi	r24, 0x8F	; 143
     b46:	92 e0       	ldi	r25, 0x02	; 2
     b48:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
     b4c:	8f e8       	ldi	r24, 0x8F	; 143
     b4e:	92 e0       	ldi	r25, 0x02	; 2
     b50:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN7TwoWire15endTransmissionEv>
     b54:	81 11       	cpse	r24, r1
     b56:	9c cf       	rjmp	.-200    	; 0xa90 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>

	// read the expander port to get the lower nibble of the byte
	// We can't look at the return value from requestFrom() on the TineyWireM
	// library as it doesn't work like it is supposed to.
	// So we look at the return status from read() instead.
	Wire.requestFrom((int)_addr, 1);
     b58:	68 a1       	ldd	r22, Y+32	; 0x20
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	50 e0       	ldi	r21, 0x00	; 0
     b60:	8f e8       	ldi	r24, 0x8F	; 143
     b62:	92 e0       	ldi	r25, 0x02	; 2
     b64:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <_ZN7TwoWire11requestFromEii>

	iodata = Wire.read();
     b68:	8f e8       	ldi	r24, 0x8F	; 143
     b6a:	92 e0       	ldi	r25, 0x02	; 2
     b6c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <_ZN7TwoWire4readEv>
     b70:	7c 01       	movw	r14, r24

	if(iodata < 0) // did we not receive a byte?
     b72:	97 fd       	sbrc	r25, 7
     b74:	8d cf       	rjmp	.-230    	; 0xa90 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
     b76:	68 a1       	ldd	r22, Y+32	; 0x20
     b78:	8f e8       	ldi	r24, 0x8F	; 143
     b7a:	92 e0       	ldi	r25, 0x02	; 2
     b7c:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
     b80:	61 2f       	mov	r22, r17
     b82:	8f e8       	ldi	r24, 0x8F	; 143
     b84:	92 e0       	ldi	r25, 0x02	; 2
     b86:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     b8a:	8f e8       	ldi	r24, 0x8F	; 143
     b8c:	92 e0       	ldi	r25, 0x02	; 2
     b8e:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN7TwoWire15endTransmissionEv>
     b92:	81 11       	cpse	r24, r1
     b94:	7d cf       	rjmp	.-262    	; 0xa90 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into lower nibble of byte
	if(iodata & _d4)
     b96:	8d a1       	ldd	r24, Y+37	; 0x25
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	8e 21       	and	r24, r14
     b9c:	9f 21       	and	r25, r15
     b9e:	89 2b       	or	r24, r25
     ba0:	09 f0       	breq	.+2      	; 0xba4 <__stack+0xa5>
		data |= (1 << 0);
     ba2:	01 60       	ori	r16, 0x01	; 1

	if(iodata & _d5)
     ba4:	8e a1       	ldd	r24, Y+38	; 0x26
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	8e 21       	and	r24, r14
     baa:	9f 21       	and	r25, r15
     bac:	89 2b       	or	r24, r25
     bae:	09 f0       	breq	.+2      	; 0xbb2 <__stack+0xb3>
		data |= (1 << 1);
     bb0:	02 60       	ori	r16, 0x02	; 2

	if(iodata & _d6)
     bb2:	8f a1       	ldd	r24, Y+39	; 0x27
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	8e 21       	and	r24, r14
     bb8:	9f 21       	and	r25, r15
     bba:	89 2b       	or	r24, r25
     bbc:	09 f0       	breq	.+2      	; 0xbc0 <__stack+0xc1>
		data |= (1 << 2);
     bbe:	04 60       	ori	r16, 0x04	; 4

	if(iodata & _d7)
     bc0:	88 a5       	ldd	r24, Y+40	; 0x28
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	e8 22       	and	r14, r24
     bc6:	f9 22       	and	r15, r25
     bc8:	ef 28       	or	r14, r15
     bca:	09 f0       	breq	.+2      	; 0xbce <__stack+0xcf>
		data |= (1 << 3);
     bcc:	08 60       	ori	r16, 0x08	; 8

	rval = data;
     bce:	10 e0       	ldi	r17, 0x00	; 0

returnStatus:

	// try to put gpio port back to all outputs state with WR signal low for writes
	Wire.beginTransmission(_addr);
     bd0:	68 a1       	ldd	r22, Y+32	; 0x20
     bd2:	8f e8       	ldi	r24, 0x8F	; 143
     bd4:	92 e0       	ldi	r25, 0x02	; 2
     bd6:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(_blCurState);		// with E LOW
     bda:	6b a5       	ldd	r22, Y+43	; 0x2b
     bdc:	8f e8       	ldi	r24, 0x8F	; 143
     bde:	92 e0       	ldi	r25, 0x02	; 2
     be0:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     be4:	8f e8       	ldi	r24, 0x8F	; 143
     be6:	92 e0       	ldi	r25, 0x02	; 2
     be8:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN7TwoWire15endTransmissionEv>
     bec:	88 23       	and	r24, r24
     bee:	39 f0       	breq	.+14     	; 0xbfe <__stack+0xff>
		rval = hd44780::RV_EIO;
     bf0:	8f ef       	ldi	r24, 0xFF	; 255
     bf2:	03 c0       	rjmp	.+6      	; 0xbfa <__stack+0xfb>
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
     bf4:	8c ef       	ldi	r24, 0xFC	; 252
     bf6:	01 c0       	rjmp	.+2      	; 0xbfa <__stack+0xfb>

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
	{
		return(hd44780::RV_ENOTSUP);
     bf8:	8d ef       	ldi	r24, 0xFD	; 253
     bfa:	9f ef       	ldi	r25, 0xFF	; 255
     bfc:	01 c0       	rjmp	.+2      	; 0xc00 <__stack+0x101>
     bfe:	c8 01       	movw	r24, r16
	Wire.write(_blCurState);		// with E LOW
	if(Wire.endTransmission())
		rval = hd44780::RV_EIO;

	return(rval);
}
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	1f 91       	pop	r17
     c06:	0f 91       	pop	r16
     c08:	ff 90       	pop	r15
     c0a:	ef 90       	pop	r14
     c0c:	df 90       	pop	r13
     c0e:	cf 90       	pop	r12
     c10:	bf 90       	pop	r11
     c12:	af 90       	pop	r10
     c14:	9f 90       	pop	r9
     c16:	8f 90       	pop	r8
     c18:	08 95       	ret

00000c1a <_ZN14hd44780_I2Cexp11autocfg8574Ev>:
 * a new resistor to  connect to the base of the transistor.
 * 
 * As a result the SYDZ backpack cannot use autoconfiguration.
 */

int autocfg8574()
     c1a:	0f 93       	push	r16
     c1c:	1f 93       	push	r17
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	ec 01       	movw	r28, r24
uint8_t data, data2;
uint8_t rs, rw, en, d4, d5, d6, d7, bl, blLevel;

	// First put a 0xff in the output port

	Wire.beginTransmission(_addr);
     c24:	68 a1       	ldd	r22, Y+32	; 0x20
     c26:	8f e8       	ldi	r24, 0x8F	; 143
     c28:	92 e0       	ldi	r25, 0x02	; 2
     c2a:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0xff);
     c2e:	6f ef       	ldi	r22, 0xFF	; 255
     c30:	8f e8       	ldi	r24, 0x8F	; 143
     c32:	92 e0       	ldi	r25, 0x02	; 2
     c34:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
     c38:	8f e8       	ldi	r24, 0x8F	; 143
     c3a:	92 e0       	ldi	r25, 0x02	; 2
     c3c:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN7TwoWire15endTransmissionEv>

	// now read back from the port

	Wire.requestFrom((int)_addr, 1);
     c40:	68 a1       	ldd	r22, Y+32	; 0x20
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	41 e0       	ldi	r20, 0x01	; 1
     c46:	50 e0       	ldi	r21, 0x00	; 0
     c48:	8f e8       	ldi	r24, 0x8F	; 143
     c4a:	92 e0       	ldi	r25, 0x02	; 2
     c4c:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
     c50:	8f e8       	ldi	r24, 0x8F	; 143
     c52:	92 e0       	ldi	r25, 0x02	; 2
     c54:	0e 94 1b 0c 	call	0x1836	; 0x1836 <_ZN7TwoWire4readEv>
     c58:	8c 01       	movw	r16, r24

	// Turn off bit2 to attempt to see if en is bit 2,
	// if it is, it should change all lcd data bits to 1s
	
	Wire.beginTransmission(_addr);
     c5a:	68 a1       	ldd	r22, Y+32	; 0x20
     c5c:	8f e8       	ldi	r24, 0x8F	; 143
     c5e:	92 e0       	ldi	r25, 0x02	; 2
     c60:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) (~(1 << 2)) );
     c64:	6b ef       	ldi	r22, 0xFB	; 251
     c66:	8f e8       	ldi	r24, 0x8F	; 143
     c68:	92 e0       	ldi	r25, 0x02	; 2
     c6a:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
     c6e:	8f e8       	ldi	r24, 0x8F	; 143
     c70:	92 e0       	ldi	r25, 0x02	; 2
     c72:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN7TwoWire15endTransmissionEv>

	// read back data
	Wire.requestFrom((int)_addr, 1);
     c76:	68 a1       	ldd	r22, Y+32	; 0x20
     c78:	70 e0       	ldi	r23, 0x00	; 0
     c7a:	41 e0       	ldi	r20, 0x01	; 1
     c7c:	50 e0       	ldi	r21, 0x00	; 0
     c7e:	8f e8       	ldi	r24, 0x8F	; 143
     c80:	92 e0       	ldi	r25, 0x02	; 2
     c82:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <_ZN7TwoWire11requestFromEii>
	data2 = Wire.read();
     c86:	8f e8       	ldi	r24, 0x8F	; 143
     c88:	92 e0       	ldi	r25, 0x02	; 2
     c8a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <_ZN7TwoWire4readEv>

	// If lower 3 bits are high and all 4 upper bits are high after clearing bit 2
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
     c8e:	98 01       	movw	r18, r16
     c90:	27 70       	andi	r18, 0x07	; 7
     c92:	33 27       	eor	r19, r19
     c94:	27 30       	cpi	r18, 0x07	; 7
     c96:	31 05       	cpc	r19, r1
     c98:	b1 f4       	brne	.+44     	; 0xcc6 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
     c9a:	80 7f       	andi	r24, 0xF0	; 240
     c9c:	99 27       	eor	r25, r25
     c9e:	80 3f       	cpi	r24, 0xF0	; 240
     ca0:	91 05       	cpc	r25, r1
     ca2:	89 f4       	brne	.+34     	; 0xcc6 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
     ca4:	83 e0       	ldi	r24, 0x03	; 3
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	8a 95       	dec	r24
     cac:	e1 f7       	brne	.-8      	; 0xca6 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x8c>
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	08 27       	eor	r16, r24
     cb2:	01 70       	andi	r16, 0x01	; 1
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
	{
		rs = 0; rw = 1; en = 2; d4 = 4; d5 = 5; d6 = 6; d7 = 7; bl = 3;
     cb4:	43 e0       	ldi	r20, 0x03	; 3
     cb6:	57 e0       	ldi	r21, 0x07	; 7
     cb8:	66 e0       	ldi	r22, 0x06	; 6
     cba:	75 e0       	ldi	r23, 0x05	; 5
     cbc:	e4 e0       	ldi	r30, 0x04	; 4
     cbe:	22 e0       	ldi	r18, 0x02	; 2
     cc0:	f1 e0       	ldi	r31, 0x01	; 1
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	34 c0       	rjmp	.+104    	; 0xd2e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x114>
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
		}
	}
	else if((data & 0x70) == 0x70)
     cc6:	c8 01       	movw	r24, r16
     cc8:	80 77       	andi	r24, 0x70	; 112
     cca:	99 27       	eor	r25, r25
     ccc:	80 37       	cpi	r24, 0x70	; 112
     cce:	91 05       	cpc	r25, r1
     cd0:	09 f0       	breq	.+2      	; 0xcd4 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xba>
     cd2:	68 c0       	rjmp	.+208    	; 0xda4 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18a>
		// both use bit 7 for backlight control

		// Turn off the en bit which should change the data bits
		// bit 4 on the mjkdz is en so we try that bit
	
		Wire.beginTransmission(_addr);
     cd4:	68 a1       	ldd	r22, Y+32	; 0x20
     cd6:	8f e8       	ldi	r24, 0x8F	; 143
     cd8:	92 e0       	ldi	r25, 0x02	; 2
     cda:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t) (~(1 << 4)) );
     cde:	6f ee       	ldi	r22, 0xEF	; 239
     ce0:	8f e8       	ldi	r24, 0x8F	; 143
     ce2:	92 e0       	ldi	r25, 0x02	; 2
     ce4:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
     ce8:	8f e8       	ldi	r24, 0x8F	; 143
     cea:	92 e0       	ldi	r25, 0x02	; 2
     cec:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN7TwoWire15endTransmissionEv>

		// read back data
		Wire.requestFrom((int)_addr, 1);
     cf0:	68 a1       	ldd	r22, Y+32	; 0x20
     cf2:	70 e0       	ldi	r23, 0x00	; 0
     cf4:	41 e0       	ldi	r20, 0x01	; 1
     cf6:	50 e0       	ldi	r21, 0x00	; 0
     cf8:	8f e8       	ldi	r24, 0x8F	; 143
     cfa:	92 e0       	ldi	r25, 0x02	; 2
     cfc:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <_ZN7TwoWire11requestFromEii>
		data2 = Wire.read();
     d00:	8f e8       	ldi	r24, 0x8F	; 143
     d02:	92 e0       	ldi	r25, 0x02	; 2
     d04:	0e 94 1b 0c 	call	0x1836	; 0x1836 <_ZN7TwoWire4readEv>
		// look at data bits and see if they changed
		// if they changed to 0xf, then en was bit 4 and it is mjdkz
		// this will happen since when E is low the LCD is not
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
     d08:	8f 70       	andi	r24, 0x0F	; 15
     d0a:	99 27       	eor	r25, r25
     d0c:	0f 97       	sbiw	r24, 0x0f	; 15
     d0e:	19 f0       	breq	.+6      	; 0xd16 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xfc>
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
		}
		else
		{
			// electrofun LCDXIO
			rs = 4; rw = 5; en = 6; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
     d10:	26 e0       	ldi	r18, 0x06	; 6
     d12:	34 e0       	ldi	r19, 0x04	; 4
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x100>
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
		{
			// mjkdz
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
     d16:	24 e0       	ldi	r18, 0x04	; 4
     d18:	36 e0       	ldi	r19, 0x06	; 6
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
     d1a:	00 95       	com	r16
     d1c:	00 1f       	adc	r16, r16
     d1e:	00 27       	eor	r16, r16
     d20:	00 1f       	adc	r16, r16
     d22:	47 e0       	ldi	r20, 0x07	; 7
     d24:	53 e0       	ldi	r21, 0x03	; 3
     d26:	62 e0       	ldi	r22, 0x02	; 2
     d28:	71 e0       	ldi	r23, 0x01	; 1
     d2a:	e0 e0       	ldi	r30, 0x00	; 0
     d2c:	f5 e0       	ldi	r31, 0x05	; 5
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	dc 01       	movw	r26, r24
     d34:	01 c0       	rjmp	.+2      	; 0xd38 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11e>
     d36:	aa 0f       	add	r26, r26
     d38:	3a 95       	dec	r19
     d3a:	ea f7       	brpl	.-6      	; 0xd36 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11c>
     d3c:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
     d3e:	dc 01       	movw	r26, r24
     d40:	01 c0       	rjmp	.+2      	; 0xd44 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x12a>
     d42:	aa 0f       	add	r26, r26
     d44:	fa 95       	dec	r31
     d46:	ea f7       	brpl	.-6      	; 0xd42 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x128>
     d48:	ab a3       	std	Y+35, r26	; 0x23
	else
		_rw = 0; // no r/w control

	_en = ( 1 << en );
     d4a:	dc 01       	movw	r26, r24
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x138>
     d4e:	aa 0f       	add	r26, r26
     d50:	bb 1f       	adc	r27, r27
     d52:	2a 95       	dec	r18
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x134>
     d56:	ac a3       	std	Y+36, r26	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
     d58:	9c 01       	movw	r18, r24
     d5a:	01 c0       	rjmp	.+2      	; 0xd5e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x144>
     d5c:	22 0f       	add	r18, r18
     d5e:	ea 95       	dec	r30
     d60:	ea f7       	brpl	.-6      	; 0xd5c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x142>
     d62:	2d a3       	std	Y+37, r18	; 0x25
	_d5 = ( 1 << d5 );
     d64:	9c 01       	movw	r18, r24
     d66:	01 c0       	rjmp	.+2      	; 0xd6a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x150>
     d68:	22 0f       	add	r18, r18
     d6a:	7a 95       	dec	r23
     d6c:	ea f7       	brpl	.-6      	; 0xd68 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x14e>
     d6e:	2e a3       	std	Y+38, r18	; 0x26
	_d6 = ( 1 << d6 );
     d70:	9c 01       	movw	r18, r24
     d72:	01 c0       	rjmp	.+2      	; 0xd76 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15c>
     d74:	22 0f       	add	r18, r18
     d76:	6a 95       	dec	r22
     d78:	ea f7       	brpl	.-6      	; 0xd74 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15a>
     d7a:	2f a3       	std	Y+39, r18	; 0x27
	_d7 = ( 1 << d7 );   
     d7c:	9c 01       	movw	r18, r24
     d7e:	01 c0       	rjmp	.+2      	; 0xd82 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x168>
     d80:	22 0f       	add	r18, r18
     d82:	5a 95       	dec	r21
     d84:	ea f7       	brpl	.-6      	; 0xd80 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x166>
     d86:	28 a7       	std	Y+40, r18	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
     d88:	01 c0       	rjmp	.+2      	; 0xd8c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x172>
     d8a:	88 0f       	add	r24, r24
     d8c:	4a 95       	dec	r20
     d8e:	ea f7       	brpl	.-6      	; 0xd8a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x170>
     d90:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
     d92:	0a a7       	std	Y+42, r16	; 0x2a
	// set default bl state to backlight on
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
     d94:	01 30       	cpi	r16, 0x01	; 1
     d96:	11 f4       	brne	.+4      	; 0xd9c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x182>
		_blCurState = _bl;
     d98:	8b a7       	std	Y+43, r24	; 0x2b
     d9a:	01 c0       	rjmp	.+2      	; 0xd9e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x184>
	else
		_blCurState = 0;
     d9c:	1b a6       	std	Y+43, r1	; 0x2b
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18e>
		}
	}
	else
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
     da4:	8d ef       	ldi	r24, 0xFD	; 253
     da6:	9f ef       	ldi	r25, 0xFF	; 255
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	1f 91       	pop	r17
     dae:	0f 91       	pop	r16
     db0:	08 95       	ret

00000db2 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>:
 * if GP1 is low then the board is the BOARD_XXX board
 * The BOARD_XXX may not work as GP1 is used for D5 on WIDEHK and LCDPLUG
 *
 *
 */
int autocfgMCP23008()
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	ec 01       	movw	r28, r24

	/*
	 * Now set up output port
	 * Make no assumptions as to the state of IOCON BYTE mode
	 */
	Wire.beginTransmission(_addr);
     db8:	68 a1       	ldd	r22, Y+32	; 0x20
     dba:	8f e8       	ldi	r24, 0x8F	; 143
     dbc:	92 e0       	ldi	r25, 0x02	; 2
     dbe:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t)0); // point to IODIR
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	8f e8       	ldi	r24, 0x8F	; 143
     dc6:	92 e0       	ldi	r25, 0x02	; 2
     dc8:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZN7TwoWire5writeEh>
	Wire.write(0xff); // all pins inputs
     dcc:	6f ef       	ldi	r22, 0xFF	; 255
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	8f e8       	ldi	r24, 0x8F	; 143
     dd2:	92 e0       	ldi	r25, 0x02	; 2
     dd4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     dd8:	8f e8       	ldi	r24, 0x8F	; 143
     dda:	92 e0       	ldi	r25, 0x02	; 2
     ddc:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN7TwoWire15endTransmissionEv>

	Wire.beginTransmission(_addr);
     de0:	68 a1       	ldd	r22, Y+32	; 0x20
     de2:	8f e8       	ldi	r24, 0x8F	; 143
     de4:	92 e0       	ldi	r25, 0x02	; 2
     de6:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(6); // point to GPPU
     dea:	66 e0       	ldi	r22, 0x06	; 6
     dec:	70 e0       	ldi	r23, 0x00	; 0
     dee:	8f e8       	ldi	r24, 0x8F	; 143
     df0:	92 e0       	ldi	r25, 0x02	; 2
     df2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_ZN7TwoWire5writeEi>
	Wire.write(0xff); // turn on pullups
     df6:	6f ef       	ldi	r22, 0xFF	; 255
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	8f e8       	ldi	r24, 0x8F	; 143
     dfc:	92 e0       	ldi	r25, 0x02	; 2
     dfe:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     e02:	8f e8       	ldi	r24, 0x8F	; 143
     e04:	92 e0       	ldi	r25, 0x02	; 2
     e06:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN7TwoWire15endTransmissionEv>

	/*
	 * read from the GPIO port
	 */

	Wire.beginTransmission(_addr);
     e0a:	68 a1       	ldd	r22, Y+32	; 0x20
     e0c:	8f e8       	ldi	r24, 0x8F	; 143
     e0e:	92 e0       	ldi	r25, 0x02	; 2
     e10:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(9); // point to GPIO
     e14:	69 e0       	ldi	r22, 0x09	; 9
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	8f e8       	ldi	r24, 0x8F	; 143
     e1a:	92 e0       	ldi	r25, 0x02	; 2
     e1c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
     e20:	8f e8       	ldi	r24, 0x8F	; 143
     e22:	92 e0       	ldi	r25, 0x02	; 2
     e24:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom((int)_addr, 1);
     e28:	68 a1       	ldd	r22, Y+32	; 0x20
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	41 e0       	ldi	r20, 0x01	; 1
     e2e:	50 e0       	ldi	r21, 0x00	; 0
     e30:	8f e8       	ldi	r24, 0x8F	; 143
     e32:	92 e0       	ldi	r25, 0x02	; 2
     e34:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
     e38:	8f e8       	ldi	r24, 0x8F	; 143
     e3a:	92 e0       	ldi	r25, 0x02	; 2
     e3c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <_ZN7TwoWire4readEv>

	blLevel = HIGH; // known boards are active HIGH bl

	if(data == 0x7f) // bit 7 low, and other control and data lines high
     e40:	8f 37       	cpi	r24, 0x7F	; 127
     e42:	61 f0       	breq	.+24     	; 0xe5c <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xaa>
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
     e44:	86 ff       	sbrs	r24, 6
     e46:	12 c0       	rjmp	.+36     	; 0xe6c <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xba>
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
     e48:	81 fd       	sbrc	r24, 1
     e4a:	4c c0       	rjmp	.+152    	; 0xee4 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x132>
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
		bl = 1;
     e4c:	21 e0       	ldi	r18, 0x01	; 1
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
     e4e:	32 e0       	ldi	r19, 0x02	; 2
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
     e50:	43 e0       	ldi	r20, 0x03	; 3
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
     e52:	54 e0       	ldi	r21, 0x04	; 4
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
     e54:	65 e0       	ldi	r22, 0x05	; 5
	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
     e56:	76 e0       	ldi	r23, 0x06	; 6
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
     e58:	e7 e0       	ldi	r30, 0x07	; 7
     e5a:	0f c0       	rjmp	.+30     	; 0xe7a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;
     e5c:	27 e0       	ldi	r18, 0x07	; 7
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
     e5e:	36 e0       	ldi	r19, 0x06	; 6
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
     e60:	45 e0       	ldi	r20, 0x05	; 5
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
     e62:	54 e0       	ldi	r21, 0x04	; 4
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
     e64:	63 e0       	ldi	r22, 0x03	; 3
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
     e66:	72 e0       	ldi	r23, 0x02	; 2

	if(data == 0x7f) // bit 7 low, and other control and data lines high
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
     e68:	e1 e0       	ldi	r30, 0x01	; 1
     e6a:	07 c0       	rjmp	.+14     	; 0xe7a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;
     e6c:	26 e0       	ldi	r18, 0x06	; 6
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
     e6e:	33 e0       	ldi	r19, 0x03	; 3
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
     e70:	42 e0       	ldi	r20, 0x02	; 2
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
     e72:	51 e0       	ldi	r21, 0x01	; 1
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
     e74:	60 e0       	ldi	r22, 0x00	; 0
	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
     e76:	77 e0       	ldi	r23, 0x07	; 7
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
     e78:	e4 e0       	ldi	r30, 0x04	; 4
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	dc 01       	movw	r26, r24
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd4>
     e82:	aa 0f       	add	r26, r26
     e84:	bb 1f       	adc	r27, r27
     e86:	ea 95       	dec	r30
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd0>
     e8a:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
	else
		_rw = 0; // no r/w control
     e8c:	1b a2       	std	Y+35, r1	; 0x23

	_en = ( 1 << en );
     e8e:	fc 01       	movw	r30, r24
     e90:	01 c0       	rjmp	.+2      	; 0xe94 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe2>
     e92:	ee 0f       	add	r30, r30
     e94:	7a 95       	dec	r23
     e96:	ea f7       	brpl	.-6      	; 0xe92 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe0>
     e98:	ec a3       	std	Y+36, r30	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
     e9a:	fc 01       	movw	r30, r24
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xf0>
     e9e:	ee 0f       	add	r30, r30
     ea0:	ff 1f       	adc	r31, r31
     ea2:	6a 95       	dec	r22
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xec>
     ea6:	ed a3       	std	Y+37, r30	; 0x25
	_d5 = ( 1 << d5 );
     ea8:	bc 01       	movw	r22, r24
     eaa:	01 c0       	rjmp	.+2      	; 0xeae <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfc>
     eac:	66 0f       	add	r22, r22
     eae:	5a 95       	dec	r21
     eb0:	ea f7       	brpl	.-6      	; 0xeac <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfa>
     eb2:	6e a3       	std	Y+38, r22	; 0x26
	_d6 = ( 1 << d6 );
     eb4:	bc 01       	movw	r22, r24
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x10a>
     eb8:	66 0f       	add	r22, r22
     eba:	77 1f       	adc	r23, r23
     ebc:	4a 95       	dec	r20
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x106>
     ec0:	6f a3       	std	Y+39, r22	; 0x27
	_d7 = ( 1 << d7 );   
     ec2:	ac 01       	movw	r20, r24
     ec4:	01 c0       	rjmp	.+2      	; 0xec8 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x116>
     ec6:	44 0f       	add	r20, r20
     ec8:	3a 95       	dec	r19
     eca:	ea f7       	brpl	.-6      	; 0xec6 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x114>
     ecc:	48 a7       	std	Y+40, r20	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
     ece:	01 c0       	rjmp	.+2      	; 0xed2 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x120>
     ed0:	88 0f       	add	r24, r24
     ed2:	2a 95       	dec	r18
     ed4:	ea f7       	brpl	.-6      	; 0xed0 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x11e>
     ed6:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
     ed8:	91 e0       	ldi	r25, 0x01	; 1
     eda:	9a a7       	std	Y+42, r25	; 0x2a
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
		_blCurState = _bl;
     edc:	8b a7       	std	Y+43, r24	; 0x2b
		// could not identify board
		return(hd44780::RV_ENOTSUP);
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x136>

	}
	else
	{
		// could not identify board
		return(hd44780::RV_ENOTSUP);
     ee4:	8d ef       	ldi	r24, 0xFD	; 253
     ee6:	9f ef       	ldi	r25, 0xFF	; 255
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	08 95       	ret

00000eee <_ZN14hd44780_I2Cexp6ioinitEv>:
// Returns non zero if initialization failed.
//
// can't be used from constructors because not everything is initalized yet.
// (maybe interrupts or other library constructors)
// if Wire library is used in constructor, it will hang.
int ioinit()
     eee:	1f 93       	push	r17
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	ec 01       	movw	r28, r24
	 * I believe that it is unreasonable to require the the user
	 * sketch code to do it, because all that should change between
	 * hd44780 i/o interfaces should be the constructor
	 * So we go ahead and call it here.
	 */
	Wire.begin();
     ef6:	8f e8       	ldi	r24, 0x8F	; 143
     ef8:	92 e0       	ldi	r25, 0x02	; 2
     efa:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <_ZN7TwoWire5beginEv>

	// auto locate i2c expander and magically detect pin mappings

	if(!_addr) // locate next instance
     efe:	68 a1       	ldd	r22, Y+32	; 0x20
     f00:	61 11       	cpse	r22, r1
     f02:	0a c0       	rjmp	.+20     	; 0xf18 <_ZN14hd44780_I2Cexp6ioinitEv+0x2a>
	{
		_addr = LocateDevice(AutoInst++);
     f04:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	98 0f       	add	r25, r24
     f0c:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
     f10:	0e 94 95 01 	call	0x32a	; 0x32a <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
     f14:	88 a3       	std	Y+32, r24	; 0x20
     f16:	0d c0       	rjmp	.+26     	; 0xf32 <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
	}
	else
	{
		// check to see if device at specified address is really there
		Wire.beginTransmission(_addr);
     f18:	8f e8       	ldi	r24, 0x8F	; 143
     f1a:	92 e0       	ldi	r25, 0x02	; 2
     f1c:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <_ZN7TwoWire17beginTransmissionEh>
		if(Wire.endTransmission())
     f20:	8f e8       	ldi	r24, 0x8F	; 143
     f22:	92 e0       	ldi	r25, 0x02	; 2
     f24:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN7TwoWire15endTransmissionEv>
     f28:	88 23       	and	r24, r24
     f2a:	19 f0       	breq	.+6      	; 0xf32 <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
			return(hd44780::RV_ENXIO);
     f2c:	8c ef       	ldi	r24, 0xFC	; 252
     f2e:	9f ef       	ldi	r25, 0xFF	; 255
     f30:	a7 c0       	rjmp	.+334    	; 0x1080 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	}

	if(!_addr) // locate next instance
     f32:	88 a1       	ldd	r24, Y+32	; 0x20
     f34:	81 11       	cpse	r24, r1
     f36:	09 c0       	rjmp	.+18     	; 0xf4a <_ZN14hd44780_I2Cexp6ioinitEv+0x5c>
		_addr = LocateDevice(AutoInst++);
     f38:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
     f3c:	91 e0       	ldi	r25, 0x01	; 1
     f3e:	98 0f       	add	r25, r24
     f40:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
     f44:	0e 94 95 01 	call	0x32a	; 0x32a <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
     f48:	88 a3       	std	Y+32, r24	; 0x20

	if(!_addr) // if we couldn't locate it, return error
     f4a:	18 a1       	ldd	r17, Y+32	; 0x20
     f4c:	11 23       	and	r17, r17
     f4e:	71 f3       	breq	.-36     	; 0xf2c <_ZN14hd44780_I2Cexp6ioinitEv+0x3e>
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
     f50:	89 a1       	ldd	r24, Y+33	; 0x21
     f52:	88 23       	and	r24, r24
     f54:	c1 f1       	breq	.+112    	; 0xfc6 <_ZN14hd44780_I2Cexp6ioinitEv+0xd8>
			return(status);
	}

	// initialize IO expander chip

	Wire.beginTransmission(_addr);
     f56:	68 a1       	ldd	r22, Y+32	; 0x20
     f58:	8f e8       	ldi	r24, 0x8F	; 143
     f5a:	92 e0       	ldi	r25, 0x02	; 2
     f5c:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <_ZN7TwoWire17beginTransmissionEh>

	if(_expType == I2Cexp_MCP23008)
     f60:	89 a1       	ldd	r24, Y+33	; 0x21
     f62:	82 30       	cpi	r24, 0x02	; 2
     f64:	09 f0       	breq	.+2      	; 0xf68 <_ZN14hd44780_I2Cexp6ioinitEv+0x7a>
     f66:	76 c0       	rjmp	.+236    	; 0x1054 <_ZN14hd44780_I2Cexp6ioinitEv+0x166>
		 * within the same i2c connection by simply sending more bytes.
		 * This is necessary as the code uses back to back writes to perform
		 * the nibble updates as well as the toggling the enable signal.
		 * This methodology offers significant performance gains.
		 */
		Wire.write(5);	// point to IOCON
     f68:	65 e0       	ldi	r22, 0x05	; 5
     f6a:	70 e0       	ldi	r23, 0x00	; 0
     f6c:	8f e8       	ldi	r24, 0x8F	; 143
     f6e:	92 e0       	ldi	r25, 0x02	; 2
     f70:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_ZN7TwoWire5writeEi>
		Wire.write(0x20);// disable sequential mode (enables BYTE mode)
     f74:	60 e2       	ldi	r22, 0x20	; 32
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	8f e8       	ldi	r24, 0x8F	; 143
     f7a:	92 e0       	ldi	r25, 0x02	; 2
     f7c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
     f80:	8f e8       	ldi	r24, 0x8F	; 143
     f82:	92 e0       	ldi	r25, 0x02	; 2
     f84:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN7TwoWire15endTransmissionEv>

		/*
		 * Now set up output port
		 */
		Wire.beginTransmission(_addr);
     f88:	68 a1       	ldd	r22, Y+32	; 0x20
     f8a:	8f e8       	ldi	r24, 0x8F	; 143
     f8c:	92 e0       	ldi	r25, 0x02	; 2
     f8e:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t)0); // point to IODIR
     f92:	60 e0       	ldi	r22, 0x00	; 0
     f94:	8f e8       	ldi	r24, 0x8F	; 143
     f96:	92 e0       	ldi	r25, 0x02	; 2
     f98:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZN7TwoWire5writeEh>
		Wire.write((uint8_t)0); // all pins output
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	8f e8       	ldi	r24, 0x8F	; 143
     fa0:	92 e0       	ldi	r25, 0x02	; 2
     fa2:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
     fa6:	8f e8       	ldi	r24, 0x8F	; 143
     fa8:	92 e0       	ldi	r25, 0x02	; 2
     faa:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN7TwoWire15endTransmissionEv>
	
		/*
		 * point chip to GPIO
		 */
		Wire.beginTransmission(_addr);
     fae:	68 a1       	ldd	r22, Y+32	; 0x20
     fb0:	8f e8       	ldi	r24, 0x8F	; 143
     fb2:	92 e0       	ldi	r25, 0x02	; 2
     fb4:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write(9); // point to GPIO
     fb8:	69 e0       	ldi	r22, 0x09	; 9
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	8f e8       	ldi	r24, 0x8F	; 143
     fbe:	92 e0       	ldi	r25, 0x02	; 2
     fc0:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_ZN7TwoWire5writeEi>
     fc4:	47 c0       	rjmp	.+142    	; 0x1054 <_ZN14hd44780_I2Cexp6ioinitEv+0x166>

	/*
	 * First try to write 0xff to MCP23008 IODIR
	 * On a PCF8574 this will end up writing 0 and then ff to output port
	 */
	Wire.beginTransmission(address);
     fc6:	61 2f       	mov	r22, r17
     fc8:	8f e8       	ldi	r24, 0x8F	; 143
     fca:	92 e0       	ldi	r25, 0x02	; 2
     fcc:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
     fd0:	60 e0       	ldi	r22, 0x00	; 0
     fd2:	8f e8       	ldi	r24, 0x8F	; 143
     fd4:	92 e0       	ldi	r25, 0x02	; 2
     fd6:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZN7TwoWire5writeEh>
	Wire.write((uint8_t) 0xff);	// try to write to MCP23008 IODR
     fda:	6f ef       	ldi	r22, 0xFF	; 255
     fdc:	8f e8       	ldi	r24, 0x8F	; 143
     fde:	92 e0       	ldi	r25, 0x02	; 2
     fe0:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
     fe4:	8f e8       	ldi	r24, 0x8F	; 143
     fe6:	92 e0       	ldi	r25, 0x02	; 2
     fe8:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now try to point MCP23008 to IODIR for read
	 * On a PCF8574 this will end up writing a 0 to the output port
	 */

	Wire.beginTransmission(address);
     fec:	61 2f       	mov	r22, r17
     fee:	8f e8       	ldi	r24, 0x8F	; 143
     ff0:	92 e0       	ldi	r25, 0x02	; 2
     ff2:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	8f e8       	ldi	r24, 0x8F	; 143
     ffa:	92 e0       	ldi	r25, 0x02	; 2
     ffc:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    1000:	8f e8       	ldi	r24, 0x8F	; 143
    1002:	92 e0       	ldi	r25, 0x02	; 2
    1004:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now read a byte
	 * On a MCP23008 we should read the 0xff we wrote to IODIR
	 * On a PCF8574 we should read 0 since the output port was set to 0
	 */
	Wire.requestFrom((int)address, 1);
    1008:	61 2f       	mov	r22, r17
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	41 e0       	ldi	r20, 0x01	; 1
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	8f e8       	ldi	r24, 0x8F	; 143
    1012:	92 e0       	ldi	r25, 0x02	; 2
    1014:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    1018:	8f e8       	ldi	r24, 0x8F	; 143
    101a:	92 e0       	ldi	r25, 0x02	; 2
    101c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <_ZN7TwoWire4readEv>
    1020:	9c 01       	movw	r18, r24

	if(data == 0xff)
    1022:	8f 3f       	cpi	r24, 0xFF	; 255
    1024:	91 05       	cpc	r25, r1
    1026:	29 f0       	breq	.+10     	; 0x1032 <_ZN14hd44780_I2Cexp6ioinitEv+0x144>
	{
		chiptype = I2Cexp_MCP23008;
    1028:	91 e0       	ldi	r25, 0x01	; 1
    102a:	23 2b       	or	r18, r19
    102c:	19 f0       	breq	.+6      	; 0x1034 <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	01 c0       	rjmp	.+2      	; 0x1034 <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    1032:	92 e0       	ldi	r25, 0x02	; 2
	if(!_addr) // if we couldn't locate it, return error
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);
    1034:	99 a3       	std	Y+33, r25	; 0x21

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
    1036:	99 23       	and	r25, r25
    1038:	09 f1       	breq	.+66     	; 0x107c <_ZN14hd44780_I2Cexp6ioinitEv+0x18e>
			return(hd44780::RV_EIO);

		if(_expType == I2Cexp_PCF8574)
    103a:	91 30       	cpi	r25, 0x01	; 1
    103c:	21 f4       	brne	.+8      	; 0x1046 <_ZN14hd44780_I2Cexp6ioinitEv+0x158>
			status = autocfg8574();		// go auto configure the pin mappings
    103e:	ce 01       	movw	r24, r28
    1040:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN14hd44780_I2Cexp11autocfg8574Ev>
    1044:	03 c0       	rjmp	.+6      	; 0x104c <_ZN14hd44780_I2Cexp6ioinitEv+0x15e>
		else
			status = autocfgMCP23008();	// go auto configure the pin mappings
    1046:	ce 01       	movw	r24, r28
    1048:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>
		if(status)
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	09 f4       	brne	.+2      	; 0x1052 <_ZN14hd44780_I2Cexp6ioinitEv+0x164>
    1050:	82 cf       	rjmp	.-252    	; 0xf56 <_ZN14hd44780_I2Cexp6ioinitEv+0x68>
    1052:	16 c0       	rjmp	.+44     	; 0x1080 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
		 */
		Wire.beginTransmission(_addr);
		Wire.write(9); // point to GPIO
		
	}
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	8f e8       	ldi	r24, 0x8F	; 143
    1058:	92 e0       	ldi	r25, 0x02	; 2
    105a:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZN7TwoWire5writeEh>
	if( (status = Wire.endTransmission()) ) // assignment
    105e:	8f e8       	ldi	r24, 0x8F	; 143
    1060:	92 e0       	ldi	r25, 0x02	; 2
    1062:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN7TwoWire15endTransmissionEv>
    1066:	21 e0       	ldi	r18, 0x01	; 1
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 11       	cpse	r24, r1
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <_ZN14hd44780_I2Cexp6ioinitEv+0x184>
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	88 27       	eor	r24, r24
    1074:	99 27       	eor	r25, r25
    1076:	82 1b       	sub	r24, r18
    1078:	93 0b       	sbc	r25, r19
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
			return(hd44780::RV_EIO);
    107c:	8f ef       	ldi	r24, 0xFF	; 255
    107e:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
	if( (status = Wire.endTransmission()) ) // assignment
		status = hd44780::RV_EIO;

	return ( status );
}
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	1f 91       	pop	r17
    1086:	08 95       	ret

00001088 <_ZN7hd447806ioinitEv>:
	{
		buf[i] = pgm_read_byte(charmap++);
	}
	// call the RAM based function to actually send it to the LCD
	return(createChar(location, buf));
}
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	08 95       	ret

0000108e <_ZN7hd447806ioreadENS_6iotypeE>:
    108e:	8d ef       	ldi	r24, 0xFD	; 253
    1090:	9f ef       	ldi	r25, 0xFF	; 255
    1092:	08 95       	ret

00001094 <_ZN7hd4478014iosetBacklightEh>:
    1094:	8d ef       	ldi	r24, 0xFD	; 253
    1096:	9f ef       	ldi	r25, 0xFF	; 255
    1098:	08 95       	ret

0000109a <_ZN7hd44780C1Ev>:
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	ec 01       	movw	r28, r24
    10a0:	1b 82       	std	Y+3, r1	; 0x03
    10a2:	1a 82       	std	Y+2, r1	; 0x02
    10a4:	87 e8       	ldi	r24, 0x87	; 135
    10a6:	91 e0       	ldi	r25, 0x01	; 1
    10a8:	99 83       	std	Y+1, r25	; 0x01
    10aa:	88 83       	st	Y, r24
    10ac:	1f 82       	std	Y+7, r1	; 0x07
    10ae:	18 86       	std	Y+8, r1	; 0x08
    10b0:	80 ed       	ldi	r24, 0xD0	; 208
    10b2:	97 e0       	ldi	r25, 0x07	; 7
    10b4:	a0 e0       	ldi	r26, 0x00	; 0
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	88 8b       	std	Y+16, r24	; 0x10
    10ba:	99 8b       	std	Y+17, r25	; 0x11
    10bc:	aa 8b       	std	Y+18, r26	; 0x12
    10be:	bb 8b       	std	Y+19, r27	; 0x13
    10c0:	86 e2       	ldi	r24, 0x26	; 38
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	a0 e0       	ldi	r26, 0x00	; 0
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	8c 8b       	std	Y+20, r24	; 0x14
    10ca:	9d 8b       	std	Y+21, r25	; 0x15
    10cc:	ae 8b       	std	Y+22, r26	; 0x16
    10ce:	bf 8b       	std	Y+23, r27	; 0x17
    10d0:	1c 86       	std	Y+12, r1	; 0x0c
    10d2:	1d 86       	std	Y+13, r1	; 0x0d
    10d4:	1e 86       	std	Y+14, r1	; 0x0e
    10d6:	1f 86       	std	Y+15, r1	; 0x0f
    10d8:	1b 86       	std	Y+11, r1	; 0x0b
    10da:	0e 94 03 13 	call	0x2606	; 0x2606 <micros>
    10de:	68 8f       	std	Y+24, r22	; 0x18
    10e0:	79 8f       	std	Y+25, r23	; 0x19
    10e2:	8a 8f       	std	Y+26, r24	; 0x1a
    10e4:	9b 8f       	std	Y+27, r25	; 0x1b
    10e6:	1c 8e       	std	Y+28, r1	; 0x1c
    10e8:	1d 8e       	std	Y+29, r1	; 0x1d
    10ea:	1e 8e       	std	Y+30, r1	; 0x1e
    10ec:	1f 8e       	std	Y+31, r1	; 0x1f
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	08 95       	ret

000010f4 <_ZN7hd447809backlightEv>:
    10f4:	dc 01       	movw	r26, r24
    10f6:	ed 91       	ld	r30, X+
    10f8:	fc 91       	ld	r31, X
    10fa:	06 84       	ldd	r0, Z+14	; 0x0e
    10fc:	f7 85       	ldd	r31, Z+15	; 0x0f
    10fe:	e0 2d       	mov	r30, r0
    1100:	6f ef       	ldi	r22, 0xFF	; 255
    1102:	09 94       	ijmp

00001104 <_ZN7hd4478011noBacklightEv>:
    1104:	dc 01       	movw	r26, r24
    1106:	ed 91       	ld	r30, X+
    1108:	fc 91       	ld	r31, X
    110a:	06 84       	ldd	r0, Z+14	; 0x0e
    110c:	f7 85       	ldd	r31, Z+15	; 0x0f
    110e:	e0 2d       	mov	r30, r0
    1110:	60 e0       	ldi	r22, 0x00	; 0
    1112:	09 94       	ijmp

00001114 <_ZN7hd447807commandEh>:
    1114:	8f 92       	push	r8
    1116:	9f 92       	push	r9
    1118:	af 92       	push	r10
    111a:	bf 92       	push	r11
    111c:	ef 92       	push	r14
    111e:	ff 92       	push	r15
    1120:	1f 93       	push	r17
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	ec 01       	movw	r28, r24
    1128:	16 2f       	mov	r17, r22
    112a:	e8 81       	ld	r30, Y
    112c:	f9 81       	ldd	r31, Y+1	; 0x01
    112e:	04 84       	ldd	r0, Z+12	; 0x0c
    1130:	f5 85       	ldd	r31, Z+13	; 0x0d
    1132:	e0 2d       	mov	r30, r0
    1134:	46 2f       	mov	r20, r22
    1136:	60 e0       	ldi	r22, 0x00	; 0
    1138:	09 95       	icall
    113a:	7c 01       	movw	r14, r24
    113c:	11 50       	subi	r17, 0x01	; 1
    113e:	12 30       	cpi	r17, 0x02	; 2
    1140:	38 f4       	brcc	.+14     	; 0x1150 <_ZN7hd447807commandEh+0x3c>
    1142:	19 86       	std	Y+9, r1	; 0x09
    1144:	1a 86       	std	Y+10, r1	; 0x0a
    1146:	88 88       	ldd	r8, Y+16	; 0x10
    1148:	99 88       	ldd	r9, Y+17	; 0x11
    114a:	aa 88       	ldd	r10, Y+18	; 0x12
    114c:	bb 88       	ldd	r11, Y+19	; 0x13
    114e:	04 c0       	rjmp	.+8      	; 0x1158 <_ZN7hd447807commandEh+0x44>
    1150:	8c 88       	ldd	r8, Y+20	; 0x14
    1152:	9d 88       	ldd	r9, Y+21	; 0x15
    1154:	ae 88       	ldd	r10, Y+22	; 0x16
    1156:	bf 88       	ldd	r11, Y+23	; 0x17
    1158:	0e 94 03 13 	call	0x2606	; 0x2606 <micros>
    115c:	68 8f       	std	Y+24, r22	; 0x18
    115e:	79 8f       	std	Y+25, r23	; 0x19
    1160:	8a 8f       	std	Y+26, r24	; 0x1a
    1162:	9b 8f       	std	Y+27, r25	; 0x1b
    1164:	8c 8e       	std	Y+28, r8	; 0x1c
    1166:	9d 8e       	std	Y+29, r9	; 0x1d
    1168:	ae 8e       	std	Y+30, r10	; 0x1e
    116a:	bf 8e       	std	Y+31, r11	; 0x1f
    116c:	c7 01       	movw	r24, r14
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	1f 91       	pop	r17
    1174:	ff 90       	pop	r15
    1176:	ef 90       	pop	r14
    1178:	bf 90       	pop	r11
    117a:	af 90       	pop	r10
    117c:	9f 90       	pop	r9
    117e:	8f 90       	pop	r8
    1180:	08 95       	ret

00001182 <_ZN7hd447805clearEv>:
    1182:	61 e0       	ldi	r22, 0x01	; 1
    1184:	0c 94 8a 08 	jmp	0x1114	; 0x1114 <_ZN7hd447807commandEh>

00001188 <_ZN7hd447804homeEv>:
    1188:	62 e0       	ldi	r22, 0x02	; 2
    118a:	0c 94 8a 08 	jmp	0x1114	; 0x1114 <_ZN7hd447807commandEh>

0000118e <_ZN7hd447809setCursorEhh>:
    118e:	fc 01       	movw	r30, r24
    1190:	80 85       	ldd	r24, Z+8	; 0x08
    1192:	48 17       	cp	r20, r24
    1194:	10 f0       	brcs	.+4      	; 0x119a <_ZN7hd447809setCursorEhh+0xc>
    1196:	4f ef       	ldi	r20, 0xFF	; 255
    1198:	48 0f       	add	r20, r24
    119a:	93 85       	ldd	r25, Z+11	; 0x0b
    119c:	99 23       	and	r25, r25
    119e:	59 f0       	breq	.+22     	; 0x11b6 <_ZN7hd447809setCursorEhh+0x28>
    11a0:	97 81       	ldd	r25, Z+7	; 0x07
    11a2:	69 17       	cp	r22, r25
    11a4:	30 f0       	brcs	.+12     	; 0x11b2 <_ZN7hd447809setCursorEhh+0x24>
    11a6:	69 1b       	sub	r22, r25
    11a8:	4f 5f       	subi	r20, 0xFF	; 255
    11aa:	48 17       	cp	r20, r24
    11ac:	d0 f3       	brcs	.-12     	; 0x11a2 <_ZN7hd447809setCursorEhh+0x14>
    11ae:	40 e0       	ldi	r20, 0x00	; 0
    11b0:	f8 cf       	rjmp	.-16     	; 0x11a2 <_ZN7hd447809setCursorEhh+0x14>
    11b2:	61 87       	std	Z+9, r22	; 0x09
    11b4:	42 87       	std	Z+10, r20	; 0x0a
    11b6:	df 01       	movw	r26, r30
    11b8:	a4 0f       	add	r26, r20
    11ba:	b1 1d       	adc	r27, r1
    11bc:	1c 96       	adiw	r26, 0x0c	; 12
    11be:	8c 91       	ld	r24, X
    11c0:	68 0f       	add	r22, r24
    11c2:	60 68       	ori	r22, 0x80	; 128
    11c4:	cf 01       	movw	r24, r30
    11c6:	0c 94 8a 08 	jmp	0x1114	; 0x1114 <_ZN7hd447807commandEh>

000011ca <_ZN7hd447807displayEv>:
    11ca:	fc 01       	movw	r30, r24
    11cc:	65 81       	ldd	r22, Z+5	; 0x05
    11ce:	26 2f       	mov	r18, r22
    11d0:	24 60       	ori	r18, 0x04	; 4
    11d2:	25 83       	std	Z+5, r18	; 0x05
    11d4:	6c 60       	ori	r22, 0x0C	; 12
    11d6:	0c 94 8a 08 	jmp	0x1114	; 0x1114 <_ZN7hd447807commandEh>

000011da <_ZN7hd447805beginEhhh>:
    11da:	0f 93       	push	r16
    11dc:	1f 93       	push	r17
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	ec 01       	movw	r28, r24
    11e4:	02 2f       	mov	r16, r18
    11e6:	14 2f       	mov	r17, r20
    11e8:	45 30       	cpi	r20, 0x05	; 5
    11ea:	08 f0       	brcs	.+2      	; 0x11ee <_ZN7hd447805beginEhhh+0x14>
    11ec:	14 e0       	ldi	r17, 0x04	; 4
    11ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    11f0:	81 11       	cpse	r24, r1
    11f2:	09 c0       	rjmp	.+18     	; 0x1206 <_ZN7hd447805beginEhhh+0x2c>
    11f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f6:	81 11       	cpse	r24, r1
    11f8:	06 c0       	rjmp	.+12     	; 0x1206 <_ZN7hd447805beginEhhh+0x2c>
    11fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    11fc:	81 11       	cpse	r24, r1
    11fe:	03 c0       	rjmp	.+6      	; 0x1206 <_ZN7hd447805beginEhhh+0x2c>
    1200:	8f 85       	ldd	r24, Y+15	; 0x0f
    1202:	88 23       	and	r24, r24
    1204:	29 f0       	breq	.+10     	; 0x1210 <_ZN7hd447805beginEhhh+0x36>
    1206:	8f 81       	ldd	r24, Y+7	; 0x07
    1208:	88 23       	and	r24, r24
    120a:	59 f0       	breq	.+22     	; 0x1222 <_ZN7hd447805beginEhhh+0x48>
    120c:	86 17       	cp	r24, r22
    120e:	49 f0       	breq	.+18     	; 0x1222 <_ZN7hd447805beginEhhh+0x48>
    1210:	1c 86       	std	Y+12, r1	; 0x0c
    1212:	80 e4       	ldi	r24, 0x40	; 64
    1214:	8d 87       	std	Y+13, r24	; 0x0d
    1216:	6e 87       	std	Y+14, r22	; 0x0e
    1218:	86 2f       	mov	r24, r22
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	80 5c       	subi	r24, 0xC0	; 192
    121e:	9f 4f       	sbci	r25, 0xFF	; 255
    1220:	8f 87       	std	Y+15, r24	; 0x0f
    1222:	18 87       	std	Y+8, r17	; 0x08
    1224:	6f 83       	std	Y+7, r22	; 0x07
    1226:	64 e6       	ldi	r22, 0x64	; 100
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	0e 94 28 13 	call	0x2650	; 0x2650 <delay>
    1232:	1c 82       	std	Y+4, r1	; 0x04
    1234:	e8 81       	ld	r30, Y
    1236:	f9 81       	ldd	r31, Y+1	; 0x01
    1238:	00 84       	ldd	r0, Z+8	; 0x08
    123a:	f1 85       	ldd	r31, Z+9	; 0x09
    123c:	e0 2d       	mov	r30, r0
    123e:	ce 01       	movw	r24, r28
    1240:	09 95       	icall
    1242:	00 97       	sbiw	r24, 0x00	; 0
    1244:	09 f0       	breq	.+2      	; 0x1248 <_ZN7hd447805beginEhhh+0x6e>
    1246:	5e c0       	rjmp	.+188    	; 0x1304 <_ZN7hd447805beginEhhh+0x12a>
    1248:	88 85       	ldd	r24, Y+8	; 0x08
    124a:	82 30       	cpi	r24, 0x02	; 2
    124c:	18 f0       	brcs	.+6      	; 0x1254 <_ZN7hd447805beginEhhh+0x7a>
    124e:	8c 81       	ldd	r24, Y+4	; 0x04
    1250:	88 60       	ori	r24, 0x08	; 8
    1252:	8c 83       	std	Y+4, r24	; 0x04
    1254:	00 23       	and	r16, r16
    1256:	29 f0       	breq	.+10     	; 0x1262 <_ZN7hd447805beginEhhh+0x88>
    1258:	11 30       	cpi	r17, 0x01	; 1
    125a:	19 f4       	brne	.+6      	; 0x1262 <_ZN7hd447805beginEhhh+0x88>
    125c:	8c 81       	ldd	r24, Y+4	; 0x04
    125e:	84 60       	ori	r24, 0x04	; 4
    1260:	8c 83       	std	Y+4, r24	; 0x04
    1262:	e8 81       	ld	r30, Y
    1264:	f9 81       	ldd	r31, Y+1	; 0x01
    1266:	04 84       	ldd	r0, Z+12	; 0x0c
    1268:	f5 85       	ldd	r31, Z+13	; 0x0d
    126a:	e0 2d       	mov	r30, r0
    126c:	40 e3       	ldi	r20, 0x30	; 48
    126e:	62 e0       	ldi	r22, 0x02	; 2
    1270:	ce 01       	movw	r24, r28
    1272:	09 95       	icall
    1274:	65 e0       	ldi	r22, 0x05	; 5
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0e 94 28 13 	call	0x2650	; 0x2650 <delay>
    1280:	e8 81       	ld	r30, Y
    1282:	f9 81       	ldd	r31, Y+1	; 0x01
    1284:	04 84       	ldd	r0, Z+12	; 0x0c
    1286:	f5 85       	ldd	r31, Z+13	; 0x0d
    1288:	e0 2d       	mov	r30, r0
    128a:	40 e3       	ldi	r20, 0x30	; 48
    128c:	62 e0       	ldi	r22, 0x02	; 2
    128e:	ce 01       	movw	r24, r28
    1290:	09 95       	icall
    1292:	61 e0       	ldi	r22, 0x01	; 1
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	0e 94 28 13 	call	0x2650	; 0x2650 <delay>
    129e:	e8 81       	ld	r30, Y
    12a0:	f9 81       	ldd	r31, Y+1	; 0x01
    12a2:	04 84       	ldd	r0, Z+12	; 0x0c
    12a4:	f5 85       	ldd	r31, Z+13	; 0x0d
    12a6:	e0 2d       	mov	r30, r0
    12a8:	40 e3       	ldi	r20, 0x30	; 48
    12aa:	62 e0       	ldi	r22, 0x02	; 2
    12ac:	ce 01       	movw	r24, r28
    12ae:	09 95       	icall
    12b0:	61 e0       	ldi	r22, 0x01	; 1
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	0e 94 28 13 	call	0x2650	; 0x2650 <delay>
    12bc:	8c 81       	ldd	r24, Y+4	; 0x04
    12be:	84 fd       	sbrc	r24, 4
    12c0:	09 c0       	rjmp	.+18     	; 0x12d4 <_ZN7hd447805beginEhhh+0xfa>
    12c2:	e8 81       	ld	r30, Y
    12c4:	f9 81       	ldd	r31, Y+1	; 0x01
    12c6:	04 84       	ldd	r0, Z+12	; 0x0c
    12c8:	f5 85       	ldd	r31, Z+13	; 0x0d
    12ca:	e0 2d       	mov	r30, r0
    12cc:	40 e2       	ldi	r20, 0x20	; 32
    12ce:	62 e0       	ldi	r22, 0x02	; 2
    12d0:	ce 01       	movw	r24, r28
    12d2:	09 95       	icall
    12d4:	6c 81       	ldd	r22, Y+4	; 0x04
    12d6:	60 62       	ori	r22, 0x20	; 32
    12d8:	ce 01       	movw	r24, r28
    12da:	0e 94 8a 08 	call	0x1114	; 0x1114 <_ZN7hd447807commandEh>
    12de:	84 e0       	ldi	r24, 0x04	; 4
    12e0:	8d 83       	std	Y+5, r24	; 0x05
    12e2:	ce 01       	movw	r24, r28
    12e4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <_ZN7hd447807displayEv>
    12e8:	ce 01       	movw	r24, r28
    12ea:	0e 94 c1 08 	call	0x1182	; 0x1182 <_ZN7hd447805clearEv>
    12ee:	82 e0       	ldi	r24, 0x02	; 2
    12f0:	8e 83       	std	Y+6, r24	; 0x06
    12f2:	66 e0       	ldi	r22, 0x06	; 6
    12f4:	ce 01       	movw	r24, r28
    12f6:	0e 94 8a 08 	call	0x1114	; 0x1114 <_ZN7hd447807commandEh>
    12fa:	8c 01       	movw	r16, r24
    12fc:	ce 01       	movw	r24, r28
    12fe:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <_ZN7hd447809backlightEv>
    1302:	c8 01       	movw	r24, r16
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	1f 91       	pop	r17
    130a:	0f 91       	pop	r16
    130c:	08 95       	ret

0000130e <_ZN7hd447808noCursorEv>:
    130e:	fc 01       	movw	r30, r24
    1310:	65 81       	ldd	r22, Z+5	; 0x05
    1312:	6d 7f       	andi	r22, 0xFD	; 253
    1314:	65 83       	std	Z+5, r22	; 0x05
    1316:	68 60       	ori	r22, 0x08	; 8
    1318:	0c 94 8a 08 	jmp	0x1114	; 0x1114 <_ZN7hd447807commandEh>

0000131c <_ZN7hd447807noBlinkEv>:
    131c:	fc 01       	movw	r30, r24
    131e:	65 81       	ldd	r22, Z+5	; 0x05
    1320:	6e 7f       	andi	r22, 0xFE	; 254
    1322:	65 83       	std	Z+5, r22	; 0x05
    1324:	68 60       	ori	r22, 0x08	; 8
    1326:	0c 94 8a 08 	jmp	0x1114	; 0x1114 <_ZN7hd447807commandEh>

0000132a <_ZN7hd447806_writeEh>:
    132a:	cf 92       	push	r12
    132c:	df 92       	push	r13
    132e:	ef 92       	push	r14
    1330:	ff 92       	push	r15
    1332:	0f 93       	push	r16
    1334:	1f 93       	push	r17
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	ec 01       	movw	r28, r24
    133c:	46 2f       	mov	r20, r22
    133e:	e8 81       	ld	r30, Y
    1340:	f9 81       	ldd	r31, Y+1	; 0x01
    1342:	04 84       	ldd	r0, Z+12	; 0x0c
    1344:	f5 85       	ldd	r31, Z+13	; 0x0d
    1346:	e0 2d       	mov	r30, r0
    1348:	61 e0       	ldi	r22, 0x01	; 1
    134a:	09 95       	icall
    134c:	8c 01       	movw	r16, r24
    134e:	cc 88       	ldd	r12, Y+20	; 0x14
    1350:	dd 88       	ldd	r13, Y+21	; 0x15
    1352:	ee 88       	ldd	r14, Y+22	; 0x16
    1354:	ff 88       	ldd	r15, Y+23	; 0x17
    1356:	0e 94 03 13 	call	0x2606	; 0x2606 <micros>
    135a:	68 8f       	std	Y+24, r22	; 0x18
    135c:	79 8f       	std	Y+25, r23	; 0x19
    135e:	8a 8f       	std	Y+26, r24	; 0x1a
    1360:	9b 8f       	std	Y+27, r25	; 0x1b
    1362:	cc 8e       	std	Y+28, r12	; 0x1c
    1364:	dd 8e       	std	Y+29, r13	; 0x1d
    1366:	ee 8e       	std	Y+30, r14	; 0x1e
    1368:	ff 8e       	std	Y+31, r15	; 0x1f
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	01 2b       	or	r16, r17
    1370:	11 f0       	breq	.+4      	; 0x1376 <_ZN7hd447806_writeEh+0x4c>
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	1f 91       	pop	r17
    137c:	0f 91       	pop	r16
    137e:	ff 90       	pop	r15
    1380:	ef 90       	pop	r14
    1382:	df 90       	pop	r13
    1384:	cf 90       	pop	r12
    1386:	08 95       	ret

00001388 <_ZN7hd447805writeEh>:

// write() - process data character byte to lcd
// returns number of bytes successfully written to device
// i.e. 1 if success or 0 if no character was processed (error)
size_t hd44780::write(uint8_t value)
{
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	ec 01       	movw	r28, r24
size_t rval;

	rval = _write(value);
    1392:	0e 94 95 09 	call	0x132a	; 0x132a <_ZN7hd447806_writeEh>
    1396:	8c 01       	movw	r16, r24
	if(_wraplines)
    1398:	8b 85       	ldd	r24, Y+11	; 0x0b
    139a:	88 23       	and	r24, r24
    139c:	99 f0       	breq	.+38     	; 0x13c4 <_ZN7hd447805writeEh+0x3c>
	{
		// currently only works for left to right mode
		if(++_curcol >= _cols)
    139e:	89 85       	ldd	r24, Y+9	; 0x09
    13a0:	8f 5f       	subi	r24, 0xFF	; 255
    13a2:	89 87       	std	Y+9, r24	; 0x09
    13a4:	9f 81       	ldd	r25, Y+7	; 0x07
    13a6:	89 17       	cp	r24, r25
    13a8:	68 f0       	brcs	.+26     	; 0x13c4 <_ZN7hd447805writeEh+0x3c>
		{
			_curcol = 0;
    13aa:	19 86       	std	Y+9, r1	; 0x09
			_currow++;
    13ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    13ae:	8f 5f       	subi	r24, 0xFF	; 255
    13b0:	8a 87       	std	Y+10, r24	; 0x0a
			if(_currow >= _rows)
    13b2:	98 85       	ldd	r25, Y+8	; 0x08
    13b4:	89 17       	cp	r24, r25
    13b6:	08 f0       	brcs	.+2      	; 0x13ba <_ZN7hd447805writeEh+0x32>
				_currow = 0;
    13b8:	1a 86       	std	Y+10, r1	; 0x0a
			setCursor(_curcol, _currow);
    13ba:	4a 85       	ldd	r20, Y+10	; 0x0a
    13bc:	60 e0       	ldi	r22, 0x00	; 0
    13be:	ce 01       	movw	r24, r28
    13c0:	0e 94 c7 08 	call	0x118e	; 0x118e <_ZN7hd447809setCursorEhh>
		}
	}
	return (rval);
}
    13c4:	c8 01       	movw	r24, r16
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	1f 91       	pop	r17
    13cc:	0f 91       	pop	r16
    13ce:	08 95       	ret

000013d0 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    13d0:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <twi_state>
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <twi_sendStop>
    13da:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <twi_inRepStart>
    13de:	61 e0       	ldi	r22, 0x01	; 1
    13e0:	82 e0       	ldi	r24, 0x02	; 2
    13e2:	0e 94 28 14 	call	0x2850	; 0x2850 <digitalWrite>
    13e6:	61 e0       	ldi	r22, 0x01	; 1
    13e8:	83 e0       	ldi	r24, 0x03	; 3
    13ea:	0e 94 28 14 	call	0x2850	; 0x2850 <digitalWrite>
    13ee:	e9 eb       	ldi	r30, 0xB9	; 185
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	8e 7f       	andi	r24, 0xFE	; 254
    13f6:	80 83       	st	Z, r24
    13f8:	80 81       	ld	r24, Z
    13fa:	8d 7f       	andi	r24, 0xFD	; 253
    13fc:	80 83       	st	Z, r24
    13fe:	88 e4       	ldi	r24, 0x48	; 72
    1400:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1404:	85 e4       	ldi	r24, 0x45	; 69
    1406:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    140a:	08 95       	ret

0000140c <twi_readFrom>:
    140c:	41 32       	cpi	r20, 0x21	; 33
    140e:	08 f0       	brcs	.+2      	; 0x1412 <twi_readFrom+0x6>
    1410:	43 c0       	rjmp	.+134    	; 0x1498 <twi_readFrom+0x8c>
    1412:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <twi_state>
    1416:	91 11       	cpse	r25, r1
    1418:	fc cf       	rjmp	.-8      	; 0x1412 <twi_readFrom+0x6>
    141a:	91 e0       	ldi	r25, 0x01	; 1
    141c:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <twi_state>
    1420:	20 93 8c 02 	sts	0x028C, r18	; 0x80028c <twi_sendStop>
    1424:	2f ef       	ldi	r18, 0xFF	; 255
    1426:	20 93 21 02 	sts	0x0221, r18	; 0x800221 <twi_error>
    142a:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <twi_masterBufferIndex>
    142e:	24 0f       	add	r18, r20
    1430:	20 93 65 02 	sts	0x0265, r18	; 0x800265 <twi_masterBufferLength>
    1434:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <twi_slarw>
    1438:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <twi_slarw>
    143c:	88 0f       	add	r24, r24
    143e:	89 2b       	or	r24, r25
    1440:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <twi_slarw>
    1444:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <twi_inRepStart>
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	61 f4       	brne	.+24     	; 0x1464 <twi_readFrom+0x58>
    144c:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <twi_inRepStart>
    1450:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <twi_slarw>
    1454:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1458:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    145c:	83 fd       	sbrc	r24, 3
    145e:	f8 cf       	rjmp	.-16     	; 0x1450 <twi_readFrom+0x44>
    1460:	85 ec       	ldi	r24, 0xC5	; 197
    1462:	01 c0       	rjmp	.+2      	; 0x1466 <twi_readFrom+0x5a>
    1464:	85 ee       	ldi	r24, 0xE5	; 229
    1466:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    146a:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <twi_state>
    146e:	81 30       	cpi	r24, 0x01	; 1
    1470:	e1 f3       	breq	.-8      	; 0x146a <twi_readFrom+0x5e>
    1472:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <twi_masterBufferIndex>
    1476:	84 17       	cp	r24, r20
    1478:	10 f4       	brcc	.+4      	; 0x147e <twi_readFrom+0x72>
    147a:	40 91 66 02 	lds	r20, 0x0266	; 0x800266 <twi_masterBufferIndex>
    147e:	a7 e6       	ldi	r26, 0x67	; 103
    1480:	b2 e0       	ldi	r27, 0x02	; 2
    1482:	96 2f       	mov	r25, r22
    1484:	fb 01       	movw	r30, r22
    1486:	8e 2f       	mov	r24, r30
    1488:	89 1b       	sub	r24, r25
    148a:	84 17       	cp	r24, r20
    148c:	18 f4       	brcc	.+6      	; 0x1494 <twi_readFrom+0x88>
    148e:	8d 91       	ld	r24, X+
    1490:	81 93       	st	Z+, r24
    1492:	f9 cf       	rjmp	.-14     	; 0x1486 <twi_readFrom+0x7a>
    1494:	84 2f       	mov	r24, r20
    1496:	08 95       	ret
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	08 95       	ret

0000149c <twi_writeTo>:
    149c:	0f 93       	push	r16
    149e:	41 32       	cpi	r20, 0x21	; 33
    14a0:	08 f0       	brcs	.+2      	; 0x14a4 <twi_writeTo+0x8>
    14a2:	4a c0       	rjmp	.+148    	; 0x1538 <twi_writeTo+0x9c>
    14a4:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <twi_state>
    14a8:	91 11       	cpse	r25, r1
    14aa:	fc cf       	rjmp	.-8      	; 0x14a4 <twi_writeTo+0x8>
    14ac:	32 e0       	ldi	r19, 0x02	; 2
    14ae:	30 93 8e 02 	sts	0x028E, r19	; 0x80028e <twi_state>
    14b2:	00 93 8c 02 	sts	0x028C, r16	; 0x80028c <twi_sendStop>
    14b6:	3f ef       	ldi	r19, 0xFF	; 255
    14b8:	30 93 21 02 	sts	0x0221, r19	; 0x800221 <twi_error>
    14bc:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <twi_masterBufferIndex>
    14c0:	40 93 65 02 	sts	0x0265, r20	; 0x800265 <twi_masterBufferLength>
    14c4:	56 2f       	mov	r21, r22
    14c6:	a7 e6       	ldi	r26, 0x67	; 103
    14c8:	b2 e0       	ldi	r27, 0x02	; 2
    14ca:	fb 01       	movw	r30, r22
    14cc:	3e 2f       	mov	r19, r30
    14ce:	35 1b       	sub	r19, r21
    14d0:	34 17       	cp	r19, r20
    14d2:	18 f4       	brcc	.+6      	; 0x14da <twi_writeTo+0x3e>
    14d4:	31 91       	ld	r19, Z+
    14d6:	3d 93       	st	X+, r19
    14d8:	f9 cf       	rjmp	.-14     	; 0x14cc <twi_writeTo+0x30>
    14da:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <twi_slarw>
    14de:	30 91 8d 02 	lds	r19, 0x028D	; 0x80028d <twi_slarw>
    14e2:	88 0f       	add	r24, r24
    14e4:	83 2b       	or	r24, r19
    14e6:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <twi_slarw>
    14ea:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <twi_inRepStart>
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	61 f4       	brne	.+24     	; 0x150a <twi_writeTo+0x6e>
    14f2:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <twi_inRepStart>
    14f6:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <twi_slarw>
    14fa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    14fe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1502:	83 fd       	sbrc	r24, 3
    1504:	f8 cf       	rjmp	.-16     	; 0x14f6 <twi_writeTo+0x5a>
    1506:	85 ec       	ldi	r24, 0xC5	; 197
    1508:	01 c0       	rjmp	.+2      	; 0x150c <twi_writeTo+0x70>
    150a:	85 ee       	ldi	r24, 0xE5	; 229
    150c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1510:	22 23       	and	r18, r18
    1512:	21 f0       	breq	.+8      	; 0x151c <twi_writeTo+0x80>
    1514:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <twi_state>
    1518:	82 30       	cpi	r24, 0x02	; 2
    151a:	d1 f3       	breq	.-12     	; 0x1510 <twi_writeTo+0x74>
    151c:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <twi_error>
    1520:	8f 3f       	cpi	r24, 0xFF	; 255
    1522:	79 f0       	breq	.+30     	; 0x1542 <twi_writeTo+0xa6>
    1524:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <twi_error>
    1528:	80 32       	cpi	r24, 0x20	; 32
    152a:	41 f0       	breq	.+16     	; 0x153c <twi_writeTo+0xa0>
    152c:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <twi_error>
    1530:	80 33       	cpi	r24, 0x30	; 48
    1532:	31 f0       	breq	.+12     	; 0x1540 <twi_writeTo+0xa4>
    1534:	94 e0       	ldi	r25, 0x04	; 4
    1536:	05 c0       	rjmp	.+10     	; 0x1542 <twi_writeTo+0xa6>
    1538:	91 e0       	ldi	r25, 0x01	; 1
    153a:	03 c0       	rjmp	.+6      	; 0x1542 <twi_writeTo+0xa6>
    153c:	92 e0       	ldi	r25, 0x02	; 2
    153e:	01 c0       	rjmp	.+2      	; 0x1542 <twi_writeTo+0xa6>
    1540:	93 e0       	ldi	r25, 0x03	; 3
    1542:	89 2f       	mov	r24, r25
    1544:	0f 91       	pop	r16
    1546:	08 95       	ret

00001548 <twi_transmit>:
    1548:	40 91 43 02 	lds	r20, 0x0243	; 0x800243 <twi_txBufferLength>
    154c:	26 2f       	mov	r18, r22
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	24 0f       	add	r18, r20
    1552:	31 1d       	adc	r19, r1
    1554:	21 32       	cpi	r18, 0x21	; 33
    1556:	31 05       	cpc	r19, r1
    1558:	dc f4       	brge	.+54     	; 0x1590 <twi_transmit+0x48>
    155a:	20 91 8e 02 	lds	r18, 0x028E	; 0x80028e <twi_state>
    155e:	24 30       	cpi	r18, 0x04	; 4
    1560:	c9 f4       	brne	.+50     	; 0x1594 <twi_transmit+0x4c>
    1562:	fc 01       	movw	r30, r24
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	86 17       	cp	r24, r22
    156a:	58 f4       	brcc	.+22     	; 0x1582 <twi_transmit+0x3a>
    156c:	30 91 43 02 	lds	r19, 0x0243	; 0x800243 <twi_txBufferLength>
    1570:	21 91       	ld	r18, Z+
    1572:	dc 01       	movw	r26, r24
    1574:	ab 5b       	subi	r26, 0xBB	; 187
    1576:	bd 4f       	sbci	r27, 0xFD	; 253
    1578:	a3 0f       	add	r26, r19
    157a:	b1 1d       	adc	r27, r1
    157c:	2c 93       	st	X, r18
    157e:	01 96       	adiw	r24, 0x01	; 1
    1580:	f3 cf       	rjmp	.-26     	; 0x1568 <twi_transmit+0x20>
    1582:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <twi_txBufferLength>
    1586:	68 0f       	add	r22, r24
    1588:	60 93 43 02 	sts	0x0243, r22	; 0x800243 <twi_txBufferLength>
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	08 95       	ret
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	08 95       	ret
    1594:	82 e0       	ldi	r24, 0x02	; 2
    1596:	08 95       	ret

00001598 <twi_attachSlaveRxEvent>:
    1598:	90 93 88 02 	sts	0x0288, r25	; 0x800288 <twi_onSlaveReceive+0x1>
    159c:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <twi_onSlaveReceive>
    15a0:	08 95       	ret

000015a2 <twi_attachSlaveTxEvent>:
    15a2:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <twi_onSlaveTransmit+0x1>
    15a6:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <twi_onSlaveTransmit>
    15aa:	08 95       	ret

000015ac <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    15ac:	85 ed       	ldi	r24, 0xD5	; 213
    15ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    15b2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    15b6:	84 fd       	sbrc	r24, 4
    15b8:	fc cf       	rjmp	.-8      	; 0x15b2 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    15ba:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <twi_state>
    15be:	08 95       	ret

000015c0 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    15c0:	85 ec       	ldi	r24, 0xC5	; 197
    15c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    15c6:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <twi_state>
    15ca:	08 95       	ret

000015cc <__vector_36>:
}

ISR(TWI_vect)
{
    15cc:	1f 92       	push	r1
    15ce:	0f 92       	push	r0
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	0f 92       	push	r0
    15d4:	11 24       	eor	r1, r1
    15d6:	2f 93       	push	r18
    15d8:	3f 93       	push	r19
    15da:	4f 93       	push	r20
    15dc:	5f 93       	push	r21
    15de:	6f 93       	push	r22
    15e0:	7f 93       	push	r23
    15e2:	8f 93       	push	r24
    15e4:	9f 93       	push	r25
    15e6:	af 93       	push	r26
    15e8:	bf 93       	push	r27
    15ea:	ef 93       	push	r30
    15ec:	ff 93       	push	r31
  switch(TW_STATUS){
    15ee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    15f2:	88 7f       	andi	r24, 0xF8	; 248
    15f4:	80 36       	cpi	r24, 0x60	; 96
    15f6:	09 f4       	brne	.+2      	; 0x15fa <__vector_36+0x2e>
    15f8:	9e c0       	rjmp	.+316    	; 0x1736 <__vector_36+0x16a>
    15fa:	78 f5       	brcc	.+94     	; 0x165a <__vector_36+0x8e>
    15fc:	88 32       	cpi	r24, 0x28	; 40
    15fe:	09 f4       	brne	.+2      	; 0x1602 <__vector_36+0x36>
    1600:	5d c0       	rjmp	.+186    	; 0x16bc <__vector_36+0xf0>
    1602:	90 f4       	brcc	.+36     	; 0x1628 <__vector_36+0x5c>
    1604:	80 31       	cpi	r24, 0x10	; 16
    1606:	09 f4       	brne	.+2      	; 0x160a <__vector_36+0x3e>
    1608:	56 c0       	rjmp	.+172    	; 0x16b6 <__vector_36+0xea>
    160a:	38 f4       	brcc	.+14     	; 0x161a <__vector_36+0x4e>
    160c:	88 23       	and	r24, r24
    160e:	09 f4       	brne	.+2      	; 0x1612 <__vector_36+0x46>
    1610:	f5 c0       	rjmp	.+490    	; 0x17fc <__vector_36+0x230>
    1612:	88 30       	cpi	r24, 0x08	; 8
    1614:	09 f4       	brne	.+2      	; 0x1618 <__vector_36+0x4c>
    1616:	4f c0       	rjmp	.+158    	; 0x16b6 <__vector_36+0xea>
    1618:	f5 c0       	rjmp	.+490    	; 0x1804 <__vector_36+0x238>
    161a:	88 31       	cpi	r24, 0x18	; 24
    161c:	09 f4       	brne	.+2      	; 0x1620 <__vector_36+0x54>
    161e:	4e c0       	rjmp	.+156    	; 0x16bc <__vector_36+0xf0>
    1620:	80 32       	cpi	r24, 0x20	; 32
    1622:	09 f4       	brne	.+2      	; 0x1626 <__vector_36+0x5a>
    1624:	5f c0       	rjmp	.+190    	; 0x16e4 <__vector_36+0x118>
    1626:	ee c0       	rjmp	.+476    	; 0x1804 <__vector_36+0x238>
    1628:	80 34       	cpi	r24, 0x40	; 64
    162a:	09 f4       	brne	.+2      	; 0x162e <__vector_36+0x62>
    162c:	6a c0       	rjmp	.+212    	; 0x1702 <__vector_36+0x136>
    162e:	58 f4       	brcc	.+22     	; 0x1646 <__vector_36+0x7a>
    1630:	80 33       	cpi	r24, 0x30	; 48
    1632:	09 f4       	brne	.+2      	; 0x1636 <__vector_36+0x6a>
    1634:	57 c0       	rjmp	.+174    	; 0x16e4 <__vector_36+0x118>
    1636:	88 33       	cpi	r24, 0x38	; 56
    1638:	09 f0       	breq	.+2      	; 0x163c <__vector_36+0x70>
    163a:	e4 c0       	rjmp	.+456    	; 0x1804 <__vector_36+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    163c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <twi_error>
      twi_releaseBus();
    1640:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <twi_releaseBus>
      break;
    1644:	df c0       	rjmp	.+446    	; 0x1804 <__vector_36+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1646:	80 35       	cpi	r24, 0x50	; 80
    1648:	09 f4       	brne	.+2      	; 0x164c <__vector_36+0x80>
    164a:	4f c0       	rjmp	.+158    	; 0x16ea <__vector_36+0x11e>
    164c:	88 35       	cpi	r24, 0x58	; 88
    164e:	09 f4       	brne	.+2      	; 0x1652 <__vector_36+0x86>
    1650:	5d c0       	rjmp	.+186    	; 0x170c <__vector_36+0x140>
    1652:	88 34       	cpi	r24, 0x48	; 72
    1654:	09 f0       	breq	.+2      	; 0x1658 <__vector_36+0x8c>
    1656:	d6 c0       	rjmp	.+428    	; 0x1804 <__vector_36+0x238>
    1658:	d3 c0       	rjmp	.+422    	; 0x1800 <__vector_36+0x234>
    165a:	88 39       	cpi	r24, 0x98	; 152
    165c:	09 f4       	brne	.+2      	; 0x1660 <__vector_36+0x94>
    165e:	c4 c0       	rjmp	.+392    	; 0x17e8 <__vector_36+0x21c>
    1660:	a8 f4       	brcc	.+42     	; 0x168c <__vector_36+0xc0>
    1662:	88 37       	cpi	r24, 0x78	; 120
    1664:	09 f4       	brne	.+2      	; 0x1668 <__vector_36+0x9c>
    1666:	67 c0       	rjmp	.+206    	; 0x1736 <__vector_36+0x16a>
    1668:	38 f4       	brcc	.+14     	; 0x1678 <__vector_36+0xac>
    166a:	88 36       	cpi	r24, 0x68	; 104
    166c:	09 f4       	brne	.+2      	; 0x1670 <__vector_36+0xa4>
    166e:	63 c0       	rjmp	.+198    	; 0x1736 <__vector_36+0x16a>
    1670:	80 37       	cpi	r24, 0x70	; 112
    1672:	09 f4       	brne	.+2      	; 0x1676 <__vector_36+0xaa>
    1674:	60 c0       	rjmp	.+192    	; 0x1736 <__vector_36+0x16a>
    1676:	c6 c0       	rjmp	.+396    	; 0x1804 <__vector_36+0x238>
    1678:	88 38       	cpi	r24, 0x88	; 136
    167a:	09 f4       	brne	.+2      	; 0x167e <__vector_36+0xb2>
    167c:	b5 c0       	rjmp	.+362    	; 0x17e8 <__vector_36+0x21c>
    167e:	80 39       	cpi	r24, 0x90	; 144
    1680:	09 f4       	brne	.+2      	; 0x1684 <__vector_36+0xb8>
    1682:	5f c0       	rjmp	.+190    	; 0x1742 <__vector_36+0x176>
    1684:	80 38       	cpi	r24, 0x80	; 128
    1686:	09 f0       	breq	.+2      	; 0x168a <__vector_36+0xbe>
    1688:	bd c0       	rjmp	.+378    	; 0x1804 <__vector_36+0x238>
    168a:	5b c0       	rjmp	.+182    	; 0x1742 <__vector_36+0x176>
    168c:	80 3b       	cpi	r24, 0xB0	; 176
    168e:	09 f4       	brne	.+2      	; 0x1692 <__vector_36+0xc6>
    1690:	83 c0       	rjmp	.+262    	; 0x1798 <__vector_36+0x1cc>
    1692:	38 f4       	brcc	.+14     	; 0x16a2 <__vector_36+0xd6>
    1694:	80 3a       	cpi	r24, 0xA0	; 160
    1696:	09 f4       	brne	.+2      	; 0x169a <__vector_36+0xce>
    1698:	66 c0       	rjmp	.+204    	; 0x1766 <__vector_36+0x19a>
    169a:	88 3a       	cpi	r24, 0xA8	; 168
    169c:	09 f4       	brne	.+2      	; 0x16a0 <__vector_36+0xd4>
    169e:	7c c0       	rjmp	.+248    	; 0x1798 <__vector_36+0x1cc>
    16a0:	b1 c0       	rjmp	.+354    	; 0x1804 <__vector_36+0x238>
    16a2:	80 3c       	cpi	r24, 0xC0	; 192
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <__vector_36+0xdc>
    16a6:	a4 c0       	rjmp	.+328    	; 0x17f0 <__vector_36+0x224>
    16a8:	88 3c       	cpi	r24, 0xC8	; 200
    16aa:	09 f4       	brne	.+2      	; 0x16ae <__vector_36+0xe2>
    16ac:	a1 c0       	rjmp	.+322    	; 0x17f0 <__vector_36+0x224>
    16ae:	88 3b       	cpi	r24, 0xB8	; 184
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <__vector_36+0xe8>
    16b2:	87 c0       	rjmp	.+270    	; 0x17c2 <__vector_36+0x1f6>
    16b4:	a7 c0       	rjmp	.+334    	; 0x1804 <__vector_36+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    16b6:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <twi_slarw>
    16ba:	10 c0       	rjmp	.+32     	; 0x16dc <__vector_36+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    16bc:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <twi_masterBufferIndex>
    16c0:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <twi_masterBufferLength>
    16c4:	98 17       	cp	r25, r24
    16c6:	70 f5       	brcc	.+92     	; 0x1724 <__vector_36+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    16c8:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <twi_masterBufferIndex>
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	8e 0f       	add	r24, r30
    16d0:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <twi_masterBufferIndex>
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	e9 59       	subi	r30, 0x99	; 153
    16d8:	fd 4f       	sbci	r31, 0xFD	; 253
    16da:	80 81       	ld	r24, Z
    16dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    16e0:	85 ec       	ldi	r24, 0xC5	; 197
    16e2:	83 c0       	rjmp	.+262    	; 0x17ea <__vector_36+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    16e4:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <twi_error>
    16e8:	8b c0       	rjmp	.+278    	; 0x1800 <__vector_36+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    16ea:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <twi_masterBufferIndex>
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	8e 0f       	add	r24, r30
    16f2:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <twi_masterBufferIndex>
    16f6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	e9 59       	subi	r30, 0x99	; 153
    16fe:	fd 4f       	sbci	r31, 0xFD	; 253
    1700:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1702:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <twi_masterBufferIndex>
    1706:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <twi_masterBufferLength>
    170a:	6b c0       	rjmp	.+214    	; 0x17e2 <__vector_36+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    170c:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <twi_masterBufferIndex>
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	8e 0f       	add	r24, r30
    1714:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <twi_masterBufferIndex>
    1718:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	e9 59       	subi	r30, 0x99	; 153
    1720:	fd 4f       	sbci	r31, 0xFD	; 253
    1722:	80 83       	st	Z, r24
	if (twi_sendStop)
    1724:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <twi_sendStop>
    1728:	81 11       	cpse	r24, r1
    172a:	6a c0       	rjmp	.+212    	; 0x1800 <__vector_36+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1732:	84 ea       	ldi	r24, 0xA4	; 164
    1734:	5e c0       	rjmp	.+188    	; 0x17f2 <__vector_36+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1736:	83 e0       	ldi	r24, 0x03	; 3
    1738:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    173c:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <twi_rxBufferIndex>
    1740:	cf cf       	rjmp	.-98     	; 0x16e0 <__vector_36+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1742:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <twi_rxBufferIndex>
    1746:	80 32       	cpi	r24, 0x20	; 32
    1748:	08 f0       	brcs	.+2      	; 0x174c <__vector_36+0x180>
    174a:	4e c0       	rjmp	.+156    	; 0x17e8 <__vector_36+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    174c:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <twi_rxBufferIndex>
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	8e 0f       	add	r24, r30
    1754:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <twi_rxBufferIndex>
    1758:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	ed 5d       	subi	r30, 0xDD	; 221
    1760:	fd 4f       	sbci	r31, 0xFD	; 253
    1762:	80 83       	st	Z, r24
    1764:	bd cf       	rjmp	.-134    	; 0x16e0 <__vector_36+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1766:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    176a:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <twi_rxBufferIndex>
    176e:	80 32       	cpi	r24, 0x20	; 32
    1770:	30 f4       	brcc	.+12     	; 0x177e <__vector_36+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1772:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <twi_rxBufferIndex>
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	ed 5d       	subi	r30, 0xDD	; 221
    177a:	fd 4f       	sbci	r31, 0xFD	; 253
    177c:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    177e:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <twi_rxBufferIndex>
    1782:	70 e0       	ldi	r23, 0x00	; 0
    1784:	e0 91 87 02 	lds	r30, 0x0287	; 0x800287 <twi_onSlaveReceive>
    1788:	f0 91 88 02 	lds	r31, 0x0288	; 0x800288 <twi_onSlaveReceive+0x1>
    178c:	83 e2       	ldi	r24, 0x23	; 35
    178e:	92 e0       	ldi	r25, 0x02	; 2
    1790:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1792:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <twi_rxBufferIndex>
      break;
    1796:	36 c0       	rjmp	.+108    	; 0x1804 <__vector_36+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1798:	84 e0       	ldi	r24, 0x04	; 4
    179a:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    179e:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    17a2:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    17a6:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <twi_onSlaveTransmit>
    17aa:	f0 91 8a 02 	lds	r31, 0x028A	; 0x80028a <twi_onSlaveTransmit+0x1>
    17ae:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    17b0:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <twi_txBufferLength>
    17b4:	81 11       	cpse	r24, r1
    17b6:	05 c0       	rjmp	.+10     	; 0x17c2 <__vector_36+0x1f6>
        twi_txBufferLength = 1;
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    17be:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    17c2:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <twi_txBufferIndex>
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	8e 0f       	add	r24, r30
    17ca:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <twi_txBufferIndex>
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	eb 5b       	subi	r30, 0xBB	; 187
    17d2:	fd 4f       	sbci	r31, 0xFD	; 253
    17d4:	80 81       	ld	r24, Z
    17d6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    17da:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <twi_txBufferIndex>
    17de:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <twi_txBufferLength>
    17e2:	98 17       	cp	r25, r24
    17e4:	08 f4       	brcc	.+2      	; 0x17e8 <__vector_36+0x21c>
    17e6:	7c cf       	rjmp	.-264    	; 0x16e0 <__vector_36+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    17e8:	85 e8       	ldi	r24, 0x85	; 133
    17ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    17ee:	0a c0       	rjmp	.+20     	; 0x1804 <__vector_36+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    17f0:	85 ec       	ldi	r24, 0xC5	; 197
    17f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    17f6:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <twi_state>
      break;
    17fa:	04 c0       	rjmp	.+8      	; 0x1804 <__vector_36+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    17fc:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <twi_error>
      twi_stop();
    1800:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <twi_stop>
      break;
  }
}
    1804:	ff 91       	pop	r31
    1806:	ef 91       	pop	r30
    1808:	bf 91       	pop	r27
    180a:	af 91       	pop	r26
    180c:	9f 91       	pop	r25
    180e:	8f 91       	pop	r24
    1810:	7f 91       	pop	r23
    1812:	6f 91       	pop	r22
    1814:	5f 91       	pop	r21
    1816:	4f 91       	pop	r20
    1818:	3f 91       	pop	r19
    181a:	2f 91       	pop	r18
    181c:	0f 90       	pop	r0
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	0f 90       	pop	r0
    1822:	1f 90       	pop	r1
    1824:	18 95       	reti

00001826 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1826:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <_ZN7TwoWire14rxBufferLengthE>
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	20 91 c4 02 	lds	r18, 0x02C4	; 0x8002c4 <_ZN7TwoWire13rxBufferIndexE>
    1830:	82 1b       	sub	r24, r18
    1832:	91 09       	sbc	r25, r1
    1834:	08 95       	ret

00001836 <_ZN7TwoWire4readEv>:
    1836:	90 91 c4 02 	lds	r25, 0x02C4	; 0x8002c4 <_ZN7TwoWire13rxBufferIndexE>
    183a:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <_ZN7TwoWire14rxBufferLengthE>
    183e:	98 17       	cp	r25, r24
    1840:	50 f4       	brcc	.+20     	; 0x1856 <_ZN7TwoWire4readEv+0x20>
    1842:	e9 2f       	mov	r30, r25
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	eb 53       	subi	r30, 0x3B	; 59
    1848:	fd 4f       	sbci	r31, 0xFD	; 253
    184a:	20 81       	ld	r18, Z
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	9f 5f       	subi	r25, 0xFF	; 255
    1850:	90 93 c4 02 	sts	0x02C4, r25	; 0x8002c4 <_ZN7TwoWire13rxBufferIndexE>
    1854:	02 c0       	rjmp	.+4      	; 0x185a <_ZN7TwoWire4readEv+0x24>
    1856:	2f ef       	ldi	r18, 0xFF	; 255
    1858:	3f ef       	ldi	r19, 0xFF	; 255
    185a:	c9 01       	movw	r24, r18
    185c:	08 95       	ret

0000185e <_ZN7TwoWire4peekEv>:
    185e:	e0 91 c4 02 	lds	r30, 0x02C4	; 0x8002c4 <_ZN7TwoWire13rxBufferIndexE>
    1862:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <_ZN7TwoWire14rxBufferLengthE>
    1866:	e8 17       	cp	r30, r24
    1868:	30 f4       	brcc	.+12     	; 0x1876 <_ZN7TwoWire4peekEv+0x18>
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	eb 53       	subi	r30, 0x3B	; 59
    186e:	fd 4f       	sbci	r31, 0xFD	; 253
    1870:	80 81       	ld	r24, Z
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	08 95       	ret
    1876:	8f ef       	ldi	r24, 0xFF	; 255
    1878:	9f ef       	ldi	r25, 0xFF	; 255
    187a:	08 95       	ret

0000187c <_ZN7TwoWire5flushEv>:
    187c:	08 95       	ret

0000187e <_ZN7TwoWire16onReceiveServiceEPhi>:
    187e:	cf 93       	push	r28
    1880:	df 93       	push	r29
    1882:	ec 01       	movw	r28, r24
    1884:	e0 91 9b 02 	lds	r30, 0x029B	; 0x80029b <_ZN7TwoWire14user_onReceiveE>
    1888:	f0 91 9c 02 	lds	r31, 0x029C	; 0x80029c <_ZN7TwoWire14user_onReceiveE+0x1>
    188c:	30 97       	sbiw	r30, 0x00	; 0
    188e:	f1 f0       	breq	.+60     	; 0x18cc <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1890:	90 91 c4 02 	lds	r25, 0x02C4	; 0x8002c4 <_ZN7TwoWire13rxBufferIndexE>
    1894:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <_ZN7TwoWire14rxBufferLengthE>
    1898:	98 17       	cp	r25, r24
    189a:	c0 f0       	brcs	.+48     	; 0x18cc <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	29 2f       	mov	r18, r25
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	26 17       	cp	r18, r22
    18a4:	37 07       	cpc	r19, r23
    18a6:	54 f4       	brge	.+20     	; 0x18bc <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    18a8:	de 01       	movw	r26, r28
    18aa:	a2 0f       	add	r26, r18
    18ac:	b3 1f       	adc	r27, r19
    18ae:	4c 91       	ld	r20, X
    18b0:	d9 01       	movw	r26, r18
    18b2:	ab 53       	subi	r26, 0x3B	; 59
    18b4:	bd 4f       	sbci	r27, 0xFD	; 253
    18b6:	4c 93       	st	X, r20
    18b8:	9f 5f       	subi	r25, 0xFF	; 255
    18ba:	f1 cf       	rjmp	.-30     	; 0x189e <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    18bc:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <_ZN7TwoWire13rxBufferIndexE>
    18c0:	60 93 c3 02 	sts	0x02C3, r22	; 0x8002c3 <_ZN7TwoWire14rxBufferLengthE>
    18c4:	cb 01       	movw	r24, r22
    18c6:	df 91       	pop	r29
    18c8:	cf 91       	pop	r28
    18ca:	09 94       	ijmp
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	08 95       	ret

000018d2 <_ZN7TwoWire16onRequestServiceEv>:
    18d2:	e0 91 9d 02 	lds	r30, 0x029D	; 0x80029d <_ZN7TwoWire14user_onRequestE>
    18d6:	f0 91 9e 02 	lds	r31, 0x029E	; 0x80029e <_ZN7TwoWire14user_onRequestE+0x1>
    18da:	30 97       	sbiw	r30, 0x00	; 0
    18dc:	29 f0       	breq	.+10     	; 0x18e8 <_ZN7TwoWire16onRequestServiceEv+0x16>
    18de:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <_ZN7TwoWire13txBufferIndexE>
    18e2:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <_ZN7TwoWire14txBufferLengthE>
    18e6:	09 94       	ijmp
    18e8:	08 95       	ret

000018ea <_ZN7TwoWire5writeEPKhj>:
    18ea:	cf 92       	push	r12
    18ec:	df 92       	push	r13
    18ee:	ef 92       	push	r14
    18f0:	ff 92       	push	r15
    18f2:	0f 93       	push	r16
    18f4:	1f 93       	push	r17
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	7c 01       	movw	r14, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	8a 01       	movw	r16, r20
    1900:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <_ZN7TwoWire12transmittingE>
    1904:	22 23       	and	r18, r18
    1906:	89 f0       	breq	.+34     	; 0x192a <_ZN7TwoWire5writeEPKhj+0x40>
    1908:	eb 01       	movw	r28, r22
    190a:	6b 01       	movw	r12, r22
    190c:	c4 0e       	add	r12, r20
    190e:	d5 1e       	adc	r13, r21
    1910:	cc 15       	cp	r28, r12
    1912:	dd 05       	cpc	r29, r13
    1914:	69 f0       	breq	.+26     	; 0x1930 <_ZN7TwoWire5writeEPKhj+0x46>
    1916:	69 91       	ld	r22, Y+
    1918:	d7 01       	movw	r26, r14
    191a:	ed 91       	ld	r30, X+
    191c:	fc 91       	ld	r31, X
    191e:	01 90       	ld	r0, Z+
    1920:	f0 81       	ld	r31, Z
    1922:	e0 2d       	mov	r30, r0
    1924:	c7 01       	movw	r24, r14
    1926:	09 95       	icall
    1928:	f3 cf       	rjmp	.-26     	; 0x1910 <_ZN7TwoWire5writeEPKhj+0x26>
    192a:	64 2f       	mov	r22, r20
    192c:	0e 94 a4 0a 	call	0x1548	; 0x1548 <twi_transmit>
    1930:	c8 01       	movw	r24, r16
    1932:	df 91       	pop	r29
    1934:	cf 91       	pop	r28
    1936:	1f 91       	pop	r17
    1938:	0f 91       	pop	r16
    193a:	ff 90       	pop	r15
    193c:	ef 90       	pop	r14
    193e:	df 90       	pop	r13
    1940:	cf 90       	pop	r12
    1942:	08 95       	ret

00001944 <_ZN7TwoWire5writeEh>:
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	1f 92       	push	r1
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	69 83       	std	Y+1, r22	; 0x01
    1950:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <_ZN7TwoWire12transmittingE>
    1954:	22 23       	and	r18, r18
    1956:	d1 f0       	breq	.+52     	; 0x198c <_ZN7TwoWire5writeEh+0x48>
    1958:	20 91 a0 02 	lds	r18, 0x02A0	; 0x8002a0 <_ZN7TwoWire14txBufferLengthE>
    195c:	20 32       	cpi	r18, 0x20	; 32
    195e:	40 f0       	brcs	.+16     	; 0x1970 <_ZN7TwoWire5writeEh+0x2c>
    1960:	21 e0       	ldi	r18, 0x01	; 1
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	fc 01       	movw	r30, r24
    1966:	33 83       	std	Z+3, r19	; 0x03
    1968:	22 83       	std	Z+2, r18	; 0x02
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	15 c0       	rjmp	.+42     	; 0x199a <_ZN7TwoWire5writeEh+0x56>
    1970:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <_ZN7TwoWire13txBufferIndexE>
    1974:	e8 2f       	mov	r30, r24
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	ee 55       	subi	r30, 0x5E	; 94
    197a:	fd 4f       	sbci	r31, 0xFD	; 253
    197c:	99 81       	ldd	r25, Y+1	; 0x01
    197e:	90 83       	st	Z, r25
    1980:	8f 5f       	subi	r24, 0xFF	; 255
    1982:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <_ZN7TwoWire13txBufferIndexE>
    1986:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <_ZN7TwoWire14txBufferLengthE>
    198a:	05 c0       	rjmp	.+10     	; 0x1996 <_ZN7TwoWire5writeEh+0x52>
    198c:	61 e0       	ldi	r22, 0x01	; 1
    198e:	ce 01       	movw	r24, r28
    1990:	01 96       	adiw	r24, 0x01	; 1
    1992:	0e 94 a4 0a 	call	0x1548	; 0x1548 <twi_transmit>
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	0f 90       	pop	r0
    199c:	df 91       	pop	r29
    199e:	cf 91       	pop	r28
    19a0:	08 95       	ret

000019a2 <_ZN7TwoWireC1Ev>:
    19a2:	fc 01       	movw	r30, r24
    19a4:	13 82       	std	Z+3, r1	; 0x03
    19a6:	12 82       	std	Z+2, r1	; 0x02
    19a8:	88 ee       	ldi	r24, 0xE8	; 232
    19aa:	93 e0       	ldi	r25, 0x03	; 3
    19ac:	a0 e0       	ldi	r26, 0x00	; 0
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	84 83       	std	Z+4, r24	; 0x04
    19b2:	95 83       	std	Z+5, r25	; 0x05
    19b4:	a6 83       	std	Z+6, r26	; 0x06
    19b6:	b7 83       	std	Z+7, r27	; 0x07
    19b8:	8d e9       	ldi	r24, 0x9D	; 157
    19ba:	91 e0       	ldi	r25, 0x01	; 1
    19bc:	91 83       	std	Z+1, r25	; 0x01
    19be:	80 83       	st	Z, r24
    19c0:	08 95       	ret

000019c2 <_ZN7TwoWire5beginEv>:
    19c2:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <_ZN7TwoWire13rxBufferIndexE>
    19c6:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN7TwoWire14rxBufferLengthE>
    19ca:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <_ZN7TwoWire13txBufferIndexE>
    19ce:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <_ZN7TwoWire14txBufferLengthE>
    19d2:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <twi_init>
    19d6:	89 e6       	ldi	r24, 0x69	; 105
    19d8:	9c e0       	ldi	r25, 0x0C	; 12
    19da:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <twi_attachSlaveTxEvent>
    19de:	8f e3       	ldi	r24, 0x3F	; 63
    19e0:	9c e0       	ldi	r25, 0x0C	; 12
    19e2:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <twi_attachSlaveRxEvent>

000019e6 <_ZN7TwoWire17beginTransmissionEh>:
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <_ZN7TwoWire12transmittingE>
    19ec:	60 93 c2 02 	sts	0x02C2, r22	; 0x8002c2 <_ZN7TwoWire9txAddressE>
    19f0:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <_ZN7TwoWire13txBufferIndexE>
    19f4:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <_ZN7TwoWire14txBufferLengthE>
    19f8:	08 95       	ret

000019fa <_ZN7TwoWire15endTransmissionEh>:
    19fa:	0f 93       	push	r16
    19fc:	06 2f       	mov	r16, r22
    19fe:	21 e0       	ldi	r18, 0x01	; 1
    1a00:	40 91 a0 02 	lds	r20, 0x02A0	; 0x8002a0 <_ZN7TwoWire14txBufferLengthE>
    1a04:	62 ea       	ldi	r22, 0xA2	; 162
    1a06:	72 e0       	ldi	r23, 0x02	; 2
    1a08:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <_ZN7TwoWire9txAddressE>
    1a0c:	0e 94 4e 0a 	call	0x149c	; 0x149c <twi_writeTo>
    1a10:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <_ZN7TwoWire13txBufferIndexE>
    1a14:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <_ZN7TwoWire14txBufferLengthE>
    1a18:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <_ZN7TwoWire12transmittingE>
    1a1c:	0f 91       	pop	r16
    1a1e:	08 95       	ret

00001a20 <_ZN7TwoWire11requestFromEhhmhh>:
    1a20:	4f 92       	push	r4
    1a22:	5f 92       	push	r5
    1a24:	6f 92       	push	r6
    1a26:	7f 92       	push	r7
    1a28:	af 92       	push	r10
    1a2a:	bf 92       	push	r11
    1a2c:	cf 92       	push	r12
    1a2e:	ef 92       	push	r14
    1a30:	ff 92       	push	r15
    1a32:	0f 93       	push	r16
    1a34:	1f 93       	push	r17
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	5c 01       	movw	r10, r24
    1a3c:	f6 2e       	mov	r15, r22
    1a3e:	d4 2f       	mov	r29, r20
    1a40:	28 01       	movw	r4, r16
    1a42:	39 01       	movw	r6, r18
    1a44:	ee 20       	and	r14, r14
    1a46:	21 f1       	breq	.+72     	; 0x1a90 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    1a48:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <_ZN7TwoWire17beginTransmissionEh>
    1a4c:	ce 2d       	mov	r28, r14
    1a4e:	c4 30       	cpi	r28, 0x04	; 4
    1a50:	08 f0       	brcs	.+2      	; 0x1a54 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1a52:	c3 e0       	ldi	r28, 0x03	; 3
    1a54:	c1 50       	subi	r28, 0x01	; 1
    1a56:	c0 f0       	brcs	.+48     	; 0x1a88 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    1a58:	28 e0       	ldi	r18, 0x08	; 8
    1a5a:	c2 9f       	mul	r28, r18
    1a5c:	c0 01       	movw	r24, r0
    1a5e:	11 24       	eor	r1, r1
    1a60:	a3 01       	movw	r20, r6
    1a62:	92 01       	movw	r18, r4
    1a64:	04 c0       	rjmp	.+8      	; 0x1a6e <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    1a66:	56 95       	lsr	r21
    1a68:	47 95       	ror	r20
    1a6a:	37 95       	ror	r19
    1a6c:	27 95       	ror	r18
    1a6e:	8a 95       	dec	r24
    1a70:	d2 f7       	brpl	.-12     	; 0x1a66 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    1a72:	ca 01       	movw	r24, r20
    1a74:	b9 01       	movw	r22, r18
    1a76:	d5 01       	movw	r26, r10
    1a78:	ed 91       	ld	r30, X+
    1a7a:	fc 91       	ld	r31, X
    1a7c:	01 90       	ld	r0, Z+
    1a7e:	f0 81       	ld	r31, Z
    1a80:	e0 2d       	mov	r30, r0
    1a82:	c5 01       	movw	r24, r10
    1a84:	09 95       	icall
    1a86:	e6 cf       	rjmp	.-52     	; 0x1a54 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1a88:	60 e0       	ldi	r22, 0x00	; 0
    1a8a:	c5 01       	movw	r24, r10
    1a8c:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <_ZN7TwoWire15endTransmissionEh>
    1a90:	4d 2f       	mov	r20, r29
    1a92:	d1 32       	cpi	r29, 0x21	; 33
    1a94:	08 f0       	brcs	.+2      	; 0x1a98 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    1a96:	40 e2       	ldi	r20, 0x20	; 32
    1a98:	2c 2d       	mov	r18, r12
    1a9a:	65 ec       	ldi	r22, 0xC5	; 197
    1a9c:	72 e0       	ldi	r23, 0x02	; 2
    1a9e:	8f 2d       	mov	r24, r15
    1aa0:	0e 94 06 0a 	call	0x140c	; 0x140c <twi_readFrom>
    1aa4:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <_ZN7TwoWire13rxBufferIndexE>
    1aa8:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <_ZN7TwoWire14rxBufferLengthE>
    1aac:	df 91       	pop	r29
    1aae:	cf 91       	pop	r28
    1ab0:	1f 91       	pop	r17
    1ab2:	0f 91       	pop	r16
    1ab4:	ff 90       	pop	r15
    1ab6:	ef 90       	pop	r14
    1ab8:	cf 90       	pop	r12
    1aba:	bf 90       	pop	r11
    1abc:	af 90       	pop	r10
    1abe:	7f 90       	pop	r7
    1ac0:	6f 90       	pop	r6
    1ac2:	5f 90       	pop	r5
    1ac4:	4f 90       	pop	r4
    1ac6:	08 95       	ret

00001ac8 <_ZN7TwoWire11requestFromEhhh>:
    1ac8:	cf 92       	push	r12
    1aca:	ef 92       	push	r14
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	c2 2e       	mov	r12, r18
    1ad2:	e1 2c       	mov	r14, r1
    1ad4:	00 e0       	ldi	r16, 0x00	; 0
    1ad6:	10 e0       	ldi	r17, 0x00	; 0
    1ad8:	98 01       	movw	r18, r16
    1ada:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <_ZN7TwoWire11requestFromEhhmhh>
    1ade:	1f 91       	pop	r17
    1ae0:	0f 91       	pop	r16
    1ae2:	ef 90       	pop	r14
    1ae4:	cf 90       	pop	r12
    1ae6:	08 95       	ret

00001ae8 <_ZN7TwoWire11requestFromEii>:
    1ae8:	21 e0       	ldi	r18, 0x01	; 1
    1aea:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <_ZN7TwoWire11requestFromEhhh>

00001aee <_ZN7TwoWire15endTransmissionEv>:
    1aee:	61 e0       	ldi	r22, 0x01	; 1
    1af0:	0c 94 fd 0c 	jmp	0x19fa	; 0x19fa <_ZN7TwoWire15endTransmissionEh>

00001af4 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1af4:	8f e8       	ldi	r24, 0x8F	; 143
    1af6:	92 e0       	ldi	r25, 0x02	; 2
    1af8:	0c 94 d1 0c 	jmp	0x19a2	; 0x19a2 <_ZN7TwoWireC1Ev>

00001afc <__cxa_pure_virtual>:
    1afc:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <abort>

00001b00 <initVariant>:
    1b00:	08 95       	ret

00001b02 <main>:
    1b02:	0e 94 64 13 	call	0x26c8	; 0x26c8 <init>
    1b06:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <initVariant>
    1b0a:	85 ee       	ldi	r24, 0xE5	; 229
    1b0c:	92 e0       	ldi	r25, 0x02	; 2
    1b0e:	0e 94 9a 12 	call	0x2534	; 0x2534 <_ZN10USBDevice_6attachEv>
    1b12:	0e 94 d7 02 	call	0x5ae	; 0x5ae <setup>
    1b16:	c0 e0       	ldi	r28, 0x00	; 0
    1b18:	d0 e0       	ldi	r29, 0x00	; 0
    1b1a:	0e 94 07 03 	call	0x60e	; 0x60e <loop>
    1b1e:	20 97       	sbiw	r28, 0x00	; 0
    1b20:	e1 f3       	breq	.-8      	; 0x1b1a <main+0x18>
    1b22:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1b26:	f9 cf       	rjmp	.-14     	; 0x1b1a <main+0x18>

00001b28 <_ZN5Print5writeEPKhj>:
    1b28:	cf 92       	push	r12
    1b2a:	df 92       	push	r13
    1b2c:	ef 92       	push	r14
    1b2e:	ff 92       	push	r15
    1b30:	0f 93       	push	r16
    1b32:	1f 93       	push	r17
    1b34:	cf 93       	push	r28
    1b36:	df 93       	push	r29
    1b38:	6c 01       	movw	r12, r24
    1b3a:	7a 01       	movw	r14, r20
    1b3c:	8b 01       	movw	r16, r22
    1b3e:	c0 e0       	ldi	r28, 0x00	; 0
    1b40:	d0 e0       	ldi	r29, 0x00	; 0
    1b42:	ce 15       	cp	r28, r14
    1b44:	df 05       	cpc	r29, r15
    1b46:	81 f0       	breq	.+32     	; 0x1b68 <_ZN5Print5writeEPKhj+0x40>
    1b48:	d8 01       	movw	r26, r16
    1b4a:	6d 91       	ld	r22, X+
    1b4c:	8d 01       	movw	r16, r26
    1b4e:	d6 01       	movw	r26, r12
    1b50:	ed 91       	ld	r30, X+
    1b52:	fc 91       	ld	r31, X
    1b54:	01 90       	ld	r0, Z+
    1b56:	f0 81       	ld	r31, Z
    1b58:	e0 2d       	mov	r30, r0
    1b5a:	c6 01       	movw	r24, r12
    1b5c:	09 95       	icall
    1b5e:	89 2b       	or	r24, r25
    1b60:	11 f0       	breq	.+4      	; 0x1b66 <_ZN5Print5writeEPKhj+0x3e>
    1b62:	21 96       	adiw	r28, 0x01	; 1
    1b64:	ee cf       	rjmp	.-36     	; 0x1b42 <_ZN5Print5writeEPKhj+0x1a>
    1b66:	7e 01       	movw	r14, r28
    1b68:	c7 01       	movw	r24, r14
    1b6a:	df 91       	pop	r29
    1b6c:	cf 91       	pop	r28
    1b6e:	1f 91       	pop	r17
    1b70:	0f 91       	pop	r16
    1b72:	ff 90       	pop	r15
    1b74:	ef 90       	pop	r14
    1b76:	df 90       	pop	r13
    1b78:	cf 90       	pop	r12
    1b7a:	08 95       	ret

00001b7c <_ZN5Print5writeEPKc>:
    1b7c:	61 15       	cp	r22, r1
    1b7e:	71 05       	cpc	r23, r1
    1b80:	79 f0       	breq	.+30     	; 0x1ba0 <_ZN5Print5writeEPKc+0x24>
    1b82:	fb 01       	movw	r30, r22
    1b84:	01 90       	ld	r0, Z+
    1b86:	00 20       	and	r0, r0
    1b88:	e9 f7       	brne	.-6      	; 0x1b84 <_ZN5Print5writeEPKc+0x8>
    1b8a:	31 97       	sbiw	r30, 0x01	; 1
    1b8c:	af 01       	movw	r20, r30
    1b8e:	46 1b       	sub	r20, r22
    1b90:	57 0b       	sbc	r21, r23
    1b92:	dc 01       	movw	r26, r24
    1b94:	ed 91       	ld	r30, X+
    1b96:	fc 91       	ld	r31, X
    1b98:	02 80       	ldd	r0, Z+2	; 0x02
    1b9a:	f3 81       	ldd	r31, Z+3	; 0x03
    1b9c:	e0 2d       	mov	r30, r0
    1b9e:	09 94       	ijmp
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	08 95       	ret

00001ba6 <_ZN5Print5printEPKc>:
    1ba6:	0c 94 be 0d 	jmp	0x1b7c	; 0x1b7c <_ZN5Print5writeEPKc>

00001baa <_ZN5Print5printEc>:
    1baa:	dc 01       	movw	r26, r24
    1bac:	ed 91       	ld	r30, X+
    1bae:	fc 91       	ld	r31, X
    1bb0:	01 90       	ld	r0, Z+
    1bb2:	f0 81       	ld	r31, Z
    1bb4:	e0 2d       	mov	r30, r0
    1bb6:	09 94       	ijmp

00001bb8 <_ZN5Print11printNumberEmh>:
    1bb8:	8f 92       	push	r8
    1bba:	9f 92       	push	r9
    1bbc:	af 92       	push	r10
    1bbe:	bf 92       	push	r11
    1bc0:	ef 92       	push	r14
    1bc2:	ff 92       	push	r15
    1bc4:	0f 93       	push	r16
    1bc6:	1f 93       	push	r17
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	a1 97       	sbiw	r28, 0x21	; 33
    1bd2:	0f b6       	in	r0, 0x3f	; 63
    1bd4:	f8 94       	cli
    1bd6:	de bf       	out	0x3e, r29	; 62
    1bd8:	0f be       	out	0x3f, r0	; 63
    1bda:	cd bf       	out	0x3d, r28	; 61
    1bdc:	7c 01       	movw	r14, r24
    1bde:	fa 01       	movw	r30, r20
    1be0:	cb 01       	movw	r24, r22
    1be2:	19 a2       	std	Y+33, r1	; 0x21
    1be4:	22 30       	cpi	r18, 0x02	; 2
    1be6:	08 f4       	brcc	.+2      	; 0x1bea <_ZN5Print11printNumberEmh+0x32>
    1be8:	2a e0       	ldi	r18, 0x0A	; 10
    1bea:	8e 01       	movw	r16, r28
    1bec:	0f 5d       	subi	r16, 0xDF	; 223
    1bee:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf0:	82 2e       	mov	r8, r18
    1bf2:	91 2c       	mov	r9, r1
    1bf4:	a1 2c       	mov	r10, r1
    1bf6:	b1 2c       	mov	r11, r1
    1bf8:	bf 01       	movw	r22, r30
    1bfa:	a5 01       	movw	r20, r10
    1bfc:	94 01       	movw	r18, r8
    1bfe:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <__udivmodsi4>
    1c02:	f9 01       	movw	r30, r18
    1c04:	ca 01       	movw	r24, r20
    1c06:	01 50       	subi	r16, 0x01	; 1
    1c08:	11 09       	sbc	r17, r1
    1c0a:	6a 30       	cpi	r22, 0x0A	; 10
    1c0c:	10 f4       	brcc	.+4      	; 0x1c12 <_ZN5Print11printNumberEmh+0x5a>
    1c0e:	60 5d       	subi	r22, 0xD0	; 208
    1c10:	01 c0       	rjmp	.+2      	; 0x1c14 <_ZN5Print11printNumberEmh+0x5c>
    1c12:	69 5c       	subi	r22, 0xC9	; 201
    1c14:	d8 01       	movw	r26, r16
    1c16:	6c 93       	st	X, r22
    1c18:	23 2b       	or	r18, r19
    1c1a:	24 2b       	or	r18, r20
    1c1c:	25 2b       	or	r18, r21
    1c1e:	61 f7       	brne	.-40     	; 0x1bf8 <_ZN5Print11printNumberEmh+0x40>
    1c20:	b8 01       	movw	r22, r16
    1c22:	c7 01       	movw	r24, r14
    1c24:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <_ZN5Print5writeEPKc>
    1c28:	a1 96       	adiw	r28, 0x21	; 33
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	f8 94       	cli
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	cd bf       	out	0x3d, r28	; 61
    1c34:	df 91       	pop	r29
    1c36:	cf 91       	pop	r28
    1c38:	1f 91       	pop	r17
    1c3a:	0f 91       	pop	r16
    1c3c:	ff 90       	pop	r15
    1c3e:	ef 90       	pop	r14
    1c40:	bf 90       	pop	r11
    1c42:	af 90       	pop	r10
    1c44:	9f 90       	pop	r9
    1c46:	8f 90       	pop	r8
    1c48:	08 95       	ret

00001c4a <_ZN5Print5printEli>:
    1c4a:	cf 92       	push	r12
    1c4c:	df 92       	push	r13
    1c4e:	ef 92       	push	r14
    1c50:	ff 92       	push	r15
    1c52:	0f 93       	push	r16
    1c54:	1f 93       	push	r17
    1c56:	cf 93       	push	r28
    1c58:	df 93       	push	r29
    1c5a:	21 15       	cp	r18, r1
    1c5c:	31 05       	cpc	r19, r1
    1c5e:	81 f4       	brne	.+32     	; 0x1c80 <_ZN5Print5printEli+0x36>
    1c60:	dc 01       	movw	r26, r24
    1c62:	ed 91       	ld	r30, X+
    1c64:	fc 91       	ld	r31, X
    1c66:	01 90       	ld	r0, Z+
    1c68:	f0 81       	ld	r31, Z
    1c6a:	e0 2d       	mov	r30, r0
    1c6c:	64 2f       	mov	r22, r20
    1c6e:	df 91       	pop	r29
    1c70:	cf 91       	pop	r28
    1c72:	1f 91       	pop	r17
    1c74:	0f 91       	pop	r16
    1c76:	ff 90       	pop	r15
    1c78:	ef 90       	pop	r14
    1c7a:	df 90       	pop	r13
    1c7c:	cf 90       	pop	r12
    1c7e:	09 94       	ijmp
    1c80:	2a 30       	cpi	r18, 0x0A	; 10
    1c82:	31 05       	cpc	r19, r1
    1c84:	01 f5       	brne	.+64     	; 0x1cc6 <_ZN5Print5printEli+0x7c>
    1c86:	77 ff       	sbrs	r23, 7
    1c88:	1d c0       	rjmp	.+58     	; 0x1cc4 <_ZN5Print5printEli+0x7a>
    1c8a:	6a 01       	movw	r12, r20
    1c8c:	7b 01       	movw	r14, r22
    1c8e:	ec 01       	movw	r28, r24
    1c90:	6d e2       	ldi	r22, 0x2D	; 45
    1c92:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <_ZN5Print5printEc>
    1c96:	8c 01       	movw	r16, r24
    1c98:	44 27       	eor	r20, r20
    1c9a:	55 27       	eor	r21, r21
    1c9c:	ba 01       	movw	r22, r20
    1c9e:	4c 19       	sub	r20, r12
    1ca0:	5d 09       	sbc	r21, r13
    1ca2:	6e 09       	sbc	r22, r14
    1ca4:	7f 09       	sbc	r23, r15
    1ca6:	2a e0       	ldi	r18, 0x0A	; 10
    1ca8:	ce 01       	movw	r24, r28
    1caa:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <_ZN5Print11printNumberEmh>
    1cae:	80 0f       	add	r24, r16
    1cb0:	91 1f       	adc	r25, r17
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
    1cb6:	1f 91       	pop	r17
    1cb8:	0f 91       	pop	r16
    1cba:	ff 90       	pop	r15
    1cbc:	ef 90       	pop	r14
    1cbe:	df 90       	pop	r13
    1cc0:	cf 90       	pop	r12
    1cc2:	08 95       	ret
    1cc4:	2a e0       	ldi	r18, 0x0A	; 10
    1cc6:	df 91       	pop	r29
    1cc8:	cf 91       	pop	r28
    1cca:	1f 91       	pop	r17
    1ccc:	0f 91       	pop	r16
    1cce:	ff 90       	pop	r15
    1cd0:	ef 90       	pop	r14
    1cd2:	df 90       	pop	r13
    1cd4:	cf 90       	pop	r12
    1cd6:	0c 94 dc 0d 	jmp	0x1bb8	; 0x1bb8 <_ZN5Print11printNumberEmh>

00001cda <_ZN5Print5printEii>:
    1cda:	9a 01       	movw	r18, r20
    1cdc:	ab 01       	movw	r20, r22
    1cde:	77 0f       	add	r23, r23
    1ce0:	66 0b       	sbc	r22, r22
    1ce2:	77 0b       	sbc	r23, r23
    1ce4:	0c 94 25 0e 	jmp	0x1c4a	; 0x1c4a <_ZN5Print5printEli>

00001ce8 <_ZL4RecvPVhh>:
    1ce8:	61 50       	subi	r22, 0x01	; 1
    1cea:	30 f0       	brcs	.+12     	; 0x1cf8 <_ZL4RecvPVhh+0x10>
    1cec:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	20 83       	st	Z, r18
    1cf4:	01 96       	adiw	r24, 0x01	; 1
    1cf6:	f8 cf       	rjmp	.-16     	; 0x1ce8 <_ZL4RecvPVhh>
    1cf8:	28 98       	cbi	0x05, 0	; 5
    1cfa:	84 e6       	ldi	r24, 0x64	; 100
    1cfc:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <RxLEDPulse>
    1d00:	08 95       	ret

00001d02 <_ZL11SendControlh>:
    1d02:	40 91 e8 02 	lds	r20, 0x02E8	; 0x8002e8 <_ZL6_cmark>
    1d06:	50 91 e9 02 	lds	r21, 0x02E9	; 0x8002e9 <_ZL6_cmark+0x1>
    1d0a:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <_ZL5_cend>
    1d0e:	30 91 e7 02 	lds	r19, 0x02E7	; 0x8002e7 <_ZL5_cend+0x1>
    1d12:	42 17       	cp	r20, r18
    1d14:	53 07       	cpc	r21, r19
    1d16:	b4 f4       	brge	.+44     	; 0x1d44 <_ZL11SendControlh+0x42>
    1d18:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d1c:	95 70       	andi	r25, 0x05	; 5
    1d1e:	e1 f3       	breq	.-8      	; 0x1d18 <_ZL11SendControlh+0x16>
    1d20:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d24:	92 fd       	sbrc	r25, 2
    1d26:	19 c0       	rjmp	.+50     	; 0x1d5a <_ZL11SendControlh+0x58>
    1d28:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1d2c:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <_ZL6_cmark>
    1d30:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <_ZL6_cmark+0x1>
    1d34:	01 96       	adiw	r24, 0x01	; 1
    1d36:	8f 73       	andi	r24, 0x3F	; 63
    1d38:	99 27       	eor	r25, r25
    1d3a:	89 2b       	or	r24, r25
    1d3c:	19 f4       	brne	.+6      	; 0x1d44 <_ZL11SendControlh+0x42>
    1d3e:	8e ef       	ldi	r24, 0xFE	; 254
    1d40:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d44:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <_ZL6_cmark>
    1d48:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <_ZL6_cmark+0x1>
    1d4c:	01 96       	adiw	r24, 0x01	; 1
    1d4e:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <_ZL6_cmark+0x1>
    1d52:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <_ZL6_cmark>
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	08 95       	ret
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	08 95       	ret

00001d5e <_ZL24USB_SendStringDescriptorPKhhh>:
    1d5e:	df 92       	push	r13
    1d60:	ef 92       	push	r14
    1d62:	ff 92       	push	r15
    1d64:	0f 93       	push	r16
    1d66:	1f 93       	push	r17
    1d68:	cf 93       	push	r28
    1d6a:	df 93       	push	r29
    1d6c:	d8 2e       	mov	r13, r24
    1d6e:	f9 2e       	mov	r15, r25
    1d70:	e4 2e       	mov	r14, r20
    1d72:	06 2f       	mov	r16, r22
    1d74:	10 e0       	ldi	r17, 0x00	; 0
    1d76:	c8 01       	movw	r24, r16
    1d78:	01 96       	adiw	r24, 0x01	; 1
    1d7a:	88 0f       	add	r24, r24
    1d7c:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <_ZL11SendControlh>
    1d80:	83 e0       	ldi	r24, 0x03	; 3
    1d82:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <_ZL11SendControlh>
    1d86:	cd 2d       	mov	r28, r13
    1d88:	df 2d       	mov	r29, r15
    1d8a:	0c 0f       	add	r16, r28
    1d8c:	1d 1f       	adc	r17, r29
    1d8e:	c0 17       	cp	r28, r16
    1d90:	d1 07       	cpc	r29, r17
    1d92:	89 f0       	breq	.+34     	; 0x1db6 <_ZL24USB_SendStringDescriptorPKhhh+0x58>
    1d94:	e7 fe       	sbrs	r14, 7
    1d96:	03 c0       	rjmp	.+6      	; 0x1d9e <_ZL24USB_SendStringDescriptorPKhhh+0x40>
    1d98:	fe 01       	movw	r30, r28
    1d9a:	84 91       	lpm	r24, Z
    1d9c:	01 c0       	rjmp	.+2      	; 0x1da0 <_ZL24USB_SendStringDescriptorPKhhh+0x42>
    1d9e:	88 81       	ld	r24, Y
    1da0:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <_ZL11SendControlh>
    1da4:	f8 2e       	mov	r15, r24
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <_ZL11SendControlh>
    1dac:	8f 21       	and	r24, r15
    1dae:	21 96       	adiw	r28, 0x01	; 1
    1db0:	81 11       	cpse	r24, r1
    1db2:	ed cf       	rjmp	.-38     	; 0x1d8e <_ZL24USB_SendStringDescriptorPKhhh+0x30>
    1db4:	01 c0       	rjmp	.+2      	; 0x1db8 <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	df 91       	pop	r29
    1dba:	cf 91       	pop	r28
    1dbc:	1f 91       	pop	r17
    1dbe:	0f 91       	pop	r16
    1dc0:	ff 90       	pop	r15
    1dc2:	ef 90       	pop	r14
    1dc4:	df 90       	pop	r13
    1dc6:	08 95       	ret

00001dc8 <_ZL15USB_ClockEnablev>:
    1dc8:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    1dcc:	81 60       	ori	r24, 0x01	; 1
    1dce:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    1dd2:	80 ea       	ldi	r24, 0xA0	; 160
    1dd4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1dd8:	89 b5       	in	r24, 0x29	; 41
    1dda:	80 61       	ori	r24, 0x10	; 16
    1ddc:	89 bd       	out	0x29, r24	; 41
    1dde:	89 b5       	in	r24, 0x29	; 41
    1de0:	82 60       	ori	r24, 0x02	; 2
    1de2:	89 bd       	out	0x29, r24	; 41
    1de4:	09 b4       	in	r0, 0x29	; 41
    1de6:	00 fe       	sbrs	r0, 0
    1de8:	fd cf       	rjmp	.-6      	; 0x1de4 <_ZL15USB_ClockEnablev+0x1c>
    1dea:	61 e0       	ldi	r22, 0x01	; 1
    1dec:	70 e0       	ldi	r23, 0x00	; 0
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	0e 94 28 13 	call	0x2650	; 0x2650 <delay>
    1df6:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1dfa:	8f 7c       	andi	r24, 0xCF	; 207
    1dfc:	80 61       	ori	r24, 0x10	; 16
    1dfe:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1e02:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1e06:	80 7f       	andi	r24, 0xF0	; 240
    1e08:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1e0c:	08 95       	ret

00001e0e <_ZL14SendInterfacesv>:
    1e0e:	cf 93       	push	r28
    1e10:	df 93       	push	r29
    1e12:	1f 92       	push	r1
    1e14:	cd b7       	in	r28, 0x3d	; 61
    1e16:	de b7       	in	r29, 0x3e	; 62
    1e18:	19 82       	std	Y+1, r1	; 0x01
    1e1a:	ce 01       	movw	r24, r28
    1e1c:	01 96       	adiw	r24, 0x01	; 1
    1e1e:	0e 94 c3 14 	call	0x2986	; 0x2986 <_Z16CDC_GetInterfacePh>
    1e22:	0e 94 f7 15 	call	0x2bee	; 0x2bee <_Z12PluggableUSBv>
    1e26:	be 01       	movw	r22, r28
    1e28:	6f 5f       	subi	r22, 0xFF	; 255
    1e2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2c:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <_ZN13PluggableUSB_12getInterfaceEPh>
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	0f 90       	pop	r0
    1e34:	df 91       	pop	r29
    1e36:	cf 91       	pop	r28
    1e38:	08 95       	ret

00001e3a <_ZN6LockEPC1Eh>:
    1e3a:	2f b7       	in	r18, 0x3f	; 63
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	20 83       	st	Z, r18
    1e40:	f8 94       	cli
    1e42:	67 70       	andi	r22, 0x07	; 7
    1e44:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1e48:	08 95       	ret

00001e4a <_Z13USB_Availableh>:
    1e4a:	cf 93       	push	r28
    1e4c:	df 93       	push	r29
    1e4e:	1f 92       	push	r1
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    1e54:	68 2f       	mov	r22, r24
    1e56:	ce 01       	movw	r24, r28
    1e58:	01 96       	adiw	r24, 0x01	; 1
    1e5a:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <_ZN6LockEPC1Eh>
    1e5e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1e62:	99 81       	ldd	r25, Y+1	; 0x01
    1e64:	9f bf       	out	0x3f, r25	; 63
    1e66:	0f 90       	pop	r0
    1e68:	df 91       	pop	r29
    1e6a:	cf 91       	pop	r28
    1e6c:	08 95       	ret

00001e6e <_Z8USB_RecvhPvi>:
    1e6e:	ef 92       	push	r14
    1e70:	ff 92       	push	r15
    1e72:	0f 93       	push	r16
    1e74:	1f 93       	push	r17
    1e76:	cf 93       	push	r28
    1e78:	df 93       	push	r29
    1e7a:	1f 92       	push	r1
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
    1e80:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <_usbConfiguration>
    1e84:	99 23       	and	r25, r25
    1e86:	11 f0       	breq	.+4      	; 0x1e8c <_Z8USB_RecvhPvi+0x1e>
    1e88:	57 ff       	sbrs	r21, 7
    1e8a:	03 c0       	rjmp	.+6      	; 0x1e92 <_Z8USB_RecvhPvi+0x24>
    1e8c:	8f ef       	ldi	r24, 0xFF	; 255
    1e8e:	9f ef       	ldi	r25, 0xFF	; 255
    1e90:	29 c0       	rjmp	.+82     	; 0x1ee4 <_Z8USB_RecvhPvi+0x76>
    1e92:	8a 01       	movw	r16, r20
    1e94:	7b 01       	movw	r14, r22
    1e96:	68 2f       	mov	r22, r24
    1e98:	ce 01       	movw	r24, r28
    1e9a:	01 96       	adiw	r24, 0x01	; 1
    1e9c:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <_ZN6LockEPC1Eh>
    1ea0:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	02 17       	cp	r16, r18
    1ea8:	13 07       	cpc	r17, r19
    1eaa:	0c f4       	brge	.+2      	; 0x1eae <_Z8USB_RecvhPvi+0x40>
    1eac:	98 01       	movw	r18, r16
    1eae:	82 2f       	mov	r24, r18
    1eb0:	f7 01       	movw	r30, r14
    1eb2:	94 e6       	ldi	r25, 0x64	; 100
    1eb4:	81 50       	subi	r24, 0x01	; 1
    1eb6:	38 f0       	brcs	.+14     	; 0x1ec6 <_Z8USB_RecvhPvi+0x58>
    1eb8:	28 98       	cbi	0x05, 0	; 5
    1eba:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <RxLEDPulse>
    1ebe:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1ec2:	41 93       	st	Z+, r20
    1ec4:	f7 cf       	rjmp	.-18     	; 0x1eb4 <_Z8USB_RecvhPvi+0x46>
    1ec6:	21 15       	cp	r18, r1
    1ec8:	31 05       	cpc	r19, r1
    1eca:	21 f0       	breq	.+8      	; 0x1ed4 <_Z8USB_RecvhPvi+0x66>
    1ecc:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1ed0:	88 23       	and	r24, r24
    1ed2:	21 f0       	breq	.+8      	; 0x1edc <_Z8USB_RecvhPvi+0x6e>
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	8f bf       	out	0x3f, r24	; 63
    1ed8:	c9 01       	movw	r24, r18
    1eda:	04 c0       	rjmp	.+8      	; 0x1ee4 <_Z8USB_RecvhPvi+0x76>
    1edc:	8b e6       	ldi	r24, 0x6B	; 107
    1ede:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ee2:	f8 cf       	rjmp	.-16     	; 0x1ed4 <_Z8USB_RecvhPvi+0x66>
    1ee4:	0f 90       	pop	r0
    1ee6:	df 91       	pop	r29
    1ee8:	cf 91       	pop	r28
    1eea:	1f 91       	pop	r17
    1eec:	0f 91       	pop	r16
    1eee:	ff 90       	pop	r15
    1ef0:	ef 90       	pop	r14
    1ef2:	08 95       	ret

00001ef4 <_Z8USB_Recvh>:
    1ef4:	cf 93       	push	r28
    1ef6:	df 93       	push	r29
    1ef8:	1f 92       	push	r1
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
    1efe:	41 e0       	ldi	r20, 0x01	; 1
    1f00:	50 e0       	ldi	r21, 0x00	; 0
    1f02:	be 01       	movw	r22, r28
    1f04:	6f 5f       	subi	r22, 0xFF	; 255
    1f06:	7f 4f       	sbci	r23, 0xFF	; 255
    1f08:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <_Z8USB_RecvhPvi>
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
    1f0e:	19 f4       	brne	.+6      	; 0x1f16 <_Z8USB_Recvh+0x22>
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	02 c0       	rjmp	.+4      	; 0x1f1a <_Z8USB_Recvh+0x26>
    1f16:	8f ef       	ldi	r24, 0xFF	; 255
    1f18:	9f ef       	ldi	r25, 0xFF	; 255
    1f1a:	0f 90       	pop	r0
    1f1c:	df 91       	pop	r29
    1f1e:	cf 91       	pop	r28
    1f20:	08 95       	ret

00001f22 <_Z13USB_SendSpaceh>:
    1f22:	cf 93       	push	r28
    1f24:	df 93       	push	r29
    1f26:	1f 92       	push	r1
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	68 2f       	mov	r22, r24
    1f2e:	ce 01       	movw	r24, r28
    1f30:	01 96       	adiw	r24, 0x01	; 1
    1f32:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <_ZN6LockEPC1Eh>
    1f36:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f3a:	89 2f       	mov	r24, r25
    1f3c:	80 72       	andi	r24, 0x20	; 32
    1f3e:	95 ff       	sbrs	r25, 5
    1f40:	04 c0       	rjmp	.+8      	; 0x1f4a <_Z13USB_SendSpaceh+0x28>
    1f42:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1f46:	80 e4       	ldi	r24, 0x40	; 64
    1f48:	89 1b       	sub	r24, r25
    1f4a:	99 81       	ldd	r25, Y+1	; 0x01
    1f4c:	9f bf       	out	0x3f, r25	; 63
    1f4e:	0f 90       	pop	r0
    1f50:	df 91       	pop	r29
    1f52:	cf 91       	pop	r28
    1f54:	08 95       	ret

00001f56 <_Z8USB_SendhPKvi>:
    1f56:	5f 92       	push	r5
    1f58:	6f 92       	push	r6
    1f5a:	7f 92       	push	r7
    1f5c:	8f 92       	push	r8
    1f5e:	9f 92       	push	r9
    1f60:	af 92       	push	r10
    1f62:	bf 92       	push	r11
    1f64:	cf 92       	push	r12
    1f66:	df 92       	push	r13
    1f68:	ef 92       	push	r14
    1f6a:	ff 92       	push	r15
    1f6c:	0f 93       	push	r16
    1f6e:	1f 93       	push	r17
    1f70:	cf 93       	push	r28
    1f72:	df 93       	push	r29
    1f74:	1f 92       	push	r1
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
    1f7a:	98 2e       	mov	r9, r24
    1f7c:	6b 01       	movw	r12, r22
    1f7e:	b4 2e       	mov	r11, r20
    1f80:	05 2f       	mov	r16, r21
    1f82:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <_usbConfiguration>
    1f86:	81 11       	cpse	r24, r1
    1f88:	03 c0       	rjmp	.+6      	; 0x1f90 <_Z8USB_SendhPKvi+0x3a>
    1f8a:	8f ef       	ldi	r24, 0xFF	; 255
    1f8c:	9f ef       	ldi	r25, 0xFF	; 255
    1f8e:	77 c0       	rjmp	.+238    	; 0x207e <_Z8USB_SendhPKvi+0x128>
    1f90:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <_usbSuspendState>
    1f94:	80 ff       	sbrs	r24, 0
    1f96:	05 c0       	rjmp	.+10     	; 0x1fa2 <_Z8USB_SendhPKvi+0x4c>
    1f98:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1f9c:	82 60       	ori	r24, 0x02	; 2
    1f9e:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1fa2:	eb 2c       	mov	r14, r11
    1fa4:	f0 2e       	mov	r15, r16
    1fa6:	a1 2c       	mov	r10, r1
    1fa8:	8a ef       	ldi	r24, 0xFA	; 250
    1faa:	88 2e       	mov	r8, r24
    1fac:	89 2d       	mov	r24, r9
    1fae:	80 72       	andi	r24, 0x20	; 32
    1fb0:	68 2e       	mov	r6, r24
    1fb2:	89 2d       	mov	r24, r9
    1fb4:	80 74       	andi	r24, 0x40	; 64
    1fb6:	58 2e       	mov	r5, r24
    1fb8:	9a e3       	ldi	r25, 0x3A	; 58
    1fba:	79 2e       	mov	r7, r25
    1fbc:	e1 14       	cp	r14, r1
    1fbe:	f1 04       	cpc	r15, r1
    1fc0:	19 f4       	brne	.+6      	; 0x1fc8 <_Z8USB_SendhPKvi+0x72>
    1fc2:	aa 20       	and	r10, r10
    1fc4:	09 f4       	brne	.+2      	; 0x1fc8 <_Z8USB_SendhPKvi+0x72>
    1fc6:	55 c0       	rjmp	.+170    	; 0x2072 <_Z8USB_SendhPKvi+0x11c>
    1fc8:	89 2d       	mov	r24, r9
    1fca:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <_Z13USB_SendSpaceh>
    1fce:	18 2f       	mov	r17, r24
    1fd0:	81 11       	cpse	r24, r1
    1fd2:	0a c0       	rjmp	.+20     	; 0x1fe8 <_Z8USB_SendhPKvi+0x92>
    1fd4:	8a 94       	dec	r8
    1fd6:	88 20       	and	r8, r8
    1fd8:	c1 f2       	breq	.-80     	; 0x1f8a <_Z8USB_SendhPKvi+0x34>
    1fda:	61 e0       	ldi	r22, 0x01	; 1
    1fdc:	70 e0       	ldi	r23, 0x00	; 0
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	0e 94 28 13 	call	0x2650	; 0x2650 <delay>
    1fe6:	ea cf       	rjmp	.-44     	; 0x1fbc <_Z8USB_SendhPKvi+0x66>
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	e8 16       	cp	r14, r24
    1fec:	f9 06       	cpc	r15, r25
    1fee:	0c f4       	brge	.+2      	; 0x1ff2 <_Z8USB_SendhPKvi+0x9c>
    1ff0:	1e 2d       	mov	r17, r14
    1ff2:	69 2d       	mov	r22, r9
    1ff4:	ce 01       	movw	r24, r28
    1ff6:	01 96       	adiw	r24, 0x01	; 1
    1ff8:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <_ZN6LockEPC1Eh>
    1ffc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2000:	85 ff       	sbrs	r24, 5
    2002:	34 c0       	rjmp	.+104    	; 0x206c <_Z8USB_SendhPKvi+0x116>
    2004:	81 2f       	mov	r24, r17
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	e8 1a       	sub	r14, r24
    200a:	f9 0a       	sbc	r15, r25
    200c:	66 20       	and	r6, r6
    200e:	29 f0       	breq	.+10     	; 0x201a <_Z8USB_SendhPKvi+0xc4>
    2010:	11 50       	subi	r17, 0x01	; 1
    2012:	a0 f0       	brcs	.+40     	; 0x203c <_Z8USB_SendhPKvi+0xe6>
    2014:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2018:	fb cf       	rjmp	.-10     	; 0x2010 <_Z8USB_SendhPKvi+0xba>
    201a:	f6 01       	movw	r30, r12
    201c:	97 fe       	sbrs	r9, 7
    201e:	0a c0       	rjmp	.+20     	; 0x2034 <_Z8USB_SendhPKvi+0xde>
    2020:	11 50       	subi	r17, 0x01	; 1
    2022:	50 f0       	brcs	.+20     	; 0x2038 <_Z8USB_SendhPKvi+0xe2>
    2024:	24 91       	lpm	r18, Z
    2026:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    202a:	31 96       	adiw	r30, 0x01	; 1
    202c:	f9 cf       	rjmp	.-14     	; 0x2020 <_Z8USB_SendhPKvi+0xca>
    202e:	21 91       	ld	r18, Z+
    2030:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2034:	11 50       	subi	r17, 0x01	; 1
    2036:	d8 f7       	brcc	.-10     	; 0x202e <_Z8USB_SendhPKvi+0xd8>
    2038:	c8 0e       	add	r12, r24
    203a:	d9 1e       	adc	r13, r25
    203c:	aa 20       	and	r10, r10
    203e:	19 f0       	breq	.+6      	; 0x2046 <_Z8USB_SendhPKvi+0xf0>
    2040:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2044:	0b c0       	rjmp	.+22     	; 0x205c <_Z8USB_SendhPKvi+0x106>
    2046:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    204a:	85 fd       	sbrc	r24, 5
    204c:	09 c0       	rjmp	.+18     	; 0x2060 <_Z8USB_SendhPKvi+0x10a>
    204e:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2052:	aa 24       	eor	r10, r10
    2054:	a3 94       	inc	r10
    2056:	e1 14       	cp	r14, r1
    2058:	f1 04       	cpc	r15, r1
    205a:	41 f0       	breq	.+16     	; 0x206c <_Z8USB_SendhPKvi+0x116>
    205c:	a1 2c       	mov	r10, r1
    205e:	06 c0       	rjmp	.+12     	; 0x206c <_Z8USB_SendhPKvi+0x116>
    2060:	e1 14       	cp	r14, r1
    2062:	f1 04       	cpc	r15, r1
    2064:	19 f4       	brne	.+6      	; 0x206c <_Z8USB_SendhPKvi+0x116>
    2066:	51 10       	cpse	r5, r1
    2068:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    206c:	89 81       	ldd	r24, Y+1	; 0x01
    206e:	8f bf       	out	0x3f, r24	; 63
    2070:	a5 cf       	rjmp	.-182    	; 0x1fbc <_Z8USB_SendhPKvi+0x66>
    2072:	5d 98       	cbi	0x0b, 5	; 11
    2074:	84 e6       	ldi	r24, 0x64	; 100
    2076:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <TxLEDPulse>
    207a:	8b 2d       	mov	r24, r11
    207c:	90 2f       	mov	r25, r16
    207e:	0f 90       	pop	r0
    2080:	df 91       	pop	r29
    2082:	cf 91       	pop	r28
    2084:	1f 91       	pop	r17
    2086:	0f 91       	pop	r16
    2088:	ff 90       	pop	r15
    208a:	ef 90       	pop	r14
    208c:	df 90       	pop	r13
    208e:	cf 90       	pop	r12
    2090:	bf 90       	pop	r11
    2092:	af 90       	pop	r10
    2094:	9f 90       	pop	r9
    2096:	8f 90       	pop	r8
    2098:	7f 90       	pop	r7
    209a:	6f 90       	pop	r6
    209c:	5f 90       	pop	r5
    209e:	08 95       	ret

000020a0 <_Z11InitControli>:
    20a0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    20a4:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <_ZL6_cmark+0x1>
    20a8:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <_ZL6_cmark>
    20ac:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <_ZL5_cend+0x1>
    20b0:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <_ZL5_cend>
    20b4:	08 95       	ret

000020b6 <_Z15USB_SendControlhPKvi>:
    20b6:	df 92       	push	r13
    20b8:	ef 92       	push	r14
    20ba:	ff 92       	push	r15
    20bc:	0f 93       	push	r16
    20be:	1f 93       	push	r17
    20c0:	cf 93       	push	r28
    20c2:	df 93       	push	r29
    20c4:	d8 2e       	mov	r13, r24
    20c6:	8a 01       	movw	r16, r20
    20c8:	7b 01       	movw	r14, r22
    20ca:	e4 0e       	add	r14, r20
    20cc:	f5 1e       	adc	r15, r21
    20ce:	eb 01       	movw	r28, r22
    20d0:	ce 15       	cp	r28, r14
    20d2:	df 05       	cpc	r29, r15
    20d4:	71 f0       	breq	.+28     	; 0x20f2 <_Z15USB_SendControlhPKvi+0x3c>
    20d6:	d7 fe       	sbrs	r13, 7
    20d8:	03 c0       	rjmp	.+6      	; 0x20e0 <_Z15USB_SendControlhPKvi+0x2a>
    20da:	fe 01       	movw	r30, r28
    20dc:	84 91       	lpm	r24, Z
    20de:	01 c0       	rjmp	.+2      	; 0x20e2 <_Z15USB_SendControlhPKvi+0x2c>
    20e0:	88 81       	ld	r24, Y
    20e2:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <_ZL11SendControlh>
    20e6:	21 96       	adiw	r28, 0x01	; 1
    20e8:	81 11       	cpse	r24, r1
    20ea:	f2 cf       	rjmp	.-28     	; 0x20d0 <_Z15USB_SendControlhPKvi+0x1a>
    20ec:	8f ef       	ldi	r24, 0xFF	; 255
    20ee:	9f ef       	ldi	r25, 0xFF	; 255
    20f0:	01 c0       	rjmp	.+2      	; 0x20f4 <_Z15USB_SendControlhPKvi+0x3e>
    20f2:	c8 01       	movw	r24, r16
    20f4:	df 91       	pop	r29
    20f6:	cf 91       	pop	r28
    20f8:	1f 91       	pop	r17
    20fa:	0f 91       	pop	r16
    20fc:	ff 90       	pop	r15
    20fe:	ef 90       	pop	r14
    2100:	df 90       	pop	r13
    2102:	08 95       	ret

00002104 <_Z15USB_RecvControlPvi>:
    2104:	af 92       	push	r10
    2106:	bf 92       	push	r11
    2108:	df 92       	push	r13
    210a:	ef 92       	push	r14
    210c:	ff 92       	push	r15
    210e:	0f 93       	push	r16
    2110:	1f 93       	push	r17
    2112:	cf 93       	push	r28
    2114:	df 93       	push	r29
    2116:	5c 01       	movw	r10, r24
    2118:	8b 01       	movw	r16, r22
    211a:	eb 01       	movw	r28, r22
    211c:	9b ef       	ldi	r25, 0xFB	; 251
    211e:	d9 2e       	mov	r13, r25
    2120:	20 97       	sbiw	r28, 0x00	; 0
    2122:	c1 f0       	breq	.+48     	; 0x2154 <_Z15USB_RecvControlPvi+0x50>
    2124:	7e 01       	movw	r14, r28
    2126:	c1 34       	cpi	r28, 0x41	; 65
    2128:	d1 05       	cpc	r29, r1
    212a:	1c f0       	brlt	.+6      	; 0x2132 <_Z15USB_RecvControlPvi+0x2e>
    212c:	80 e4       	ldi	r24, 0x40	; 64
    212e:	e8 2e       	mov	r14, r24
    2130:	f1 2c       	mov	r15, r1
    2132:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2136:	82 ff       	sbrs	r24, 2
    2138:	fc cf       	rjmp	.-8      	; 0x2132 <_Z15USB_RecvControlPvi+0x2e>
    213a:	c8 01       	movw	r24, r16
    213c:	8c 1b       	sub	r24, r28
    213e:	9d 0b       	sbc	r25, r29
    2140:	6e 2d       	mov	r22, r14
    2142:	8a 0d       	add	r24, r10
    2144:	9b 1d       	adc	r25, r11
    2146:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_ZL4RecvPVhh>
    214a:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    214e:	ce 19       	sub	r28, r14
    2150:	df 09       	sbc	r29, r15
    2152:	e6 cf       	rjmp	.-52     	; 0x2120 <_Z15USB_RecvControlPvi+0x1c>
    2154:	c8 01       	movw	r24, r16
    2156:	df 91       	pop	r29
    2158:	cf 91       	pop	r28
    215a:	1f 91       	pop	r17
    215c:	0f 91       	pop	r16
    215e:	ff 90       	pop	r15
    2160:	ef 90       	pop	r14
    2162:	df 90       	pop	r13
    2164:	bf 90       	pop	r11
    2166:	af 90       	pop	r10
    2168:	08 95       	ret

0000216a <__vector_11>:
    216a:	1f 92       	push	r1
    216c:	0f 92       	push	r0
    216e:	0f b6       	in	r0, 0x3f	; 63
    2170:	0f 92       	push	r0
    2172:	11 24       	eor	r1, r1
    2174:	cf 92       	push	r12
    2176:	df 92       	push	r13
    2178:	ef 92       	push	r14
    217a:	ff 92       	push	r15
    217c:	0f 93       	push	r16
    217e:	1f 93       	push	r17
    2180:	2f 93       	push	r18
    2182:	3f 93       	push	r19
    2184:	4f 93       	push	r20
    2186:	5f 93       	push	r21
    2188:	6f 93       	push	r22
    218a:	7f 93       	push	r23
    218c:	8f 93       	push	r24
    218e:	9f 93       	push	r25
    2190:	af 93       	push	r26
    2192:	bf 93       	push	r27
    2194:	ef 93       	push	r30
    2196:	ff 93       	push	r31
    2198:	cf 93       	push	r28
    219a:	df 93       	push	r29
    219c:	cd b7       	in	r28, 0x3d	; 61
    219e:	de b7       	in	r29, 0x3e	; 62
    21a0:	6c 97       	sbiw	r28, 0x1c	; 28
    21a2:	de bf       	out	0x3e, r29	; 62
    21a4:	cd bf       	out	0x3d, r28	; 61
    21a6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    21aa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    21ae:	83 ff       	sbrs	r24, 3
    21b0:	17 c1       	rjmp	.+558    	; 0x23e0 <__vector_11+0x276>
    21b2:	68 e0       	ldi	r22, 0x08	; 8
    21b4:	ce 01       	movw	r24, r28
    21b6:	45 96       	adiw	r24, 0x15	; 21
    21b8:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_ZL4RecvPVhh>
    21bc:	82 ef       	ldi	r24, 0xF2	; 242
    21be:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    21c2:	8d 89       	ldd	r24, Y+21	; 0x15
    21c4:	87 ff       	sbrs	r24, 7
    21c6:	05 c0       	rjmp	.+10     	; 0x21d2 <__vector_11+0x68>
    21c8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    21cc:	90 ff       	sbrs	r25, 0
    21ce:	fc cf       	rjmp	.-8      	; 0x21c8 <__vector_11+0x5e>
    21d0:	03 c0       	rjmp	.+6      	; 0x21d8 <__vector_11+0x6e>
    21d2:	9e ef       	ldi	r25, 0xFE	; 254
    21d4:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    21d8:	98 2f       	mov	r25, r24
    21da:	90 76       	andi	r25, 0x60	; 96
    21dc:	09 f0       	breq	.+2      	; 0x21e0 <__vector_11+0x76>
    21de:	d8 c0       	rjmp	.+432    	; 0x2390 <__vector_11+0x226>
    21e0:	9e 89       	ldd	r25, Y+22	; 0x16
    21e2:	4f 89       	ldd	r20, Y+23	; 0x17
    21e4:	58 8d       	ldd	r21, Y+24	; 0x18
    21e6:	2f 89       	ldd	r18, Y+23	; 0x17
    21e8:	18 8d       	ldd	r17, Y+24	; 0x18
    21ea:	91 11       	cpse	r25, r1
    21ec:	0c c0       	rjmp	.+24     	; 0x2206 <__vector_11+0x9c>
    21ee:	80 38       	cpi	r24, 0x80	; 128
    21f0:	29 f4       	brne	.+10     	; 0x21fc <__vector_11+0x92>
    21f2:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <_usbCurrentStatus>
    21f6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    21fa:	02 c0       	rjmp	.+4      	; 0x2200 <__vector_11+0x96>
    21fc:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2200:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2204:	e6 c0       	rjmp	.+460    	; 0x23d2 <__vector_11+0x268>
    2206:	91 30       	cpi	r25, 0x01	; 1
    2208:	51 f4       	brne	.+20     	; 0x221e <__vector_11+0xb4>
    220a:	81 11       	cpse	r24, r1
    220c:	e2 c0       	rjmp	.+452    	; 0x23d2 <__vector_11+0x268>
    220e:	41 30       	cpi	r20, 0x01	; 1
    2210:	51 05       	cpc	r21, r1
    2212:	09 f0       	breq	.+2      	; 0x2216 <__vector_11+0xac>
    2214:	de c0       	rjmp	.+444    	; 0x23d2 <__vector_11+0x268>
    2216:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <_usbCurrentStatus>
    221a:	8d 7f       	andi	r24, 0xFD	; 253
    221c:	0b c0       	rjmp	.+22     	; 0x2234 <__vector_11+0xca>
    221e:	93 30       	cpi	r25, 0x03	; 3
    2220:	61 f4       	brne	.+24     	; 0x223a <__vector_11+0xd0>
    2222:	81 11       	cpse	r24, r1
    2224:	d6 c0       	rjmp	.+428    	; 0x23d2 <__vector_11+0x268>
    2226:	41 30       	cpi	r20, 0x01	; 1
    2228:	51 05       	cpc	r21, r1
    222a:	09 f0       	breq	.+2      	; 0x222e <__vector_11+0xc4>
    222c:	d2 c0       	rjmp	.+420    	; 0x23d2 <__vector_11+0x268>
    222e:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <_usbCurrentStatus>
    2232:	82 60       	ori	r24, 0x02	; 2
    2234:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <_usbCurrentStatus>
    2238:	cc c0       	rjmp	.+408    	; 0x23d2 <__vector_11+0x268>
    223a:	95 30       	cpi	r25, 0x05	; 5
    223c:	49 f4       	brne	.+18     	; 0x2250 <__vector_11+0xe6>
    223e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2242:	80 ff       	sbrs	r24, 0
    2244:	fc cf       	rjmp	.-8      	; 0x223e <__vector_11+0xd4>
    2246:	82 2f       	mov	r24, r18
    2248:	80 68       	ori	r24, 0x80	; 128
    224a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    224e:	c1 c0       	rjmp	.+386    	; 0x23d2 <__vector_11+0x268>
    2250:	96 30       	cpi	r25, 0x06	; 6
    2252:	09 f0       	breq	.+2      	; 0x2256 <__vector_11+0xec>
    2254:	70 c0       	rjmp	.+224    	; 0x2336 <__vector_11+0x1cc>
    2256:	eb 8c       	ldd	r14, Y+27	; 0x1b
    2258:	fc 8c       	ldd	r15, Y+28	; 0x1c
    225a:	12 30       	cpi	r17, 0x02	; 2
    225c:	69 f5       	brne	.+90     	; 0x22b8 <__vector_11+0x14e>
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	0e 94 50 10 	call	0x20a0	; 0x20a0 <_Z11InitControli>
    2266:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <_ZL14SendInterfacesv>
    226a:	99 e0       	ldi	r25, 0x09	; 9
    226c:	9e 01       	movw	r18, r28
    226e:	2f 5f       	subi	r18, 0xFF	; 255
    2270:	3f 4f       	sbci	r19, 0xFF	; 255
    2272:	69 01       	movw	r12, r18
    2274:	f9 01       	movw	r30, r18
    2276:	29 2f       	mov	r18, r25
    2278:	11 92       	st	Z+, r1
    227a:	2a 95       	dec	r18
    227c:	e9 f7       	brne	.-6      	; 0x2278 <__vector_11+0x10e>
    227e:	99 83       	std	Y+1, r25	; 0x01
    2280:	1a 83       	std	Y+2, r17	; 0x02
    2282:	91 e0       	ldi	r25, 0x01	; 1
    2284:	9e 83       	std	Y+6, r25	; 0x06
    2286:	90 ea       	ldi	r25, 0xA0	; 160
    2288:	98 87       	std	Y+8, r25	; 0x08
    228a:	9a ef       	ldi	r25, 0xFA	; 250
    228c:	99 87       	std	Y+9, r25	; 0x09
    228e:	20 91 e8 02 	lds	r18, 0x02E8	; 0x8002e8 <_ZL6_cmark>
    2292:	30 91 e9 02 	lds	r19, 0x02E9	; 0x8002e9 <_ZL6_cmark+0x1>
    2296:	27 5f       	subi	r18, 0xF7	; 247
    2298:	3f 4f       	sbci	r19, 0xFF	; 255
    229a:	3c 83       	std	Y+4, r19	; 0x04
    229c:	2b 83       	std	Y+3, r18	; 0x03
    229e:	8d 83       	std	Y+5, r24	; 0x05
    22a0:	c7 01       	movw	r24, r14
    22a2:	0e 94 50 10 	call	0x20a0	; 0x20a0 <_Z11InitControli>
    22a6:	49 e0       	ldi	r20, 0x09	; 9
    22a8:	50 e0       	ldi	r21, 0x00	; 0
    22aa:	b6 01       	movw	r22, r12
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <_Z15USB_SendControlhPKvi>
    22b2:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <_ZL14SendInterfacesv>
    22b6:	8d c0       	rjmp	.+282    	; 0x23d2 <__vector_11+0x268>
    22b8:	c7 01       	movw	r24, r14
    22ba:	0e 94 50 10 	call	0x20a0	; 0x20a0 <_Z11InitControli>
    22be:	0e 94 f7 15 	call	0x2bee	; 0x2bee <_Z12PluggableUSBv>
    22c2:	be 01       	movw	r22, r28
    22c4:	6b 5e       	subi	r22, 0xEB	; 235
    22c6:	7f 4f       	sbci	r23, 0xFF	; 255
    22c8:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	19 f0       	breq	.+6      	; 0x22d6 <__vector_11+0x16c>
    22d0:	0c f0       	brlt	.+2      	; 0x22d4 <__vector_11+0x16a>
    22d2:	7f c0       	rjmp	.+254    	; 0x23d2 <__vector_11+0x268>
    22d4:	82 c0       	rjmp	.+260    	; 0x23da <__vector_11+0x270>
    22d6:	11 30       	cpi	r17, 0x01	; 1
    22d8:	09 f4       	brne	.+2      	; 0x22dc <__vector_11+0x172>
    22da:	70 c0       	rjmp	.+224    	; 0x23bc <__vector_11+0x252>
    22dc:	13 30       	cpi	r17, 0x03	; 3
    22de:	09 f0       	breq	.+2      	; 0x22e2 <__vector_11+0x178>
    22e0:	7c c0       	rjmp	.+248    	; 0x23da <__vector_11+0x270>
    22e2:	8f 89       	ldd	r24, Y+23	; 0x17
    22e4:	88 23       	and	r24, r24
    22e6:	09 f4       	brne	.+2      	; 0x22ea <__vector_11+0x180>
    22e8:	6c c0       	rjmp	.+216    	; 0x23c2 <__vector_11+0x258>
    22ea:	82 30       	cpi	r24, 0x02	; 2
    22ec:	29 f4       	brne	.+10     	; 0x22f8 <__vector_11+0x18e>
    22ee:	40 e8       	ldi	r20, 0x80	; 128
    22f0:	60 e1       	ldi	r22, 0x10	; 16
    22f2:	83 ef       	ldi	r24, 0xF3	; 243
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	06 c0       	rjmp	.+12     	; 0x2304 <__vector_11+0x19a>
    22f8:	81 30       	cpi	r24, 0x01	; 1
    22fa:	39 f4       	brne	.+14     	; 0x230a <__vector_11+0x1a0>
    22fc:	40 e8       	ldi	r20, 0x80	; 128
    22fe:	6b e0       	ldi	r22, 0x0B	; 11
    2300:	87 ee       	ldi	r24, 0xE7	; 231
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <_ZL24USB_SendStringDescriptorPKhhh>
    2308:	56 c0       	rjmp	.+172    	; 0x23b6 <__vector_11+0x24c>
    230a:	83 30       	cpi	r24, 0x03	; 3
    230c:	09 f0       	breq	.+2      	; 0x2310 <__vector_11+0x1a6>
    230e:	65 c0       	rjmp	.+202    	; 0x23da <__vector_11+0x270>
    2310:	0e 94 f7 15 	call	0x2bee	; 0x2bee <_Z12PluggableUSBv>
    2314:	8e 01       	movw	r16, r28
    2316:	0f 5f       	subi	r16, 0xFF	; 255
    2318:	1f 4f       	sbci	r17, 0xFF	; 255
    231a:	b8 01       	movw	r22, r16
    231c:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <_ZN13PluggableUSB_12getShortNameEPc>
    2320:	f8 01       	movw	r30, r16
    2322:	01 90       	ld	r0, Z+
    2324:	00 20       	and	r0, r0
    2326:	e9 f7       	brne	.-6      	; 0x2322 <__vector_11+0x1b8>
    2328:	31 97       	sbiw	r30, 0x01	; 1
    232a:	bf 01       	movw	r22, r30
    232c:	60 1b       	sub	r22, r16
    232e:	71 0b       	sbc	r23, r17
    2330:	40 e0       	ldi	r20, 0x00	; 0
    2332:	c8 01       	movw	r24, r16
    2334:	e7 cf       	rjmp	.-50     	; 0x2304 <__vector_11+0x19a>
    2336:	97 30       	cpi	r25, 0x07	; 7
    2338:	09 f4       	brne	.+2      	; 0x233c <__vector_11+0x1d2>
    233a:	4f c0       	rjmp	.+158    	; 0x23da <__vector_11+0x270>
    233c:	98 30       	cpi	r25, 0x08	; 8
    233e:	21 f4       	brne	.+8      	; 0x2348 <__vector_11+0x1de>
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2346:	45 c0       	rjmp	.+138    	; 0x23d2 <__vector_11+0x268>
    2348:	99 30       	cpi	r25, 0x09	; 9
    234a:	09 f0       	breq	.+2      	; 0x234e <__vector_11+0x1e4>
    234c:	42 c0       	rjmp	.+132    	; 0x23d2 <__vector_11+0x268>
    234e:	83 70       	andi	r24, 0x03	; 3
    2350:	09 f0       	breq	.+2      	; 0x2354 <__vector_11+0x1ea>
    2352:	43 c0       	rjmp	.+134    	; 0x23da <__vector_11+0x270>
    2354:	e5 e0       	ldi	r30, 0x05	; 5
    2356:	f1 e0       	ldi	r31, 0x01	; 1
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	31 e0       	ldi	r19, 0x01	; 1
    235c:	96 e3       	ldi	r25, 0x36	; 54
    235e:	20 81       	ld	r18, Z
    2360:	21 11       	cpse	r18, r1
    2362:	09 c0       	rjmp	.+18     	; 0x2376 <__vector_11+0x20c>
    2364:	8e e7       	ldi	r24, 0x7E	; 126
    2366:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    236a:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    236e:	8f 89       	ldd	r24, Y+23	; 0x17
    2370:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <_usbConfiguration>
    2374:	2e c0       	rjmp	.+92     	; 0x23d2 <__vector_11+0x268>
    2376:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    237a:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    237e:	21 91       	ld	r18, Z+
    2380:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2384:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    2388:	8f 5f       	subi	r24, 0xFF	; 255
    238a:	87 30       	cpi	r24, 0x07	; 7
    238c:	41 f7       	brne	.-48     	; 0x235e <__vector_11+0x1f4>
    238e:	ea cf       	rjmp	.-44     	; 0x2364 <__vector_11+0x1fa>
    2390:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2392:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2394:	0e 94 50 10 	call	0x20a0	; 0x20a0 <_Z11InitControli>
    2398:	89 8d       	ldd	r24, Y+25	; 0x19
    239a:	81 11       	cpse	r24, r1
    239c:	05 c0       	rjmp	.+10     	; 0x23a8 <__vector_11+0x23e>
    239e:	ce 01       	movw	r24, r28
    23a0:	45 96       	adiw	r24, 0x15	; 21
    23a2:	0e 94 ce 14 	call	0x299c	; 0x299c <_Z9CDC_SetupR8USBSetup>
    23a6:	07 c0       	rjmp	.+14     	; 0x23b6 <__vector_11+0x24c>
    23a8:	0e 94 f7 15 	call	0x2bee	; 0x2bee <_Z12PluggableUSBv>
    23ac:	be 01       	movw	r22, r28
    23ae:	6b 5e       	subi	r22, 0xEB	; 235
    23b0:	7f 4f       	sbci	r23, 0xFF	; 255
    23b2:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <_ZN13PluggableUSB_5setupER8USBSetup>
    23b6:	88 23       	and	r24, r24
    23b8:	81 f0       	breq	.+32     	; 0x23da <__vector_11+0x270>
    23ba:	0b c0       	rjmp	.+22     	; 0x23d2 <__vector_11+0x268>
    23bc:	65 ed       	ldi	r22, 0xD5	; 213
    23be:	70 e0       	ldi	r23, 0x00	; 0
    23c0:	02 c0       	rjmp	.+4      	; 0x23c6 <__vector_11+0x25c>
    23c2:	64 e0       	ldi	r22, 0x04	; 4
    23c4:	71 e0       	ldi	r23, 0x01	; 1
    23c6:	fb 01       	movw	r30, r22
    23c8:	44 91       	lpm	r20, Z
    23ca:	50 e0       	ldi	r21, 0x00	; 0
    23cc:	80 e8       	ldi	r24, 0x80	; 128
    23ce:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <_Z15USB_SendControlhPKvi>
    23d2:	8e ef       	ldi	r24, 0xFE	; 254
    23d4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    23d8:	03 c0       	rjmp	.+6      	; 0x23e0 <__vector_11+0x276>
    23da:	81 e2       	ldi	r24, 0x21	; 33
    23dc:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    23e0:	6c 96       	adiw	r28, 0x1c	; 28
    23e2:	0f b6       	in	r0, 0x3f	; 63
    23e4:	f8 94       	cli
    23e6:	de bf       	out	0x3e, r29	; 62
    23e8:	0f be       	out	0x3f, r0	; 63
    23ea:	cd bf       	out	0x3d, r28	; 61
    23ec:	df 91       	pop	r29
    23ee:	cf 91       	pop	r28
    23f0:	ff 91       	pop	r31
    23f2:	ef 91       	pop	r30
    23f4:	bf 91       	pop	r27
    23f6:	af 91       	pop	r26
    23f8:	9f 91       	pop	r25
    23fa:	8f 91       	pop	r24
    23fc:	7f 91       	pop	r23
    23fe:	6f 91       	pop	r22
    2400:	5f 91       	pop	r21
    2402:	4f 91       	pop	r20
    2404:	3f 91       	pop	r19
    2406:	2f 91       	pop	r18
    2408:	1f 91       	pop	r17
    240a:	0f 91       	pop	r16
    240c:	ff 90       	pop	r15
    240e:	ef 90       	pop	r14
    2410:	df 90       	pop	r13
    2412:	cf 90       	pop	r12
    2414:	0f 90       	pop	r0
    2416:	0f be       	out	0x3f, r0	; 63
    2418:	0f 90       	pop	r0
    241a:	1f 90       	pop	r1
    241c:	18 95       	reti

0000241e <_Z9USB_Flushh>:
    241e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2422:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2426:	88 23       	and	r24, r24
    2428:	19 f0       	breq	.+6      	; 0x2430 <_Z9USB_Flushh+0x12>
    242a:	8a e3       	ldi	r24, 0x3A	; 58
    242c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2430:	08 95       	ret

00002432 <__vector_10>:
    2432:	1f 92       	push	r1
    2434:	0f 92       	push	r0
    2436:	0f b6       	in	r0, 0x3f	; 63
    2438:	0f 92       	push	r0
    243a:	11 24       	eor	r1, r1
    243c:	2f 93       	push	r18
    243e:	3f 93       	push	r19
    2440:	4f 93       	push	r20
    2442:	5f 93       	push	r21
    2444:	6f 93       	push	r22
    2446:	7f 93       	push	r23
    2448:	8f 93       	push	r24
    244a:	9f 93       	push	r25
    244c:	af 93       	push	r26
    244e:	bf 93       	push	r27
    2450:	cf 93       	push	r28
    2452:	ef 93       	push	r30
    2454:	ff 93       	push	r31
    2456:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    245a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    245e:	83 7f       	andi	r24, 0xF3	; 243
    2460:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2464:	c3 ff       	sbrs	r28, 3
    2466:	0f c0       	rjmp	.+30     	; 0x2486 <__vector_10+0x54>
    2468:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2472:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2476:	82 e3       	ldi	r24, 0x32	; 50
    2478:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    247c:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <_usbConfiguration>
    2480:	88 e0       	ldi	r24, 0x08	; 8
    2482:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    2486:	c2 ff       	sbrs	r28, 2
    2488:	19 c0       	rjmp	.+50     	; 0x24bc <__vector_10+0x8a>
    248a:	83 e0       	ldi	r24, 0x03	; 3
    248c:	0e 94 0f 12 	call	0x241e	; 0x241e <_Z9USB_Flushh>
    2490:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <TxLEDPulse>
    2494:	88 23       	and	r24, r24
    2496:	39 f0       	breq	.+14     	; 0x24a6 <__vector_10+0x74>
    2498:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <TxLEDPulse>
    249c:	81 50       	subi	r24, 0x01	; 1
    249e:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <TxLEDPulse>
    24a2:	88 23       	and	r24, r24
    24a4:	89 f1       	breq	.+98     	; 0x2508 <__vector_10+0xd6>
    24a6:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <RxLEDPulse>
    24aa:	88 23       	and	r24, r24
    24ac:	39 f0       	breq	.+14     	; 0x24bc <__vector_10+0x8a>
    24ae:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <RxLEDPulse>
    24b2:	81 50       	subi	r24, 0x01	; 1
    24b4:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <RxLEDPulse>
    24b8:	88 23       	and	r24, r24
    24ba:	41 f1       	breq	.+80     	; 0x250c <__vector_10+0xda>
    24bc:	c4 ff       	sbrs	r28, 4
    24be:	10 c0       	rjmp	.+32     	; 0x24e0 <__vector_10+0xae>
    24c0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    24c4:	8e 7e       	andi	r24, 0xEE	; 238
    24c6:	81 60       	ori	r24, 0x01	; 1
    24c8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    24cc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    24d0:	8f 7e       	andi	r24, 0xEF	; 239
    24d2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    24d6:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <_usbSuspendState>
    24da:	8e 7e       	andi	r24, 0xEE	; 238
    24dc:	80 61       	ori	r24, 0x10	; 16
    24de:	11 c0       	rjmp	.+34     	; 0x2502 <__vector_10+0xd0>
    24e0:	c0 ff       	sbrs	r28, 0
    24e2:	16 c0       	rjmp	.+44     	; 0x2510 <__vector_10+0xde>
    24e4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    24e8:	8e 7e       	andi	r24, 0xEE	; 238
    24ea:	80 61       	ori	r24, 0x10	; 16
    24ec:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    24f0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    24f4:	8e 7e       	andi	r24, 0xEE	; 238
    24f6:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    24fa:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <_usbSuspendState>
    24fe:	8e 7e       	andi	r24, 0xEE	; 238
    2500:	81 60       	ori	r24, 0x01	; 1
    2502:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <_usbSuspendState>
    2506:	04 c0       	rjmp	.+8      	; 0x2510 <__vector_10+0xde>
    2508:	5d 9a       	sbi	0x0b, 5	; 11
    250a:	cd cf       	rjmp	.-102    	; 0x24a6 <__vector_10+0x74>
    250c:	28 9a       	sbi	0x05, 0	; 5
    250e:	d6 cf       	rjmp	.-84     	; 0x24bc <__vector_10+0x8a>
    2510:	ff 91       	pop	r31
    2512:	ef 91       	pop	r30
    2514:	cf 91       	pop	r28
    2516:	bf 91       	pop	r27
    2518:	af 91       	pop	r26
    251a:	9f 91       	pop	r25
    251c:	8f 91       	pop	r24
    251e:	7f 91       	pop	r23
    2520:	6f 91       	pop	r22
    2522:	5f 91       	pop	r21
    2524:	4f 91       	pop	r20
    2526:	3f 91       	pop	r19
    2528:	2f 91       	pop	r18
    252a:	0f 90       	pop	r0
    252c:	0f be       	out	0x3f, r0	; 63
    252e:	0f 90       	pop	r0
    2530:	1f 90       	pop	r1
    2532:	18 95       	reti

00002534 <_ZN10USBDevice_6attachEv>:
    2534:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <_usbConfiguration>
    2538:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <_usbCurrentStatus>
    253c:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <_usbSuspendState>
    2540:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZL15USB_ClockEnablev>
    2544:	e1 ee       	ldi	r30, 0xE1	; 225
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	8e 7e       	andi	r24, 0xEE	; 238
    254c:	80 83       	st	Z, r24
    254e:	8d e0       	ldi	r24, 0x0D	; 13
    2550:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2554:	55 9a       	sbi	0x0a, 5	; 10
    2556:	20 9a       	sbi	0x04, 0	; 4
    2558:	08 95       	ret

0000255a <__vector_23>:
    255a:	1f 92       	push	r1
    255c:	0f 92       	push	r0
    255e:	0f b6       	in	r0, 0x3f	; 63
    2560:	0f 92       	push	r0
    2562:	11 24       	eor	r1, r1
    2564:	2f 93       	push	r18
    2566:	3f 93       	push	r19
    2568:	8f 93       	push	r24
    256a:	9f 93       	push	r25
    256c:	af 93       	push	r26
    256e:	bf 93       	push	r27
    2570:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <timer0_millis>
    2574:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <timer0_millis+0x1>
    2578:	a0 91 f2 02 	lds	r26, 0x02F2	; 0x8002f2 <timer0_millis+0x2>
    257c:	b0 91 f3 02 	lds	r27, 0x02F3	; 0x8002f3 <timer0_millis+0x3>
    2580:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <timer0_fract>
    2584:	23 e0       	ldi	r18, 0x03	; 3
    2586:	23 0f       	add	r18, r19
    2588:	2d 37       	cpi	r18, 0x7D	; 125
    258a:	20 f4       	brcc	.+8      	; 0x2594 <__vector_23+0x3a>
    258c:	01 96       	adiw	r24, 0x01	; 1
    258e:	a1 1d       	adc	r26, r1
    2590:	b1 1d       	adc	r27, r1
    2592:	05 c0       	rjmp	.+10     	; 0x259e <__vector_23+0x44>
    2594:	26 e8       	ldi	r18, 0x86	; 134
    2596:	23 0f       	add	r18, r19
    2598:	02 96       	adiw	r24, 0x02	; 2
    259a:	a1 1d       	adc	r26, r1
    259c:	b1 1d       	adc	r27, r1
    259e:	20 93 ef 02 	sts	0x02EF, r18	; 0x8002ef <timer0_fract>
    25a2:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <timer0_millis>
    25a6:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <timer0_millis+0x1>
    25aa:	a0 93 f2 02 	sts	0x02F2, r26	; 0x8002f2 <timer0_millis+0x2>
    25ae:	b0 93 f3 02 	sts	0x02F3, r27	; 0x8002f3 <timer0_millis+0x3>
    25b2:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <timer0_overflow_count>
    25b6:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <timer0_overflow_count+0x1>
    25ba:	a0 91 f6 02 	lds	r26, 0x02F6	; 0x8002f6 <timer0_overflow_count+0x2>
    25be:	b0 91 f7 02 	lds	r27, 0x02F7	; 0x8002f7 <timer0_overflow_count+0x3>
    25c2:	01 96       	adiw	r24, 0x01	; 1
    25c4:	a1 1d       	adc	r26, r1
    25c6:	b1 1d       	adc	r27, r1
    25c8:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <timer0_overflow_count>
    25cc:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <timer0_overflow_count+0x1>
    25d0:	a0 93 f6 02 	sts	0x02F6, r26	; 0x8002f6 <timer0_overflow_count+0x2>
    25d4:	b0 93 f7 02 	sts	0x02F7, r27	; 0x8002f7 <timer0_overflow_count+0x3>
    25d8:	bf 91       	pop	r27
    25da:	af 91       	pop	r26
    25dc:	9f 91       	pop	r25
    25de:	8f 91       	pop	r24
    25e0:	3f 91       	pop	r19
    25e2:	2f 91       	pop	r18
    25e4:	0f 90       	pop	r0
    25e6:	0f be       	out	0x3f, r0	; 63
    25e8:	0f 90       	pop	r0
    25ea:	1f 90       	pop	r1
    25ec:	18 95       	reti

000025ee <millis>:
    25ee:	2f b7       	in	r18, 0x3f	; 63
    25f0:	f8 94       	cli
    25f2:	60 91 f0 02 	lds	r22, 0x02F0	; 0x8002f0 <timer0_millis>
    25f6:	70 91 f1 02 	lds	r23, 0x02F1	; 0x8002f1 <timer0_millis+0x1>
    25fa:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <timer0_millis+0x2>
    25fe:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <timer0_millis+0x3>
    2602:	2f bf       	out	0x3f, r18	; 63
    2604:	08 95       	ret

00002606 <micros>:
    2606:	3f b7       	in	r19, 0x3f	; 63
    2608:	f8 94       	cli
    260a:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <timer0_overflow_count>
    260e:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <timer0_overflow_count+0x1>
    2612:	a0 91 f6 02 	lds	r26, 0x02F6	; 0x8002f6 <timer0_overflow_count+0x2>
    2616:	b0 91 f7 02 	lds	r27, 0x02F7	; 0x8002f7 <timer0_overflow_count+0x3>
    261a:	26 b5       	in	r18, 0x26	; 38
    261c:	a8 9b       	sbis	0x15, 0	; 21
    261e:	05 c0       	rjmp	.+10     	; 0x262a <micros+0x24>
    2620:	2f 3f       	cpi	r18, 0xFF	; 255
    2622:	19 f0       	breq	.+6      	; 0x262a <micros+0x24>
    2624:	01 96       	adiw	r24, 0x01	; 1
    2626:	a1 1d       	adc	r26, r1
    2628:	b1 1d       	adc	r27, r1
    262a:	3f bf       	out	0x3f, r19	; 63
    262c:	ba 2f       	mov	r27, r26
    262e:	a9 2f       	mov	r26, r25
    2630:	98 2f       	mov	r25, r24
    2632:	88 27       	eor	r24, r24
    2634:	82 0f       	add	r24, r18
    2636:	91 1d       	adc	r25, r1
    2638:	a1 1d       	adc	r26, r1
    263a:	b1 1d       	adc	r27, r1
    263c:	bc 01       	movw	r22, r24
    263e:	cd 01       	movw	r24, r26
    2640:	42 e0       	ldi	r20, 0x02	; 2
    2642:	66 0f       	add	r22, r22
    2644:	77 1f       	adc	r23, r23
    2646:	88 1f       	adc	r24, r24
    2648:	99 1f       	adc	r25, r25
    264a:	4a 95       	dec	r20
    264c:	d1 f7       	brne	.-12     	; 0x2642 <micros+0x3c>
    264e:	08 95       	ret

00002650 <delay>:
    2650:	8f 92       	push	r8
    2652:	9f 92       	push	r9
    2654:	af 92       	push	r10
    2656:	bf 92       	push	r11
    2658:	cf 92       	push	r12
    265a:	df 92       	push	r13
    265c:	ef 92       	push	r14
    265e:	ff 92       	push	r15
    2660:	6b 01       	movw	r12, r22
    2662:	7c 01       	movw	r14, r24
    2664:	0e 94 03 13 	call	0x2606	; 0x2606 <micros>
    2668:	4b 01       	movw	r8, r22
    266a:	5c 01       	movw	r10, r24
    266c:	c1 14       	cp	r12, r1
    266e:	d1 04       	cpc	r13, r1
    2670:	e1 04       	cpc	r14, r1
    2672:	f1 04       	cpc	r15, r1
    2674:	01 f1       	breq	.+64     	; 0x26b6 <delay+0x66>
    2676:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <yield>
    267a:	0e 94 03 13 	call	0x2606	; 0x2606 <micros>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	88 19       	sub	r24, r8
    2684:	99 09       	sbc	r25, r9
    2686:	aa 09       	sbc	r26, r10
    2688:	bb 09       	sbc	r27, r11
    268a:	88 3e       	cpi	r24, 0xE8	; 232
    268c:	93 40       	sbci	r25, 0x03	; 3
    268e:	a1 05       	cpc	r26, r1
    2690:	b1 05       	cpc	r27, r1
    2692:	60 f3       	brcs	.-40     	; 0x266c <delay+0x1c>
    2694:	21 e0       	ldi	r18, 0x01	; 1
    2696:	c2 1a       	sub	r12, r18
    2698:	d1 08       	sbc	r13, r1
    269a:	e1 08       	sbc	r14, r1
    269c:	f1 08       	sbc	r15, r1
    269e:	88 ee       	ldi	r24, 0xE8	; 232
    26a0:	88 0e       	add	r8, r24
    26a2:	83 e0       	ldi	r24, 0x03	; 3
    26a4:	98 1e       	adc	r9, r24
    26a6:	a1 1c       	adc	r10, r1
    26a8:	b1 1c       	adc	r11, r1
    26aa:	c1 14       	cp	r12, r1
    26ac:	d1 04       	cpc	r13, r1
    26ae:	e1 04       	cpc	r14, r1
    26b0:	f1 04       	cpc	r15, r1
    26b2:	19 f7       	brne	.-58     	; 0x267a <delay+0x2a>
    26b4:	db cf       	rjmp	.-74     	; 0x266c <delay+0x1c>
    26b6:	ff 90       	pop	r15
    26b8:	ef 90       	pop	r14
    26ba:	df 90       	pop	r13
    26bc:	cf 90       	pop	r12
    26be:	bf 90       	pop	r11
    26c0:	af 90       	pop	r10
    26c2:	9f 90       	pop	r9
    26c4:	8f 90       	pop	r8
    26c6:	08 95       	ret

000026c8 <init>:
    26c8:	78 94       	sei
    26ca:	84 b5       	in	r24, 0x24	; 36
    26cc:	82 60       	ori	r24, 0x02	; 2
    26ce:	84 bd       	out	0x24, r24	; 36
    26d0:	84 b5       	in	r24, 0x24	; 36
    26d2:	81 60       	ori	r24, 0x01	; 1
    26d4:	84 bd       	out	0x24, r24	; 36
    26d6:	85 b5       	in	r24, 0x25	; 37
    26d8:	82 60       	ori	r24, 0x02	; 2
    26da:	85 bd       	out	0x25, r24	; 37
    26dc:	85 b5       	in	r24, 0x25	; 37
    26de:	81 60       	ori	r24, 0x01	; 1
    26e0:	85 bd       	out	0x25, r24	; 37
    26e2:	ee e6       	ldi	r30, 0x6E	; 110
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	80 81       	ld	r24, Z
    26e8:	81 60       	ori	r24, 0x01	; 1
    26ea:	80 83       	st	Z, r24
    26ec:	e1 e8       	ldi	r30, 0x81	; 129
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	10 82       	st	Z, r1
    26f2:	80 81       	ld	r24, Z
    26f4:	82 60       	ori	r24, 0x02	; 2
    26f6:	80 83       	st	Z, r24
    26f8:	80 81       	ld	r24, Z
    26fa:	81 60       	ori	r24, 0x01	; 1
    26fc:	80 83       	st	Z, r24
    26fe:	e0 e8       	ldi	r30, 0x80	; 128
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	81 60       	ori	r24, 0x01	; 1
    2706:	80 83       	st	Z, r24
    2708:	e1 e9       	ldi	r30, 0x91	; 145
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	80 81       	ld	r24, Z
    270e:	82 60       	ori	r24, 0x02	; 2
    2710:	80 83       	st	Z, r24
    2712:	80 81       	ld	r24, Z
    2714:	81 60       	ori	r24, 0x01	; 1
    2716:	80 83       	st	Z, r24
    2718:	e0 e9       	ldi	r30, 0x90	; 144
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	81 60       	ori	r24, 0x01	; 1
    2720:	80 83       	st	Z, r24
    2722:	e1 ec       	ldi	r30, 0xC1	; 193
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	84 60       	ori	r24, 0x04	; 4
    272a:	80 83       	st	Z, r24
    272c:	80 81       	ld	r24, Z
    272e:	82 60       	ori	r24, 0x02	; 2
    2730:	80 83       	st	Z, r24
    2732:	80 81       	ld	r24, Z
    2734:	81 60       	ori	r24, 0x01	; 1
    2736:	80 83       	st	Z, r24
    2738:	e3 ec       	ldi	r30, 0xC3	; 195
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	81 60       	ori	r24, 0x01	; 1
    2740:	80 83       	st	Z, r24
    2742:	e0 ec       	ldi	r30, 0xC0	; 192
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	80 81       	ld	r24, Z
    2748:	82 60       	ori	r24, 0x02	; 2
    274a:	80 83       	st	Z, r24
    274c:	e2 ec       	ldi	r30, 0xC2	; 194
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	81 60       	ori	r24, 0x01	; 1
    2754:	80 83       	st	Z, r24
    2756:	ea e7       	ldi	r30, 0x7A	; 122
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	84 60       	ori	r24, 0x04	; 4
    275e:	80 83       	st	Z, r24
    2760:	80 81       	ld	r24, Z
    2762:	82 60       	ori	r24, 0x02	; 2
    2764:	80 83       	st	Z, r24
    2766:	80 81       	ld	r24, Z
    2768:	81 60       	ori	r24, 0x01	; 1
    276a:	80 83       	st	Z, r24
    276c:	80 81       	ld	r24, Z
    276e:	80 68       	ori	r24, 0x80	; 128
    2770:	80 83       	st	Z, r24
    2772:	08 95       	ret

00002774 <analogRead>:
    2774:	82 31       	cpi	r24, 0x12	; 18
    2776:	08 f0       	brcs	.+2      	; 0x277a <analogRead+0x6>
    2778:	82 51       	subi	r24, 0x12	; 18
    277a:	e8 2f       	mov	r30, r24
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	e8 5f       	subi	r30, 0xF8	; 248
    2780:	fe 4f       	sbci	r31, 0xFE	; 254
    2782:	e4 91       	lpm	r30, Z
    2784:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    2788:	e3 fb       	bst	r30, 3
    278a:	22 27       	eor	r18, r18
    278c:	20 f9       	bld	r18, 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	95 e0       	ldi	r25, 0x05	; 5
    2792:	22 0f       	add	r18, r18
    2794:	33 1f       	adc	r19, r19
    2796:	9a 95       	dec	r25
    2798:	e1 f7       	brne	.-8      	; 0x2792 <analogRead+0x1e>
    279a:	8f 7d       	andi	r24, 0xDF	; 223
    279c:	28 2b       	or	r18, r24
    279e:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    27a2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <analog_reference>
    27a6:	20 e4       	ldi	r18, 0x40	; 64
    27a8:	82 9f       	mul	r24, r18
    27aa:	c0 01       	movw	r24, r0
    27ac:	11 24       	eor	r1, r1
    27ae:	e7 70       	andi	r30, 0x07	; 7
    27b0:	e8 2b       	or	r30, r24
    27b2:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    27b6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    27ba:	80 64       	ori	r24, 0x40	; 64
    27bc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    27c0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    27c4:	86 fd       	sbrc	r24, 6
    27c6:	fc cf       	rjmp	.-8      	; 0x27c0 <analogRead+0x4c>
    27c8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    27cc:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	92 2b       	or	r25, r18
    27d4:	08 95       	ret

000027d6 <turnOffPWM>:
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	fc 01       	movw	r30, r24
    27da:	31 97       	sbiw	r30, 0x01	; 1
    27dc:	ef 30       	cpi	r30, 0x0F	; 15
    27de:	f1 05       	cpc	r31, r1
    27e0:	b0 f5       	brcc	.+108    	; 0x284e <turnOffPWM+0x78>
    27e2:	ea 5a       	subi	r30, 0xAA	; 170
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	0c 94 41 16 	jmp	0x2c82	; 0x2c82 <__tablejump2__>
    27ea:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    27ee:	8f 77       	andi	r24, 0x7F	; 127
    27f0:	03 c0       	rjmp	.+6      	; 0x27f8 <turnOffPWM+0x22>
    27f2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    27f6:	8f 7d       	andi	r24, 0xDF	; 223
    27f8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    27fc:	08 95       	ret
    27fe:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2802:	87 7f       	andi	r24, 0xF7	; 247
    2804:	f9 cf       	rjmp	.-14     	; 0x27f8 <turnOffPWM+0x22>
    2806:	84 b5       	in	r24, 0x24	; 36
    2808:	8f 77       	andi	r24, 0x7F	; 127
    280a:	02 c0       	rjmp	.+4      	; 0x2810 <turnOffPWM+0x3a>
    280c:	84 b5       	in	r24, 0x24	; 36
    280e:	8f 7d       	andi	r24, 0xDF	; 223
    2810:	84 bd       	out	0x24, r24	; 36
    2812:	08 95       	ret
    2814:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2818:	8f 77       	andi	r24, 0x7F	; 127
    281a:	07 c0       	rjmp	.+14     	; 0x282a <turnOffPWM+0x54>
    281c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2820:	8f 7d       	andi	r24, 0xDF	; 223
    2822:	03 c0       	rjmp	.+6      	; 0x282a <turnOffPWM+0x54>
    2824:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2828:	87 7f       	andi	r24, 0xF7	; 247
    282a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    282e:	08 95       	ret
    2830:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    2834:	8f 77       	andi	r24, 0x7F	; 127
    2836:	03 c0       	rjmp	.+6      	; 0x283e <turnOffPWM+0x68>
    2838:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    283c:	8f 7d       	andi	r24, 0xDF	; 223
    283e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    2842:	08 95       	ret
    2844:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    2848:	87 7f       	andi	r24, 0xF7	; 247
    284a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    284e:	08 95       	ret

00002850 <digitalWrite>:
    2850:	1f 93       	push	r17
    2852:	cf 93       	push	r28
    2854:	df 93       	push	r29
    2856:	28 2f       	mov	r18, r24
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	f9 01       	movw	r30, r18
    285c:	ec 5e       	subi	r30, 0xEC	; 236
    285e:	fe 4f       	sbci	r31, 0xFE	; 254
    2860:	84 91       	lpm	r24, Z
    2862:	f9 01       	movw	r30, r18
    2864:	ed 5c       	subi	r30, 0xCD	; 205
    2866:	fe 4f       	sbci	r31, 0xFE	; 254
    2868:	d4 91       	lpm	r29, Z
    286a:	f9 01       	movw	r30, r18
    286c:	ee 5a       	subi	r30, 0xAE	; 174
    286e:	fe 4f       	sbci	r31, 0xFE	; 254
    2870:	c4 91       	lpm	r28, Z
    2872:	cc 23       	and	r28, r28
    2874:	c1 f0       	breq	.+48     	; 0x28a6 <digitalWrite+0x56>
    2876:	16 2f       	mov	r17, r22
    2878:	81 11       	cpse	r24, r1
    287a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <turnOffPWM>
    287e:	ec 2f       	mov	r30, r28
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	ee 0f       	add	r30, r30
    2884:	ff 1f       	adc	r31, r31
    2886:	ef 58       	subi	r30, 0x8F	; 143
    2888:	fe 4f       	sbci	r31, 0xFE	; 254
    288a:	a5 91       	lpm	r26, Z+
    288c:	b4 91       	lpm	r27, Z
    288e:	9f b7       	in	r25, 0x3f	; 63
    2890:	f8 94       	cli
    2892:	11 11       	cpse	r17, r1
    2894:	04 c0       	rjmp	.+8      	; 0x289e <digitalWrite+0x4e>
    2896:	8c 91       	ld	r24, X
    2898:	d0 95       	com	r29
    289a:	d8 23       	and	r29, r24
    289c:	02 c0       	rjmp	.+4      	; 0x28a2 <digitalWrite+0x52>
    289e:	ec 91       	ld	r30, X
    28a0:	de 2b       	or	r29, r30
    28a2:	dc 93       	st	X, r29
    28a4:	9f bf       	out	0x3f, r25	; 63
    28a6:	df 91       	pop	r29
    28a8:	cf 91       	pop	r28
    28aa:	1f 91       	pop	r17
    28ac:	08 95       	ret

000028ae <_ZN7Serial_5writeEh>:
    28ae:	cf 93       	push	r28
    28b0:	df 93       	push	r29
    28b2:	1f 92       	push	r1
    28b4:	cd b7       	in	r28, 0x3d	; 61
    28b6:	de b7       	in	r29, 0x3e	; 62
    28b8:	69 83       	std	Y+1, r22	; 0x01
    28ba:	dc 01       	movw	r26, r24
    28bc:	ed 91       	ld	r30, X+
    28be:	fc 91       	ld	r31, X
    28c0:	02 80       	ldd	r0, Z+2	; 0x02
    28c2:	f3 81       	ldd	r31, Z+3	; 0x03
    28c4:	e0 2d       	mov	r30, r0
    28c6:	41 e0       	ldi	r20, 0x01	; 1
    28c8:	50 e0       	ldi	r21, 0x00	; 0
    28ca:	be 01       	movw	r22, r28
    28cc:	6f 5f       	subi	r22, 0xFF	; 255
    28ce:	7f 4f       	sbci	r23, 0xFF	; 255
    28d0:	09 95       	icall
    28d2:	0f 90       	pop	r0
    28d4:	df 91       	pop	r29
    28d6:	cf 91       	pop	r28
    28d8:	08 95       	ret

000028da <_ZN7Serial_4peekEv>:
    28da:	cf 93       	push	r28
    28dc:	df 93       	push	r29
    28de:	ec 01       	movw	r28, r24
    28e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    28e2:	9d 85       	ldd	r25, Y+13	; 0x0d
    28e4:	97 ff       	sbrs	r25, 7
    28e6:	05 c0       	rjmp	.+10     	; 0x28f2 <_ZN7Serial_4peekEv+0x18>
    28e8:	82 e0       	ldi	r24, 0x02	; 2
    28ea:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <_Z8USB_Recvh>
    28ee:	9d 87       	std	Y+13, r25	; 0x0d
    28f0:	8c 87       	std	Y+12, r24	; 0x0c
    28f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    28f4:	9d 85       	ldd	r25, Y+13	; 0x0d
    28f6:	df 91       	pop	r29
    28f8:	cf 91       	pop	r28
    28fa:	08 95       	ret

000028fc <_ZN7Serial_17availableForWriteEv>:
    28fc:	83 e0       	ldi	r24, 0x03	; 3
    28fe:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <_Z13USB_SendSpaceh>
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	08 95       	ret

00002906 <_ZN7Serial_5flushEv>:
    2906:	83 e0       	ldi	r24, 0x03	; 3
    2908:	0c 94 0f 12 	jmp	0x241e	; 0x241e <_Z9USB_Flushh>

0000290c <_ZN7Serial_9availableEv>:
    290c:	fc 01       	movw	r30, r24
    290e:	84 85       	ldd	r24, Z+12	; 0x0c
    2910:	95 85       	ldd	r25, Z+13	; 0x0d
    2912:	97 fd       	sbrc	r25, 7
    2914:	06 c0       	rjmp	.+12     	; 0x2922 <_ZN7Serial_9availableEv+0x16>
    2916:	82 e0       	ldi	r24, 0x02	; 2
    2918:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <_Z13USB_Availableh>
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	01 96       	adiw	r24, 0x01	; 1
    2920:	08 95       	ret
    2922:	82 e0       	ldi	r24, 0x02	; 2
    2924:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <_Z13USB_Availableh>
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	08 95       	ret

0000292c <_ZN7Serial_4readEv>:
    292c:	fc 01       	movw	r30, r24
    292e:	84 85       	ldd	r24, Z+12	; 0x0c
    2930:	95 85       	ldd	r25, Z+13	; 0x0d
    2932:	97 fd       	sbrc	r25, 7
    2934:	05 c0       	rjmp	.+10     	; 0x2940 <_ZN7Serial_4readEv+0x14>
    2936:	2f ef       	ldi	r18, 0xFF	; 255
    2938:	3f ef       	ldi	r19, 0xFF	; 255
    293a:	35 87       	std	Z+13, r19	; 0x0d
    293c:	24 87       	std	Z+12, r18	; 0x0c
    293e:	08 95       	ret
    2940:	82 e0       	ldi	r24, 0x02	; 2
    2942:	0c 94 7a 0f 	jmp	0x1ef4	; 0x1ef4 <_Z8USB_Recvh>

00002946 <_ZN7Serial_5writeEPKhj>:
    2946:	cf 93       	push	r28
    2948:	df 93       	push	r29
    294a:	ec 01       	movw	r28, r24
    294c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <_ZL12_usbLineInfo+0x7>
    2950:	88 23       	and	r24, r24
    2952:	31 f0       	breq	.+12     	; 0x2960 <_ZN7Serial_5writeEPKhj+0x1a>
    2954:	83 e0       	ldi	r24, 0x03	; 3
    2956:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <_Z8USB_SendhPKvi>
    295a:	18 16       	cp	r1, r24
    295c:	19 06       	cpc	r1, r25
    295e:	34 f0       	brlt	.+12     	; 0x296c <_ZN7Serial_5writeEPKhj+0x26>
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	9b 83       	std	Y+3, r25	; 0x03
    2966:	8a 83       	std	Y+2, r24	; 0x02
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	df 91       	pop	r29
    296e:	cf 91       	pop	r28
    2970:	08 95       	ret

00002972 <_Z16isLUFAbootloaderv>:
    2972:	ee ef       	ldi	r30, 0xFE	; 254
    2974:	ff e7       	ldi	r31, 0x7F	; 127
    2976:	25 91       	lpm	r18, Z+
    2978:	34 91       	lpm	r19, Z
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	2b 3f       	cpi	r18, 0xFB	; 251
    297e:	3c 4d       	sbci	r19, 0xDC	; 220
    2980:	09 f0       	breq	.+2      	; 0x2984 <_Z16isLUFAbootloaderv+0x12>
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	08 95       	ret

00002986 <_Z16CDC_GetInterfacePh>:
    2986:	fc 01       	movw	r30, r24
    2988:	90 81       	ld	r25, Z
    298a:	9e 5f       	subi	r25, 0xFE	; 254
    298c:	90 83       	st	Z, r25
    298e:	42 e4       	ldi	r20, 0x42	; 66
    2990:	50 e0       	ldi	r21, 0x00	; 0
    2992:	6f e7       	ldi	r22, 0x7F	; 127
    2994:	71 e0       	ldi	r23, 0x01	; 1
    2996:	80 e8       	ldi	r24, 0x80	; 128
    2998:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <_Z15USB_SendControlhPKvi>

0000299c <_Z9CDC_SetupR8USBSetup>:
    299c:	fc 01       	movw	r30, r24
    299e:	81 81       	ldd	r24, Z+1	; 0x01
    29a0:	90 81       	ld	r25, Z
    29a2:	91 3a       	cpi	r25, 0xA1	; 161
    29a4:	59 f4       	brne	.+22     	; 0x29bc <_Z9CDC_SetupR8USBSetup+0x20>
    29a6:	81 32       	cpi	r24, 0x21	; 33
    29a8:	09 f0       	breq	.+2      	; 0x29ac <_Z9CDC_SetupR8USBSetup+0x10>
    29aa:	65 c0       	rjmp	.+202    	; 0x2a76 <_Z9CDC_SetupR8USBSetup+0xda>
    29ac:	47 e0       	ldi	r20, 0x07	; 7
    29ae:	50 e0       	ldi	r21, 0x00	; 0
    29b0:	60 e1       	ldi	r22, 0x10	; 16
    29b2:	71 e0       	ldi	r23, 0x01	; 1
    29b4:	80 e0       	ldi	r24, 0x00	; 0
    29b6:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <_Z15USB_SendControlhPKvi>
    29ba:	5b c0       	rjmp	.+182    	; 0x2a72 <_Z9CDC_SetupR8USBSetup+0xd6>
    29bc:	91 32       	cpi	r25, 0x21	; 33
    29be:	09 f0       	breq	.+2      	; 0x29c2 <_Z9CDC_SetupR8USBSetup+0x26>
    29c0:	5a c0       	rjmp	.+180    	; 0x2a76 <_Z9CDC_SetupR8USBSetup+0xda>
    29c2:	83 32       	cpi	r24, 0x23	; 35
    29c4:	69 f4       	brne	.+26     	; 0x29e0 <_Z9CDC_SetupR8USBSetup+0x44>
    29c6:	82 81       	ldd	r24, Z+2	; 0x02
    29c8:	93 81       	ldd	r25, Z+3	; 0x03
    29ca:	a0 e0       	ldi	r26, 0x00	; 0
    29cc:	b0 e0       	ldi	r27, 0x00	; 0
    29ce:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_ZL10breakValue>
    29d2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <_ZL10breakValue+0x1>
    29d6:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <_ZL10breakValue+0x2>
    29da:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <_ZL10breakValue+0x3>
    29de:	49 c0       	rjmp	.+146    	; 0x2a72 <_Z9CDC_SetupR8USBSetup+0xd6>
    29e0:	80 32       	cpi	r24, 0x20	; 32
    29e2:	39 f4       	brne	.+14     	; 0x29f2 <_Z9CDC_SetupR8USBSetup+0x56>
    29e4:	67 e0       	ldi	r22, 0x07	; 7
    29e6:	70 e0       	ldi	r23, 0x00	; 0
    29e8:	80 e1       	ldi	r24, 0x10	; 16
    29ea:	91 e0       	ldi	r25, 0x01	; 1
    29ec:	0e 94 82 10 	call	0x2104	; 0x2104 <_Z15USB_RecvControlPvi>
    29f0:	40 c0       	rjmp	.+128    	; 0x2a72 <_Z9CDC_SetupR8USBSetup+0xd6>
    29f2:	82 32       	cpi	r24, 0x22	; 34
    29f4:	09 f0       	breq	.+2      	; 0x29f8 <_Z9CDC_SetupR8USBSetup+0x5c>
    29f6:	3d c0       	rjmp	.+122    	; 0x2a72 <_Z9CDC_SetupR8USBSetup+0xd6>
    29f8:	82 81       	ldd	r24, Z+2	; 0x02
    29fa:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <_ZL12_usbLineInfo+0x7>
    29fe:	0e 94 b9 14 	call	0x2972	; 0x2972 <_Z16isLUFAbootloaderv>
    2a02:	88 23       	and	r24, r24
    2a04:	19 f0       	breq	.+6      	; 0x2a0c <_Z9CDC_SetupR8USBSetup+0x70>
    2a06:	ee ef       	ldi	r30, 0xFE	; 254
    2a08:	fa e0       	ldi	r31, 0x0A	; 10
    2a0a:	02 c0       	rjmp	.+4      	; 0x2a10 <_Z9CDC_SetupR8USBSetup+0x74>
    2a0c:	e0 e0       	ldi	r30, 0x00	; 0
    2a0e:	f8 e0       	ldi	r31, 0x08	; 8
    2a10:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_ZL12_usbLineInfo>
    2a14:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_ZL12_usbLineInfo+0x1>
    2a18:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <_ZL12_usbLineInfo+0x2>
    2a1c:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <_ZL12_usbLineInfo+0x3>
    2a20:	80 3b       	cpi	r24, 0xB0	; 176
    2a22:	94 40       	sbci	r25, 0x04	; 4
    2a24:	a1 05       	cpc	r26, r1
    2a26:	b1 05       	cpc	r27, r1
    2a28:	41 f5       	brne	.+80     	; 0x2a7a <_Z9CDC_SetupR8USBSetup+0xde>
    2a2a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <_ZL12_usbLineInfo+0x7>
    2a2e:	80 fd       	sbrc	r24, 0
    2a30:	24 c0       	rjmp	.+72     	; 0x2a7a <_Z9CDC_SetupR8USBSetup+0xde>
    2a32:	ee 3f       	cpi	r30, 0xFE	; 254
    2a34:	8a e0       	ldi	r24, 0x0A	; 10
    2a36:	f8 07       	cpc	r31, r24
    2a38:	51 f0       	breq	.+20     	; 0x2a4e <_Z9CDC_SetupR8USBSetup+0xb2>
    2a3a:	80 81       	ld	r24, Z
    2a3c:	91 81       	ldd	r25, Z+1	; 0x01
    2a3e:	87 37       	cpi	r24, 0x77	; 119
    2a40:	27 e7       	ldi	r18, 0x77	; 119
    2a42:	92 07       	cpc	r25, r18
    2a44:	21 f0       	breq	.+8      	; 0x2a4e <_Z9CDC_SetupR8USBSetup+0xb2>
    2a46:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x7aa>
    2a4a:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x7a9>
    2a4e:	87 e7       	ldi	r24, 0x77	; 119
    2a50:	97 e7       	ldi	r25, 0x77	; 119
    2a52:	91 83       	std	Z+1, r25	; 0x01
    2a54:	80 83       	st	Z, r24
    2a56:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    2a5a:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <_ZL11wdtcsr_save>
    2a5e:	9b e0       	ldi	r25, 0x0B	; 11
    2a60:	88 e1       	ldi	r24, 0x18	; 24
    2a62:	0f b6       	in	r0, 0x3f	; 63
    2a64:	f8 94       	cli
    2a66:	a8 95       	wdr
    2a68:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    2a6c:	0f be       	out	0x3f, r0	; 63
    2a6e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	08 95       	ret
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	08 95       	ret
    2a7a:	80 81       	ld	r24, Z
    2a7c:	91 81       	ldd	r25, Z+1	; 0x01
    2a7e:	87 37       	cpi	r24, 0x77	; 119
    2a80:	97 47       	sbci	r25, 0x77	; 119
    2a82:	b9 f7       	brne	.-18     	; 0x2a72 <_Z9CDC_SetupR8USBSetup+0xd6>
    2a84:	a8 95       	wdr
    2a86:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    2a8a:	88 61       	ori	r24, 0x18	; 24
    2a8c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    2a90:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <_ZL11wdtcsr_save>
    2a94:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    2a98:	ee 3f       	cpi	r30, 0xFE	; 254
    2a9a:	8a e0       	ldi	r24, 0x0A	; 10
    2a9c:	f8 07       	cpc	r31, r24
    2a9e:	39 f0       	breq	.+14     	; 0x2aae <_Z9CDC_SetupR8USBSetup+0x112>
    2aa0:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x7a9>
    2aa4:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x7aa>
    2aa8:	91 83       	std	Z+1, r25	; 0x01
    2aaa:	80 83       	st	Z, r24
    2aac:	e2 cf       	rjmp	.-60     	; 0x2a72 <_Z9CDC_SetupR8USBSetup+0xd6>
    2aae:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x7aa>
    2ab2:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x7a9>
    2ab6:	dd cf       	rjmp	.-70     	; 0x2a72 <_Z9CDC_SetupR8USBSetup+0xd6>

00002ab8 <_GLOBAL__sub_I__cdcInterface>:
    2ab8:	e8 ef       	ldi	r30, 0xF8	; 248
    2aba:	f2 e0       	ldi	r31, 0x02	; 2
    2abc:	13 82       	std	Z+3, r1	; 0x03
    2abe:	12 82       	std	Z+2, r1	; 0x02
    2ac0:	88 ee       	ldi	r24, 0xE8	; 232
    2ac2:	93 e0       	ldi	r25, 0x03	; 3
    2ac4:	a0 e0       	ldi	r26, 0x00	; 0
    2ac6:	b0 e0       	ldi	r27, 0x00	; 0
    2ac8:	84 83       	std	Z+4, r24	; 0x04
    2aca:	95 83       	std	Z+5, r25	; 0x05
    2acc:	a6 83       	std	Z+6, r26	; 0x06
    2ace:	b7 83       	std	Z+7, r27	; 0x07
    2ad0:	8f ea       	ldi	r24, 0xAF	; 175
    2ad2:	91 e0       	ldi	r25, 0x01	; 1
    2ad4:	91 83       	std	Z+1, r25	; 0x01
    2ad6:	80 83       	st	Z, r24
    2ad8:	8f ef       	ldi	r24, 0xFF	; 255
    2ada:	9f ef       	ldi	r25, 0xFF	; 255
    2adc:	95 87       	std	Z+13, r25	; 0x0d
    2ade:	84 87       	std	Z+12, r24	; 0x0c
    2ae0:	08 95       	ret

00002ae2 <yield>:
    2ae2:	08 95       	ret

00002ae4 <_ZN13PluggableUSB_12getInterfaceEPh>:
    2ae4:	ef 92       	push	r14
    2ae6:	ff 92       	push	r15
    2ae8:	0f 93       	push	r16
    2aea:	1f 93       	push	r17
    2aec:	cf 93       	push	r28
    2aee:	df 93       	push	r29
    2af0:	7b 01       	movw	r14, r22
    2af2:	fc 01       	movw	r30, r24
    2af4:	c2 81       	ldd	r28, Z+2	; 0x02
    2af6:	d3 81       	ldd	r29, Z+3	; 0x03
    2af8:	00 e0       	ldi	r16, 0x00	; 0
    2afa:	10 e0       	ldi	r17, 0x00	; 0
    2afc:	20 97       	sbiw	r28, 0x00	; 0
    2afe:	81 f0       	breq	.+32     	; 0x2b20 <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
    2b00:	e8 81       	ld	r30, Y
    2b02:	f9 81       	ldd	r31, Y+1	; 0x01
    2b04:	02 80       	ldd	r0, Z+2	; 0x02
    2b06:	f3 81       	ldd	r31, Z+3	; 0x03
    2b08:	e0 2d       	mov	r30, r0
    2b0a:	b7 01       	movw	r22, r14
    2b0c:	ce 01       	movw	r24, r28
    2b0e:	09 95       	icall
    2b10:	97 fd       	sbrc	r25, 7
    2b12:	08 c0       	rjmp	.+16     	; 0x2b24 <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
    2b14:	08 0f       	add	r16, r24
    2b16:	19 1f       	adc	r17, r25
    2b18:	08 84       	ldd	r0, Y+8	; 0x08
    2b1a:	d9 85       	ldd	r29, Y+9	; 0x09
    2b1c:	c0 2d       	mov	r28, r0
    2b1e:	ee cf       	rjmp	.-36     	; 0x2afc <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    2b20:	c8 01       	movw	r24, r16
    2b22:	02 c0       	rjmp	.+4      	; 0x2b28 <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
    2b24:	8f ef       	ldi	r24, 0xFF	; 255
    2b26:	9f ef       	ldi	r25, 0xFF	; 255
    2b28:	df 91       	pop	r29
    2b2a:	cf 91       	pop	r28
    2b2c:	1f 91       	pop	r17
    2b2e:	0f 91       	pop	r16
    2b30:	ff 90       	pop	r15
    2b32:	ef 90       	pop	r14
    2b34:	08 95       	ret

00002b36 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    2b36:	0f 93       	push	r16
    2b38:	1f 93       	push	r17
    2b3a:	cf 93       	push	r28
    2b3c:	df 93       	push	r29
    2b3e:	8b 01       	movw	r16, r22
    2b40:	fc 01       	movw	r30, r24
    2b42:	c2 81       	ldd	r28, Z+2	; 0x02
    2b44:	d3 81       	ldd	r29, Z+3	; 0x03
    2b46:	20 97       	sbiw	r28, 0x00	; 0
    2b48:	71 f0       	breq	.+28     	; 0x2b66 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
    2b4a:	e8 81       	ld	r30, Y
    2b4c:	f9 81       	ldd	r31, Y+1	; 0x01
    2b4e:	04 80       	ldd	r0, Z+4	; 0x04
    2b50:	f5 81       	ldd	r31, Z+5	; 0x05
    2b52:	e0 2d       	mov	r30, r0
    2b54:	b8 01       	movw	r22, r16
    2b56:	ce 01       	movw	r24, r28
    2b58:	09 95       	icall
    2b5a:	00 97       	sbiw	r24, 0x00	; 0
    2b5c:	31 f4       	brne	.+12     	; 0x2b6a <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
    2b5e:	08 84       	ldd	r0, Y+8	; 0x08
    2b60:	d9 85       	ldd	r29, Y+9	; 0x09
    2b62:	c0 2d       	mov	r28, r0
    2b64:	f0 cf       	rjmp	.-32     	; 0x2b46 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	df 91       	pop	r29
    2b6c:	cf 91       	pop	r28
    2b6e:	1f 91       	pop	r17
    2b70:	0f 91       	pop	r16
    2b72:	08 95       	ret

00002b74 <_ZN13PluggableUSB_12getShortNameEPc>:
    2b74:	0f 93       	push	r16
    2b76:	1f 93       	push	r17
    2b78:	cf 93       	push	r28
    2b7a:	df 93       	push	r29
    2b7c:	8b 01       	movw	r16, r22
    2b7e:	fc 01       	movw	r30, r24
    2b80:	c2 81       	ldd	r28, Z+2	; 0x02
    2b82:	d3 81       	ldd	r29, Z+3	; 0x03
    2b84:	20 97       	sbiw	r28, 0x00	; 0
    2b86:	71 f0       	breq	.+28     	; 0x2ba4 <_ZN13PluggableUSB_12getShortNameEPc+0x30>
    2b88:	e8 81       	ld	r30, Y
    2b8a:	f9 81       	ldd	r31, Y+1	; 0x01
    2b8c:	06 80       	ldd	r0, Z+6	; 0x06
    2b8e:	f7 81       	ldd	r31, Z+7	; 0x07
    2b90:	e0 2d       	mov	r30, r0
    2b92:	b8 01       	movw	r22, r16
    2b94:	ce 01       	movw	r24, r28
    2b96:	09 95       	icall
    2b98:	08 0f       	add	r16, r24
    2b9a:	11 1d       	adc	r17, r1
    2b9c:	08 84       	ldd	r0, Y+8	; 0x08
    2b9e:	d9 85       	ldd	r29, Y+9	; 0x09
    2ba0:	c0 2d       	mov	r28, r0
    2ba2:	f0 cf       	rjmp	.-32     	; 0x2b84 <_ZN13PluggableUSB_12getShortNameEPc+0x10>
    2ba4:	f8 01       	movw	r30, r16
    2ba6:	10 82       	st	Z, r1
    2ba8:	df 91       	pop	r29
    2baa:	cf 91       	pop	r28
    2bac:	1f 91       	pop	r17
    2bae:	0f 91       	pop	r16
    2bb0:	08 95       	ret

00002bb2 <_ZN13PluggableUSB_5setupER8USBSetup>:
    2bb2:	0f 93       	push	r16
    2bb4:	1f 93       	push	r17
    2bb6:	cf 93       	push	r28
    2bb8:	df 93       	push	r29
    2bba:	8b 01       	movw	r16, r22
    2bbc:	fc 01       	movw	r30, r24
    2bbe:	c2 81       	ldd	r28, Z+2	; 0x02
    2bc0:	d3 81       	ldd	r29, Z+3	; 0x03
    2bc2:	20 97       	sbiw	r28, 0x00	; 0
    2bc4:	71 f0       	breq	.+28     	; 0x2be2 <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
    2bc6:	e8 81       	ld	r30, Y
    2bc8:	f9 81       	ldd	r31, Y+1	; 0x01
    2bca:	01 90       	ld	r0, Z+
    2bcc:	f0 81       	ld	r31, Z
    2bce:	e0 2d       	mov	r30, r0
    2bd0:	b8 01       	movw	r22, r16
    2bd2:	ce 01       	movw	r24, r28
    2bd4:	09 95       	icall
    2bd6:	81 11       	cpse	r24, r1
    2bd8:	05 c0       	rjmp	.+10     	; 0x2be4 <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
    2bda:	08 84       	ldd	r0, Y+8	; 0x08
    2bdc:	d9 85       	ldd	r29, Y+9	; 0x09
    2bde:	c0 2d       	mov	r28, r0
    2be0:	f0 cf       	rjmp	.-32     	; 0x2bc2 <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
    2be2:	80 e0       	ldi	r24, 0x00	; 0
    2be4:	df 91       	pop	r29
    2be6:	cf 91       	pop	r28
    2be8:	1f 91       	pop	r17
    2bea:	0f 91       	pop	r16
    2bec:	08 95       	ret

00002bee <_Z12PluggableUSBv>:
    2bee:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <_ZGVZ12PluggableUSBvE3obj>
    2bf2:	81 11       	cpse	r24, r1
    2bf4:	0d c0       	rjmp	.+26     	; 0x2c10 <_Z12PluggableUSBv+0x22>
    2bf6:	82 e0       	ldi	r24, 0x02	; 2
    2bf8:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <_ZZ12PluggableUSBvE3obj>
    2bfc:	84 e0       	ldi	r24, 0x04	; 4
    2bfe:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <_ZZ12PluggableUSBvE3obj+0x1>
    2c02:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <_ZZ12PluggableUSBvE3obj+0x3>
    2c06:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <_ZZ12PluggableUSBvE3obj+0x2>
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <_ZGVZ12PluggableUSBvE3obj>
    2c10:	89 e4       	ldi	r24, 0x49	; 73
    2c12:	93 e0       	ldi	r25, 0x03	; 3
    2c14:	08 95       	ret

00002c16 <__divmodhi4>:
    2c16:	97 fb       	bst	r25, 7
    2c18:	07 2e       	mov	r0, r23
    2c1a:	16 f4       	brtc	.+4      	; 0x2c20 <__divmodhi4+0xa>
    2c1c:	00 94       	com	r0
    2c1e:	07 d0       	rcall	.+14     	; 0x2c2e <__divmodhi4_neg1>
    2c20:	77 fd       	sbrc	r23, 7
    2c22:	09 d0       	rcall	.+18     	; 0x2c36 <__divmodhi4_neg2>
    2c24:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__udivmodhi4>
    2c28:	07 fc       	sbrc	r0, 7
    2c2a:	05 d0       	rcall	.+10     	; 0x2c36 <__divmodhi4_neg2>
    2c2c:	3e f4       	brtc	.+14     	; 0x2c3c <__divmodhi4_exit>

00002c2e <__divmodhi4_neg1>:
    2c2e:	90 95       	com	r25
    2c30:	81 95       	neg	r24
    2c32:	9f 4f       	sbci	r25, 0xFF	; 255
    2c34:	08 95       	ret

00002c36 <__divmodhi4_neg2>:
    2c36:	70 95       	com	r23
    2c38:	61 95       	neg	r22
    2c3a:	7f 4f       	sbci	r23, 0xFF	; 255

00002c3c <__divmodhi4_exit>:
    2c3c:	08 95       	ret

00002c3e <__udivmodsi4>:
    2c3e:	a1 e2       	ldi	r26, 0x21	; 33
    2c40:	1a 2e       	mov	r1, r26
    2c42:	aa 1b       	sub	r26, r26
    2c44:	bb 1b       	sub	r27, r27
    2c46:	fd 01       	movw	r30, r26
    2c48:	0d c0       	rjmp	.+26     	; 0x2c64 <__udivmodsi4_ep>

00002c4a <__udivmodsi4_loop>:
    2c4a:	aa 1f       	adc	r26, r26
    2c4c:	bb 1f       	adc	r27, r27
    2c4e:	ee 1f       	adc	r30, r30
    2c50:	ff 1f       	adc	r31, r31
    2c52:	a2 17       	cp	r26, r18
    2c54:	b3 07       	cpc	r27, r19
    2c56:	e4 07       	cpc	r30, r20
    2c58:	f5 07       	cpc	r31, r21
    2c5a:	20 f0       	brcs	.+8      	; 0x2c64 <__udivmodsi4_ep>
    2c5c:	a2 1b       	sub	r26, r18
    2c5e:	b3 0b       	sbc	r27, r19
    2c60:	e4 0b       	sbc	r30, r20
    2c62:	f5 0b       	sbc	r31, r21

00002c64 <__udivmodsi4_ep>:
    2c64:	66 1f       	adc	r22, r22
    2c66:	77 1f       	adc	r23, r23
    2c68:	88 1f       	adc	r24, r24
    2c6a:	99 1f       	adc	r25, r25
    2c6c:	1a 94       	dec	r1
    2c6e:	69 f7       	brne	.-38     	; 0x2c4a <__udivmodsi4_loop>
    2c70:	60 95       	com	r22
    2c72:	70 95       	com	r23
    2c74:	80 95       	com	r24
    2c76:	90 95       	com	r25
    2c78:	9b 01       	movw	r18, r22
    2c7a:	ac 01       	movw	r20, r24
    2c7c:	bd 01       	movw	r22, r26
    2c7e:	cf 01       	movw	r24, r30
    2c80:	08 95       	ret

00002c82 <__tablejump2__>:
    2c82:	ee 0f       	add	r30, r30
    2c84:	ff 1f       	adc	r31, r31
    2c86:	05 90       	lpm	r0, Z+
    2c88:	f4 91       	lpm	r31, Z
    2c8a:	e0 2d       	mov	r30, r0
    2c8c:	09 94       	ijmp

00002c8e <__udivmodhi4>:
    2c8e:	aa 1b       	sub	r26, r26
    2c90:	bb 1b       	sub	r27, r27
    2c92:	51 e1       	ldi	r21, 0x11	; 17
    2c94:	07 c0       	rjmp	.+14     	; 0x2ca4 <__udivmodhi4_ep>

00002c96 <__udivmodhi4_loop>:
    2c96:	aa 1f       	adc	r26, r26
    2c98:	bb 1f       	adc	r27, r27
    2c9a:	a6 17       	cp	r26, r22
    2c9c:	b7 07       	cpc	r27, r23
    2c9e:	10 f0       	brcs	.+4      	; 0x2ca4 <__udivmodhi4_ep>
    2ca0:	a6 1b       	sub	r26, r22
    2ca2:	b7 0b       	sbc	r27, r23

00002ca4 <__udivmodhi4_ep>:
    2ca4:	88 1f       	adc	r24, r24
    2ca6:	99 1f       	adc	r25, r25
    2ca8:	5a 95       	dec	r21
    2caa:	a9 f7       	brne	.-22     	; 0x2c96 <__udivmodhi4_loop>
    2cac:	80 95       	com	r24
    2cae:	90 95       	com	r25
    2cb0:	bc 01       	movw	r22, r24
    2cb2:	cd 01       	movw	r24, r26
    2cb4:	08 95       	ret

00002cb6 <abort>:
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	f8 94       	cli
    2cbc:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <_exit>

00002cc0 <strcpy_P>:
    2cc0:	fb 01       	movw	r30, r22
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	05 90       	lpm	r0, Z+
    2cc6:	0d 92       	st	X+, r0
    2cc8:	00 20       	and	r0, r0
    2cca:	e1 f7       	brne	.-8      	; 0x2cc4 <strcpy_P+0x4>
    2ccc:	08 95       	ret

00002cce <_exit>:
    2cce:	f8 94       	cli

00002cd0 <__stop_program>:
    2cd0:	ff cf       	rjmp	.-2      	; 0x2cd0 <__stop_program>
