
Projektarbeit_COC_BRA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000188  00800100  00003d8c  00003e20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003d8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000252  00800288  00800288  00003fa8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003fa8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003fd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ae0  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000175ab  00000000  00000000  00004af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e81  00000000  00000000  0001c0a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005df8  00000000  00000000  0001ff24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000021f0  00000000  00000000  00025d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004bb1  00000000  00000000  00027f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bf05  00000000  00000000  0002cabd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b98  00000000  00000000  000389c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__dtors_end>
       4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      28:	0c 94 af 16 	jmp	0x2d5e	; 0x2d5e <__vector_10>
      2c:	0c 94 4b 15 	jmp	0x2a96	; 0x2a96 <__vector_11>
      30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      5c:	0c 94 43 17 	jmp	0x2e86	; 0x2e86 <__vector_23>
      60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      90:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__vector_36>
      94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      ac:	99 18       	sub	r9, r9
      ae:	9c 18       	sub	r9, r12
      b0:	8b 18       	sub	r8, r11
      b2:	8f 18       	sub	r8, r15
      b4:	95 18       	sub	r9, r5
      b6:	bd 18       	sub	r11, r13
      b8:	bd 18       	sub	r11, r13
      ba:	bd 18       	sub	r11, r13
      bc:	a0 18       	sub	r10, r0
      be:	a4 18       	sub	r10, r4
      c0:	a8 18       	sub	r10, r8
      c2:	ae 18       	sub	r10, r14
      c4:	b2 18       	sub	r11, r2
      c6:	bd 18       	sub	r11, r13
      c8:	b8 18       	sub	r11, r8

000000ca <__trampolines_end>:
	...

000000cb <USB_DeviceDescriptorIAD>:
      cb:	12 01 00 02 ef 02 01 40 41 23 36 80 00 01 01 02     .......@A#6.....
      db:	03 01                                               ..

000000dd <STRING_MANUFACTURER>:
      dd:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

000000e9 <STRING_PRODUCT>:
      e9:	41 72 64 75 69 6e 6f 20 4c 65 6f 6e 61 72 64 6f     Arduino Leonardo
	...

000000fa <STRING_LANGUAGE>:
      fa:	04 03 09 04                                         ....

000000fe <analog_pin_to_channel_PGM>:
      fe:	07 06 05 04 01 00 08 0a 0b 0c 0d 09                 ............

0000010a <digital_pin_to_timer_PGM>:
     10a:	00 00 00 02 00 09 0f 00 00 03 04 01 00 0c 00 00     ................
	...

00000129 <digital_pin_to_bit_mask_PGM>:
     129:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     139:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

00000148 <digital_pin_to_port_PGM>:
     148:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     158:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

00000167 <port_to_input_PGM>:
     167:	00 00 00 00 23 00 26 00 29 00 2c 00 2f 00           ....#.&.).,./.

00000175 <port_to_output_PGM>:
     175:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

00000183 <port_to_mode_PGM>:
     183:	00 00 00 00 24 00 27 00 2a 00 2d 00 30 00           ....$.'.*.-.0.

00000191 <_cdcInterface>:
     191:	08 0b 00 02 02 02 01 00 09 04 00 00 01 02 02 00     ................
     1a1:	00 05 24 00 10 01 05 24 01 01 01 04 24 02 06 05     ..$....$....$...
     1b1:	24 06 00 01 07 05 81 03 10 00 40 09 04 01 00 02     $.........@.....
     1c1:	0a 00 00 00 07 05 02 02 40 00 00 07 05 83 02 40     ........@......@
     1d1:	00 00 00                                            ...

000001d4 <__ctors_start>:
     1d4:	03 05       	cpc	r16, r3
     1d6:	7c 0f       	add	r23, r28
     1d8:	da 1a       	sub	r13, r26

000001da <__ctors_end>:
     1da:	14 06       	cpc	r1, r20

000001dc <__dtors_end>:
     1dc:	11 24       	eor	r1, r1
     1de:	1f be       	out	0x3f, r1	; 63
     1e0:	cf ef       	ldi	r28, 0xFF	; 255
     1e2:	da e0       	ldi	r29, 0x0A	; 10
     1e4:	de bf       	out	0x3e, r29	; 62
     1e6:	cd bf       	out	0x3d, r28	; 61

000001e8 <__do_copy_data>:
     1e8:	12 e0       	ldi	r17, 0x02	; 2
     1ea:	a0 e0       	ldi	r26, 0x00	; 0
     1ec:	b1 e0       	ldi	r27, 0x01	; 1
     1ee:	ec e8       	ldi	r30, 0x8C	; 140
     1f0:	fd e3       	ldi	r31, 0x3D	; 61
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__do_copy_data+0x10>
     1f4:	05 90       	lpm	r0, Z+
     1f6:	0d 92       	st	X+, r0
     1f8:	a8 38       	cpi	r26, 0x88	; 136
     1fa:	b1 07       	cpc	r27, r17
     1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__do_copy_data+0xc>

000001fe <__do_clear_bss>:
     1fe:	24 e0       	ldi	r18, 0x04	; 4
     200:	a8 e8       	ldi	r26, 0x88	; 136
     202:	b2 e0       	ldi	r27, 0x02	; 2
     204:	01 c0       	rjmp	.+2      	; 0x208 <.do_clear_bss_start>

00000206 <.do_clear_bss_loop>:
     206:	1d 92       	st	X+, r1

00000208 <.do_clear_bss_start>:
     208:	aa 3d       	cpi	r26, 0xDA	; 218
     20a:	b2 07       	cpc	r27, r18
     20c:	e1 f7       	brne	.-8      	; 0x206 <.do_clear_bss_loop>

0000020e <__do_global_ctors>:
     20e:	10 e0       	ldi	r17, 0x00	; 0
     210:	cd ee       	ldi	r28, 0xED	; 237
     212:	d0 e0       	ldi	r29, 0x00	; 0
     214:	04 c0       	rjmp	.+8      	; 0x21e <__do_global_ctors+0x10>
     216:	21 97       	sbiw	r28, 0x01	; 1
     218:	fe 01       	movw	r30, r28
     21a:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__tablejump2__>
     21e:	ca 3e       	cpi	r28, 0xEA	; 234
     220:	d1 07       	cpc	r29, r17
     222:	c9 f7       	brne	.-14     	; 0x216 <__do_global_ctors+0x8>
     224:	0e 94 19 11 	call	0x2232	; 0x2232 <main>
     228:	0c 94 b9 1e 	jmp	0x3d72	; 0x3d72 <__do_global_dtors>

0000022c <__bad_interrupt>:
     22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <_Z6getkeyv>:
 */
int getkey(void)
{
	static int keys[NUMKEYS+1];
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	0e 94 50 18 	call	0x30a0	; 0x30a0 <analogRead>

	if (val > 1020) { // no key pressed
     236:	8d 3f       	cpi	r24, 0xFD	; 253
     238:	23 e0       	ldi	r18, 0x03	; 3
     23a:	92 07       	cpc	r25, r18
     23c:	20 f1       	brcs	.+72     	; 0x286 <_Z6getkeyv+0x56>
		if (++keys[0] > NOPRESS) {
     23e:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <__data_end>
     242:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <__data_end+0x1>
     246:	01 96       	adiw	r24, 0x01	; 1
     248:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <__data_end+0x1>
     24c:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <__data_end>
     250:	03 97       	sbiw	r24, 0x03	; 3
     252:	0c f4       	brge	.+2      	; 0x256 <_Z6getkeyv+0x26>
     254:	6a c0       	rjmp	.+212    	; 0x32a <_Z6getkeyv+0xfa>
     256:	e8 e8       	ldi	r30, 0x88	; 136
     258:	f2 e0       	ldi	r31, 0x02	; 2
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	90 e0       	ldi	r25, 0x00	; 0
			for(uint8_t i = 0; i <= NUMKEYS; i++){
				if(keys[i] > KEYPRESS){
     262:	40 81       	ld	r20, Z
     264:	51 81       	ldd	r21, Z+1	; 0x01
     266:	44 30       	cpi	r20, 0x04	; 4
     268:	51 05       	cpc	r21, r1
     26a:	2c f0       	brlt	.+10     	; 0x276 <_Z6getkeyv+0x46>
     26c:	c9 01       	movw	r24, r18
					data = i;
					if(keys[i] > LONGPRESS) data += 5;
     26e:	49 3c       	cpi	r20, 0xC9	; 201
     270:	51 05       	cpc	r21, r1
     272:	0c f0       	brlt	.+2      	; 0x276 <_Z6getkeyv+0x46>
     274:	05 96       	adiw	r24, 0x05	; 5
				}
				keys[i] = 0;
     276:	11 92       	st	Z+, r1
     278:	11 92       	st	Z+, r1
     27a:	2f 5f       	subi	r18, 0xFF	; 255
     27c:	3f 4f       	sbci	r19, 0xFF	; 255
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);

	if (val > 1020) { // no key pressed
		if (++keys[0] > NOPRESS) {
			for(uint8_t i = 0; i <= NUMKEYS; i++){
     27e:	26 30       	cpi	r18, 0x06	; 6
     280:	31 05       	cpc	r19, r1
     282:	79 f7       	brne	.-34     	; 0x262 <_Z6getkeyv+0x32>
     284:	08 95       	ret
			}
		}
		else data = 0;
	}
	else {
		if (val < S1_LIMIT && keys[1] < 32000) ++keys[1]; // key1 pressed
     286:	89 34       	cpi	r24, 0x49	; 73
     288:	91 05       	cpc	r25, r1
     28a:	70 f4       	brcc	.+28     	; 0x2a8 <_Z6getkeyv+0x78>
     28c:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <__data_end+0x2>
     290:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <__data_end+0x3>
     294:	81 15       	cp	r24, r1
     296:	2d e7       	ldi	r18, 0x7D	; 125
     298:	92 07       	cpc	r25, r18
     29a:	4c f4       	brge	.+18     	; 0x2ae <_Z6getkeyv+0x7e>
     29c:	01 96       	adiw	r24, 0x01	; 1
     29e:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <__data_end+0x3>
     2a2:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <__data_end+0x2>
     2a6:	41 c0       	rjmp	.+130    	; 0x32a <_Z6getkeyv+0xfa>
		else if (val < S2_LIMIT && keys[2] < 32000) ++keys[2]; //key2 pressed
     2a8:	8e 3e       	cpi	r24, 0xEE	; 238
     2aa:	91 05       	cpc	r25, r1
     2ac:	70 f4       	brcc	.+28     	; 0x2ca <_Z6getkeyv+0x9a>
     2ae:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <__data_end+0x4>
     2b2:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <__data_end+0x5>
     2b6:	81 15       	cp	r24, r1
     2b8:	2d e7       	ldi	r18, 0x7D	; 125
     2ba:	92 07       	cpc	r25, r18
     2bc:	54 f4       	brge	.+20     	; 0x2d2 <_Z6getkeyv+0xa2>
     2be:	01 96       	adiw	r24, 0x01	; 1
     2c0:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <__data_end+0x5>
     2c4:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <__data_end+0x4>
     2c8:	30 c0       	rjmp	.+96     	; 0x32a <_Z6getkeyv+0xfa>
		else if (val < S3_LIMIT && keys[3] < 32000) ++keys[3]; //key3 pressed
     2ca:	82 3a       	cpi	r24, 0xA2	; 162
     2cc:	21 e0       	ldi	r18, 0x01	; 1
     2ce:	92 07       	cpc	r25, r18
     2d0:	70 f4       	brcc	.+28     	; 0x2ee <_Z6getkeyv+0xbe>
     2d2:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <__data_end+0x6>
     2d6:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <__data_end+0x7>
     2da:	81 15       	cp	r24, r1
     2dc:	2d e7       	ldi	r18, 0x7D	; 125
     2de:	92 07       	cpc	r25, r18
     2e0:	4c f4       	brge	.+18     	; 0x2f4 <_Z6getkeyv+0xc4>
     2e2:	01 96       	adiw	r24, 0x01	; 1
     2e4:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <__data_end+0x7>
     2e8:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <__data_end+0x6>
     2ec:	1e c0       	rjmp	.+60     	; 0x32a <_Z6getkeyv+0xfa>
		else if (val < S4_LIMIT && keys[4] < 32000) ++keys[4]; //key4 pressed
     2ee:	80 37       	cpi	r24, 0x70	; 112
     2f0:	92 40       	sbci	r25, 0x02	; 2
     2f2:	70 f4       	brcc	.+28     	; 0x310 <_Z6getkeyv+0xe0>
     2f4:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <__data_end+0x8>
     2f8:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <__data_end+0x9>
     2fc:	81 15       	cp	r24, r1
     2fe:	2d e7       	ldi	r18, 0x7D	; 125
     300:	92 07       	cpc	r25, r18
     302:	34 f4       	brge	.+12     	; 0x310 <_Z6getkeyv+0xe0>
     304:	01 96       	adiw	r24, 0x01	; 1
     306:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <__data_end+0x9>
     30a:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <__data_end+0x8>
     30e:	0d c0       	rjmp	.+26     	; 0x32a <_Z6getkeyv+0xfa>
		else if ( keys[5] < 32000) ++keys[5]; // key5 pressed
     310:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end+0xa>
     314:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <__data_end+0xb>
     318:	81 15       	cp	r24, r1
     31a:	2d e7       	ldi	r18, 0x7D	; 125
     31c:	92 07       	cpc	r25, r18
     31e:	2c f4       	brge	.+10     	; 0x32a <_Z6getkeyv+0xfa>
     320:	01 96       	adiw	r24, 0x01	; 1
     322:	90 93 93 02 	sts	0x0293, r25	; 0x800293 <__data_end+0xb>
     326:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <__data_end+0xa>
		data = 0;
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	90 e0       	ldi	r25, 0x00	; 0
	}
	return data;
}
     32e:	08 95       	ret

00000330 <_ZN5Print17availableForWriteEv>:
	return ret;
}

int Zeit::GetHours(){return hh_;};
int Zeit::GetMinutes(){return mm_;};
int Zeit::GetSeconds(){return ss_;};
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	08 95       	ret

00000336 <_ZN5Print5flushEv>:
     336:	08 95       	ret

00000338 <_ZN7hd4478013iosetContrastEh>:
     338:	8d ef       	ldi	r24, 0xFD	; 253
     33a:	9f ef       	ldi	r25, 0xFF	; 255
     33c:	08 95       	ret

0000033e <_Z14chooseTimeZonev>:
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <timeZoneChoosen>
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	08 95       	ret

0000034a <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>:
     34a:	0f 93       	push	r16
     34c:	1f 93       	push	r17
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	18 2f       	mov	r17, r24
     354:	d0 e0       	ldi	r29, 0x00	; 0
     356:	c0 e2       	ldi	r28, 0x20	; 32
     358:	6c 2f       	mov	r22, r28
     35a:	80 e1       	ldi	r24, 0x10	; 16
     35c:	94 e0       	ldi	r25, 0x04	; 4
     35e:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN7TwoWire17beginTransmissionEh>
     362:	80 e1       	ldi	r24, 0x10	; 16
     364:	94 e0       	ldi	r25, 0x04	; 4
     366:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>
     36a:	08 2f       	mov	r16, r24
     36c:	61 e0       	ldi	r22, 0x01	; 1
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <delay>
     378:	01 11       	cpse	r16, r1
     37a:	03 c0       	rjmp	.+6      	; 0x382 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x38>
     37c:	1d 17       	cp	r17, r29
     37e:	f9 f0       	breq	.+62     	; 0x3be <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x74>
     380:	df 5f       	subi	r29, 0xFF	; 255
     382:	cf 5f       	subi	r28, 0xFF	; 255
     384:	c8 32       	cpi	r28, 0x28	; 40
     386:	41 f7       	brne	.-48     	; 0x358 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0xe>
     388:	c8 e3       	ldi	r28, 0x38	; 56
     38a:	6c 2f       	mov	r22, r28
     38c:	80 e1       	ldi	r24, 0x10	; 16
     38e:	94 e0       	ldi	r25, 0x04	; 4
     390:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN7TwoWire17beginTransmissionEh>
     394:	80 e1       	ldi	r24, 0x10	; 16
     396:	94 e0       	ldi	r25, 0x04	; 4
     398:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>
     39c:	08 2f       	mov	r16, r24
     39e:	61 e0       	ldi	r22, 0x01	; 1
     3a0:	70 e0       	ldi	r23, 0x00	; 0
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <delay>
     3aa:	01 11       	cpse	r16, r1
     3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x6a>
     3ae:	1d 17       	cp	r17, r29
     3b0:	31 f0       	breq	.+12     	; 0x3be <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x74>
     3b2:	df 5f       	subi	r29, 0xFF	; 255
     3b4:	cf 5f       	subi	r28, 0xFF	; 255
     3b6:	c0 34       	cpi	r28, 0x40	; 64
     3b8:	41 f7       	brne	.-48     	; 0x38a <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x40>
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x76>
     3be:	8c 2f       	mov	r24, r28
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	08 95       	ret

000003ca <_ZN7TwoWire5writeEi>:
     3ca:	dc 01       	movw	r26, r24
     3cc:	ed 91       	ld	r30, X+
     3ce:	fc 91       	ld	r31, X
     3d0:	01 90       	ld	r0, Z+
     3d2:	f0 81       	ld	r31, Z
     3d4:	e0 2d       	mov	r30, r0
     3d6:	09 94       	ijmp

000003d8 <_ZN4Zeit4TickEv>:
     3d8:	fc 01       	movw	r30, r24
     3da:	84 81       	ldd	r24, Z+4	; 0x04
     3dc:	95 81       	ldd	r25, Z+5	; 0x05
     3de:	01 96       	adiw	r24, 0x01	; 1
     3e0:	2c e3       	ldi	r18, 0x3C	; 60
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	b9 01       	movw	r22, r18
     3e6:	0e 94 2f 1c 	call	0x385e	; 0x385e <__divmodhi4>
     3ea:	95 83       	std	Z+5, r25	; 0x05
     3ec:	84 83       	std	Z+4, r24	; 0x04
     3ee:	89 2b       	or	r24, r25
     3f0:	19 f0       	breq	.+6      	; 0x3f8 <_ZN4Zeit4TickEv+0x20>
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	08 95       	ret
     3f8:	82 81       	ldd	r24, Z+2	; 0x02
     3fa:	93 81       	ldd	r25, Z+3	; 0x03
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b9 01       	movw	r22, r18
     400:	0e 94 2f 1c 	call	0x385e	; 0x385e <__divmodhi4>
     404:	93 83       	std	Z+3, r25	; 0x03
     406:	82 83       	std	Z+2, r24	; 0x02
     408:	89 2b       	or	r24, r25
     40a:	99 f7       	brne	.-26     	; 0x3f2 <_ZN4Zeit4TickEv+0x1a>
     40c:	80 81       	ld	r24, Z
     40e:	91 81       	ldd	r25, Z+1	; 0x01
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	68 e1       	ldi	r22, 0x18	; 24
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	0e 94 2f 1c 	call	0x385e	; 0x385e <__divmodhi4>
     41a:	ac 01       	movw	r20, r24
     41c:	91 83       	std	Z+1, r25	; 0x01
     41e:	80 83       	st	Z, r24
     420:	21 e0       	ldi	r18, 0x01	; 1
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	45 2b       	or	r20, r21
     426:	09 f0       	breq	.+2      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     428:	20 e0       	ldi	r18, 0x00	; 0
     42a:	82 2f       	mov	r24, r18
     42c:	08 95       	ret

0000042e <_Z5Watchv>:
 * frequent calls will result in counting the time. days-of-month and leap years are taken into account
 *
 * @return void
 */
void Watch()
{
     42e:	0f 93       	push	r16
     430:	1f 93       	push	r17
#define INTERVAL 1000L
	static long target = INTERVAL;
	if (millis() > target)	{
     432:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <millis>
     436:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZZ5WatchvE6target>
     43a:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZZ5WatchvE6target+0x1>
     43e:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <_ZZ5WatchvE6target+0x2>
     442:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <_ZZ5WatchvE6target+0x3>
     446:	06 17       	cp	r16, r22
     448:	17 07       	cpc	r17, r23
     44a:	28 07       	cpc	r18, r24
     44c:	39 07       	cpc	r19, r25
     44e:	e0 f4       	brcc	.+56     	; 0x488 <_Z5Watchv+0x5a>
		target += INTERVAL;
     450:	d9 01       	movw	r26, r18
     452:	c8 01       	movw	r24, r16
     454:	88 51       	subi	r24, 0x18	; 24
     456:	9c 4f       	sbci	r25, 0xFC	; 252
     458:	af 4f       	sbci	r26, 0xFF	; 255
     45a:	bf 4f       	sbci	r27, 0xFF	; 255
     45c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZZ5WatchvE6target>
     460:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZZ5WatchvE6target+0x1>
     464:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_ZZ5WatchvE6target+0x2>
     468:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_ZZ5WatchvE6target+0x3>
		zeitGMT.Tick();
     46c:	8e eb       	ldi	r24, 0xBE	; 190
     46e:	92 e0       	ldi	r25, 0x02	; 2
     470:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <_ZN4Zeit4TickEv>
		zeitTimeZone.Tick();
     474:	86 eb       	ldi	r24, 0xB6	; 182
     476:	92 e0       	ldi	r25, 0x02	; 2
     478:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <_ZN4Zeit4TickEv>
		zeitLocal.Tick();
     47c:	8e ea       	ldi	r24, 0xAE	; 174
     47e:	92 e0       	ldi	r25, 0x02	; 2
		//if(zeit1.Tick()) datum1.Tick(); //Wenn die Zeit bei 24.00 ankommt wird ret = 1 gesetzt und das Datum eins weitergestellt
	}
#undef INTERVAL
}
     480:	1f 91       	pop	r17
     482:	0f 91       	pop	r16
	static long target = INTERVAL;
	if (millis() > target)	{
		target += INTERVAL;
		zeitGMT.Tick();
		zeitTimeZone.Tick();
		zeitLocal.Tick();
     484:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <_ZN4Zeit4TickEv>
		//if(zeit1.Tick()) datum1.Tick(); //Wenn die Zeit bei 24.00 ankommt wird ret = 1 gesetzt und das Datum eins weitergestellt
	}
#undef INTERVAL
}
     488:	1f 91       	pop	r17
     48a:	0f 91       	pop	r16
     48c:	08 95       	ret

0000048e <_Z11printhhmmssR4Zeit>:
 * @param[in] zeit: struct 
 * 
 * @return void
 */
void printhhmmss(class Zeit &z)
{
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
     492:	ec 01       	movw	r28, r24
	if(z.GetHours()<=9)lcd.print("0");
     494:	88 81       	ld	r24, Y
     496:	99 81       	ldd	r25, Y+1	; 0x01
     498:	0a 97       	sbiw	r24, 0x0a	; 10
     49a:	34 f4       	brge	.+12     	; 0x4a8 <_Z11printhhmmssR4Zeit+0x1a>
     49c:	6f e1       	ldi	r22, 0x1F	; 31
     49e:	71 e0       	ldi	r23, 0x01	; 1
     4a0:	85 e7       	ldi	r24, 0x75	; 117
     4a2:	93 e0       	ldi	r25, 0x03	; 3
     4a4:	0e 94 79 11 	call	0x22f2	; 0x22f2 <_ZN5Print5printEPKc>
	lcd.print(z.GetHours());
     4a8:	68 81       	ld	r22, Y
     4aa:	79 81       	ldd	r23, Y+1	; 0x01
     4ac:	4a e0       	ldi	r20, 0x0A	; 10
     4ae:	50 e0       	ldi	r21, 0x00	; 0
     4b0:	85 e7       	ldi	r24, 0x75	; 117
     4b2:	93 e0       	ldi	r25, 0x03	; 3
     4b4:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN5Print5printEii>
	if(z.GetMinutes()<=9)lcd.print(":0"); else lcd.print(":");
     4b8:	8a 81       	ldd	r24, Y+2	; 0x02
     4ba:	9b 81       	ldd	r25, Y+3	; 0x03
     4bc:	0a 97       	sbiw	r24, 0x0a	; 10
     4be:	1c f4       	brge	.+6      	; 0x4c6 <_Z11printhhmmssR4Zeit+0x38>
     4c0:	6e e1       	ldi	r22, 0x1E	; 30
     4c2:	71 e0       	ldi	r23, 0x01	; 1
     4c4:	02 c0       	rjmp	.+4      	; 0x4ca <_Z11printhhmmssR4Zeit+0x3c>
     4c6:	61 e2       	ldi	r22, 0x21	; 33
     4c8:	71 e0       	ldi	r23, 0x01	; 1
     4ca:	85 e7       	ldi	r24, 0x75	; 117
     4cc:	93 e0       	ldi	r25, 0x03	; 3
     4ce:	0e 94 79 11 	call	0x22f2	; 0x22f2 <_ZN5Print5printEPKc>
	lcd.print(z.GetMinutes());
     4d2:	6a 81       	ldd	r22, Y+2	; 0x02
     4d4:	7b 81       	ldd	r23, Y+3	; 0x03
     4d6:	4a e0       	ldi	r20, 0x0A	; 10
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	85 e7       	ldi	r24, 0x75	; 117
     4dc:	93 e0       	ldi	r25, 0x03	; 3
     4de:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN5Print5printEii>
	if(z.GetSeconds()<=9)lcd.print(":0"); else lcd.print(":");
     4e2:	8c 81       	ldd	r24, Y+4	; 0x04
     4e4:	9d 81       	ldd	r25, Y+5	; 0x05
     4e6:	0a 97       	sbiw	r24, 0x0a	; 10
     4e8:	1c f4       	brge	.+6      	; 0x4f0 <_Z11printhhmmssR4Zeit+0x62>
     4ea:	6e e1       	ldi	r22, 0x1E	; 30
     4ec:	71 e0       	ldi	r23, 0x01	; 1
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <_Z11printhhmmssR4Zeit+0x66>
     4f0:	61 e2       	ldi	r22, 0x21	; 33
     4f2:	71 e0       	ldi	r23, 0x01	; 1
     4f4:	85 e7       	ldi	r24, 0x75	; 117
     4f6:	93 e0       	ldi	r25, 0x03	; 3
     4f8:	0e 94 79 11 	call	0x22f2	; 0x22f2 <_ZN5Print5printEPKc>
	lcd.print(z.GetSeconds());
     4fc:	6c 81       	ldd	r22, Y+4	; 0x04
     4fe:	7d 81       	ldd	r23, Y+5	; 0x05
     500:	4a e0       	ldi	r20, 0x0A	; 10
     502:	50 e0       	ldi	r21, 0x00	; 0
     504:	85 e7       	ldi	r24, 0x75	; 117
     506:	93 e0       	ldi	r25, 0x03	; 3
}
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
	if(z.GetHours()<=9)lcd.print("0");
	lcd.print(z.GetHours());
	if(z.GetMinutes()<=9)lcd.print(":0"); else lcd.print(":");
	lcd.print(z.GetMinutes());
	if(z.GetSeconds()<=9)lcd.print(":0"); else lcd.print(":");
	lcd.print(z.GetSeconds());
     50c:	0c 94 26 12 	jmp	0x244c	; 0x244c <_ZN5Print5printEii>

00000510 <_Z17printHumidityTempv>:
 * und schreibt den Wert auf das LCD
 *
 * @return void
 */
void printHumidityTemp (void)
{
     510:	cf 92       	push	r12
     512:	df 92       	push	r13
     514:	ef 92       	push	r14
     516:	ff 92       	push	r15
	float temp;
	temp=analogRead(tempSensor);
     518:	86 e1       	ldi	r24, 0x16	; 22
     51a:	0e 94 50 18 	call	0x30a0	; 0x30a0 <analogRead>
	temp=(temp*500)/1023;
     51e:	bc 01       	movw	r22, r24
     520:	99 0f       	add	r25, r25
     522:	88 0b       	sbc	r24, r24
     524:	99 0b       	sbc	r25, r25
     526:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__floatsisf>
     52a:	20 e0       	ldi	r18, 0x00	; 0
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	4a ef       	ldi	r20, 0xFA	; 250
     530:	53 e4       	ldi	r21, 0x43	; 67
     532:	0e 94 85 10 	call	0x210a	; 0x210a <__mulsf3>
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	30 ec       	ldi	r19, 0xC0	; 192
     53a:	4f e7       	ldi	r20, 0x7F	; 127
     53c:	54 e4       	ldi	r21, 0x44	; 68
     53e:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <__divsf3>
     542:	6b 01       	movw	r12, r22
     544:	7c 01       	movw	r14, r24
	
	lcd.setCursor(0,1);
     546:	41 e0       	ldi	r20, 0x01	; 1
     548:	60 e0       	ldi	r22, 0x00	; 0
     54a:	85 e7       	ldi	r24, 0x75	; 117
     54c:	93 e0       	ldi	r25, 0x03	; 3
     54e:	0e 94 c9 0a 	call	0x1592	; 0x1592 <_ZN7hd447809setCursorEhh>
	if (temp > 100) lcd.print("Sensor defekt");
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	48 ec       	ldi	r20, 0xC8	; 200
     558:	52 e4       	ldi	r21, 0x42	; 66
     55a:	c7 01       	movw	r24, r14
     55c:	b6 01       	movw	r22, r12
     55e:	0e 94 80 10 	call	0x2100	; 0x2100 <__gesf2>
     562:	18 16       	cp	r1, r24
     564:	1c f4       	brge	.+6      	; 0x56c <_Z17printHumidityTempv+0x5c>
     566:	63 e2       	ldi	r22, 0x23	; 35
     568:	71 e0       	ldi	r23, 0x01	; 1
     56a:	15 c0       	rjmp	.+42     	; 0x596 <_Z17printHumidityTempv+0x86>
	else {
		lcd.print(temp);
     56c:	22 e0       	ldi	r18, 0x02	; 2
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	b7 01       	movw	r22, r14
     572:	a6 01       	movw	r20, r12
     574:	85 e7       	ldi	r24, 0x75	; 117
     576:	93 e0       	ldi	r25, 0x03	; 3
     578:	0e 94 08 13 	call	0x2610	; 0x2610 <_ZN5Print5printEdi>
		lcd.print(" ");
     57c:	61 e3       	ldi	r22, 0x31	; 49
     57e:	71 e0       	ldi	r23, 0x01	; 1
     580:	85 e7       	ldi	r24, 0x75	; 117
     582:	93 e0       	ldi	r25, 0x03	; 3
     584:	0e 94 79 11 	call	0x22f2	; 0x22f2 <_ZN5Print5printEPKc>
		lcd.print((char)223);
     588:	6f ed       	ldi	r22, 0xDF	; 223
     58a:	85 e7       	ldi	r24, 0x75	; 117
     58c:	93 e0       	ldi	r25, 0x03	; 3
     58e:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <_ZN5Print5printEc>
		lcd.print("C");
     592:	6f eb       	ldi	r22, 0xBF	; 191
     594:	71 e0       	ldi	r23, 0x01	; 1
     596:	85 e7       	ldi	r24, 0x75	; 117
     598:	93 e0       	ldi	r25, 0x03	; 3
	}
}
     59a:	ff 90       	pop	r15
     59c:	ef 90       	pop	r14
     59e:	df 90       	pop	r13
     5a0:	cf 90       	pop	r12
	if (temp > 100) lcd.print("Sensor defekt");
	else {
		lcd.print(temp);
		lcd.print(" ");
		lcd.print((char)223);
		lcd.print("C");
     5a2:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <_ZN5Print5printEPKc>

000005a6 <_Z10homeScreeni>:
 * @param[in] key : int, user input
 *
 * @return key
 */
int homeScreen(int key)
{
     5a6:	0f 93       	push	r16
     5a8:	1f 93       	push	r17
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	ec 01       	movw	r28, r24
	if (readSensor < millis())
     5b0:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <millis>
     5b4:	00 91 c7 02 	lds	r16, 0x02C7	; 0x8002c7 <readSensor>
     5b8:	10 91 c8 02 	lds	r17, 0x02C8	; 0x8002c8 <readSensor+0x1>
     5bc:	20 91 c9 02 	lds	r18, 0x02C9	; 0x8002c9 <readSensor+0x2>
     5c0:	30 91 ca 02 	lds	r19, 0x02CA	; 0x8002ca <readSensor+0x3>
     5c4:	06 17       	cp	r16, r22
     5c6:	17 07       	cpc	r17, r23
     5c8:	28 07       	cpc	r18, r24
     5ca:	39 07       	cpc	r19, r25
     5cc:	90 f4       	brcc	.+36     	; 0x5f2 <_Z10homeScreeni+0x4c>
	{	
		printHumidityTemp();
     5ce:	0e 94 88 02 	call	0x510	; 0x510 <_Z17printHumidityTempv>
		readSensor = millis() + 5000;
     5d2:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <millis>
     5d6:	dc 01       	movw	r26, r24
     5d8:	cb 01       	movw	r24, r22
     5da:	88 57       	subi	r24, 0x78	; 120
     5dc:	9c 4e       	sbci	r25, 0xEC	; 236
     5de:	af 4f       	sbci	r26, 0xFF	; 255
     5e0:	bf 4f       	sbci	r27, 0xFF	; 255
     5e2:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <readSensor>
     5e6:	90 93 c8 02 	sts	0x02C8, r25	; 0x8002c8 <readSensor+0x1>
     5ea:	a0 93 c9 02 	sts	0x02C9, r26	; 0x8002c9 <readSensor+0x2>
     5ee:	b0 93 ca 02 	sts	0x02CA, r27	; 0x8002ca <readSensor+0x3>
	}
	lcd.setCursor(0,0);
     5f2:	40 e0       	ldi	r20, 0x00	; 0
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	85 e7       	ldi	r24, 0x75	; 117
     5f8:	93 e0       	ldi	r25, 0x03	; 3
     5fa:	0e 94 c9 0a 	call	0x1592	; 0x1592 <_ZN7hd447809setCursorEhh>
	if (timeZoneChoosen)
     5fe:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <timeZoneChoosen>
     602:	88 23       	and	r24, r24
     604:	d9 f0       	breq	.+54     	; 0x63c <_Z10homeScreeni+0x96>
	{
		printhhmmss(zeitTimeZone);
     606:	86 eb       	ldi	r24, 0xB6	; 182
     608:	92 e0       	ldi	r25, 0x02	; 2
     60a:	0e 94 47 02 	call	0x48e	; 0x48e <_Z11printhhmmssR4Zeit>
		lcd.setCursor(12,0);
     60e:	40 e0       	ldi	r20, 0x00	; 0
     610:	6c e0       	ldi	r22, 0x0C	; 12
     612:	85 e7       	ldi	r24, 0x75	; 117
     614:	93 e0       	ldi	r25, 0x03	; 3
     616:	0e 94 c9 0a 	call	0x1592	; 0x1592 <_ZN7hd447809setCursorEhh>
		lcd.print(CITIES[tz].initials);
     61a:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <tz>
     61e:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <tz+0x1>
     622:	2e e0       	ldi	r18, 0x0E	; 14
     624:	28 9f       	mul	r18, r24
     626:	b0 01       	movw	r22, r0
     628:	29 9f       	mul	r18, r25
     62a:	70 0d       	add	r23, r0
     62c:	11 24       	eor	r1, r1
     62e:	6b 52       	subi	r22, 0x2B	; 43
     630:	7d 4f       	sbci	r23, 0xFD	; 253
     632:	85 e7       	ldi	r24, 0x75	; 117
     634:	93 e0       	ldi	r25, 0x03	; 3
     636:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <_ZN5Print5printERK6String>
     63a:	04 c0       	rjmp	.+8      	; 0x644 <_Z10homeScreeni+0x9e>
	}
	else
	{
		printhhmmss(zeitLocal);	
     63c:	8e ea       	ldi	r24, 0xAE	; 174
     63e:	92 e0       	ldi	r25, 0x02	; 2
     640:	0e 94 47 02 	call	0x48e	; 0x48e <_Z11printhhmmssR4Zeit>
	}
	return key;
}
     644:	ce 01       	movw	r24, r28
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	1f 91       	pop	r17
     64c:	0f 91       	pop	r16
     64e:	08 95       	ret

00000650 <_Z13calculateTimev>:
 * 
 * Stellt sicher, dass die Zeiten richtig sind. 
 * Zwischen 0 und kleiner als 24.
 */
void calculateTime() {
	zeitTimeZone.hh_= zeitGMT.hh_ + CITIES[tz].timediff;
     650:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <tz>
     654:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <tz+0x1>
     658:	2e e0       	ldi	r18, 0x0E	; 14
     65a:	28 9f       	mul	r18, r24
     65c:	f0 01       	movw	r30, r0
     65e:	29 9f       	mul	r18, r25
     660:	f0 0d       	add	r31, r0
     662:	11 24       	eor	r1, r1
     664:	e3 53       	subi	r30, 0x33	; 51
     666:	fd 4f       	sbci	r31, 0xFD	; 253
     668:	26 81       	ldd	r18, Z+6	; 0x06
     66a:	37 81       	ldd	r19, Z+7	; 0x07
     66c:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <zeitGMT>
     670:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <zeitGMT+0x1>
     674:	82 0f       	add	r24, r18
     676:	93 1f       	adc	r25, r19
	if (zeitTimeZone.hh_ > 23)
     678:	88 31       	cpi	r24, 0x18	; 24
     67a:	91 05       	cpc	r25, r1
     67c:	0c f0       	brlt	.+2      	; 0x680 <_Z13calculateTimev+0x30>
	{
		zeitTimeZone.hh_ -= 24; 
     67e:	48 97       	sbiw	r24, 0x18	; 24
     680:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <zeitTimeZone+0x1>
     684:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <zeitTimeZone>
	}
	if (zeitTimeZone.hh_ < 0)
     688:	20 91 b6 02 	lds	r18, 0x02B6	; 0x8002b6 <zeitTimeZone>
     68c:	30 91 b7 02 	lds	r19, 0x02B7	; 0x8002b7 <zeitTimeZone+0x1>
     690:	37 ff       	sbrs	r19, 7
     692:	08 c0       	rjmp	.+16     	; 0x6a4 <_Z13calculateTimev+0x54>
	{
		zeitTimeZone.hh_ = 24 - zeitTimeZone.hh_;
     694:	88 e1       	ldi	r24, 0x18	; 24
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	82 1b       	sub	r24, r18
     69a:	93 0b       	sbc	r25, r19
     69c:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <zeitTimeZone+0x1>
     6a0:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <zeitTimeZone>
     6a4:	08 95       	ret

000006a6 <_Z14changeTimeZonei>:
 * 
 * @return key
 */
int changeTimeZone (int key)
{
	switch (key)
     6a6:	83 30       	cpi	r24, 0x03	; 3
     6a8:	91 05       	cpc	r25, r1
     6aa:	39 f0       	breq	.+14     	; 0x6ba <_Z14changeTimeZonei+0x14>
     6ac:	8a 30       	cpi	r24, 0x0A	; 10
     6ae:	91 05       	cpc	r25, r1
     6b0:	21 f0       	breq	.+8      	; 0x6ba <_Z14changeTimeZonei+0x14>
     6b2:	81 30       	cpi	r24, 0x01	; 1
     6b4:	91 05       	cpc	r25, r1
     6b6:	51 f5       	brne	.+84     	; 0x70c <_Z14changeTimeZonei+0x66>
     6b8:	17 c0       	rjmp	.+46     	; 0x6e8 <_Z14changeTimeZonei+0x42>
	{
		case X_KEY:
		//zeit2 = zeitLocal;
		case DOWN_KEY:
		lcd.clear();
     6ba:	85 e7       	ldi	r24, 0x75	; 117
     6bc:	93 e0       	ldi	r25, 0x03	; 3
     6be:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN7hd447805clearEv>
		if (tz == 0)
     6c2:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <tz>
     6c6:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <tz+0x1>
     6ca:	00 97       	sbiw	r24, 0x00	; 0
     6cc:	19 f4       	brne	.+6      	; 0x6d4 <_Z14changeTimeZonei+0x2e>
		{
			tz = 11;
     6ce:	8b e0       	ldi	r24, 0x0B	; 11
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <_Z14changeTimeZonei+0x30>
		}
		else tz -= 1;
     6d4:	01 97       	sbiw	r24, 0x01	; 1
     6d6:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <tz+0x1>
     6da:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <tz>
		calculateTime();	
     6de:	0e 94 28 03 	call	0x650	; 0x650 <_Z13calculateTimev>
		key = X_KEY;
     6e2:	8a e0       	ldi	r24, 0x0A	; 10
     6e4:	90 e0       	ldi	r25, 0x00	; 0
		break;
     6e6:	08 95       	ret
		case UP_KEY:
		lcd.clear();
     6e8:	85 e7       	ldi	r24, 0x75	; 117
     6ea:	93 e0       	ldi	r25, 0x03	; 3
     6ec:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN7hd447805clearEv>
		if (tz == 11)
     6f0:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <tz>
     6f4:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <tz+0x1>
     6f8:	8b 30       	cpi	r24, 0x0B	; 11
     6fa:	91 05       	cpc	r25, r1
     6fc:	29 f4       	brne	.+10     	; 0x708 <_Z14changeTimeZonei+0x62>
		{
			tz = 0;
     6fe:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <tz+0x1>
     702:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <tz>
     706:	eb cf       	rjmp	.-42     	; 0x6de <_Z14changeTimeZonei+0x38>
		}
		else tz += 1;
     708:	01 96       	adiw	r24, 0x01	; 1
     70a:	e5 cf       	rjmp	.-54     	; 0x6d6 <_Z14changeTimeZonei+0x30>
		break;
		case RIGHT_KEY:
		break;
	}
	return key;
}
     70c:	08 95       	ret

0000070e <_Z11setTimeZonei>:
 * @param[in] key : int, user input
 *
 * @return key
 */
int setTimeZone(int key)
{
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
	int input = changeTimeZone(key);
     712:	0e 94 53 03 	call	0x6a6	; 0x6a6 <_Z14changeTimeZonei>
     716:	ec 01       	movw	r28, r24
	lcd.setCursor(0,0);
     718:	40 e0       	ldi	r20, 0x00	; 0
     71a:	60 e0       	ldi	r22, 0x00	; 0
     71c:	85 e7       	ldi	r24, 0x75	; 117
     71e:	93 e0       	ldi	r25, 0x03	; 3
     720:	0e 94 c9 0a 	call	0x1592	; 0x1592 <_ZN7hd447809setCursorEhh>
	lcd.print(CITIES[tz].name);
     724:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <tz>
     728:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <tz+0x1>
     72c:	2e e0       	ldi	r18, 0x0E	; 14
     72e:	28 9f       	mul	r18, r24
     730:	b0 01       	movw	r22, r0
     732:	29 9f       	mul	r18, r25
     734:	70 0d       	add	r23, r0
     736:	11 24       	eor	r1, r1
     738:	63 53       	subi	r22, 0x33	; 51
     73a:	7d 4f       	sbci	r23, 0xFD	; 253
     73c:	85 e7       	ldi	r24, 0x75	; 117
     73e:	93 e0       	ldi	r25, 0x03	; 3
     740:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <_ZN5Print5printERK6String>
	lcd.setCursor(0,1);
     744:	41 e0       	ldi	r20, 0x01	; 1
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	85 e7       	ldi	r24, 0x75	; 117
     74a:	93 e0       	ldi	r25, 0x03	; 3
     74c:	0e 94 c9 0a 	call	0x1592	; 0x1592 <_ZN7hd447809setCursorEhh>
	printhhmmss(zeitTimeZone);
     750:	86 eb       	ldi	r24, 0xB6	; 182
     752:	92 e0       	ldi	r25, 0x02	; 2
     754:	0e 94 47 02 	call	0x48e	; 0x48e <_Z11printhhmmssR4Zeit>
	return input;
}
     758:	ce 01       	movw	r24, r28
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	08 95       	ret

00000760 <_Z17callibratePointerv>:
 * @brief set zero position of the three pointer
 *
 */
void callibratePointer() 
{
	lcd.clear();
     760:	85 e7       	ldi	r24, 0x75	; 117
     762:	93 e0       	ldi	r25, 0x03	; 3
     764:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN7hd447805clearEv>
	lcd.print("Zeiger kalibrieren");
     768:	63 e3       	ldi	r22, 0x33	; 51
     76a:	71 e0       	ldi	r23, 0x01	; 1
     76c:	85 e7       	ldi	r24, 0x75	; 117
     76e:	93 e0       	ldi	r25, 0x03	; 3
     770:	0e 94 79 11 	call	0x22f2	; 0x22f2 <_ZN5Print5printEPKc>
	delay(2000);
     774:	60 ed       	ldi	r22, 0xD0	; 208
     776:	77 e0       	ldi	r23, 0x07	; 7
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <delay>
	lcd.clear();
     780:	85 e7       	ldi	r24, 0x75	; 117
     782:	93 e0       	ldi	r25, 0x03	; 3
     784:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <_ZN7hd447805clearEv>

00000788 <setup>:
 * \return void
 */
void setup()
{
	//LCD konfigurieren
	lcd.begin(16, 2);
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	42 e0       	ldi	r20, 0x02	; 2
     78c:	60 e1       	ldi	r22, 0x10	; 16
     78e:	85 e7       	ldi	r24, 0x75	; 117
     790:	93 e0       	ldi	r25, 0x03	; 3
     792:	0e 94 ef 0a 	call	0x15de	; 0x15de <_ZN7hd447805beginEhhh>
	lcd.noBacklight();
     796:	85 e7       	ldi	r24, 0x75	; 117
     798:	93 e0       	ldi	r25, 0x03	; 3
     79a:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZN7hd4478011noBacklightEv>
	lcd.noCursor();
     79e:	85 e7       	ldi	r24, 0x75	; 117
     7a0:	93 e0       	ldi	r25, 0x03	; 3
     7a2:	0e 94 89 0b 	call	0x1712	; 0x1712 <_ZN7hd447808noCursorEv>
	lcd.home();
     7a6:	85 e7       	ldi	r24, 0x75	; 117
     7a8:	93 e0       	ldi	r25, 0x03	; 3
     7aa:	0e 94 c6 0a 	call	0x158c	; 0x158c <_ZN7hd447804homeEv>
	lcd.print("Romeo V2.2 Watch");
     7ae:	66 e4       	ldi	r22, 0x46	; 70
     7b0:	71 e0       	ldi	r23, 0x01	; 1
     7b2:	85 e7       	ldi	r24, 0x75	; 117
     7b4:	93 e0       	ldi	r25, 0x03	; 3
     7b6:	0e 94 79 11 	call	0x22f2	; 0x22f2 <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
     7ba:	41 e0       	ldi	r20, 0x01	; 1
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	85 e7       	ldi	r24, 0x75	; 117
     7c0:	93 e0       	ldi	r25, 0x03	; 3
     7c2:	0e 94 c9 0a 	call	0x1592	; 0x1592 <_ZN7hd447809setCursorEhh>
	lcd.print("Coray / Bruno");
     7c6:	67 e5       	ldi	r22, 0x57	; 87
     7c8:	71 e0       	ldi	r23, 0x01	; 1
     7ca:	85 e7       	ldi	r24, 0x75	; 117
     7cc:	93 e0       	ldi	r25, 0x03	; 3
     7ce:	0e 94 79 11 	call	0x22f2	; 0x22f2 <_ZN5Print5printEPKc>
	while(millis()<3000);
     7d2:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <millis>
     7d6:	68 3b       	cpi	r22, 0xB8	; 184
     7d8:	7b 40       	sbci	r23, 0x0B	; 11
     7da:	81 05       	cpc	r24, r1
     7dc:	91 05       	cpc	r25, r1
     7de:	c8 f3       	brcs	.-14     	; 0x7d2 <setup+0x4a>
	lcd.clear();
     7e0:	85 e7       	ldi	r24, 0x75	; 117
     7e2:	93 e0       	ldi	r25, 0x03	; 3
     7e4:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN7hd447805clearEv>
	
	zeitTimeZone = zeitGMT;
     7e8:	88 e0       	ldi	r24, 0x08	; 8
     7ea:	ee eb       	ldi	r30, 0xBE	; 190
     7ec:	f2 e0       	ldi	r31, 0x02	; 2
     7ee:	a6 eb       	ldi	r26, 0xB6	; 182
     7f0:	b2 e0       	ldi	r27, 0x02	; 2
     7f2:	01 90       	ld	r0, Z+
     7f4:	0d 92       	st	X+, r0
     7f6:	8a 95       	dec	r24
     7f8:	e1 f7       	brne	.-8      	; 0x7f2 <setup+0x6a>
	
	//Button uns Sensor Pin als input definiert
	pinMode(btnPin, INPUT);
     7fa:	60 e0       	ldi	r22, 0x00	; 0
     7fc:	87 e0       	ldi	r24, 0x07	; 7
     7fe:	0e 94 be 18 	call	0x317c	; 0x317c <pinMode>
	pinMode(tempSensor,INPUT);
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	86 e1       	ldi	r24, 0x16	; 22
     806:	0c 94 be 18 	jmp	0x317c	; 0x317c <pinMode>

0000080a <loop>:
 * \return void
 */
void loop()
{
	//Button-Pin auslesen
	if (digitalRead(btnPin) == HIGH)
     80a:	87 e0       	ldi	r24, 0x07	; 7
     80c:	0e 94 29 19 	call	0x3252	; 0x3252 <digitalRead>
     810:	01 97       	sbiw	r24, 0x01	; 1
     812:	11 f4       	brne	.+4      	; 0x818 <loop+0xe>
	{
		callibratePointer();
     814:	0c 94 b0 03 	jmp	0x760	; 0x760 <_Z17callibratePointerv>
	}
	else
	{
	Watch();
     818:	0e 94 17 02 	call	0x42e	; 0x42e <_Z5Watchv>
	input = getkey();
     81c:	0e 94 18 01 	call	0x230	; 0x230 <_Z6getkeyv>
     820:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <_ZL5input+0x1>
     824:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <_ZL5input>
	if (watchmenu[menu].active) 
     828:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <_ZL4menu>
     82c:	30 91 ad 02 	lds	r19, 0x02AD	; 0x8002ad <_ZL4menu+0x1>
     830:	42 e1       	ldi	r20, 0x12	; 18
     832:	42 9f       	mul	r20, r18
     834:	f0 01       	movw	r30, r0
     836:	43 9f       	mul	r20, r19
     838:	f0 0d       	add	r31, r0
     83a:	11 24       	eor	r1, r1
     83c:	e6 5e       	subi	r30, 0xE6	; 230
     83e:	fd 4f       	sbci	r31, 0xFD	; 253
     840:	04 84       	ldd	r0, Z+12	; 0x0c
     842:	f5 85       	ldd	r31, Z+13	; 0x0d
     844:	e0 2d       	mov	r30, r0
     846:	30 97       	sbiw	r30, 0x00	; 0
     848:	29 f0       	breq	.+10     	; 0x854 <loop+0x4a>
		input = watchmenu[menu].active(input);
     84a:	09 95       	icall
     84c:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <_ZL5input+0x1>
     850:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <_ZL5input>
		//! cyclic call to active function as long as menu n is active
	switch(input) {
     854:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <_ZL5input>
     858:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <_ZL5input+0x1>
     85c:	83 30       	cpi	r24, 0x03	; 3
     85e:	91 05       	cpc	r25, r1
     860:	e9 f1       	breq	.+122    	; 0x8dc <loop+0xd2>
     862:	34 f4       	brge	.+12     	; 0x870 <loop+0x66>
     864:	81 30       	cpi	r24, 0x01	; 1
     866:	91 05       	cpc	r25, r1
     868:	79 f0       	breq	.+30     	; 0x888 <loop+0x7e>
     86a:	02 97       	sbiw	r24, 0x02	; 2
     86c:	21 f1       	breq	.+72     	; 0x8b6 <loop+0xac>
     86e:	09 c0       	rjmp	.+18     	; 0x882 <loop+0x78>
     870:	85 30       	cpi	r24, 0x05	; 5
     872:	91 05       	cpc	r25, r1
     874:	09 f4       	brne	.+2      	; 0x878 <loop+0x6e>
     876:	6a c0       	rjmp	.+212    	; 0x94c <loop+0x142>
     878:	0c f4       	brge	.+2      	; 0x87c <loop+0x72>
     87a:	43 c0       	rjmp	.+134    	; 0x902 <loop+0xf8>
     87c:	06 97       	sbiw	r24, 0x06	; 6
     87e:	09 f4       	brne	.+2      	; 0x882 <loop+0x78>
     880:	8a c0       	rjmp	.+276    	; 0x996 <loop+0x18c>
		default:
		case X_KEY:
		case NO_KEY:
		newmenu = -1; // no changes made
     882:	8f ef       	ldi	r24, 0xFF	; 255
     884:	9f ef       	ldi	r25, 0xFF	; 255
     886:	12 c0       	rjmp	.+36     	; 0x8ac <loop+0xa2>
		break;
		case UP_KEY:
		lcd.clear();
     888:	85 e7       	ldi	r24, 0x75	; 117
     88a:	93 e0       	ldi	r25, 0x03	; 3
     88c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].up;
     890:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <_ZL4menu>
     894:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <_ZL4menu+0x1>
     898:	22 e1       	ldi	r18, 0x12	; 18
     89a:	28 9f       	mul	r18, r24
     89c:	f0 01       	movw	r30, r0
     89e:	29 9f       	mul	r18, r25
     8a0:	f0 0d       	add	r31, r0
     8a2:	11 24       	eor	r1, r1
     8a4:	e6 5e       	subi	r30, 0xE6	; 230
     8a6:	fd 4f       	sbci	r31, 0xFD	; 253
     8a8:	82 81       	ldd	r24, Z+2	; 0x02
     8aa:	93 81       	ldd	r25, Z+3	; 0x03
     8ac:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <_ZL7newmenu+0x1>
     8b0:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <_ZL7newmenu>
		break;
     8b4:	80 c0       	rjmp	.+256    	; 0x9b6 <loop+0x1ac>
		case LEFT_KEY:
		lcd.clear();
     8b6:	85 e7       	ldi	r24, 0x75	; 117
     8b8:	93 e0       	ldi	r25, 0x03	; 3
     8ba:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].left;
     8be:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <_ZL4menu>
     8c2:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <_ZL4menu+0x1>
     8c6:	22 e1       	ldi	r18, 0x12	; 18
     8c8:	28 9f       	mul	r18, r24
     8ca:	f0 01       	movw	r30, r0
     8cc:	29 9f       	mul	r18, r25
     8ce:	f0 0d       	add	r31, r0
     8d0:	11 24       	eor	r1, r1
     8d2:	e6 5e       	subi	r30, 0xE6	; 230
     8d4:	fd 4f       	sbci	r31, 0xFD	; 253
     8d6:	84 81       	ldd	r24, Z+4	; 0x04
     8d8:	95 81       	ldd	r25, Z+5	; 0x05
     8da:	e8 cf       	rjmp	.-48     	; 0x8ac <loop+0xa2>
		break;
		case DOWN_KEY:
		lcd.clear();
     8dc:	85 e7       	ldi	r24, 0x75	; 117
     8de:	93 e0       	ldi	r25, 0x03	; 3
     8e0:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].down;
     8e4:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <_ZL4menu>
     8e8:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <_ZL4menu+0x1>
     8ec:	22 e1       	ldi	r18, 0x12	; 18
     8ee:	28 9f       	mul	r18, r24
     8f0:	f0 01       	movw	r30, r0
     8f2:	29 9f       	mul	r18, r25
     8f4:	f0 0d       	add	r31, r0
     8f6:	11 24       	eor	r1, r1
     8f8:	e6 5e       	subi	r30, 0xE6	; 230
     8fa:	fd 4f       	sbci	r31, 0xFD	; 253
     8fc:	86 81       	ldd	r24, Z+6	; 0x06
     8fe:	97 81       	ldd	r25, Z+7	; 0x07
     900:	d5 cf       	rjmp	.-86     	; 0x8ac <loop+0xa2>
		break;
		case RIGHT_KEY:
		lcd.clear();
     902:	85 e7       	ldi	r24, 0x75	; 117
     904:	93 e0       	ldi	r25, 0x03	; 3
     906:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN7hd447805clearEv>
		if(watchmenu[menu].goright != NULL) {
     90a:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <_ZL4menu>
     90e:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <_ZL4menu+0x1>
     912:	22 e1       	ldi	r18, 0x12	; 18
     914:	28 9f       	mul	r18, r24
     916:	f0 01       	movw	r30, r0
     918:	29 9f       	mul	r18, r25
     91a:	f0 0d       	add	r31, r0
     91c:	11 24       	eor	r1, r1
     91e:	e6 5e       	subi	r30, 0xE6	; 230
     920:	fd 4f       	sbci	r31, 0xFD	; 253
     922:	06 84       	ldd	r0, Z+14	; 0x0e
     924:	f7 85       	ldd	r31, Z+15	; 0x0f
     926:	e0 2d       	mov	r30, r0
     928:	30 97       	sbiw	r30, 0x00	; 0
     92a:	09 f0       	breq	.+2      	; 0x92e <loop+0x124>
			//! call go right function with new value
			watchmenu[menu].goright();
     92c:	09 95       	icall
		}
		newmenu = watchmenu[menu].right;
     92e:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <_ZL4menu>
     932:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <_ZL4menu+0x1>
     936:	22 e1       	ldi	r18, 0x12	; 18
     938:	28 9f       	mul	r18, r24
     93a:	f0 01       	movw	r30, r0
     93c:	29 9f       	mul	r18, r25
     93e:	f0 0d       	add	r31, r0
     940:	11 24       	eor	r1, r1
     942:	e6 5e       	subi	r30, 0xE6	; 230
     944:	fd 4f       	sbci	r31, 0xFD	; 253
     946:	80 85       	ldd	r24, Z+8	; 0x08
     948:	91 85       	ldd	r25, Z+9	; 0x09
     94a:	b0 cf       	rjmp	.-160    	; 0x8ac <loop+0xa2>
		break;
		case OK_KEY:
		lcd.clear();
     94c:	85 e7       	ldi	r24, 0x75	; 117
     94e:	93 e0       	ldi	r25, 0x03	; 3
     950:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN7hd447805clearEv>
		if(watchmenu[menu].positive != NULL) {
     954:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <_ZL4menu>
     958:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <_ZL4menu+0x1>
     95c:	22 e1       	ldi	r18, 0x12	; 18
     95e:	28 9f       	mul	r18, r24
     960:	f0 01       	movw	r30, r0
     962:	29 9f       	mul	r18, r25
     964:	f0 0d       	add	r31, r0
     966:	11 24       	eor	r1, r1
     968:	e6 5e       	subi	r30, 0xE6	; 230
     96a:	fd 4f       	sbci	r31, 0xFD	; 253
     96c:	00 88       	ldd	r0, Z+16	; 0x10
     96e:	f1 89       	ldd	r31, Z+17	; 0x11
     970:	e0 2d       	mov	r30, r0
     972:	30 97       	sbiw	r30, 0x00	; 0
     974:	09 f0       	breq	.+2      	; 0x978 <loop+0x16e>
			//! call positive answer function with new value
			watchmenu[menu].positive();
     976:	09 95       	icall
		}
		newmenu = watchmenu[menu].ok;
     978:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <_ZL4menu>
     97c:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <_ZL4menu+0x1>
     980:	22 e1       	ldi	r18, 0x12	; 18
     982:	28 9f       	mul	r18, r24
     984:	f0 01       	movw	r30, r0
     986:	29 9f       	mul	r18, r25
     988:	f0 0d       	add	r31, r0
     98a:	11 24       	eor	r1, r1
     98c:	e6 5e       	subi	r30, 0xE6	; 230
     98e:	fd 4f       	sbci	r31, 0xFD	; 253
     990:	82 85       	ldd	r24, Z+10	; 0x0a
     992:	93 85       	ldd	r25, Z+11	; 0x0b
     994:	8b cf       	rjmp	.-234    	; 0x8ac <loop+0xa2>
		break;
		case BK_KEY:
		lcd.clear();
     996:	85 e7       	ldi	r24, 0x75	; 117
     998:	93 e0       	ldi	r25, 0x03	; 3
     99a:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN7hd447805clearEv>
		lcd.noCursor();
     99e:	85 e7       	ldi	r24, 0x75	; 117
     9a0:	93 e0       	ldi	r25, 0x03	; 3
     9a2:	0e 94 89 0b 	call	0x1712	; 0x1712 <_ZN7hd447808noCursorEv>
		lcd.noBlink();
     9a6:	85 e7       	ldi	r24, 0x75	; 117
     9a8:	93 e0       	ldi	r25, 0x03	; 3
     9aa:	0e 94 90 0b 	call	0x1720	; 0x1720 <_ZN7hd447807noBlinkEv>
		newmenu = 0;
     9ae:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <_ZL7newmenu+0x1>
     9b2:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <_ZL7newmenu>
		break;
	}
	if(newmenu >= 0){
     9b6:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <_ZL7newmenu>
     9ba:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <_ZL7newmenu+0x1>
     9be:	97 fd       	sbrc	r25, 7
     9c0:	21 c0       	rjmp	.+66     	; 0xa04 <loop+0x1fa>
		menu = newmenu;
     9c2:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <_ZL4menu+0x1>
     9c6:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <_ZL4menu>
		lcd.setCursor(0, 0);
     9ca:	40 e0       	ldi	r20, 0x00	; 0
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	85 e7       	ldi	r24, 0x75	; 117
     9d0:	93 e0       	ldi	r25, 0x03	; 3
     9d2:	0e 94 c9 0a 	call	0x1592	; 0x1592 <_ZN7hd447809setCursorEhh>
		lcd.print(ROM(watchmenu[menu].text1));
     9d6:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <_ZL4menu>
     9da:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <_ZL4menu+0x1>
     9de:	22 e1       	ldi	r18, 0x12	; 18
     9e0:	28 9f       	mul	r18, r24
     9e2:	f0 01       	movw	r30, r0
     9e4:	29 9f       	mul	r18, r25
     9e6:	f0 0d       	add	r31, r0
     9e8:	11 24       	eor	r1, r1
     9ea:	e6 5e       	subi	r30, 0xE6	; 230
     9ec:	fd 4f       	sbci	r31, 0xFD	; 253
     9ee:	60 81       	ld	r22, Z
     9f0:	71 81       	ldd	r23, Z+1	; 0x01
     9f2:	84 e9       	ldi	r24, 0x94	; 148
     9f4:	92 e0       	ldi	r25, 0x02	; 2
     9f6:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <strcpy_P>
     9fa:	bc 01       	movw	r22, r24
     9fc:	85 e7       	ldi	r24, 0x75	; 117
     9fe:	93 e0       	ldi	r25, 0x03	; 3
     a00:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <_ZN5Print5printEPKc>
     a04:	08 95       	ret

00000a06 <_GLOBAL__sub_I_lcd>:
	}
	} //else Klammer
}
     a06:	af 92       	push	r10
     a08:	bf 92       	push	r11
     a0a:	cf 92       	push	r12
     a0c:	df 92       	push	r13
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
// ====================

//	-- Automagic / auto-detect constructors --

// Auto find next instance and auto config pin mapping
hd44780_I2Cexp(){ _addr = 0; _expType = I2Cexp_UNKNOWN;}
     a1a:	85 e7       	ldi	r24, 0x75	; 117
     a1c:	93 e0       	ldi	r25, 0x03	; 3
     a1e:	0e 94 4f 0a 	call	0x149e	; 0x149e <_ZN7hd44780C1Ev>
     a22:	e5 e7       	ldi	r30, 0x75	; 117
     a24:	f3 e0       	ldi	r31, 0x03	; 3
     a26:	88 e0       	ldi	r24, 0x08	; 8
     a28:	92 e0       	ldi	r25, 0x02	; 2
     a2a:	91 83       	std	Z+1, r25	; 0x01
     a2c:	80 83       	st	Z, r24
     a2e:	10 a2       	std	Z+32, r1	; 0x20
     a30:	11 a2       	std	Z+33, r1	; 0x21

const struct CITY_TIME_DIF CITIES [] {
	{"London", 0, "LOND"},{"New-York", -5, "NEYO"},{"Paris", 1, "PARI"},{ "Tokyo", 9, "TOKY"},
	{"Hongkong", 8, "HONG"},{"Los Angeles", -8, "LOSA"},{"Chicago", -6, "CHIC"},{"Seoul", 9, "SEOU"},
	{ "Bruessel",  1, "BRUE"},{"Washington",  -5, "WASH"},{"Singapur", 8, "SING"},{"Sydney", 11, "SYDN"}
	};
     a32:	65 e6       	ldi	r22, 0x65	; 101
     a34:	71 e0       	ldi	r23, 0x01	; 1
     a36:	8d ec       	ldi	r24, 0xCD	; 205
     a38:	92 e0       	ldi	r25, 0x02	; 2
     a3a:	0e 94 c0 19 	call	0x3380	; 0x3380 <_ZN6StringC1EPKc>
     a3e:	cd ec       	ldi	r28, 0xCD	; 205
     a40:	d2 e0       	ldi	r29, 0x02	; 2
     a42:	1f 82       	std	Y+7, r1	; 0x07
     a44:	1e 82       	std	Y+6, r1	; 0x06
     a46:	6c e6       	ldi	r22, 0x6C	; 108
     a48:	71 e0       	ldi	r23, 0x01	; 1
     a4a:	85 ed       	ldi	r24, 0xD5	; 213
     a4c:	92 e0       	ldi	r25, 0x02	; 2
     a4e:	0e 94 c0 19 	call	0x3380	; 0x3380 <_ZN6StringC1EPKc>
     a52:	61 e7       	ldi	r22, 0x71	; 113
     a54:	71 e0       	ldi	r23, 0x01	; 1
     a56:	8b ed       	ldi	r24, 0xDB	; 219
     a58:	92 e0       	ldi	r25, 0x02	; 2
     a5a:	0e 94 c0 19 	call	0x3380	; 0x3380 <_ZN6StringC1EPKc>
     a5e:	8b ef       	ldi	r24, 0xFB	; 251
     a60:	e8 2e       	mov	r14, r24
     a62:	ff 24       	eor	r15, r15
     a64:	fa 94       	dec	r15
     a66:	fd 8a       	std	Y+21, r15	; 0x15
     a68:	ec 8a       	std	Y+20, r14	; 0x14
     a6a:	6a e7       	ldi	r22, 0x7A	; 122
     a6c:	71 e0       	ldi	r23, 0x01	; 1
     a6e:	83 ee       	ldi	r24, 0xE3	; 227
     a70:	92 e0       	ldi	r25, 0x02	; 2
     a72:	0e 94 c0 19 	call	0x3380	; 0x3380 <_ZN6StringC1EPKc>
     a76:	6f e7       	ldi	r22, 0x7F	; 127
     a78:	71 e0       	ldi	r23, 0x01	; 1
     a7a:	89 ee       	ldi	r24, 0xE9	; 233
     a7c:	92 e0       	ldi	r25, 0x02	; 2
     a7e:	0e 94 c0 19 	call	0x3380	; 0x3380 <_ZN6StringC1EPKc>
     a82:	cc 24       	eor	r12, r12
     a84:	c3 94       	inc	r12
     a86:	d1 2c       	mov	r13, r1
     a88:	db a2       	std	Y+35, r13	; 0x23
     a8a:	ca a2       	std	Y+34, r12	; 0x22
     a8c:	65 e8       	ldi	r22, 0x85	; 133
     a8e:	71 e0       	ldi	r23, 0x01	; 1
     a90:	81 ef       	ldi	r24, 0xF1	; 241
     a92:	92 e0       	ldi	r25, 0x02	; 2
     a94:	0e 94 c0 19 	call	0x3380	; 0x3380 <_ZN6StringC1EPKc>
     a98:	6a e8       	ldi	r22, 0x8A	; 138
     a9a:	71 e0       	ldi	r23, 0x01	; 1
     a9c:	87 ef       	ldi	r24, 0xF7	; 247
     a9e:	92 e0       	ldi	r25, 0x02	; 2
     aa0:	0e 94 c0 19 	call	0x3380	; 0x3380 <_ZN6StringC1EPKc>
     aa4:	29 e0       	ldi	r18, 0x09	; 9
     aa6:	a2 2e       	mov	r10, r18
     aa8:	b1 2c       	mov	r11, r1
     aaa:	b9 aa       	std	Y+49, r11	; 0x31
     aac:	a8 aa       	std	Y+48, r10	; 0x30
     aae:	60 e9       	ldi	r22, 0x90	; 144
     ab0:	71 e0       	ldi	r23, 0x01	; 1
     ab2:	8f ef       	ldi	r24, 0xFF	; 255
     ab4:	92 e0       	ldi	r25, 0x02	; 2
     ab6:	0e 94 c0 19 	call	0x3380	; 0x3380 <_ZN6StringC1EPKc>
     aba:	65 e9       	ldi	r22, 0x95	; 149
     abc:	71 e0       	ldi	r23, 0x01	; 1
     abe:	85 e0       	ldi	r24, 0x05	; 5
     ac0:	93 e0       	ldi	r25, 0x03	; 3
     ac2:	0e 94 c0 19 	call	0x3380	; 0x3380 <_ZN6StringC1EPKc>
     ac6:	08 e0       	ldi	r16, 0x08	; 8
     ac8:	10 e0       	ldi	r17, 0x00	; 0
     aca:	1f af       	std	Y+63, r17	; 0x3f
     acc:	0e af       	std	Y+62, r16	; 0x3e
     ace:	6e e9       	ldi	r22, 0x9E	; 158
     ad0:	71 e0       	ldi	r23, 0x01	; 1
     ad2:	8d e0       	ldi	r24, 0x0D	; 13
     ad4:	93 e0       	ldi	r25, 0x03	; 3
     ad6:	0e 94 c0 19 	call	0x3380	; 0x3380 <_ZN6StringC1EPKc>
     ada:	63 ea       	ldi	r22, 0xA3	; 163
     adc:	71 e0       	ldi	r23, 0x01	; 1
     ade:	83 e1       	ldi	r24, 0x13	; 19
     ae0:	93 e0       	ldi	r25, 0x03	; 3
     ae2:	0e 94 c0 19 	call	0x3380	; 0x3380 <_ZN6StringC1EPKc>
     ae6:	88 ef       	ldi	r24, 0xF8	; 248
     ae8:	9f ef       	ldi	r25, 0xFF	; 255
     aea:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <_ZL6CITIES+0x4d>
     aee:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <_ZL6CITIES+0x4c>
     af2:	6f ea       	ldi	r22, 0xAF	; 175
     af4:	71 e0       	ldi	r23, 0x01	; 1
     af6:	8b e1       	ldi	r24, 0x1B	; 27
     af8:	93 e0       	ldi	r25, 0x03	; 3
     afa:	0e 94 c0 19 	call	0x3380	; 0x3380 <_ZN6StringC1EPKc>
     afe:	64 eb       	ldi	r22, 0xB4	; 180
     b00:	71 e0       	ldi	r23, 0x01	; 1
     b02:	81 e2       	ldi	r24, 0x21	; 33
     b04:	93 e0       	ldi	r25, 0x03	; 3
     b06:	0e 94 c0 19 	call	0x3380	; 0x3380 <_ZN6StringC1EPKc>
     b0a:	8a ef       	ldi	r24, 0xFA	; 250
     b0c:	9f ef       	ldi	r25, 0xFF	; 255
     b0e:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <_ZL6CITIES+0x5b>
     b12:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <_ZL6CITIES+0x5a>
     b16:	6c eb       	ldi	r22, 0xBC	; 188
     b18:	71 e0       	ldi	r23, 0x01	; 1
     b1a:	89 e2       	ldi	r24, 0x29	; 41
     b1c:	93 e0       	ldi	r25, 0x03	; 3
     b1e:	0e 94 c0 19 	call	0x3380	; 0x3380 <_ZN6StringC1EPKc>
     b22:	61 ec       	ldi	r22, 0xC1	; 193
     b24:	71 e0       	ldi	r23, 0x01	; 1
     b26:	8f e2       	ldi	r24, 0x2F	; 47
     b28:	93 e0       	ldi	r25, 0x03	; 3
     b2a:	0e 94 c0 19 	call	0x3380	; 0x3380 <_ZN6StringC1EPKc>
     b2e:	b0 92 36 03 	sts	0x0336, r11	; 0x800336 <_ZL6CITIES+0x69>
     b32:	a0 92 35 03 	sts	0x0335, r10	; 0x800335 <_ZL6CITIES+0x68>
     b36:	67 ec       	ldi	r22, 0xC7	; 199
     b38:	71 e0       	ldi	r23, 0x01	; 1
     b3a:	87 e3       	ldi	r24, 0x37	; 55
     b3c:	93 e0       	ldi	r25, 0x03	; 3
     b3e:	0e 94 c0 19 	call	0x3380	; 0x3380 <_ZN6StringC1EPKc>
     b42:	6c ec       	ldi	r22, 0xCC	; 204
     b44:	71 e0       	ldi	r23, 0x01	; 1
     b46:	8d e3       	ldi	r24, 0x3D	; 61
     b48:	93 e0       	ldi	r25, 0x03	; 3
     b4a:	0e 94 c0 19 	call	0x3380	; 0x3380 <_ZN6StringC1EPKc>
     b4e:	d0 92 44 03 	sts	0x0344, r13	; 0x800344 <_ZL6CITIES+0x77>
     b52:	c0 92 43 03 	sts	0x0343, r12	; 0x800343 <_ZL6CITIES+0x76>
     b56:	65 ed       	ldi	r22, 0xD5	; 213
     b58:	71 e0       	ldi	r23, 0x01	; 1
     b5a:	85 e4       	ldi	r24, 0x45	; 69
     b5c:	93 e0       	ldi	r25, 0x03	; 3
     b5e:	0e 94 c0 19 	call	0x3380	; 0x3380 <_ZN6StringC1EPKc>
     b62:	6a ed       	ldi	r22, 0xDA	; 218
     b64:	71 e0       	ldi	r23, 0x01	; 1
     b66:	8b e4       	ldi	r24, 0x4B	; 75
     b68:	93 e0       	ldi	r25, 0x03	; 3
     b6a:	0e 94 c0 19 	call	0x3380	; 0x3380 <_ZN6StringC1EPKc>
     b6e:	f0 92 52 03 	sts	0x0352, r15	; 0x800352 <_ZL6CITIES+0x85>
     b72:	e0 92 51 03 	sts	0x0351, r14	; 0x800351 <_ZL6CITIES+0x84>
     b76:	65 ee       	ldi	r22, 0xE5	; 229
     b78:	71 e0       	ldi	r23, 0x01	; 1
     b7a:	83 e5       	ldi	r24, 0x53	; 83
     b7c:	93 e0       	ldi	r25, 0x03	; 3
     b7e:	0e 94 c0 19 	call	0x3380	; 0x3380 <_ZN6StringC1EPKc>
     b82:	6a ee       	ldi	r22, 0xEA	; 234
     b84:	71 e0       	ldi	r23, 0x01	; 1
     b86:	89 e5       	ldi	r24, 0x59	; 89
     b88:	93 e0       	ldi	r25, 0x03	; 3
     b8a:	0e 94 c0 19 	call	0x3380	; 0x3380 <_ZN6StringC1EPKc>
     b8e:	10 93 60 03 	sts	0x0360, r17	; 0x800360 <_ZL6CITIES+0x93>
     b92:	00 93 5f 03 	sts	0x035F, r16	; 0x80035f <_ZL6CITIES+0x92>
     b96:	63 ef       	ldi	r22, 0xF3	; 243
     b98:	71 e0       	ldi	r23, 0x01	; 1
     b9a:	81 e6       	ldi	r24, 0x61	; 97
     b9c:	93 e0       	ldi	r25, 0x03	; 3
     b9e:	0e 94 c0 19 	call	0x3380	; 0x3380 <_ZN6StringC1EPKc>
     ba2:	68 ef       	ldi	r22, 0xF8	; 248
     ba4:	71 e0       	ldi	r23, 0x01	; 1
     ba6:	87 e6       	ldi	r24, 0x67	; 103
     ba8:	93 e0       	ldi	r25, 0x03	; 3
     baa:	0e 94 c0 19 	call	0x3380	; 0x3380 <_ZN6StringC1EPKc>
     bae:	8b e0       	ldi	r24, 0x0B	; 11
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	90 93 6e 03 	sts	0x036E, r25	; 0x80036e <_ZL6CITIES+0xa1>
     bb6:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <_ZL6CITIES+0xa0>
     bba:	6f ef       	ldi	r22, 0xFF	; 255
     bbc:	71 e0       	ldi	r23, 0x01	; 1
     bbe:	8f e6       	ldi	r24, 0x6F	; 111
     bc0:	93 e0       	ldi	r25, 0x03	; 3
     bc2:	0e 94 c0 19 	call	0x3380	; 0x3380 <_ZN6StringC1EPKc>
	int hh_;
	int mm_;
	int ss_;
	int set_;
public:
	Zeit(int h, int m, int s){ hh_=h; mm_=m; ss_=s; set_ =0;};
     bc6:	ee eb       	ldi	r30, 0xBE	; 190
     bc8:	f2 e0       	ldi	r31, 0x02	; 2
     bca:	85 e1       	ldi	r24, 0x15	; 21
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	91 83       	std	Z+1, r25	; 0x01
     bd0:	80 83       	st	Z, r24
     bd2:	8f e1       	ldi	r24, 0x1F	; 31
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	93 83       	std	Z+3, r25	; 0x03
     bd8:	82 83       	std	Z+2, r24	; 0x02
     bda:	15 82       	std	Z+5, r1	; 0x05
     bdc:	14 82       	std	Z+4, r1	; 0x04
     bde:	17 82       	std	Z+7, r1	; 0x07
     be0:	16 82       	std	Z+6, r1	; 0x06
     be2:	e6 eb       	ldi	r30, 0xB6	; 182
     be4:	f2 e0       	ldi	r31, 0x02	; 2
     be6:	2c e0       	ldi	r18, 0x0C	; 12
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	31 83       	std	Z+1, r19	; 0x01
     bec:	20 83       	st	Z, r18
     bee:	13 82       	std	Z+3, r1	; 0x03
     bf0:	12 82       	std	Z+2, r1	; 0x02
     bf2:	15 82       	std	Z+5, r1	; 0x05
     bf4:	14 82       	std	Z+4, r1	; 0x04
     bf6:	17 82       	std	Z+7, r1	; 0x07
     bf8:	16 82       	std	Z+6, r1	; 0x06
     bfa:	ee ea       	ldi	r30, 0xAE	; 174
     bfc:	f2 e0       	ldi	r31, 0x02	; 2
     bfe:	26 e1       	ldi	r18, 0x16	; 22
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	31 83       	std	Z+1, r19	; 0x01
     c04:	20 83       	st	Z, r18
     c06:	93 83       	std	Z+3, r25	; 0x03
     c08:	82 83       	std	Z+2, r24	; 0x02
     c0a:	15 82       	std	Z+5, r1	; 0x05
     c0c:	14 82       	std	Z+4, r1	; 0x04
     c0e:	17 82       	std	Z+7, r1	; 0x07
     c10:	16 82       	std	Z+6, r1	; 0x06
		menu = newmenu;
		lcd.setCursor(0, 0);
		lcd.print(ROM(watchmenu[menu].text1));
	}
	} //else Klammer
}
     c12:	df 91       	pop	r29
     c14:	cf 91       	pop	r28
     c16:	1f 91       	pop	r17
     c18:	0f 91       	pop	r16
     c1a:	ff 90       	pop	r15
     c1c:	ef 90       	pop	r14
     c1e:	df 90       	pop	r13
     c20:	cf 90       	pop	r12
     c22:	bf 90       	pop	r11
     c24:	af 90       	pop	r10
     c26:	08 95       	ret

00000c28 <_GLOBAL__sub_D_lcd>:
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	c5 e7       	ldi	r28, 0x75	; 117
     c2e:	d3 e0       	ldi	r29, 0x03	; 3
	String name;
	int timediff;
	String initials;
};

const struct CITY_TIME_DIF CITIES [] {
     c30:	2e 97       	sbiw	r28, 0x0e	; 14
#include "Romeo_keys.h"

hd44780_I2Cexp lcd;

//Strukt um Städte und deren Zweitverschiebung zu GMT (London)
struct CITY_TIME_DIF {
     c32:	ce 01       	movw	r24, r28
     c34:	08 96       	adiw	r24, 0x08	; 8
     c36:	0e 94 52 19 	call	0x32a4	; 0x32a4 <_ZN6StringD1Ev>
     c3a:	ce 01       	movw	r24, r28
     c3c:	0e 94 52 19 	call	0x32a4	; 0x32a4 <_ZN6StringD1Ev>
	String name;
	int timediff;
	String initials;
};

const struct CITY_TIME_DIF CITIES [] {
     c40:	82 e0       	ldi	r24, 0x02	; 2
     c42:	cd 3c       	cpi	r28, 0xCD	; 205
     c44:	d8 07       	cpc	r29, r24
     c46:	a1 f7       	brne	.-24     	; 0xc30 <_GLOBAL__sub_D_lcd+0x8>
		menu = newmenu;
		lcd.setCursor(0, 0);
		lcd.print(ROM(watchmenu[menu].text1));
	}
	} //else Klammer
}
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	08 95       	ret

00000c4e <_ZN14hd44780_I2Cexp14iosetBacklightEh>:
}

// iosetBacklight()  - set backlight brightness
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	fc 01       	movw	r30, r24
{
	if(!_bl) // backlight control?
     c54:	81 a5       	ldd	r24, Z+41	; 0x29
     c56:	88 23       	and	r24, r24
     c58:	71 f1       	breq	.+92     	; 0xcb6 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x68>
     c5a:	92 a5       	ldd	r25, Z+42	; 0x2a
		return(hd44780::RV_ENOTSUP); // not backlight control support

	// dimvalue 0 is backlight off any other dimvalue is backlight on
	// configure backlight state mask according to active level
	if(((dimvalue) && (_blLevel == HIGH)) || 
     c5c:	66 23       	and	r22, r22
     c5e:	19 f0       	breq	.+6      	; 0xc66 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x18>
     c60:	91 30       	cpi	r25, 0x01	; 1
     c62:	29 f4       	brne	.+10     	; 0xc6e <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x1c>
			((dimvalue == 0) && (_blLevel == LOW)))
     c66:	91 11       	cpse	r25, r1
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
	{
		_blCurState = _bl;
     c6a:	83 a7       	std	Z+43, r24	; 0x2b
     c6c:	01 c0       	rjmp	.+2      	; 0xc70 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x22>
	}
	else 
	{
		_blCurState = 0;
     c6e:	13 a6       	std	Z+43, r1	; 0x2b
     c70:	ef 01       	movw	r28, r30
	}
	Wire.beginTransmission(_addr);
     c72:	60 a1       	ldd	r22, Z+32	; 0x20
     c74:	80 e1       	ldi	r24, 0x10	; 16
     c76:	94 e0       	ldi	r25, 0x04	; 4
     c78:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
     c7c:	89 a1       	ldd	r24, Y+33	; 0x21
     c7e:	82 30       	cpi	r24, 0x02	; 2
     c80:	31 f4       	brne	.+12     	; 0xc8e <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x40>
	{
		Wire.write(9); // point to GPIO
     c82:	69 e0       	ldi	r22, 0x09	; 9
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	80 e1       	ldi	r24, 0x10	; 16
     c88:	94 e0       	ldi	r25, 0x04	; 4
     c8a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN7TwoWire5writeEi>
	}
	Wire.write( _blCurState );
     c8e:	6b a5       	ldd	r22, Y+43	; 0x2b
     c90:	80 e1       	ldi	r24, 0x10	; 16
     c92:	94 e0       	ldi	r25, 0x04	; 4
     c94:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     c98:	80 e1       	ldi	r24, 0x10	; 16
     c9a:	94 e0       	ldi	r25, 0x04	; 4
     c9c:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>
     ca0:	21 e0       	ldi	r18, 0x01	; 1
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	81 11       	cpse	r24, r1
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x5e>
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	88 27       	eor	r24, r24
     cae:	99 27       	eor	r25, r25
     cb0:	82 1b       	sub	r24, r18
     cb2:	93 0b       	sbc	r25, r19
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x6c>
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
{
	if(!_bl) // backlight control?
		return(hd44780::RV_ENOTSUP); // not backlight control support
     cb6:	8d ef       	ldi	r24, 0xFD	; 253
     cb8:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write( _blCurState );
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR); // all is good
}
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	08 95       	ret

00000cc0 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>:
	return(0);
}


// write4bits - send a nibble to the LCD through i/o expander port
void write4bits(uint8_t value, hd44780::iotype type ) 
     cc0:	cf 93       	push	r28
     cc2:	fc 01       	movw	r30, r24
{
uint8_t gpioValue =  _blCurState;
     cc4:	c3 a5       	ldd	r28, Z+43	; 0x2b
   
	// convert the value to an i/o expander port value
	// based on pin mappings
	if(value & (1 << 0))
     cc6:	60 ff       	sbrs	r22, 0
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0xe>
		gpioValue |= _d4;
     cca:	85 a1       	ldd	r24, Z+37	; 0x25
     ccc:	c8 2b       	or	r28, r24

	if(value & (1 << 1))
     cce:	61 ff       	sbrs	r22, 1
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x16>
		gpioValue |= _d5;
     cd2:	86 a1       	ldd	r24, Z+38	; 0x26
     cd4:	c8 2b       	or	r28, r24

	if(value & (1 << 2))
     cd6:	62 ff       	sbrs	r22, 2
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x1e>
		gpioValue |= _d6;
     cda:	87 a1       	ldd	r24, Z+39	; 0x27
     cdc:	c8 2b       	or	r28, r24

	if(value & (1 << 3))
     cde:	63 ff       	sbrs	r22, 3
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x26>
		gpioValue |= _d7;
     ce2:	80 a5       	ldd	r24, Z+40	; 0x28
     ce4:	c8 2b       	or	r28, r24


	if(type == hd44780::HD44780_IOdata) 
     ce6:	41 30       	cpi	r20, 0x01	; 1
     ce8:	11 f4       	brne	.+4      	; 0xcee <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x2e>
	{
		gpioValue |= _rs; // set RS high to send to data reg
     cea:	82 a1       	ldd	r24, Z+34	; 0x22
     cec:	c8 2b       	or	r28, r24
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
     cee:	64 a1       	ldd	r22, Z+36	; 0x24
     cf0:	6c 2b       	or	r22, r28
     cf2:	70 e0       	ldi	r23, 0x00	; 0
     cf4:	80 e1       	ldi	r24, 0x10	; 16
     cf6:	94 e0       	ldi	r25, 0x04	; 4
     cf8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN7TwoWire5writeEi>
	Wire.write(gpioValue);		// with E LOW
     cfc:	6c 2f       	mov	r22, r28
     cfe:	80 e1       	ldi	r24, 0x10	; 16
     d00:	94 e0       	ldi	r25, 0x04	; 4
}
     d02:	cf 91       	pop	r28
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
	Wire.write(gpioValue);		// with E LOW
     d04:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <_ZN7TwoWire5writeEh>

00000d08 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh>:
	return(rval);
}

// iowrite(type, value) - send either command or data byte to lcd
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
     d08:	8f 92       	push	r8
     d0a:	9f 92       	push	r9
     d0c:	af 92       	push	r10
     d0e:	bf 92       	push	r11
     d10:	cf 92       	push	r12
     d12:	df 92       	push	r13
     d14:	ef 92       	push	r14
     d16:	ff 92       	push	r15
     d18:	0f 93       	push	r16
     d1a:	1f 93       	push	r17
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	ec 01       	movw	r28, r24
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
     d22:	88 a1       	ldd	r24, Y+32	; 0x20
     d24:	88 23       	and	r24, r24
     d26:	09 f4       	brne	.+2      	; 0xd2a <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x22>
     d28:	50 c0       	rjmp	.+160    	; 0xdca <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
     d2a:	89 a1       	ldd	r24, Y+33	; 0x21
     d2c:	88 23       	and	r24, r24
     d2e:	09 f4       	brne	.+2      	; 0xd32 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x2a>
     d30:	4c c0       	rjmp	.+152    	; 0xdca <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
     d32:	14 2f       	mov	r17, r20
     d34:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
     d36:	8c 8c       	ldd	r8, Y+28	; 0x1c
     d38:	9d 8c       	ldd	r9, Y+29	; 0x1d
     d3a:	ae 8c       	ldd	r10, Y+30	; 0x1e
     d3c:	bf 8c       	ldd	r11, Y+31	; 0x1f
     d3e:	c8 8c       	ldd	r12, Y+24	; 0x18
     d40:	d9 8c       	ldd	r13, Y+25	; 0x19
     d42:	ea 8c       	ldd	r14, Y+26	; 0x1a
     d44:	fb 8c       	ldd	r15, Y+27	; 0x1b
     d46:	8d e2       	ldi	r24, 0x2D	; 45
     d48:	c8 1a       	sub	r12, r24
     d4a:	d1 08       	sbc	r13, r1
     d4c:	e1 08       	sbc	r14, r1
     d4e:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
     d50:	0e 94 99 17 	call	0x2f32	; 0x2f32 <micros>
     d54:	dc 01       	movw	r26, r24
     d56:	cb 01       	movw	r24, r22
     d58:	8c 19       	sub	r24, r12
     d5a:	9d 09       	sbc	r25, r13
     d5c:	ae 09       	sbc	r26, r14
     d5e:	bf 09       	sbc	r27, r15
     d60:	88 15       	cp	r24, r8
     d62:	99 05       	cpc	r25, r9
     d64:	aa 05       	cpc	r26, r10
     d66:	bb 05       	cpc	r27, r11
     d68:	98 f3       	brcs	.-26     	; 0xd50 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x48>
	 */

	waitReady(-45);
   
	// grab i2c bus
	Wire.beginTransmission(_addr);
     d6a:	68 a1       	ldd	r22, Y+32	; 0x20
     d6c:	80 e1       	ldi	r24, 0x10	; 16
     d6e:	94 e0       	ldi	r25, 0x04	; 4
     d70:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
     d74:	89 a1       	ldd	r24, Y+33	; 0x21
     d76:	82 30       	cpi	r24, 0x02	; 2
     d78:	31 f4       	brne	.+12     	; 0xd86 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x7e>
	{
		Wire.write(9); // point to GPIO
     d7a:	69 e0       	ldi	r22, 0x09	; 9
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	80 e1       	ldi	r24, 0x10	; 16
     d80:	94 e0       	ldi	r25, 0x04	; 4
     d82:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN7TwoWire5writeEi>
	}
	// send both nibbles in same i2c connection
	write4bits( (value >> 4), type );  // send upper nibble
     d86:	61 2f       	mov	r22, r17
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	84 e0       	ldi	r24, 0x04	; 4
     d8c:	75 95       	asr	r23
     d8e:	67 95       	ror	r22
     d90:	8a 95       	dec	r24
     d92:	e1 f7       	brne	.-8      	; 0xd8c <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x84>
     d94:	40 2f       	mov	r20, r16
     d96:	ce 01       	movw	r24, r28
     d98:	0e 94 60 06 	call	0xcc0	; 0xcc0 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	 * are used to reliably get the LCD and host in nibble sync
	 * with each other and to get the LCD into 4 bit mode.
	 * When sending a "4 bit command" only the upper nibble of
	 * of the 8 bit byte will presented on LCD signals D4-D7.
	 */
	if(type != hd44780::HD44780_IOcmd4bit)
     d9c:	02 30       	cpi	r16, 0x02	; 2
     d9e:	31 f0       	breq	.+12     	; 0xdac <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xa4>
	{
		write4bits( (value & 0x0F), type); // lower nibble, if not 4bit cmd
     da0:	61 2f       	mov	r22, r17
     da2:	6f 70       	andi	r22, 0x0F	; 15
     da4:	40 2f       	mov	r20, r16
     da6:	ce 01       	movw	r24, r28
     da8:	0e 94 60 06 	call	0xcc0	; 0xcc0 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	}
	if(Wire.endTransmission())
     dac:	80 e1       	ldi	r24, 0x10	; 16
     dae:	94 e0       	ldi	r25, 0x04	; 4
     db0:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>
     db4:	21 e0       	ldi	r18, 0x01	; 1
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	81 11       	cpse	r24, r1
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xb8>
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	88 27       	eor	r24, r24
     dc2:	99 27       	eor	r25, r25
     dc4:	82 1b       	sub	r24, r18
     dc6:	93 0b       	sbc	r25, r19
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc6>
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
     dca:	8c ef       	ldi	r24, 0xFC	; 252
     dcc:	9f ef       	ldi	r25, 0xFF	; 255
	}
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR);
}
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	ff 90       	pop	r15
     dd8:	ef 90       	pop	r14
     dda:	df 90       	pop	r13
     ddc:	cf 90       	pop	r12
     dde:	bf 90       	pop	r11
     de0:	af 90       	pop	r10
     de2:	9f 90       	pop	r9
     de4:	8f 90       	pop	r8
     de6:	08 95       	ret

00000de8 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE>:
// ioread(type) - read a byte from LCD DDRAM
//
// returns:
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
     de8:	8f 92       	push	r8
     dea:	9f 92       	push	r9
     dec:	af 92       	push	r10
     dee:	bf 92       	push	r11
     df0:	cf 92       	push	r12
     df2:	df 92       	push	r13
     df4:	ef 92       	push	r14
     df6:	ff 92       	push	r15
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
     e00:	ec 01       	movw	r28, r24
{
uint8_t gpioValue =  _blCurState;
     e02:	1b a5       	ldd	r17, Y+43	; 0x2b
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
     e04:	88 a1       	ldd	r24, Y+32	; 0x20
     e06:	88 23       	and	r24, r24
     e08:	09 f4       	brne	.+2      	; 0xe0c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x24>
     e0a:	f6 c0       	rjmp	.+492    	; 0xff8 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
     e0c:	89 a1       	ldd	r24, Y+33	; 0x21
     e0e:	88 23       	and	r24, r24
     e10:	09 f4       	brne	.+2      	; 0xe14 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x2c>
     e12:	f2 c0       	rjmp	.+484    	; 0xff8 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
		return(hd44780::RV_ENXIO);

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
     e14:	82 30       	cpi	r24, 0x02	; 2
     e16:	09 f4       	brne	.+2      	; 0xe1a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x32>
     e18:	f1 c0       	rjmp	.+482    	; 0xffc <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
	{
		return(hd44780::RV_ENOTSUP);
	}

	// check if reads supported
	if(!_rw)
     e1a:	8b a1       	ldd	r24, Y+35	; 0x23
     e1c:	88 23       	and	r24, r24
     e1e:	09 f4       	brne	.+2      	; 0xe22 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x3a>
     e20:	ed c0       	rjmp	.+474    	; 0xffc <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
     e22:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
     e24:	8c 8c       	ldd	r8, Y+28	; 0x1c
     e26:	9d 8c       	ldd	r9, Y+29	; 0x1d
     e28:	ae 8c       	ldd	r10, Y+30	; 0x1e
     e2a:	bf 8c       	ldd	r11, Y+31	; 0x1f
     e2c:	c8 8c       	ldd	r12, Y+24	; 0x18
     e2e:	d9 8c       	ldd	r13, Y+25	; 0x19
     e30:	ea 8c       	ldd	r14, Y+26	; 0x1a
     e32:	fb 8c       	ldd	r15, Y+27	; 0x1b
     e34:	8d e2       	ldi	r24, 0x2D	; 45
     e36:	c8 1a       	sub	r12, r24
     e38:	d1 08       	sbc	r13, r1
     e3a:	e1 08       	sbc	r14, r1
     e3c:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
     e3e:	0e 94 99 17 	call	0x2f32	; 0x2f32 <micros>
     e42:	dc 01       	movw	r26, r24
     e44:	cb 01       	movw	r24, r22
     e46:	8c 19       	sub	r24, r12
     e48:	9d 09       	sbc	r25, r13
     e4a:	ae 09       	sbc	r26, r14
     e4c:	bf 09       	sbc	r27, r15
     e4e:	88 15       	cp	r24, r8
     e50:	99 05       	cpc	r25, r9
     e52:	aa 05       	cpc	r26, r10
     e54:	bb 05       	cpc	r27, r11
     e56:	98 f3       	brcs	.-26     	; 0xe3e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x56>
     e58:	8d a1       	ldd	r24, Y+37	; 0x25
     e5a:	18 2b       	or	r17, r24
     e5c:	8e a1       	ldd	r24, Y+38	; 0x26
     e5e:	18 2b       	or	r17, r24
     e60:	8f a1       	ldd	r24, Y+39	; 0x27
     e62:	18 2b       	or	r17, r24
   
	// put all the expander LCD data pins into input mode.
	// PCF8574 psuedo inputs use pullups so setting them to 1
	// makes them suitible for inputs.

	gpioValue |= _d4|_d5|_d6|_d7;
     e64:	88 a5       	ldd	r24, Y+40	; 0x28
     e66:	18 2b       	or	r17, r24

	// set RS based on type of read (data or status/cmd)
	if(type == hd44780::HD44780_IOdata) 
     e68:	01 30       	cpi	r16, 0x01	; 1
     e6a:	11 f4       	brne	.+4      	; 0xe70 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x88>
	{
		gpioValue |= _rs; // RS high to read data reg
     e6c:	8a a1       	ldd	r24, Y+34	; 0x22
     e6e:	18 2b       	or	r17, r24
	}

	gpioValue |= _rw; // r/w high for reading
     e70:	8b a1       	ldd	r24, Y+35	; 0x23
     e72:	18 2b       	or	r17, r24

	// write all the bits to the expander port
	
	Wire.beginTransmission(_addr);
     e74:	68 a1       	ldd	r22, Y+32	; 0x20
     e76:	80 e1       	ldi	r24, 0x10	; 16
     e78:	94 e0       	ldi	r25, 0x04	; 4
     e7a:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue);		// d4-d7 are inputs, RS, r/w high, E LOW
     e7e:	61 2f       	mov	r22, r17
     e80:	80 e1       	ldi	r24, 0x10	; 16
     e82:	94 e0       	ldi	r25, 0x04	; 4
     e84:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     e88:	80 e1       	ldi	r24, 0x10	; 16
     e8a:	94 e0       	ldi	r25, 0x04	; 4
     e8c:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>
     e90:	88 23       	and	r24, r24
     e92:	19 f0       	breq	.+6      	; 0xe9a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xb2>
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;
     e94:	0f ef       	ldi	r16, 0xFF	; 255
     e96:	1f ef       	ldi	r17, 0xFF	; 255
     e98:	9d c0       	rjmp	.+314    	; 0xfd4 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ec>
	if(Wire.endTransmission())
		goto returnStatus;


	// raise E to read the data.
	Wire.beginTransmission(_addr);
     e9a:	68 a1       	ldd	r22, Y+32	; 0x20
     e9c:	80 e1       	ldi	r24, 0x10	; 16
     e9e:	94 e0       	ldi	r25, 0x04	; 4
     ea0:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raises E 
     ea4:	6c a1       	ldd	r22, Y+36	; 0x24
     ea6:	61 2b       	or	r22, r17
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	80 e1       	ldi	r24, 0x10	; 16
     eac:	94 e0       	ldi	r25, 0x04	; 4
     eae:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
     eb2:	80 e1       	ldi	r24, 0x10	; 16
     eb4:	94 e0       	ldi	r25, 0x04	; 4
     eb6:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>
     eba:	81 11       	cpse	r24, r1
     ebc:	eb cf       	rjmp	.-42     	; 0xe94 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// read the expander port to get the upper nibble of the byte
	Wire.requestFrom((int)_addr, 1);
     ebe:	68 a1       	ldd	r22, Y+32	; 0x20
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	41 e0       	ldi	r20, 0x01	; 1
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	80 e1       	ldi	r24, 0x10	; 16
     ec8:	94 e0       	ldi	r25, 0x04	; 4
     eca:	0e 94 76 0f 	call	0x1eec	; 0x1eec <_ZN7TwoWire11requestFromEii>
	iodata = Wire.read();
     ece:	80 e1       	ldi	r24, 0x10	; 16
     ed0:	94 e0       	ldi	r25, 0x04	; 4
     ed2:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_ZN7TwoWire4readEv>
     ed6:	7c 01       	movw	r14, r24
	if(iodata < 0) // did we not receive a byte?
     ed8:	97 fd       	sbrc	r25, 7
     eda:	dc cf       	rjmp	.-72     	; 0xe94 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
     edc:	68 a1       	ldd	r22, Y+32	; 0x20
     ede:	80 e1       	ldi	r24, 0x10	; 16
     ee0:	94 e0       	ldi	r25, 0x04	; 4
     ee2:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
     ee6:	61 2f       	mov	r22, r17
     ee8:	80 e1       	ldi	r24, 0x10	; 16
     eea:	94 e0       	ldi	r25, 0x04	; 4
     eec:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     ef0:	80 e1       	ldi	r24, 0x10	; 16
     ef2:	94 e0       	ldi	r25, 0x04	; 4
     ef4:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>
     ef8:	81 11       	cpse	r24, r1
     efa:	cc cf       	rjmp	.-104    	; 0xe94 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
     efc:	8d a1       	ldd	r24, Y+37	; 0x25
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	8e 21       	and	r24, r14
     f02:	9f 21       	and	r25, r15
     f04:	89 2b       	or	r24, r25
     f06:	11 f4       	brne	.+4      	; 0xf0c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x124>
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
     f08:	00 e0       	ldi	r16, 0x00	; 0
     f0a:	01 c0       	rjmp	.+2      	; 0xf0e <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x126>
	if(Wire.endTransmission())
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
		data |= (1 << 4);
     f0c:	00 e1       	ldi	r16, 0x10	; 16

	if(iodata & _d5)
     f0e:	8e a1       	ldd	r24, Y+38	; 0x26
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	8e 21       	and	r24, r14
     f14:	9f 21       	and	r25, r15
     f16:	89 2b       	or	r24, r25
     f18:	09 f0       	breq	.+2      	; 0xf1c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x134>
		data |= (1 << 5);
     f1a:	00 62       	ori	r16, 0x20	; 32

	if(iodata & _d6)
     f1c:	8f a1       	ldd	r24, Y+39	; 0x27
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	8e 21       	and	r24, r14
     f22:	9f 21       	and	r25, r15
     f24:	89 2b       	or	r24, r25
     f26:	09 f0       	breq	.+2      	; 0xf2a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x142>
		data |= (1 << 6);
     f28:	00 64       	ori	r16, 0x40	; 64

	if(iodata & _d7)
     f2a:	88 a5       	ldd	r24, Y+40	; 0x28
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	e8 22       	and	r14, r24
     f30:	f9 22       	and	r15, r25
     f32:	ef 28       	or	r14, r15
     f34:	09 f0       	breq	.+2      	; 0xf38 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x150>
		data |= (1 << 7);
     f36:	00 68       	ori	r16, 0x80	; 128
	
	Wire.beginTransmission(_addr);
     f38:	68 a1       	ldd	r22, Y+32	; 0x20
     f3a:	80 e1       	ldi	r24, 0x10	; 16
     f3c:	94 e0       	ldi	r25, 0x04	; 4
     f3e:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raise E to read next nibble
     f42:	6c a1       	ldd	r22, Y+36	; 0x24
     f44:	61 2b       	or	r22, r17
     f46:	70 e0       	ldi	r23, 0x00	; 0
     f48:	80 e1       	ldi	r24, 0x10	; 16
     f4a:	94 e0       	ldi	r25, 0x04	; 4
     f4c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
     f50:	80 e1       	ldi	r24, 0x10	; 16
     f52:	94 e0       	ldi	r25, 0x04	; 4
     f54:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>
     f58:	81 11       	cpse	r24, r1
     f5a:	9c cf       	rjmp	.-200    	; 0xe94 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>

	// read the expander port to get the lower nibble of the byte
	// We can't look at the return value from requestFrom() on the TineyWireM
	// library as it doesn't work like it is supposed to.
	// So we look at the return status from read() instead.
	Wire.requestFrom((int)_addr, 1);
     f5c:	68 a1       	ldd	r22, Y+32	; 0x20
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	41 e0       	ldi	r20, 0x01	; 1
     f62:	50 e0       	ldi	r21, 0x00	; 0
     f64:	80 e1       	ldi	r24, 0x10	; 16
     f66:	94 e0       	ldi	r25, 0x04	; 4
     f68:	0e 94 76 0f 	call	0x1eec	; 0x1eec <_ZN7TwoWire11requestFromEii>

	iodata = Wire.read();
     f6c:	80 e1       	ldi	r24, 0x10	; 16
     f6e:	94 e0       	ldi	r25, 0x04	; 4
     f70:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_ZN7TwoWire4readEv>
     f74:	7c 01       	movw	r14, r24

	if(iodata < 0) // did we not receive a byte?
     f76:	97 fd       	sbrc	r25, 7
     f78:	8d cf       	rjmp	.-230    	; 0xe94 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
     f7a:	68 a1       	ldd	r22, Y+32	; 0x20
     f7c:	80 e1       	ldi	r24, 0x10	; 16
     f7e:	94 e0       	ldi	r25, 0x04	; 4
     f80:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
     f84:	61 2f       	mov	r22, r17
     f86:	80 e1       	ldi	r24, 0x10	; 16
     f88:	94 e0       	ldi	r25, 0x04	; 4
     f8a:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     f8e:	80 e1       	ldi	r24, 0x10	; 16
     f90:	94 e0       	ldi	r25, 0x04	; 4
     f92:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>
     f96:	81 11       	cpse	r24, r1
     f98:	7d cf       	rjmp	.-262    	; 0xe94 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into lower nibble of byte
	if(iodata & _d4)
     f9a:	8d a1       	ldd	r24, Y+37	; 0x25
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	8e 21       	and	r24, r14
     fa0:	9f 21       	and	r25, r15
     fa2:	89 2b       	or	r24, r25
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1c0>
		data |= (1 << 0);
     fa6:	01 60       	ori	r16, 0x01	; 1

	if(iodata & _d5)
     fa8:	8e a1       	ldd	r24, Y+38	; 0x26
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	8e 21       	and	r24, r14
     fae:	9f 21       	and	r25, r15
     fb0:	89 2b       	or	r24, r25
     fb2:	09 f0       	breq	.+2      	; 0xfb6 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ce>
		data |= (1 << 1);
     fb4:	02 60       	ori	r16, 0x02	; 2

	if(iodata & _d6)
     fb6:	8f a1       	ldd	r24, Y+39	; 0x27
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	8e 21       	and	r24, r14
     fbc:	9f 21       	and	r25, r15
     fbe:	89 2b       	or	r24, r25
     fc0:	09 f0       	breq	.+2      	; 0xfc4 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1dc>
		data |= (1 << 2);
     fc2:	04 60       	ori	r16, 0x04	; 4

	if(iodata & _d7)
     fc4:	88 a5       	ldd	r24, Y+40	; 0x28
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	e8 22       	and	r14, r24
     fca:	f9 22       	and	r15, r25
     fcc:	ef 28       	or	r14, r15
     fce:	09 f0       	breq	.+2      	; 0xfd2 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ea>
		data |= (1 << 3);
     fd0:	08 60       	ori	r16, 0x08	; 8

	rval = data;
     fd2:	10 e0       	ldi	r17, 0x00	; 0

returnStatus:

	// try to put gpio port back to all outputs state with WR signal low for writes
	Wire.beginTransmission(_addr);
     fd4:	68 a1       	ldd	r22, Y+32	; 0x20
     fd6:	80 e1       	ldi	r24, 0x10	; 16
     fd8:	94 e0       	ldi	r25, 0x04	; 4
     fda:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(_blCurState);		// with E LOW
     fde:	6b a5       	ldd	r22, Y+43	; 0x2b
     fe0:	80 e1       	ldi	r24, 0x10	; 16
     fe2:	94 e0       	ldi	r25, 0x04	; 4
     fe4:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     fe8:	80 e1       	ldi	r24, 0x10	; 16
     fea:	94 e0       	ldi	r25, 0x04	; 4
     fec:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>
     ff0:	88 23       	and	r24, r24
     ff2:	39 f0       	breq	.+14     	; 0x1002 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21a>
		rval = hd44780::RV_EIO;
     ff4:	8f ef       	ldi	r24, 0xFF	; 255
     ff6:	03 c0       	rjmp	.+6      	; 0xffe <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
     ff8:	8c ef       	ldi	r24, 0xFC	; 252
     ffa:	01 c0       	rjmp	.+2      	; 0xffe <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
	{
		return(hd44780::RV_ENOTSUP);
     ffc:	8d ef       	ldi	r24, 0xFD	; 253
     ffe:	9f ef       	ldi	r25, 0xFF	; 255
    1000:	01 c0       	rjmp	.+2      	; 0x1004 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21c>
    1002:	c8 01       	movw	r24, r16
	Wire.write(_blCurState);		// with E LOW
	if(Wire.endTransmission())
		rval = hd44780::RV_EIO;

	return(rval);
}
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	ff 90       	pop	r15
    100e:	ef 90       	pop	r14
    1010:	df 90       	pop	r13
    1012:	cf 90       	pop	r12
    1014:	bf 90       	pop	r11
    1016:	af 90       	pop	r10
    1018:	9f 90       	pop	r9
    101a:	8f 90       	pop	r8
    101c:	08 95       	ret

0000101e <_ZN14hd44780_I2Cexp11autocfg8574Ev>:
 * a new resistor to  connect to the base of the transistor.
 * 
 * As a result the SYDZ backpack cannot use autoconfiguration.
 */

int autocfg8574()
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	ec 01       	movw	r28, r24
uint8_t data, data2;
uint8_t rs, rw, en, d4, d5, d6, d7, bl, blLevel;

	// First put a 0xff in the output port

	Wire.beginTransmission(_addr);
    1028:	68 a1       	ldd	r22, Y+32	; 0x20
    102a:	80 e1       	ldi	r24, 0x10	; 16
    102c:	94 e0       	ldi	r25, 0x04	; 4
    102e:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0xff);
    1032:	6f ef       	ldi	r22, 0xFF	; 255
    1034:	80 e1       	ldi	r24, 0x10	; 16
    1036:	94 e0       	ldi	r25, 0x04	; 4
    1038:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    103c:	80 e1       	ldi	r24, 0x10	; 16
    103e:	94 e0       	ldi	r25, 0x04	; 4
    1040:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>

	// now read back from the port

	Wire.requestFrom((int)_addr, 1);
    1044:	68 a1       	ldd	r22, Y+32	; 0x20
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	41 e0       	ldi	r20, 0x01	; 1
    104a:	50 e0       	ldi	r21, 0x00	; 0
    104c:	80 e1       	ldi	r24, 0x10	; 16
    104e:	94 e0       	ldi	r25, 0x04	; 4
    1050:	0e 94 76 0f 	call	0x1eec	; 0x1eec <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    1054:	80 e1       	ldi	r24, 0x10	; 16
    1056:	94 e0       	ldi	r25, 0x04	; 4
    1058:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_ZN7TwoWire4readEv>
    105c:	8c 01       	movw	r16, r24

	// Turn off bit2 to attempt to see if en is bit 2,
	// if it is, it should change all lcd data bits to 1s
	
	Wire.beginTransmission(_addr);
    105e:	68 a1       	ldd	r22, Y+32	; 0x20
    1060:	80 e1       	ldi	r24, 0x10	; 16
    1062:	94 e0       	ldi	r25, 0x04	; 4
    1064:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) (~(1 << 2)) );
    1068:	6b ef       	ldi	r22, 0xFB	; 251
    106a:	80 e1       	ldi	r24, 0x10	; 16
    106c:	94 e0       	ldi	r25, 0x04	; 4
    106e:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    1072:	80 e1       	ldi	r24, 0x10	; 16
    1074:	94 e0       	ldi	r25, 0x04	; 4
    1076:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>

	// read back data
	Wire.requestFrom((int)_addr, 1);
    107a:	68 a1       	ldd	r22, Y+32	; 0x20
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	41 e0       	ldi	r20, 0x01	; 1
    1080:	50 e0       	ldi	r21, 0x00	; 0
    1082:	80 e1       	ldi	r24, 0x10	; 16
    1084:	94 e0       	ldi	r25, 0x04	; 4
    1086:	0e 94 76 0f 	call	0x1eec	; 0x1eec <_ZN7TwoWire11requestFromEii>
	data2 = Wire.read();
    108a:	80 e1       	ldi	r24, 0x10	; 16
    108c:	94 e0       	ldi	r25, 0x04	; 4
    108e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_ZN7TwoWire4readEv>

	// If lower 3 bits are high and all 4 upper bits are high after clearing bit 2
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
    1092:	98 01       	movw	r18, r16
    1094:	27 70       	andi	r18, 0x07	; 7
    1096:	33 27       	eor	r19, r19
    1098:	27 30       	cpi	r18, 0x07	; 7
    109a:	31 05       	cpc	r19, r1
    109c:	b1 f4       	brne	.+44     	; 0x10ca <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
    109e:	80 7f       	andi	r24, 0xF0	; 240
    10a0:	99 27       	eor	r25, r25
    10a2:	80 3f       	cpi	r24, 0xF0	; 240
    10a4:	91 05       	cpc	r25, r1
    10a6:	89 f4       	brne	.+34     	; 0x10ca <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
    10a8:	83 e0       	ldi	r24, 0x03	; 3
    10aa:	16 95       	lsr	r17
    10ac:	07 95       	ror	r16
    10ae:	8a 95       	dec	r24
    10b0:	e1 f7       	brne	.-8      	; 0x10aa <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x8c>
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	08 27       	eor	r16, r24
    10b6:	01 70       	andi	r16, 0x01	; 1
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
	{
		rs = 0; rw = 1; en = 2; d4 = 4; d5 = 5; d6 = 6; d7 = 7; bl = 3;
    10b8:	43 e0       	ldi	r20, 0x03	; 3
    10ba:	57 e0       	ldi	r21, 0x07	; 7
    10bc:	66 e0       	ldi	r22, 0x06	; 6
    10be:	75 e0       	ldi	r23, 0x05	; 5
    10c0:	e4 e0       	ldi	r30, 0x04	; 4
    10c2:	22 e0       	ldi	r18, 0x02	; 2
    10c4:	f1 e0       	ldi	r31, 0x01	; 1
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	34 c0       	rjmp	.+104    	; 0x1132 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x114>
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
		}
	}
	else if((data & 0x70) == 0x70)
    10ca:	c8 01       	movw	r24, r16
    10cc:	80 77       	andi	r24, 0x70	; 112
    10ce:	99 27       	eor	r25, r25
    10d0:	80 37       	cpi	r24, 0x70	; 112
    10d2:	91 05       	cpc	r25, r1
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xba>
    10d6:	68 c0       	rjmp	.+208    	; 0x11a8 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18a>
		// both use bit 7 for backlight control

		// Turn off the en bit which should change the data bits
		// bit 4 on the mjkdz is en so we try that bit
	
		Wire.beginTransmission(_addr);
    10d8:	68 a1       	ldd	r22, Y+32	; 0x20
    10da:	80 e1       	ldi	r24, 0x10	; 16
    10dc:	94 e0       	ldi	r25, 0x04	; 4
    10de:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t) (~(1 << 4)) );
    10e2:	6f ee       	ldi	r22, 0xEF	; 239
    10e4:	80 e1       	ldi	r24, 0x10	; 16
    10e6:	94 e0       	ldi	r25, 0x04	; 4
    10e8:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    10ec:	80 e1       	ldi	r24, 0x10	; 16
    10ee:	94 e0       	ldi	r25, 0x04	; 4
    10f0:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>

		// read back data
		Wire.requestFrom((int)_addr, 1);
    10f4:	68 a1       	ldd	r22, Y+32	; 0x20
    10f6:	70 e0       	ldi	r23, 0x00	; 0
    10f8:	41 e0       	ldi	r20, 0x01	; 1
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	80 e1       	ldi	r24, 0x10	; 16
    10fe:	94 e0       	ldi	r25, 0x04	; 4
    1100:	0e 94 76 0f 	call	0x1eec	; 0x1eec <_ZN7TwoWire11requestFromEii>
		data2 = Wire.read();
    1104:	80 e1       	ldi	r24, 0x10	; 16
    1106:	94 e0       	ldi	r25, 0x04	; 4
    1108:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_ZN7TwoWire4readEv>
		// look at data bits and see if they changed
		// if they changed to 0xf, then en was bit 4 and it is mjdkz
		// this will happen since when E is low the LCD is not
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
    110c:	8f 70       	andi	r24, 0x0F	; 15
    110e:	99 27       	eor	r25, r25
    1110:	0f 97       	sbiw	r24, 0x0f	; 15
    1112:	19 f0       	breq	.+6      	; 0x111a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xfc>
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
		}
		else
		{
			// electrofun LCDXIO
			rs = 4; rw = 5; en = 6; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
    1114:	26 e0       	ldi	r18, 0x06	; 6
    1116:	34 e0       	ldi	r19, 0x04	; 4
    1118:	02 c0       	rjmp	.+4      	; 0x111e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x100>
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
		{
			// mjkdz
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
    111a:	24 e0       	ldi	r18, 0x04	; 4
    111c:	36 e0       	ldi	r19, 0x06	; 6
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
    111e:	00 95       	com	r16
    1120:	00 1f       	adc	r16, r16
    1122:	00 27       	eor	r16, r16
    1124:	00 1f       	adc	r16, r16
    1126:	47 e0       	ldi	r20, 0x07	; 7
    1128:	53 e0       	ldi	r21, 0x03	; 3
    112a:	62 e0       	ldi	r22, 0x02	; 2
    112c:	71 e0       	ldi	r23, 0x01	; 1
    112e:	e0 e0       	ldi	r30, 0x00	; 0
    1130:	f5 e0       	ldi	r31, 0x05	; 5
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	dc 01       	movw	r26, r24
    1138:	01 c0       	rjmp	.+2      	; 0x113c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11e>
    113a:	aa 0f       	add	r26, r26
    113c:	3a 95       	dec	r19
    113e:	ea f7       	brpl	.-6      	; 0x113a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11c>
    1140:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
    1142:	dc 01       	movw	r26, r24
    1144:	01 c0       	rjmp	.+2      	; 0x1148 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x12a>
    1146:	aa 0f       	add	r26, r26
    1148:	fa 95       	dec	r31
    114a:	ea f7       	brpl	.-6      	; 0x1146 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x128>
    114c:	ab a3       	std	Y+35, r26	; 0x23
	else
		_rw = 0; // no r/w control

	_en = ( 1 << en );
    114e:	dc 01       	movw	r26, r24
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x138>
    1152:	aa 0f       	add	r26, r26
    1154:	bb 1f       	adc	r27, r27
    1156:	2a 95       	dec	r18
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x134>
    115a:	ac a3       	std	Y+36, r26	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
    115c:	9c 01       	movw	r18, r24
    115e:	01 c0       	rjmp	.+2      	; 0x1162 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x144>
    1160:	22 0f       	add	r18, r18
    1162:	ea 95       	dec	r30
    1164:	ea f7       	brpl	.-6      	; 0x1160 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x142>
    1166:	2d a3       	std	Y+37, r18	; 0x25
	_d5 = ( 1 << d5 );
    1168:	9c 01       	movw	r18, r24
    116a:	01 c0       	rjmp	.+2      	; 0x116e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x150>
    116c:	22 0f       	add	r18, r18
    116e:	7a 95       	dec	r23
    1170:	ea f7       	brpl	.-6      	; 0x116c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x14e>
    1172:	2e a3       	std	Y+38, r18	; 0x26
	_d6 = ( 1 << d6 );
    1174:	9c 01       	movw	r18, r24
    1176:	01 c0       	rjmp	.+2      	; 0x117a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15c>
    1178:	22 0f       	add	r18, r18
    117a:	6a 95       	dec	r22
    117c:	ea f7       	brpl	.-6      	; 0x1178 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15a>
    117e:	2f a3       	std	Y+39, r18	; 0x27
	_d7 = ( 1 << d7 );   
    1180:	9c 01       	movw	r18, r24
    1182:	01 c0       	rjmp	.+2      	; 0x1186 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x168>
    1184:	22 0f       	add	r18, r18
    1186:	5a 95       	dec	r21
    1188:	ea f7       	brpl	.-6      	; 0x1184 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x166>
    118a:	28 a7       	std	Y+40, r18	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
    118c:	01 c0       	rjmp	.+2      	; 0x1190 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x172>
    118e:	88 0f       	add	r24, r24
    1190:	4a 95       	dec	r20
    1192:	ea f7       	brpl	.-6      	; 0x118e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x170>
    1194:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
    1196:	0a a7       	std	Y+42, r16	; 0x2a
	// set default bl state to backlight on
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
    1198:	01 30       	cpi	r16, 0x01	; 1
    119a:	11 f4       	brne	.+4      	; 0x11a0 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x182>
		_blCurState = _bl;
    119c:	8b a7       	std	Y+43, r24	; 0x2b
    119e:	01 c0       	rjmp	.+2      	; 0x11a2 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x184>
	else
		_blCurState = 0;
    11a0:	1b a6       	std	Y+43, r1	; 0x2b
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18e>
		}
	}
	else
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
    11a8:	8d ef       	ldi	r24, 0xFD	; 253
    11aa:	9f ef       	ldi	r25, 0xFF	; 255
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	1f 91       	pop	r17
    11b2:	0f 91       	pop	r16
    11b4:	08 95       	ret

000011b6 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>:
 * if GP1 is low then the board is the BOARD_XXX board
 * The BOARD_XXX may not work as GP1 is used for D5 on WIDEHK and LCDPLUG
 *
 *
 */
int autocfgMCP23008()
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
    11ba:	ec 01       	movw	r28, r24

	/*
	 * Now set up output port
	 * Make no assumptions as to the state of IOCON BYTE mode
	 */
	Wire.beginTransmission(_addr);
    11bc:	68 a1       	ldd	r22, Y+32	; 0x20
    11be:	80 e1       	ldi	r24, 0x10	; 16
    11c0:	94 e0       	ldi	r25, 0x04	; 4
    11c2:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t)0); // point to IODIR
    11c6:	60 e0       	ldi	r22, 0x00	; 0
    11c8:	80 e1       	ldi	r24, 0x10	; 16
    11ca:	94 e0       	ldi	r25, 0x04	; 4
    11cc:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7TwoWire5writeEh>
	Wire.write(0xff); // all pins inputs
    11d0:	6f ef       	ldi	r22, 0xFF	; 255
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	80 e1       	ldi	r24, 0x10	; 16
    11d6:	94 e0       	ldi	r25, 0x04	; 4
    11d8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    11dc:	80 e1       	ldi	r24, 0x10	; 16
    11de:	94 e0       	ldi	r25, 0x04	; 4
    11e0:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>

	Wire.beginTransmission(_addr);
    11e4:	68 a1       	ldd	r22, Y+32	; 0x20
    11e6:	80 e1       	ldi	r24, 0x10	; 16
    11e8:	94 e0       	ldi	r25, 0x04	; 4
    11ea:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(6); // point to GPPU
    11ee:	66 e0       	ldi	r22, 0x06	; 6
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	80 e1       	ldi	r24, 0x10	; 16
    11f4:	94 e0       	ldi	r25, 0x04	; 4
    11f6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN7TwoWire5writeEi>
	Wire.write(0xff); // turn on pullups
    11fa:	6f ef       	ldi	r22, 0xFF	; 255
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	80 e1       	ldi	r24, 0x10	; 16
    1200:	94 e0       	ldi	r25, 0x04	; 4
    1202:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    1206:	80 e1       	ldi	r24, 0x10	; 16
    1208:	94 e0       	ldi	r25, 0x04	; 4
    120a:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>

	/*
	 * read from the GPIO port
	 */

	Wire.beginTransmission(_addr);
    120e:	68 a1       	ldd	r22, Y+32	; 0x20
    1210:	80 e1       	ldi	r24, 0x10	; 16
    1212:	94 e0       	ldi	r25, 0x04	; 4
    1214:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(9); // point to GPIO
    1218:	69 e0       	ldi	r22, 0x09	; 9
    121a:	70 e0       	ldi	r23, 0x00	; 0
    121c:	80 e1       	ldi	r24, 0x10	; 16
    121e:	94 e0       	ldi	r25, 0x04	; 4
    1220:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    1224:	80 e1       	ldi	r24, 0x10	; 16
    1226:	94 e0       	ldi	r25, 0x04	; 4
    1228:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom((int)_addr, 1);
    122c:	68 a1       	ldd	r22, Y+32	; 0x20
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	41 e0       	ldi	r20, 0x01	; 1
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	80 e1       	ldi	r24, 0x10	; 16
    1236:	94 e0       	ldi	r25, 0x04	; 4
    1238:	0e 94 76 0f 	call	0x1eec	; 0x1eec <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    123c:	80 e1       	ldi	r24, 0x10	; 16
    123e:	94 e0       	ldi	r25, 0x04	; 4
    1240:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_ZN7TwoWire4readEv>

	blLevel = HIGH; // known boards are active HIGH bl

	if(data == 0x7f) // bit 7 low, and other control and data lines high
    1244:	8f 37       	cpi	r24, 0x7F	; 127
    1246:	61 f0       	breq	.+24     	; 0x1260 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xaa>
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
    1248:	86 ff       	sbrs	r24, 6
    124a:	12 c0       	rjmp	.+36     	; 0x1270 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xba>
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
    124c:	81 fd       	sbrc	r24, 1
    124e:	4c c0       	rjmp	.+152    	; 0x12e8 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x132>
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
		bl = 1;
    1250:	21 e0       	ldi	r18, 0x01	; 1
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
    1252:	32 e0       	ldi	r19, 0x02	; 2
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
    1254:	43 e0       	ldi	r20, 0x03	; 3
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
    1256:	54 e0       	ldi	r21, 0x04	; 4
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
    1258:	65 e0       	ldi	r22, 0x05	; 5
	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
    125a:	76 e0       	ldi	r23, 0x06	; 6
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
    125c:	e7 e0       	ldi	r30, 0x07	; 7
    125e:	0f c0       	rjmp	.+30     	; 0x127e <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;
    1260:	27 e0       	ldi	r18, 0x07	; 7
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
    1262:	36 e0       	ldi	r19, 0x06	; 6
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
    1264:	45 e0       	ldi	r20, 0x05	; 5
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
    1266:	54 e0       	ldi	r21, 0x04	; 4
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
    1268:	63 e0       	ldi	r22, 0x03	; 3
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
    126a:	72 e0       	ldi	r23, 0x02	; 2

	if(data == 0x7f) // bit 7 low, and other control and data lines high
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
    126c:	e1 e0       	ldi	r30, 0x01	; 1
    126e:	07 c0       	rjmp	.+14     	; 0x127e <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;
    1270:	26 e0       	ldi	r18, 0x06	; 6
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
    1272:	33 e0       	ldi	r19, 0x03	; 3
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
    1274:	42 e0       	ldi	r20, 0x02	; 2
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
    1276:	51 e0       	ldi	r21, 0x01	; 1
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
    1278:	60 e0       	ldi	r22, 0x00	; 0
	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
    127a:	77 e0       	ldi	r23, 0x07	; 7
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
    127c:	e4 e0       	ldi	r30, 0x04	; 4
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	dc 01       	movw	r26, r24
    1284:	02 c0       	rjmp	.+4      	; 0x128a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd4>
    1286:	aa 0f       	add	r26, r26
    1288:	bb 1f       	adc	r27, r27
    128a:	ea 95       	dec	r30
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd0>
    128e:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
	else
		_rw = 0; // no r/w control
    1290:	1b a2       	std	Y+35, r1	; 0x23

	_en = ( 1 << en );
    1292:	fc 01       	movw	r30, r24
    1294:	01 c0       	rjmp	.+2      	; 0x1298 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe2>
    1296:	ee 0f       	add	r30, r30
    1298:	7a 95       	dec	r23
    129a:	ea f7       	brpl	.-6      	; 0x1296 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe0>
    129c:	ec a3       	std	Y+36, r30	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
    129e:	fc 01       	movw	r30, r24
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xf0>
    12a2:	ee 0f       	add	r30, r30
    12a4:	ff 1f       	adc	r31, r31
    12a6:	6a 95       	dec	r22
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xec>
    12aa:	ed a3       	std	Y+37, r30	; 0x25
	_d5 = ( 1 << d5 );
    12ac:	bc 01       	movw	r22, r24
    12ae:	01 c0       	rjmp	.+2      	; 0x12b2 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfc>
    12b0:	66 0f       	add	r22, r22
    12b2:	5a 95       	dec	r21
    12b4:	ea f7       	brpl	.-6      	; 0x12b0 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfa>
    12b6:	6e a3       	std	Y+38, r22	; 0x26
	_d6 = ( 1 << d6 );
    12b8:	bc 01       	movw	r22, r24
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x10a>
    12bc:	66 0f       	add	r22, r22
    12be:	77 1f       	adc	r23, r23
    12c0:	4a 95       	dec	r20
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x106>
    12c4:	6f a3       	std	Y+39, r22	; 0x27
	_d7 = ( 1 << d7 );   
    12c6:	ac 01       	movw	r20, r24
    12c8:	01 c0       	rjmp	.+2      	; 0x12cc <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x116>
    12ca:	44 0f       	add	r20, r20
    12cc:	3a 95       	dec	r19
    12ce:	ea f7       	brpl	.-6      	; 0x12ca <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x114>
    12d0:	48 a7       	std	Y+40, r20	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
    12d2:	01 c0       	rjmp	.+2      	; 0x12d6 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x120>
    12d4:	88 0f       	add	r24, r24
    12d6:	2a 95       	dec	r18
    12d8:	ea f7       	brpl	.-6      	; 0x12d4 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x11e>
    12da:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
    12dc:	91 e0       	ldi	r25, 0x01	; 1
    12de:	9a a7       	std	Y+42, r25	; 0x2a
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
		_blCurState = _bl;
    12e0:	8b a7       	std	Y+43, r24	; 0x2b
		// could not identify board
		return(hd44780::RV_ENOTSUP);
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x136>

	}
	else
	{
		// could not identify board
		return(hd44780::RV_ENOTSUP);
    12e8:	8d ef       	ldi	r24, 0xFD	; 253
    12ea:	9f ef       	ldi	r25, 0xFF	; 255
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	08 95       	ret

000012f2 <_ZN14hd44780_I2Cexp6ioinitEv>:
// Returns non zero if initialization failed.
//
// can't be used from constructors because not everything is initalized yet.
// (maybe interrupts or other library constructors)
// if Wire library is used in constructor, it will hang.
int ioinit()
    12f2:	1f 93       	push	r17
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	ec 01       	movw	r28, r24
	 * I believe that it is unreasonable to require the the user
	 * sketch code to do it, because all that should change between
	 * hd44780 i/o interfaces should be the constructor
	 * So we go ahead and call it here.
	 */
	Wire.begin();
    12fa:	80 e1       	ldi	r24, 0x10	; 16
    12fc:	94 e0       	ldi	r25, 0x04	; 4
    12fe:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <_ZN7TwoWire5beginEv>

	// auto locate i2c expander and magically detect pin mappings

	if(!_addr) // locate next instance
    1302:	68 a1       	ldd	r22, Y+32	; 0x20
    1304:	61 11       	cpse	r22, r1
    1306:	0a c0       	rjmp	.+20     	; 0x131c <_ZN14hd44780_I2Cexp6ioinitEv+0x2a>
	{
		_addr = LocateDevice(AutoInst++);
    1308:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    130c:	91 e0       	ldi	r25, 0x01	; 1
    130e:	98 0f       	add	r25, r24
    1310:	90 93 a1 03 	sts	0x03A1, r25	; 0x8003a1 <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    1314:	0e 94 a5 01 	call	0x34a	; 0x34a <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
    1318:	88 a3       	std	Y+32, r24	; 0x20
    131a:	0d c0       	rjmp	.+26     	; 0x1336 <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
	}
	else
	{
		// check to see if device at specified address is really there
		Wire.beginTransmission(_addr);
    131c:	80 e1       	ldi	r24, 0x10	; 16
    131e:	94 e0       	ldi	r25, 0x04	; 4
    1320:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN7TwoWire17beginTransmissionEh>
		if(Wire.endTransmission())
    1324:	80 e1       	ldi	r24, 0x10	; 16
    1326:	94 e0       	ldi	r25, 0x04	; 4
    1328:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>
    132c:	88 23       	and	r24, r24
    132e:	19 f0       	breq	.+6      	; 0x1336 <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
			return(hd44780::RV_ENXIO);
    1330:	8c ef       	ldi	r24, 0xFC	; 252
    1332:	9f ef       	ldi	r25, 0xFF	; 255
    1334:	a7 c0       	rjmp	.+334    	; 0x1484 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	}

	if(!_addr) // locate next instance
    1336:	88 a1       	ldd	r24, Y+32	; 0x20
    1338:	81 11       	cpse	r24, r1
    133a:	09 c0       	rjmp	.+18     	; 0x134e <_ZN14hd44780_I2Cexp6ioinitEv+0x5c>
		_addr = LocateDevice(AutoInst++);
    133c:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	98 0f       	add	r25, r24
    1344:	90 93 a1 03 	sts	0x03A1, r25	; 0x8003a1 <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    1348:	0e 94 a5 01 	call	0x34a	; 0x34a <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
    134c:	88 a3       	std	Y+32, r24	; 0x20

	if(!_addr) // if we couldn't locate it, return error
    134e:	18 a1       	ldd	r17, Y+32	; 0x20
    1350:	11 23       	and	r17, r17
    1352:	71 f3       	breq	.-36     	; 0x1330 <_ZN14hd44780_I2Cexp6ioinitEv+0x3e>
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
    1354:	89 a1       	ldd	r24, Y+33	; 0x21
    1356:	88 23       	and	r24, r24
    1358:	c1 f1       	breq	.+112    	; 0x13ca <_ZN14hd44780_I2Cexp6ioinitEv+0xd8>
			return(status);
	}

	// initialize IO expander chip

	Wire.beginTransmission(_addr);
    135a:	68 a1       	ldd	r22, Y+32	; 0x20
    135c:	80 e1       	ldi	r24, 0x10	; 16
    135e:	94 e0       	ldi	r25, 0x04	; 4
    1360:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN7TwoWire17beginTransmissionEh>

	if(_expType == I2Cexp_MCP23008)
    1364:	89 a1       	ldd	r24, Y+33	; 0x21
    1366:	82 30       	cpi	r24, 0x02	; 2
    1368:	09 f0       	breq	.+2      	; 0x136c <_ZN14hd44780_I2Cexp6ioinitEv+0x7a>
    136a:	76 c0       	rjmp	.+236    	; 0x1458 <_ZN14hd44780_I2Cexp6ioinitEv+0x166>
		 * within the same i2c connection by simply sending more bytes.
		 * This is necessary as the code uses back to back writes to perform
		 * the nibble updates as well as the toggling the enable signal.
		 * This methodology offers significant performance gains.
		 */
		Wire.write(5);	// point to IOCON
    136c:	65 e0       	ldi	r22, 0x05	; 5
    136e:	70 e0       	ldi	r23, 0x00	; 0
    1370:	80 e1       	ldi	r24, 0x10	; 16
    1372:	94 e0       	ldi	r25, 0x04	; 4
    1374:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN7TwoWire5writeEi>
		Wire.write(0x20);// disable sequential mode (enables BYTE mode)
    1378:	60 e2       	ldi	r22, 0x20	; 32
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	80 e1       	ldi	r24, 0x10	; 16
    137e:	94 e0       	ldi	r25, 0x04	; 4
    1380:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    1384:	80 e1       	ldi	r24, 0x10	; 16
    1386:	94 e0       	ldi	r25, 0x04	; 4
    1388:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>

		/*
		 * Now set up output port
		 */
		Wire.beginTransmission(_addr);
    138c:	68 a1       	ldd	r22, Y+32	; 0x20
    138e:	80 e1       	ldi	r24, 0x10	; 16
    1390:	94 e0       	ldi	r25, 0x04	; 4
    1392:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t)0); // point to IODIR
    1396:	60 e0       	ldi	r22, 0x00	; 0
    1398:	80 e1       	ldi	r24, 0x10	; 16
    139a:	94 e0       	ldi	r25, 0x04	; 4
    139c:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7TwoWire5writeEh>
		Wire.write((uint8_t)0); // all pins output
    13a0:	60 e0       	ldi	r22, 0x00	; 0
    13a2:	80 e1       	ldi	r24, 0x10	; 16
    13a4:	94 e0       	ldi	r25, 0x04	; 4
    13a6:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    13aa:	80 e1       	ldi	r24, 0x10	; 16
    13ac:	94 e0       	ldi	r25, 0x04	; 4
    13ae:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>
	
		/*
		 * point chip to GPIO
		 */
		Wire.beginTransmission(_addr);
    13b2:	68 a1       	ldd	r22, Y+32	; 0x20
    13b4:	80 e1       	ldi	r24, 0x10	; 16
    13b6:	94 e0       	ldi	r25, 0x04	; 4
    13b8:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN7TwoWire17beginTransmissionEh>
		Wire.write(9); // point to GPIO
    13bc:	69 e0       	ldi	r22, 0x09	; 9
    13be:	70 e0       	ldi	r23, 0x00	; 0
    13c0:	80 e1       	ldi	r24, 0x10	; 16
    13c2:	94 e0       	ldi	r25, 0x04	; 4
    13c4:	0e 94 e5 01 	call	0x3ca	; 0x3ca <_ZN7TwoWire5writeEi>
    13c8:	47 c0       	rjmp	.+142    	; 0x1458 <_ZN14hd44780_I2Cexp6ioinitEv+0x166>

	/*
	 * First try to write 0xff to MCP23008 IODIR
	 * On a PCF8574 this will end up writing 0 and then ff to output port
	 */
	Wire.beginTransmission(address);
    13ca:	61 2f       	mov	r22, r17
    13cc:	80 e1       	ldi	r24, 0x10	; 16
    13ce:	94 e0       	ldi	r25, 0x04	; 4
    13d0:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
    13d4:	60 e0       	ldi	r22, 0x00	; 0
    13d6:	80 e1       	ldi	r24, 0x10	; 16
    13d8:	94 e0       	ldi	r25, 0x04	; 4
    13da:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7TwoWire5writeEh>
	Wire.write((uint8_t) 0xff);	// try to write to MCP23008 IODR
    13de:	6f ef       	ldi	r22, 0xFF	; 255
    13e0:	80 e1       	ldi	r24, 0x10	; 16
    13e2:	94 e0       	ldi	r25, 0x04	; 4
    13e4:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    13e8:	80 e1       	ldi	r24, 0x10	; 16
    13ea:	94 e0       	ldi	r25, 0x04	; 4
    13ec:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now try to point MCP23008 to IODIR for read
	 * On a PCF8574 this will end up writing a 0 to the output port
	 */

	Wire.beginTransmission(address);
    13f0:	61 2f       	mov	r22, r17
    13f2:	80 e1       	ldi	r24, 0x10	; 16
    13f4:	94 e0       	ldi	r25, 0x04	; 4
    13f6:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
    13fa:	60 e0       	ldi	r22, 0x00	; 0
    13fc:	80 e1       	ldi	r24, 0x10	; 16
    13fe:	94 e0       	ldi	r25, 0x04	; 4
    1400:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    1404:	80 e1       	ldi	r24, 0x10	; 16
    1406:	94 e0       	ldi	r25, 0x04	; 4
    1408:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now read a byte
	 * On a MCP23008 we should read the 0xff we wrote to IODIR
	 * On a PCF8574 we should read 0 since the output port was set to 0
	 */
	Wire.requestFrom((int)address, 1);
    140c:	61 2f       	mov	r22, r17
    140e:	70 e0       	ldi	r23, 0x00	; 0
    1410:	41 e0       	ldi	r20, 0x01	; 1
    1412:	50 e0       	ldi	r21, 0x00	; 0
    1414:	80 e1       	ldi	r24, 0x10	; 16
    1416:	94 e0       	ldi	r25, 0x04	; 4
    1418:	0e 94 76 0f 	call	0x1eec	; 0x1eec <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    141c:	80 e1       	ldi	r24, 0x10	; 16
    141e:	94 e0       	ldi	r25, 0x04	; 4
    1420:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <_ZN7TwoWire4readEv>
    1424:	9c 01       	movw	r18, r24

	if(data == 0xff)
    1426:	8f 3f       	cpi	r24, 0xFF	; 255
    1428:	91 05       	cpc	r25, r1
    142a:	29 f0       	breq	.+10     	; 0x1436 <_ZN14hd44780_I2Cexp6ioinitEv+0x144>
	{
		chiptype = I2Cexp_MCP23008;
    142c:	91 e0       	ldi	r25, 0x01	; 1
    142e:	23 2b       	or	r18, r19
    1430:	19 f0       	breq	.+6      	; 0x1438 <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	01 c0       	rjmp	.+2      	; 0x1438 <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    1436:	92 e0       	ldi	r25, 0x02	; 2
	if(!_addr) // if we couldn't locate it, return error
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);
    1438:	99 a3       	std	Y+33, r25	; 0x21

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
    143a:	99 23       	and	r25, r25
    143c:	09 f1       	breq	.+66     	; 0x1480 <_ZN14hd44780_I2Cexp6ioinitEv+0x18e>
			return(hd44780::RV_EIO);

		if(_expType == I2Cexp_PCF8574)
    143e:	91 30       	cpi	r25, 0x01	; 1
    1440:	21 f4       	brne	.+8      	; 0x144a <_ZN14hd44780_I2Cexp6ioinitEv+0x158>
			status = autocfg8574();		// go auto configure the pin mappings
    1442:	ce 01       	movw	r24, r28
    1444:	0e 94 0f 08 	call	0x101e	; 0x101e <_ZN14hd44780_I2Cexp11autocfg8574Ev>
    1448:	03 c0       	rjmp	.+6      	; 0x1450 <_ZN14hd44780_I2Cexp6ioinitEv+0x15e>
		else
			status = autocfgMCP23008();	// go auto configure the pin mappings
    144a:	ce 01       	movw	r24, r28
    144c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>
		if(status)
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	09 f4       	brne	.+2      	; 0x1456 <_ZN14hd44780_I2Cexp6ioinitEv+0x164>
    1454:	82 cf       	rjmp	.-252    	; 0x135a <_ZN14hd44780_I2Cexp6ioinitEv+0x68>
    1456:	16 c0       	rjmp	.+44     	; 0x1484 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
		 */
		Wire.beginTransmission(_addr);
		Wire.write(9); // point to GPIO
		
	}
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
    1458:	60 e0       	ldi	r22, 0x00	; 0
    145a:	80 e1       	ldi	r24, 0x10	; 16
    145c:	94 e0       	ldi	r25, 0x04	; 4
    145e:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <_ZN7TwoWire5writeEh>
	if( (status = Wire.endTransmission()) ) // assignment
    1462:	80 e1       	ldi	r24, 0x10	; 16
    1464:	94 e0       	ldi	r25, 0x04	; 4
    1466:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <_ZN7TwoWire15endTransmissionEv>
    146a:	21 e0       	ldi	r18, 0x01	; 1
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	81 11       	cpse	r24, r1
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <_ZN14hd44780_I2Cexp6ioinitEv+0x184>
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	88 27       	eor	r24, r24
    1478:	99 27       	eor	r25, r25
    147a:	82 1b       	sub	r24, r18
    147c:	93 0b       	sbc	r25, r19
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
			return(hd44780::RV_EIO);
    1480:	8f ef       	ldi	r24, 0xFF	; 255
    1482:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
	if( (status = Wire.endTransmission()) ) // assignment
		status = hd44780::RV_EIO;

	return ( status );
}
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	1f 91       	pop	r17
    148a:	08 95       	ret

0000148c <_ZN7hd447806ioinitEv>:
	{
		buf[i] = pgm_read_byte(charmap++);
	}
	// call the RAM based function to actually send it to the LCD
	return(createChar(location, buf));
}
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	08 95       	ret

00001492 <_ZN7hd447806ioreadENS_6iotypeE>:
    1492:	8d ef       	ldi	r24, 0xFD	; 253
    1494:	9f ef       	ldi	r25, 0xFF	; 255
    1496:	08 95       	ret

00001498 <_ZN7hd4478014iosetBacklightEh>:
    1498:	8d ef       	ldi	r24, 0xFD	; 253
    149a:	9f ef       	ldi	r25, 0xFF	; 255
    149c:	08 95       	ret

0000149e <_ZN7hd44780C1Ev>:
    149e:	cf 93       	push	r28
    14a0:	df 93       	push	r29
    14a2:	ec 01       	movw	r28, r24
    14a4:	1b 82       	std	Y+3, r1	; 0x03
    14a6:	1a 82       	std	Y+2, r1	; 0x02
    14a8:	82 e4       	ldi	r24, 0x42	; 66
    14aa:	92 e0       	ldi	r25, 0x02	; 2
    14ac:	99 83       	std	Y+1, r25	; 0x01
    14ae:	88 83       	st	Y, r24
    14b0:	1f 82       	std	Y+7, r1	; 0x07
    14b2:	18 86       	std	Y+8, r1	; 0x08
    14b4:	80 ed       	ldi	r24, 0xD0	; 208
    14b6:	97 e0       	ldi	r25, 0x07	; 7
    14b8:	a0 e0       	ldi	r26, 0x00	; 0
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	88 8b       	std	Y+16, r24	; 0x10
    14be:	99 8b       	std	Y+17, r25	; 0x11
    14c0:	aa 8b       	std	Y+18, r26	; 0x12
    14c2:	bb 8b       	std	Y+19, r27	; 0x13
    14c4:	86 e2       	ldi	r24, 0x26	; 38
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	a0 e0       	ldi	r26, 0x00	; 0
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	8c 8b       	std	Y+20, r24	; 0x14
    14ce:	9d 8b       	std	Y+21, r25	; 0x15
    14d0:	ae 8b       	std	Y+22, r26	; 0x16
    14d2:	bf 8b       	std	Y+23, r27	; 0x17
    14d4:	1c 86       	std	Y+12, r1	; 0x0c
    14d6:	1d 86       	std	Y+13, r1	; 0x0d
    14d8:	1e 86       	std	Y+14, r1	; 0x0e
    14da:	1f 86       	std	Y+15, r1	; 0x0f
    14dc:	1b 86       	std	Y+11, r1	; 0x0b
    14de:	0e 94 99 17 	call	0x2f32	; 0x2f32 <micros>
    14e2:	68 8f       	std	Y+24, r22	; 0x18
    14e4:	79 8f       	std	Y+25, r23	; 0x19
    14e6:	8a 8f       	std	Y+26, r24	; 0x1a
    14e8:	9b 8f       	std	Y+27, r25	; 0x1b
    14ea:	1c 8e       	std	Y+28, r1	; 0x1c
    14ec:	1d 8e       	std	Y+29, r1	; 0x1d
    14ee:	1e 8e       	std	Y+30, r1	; 0x1e
    14f0:	1f 8e       	std	Y+31, r1	; 0x1f
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	08 95       	ret

000014f8 <_ZN7hd447809backlightEv>:
    14f8:	dc 01       	movw	r26, r24
    14fa:	ed 91       	ld	r30, X+
    14fc:	fc 91       	ld	r31, X
    14fe:	06 84       	ldd	r0, Z+14	; 0x0e
    1500:	f7 85       	ldd	r31, Z+15	; 0x0f
    1502:	e0 2d       	mov	r30, r0
    1504:	6f ef       	ldi	r22, 0xFF	; 255
    1506:	09 94       	ijmp

00001508 <_ZN7hd4478011noBacklightEv>:
    1508:	dc 01       	movw	r26, r24
    150a:	ed 91       	ld	r30, X+
    150c:	fc 91       	ld	r31, X
    150e:	06 84       	ldd	r0, Z+14	; 0x0e
    1510:	f7 85       	ldd	r31, Z+15	; 0x0f
    1512:	e0 2d       	mov	r30, r0
    1514:	60 e0       	ldi	r22, 0x00	; 0
    1516:	09 94       	ijmp

00001518 <_ZN7hd447807commandEh>:
    1518:	8f 92       	push	r8
    151a:	9f 92       	push	r9
    151c:	af 92       	push	r10
    151e:	bf 92       	push	r11
    1520:	ef 92       	push	r14
    1522:	ff 92       	push	r15
    1524:	1f 93       	push	r17
    1526:	cf 93       	push	r28
    1528:	df 93       	push	r29
    152a:	ec 01       	movw	r28, r24
    152c:	16 2f       	mov	r17, r22
    152e:	e8 81       	ld	r30, Y
    1530:	f9 81       	ldd	r31, Y+1	; 0x01
    1532:	04 84       	ldd	r0, Z+12	; 0x0c
    1534:	f5 85       	ldd	r31, Z+13	; 0x0d
    1536:	e0 2d       	mov	r30, r0
    1538:	46 2f       	mov	r20, r22
    153a:	60 e0       	ldi	r22, 0x00	; 0
    153c:	09 95       	icall
    153e:	7c 01       	movw	r14, r24
    1540:	11 50       	subi	r17, 0x01	; 1
    1542:	12 30       	cpi	r17, 0x02	; 2
    1544:	38 f4       	brcc	.+14     	; 0x1554 <_ZN7hd447807commandEh+0x3c>
    1546:	19 86       	std	Y+9, r1	; 0x09
    1548:	1a 86       	std	Y+10, r1	; 0x0a
    154a:	88 88       	ldd	r8, Y+16	; 0x10
    154c:	99 88       	ldd	r9, Y+17	; 0x11
    154e:	aa 88       	ldd	r10, Y+18	; 0x12
    1550:	bb 88       	ldd	r11, Y+19	; 0x13
    1552:	04 c0       	rjmp	.+8      	; 0x155c <_ZN7hd447807commandEh+0x44>
    1554:	8c 88       	ldd	r8, Y+20	; 0x14
    1556:	9d 88       	ldd	r9, Y+21	; 0x15
    1558:	ae 88       	ldd	r10, Y+22	; 0x16
    155a:	bf 88       	ldd	r11, Y+23	; 0x17
    155c:	0e 94 99 17 	call	0x2f32	; 0x2f32 <micros>
    1560:	68 8f       	std	Y+24, r22	; 0x18
    1562:	79 8f       	std	Y+25, r23	; 0x19
    1564:	8a 8f       	std	Y+26, r24	; 0x1a
    1566:	9b 8f       	std	Y+27, r25	; 0x1b
    1568:	8c 8e       	std	Y+28, r8	; 0x1c
    156a:	9d 8e       	std	Y+29, r9	; 0x1d
    156c:	ae 8e       	std	Y+30, r10	; 0x1e
    156e:	bf 8e       	std	Y+31, r11	; 0x1f
    1570:	c7 01       	movw	r24, r14
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	1f 91       	pop	r17
    1578:	ff 90       	pop	r15
    157a:	ef 90       	pop	r14
    157c:	bf 90       	pop	r11
    157e:	af 90       	pop	r10
    1580:	9f 90       	pop	r9
    1582:	8f 90       	pop	r8
    1584:	08 95       	ret

00001586 <_ZN7hd447805clearEv>:
    1586:	61 e0       	ldi	r22, 0x01	; 1
    1588:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <_ZN7hd447807commandEh>

0000158c <_ZN7hd447804homeEv>:
    158c:	62 e0       	ldi	r22, 0x02	; 2
    158e:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <_ZN7hd447807commandEh>

00001592 <_ZN7hd447809setCursorEhh>:
    1592:	fc 01       	movw	r30, r24
    1594:	80 85       	ldd	r24, Z+8	; 0x08
    1596:	48 17       	cp	r20, r24
    1598:	10 f0       	brcs	.+4      	; 0x159e <_ZN7hd447809setCursorEhh+0xc>
    159a:	4f ef       	ldi	r20, 0xFF	; 255
    159c:	48 0f       	add	r20, r24
    159e:	93 85       	ldd	r25, Z+11	; 0x0b
    15a0:	99 23       	and	r25, r25
    15a2:	59 f0       	breq	.+22     	; 0x15ba <_ZN7hd447809setCursorEhh+0x28>
    15a4:	97 81       	ldd	r25, Z+7	; 0x07
    15a6:	69 17       	cp	r22, r25
    15a8:	30 f0       	brcs	.+12     	; 0x15b6 <_ZN7hd447809setCursorEhh+0x24>
    15aa:	69 1b       	sub	r22, r25
    15ac:	4f 5f       	subi	r20, 0xFF	; 255
    15ae:	48 17       	cp	r20, r24
    15b0:	d0 f3       	brcs	.-12     	; 0x15a6 <_ZN7hd447809setCursorEhh+0x14>
    15b2:	40 e0       	ldi	r20, 0x00	; 0
    15b4:	f8 cf       	rjmp	.-16     	; 0x15a6 <_ZN7hd447809setCursorEhh+0x14>
    15b6:	61 87       	std	Z+9, r22	; 0x09
    15b8:	42 87       	std	Z+10, r20	; 0x0a
    15ba:	df 01       	movw	r26, r30
    15bc:	a4 0f       	add	r26, r20
    15be:	b1 1d       	adc	r27, r1
    15c0:	1c 96       	adiw	r26, 0x0c	; 12
    15c2:	8c 91       	ld	r24, X
    15c4:	68 0f       	add	r22, r24
    15c6:	60 68       	ori	r22, 0x80	; 128
    15c8:	cf 01       	movw	r24, r30
    15ca:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <_ZN7hd447807commandEh>

000015ce <_ZN7hd447807displayEv>:
    15ce:	fc 01       	movw	r30, r24
    15d0:	65 81       	ldd	r22, Z+5	; 0x05
    15d2:	26 2f       	mov	r18, r22
    15d4:	24 60       	ori	r18, 0x04	; 4
    15d6:	25 83       	std	Z+5, r18	; 0x05
    15d8:	6c 60       	ori	r22, 0x0C	; 12
    15da:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <_ZN7hd447807commandEh>

000015de <_ZN7hd447805beginEhhh>:
    15de:	0f 93       	push	r16
    15e0:	1f 93       	push	r17
    15e2:	cf 93       	push	r28
    15e4:	df 93       	push	r29
    15e6:	ec 01       	movw	r28, r24
    15e8:	02 2f       	mov	r16, r18
    15ea:	14 2f       	mov	r17, r20
    15ec:	45 30       	cpi	r20, 0x05	; 5
    15ee:	08 f0       	brcs	.+2      	; 0x15f2 <_ZN7hd447805beginEhhh+0x14>
    15f0:	14 e0       	ldi	r17, 0x04	; 4
    15f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    15f4:	81 11       	cpse	r24, r1
    15f6:	09 c0       	rjmp	.+18     	; 0x160a <_ZN7hd447805beginEhhh+0x2c>
    15f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15fa:	81 11       	cpse	r24, r1
    15fc:	06 c0       	rjmp	.+12     	; 0x160a <_ZN7hd447805beginEhhh+0x2c>
    15fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    1600:	81 11       	cpse	r24, r1
    1602:	03 c0       	rjmp	.+6      	; 0x160a <_ZN7hd447805beginEhhh+0x2c>
    1604:	8f 85       	ldd	r24, Y+15	; 0x0f
    1606:	88 23       	and	r24, r24
    1608:	29 f0       	breq	.+10     	; 0x1614 <_ZN7hd447805beginEhhh+0x36>
    160a:	8f 81       	ldd	r24, Y+7	; 0x07
    160c:	88 23       	and	r24, r24
    160e:	59 f0       	breq	.+22     	; 0x1626 <_ZN7hd447805beginEhhh+0x48>
    1610:	86 17       	cp	r24, r22
    1612:	49 f0       	breq	.+18     	; 0x1626 <_ZN7hd447805beginEhhh+0x48>
    1614:	1c 86       	std	Y+12, r1	; 0x0c
    1616:	80 e4       	ldi	r24, 0x40	; 64
    1618:	8d 87       	std	Y+13, r24	; 0x0d
    161a:	6e 87       	std	Y+14, r22	; 0x0e
    161c:	86 2f       	mov	r24, r22
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	80 5c       	subi	r24, 0xC0	; 192
    1622:	9f 4f       	sbci	r25, 0xFF	; 255
    1624:	8f 87       	std	Y+15, r24	; 0x0f
    1626:	18 87       	std	Y+8, r17	; 0x08
    1628:	6f 83       	std	Y+7, r22	; 0x07
    162a:	64 e6       	ldi	r22, 0x64	; 100
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <delay>
    1636:	1c 82       	std	Y+4, r1	; 0x04
    1638:	e8 81       	ld	r30, Y
    163a:	f9 81       	ldd	r31, Y+1	; 0x01
    163c:	00 84       	ldd	r0, Z+8	; 0x08
    163e:	f1 85       	ldd	r31, Z+9	; 0x09
    1640:	e0 2d       	mov	r30, r0
    1642:	ce 01       	movw	r24, r28
    1644:	09 95       	icall
    1646:	00 97       	sbiw	r24, 0x00	; 0
    1648:	09 f0       	breq	.+2      	; 0x164c <_ZN7hd447805beginEhhh+0x6e>
    164a:	5e c0       	rjmp	.+188    	; 0x1708 <_ZN7hd447805beginEhhh+0x12a>
    164c:	88 85       	ldd	r24, Y+8	; 0x08
    164e:	82 30       	cpi	r24, 0x02	; 2
    1650:	18 f0       	brcs	.+6      	; 0x1658 <_ZN7hd447805beginEhhh+0x7a>
    1652:	8c 81       	ldd	r24, Y+4	; 0x04
    1654:	88 60       	ori	r24, 0x08	; 8
    1656:	8c 83       	std	Y+4, r24	; 0x04
    1658:	00 23       	and	r16, r16
    165a:	29 f0       	breq	.+10     	; 0x1666 <_ZN7hd447805beginEhhh+0x88>
    165c:	11 30       	cpi	r17, 0x01	; 1
    165e:	19 f4       	brne	.+6      	; 0x1666 <_ZN7hd447805beginEhhh+0x88>
    1660:	8c 81       	ldd	r24, Y+4	; 0x04
    1662:	84 60       	ori	r24, 0x04	; 4
    1664:	8c 83       	std	Y+4, r24	; 0x04
    1666:	e8 81       	ld	r30, Y
    1668:	f9 81       	ldd	r31, Y+1	; 0x01
    166a:	04 84       	ldd	r0, Z+12	; 0x0c
    166c:	f5 85       	ldd	r31, Z+13	; 0x0d
    166e:	e0 2d       	mov	r30, r0
    1670:	40 e3       	ldi	r20, 0x30	; 48
    1672:	62 e0       	ldi	r22, 0x02	; 2
    1674:	ce 01       	movw	r24, r28
    1676:	09 95       	icall
    1678:	65 e0       	ldi	r22, 0x05	; 5
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <delay>
    1684:	e8 81       	ld	r30, Y
    1686:	f9 81       	ldd	r31, Y+1	; 0x01
    1688:	04 84       	ldd	r0, Z+12	; 0x0c
    168a:	f5 85       	ldd	r31, Z+13	; 0x0d
    168c:	e0 2d       	mov	r30, r0
    168e:	40 e3       	ldi	r20, 0x30	; 48
    1690:	62 e0       	ldi	r22, 0x02	; 2
    1692:	ce 01       	movw	r24, r28
    1694:	09 95       	icall
    1696:	61 e0       	ldi	r22, 0x01	; 1
    1698:	70 e0       	ldi	r23, 0x00	; 0
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <delay>
    16a2:	e8 81       	ld	r30, Y
    16a4:	f9 81       	ldd	r31, Y+1	; 0x01
    16a6:	04 84       	ldd	r0, Z+12	; 0x0c
    16a8:	f5 85       	ldd	r31, Z+13	; 0x0d
    16aa:	e0 2d       	mov	r30, r0
    16ac:	40 e3       	ldi	r20, 0x30	; 48
    16ae:	62 e0       	ldi	r22, 0x02	; 2
    16b0:	ce 01       	movw	r24, r28
    16b2:	09 95       	icall
    16b4:	61 e0       	ldi	r22, 0x01	; 1
    16b6:	70 e0       	ldi	r23, 0x00	; 0
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <delay>
    16c0:	8c 81       	ldd	r24, Y+4	; 0x04
    16c2:	84 fd       	sbrc	r24, 4
    16c4:	09 c0       	rjmp	.+18     	; 0x16d8 <_ZN7hd447805beginEhhh+0xfa>
    16c6:	e8 81       	ld	r30, Y
    16c8:	f9 81       	ldd	r31, Y+1	; 0x01
    16ca:	04 84       	ldd	r0, Z+12	; 0x0c
    16cc:	f5 85       	ldd	r31, Z+13	; 0x0d
    16ce:	e0 2d       	mov	r30, r0
    16d0:	40 e2       	ldi	r20, 0x20	; 32
    16d2:	62 e0       	ldi	r22, 0x02	; 2
    16d4:	ce 01       	movw	r24, r28
    16d6:	09 95       	icall
    16d8:	6c 81       	ldd	r22, Y+4	; 0x04
    16da:	60 62       	ori	r22, 0x20	; 32
    16dc:	ce 01       	movw	r24, r28
    16de:	0e 94 8c 0a 	call	0x1518	; 0x1518 <_ZN7hd447807commandEh>
    16e2:	84 e0       	ldi	r24, 0x04	; 4
    16e4:	8d 83       	std	Y+5, r24	; 0x05
    16e6:	ce 01       	movw	r24, r28
    16e8:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <_ZN7hd447807displayEv>
    16ec:	ce 01       	movw	r24, r28
    16ee:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN7hd447805clearEv>
    16f2:	82 e0       	ldi	r24, 0x02	; 2
    16f4:	8e 83       	std	Y+6, r24	; 0x06
    16f6:	66 e0       	ldi	r22, 0x06	; 6
    16f8:	ce 01       	movw	r24, r28
    16fa:	0e 94 8c 0a 	call	0x1518	; 0x1518 <_ZN7hd447807commandEh>
    16fe:	8c 01       	movw	r16, r24
    1700:	ce 01       	movw	r24, r28
    1702:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <_ZN7hd447809backlightEv>
    1706:	c8 01       	movw	r24, r16
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	1f 91       	pop	r17
    170e:	0f 91       	pop	r16
    1710:	08 95       	ret

00001712 <_ZN7hd447808noCursorEv>:
    1712:	fc 01       	movw	r30, r24
    1714:	65 81       	ldd	r22, Z+5	; 0x05
    1716:	6d 7f       	andi	r22, 0xFD	; 253
    1718:	65 83       	std	Z+5, r22	; 0x05
    171a:	68 60       	ori	r22, 0x08	; 8
    171c:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <_ZN7hd447807commandEh>

00001720 <_ZN7hd447807noBlinkEv>:
    1720:	fc 01       	movw	r30, r24
    1722:	65 81       	ldd	r22, Z+5	; 0x05
    1724:	6e 7f       	andi	r22, 0xFE	; 254
    1726:	65 83       	std	Z+5, r22	; 0x05
    1728:	68 60       	ori	r22, 0x08	; 8
    172a:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <_ZN7hd447807commandEh>

0000172e <_ZN7hd447806_writeEh>:
    172e:	cf 92       	push	r12
    1730:	df 92       	push	r13
    1732:	ef 92       	push	r14
    1734:	ff 92       	push	r15
    1736:	0f 93       	push	r16
    1738:	1f 93       	push	r17
    173a:	cf 93       	push	r28
    173c:	df 93       	push	r29
    173e:	ec 01       	movw	r28, r24
    1740:	46 2f       	mov	r20, r22
    1742:	e8 81       	ld	r30, Y
    1744:	f9 81       	ldd	r31, Y+1	; 0x01
    1746:	04 84       	ldd	r0, Z+12	; 0x0c
    1748:	f5 85       	ldd	r31, Z+13	; 0x0d
    174a:	e0 2d       	mov	r30, r0
    174c:	61 e0       	ldi	r22, 0x01	; 1
    174e:	09 95       	icall
    1750:	8c 01       	movw	r16, r24
    1752:	cc 88       	ldd	r12, Y+20	; 0x14
    1754:	dd 88       	ldd	r13, Y+21	; 0x15
    1756:	ee 88       	ldd	r14, Y+22	; 0x16
    1758:	ff 88       	ldd	r15, Y+23	; 0x17
    175a:	0e 94 99 17 	call	0x2f32	; 0x2f32 <micros>
    175e:	68 8f       	std	Y+24, r22	; 0x18
    1760:	79 8f       	std	Y+25, r23	; 0x19
    1762:	8a 8f       	std	Y+26, r24	; 0x1a
    1764:	9b 8f       	std	Y+27, r25	; 0x1b
    1766:	cc 8e       	std	Y+28, r12	; 0x1c
    1768:	dd 8e       	std	Y+29, r13	; 0x1d
    176a:	ee 8e       	std	Y+30, r14	; 0x1e
    176c:	ff 8e       	std	Y+31, r15	; 0x1f
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	01 2b       	or	r16, r17
    1774:	11 f0       	breq	.+4      	; 0x177a <_ZN7hd447806_writeEh+0x4c>
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	df 91       	pop	r29
    177c:	cf 91       	pop	r28
    177e:	1f 91       	pop	r17
    1780:	0f 91       	pop	r16
    1782:	ff 90       	pop	r15
    1784:	ef 90       	pop	r14
    1786:	df 90       	pop	r13
    1788:	cf 90       	pop	r12
    178a:	08 95       	ret

0000178c <_ZN7hd447805writeEh>:

// write() - process data character byte to lcd
// returns number of bytes successfully written to device
// i.e. 1 if success or 0 if no character was processed (error)
size_t hd44780::write(uint8_t value)
{
    178c:	0f 93       	push	r16
    178e:	1f 93       	push	r17
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    1794:	ec 01       	movw	r28, r24
size_t rval;

	rval = _write(value);
    1796:	0e 94 97 0b 	call	0x172e	; 0x172e <_ZN7hd447806_writeEh>
    179a:	8c 01       	movw	r16, r24
	if(_wraplines)
    179c:	8b 85       	ldd	r24, Y+11	; 0x0b
    179e:	88 23       	and	r24, r24
    17a0:	99 f0       	breq	.+38     	; 0x17c8 <_ZN7hd447805writeEh+0x3c>
	{
		// currently only works for left to right mode
		if(++_curcol >= _cols)
    17a2:	89 85       	ldd	r24, Y+9	; 0x09
    17a4:	8f 5f       	subi	r24, 0xFF	; 255
    17a6:	89 87       	std	Y+9, r24	; 0x09
    17a8:	9f 81       	ldd	r25, Y+7	; 0x07
    17aa:	89 17       	cp	r24, r25
    17ac:	68 f0       	brcs	.+26     	; 0x17c8 <_ZN7hd447805writeEh+0x3c>
		{
			_curcol = 0;
    17ae:	19 86       	std	Y+9, r1	; 0x09
			_currow++;
    17b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    17b2:	8f 5f       	subi	r24, 0xFF	; 255
    17b4:	8a 87       	std	Y+10, r24	; 0x0a
			if(_currow >= _rows)
    17b6:	98 85       	ldd	r25, Y+8	; 0x08
    17b8:	89 17       	cp	r24, r25
    17ba:	08 f0       	brcs	.+2      	; 0x17be <_ZN7hd447805writeEh+0x32>
				_currow = 0;
    17bc:	1a 86       	std	Y+10, r1	; 0x0a
			setCursor(_curcol, _currow);
    17be:	4a 85       	ldd	r20, Y+10	; 0x0a
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	ce 01       	movw	r24, r28
    17c4:	0e 94 c9 0a 	call	0x1592	; 0x1592 <_ZN7hd447809setCursorEhh>
		}
	}
	return (rval);
}
    17c8:	c8 01       	movw	r24, r16
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
    17ce:	1f 91       	pop	r17
    17d0:	0f 91       	pop	r16
    17d2:	08 95       	ret

000017d4 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    17d4:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <twi_state>
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <twi_sendStop>
    17de:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <twi_inRepStart>
    17e2:	61 e0       	ldi	r22, 0x01	; 1
    17e4:	82 e0       	ldi	r24, 0x02	; 2
    17e6:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <digitalWrite>
    17ea:	61 e0       	ldi	r22, 0x01	; 1
    17ec:	83 e0       	ldi	r24, 0x03	; 3
    17ee:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <digitalWrite>
    17f2:	e9 eb       	ldi	r30, 0xB9	; 185
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	8e 7f       	andi	r24, 0xFE	; 254
    17fa:	80 83       	st	Z, r24
    17fc:	80 81       	ld	r24, Z
    17fe:	8d 7f       	andi	r24, 0xFD	; 253
    1800:	80 83       	st	Z, r24
    1802:	88 e4       	ldi	r24, 0x48	; 72
    1804:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1808:	85 e4       	ldi	r24, 0x45	; 69
    180a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    180e:	08 95       	ret

00001810 <twi_readFrom>:
    1810:	41 32       	cpi	r20, 0x21	; 33
    1812:	08 f0       	brcs	.+2      	; 0x1816 <twi_readFrom+0x6>
    1814:	43 c0       	rjmp	.+134    	; 0x189c <twi_readFrom+0x8c>
    1816:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <twi_state>
    181a:	91 11       	cpse	r25, r1
    181c:	fc cf       	rjmp	.-8      	; 0x1816 <twi_readFrom+0x6>
    181e:	91 e0       	ldi	r25, 0x01	; 1
    1820:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <twi_state>
    1824:	20 93 0d 04 	sts	0x040D, r18	; 0x80040d <twi_sendStop>
    1828:	2f ef       	ldi	r18, 0xFF	; 255
    182a:	20 93 a2 03 	sts	0x03A2, r18	; 0x8003a2 <twi_error>
    182e:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <twi_masterBufferIndex>
    1832:	24 0f       	add	r18, r20
    1834:	20 93 e6 03 	sts	0x03E6, r18	; 0x8003e6 <twi_masterBufferLength>
    1838:	90 93 0e 04 	sts	0x040E, r25	; 0x80040e <twi_slarw>
    183c:	90 91 0e 04 	lds	r25, 0x040E	; 0x80040e <twi_slarw>
    1840:	88 0f       	add	r24, r24
    1842:	89 2b       	or	r24, r25
    1844:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <twi_slarw>
    1848:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <twi_inRepStart>
    184c:	81 30       	cpi	r24, 0x01	; 1
    184e:	61 f4       	brne	.+24     	; 0x1868 <twi_readFrom+0x58>
    1850:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <twi_inRepStart>
    1854:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <twi_slarw>
    1858:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    185c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1860:	83 fd       	sbrc	r24, 3
    1862:	f8 cf       	rjmp	.-16     	; 0x1854 <twi_readFrom+0x44>
    1864:	85 ec       	ldi	r24, 0xC5	; 197
    1866:	01 c0       	rjmp	.+2      	; 0x186a <twi_readFrom+0x5a>
    1868:	85 ee       	ldi	r24, 0xE5	; 229
    186a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    186e:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <twi_state>
    1872:	81 30       	cpi	r24, 0x01	; 1
    1874:	e1 f3       	breq	.-8      	; 0x186e <twi_readFrom+0x5e>
    1876:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <twi_masterBufferIndex>
    187a:	84 17       	cp	r24, r20
    187c:	10 f4       	brcc	.+4      	; 0x1882 <twi_readFrom+0x72>
    187e:	40 91 e7 03 	lds	r20, 0x03E7	; 0x8003e7 <twi_masterBufferIndex>
    1882:	a8 ee       	ldi	r26, 0xE8	; 232
    1884:	b3 e0       	ldi	r27, 0x03	; 3
    1886:	96 2f       	mov	r25, r22
    1888:	fb 01       	movw	r30, r22
    188a:	8e 2f       	mov	r24, r30
    188c:	89 1b       	sub	r24, r25
    188e:	84 17       	cp	r24, r20
    1890:	18 f4       	brcc	.+6      	; 0x1898 <twi_readFrom+0x88>
    1892:	8d 91       	ld	r24, X+
    1894:	81 93       	st	Z+, r24
    1896:	f9 cf       	rjmp	.-14     	; 0x188a <twi_readFrom+0x7a>
    1898:	84 2f       	mov	r24, r20
    189a:	08 95       	ret
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	08 95       	ret

000018a0 <twi_writeTo>:
    18a0:	0f 93       	push	r16
    18a2:	41 32       	cpi	r20, 0x21	; 33
    18a4:	08 f0       	brcs	.+2      	; 0x18a8 <twi_writeTo+0x8>
    18a6:	4a c0       	rjmp	.+148    	; 0x193c <twi_writeTo+0x9c>
    18a8:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <twi_state>
    18ac:	91 11       	cpse	r25, r1
    18ae:	fc cf       	rjmp	.-8      	; 0x18a8 <twi_writeTo+0x8>
    18b0:	32 e0       	ldi	r19, 0x02	; 2
    18b2:	30 93 0f 04 	sts	0x040F, r19	; 0x80040f <twi_state>
    18b6:	00 93 0d 04 	sts	0x040D, r16	; 0x80040d <twi_sendStop>
    18ba:	3f ef       	ldi	r19, 0xFF	; 255
    18bc:	30 93 a2 03 	sts	0x03A2, r19	; 0x8003a2 <twi_error>
    18c0:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <twi_masterBufferIndex>
    18c4:	40 93 e6 03 	sts	0x03E6, r20	; 0x8003e6 <twi_masterBufferLength>
    18c8:	56 2f       	mov	r21, r22
    18ca:	a8 ee       	ldi	r26, 0xE8	; 232
    18cc:	b3 e0       	ldi	r27, 0x03	; 3
    18ce:	fb 01       	movw	r30, r22
    18d0:	3e 2f       	mov	r19, r30
    18d2:	35 1b       	sub	r19, r21
    18d4:	34 17       	cp	r19, r20
    18d6:	18 f4       	brcc	.+6      	; 0x18de <twi_writeTo+0x3e>
    18d8:	31 91       	ld	r19, Z+
    18da:	3d 93       	st	X+, r19
    18dc:	f9 cf       	rjmp	.-14     	; 0x18d0 <twi_writeTo+0x30>
    18de:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <twi_slarw>
    18e2:	30 91 0e 04 	lds	r19, 0x040E	; 0x80040e <twi_slarw>
    18e6:	88 0f       	add	r24, r24
    18e8:	83 2b       	or	r24, r19
    18ea:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <twi_slarw>
    18ee:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <twi_inRepStart>
    18f2:	81 30       	cpi	r24, 0x01	; 1
    18f4:	61 f4       	brne	.+24     	; 0x190e <twi_writeTo+0x6e>
    18f6:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <twi_inRepStart>
    18fa:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <twi_slarw>
    18fe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1902:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1906:	83 fd       	sbrc	r24, 3
    1908:	f8 cf       	rjmp	.-16     	; 0x18fa <twi_writeTo+0x5a>
    190a:	85 ec       	ldi	r24, 0xC5	; 197
    190c:	01 c0       	rjmp	.+2      	; 0x1910 <twi_writeTo+0x70>
    190e:	85 ee       	ldi	r24, 0xE5	; 229
    1910:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1914:	22 23       	and	r18, r18
    1916:	21 f0       	breq	.+8      	; 0x1920 <twi_writeTo+0x80>
    1918:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <twi_state>
    191c:	82 30       	cpi	r24, 0x02	; 2
    191e:	d1 f3       	breq	.-12     	; 0x1914 <twi_writeTo+0x74>
    1920:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <twi_error>
    1924:	8f 3f       	cpi	r24, 0xFF	; 255
    1926:	79 f0       	breq	.+30     	; 0x1946 <twi_writeTo+0xa6>
    1928:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <twi_error>
    192c:	80 32       	cpi	r24, 0x20	; 32
    192e:	41 f0       	breq	.+16     	; 0x1940 <twi_writeTo+0xa0>
    1930:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <twi_error>
    1934:	80 33       	cpi	r24, 0x30	; 48
    1936:	31 f0       	breq	.+12     	; 0x1944 <twi_writeTo+0xa4>
    1938:	94 e0       	ldi	r25, 0x04	; 4
    193a:	05 c0       	rjmp	.+10     	; 0x1946 <twi_writeTo+0xa6>
    193c:	91 e0       	ldi	r25, 0x01	; 1
    193e:	03 c0       	rjmp	.+6      	; 0x1946 <twi_writeTo+0xa6>
    1940:	92 e0       	ldi	r25, 0x02	; 2
    1942:	01 c0       	rjmp	.+2      	; 0x1946 <twi_writeTo+0xa6>
    1944:	93 e0       	ldi	r25, 0x03	; 3
    1946:	89 2f       	mov	r24, r25
    1948:	0f 91       	pop	r16
    194a:	08 95       	ret

0000194c <twi_transmit>:
    194c:	40 91 c4 03 	lds	r20, 0x03C4	; 0x8003c4 <twi_txBufferLength>
    1950:	26 2f       	mov	r18, r22
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	24 0f       	add	r18, r20
    1956:	31 1d       	adc	r19, r1
    1958:	21 32       	cpi	r18, 0x21	; 33
    195a:	31 05       	cpc	r19, r1
    195c:	dc f4       	brge	.+54     	; 0x1994 <twi_transmit+0x48>
    195e:	20 91 0f 04 	lds	r18, 0x040F	; 0x80040f <twi_state>
    1962:	24 30       	cpi	r18, 0x04	; 4
    1964:	c9 f4       	brne	.+50     	; 0x1998 <twi_transmit+0x4c>
    1966:	fc 01       	movw	r30, r24
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	86 17       	cp	r24, r22
    196e:	58 f4       	brcc	.+22     	; 0x1986 <twi_transmit+0x3a>
    1970:	30 91 c4 03 	lds	r19, 0x03C4	; 0x8003c4 <twi_txBufferLength>
    1974:	21 91       	ld	r18, Z+
    1976:	dc 01       	movw	r26, r24
    1978:	aa 53       	subi	r26, 0x3A	; 58
    197a:	bc 4f       	sbci	r27, 0xFC	; 252
    197c:	a3 0f       	add	r26, r19
    197e:	b1 1d       	adc	r27, r1
    1980:	2c 93       	st	X, r18
    1982:	01 96       	adiw	r24, 0x01	; 1
    1984:	f3 cf       	rjmp	.-26     	; 0x196c <twi_transmit+0x20>
    1986:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <twi_txBufferLength>
    198a:	68 0f       	add	r22, r24
    198c:	60 93 c4 03 	sts	0x03C4, r22	; 0x8003c4 <twi_txBufferLength>
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	08 95       	ret
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	08 95       	ret
    1998:	82 e0       	ldi	r24, 0x02	; 2
    199a:	08 95       	ret

0000199c <twi_attachSlaveRxEvent>:
    199c:	90 93 09 04 	sts	0x0409, r25	; 0x800409 <twi_onSlaveReceive+0x1>
    19a0:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <twi_onSlaveReceive>
    19a4:	08 95       	ret

000019a6 <twi_attachSlaveTxEvent>:
    19a6:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <twi_onSlaveTransmit+0x1>
    19aa:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <twi_onSlaveTransmit>
    19ae:	08 95       	ret

000019b0 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    19b0:	85 ed       	ldi	r24, 0xD5	; 213
    19b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    19b6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    19ba:	84 fd       	sbrc	r24, 4
    19bc:	fc cf       	rjmp	.-8      	; 0x19b6 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    19be:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <twi_state>
    19c2:	08 95       	ret

000019c4 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    19c4:	85 ec       	ldi	r24, 0xC5	; 197
    19c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    19ca:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <twi_state>
    19ce:	08 95       	ret

000019d0 <__vector_36>:
}

ISR(TWI_vect)
{
    19d0:	1f 92       	push	r1
    19d2:	0f 92       	push	r0
    19d4:	0f b6       	in	r0, 0x3f	; 63
    19d6:	0f 92       	push	r0
    19d8:	11 24       	eor	r1, r1
    19da:	2f 93       	push	r18
    19dc:	3f 93       	push	r19
    19de:	4f 93       	push	r20
    19e0:	5f 93       	push	r21
    19e2:	6f 93       	push	r22
    19e4:	7f 93       	push	r23
    19e6:	8f 93       	push	r24
    19e8:	9f 93       	push	r25
    19ea:	af 93       	push	r26
    19ec:	bf 93       	push	r27
    19ee:	ef 93       	push	r30
    19f0:	ff 93       	push	r31
  switch(TW_STATUS){
    19f2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    19f6:	88 7f       	andi	r24, 0xF8	; 248
    19f8:	80 36       	cpi	r24, 0x60	; 96
    19fa:	09 f4       	brne	.+2      	; 0x19fe <__vector_36+0x2e>
    19fc:	9e c0       	rjmp	.+316    	; 0x1b3a <__vector_36+0x16a>
    19fe:	78 f5       	brcc	.+94     	; 0x1a5e <__vector_36+0x8e>
    1a00:	88 32       	cpi	r24, 0x28	; 40
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <__vector_36+0x36>
    1a04:	5d c0       	rjmp	.+186    	; 0x1ac0 <__vector_36+0xf0>
    1a06:	90 f4       	brcc	.+36     	; 0x1a2c <__vector_36+0x5c>
    1a08:	80 31       	cpi	r24, 0x10	; 16
    1a0a:	09 f4       	brne	.+2      	; 0x1a0e <__vector_36+0x3e>
    1a0c:	56 c0       	rjmp	.+172    	; 0x1aba <__vector_36+0xea>
    1a0e:	38 f4       	brcc	.+14     	; 0x1a1e <__vector_36+0x4e>
    1a10:	88 23       	and	r24, r24
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <__vector_36+0x46>
    1a14:	f5 c0       	rjmp	.+490    	; 0x1c00 <__vector_36+0x230>
    1a16:	88 30       	cpi	r24, 0x08	; 8
    1a18:	09 f4       	brne	.+2      	; 0x1a1c <__vector_36+0x4c>
    1a1a:	4f c0       	rjmp	.+158    	; 0x1aba <__vector_36+0xea>
    1a1c:	f5 c0       	rjmp	.+490    	; 0x1c08 <__vector_36+0x238>
    1a1e:	88 31       	cpi	r24, 0x18	; 24
    1a20:	09 f4       	brne	.+2      	; 0x1a24 <__vector_36+0x54>
    1a22:	4e c0       	rjmp	.+156    	; 0x1ac0 <__vector_36+0xf0>
    1a24:	80 32       	cpi	r24, 0x20	; 32
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <__vector_36+0x5a>
    1a28:	5f c0       	rjmp	.+190    	; 0x1ae8 <__vector_36+0x118>
    1a2a:	ee c0       	rjmp	.+476    	; 0x1c08 <__vector_36+0x238>
    1a2c:	80 34       	cpi	r24, 0x40	; 64
    1a2e:	09 f4       	brne	.+2      	; 0x1a32 <__vector_36+0x62>
    1a30:	6a c0       	rjmp	.+212    	; 0x1b06 <__vector_36+0x136>
    1a32:	58 f4       	brcc	.+22     	; 0x1a4a <__vector_36+0x7a>
    1a34:	80 33       	cpi	r24, 0x30	; 48
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <__vector_36+0x6a>
    1a38:	57 c0       	rjmp	.+174    	; 0x1ae8 <__vector_36+0x118>
    1a3a:	88 33       	cpi	r24, 0x38	; 56
    1a3c:	09 f0       	breq	.+2      	; 0x1a40 <__vector_36+0x70>
    1a3e:	e4 c0       	rjmp	.+456    	; 0x1c08 <__vector_36+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1a40:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <twi_error>
      twi_releaseBus();
    1a44:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <twi_releaseBus>
      break;
    1a48:	df c0       	rjmp	.+446    	; 0x1c08 <__vector_36+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1a4a:	80 35       	cpi	r24, 0x50	; 80
    1a4c:	09 f4       	brne	.+2      	; 0x1a50 <__vector_36+0x80>
    1a4e:	4f c0       	rjmp	.+158    	; 0x1aee <__vector_36+0x11e>
    1a50:	88 35       	cpi	r24, 0x58	; 88
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <__vector_36+0x86>
    1a54:	5d c0       	rjmp	.+186    	; 0x1b10 <__vector_36+0x140>
    1a56:	88 34       	cpi	r24, 0x48	; 72
    1a58:	09 f0       	breq	.+2      	; 0x1a5c <__vector_36+0x8c>
    1a5a:	d6 c0       	rjmp	.+428    	; 0x1c08 <__vector_36+0x238>
    1a5c:	d3 c0       	rjmp	.+422    	; 0x1c04 <__vector_36+0x234>
    1a5e:	88 39       	cpi	r24, 0x98	; 152
    1a60:	09 f4       	brne	.+2      	; 0x1a64 <__vector_36+0x94>
    1a62:	c4 c0       	rjmp	.+392    	; 0x1bec <__vector_36+0x21c>
    1a64:	a8 f4       	brcc	.+42     	; 0x1a90 <__vector_36+0xc0>
    1a66:	88 37       	cpi	r24, 0x78	; 120
    1a68:	09 f4       	brne	.+2      	; 0x1a6c <__vector_36+0x9c>
    1a6a:	67 c0       	rjmp	.+206    	; 0x1b3a <__vector_36+0x16a>
    1a6c:	38 f4       	brcc	.+14     	; 0x1a7c <__vector_36+0xac>
    1a6e:	88 36       	cpi	r24, 0x68	; 104
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <__vector_36+0xa4>
    1a72:	63 c0       	rjmp	.+198    	; 0x1b3a <__vector_36+0x16a>
    1a74:	80 37       	cpi	r24, 0x70	; 112
    1a76:	09 f4       	brne	.+2      	; 0x1a7a <__vector_36+0xaa>
    1a78:	60 c0       	rjmp	.+192    	; 0x1b3a <__vector_36+0x16a>
    1a7a:	c6 c0       	rjmp	.+396    	; 0x1c08 <__vector_36+0x238>
    1a7c:	88 38       	cpi	r24, 0x88	; 136
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <__vector_36+0xb2>
    1a80:	b5 c0       	rjmp	.+362    	; 0x1bec <__vector_36+0x21c>
    1a82:	80 39       	cpi	r24, 0x90	; 144
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <__vector_36+0xb8>
    1a86:	5f c0       	rjmp	.+190    	; 0x1b46 <__vector_36+0x176>
    1a88:	80 38       	cpi	r24, 0x80	; 128
    1a8a:	09 f0       	breq	.+2      	; 0x1a8e <__vector_36+0xbe>
    1a8c:	bd c0       	rjmp	.+378    	; 0x1c08 <__vector_36+0x238>
    1a8e:	5b c0       	rjmp	.+182    	; 0x1b46 <__vector_36+0x176>
    1a90:	80 3b       	cpi	r24, 0xB0	; 176
    1a92:	09 f4       	brne	.+2      	; 0x1a96 <__vector_36+0xc6>
    1a94:	83 c0       	rjmp	.+262    	; 0x1b9c <__vector_36+0x1cc>
    1a96:	38 f4       	brcc	.+14     	; 0x1aa6 <__vector_36+0xd6>
    1a98:	80 3a       	cpi	r24, 0xA0	; 160
    1a9a:	09 f4       	brne	.+2      	; 0x1a9e <__vector_36+0xce>
    1a9c:	66 c0       	rjmp	.+204    	; 0x1b6a <__vector_36+0x19a>
    1a9e:	88 3a       	cpi	r24, 0xA8	; 168
    1aa0:	09 f4       	brne	.+2      	; 0x1aa4 <__vector_36+0xd4>
    1aa2:	7c c0       	rjmp	.+248    	; 0x1b9c <__vector_36+0x1cc>
    1aa4:	b1 c0       	rjmp	.+354    	; 0x1c08 <__vector_36+0x238>
    1aa6:	80 3c       	cpi	r24, 0xC0	; 192
    1aa8:	09 f4       	brne	.+2      	; 0x1aac <__vector_36+0xdc>
    1aaa:	a4 c0       	rjmp	.+328    	; 0x1bf4 <__vector_36+0x224>
    1aac:	88 3c       	cpi	r24, 0xC8	; 200
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <__vector_36+0xe2>
    1ab0:	a1 c0       	rjmp	.+322    	; 0x1bf4 <__vector_36+0x224>
    1ab2:	88 3b       	cpi	r24, 0xB8	; 184
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <__vector_36+0xe8>
    1ab6:	87 c0       	rjmp	.+270    	; 0x1bc6 <__vector_36+0x1f6>
    1ab8:	a7 c0       	rjmp	.+334    	; 0x1c08 <__vector_36+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1aba:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <twi_slarw>
    1abe:	10 c0       	rjmp	.+32     	; 0x1ae0 <__vector_36+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1ac0:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <twi_masterBufferIndex>
    1ac4:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <twi_masterBufferLength>
    1ac8:	98 17       	cp	r25, r24
    1aca:	70 f5       	brcc	.+92     	; 0x1b28 <__vector_36+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1acc:	e0 91 e7 03 	lds	r30, 0x03E7	; 0x8003e7 <twi_masterBufferIndex>
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	8e 0f       	add	r24, r30
    1ad4:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <twi_masterBufferIndex>
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	e8 51       	subi	r30, 0x18	; 24
    1adc:	fc 4f       	sbci	r31, 0xFC	; 252
    1ade:	80 81       	ld	r24, Z
    1ae0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1ae4:	85 ec       	ldi	r24, 0xC5	; 197
    1ae6:	83 c0       	rjmp	.+262    	; 0x1bee <__vector_36+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1ae8:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <twi_error>
    1aec:	8b c0       	rjmp	.+278    	; 0x1c04 <__vector_36+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1aee:	e0 91 e7 03 	lds	r30, 0x03E7	; 0x8003e7 <twi_masterBufferIndex>
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	8e 0f       	add	r24, r30
    1af6:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <twi_masterBufferIndex>
    1afa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	e8 51       	subi	r30, 0x18	; 24
    1b02:	fc 4f       	sbci	r31, 0xFC	; 252
    1b04:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1b06:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <twi_masterBufferIndex>
    1b0a:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <twi_masterBufferLength>
    1b0e:	6b c0       	rjmp	.+214    	; 0x1be6 <__vector_36+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1b10:	e0 91 e7 03 	lds	r30, 0x03E7	; 0x8003e7 <twi_masterBufferIndex>
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	8e 0f       	add	r24, r30
    1b18:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <twi_masterBufferIndex>
    1b1c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	e8 51       	subi	r30, 0x18	; 24
    1b24:	fc 4f       	sbci	r31, 0xFC	; 252
    1b26:	80 83       	st	Z, r24
	if (twi_sendStop)
    1b28:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <twi_sendStop>
    1b2c:	81 11       	cpse	r24, r1
    1b2e:	6a c0       	rjmp	.+212    	; 0x1c04 <__vector_36+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1b36:	84 ea       	ldi	r24, 0xA4	; 164
    1b38:	5e c0       	rjmp	.+188    	; 0x1bf6 <__vector_36+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1b3a:	83 e0       	ldi	r24, 0x03	; 3
    1b3c:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1b40:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <twi_rxBufferIndex>
    1b44:	cf cf       	rjmp	.-98     	; 0x1ae4 <__vector_36+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1b46:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <twi_rxBufferIndex>
    1b4a:	80 32       	cpi	r24, 0x20	; 32
    1b4c:	08 f0       	brcs	.+2      	; 0x1b50 <__vector_36+0x180>
    1b4e:	4e c0       	rjmp	.+156    	; 0x1bec <__vector_36+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1b50:	e0 91 a3 03 	lds	r30, 0x03A3	; 0x8003a3 <twi_rxBufferIndex>
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	8e 0f       	add	r24, r30
    1b58:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <twi_rxBufferIndex>
    1b5c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	ec 55       	subi	r30, 0x5C	; 92
    1b64:	fc 4f       	sbci	r31, 0xFC	; 252
    1b66:	80 83       	st	Z, r24
    1b68:	bd cf       	rjmp	.-134    	; 0x1ae4 <__vector_36+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1b6a:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1b6e:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <twi_rxBufferIndex>
    1b72:	80 32       	cpi	r24, 0x20	; 32
    1b74:	30 f4       	brcc	.+12     	; 0x1b82 <__vector_36+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1b76:	e0 91 a3 03 	lds	r30, 0x03A3	; 0x8003a3 <twi_rxBufferIndex>
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	ec 55       	subi	r30, 0x5C	; 92
    1b7e:	fc 4f       	sbci	r31, 0xFC	; 252
    1b80:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1b82:	60 91 a3 03 	lds	r22, 0x03A3	; 0x8003a3 <twi_rxBufferIndex>
    1b86:	70 e0       	ldi	r23, 0x00	; 0
    1b88:	e0 91 08 04 	lds	r30, 0x0408	; 0x800408 <twi_onSlaveReceive>
    1b8c:	f0 91 09 04 	lds	r31, 0x0409	; 0x800409 <twi_onSlaveReceive+0x1>
    1b90:	84 ea       	ldi	r24, 0xA4	; 164
    1b92:	93 e0       	ldi	r25, 0x03	; 3
    1b94:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1b96:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <twi_rxBufferIndex>
      break;
    1b9a:	36 c0       	rjmp	.+108    	; 0x1c08 <__vector_36+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1b9c:	84 e0       	ldi	r24, 0x04	; 4
    1b9e:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1ba2:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1ba6:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1baa:	e0 91 0a 04 	lds	r30, 0x040A	; 0x80040a <twi_onSlaveTransmit>
    1bae:	f0 91 0b 04 	lds	r31, 0x040B	; 0x80040b <twi_onSlaveTransmit+0x1>
    1bb2:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1bb4:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <twi_txBufferLength>
    1bb8:	81 11       	cpse	r24, r1
    1bba:	05 c0       	rjmp	.+10     	; 0x1bc6 <__vector_36+0x1f6>
        twi_txBufferLength = 1;
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1bc2:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1bc6:	e0 91 c5 03 	lds	r30, 0x03C5	; 0x8003c5 <twi_txBufferIndex>
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	8e 0f       	add	r24, r30
    1bce:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <twi_txBufferIndex>
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	ea 53       	subi	r30, 0x3A	; 58
    1bd6:	fc 4f       	sbci	r31, 0xFC	; 252
    1bd8:	80 81       	ld	r24, Z
    1bda:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1bde:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <twi_txBufferIndex>
    1be2:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <twi_txBufferLength>
    1be6:	98 17       	cp	r25, r24
    1be8:	08 f4       	brcc	.+2      	; 0x1bec <__vector_36+0x21c>
    1bea:	7c cf       	rjmp	.-264    	; 0x1ae4 <__vector_36+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1bec:	85 e8       	ldi	r24, 0x85	; 133
    1bee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1bf2:	0a c0       	rjmp	.+20     	; 0x1c08 <__vector_36+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1bf4:	85 ec       	ldi	r24, 0xC5	; 197
    1bf6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1bfa:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <twi_state>
      break;
    1bfe:	04 c0       	rjmp	.+8      	; 0x1c08 <__vector_36+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1c00:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <twi_error>
      twi_stop();
    1c04:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <twi_stop>
      break;
  }
}
    1c08:	ff 91       	pop	r31
    1c0a:	ef 91       	pop	r30
    1c0c:	bf 91       	pop	r27
    1c0e:	af 91       	pop	r26
    1c10:	9f 91       	pop	r25
    1c12:	8f 91       	pop	r24
    1c14:	7f 91       	pop	r23
    1c16:	6f 91       	pop	r22
    1c18:	5f 91       	pop	r21
    1c1a:	4f 91       	pop	r20
    1c1c:	3f 91       	pop	r19
    1c1e:	2f 91       	pop	r18
    1c20:	0f 90       	pop	r0
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	0f 90       	pop	r0
    1c26:	1f 90       	pop	r1
    1c28:	18 95       	reti

00001c2a <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1c2a:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <_ZN7TwoWire14rxBufferLengthE>
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	20 91 45 04 	lds	r18, 0x0445	; 0x800445 <_ZN7TwoWire13rxBufferIndexE>
    1c34:	82 1b       	sub	r24, r18
    1c36:	91 09       	sbc	r25, r1
    1c38:	08 95       	ret

00001c3a <_ZN7TwoWire4readEv>:
    1c3a:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <_ZN7TwoWire13rxBufferIndexE>
    1c3e:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <_ZN7TwoWire14rxBufferLengthE>
    1c42:	98 17       	cp	r25, r24
    1c44:	50 f4       	brcc	.+20     	; 0x1c5a <_ZN7TwoWire4readEv+0x20>
    1c46:	e9 2f       	mov	r30, r25
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	ea 5b       	subi	r30, 0xBA	; 186
    1c4c:	fb 4f       	sbci	r31, 0xFB	; 251
    1c4e:	20 81       	ld	r18, Z
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	9f 5f       	subi	r25, 0xFF	; 255
    1c54:	90 93 45 04 	sts	0x0445, r25	; 0x800445 <_ZN7TwoWire13rxBufferIndexE>
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <_ZN7TwoWire4readEv+0x24>
    1c5a:	2f ef       	ldi	r18, 0xFF	; 255
    1c5c:	3f ef       	ldi	r19, 0xFF	; 255
    1c5e:	c9 01       	movw	r24, r18
    1c60:	08 95       	ret

00001c62 <_ZN7TwoWire4peekEv>:
    1c62:	e0 91 45 04 	lds	r30, 0x0445	; 0x800445 <_ZN7TwoWire13rxBufferIndexE>
    1c66:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <_ZN7TwoWire14rxBufferLengthE>
    1c6a:	e8 17       	cp	r30, r24
    1c6c:	30 f4       	brcc	.+12     	; 0x1c7a <_ZN7TwoWire4peekEv+0x18>
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	ea 5b       	subi	r30, 0xBA	; 186
    1c72:	fb 4f       	sbci	r31, 0xFB	; 251
    1c74:	80 81       	ld	r24, Z
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	08 95       	ret
    1c7a:	8f ef       	ldi	r24, 0xFF	; 255
    1c7c:	9f ef       	ldi	r25, 0xFF	; 255
    1c7e:	08 95       	ret

00001c80 <_ZN7TwoWire5flushEv>:
    1c80:	08 95       	ret

00001c82 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1c82:	cf 93       	push	r28
    1c84:	df 93       	push	r29
    1c86:	ec 01       	movw	r28, r24
    1c88:	e0 91 1c 04 	lds	r30, 0x041C	; 0x80041c <_ZN7TwoWire14user_onReceiveE>
    1c8c:	f0 91 1d 04 	lds	r31, 0x041D	; 0x80041d <_ZN7TwoWire14user_onReceiveE+0x1>
    1c90:	30 97       	sbiw	r30, 0x00	; 0
    1c92:	f1 f0       	breq	.+60     	; 0x1cd0 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1c94:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <_ZN7TwoWire13rxBufferIndexE>
    1c98:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <_ZN7TwoWire14rxBufferLengthE>
    1c9c:	98 17       	cp	r25, r24
    1c9e:	c0 f0       	brcs	.+48     	; 0x1cd0 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	29 2f       	mov	r18, r25
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	26 17       	cp	r18, r22
    1ca8:	37 07       	cpc	r19, r23
    1caa:	54 f4       	brge	.+20     	; 0x1cc0 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1cac:	de 01       	movw	r26, r28
    1cae:	a2 0f       	add	r26, r18
    1cb0:	b3 1f       	adc	r27, r19
    1cb2:	4c 91       	ld	r20, X
    1cb4:	d9 01       	movw	r26, r18
    1cb6:	aa 5b       	subi	r26, 0xBA	; 186
    1cb8:	bb 4f       	sbci	r27, 0xFB	; 251
    1cba:	4c 93       	st	X, r20
    1cbc:	9f 5f       	subi	r25, 0xFF	; 255
    1cbe:	f1 cf       	rjmp	.-30     	; 0x1ca2 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1cc0:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <_ZN7TwoWire13rxBufferIndexE>
    1cc4:	60 93 44 04 	sts	0x0444, r22	; 0x800444 <_ZN7TwoWire14rxBufferLengthE>
    1cc8:	cb 01       	movw	r24, r22
    1cca:	df 91       	pop	r29
    1ccc:	cf 91       	pop	r28
    1cce:	09 94       	ijmp
    1cd0:	df 91       	pop	r29
    1cd2:	cf 91       	pop	r28
    1cd4:	08 95       	ret

00001cd6 <_ZN7TwoWire16onRequestServiceEv>:
    1cd6:	e0 91 1e 04 	lds	r30, 0x041E	; 0x80041e <_ZN7TwoWire14user_onRequestE>
    1cda:	f0 91 1f 04 	lds	r31, 0x041F	; 0x80041f <_ZN7TwoWire14user_onRequestE+0x1>
    1cde:	30 97       	sbiw	r30, 0x00	; 0
    1ce0:	29 f0       	breq	.+10     	; 0x1cec <_ZN7TwoWire16onRequestServiceEv+0x16>
    1ce2:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <_ZN7TwoWire13txBufferIndexE>
    1ce6:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <_ZN7TwoWire14txBufferLengthE>
    1cea:	09 94       	ijmp
    1cec:	08 95       	ret

00001cee <_ZN7TwoWire5writeEPKhj>:
    1cee:	cf 92       	push	r12
    1cf0:	df 92       	push	r13
    1cf2:	ef 92       	push	r14
    1cf4:	ff 92       	push	r15
    1cf6:	0f 93       	push	r16
    1cf8:	1f 93       	push	r17
    1cfa:	cf 93       	push	r28
    1cfc:	df 93       	push	r29
    1cfe:	7c 01       	movw	r14, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	8a 01       	movw	r16, r20
    1d04:	20 91 20 04 	lds	r18, 0x0420	; 0x800420 <_ZN7TwoWire12transmittingE>
    1d08:	22 23       	and	r18, r18
    1d0a:	89 f0       	breq	.+34     	; 0x1d2e <_ZN7TwoWire5writeEPKhj+0x40>
    1d0c:	eb 01       	movw	r28, r22
    1d0e:	6b 01       	movw	r12, r22
    1d10:	c4 0e       	add	r12, r20
    1d12:	d5 1e       	adc	r13, r21
    1d14:	cc 15       	cp	r28, r12
    1d16:	dd 05       	cpc	r29, r13
    1d18:	69 f0       	breq	.+26     	; 0x1d34 <_ZN7TwoWire5writeEPKhj+0x46>
    1d1a:	69 91       	ld	r22, Y+
    1d1c:	d7 01       	movw	r26, r14
    1d1e:	ed 91       	ld	r30, X+
    1d20:	fc 91       	ld	r31, X
    1d22:	01 90       	ld	r0, Z+
    1d24:	f0 81       	ld	r31, Z
    1d26:	e0 2d       	mov	r30, r0
    1d28:	c7 01       	movw	r24, r14
    1d2a:	09 95       	icall
    1d2c:	f3 cf       	rjmp	.-26     	; 0x1d14 <_ZN7TwoWire5writeEPKhj+0x26>
    1d2e:	64 2f       	mov	r22, r20
    1d30:	0e 94 a6 0c 	call	0x194c	; 0x194c <twi_transmit>
    1d34:	c8 01       	movw	r24, r16
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	1f 91       	pop	r17
    1d3c:	0f 91       	pop	r16
    1d3e:	ff 90       	pop	r15
    1d40:	ef 90       	pop	r14
    1d42:	df 90       	pop	r13
    1d44:	cf 90       	pop	r12
    1d46:	08 95       	ret

00001d48 <_ZN7TwoWire5writeEh>:
    1d48:	cf 93       	push	r28
    1d4a:	df 93       	push	r29
    1d4c:	1f 92       	push	r1
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
    1d52:	69 83       	std	Y+1, r22	; 0x01
    1d54:	20 91 20 04 	lds	r18, 0x0420	; 0x800420 <_ZN7TwoWire12transmittingE>
    1d58:	22 23       	and	r18, r18
    1d5a:	d1 f0       	breq	.+52     	; 0x1d90 <_ZN7TwoWire5writeEh+0x48>
    1d5c:	20 91 21 04 	lds	r18, 0x0421	; 0x800421 <_ZN7TwoWire14txBufferLengthE>
    1d60:	20 32       	cpi	r18, 0x20	; 32
    1d62:	40 f0       	brcs	.+16     	; 0x1d74 <_ZN7TwoWire5writeEh+0x2c>
    1d64:	21 e0       	ldi	r18, 0x01	; 1
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	fc 01       	movw	r30, r24
    1d6a:	33 83       	std	Z+3, r19	; 0x03
    1d6c:	22 83       	std	Z+2, r18	; 0x02
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	15 c0       	rjmp	.+42     	; 0x1d9e <_ZN7TwoWire5writeEh+0x56>
    1d74:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <_ZN7TwoWire13txBufferIndexE>
    1d78:	e8 2f       	mov	r30, r24
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	ed 5d       	subi	r30, 0xDD	; 221
    1d7e:	fb 4f       	sbci	r31, 0xFB	; 251
    1d80:	99 81       	ldd	r25, Y+1	; 0x01
    1d82:	90 83       	st	Z, r25
    1d84:	8f 5f       	subi	r24, 0xFF	; 255
    1d86:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <_ZN7TwoWire13txBufferIndexE>
    1d8a:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <_ZN7TwoWire14txBufferLengthE>
    1d8e:	05 c0       	rjmp	.+10     	; 0x1d9a <_ZN7TwoWire5writeEh+0x52>
    1d90:	61 e0       	ldi	r22, 0x01	; 1
    1d92:	ce 01       	movw	r24, r28
    1d94:	01 96       	adiw	r24, 0x01	; 1
    1d96:	0e 94 a6 0c 	call	0x194c	; 0x194c <twi_transmit>
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	0f 90       	pop	r0
    1da0:	df 91       	pop	r29
    1da2:	cf 91       	pop	r28
    1da4:	08 95       	ret

00001da6 <_ZN7TwoWireC1Ev>:
    1da6:	fc 01       	movw	r30, r24
    1da8:	13 82       	std	Z+3, r1	; 0x03
    1daa:	12 82       	std	Z+2, r1	; 0x02
    1dac:	88 ee       	ldi	r24, 0xE8	; 232
    1dae:	93 e0       	ldi	r25, 0x03	; 3
    1db0:	a0 e0       	ldi	r26, 0x00	; 0
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	84 83       	std	Z+4, r24	; 0x04
    1db6:	95 83       	std	Z+5, r25	; 0x05
    1db8:	a6 83       	std	Z+6, r26	; 0x06
    1dba:	b7 83       	std	Z+7, r27	; 0x07
    1dbc:	88 e5       	ldi	r24, 0x58	; 88
    1dbe:	92 e0       	ldi	r25, 0x02	; 2
    1dc0:	91 83       	std	Z+1, r25	; 0x01
    1dc2:	80 83       	st	Z, r24
    1dc4:	08 95       	ret

00001dc6 <_ZN7TwoWire5beginEv>:
    1dc6:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <_ZN7TwoWire13rxBufferIndexE>
    1dca:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <_ZN7TwoWire14rxBufferLengthE>
    1dce:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <_ZN7TwoWire13txBufferIndexE>
    1dd2:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <_ZN7TwoWire14txBufferLengthE>
    1dd6:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <twi_init>
    1dda:	8b e6       	ldi	r24, 0x6B	; 107
    1ddc:	9e e0       	ldi	r25, 0x0E	; 14
    1dde:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <twi_attachSlaveTxEvent>
    1de2:	81 e4       	ldi	r24, 0x41	; 65
    1de4:	9e e0       	ldi	r25, 0x0E	; 14
    1de6:	0c 94 ce 0c 	jmp	0x199c	; 0x199c <twi_attachSlaveRxEvent>

00001dea <_ZN7TwoWire17beginTransmissionEh>:
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <_ZN7TwoWire12transmittingE>
    1df0:	60 93 43 04 	sts	0x0443, r22	; 0x800443 <_ZN7TwoWire9txAddressE>
    1df4:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <_ZN7TwoWire13txBufferIndexE>
    1df8:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <_ZN7TwoWire14txBufferLengthE>
    1dfc:	08 95       	ret

00001dfe <_ZN7TwoWire15endTransmissionEh>:
    1dfe:	0f 93       	push	r16
    1e00:	06 2f       	mov	r16, r22
    1e02:	21 e0       	ldi	r18, 0x01	; 1
    1e04:	40 91 21 04 	lds	r20, 0x0421	; 0x800421 <_ZN7TwoWire14txBufferLengthE>
    1e08:	63 e2       	ldi	r22, 0x23	; 35
    1e0a:	74 e0       	ldi	r23, 0x04	; 4
    1e0c:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <_ZN7TwoWire9txAddressE>
    1e10:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <twi_writeTo>
    1e14:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <_ZN7TwoWire13txBufferIndexE>
    1e18:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <_ZN7TwoWire14txBufferLengthE>
    1e1c:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <_ZN7TwoWire12transmittingE>
    1e20:	0f 91       	pop	r16
    1e22:	08 95       	ret

00001e24 <_ZN7TwoWire11requestFromEhhmhh>:
    1e24:	4f 92       	push	r4
    1e26:	5f 92       	push	r5
    1e28:	6f 92       	push	r6
    1e2a:	7f 92       	push	r7
    1e2c:	af 92       	push	r10
    1e2e:	bf 92       	push	r11
    1e30:	cf 92       	push	r12
    1e32:	ef 92       	push	r14
    1e34:	ff 92       	push	r15
    1e36:	0f 93       	push	r16
    1e38:	1f 93       	push	r17
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
    1e3e:	5c 01       	movw	r10, r24
    1e40:	f6 2e       	mov	r15, r22
    1e42:	d4 2f       	mov	r29, r20
    1e44:	28 01       	movw	r4, r16
    1e46:	39 01       	movw	r6, r18
    1e48:	ee 20       	and	r14, r14
    1e4a:	21 f1       	breq	.+72     	; 0x1e94 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    1e4c:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <_ZN7TwoWire17beginTransmissionEh>
    1e50:	ce 2d       	mov	r28, r14
    1e52:	c4 30       	cpi	r28, 0x04	; 4
    1e54:	08 f0       	brcs	.+2      	; 0x1e58 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1e56:	c3 e0       	ldi	r28, 0x03	; 3
    1e58:	c1 50       	subi	r28, 0x01	; 1
    1e5a:	c0 f0       	brcs	.+48     	; 0x1e8c <_ZN7TwoWire11requestFromEhhmhh+0x68>
    1e5c:	28 e0       	ldi	r18, 0x08	; 8
    1e5e:	c2 9f       	mul	r28, r18
    1e60:	c0 01       	movw	r24, r0
    1e62:	11 24       	eor	r1, r1
    1e64:	a3 01       	movw	r20, r6
    1e66:	92 01       	movw	r18, r4
    1e68:	04 c0       	rjmp	.+8      	; 0x1e72 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    1e6a:	56 95       	lsr	r21
    1e6c:	47 95       	ror	r20
    1e6e:	37 95       	ror	r19
    1e70:	27 95       	ror	r18
    1e72:	8a 95       	dec	r24
    1e74:	d2 f7       	brpl	.-12     	; 0x1e6a <_ZN7TwoWire11requestFromEhhmhh+0x46>
    1e76:	ca 01       	movw	r24, r20
    1e78:	b9 01       	movw	r22, r18
    1e7a:	d5 01       	movw	r26, r10
    1e7c:	ed 91       	ld	r30, X+
    1e7e:	fc 91       	ld	r31, X
    1e80:	01 90       	ld	r0, Z+
    1e82:	f0 81       	ld	r31, Z
    1e84:	e0 2d       	mov	r30, r0
    1e86:	c5 01       	movw	r24, r10
    1e88:	09 95       	icall
    1e8a:	e6 cf       	rjmp	.-52     	; 0x1e58 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1e8c:	60 e0       	ldi	r22, 0x00	; 0
    1e8e:	c5 01       	movw	r24, r10
    1e90:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <_ZN7TwoWire15endTransmissionEh>
    1e94:	4d 2f       	mov	r20, r29
    1e96:	d1 32       	cpi	r29, 0x21	; 33
    1e98:	08 f0       	brcs	.+2      	; 0x1e9c <_ZN7TwoWire11requestFromEhhmhh+0x78>
    1e9a:	40 e2       	ldi	r20, 0x20	; 32
    1e9c:	2c 2d       	mov	r18, r12
    1e9e:	66 e4       	ldi	r22, 0x46	; 70
    1ea0:	74 e0       	ldi	r23, 0x04	; 4
    1ea2:	8f 2d       	mov	r24, r15
    1ea4:	0e 94 08 0c 	call	0x1810	; 0x1810 <twi_readFrom>
    1ea8:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <_ZN7TwoWire13rxBufferIndexE>
    1eac:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <_ZN7TwoWire14rxBufferLengthE>
    1eb0:	df 91       	pop	r29
    1eb2:	cf 91       	pop	r28
    1eb4:	1f 91       	pop	r17
    1eb6:	0f 91       	pop	r16
    1eb8:	ff 90       	pop	r15
    1eba:	ef 90       	pop	r14
    1ebc:	cf 90       	pop	r12
    1ebe:	bf 90       	pop	r11
    1ec0:	af 90       	pop	r10
    1ec2:	7f 90       	pop	r7
    1ec4:	6f 90       	pop	r6
    1ec6:	5f 90       	pop	r5
    1ec8:	4f 90       	pop	r4
    1eca:	08 95       	ret

00001ecc <_ZN7TwoWire11requestFromEhhh>:
    1ecc:	cf 92       	push	r12
    1ece:	ef 92       	push	r14
    1ed0:	0f 93       	push	r16
    1ed2:	1f 93       	push	r17
    1ed4:	c2 2e       	mov	r12, r18
    1ed6:	e1 2c       	mov	r14, r1
    1ed8:	00 e0       	ldi	r16, 0x00	; 0
    1eda:	10 e0       	ldi	r17, 0x00	; 0
    1edc:	98 01       	movw	r18, r16
    1ede:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <_ZN7TwoWire11requestFromEhhmhh>
    1ee2:	1f 91       	pop	r17
    1ee4:	0f 91       	pop	r16
    1ee6:	ef 90       	pop	r14
    1ee8:	cf 90       	pop	r12
    1eea:	08 95       	ret

00001eec <_ZN7TwoWire11requestFromEii>:
    1eec:	21 e0       	ldi	r18, 0x01	; 1
    1eee:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <_ZN7TwoWire11requestFromEhhh>

00001ef2 <_ZN7TwoWire15endTransmissionEv>:
    1ef2:	61 e0       	ldi	r22, 0x01	; 1
    1ef4:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <_ZN7TwoWire15endTransmissionEh>

00001ef8 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1ef8:	80 e1       	ldi	r24, 0x10	; 16
    1efa:	94 e0       	ldi	r25, 0x04	; 4
    1efc:	0c 94 d3 0e 	jmp	0x1da6	; 0x1da6 <_ZN7TwoWireC1Ev>

00001f00 <__divsf3>:
    1f00:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__divsf3x>
    1f04:	0c 94 46 10 	jmp	0x208c	; 0x208c <__fp_round>
    1f08:	0e 94 3f 10 	call	0x207e	; 0x207e <__fp_pscB>
    1f0c:	58 f0       	brcs	.+22     	; 0x1f24 <__divsf3+0x24>
    1f0e:	0e 94 38 10 	call	0x2070	; 0x2070 <__fp_pscA>
    1f12:	40 f0       	brcs	.+16     	; 0x1f24 <__divsf3+0x24>
    1f14:	29 f4       	brne	.+10     	; 0x1f20 <__divsf3+0x20>
    1f16:	5f 3f       	cpi	r21, 0xFF	; 255
    1f18:	29 f0       	breq	.+10     	; 0x1f24 <__divsf3+0x24>
    1f1a:	0c 94 2f 10 	jmp	0x205e	; 0x205e <__fp_inf>
    1f1e:	51 11       	cpse	r21, r1
    1f20:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__fp_szero>
    1f24:	0c 94 35 10 	jmp	0x206a	; 0x206a <__fp_nan>

00001f28 <__divsf3x>:
    1f28:	0e 94 57 10 	call	0x20ae	; 0x20ae <__fp_split3>
    1f2c:	68 f3       	brcs	.-38     	; 0x1f08 <__divsf3+0x8>

00001f2e <__divsf3_pse>:
    1f2e:	99 23       	and	r25, r25
    1f30:	b1 f3       	breq	.-20     	; 0x1f1e <__divsf3+0x1e>
    1f32:	55 23       	and	r21, r21
    1f34:	91 f3       	breq	.-28     	; 0x1f1a <__divsf3+0x1a>
    1f36:	95 1b       	sub	r25, r21
    1f38:	55 0b       	sbc	r21, r21
    1f3a:	bb 27       	eor	r27, r27
    1f3c:	aa 27       	eor	r26, r26
    1f3e:	62 17       	cp	r22, r18
    1f40:	73 07       	cpc	r23, r19
    1f42:	84 07       	cpc	r24, r20
    1f44:	38 f0       	brcs	.+14     	; 0x1f54 <__divsf3_pse+0x26>
    1f46:	9f 5f       	subi	r25, 0xFF	; 255
    1f48:	5f 4f       	sbci	r21, 0xFF	; 255
    1f4a:	22 0f       	add	r18, r18
    1f4c:	33 1f       	adc	r19, r19
    1f4e:	44 1f       	adc	r20, r20
    1f50:	aa 1f       	adc	r26, r26
    1f52:	a9 f3       	breq	.-22     	; 0x1f3e <__divsf3_pse+0x10>
    1f54:	35 d0       	rcall	.+106    	; 0x1fc0 <__divsf3_pse+0x92>
    1f56:	0e 2e       	mov	r0, r30
    1f58:	3a f0       	brmi	.+14     	; 0x1f68 <__divsf3_pse+0x3a>
    1f5a:	e0 e8       	ldi	r30, 0x80	; 128
    1f5c:	32 d0       	rcall	.+100    	; 0x1fc2 <__divsf3_pse+0x94>
    1f5e:	91 50       	subi	r25, 0x01	; 1
    1f60:	50 40       	sbci	r21, 0x00	; 0
    1f62:	e6 95       	lsr	r30
    1f64:	00 1c       	adc	r0, r0
    1f66:	ca f7       	brpl	.-14     	; 0x1f5a <__divsf3_pse+0x2c>
    1f68:	2b d0       	rcall	.+86     	; 0x1fc0 <__divsf3_pse+0x92>
    1f6a:	fe 2f       	mov	r31, r30
    1f6c:	29 d0       	rcall	.+82     	; 0x1fc0 <__divsf3_pse+0x92>
    1f6e:	66 0f       	add	r22, r22
    1f70:	77 1f       	adc	r23, r23
    1f72:	88 1f       	adc	r24, r24
    1f74:	bb 1f       	adc	r27, r27
    1f76:	26 17       	cp	r18, r22
    1f78:	37 07       	cpc	r19, r23
    1f7a:	48 07       	cpc	r20, r24
    1f7c:	ab 07       	cpc	r26, r27
    1f7e:	b0 e8       	ldi	r27, 0x80	; 128
    1f80:	09 f0       	breq	.+2      	; 0x1f84 <__divsf3_pse+0x56>
    1f82:	bb 0b       	sbc	r27, r27
    1f84:	80 2d       	mov	r24, r0
    1f86:	bf 01       	movw	r22, r30
    1f88:	ff 27       	eor	r31, r31
    1f8a:	93 58       	subi	r25, 0x83	; 131
    1f8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f8e:	3a f0       	brmi	.+14     	; 0x1f9e <__divsf3_pse+0x70>
    1f90:	9e 3f       	cpi	r25, 0xFE	; 254
    1f92:	51 05       	cpc	r21, r1
    1f94:	78 f0       	brcs	.+30     	; 0x1fb4 <__divsf3_pse+0x86>
    1f96:	0c 94 2f 10 	jmp	0x205e	; 0x205e <__fp_inf>
    1f9a:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__fp_szero>
    1f9e:	5f 3f       	cpi	r21, 0xFF	; 255
    1fa0:	e4 f3       	brlt	.-8      	; 0x1f9a <__divsf3_pse+0x6c>
    1fa2:	98 3e       	cpi	r25, 0xE8	; 232
    1fa4:	d4 f3       	brlt	.-12     	; 0x1f9a <__divsf3_pse+0x6c>
    1fa6:	86 95       	lsr	r24
    1fa8:	77 95       	ror	r23
    1faa:	67 95       	ror	r22
    1fac:	b7 95       	ror	r27
    1fae:	f7 95       	ror	r31
    1fb0:	9f 5f       	subi	r25, 0xFF	; 255
    1fb2:	c9 f7       	brne	.-14     	; 0x1fa6 <__divsf3_pse+0x78>
    1fb4:	88 0f       	add	r24, r24
    1fb6:	91 1d       	adc	r25, r1
    1fb8:	96 95       	lsr	r25
    1fba:	87 95       	ror	r24
    1fbc:	97 f9       	bld	r25, 7
    1fbe:	08 95       	ret
    1fc0:	e1 e0       	ldi	r30, 0x01	; 1
    1fc2:	66 0f       	add	r22, r22
    1fc4:	77 1f       	adc	r23, r23
    1fc6:	88 1f       	adc	r24, r24
    1fc8:	bb 1f       	adc	r27, r27
    1fca:	62 17       	cp	r22, r18
    1fcc:	73 07       	cpc	r23, r19
    1fce:	84 07       	cpc	r24, r20
    1fd0:	ba 07       	cpc	r27, r26
    1fd2:	20 f0       	brcs	.+8      	; 0x1fdc <__divsf3_pse+0xae>
    1fd4:	62 1b       	sub	r22, r18
    1fd6:	73 0b       	sbc	r23, r19
    1fd8:	84 0b       	sbc	r24, r20
    1fda:	ba 0b       	sbc	r27, r26
    1fdc:	ee 1f       	adc	r30, r30
    1fde:	88 f7       	brcc	.-30     	; 0x1fc2 <__divsf3_pse+0x94>
    1fe0:	e0 95       	com	r30
    1fe2:	08 95       	ret

00001fe4 <__floatunsisf>:
    1fe4:	e8 94       	clt
    1fe6:	09 c0       	rjmp	.+18     	; 0x1ffa <__floatsisf+0x12>

00001fe8 <__floatsisf>:
    1fe8:	97 fb       	bst	r25, 7
    1fea:	3e f4       	brtc	.+14     	; 0x1ffa <__floatsisf+0x12>
    1fec:	90 95       	com	r25
    1fee:	80 95       	com	r24
    1ff0:	70 95       	com	r23
    1ff2:	61 95       	neg	r22
    1ff4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ff6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ff8:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffa:	99 23       	and	r25, r25
    1ffc:	a9 f0       	breq	.+42     	; 0x2028 <__floatsisf+0x40>
    1ffe:	f9 2f       	mov	r31, r25
    2000:	96 e9       	ldi	r25, 0x96	; 150
    2002:	bb 27       	eor	r27, r27
    2004:	93 95       	inc	r25
    2006:	f6 95       	lsr	r31
    2008:	87 95       	ror	r24
    200a:	77 95       	ror	r23
    200c:	67 95       	ror	r22
    200e:	b7 95       	ror	r27
    2010:	f1 11       	cpse	r31, r1
    2012:	f8 cf       	rjmp	.-16     	; 0x2004 <__floatsisf+0x1c>
    2014:	fa f4       	brpl	.+62     	; 0x2054 <__floatsisf+0x6c>
    2016:	bb 0f       	add	r27, r27
    2018:	11 f4       	brne	.+4      	; 0x201e <__floatsisf+0x36>
    201a:	60 ff       	sbrs	r22, 0
    201c:	1b c0       	rjmp	.+54     	; 0x2054 <__floatsisf+0x6c>
    201e:	6f 5f       	subi	r22, 0xFF	; 255
    2020:	7f 4f       	sbci	r23, 0xFF	; 255
    2022:	8f 4f       	sbci	r24, 0xFF	; 255
    2024:	9f 4f       	sbci	r25, 0xFF	; 255
    2026:	16 c0       	rjmp	.+44     	; 0x2054 <__floatsisf+0x6c>
    2028:	88 23       	and	r24, r24
    202a:	11 f0       	breq	.+4      	; 0x2030 <__floatsisf+0x48>
    202c:	96 e9       	ldi	r25, 0x96	; 150
    202e:	11 c0       	rjmp	.+34     	; 0x2052 <__floatsisf+0x6a>
    2030:	77 23       	and	r23, r23
    2032:	21 f0       	breq	.+8      	; 0x203c <__floatsisf+0x54>
    2034:	9e e8       	ldi	r25, 0x8E	; 142
    2036:	87 2f       	mov	r24, r23
    2038:	76 2f       	mov	r23, r22
    203a:	05 c0       	rjmp	.+10     	; 0x2046 <__floatsisf+0x5e>
    203c:	66 23       	and	r22, r22
    203e:	71 f0       	breq	.+28     	; 0x205c <__floatsisf+0x74>
    2040:	96 e8       	ldi	r25, 0x86	; 134
    2042:	86 2f       	mov	r24, r22
    2044:	70 e0       	ldi	r23, 0x00	; 0
    2046:	60 e0       	ldi	r22, 0x00	; 0
    2048:	2a f0       	brmi	.+10     	; 0x2054 <__floatsisf+0x6c>
    204a:	9a 95       	dec	r25
    204c:	66 0f       	add	r22, r22
    204e:	77 1f       	adc	r23, r23
    2050:	88 1f       	adc	r24, r24
    2052:	da f7       	brpl	.-10     	; 0x204a <__floatsisf+0x62>
    2054:	88 0f       	add	r24, r24
    2056:	96 95       	lsr	r25
    2058:	87 95       	ror	r24
    205a:	97 f9       	bld	r25, 7
    205c:	08 95       	ret

0000205e <__fp_inf>:
    205e:	97 f9       	bld	r25, 7
    2060:	9f 67       	ori	r25, 0x7F	; 127
    2062:	80 e8       	ldi	r24, 0x80	; 128
    2064:	70 e0       	ldi	r23, 0x00	; 0
    2066:	60 e0       	ldi	r22, 0x00	; 0
    2068:	08 95       	ret

0000206a <__fp_nan>:
    206a:	9f ef       	ldi	r25, 0xFF	; 255
    206c:	80 ec       	ldi	r24, 0xC0	; 192
    206e:	08 95       	ret

00002070 <__fp_pscA>:
    2070:	00 24       	eor	r0, r0
    2072:	0a 94       	dec	r0
    2074:	16 16       	cp	r1, r22
    2076:	17 06       	cpc	r1, r23
    2078:	18 06       	cpc	r1, r24
    207a:	09 06       	cpc	r0, r25
    207c:	08 95       	ret

0000207e <__fp_pscB>:
    207e:	00 24       	eor	r0, r0
    2080:	0a 94       	dec	r0
    2082:	12 16       	cp	r1, r18
    2084:	13 06       	cpc	r1, r19
    2086:	14 06       	cpc	r1, r20
    2088:	05 06       	cpc	r0, r21
    208a:	08 95       	ret

0000208c <__fp_round>:
    208c:	09 2e       	mov	r0, r25
    208e:	03 94       	inc	r0
    2090:	00 0c       	add	r0, r0
    2092:	11 f4       	brne	.+4      	; 0x2098 <__fp_round+0xc>
    2094:	88 23       	and	r24, r24
    2096:	52 f0       	brmi	.+20     	; 0x20ac <__fp_round+0x20>
    2098:	bb 0f       	add	r27, r27
    209a:	40 f4       	brcc	.+16     	; 0x20ac <__fp_round+0x20>
    209c:	bf 2b       	or	r27, r31
    209e:	11 f4       	brne	.+4      	; 0x20a4 <__fp_round+0x18>
    20a0:	60 ff       	sbrs	r22, 0
    20a2:	04 c0       	rjmp	.+8      	; 0x20ac <__fp_round+0x20>
    20a4:	6f 5f       	subi	r22, 0xFF	; 255
    20a6:	7f 4f       	sbci	r23, 0xFF	; 255
    20a8:	8f 4f       	sbci	r24, 0xFF	; 255
    20aa:	9f 4f       	sbci	r25, 0xFF	; 255
    20ac:	08 95       	ret

000020ae <__fp_split3>:
    20ae:	57 fd       	sbrc	r21, 7
    20b0:	90 58       	subi	r25, 0x80	; 128
    20b2:	44 0f       	add	r20, r20
    20b4:	55 1f       	adc	r21, r21
    20b6:	59 f0       	breq	.+22     	; 0x20ce <__fp_splitA+0x10>
    20b8:	5f 3f       	cpi	r21, 0xFF	; 255
    20ba:	71 f0       	breq	.+28     	; 0x20d8 <__fp_splitA+0x1a>
    20bc:	47 95       	ror	r20

000020be <__fp_splitA>:
    20be:	88 0f       	add	r24, r24
    20c0:	97 fb       	bst	r25, 7
    20c2:	99 1f       	adc	r25, r25
    20c4:	61 f0       	breq	.+24     	; 0x20de <__fp_splitA+0x20>
    20c6:	9f 3f       	cpi	r25, 0xFF	; 255
    20c8:	79 f0       	breq	.+30     	; 0x20e8 <__fp_splitA+0x2a>
    20ca:	87 95       	ror	r24
    20cc:	08 95       	ret
    20ce:	12 16       	cp	r1, r18
    20d0:	13 06       	cpc	r1, r19
    20d2:	14 06       	cpc	r1, r20
    20d4:	55 1f       	adc	r21, r21
    20d6:	f2 cf       	rjmp	.-28     	; 0x20bc <__fp_split3+0xe>
    20d8:	46 95       	lsr	r20
    20da:	f1 df       	rcall	.-30     	; 0x20be <__fp_splitA>
    20dc:	08 c0       	rjmp	.+16     	; 0x20ee <__fp_splitA+0x30>
    20de:	16 16       	cp	r1, r22
    20e0:	17 06       	cpc	r1, r23
    20e2:	18 06       	cpc	r1, r24
    20e4:	99 1f       	adc	r25, r25
    20e6:	f1 cf       	rjmp	.-30     	; 0x20ca <__fp_splitA+0xc>
    20e8:	86 95       	lsr	r24
    20ea:	71 05       	cpc	r23, r1
    20ec:	61 05       	cpc	r22, r1
    20ee:	08 94       	sec
    20f0:	08 95       	ret

000020f2 <__fp_zero>:
    20f2:	e8 94       	clt

000020f4 <__fp_szero>:
    20f4:	bb 27       	eor	r27, r27
    20f6:	66 27       	eor	r22, r22
    20f8:	77 27       	eor	r23, r23
    20fa:	cb 01       	movw	r24, r22
    20fc:	97 f9       	bld	r25, 7
    20fe:	08 95       	ret

00002100 <__gesf2>:
    2100:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__fp_cmp>
    2104:	08 f4       	brcc	.+2      	; 0x2108 <__gesf2+0x8>
    2106:	8f ef       	ldi	r24, 0xFF	; 255
    2108:	08 95       	ret

0000210a <__mulsf3>:
    210a:	0e 94 98 10 	call	0x2130	; 0x2130 <__mulsf3x>
    210e:	0c 94 46 10 	jmp	0x208c	; 0x208c <__fp_round>
    2112:	0e 94 38 10 	call	0x2070	; 0x2070 <__fp_pscA>
    2116:	38 f0       	brcs	.+14     	; 0x2126 <__mulsf3+0x1c>
    2118:	0e 94 3f 10 	call	0x207e	; 0x207e <__fp_pscB>
    211c:	20 f0       	brcs	.+8      	; 0x2126 <__mulsf3+0x1c>
    211e:	95 23       	and	r25, r21
    2120:	11 f0       	breq	.+4      	; 0x2126 <__mulsf3+0x1c>
    2122:	0c 94 2f 10 	jmp	0x205e	; 0x205e <__fp_inf>
    2126:	0c 94 35 10 	jmp	0x206a	; 0x206a <__fp_nan>
    212a:	11 24       	eor	r1, r1
    212c:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__fp_szero>

00002130 <__mulsf3x>:
    2130:	0e 94 57 10 	call	0x20ae	; 0x20ae <__fp_split3>
    2134:	70 f3       	brcs	.-36     	; 0x2112 <__mulsf3+0x8>

00002136 <__mulsf3_pse>:
    2136:	95 9f       	mul	r25, r21
    2138:	c1 f3       	breq	.-16     	; 0x212a <__mulsf3+0x20>
    213a:	95 0f       	add	r25, r21
    213c:	50 e0       	ldi	r21, 0x00	; 0
    213e:	55 1f       	adc	r21, r21
    2140:	62 9f       	mul	r22, r18
    2142:	f0 01       	movw	r30, r0
    2144:	72 9f       	mul	r23, r18
    2146:	bb 27       	eor	r27, r27
    2148:	f0 0d       	add	r31, r0
    214a:	b1 1d       	adc	r27, r1
    214c:	63 9f       	mul	r22, r19
    214e:	aa 27       	eor	r26, r26
    2150:	f0 0d       	add	r31, r0
    2152:	b1 1d       	adc	r27, r1
    2154:	aa 1f       	adc	r26, r26
    2156:	64 9f       	mul	r22, r20
    2158:	66 27       	eor	r22, r22
    215a:	b0 0d       	add	r27, r0
    215c:	a1 1d       	adc	r26, r1
    215e:	66 1f       	adc	r22, r22
    2160:	82 9f       	mul	r24, r18
    2162:	22 27       	eor	r18, r18
    2164:	b0 0d       	add	r27, r0
    2166:	a1 1d       	adc	r26, r1
    2168:	62 1f       	adc	r22, r18
    216a:	73 9f       	mul	r23, r19
    216c:	b0 0d       	add	r27, r0
    216e:	a1 1d       	adc	r26, r1
    2170:	62 1f       	adc	r22, r18
    2172:	83 9f       	mul	r24, r19
    2174:	a0 0d       	add	r26, r0
    2176:	61 1d       	adc	r22, r1
    2178:	22 1f       	adc	r18, r18
    217a:	74 9f       	mul	r23, r20
    217c:	33 27       	eor	r19, r19
    217e:	a0 0d       	add	r26, r0
    2180:	61 1d       	adc	r22, r1
    2182:	23 1f       	adc	r18, r19
    2184:	84 9f       	mul	r24, r20
    2186:	60 0d       	add	r22, r0
    2188:	21 1d       	adc	r18, r1
    218a:	82 2f       	mov	r24, r18
    218c:	76 2f       	mov	r23, r22
    218e:	6a 2f       	mov	r22, r26
    2190:	11 24       	eor	r1, r1
    2192:	9f 57       	subi	r25, 0x7F	; 127
    2194:	50 40       	sbci	r21, 0x00	; 0
    2196:	9a f0       	brmi	.+38     	; 0x21be <__mulsf3_pse+0x88>
    2198:	f1 f0       	breq	.+60     	; 0x21d6 <__mulsf3_pse+0xa0>
    219a:	88 23       	and	r24, r24
    219c:	4a f0       	brmi	.+18     	; 0x21b0 <__mulsf3_pse+0x7a>
    219e:	ee 0f       	add	r30, r30
    21a0:	ff 1f       	adc	r31, r31
    21a2:	bb 1f       	adc	r27, r27
    21a4:	66 1f       	adc	r22, r22
    21a6:	77 1f       	adc	r23, r23
    21a8:	88 1f       	adc	r24, r24
    21aa:	91 50       	subi	r25, 0x01	; 1
    21ac:	50 40       	sbci	r21, 0x00	; 0
    21ae:	a9 f7       	brne	.-22     	; 0x219a <__mulsf3_pse+0x64>
    21b0:	9e 3f       	cpi	r25, 0xFE	; 254
    21b2:	51 05       	cpc	r21, r1
    21b4:	80 f0       	brcs	.+32     	; 0x21d6 <__mulsf3_pse+0xa0>
    21b6:	0c 94 2f 10 	jmp	0x205e	; 0x205e <__fp_inf>
    21ba:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__fp_szero>
    21be:	5f 3f       	cpi	r21, 0xFF	; 255
    21c0:	e4 f3       	brlt	.-8      	; 0x21ba <__mulsf3_pse+0x84>
    21c2:	98 3e       	cpi	r25, 0xE8	; 232
    21c4:	d4 f3       	brlt	.-12     	; 0x21ba <__mulsf3_pse+0x84>
    21c6:	86 95       	lsr	r24
    21c8:	77 95       	ror	r23
    21ca:	67 95       	ror	r22
    21cc:	b7 95       	ror	r27
    21ce:	f7 95       	ror	r31
    21d0:	e7 95       	ror	r30
    21d2:	9f 5f       	subi	r25, 0xFF	; 255
    21d4:	c1 f7       	brne	.-16     	; 0x21c6 <__mulsf3_pse+0x90>
    21d6:	fe 2b       	or	r31, r30
    21d8:	88 0f       	add	r24, r24
    21da:	91 1d       	adc	r25, r1
    21dc:	96 95       	lsr	r25
    21de:	87 95       	ror	r24
    21e0:	97 f9       	bld	r25, 7
    21e2:	08 95       	ret

000021e4 <__fp_cmp>:
    21e4:	99 0f       	add	r25, r25
    21e6:	00 08       	sbc	r0, r0
    21e8:	55 0f       	add	r21, r21
    21ea:	aa 0b       	sbc	r26, r26
    21ec:	e0 e8       	ldi	r30, 0x80	; 128
    21ee:	fe ef       	ldi	r31, 0xFE	; 254
    21f0:	16 16       	cp	r1, r22
    21f2:	17 06       	cpc	r1, r23
    21f4:	e8 07       	cpc	r30, r24
    21f6:	f9 07       	cpc	r31, r25
    21f8:	c0 f0       	brcs	.+48     	; 0x222a <__fp_cmp+0x46>
    21fa:	12 16       	cp	r1, r18
    21fc:	13 06       	cpc	r1, r19
    21fe:	e4 07       	cpc	r30, r20
    2200:	f5 07       	cpc	r31, r21
    2202:	98 f0       	brcs	.+38     	; 0x222a <__fp_cmp+0x46>
    2204:	62 1b       	sub	r22, r18
    2206:	73 0b       	sbc	r23, r19
    2208:	84 0b       	sbc	r24, r20
    220a:	95 0b       	sbc	r25, r21
    220c:	39 f4       	brne	.+14     	; 0x221c <__fp_cmp+0x38>
    220e:	0a 26       	eor	r0, r26
    2210:	61 f0       	breq	.+24     	; 0x222a <__fp_cmp+0x46>
    2212:	23 2b       	or	r18, r19
    2214:	24 2b       	or	r18, r20
    2216:	25 2b       	or	r18, r21
    2218:	21 f4       	brne	.+8      	; 0x2222 <__fp_cmp+0x3e>
    221a:	08 95       	ret
    221c:	0a 26       	eor	r0, r26
    221e:	09 f4       	brne	.+2      	; 0x2222 <__fp_cmp+0x3e>
    2220:	a1 40       	sbci	r26, 0x01	; 1
    2222:	a6 95       	lsr	r26
    2224:	8f ef       	ldi	r24, 0xFF	; 255
    2226:	81 1d       	adc	r24, r1
    2228:	81 1d       	adc	r24, r1
    222a:	08 95       	ret

0000222c <__cxa_pure_virtual>:
    222c:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <abort>

00002230 <initVariant>:
    2230:	08 95       	ret

00002232 <main>:
    2232:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <init>
    2236:	0e 94 18 11 	call	0x2230	; 0x2230 <initVariant>
    223a:	86 e6       	ldi	r24, 0x66	; 102
    223c:	94 e0       	ldi	r25, 0x04	; 4
    223e:	0e 94 30 17 	call	0x2e60	; 0x2e60 <_ZN10USBDevice_6attachEv>
    2242:	0e 94 c4 03 	call	0x788	; 0x788 <setup>
    2246:	c0 e0       	ldi	r28, 0x00	; 0
    2248:	d0 e0       	ldi	r29, 0x00	; 0
    224a:	0e 94 05 04 	call	0x80a	; 0x80a <loop>
    224e:	20 97       	sbiw	r28, 0x00	; 0
    2250:	e1 f3       	breq	.-8      	; 0x224a <main+0x18>
    2252:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2256:	f9 cf       	rjmp	.-14     	; 0x224a <main+0x18>

00002258 <_ZN5Print5writeEPKhj>:
    2258:	cf 92       	push	r12
    225a:	df 92       	push	r13
    225c:	ef 92       	push	r14
    225e:	ff 92       	push	r15
    2260:	0f 93       	push	r16
    2262:	1f 93       	push	r17
    2264:	cf 93       	push	r28
    2266:	df 93       	push	r29
    2268:	6c 01       	movw	r12, r24
    226a:	7a 01       	movw	r14, r20
    226c:	8b 01       	movw	r16, r22
    226e:	c0 e0       	ldi	r28, 0x00	; 0
    2270:	d0 e0       	ldi	r29, 0x00	; 0
    2272:	ce 15       	cp	r28, r14
    2274:	df 05       	cpc	r29, r15
    2276:	81 f0       	breq	.+32     	; 0x2298 <_ZN5Print5writeEPKhj+0x40>
    2278:	d8 01       	movw	r26, r16
    227a:	6d 91       	ld	r22, X+
    227c:	8d 01       	movw	r16, r26
    227e:	d6 01       	movw	r26, r12
    2280:	ed 91       	ld	r30, X+
    2282:	fc 91       	ld	r31, X
    2284:	01 90       	ld	r0, Z+
    2286:	f0 81       	ld	r31, Z
    2288:	e0 2d       	mov	r30, r0
    228a:	c6 01       	movw	r24, r12
    228c:	09 95       	icall
    228e:	89 2b       	or	r24, r25
    2290:	11 f0       	breq	.+4      	; 0x2296 <_ZN5Print5writeEPKhj+0x3e>
    2292:	21 96       	adiw	r28, 0x01	; 1
    2294:	ee cf       	rjmp	.-36     	; 0x2272 <_ZN5Print5writeEPKhj+0x1a>
    2296:	7e 01       	movw	r14, r28
    2298:	c7 01       	movw	r24, r14
    229a:	df 91       	pop	r29
    229c:	cf 91       	pop	r28
    229e:	1f 91       	pop	r17
    22a0:	0f 91       	pop	r16
    22a2:	ff 90       	pop	r15
    22a4:	ef 90       	pop	r14
    22a6:	df 90       	pop	r13
    22a8:	cf 90       	pop	r12
    22aa:	08 95       	ret

000022ac <_ZN5Print5writeEPKc>:
    22ac:	61 15       	cp	r22, r1
    22ae:	71 05       	cpc	r23, r1
    22b0:	79 f0       	breq	.+30     	; 0x22d0 <_ZN5Print5writeEPKc+0x24>
    22b2:	fb 01       	movw	r30, r22
    22b4:	01 90       	ld	r0, Z+
    22b6:	00 20       	and	r0, r0
    22b8:	e9 f7       	brne	.-6      	; 0x22b4 <_ZN5Print5writeEPKc+0x8>
    22ba:	31 97       	sbiw	r30, 0x01	; 1
    22bc:	af 01       	movw	r20, r30
    22be:	46 1b       	sub	r20, r22
    22c0:	57 0b       	sbc	r21, r23
    22c2:	dc 01       	movw	r26, r24
    22c4:	ed 91       	ld	r30, X+
    22c6:	fc 91       	ld	r31, X
    22c8:	02 80       	ldd	r0, Z+2	; 0x02
    22ca:	f3 81       	ldd	r31, Z+3	; 0x03
    22cc:	e0 2d       	mov	r30, r0
    22ce:	09 94       	ijmp
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	08 95       	ret

000022d6 <_ZN5Print5printERK6String>:
    22d6:	db 01       	movw	r26, r22
    22d8:	14 96       	adiw	r26, 0x04	; 4
    22da:	4d 91       	ld	r20, X+
    22dc:	5c 91       	ld	r21, X
    22de:	15 97       	sbiw	r26, 0x05	; 5
    22e0:	6d 91       	ld	r22, X+
    22e2:	7c 91       	ld	r23, X
    22e4:	dc 01       	movw	r26, r24
    22e6:	ed 91       	ld	r30, X+
    22e8:	fc 91       	ld	r31, X
    22ea:	02 80       	ldd	r0, Z+2	; 0x02
    22ec:	f3 81       	ldd	r31, Z+3	; 0x03
    22ee:	e0 2d       	mov	r30, r0
    22f0:	09 94       	ijmp

000022f2 <_ZN5Print5printEPKc>:
    22f2:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <_ZN5Print5writeEPKc>

000022f6 <_ZN5Print5printEc>:
    22f6:	dc 01       	movw	r26, r24
    22f8:	ed 91       	ld	r30, X+
    22fa:	fc 91       	ld	r31, X
    22fc:	01 90       	ld	r0, Z+
    22fe:	f0 81       	ld	r31, Z
    2300:	e0 2d       	mov	r30, r0
    2302:	09 94       	ijmp

00002304 <_ZN5Print11printNumberEmh>:
    2304:	8f 92       	push	r8
    2306:	9f 92       	push	r9
    2308:	af 92       	push	r10
    230a:	bf 92       	push	r11
    230c:	ef 92       	push	r14
    230e:	ff 92       	push	r15
    2310:	0f 93       	push	r16
    2312:	1f 93       	push	r17
    2314:	cf 93       	push	r28
    2316:	df 93       	push	r29
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	a1 97       	sbiw	r28, 0x21	; 33
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	cd bf       	out	0x3d, r28	; 61
    2328:	7c 01       	movw	r14, r24
    232a:	fa 01       	movw	r30, r20
    232c:	cb 01       	movw	r24, r22
    232e:	19 a2       	std	Y+33, r1	; 0x21
    2330:	22 30       	cpi	r18, 0x02	; 2
    2332:	08 f4       	brcc	.+2      	; 0x2336 <_ZN5Print11printNumberEmh+0x32>
    2334:	2a e0       	ldi	r18, 0x0A	; 10
    2336:	8e 01       	movw	r16, r28
    2338:	0f 5d       	subi	r16, 0xDF	; 223
    233a:	1f 4f       	sbci	r17, 0xFF	; 255
    233c:	82 2e       	mov	r8, r18
    233e:	91 2c       	mov	r9, r1
    2340:	a1 2c       	mov	r10, r1
    2342:	b1 2c       	mov	r11, r1
    2344:	bf 01       	movw	r22, r30
    2346:	a5 01       	movw	r20, r10
    2348:	94 01       	movw	r18, r8
    234a:	0e 94 43 1c 	call	0x3886	; 0x3886 <__udivmodsi4>
    234e:	f9 01       	movw	r30, r18
    2350:	ca 01       	movw	r24, r20
    2352:	01 50       	subi	r16, 0x01	; 1
    2354:	11 09       	sbc	r17, r1
    2356:	6a 30       	cpi	r22, 0x0A	; 10
    2358:	10 f4       	brcc	.+4      	; 0x235e <_ZN5Print11printNumberEmh+0x5a>
    235a:	60 5d       	subi	r22, 0xD0	; 208
    235c:	01 c0       	rjmp	.+2      	; 0x2360 <_ZN5Print11printNumberEmh+0x5c>
    235e:	69 5c       	subi	r22, 0xC9	; 201
    2360:	d8 01       	movw	r26, r16
    2362:	6c 93       	st	X, r22
    2364:	23 2b       	or	r18, r19
    2366:	24 2b       	or	r18, r20
    2368:	25 2b       	or	r18, r21
    236a:	61 f7       	brne	.-40     	; 0x2344 <_ZN5Print11printNumberEmh+0x40>
    236c:	b8 01       	movw	r22, r16
    236e:	c7 01       	movw	r24, r14
    2370:	0e 94 56 11 	call	0x22ac	; 0x22ac <_ZN5Print5writeEPKc>
    2374:	a1 96       	adiw	r28, 0x21	; 33
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	cd bf       	out	0x3d, r28	; 61
    2380:	df 91       	pop	r29
    2382:	cf 91       	pop	r28
    2384:	1f 91       	pop	r17
    2386:	0f 91       	pop	r16
    2388:	ff 90       	pop	r15
    238a:	ef 90       	pop	r14
    238c:	bf 90       	pop	r11
    238e:	af 90       	pop	r10
    2390:	9f 90       	pop	r9
    2392:	8f 90       	pop	r8
    2394:	08 95       	ret

00002396 <_ZN5Print5printEmi>:
    2396:	21 15       	cp	r18, r1
    2398:	31 05       	cpc	r19, r1
    239a:	41 f4       	brne	.+16     	; 0x23ac <_ZN5Print5printEmi+0x16>
    239c:	dc 01       	movw	r26, r24
    239e:	ed 91       	ld	r30, X+
    23a0:	fc 91       	ld	r31, X
    23a2:	01 90       	ld	r0, Z+
    23a4:	f0 81       	ld	r31, Z
    23a6:	e0 2d       	mov	r30, r0
    23a8:	64 2f       	mov	r22, r20
    23aa:	09 94       	ijmp
    23ac:	0c 94 82 11 	jmp	0x2304	; 0x2304 <_ZN5Print11printNumberEmh>

000023b0 <_ZN5Print5printEji>:
    23b0:	9a 01       	movw	r18, r20
    23b2:	ab 01       	movw	r20, r22
    23b4:	60 e0       	ldi	r22, 0x00	; 0
    23b6:	70 e0       	ldi	r23, 0x00	; 0
    23b8:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <_ZN5Print5printEmi>

000023bc <_ZN5Print5printEli>:
    23bc:	cf 92       	push	r12
    23be:	df 92       	push	r13
    23c0:	ef 92       	push	r14
    23c2:	ff 92       	push	r15
    23c4:	0f 93       	push	r16
    23c6:	1f 93       	push	r17
    23c8:	cf 93       	push	r28
    23ca:	df 93       	push	r29
    23cc:	21 15       	cp	r18, r1
    23ce:	31 05       	cpc	r19, r1
    23d0:	81 f4       	brne	.+32     	; 0x23f2 <_ZN5Print5printEli+0x36>
    23d2:	dc 01       	movw	r26, r24
    23d4:	ed 91       	ld	r30, X+
    23d6:	fc 91       	ld	r31, X
    23d8:	01 90       	ld	r0, Z+
    23da:	f0 81       	ld	r31, Z
    23dc:	e0 2d       	mov	r30, r0
    23de:	64 2f       	mov	r22, r20
    23e0:	df 91       	pop	r29
    23e2:	cf 91       	pop	r28
    23e4:	1f 91       	pop	r17
    23e6:	0f 91       	pop	r16
    23e8:	ff 90       	pop	r15
    23ea:	ef 90       	pop	r14
    23ec:	df 90       	pop	r13
    23ee:	cf 90       	pop	r12
    23f0:	09 94       	ijmp
    23f2:	2a 30       	cpi	r18, 0x0A	; 10
    23f4:	31 05       	cpc	r19, r1
    23f6:	01 f5       	brne	.+64     	; 0x2438 <_ZN5Print5printEli+0x7c>
    23f8:	77 ff       	sbrs	r23, 7
    23fa:	1d c0       	rjmp	.+58     	; 0x2436 <_ZN5Print5printEli+0x7a>
    23fc:	6a 01       	movw	r12, r20
    23fe:	7b 01       	movw	r14, r22
    2400:	ec 01       	movw	r28, r24
    2402:	6d e2       	ldi	r22, 0x2D	; 45
    2404:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <_ZN5Print5printEc>
    2408:	8c 01       	movw	r16, r24
    240a:	44 27       	eor	r20, r20
    240c:	55 27       	eor	r21, r21
    240e:	ba 01       	movw	r22, r20
    2410:	4c 19       	sub	r20, r12
    2412:	5d 09       	sbc	r21, r13
    2414:	6e 09       	sbc	r22, r14
    2416:	7f 09       	sbc	r23, r15
    2418:	2a e0       	ldi	r18, 0x0A	; 10
    241a:	ce 01       	movw	r24, r28
    241c:	0e 94 82 11 	call	0x2304	; 0x2304 <_ZN5Print11printNumberEmh>
    2420:	80 0f       	add	r24, r16
    2422:	91 1f       	adc	r25, r17
    2424:	df 91       	pop	r29
    2426:	cf 91       	pop	r28
    2428:	1f 91       	pop	r17
    242a:	0f 91       	pop	r16
    242c:	ff 90       	pop	r15
    242e:	ef 90       	pop	r14
    2430:	df 90       	pop	r13
    2432:	cf 90       	pop	r12
    2434:	08 95       	ret
    2436:	2a e0       	ldi	r18, 0x0A	; 10
    2438:	df 91       	pop	r29
    243a:	cf 91       	pop	r28
    243c:	1f 91       	pop	r17
    243e:	0f 91       	pop	r16
    2440:	ff 90       	pop	r15
    2442:	ef 90       	pop	r14
    2444:	df 90       	pop	r13
    2446:	cf 90       	pop	r12
    2448:	0c 94 82 11 	jmp	0x2304	; 0x2304 <_ZN5Print11printNumberEmh>

0000244c <_ZN5Print5printEii>:
    244c:	9a 01       	movw	r18, r20
    244e:	ab 01       	movw	r20, r22
    2450:	77 0f       	add	r23, r23
    2452:	66 0b       	sbc	r22, r22
    2454:	77 0b       	sbc	r23, r23
    2456:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <_ZN5Print5printEli>

0000245a <_ZN5Print10printFloatEdh>:
    245a:	7f 92       	push	r7
    245c:	8f 92       	push	r8
    245e:	9f 92       	push	r9
    2460:	af 92       	push	r10
    2462:	bf 92       	push	r11
    2464:	cf 92       	push	r12
    2466:	df 92       	push	r13
    2468:	ef 92       	push	r14
    246a:	ff 92       	push	r15
    246c:	0f 93       	push	r16
    246e:	1f 93       	push	r17
    2470:	cf 93       	push	r28
    2472:	df 93       	push	r29
    2474:	8c 01       	movw	r16, r24
    2476:	6a 01       	movw	r12, r20
    2478:	7b 01       	movw	r14, r22
    247a:	72 2e       	mov	r7, r18
    247c:	9a 01       	movw	r18, r20
    247e:	ab 01       	movw	r20, r22
    2480:	c7 01       	movw	r24, r14
    2482:	b6 01       	movw	r22, r12
    2484:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__unordsf2>
    2488:	88 23       	and	r24, r24
    248a:	19 f0       	breq	.+6      	; 0x2492 <_ZN5Print10printFloatEdh+0x38>
    248c:	69 e6       	ldi	r22, 0x69	; 105
    248e:	72 e0       	ldi	r23, 0x02	; 2
    2490:	27 c0       	rjmp	.+78     	; 0x24e0 <_ZN5Print10printFloatEdh+0x86>
    2492:	46 01       	movw	r8, r12
    2494:	57 01       	movw	r10, r14
    2496:	e8 94       	clt
    2498:	b7 f8       	bld	r11, 7
    249a:	2f ef       	ldi	r18, 0xFF	; 255
    249c:	3f ef       	ldi	r19, 0xFF	; 255
    249e:	4f e7       	ldi	r20, 0x7F	; 127
    24a0:	5f e7       	ldi	r21, 0x7F	; 127
    24a2:	c5 01       	movw	r24, r10
    24a4:	b4 01       	movw	r22, r8
    24a6:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__unordsf2>
    24aa:	81 11       	cpse	r24, r1
    24ac:	0d c0       	rjmp	.+26     	; 0x24c8 <_ZN5Print10printFloatEdh+0x6e>
    24ae:	2f ef       	ldi	r18, 0xFF	; 255
    24b0:	3f ef       	ldi	r19, 0xFF	; 255
    24b2:	4f e7       	ldi	r20, 0x7F	; 127
    24b4:	5f e7       	ldi	r21, 0x7F	; 127
    24b6:	c5 01       	movw	r24, r10
    24b8:	b4 01       	movw	r22, r8
    24ba:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__cmpsf2>
    24be:	18 16       	cp	r1, r24
    24c0:	1c f4       	brge	.+6      	; 0x24c8 <_ZN5Print10printFloatEdh+0x6e>
    24c2:	6d e6       	ldi	r22, 0x6D	; 109
    24c4:	72 e0       	ldi	r23, 0x02	; 2
    24c6:	0c c0       	rjmp	.+24     	; 0x24e0 <_ZN5Print10printFloatEdh+0x86>
    24c8:	2f ef       	ldi	r18, 0xFF	; 255
    24ca:	3f ef       	ldi	r19, 0xFF	; 255
    24cc:	4f e7       	ldi	r20, 0x7F	; 127
    24ce:	5f e4       	ldi	r21, 0x4F	; 79
    24d0:	c7 01       	movw	r24, r14
    24d2:	b6 01       	movw	r22, r12
    24d4:	0e 94 80 10 	call	0x2100	; 0x2100 <__gesf2>
    24d8:	18 16       	cp	r1, r24
    24da:	94 f4       	brge	.+36     	; 0x2500 <_ZN5Print10printFloatEdh+0xa6>
    24dc:	61 e7       	ldi	r22, 0x71	; 113
    24de:	72 e0       	ldi	r23, 0x02	; 2
    24e0:	c8 01       	movw	r24, r16
    24e2:	df 91       	pop	r29
    24e4:	cf 91       	pop	r28
    24e6:	1f 91       	pop	r17
    24e8:	0f 91       	pop	r16
    24ea:	ff 90       	pop	r15
    24ec:	ef 90       	pop	r14
    24ee:	df 90       	pop	r13
    24f0:	cf 90       	pop	r12
    24f2:	bf 90       	pop	r11
    24f4:	af 90       	pop	r10
    24f6:	9f 90       	pop	r9
    24f8:	8f 90       	pop	r8
    24fa:	7f 90       	pop	r7
    24fc:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <_ZN5Print5writeEPKc>
    2500:	2f ef       	ldi	r18, 0xFF	; 255
    2502:	3f ef       	ldi	r19, 0xFF	; 255
    2504:	4f e7       	ldi	r20, 0x7F	; 127
    2506:	5f ec       	ldi	r21, 0xCF	; 207
    2508:	c7 01       	movw	r24, r14
    250a:	b6 01       	movw	r22, r12
    250c:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__cmpsf2>
    2510:	87 fd       	sbrc	r24, 7
    2512:	e4 cf       	rjmp	.-56     	; 0x24dc <_ZN5Print10printFloatEdh+0x82>
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	a9 01       	movw	r20, r18
    251a:	c7 01       	movw	r24, r14
    251c:	b6 01       	movw	r22, r12
    251e:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__cmpsf2>
    2522:	87 ff       	sbrs	r24, 7
    2524:	0a c0       	rjmp	.+20     	; 0x253a <_ZN5Print10printFloatEdh+0xe0>
    2526:	6d e2       	ldi	r22, 0x2D	; 45
    2528:	c8 01       	movw	r24, r16
    252a:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <_ZN5Print5printEc>
    252e:	ec 01       	movw	r28, r24
    2530:	f7 fa       	bst	r15, 7
    2532:	f0 94       	com	r15
    2534:	f7 f8       	bld	r15, 7
    2536:	f0 94       	com	r15
    2538:	02 c0       	rjmp	.+4      	; 0x253e <_ZN5Print10printFloatEdh+0xe4>
    253a:	c0 e0       	ldi	r28, 0x00	; 0
    253c:	d0 e0       	ldi	r29, 0x00	; 0
    253e:	b1 2c       	mov	r11, r1
    2540:	60 e0       	ldi	r22, 0x00	; 0
    2542:	70 e0       	ldi	r23, 0x00	; 0
    2544:	80 e0       	ldi	r24, 0x00	; 0
    2546:	9f e3       	ldi	r25, 0x3F	; 63
    2548:	7b 14       	cp	r7, r11
    254a:	41 f0       	breq	.+16     	; 0x255c <_ZN5Print10printFloatEdh+0x102>
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	40 e2       	ldi	r20, 0x20	; 32
    2552:	51 e4       	ldi	r21, 0x41	; 65
    2554:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <__divsf3>
    2558:	b3 94       	inc	r11
    255a:	f6 cf       	rjmp	.-20     	; 0x2548 <_ZN5Print10printFloatEdh+0xee>
    255c:	a7 01       	movw	r20, r14
    255e:	96 01       	movw	r18, r12
    2560:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__addsf3>
    2564:	6b 01       	movw	r12, r22
    2566:	7c 01       	movw	r14, r24
    2568:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <__fixunssfsi>
    256c:	4b 01       	movw	r8, r22
    256e:	5c 01       	movw	r10, r24
    2570:	2a e0       	ldi	r18, 0x0A	; 10
    2572:	ab 01       	movw	r20, r22
    2574:	bc 01       	movw	r22, r24
    2576:	c8 01       	movw	r24, r16
    2578:	0e 94 82 11 	call	0x2304	; 0x2304 <_ZN5Print11printNumberEmh>
    257c:	c8 0f       	add	r28, r24
    257e:	d9 1f       	adc	r29, r25
    2580:	77 20       	and	r7, r7
    2582:	b9 f1       	breq	.+110    	; 0x25f2 <_ZN5Print10printFloatEdh+0x198>
    2584:	c5 01       	movw	r24, r10
    2586:	b4 01       	movw	r22, r8
    2588:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <__floatunsisf>
    258c:	9b 01       	movw	r18, r22
    258e:	ac 01       	movw	r20, r24
    2590:	c7 01       	movw	r24, r14
    2592:	b6 01       	movw	r22, r12
    2594:	0e 94 89 1b 	call	0x3712	; 0x3712 <__subsf3>
    2598:	6b 01       	movw	r12, r22
    259a:	7c 01       	movw	r14, r24
    259c:	6e e2       	ldi	r22, 0x2E	; 46
    259e:	c8 01       	movw	r24, r16
    25a0:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <_ZN5Print5printEc>
    25a4:	c8 0f       	add	r28, r24
    25a6:	d9 1f       	adc	r29, r25
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	40 e2       	ldi	r20, 0x20	; 32
    25ae:	51 e4       	ldi	r21, 0x41	; 65
    25b0:	c7 01       	movw	r24, r14
    25b2:	b6 01       	movw	r22, r12
    25b4:	0e 94 85 10 	call	0x210a	; 0x210a <__mulsf3>
    25b8:	4b 01       	movw	r8, r22
    25ba:	5c 01       	movw	r10, r24
    25bc:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <__fixunssfsi>
    25c0:	6b 01       	movw	r12, r22
    25c2:	7c 01       	movw	r14, r24
    25c4:	4a e0       	ldi	r20, 0x0A	; 10
    25c6:	50 e0       	ldi	r21, 0x00	; 0
    25c8:	c8 01       	movw	r24, r16
    25ca:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <_ZN5Print5printEji>
    25ce:	c8 0f       	add	r28, r24
    25d0:	d9 1f       	adc	r29, r25
    25d2:	b6 01       	movw	r22, r12
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <__floatunsisf>
    25dc:	9b 01       	movw	r18, r22
    25de:	ac 01       	movw	r20, r24
    25e0:	c5 01       	movw	r24, r10
    25e2:	b4 01       	movw	r22, r8
    25e4:	0e 94 89 1b 	call	0x3712	; 0x3712 <__subsf3>
    25e8:	6b 01       	movw	r12, r22
    25ea:	7c 01       	movw	r14, r24
    25ec:	7a 94       	dec	r7
    25ee:	71 10       	cpse	r7, r1
    25f0:	db cf       	rjmp	.-74     	; 0x25a8 <_ZN5Print10printFloatEdh+0x14e>
    25f2:	ce 01       	movw	r24, r28
    25f4:	df 91       	pop	r29
    25f6:	cf 91       	pop	r28
    25f8:	1f 91       	pop	r17
    25fa:	0f 91       	pop	r16
    25fc:	ff 90       	pop	r15
    25fe:	ef 90       	pop	r14
    2600:	df 90       	pop	r13
    2602:	cf 90       	pop	r12
    2604:	bf 90       	pop	r11
    2606:	af 90       	pop	r10
    2608:	9f 90       	pop	r9
    260a:	8f 90       	pop	r8
    260c:	7f 90       	pop	r7
    260e:	08 95       	ret

00002610 <_ZN5Print5printEdi>:
    2610:	0c 94 2d 12 	jmp	0x245a	; 0x245a <_ZN5Print10printFloatEdh>

00002614 <_ZL4RecvPVhh>:
    2614:	61 50       	subi	r22, 0x01	; 1
    2616:	30 f0       	brcs	.+12     	; 0x2624 <_ZL4RecvPVhh+0x10>
    2618:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    261c:	fc 01       	movw	r30, r24
    261e:	20 83       	st	Z, r18
    2620:	01 96       	adiw	r24, 0x01	; 1
    2622:	f8 cf       	rjmp	.-16     	; 0x2614 <_ZL4RecvPVhh>
    2624:	28 98       	cbi	0x05, 0	; 5
    2626:	84 e6       	ldi	r24, 0x64	; 100
    2628:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <RxLEDPulse>
    262c:	08 95       	ret

0000262e <_ZL11SendControlh>:
    262e:	40 91 69 04 	lds	r20, 0x0469	; 0x800469 <_ZL6_cmark>
    2632:	50 91 6a 04 	lds	r21, 0x046A	; 0x80046a <_ZL6_cmark+0x1>
    2636:	20 91 67 04 	lds	r18, 0x0467	; 0x800467 <_ZL5_cend>
    263a:	30 91 68 04 	lds	r19, 0x0468	; 0x800468 <_ZL5_cend+0x1>
    263e:	42 17       	cp	r20, r18
    2640:	53 07       	cpc	r21, r19
    2642:	b4 f4       	brge	.+44     	; 0x2670 <_ZL11SendControlh+0x42>
    2644:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2648:	95 70       	andi	r25, 0x05	; 5
    264a:	e1 f3       	breq	.-8      	; 0x2644 <_ZL11SendControlh+0x16>
    264c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2650:	92 fd       	sbrc	r25, 2
    2652:	19 c0       	rjmp	.+50     	; 0x2686 <_ZL11SendControlh+0x58>
    2654:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2658:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <_ZL6_cmark>
    265c:	90 91 6a 04 	lds	r25, 0x046A	; 0x80046a <_ZL6_cmark+0x1>
    2660:	01 96       	adiw	r24, 0x01	; 1
    2662:	8f 73       	andi	r24, 0x3F	; 63
    2664:	99 27       	eor	r25, r25
    2666:	89 2b       	or	r24, r25
    2668:	19 f4       	brne	.+6      	; 0x2670 <_ZL11SendControlh+0x42>
    266a:	8e ef       	ldi	r24, 0xFE	; 254
    266c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2670:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <_ZL6_cmark>
    2674:	90 91 6a 04 	lds	r25, 0x046A	; 0x80046a <_ZL6_cmark+0x1>
    2678:	01 96       	adiw	r24, 0x01	; 1
    267a:	90 93 6a 04 	sts	0x046A, r25	; 0x80046a <_ZL6_cmark+0x1>
    267e:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <_ZL6_cmark>
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	08 95       	ret
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	08 95       	ret

0000268a <_ZL24USB_SendStringDescriptorPKhhh>:
    268a:	df 92       	push	r13
    268c:	ef 92       	push	r14
    268e:	ff 92       	push	r15
    2690:	0f 93       	push	r16
    2692:	1f 93       	push	r17
    2694:	cf 93       	push	r28
    2696:	df 93       	push	r29
    2698:	d8 2e       	mov	r13, r24
    269a:	f9 2e       	mov	r15, r25
    269c:	e4 2e       	mov	r14, r20
    269e:	06 2f       	mov	r16, r22
    26a0:	10 e0       	ldi	r17, 0x00	; 0
    26a2:	c8 01       	movw	r24, r16
    26a4:	01 96       	adiw	r24, 0x01	; 1
    26a6:	88 0f       	add	r24, r24
    26a8:	0e 94 17 13 	call	0x262e	; 0x262e <_ZL11SendControlh>
    26ac:	83 e0       	ldi	r24, 0x03	; 3
    26ae:	0e 94 17 13 	call	0x262e	; 0x262e <_ZL11SendControlh>
    26b2:	cd 2d       	mov	r28, r13
    26b4:	df 2d       	mov	r29, r15
    26b6:	0c 0f       	add	r16, r28
    26b8:	1d 1f       	adc	r17, r29
    26ba:	c0 17       	cp	r28, r16
    26bc:	d1 07       	cpc	r29, r17
    26be:	89 f0       	breq	.+34     	; 0x26e2 <_ZL24USB_SendStringDescriptorPKhhh+0x58>
    26c0:	e7 fe       	sbrs	r14, 7
    26c2:	03 c0       	rjmp	.+6      	; 0x26ca <_ZL24USB_SendStringDescriptorPKhhh+0x40>
    26c4:	fe 01       	movw	r30, r28
    26c6:	84 91       	lpm	r24, Z
    26c8:	01 c0       	rjmp	.+2      	; 0x26cc <_ZL24USB_SendStringDescriptorPKhhh+0x42>
    26ca:	88 81       	ld	r24, Y
    26cc:	0e 94 17 13 	call	0x262e	; 0x262e <_ZL11SendControlh>
    26d0:	f8 2e       	mov	r15, r24
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	0e 94 17 13 	call	0x262e	; 0x262e <_ZL11SendControlh>
    26d8:	8f 21       	and	r24, r15
    26da:	21 96       	adiw	r28, 0x01	; 1
    26dc:	81 11       	cpse	r24, r1
    26de:	ed cf       	rjmp	.-38     	; 0x26ba <_ZL24USB_SendStringDescriptorPKhhh+0x30>
    26e0:	01 c0       	rjmp	.+2      	; 0x26e4 <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	df 91       	pop	r29
    26e6:	cf 91       	pop	r28
    26e8:	1f 91       	pop	r17
    26ea:	0f 91       	pop	r16
    26ec:	ff 90       	pop	r15
    26ee:	ef 90       	pop	r14
    26f0:	df 90       	pop	r13
    26f2:	08 95       	ret

000026f4 <_ZL15USB_ClockEnablev>:
    26f4:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    26f8:	81 60       	ori	r24, 0x01	; 1
    26fa:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    26fe:	80 ea       	ldi	r24, 0xA0	; 160
    2700:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2704:	89 b5       	in	r24, 0x29	; 41
    2706:	80 61       	ori	r24, 0x10	; 16
    2708:	89 bd       	out	0x29, r24	; 41
    270a:	89 b5       	in	r24, 0x29	; 41
    270c:	82 60       	ori	r24, 0x02	; 2
    270e:	89 bd       	out	0x29, r24	; 41
    2710:	09 b4       	in	r0, 0x29	; 41
    2712:	00 fe       	sbrs	r0, 0
    2714:	fd cf       	rjmp	.-6      	; 0x2710 <_ZL15USB_ClockEnablev+0x1c>
    2716:	61 e0       	ldi	r22, 0x01	; 1
    2718:	70 e0       	ldi	r23, 0x00	; 0
    271a:	80 e0       	ldi	r24, 0x00	; 0
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <delay>
    2722:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2726:	8f 7c       	andi	r24, 0xCF	; 207
    2728:	80 61       	ori	r24, 0x10	; 16
    272a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    272e:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2732:	80 7f       	andi	r24, 0xF0	; 240
    2734:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2738:	08 95       	ret

0000273a <_ZL14SendInterfacesv>:
    273a:	cf 93       	push	r28
    273c:	df 93       	push	r29
    273e:	1f 92       	push	r1
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	19 82       	std	Y+1, r1	; 0x01
    2746:	ce 01       	movw	r24, r28
    2748:	01 96       	adiw	r24, 0x01	; 1
    274a:	0e 94 41 1a 	call	0x3482	; 0x3482 <_Z16CDC_GetInterfacePh>
    274e:	0e 94 75 1b 	call	0x36ea	; 0x36ea <_Z12PluggableUSBv>
    2752:	be 01       	movw	r22, r28
    2754:	6f 5f       	subi	r22, 0xFF	; 255
    2756:	7f 4f       	sbci	r23, 0xFF	; 255
    2758:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <_ZN13PluggableUSB_12getInterfaceEPh>
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	0f 90       	pop	r0
    2760:	df 91       	pop	r29
    2762:	cf 91       	pop	r28
    2764:	08 95       	ret

00002766 <_ZN6LockEPC1Eh>:
    2766:	2f b7       	in	r18, 0x3f	; 63
    2768:	fc 01       	movw	r30, r24
    276a:	20 83       	st	Z, r18
    276c:	f8 94       	cli
    276e:	67 70       	andi	r22, 0x07	; 7
    2770:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2774:	08 95       	ret

00002776 <_Z13USB_Availableh>:
    2776:	cf 93       	push	r28
    2778:	df 93       	push	r29
    277a:	1f 92       	push	r1
    277c:	cd b7       	in	r28, 0x3d	; 61
    277e:	de b7       	in	r29, 0x3e	; 62
    2780:	68 2f       	mov	r22, r24
    2782:	ce 01       	movw	r24, r28
    2784:	01 96       	adiw	r24, 0x01	; 1
    2786:	0e 94 b3 13 	call	0x2766	; 0x2766 <_ZN6LockEPC1Eh>
    278a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    278e:	99 81       	ldd	r25, Y+1	; 0x01
    2790:	9f bf       	out	0x3f, r25	; 63
    2792:	0f 90       	pop	r0
    2794:	df 91       	pop	r29
    2796:	cf 91       	pop	r28
    2798:	08 95       	ret

0000279a <_Z8USB_RecvhPvi>:
    279a:	ef 92       	push	r14
    279c:	ff 92       	push	r15
    279e:	0f 93       	push	r16
    27a0:	1f 93       	push	r17
    27a2:	cf 93       	push	r28
    27a4:	df 93       	push	r29
    27a6:	1f 92       	push	r1
    27a8:	cd b7       	in	r28, 0x3d	; 61
    27aa:	de b7       	in	r29, 0x3e	; 62
    27ac:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <_usbConfiguration>
    27b0:	99 23       	and	r25, r25
    27b2:	11 f0       	breq	.+4      	; 0x27b8 <_Z8USB_RecvhPvi+0x1e>
    27b4:	57 ff       	sbrs	r21, 7
    27b6:	03 c0       	rjmp	.+6      	; 0x27be <_Z8USB_RecvhPvi+0x24>
    27b8:	8f ef       	ldi	r24, 0xFF	; 255
    27ba:	9f ef       	ldi	r25, 0xFF	; 255
    27bc:	29 c0       	rjmp	.+82     	; 0x2810 <_Z8USB_RecvhPvi+0x76>
    27be:	8a 01       	movw	r16, r20
    27c0:	7b 01       	movw	r14, r22
    27c2:	68 2f       	mov	r22, r24
    27c4:	ce 01       	movw	r24, r28
    27c6:	01 96       	adiw	r24, 0x01	; 1
    27c8:	0e 94 b3 13 	call	0x2766	; 0x2766 <_ZN6LockEPC1Eh>
    27cc:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	02 17       	cp	r16, r18
    27d4:	13 07       	cpc	r17, r19
    27d6:	0c f4       	brge	.+2      	; 0x27da <_Z8USB_RecvhPvi+0x40>
    27d8:	98 01       	movw	r18, r16
    27da:	82 2f       	mov	r24, r18
    27dc:	f7 01       	movw	r30, r14
    27de:	94 e6       	ldi	r25, 0x64	; 100
    27e0:	81 50       	subi	r24, 0x01	; 1
    27e2:	38 f0       	brcs	.+14     	; 0x27f2 <_Z8USB_RecvhPvi+0x58>
    27e4:	28 98       	cbi	0x05, 0	; 5
    27e6:	90 93 6e 04 	sts	0x046E, r25	; 0x80046e <RxLEDPulse>
    27ea:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    27ee:	41 93       	st	Z+, r20
    27f0:	f7 cf       	rjmp	.-18     	; 0x27e0 <_Z8USB_RecvhPvi+0x46>
    27f2:	21 15       	cp	r18, r1
    27f4:	31 05       	cpc	r19, r1
    27f6:	21 f0       	breq	.+8      	; 0x2800 <_Z8USB_RecvhPvi+0x66>
    27f8:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    27fc:	88 23       	and	r24, r24
    27fe:	21 f0       	breq	.+8      	; 0x2808 <_Z8USB_RecvhPvi+0x6e>
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	8f bf       	out	0x3f, r24	; 63
    2804:	c9 01       	movw	r24, r18
    2806:	04 c0       	rjmp	.+8      	; 0x2810 <_Z8USB_RecvhPvi+0x76>
    2808:	8b e6       	ldi	r24, 0x6B	; 107
    280a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    280e:	f8 cf       	rjmp	.-16     	; 0x2800 <_Z8USB_RecvhPvi+0x66>
    2810:	0f 90       	pop	r0
    2812:	df 91       	pop	r29
    2814:	cf 91       	pop	r28
    2816:	1f 91       	pop	r17
    2818:	0f 91       	pop	r16
    281a:	ff 90       	pop	r15
    281c:	ef 90       	pop	r14
    281e:	08 95       	ret

00002820 <_Z8USB_Recvh>:
    2820:	cf 93       	push	r28
    2822:	df 93       	push	r29
    2824:	1f 92       	push	r1
    2826:	cd b7       	in	r28, 0x3d	; 61
    2828:	de b7       	in	r29, 0x3e	; 62
    282a:	41 e0       	ldi	r20, 0x01	; 1
    282c:	50 e0       	ldi	r21, 0x00	; 0
    282e:	be 01       	movw	r22, r28
    2830:	6f 5f       	subi	r22, 0xFF	; 255
    2832:	7f 4f       	sbci	r23, 0xFF	; 255
    2834:	0e 94 cd 13 	call	0x279a	; 0x279a <_Z8USB_RecvhPvi>
    2838:	01 97       	sbiw	r24, 0x01	; 1
    283a:	19 f4       	brne	.+6      	; 0x2842 <_Z8USB_Recvh+0x22>
    283c:	89 81       	ldd	r24, Y+1	; 0x01
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	02 c0       	rjmp	.+4      	; 0x2846 <_Z8USB_Recvh+0x26>
    2842:	8f ef       	ldi	r24, 0xFF	; 255
    2844:	9f ef       	ldi	r25, 0xFF	; 255
    2846:	0f 90       	pop	r0
    2848:	df 91       	pop	r29
    284a:	cf 91       	pop	r28
    284c:	08 95       	ret

0000284e <_Z13USB_SendSpaceh>:
    284e:	cf 93       	push	r28
    2850:	df 93       	push	r29
    2852:	1f 92       	push	r1
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
    2858:	68 2f       	mov	r22, r24
    285a:	ce 01       	movw	r24, r28
    285c:	01 96       	adiw	r24, 0x01	; 1
    285e:	0e 94 b3 13 	call	0x2766	; 0x2766 <_ZN6LockEPC1Eh>
    2862:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2866:	89 2f       	mov	r24, r25
    2868:	80 72       	andi	r24, 0x20	; 32
    286a:	95 ff       	sbrs	r25, 5
    286c:	04 c0       	rjmp	.+8      	; 0x2876 <_Z13USB_SendSpaceh+0x28>
    286e:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2872:	80 e4       	ldi	r24, 0x40	; 64
    2874:	89 1b       	sub	r24, r25
    2876:	99 81       	ldd	r25, Y+1	; 0x01
    2878:	9f bf       	out	0x3f, r25	; 63
    287a:	0f 90       	pop	r0
    287c:	df 91       	pop	r29
    287e:	cf 91       	pop	r28
    2880:	08 95       	ret

00002882 <_Z8USB_SendhPKvi>:
    2882:	5f 92       	push	r5
    2884:	6f 92       	push	r6
    2886:	7f 92       	push	r7
    2888:	8f 92       	push	r8
    288a:	9f 92       	push	r9
    288c:	af 92       	push	r10
    288e:	bf 92       	push	r11
    2890:	cf 92       	push	r12
    2892:	df 92       	push	r13
    2894:	ef 92       	push	r14
    2896:	ff 92       	push	r15
    2898:	0f 93       	push	r16
    289a:	1f 93       	push	r17
    289c:	cf 93       	push	r28
    289e:	df 93       	push	r29
    28a0:	1f 92       	push	r1
    28a2:	cd b7       	in	r28, 0x3d	; 61
    28a4:	de b7       	in	r29, 0x3e	; 62
    28a6:	98 2e       	mov	r9, r24
    28a8:	6b 01       	movw	r12, r22
    28aa:	b4 2e       	mov	r11, r20
    28ac:	05 2f       	mov	r16, r21
    28ae:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <_usbConfiguration>
    28b2:	81 11       	cpse	r24, r1
    28b4:	03 c0       	rjmp	.+6      	; 0x28bc <_Z8USB_SendhPKvi+0x3a>
    28b6:	8f ef       	ldi	r24, 0xFF	; 255
    28b8:	9f ef       	ldi	r25, 0xFF	; 255
    28ba:	77 c0       	rjmp	.+238    	; 0x29aa <_Z8USB_SendhPKvi+0x128>
    28bc:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <_usbSuspendState>
    28c0:	80 ff       	sbrs	r24, 0
    28c2:	05 c0       	rjmp	.+10     	; 0x28ce <_Z8USB_SendhPKvi+0x4c>
    28c4:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    28c8:	82 60       	ori	r24, 0x02	; 2
    28ca:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    28ce:	eb 2c       	mov	r14, r11
    28d0:	f0 2e       	mov	r15, r16
    28d2:	a1 2c       	mov	r10, r1
    28d4:	8a ef       	ldi	r24, 0xFA	; 250
    28d6:	88 2e       	mov	r8, r24
    28d8:	89 2d       	mov	r24, r9
    28da:	80 72       	andi	r24, 0x20	; 32
    28dc:	68 2e       	mov	r6, r24
    28de:	89 2d       	mov	r24, r9
    28e0:	80 74       	andi	r24, 0x40	; 64
    28e2:	58 2e       	mov	r5, r24
    28e4:	9a e3       	ldi	r25, 0x3A	; 58
    28e6:	79 2e       	mov	r7, r25
    28e8:	e1 14       	cp	r14, r1
    28ea:	f1 04       	cpc	r15, r1
    28ec:	19 f4       	brne	.+6      	; 0x28f4 <_Z8USB_SendhPKvi+0x72>
    28ee:	aa 20       	and	r10, r10
    28f0:	09 f4       	brne	.+2      	; 0x28f4 <_Z8USB_SendhPKvi+0x72>
    28f2:	55 c0       	rjmp	.+170    	; 0x299e <_Z8USB_SendhPKvi+0x11c>
    28f4:	89 2d       	mov	r24, r9
    28f6:	0e 94 27 14 	call	0x284e	; 0x284e <_Z13USB_SendSpaceh>
    28fa:	18 2f       	mov	r17, r24
    28fc:	81 11       	cpse	r24, r1
    28fe:	0a c0       	rjmp	.+20     	; 0x2914 <_Z8USB_SendhPKvi+0x92>
    2900:	8a 94       	dec	r8
    2902:	88 20       	and	r8, r8
    2904:	c1 f2       	breq	.-80     	; 0x28b6 <_Z8USB_SendhPKvi+0x34>
    2906:	61 e0       	ldi	r22, 0x01	; 1
    2908:	70 e0       	ldi	r23, 0x00	; 0
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <delay>
    2912:	ea cf       	rjmp	.-44     	; 0x28e8 <_Z8USB_SendhPKvi+0x66>
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	e8 16       	cp	r14, r24
    2918:	f9 06       	cpc	r15, r25
    291a:	0c f4       	brge	.+2      	; 0x291e <_Z8USB_SendhPKvi+0x9c>
    291c:	1e 2d       	mov	r17, r14
    291e:	69 2d       	mov	r22, r9
    2920:	ce 01       	movw	r24, r28
    2922:	01 96       	adiw	r24, 0x01	; 1
    2924:	0e 94 b3 13 	call	0x2766	; 0x2766 <_ZN6LockEPC1Eh>
    2928:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    292c:	85 ff       	sbrs	r24, 5
    292e:	34 c0       	rjmp	.+104    	; 0x2998 <_Z8USB_SendhPKvi+0x116>
    2930:	81 2f       	mov	r24, r17
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	e8 1a       	sub	r14, r24
    2936:	f9 0a       	sbc	r15, r25
    2938:	66 20       	and	r6, r6
    293a:	29 f0       	breq	.+10     	; 0x2946 <_Z8USB_SendhPKvi+0xc4>
    293c:	11 50       	subi	r17, 0x01	; 1
    293e:	a0 f0       	brcs	.+40     	; 0x2968 <_Z8USB_SendhPKvi+0xe6>
    2940:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2944:	fb cf       	rjmp	.-10     	; 0x293c <_Z8USB_SendhPKvi+0xba>
    2946:	f6 01       	movw	r30, r12
    2948:	97 fe       	sbrs	r9, 7
    294a:	0a c0       	rjmp	.+20     	; 0x2960 <_Z8USB_SendhPKvi+0xde>
    294c:	11 50       	subi	r17, 0x01	; 1
    294e:	50 f0       	brcs	.+20     	; 0x2964 <_Z8USB_SendhPKvi+0xe2>
    2950:	24 91       	lpm	r18, Z
    2952:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2956:	31 96       	adiw	r30, 0x01	; 1
    2958:	f9 cf       	rjmp	.-14     	; 0x294c <_Z8USB_SendhPKvi+0xca>
    295a:	21 91       	ld	r18, Z+
    295c:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2960:	11 50       	subi	r17, 0x01	; 1
    2962:	d8 f7       	brcc	.-10     	; 0x295a <_Z8USB_SendhPKvi+0xd8>
    2964:	c8 0e       	add	r12, r24
    2966:	d9 1e       	adc	r13, r25
    2968:	aa 20       	and	r10, r10
    296a:	19 f0       	breq	.+6      	; 0x2972 <_Z8USB_SendhPKvi+0xf0>
    296c:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2970:	0b c0       	rjmp	.+22     	; 0x2988 <_Z8USB_SendhPKvi+0x106>
    2972:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2976:	85 fd       	sbrc	r24, 5
    2978:	09 c0       	rjmp	.+18     	; 0x298c <_Z8USB_SendhPKvi+0x10a>
    297a:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    297e:	aa 24       	eor	r10, r10
    2980:	a3 94       	inc	r10
    2982:	e1 14       	cp	r14, r1
    2984:	f1 04       	cpc	r15, r1
    2986:	41 f0       	breq	.+16     	; 0x2998 <_Z8USB_SendhPKvi+0x116>
    2988:	a1 2c       	mov	r10, r1
    298a:	06 c0       	rjmp	.+12     	; 0x2998 <_Z8USB_SendhPKvi+0x116>
    298c:	e1 14       	cp	r14, r1
    298e:	f1 04       	cpc	r15, r1
    2990:	19 f4       	brne	.+6      	; 0x2998 <_Z8USB_SendhPKvi+0x116>
    2992:	51 10       	cpse	r5, r1
    2994:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2998:	89 81       	ldd	r24, Y+1	; 0x01
    299a:	8f bf       	out	0x3f, r24	; 63
    299c:	a5 cf       	rjmp	.-182    	; 0x28e8 <_Z8USB_SendhPKvi+0x66>
    299e:	5d 98       	cbi	0x0b, 5	; 11
    29a0:	84 e6       	ldi	r24, 0x64	; 100
    29a2:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <TxLEDPulse>
    29a6:	8b 2d       	mov	r24, r11
    29a8:	90 2f       	mov	r25, r16
    29aa:	0f 90       	pop	r0
    29ac:	df 91       	pop	r29
    29ae:	cf 91       	pop	r28
    29b0:	1f 91       	pop	r17
    29b2:	0f 91       	pop	r16
    29b4:	ff 90       	pop	r15
    29b6:	ef 90       	pop	r14
    29b8:	df 90       	pop	r13
    29ba:	cf 90       	pop	r12
    29bc:	bf 90       	pop	r11
    29be:	af 90       	pop	r10
    29c0:	9f 90       	pop	r9
    29c2:	8f 90       	pop	r8
    29c4:	7f 90       	pop	r7
    29c6:	6f 90       	pop	r6
    29c8:	5f 90       	pop	r5
    29ca:	08 95       	ret

000029cc <_Z11InitControli>:
    29cc:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    29d0:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <_ZL6_cmark+0x1>
    29d4:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <_ZL6_cmark>
    29d8:	90 93 68 04 	sts	0x0468, r25	; 0x800468 <_ZL5_cend+0x1>
    29dc:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <_ZL5_cend>
    29e0:	08 95       	ret

000029e2 <_Z15USB_SendControlhPKvi>:
    29e2:	df 92       	push	r13
    29e4:	ef 92       	push	r14
    29e6:	ff 92       	push	r15
    29e8:	0f 93       	push	r16
    29ea:	1f 93       	push	r17
    29ec:	cf 93       	push	r28
    29ee:	df 93       	push	r29
    29f0:	d8 2e       	mov	r13, r24
    29f2:	8a 01       	movw	r16, r20
    29f4:	7b 01       	movw	r14, r22
    29f6:	e4 0e       	add	r14, r20
    29f8:	f5 1e       	adc	r15, r21
    29fa:	eb 01       	movw	r28, r22
    29fc:	ce 15       	cp	r28, r14
    29fe:	df 05       	cpc	r29, r15
    2a00:	71 f0       	breq	.+28     	; 0x2a1e <_Z15USB_SendControlhPKvi+0x3c>
    2a02:	d7 fe       	sbrs	r13, 7
    2a04:	03 c0       	rjmp	.+6      	; 0x2a0c <_Z15USB_SendControlhPKvi+0x2a>
    2a06:	fe 01       	movw	r30, r28
    2a08:	84 91       	lpm	r24, Z
    2a0a:	01 c0       	rjmp	.+2      	; 0x2a0e <_Z15USB_SendControlhPKvi+0x2c>
    2a0c:	88 81       	ld	r24, Y
    2a0e:	0e 94 17 13 	call	0x262e	; 0x262e <_ZL11SendControlh>
    2a12:	21 96       	adiw	r28, 0x01	; 1
    2a14:	81 11       	cpse	r24, r1
    2a16:	f2 cf       	rjmp	.-28     	; 0x29fc <_Z15USB_SendControlhPKvi+0x1a>
    2a18:	8f ef       	ldi	r24, 0xFF	; 255
    2a1a:	9f ef       	ldi	r25, 0xFF	; 255
    2a1c:	01 c0       	rjmp	.+2      	; 0x2a20 <_Z15USB_SendControlhPKvi+0x3e>
    2a1e:	c8 01       	movw	r24, r16
    2a20:	df 91       	pop	r29
    2a22:	cf 91       	pop	r28
    2a24:	1f 91       	pop	r17
    2a26:	0f 91       	pop	r16
    2a28:	ff 90       	pop	r15
    2a2a:	ef 90       	pop	r14
    2a2c:	df 90       	pop	r13
    2a2e:	08 95       	ret

00002a30 <_Z15USB_RecvControlPvi>:
    2a30:	af 92       	push	r10
    2a32:	bf 92       	push	r11
    2a34:	df 92       	push	r13
    2a36:	ef 92       	push	r14
    2a38:	ff 92       	push	r15
    2a3a:	0f 93       	push	r16
    2a3c:	1f 93       	push	r17
    2a3e:	cf 93       	push	r28
    2a40:	df 93       	push	r29
    2a42:	5c 01       	movw	r10, r24
    2a44:	8b 01       	movw	r16, r22
    2a46:	eb 01       	movw	r28, r22
    2a48:	9b ef       	ldi	r25, 0xFB	; 251
    2a4a:	d9 2e       	mov	r13, r25
    2a4c:	20 97       	sbiw	r28, 0x00	; 0
    2a4e:	c1 f0       	breq	.+48     	; 0x2a80 <_Z15USB_RecvControlPvi+0x50>
    2a50:	7e 01       	movw	r14, r28
    2a52:	c1 34       	cpi	r28, 0x41	; 65
    2a54:	d1 05       	cpc	r29, r1
    2a56:	1c f0       	brlt	.+6      	; 0x2a5e <_Z15USB_RecvControlPvi+0x2e>
    2a58:	80 e4       	ldi	r24, 0x40	; 64
    2a5a:	e8 2e       	mov	r14, r24
    2a5c:	f1 2c       	mov	r15, r1
    2a5e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a62:	82 ff       	sbrs	r24, 2
    2a64:	fc cf       	rjmp	.-8      	; 0x2a5e <_Z15USB_RecvControlPvi+0x2e>
    2a66:	c8 01       	movw	r24, r16
    2a68:	8c 1b       	sub	r24, r28
    2a6a:	9d 0b       	sbc	r25, r29
    2a6c:	6e 2d       	mov	r22, r14
    2a6e:	8a 0d       	add	r24, r10
    2a70:	9b 1d       	adc	r25, r11
    2a72:	0e 94 0a 13 	call	0x2614	; 0x2614 <_ZL4RecvPVhh>
    2a76:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2a7a:	ce 19       	sub	r28, r14
    2a7c:	df 09       	sbc	r29, r15
    2a7e:	e6 cf       	rjmp	.-52     	; 0x2a4c <_Z15USB_RecvControlPvi+0x1c>
    2a80:	c8 01       	movw	r24, r16
    2a82:	df 91       	pop	r29
    2a84:	cf 91       	pop	r28
    2a86:	1f 91       	pop	r17
    2a88:	0f 91       	pop	r16
    2a8a:	ff 90       	pop	r15
    2a8c:	ef 90       	pop	r14
    2a8e:	df 90       	pop	r13
    2a90:	bf 90       	pop	r11
    2a92:	af 90       	pop	r10
    2a94:	08 95       	ret

00002a96 <__vector_11>:
    2a96:	1f 92       	push	r1
    2a98:	0f 92       	push	r0
    2a9a:	0f b6       	in	r0, 0x3f	; 63
    2a9c:	0f 92       	push	r0
    2a9e:	11 24       	eor	r1, r1
    2aa0:	cf 92       	push	r12
    2aa2:	df 92       	push	r13
    2aa4:	ef 92       	push	r14
    2aa6:	ff 92       	push	r15
    2aa8:	0f 93       	push	r16
    2aaa:	1f 93       	push	r17
    2aac:	2f 93       	push	r18
    2aae:	3f 93       	push	r19
    2ab0:	4f 93       	push	r20
    2ab2:	5f 93       	push	r21
    2ab4:	6f 93       	push	r22
    2ab6:	7f 93       	push	r23
    2ab8:	8f 93       	push	r24
    2aba:	9f 93       	push	r25
    2abc:	af 93       	push	r26
    2abe:	bf 93       	push	r27
    2ac0:	ef 93       	push	r30
    2ac2:	ff 93       	push	r31
    2ac4:	cf 93       	push	r28
    2ac6:	df 93       	push	r29
    2ac8:	cd b7       	in	r28, 0x3d	; 61
    2aca:	de b7       	in	r29, 0x3e	; 62
    2acc:	6c 97       	sbiw	r28, 0x1c	; 28
    2ace:	de bf       	out	0x3e, r29	; 62
    2ad0:	cd bf       	out	0x3d, r28	; 61
    2ad2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2ad6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2ada:	83 ff       	sbrs	r24, 3
    2adc:	17 c1       	rjmp	.+558    	; 0x2d0c <__vector_11+0x276>
    2ade:	68 e0       	ldi	r22, 0x08	; 8
    2ae0:	ce 01       	movw	r24, r28
    2ae2:	45 96       	adiw	r24, 0x15	; 21
    2ae4:	0e 94 0a 13 	call	0x2614	; 0x2614 <_ZL4RecvPVhh>
    2ae8:	82 ef       	ldi	r24, 0xF2	; 242
    2aea:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2aee:	8d 89       	ldd	r24, Y+21	; 0x15
    2af0:	87 ff       	sbrs	r24, 7
    2af2:	05 c0       	rjmp	.+10     	; 0x2afe <__vector_11+0x68>
    2af4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2af8:	90 ff       	sbrs	r25, 0
    2afa:	fc cf       	rjmp	.-8      	; 0x2af4 <__vector_11+0x5e>
    2afc:	03 c0       	rjmp	.+6      	; 0x2b04 <__vector_11+0x6e>
    2afe:	9e ef       	ldi	r25, 0xFE	; 254
    2b00:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2b04:	98 2f       	mov	r25, r24
    2b06:	90 76       	andi	r25, 0x60	; 96
    2b08:	09 f0       	breq	.+2      	; 0x2b0c <__vector_11+0x76>
    2b0a:	d8 c0       	rjmp	.+432    	; 0x2cbc <__vector_11+0x226>
    2b0c:	9e 89       	ldd	r25, Y+22	; 0x16
    2b0e:	4f 89       	ldd	r20, Y+23	; 0x17
    2b10:	58 8d       	ldd	r21, Y+24	; 0x18
    2b12:	2f 89       	ldd	r18, Y+23	; 0x17
    2b14:	18 8d       	ldd	r17, Y+24	; 0x18
    2b16:	91 11       	cpse	r25, r1
    2b18:	0c c0       	rjmp	.+24     	; 0x2b32 <__vector_11+0x9c>
    2b1a:	80 38       	cpi	r24, 0x80	; 128
    2b1c:	29 f4       	brne	.+10     	; 0x2b28 <__vector_11+0x92>
    2b1e:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <_usbCurrentStatus>
    2b22:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2b26:	02 c0       	rjmp	.+4      	; 0x2b2c <__vector_11+0x96>
    2b28:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2b2c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2b30:	e6 c0       	rjmp	.+460    	; 0x2cfe <__vector_11+0x268>
    2b32:	91 30       	cpi	r25, 0x01	; 1
    2b34:	51 f4       	brne	.+20     	; 0x2b4a <__vector_11+0xb4>
    2b36:	81 11       	cpse	r24, r1
    2b38:	e2 c0       	rjmp	.+452    	; 0x2cfe <__vector_11+0x268>
    2b3a:	41 30       	cpi	r20, 0x01	; 1
    2b3c:	51 05       	cpc	r21, r1
    2b3e:	09 f0       	breq	.+2      	; 0x2b42 <__vector_11+0xac>
    2b40:	de c0       	rjmp	.+444    	; 0x2cfe <__vector_11+0x268>
    2b42:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <_usbCurrentStatus>
    2b46:	8d 7f       	andi	r24, 0xFD	; 253
    2b48:	0b c0       	rjmp	.+22     	; 0x2b60 <__vector_11+0xca>
    2b4a:	93 30       	cpi	r25, 0x03	; 3
    2b4c:	61 f4       	brne	.+24     	; 0x2b66 <__vector_11+0xd0>
    2b4e:	81 11       	cpse	r24, r1
    2b50:	d6 c0       	rjmp	.+428    	; 0x2cfe <__vector_11+0x268>
    2b52:	41 30       	cpi	r20, 0x01	; 1
    2b54:	51 05       	cpc	r21, r1
    2b56:	09 f0       	breq	.+2      	; 0x2b5a <__vector_11+0xc4>
    2b58:	d2 c0       	rjmp	.+420    	; 0x2cfe <__vector_11+0x268>
    2b5a:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <_usbCurrentStatus>
    2b5e:	82 60       	ori	r24, 0x02	; 2
    2b60:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <_usbCurrentStatus>
    2b64:	cc c0       	rjmp	.+408    	; 0x2cfe <__vector_11+0x268>
    2b66:	95 30       	cpi	r25, 0x05	; 5
    2b68:	49 f4       	brne	.+18     	; 0x2b7c <__vector_11+0xe6>
    2b6a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2b6e:	80 ff       	sbrs	r24, 0
    2b70:	fc cf       	rjmp	.-8      	; 0x2b6a <__vector_11+0xd4>
    2b72:	82 2f       	mov	r24, r18
    2b74:	80 68       	ori	r24, 0x80	; 128
    2b76:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    2b7a:	c1 c0       	rjmp	.+386    	; 0x2cfe <__vector_11+0x268>
    2b7c:	96 30       	cpi	r25, 0x06	; 6
    2b7e:	09 f0       	breq	.+2      	; 0x2b82 <__vector_11+0xec>
    2b80:	70 c0       	rjmp	.+224    	; 0x2c62 <__vector_11+0x1cc>
    2b82:	eb 8c       	ldd	r14, Y+27	; 0x1b
    2b84:	fc 8c       	ldd	r15, Y+28	; 0x1c
    2b86:	12 30       	cpi	r17, 0x02	; 2
    2b88:	69 f5       	brne	.+90     	; 0x2be4 <__vector_11+0x14e>
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	0e 94 e6 14 	call	0x29cc	; 0x29cc <_Z11InitControli>
    2b92:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZL14SendInterfacesv>
    2b96:	99 e0       	ldi	r25, 0x09	; 9
    2b98:	9e 01       	movw	r18, r28
    2b9a:	2f 5f       	subi	r18, 0xFF	; 255
    2b9c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b9e:	69 01       	movw	r12, r18
    2ba0:	f9 01       	movw	r30, r18
    2ba2:	29 2f       	mov	r18, r25
    2ba4:	11 92       	st	Z+, r1
    2ba6:	2a 95       	dec	r18
    2ba8:	e9 f7       	brne	.-6      	; 0x2ba4 <__vector_11+0x10e>
    2baa:	99 83       	std	Y+1, r25	; 0x01
    2bac:	1a 83       	std	Y+2, r17	; 0x02
    2bae:	91 e0       	ldi	r25, 0x01	; 1
    2bb0:	9e 83       	std	Y+6, r25	; 0x06
    2bb2:	90 ea       	ldi	r25, 0xA0	; 160
    2bb4:	98 87       	std	Y+8, r25	; 0x08
    2bb6:	9a ef       	ldi	r25, 0xFA	; 250
    2bb8:	99 87       	std	Y+9, r25	; 0x09
    2bba:	20 91 69 04 	lds	r18, 0x0469	; 0x800469 <_ZL6_cmark>
    2bbe:	30 91 6a 04 	lds	r19, 0x046A	; 0x80046a <_ZL6_cmark+0x1>
    2bc2:	27 5f       	subi	r18, 0xF7	; 247
    2bc4:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc6:	3c 83       	std	Y+4, r19	; 0x04
    2bc8:	2b 83       	std	Y+3, r18	; 0x03
    2bca:	8d 83       	std	Y+5, r24	; 0x05
    2bcc:	c7 01       	movw	r24, r14
    2bce:	0e 94 e6 14 	call	0x29cc	; 0x29cc <_Z11InitControli>
    2bd2:	49 e0       	ldi	r20, 0x09	; 9
    2bd4:	50 e0       	ldi	r21, 0x00	; 0
    2bd6:	b6 01       	movw	r22, r12
    2bd8:	80 e0       	ldi	r24, 0x00	; 0
    2bda:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <_Z15USB_SendControlhPKvi>
    2bde:	0e 94 9d 13 	call	0x273a	; 0x273a <_ZL14SendInterfacesv>
    2be2:	8d c0       	rjmp	.+282    	; 0x2cfe <__vector_11+0x268>
    2be4:	c7 01       	movw	r24, r14
    2be6:	0e 94 e6 14 	call	0x29cc	; 0x29cc <_Z11InitControli>
    2bea:	0e 94 75 1b 	call	0x36ea	; 0x36ea <_Z12PluggableUSBv>
    2bee:	be 01       	movw	r22, r28
    2bf0:	6b 5e       	subi	r22, 0xEB	; 235
    2bf2:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf4:	0e 94 19 1b 	call	0x3632	; 0x3632 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    2bf8:	00 97       	sbiw	r24, 0x00	; 0
    2bfa:	19 f0       	breq	.+6      	; 0x2c02 <__vector_11+0x16c>
    2bfc:	0c f0       	brlt	.+2      	; 0x2c00 <__vector_11+0x16a>
    2bfe:	7f c0       	rjmp	.+254    	; 0x2cfe <__vector_11+0x268>
    2c00:	82 c0       	rjmp	.+260    	; 0x2d06 <__vector_11+0x270>
    2c02:	11 30       	cpi	r17, 0x01	; 1
    2c04:	09 f4       	brne	.+2      	; 0x2c08 <__vector_11+0x172>
    2c06:	70 c0       	rjmp	.+224    	; 0x2ce8 <__vector_11+0x252>
    2c08:	13 30       	cpi	r17, 0x03	; 3
    2c0a:	09 f0       	breq	.+2      	; 0x2c0e <__vector_11+0x178>
    2c0c:	7c c0       	rjmp	.+248    	; 0x2d06 <__vector_11+0x270>
    2c0e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c10:	88 23       	and	r24, r24
    2c12:	09 f4       	brne	.+2      	; 0x2c16 <__vector_11+0x180>
    2c14:	6c c0       	rjmp	.+216    	; 0x2cee <__vector_11+0x258>
    2c16:	82 30       	cpi	r24, 0x02	; 2
    2c18:	29 f4       	brne	.+10     	; 0x2c24 <__vector_11+0x18e>
    2c1a:	40 e8       	ldi	r20, 0x80	; 128
    2c1c:	60 e1       	ldi	r22, 0x10	; 16
    2c1e:	89 ee       	ldi	r24, 0xE9	; 233
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	06 c0       	rjmp	.+12     	; 0x2c30 <__vector_11+0x19a>
    2c24:	81 30       	cpi	r24, 0x01	; 1
    2c26:	39 f4       	brne	.+14     	; 0x2c36 <__vector_11+0x1a0>
    2c28:	40 e8       	ldi	r20, 0x80	; 128
    2c2a:	6b e0       	ldi	r22, 0x0B	; 11
    2c2c:	8d ed       	ldi	r24, 0xDD	; 221
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	0e 94 45 13 	call	0x268a	; 0x268a <_ZL24USB_SendStringDescriptorPKhhh>
    2c34:	56 c0       	rjmp	.+172    	; 0x2ce2 <__vector_11+0x24c>
    2c36:	83 30       	cpi	r24, 0x03	; 3
    2c38:	09 f0       	breq	.+2      	; 0x2c3c <__vector_11+0x1a6>
    2c3a:	65 c0       	rjmp	.+202    	; 0x2d06 <__vector_11+0x270>
    2c3c:	0e 94 75 1b 	call	0x36ea	; 0x36ea <_Z12PluggableUSBv>
    2c40:	8e 01       	movw	r16, r28
    2c42:	0f 5f       	subi	r16, 0xFF	; 255
    2c44:	1f 4f       	sbci	r17, 0xFF	; 255
    2c46:	b8 01       	movw	r22, r16
    2c48:	0e 94 38 1b 	call	0x3670	; 0x3670 <_ZN13PluggableUSB_12getShortNameEPc>
    2c4c:	f8 01       	movw	r30, r16
    2c4e:	01 90       	ld	r0, Z+
    2c50:	00 20       	and	r0, r0
    2c52:	e9 f7       	brne	.-6      	; 0x2c4e <__vector_11+0x1b8>
    2c54:	31 97       	sbiw	r30, 0x01	; 1
    2c56:	bf 01       	movw	r22, r30
    2c58:	60 1b       	sub	r22, r16
    2c5a:	71 0b       	sbc	r23, r17
    2c5c:	40 e0       	ldi	r20, 0x00	; 0
    2c5e:	c8 01       	movw	r24, r16
    2c60:	e7 cf       	rjmp	.-50     	; 0x2c30 <__vector_11+0x19a>
    2c62:	97 30       	cpi	r25, 0x07	; 7
    2c64:	09 f4       	brne	.+2      	; 0x2c68 <__vector_11+0x1d2>
    2c66:	4f c0       	rjmp	.+158    	; 0x2d06 <__vector_11+0x270>
    2c68:	98 30       	cpi	r25, 0x08	; 8
    2c6a:	21 f4       	brne	.+8      	; 0x2c74 <__vector_11+0x1de>
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2c72:	45 c0       	rjmp	.+138    	; 0x2cfe <__vector_11+0x268>
    2c74:	99 30       	cpi	r25, 0x09	; 9
    2c76:	09 f0       	breq	.+2      	; 0x2c7a <__vector_11+0x1e4>
    2c78:	42 c0       	rjmp	.+132    	; 0x2cfe <__vector_11+0x268>
    2c7a:	83 70       	andi	r24, 0x03	; 3
    2c7c:	09 f0       	breq	.+2      	; 0x2c80 <__vector_11+0x1ea>
    2c7e:	43 c0       	rjmp	.+134    	; 0x2d06 <__vector_11+0x270>
    2c80:	eb e0       	ldi	r30, 0x0B	; 11
    2c82:	f1 e0       	ldi	r31, 0x01	; 1
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	31 e0       	ldi	r19, 0x01	; 1
    2c88:	96 e3       	ldi	r25, 0x36	; 54
    2c8a:	20 81       	ld	r18, Z
    2c8c:	21 11       	cpse	r18, r1
    2c8e:	09 c0       	rjmp	.+18     	; 0x2ca2 <__vector_11+0x20c>
    2c90:	8e e7       	ldi	r24, 0x7E	; 126
    2c92:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    2c96:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    2c9a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c9c:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <_usbConfiguration>
    2ca0:	2e c0       	rjmp	.+92     	; 0x2cfe <__vector_11+0x268>
    2ca2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2ca6:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2caa:	21 91       	ld	r18, Z+
    2cac:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2cb0:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    2cb4:	8f 5f       	subi	r24, 0xFF	; 255
    2cb6:	87 30       	cpi	r24, 0x07	; 7
    2cb8:	41 f7       	brne	.-48     	; 0x2c8a <__vector_11+0x1f4>
    2cba:	ea cf       	rjmp	.-44     	; 0x2c90 <__vector_11+0x1fa>
    2cbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cc0:	0e 94 e6 14 	call	0x29cc	; 0x29cc <_Z11InitControli>
    2cc4:	89 8d       	ldd	r24, Y+25	; 0x19
    2cc6:	81 11       	cpse	r24, r1
    2cc8:	05 c0       	rjmp	.+10     	; 0x2cd4 <__vector_11+0x23e>
    2cca:	ce 01       	movw	r24, r28
    2ccc:	45 96       	adiw	r24, 0x15	; 21
    2cce:	0e 94 4c 1a 	call	0x3498	; 0x3498 <_Z9CDC_SetupR8USBSetup>
    2cd2:	07 c0       	rjmp	.+14     	; 0x2ce2 <__vector_11+0x24c>
    2cd4:	0e 94 75 1b 	call	0x36ea	; 0x36ea <_Z12PluggableUSBv>
    2cd8:	be 01       	movw	r22, r28
    2cda:	6b 5e       	subi	r22, 0xEB	; 235
    2cdc:	7f 4f       	sbci	r23, 0xFF	; 255
    2cde:	0e 94 57 1b 	call	0x36ae	; 0x36ae <_ZN13PluggableUSB_5setupER8USBSetup>
    2ce2:	88 23       	and	r24, r24
    2ce4:	81 f0       	breq	.+32     	; 0x2d06 <__vector_11+0x270>
    2ce6:	0b c0       	rjmp	.+22     	; 0x2cfe <__vector_11+0x268>
    2ce8:	6b ec       	ldi	r22, 0xCB	; 203
    2cea:	70 e0       	ldi	r23, 0x00	; 0
    2cec:	02 c0       	rjmp	.+4      	; 0x2cf2 <__vector_11+0x25c>
    2cee:	6a ef       	ldi	r22, 0xFA	; 250
    2cf0:	70 e0       	ldi	r23, 0x00	; 0
    2cf2:	fb 01       	movw	r30, r22
    2cf4:	44 91       	lpm	r20, Z
    2cf6:	50 e0       	ldi	r21, 0x00	; 0
    2cf8:	80 e8       	ldi	r24, 0x80	; 128
    2cfa:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <_Z15USB_SendControlhPKvi>
    2cfe:	8e ef       	ldi	r24, 0xFE	; 254
    2d00:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2d04:	03 c0       	rjmp	.+6      	; 0x2d0c <__vector_11+0x276>
    2d06:	81 e2       	ldi	r24, 0x21	; 33
    2d08:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2d0c:	6c 96       	adiw	r28, 0x1c	; 28
    2d0e:	0f b6       	in	r0, 0x3f	; 63
    2d10:	f8 94       	cli
    2d12:	de bf       	out	0x3e, r29	; 62
    2d14:	0f be       	out	0x3f, r0	; 63
    2d16:	cd bf       	out	0x3d, r28	; 61
    2d18:	df 91       	pop	r29
    2d1a:	cf 91       	pop	r28
    2d1c:	ff 91       	pop	r31
    2d1e:	ef 91       	pop	r30
    2d20:	bf 91       	pop	r27
    2d22:	af 91       	pop	r26
    2d24:	9f 91       	pop	r25
    2d26:	8f 91       	pop	r24
    2d28:	7f 91       	pop	r23
    2d2a:	6f 91       	pop	r22
    2d2c:	5f 91       	pop	r21
    2d2e:	4f 91       	pop	r20
    2d30:	3f 91       	pop	r19
    2d32:	2f 91       	pop	r18
    2d34:	1f 91       	pop	r17
    2d36:	0f 91       	pop	r16
    2d38:	ff 90       	pop	r15
    2d3a:	ef 90       	pop	r14
    2d3c:	df 90       	pop	r13
    2d3e:	cf 90       	pop	r12
    2d40:	0f 90       	pop	r0
    2d42:	0f be       	out	0x3f, r0	; 63
    2d44:	0f 90       	pop	r0
    2d46:	1f 90       	pop	r1
    2d48:	18 95       	reti

00002d4a <_Z9USB_Flushh>:
    2d4a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2d4e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2d52:	88 23       	and	r24, r24
    2d54:	19 f0       	breq	.+6      	; 0x2d5c <_Z9USB_Flushh+0x12>
    2d56:	8a e3       	ldi	r24, 0x3A	; 58
    2d58:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2d5c:	08 95       	ret

00002d5e <__vector_10>:
    2d5e:	1f 92       	push	r1
    2d60:	0f 92       	push	r0
    2d62:	0f b6       	in	r0, 0x3f	; 63
    2d64:	0f 92       	push	r0
    2d66:	11 24       	eor	r1, r1
    2d68:	2f 93       	push	r18
    2d6a:	3f 93       	push	r19
    2d6c:	4f 93       	push	r20
    2d6e:	5f 93       	push	r21
    2d70:	6f 93       	push	r22
    2d72:	7f 93       	push	r23
    2d74:	8f 93       	push	r24
    2d76:	9f 93       	push	r25
    2d78:	af 93       	push	r26
    2d7a:	bf 93       	push	r27
    2d7c:	cf 93       	push	r28
    2d7e:	ef 93       	push	r30
    2d80:	ff 93       	push	r31
    2d82:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2d86:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2d8a:	83 7f       	andi	r24, 0xF3	; 243
    2d8c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2d90:	c3 ff       	sbrs	r28, 3
    2d92:	0f c0       	rjmp	.+30     	; 0x2db2 <__vector_10+0x54>
    2d94:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2d9e:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2da2:	82 e3       	ldi	r24, 0x32	; 50
    2da4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    2da8:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <_usbConfiguration>
    2dac:	88 e0       	ldi	r24, 0x08	; 8
    2dae:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    2db2:	c2 ff       	sbrs	r28, 2
    2db4:	19 c0       	rjmp	.+50     	; 0x2de8 <__vector_10+0x8a>
    2db6:	83 e0       	ldi	r24, 0x03	; 3
    2db8:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <_Z9USB_Flushh>
    2dbc:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <TxLEDPulse>
    2dc0:	88 23       	and	r24, r24
    2dc2:	39 f0       	breq	.+14     	; 0x2dd2 <__vector_10+0x74>
    2dc4:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <TxLEDPulse>
    2dc8:	81 50       	subi	r24, 0x01	; 1
    2dca:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <TxLEDPulse>
    2dce:	88 23       	and	r24, r24
    2dd0:	89 f1       	breq	.+98     	; 0x2e34 <__vector_10+0xd6>
    2dd2:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <RxLEDPulse>
    2dd6:	88 23       	and	r24, r24
    2dd8:	39 f0       	breq	.+14     	; 0x2de8 <__vector_10+0x8a>
    2dda:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <RxLEDPulse>
    2dde:	81 50       	subi	r24, 0x01	; 1
    2de0:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <RxLEDPulse>
    2de4:	88 23       	and	r24, r24
    2de6:	41 f1       	breq	.+80     	; 0x2e38 <__vector_10+0xda>
    2de8:	c4 ff       	sbrs	r28, 4
    2dea:	10 c0       	rjmp	.+32     	; 0x2e0c <__vector_10+0xae>
    2dec:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2df0:	8e 7e       	andi	r24, 0xEE	; 238
    2df2:	81 60       	ori	r24, 0x01	; 1
    2df4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2df8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2dfc:	8f 7e       	andi	r24, 0xEF	; 239
    2dfe:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2e02:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <_usbSuspendState>
    2e06:	8e 7e       	andi	r24, 0xEE	; 238
    2e08:	80 61       	ori	r24, 0x10	; 16
    2e0a:	11 c0       	rjmp	.+34     	; 0x2e2e <__vector_10+0xd0>
    2e0c:	c0 ff       	sbrs	r28, 0
    2e0e:	16 c0       	rjmp	.+44     	; 0x2e3c <__vector_10+0xde>
    2e10:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2e14:	8e 7e       	andi	r24, 0xEE	; 238
    2e16:	80 61       	ori	r24, 0x10	; 16
    2e18:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2e1c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2e20:	8e 7e       	andi	r24, 0xEE	; 238
    2e22:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2e26:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <_usbSuspendState>
    2e2a:	8e 7e       	andi	r24, 0xEE	; 238
    2e2c:	81 60       	ori	r24, 0x01	; 1
    2e2e:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <_usbSuspendState>
    2e32:	04 c0       	rjmp	.+8      	; 0x2e3c <__vector_10+0xde>
    2e34:	5d 9a       	sbi	0x0b, 5	; 11
    2e36:	cd cf       	rjmp	.-102    	; 0x2dd2 <__vector_10+0x74>
    2e38:	28 9a       	sbi	0x05, 0	; 5
    2e3a:	d6 cf       	rjmp	.-84     	; 0x2de8 <__vector_10+0x8a>
    2e3c:	ff 91       	pop	r31
    2e3e:	ef 91       	pop	r30
    2e40:	cf 91       	pop	r28
    2e42:	bf 91       	pop	r27
    2e44:	af 91       	pop	r26
    2e46:	9f 91       	pop	r25
    2e48:	8f 91       	pop	r24
    2e4a:	7f 91       	pop	r23
    2e4c:	6f 91       	pop	r22
    2e4e:	5f 91       	pop	r21
    2e50:	4f 91       	pop	r20
    2e52:	3f 91       	pop	r19
    2e54:	2f 91       	pop	r18
    2e56:	0f 90       	pop	r0
    2e58:	0f be       	out	0x3f, r0	; 63
    2e5a:	0f 90       	pop	r0
    2e5c:	1f 90       	pop	r1
    2e5e:	18 95       	reti

00002e60 <_ZN10USBDevice_6attachEv>:
    2e60:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <_usbConfiguration>
    2e64:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <_usbCurrentStatus>
    2e68:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <_usbSuspendState>
    2e6c:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <_ZL15USB_ClockEnablev>
    2e70:	e1 ee       	ldi	r30, 0xE1	; 225
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	80 81       	ld	r24, Z
    2e76:	8e 7e       	andi	r24, 0xEE	; 238
    2e78:	80 83       	st	Z, r24
    2e7a:	8d e0       	ldi	r24, 0x0D	; 13
    2e7c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2e80:	55 9a       	sbi	0x0a, 5	; 10
    2e82:	20 9a       	sbi	0x04, 0	; 4
    2e84:	08 95       	ret

00002e86 <__vector_23>:
    2e86:	1f 92       	push	r1
    2e88:	0f 92       	push	r0
    2e8a:	0f b6       	in	r0, 0x3f	; 63
    2e8c:	0f 92       	push	r0
    2e8e:	11 24       	eor	r1, r1
    2e90:	2f 93       	push	r18
    2e92:	3f 93       	push	r19
    2e94:	8f 93       	push	r24
    2e96:	9f 93       	push	r25
    2e98:	af 93       	push	r26
    2e9a:	bf 93       	push	r27
    2e9c:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <timer0_millis>
    2ea0:	90 91 72 04 	lds	r25, 0x0472	; 0x800472 <timer0_millis+0x1>
    2ea4:	a0 91 73 04 	lds	r26, 0x0473	; 0x800473 <timer0_millis+0x2>
    2ea8:	b0 91 74 04 	lds	r27, 0x0474	; 0x800474 <timer0_millis+0x3>
    2eac:	30 91 70 04 	lds	r19, 0x0470	; 0x800470 <timer0_fract>
    2eb0:	23 e0       	ldi	r18, 0x03	; 3
    2eb2:	23 0f       	add	r18, r19
    2eb4:	2d 37       	cpi	r18, 0x7D	; 125
    2eb6:	20 f4       	brcc	.+8      	; 0x2ec0 <__vector_23+0x3a>
    2eb8:	01 96       	adiw	r24, 0x01	; 1
    2eba:	a1 1d       	adc	r26, r1
    2ebc:	b1 1d       	adc	r27, r1
    2ebe:	05 c0       	rjmp	.+10     	; 0x2eca <__vector_23+0x44>
    2ec0:	26 e8       	ldi	r18, 0x86	; 134
    2ec2:	23 0f       	add	r18, r19
    2ec4:	02 96       	adiw	r24, 0x02	; 2
    2ec6:	a1 1d       	adc	r26, r1
    2ec8:	b1 1d       	adc	r27, r1
    2eca:	20 93 70 04 	sts	0x0470, r18	; 0x800470 <timer0_fract>
    2ece:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <timer0_millis>
    2ed2:	90 93 72 04 	sts	0x0472, r25	; 0x800472 <timer0_millis+0x1>
    2ed6:	a0 93 73 04 	sts	0x0473, r26	; 0x800473 <timer0_millis+0x2>
    2eda:	b0 93 74 04 	sts	0x0474, r27	; 0x800474 <timer0_millis+0x3>
    2ede:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <timer0_overflow_count>
    2ee2:	90 91 76 04 	lds	r25, 0x0476	; 0x800476 <timer0_overflow_count+0x1>
    2ee6:	a0 91 77 04 	lds	r26, 0x0477	; 0x800477 <timer0_overflow_count+0x2>
    2eea:	b0 91 78 04 	lds	r27, 0x0478	; 0x800478 <timer0_overflow_count+0x3>
    2eee:	01 96       	adiw	r24, 0x01	; 1
    2ef0:	a1 1d       	adc	r26, r1
    2ef2:	b1 1d       	adc	r27, r1
    2ef4:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <timer0_overflow_count>
    2ef8:	90 93 76 04 	sts	0x0476, r25	; 0x800476 <timer0_overflow_count+0x1>
    2efc:	a0 93 77 04 	sts	0x0477, r26	; 0x800477 <timer0_overflow_count+0x2>
    2f00:	b0 93 78 04 	sts	0x0478, r27	; 0x800478 <timer0_overflow_count+0x3>
    2f04:	bf 91       	pop	r27
    2f06:	af 91       	pop	r26
    2f08:	9f 91       	pop	r25
    2f0a:	8f 91       	pop	r24
    2f0c:	3f 91       	pop	r19
    2f0e:	2f 91       	pop	r18
    2f10:	0f 90       	pop	r0
    2f12:	0f be       	out	0x3f, r0	; 63
    2f14:	0f 90       	pop	r0
    2f16:	1f 90       	pop	r1
    2f18:	18 95       	reti

00002f1a <millis>:
    2f1a:	2f b7       	in	r18, 0x3f	; 63
    2f1c:	f8 94       	cli
    2f1e:	60 91 71 04 	lds	r22, 0x0471	; 0x800471 <timer0_millis>
    2f22:	70 91 72 04 	lds	r23, 0x0472	; 0x800472 <timer0_millis+0x1>
    2f26:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <timer0_millis+0x2>
    2f2a:	90 91 74 04 	lds	r25, 0x0474	; 0x800474 <timer0_millis+0x3>
    2f2e:	2f bf       	out	0x3f, r18	; 63
    2f30:	08 95       	ret

00002f32 <micros>:
    2f32:	3f b7       	in	r19, 0x3f	; 63
    2f34:	f8 94       	cli
    2f36:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <timer0_overflow_count>
    2f3a:	90 91 76 04 	lds	r25, 0x0476	; 0x800476 <timer0_overflow_count+0x1>
    2f3e:	a0 91 77 04 	lds	r26, 0x0477	; 0x800477 <timer0_overflow_count+0x2>
    2f42:	b0 91 78 04 	lds	r27, 0x0478	; 0x800478 <timer0_overflow_count+0x3>
    2f46:	26 b5       	in	r18, 0x26	; 38
    2f48:	a8 9b       	sbis	0x15, 0	; 21
    2f4a:	05 c0       	rjmp	.+10     	; 0x2f56 <micros+0x24>
    2f4c:	2f 3f       	cpi	r18, 0xFF	; 255
    2f4e:	19 f0       	breq	.+6      	; 0x2f56 <micros+0x24>
    2f50:	01 96       	adiw	r24, 0x01	; 1
    2f52:	a1 1d       	adc	r26, r1
    2f54:	b1 1d       	adc	r27, r1
    2f56:	3f bf       	out	0x3f, r19	; 63
    2f58:	ba 2f       	mov	r27, r26
    2f5a:	a9 2f       	mov	r26, r25
    2f5c:	98 2f       	mov	r25, r24
    2f5e:	88 27       	eor	r24, r24
    2f60:	82 0f       	add	r24, r18
    2f62:	91 1d       	adc	r25, r1
    2f64:	a1 1d       	adc	r26, r1
    2f66:	b1 1d       	adc	r27, r1
    2f68:	bc 01       	movw	r22, r24
    2f6a:	cd 01       	movw	r24, r26
    2f6c:	42 e0       	ldi	r20, 0x02	; 2
    2f6e:	66 0f       	add	r22, r22
    2f70:	77 1f       	adc	r23, r23
    2f72:	88 1f       	adc	r24, r24
    2f74:	99 1f       	adc	r25, r25
    2f76:	4a 95       	dec	r20
    2f78:	d1 f7       	brne	.-12     	; 0x2f6e <micros+0x3c>
    2f7a:	08 95       	ret

00002f7c <delay>:
    2f7c:	8f 92       	push	r8
    2f7e:	9f 92       	push	r9
    2f80:	af 92       	push	r10
    2f82:	bf 92       	push	r11
    2f84:	cf 92       	push	r12
    2f86:	df 92       	push	r13
    2f88:	ef 92       	push	r14
    2f8a:	ff 92       	push	r15
    2f8c:	6b 01       	movw	r12, r22
    2f8e:	7c 01       	movw	r14, r24
    2f90:	0e 94 99 17 	call	0x2f32	; 0x2f32 <micros>
    2f94:	4b 01       	movw	r8, r22
    2f96:	5c 01       	movw	r10, r24
    2f98:	c1 14       	cp	r12, r1
    2f9a:	d1 04       	cpc	r13, r1
    2f9c:	e1 04       	cpc	r14, r1
    2f9e:	f1 04       	cpc	r15, r1
    2fa0:	01 f1       	breq	.+64     	; 0x2fe2 <delay+0x66>
    2fa2:	0e 94 ef 1a 	call	0x35de	; 0x35de <yield>
    2fa6:	0e 94 99 17 	call	0x2f32	; 0x2f32 <micros>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	88 19       	sub	r24, r8
    2fb0:	99 09       	sbc	r25, r9
    2fb2:	aa 09       	sbc	r26, r10
    2fb4:	bb 09       	sbc	r27, r11
    2fb6:	88 3e       	cpi	r24, 0xE8	; 232
    2fb8:	93 40       	sbci	r25, 0x03	; 3
    2fba:	a1 05       	cpc	r26, r1
    2fbc:	b1 05       	cpc	r27, r1
    2fbe:	60 f3       	brcs	.-40     	; 0x2f98 <delay+0x1c>
    2fc0:	21 e0       	ldi	r18, 0x01	; 1
    2fc2:	c2 1a       	sub	r12, r18
    2fc4:	d1 08       	sbc	r13, r1
    2fc6:	e1 08       	sbc	r14, r1
    2fc8:	f1 08       	sbc	r15, r1
    2fca:	88 ee       	ldi	r24, 0xE8	; 232
    2fcc:	88 0e       	add	r8, r24
    2fce:	83 e0       	ldi	r24, 0x03	; 3
    2fd0:	98 1e       	adc	r9, r24
    2fd2:	a1 1c       	adc	r10, r1
    2fd4:	b1 1c       	adc	r11, r1
    2fd6:	c1 14       	cp	r12, r1
    2fd8:	d1 04       	cpc	r13, r1
    2fda:	e1 04       	cpc	r14, r1
    2fdc:	f1 04       	cpc	r15, r1
    2fde:	19 f7       	brne	.-58     	; 0x2fa6 <delay+0x2a>
    2fe0:	db cf       	rjmp	.-74     	; 0x2f98 <delay+0x1c>
    2fe2:	ff 90       	pop	r15
    2fe4:	ef 90       	pop	r14
    2fe6:	df 90       	pop	r13
    2fe8:	cf 90       	pop	r12
    2fea:	bf 90       	pop	r11
    2fec:	af 90       	pop	r10
    2fee:	9f 90       	pop	r9
    2ff0:	8f 90       	pop	r8
    2ff2:	08 95       	ret

00002ff4 <init>:
    2ff4:	78 94       	sei
    2ff6:	84 b5       	in	r24, 0x24	; 36
    2ff8:	82 60       	ori	r24, 0x02	; 2
    2ffa:	84 bd       	out	0x24, r24	; 36
    2ffc:	84 b5       	in	r24, 0x24	; 36
    2ffe:	81 60       	ori	r24, 0x01	; 1
    3000:	84 bd       	out	0x24, r24	; 36
    3002:	85 b5       	in	r24, 0x25	; 37
    3004:	82 60       	ori	r24, 0x02	; 2
    3006:	85 bd       	out	0x25, r24	; 37
    3008:	85 b5       	in	r24, 0x25	; 37
    300a:	81 60       	ori	r24, 0x01	; 1
    300c:	85 bd       	out	0x25, r24	; 37
    300e:	ee e6       	ldi	r30, 0x6E	; 110
    3010:	f0 e0       	ldi	r31, 0x00	; 0
    3012:	80 81       	ld	r24, Z
    3014:	81 60       	ori	r24, 0x01	; 1
    3016:	80 83       	st	Z, r24
    3018:	e1 e8       	ldi	r30, 0x81	; 129
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	10 82       	st	Z, r1
    301e:	80 81       	ld	r24, Z
    3020:	82 60       	ori	r24, 0x02	; 2
    3022:	80 83       	st	Z, r24
    3024:	80 81       	ld	r24, Z
    3026:	81 60       	ori	r24, 0x01	; 1
    3028:	80 83       	st	Z, r24
    302a:	e0 e8       	ldi	r30, 0x80	; 128
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	80 81       	ld	r24, Z
    3030:	81 60       	ori	r24, 0x01	; 1
    3032:	80 83       	st	Z, r24
    3034:	e1 e9       	ldi	r30, 0x91	; 145
    3036:	f0 e0       	ldi	r31, 0x00	; 0
    3038:	80 81       	ld	r24, Z
    303a:	82 60       	ori	r24, 0x02	; 2
    303c:	80 83       	st	Z, r24
    303e:	80 81       	ld	r24, Z
    3040:	81 60       	ori	r24, 0x01	; 1
    3042:	80 83       	st	Z, r24
    3044:	e0 e9       	ldi	r30, 0x90	; 144
    3046:	f0 e0       	ldi	r31, 0x00	; 0
    3048:	80 81       	ld	r24, Z
    304a:	81 60       	ori	r24, 0x01	; 1
    304c:	80 83       	st	Z, r24
    304e:	e1 ec       	ldi	r30, 0xC1	; 193
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	80 81       	ld	r24, Z
    3054:	84 60       	ori	r24, 0x04	; 4
    3056:	80 83       	st	Z, r24
    3058:	80 81       	ld	r24, Z
    305a:	82 60       	ori	r24, 0x02	; 2
    305c:	80 83       	st	Z, r24
    305e:	80 81       	ld	r24, Z
    3060:	81 60       	ori	r24, 0x01	; 1
    3062:	80 83       	st	Z, r24
    3064:	e3 ec       	ldi	r30, 0xC3	; 195
    3066:	f0 e0       	ldi	r31, 0x00	; 0
    3068:	80 81       	ld	r24, Z
    306a:	81 60       	ori	r24, 0x01	; 1
    306c:	80 83       	st	Z, r24
    306e:	e0 ec       	ldi	r30, 0xC0	; 192
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	80 81       	ld	r24, Z
    3074:	82 60       	ori	r24, 0x02	; 2
    3076:	80 83       	st	Z, r24
    3078:	e2 ec       	ldi	r30, 0xC2	; 194
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	80 81       	ld	r24, Z
    307e:	81 60       	ori	r24, 0x01	; 1
    3080:	80 83       	st	Z, r24
    3082:	ea e7       	ldi	r30, 0x7A	; 122
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	80 81       	ld	r24, Z
    3088:	84 60       	ori	r24, 0x04	; 4
    308a:	80 83       	st	Z, r24
    308c:	80 81       	ld	r24, Z
    308e:	82 60       	ori	r24, 0x02	; 2
    3090:	80 83       	st	Z, r24
    3092:	80 81       	ld	r24, Z
    3094:	81 60       	ori	r24, 0x01	; 1
    3096:	80 83       	st	Z, r24
    3098:	80 81       	ld	r24, Z
    309a:	80 68       	ori	r24, 0x80	; 128
    309c:	80 83       	st	Z, r24
    309e:	08 95       	ret

000030a0 <analogRead>:
    30a0:	82 31       	cpi	r24, 0x12	; 18
    30a2:	08 f0       	brcs	.+2      	; 0x30a6 <analogRead+0x6>
    30a4:	82 51       	subi	r24, 0x12	; 18
    30a6:	e8 2f       	mov	r30, r24
    30a8:	f0 e0       	ldi	r31, 0x00	; 0
    30aa:	e2 50       	subi	r30, 0x02	; 2
    30ac:	ff 4f       	sbci	r31, 0xFF	; 255
    30ae:	e4 91       	lpm	r30, Z
    30b0:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    30b4:	e3 fb       	bst	r30, 3
    30b6:	22 27       	eor	r18, r18
    30b8:	20 f9       	bld	r18, 0
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	95 e0       	ldi	r25, 0x05	; 5
    30be:	22 0f       	add	r18, r18
    30c0:	33 1f       	adc	r19, r19
    30c2:	9a 95       	dec	r25
    30c4:	e1 f7       	brne	.-8      	; 0x30be <analogRead+0x1e>
    30c6:	8f 7d       	andi	r24, 0xDF	; 223
    30c8:	28 2b       	or	r18, r24
    30ca:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    30ce:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <analog_reference>
    30d2:	20 e4       	ldi	r18, 0x40	; 64
    30d4:	82 9f       	mul	r24, r18
    30d6:	c0 01       	movw	r24, r0
    30d8:	11 24       	eor	r1, r1
    30da:	e7 70       	andi	r30, 0x07	; 7
    30dc:	e8 2b       	or	r30, r24
    30de:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    30e2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    30e6:	80 64       	ori	r24, 0x40	; 64
    30e8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    30ec:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    30f0:	86 fd       	sbrc	r24, 6
    30f2:	fc cf       	rjmp	.-8      	; 0x30ec <analogRead+0x4c>
    30f4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    30f8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	92 2b       	or	r25, r18
    3100:	08 95       	ret

00003102 <turnOffPWM>:
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	fc 01       	movw	r30, r24
    3106:	31 97       	sbiw	r30, 0x01	; 1
    3108:	ef 30       	cpi	r30, 0x0F	; 15
    310a:	f1 05       	cpc	r31, r1
    310c:	b0 f5       	brcc	.+108    	; 0x317a <turnOffPWM+0x78>
    310e:	ea 5a       	subi	r30, 0xAA	; 170
    3110:	ff 4f       	sbci	r31, 0xFF	; 255
    3112:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__tablejump2__>
    3116:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    311a:	8f 77       	andi	r24, 0x7F	; 127
    311c:	03 c0       	rjmp	.+6      	; 0x3124 <turnOffPWM+0x22>
    311e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3122:	8f 7d       	andi	r24, 0xDF	; 223
    3124:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3128:	08 95       	ret
    312a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    312e:	87 7f       	andi	r24, 0xF7	; 247
    3130:	f9 cf       	rjmp	.-14     	; 0x3124 <turnOffPWM+0x22>
    3132:	84 b5       	in	r24, 0x24	; 36
    3134:	8f 77       	andi	r24, 0x7F	; 127
    3136:	02 c0       	rjmp	.+4      	; 0x313c <turnOffPWM+0x3a>
    3138:	84 b5       	in	r24, 0x24	; 36
    313a:	8f 7d       	andi	r24, 0xDF	; 223
    313c:	84 bd       	out	0x24, r24	; 36
    313e:	08 95       	ret
    3140:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    3144:	8f 77       	andi	r24, 0x7F	; 127
    3146:	07 c0       	rjmp	.+14     	; 0x3156 <turnOffPWM+0x54>
    3148:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    314c:	8f 7d       	andi	r24, 0xDF	; 223
    314e:	03 c0       	rjmp	.+6      	; 0x3156 <turnOffPWM+0x54>
    3150:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    3154:	87 7f       	andi	r24, 0xF7	; 247
    3156:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    315a:	08 95       	ret
    315c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3160:	8f 77       	andi	r24, 0x7F	; 127
    3162:	03 c0       	rjmp	.+6      	; 0x316a <turnOffPWM+0x68>
    3164:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3168:	8f 7d       	andi	r24, 0xDF	; 223
    316a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    316e:	08 95       	ret
    3170:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    3174:	87 7f       	andi	r24, 0xF7	; 247
    3176:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    317a:	08 95       	ret

0000317c <pinMode>:
    317c:	cf 93       	push	r28
    317e:	df 93       	push	r29
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	fc 01       	movw	r30, r24
    3184:	e7 5d       	subi	r30, 0xD7	; 215
    3186:	fe 4f       	sbci	r31, 0xFE	; 254
    3188:	24 91       	lpm	r18, Z
    318a:	fc 01       	movw	r30, r24
    318c:	e8 5b       	subi	r30, 0xB8	; 184
    318e:	fe 4f       	sbci	r31, 0xFE	; 254
    3190:	84 91       	lpm	r24, Z
    3192:	88 23       	and	r24, r24
    3194:	61 f1       	breq	.+88     	; 0x31ee <pinMode+0x72>
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	88 0f       	add	r24, r24
    319a:	99 1f       	adc	r25, r25
    319c:	fc 01       	movw	r30, r24
    319e:	ed 57       	subi	r30, 0x7D	; 125
    31a0:	fe 4f       	sbci	r31, 0xFE	; 254
    31a2:	c5 91       	lpm	r28, Z+
    31a4:	d4 91       	lpm	r29, Z
    31a6:	fc 01       	movw	r30, r24
    31a8:	eb 58       	subi	r30, 0x8B	; 139
    31aa:	fe 4f       	sbci	r31, 0xFE	; 254
    31ac:	a5 91       	lpm	r26, Z+
    31ae:	b4 91       	lpm	r27, Z
    31b0:	61 11       	cpse	r22, r1
    31b2:	09 c0       	rjmp	.+18     	; 0x31c6 <pinMode+0x4a>
    31b4:	9f b7       	in	r25, 0x3f	; 63
    31b6:	f8 94       	cli
    31b8:	88 81       	ld	r24, Y
    31ba:	20 95       	com	r18
    31bc:	82 23       	and	r24, r18
    31be:	88 83       	st	Y, r24
    31c0:	ec 91       	ld	r30, X
    31c2:	2e 23       	and	r18, r30
    31c4:	0b c0       	rjmp	.+22     	; 0x31dc <pinMode+0x60>
    31c6:	62 30       	cpi	r22, 0x02	; 2
    31c8:	61 f4       	brne	.+24     	; 0x31e2 <pinMode+0x66>
    31ca:	9f b7       	in	r25, 0x3f	; 63
    31cc:	f8 94       	cli
    31ce:	88 81       	ld	r24, Y
    31d0:	32 2f       	mov	r19, r18
    31d2:	30 95       	com	r19
    31d4:	83 23       	and	r24, r19
    31d6:	88 83       	st	Y, r24
    31d8:	ec 91       	ld	r30, X
    31da:	2e 2b       	or	r18, r30
    31dc:	2c 93       	st	X, r18
    31de:	9f bf       	out	0x3f, r25	; 63
    31e0:	06 c0       	rjmp	.+12     	; 0x31ee <pinMode+0x72>
    31e2:	8f b7       	in	r24, 0x3f	; 63
    31e4:	f8 94       	cli
    31e6:	e8 81       	ld	r30, Y
    31e8:	2e 2b       	or	r18, r30
    31ea:	28 83       	st	Y, r18
    31ec:	8f bf       	out	0x3f, r24	; 63
    31ee:	df 91       	pop	r29
    31f0:	cf 91       	pop	r28
    31f2:	08 95       	ret

000031f4 <digitalWrite>:
    31f4:	1f 93       	push	r17
    31f6:	cf 93       	push	r28
    31f8:	df 93       	push	r29
    31fa:	28 2f       	mov	r18, r24
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	f9 01       	movw	r30, r18
    3200:	e6 5f       	subi	r30, 0xF6	; 246
    3202:	fe 4f       	sbci	r31, 0xFE	; 254
    3204:	84 91       	lpm	r24, Z
    3206:	f9 01       	movw	r30, r18
    3208:	e7 5d       	subi	r30, 0xD7	; 215
    320a:	fe 4f       	sbci	r31, 0xFE	; 254
    320c:	d4 91       	lpm	r29, Z
    320e:	f9 01       	movw	r30, r18
    3210:	e8 5b       	subi	r30, 0xB8	; 184
    3212:	fe 4f       	sbci	r31, 0xFE	; 254
    3214:	c4 91       	lpm	r28, Z
    3216:	cc 23       	and	r28, r28
    3218:	c1 f0       	breq	.+48     	; 0x324a <digitalWrite+0x56>
    321a:	16 2f       	mov	r17, r22
    321c:	81 11       	cpse	r24, r1
    321e:	0e 94 81 18 	call	0x3102	; 0x3102 <turnOffPWM>
    3222:	ec 2f       	mov	r30, r28
    3224:	f0 e0       	ldi	r31, 0x00	; 0
    3226:	ee 0f       	add	r30, r30
    3228:	ff 1f       	adc	r31, r31
    322a:	eb 58       	subi	r30, 0x8B	; 139
    322c:	fe 4f       	sbci	r31, 0xFE	; 254
    322e:	a5 91       	lpm	r26, Z+
    3230:	b4 91       	lpm	r27, Z
    3232:	9f b7       	in	r25, 0x3f	; 63
    3234:	f8 94       	cli
    3236:	11 11       	cpse	r17, r1
    3238:	04 c0       	rjmp	.+8      	; 0x3242 <digitalWrite+0x4e>
    323a:	8c 91       	ld	r24, X
    323c:	d0 95       	com	r29
    323e:	d8 23       	and	r29, r24
    3240:	02 c0       	rjmp	.+4      	; 0x3246 <digitalWrite+0x52>
    3242:	ec 91       	ld	r30, X
    3244:	de 2b       	or	r29, r30
    3246:	dc 93       	st	X, r29
    3248:	9f bf       	out	0x3f, r25	; 63
    324a:	df 91       	pop	r29
    324c:	cf 91       	pop	r28
    324e:	1f 91       	pop	r17
    3250:	08 95       	ret

00003252 <digitalRead>:
    3252:	cf 93       	push	r28
    3254:	df 93       	push	r29
    3256:	28 2f       	mov	r18, r24
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	f9 01       	movw	r30, r18
    325c:	e6 5f       	subi	r30, 0xF6	; 246
    325e:	fe 4f       	sbci	r31, 0xFE	; 254
    3260:	84 91       	lpm	r24, Z
    3262:	f9 01       	movw	r30, r18
    3264:	e7 5d       	subi	r30, 0xD7	; 215
    3266:	fe 4f       	sbci	r31, 0xFE	; 254
    3268:	d4 91       	lpm	r29, Z
    326a:	f9 01       	movw	r30, r18
    326c:	e8 5b       	subi	r30, 0xB8	; 184
    326e:	fe 4f       	sbci	r31, 0xFE	; 254
    3270:	c4 91       	lpm	r28, Z
    3272:	cc 23       	and	r28, r28
    3274:	91 f0       	breq	.+36     	; 0x329a <digitalRead+0x48>
    3276:	81 11       	cpse	r24, r1
    3278:	0e 94 81 18 	call	0x3102	; 0x3102 <turnOffPWM>
    327c:	ec 2f       	mov	r30, r28
    327e:	f0 e0       	ldi	r31, 0x00	; 0
    3280:	ee 0f       	add	r30, r30
    3282:	ff 1f       	adc	r31, r31
    3284:	e9 59       	subi	r30, 0x99	; 153
    3286:	fe 4f       	sbci	r31, 0xFE	; 254
    3288:	a5 91       	lpm	r26, Z+
    328a:	b4 91       	lpm	r27, Z
    328c:	ec 91       	ld	r30, X
    328e:	ed 23       	and	r30, r29
    3290:	81 e0       	ldi	r24, 0x01	; 1
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	21 f4       	brne	.+8      	; 0x329e <digitalRead+0x4c>
    3296:	80 e0       	ldi	r24, 0x00	; 0
    3298:	02 c0       	rjmp	.+4      	; 0x329e <digitalRead+0x4c>
    329a:	80 e0       	ldi	r24, 0x00	; 0
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	df 91       	pop	r29
    32a0:	cf 91       	pop	r28
    32a2:	08 95       	ret

000032a4 <_ZN6StringD1Ev>:
    32a4:	fc 01       	movw	r30, r24
    32a6:	80 81       	ld	r24, Z
    32a8:	91 81       	ldd	r25, Z+1	; 0x01
    32aa:	0c 94 17 1d 	jmp	0x3a2e	; 0x3a2e <free>

000032ae <_ZN6String10invalidateEv>:
    32ae:	cf 93       	push	r28
    32b0:	df 93       	push	r29
    32b2:	ec 01       	movw	r28, r24
    32b4:	88 81       	ld	r24, Y
    32b6:	99 81       	ldd	r25, Y+1	; 0x01
    32b8:	00 97       	sbiw	r24, 0x00	; 0
    32ba:	11 f0       	breq	.+4      	; 0x32c0 <_ZN6String10invalidateEv+0x12>
    32bc:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <free>
    32c0:	19 82       	std	Y+1, r1	; 0x01
    32c2:	18 82       	st	Y, r1
    32c4:	1d 82       	std	Y+5, r1	; 0x05
    32c6:	1c 82       	std	Y+4, r1	; 0x04
    32c8:	1b 82       	std	Y+3, r1	; 0x03
    32ca:	1a 82       	std	Y+2, r1	; 0x02
    32cc:	df 91       	pop	r29
    32ce:	cf 91       	pop	r28
    32d0:	08 95       	ret

000032d2 <_ZN6String12changeBufferEj>:
    32d2:	0f 93       	push	r16
    32d4:	1f 93       	push	r17
    32d6:	cf 93       	push	r28
    32d8:	df 93       	push	r29
    32da:	ec 01       	movw	r28, r24
    32dc:	8b 01       	movw	r16, r22
    32de:	6f 5f       	subi	r22, 0xFF	; 255
    32e0:	7f 4f       	sbci	r23, 0xFF	; 255
    32e2:	88 81       	ld	r24, Y
    32e4:	99 81       	ldd	r25, Y+1	; 0x01
    32e6:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <realloc>
    32ea:	00 97       	sbiw	r24, 0x00	; 0
    32ec:	31 f0       	breq	.+12     	; 0x32fa <_ZN6String12changeBufferEj+0x28>
    32ee:	99 83       	std	Y+1, r25	; 0x01
    32f0:	88 83       	st	Y, r24
    32f2:	1b 83       	std	Y+3, r17	; 0x03
    32f4:	0a 83       	std	Y+2, r16	; 0x02
    32f6:	81 e0       	ldi	r24, 0x01	; 1
    32f8:	01 c0       	rjmp	.+2      	; 0x32fc <_ZN6String12changeBufferEj+0x2a>
    32fa:	80 e0       	ldi	r24, 0x00	; 0
    32fc:	df 91       	pop	r29
    32fe:	cf 91       	pop	r28
    3300:	1f 91       	pop	r17
    3302:	0f 91       	pop	r16
    3304:	08 95       	ret

00003306 <_ZN6String7reserveEj>:
    3306:	cf 93       	push	r28
    3308:	df 93       	push	r29
    330a:	ec 01       	movw	r28, r24
    330c:	88 81       	ld	r24, Y
    330e:	99 81       	ldd	r25, Y+1	; 0x01
    3310:	89 2b       	or	r24, r25
    3312:	29 f0       	breq	.+10     	; 0x331e <_ZN6String7reserveEj+0x18>
    3314:	8a 81       	ldd	r24, Y+2	; 0x02
    3316:	9b 81       	ldd	r25, Y+3	; 0x03
    3318:	86 17       	cp	r24, r22
    331a:	97 07       	cpc	r25, r23
    331c:	60 f4       	brcc	.+24     	; 0x3336 <_ZN6String7reserveEj+0x30>
    331e:	ce 01       	movw	r24, r28
    3320:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_ZN6String12changeBufferEj>
    3324:	88 23       	and	r24, r24
    3326:	41 f0       	breq	.+16     	; 0x3338 <_ZN6String7reserveEj+0x32>
    3328:	8c 81       	ldd	r24, Y+4	; 0x04
    332a:	9d 81       	ldd	r25, Y+5	; 0x05
    332c:	89 2b       	or	r24, r25
    332e:	19 f4       	brne	.+6      	; 0x3336 <_ZN6String7reserveEj+0x30>
    3330:	e8 81       	ld	r30, Y
    3332:	f9 81       	ldd	r31, Y+1	; 0x01
    3334:	10 82       	st	Z, r1
    3336:	81 e0       	ldi	r24, 0x01	; 1
    3338:	df 91       	pop	r29
    333a:	cf 91       	pop	r28
    333c:	08 95       	ret

0000333e <_ZN6String4copyEPKcj>:
    333e:	ef 92       	push	r14
    3340:	ff 92       	push	r15
    3342:	0f 93       	push	r16
    3344:	1f 93       	push	r17
    3346:	cf 93       	push	r28
    3348:	df 93       	push	r29
    334a:	ec 01       	movw	r28, r24
    334c:	7b 01       	movw	r14, r22
    334e:	8a 01       	movw	r16, r20
    3350:	ba 01       	movw	r22, r20
    3352:	0e 94 83 19 	call	0x3306	; 0x3306 <_ZN6String7reserveEj>
    3356:	81 11       	cpse	r24, r1
    3358:	04 c0       	rjmp	.+8      	; 0x3362 <_ZN6String4copyEPKcj+0x24>
    335a:	ce 01       	movw	r24, r28
    335c:	0e 94 57 19 	call	0x32ae	; 0x32ae <_ZN6String10invalidateEv>
    3360:	07 c0       	rjmp	.+14     	; 0x3370 <_ZN6String4copyEPKcj+0x32>
    3362:	1d 83       	std	Y+5, r17	; 0x05
    3364:	0c 83       	std	Y+4, r16	; 0x04
    3366:	b7 01       	movw	r22, r14
    3368:	88 81       	ld	r24, Y
    336a:	99 81       	ldd	r25, Y+1	; 0x01
    336c:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <strcpy>
    3370:	ce 01       	movw	r24, r28
    3372:	df 91       	pop	r29
    3374:	cf 91       	pop	r28
    3376:	1f 91       	pop	r17
    3378:	0f 91       	pop	r16
    337a:	ff 90       	pop	r15
    337c:	ef 90       	pop	r14
    337e:	08 95       	ret

00003380 <_ZN6StringC1EPKc>:
    3380:	fc 01       	movw	r30, r24
    3382:	11 82       	std	Z+1, r1	; 0x01
    3384:	10 82       	st	Z, r1
    3386:	13 82       	std	Z+3, r1	; 0x03
    3388:	12 82       	std	Z+2, r1	; 0x02
    338a:	15 82       	std	Z+5, r1	; 0x05
    338c:	14 82       	std	Z+4, r1	; 0x04
    338e:	61 15       	cp	r22, r1
    3390:	71 05       	cpc	r23, r1
    3392:	51 f0       	breq	.+20     	; 0x33a8 <_ZN6StringC1EPKc+0x28>
    3394:	fb 01       	movw	r30, r22
    3396:	01 90       	ld	r0, Z+
    3398:	00 20       	and	r0, r0
    339a:	e9 f7       	brne	.-6      	; 0x3396 <_ZN6StringC1EPKc+0x16>
    339c:	31 97       	sbiw	r30, 0x01	; 1
    339e:	af 01       	movw	r20, r30
    33a0:	46 1b       	sub	r20, r22
    33a2:	57 0b       	sbc	r21, r23
    33a4:	0c 94 9f 19 	jmp	0x333e	; 0x333e <_ZN6String4copyEPKcj>
    33a8:	08 95       	ret

000033aa <_ZN7Serial_5writeEh>:
    33aa:	cf 93       	push	r28
    33ac:	df 93       	push	r29
    33ae:	1f 92       	push	r1
    33b0:	cd b7       	in	r28, 0x3d	; 61
    33b2:	de b7       	in	r29, 0x3e	; 62
    33b4:	69 83       	std	Y+1, r22	; 0x01
    33b6:	dc 01       	movw	r26, r24
    33b8:	ed 91       	ld	r30, X+
    33ba:	fc 91       	ld	r31, X
    33bc:	02 80       	ldd	r0, Z+2	; 0x02
    33be:	f3 81       	ldd	r31, Z+3	; 0x03
    33c0:	e0 2d       	mov	r30, r0
    33c2:	41 e0       	ldi	r20, 0x01	; 1
    33c4:	50 e0       	ldi	r21, 0x00	; 0
    33c6:	be 01       	movw	r22, r28
    33c8:	6f 5f       	subi	r22, 0xFF	; 255
    33ca:	7f 4f       	sbci	r23, 0xFF	; 255
    33cc:	09 95       	icall
    33ce:	0f 90       	pop	r0
    33d0:	df 91       	pop	r29
    33d2:	cf 91       	pop	r28
    33d4:	08 95       	ret

000033d6 <_ZN7Serial_4peekEv>:
    33d6:	cf 93       	push	r28
    33d8:	df 93       	push	r29
    33da:	ec 01       	movw	r28, r24
    33dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    33de:	9d 85       	ldd	r25, Y+13	; 0x0d
    33e0:	97 ff       	sbrs	r25, 7
    33e2:	05 c0       	rjmp	.+10     	; 0x33ee <_ZN7Serial_4peekEv+0x18>
    33e4:	82 e0       	ldi	r24, 0x02	; 2
    33e6:	0e 94 10 14 	call	0x2820	; 0x2820 <_Z8USB_Recvh>
    33ea:	9d 87       	std	Y+13, r25	; 0x0d
    33ec:	8c 87       	std	Y+12, r24	; 0x0c
    33ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    33f0:	9d 85       	ldd	r25, Y+13	; 0x0d
    33f2:	df 91       	pop	r29
    33f4:	cf 91       	pop	r28
    33f6:	08 95       	ret

000033f8 <_ZN7Serial_17availableForWriteEv>:
    33f8:	83 e0       	ldi	r24, 0x03	; 3
    33fa:	0e 94 27 14 	call	0x284e	; 0x284e <_Z13USB_SendSpaceh>
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	08 95       	ret

00003402 <_ZN7Serial_5flushEv>:
    3402:	83 e0       	ldi	r24, 0x03	; 3
    3404:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <_Z9USB_Flushh>

00003408 <_ZN7Serial_9availableEv>:
    3408:	fc 01       	movw	r30, r24
    340a:	84 85       	ldd	r24, Z+12	; 0x0c
    340c:	95 85       	ldd	r25, Z+13	; 0x0d
    340e:	97 fd       	sbrc	r25, 7
    3410:	06 c0       	rjmp	.+12     	; 0x341e <_ZN7Serial_9availableEv+0x16>
    3412:	82 e0       	ldi	r24, 0x02	; 2
    3414:	0e 94 bb 13 	call	0x2776	; 0x2776 <_Z13USB_Availableh>
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	01 96       	adiw	r24, 0x01	; 1
    341c:	08 95       	ret
    341e:	82 e0       	ldi	r24, 0x02	; 2
    3420:	0e 94 bb 13 	call	0x2776	; 0x2776 <_Z13USB_Availableh>
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	08 95       	ret

00003428 <_ZN7Serial_4readEv>:
    3428:	fc 01       	movw	r30, r24
    342a:	84 85       	ldd	r24, Z+12	; 0x0c
    342c:	95 85       	ldd	r25, Z+13	; 0x0d
    342e:	97 fd       	sbrc	r25, 7
    3430:	05 c0       	rjmp	.+10     	; 0x343c <_ZN7Serial_4readEv+0x14>
    3432:	2f ef       	ldi	r18, 0xFF	; 255
    3434:	3f ef       	ldi	r19, 0xFF	; 255
    3436:	35 87       	std	Z+13, r19	; 0x0d
    3438:	24 87       	std	Z+12, r18	; 0x0c
    343a:	08 95       	ret
    343c:	82 e0       	ldi	r24, 0x02	; 2
    343e:	0c 94 10 14 	jmp	0x2820	; 0x2820 <_Z8USB_Recvh>

00003442 <_ZN7Serial_5writeEPKhj>:
    3442:	cf 93       	push	r28
    3444:	df 93       	push	r29
    3446:	ec 01       	movw	r28, r24
    3448:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL12_usbLineInfo+0x7>
    344c:	88 23       	and	r24, r24
    344e:	31 f0       	breq	.+12     	; 0x345c <_ZN7Serial_5writeEPKhj+0x1a>
    3450:	83 e0       	ldi	r24, 0x03	; 3
    3452:	0e 94 41 14 	call	0x2882	; 0x2882 <_Z8USB_SendhPKvi>
    3456:	18 16       	cp	r1, r24
    3458:	19 06       	cpc	r1, r25
    345a:	34 f0       	brlt	.+12     	; 0x3468 <_ZN7Serial_5writeEPKhj+0x26>
    345c:	81 e0       	ldi	r24, 0x01	; 1
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	9b 83       	std	Y+3, r25	; 0x03
    3462:	8a 83       	std	Y+2, r24	; 0x02
    3464:	80 e0       	ldi	r24, 0x00	; 0
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	df 91       	pop	r29
    346a:	cf 91       	pop	r28
    346c:	08 95       	ret

0000346e <_Z16isLUFAbootloaderv>:
    346e:	ee ef       	ldi	r30, 0xFE	; 254
    3470:	ff e7       	ldi	r31, 0x7F	; 127
    3472:	25 91       	lpm	r18, Z+
    3474:	34 91       	lpm	r19, Z
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	2b 3f       	cpi	r18, 0xFB	; 251
    347a:	3c 4d       	sbci	r19, 0xDC	; 220
    347c:	09 f0       	breq	.+2      	; 0x3480 <_Z16isLUFAbootloaderv+0x12>
    347e:	80 e0       	ldi	r24, 0x00	; 0
    3480:	08 95       	ret

00003482 <_Z16CDC_GetInterfacePh>:
    3482:	fc 01       	movw	r30, r24
    3484:	90 81       	ld	r25, Z
    3486:	9e 5f       	subi	r25, 0xFE	; 254
    3488:	90 83       	st	Z, r25
    348a:	42 e4       	ldi	r20, 0x42	; 66
    348c:	50 e0       	ldi	r21, 0x00	; 0
    348e:	61 e9       	ldi	r22, 0x91	; 145
    3490:	71 e0       	ldi	r23, 0x01	; 1
    3492:	80 e8       	ldi	r24, 0x80	; 128
    3494:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <_Z15USB_SendControlhPKvi>

00003498 <_Z9CDC_SetupR8USBSetup>:
    3498:	fc 01       	movw	r30, r24
    349a:	81 81       	ldd	r24, Z+1	; 0x01
    349c:	90 81       	ld	r25, Z
    349e:	91 3a       	cpi	r25, 0xA1	; 161
    34a0:	59 f4       	brne	.+22     	; 0x34b8 <_Z9CDC_SetupR8USBSetup+0x20>
    34a2:	81 32       	cpi	r24, 0x21	; 33
    34a4:	09 f0       	breq	.+2      	; 0x34a8 <_Z9CDC_SetupR8USBSetup+0x10>
    34a6:	65 c0       	rjmp	.+202    	; 0x3572 <_Z9CDC_SetupR8USBSetup+0xda>
    34a8:	47 e0       	ldi	r20, 0x07	; 7
    34aa:	50 e0       	ldi	r21, 0x00	; 0
    34ac:	66 e1       	ldi	r22, 0x16	; 22
    34ae:	71 e0       	ldi	r23, 0x01	; 1
    34b0:	80 e0       	ldi	r24, 0x00	; 0
    34b2:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <_Z15USB_SendControlhPKvi>
    34b6:	5b c0       	rjmp	.+182    	; 0x356e <_Z9CDC_SetupR8USBSetup+0xd6>
    34b8:	91 32       	cpi	r25, 0x21	; 33
    34ba:	09 f0       	breq	.+2      	; 0x34be <_Z9CDC_SetupR8USBSetup+0x26>
    34bc:	5a c0       	rjmp	.+180    	; 0x3572 <_Z9CDC_SetupR8USBSetup+0xda>
    34be:	83 32       	cpi	r24, 0x23	; 35
    34c0:	69 f4       	brne	.+26     	; 0x34dc <_Z9CDC_SetupR8USBSetup+0x44>
    34c2:	82 81       	ldd	r24, Z+2	; 0x02
    34c4:	93 81       	ldd	r25, Z+3	; 0x03
    34c6:	a0 e0       	ldi	r26, 0x00	; 0
    34c8:	b0 e0       	ldi	r27, 0x00	; 0
    34ca:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_ZL10breakValue>
    34ce:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_ZL10breakValue+0x1>
    34d2:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <_ZL10breakValue+0x2>
    34d6:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <_ZL10breakValue+0x3>
    34da:	49 c0       	rjmp	.+146    	; 0x356e <_Z9CDC_SetupR8USBSetup+0xd6>
    34dc:	80 32       	cpi	r24, 0x20	; 32
    34de:	39 f4       	brne	.+14     	; 0x34ee <_Z9CDC_SetupR8USBSetup+0x56>
    34e0:	67 e0       	ldi	r22, 0x07	; 7
    34e2:	70 e0       	ldi	r23, 0x00	; 0
    34e4:	86 e1       	ldi	r24, 0x16	; 22
    34e6:	91 e0       	ldi	r25, 0x01	; 1
    34e8:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_Z15USB_RecvControlPvi>
    34ec:	40 c0       	rjmp	.+128    	; 0x356e <_Z9CDC_SetupR8USBSetup+0xd6>
    34ee:	82 32       	cpi	r24, 0x22	; 34
    34f0:	09 f0       	breq	.+2      	; 0x34f4 <_Z9CDC_SetupR8USBSetup+0x5c>
    34f2:	3d c0       	rjmp	.+122    	; 0x356e <_Z9CDC_SetupR8USBSetup+0xd6>
    34f4:	82 81       	ldd	r24, Z+2	; 0x02
    34f6:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZL12_usbLineInfo+0x7>
    34fa:	0e 94 37 1a 	call	0x346e	; 0x346e <_Z16isLUFAbootloaderv>
    34fe:	88 23       	and	r24, r24
    3500:	19 f0       	breq	.+6      	; 0x3508 <_Z9CDC_SetupR8USBSetup+0x70>
    3502:	ee ef       	ldi	r30, 0xFE	; 254
    3504:	fa e0       	ldi	r31, 0x0A	; 10
    3506:	02 c0       	rjmp	.+4      	; 0x350c <_Z9CDC_SetupR8USBSetup+0x74>
    3508:	e0 e0       	ldi	r30, 0x00	; 0
    350a:	f8 e0       	ldi	r31, 0x08	; 8
    350c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_ZL12_usbLineInfo>
    3510:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <_ZL12_usbLineInfo+0x1>
    3514:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <_ZL12_usbLineInfo+0x2>
    3518:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <_ZL12_usbLineInfo+0x3>
    351c:	80 3b       	cpi	r24, 0xB0	; 176
    351e:	94 40       	sbci	r25, 0x04	; 4
    3520:	a1 05       	cpc	r26, r1
    3522:	b1 05       	cpc	r27, r1
    3524:	41 f5       	brne	.+80     	; 0x3576 <_Z9CDC_SetupR8USBSetup+0xde>
    3526:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL12_usbLineInfo+0x7>
    352a:	80 fd       	sbrc	r24, 0
    352c:	24 c0       	rjmp	.+72     	; 0x3576 <_Z9CDC_SetupR8USBSetup+0xde>
    352e:	ee 3f       	cpi	r30, 0xFE	; 254
    3530:	8a e0       	ldi	r24, 0x0A	; 10
    3532:	f8 07       	cpc	r31, r24
    3534:	51 f0       	breq	.+20     	; 0x354a <_Z9CDC_SetupR8USBSetup+0xb2>
    3536:	80 81       	ld	r24, Z
    3538:	91 81       	ldd	r25, Z+1	; 0x01
    353a:	87 37       	cpi	r24, 0x77	; 119
    353c:	27 e7       	ldi	r18, 0x77	; 119
    353e:	92 07       	cpc	r25, r18
    3540:	21 f0       	breq	.+8      	; 0x354a <_Z9CDC_SetupR8USBSetup+0xb2>
    3542:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x625>
    3546:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x624>
    354a:	87 e7       	ldi	r24, 0x77	; 119
    354c:	97 e7       	ldi	r25, 0x77	; 119
    354e:	91 83       	std	Z+1, r25	; 0x01
    3550:	80 83       	st	Z, r24
    3552:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3556:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <_ZL11wdtcsr_save>
    355a:	9b e0       	ldi	r25, 0x0B	; 11
    355c:	88 e1       	ldi	r24, 0x18	; 24
    355e:	0f b6       	in	r0, 0x3f	; 63
    3560:	f8 94       	cli
    3562:	a8 95       	wdr
    3564:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3568:	0f be       	out	0x3f, r0	; 63
    356a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	08 95       	ret
    3572:	80 e0       	ldi	r24, 0x00	; 0
    3574:	08 95       	ret
    3576:	80 81       	ld	r24, Z
    3578:	91 81       	ldd	r25, Z+1	; 0x01
    357a:	87 37       	cpi	r24, 0x77	; 119
    357c:	97 47       	sbci	r25, 0x77	; 119
    357e:	b9 f7       	brne	.-18     	; 0x356e <_Z9CDC_SetupR8USBSetup+0xd6>
    3580:	a8 95       	wdr
    3582:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3586:	88 61       	ori	r24, 0x18	; 24
    3588:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    358c:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <_ZL11wdtcsr_save>
    3590:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3594:	ee 3f       	cpi	r30, 0xFE	; 254
    3596:	8a e0       	ldi	r24, 0x0A	; 10
    3598:	f8 07       	cpc	r31, r24
    359a:	39 f0       	breq	.+14     	; 0x35aa <_Z9CDC_SetupR8USBSetup+0x112>
    359c:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x624>
    35a0:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x625>
    35a4:	91 83       	std	Z+1, r25	; 0x01
    35a6:	80 83       	st	Z, r24
    35a8:	e2 cf       	rjmp	.-60     	; 0x356e <_Z9CDC_SetupR8USBSetup+0xd6>
    35aa:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x625>
    35ae:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x624>
    35b2:	dd cf       	rjmp	.-70     	; 0x356e <_Z9CDC_SetupR8USBSetup+0xd6>

000035b4 <_GLOBAL__sub_I__cdcInterface>:
    35b4:	e9 e7       	ldi	r30, 0x79	; 121
    35b6:	f4 e0       	ldi	r31, 0x04	; 4
    35b8:	13 82       	std	Z+3, r1	; 0x03
    35ba:	12 82       	std	Z+2, r1	; 0x02
    35bc:	88 ee       	ldi	r24, 0xE8	; 232
    35be:	93 e0       	ldi	r25, 0x03	; 3
    35c0:	a0 e0       	ldi	r26, 0x00	; 0
    35c2:	b0 e0       	ldi	r27, 0x00	; 0
    35c4:	84 83       	std	Z+4, r24	; 0x04
    35c6:	95 83       	std	Z+5, r25	; 0x05
    35c8:	a6 83       	std	Z+6, r26	; 0x06
    35ca:	b7 83       	std	Z+7, r27	; 0x07
    35cc:	89 e7       	ldi	r24, 0x79	; 121
    35ce:	92 e0       	ldi	r25, 0x02	; 2
    35d0:	91 83       	std	Z+1, r25	; 0x01
    35d2:	80 83       	st	Z, r24
    35d4:	8f ef       	ldi	r24, 0xFF	; 255
    35d6:	9f ef       	ldi	r25, 0xFF	; 255
    35d8:	95 87       	std	Z+13, r25	; 0x0d
    35da:	84 87       	std	Z+12, r24	; 0x0c
    35dc:	08 95       	ret

000035de <yield>:
    35de:	08 95       	ret

000035e0 <_ZN13PluggableUSB_12getInterfaceEPh>:
    35e0:	ef 92       	push	r14
    35e2:	ff 92       	push	r15
    35e4:	0f 93       	push	r16
    35e6:	1f 93       	push	r17
    35e8:	cf 93       	push	r28
    35ea:	df 93       	push	r29
    35ec:	7b 01       	movw	r14, r22
    35ee:	fc 01       	movw	r30, r24
    35f0:	c2 81       	ldd	r28, Z+2	; 0x02
    35f2:	d3 81       	ldd	r29, Z+3	; 0x03
    35f4:	00 e0       	ldi	r16, 0x00	; 0
    35f6:	10 e0       	ldi	r17, 0x00	; 0
    35f8:	20 97       	sbiw	r28, 0x00	; 0
    35fa:	81 f0       	breq	.+32     	; 0x361c <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
    35fc:	e8 81       	ld	r30, Y
    35fe:	f9 81       	ldd	r31, Y+1	; 0x01
    3600:	02 80       	ldd	r0, Z+2	; 0x02
    3602:	f3 81       	ldd	r31, Z+3	; 0x03
    3604:	e0 2d       	mov	r30, r0
    3606:	b7 01       	movw	r22, r14
    3608:	ce 01       	movw	r24, r28
    360a:	09 95       	icall
    360c:	97 fd       	sbrc	r25, 7
    360e:	08 c0       	rjmp	.+16     	; 0x3620 <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
    3610:	08 0f       	add	r16, r24
    3612:	19 1f       	adc	r17, r25
    3614:	08 84       	ldd	r0, Y+8	; 0x08
    3616:	d9 85       	ldd	r29, Y+9	; 0x09
    3618:	c0 2d       	mov	r28, r0
    361a:	ee cf       	rjmp	.-36     	; 0x35f8 <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    361c:	c8 01       	movw	r24, r16
    361e:	02 c0       	rjmp	.+4      	; 0x3624 <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
    3620:	8f ef       	ldi	r24, 0xFF	; 255
    3622:	9f ef       	ldi	r25, 0xFF	; 255
    3624:	df 91       	pop	r29
    3626:	cf 91       	pop	r28
    3628:	1f 91       	pop	r17
    362a:	0f 91       	pop	r16
    362c:	ff 90       	pop	r15
    362e:	ef 90       	pop	r14
    3630:	08 95       	ret

00003632 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    3632:	0f 93       	push	r16
    3634:	1f 93       	push	r17
    3636:	cf 93       	push	r28
    3638:	df 93       	push	r29
    363a:	8b 01       	movw	r16, r22
    363c:	fc 01       	movw	r30, r24
    363e:	c2 81       	ldd	r28, Z+2	; 0x02
    3640:	d3 81       	ldd	r29, Z+3	; 0x03
    3642:	20 97       	sbiw	r28, 0x00	; 0
    3644:	71 f0       	breq	.+28     	; 0x3662 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
    3646:	e8 81       	ld	r30, Y
    3648:	f9 81       	ldd	r31, Y+1	; 0x01
    364a:	04 80       	ldd	r0, Z+4	; 0x04
    364c:	f5 81       	ldd	r31, Z+5	; 0x05
    364e:	e0 2d       	mov	r30, r0
    3650:	b8 01       	movw	r22, r16
    3652:	ce 01       	movw	r24, r28
    3654:	09 95       	icall
    3656:	00 97       	sbiw	r24, 0x00	; 0
    3658:	31 f4       	brne	.+12     	; 0x3666 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
    365a:	08 84       	ldd	r0, Y+8	; 0x08
    365c:	d9 85       	ldd	r29, Y+9	; 0x09
    365e:	c0 2d       	mov	r28, r0
    3660:	f0 cf       	rjmp	.-32     	; 0x3642 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
    3662:	80 e0       	ldi	r24, 0x00	; 0
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	df 91       	pop	r29
    3668:	cf 91       	pop	r28
    366a:	1f 91       	pop	r17
    366c:	0f 91       	pop	r16
    366e:	08 95       	ret

00003670 <_ZN13PluggableUSB_12getShortNameEPc>:
    3670:	0f 93       	push	r16
    3672:	1f 93       	push	r17
    3674:	cf 93       	push	r28
    3676:	df 93       	push	r29
    3678:	8b 01       	movw	r16, r22
    367a:	fc 01       	movw	r30, r24
    367c:	c2 81       	ldd	r28, Z+2	; 0x02
    367e:	d3 81       	ldd	r29, Z+3	; 0x03
    3680:	20 97       	sbiw	r28, 0x00	; 0
    3682:	71 f0       	breq	.+28     	; 0x36a0 <_ZN13PluggableUSB_12getShortNameEPc+0x30>
    3684:	e8 81       	ld	r30, Y
    3686:	f9 81       	ldd	r31, Y+1	; 0x01
    3688:	06 80       	ldd	r0, Z+6	; 0x06
    368a:	f7 81       	ldd	r31, Z+7	; 0x07
    368c:	e0 2d       	mov	r30, r0
    368e:	b8 01       	movw	r22, r16
    3690:	ce 01       	movw	r24, r28
    3692:	09 95       	icall
    3694:	08 0f       	add	r16, r24
    3696:	11 1d       	adc	r17, r1
    3698:	08 84       	ldd	r0, Y+8	; 0x08
    369a:	d9 85       	ldd	r29, Y+9	; 0x09
    369c:	c0 2d       	mov	r28, r0
    369e:	f0 cf       	rjmp	.-32     	; 0x3680 <_ZN13PluggableUSB_12getShortNameEPc+0x10>
    36a0:	f8 01       	movw	r30, r16
    36a2:	10 82       	st	Z, r1
    36a4:	df 91       	pop	r29
    36a6:	cf 91       	pop	r28
    36a8:	1f 91       	pop	r17
    36aa:	0f 91       	pop	r16
    36ac:	08 95       	ret

000036ae <_ZN13PluggableUSB_5setupER8USBSetup>:
    36ae:	0f 93       	push	r16
    36b0:	1f 93       	push	r17
    36b2:	cf 93       	push	r28
    36b4:	df 93       	push	r29
    36b6:	8b 01       	movw	r16, r22
    36b8:	fc 01       	movw	r30, r24
    36ba:	c2 81       	ldd	r28, Z+2	; 0x02
    36bc:	d3 81       	ldd	r29, Z+3	; 0x03
    36be:	20 97       	sbiw	r28, 0x00	; 0
    36c0:	71 f0       	breq	.+28     	; 0x36de <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
    36c2:	e8 81       	ld	r30, Y
    36c4:	f9 81       	ldd	r31, Y+1	; 0x01
    36c6:	01 90       	ld	r0, Z+
    36c8:	f0 81       	ld	r31, Z
    36ca:	e0 2d       	mov	r30, r0
    36cc:	b8 01       	movw	r22, r16
    36ce:	ce 01       	movw	r24, r28
    36d0:	09 95       	icall
    36d2:	81 11       	cpse	r24, r1
    36d4:	05 c0       	rjmp	.+10     	; 0x36e0 <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
    36d6:	08 84       	ldd	r0, Y+8	; 0x08
    36d8:	d9 85       	ldd	r29, Y+9	; 0x09
    36da:	c0 2d       	mov	r28, r0
    36dc:	f0 cf       	rjmp	.-32     	; 0x36be <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
    36de:	80 e0       	ldi	r24, 0x00	; 0
    36e0:	df 91       	pop	r29
    36e2:	cf 91       	pop	r28
    36e4:	1f 91       	pop	r17
    36e6:	0f 91       	pop	r16
    36e8:	08 95       	ret

000036ea <_Z12PluggableUSBv>:
    36ea:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <_ZGVZ12PluggableUSBvE3obj>
    36ee:	81 11       	cpse	r24, r1
    36f0:	0d c0       	rjmp	.+26     	; 0x370c <_Z12PluggableUSBv+0x22>
    36f2:	82 e0       	ldi	r24, 0x02	; 2
    36f4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <_ZZ12PluggableUSBvE3obj>
    36f8:	84 e0       	ldi	r24, 0x04	; 4
    36fa:	80 93 cb 04 	sts	0x04CB, r24	; 0x8004cb <_ZZ12PluggableUSBvE3obj+0x1>
    36fe:	10 92 cd 04 	sts	0x04CD, r1	; 0x8004cd <_ZZ12PluggableUSBvE3obj+0x3>
    3702:	10 92 cc 04 	sts	0x04CC, r1	; 0x8004cc <_ZZ12PluggableUSBvE3obj+0x2>
    3706:	81 e0       	ldi	r24, 0x01	; 1
    3708:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <_ZGVZ12PluggableUSBvE3obj>
    370c:	8a ec       	ldi	r24, 0xCA	; 202
    370e:	94 e0       	ldi	r25, 0x04	; 4
    3710:	08 95       	ret

00003712 <__subsf3>:
    3712:	50 58       	subi	r21, 0x80	; 128

00003714 <__addsf3>:
    3714:	bb 27       	eor	r27, r27
    3716:	aa 27       	eor	r26, r26
    3718:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__addsf3x>
    371c:	0c 94 46 10 	jmp	0x208c	; 0x208c <__fp_round>
    3720:	0e 94 38 10 	call	0x2070	; 0x2070 <__fp_pscA>
    3724:	38 f0       	brcs	.+14     	; 0x3734 <__addsf3+0x20>
    3726:	0e 94 3f 10 	call	0x207e	; 0x207e <__fp_pscB>
    372a:	20 f0       	brcs	.+8      	; 0x3734 <__addsf3+0x20>
    372c:	39 f4       	brne	.+14     	; 0x373c <__addsf3+0x28>
    372e:	9f 3f       	cpi	r25, 0xFF	; 255
    3730:	19 f4       	brne	.+6      	; 0x3738 <__addsf3+0x24>
    3732:	26 f4       	brtc	.+8      	; 0x373c <__addsf3+0x28>
    3734:	0c 94 35 10 	jmp	0x206a	; 0x206a <__fp_nan>
    3738:	0e f4       	brtc	.+2      	; 0x373c <__addsf3+0x28>
    373a:	e0 95       	com	r30
    373c:	e7 fb       	bst	r30, 7
    373e:	0c 94 2f 10 	jmp	0x205e	; 0x205e <__fp_inf>

00003742 <__addsf3x>:
    3742:	e9 2f       	mov	r30, r25
    3744:	0e 94 57 10 	call	0x20ae	; 0x20ae <__fp_split3>
    3748:	58 f3       	brcs	.-42     	; 0x3720 <__addsf3+0xc>
    374a:	ba 17       	cp	r27, r26
    374c:	62 07       	cpc	r22, r18
    374e:	73 07       	cpc	r23, r19
    3750:	84 07       	cpc	r24, r20
    3752:	95 07       	cpc	r25, r21
    3754:	20 f0       	brcs	.+8      	; 0x375e <__addsf3x+0x1c>
    3756:	79 f4       	brne	.+30     	; 0x3776 <__addsf3x+0x34>
    3758:	a6 f5       	brtc	.+104    	; 0x37c2 <__addsf3x+0x80>
    375a:	0c 94 79 10 	jmp	0x20f2	; 0x20f2 <__fp_zero>
    375e:	0e f4       	brtc	.+2      	; 0x3762 <__addsf3x+0x20>
    3760:	e0 95       	com	r30
    3762:	0b 2e       	mov	r0, r27
    3764:	ba 2f       	mov	r27, r26
    3766:	a0 2d       	mov	r26, r0
    3768:	0b 01       	movw	r0, r22
    376a:	b9 01       	movw	r22, r18
    376c:	90 01       	movw	r18, r0
    376e:	0c 01       	movw	r0, r24
    3770:	ca 01       	movw	r24, r20
    3772:	a0 01       	movw	r20, r0
    3774:	11 24       	eor	r1, r1
    3776:	ff 27       	eor	r31, r31
    3778:	59 1b       	sub	r21, r25
    377a:	99 f0       	breq	.+38     	; 0x37a2 <__addsf3x+0x60>
    377c:	59 3f       	cpi	r21, 0xF9	; 249
    377e:	50 f4       	brcc	.+20     	; 0x3794 <__addsf3x+0x52>
    3780:	50 3e       	cpi	r21, 0xE0	; 224
    3782:	68 f1       	brcs	.+90     	; 0x37de <__addsf3x+0x9c>
    3784:	1a 16       	cp	r1, r26
    3786:	f0 40       	sbci	r31, 0x00	; 0
    3788:	a2 2f       	mov	r26, r18
    378a:	23 2f       	mov	r18, r19
    378c:	34 2f       	mov	r19, r20
    378e:	44 27       	eor	r20, r20
    3790:	58 5f       	subi	r21, 0xF8	; 248
    3792:	f3 cf       	rjmp	.-26     	; 0x377a <__addsf3x+0x38>
    3794:	46 95       	lsr	r20
    3796:	37 95       	ror	r19
    3798:	27 95       	ror	r18
    379a:	a7 95       	ror	r26
    379c:	f0 40       	sbci	r31, 0x00	; 0
    379e:	53 95       	inc	r21
    37a0:	c9 f7       	brne	.-14     	; 0x3794 <__addsf3x+0x52>
    37a2:	7e f4       	brtc	.+30     	; 0x37c2 <__addsf3x+0x80>
    37a4:	1f 16       	cp	r1, r31
    37a6:	ba 0b       	sbc	r27, r26
    37a8:	62 0b       	sbc	r22, r18
    37aa:	73 0b       	sbc	r23, r19
    37ac:	84 0b       	sbc	r24, r20
    37ae:	ba f0       	brmi	.+46     	; 0x37de <__addsf3x+0x9c>
    37b0:	91 50       	subi	r25, 0x01	; 1
    37b2:	a1 f0       	breq	.+40     	; 0x37dc <__addsf3x+0x9a>
    37b4:	ff 0f       	add	r31, r31
    37b6:	bb 1f       	adc	r27, r27
    37b8:	66 1f       	adc	r22, r22
    37ba:	77 1f       	adc	r23, r23
    37bc:	88 1f       	adc	r24, r24
    37be:	c2 f7       	brpl	.-16     	; 0x37b0 <__addsf3x+0x6e>
    37c0:	0e c0       	rjmp	.+28     	; 0x37de <__addsf3x+0x9c>
    37c2:	ba 0f       	add	r27, r26
    37c4:	62 1f       	adc	r22, r18
    37c6:	73 1f       	adc	r23, r19
    37c8:	84 1f       	adc	r24, r20
    37ca:	48 f4       	brcc	.+18     	; 0x37de <__addsf3x+0x9c>
    37cc:	87 95       	ror	r24
    37ce:	77 95       	ror	r23
    37d0:	67 95       	ror	r22
    37d2:	b7 95       	ror	r27
    37d4:	f7 95       	ror	r31
    37d6:	9e 3f       	cpi	r25, 0xFE	; 254
    37d8:	08 f0       	brcs	.+2      	; 0x37dc <__addsf3x+0x9a>
    37da:	b0 cf       	rjmp	.-160    	; 0x373c <__addsf3+0x28>
    37dc:	93 95       	inc	r25
    37de:	88 0f       	add	r24, r24
    37e0:	08 f0       	brcs	.+2      	; 0x37e4 <__addsf3x+0xa2>
    37e2:	99 27       	eor	r25, r25
    37e4:	ee 0f       	add	r30, r30
    37e6:	97 95       	ror	r25
    37e8:	87 95       	ror	r24
    37ea:	08 95       	ret

000037ec <__cmpsf2>:
    37ec:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__fp_cmp>
    37f0:	08 f4       	brcc	.+2      	; 0x37f4 <__cmpsf2+0x8>
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	08 95       	ret

000037f6 <__fixunssfsi>:
    37f6:	0e 94 5f 10 	call	0x20be	; 0x20be <__fp_splitA>
    37fa:	88 f0       	brcs	.+34     	; 0x381e <__fixunssfsi+0x28>
    37fc:	9f 57       	subi	r25, 0x7F	; 127
    37fe:	98 f0       	brcs	.+38     	; 0x3826 <__fixunssfsi+0x30>
    3800:	b9 2f       	mov	r27, r25
    3802:	99 27       	eor	r25, r25
    3804:	b7 51       	subi	r27, 0x17	; 23
    3806:	b0 f0       	brcs	.+44     	; 0x3834 <__fixunssfsi+0x3e>
    3808:	e1 f0       	breq	.+56     	; 0x3842 <__fixunssfsi+0x4c>
    380a:	66 0f       	add	r22, r22
    380c:	77 1f       	adc	r23, r23
    380e:	88 1f       	adc	r24, r24
    3810:	99 1f       	adc	r25, r25
    3812:	1a f0       	brmi	.+6      	; 0x381a <__fixunssfsi+0x24>
    3814:	ba 95       	dec	r27
    3816:	c9 f7       	brne	.-14     	; 0x380a <__fixunssfsi+0x14>
    3818:	14 c0       	rjmp	.+40     	; 0x3842 <__fixunssfsi+0x4c>
    381a:	b1 30       	cpi	r27, 0x01	; 1
    381c:	91 f0       	breq	.+36     	; 0x3842 <__fixunssfsi+0x4c>
    381e:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__fp_zero>
    3822:	b1 e0       	ldi	r27, 0x01	; 1
    3824:	08 95       	ret
    3826:	0c 94 79 10 	jmp	0x20f2	; 0x20f2 <__fp_zero>
    382a:	67 2f       	mov	r22, r23
    382c:	78 2f       	mov	r23, r24
    382e:	88 27       	eor	r24, r24
    3830:	b8 5f       	subi	r27, 0xF8	; 248
    3832:	39 f0       	breq	.+14     	; 0x3842 <__fixunssfsi+0x4c>
    3834:	b9 3f       	cpi	r27, 0xF9	; 249
    3836:	cc f3       	brlt	.-14     	; 0x382a <__fixunssfsi+0x34>
    3838:	86 95       	lsr	r24
    383a:	77 95       	ror	r23
    383c:	67 95       	ror	r22
    383e:	b3 95       	inc	r27
    3840:	d9 f7       	brne	.-10     	; 0x3838 <__fixunssfsi+0x42>
    3842:	3e f4       	brtc	.+14     	; 0x3852 <__fixunssfsi+0x5c>
    3844:	90 95       	com	r25
    3846:	80 95       	com	r24
    3848:	70 95       	com	r23
    384a:	61 95       	neg	r22
    384c:	7f 4f       	sbci	r23, 0xFF	; 255
    384e:	8f 4f       	sbci	r24, 0xFF	; 255
    3850:	9f 4f       	sbci	r25, 0xFF	; 255
    3852:	08 95       	ret

00003854 <__unordsf2>:
    3854:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__fp_cmp>
    3858:	88 0b       	sbc	r24, r24
    385a:	99 0b       	sbc	r25, r25
    385c:	08 95       	ret

0000385e <__divmodhi4>:
    385e:	97 fb       	bst	r25, 7
    3860:	07 2e       	mov	r0, r23
    3862:	16 f4       	brtc	.+4      	; 0x3868 <__divmodhi4+0xa>
    3864:	00 94       	com	r0
    3866:	07 d0       	rcall	.+14     	; 0x3876 <__divmodhi4_neg1>
    3868:	77 fd       	sbrc	r23, 7
    386a:	09 d0       	rcall	.+18     	; 0x387e <__divmodhi4_neg2>
    386c:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <__udivmodhi4>
    3870:	07 fc       	sbrc	r0, 7
    3872:	05 d0       	rcall	.+10     	; 0x387e <__divmodhi4_neg2>
    3874:	3e f4       	brtc	.+14     	; 0x3884 <__divmodhi4_exit>

00003876 <__divmodhi4_neg1>:
    3876:	90 95       	com	r25
    3878:	81 95       	neg	r24
    387a:	9f 4f       	sbci	r25, 0xFF	; 255
    387c:	08 95       	ret

0000387e <__divmodhi4_neg2>:
    387e:	70 95       	com	r23
    3880:	61 95       	neg	r22
    3882:	7f 4f       	sbci	r23, 0xFF	; 255

00003884 <__divmodhi4_exit>:
    3884:	08 95       	ret

00003886 <__udivmodsi4>:
    3886:	a1 e2       	ldi	r26, 0x21	; 33
    3888:	1a 2e       	mov	r1, r26
    388a:	aa 1b       	sub	r26, r26
    388c:	bb 1b       	sub	r27, r27
    388e:	fd 01       	movw	r30, r26
    3890:	0d c0       	rjmp	.+26     	; 0x38ac <__udivmodsi4_ep>

00003892 <__udivmodsi4_loop>:
    3892:	aa 1f       	adc	r26, r26
    3894:	bb 1f       	adc	r27, r27
    3896:	ee 1f       	adc	r30, r30
    3898:	ff 1f       	adc	r31, r31
    389a:	a2 17       	cp	r26, r18
    389c:	b3 07       	cpc	r27, r19
    389e:	e4 07       	cpc	r30, r20
    38a0:	f5 07       	cpc	r31, r21
    38a2:	20 f0       	brcs	.+8      	; 0x38ac <__udivmodsi4_ep>
    38a4:	a2 1b       	sub	r26, r18
    38a6:	b3 0b       	sbc	r27, r19
    38a8:	e4 0b       	sbc	r30, r20
    38aa:	f5 0b       	sbc	r31, r21

000038ac <__udivmodsi4_ep>:
    38ac:	66 1f       	adc	r22, r22
    38ae:	77 1f       	adc	r23, r23
    38b0:	88 1f       	adc	r24, r24
    38b2:	99 1f       	adc	r25, r25
    38b4:	1a 94       	dec	r1
    38b6:	69 f7       	brne	.-38     	; 0x3892 <__udivmodsi4_loop>
    38b8:	60 95       	com	r22
    38ba:	70 95       	com	r23
    38bc:	80 95       	com	r24
    38be:	90 95       	com	r25
    38c0:	9b 01       	movw	r18, r22
    38c2:	ac 01       	movw	r20, r24
    38c4:	bd 01       	movw	r22, r26
    38c6:	cf 01       	movw	r24, r30
    38c8:	08 95       	ret

000038ca <__tablejump2__>:
    38ca:	ee 0f       	add	r30, r30
    38cc:	ff 1f       	adc	r31, r31
    38ce:	05 90       	lpm	r0, Z+
    38d0:	f4 91       	lpm	r31, Z
    38d2:	e0 2d       	mov	r30, r0
    38d4:	09 94       	ijmp

000038d6 <__udivmodhi4>:
    38d6:	aa 1b       	sub	r26, r26
    38d8:	bb 1b       	sub	r27, r27
    38da:	51 e1       	ldi	r21, 0x11	; 17
    38dc:	07 c0       	rjmp	.+14     	; 0x38ec <__udivmodhi4_ep>

000038de <__udivmodhi4_loop>:
    38de:	aa 1f       	adc	r26, r26
    38e0:	bb 1f       	adc	r27, r27
    38e2:	a6 17       	cp	r26, r22
    38e4:	b7 07       	cpc	r27, r23
    38e6:	10 f0       	brcs	.+4      	; 0x38ec <__udivmodhi4_ep>
    38e8:	a6 1b       	sub	r26, r22
    38ea:	b7 0b       	sbc	r27, r23

000038ec <__udivmodhi4_ep>:
    38ec:	88 1f       	adc	r24, r24
    38ee:	99 1f       	adc	r25, r25
    38f0:	5a 95       	dec	r21
    38f2:	a9 f7       	brne	.-22     	; 0x38de <__udivmodhi4_loop>
    38f4:	80 95       	com	r24
    38f6:	90 95       	com	r25
    38f8:	bc 01       	movw	r22, r24
    38fa:	cd 01       	movw	r24, r26
    38fc:	08 95       	ret

000038fe <malloc>:
    38fe:	0f 93       	push	r16
    3900:	1f 93       	push	r17
    3902:	cf 93       	push	r28
    3904:	df 93       	push	r29
    3906:	82 30       	cpi	r24, 0x02	; 2
    3908:	91 05       	cpc	r25, r1
    390a:	10 f4       	brcc	.+4      	; 0x3910 <malloc+0x12>
    390c:	82 e0       	ldi	r24, 0x02	; 2
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	e0 91 d8 04 	lds	r30, 0x04D8	; 0x8004d8 <__flp>
    3914:	f0 91 d9 04 	lds	r31, 0x04D9	; 0x8004d9 <__flp+0x1>
    3918:	20 e0       	ldi	r18, 0x00	; 0
    391a:	30 e0       	ldi	r19, 0x00	; 0
    391c:	a0 e0       	ldi	r26, 0x00	; 0
    391e:	b0 e0       	ldi	r27, 0x00	; 0
    3920:	30 97       	sbiw	r30, 0x00	; 0
    3922:	19 f1       	breq	.+70     	; 0x396a <malloc+0x6c>
    3924:	40 81       	ld	r20, Z
    3926:	51 81       	ldd	r21, Z+1	; 0x01
    3928:	02 81       	ldd	r16, Z+2	; 0x02
    392a:	13 81       	ldd	r17, Z+3	; 0x03
    392c:	48 17       	cp	r20, r24
    392e:	59 07       	cpc	r21, r25
    3930:	c8 f0       	brcs	.+50     	; 0x3964 <malloc+0x66>
    3932:	84 17       	cp	r24, r20
    3934:	95 07       	cpc	r25, r21
    3936:	69 f4       	brne	.+26     	; 0x3952 <malloc+0x54>
    3938:	10 97       	sbiw	r26, 0x00	; 0
    393a:	31 f0       	breq	.+12     	; 0x3948 <malloc+0x4a>
    393c:	12 96       	adiw	r26, 0x02	; 2
    393e:	0c 93       	st	X, r16
    3940:	12 97       	sbiw	r26, 0x02	; 2
    3942:	13 96       	adiw	r26, 0x03	; 3
    3944:	1c 93       	st	X, r17
    3946:	27 c0       	rjmp	.+78     	; 0x3996 <malloc+0x98>
    3948:	00 93 d8 04 	sts	0x04D8, r16	; 0x8004d8 <__flp>
    394c:	10 93 d9 04 	sts	0x04D9, r17	; 0x8004d9 <__flp+0x1>
    3950:	22 c0       	rjmp	.+68     	; 0x3996 <malloc+0x98>
    3952:	21 15       	cp	r18, r1
    3954:	31 05       	cpc	r19, r1
    3956:	19 f0       	breq	.+6      	; 0x395e <malloc+0x60>
    3958:	42 17       	cp	r20, r18
    395a:	53 07       	cpc	r21, r19
    395c:	18 f4       	brcc	.+6      	; 0x3964 <malloc+0x66>
    395e:	9a 01       	movw	r18, r20
    3960:	bd 01       	movw	r22, r26
    3962:	ef 01       	movw	r28, r30
    3964:	df 01       	movw	r26, r30
    3966:	f8 01       	movw	r30, r16
    3968:	db cf       	rjmp	.-74     	; 0x3920 <malloc+0x22>
    396a:	21 15       	cp	r18, r1
    396c:	31 05       	cpc	r19, r1
    396e:	f9 f0       	breq	.+62     	; 0x39ae <malloc+0xb0>
    3970:	28 1b       	sub	r18, r24
    3972:	39 0b       	sbc	r19, r25
    3974:	24 30       	cpi	r18, 0x04	; 4
    3976:	31 05       	cpc	r19, r1
    3978:	80 f4       	brcc	.+32     	; 0x399a <malloc+0x9c>
    397a:	8a 81       	ldd	r24, Y+2	; 0x02
    397c:	9b 81       	ldd	r25, Y+3	; 0x03
    397e:	61 15       	cp	r22, r1
    3980:	71 05       	cpc	r23, r1
    3982:	21 f0       	breq	.+8      	; 0x398c <malloc+0x8e>
    3984:	fb 01       	movw	r30, r22
    3986:	93 83       	std	Z+3, r25	; 0x03
    3988:	82 83       	std	Z+2, r24	; 0x02
    398a:	04 c0       	rjmp	.+8      	; 0x3994 <malloc+0x96>
    398c:	90 93 d9 04 	sts	0x04D9, r25	; 0x8004d9 <__flp+0x1>
    3990:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <__flp>
    3994:	fe 01       	movw	r30, r28
    3996:	32 96       	adiw	r30, 0x02	; 2
    3998:	44 c0       	rjmp	.+136    	; 0x3a22 <malloc+0x124>
    399a:	fe 01       	movw	r30, r28
    399c:	e2 0f       	add	r30, r18
    399e:	f3 1f       	adc	r31, r19
    39a0:	81 93       	st	Z+, r24
    39a2:	91 93       	st	Z+, r25
    39a4:	22 50       	subi	r18, 0x02	; 2
    39a6:	31 09       	sbc	r19, r1
    39a8:	39 83       	std	Y+1, r19	; 0x01
    39aa:	28 83       	st	Y, r18
    39ac:	3a c0       	rjmp	.+116    	; 0x3a22 <malloc+0x124>
    39ae:	20 91 d6 04 	lds	r18, 0x04D6	; 0x8004d6 <__brkval>
    39b2:	30 91 d7 04 	lds	r19, 0x04D7	; 0x8004d7 <__brkval+0x1>
    39b6:	23 2b       	or	r18, r19
    39b8:	41 f4       	brne	.+16     	; 0x39ca <malloc+0xcc>
    39ba:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    39be:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    39c2:	30 93 d7 04 	sts	0x04D7, r19	; 0x8004d7 <__brkval+0x1>
    39c6:	20 93 d6 04 	sts	0x04D6, r18	; 0x8004d6 <__brkval>
    39ca:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    39ce:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    39d2:	21 15       	cp	r18, r1
    39d4:	31 05       	cpc	r19, r1
    39d6:	41 f4       	brne	.+16     	; 0x39e8 <malloc+0xea>
    39d8:	2d b7       	in	r18, 0x3d	; 61
    39da:	3e b7       	in	r19, 0x3e	; 62
    39dc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    39e0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    39e4:	24 1b       	sub	r18, r20
    39e6:	35 0b       	sbc	r19, r21
    39e8:	e0 91 d6 04 	lds	r30, 0x04D6	; 0x8004d6 <__brkval>
    39ec:	f0 91 d7 04 	lds	r31, 0x04D7	; 0x8004d7 <__brkval+0x1>
    39f0:	e2 17       	cp	r30, r18
    39f2:	f3 07       	cpc	r31, r19
    39f4:	a0 f4       	brcc	.+40     	; 0x3a1e <malloc+0x120>
    39f6:	2e 1b       	sub	r18, r30
    39f8:	3f 0b       	sbc	r19, r31
    39fa:	28 17       	cp	r18, r24
    39fc:	39 07       	cpc	r19, r25
    39fe:	78 f0       	brcs	.+30     	; 0x3a1e <malloc+0x120>
    3a00:	ac 01       	movw	r20, r24
    3a02:	4e 5f       	subi	r20, 0xFE	; 254
    3a04:	5f 4f       	sbci	r21, 0xFF	; 255
    3a06:	24 17       	cp	r18, r20
    3a08:	35 07       	cpc	r19, r21
    3a0a:	48 f0       	brcs	.+18     	; 0x3a1e <malloc+0x120>
    3a0c:	4e 0f       	add	r20, r30
    3a0e:	5f 1f       	adc	r21, r31
    3a10:	50 93 d7 04 	sts	0x04D7, r21	; 0x8004d7 <__brkval+0x1>
    3a14:	40 93 d6 04 	sts	0x04D6, r20	; 0x8004d6 <__brkval>
    3a18:	81 93       	st	Z+, r24
    3a1a:	91 93       	st	Z+, r25
    3a1c:	02 c0       	rjmp	.+4      	; 0x3a22 <malloc+0x124>
    3a1e:	e0 e0       	ldi	r30, 0x00	; 0
    3a20:	f0 e0       	ldi	r31, 0x00	; 0
    3a22:	cf 01       	movw	r24, r30
    3a24:	df 91       	pop	r29
    3a26:	cf 91       	pop	r28
    3a28:	1f 91       	pop	r17
    3a2a:	0f 91       	pop	r16
    3a2c:	08 95       	ret

00003a2e <free>:
    3a2e:	cf 93       	push	r28
    3a30:	df 93       	push	r29
    3a32:	00 97       	sbiw	r24, 0x00	; 0
    3a34:	09 f4       	brne	.+2      	; 0x3a38 <free+0xa>
    3a36:	81 c0       	rjmp	.+258    	; 0x3b3a <free+0x10c>
    3a38:	fc 01       	movw	r30, r24
    3a3a:	32 97       	sbiw	r30, 0x02	; 2
    3a3c:	13 82       	std	Z+3, r1	; 0x03
    3a3e:	12 82       	std	Z+2, r1	; 0x02
    3a40:	a0 91 d8 04 	lds	r26, 0x04D8	; 0x8004d8 <__flp>
    3a44:	b0 91 d9 04 	lds	r27, 0x04D9	; 0x8004d9 <__flp+0x1>
    3a48:	10 97       	sbiw	r26, 0x00	; 0
    3a4a:	81 f4       	brne	.+32     	; 0x3a6c <free+0x3e>
    3a4c:	20 81       	ld	r18, Z
    3a4e:	31 81       	ldd	r19, Z+1	; 0x01
    3a50:	82 0f       	add	r24, r18
    3a52:	93 1f       	adc	r25, r19
    3a54:	20 91 d6 04 	lds	r18, 0x04D6	; 0x8004d6 <__brkval>
    3a58:	30 91 d7 04 	lds	r19, 0x04D7	; 0x8004d7 <__brkval+0x1>
    3a5c:	28 17       	cp	r18, r24
    3a5e:	39 07       	cpc	r19, r25
    3a60:	51 f5       	brne	.+84     	; 0x3ab6 <free+0x88>
    3a62:	f0 93 d7 04 	sts	0x04D7, r31	; 0x8004d7 <__brkval+0x1>
    3a66:	e0 93 d6 04 	sts	0x04D6, r30	; 0x8004d6 <__brkval>
    3a6a:	67 c0       	rjmp	.+206    	; 0x3b3a <free+0x10c>
    3a6c:	ed 01       	movw	r28, r26
    3a6e:	20 e0       	ldi	r18, 0x00	; 0
    3a70:	30 e0       	ldi	r19, 0x00	; 0
    3a72:	ce 17       	cp	r28, r30
    3a74:	df 07       	cpc	r29, r31
    3a76:	40 f4       	brcc	.+16     	; 0x3a88 <free+0x5a>
    3a78:	4a 81       	ldd	r20, Y+2	; 0x02
    3a7a:	5b 81       	ldd	r21, Y+3	; 0x03
    3a7c:	9e 01       	movw	r18, r28
    3a7e:	41 15       	cp	r20, r1
    3a80:	51 05       	cpc	r21, r1
    3a82:	f1 f0       	breq	.+60     	; 0x3ac0 <free+0x92>
    3a84:	ea 01       	movw	r28, r20
    3a86:	f5 cf       	rjmp	.-22     	; 0x3a72 <free+0x44>
    3a88:	d3 83       	std	Z+3, r29	; 0x03
    3a8a:	c2 83       	std	Z+2, r28	; 0x02
    3a8c:	40 81       	ld	r20, Z
    3a8e:	51 81       	ldd	r21, Z+1	; 0x01
    3a90:	84 0f       	add	r24, r20
    3a92:	95 1f       	adc	r25, r21
    3a94:	c8 17       	cp	r28, r24
    3a96:	d9 07       	cpc	r29, r25
    3a98:	59 f4       	brne	.+22     	; 0x3ab0 <free+0x82>
    3a9a:	88 81       	ld	r24, Y
    3a9c:	99 81       	ldd	r25, Y+1	; 0x01
    3a9e:	84 0f       	add	r24, r20
    3aa0:	95 1f       	adc	r25, r21
    3aa2:	02 96       	adiw	r24, 0x02	; 2
    3aa4:	91 83       	std	Z+1, r25	; 0x01
    3aa6:	80 83       	st	Z, r24
    3aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    3aaa:	9b 81       	ldd	r25, Y+3	; 0x03
    3aac:	93 83       	std	Z+3, r25	; 0x03
    3aae:	82 83       	std	Z+2, r24	; 0x02
    3ab0:	21 15       	cp	r18, r1
    3ab2:	31 05       	cpc	r19, r1
    3ab4:	29 f4       	brne	.+10     	; 0x3ac0 <free+0x92>
    3ab6:	f0 93 d9 04 	sts	0x04D9, r31	; 0x8004d9 <__flp+0x1>
    3aba:	e0 93 d8 04 	sts	0x04D8, r30	; 0x8004d8 <__flp>
    3abe:	3d c0       	rjmp	.+122    	; 0x3b3a <free+0x10c>
    3ac0:	e9 01       	movw	r28, r18
    3ac2:	fb 83       	std	Y+3, r31	; 0x03
    3ac4:	ea 83       	std	Y+2, r30	; 0x02
    3ac6:	49 91       	ld	r20, Y+
    3ac8:	59 91       	ld	r21, Y+
    3aca:	c4 0f       	add	r28, r20
    3acc:	d5 1f       	adc	r29, r21
    3ace:	ec 17       	cp	r30, r28
    3ad0:	fd 07       	cpc	r31, r29
    3ad2:	61 f4       	brne	.+24     	; 0x3aec <free+0xbe>
    3ad4:	80 81       	ld	r24, Z
    3ad6:	91 81       	ldd	r25, Z+1	; 0x01
    3ad8:	84 0f       	add	r24, r20
    3ada:	95 1f       	adc	r25, r21
    3adc:	02 96       	adiw	r24, 0x02	; 2
    3ade:	e9 01       	movw	r28, r18
    3ae0:	99 83       	std	Y+1, r25	; 0x01
    3ae2:	88 83       	st	Y, r24
    3ae4:	82 81       	ldd	r24, Z+2	; 0x02
    3ae6:	93 81       	ldd	r25, Z+3	; 0x03
    3ae8:	9b 83       	std	Y+3, r25	; 0x03
    3aea:	8a 83       	std	Y+2, r24	; 0x02
    3aec:	e0 e0       	ldi	r30, 0x00	; 0
    3aee:	f0 e0       	ldi	r31, 0x00	; 0
    3af0:	12 96       	adiw	r26, 0x02	; 2
    3af2:	8d 91       	ld	r24, X+
    3af4:	9c 91       	ld	r25, X
    3af6:	13 97       	sbiw	r26, 0x03	; 3
    3af8:	00 97       	sbiw	r24, 0x00	; 0
    3afa:	19 f0       	breq	.+6      	; 0x3b02 <free+0xd4>
    3afc:	fd 01       	movw	r30, r26
    3afe:	dc 01       	movw	r26, r24
    3b00:	f7 cf       	rjmp	.-18     	; 0x3af0 <free+0xc2>
    3b02:	8d 91       	ld	r24, X+
    3b04:	9c 91       	ld	r25, X
    3b06:	11 97       	sbiw	r26, 0x01	; 1
    3b08:	9d 01       	movw	r18, r26
    3b0a:	2e 5f       	subi	r18, 0xFE	; 254
    3b0c:	3f 4f       	sbci	r19, 0xFF	; 255
    3b0e:	82 0f       	add	r24, r18
    3b10:	93 1f       	adc	r25, r19
    3b12:	20 91 d6 04 	lds	r18, 0x04D6	; 0x8004d6 <__brkval>
    3b16:	30 91 d7 04 	lds	r19, 0x04D7	; 0x8004d7 <__brkval+0x1>
    3b1a:	28 17       	cp	r18, r24
    3b1c:	39 07       	cpc	r19, r25
    3b1e:	69 f4       	brne	.+26     	; 0x3b3a <free+0x10c>
    3b20:	30 97       	sbiw	r30, 0x00	; 0
    3b22:	29 f4       	brne	.+10     	; 0x3b2e <free+0x100>
    3b24:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <__flp+0x1>
    3b28:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <__flp>
    3b2c:	02 c0       	rjmp	.+4      	; 0x3b32 <free+0x104>
    3b2e:	13 82       	std	Z+3, r1	; 0x03
    3b30:	12 82       	std	Z+2, r1	; 0x02
    3b32:	b0 93 d7 04 	sts	0x04D7, r27	; 0x8004d7 <__brkval+0x1>
    3b36:	a0 93 d6 04 	sts	0x04D6, r26	; 0x8004d6 <__brkval>
    3b3a:	df 91       	pop	r29
    3b3c:	cf 91       	pop	r28
    3b3e:	08 95       	ret

00003b40 <realloc>:
    3b40:	a0 e0       	ldi	r26, 0x00	; 0
    3b42:	b0 e0       	ldi	r27, 0x00	; 0
    3b44:	e6 ea       	ldi	r30, 0xA6	; 166
    3b46:	fd e1       	ldi	r31, 0x1D	; 29
    3b48:	0c 94 86 1e 	jmp	0x3d0c	; 0x3d0c <__prologue_saves__+0x8>
    3b4c:	ec 01       	movw	r28, r24
    3b4e:	00 97       	sbiw	r24, 0x00	; 0
    3b50:	21 f4       	brne	.+8      	; 0x3b5a <realloc+0x1a>
    3b52:	cb 01       	movw	r24, r22
    3b54:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <malloc>
    3b58:	b4 c0       	rjmp	.+360    	; 0x3cc2 <realloc+0x182>
    3b5a:	fc 01       	movw	r30, r24
    3b5c:	e6 0f       	add	r30, r22
    3b5e:	f7 1f       	adc	r31, r23
    3b60:	9c 01       	movw	r18, r24
    3b62:	22 50       	subi	r18, 0x02	; 2
    3b64:	31 09       	sbc	r19, r1
    3b66:	e2 17       	cp	r30, r18
    3b68:	f3 07       	cpc	r31, r19
    3b6a:	08 f4       	brcc	.+2      	; 0x3b6e <realloc+0x2e>
    3b6c:	a8 c0       	rjmp	.+336    	; 0x3cbe <realloc+0x17e>
    3b6e:	d9 01       	movw	r26, r18
    3b70:	0d 91       	ld	r16, X+
    3b72:	1c 91       	ld	r17, X
    3b74:	11 97       	sbiw	r26, 0x01	; 1
    3b76:	06 17       	cp	r16, r22
    3b78:	17 07       	cpc	r17, r23
    3b7a:	b0 f0       	brcs	.+44     	; 0x3ba8 <realloc+0x68>
    3b7c:	05 30       	cpi	r16, 0x05	; 5
    3b7e:	11 05       	cpc	r17, r1
    3b80:	08 f4       	brcc	.+2      	; 0x3b84 <realloc+0x44>
    3b82:	9b c0       	rjmp	.+310    	; 0x3cba <realloc+0x17a>
    3b84:	c8 01       	movw	r24, r16
    3b86:	04 97       	sbiw	r24, 0x04	; 4
    3b88:	86 17       	cp	r24, r22
    3b8a:	97 07       	cpc	r25, r23
    3b8c:	08 f4       	brcc	.+2      	; 0x3b90 <realloc+0x50>
    3b8e:	95 c0       	rjmp	.+298    	; 0x3cba <realloc+0x17a>
    3b90:	02 50       	subi	r16, 0x02	; 2
    3b92:	11 09       	sbc	r17, r1
    3b94:	06 1b       	sub	r16, r22
    3b96:	17 0b       	sbc	r17, r23
    3b98:	01 93       	st	Z+, r16
    3b9a:	11 93       	st	Z+, r17
    3b9c:	6d 93       	st	X+, r22
    3b9e:	7c 93       	st	X, r23
    3ba0:	cf 01       	movw	r24, r30
    3ba2:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <free>
    3ba6:	89 c0       	rjmp	.+274    	; 0x3cba <realloc+0x17a>
    3ba8:	5b 01       	movw	r10, r22
    3baa:	a0 1a       	sub	r10, r16
    3bac:	b1 0a       	sbc	r11, r17
    3bae:	4c 01       	movw	r8, r24
    3bb0:	80 0e       	add	r8, r16
    3bb2:	91 1e       	adc	r9, r17
    3bb4:	a0 91 d8 04 	lds	r26, 0x04D8	; 0x8004d8 <__flp>
    3bb8:	b0 91 d9 04 	lds	r27, 0x04D9	; 0x8004d9 <__flp+0x1>
    3bbc:	61 2c       	mov	r6, r1
    3bbe:	71 2c       	mov	r7, r1
    3bc0:	e1 2c       	mov	r14, r1
    3bc2:	f1 2c       	mov	r15, r1
    3bc4:	10 97       	sbiw	r26, 0x00	; 0
    3bc6:	09 f4       	brne	.+2      	; 0x3bca <realloc+0x8a>
    3bc8:	46 c0       	rjmp	.+140    	; 0x3c56 <realloc+0x116>
    3bca:	8d 91       	ld	r24, X+
    3bcc:	9c 91       	ld	r25, X
    3bce:	11 97       	sbiw	r26, 0x01	; 1
    3bd0:	a8 15       	cp	r26, r8
    3bd2:	b9 05       	cpc	r27, r9
    3bd4:	b1 f5       	brne	.+108    	; 0x3c42 <realloc+0x102>
    3bd6:	6c 01       	movw	r12, r24
    3bd8:	42 e0       	ldi	r20, 0x02	; 2
    3bda:	c4 0e       	add	r12, r20
    3bdc:	d1 1c       	adc	r13, r1
    3bde:	ca 14       	cp	r12, r10
    3be0:	db 04       	cpc	r13, r11
    3be2:	78 f1       	brcs	.+94     	; 0x3c42 <realloc+0x102>
    3be4:	4c 01       	movw	r8, r24
    3be6:	8a 18       	sub	r8, r10
    3be8:	9b 08       	sbc	r9, r11
    3bea:	64 01       	movw	r12, r8
    3bec:	42 e0       	ldi	r20, 0x02	; 2
    3bee:	c4 0e       	add	r12, r20
    3bf0:	d1 1c       	adc	r13, r1
    3bf2:	12 96       	adiw	r26, 0x02	; 2
    3bf4:	bc 90       	ld	r11, X
    3bf6:	12 97       	sbiw	r26, 0x02	; 2
    3bf8:	13 96       	adiw	r26, 0x03	; 3
    3bfa:	ac 91       	ld	r26, X
    3bfc:	b5 e0       	ldi	r27, 0x05	; 5
    3bfe:	cb 16       	cp	r12, r27
    3c00:	d1 04       	cpc	r13, r1
    3c02:	40 f0       	brcs	.+16     	; 0x3c14 <realloc+0xd4>
    3c04:	b2 82       	std	Z+2, r11	; 0x02
    3c06:	a3 83       	std	Z+3, r26	; 0x03
    3c08:	91 82       	std	Z+1, r9	; 0x01
    3c0a:	80 82       	st	Z, r8
    3c0c:	d9 01       	movw	r26, r18
    3c0e:	6d 93       	st	X+, r22
    3c10:	7c 93       	st	X, r23
    3c12:	09 c0       	rjmp	.+18     	; 0x3c26 <realloc+0xe6>
    3c14:	0e 5f       	subi	r16, 0xFE	; 254
    3c16:	1f 4f       	sbci	r17, 0xFF	; 255
    3c18:	80 0f       	add	r24, r16
    3c1a:	91 1f       	adc	r25, r17
    3c1c:	f9 01       	movw	r30, r18
    3c1e:	91 83       	std	Z+1, r25	; 0x01
    3c20:	80 83       	st	Z, r24
    3c22:	eb 2d       	mov	r30, r11
    3c24:	fa 2f       	mov	r31, r26
    3c26:	e1 14       	cp	r14, r1
    3c28:	f1 04       	cpc	r15, r1
    3c2a:	31 f0       	breq	.+12     	; 0x3c38 <realloc+0xf8>
    3c2c:	d7 01       	movw	r26, r14
    3c2e:	13 96       	adiw	r26, 0x03	; 3
    3c30:	fc 93       	st	X, r31
    3c32:	ee 93       	st	-X, r30
    3c34:	12 97       	sbiw	r26, 0x02	; 2
    3c36:	41 c0       	rjmp	.+130    	; 0x3cba <realloc+0x17a>
    3c38:	f0 93 d9 04 	sts	0x04D9, r31	; 0x8004d9 <__flp+0x1>
    3c3c:	e0 93 d8 04 	sts	0x04D8, r30	; 0x8004d8 <__flp>
    3c40:	3c c0       	rjmp	.+120    	; 0x3cba <realloc+0x17a>
    3c42:	68 16       	cp	r6, r24
    3c44:	79 06       	cpc	r7, r25
    3c46:	08 f4       	brcc	.+2      	; 0x3c4a <realloc+0x10a>
    3c48:	3c 01       	movw	r6, r24
    3c4a:	7d 01       	movw	r14, r26
    3c4c:	12 96       	adiw	r26, 0x02	; 2
    3c4e:	0d 90       	ld	r0, X+
    3c50:	bc 91       	ld	r27, X
    3c52:	a0 2d       	mov	r26, r0
    3c54:	b7 cf       	rjmp	.-146    	; 0x3bc4 <realloc+0x84>
    3c56:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <__brkval>
    3c5a:	90 91 d7 04 	lds	r25, 0x04D7	; 0x8004d7 <__brkval+0x1>
    3c5e:	88 16       	cp	r8, r24
    3c60:	99 06       	cpc	r9, r25
    3c62:	e1 f4       	brne	.+56     	; 0x3c9c <realloc+0x15c>
    3c64:	66 16       	cp	r6, r22
    3c66:	77 06       	cpc	r7, r23
    3c68:	c8 f4       	brcc	.+50     	; 0x3c9c <realloc+0x15c>
    3c6a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3c6e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    3c72:	00 97       	sbiw	r24, 0x00	; 0
    3c74:	41 f4       	brne	.+16     	; 0x3c86 <realloc+0x146>
    3c76:	8d b7       	in	r24, 0x3d	; 61
    3c78:	9e b7       	in	r25, 0x3e	; 62
    3c7a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3c7e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3c82:	84 1b       	sub	r24, r20
    3c84:	95 0b       	sbc	r25, r21
    3c86:	e8 17       	cp	r30, r24
    3c88:	f9 07       	cpc	r31, r25
    3c8a:	c8 f4       	brcc	.+50     	; 0x3cbe <realloc+0x17e>
    3c8c:	f0 93 d7 04 	sts	0x04D7, r31	; 0x8004d7 <__brkval+0x1>
    3c90:	e0 93 d6 04 	sts	0x04D6, r30	; 0x8004d6 <__brkval>
    3c94:	f9 01       	movw	r30, r18
    3c96:	71 83       	std	Z+1, r23	; 0x01
    3c98:	60 83       	st	Z, r22
    3c9a:	0f c0       	rjmp	.+30     	; 0x3cba <realloc+0x17a>
    3c9c:	cb 01       	movw	r24, r22
    3c9e:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <malloc>
    3ca2:	7c 01       	movw	r14, r24
    3ca4:	00 97       	sbiw	r24, 0x00	; 0
    3ca6:	59 f0       	breq	.+22     	; 0x3cbe <realloc+0x17e>
    3ca8:	a8 01       	movw	r20, r16
    3caa:	be 01       	movw	r22, r28
    3cac:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <memcpy>
    3cb0:	ce 01       	movw	r24, r28
    3cb2:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <free>
    3cb6:	c7 01       	movw	r24, r14
    3cb8:	04 c0       	rjmp	.+8      	; 0x3cc2 <realloc+0x182>
    3cba:	ce 01       	movw	r24, r28
    3cbc:	02 c0       	rjmp	.+4      	; 0x3cc2 <realloc+0x182>
    3cbe:	80 e0       	ldi	r24, 0x00	; 0
    3cc0:	90 e0       	ldi	r25, 0x00	; 0
    3cc2:	cd b7       	in	r28, 0x3d	; 61
    3cc4:	de b7       	in	r29, 0x3e	; 62
    3cc6:	ee e0       	ldi	r30, 0x0E	; 14
    3cc8:	0c 94 a2 1e 	jmp	0x3d44	; 0x3d44 <__epilogue_restores__+0x8>

00003ccc <abort>:
    3ccc:	81 e0       	ldi	r24, 0x01	; 1
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	f8 94       	cli
    3cd2:	0c 94 b9 1e 	jmp	0x3d72	; 0x3d72 <__do_global_dtors>

00003cd6 <strcpy_P>:
    3cd6:	fb 01       	movw	r30, r22
    3cd8:	dc 01       	movw	r26, r24
    3cda:	05 90       	lpm	r0, Z+
    3cdc:	0d 92       	st	X+, r0
    3cde:	00 20       	and	r0, r0
    3ce0:	e1 f7       	brne	.-8      	; 0x3cda <strcpy_P+0x4>
    3ce2:	08 95       	ret

00003ce4 <memcpy>:
    3ce4:	fb 01       	movw	r30, r22
    3ce6:	dc 01       	movw	r26, r24
    3ce8:	02 c0       	rjmp	.+4      	; 0x3cee <memcpy+0xa>
    3cea:	01 90       	ld	r0, Z+
    3cec:	0d 92       	st	X+, r0
    3cee:	41 50       	subi	r20, 0x01	; 1
    3cf0:	50 40       	sbci	r21, 0x00	; 0
    3cf2:	d8 f7       	brcc	.-10     	; 0x3cea <memcpy+0x6>
    3cf4:	08 95       	ret

00003cf6 <strcpy>:
    3cf6:	fb 01       	movw	r30, r22
    3cf8:	dc 01       	movw	r26, r24
    3cfa:	01 90       	ld	r0, Z+
    3cfc:	0d 92       	st	X+, r0
    3cfe:	00 20       	and	r0, r0
    3d00:	e1 f7       	brne	.-8      	; 0x3cfa <strcpy+0x4>
    3d02:	08 95       	ret

00003d04 <__prologue_saves__>:
    3d04:	2f 92       	push	r2
    3d06:	3f 92       	push	r3
    3d08:	4f 92       	push	r4
    3d0a:	5f 92       	push	r5
    3d0c:	6f 92       	push	r6
    3d0e:	7f 92       	push	r7
    3d10:	8f 92       	push	r8
    3d12:	9f 92       	push	r9
    3d14:	af 92       	push	r10
    3d16:	bf 92       	push	r11
    3d18:	cf 92       	push	r12
    3d1a:	df 92       	push	r13
    3d1c:	ef 92       	push	r14
    3d1e:	ff 92       	push	r15
    3d20:	0f 93       	push	r16
    3d22:	1f 93       	push	r17
    3d24:	cf 93       	push	r28
    3d26:	df 93       	push	r29
    3d28:	cd b7       	in	r28, 0x3d	; 61
    3d2a:	de b7       	in	r29, 0x3e	; 62
    3d2c:	ca 1b       	sub	r28, r26
    3d2e:	db 0b       	sbc	r29, r27
    3d30:	0f b6       	in	r0, 0x3f	; 63
    3d32:	f8 94       	cli
    3d34:	de bf       	out	0x3e, r29	; 62
    3d36:	0f be       	out	0x3f, r0	; 63
    3d38:	cd bf       	out	0x3d, r28	; 61
    3d3a:	09 94       	ijmp

00003d3c <__epilogue_restores__>:
    3d3c:	2a 88       	ldd	r2, Y+18	; 0x12
    3d3e:	39 88       	ldd	r3, Y+17	; 0x11
    3d40:	48 88       	ldd	r4, Y+16	; 0x10
    3d42:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d44:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d46:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d48:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d4a:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d4c:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d4e:	b9 84       	ldd	r11, Y+9	; 0x09
    3d50:	c8 84       	ldd	r12, Y+8	; 0x08
    3d52:	df 80       	ldd	r13, Y+7	; 0x07
    3d54:	ee 80       	ldd	r14, Y+6	; 0x06
    3d56:	fd 80       	ldd	r15, Y+5	; 0x05
    3d58:	0c 81       	ldd	r16, Y+4	; 0x04
    3d5a:	1b 81       	ldd	r17, Y+3	; 0x03
    3d5c:	aa 81       	ldd	r26, Y+2	; 0x02
    3d5e:	b9 81       	ldd	r27, Y+1	; 0x01
    3d60:	ce 0f       	add	r28, r30
    3d62:	d1 1d       	adc	r29, r1
    3d64:	0f b6       	in	r0, 0x3f	; 63
    3d66:	f8 94       	cli
    3d68:	de bf       	out	0x3e, r29	; 62
    3d6a:	0f be       	out	0x3f, r0	; 63
    3d6c:	cd bf       	out	0x3d, r28	; 61
    3d6e:	ed 01       	movw	r28, r26
    3d70:	08 95       	ret

00003d72 <__do_global_dtors>:
    3d72:	10 e0       	ldi	r17, 0x00	; 0
    3d74:	cd ee       	ldi	r28, 0xED	; 237
    3d76:	d0 e0       	ldi	r29, 0x00	; 0
    3d78:	04 c0       	rjmp	.+8      	; 0x3d82 <__do_global_dtors+0x10>
    3d7a:	fe 01       	movw	r30, r28
    3d7c:	0e 94 65 1c 	call	0x38ca	; 0x38ca <__tablejump2__>
    3d80:	21 96       	adiw	r28, 0x01	; 1
    3d82:	ce 3e       	cpi	r28, 0xEE	; 238
    3d84:	d1 07       	cpc	r29, r17
    3d86:	c9 f7       	brne	.-14     	; 0x3d7a <__do_global_dtors+0x8>
    3d88:	f8 94       	cli

00003d8a <__stop_program>:
    3d8a:	ff cf       	rjmp	.-2      	; 0x3d8a <__stop_program>
