
Projektarbeit_COC_BRA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000188  00800100  000040cc  00004160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000040cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000269  00800288  00800288  000042e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000042e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b20  00000000  00000000  00004358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000181fb  00000000  00000000  00004e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000040e5  00000000  00000000  0001d073  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000624e  00000000  00000000  00021158  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002334  00000000  00000000  000273a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004e1a  00000000  00000000  000296dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c711  00000000  00000000  0002e4f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000be0  00000000  00000000  0003ac07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__dtors_end>
       4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      28:	0c 94 3f 18 	jmp	0x307e	; 0x307e <__vector_10>
      2c:	0c 94 db 16 	jmp	0x2db6	; 0x2db6 <__vector_11>
      30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      5c:	0c 94 d3 18 	jmp	0x31a6	; 0x31a6 <__vector_23>
      60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      90:	0c 94 7d 0e 	jmp	0x1cfa	; 0x1cfa <__vector_36>
      94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      ac:	34 1a       	sub	r3, r20
      ae:	37 1a       	sub	r3, r23
      b0:	26 1a       	sub	r2, r22
      b2:	2a 1a       	sub	r2, r26
      b4:	30 1a       	sub	r3, r16
      b6:	58 1a       	sub	r5, r24
      b8:	58 1a       	sub	r5, r24
      ba:	58 1a       	sub	r5, r24
      bc:	3b 1a       	sub	r3, r27
      be:	3f 1a       	sub	r3, r31
      c0:	43 1a       	sub	r4, r19
      c2:	49 1a       	sub	r4, r25
      c4:	4d 1a       	sub	r4, r29
      c6:	58 1a       	sub	r5, r24
      c8:	53 1a       	sub	r5, r19

000000ca <__trampolines_end>:
	...

000000cb <USB_DeviceDescriptorIAD>:
      cb:	12 01 00 02 ef 02 01 40 41 23 36 80 00 01 01 02     .......@A#6.....
      db:	03 01                                               ..

000000dd <STRING_MANUFACTURER>:
      dd:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

000000e9 <STRING_PRODUCT>:
      e9:	41 72 64 75 69 6e 6f 20 4c 65 6f 6e 61 72 64 6f     Arduino Leonardo
	...

000000fa <STRING_LANGUAGE>:
      fa:	04 03 09 04                                         ....

000000fe <analog_pin_to_channel_PGM>:
      fe:	07 06 05 04 01 00 08 0a 0b 0c 0d 09                 ............

0000010a <digital_pin_to_timer_PGM>:
     10a:	00 00 00 02 00 09 0f 00 00 03 04 01 00 0c 00 00     ................
	...

00000129 <digital_pin_to_bit_mask_PGM>:
     129:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     139:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

00000148 <digital_pin_to_port_PGM>:
     148:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     158:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

00000167 <port_to_input_PGM>:
     167:	00 00 00 00 23 00 26 00 29 00 2c 00 2f 00           ....#.&.).,./.

00000175 <port_to_output_PGM>:
     175:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

00000183 <port_to_mode_PGM>:
     183:	00 00 00 00 24 00 27 00 2a 00 2d 00 30 00           ....$.'.*.-.0.

00000191 <_cdcInterface>:
     191:	08 0b 00 02 02 02 01 00 09 04 00 00 01 02 02 00     ................
     1a1:	00 05 24 00 10 01 05 24 01 01 01 04 24 02 06 05     ..$....$....$...
     1b1:	24 06 00 01 07 05 81 03 10 00 40 09 04 01 00 02     $.........@.....
     1c1:	0a 00 00 00 07 05 02 02 40 00 00 07 05 83 02 40     ........@......@
     1d1:	00 00 00                                            ...

000001d4 <__ctors_start>:
     1d4:	6a 05       	cpc	r22, r10
     1d6:	11 11       	cpse	r17, r1
     1d8:	75 1c       	adc	r7, r5

000001da <__ctors_end>:
     1da:	7d 06       	cpc	r7, r29

000001dc <__dtors_end>:
     1dc:	11 24       	eor	r1, r1
     1de:	1f be       	out	0x3f, r1	; 63
     1e0:	cf ef       	ldi	r28, 0xFF	; 255
     1e2:	da e0       	ldi	r29, 0x0A	; 10
     1e4:	de bf       	out	0x3e, r29	; 62
     1e6:	cd bf       	out	0x3d, r28	; 61

000001e8 <__do_copy_data>:
     1e8:	12 e0       	ldi	r17, 0x02	; 2
     1ea:	a0 e0       	ldi	r26, 0x00	; 0
     1ec:	b1 e0       	ldi	r27, 0x01	; 1
     1ee:	ec ec       	ldi	r30, 0xCC	; 204
     1f0:	f0 e4       	ldi	r31, 0x40	; 64
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__do_copy_data+0x10>
     1f4:	05 90       	lpm	r0, Z+
     1f6:	0d 92       	st	X+, r0
     1f8:	a8 38       	cpi	r26, 0x88	; 136
     1fa:	b1 07       	cpc	r27, r17
     1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__do_copy_data+0xc>

000001fe <__do_clear_bss>:
     1fe:	24 e0       	ldi	r18, 0x04	; 4
     200:	a8 e8       	ldi	r26, 0x88	; 136
     202:	b2 e0       	ldi	r27, 0x02	; 2
     204:	01 c0       	rjmp	.+2      	; 0x208 <.do_clear_bss_start>

00000206 <.do_clear_bss_loop>:
     206:	1d 92       	st	X+, r1

00000208 <.do_clear_bss_start>:
     208:	a1 3f       	cpi	r26, 0xF1	; 241
     20a:	b2 07       	cpc	r27, r18
     20c:	e1 f7       	brne	.-8      	; 0x206 <.do_clear_bss_loop>

0000020e <__do_global_ctors>:
     20e:	10 e0       	ldi	r17, 0x00	; 0
     210:	cd ee       	ldi	r28, 0xED	; 237
     212:	d0 e0       	ldi	r29, 0x00	; 0
     214:	04 c0       	rjmp	.+8      	; 0x21e <__do_global_ctors+0x10>
     216:	21 97       	sbiw	r28, 0x01	; 1
     218:	fe 01       	movw	r30, r28
     21a:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <__tablejump2__>
     21e:	ca 3e       	cpi	r28, 0xEA	; 234
     220:	d1 07       	cpc	r29, r17
     222:	c9 f7       	brne	.-14     	; 0x216 <__do_global_ctors+0x8>
     224:	0e 94 a9 12 	call	0x2552	; 0x2552 <main>
     228:	0c 94 59 20 	jmp	0x40b2	; 0x40b2 <__do_global_dtors>

0000022c <__bad_interrupt>:
     22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <_Z6getkeyv>:
 */
int getkey(void)
{
	static int keys[NUMKEYS+1];
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <analogRead>

	if (val > 1020) { // no key pressed
     236:	8d 3f       	cpi	r24, 0xFD	; 253
     238:	23 e0       	ldi	r18, 0x03	; 3
     23a:	92 07       	cpc	r25, r18
     23c:	20 f1       	brcs	.+72     	; 0x286 <_Z6getkeyv+0x56>
		if (++keys[0] > NOPRESS) {
     23e:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <__data_end>
     242:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <__data_end+0x1>
     246:	01 96       	adiw	r24, 0x01	; 1
     248:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <__data_end+0x1>
     24c:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <__data_end>
     250:	03 97       	sbiw	r24, 0x03	; 3
     252:	0c f4       	brge	.+2      	; 0x256 <_Z6getkeyv+0x26>
     254:	6a c0       	rjmp	.+212    	; 0x32a <_Z6getkeyv+0xfa>
     256:	e8 e8       	ldi	r30, 0x88	; 136
     258:	f2 e0       	ldi	r31, 0x02	; 2
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	90 e0       	ldi	r25, 0x00	; 0
			for(uint8_t i = 0; i <= NUMKEYS; i++){
				if(keys[i] > KEYPRESS){
     262:	40 81       	ld	r20, Z
     264:	51 81       	ldd	r21, Z+1	; 0x01
     266:	44 30       	cpi	r20, 0x04	; 4
     268:	51 05       	cpc	r21, r1
     26a:	2c f0       	brlt	.+10     	; 0x276 <_Z6getkeyv+0x46>
     26c:	c9 01       	movw	r24, r18
					data = i;
					if(keys[i] > LONGPRESS) data += 5;
     26e:	49 3c       	cpi	r20, 0xC9	; 201
     270:	51 05       	cpc	r21, r1
     272:	0c f0       	brlt	.+2      	; 0x276 <_Z6getkeyv+0x46>
     274:	05 96       	adiw	r24, 0x05	; 5
				}
				keys[i] = 0;
     276:	11 92       	st	Z+, r1
     278:	11 92       	st	Z+, r1
     27a:	2f 5f       	subi	r18, 0xFF	; 255
     27c:	3f 4f       	sbci	r19, 0xFF	; 255
	int data = 0;
	uint16_t val = analogRead(ANALOG_CHANNEL);

	if (val > 1020) { // no key pressed
		if (++keys[0] > NOPRESS) {
			for(uint8_t i = 0; i <= NUMKEYS; i++){
     27e:	26 30       	cpi	r18, 0x06	; 6
     280:	31 05       	cpc	r19, r1
     282:	79 f7       	brne	.-34     	; 0x262 <_Z6getkeyv+0x32>
     284:	08 95       	ret
			}
		}
		else data = 0;
	}
	else {
		if (val < S1_LIMIT && keys[1] < 32000) ++keys[1]; // key1 pressed
     286:	89 34       	cpi	r24, 0x49	; 73
     288:	91 05       	cpc	r25, r1
     28a:	70 f4       	brcc	.+28     	; 0x2a8 <_Z6getkeyv+0x78>
     28c:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <__data_end+0x2>
     290:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <__data_end+0x3>
     294:	81 15       	cp	r24, r1
     296:	2d e7       	ldi	r18, 0x7D	; 125
     298:	92 07       	cpc	r25, r18
     29a:	4c f4       	brge	.+18     	; 0x2ae <_Z6getkeyv+0x7e>
     29c:	01 96       	adiw	r24, 0x01	; 1
     29e:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <__data_end+0x3>
     2a2:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <__data_end+0x2>
     2a6:	41 c0       	rjmp	.+130    	; 0x32a <_Z6getkeyv+0xfa>
		else if (val < S2_LIMIT && keys[2] < 32000) ++keys[2]; //key2 pressed
     2a8:	8e 3e       	cpi	r24, 0xEE	; 238
     2aa:	91 05       	cpc	r25, r1
     2ac:	70 f4       	brcc	.+28     	; 0x2ca <_Z6getkeyv+0x9a>
     2ae:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <__data_end+0x4>
     2b2:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <__data_end+0x5>
     2b6:	81 15       	cp	r24, r1
     2b8:	2d e7       	ldi	r18, 0x7D	; 125
     2ba:	92 07       	cpc	r25, r18
     2bc:	54 f4       	brge	.+20     	; 0x2d2 <_Z6getkeyv+0xa2>
     2be:	01 96       	adiw	r24, 0x01	; 1
     2c0:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <__data_end+0x5>
     2c4:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <__data_end+0x4>
     2c8:	30 c0       	rjmp	.+96     	; 0x32a <_Z6getkeyv+0xfa>
		else if (val < S3_LIMIT && keys[3] < 32000) ++keys[3]; //key3 pressed
     2ca:	82 3a       	cpi	r24, 0xA2	; 162
     2cc:	21 e0       	ldi	r18, 0x01	; 1
     2ce:	92 07       	cpc	r25, r18
     2d0:	70 f4       	brcc	.+28     	; 0x2ee <_Z6getkeyv+0xbe>
     2d2:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <__data_end+0x6>
     2d6:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <__data_end+0x7>
     2da:	81 15       	cp	r24, r1
     2dc:	2d e7       	ldi	r18, 0x7D	; 125
     2de:	92 07       	cpc	r25, r18
     2e0:	4c f4       	brge	.+18     	; 0x2f4 <_Z6getkeyv+0xc4>
     2e2:	01 96       	adiw	r24, 0x01	; 1
     2e4:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <__data_end+0x7>
     2e8:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <__data_end+0x6>
     2ec:	1e c0       	rjmp	.+60     	; 0x32a <_Z6getkeyv+0xfa>
		else if (val < S4_LIMIT && keys[4] < 32000) ++keys[4]; //key4 pressed
     2ee:	80 37       	cpi	r24, 0x70	; 112
     2f0:	92 40       	sbci	r25, 0x02	; 2
     2f2:	70 f4       	brcc	.+28     	; 0x310 <_Z6getkeyv+0xe0>
     2f4:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <__data_end+0x8>
     2f8:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <__data_end+0x9>
     2fc:	81 15       	cp	r24, r1
     2fe:	2d e7       	ldi	r18, 0x7D	; 125
     300:	92 07       	cpc	r25, r18
     302:	34 f4       	brge	.+12     	; 0x310 <_Z6getkeyv+0xe0>
     304:	01 96       	adiw	r24, 0x01	; 1
     306:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <__data_end+0x9>
     30a:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <__data_end+0x8>
     30e:	0d c0       	rjmp	.+26     	; 0x32a <_Z6getkeyv+0xfa>
		else if ( keys[5] < 32000) ++keys[5]; // key5 pressed
     310:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end+0xa>
     314:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <__data_end+0xb>
     318:	81 15       	cp	r24, r1
     31a:	2d e7       	ldi	r18, 0x7D	; 125
     31c:	92 07       	cpc	r25, r18
     31e:	2c f4       	brge	.+10     	; 0x32a <_Z6getkeyv+0xfa>
     320:	01 96       	adiw	r24, 0x01	; 1
     322:	90 93 93 02 	sts	0x0293, r25	; 0x800293 <__data_end+0xb>
     326:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <__data_end+0xa>
		data = 0;
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	90 e0       	ldi	r25, 0x00	; 0
	}
	return data;
}
     32e:	08 95       	ret

00000330 <_ZN5Print17availableForWriteEv>:
	return ret;
}

int Zeit::GetHours(){return hh_;};
int Zeit::GetMinutes(){return mm_;};
int Zeit::GetSeconds(){return ss_;};
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	08 95       	ret

00000336 <_ZN5Print5flushEv>:
     336:	08 95       	ret

00000338 <_ZN7hd4478013iosetContrastEh>:
     338:	8d ef       	ldi	r24, 0xFD	; 253
     33a:	9f ef       	ldi	r25, 0xFF	; 255
     33c:	08 95       	ret

0000033e <_Z14chooseTimeZonev>:
     33e:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <timeZoneChoosen>
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	89 27       	eor	r24, r25
     346:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <timeZoneChoosen>
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	08 95       	ret

00000350 <_Z10changeAMPMv>:
     350:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <ampm>
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	89 27       	eor	r24, r25
     358:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <ampm>
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	08 95       	ret

00000362 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>:
     362:	0f 93       	push	r16
     364:	1f 93       	push	r17
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	18 2f       	mov	r17, r24
     36c:	d0 e0       	ldi	r29, 0x00	; 0
     36e:	c0 e2       	ldi	r28, 0x20	; 32
     370:	6c 2f       	mov	r22, r28
     372:	87 e2       	ldi	r24, 0x27	; 39
     374:	94 e0       	ldi	r25, 0x04	; 4
     376:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire17beginTransmissionEh>
     37a:	87 e2       	ldi	r24, 0x27	; 39
     37c:	94 e0       	ldi	r25, 0x04	; 4
     37e:	0e 94 0e 11 	call	0x221c	; 0x221c <_ZN7TwoWire15endTransmissionEv>
     382:	08 2f       	mov	r16, r24
     384:	61 e0       	ldi	r22, 0x01	; 1
     386:	70 e0       	ldi	r23, 0x00	; 0
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 4e 19 	call	0x329c	; 0x329c <delay>
     390:	01 11       	cpse	r16, r1
     392:	03 c0       	rjmp	.+6      	; 0x39a <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x38>
     394:	1d 17       	cp	r17, r29
     396:	f9 f0       	breq	.+62     	; 0x3d6 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x74>
     398:	df 5f       	subi	r29, 0xFF	; 255
     39a:	cf 5f       	subi	r28, 0xFF	; 255
     39c:	c8 32       	cpi	r28, 0x28	; 40
     39e:	41 f7       	brne	.-48     	; 0x370 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0xe>
     3a0:	c8 e3       	ldi	r28, 0x38	; 56
     3a2:	6c 2f       	mov	r22, r28
     3a4:	87 e2       	ldi	r24, 0x27	; 39
     3a6:	94 e0       	ldi	r25, 0x04	; 4
     3a8:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire17beginTransmissionEh>
     3ac:	87 e2       	ldi	r24, 0x27	; 39
     3ae:	94 e0       	ldi	r25, 0x04	; 4
     3b0:	0e 94 0e 11 	call	0x221c	; 0x221c <_ZN7TwoWire15endTransmissionEv>
     3b4:	08 2f       	mov	r16, r24
     3b6:	61 e0       	ldi	r22, 0x01	; 1
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 4e 19 	call	0x329c	; 0x329c <delay>
     3c2:	01 11       	cpse	r16, r1
     3c4:	03 c0       	rjmp	.+6      	; 0x3cc <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x6a>
     3c6:	1d 17       	cp	r17, r29
     3c8:	31 f0       	breq	.+12     	; 0x3d6 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x74>
     3ca:	df 5f       	subi	r29, 0xFF	; 255
     3cc:	cf 5f       	subi	r28, 0xFF	; 255
     3ce:	c0 34       	cpi	r28, 0x40	; 64
     3d0:	41 f7       	brne	.-48     	; 0x3a2 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x40>
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1+0x76>
     3d6:	8c 2f       	mov	r24, r28
     3d8:	df 91       	pop	r29
     3da:	cf 91       	pop	r28
     3dc:	1f 91       	pop	r17
     3de:	0f 91       	pop	r16
     3e0:	08 95       	ret

000003e2 <_ZN7TwoWire5writeEi>:
     3e2:	dc 01       	movw	r26, r24
     3e4:	ed 91       	ld	r30, X+
     3e6:	fc 91       	ld	r31, X
     3e8:	01 90       	ld	r0, Z+
     3ea:	f0 81       	ld	r31, Z
     3ec:	e0 2d       	mov	r30, r0
     3ee:	09 94       	ijmp

000003f0 <_ZN4Zeit4TickEv>:
     3f0:	fc 01       	movw	r30, r24
     3f2:	84 81       	ldd	r24, Z+4	; 0x04
     3f4:	95 81       	ldd	r25, Z+5	; 0x05
     3f6:	01 96       	adiw	r24, 0x01	; 1
     3f8:	2c e3       	ldi	r18, 0x3C	; 60
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	b9 01       	movw	r22, r18
     3fe:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <__divmodhi4>
     402:	95 83       	std	Z+5, r25	; 0x05
     404:	84 83       	std	Z+4, r24	; 0x04
     406:	89 2b       	or	r24, r25
     408:	19 f0       	breq	.+6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	08 95       	ret
     410:	82 81       	ldd	r24, Z+2	; 0x02
     412:	93 81       	ldd	r25, Z+3	; 0x03
     414:	01 96       	adiw	r24, 0x01	; 1
     416:	b9 01       	movw	r22, r18
     418:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <__divmodhi4>
     41c:	93 83       	std	Z+3, r25	; 0x03
     41e:	82 83       	std	Z+2, r24	; 0x02
     420:	89 2b       	or	r24, r25
     422:	99 f7       	brne	.-26     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     424:	80 81       	ld	r24, Z
     426:	91 81       	ldd	r25, Z+1	; 0x01
     428:	01 96       	adiw	r24, 0x01	; 1
     42a:	68 e1       	ldi	r22, 0x18	; 24
     42c:	70 e0       	ldi	r23, 0x00	; 0
     42e:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <__divmodhi4>
     432:	ac 01       	movw	r20, r24
     434:	91 83       	std	Z+1, r25	; 0x01
     436:	80 83       	st	Z, r24
     438:	21 e0       	ldi	r18, 0x01	; 1
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	45 2b       	or	r20, r21
     43e:	09 f0       	breq	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     440:	20 e0       	ldi	r18, 0x00	; 0
     442:	82 2f       	mov	r24, r18
     444:	08 95       	ret

00000446 <_Z5Watchv>:
 * frequent calls will result in counting the time. days-of-month and leap years are taken into account
 *
 * @return void
 */
void Watch()
{
     446:	0f 93       	push	r16
     448:	1f 93       	push	r17
#define INTERVAL 1000L
	static long target = INTERVAL;
	if (millis() > target)	{
     44a:	0e 94 1d 19 	call	0x323a	; 0x323a <millis>
     44e:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZZ5WatchvE6target>
     452:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZZ5WatchvE6target+0x1>
     456:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <_ZZ5WatchvE6target+0x2>
     45a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <_ZZ5WatchvE6target+0x3>
     45e:	06 17       	cp	r16, r22
     460:	17 07       	cpc	r17, r23
     462:	28 07       	cpc	r18, r24
     464:	39 07       	cpc	r19, r25
     466:	e0 f4       	brcc	.+56     	; 0x4a0 <_Z5Watchv+0x5a>
		target += INTERVAL;
     468:	d9 01       	movw	r26, r18
     46a:	c8 01       	movw	r24, r16
     46c:	88 51       	subi	r24, 0x18	; 24
     46e:	9c 4f       	sbci	r25, 0xFC	; 252
     470:	af 4f       	sbci	r26, 0xFF	; 255
     472:	bf 4f       	sbci	r27, 0xFF	; 255
     474:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZZ5WatchvE6target>
     478:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZZ5WatchvE6target+0x1>
     47c:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_ZZ5WatchvE6target+0x2>
     480:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_ZZ5WatchvE6target+0x3>
		zeitGMT.Tick();
     484:	8e eb       	ldi	r24, 0xBE	; 190
     486:	92 e0       	ldi	r25, 0x02	; 2
     488:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_ZN4Zeit4TickEv>
		zeitTimeZone.Tick();
     48c:	86 eb       	ldi	r24, 0xB6	; 182
     48e:	92 e0       	ldi	r25, 0x02	; 2
     490:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_ZN4Zeit4TickEv>
		zeitLocal.Tick();
     494:	8e ea       	ldi	r24, 0xAE	; 174
     496:	92 e0       	ldi	r25, 0x02	; 2
		//if(zeit1.Tick()) datum1.Tick(); //Wenn die Zeit bei 24.00 ankommt wird ret = 1 gesetzt und das Datum eins weitergestellt
	}
#undef INTERVAL
}
     498:	1f 91       	pop	r17
     49a:	0f 91       	pop	r16
	static long target = INTERVAL;
	if (millis() > target)	{
		target += INTERVAL;
		zeitGMT.Tick();
		zeitTimeZone.Tick();
		zeitLocal.Tick();
     49c:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <_ZN4Zeit4TickEv>
		//if(zeit1.Tick()) datum1.Tick(); //Wenn die Zeit bei 24.00 ankommt wird ret = 1 gesetzt und das Datum eins weitergestellt
	}
#undef INTERVAL
}
     4a0:	1f 91       	pop	r17
     4a2:	0f 91       	pop	r16
     4a4:	08 95       	ret

000004a6 <_Z11printhhmmssR4Zeit>:
 * @param[in] zeit: struct 
 * 
 * @return void
 */
void printhhmmss(class Zeit &z)
{
     4a6:	0f 93       	push	r16
     4a8:	1f 93       	push	r17
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	8c 01       	movw	r16, r24
	if (ampm)
     4b0:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <ampm>
     4b4:	f8 01       	movw	r30, r16
     4b6:	c0 81       	ld	r28, Z
     4b8:	d1 81       	ldd	r29, Z+1	; 0x01
     4ba:	88 23       	and	r24, r24
     4bc:	89 f0       	breq	.+34     	; 0x4e0 <_Z11printhhmmssR4Zeit+0x3a>
	{
		int ampmhours = z.GetHours(); 
		if (ampmhours > 12)
     4be:	cd 30       	cpi	r28, 0x0D	; 13
     4c0:	d1 05       	cpc	r29, r1
     4c2:	0c f0       	brlt	.+2      	; 0x4c6 <_Z11printhhmmssR4Zeit+0x20>
		{
			 ampmhours -= 12;
     4c4:	2c 97       	sbiw	r28, 0x0c	; 12
			 if(ampmhours<=9)lcd.print("0");
			 lcd.print(ampmhours);
		}	
		else
		{
			if(ampmhours<=9)lcd.print("0");
     4c6:	ca 30       	cpi	r28, 0x0A	; 10
     4c8:	d1 05       	cpc	r29, r1
     4ca:	34 f4       	brge	.+12     	; 0x4d8 <_Z11printhhmmssR4Zeit+0x32>
     4cc:	6f e1       	ldi	r22, 0x1F	; 31
     4ce:	71 e0       	ldi	r23, 0x01	; 1
     4d0:	8c e8       	ldi	r24, 0x8C	; 140
     4d2:	93 e0       	ldi	r25, 0x03	; 3
     4d4:	0e 94 09 13 	call	0x2612	; 0x2612 <_ZN5Print5printEPKc>
			 lcd.print(ampmhours);
     4d8:	4a e0       	ldi	r20, 0x0A	; 10
     4da:	50 e0       	ldi	r21, 0x00	; 0
     4dc:	be 01       	movw	r22, r28
     4de:	0d c0       	rjmp	.+26     	; 0x4fa <_Z11printhhmmssR4Zeit+0x54>
		}	 
	}
	
	else
	{
		if(z.GetHours()<=9)lcd.print("0");
     4e0:	2a 97       	sbiw	r28, 0x0a	; 10
     4e2:	34 f4       	brge	.+12     	; 0x4f0 <_Z11printhhmmssR4Zeit+0x4a>
     4e4:	6f e1       	ldi	r22, 0x1F	; 31
     4e6:	71 e0       	ldi	r23, 0x01	; 1
     4e8:	8c e8       	ldi	r24, 0x8C	; 140
     4ea:	93 e0       	ldi	r25, 0x03	; 3
     4ec:	0e 94 09 13 	call	0x2612	; 0x2612 <_ZN5Print5printEPKc>
		lcd.print(z.GetHours());
     4f0:	f8 01       	movw	r30, r16
     4f2:	60 81       	ld	r22, Z
     4f4:	71 81       	ldd	r23, Z+1	; 0x01
     4f6:	4a e0       	ldi	r20, 0x0A	; 10
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	8c e8       	ldi	r24, 0x8C	; 140
     4fc:	93 e0       	ldi	r25, 0x03	; 3
     4fe:	0e 94 b6 13 	call	0x276c	; 0x276c <_ZN5Print5printEii>
	}
	if(z.GetMinutes()<=9)lcd.print(":0"); else lcd.print(":");
     502:	f8 01       	movw	r30, r16
     504:	82 81       	ldd	r24, Z+2	; 0x02
     506:	93 81       	ldd	r25, Z+3	; 0x03
     508:	0a 97       	sbiw	r24, 0x0a	; 10
     50a:	1c f4       	brge	.+6      	; 0x512 <_Z11printhhmmssR4Zeit+0x6c>
     50c:	6e e1       	ldi	r22, 0x1E	; 30
     50e:	71 e0       	ldi	r23, 0x01	; 1
     510:	02 c0       	rjmp	.+4      	; 0x516 <_Z11printhhmmssR4Zeit+0x70>
     512:	61 e2       	ldi	r22, 0x21	; 33
     514:	71 e0       	ldi	r23, 0x01	; 1
     516:	8c e8       	ldi	r24, 0x8C	; 140
     518:	93 e0       	ldi	r25, 0x03	; 3
     51a:	0e 94 09 13 	call	0x2612	; 0x2612 <_ZN5Print5printEPKc>
	lcd.print(z.GetMinutes());
     51e:	f8 01       	movw	r30, r16
     520:	62 81       	ldd	r22, Z+2	; 0x02
     522:	73 81       	ldd	r23, Z+3	; 0x03
     524:	4a e0       	ldi	r20, 0x0A	; 10
     526:	50 e0       	ldi	r21, 0x00	; 0
     528:	8c e8       	ldi	r24, 0x8C	; 140
     52a:	93 e0       	ldi	r25, 0x03	; 3
     52c:	0e 94 b6 13 	call	0x276c	; 0x276c <_ZN5Print5printEii>
	if(z.GetSeconds()<=9)lcd.print(":0"); else lcd.print(":");
     530:	f8 01       	movw	r30, r16
     532:	84 81       	ldd	r24, Z+4	; 0x04
     534:	95 81       	ldd	r25, Z+5	; 0x05
     536:	0a 97       	sbiw	r24, 0x0a	; 10
     538:	1c f4       	brge	.+6      	; 0x540 <_Z11printhhmmssR4Zeit+0x9a>
     53a:	6e e1       	ldi	r22, 0x1E	; 30
     53c:	71 e0       	ldi	r23, 0x01	; 1
     53e:	02 c0       	rjmp	.+4      	; 0x544 <_Z11printhhmmssR4Zeit+0x9e>
     540:	61 e2       	ldi	r22, 0x21	; 33
     542:	71 e0       	ldi	r23, 0x01	; 1
     544:	8c e8       	ldi	r24, 0x8C	; 140
     546:	93 e0       	ldi	r25, 0x03	; 3
     548:	0e 94 09 13 	call	0x2612	; 0x2612 <_ZN5Print5printEPKc>
	lcd.print(z.GetSeconds());
     54c:	f8 01       	movw	r30, r16
     54e:	64 81       	ldd	r22, Z+4	; 0x04
     550:	75 81       	ldd	r23, Z+5	; 0x05
     552:	4a e0       	ldi	r20, 0x0A	; 10
     554:	50 e0       	ldi	r21, 0x00	; 0
     556:	8c e8       	ldi	r24, 0x8C	; 140
     558:	93 e0       	ldi	r25, 0x03	; 3
     55a:	0e 94 b6 13 	call	0x276c	; 0x276c <_ZN5Print5printEii>
	if (ampm && z.GetHours() > 12) lcd.print(" PM");
     55e:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <ampm>
     562:	88 23       	and	r24, r24
     564:	91 f0       	breq	.+36     	; 0x58a <_Z11printhhmmssR4Zeit+0xe4>
     566:	f8 01       	movw	r30, r16
     568:	80 81       	ld	r24, Z
     56a:	91 81       	ldd	r25, Z+1	; 0x01
     56c:	0d 97       	sbiw	r24, 0x0d	; 13
     56e:	1c f0       	brlt	.+6      	; 0x576 <_Z11printhhmmssR4Zeit+0xd0>
     570:	63 e2       	ldi	r22, 0x23	; 35
     572:	71 e0       	ldi	r23, 0x01	; 1
     574:	02 c0       	rjmp	.+4      	; 0x57a <_Z11printhhmmssR4Zeit+0xd4>
	else if (ampm && z.GetHours() <= 12) lcd.print(" AM");
     576:	67 e2       	ldi	r22, 0x27	; 39
     578:	71 e0       	ldi	r23, 0x01	; 1
     57a:	8c e8       	ldi	r24, 0x8C	; 140
     57c:	93 e0       	ldi	r25, 0x03	; 3
}
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	1f 91       	pop	r17
     584:	0f 91       	pop	r16
	if(z.GetMinutes()<=9)lcd.print(":0"); else lcd.print(":");
	lcd.print(z.GetMinutes());
	if(z.GetSeconds()<=9)lcd.print(":0"); else lcd.print(":");
	lcd.print(z.GetSeconds());
	if (ampm && z.GetHours() > 12) lcd.print(" PM");
	else if (ampm && z.GetHours() <= 12) lcd.print(" AM");
     586:	0c 94 09 13 	jmp	0x2612	; 0x2612 <_ZN5Print5printEPKc>
}
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	1f 91       	pop	r17
     590:	0f 91       	pop	r16
     592:	08 95       	ret

00000594 <_Z17printHumidityTempv>:
 * und schreibt den Wert auf das LCD
 *
 * @return void
 */
void printHumidityTemp (void)
{
     594:	cf 92       	push	r12
     596:	df 92       	push	r13
     598:	ef 92       	push	r14
     59a:	ff 92       	push	r15
	lcd.setCursor(0,1);
     59c:	41 e0       	ldi	r20, 0x01	; 1
     59e:	60 e0       	ldi	r22, 0x00	; 0
     5a0:	8c e8       	ldi	r24, 0x8C	; 140
     5a2:	93 e0       	ldi	r25, 0x03	; 3
     5a4:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <_ZN7hd447809setCursorEhh>
	if (temp == 0) lcd.print("Sensor defekt");
     5a8:	c0 90 da 02 	lds	r12, 0x02DA	; 0x8002da <temp>
     5ac:	d0 90 db 02 	lds	r13, 0x02DB	; 0x8002db <temp+0x1>
     5b0:	e0 90 dc 02 	lds	r14, 0x02DC	; 0x8002dc <temp+0x2>
     5b4:	f0 90 dd 02 	lds	r15, 0x02DD	; 0x8002dd <temp+0x3>
     5b8:	20 e0       	ldi	r18, 0x00	; 0
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	a9 01       	movw	r20, r18
     5be:	c7 01       	movw	r24, r14
     5c0:	b6 01       	movw	r22, r12
     5c2:	0e 94 82 11 	call	0x2304	; 0x2304 <__cmpsf2>
     5c6:	81 11       	cpse	r24, r1
     5c8:	03 c0       	rjmp	.+6      	; 0x5d0 <_Z17printHumidityTempv+0x3c>
     5ca:	6b e2       	ldi	r22, 0x2B	; 43
     5cc:	71 e0       	ldi	r23, 0x01	; 1
     5ce:	23 c0       	rjmp	.+70     	; 0x616 <_Z17printHumidityTempv+0x82>
	else {
		lcd.print(temp);
     5d0:	22 e0       	ldi	r18, 0x02	; 2
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	b7 01       	movw	r22, r14
     5d6:	a6 01       	movw	r20, r12
     5d8:	8c e8       	ldi	r24, 0x8C	; 140
     5da:	93 e0       	ldi	r25, 0x03	; 3
     5dc:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN5Print5printEdi>
		lcd.print((char)223);
     5e0:	6f ed       	ldi	r22, 0xDF	; 223
     5e2:	8c e8       	ldi	r24, 0x8C	; 140
     5e4:	93 e0       	ldi	r25, 0x03	; 3
     5e6:	0e 94 0b 13 	call	0x2616	; 0x2616 <_ZN5Print5printEc>
		lcd.print("C   ");
     5ea:	69 e3       	ldi	r22, 0x39	; 57
     5ec:	71 e0       	ldi	r23, 0x01	; 1
     5ee:	8c e8       	ldi	r24, 0x8C	; 140
     5f0:	93 e0       	ldi	r25, 0x03	; 3
     5f2:	0e 94 09 13 	call	0x2612	; 0x2612 <_ZN5Print5printEPKc>
		lcd.print(hum);
     5f6:	40 91 d6 02 	lds	r20, 0x02D6	; 0x8002d6 <hum>
     5fa:	50 91 d7 02 	lds	r21, 0x02D7	; 0x8002d7 <hum+0x1>
     5fe:	60 91 d8 02 	lds	r22, 0x02D8	; 0x8002d8 <hum+0x2>
     602:	70 91 d9 02 	lds	r23, 0x02D9	; 0x8002d9 <hum+0x3>
     606:	22 e0       	ldi	r18, 0x02	; 2
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	8c e8       	ldi	r24, 0x8C	; 140
     60c:	93 e0       	ldi	r25, 0x03	; 3
     60e:	0e 94 98 14 	call	0x2930	; 0x2930 <_ZN5Print5printEdi>
		lcd.print("%");
     612:	6e e3       	ldi	r22, 0x3E	; 62
     614:	71 e0       	ldi	r23, 0x01	; 1
     616:	8c e8       	ldi	r24, 0x8C	; 140
     618:	93 e0       	ldi	r25, 0x03	; 3
	}
}
     61a:	ff 90       	pop	r15
     61c:	ef 90       	pop	r14
     61e:	df 90       	pop	r13
     620:	cf 90       	pop	r12
	else {
		lcd.print(temp);
		lcd.print((char)223);
		lcd.print("C   ");
		lcd.print(hum);
		lcd.print("%");
     622:	0c 94 09 13 	jmp	0x2612	; 0x2612 <_ZN5Print5printEPKc>

00000626 <_Z10homeScreeni>:
 * @param[in] key : int, user input
 *
 * @return key
 */
int homeScreen(int key)
{
     626:	0f 93       	push	r16
     628:	1f 93       	push	r17
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	ec 01       	movw	r28, r24
	if (readSensor < millis())
     630:	0e 94 1d 19 	call	0x323a	; 0x323a <millis>
     634:	00 91 de 02 	lds	r16, 0x02DE	; 0x8002de <readSensor>
     638:	10 91 df 02 	lds	r17, 0x02DF	; 0x8002df <readSensor+0x1>
     63c:	20 91 e0 02 	lds	r18, 0x02E0	; 0x8002e0 <readSensor+0x2>
     640:	30 91 e1 02 	lds	r19, 0x02E1	; 0x8002e1 <readSensor+0x3>
     644:	06 17       	cp	r16, r22
     646:	17 07       	cpc	r17, r23
     648:	28 07       	cpc	r18, r24
     64a:	39 07       	cpc	r19, r25
     64c:	b8 f5       	brcc	.+110    	; 0x6bc <_Z10homeScreeni+0x96>
    int8_t read11(uint8_t pin);
    int8_t read(uint8_t pin);
    int8_t read12(uint8_t pin);

    inline int8_t read21(uint8_t pin)   { return read(pin); };
    inline int8_t read22(uint8_t pin)   { return read(pin); };
     64e:	66 e1       	ldi	r22, 0x16	; 22
     650:	86 ec       	ldi	r24, 0xC6	; 198
     652:	92 e0       	ldi	r25, 0x02	; 2
     654:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <_ZN3dht4readEh>
	{	
		int readData = DHT.read22(tempSensor);
		temp = DHT.temperature;
     658:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <DHT+0x4>
     65c:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <DHT+0x5>
     660:	a0 91 cc 02 	lds	r26, 0x02CC	; 0x8002cc <DHT+0x6>
     664:	b0 91 cd 02 	lds	r27, 0x02CD	; 0x8002cd <DHT+0x7>
     668:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <temp>
     66c:	90 93 db 02 	sts	0x02DB, r25	; 0x8002db <temp+0x1>
     670:	a0 93 dc 02 	sts	0x02DC, r26	; 0x8002dc <temp+0x2>
     674:	b0 93 dd 02 	sts	0x02DD, r27	; 0x8002dd <temp+0x3>
		hum = DHT.humidity;
     678:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <DHT>
     67c:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <DHT+0x1>
     680:	a0 91 c8 02 	lds	r26, 0x02C8	; 0x8002c8 <DHT+0x2>
     684:	b0 91 c9 02 	lds	r27, 0x02C9	; 0x8002c9 <DHT+0x3>
     688:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <hum>
     68c:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <hum+0x1>
     690:	a0 93 d8 02 	sts	0x02D8, r26	; 0x8002d8 <hum+0x2>
     694:	b0 93 d9 02 	sts	0x02D9, r27	; 0x8002d9 <hum+0x3>
		//temp=analogRead(tempSensor);
		//temp=(temp*500)/1023;
		printHumidityTemp();
     698:	0e 94 ca 02 	call	0x594	; 0x594 <_Z17printHumidityTempv>
		readSensor = millis() + 5000;
     69c:	0e 94 1d 19 	call	0x323a	; 0x323a <millis>
     6a0:	dc 01       	movw	r26, r24
     6a2:	cb 01       	movw	r24, r22
     6a4:	88 57       	subi	r24, 0x78	; 120
     6a6:	9c 4e       	sbci	r25, 0xEC	; 236
     6a8:	af 4f       	sbci	r26, 0xFF	; 255
     6aa:	bf 4f       	sbci	r27, 0xFF	; 255
     6ac:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <readSensor>
     6b0:	90 93 df 02 	sts	0x02DF, r25	; 0x8002df <readSensor+0x1>
     6b4:	a0 93 e0 02 	sts	0x02E0, r26	; 0x8002e0 <readSensor+0x2>
     6b8:	b0 93 e1 02 	sts	0x02E1, r27	; 0x8002e1 <readSensor+0x3>
	}
	printHumidityTemp();
     6bc:	0e 94 ca 02 	call	0x594	; 0x594 <_Z17printHumidityTempv>
	lcd.setCursor(0,0);
     6c0:	40 e0       	ldi	r20, 0x00	; 0
     6c2:	60 e0       	ldi	r22, 0x00	; 0
     6c4:	8c e8       	ldi	r24, 0x8C	; 140
     6c6:	93 e0       	ldi	r25, 0x03	; 3
     6c8:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <_ZN7hd447809setCursorEhh>
	if (timeZoneChoosen)
     6cc:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <timeZoneChoosen>
     6d0:	88 23       	and	r24, r24
     6d2:	d9 f0       	breq	.+54     	; 0x70a <_Z10homeScreeni+0xe4>
	{
		printhhmmss(zeitTimeZone);
     6d4:	86 eb       	ldi	r24, 0xB6	; 182
     6d6:	92 e0       	ldi	r25, 0x02	; 2
     6d8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <_Z11printhhmmssR4Zeit>
		lcd.setCursor(13,0);
     6dc:	40 e0       	ldi	r20, 0x00	; 0
     6de:	6d e0       	ldi	r22, 0x0D	; 13
     6e0:	8c e8       	ldi	r24, 0x8C	; 140
     6e2:	93 e0       	ldi	r25, 0x03	; 3
     6e4:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <_ZN7hd447809setCursorEhh>
		lcd.print(CITIES[tz].initials);
     6e8:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <tz>
     6ec:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <tz+0x1>
     6f0:	2e e0       	ldi	r18, 0x0E	; 14
     6f2:	28 9f       	mul	r18, r24
     6f4:	b0 01       	movw	r22, r0
     6f6:	29 9f       	mul	r18, r25
     6f8:	70 0d       	add	r23, r0
     6fa:	11 24       	eor	r1, r1
     6fc:	64 51       	subi	r22, 0x14	; 20
     6fe:	7d 4f       	sbci	r23, 0xFD	; 253
     700:	8c e8       	ldi	r24, 0x8C	; 140
     702:	93 e0       	ldi	r25, 0x03	; 3
     704:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <_ZN5Print5printERK6String>
     708:	04 c0       	rjmp	.+8      	; 0x712 <_Z10homeScreeni+0xec>
	}
	else
	{
		printhhmmss(zeitLocal);	
     70a:	8e ea       	ldi	r24, 0xAE	; 174
     70c:	92 e0       	ldi	r25, 0x02	; 2
     70e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <_Z11printhhmmssR4Zeit>
	}
	return key;
}
     712:	ce 01       	movw	r24, r28
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	1f 91       	pop	r17
     71a:	0f 91       	pop	r16
     71c:	08 95       	ret

0000071e <_Z13calculateTimev>:
 * 
 * Stellt sicher, dass die Zeiten richtig sind. 
 * Zwischen 0 und kleiner als 24.
 */
void calculateTime() {
	zeitTimeZone.hh_= zeitGMT.hh_ + CITIES[tz].timediff;
     71e:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <tz>
     722:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <tz+0x1>
     726:	2e e0       	ldi	r18, 0x0E	; 14
     728:	28 9f       	mul	r18, r24
     72a:	f0 01       	movw	r30, r0
     72c:	29 9f       	mul	r18, r25
     72e:	f0 0d       	add	r31, r0
     730:	11 24       	eor	r1, r1
     732:	ec 51       	subi	r30, 0x1C	; 28
     734:	fd 4f       	sbci	r31, 0xFD	; 253
     736:	26 81       	ldd	r18, Z+6	; 0x06
     738:	37 81       	ldd	r19, Z+7	; 0x07
     73a:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <zeitGMT>
     73e:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <zeitGMT+0x1>
     742:	82 0f       	add	r24, r18
     744:	93 1f       	adc	r25, r19
	if (zeitTimeZone.hh_ > 23)
     746:	88 31       	cpi	r24, 0x18	; 24
     748:	91 05       	cpc	r25, r1
     74a:	0c f0       	brlt	.+2      	; 0x74e <_Z13calculateTimev+0x30>
	{
		zeitTimeZone.hh_ -= 24; 
     74c:	48 97       	sbiw	r24, 0x18	; 24
     74e:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <zeitTimeZone+0x1>
     752:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <zeitTimeZone>
	}
	if (zeitTimeZone.hh_ < 0)
     756:	20 91 b6 02 	lds	r18, 0x02B6	; 0x8002b6 <zeitTimeZone>
     75a:	30 91 b7 02 	lds	r19, 0x02B7	; 0x8002b7 <zeitTimeZone+0x1>
     75e:	37 ff       	sbrs	r19, 7
     760:	08 c0       	rjmp	.+16     	; 0x772 <_Z13calculateTimev+0x54>
	{
		zeitTimeZone.hh_ = 24 - zeitTimeZone.hh_;
     762:	88 e1       	ldi	r24, 0x18	; 24
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	82 1b       	sub	r24, r18
     768:	93 0b       	sbc	r25, r19
     76a:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <zeitTimeZone+0x1>
     76e:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <zeitTimeZone>
     772:	08 95       	ret

00000774 <_Z14changeTimeZonei>:
 * 
 * @return key
 */
int changeTimeZone (int key)
{
	switch (key)
     774:	83 30       	cpi	r24, 0x03	; 3
     776:	91 05       	cpc	r25, r1
     778:	39 f0       	breq	.+14     	; 0x788 <_Z14changeTimeZonei+0x14>
     77a:	8a 30       	cpi	r24, 0x0A	; 10
     77c:	91 05       	cpc	r25, r1
     77e:	21 f0       	breq	.+8      	; 0x788 <_Z14changeTimeZonei+0x14>
     780:	81 30       	cpi	r24, 0x01	; 1
     782:	91 05       	cpc	r25, r1
     784:	51 f5       	brne	.+84     	; 0x7da <_Z14changeTimeZonei+0x66>
     786:	17 c0       	rjmp	.+46     	; 0x7b6 <_Z14changeTimeZonei+0x42>
	{
		case X_KEY:
		//zeit2 = zeitLocal;
		case DOWN_KEY:
		lcd.clear();
     788:	8c e8       	ldi	r24, 0x8C	; 140
     78a:	93 e0       	ldi	r25, 0x03	; 3
     78c:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN7hd447805clearEv>
		if (tz == 0)
     790:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <tz>
     794:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <tz+0x1>
     798:	00 97       	sbiw	r24, 0x00	; 0
     79a:	19 f4       	brne	.+6      	; 0x7a2 <_Z14changeTimeZonei+0x2e>
		{
			tz = 11;
     79c:	8b e0       	ldi	r24, 0x0B	; 11
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	01 c0       	rjmp	.+2      	; 0x7a4 <_Z14changeTimeZonei+0x30>
		}
		else tz -= 1;
     7a2:	01 97       	sbiw	r24, 0x01	; 1
     7a4:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <tz+0x1>
     7a8:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <tz>
		calculateTime();	
     7ac:	0e 94 8f 03 	call	0x71e	; 0x71e <_Z13calculateTimev>
		key = X_KEY;
     7b0:	8a e0       	ldi	r24, 0x0A	; 10
     7b2:	90 e0       	ldi	r25, 0x00	; 0
		break;
     7b4:	08 95       	ret
		case UP_KEY:
		lcd.clear();
     7b6:	8c e8       	ldi	r24, 0x8C	; 140
     7b8:	93 e0       	ldi	r25, 0x03	; 3
     7ba:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN7hd447805clearEv>
		if (tz == 11)
     7be:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <tz>
     7c2:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <tz+0x1>
     7c6:	8b 30       	cpi	r24, 0x0B	; 11
     7c8:	91 05       	cpc	r25, r1
     7ca:	29 f4       	brne	.+10     	; 0x7d6 <_Z14changeTimeZonei+0x62>
		{
			tz = 0;
     7cc:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <tz+0x1>
     7d0:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <tz>
     7d4:	eb cf       	rjmp	.-42     	; 0x7ac <_Z14changeTimeZonei+0x38>
		}
		else tz += 1;
     7d6:	01 96       	adiw	r24, 0x01	; 1
     7d8:	e5 cf       	rjmp	.-54     	; 0x7a4 <_Z14changeTimeZonei+0x30>
		break;
		case RIGHT_KEY:
		break;
	}
	return key;
}
     7da:	08 95       	ret

000007dc <_Z11setTimeZonei>:
 * @param[in] key : int, user input
 *
 * @return key
 */
int setTimeZone(int key)
{
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
	int input = changeTimeZone(key);
     7e0:	0e 94 ba 03 	call	0x774	; 0x774 <_Z14changeTimeZonei>
     7e4:	ec 01       	movw	r28, r24
	lcd.setCursor(0,0);
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	60 e0       	ldi	r22, 0x00	; 0
     7ea:	8c e8       	ldi	r24, 0x8C	; 140
     7ec:	93 e0       	ldi	r25, 0x03	; 3
     7ee:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <_ZN7hd447809setCursorEhh>
	lcd.print(CITIES[tz].name);
     7f2:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <tz>
     7f6:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <tz+0x1>
     7fa:	2e e0       	ldi	r18, 0x0E	; 14
     7fc:	28 9f       	mul	r18, r24
     7fe:	b0 01       	movw	r22, r0
     800:	29 9f       	mul	r18, r25
     802:	70 0d       	add	r23, r0
     804:	11 24       	eor	r1, r1
     806:	6c 51       	subi	r22, 0x1C	; 28
     808:	7d 4f       	sbci	r23, 0xFD	; 253
     80a:	8c e8       	ldi	r24, 0x8C	; 140
     80c:	93 e0       	ldi	r25, 0x03	; 3
     80e:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <_ZN5Print5printERK6String>
	lcd.setCursor(0,1);
     812:	41 e0       	ldi	r20, 0x01	; 1
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	8c e8       	ldi	r24, 0x8C	; 140
     818:	93 e0       	ldi	r25, 0x03	; 3
     81a:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <_ZN7hd447809setCursorEhh>
	printhhmmss(zeitTimeZone);
     81e:	86 eb       	ldi	r24, 0xB6	; 182
     820:	92 e0       	ldi	r25, 0x02	; 2
     822:	0e 94 53 02 	call	0x4a6	; 0x4a6 <_Z11printhhmmssR4Zeit>
	return input;
}
     826:	ce 01       	movw	r24, r28
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	08 95       	ret

0000082e <_Z17callibratePointerv>:
 * @brief set zero position of the three pointer
 *
 */
void callibratePointer() 
{
	lcd.clear();
     82e:	8c e8       	ldi	r24, 0x8C	; 140
     830:	93 e0       	ldi	r25, 0x03	; 3
     832:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN7hd447805clearEv>
	lcd.print("Zeiger kalibrieren");
     836:	60 e4       	ldi	r22, 0x40	; 64
     838:	71 e0       	ldi	r23, 0x01	; 1
     83a:	8c e8       	ldi	r24, 0x8C	; 140
     83c:	93 e0       	ldi	r25, 0x03	; 3
     83e:	0e 94 09 13 	call	0x2612	; 0x2612 <_ZN5Print5printEPKc>
	delay(2000);
     842:	60 ed       	ldi	r22, 0xD0	; 208
     844:	77 e0       	ldi	r23, 0x07	; 7
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	0e 94 4e 19 	call	0x329c	; 0x329c <delay>
	lcd.clear();
     84e:	8c e8       	ldi	r24, 0x8C	; 140
     850:	93 e0       	ldi	r25, 0x03	; 3
     852:	0c 94 58 0c 	jmp	0x18b0	; 0x18b0 <_ZN7hd447805clearEv>

00000856 <setup>:
 * \return void
 */
void setup()
{
	//LCD konfigurieren
	lcd.begin(16, 2);
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	42 e0       	ldi	r20, 0x02	; 2
     85a:	60 e1       	ldi	r22, 0x10	; 16
     85c:	8c e8       	ldi	r24, 0x8C	; 140
     85e:	93 e0       	ldi	r25, 0x03	; 3
     860:	0e 94 84 0c 	call	0x1908	; 0x1908 <_ZN7hd447805beginEhhh>
	lcd.noBacklight();
     864:	8c e8       	ldi	r24, 0x8C	; 140
     866:	93 e0       	ldi	r25, 0x03	; 3
     868:	0e 94 19 0c 	call	0x1832	; 0x1832 <_ZN7hd4478011noBacklightEv>
	lcd.noCursor();
     86c:	8c e8       	ldi	r24, 0x8C	; 140
     86e:	93 e0       	ldi	r25, 0x03	; 3
     870:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <_ZN7hd447808noCursorEv>
	lcd.home();
     874:	8c e8       	ldi	r24, 0x8C	; 140
     876:	93 e0       	ldi	r25, 0x03	; 3
     878:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <_ZN7hd447804homeEv>
	lcd.print("Romeo V2.2 Watch");
     87c:	63 e5       	ldi	r22, 0x53	; 83
     87e:	71 e0       	ldi	r23, 0x01	; 1
     880:	8c e8       	ldi	r24, 0x8C	; 140
     882:	93 e0       	ldi	r25, 0x03	; 3
     884:	0e 94 09 13 	call	0x2612	; 0x2612 <_ZN5Print5printEPKc>
	lcd.setCursor(0,1);
     888:	41 e0       	ldi	r20, 0x01	; 1
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	8c e8       	ldi	r24, 0x8C	; 140
     88e:	93 e0       	ldi	r25, 0x03	; 3
     890:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <_ZN7hd447809setCursorEhh>
	lcd.print("Coray / Bruno");
     894:	64 e6       	ldi	r22, 0x64	; 100
     896:	71 e0       	ldi	r23, 0x01	; 1
     898:	8c e8       	ldi	r24, 0x8C	; 140
     89a:	93 e0       	ldi	r25, 0x03	; 3
     89c:	0e 94 09 13 	call	0x2612	; 0x2612 <_ZN5Print5printEPKc>
	while(millis()<3000);
     8a0:	0e 94 1d 19 	call	0x323a	; 0x323a <millis>
     8a4:	68 3b       	cpi	r22, 0xB8	; 184
     8a6:	7b 40       	sbci	r23, 0x0B	; 11
     8a8:	81 05       	cpc	r24, r1
     8aa:	91 05       	cpc	r25, r1
     8ac:	c8 f3       	brcs	.-14     	; 0x8a0 <setup+0x4a>
	lcd.clear();
     8ae:	8c e8       	ldi	r24, 0x8C	; 140
     8b0:	93 e0       	ldi	r25, 0x03	; 3
     8b2:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN7hd447805clearEv>
	
	zeitTimeZone = zeitGMT;
     8b6:	88 e0       	ldi	r24, 0x08	; 8
     8b8:	ee eb       	ldi	r30, 0xBE	; 190
     8ba:	f2 e0       	ldi	r31, 0x02	; 2
     8bc:	a6 eb       	ldi	r26, 0xB6	; 182
     8be:	b2 e0       	ldi	r27, 0x02	; 2
     8c0:	01 90       	ld	r0, Z+
     8c2:	0d 92       	st	X+, r0
     8c4:	8a 95       	dec	r24
     8c6:	e1 f7       	brne	.-8      	; 0x8c0 <setup+0x6a>
	
	//Button uns Sensor Pin als input definiert
	pinMode(btnPin, INPUT);
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	87 e0       	ldi	r24, 0x07	; 7
     8cc:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <pinMode>
	pinMode(tempSensor,INPUT);
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	86 e1       	ldi	r24, 0x16	; 22
     8d4:	0c 94 59 1a 	jmp	0x34b2	; 0x34b2 <pinMode>

000008d8 <loop>:
 * \return void
 */
void loop()
{
	//Button-Pin auslesen
	if (digitalRead(btnPin) == HIGH)
     8d8:	87 e0       	ldi	r24, 0x07	; 7
     8da:	0e 94 c4 1a 	call	0x3588	; 0x3588 <digitalRead>
     8de:	01 97       	sbiw	r24, 0x01	; 1
     8e0:	11 f4       	brne	.+4      	; 0x8e6 <loop+0xe>
	{
		callibratePointer();
     8e2:	0c 94 17 04 	jmp	0x82e	; 0x82e <_Z17callibratePointerv>
	}
	else
	{
	Watch();
     8e6:	0e 94 23 02 	call	0x446	; 0x446 <_Z5Watchv>
	input = getkey();
     8ea:	0e 94 18 01 	call	0x230	; 0x230 <_Z6getkeyv>
     8ee:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <_ZL5input+0x1>
     8f2:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <_ZL5input>
	if (watchmenu[menu].active) 
     8f6:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <_ZL4menu>
     8fa:	30 91 ad 02 	lds	r19, 0x02AD	; 0x8002ad <_ZL4menu+0x1>
     8fe:	42 e1       	ldi	r20, 0x12	; 18
     900:	42 9f       	mul	r20, r18
     902:	f0 01       	movw	r30, r0
     904:	43 9f       	mul	r20, r19
     906:	f0 0d       	add	r31, r0
     908:	11 24       	eor	r1, r1
     90a:	e5 5e       	subi	r30, 0xE5	; 229
     90c:	fd 4f       	sbci	r31, 0xFD	; 253
     90e:	04 84       	ldd	r0, Z+12	; 0x0c
     910:	f5 85       	ldd	r31, Z+13	; 0x0d
     912:	e0 2d       	mov	r30, r0
     914:	30 97       	sbiw	r30, 0x00	; 0
     916:	29 f0       	breq	.+10     	; 0x922 <loop+0x4a>
		input = watchmenu[menu].active(input);
     918:	09 95       	icall
     91a:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <_ZL5input+0x1>
     91e:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <_ZL5input>
		//! cyclic call to active function as long as menu n is active
	switch(input) {
     922:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <_ZL5input>
     926:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <_ZL5input+0x1>
     92a:	83 30       	cpi	r24, 0x03	; 3
     92c:	91 05       	cpc	r25, r1
     92e:	e9 f1       	breq	.+122    	; 0x9aa <loop+0xd2>
     930:	34 f4       	brge	.+12     	; 0x93e <loop+0x66>
     932:	81 30       	cpi	r24, 0x01	; 1
     934:	91 05       	cpc	r25, r1
     936:	79 f0       	breq	.+30     	; 0x956 <loop+0x7e>
     938:	02 97       	sbiw	r24, 0x02	; 2
     93a:	21 f1       	breq	.+72     	; 0x984 <loop+0xac>
     93c:	09 c0       	rjmp	.+18     	; 0x950 <loop+0x78>
     93e:	85 30       	cpi	r24, 0x05	; 5
     940:	91 05       	cpc	r25, r1
     942:	09 f4       	brne	.+2      	; 0x946 <loop+0x6e>
     944:	6a c0       	rjmp	.+212    	; 0xa1a <loop+0x142>
     946:	0c f4       	brge	.+2      	; 0x94a <loop+0x72>
     948:	43 c0       	rjmp	.+134    	; 0x9d0 <loop+0xf8>
     94a:	06 97       	sbiw	r24, 0x06	; 6
     94c:	09 f4       	brne	.+2      	; 0x950 <loop+0x78>
     94e:	8a c0       	rjmp	.+276    	; 0xa64 <loop+0x18c>
		default:
		case X_KEY:
		case NO_KEY:
		newmenu = -1; // no changes made
     950:	8f ef       	ldi	r24, 0xFF	; 255
     952:	9f ef       	ldi	r25, 0xFF	; 255
     954:	12 c0       	rjmp	.+36     	; 0x97a <loop+0xa2>
		break;
		case UP_KEY:
		lcd.clear();
     956:	8c e8       	ldi	r24, 0x8C	; 140
     958:	93 e0       	ldi	r25, 0x03	; 3
     95a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].up;
     95e:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <_ZL4menu>
     962:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <_ZL4menu+0x1>
     966:	22 e1       	ldi	r18, 0x12	; 18
     968:	28 9f       	mul	r18, r24
     96a:	f0 01       	movw	r30, r0
     96c:	29 9f       	mul	r18, r25
     96e:	f0 0d       	add	r31, r0
     970:	11 24       	eor	r1, r1
     972:	e5 5e       	subi	r30, 0xE5	; 229
     974:	fd 4f       	sbci	r31, 0xFD	; 253
     976:	82 81       	ldd	r24, Z+2	; 0x02
     978:	93 81       	ldd	r25, Z+3	; 0x03
     97a:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <_ZL7newmenu+0x1>
     97e:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <_ZL7newmenu>
		break;
     982:	80 c0       	rjmp	.+256    	; 0xa84 <loop+0x1ac>
		case LEFT_KEY:
		lcd.clear();
     984:	8c e8       	ldi	r24, 0x8C	; 140
     986:	93 e0       	ldi	r25, 0x03	; 3
     988:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].left;
     98c:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <_ZL4menu>
     990:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <_ZL4menu+0x1>
     994:	22 e1       	ldi	r18, 0x12	; 18
     996:	28 9f       	mul	r18, r24
     998:	f0 01       	movw	r30, r0
     99a:	29 9f       	mul	r18, r25
     99c:	f0 0d       	add	r31, r0
     99e:	11 24       	eor	r1, r1
     9a0:	e5 5e       	subi	r30, 0xE5	; 229
     9a2:	fd 4f       	sbci	r31, 0xFD	; 253
     9a4:	84 81       	ldd	r24, Z+4	; 0x04
     9a6:	95 81       	ldd	r25, Z+5	; 0x05
     9a8:	e8 cf       	rjmp	.-48     	; 0x97a <loop+0xa2>
		break;
		case DOWN_KEY:
		lcd.clear();
     9aa:	8c e8       	ldi	r24, 0x8C	; 140
     9ac:	93 e0       	ldi	r25, 0x03	; 3
     9ae:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN7hd447805clearEv>
		newmenu = watchmenu[menu].down;
     9b2:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <_ZL4menu>
     9b6:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <_ZL4menu+0x1>
     9ba:	22 e1       	ldi	r18, 0x12	; 18
     9bc:	28 9f       	mul	r18, r24
     9be:	f0 01       	movw	r30, r0
     9c0:	29 9f       	mul	r18, r25
     9c2:	f0 0d       	add	r31, r0
     9c4:	11 24       	eor	r1, r1
     9c6:	e5 5e       	subi	r30, 0xE5	; 229
     9c8:	fd 4f       	sbci	r31, 0xFD	; 253
     9ca:	86 81       	ldd	r24, Z+6	; 0x06
     9cc:	97 81       	ldd	r25, Z+7	; 0x07
     9ce:	d5 cf       	rjmp	.-86     	; 0x97a <loop+0xa2>
		break;
		case RIGHT_KEY:
		lcd.clear();
     9d0:	8c e8       	ldi	r24, 0x8C	; 140
     9d2:	93 e0       	ldi	r25, 0x03	; 3
     9d4:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN7hd447805clearEv>
		if(watchmenu[menu].goright != NULL) {
     9d8:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <_ZL4menu>
     9dc:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <_ZL4menu+0x1>
     9e0:	22 e1       	ldi	r18, 0x12	; 18
     9e2:	28 9f       	mul	r18, r24
     9e4:	f0 01       	movw	r30, r0
     9e6:	29 9f       	mul	r18, r25
     9e8:	f0 0d       	add	r31, r0
     9ea:	11 24       	eor	r1, r1
     9ec:	e5 5e       	subi	r30, 0xE5	; 229
     9ee:	fd 4f       	sbci	r31, 0xFD	; 253
     9f0:	06 84       	ldd	r0, Z+14	; 0x0e
     9f2:	f7 85       	ldd	r31, Z+15	; 0x0f
     9f4:	e0 2d       	mov	r30, r0
     9f6:	30 97       	sbiw	r30, 0x00	; 0
     9f8:	09 f0       	breq	.+2      	; 0x9fc <loop+0x124>
			//! call go right function with new value
			watchmenu[menu].goright();
     9fa:	09 95       	icall
		}
		newmenu = watchmenu[menu].right;
     9fc:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <_ZL4menu>
     a00:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <_ZL4menu+0x1>
     a04:	22 e1       	ldi	r18, 0x12	; 18
     a06:	28 9f       	mul	r18, r24
     a08:	f0 01       	movw	r30, r0
     a0a:	29 9f       	mul	r18, r25
     a0c:	f0 0d       	add	r31, r0
     a0e:	11 24       	eor	r1, r1
     a10:	e5 5e       	subi	r30, 0xE5	; 229
     a12:	fd 4f       	sbci	r31, 0xFD	; 253
     a14:	80 85       	ldd	r24, Z+8	; 0x08
     a16:	91 85       	ldd	r25, Z+9	; 0x09
     a18:	b0 cf       	rjmp	.-160    	; 0x97a <loop+0xa2>
		break;
		case OK_KEY:
		lcd.clear();
     a1a:	8c e8       	ldi	r24, 0x8C	; 140
     a1c:	93 e0       	ldi	r25, 0x03	; 3
     a1e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN7hd447805clearEv>
		if(watchmenu[menu].positive != NULL) {
     a22:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <_ZL4menu>
     a26:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <_ZL4menu+0x1>
     a2a:	22 e1       	ldi	r18, 0x12	; 18
     a2c:	28 9f       	mul	r18, r24
     a2e:	f0 01       	movw	r30, r0
     a30:	29 9f       	mul	r18, r25
     a32:	f0 0d       	add	r31, r0
     a34:	11 24       	eor	r1, r1
     a36:	e5 5e       	subi	r30, 0xE5	; 229
     a38:	fd 4f       	sbci	r31, 0xFD	; 253
     a3a:	00 88       	ldd	r0, Z+16	; 0x10
     a3c:	f1 89       	ldd	r31, Z+17	; 0x11
     a3e:	e0 2d       	mov	r30, r0
     a40:	30 97       	sbiw	r30, 0x00	; 0
     a42:	09 f0       	breq	.+2      	; 0xa46 <loop+0x16e>
			//! call positive answer function with new value
			watchmenu[menu].positive();
     a44:	09 95       	icall
		}
		newmenu = watchmenu[menu].ok;
     a46:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <_ZL4menu>
     a4a:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <_ZL4menu+0x1>
     a4e:	22 e1       	ldi	r18, 0x12	; 18
     a50:	28 9f       	mul	r18, r24
     a52:	f0 01       	movw	r30, r0
     a54:	29 9f       	mul	r18, r25
     a56:	f0 0d       	add	r31, r0
     a58:	11 24       	eor	r1, r1
     a5a:	e5 5e       	subi	r30, 0xE5	; 229
     a5c:	fd 4f       	sbci	r31, 0xFD	; 253
     a5e:	82 85       	ldd	r24, Z+10	; 0x0a
     a60:	93 85       	ldd	r25, Z+11	; 0x0b
     a62:	8b cf       	rjmp	.-234    	; 0x97a <loop+0xa2>
		break;
		case BK_KEY:
		lcd.clear();
     a64:	8c e8       	ldi	r24, 0x8C	; 140
     a66:	93 e0       	ldi	r25, 0x03	; 3
     a68:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN7hd447805clearEv>
		lcd.noCursor();
     a6c:	8c e8       	ldi	r24, 0x8C	; 140
     a6e:	93 e0       	ldi	r25, 0x03	; 3
     a70:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <_ZN7hd447808noCursorEv>
		lcd.noBlink();
     a74:	8c e8       	ldi	r24, 0x8C	; 140
     a76:	93 e0       	ldi	r25, 0x03	; 3
     a78:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <_ZN7hd447807noBlinkEv>
		newmenu = 0;
     a7c:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <_ZL7newmenu+0x1>
     a80:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <_ZL7newmenu>
		break;
	}
	if(newmenu >= 0){
     a84:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <_ZL7newmenu>
     a88:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <_ZL7newmenu+0x1>
     a8c:	97 fd       	sbrc	r25, 7
     a8e:	21 c0       	rjmp	.+66     	; 0xad2 <loop+0x1fa>
		menu = newmenu;
     a90:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <_ZL4menu+0x1>
     a94:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <_ZL4menu>
		lcd.setCursor(0, 0);
     a98:	40 e0       	ldi	r20, 0x00	; 0
     a9a:	60 e0       	ldi	r22, 0x00	; 0
     a9c:	8c e8       	ldi	r24, 0x8C	; 140
     a9e:	93 e0       	ldi	r25, 0x03	; 3
     aa0:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <_ZN7hd447809setCursorEhh>
		lcd.print(ROM(watchmenu[menu].text1));
     aa4:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <_ZL4menu>
     aa8:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <_ZL4menu+0x1>
     aac:	22 e1       	ldi	r18, 0x12	; 18
     aae:	28 9f       	mul	r18, r24
     ab0:	f0 01       	movw	r30, r0
     ab2:	29 9f       	mul	r18, r25
     ab4:	f0 0d       	add	r31, r0
     ab6:	11 24       	eor	r1, r1
     ab8:	e5 5e       	subi	r30, 0xE5	; 229
     aba:	fd 4f       	sbci	r31, 0xFD	; 253
     abc:	60 81       	ld	r22, Z
     abe:	71 81       	ldd	r23, Z+1	; 0x01
     ac0:	84 e9       	ldi	r24, 0x94	; 148
     ac2:	92 e0       	ldi	r25, 0x02	; 2
     ac4:	0e 94 0b 20 	call	0x4016	; 0x4016 <strcpy_P>
     ac8:	bc 01       	movw	r22, r24
     aca:	8c e8       	ldi	r24, 0x8C	; 140
     acc:	93 e0       	ldi	r25, 0x03	; 3
     ace:	0c 94 09 13 	jmp	0x2612	; 0x2612 <_ZN5Print5printEPKc>
     ad2:	08 95       	ret

00000ad4 <_GLOBAL__sub_I_lcd>:
	}
	} //else Klammer
}
     ad4:	af 92       	push	r10
     ad6:	bf 92       	push	r11
     ad8:	cf 92       	push	r12
     ada:	df 92       	push	r13
     adc:	ef 92       	push	r14
     ade:	ff 92       	push	r15
     ae0:	0f 93       	push	r16
     ae2:	1f 93       	push	r17
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
// ====================

//	-- Automagic / auto-detect constructors --

// Auto find next instance and auto config pin mapping
hd44780_I2Cexp(){ _addr = 0; _expType = I2Cexp_UNKNOWN;}
     ae8:	8c e8       	ldi	r24, 0x8C	; 140
     aea:	93 e0       	ldi	r25, 0x03	; 3
     aec:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <_ZN7hd44780C1Ev>
     af0:	ec e8       	ldi	r30, 0x8C	; 140
     af2:	f3 e0       	ldi	r31, 0x03	; 3
     af4:	89 e0       	ldi	r24, 0x09	; 9
     af6:	92 e0       	ldi	r25, 0x02	; 2
     af8:	91 83       	std	Z+1, r25	; 0x01
     afa:	80 83       	st	Z, r24
     afc:	10 a2       	std	Z+32, r1	; 0x20
     afe:	11 a2       	std	Z+33, r1	; 0x21

const struct CITY_TIME_DIF CITIES [] {
	{"London", 0, "LON"},{"New-York", -5, "NEY"},{"Paris", 1, "PAR"},{ "Tokyo", 9, "TOK"},
	{"Hongkong", 8, "HNK"},{"Los Angeles", -8, "LAN"},{"Chicago", -6, "CHI"},{"Seoul", 9, "SEO"},
	{ "Bruessel",  1, "BRU"},{"Washington",  -5, "WAS"},{"Singapur", 8, "SIN"},{"Sydney", 11, "SYD"}
	};
     b00:	62 e7       	ldi	r22, 0x72	; 114
     b02:	71 e0       	ldi	r23, 0x01	; 1
     b04:	84 ee       	ldi	r24, 0xE4	; 228
     b06:	92 e0       	ldi	r25, 0x02	; 2
     b08:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN6StringC1EPKc>
     b0c:	c4 ee       	ldi	r28, 0xE4	; 228
     b0e:	d2 e0       	ldi	r29, 0x02	; 2
     b10:	1f 82       	std	Y+7, r1	; 0x07
     b12:	1e 82       	std	Y+6, r1	; 0x06
     b14:	69 e7       	ldi	r22, 0x79	; 121
     b16:	71 e0       	ldi	r23, 0x01	; 1
     b18:	8c ee       	ldi	r24, 0xEC	; 236
     b1a:	92 e0       	ldi	r25, 0x02	; 2
     b1c:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN6StringC1EPKc>
     b20:	6d e7       	ldi	r22, 0x7D	; 125
     b22:	71 e0       	ldi	r23, 0x01	; 1
     b24:	82 ef       	ldi	r24, 0xF2	; 242
     b26:	92 e0       	ldi	r25, 0x02	; 2
     b28:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN6StringC1EPKc>
     b2c:	8b ef       	ldi	r24, 0xFB	; 251
     b2e:	e8 2e       	mov	r14, r24
     b30:	ff 24       	eor	r15, r15
     b32:	fa 94       	dec	r15
     b34:	fd 8a       	std	Y+21, r15	; 0x15
     b36:	ec 8a       	std	Y+20, r14	; 0x14
     b38:	66 e8       	ldi	r22, 0x86	; 134
     b3a:	71 e0       	ldi	r23, 0x01	; 1
     b3c:	8a ef       	ldi	r24, 0xFA	; 250
     b3e:	92 e0       	ldi	r25, 0x02	; 2
     b40:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN6StringC1EPKc>
     b44:	6a e8       	ldi	r22, 0x8A	; 138
     b46:	71 e0       	ldi	r23, 0x01	; 1
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	93 e0       	ldi	r25, 0x03	; 3
     b4c:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN6StringC1EPKc>
     b50:	cc 24       	eor	r12, r12
     b52:	c3 94       	inc	r12
     b54:	d1 2c       	mov	r13, r1
     b56:	db a2       	std	Y+35, r13	; 0x23
     b58:	ca a2       	std	Y+34, r12	; 0x22
     b5a:	60 e9       	ldi	r22, 0x90	; 144
     b5c:	71 e0       	ldi	r23, 0x01	; 1
     b5e:	88 e0       	ldi	r24, 0x08	; 8
     b60:	93 e0       	ldi	r25, 0x03	; 3
     b62:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN6StringC1EPKc>
     b66:	64 e9       	ldi	r22, 0x94	; 148
     b68:	71 e0       	ldi	r23, 0x01	; 1
     b6a:	8e e0       	ldi	r24, 0x0E	; 14
     b6c:	93 e0       	ldi	r25, 0x03	; 3
     b6e:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN6StringC1EPKc>
     b72:	29 e0       	ldi	r18, 0x09	; 9
     b74:	a2 2e       	mov	r10, r18
     b76:	b1 2c       	mov	r11, r1
     b78:	b9 aa       	std	Y+49, r11	; 0x31
     b7a:	a8 aa       	std	Y+48, r10	; 0x30
     b7c:	6a e9       	ldi	r22, 0x9A	; 154
     b7e:	71 e0       	ldi	r23, 0x01	; 1
     b80:	86 e1       	ldi	r24, 0x16	; 22
     b82:	93 e0       	ldi	r25, 0x03	; 3
     b84:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN6StringC1EPKc>
     b88:	6e e9       	ldi	r22, 0x9E	; 158
     b8a:	71 e0       	ldi	r23, 0x01	; 1
     b8c:	8c e1       	ldi	r24, 0x1C	; 28
     b8e:	93 e0       	ldi	r25, 0x03	; 3
     b90:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN6StringC1EPKc>
     b94:	08 e0       	ldi	r16, 0x08	; 8
     b96:	10 e0       	ldi	r17, 0x00	; 0
     b98:	1f af       	std	Y+63, r17	; 0x3f
     b9a:	0e af       	std	Y+62, r16	; 0x3e
     b9c:	67 ea       	ldi	r22, 0xA7	; 167
     b9e:	71 e0       	ldi	r23, 0x01	; 1
     ba0:	84 e2       	ldi	r24, 0x24	; 36
     ba2:	93 e0       	ldi	r25, 0x03	; 3
     ba4:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN6StringC1EPKc>
     ba8:	6b ea       	ldi	r22, 0xAB	; 171
     baa:	71 e0       	ldi	r23, 0x01	; 1
     bac:	8a e2       	ldi	r24, 0x2A	; 42
     bae:	93 e0       	ldi	r25, 0x03	; 3
     bb0:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN6StringC1EPKc>
     bb4:	88 ef       	ldi	r24, 0xF8	; 248
     bb6:	9f ef       	ldi	r25, 0xFF	; 255
     bb8:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <_ZL6CITIES+0x4d>
     bbc:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <_ZL6CITIES+0x4c>
     bc0:	67 eb       	ldi	r22, 0xB7	; 183
     bc2:	71 e0       	ldi	r23, 0x01	; 1
     bc4:	82 e3       	ldi	r24, 0x32	; 50
     bc6:	93 e0       	ldi	r25, 0x03	; 3
     bc8:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN6StringC1EPKc>
     bcc:	6b eb       	ldi	r22, 0xBB	; 187
     bce:	71 e0       	ldi	r23, 0x01	; 1
     bd0:	88 e3       	ldi	r24, 0x38	; 56
     bd2:	93 e0       	ldi	r25, 0x03	; 3
     bd4:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN6StringC1EPKc>
     bd8:	8a ef       	ldi	r24, 0xFA	; 250
     bda:	9f ef       	ldi	r25, 0xFF	; 255
     bdc:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <_ZL6CITIES+0x5b>
     be0:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <_ZL6CITIES+0x5a>
     be4:	63 ec       	ldi	r22, 0xC3	; 195
     be6:	71 e0       	ldi	r23, 0x01	; 1
     be8:	80 e4       	ldi	r24, 0x40	; 64
     bea:	93 e0       	ldi	r25, 0x03	; 3
     bec:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN6StringC1EPKc>
     bf0:	67 ec       	ldi	r22, 0xC7	; 199
     bf2:	71 e0       	ldi	r23, 0x01	; 1
     bf4:	86 e4       	ldi	r24, 0x46	; 70
     bf6:	93 e0       	ldi	r25, 0x03	; 3
     bf8:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN6StringC1EPKc>
     bfc:	b0 92 4d 03 	sts	0x034D, r11	; 0x80034d <_ZL6CITIES+0x69>
     c00:	a0 92 4c 03 	sts	0x034C, r10	; 0x80034c <_ZL6CITIES+0x68>
     c04:	6d ec       	ldi	r22, 0xCD	; 205
     c06:	71 e0       	ldi	r23, 0x01	; 1
     c08:	8e e4       	ldi	r24, 0x4E	; 78
     c0a:	93 e0       	ldi	r25, 0x03	; 3
     c0c:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN6StringC1EPKc>
     c10:	61 ed       	ldi	r22, 0xD1	; 209
     c12:	71 e0       	ldi	r23, 0x01	; 1
     c14:	84 e5       	ldi	r24, 0x54	; 84
     c16:	93 e0       	ldi	r25, 0x03	; 3
     c18:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN6StringC1EPKc>
     c1c:	d0 92 5b 03 	sts	0x035B, r13	; 0x80035b <_ZL6CITIES+0x77>
     c20:	c0 92 5a 03 	sts	0x035A, r12	; 0x80035a <_ZL6CITIES+0x76>
     c24:	6a ed       	ldi	r22, 0xDA	; 218
     c26:	71 e0       	ldi	r23, 0x01	; 1
     c28:	8c e5       	ldi	r24, 0x5C	; 92
     c2a:	93 e0       	ldi	r25, 0x03	; 3
     c2c:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN6StringC1EPKc>
     c30:	6e ed       	ldi	r22, 0xDE	; 222
     c32:	71 e0       	ldi	r23, 0x01	; 1
     c34:	82 e6       	ldi	r24, 0x62	; 98
     c36:	93 e0       	ldi	r25, 0x03	; 3
     c38:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN6StringC1EPKc>
     c3c:	f0 92 69 03 	sts	0x0369, r15	; 0x800369 <_ZL6CITIES+0x85>
     c40:	e0 92 68 03 	sts	0x0368, r14	; 0x800368 <_ZL6CITIES+0x84>
     c44:	69 ee       	ldi	r22, 0xE9	; 233
     c46:	71 e0       	ldi	r23, 0x01	; 1
     c48:	8a e6       	ldi	r24, 0x6A	; 106
     c4a:	93 e0       	ldi	r25, 0x03	; 3
     c4c:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN6StringC1EPKc>
     c50:	6d ee       	ldi	r22, 0xED	; 237
     c52:	71 e0       	ldi	r23, 0x01	; 1
     c54:	80 e7       	ldi	r24, 0x70	; 112
     c56:	93 e0       	ldi	r25, 0x03	; 3
     c58:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN6StringC1EPKc>
     c5c:	10 93 77 03 	sts	0x0377, r17	; 0x800377 <_ZL6CITIES+0x93>
     c60:	00 93 76 03 	sts	0x0376, r16	; 0x800376 <_ZL6CITIES+0x92>
     c64:	66 ef       	ldi	r22, 0xF6	; 246
     c66:	71 e0       	ldi	r23, 0x01	; 1
     c68:	88 e7       	ldi	r24, 0x78	; 120
     c6a:	93 e0       	ldi	r25, 0x03	; 3
     c6c:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN6StringC1EPKc>
     c70:	6a ef       	ldi	r22, 0xFA	; 250
     c72:	71 e0       	ldi	r23, 0x01	; 1
     c74:	8e e7       	ldi	r24, 0x7E	; 126
     c76:	93 e0       	ldi	r25, 0x03	; 3
     c78:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN6StringC1EPKc>
     c7c:	8b e0       	ldi	r24, 0x0B	; 11
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <_ZL6CITIES+0xa1>
     c84:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <_ZL6CITIES+0xa0>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	72 e0       	ldi	r23, 0x02	; 2
     c8c:	86 e8       	ldi	r24, 0x86	; 134
     c8e:	93 e0       	ldi	r25, 0x03	; 3
     c90:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <_ZN6StringC1EPKc>
#endif

class dht
{
public:
    dht() { _disableIRQ = false; };
     c94:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <DHT+0xd>
	int hh_;
	int mm_;
	int ss_;
	int set_;
public:
	Zeit(int h, int m, int s){ hh_=h; mm_=m; ss_=s; set_ =0;};
     c98:	ee eb       	ldi	r30, 0xBE	; 190
     c9a:	f2 e0       	ldi	r31, 0x02	; 2
     c9c:	85 e1       	ldi	r24, 0x15	; 21
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	91 83       	std	Z+1, r25	; 0x01
     ca2:	80 83       	st	Z, r24
     ca4:	8f e1       	ldi	r24, 0x1F	; 31
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	93 83       	std	Z+3, r25	; 0x03
     caa:	82 83       	std	Z+2, r24	; 0x02
     cac:	15 82       	std	Z+5, r1	; 0x05
     cae:	14 82       	std	Z+4, r1	; 0x04
     cb0:	17 82       	std	Z+7, r1	; 0x07
     cb2:	16 82       	std	Z+6, r1	; 0x06
     cb4:	e6 eb       	ldi	r30, 0xB6	; 182
     cb6:	f2 e0       	ldi	r31, 0x02	; 2
     cb8:	2c e0       	ldi	r18, 0x0C	; 12
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	31 83       	std	Z+1, r19	; 0x01
     cbe:	20 83       	st	Z, r18
     cc0:	13 82       	std	Z+3, r1	; 0x03
     cc2:	12 82       	std	Z+2, r1	; 0x02
     cc4:	15 82       	std	Z+5, r1	; 0x05
     cc6:	14 82       	std	Z+4, r1	; 0x04
     cc8:	17 82       	std	Z+7, r1	; 0x07
     cca:	16 82       	std	Z+6, r1	; 0x06
     ccc:	ee ea       	ldi	r30, 0xAE	; 174
     cce:	f2 e0       	ldi	r31, 0x02	; 2
     cd0:	26 e1       	ldi	r18, 0x16	; 22
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	31 83       	std	Z+1, r19	; 0x01
     cd6:	20 83       	st	Z, r18
     cd8:	93 83       	std	Z+3, r25	; 0x03
     cda:	82 83       	std	Z+2, r24	; 0x02
     cdc:	15 82       	std	Z+5, r1	; 0x05
     cde:	14 82       	std	Z+4, r1	; 0x04
     ce0:	17 82       	std	Z+7, r1	; 0x07
     ce2:	16 82       	std	Z+6, r1	; 0x06
		menu = newmenu;
		lcd.setCursor(0, 0);
		lcd.print(ROM(watchmenu[menu].text1));
	}
	} //else Klammer
}
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	ff 90       	pop	r15
     cee:	ef 90       	pop	r14
     cf0:	df 90       	pop	r13
     cf2:	cf 90       	pop	r12
     cf4:	bf 90       	pop	r11
     cf6:	af 90       	pop	r10
     cf8:	08 95       	ret

00000cfa <_GLOBAL__sub_D_lcd>:
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	cc e8       	ldi	r28, 0x8C	; 140
     d00:	d3 e0       	ldi	r29, 0x03	; 3
	String name;
	int timediff;
	String initials;
};

const struct CITY_TIME_DIF CITIES [] {
     d02:	2e 97       	sbiw	r28, 0x0e	; 14


hd44780_I2Cexp lcd;

//Strukt um Städte und deren Zweitverschiebung zu GMT (London)
struct CITY_TIME_DIF {
     d04:	ce 01       	movw	r24, r28
     d06:	08 96       	adiw	r24, 0x08	; 8
     d08:	0e 94 ed 1a 	call	0x35da	; 0x35da <_ZN6StringD1Ev>
     d0c:	ce 01       	movw	r24, r28
     d0e:	0e 94 ed 1a 	call	0x35da	; 0x35da <_ZN6StringD1Ev>
	String name;
	int timediff;
	String initials;
};

const struct CITY_TIME_DIF CITIES [] {
     d12:	82 e0       	ldi	r24, 0x02	; 2
     d14:	c4 3e       	cpi	r28, 0xE4	; 228
     d16:	d8 07       	cpc	r29, r24
     d18:	a1 f7       	brne	.-24     	; 0xd02 <_GLOBAL__sub_D_lcd+0x8>
		menu = newmenu;
		lcd.setCursor(0, 0);
		lcd.print(ROM(watchmenu[menu].text1));
	}
	} //else Klammer
}
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	08 95       	ret

00000d20 <_ZN14hd44780_I2Cexp14iosetBacklightEh>:
}

// iosetBacklight()  - set backlight brightness
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	fc 01       	movw	r30, r24
{
	if(!_bl) // backlight control?
     d26:	81 a5       	ldd	r24, Z+41	; 0x29
     d28:	88 23       	and	r24, r24
     d2a:	71 f1       	breq	.+92     	; 0xd88 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x68>
     d2c:	92 a5       	ldd	r25, Z+42	; 0x2a
		return(hd44780::RV_ENOTSUP); // not backlight control support

	// dimvalue 0 is backlight off any other dimvalue is backlight on
	// configure backlight state mask according to active level
	if(((dimvalue) && (_blLevel == HIGH)) || 
     d2e:	66 23       	and	r22, r22
     d30:	19 f0       	breq	.+6      	; 0xd38 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x18>
     d32:	91 30       	cpi	r25, 0x01	; 1
     d34:	29 f4       	brne	.+10     	; 0xd40 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x1c>
			((dimvalue == 0) && (_blLevel == LOW)))
     d38:	91 11       	cpse	r25, r1
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x20>
	{
		_blCurState = _bl;
     d3c:	83 a7       	std	Z+43, r24	; 0x2b
     d3e:	01 c0       	rjmp	.+2      	; 0xd42 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x22>
	}
	else 
	{
		_blCurState = 0;
     d40:	13 a6       	std	Z+43, r1	; 0x2b
     d42:	ef 01       	movw	r28, r30
	}
	Wire.beginTransmission(_addr);
     d44:	60 a1       	ldd	r22, Z+32	; 0x20
     d46:	87 e2       	ldi	r24, 0x27	; 39
     d48:	94 e0       	ldi	r25, 0x04	; 4
     d4a:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
     d4e:	89 a1       	ldd	r24, Y+33	; 0x21
     d50:	82 30       	cpi	r24, 0x02	; 2
     d52:	31 f4       	brne	.+12     	; 0xd60 <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x40>
	{
		Wire.write(9); // point to GPIO
     d54:	69 e0       	ldi	r22, 0x09	; 9
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	87 e2       	ldi	r24, 0x27	; 39
     d5a:	94 e0       	ldi	r25, 0x04	; 4
     d5c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN7TwoWire5writeEi>
	}
	Wire.write( _blCurState );
     d60:	6b a5       	ldd	r22, Y+43	; 0x2b
     d62:	87 e2       	ldi	r24, 0x27	; 39
     d64:	94 e0       	ldi	r25, 0x04	; 4
     d66:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     d6a:	87 e2       	ldi	r24, 0x27	; 39
     d6c:	94 e0       	ldi	r25, 0x04	; 4
     d6e:	0e 94 0e 11 	call	0x221c	; 0x221c <_ZN7TwoWire15endTransmissionEv>
     d72:	21 e0       	ldi	r18, 0x01	; 1
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	81 11       	cpse	r24, r1
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x5e>
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	88 27       	eor	r24, r24
     d80:	99 27       	eor	r25, r25
     d82:	82 1b       	sub	r24, r18
     d84:	93 0b       	sbc	r25, r19
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <_ZN14hd44780_I2Cexp14iosetBacklightEh+0x6c>
// Since dimming is not supported, any non zero value
// will turn on the backlight.
int iosetBacklight(uint8_t dimvalue) 
{
	if(!_bl) // backlight control?
		return(hd44780::RV_ENOTSUP); // not backlight control support
     d88:	8d ef       	ldi	r24, 0xFD	; 253
     d8a:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write( _blCurState );
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR); // all is good
}
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	08 95       	ret

00000d92 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>:
	return(0);
}


// write4bits - send a nibble to the LCD through i/o expander port
void write4bits(uint8_t value, hd44780::iotype type ) 
     d92:	cf 93       	push	r28
     d94:	fc 01       	movw	r30, r24
{
uint8_t gpioValue =  _blCurState;
     d96:	c3 a5       	ldd	r28, Z+43	; 0x2b
   
	// convert the value to an i/o expander port value
	// based on pin mappings
	if(value & (1 << 0))
     d98:	60 ff       	sbrs	r22, 0
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0xe>
		gpioValue |= _d4;
     d9c:	85 a1       	ldd	r24, Z+37	; 0x25
     d9e:	c8 2b       	or	r28, r24

	if(value & (1 << 1))
     da0:	61 ff       	sbrs	r22, 1
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x16>
		gpioValue |= _d5;
     da4:	86 a1       	ldd	r24, Z+38	; 0x26
     da6:	c8 2b       	or	r28, r24

	if(value & (1 << 2))
     da8:	62 ff       	sbrs	r22, 2
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x1e>
		gpioValue |= _d6;
     dac:	87 a1       	ldd	r24, Z+39	; 0x27
     dae:	c8 2b       	or	r28, r24

	if(value & (1 << 3))
     db0:	63 ff       	sbrs	r22, 3
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x26>
		gpioValue |= _d7;
     db4:	80 a5       	ldd	r24, Z+40	; 0x28
     db6:	c8 2b       	or	r28, r24


	if(type == hd44780::HD44780_IOdata) 
     db8:	41 30       	cpi	r20, 0x01	; 1
     dba:	11 f4       	brne	.+4      	; 0xdc0 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE+0x2e>
	{
		gpioValue |= _rs; // set RS high to send to data reg
     dbc:	82 a1       	ldd	r24, Z+34	; 0x22
     dbe:	c8 2b       	or	r28, r24
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
     dc0:	64 a1       	ldd	r22, Z+36	; 0x24
     dc2:	6c 2b       	or	r22, r28
     dc4:	70 e0       	ldi	r23, 0x00	; 0
     dc6:	87 e2       	ldi	r24, 0x27	; 39
     dc8:	94 e0       	ldi	r25, 0x04	; 4
     dca:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN7TwoWire5writeEi>
	Wire.write(gpioValue);		// with E LOW
     dce:	6c 2f       	mov	r22, r28
     dd0:	87 e2       	ldi	r24, 0x27	; 39
     dd2:	94 e0       	ldi	r25, 0x04	; 4
}
     dd4:	cf 91       	pop	r28
	}
   
	// Cheat here by raising E at the same time as setting control lines
	// This violates the spec but seems to work realiably.
	Wire.write(gpioValue |_en);	// with E HIGH
	Wire.write(gpioValue);		// with E LOW
     dd6:	0c 94 39 10 	jmp	0x2072	; 0x2072 <_ZN7TwoWire5writeEh>

00000dda <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh>:
	return(rval);
}

// iowrite(type, value) - send either command or data byte to lcd
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
     dda:	8f 92       	push	r8
     ddc:	9f 92       	push	r9
     dde:	af 92       	push	r10
     de0:	bf 92       	push	r11
     de2:	cf 92       	push	r12
     de4:	df 92       	push	r13
     de6:	ef 92       	push	r14
     de8:	ff 92       	push	r15
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	ec 01       	movw	r28, r24
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
     df4:	88 a1       	ldd	r24, Y+32	; 0x20
     df6:	88 23       	and	r24, r24
     df8:	09 f4       	brne	.+2      	; 0xdfc <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x22>
     dfa:	50 c0       	rjmp	.+160    	; 0xe9c <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
     dfc:	89 a1       	ldd	r24, Y+33	; 0x21
     dfe:	88 23       	and	r24, r24
     e00:	09 f4       	brne	.+2      	; 0xe04 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x2a>
     e02:	4c c0       	rjmp	.+152    	; 0xe9c <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc2>
     e04:	14 2f       	mov	r17, r20
     e06:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
     e08:	8c 8c       	ldd	r8, Y+28	; 0x1c
     e0a:	9d 8c       	ldd	r9, Y+29	; 0x1d
     e0c:	ae 8c       	ldd	r10, Y+30	; 0x1e
     e0e:	bf 8c       	ldd	r11, Y+31	; 0x1f
     e10:	c8 8c       	ldd	r12, Y+24	; 0x18
     e12:	d9 8c       	ldd	r13, Y+25	; 0x19
     e14:	ea 8c       	ldd	r14, Y+26	; 0x1a
     e16:	fb 8c       	ldd	r15, Y+27	; 0x1b
     e18:	8d e2       	ldi	r24, 0x2D	; 45
     e1a:	c8 1a       	sub	r12, r24
     e1c:	d1 08       	sbc	r13, r1
     e1e:	e1 08       	sbc	r14, r1
     e20:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
     e22:	0e 94 29 19 	call	0x3252	; 0x3252 <micros>
     e26:	dc 01       	movw	r26, r24
     e28:	cb 01       	movw	r24, r22
     e2a:	8c 19       	sub	r24, r12
     e2c:	9d 09       	sbc	r25, r13
     e2e:	ae 09       	sbc	r26, r14
     e30:	bf 09       	sbc	r27, r15
     e32:	88 15       	cp	r24, r8
     e34:	99 05       	cpc	r25, r9
     e36:	aa 05       	cpc	r26, r10
     e38:	bb 05       	cpc	r27, r11
     e3a:	98 f3       	brcs	.-26     	; 0xe22 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x48>
	 */

	waitReady(-45);
   
	// grab i2c bus
	Wire.beginTransmission(_addr);
     e3c:	68 a1       	ldd	r22, Y+32	; 0x20
     e3e:	87 e2       	ldi	r24, 0x27	; 39
     e40:	94 e0       	ldi	r25, 0x04	; 4
     e42:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire17beginTransmissionEh>
	if(_expType == I2Cexp_MCP23008)
     e46:	89 a1       	ldd	r24, Y+33	; 0x21
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	31 f4       	brne	.+12     	; 0xe58 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x7e>
	{
		Wire.write(9); // point to GPIO
     e4c:	69 e0       	ldi	r22, 0x09	; 9
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	87 e2       	ldi	r24, 0x27	; 39
     e52:	94 e0       	ldi	r25, 0x04	; 4
     e54:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN7TwoWire5writeEi>
	}
	// send both nibbles in same i2c connection
	write4bits( (value >> 4), type );  // send upper nibble
     e58:	61 2f       	mov	r22, r17
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	84 e0       	ldi	r24, 0x04	; 4
     e5e:	75 95       	asr	r23
     e60:	67 95       	ror	r22
     e62:	8a 95       	dec	r24
     e64:	e1 f7       	brne	.-8      	; 0xe5e <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0x84>
     e66:	40 2f       	mov	r20, r16
     e68:	ce 01       	movw	r24, r28
     e6a:	0e 94 c9 06 	call	0xd92	; 0xd92 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	 * are used to reliably get the LCD and host in nibble sync
	 * with each other and to get the LCD into 4 bit mode.
	 * When sending a "4 bit command" only the upper nibble of
	 * of the 8 bit byte will presented on LCD signals D4-D7.
	 */
	if(type != hd44780::HD44780_IOcmd4bit)
     e6e:	02 30       	cpi	r16, 0x02	; 2
     e70:	31 f0       	breq	.+12     	; 0xe7e <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xa4>
	{
		write4bits( (value & 0x0F), type); // lower nibble, if not 4bit cmd
     e72:	61 2f       	mov	r22, r17
     e74:	6f 70       	andi	r22, 0x0F	; 15
     e76:	40 2f       	mov	r20, r16
     e78:	ce 01       	movw	r24, r28
     e7a:	0e 94 c9 06 	call	0xd92	; 0xd92 <_ZN14hd44780_I2Cexp10write4bitsEhN7hd447806iotypeE>
	}
	if(Wire.endTransmission())
     e7e:	87 e2       	ldi	r24, 0x27	; 39
     e80:	94 e0       	ldi	r25, 0x04	; 4
     e82:	0e 94 0e 11 	call	0x221c	; 0x221c <_ZN7TwoWire15endTransmissionEv>
     e86:	21 e0       	ldi	r18, 0x01	; 1
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	81 11       	cpse	r24, r1
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xb8>
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	88 27       	eor	r24, r24
     e94:	99 27       	eor	r25, r25
     e96:	82 1b       	sub	r24, r18
     e98:	93 0b       	sbc	r25, r19
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <_ZN14hd44780_I2Cexp7iowriteEN7hd447806iotypeEh+0xc6>
// returns zero on success, non zero on failure
int iowrite(hd44780::iotype type, uint8_t value) 
{
	// If no address or expander type is unknown, then drop data
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
     e9c:	8c ef       	ldi	r24, 0xFC	; 252
     e9e:	9f ef       	ldi	r25, 0xFF	; 255
	}
	if(Wire.endTransmission())
		return(hd44780::RV_EIO);

	return(hd44780::RV_ENOERR);
}
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	1f 91       	pop	r17
     ea6:	0f 91       	pop	r16
     ea8:	ff 90       	pop	r15
     eaa:	ef 90       	pop	r14
     eac:	df 90       	pop	r13
     eae:	cf 90       	pop	r12
     eb0:	bf 90       	pop	r11
     eb2:	af 90       	pop	r10
     eb4:	9f 90       	pop	r9
     eb6:	8f 90       	pop	r8
     eb8:	08 95       	ret

00000eba <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE>:
// ioread(type) - read a byte from LCD DDRAM
//
// returns:
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
     eba:	8f 92       	push	r8
     ebc:	9f 92       	push	r9
     ebe:	af 92       	push	r10
     ec0:	bf 92       	push	r11
     ec2:	cf 92       	push	r12
     ec4:	df 92       	push	r13
     ec6:	ef 92       	push	r14
     ec8:	ff 92       	push	r15
     eca:	0f 93       	push	r16
     ecc:	1f 93       	push	r17
     ece:	cf 93       	push	r28
     ed0:	df 93       	push	r29
     ed2:	ec 01       	movw	r28, r24
{
uint8_t gpioValue =  _blCurState;
     ed4:	1b a5       	ldd	r17, Y+43	; 0x2b
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
     ed6:	88 a1       	ldd	r24, Y+32	; 0x20
     ed8:	88 23       	and	r24, r24
     eda:	09 f4       	brne	.+2      	; 0xede <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x24>
     edc:	f6 c0       	rjmp	.+492    	; 0x10ca <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
     ede:	89 a1       	ldd	r24, Y+33	; 0x21
     ee0:	88 23       	and	r24, r24
     ee2:	09 f4       	brne	.+2      	; 0xee6 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x2c>
     ee4:	f2 c0       	rjmp	.+484    	; 0x10ca <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x210>
		return(hd44780::RV_ENXIO);

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
     ee6:	82 30       	cpi	r24, 0x02	; 2
     ee8:	09 f4       	brne	.+2      	; 0xeec <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x32>
     eea:	f1 c0       	rjmp	.+482    	; 0x10ce <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
	{
		return(hd44780::RV_ENOTSUP);
	}

	// check if reads supported
	if(!_rw)
     eec:	8b a1       	ldd	r24, Y+35	; 0x23
     eee:	88 23       	and	r24, r24
     ef0:	09 f4       	brne	.+2      	; 0xef4 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x3a>
     ef2:	ed c0       	rjmp	.+474    	; 0x10ce <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x214>
     ef4:	06 2f       	mov	r16, r22
	uint8_t _cols;
	uint8_t _rows;

	// wait for lcd to be ready
	inline void waitReady() {_waitReady((_startTime), _execTime);}
	inline void waitReady(int32_t offsetUs) {_waitReady((_startTime+offsetUs), _execTime);}
     ef6:	8c 8c       	ldd	r8, Y+28	; 0x1c
     ef8:	9d 8c       	ldd	r9, Y+29	; 0x1d
     efa:	ae 8c       	ldd	r10, Y+30	; 0x1e
     efc:	bf 8c       	ldd	r11, Y+31	; 0x1f
     efe:	c8 8c       	ldd	r12, Y+24	; 0x18
     f00:	d9 8c       	ldd	r13, Y+25	; 0x19
     f02:	ea 8c       	ldd	r14, Y+26	; 0x1a
     f04:	fb 8c       	ldd	r15, Y+27	; 0x1b
     f06:	8d e2       	ldi	r24, 0x2D	; 45
     f08:	c8 1a       	sub	r12, r24
     f0a:	d1 08       	sbc	r13, r1
     f0c:	e1 08       	sbc	r14, r1
     f0e:	f1 08       	sbc	r15, r1

	inline void _waitReady(uint32_t _stime, uint32_t _etime)
		{while(( ((uint32_t)micros()) - _stime) < _etime){}}
     f10:	0e 94 29 19 	call	0x3252	; 0x3252 <micros>
     f14:	dc 01       	movw	r26, r24
     f16:	cb 01       	movw	r24, r22
     f18:	8c 19       	sub	r24, r12
     f1a:	9d 09       	sbc	r25, r13
     f1c:	ae 09       	sbc	r26, r14
     f1e:	bf 09       	sbc	r27, r15
     f20:	88 15       	cp	r24, r8
     f22:	99 05       	cpc	r25, r9
     f24:	aa 05       	cpc	r26, r10
     f26:	bb 05       	cpc	r27, r11
     f28:	98 f3       	brcs	.-26     	; 0xf10 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x56>
     f2a:	8d a1       	ldd	r24, Y+37	; 0x25
     f2c:	18 2b       	or	r17, r24
     f2e:	8e a1       	ldd	r24, Y+38	; 0x26
     f30:	18 2b       	or	r17, r24
     f32:	8f a1       	ldd	r24, Y+39	; 0x27
     f34:	18 2b       	or	r17, r24
   
	// put all the expander LCD data pins into input mode.
	// PCF8574 psuedo inputs use pullups so setting them to 1
	// makes them suitible for inputs.

	gpioValue |= _d4|_d5|_d6|_d7;
     f36:	88 a5       	ldd	r24, Y+40	; 0x28
     f38:	18 2b       	or	r17, r24

	// set RS based on type of read (data or status/cmd)
	if(type == hd44780::HD44780_IOdata) 
     f3a:	01 30       	cpi	r16, 0x01	; 1
     f3c:	11 f4       	brne	.+4      	; 0xf42 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x88>
	{
		gpioValue |= _rs; // RS high to read data reg
     f3e:	8a a1       	ldd	r24, Y+34	; 0x22
     f40:	18 2b       	or	r17, r24
	}

	gpioValue |= _rw; // r/w high for reading
     f42:	8b a1       	ldd	r24, Y+35	; 0x23
     f44:	18 2b       	or	r17, r24

	// write all the bits to the expander port
	
	Wire.beginTransmission(_addr);
     f46:	68 a1       	ldd	r22, Y+32	; 0x20
     f48:	87 e2       	ldi	r24, 0x27	; 39
     f4a:	94 e0       	ldi	r25, 0x04	; 4
     f4c:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue);		// d4-d7 are inputs, RS, r/w high, E LOW
     f50:	61 2f       	mov	r22, r17
     f52:	87 e2       	ldi	r24, 0x27	; 39
     f54:	94 e0       	ldi	r25, 0x04	; 4
     f56:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     f5a:	87 e2       	ldi	r24, 0x27	; 39
     f5c:	94 e0       	ldi	r25, 0x04	; 4
     f5e:	0e 94 0e 11 	call	0x221c	; 0x221c <_ZN7TwoWire15endTransmissionEv>
     f62:	88 23       	and	r24, r24
     f64:	19 f0       	breq	.+6      	; 0xf6c <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xb2>
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
int iodata;
int rval = hd44780::RV_EIO;
     f66:	0f ef       	ldi	r16, 0xFF	; 255
     f68:	1f ef       	ldi	r17, 0xFF	; 255
     f6a:	9d c0       	rjmp	.+314    	; 0x10a6 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ec>
	if(Wire.endTransmission())
		goto returnStatus;


	// raise E to read the data.
	Wire.beginTransmission(_addr);
     f6c:	68 a1       	ldd	r22, Y+32	; 0x20
     f6e:	87 e2       	ldi	r24, 0x27	; 39
     f70:	94 e0       	ldi	r25, 0x04	; 4
     f72:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raises E 
     f76:	6c a1       	ldd	r22, Y+36	; 0x24
     f78:	61 2b       	or	r22, r17
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	87 e2       	ldi	r24, 0x27	; 39
     f7e:	94 e0       	ldi	r25, 0x04	; 4
     f80:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
     f84:	87 e2       	ldi	r24, 0x27	; 39
     f86:	94 e0       	ldi	r25, 0x04	; 4
     f88:	0e 94 0e 11 	call	0x221c	; 0x221c <_ZN7TwoWire15endTransmissionEv>
     f8c:	81 11       	cpse	r24, r1
     f8e:	eb cf       	rjmp	.-42     	; 0xf66 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// read the expander port to get the upper nibble of the byte
	Wire.requestFrom((int)_addr, 1);
     f90:	68 a1       	ldd	r22, Y+32	; 0x20
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	41 e0       	ldi	r20, 0x01	; 1
     f96:	50 e0       	ldi	r21, 0x00	; 0
     f98:	87 e2       	ldi	r24, 0x27	; 39
     f9a:	94 e0       	ldi	r25, 0x04	; 4
     f9c:	0e 94 0b 11 	call	0x2216	; 0x2216 <_ZN7TwoWire11requestFromEii>
	iodata = Wire.read();
     fa0:	87 e2       	ldi	r24, 0x27	; 39
     fa2:	94 e0       	ldi	r25, 0x04	; 4
     fa4:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <_ZN7TwoWire4readEv>
     fa8:	7c 01       	movw	r14, r24
	if(iodata < 0) // did we not receive a byte?
     faa:	97 fd       	sbrc	r25, 7
     fac:	dc cf       	rjmp	.-72     	; 0xf66 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
     fae:	68 a1       	ldd	r22, Y+32	; 0x20
     fb0:	87 e2       	ldi	r24, 0x27	; 39
     fb2:	94 e0       	ldi	r25, 0x04	; 4
     fb4:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
     fb8:	61 2f       	mov	r22, r17
     fba:	87 e2       	ldi	r24, 0x27	; 39
     fbc:	94 e0       	ldi	r25, 0x04	; 4
     fbe:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
     fc2:	87 e2       	ldi	r24, 0x27	; 39
     fc4:	94 e0       	ldi	r25, 0x04	; 4
     fc6:	0e 94 0e 11 	call	0x221c	; 0x221c <_ZN7TwoWire15endTransmissionEv>
     fca:	81 11       	cpse	r24, r1
     fcc:	cc cf       	rjmp	.-104    	; 0xf66 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
     fce:	8d a1       	ldd	r24, Y+37	; 0x25
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	8e 21       	and	r24, r14
     fd4:	9f 21       	and	r25, r15
     fd6:	89 2b       	or	r24, r25
     fd8:	11 f4       	brne	.+4      	; 0xfde <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x124>
// 	success:  8 bit value read
// 	failure: negative value: error or read not supported
int ioread(hd44780::iotype type) 
{
uint8_t gpioValue =  _blCurState;
uint8_t data = 0;
     fda:	00 e0       	ldi	r16, 0x00	; 0
     fdc:	01 c0       	rjmp	.+2      	; 0xfe0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x126>
	if(Wire.endTransmission())
		goto returnStatus;

	// map i/o expander port bits into upper nibble of byte
	if(iodata & _d4)
		data |= (1 << 4);
     fde:	00 e1       	ldi	r16, 0x10	; 16

	if(iodata & _d5)
     fe0:	8e a1       	ldd	r24, Y+38	; 0x26
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	8e 21       	and	r24, r14
     fe6:	9f 21       	and	r25, r15
     fe8:	89 2b       	or	r24, r25
     fea:	09 f0       	breq	.+2      	; 0xfee <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x134>
		data |= (1 << 5);
     fec:	00 62       	ori	r16, 0x20	; 32

	if(iodata & _d6)
     fee:	8f a1       	ldd	r24, Y+39	; 0x27
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	8e 21       	and	r24, r14
     ff4:	9f 21       	and	r25, r15
     ff6:	89 2b       	or	r24, r25
     ff8:	09 f0       	breq	.+2      	; 0xffc <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x142>
		data |= (1 << 6);
     ffa:	00 64       	ori	r16, 0x40	; 64

	if(iodata & _d7)
     ffc:	88 a5       	ldd	r24, Y+40	; 0x28
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	e8 22       	and	r14, r24
    1002:	f9 22       	and	r15, r25
    1004:	ef 28       	or	r14, r15
    1006:	09 f0       	breq	.+2      	; 0x100a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x150>
		data |= (1 << 7);
    1008:	00 68       	ori	r16, 0x80	; 128
	
	Wire.beginTransmission(_addr);
    100a:	68 a1       	ldd	r22, Y+32	; 0x20
    100c:	87 e2       	ldi	r24, 0x27	; 39
    100e:	94 e0       	ldi	r25, 0x04	; 4
    1010:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue | _en); // Raise E to read next nibble
    1014:	6c a1       	ldd	r22, Y+36	; 0x24
    1016:	61 2b       	or	r22, r17
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	87 e2       	ldi	r24, 0x27	; 39
    101c:	94 e0       	ldi	r25, 0x04	; 4
    101e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN7TwoWire5writeEi>
	if(Wire.endTransmission())
    1022:	87 e2       	ldi	r24, 0x27	; 39
    1024:	94 e0       	ldi	r25, 0x04	; 4
    1026:	0e 94 0e 11 	call	0x221c	; 0x221c <_ZN7TwoWire15endTransmissionEv>
    102a:	81 11       	cpse	r24, r1
    102c:	9c cf       	rjmp	.-200    	; 0xf66 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>

	// read the expander port to get the lower nibble of the byte
	// We can't look at the return value from requestFrom() on the TineyWireM
	// library as it doesn't work like it is supposed to.
	// So we look at the return status from read() instead.
	Wire.requestFrom((int)_addr, 1);
    102e:	68 a1       	ldd	r22, Y+32	; 0x20
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	41 e0       	ldi	r20, 0x01	; 1
    1034:	50 e0       	ldi	r21, 0x00	; 0
    1036:	87 e2       	ldi	r24, 0x27	; 39
    1038:	94 e0       	ldi	r25, 0x04	; 4
    103a:	0e 94 0b 11 	call	0x2216	; 0x2216 <_ZN7TwoWire11requestFromEii>

	iodata = Wire.read();
    103e:	87 e2       	ldi	r24, 0x27	; 39
    1040:	94 e0       	ldi	r25, 0x04	; 4
    1042:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <_ZN7TwoWire4readEv>
    1046:	7c 01       	movw	r14, r24

	if(iodata < 0) // did we not receive a byte?
    1048:	97 fd       	sbrc	r25, 7
    104a:	8d cf       	rjmp	.-230    	; 0xf66 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	Wire.beginTransmission(_addr);
    104c:	68 a1       	ldd	r22, Y+32	; 0x20
    104e:	87 e2       	ldi	r24, 0x27	; 39
    1050:	94 e0       	ldi	r25, 0x04	; 4
    1052:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(gpioValue); // lower E after reading nibble
    1056:	61 2f       	mov	r22, r17
    1058:	87 e2       	ldi	r24, 0x27	; 39
    105a:	94 e0       	ldi	r25, 0x04	; 4
    105c:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    1060:	87 e2       	ldi	r24, 0x27	; 39
    1062:	94 e0       	ldi	r25, 0x04	; 4
    1064:	0e 94 0e 11 	call	0x221c	; 0x221c <_ZN7TwoWire15endTransmissionEv>
    1068:	81 11       	cpse	r24, r1
    106a:	7d cf       	rjmp	.-262    	; 0xf66 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0xac>
		goto returnStatus;

	// map i/o expander port bits into lower nibble of byte
	if(iodata & _d4)
    106c:	8d a1       	ldd	r24, Y+37	; 0x25
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	8e 21       	and	r24, r14
    1072:	9f 21       	and	r25, r15
    1074:	89 2b       	or	r24, r25
    1076:	09 f0       	breq	.+2      	; 0x107a <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1c0>
		data |= (1 << 0);
    1078:	01 60       	ori	r16, 0x01	; 1

	if(iodata & _d5)
    107a:	8e a1       	ldd	r24, Y+38	; 0x26
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	8e 21       	and	r24, r14
    1080:	9f 21       	and	r25, r15
    1082:	89 2b       	or	r24, r25
    1084:	09 f0       	breq	.+2      	; 0x1088 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ce>
		data |= (1 << 1);
    1086:	02 60       	ori	r16, 0x02	; 2

	if(iodata & _d6)
    1088:	8f a1       	ldd	r24, Y+39	; 0x27
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	8e 21       	and	r24, r14
    108e:	9f 21       	and	r25, r15
    1090:	89 2b       	or	r24, r25
    1092:	09 f0       	breq	.+2      	; 0x1096 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1dc>
		data |= (1 << 2);
    1094:	04 60       	ori	r16, 0x04	; 4

	if(iodata & _d7)
    1096:	88 a5       	ldd	r24, Y+40	; 0x28
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	e8 22       	and	r14, r24
    109c:	f9 22       	and	r15, r25
    109e:	ef 28       	or	r14, r15
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x1ea>
		data |= (1 << 3);
    10a2:	08 60       	ori	r16, 0x08	; 8

	rval = data;
    10a4:	10 e0       	ldi	r17, 0x00	; 0

returnStatus:

	// try to put gpio port back to all outputs state with WR signal low for writes
	Wire.beginTransmission(_addr);
    10a6:	68 a1       	ldd	r22, Y+32	; 0x20
    10a8:	87 e2       	ldi	r24, 0x27	; 39
    10aa:	94 e0       	ldi	r25, 0x04	; 4
    10ac:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(_blCurState);		// with E LOW
    10b0:	6b a5       	ldd	r22, Y+43	; 0x2b
    10b2:	87 e2       	ldi	r24, 0x27	; 39
    10b4:	94 e0       	ldi	r25, 0x04	; 4
    10b6:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN7TwoWire5writeEh>
	if(Wire.endTransmission())
    10ba:	87 e2       	ldi	r24, 0x27	; 39
    10bc:	94 e0       	ldi	r25, 0x04	; 4
    10be:	0e 94 0e 11 	call	0x221c	; 0x221c <_ZN7TwoWire15endTransmissionEv>
    10c2:	88 23       	and	r24, r24
    10c4:	39 f0       	breq	.+14     	; 0x10d4 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21a>
		rval = hd44780::RV_EIO;
    10c6:	8f ef       	ldi	r24, 0xFF	; 255
    10c8:	03 c0       	rjmp	.+6      	; 0x10d0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>
int iodata;
int rval = hd44780::RV_EIO;

	// If no address or expander type is unknown, then abort read w/error
	if(!_addr || _expType == I2Cexp_UNKNOWN)
		return(hd44780::RV_ENXIO);
    10ca:	8c ef       	ldi	r24, 0xFC	; 252
    10cc:	01 c0       	rjmp	.+2      	; 0x10d0 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x216>

	// reads for MCP23008 not yet supported
	if(_expType == I2Cexp_MCP23008)
	{
		return(hd44780::RV_ENOTSUP);
    10ce:	8d ef       	ldi	r24, 0xFD	; 253
    10d0:	9f ef       	ldi	r25, 0xFF	; 255
    10d2:	01 c0       	rjmp	.+2      	; 0x10d6 <_ZN14hd44780_I2Cexp6ioreadEN7hd447806iotypeE+0x21c>
    10d4:	c8 01       	movw	r24, r16
	Wire.write(_blCurState);		// with E LOW
	if(Wire.endTransmission())
		rval = hd44780::RV_EIO;

	return(rval);
}
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	1f 91       	pop	r17
    10dc:	0f 91       	pop	r16
    10de:	ff 90       	pop	r15
    10e0:	ef 90       	pop	r14
    10e2:	df 90       	pop	r13
    10e4:	cf 90       	pop	r12
    10e6:	bf 90       	pop	r11
    10e8:	af 90       	pop	r10
    10ea:	9f 90       	pop	r9
    10ec:	8f 90       	pop	r8
    10ee:	08 95       	ret

000010f0 <_ZN14hd44780_I2Cexp11autocfg8574Ev>:
 * a new resistor to  connect to the base of the transistor.
 * 
 * As a result the SYDZ backpack cannot use autoconfiguration.
 */

int autocfg8574()
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	ec 01       	movw	r28, r24
uint8_t data, data2;
uint8_t rs, rw, en, d4, d5, d6, d7, bl, blLevel;

	// First put a 0xff in the output port

	Wire.beginTransmission(_addr);
    10fa:	68 a1       	ldd	r22, Y+32	; 0x20
    10fc:	87 e2       	ldi	r24, 0x27	; 39
    10fe:	94 e0       	ldi	r25, 0x04	; 4
    1100:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0xff);
    1104:	6f ef       	ldi	r22, 0xFF	; 255
    1106:	87 e2       	ldi	r24, 0x27	; 39
    1108:	94 e0       	ldi	r25, 0x04	; 4
    110a:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    110e:	87 e2       	ldi	r24, 0x27	; 39
    1110:	94 e0       	ldi	r25, 0x04	; 4
    1112:	0e 94 0e 11 	call	0x221c	; 0x221c <_ZN7TwoWire15endTransmissionEv>

	// now read back from the port

	Wire.requestFrom((int)_addr, 1);
    1116:	68 a1       	ldd	r22, Y+32	; 0x20
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	41 e0       	ldi	r20, 0x01	; 1
    111c:	50 e0       	ldi	r21, 0x00	; 0
    111e:	87 e2       	ldi	r24, 0x27	; 39
    1120:	94 e0       	ldi	r25, 0x04	; 4
    1122:	0e 94 0b 11 	call	0x2216	; 0x2216 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    1126:	87 e2       	ldi	r24, 0x27	; 39
    1128:	94 e0       	ldi	r25, 0x04	; 4
    112a:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <_ZN7TwoWire4readEv>
    112e:	8c 01       	movw	r16, r24

	// Turn off bit2 to attempt to see if en is bit 2,
	// if it is, it should change all lcd data bits to 1s
	
	Wire.beginTransmission(_addr);
    1130:	68 a1       	ldd	r22, Y+32	; 0x20
    1132:	87 e2       	ldi	r24, 0x27	; 39
    1134:	94 e0       	ldi	r25, 0x04	; 4
    1136:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) (~(1 << 2)) );
    113a:	6b ef       	ldi	r22, 0xFB	; 251
    113c:	87 e2       	ldi	r24, 0x27	; 39
    113e:	94 e0       	ldi	r25, 0x04	; 4
    1140:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    1144:	87 e2       	ldi	r24, 0x27	; 39
    1146:	94 e0       	ldi	r25, 0x04	; 4
    1148:	0e 94 0e 11 	call	0x221c	; 0x221c <_ZN7TwoWire15endTransmissionEv>

	// read back data
	Wire.requestFrom((int)_addr, 1);
    114c:	68 a1       	ldd	r22, Y+32	; 0x20
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	41 e0       	ldi	r20, 0x01	; 1
    1152:	50 e0       	ldi	r21, 0x00	; 0
    1154:	87 e2       	ldi	r24, 0x27	; 39
    1156:	94 e0       	ldi	r25, 0x04	; 4
    1158:	0e 94 0b 11 	call	0x2216	; 0x2216 <_ZN7TwoWire11requestFromEii>
	data2 = Wire.read();
    115c:	87 e2       	ldi	r24, 0x27	; 39
    115e:	94 e0       	ldi	r25, 0x04	; 4
    1160:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <_ZN7TwoWire4readEv>

	// If lower 3 bits are high and all 4 upper bits are high after clearing bit 2
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
    1164:	98 01       	movw	r18, r16
    1166:	27 70       	andi	r18, 0x07	; 7
    1168:	33 27       	eor	r19, r19
    116a:	27 30       	cpi	r18, 0x07	; 7
    116c:	31 05       	cpc	r19, r1
    116e:	b1 f4       	brne	.+44     	; 0x119c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
    1170:	80 7f       	andi	r24, 0xF0	; 240
    1172:	99 27       	eor	r25, r25
    1174:	80 3f       	cpi	r24, 0xF0	; 240
    1176:	91 05       	cpc	r25, r1
    1178:	89 f4       	brne	.+34     	; 0x119c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xac>
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
    117a:	83 e0       	ldi	r24, 0x03	; 3
    117c:	16 95       	lsr	r17
    117e:	07 95       	ror	r16
    1180:	8a 95       	dec	r24
    1182:	e1 f7       	brne	.-8      	; 0x117c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x8c>
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	08 27       	eor	r16, r24
    1188:	01 70       	andi	r16, 0x01	; 1
	// then lower bits are control bits and upper bits are data bits
	// and bit2 was en.
	
	if( ((data & 0x7) == 7)  && ((data2 & 0xf0) == 0xf0))
	{
		rs = 0; rw = 1; en = 2; d4 = 4; d5 = 5; d6 = 6; d7 = 7; bl = 3;
    118a:	43 e0       	ldi	r20, 0x03	; 3
    118c:	57 e0       	ldi	r21, 0x07	; 7
    118e:	66 e0       	ldi	r22, 0x06	; 6
    1190:	75 e0       	ldi	r23, 0x05	; 5
    1192:	e4 e0       	ldi	r30, 0x04	; 4
    1194:	22 e0       	ldi	r18, 0x02	; 2
    1196:	f1 e0       	ldi	r31, 0x01	; 1
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	34 c0       	rjmp	.+104    	; 0x1204 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x114>
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
		}
	}
	else if((data & 0x70) == 0x70)
    119c:	c8 01       	movw	r24, r16
    119e:	80 77       	andi	r24, 0x70	; 112
    11a0:	99 27       	eor	r25, r25
    11a2:	80 37       	cpi	r24, 0x70	; 112
    11a4:	91 05       	cpc	r25, r1
    11a6:	09 f0       	breq	.+2      	; 0x11aa <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xba>
    11a8:	68 c0       	rjmp	.+208    	; 0x127a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18a>
		// both use bit 7 for backlight control

		// Turn off the en bit which should change the data bits
		// bit 4 on the mjkdz is en so we try that bit
	
		Wire.beginTransmission(_addr);
    11aa:	68 a1       	ldd	r22, Y+32	; 0x20
    11ac:	87 e2       	ldi	r24, 0x27	; 39
    11ae:	94 e0       	ldi	r25, 0x04	; 4
    11b0:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t) (~(1 << 4)) );
    11b4:	6f ee       	ldi	r22, 0xEF	; 239
    11b6:	87 e2       	ldi	r24, 0x27	; 39
    11b8:	94 e0       	ldi	r25, 0x04	; 4
    11ba:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    11be:	87 e2       	ldi	r24, 0x27	; 39
    11c0:	94 e0       	ldi	r25, 0x04	; 4
    11c2:	0e 94 0e 11 	call	0x221c	; 0x221c <_ZN7TwoWire15endTransmissionEv>

		// read back data
		Wire.requestFrom((int)_addr, 1);
    11c6:	68 a1       	ldd	r22, Y+32	; 0x20
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	41 e0       	ldi	r20, 0x01	; 1
    11cc:	50 e0       	ldi	r21, 0x00	; 0
    11ce:	87 e2       	ldi	r24, 0x27	; 39
    11d0:	94 e0       	ldi	r25, 0x04	; 4
    11d2:	0e 94 0b 11 	call	0x2216	; 0x2216 <_ZN7TwoWire11requestFromEii>
		data2 = Wire.read();
    11d6:	87 e2       	ldi	r24, 0x27	; 39
    11d8:	94 e0       	ldi	r25, 0x04	; 4
    11da:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <_ZN7TwoWire4readEv>
		// look at data bits and see if they changed
		// if they changed to 0xf, then en was bit 4 and it is mjdkz
		// this will happen since when E is low the LCD is not
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
    11de:	8f 70       	andi	r24, 0x0F	; 15
    11e0:	99 27       	eor	r25, r25
    11e2:	0f 97       	sbiw	r24, 0x0f	; 15
    11e4:	19 f0       	breq	.+6      	; 0x11ec <_ZN14hd44780_I2Cexp11autocfg8574Ev+0xfc>
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
		}
		else
		{
			// electrofun LCDXIO
			rs = 4; rw = 5; en = 6; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
    11e6:	26 e0       	ldi	r18, 0x06	; 6
    11e8:	34 e0       	ldi	r19, 0x04	; 4
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x100>
		// driving the bus pins so they will read as 1s since the
		// pullups in the PCF8574 will pull them up.
		if((data2 & 0xf) ==  0xf)
		{
			// mjkdz
			rs = 6; rw = 5; en = 4; d4 = 0; d5 = 1; d6 = 2; d7 = 3; bl = 7;
    11ec:	24 e0       	ldi	r18, 0x04	; 4
    11ee:	36 e0       	ldi	r19, 0x06	; 6
		}
		else
		{
			// YwRobot/DFRobot/SainSmart/funduino
			// 0,1,2,4,5,6,7,3, HIGH
			blLevel = HIGH;
    11f0:	00 95       	com	r16
    11f2:	00 1f       	adc	r16, r16
    11f4:	00 27       	eor	r16, r16
    11f6:	00 1f       	adc	r16, r16
    11f8:	47 e0       	ldi	r20, 0x07	; 7
    11fa:	53 e0       	ldi	r21, 0x03	; 3
    11fc:	62 e0       	ldi	r22, 0x02	; 2
    11fe:	71 e0       	ldi	r23, 0x01	; 1
    1200:	e0 e0       	ldi	r30, 0x00	; 0
    1202:	f5 e0       	ldi	r31, 0x05	; 5
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	dc 01       	movw	r26, r24
    120a:	01 c0       	rjmp	.+2      	; 0x120e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11e>
    120c:	aa 0f       	add	r26, r26
    120e:	3a 95       	dec	r19
    1210:	ea f7       	brpl	.-6      	; 0x120c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x11c>
    1212:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
    1214:	dc 01       	movw	r26, r24
    1216:	01 c0       	rjmp	.+2      	; 0x121a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x12a>
    1218:	aa 0f       	add	r26, r26
    121a:	fa 95       	dec	r31
    121c:	ea f7       	brpl	.-6      	; 0x1218 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x128>
    121e:	ab a3       	std	Y+35, r26	; 0x23
	else
		_rw = 0; // no r/w control

	_en = ( 1 << en );
    1220:	dc 01       	movw	r26, r24
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x138>
    1224:	aa 0f       	add	r26, r26
    1226:	bb 1f       	adc	r27, r27
    1228:	2a 95       	dec	r18
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x134>
    122c:	ac a3       	std	Y+36, r26	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
    122e:	9c 01       	movw	r18, r24
    1230:	01 c0       	rjmp	.+2      	; 0x1234 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x144>
    1232:	22 0f       	add	r18, r18
    1234:	ea 95       	dec	r30
    1236:	ea f7       	brpl	.-6      	; 0x1232 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x142>
    1238:	2d a3       	std	Y+37, r18	; 0x25
	_d5 = ( 1 << d5 );
    123a:	9c 01       	movw	r18, r24
    123c:	01 c0       	rjmp	.+2      	; 0x1240 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x150>
    123e:	22 0f       	add	r18, r18
    1240:	7a 95       	dec	r23
    1242:	ea f7       	brpl	.-6      	; 0x123e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x14e>
    1244:	2e a3       	std	Y+38, r18	; 0x26
	_d6 = ( 1 << d6 );
    1246:	9c 01       	movw	r18, r24
    1248:	01 c0       	rjmp	.+2      	; 0x124c <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15c>
    124a:	22 0f       	add	r18, r18
    124c:	6a 95       	dec	r22
    124e:	ea f7       	brpl	.-6      	; 0x124a <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x15a>
    1250:	2f a3       	std	Y+39, r18	; 0x27
	_d7 = ( 1 << d7 );   
    1252:	9c 01       	movw	r18, r24
    1254:	01 c0       	rjmp	.+2      	; 0x1258 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x168>
    1256:	22 0f       	add	r18, r18
    1258:	5a 95       	dec	r21
    125a:	ea f7       	brpl	.-6      	; 0x1256 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x166>
    125c:	28 a7       	std	Y+40, r18	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
    125e:	01 c0       	rjmp	.+2      	; 0x1262 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x172>
    1260:	88 0f       	add	r24, r24
    1262:	4a 95       	dec	r20
    1264:	ea f7       	brpl	.-6      	; 0x1260 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x170>
    1266:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
    1268:	0a a7       	std	Y+42, r16	; 0x2a
	// set default bl state to backlight on
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
    126a:	01 30       	cpi	r16, 0x01	; 1
    126c:	11 f4       	brne	.+4      	; 0x1272 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x182>
		_blCurState = _bl;
    126e:	8b a7       	std	Y+43, r24	; 0x2b
    1270:	01 c0       	rjmp	.+2      	; 0x1274 <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x184>
	else
		_blCurState = 0;
    1272:	1b a6       	std	Y+43, r1	; 0x2b
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	02 c0       	rjmp	.+4      	; 0x127e <_ZN14hd44780_I2Cexp11autocfg8574Ev+0x18e>
		}
	}
	else
	{
		// couldn't figure it out
		return(hd44780::RV_ENOTSUP);
    127a:	8d ef       	ldi	r24, 0xFD	; 253
    127c:	9f ef       	ldi	r25, 0xFF	; 255
	}
	config(_addr, _expType, rs, rw, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	1f 91       	pop	r17
    1284:	0f 91       	pop	r16
    1286:	08 95       	ret

00001288 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>:
 * if GP1 is low then the board is the BOARD_XXX board
 * The BOARD_XXX may not work as GP1 is used for D5 on WIDEHK and LCDPLUG
 *
 *
 */
int autocfgMCP23008()
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	ec 01       	movw	r28, r24

	/*
	 * Now set up output port
	 * Make no assumptions as to the state of IOCON BYTE mode
	 */
	Wire.beginTransmission(_addr);
    128e:	68 a1       	ldd	r22, Y+32	; 0x20
    1290:	87 e2       	ldi	r24, 0x27	; 39
    1292:	94 e0       	ldi	r25, 0x04	; 4
    1294:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t)0); // point to IODIR
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	87 e2       	ldi	r24, 0x27	; 39
    129c:	94 e0       	ldi	r25, 0x04	; 4
    129e:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN7TwoWire5writeEh>
	Wire.write(0xff); // all pins inputs
    12a2:	6f ef       	ldi	r22, 0xFF	; 255
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	87 e2       	ldi	r24, 0x27	; 39
    12a8:	94 e0       	ldi	r25, 0x04	; 4
    12aa:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    12ae:	87 e2       	ldi	r24, 0x27	; 39
    12b0:	94 e0       	ldi	r25, 0x04	; 4
    12b2:	0e 94 0e 11 	call	0x221c	; 0x221c <_ZN7TwoWire15endTransmissionEv>

	Wire.beginTransmission(_addr);
    12b6:	68 a1       	ldd	r22, Y+32	; 0x20
    12b8:	87 e2       	ldi	r24, 0x27	; 39
    12ba:	94 e0       	ldi	r25, 0x04	; 4
    12bc:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(6); // point to GPPU
    12c0:	66 e0       	ldi	r22, 0x06	; 6
    12c2:	70 e0       	ldi	r23, 0x00	; 0
    12c4:	87 e2       	ldi	r24, 0x27	; 39
    12c6:	94 e0       	ldi	r25, 0x04	; 4
    12c8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN7TwoWire5writeEi>
	Wire.write(0xff); // turn on pullups
    12cc:	6f ef       	ldi	r22, 0xFF	; 255
    12ce:	70 e0       	ldi	r23, 0x00	; 0
    12d0:	87 e2       	ldi	r24, 0x27	; 39
    12d2:	94 e0       	ldi	r25, 0x04	; 4
    12d4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    12d8:	87 e2       	ldi	r24, 0x27	; 39
    12da:	94 e0       	ldi	r25, 0x04	; 4
    12dc:	0e 94 0e 11 	call	0x221c	; 0x221c <_ZN7TwoWire15endTransmissionEv>

	/*
	 * read from the GPIO port
	 */

	Wire.beginTransmission(_addr);
    12e0:	68 a1       	ldd	r22, Y+32	; 0x20
    12e2:	87 e2       	ldi	r24, 0x27	; 39
    12e4:	94 e0       	ldi	r25, 0x04	; 4
    12e6:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(9); // point to GPIO
    12ea:	69 e0       	ldi	r22, 0x09	; 9
    12ec:	70 e0       	ldi	r23, 0x00	; 0
    12ee:	87 e2       	ldi	r24, 0x27	; 39
    12f0:	94 e0       	ldi	r25, 0x04	; 4
    12f2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
    12f6:	87 e2       	ldi	r24, 0x27	; 39
    12f8:	94 e0       	ldi	r25, 0x04	; 4
    12fa:	0e 94 0e 11 	call	0x221c	; 0x221c <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom((int)_addr, 1);
    12fe:	68 a1       	ldd	r22, Y+32	; 0x20
    1300:	70 e0       	ldi	r23, 0x00	; 0
    1302:	41 e0       	ldi	r20, 0x01	; 1
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	87 e2       	ldi	r24, 0x27	; 39
    1308:	94 e0       	ldi	r25, 0x04	; 4
    130a:	0e 94 0b 11 	call	0x2216	; 0x2216 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    130e:	87 e2       	ldi	r24, 0x27	; 39
    1310:	94 e0       	ldi	r25, 0x04	; 4
    1312:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <_ZN7TwoWire4readEv>

	blLevel = HIGH; // known boards are active HIGH bl

	if(data == 0x7f) // bit 7 low, and other control and data lines high
    1316:	8f 37       	cpi	r24, 0x7F	; 127
    1318:	61 f0       	breq	.+24     	; 0x1332 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xaa>
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
    131a:	86 ff       	sbrs	r24, 6
    131c:	12 c0       	rjmp	.+36     	; 0x1342 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xba>
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
    131e:	81 fd       	sbrc	r24, 1
    1320:	4c c0       	rjmp	.+152    	; 0x13ba <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x132>
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
		bl = 1;
    1322:	21 e0       	ldi	r18, 0x01	; 1
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
		d7 = 2;
    1324:	32 e0       	ldi	r19, 0x02	; 2
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
		d6 = 3;
    1326:	43 e0       	ldi	r20, 0x03	; 3
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
		d5 = 4;
    1328:	54 e0       	ldi	r21, 0x04	; 4
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
		d4 = 5;
    132a:	65 e0       	ldi	r22, 0x05	; 5
	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
		// rw = 0; // not used
		en = 6;
    132c:	76 e0       	ldi	r23, 0x06	; 6
		bl = 6;

	} else if(!(data & (1<<1))) // bit 1 low (untested)
	{
		// BOARD_XXX
		rs = 7;
    132e:	e7 e0       	ldi	r30, 0x07	; 7
    1330:	0f c0       	rjmp	.+30     	; 0x1350 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
		bl = 7;
    1332:	27 e0       	ldi	r18, 0x07	; 7
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
		d7 = 6;
    1334:	36 e0       	ldi	r19, 0x06	; 6
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
		d6 = 5;
    1336:	45 e0       	ldi	r20, 0x05	; 5
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
		d5 = 4;
    1338:	54 e0       	ldi	r21, 0x04	; 4
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
		d4 = 3;
    133a:	63 e0       	ldi	r22, 0x03	; 3
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
		// rw = 0; // not used
		en = 2;
    133c:	72 e0       	ldi	r23, 0x02	; 2

	if(data == 0x7f) // bit 7 low, and other control and data lines high
	{
		// board is either ADAFRUIT292 or LCDPLUG
		// for now, assume ADAFRUIT292
		rs = 1;
    133e:	e1 e0       	ldi	r30, 0x01	; 1
    1340:	07 c0       	rjmp	.+14     	; 0x1350 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xc8>
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
		bl = 6;
    1342:	26 e0       	ldi	r18, 0x06	; 6
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
		d7 = 3;
    1344:	33 e0       	ldi	r19, 0x03	; 3
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
		d6 = 2;
    1346:	42 e0       	ldi	r20, 0x02	; 2
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
		d5 = 1;
    1348:	51 e0       	ldi	r21, 0x01	; 1
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
		d4 = 0;
    134a:	60 e0       	ldi	r22, 0x00	; 0
	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
		// rw = 5; // not used
		en = 7;
    134c:	77 e0       	ldi	r23, 0x07	; 7
		bl = 7;

	} else  if(!(data & (1<<6))) // bit 6 low (untested)
	{
		// WIDEHK
		rs = 4;
    134e:	e4 e0       	ldi	r30, 0x04	; 4
{
	// Save away config data into object
	_expType = i2c_type;
	_addr = i2c_addr;
   
	_rs = ( 1 << rs );
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	dc 01       	movw	r26, r24
    1356:	02 c0       	rjmp	.+4      	; 0x135c <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd4>
    1358:	aa 0f       	add	r26, r26
    135a:	bb 1f       	adc	r27, r27
    135c:	ea 95       	dec	r30
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xd0>
    1360:	aa a3       	std	Y+34, r26	; 0x22

	if(rw < 8)
		_rw = (1 << rw);
	else
		_rw = 0; // no r/w control
    1362:	1b a2       	std	Y+35, r1	; 0x23

	_en = ( 1 << en );
    1364:	fc 01       	movw	r30, r24
    1366:	01 c0       	rjmp	.+2      	; 0x136a <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe2>
    1368:	ee 0f       	add	r30, r30
    136a:	7a 95       	dec	r23
    136c:	ea f7       	brpl	.-6      	; 0x1368 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xe0>
    136e:	ec a3       	std	Y+36, r30	; 0x24
   
	// Initialise pin mapping
	_d4 = ( 1 << d4 );
    1370:	fc 01       	movw	r30, r24
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xf0>
    1374:	ee 0f       	add	r30, r30
    1376:	ff 1f       	adc	r31, r31
    1378:	6a 95       	dec	r22
    137a:	e2 f7       	brpl	.-8      	; 0x1374 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xec>
    137c:	ed a3       	std	Y+37, r30	; 0x25
	_d5 = ( 1 << d5 );
    137e:	bc 01       	movw	r22, r24
    1380:	01 c0       	rjmp	.+2      	; 0x1384 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfc>
    1382:	66 0f       	add	r22, r22
    1384:	5a 95       	dec	r21
    1386:	ea f7       	brpl	.-6      	; 0x1382 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0xfa>
    1388:	6e a3       	std	Y+38, r22	; 0x26
	_d6 = ( 1 << d6 );
    138a:	bc 01       	movw	r22, r24
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x10a>
    138e:	66 0f       	add	r22, r22
    1390:	77 1f       	adc	r23, r23
    1392:	4a 95       	dec	r20
    1394:	e2 f7       	brpl	.-8      	; 0x138e <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x106>
    1396:	6f a3       	std	Y+39, r22	; 0x27
	_d7 = ( 1 << d7 );   
    1398:	ac 01       	movw	r20, r24
    139a:	01 c0       	rjmp	.+2      	; 0x139e <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x116>
    139c:	44 0f       	add	r20, r20
    139e:	3a 95       	dec	r19
    13a0:	ea f7       	brpl	.-6      	; 0x139c <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x114>
    13a2:	48 a7       	std	Y+40, r20	; 0x28
   
	if(bl < 8)
		_bl = ( 1 << bl );
    13a4:	01 c0       	rjmp	.+2      	; 0x13a8 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x120>
    13a6:	88 0f       	add	r24, r24
    13a8:	2a 95       	dec	r18
    13aa:	ea f7       	brpl	.-6      	; 0x13a6 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x11e>
    13ac:	89 a7       	std	Y+41, r24	; 0x29
	else
		_bl = 0; // no backlight control
	_blLevel = blLevel;
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	9a a7       	std	Y+42, r25	; 0x2a
	// if no _bl control, the _blCurState values will also be set to zero
	// so it doesn't turn on any other pins.
	// 
	
	if(_bl && (blLevel == HIGH))
		_blCurState = _bl;
    13b2:	8b a7       	std	Y+43, r24	; 0x2b
		// could not identify board
		return(hd44780::RV_ENOTSUP);
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev+0x136>

	}
	else
	{
		// could not identify board
		return(hd44780::RV_ENOTSUP);
    13ba:	8d ef       	ldi	r24, 0xFD	; 253
    13bc:	9f ef       	ldi	r25, 0xFF	; 255
	}
	// currently writes are disabled for all MCP23008 devices
	config(_addr, _expType, rs, 0xff, en, d4, d5, d6, d7, bl, blLevel);
	return(0);
}
    13be:	df 91       	pop	r29
    13c0:	cf 91       	pop	r28
    13c2:	08 95       	ret

000013c4 <_ZN14hd44780_I2Cexp6ioinitEv>:
// Returns non zero if initialization failed.
//
// can't be used from constructors because not everything is initalized yet.
// (maybe interrupts or other library constructors)
// if Wire library is used in constructor, it will hang.
int ioinit()
    13c4:	1f 93       	push	r17
    13c6:	cf 93       	push	r28
    13c8:	df 93       	push	r29
    13ca:	ec 01       	movw	r28, r24
	 * I believe that it is unreasonable to require the the user
	 * sketch code to do it, because all that should change between
	 * hd44780 i/o interfaces should be the constructor
	 * So we go ahead and call it here.
	 */
	Wire.begin();
    13cc:	87 e2       	ldi	r24, 0x27	; 39
    13ce:	94 e0       	ldi	r25, 0x04	; 4
    13d0:	0e 94 78 10 	call	0x20f0	; 0x20f0 <_ZN7TwoWire5beginEv>

	// auto locate i2c expander and magically detect pin mappings

	if(!_addr) // locate next instance
    13d4:	68 a1       	ldd	r22, Y+32	; 0x20
    13d6:	61 11       	cpse	r22, r1
    13d8:	0a c0       	rjmp	.+20     	; 0x13ee <_ZN14hd44780_I2Cexp6ioinitEv+0x2a>
	{
		_addr = LocateDevice(AutoInst++);
    13da:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    13de:	91 e0       	ldi	r25, 0x01	; 1
    13e0:	98 0f       	add	r25, r24
    13e2:	90 93 b8 03 	sts	0x03B8, r25	; 0x8003b8 <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    13e6:	0e 94 b1 01 	call	0x362	; 0x362 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
    13ea:	88 a3       	std	Y+32, r24	; 0x20
    13ec:	0d c0       	rjmp	.+26     	; 0x1408 <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
	}
	else
	{
		// check to see if device at specified address is really there
		Wire.beginTransmission(_addr);
    13ee:	87 e2       	ldi	r24, 0x27	; 39
    13f0:	94 e0       	ldi	r25, 0x04	; 4
    13f2:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire17beginTransmissionEh>
		if(Wire.endTransmission())
    13f6:	87 e2       	ldi	r24, 0x27	; 39
    13f8:	94 e0       	ldi	r25, 0x04	; 4
    13fa:	0e 94 0e 11 	call	0x221c	; 0x221c <_ZN7TwoWire15endTransmissionEv>
    13fe:	88 23       	and	r24, r24
    1400:	19 f0       	breq	.+6      	; 0x1408 <_ZN14hd44780_I2Cexp6ioinitEv+0x44>
			return(hd44780::RV_ENXIO);
    1402:	8c ef       	ldi	r24, 0xFC	; 252
    1404:	9f ef       	ldi	r25, 0xFF	; 255
    1406:	a7 c0       	rjmp	.+334    	; 0x1556 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	}

	if(!_addr) // locate next instance
    1408:	88 a1       	ldd	r24, Y+32	; 0x20
    140a:	81 11       	cpse	r24, r1
    140c:	09 c0       	rjmp	.+18     	; 0x1420 <_ZN14hd44780_I2Cexp6ioinitEv+0x5c>
		_addr = LocateDevice(AutoInst++);
    140e:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    1412:	91 e0       	ldi	r25, 0x01	; 1
    1414:	98 0f       	add	r25, r24
    1416:	90 93 b8 03 	sts	0x03B8, r25	; 0x8003b8 <_ZZN14hd44780_I2Cexp6ioinitEvE8AutoInst>
    141a:	0e 94 b1 01 	call	0x362	; 0x362 <_ZN14hd44780_I2Cexp12LocateDeviceEh.isra.1>
    141e:	88 a3       	std	Y+32, r24	; 0x20

	if(!_addr) // if we couldn't locate it, return error
    1420:	18 a1       	ldd	r17, Y+32	; 0x20
    1422:	11 23       	and	r17, r17
    1424:	71 f3       	breq	.-36     	; 0x1402 <_ZN14hd44780_I2Cexp6ioinitEv+0x3e>
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
    1426:	89 a1       	ldd	r24, Y+33	; 0x21
    1428:	88 23       	and	r24, r24
    142a:	c1 f1       	breq	.+112    	; 0x149c <_ZN14hd44780_I2Cexp6ioinitEv+0xd8>
			return(status);
	}

	// initialize IO expander chip

	Wire.beginTransmission(_addr);
    142c:	68 a1       	ldd	r22, Y+32	; 0x20
    142e:	87 e2       	ldi	r24, 0x27	; 39
    1430:	94 e0       	ldi	r25, 0x04	; 4
    1432:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire17beginTransmissionEh>

	if(_expType == I2Cexp_MCP23008)
    1436:	89 a1       	ldd	r24, Y+33	; 0x21
    1438:	82 30       	cpi	r24, 0x02	; 2
    143a:	09 f0       	breq	.+2      	; 0x143e <_ZN14hd44780_I2Cexp6ioinitEv+0x7a>
    143c:	76 c0       	rjmp	.+236    	; 0x152a <_ZN14hd44780_I2Cexp6ioinitEv+0x166>
		 * within the same i2c connection by simply sending more bytes.
		 * This is necessary as the code uses back to back writes to perform
		 * the nibble updates as well as the toggling the enable signal.
		 * This methodology offers significant performance gains.
		 */
		Wire.write(5);	// point to IOCON
    143e:	65 e0       	ldi	r22, 0x05	; 5
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	87 e2       	ldi	r24, 0x27	; 39
    1444:	94 e0       	ldi	r25, 0x04	; 4
    1446:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN7TwoWire5writeEi>
		Wire.write(0x20);// disable sequential mode (enables BYTE mode)
    144a:	60 e2       	ldi	r22, 0x20	; 32
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	87 e2       	ldi	r24, 0x27	; 39
    1450:	94 e0       	ldi	r25, 0x04	; 4
    1452:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN7TwoWire5writeEi>
		Wire.endTransmission();
    1456:	87 e2       	ldi	r24, 0x27	; 39
    1458:	94 e0       	ldi	r25, 0x04	; 4
    145a:	0e 94 0e 11 	call	0x221c	; 0x221c <_ZN7TwoWire15endTransmissionEv>

		/*
		 * Now set up output port
		 */
		Wire.beginTransmission(_addr);
    145e:	68 a1       	ldd	r22, Y+32	; 0x20
    1460:	87 e2       	ldi	r24, 0x27	; 39
    1462:	94 e0       	ldi	r25, 0x04	; 4
    1464:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write((uint8_t)0); // point to IODIR
    1468:	60 e0       	ldi	r22, 0x00	; 0
    146a:	87 e2       	ldi	r24, 0x27	; 39
    146c:	94 e0       	ldi	r25, 0x04	; 4
    146e:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN7TwoWire5writeEh>
		Wire.write((uint8_t)0); // all pins output
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	87 e2       	ldi	r24, 0x27	; 39
    1476:	94 e0       	ldi	r25, 0x04	; 4
    1478:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
    147c:	87 e2       	ldi	r24, 0x27	; 39
    147e:	94 e0       	ldi	r25, 0x04	; 4
    1480:	0e 94 0e 11 	call	0x221c	; 0x221c <_ZN7TwoWire15endTransmissionEv>
	
		/*
		 * point chip to GPIO
		 */
		Wire.beginTransmission(_addr);
    1484:	68 a1       	ldd	r22, Y+32	; 0x20
    1486:	87 e2       	ldi	r24, 0x27	; 39
    1488:	94 e0       	ldi	r25, 0x04	; 4
    148a:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire17beginTransmissionEh>
		Wire.write(9); // point to GPIO
    148e:	69 e0       	ldi	r22, 0x09	; 9
    1490:	70 e0       	ldi	r23, 0x00	; 0
    1492:	87 e2       	ldi	r24, 0x27	; 39
    1494:	94 e0       	ldi	r25, 0x04	; 4
    1496:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN7TwoWire5writeEi>
    149a:	47 c0       	rjmp	.+142    	; 0x152a <_ZN14hd44780_I2Cexp6ioinitEv+0x166>

	/*
	 * First try to write 0xff to MCP23008 IODIR
	 * On a PCF8574 this will end up writing 0 and then ff to output port
	 */
	Wire.beginTransmission(address);
    149c:	61 2f       	mov	r22, r17
    149e:	87 e2       	ldi	r24, 0x27	; 39
    14a0:	94 e0       	ldi	r25, 0x04	; 4
    14a2:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	87 e2       	ldi	r24, 0x27	; 39
    14aa:	94 e0       	ldi	r25, 0x04	; 4
    14ac:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN7TwoWire5writeEh>
	Wire.write((uint8_t) 0xff);	// try to write to MCP23008 IODR
    14b0:	6f ef       	ldi	r22, 0xFF	; 255
    14b2:	87 e2       	ldi	r24, 0x27	; 39
    14b4:	94 e0       	ldi	r25, 0x04	; 4
    14b6:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    14ba:	87 e2       	ldi	r24, 0x27	; 39
    14bc:	94 e0       	ldi	r25, 0x04	; 4
    14be:	0e 94 0e 11 	call	0x221c	; 0x221c <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now try to point MCP23008 to IODIR for read
	 * On a PCF8574 this will end up writing a 0 to the output port
	 */

	Wire.beginTransmission(address);
    14c2:	61 2f       	mov	r22, r17
    14c4:	87 e2       	ldi	r24, 0x27	; 39
    14c6:	94 e0       	ldi	r25, 0x04	; 4
    14c8:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t) 0);	// try to point to MCP23008 IODR
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	87 e2       	ldi	r24, 0x27	; 39
    14d0:	94 e0       	ldi	r25, 0x04	; 4
    14d2:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    14d6:	87 e2       	ldi	r24, 0x27	; 39
    14d8:	94 e0       	ldi	r25, 0x04	; 4
    14da:	0e 94 0e 11 	call	0x221c	; 0x221c <_ZN7TwoWire15endTransmissionEv>
	/*
	 * Now read a byte
	 * On a MCP23008 we should read the 0xff we wrote to IODIR
	 * On a PCF8574 we should read 0 since the output port was set to 0
	 */
	Wire.requestFrom((int)address, 1);
    14de:	61 2f       	mov	r22, r17
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	41 e0       	ldi	r20, 0x01	; 1
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	87 e2       	ldi	r24, 0x27	; 39
    14e8:	94 e0       	ldi	r25, 0x04	; 4
    14ea:	0e 94 0b 11 	call	0x2216	; 0x2216 <_ZN7TwoWire11requestFromEii>
	data = Wire.read();
    14ee:	87 e2       	ldi	r24, 0x27	; 39
    14f0:	94 e0       	ldi	r25, 0x04	; 4
    14f2:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <_ZN7TwoWire4readEv>
    14f6:	9c 01       	movw	r18, r24

	if(data == 0xff)
    14f8:	8f 3f       	cpi	r24, 0xFF	; 255
    14fa:	91 05       	cpc	r25, r1
    14fc:	29 f0       	breq	.+10     	; 0x1508 <_ZN14hd44780_I2Cexp6ioinitEv+0x144>
	{
		chiptype = I2Cexp_MCP23008;
    14fe:	91 e0       	ldi	r25, 0x01	; 1
    1500:	23 2b       	or	r18, r19
    1502:	19 f0       	breq	.+6      	; 0x150a <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	01 c0       	rjmp	.+2      	; 0x150a <_ZN14hd44780_I2Cexp6ioinitEv+0x146>
    1508:	92 e0       	ldi	r25, 0x02	; 2
	if(!_addr) // if we couldn't locate it, return error
		return(hd44780::RV_ENXIO);

	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);
    150a:	99 a3       	std	Y+33, r25	; 0x21

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
    150c:	99 23       	and	r25, r25
    150e:	09 f1       	breq	.+66     	; 0x1552 <_ZN14hd44780_I2Cexp6ioinitEv+0x18e>
			return(hd44780::RV_EIO);

		if(_expType == I2Cexp_PCF8574)
    1510:	91 30       	cpi	r25, 0x01	; 1
    1512:	21 f4       	brne	.+8      	; 0x151c <_ZN14hd44780_I2Cexp6ioinitEv+0x158>
			status = autocfg8574();		// go auto configure the pin mappings
    1514:	ce 01       	movw	r24, r28
    1516:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_ZN14hd44780_I2Cexp11autocfg8574Ev>
    151a:	03 c0       	rjmp	.+6      	; 0x1522 <_ZN14hd44780_I2Cexp6ioinitEv+0x15e>
		else
			status = autocfgMCP23008();	// go auto configure the pin mappings
    151c:	ce 01       	movw	r24, r28
    151e:	0e 94 44 09 	call	0x1288	; 0x1288 <_ZN14hd44780_I2Cexp15autocfgMCP23008Ev>
		if(status)
    1522:	00 97       	sbiw	r24, 0x00	; 0
    1524:	09 f4       	brne	.+2      	; 0x1528 <_ZN14hd44780_I2Cexp6ioinitEv+0x164>
    1526:	82 cf       	rjmp	.-252    	; 0x142c <_ZN14hd44780_I2Cexp6ioinitEv+0x68>
    1528:	16 c0       	rjmp	.+44     	; 0x1556 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
		 */
		Wire.beginTransmission(_addr);
		Wire.write(9); // point to GPIO
		
	}
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	87 e2       	ldi	r24, 0x27	; 39
    152e:	94 e0       	ldi	r25, 0x04	; 4
    1530:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN7TwoWire5writeEh>
	if( (status = Wire.endTransmission()) ) // assignment
    1534:	87 e2       	ldi	r24, 0x27	; 39
    1536:	94 e0       	ldi	r25, 0x04	; 4
    1538:	0e 94 0e 11 	call	0x221c	; 0x221c <_ZN7TwoWire15endTransmissionEv>
    153c:	21 e0       	ldi	r18, 0x01	; 1
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	81 11       	cpse	r24, r1
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <_ZN14hd44780_I2Cexp6ioinitEv+0x184>
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	88 27       	eor	r24, r24
    154a:	99 27       	eor	r25, r25
    154c:	82 1b       	sub	r24, r18
    154e:	93 0b       	sbc	r25, r19
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <_ZN14hd44780_I2Cexp6ioinitEv+0x192>
	if(_expType == I2Cexp_UNKNOWN) // figure out expander chip if not told
	{
		_expType = IdentifyIOexp(_addr);

		if(_expType == I2Cexp_UNKNOWN) // coudn't figure it out?, return error
			return(hd44780::RV_EIO);
    1552:	8f ef       	ldi	r24, 0xFF	; 255
    1554:	9f ef       	ldi	r25, 0xFF	; 255
	Wire.write((uint8_t)0);  // Set the entire output port to LOW
	if( (status = Wire.endTransmission()) ) // assignment
		status = hd44780::RV_EIO;

	return ( status );
}
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	1f 91       	pop	r17
    155c:	08 95       	ret

0000155e <_ZN3dht11_readSensorEhhh>:
    if (bits[4] != sum)
    {
        return DHTLIB_ERROR_CHECKSUM;
    }
    return result;
}
    155e:	2f 92       	push	r2
    1560:	3f 92       	push	r3
    1562:	4f 92       	push	r4
    1564:	5f 92       	push	r5
    1566:	6f 92       	push	r6
    1568:	7f 92       	push	r7
    156a:	8f 92       	push	r8
    156c:	9f 92       	push	r9
    156e:	af 92       	push	r10
    1570:	bf 92       	push	r11
    1572:	cf 92       	push	r12
    1574:	df 92       	push	r13
    1576:	ef 92       	push	r14
    1578:	ff 92       	push	r15
    157a:	0f 93       	push	r16
    157c:	1f 93       	push	r17
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	ec 01       	movw	r28, r24
    1584:	f6 2e       	mov	r15, r22
    1586:	04 2f       	mov	r16, r20
    1588:	e2 2e       	mov	r14, r18
    158a:	86 2f       	mov	r24, r22
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	fc 01       	movw	r30, r24
    1590:	e7 5d       	subi	r30, 0xD7	; 215
    1592:	fe 4f       	sbci	r31, 0xFE	; 254
    1594:	14 91       	lpm	r17, Z
    1596:	fc 01       	movw	r30, r24
    1598:	e8 5b       	subi	r30, 0xB8	; 184
    159a:	fe 4f       	sbci	r31, 0xFE	; 254
    159c:	e4 91       	lpm	r30, Z
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	ee 0f       	add	r30, r30
    15a2:	ff 1f       	adc	r31, r31
    15a4:	e9 59       	subi	r30, 0x99	; 153
    15a6:	fe 4f       	sbci	r31, 0xFE	; 254
    15a8:	c5 90       	lpm	r12, Z+
    15aa:	d4 90       	lpm	r13, Z
    15ac:	61 e0       	ldi	r22, 0x01	; 1
    15ae:	8f 2d       	mov	r24, r15
    15b0:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <pinMode>
    15b4:	60 e0       	ldi	r22, 0x00	; 0
    15b6:	8f 2d       	mov	r24, r15
    15b8:	0e 94 95 1a 	call	0x352a	; 0x352a <digitalWrite>
    15bc:	09 30       	cpi	r16, 0x09	; 9
    15be:	38 f0       	brcs	.+14     	; 0x15ce <_ZN3dht11_readSensorEhhh+0x70>
    15c0:	60 2f       	mov	r22, r16
    15c2:	70 e0       	ldi	r23, 0x00	; 0
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	0e 94 4e 19 	call	0x329c	; 0x329c <delay>
    15cc:	0a c0       	rjmp	.+20     	; 0x15e2 <_ZN3dht11_readSensorEhhh+0x84>
    15ce:	88 ee       	ldi	r24, 0xE8	; 232
    15d0:	93 e0       	ldi	r25, 0x03	; 3
    15d2:	9c 01       	movw	r18, r24
    15d4:	02 9f       	mul	r16, r18
    15d6:	c0 01       	movw	r24, r0
    15d8:	03 9f       	mul	r16, r19
    15da:	90 0d       	add	r25, r0
    15dc:	11 24       	eor	r1, r1
    15de:	0e 94 8a 19 	call	0x3314	; 0x3314 <delayMicroseconds>
    15e2:	60 e0       	ldi	r22, 0x00	; 0
    15e4:	8f 2d       	mov	r24, r15
    15e6:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <pinMode>
    15ea:	80 e2       	ldi	r24, 0x20	; 32
    15ec:	93 e0       	ldi	r25, 0x03	; 3
    15ee:	d6 01       	movw	r26, r12
    15f0:	2c 91       	ld	r18, X
    15f2:	21 23       	and	r18, r17
    15f4:	21 f0       	breq	.+8      	; 0x15fe <_ZN3dht11_readSensorEhhh+0xa0>
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	d1 f7       	brne	.-12     	; 0x15ee <_ZN3dht11_readSensorEhhh+0x90>
    15fa:	8d ef       	ldi	r24, 0xFD	; 253
    15fc:	5f c0       	rjmp	.+190    	; 0x16bc <_ZN3dht11_readSensorEhhh+0x15e>
    15fe:	80 e9       	ldi	r24, 0x90	; 144
    1600:	91 e0       	ldi	r25, 0x01	; 1
    1602:	f6 01       	movw	r30, r12
    1604:	20 81       	ld	r18, Z
    1606:	21 23       	and	r18, r17
    1608:	21 f4       	brne	.+8      	; 0x1612 <_ZN3dht11_readSensorEhhh+0xb4>
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	d1 f7       	brne	.-12     	; 0x1602 <_ZN3dht11_readSensorEhhh+0xa4>
    160e:	8c ef       	ldi	r24, 0xFC	; 252
    1610:	55 c0       	rjmp	.+170    	; 0x16bc <_ZN3dht11_readSensorEhhh+0x15e>
    1612:	80 e9       	ldi	r24, 0x90	; 144
    1614:	91 e0       	ldi	r25, 0x01	; 1
    1616:	d6 01       	movw	r26, r12
    1618:	2c 91       	ld	r18, X
    161a:	21 23       	and	r18, r17
    161c:	21 f0       	breq	.+8      	; 0x1626 <_ZN3dht11_readSensorEhhh+0xc8>
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	d1 f7       	brne	.-12     	; 0x1616 <_ZN3dht11_readSensorEhhh+0xb8>
    1622:	8b ef       	ldi	r24, 0xFB	; 251
    1624:	4b c0       	rjmp	.+150    	; 0x16bc <_ZN3dht11_readSensorEhhh+0x15e>
    1626:	58 e2       	ldi	r21, 0x28	; 40
    1628:	80 e9       	ldi	r24, 0x90	; 144
    162a:	91 e0       	ldi	r25, 0x01	; 1
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	e0 e9       	ldi	r30, 0x90	; 144
    1632:	f1 e0       	ldi	r31, 0x01	; 1
    1634:	00 e0       	ldi	r16, 0x00	; 0
    1636:	60 e0       	ldi	r22, 0x00	; 0
    1638:	31 2c       	mov	r3, r1
    163a:	40 e8       	ldi	r20, 0x80	; 128
    163c:	25 2e       	mov	r2, r21
    163e:	2e 18       	sub	r2, r14
    1640:	70 e9       	ldi	r23, 0x90	; 144
    1642:	87 2e       	mov	r8, r23
    1644:	99 24       	eor	r9, r9
    1646:	93 94       	inc	r9
    1648:	a1 2c       	mov	r10, r1
    164a:	b1 2c       	mov	r11, r1
    164c:	d6 01       	movw	r26, r12
    164e:	7c 91       	ld	r23, X
    1650:	71 23       	and	r23, r17
    1652:	61 f5       	brne	.+88     	; 0x16ac <_ZN3dht11_readSensorEhhh+0x14e>
    1654:	00 23       	and	r16, r16
    1656:	51 f1       	breq	.+84     	; 0x16ac <_ZN3dht11_readSensorEhhh+0x14e>
    1658:	25 16       	cp	r2, r21
    165a:	98 f4       	brcc	.+38     	; 0x1682 <_ZN3dht11_readSensorEhhh+0x124>
    165c:	8e 17       	cp	r24, r30
    165e:	9f 07       	cpc	r25, r31
    1660:	08 f4       	brcc	.+2      	; 0x1664 <_ZN3dht11_readSensorEhhh+0x106>
    1662:	fc 01       	movw	r30, r24
    1664:	24 01       	movw	r4, r8
    1666:	35 01       	movw	r6, r10
    1668:	4e 1a       	sub	r4, r30
    166a:	5f 0a       	sbc	r5, r31
    166c:	61 08       	sbc	r6, r1
    166e:	71 08       	sbc	r7, r1
    1670:	82 e0       	ldi	r24, 0x02	; 2
    1672:	75 94       	asr	r7
    1674:	67 94       	ror	r6
    1676:	57 94       	ror	r5
    1678:	47 94       	ror	r4
    167a:	8a 95       	dec	r24
    167c:	d1 f7       	brne	.-12     	; 0x1672 <_ZN3dht11_readSensorEhhh+0x114>
    167e:	92 01       	movw	r18, r4
    1680:	07 c0       	rjmp	.+14     	; 0x1690 <_ZN3dht11_readSensorEhhh+0x132>
    1682:	7f 01       	movw	r14, r30
    1684:	e2 1a       	sub	r14, r18
    1686:	f3 0a       	sbc	r15, r19
    1688:	e8 16       	cp	r14, r24
    168a:	f9 06       	cpc	r15, r25
    168c:	08 f0       	brcs	.+2      	; 0x1690 <_ZN3dht11_readSensorEhhh+0x132>
    168e:	64 2b       	or	r22, r20
    1690:	46 95       	lsr	r20
    1692:	49 f4       	brne	.+18     	; 0x16a6 <_ZN3dht11_readSensorEhhh+0x148>
    1694:	ce 01       	movw	r24, r28
    1696:	83 0d       	add	r24, r3
    1698:	91 1d       	adc	r25, r1
    169a:	dc 01       	movw	r26, r24
    169c:	18 96       	adiw	r26, 0x08	; 8
    169e:	6c 93       	st	X, r22
    16a0:	33 94       	inc	r3
    16a2:	60 e0       	ldi	r22, 0x00	; 0
    16a4:	40 e8       	ldi	r20, 0x80	; 128
    16a6:	51 50       	subi	r21, 0x01	; 1
    16a8:	80 e9       	ldi	r24, 0x90	; 144
    16aa:	91 e0       	ldi	r25, 0x01	; 1
    16ac:	01 97       	sbiw	r24, 0x01	; 1
    16ae:	29 f0       	breq	.+10     	; 0x16ba <_ZN3dht11_readSensorEhhh+0x15c>
    16b0:	07 2f       	mov	r16, r23
    16b2:	51 11       	cpse	r21, r1
    16b4:	cb cf       	rjmp	.-106    	; 0x164c <_ZN3dht11_readSensorEhhh+0xee>
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	01 c0       	rjmp	.+2      	; 0x16bc <_ZN3dht11_readSensorEhhh+0x15e>
    16ba:	8e ef       	ldi	r24, 0xFE	; 254
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
    16c0:	1f 91       	pop	r17
    16c2:	0f 91       	pop	r16
    16c4:	ff 90       	pop	r15
    16c6:	ef 90       	pop	r14
    16c8:	df 90       	pop	r13
    16ca:	cf 90       	pop	r12
    16cc:	bf 90       	pop	r11
    16ce:	af 90       	pop	r10
    16d0:	9f 90       	pop	r9
    16d2:	8f 90       	pop	r8
    16d4:	7f 90       	pop	r7
    16d6:	6f 90       	pop	r6
    16d8:	5f 90       	pop	r5
    16da:	4f 90       	pop	r4
    16dc:	3f 90       	pop	r3
    16de:	2f 90       	pop	r2
    16e0:	08 95       	ret

000016e2 <_ZN3dht4readEh>:

int8_t dht::read(uint8_t pin)
{
    16e2:	cf 92       	push	r12
    16e4:	df 92       	push	r13
    16e6:	ef 92       	push	r14
    16e8:	ff 92       	push	r15
    16ea:	0f 93       	push	r16
    16ec:	1f 93       	push	r17
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	ec 01       	movw	r28, r24
    // READ VALUES
    if (_disableIRQ) noInterrupts();
    16f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f6:	88 23       	and	r24, r24
    16f8:	09 f0       	breq	.+2      	; 0x16fc <_ZN3dht4readEh+0x1a>
    16fa:	f8 94       	cli
    int8_t result = _readSensor(pin, DHTLIB_DHT_WAKEUP, DHTLIB_DHT_LEADING_ZEROS);
    16fc:	26 e0       	ldi	r18, 0x06	; 6
    16fe:	41 e0       	ldi	r20, 0x01	; 1
    1700:	ce 01       	movw	r24, r28
    1702:	0e 94 af 0a 	call	0x155e	; 0x155e <_ZN3dht11_readSensorEhhh>
    1706:	e8 2e       	mov	r14, r24
    if (_disableIRQ) interrupts();
    1708:	8d 85       	ldd	r24, Y+13	; 0x0d
    170a:	88 23       	and	r24, r24
    170c:	09 f0       	breq	.+2      	; 0x1710 <_ZN3dht4readEh+0x2e>
    170e:	78 94       	sei

    // these bits are always zero, masking them reduces errors.
    bits[0] &= 0x03;
    1710:	08 85       	ldd	r16, Y+8	; 0x08
    1712:	03 70       	andi	r16, 0x03	; 3
    1714:	08 87       	std	Y+8, r16	; 0x08
    bits[2] &= 0x83;
    1716:	1a 85       	ldd	r17, Y+10	; 0x0a
    1718:	81 2f       	mov	r24, r17
    171a:	83 78       	andi	r24, 0x83	; 131
    171c:	f8 2e       	mov	r15, r24
    171e:	8a 87       	std	Y+10, r24	; 0x0a

    // CONVERT AND STORE
    humidity = (bits[0]*256 + bits[1]) * 0.1;
    1720:	c9 84       	ldd	r12, Y+9	; 0x09
    1722:	60 2f       	mov	r22, r16
    1724:	70 e0       	ldi	r23, 0x00	; 0
    1726:	76 2f       	mov	r23, r22
    1728:	66 27       	eor	r22, r22
    172a:	6c 0d       	add	r22, r12
    172c:	71 1d       	adc	r23, r1
    172e:	07 2e       	mov	r0, r23
    1730:	00 0c       	add	r0, r0
    1732:	88 0b       	sbc	r24, r24
    1734:	99 0b       	sbc	r25, r25
    1736:	0e 94 89 11 	call	0x2312	; 0x2312 <__floatsisf>
    173a:	2d ec       	ldi	r18, 0xCD	; 205
    173c:	3c ec       	ldi	r19, 0xCC	; 204
    173e:	4c ec       	ldi	r20, 0xCC	; 204
    1740:	5d e3       	ldi	r21, 0x3D	; 61
    1742:	0e 94 39 12 	call	0x2472	; 0x2472 <__mulsf3>
    1746:	68 83       	st	Y, r22
    1748:	79 83       	std	Y+1, r23	; 0x01
    174a:	8a 83       	std	Y+2, r24	; 0x02
    174c:	9b 83       	std	Y+3, r25	; 0x03
    temperature = ((bits[2] & 0x7F)*256 + bits[3]) * 0.1;
    174e:	db 84       	ldd	r13, Y+11	; 0x0b
    1750:	13 70       	andi	r17, 0x03	; 3
    1752:	61 2f       	mov	r22, r17
    1754:	70 e0       	ldi	r23, 0x00	; 0
    1756:	76 2f       	mov	r23, r22
    1758:	66 27       	eor	r22, r22
    175a:	6d 0d       	add	r22, r13
    175c:	71 1d       	adc	r23, r1
    175e:	07 2e       	mov	r0, r23
    1760:	00 0c       	add	r0, r0
    1762:	88 0b       	sbc	r24, r24
    1764:	99 0b       	sbc	r25, r25
    1766:	0e 94 89 11 	call	0x2312	; 0x2312 <__floatsisf>
    176a:	2d ec       	ldi	r18, 0xCD	; 205
    176c:	3c ec       	ldi	r19, 0xCC	; 204
    176e:	4c ec       	ldi	r20, 0xCC	; 204
    1770:	5d e3       	ldi	r21, 0x3D	; 61
    1772:	0e 94 39 12 	call	0x2472	; 0x2472 <__mulsf3>
    if (bits[2] & 0x80)  // negative temperature
    1776:	f7 fc       	sbrc	r15, 7
    1778:	05 c0       	rjmp	.+10     	; 0x1784 <_ZN3dht4readEh+0xa2>
    bits[0] &= 0x03;
    bits[2] &= 0x83;

    // CONVERT AND STORE
    humidity = (bits[0]*256 + bits[1]) * 0.1;
    temperature = ((bits[2] & 0x7F)*256 + bits[3]) * 0.1;
    177a:	6c 83       	std	Y+4, r22	; 0x04
    177c:	7d 83       	std	Y+5, r23	; 0x05
    177e:	8e 83       	std	Y+6, r24	; 0x06
    1780:	9f 83       	std	Y+7, r25	; 0x07
    1782:	07 c0       	rjmp	.+14     	; 0x1792 <_ZN3dht4readEh+0xb0>
    if (bits[2] & 0x80)  // negative temperature
    {
        temperature = -temperature;
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	b0 58       	subi	r27, 0x80	; 128
    178a:	8c 83       	std	Y+4, r24	; 0x04
    178c:	9d 83       	std	Y+5, r25	; 0x05
    178e:	ae 83       	std	Y+6, r26	; 0x06
    1790:	bf 83       	std	Y+7, r27	; 0x07
    }

    // TEST CHECKSUM
    uint8_t sum = bits[0] + bits[1] + bits[2] + bits[3];
    if (bits[4] != sum)
    1792:	dc 0c       	add	r13, r12
    1794:	0d 0d       	add	r16, r13
    1796:	f0 0e       	add	r15, r16
    1798:	8c 85       	ldd	r24, Y+12	; 0x0c
    179a:	f8 12       	cpse	r15, r24
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <_ZN3dht4readEh+0xc0>
    {
        return DHTLIB_ERROR_CHECKSUM;
    }
    return result;
    179e:	8e 2d       	mov	r24, r14
    17a0:	01 c0       	rjmp	.+2      	; 0x17a4 <_ZN3dht4readEh+0xc2>

    // TEST CHECKSUM
    uint8_t sum = bits[0] + bits[1] + bits[2] + bits[3];
    if (bits[4] != sum)
    {
        return DHTLIB_ERROR_CHECKSUM;
    17a2:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return result;
}
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	1f 91       	pop	r17
    17aa:	0f 91       	pop	r16
    17ac:	ff 90       	pop	r15
    17ae:	ef 90       	pop	r14
    17b0:	df 90       	pop	r13
    17b2:	cf 90       	pop	r12
    17b4:	08 95       	ret

000017b6 <_ZN7hd447806ioinitEv>:
	{
		buf[i] = pgm_read_byte(charmap++);
	}
	// call the RAM based function to actually send it to the LCD
	return(createChar(location, buf));
}
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	08 95       	ret

000017bc <_ZN7hd447806ioreadENS_6iotypeE>:
    17bc:	8d ef       	ldi	r24, 0xFD	; 253
    17be:	9f ef       	ldi	r25, 0xFF	; 255
    17c0:	08 95       	ret

000017c2 <_ZN7hd4478014iosetBacklightEh>:
    17c2:	8d ef       	ldi	r24, 0xFD	; 253
    17c4:	9f ef       	ldi	r25, 0xFF	; 255
    17c6:	08 95       	ret

000017c8 <_ZN7hd44780C1Ev>:
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
    17cc:	ec 01       	movw	r28, r24
    17ce:	1b 82       	std	Y+3, r1	; 0x03
    17d0:	1a 82       	std	Y+2, r1	; 0x02
    17d2:	83 e4       	ldi	r24, 0x43	; 67
    17d4:	92 e0       	ldi	r25, 0x02	; 2
    17d6:	99 83       	std	Y+1, r25	; 0x01
    17d8:	88 83       	st	Y, r24
    17da:	1f 82       	std	Y+7, r1	; 0x07
    17dc:	18 86       	std	Y+8, r1	; 0x08
    17de:	80 ed       	ldi	r24, 0xD0	; 208
    17e0:	97 e0       	ldi	r25, 0x07	; 7
    17e2:	a0 e0       	ldi	r26, 0x00	; 0
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	88 8b       	std	Y+16, r24	; 0x10
    17e8:	99 8b       	std	Y+17, r25	; 0x11
    17ea:	aa 8b       	std	Y+18, r26	; 0x12
    17ec:	bb 8b       	std	Y+19, r27	; 0x13
    17ee:	86 e2       	ldi	r24, 0x26	; 38
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	a0 e0       	ldi	r26, 0x00	; 0
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	8c 8b       	std	Y+20, r24	; 0x14
    17f8:	9d 8b       	std	Y+21, r25	; 0x15
    17fa:	ae 8b       	std	Y+22, r26	; 0x16
    17fc:	bf 8b       	std	Y+23, r27	; 0x17
    17fe:	1c 86       	std	Y+12, r1	; 0x0c
    1800:	1d 86       	std	Y+13, r1	; 0x0d
    1802:	1e 86       	std	Y+14, r1	; 0x0e
    1804:	1f 86       	std	Y+15, r1	; 0x0f
    1806:	1b 86       	std	Y+11, r1	; 0x0b
    1808:	0e 94 29 19 	call	0x3252	; 0x3252 <micros>
    180c:	68 8f       	std	Y+24, r22	; 0x18
    180e:	79 8f       	std	Y+25, r23	; 0x19
    1810:	8a 8f       	std	Y+26, r24	; 0x1a
    1812:	9b 8f       	std	Y+27, r25	; 0x1b
    1814:	1c 8e       	std	Y+28, r1	; 0x1c
    1816:	1d 8e       	std	Y+29, r1	; 0x1d
    1818:	1e 8e       	std	Y+30, r1	; 0x1e
    181a:	1f 8e       	std	Y+31, r1	; 0x1f
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	08 95       	ret

00001822 <_ZN7hd447809backlightEv>:
    1822:	dc 01       	movw	r26, r24
    1824:	ed 91       	ld	r30, X+
    1826:	fc 91       	ld	r31, X
    1828:	06 84       	ldd	r0, Z+14	; 0x0e
    182a:	f7 85       	ldd	r31, Z+15	; 0x0f
    182c:	e0 2d       	mov	r30, r0
    182e:	6f ef       	ldi	r22, 0xFF	; 255
    1830:	09 94       	ijmp

00001832 <_ZN7hd4478011noBacklightEv>:
    1832:	dc 01       	movw	r26, r24
    1834:	ed 91       	ld	r30, X+
    1836:	fc 91       	ld	r31, X
    1838:	06 84       	ldd	r0, Z+14	; 0x0e
    183a:	f7 85       	ldd	r31, Z+15	; 0x0f
    183c:	e0 2d       	mov	r30, r0
    183e:	60 e0       	ldi	r22, 0x00	; 0
    1840:	09 94       	ijmp

00001842 <_ZN7hd447807commandEh>:
    1842:	8f 92       	push	r8
    1844:	9f 92       	push	r9
    1846:	af 92       	push	r10
    1848:	bf 92       	push	r11
    184a:	ef 92       	push	r14
    184c:	ff 92       	push	r15
    184e:	1f 93       	push	r17
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	ec 01       	movw	r28, r24
    1856:	16 2f       	mov	r17, r22
    1858:	e8 81       	ld	r30, Y
    185a:	f9 81       	ldd	r31, Y+1	; 0x01
    185c:	04 84       	ldd	r0, Z+12	; 0x0c
    185e:	f5 85       	ldd	r31, Z+13	; 0x0d
    1860:	e0 2d       	mov	r30, r0
    1862:	46 2f       	mov	r20, r22
    1864:	60 e0       	ldi	r22, 0x00	; 0
    1866:	09 95       	icall
    1868:	7c 01       	movw	r14, r24
    186a:	11 50       	subi	r17, 0x01	; 1
    186c:	12 30       	cpi	r17, 0x02	; 2
    186e:	38 f4       	brcc	.+14     	; 0x187e <_ZN7hd447807commandEh+0x3c>
    1870:	19 86       	std	Y+9, r1	; 0x09
    1872:	1a 86       	std	Y+10, r1	; 0x0a
    1874:	88 88       	ldd	r8, Y+16	; 0x10
    1876:	99 88       	ldd	r9, Y+17	; 0x11
    1878:	aa 88       	ldd	r10, Y+18	; 0x12
    187a:	bb 88       	ldd	r11, Y+19	; 0x13
    187c:	04 c0       	rjmp	.+8      	; 0x1886 <_ZN7hd447807commandEh+0x44>
    187e:	8c 88       	ldd	r8, Y+20	; 0x14
    1880:	9d 88       	ldd	r9, Y+21	; 0x15
    1882:	ae 88       	ldd	r10, Y+22	; 0x16
    1884:	bf 88       	ldd	r11, Y+23	; 0x17
    1886:	0e 94 29 19 	call	0x3252	; 0x3252 <micros>
    188a:	68 8f       	std	Y+24, r22	; 0x18
    188c:	79 8f       	std	Y+25, r23	; 0x19
    188e:	8a 8f       	std	Y+26, r24	; 0x1a
    1890:	9b 8f       	std	Y+27, r25	; 0x1b
    1892:	8c 8e       	std	Y+28, r8	; 0x1c
    1894:	9d 8e       	std	Y+29, r9	; 0x1d
    1896:	ae 8e       	std	Y+30, r10	; 0x1e
    1898:	bf 8e       	std	Y+31, r11	; 0x1f
    189a:	c7 01       	movw	r24, r14
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	1f 91       	pop	r17
    18a2:	ff 90       	pop	r15
    18a4:	ef 90       	pop	r14
    18a6:	bf 90       	pop	r11
    18a8:	af 90       	pop	r10
    18aa:	9f 90       	pop	r9
    18ac:	8f 90       	pop	r8
    18ae:	08 95       	ret

000018b0 <_ZN7hd447805clearEv>:
    18b0:	61 e0       	ldi	r22, 0x01	; 1
    18b2:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <_ZN7hd447807commandEh>

000018b6 <_ZN7hd447804homeEv>:
    18b6:	62 e0       	ldi	r22, 0x02	; 2
    18b8:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <_ZN7hd447807commandEh>

000018bc <_ZN7hd447809setCursorEhh>:
    18bc:	fc 01       	movw	r30, r24
    18be:	80 85       	ldd	r24, Z+8	; 0x08
    18c0:	48 17       	cp	r20, r24
    18c2:	10 f0       	brcs	.+4      	; 0x18c8 <_ZN7hd447809setCursorEhh+0xc>
    18c4:	4f ef       	ldi	r20, 0xFF	; 255
    18c6:	48 0f       	add	r20, r24
    18c8:	93 85       	ldd	r25, Z+11	; 0x0b
    18ca:	99 23       	and	r25, r25
    18cc:	59 f0       	breq	.+22     	; 0x18e4 <_ZN7hd447809setCursorEhh+0x28>
    18ce:	97 81       	ldd	r25, Z+7	; 0x07
    18d0:	69 17       	cp	r22, r25
    18d2:	30 f0       	brcs	.+12     	; 0x18e0 <_ZN7hd447809setCursorEhh+0x24>
    18d4:	69 1b       	sub	r22, r25
    18d6:	4f 5f       	subi	r20, 0xFF	; 255
    18d8:	48 17       	cp	r20, r24
    18da:	d0 f3       	brcs	.-12     	; 0x18d0 <_ZN7hd447809setCursorEhh+0x14>
    18dc:	40 e0       	ldi	r20, 0x00	; 0
    18de:	f8 cf       	rjmp	.-16     	; 0x18d0 <_ZN7hd447809setCursorEhh+0x14>
    18e0:	61 87       	std	Z+9, r22	; 0x09
    18e2:	42 87       	std	Z+10, r20	; 0x0a
    18e4:	df 01       	movw	r26, r30
    18e6:	a4 0f       	add	r26, r20
    18e8:	b1 1d       	adc	r27, r1
    18ea:	1c 96       	adiw	r26, 0x0c	; 12
    18ec:	8c 91       	ld	r24, X
    18ee:	68 0f       	add	r22, r24
    18f0:	60 68       	ori	r22, 0x80	; 128
    18f2:	cf 01       	movw	r24, r30
    18f4:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <_ZN7hd447807commandEh>

000018f8 <_ZN7hd447807displayEv>:
    18f8:	fc 01       	movw	r30, r24
    18fa:	65 81       	ldd	r22, Z+5	; 0x05
    18fc:	26 2f       	mov	r18, r22
    18fe:	24 60       	ori	r18, 0x04	; 4
    1900:	25 83       	std	Z+5, r18	; 0x05
    1902:	6c 60       	ori	r22, 0x0C	; 12
    1904:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <_ZN7hd447807commandEh>

00001908 <_ZN7hd447805beginEhhh>:
    1908:	0f 93       	push	r16
    190a:	1f 93       	push	r17
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	ec 01       	movw	r28, r24
    1912:	02 2f       	mov	r16, r18
    1914:	14 2f       	mov	r17, r20
    1916:	45 30       	cpi	r20, 0x05	; 5
    1918:	08 f0       	brcs	.+2      	; 0x191c <_ZN7hd447805beginEhhh+0x14>
    191a:	14 e0       	ldi	r17, 0x04	; 4
    191c:	8c 85       	ldd	r24, Y+12	; 0x0c
    191e:	81 11       	cpse	r24, r1
    1920:	09 c0       	rjmp	.+18     	; 0x1934 <_ZN7hd447805beginEhhh+0x2c>
    1922:	8d 85       	ldd	r24, Y+13	; 0x0d
    1924:	81 11       	cpse	r24, r1
    1926:	06 c0       	rjmp	.+12     	; 0x1934 <_ZN7hd447805beginEhhh+0x2c>
    1928:	8e 85       	ldd	r24, Y+14	; 0x0e
    192a:	81 11       	cpse	r24, r1
    192c:	03 c0       	rjmp	.+6      	; 0x1934 <_ZN7hd447805beginEhhh+0x2c>
    192e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1930:	88 23       	and	r24, r24
    1932:	29 f0       	breq	.+10     	; 0x193e <_ZN7hd447805beginEhhh+0x36>
    1934:	8f 81       	ldd	r24, Y+7	; 0x07
    1936:	88 23       	and	r24, r24
    1938:	59 f0       	breq	.+22     	; 0x1950 <_ZN7hd447805beginEhhh+0x48>
    193a:	86 17       	cp	r24, r22
    193c:	49 f0       	breq	.+18     	; 0x1950 <_ZN7hd447805beginEhhh+0x48>
    193e:	1c 86       	std	Y+12, r1	; 0x0c
    1940:	80 e4       	ldi	r24, 0x40	; 64
    1942:	8d 87       	std	Y+13, r24	; 0x0d
    1944:	6e 87       	std	Y+14, r22	; 0x0e
    1946:	86 2f       	mov	r24, r22
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	80 5c       	subi	r24, 0xC0	; 192
    194c:	9f 4f       	sbci	r25, 0xFF	; 255
    194e:	8f 87       	std	Y+15, r24	; 0x0f
    1950:	18 87       	std	Y+8, r17	; 0x08
    1952:	6f 83       	std	Y+7, r22	; 0x07
    1954:	64 e6       	ldi	r22, 0x64	; 100
    1956:	70 e0       	ldi	r23, 0x00	; 0
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	0e 94 4e 19 	call	0x329c	; 0x329c <delay>
    1960:	1c 82       	std	Y+4, r1	; 0x04
    1962:	e8 81       	ld	r30, Y
    1964:	f9 81       	ldd	r31, Y+1	; 0x01
    1966:	00 84       	ldd	r0, Z+8	; 0x08
    1968:	f1 85       	ldd	r31, Z+9	; 0x09
    196a:	e0 2d       	mov	r30, r0
    196c:	ce 01       	movw	r24, r28
    196e:	09 95       	icall
    1970:	00 97       	sbiw	r24, 0x00	; 0
    1972:	09 f0       	breq	.+2      	; 0x1976 <_ZN7hd447805beginEhhh+0x6e>
    1974:	5e c0       	rjmp	.+188    	; 0x1a32 <_ZN7hd447805beginEhhh+0x12a>
    1976:	88 85       	ldd	r24, Y+8	; 0x08
    1978:	82 30       	cpi	r24, 0x02	; 2
    197a:	18 f0       	brcs	.+6      	; 0x1982 <_ZN7hd447805beginEhhh+0x7a>
    197c:	8c 81       	ldd	r24, Y+4	; 0x04
    197e:	88 60       	ori	r24, 0x08	; 8
    1980:	8c 83       	std	Y+4, r24	; 0x04
    1982:	00 23       	and	r16, r16
    1984:	29 f0       	breq	.+10     	; 0x1990 <_ZN7hd447805beginEhhh+0x88>
    1986:	11 30       	cpi	r17, 0x01	; 1
    1988:	19 f4       	brne	.+6      	; 0x1990 <_ZN7hd447805beginEhhh+0x88>
    198a:	8c 81       	ldd	r24, Y+4	; 0x04
    198c:	84 60       	ori	r24, 0x04	; 4
    198e:	8c 83       	std	Y+4, r24	; 0x04
    1990:	e8 81       	ld	r30, Y
    1992:	f9 81       	ldd	r31, Y+1	; 0x01
    1994:	04 84       	ldd	r0, Z+12	; 0x0c
    1996:	f5 85       	ldd	r31, Z+13	; 0x0d
    1998:	e0 2d       	mov	r30, r0
    199a:	40 e3       	ldi	r20, 0x30	; 48
    199c:	62 e0       	ldi	r22, 0x02	; 2
    199e:	ce 01       	movw	r24, r28
    19a0:	09 95       	icall
    19a2:	65 e0       	ldi	r22, 0x05	; 5
    19a4:	70 e0       	ldi	r23, 0x00	; 0
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	0e 94 4e 19 	call	0x329c	; 0x329c <delay>
    19ae:	e8 81       	ld	r30, Y
    19b0:	f9 81       	ldd	r31, Y+1	; 0x01
    19b2:	04 84       	ldd	r0, Z+12	; 0x0c
    19b4:	f5 85       	ldd	r31, Z+13	; 0x0d
    19b6:	e0 2d       	mov	r30, r0
    19b8:	40 e3       	ldi	r20, 0x30	; 48
    19ba:	62 e0       	ldi	r22, 0x02	; 2
    19bc:	ce 01       	movw	r24, r28
    19be:	09 95       	icall
    19c0:	61 e0       	ldi	r22, 0x01	; 1
    19c2:	70 e0       	ldi	r23, 0x00	; 0
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	0e 94 4e 19 	call	0x329c	; 0x329c <delay>
    19cc:	e8 81       	ld	r30, Y
    19ce:	f9 81       	ldd	r31, Y+1	; 0x01
    19d0:	04 84       	ldd	r0, Z+12	; 0x0c
    19d2:	f5 85       	ldd	r31, Z+13	; 0x0d
    19d4:	e0 2d       	mov	r30, r0
    19d6:	40 e3       	ldi	r20, 0x30	; 48
    19d8:	62 e0       	ldi	r22, 0x02	; 2
    19da:	ce 01       	movw	r24, r28
    19dc:	09 95       	icall
    19de:	61 e0       	ldi	r22, 0x01	; 1
    19e0:	70 e0       	ldi	r23, 0x00	; 0
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	0e 94 4e 19 	call	0x329c	; 0x329c <delay>
    19ea:	8c 81       	ldd	r24, Y+4	; 0x04
    19ec:	84 fd       	sbrc	r24, 4
    19ee:	09 c0       	rjmp	.+18     	; 0x1a02 <_ZN7hd447805beginEhhh+0xfa>
    19f0:	e8 81       	ld	r30, Y
    19f2:	f9 81       	ldd	r31, Y+1	; 0x01
    19f4:	04 84       	ldd	r0, Z+12	; 0x0c
    19f6:	f5 85       	ldd	r31, Z+13	; 0x0d
    19f8:	e0 2d       	mov	r30, r0
    19fa:	40 e2       	ldi	r20, 0x20	; 32
    19fc:	62 e0       	ldi	r22, 0x02	; 2
    19fe:	ce 01       	movw	r24, r28
    1a00:	09 95       	icall
    1a02:	6c 81       	ldd	r22, Y+4	; 0x04
    1a04:	60 62       	ori	r22, 0x20	; 32
    1a06:	ce 01       	movw	r24, r28
    1a08:	0e 94 21 0c 	call	0x1842	; 0x1842 <_ZN7hd447807commandEh>
    1a0c:	84 e0       	ldi	r24, 0x04	; 4
    1a0e:	8d 83       	std	Y+5, r24	; 0x05
    1a10:	ce 01       	movw	r24, r28
    1a12:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <_ZN7hd447807displayEv>
    1a16:	ce 01       	movw	r24, r28
    1a18:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_ZN7hd447805clearEv>
    1a1c:	82 e0       	ldi	r24, 0x02	; 2
    1a1e:	8e 83       	std	Y+6, r24	; 0x06
    1a20:	66 e0       	ldi	r22, 0x06	; 6
    1a22:	ce 01       	movw	r24, r28
    1a24:	0e 94 21 0c 	call	0x1842	; 0x1842 <_ZN7hd447807commandEh>
    1a28:	8c 01       	movw	r16, r24
    1a2a:	ce 01       	movw	r24, r28
    1a2c:	0e 94 11 0c 	call	0x1822	; 0x1822 <_ZN7hd447809backlightEv>
    1a30:	c8 01       	movw	r24, r16
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	08 95       	ret

00001a3c <_ZN7hd447808noCursorEv>:
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	65 81       	ldd	r22, Z+5	; 0x05
    1a40:	6d 7f       	andi	r22, 0xFD	; 253
    1a42:	65 83       	std	Z+5, r22	; 0x05
    1a44:	68 60       	ori	r22, 0x08	; 8
    1a46:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <_ZN7hd447807commandEh>

00001a4a <_ZN7hd447807noBlinkEv>:
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	65 81       	ldd	r22, Z+5	; 0x05
    1a4e:	6e 7f       	andi	r22, 0xFE	; 254
    1a50:	65 83       	std	Z+5, r22	; 0x05
    1a52:	68 60       	ori	r22, 0x08	; 8
    1a54:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <_ZN7hd447807commandEh>

00001a58 <_ZN7hd447806_writeEh>:
    1a58:	cf 92       	push	r12
    1a5a:	df 92       	push	r13
    1a5c:	ef 92       	push	r14
    1a5e:	ff 92       	push	r15
    1a60:	0f 93       	push	r16
    1a62:	1f 93       	push	r17
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
    1a68:	ec 01       	movw	r28, r24
    1a6a:	46 2f       	mov	r20, r22
    1a6c:	e8 81       	ld	r30, Y
    1a6e:	f9 81       	ldd	r31, Y+1	; 0x01
    1a70:	04 84       	ldd	r0, Z+12	; 0x0c
    1a72:	f5 85       	ldd	r31, Z+13	; 0x0d
    1a74:	e0 2d       	mov	r30, r0
    1a76:	61 e0       	ldi	r22, 0x01	; 1
    1a78:	09 95       	icall
    1a7a:	8c 01       	movw	r16, r24
    1a7c:	cc 88       	ldd	r12, Y+20	; 0x14
    1a7e:	dd 88       	ldd	r13, Y+21	; 0x15
    1a80:	ee 88       	ldd	r14, Y+22	; 0x16
    1a82:	ff 88       	ldd	r15, Y+23	; 0x17
    1a84:	0e 94 29 19 	call	0x3252	; 0x3252 <micros>
    1a88:	68 8f       	std	Y+24, r22	; 0x18
    1a8a:	79 8f       	std	Y+25, r23	; 0x19
    1a8c:	8a 8f       	std	Y+26, r24	; 0x1a
    1a8e:	9b 8f       	std	Y+27, r25	; 0x1b
    1a90:	cc 8e       	std	Y+28, r12	; 0x1c
    1a92:	dd 8e       	std	Y+29, r13	; 0x1d
    1a94:	ee 8e       	std	Y+30, r14	; 0x1e
    1a96:	ff 8e       	std	Y+31, r15	; 0x1f
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	01 2b       	or	r16, r17
    1a9e:	11 f0       	breq	.+4      	; 0x1aa4 <_ZN7hd447806_writeEh+0x4c>
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	1f 91       	pop	r17
    1aaa:	0f 91       	pop	r16
    1aac:	ff 90       	pop	r15
    1aae:	ef 90       	pop	r14
    1ab0:	df 90       	pop	r13
    1ab2:	cf 90       	pop	r12
    1ab4:	08 95       	ret

00001ab6 <_ZN7hd447805writeEh>:

// write() - process data character byte to lcd
// returns number of bytes successfully written to device
// i.e. 1 if success or 0 if no character was processed (error)
size_t hd44780::write(uint8_t value)
{
    1ab6:	0f 93       	push	r16
    1ab8:	1f 93       	push	r17
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	ec 01       	movw	r28, r24
size_t rval;

	rval = _write(value);
    1ac0:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_ZN7hd447806_writeEh>
    1ac4:	8c 01       	movw	r16, r24
	if(_wraplines)
    1ac6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ac8:	88 23       	and	r24, r24
    1aca:	99 f0       	breq	.+38     	; 0x1af2 <_ZN7hd447805writeEh+0x3c>
	{
		// currently only works for left to right mode
		if(++_curcol >= _cols)
    1acc:	89 85       	ldd	r24, Y+9	; 0x09
    1ace:	8f 5f       	subi	r24, 0xFF	; 255
    1ad0:	89 87       	std	Y+9, r24	; 0x09
    1ad2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ad4:	89 17       	cp	r24, r25
    1ad6:	68 f0       	brcs	.+26     	; 0x1af2 <_ZN7hd447805writeEh+0x3c>
		{
			_curcol = 0;
    1ad8:	19 86       	std	Y+9, r1	; 0x09
			_currow++;
    1ada:	8a 85       	ldd	r24, Y+10	; 0x0a
    1adc:	8f 5f       	subi	r24, 0xFF	; 255
    1ade:	8a 87       	std	Y+10, r24	; 0x0a
			if(_currow >= _rows)
    1ae0:	98 85       	ldd	r25, Y+8	; 0x08
    1ae2:	89 17       	cp	r24, r25
    1ae4:	08 f0       	brcs	.+2      	; 0x1ae8 <_ZN7hd447805writeEh+0x32>
				_currow = 0;
    1ae6:	1a 86       	std	Y+10, r1	; 0x0a
			setCursor(_curcol, _currow);
    1ae8:	4a 85       	ldd	r20, Y+10	; 0x0a
    1aea:	60 e0       	ldi	r22, 0x00	; 0
    1aec:	ce 01       	movw	r24, r28
    1aee:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <_ZN7hd447809setCursorEhh>
		}
	}
	return (rval);
}
    1af2:	c8 01       	movw	r24, r16
    1af4:	df 91       	pop	r29
    1af6:	cf 91       	pop	r28
    1af8:	1f 91       	pop	r17
    1afa:	0f 91       	pop	r16
    1afc:	08 95       	ret

00001afe <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1afe:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <twi_state>
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <twi_sendStop>
    1b08:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <twi_inRepStart>
    1b0c:	61 e0       	ldi	r22, 0x01	; 1
    1b0e:	82 e0       	ldi	r24, 0x02	; 2
    1b10:	0e 94 95 1a 	call	0x352a	; 0x352a <digitalWrite>
    1b14:	61 e0       	ldi	r22, 0x01	; 1
    1b16:	83 e0       	ldi	r24, 0x03	; 3
    1b18:	0e 94 95 1a 	call	0x352a	; 0x352a <digitalWrite>
    1b1c:	e9 eb       	ldi	r30, 0xB9	; 185
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	8e 7f       	andi	r24, 0xFE	; 254
    1b24:	80 83       	st	Z, r24
    1b26:	80 81       	ld	r24, Z
    1b28:	8d 7f       	andi	r24, 0xFD	; 253
    1b2a:	80 83       	st	Z, r24
    1b2c:	88 e4       	ldi	r24, 0x48	; 72
    1b2e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1b32:	85 e4       	ldi	r24, 0x45	; 69
    1b34:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1b38:	08 95       	ret

00001b3a <twi_readFrom>:
    1b3a:	41 32       	cpi	r20, 0x21	; 33
    1b3c:	08 f0       	brcs	.+2      	; 0x1b40 <twi_readFrom+0x6>
    1b3e:	43 c0       	rjmp	.+134    	; 0x1bc6 <twi_readFrom+0x8c>
    1b40:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <twi_state>
    1b44:	91 11       	cpse	r25, r1
    1b46:	fc cf       	rjmp	.-8      	; 0x1b40 <twi_readFrom+0x6>
    1b48:	91 e0       	ldi	r25, 0x01	; 1
    1b4a:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <twi_state>
    1b4e:	20 93 24 04 	sts	0x0424, r18	; 0x800424 <twi_sendStop>
    1b52:	2f ef       	ldi	r18, 0xFF	; 255
    1b54:	20 93 b9 03 	sts	0x03B9, r18	; 0x8003b9 <twi_error>
    1b58:	10 92 fe 03 	sts	0x03FE, r1	; 0x8003fe <twi_masterBufferIndex>
    1b5c:	24 0f       	add	r18, r20
    1b5e:	20 93 fd 03 	sts	0x03FD, r18	; 0x8003fd <twi_masterBufferLength>
    1b62:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <twi_slarw>
    1b66:	90 91 25 04 	lds	r25, 0x0425	; 0x800425 <twi_slarw>
    1b6a:	88 0f       	add	r24, r24
    1b6c:	89 2b       	or	r24, r25
    1b6e:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <twi_slarw>
    1b72:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <twi_inRepStart>
    1b76:	81 30       	cpi	r24, 0x01	; 1
    1b78:	61 f4       	brne	.+24     	; 0x1b92 <twi_readFrom+0x58>
    1b7a:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <twi_inRepStart>
    1b7e:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <twi_slarw>
    1b82:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1b86:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1b8a:	83 fd       	sbrc	r24, 3
    1b8c:	f8 cf       	rjmp	.-16     	; 0x1b7e <twi_readFrom+0x44>
    1b8e:	85 ec       	ldi	r24, 0xC5	; 197
    1b90:	01 c0       	rjmp	.+2      	; 0x1b94 <twi_readFrom+0x5a>
    1b92:	85 ee       	ldi	r24, 0xE5	; 229
    1b94:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1b98:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <twi_state>
    1b9c:	81 30       	cpi	r24, 0x01	; 1
    1b9e:	e1 f3       	breq	.-8      	; 0x1b98 <twi_readFrom+0x5e>
    1ba0:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <twi_masterBufferIndex>
    1ba4:	84 17       	cp	r24, r20
    1ba6:	10 f4       	brcc	.+4      	; 0x1bac <twi_readFrom+0x72>
    1ba8:	40 91 fe 03 	lds	r20, 0x03FE	; 0x8003fe <twi_masterBufferIndex>
    1bac:	af ef       	ldi	r26, 0xFF	; 255
    1bae:	b3 e0       	ldi	r27, 0x03	; 3
    1bb0:	96 2f       	mov	r25, r22
    1bb2:	fb 01       	movw	r30, r22
    1bb4:	8e 2f       	mov	r24, r30
    1bb6:	89 1b       	sub	r24, r25
    1bb8:	84 17       	cp	r24, r20
    1bba:	18 f4       	brcc	.+6      	; 0x1bc2 <twi_readFrom+0x88>
    1bbc:	8d 91       	ld	r24, X+
    1bbe:	81 93       	st	Z+, r24
    1bc0:	f9 cf       	rjmp	.-14     	; 0x1bb4 <twi_readFrom+0x7a>
    1bc2:	84 2f       	mov	r24, r20
    1bc4:	08 95       	ret
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	08 95       	ret

00001bca <twi_writeTo>:
    1bca:	0f 93       	push	r16
    1bcc:	41 32       	cpi	r20, 0x21	; 33
    1bce:	08 f0       	brcs	.+2      	; 0x1bd2 <twi_writeTo+0x8>
    1bd0:	4a c0       	rjmp	.+148    	; 0x1c66 <twi_writeTo+0x9c>
    1bd2:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <twi_state>
    1bd6:	91 11       	cpse	r25, r1
    1bd8:	fc cf       	rjmp	.-8      	; 0x1bd2 <twi_writeTo+0x8>
    1bda:	32 e0       	ldi	r19, 0x02	; 2
    1bdc:	30 93 26 04 	sts	0x0426, r19	; 0x800426 <twi_state>
    1be0:	00 93 24 04 	sts	0x0424, r16	; 0x800424 <twi_sendStop>
    1be4:	3f ef       	ldi	r19, 0xFF	; 255
    1be6:	30 93 b9 03 	sts	0x03B9, r19	; 0x8003b9 <twi_error>
    1bea:	10 92 fe 03 	sts	0x03FE, r1	; 0x8003fe <twi_masterBufferIndex>
    1bee:	40 93 fd 03 	sts	0x03FD, r20	; 0x8003fd <twi_masterBufferLength>
    1bf2:	56 2f       	mov	r21, r22
    1bf4:	af ef       	ldi	r26, 0xFF	; 255
    1bf6:	b3 e0       	ldi	r27, 0x03	; 3
    1bf8:	fb 01       	movw	r30, r22
    1bfa:	3e 2f       	mov	r19, r30
    1bfc:	35 1b       	sub	r19, r21
    1bfe:	34 17       	cp	r19, r20
    1c00:	18 f4       	brcc	.+6      	; 0x1c08 <twi_writeTo+0x3e>
    1c02:	31 91       	ld	r19, Z+
    1c04:	3d 93       	st	X+, r19
    1c06:	f9 cf       	rjmp	.-14     	; 0x1bfa <twi_writeTo+0x30>
    1c08:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <twi_slarw>
    1c0c:	30 91 25 04 	lds	r19, 0x0425	; 0x800425 <twi_slarw>
    1c10:	88 0f       	add	r24, r24
    1c12:	83 2b       	or	r24, r19
    1c14:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <twi_slarw>
    1c18:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <twi_inRepStart>
    1c1c:	81 30       	cpi	r24, 0x01	; 1
    1c1e:	61 f4       	brne	.+24     	; 0x1c38 <twi_writeTo+0x6e>
    1c20:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <twi_inRepStart>
    1c24:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <twi_slarw>
    1c28:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1c2c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1c30:	83 fd       	sbrc	r24, 3
    1c32:	f8 cf       	rjmp	.-16     	; 0x1c24 <twi_writeTo+0x5a>
    1c34:	85 ec       	ldi	r24, 0xC5	; 197
    1c36:	01 c0       	rjmp	.+2      	; 0x1c3a <twi_writeTo+0x70>
    1c38:	85 ee       	ldi	r24, 0xE5	; 229
    1c3a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1c3e:	22 23       	and	r18, r18
    1c40:	21 f0       	breq	.+8      	; 0x1c4a <twi_writeTo+0x80>
    1c42:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <twi_state>
    1c46:	82 30       	cpi	r24, 0x02	; 2
    1c48:	d1 f3       	breq	.-12     	; 0x1c3e <twi_writeTo+0x74>
    1c4a:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <twi_error>
    1c4e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c50:	79 f0       	breq	.+30     	; 0x1c70 <twi_writeTo+0xa6>
    1c52:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <twi_error>
    1c56:	80 32       	cpi	r24, 0x20	; 32
    1c58:	41 f0       	breq	.+16     	; 0x1c6a <twi_writeTo+0xa0>
    1c5a:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <twi_error>
    1c5e:	80 33       	cpi	r24, 0x30	; 48
    1c60:	31 f0       	breq	.+12     	; 0x1c6e <twi_writeTo+0xa4>
    1c62:	94 e0       	ldi	r25, 0x04	; 4
    1c64:	05 c0       	rjmp	.+10     	; 0x1c70 <twi_writeTo+0xa6>
    1c66:	91 e0       	ldi	r25, 0x01	; 1
    1c68:	03 c0       	rjmp	.+6      	; 0x1c70 <twi_writeTo+0xa6>
    1c6a:	92 e0       	ldi	r25, 0x02	; 2
    1c6c:	01 c0       	rjmp	.+2      	; 0x1c70 <twi_writeTo+0xa6>
    1c6e:	93 e0       	ldi	r25, 0x03	; 3
    1c70:	89 2f       	mov	r24, r25
    1c72:	0f 91       	pop	r16
    1c74:	08 95       	ret

00001c76 <twi_transmit>:
    1c76:	40 91 db 03 	lds	r20, 0x03DB	; 0x8003db <twi_txBufferLength>
    1c7a:	26 2f       	mov	r18, r22
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	24 0f       	add	r18, r20
    1c80:	31 1d       	adc	r19, r1
    1c82:	21 32       	cpi	r18, 0x21	; 33
    1c84:	31 05       	cpc	r19, r1
    1c86:	dc f4       	brge	.+54     	; 0x1cbe <twi_transmit+0x48>
    1c88:	20 91 26 04 	lds	r18, 0x0426	; 0x800426 <twi_state>
    1c8c:	24 30       	cpi	r18, 0x04	; 4
    1c8e:	c9 f4       	brne	.+50     	; 0x1cc2 <twi_transmit+0x4c>
    1c90:	fc 01       	movw	r30, r24
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	86 17       	cp	r24, r22
    1c98:	58 f4       	brcc	.+22     	; 0x1cb0 <twi_transmit+0x3a>
    1c9a:	30 91 db 03 	lds	r19, 0x03DB	; 0x8003db <twi_txBufferLength>
    1c9e:	21 91       	ld	r18, Z+
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	a3 52       	subi	r26, 0x23	; 35
    1ca4:	bc 4f       	sbci	r27, 0xFC	; 252
    1ca6:	a3 0f       	add	r26, r19
    1ca8:	b1 1d       	adc	r27, r1
    1caa:	2c 93       	st	X, r18
    1cac:	01 96       	adiw	r24, 0x01	; 1
    1cae:	f3 cf       	rjmp	.-26     	; 0x1c96 <twi_transmit+0x20>
    1cb0:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <twi_txBufferLength>
    1cb4:	68 0f       	add	r22, r24
    1cb6:	60 93 db 03 	sts	0x03DB, r22	; 0x8003db <twi_txBufferLength>
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	08 95       	ret
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	08 95       	ret
    1cc2:	82 e0       	ldi	r24, 0x02	; 2
    1cc4:	08 95       	ret

00001cc6 <twi_attachSlaveRxEvent>:
    1cc6:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <twi_onSlaveReceive+0x1>
    1cca:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <twi_onSlaveReceive>
    1cce:	08 95       	ret

00001cd0 <twi_attachSlaveTxEvent>:
    1cd0:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <twi_onSlaveTransmit+0x1>
    1cd4:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <twi_onSlaveTransmit>
    1cd8:	08 95       	ret

00001cda <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1cda:	85 ed       	ldi	r24, 0xD5	; 213
    1cdc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1ce0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1ce4:	84 fd       	sbrc	r24, 4
    1ce6:	fc cf       	rjmp	.-8      	; 0x1ce0 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1ce8:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <twi_state>
    1cec:	08 95       	ret

00001cee <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1cee:	85 ec       	ldi	r24, 0xC5	; 197
    1cf0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    1cf4:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <twi_state>
    1cf8:	08 95       	ret

00001cfa <__vector_36>:
}

ISR(TWI_vect)
{
    1cfa:	1f 92       	push	r1
    1cfc:	0f 92       	push	r0
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	0f 92       	push	r0
    1d02:	11 24       	eor	r1, r1
    1d04:	2f 93       	push	r18
    1d06:	3f 93       	push	r19
    1d08:	4f 93       	push	r20
    1d0a:	5f 93       	push	r21
    1d0c:	6f 93       	push	r22
    1d0e:	7f 93       	push	r23
    1d10:	8f 93       	push	r24
    1d12:	9f 93       	push	r25
    1d14:	af 93       	push	r26
    1d16:	bf 93       	push	r27
    1d18:	ef 93       	push	r30
    1d1a:	ff 93       	push	r31
  switch(TW_STATUS){
    1d1c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1d20:	88 7f       	andi	r24, 0xF8	; 248
    1d22:	80 36       	cpi	r24, 0x60	; 96
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <__vector_36+0x2e>
    1d26:	9e c0       	rjmp	.+316    	; 0x1e64 <__vector_36+0x16a>
    1d28:	78 f5       	brcc	.+94     	; 0x1d88 <__vector_36+0x8e>
    1d2a:	88 32       	cpi	r24, 0x28	; 40
    1d2c:	09 f4       	brne	.+2      	; 0x1d30 <__vector_36+0x36>
    1d2e:	5d c0       	rjmp	.+186    	; 0x1dea <__vector_36+0xf0>
    1d30:	90 f4       	brcc	.+36     	; 0x1d56 <__vector_36+0x5c>
    1d32:	80 31       	cpi	r24, 0x10	; 16
    1d34:	09 f4       	brne	.+2      	; 0x1d38 <__vector_36+0x3e>
    1d36:	56 c0       	rjmp	.+172    	; 0x1de4 <__vector_36+0xea>
    1d38:	38 f4       	brcc	.+14     	; 0x1d48 <__vector_36+0x4e>
    1d3a:	88 23       	and	r24, r24
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <__vector_36+0x46>
    1d3e:	f5 c0       	rjmp	.+490    	; 0x1f2a <__vector_36+0x230>
    1d40:	88 30       	cpi	r24, 0x08	; 8
    1d42:	09 f4       	brne	.+2      	; 0x1d46 <__vector_36+0x4c>
    1d44:	4f c0       	rjmp	.+158    	; 0x1de4 <__vector_36+0xea>
    1d46:	f5 c0       	rjmp	.+490    	; 0x1f32 <__vector_36+0x238>
    1d48:	88 31       	cpi	r24, 0x18	; 24
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <__vector_36+0x54>
    1d4c:	4e c0       	rjmp	.+156    	; 0x1dea <__vector_36+0xf0>
    1d4e:	80 32       	cpi	r24, 0x20	; 32
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <__vector_36+0x5a>
    1d52:	5f c0       	rjmp	.+190    	; 0x1e12 <__vector_36+0x118>
    1d54:	ee c0       	rjmp	.+476    	; 0x1f32 <__vector_36+0x238>
    1d56:	80 34       	cpi	r24, 0x40	; 64
    1d58:	09 f4       	brne	.+2      	; 0x1d5c <__vector_36+0x62>
    1d5a:	6a c0       	rjmp	.+212    	; 0x1e30 <__vector_36+0x136>
    1d5c:	58 f4       	brcc	.+22     	; 0x1d74 <__vector_36+0x7a>
    1d5e:	80 33       	cpi	r24, 0x30	; 48
    1d60:	09 f4       	brne	.+2      	; 0x1d64 <__vector_36+0x6a>
    1d62:	57 c0       	rjmp	.+174    	; 0x1e12 <__vector_36+0x118>
    1d64:	88 33       	cpi	r24, 0x38	; 56
    1d66:	09 f0       	breq	.+2      	; 0x1d6a <__vector_36+0x70>
    1d68:	e4 c0       	rjmp	.+456    	; 0x1f32 <__vector_36+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1d6a:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <twi_error>
      twi_releaseBus();
    1d6e:	0e 94 77 0e 	call	0x1cee	; 0x1cee <twi_releaseBus>
      break;
    1d72:	df c0       	rjmp	.+446    	; 0x1f32 <__vector_36+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1d74:	80 35       	cpi	r24, 0x50	; 80
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <__vector_36+0x80>
    1d78:	4f c0       	rjmp	.+158    	; 0x1e18 <__vector_36+0x11e>
    1d7a:	88 35       	cpi	r24, 0x58	; 88
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <__vector_36+0x86>
    1d7e:	5d c0       	rjmp	.+186    	; 0x1e3a <__vector_36+0x140>
    1d80:	88 34       	cpi	r24, 0x48	; 72
    1d82:	09 f0       	breq	.+2      	; 0x1d86 <__vector_36+0x8c>
    1d84:	d6 c0       	rjmp	.+428    	; 0x1f32 <__vector_36+0x238>
    1d86:	d3 c0       	rjmp	.+422    	; 0x1f2e <__vector_36+0x234>
    1d88:	88 39       	cpi	r24, 0x98	; 152
    1d8a:	09 f4       	brne	.+2      	; 0x1d8e <__vector_36+0x94>
    1d8c:	c4 c0       	rjmp	.+392    	; 0x1f16 <__vector_36+0x21c>
    1d8e:	a8 f4       	brcc	.+42     	; 0x1dba <__vector_36+0xc0>
    1d90:	88 37       	cpi	r24, 0x78	; 120
    1d92:	09 f4       	brne	.+2      	; 0x1d96 <__vector_36+0x9c>
    1d94:	67 c0       	rjmp	.+206    	; 0x1e64 <__vector_36+0x16a>
    1d96:	38 f4       	brcc	.+14     	; 0x1da6 <__vector_36+0xac>
    1d98:	88 36       	cpi	r24, 0x68	; 104
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <__vector_36+0xa4>
    1d9c:	63 c0       	rjmp	.+198    	; 0x1e64 <__vector_36+0x16a>
    1d9e:	80 37       	cpi	r24, 0x70	; 112
    1da0:	09 f4       	brne	.+2      	; 0x1da4 <__vector_36+0xaa>
    1da2:	60 c0       	rjmp	.+192    	; 0x1e64 <__vector_36+0x16a>
    1da4:	c6 c0       	rjmp	.+396    	; 0x1f32 <__vector_36+0x238>
    1da6:	88 38       	cpi	r24, 0x88	; 136
    1da8:	09 f4       	brne	.+2      	; 0x1dac <__vector_36+0xb2>
    1daa:	b5 c0       	rjmp	.+362    	; 0x1f16 <__vector_36+0x21c>
    1dac:	80 39       	cpi	r24, 0x90	; 144
    1dae:	09 f4       	brne	.+2      	; 0x1db2 <__vector_36+0xb8>
    1db0:	5f c0       	rjmp	.+190    	; 0x1e70 <__vector_36+0x176>
    1db2:	80 38       	cpi	r24, 0x80	; 128
    1db4:	09 f0       	breq	.+2      	; 0x1db8 <__vector_36+0xbe>
    1db6:	bd c0       	rjmp	.+378    	; 0x1f32 <__vector_36+0x238>
    1db8:	5b c0       	rjmp	.+182    	; 0x1e70 <__vector_36+0x176>
    1dba:	80 3b       	cpi	r24, 0xB0	; 176
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <__vector_36+0xc6>
    1dbe:	83 c0       	rjmp	.+262    	; 0x1ec6 <__vector_36+0x1cc>
    1dc0:	38 f4       	brcc	.+14     	; 0x1dd0 <__vector_36+0xd6>
    1dc2:	80 3a       	cpi	r24, 0xA0	; 160
    1dc4:	09 f4       	brne	.+2      	; 0x1dc8 <__vector_36+0xce>
    1dc6:	66 c0       	rjmp	.+204    	; 0x1e94 <__vector_36+0x19a>
    1dc8:	88 3a       	cpi	r24, 0xA8	; 168
    1dca:	09 f4       	brne	.+2      	; 0x1dce <__vector_36+0xd4>
    1dcc:	7c c0       	rjmp	.+248    	; 0x1ec6 <__vector_36+0x1cc>
    1dce:	b1 c0       	rjmp	.+354    	; 0x1f32 <__vector_36+0x238>
    1dd0:	80 3c       	cpi	r24, 0xC0	; 192
    1dd2:	09 f4       	brne	.+2      	; 0x1dd6 <__vector_36+0xdc>
    1dd4:	a4 c0       	rjmp	.+328    	; 0x1f1e <__vector_36+0x224>
    1dd6:	88 3c       	cpi	r24, 0xC8	; 200
    1dd8:	09 f4       	brne	.+2      	; 0x1ddc <__vector_36+0xe2>
    1dda:	a1 c0       	rjmp	.+322    	; 0x1f1e <__vector_36+0x224>
    1ddc:	88 3b       	cpi	r24, 0xB8	; 184
    1dde:	09 f4       	brne	.+2      	; 0x1de2 <__vector_36+0xe8>
    1de0:	87 c0       	rjmp	.+270    	; 0x1ef0 <__vector_36+0x1f6>
    1de2:	a7 c0       	rjmp	.+334    	; 0x1f32 <__vector_36+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1de4:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <twi_slarw>
    1de8:	10 c0       	rjmp	.+32     	; 0x1e0a <__vector_36+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1dea:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <twi_masterBufferIndex>
    1dee:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <twi_masterBufferLength>
    1df2:	98 17       	cp	r25, r24
    1df4:	70 f5       	brcc	.+92     	; 0x1e52 <__vector_36+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1df6:	e0 91 fe 03 	lds	r30, 0x03FE	; 0x8003fe <twi_masterBufferIndex>
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	8e 0f       	add	r24, r30
    1dfe:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <twi_masterBufferIndex>
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	e1 50       	subi	r30, 0x01	; 1
    1e06:	fc 4f       	sbci	r31, 0xFC	; 252
    1e08:	80 81       	ld	r24, Z
    1e0a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1e0e:	85 ec       	ldi	r24, 0xC5	; 197
    1e10:	83 c0       	rjmp	.+262    	; 0x1f18 <__vector_36+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1e12:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <twi_error>
    1e16:	8b c0       	rjmp	.+278    	; 0x1f2e <__vector_36+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1e18:	e0 91 fe 03 	lds	r30, 0x03FE	; 0x8003fe <twi_masterBufferIndex>
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	8e 0f       	add	r24, r30
    1e20:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <twi_masterBufferIndex>
    1e24:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	e1 50       	subi	r30, 0x01	; 1
    1e2c:	fc 4f       	sbci	r31, 0xFC	; 252
    1e2e:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1e30:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <twi_masterBufferIndex>
    1e34:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <twi_masterBufferLength>
    1e38:	6b c0       	rjmp	.+214    	; 0x1f10 <__vector_36+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1e3a:	e0 91 fe 03 	lds	r30, 0x03FE	; 0x8003fe <twi_masterBufferIndex>
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	8e 0f       	add	r24, r30
    1e42:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <twi_masterBufferIndex>
    1e46:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	e1 50       	subi	r30, 0x01	; 1
    1e4e:	fc 4f       	sbci	r31, 0xFC	; 252
    1e50:	80 83       	st	Z, r24
	if (twi_sendStop)
    1e52:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <twi_sendStop>
    1e56:	81 11       	cpse	r24, r1
    1e58:	6a c0       	rjmp	.+212    	; 0x1f2e <__vector_36+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1e60:	84 ea       	ldi	r24, 0xA4	; 164
    1e62:	5e c0       	rjmp	.+188    	; 0x1f20 <__vector_36+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1e64:	83 e0       	ldi	r24, 0x03	; 3
    1e66:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1e6a:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <twi_rxBufferIndex>
    1e6e:	cf cf       	rjmp	.-98     	; 0x1e0e <__vector_36+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1e70:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <twi_rxBufferIndex>
    1e74:	80 32       	cpi	r24, 0x20	; 32
    1e76:	08 f0       	brcs	.+2      	; 0x1e7a <__vector_36+0x180>
    1e78:	4e c0       	rjmp	.+156    	; 0x1f16 <__vector_36+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1e7a:	e0 91 ba 03 	lds	r30, 0x03BA	; 0x8003ba <twi_rxBufferIndex>
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	8e 0f       	add	r24, r30
    1e82:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <twi_rxBufferIndex>
    1e86:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	e5 54       	subi	r30, 0x45	; 69
    1e8e:	fc 4f       	sbci	r31, 0xFC	; 252
    1e90:	80 83       	st	Z, r24
    1e92:	bd cf       	rjmp	.-134    	; 0x1e0e <__vector_36+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1e94:	0e 94 77 0e 	call	0x1cee	; 0x1cee <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1e98:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <twi_rxBufferIndex>
    1e9c:	80 32       	cpi	r24, 0x20	; 32
    1e9e:	30 f4       	brcc	.+12     	; 0x1eac <__vector_36+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1ea0:	e0 91 ba 03 	lds	r30, 0x03BA	; 0x8003ba <twi_rxBufferIndex>
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	e5 54       	subi	r30, 0x45	; 69
    1ea8:	fc 4f       	sbci	r31, 0xFC	; 252
    1eaa:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1eac:	60 91 ba 03 	lds	r22, 0x03BA	; 0x8003ba <twi_rxBufferIndex>
    1eb0:	70 e0       	ldi	r23, 0x00	; 0
    1eb2:	e0 91 1f 04 	lds	r30, 0x041F	; 0x80041f <twi_onSlaveReceive>
    1eb6:	f0 91 20 04 	lds	r31, 0x0420	; 0x800420 <twi_onSlaveReceive+0x1>
    1eba:	8b eb       	ldi	r24, 0xBB	; 187
    1ebc:	93 e0       	ldi	r25, 0x03	; 3
    1ebe:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1ec0:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <twi_rxBufferIndex>
      break;
    1ec4:	36 c0       	rjmp	.+108    	; 0x1f32 <__vector_36+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1ec6:	84 e0       	ldi	r24, 0x04	; 4
    1ec8:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1ecc:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1ed0:	10 92 db 03 	sts	0x03DB, r1	; 0x8003db <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1ed4:	e0 91 21 04 	lds	r30, 0x0421	; 0x800421 <twi_onSlaveTransmit>
    1ed8:	f0 91 22 04 	lds	r31, 0x0422	; 0x800422 <twi_onSlaveTransmit+0x1>
    1edc:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1ede:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <twi_txBufferLength>
    1ee2:	81 11       	cpse	r24, r1
    1ee4:	05 c0       	rjmp	.+10     	; 0x1ef0 <__vector_36+0x1f6>
        twi_txBufferLength = 1;
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1eec:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1ef0:	e0 91 dc 03 	lds	r30, 0x03DC	; 0x8003dc <twi_txBufferIndex>
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	8e 0f       	add	r24, r30
    1ef8:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <twi_txBufferIndex>
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	e3 52       	subi	r30, 0x23	; 35
    1f00:	fc 4f       	sbci	r31, 0xFC	; 252
    1f02:	80 81       	ld	r24, Z
    1f04:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1f08:	90 91 dc 03 	lds	r25, 0x03DC	; 0x8003dc <twi_txBufferIndex>
    1f0c:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <twi_txBufferLength>
    1f10:	98 17       	cp	r25, r24
    1f12:	08 f4       	brcc	.+2      	; 0x1f16 <__vector_36+0x21c>
    1f14:	7c cf       	rjmp	.-264    	; 0x1e0e <__vector_36+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1f16:	85 e8       	ldi	r24, 0x85	; 133
    1f18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1f1c:	0a c0       	rjmp	.+20     	; 0x1f32 <__vector_36+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1f1e:	85 ec       	ldi	r24, 0xC5	; 197
    1f20:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1f24:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <twi_state>
      break;
    1f28:	04 c0       	rjmp	.+8      	; 0x1f32 <__vector_36+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1f2a:	10 92 b9 03 	sts	0x03B9, r1	; 0x8003b9 <twi_error>
      twi_stop();
    1f2e:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <twi_stop>
      break;
  }
}
    1f32:	ff 91       	pop	r31
    1f34:	ef 91       	pop	r30
    1f36:	bf 91       	pop	r27
    1f38:	af 91       	pop	r26
    1f3a:	9f 91       	pop	r25
    1f3c:	8f 91       	pop	r24
    1f3e:	7f 91       	pop	r23
    1f40:	6f 91       	pop	r22
    1f42:	5f 91       	pop	r21
    1f44:	4f 91       	pop	r20
    1f46:	3f 91       	pop	r19
    1f48:	2f 91       	pop	r18
    1f4a:	0f 90       	pop	r0
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	0f 90       	pop	r0
    1f50:	1f 90       	pop	r1
    1f52:	18 95       	reti

00001f54 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1f54:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <_ZN7TwoWire14rxBufferLengthE>
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	20 91 5c 04 	lds	r18, 0x045C	; 0x80045c <_ZN7TwoWire13rxBufferIndexE>
    1f5e:	82 1b       	sub	r24, r18
    1f60:	91 09       	sbc	r25, r1
    1f62:	08 95       	ret

00001f64 <_ZN7TwoWire4readEv>:
    1f64:	90 91 5c 04 	lds	r25, 0x045C	; 0x80045c <_ZN7TwoWire13rxBufferIndexE>
    1f68:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <_ZN7TwoWire14rxBufferLengthE>
    1f6c:	98 17       	cp	r25, r24
    1f6e:	50 f4       	brcc	.+20     	; 0x1f84 <_ZN7TwoWire4readEv+0x20>
    1f70:	e9 2f       	mov	r30, r25
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	e3 5a       	subi	r30, 0xA3	; 163
    1f76:	fb 4f       	sbci	r31, 0xFB	; 251
    1f78:	20 81       	ld	r18, Z
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	9f 5f       	subi	r25, 0xFF	; 255
    1f7e:	90 93 5c 04 	sts	0x045C, r25	; 0x80045c <_ZN7TwoWire13rxBufferIndexE>
    1f82:	02 c0       	rjmp	.+4      	; 0x1f88 <_ZN7TwoWire4readEv+0x24>
    1f84:	2f ef       	ldi	r18, 0xFF	; 255
    1f86:	3f ef       	ldi	r19, 0xFF	; 255
    1f88:	c9 01       	movw	r24, r18
    1f8a:	08 95       	ret

00001f8c <_ZN7TwoWire4peekEv>:
    1f8c:	e0 91 5c 04 	lds	r30, 0x045C	; 0x80045c <_ZN7TwoWire13rxBufferIndexE>
    1f90:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <_ZN7TwoWire14rxBufferLengthE>
    1f94:	e8 17       	cp	r30, r24
    1f96:	30 f4       	brcc	.+12     	; 0x1fa4 <_ZN7TwoWire4peekEv+0x18>
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	e3 5a       	subi	r30, 0xA3	; 163
    1f9c:	fb 4f       	sbci	r31, 0xFB	; 251
    1f9e:	80 81       	ld	r24, Z
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	08 95       	ret
    1fa4:	8f ef       	ldi	r24, 0xFF	; 255
    1fa6:	9f ef       	ldi	r25, 0xFF	; 255
    1fa8:	08 95       	ret

00001faa <_ZN7TwoWire5flushEv>:
    1faa:	08 95       	ret

00001fac <_ZN7TwoWire16onReceiveServiceEPhi>:
    1fac:	cf 93       	push	r28
    1fae:	df 93       	push	r29
    1fb0:	ec 01       	movw	r28, r24
    1fb2:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <_ZN7TwoWire14user_onReceiveE>
    1fb6:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <_ZN7TwoWire14user_onReceiveE+0x1>
    1fba:	30 97       	sbiw	r30, 0x00	; 0
    1fbc:	f1 f0       	breq	.+60     	; 0x1ffa <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1fbe:	90 91 5c 04 	lds	r25, 0x045C	; 0x80045c <_ZN7TwoWire13rxBufferIndexE>
    1fc2:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <_ZN7TwoWire14rxBufferLengthE>
    1fc6:	98 17       	cp	r25, r24
    1fc8:	c0 f0       	brcs	.+48     	; 0x1ffa <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	29 2f       	mov	r18, r25
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	26 17       	cp	r18, r22
    1fd2:	37 07       	cpc	r19, r23
    1fd4:	54 f4       	brge	.+20     	; 0x1fea <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1fd6:	de 01       	movw	r26, r28
    1fd8:	a2 0f       	add	r26, r18
    1fda:	b3 1f       	adc	r27, r19
    1fdc:	4c 91       	ld	r20, X
    1fde:	d9 01       	movw	r26, r18
    1fe0:	a3 5a       	subi	r26, 0xA3	; 163
    1fe2:	bb 4f       	sbci	r27, 0xFB	; 251
    1fe4:	4c 93       	st	X, r20
    1fe6:	9f 5f       	subi	r25, 0xFF	; 255
    1fe8:	f1 cf       	rjmp	.-30     	; 0x1fcc <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1fea:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <_ZN7TwoWire13rxBufferIndexE>
    1fee:	60 93 5b 04 	sts	0x045B, r22	; 0x80045b <_ZN7TwoWire14rxBufferLengthE>
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	df 91       	pop	r29
    1ff6:	cf 91       	pop	r28
    1ff8:	09 94       	ijmp
    1ffa:	df 91       	pop	r29
    1ffc:	cf 91       	pop	r28
    1ffe:	08 95       	ret

00002000 <_ZN7TwoWire16onRequestServiceEv>:
    2000:	e0 91 35 04 	lds	r30, 0x0435	; 0x800435 <_ZN7TwoWire14user_onRequestE>
    2004:	f0 91 36 04 	lds	r31, 0x0436	; 0x800436 <_ZN7TwoWire14user_onRequestE+0x1>
    2008:	30 97       	sbiw	r30, 0x00	; 0
    200a:	29 f0       	breq	.+10     	; 0x2016 <_ZN7TwoWire16onRequestServiceEv+0x16>
    200c:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <_ZN7TwoWire13txBufferIndexE>
    2010:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <_ZN7TwoWire14txBufferLengthE>
    2014:	09 94       	ijmp
    2016:	08 95       	ret

00002018 <_ZN7TwoWire5writeEPKhj>:
    2018:	cf 92       	push	r12
    201a:	df 92       	push	r13
    201c:	ef 92       	push	r14
    201e:	ff 92       	push	r15
    2020:	0f 93       	push	r16
    2022:	1f 93       	push	r17
    2024:	cf 93       	push	r28
    2026:	df 93       	push	r29
    2028:	7c 01       	movw	r14, r24
    202a:	cb 01       	movw	r24, r22
    202c:	8a 01       	movw	r16, r20
    202e:	20 91 37 04 	lds	r18, 0x0437	; 0x800437 <_ZN7TwoWire12transmittingE>
    2032:	22 23       	and	r18, r18
    2034:	89 f0       	breq	.+34     	; 0x2058 <_ZN7TwoWire5writeEPKhj+0x40>
    2036:	eb 01       	movw	r28, r22
    2038:	6b 01       	movw	r12, r22
    203a:	c4 0e       	add	r12, r20
    203c:	d5 1e       	adc	r13, r21
    203e:	cc 15       	cp	r28, r12
    2040:	dd 05       	cpc	r29, r13
    2042:	69 f0       	breq	.+26     	; 0x205e <_ZN7TwoWire5writeEPKhj+0x46>
    2044:	69 91       	ld	r22, Y+
    2046:	d7 01       	movw	r26, r14
    2048:	ed 91       	ld	r30, X+
    204a:	fc 91       	ld	r31, X
    204c:	01 90       	ld	r0, Z+
    204e:	f0 81       	ld	r31, Z
    2050:	e0 2d       	mov	r30, r0
    2052:	c7 01       	movw	r24, r14
    2054:	09 95       	icall
    2056:	f3 cf       	rjmp	.-26     	; 0x203e <_ZN7TwoWire5writeEPKhj+0x26>
    2058:	64 2f       	mov	r22, r20
    205a:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <twi_transmit>
    205e:	c8 01       	movw	r24, r16
    2060:	df 91       	pop	r29
    2062:	cf 91       	pop	r28
    2064:	1f 91       	pop	r17
    2066:	0f 91       	pop	r16
    2068:	ff 90       	pop	r15
    206a:	ef 90       	pop	r14
    206c:	df 90       	pop	r13
    206e:	cf 90       	pop	r12
    2070:	08 95       	ret

00002072 <_ZN7TwoWire5writeEh>:
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	1f 92       	push	r1
    2078:	cd b7       	in	r28, 0x3d	; 61
    207a:	de b7       	in	r29, 0x3e	; 62
    207c:	69 83       	std	Y+1, r22	; 0x01
    207e:	20 91 37 04 	lds	r18, 0x0437	; 0x800437 <_ZN7TwoWire12transmittingE>
    2082:	22 23       	and	r18, r18
    2084:	d1 f0       	breq	.+52     	; 0x20ba <_ZN7TwoWire5writeEh+0x48>
    2086:	20 91 38 04 	lds	r18, 0x0438	; 0x800438 <_ZN7TwoWire14txBufferLengthE>
    208a:	20 32       	cpi	r18, 0x20	; 32
    208c:	40 f0       	brcs	.+16     	; 0x209e <_ZN7TwoWire5writeEh+0x2c>
    208e:	21 e0       	ldi	r18, 0x01	; 1
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	fc 01       	movw	r30, r24
    2094:	33 83       	std	Z+3, r19	; 0x03
    2096:	22 83       	std	Z+2, r18	; 0x02
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	15 c0       	rjmp	.+42     	; 0x20c8 <_ZN7TwoWire5writeEh+0x56>
    209e:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <_ZN7TwoWire13txBufferIndexE>
    20a2:	e8 2f       	mov	r30, r24
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	e6 5c       	subi	r30, 0xC6	; 198
    20a8:	fb 4f       	sbci	r31, 0xFB	; 251
    20aa:	99 81       	ldd	r25, Y+1	; 0x01
    20ac:	90 83       	st	Z, r25
    20ae:	8f 5f       	subi	r24, 0xFF	; 255
    20b0:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <_ZN7TwoWire13txBufferIndexE>
    20b4:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <_ZN7TwoWire14txBufferLengthE>
    20b8:	05 c0       	rjmp	.+10     	; 0x20c4 <_ZN7TwoWire5writeEh+0x52>
    20ba:	61 e0       	ldi	r22, 0x01	; 1
    20bc:	ce 01       	movw	r24, r28
    20be:	01 96       	adiw	r24, 0x01	; 1
    20c0:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <twi_transmit>
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	0f 90       	pop	r0
    20ca:	df 91       	pop	r29
    20cc:	cf 91       	pop	r28
    20ce:	08 95       	ret

000020d0 <_ZN7TwoWireC1Ev>:
    20d0:	fc 01       	movw	r30, r24
    20d2:	13 82       	std	Z+3, r1	; 0x03
    20d4:	12 82       	std	Z+2, r1	; 0x02
    20d6:	88 ee       	ldi	r24, 0xE8	; 232
    20d8:	93 e0       	ldi	r25, 0x03	; 3
    20da:	a0 e0       	ldi	r26, 0x00	; 0
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	84 83       	std	Z+4, r24	; 0x04
    20e0:	95 83       	std	Z+5, r25	; 0x05
    20e2:	a6 83       	std	Z+6, r26	; 0x06
    20e4:	b7 83       	std	Z+7, r27	; 0x07
    20e6:	89 e5       	ldi	r24, 0x59	; 89
    20e8:	92 e0       	ldi	r25, 0x02	; 2
    20ea:	91 83       	std	Z+1, r25	; 0x01
    20ec:	80 83       	st	Z, r24
    20ee:	08 95       	ret

000020f0 <_ZN7TwoWire5beginEv>:
    20f0:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <_ZN7TwoWire13rxBufferIndexE>
    20f4:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <_ZN7TwoWire14rxBufferLengthE>
    20f8:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <_ZN7TwoWire13txBufferIndexE>
    20fc:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <_ZN7TwoWire14txBufferLengthE>
    2100:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <twi_init>
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	90 e1       	ldi	r25, 0x10	; 16
    2108:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <twi_attachSlaveTxEvent>
    210c:	86 ed       	ldi	r24, 0xD6	; 214
    210e:	9f e0       	ldi	r25, 0x0F	; 15
    2110:	0c 94 63 0e 	jmp	0x1cc6	; 0x1cc6 <twi_attachSlaveRxEvent>

00002114 <_ZN7TwoWire17beginTransmissionEh>:
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <_ZN7TwoWire12transmittingE>
    211a:	60 93 5a 04 	sts	0x045A, r22	; 0x80045a <_ZN7TwoWire9txAddressE>
    211e:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <_ZN7TwoWire13txBufferIndexE>
    2122:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <_ZN7TwoWire14txBufferLengthE>
    2126:	08 95       	ret

00002128 <_ZN7TwoWire15endTransmissionEh>:
    2128:	0f 93       	push	r16
    212a:	06 2f       	mov	r16, r22
    212c:	21 e0       	ldi	r18, 0x01	; 1
    212e:	40 91 38 04 	lds	r20, 0x0438	; 0x800438 <_ZN7TwoWire14txBufferLengthE>
    2132:	6a e3       	ldi	r22, 0x3A	; 58
    2134:	74 e0       	ldi	r23, 0x04	; 4
    2136:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <_ZN7TwoWire9txAddressE>
    213a:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <twi_writeTo>
    213e:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <_ZN7TwoWire13txBufferIndexE>
    2142:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <_ZN7TwoWire14txBufferLengthE>
    2146:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <_ZN7TwoWire12transmittingE>
    214a:	0f 91       	pop	r16
    214c:	08 95       	ret

0000214e <_ZN7TwoWire11requestFromEhhmhh>:
    214e:	4f 92       	push	r4
    2150:	5f 92       	push	r5
    2152:	6f 92       	push	r6
    2154:	7f 92       	push	r7
    2156:	af 92       	push	r10
    2158:	bf 92       	push	r11
    215a:	cf 92       	push	r12
    215c:	ef 92       	push	r14
    215e:	ff 92       	push	r15
    2160:	0f 93       	push	r16
    2162:	1f 93       	push	r17
    2164:	cf 93       	push	r28
    2166:	df 93       	push	r29
    2168:	5c 01       	movw	r10, r24
    216a:	f6 2e       	mov	r15, r22
    216c:	d4 2f       	mov	r29, r20
    216e:	28 01       	movw	r4, r16
    2170:	39 01       	movw	r6, r18
    2172:	ee 20       	and	r14, r14
    2174:	21 f1       	breq	.+72     	; 0x21be <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2176:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN7TwoWire17beginTransmissionEh>
    217a:	ce 2d       	mov	r28, r14
    217c:	c4 30       	cpi	r28, 0x04	; 4
    217e:	08 f0       	brcs	.+2      	; 0x2182 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2180:	c3 e0       	ldi	r28, 0x03	; 3
    2182:	c1 50       	subi	r28, 0x01	; 1
    2184:	c0 f0       	brcs	.+48     	; 0x21b6 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2186:	28 e0       	ldi	r18, 0x08	; 8
    2188:	c2 9f       	mul	r28, r18
    218a:	c0 01       	movw	r24, r0
    218c:	11 24       	eor	r1, r1
    218e:	a3 01       	movw	r20, r6
    2190:	92 01       	movw	r18, r4
    2192:	04 c0       	rjmp	.+8      	; 0x219c <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    2194:	56 95       	lsr	r21
    2196:	47 95       	ror	r20
    2198:	37 95       	ror	r19
    219a:	27 95       	ror	r18
    219c:	8a 95       	dec	r24
    219e:	d2 f7       	brpl	.-12     	; 0x2194 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    21a0:	ca 01       	movw	r24, r20
    21a2:	b9 01       	movw	r22, r18
    21a4:	d5 01       	movw	r26, r10
    21a6:	ed 91       	ld	r30, X+
    21a8:	fc 91       	ld	r31, X
    21aa:	01 90       	ld	r0, Z+
    21ac:	f0 81       	ld	r31, Z
    21ae:	e0 2d       	mov	r30, r0
    21b0:	c5 01       	movw	r24, r10
    21b2:	09 95       	icall
    21b4:	e6 cf       	rjmp	.-52     	; 0x2182 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    21b6:	60 e0       	ldi	r22, 0x00	; 0
    21b8:	c5 01       	movw	r24, r10
    21ba:	0e 94 94 10 	call	0x2128	; 0x2128 <_ZN7TwoWire15endTransmissionEh>
    21be:	4d 2f       	mov	r20, r29
    21c0:	d1 32       	cpi	r29, 0x21	; 33
    21c2:	08 f0       	brcs	.+2      	; 0x21c6 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    21c4:	40 e2       	ldi	r20, 0x20	; 32
    21c6:	2c 2d       	mov	r18, r12
    21c8:	6d e5       	ldi	r22, 0x5D	; 93
    21ca:	74 e0       	ldi	r23, 0x04	; 4
    21cc:	8f 2d       	mov	r24, r15
    21ce:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <twi_readFrom>
    21d2:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <_ZN7TwoWire13rxBufferIndexE>
    21d6:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <_ZN7TwoWire14rxBufferLengthE>
    21da:	df 91       	pop	r29
    21dc:	cf 91       	pop	r28
    21de:	1f 91       	pop	r17
    21e0:	0f 91       	pop	r16
    21e2:	ff 90       	pop	r15
    21e4:	ef 90       	pop	r14
    21e6:	cf 90       	pop	r12
    21e8:	bf 90       	pop	r11
    21ea:	af 90       	pop	r10
    21ec:	7f 90       	pop	r7
    21ee:	6f 90       	pop	r6
    21f0:	5f 90       	pop	r5
    21f2:	4f 90       	pop	r4
    21f4:	08 95       	ret

000021f6 <_ZN7TwoWire11requestFromEhhh>:
    21f6:	cf 92       	push	r12
    21f8:	ef 92       	push	r14
    21fa:	0f 93       	push	r16
    21fc:	1f 93       	push	r17
    21fe:	c2 2e       	mov	r12, r18
    2200:	e1 2c       	mov	r14, r1
    2202:	00 e0       	ldi	r16, 0x00	; 0
    2204:	10 e0       	ldi	r17, 0x00	; 0
    2206:	98 01       	movw	r18, r16
    2208:	0e 94 a7 10 	call	0x214e	; 0x214e <_ZN7TwoWire11requestFromEhhmhh>
    220c:	1f 91       	pop	r17
    220e:	0f 91       	pop	r16
    2210:	ef 90       	pop	r14
    2212:	cf 90       	pop	r12
    2214:	08 95       	ret

00002216 <_ZN7TwoWire11requestFromEii>:
    2216:	21 e0       	ldi	r18, 0x01	; 1
    2218:	0c 94 fb 10 	jmp	0x21f6	; 0x21f6 <_ZN7TwoWire11requestFromEhhh>

0000221c <_ZN7TwoWire15endTransmissionEv>:
    221c:	61 e0       	ldi	r22, 0x01	; 1
    221e:	0c 94 94 10 	jmp	0x2128	; 0x2128 <_ZN7TwoWire15endTransmissionEh>

00002222 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2222:	87 e2       	ldi	r24, 0x27	; 39
    2224:	94 e0       	ldi	r25, 0x04	; 4
    2226:	0c 94 68 10 	jmp	0x20d0	; 0x20d0 <_ZN7TwoWireC1Ev>

0000222a <__subsf3>:
    222a:	50 58       	subi	r21, 0x80	; 128

0000222c <__addsf3>:
    222c:	bb 27       	eor	r27, r27
    222e:	aa 27       	eor	r26, r26
    2230:	0e 94 2d 11 	call	0x225a	; 0x225a <__addsf3x>
    2234:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__fp_round>
    2238:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <__fp_pscA>
    223c:	38 f0       	brcs	.+14     	; 0x224c <__addsf3+0x20>
    223e:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <__fp_pscB>
    2242:	20 f0       	brcs	.+8      	; 0x224c <__addsf3+0x20>
    2244:	39 f4       	brne	.+14     	; 0x2254 <__addsf3+0x28>
    2246:	9f 3f       	cpi	r25, 0xFF	; 255
    2248:	19 f4       	brne	.+6      	; 0x2250 <__addsf3+0x24>
    224a:	26 f4       	brtc	.+8      	; 0x2254 <__addsf3+0x28>
    224c:	0c 94 ee 11 	jmp	0x23dc	; 0x23dc <__fp_nan>
    2250:	0e f4       	brtc	.+2      	; 0x2254 <__addsf3+0x28>
    2252:	e0 95       	com	r30
    2254:	e7 fb       	bst	r30, 7
    2256:	0c 94 e8 11 	jmp	0x23d0	; 0x23d0 <__fp_inf>

0000225a <__addsf3x>:
    225a:	e9 2f       	mov	r30, r25
    225c:	0e 94 10 12 	call	0x2420	; 0x2420 <__fp_split3>
    2260:	58 f3       	brcs	.-42     	; 0x2238 <__addsf3+0xc>
    2262:	ba 17       	cp	r27, r26
    2264:	62 07       	cpc	r22, r18
    2266:	73 07       	cpc	r23, r19
    2268:	84 07       	cpc	r24, r20
    226a:	95 07       	cpc	r25, r21
    226c:	20 f0       	brcs	.+8      	; 0x2276 <__addsf3x+0x1c>
    226e:	79 f4       	brne	.+30     	; 0x228e <__addsf3x+0x34>
    2270:	a6 f5       	brtc	.+104    	; 0x22da <__addsf3x+0x80>
    2272:	0c 94 32 12 	jmp	0x2464	; 0x2464 <__fp_zero>
    2276:	0e f4       	brtc	.+2      	; 0x227a <__addsf3x+0x20>
    2278:	e0 95       	com	r30
    227a:	0b 2e       	mov	r0, r27
    227c:	ba 2f       	mov	r27, r26
    227e:	a0 2d       	mov	r26, r0
    2280:	0b 01       	movw	r0, r22
    2282:	b9 01       	movw	r22, r18
    2284:	90 01       	movw	r18, r0
    2286:	0c 01       	movw	r0, r24
    2288:	ca 01       	movw	r24, r20
    228a:	a0 01       	movw	r20, r0
    228c:	11 24       	eor	r1, r1
    228e:	ff 27       	eor	r31, r31
    2290:	59 1b       	sub	r21, r25
    2292:	99 f0       	breq	.+38     	; 0x22ba <__addsf3x+0x60>
    2294:	59 3f       	cpi	r21, 0xF9	; 249
    2296:	50 f4       	brcc	.+20     	; 0x22ac <__addsf3x+0x52>
    2298:	50 3e       	cpi	r21, 0xE0	; 224
    229a:	68 f1       	brcs	.+90     	; 0x22f6 <__addsf3x+0x9c>
    229c:	1a 16       	cp	r1, r26
    229e:	f0 40       	sbci	r31, 0x00	; 0
    22a0:	a2 2f       	mov	r26, r18
    22a2:	23 2f       	mov	r18, r19
    22a4:	34 2f       	mov	r19, r20
    22a6:	44 27       	eor	r20, r20
    22a8:	58 5f       	subi	r21, 0xF8	; 248
    22aa:	f3 cf       	rjmp	.-26     	; 0x2292 <__addsf3x+0x38>
    22ac:	46 95       	lsr	r20
    22ae:	37 95       	ror	r19
    22b0:	27 95       	ror	r18
    22b2:	a7 95       	ror	r26
    22b4:	f0 40       	sbci	r31, 0x00	; 0
    22b6:	53 95       	inc	r21
    22b8:	c9 f7       	brne	.-14     	; 0x22ac <__addsf3x+0x52>
    22ba:	7e f4       	brtc	.+30     	; 0x22da <__addsf3x+0x80>
    22bc:	1f 16       	cp	r1, r31
    22be:	ba 0b       	sbc	r27, r26
    22c0:	62 0b       	sbc	r22, r18
    22c2:	73 0b       	sbc	r23, r19
    22c4:	84 0b       	sbc	r24, r20
    22c6:	ba f0       	brmi	.+46     	; 0x22f6 <__addsf3x+0x9c>
    22c8:	91 50       	subi	r25, 0x01	; 1
    22ca:	a1 f0       	breq	.+40     	; 0x22f4 <__addsf3x+0x9a>
    22cc:	ff 0f       	add	r31, r31
    22ce:	bb 1f       	adc	r27, r27
    22d0:	66 1f       	adc	r22, r22
    22d2:	77 1f       	adc	r23, r23
    22d4:	88 1f       	adc	r24, r24
    22d6:	c2 f7       	brpl	.-16     	; 0x22c8 <__addsf3x+0x6e>
    22d8:	0e c0       	rjmp	.+28     	; 0x22f6 <__addsf3x+0x9c>
    22da:	ba 0f       	add	r27, r26
    22dc:	62 1f       	adc	r22, r18
    22de:	73 1f       	adc	r23, r19
    22e0:	84 1f       	adc	r24, r20
    22e2:	48 f4       	brcc	.+18     	; 0x22f6 <__addsf3x+0x9c>
    22e4:	87 95       	ror	r24
    22e6:	77 95       	ror	r23
    22e8:	67 95       	ror	r22
    22ea:	b7 95       	ror	r27
    22ec:	f7 95       	ror	r31
    22ee:	9e 3f       	cpi	r25, 0xFE	; 254
    22f0:	08 f0       	brcs	.+2      	; 0x22f4 <__addsf3x+0x9a>
    22f2:	b0 cf       	rjmp	.-160    	; 0x2254 <__addsf3+0x28>
    22f4:	93 95       	inc	r25
    22f6:	88 0f       	add	r24, r24
    22f8:	08 f0       	brcs	.+2      	; 0x22fc <__addsf3x+0xa2>
    22fa:	99 27       	eor	r25, r25
    22fc:	ee 0f       	add	r30, r30
    22fe:	97 95       	ror	r25
    2300:	87 95       	ror	r24
    2302:	08 95       	ret

00002304 <__cmpsf2>:
    2304:	0e 94 c4 11 	call	0x2388	; 0x2388 <__fp_cmp>
    2308:	08 f4       	brcc	.+2      	; 0x230c <__cmpsf2+0x8>
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	08 95       	ret

0000230e <__floatunsisf>:
    230e:	e8 94       	clt
    2310:	09 c0       	rjmp	.+18     	; 0x2324 <__floatsisf+0x12>

00002312 <__floatsisf>:
    2312:	97 fb       	bst	r25, 7
    2314:	3e f4       	brtc	.+14     	; 0x2324 <__floatsisf+0x12>
    2316:	90 95       	com	r25
    2318:	80 95       	com	r24
    231a:	70 95       	com	r23
    231c:	61 95       	neg	r22
    231e:	7f 4f       	sbci	r23, 0xFF	; 255
    2320:	8f 4f       	sbci	r24, 0xFF	; 255
    2322:	9f 4f       	sbci	r25, 0xFF	; 255
    2324:	99 23       	and	r25, r25
    2326:	a9 f0       	breq	.+42     	; 0x2352 <__floatsisf+0x40>
    2328:	f9 2f       	mov	r31, r25
    232a:	96 e9       	ldi	r25, 0x96	; 150
    232c:	bb 27       	eor	r27, r27
    232e:	93 95       	inc	r25
    2330:	f6 95       	lsr	r31
    2332:	87 95       	ror	r24
    2334:	77 95       	ror	r23
    2336:	67 95       	ror	r22
    2338:	b7 95       	ror	r27
    233a:	f1 11       	cpse	r31, r1
    233c:	f8 cf       	rjmp	.-16     	; 0x232e <__floatsisf+0x1c>
    233e:	fa f4       	brpl	.+62     	; 0x237e <__floatsisf+0x6c>
    2340:	bb 0f       	add	r27, r27
    2342:	11 f4       	brne	.+4      	; 0x2348 <__floatsisf+0x36>
    2344:	60 ff       	sbrs	r22, 0
    2346:	1b c0       	rjmp	.+54     	; 0x237e <__floatsisf+0x6c>
    2348:	6f 5f       	subi	r22, 0xFF	; 255
    234a:	7f 4f       	sbci	r23, 0xFF	; 255
    234c:	8f 4f       	sbci	r24, 0xFF	; 255
    234e:	9f 4f       	sbci	r25, 0xFF	; 255
    2350:	16 c0       	rjmp	.+44     	; 0x237e <__floatsisf+0x6c>
    2352:	88 23       	and	r24, r24
    2354:	11 f0       	breq	.+4      	; 0x235a <__floatsisf+0x48>
    2356:	96 e9       	ldi	r25, 0x96	; 150
    2358:	11 c0       	rjmp	.+34     	; 0x237c <__floatsisf+0x6a>
    235a:	77 23       	and	r23, r23
    235c:	21 f0       	breq	.+8      	; 0x2366 <__floatsisf+0x54>
    235e:	9e e8       	ldi	r25, 0x8E	; 142
    2360:	87 2f       	mov	r24, r23
    2362:	76 2f       	mov	r23, r22
    2364:	05 c0       	rjmp	.+10     	; 0x2370 <__floatsisf+0x5e>
    2366:	66 23       	and	r22, r22
    2368:	71 f0       	breq	.+28     	; 0x2386 <__floatsisf+0x74>
    236a:	96 e8       	ldi	r25, 0x86	; 134
    236c:	86 2f       	mov	r24, r22
    236e:	70 e0       	ldi	r23, 0x00	; 0
    2370:	60 e0       	ldi	r22, 0x00	; 0
    2372:	2a f0       	brmi	.+10     	; 0x237e <__floatsisf+0x6c>
    2374:	9a 95       	dec	r25
    2376:	66 0f       	add	r22, r22
    2378:	77 1f       	adc	r23, r23
    237a:	88 1f       	adc	r24, r24
    237c:	da f7       	brpl	.-10     	; 0x2374 <__floatsisf+0x62>
    237e:	88 0f       	add	r24, r24
    2380:	96 95       	lsr	r25
    2382:	87 95       	ror	r24
    2384:	97 f9       	bld	r25, 7
    2386:	08 95       	ret

00002388 <__fp_cmp>:
    2388:	99 0f       	add	r25, r25
    238a:	00 08       	sbc	r0, r0
    238c:	55 0f       	add	r21, r21
    238e:	aa 0b       	sbc	r26, r26
    2390:	e0 e8       	ldi	r30, 0x80	; 128
    2392:	fe ef       	ldi	r31, 0xFE	; 254
    2394:	16 16       	cp	r1, r22
    2396:	17 06       	cpc	r1, r23
    2398:	e8 07       	cpc	r30, r24
    239a:	f9 07       	cpc	r31, r25
    239c:	c0 f0       	brcs	.+48     	; 0x23ce <__fp_cmp+0x46>
    239e:	12 16       	cp	r1, r18
    23a0:	13 06       	cpc	r1, r19
    23a2:	e4 07       	cpc	r30, r20
    23a4:	f5 07       	cpc	r31, r21
    23a6:	98 f0       	brcs	.+38     	; 0x23ce <__fp_cmp+0x46>
    23a8:	62 1b       	sub	r22, r18
    23aa:	73 0b       	sbc	r23, r19
    23ac:	84 0b       	sbc	r24, r20
    23ae:	95 0b       	sbc	r25, r21
    23b0:	39 f4       	brne	.+14     	; 0x23c0 <__fp_cmp+0x38>
    23b2:	0a 26       	eor	r0, r26
    23b4:	61 f0       	breq	.+24     	; 0x23ce <__fp_cmp+0x46>
    23b6:	23 2b       	or	r18, r19
    23b8:	24 2b       	or	r18, r20
    23ba:	25 2b       	or	r18, r21
    23bc:	21 f4       	brne	.+8      	; 0x23c6 <__fp_cmp+0x3e>
    23be:	08 95       	ret
    23c0:	0a 26       	eor	r0, r26
    23c2:	09 f4       	brne	.+2      	; 0x23c6 <__fp_cmp+0x3e>
    23c4:	a1 40       	sbci	r26, 0x01	; 1
    23c6:	a6 95       	lsr	r26
    23c8:	8f ef       	ldi	r24, 0xFF	; 255
    23ca:	81 1d       	adc	r24, r1
    23cc:	81 1d       	adc	r24, r1
    23ce:	08 95       	ret

000023d0 <__fp_inf>:
    23d0:	97 f9       	bld	r25, 7
    23d2:	9f 67       	ori	r25, 0x7F	; 127
    23d4:	80 e8       	ldi	r24, 0x80	; 128
    23d6:	70 e0       	ldi	r23, 0x00	; 0
    23d8:	60 e0       	ldi	r22, 0x00	; 0
    23da:	08 95       	ret

000023dc <__fp_nan>:
    23dc:	9f ef       	ldi	r25, 0xFF	; 255
    23de:	80 ec       	ldi	r24, 0xC0	; 192
    23e0:	08 95       	ret

000023e2 <__fp_pscA>:
    23e2:	00 24       	eor	r0, r0
    23e4:	0a 94       	dec	r0
    23e6:	16 16       	cp	r1, r22
    23e8:	17 06       	cpc	r1, r23
    23ea:	18 06       	cpc	r1, r24
    23ec:	09 06       	cpc	r0, r25
    23ee:	08 95       	ret

000023f0 <__fp_pscB>:
    23f0:	00 24       	eor	r0, r0
    23f2:	0a 94       	dec	r0
    23f4:	12 16       	cp	r1, r18
    23f6:	13 06       	cpc	r1, r19
    23f8:	14 06       	cpc	r1, r20
    23fa:	05 06       	cpc	r0, r21
    23fc:	08 95       	ret

000023fe <__fp_round>:
    23fe:	09 2e       	mov	r0, r25
    2400:	03 94       	inc	r0
    2402:	00 0c       	add	r0, r0
    2404:	11 f4       	brne	.+4      	; 0x240a <__fp_round+0xc>
    2406:	88 23       	and	r24, r24
    2408:	52 f0       	brmi	.+20     	; 0x241e <__fp_round+0x20>
    240a:	bb 0f       	add	r27, r27
    240c:	40 f4       	brcc	.+16     	; 0x241e <__fp_round+0x20>
    240e:	bf 2b       	or	r27, r31
    2410:	11 f4       	brne	.+4      	; 0x2416 <__fp_round+0x18>
    2412:	60 ff       	sbrs	r22, 0
    2414:	04 c0       	rjmp	.+8      	; 0x241e <__fp_round+0x20>
    2416:	6f 5f       	subi	r22, 0xFF	; 255
    2418:	7f 4f       	sbci	r23, 0xFF	; 255
    241a:	8f 4f       	sbci	r24, 0xFF	; 255
    241c:	9f 4f       	sbci	r25, 0xFF	; 255
    241e:	08 95       	ret

00002420 <__fp_split3>:
    2420:	57 fd       	sbrc	r21, 7
    2422:	90 58       	subi	r25, 0x80	; 128
    2424:	44 0f       	add	r20, r20
    2426:	55 1f       	adc	r21, r21
    2428:	59 f0       	breq	.+22     	; 0x2440 <__fp_splitA+0x10>
    242a:	5f 3f       	cpi	r21, 0xFF	; 255
    242c:	71 f0       	breq	.+28     	; 0x244a <__fp_splitA+0x1a>
    242e:	47 95       	ror	r20

00002430 <__fp_splitA>:
    2430:	88 0f       	add	r24, r24
    2432:	97 fb       	bst	r25, 7
    2434:	99 1f       	adc	r25, r25
    2436:	61 f0       	breq	.+24     	; 0x2450 <__fp_splitA+0x20>
    2438:	9f 3f       	cpi	r25, 0xFF	; 255
    243a:	79 f0       	breq	.+30     	; 0x245a <__fp_splitA+0x2a>
    243c:	87 95       	ror	r24
    243e:	08 95       	ret
    2440:	12 16       	cp	r1, r18
    2442:	13 06       	cpc	r1, r19
    2444:	14 06       	cpc	r1, r20
    2446:	55 1f       	adc	r21, r21
    2448:	f2 cf       	rjmp	.-28     	; 0x242e <__fp_split3+0xe>
    244a:	46 95       	lsr	r20
    244c:	f1 df       	rcall	.-30     	; 0x2430 <__fp_splitA>
    244e:	08 c0       	rjmp	.+16     	; 0x2460 <__fp_splitA+0x30>
    2450:	16 16       	cp	r1, r22
    2452:	17 06       	cpc	r1, r23
    2454:	18 06       	cpc	r1, r24
    2456:	99 1f       	adc	r25, r25
    2458:	f1 cf       	rjmp	.-30     	; 0x243c <__fp_splitA+0xc>
    245a:	86 95       	lsr	r24
    245c:	71 05       	cpc	r23, r1
    245e:	61 05       	cpc	r22, r1
    2460:	08 94       	sec
    2462:	08 95       	ret

00002464 <__fp_zero>:
    2464:	e8 94       	clt

00002466 <__fp_szero>:
    2466:	bb 27       	eor	r27, r27
    2468:	66 27       	eor	r22, r22
    246a:	77 27       	eor	r23, r23
    246c:	cb 01       	movw	r24, r22
    246e:	97 f9       	bld	r25, 7
    2470:	08 95       	ret

00002472 <__mulsf3>:
    2472:	0e 94 4c 12 	call	0x2498	; 0x2498 <__mulsf3x>
    2476:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__fp_round>
    247a:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <__fp_pscA>
    247e:	38 f0       	brcs	.+14     	; 0x248e <__mulsf3+0x1c>
    2480:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <__fp_pscB>
    2484:	20 f0       	brcs	.+8      	; 0x248e <__mulsf3+0x1c>
    2486:	95 23       	and	r25, r21
    2488:	11 f0       	breq	.+4      	; 0x248e <__mulsf3+0x1c>
    248a:	0c 94 e8 11 	jmp	0x23d0	; 0x23d0 <__fp_inf>
    248e:	0c 94 ee 11 	jmp	0x23dc	; 0x23dc <__fp_nan>
    2492:	11 24       	eor	r1, r1
    2494:	0c 94 33 12 	jmp	0x2466	; 0x2466 <__fp_szero>

00002498 <__mulsf3x>:
    2498:	0e 94 10 12 	call	0x2420	; 0x2420 <__fp_split3>
    249c:	70 f3       	brcs	.-36     	; 0x247a <__mulsf3+0x8>

0000249e <__mulsf3_pse>:
    249e:	95 9f       	mul	r25, r21
    24a0:	c1 f3       	breq	.-16     	; 0x2492 <__mulsf3+0x20>
    24a2:	95 0f       	add	r25, r21
    24a4:	50 e0       	ldi	r21, 0x00	; 0
    24a6:	55 1f       	adc	r21, r21
    24a8:	62 9f       	mul	r22, r18
    24aa:	f0 01       	movw	r30, r0
    24ac:	72 9f       	mul	r23, r18
    24ae:	bb 27       	eor	r27, r27
    24b0:	f0 0d       	add	r31, r0
    24b2:	b1 1d       	adc	r27, r1
    24b4:	63 9f       	mul	r22, r19
    24b6:	aa 27       	eor	r26, r26
    24b8:	f0 0d       	add	r31, r0
    24ba:	b1 1d       	adc	r27, r1
    24bc:	aa 1f       	adc	r26, r26
    24be:	64 9f       	mul	r22, r20
    24c0:	66 27       	eor	r22, r22
    24c2:	b0 0d       	add	r27, r0
    24c4:	a1 1d       	adc	r26, r1
    24c6:	66 1f       	adc	r22, r22
    24c8:	82 9f       	mul	r24, r18
    24ca:	22 27       	eor	r18, r18
    24cc:	b0 0d       	add	r27, r0
    24ce:	a1 1d       	adc	r26, r1
    24d0:	62 1f       	adc	r22, r18
    24d2:	73 9f       	mul	r23, r19
    24d4:	b0 0d       	add	r27, r0
    24d6:	a1 1d       	adc	r26, r1
    24d8:	62 1f       	adc	r22, r18
    24da:	83 9f       	mul	r24, r19
    24dc:	a0 0d       	add	r26, r0
    24de:	61 1d       	adc	r22, r1
    24e0:	22 1f       	adc	r18, r18
    24e2:	74 9f       	mul	r23, r20
    24e4:	33 27       	eor	r19, r19
    24e6:	a0 0d       	add	r26, r0
    24e8:	61 1d       	adc	r22, r1
    24ea:	23 1f       	adc	r18, r19
    24ec:	84 9f       	mul	r24, r20
    24ee:	60 0d       	add	r22, r0
    24f0:	21 1d       	adc	r18, r1
    24f2:	82 2f       	mov	r24, r18
    24f4:	76 2f       	mov	r23, r22
    24f6:	6a 2f       	mov	r22, r26
    24f8:	11 24       	eor	r1, r1
    24fa:	9f 57       	subi	r25, 0x7F	; 127
    24fc:	50 40       	sbci	r21, 0x00	; 0
    24fe:	9a f0       	brmi	.+38     	; 0x2526 <__mulsf3_pse+0x88>
    2500:	f1 f0       	breq	.+60     	; 0x253e <__mulsf3_pse+0xa0>
    2502:	88 23       	and	r24, r24
    2504:	4a f0       	brmi	.+18     	; 0x2518 <__mulsf3_pse+0x7a>
    2506:	ee 0f       	add	r30, r30
    2508:	ff 1f       	adc	r31, r31
    250a:	bb 1f       	adc	r27, r27
    250c:	66 1f       	adc	r22, r22
    250e:	77 1f       	adc	r23, r23
    2510:	88 1f       	adc	r24, r24
    2512:	91 50       	subi	r25, 0x01	; 1
    2514:	50 40       	sbci	r21, 0x00	; 0
    2516:	a9 f7       	brne	.-22     	; 0x2502 <__mulsf3_pse+0x64>
    2518:	9e 3f       	cpi	r25, 0xFE	; 254
    251a:	51 05       	cpc	r21, r1
    251c:	80 f0       	brcs	.+32     	; 0x253e <__mulsf3_pse+0xa0>
    251e:	0c 94 e8 11 	jmp	0x23d0	; 0x23d0 <__fp_inf>
    2522:	0c 94 33 12 	jmp	0x2466	; 0x2466 <__fp_szero>
    2526:	5f 3f       	cpi	r21, 0xFF	; 255
    2528:	e4 f3       	brlt	.-8      	; 0x2522 <__mulsf3_pse+0x84>
    252a:	98 3e       	cpi	r25, 0xE8	; 232
    252c:	d4 f3       	brlt	.-12     	; 0x2522 <__mulsf3_pse+0x84>
    252e:	86 95       	lsr	r24
    2530:	77 95       	ror	r23
    2532:	67 95       	ror	r22
    2534:	b7 95       	ror	r27
    2536:	f7 95       	ror	r31
    2538:	e7 95       	ror	r30
    253a:	9f 5f       	subi	r25, 0xFF	; 255
    253c:	c1 f7       	brne	.-16     	; 0x252e <__mulsf3_pse+0x90>
    253e:	fe 2b       	or	r31, r30
    2540:	88 0f       	add	r24, r24
    2542:	91 1d       	adc	r25, r1
    2544:	96 95       	lsr	r25
    2546:	87 95       	ror	r24
    2548:	97 f9       	bld	r25, 7
    254a:	08 95       	ret

0000254c <__cxa_pure_virtual>:
    254c:	0e 94 06 20 	call	0x400c	; 0x400c <abort>

00002550 <initVariant>:
    2550:	08 95       	ret

00002552 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2552:	0e 94 95 19 	call	0x332a	; 0x332a <init>

	initVariant();
    2556:	0e 94 a8 12 	call	0x2550	; 0x2550 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
    255a:	8d e7       	ldi	r24, 0x7D	; 125
    255c:	94 e0       	ldi	r25, 0x04	; 4
    255e:	0e 94 c0 18 	call	0x3180	; 0x3180 <_ZN10USBDevice_6attachEv>
#endif
	
	setup();
    2562:	0e 94 2b 04 	call	0x856	; 0x856 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2566:	c0 e0       	ldi	r28, 0x00	; 0
    2568:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    256a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <loop>
		if (serialEventRun) serialEventRun();
    256e:	20 97       	sbiw	r28, 0x00	; 0
    2570:	e1 f3       	breq	.-8      	; 0x256a <main+0x18>
    2572:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2576:	f9 cf       	rjmp	.-14     	; 0x256a <main+0x18>

00002578 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2578:	cf 92       	push	r12
    257a:	df 92       	push	r13
    257c:	ef 92       	push	r14
    257e:	ff 92       	push	r15
    2580:	0f 93       	push	r16
    2582:	1f 93       	push	r17
    2584:	cf 93       	push	r28
    2586:	df 93       	push	r29
    2588:	6c 01       	movw	r12, r24
    258a:	7a 01       	movw	r14, r20
    258c:	8b 01       	movw	r16, r22
    258e:	c0 e0       	ldi	r28, 0x00	; 0
    2590:	d0 e0       	ldi	r29, 0x00	; 0
    2592:	ce 15       	cp	r28, r14
    2594:	df 05       	cpc	r29, r15
    2596:	81 f0       	breq	.+32     	; 0x25b8 <_ZN5Print5writeEPKhj+0x40>
    2598:	d8 01       	movw	r26, r16
    259a:	6d 91       	ld	r22, X+
    259c:	8d 01       	movw	r16, r26
    259e:	d6 01       	movw	r26, r12
    25a0:	ed 91       	ld	r30, X+
    25a2:	fc 91       	ld	r31, X
    25a4:	01 90       	ld	r0, Z+
    25a6:	f0 81       	ld	r31, Z
    25a8:	e0 2d       	mov	r30, r0
    25aa:	c6 01       	movw	r24, r12
    25ac:	09 95       	icall
    25ae:	89 2b       	or	r24, r25
    25b0:	11 f0       	breq	.+4      	; 0x25b6 <_ZN5Print5writeEPKhj+0x3e>
    25b2:	21 96       	adiw	r28, 0x01	; 1
    25b4:	ee cf       	rjmp	.-36     	; 0x2592 <_ZN5Print5writeEPKhj+0x1a>
    25b6:	7e 01       	movw	r14, r28
    25b8:	c7 01       	movw	r24, r14
    25ba:	df 91       	pop	r29
    25bc:	cf 91       	pop	r28
    25be:	1f 91       	pop	r17
    25c0:	0f 91       	pop	r16
    25c2:	ff 90       	pop	r15
    25c4:	ef 90       	pop	r14
    25c6:	df 90       	pop	r13
    25c8:	cf 90       	pop	r12
    25ca:	08 95       	ret

000025cc <_ZN5Print5writeEPKc>:
    25cc:	61 15       	cp	r22, r1
    25ce:	71 05       	cpc	r23, r1
    25d0:	79 f0       	breq	.+30     	; 0x25f0 <_ZN5Print5writeEPKc+0x24>
    25d2:	fb 01       	movw	r30, r22
    25d4:	01 90       	ld	r0, Z+
    25d6:	00 20       	and	r0, r0
    25d8:	e9 f7       	brne	.-6      	; 0x25d4 <_ZN5Print5writeEPKc+0x8>
    25da:	31 97       	sbiw	r30, 0x01	; 1
    25dc:	af 01       	movw	r20, r30
    25de:	46 1b       	sub	r20, r22
    25e0:	57 0b       	sbc	r21, r23
    25e2:	dc 01       	movw	r26, r24
    25e4:	ed 91       	ld	r30, X+
    25e6:	fc 91       	ld	r31, X
    25e8:	02 80       	ldd	r0, Z+2	; 0x02
    25ea:	f3 81       	ldd	r31, Z+3	; 0x03
    25ec:	e0 2d       	mov	r30, r0
    25ee:	09 94       	ijmp
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	08 95       	ret

000025f6 <_ZN5Print5printERK6String>:
    25f6:	db 01       	movw	r26, r22
    25f8:	14 96       	adiw	r26, 0x04	; 4
    25fa:	4d 91       	ld	r20, X+
    25fc:	5c 91       	ld	r21, X
    25fe:	15 97       	sbiw	r26, 0x05	; 5
    2600:	6d 91       	ld	r22, X+
    2602:	7c 91       	ld	r23, X
    2604:	dc 01       	movw	r26, r24
    2606:	ed 91       	ld	r30, X+
    2608:	fc 91       	ld	r31, X
    260a:	02 80       	ldd	r0, Z+2	; 0x02
    260c:	f3 81       	ldd	r31, Z+3	; 0x03
    260e:	e0 2d       	mov	r30, r0
    2610:	09 94       	ijmp

00002612 <_ZN5Print5printEPKc>:
    2612:	0c 94 e6 12 	jmp	0x25cc	; 0x25cc <_ZN5Print5writeEPKc>

00002616 <_ZN5Print5printEc>:
    2616:	dc 01       	movw	r26, r24
    2618:	ed 91       	ld	r30, X+
    261a:	fc 91       	ld	r31, X
    261c:	01 90       	ld	r0, Z+
    261e:	f0 81       	ld	r31, Z
    2620:	e0 2d       	mov	r30, r0
    2622:	09 94       	ijmp

00002624 <_ZN5Print11printNumberEmh>:
    2624:	8f 92       	push	r8
    2626:	9f 92       	push	r9
    2628:	af 92       	push	r10
    262a:	bf 92       	push	r11
    262c:	ef 92       	push	r14
    262e:	ff 92       	push	r15
    2630:	0f 93       	push	r16
    2632:	1f 93       	push	r17
    2634:	cf 93       	push	r28
    2636:	df 93       	push	r29
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
    263c:	a1 97       	sbiw	r28, 0x21	; 33
    263e:	0f b6       	in	r0, 0x3f	; 63
    2640:	f8 94       	cli
    2642:	de bf       	out	0x3e, r29	; 62
    2644:	0f be       	out	0x3f, r0	; 63
    2646:	cd bf       	out	0x3d, r28	; 61
    2648:	7c 01       	movw	r14, r24
    264a:	fa 01       	movw	r30, r20
    264c:	cb 01       	movw	r24, r22
    264e:	19 a2       	std	Y+33, r1	; 0x21
    2650:	22 30       	cpi	r18, 0x02	; 2
    2652:	08 f4       	brcc	.+2      	; 0x2656 <_ZN5Print11printNumberEmh+0x32>
    2654:	2a e0       	ldi	r18, 0x0A	; 10
    2656:	8e 01       	movw	r16, r28
    2658:	0f 5d       	subi	r16, 0xDF	; 223
    265a:	1f 4f       	sbci	r17, 0xFF	; 255
    265c:	82 2e       	mov	r8, r18
    265e:	91 2c       	mov	r9, r1
    2660:	a1 2c       	mov	r10, r1
    2662:	b1 2c       	mov	r11, r1
    2664:	bf 01       	movw	r22, r30
    2666:	a5 01       	movw	r20, r10
    2668:	94 01       	movw	r18, r8
    266a:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <__udivmodsi4>
    266e:	f9 01       	movw	r30, r18
    2670:	ca 01       	movw	r24, r20
    2672:	01 50       	subi	r16, 0x01	; 1
    2674:	11 09       	sbc	r17, r1
    2676:	6a 30       	cpi	r22, 0x0A	; 10
    2678:	10 f4       	brcc	.+4      	; 0x267e <_ZN5Print11printNumberEmh+0x5a>
    267a:	60 5d       	subi	r22, 0xD0	; 208
    267c:	01 c0       	rjmp	.+2      	; 0x2680 <_ZN5Print11printNumberEmh+0x5c>
    267e:	69 5c       	subi	r22, 0xC9	; 201
    2680:	d8 01       	movw	r26, r16
    2682:	6c 93       	st	X, r22
    2684:	23 2b       	or	r18, r19
    2686:	24 2b       	or	r18, r20
    2688:	25 2b       	or	r18, r21
    268a:	61 f7       	brne	.-40     	; 0x2664 <_ZN5Print11printNumberEmh+0x40>
    268c:	b8 01       	movw	r22, r16
    268e:	c7 01       	movw	r24, r14
    2690:	0e 94 e6 12 	call	0x25cc	; 0x25cc <_ZN5Print5writeEPKc>
    2694:	a1 96       	adiw	r28, 0x21	; 33
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	f8 94       	cli
    269a:	de bf       	out	0x3e, r29	; 62
    269c:	0f be       	out	0x3f, r0	; 63
    269e:	cd bf       	out	0x3d, r28	; 61
    26a0:	df 91       	pop	r29
    26a2:	cf 91       	pop	r28
    26a4:	1f 91       	pop	r17
    26a6:	0f 91       	pop	r16
    26a8:	ff 90       	pop	r15
    26aa:	ef 90       	pop	r14
    26ac:	bf 90       	pop	r11
    26ae:	af 90       	pop	r10
    26b0:	9f 90       	pop	r9
    26b2:	8f 90       	pop	r8
    26b4:	08 95       	ret

000026b6 <_ZN5Print5printEmi>:
    26b6:	21 15       	cp	r18, r1
    26b8:	31 05       	cpc	r19, r1
    26ba:	41 f4       	brne	.+16     	; 0x26cc <_ZN5Print5printEmi+0x16>
    26bc:	dc 01       	movw	r26, r24
    26be:	ed 91       	ld	r30, X+
    26c0:	fc 91       	ld	r31, X
    26c2:	01 90       	ld	r0, Z+
    26c4:	f0 81       	ld	r31, Z
    26c6:	e0 2d       	mov	r30, r0
    26c8:	64 2f       	mov	r22, r20
    26ca:	09 94       	ijmp
    26cc:	0c 94 12 13 	jmp	0x2624	; 0x2624 <_ZN5Print11printNumberEmh>

000026d0 <_ZN5Print5printEji>:
    26d0:	9a 01       	movw	r18, r20
    26d2:	ab 01       	movw	r20, r22
    26d4:	60 e0       	ldi	r22, 0x00	; 0
    26d6:	70 e0       	ldi	r23, 0x00	; 0
    26d8:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <_ZN5Print5printEmi>

000026dc <_ZN5Print5printEli>:
    26dc:	cf 92       	push	r12
    26de:	df 92       	push	r13
    26e0:	ef 92       	push	r14
    26e2:	ff 92       	push	r15
    26e4:	0f 93       	push	r16
    26e6:	1f 93       	push	r17
    26e8:	cf 93       	push	r28
    26ea:	df 93       	push	r29
    26ec:	21 15       	cp	r18, r1
    26ee:	31 05       	cpc	r19, r1
    26f0:	81 f4       	brne	.+32     	; 0x2712 <_ZN5Print5printEli+0x36>
    26f2:	dc 01       	movw	r26, r24
    26f4:	ed 91       	ld	r30, X+
    26f6:	fc 91       	ld	r31, X
    26f8:	01 90       	ld	r0, Z+
    26fa:	f0 81       	ld	r31, Z
    26fc:	e0 2d       	mov	r30, r0
    26fe:	64 2f       	mov	r22, r20
    2700:	df 91       	pop	r29
    2702:	cf 91       	pop	r28
    2704:	1f 91       	pop	r17
    2706:	0f 91       	pop	r16
    2708:	ff 90       	pop	r15
    270a:	ef 90       	pop	r14
    270c:	df 90       	pop	r13
    270e:	cf 90       	pop	r12
    2710:	09 94       	ijmp
    2712:	2a 30       	cpi	r18, 0x0A	; 10
    2714:	31 05       	cpc	r19, r1
    2716:	01 f5       	brne	.+64     	; 0x2758 <_ZN5Print5printEli+0x7c>
    2718:	77 ff       	sbrs	r23, 7
    271a:	1d c0       	rjmp	.+58     	; 0x2756 <_ZN5Print5printEli+0x7a>
    271c:	6a 01       	movw	r12, r20
    271e:	7b 01       	movw	r14, r22
    2720:	ec 01       	movw	r28, r24
    2722:	6d e2       	ldi	r22, 0x2D	; 45
    2724:	0e 94 0b 13 	call	0x2616	; 0x2616 <_ZN5Print5printEc>
    2728:	8c 01       	movw	r16, r24
    272a:	44 27       	eor	r20, r20
    272c:	55 27       	eor	r21, r21
    272e:	ba 01       	movw	r22, r20
    2730:	4c 19       	sub	r20, r12
    2732:	5d 09       	sbc	r21, r13
    2734:	6e 09       	sbc	r22, r14
    2736:	7f 09       	sbc	r23, r15
    2738:	2a e0       	ldi	r18, 0x0A	; 10
    273a:	ce 01       	movw	r24, r28
    273c:	0e 94 12 13 	call	0x2624	; 0x2624 <_ZN5Print11printNumberEmh>
    2740:	80 0f       	add	r24, r16
    2742:	91 1f       	adc	r25, r17
    2744:	df 91       	pop	r29
    2746:	cf 91       	pop	r28
    2748:	1f 91       	pop	r17
    274a:	0f 91       	pop	r16
    274c:	ff 90       	pop	r15
    274e:	ef 90       	pop	r14
    2750:	df 90       	pop	r13
    2752:	cf 90       	pop	r12
    2754:	08 95       	ret
    2756:	2a e0       	ldi	r18, 0x0A	; 10
    2758:	df 91       	pop	r29
    275a:	cf 91       	pop	r28
    275c:	1f 91       	pop	r17
    275e:	0f 91       	pop	r16
    2760:	ff 90       	pop	r15
    2762:	ef 90       	pop	r14
    2764:	df 90       	pop	r13
    2766:	cf 90       	pop	r12
    2768:	0c 94 12 13 	jmp	0x2624	; 0x2624 <_ZN5Print11printNumberEmh>

0000276c <_ZN5Print5printEii>:
    276c:	9a 01       	movw	r18, r20
    276e:	ab 01       	movw	r20, r22
    2770:	77 0f       	add	r23, r23
    2772:	66 0b       	sbc	r22, r22
    2774:	77 0b       	sbc	r23, r23
    2776:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <_ZN5Print5printEli>

0000277a <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    277a:	7f 92       	push	r7
    277c:	8f 92       	push	r8
    277e:	9f 92       	push	r9
    2780:	af 92       	push	r10
    2782:	bf 92       	push	r11
    2784:	cf 92       	push	r12
    2786:	df 92       	push	r13
    2788:	ef 92       	push	r14
    278a:	ff 92       	push	r15
    278c:	0f 93       	push	r16
    278e:	1f 93       	push	r17
    2790:	cf 93       	push	r28
    2792:	df 93       	push	r29
    2794:	8c 01       	movw	r16, r24
    2796:	6a 01       	movw	r12, r20
    2798:	7b 01       	movw	r14, r22
    279a:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    279c:	9a 01       	movw	r18, r20
    279e:	ab 01       	movw	r20, r22
    27a0:	c7 01       	movw	r24, r14
    27a2:	b6 01       	movw	r22, r12
    27a4:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <__unordsf2>
    27a8:	88 23       	and	r24, r24
    27aa:	19 f0       	breq	.+6      	; 0x27b2 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    27ac:	6a e6       	ldi	r22, 0x6A	; 106
    27ae:	72 e0       	ldi	r23, 0x02	; 2
    27b0:	27 c0       	rjmp	.+78     	; 0x2800 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    27b2:	46 01       	movw	r8, r12
    27b4:	57 01       	movw	r10, r14
    27b6:	e8 94       	clt
    27b8:	b7 f8       	bld	r11, 7
    27ba:	2f ef       	ldi	r18, 0xFF	; 255
    27bc:	3f ef       	ldi	r19, 0xFF	; 255
    27be:	4f e7       	ldi	r20, 0x7F	; 127
    27c0:	5f e7       	ldi	r21, 0x7F	; 127
    27c2:	c5 01       	movw	r24, r10
    27c4:	b4 01       	movw	r22, r8
    27c6:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <__unordsf2>
    27ca:	81 11       	cpse	r24, r1
    27cc:	0d c0       	rjmp	.+26     	; 0x27e8 <_ZN5Print10printFloatEdh+0x6e>
    27ce:	2f ef       	ldi	r18, 0xFF	; 255
    27d0:	3f ef       	ldi	r19, 0xFF	; 255
    27d2:	4f e7       	ldi	r20, 0x7F	; 127
    27d4:	5f e7       	ldi	r21, 0x7F	; 127
    27d6:	c5 01       	movw	r24, r10
    27d8:	b4 01       	movw	r22, r8
    27da:	0e 94 82 11 	call	0x2304	; 0x2304 <__cmpsf2>
    27de:	18 16       	cp	r1, r24
    27e0:	1c f4       	brge	.+6      	; 0x27e8 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    27e2:	6e e6       	ldi	r22, 0x6E	; 110
    27e4:	72 e0       	ldi	r23, 0x02	; 2
    27e6:	0c c0       	rjmp	.+24     	; 0x2800 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    27e8:	2f ef       	ldi	r18, 0xFF	; 255
    27ea:	3f ef       	ldi	r19, 0xFF	; 255
    27ec:	4f e7       	ldi	r20, 0x7F	; 127
    27ee:	5f e4       	ldi	r21, 0x4F	; 79
    27f0:	c7 01       	movw	r24, r14
    27f2:	b6 01       	movw	r22, r12
    27f4:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <__gesf2>
    27f8:	18 16       	cp	r1, r24
    27fa:	94 f4       	brge	.+36     	; 0x2820 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    27fc:	62 e7       	ldi	r22, 0x72	; 114
    27fe:	72 e0       	ldi	r23, 0x02	; 2
    2800:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2802:	df 91       	pop	r29
    2804:	cf 91       	pop	r28
    2806:	1f 91       	pop	r17
    2808:	0f 91       	pop	r16
    280a:	ff 90       	pop	r15
    280c:	ef 90       	pop	r14
    280e:	df 90       	pop	r13
    2810:	cf 90       	pop	r12
    2812:	bf 90       	pop	r11
    2814:	af 90       	pop	r10
    2816:	9f 90       	pop	r9
    2818:	8f 90       	pop	r8
    281a:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    281c:	0c 94 e6 12 	jmp	0x25cc	; 0x25cc <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    2820:	2f ef       	ldi	r18, 0xFF	; 255
    2822:	3f ef       	ldi	r19, 0xFF	; 255
    2824:	4f e7       	ldi	r20, 0x7F	; 127
    2826:	5f ec       	ldi	r21, 0xCF	; 207
    2828:	c7 01       	movw	r24, r14
    282a:	b6 01       	movw	r22, r12
    282c:	0e 94 82 11 	call	0x2304	; 0x2304 <__cmpsf2>
    2830:	87 fd       	sbrc	r24, 7
    2832:	e4 cf       	rjmp	.-56     	; 0x27fc <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	a9 01       	movw	r20, r18
    283a:	c7 01       	movw	r24, r14
    283c:	b6 01       	movw	r22, r12
    283e:	0e 94 82 11 	call	0x2304	; 0x2304 <__cmpsf2>
    2842:	87 ff       	sbrs	r24, 7
    2844:	0a c0       	rjmp	.+20     	; 0x285a <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    2846:	6d e2       	ldi	r22, 0x2D	; 45
    2848:	c8 01       	movw	r24, r16
    284a:	0e 94 0b 13 	call	0x2616	; 0x2616 <_ZN5Print5printEc>
    284e:	ec 01       	movw	r28, r24
     number = -number;
    2850:	f7 fa       	bst	r15, 7
    2852:	f0 94       	com	r15
    2854:	f7 f8       	bld	r15, 7
    2856:	f0 94       	com	r15
    2858:	02 c0       	rjmp	.+4      	; 0x285e <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    285a:	c0 e0       	ldi	r28, 0x00	; 0
    285c:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    285e:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    2860:	60 e0       	ldi	r22, 0x00	; 0
    2862:	70 e0       	ldi	r23, 0x00	; 0
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    2868:	7b 14       	cp	r7, r11
    286a:	41 f0       	breq	.+16     	; 0x287c <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	40 e2       	ldi	r20, 0x20	; 32
    2872:	51 e4       	ldi	r21, 0x41	; 65
    2874:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2878:	b3 94       	inc	r11
    287a:	f6 cf       	rjmp	.-20     	; 0x2868 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    287c:	a7 01       	movw	r20, r14
    287e:	96 01       	movw	r18, r12
    2880:	0e 94 16 11 	call	0x222c	; 0x222c <__addsf3>
    2884:	6b 01       	movw	r12, r22
    2886:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    2888:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <__fixunssfsi>
    288c:	4b 01       	movw	r8, r22
    288e:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    2890:	2a e0       	ldi	r18, 0x0A	; 10
    2892:	ab 01       	movw	r20, r22
    2894:	bc 01       	movw	r22, r24
    2896:	c8 01       	movw	r24, r16
    2898:	0e 94 12 13 	call	0x2624	; 0x2624 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    289c:	c8 0f       	add	r28, r24
    289e:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    28a0:	77 20       	and	r7, r7
    28a2:	b9 f1       	breq	.+110    	; 0x2912 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    28a4:	c5 01       	movw	r24, r10
    28a6:	b4 01       	movw	r22, r8
    28a8:	0e 94 87 11 	call	0x230e	; 0x230e <__floatunsisf>
    28ac:	9b 01       	movw	r18, r22
    28ae:	ac 01       	movw	r20, r24
    28b0:	c7 01       	movw	r24, r14
    28b2:	b6 01       	movw	r22, r12
    28b4:	0e 94 15 11 	call	0x222a	; 0x222a <__subsf3>
    28b8:	6b 01       	movw	r12, r22
    28ba:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    28bc:	6e e2       	ldi	r22, 0x2E	; 46
    28be:	c8 01       	movw	r24, r16
    28c0:	0e 94 0b 13 	call	0x2616	; 0x2616 <_ZN5Print5printEc>
    28c4:	c8 0f       	add	r28, r24
    28c6:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	40 e2       	ldi	r20, 0x20	; 32
    28ce:	51 e4       	ldi	r21, 0x41	; 65
    28d0:	c7 01       	movw	r24, r14
    28d2:	b6 01       	movw	r22, r12
    28d4:	0e 94 39 12 	call	0x2472	; 0x2472 <__mulsf3>
    28d8:	4b 01       	movw	r8, r22
    28da:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    28dc:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <__fixunssfsi>
    28e0:	6b 01       	movw	r12, r22
    28e2:	7c 01       	movw	r14, r24
    n += print(toPrint);
    28e4:	4a e0       	ldi	r20, 0x0A	; 10
    28e6:	50 e0       	ldi	r21, 0x00	; 0
    28e8:	c8 01       	movw	r24, r16
    28ea:	0e 94 68 13 	call	0x26d0	; 0x26d0 <_ZN5Print5printEji>
    28ee:	c8 0f       	add	r28, r24
    28f0:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    28f2:	b6 01       	movw	r22, r12
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	0e 94 87 11 	call	0x230e	; 0x230e <__floatunsisf>
    28fc:	9b 01       	movw	r18, r22
    28fe:	ac 01       	movw	r20, r24
    2900:	c5 01       	movw	r24, r10
    2902:	b4 01       	movw	r22, r8
    2904:	0e 94 15 11 	call	0x222a	; 0x222a <__subsf3>
    2908:	6b 01       	movw	r12, r22
    290a:	7c 01       	movw	r14, r24
    290c:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    290e:	71 10       	cpse	r7, r1
    2910:	db cf       	rjmp	.-74     	; 0x28c8 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2912:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2914:	df 91       	pop	r29
    2916:	cf 91       	pop	r28
    2918:	1f 91       	pop	r17
    291a:	0f 91       	pop	r16
    291c:	ff 90       	pop	r15
    291e:	ef 90       	pop	r14
    2920:	df 90       	pop	r13
    2922:	cf 90       	pop	r12
    2924:	bf 90       	pop	r11
    2926:	af 90       	pop	r10
    2928:	9f 90       	pop	r9
    292a:	8f 90       	pop	r8
    292c:	7f 90       	pop	r7
    292e:	08 95       	ret

00002930 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2930:	0c 94 bd 13 	jmp	0x277a	; 0x277a <_ZN5Print10printFloatEdh>

00002934 <_ZL4RecvPVhh>:
//=======================================================================
//=======================================================================

USBDevice_ USBDevice;

USBDevice_::USBDevice_()
    2934:	61 50       	subi	r22, 0x01	; 1
    2936:	30 f0       	brcs	.+12     	; 0x2944 <_ZL4RecvPVhh+0x10>
    2938:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    293c:	fc 01       	movw	r30, r24
    293e:	20 83       	st	Z, r18
    2940:	01 96       	adiw	r24, 0x01	; 1
    2942:	f8 cf       	rjmp	.-16     	; 0x2934 <_ZL4RecvPVhh>
    2944:	28 98       	cbi	0x05, 0	; 5
    2946:	84 e6       	ldi	r24, 0x64	; 100
    2948:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <RxLEDPulse>
    294c:	08 95       	ret

0000294e <_ZL11SendControlh>:
    294e:	40 91 80 04 	lds	r20, 0x0480	; 0x800480 <_ZL6_cmark>
    2952:	50 91 81 04 	lds	r21, 0x0481	; 0x800481 <_ZL6_cmark+0x1>
    2956:	20 91 7e 04 	lds	r18, 0x047E	; 0x80047e <_ZL5_cend>
    295a:	30 91 7f 04 	lds	r19, 0x047F	; 0x80047f <_ZL5_cend+0x1>
    295e:	42 17       	cp	r20, r18
    2960:	53 07       	cpc	r21, r19
    2962:	b4 f4       	brge	.+44     	; 0x2990 <_ZL11SendControlh+0x42>
    2964:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2968:	95 70       	andi	r25, 0x05	; 5
    296a:	e1 f3       	breq	.-8      	; 0x2964 <_ZL11SendControlh+0x16>
    296c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2970:	92 fd       	sbrc	r25, 2
    2972:	19 c0       	rjmp	.+50     	; 0x29a6 <_ZL11SendControlh+0x58>
    2974:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2978:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <_ZL6_cmark>
    297c:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <_ZL6_cmark+0x1>
    2980:	01 96       	adiw	r24, 0x01	; 1
    2982:	8f 73       	andi	r24, 0x3F	; 63
    2984:	99 27       	eor	r25, r25
    2986:	89 2b       	or	r24, r25
    2988:	19 f4       	brne	.+6      	; 0x2990 <_ZL11SendControlh+0x42>
    298a:	8e ef       	ldi	r24, 0xFE	; 254
    298c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2990:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <_ZL6_cmark>
    2994:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <_ZL6_cmark+0x1>
    2998:	01 96       	adiw	r24, 0x01	; 1
    299a:	90 93 81 04 	sts	0x0481, r25	; 0x800481 <_ZL6_cmark+0x1>
    299e:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <_ZL6_cmark>
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	08 95       	ret
    29a6:	80 e0       	ldi	r24, 0x00	; 0
    29a8:	08 95       	ret

000029aa <_ZL24USB_SendStringDescriptorPKhhh>:
    29aa:	df 92       	push	r13
    29ac:	ef 92       	push	r14
    29ae:	ff 92       	push	r15
    29b0:	0f 93       	push	r16
    29b2:	1f 93       	push	r17
    29b4:	cf 93       	push	r28
    29b6:	df 93       	push	r29
    29b8:	d8 2e       	mov	r13, r24
    29ba:	f9 2e       	mov	r15, r25
    29bc:	e4 2e       	mov	r14, r20
    29be:	06 2f       	mov	r16, r22
    29c0:	10 e0       	ldi	r17, 0x00	; 0
    29c2:	c8 01       	movw	r24, r16
    29c4:	01 96       	adiw	r24, 0x01	; 1
    29c6:	88 0f       	add	r24, r24
    29c8:	0e 94 a7 14 	call	0x294e	; 0x294e <_ZL11SendControlh>
    29cc:	83 e0       	ldi	r24, 0x03	; 3
    29ce:	0e 94 a7 14 	call	0x294e	; 0x294e <_ZL11SendControlh>
    29d2:	cd 2d       	mov	r28, r13
    29d4:	df 2d       	mov	r29, r15
    29d6:	0c 0f       	add	r16, r28
    29d8:	1d 1f       	adc	r17, r29
    29da:	c0 17       	cp	r28, r16
    29dc:	d1 07       	cpc	r29, r17
    29de:	89 f0       	breq	.+34     	; 0x2a02 <_ZL24USB_SendStringDescriptorPKhhh+0x58>
    29e0:	e7 fe       	sbrs	r14, 7
    29e2:	03 c0       	rjmp	.+6      	; 0x29ea <_ZL24USB_SendStringDescriptorPKhhh+0x40>
    29e4:	fe 01       	movw	r30, r28
    29e6:	84 91       	lpm	r24, Z
    29e8:	01 c0       	rjmp	.+2      	; 0x29ec <_ZL24USB_SendStringDescriptorPKhhh+0x42>
    29ea:	88 81       	ld	r24, Y
    29ec:	0e 94 a7 14 	call	0x294e	; 0x294e <_ZL11SendControlh>
    29f0:	f8 2e       	mov	r15, r24
    29f2:	80 e0       	ldi	r24, 0x00	; 0
    29f4:	0e 94 a7 14 	call	0x294e	; 0x294e <_ZL11SendControlh>
    29f8:	8f 21       	and	r24, r15
    29fa:	21 96       	adiw	r28, 0x01	; 1
    29fc:	81 11       	cpse	r24, r1
    29fe:	ed cf       	rjmp	.-38     	; 0x29da <_ZL24USB_SendStringDescriptorPKhhh+0x30>
    2a00:	01 c0       	rjmp	.+2      	; 0x2a04 <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	df 91       	pop	r29
    2a06:	cf 91       	pop	r28
    2a08:	1f 91       	pop	r17
    2a0a:	0f 91       	pop	r16
    2a0c:	ff 90       	pop	r15
    2a0e:	ef 90       	pop	r14
    2a10:	df 90       	pop	r13
    2a12:	08 95       	ret

00002a14 <_ZL15USB_ClockEnablev>:
    2a14:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    2a18:	81 60       	ori	r24, 0x01	; 1
    2a1a:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    2a1e:	80 ea       	ldi	r24, 0xA0	; 160
    2a20:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2a24:	89 b5       	in	r24, 0x29	; 41
    2a26:	80 61       	ori	r24, 0x10	; 16
    2a28:	89 bd       	out	0x29, r24	; 41
    2a2a:	89 b5       	in	r24, 0x29	; 41
    2a2c:	82 60       	ori	r24, 0x02	; 2
    2a2e:	89 bd       	out	0x29, r24	; 41
    2a30:	09 b4       	in	r0, 0x29	; 41
    2a32:	00 fe       	sbrs	r0, 0
    2a34:	fd cf       	rjmp	.-6      	; 0x2a30 <_ZL15USB_ClockEnablev+0x1c>
    2a36:	61 e0       	ldi	r22, 0x01	; 1
    2a38:	70 e0       	ldi	r23, 0x00	; 0
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	0e 94 4e 19 	call	0x329c	; 0x329c <delay>
    2a42:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2a46:	8f 7c       	andi	r24, 0xCF	; 207
    2a48:	80 61       	ori	r24, 0x10	; 16
    2a4a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2a4e:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2a52:	80 7f       	andi	r24, 0xF0	; 240
    2a54:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2a58:	08 95       	ret

00002a5a <_ZL14SendInterfacesv>:
    2a5a:	cf 93       	push	r28
    2a5c:	df 93       	push	r29
    2a5e:	1f 92       	push	r1
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
    2a64:	19 82       	std	Y+1, r1	; 0x01
    2a66:	ce 01       	movw	r24, r28
    2a68:	01 96       	adiw	r24, 0x01	; 1
    2a6a:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <_Z16CDC_GetInterfacePh>
    2a6e:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <_Z12PluggableUSBv>
    2a72:	be 01       	movw	r22, r28
    2a74:	6f 5f       	subi	r22, 0xFF	; 255
    2a76:	7f 4f       	sbci	r23, 0xFF	; 255
    2a78:	0e 94 8b 1c 	call	0x3916	; 0x3916 <_ZN13PluggableUSB_12getInterfaceEPh>
    2a7c:	89 81       	ldd	r24, Y+1	; 0x01
    2a7e:	0f 90       	pop	r0
    2a80:	df 91       	pop	r29
    2a82:	cf 91       	pop	r28
    2a84:	08 95       	ret

00002a86 <_ZN6LockEPC1Eh>:
    2a86:	2f b7       	in	r18, 0x3f	; 63
    2a88:	fc 01       	movw	r30, r24
    2a8a:	20 83       	st	Z, r18
    2a8c:	f8 94       	cli
    2a8e:	67 70       	andi	r22, 0x07	; 7
    2a90:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2a94:	08 95       	ret

00002a96 <_Z13USB_Availableh>:
    2a96:	cf 93       	push	r28
    2a98:	df 93       	push	r29
    2a9a:	1f 92       	push	r1
    2a9c:	cd b7       	in	r28, 0x3d	; 61
    2a9e:	de b7       	in	r29, 0x3e	; 62
    2aa0:	68 2f       	mov	r22, r24
    2aa2:	ce 01       	movw	r24, r28
    2aa4:	01 96       	adiw	r24, 0x01	; 1
    2aa6:	0e 94 43 15 	call	0x2a86	; 0x2a86 <_ZN6LockEPC1Eh>
    2aaa:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2aae:	99 81       	ldd	r25, Y+1	; 0x01
    2ab0:	9f bf       	out	0x3f, r25	; 63
    2ab2:	0f 90       	pop	r0
    2ab4:	df 91       	pop	r29
    2ab6:	cf 91       	pop	r28
    2ab8:	08 95       	ret

00002aba <_Z8USB_RecvhPvi>:
    2aba:	ef 92       	push	r14
    2abc:	ff 92       	push	r15
    2abe:	0f 93       	push	r16
    2ac0:	1f 93       	push	r17
    2ac2:	cf 93       	push	r28
    2ac4:	df 93       	push	r29
    2ac6:	1f 92       	push	r1
    2ac8:	cd b7       	in	r28, 0x3d	; 61
    2aca:	de b7       	in	r29, 0x3e	; 62
    2acc:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <_usbConfiguration>
    2ad0:	99 23       	and	r25, r25
    2ad2:	11 f0       	breq	.+4      	; 0x2ad8 <_Z8USB_RecvhPvi+0x1e>
    2ad4:	57 ff       	sbrs	r21, 7
    2ad6:	03 c0       	rjmp	.+6      	; 0x2ade <_Z8USB_RecvhPvi+0x24>
    2ad8:	8f ef       	ldi	r24, 0xFF	; 255
    2ada:	9f ef       	ldi	r25, 0xFF	; 255
    2adc:	29 c0       	rjmp	.+82     	; 0x2b30 <_Z8USB_RecvhPvi+0x76>
    2ade:	8a 01       	movw	r16, r20
    2ae0:	7b 01       	movw	r14, r22
    2ae2:	68 2f       	mov	r22, r24
    2ae4:	ce 01       	movw	r24, r28
    2ae6:	01 96       	adiw	r24, 0x01	; 1
    2ae8:	0e 94 43 15 	call	0x2a86	; 0x2a86 <_ZN6LockEPC1Eh>
    2aec:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	02 17       	cp	r16, r18
    2af4:	13 07       	cpc	r17, r19
    2af6:	0c f4       	brge	.+2      	; 0x2afa <_Z8USB_RecvhPvi+0x40>
    2af8:	98 01       	movw	r18, r16
    2afa:	82 2f       	mov	r24, r18
    2afc:	f7 01       	movw	r30, r14
    2afe:	94 e6       	ldi	r25, 0x64	; 100
    2b00:	81 50       	subi	r24, 0x01	; 1
    2b02:	38 f0       	brcs	.+14     	; 0x2b12 <_Z8USB_RecvhPvi+0x58>
    2b04:	28 98       	cbi	0x05, 0	; 5
    2b06:	90 93 85 04 	sts	0x0485, r25	; 0x800485 <RxLEDPulse>
    2b0a:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2b0e:	41 93       	st	Z+, r20
    2b10:	f7 cf       	rjmp	.-18     	; 0x2b00 <_Z8USB_RecvhPvi+0x46>
    2b12:	21 15       	cp	r18, r1
    2b14:	31 05       	cpc	r19, r1
    2b16:	21 f0       	breq	.+8      	; 0x2b20 <_Z8USB_RecvhPvi+0x66>
    2b18:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2b1c:	88 23       	and	r24, r24
    2b1e:	21 f0       	breq	.+8      	; 0x2b28 <_Z8USB_RecvhPvi+0x6e>
    2b20:	89 81       	ldd	r24, Y+1	; 0x01
    2b22:	8f bf       	out	0x3f, r24	; 63
    2b24:	c9 01       	movw	r24, r18
    2b26:	04 c0       	rjmp	.+8      	; 0x2b30 <_Z8USB_RecvhPvi+0x76>
    2b28:	8b e6       	ldi	r24, 0x6B	; 107
    2b2a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2b2e:	f8 cf       	rjmp	.-16     	; 0x2b20 <_Z8USB_RecvhPvi+0x66>
    2b30:	0f 90       	pop	r0
    2b32:	df 91       	pop	r29
    2b34:	cf 91       	pop	r28
    2b36:	1f 91       	pop	r17
    2b38:	0f 91       	pop	r16
    2b3a:	ff 90       	pop	r15
    2b3c:	ef 90       	pop	r14
    2b3e:	08 95       	ret

00002b40 <_Z8USB_Recvh>:
    2b40:	cf 93       	push	r28
    2b42:	df 93       	push	r29
    2b44:	1f 92       	push	r1
    2b46:	cd b7       	in	r28, 0x3d	; 61
    2b48:	de b7       	in	r29, 0x3e	; 62
    2b4a:	41 e0       	ldi	r20, 0x01	; 1
    2b4c:	50 e0       	ldi	r21, 0x00	; 0
    2b4e:	be 01       	movw	r22, r28
    2b50:	6f 5f       	subi	r22, 0xFF	; 255
    2b52:	7f 4f       	sbci	r23, 0xFF	; 255
    2b54:	0e 94 5d 15 	call	0x2aba	; 0x2aba <_Z8USB_RecvhPvi>
    2b58:	01 97       	sbiw	r24, 0x01	; 1
    2b5a:	19 f4       	brne	.+6      	; 0x2b62 <_Z8USB_Recvh+0x22>
    2b5c:	89 81       	ldd	r24, Y+1	; 0x01
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	02 c0       	rjmp	.+4      	; 0x2b66 <_Z8USB_Recvh+0x26>
    2b62:	8f ef       	ldi	r24, 0xFF	; 255
    2b64:	9f ef       	ldi	r25, 0xFF	; 255
    2b66:	0f 90       	pop	r0
    2b68:	df 91       	pop	r29
    2b6a:	cf 91       	pop	r28
    2b6c:	08 95       	ret

00002b6e <_Z13USB_SendSpaceh>:
    2b6e:	cf 93       	push	r28
    2b70:	df 93       	push	r29
    2b72:	1f 92       	push	r1
    2b74:	cd b7       	in	r28, 0x3d	; 61
    2b76:	de b7       	in	r29, 0x3e	; 62
    2b78:	68 2f       	mov	r22, r24
    2b7a:	ce 01       	movw	r24, r28
    2b7c:	01 96       	adiw	r24, 0x01	; 1
    2b7e:	0e 94 43 15 	call	0x2a86	; 0x2a86 <_ZN6LockEPC1Eh>
    2b82:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2b86:	89 2f       	mov	r24, r25
    2b88:	80 72       	andi	r24, 0x20	; 32
    2b8a:	95 ff       	sbrs	r25, 5
    2b8c:	04 c0       	rjmp	.+8      	; 0x2b96 <_Z13USB_SendSpaceh+0x28>
    2b8e:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    2b92:	80 e4       	ldi	r24, 0x40	; 64
    2b94:	89 1b       	sub	r24, r25
    2b96:	99 81       	ldd	r25, Y+1	; 0x01
    2b98:	9f bf       	out	0x3f, r25	; 63
    2b9a:	0f 90       	pop	r0
    2b9c:	df 91       	pop	r29
    2b9e:	cf 91       	pop	r28
    2ba0:	08 95       	ret

00002ba2 <_Z8USB_SendhPKvi>:
    2ba2:	5f 92       	push	r5
    2ba4:	6f 92       	push	r6
    2ba6:	7f 92       	push	r7
    2ba8:	8f 92       	push	r8
    2baa:	9f 92       	push	r9
    2bac:	af 92       	push	r10
    2bae:	bf 92       	push	r11
    2bb0:	cf 92       	push	r12
    2bb2:	df 92       	push	r13
    2bb4:	ef 92       	push	r14
    2bb6:	ff 92       	push	r15
    2bb8:	0f 93       	push	r16
    2bba:	1f 93       	push	r17
    2bbc:	cf 93       	push	r28
    2bbe:	df 93       	push	r29
    2bc0:	1f 92       	push	r1
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
    2bc6:	98 2e       	mov	r9, r24
    2bc8:	6b 01       	movw	r12, r22
    2bca:	b4 2e       	mov	r11, r20
    2bcc:	05 2f       	mov	r16, r21
    2bce:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <_usbConfiguration>
    2bd2:	81 11       	cpse	r24, r1
    2bd4:	03 c0       	rjmp	.+6      	; 0x2bdc <_Z8USB_SendhPKvi+0x3a>
    2bd6:	8f ef       	ldi	r24, 0xFF	; 255
    2bd8:	9f ef       	ldi	r25, 0xFF	; 255
    2bda:	77 c0       	rjmp	.+238    	; 0x2cca <_Z8USB_SendhPKvi+0x128>
    2bdc:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <_usbSuspendState>
    2be0:	80 ff       	sbrs	r24, 0
    2be2:	05 c0       	rjmp	.+10     	; 0x2bee <_Z8USB_SendhPKvi+0x4c>
    2be4:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2be8:	82 60       	ori	r24, 0x02	; 2
    2bea:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    2bee:	eb 2c       	mov	r14, r11
    2bf0:	f0 2e       	mov	r15, r16
    2bf2:	a1 2c       	mov	r10, r1
    2bf4:	8a ef       	ldi	r24, 0xFA	; 250
    2bf6:	88 2e       	mov	r8, r24
    2bf8:	89 2d       	mov	r24, r9
    2bfa:	80 72       	andi	r24, 0x20	; 32
    2bfc:	68 2e       	mov	r6, r24
    2bfe:	89 2d       	mov	r24, r9
    2c00:	80 74       	andi	r24, 0x40	; 64
    2c02:	58 2e       	mov	r5, r24
    2c04:	9a e3       	ldi	r25, 0x3A	; 58
    2c06:	79 2e       	mov	r7, r25
    2c08:	e1 14       	cp	r14, r1
    2c0a:	f1 04       	cpc	r15, r1
    2c0c:	19 f4       	brne	.+6      	; 0x2c14 <_Z8USB_SendhPKvi+0x72>
    2c0e:	aa 20       	and	r10, r10
    2c10:	09 f4       	brne	.+2      	; 0x2c14 <_Z8USB_SendhPKvi+0x72>
    2c12:	55 c0       	rjmp	.+170    	; 0x2cbe <_Z8USB_SendhPKvi+0x11c>
    2c14:	89 2d       	mov	r24, r9
    2c16:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <_Z13USB_SendSpaceh>
    2c1a:	18 2f       	mov	r17, r24
    2c1c:	81 11       	cpse	r24, r1
    2c1e:	0a c0       	rjmp	.+20     	; 0x2c34 <_Z8USB_SendhPKvi+0x92>
    2c20:	8a 94       	dec	r8
    2c22:	88 20       	and	r8, r8
    2c24:	c1 f2       	breq	.-80     	; 0x2bd6 <_Z8USB_SendhPKvi+0x34>
    2c26:	61 e0       	ldi	r22, 0x01	; 1
    2c28:	70 e0       	ldi	r23, 0x00	; 0
    2c2a:	80 e0       	ldi	r24, 0x00	; 0
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	0e 94 4e 19 	call	0x329c	; 0x329c <delay>
    2c32:	ea cf       	rjmp	.-44     	; 0x2c08 <_Z8USB_SendhPKvi+0x66>
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	e8 16       	cp	r14, r24
    2c38:	f9 06       	cpc	r15, r25
    2c3a:	0c f4       	brge	.+2      	; 0x2c3e <_Z8USB_SendhPKvi+0x9c>
    2c3c:	1e 2d       	mov	r17, r14
    2c3e:	69 2d       	mov	r22, r9
    2c40:	ce 01       	movw	r24, r28
    2c42:	01 96       	adiw	r24, 0x01	; 1
    2c44:	0e 94 43 15 	call	0x2a86	; 0x2a86 <_ZN6LockEPC1Eh>
    2c48:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2c4c:	85 ff       	sbrs	r24, 5
    2c4e:	34 c0       	rjmp	.+104    	; 0x2cb8 <_Z8USB_SendhPKvi+0x116>
    2c50:	81 2f       	mov	r24, r17
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	e8 1a       	sub	r14, r24
    2c56:	f9 0a       	sbc	r15, r25
    2c58:	66 20       	and	r6, r6
    2c5a:	29 f0       	breq	.+10     	; 0x2c66 <_Z8USB_SendhPKvi+0xc4>
    2c5c:	11 50       	subi	r17, 0x01	; 1
    2c5e:	a0 f0       	brcs	.+40     	; 0x2c88 <_Z8USB_SendhPKvi+0xe6>
    2c60:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2c64:	fb cf       	rjmp	.-10     	; 0x2c5c <_Z8USB_SendhPKvi+0xba>
    2c66:	f6 01       	movw	r30, r12
    2c68:	97 fe       	sbrs	r9, 7
    2c6a:	0a c0       	rjmp	.+20     	; 0x2c80 <_Z8USB_SendhPKvi+0xde>
    2c6c:	11 50       	subi	r17, 0x01	; 1
    2c6e:	50 f0       	brcs	.+20     	; 0x2c84 <_Z8USB_SendhPKvi+0xe2>
    2c70:	24 91       	lpm	r18, Z
    2c72:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2c76:	31 96       	adiw	r30, 0x01	; 1
    2c78:	f9 cf       	rjmp	.-14     	; 0x2c6c <_Z8USB_SendhPKvi+0xca>
    2c7a:	21 91       	ld	r18, Z+
    2c7c:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2c80:	11 50       	subi	r17, 0x01	; 1
    2c82:	d8 f7       	brcc	.-10     	; 0x2c7a <_Z8USB_SendhPKvi+0xd8>
    2c84:	c8 0e       	add	r12, r24
    2c86:	d9 1e       	adc	r13, r25
    2c88:	aa 20       	and	r10, r10
    2c8a:	19 f0       	breq	.+6      	; 0x2c92 <_Z8USB_SendhPKvi+0xf0>
    2c8c:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2c90:	0b c0       	rjmp	.+22     	; 0x2ca8 <_Z8USB_SendhPKvi+0x106>
    2c92:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2c96:	85 fd       	sbrc	r24, 5
    2c98:	09 c0       	rjmp	.+18     	; 0x2cac <_Z8USB_SendhPKvi+0x10a>
    2c9a:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2c9e:	aa 24       	eor	r10, r10
    2ca0:	a3 94       	inc	r10
    2ca2:	e1 14       	cp	r14, r1
    2ca4:	f1 04       	cpc	r15, r1
    2ca6:	41 f0       	breq	.+16     	; 0x2cb8 <_Z8USB_SendhPKvi+0x116>
    2ca8:	a1 2c       	mov	r10, r1
    2caa:	06 c0       	rjmp	.+12     	; 0x2cb8 <_Z8USB_SendhPKvi+0x116>
    2cac:	e1 14       	cp	r14, r1
    2cae:	f1 04       	cpc	r15, r1
    2cb0:	19 f4       	brne	.+6      	; 0x2cb8 <_Z8USB_SendhPKvi+0x116>
    2cb2:	51 10       	cpse	r5, r1
    2cb4:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2cb8:	89 81       	ldd	r24, Y+1	; 0x01
    2cba:	8f bf       	out	0x3f, r24	; 63
    2cbc:	a5 cf       	rjmp	.-182    	; 0x2c08 <_Z8USB_SendhPKvi+0x66>
    2cbe:	5d 98       	cbi	0x0b, 5	; 11
    2cc0:	84 e6       	ldi	r24, 0x64	; 100
    2cc2:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <TxLEDPulse>
    2cc6:	8b 2d       	mov	r24, r11
    2cc8:	90 2f       	mov	r25, r16
    2cca:	0f 90       	pop	r0
    2ccc:	df 91       	pop	r29
    2cce:	cf 91       	pop	r28
    2cd0:	1f 91       	pop	r17
    2cd2:	0f 91       	pop	r16
    2cd4:	ff 90       	pop	r15
    2cd6:	ef 90       	pop	r14
    2cd8:	df 90       	pop	r13
    2cda:	cf 90       	pop	r12
    2cdc:	bf 90       	pop	r11
    2cde:	af 90       	pop	r10
    2ce0:	9f 90       	pop	r9
    2ce2:	8f 90       	pop	r8
    2ce4:	7f 90       	pop	r7
    2ce6:	6f 90       	pop	r6
    2ce8:	5f 90       	pop	r5
    2cea:	08 95       	ret

00002cec <_Z11InitControli>:
    2cec:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2cf0:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <_ZL6_cmark+0x1>
    2cf4:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <_ZL6_cmark>
    2cf8:	90 93 7f 04 	sts	0x047F, r25	; 0x80047f <_ZL5_cend+0x1>
    2cfc:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <_ZL5_cend>
    2d00:	08 95       	ret

00002d02 <_Z15USB_SendControlhPKvi>:
    2d02:	df 92       	push	r13
    2d04:	ef 92       	push	r14
    2d06:	ff 92       	push	r15
    2d08:	0f 93       	push	r16
    2d0a:	1f 93       	push	r17
    2d0c:	cf 93       	push	r28
    2d0e:	df 93       	push	r29
    2d10:	d8 2e       	mov	r13, r24
    2d12:	8a 01       	movw	r16, r20
    2d14:	7b 01       	movw	r14, r22
    2d16:	e4 0e       	add	r14, r20
    2d18:	f5 1e       	adc	r15, r21
    2d1a:	eb 01       	movw	r28, r22
    2d1c:	ce 15       	cp	r28, r14
    2d1e:	df 05       	cpc	r29, r15
    2d20:	71 f0       	breq	.+28     	; 0x2d3e <_Z15USB_SendControlhPKvi+0x3c>
    2d22:	d7 fe       	sbrs	r13, 7
    2d24:	03 c0       	rjmp	.+6      	; 0x2d2c <_Z15USB_SendControlhPKvi+0x2a>
    2d26:	fe 01       	movw	r30, r28
    2d28:	84 91       	lpm	r24, Z
    2d2a:	01 c0       	rjmp	.+2      	; 0x2d2e <_Z15USB_SendControlhPKvi+0x2c>
    2d2c:	88 81       	ld	r24, Y
    2d2e:	0e 94 a7 14 	call	0x294e	; 0x294e <_ZL11SendControlh>
    2d32:	21 96       	adiw	r28, 0x01	; 1
    2d34:	81 11       	cpse	r24, r1
    2d36:	f2 cf       	rjmp	.-28     	; 0x2d1c <_Z15USB_SendControlhPKvi+0x1a>
    2d38:	8f ef       	ldi	r24, 0xFF	; 255
    2d3a:	9f ef       	ldi	r25, 0xFF	; 255
    2d3c:	01 c0       	rjmp	.+2      	; 0x2d40 <_Z15USB_SendControlhPKvi+0x3e>
    2d3e:	c8 01       	movw	r24, r16
    2d40:	df 91       	pop	r29
    2d42:	cf 91       	pop	r28
    2d44:	1f 91       	pop	r17
    2d46:	0f 91       	pop	r16
    2d48:	ff 90       	pop	r15
    2d4a:	ef 90       	pop	r14
    2d4c:	df 90       	pop	r13
    2d4e:	08 95       	ret

00002d50 <_Z15USB_RecvControlPvi>:
    2d50:	af 92       	push	r10
    2d52:	bf 92       	push	r11
    2d54:	df 92       	push	r13
    2d56:	ef 92       	push	r14
    2d58:	ff 92       	push	r15
    2d5a:	0f 93       	push	r16
    2d5c:	1f 93       	push	r17
    2d5e:	cf 93       	push	r28
    2d60:	df 93       	push	r29
    2d62:	5c 01       	movw	r10, r24
    2d64:	8b 01       	movw	r16, r22
    2d66:	eb 01       	movw	r28, r22
    2d68:	9b ef       	ldi	r25, 0xFB	; 251
    2d6a:	d9 2e       	mov	r13, r25
    2d6c:	20 97       	sbiw	r28, 0x00	; 0
    2d6e:	c1 f0       	breq	.+48     	; 0x2da0 <_Z15USB_RecvControlPvi+0x50>
    2d70:	7e 01       	movw	r14, r28
    2d72:	c1 34       	cpi	r28, 0x41	; 65
    2d74:	d1 05       	cpc	r29, r1
    2d76:	1c f0       	brlt	.+6      	; 0x2d7e <_Z15USB_RecvControlPvi+0x2e>
    2d78:	80 e4       	ldi	r24, 0x40	; 64
    2d7a:	e8 2e       	mov	r14, r24
    2d7c:	f1 2c       	mov	r15, r1
    2d7e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2d82:	82 ff       	sbrs	r24, 2
    2d84:	fc cf       	rjmp	.-8      	; 0x2d7e <_Z15USB_RecvControlPvi+0x2e>
    2d86:	c8 01       	movw	r24, r16
    2d88:	8c 1b       	sub	r24, r28
    2d8a:	9d 0b       	sbc	r25, r29
    2d8c:	6e 2d       	mov	r22, r14
    2d8e:	8a 0d       	add	r24, r10
    2d90:	9b 1d       	adc	r25, r11
    2d92:	0e 94 9a 14 	call	0x2934	; 0x2934 <_ZL4RecvPVhh>
    2d96:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2d9a:	ce 19       	sub	r28, r14
    2d9c:	df 09       	sbc	r29, r15
    2d9e:	e6 cf       	rjmp	.-52     	; 0x2d6c <_Z15USB_RecvControlPvi+0x1c>
    2da0:	c8 01       	movw	r24, r16
    2da2:	df 91       	pop	r29
    2da4:	cf 91       	pop	r28
    2da6:	1f 91       	pop	r17
    2da8:	0f 91       	pop	r16
    2daa:	ff 90       	pop	r15
    2dac:	ef 90       	pop	r14
    2dae:	df 90       	pop	r13
    2db0:	bf 90       	pop	r11
    2db2:	af 90       	pop	r10
    2db4:	08 95       	ret

00002db6 <__vector_11>:
    2db6:	1f 92       	push	r1
    2db8:	0f 92       	push	r0
    2dba:	0f b6       	in	r0, 0x3f	; 63
    2dbc:	0f 92       	push	r0
    2dbe:	11 24       	eor	r1, r1
    2dc0:	cf 92       	push	r12
    2dc2:	df 92       	push	r13
    2dc4:	ef 92       	push	r14
    2dc6:	ff 92       	push	r15
    2dc8:	0f 93       	push	r16
    2dca:	1f 93       	push	r17
    2dcc:	2f 93       	push	r18
    2dce:	3f 93       	push	r19
    2dd0:	4f 93       	push	r20
    2dd2:	5f 93       	push	r21
    2dd4:	6f 93       	push	r22
    2dd6:	7f 93       	push	r23
    2dd8:	8f 93       	push	r24
    2dda:	9f 93       	push	r25
    2ddc:	af 93       	push	r26
    2dde:	bf 93       	push	r27
    2de0:	ef 93       	push	r30
    2de2:	ff 93       	push	r31
    2de4:	cf 93       	push	r28
    2de6:	df 93       	push	r29
    2de8:	cd b7       	in	r28, 0x3d	; 61
    2dea:	de b7       	in	r29, 0x3e	; 62
    2dec:	6c 97       	sbiw	r28, 0x1c	; 28
    2dee:	de bf       	out	0x3e, r29	; 62
    2df0:	cd bf       	out	0x3d, r28	; 61
    2df2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2df6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2dfa:	83 ff       	sbrs	r24, 3
    2dfc:	17 c1       	rjmp	.+558    	; 0x302c <__vector_11+0x276>
    2dfe:	68 e0       	ldi	r22, 0x08	; 8
    2e00:	ce 01       	movw	r24, r28
    2e02:	45 96       	adiw	r24, 0x15	; 21
    2e04:	0e 94 9a 14 	call	0x2934	; 0x2934 <_ZL4RecvPVhh>
    2e08:	82 ef       	ldi	r24, 0xF2	; 242
    2e0a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2e0e:	8d 89       	ldd	r24, Y+21	; 0x15
    2e10:	87 ff       	sbrs	r24, 7
    2e12:	05 c0       	rjmp	.+10     	; 0x2e1e <__vector_11+0x68>
    2e14:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2e18:	90 ff       	sbrs	r25, 0
    2e1a:	fc cf       	rjmp	.-8      	; 0x2e14 <__vector_11+0x5e>
    2e1c:	03 c0       	rjmp	.+6      	; 0x2e24 <__vector_11+0x6e>
    2e1e:	9e ef       	ldi	r25, 0xFE	; 254
    2e20:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2e24:	98 2f       	mov	r25, r24
    2e26:	90 76       	andi	r25, 0x60	; 96
    2e28:	09 f0       	breq	.+2      	; 0x2e2c <__vector_11+0x76>
    2e2a:	d8 c0       	rjmp	.+432    	; 0x2fdc <__vector_11+0x226>
    2e2c:	9e 89       	ldd	r25, Y+22	; 0x16
    2e2e:	4f 89       	ldd	r20, Y+23	; 0x17
    2e30:	58 8d       	ldd	r21, Y+24	; 0x18
    2e32:	2f 89       	ldd	r18, Y+23	; 0x17
    2e34:	18 8d       	ldd	r17, Y+24	; 0x18
    2e36:	91 11       	cpse	r25, r1
    2e38:	0c c0       	rjmp	.+24     	; 0x2e52 <__vector_11+0x9c>
    2e3a:	80 38       	cpi	r24, 0x80	; 128
    2e3c:	29 f4       	brne	.+10     	; 0x2e48 <__vector_11+0x92>
    2e3e:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <_usbCurrentStatus>
    2e42:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2e46:	02 c0       	rjmp	.+4      	; 0x2e4c <__vector_11+0x96>
    2e48:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2e4c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2e50:	e6 c0       	rjmp	.+460    	; 0x301e <__vector_11+0x268>
    2e52:	91 30       	cpi	r25, 0x01	; 1
    2e54:	51 f4       	brne	.+20     	; 0x2e6a <__vector_11+0xb4>
    2e56:	81 11       	cpse	r24, r1
    2e58:	e2 c0       	rjmp	.+452    	; 0x301e <__vector_11+0x268>
    2e5a:	41 30       	cpi	r20, 0x01	; 1
    2e5c:	51 05       	cpc	r21, r1
    2e5e:	09 f0       	breq	.+2      	; 0x2e62 <__vector_11+0xac>
    2e60:	de c0       	rjmp	.+444    	; 0x301e <__vector_11+0x268>
    2e62:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <_usbCurrentStatus>
    2e66:	8d 7f       	andi	r24, 0xFD	; 253
    2e68:	0b c0       	rjmp	.+22     	; 0x2e80 <__vector_11+0xca>
    2e6a:	93 30       	cpi	r25, 0x03	; 3
    2e6c:	61 f4       	brne	.+24     	; 0x2e86 <__vector_11+0xd0>
    2e6e:	81 11       	cpse	r24, r1
    2e70:	d6 c0       	rjmp	.+428    	; 0x301e <__vector_11+0x268>
    2e72:	41 30       	cpi	r20, 0x01	; 1
    2e74:	51 05       	cpc	r21, r1
    2e76:	09 f0       	breq	.+2      	; 0x2e7a <__vector_11+0xc4>
    2e78:	d2 c0       	rjmp	.+420    	; 0x301e <__vector_11+0x268>
    2e7a:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <_usbCurrentStatus>
    2e7e:	82 60       	ori	r24, 0x02	; 2
    2e80:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <_usbCurrentStatus>
    2e84:	cc c0       	rjmp	.+408    	; 0x301e <__vector_11+0x268>
    2e86:	95 30       	cpi	r25, 0x05	; 5
    2e88:	49 f4       	brne	.+18     	; 0x2e9c <__vector_11+0xe6>
    2e8a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2e8e:	80 ff       	sbrs	r24, 0
    2e90:	fc cf       	rjmp	.-8      	; 0x2e8a <__vector_11+0xd4>
    2e92:	82 2f       	mov	r24, r18
    2e94:	80 68       	ori	r24, 0x80	; 128
    2e96:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    2e9a:	c1 c0       	rjmp	.+386    	; 0x301e <__vector_11+0x268>
    2e9c:	96 30       	cpi	r25, 0x06	; 6
    2e9e:	09 f0       	breq	.+2      	; 0x2ea2 <__vector_11+0xec>
    2ea0:	70 c0       	rjmp	.+224    	; 0x2f82 <__vector_11+0x1cc>
    2ea2:	eb 8c       	ldd	r14, Y+27	; 0x1b
    2ea4:	fc 8c       	ldd	r15, Y+28	; 0x1c
    2ea6:	12 30       	cpi	r17, 0x02	; 2
    2ea8:	69 f5       	brne	.+90     	; 0x2f04 <__vector_11+0x14e>
    2eaa:	80 e0       	ldi	r24, 0x00	; 0
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	0e 94 76 16 	call	0x2cec	; 0x2cec <_Z11InitControli>
    2eb2:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <_ZL14SendInterfacesv>
    2eb6:	99 e0       	ldi	r25, 0x09	; 9
    2eb8:	9e 01       	movw	r18, r28
    2eba:	2f 5f       	subi	r18, 0xFF	; 255
    2ebc:	3f 4f       	sbci	r19, 0xFF	; 255
    2ebe:	69 01       	movw	r12, r18
    2ec0:	f9 01       	movw	r30, r18
    2ec2:	29 2f       	mov	r18, r25
    2ec4:	11 92       	st	Z+, r1
    2ec6:	2a 95       	dec	r18
    2ec8:	e9 f7       	brne	.-6      	; 0x2ec4 <__vector_11+0x10e>
    2eca:	99 83       	std	Y+1, r25	; 0x01
    2ecc:	1a 83       	std	Y+2, r17	; 0x02
    2ece:	91 e0       	ldi	r25, 0x01	; 1
    2ed0:	9e 83       	std	Y+6, r25	; 0x06
    2ed2:	90 ea       	ldi	r25, 0xA0	; 160
    2ed4:	98 87       	std	Y+8, r25	; 0x08
    2ed6:	9a ef       	ldi	r25, 0xFA	; 250
    2ed8:	99 87       	std	Y+9, r25	; 0x09
    2eda:	20 91 80 04 	lds	r18, 0x0480	; 0x800480 <_ZL6_cmark>
    2ede:	30 91 81 04 	lds	r19, 0x0481	; 0x800481 <_ZL6_cmark+0x1>
    2ee2:	27 5f       	subi	r18, 0xF7	; 247
    2ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee6:	3c 83       	std	Y+4, r19	; 0x04
    2ee8:	2b 83       	std	Y+3, r18	; 0x03
    2eea:	8d 83       	std	Y+5, r24	; 0x05
    2eec:	c7 01       	movw	r24, r14
    2eee:	0e 94 76 16 	call	0x2cec	; 0x2cec <_Z11InitControli>
    2ef2:	49 e0       	ldi	r20, 0x09	; 9
    2ef4:	50 e0       	ldi	r21, 0x00	; 0
    2ef6:	b6 01       	movw	r22, r12
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_Z15USB_SendControlhPKvi>
    2efe:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <_ZL14SendInterfacesv>
    2f02:	8d c0       	rjmp	.+282    	; 0x301e <__vector_11+0x268>
    2f04:	c7 01       	movw	r24, r14
    2f06:	0e 94 76 16 	call	0x2cec	; 0x2cec <_Z11InitControli>
    2f0a:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <_Z12PluggableUSBv>
    2f0e:	be 01       	movw	r22, r28
    2f10:	6b 5e       	subi	r22, 0xEB	; 235
    2f12:	7f 4f       	sbci	r23, 0xFF	; 255
    2f14:	0e 94 b4 1c 	call	0x3968	; 0x3968 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    2f18:	00 97       	sbiw	r24, 0x00	; 0
    2f1a:	19 f0       	breq	.+6      	; 0x2f22 <__vector_11+0x16c>
    2f1c:	0c f0       	brlt	.+2      	; 0x2f20 <__vector_11+0x16a>
    2f1e:	7f c0       	rjmp	.+254    	; 0x301e <__vector_11+0x268>
    2f20:	82 c0       	rjmp	.+260    	; 0x3026 <__vector_11+0x270>
    2f22:	11 30       	cpi	r17, 0x01	; 1
    2f24:	09 f4       	brne	.+2      	; 0x2f28 <__vector_11+0x172>
    2f26:	70 c0       	rjmp	.+224    	; 0x3008 <__vector_11+0x252>
    2f28:	13 30       	cpi	r17, 0x03	; 3
    2f2a:	09 f0       	breq	.+2      	; 0x2f2e <__vector_11+0x178>
    2f2c:	7c c0       	rjmp	.+248    	; 0x3026 <__vector_11+0x270>
    2f2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f30:	88 23       	and	r24, r24
    2f32:	09 f4       	brne	.+2      	; 0x2f36 <__vector_11+0x180>
    2f34:	6c c0       	rjmp	.+216    	; 0x300e <__vector_11+0x258>
    2f36:	82 30       	cpi	r24, 0x02	; 2
    2f38:	29 f4       	brne	.+10     	; 0x2f44 <__vector_11+0x18e>
    2f3a:	40 e8       	ldi	r20, 0x80	; 128
    2f3c:	60 e1       	ldi	r22, 0x10	; 16
    2f3e:	89 ee       	ldi	r24, 0xE9	; 233
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	06 c0       	rjmp	.+12     	; 0x2f50 <__vector_11+0x19a>
    2f44:	81 30       	cpi	r24, 0x01	; 1
    2f46:	39 f4       	brne	.+14     	; 0x2f56 <__vector_11+0x1a0>
    2f48:	40 e8       	ldi	r20, 0x80	; 128
    2f4a:	6b e0       	ldi	r22, 0x0B	; 11
    2f4c:	8d ed       	ldi	r24, 0xDD	; 221
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	0e 94 d5 14 	call	0x29aa	; 0x29aa <_ZL24USB_SendStringDescriptorPKhhh>
    2f54:	56 c0       	rjmp	.+172    	; 0x3002 <__vector_11+0x24c>
    2f56:	83 30       	cpi	r24, 0x03	; 3
    2f58:	09 f0       	breq	.+2      	; 0x2f5c <__vector_11+0x1a6>
    2f5a:	65 c0       	rjmp	.+202    	; 0x3026 <__vector_11+0x270>
    2f5c:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <_Z12PluggableUSBv>
    2f60:	8e 01       	movw	r16, r28
    2f62:	0f 5f       	subi	r16, 0xFF	; 255
    2f64:	1f 4f       	sbci	r17, 0xFF	; 255
    2f66:	b8 01       	movw	r22, r16
    2f68:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <_ZN13PluggableUSB_12getShortNameEPc>
    2f6c:	f8 01       	movw	r30, r16
    2f6e:	01 90       	ld	r0, Z+
    2f70:	00 20       	and	r0, r0
    2f72:	e9 f7       	brne	.-6      	; 0x2f6e <__vector_11+0x1b8>
    2f74:	31 97       	sbiw	r30, 0x01	; 1
    2f76:	bf 01       	movw	r22, r30
    2f78:	60 1b       	sub	r22, r16
    2f7a:	71 0b       	sbc	r23, r17
    2f7c:	40 e0       	ldi	r20, 0x00	; 0
    2f7e:	c8 01       	movw	r24, r16
    2f80:	e7 cf       	rjmp	.-50     	; 0x2f50 <__vector_11+0x19a>
    2f82:	97 30       	cpi	r25, 0x07	; 7
    2f84:	09 f4       	brne	.+2      	; 0x2f88 <__vector_11+0x1d2>
    2f86:	4f c0       	rjmp	.+158    	; 0x3026 <__vector_11+0x270>
    2f88:	98 30       	cpi	r25, 0x08	; 8
    2f8a:	21 f4       	brne	.+8      	; 0x2f94 <__vector_11+0x1de>
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2f92:	45 c0       	rjmp	.+138    	; 0x301e <__vector_11+0x268>
    2f94:	99 30       	cpi	r25, 0x09	; 9
    2f96:	09 f0       	breq	.+2      	; 0x2f9a <__vector_11+0x1e4>
    2f98:	42 c0       	rjmp	.+132    	; 0x301e <__vector_11+0x268>
    2f9a:	83 70       	andi	r24, 0x03	; 3
    2f9c:	09 f0       	breq	.+2      	; 0x2fa0 <__vector_11+0x1ea>
    2f9e:	43 c0       	rjmp	.+134    	; 0x3026 <__vector_11+0x270>
    2fa0:	eb e0       	ldi	r30, 0x0B	; 11
    2fa2:	f1 e0       	ldi	r31, 0x01	; 1
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
    2fa6:	31 e0       	ldi	r19, 0x01	; 1
    2fa8:	96 e3       	ldi	r25, 0x36	; 54
    2faa:	20 81       	ld	r18, Z
    2fac:	21 11       	cpse	r18, r1
    2fae:	09 c0       	rjmp	.+18     	; 0x2fc2 <__vector_11+0x20c>
    2fb0:	8e e7       	ldi	r24, 0x7E	; 126
    2fb2:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    2fb6:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    2fba:	8f 89       	ldd	r24, Y+23	; 0x17
    2fbc:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <_usbConfiguration>
    2fc0:	2e c0       	rjmp	.+92     	; 0x301e <__vector_11+0x268>
    2fc2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2fc6:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2fca:	21 91       	ld	r18, Z+
    2fcc:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2fd0:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    2fd4:	8f 5f       	subi	r24, 0xFF	; 255
    2fd6:	87 30       	cpi	r24, 0x07	; 7
    2fd8:	41 f7       	brne	.-48     	; 0x2faa <__vector_11+0x1f4>
    2fda:	ea cf       	rjmp	.-44     	; 0x2fb0 <__vector_11+0x1fa>
    2fdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fde:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fe0:	0e 94 76 16 	call	0x2cec	; 0x2cec <_Z11InitControli>
    2fe4:	89 8d       	ldd	r24, Y+25	; 0x19
    2fe6:	81 11       	cpse	r24, r1
    2fe8:	05 c0       	rjmp	.+10     	; 0x2ff4 <__vector_11+0x23e>
    2fea:	ce 01       	movw	r24, r28
    2fec:	45 96       	adiw	r24, 0x15	; 21
    2fee:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <_Z9CDC_SetupR8USBSetup>
    2ff2:	07 c0       	rjmp	.+14     	; 0x3002 <__vector_11+0x24c>
    2ff4:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <_Z12PluggableUSBv>
    2ff8:	be 01       	movw	r22, r28
    2ffa:	6b 5e       	subi	r22, 0xEB	; 235
    2ffc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ffe:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <_ZN13PluggableUSB_5setupER8USBSetup>
    3002:	88 23       	and	r24, r24
    3004:	81 f0       	breq	.+32     	; 0x3026 <__vector_11+0x270>
    3006:	0b c0       	rjmp	.+22     	; 0x301e <__vector_11+0x268>
    3008:	6b ec       	ldi	r22, 0xCB	; 203
    300a:	70 e0       	ldi	r23, 0x00	; 0
    300c:	02 c0       	rjmp	.+4      	; 0x3012 <__vector_11+0x25c>
    300e:	6a ef       	ldi	r22, 0xFA	; 250
    3010:	70 e0       	ldi	r23, 0x00	; 0
    3012:	fb 01       	movw	r30, r22
    3014:	44 91       	lpm	r20, Z
    3016:	50 e0       	ldi	r21, 0x00	; 0
    3018:	80 e8       	ldi	r24, 0x80	; 128
    301a:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_Z15USB_SendControlhPKvi>
    301e:	8e ef       	ldi	r24, 0xFE	; 254
    3020:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    3024:	03 c0       	rjmp	.+6      	; 0x302c <__vector_11+0x276>
    3026:	81 e2       	ldi	r24, 0x21	; 33
    3028:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    302c:	6c 96       	adiw	r28, 0x1c	; 28
    302e:	0f b6       	in	r0, 0x3f	; 63
    3030:	f8 94       	cli
    3032:	de bf       	out	0x3e, r29	; 62
    3034:	0f be       	out	0x3f, r0	; 63
    3036:	cd bf       	out	0x3d, r28	; 61
    3038:	df 91       	pop	r29
    303a:	cf 91       	pop	r28
    303c:	ff 91       	pop	r31
    303e:	ef 91       	pop	r30
    3040:	bf 91       	pop	r27
    3042:	af 91       	pop	r26
    3044:	9f 91       	pop	r25
    3046:	8f 91       	pop	r24
    3048:	7f 91       	pop	r23
    304a:	6f 91       	pop	r22
    304c:	5f 91       	pop	r21
    304e:	4f 91       	pop	r20
    3050:	3f 91       	pop	r19
    3052:	2f 91       	pop	r18
    3054:	1f 91       	pop	r17
    3056:	0f 91       	pop	r16
    3058:	ff 90       	pop	r15
    305a:	ef 90       	pop	r14
    305c:	df 90       	pop	r13
    305e:	cf 90       	pop	r12
    3060:	0f 90       	pop	r0
    3062:	0f be       	out	0x3f, r0	; 63
    3064:	0f 90       	pop	r0
    3066:	1f 90       	pop	r1
    3068:	18 95       	reti

0000306a <_Z9USB_Flushh>:
    306a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    306e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    3072:	88 23       	and	r24, r24
    3074:	19 f0       	breq	.+6      	; 0x307c <_Z9USB_Flushh+0x12>
    3076:	8a e3       	ldi	r24, 0x3A	; 58
    3078:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    307c:	08 95       	ret

0000307e <__vector_10>:
    307e:	1f 92       	push	r1
    3080:	0f 92       	push	r0
    3082:	0f b6       	in	r0, 0x3f	; 63
    3084:	0f 92       	push	r0
    3086:	11 24       	eor	r1, r1
    3088:	2f 93       	push	r18
    308a:	3f 93       	push	r19
    308c:	4f 93       	push	r20
    308e:	5f 93       	push	r21
    3090:	6f 93       	push	r22
    3092:	7f 93       	push	r23
    3094:	8f 93       	push	r24
    3096:	9f 93       	push	r25
    3098:	af 93       	push	r26
    309a:	bf 93       	push	r27
    309c:	cf 93       	push	r28
    309e:	ef 93       	push	r30
    30a0:	ff 93       	push	r31
    30a2:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    30a6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    30aa:	83 7f       	andi	r24, 0xF3	; 243
    30ac:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    30b0:	c3 ff       	sbrs	r28, 3
    30b2:	0f c0       	rjmp	.+30     	; 0x30d2 <__vector_10+0x54>
    30b4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    30be:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    30c2:	82 e3       	ldi	r24, 0x32	; 50
    30c4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    30c8:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <_usbConfiguration>
    30cc:	88 e0       	ldi	r24, 0x08	; 8
    30ce:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    30d2:	c2 ff       	sbrs	r28, 2
    30d4:	19 c0       	rjmp	.+50     	; 0x3108 <__vector_10+0x8a>
    30d6:	83 e0       	ldi	r24, 0x03	; 3
    30d8:	0e 94 35 18 	call	0x306a	; 0x306a <_Z9USB_Flushh>
    30dc:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <TxLEDPulse>
    30e0:	88 23       	and	r24, r24
    30e2:	39 f0       	breq	.+14     	; 0x30f2 <__vector_10+0x74>
    30e4:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <TxLEDPulse>
    30e8:	81 50       	subi	r24, 0x01	; 1
    30ea:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <TxLEDPulse>
    30ee:	88 23       	and	r24, r24
    30f0:	89 f1       	breq	.+98     	; 0x3154 <__vector_10+0xd6>
    30f2:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <RxLEDPulse>
    30f6:	88 23       	and	r24, r24
    30f8:	39 f0       	breq	.+14     	; 0x3108 <__vector_10+0x8a>
    30fa:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <RxLEDPulse>
    30fe:	81 50       	subi	r24, 0x01	; 1
    3100:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <RxLEDPulse>
    3104:	88 23       	and	r24, r24
    3106:	41 f1       	breq	.+80     	; 0x3158 <__vector_10+0xda>
    3108:	c4 ff       	sbrs	r28, 4
    310a:	10 c0       	rjmp	.+32     	; 0x312c <__vector_10+0xae>
    310c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3110:	8e 7e       	andi	r24, 0xEE	; 238
    3112:	81 60       	ori	r24, 0x01	; 1
    3114:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3118:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    311c:	8f 7e       	andi	r24, 0xEF	; 239
    311e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    3122:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <_usbSuspendState>
    3126:	8e 7e       	andi	r24, 0xEE	; 238
    3128:	80 61       	ori	r24, 0x10	; 16
    312a:	11 c0       	rjmp	.+34     	; 0x314e <__vector_10+0xd0>
    312c:	c0 ff       	sbrs	r28, 0
    312e:	16 c0       	rjmp	.+44     	; 0x315c <__vector_10+0xde>
    3130:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    3134:	8e 7e       	andi	r24, 0xEE	; 238
    3136:	80 61       	ori	r24, 0x10	; 16
    3138:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    313c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    3140:	8e 7e       	andi	r24, 0xEE	; 238
    3142:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    3146:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <_usbSuspendState>
    314a:	8e 7e       	andi	r24, 0xEE	; 238
    314c:	81 60       	ori	r24, 0x01	; 1
    314e:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <_usbSuspendState>
    3152:	04 c0       	rjmp	.+8      	; 0x315c <__vector_10+0xde>
    3154:	5d 9a       	sbi	0x0b, 5	; 11
    3156:	cd cf       	rjmp	.-102    	; 0x30f2 <__vector_10+0x74>
    3158:	28 9a       	sbi	0x05, 0	; 5
    315a:	d6 cf       	rjmp	.-84     	; 0x3108 <__vector_10+0x8a>
    315c:	ff 91       	pop	r31
    315e:	ef 91       	pop	r30
    3160:	cf 91       	pop	r28
    3162:	bf 91       	pop	r27
    3164:	af 91       	pop	r26
    3166:	9f 91       	pop	r25
    3168:	8f 91       	pop	r24
    316a:	7f 91       	pop	r23
    316c:	6f 91       	pop	r22
    316e:	5f 91       	pop	r21
    3170:	4f 91       	pop	r20
    3172:	3f 91       	pop	r19
    3174:	2f 91       	pop	r18
    3176:	0f 90       	pop	r0
    3178:	0f be       	out	0x3f, r0	; 63
    317a:	0f 90       	pop	r0
    317c:	1f 90       	pop	r1
    317e:	18 95       	reti

00003180 <_ZN10USBDevice_6attachEv>:
{
}

void USBDevice_::attach()
{
	_usbConfiguration = 0;
    3180:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <_usbConfiguration>
	_usbCurrentStatus = 0;
    3184:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <_usbCurrentStatus>
	_usbSuspendState = 0;
    3188:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <_usbSuspendState>
	USB_ClockEnable();
    318c:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <_ZL15USB_ClockEnablev>

	UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear already pending WAKEUP / SUSPEND requests
    3190:	e1 ee       	ldi	r30, 0xE1	; 225
    3192:	f0 e0       	ldi	r31, 0x00	; 0
    3194:	80 81       	ld	r24, Z
    3196:	8e 7e       	andi	r24, 0xEE	; 238
    3198:	80 83       	st	Z, r24
	UDIEN = (1<<EORSTE) | (1<<SOFE) | (1<<SUSPE);	// Enable interrupts for EOR (End of Reset), SOF (start of frame) and SUSPEND
    319a:	8d e0       	ldi	r24, 0x0D	; 13
    319c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	
	TX_RX_LED_INIT;
    31a0:	55 9a       	sbi	0x0a, 5	; 10
    31a2:	20 9a       	sbi	0x04, 0	; 4
    31a4:	08 95       	ret

000031a6 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    31a6:	1f 92       	push	r1
    31a8:	0f 92       	push	r0
    31aa:	0f b6       	in	r0, 0x3f	; 63
    31ac:	0f 92       	push	r0
    31ae:	11 24       	eor	r1, r1
    31b0:	2f 93       	push	r18
    31b2:	3f 93       	push	r19
    31b4:	8f 93       	push	r24
    31b6:	9f 93       	push	r25
    31b8:	af 93       	push	r26
    31ba:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    31bc:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <timer0_millis>
    31c0:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <timer0_millis+0x1>
    31c4:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <timer0_millis+0x2>
    31c8:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    31cc:	30 91 87 04 	lds	r19, 0x0487	; 0x800487 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    31d0:	23 e0       	ldi	r18, 0x03	; 3
    31d2:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    31d4:	2d 37       	cpi	r18, 0x7D	; 125
    31d6:	20 f4       	brcc	.+8      	; 0x31e0 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    31d8:	01 96       	adiw	r24, 0x01	; 1
    31da:	a1 1d       	adc	r26, r1
    31dc:	b1 1d       	adc	r27, r1
    31de:	05 c0       	rjmp	.+10     	; 0x31ea <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    31e0:	26 e8       	ldi	r18, 0x86	; 134
    31e2:	23 0f       	add	r18, r19
		m += 1;
    31e4:	02 96       	adiw	r24, 0x02	; 2
    31e6:	a1 1d       	adc	r26, r1
    31e8:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    31ea:	20 93 87 04 	sts	0x0487, r18	; 0x800487 <timer0_fract>
	timer0_millis = m;
    31ee:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <timer0_millis>
    31f2:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <timer0_millis+0x1>
    31f6:	a0 93 8a 04 	sts	0x048A, r26	; 0x80048a <timer0_millis+0x2>
    31fa:	b0 93 8b 04 	sts	0x048B, r27	; 0x80048b <timer0_millis+0x3>
	timer0_overflow_count++;
    31fe:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <timer0_overflow_count>
    3202:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <timer0_overflow_count+0x1>
    3206:	a0 91 8e 04 	lds	r26, 0x048E	; 0x80048e <timer0_overflow_count+0x2>
    320a:	b0 91 8f 04 	lds	r27, 0x048F	; 0x80048f <timer0_overflow_count+0x3>
    320e:	01 96       	adiw	r24, 0x01	; 1
    3210:	a1 1d       	adc	r26, r1
    3212:	b1 1d       	adc	r27, r1
    3214:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <timer0_overflow_count>
    3218:	90 93 8d 04 	sts	0x048D, r25	; 0x80048d <timer0_overflow_count+0x1>
    321c:	a0 93 8e 04 	sts	0x048E, r26	; 0x80048e <timer0_overflow_count+0x2>
    3220:	b0 93 8f 04 	sts	0x048F, r27	; 0x80048f <timer0_overflow_count+0x3>
}
    3224:	bf 91       	pop	r27
    3226:	af 91       	pop	r26
    3228:	9f 91       	pop	r25
    322a:	8f 91       	pop	r24
    322c:	3f 91       	pop	r19
    322e:	2f 91       	pop	r18
    3230:	0f 90       	pop	r0
    3232:	0f be       	out	0x3f, r0	; 63
    3234:	0f 90       	pop	r0
    3236:	1f 90       	pop	r1
    3238:	18 95       	reti

0000323a <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    323a:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    323c:	f8 94       	cli
	m = timer0_millis;
    323e:	60 91 88 04 	lds	r22, 0x0488	; 0x800488 <timer0_millis>
    3242:	70 91 89 04 	lds	r23, 0x0489	; 0x800489 <timer0_millis+0x1>
    3246:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <timer0_millis+0x2>
    324a:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <timer0_millis+0x3>
	SREG = oldSREG;
    324e:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    3250:	08 95       	ret

00003252 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    3252:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    3254:	f8 94       	cli
	m = timer0_overflow_count;
    3256:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <timer0_overflow_count>
    325a:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <timer0_overflow_count+0x1>
    325e:	a0 91 8e 04 	lds	r26, 0x048E	; 0x80048e <timer0_overflow_count+0x2>
    3262:	b0 91 8f 04 	lds	r27, 0x048F	; 0x80048f <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    3266:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    3268:	a8 9b       	sbis	0x15, 0	; 21
    326a:	05 c0       	rjmp	.+10     	; 0x3276 <micros+0x24>
    326c:	2f 3f       	cpi	r18, 0xFF	; 255
    326e:	19 f0       	breq	.+6      	; 0x3276 <micros+0x24>
		m++;
    3270:	01 96       	adiw	r24, 0x01	; 1
    3272:	a1 1d       	adc	r26, r1
    3274:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    3276:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    3278:	ba 2f       	mov	r27, r26
    327a:	a9 2f       	mov	r26, r25
    327c:	98 2f       	mov	r25, r24
    327e:	88 27       	eor	r24, r24
    3280:	82 0f       	add	r24, r18
    3282:	91 1d       	adc	r25, r1
    3284:	a1 1d       	adc	r26, r1
    3286:	b1 1d       	adc	r27, r1
    3288:	bc 01       	movw	r22, r24
    328a:	cd 01       	movw	r24, r26
    328c:	42 e0       	ldi	r20, 0x02	; 2
    328e:	66 0f       	add	r22, r22
    3290:	77 1f       	adc	r23, r23
    3292:	88 1f       	adc	r24, r24
    3294:	99 1f       	adc	r25, r25
    3296:	4a 95       	dec	r20
    3298:	d1 f7       	brne	.-12     	; 0x328e <micros+0x3c>
}
    329a:	08 95       	ret

0000329c <delay>:

void delay(unsigned long ms)
{
    329c:	8f 92       	push	r8
    329e:	9f 92       	push	r9
    32a0:	af 92       	push	r10
    32a2:	bf 92       	push	r11
    32a4:	cf 92       	push	r12
    32a6:	df 92       	push	r13
    32a8:	ef 92       	push	r14
    32aa:	ff 92       	push	r15
    32ac:	6b 01       	movw	r12, r22
    32ae:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    32b0:	0e 94 29 19 	call	0x3252	; 0x3252 <micros>
    32b4:	4b 01       	movw	r8, r22
    32b6:	5c 01       	movw	r10, r24

	while (ms > 0) {
    32b8:	c1 14       	cp	r12, r1
    32ba:	d1 04       	cpc	r13, r1
    32bc:	e1 04       	cpc	r14, r1
    32be:	f1 04       	cpc	r15, r1
    32c0:	01 f1       	breq	.+64     	; 0x3302 <delay+0x66>
		yield();
    32c2:	0e 94 8a 1c 	call	0x3914	; 0x3914 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    32c6:	0e 94 29 19 	call	0x3252	; 0x3252 <micros>
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	88 19       	sub	r24, r8
    32d0:	99 09       	sbc	r25, r9
    32d2:	aa 09       	sbc	r26, r10
    32d4:	bb 09       	sbc	r27, r11
    32d6:	88 3e       	cpi	r24, 0xE8	; 232
    32d8:	93 40       	sbci	r25, 0x03	; 3
    32da:	a1 05       	cpc	r26, r1
    32dc:	b1 05       	cpc	r27, r1
    32de:	60 f3       	brcs	.-40     	; 0x32b8 <delay+0x1c>
			ms--;
    32e0:	21 e0       	ldi	r18, 0x01	; 1
    32e2:	c2 1a       	sub	r12, r18
    32e4:	d1 08       	sbc	r13, r1
    32e6:	e1 08       	sbc	r14, r1
    32e8:	f1 08       	sbc	r15, r1
			start += 1000;
    32ea:	88 ee       	ldi	r24, 0xE8	; 232
    32ec:	88 0e       	add	r8, r24
    32ee:	83 e0       	ldi	r24, 0x03	; 3
    32f0:	98 1e       	adc	r9, r24
    32f2:	a1 1c       	adc	r10, r1
    32f4:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    32f6:	c1 14       	cp	r12, r1
    32f8:	d1 04       	cpc	r13, r1
    32fa:	e1 04       	cpc	r14, r1
    32fc:	f1 04       	cpc	r15, r1
    32fe:	19 f7       	brne	.-58     	; 0x32c6 <delay+0x2a>
    3300:	db cf       	rjmp	.-74     	; 0x32b8 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    3302:	ff 90       	pop	r15
    3304:	ef 90       	pop	r14
    3306:	df 90       	pop	r13
    3308:	cf 90       	pop	r12
    330a:	bf 90       	pop	r11
    330c:	af 90       	pop	r10
    330e:	9f 90       	pop	r9
    3310:	8f 90       	pop	r8
    3312:	08 95       	ret

00003314 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    3314:	82 30       	cpi	r24, 0x02	; 2
    3316:	91 05       	cpc	r25, r1
    3318:	38 f0       	brcs	.+14     	; 0x3328 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    331a:	88 0f       	add	r24, r24
    331c:	99 1f       	adc	r25, r25
    331e:	88 0f       	add	r24, r24
    3320:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    3322:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    3324:	01 97       	sbiw	r24, 0x01	; 1
    3326:	f1 f7       	brne	.-4      	; 0x3324 <delayMicroseconds+0x10>
    3328:	08 95       	ret

0000332a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    332a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    332c:	84 b5       	in	r24, 0x24	; 36
    332e:	82 60       	ori	r24, 0x02	; 2
    3330:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3332:	84 b5       	in	r24, 0x24	; 36
    3334:	81 60       	ori	r24, 0x01	; 1
    3336:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3338:	85 b5       	in	r24, 0x25	; 37
    333a:	82 60       	ori	r24, 0x02	; 2
    333c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    333e:	85 b5       	in	r24, 0x25	; 37
    3340:	81 60       	ori	r24, 0x01	; 1
    3342:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3344:	ee e6       	ldi	r30, 0x6E	; 110
    3346:	f0 e0       	ldi	r31, 0x00	; 0
    3348:	80 81       	ld	r24, Z
    334a:	81 60       	ori	r24, 0x01	; 1
    334c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    334e:	e1 e8       	ldi	r30, 0x81	; 129
    3350:	f0 e0       	ldi	r31, 0x00	; 0
    3352:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3354:	80 81       	ld	r24, Z
    3356:	82 60       	ori	r24, 0x02	; 2
    3358:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    335a:	80 81       	ld	r24, Z
    335c:	81 60       	ori	r24, 0x01	; 1
    335e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3360:	e0 e8       	ldi	r30, 0x80	; 128
    3362:	f0 e0       	ldi	r31, 0x00	; 0
    3364:	80 81       	ld	r24, Z
    3366:	81 60       	ori	r24, 0x01	; 1
    3368:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    336a:	e1 e9       	ldi	r30, 0x91	; 145
    336c:	f0 e0       	ldi	r31, 0x00	; 0
    336e:	80 81       	ld	r24, Z
    3370:	82 60       	ori	r24, 0x02	; 2
    3372:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    3374:	80 81       	ld	r24, Z
    3376:	81 60       	ori	r24, 0x01	; 1
    3378:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    337a:	e0 e9       	ldi	r30, 0x90	; 144
    337c:	f0 e0       	ldi	r31, 0x00	; 0
    337e:	80 81       	ld	r24, Z
    3380:	81 60       	ori	r24, 0x01	; 1
    3382:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
    3384:	e1 ec       	ldi	r30, 0xC1	; 193
    3386:	f0 e0       	ldi	r31, 0x00	; 0
    3388:	80 81       	ld	r24, Z
    338a:	84 60       	ori	r24, 0x04	; 4
    338c:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
    338e:	80 81       	ld	r24, Z
    3390:	82 60       	ori	r24, 0x02	; 2
    3392:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    3394:	80 81       	ld	r24, Z
    3396:	81 60       	ori	r24, 0x01	; 1
    3398:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
    339a:	e3 ec       	ldi	r30, 0xC3	; 195
    339c:	f0 e0       	ldi	r31, 0x00	; 0
    339e:	80 81       	ld	r24, Z
    33a0:	81 60       	ori	r24, 0x01	; 1
    33a2:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
    33a4:	e0 ec       	ldi	r30, 0xC0	; 192
    33a6:	f0 e0       	ldi	r31, 0x00	; 0
    33a8:	80 81       	ld	r24, Z
    33aa:	82 60       	ori	r24, 0x02	; 2
    33ac:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
    33ae:	e2 ec       	ldi	r30, 0xC2	; 194
    33b0:	f0 e0       	ldi	r31, 0x00	; 0
    33b2:	80 81       	ld	r24, Z
    33b4:	81 60       	ori	r24, 0x01	; 1
    33b6:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    33b8:	ea e7       	ldi	r30, 0x7A	; 122
    33ba:	f0 e0       	ldi	r31, 0x00	; 0
    33bc:	80 81       	ld	r24, Z
    33be:	84 60       	ori	r24, 0x04	; 4
    33c0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    33c2:	80 81       	ld	r24, Z
    33c4:	82 60       	ori	r24, 0x02	; 2
    33c6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    33c8:	80 81       	ld	r24, Z
    33ca:	81 60       	ori	r24, 0x01	; 1
    33cc:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    33ce:	80 81       	ld	r24, Z
    33d0:	80 68       	ori	r24, 0x80	; 128
    33d2:	80 83       	st	Z, r24
    33d4:	08 95       	ret

000033d6 <analogRead>:
{
	uint8_t low, high;

#if defined(analogPinToChannel)
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
    33d6:	82 31       	cpi	r24, 0x12	; 18
    33d8:	08 f0       	brcs	.+2      	; 0x33dc <analogRead+0x6>
    33da:	82 51       	subi	r24, 0x12	; 18
#endif
	pin = analogPinToChannel(pin);
    33dc:	e8 2f       	mov	r30, r24
    33de:	f0 e0       	ldi	r31, 0x00	; 0
    33e0:	e2 50       	subi	r30, 0x02	; 2
    33e2:	ff 4f       	sbci	r31, 0xFF	; 255
    33e4:	e4 91       	lpm	r30, Z
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    33e6:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    33ea:	e3 fb       	bst	r30, 3
    33ec:	22 27       	eor	r18, r18
    33ee:	20 f9       	bld	r18, 0
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	95 e0       	ldi	r25, 0x05	; 5
    33f4:	22 0f       	add	r18, r18
    33f6:	33 1f       	adc	r19, r19
    33f8:	9a 95       	dec	r25
    33fa:	e1 f7       	brne	.-8      	; 0x33f4 <analogRead+0x1e>
    33fc:	8f 7d       	andi	r24, 0xDF	; 223
    33fe:	28 2b       	or	r18, r24
    3400:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    3404:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <analog_reference>
    3408:	20 e4       	ldi	r18, 0x40	; 64
    340a:	82 9f       	mul	r24, r18
    340c:	c0 01       	movw	r24, r0
    340e:	11 24       	eor	r1, r1
    3410:	e7 70       	andi	r30, 0x07	; 7
    3412:	e8 2b       	or	r30, r24
    3414:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    3418:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    341c:	80 64       	ori	r24, 0x40	; 64
    341e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    3422:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3426:	86 fd       	sbrc	r24, 6
    3428:	fc cf       	rjmp	.-8      	; 0x3422 <analogRead+0x4c>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    342a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    342e:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    3432:	90 e0       	ldi	r25, 0x00	; 0
}
    3434:	92 2b       	or	r25, r18
    3436:	08 95       	ret

00003438 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	fc 01       	movw	r30, r24
    343c:	31 97       	sbiw	r30, 0x01	; 1
    343e:	ef 30       	cpi	r30, 0x0F	; 15
    3440:	f1 05       	cpc	r31, r1
    3442:	b0 f5       	brcc	.+108    	; 0x34b0 <turnOffPWM+0x78>
    3444:	ea 5a       	subi	r30, 0xAA	; 170
    3446:	ff 4f       	sbci	r31, 0xFF	; 255
    3448:	0c 94 05 1e 	jmp	0x3c0a	; 0x3c0a <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    344c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3450:	8f 77       	andi	r24, 0x7F	; 127
    3452:	03 c0       	rjmp	.+6      	; 0x345a <turnOffPWM+0x22>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3454:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3458:	8f 7d       	andi	r24, 0xDF	; 223
    345a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    345e:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    3460:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3464:	87 7f       	andi	r24, 0xF7	; 247
    3466:	f9 cf       	rjmp	.-14     	; 0x345a <turnOffPWM+0x22>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3468:	84 b5       	in	r24, 0x24	; 36
    346a:	8f 77       	andi	r24, 0x7F	; 127
    346c:	02 c0       	rjmp	.+4      	; 0x3472 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    346e:	84 b5       	in	r24, 0x24	; 36
    3470:	8f 7d       	andi	r24, 0xDF	; 223
    3472:	84 bd       	out	0x24, r24	; 36
    3474:	08 95       	ret
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    3476:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    347a:	8f 77       	andi	r24, 0x7F	; 127
    347c:	07 c0       	rjmp	.+14     	; 0x348c <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    347e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    3482:	8f 7d       	andi	r24, 0xDF	; 223
    3484:	03 c0       	rjmp	.+6      	; 0x348c <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    3486:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    348a:	87 7f       	andi	r24, 0xF7	; 247
    348c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    3490:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    3492:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3496:	8f 77       	andi	r24, 0x7F	; 127
    3498:	03 c0       	rjmp	.+6      	; 0x34a0 <turnOffPWM+0x68>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    349a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    349e:	8f 7d       	andi	r24, 0xDF	; 223
    34a0:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    34a4:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
		#endif			
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
    34a6:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    34aa:	87 7f       	andi	r24, 0xF7	; 247
    34ac:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    34b0:	08 95       	ret

000034b2 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    34b2:	cf 93       	push	r28
    34b4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	fc 01       	movw	r30, r24
    34ba:	e7 5d       	subi	r30, 0xD7	; 215
    34bc:	fe 4f       	sbci	r31, 0xFE	; 254
    34be:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    34c0:	fc 01       	movw	r30, r24
    34c2:	e8 5b       	subi	r30, 0xB8	; 184
    34c4:	fe 4f       	sbci	r31, 0xFE	; 254
    34c6:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    34c8:	88 23       	and	r24, r24
    34ca:	61 f1       	breq	.+88     	; 0x3524 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	88 0f       	add	r24, r24
    34d0:	99 1f       	adc	r25, r25
    34d2:	fc 01       	movw	r30, r24
    34d4:	ed 57       	subi	r30, 0x7D	; 125
    34d6:	fe 4f       	sbci	r31, 0xFE	; 254
    34d8:	c5 91       	lpm	r28, Z+
    34da:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    34dc:	fc 01       	movw	r30, r24
    34de:	eb 58       	subi	r30, 0x8B	; 139
    34e0:	fe 4f       	sbci	r31, 0xFE	; 254
    34e2:	a5 91       	lpm	r26, Z+
    34e4:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    34e6:	61 11       	cpse	r22, r1
    34e8:	09 c0       	rjmp	.+18     	; 0x34fc <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    34ea:	9f b7       	in	r25, 0x3f	; 63
                cli();
    34ec:	f8 94       	cli
		*reg &= ~bit;
    34ee:	88 81       	ld	r24, Y
    34f0:	20 95       	com	r18
    34f2:	82 23       	and	r24, r18
    34f4:	88 83       	st	Y, r24
		*out &= ~bit;
    34f6:	ec 91       	ld	r30, X
    34f8:	2e 23       	and	r18, r30
    34fa:	0b c0       	rjmp	.+22     	; 0x3512 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    34fc:	62 30       	cpi	r22, 0x02	; 2
    34fe:	61 f4       	brne	.+24     	; 0x3518 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3500:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3502:	f8 94       	cli
		*reg &= ~bit;
    3504:	88 81       	ld	r24, Y
    3506:	32 2f       	mov	r19, r18
    3508:	30 95       	com	r19
    350a:	83 23       	and	r24, r19
    350c:	88 83       	st	Y, r24
		*out |= bit;
    350e:	ec 91       	ld	r30, X
    3510:	2e 2b       	or	r18, r30
    3512:	2c 93       	st	X, r18
		SREG = oldSREG;
    3514:	9f bf       	out	0x3f, r25	; 63
    3516:	06 c0       	rjmp	.+12     	; 0x3524 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    3518:	8f b7       	in	r24, 0x3f	; 63
                cli();
    351a:	f8 94       	cli
		*reg |= bit;
    351c:	e8 81       	ld	r30, Y
    351e:	2e 2b       	or	r18, r30
    3520:	28 83       	st	Y, r18
		SREG = oldSREG;
    3522:	8f bf       	out	0x3f, r24	; 63
	}
}
    3524:	df 91       	pop	r29
    3526:	cf 91       	pop	r28
    3528:	08 95       	ret

0000352a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    352a:	1f 93       	push	r17
    352c:	cf 93       	push	r28
    352e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3530:	28 2f       	mov	r18, r24
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	f9 01       	movw	r30, r18
    3536:	e6 5f       	subi	r30, 0xF6	; 246
    3538:	fe 4f       	sbci	r31, 0xFE	; 254
    353a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    353c:	f9 01       	movw	r30, r18
    353e:	e7 5d       	subi	r30, 0xD7	; 215
    3540:	fe 4f       	sbci	r31, 0xFE	; 254
    3542:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3544:	f9 01       	movw	r30, r18
    3546:	e8 5b       	subi	r30, 0xB8	; 184
    3548:	fe 4f       	sbci	r31, 0xFE	; 254
    354a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    354c:	cc 23       	and	r28, r28
    354e:	c1 f0       	breq	.+48     	; 0x3580 <digitalWrite+0x56>
    3550:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3552:	81 11       	cpse	r24, r1
    3554:	0e 94 1c 1a 	call	0x3438	; 0x3438 <turnOffPWM>

	out = portOutputRegister(port);
    3558:	ec 2f       	mov	r30, r28
    355a:	f0 e0       	ldi	r31, 0x00	; 0
    355c:	ee 0f       	add	r30, r30
    355e:	ff 1f       	adc	r31, r31
    3560:	eb 58       	subi	r30, 0x8B	; 139
    3562:	fe 4f       	sbci	r31, 0xFE	; 254
    3564:	a5 91       	lpm	r26, Z+
    3566:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3568:	9f b7       	in	r25, 0x3f	; 63
	cli();
    356a:	f8 94       	cli

	if (val == LOW) {
    356c:	11 11       	cpse	r17, r1
    356e:	04 c0       	rjmp	.+8      	; 0x3578 <digitalWrite+0x4e>
		*out &= ~bit;
    3570:	8c 91       	ld	r24, X
    3572:	d0 95       	com	r29
    3574:	d8 23       	and	r29, r24
    3576:	02 c0       	rjmp	.+4      	; 0x357c <digitalWrite+0x52>
	} else {
		*out |= bit;
    3578:	ec 91       	ld	r30, X
    357a:	de 2b       	or	r29, r30
    357c:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    357e:	9f bf       	out	0x3f, r25	; 63
}
    3580:	df 91       	pop	r29
    3582:	cf 91       	pop	r28
    3584:	1f 91       	pop	r17
    3586:	08 95       	ret

00003588 <digitalRead>:

int digitalRead(uint8_t pin)
{
    3588:	cf 93       	push	r28
    358a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    358c:	28 2f       	mov	r18, r24
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	f9 01       	movw	r30, r18
    3592:	e6 5f       	subi	r30, 0xF6	; 246
    3594:	fe 4f       	sbci	r31, 0xFE	; 254
    3596:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3598:	f9 01       	movw	r30, r18
    359a:	e7 5d       	subi	r30, 0xD7	; 215
    359c:	fe 4f       	sbci	r31, 0xFE	; 254
    359e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    35a0:	f9 01       	movw	r30, r18
    35a2:	e8 5b       	subi	r30, 0xB8	; 184
    35a4:	fe 4f       	sbci	r31, 0xFE	; 254
    35a6:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    35a8:	cc 23       	and	r28, r28
    35aa:	91 f0       	breq	.+36     	; 0x35d0 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    35ac:	81 11       	cpse	r24, r1
    35ae:	0e 94 1c 1a 	call	0x3438	; 0x3438 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    35b2:	ec 2f       	mov	r30, r28
    35b4:	f0 e0       	ldi	r31, 0x00	; 0
    35b6:	ee 0f       	add	r30, r30
    35b8:	ff 1f       	adc	r31, r31
    35ba:	e9 59       	subi	r30, 0x99	; 153
    35bc:	fe 4f       	sbci	r31, 0xFE	; 254
    35be:	a5 91       	lpm	r26, Z+
    35c0:	b4 91       	lpm	r27, Z
    35c2:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    35c4:	ed 23       	and	r30, r29
    35c6:	81 e0       	ldi	r24, 0x01	; 1
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	21 f4       	brne	.+8      	; 0x35d4 <digitalRead+0x4c>
    35cc:	80 e0       	ldi	r24, 0x00	; 0
    35ce:	02 c0       	rjmp	.+4      	; 0x35d4 <digitalRead+0x4c>
    35d0:	80 e0       	ldi	r24, 0x00	; 0
    35d2:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    35d4:	df 91       	pop	r29
    35d6:	cf 91       	pop	r28
    35d8:	08 95       	ret

000035da <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    35da:	fc 01       	movw	r30, r24
    35dc:	80 81       	ld	r24, Z
    35de:	91 81       	ldd	r25, Z+1	; 0x01
    35e0:	0c 94 b7 1e 	jmp	0x3d6e	; 0x3d6e <free>

000035e4 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    35e4:	cf 93       	push	r28
    35e6:	df 93       	push	r29
    35e8:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    35ea:	88 81       	ld	r24, Y
    35ec:	99 81       	ldd	r25, Y+1	; 0x01
    35ee:	00 97       	sbiw	r24, 0x00	; 0
    35f0:	11 f0       	breq	.+4      	; 0x35f6 <_ZN6String10invalidateEv+0x12>
    35f2:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <free>
	buffer = NULL;
    35f6:	19 82       	std	Y+1, r1	; 0x01
    35f8:	18 82       	st	Y, r1
	capacity = len = 0;
    35fa:	1d 82       	std	Y+5, r1	; 0x05
    35fc:	1c 82       	std	Y+4, r1	; 0x04
    35fe:	1b 82       	std	Y+3, r1	; 0x03
    3600:	1a 82       	std	Y+2, r1	; 0x02
}
    3602:	df 91       	pop	r29
    3604:	cf 91       	pop	r28
    3606:	08 95       	ret

00003608 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    3608:	0f 93       	push	r16
    360a:	1f 93       	push	r17
    360c:	cf 93       	push	r28
    360e:	df 93       	push	r29
    3610:	ec 01       	movw	r28, r24
    3612:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    3614:	6f 5f       	subi	r22, 0xFF	; 255
    3616:	7f 4f       	sbci	r23, 0xFF	; 255
    3618:	88 81       	ld	r24, Y
    361a:	99 81       	ldd	r25, Y+1	; 0x01
    361c:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <realloc>
	if (newbuffer) {
    3620:	00 97       	sbiw	r24, 0x00	; 0
    3622:	31 f0       	breq	.+12     	; 0x3630 <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    3624:	99 83       	std	Y+1, r25	; 0x01
    3626:	88 83       	st	Y, r24
		capacity = maxStrLen;
    3628:	1b 83       	std	Y+3, r17	; 0x03
    362a:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	01 c0       	rjmp	.+2      	; 0x3632 <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    3630:	80 e0       	ldi	r24, 0x00	; 0
}
    3632:	df 91       	pop	r29
    3634:	cf 91       	pop	r28
    3636:	1f 91       	pop	r17
    3638:	0f 91       	pop	r16
    363a:	08 95       	ret

0000363c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    363c:	cf 93       	push	r28
    363e:	df 93       	push	r29
    3640:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    3642:	88 81       	ld	r24, Y
    3644:	99 81       	ldd	r25, Y+1	; 0x01
    3646:	89 2b       	or	r24, r25
    3648:	29 f0       	breq	.+10     	; 0x3654 <_ZN6String7reserveEj+0x18>
    364a:	8a 81       	ldd	r24, Y+2	; 0x02
    364c:	9b 81       	ldd	r25, Y+3	; 0x03
    364e:	86 17       	cp	r24, r22
    3650:	97 07       	cpc	r25, r23
    3652:	60 f4       	brcc	.+24     	; 0x366c <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
    3654:	ce 01       	movw	r24, r28
    3656:	0e 94 04 1b 	call	0x3608	; 0x3608 <_ZN6String12changeBufferEj>
    365a:	88 23       	and	r24, r24
    365c:	41 f0       	breq	.+16     	; 0x366e <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    365e:	8c 81       	ldd	r24, Y+4	; 0x04
    3660:	9d 81       	ldd	r25, Y+5	; 0x05
    3662:	89 2b       	or	r24, r25
    3664:	19 f4       	brne	.+6      	; 0x366c <_ZN6String7reserveEj+0x30>
    3666:	e8 81       	ld	r30, Y
    3668:	f9 81       	ldd	r31, Y+1	; 0x01
    366a:	10 82       	st	Z, r1
    366c:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
    366e:	df 91       	pop	r29
    3670:	cf 91       	pop	r28
    3672:	08 95       	ret

00003674 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    3674:	ef 92       	push	r14
    3676:	ff 92       	push	r15
    3678:	0f 93       	push	r16
    367a:	1f 93       	push	r17
    367c:	cf 93       	push	r28
    367e:	df 93       	push	r29
    3680:	ec 01       	movw	r28, r24
    3682:	7b 01       	movw	r14, r22
    3684:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    3686:	ba 01       	movw	r22, r20
    3688:	0e 94 1e 1b 	call	0x363c	; 0x363c <_ZN6String7reserveEj>
    368c:	81 11       	cpse	r24, r1
    368e:	04 c0       	rjmp	.+8      	; 0x3698 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    3690:	ce 01       	movw	r24, r28
    3692:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <_ZN6String10invalidateEv>
		return *this;
    3696:	07 c0       	rjmp	.+14     	; 0x36a6 <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    3698:	1d 83       	std	Y+5, r17	; 0x05
    369a:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    369c:	b7 01       	movw	r22, r14
    369e:	88 81       	ld	r24, Y
    36a0:	99 81       	ldd	r25, Y+1	; 0x01
    36a2:	0e 94 1b 20 	call	0x4036	; 0x4036 <strcpy>
	return *this;
}
    36a6:	ce 01       	movw	r24, r28
    36a8:	df 91       	pop	r29
    36aa:	cf 91       	pop	r28
    36ac:	1f 91       	pop	r17
    36ae:	0f 91       	pop	r16
    36b0:	ff 90       	pop	r15
    36b2:	ef 90       	pop	r14
    36b4:	08 95       	ret

000036b6 <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    36b6:	fc 01       	movw	r30, r24
    36b8:	11 82       	std	Z+1, r1	; 0x01
    36ba:	10 82       	st	Z, r1
	capacity = 0;
    36bc:	13 82       	std	Z+3, r1	; 0x03
    36be:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    36c0:	15 82       	std	Z+5, r1	; 0x05
    36c2:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    36c4:	61 15       	cp	r22, r1
    36c6:	71 05       	cpc	r23, r1
    36c8:	51 f0       	breq	.+20     	; 0x36de <_ZN6StringC1EPKc+0x28>
    36ca:	fb 01       	movw	r30, r22
    36cc:	01 90       	ld	r0, Z+
    36ce:	00 20       	and	r0, r0
    36d0:	e9 f7       	brne	.-6      	; 0x36cc <_ZN6StringC1EPKc+0x16>
    36d2:	31 97       	sbiw	r30, 0x01	; 1
    36d4:	af 01       	movw	r20, r30
    36d6:	46 1b       	sub	r20, r22
    36d8:	57 0b       	sbc	r21, r23
    36da:	0c 94 3a 1b 	jmp	0x3674	; 0x3674 <_ZN6String4copyEPKcj>
    36de:	08 95       	ret

000036e0 <_ZN7Serial_5writeEh>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		ret = breakValue;
		breakValue = -1;
	}
	return ret;
}
    36e0:	cf 93       	push	r28
    36e2:	df 93       	push	r29
    36e4:	1f 92       	push	r1
    36e6:	cd b7       	in	r28, 0x3d	; 61
    36e8:	de b7       	in	r29, 0x3e	; 62
    36ea:	69 83       	std	Y+1, r22	; 0x01
    36ec:	dc 01       	movw	r26, r24
    36ee:	ed 91       	ld	r30, X+
    36f0:	fc 91       	ld	r31, X
    36f2:	02 80       	ldd	r0, Z+2	; 0x02
    36f4:	f3 81       	ldd	r31, Z+3	; 0x03
    36f6:	e0 2d       	mov	r30, r0
    36f8:	41 e0       	ldi	r20, 0x01	; 1
    36fa:	50 e0       	ldi	r21, 0x00	; 0
    36fc:	be 01       	movw	r22, r28
    36fe:	6f 5f       	subi	r22, 0xFF	; 255
    3700:	7f 4f       	sbci	r23, 0xFF	; 255
    3702:	09 95       	icall
    3704:	0f 90       	pop	r0
    3706:	df 91       	pop	r29
    3708:	cf 91       	pop	r28
    370a:	08 95       	ret

0000370c <_ZN7Serial_4peekEv>:
    370c:	cf 93       	push	r28
    370e:	df 93       	push	r29
    3710:	ec 01       	movw	r28, r24
    3712:	8c 85       	ldd	r24, Y+12	; 0x0c
    3714:	9d 85       	ldd	r25, Y+13	; 0x0d
    3716:	97 ff       	sbrs	r25, 7
    3718:	05 c0       	rjmp	.+10     	; 0x3724 <_ZN7Serial_4peekEv+0x18>
    371a:	82 e0       	ldi	r24, 0x02	; 2
    371c:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <_Z8USB_Recvh>
    3720:	9d 87       	std	Y+13, r25	; 0x0d
    3722:	8c 87       	std	Y+12, r24	; 0x0c
    3724:	8c 85       	ldd	r24, Y+12	; 0x0c
    3726:	9d 85       	ldd	r25, Y+13	; 0x0d
    3728:	df 91       	pop	r29
    372a:	cf 91       	pop	r28
    372c:	08 95       	ret

0000372e <_ZN7Serial_17availableForWriteEv>:
    372e:	83 e0       	ldi	r24, 0x03	; 3
    3730:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <_Z13USB_SendSpaceh>
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	08 95       	ret

00003738 <_ZN7Serial_5flushEv>:
    3738:	83 e0       	ldi	r24, 0x03	; 3
    373a:	0c 94 35 18 	jmp	0x306a	; 0x306a <_Z9USB_Flushh>

0000373e <_ZN7Serial_9availableEv>:
    373e:	fc 01       	movw	r30, r24
    3740:	84 85       	ldd	r24, Z+12	; 0x0c
    3742:	95 85       	ldd	r25, Z+13	; 0x0d
    3744:	97 fd       	sbrc	r25, 7
    3746:	06 c0       	rjmp	.+12     	; 0x3754 <_ZN7Serial_9availableEv+0x16>
    3748:	82 e0       	ldi	r24, 0x02	; 2
    374a:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <_Z13USB_Availableh>
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	01 96       	adiw	r24, 0x01	; 1
    3752:	08 95       	ret
    3754:	82 e0       	ldi	r24, 0x02	; 2
    3756:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <_Z13USB_Availableh>
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	08 95       	ret

0000375e <_ZN7Serial_4readEv>:
    375e:	fc 01       	movw	r30, r24
    3760:	84 85       	ldd	r24, Z+12	; 0x0c
    3762:	95 85       	ldd	r25, Z+13	; 0x0d
    3764:	97 fd       	sbrc	r25, 7
    3766:	05 c0       	rjmp	.+10     	; 0x3772 <_ZN7Serial_4readEv+0x14>
    3768:	2f ef       	ldi	r18, 0xFF	; 255
    376a:	3f ef       	ldi	r19, 0xFF	; 255
    376c:	35 87       	std	Z+13, r19	; 0x0d
    376e:	24 87       	std	Z+12, r18	; 0x0c
    3770:	08 95       	ret
    3772:	82 e0       	ldi	r24, 0x02	; 2
    3774:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <_Z8USB_Recvh>

00003778 <_ZN7Serial_5writeEPKhj>:
    3778:	cf 93       	push	r28
    377a:	df 93       	push	r29
    377c:	ec 01       	movw	r28, r24
    377e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL12_usbLineInfo+0x7>
    3782:	88 23       	and	r24, r24
    3784:	31 f0       	breq	.+12     	; 0x3792 <_ZN7Serial_5writeEPKhj+0x1a>
    3786:	83 e0       	ldi	r24, 0x03	; 3
    3788:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <_Z8USB_SendhPKvi>
    378c:	18 16       	cp	r1, r24
    378e:	19 06       	cpc	r1, r25
    3790:	34 f0       	brlt	.+12     	; 0x379e <_ZN7Serial_5writeEPKhj+0x26>
    3792:	81 e0       	ldi	r24, 0x01	; 1
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	9b 83       	std	Y+3, r25	; 0x03
    3798:	8a 83       	std	Y+2, r24	; 0x02
    379a:	80 e0       	ldi	r24, 0x00	; 0
    379c:	90 e0       	ldi	r25, 0x00	; 0
    379e:	df 91       	pop	r29
    37a0:	cf 91       	pop	r28
    37a2:	08 95       	ret

000037a4 <_Z16isLUFAbootloaderv>:
    37a4:	ee ef       	ldi	r30, 0xFE	; 254
    37a6:	ff e7       	ldi	r31, 0x7F	; 127
    37a8:	25 91       	lpm	r18, Z+
    37aa:	34 91       	lpm	r19, Z
    37ac:	81 e0       	ldi	r24, 0x01	; 1
    37ae:	2b 3f       	cpi	r18, 0xFB	; 251
    37b0:	3c 4d       	sbci	r19, 0xDC	; 220
    37b2:	09 f0       	breq	.+2      	; 0x37b6 <_Z16isLUFAbootloaderv+0x12>
    37b4:	80 e0       	ldi	r24, 0x00	; 0
    37b6:	08 95       	ret

000037b8 <_Z16CDC_GetInterfacePh>:
    37b8:	fc 01       	movw	r30, r24
    37ba:	90 81       	ld	r25, Z
    37bc:	9e 5f       	subi	r25, 0xFE	; 254
    37be:	90 83       	st	Z, r25
    37c0:	42 e4       	ldi	r20, 0x42	; 66
    37c2:	50 e0       	ldi	r21, 0x00	; 0
    37c4:	61 e9       	ldi	r22, 0x91	; 145
    37c6:	71 e0       	ldi	r23, 0x01	; 1
    37c8:	80 e8       	ldi	r24, 0x80	; 128
    37ca:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <_Z15USB_SendControlhPKvi>

000037ce <_Z9CDC_SetupR8USBSetup>:
    37ce:	fc 01       	movw	r30, r24
    37d0:	81 81       	ldd	r24, Z+1	; 0x01
    37d2:	90 81       	ld	r25, Z
    37d4:	91 3a       	cpi	r25, 0xA1	; 161
    37d6:	59 f4       	brne	.+22     	; 0x37ee <_Z9CDC_SetupR8USBSetup+0x20>
    37d8:	81 32       	cpi	r24, 0x21	; 33
    37da:	09 f0       	breq	.+2      	; 0x37de <_Z9CDC_SetupR8USBSetup+0x10>
    37dc:	65 c0       	rjmp	.+202    	; 0x38a8 <_Z9CDC_SetupR8USBSetup+0xda>
    37de:	47 e0       	ldi	r20, 0x07	; 7
    37e0:	50 e0       	ldi	r21, 0x00	; 0
    37e2:	66 e1       	ldi	r22, 0x16	; 22
    37e4:	71 e0       	ldi	r23, 0x01	; 1
    37e6:	80 e0       	ldi	r24, 0x00	; 0
    37e8:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_Z15USB_SendControlhPKvi>
    37ec:	5b c0       	rjmp	.+182    	; 0x38a4 <_Z9CDC_SetupR8USBSetup+0xd6>
    37ee:	91 32       	cpi	r25, 0x21	; 33
    37f0:	09 f0       	breq	.+2      	; 0x37f4 <_Z9CDC_SetupR8USBSetup+0x26>
    37f2:	5a c0       	rjmp	.+180    	; 0x38a8 <_Z9CDC_SetupR8USBSetup+0xda>
    37f4:	83 32       	cpi	r24, 0x23	; 35
    37f6:	69 f4       	brne	.+26     	; 0x3812 <_Z9CDC_SetupR8USBSetup+0x44>
    37f8:	82 81       	ldd	r24, Z+2	; 0x02
    37fa:	93 81       	ldd	r25, Z+3	; 0x03
    37fc:	a0 e0       	ldi	r26, 0x00	; 0
    37fe:	b0 e0       	ldi	r27, 0x00	; 0
    3800:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_ZL10breakValue>
    3804:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_ZL10breakValue+0x1>
    3808:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <_ZL10breakValue+0x2>
    380c:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <_ZL10breakValue+0x3>
    3810:	49 c0       	rjmp	.+146    	; 0x38a4 <_Z9CDC_SetupR8USBSetup+0xd6>
    3812:	80 32       	cpi	r24, 0x20	; 32
    3814:	39 f4       	brne	.+14     	; 0x3824 <_Z9CDC_SetupR8USBSetup+0x56>
    3816:	67 e0       	ldi	r22, 0x07	; 7
    3818:	70 e0       	ldi	r23, 0x00	; 0
    381a:	86 e1       	ldi	r24, 0x16	; 22
    381c:	91 e0       	ldi	r25, 0x01	; 1
    381e:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <_Z15USB_RecvControlPvi>
    3822:	40 c0       	rjmp	.+128    	; 0x38a4 <_Z9CDC_SetupR8USBSetup+0xd6>
    3824:	82 32       	cpi	r24, 0x22	; 34
    3826:	09 f0       	breq	.+2      	; 0x382a <_Z9CDC_SetupR8USBSetup+0x5c>
    3828:	3d c0       	rjmp	.+122    	; 0x38a4 <_Z9CDC_SetupR8USBSetup+0xd6>
    382a:	82 81       	ldd	r24, Z+2	; 0x02
    382c:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZL12_usbLineInfo+0x7>
    3830:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <_Z16isLUFAbootloaderv>
    3834:	88 23       	and	r24, r24
    3836:	19 f0       	breq	.+6      	; 0x383e <_Z9CDC_SetupR8USBSetup+0x70>
    3838:	ee ef       	ldi	r30, 0xFE	; 254
    383a:	fa e0       	ldi	r31, 0x0A	; 10
    383c:	02 c0       	rjmp	.+4      	; 0x3842 <_Z9CDC_SetupR8USBSetup+0x74>
    383e:	e0 e0       	ldi	r30, 0x00	; 0
    3840:	f8 e0       	ldi	r31, 0x08	; 8
    3842:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_ZL12_usbLineInfo>
    3846:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <_ZL12_usbLineInfo+0x1>
    384a:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <_ZL12_usbLineInfo+0x2>
    384e:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <_ZL12_usbLineInfo+0x3>
    3852:	80 3b       	cpi	r24, 0xB0	; 176
    3854:	94 40       	sbci	r25, 0x04	; 4
    3856:	a1 05       	cpc	r26, r1
    3858:	b1 05       	cpc	r27, r1
    385a:	41 f5       	brne	.+80     	; 0x38ac <_Z9CDC_SetupR8USBSetup+0xde>
    385c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL12_usbLineInfo+0x7>
    3860:	80 fd       	sbrc	r24, 0
    3862:	24 c0       	rjmp	.+72     	; 0x38ac <_Z9CDC_SetupR8USBSetup+0xde>
    3864:	ee 3f       	cpi	r30, 0xFE	; 254
    3866:	8a e0       	ldi	r24, 0x0A	; 10
    3868:	f8 07       	cpc	r31, r24
    386a:	51 f0       	breq	.+20     	; 0x3880 <_Z9CDC_SetupR8USBSetup+0xb2>
    386c:	80 81       	ld	r24, Z
    386e:	91 81       	ldd	r25, Z+1	; 0x01
    3870:	87 37       	cpi	r24, 0x77	; 119
    3872:	27 e7       	ldi	r18, 0x77	; 119
    3874:	92 07       	cpc	r25, r18
    3876:	21 f0       	breq	.+8      	; 0x3880 <_Z9CDC_SetupR8USBSetup+0xb2>
    3878:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x60e>
    387c:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x60d>
    3880:	87 e7       	ldi	r24, 0x77	; 119
    3882:	97 e7       	ldi	r25, 0x77	; 119
    3884:	91 83       	std	Z+1, r25	; 0x01
    3886:	80 83       	st	Z, r24
    3888:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    388c:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <_ZL11wdtcsr_save>
    3890:	9b e0       	ldi	r25, 0x0B	; 11
    3892:	88 e1       	ldi	r24, 0x18	; 24
    3894:	0f b6       	in	r0, 0x3f	; 63
    3896:	f8 94       	cli
    3898:	a8 95       	wdr
    389a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    389e:	0f be       	out	0x3f, r0	; 63
    38a0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    38a4:	81 e0       	ldi	r24, 0x01	; 1
    38a6:	08 95       	ret
    38a8:	80 e0       	ldi	r24, 0x00	; 0
    38aa:	08 95       	ret
    38ac:	80 81       	ld	r24, Z
    38ae:	91 81       	ldd	r25, Z+1	; 0x01
    38b0:	87 37       	cpi	r24, 0x77	; 119
    38b2:	97 47       	sbci	r25, 0x77	; 119
    38b4:	b9 f7       	brne	.-18     	; 0x38a4 <_Z9CDC_SetupR8USBSetup+0xd6>
    38b6:	a8 95       	wdr
    38b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    38bc:	88 61       	ori	r24, 0x18	; 24
    38be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    38c2:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <_ZL11wdtcsr_save>
    38c6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    38ca:	ee 3f       	cpi	r30, 0xFE	; 254
    38cc:	8a e0       	ldi	r24, 0x0A	; 10
    38ce:	f8 07       	cpc	r31, r24
    38d0:	39 f0       	breq	.+14     	; 0x38e0 <_Z9CDC_SetupR8USBSetup+0x112>
    38d2:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x60d>
    38d6:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x60e>
    38da:	91 83       	std	Z+1, r25	; 0x01
    38dc:	80 83       	st	Z, r24
    38de:	e2 cf       	rjmp	.-60     	; 0x38a4 <_Z9CDC_SetupR8USBSetup+0xd6>
    38e0:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x60e>
    38e4:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x60d>
    38e8:	dd cf       	rjmp	.-70     	; 0x38a4 <_Z9CDC_SetupR8USBSetup+0xd6>

000038ea <_GLOBAL__sub_I__cdcInterface>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    38ea:	e0 e9       	ldi	r30, 0x90	; 144
    38ec:	f4 e0       	ldi	r31, 0x04	; 4
    38ee:	13 82       	std	Z+3, r1	; 0x03
    38f0:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    38f2:	88 ee       	ldi	r24, 0xE8	; 232
    38f4:	93 e0       	ldi	r25, 0x03	; 3
    38f6:	a0 e0       	ldi	r26, 0x00	; 0
    38f8:	b0 e0       	ldi	r27, 0x00	; 0
    38fa:	84 83       	std	Z+4, r24	; 0x04
    38fc:	95 83       	std	Z+5, r25	; 0x05
    38fe:	a6 83       	std	Z+6, r26	; 0x06
    3900:	b7 83       	std	Z+7, r27	; 0x07
class Serial_ : public Stream
{
private:
	int peek_buffer;
public:
	Serial_() { peek_buffer = -1; };
    3902:	8a e7       	ldi	r24, 0x7A	; 122
    3904:	92 e0       	ldi	r25, 0x02	; 2
    3906:	91 83       	std	Z+1, r25	; 0x01
    3908:	80 83       	st	Z, r24
    390a:	8f ef       	ldi	r24, 0xFF	; 255
    390c:	9f ef       	ldi	r25, 0xFF	; 255
    390e:	95 87       	std	Z+13, r25	; 0x0d
    3910:	84 87       	std	Z+12, r24	; 0x0c
    3912:	08 95       	ret

00003914 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3914:	08 95       	ret

00003916 <_ZN13PluggableUSB_12getInterfaceEPh>:
		_initEndpoints[lastEp] = node->endpointType[i];
		lastEp++;
	}
	return true;
	// restart USB layer???
}
    3916:	ef 92       	push	r14
    3918:	ff 92       	push	r15
    391a:	0f 93       	push	r16
    391c:	1f 93       	push	r17
    391e:	cf 93       	push	r28
    3920:	df 93       	push	r29
    3922:	7b 01       	movw	r14, r22
    3924:	fc 01       	movw	r30, r24
    3926:	c2 81       	ldd	r28, Z+2	; 0x02
    3928:	d3 81       	ldd	r29, Z+3	; 0x03
    392a:	00 e0       	ldi	r16, 0x00	; 0
    392c:	10 e0       	ldi	r17, 0x00	; 0
    392e:	20 97       	sbiw	r28, 0x00	; 0
    3930:	81 f0       	breq	.+32     	; 0x3952 <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
    3932:	e8 81       	ld	r30, Y
    3934:	f9 81       	ldd	r31, Y+1	; 0x01
    3936:	02 80       	ldd	r0, Z+2	; 0x02
    3938:	f3 81       	ldd	r31, Z+3	; 0x03
    393a:	e0 2d       	mov	r30, r0
    393c:	b7 01       	movw	r22, r14
    393e:	ce 01       	movw	r24, r28
    3940:	09 95       	icall
    3942:	97 fd       	sbrc	r25, 7
    3944:	08 c0       	rjmp	.+16     	; 0x3956 <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
    3946:	08 0f       	add	r16, r24
    3948:	19 1f       	adc	r17, r25
    394a:	08 84       	ldd	r0, Y+8	; 0x08
    394c:	d9 85       	ldd	r29, Y+9	; 0x09
    394e:	c0 2d       	mov	r28, r0
    3950:	ee cf       	rjmp	.-36     	; 0x392e <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    3952:	c8 01       	movw	r24, r16
    3954:	02 c0       	rjmp	.+4      	; 0x395a <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
    3956:	8f ef       	ldi	r24, 0xFF	; 255
    3958:	9f ef       	ldi	r25, 0xFF	; 255
    395a:	df 91       	pop	r29
    395c:	cf 91       	pop	r28
    395e:	1f 91       	pop	r17
    3960:	0f 91       	pop	r16
    3962:	ff 90       	pop	r15
    3964:	ef 90       	pop	r14
    3966:	08 95       	ret

00003968 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    3968:	0f 93       	push	r16
    396a:	1f 93       	push	r17
    396c:	cf 93       	push	r28
    396e:	df 93       	push	r29
    3970:	8b 01       	movw	r16, r22
    3972:	fc 01       	movw	r30, r24
    3974:	c2 81       	ldd	r28, Z+2	; 0x02
    3976:	d3 81       	ldd	r29, Z+3	; 0x03
    3978:	20 97       	sbiw	r28, 0x00	; 0
    397a:	71 f0       	breq	.+28     	; 0x3998 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
    397c:	e8 81       	ld	r30, Y
    397e:	f9 81       	ldd	r31, Y+1	; 0x01
    3980:	04 80       	ldd	r0, Z+4	; 0x04
    3982:	f5 81       	ldd	r31, Z+5	; 0x05
    3984:	e0 2d       	mov	r30, r0
    3986:	b8 01       	movw	r22, r16
    3988:	ce 01       	movw	r24, r28
    398a:	09 95       	icall
    398c:	00 97       	sbiw	r24, 0x00	; 0
    398e:	31 f4       	brne	.+12     	; 0x399c <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
    3990:	08 84       	ldd	r0, Y+8	; 0x08
    3992:	d9 85       	ldd	r29, Y+9	; 0x09
    3994:	c0 2d       	mov	r28, r0
    3996:	f0 cf       	rjmp	.-32     	; 0x3978 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
    3998:	80 e0       	ldi	r24, 0x00	; 0
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	df 91       	pop	r29
    399e:	cf 91       	pop	r28
    39a0:	1f 91       	pop	r17
    39a2:	0f 91       	pop	r16
    39a4:	08 95       	ret

000039a6 <_ZN13PluggableUSB_12getShortNameEPc>:
    39a6:	0f 93       	push	r16
    39a8:	1f 93       	push	r17
    39aa:	cf 93       	push	r28
    39ac:	df 93       	push	r29
    39ae:	8b 01       	movw	r16, r22
    39b0:	fc 01       	movw	r30, r24
    39b2:	c2 81       	ldd	r28, Z+2	; 0x02
    39b4:	d3 81       	ldd	r29, Z+3	; 0x03
    39b6:	20 97       	sbiw	r28, 0x00	; 0
    39b8:	71 f0       	breq	.+28     	; 0x39d6 <_ZN13PluggableUSB_12getShortNameEPc+0x30>
    39ba:	e8 81       	ld	r30, Y
    39bc:	f9 81       	ldd	r31, Y+1	; 0x01
    39be:	06 80       	ldd	r0, Z+6	; 0x06
    39c0:	f7 81       	ldd	r31, Z+7	; 0x07
    39c2:	e0 2d       	mov	r30, r0
    39c4:	b8 01       	movw	r22, r16
    39c6:	ce 01       	movw	r24, r28
    39c8:	09 95       	icall
    39ca:	08 0f       	add	r16, r24
    39cc:	11 1d       	adc	r17, r1
    39ce:	08 84       	ldd	r0, Y+8	; 0x08
    39d0:	d9 85       	ldd	r29, Y+9	; 0x09
    39d2:	c0 2d       	mov	r28, r0
    39d4:	f0 cf       	rjmp	.-32     	; 0x39b6 <_ZN13PluggableUSB_12getShortNameEPc+0x10>
    39d6:	f8 01       	movw	r30, r16
    39d8:	10 82       	st	Z, r1
    39da:	df 91       	pop	r29
    39dc:	cf 91       	pop	r28
    39de:	1f 91       	pop	r17
    39e0:	0f 91       	pop	r16
    39e2:	08 95       	ret

000039e4 <_ZN13PluggableUSB_5setupER8USBSetup>:
    39e4:	0f 93       	push	r16
    39e6:	1f 93       	push	r17
    39e8:	cf 93       	push	r28
    39ea:	df 93       	push	r29
    39ec:	8b 01       	movw	r16, r22
    39ee:	fc 01       	movw	r30, r24
    39f0:	c2 81       	ldd	r28, Z+2	; 0x02
    39f2:	d3 81       	ldd	r29, Z+3	; 0x03
    39f4:	20 97       	sbiw	r28, 0x00	; 0
    39f6:	71 f0       	breq	.+28     	; 0x3a14 <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
    39f8:	e8 81       	ld	r30, Y
    39fa:	f9 81       	ldd	r31, Y+1	; 0x01
    39fc:	01 90       	ld	r0, Z+
    39fe:	f0 81       	ld	r31, Z
    3a00:	e0 2d       	mov	r30, r0
    3a02:	b8 01       	movw	r22, r16
    3a04:	ce 01       	movw	r24, r28
    3a06:	09 95       	icall
    3a08:	81 11       	cpse	r24, r1
    3a0a:	05 c0       	rjmp	.+10     	; 0x3a16 <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
    3a0c:	08 84       	ldd	r0, Y+8	; 0x08
    3a0e:	d9 85       	ldd	r29, Y+9	; 0x09
    3a10:	c0 2d       	mov	r28, r0
    3a12:	f0 cf       	rjmp	.-32     	; 0x39f4 <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
    3a14:	80 e0       	ldi	r24, 0x00	; 0
    3a16:	df 91       	pop	r29
    3a18:	cf 91       	pop	r28
    3a1a:	1f 91       	pop	r17
    3a1c:	0f 91       	pop	r16
    3a1e:	08 95       	ret

00003a20 <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    3a20:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <_ZGVZ12PluggableUSBvE3obj>
    3a24:	81 11       	cpse	r24, r1
    3a26:	0d c0       	rjmp	.+26     	; 0x3a42 <_Z12PluggableUSBv+0x22>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    3a28:	82 e0       	ldi	r24, 0x02	; 2
    3a2a:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <_ZZ12PluggableUSBvE3obj>
    3a2e:	84 e0       	ldi	r24, 0x04	; 4
    3a30:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <_ZZ12PluggableUSBvE3obj+0x1>
    3a34:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <_ZZ12PluggableUSBvE3obj+0x3>
    3a38:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <_ZZ12PluggableUSBvE3obj+0x2>
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    3a3c:	81 e0       	ldi	r24, 0x01	; 1
    3a3e:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <_ZGVZ12PluggableUSBvE3obj>
	return obj;
}
    3a42:	81 ee       	ldi	r24, 0xE1	; 225
    3a44:	94 e0       	ldi	r25, 0x04	; 4
    3a46:	08 95       	ret

00003a48 <__divsf3>:
    3a48:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <__divsf3x>
    3a4c:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__fp_round>
    3a50:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <__fp_pscB>
    3a54:	58 f0       	brcs	.+22     	; 0x3a6c <__divsf3+0x24>
    3a56:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <__fp_pscA>
    3a5a:	40 f0       	brcs	.+16     	; 0x3a6c <__divsf3+0x24>
    3a5c:	29 f4       	brne	.+10     	; 0x3a68 <__divsf3+0x20>
    3a5e:	5f 3f       	cpi	r21, 0xFF	; 255
    3a60:	29 f0       	breq	.+10     	; 0x3a6c <__divsf3+0x24>
    3a62:	0c 94 e8 11 	jmp	0x23d0	; 0x23d0 <__fp_inf>
    3a66:	51 11       	cpse	r21, r1
    3a68:	0c 94 33 12 	jmp	0x2466	; 0x2466 <__fp_szero>
    3a6c:	0c 94 ee 11 	jmp	0x23dc	; 0x23dc <__fp_nan>

00003a70 <__divsf3x>:
    3a70:	0e 94 10 12 	call	0x2420	; 0x2420 <__fp_split3>
    3a74:	68 f3       	brcs	.-38     	; 0x3a50 <__divsf3+0x8>

00003a76 <__divsf3_pse>:
    3a76:	99 23       	and	r25, r25
    3a78:	b1 f3       	breq	.-20     	; 0x3a66 <__divsf3+0x1e>
    3a7a:	55 23       	and	r21, r21
    3a7c:	91 f3       	breq	.-28     	; 0x3a62 <__divsf3+0x1a>
    3a7e:	95 1b       	sub	r25, r21
    3a80:	55 0b       	sbc	r21, r21
    3a82:	bb 27       	eor	r27, r27
    3a84:	aa 27       	eor	r26, r26
    3a86:	62 17       	cp	r22, r18
    3a88:	73 07       	cpc	r23, r19
    3a8a:	84 07       	cpc	r24, r20
    3a8c:	38 f0       	brcs	.+14     	; 0x3a9c <__divsf3_pse+0x26>
    3a8e:	9f 5f       	subi	r25, 0xFF	; 255
    3a90:	5f 4f       	sbci	r21, 0xFF	; 255
    3a92:	22 0f       	add	r18, r18
    3a94:	33 1f       	adc	r19, r19
    3a96:	44 1f       	adc	r20, r20
    3a98:	aa 1f       	adc	r26, r26
    3a9a:	a9 f3       	breq	.-22     	; 0x3a86 <__divsf3_pse+0x10>
    3a9c:	35 d0       	rcall	.+106    	; 0x3b08 <__divsf3_pse+0x92>
    3a9e:	0e 2e       	mov	r0, r30
    3aa0:	3a f0       	brmi	.+14     	; 0x3ab0 <__divsf3_pse+0x3a>
    3aa2:	e0 e8       	ldi	r30, 0x80	; 128
    3aa4:	32 d0       	rcall	.+100    	; 0x3b0a <__divsf3_pse+0x94>
    3aa6:	91 50       	subi	r25, 0x01	; 1
    3aa8:	50 40       	sbci	r21, 0x00	; 0
    3aaa:	e6 95       	lsr	r30
    3aac:	00 1c       	adc	r0, r0
    3aae:	ca f7       	brpl	.-14     	; 0x3aa2 <__divsf3_pse+0x2c>
    3ab0:	2b d0       	rcall	.+86     	; 0x3b08 <__divsf3_pse+0x92>
    3ab2:	fe 2f       	mov	r31, r30
    3ab4:	29 d0       	rcall	.+82     	; 0x3b08 <__divsf3_pse+0x92>
    3ab6:	66 0f       	add	r22, r22
    3ab8:	77 1f       	adc	r23, r23
    3aba:	88 1f       	adc	r24, r24
    3abc:	bb 1f       	adc	r27, r27
    3abe:	26 17       	cp	r18, r22
    3ac0:	37 07       	cpc	r19, r23
    3ac2:	48 07       	cpc	r20, r24
    3ac4:	ab 07       	cpc	r26, r27
    3ac6:	b0 e8       	ldi	r27, 0x80	; 128
    3ac8:	09 f0       	breq	.+2      	; 0x3acc <__divsf3_pse+0x56>
    3aca:	bb 0b       	sbc	r27, r27
    3acc:	80 2d       	mov	r24, r0
    3ace:	bf 01       	movw	r22, r30
    3ad0:	ff 27       	eor	r31, r31
    3ad2:	93 58       	subi	r25, 0x83	; 131
    3ad4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ad6:	3a f0       	brmi	.+14     	; 0x3ae6 <__divsf3_pse+0x70>
    3ad8:	9e 3f       	cpi	r25, 0xFE	; 254
    3ada:	51 05       	cpc	r21, r1
    3adc:	78 f0       	brcs	.+30     	; 0x3afc <__divsf3_pse+0x86>
    3ade:	0c 94 e8 11 	jmp	0x23d0	; 0x23d0 <__fp_inf>
    3ae2:	0c 94 33 12 	jmp	0x2466	; 0x2466 <__fp_szero>
    3ae6:	5f 3f       	cpi	r21, 0xFF	; 255
    3ae8:	e4 f3       	brlt	.-8      	; 0x3ae2 <__divsf3_pse+0x6c>
    3aea:	98 3e       	cpi	r25, 0xE8	; 232
    3aec:	d4 f3       	brlt	.-12     	; 0x3ae2 <__divsf3_pse+0x6c>
    3aee:	86 95       	lsr	r24
    3af0:	77 95       	ror	r23
    3af2:	67 95       	ror	r22
    3af4:	b7 95       	ror	r27
    3af6:	f7 95       	ror	r31
    3af8:	9f 5f       	subi	r25, 0xFF	; 255
    3afa:	c9 f7       	brne	.-14     	; 0x3aee <__divsf3_pse+0x78>
    3afc:	88 0f       	add	r24, r24
    3afe:	91 1d       	adc	r25, r1
    3b00:	96 95       	lsr	r25
    3b02:	87 95       	ror	r24
    3b04:	97 f9       	bld	r25, 7
    3b06:	08 95       	ret
    3b08:	e1 e0       	ldi	r30, 0x01	; 1
    3b0a:	66 0f       	add	r22, r22
    3b0c:	77 1f       	adc	r23, r23
    3b0e:	88 1f       	adc	r24, r24
    3b10:	bb 1f       	adc	r27, r27
    3b12:	62 17       	cp	r22, r18
    3b14:	73 07       	cpc	r23, r19
    3b16:	84 07       	cpc	r24, r20
    3b18:	ba 07       	cpc	r27, r26
    3b1a:	20 f0       	brcs	.+8      	; 0x3b24 <__divsf3_pse+0xae>
    3b1c:	62 1b       	sub	r22, r18
    3b1e:	73 0b       	sbc	r23, r19
    3b20:	84 0b       	sbc	r24, r20
    3b22:	ba 0b       	sbc	r27, r26
    3b24:	ee 1f       	adc	r30, r30
    3b26:	88 f7       	brcc	.-30     	; 0x3b0a <__divsf3_pse+0x94>
    3b28:	e0 95       	com	r30
    3b2a:	08 95       	ret

00003b2c <__fixunssfsi>:
    3b2c:	0e 94 18 12 	call	0x2430	; 0x2430 <__fp_splitA>
    3b30:	88 f0       	brcs	.+34     	; 0x3b54 <__fixunssfsi+0x28>
    3b32:	9f 57       	subi	r25, 0x7F	; 127
    3b34:	98 f0       	brcs	.+38     	; 0x3b5c <__fixunssfsi+0x30>
    3b36:	b9 2f       	mov	r27, r25
    3b38:	99 27       	eor	r25, r25
    3b3a:	b7 51       	subi	r27, 0x17	; 23
    3b3c:	b0 f0       	brcs	.+44     	; 0x3b6a <__fixunssfsi+0x3e>
    3b3e:	e1 f0       	breq	.+56     	; 0x3b78 <__fixunssfsi+0x4c>
    3b40:	66 0f       	add	r22, r22
    3b42:	77 1f       	adc	r23, r23
    3b44:	88 1f       	adc	r24, r24
    3b46:	99 1f       	adc	r25, r25
    3b48:	1a f0       	brmi	.+6      	; 0x3b50 <__fixunssfsi+0x24>
    3b4a:	ba 95       	dec	r27
    3b4c:	c9 f7       	brne	.-14     	; 0x3b40 <__fixunssfsi+0x14>
    3b4e:	14 c0       	rjmp	.+40     	; 0x3b78 <__fixunssfsi+0x4c>
    3b50:	b1 30       	cpi	r27, 0x01	; 1
    3b52:	91 f0       	breq	.+36     	; 0x3b78 <__fixunssfsi+0x4c>
    3b54:	0e 94 32 12 	call	0x2464	; 0x2464 <__fp_zero>
    3b58:	b1 e0       	ldi	r27, 0x01	; 1
    3b5a:	08 95       	ret
    3b5c:	0c 94 32 12 	jmp	0x2464	; 0x2464 <__fp_zero>
    3b60:	67 2f       	mov	r22, r23
    3b62:	78 2f       	mov	r23, r24
    3b64:	88 27       	eor	r24, r24
    3b66:	b8 5f       	subi	r27, 0xF8	; 248
    3b68:	39 f0       	breq	.+14     	; 0x3b78 <__fixunssfsi+0x4c>
    3b6a:	b9 3f       	cpi	r27, 0xF9	; 249
    3b6c:	cc f3       	brlt	.-14     	; 0x3b60 <__fixunssfsi+0x34>
    3b6e:	86 95       	lsr	r24
    3b70:	77 95       	ror	r23
    3b72:	67 95       	ror	r22
    3b74:	b3 95       	inc	r27
    3b76:	d9 f7       	brne	.-10     	; 0x3b6e <__fixunssfsi+0x42>
    3b78:	3e f4       	brtc	.+14     	; 0x3b88 <__fixunssfsi+0x5c>
    3b7a:	90 95       	com	r25
    3b7c:	80 95       	com	r24
    3b7e:	70 95       	com	r23
    3b80:	61 95       	neg	r22
    3b82:	7f 4f       	sbci	r23, 0xFF	; 255
    3b84:	8f 4f       	sbci	r24, 0xFF	; 255
    3b86:	9f 4f       	sbci	r25, 0xFF	; 255
    3b88:	08 95       	ret

00003b8a <__gesf2>:
    3b8a:	0e 94 c4 11 	call	0x2388	; 0x2388 <__fp_cmp>
    3b8e:	08 f4       	brcc	.+2      	; 0x3b92 <__gesf2+0x8>
    3b90:	8f ef       	ldi	r24, 0xFF	; 255
    3b92:	08 95       	ret

00003b94 <__unordsf2>:
    3b94:	0e 94 c4 11 	call	0x2388	; 0x2388 <__fp_cmp>
    3b98:	88 0b       	sbc	r24, r24
    3b9a:	99 0b       	sbc	r25, r25
    3b9c:	08 95       	ret

00003b9e <__divmodhi4>:
    3b9e:	97 fb       	bst	r25, 7
    3ba0:	07 2e       	mov	r0, r23
    3ba2:	16 f4       	brtc	.+4      	; 0x3ba8 <__divmodhi4+0xa>
    3ba4:	00 94       	com	r0
    3ba6:	07 d0       	rcall	.+14     	; 0x3bb6 <__divmodhi4_neg1>
    3ba8:	77 fd       	sbrc	r23, 7
    3baa:	09 d0       	rcall	.+18     	; 0x3bbe <__divmodhi4_neg2>
    3bac:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <__udivmodhi4>
    3bb0:	07 fc       	sbrc	r0, 7
    3bb2:	05 d0       	rcall	.+10     	; 0x3bbe <__divmodhi4_neg2>
    3bb4:	3e f4       	brtc	.+14     	; 0x3bc4 <__divmodhi4_exit>

00003bb6 <__divmodhi4_neg1>:
    3bb6:	90 95       	com	r25
    3bb8:	81 95       	neg	r24
    3bba:	9f 4f       	sbci	r25, 0xFF	; 255
    3bbc:	08 95       	ret

00003bbe <__divmodhi4_neg2>:
    3bbe:	70 95       	com	r23
    3bc0:	61 95       	neg	r22
    3bc2:	7f 4f       	sbci	r23, 0xFF	; 255

00003bc4 <__divmodhi4_exit>:
    3bc4:	08 95       	ret

00003bc6 <__udivmodsi4>:
    3bc6:	a1 e2       	ldi	r26, 0x21	; 33
    3bc8:	1a 2e       	mov	r1, r26
    3bca:	aa 1b       	sub	r26, r26
    3bcc:	bb 1b       	sub	r27, r27
    3bce:	fd 01       	movw	r30, r26
    3bd0:	0d c0       	rjmp	.+26     	; 0x3bec <__udivmodsi4_ep>

00003bd2 <__udivmodsi4_loop>:
    3bd2:	aa 1f       	adc	r26, r26
    3bd4:	bb 1f       	adc	r27, r27
    3bd6:	ee 1f       	adc	r30, r30
    3bd8:	ff 1f       	adc	r31, r31
    3bda:	a2 17       	cp	r26, r18
    3bdc:	b3 07       	cpc	r27, r19
    3bde:	e4 07       	cpc	r30, r20
    3be0:	f5 07       	cpc	r31, r21
    3be2:	20 f0       	brcs	.+8      	; 0x3bec <__udivmodsi4_ep>
    3be4:	a2 1b       	sub	r26, r18
    3be6:	b3 0b       	sbc	r27, r19
    3be8:	e4 0b       	sbc	r30, r20
    3bea:	f5 0b       	sbc	r31, r21

00003bec <__udivmodsi4_ep>:
    3bec:	66 1f       	adc	r22, r22
    3bee:	77 1f       	adc	r23, r23
    3bf0:	88 1f       	adc	r24, r24
    3bf2:	99 1f       	adc	r25, r25
    3bf4:	1a 94       	dec	r1
    3bf6:	69 f7       	brne	.-38     	; 0x3bd2 <__udivmodsi4_loop>
    3bf8:	60 95       	com	r22
    3bfa:	70 95       	com	r23
    3bfc:	80 95       	com	r24
    3bfe:	90 95       	com	r25
    3c00:	9b 01       	movw	r18, r22
    3c02:	ac 01       	movw	r20, r24
    3c04:	bd 01       	movw	r22, r26
    3c06:	cf 01       	movw	r24, r30
    3c08:	08 95       	ret

00003c0a <__tablejump2__>:
    3c0a:	ee 0f       	add	r30, r30
    3c0c:	ff 1f       	adc	r31, r31
    3c0e:	05 90       	lpm	r0, Z+
    3c10:	f4 91       	lpm	r31, Z
    3c12:	e0 2d       	mov	r30, r0
    3c14:	09 94       	ijmp

00003c16 <__udivmodhi4>:
    3c16:	aa 1b       	sub	r26, r26
    3c18:	bb 1b       	sub	r27, r27
    3c1a:	51 e1       	ldi	r21, 0x11	; 17
    3c1c:	07 c0       	rjmp	.+14     	; 0x3c2c <__udivmodhi4_ep>

00003c1e <__udivmodhi4_loop>:
    3c1e:	aa 1f       	adc	r26, r26
    3c20:	bb 1f       	adc	r27, r27
    3c22:	a6 17       	cp	r26, r22
    3c24:	b7 07       	cpc	r27, r23
    3c26:	10 f0       	brcs	.+4      	; 0x3c2c <__udivmodhi4_ep>
    3c28:	a6 1b       	sub	r26, r22
    3c2a:	b7 0b       	sbc	r27, r23

00003c2c <__udivmodhi4_ep>:
    3c2c:	88 1f       	adc	r24, r24
    3c2e:	99 1f       	adc	r25, r25
    3c30:	5a 95       	dec	r21
    3c32:	a9 f7       	brne	.-22     	; 0x3c1e <__udivmodhi4_loop>
    3c34:	80 95       	com	r24
    3c36:	90 95       	com	r25
    3c38:	bc 01       	movw	r22, r24
    3c3a:	cd 01       	movw	r24, r26
    3c3c:	08 95       	ret

00003c3e <malloc>:
    3c3e:	0f 93       	push	r16
    3c40:	1f 93       	push	r17
    3c42:	cf 93       	push	r28
    3c44:	df 93       	push	r29
    3c46:	82 30       	cpi	r24, 0x02	; 2
    3c48:	91 05       	cpc	r25, r1
    3c4a:	10 f4       	brcc	.+4      	; 0x3c50 <malloc+0x12>
    3c4c:	82 e0       	ldi	r24, 0x02	; 2
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	e0 91 ef 04 	lds	r30, 0x04EF	; 0x8004ef <__flp>
    3c54:	f0 91 f0 04 	lds	r31, 0x04F0	; 0x8004f0 <__flp+0x1>
    3c58:	20 e0       	ldi	r18, 0x00	; 0
    3c5a:	30 e0       	ldi	r19, 0x00	; 0
    3c5c:	a0 e0       	ldi	r26, 0x00	; 0
    3c5e:	b0 e0       	ldi	r27, 0x00	; 0
    3c60:	30 97       	sbiw	r30, 0x00	; 0
    3c62:	19 f1       	breq	.+70     	; 0x3caa <malloc+0x6c>
    3c64:	40 81       	ld	r20, Z
    3c66:	51 81       	ldd	r21, Z+1	; 0x01
    3c68:	02 81       	ldd	r16, Z+2	; 0x02
    3c6a:	13 81       	ldd	r17, Z+3	; 0x03
    3c6c:	48 17       	cp	r20, r24
    3c6e:	59 07       	cpc	r21, r25
    3c70:	c8 f0       	brcs	.+50     	; 0x3ca4 <malloc+0x66>
    3c72:	84 17       	cp	r24, r20
    3c74:	95 07       	cpc	r25, r21
    3c76:	69 f4       	brne	.+26     	; 0x3c92 <malloc+0x54>
    3c78:	10 97       	sbiw	r26, 0x00	; 0
    3c7a:	31 f0       	breq	.+12     	; 0x3c88 <malloc+0x4a>
    3c7c:	12 96       	adiw	r26, 0x02	; 2
    3c7e:	0c 93       	st	X, r16
    3c80:	12 97       	sbiw	r26, 0x02	; 2
    3c82:	13 96       	adiw	r26, 0x03	; 3
    3c84:	1c 93       	st	X, r17
    3c86:	27 c0       	rjmp	.+78     	; 0x3cd6 <malloc+0x98>
    3c88:	00 93 ef 04 	sts	0x04EF, r16	; 0x8004ef <__flp>
    3c8c:	10 93 f0 04 	sts	0x04F0, r17	; 0x8004f0 <__flp+0x1>
    3c90:	22 c0       	rjmp	.+68     	; 0x3cd6 <malloc+0x98>
    3c92:	21 15       	cp	r18, r1
    3c94:	31 05       	cpc	r19, r1
    3c96:	19 f0       	breq	.+6      	; 0x3c9e <malloc+0x60>
    3c98:	42 17       	cp	r20, r18
    3c9a:	53 07       	cpc	r21, r19
    3c9c:	18 f4       	brcc	.+6      	; 0x3ca4 <malloc+0x66>
    3c9e:	9a 01       	movw	r18, r20
    3ca0:	bd 01       	movw	r22, r26
    3ca2:	ef 01       	movw	r28, r30
    3ca4:	df 01       	movw	r26, r30
    3ca6:	f8 01       	movw	r30, r16
    3ca8:	db cf       	rjmp	.-74     	; 0x3c60 <malloc+0x22>
    3caa:	21 15       	cp	r18, r1
    3cac:	31 05       	cpc	r19, r1
    3cae:	f9 f0       	breq	.+62     	; 0x3cee <malloc+0xb0>
    3cb0:	28 1b       	sub	r18, r24
    3cb2:	39 0b       	sbc	r19, r25
    3cb4:	24 30       	cpi	r18, 0x04	; 4
    3cb6:	31 05       	cpc	r19, r1
    3cb8:	80 f4       	brcc	.+32     	; 0x3cda <malloc+0x9c>
    3cba:	8a 81       	ldd	r24, Y+2	; 0x02
    3cbc:	9b 81       	ldd	r25, Y+3	; 0x03
    3cbe:	61 15       	cp	r22, r1
    3cc0:	71 05       	cpc	r23, r1
    3cc2:	21 f0       	breq	.+8      	; 0x3ccc <malloc+0x8e>
    3cc4:	fb 01       	movw	r30, r22
    3cc6:	93 83       	std	Z+3, r25	; 0x03
    3cc8:	82 83       	std	Z+2, r24	; 0x02
    3cca:	04 c0       	rjmp	.+8      	; 0x3cd4 <malloc+0x96>
    3ccc:	90 93 f0 04 	sts	0x04F0, r25	; 0x8004f0 <__flp+0x1>
    3cd0:	80 93 ef 04 	sts	0x04EF, r24	; 0x8004ef <__flp>
    3cd4:	fe 01       	movw	r30, r28
    3cd6:	32 96       	adiw	r30, 0x02	; 2
    3cd8:	44 c0       	rjmp	.+136    	; 0x3d62 <malloc+0x124>
    3cda:	fe 01       	movw	r30, r28
    3cdc:	e2 0f       	add	r30, r18
    3cde:	f3 1f       	adc	r31, r19
    3ce0:	81 93       	st	Z+, r24
    3ce2:	91 93       	st	Z+, r25
    3ce4:	22 50       	subi	r18, 0x02	; 2
    3ce6:	31 09       	sbc	r19, r1
    3ce8:	39 83       	std	Y+1, r19	; 0x01
    3cea:	28 83       	st	Y, r18
    3cec:	3a c0       	rjmp	.+116    	; 0x3d62 <malloc+0x124>
    3cee:	20 91 ed 04 	lds	r18, 0x04ED	; 0x8004ed <__brkval>
    3cf2:	30 91 ee 04 	lds	r19, 0x04EE	; 0x8004ee <__brkval+0x1>
    3cf6:	23 2b       	or	r18, r19
    3cf8:	41 f4       	brne	.+16     	; 0x3d0a <malloc+0xcc>
    3cfa:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3cfe:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3d02:	30 93 ee 04 	sts	0x04EE, r19	; 0x8004ee <__brkval+0x1>
    3d06:	20 93 ed 04 	sts	0x04ED, r18	; 0x8004ed <__brkval>
    3d0a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3d0e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3d12:	21 15       	cp	r18, r1
    3d14:	31 05       	cpc	r19, r1
    3d16:	41 f4       	brne	.+16     	; 0x3d28 <malloc+0xea>
    3d18:	2d b7       	in	r18, 0x3d	; 61
    3d1a:	3e b7       	in	r19, 0x3e	; 62
    3d1c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3d20:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3d24:	24 1b       	sub	r18, r20
    3d26:	35 0b       	sbc	r19, r21
    3d28:	e0 91 ed 04 	lds	r30, 0x04ED	; 0x8004ed <__brkval>
    3d2c:	f0 91 ee 04 	lds	r31, 0x04EE	; 0x8004ee <__brkval+0x1>
    3d30:	e2 17       	cp	r30, r18
    3d32:	f3 07       	cpc	r31, r19
    3d34:	a0 f4       	brcc	.+40     	; 0x3d5e <malloc+0x120>
    3d36:	2e 1b       	sub	r18, r30
    3d38:	3f 0b       	sbc	r19, r31
    3d3a:	28 17       	cp	r18, r24
    3d3c:	39 07       	cpc	r19, r25
    3d3e:	78 f0       	brcs	.+30     	; 0x3d5e <malloc+0x120>
    3d40:	ac 01       	movw	r20, r24
    3d42:	4e 5f       	subi	r20, 0xFE	; 254
    3d44:	5f 4f       	sbci	r21, 0xFF	; 255
    3d46:	24 17       	cp	r18, r20
    3d48:	35 07       	cpc	r19, r21
    3d4a:	48 f0       	brcs	.+18     	; 0x3d5e <malloc+0x120>
    3d4c:	4e 0f       	add	r20, r30
    3d4e:	5f 1f       	adc	r21, r31
    3d50:	50 93 ee 04 	sts	0x04EE, r21	; 0x8004ee <__brkval+0x1>
    3d54:	40 93 ed 04 	sts	0x04ED, r20	; 0x8004ed <__brkval>
    3d58:	81 93       	st	Z+, r24
    3d5a:	91 93       	st	Z+, r25
    3d5c:	02 c0       	rjmp	.+4      	; 0x3d62 <malloc+0x124>
    3d5e:	e0 e0       	ldi	r30, 0x00	; 0
    3d60:	f0 e0       	ldi	r31, 0x00	; 0
    3d62:	cf 01       	movw	r24, r30
    3d64:	df 91       	pop	r29
    3d66:	cf 91       	pop	r28
    3d68:	1f 91       	pop	r17
    3d6a:	0f 91       	pop	r16
    3d6c:	08 95       	ret

00003d6e <free>:
    3d6e:	cf 93       	push	r28
    3d70:	df 93       	push	r29
    3d72:	00 97       	sbiw	r24, 0x00	; 0
    3d74:	09 f4       	brne	.+2      	; 0x3d78 <free+0xa>
    3d76:	81 c0       	rjmp	.+258    	; 0x3e7a <free+0x10c>
    3d78:	fc 01       	movw	r30, r24
    3d7a:	32 97       	sbiw	r30, 0x02	; 2
    3d7c:	13 82       	std	Z+3, r1	; 0x03
    3d7e:	12 82       	std	Z+2, r1	; 0x02
    3d80:	a0 91 ef 04 	lds	r26, 0x04EF	; 0x8004ef <__flp>
    3d84:	b0 91 f0 04 	lds	r27, 0x04F0	; 0x8004f0 <__flp+0x1>
    3d88:	10 97       	sbiw	r26, 0x00	; 0
    3d8a:	81 f4       	brne	.+32     	; 0x3dac <free+0x3e>
    3d8c:	20 81       	ld	r18, Z
    3d8e:	31 81       	ldd	r19, Z+1	; 0x01
    3d90:	82 0f       	add	r24, r18
    3d92:	93 1f       	adc	r25, r19
    3d94:	20 91 ed 04 	lds	r18, 0x04ED	; 0x8004ed <__brkval>
    3d98:	30 91 ee 04 	lds	r19, 0x04EE	; 0x8004ee <__brkval+0x1>
    3d9c:	28 17       	cp	r18, r24
    3d9e:	39 07       	cpc	r19, r25
    3da0:	51 f5       	brne	.+84     	; 0x3df6 <free+0x88>
    3da2:	f0 93 ee 04 	sts	0x04EE, r31	; 0x8004ee <__brkval+0x1>
    3da6:	e0 93 ed 04 	sts	0x04ED, r30	; 0x8004ed <__brkval>
    3daa:	67 c0       	rjmp	.+206    	; 0x3e7a <free+0x10c>
    3dac:	ed 01       	movw	r28, r26
    3dae:	20 e0       	ldi	r18, 0x00	; 0
    3db0:	30 e0       	ldi	r19, 0x00	; 0
    3db2:	ce 17       	cp	r28, r30
    3db4:	df 07       	cpc	r29, r31
    3db6:	40 f4       	brcc	.+16     	; 0x3dc8 <free+0x5a>
    3db8:	4a 81       	ldd	r20, Y+2	; 0x02
    3dba:	5b 81       	ldd	r21, Y+3	; 0x03
    3dbc:	9e 01       	movw	r18, r28
    3dbe:	41 15       	cp	r20, r1
    3dc0:	51 05       	cpc	r21, r1
    3dc2:	f1 f0       	breq	.+60     	; 0x3e00 <free+0x92>
    3dc4:	ea 01       	movw	r28, r20
    3dc6:	f5 cf       	rjmp	.-22     	; 0x3db2 <free+0x44>
    3dc8:	d3 83       	std	Z+3, r29	; 0x03
    3dca:	c2 83       	std	Z+2, r28	; 0x02
    3dcc:	40 81       	ld	r20, Z
    3dce:	51 81       	ldd	r21, Z+1	; 0x01
    3dd0:	84 0f       	add	r24, r20
    3dd2:	95 1f       	adc	r25, r21
    3dd4:	c8 17       	cp	r28, r24
    3dd6:	d9 07       	cpc	r29, r25
    3dd8:	59 f4       	brne	.+22     	; 0x3df0 <free+0x82>
    3dda:	88 81       	ld	r24, Y
    3ddc:	99 81       	ldd	r25, Y+1	; 0x01
    3dde:	84 0f       	add	r24, r20
    3de0:	95 1f       	adc	r25, r21
    3de2:	02 96       	adiw	r24, 0x02	; 2
    3de4:	91 83       	std	Z+1, r25	; 0x01
    3de6:	80 83       	st	Z, r24
    3de8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dea:	9b 81       	ldd	r25, Y+3	; 0x03
    3dec:	93 83       	std	Z+3, r25	; 0x03
    3dee:	82 83       	std	Z+2, r24	; 0x02
    3df0:	21 15       	cp	r18, r1
    3df2:	31 05       	cpc	r19, r1
    3df4:	29 f4       	brne	.+10     	; 0x3e00 <free+0x92>
    3df6:	f0 93 f0 04 	sts	0x04F0, r31	; 0x8004f0 <__flp+0x1>
    3dfa:	e0 93 ef 04 	sts	0x04EF, r30	; 0x8004ef <__flp>
    3dfe:	3d c0       	rjmp	.+122    	; 0x3e7a <free+0x10c>
    3e00:	e9 01       	movw	r28, r18
    3e02:	fb 83       	std	Y+3, r31	; 0x03
    3e04:	ea 83       	std	Y+2, r30	; 0x02
    3e06:	49 91       	ld	r20, Y+
    3e08:	59 91       	ld	r21, Y+
    3e0a:	c4 0f       	add	r28, r20
    3e0c:	d5 1f       	adc	r29, r21
    3e0e:	ec 17       	cp	r30, r28
    3e10:	fd 07       	cpc	r31, r29
    3e12:	61 f4       	brne	.+24     	; 0x3e2c <free+0xbe>
    3e14:	80 81       	ld	r24, Z
    3e16:	91 81       	ldd	r25, Z+1	; 0x01
    3e18:	84 0f       	add	r24, r20
    3e1a:	95 1f       	adc	r25, r21
    3e1c:	02 96       	adiw	r24, 0x02	; 2
    3e1e:	e9 01       	movw	r28, r18
    3e20:	99 83       	std	Y+1, r25	; 0x01
    3e22:	88 83       	st	Y, r24
    3e24:	82 81       	ldd	r24, Z+2	; 0x02
    3e26:	93 81       	ldd	r25, Z+3	; 0x03
    3e28:	9b 83       	std	Y+3, r25	; 0x03
    3e2a:	8a 83       	std	Y+2, r24	; 0x02
    3e2c:	e0 e0       	ldi	r30, 0x00	; 0
    3e2e:	f0 e0       	ldi	r31, 0x00	; 0
    3e30:	12 96       	adiw	r26, 0x02	; 2
    3e32:	8d 91       	ld	r24, X+
    3e34:	9c 91       	ld	r25, X
    3e36:	13 97       	sbiw	r26, 0x03	; 3
    3e38:	00 97       	sbiw	r24, 0x00	; 0
    3e3a:	19 f0       	breq	.+6      	; 0x3e42 <free+0xd4>
    3e3c:	fd 01       	movw	r30, r26
    3e3e:	dc 01       	movw	r26, r24
    3e40:	f7 cf       	rjmp	.-18     	; 0x3e30 <free+0xc2>
    3e42:	8d 91       	ld	r24, X+
    3e44:	9c 91       	ld	r25, X
    3e46:	11 97       	sbiw	r26, 0x01	; 1
    3e48:	9d 01       	movw	r18, r26
    3e4a:	2e 5f       	subi	r18, 0xFE	; 254
    3e4c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e4e:	82 0f       	add	r24, r18
    3e50:	93 1f       	adc	r25, r19
    3e52:	20 91 ed 04 	lds	r18, 0x04ED	; 0x8004ed <__brkval>
    3e56:	30 91 ee 04 	lds	r19, 0x04EE	; 0x8004ee <__brkval+0x1>
    3e5a:	28 17       	cp	r18, r24
    3e5c:	39 07       	cpc	r19, r25
    3e5e:	69 f4       	brne	.+26     	; 0x3e7a <free+0x10c>
    3e60:	30 97       	sbiw	r30, 0x00	; 0
    3e62:	29 f4       	brne	.+10     	; 0x3e6e <free+0x100>
    3e64:	10 92 f0 04 	sts	0x04F0, r1	; 0x8004f0 <__flp+0x1>
    3e68:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <__flp>
    3e6c:	02 c0       	rjmp	.+4      	; 0x3e72 <free+0x104>
    3e6e:	13 82       	std	Z+3, r1	; 0x03
    3e70:	12 82       	std	Z+2, r1	; 0x02
    3e72:	b0 93 ee 04 	sts	0x04EE, r27	; 0x8004ee <__brkval+0x1>
    3e76:	a0 93 ed 04 	sts	0x04ED, r26	; 0x8004ed <__brkval>
    3e7a:	df 91       	pop	r29
    3e7c:	cf 91       	pop	r28
    3e7e:	08 95       	ret

00003e80 <realloc>:
    3e80:	a0 e0       	ldi	r26, 0x00	; 0
    3e82:	b0 e0       	ldi	r27, 0x00	; 0
    3e84:	e6 e4       	ldi	r30, 0x46	; 70
    3e86:	ff e1       	ldi	r31, 0x1F	; 31
    3e88:	0c 94 26 20 	jmp	0x404c	; 0x404c <__prologue_saves__+0x8>
    3e8c:	ec 01       	movw	r28, r24
    3e8e:	00 97       	sbiw	r24, 0x00	; 0
    3e90:	21 f4       	brne	.+8      	; 0x3e9a <realloc+0x1a>
    3e92:	cb 01       	movw	r24, r22
    3e94:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <malloc>
    3e98:	b4 c0       	rjmp	.+360    	; 0x4002 <realloc+0x182>
    3e9a:	fc 01       	movw	r30, r24
    3e9c:	e6 0f       	add	r30, r22
    3e9e:	f7 1f       	adc	r31, r23
    3ea0:	9c 01       	movw	r18, r24
    3ea2:	22 50       	subi	r18, 0x02	; 2
    3ea4:	31 09       	sbc	r19, r1
    3ea6:	e2 17       	cp	r30, r18
    3ea8:	f3 07       	cpc	r31, r19
    3eaa:	08 f4       	brcc	.+2      	; 0x3eae <realloc+0x2e>
    3eac:	a8 c0       	rjmp	.+336    	; 0x3ffe <realloc+0x17e>
    3eae:	d9 01       	movw	r26, r18
    3eb0:	0d 91       	ld	r16, X+
    3eb2:	1c 91       	ld	r17, X
    3eb4:	11 97       	sbiw	r26, 0x01	; 1
    3eb6:	06 17       	cp	r16, r22
    3eb8:	17 07       	cpc	r17, r23
    3eba:	b0 f0       	brcs	.+44     	; 0x3ee8 <realloc+0x68>
    3ebc:	05 30       	cpi	r16, 0x05	; 5
    3ebe:	11 05       	cpc	r17, r1
    3ec0:	08 f4       	brcc	.+2      	; 0x3ec4 <realloc+0x44>
    3ec2:	9b c0       	rjmp	.+310    	; 0x3ffa <realloc+0x17a>
    3ec4:	c8 01       	movw	r24, r16
    3ec6:	04 97       	sbiw	r24, 0x04	; 4
    3ec8:	86 17       	cp	r24, r22
    3eca:	97 07       	cpc	r25, r23
    3ecc:	08 f4       	brcc	.+2      	; 0x3ed0 <realloc+0x50>
    3ece:	95 c0       	rjmp	.+298    	; 0x3ffa <realloc+0x17a>
    3ed0:	02 50       	subi	r16, 0x02	; 2
    3ed2:	11 09       	sbc	r17, r1
    3ed4:	06 1b       	sub	r16, r22
    3ed6:	17 0b       	sbc	r17, r23
    3ed8:	01 93       	st	Z+, r16
    3eda:	11 93       	st	Z+, r17
    3edc:	6d 93       	st	X+, r22
    3ede:	7c 93       	st	X, r23
    3ee0:	cf 01       	movw	r24, r30
    3ee2:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <free>
    3ee6:	89 c0       	rjmp	.+274    	; 0x3ffa <realloc+0x17a>
    3ee8:	5b 01       	movw	r10, r22
    3eea:	a0 1a       	sub	r10, r16
    3eec:	b1 0a       	sbc	r11, r17
    3eee:	4c 01       	movw	r8, r24
    3ef0:	80 0e       	add	r8, r16
    3ef2:	91 1e       	adc	r9, r17
    3ef4:	a0 91 ef 04 	lds	r26, 0x04EF	; 0x8004ef <__flp>
    3ef8:	b0 91 f0 04 	lds	r27, 0x04F0	; 0x8004f0 <__flp+0x1>
    3efc:	61 2c       	mov	r6, r1
    3efe:	71 2c       	mov	r7, r1
    3f00:	e1 2c       	mov	r14, r1
    3f02:	f1 2c       	mov	r15, r1
    3f04:	10 97       	sbiw	r26, 0x00	; 0
    3f06:	09 f4       	brne	.+2      	; 0x3f0a <realloc+0x8a>
    3f08:	46 c0       	rjmp	.+140    	; 0x3f96 <realloc+0x116>
    3f0a:	8d 91       	ld	r24, X+
    3f0c:	9c 91       	ld	r25, X
    3f0e:	11 97       	sbiw	r26, 0x01	; 1
    3f10:	a8 15       	cp	r26, r8
    3f12:	b9 05       	cpc	r27, r9
    3f14:	b1 f5       	brne	.+108    	; 0x3f82 <realloc+0x102>
    3f16:	6c 01       	movw	r12, r24
    3f18:	42 e0       	ldi	r20, 0x02	; 2
    3f1a:	c4 0e       	add	r12, r20
    3f1c:	d1 1c       	adc	r13, r1
    3f1e:	ca 14       	cp	r12, r10
    3f20:	db 04       	cpc	r13, r11
    3f22:	78 f1       	brcs	.+94     	; 0x3f82 <realloc+0x102>
    3f24:	4c 01       	movw	r8, r24
    3f26:	8a 18       	sub	r8, r10
    3f28:	9b 08       	sbc	r9, r11
    3f2a:	64 01       	movw	r12, r8
    3f2c:	42 e0       	ldi	r20, 0x02	; 2
    3f2e:	c4 0e       	add	r12, r20
    3f30:	d1 1c       	adc	r13, r1
    3f32:	12 96       	adiw	r26, 0x02	; 2
    3f34:	bc 90       	ld	r11, X
    3f36:	12 97       	sbiw	r26, 0x02	; 2
    3f38:	13 96       	adiw	r26, 0x03	; 3
    3f3a:	ac 91       	ld	r26, X
    3f3c:	b5 e0       	ldi	r27, 0x05	; 5
    3f3e:	cb 16       	cp	r12, r27
    3f40:	d1 04       	cpc	r13, r1
    3f42:	40 f0       	brcs	.+16     	; 0x3f54 <realloc+0xd4>
    3f44:	b2 82       	std	Z+2, r11	; 0x02
    3f46:	a3 83       	std	Z+3, r26	; 0x03
    3f48:	91 82       	std	Z+1, r9	; 0x01
    3f4a:	80 82       	st	Z, r8
    3f4c:	d9 01       	movw	r26, r18
    3f4e:	6d 93       	st	X+, r22
    3f50:	7c 93       	st	X, r23
    3f52:	09 c0       	rjmp	.+18     	; 0x3f66 <realloc+0xe6>
    3f54:	0e 5f       	subi	r16, 0xFE	; 254
    3f56:	1f 4f       	sbci	r17, 0xFF	; 255
    3f58:	80 0f       	add	r24, r16
    3f5a:	91 1f       	adc	r25, r17
    3f5c:	f9 01       	movw	r30, r18
    3f5e:	91 83       	std	Z+1, r25	; 0x01
    3f60:	80 83       	st	Z, r24
    3f62:	eb 2d       	mov	r30, r11
    3f64:	fa 2f       	mov	r31, r26
    3f66:	e1 14       	cp	r14, r1
    3f68:	f1 04       	cpc	r15, r1
    3f6a:	31 f0       	breq	.+12     	; 0x3f78 <realloc+0xf8>
    3f6c:	d7 01       	movw	r26, r14
    3f6e:	13 96       	adiw	r26, 0x03	; 3
    3f70:	fc 93       	st	X, r31
    3f72:	ee 93       	st	-X, r30
    3f74:	12 97       	sbiw	r26, 0x02	; 2
    3f76:	41 c0       	rjmp	.+130    	; 0x3ffa <realloc+0x17a>
    3f78:	f0 93 f0 04 	sts	0x04F0, r31	; 0x8004f0 <__flp+0x1>
    3f7c:	e0 93 ef 04 	sts	0x04EF, r30	; 0x8004ef <__flp>
    3f80:	3c c0       	rjmp	.+120    	; 0x3ffa <realloc+0x17a>
    3f82:	68 16       	cp	r6, r24
    3f84:	79 06       	cpc	r7, r25
    3f86:	08 f4       	brcc	.+2      	; 0x3f8a <realloc+0x10a>
    3f88:	3c 01       	movw	r6, r24
    3f8a:	7d 01       	movw	r14, r26
    3f8c:	12 96       	adiw	r26, 0x02	; 2
    3f8e:	0d 90       	ld	r0, X+
    3f90:	bc 91       	ld	r27, X
    3f92:	a0 2d       	mov	r26, r0
    3f94:	b7 cf       	rjmp	.-146    	; 0x3f04 <realloc+0x84>
    3f96:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <__brkval>
    3f9a:	90 91 ee 04 	lds	r25, 0x04EE	; 0x8004ee <__brkval+0x1>
    3f9e:	88 16       	cp	r8, r24
    3fa0:	99 06       	cpc	r9, r25
    3fa2:	e1 f4       	brne	.+56     	; 0x3fdc <realloc+0x15c>
    3fa4:	66 16       	cp	r6, r22
    3fa6:	77 06       	cpc	r7, r23
    3fa8:	c8 f4       	brcc	.+50     	; 0x3fdc <realloc+0x15c>
    3faa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3fae:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    3fb2:	00 97       	sbiw	r24, 0x00	; 0
    3fb4:	41 f4       	brne	.+16     	; 0x3fc6 <realloc+0x146>
    3fb6:	8d b7       	in	r24, 0x3d	; 61
    3fb8:	9e b7       	in	r25, 0x3e	; 62
    3fba:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3fbe:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3fc2:	84 1b       	sub	r24, r20
    3fc4:	95 0b       	sbc	r25, r21
    3fc6:	e8 17       	cp	r30, r24
    3fc8:	f9 07       	cpc	r31, r25
    3fca:	c8 f4       	brcc	.+50     	; 0x3ffe <realloc+0x17e>
    3fcc:	f0 93 ee 04 	sts	0x04EE, r31	; 0x8004ee <__brkval+0x1>
    3fd0:	e0 93 ed 04 	sts	0x04ED, r30	; 0x8004ed <__brkval>
    3fd4:	f9 01       	movw	r30, r18
    3fd6:	71 83       	std	Z+1, r23	; 0x01
    3fd8:	60 83       	st	Z, r22
    3fda:	0f c0       	rjmp	.+30     	; 0x3ffa <realloc+0x17a>
    3fdc:	cb 01       	movw	r24, r22
    3fde:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <malloc>
    3fe2:	7c 01       	movw	r14, r24
    3fe4:	00 97       	sbiw	r24, 0x00	; 0
    3fe6:	59 f0       	breq	.+22     	; 0x3ffe <realloc+0x17e>
    3fe8:	a8 01       	movw	r20, r16
    3fea:	be 01       	movw	r22, r28
    3fec:	0e 94 12 20 	call	0x4024	; 0x4024 <memcpy>
    3ff0:	ce 01       	movw	r24, r28
    3ff2:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <free>
    3ff6:	c7 01       	movw	r24, r14
    3ff8:	04 c0       	rjmp	.+8      	; 0x4002 <realloc+0x182>
    3ffa:	ce 01       	movw	r24, r28
    3ffc:	02 c0       	rjmp	.+4      	; 0x4002 <realloc+0x182>
    3ffe:	80 e0       	ldi	r24, 0x00	; 0
    4000:	90 e0       	ldi	r25, 0x00	; 0
    4002:	cd b7       	in	r28, 0x3d	; 61
    4004:	de b7       	in	r29, 0x3e	; 62
    4006:	ee e0       	ldi	r30, 0x0E	; 14
    4008:	0c 94 42 20 	jmp	0x4084	; 0x4084 <__epilogue_restores__+0x8>

0000400c <abort>:
    400c:	81 e0       	ldi	r24, 0x01	; 1
    400e:	90 e0       	ldi	r25, 0x00	; 0
    4010:	f8 94       	cli
    4012:	0c 94 59 20 	jmp	0x40b2	; 0x40b2 <__do_global_dtors>

00004016 <strcpy_P>:
    4016:	fb 01       	movw	r30, r22
    4018:	dc 01       	movw	r26, r24
    401a:	05 90       	lpm	r0, Z+
    401c:	0d 92       	st	X+, r0
    401e:	00 20       	and	r0, r0
    4020:	e1 f7       	brne	.-8      	; 0x401a <strcpy_P+0x4>
    4022:	08 95       	ret

00004024 <memcpy>:
    4024:	fb 01       	movw	r30, r22
    4026:	dc 01       	movw	r26, r24
    4028:	02 c0       	rjmp	.+4      	; 0x402e <memcpy+0xa>
    402a:	01 90       	ld	r0, Z+
    402c:	0d 92       	st	X+, r0
    402e:	41 50       	subi	r20, 0x01	; 1
    4030:	50 40       	sbci	r21, 0x00	; 0
    4032:	d8 f7       	brcc	.-10     	; 0x402a <memcpy+0x6>
    4034:	08 95       	ret

00004036 <strcpy>:
    4036:	fb 01       	movw	r30, r22
    4038:	dc 01       	movw	r26, r24
    403a:	01 90       	ld	r0, Z+
    403c:	0d 92       	st	X+, r0
    403e:	00 20       	and	r0, r0
    4040:	e1 f7       	brne	.-8      	; 0x403a <strcpy+0x4>
    4042:	08 95       	ret

00004044 <__prologue_saves__>:
    4044:	2f 92       	push	r2
    4046:	3f 92       	push	r3
    4048:	4f 92       	push	r4
    404a:	5f 92       	push	r5
    404c:	6f 92       	push	r6
    404e:	7f 92       	push	r7
    4050:	8f 92       	push	r8
    4052:	9f 92       	push	r9
    4054:	af 92       	push	r10
    4056:	bf 92       	push	r11
    4058:	cf 92       	push	r12
    405a:	df 92       	push	r13
    405c:	ef 92       	push	r14
    405e:	ff 92       	push	r15
    4060:	0f 93       	push	r16
    4062:	1f 93       	push	r17
    4064:	cf 93       	push	r28
    4066:	df 93       	push	r29
    4068:	cd b7       	in	r28, 0x3d	; 61
    406a:	de b7       	in	r29, 0x3e	; 62
    406c:	ca 1b       	sub	r28, r26
    406e:	db 0b       	sbc	r29, r27
    4070:	0f b6       	in	r0, 0x3f	; 63
    4072:	f8 94       	cli
    4074:	de bf       	out	0x3e, r29	; 62
    4076:	0f be       	out	0x3f, r0	; 63
    4078:	cd bf       	out	0x3d, r28	; 61
    407a:	09 94       	ijmp

0000407c <__epilogue_restores__>:
    407c:	2a 88       	ldd	r2, Y+18	; 0x12
    407e:	39 88       	ldd	r3, Y+17	; 0x11
    4080:	48 88       	ldd	r4, Y+16	; 0x10
    4082:	5f 84       	ldd	r5, Y+15	; 0x0f
    4084:	6e 84       	ldd	r6, Y+14	; 0x0e
    4086:	7d 84       	ldd	r7, Y+13	; 0x0d
    4088:	8c 84       	ldd	r8, Y+12	; 0x0c
    408a:	9b 84       	ldd	r9, Y+11	; 0x0b
    408c:	aa 84       	ldd	r10, Y+10	; 0x0a
    408e:	b9 84       	ldd	r11, Y+9	; 0x09
    4090:	c8 84       	ldd	r12, Y+8	; 0x08
    4092:	df 80       	ldd	r13, Y+7	; 0x07
    4094:	ee 80       	ldd	r14, Y+6	; 0x06
    4096:	fd 80       	ldd	r15, Y+5	; 0x05
    4098:	0c 81       	ldd	r16, Y+4	; 0x04
    409a:	1b 81       	ldd	r17, Y+3	; 0x03
    409c:	aa 81       	ldd	r26, Y+2	; 0x02
    409e:	b9 81       	ldd	r27, Y+1	; 0x01
    40a0:	ce 0f       	add	r28, r30
    40a2:	d1 1d       	adc	r29, r1
    40a4:	0f b6       	in	r0, 0x3f	; 63
    40a6:	f8 94       	cli
    40a8:	de bf       	out	0x3e, r29	; 62
    40aa:	0f be       	out	0x3f, r0	; 63
    40ac:	cd bf       	out	0x3d, r28	; 61
    40ae:	ed 01       	movw	r28, r26
    40b0:	08 95       	ret

000040b2 <__do_global_dtors>:
    40b2:	10 e0       	ldi	r17, 0x00	; 0
    40b4:	cd ee       	ldi	r28, 0xED	; 237
    40b6:	d0 e0       	ldi	r29, 0x00	; 0
    40b8:	04 c0       	rjmp	.+8      	; 0x40c2 <__do_global_dtors+0x10>
    40ba:	fe 01       	movw	r30, r28
    40bc:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <__tablejump2__>
    40c0:	21 96       	adiw	r28, 0x01	; 1
    40c2:	ce 3e       	cpi	r28, 0xEE	; 238
    40c4:	d1 07       	cpc	r29, r17
    40c6:	c9 f7       	brne	.-14     	; 0x40ba <__do_global_dtors+0x8>
    40c8:	f8 94       	cli

000040ca <__stop_program>:
    40ca:	ff cf       	rjmp	.-2      	; 0x40ca <__stop_program>
